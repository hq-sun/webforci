declare const _sfc_main: import("vue").DefineComponent<{
    /**
     * 显示的位置（“auto”放置位置将选择空间最大的一侧）
     */
    placement: {
        type: StringConstructor;
        default: string;
        validator: (value: string) => boolean;
    };
    /**
     * Disables automatically closing the popover when the user clicks away from it
     */
    disableClickAway: {
        type: BooleanConstructor;
        default: boolean;
    };
    /**
     * Offset in pixels along the trigger element
     */
    offsetSkid: {
        type: StringConstructor;
        default: string;
    };
    /**
     * Offset in pixels away from the trigger element
     */
    offsetDistance: {
        type: StringConstructor;
        default: string;
    };
    /**
     * Trigger the popper on hover
     */
    hover: {
        type: BooleanConstructor;
        default: boolean;
    };
    /**
     * Manually open/close the Popper, other events are ignored if this prop is set
     */
    show: {
        type: BooleanConstructor;
        default: null;
    };
    /**
     * Disables the Popper. If it was already open, it will be closed.
     */
    disabled: {
        type: BooleanConstructor;
        default: boolean;
    };
    /**
     * Open the Popper after a delay (ms).
     */
    openDelay: {
        type: NumberConstructor[];
        default: number;
    };
    /**
     * Close the Popper after a delay (ms).
     */
    closeDelay: {
        type: NumberConstructor[];
        default: number;
    };
    /**
     * The z-index of the Popper.
     */
    zIndex: {
        type: NumberConstructor[];
        default: number;
    };
    /**
     * Display an arrow on the popper
     */
    arrow: {
        type: BooleanConstructor;
        default: boolean;
    };
    /**
     * Stop arrow from reaching the edge of the popper
     */
    arrowPadding: {
        type: StringConstructor;
        default: string;
    };
    /**
     * If the Popper should be interactive, it will close when clicked/hovered if false
     */
    interactive: {
        type: BooleanConstructor;
        default: boolean;
    };
    /**
     * Lock the Popper into place, it will not flip dynamically when it runs out of space if true
     */
    locked: {
        type: BooleanConstructor;
        default: boolean;
    };
    /**
     * If the content is just a simple string, it can be passed in as a prop
     */
    content: {
        type: StringConstructor;
        default: null;
    };
    height: {
        type: NumberConstructor;
        default: number;
    };
    maxHeight: {
        type: NumberConstructor;
        default: number;
    };
    width: {
        type: NumberConstructor;
        default: number;
    };
    maxWidth: {
        type: NumberConstructor;
        default: number;
    };
    container: {
        type: StringConstructor;
        default: string;
    };
    appendContainer: {
        type: BooleanConstructor;
        default: boolean;
    };
    contentClass: {
        type: StringConstructor;
        default: string;
    };
    display: {
        type: StringConstructor;
        default: string;
    };
}, {
    interactiveStyle: import("vue").ComputedRef<string | null>;
    closePopper: () => Promise<void>;
    openPopper: () => Promise<void>;
    togglePopper: () => void;
    popperContainerNode: import("vue").Ref<null>;
    triggerNode: import("vue").Ref<null>;
    shouldShowPopper: import("vue").ComputedRef<any>;
    popperNode: import("vue").Ref<null>;
    modifiedIsOpen: import("vue").Ref<boolean>;
    close: any;
    zIndex: any;
}, unknown, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, {}, string, import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps, Readonly<import("vue").ExtractPropTypes<{
    /**
     * 显示的位置（“auto”放置位置将选择空间最大的一侧）
     */
    placement: {
        type: StringConstructor;
        default: string;
        validator: (value: string) => boolean;
    };
    /**
     * Disables automatically closing the popover when the user clicks away from it
     */
    disableClickAway: {
        type: BooleanConstructor;
        default: boolean;
    };
    /**
     * Offset in pixels along the trigger element
     */
    offsetSkid: {
        type: StringConstructor;
        default: string;
    };
    /**
     * Offset in pixels away from the trigger element
     */
    offsetDistance: {
        type: StringConstructor;
        default: string;
    };
    /**
     * Trigger the popper on hover
     */
    hover: {
        type: BooleanConstructor;
        default: boolean;
    };
    /**
     * Manually open/close the Popper, other events are ignored if this prop is set
     */
    show: {
        type: BooleanConstructor;
        default: null;
    };
    /**
     * Disables the Popper. If it was already open, it will be closed.
     */
    disabled: {
        type: BooleanConstructor;
        default: boolean;
    };
    /**
     * Open the Popper after a delay (ms).
     */
    openDelay: {
        type: NumberConstructor[];
        default: number;
    };
    /**
     * Close the Popper after a delay (ms).
     */
    closeDelay: {
        type: NumberConstructor[];
        default: number;
    };
    /**
     * The z-index of the Popper.
     */
    zIndex: {
        type: NumberConstructor[];
        default: number;
    };
    /**
     * Display an arrow on the popper
     */
    arrow: {
        type: BooleanConstructor;
        default: boolean;
    };
    /**
     * Stop arrow from reaching the edge of the popper
     */
    arrowPadding: {
        type: StringConstructor;
        default: string;
    };
    /**
     * If the Popper should be interactive, it will close when clicked/hovered if false
     */
    interactive: {
        type: BooleanConstructor;
        default: boolean;
    };
    /**
     * Lock the Popper into place, it will not flip dynamically when it runs out of space if true
     */
    locked: {
        type: BooleanConstructor;
        default: boolean;
    };
    /**
     * If the content is just a simple string, it can be passed in as a prop
     */
    content: {
        type: StringConstructor;
        default: null;
    };
    height: {
        type: NumberConstructor;
        default: number;
    };
    maxHeight: {
        type: NumberConstructor;
        default: number;
    };
    width: {
        type: NumberConstructor;
        default: number;
    };
    maxWidth: {
        type: NumberConstructor;
        default: number;
    };
    container: {
        type: StringConstructor;
        default: string;
    };
    appendContainer: {
        type: BooleanConstructor;
        default: boolean;
    };
    contentClass: {
        type: StringConstructor;
        default: string;
    };
    display: {
        type: StringConstructor;
        default: string;
    };
}>>, {
    zIndex: number;
    disabled: boolean;
    placement: string;
    disableClickAway: boolean;
    offsetSkid: string;
    offsetDistance: string;
    hover: boolean;
    show: boolean;
    openDelay: number;
    closeDelay: number;
    arrow: boolean;
    arrowPadding: string;
    interactive: boolean;
    locked: boolean;
    content: string;
    height: number;
    maxHeight: number;
    width: number;
    maxWidth: number;
    container: string;
    appendContainer: boolean;
    contentClass: string;
    display: string;
}>;
export default _sfc_main;

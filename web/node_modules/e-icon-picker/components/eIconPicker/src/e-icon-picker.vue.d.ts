import { nextTick, PropType, StyleValue } from "vue";
export declare class Options {
    addIconList?: Array<string>;
    removeIconList?: Array<string>;
}
export declare type Placement = "top" | "bottom";
declare const _sfc_main: import("vue").DefineComponent<{
    /**
     * 是否禁用文本框
     */
    disabled: {
        type: BooleanConstructor;
        default: boolean;
    };
    /**
     * 只读
     */
    readonly: {
        type: BooleanConstructor;
        default: boolean;
    };
    /**
     * 可清空
     */
    clearable: {
        type: BooleanConstructor;
        default: boolean;
    };
    /**
     *  e-icon-picker 样式
     */
    styles: {
        type: PropType<StyleValue>;
        default(): {};
    };
    /**
     * 弹出框位置
     */
    placement: {
        type: PropType<Placement>;
        default: string;
        validator: (value: string) => boolean;
    };
    /**
     * 值
     */
    modelValue: {
        type: StringConstructor;
        default: string;
    };
    /**
     * 参数
     */
    options: {
        type: PropType<Options>;
        default: {};
    };
    /**
     * 宽度
     */
    width: {
        type: NumberConstructor;
        default: number;
    };
    /**
     * 大小
     */
    size: {
        type: StringConstructor;
        default: string;
        validator: (value: string) => boolean;
    };
    /**
     * 原生提示
     */
    placeholder: {
        type: StringConstructor;
        default: string;
    };
    /**
     * 默认图标
     */
    defaultIcon: {
        type: StringConstructor;
        default: string;
    };
    /**
     * 空列表显示文字
     */
    emptyText: {
        type: StringConstructor;
        default(): "暂无可选图标";
    };
    /**
     * 高亮颜色
     */
    highLightColor: {
        type: StringConstructor;
        default(): "";
    };
    /**
     * zindex
     */
    zIndex: {
        type: NumberConstructor;
        default(): null;
    };
    /**
     * 是否追加到body
     */
    appendBody: {
        type: BooleanConstructor;
        default: boolean;
    };
    /**
     * 内容自定义样式
     */
    contentClass: {
        type: StringConstructor;
        default(): "";
    };
}, {
    input: import("vue").ShallowRef<({
        $: import("vue").ComponentInternalInstance;
        $data: {};
        $props: Partial<{
            prefixIcon: string;
            disabled: boolean;
            readonly: boolean;
            placeholder: string;
            style: Record<string, any>;
            clearable: boolean;
            modelValue: string;
            size: string;
        }> & Omit<Readonly<import("vue").ExtractPropTypes<{
            prefixIcon: {
                type: StringConstructor;
                default: string;
            };
            disabled: {
                type: BooleanConstructor;
                default: boolean;
            };
            readonly: {
                type: BooleanConstructor;
                default: boolean;
            };
            placeholder: {
                type: StringConstructor;
                default: string;
            };
            style: {
                type: ObjectConstructor;
                default: {};
            };
            clearable: {
                type: BooleanConstructor;
                default: boolean;
            };
            modelValue: {
                type: StringConstructor;
                default: string;
            };
            size: {
                type: StringConstructor;
                default: string;
                required: false;
            };
        }>> & import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps, "prefixIcon" | "disabled" | "readonly" | "placeholder" | "style" | "clearable" | "modelValue" | "size">;
        $attrs: {
            [x: string]: unknown;
        };
        $refs: {
            [x: string]: unknown;
        };
        $slots: Readonly<{
            [name: string]: import("vue").Slot | undefined;
        }>;
        $root: import("vue").ComponentPublicInstance<{}, {}, {}, {}, {}, {}, {}, {}, false, import("vue").ComponentOptionsBase<any, any, any, any, any, any, any, any, any, {}, {}, string>, {}> | null;
        $parent: import("vue").ComponentPublicInstance<{}, {}, {}, {}, {}, {}, {}, {}, false, import("vue").ComponentOptionsBase<any, any, any, any, any, any, any, any, any, {}, {}, string>, {}> | null;
        $emit: (event: string, ...args: any[]) => void;
        $el: any;
        $options: import("vue").ComponentOptionsBase<Readonly<import("vue").ExtractPropTypes<{
            prefixIcon: {
                type: StringConstructor;
                default: string;
            };
            disabled: {
                type: BooleanConstructor;
                default: boolean;
            };
            readonly: {
                type: BooleanConstructor;
                default: boolean;
            };
            placeholder: {
                type: StringConstructor;
                default: string;
            };
            style: {
                type: ObjectConstructor;
                default: {};
            };
            clearable: {
                type: BooleanConstructor;
                default: boolean;
            };
            modelValue: {
                type: StringConstructor;
                default: string;
            };
            size: {
                type: StringConstructor;
                default: string;
                required: false;
            };
        }>>, {
            state: {
                prefixIcon: string;
                focused: boolean;
                hovering: boolean;
            };
            handleInput: (event: Event) => void;
            handleFocus: (event: FocusEvent) => void;
            handleBlur: (event: FocusEvent) => void;
            handleChange: (event: Event) => void;
            showClear: import("vue").ComputedRef<boolean>;
            handleMouseLeave: (evt: MouseEvent) => void;
            handleMouseEnter: (evt: MouseEvent) => void;
            input: import("vue").ShallowRef<HTMLInputElement | undefined>;
            clear: () => void;
        }, unknown, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, {}, string, {
            prefixIcon: string;
            disabled: boolean;
            readonly: boolean;
            placeholder: string;
            style: Record<string, any>;
            clearable: boolean;
            modelValue: string;
            size: string;
        }, {}, string> & {
            beforeCreate?: ((() => void) | (() => void)[]) | undefined;
            created?: ((() => void) | (() => void)[]) | undefined;
            beforeMount?: ((() => void) | (() => void)[]) | undefined;
            mounted?: ((() => void) | (() => void)[]) | undefined;
            beforeUpdate?: ((() => void) | (() => void)[]) | undefined;
            updated?: ((() => void) | (() => void)[]) | undefined;
            activated?: ((() => void) | (() => void)[]) | undefined;
            deactivated?: ((() => void) | (() => void)[]) | undefined;
            beforeDestroy?: ((() => void) | (() => void)[]) | undefined;
            beforeUnmount?: ((() => void) | (() => void)[]) | undefined;
            destroyed?: ((() => void) | (() => void)[]) | undefined;
            unmounted?: ((() => void) | (() => void)[]) | undefined;
            renderTracked?: (((e: import("vue").DebuggerEvent) => void) | ((e: import("vue").DebuggerEvent) => void)[]) | undefined;
            renderTriggered?: (((e: import("vue").DebuggerEvent) => void) | ((e: import("vue").DebuggerEvent) => void)[]) | undefined;
            errorCaptured?: (((err: unknown, instance: import("vue").ComponentPublicInstance<{}, {}, {}, {}, {}, {}, {}, {}, false, import("vue").ComponentOptionsBase<any, any, any, any, any, any, any, any, any, {}, {}, string>, {}> | null, info: string) => boolean | void) | ((err: unknown, instance: import("vue").ComponentPublicInstance<{}, {}, {}, {}, {}, {}, {}, {}, false, import("vue").ComponentOptionsBase<any, any, any, any, any, any, any, any, any, {}, {}, string>, {}> | null, info: string) => boolean | void)[]) | undefined;
        };
        $forceUpdate: () => void;
        $nextTick: typeof nextTick;
        $watch<T extends string | ((...args: any) => any)>(source: T, cb: T extends (...args: any) => infer R ? (args_0: R, args_1: R) => any : (...args: any) => any, options?: import("vue").WatchOptions<boolean> | undefined): import("vue").WatchStopHandle;
    } & Readonly<import("vue").ExtractPropTypes<{
        prefixIcon: {
            type: StringConstructor;
            default: string;
        };
        disabled: {
            type: BooleanConstructor;
            default: boolean;
        };
        readonly: {
            type: BooleanConstructor;
            default: boolean;
        };
        placeholder: {
            type: StringConstructor;
            default: string;
        };
        style: {
            type: ObjectConstructor;
            default: {};
        };
        clearable: {
            type: BooleanConstructor;
            default: boolean;
        };
        modelValue: {
            type: StringConstructor;
            default: string;
        };
        size: {
            type: StringConstructor;
            default: string;
            required: false;
        };
    }>> & import("vue").ShallowUnwrapRef<{
        state: {
            prefixIcon: string;
            focused: boolean;
            hovering: boolean;
        };
        handleInput: (event: Event) => void;
        handleFocus: (event: FocusEvent) => void;
        handleBlur: (event: FocusEvent) => void;
        handleChange: (event: Event) => void;
        showClear: import("vue").ComputedRef<boolean>;
        handleMouseLeave: (evt: MouseEvent) => void;
        handleMouseEnter: (evt: MouseEvent) => void;
        input: import("vue").ShallowRef<HTMLInputElement | undefined>;
        clear: () => void;
    }> & {} & import("vue").ComponentCustomProperties & {}) | undefined>;
    eScrollbar: import("vue").ShallowRef<({
        $: import("vue").ComponentInternalInstance;
        $data: {};
        $props: Partial<{
            height: string | number;
            maxHeight: string | number;
            always: boolean;
            wrapStyle: Record<string, any>;
            noresize: boolean;
            minSize: number;
        }> & Omit<Readonly<import("vue").ExtractPropTypes<{
            height: {
                type: (StringConstructor | NumberConstructor)[];
                default: string;
            };
            maxHeight: {
                type: (StringConstructor | NumberConstructor)[];
                default: string;
            };
            wrapStyle: {
                type: ObjectConstructor;
                default: () => {};
            };
            always: BooleanConstructor;
            noresize: BooleanConstructor;
            minSize: {
                type: NumberConstructor;
                default: number;
            };
        }>> & import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps, "height" | "maxHeight" | "always" | "wrapStyle" | "noresize" | "minSize">;
        $attrs: {
            [x: string]: unknown;
        };
        $refs: {
            [x: string]: unknown;
        };
        $slots: Readonly<{
            [name: string]: import("vue").Slot | undefined;
        }>;
        $root: import("vue").ComponentPublicInstance<{}, {}, {}, {}, {}, {}, {}, {}, false, import("vue").ComponentOptionsBase<any, any, any, any, any, any, any, any, any, {}, {}, string>, {}> | null;
        $parent: import("vue").ComponentPublicInstance<{}, {}, {}, {}, {}, {}, {}, {}, false, import("vue").ComponentOptionsBase<any, any, any, any, any, any, any, any, any, {}, {}, string>, {}> | null;
        $emit: (event: string, ...args: any[]) => void;
        $el: any;
        $options: import("vue").ComponentOptionsBase<Readonly<import("vue").ExtractPropTypes<{
            height: {
                type: (StringConstructor | NumberConstructor)[];
                default: string;
            };
            maxHeight: {
                type: (StringConstructor | NumberConstructor)[];
                default: string;
            };
            wrapStyle: {
                type: ObjectConstructor;
                default: () => {};
            };
            always: BooleanConstructor;
            noresize: BooleanConstructor;
            minSize: {
                type: NumberConstructor;
                default: number;
            };
        }>>, {
            eScrollbar: import("vue").Ref<HTMLDivElement | undefined>;
            wrap: import("vue").Ref<HTMLDivElement | undefined>;
            style: import("vue").ComputedRef<StyleValue>;
            sizeWidth: import("vue").Ref<{
                toString: (radix?: number | undefined) => string;
                toFixed: (fractionDigits?: number | undefined) => string;
                toExponential: (fractionDigits?: number | undefined) => string;
                toPrecision: (precision?: number | undefined) => string;
                valueOf: () => number;
                toLocaleString: {
                    (locales?: string | string[] | undefined, options?: Intl.NumberFormatOptions | undefined): string;
                    (locales?: Intl.LocalesArgument, options?: Intl.NumberFormatOptions | undefined): string;
                };
            }>;
            sizeHeight: import("vue").Ref<{
                toString: (radix?: number | undefined) => string;
                toFixed: (fractionDigits?: number | undefined) => string;
                toExponential: (fractionDigits?: number | undefined) => string;
                toPrecision: (precision?: number | undefined) => string;
                valueOf: () => number;
                toLocaleString: {
                    (locales?: string | string[] | undefined, options?: Intl.NumberFormatOptions | undefined): string;
                    (locales?: Intl.LocalesArgument, options?: Intl.NumberFormatOptions | undefined): string;
                };
            }>;
            ratioX: import("vue").Ref<{
                toString: (radix?: number | undefined) => string;
                toFixed: (fractionDigits?: number | undefined) => string;
                toExponential: (fractionDigits?: number | undefined) => string;
                toPrecision: (precision?: number | undefined) => string;
                valueOf: () => number;
                toLocaleString: {
                    (locales?: string | string[] | undefined, options?: Intl.NumberFormatOptions | undefined): string;
                    (locales?: Intl.LocalesArgument, options?: Intl.NumberFormatOptions | undefined): string;
                };
            }>;
            ratioY: import("vue").Ref<{
                toString: (radix?: number | undefined) => string;
                toFixed: (fractionDigits?: number | undefined) => string;
                toExponential: (fractionDigits?: number | undefined) => string;
                toPrecision: (precision?: number | undefined) => string;
                valueOf: () => number;
                toLocaleString: {
                    (locales?: string | string[] | undefined, options?: Intl.NumberFormatOptions | undefined): string;
                    (locales?: Intl.LocalesArgument, options?: Intl.NumberFormatOptions | undefined): string;
                };
            }>;
            update: () => void;
            barRef: import("vue").Ref<({
                $: import("vue").ComponentInternalInstance;
                $data: {};
                $props: Partial<{
                    height: number;
                    width: number;
                    always: boolean;
                    ratioY: number;
                    ratioX: number;
                }> & Omit<Readonly<import("vue").ExtractPropTypes<{
                    always: {
                        type: BooleanConstructor;
                        default: boolean;
                    };
                    ratioY: {
                        type: NumberConstructor;
                        default: number;
                    };
                    ratioX: {
                        type: NumberConstructor;
                        default: number;
                    };
                    width: {
                        type: NumberConstructor;
                        default: number;
                    };
                    height: {
                        type: NumberConstructor;
                        default: number;
                    };
                }>> & import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps, "height" | "width" | "always" | "ratioY" | "ratioX">;
                $attrs: {
                    [x: string]: unknown;
                };
                $refs: {
                    [x: string]: unknown;
                };
                $slots: Readonly<{
                    [name: string]: import("vue").Slot | undefined;
                }>;
                $root: import("vue").ComponentPublicInstance<{}, {}, {}, {}, {}, {}, {}, {}, false, import("vue").ComponentOptionsBase<any, any, any, any, any, any, any, any, any, {}, {}, string>, {}> | null;
                $parent: import("vue").ComponentPublicInstance<{}, {}, {}, {}, {}, {}, {}, {}, false, import("vue").ComponentOptionsBase<any, any, any, any, any, any, any, any, any, {}, {}, string>, {}> | null;
                $emit: (event: string, ...args: any[]) => void;
                $el: any;
                $options: import("vue").ComponentOptionsBase<Readonly<import("vue").ExtractPropTypes<{
                    always: {
                        type: BooleanConstructor;
                        default: boolean;
                    };
                    ratioY: {
                        type: NumberConstructor;
                        default: number;
                    };
                    ratioX: {
                        type: NumberConstructor;
                        default: number;
                    };
                    width: {
                        type: NumberConstructor;
                        default: number;
                    };
                    height: {
                        type: NumberConstructor;
                        default: number;
                    };
                }>>, {
                    /**
                     * 只读
                     */
                    handleScroll: (wrap: HTMLDivElement) => void;
                    moveX: import("vue").Ref<number>;
                    moveY: import("vue").Ref<number>;
                }, unknown, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, {}, string, {
                    height: number;
                    width: number;
                    always: boolean;
                    ratioY: number;
                    ratioX: number;
                }, {}, string> & {
                    beforeCreate?: ((() => void) | (() => void)[]) | undefined;
                    created?: ((() => void) | (() => void)[]) | undefined;
                    beforeMount?: ((() => void) | (() => void)[]) | undefined;
                    mounted?: ((() => void) | (() => void)[]) | undefined;
                    beforeUpdate?: ((() => void) | (() => void)[]) | undefined;
                    updated?: ((() => void) | (() => void)[]) | undefined;
                    activated?: ((() => void) | (() => void)[]) | undefined;
                    deactivated?: ((() => void) | (() => void)[]) | undefined;
                    beforeDestroy?: ((() => void) | (() => void)[]) | undefined;
                    beforeUnmount?: ((() => void) | (() => void)[]) | undefined;
                    destroyed?: ((() => void) | (() => void)[]) | undefined;
                    unmounted?: ((() => void) | (() => void)[]) | undefined;
                    renderTracked?: (((e: import("vue").DebuggerEvent) => void) | ((e: import("vue").DebuggerEvent) => void)[]) | undefined;
                    renderTriggered?: (((e: import("vue").DebuggerEvent) => void) | ((e: import("vue").DebuggerEvent) => void)[]) | undefined;
                    errorCaptured?: (((err: unknown, instance: import("vue").ComponentPublicInstance<{}, {}, {}, {}, {}, {}, {}, {}, false, import("vue").ComponentOptionsBase<any, any, any, any, any, any, any, any, any, {}, {}, string>, {}> | null, info: string) => boolean | void) | ((err: unknown, instance: import("vue").ComponentPublicInstance<{}, {}, {}, {}, {}, {}, {}, {}, false, import("vue").ComponentOptionsBase<any, any, any, any, any, any, any, any, any, {}, {}, string>, {}> | null, info: string) => boolean | void)[]) | undefined;
                };
                $forceUpdate: () => void;
                $nextTick: typeof nextTick;
                $watch<T extends string | ((...args: any) => any)>(source: T, cb: T extends (...args: any) => infer R ? (args_0: R, args_1: R) => any : (...args: any) => any, options?: import("vue").WatchOptions<boolean> | undefined): import("vue").WatchStopHandle;
            } & Readonly<import("vue").ExtractPropTypes<{
                always: {
                    type: BooleanConstructor;
                    default: boolean;
                };
                ratioY: {
                    type: NumberConstructor;
                    default: number;
                };
                ratioX: {
                    type: NumberConstructor;
                    default: number;
                };
                width: {
                    type: NumberConstructor;
                    default: number;
                };
                height: {
                    type: NumberConstructor;
                    default: number;
                };
            }>> & import("vue").ShallowUnwrapRef<{
                /**
                 * 只读
                 */
                handleScroll: (wrap: HTMLDivElement) => void;
                moveX: import("vue").Ref<number>;
                moveY: import("vue").Ref<number>;
            }> & {} & import("vue").ComponentCustomProperties & {}) | undefined>;
            handleScroll: () => void;
            setScrollTop: (value: number) => void;
            setScrollLeft: (value: number) => void;
            scrollTo: (arg1: any, arg2?: any) => void;
        }, unknown, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, {}, string, {
            height: string | number;
            maxHeight: string | number;
            always: boolean;
            wrapStyle: Record<string, any>;
            noresize: boolean;
            minSize: number;
        }, {}, string> & {
            beforeCreate?: ((() => void) | (() => void)[]) | undefined;
            created?: ((() => void) | (() => void)[]) | undefined;
            beforeMount?: ((() => void) | (() => void)[]) | undefined;
            mounted?: ((() => void) | (() => void)[]) | undefined;
            beforeUpdate?: ((() => void) | (() => void)[]) | undefined;
            updated?: ((() => void) | (() => void)[]) | undefined;
            activated?: ((() => void) | (() => void)[]) | undefined;
            deactivated?: ((() => void) | (() => void)[]) | undefined;
            beforeDestroy?: ((() => void) | (() => void)[]) | undefined;
            beforeUnmount?: ((() => void) | (() => void)[]) | undefined;
            destroyed?: ((() => void) | (() => void)[]) | undefined;
            unmounted?: ((() => void) | (() => void)[]) | undefined;
            renderTracked?: (((e: import("vue").DebuggerEvent) => void) | ((e: import("vue").DebuggerEvent) => void)[]) | undefined;
            renderTriggered?: (((e: import("vue").DebuggerEvent) => void) | ((e: import("vue").DebuggerEvent) => void)[]) | undefined;
            errorCaptured?: (((err: unknown, instance: import("vue").ComponentPublicInstance<{}, {}, {}, {}, {}, {}, {}, {}, false, import("vue").ComponentOptionsBase<any, any, any, any, any, any, any, any, any, {}, {}, string>, {}> | null, info: string) => boolean | void) | ((err: unknown, instance: import("vue").ComponentPublicInstance<{}, {}, {}, {}, {}, {}, {}, {}, false, import("vue").ComponentOptionsBase<any, any, any, any, any, any, any, any, any, {}, {}, string>, {}> | null, info: string) => boolean | void)[]) | undefined;
        };
        $forceUpdate: () => void;
        $nextTick: typeof nextTick;
        $watch<T extends string | ((...args: any) => any)>(source: T, cb: T extends (...args: any) => infer R ? (args_0: R, args_1: R) => any : (...args: any) => any, options?: import("vue").WatchOptions<boolean> | undefined): import("vue").WatchStopHandle;
    } & Readonly<import("vue").ExtractPropTypes<{
        height: {
            type: (StringConstructor | NumberConstructor)[];
            default: string;
        };
        maxHeight: {
            type: (StringConstructor | NumberConstructor)[];
            default: string;
        };
        wrapStyle: {
            type: ObjectConstructor;
            default: () => {};
        };
        always: BooleanConstructor;
        noresize: BooleanConstructor;
        minSize: {
            type: NumberConstructor;
            default: number;
        };
    }>> & import("vue").ShallowUnwrapRef<{
        eScrollbar: import("vue").Ref<HTMLDivElement | undefined>;
        wrap: import("vue").Ref<HTMLDivElement | undefined>;
        style: import("vue").ComputedRef<StyleValue>;
        sizeWidth: import("vue").Ref<{
            toString: (radix?: number | undefined) => string;
            toFixed: (fractionDigits?: number | undefined) => string;
            toExponential: (fractionDigits?: number | undefined) => string;
            toPrecision: (precision?: number | undefined) => string;
            valueOf: () => number;
            toLocaleString: {
                (locales?: string | string[] | undefined, options?: Intl.NumberFormatOptions | undefined): string;
                (locales?: Intl.LocalesArgument, options?: Intl.NumberFormatOptions | undefined): string;
            };
        }>;
        sizeHeight: import("vue").Ref<{
            toString: (radix?: number | undefined) => string;
            toFixed: (fractionDigits?: number | undefined) => string;
            toExponential: (fractionDigits?: number | undefined) => string;
            toPrecision: (precision?: number | undefined) => string;
            valueOf: () => number;
            toLocaleString: {
                (locales?: string | string[] | undefined, options?: Intl.NumberFormatOptions | undefined): string;
                (locales?: Intl.LocalesArgument, options?: Intl.NumberFormatOptions | undefined): string;
            };
        }>;
        ratioX: import("vue").Ref<{
            toString: (radix?: number | undefined) => string;
            toFixed: (fractionDigits?: number | undefined) => string;
            toExponential: (fractionDigits?: number | undefined) => string;
            toPrecision: (precision?: number | undefined) => string;
            valueOf: () => number;
            toLocaleString: {
                (locales?: string | string[] | undefined, options?: Intl.NumberFormatOptions | undefined): string;
                (locales?: Intl.LocalesArgument, options?: Intl.NumberFormatOptions | undefined): string;
            };
        }>;
        ratioY: import("vue").Ref<{
            toString: (radix?: number | undefined) => string;
            toFixed: (fractionDigits?: number | undefined) => string;
            toExponential: (fractionDigits?: number | undefined) => string;
            toPrecision: (precision?: number | undefined) => string;
            valueOf: () => number;
            toLocaleString: {
                (locales?: string | string[] | undefined, options?: Intl.NumberFormatOptions | undefined): string;
                (locales?: Intl.LocalesArgument, options?: Intl.NumberFormatOptions | undefined): string;
            };
        }>;
        update: () => void;
        barRef: import("vue").Ref<({
            $: import("vue").ComponentInternalInstance;
            $data: {};
            $props: Partial<{
                height: number;
                width: number;
                always: boolean;
                ratioY: number;
                ratioX: number;
            }> & Omit<Readonly<import("vue").ExtractPropTypes<{
                always: {
                    type: BooleanConstructor;
                    default: boolean;
                };
                ratioY: {
                    type: NumberConstructor;
                    default: number;
                };
                ratioX: {
                    type: NumberConstructor;
                    default: number;
                };
                width: {
                    type: NumberConstructor;
                    default: number;
                };
                height: {
                    type: NumberConstructor;
                    default: number;
                };
            }>> & import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps, "height" | "width" | "always" | "ratioY" | "ratioX">;
            $attrs: {
                [x: string]: unknown;
            };
            $refs: {
                [x: string]: unknown;
            };
            $slots: Readonly<{
                [name: string]: import("vue").Slot | undefined;
            }>;
            $root: import("vue").ComponentPublicInstance<{}, {}, {}, {}, {}, {}, {}, {}, false, import("vue").ComponentOptionsBase<any, any, any, any, any, any, any, any, any, {}, {}, string>, {}> | null;
            $parent: import("vue").ComponentPublicInstance<{}, {}, {}, {}, {}, {}, {}, {}, false, import("vue").ComponentOptionsBase<any, any, any, any, any, any, any, any, any, {}, {}, string>, {}> | null;
            $emit: (event: string, ...args: any[]) => void;
            $el: any;
            $options: import("vue").ComponentOptionsBase<Readonly<import("vue").ExtractPropTypes<{
                always: {
                    type: BooleanConstructor;
                    default: boolean;
                };
                ratioY: {
                    type: NumberConstructor;
                    default: number;
                };
                ratioX: {
                    type: NumberConstructor;
                    default: number;
                };
                width: {
                    type: NumberConstructor;
                    default: number;
                };
                height: {
                    type: NumberConstructor;
                    default: number;
                };
            }>>, {
                /**
                 * 只读
                 */
                handleScroll: (wrap: HTMLDivElement) => void;
                moveX: import("vue").Ref<number>;
                moveY: import("vue").Ref<number>;
            }, unknown, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, {}, string, {
                height: number;
                width: number;
                always: boolean;
                ratioY: number;
                ratioX: number;
            }, {}, string> & {
                beforeCreate?: ((() => void) | (() => void)[]) | undefined;
                created?: ((() => void) | (() => void)[]) | undefined;
                beforeMount?: ((() => void) | (() => void)[]) | undefined;
                mounted?: ((() => void) | (() => void)[]) | undefined;
                beforeUpdate?: ((() => void) | (() => void)[]) | undefined;
                updated?: ((() => void) | (() => void)[]) | undefined;
                activated?: ((() => void) | (() => void)[]) | undefined;
                deactivated?: ((() => void) | (() => void)[]) | undefined;
                beforeDestroy?: ((() => void) | (() => void)[]) | undefined;
                beforeUnmount?: ((() => void) | (() => void)[]) | undefined;
                destroyed?: ((() => void) | (() => void)[]) | undefined;
                unmounted?: ((() => void) | (() => void)[]) | undefined;
                renderTracked?: (((e: import("vue").DebuggerEvent) => void) | ((e: import("vue").DebuggerEvent) => void)[]) | undefined;
                renderTriggered?: (((e: import("vue").DebuggerEvent) => void) | ((e: import("vue").DebuggerEvent) => void)[]) | undefined;
                errorCaptured?: (((err: unknown, instance: import("vue").ComponentPublicInstance<{}, {}, {}, {}, {}, {}, {}, {}, false, import("vue").ComponentOptionsBase<any, any, any, any, any, any, any, any, any, {}, {}, string>, {}> | null, info: string) => boolean | void) | ((err: unknown, instance: import("vue").ComponentPublicInstance<{}, {}, {}, {}, {}, {}, {}, {}, false, import("vue").ComponentOptionsBase<any, any, any, any, any, any, any, any, any, {}, {}, string>, {}> | null, info: string) => boolean | void)[]) | undefined;
            };
            $forceUpdate: () => void;
            $nextTick: typeof nextTick;
            $watch<T extends string | ((...args: any) => any)>(source: T, cb: T extends (...args: any) => infer R ? (args_0: R, args_1: R) => any : (...args: any) => any, options?: import("vue").WatchOptions<boolean> | undefined): import("vue").WatchStopHandle;
        } & Readonly<import("vue").ExtractPropTypes<{
            always: {
                type: BooleanConstructor;
                default: boolean;
            };
            ratioY: {
                type: NumberConstructor;
                default: number;
            };
            ratioX: {
                type: NumberConstructor;
                default: number;
            };
            width: {
                type: NumberConstructor;
                default: number;
            };
            height: {
                type: NumberConstructor;
                default: number;
            };
        }>> & import("vue").ShallowUnwrapRef<{
            /**
             * 只读
             */
            handleScroll: (wrap: HTMLDivElement) => void;
            moveX: import("vue").Ref<number>;
            moveY: import("vue").Ref<number>;
        }> & {} & import("vue").ComponentCustomProperties & {}) | undefined>;
        handleScroll: () => void;
        setScrollTop: (value: number) => void;
        setScrollLeft: (value: number) => void;
        scrollTo: (arg1: any, arg2?: any) => void;
    }> & {} & import("vue").ComponentCustomProperties & {}) | undefined>;
    popover: import("vue").ShallowRef<({
        $: import("vue").ComponentInternalInstance;
        $data: {};
        $props: Partial<{
            zIndex: number;
            disabled: boolean;
            placement: string;
            disableClickAway: boolean;
            offsetSkid: string;
            offsetDistance: string;
            hover: boolean;
            show: boolean;
            openDelay: number;
            closeDelay: number;
            arrow: boolean;
            arrowPadding: string;
            interactive: boolean;
            locked: boolean;
            content: string;
            height: number;
            maxHeight: number;
            width: number;
            maxWidth: number;
            container: string;
            appendContainer: boolean;
            contentClass: string;
            display: string;
        }> & Omit<Readonly<import("vue").ExtractPropTypes<{
            placement: {
                type: StringConstructor;
                default: string;
                validator: (value: string) => boolean;
            };
            disableClickAway: {
                type: BooleanConstructor;
                default: boolean;
            };
            offsetSkid: {
                type: StringConstructor;
                default: string; /**
                 *  e-icon-picker 样式
                 */
            };
            offsetDistance: {
                type: StringConstructor;
                default: string;
            };
            hover: {
                type: BooleanConstructor;
                default: boolean;
            };
            show: {
                type: BooleanConstructor;
                default: null;
            };
            disabled: {
                type: BooleanConstructor;
                default: boolean;
            };
            openDelay: {
                type: NumberConstructor[];
                default: number;
            };
            closeDelay: {
                type: NumberConstructor[];
                default: number;
            };
            zIndex: {
                type: NumberConstructor[];
                default: number; /**
                 * 原生提示
                 */
            };
            arrow: {
                type: BooleanConstructor;
                /**
                 * 默认图标
                 */
                default: boolean;
            };
            arrowPadding: {
                type: StringConstructor;
                default: string;
            };
            interactive: {
                type: BooleanConstructor;
                default: boolean;
            };
            locked: {
                type: BooleanConstructor;
                default: boolean;
            };
            content: {
                type: StringConstructor;
                default: null;
            };
            height: {
                type: NumberConstructor;
                default: number;
            };
            maxHeight: {
                type: NumberConstructor;
                default: number;
            };
            width: {
                type: NumberConstructor;
                default: number;
            };
            maxWidth: {
                type: NumberConstructor;
                default: number;
            };
            container: {
                type: StringConstructor;
                default: string;
            };
            appendContainer: {
                type: BooleanConstructor;
                default: boolean;
            };
            contentClass: {
                type: StringConstructor;
                default: string;
            };
            display: {
                type: StringConstructor;
                default: string;
            };
        }>> & import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps, "zIndex" | "disabled" | "placement" | "disableClickAway" | "offsetSkid" | "offsetDistance" | "hover" | "show" | "openDelay" | "closeDelay" | "arrow" | "arrowPadding" | "interactive" | "locked" | "content" | "height" | "maxHeight" | "width" | "maxWidth" | "container" | "appendContainer" | "contentClass" | "display">;
        $attrs: {
            [x: string]: unknown;
        };
        $refs: {
            [x: string]: unknown;
        };
        $slots: Readonly<{
            [name: string]: import("vue").Slot | undefined;
        }>;
        $root: import("vue").ComponentPublicInstance<{}, {}, {}, {}, {}, {}, {}, {}, false, import("vue").ComponentOptionsBase<any, any, any, any, any, any, any, any, any, {}, {}, string>, {}> | null;
        $parent: import("vue").ComponentPublicInstance<{}, {}, {}, {}, {}, {}, {}, {}, false, import("vue").ComponentOptionsBase<any, any, any, any, any, any, any, any, any, {}, {}, string>, {}> | null;
        $emit: (event: string, ...args: any[]) => void;
        $el: any;
        $options: import("vue").ComponentOptionsBase<Readonly<import("vue").ExtractPropTypes<{
            placement: {
                type: StringConstructor;
                default: string;
                validator: (value: string) => boolean;
            };
            disableClickAway: {
                type: BooleanConstructor;
                default: boolean;
            };
            offsetSkid: {
                type: StringConstructor;
                default: string; /**
                 *  e-icon-picker 样式
                 */
            };
            offsetDistance: {
                type: StringConstructor;
                default: string;
            };
            hover: {
                type: BooleanConstructor;
                default: boolean;
            };
            show: {
                type: BooleanConstructor;
                default: null;
            };
            disabled: {
                type: BooleanConstructor;
                default: boolean;
            };
            openDelay: {
                type: NumberConstructor[];
                default: number;
            };
            closeDelay: {
                type: NumberConstructor[];
                default: number;
            };
            zIndex: {
                type: NumberConstructor[];
                default: number; /**
                 * 原生提示
                 */
            };
            arrow: {
                type: BooleanConstructor;
                /**
                 * 默认图标
                 */
                default: boolean;
            };
            arrowPadding: {
                type: StringConstructor;
                default: string;
            };
            interactive: {
                type: BooleanConstructor;
                default: boolean;
            };
            locked: {
                type: BooleanConstructor;
                default: boolean;
            };
            content: {
                type: StringConstructor;
                default: null;
            };
            height: {
                type: NumberConstructor;
                default: number;
            };
            maxHeight: {
                type: NumberConstructor;
                default: number;
            };
            width: {
                type: NumberConstructor;
                default: number;
            };
            maxWidth: {
                type: NumberConstructor;
                default: number;
            };
            container: {
                type: StringConstructor;
                default: string;
            };
            appendContainer: {
                type: BooleanConstructor;
                default: boolean;
            };
            contentClass: {
                type: StringConstructor;
                default: string;
            };
            display: {
                type: StringConstructor;
                default: string;
            };
        }>>, {
            interactiveStyle: import("vue").ComputedRef<string | null>;
            closePopper: () => Promise<void>;
            openPopper: () => Promise<void>;
            togglePopper: () => void;
            popperContainerNode: import("vue").Ref<null>;
            triggerNode: import("vue").Ref<null>;
            shouldShowPopper: import("vue").ComputedRef<any>;
            popperNode: import("vue").Ref<null>;
            modifiedIsOpen: import("vue").Ref<boolean>;
            close: any;
            zIndex: any;
        }, unknown, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, {}, string, {
            zIndex: number;
            disabled: boolean;
            placement: string;
            disableClickAway: boolean;
            offsetSkid: string;
            offsetDistance: string;
            hover: boolean;
            show: boolean;
            openDelay: number;
            closeDelay: number;
            arrow: boolean;
            arrowPadding: string;
            interactive: boolean;
            locked: boolean;
            content: string;
            height: number;
            maxHeight: number;
            width: number;
            maxWidth: number;
            container: string;
            appendContainer: boolean;
            contentClass: string;
            display: string;
        }, {}, string> & {
            beforeCreate?: ((() => void) | (() => void)[]) | undefined;
            created?: ((() => void) | (() => void)[]) | undefined;
            beforeMount?: ((() => void) | (() => void)[]) | undefined;
            mounted?: ((() => void) | (() => void)[]) | undefined;
            beforeUpdate?: ((() => void) | (() => void)[]) | undefined;
            updated?: ((() => void) | (() => void)[]) | undefined;
            activated?: ((() => void) | (() => void)[]) | undefined;
            deactivated?: ((() => void) | (() => void)[]) | undefined;
            beforeDestroy?: ((() => void) | (() => void)[]) | undefined;
            beforeUnmount?: ((() => void) | (() => void)[]) | undefined;
            destroyed?: ((() => void) | (() => void)[]) | undefined;
            unmounted?: ((() => void) | (() => void)[]) | undefined;
            renderTracked?: (((e: import("vue").DebuggerEvent) => void) | ((e: import("vue").DebuggerEvent) => void)[]) | undefined;
            renderTriggered?: (((e: import("vue").DebuggerEvent) => void) | ((e: import("vue").DebuggerEvent) => void)[]) | undefined;
            errorCaptured?: (((err: unknown, instance: import("vue").ComponentPublicInstance<{}, {}, {}, {}, {}, {}, {}, {}, false, import("vue").ComponentOptionsBase<any, any, any, any, any, any, any, any, any, {}, {}, string>, {}> | null, info: string) => boolean | void) | ((err: unknown, instance: import("vue").ComponentPublicInstance<{}, {}, {}, {}, {}, {}, {}, {}, false, import("vue").ComponentOptionsBase<any, any, any, any, any, any, any, any, any, {}, {}, string>, {}> | null, info: string) => boolean | void)[]) | undefined;
        };
        $forceUpdate: () => void;
        $nextTick: typeof nextTick;
        $watch<T extends string | ((...args: any) => any)>(source: T, cb: T extends (...args: any) => infer R ? (args_0: R, args_1: R) => any : (...args: any) => any, options?: import("vue").WatchOptions<boolean> | undefined): import("vue").WatchStopHandle;
    } & Readonly<import("vue").ExtractPropTypes<{
        placement: {
            type: StringConstructor;
            default: string;
            validator: (value: string) => boolean;
        };
        disableClickAway: {
            type: BooleanConstructor;
            default: boolean;
        };
        offsetSkid: {
            type: StringConstructor;
            default: string; /**
             *  e-icon-picker 样式
             */
        };
        offsetDistance: {
            type: StringConstructor;
            default: string;
        };
        hover: {
            type: BooleanConstructor;
            default: boolean;
        };
        show: {
            type: BooleanConstructor;
            default: null;
        };
        disabled: {
            type: BooleanConstructor;
            default: boolean;
        };
        openDelay: {
            type: NumberConstructor[];
            default: number;
        };
        closeDelay: {
            type: NumberConstructor[];
            default: number;
        };
        zIndex: {
            type: NumberConstructor[];
            default: number; /**
             * 原生提示
             */
        };
        arrow: {
            type: BooleanConstructor;
            /**
             * 默认图标
             */
            default: boolean;
        };
        arrowPadding: {
            type: StringConstructor;
            default: string;
        };
        interactive: {
            type: BooleanConstructor;
            default: boolean;
        };
        locked: {
            type: BooleanConstructor;
            default: boolean;
        };
        content: {
            type: StringConstructor;
            default: null;
        };
        height: {
            type: NumberConstructor;
            default: number;
        };
        maxHeight: {
            type: NumberConstructor;
            default: number;
        };
        width: {
            type: NumberConstructor;
            default: number;
        };
        maxWidth: {
            type: NumberConstructor;
            default: number;
        };
        container: {
            type: StringConstructor;
            default: string;
        };
        appendContainer: {
            type: BooleanConstructor;
            default: boolean;
        };
        contentClass: {
            type: StringConstructor;
            default: string;
        };
        display: {
            type: StringConstructor;
            default: string;
        };
    }>> & import("vue").ShallowUnwrapRef<{
        interactiveStyle: import("vue").ComputedRef<string | null>;
        closePopper: () => Promise<void>;
        openPopper: () => Promise<void>;
        togglePopper: () => void;
        popperContainerNode: import("vue").Ref<null>;
        triggerNode: import("vue").Ref<null>;
        shouldShowPopper: import("vue").ComputedRef<any>;
        popperNode: import("vue").Ref<null>;
        modifiedIsOpen: import("vue").Ref<boolean>;
        close: any;
        zIndex: any;
    }> & {} & import("vue").ComponentCustomProperties & {}) | undefined>;
    fasIconList: import("vue").ShallowRef<HTMLUListElement | undefined>;
    updatePopper: (zIndex: number) => void;
    createIconList: () => void;
    destroyIconList: () => void;
    show: () => void;
    hide: () => void;
    triggerWrapper: import("vue").ShallowRef<HTMLDivElement | undefined>;
    popoverShowFun: (flag: boolean) => void;
    change: (val: string) => void;
    initIcon: (type: boolean | undefined) => void;
    selectedIcon: (item: string) => void;
    addIcon: (item?: never[]) => void;
    removeIcon: (item?: never[]) => void;
}, unknown, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, ("update:modelValue" | "change" | "input")[], "update:modelValue" | "change" | "input", import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps, Readonly<import("vue").ExtractPropTypes<{
    /**
     * 是否禁用文本框
     */
    disabled: {
        type: BooleanConstructor;
        default: boolean;
    };
    /**
     * 只读
     */
    readonly: {
        type: BooleanConstructor;
        default: boolean;
    };
    /**
     * 可清空
     */
    clearable: {
        type: BooleanConstructor;
        default: boolean;
    };
    /**
     *  e-icon-picker 样式
     */
    styles: {
        type: PropType<StyleValue>;
        default(): {};
    };
    /**
     * 弹出框位置
     */
    placement: {
        type: PropType<Placement>;
        default: string;
        validator: (value: string) => boolean;
    };
    /**
     * 值
     */
    modelValue: {
        type: StringConstructor;
        default: string;
    };
    /**
     * 参数
     */
    options: {
        type: PropType<Options>;
        default: {};
    };
    /**
     * 宽度
     */
    width: {
        type: NumberConstructor;
        default: number;
    };
    /**
     * 大小
     */
    size: {
        type: StringConstructor;
        default: string;
        validator: (value: string) => boolean;
    };
    /**
     * 原生提示
     */
    placeholder: {
        type: StringConstructor;
        default: string;
    };
    /**
     * 默认图标
     */
    defaultIcon: {
        type: StringConstructor;
        default: string;
    };
    /**
     * 空列表显示文字
     */
    emptyText: {
        type: StringConstructor;
        default(): "暂无可选图标";
    };
    /**
     * 高亮颜色
     */
    highLightColor: {
        type: StringConstructor;
        default(): "";
    };
    /**
     * zindex
     */
    zIndex: {
        type: NumberConstructor;
        default(): null;
    };
    /**
     * 是否追加到body
     */
    appendBody: {
        type: BooleanConstructor;
        default: boolean;
    };
    /**
     * 内容自定义样式
     */
    contentClass: {
        type: StringConstructor;
        default(): "";
    };
}>> & {
    "onUpdate:modelValue"?: ((...args: any[]) => any) | undefined;
    onChange?: ((...args: any[]) => any) | undefined;
    onInput?: ((...args: any[]) => any) | undefined;
}, {
    zIndex: number;
    disabled: boolean;
    readonly: boolean;
    placeholder: string;
    clearable: boolean;
    modelValue: string;
    size: string;
    placement: Placement;
    width: number;
    contentClass: string;
    styles: StyleValue;
    options: Options;
    defaultIcon: string;
    emptyText: string;
    highLightColor: string;
    appendBody: boolean;
}>;
export default _sfc_main;

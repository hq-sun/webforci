import { nextTick, StyleValue } from 'vue';
declare const _sfc_main: import("vue").DefineComponent<{
    height: {
        type: (StringConstructor | NumberConstructor)[];
        default: string;
    };
    maxHeight: {
        type: (StringConstructor | NumberConstructor)[];
        default: string;
    };
    wrapStyle: {
        type: ObjectConstructor;
        default: () => {};
    };
    always: BooleanConstructor;
    noresize: BooleanConstructor;
    minSize: {
        type: NumberConstructor;
        default: number;
    };
}, {
    eScrollbar: import("vue").Ref<HTMLDivElement | undefined>;
    wrap: import("vue").Ref<HTMLDivElement | undefined>;
    style: import("vue").ComputedRef<StyleValue>;
    sizeWidth: import("vue").Ref<{
        toString: (radix?: number | undefined) => string;
        toFixed: (fractionDigits?: number | undefined) => string;
        toExponential: (fractionDigits?: number | undefined) => string;
        toPrecision: (precision?: number | undefined) => string;
        valueOf: () => number;
        toLocaleString: {
            (locales?: string | string[] | undefined, options?: Intl.NumberFormatOptions | undefined): string;
            (locales?: Intl.LocalesArgument, options?: Intl.NumberFormatOptions | undefined): string;
        };
    }>;
    sizeHeight: import("vue").Ref<{
        toString: (radix?: number | undefined) => string;
        toFixed: (fractionDigits?: number | undefined) => string;
        toExponential: (fractionDigits?: number | undefined) => string;
        toPrecision: (precision?: number | undefined) => string;
        valueOf: () => number;
        toLocaleString: {
            (locales?: string | string[] | undefined, options?: Intl.NumberFormatOptions | undefined): string;
            (locales?: Intl.LocalesArgument, options?: Intl.NumberFormatOptions | undefined): string;
        };
    }>;
    ratioX: import("vue").Ref<{
        toString: (radix?: number | undefined) => string;
        toFixed: (fractionDigits?: number | undefined) => string;
        toExponential: (fractionDigits?: number | undefined) => string;
        toPrecision: (precision?: number | undefined) => string;
        valueOf: () => number;
        toLocaleString: {
            (locales?: string | string[] | undefined, options?: Intl.NumberFormatOptions | undefined): string;
            (locales?: Intl.LocalesArgument, options?: Intl.NumberFormatOptions | undefined): string;
        };
    }>;
    ratioY: import("vue").Ref<{
        toString: (radix?: number | undefined) => string;
        toFixed: (fractionDigits?: number | undefined) => string;
        toExponential: (fractionDigits?: number | undefined) => string;
        toPrecision: (precision?: number | undefined) => string;
        valueOf: () => number;
        toLocaleString: {
            (locales?: string | string[] | undefined, options?: Intl.NumberFormatOptions | undefined): string;
            (locales?: Intl.LocalesArgument, options?: Intl.NumberFormatOptions | undefined): string;
        };
    }>;
    update: () => void;
    barRef: import("vue").Ref<({
        $: import("vue").ComponentInternalInstance;
        $data: {};
        $props: Partial<{
            height: number;
            width: number;
            always: boolean;
            ratioY: number;
            ratioX: number;
        }> & Omit<Readonly<import("vue").ExtractPropTypes<{
            always: {
                type: BooleanConstructor;
                default: boolean;
            };
            ratioY: {
                type: NumberConstructor;
                default: number;
            };
            ratioX: {
                type: NumberConstructor;
                default: number;
            };
            width: {
                type: NumberConstructor;
                default: number;
            };
            height: {
                type: NumberConstructor;
                default: number;
            };
        }>> & import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps, "height" | "width" | "always" | "ratioY" | "ratioX">;
        $attrs: {
            [x: string]: unknown;
        };
        $refs: {
            [x: string]: unknown;
        };
        $slots: Readonly<{
            [name: string]: import("vue").Slot | undefined;
        }>;
        $root: import("vue").ComponentPublicInstance<{}, {}, {}, {}, {}, {}, {}, {}, false, import("vue").ComponentOptionsBase<any, any, any, any, any, any, any, any, any, {}, {}, string>, {}> | null;
        $parent: import("vue").ComponentPublicInstance<{}, {}, {}, {}, {}, {}, {}, {}, false, import("vue").ComponentOptionsBase<any, any, any, any, any, any, any, any, any, {}, {}, string>, {}> | null;
        $emit: (event: string, ...args: any[]) => void;
        $el: any;
        $options: import("vue").ComponentOptionsBase<Readonly<import("vue").ExtractPropTypes<{
            always: {
                type: BooleanConstructor;
                default: boolean;
            };
            ratioY: {
                type: NumberConstructor;
                default: number;
            };
            ratioX: {
                type: NumberConstructor;
                default: number;
            };
            width: {
                type: NumberConstructor;
                default: number;
            };
            height: {
                type: NumberConstructor;
                default: number;
            };
        }>>, {
            handleScroll: (wrap: HTMLDivElement) => void;
            moveX: import("vue").Ref<number>;
            moveY: import("vue").Ref<number>;
        }, unknown, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, {}, string, {
            height: number;
            width: number;
            always: boolean;
            ratioY: number;
            ratioX: number;
        }, {}, string> & {
            beforeCreate?: ((() => void) | (() => void)[]) | undefined;
            created?: ((() => void) | (() => void)[]) | undefined;
            beforeMount?: ((() => void) | (() => void)[]) | undefined;
            mounted?: ((() => void) | (() => void)[]) | undefined;
            beforeUpdate?: ((() => void) | (() => void)[]) | undefined;
            updated?: ((() => void) | (() => void)[]) | undefined;
            activated?: ((() => void) | (() => void)[]) | undefined;
            deactivated?: ((() => void) | (() => void)[]) | undefined;
            beforeDestroy?: ((() => void) | (() => void)[]) | undefined;
            beforeUnmount?: ((() => void) | (() => void)[]) | undefined;
            destroyed?: ((() => void) | (() => void)[]) | undefined;
            unmounted?: ((() => void) | (() => void)[]) | undefined;
            renderTracked?: (((e: import("vue").DebuggerEvent) => void) | ((e: import("vue").DebuggerEvent) => void)[]) | undefined;
            renderTriggered?: (((e: import("vue").DebuggerEvent) => void) | ((e: import("vue").DebuggerEvent) => void)[]) | undefined;
            errorCaptured?: (((err: unknown, instance: import("vue").ComponentPublicInstance<{}, {}, {}, {}, {}, {}, {}, {}, false, import("vue").ComponentOptionsBase<any, any, any, any, any, any, any, any, any, {}, {}, string>, {}> | null, info: string) => boolean | void) | ((err: unknown, instance: import("vue").ComponentPublicInstance<{}, {}, {}, {}, {}, {}, {}, {}, false, import("vue").ComponentOptionsBase<any, any, any, any, any, any, any, any, any, {}, {}, string>, {}> | null, info: string) => boolean | void)[]) | undefined;
        };
        $forceUpdate: () => void;
        $nextTick: typeof nextTick;
        $watch<T extends string | ((...args: any) => any)>(source: T, cb: T extends (...args: any) => infer R ? (args_0: R, args_1: R) => any : (...args: any) => any, options?: import("vue").WatchOptions<boolean> | undefined): import("vue").WatchStopHandle;
    } & Readonly<import("vue").ExtractPropTypes<{
        always: {
            type: BooleanConstructor;
            default: boolean;
        };
        ratioY: {
            type: NumberConstructor;
            default: number;
        };
        ratioX: {
            type: NumberConstructor;
            default: number;
        };
        width: {
            type: NumberConstructor;
            default: number;
        };
        height: {
            type: NumberConstructor;
            default: number;
        };
    }>> & import("vue").ShallowUnwrapRef<{
        handleScroll: (wrap: HTMLDivElement) => void;
        moveX: import("vue").Ref<number>;
        moveY: import("vue").Ref<number>;
    }> & {} & import("vue").ComponentCustomProperties & {}) | undefined>;
    handleScroll: () => void;
    setScrollTop: (value: number) => void;
    setScrollLeft: (value: number) => void;
    scrollTo: (arg1: any, arg2?: any) => void;
}, unknown, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, {}, string, import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps, Readonly<import("vue").ExtractPropTypes<{
    height: {
        type: (StringConstructor | NumberConstructor)[];
        default: string;
    };
    maxHeight: {
        type: (StringConstructor | NumberConstructor)[];
        default: string;
    };
    wrapStyle: {
        type: ObjectConstructor;
        default: () => {};
    };
    always: BooleanConstructor;
    noresize: BooleanConstructor;
    minSize: {
        type: NumberConstructor;
        default: number;
    };
}>>, {
    height: string | number;
    maxHeight: string | number;
    always: boolean;
    wrapStyle: Record<string, any>;
    noresize: boolean;
    minSize: number;
}>;
export default _sfc_main;

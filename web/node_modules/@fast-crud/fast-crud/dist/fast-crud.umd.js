var I3=Object.defineProperty;var P3=(ie,de,l)=>de in ie?I3(ie,de,{enumerable:!0,configurable:!0,writable:!0,value:l}):ie[de]=l;var Ee=(ie,de,l)=>(P3(ie,typeof de!="symbol"?de+"":de,l),l),Xc=(ie,de,l)=>{if(!de.has(ie))throw TypeError("Cannot "+l)};var U=(ie,de,l)=>(Xc(ie,de,"read from private field"),l?l.call(ie):de.get(ie)),Ve=(ie,de,l)=>{if(de.has(ie))throw TypeError("Cannot add the same private member more than once");de instanceof WeakSet?de.add(ie):de.set(ie,l)},Fe=(ie,de,l,z)=>(Xc(ie,de,"write to private field"),z?z.call(ie,l):de.set(ie,l),l);var No=(ie,de,l,z)=>({set _(Vt){Fe(ie,de,Vt,l)},get _(){return U(ie,de,z)}}),be=(ie,de,l)=>(Xc(ie,de,"access private method"),l);(function(ie,de){typeof exports=="object"&&typeof module<"u"?de(exports,require("@fast-crud/ui-interface"),require("vue"),require("lodash-es"),require("dayjs"),require("@iconify/vue"),require("vue-router")):typeof define=="function"&&define.amd?define(["exports","@fast-crud/ui-interface","vue","lodash-es","dayjs","@iconify/vue","vue-router"],de):(ie=typeof globalThis<"u"?globalThis:ie||self,de(ie.FastCrud={},ie.FsUiInterface,ie.Vue,ie._,ie.dayjs,ie.IconifyVue,ie.VueRouter))})(this,function(ie,de,l,z,Vt,qm,Jm){var jm,si,en,Ar,tn,rn,oi,Pt,nn,Dt,lt,Be,ur,Dr,ir,Ht,an,jt,sn,on,Rr,ln,na,dr,ps,Kc,Da,Pn,gs,Or,Oo,Ym,Ra,li,xs,_n,ia,yn,sa,vs,Yc,w3,ci,Io,fi,Po,at,ct,ws,qc,Oa,bs;"use strict";const ui={commonOptions(e){return{}},defaultOptions(e){const{t}=e,r=a=>l.computed(()=>t(a)),n=de.uiContext.get();return{mode:{},status:{},search:{container:{is:"fs-search-layout-default",collapse:!0,col:{span:4}},options:{...n.form.inlineLayout,showFeedback:!1},onValidateError({trigger:a}){a==="search"&&n.notification.error({message:t("fs.search.error.message")})},collapse:!0,show:!0,buttons:{search:{className:{"fs-search-btn-search":!0},icon:n.icons.search},reset:{className:{"fs-search-btn-reset":!0},icon:n.icons.refresh}}},form:{labelPlacement:"left",labelPosition:"right",labelWidth:"120px",style:{"grid-template-columns":"50% 50%"},row:{gutter:10},col:{span:12},labelAlign:"right",labelCol:{span:4},wrapperCol:{span:18},wrapper:{is:n.dialog.name,...n.formWrapper.buildWidthBind(n.dialog.name,"960px"),...n.formWrapper.buildInitBind(n.dialog.name),draggable:!0,destroyOnClose:!0,...n.dialog.footer(),buttons:{cancel:{text:r("fs.form.cancel"),order:1,click:({doClose:a})=>{a()}},reset:{text:r("fs.form.reset"),order:1,click:({reset:a})=>{a()}},ok:{text:r("fs.form.ok"),order:1,type:"primary",click:async({submit:a})=>{await a()}}}}},addForm:{wrapper:{title:r("fs.addForm.title")}},editForm:{wrapper:{title:r("fs.editForm.title")}},viewForm:{wrapper:{title:r("fs.viewForm.title"),buttons:{reset:{show:!1},cancel:{show:!1}}}},rowHandle:{width:"250px",title:r("fs.rowHandle.title"),order:1e3,dropdown:{more:{text:null,type:"primary",icon:n.icons.more}}},pagination:{background:!0,pageSize:20,[n.pagination.currentPage]:1,[n.pagination.total]:1,pageSizes:[5,10,20,50],layout:"total, sizes, prev, pager, next, jumper",showSizeChanger:!0,showQuickJumper:!0,showSizePicker:!0,showTotal:a=>t("fs.pagination.showTotal",[a])},table:{show:!0,height:"100%",rowKey:n.table.defaultRowKey,stripe:!0,border:!0,bordered:!0,singleLine:!1,scrollTopOnRefreshed:!0,editable:{enabled:!1,rowKey:"$editable_id"},pagination:!1},toolbar:{compact:!0,buttons:{search:{className:{"fs-toolbar-btn-search":!0}},compact:{className:{"fs-toolbar-btn-compact":!0}},refresh:{className:{"fs-toolbar-btn-refresh":!0}},export:{className:{"fs-toolbar-btn-export":!0}},columns:{className:{"fs-toolbar-btn-columns":!0}}}},actionbar:{buttons:{add:{className:{"fs-actionbar-btn-add":!0},type:"primary",text:r("fs.actionbar.add")}}}}}};function Zm(){var t;return(t=new Error().stack)==null?void 0:t.split(`
`)[3]}const cn=(...e)=>{};function Lo(...e){console.log.apply(this,arguments)}function Qm(...e){console.warn.apply(this,arguments)}function ep(...e){console.error.apply(this,arguments)}const tp=(...e)=>{ep("%c [error]","font-weight: 600;",...e)},rp=(...e)=>{Qm("%c [warn]","font-weight: 600;",...e)},Jc=(...e)=>{Lo("%c [info]","font-weight: 600;",...e)},np=(...e)=>{if(!console.log)return;const t=Zm();{const r=["%c [debug]","font-weight: 600;",...e];Lo(...r);const n=["%c "+t,"color:#999"];Lo(...n)}},Te={debug:cn,info:cn,warn:cn,error:cn,log:cn};function Zc(e={}){const t=(e==null?void 0:e.level)||"info";switch(Te.debug=cn,Te.info=cn,Te.warn=cn,Te.error=cn,Te.log=cn,t){case"debug":Te.debug=np;case"info":Te.info=Jc,Te.log=Jc;case"warn":Te.warn=rp;case"error":Te.error=tp;break}}Zc();function ap(e){return e==null||e===""}function ip(...e){for(const t of e)if(!(t==null||t===""))return!1;return!1}function sp(...e){for(const t of e)if(t==null||t==="")return!0;return!1}const Mo={isEmpty:ap,isAllEmpty:ip,hasEmpty:sp},op={trace(e){}};function Vo(e){return l.defineAsyncComponent({loader:e,onError(t,r,n,a){console.error("load error",t),t.message.match(/fetch/)&&a<=3?r():n()}})}function lp(e,t,r,n){const a=Vo(r);e.component(t,a,n)}function cp(e,t,r,n,a){const i=di(t,n,a);z.forEach(i,(s,o)=>{r&&r.indexOf(o)!=-1||lp(e,o,s,null)})}function fp(e,t,r,n,a){const i=di(t,n,a);z.forEach(i,(s,o)=>{r&&r.indexOf(o)||e.component(o,s.default)})}function di(e,t,r){const n={};return t==null&&(t=/.*\/(.+).(vue|jsx|tsx)/),z.forEach(e,(a,i)=>{const s=i.match(t);if((s==null?void 0:s.length)<=1){console.error(`"${i}" can't pick a component name,this component can't register`);return}let o=s[1];o=z.camelCase(o),o=z.upperFirst(o),r&&(a=r(a)),n[o]=a}),n}function up(e){const t=di(e),r={};return z.forEach(t,(n,a)=>{r[a]=Vo(n)}),r}function dp(e){const t=di(e),r={};return z.forEach(t,(n,a)=>{r[a]=n.default}),r}const hp={transformFromGlob:di,installAsyncComponents:cp,installSyncComponents:fp,createAsyncComponent:Vo,loadAsyncComponentFromGlob:up,loadComponentFromGlob:dp};class Qc{constructor(t){Ee(this,"key");Ee(this,"tableId");Ee(this,"remoteStorage");const{$router:r,tableName:n,keyType:a}=t;this.key=this.getItemKey(r,a),this.tableId=this.getTableId(n),this.remoteStorage=t.remoteStorage}getTableId(t){const r="fs-crud";return t&&typeof t=="string"?r+"."+t:r}async getTable(){const t=localStorage.getItem(this.tableId);if(t!=null)return JSON.parse(t)}async saveTable(t){localStorage.setItem(this.tableId,JSON.stringify(t))}async clearTable(){localStorage.removeItem(this.tableId)}async updateTableValue(t,r=this.key){if(this.remoteStorage){await this.remoteStorage.set(r,t);return}let n=await this.getTable();n==null&&(n={}),n[r]=t,await this.saveTable(n)}getItemKey(t,r){let n=location.href;return t&&(n=t.path),r==null||typeof r!="string"||!r?n:n+"."+r}async getTableValue(t=this.key){if(this.remoteStorage)return await this.remoteStorage.get(t);const r=await this.getTable();return r==null?null:r[t]}async clearTableValue(t=this.key){if(this.remoteStorage){await this.remoteStorage.remove(t);return}const r=await this.getTable();r!=null&&(delete r[t],await this.saveTable(r))}}const mp=/\D/,pp=/^[a-zA-Z_$]+([\w_$]*)$/,gp=/"/g;function ef(...e){return e.reduce((t,r)=>t?!r||r.startsWith("[")?`${t}${r}`:`${t}.${r}`:r,"")}function tf(e){function t(r,...n){if(n=n.filter(a=>a!==void 0),e.isString(r))return ef(...n,r);if(Array.isArray(r))return n=ef(...n),r.reduce((a,i)=>{const s=typeof i;return s==="number"?i<0||i%1!==0?`${a}["${i}"]`:`${a}[${i}]`:s!=="string"?`${a}["${i}"]`:i?mp.test(i)?pp.test(i)?a?`${a}.${i}`:`${a}${i}`:`${a}["${i.replace(gp,'\\"')}"]`:`${a}[${i}]`:`${a}[""]`},n)}return t}tf.notChainable=!0;const xp=/^[a-zA-Z_$]+([\w_$]*)$/,vp=/"/g,rf=Object.prototype.hasOwnProperty;function wp(e){const t=typeof e;return e!=null&&(t=="object"||t=="function")}function _p(e){const t=tf(e);function r(i){const{options:s,obj:o,callback:c}=i;s.pathFormatArray=s.pathFormat=="array",i.depth=0;let f=!1;const u=()=>(f=!0,!1);for(;i&&!f;){if(!i.inited){if(i.inited=!0,i.info=af(i.value,s.ownPropertiesOnly),s.checkCircular&&(i.circularParentIndex=-1,i.circularParent=null,i.isCircular=!1,i.info.isObject&&!i.info.isEmpty)){let d=i.parent;for(;d;){if(d.value===i.value){i.isCircular=!0,i.circularParent=d,i.circularParentIndex=i.depth-d.depth-1;break}d=d.parent}}if(i.children=[],s.childrenPath&&s.childrenPath.forEach((d,h)=>{const p=e.get(i.value,d),g=af(p,s.ownPropertiesOnly);g.isEmpty||i.children.push([d,s.strChildrenPath[h],p,g])}),i.isLeaf=i.isCircular||s.childrenPath!==void 0&&!i.children.length||!i.info.isObject||i.info.isEmpty,i.needCallback=(i.depth||s.includeRoot)&&(!s.leavesOnly||i.isLeaf),i.needCallback){const d=new nf(o,s,u);d.setItem(i,!1);try{i.res=c(i.value,i.key,i.parent&&i.parent.value,d)}catch(h){throw h.message&&(h.message+=`
callback failed before deep iterate at:
`+t(i.path)),h}}if(f)break;i.res!==!1&&!f&&!i.isCircular&&i.info.isObject&&(s.childrenPath!==void 0&&(i.depth||!s.rootIsChildren)?(i.childrenItems=[],i.children.length&&i.children.forEach(([d,h,p,g])=>{i.childrenItems=[...i.childrenItems,...g.isArray?n(i,p,s,d,h):a(i,p,s,d,h)]})):i.childrenItems=i.info.isArray?n(i,i.value,s,[],""):a(i,i.value,s,[],"")),i.currentChildIndex=-1}if(i.childrenItems&&i.currentChildIndex<i.childrenItems.length-1){i.currentChildIndex++,i.childrenItems[i.currentChildIndex].parentItem=i,i=i.childrenItems[i.currentChildIndex];continue}if(i.needCallback&&s.callbackAfterIterate){const d=new nf(o,s,u);d.setItem(i,!0);try{c(i.value,i.key,i.parent&&i.parent.value,d)}catch(h){throw h.message&&(h.message+=`
callback failed after deep iterate at:
`+t(i.path)),h}}i=i.parentItem}}return r;function n(i,s,o,c,f){let u;o.pathFormatArray||(u=i.strPath||"",f&&u&&!f.startsWith("[")&&(u+="."),u+=f||"");const d=[];for(let h=0;h<s.length;h++){const p=s[h];if(p===void 0&&!(h in s))continue;let g;const m=!o.pathFormatArray;m&&(g=`${u}[${h}]`),d.push({value:p,key:h+"",path:[...i.path||[],...c,h+""],strPath:g,depth:i.depth+1,parent:{value:i.value,key:i.key,path:m?i.strPath:i.path,parent:i.parent,depth:i.depth,info:i.info},childrenPath:c.length&&c||void 0,strChildrenPath:f||void 0})}return d}function a(i,s,o,c,f){let u;o.pathFormatArray||(u=i.strPath||"",f&&u&&!f.startsWith("[")&&(u+="."),u+=f||"");const d=[],h=!o.pathFormatArray;for(const p in s){if(o.ownPropertiesOnly&&!rf.call(s,p))continue;let g;h&&(xp.test(p)?u?g=`${u}.${p}`:g=`${p}`:g=`${u}["${p.replace(vp,'\\"')}"]`),d.push({value:s[p],key:p,path:[...i.path||[],...c,p],strPath:g,depth:i.depth+1,parent:{value:i.value,key:i.key,path:h?i.strPath:i.path,parent:i.parent,depth:i.depth,info:i.info},childrenPath:c.length&&c||void 0,strChildrenPath:f||void 0})}return d}}class nf{constructor(t,r,n){Ee(this,"_item");Ee(this,"obj");Ee(this,"_options");Ee(this,"afterIterate");this.obj=t,this._options=r,this.break=n}setItem(t,r){this._item=t,this.afterIterate=r}get path(){return this._options.pathFormatArray?this._item.path:this._item.strPath}get parent(){return this._item.parent}get parents(){if(!this._item._parents){this._item._parents=[];let t=this._item.parent;for(;t;)this._item._parents[t.depth]=t,t=t.parent}return this._item._parents}get depth(){return this._item.depth}get isLeaf(){return this._item.isLeaf}get isCircular(){return this._item.isCircular}get circularParentIndex(){return this._item.circularParentIndex}get circularParent(){return this._item.circularParent}get childrenPath(){return this._options.childrenPath!==void 0&&(this._options.pathFormatArray?this._item.childrenPath:this._item.strChildrenPath)||void 0}get info(){return this._item.info}}function yp(e,t){for(const r in e)if(!t||rf.call(e,r))return!1;return!0}function af(e,t){const r={isObject:wp(e)};return r.isArray=r.isObject&&Array.isArray(e),r.isEmpty=r.isArray?!e.length:r.isObject?yp(e,t):!0,r}function kp(e){const t=_p(e);function r(n,a,i){if(a===void 0&&(a=e.identity),i=e.merge({includeRoot:!Array.isArray(n),pathFormat:"string",checkCircular:!1,leavesOnly:!1,ownPropertiesOnly:!0},i||{}),i.childrenPath!==void 0){if(!i.includeRoot&&i.rootIsChildren===void 0&&(i.rootIsChildren=Array.isArray(n)),!e.isString(i.childrenPath)&&!Array.isArray(i.childrenPath))throw Error("childrenPath can be string or array");e.isString(i.childrenPath)&&(i.childrenPath=[i.childrenPath]),i.strChildrenPath=i.childrenPath,i.childrenPath=[];for(let s=i.strChildrenPath.length-1;s>=0;s--)i.childrenPath[s]=e.toPath(i.strChildrenPath[s])}return t({value:n,callback:a,options:i,obj:n}),n}return r}const sf={forEachDeep:kp(z)},hi={logger:Te,strings:Mo,trace:op,vite:hp,store:Qc,deepdash:sf,dash:{omit(e,...t){const r=Object.keys(e.value),n={};for(const a of r)a!=="loading"&&(t.indexOf(a)>=0||(n[a]=e.value[a]));return n}}};function Uo(e,t){return e.type!=="antdv"?{}:{labelCol:{span:t},wrapperCol:{span:23-t}}}function Ep(){const{ui:e}=de.useUi();return{colspan:{form:{col:{span:24},...Uo(e,2)}},colspan3:{form:{col:{span:24},...Uo(e,3)}},colspan4:{form:{col:{span:24},...Uo(e,4)}}}}const bp=Object.freeze(Object.defineProperty({__proto__:null,default:Ep},Symbol.toStringTag,{value:"Module"}));function Sp(){const e=de.uiContext.get();return{button:{form:{component:{name:e.input.name,vModel:e.input.modelValue,[e.input.clearable]:!0}},column:{component:{name:"fs-button",vModel:"text"}}},link:{form:{component:{name:e.input.name,vModel:e.input.modelValue,[e.input.clearable]:!0}},column:{component:{name:"fs-button",vModel:"text",...e.button.linkType}}}}}const Tp=Object.freeze(Object.defineProperty({__proto__:null,default:Sp},Symbol.toStringTag,{value:"Module"}));function Cp(){const e=de.uiContext.get();return{"dict-cascader":{search:{component:{clearable:!0}},form:{component:{name:"fs-dict-cascader",vModel:e.cascader.modelValue,[e.cascader.clearable]:!0}},column:{component:{name:"fs-dict-cascader-format"}}}}}const Fp=Object.freeze(Object.defineProperty({__proto__:null,default:Cp},Symbol.toStringTag,{value:"Module"})),of={name:"zh-cn",fs:{component:{select:{placeholder:"请选择"}},addForm:{title:"添加"},editForm:{title:"编辑"},viewForm:{title:"查看"},rowHandle:{title:"操作",remove:{text:"删除",confirmTitle:"删除提示",confirmMessage:"您确定要删除该记录吗?",success:"删除成功!"},copy:{text:"复制"},edit:{text:"编辑"},view:{text:"查看"}},form:{cancel:"取消",ok:"确定",reset:"重置",saveRemind:{title:"提示",content:"表单数据有变更，是否保存",cancel:"不保存",ok:"保存"}},actionbar:{add:"添加"},toolbar:{columnFilter:{title:"列设置",fixed:"固定",order:"排序",reset:"还原",confirm:"确定",unnamed:"未命名"},search:{title:"查询显示"},refresh:{title:"刷新"},compact:{title:"紧凑模式"},export:{title:"导出"},columns:{title:"列设置"}},search:{container:{collapseButton:{text:{collapse:"收起",expand:"展开"}}},search:{text:"查询"},reset:{text:"重置"},error:{message:"查询表单校验失败"}},pagination:{showTotal:"共 {0} 条"},date:{formatter:{to:"至"}},extends:{tableSelect:{view:"查看",select:"选择"},cropper:{title:"图片裁剪",preview:"预览",reChoose:"重新选择",flipX:"左右翻转",flipY:"上下翻转",reset:"重置",cancel:"取消",confirm:"确定",chooseImage:"+ 选择图片",onlySupport:"仅支持",sizeLimit:"大小不能超过",sizeNoLimit:"大小不限制"},fileUploader:{text:"文件上传",limitTip:"文件数量不能超过 {0}",sizeLimitTip:"文件大小不能超过 {0},当前大小：{1}",loadError:"图片加载失败",pixelLimitTip:"图片像素尺寸不能超过 宽:{0},高:{1}",hasUploading:"还有文件正在上传，请等待上传完成，或删除它"}}}},Ap={name:"en",fs:{component:{select:{placeholder:"please select"}},addForm:{title:"add"},editForm:{title:"edit"},viewForm:{title:"view"},rowHandle:{title:"handle",remove:{text:"remove",confirmTitle:"remove tip",confirmMessage:"Are you sure you want to delete this record?",success:"delete success!"},copy:{text:"copy"},edit:{text:"edit"},view:{text:"view"}},form:{cancel:"cancel",ok:"ok",reset:"reset",saveRemind:{title:"save remind",content:"The form data has changed, whether to save",cancel:"don't save",ok:"save"}},actionbar:{add:"add"},toolbar:{columnFilter:{title:"columns set",fixed:"fixed",order:"sort",reset:"reset",confirm:"ok",unnamed:"unnamed"},search:{title:"show search bar"},refresh:{title:"refresh"},compact:{title:"compact mode"},export:{title:"export"},columns:{title:"columns set"}},search:{container:{collapseButton:{text:{collapse:"collapse",expand:"expand"}}},search:{text:"search"},reset:{text:"reset"},error:{message:"form valid error"}},pagination:{showTotal:"Total {0} items"},date:{formatter:{to:"to"}},extends:{tableSelect:{view:"view",select:"select"},cropper:{title:"image crop",preview:"preview",reChoose:"reChoose",flipX:"flipX",flipY:"flipY",reset:"reset",cancel:"cancel",confirm:"confirm",chooseImage:"+ choose image",onlySupport:"only",sizeLimit:"size limit",sizeNoLimit:" no limit"},fileUploader:{text:"fileUpload",limitTip:"file count limit: {0}",sizeLimitTip:"file size limit:  {0}, current size: {1}",loadError:"image load error",pixelLimitTip:"pixel limit : width:{0},height:{1}",hasUploading:"The file is being uploaded, please wait for the upload to complete or delete"}}}};function Dp(e,t){let r=z.get(of,e);return r==null?e:t instanceof Array?(z.forEach(t,(n,a)=>{r=r.replace("{"+a+"}",n)}),r):r.replace("{n}",t)}class Rp{constructor(){Ee(this,"vueI18nInstance",null)}t(t,r){return Dp(t,r)}setVueI18n(t){if(!t)return;t.global&&(t=t.global);const r=t.availableLocales;for(const n of r){if(n.startsWith("zh")){const a=t.getLocaleMessage(n),i=z.cloneDeep(a.fs||{});t.mergeLocaleMessage(n,{fs:of.fs}),t.mergeLocaleMessage(n,{fs:i})}else if(n.startsWith("en")){const a=t.getLocaleMessage(n),i=z.cloneDeep(a.fs||{});t.mergeLocaleMessage(n,{fs:Ap.fs}),t.mergeLocaleMessage(n,{fs:i})}Te.debug("i18n",t.getLocaleMessage(n))}this.vueI18nInstance=t}}const Ss=new Rp;function Yt(){return Ss.vueI18nInstance!=null?{t:Ss.vueI18nInstance.t}:{t:Ss.t}}var En=typeof globalThis<"u"?globalThis:typeof window<"u"?window:typeof global<"u"?global:typeof self<"u"?self:{};function mi(e){return e&&e.__esModule&&Object.prototype.hasOwnProperty.call(e,"default")?e.default:e}var lf={exports:{}};(function(e,t){(function(r,n){e.exports=n()})(En,function(){return function(r,n){var a=n.prototype,i=a.format;a.format=function(s){var o=this,c=this.$locale();if(!this.isValid())return i.bind(this)(s);var f=this.$utils(),u=(s||"YYYY-MM-DDTHH:mm:ssZ").replace(/\[([^\]]+)]|Q|wo|ww|w|WW|W|zzz|z|gggg|GGGG|Do|X|x|k{1,2}|S/g,function(d){switch(d){case"Q":return Math.ceil((o.$M+1)/3);case"Do":return c.ordinal(o.$D);case"gggg":return o.weekYear();case"GGGG":return o.isoWeekYear();case"wo":return c.ordinal(o.week(),"W");case"w":case"ww":return f.s(o.week(),d==="w"?1:2,"0");case"W":case"WW":return f.s(o.isoWeek(),d==="W"?1:2,"0");case"k":case"kk":return f.s(String(o.$H===0?24:o.$H),d==="k"?1:2,"0");case"X":return Math.floor(o.$d.getTime()/1e3);case"x":return o.$d.getTime();case"z":return"["+o.offsetName()+"]";case"zzz":return"["+o.offsetName("long")+"]";default:return d}});return i.bind(this)(u)}}})})(lf);var Op=lf.exports;const Bp=mi(Op);Vt.extend(Bp);function $o(e,t){if(!Mo.isEmpty(e))return Vt(e).format(t)}function cf(e,t="YYYY-MM-DD HH:mm:ss"){if(e!=null&&e instanceof Array&&e.length>1){if(Mo.hasEmpty(e))return;const{t:r}=Yt();return`${$o(e[0],t)} ${r("fs.date.formatter.to")} ${$o(e[1],t)}`}return $o(e,t)}function Np(e){const{value:t}=e;return cf(t,"YYYY-MM-DD")}function Ip(e){const{value:t}=e;return cf(t,"YYYY-MM-DD HH:mm:ss")}var ff={exports:{}};(function(e,t){(function(r,n){e.exports=n()})(En,function(){var r="week",n="year";return function(a,i,s){var o=i.prototype;o.week=function(c){if(c===void 0&&(c=null),c!==null)return this.add(7*(c-this.week()),"day");var f=this.$locale().yearStart||1;if(this.month()===11&&this.date()>25){var u=s(this).startOf(n).add(1,n).date(f),d=s(this).endOf(r);if(u.isBefore(d))return 1}var h=s(this).startOf(n).date(f).startOf(r).subtract(1,"millisecond"),p=this.diff(h,r,!0);return p<0?s(this).startOf("week").week():Math.ceil(p)},o.weeks=function(c){return c===void 0&&(c=null),this.week(c)}}})})(ff);var Pp=ff.exports;const Lp=mi(Pp);var uf={exports:{}};(function(e,t){(function(r,n){e.exports=n()})(En,function(){return function(r,n){n.prototype.weekday=function(a){var i=this.$locale().weekStart||0,s=this.$W,o=(s<i?s+7:s)-i;return this.$utils().u(a)?o:this.subtract(o,"day").add(a,"day")}}})})(uf);var Mp=uf.exports;const Vp=mi(Mp);var df={exports:{}};(function(e,t){(function(r,n){e.exports=n()})(En,function(){return function(r,n,a){var i=n.prototype,s=function(d){return d&&(d.indexOf?d:d.s)},o=function(d,h,p,g,m){var x=d.name?d:d.$locale(),v=s(x[h]),y=s(x[p]),_=v||y.map(function(D){return D.slice(0,g)});if(!m)return _;var b=x.weekStart;return _.map(function(D,C){return _[(C+(b||0))%7]})},c=function(){return a.Ls[a.locale()]},f=function(d,h){return d.formats[h]||function(p){return p.replace(/(\[[^\]]+])|(MMMM|MM|DD|dddd)/g,function(g,m,x){return m||x.slice(1)})}(d.formats[h.toUpperCase()])},u=function(){var d=this;return{months:function(h){return h?h.format("MMMM"):o(d,"months")},monthsShort:function(h){return h?h.format("MMM"):o(d,"monthsShort","months",3)},firstDayOfWeek:function(){return d.$locale().weekStart||0},weekdays:function(h){return h?h.format("dddd"):o(d,"weekdays")},weekdaysMin:function(h){return h?h.format("dd"):o(d,"weekdaysMin","weekdays",2)},weekdaysShort:function(h){return h?h.format("ddd"):o(d,"weekdaysShort","weekdays",3)},longDateFormat:function(h){return f(d.$locale(),h)},meridiem:this.$locale().meridiem,ordinal:this.$locale().ordinal}};i.localeData=function(){return u.bind(this)()},a.localeData=function(){var d=c();return{firstDayOfWeek:function(){return d.weekStart||0},weekdays:function(){return a.weekdays()},weekdaysShort:function(){return a.weekdaysShort()},weekdaysMin:function(){return a.weekdaysMin()},months:function(){return a.months()},monthsShort:function(){return a.monthsShort()},longDateFormat:function(h){return f(d,h)},meridiem:d.meridiem,ordinal:d.ordinal}},a.months=function(){return o(c(),"months")},a.monthsShort=function(){return o(c(),"monthsShort","months",3)},a.weekdays=function(d){return o(c(),"weekdays",null,null,d)},a.weekdaysShort=function(d){return o(c(),"weekdaysShort","weekdays",3,d)},a.weekdaysMin=function(d){return o(c(),"weekdaysMin","weekdays",2,d)}}})})(df);var Up=df.exports;const $p=mi(Up);Vt.extend(Vp),Vt.extend($p),Vt.extend(Lp);function Wp(){const e=de.uiContext.get();function t(n){const{row:a,key:i,value:s}=n;s!=null&&(e.type==="naive"?a[i]=Vt(s).valueOf():e.type==="antdv"&&e.version==="4"||e.type)}return{datetime:{form:{component:{...e.datePicker.buildDateType("datetime"),vModel:e.datePicker.modelValue}},column:{width:170,component:{name:"fs-date-format"}},valueBuilder(n){t(n)}},date:{form:{component:{...e.datePicker.buildDateType("date"),vModel:e.datePicker.modelValue}},column:{align:"center",width:120,component:{name:"fs-date-format",format:"YYYY-MM-DD"}},valueBuilder(n){t(n)}},daterange:{form:{component:{...e.datePicker.buildDateType("daterange"),vModel:e.datePicker.modelValue}},column:{width:210,formatter:Np},valueBuilder({row:n,key:a,value:i}){i!=null&&Array.isArray(i)&&i.length===2&&i!=null&&(e.type==="naive"?n[a]=[Vt(i[0]).valueOf(),Vt(i[1]).valueOf()]:n[a]=[Vt(i[0]),Vt(i[1])])}},datetimerange:{form:{component:{...e.datePicker.buildDateType("datetimerange"),vModel:e.datePicker.modelValue}},column:{width:340,formatter:Ip},valueBuilder({row:n,key:a,value:i}){i!=null&&Array.isArray(i)&&i.length===2&&(e.type==="naive"?n[a]=[Vt(i[0]).valueOf(),Vt(i[1]).valueOf()]:n[a]=[Vt(i[0]),Vt(i[1])])}},time:{form:{component:{name:e.timePicker.name,vModel:e.timePicker.modelValue}},column:{width:100,align:"center",component:{name:"fs-date-format",format:"HH:mm:ss"}},valueBuilder(n){t(n)}},month:{form:{component:{...e.datePicker.buildDateType("month"),vModel:e.datePicker.modelValue}},column:{align:"center",width:120,component:{name:"fs-date-format",format:"YYYY-MM"}},valueBuilder(n){t(n)}},week:{form:{component:{...e.datePicker.buildDateType("week"),vModel:e.datePicker.modelValue}},column:{align:"center",width:120,component:{name:"fs-date-format",format:"YYYY-ww[周]"}},valueBuilder(n){t(n)}},quarter:{form:{component:{...e.datePicker.buildDateType("quarter"),vModel:e.datePicker.modelValue}},column:{align:"center",width:120,component:{name:"fs-date-format",format:"YYYY-[Q]Q"}},valueBuilder(n){t(n)}},year:{form:{component:{...e.datePicker.buildDateType("year"),vModel:e.datePicker.modelValue}},column:{align:"center",width:120,component:{name:"fs-date-format",format:"YYYY"}},valueBuilder(n){t(n)}}}}const Hp=Object.freeze(Object.defineProperty({__proto__:null,default:Wp},Symbol.toStringTag,{value:"Module"}));function jp(){const{ui:e}=de.useUi();return{number:{form:{component:{name:e.number.name,props:{}}},align:"center"},switch:{form:{component:{name:e.switch.name,props:{}}},component:{name:e.switch.name,props:{}},align:"center"},slider:{form:{component:{name:"el-slider",props:{}}},align:"center"},rate:{form:{component:{name:"el-rate",props:{}}},align:"center"},"color-picker":{form:{component:{name:"el-color-picker",props:{}}},align:"center"},transfer:{form:{component:{name:"el-transfer",props:{}}},align:"center"},autocomplete:{form:{component:{name:"el-autocomplete",props:{}}}}}}const zp=Object.freeze(Object.defineProperty({__proto__:null,default:jp},Symbol.toStringTag,{value:"Module"}));function Gp(){const e=de.uiContext.get();return{number:{form:{component:{name:e.number.name,vModel:e.modelValue}}}}}const Xp=Object.freeze(Object.defineProperty({__proto__:null,default:Gp},Symbol.toStringTag,{value:"Module"}));function Kp(){return{"phone-number":{form:{component:{name:"el-phone-number-input"}},column:{formatter(e,t,r){let n="";return r!=null&&(r.callingCode!=null?n+="(+"+r.callingCode+")":r.countryCode!=null&&(n+="("+r.countryCode+")"),r.phoneNumber!=null&&(n+=r.phoneNumber)),n}}}}}const Yp=Object.freeze(Object.defineProperty({__proto__:null,default:Kp},Symbol.toStringTag,{value:"Module"}));function qp(){const e=de.uiContext.get();return{select:{search:{autoSearchTrigger:"change"},form:{component:{name:e.select.name,[e.select.clearable]:!0}}},"dict-select":{search:{autoSearchTrigger:"change"},column:{component:{name:"fs-values-format",vModel:"modelValue"}},form:{component:{name:"fs-dict-select",vModel:e.select.modelValue,[e.select.clearable]:!0}}},"table-select":{column:{component:{name:"fs-values-format",vModel:"modelValue"}},form:{component:{name:"fs-table-select"}}},"dict-radio":{search:{component:{name:"fs-dict-select",vModel:e.select.modelValue,autoSearchTrigger:"change"}},form:{component:{name:"fs-dict-radio",vModel:e.radioGroup.modelValue,[e.select.clearable]:!0}},column:{component:{name:"fs-values-format",vModel:"modelValue"}}},"dict-checkbox":{search:{component:{name:"fs-dict-select"},autoSearchTrigger:"change"},form:{component:{name:"fs-dict-checkbox",vModel:e.radioGroup.modelValue,[e.select.clearable]:!0}},column:{component:{name:"fs-values-format",vModel:"modelValue"}}},"dict-switch":{search:{component:{name:"fs-dict-select",vModel:e.select.modelValue},autoSearchTrigger:"change"},form:{component:{name:"fs-dict-switch",vModel:e.switch.modelValue,[e.select.clearable]:!0}},column:{component:{name:"fs-values-format",vModel:"modelValue"}}}}}const Jp=Object.freeze(Object.defineProperty({__proto__:null,default:qp},Symbol.toStringTag,{value:"Module"}));function Zp(){const e=de.uiContext.get();return{text:{form:{component:{name:e.input.name,vModel:e.textArea.modelValue,[e.input.clearable]:!0}},search:{autoSearchTrigger:"enter"}},password:{form:{component:{name:e.inputPassword.name,vModel:e.inputPassword.modelValue,...e.inputPassword.passwordType}},search:{autoSearchTrigger:"enter"}},textarea:{search:{component:{name:e.input.name,type:"text",[e.input.clearable]:!0},autoSearchTrigger:"enter"},form:{component:{name:e.textArea.name,type:e.textArea.type,vModel:e.textArea.modelValue,[e.input.clearable]:!0}}}}}const Qp=Object.freeze(Object.defineProperty({__proto__:null,default:Zp},Symbol.toStringTag,{value:"Module"}));function e1(){const e=de.uiContext.get();return{"dict-tree":{search:{autoSearchTrigger:"change"},column:{component:{name:"fs-values-format",vModel:"modelValue"}},form:{component:{name:"fs-dict-tree",vModel:e.treeSelect.modelValue,[e.treeSelect.clearable]:!0}}}}}const t1=Object.assign({"./list/assist.ts":bp,"./list/button.ts":Tp,"./list/cascader.ts":Fp,"./list/date.ts":Hp,"./list/el.ts":zp,"./list/number.ts":Xp,"./list/phone.ts":Yp,"./list/select.ts":Jp,"./list/text.ts":Qp,"./list/tree.ts":Object.freeze(Object.defineProperty({__proto__:null,default:e1},Symbol.toStringTag,{value:"Module"}))}),hf=[];z.forEach(t1,e=>{hf.push(e.default)});const pi={};function r1(){return pi}function n1(e){return pi[e]}function a1(e){for(const t in e)pi[t]=e[t]}const Ia={getType:n1,addTypes:a1,getTypes:r1,install(){for(const e of hf)z.forEach(e(),(t,r)=>{pi[r]=t});Te.debug("types installed:",pi)}},i1=l.defineComponent({name:"FsPage",setup(){const e=l.ref();return l.onMounted(()=>{window.getComputedStyle(e.value.parentNode).getPropertyValue("position")!=="relative"&&hi.logger.warn("fs-page父节点的position建议为relative,因为fs-page为相对定位（position:absolute），如果样式没有异常，你可以忽略此警告")}),{pageRef:e}}}),U3="",rt=(e,t)=>{const r=e.__vccOpts||e;for(const[n,a]of t)r[n]=a;return r},s1={ref:"pageRef",class:"fs-page"},o1={key:0,class:"fs-page-header"},l1={class:"fs-page-content"},c1={key:1,class:"fs-page-footer"};function f1(e,t,r,n,a,i){return l.openBlock(),l.createElementBlock("div",s1,[e.$slots.header!=null?(l.openBlock(),l.createElementBlock("div",o1,[l.renderSlot(e.$slots,"header")])):l.createCommentVNode("",!0),l.createElementVNode("div",l1,[l.renderSlot(e.$slots,"default")]),e.$slots.footer!=null?(l.openBlock(),l.createElementBlock("div",c1,[l.renderSlot(e.$slots,"footer")])):l.createCommentVNode("",!0)],512)}const mf=rt(i1,[["render",f1]]);function Wo(e){return e!=null&&(e instanceof gf||l.isRef(e))}function pf(e){return Wo(e)&&!e.cloneable}function u1(e,...t){function r(a,i){if(i!=null&&(z.isArray(a)||Wo(i)))return i}let n=null;for(const a of t)Wo(a)&&(n=a);return n||z.mergeWith(e,...t,r)}function d1(e){if(pf(e))return e;function t(r){if(pf(r))return r}return z.cloneDeepWith(e,t)}let gf=class{constructor(){Ee(this,"cloneable",!1)}setCloneable(t){this.cloneable=t}};function Ze(){return{merge:u1,cloneDeep:d1,UnMergeable:gf}}const{cloneDeep:h1}=Ze();function m1(e){return e instanceof Ts}function p1(e){return e instanceof gi}function xf(e,t,r){const n={};if(e==null)return n;const a=r?m1:p1;return sf.forEachDeep(e,(i,s,o,c)=>{if(a(i)){const f=c.path;if(t){for(const u of t)if(typeof u=="string"){if(f.startsWith(u))return!1}else if(u instanceof RegExp&&u.test(f))return!0}return n[f]=i,!1}return!l.isShallow(i)},{checkCircular:!0}),n}function g1(e,t){if(e==null||Object.keys(e).length<=0)return null;const r={};return z.forEach(e,(n,a)=>{r[a]=n.buildAsyncRef(t)}),r}function x1(e,t){t==null||Object.keys(t).length<=0||z.forEach(t,(r,n)=>{z.set(e,n,r.value==null?null:r.value)})}function v1(e,t,r,n){const a=l.computed(()=>{const o=e();return xf(o,r,!1)}),i=l.computed(()=>{const o=e();return xf(o,r,!0)}),s=l.computed(()=>g1(i.value,t));return l.computed(()=>{let o=e();const c=Object.keys(i.value).length,f=Object.keys(a.value).length;if(c>0||f>0){if(o=h1(o),f>0){const u=t?t():{};z.forEach(a.value,(d,h)=>{z.set(o,h,d.computeFn(u))})}c>0&&x1(o,s.value)}return n?n(o):o})}class gi{constructor(t){Ee(this,"computeFn");this.computeFn=t}}function vf(e){return new gi(e)}class Ts{constructor(t){Ee(this,"watch");Ee(this,"asyncFn");Ee(this,"defaultValue");const{asyncFn:r,defaultValue:n}=t;this.watch=t.watch,this.asyncFn=r,this.defaultValue=n}buildAsyncRef(t){t=t||function(){};const r=l.ref(this.defaultValue),n=l.computed(()=>this.watch?this.watch(t()):null);return l.watch(()=>n.value,async a=>{r.value=await this.asyncFn(a,t())},{immediate:!0}),r}}function wf(e){return new Ts(e)}function Gr(){return{ComputeValue:gi,compute:vf,AsyncComputeValue:Ts,asyncCompute:wf,doComputed:v1}}const Mn={orderDefault:1},{merge:Xr,cloneDeep:bn}=Ze(),xi=[];function vi(e){z.remove(xi,t=>t.name===e.name),xi.push(e),xi.sort((t,r)=>t.order-r.order),Te.debug("mergeColumnPlugin register success: current:",e,"registered:",xi)}function w1(e){var t,r;if(e.dict){if((t=e.column)!=null&&t.component){const n=bn(e.dict);e.column.component.dict=Xr(n,e.column.component.dict)}if((r=e.form)!=null&&r.component){const n=bn(e.dict);e.form.component.dict=Xr(n,e.form.component.dict)}}return e}function _1(e){if(!e.type)return e;let t=[];typeof e.type=="string"?t=[e.type]:e.type instanceof Array&&(t=e.type);const r={};for(const n of t){const a=Ia.getType(n);a&&Xr(r,a)}return e=Xr(r,e),e}const y1={name:"type",handle:_1,order:-2},k1={name:"dict",handle:w1,order:-1},E1={name:"viewFormUseCellComponent",order:10,handle:(e={},t={})=>{var a,i;if(!((a=t.settings)!=null&&a.viewFormUseCellComponent))return e;const n={component:((i=e.column)==null?void 0:i.component)||{}};return(e.type==="text"||e.type instanceof Array&&e.type.includes("text"))&&(n.render=s=>{const{value:o}=s;return l.createVNode("span",null,[o])}),Xr(e,{viewForm:n}),e}};vi(y1),vi(k1),vi(E1);function Ho(e,t){const r={};return z.forEach(e,(n,a)=>{if(n.key=a,n.children)n.children=Ho(n.children,t);else for(const i of xi)n=i.handle(n,t);r[a]=n}),r}function jo(e={},t){return z.forEach(t,(r,n)=>{r.children?jo(e,r.children):e[n]=r}),e}function Cs(e={},t){return z.forEach(t,(r,n)=>{r.children?Cs(e,r.children):e[n]=r}),e}function b1(e){const t=e,r=t.column||{};return r.title==null&&(r.title=t.title),r.key=t.key,t.children&&(r.children=yf(t.children)),_f(r),l.reactive(r)}function _f(e){var t;e&&(t=e.component)!=null&&t.name&&typeof e.component.name!="string"&&(l.isRef(e.component.name)||(e.component.name=l.shallowRef(e.component.name)))}function yf(e){let t={};return z.forEach(e,(r,n)=>{t[n]=b1(r)}),t=kf(t),t}function S1(e){return z.sortBy(e,t=>t.order??Mn.orderDefault)}function kf(e){const t=[];for(const a in e){const i=e[a];i.key=a,i.children&&z.size(i.children)>0&&(i.children=kf(i.children)),t.push(i)}const r=S1(t),n={};for(const a of r)n[a.key]=a;return n}function Ef(e,t){const r={};return z.forEach(e,n=>{const a=bn(n[t])||{};t==="form"&&a.title==null&&(a.title=n.title),a.key=n.key,r[n.key]=a,_f(a)}),r}function wi(e,t,r,n){const a=Ef(r,t),i=Xr(bn(e.form),e[t],{columns:a});return n&&n(i),i}function T1(e,t="search",r){var o;const n=Ef(r,t),a={},i=((o=e.settings)==null?void 0:o.searchCopyFormProps)??["component","valueChange","title","key","label","render"];function s(c,f,u){if(z.includes(i,u)&&e.columns[f]){const h=e.columns[f][u];h&&(c[u]=h)}}return z.forEach(bn(e.form.columns),(c,f)=>{const u={};s(u,f,"valueResolve"),s(u,f,"valueBuilder"),a[f]=Xr(u,z.pick(c,i))}),Xr({columns:a},{columns:n},e.search)}function C1(e,t){const{t:r}=Yt(),{merge:n}=Ze();t=t||{};const a=n(ui.defaultOptions({t:r}),ui.commonOptions({crudOptions:e,context:t,crudExpose:null}),e),i=Ho(bn(a.columns),a),s=jo({},i);return wi(a,"form",s)}function F1(e){z.forEach(e.columns,(n,a)=>{n.key=a});const t=Ho(bn(e.columns),e);e.columns=t;const r=jo({},t);return e.table.columns=yf(bn(t)),e.table.columnsMap=Cs({},e.table.columns),Xr(e.toolbar,{columnsFilter:{originalColumns:bn(e.table.columns)}}),e.form=wi(e,"form",r),e.addForm=wi(e,"addForm",r),e.editForm=wi(e,"editForm",r),e.viewForm=wi(e,"viewForm",r,n=>{z.forEach(n.columns,a=>{a.component||(a.component={}),a.component.disabled=!0})}),e.search=T1(e,"search",r),e.table.editable&&(e.table.editable.addForm=Xr(e.addForm.columns,e.table.editable.addForm),e.table.editable.editForm=Xr(e.editForm.columns,e.table.editable.editForm)),e}function Fs(e,t){z.forEach(e,(r,n)=>{r.key||(r.key=n),r.children?Fs(r.children,t):t(r,n)})}function _i(e,t){z.forEach(e,(r,n)=>{r.key||(r.key=n),r.children?_i(r.children,t):t(r,n)})}function zo(){return{buildFormOptions:C1,buildColumns:F1,registerMergeColumnPlugin:vi,forEachColumns:_i}}let A1=0;const Go={};async function D1(e){const t=e.id||`${A1++}`,r=document.createElement("div");return new Promise((n,a)=>{let i=Go[t];i!=null&&(i.vm.exposed.open(e),n(i));const s=l.createVNode(La,{id:t,onClosed(){e.id||delete Go[t]}});s.appContext=La._context,l.render(s,r),document.body.appendChild(r);const c=s.component;i={id:t,vNode:s,vm:c,props:s.component.props},Go[t]=i,i.vm.exposed.open(e),n(i.vm.exposed)})}function bf(){let e=null;try{e=l.inject("use:form:wrapper",()=>{})()}catch(n){Te.warn("cant inject use:form:wrapper，建议在App.vue中使用<fs-form-provider>组件包裹<router-view/>",n)}let t=null;e==null?t=async n=>await D1(n):t=async n=>await e.open(n);async function r(n){const{buildFormOptions:a}=zo(),i=a(n.crudOptions,n.context);return await t(i)}return{openDialog:t,openCrudFormDialog:r}}const{merge:Sf}=Ze(),R1=Sf;function O1(e){const{crudExpose:t}=e,{crudBinding:r}=t;de.useUi(),Yt();const{merge:n}=Ze();l.watch(()=>{var i,s,o;return(o=(s=(i=r.value)==null?void 0:i.table)==null?void 0:s.editable)==null?void 0:o.enabled},i=>{i?r.value.table.editable.mode==="row"?r.value.rowHandle.active="editRow":r.value.rowHandle.active="editable":r.value.rowHandle.active="default"});const a={async enable(i,s){const o=r.value.table.editable;n(o,{enabled:!0},i),s&&s({editable:o})},disable(){var i;(i=t.getTableRef())==null||i.editable.resume(),r.value.table.editable.enabled=!1,r.value.rowHandle.active="default"},active(i){t.getTableRef().editable.active(i)},inactive(){t.getTableRef().editable.inactive()},addRow(i){t.getTableRef().editable.addRow(i)},activeCols(i){t.getTableRef().editable.activeCols(i)},resume(){t.getTableRef().editable.resume()},cancel(){t.getTableRef().editable.cancelAll()},persist(){t.getTableRef().editable.persist()},removeRow(i){t.getTableRef().editable.removeRow(i)},getEditableRow(i){var s,o;return(o=(s=t.getTableRef())==null?void 0:s.editable)==null?void 0:o.getEditableRow(i)},getActiveRows(){var i,s;return(s=(i=t.getTableRef())==null?void 0:i.editable)==null?void 0:s.getActiveRows()},async doSaveRow(i){let s=i.editableId;s||(s=i.row[r.value.table.editable.rowKey]);const o=a.getEditableRow(s);await o.save({async doSave(c){var p,g;const{isAdd:f,row:u,setData:d}=c,h=u;if(((g=(p=r.value)==null?void 0:p.mode)==null?void 0:g.name)!=="local")try{if(o.loading=!0,f){const m=await r.value.request.addRequest({form:h});d(m)}else await r.value.request.editRequest({form:h,row:h})}finally{o.loading=!1}}})},async doCancelRow(i){let s=i.editableId;s||(s=i.row[r.value.table.editable.rowKey]);const o=a.getEditableRow(s);if(o.isAdd){a.removeRow(s);return}o.cancel()},async doRemoveRow(i){let s=i.editableId;s||(s=i.row[r.value.table.editable.rowKey]);const o=a.getEditableRow(s);return await t.doRemove(i,{async handle(){return o.isAdd?(a.removeRow(s),!1):r.value.mode.name==="local"?(a.removeRow(s),{isLocal:!0}):await r.value.request.delRequest(i)}})},getInstance(){t.getTableRef().editable},eachCells(i){var s;(s=t.getTableRef().editable)==null||s.eachCells(i)},eachRows(i){var s;(s=t.getTableRef().editable)==null||s.eachRows(i)},async validate(){var i;return await((i=t.getTableRef().editable)==null?void 0:i.validate())},getTableData(i){var s;return(s=t.getTableRef().editable)==null?void 0:s.getCleanTableData(i)},getCleanTableData(i){var s;return(s=t.getTableRef().editable)==null?void 0:s.getCleanTableData(i)}};return a}function As(e){const{crudRef:t,crudBinding:r}=e,{ui:n}=de.useUi(),{t:a}=Yt(),i=bf();function s(){t.value==null&&Te.warn("crudRef还未初始化，请在onMounted之后调用")}function o(){r.value==null&&Te.warn("crudBinding还未初始化，请在useFs或useCrud之后调用")}const c={crudRef:t,crudBinding:r,getFormWrapperRef(){return t.value.formWrapperRef},getFormRef:()=>{const f=c.getFormWrapperRef();if(f==null||(f==null?void 0:f.formRef)==null){Te.error("当前无法获取FormRef，请在编辑对话框已打开的状态下调用此方法，如果是在打开对话框时调用，可以尝试先nextTick");return}return f==null?void 0:f.formRef},getFormData:()=>{const f=c.getFormRef();return f==null?void 0:f.getFormData()},setFormData:(f,u)=>{var d;(d=c.getFormRef())==null||d.setFormData(f,u)},getFormComponentRef(f,u=!1){const d=c.getFormRef();return d==null?void 0:d.getComponentRef(f,u)},doValueBuilder(f,u){u==null&&(u=l.toRaw(r.value.columns)),Te.debug("doValueBuilder ,columns=",u);const d=[];_i(u,h=>{h.valueBuilder!=null&&d.push(h)}),d.length!==0&&(z.forEach(f,(h,p)=>{z.forEach(d,g=>{g.valueBuilder({value:h[g.key],row:h,form:h,index:p,key:g.key,column:g})}),h.children&&z.isArray(h.children)&&c.doValueBuilder(h.children,u)}),Te.debug("valueBuilder success:",f))},doValueResolve({form:f},u){u==null&&(u=l.toRaw(r.value.columns));const d=[];_i(u,h=>{h.valueResolve!=null&&d.push(h)}),d.length!==0&&(Te.debug("doValueResolve ,columns=",u),z.forEach(d,h=>{const p=h.key;h.valueResolve({value:f[p],row:f,form:f,key:p,column:h})}),Te.debug("valueResolve success:",f))},doSearchValidate(){c.getSearchRef().doValidate()},getSearchFormData(){return r.value.search.validatedForm},getSearchValidatedFormData(){return r.value.search.validatedForm},setSearchFormData(f){if(t.value&&t.value.setSearchFormData({form:f.form,mergeForm:f.mergeForm}),f.mergeForm===!1)for(const d in r.value.search.validatedForm)delete r.value.search.validatedForm[d];const{merge:u}=Ze();u(r.value.search.validatedForm,f.form),f.triggerSearch&&c.doRefresh()},getSearchRef(){var f;return s(),(f=t.value)==null?void 0:f.getSearchRef()},buildPageQuery(f){var m,x;const u=f.page;let d=f.form;d==null&&(d=z.cloneDeep(c.getSearchValidatedFormData())||{},(x=(m=r.value)==null?void 0:m.search)!=null&&x.columns&&c.doValueResolve({form:d},l.toRaw(r.value.search.columns)));let h=f.sort;h==null&&(h=r.value.table.sort||{});const p={page:u,form:d,sort:h};let g=p;return r.value.request.transformQuery&&(g=r.value.request.transformQuery(p)),g},async search(f,u={}){const d=c.buildPageQuery(f);let h;try{u.silence!==!0&&(r.value.table.loading=!0),Te.debug("pageRequest",d),h=await r.value.request.pageRequest(d)}finally{u.silence!==!0&&(r.value.table.loading=!1)}if(h==null){Te.warn("pageRequest返回结果不能为空");return}let p=h;return r.value.request.transformRes&&(p=r.value.request.transformRes({res:h,query:d})),p.records&&c.doValueBuilder(p.records),p},getPage(){let f={currentPage:1,pageSize:10};return r.value.pagination&&(f={currentPage:r.value.pagination[n.pagination.currentPage],pageSize:r.value.pagination.pageSize}),f},async doRefresh(f){var x,v;if(r.value.request.pageRequest==null)return;Te.debug("do refresh:",f),r.value.pagination&&f!=null&&f.goFirstPage&&(r.value.pagination[n.pagination.currentPage]=1);const u=c.getPage(),d=await c.search({page:u},{silence:f==null?void 0:f.silence});if(d==null){Te.error("pageRequest返回结构不正确，请配置正确的request.transformRes，期望：{currentPage>0, pageSize>0, total, records:[]},实际返回：",d);return}const{currentPage:h=u.currentPage||1,pageSize:p=u.pageSize,total:g}=d,{records:m}=d;if(m==null||!(m instanceof Array)||g==null||h==null||h<=0||isNaN(h)||p==null||p<=0||isNaN(p)){Te.error("pageRequest返回结构不正确，请配置正确的request.transformRes，期望：{currentPage>0, pageSize>0, total, records:[]},实际返回：",d),Te.info("如果你的不需要分页，也需要按照上面的格式返回，可以让pageSize=99999，然后配置crudOptions.pagination.show=false来隐藏分页组件");return}if(r.value.data=m,r.value.pagination&&(r.value.pagination[n.pagination.currentPage]=h,r.value.pagination.pageSize=p,r.value.pagination[n.pagination.total]=g||m.length),(f==null?void 0:f.scrollTop)??r.value.table.scrollTopOnRefreshed){const y=c.getTableRef();y==null||y.scrollTo(0)}(v=(x=r.value)==null?void 0:x.table)!=null&&v.onRefreshed&&r.value.table.onRefreshed({data:m})},getToolbarRef:()=>t.value.toolbarRef,getColumnsFilterRef:()=>c.getToolbarRef().columnsFilterRef,getColumnsFilterOriginalColumnsRef:()=>c.getColumnsFilterRef().original,getColumnsFilterColumnsRef:()=>c.getColumnsFilterRef().columns,doPageTurn(f){r.value.pagination[n.pagination.currentPage]=f},async doSearch(f){Te.debug("do search:",f),f=Sf({goFirstPage:!0},f),f.goFirstPage&&c.doPageTurn(1),f.form&&t.value&&c.setSearchFormData({form:f.form,mergeForm:f.mergeForm,refWarning:!1,triggerSearch:!1}),await c.doRefresh()},getTableRef(){var f;return s(),(f=t.value)==null?void 0:f.tableRef},getBaseTableRef(){const f=this.getTableRef();if(f==null){Te.warn("fs-table还未挂载");return}return f.tableRef},getTableData(){return o(),r.value.data},setTableData(f){o(),r.value.data=f},insertTableRow(f,u){o(),r.value.data.splice(f,0,u)},updateTableRow(f,u,d=!0){d?r.value.data[f]=R1(r.value.data[f],u):r.value.data[f]=u},removeTableRow(f){o(),r.value.data.splice(f,1)},removeTableRowByRowKey:(f,u)=>{o(),u==null&&(u=r.value.data);for(let d=0;d<u.length;d++){const h=u[d];if(h[r.value.table.rowKey]===f)return u.splice(d,1),!0;if(h.children&&z.isArray(h.children)&&c.removeTableRowByRowKey(f,h.children))return!0}},getTableDataRow(f){const u=c.getTableData();if(u==null)throw new Error("table data is not init");if(u.length<=f)throw new Error("index over array length");return u[f]},doSelectCurrentRow({row:f}){c.getTableRef().value.setCurrentRow(f)},async doRemove(f,u){var m;const d=r.value.table.remove??u??{};try{d.confirmFn?await d.confirmFn(f):await n.messageBox.confirm({title:d.confirmTitle||a("fs.rowHandle.remove.confirmTitle"),message:d.confirmMessage||a("fs.rowHandle.remove.confirmMessage"),type:"warn",...d.confirmProps})}catch{d.onCanceled&&await d.onCanceled(f);return}let h=null;const p=((m=r.value.mode)==null?void 0:m.name)==="local";if(u!=null&&u.handle?h=await u.handle(f):p?c.removeTableRow(f==null?void 0:f.index):h=await r.value.request.delRequest(f),h===!1)return;const g={...f,res:h};if(d.afterRemove&&await d.afterRemove(g)===!1)return!1;d.showSuccessNotification!==!1&&n.notification.success(a("fs.rowHandle.remove.success")),p||d.refreshTable!==!1&&await c.doRefresh({scrollTop:!1}),d.onRemoved&&await d.onRemoved({...f,res:h})},async openDialog(f){if(f.newInstance===!0&&i)return await i.openDialog(f);const u=this.getFormWrapperRef();return u.open(f),u},async _openDialog(f,u,d){var x,v;const{merge:h}=Ze();let p=u.row||u[n.tableColumn.row];delete u.row,p==null&&u.index!=null&&(p=c.getTableDataRow(u.index)),(v=(x=r.value)==null?void 0:x.request)!=null&&v.infoRequest&&(p=await r.value.request.infoRequest({mode:f,row:p}));const g={mode:f},m=l.toRaw(r.value[f+"Form"]);return h(g,m,{initialForm:p},u,d),await this.openDialog(g)},async openAdd(f,u={}){return this._openDialog("add",f,u)},async openEdit(f,u={}){return this._openDialog("edit",f,u)},async openView(f,u={}){return this._openDialog("view",f,u)},async openCopy(f,u={}){return this._openDialog("add",f,u)},editable:void 0};return c.editable=O1({crudExpose:c}),{expose:c,crudExpose:c}}async function Tf(){const e=await Object.assign({"./lib/index.ts":()=>Promise.resolve().then(()=>Hm)});let t=null;return z.each(e,n=>{t=n}),(await t()).exportUtil}async function Cf(){const e=await Object.assign({"./lib/index.ts":()=>Promise.resolve().then(()=>Hm)});let t=null;return z.each(e,n=>{t=n}),(await t()).importUtil}function B1({originalRow:e,row:t,key:r,col:n}){var s;const a=e[r],i=(s=n.component)==null?void 0:s.dict;if(i&&a!=null){const o=i.getNodesFromDataMap(a);if(o!=null&&o.length>0){const c=z.map(o,f=>i.getLabel(f)||i.getValue(f)).join("|");c!=null&&c!==""&&(t[r]=c)}}return t}async function Ff(e,t={}){if(t.server){const f=e.getPage(),u=e.buildPageQuery({page:f});await t.server(u);return}const r=e.crudBinding;let n=t.columns;n==null&&(n=[],z.each(r.value.table.columnsMap,f=>{if(!(t.columnFilter&&t.columnFilter(f)===!1)&&!(t.onlyShow&&l.unref(f.show)===!1)&&f.exportable!==!1&&f.key!=="_index"){const u={key:f.key,title:f.title};n.push(u)}}));for(const f of n){const u=r.value.table.columnsMap[f.key];f.columnProps=u||{},t.columnBuilder&&t.columnBuilder({col:f})}const{merge:a}=Ze(),i=await Tf(),s=[];let o=r.value.data;if(t.dataFrom==="search"){const f=a({page:{currentPage:1,pageSize:99999999}},r.value.toolbar.export.searchParams);o=(await e.search(f,{silence:!0})).records}for(const f of o){const u=z.cloneDeep(f);z.each(n,d=>{const h=d.columnProps,p={row:u,originalRow:f,key:d.key,col:h,exportCol:d};t.autoUseDictLabel!==!1&&B1(p),t.dataFormatter&&t.dataFormatter(p)}),s.push(u)}const c=z.merge({columns:n,data:s,filename:"table",noHeader:!1,separator:",",quoted:!1},{...t});t.fileType==="excel"?await i.excel(c):await i.csv(c)}async function N1(e,t){const n=await(await Cf()).csv(t.file),a=e.crudBinding;t.append===!1&&(a.value.data.length=0);const i=a.value.table.editable.enabled;for(const s of n.data)i?e.editable.addRow({row:s,active:!1}):a.value.data.push(s)}const Xo={};function Af(e,t){Xo[e]=t}function Df(e){return Xo[e]}Af("rowSelection",(e,t)=>{const n=t.crudExpose.crudBinding;function a(){return n.value.table.rowKey||"id"}const{ui:i}=de.useUi();if(!e){Te.warn("请配置settings.plugins.rowSelection.props参数");return}return i.table.buildSelectionCrudOptions({crossPage:e.crossPage,getRowKey:a,getPageData(){return n.value.data},useCompute:()=>Gr(),multiple:e.multiple,selectedRowKeys:e.selectedRowKeys,onSelectedKeysChanged:async s=>{e.selectedRowKeys.value=[...s],await l.nextTick(),e.onSelectedChanged&&e.onSelectedChanged(e.selectedRowKeys.value)}})});const{merge:Vn}=Ze();function Rf(e){e.context==null&&(e.context={});const t=de.uiContext.get(),{t:r}=Yt(),n=F=>l.computed(()=>r(F));let a=e.crudOptions;const i=e.expose||e.crudExpose;if(!i)throw new Error("crudExpose不能为空，请给useCrud传入{crudExpose}参数");const s=i,{crudBinding:o}=s,{doRefresh:c,doValueResolve:f}=s;function u(){return{pagination:{...t.pagination.onChange({setCurrentPage(O){o.value.pagination[t.pagination.currentPage]=O},setPageSize(O){o.value.pagination.pageSize=O,o.value.pagination[t.pagination.currentPage]=1},async doAfterChange(){return await c()}})}}}function d(){return{form:{async doSubmit(F){var O,X,j,I;if(F.mode==="edit")if(f(F),((O=a.mode)==null?void 0:O.name)==="local")s.updateTableRow(F.index,F.form,a.mode.isMergeWhenUpdate);else return(X=o.value.request)!=null&&X.editRequest||Te.warn("request.editRequest 未定义，无法保存"),await o.value.request.editRequest(F);else if(F.mode==="add")if(f(F),((j=a.mode)==null?void 0:j.name)==="local"){const G=a.mode.isAppendWhenAdd?s.getTableData().length:0;s.insertTableRow(G,F.form)}else return(I=o.value.request)!=null&&I.addRequest||Te.warn("request.addRequest 未定义，无法保存"),await o.value.request.addRequest(F)},async onSuccess({mode:F}){F==="edit"?await c({scrollTop:!1}):F==="add"?await c({scrollTop:!0,goFirstPage:!0}):await c()}}}}function h(){return{rowHandle:{buttons:{remove:{click:async F=>{F.row=F[t.tableColumn.row],await s.doRemove(F)}},copy:{show:!1,click:async F=>{F.row=F[t.tableColumn.row],await s.openCopy({row:F.row,index:F.index})}},edit:{click:async F=>{F.row=F[t.tableColumn.row],await s.openEdit({row:F.row,index:F.index})}},view:{click:async F=>{F.row=F[t.tableColumn.row],await s.openView({row:F.row,index:F.index})}}}}}}function p(){return{search:{buttons:{search:{loading:l.computed(()=>{var F,O;return(O=(F=o.value)==null?void 0:F.table)==null?void 0:O.loading})}},on_reset(){o.value.table.sort={},Fs(o.value.table.columns,O=>{O.sortOrder=!1});const F=i.getBaseTableRef();F!=null&&F.clearSort&&F.clearSort()},on_search(){i.doRefresh({goFirstPage:!0})},"onUpdate:form":F=>{o.value.search.form=F},"onUpdate:validatedForm":F=>{o.value.search.validatedForm=F},"onUpdate:collapse":F=>{o.value.search.collapse=F},container:{collapse:!0,"onUpdate:collapse":F=>{o.value.search.container.collapse=F}}}}}function g(){return{tabs:{},onTabChange(F){i.setSearchFormData({form:F,mergeForm:!0}),c()}}}function m(){const F=l.ref(!1);return{toolbar:{buttons:{refresh:{type:"primary",icon:t.icons.refresh,title:n("fs.toolbar.refresh.title"),order:1,circle:!0,click:async()=>{await i.doRefresh({scrollTop:!1})}},search:{type:l.computed(()=>o.value.search.show!==!1?"primary":"default"),icon:t.icons.search,title:n("fs.toolbar.search.title"),order:2,circle:!0,click:()=>{o.value.search.show=!o.value.search.show}},compact:{type:l.computed(()=>o.value.toolbar.compact?"primary":"default"),icon:t.icons.compact,title:n("fs.toolbar.compact.title"),order:3,circle:!0,click:()=>{o.value.toolbar.compact=!o.value.toolbar.compact}},export:{show:!0,type:"primary",icon:t.icons.export,order:4,loading:F,title:n("fs.toolbar.export.title"),circle:!0,click:async()=>{F.value=!0;try{await Ff(i,o.value.toolbar.export)}finally{F.value=!1}}},columns:{type:"primary",icon:t.icons.columnsFilter,title:n("fs.toolbar.columns.title"),circle:!0,order:5}},"onUpdate:columns"(O){const X=o.value.table.columns;function j(G,re){const ae={};return z.forEach(re,oe=>{const fe=G[oe.key];if(fe){delete fe.order;const ke=Vn({...fe},oe);ae[oe.key]=ke,fe.children&&(ke.children=j(fe.children,oe.children))}}),ae}const I=j(X,O);o.value.table.columns=I,o.value.table.columnsMap=Cs({},I)}}}}function x(){return{table:{onSortChange(F){const{isServerSort:O,prop:X,asc:j,order:I}=F;Fs(o.value.table.columns,re=>{re.key===X?re.sortOrder=I:re.sortOrder=!1});const G=o.value.table.sort;o.value.table.sort=O?{prop:X,order:I,asc:j}:null,(O||G!=null)&&s.doRefresh()}}}}function v(){return{actionbar:{buttons:{add:{click(){s.openAdd({})}}}}}}function y(){const{compute:F}=Gr();return{actionbar:{buttons:{addRow:{show:!1,text:n("fs.actionbar.add"),type:"primary",click:()=>{s.editable.addRow()}}}},rowHandle:{group:{editable:{remove:{text:"删除",...t.button.colors("danger"),click:async O=>{const{index:X,row:j}=O,I=j[o.value.table.editable.rowKey];await s.editable.doRemoveRow({editableId:I,row:j})}}},editRow:{edit:{text:"编辑",loading:F(O=>{const{index:X,row:j}=O,I=j[o.value.table.editable.rowKey],G=s.editable.getEditableRow(I);return!!(G!=null&&G.loading)}),click:async O=>{var G;const{index:X,row:j}=O,I=j[o.value.table.editable.rowKey];if(o.value.table.editable.exclusive){const re=s.editable.getActiveRows();z.forEach(re,ae=>{o.value.table.editable.exclusiveEffect==="save"?s.editable.doSaveRow({row:ae.rowData}):s.editable.doCancelRow({row:ae.rowData})})}(G=s.editable.getEditableRow(I))==null||G.active()},show:F(O=>{var G,re;const{index:X,row:j}=O,I=j[o.value.table.editable.rowKey];return!((re=(G=s.editable)==null?void 0:G.getEditableRow(I))!=null&&re.isEditing)})},save:{text:"保存",loading:!1,click:async O=>{const{index:X,row:j}=O;await s.editable.doSaveRow({row:j})},show:F(O=>{var G,re;const{index:X,row:j}=O,I=j[o.value.table.editable.rowKey];return!!((re=(G=s.editable)==null?void 0:G.getEditableRow(I))!=null&&re.isEditing)})},cancel:{text:"取消",click:async O=>{var I;const{index:X,row:j}=O;await((I=s.editable)==null?void 0:I.doCancelRow({row:j}))},show:F(O=>{var G,re;const{index:X,row:j}=O,I=j[o.value.table.editable.rowKey];return!!((re=(G=s.editable)==null?void 0:G.getEditableRow(I))!=null&&re.isEditing)})},remove:{text:"删除",...t.button.colors("danger"),click:async O=>{var G;const{index:X,row:j}=O,I=j[o.value.table.editable.rowKey];await((G=s.editable)==null?void 0:G.doRemoveRow({row:j,editableId:I}))}}}}}}}function _(F){F.search.validatedForm=z.cloneDeep(F.search.initialForm)}function b(F){F=Vn(ui.commonOptions(e),F);const O=l.unref(F.settings);if(O){const G=l.unref(O.plugins);z.forEach(G,(re,ae)=>{if(re.enabled===!1)return;let oe=re.handle;if(oe==null&&(oe=Df(ae)),oe==null)return;const fe=re.before,ke=oe(re.props,e);fe!==!1?F=Vn(ke,F):Vn(F,ke)})}const X=Vn(ui.defaultOptions({t:r}),u(),d(),h(),p(),g(),m(),x(),v(),y(),F),{buildColumns:j}=zo(),I=j(X);return _(I),I}function D(F){o.value=b(F),Te.info("fast-crud inited, crudBinding=",o.value)}function C(F){const O=Vn({},a,F);return D(O),a=O,O}D(a);function k(F){Vn(o.value,F)}return{appendCrudOptions:C,resetCrudOptions:D,appendCrudBinding:k}}function Of(e){const{createCrudOptions:t,crudExposeRef:r}=e,n=e.crudRef||l.ref(),a=e.crudBinding||l.ref({});let i=e.crudExpose;i||(i=As({crudRef:n,crudBinding:a}).crudExpose),r&&!r.value&&(r.value=i),e.context==null&&(e.context={});const s=e.context;e.onExpose&&e.onExpose({crudRef:n,crudBinding:a,crudExpose:i,context:s});const o=t({...e,crudExpose:i,expose:i,context:s});function c(f){const u={crudExpose:i,...f,context:s};Vn(f.crudOptions,e.crudOptionsOverride);const d=Rf(u);return{...f,...d,crudRef:n,crudExpose:i,crudBinding:a,context:s}}return o instanceof Promise?o.then(f=>c(f)):c(o)}function I1(e){return Of(e)}function Bf(e){return Of(e)}function Nf(){const e=l.ref(),t=l.ref(),r={},{crudExpose:n}=As({crudBinding:t,crudRef:e});return{crudRef:e,crudBinding:t,context:r,crudExpose:n}}function Sn(e,t,r="modelValue"){const n=de.uiContext.get();let a=e.dict;a&&a.prototype&&(a.clear(),a=l.shallowReactive(z.cloneDeep(e.dict)),a.clear());function i(){return l.computed(()=>{let C=[];if(e.options?C=e.options:a&&a.data!=null&&(a.data instanceof Array||hi.logger.warn("dict.data类型错误，期望为数组，实际："+a.data),C=a.data,e.transformDictData&&(C=e.transformDictData(z.cloneDeep(a.data)))),n.type==="naive"){const k=[];for(const F of C)k.push({...F,value:y(F),label:b(F)});return k}return C})}function s(){return a}const o=l.inject("get:scope",function(){});function c(){const C=e[r]||t.attrs[r];return{...o(),componentRef:f,value:C}}const{proxy:f}=l.getCurrentInstance(),u=async(C=!1)=>{if(!a)return;if(a.getNodesByValues){const F=c();if(F.value==null)return;let O=F.value;Array.isArray(F.value)||(O=[F.value]),await a.appendByValues(O);return}if(a.loading)return;const k=c();if(C){await a.reloadDict(k);return}await a.loadDict(k)};u();const d=async()=>{await u(!0)},h=()=>{a&&a.clear()},p=()=>{a!=null&&(!a.prototype&&!a.cloneable||l.watch(()=>e[r],()=>{d()}))};(()=>{l.watch(()=>a==null?void 0:a.data,()=>{const C=c();t.attrs.onDictChange,t.emit("dict-change",{dict:a,...C})},{immediate:!0})})();const m=()=>{var C;return(C=s())==null?void 0:C.data},x=(C,k)=>{let F=k;return s()&&(F=s()[k]),C[F]},v=(C,k)=>{let F=k;s()&&(F=s()[k]),delete C[F]},y=C=>x(C,"value"),_=C=>x(C,"children"),b=C=>{if(e.labelFormatter)return e.labelFormatter(C);const k=x(C,"label");return k==null?"":String(k)};return{createComputedOptions:i,loadDict:u,reloadDict:d,clearDict:h,getDictData:m,getDict:s,watchValue:p,getValue:y,getLabel:b,getChildren:_,getColor:C=>x(C,"color"),removePropValue:v,curDict:a}}const Pa=typeof performance=="object"&&performance&&typeof performance.now=="function"?performance:Date,If=new Set,Ko=typeof process=="object"&&process?process:{},Pf=(e,t,r,n)=>{typeof Ko.emitWarning=="function"?Ko.emitWarning(e,t,r,n):console.error(`[${r}] ${t}: ${e}`)};let Ds=globalThis.AbortController,Lf=globalThis.AbortSignal;if(typeof Ds>"u"){Lf=class{constructor(){Ee(this,"onabort");Ee(this,"_onabort",[]);Ee(this,"reason");Ee(this,"aborted",!1)}addEventListener(n,a){this._onabort.push(a)}},Ds=class{constructor(){Ee(this,"signal",new Lf);t()}abort(n){var a,i;if(!this.signal.aborted){this.signal.reason=n,this.signal.aborted=!0;for(const s of this.signal._onabort)s(n);(i=(a=this.signal).onabort)==null||i.call(a,n)}}};let e=((jm=Ko.env)==null?void 0:jm.LRU_CACHE_IGNORE_AC_WARNING)!=="1";const t=()=>{e&&(e=!1,Pf("AbortController is not defined. If using lru-cache in node 14, load an AbortController polyfill from the `node-abort-controller` package. A minimal polyfill is provided for use by LRUCache.fetch(), but it should not be relied upon in other contexts (eg, passing it to other APIs that use AbortController/AbortSignal might have undesirable effects). You may disable this with LRU_CACHE_IGNORE_AC_WARNING=1 in the env.","NO_ABORT_CONTROLLER","ENOTSUP",t))}}const P1=e=>!If.has(e),Un=e=>e&&e===Math.floor(e)&&e>0&&isFinite(e),Mf=e=>Un(e)?e<=Math.pow(2,8)?Uint8Array:e<=Math.pow(2,16)?Uint16Array:e<=Math.pow(2,32)?Uint32Array:e<=Number.MAX_SAFE_INTEGER?Rs:null:null;class Rs extends Array{constructor(t){super(t),this.fill(0)}}const Aa=class Aa{constructor(t,r){Ee(this,"heap");Ee(this,"length");if(!U(Aa,si))throw new TypeError("instantiate Stack using Stack.create(n)");this.heap=new r(t),this.length=0}static create(t){const r=Mf(t);if(!r)return[];Fe(Aa,si,!0);const n=new Aa(t,r);return Fe(Aa,si,!1),n}push(t){this.heap[this.length++]=t}pop(){return this.heap[--this.length]}};si=new WeakMap,Ve(Aa,si,!1);let Yo=Aa;const jc=class jc{constructor(t){Ve(this,ps);Ve(this,Oo);Ve(this,_n);Ve(this,yn);Ve(this,vs);Ve(this,ci);Ve(this,fi);Ve(this,at);Ve(this,ws);Ve(this,Oa);Ve(this,en,void 0);Ve(this,Ar,void 0);Ve(this,tn,void 0);Ve(this,rn,void 0);Ve(this,oi,void 0);Ee(this,"ttl");Ee(this,"ttlResolution");Ee(this,"ttlAutopurge");Ee(this,"updateAgeOnGet");Ee(this,"updateAgeOnHas");Ee(this,"allowStale");Ee(this,"noDisposeOnSet");Ee(this,"noUpdateTTL");Ee(this,"maxEntrySize");Ee(this,"sizeCalculation");Ee(this,"noDeleteOnFetchRejection");Ee(this,"noDeleteOnStaleGet");Ee(this,"allowStaleOnFetchAbort");Ee(this,"allowStaleOnFetchRejection");Ee(this,"ignoreFetchAbort");Ve(this,Pt,void 0);Ve(this,nn,void 0);Ve(this,Dt,void 0);Ve(this,lt,void 0);Ve(this,Be,void 0);Ve(this,ur,void 0);Ve(this,Dr,void 0);Ve(this,ir,void 0);Ve(this,Ht,void 0);Ve(this,an,void 0);Ve(this,jt,void 0);Ve(this,sn,void 0);Ve(this,on,void 0);Ve(this,Rr,void 0);Ve(this,ln,void 0);Ve(this,na,void 0);Ve(this,dr,void 0);Ve(this,Da,()=>{});Ve(this,Pn,()=>{});Ve(this,gs,()=>{});Ve(this,Or,()=>!1);Ve(this,Ra,t=>{});Ve(this,li,(t,r,n)=>{});Ve(this,xs,(t,r,n,a)=>{if(n||a)throw new TypeError("cannot set size without setting maxSize or maxEntrySize on cache");return 0});Ee(this,w3,"LRUCache");const{max:r=0,ttl:n,ttlResolution:a=1,ttlAutopurge:i,updateAgeOnGet:s,updateAgeOnHas:o,allowStale:c,dispose:f,disposeAfter:u,noDisposeOnSet:d,noUpdateTTL:h,maxSize:p=0,maxEntrySize:g=0,sizeCalculation:m,fetchMethod:x,noDeleteOnFetchRejection:v,noDeleteOnStaleGet:y,allowStaleOnFetchRejection:_,allowStaleOnFetchAbort:b,ignoreFetchAbort:D}=t;if(r!==0&&!Un(r))throw new TypeError("max option must be a nonnegative integer");const C=r?Mf(r):Array;if(!C)throw new Error("invalid max value: "+r);if(Fe(this,en,r),Fe(this,Ar,p),this.maxEntrySize=g||U(this,Ar),this.sizeCalculation=m,this.sizeCalculation){if(!U(this,Ar)&&!this.maxEntrySize)throw new TypeError("cannot set sizeCalculation without setting maxSize or maxEntrySize");if(typeof this.sizeCalculation!="function")throw new TypeError("sizeCalculation set to non-function")}if(x!==void 0&&typeof x!="function")throw new TypeError("fetchMethod must be a function if specified");if(Fe(this,oi,x),Fe(this,na,!!x),Fe(this,Dt,new Map),Fe(this,lt,new Array(r).fill(void 0)),Fe(this,Be,new Array(r).fill(void 0)),Fe(this,ur,new C(r)),Fe(this,Dr,new C(r)),Fe(this,ir,0),Fe(this,Ht,0),Fe(this,an,Yo.create(r)),Fe(this,Pt,0),Fe(this,nn,0),typeof f=="function"&&Fe(this,tn,f),typeof u=="function"?(Fe(this,rn,u),Fe(this,jt,[])):(Fe(this,rn,void 0),Fe(this,jt,void 0)),Fe(this,ln,!!U(this,tn)),Fe(this,dr,!!U(this,rn)),this.noDisposeOnSet=!!d,this.noUpdateTTL=!!h,this.noDeleteOnFetchRejection=!!v,this.allowStaleOnFetchRejection=!!_,this.allowStaleOnFetchAbort=!!b,this.ignoreFetchAbort=!!D,this.maxEntrySize!==0){if(U(this,Ar)!==0&&!Un(U(this,Ar)))throw new TypeError("maxSize must be a positive integer if specified");if(!Un(this.maxEntrySize))throw new TypeError("maxEntrySize must be a positive integer if specified");be(this,Oo,Ym).call(this)}if(this.allowStale=!!c,this.noDeleteOnStaleGet=!!y,this.updateAgeOnGet=!!s,this.updateAgeOnHas=!!o,this.ttlResolution=Un(a)||a===0?a:1,this.ttlAutopurge=!!i,this.ttl=n||0,this.ttl){if(!Un(this.ttl))throw new TypeError("ttl must be a positive integer if specified");be(this,ps,Kc).call(this)}if(U(this,en)===0&&this.ttl===0&&U(this,Ar)===0)throw new TypeError("At least one of max, maxSize, or ttl is required");if(!this.ttlAutopurge&&!U(this,en)&&!U(this,Ar)){const k="LRU_CACHE_UNBOUNDED";P1(k)&&(If.add(k),Pf("TTL caching without ttlAutopurge, max, or maxSize can result in unbounded memory consumption.","UnboundedCacheWarning",k,jc))}}static unsafeExposeInternals(t){return{starts:U(t,on),ttls:U(t,Rr),sizes:U(t,sn),keyMap:U(t,Dt),keyList:U(t,lt),valList:U(t,Be),next:U(t,ur),prev:U(t,Dr),get head(){return U(t,ir)},get tail(){return U(t,Ht)},free:U(t,an),isBackgroundFetch:r=>{var n;return be(n=t,at,ct).call(n,r)},backgroundFetch:(r,n,a,i)=>{var s;return be(s=t,fi,Po).call(s,r,n,a,i)},moveToTail:r=>{var n;return be(n=t,Oa,bs).call(n,r)},indexes:r=>{var n;return be(n=t,_n,ia).call(n,r)},rindexes:r=>{var n;return be(n=t,yn,sa).call(n,r)},isStale:r=>{var n;return U(n=t,Or).call(n,r)}}}get max(){return U(this,en)}get maxSize(){return U(this,Ar)}get calculatedSize(){return U(this,nn)}get size(){return U(this,Pt)}get fetchMethod(){return U(this,oi)}get dispose(){return U(this,tn)}get disposeAfter(){return U(this,rn)}getRemainingTTL(t){return U(this,Dt).has(t)?1/0:0}*entries(){for(const t of be(this,_n,ia).call(this))U(this,Be)[t]!==void 0&&U(this,lt)[t]!==void 0&&!be(this,at,ct).call(this,U(this,Be)[t])&&(yield[U(this,lt)[t],U(this,Be)[t]])}*rentries(){for(const t of be(this,yn,sa).call(this))U(this,Be)[t]!==void 0&&U(this,lt)[t]!==void 0&&!be(this,at,ct).call(this,U(this,Be)[t])&&(yield[U(this,lt)[t],U(this,Be)[t]])}*keys(){for(const t of be(this,_n,ia).call(this)){const r=U(this,lt)[t];r!==void 0&&!be(this,at,ct).call(this,U(this,Be)[t])&&(yield r)}}*rkeys(){for(const t of be(this,yn,sa).call(this)){const r=U(this,lt)[t];r!==void 0&&!be(this,at,ct).call(this,U(this,Be)[t])&&(yield r)}}*values(){for(const t of be(this,_n,ia).call(this))U(this,Be)[t]!==void 0&&!be(this,at,ct).call(this,U(this,Be)[t])&&(yield U(this,Be)[t])}*rvalues(){for(const t of be(this,yn,sa).call(this))U(this,Be)[t]!==void 0&&!be(this,at,ct).call(this,U(this,Be)[t])&&(yield U(this,Be)[t])}[Symbol.iterator](){return this.entries()}find(t,r={}){for(const n of be(this,_n,ia).call(this)){const a=U(this,Be)[n],i=be(this,at,ct).call(this,a)?a.__staleWhileFetching:a;if(i!==void 0&&t(i,U(this,lt)[n],this))return this.get(U(this,lt)[n],r)}}forEach(t,r=this){for(const n of be(this,_n,ia).call(this)){const a=U(this,Be)[n],i=be(this,at,ct).call(this,a)?a.__staleWhileFetching:a;i!==void 0&&t.call(r,i,U(this,lt)[n],this)}}rforEach(t,r=this){for(const n of be(this,yn,sa).call(this)){const a=U(this,Be)[n],i=be(this,at,ct).call(this,a)?a.__staleWhileFetching:a;i!==void 0&&t.call(r,i,U(this,lt)[n],this)}}purgeStale(){let t=!1;for(const r of be(this,yn,sa).call(this,{allowStale:!0}))U(this,Or).call(this,r)&&(this.delete(U(this,lt)[r]),t=!0);return t}info(t){const r=U(this,Dt).get(t);if(r===void 0)return;const n=U(this,Be)[r],a=be(this,at,ct).call(this,n)?n.__staleWhileFetching:n;if(a===void 0)return;const i={value:a};if(U(this,Rr)&&U(this,on)){const s=U(this,Rr)[r],o=U(this,on)[r];if(s&&o){const c=s-(Pa.now()-o);i.ttl=c,i.start=Date.now()}}return U(this,sn)&&(i.size=U(this,sn)[r]),i}dump(){const t=[];for(const r of be(this,_n,ia).call(this,{allowStale:!0})){const n=U(this,lt)[r],a=U(this,Be)[r],i=be(this,at,ct).call(this,a)?a.__staleWhileFetching:a;if(i===void 0||n===void 0)continue;const s={value:i};if(U(this,Rr)&&U(this,on)){s.ttl=U(this,Rr)[r];const o=Pa.now()-U(this,on)[r];s.start=Math.floor(Date.now()-o)}U(this,sn)&&(s.size=U(this,sn)[r]),t.unshift([n,s])}return t}load(t){this.clear();for(const[r,n]of t){if(n.start){const a=Date.now()-n.start;n.start=Pa.now()-a}this.set(r,n.value,n)}}set(t,r,n={}){var h,p,g,m,x;if(r===void 0)return this.delete(t),this;const{ttl:a=this.ttl,start:i,noDisposeOnSet:s=this.noDisposeOnSet,sizeCalculation:o=this.sizeCalculation,status:c}=n;let{noUpdateTTL:f=this.noUpdateTTL}=n;const u=U(this,xs).call(this,t,r,n.size||0,o);if(this.maxEntrySize&&u>this.maxEntrySize)return c&&(c.set="miss",c.maxEntrySizeExceeded=!0),this.delete(t),this;let d=U(this,Pt)===0?void 0:U(this,Dt).get(t);if(d===void 0)d=U(this,Pt)===0?U(this,Ht):U(this,an).length!==0?U(this,an).pop():U(this,Pt)===U(this,en)?be(this,ci,Io).call(this,!1):U(this,Pt),U(this,lt)[d]=t,U(this,Be)[d]=r,U(this,Dt).set(t,d),U(this,ur)[U(this,Ht)]=d,U(this,Dr)[d]=U(this,Ht),Fe(this,Ht,d),No(this,Pt)._++,U(this,li).call(this,d,u,c),c&&(c.set="add"),f=!1;else{be(this,Oa,bs).call(this,d);const v=U(this,Be)[d];if(r!==v){if(U(this,na)&&be(this,at,ct).call(this,v)){v.__abortController.abort(new Error("replaced"));const{__staleWhileFetching:y}=v;y!==void 0&&!s&&(U(this,ln)&&((h=U(this,tn))==null||h.call(this,y,t,"set")),U(this,dr)&&((p=U(this,jt))==null||p.push([y,t,"set"])))}else s||(U(this,ln)&&((g=U(this,tn))==null||g.call(this,v,t,"set")),U(this,dr)&&((m=U(this,jt))==null||m.push([v,t,"set"])));if(U(this,Ra).call(this,d),U(this,li).call(this,d,u,c),U(this,Be)[d]=r,c){c.set="replace";const y=v&&be(this,at,ct).call(this,v)?v.__staleWhileFetching:v;y!==void 0&&(c.oldValue=y)}}else c&&(c.set="update")}if(a!==0&&!U(this,Rr)&&be(this,ps,Kc).call(this),U(this,Rr)&&(f||U(this,gs).call(this,d,a,i),c&&U(this,Pn).call(this,c,d)),!s&&U(this,dr)&&U(this,jt)){const v=U(this,jt);let y;for(;y=v==null?void 0:v.shift();)(x=U(this,rn))==null||x.call(this,...y)}return this}pop(){var t;try{for(;U(this,Pt);){const r=U(this,Be)[U(this,ir)];if(be(this,ci,Io).call(this,!0),be(this,at,ct).call(this,r)){if(r.__staleWhileFetching)return r.__staleWhileFetching}else if(r!==void 0)return r}}finally{if(U(this,dr)&&U(this,jt)){const r=U(this,jt);let n;for(;n=r==null?void 0:r.shift();)(t=U(this,rn))==null||t.call(this,...n)}}}has(t,r={}){const{updateAgeOnHas:n=this.updateAgeOnHas,status:a}=r,i=U(this,Dt).get(t);if(i!==void 0){const s=U(this,Be)[i];if(be(this,at,ct).call(this,s)&&s.__staleWhileFetching===void 0)return!1;if(U(this,Or).call(this,i))a&&(a.has="stale",U(this,Pn).call(this,a,i));else return n&&U(this,Da).call(this,i),a&&(a.has="hit",U(this,Pn).call(this,a,i)),!0}else a&&(a.has="miss");return!1}peek(t,r={}){const{allowStale:n=this.allowStale}=r,a=U(this,Dt).get(t);if(a===void 0||!n&&U(this,Or).call(this,a))return;const i=U(this,Be)[a];return be(this,at,ct).call(this,i)?i.__staleWhileFetching:i}async fetch(t,r={}){const{allowStale:n=this.allowStale,updateAgeOnGet:a=this.updateAgeOnGet,noDeleteOnStaleGet:i=this.noDeleteOnStaleGet,ttl:s=this.ttl,noDisposeOnSet:o=this.noDisposeOnSet,size:c=0,sizeCalculation:f=this.sizeCalculation,noUpdateTTL:u=this.noUpdateTTL,noDeleteOnFetchRejection:d=this.noDeleteOnFetchRejection,allowStaleOnFetchRejection:h=this.allowStaleOnFetchRejection,ignoreFetchAbort:p=this.ignoreFetchAbort,allowStaleOnFetchAbort:g=this.allowStaleOnFetchAbort,context:m,forceRefresh:x=!1,status:v,signal:y}=r;if(!U(this,na))return v&&(v.fetch="get"),this.get(t,{allowStale:n,updateAgeOnGet:a,noDeleteOnStaleGet:i,status:v});const _={allowStale:n,updateAgeOnGet:a,noDeleteOnStaleGet:i,ttl:s,noDisposeOnSet:o,size:c,sizeCalculation:f,noUpdateTTL:u,noDeleteOnFetchRejection:d,allowStaleOnFetchRejection:h,allowStaleOnFetchAbort:g,ignoreFetchAbort:p,status:v,signal:y};let b=U(this,Dt).get(t);if(b===void 0){v&&(v.fetch="miss");const D=be(this,fi,Po).call(this,t,b,_,m);return D.__returned=D}else{const D=U(this,Be)[b];if(be(this,at,ct).call(this,D)){const X=n&&D.__staleWhileFetching!==void 0;return v&&(v.fetch="inflight",X&&(v.returnedStale=!0)),X?D.__staleWhileFetching:D.__returned=D}const C=U(this,Or).call(this,b);if(!x&&!C)return v&&(v.fetch="hit"),be(this,Oa,bs).call(this,b),a&&U(this,Da).call(this,b),v&&U(this,Pn).call(this,v,b),D;const k=be(this,fi,Po).call(this,t,b,_,m),O=k.__staleWhileFetching!==void 0&&n;return v&&(v.fetch=C?"stale":"refresh",O&&C&&(v.returnedStale=!0)),O?k.__staleWhileFetching:k.__returned=k}}get(t,r={}){const{allowStale:n=this.allowStale,updateAgeOnGet:a=this.updateAgeOnGet,noDeleteOnStaleGet:i=this.noDeleteOnStaleGet,status:s}=r,o=U(this,Dt).get(t);if(o!==void 0){const c=U(this,Be)[o],f=be(this,at,ct).call(this,c);return s&&U(this,Pn).call(this,s,o),U(this,Or).call(this,o)?(s&&(s.get="stale"),f?(s&&n&&c.__staleWhileFetching!==void 0&&(s.returnedStale=!0),n?c.__staleWhileFetching:void 0):(i||this.delete(t),s&&n&&(s.returnedStale=!0),n?c:void 0)):(s&&(s.get="hit"),f?c.__staleWhileFetching:(be(this,Oa,bs).call(this,o),a&&U(this,Da).call(this,o),c))}else s&&(s.get="miss")}delete(t){var n,a,i,s;let r=!1;if(U(this,Pt)!==0){const o=U(this,Dt).get(t);if(o!==void 0)if(r=!0,U(this,Pt)===1)this.clear();else{U(this,Ra).call(this,o);const c=U(this,Be)[o];if(be(this,at,ct).call(this,c)?c.__abortController.abort(new Error("deleted")):(U(this,ln)||U(this,dr))&&(U(this,ln)&&((n=U(this,tn))==null||n.call(this,c,t,"delete")),U(this,dr)&&((a=U(this,jt))==null||a.push([c,t,"delete"]))),U(this,Dt).delete(t),U(this,lt)[o]=void 0,U(this,Be)[o]=void 0,o===U(this,Ht))Fe(this,Ht,U(this,Dr)[o]);else if(o===U(this,ir))Fe(this,ir,U(this,ur)[o]);else{const f=U(this,Dr)[o];U(this,ur)[f]=U(this,ur)[o];const u=U(this,ur)[o];U(this,Dr)[u]=U(this,Dr)[o]}No(this,Pt)._--,U(this,an).push(o)}}if(U(this,dr)&&((i=U(this,jt))!=null&&i.length)){const o=U(this,jt);let c;for(;c=o==null?void 0:o.shift();)(s=U(this,rn))==null||s.call(this,...c)}return r}clear(){var t,r,n;for(const a of be(this,yn,sa).call(this,{allowStale:!0})){const i=U(this,Be)[a];if(be(this,at,ct).call(this,i))i.__abortController.abort(new Error("deleted"));else{const s=U(this,lt)[a];U(this,ln)&&((t=U(this,tn))==null||t.call(this,i,s,"delete")),U(this,dr)&&((r=U(this,jt))==null||r.push([i,s,"delete"]))}}if(U(this,Dt).clear(),U(this,Be).fill(void 0),U(this,lt).fill(void 0),U(this,Rr)&&U(this,on)&&(U(this,Rr).fill(0),U(this,on).fill(0)),U(this,sn)&&U(this,sn).fill(0),Fe(this,ir,0),Fe(this,Ht,0),U(this,an).length=0,Fe(this,nn,0),Fe(this,Pt,0),U(this,dr)&&U(this,jt)){const a=U(this,jt);let i;for(;i=a==null?void 0:a.shift();)(n=U(this,rn))==null||n.call(this,...i)}}};w3=Symbol.toStringTag,en=new WeakMap,Ar=new WeakMap,tn=new WeakMap,rn=new WeakMap,oi=new WeakMap,Pt=new WeakMap,nn=new WeakMap,Dt=new WeakMap,lt=new WeakMap,Be=new WeakMap,ur=new WeakMap,Dr=new WeakMap,ir=new WeakMap,Ht=new WeakMap,an=new WeakMap,jt=new WeakMap,sn=new WeakMap,on=new WeakMap,Rr=new WeakMap,ln=new WeakMap,na=new WeakMap,dr=new WeakMap,ps=new WeakSet,Kc=function(){const t=new Rs(U(this,en)),r=new Rs(U(this,en));Fe(this,Rr,t),Fe(this,on,r),Fe(this,gs,(i,s,o=Pa.now())=>{if(r[i]=s!==0?o:0,t[i]=s,s!==0&&this.ttlAutopurge){const c=setTimeout(()=>{U(this,Or).call(this,i)&&this.delete(U(this,lt)[i])},s+1);c.unref&&c.unref()}}),Fe(this,Da,i=>{r[i]=t[i]!==0?Pa.now():0}),Fe(this,Pn,(i,s)=>{if(t[s]){const o=t[s],c=r[s];if(!o||!c)return;i.ttl=o,i.start=c,i.now=n||a();const f=i.now-c;i.remainingTTL=o-f}});let n=0;const a=()=>{const i=Pa.now();if(this.ttlResolution>0){n=i;const s=setTimeout(()=>n=0,this.ttlResolution);s.unref&&s.unref()}return i};this.getRemainingTTL=i=>{const s=U(this,Dt).get(i);if(s===void 0)return 0;const o=t[s],c=r[s];if(!o||!c)return 1/0;const f=(n||a())-c;return o-f},Fe(this,Or,i=>{const s=r[i],o=t[i];return!!o&&!!s&&(n||a())-s>o})},Da=new WeakMap,Pn=new WeakMap,gs=new WeakMap,Or=new WeakMap,Oo=new WeakSet,Ym=function(){const t=new Rs(U(this,en));Fe(this,nn,0),Fe(this,sn,t),Fe(this,Ra,r=>{Fe(this,nn,U(this,nn)-t[r]),t[r]=0}),Fe(this,xs,(r,n,a,i)=>{if(be(this,at,ct).call(this,n))return 0;if(!Un(a))if(i){if(typeof i!="function")throw new TypeError("sizeCalculation must be a function");if(a=i(n,r),!Un(a))throw new TypeError("sizeCalculation return invalid (expect positive integer)")}else throw new TypeError("invalid size value (must be positive integer). When maxSize or maxEntrySize is used, sizeCalculation or size must be set.");return a}),Fe(this,li,(r,n,a)=>{if(t[r]=n,U(this,Ar)){const i=U(this,Ar)-t[r];for(;U(this,nn)>i;)be(this,ci,Io).call(this,!0)}Fe(this,nn,U(this,nn)+t[r]),a&&(a.entrySize=n,a.totalCalculatedSize=U(this,nn))})},Ra=new WeakMap,li=new WeakMap,xs=new WeakMap,_n=new WeakSet,ia=function*({allowStale:t=this.allowStale}={}){if(U(this,Pt))for(let r=U(this,Ht);!(!be(this,vs,Yc).call(this,r)||((t||!U(this,Or).call(this,r))&&(yield r),r===U(this,ir)));)r=U(this,Dr)[r]},yn=new WeakSet,sa=function*({allowStale:t=this.allowStale}={}){if(U(this,Pt))for(let r=U(this,ir);!(!be(this,vs,Yc).call(this,r)||((t||!U(this,Or).call(this,r))&&(yield r),r===U(this,Ht)));)r=U(this,ur)[r]},vs=new WeakSet,Yc=function(t){return t!==void 0&&U(this,Dt).get(U(this,lt)[t])===t},ci=new WeakSet,Io=function(t){var i,s;const r=U(this,ir),n=U(this,lt)[r],a=U(this,Be)[r];return U(this,na)&&be(this,at,ct).call(this,a)?a.__abortController.abort(new Error("evicted")):(U(this,ln)||U(this,dr))&&(U(this,ln)&&((i=U(this,tn))==null||i.call(this,a,n,"evict")),U(this,dr)&&((s=U(this,jt))==null||s.push([a,n,"evict"]))),U(this,Ra).call(this,r),t&&(U(this,lt)[r]=void 0,U(this,Be)[r]=void 0,U(this,an).push(r)),U(this,Pt)===1?(Fe(this,ir,Fe(this,Ht,0)),U(this,an).length=0):Fe(this,ir,U(this,ur)[r]),U(this,Dt).delete(n),No(this,Pt)._--,r},fi=new WeakSet,Po=function(t,r,n,a){const i=r===void 0?void 0:U(this,Be)[r];if(be(this,at,ct).call(this,i))return i;const s=new Ds,{signal:o}=n;o==null||o.addEventListener("abort",()=>s.abort(o.reason),{signal:s.signal});const c={signal:s.signal,options:n,context:a},f=(m,x=!1)=>{const{aborted:v}=s.signal,y=n.ignoreFetchAbort&&m!==void 0;if(n.status&&(v&&!x?(n.status.fetchAborted=!0,n.status.fetchError=s.signal.reason,y&&(n.status.fetchAbortIgnored=!0)):n.status.fetchResolved=!0),v&&!y&&!x)return d(s.signal.reason);const _=p;return U(this,Be)[r]===p&&(m===void 0?_.__staleWhileFetching?U(this,Be)[r]=_.__staleWhileFetching:this.delete(t):(n.status&&(n.status.fetchUpdated=!0),this.set(t,m,c.options))),m},u=m=>(n.status&&(n.status.fetchRejected=!0,n.status.fetchError=m),d(m)),d=m=>{const{aborted:x}=s.signal,v=x&&n.allowStaleOnFetchAbort,y=v||n.allowStaleOnFetchRejection,_=y||n.noDeleteOnFetchRejection,b=p;if(U(this,Be)[r]===p&&(!_||b.__staleWhileFetching===void 0?this.delete(t):v||(U(this,Be)[r]=b.__staleWhileFetching)),y)return n.status&&b.__staleWhileFetching!==void 0&&(n.status.returnedStale=!0),b.__staleWhileFetching;if(b.__returned===b)throw m},h=(m,x)=>{var y;const v=(y=U(this,oi))==null?void 0:y.call(this,t,i,c);v&&v instanceof Promise&&v.then(_=>m(_===void 0?void 0:_),x),s.signal.addEventListener("abort",()=>{(!n.ignoreFetchAbort||n.allowStaleOnFetchAbort)&&(m(void 0),n.allowStaleOnFetchAbort&&(m=_=>f(_,!0)))})};n.status&&(n.status.fetchDispatched=!0);const p=new Promise(h).then(f,u),g=Object.assign(p,{__abortController:s,__staleWhileFetching:i,__returned:void 0});return r===void 0?(this.set(t,g,{...c.options,status:void 0}),r=U(this,Dt).get(t)):U(this,Be)[r]=g,g},at=new WeakSet,ct=function(t){if(!U(this,na))return!1;const r=t;return!!r&&r instanceof Promise&&r.hasOwnProperty("__staleWhileFetching")&&r.__abortController instanceof Ds},ws=new WeakSet,qc=function(t,r){U(this,Dr)[r]=t,U(this,ur)[t]=r},Oa=new WeakSet,bs=function(t){t!==U(this,Ht)&&(t===U(this,ir)?Fe(this,ir,U(this,ur)[t]):be(this,ws,qc).call(this,U(this,Dr)[t],U(this,ur)[t]),be(this,ws,qc).call(this,U(this,Ht),t),Fe(this,Ht,t))};let qo=jc;const Os=new qo({max:500,maxSize:5e3,ttl:1e3*60*30,sizeCalculation:(e,t)=>1}),{UnMergeable:L1}=Ze();function M1(e){Vf=e}let Vf=async e=>(Te.warn("请配置 app.use(FsCrud,{dictRequest:(context)=>{ 你的字典请求方法 }})"),[]);class Jo extends L1{constructor(r){super();Ee(this,"cache",!1);Ee(this,"prototype",!1);Ee(this,"immediate",!0);Ee(this,"url");Ee(this,"getData");Ee(this,"value","value");Ee(this,"label","label");Ee(this,"labelBuilder");Ee(this,"children","children");Ee(this,"color","color");Ee(this,"isTree",!1);Ee(this,"_data",null);Ee(this,"originalData");Ee(this,"dataMap",{});Ee(this,"loading",!1);Ee(this,"custom",{});Ee(this,"getNodesByValues");Ee(this,"onReady");Ee(this,"notifies",[]);Ee(this,"_unfetchValues",{});Object.defineProperty(this,"loading",{value:!1,enumerable:!1}),Object.defineProperty(this,"notifies",{value:!1,enumerable:!1}),Object.defineProperty(this,"originalData",{value:null,enumerable:!1}),this.loading=!1,z.merge(this,r),r.data!=null&&(this.originalData=r.data,this.setData(r.data)),this.toMap()}get data(){return this._data}set data(r){this._data=r,this.toMap()}isDynamic(){return this.url instanceof Function||this.getData instanceof Function||this.prototype}setData(r){this.data=r}async _loadDict(r){if(this.data&&!r.reload)return this.data;if(this.loading)return this._registerNotify();let n=null;if(this.getNodesByValues){if(r.value){let a=null;this.cache&&this.url&&(a=this.url+r.value);let i=null;if(a&&(i=Os.get(a)),i)n=i;else{const s=Array.isArray(r.value)?r.value:[r.value];if(n=await this.getNodesByValues(s,r),n!=null&&!(n instanceof Array)){Te.error("getNodesByValues需要返回数组，当前返回值：",n);return}a&&Os.set(a,n)}}}else if(this.originalData)n=this.originalData;else{this.loading=!0;try{n=await this.getRemoteDictData(r)}finally{this.loading=!1}}this.data=n,this.onReady&&this.onReady({dict:this,...r}),this._triggerNotify()}_triggerNotify(){this.notifies&&this.notifies.length>0&&(z.forEach(this.notifies,r=>{r(this.data)}),this.notifies.length=0)}_registerNotify(){let r=null;const n=new Promise(a=>{r=i=>{a(i)}});return this.notifies||(this.notifies=[]),this.notifies.push(r),n}async loadDict(r){return await this._loadDict({...r})}async reloadDict(r){return await this.loadDict({...r,reload:!0})}async appendByValues(r){if(this.getNodesByValues==null){Te.warn("请配置getNodesByValues");return}for(const a of r)this.dataMap[a]||this._unfetchValues[a]||(this._unfetchValues[a]={loading:!1,value:a});await l.nextTick(),await l.nextTick(),await l.nextTick();const n=[];if(z.forEach(this._unfetchValues,a=>{a.loading||(a.loading=!0,n.push(a.value))}),n.length>0){const a=await this.getNodesByValues(n);this.setData([...this.data||[],...a]);for(const i of n)delete this._unfetchValues[i];return Object.keys(this._unfetchValues).length===0&&this._triggerNotify(),this.data}else return this._registerNotify()}clear(){this.originalData=null,this.setData(null)}async getRemoteDictData(r){let n,a,i;if(this.url&&(i=this.url,i instanceof Function&&(i=i({...r,dict:this})),a=i),this.getData!=null)n=async()=>{const s=await this.getData({url:i,dict:this,...r});return Array.isArray(s)?s:[]};else if(i)n=async()=>{const s=await Vf({url:i,dict:this});return Array.isArray(s)?s:[]};else return[];if(this.cache&&a){let s=Os.get(a);if(s==null)s={loaded:!1,loading:!0,data:void 0,callback:[]},Os.set(a,s);else{if(s.loaded)return s.data;if(s.loading)return new Promise(o=>{const c=f=>{o(f)};s.callback.push(c)})}try{s.loaded=!1,s.loading=!0;let o=await n();o=o||[],o instanceof Array||Te.warn("dict data 格式有误，期望格式为数组，实际格式为：",o),s.data=o,s.loaded=!0,s.loading=!1;for(const c of s.callback)c(o);return s.callback=[],o}catch(o){s.loading=!1,s.loaded=!1,Te.error("load dict error:",o)}}return await n()}toMap(){if(this._data==null){this.dataMap={};return}const r={};this.data&&this.buildMap(r,this.data||[]),this.dataMap=r}buildMap(r,n){z.forEach(n,a=>{r[this.getValue(a)]=a,this.isTree&&this.getChildren(a)&&this.buildMap(r,this.getChildren(a))})}getValue(r){return r[this.value]}getLabel(r){return this.labelBuilder?this.labelBuilder(r):r[this.label]}getChildren(r){return r[this.children]}getColor(r){return r[this.color]}getDictData(){return this.data}getDictMap(){return this.dataMap}getNodeByValue(r){return this.dataMap[r]}getNodesFromDataMap(r){if(r==null)return[];z.isArray(r)||(r=[r]);const n=[];return z.forEach(r,a=>{const i=this.dataMap[a];i?n.push(i):n.push({[this.value]:a})}),n}}function Uf(e){const t=l.shallowReactive(new Jo(e));return!t.prototype&&t.immediate&&t.loadDict(),t}function $f(){return{dict:Uf,setDictRequest:M1,Dict:Jo}}function V1(){return{addTypes:Ia.addTypes,getType:Ia.getType,getTypes:Ia.getTypes,install:Ia.install}}async function U1(e){await l.nextTick();const t=e.getModal();if(t==null)return;const r=t.querySelector(".ant-modal-header");if(r==null)return;const n=t,i=t.style;r.style.cursor="move",r.onmousedown=s=>{const o=s.clientX,c=s.clientY;n.style.transform="translate(0px, 0px)";let f,u;i.left.includes("%")?(f=+document.body.clientWidth*(+i.left.replace(/%/g,"")/100),u=+document.body.clientHeight*(+i.top.replace(/%/g,"")/100)):(f=+i.left.replace(/px/g,""),u=+i.top.replace(/px/g,""),u=u===0?100:u),document.onmousemove=function(d){const h=d.clientX-o,p=d.clientY-c;n.style.left=`${h+f}px`,n.style.top=`${p+u}px`},document.onmouseup=function(d){document.onmousemove=null,document.onmouseup=null}}}async function $1(e){await l.nextTick();const t=e.getModal();if(t==null)return;const r=t.querySelector(".n-card-header");if(r==null)return;const n=t,i=t.style;r.style.cursor="move",r.onmousedown=s=>{const o=s.clientX,c=s.clientY;n.style.transform="translate(0px, 0px)";let f,u;i.left.includes("%")?(f=+document.body.clientWidth*(+i.left.replace(/%/g,"")/100),u=+document.body.clientHeight*(+i.top.replace(/%/g,"")/100)):(f=+i.left.replace(/px/g,""),u=+i.top.replace(/px/g,"")),document.ondrag=async function(d){if(d.clientX==0&&d.clientY==0)return;const h=d.clientX-o,p=d.clientY-c;n.style.left=`${h+f}px`,n.style.top=`${p+u}px`},document.ondragend=function(d){document.ondrag=null,document.ondragend=null}}}async function W1(e){const{ui:t}=de.useUi();t.type==="antdv"?await U1(e):t.type==="element"||await $1(e)}function Wf(){return{dragModal:W1}}const Hf={logger:{off:{tableColumns:!1}}},H1=l.defineComponent({name:"FsContainer",props:{fixedHeight:{type:Boolean,default:!0},bodyStyle:{type:Object,default:()=>({})},innerStyle:{type:Object,default:()=>({})}},setup(e,t){const{merge:r}=Ze(),n=l.computed(()=>e.fixedHeight===!1?r({position:"relative"},e.innerStyle):e.innerStyle),a=l.computed(()=>e.fixedHeight===!1?r({flex:"unset"},e.bodyStyle):e.bodyStyle);return{computedInnerStyle:n,computedBodyStyle:a}}}),$3="",j1={class:"fs-container"},z1={class:"box"},G1={class:"header"},X1={class:"footer"};function K1(e,t,r,n,a,i){return l.openBlock(),l.createElementBlock("div",j1,[l.createElementVNode("div",z1,[l.createElementVNode("div",{class:"inner",style:l.normalizeStyle(e.computedInnerStyle)},[l.createElementVNode("div",G1,[l.renderSlot(e.$slots,"header")]),l.createElementVNode("div",{class:"body",style:l.normalizeStyle(e.computedBodyStyle)},[l.renderSlot(e.$slots,"default")],4),l.createElementVNode("div",X1,[l.renderSlot(e.$slots,"footer")])],4)]),l.renderSlot(e.$slots,"box")])}const jf=rt(H1,[["render",K1]]),Y1=l.defineComponent({name:"FsLayoutDefault"}),W3="",q1={class:"fs-crud-header"},J1={class:"fs-header-top"},Z1={class:"fs-header-middle"},Q1={class:"fs-header-bottom"},eg={class:"fs-crud-footer"};function tg(e,t,r,n,a,i){const s=l.resolveComponent("fs-container");return l.openBlock(),l.createBlock(s,{class:"fs-layout-default"},{header:l.withCtx(()=>[l.createElementVNode("div",q1,[l.createElementVNode("div",J1,[l.renderSlot(e.$slots,"header-top")]),l.renderSlot(e.$slots,"search"),l.createElementVNode("div",Z1,[l.renderSlot(e.$slots,"header-middle")]),l.renderSlot(e.$slots,"actionbar"),l.renderSlot(e.$slots,"toolbar"),l.createElementVNode("div",Q1,[l.renderSlot(e.$slots,"header-bottom")]),l.renderSlot(e.$slots,"tabs")])]),footer:l.withCtx(()=>[l.createElementVNode("div",eg,[l.renderSlot(e.$slots,"footer-top"),l.renderSlot(e.$slots,"pagination"),l.renderSlot(e.$slots,"footer-bottom")])]),default:l.withCtx(()=>[l.renderSlot(e.$slots,"default"),l.renderSlot(e.$slots,"table"),l.renderSlot(e.$slots,"form")]),_:3})}const zf=rt(Y1,[["render",tg]]),rg=l.defineComponent({name:"FsLayoutCard",setup(){const e=l.inject("get:crudBinding"),t=l.computed(()=>{var a,i;return e==null?!0:(i=(a=e())==null?void 0:a.search)==null?void 0:i.show}),{ui:r}=de.useUi(),n=l.ref(r.card.name);return{searchShow:t,cardComponentName:n}}}),H3="",ng={class:"fs-header-top"},ag={class:"fs-header-bottom"},ig={class:"top-bar"},sg={class:"top-bar"},og={class:"fs-crud-footer"};function lg(e,t,r,n,a,i){const s=l.resolveComponent("fs-container");return l.openBlock(),l.createBlock(s,{class:"fs-layout-card"},l.createSlots({default:l.withCtx(()=>[l.createVNode(s,null,{header:l.withCtx(()=>[l.renderSlot(e.$slots,"tabs")]),default:l.withCtx(()=>[(l.openBlock(),l.createBlock(l.resolveDynamicComponent(e.cardComponentName),{class:"fs-layout-card-body"},{title:l.withCtx(()=>[l.createElementVNode("div",ig,[l.renderSlot(e.$slots,"actionbar"),l.renderSlot(e.$slots,"toolbar")])]),header:l.withCtx(()=>[l.createElementVNode("div",sg,[l.renderSlot(e.$slots,"actionbar"),l.renderSlot(e.$slots,"toolbar")])]),default:l.withCtx(()=>[l.createVNode(s,null,{footer:l.withCtx(()=>[l.createElementVNode("div",og,[l.renderSlot(e.$slots,"footer-top"),l.renderSlot(e.$slots,"pagination"),l.renderSlot(e.$slots,"footer-bottom")])]),default:l.withCtx(()=>[l.renderSlot(e.$slots,"default"),l.renderSlot(e.$slots,"table"),l.renderSlot(e.$slots,"form")]),_:3})]),_:3}))]),_:3})]),_:2},[e.searchShow?{name:"header",fn:l.withCtx(()=>[l.createElementVNode("div",ng,[l.renderSlot(e.$slots,"header-top")]),(l.openBlock(),l.createBlock(l.resolveDynamicComponent(e.cardComponentName),null,{default:l.withCtx(()=>[l.renderSlot(e.$slots,"search")]),_:3})),l.createElementVNode("div",ag,[l.renderSlot(e.$slots,"header-bottom")])]),key:"0"}:void 0]),1024)}const Gf=rt(rg,[["render",lg]]),j3="";function cg(e){return typeof e=="function"||Object.prototype.toString.call(e)==="[object Object]"&&!l.isVNode(e)}const Xf=l.defineComponent({name:"FsButton",inheritAttrs:!1,props:{text:{type:String,default:"",required:!1},icon:{type:[String,Object,Function],default:"",required:!1},iconRight:{type:[String,Object,Function],default:"",required:!1},circle:{type:Boolean,default:!1,required:!1},tooltip:{type:Object,default:void 0},buttonProps:{type:Object,default:void 0},className:{}},setup(e,t){const{ui:r}=de.useUi(),{merge:n}=Ze(),a=(f,u="fs-button-icon")=>{if(f!=null)return typeof f=="string"?l.createVNode(l.resolveComponent("fs-icon"),{icon:f,class:u},null):typeof f=="function"?f():l.createVNode(l.resolveComponent("fs-icon"),l.mergeProps(f,{class:u}),null)},i=()=>{const f=e.icon,u=e.iconRight,d=r.type!=="element",h=!d;let p;const g={...t.slots};(f&&!d&&!h||t.slots.default||e.text||u)&&(g.default=()=>{const y=[];return f&&!d&&!h&&y.push(a(f)),t.slots.default&&y.push(t.slots.default()),e.text&&y.push(e.text),u&&y.push(a(u,"fs-button-icon-right")),y}),f&&(d&&!g.icon?g.icon=()=>a(f):h&&!g.icon&&(p=a(f)));const m=e.circle?r.button.circle:{},x=l.resolveDynamicComponent(r.button.name),v=n({...m,class:{"fs-button":!0,"is-thin":!e.text&&!t.slots.default}},{class:e.className,...t.attrs,...e.buttonProps});return p&&(v.icon=p),l.h(x,v,g)};if(!e.tooltip)return i;const s=l.resolveDynamicComponent(r.tooltip.name),o=l.computed(()=>z.omit(e.tooltip,"slots")),c=r.tooltip.trigger;return()=>{var u;const f={...(u=e.tooltip)==null?void 0:u.slots,[c]:i};return l.createVNode(s,o.value,cg(f)?f:{default:()=>[f]})}}}),z3="",Kf=l.defineComponent({name:"FsIcon",inheritAttrs:!1,props:{icon:{type:String,default:void 0,require:!0}},setup(e,t){const{ui:r}=de.useUi(),n=l.computed(()=>{var i;if(e.icon&&((i=e.icon)==null?void 0:i.indexOf(":"))>=0){if(e.icon.startsWith("svg:")){const o=l.resolveDynamicComponent("FsIconSvg");return()=>{const c=e.icon.replace("svg:","");return l.createVNode(o,l.mergeProps({class:"fs-icon",icon:c},t.attrs),null)}}const s=l.resolveDynamicComponent("FsIconify");return()=>l.createVNode(s,l.mergeProps({class:"fs-icon",icon:e.icon},t.attrs),null)}const a=l.resolveDynamicComponent(e.icon);return typeof a=="string"?()=>l.createVNode("span",{title:"error icon name"},[a]):r.icon.isComponent?()=>l.createVNode(a,l.mergeProps({class:"fs-icon"},t.attrs),null):()=>l.createVNode(l.resolveComponent("el-icon"),l.mergeProps({class:"fs-icon"},t.attrs),{default:()=>[l.createVNode(a,null,null)]})});return()=>n.value()}}),fg=l.defineComponent({name:"FsIconify",components:{Icon:qm.Icon},props:{icon:{type:String},spin:{type:Boolean,default:!1}},setup(e,t){return{iconifyRef:l.ref(null)}}}),G3="";function ug(e,t,r,n,a,i){const s=l.resolveComponent("Icon");return l.openBlock(),l.createElementBlock("span",{class:l.normalizeClass(["fs-iconify",{"fs-iconify-spin":e.spin}])},[l.createVNode(s,{ref:"iconifyRef",icon:e.icon},null,8,["icon"])],2)}const Yf=rt(fg,[["render",ug]]),dg=l.defineComponent({name:"FsSvgIcon",props:{icon:{type:String,required:!0},size:{type:[Number,String],default:16},spin:{type:Boolean,default:!1}},setup(e){const t=l.computed(()=>`#${e.icon}`),r=l.computed(()=>{const{size:n}=e;let a=`${n}`;return a=`${a.replace("px","")}px`,{width:a,height:a}});return{symbolId:t,getStyle:r}}}),X3="",hg={class:"fs-icon-svg-content","aria-hidden":"true"},mg=["xlink:href"];function pg(e,t,r,n,a,i){return l.openBlock(),l.createElementBlock("span",{class:l.normalizeClass(["fs-icon-svg",e.spin&&"fs-icon-spin"])},[(l.openBlock(),l.createElementBlock("svg",hg,[l.createElementVNode("use",{"xlink:href":e.symbolId},null,8,mg)]))],2)}const qf=rt(dg,[["render",pg]]),gg=l.defineComponent({name:"FsLabel",props:{label:{type:String,default:""},labelAttrs:{type:Object,default:()=>({})},contentAttrs:{type:Object,default:()=>({})}}}),K3="",xg={class:"fs-label"};function vg(e,t,r,n,a,i){return l.openBlock(),l.createElementBlock("div",xg,[l.createElementVNode("div",l.mergeProps({class:"label"},e.labelAttrs),[l.createTextVNode(l.toDisplayString(e.label)+" ",1),l.renderSlot(e.$slots,"label")],16),l.createElementVNode("div",l.mergeProps({class:"content"},e.contentAttrs),[l.renderSlot(e.$slots,"default")],16)])}const Jf=rt(gg,[["render",vg]]),Zf=l.defineComponent({name:"FsLoading",props:{loading:{},icon:{}},setup(e){const{ui:t}=de.useUi();return()=>e.loading?l.createVNode("div",{class:"fs-loading"},[l.createVNode(l.resolveComponent("fs-icon"),{class:"fs-icon-spin",icon:t.icons.refresh},null)]):null}}),wg=l.defineComponent({name:"FsBox"}),_g={class:"fs-box"};function yg(e,t,r,n,a,i){return l.openBlock(),l.createElementBlock("div",_g,[l.renderSlot(e.$slots,"default")])}const Qf=rt(wg,[["render",yg]]);function kg(e){return typeof e=="function"||Object.prototype.toString.call(e)==="[object Object]"&&!l.isVNode(e)}function e0(e,t){if(e[t]instanceof Array){const r=e[t];e[t]=n=>{for(const a of r)a(n)}}}const Eg=["div","span","a","p","pre","li","ol","ul"],t0=l.defineComponent({name:"FsComponentRender",inheritAttrs:!1,props:{modelValue:{},name:{},slots:{type:Object},children:{type:Object},on:{type:Object},events:{type:Object},scope:{type:Object},vModel:{type:[String,Object]},props:{},render:{},undefineToNull:{type:Boolean,default:!0}},emits:["update:dict","update:modelValue","mounted"],setup(e,t){const{ui:r}=de.useUi(),{merge:n}=Ze();l.provide("get:scope",()=>e.scope),l.onMounted(()=>{t.emit("mounted",e.scope)});const a=l.ref(),i=l.computed(()=>{const p={name:"modelValue",trim:!1,number:!1,transform:void 0};e.vModel&&(typeof e.vModel=="string"?p.name=e.vModel:n(p,e.vModel));const g=e.modelValue??(r.type==="antdv"?void 0:null),m="onUpdate:"+p.name,x={ref:a,[p.name]:g,[m]:y=>{if(y&&(p.trim&&(y=y.trim()),p.number)){const _=Number(y);isNaN(_)||(y=_)}p.transform&&(y=p.transform(y)),y===void 0&&e.undefineToNull&&(y=null),t.emit("update:modelValue",y)},...e.props},v={...e.events,...e.on};return z.forEach(v,(y,_)=>{const b=y;_.startsWith("on")||(_=z.camelCase("on_"+_)),x[_]=D=>b({...e.scope,$event:D})}),x}),s=()=>{const p={},g=(m,x)=>{m instanceof Function?p[x]=v=>m({...e.scope,scope:v}):p[x]=()=>m};return z.forEach(e.children,g),z.forEach(e.slots,g),p},o=l.computed(()=>{const p={isAsyncComponent:!1,component:l.unref(e.name)||r.input.name};let g=p.component;return Eg.includes(g)||(typeof g=="string"&&(g=l.resolveComponent(g)),(g==null?void 0:g.name)==="AsyncComponentWrapper"&&(p.isAsyncComponent=!0)),p.component=g,p}),c=s;function f(){return o.value.isAsyncComponent?d():u()}function u(){return a.value}async function d(){const p=u();return p??new Promise((g,m)=>{h(g,m,0)})}function h(p,g,m){setTimeout(()=>{const x=u();if(x!=null){p(x);return}if(m++,m>20){g(new Error("异步组件加载超时"));return}h(p,g,m)},200)}return t.expose({props:e,getTargetRefSync:u,getTargetRef:f,getTargetRefAsync:d}),()=>{let p;const g=l.mergeProps(i.value,t.attrs);if(e0(g,"onChange"),e0(g,"onBlur"),e.render)return e.render({...e.scope,attrs:g});const m=l.markRaw(o.value.component);return l.createVNode(m,g,kg(p=c())?p:{default:()=>[p]})}}}),r0=l.defineComponent({name:"FsSlotRender",inheritAttrs:!1,props:{slots:{type:Function},scope:{type:Object}},setup(e){return()=>e.slots(e.scope)}}),Zo=l.defineComponent({functional:!0,name:"FsRender",props:{renderFunc:{type:Function},scope:{type:Object}},setup(){},render(){return this.renderFunc(this.scope)}}),bg=l.defineComponent({name:"FsForm",props:{initialForm:{type:Object,default(){return{}}},columns:{type:Object,default:void 0},group:{type:Object,default:void 0},doReset:{type:Function,default:void 0},beforeValidate:{type:Function,default:void 0},beforeSubmit:{type:Function,default:void 0},doSubmit:{type:Function,default:void 0},afterSubmit:{type:Function,default:void 0},slots:{type:Object,default:()=>({})},display:{type:String,default:"flex"},index:{type:Number,default:void 0},mode:{type:String,default:void 0},row:{type:Object,default:void 0},col:{type:Object,default:void 0},formItem:{type:Object,default:void 0},helper:{type:Object},watch:{type:Function,default:null}},emits:["reset","submit","success","validationError","value-change","init"],setup(e,t){var le,B;const{merge:r}=Ze(),{ui:n}=de.useUi(),{AsyncComputeValue:a,doComputed:i}=Gr(),s=l.ref(),o=l.reactive({}),{proxy:c}=l.getCurrentInstance();z.each(e.columns,w=>{w.value!=null&&(w.value instanceof a||w.value instanceof gi)&&Te.warn("form.value配置不支持Compute/AsyncCompute类型的动态计算")});function f(){const w={};return z.each(e.columns,(S,T)=>{const R=l.unref(S.value);R!==void 0&&z.set(w,T,R)}),r(w,z.cloneDeep(e.initialForm)),w}const u=f();x(u);const d=l.computed(()=>({row:u,form:o,index:e.index,mode:e.mode||"add",attrs:t.attrs,getComponentRef:C}));function h(){return d.value}const p=i(()=>e.columns,h);function g(w){w!=null&&z.each(e.columns,(S,T)=>{let R=z.get(w,T);S.valueBuilder&&S.valueBuilder({value:R,key:T,row:u,form:w,index:e.index,mode:e.mode})})}function m(){return o}function x(w,S={}){if(g(w),S.mergeForm===!1)for(const R in o)delete o[R];r(o,w);const{valueChange:T}=S;T&&z.forEach(e.columns,(R,W)=>{const Y=o[W];_(W,Y)})}function v(...w){return r({},e.col,...w)}function y(w){return{key:w.key,...d.value}}function _(w,S){const T={key:w,value:S,formRef:c,...d.value,immediate:!1};t.emit("value-change",T);let R=e.columns[w].valueChange;R&&(R instanceof Function?R(T):R.handle&&R.handle(T))}const b=l.ref({});function D(w){return b.value[w]}function C(w,S=!1){var T;return(T=D(w))==null?void 0:T.getComponentRef(S)}const k=l.ref([]);z.forEach((le=e.group)==null?void 0:le.groups,(w,S)=>{w.collapsed!==!0&&k.value.push(S)}),((B=e.group)==null?void 0:B.groupType)==="tabs"&&(k.value=k.value.length>0?k.value[0]:null);const F=i(()=>e.group,h,null,w=>{if(!w)return{};const S={};z.forEach(w==null?void 0:w.groups,(W,Y)=>{z.forEach(W.columns,q=>{if(p.value[q]==null){hi.logger.warn("无效的分组字段："+q);return}S[q]=Y})});const T=w.groupType;let R={parent:n.collapse.name,child:n.collapseItem.name};return T==="tabs"&&(R.parent=n.tabs.name,R.child=n.tabPane.name),r({wrapper:R,groupedKeys:S},w)}),O=l.computed(()=>{const w=[];return z.forEach(p.value,(S,T)=>{var W,Y;const R=z.cloneDeep(e.formItem||{});S=r(R,S),S.key=T,S.order==null&&(S.order=Mn.orderDefault),(((W=F.value)==null?void 0:W.groupedKeys)==null||((Y=F.value)==null?void 0:Y.groupedKeys[T])==null)&&w.push(S),S.col=v(S.col)}),w.sort((S,T)=>S.order-T.order),w});function X(){return s.value}async function j(){const w=f(),S=z.entries(o);for(const T of S){const R=z.get(w,T[0]);R==null?z.unset(o,T[0]):z.set(o,T[0],R)}e.doReset&&await e.doReset(d.value),t.emit("reset")}const I=l.ref(),G=l.ref({});function re(w){var S,T;if((S=F.value)!=null&&S.groupedKeys)for(let R in w){const W=(T=F.value)==null?void 0:T.groupedKeys[R];W!=null&&(w["group."+W]=!0)}}async function ae(){const w={...d.value,form:o};if(e.beforeValidate&&await e.beforeValidate(w)===!1)return!1;try{G.value={},await n.form.validateWrap(s.value),I.value=!0}catch(R){I.value=!1;const W=n.form.transformValidateErrors(R);throw re(W),G.value=W,t.emit("validationError",d.value),R}const S=z.cloneDeep(l.toRaw(o)),T={...d.value,form:S};if(Te.debug("form submit",JSON.stringify(o)),z.each(e.columns,(R,W)=>{let Y=z.get(S,W);R.valueResolve&&R.valueResolve({value:Y,key:W,...T})}),e.beforeSubmit&&await e.beforeSubmit(T)===!1)return!1;if(z.each(e.columns,(R,W)=>{R.submit===!1?z.unset(S,W):R.submit===!0&&z.set(S,W,S[W])}),e.doSubmit){const R=await e.doSubmit(T);if(T.res=R,R===!1)return!1}return t.emit("submit",T),e.afterSubmit&&await e.afterSubmit(T)===!1?!1:(t.emit("success",T),T)}l.onMounted(()=>{z.forEach(p.value,(w,S)=>{if(w.valueChange==null)return;let T=w.valueChange;if(T&&T.immediate===!0&&T.handle){const R={key:S,value:o[S],formRef:c,...d.value,immediate:!0};T.handle&&T.handle(R)}})});function oe(w){return!!(w&&w.show!==!1)}function fe(w){if(!w.columns||w.show===!1)return!1;for(let S of w.columns){if(p.value[S]==null)continue;if(oe(p.value[S]))return!0}return!1}e.watch&&l.watch(()=>o,(w,S)=>{e.watch&&e.watch(d.value)},{deep:!0,immediate:!0});function ke(){const w=JSON.stringify(u),S=JSON.stringify(o);return w!==S}const H=l.computed(()=>z.merge({},e.slots,t.slots));return t.emit("init",d.value),{get:(w,S)=>z.get(w,S),set:(w,S,T)=>{z.set(w,S,T),_(S,T)},ui:n,validRef:I,errorsRef:G,formRef:s,computedColumns:p,computedDefaultColumns:O,submit:ae,reset:j,getFormRef:X,scope:d,buildItemScope:y,groupActiveKey:k,form:o,formItemRefs:b,getFormData:m,setFormData:x,getComponentRef:C,mergeCol:v,computedGroup:F,getContextFn:h,formItemShow:oe,groupItemShow:fe,isDirty:ke,mergedSlots:H}}}),Y3="";function Sg(e,t,r,n,a,i){const s=l.resolveComponent("fs-form-item"),o=l.resolveComponent("fs-render");return l.openBlock(),l.createBlock(l.resolveDynamicComponent(e.ui.form.name),{ref:"formRef",class:l.normalizeClass(["fs-form",{"fs-form-grid":e.display==="grid","fs-form-flex":e.display==="flex","fs-form-invalid":e.validRef===!1}]),onsubmit:"event.preventDefault();",model:e.form},{default:l.withCtx(()=>[(l.openBlock(),l.createBlock(l.resolveDynamicComponent(e.ui.row.name),l.mergeProps({class:"fs-row"},e.row),{default:l.withCtx(()=>[(l.openBlock(!0),l.createElementBlock(l.Fragment,null,l.renderList(e.computedDefaultColumns,c=>(l.openBlock(),l.createElementBlock(l.Fragment,{key:c==null?void 0:c.key},[e.formItemShow(c)?(l.openBlock(),l.createBlock(l.resolveDynamicComponent(e.ui.col.name),l.mergeProps({key:0,class:"fs-col",ref_for:!0},c.col),{default:l.withCtx(()=>[c.blank!==!0?(l.openBlock(),l.createBlock(s,{key:0,ref_for:!0,ref:f=>{f&&(e.formItemRefs[c.key]=f)},item:c,helper:e.helper,"model-value":e.get(e.form,c.key),"form-slot":e.mergedSlots["form_"+c.key],"get-context-fn":e.getContextFn,"onUpdate:modelValue":f=>e.set(e.form,c.key,f)},null,8,["item","helper","model-value","form-slot","get-context-fn","onUpdate:modelValue"])):l.createCommentVNode("",!0)]),_:2},1040)):l.createCommentVNode("",!0)],64))),128))]),_:1},16)),e.computedGroup.wrapper?(l.openBlock(),l.createBlock(l.resolveDynamicComponent(e.computedGroup.wrapper.parent),l.mergeProps({key:0,[e.ui.collapse.modelValue]:e.groupActiveKey,["onUpdate:"+e.ui.collapse.modelValue]:t[0]||(t[0]=c=>e.groupActiveKey=c),style:{width:"100%"}},e.computedGroup),{default:l.withCtx(()=>[(l.openBlock(!0),l.createElementBlock(l.Fragment,null,l.renderList(e.computedGroup.groups,(c,f)=>(l.openBlock(),l.createElementBlock(l.Fragment,{key:f},[e.groupItemShow(c)?(l.openBlock(),l.createBlock(l.resolveDynamicComponent(e.computedGroup.wrapper.child),l.mergeProps({key:0,[e.ui.collapse.keyName||""]:f,ref_for:!0},c,{class:{"fs-form-group-error":e.errorsRef["group."+f]}}),l.createSlots({default:l.withCtx(()=>[(l.openBlock(),l.createBlock(l.resolveDynamicComponent(e.ui.row.name),l.mergeProps({class:"fs-row",ref_for:!0},e.row),{default:l.withCtx(()=>[(l.openBlock(!0),l.createElementBlock(l.Fragment,null,l.renderList(c.columns,u=>{var d;return l.openBlock(),l.createElementBlock(l.Fragment,{key:u},[e.formItemShow(e.computedColumns[u])?(l.openBlock(),l.createBlock(l.resolveDynamicComponent(e.ui.col.name),l.mergeProps({key:0,class:"fs-col",ref_for:!0},e.mergeCol(c.col,(d=e.computedColumns[u])==null?void 0:d.col)),{default:l.withCtx(()=>{var h;return[e.computedColumns[u]&&((h=e.computedColumns[u])==null?void 0:h.blank)!==!0?(l.openBlock(),l.createBlock(s,{key:0,ref_for:!0,ref:p=>{p&&(e.formItemRefs[u]=p)},item:e.computedColumns[u],"model-value":e.get(e.form,u),"form-slot":e.mergedSlots["form_"+u],"get-context-fn":e.getContextFn,"onUpdate:modelValue":p=>e.set(e.form,u,p)},null,8,["item","model-value","form-slot","get-context-fn","onUpdate:modelValue"])):l.createCommentVNode("",!0)]}),_:2},1040)):l.createCommentVNode("",!0)],64)}),128))]),_:2},1040))]),_:2},[l.renderList(c.slots,(u,d)=>({name:d,fn:l.withCtx(h=>[l.createVNode(o,{"render-func":u,scope:{...h,hasError:e.errorsRef["group."+f]}},null,8,["render-func","scope"])])}))]),1040,["class"])):l.createCommentVNode("",!0)],64))),128))]),_:1},16)):l.createCommentVNode("",!0)]),_:1},8,["class","model"])}const n0=rt(bg,[["render",Sg]]),Tg=l.defineComponent({name:"FsFormItem",components:{FsRender:Zo},props:{modelValue:{},item:{type:Object,default:void 0},formSlot:{type:Function,default:void 0},getContextFn:{type:Function,default:void 0},helper:{type:[String,Object]}},emits:["update:modelValue"],setup(e,t){const{ui:r}=de.useUi(),{merge:n}=Ze(),a=l.ref(),i=()=>{const g=e.getContextFn?e.getContextFn():{};return{value:e.modelValue,key:e.item.key,...g}};function s(g){t.emit("update:modelValue",g)}function o(g=!1){var m,x;return g?(m=a.value)==null?void 0:m.getTargetRefAsync():(x=a.value)==null?void 0:x.getTargetRef()}const c=l.computed(()=>{var g,m,x;return((m=(g=e.item)==null?void 0:g.helper)==null?void 0:m.position)||((x=e.helper)==null?void 0:x.position)}),f=l.computed(()=>{var g,m;return n({},(g=e.item.helper)==null?void 0:g.tooltip,(m=e.helper)==null?void 0:m.tooltip)}),u=l.computed(()=>{if(e.item!=null)return e.item.key.indexOf(".")>=0?e.item.key.split("."):e.item.key}),d=l.computed(()=>e.item.label||e.item.title),h=l.computed(()=>d.value instanceof Function);return{ui:r,updateModelValue:s,scopeFunc:i,getComponentRef:o,componentRenderRef:a,computedHelperPosition:c,computedHelperTooltip:f,computedKey:u,computedLabelIsRender:h,computedLabel:d,computedLabelRender:()=>d.value(i())}}}),q3="",Cg={key:0,class:"fs-form-item-label-text"},Fg=["title"],Ag={class:"fs-form-helper-tooltip"},Dg={class:"fs-form-item-label-icon"},Rg={class:"fs-form-item-content"},Og={class:"fs-form-item-render"},Bg={class:"fs-form-item-component"};function Ng(e,t,r,n,a,i){const s=l.resolveComponent("fs-render"),o=l.resolveComponent("fs-form-helper"),c=l.resolveComponent("fs-icon"),f=l.resolveComponent("fs-slot-render"),u=l.resolveComponent("fs-component-render");return e.item?(l.openBlock(),l.createBlock(l.resolveDynamicComponent(e.ui.formItem.name),l.mergeProps({key:0,class:"fs-form-item",[e.ui.formItem.prop||""]:e.computedKey},e.item,{path:e.item.key,"rule-path":e.item.key}),{label:l.withCtx(()=>[e.computedLabelIsRender?(l.openBlock(),l.createElementBlock("span",Cg,[l.createVNode(s,{"render-func":e.computedLabelRender},null,8,["render-func"])])):(l.openBlock(),l.createElementBlock("span",{key:1,class:"fs-form-item-label-text",title:e.computedLabel},l.toDisplayString(e.computedLabel),9,Fg)),e.item.helper&&e.computedHelperPosition==="label"?(l.openBlock(),l.createBlock(l.resolveDynamicComponent(e.ui.tooltip.name),l.normalizeProps(l.mergeProps({key:2},e.computedHelperTooltip)),{[e.ui.tooltip.content]:l.withCtx(()=>[l.createElementVNode("span",Ag,[l.createVNode(o,{helper:e.item.helper,scope:e.scopeFunc()},null,8,["helper","scope"])])]),[e.ui.tooltip.trigger]:l.withCtx(()=>[l.createElementVNode("span",Dg,[l.createVNode(c,{class:"fs-form-item-label-icon-inner",icon:e.ui.icons.question},null,8,["icon"])])]),_:2},1040)):l.createCommentVNode("",!0)]),default:l.withCtx(()=>{var d;return[l.createElementVNode("div",Rg,[e.item.topRender?(l.openBlock(),l.createBlock(s,{key:0,"render-func":e.item.topRender,scope:e.scopeFunc()},null,8,["render-func","scope"])):l.createCommentVNode("",!0),l.createElementVNode("div",Og,[e.item.prefixRender?(l.openBlock(),l.createBlock(s,{key:0,"render-func":e.item.prefixRender,scope:e.scopeFunc()},null,8,["render-func","scope"])):l.createCommentVNode("",!0),l.createElementVNode("div",Bg,[e.formSlot?(l.openBlock(),l.createBlock(f,{key:0,slots:e.formSlot,scope:e.scopeFunc()},null,8,["slots","scope"])):((d=e.item.component)==null?void 0:d.show)!==!1?(l.openBlock(),l.createElementBlock(l.Fragment,{key:1},[e.item.conditionalRender&&e.item.conditionalRender.match&&e.item.conditionalRender.match(e.scopeFunc())?(l.openBlock(),l.createBlock(s,{key:0,"render-func":e.item.conditionalRender.render,scope:e.scopeFunc()},null,8,["render-func","scope"])):e.item.render?(l.openBlock(),l.createBlock(s,{key:1,"render-func":e.item.render,scope:e.scopeFunc()},null,8,["render-func","scope"])):(l.openBlock(),l.createBlock(u,l.mergeProps({key:2,ref:"componentRenderRef"},e.item.component,{"model-value":e.modelValue,scope:e.scopeFunc(),"onUpdate:modelValue":e.updateModelValue}),null,16,["model-value","scope","onUpdate:modelValue"]))],64)):l.createCommentVNode("",!0)]),e.item.suffixRender?(l.openBlock(),l.createBlock(s,{key:1,"render-func":e.item.suffixRender,scope:e.scopeFunc()},null,8,["render-func","scope"])):l.createCommentVNode("",!0)]),e.item.bottomRender?(l.openBlock(),l.createBlock(s,{key:1,"render-func":e.item.bottomRender,scope:e.scopeFunc()},null,8,["render-func","scope"])):l.createCommentVNode("",!0),e.item.helper&&e.computedHelperPosition!=="label"?(l.openBlock(),l.createBlock(o,{key:2,helper:e.item.helper,scope:e.scopeFunc()},null,8,["helper","scope"])):l.createCommentVNode("",!0)])]}),_:1},16,["path","rule-path"])):l.createCommentVNode("",!0)}const a0=rt(Tg,[["render",Ng]]),Ig=l.defineComponent({name:"FsFormHelper",props:{helper:{type:[Object,String]},scope:{}},setup(e){}}),J3="",Pg={class:"fs-form-helper"},Lg={key:0},Mg={key:2};function Vg(e,t,r,n,a,i){const s=l.resolveComponent("fs-render");return l.openBlock(),l.createElementBlock("div",Pg,[typeof e.helper=="string"?(l.openBlock(),l.createElementBlock("pre",Lg,l.toDisplayString(e.helper),1)):e.helper.render?(l.openBlock(),l.createBlock(s,{key:1,"render-func":e.helper.render,scope:e.scope},null,8,["render-func","scope"])):e.helper.text?(l.openBlock(),l.createElementBlock("pre",Mg,l.toDisplayString(e.helper.text),1)):l.createCommentVNode("",!0)])}const i0=rt(Ig,[["render",Vg]]),Z3="";function Ug(e){return typeof e=="function"||Object.prototype.toString.call(e)==="[object Object]"&&!l.isVNode(e)}const La=l.defineComponent({name:"FsFormWrapper",props:{options:{},slots:{},inner:{},innerWrapper:{},id:{},zIndex:{}},emits:["reset","submit","validationError","value-change","open","opened","mounted","closed","inner-change"],setup(e,t){const{t:r}=Yt(),{merge:n}=Ze(),a=l.ref(!1),i=l.ref(),s=l.ref(),o=l.ref(),c=l.ref(),f=l.ref(),u=l.ref(!1),d=l.ref(),h=l.ref(),p=l.ref(),g=l.ref(),m=e.id||Math.floor(Math.random()*1e6)+"",x="fs-form-wrapper_"+m,v=l.ref({});function y(){var W;return{wrapper:o.value,options:s.value,formRef:f.value,form:re(),wrapperBindRef:o,formOptionsRef:s,setFormData:ae,getFormData:re,reset:G,loading:u,close:k,doClose:F,toggleFullscreen:w,submit:I,mode:(W=s.value)==null?void 0:W.mode}}const _=async W=>{var ee;const{wrapper:Y}=W;Y.onOpen&&Y.onOpen(W),g.value=l.unref(Y.title),i.value=W.wrapper.is,c.value=Y;const q=S.formWrapper.customClass(i.value),K=`fs-form-wrapper ${x} ${Y[q]||""} `;return o.value={...z.omit(Y,"title","onOpen","onClosed","onOpened","is","inner","beforeClose"),[q]:K},s.value={...z.omit(W,"wrapper","slots"),slots:{...e.slots,...W.slots,...t.slots}},v.value={...e.slots,...(ee=W.wrapper)==null?void 0:ee.slots,...t.slots},d.value=()=>{Y.onClosed&&Y.onClosed(y())},h.value=()=>{Y.onOpened&&Y.onOpened(y())},p.value=Y.beforeClose,Y.fullscreen!=null&&(le.value=Y.fullscreen),t.emit("inner-change",!!c.value.inner),await l.nextTick(),a.value=!0,await l.nextTick(),X(),y()};async function b(){var q;const W=c.value.saveRemind;if(((q=f.value)==null?void 0:q.isDirty())&&W){let K=!1;if(W instanceof Function)K=await W();else try{await S.messageBox.confirm({title:r("fs.form.saveRemind.title"),message:r("fs.form.saveRemind.content"),confirmButtonText:r("fs.form.saveRemind.ok"),cancelButtonText:r("fs.form.saveRemind.cancel")}),K=!0}catch{K=!1}K&&await I()}}async function D(){return p.value&&p.value(y())==!1?!1:(await b(),!0)}const C=l.computed(()=>S.type=="element"?{beforeClose:W=>{D().then(Y=>{Y&&W()})}}:{}),k=async()=>{a.value=!1},F=async()=>await D()==!1?!1:(k(),!0),O=()=>{d.value&&d.value(),t.emit("closed"),s.value=null},X=()=>{if(h.value&&h.value(),o.value.draggable){const{dragModal:W}=Wf();W({getModal:()=>document.querySelector(`.${x}`)})}},j=W=>{t.emit("value-change",W)};async function I(){u.value=!0;try{if(await f.value.submit()===!1)return;k()}finally{u.value=!1}}async function G(){await f.value.reset()}function re(){var W;return(W=f.value)==null?void 0:W.getFormData()}function ae(W,Y){var q;(q=f.value)==null||q.setFormData(W,Y)}const{doComputed:oe}=Gr();function fe(){var W,Y,q;return{row:(W=s.value)==null?void 0:W.initialForm,form:re(),index:(Y=s.value)==null?void 0:Y.index,mode:(q=s.value)==null?void 0:q.mode,attrs:s.value,getComponentRef(...K){var ee;(ee=f.value)==null||ee.getComponentRef(...K)}}}const ke=oe(()=>{var W;return(W=o.value)==null?void 0:W.buttons},fe),H=l.computed(()=>{const W={cancel:{},reset:{},ok:{loading:u.value}},Y=n(W,ke.value),q=[];return z.forEach(Y,(K,ee)=>{K.key=ee,q.push(K),K.onClick==null&&K.click!=null&&(K.onClick=()=>{K.click(y())})}),z.sortBy(q,K=>K.order??Mn.orderDefault)});l.onMounted(async()=>{e.options!=null&&await _(e.options),t.emit("mounted",l.getCurrentInstance().exposed)});const le=l.ref(!1),B=l.computed(()=>{var W;return!((W=i.value)!=null&&W.endsWith("drawer"))});function w(){le.value=!le.value}const S=de.uiContext.get(),T=l.computed(()=>c.value.inner?S.formWrapper.buildInnerBind({getInnerWrapper(){if(c.value.innerContainerSelector){const W=document.querySelector(c.value.innerContainerSelector);if(W)return W.classList.add("fs-form-inner-wrapper"),W;console.error(`找不到选择器为${c.value.innerContainerSelector}的元素`)}return e.innerWrapper}}):{});t.expose({formWrapperId:m,formWrapperIdClass:x,close:k,doClose:F,onClosed:O,onOpened:X,open:_,title:g,fullscreenEnabled:B,fullscreen:le,toggleFullscreen:w,formOptions:s,formWrapperIs:i,formWrapperOpen:a,formWrapperBind:o,formRef:f,submit:I,reset:G,computedButtons:H,loading:u,getFormData:re,setFormData:ae,onValueChange:j,innerBind:T,formWrapperSlots:v});const R=l.useSlots();return()=>{if(!o.value)return null;const W=de.uiContext.get();let Y={};const q={...R,...v.value},K=(Rt,Br,ut=q)=>ut[Rt]?ut[Rt](Br):null,ee=i.value||"el-dialog";if(s.value){const{index:Rt,mode:Br}=s.value||{},ut={_self:this,index:Rt,mode:Br,getFormData:re};Y={[W.formWrapper.titleSlotName]:()=>{let Lt=null;return B.value&&(Lt=l.createVNode(l.resolveComponent("fs-icon"),{class:"fs-fullscreen-icon",onClick:w,icon:le.value?W.icons.fullScreen:W.icons.unFullScreen},null)),l.createVNode("div",{class:"fs-form-header"},[l.createVNode("div",{class:"fs-form-header-left"},[K("form-header-left",ut),g.value,K("form-header-right",ut)]),l.createVNode("div",{class:"fs-form-header-action"},[K("form-header-action-left",ut),Lt,K("form-header-action-right",ut)])])},default:()=>{const Lt=[];return z.forEach(H.value,jr=>{jr.show!==!1&&Lt.push(l.createVNode(l.resolveComponent("fs-button"),jr,null))}),l.createVNode("div",{class:"fs-form-wrapper-body"},[l.createVNode("div",{class:"fs-form-body"},[K("form-body-top",ut),l.createVNode("div",{class:"fs-form-content"},[K("form-body-left",ut),l.createVNode(l.resolveComponent("fs-form"),l.mergeProps({ref:f},s.value,{onValueChange:j}),null),K("form-body-right",ut)]),K("form-body-bottom",ut)]),l.createVNode("div",{class:"fs-form-footer-btns"},[K("form-footer-left",ut),Lt,K("form-footer-right",ut)])])}}}if(W.formWrapper.hasContentWrap){const Rt=W.formWrapper.hasContentWrap(ee),Br=Y;if(Rt){const ut=l.resolveDynamicComponent(Rt);Y={default:()=>l.createVNode(ut,null,Ug(Br)?Br:{default:()=>[Br]})}}}const ye=W.formWrapper.visible,M={[ye]:a.value,["onUpdate:"+ye]:async Rt=>{if(Rt===!1&&a.value)return await F();a.value=Rt}},Ke=W.formWrapper.buildOnClosedBind(ee,O),Le=W.formWrapper.customClass(ee),$e=`${le.value?"fs-fullscreen":""} ${o.value[Le]||""}`,ve={[Le]:$e},mt={fullscreen:le.value},vr={zIndex:o.value.zIndex||e.zIndex},Hr=l.resolveDynamicComponent(ee);return l.createVNode(Hr,l.mergeProps(o.value,ve,M,Ke,mt,T.value,vr,C.value),Y)}}}),$g=l.defineComponent({name:"FsFormProvider"}),s0=l.defineComponent({...$g,setup(e){const t=l.ref({});return l.provide("use:form:wrapper",()=>({open(r){const n=r.id||Math.floor(Math.random()*1e6)+"";return new Promise((a,i)=>{t.value[n]={id:n,async onMounted(s){await s.open(r),a(s)},onClosed(){r.id||delete t.value[n]}}})}})),(r,n)=>(l.openBlock(),l.createElementBlock(l.Fragment,null,[l.renderSlot(r.$slots,"default"),(l.openBlock(!0),l.createElementBlock(l.Fragment,null,l.renderList(t.value,a=>(l.openBlock(),l.createBlock(l.unref(La),l.mergeProps({key:a.id,ref_for:!0},a),null,16))),128))],64))}});function Wg(e,t){l.provide("get:columns",()=>e.table.columns),l.provide("update:columns",r=>{t.emit("update:columns",r)}),l.provide("get:crudBinding",()=>e)}function Hg(e,t){const r=l.ref(),n=()=>r.value,a=()=>r.value?r.value.getForm():(Te.warn("请使用expose.getSearchFormData代替"),{}),i=()=>r.value?r.value.getValidatedForm():(Te.warn("请使用expose.getSearchValidatedFormData代替"),{});function s({form:o,mergeForm:c=!1}){r.value&&r.value.setForm(o,c)}return{searchRef:r,getSearchRef:n,getSearchFormData:a,setSearchFormData:s,getSearchValidatedFormData:i}}function jg(e,t,r){return{tabsBinding:l.computed(()=>{var a,i,s,o,c,f,u;if(t.tabs&&t.tabs.show&&t.tabs.name){let d=null;const h={...t.tabs};return(a=t.search)!=null&&a.columns&&((o=(s=(i=t.search)==null?void 0:i.columns[t.tabs.name])==null?void 0:s.component)!=null&&o.dict)&&(d=(u=(f=(c=t.search)==null?void 0:c.columns[t.tabs.name])==null?void 0:f.component)==null?void 0:u.dict,h.value==null&&(h.value=d.value),h.label==null&&(h.label=d.label),h.options==null&&(h.options=d.data||[])),{...h,modelValue:t.search.validatedForm&&t.search.validatedForm[t.tabs.name],"onUpdate:modelValue":p=>{r.emit("tab-change",{[t.tabs.name]:p})}}}return{show:!1}})}}function Bs(e,t){if(!e)return{};const r={};return z.forEach(e,(n,a)=>{a.startsWith(t)&&(r[a]=n)}),r}function zg(e,t,{tableRef:r,containerRef:n}){const a=de.uiContext.get();if(a.table.hasMaxHeight(e.table))return{};if(!a.table.fixedHeaderNeedComputeBodyHeight)return{};const i=l.ref(null);function s(){var h;const c=(h=r==null?void 0:r.value)==null?void 0:h.$el;if(c==null||c.querySelector==null)return;const f=c.querySelector(a.table.headerDomSelector);if(f==null)return;const u=c.getBoundingClientRect().height,d=f.getBoundingClientRect().height;i.value=u-d-2+(e.table.maxHeightAdjust||0),Te.debug("table max height recomputed ",i.value)}function o(){const c=r.value.$el;if(c==null)return;const f=c.parentNode;new ResizeObserver(function(d){Te.debug("table resized",d),d.length>0&&d[0].contentRect.height>0&&(s(),setTimeout(()=>{s()},200),setTimeout(()=>{s()},500))}).observe(f)}return l.onMounted(async()=>{await l.nextTick(),await l.nextTick(),o()}),{maxHeightRef:i,computeBodyHeight:s}}function Gg(e,t){const r=de.uiContext.get(),n=l.ref(),a=l.ref(),i=l.ref(),{maxHeightRef:s,computeBodyHeight:o}=zg(e,t,{tableRef:n,containerRef:i}),{merge:c}=Ze(),f=l.toRef(e,"table"),u=l.computed(()=>{let D={};(s==null?void 0:s.value)!=null&&(D=r.table.buildMaxHeight(s.value));const C=hi.dash.omit(f,"loading","columns","columnsMap");return c(D,{...t.attrs,...C})}),d=l.toRef(e,"toolbar"),h=l.computed(()=>Bs(t.slots,"cell")),p=l.computed(()=>Bs(t.slots,"form")),g=l.computed(()=>Bs(t.slots,"search")),m=l.computed(()=>Bs(t.slots,"toolbar")),x=l.ref(),v=l.computed(()=>{const D={compact:e.toolbar.compact!==!1};return e.customClass&&(D[e.customClass]=!0),D}),y=l.ref(),_=l.ref(!1);return{tableRef:n,containerRef:i,toolbarRef:a,computedTable:u,computedToolbar:d,computedCellSlots:h,formWrapperRef:x,isFormInner:_,onFormInnerChange:D=>{_.value=D},computedFormSlots:p,computedSearchSlots:g,computedToolbarSlots:m,computeBodyHeight:o,computedClass:v,innerWrapperRef:y}}const Xg=l.defineComponent({name:"FsCrud",inheritAttrs:!1,props:{table:{type:Object,default(){return{}}},data:{type:Array},rowHandle:{type:Object,default(){return{}}},search:{type:Object,default(){return{}}},toolbar:{type:Object,default(){return{}}},actionbar:{type:Object,default(){return{}}},tabs:{type:Object,default(){return{}}},addForm:{type:Object,default(){return{}}},editForm:{type:Object,default(){return{}}},viewForm:{type:Object,default(){return{}}},pagination:{type:Object,default(){return{show:!1}}},container:{type:Object,default(){return{}}},customClass:{},form:{type:Object,default(){return{}}},selection:{type:Object,default(){return{show:!1}}}},emits:["update:search","update:compact","update:columns","form-value-change","update:modelValue","tab-change"],setup(e,t){const{ui:r}=de.useUi();Wg(e,t);const n=Hg(),a=jg(n,e,t),i=Gg(e,t);return{ui:r,...n,...i,...a}}}),Q3="",Kg={class:"fs-crud-search"},Yg={key:0,class:"fs-crud-actionbar"},qg={key:0,class:"fs-crud-toolbar"},Jg={class:"fs-crud-pagination"},Zg={class:"fs-pagination-left"},Qg={class:"fs-pagination"},ex={class:"fs-pagination-right"};function tx(e,t,r,n,a,i){var d;const s=l.resolveComponent("fs-actionbar"),o=l.resolveComponent("fs-toolbar"),c=l.resolveComponent("fs-tabs-filter"),f=l.resolveComponent("fs-table"),u=l.resolveComponent("fs-form-wrapper");return l.openBlock(),l.createBlock(l.resolveDynamicComponent(((d=e.container)==null?void 0:d.is)||"fs-layout-default"),l.mergeProps({ref:"containerRef",class:"fs-crud-container"},e.container,{class:e.computedClass}),{"header-top":l.withCtx(()=>[l.renderSlot(e.$slots,"header-top")]),"header-bottom":l.withCtx(()=>[l.renderSlot(e.$slots,"header-bottom")]),"header-middle":l.withCtx(()=>[l.renderSlot(e.$slots,"header-middle")]),search:l.withCtx(()=>[l.createElementVNode("div",Kg,[(l.openBlock(),l.createBlock(l.resolveDynamicComponent(e.search.is||"fs-search"),l.mergeProps({ref:"searchRef"},e.search,{slots:e.computedSearchSlots}),null,16,["slots"]))])]),actionbar:l.withCtx(()=>[e.actionbar&&e.actionbar.show!==!1?(l.openBlock(),l.createElementBlock("div",Yg,[l.renderSlot(e.$slots,"actionbar-left"),l.createVNode(s,l.normalizeProps(l.guardReactiveProps(e.actionbar)),null,16),l.renderSlot(e.$slots,"actionbar-right")])):l.createCommentVNode("",!0)]),toolbar:l.withCtx(()=>[e.toolbar&&e.toolbar.show!==!1?(l.openBlock(),l.createElementBlock("div",qg,[l.renderSlot(e.$slots,"toolbar-left"),l.createVNode(o,l.mergeProps({ref:"toolbarRef"},e.toolbar,{slots:e.computedToolbarSlots,columns:e.table.columns}),null,16,["slots","columns"]),l.renderSlot(e.$slots,"toolbar-right")])):l.createCommentVNode("",!0)]),tabs:l.withCtx(()=>[e.tabsBinding.show?(l.openBlock(),l.createBlock(c,l.mergeProps({key:0,ref:"tabsRef",class:"fs-tabs"},e.tabsBinding),null,16)):l.createCommentVNode("",!0)]),table:l.withCtx(()=>[l.createVNode(f,l.mergeProps({ref:"tableRef",class:"fs-crud-table"},e.computedTable,{columns:e.table.columns,loading:e.table.loading,"row-handle":e.rowHandle,data:e.data,"cell-slots":e.computedCellSlots}),null,16,["columns","loading","row-handle","data","cell-slots"])]),form:l.withCtx(()=>[l.createElementVNode("div",{ref:"innerWrapperRef",class:l.normalizeClass(["fs-form-wrapper-container",{"fs-form-inner-wrapper":e.isFormInner}])},[l.createVNode(u,{ref:"formWrapperRef",slots:e.computedFormSlots,"inner-wrapper":e.innerWrapperRef,onInnerChange:e.onFormInnerChange,onValueChange:t[0]||(t[0]=h=>e.$emit("form-value-change",h))},null,8,["slots","inner-wrapper","onInnerChange"])],2)]),pagination:l.withCtx(()=>[l.createElementVNode("div",Jg,[l.createElementVNode("div",Zg,[l.renderSlot(e.$slots,"pagination-left")]),l.createElementVNode("div",Qg,[e.pagination.show!==!1?(l.openBlock(),l.createBlock(l.resolveDynamicComponent(e.ui.pagination.name),l.normalizeProps(l.mergeProps({key:0},e.pagination)),null,16)):l.createCommentVNode("",!0)]),l.createElementVNode("div",ex,[l.renderSlot(e.$slots,"pagination-right")])])]),"footer-top":l.withCtx(()=>[l.renderSlot(e.$slots,"footer-top")]),"footer-bottom":l.withCtx(()=>[l.renderSlot(e.$slots,"footer-bottom")]),default:l.withCtx(()=>[l.renderSlot(e.$slots,"default")]),_:3},16,["class"])}const o0=rt(Xg,[["render",tx]]),rx=l.defineComponent({name:"FsRowHandle",props:{dropdown:{type:Object},buttons:{type:Object},group:{type:Object},active:{type:String,default:"default"},scope:{type:Object,default:()=>({})}},emits:["handle"],setup(e,t){const{ui:r}=de.useUi(),{merge:n}=Ze(),{t:a}=Yt(),i=m=>{const x=e.scope[r.tableColumn.index],v=e.scope[r.tableColumn.row],y={key:m.key,row:v,btn:m,index:x,...e.scope};if(m.click)return m.click(y);t.emit("handle",y)},{doComputed:s}=Gr(),o=l.computed(()=>({dropdown:e.dropdown,buttons:e.buttons,active:e.active,group:e.group})),c=s(()=>o.value,()=>{const m=e.scope[r.tableColumn.index],x=e.scope[r.tableColumn.row];return{...e.scope,index:m,row:x}}),f=l.computed(()=>{let m=null;if(c.value.active==null||c.value.active==="default"){const v={view:{key:"view",text:a("fs.rowHandle.view.text"),title:a("fs.rowHandle.view.text")},copy:{key:"copy",text:a("fs.rowHandle.copy.text"),title:a("fs.rowHandle.copy.text")},edit:{key:"edit",type:"primary",text:a("fs.rowHandle.edit.text"),title:a("fs.rowHandle.edit.text")},remove:{key:"remove",...r.button.colors("danger"),text:a("fs.rowHandle.remove.text"),title:a("fs.rowHandle.remove.text")}};m=n(v,c.value.buttons)}else m=c.value.group[c.value.active];const x=[];return z.forEach(m,(v,y)=>{v.key=y,v.show!==!1&&x.push(v)}),z.sortBy(x,v=>v.order??Mn.orderDefault)}),u=l.computed(()=>c.value.dropdown==null||c.value.dropdown.atLeast==null||c.value.dropdown.atLeast<=0||f.value.length<=c.value.dropdown.atLeast?0:c.value.dropdown.atLeast||0);function d(m,x){return m.dropdown===!0||u.value>0&&u.value<x}const h=l.computed(()=>{let m=0;for(const x of f.value){if(d(x,m))return!0;m++}return!1});function p(m){for(let x of f.value)if(m===x.key){i(x);return}}const g=l.computed(()=>{const m={};if(r.dropdown.renderMode!=="slot"){const x=f.value,v=[];z.forEach(x,(y,_)=>{y.show!==!1&&d(y,_)&&v.push({[r.dropdown.value]:y.key,[r.dropdown.label]:y.text,title:y.title})}),m.options=v}return{...z.omit(e.dropdown,"more","atLeast"),...r.dropdown.command(p),...m}});return{ui:r,hasDropdownBtn:h,computedHandleBtns:f,doDropdownItemClick:p,computedDropdownAtLeast:u,doClick:i,isDropdownBtn:d,computedDropdownBinding:g}}}),eD="",nx={class:"fs-row-handle"},ax={key:0,class:"row-handle-btn fs-handle-row-dropdown"};function ix(e,t,r,n,a,i){const s=l.resolveComponent("fs-button"),o=l.resolveComponent("fs-icon");return l.openBlock(),l.createElementBlock("div",nx,[l.renderSlot(e.$slots,"cell-rowHandle-left",l.normalizeProps(l.guardReactiveProps(e.scope))),(l.openBlock(!0),l.createElementBlock(l.Fragment,null,l.renderList(e.computedHandleBtns,(c,f)=>(l.openBlock(),l.createElementBlock(l.Fragment,{key:f},[c.show!==!1&&!e.isDropdownBtn(c,f)?(l.openBlock(),l.createBlock(s,l.mergeProps({key:0,class:"row-handle-btn",ref_for:!0},c,{onClick:l.withModifiers(u=>e.doClick(c),["stop"])}),null,16,["onClick"])):l.createCommentVNode("",!0)],64))),128)),l.renderSlot(e.$slots,"cell-rowHandle-middle",l.normalizeProps(l.guardReactiveProps(e.scope))),e.hasDropdownBtn?(l.openBlock(),l.createElementBlock("span",ax,[(l.openBlock(),l.createBlock(l.resolveDynamicComponent(e.ui.dropdown.name),l.normalizeProps(l.guardReactiveProps(e.computedDropdownBinding)),{[e.ui.dropdown.slotName]:l.withCtx(()=>[e.ui.dropdown.renderMode==="slot"?(l.openBlock(),l.createBlock(l.resolveDynamicComponent(e.ui.dropdownMenu.name),l.normalizeProps(l.mergeProps({key:0},e.ui.dropdownMenu.command(e.doDropdownItemClick))),{default:l.withCtx(()=>[(l.openBlock(!0),l.createElementBlock(l.Fragment,null,l.renderList(e.computedHandleBtns,(c,f)=>(l.openBlock(),l.createElementBlock(l.Fragment,{key:f},[c.show!==!1&&e.isDropdownBtn(c,f)?(l.openBlock(),l.createBlock(l.resolveDynamicComponent(e.ui.dropdownItem.name),l.mergeProps({key:0,[e.ui.dropdownItem.command||""]:c.key,ref_for:!0},c.dropdownItem,{disabled:c.disabled}),{default:l.withCtx(()=>[l.createElementVNode("div",l.mergeProps({class:"fs-row-handle-dropdown-item",ref_for:!0},c),[c.icon?(l.openBlock(),l.createBlock(o,{key:0,icon:c.icon},null,8,["icon"])):l.createCommentVNode("",!0),l.createTextVNode(" "+l.toDisplayString(c.text||c.title),1)],16)]),_:2},1040,["disabled"])):l.createCommentVNode("",!0)],64))),128))]),_:1},16)):l.createCommentVNode("",!0)]),default:l.withCtx(()=>[l.createVNode(s,l.normalizeProps(l.guardReactiveProps(e.dropdown.more)),null,16)]),_:2},1040))])):l.createCommentVNode("",!0),l.renderSlot(e.$slots,"cell-rowHandle-right",l.normalizeProps(l.guardReactiveProps(e.scope)))])}const l0=rt(rx,[["render",ix]]);function oa(){return oa=Object.assign?Object.assign.bind():function(e){for(var t=1;t<arguments.length;t++){var r=arguments[t];for(var n in r)Object.prototype.hasOwnProperty.call(r,n)&&(e[n]=r[n])}return e},oa.apply(this,arguments)}function sx(e,t){e.prototype=Object.create(t.prototype),e.prototype.constructor=e,yi(e,t)}function Qo(e){return Qo=Object.setPrototypeOf?Object.getPrototypeOf.bind():function(r){return r.__proto__||Object.getPrototypeOf(r)},Qo(e)}function yi(e,t){return yi=Object.setPrototypeOf?Object.setPrototypeOf.bind():function(n,a){return n.__proto__=a,n},yi(e,t)}function ox(){if(typeof Reflect>"u"||!Reflect.construct||Reflect.construct.sham)return!1;if(typeof Proxy=="function")return!0;try{return Boolean.prototype.valueOf.call(Reflect.construct(Boolean,[],function(){})),!0}catch{return!1}}function Ns(e,t,r){return ox()?Ns=Reflect.construct.bind():Ns=function(a,i,s){var o=[null];o.push.apply(o,i);var c=Function.bind.apply(a,o),f=new c;return s&&yi(f,s.prototype),f},Ns.apply(null,arguments)}function lx(e){return Function.toString.call(e).indexOf("[native code]")!==-1}function el(e){var t=typeof Map=="function"?new Map:void 0;return el=function(n){if(n===null||!lx(n))return n;if(typeof n!="function")throw new TypeError("Super expression must either be null or a function");if(typeof t<"u"){if(t.has(n))return t.get(n);t.set(n,a)}function a(){return Ns(n,arguments,Qo(this).constructor)}return a.prototype=Object.create(n.prototype,{constructor:{value:a,enumerable:!1,writable:!0,configurable:!0}}),yi(a,n)},el(e)}var cx=/%[sdj%]/g,c0=function(){};typeof process<"u"&&process.env&&process.env.NODE_ENV!=="production"&&typeof window<"u"&&typeof document<"u"&&(c0=function(t,r){typeof console<"u"&&console.warn&&typeof ASYNC_VALIDATOR_NO_WARNING>"u"&&r.every(function(n){return typeof n=="string"})&&console.warn(t,r)});function tl(e){if(!e||!e.length)return null;var t={};return e.forEach(function(r){var n=r.field;t[n]=t[n]||[],t[n].push(r)}),t}function wr(e){for(var t=arguments.length,r=new Array(t>1?t-1:0),n=1;n<t;n++)r[n-1]=arguments[n];var a=0,i=r.length;if(typeof e=="function")return e.apply(null,r);if(typeof e=="string"){var s=e.replace(cx,function(o){if(o==="%%")return"%";if(a>=i)return o;switch(o){case"%s":return String(r[a++]);case"%d":return Number(r[a++]);case"%j":try{return JSON.stringify(r[a++])}catch{return"[Circular]"}break;default:return o}});return s}return e}function fx(e){return e==="string"||e==="url"||e==="hex"||e==="email"||e==="date"||e==="pattern"}function Ot(e,t){return!!(e==null||t==="array"&&Array.isArray(e)&&!e.length||fx(t)&&typeof e=="string"&&!e)}function ux(e,t,r){var n=[],a=0,i=e.length;function s(o){n.push.apply(n,o||[]),a++,a===i&&r(n)}e.forEach(function(o){t(o,s)})}function f0(e,t,r){var n=0,a=e.length;function i(s){if(s&&s.length){r(s);return}var o=n;n=n+1,o<a?t(e[o],i):r([])}i([])}function dx(e){var t=[];return Object.keys(e).forEach(function(r){t.push.apply(t,e[r]||[])}),t}var u0=function(e){sx(t,e);function t(r,n){var a;return a=e.call(this,"Async Validation Error")||this,a.errors=r,a.fields=n,a}return t}(el(Error));function hx(e,t,r,n,a){if(t.first){var i=new Promise(function(h,p){var g=function(v){return n(v),v.length?p(new u0(v,tl(v))):h(a)},m=dx(e);f0(m,r,g)});return i.catch(function(h){return h}),i}var s=t.firstFields===!0?Object.keys(e):t.firstFields||[],o=Object.keys(e),c=o.length,f=0,u=[],d=new Promise(function(h,p){var g=function(x){if(u.push.apply(u,x),f++,f===c)return n(u),u.length?p(new u0(u,tl(u))):h(a)};o.length||(n(u),h(a)),o.forEach(function(m){var x=e[m];s.indexOf(m)!==-1?f0(x,r,g):ux(x,r,g)})});return d.catch(function(h){return h}),d}function mx(e){return!!(e&&e.message!==void 0)}function px(e,t){for(var r=e,n=0;n<t.length;n++){if(r==null)return r;r=r[t[n]]}return r}function d0(e,t){return function(r){var n;return e.fullFields?n=px(t,e.fullFields):n=t[r.field||e.fullField],mx(r)?(r.field=r.field||e.fullField,r.fieldValue=n,r):{message:typeof r=="function"?r():r,fieldValue:n,field:r.field||e.fullField}}}function h0(e,t){if(t){for(var r in t)if(t.hasOwnProperty(r)){var n=t[r];typeof n=="object"&&typeof e[r]=="object"?e[r]=oa({},e[r],n):e[r]=n}}return e}var m0=function(t,r,n,a,i,s){t.required&&(!n.hasOwnProperty(t.field)||Ot(r,s||t.type))&&a.push(wr(i.messages.required,t.fullField))},gx=function(t,r,n,a,i){(/^\s+$/.test(r)||r==="")&&a.push(wr(i.messages.whitespace,t.fullField))},Is,xx=function(){if(Is)return Is;var e="[a-fA-F\\d:]",t=function(b){return b&&b.includeBoundaries?"(?:(?<=\\s|^)(?="+e+")|(?<="+e+")(?=\\s|$))":""},r="(?:25[0-5]|2[0-4]\\d|1\\d\\d|[1-9]\\d|\\d)(?:\\.(?:25[0-5]|2[0-4]\\d|1\\d\\d|[1-9]\\d|\\d)){3}",n="[a-fA-F\\d]{1,4}",a=(`
(?:
(?:`+n+":){7}(?:"+n+`|:)|                                    // 1:2:3:4:5:6:7::  1:2:3:4:5:6:7:8
(?:`+n+":){6}(?:"+r+"|:"+n+`|:)|                             // 1:2:3:4:5:6::    1:2:3:4:5:6::8   1:2:3:4:5:6::8  1:2:3:4:5:6::1.2.3.4
(?:`+n+":){5}(?::"+r+"|(?::"+n+`){1,2}|:)|                   // 1:2:3:4:5::      1:2:3:4:5::7:8   1:2:3:4:5::8    1:2:3:4:5::7:1.2.3.4
(?:`+n+":){4}(?:(?::"+n+"){0,1}:"+r+"|(?::"+n+`){1,3}|:)| // 1:2:3:4::        1:2:3:4::6:7:8   1:2:3:4::8      1:2:3:4::6:7:1.2.3.4
(?:`+n+":){3}(?:(?::"+n+"){0,2}:"+r+"|(?::"+n+`){1,4}|:)| // 1:2:3::          1:2:3::5:6:7:8   1:2:3::8        1:2:3::5:6:7:1.2.3.4
(?:`+n+":){2}(?:(?::"+n+"){0,3}:"+r+"|(?::"+n+`){1,5}|:)| // 1:2::            1:2::4:5:6:7:8   1:2::8          1:2::4:5:6:7:1.2.3.4
(?:`+n+":){1}(?:(?::"+n+"){0,4}:"+r+"|(?::"+n+`){1,6}|:)| // 1::              1::3:4:5:6:7:8   1::8            1::3:4:5:6:7:1.2.3.4
(?::(?:(?::`+n+"){0,5}:"+r+"|(?::"+n+`){1,7}|:))             // ::2:3:4:5:6:7:8  ::2:3:4:5:6:7:8  ::8             ::1.2.3.4
)(?:%[0-9a-zA-Z]{1,})?                                             // %eth0            %1
`).replace(/\s*\/\/.*$/gm,"").replace(/\n/g,"").trim(),i=new RegExp("(?:^"+r+"$)|(?:^"+a+"$)"),s=new RegExp("^"+r+"$"),o=new RegExp("^"+a+"$"),c=function(b){return b&&b.exact?i:new RegExp("(?:"+t(b)+r+t(b)+")|(?:"+t(b)+a+t(b)+")","g")};c.v4=function(_){return _&&_.exact?s:new RegExp(""+t(_)+r+t(_),"g")},c.v6=function(_){return _&&_.exact?o:new RegExp(""+t(_)+a+t(_),"g")};var f="(?:(?:[a-z]+:)?//)",u="(?:\\S+(?::\\S*)?@)?",d=c.v4().source,h=c.v6().source,p="(?:(?:[a-z\\u00a1-\\uffff0-9][-_]*)*[a-z\\u00a1-\\uffff0-9]+)",g="(?:\\.(?:[a-z\\u00a1-\\uffff0-9]-*)*[a-z\\u00a1-\\uffff0-9]+)*",m="(?:\\.(?:[a-z\\u00a1-\\uffff]{2,}))",x="(?::\\d{2,5})?",v='(?:[/?#][^\\s"]*)?',y="(?:"+f+"|www\\.)"+u+"(?:localhost|"+d+"|"+h+"|"+p+g+m+")"+x+v;return Is=new RegExp("(?:^"+y+"$)","i"),Is},p0={email:/^(([^<>()\[\]\\.,;:\s@"]+(\.[^<>()\[\]\\.,;:\s@"]+)*)|(".+"))@((\[[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}])|(([a-zA-Z\-0-9\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF]+\.)+[a-zA-Z\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF]{2,}))$/,hex:/^#?([a-f0-9]{6}|[a-f0-9]{3})$/i},ki={integer:function(t){return ki.number(t)&&parseInt(t,10)===t},float:function(t){return ki.number(t)&&!ki.integer(t)},array:function(t){return Array.isArray(t)},regexp:function(t){if(t instanceof RegExp)return!0;try{return!!new RegExp(t)}catch{return!1}},date:function(t){return typeof t.getTime=="function"&&typeof t.getMonth=="function"&&typeof t.getYear=="function"&&!isNaN(t.getTime())},number:function(t){return isNaN(t)?!1:typeof t=="number"},object:function(t){return typeof t=="object"&&!ki.array(t)},method:function(t){return typeof t=="function"},email:function(t){return typeof t=="string"&&t.length<=320&&!!t.match(p0.email)},url:function(t){return typeof t=="string"&&t.length<=2048&&!!t.match(xx())},hex:function(t){return typeof t=="string"&&!!t.match(p0.hex)}},vx=function(t,r,n,a,i){if(t.required&&r===void 0){m0(t,r,n,a,i);return}var s=["integer","float","array","regexp","object","method","email","number","date","url","hex"],o=t.type;s.indexOf(o)>-1?ki[o](r)||a.push(wr(i.messages.types[o],t.fullField,t.type)):o&&typeof r!==t.type&&a.push(wr(i.messages.types[o],t.fullField,t.type))},wx=function(t,r,n,a,i){var s=typeof t.len=="number",o=typeof t.min=="number",c=typeof t.max=="number",f=/[\uD800-\uDBFF][\uDC00-\uDFFF]/g,u=r,d=null,h=typeof r=="number",p=typeof r=="string",g=Array.isArray(r);if(h?d="number":p?d="string":g&&(d="array"),!d)return!1;g&&(u=r.length),p&&(u=r.replace(f,"_").length),s?u!==t.len&&a.push(wr(i.messages[d].len,t.fullField,t.len)):o&&!c&&u<t.min?a.push(wr(i.messages[d].min,t.fullField,t.min)):c&&!o&&u>t.max?a.push(wr(i.messages[d].max,t.fullField,t.max)):o&&c&&(u<t.min||u>t.max)&&a.push(wr(i.messages[d].range,t.fullField,t.min,t.max))},Ma="enum",_x=function(t,r,n,a,i){t[Ma]=Array.isArray(t[Ma])?t[Ma]:[],t[Ma].indexOf(r)===-1&&a.push(wr(i.messages[Ma],t.fullField,t[Ma].join(", ")))},yx=function(t,r,n,a,i){if(t.pattern){if(t.pattern instanceof RegExp)t.pattern.lastIndex=0,t.pattern.test(r)||a.push(wr(i.messages.pattern.mismatch,t.fullField,r,t.pattern));else if(typeof t.pattern=="string"){var s=new RegExp(t.pattern);s.test(r)||a.push(wr(i.messages.pattern.mismatch,t.fullField,r,t.pattern))}}},je={required:m0,whitespace:gx,type:vx,range:wx,enum:_x,pattern:yx},kx=function(t,r,n,a,i){var s=[],o=t.required||!t.required&&a.hasOwnProperty(t.field);if(o){if(Ot(r,"string")&&!t.required)return n();je.required(t,r,a,s,i,"string"),Ot(r,"string")||(je.type(t,r,a,s,i),je.range(t,r,a,s,i),je.pattern(t,r,a,s,i),t.whitespace===!0&&je.whitespace(t,r,a,s,i))}n(s)},Ex=function(t,r,n,a,i){var s=[],o=t.required||!t.required&&a.hasOwnProperty(t.field);if(o){if(Ot(r)&&!t.required)return n();je.required(t,r,a,s,i),r!==void 0&&je.type(t,r,a,s,i)}n(s)},bx=function(t,r,n,a,i){var s=[],o=t.required||!t.required&&a.hasOwnProperty(t.field);if(o){if(r===""&&(r=void 0),Ot(r)&&!t.required)return n();je.required(t,r,a,s,i),r!==void 0&&(je.type(t,r,a,s,i),je.range(t,r,a,s,i))}n(s)},Sx=function(t,r,n,a,i){var s=[],o=t.required||!t.required&&a.hasOwnProperty(t.field);if(o){if(Ot(r)&&!t.required)return n();je.required(t,r,a,s,i),r!==void 0&&je.type(t,r,a,s,i)}n(s)},Tx=function(t,r,n,a,i){var s=[],o=t.required||!t.required&&a.hasOwnProperty(t.field);if(o){if(Ot(r)&&!t.required)return n();je.required(t,r,a,s,i),Ot(r)||je.type(t,r,a,s,i)}n(s)},Cx=function(t,r,n,a,i){var s=[],o=t.required||!t.required&&a.hasOwnProperty(t.field);if(o){if(Ot(r)&&!t.required)return n();je.required(t,r,a,s,i),r!==void 0&&(je.type(t,r,a,s,i),je.range(t,r,a,s,i))}n(s)},Fx=function(t,r,n,a,i){var s=[],o=t.required||!t.required&&a.hasOwnProperty(t.field);if(o){if(Ot(r)&&!t.required)return n();je.required(t,r,a,s,i),r!==void 0&&(je.type(t,r,a,s,i),je.range(t,r,a,s,i))}n(s)},Ax=function(t,r,n,a,i){var s=[],o=t.required||!t.required&&a.hasOwnProperty(t.field);if(o){if(r==null&&!t.required)return n();je.required(t,r,a,s,i,"array"),r!=null&&(je.type(t,r,a,s,i),je.range(t,r,a,s,i))}n(s)},Dx=function(t,r,n,a,i){var s=[],o=t.required||!t.required&&a.hasOwnProperty(t.field);if(o){if(Ot(r)&&!t.required)return n();je.required(t,r,a,s,i),r!==void 0&&je.type(t,r,a,s,i)}n(s)},Rx="enum",Ox=function(t,r,n,a,i){var s=[],o=t.required||!t.required&&a.hasOwnProperty(t.field);if(o){if(Ot(r)&&!t.required)return n();je.required(t,r,a,s,i),r!==void 0&&je[Rx](t,r,a,s,i)}n(s)},Bx=function(t,r,n,a,i){var s=[],o=t.required||!t.required&&a.hasOwnProperty(t.field);if(o){if(Ot(r,"string")&&!t.required)return n();je.required(t,r,a,s,i),Ot(r,"string")||je.pattern(t,r,a,s,i)}n(s)},Nx=function(t,r,n,a,i){var s=[],o=t.required||!t.required&&a.hasOwnProperty(t.field);if(o){if(Ot(r,"date")&&!t.required)return n();if(je.required(t,r,a,s,i),!Ot(r,"date")){var c;r instanceof Date?c=r:c=new Date(r),je.type(t,c,a,s,i),c&&je.range(t,c.getTime(),a,s,i)}}n(s)},Ix=function(t,r,n,a,i){var s=[],o=Array.isArray(r)?"array":typeof r;je.required(t,r,a,s,i,o),n(s)},rl=function(t,r,n,a,i){var s=t.type,o=[],c=t.required||!t.required&&a.hasOwnProperty(t.field);if(c){if(Ot(r,s)&&!t.required)return n();je.required(t,r,a,o,i,s),Ot(r,s)||je.type(t,r,a,o,i)}n(o)},Px=function(t,r,n,a,i){var s=[],o=t.required||!t.required&&a.hasOwnProperty(t.field);if(o){if(Ot(r)&&!t.required)return n();je.required(t,r,a,s,i)}n(s)},Ei={string:kx,method:Ex,number:bx,boolean:Sx,regexp:Tx,integer:Cx,float:Fx,array:Ax,object:Dx,enum:Ox,pattern:Bx,date:Nx,url:rl,hex:rl,email:rl,required:Ix,any:Px};function nl(){return{default:"Validation error on field %s",required:"%s is required",enum:"%s must be one of %s",whitespace:"%s cannot be empty",date:{format:"%s date %s is invalid for format %s",parse:"%s date could not be parsed, %s is invalid ",invalid:"%s date %s is invalid"},types:{string:"%s is not a %s",method:"%s is not a %s (function)",array:"%s is not an %s",object:"%s is not an %s",number:"%s is not a %s",date:"%s is not a %s",boolean:"%s is not a %s",integer:"%s is not an %s",float:"%s is not a %s",regexp:"%s is not a valid %s",email:"%s is not a valid %s",url:"%s is not a valid %s",hex:"%s is not a valid %s"},string:{len:"%s must be exactly %s characters",min:"%s must be at least %s characters",max:"%s cannot be longer than %s characters",range:"%s must be between %s and %s characters"},number:{len:"%s must equal %s",min:"%s cannot be less than %s",max:"%s cannot be greater than %s",range:"%s must be between %s and %s"},array:{len:"%s must be exactly %s in length",min:"%s cannot be less than %s in length",max:"%s cannot be greater than %s in length",range:"%s must be between %s and %s in length"},pattern:{mismatch:"%s value %s does not match pattern %s"},clone:function(){var t=JSON.parse(JSON.stringify(this));return t.clone=this.clone,t}}}var al=nl(),bi=function(){function e(r){this.rules=null,this._messages=al,this.define(r)}var t=e.prototype;return t.define=function(n){var a=this;if(!n)throw new Error("Cannot configure a schema with no rules");if(typeof n!="object"||Array.isArray(n))throw new Error("Rules must be an object");this.rules={},Object.keys(n).forEach(function(i){var s=n[i];a.rules[i]=Array.isArray(s)?s:[s]})},t.messages=function(n){return n&&(this._messages=h0(nl(),n)),this._messages},t.validate=function(n,a,i){var s=this;a===void 0&&(a={}),i===void 0&&(i=function(){});var o=n,c=a,f=i;if(typeof c=="function"&&(f=c,c={}),!this.rules||Object.keys(this.rules).length===0)return f&&f(null,o),Promise.resolve(o);function u(m){var x=[],v={};function y(b){if(Array.isArray(b)){var D;x=(D=x).concat.apply(D,b)}else x.push(b)}for(var _=0;_<m.length;_++)y(m[_]);x.length?(v=tl(x),f(x,v)):f(null,o)}if(c.messages){var d=this.messages();d===al&&(d=nl()),h0(d,c.messages),c.messages=d}else c.messages=this.messages();var h={},p=c.keys||Object.keys(this.rules);p.forEach(function(m){var x=s.rules[m],v=o[m];x.forEach(function(y){var _=y;typeof _.transform=="function"&&(o===n&&(o=oa({},o)),v=o[m]=_.transform(v)),typeof _=="function"?_={validator:_}:_=oa({},_),_.validator=s.getValidationMethod(_),_.validator&&(_.field=m,_.fullField=_.fullField||m,_.type=s.getType(_),h[m]=h[m]||[],h[m].push({rule:_,value:v,source:o,field:m}))})});var g={};return hx(h,c,function(m,x){var v=m.rule,y=(v.type==="object"||v.type==="array")&&(typeof v.fields=="object"||typeof v.defaultField=="object");y=y&&(v.required||!v.required&&m.value),v.field=m.field;function _(C,k){return oa({},k,{fullField:v.fullField+"."+C,fullFields:v.fullFields?[].concat(v.fullFields,[C]):[C]})}function b(C){C===void 0&&(C=[]);var k=Array.isArray(C)?C:[C];!c.suppressWarning&&k.length&&e.warning("async-validator:",k),k.length&&v.message!==void 0&&(k=[].concat(v.message));var F=k.map(d0(v,o));if(c.first&&F.length)return g[v.field]=1,x(F);if(!y)x(F);else{if(v.required&&!m.value)return v.message!==void 0?F=[].concat(v.message).map(d0(v,o)):c.error&&(F=[c.error(v,wr(c.messages.required,v.field))]),x(F);var O={};v.defaultField&&Object.keys(m.value).map(function(I){O[I]=v.defaultField}),O=oa({},O,m.rule.fields);var X={};Object.keys(O).forEach(function(I){var G=O[I],re=Array.isArray(G)?G:[G];X[I]=re.map(_.bind(null,I))});var j=new e(X);j.messages(c.messages),m.rule.options&&(m.rule.options.messages=c.messages,m.rule.options.error=c.error),j.validate(m.value,m.rule.options||c,function(I){var G=[];F&&F.length&&G.push.apply(G,F),I&&I.length&&G.push.apply(G,I),x(G.length?G:null)})}}var D;if(v.asyncValidator)D=v.asyncValidator(v,m.value,b,m.source,c);else if(v.validator){try{D=v.validator(v,m.value,b,m.source,c)}catch(C){console.error==null||console.error(C),c.suppressValidatorError||setTimeout(function(){throw C},0),b(C.message)}D===!0?b():D===!1?b(typeof v.message=="function"?v.message(v.fullField||v.field):v.message||(v.fullField||v.field)+" fails"):D instanceof Array?b(D):D instanceof Error&&b(D.message)}D&&D.then&&D.then(function(){return b()},function(C){return b(C)})},function(m){u(m)},o)},t.getType=function(n){if(n.type===void 0&&n.pattern instanceof RegExp&&(n.type="pattern"),typeof n.validator!="function"&&n.type&&!Ei.hasOwnProperty(n.type))throw new Error(wr("Unknown rule type %s",n.type));return n.type||"string"},t.getValidationMethod=function(n){if(typeof n.validator=="function")return n.validator;var a=Object.keys(n),i=a.indexOf("message");return i!==-1&&a.splice(i,1),a.length===1&&a[0]==="required"?Ei.required:Ei[this.getType(n)]||void 0},e}();bi.register=function(t,r){if(typeof r!="function")throw new Error("Cannot register a validator by type, validator is not a function");Ei[t]=r},bi.warning=c0,bi.messages=al,bi.validators=Ei;function Lx(e){const t={};for(const r in e){const n=e[r].getForm(),a=n.rules||n.rule,i=r.split(".");let s=t;if(a)for(let o=0;o<i.length;o++){const c=i[o];s[c]||(s[c]={type:"object",fields:{}}),o==i.length-1?s[c]=a:s=s[c].fields}}return new bi(t)}function il(e,t){z.forEach(e,r=>{r.children?il(r.children,t):t(r)})}function Mx(e,t){const r=de.uiContext.get();function n(){return e.data?e.data:t.value?t.value[r.table.data]||[]:[]}return{getData:n,insert(a,i){n().splice(a,0,i)},unshift(a){n().unshift(a)},remove(a){n().splice(a,1)},get(a){return n()[a]}}}function Vx(e,t,r){const n=Mx(e,r),a=l.reactive([]);function i(B){return typeof e.rowKey=="string"?B[e.rowKey]:e.rowKey(B)}function s(B){return B[e.editable.rowKey]}function o(B){for(const w in a){const S=a[w],T=S.cells,R=S.rowData;if(B({rowData:R,row:S,cells:T})==="break")return}}function c(B){o(({rowData:w,row:S,cells:T})=>{z.forEach(T,(R,W)=>{B({rowData:w,row:S,cells:T,cell:R,key:W})})})}const{merge:f}=Ze(),u=l.computed(()=>f({enabled:!1,mode:"free",rowKey:"id",addForm:{},editForm:{},exclusive:!0,exclusiveEffect:"cancel",activeTrigger:"onClick",activeDefault:!1,isEditable(B){return!0}},e.editable));function d(B,w,S,T){function R(ee){return z.get(B,ee)}function W(ee,ye){z.set(B,ee,ye)}const Y=l.computed(()=>{var ee;return((ee=T.editable)==null?void 0:ee.updateCell)||u.value.updateCell}),q=l.computed(()=>{var ee;return((ee=T.editable)==null?void 0:ee.showAction)||u.value.showAction}),K=l.reactive({mode:S<0?"add":"edit",oldValue:void 0,newValue:void 0,loading:!1,isEditing:u.value.activeDefault,activeTrigger:u.value.activeTrigger,column:T,updateCell:Y,showAction:q,isEditable:()=>{var M;let ee=(M=T==null?void 0:T.editable)==null?void 0:M.disabled;ee instanceof Function&&(ee=config.disabled({column:item,editableId:S,row:rowData}));let ye=null;return ee!=null&&(ye=!ee),ye??(u.value.isEditable({editableId:S,key:w,row:B})||!1)},isChanged:()=>K.newValue!==K.oldValue,getForm:()=>{let ee=u.value[K.mode+"Form"];return ee==null&&(ee=u.value.editForm),ee[w]},active:(ee={})=>{(ee.exclusive??u.value.exclusive)&&((ee.exclusiveEffect??u.value.exclusiveEffect)==="save"?b():D()),K.isEditing=!0,K.oldValue=R(w);const M=u.value.editForm[w];M&&j(M,B)},inactive:()=>{K.isEditing=!1,K.newValue=R(w)},resume:()=>{K.isEditing&&(K.isEditing=!1,W(w,K.oldValue),delete K.newValue,delete K.oldValue)},cancel:()=>{K.resume()},persist:()=>{K.isEditing=!1,delete K.newValue,delete K.oldValue},save:async()=>{const ee=l.unref(K.updateCell);if(!ee){Te.warn("没有配置table.editable.updateCell方法,无法保存，相关文档：http://fast-crud.docmirror.cn/api/crud-options/table.html#editable");return}K.loading=!0;try{const ye=await ee({editableId:S,row:B,key:w,value:R(w)}),M=B[u.value.rowKey];(M==null||M<=0)&&((ye&&ye[u.value.rowKey])==null?Te.error(`对于添加的行，updateCell方法需要返回{'id':value}，如果你配置了别的rowKey，需要返回{[rowKey]:id}。
当前返回值:${JSON.stringify(ye)}`):B[u.value.rowKey]=ye[u.value.rowKey]),K.persist()}finally{K.loading=!1}}});return K}function h(B,w){const S={};il(e.columns,q=>{S[q.key]=d(w,q.key,B,q)});const T=l.computed(()=>Lx(S)),R=i(w),W=R==null||R<0,Y=l.reactive({isAdd:W,rowData:w,editableId:B,isEditing:!1,loading:!1,cells:S,validator:T,inactive:()=>{Y.isEditing=!1,z.forEach(Y.cells,q=>{q.isEditing&&q.inactive()})},active:()=>{Y.isEditing=!0,z.forEach(Y.cells,q=>{q.active({exclusive:!1})})},persist:()=>{Y.isEditing=!1,Y.inactive(),delete Y.isAdd,z.forEach(Y.cells,q=>{q.persist()})},resume:()=>{Y.isEditing=!1,z.forEach(Y.cells,q=>{q.resume()})},cancel:()=>{Y.resume()},validate:async q=>{try{return z.forEach(Y.cells,(K,ee)=>{K.validateErrors=[]}),q==null&&(q=Y.rowData),await Y.validator.validate(q),!0}catch(K){const{errors:ee,fields:ye}=K;return z.forEach(ye,(M,Ke)=>{const Le=Y.cells[Ke];Le&&(Le.validateErrors=M)}),ye}},getRowData:()=>{const q=z.cloneDeep(Y.rowData);return delete q[e.editable.rowKey],delete q.children,q},save:async q=>{const{doSave:K}=q,ee=Y.rowData,{merge:ye}=Ze();if(await Y.validate()!==!0)return;function Ke(Ye){Ye&&(i(Ye)==null&&console.error("保存接口没有返回rowKey,无法更新该行的id,newRow:",Ye),ye(ee,Ye))}Y.loading=!0;const Le=Y.getRowData();try{await K({isAdd:Y.isAdd,row:Le,setData:Ke}),Y.persist()}finally{Y.loading=!1}}});if(l.watch(()=>w,async(q,K,ee)=>{await Y.validate()},{deep:!0}),w.children&&w.children.length>0)for(const q of w.children){q[e.editable.rowKey]||(q[e.editable.rowKey]=g());const K=q[e.editable.rowKey];a[K]=h(K,q)}return W&&Y.active(),Y}let p=0;function g(){return p++,p}function m(B){B==null&&(B=n.getData());const w=Object.assign({},a);z.forOwn(a,(S,T)=>{delete a[T]}),z.forEach(B,S=>{S[e.editable.rowKey]||(S[e.editable.rowKey]=g());const T=S[e.editable.rowKey];w[T]?a[T]=w[T]:a[T]=h(T,S)}),u.value.onSetup&&u.value.onSetup()}function x(B){const w=e.editable.rowKey,S=[];for(const T of B){const R={[w]:T[w]};T.children&&T.children.length&&(R.children=x(T.children)),S.push(R)}return S}l.watch(()=>{const B=e.data;let w=[];return B!=null&&B instanceof Array&&(w=x(B)),JSON.stringify(w)},(B,w)=>{u.value.enabled&&m(e.data)},{immediate:!0}),l.watch(()=>u.value.enabled,B=>{var w;B&&(((w=n.getData())==null?void 0:w.length)>0&&m(),u.value.onEnabled&&u.value.onEnabled({...u.value}))},{immediate:!0}),l.watch(()=>u.value.mode,()=>{u.value.onEnabled&&u.value.onEnabled({...u.value})});function v(B,w){var S;if(w!=null)return(S=a[B])==null?void 0:S.cells[w]}function y(B={}){c(({cell:w})=>{w.active({...B,exclusive:!1})})}function _(){c(({cell:B})=>{B.isEditing&&B.inactive()})}async function b(){c(({cell:B})=>{B.isEditing&&B.save()})}function D(){c(({cell:B})=>{B.isEditing&&B.cancel()})}function C(){_(),o(({row:B})=>{delete B.isAdd}),c(({cell:B})=>{delete B.newValue,delete B.oldValue})}function k(){c(({cell:B})=>{B.resume()})}function F(){let B=!1;return o(({cells:w})=>{z.forEach(w,S=>{if(S.isChanged())return B=!0,"break"})}),B}let O=0;function X(B,w){il(B,S=>{j(S,w)})}function j(B,w){const S=z.get(w,B.key),T=l.unref(B.value);T!=null&&S==null&&z.set(w,B.key,T)}async function I(B={row:void 0,active:!0}){let w=B.row||{[u.value.rowKey]:--O,[e.rowKey]:O};if(X(u.value.addForm,w),B.addRowFunc){const S=await B.addRowFunc({row:B.row});S&&(w=S)}else if(e.editable.addRow){const S=await e.editable.addRow(n.getData(),w);S&&(w=S)}else n.unshift(w);if(B.active??e.editable.activeDefault){await l.nextTick();const S=s(w),T=oe(S);T&&T.active()}}function G(B,w){for(let S=0;S<w.length;S++){const T=w[S];if(s(T)===B)return z.remove(w,T),!0;if(T.children&&T.children.length>0&&G(B,T.children))return}return!1}function re(B){delete a[B],G(B,n.getData())}function ae(B){const{cols:w}=B;o(({cells:S})=>{z.forEach(w,T=>{S[T].active({...B,exclusive:!1})})})}function oe(B){return a[B]}function fe(){const B=[];return o(({row:w})=>{w.isEditing&&B.push(w)}),B}async function ke(){const B={};let w=!1;for(const S in a){const T=a[S],R=await T.validate();R!=!0&&(B[T.editableId]=R,w=!0)}return w?B:!0}function H(B){for(const w of B)delete w[e.editable.rowKey],w.children&&w.children.length>0&&H(w.children);return B}function le(B){return B==null&&(B=z.cloneDeep(n.getData())),B==null?[]:H(B)}return{editable:{options:u,setupEditable:m,inactive:_,active:y,persist:C,saveEach:b,cancelAll:D,resume:k,addRow:I,removeRow:re,getEditableRow:oe,activeCols:ae,hasDirty:F,getEditableCell:v,eachRows:o,eachCells:c,validate:ke,getCleanTableData:le,getActiveRows:fe}}}const tD="";function Ux(e){const t=(n,a)=>z.get(e,`value[${n}].${a}`);l.provide("componentRef:get",t);const r=(n,a,i)=>z.set(e,`value[${n}].${a}`,i);return l.provide("componentRef:set",r),{getter:t,setter:r}}function $x({props:e,ui:t,sortedColumns:r,renderRowHandle:n,renderCellComponent:a}){l.resolveDynamicComponent(t.table.name);const i=l.resolveDynamicComponent(t.tableColumn.name),s=l.resolveDynamicComponent(t.tableColumnGroup.name);t.tableColumn;const o={};return o.default=()=>{const c=[],f=u=>{const d={},h="cell_"+u.key;let p=i;if(u.children)d.default=()=>{const m=[];return z.forEach(u.children,x=>{x.show!==!1&&m.push(f(x))}),m},p=s;else if(u.type!=null){Te.debug("cell render column.type:",u.type);const m=e.cellSlots&&e.cellSlots[h];m&&(d.default=m)}else d.default=m=>a(u,m);const g={...u};return delete g.children,l.createVNode(p,l.mergeProps({ref:"tableColumnRef"},g,{label:u.title,prop:u.key,dataIndex:u.key}),d)};if(z.forEach(r,u=>{u.show!==!1&&c.push(f(u))}),e.rowHandle&&e.rowHandle.show!==!1){const u={default:n};c.push(l.createVNode(i,l.mergeProps({ref:"tableColumnRef"},e.rowHandle,{label:e.rowHandle.title,prop:e.rowHandle.key||"rowHandle"}),u))}return c},e.slots&&z.forEach(e.slots,(c,f)=>{o[f]=c}),o}function g0(e){var c;const{props:t,renderRowHandle:r,renderCellComponent:n,sortedColumns:a}=e,{ui:i}=de.useUi(),s=a??{},o=[];for(const f in s){const u=s[f];if(u.show===!1)continue;const d={...u};if(d.dataIndex=u.key,o.push(d),u.children!=null){const h={...e,sortedColumns:u.children};delete h.renderRowHandle,d.children=g0(h)}else if(u.type==null){const h=d[i.table.renderMethod],p={...d};delete p[i.table.renderMethod],h?d[i.table.renderMethod]=(g,m,x)=>{const v=i.table.rebuildRenderScope(g,m,x);return h(v,()=>n(p,v))}:d[i.table.renderMethod]=(g,m,x)=>{const v=i.table.rebuildRenderScope(g,m,x);return n(p,v)}}}if(r&&((c=t.rowHandle)==null?void 0:c.show)!==!1){const f={key:"_rowHandle",...t.rowHandle};f[i.table.renderMethod]=(u,d,h)=>{const p=i.table.rebuildRenderScope(u,d,h);return r(p)},o.push(f)}return Te.debug("table columns:",o),o}const x0=l.defineComponent({name:"FsTable",inheritAttrs:!1,props:{slots:{type:Object},cellSlots:{type:Object},columns:{type:Object,default:void 0},rowHandle:{type:Object},show:{type:Boolean,default:!0},data:{type:Array},conditionalRender:{type:Object},editable:{type:Object,default(){return{}}},loading:{type:Boolean,default:!1},sort:{type:Object},request:{type:Object},rowKey:{type:[String,Function],default:"id"}},emits:["row-handle","value-change","pagination-change","filter-change","sort-change","data-change"],setup(e,t){const r=l.ref(),n=l.ref([]);Ux(n);const a=(C,k)=>{if(!k||C==null||C>n.value.length)return;const O=n.value[C][k];return O==null?void 0:O.getTargetRef()},{ui:i}=de.useUi(),s=l.getCurrentInstance();l.watch(()=>e.data,C=>{t.emit("data-change",{data:C})});function o(C=0){i.table.scrollTo({top:C,tableRef:r,fsTableRef:s})}const c=l.resolveDynamicComponent(i.table.name),f=i.tableColumn,u=Vx(e,t,r),d=(C,k)=>{const F=k[f.row],O=F,X=k[i.tableColumn.index];return k.index=X,{...k,key:C.key,value:z.get(F,C.key),row:F,form:O,getComponentRef:j=>a(X,j)}};function h(C){t.emit("row-handle",C)}const p=i.table.onChange({onSortChange:C=>{t.emit("sort-change",C)},onFilterChange:C=>{t.emit("filter-change",C)},onPagination:()=>{},bubbleUp:C=>{C(t.attrs)}}),g=C=>{C.index=C[i.tableColumn.index];const k="cell-rowHandle",F={};if(e.cellSlots)for(const O in e.cellSlots)O.startsWith(k)&&(F[O]=e.cellSlots[O]);return l.createVNode(l.resolveComponent("fs-row-handle"),l.mergeProps(e.rowHandle,{scope:C,onHandle:h}),F)},m=(C,k)=>{var oe,fe,ke,H,le,B,w,S,T,R,W,Y;const F="cell_"+C.key,O=k.row=k[f.row],X={modelValue:z.get(k[f.row],C.key),"onUpdate:modelValue":q=>{var ee;z.set(k[f.row],C.key,q);const K=d(C,k);t.emit("value-change",K),C.valueChange&&(C.valueChange instanceof Function?C.valueChange(K):(ee=C.valueChange)==null||ee.handle(K))}},j=q=>{const K=k[i.tableColumn.index],ee=C.key;let ye=n.value[K];ye==null&&(n.value[K]=ye={}),ye[ee]=q},I=k[i.tableColumn.index],G=O[(oe=e.editable)==null?void 0:oe.rowKey],re=e.cellSlots&&e.cellSlots[F],ae=d(C,k);if(((H=(ke=(fe=u.editable)==null?void 0:fe.options)==null?void 0:ke.value)==null?void 0:H.enabled)===!0){const q=u.editable.getEditableCell(G,C.key);return l.createVNode(l.resolveComponent("fs-editable-cell"),l.mergeProps({ref:j,key:C.key,columnKey:C.key,index:I,editableId:G,item:C,editableCell:q,editableOpts:(B=(le=u.editable)==null?void 0:le.options)==null?void 0:B.value,scope:ae,slots:re,disabled:(T=(S=(w=u.editable)==null?void 0:w.options)==null?void 0:S.value)==null?void 0:T.disabled,readonly:(Y=(W=(R=u.editable)==null?void 0:R.options)==null?void 0:W.value)==null?void 0:Y.readonly},X),null)}else return l.createVNode(l.resolveComponent("fs-cell"),l.mergeProps({ref:j,key:C.key,item:C,scope:ae,slots:re},X,{conditionalRender:e.conditionalRender}),null)},{expose:x}=t;x({tableRef:r,componentRefs:n,getComponentRef:a,...u,scrollTo:o});const v=i.table.renderMode,y=l.computed(()=>({[i.table.data]:e.data})),{merge:_}=Ze(),b=l.computed(()=>_({},t.attrs,p)),D=l.computed(()=>e.columns);if(v==="slot"){const C=l.computed(()=>$x({props:e,ui:i,sortedColumns:D.value,renderRowHandle:g,renderCellComponent:m}));return()=>{if(e.show===!1)return;const k=l.createVNode(c,l.mergeProps({ref:r,loading:e.loading,rowKey:e.rowKey},b.value,y.value),C.value);if(typeof i.table.vLoading=="string"){const F=l.resolveDirective(i.table.vLoading);return l.withDirectives(k,[[F,e.loading]])}return k}}else{const C=l.computed(()=>g0({props:e,ctx:t,ui:i,getContextFn:d,sortedColumns:D.value,componentRefs:n,renderRowHandle:g,renderCellComponent:m,columns:e.columns}));return()=>{if(e.show!==!1)return l.createVNode(c,l.mergeProps({ref:r,loading:e.loading,rowKey:e.rowKey},b.value,{columns:C.value},y.value),e.slots)}}}}),v0=l.defineComponent({name:"FsCell",props:{item:{},scope:{default(){return{}}},slots:{},conditionalRender:{type:Object}},setup(e,t){const{doComputed:r}=Gr(),i=r(()=>e.item.component,()=>e.scope),s=l.ref();function o(){return s.value.getTargetRef()}t.expose({getTargetRef:o,targetRef:s});const c=l.computed(()=>{let u=e.item.showTitle;const d=e.scope.value;return u===!0&&(u=d),u}),f=l.computed(()=>d=>l.createVNode("span",{class:"fs-cell",title:c.value},[d]));return()=>{var g,m;const u=e.scope.value,d=f.value,h={...e.scope,props:e.item},p=e.item.conditionalRender??e.conditionalRender;if(p&&p.match&&p.match(h))return d(p.render(h));if(e.slots)return d(e.slots(h));if(e.item.formatter)return d(e.item.formatter(h));if(e.item.cellRender)return d(e.item.cellRender(h));if(e.item.render)console.warn("column.render 配置已废弃，请使用column.cellRender代替");else return(g=i.value)!=null&&g.name?((m=i.value)==null?void 0:m.show)===!1?void 0:l.createVNode(l.resolveComponent("fs-component-render"),l.mergeProps({title:c.value,ref:s},i.value,{scope:h}),null):d(z.toString(u))}}}),w0=l.defineComponent({name:"FsEditableCell",inheritAttrs:!1,props:{item:{},scope:{},index:{},editableId:{},columnKey:{},editableCell:{type:Object},editableOpts:{type:Object},slots:{},disabled:{},readonly:{}},setup(e,t){de.uiContext.get();const{doComputed:r}=Gr();if(e.index===-1)return()=>{};const a=r(()=>{var p;return(p=e.editableCell)==null?void 0:p.getForm()},()=>e.scope),i=l.computed(()=>{var p;return a.value&&a.value.show!==!1&&((p=e.editableCell)==null?void 0:p.isEditable())});function s(p){p&&i.value&&e.editableCell.active()}async function o(){var p;if(((p=e.editableOpts)==null?void 0:p.mode)==="free"){await e.editableCell.persist();return}await e.editableCell.save()}function c(){e.editableCell.cancel()}const f=l.computed(()=>{var p,g;return(((p=e.editableOpts)==null?void 0:p.mode)==="cell"||((g=e.editableOpts)==null?void 0:g.mode)==="free")&&e.editableCell.showAction!==!1}),u=l.computed(()=>e.editableCell.isChanged&&e.editableCell.isChanged()),d=()=>e.scope,h={default:()=>l.createVNode(l.resolveComponent("fs-cell"),l.mergeProps({ref:"targetRef",item:e.item,scope:e.scope,slots:e.slots},t.attrs),null),edit:()=>{var g,m;let p=null;return(g=e.editableCell)!=null&&g.isEditing&&(a.value.blank===!1||((m=a.value.component)==null?void 0:m.show)===!1?p=null:a.value.conditionalRender&&a.value.conditionalRender.match&&a.value.conditionalRender.match(d())?p=l.createVNode(l.resolveComponent("fs-render"),l.mergeProps({"render-func":a.value.conditionalRender.render,scope:d()},t.attrs),null):a.value.render?p=l.createVNode(l.resolveComponent("fs-render"),l.mergeProps({"render-func":a.value.render,scope:d()},t.attrs),null):p=l.createVNode(l.resolveComponent("fs-component-render"),l.mergeProps({ref:"targetInputRef"},a.value.component,t.attrs,{scope:e.scope}),null)),p}};return()=>{var m;if(!i.value||e.disabled||e.readonly)return l.createVNode(l.resolveComponent("fs-cell"),l.mergeProps({ref:"targetRef",item:e.item,scope:e.scope},t.attrs),null);const p=e.editableCell,g=f.value?(m=e.editableOpts)==null?void 0:m.activeTrigger:!1;return l.createVNode(l.resolveComponent("fs-editable"),{ref:"editableRef",class:"fs-editable-cell",editing:p==null?void 0:p.isEditing,showAction:f.value,dirty:u.value,"onUpdate:editing":s,onSubmit:o,onCancel:c,loading:p==null?void 0:p.loading,trigger:g,validateErrors:p==null?void 0:p.validateErrors},h)}},methods:{getTargetRef(){var e;return((e=this.$refs.targetInputRef)==null?void 0:e.getTargetRef())||this.$refs.targetRef}}}),Wx={class:"fs-editable"},Hx={class:"fs-editable-input"},jx={key:0,class:"fs-editable-dirty"},zx={key:0,class:"fs-editable-action fs-editable-icon"},Gx={class:"fs-editable-input"},Xx={class:"fs-editable-action"},Kx={class:"error-icon"},_0=l.defineComponent({__name:"fs-editable",props:{disabled:{type:Boolean,default:!1},editing:{type:Boolean,default:!1},dirty:{type:Boolean,default:!1},trigger:{type:[String,Boolean],default:"onClick"},loading:{type:Boolean,default:!1},showAction:{type:Boolean,default:!0},validateErrors:{default:()=>[]}},emits:["update:editing","submit","cancel"],setup(e,{emit:t}){const r=e,{ui:n}=de.useUi(),a=t,i=l.computed(()=>r.trigger?{[r.trigger]:()=>{a("update:editing",!0)}}:{});function s(){a("submit")}function o(){a("cancel")}function c(){var u;return((u=r.validateErrors)==null?void 0:u.length)>0}function f(){var u,d;if(((u=r.validateErrors)==null?void 0:u.length)!==0)return(d=r.validateErrors)==null?void 0:d.map(h=>h.message).join(",")}return(u,d)=>{const h=l.resolveComponent("fs-icon");return l.openBlock(),l.createElementBlock("div",Wx,[!u.editing||u.disabled?(l.openBlock(),l.createElementBlock("div",l.mergeProps({key:0,class:"fs-editable-inner fs-editable-pointer"},i.value),[l.createElementVNode("div",Hx,[u.dirty?(l.openBlock(),l.createElementBlock("div",jx)):l.createCommentVNode("",!0),l.renderSlot(u.$slots,"default")]),u.trigger&&!u.disabled?(l.openBlock(),l.createElementBlock("div",zx,[l.createVNode(h,{icon:l.unref(n).icons.edit},null,8,["icon"])])):l.createCommentVNode("",!0)],16)):(l.openBlock(),l.createElementBlock("div",{key:1,class:l.normalizeClass(["fs-editable-inner",{"fs-validate-error":c()}])},[l.createElementVNode("div",Gx,[l.renderSlot(u.$slots,"edit")]),l.createElementVNode("div",Xx,[(l.openBlock(),l.createBlock(l.resolveDynamicComponent(l.unref(n).tooltip.name),null,{[l.unref(n).tooltip.content]:l.withCtx(()=>[l.createElementVNode("span",Kx,l.toDisplayString(f()),1)]),[l.unref(n).tooltip.trigger]:l.withCtx(()=>[l.createVNode(h,{class:l.normalizeClass({hidden:!c(),"error-icon":!0}),size:"mini",icon:l.unref(n).icons.info},null,8,["class","icon"])]),_:2},1024)),u.showAction?(l.openBlock(),l.createElementBlock(l.Fragment,{key:0},[u.loading?(l.openBlock(),l.createBlock(h,{key:0,size:"mini",spin:!0,icon:l.unref(n).icons.refresh},null,8,["icon"])):(l.openBlock(),l.createBlock(h,{key:1,size:"mini",icon:l.unref(n).icons.check,onClick:s},null,8,["icon"])),l.createVNode(h,{class:l.normalizeClass({hidden:u.loading}),size:"mini",icon:l.unref(n).icons.close,onClick:o},null,8,["class","icon"])],64)):l.createCommentVNode("",!0)])],2))])}}}),rD="",Yx=l.defineComponent({name:"FsActionbar",props:{buttons:{}},emits:["action"],setup(e,t){function r(a,i,s){const o={key:a,btn:i,$event:s};if(i.click){i.click(o);return}if(i.onClick){i.onClick(o);return}t.emit("action",o)}const n=l.computed(()=>{let a=[];for(let s in e.buttons)a.push({...e.buttons[s],_key:s});a=z.sortBy(a,s=>s.order??Mn.orderDefault);const i={};return a.forEach(s=>{let o=s._key;delete s._key,i[o]=s}),i});return{onClick:r,computedButtons:n}}}),nD="",qx={class:"fs-actionbar"};function Jx(e,t,r,n,a,i){const s=l.resolveComponent("fs-button");return l.openBlock(),l.createElementBlock("div",qx,[(l.openBlock(!0),l.createElementBlock(l.Fragment,null,l.renderList(e.computedButtons,(o,c)=>(l.openBlock(),l.createElementBlock(l.Fragment,{key:c},[o.show!==!1?(l.openBlock(),l.createBlock(s,l.mergeProps({key:0,ref_for:!0},o,{onClick:f=>e.onClick(c,o,f)}),null,16,["onClick"])):l.createCommentVNode("",!0)],64))),128))])}const y0=rt(Yx,[["render",Jx]]);class Zx{constructor(){Ee(this,"valueChange");Ee(this,"mergeForm")}}const Ps="ColumnsFilterContext",Qx=l.defineComponent({__name:"index",props:{container:{default:()=>({is:"fs-columns-filter-layout-default"})},is:{},show:{type:Boolean},mode:{default:"default"},columns:{},originalColumns:{},storage:{type:[Boolean,String,Object],default:!0},text:{},onReset:{},onSubmit:{}},emits:["update:columns","update:show","reset","submit"],setup(e,{expose:t,emit:r}){const n=e,a=r,{t:i}=Yt(),s=de.uiContext.get(),o=l.ref(!1),c=()=>{o.value=!0},f=l.computed(()=>v(n.originalColumns)),u=l.ref([]),d=l.computed(()=>{const H={};return g(f.value,le=>{H[le.__key]=le}),H}),{merge:h}=Ze(),p=l.computed(()=>{const H={title:i("fs.toolbar.columnFilter.title"),fixed:i("fs.toolbar.columnFilter.fixed"),order:i("fs.toolbar.columnFilter.order"),reset:i("fs.toolbar.columnFilter.reset"),confirm:i("fs.toolbar.columnFilter.confirm"),unnamed:i("fs.toolbar.columnFilter.unnamed")};return h(H,n.text),H});function g(H,le){if(H)if(Array.isArray(H))for(const B of H)le(B),B.children&&g(B.children,le);else for(const B in H){const w=H[B];le(w),w.children&&g(w.children,le)}}function m(H){return{key:H.key,title:H.title,fixed:H.fixed??!1,show:H.show??!0,__show:H.columnSetShow!==!1,__disabled:H.columnSetDisabled??!1}}function x(H){const le={};return z.forEach(H,B=>{const w=z.omit(B,"children","__show","__disabled","__parent","__key");B.children&&B.children.length>0&&(w.children=x(B.children)),le[B.key]=w}),le}function v(H,le){const B=[];return z.forEach(H,w=>{const S=m(w);S.__parent=le,S.__key=`${(le==null?void 0:le.key)||""}.${w.key}`,B.push(S),w.children&&(S.children=v(w.children,S))}),B}function y(H){u.value=v(H)}async function _(){u.value=v(n.originalColumns),await b(!0),await re(),a("reset")}async function b(H=!1){H||await I(u.value);const le=z.cloneDeep(u.value);return g(le,B=>{B&&(delete B.__disabled,delete B.__show,delete B.__parent,delete B.__key)}),O(le),o.value=!1,le}async function D(H=!1){const le=await b(H);a("submit",{columns:le})}const C=l.computed(()=>n.originalColumns);l.provide(Ps,{originalColumns:C,originalColumnsMap:d,currentColumns:u,text:p,active:o,submit:D,reset:_});async function k(){await D(!1),a("update:show",!1)}async function F(){await _(),a("update:show",!1)}function O(H){a("update:columns",x(H))}const X=l.ref();function j(){const H=typeof n.storage=="object"?n.storage:null,le=typeof n.storage=="string"?n.storage:"";if(X.value==null){const B=Jm.useRoute();X.value=new Qc({$router:B,tableName:"columnsFilter",keyType:le,remoteStorage:H})}return X.value}async function I(H){if(n.storage===!1)return;const le=z.cloneDeep(H);g(le,B=>{delete B.__parent}),await j().updateTableValue(le)}async function G(){if(n.storage!==!1)return await j().getTableValue()}async function re(){await j().clearTableValue()}function ae(H){const le=[];g(H,w=>{const S=z.pick(w,"key","__show","__disabled");le.push(JSON.stringify(S))}),le.sort();let B="";for(const w of le)B+=w;return B}l.watch(()=>n.columns,H=>{y(H)});const oe=async()=>{y(n.columns);const H=await G();if(H){const le=ae(H);if(ae(f.value)!==le)return;u.value=H,await l.nextTick(),await D(!0)}};async function fe(H){await H(u),await b()}oe(),t({start:c,save:b,update:fe,original:f,columns:u});function ke(H){return H.label||H.title||H.key||p.value.unnamed}return(H,le)=>{var w;const B=l.resolveComponent("fs-button");return H.mode==="simple"?(l.openBlock(),l.createElementBlock(l.Fragment,{key:0},[(l.openBlock(),l.createBlock(l.resolveDynamicComponent(l.unref(s).row.name),{class:"fs-table-columns-filter-simple"},{default:l.withCtx(()=>[(l.openBlock(!0),l.createElementBlock(l.Fragment,null,l.renderList(u.value,(S,T)=>{var R;return l.withDirectives((l.openBlock(),l.createBlock(l.resolveDynamicComponent(l.unref(s).col.name),{key:T,span:6},{default:l.withCtx(()=>{var W;return[(l.openBlock(),l.createBlock(l.resolveDynamicComponent(l.unref(s).checkbox.name),l.normalizeProps({[l.unref(s).checkbox.modelValue]:S.show,["onUpdate:"+l.unref(s).checkbox.modelValue]:Y=>S.show=Y,disabled:((W=f.value[S.key])==null?void 0:W.__disabled)===!0,class:"item-label",title:ke(S)}),{default:l.withCtx(()=>[l.createTextVNode(l.toDisplayString(ke(S)),1)]),_:2},1040,["disabled","title"]))]}),_:2},1024)),[[l.vShow,((R=f.value[S.key])==null?void 0:R.__show)!==!1]])}),128))]),_:1})),(l.openBlock(),l.createBlock(l.resolveDynamicComponent(l.unref(s).divider.name))),(l.openBlock(),l.createBlock(l.resolveDynamicComponent(l.unref(s).row.name),null,{default:l.withCtx(()=>[l.createVNode(B,{style:{"margin-right":"5px"},type:"primary",icon:l.unref(s).icons.check,text:p.value.confirm,onClick:le[0]||(le[0]=S=>k())},null,8,["icon","text"]),l.createVNode(B,{icon:l.unref(s).icons.refresh,text:p.value.reset,onClick:F},null,8,["icon","text"])]),_:1}))],64)):(l.openBlock(),l.createBlock(l.resolveDynamicComponent(((w=H.container)==null?void 0:w.is)||"fs-columns-filter-layout-default"),l.normalizeProps(l.mergeProps({key:1},H.container)),{buttons:l.withCtx(()=>[(l.openBlock(),l.createBlock(l.resolveDynamicComponent(l.unref(s).row.name),{class:"fs-drawer-footer",gutter:10},{default:l.withCtx(()=>[(l.openBlock(),l.createBlock(l.resolveDynamicComponent(l.unref(s).col.name),{span:12},{default:l.withCtx(()=>[l.createVNode(B,{icon:l.unref(s).icons.refresh,text:p.value.reset,block:"",onClick:_},null,8,["icon","text"])]),_:1})),(l.openBlock(),l.createBlock(l.resolveDynamicComponent(l.unref(s).col.name),{span:12},{default:l.withCtx(()=>[l.createVNode(B,{type:"primary",icon:l.unref(s).icons.check,text:p.value.confirm,block:"",onClick:le[1]||(le[1]=S=>D(!1))},null,8,["icon","text"])]),_:1}))]),_:1}))]),_:1},16))}}}),aD="",ev=l.defineComponent({name:"FsToolbar",components:{FsTableColumnsFilter:Qx},props:{buttons:{type:Object},compact:{type:Boolean,default:!0},columns:{type:Object,default:void 0},storage:{type:[String,Boolean],default:!0},slots:{},columnsFilter:{type:Object}},emits:["update:columns"],setup(e,t){Yt();const r=l.ref(),{ui:n}=de.useUi(),{merge:a}=Ze(),i=l.computed(()=>{const c={columns:{click:()=>{r.value.start()}}};a(c,e.buttons);let f=[];for(let d in c)f.push({...c[d],_key:d});f=z.sortBy(f,d=>d.order??Mn.orderDefault);const u={};return f.forEach(d=>{let h=d._key;delete d._key,u[h]=d}),u}),s=l.ref(!1);return{ui:n,columnsFilterRef:r,computedButtons:i,popoverVisible:s,handleSimpleClick:()=>{n.type!=="element"&&(s.value=!s.value)}}}}),iD="",tv={class:"fs-toolbar"};function rv(e,t,r,n,a,i){var o;const s=l.resolveComponent("fs-button");return l.openBlock(),l.createElementBlock("div",tv,[(l.openBlock(!0),l.createElementBlock(l.Fragment,null,l.renderList(e.computedButtons,(c,f)=>{var u;return l.openBlock(),l.createElementBlock(l.Fragment,{key:f},[c.show!==!1?(l.openBlock(),l.createElementBlock(l.Fragment,{key:0},[f==="columns"&&e.columnsFilter&&((u=e.columnsFilter)==null?void 0:u.mode)==="simple"?(l.openBlock(),l.createBlock(l.resolveDynamicComponent(e.ui.popover.name),l.normalizeProps({key:0,[e.ui.popover.visible]:e.popoverVisible,["onUpdate:"+e.ui.popover.visible]:t[2]||(t[2]=d=>e.popoverVisible=d),"display-directive":"show",placement:"bottom",width:760,trigger:"click"}),{[e.ui.popover.triggerSlotName]:l.withCtx(()=>[l.createVNode(s,l.mergeProps({ref_for:!0},c,{onClick:e.handleSimpleClick}),null,16,["onClick"])]),[e.ui.popover.contentSlotName]:l.withCtx(()=>[e.columns?(l.openBlock(),l.createBlock(l.resolveDynamicComponent(e.columnsFilter.is||"fs-table-columns-filter"),l.mergeProps({key:0,ref_for:!0,ref:"columnsFilterRef",show:e.popoverVisible,"onUpdate:show":t[0]||(t[0]=d=>e.popoverVisible=d),mode:"simple"},e.columnsFilter,{columns:e.columns,storage:e.storage,"onUpdate:columns":t[1]||(t[1]=d=>e.$emit("update:columns",d))}),null,16,["show","columns","storage"])):l.createCommentVNode("",!0)]),_:2},1040)):(l.openBlock(),l.createBlock(s,l.mergeProps({key:1,ref_for:!0},c,{onClick:d=>c.click()}),null,16,["onClick"]))],64)):l.createCommentVNode("",!0)],64)}),128)),e.columns&&((o=e.columnsFilter)==null?void 0:o.mode)!=="simple"?(l.openBlock(),l.createBlock(l.resolveDynamicComponent(e.columnsFilter.is||"fs-table-columns-filter"),l.mergeProps({key:0,ref:"columnsFilterRef",storage:e.storage},e.columnsFilter,{columns:e.columns,"onUpdate:columns":t[3]||(t[3]=c=>e.$emit("update:columns",c))}),null,16,["storage","columns"])):l.createCommentVNode("",!0)])}const k0=rt(ev,[["render",rv]]);/**!
 * Sortable 1.14.0
 * @author	RubaXa   <trash@rubaxa.org>
 * @author	owenm    <owen23355@gmail.com>
 * @license MIT
 */function E0(e,t){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter(function(a){return Object.getOwnPropertyDescriptor(e,a).enumerable})),r.push.apply(r,n)}return r}function fn(e){for(var t=1;t<arguments.length;t++){var r=arguments[t]!=null?arguments[t]:{};t%2?E0(Object(r),!0).forEach(function(n){nv(e,n,r[n])}):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):E0(Object(r)).forEach(function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(r,n))})}return e}function Ls(e){"@babel/helpers - typeof";return typeof Symbol=="function"&&typeof Symbol.iterator=="symbol"?Ls=function(t){return typeof t}:Ls=function(t){return t&&typeof Symbol=="function"&&t.constructor===Symbol&&t!==Symbol.prototype?"symbol":typeof t},Ls(e)}function nv(e,t,r){return t in e?Object.defineProperty(e,t,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[t]=r,e}function Tn(){return Tn=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var r=arguments[t];for(var n in r)Object.prototype.hasOwnProperty.call(r,n)&&(e[n]=r[n])}return e},Tn.apply(this,arguments)}function av(e,t){if(e==null)return{};var r={},n=Object.keys(e),a,i;for(i=0;i<n.length;i++)a=n[i],!(t.indexOf(a)>=0)&&(r[a]=e[a]);return r}function iv(e,t){if(e==null)return{};var r=av(e,t),n,a;if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(a=0;a<i.length;a++)n=i[a],!(t.indexOf(n)>=0)&&Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var sv="1.14.0";function Cn(e){if(typeof window<"u"&&window.navigator)return!!navigator.userAgent.match(e)}var Fn=Cn(/(?:Trident.*rv[ :]?11\.|msie|iemobile|Windows Phone)/i),Si=Cn(/Edge/i),b0=Cn(/firefox/i),Ti=Cn(/safari/i)&&!Cn(/chrome/i)&&!Cn(/android/i),S0=Cn(/iP(ad|od|hone)/i),ov=Cn(/chrome/i)&&Cn(/android/i),T0={capture:!1,passive:!1};function Je(e,t,r){e.addEventListener(t,r,!Fn&&T0)}function ze(e,t,r){e.removeEventListener(t,r,!Fn&&T0)}function Ms(e,t){if(t){if(t[0]===">"&&(t=t.substring(1)),e)try{if(e.matches)return e.matches(t);if(e.msMatchesSelector)return e.msMatchesSelector(t);if(e.webkitMatchesSelector)return e.webkitMatchesSelector(t)}catch{return!1}return!1}}function lv(e){return e.host&&e!==document&&e.host.nodeType?e.host:e.parentNode}function un(e,t,r,n){if(e){r=r||document;do{if(t!=null&&(t[0]===">"?e.parentNode===r&&Ms(e,t):Ms(e,t))||n&&e===r)return e;if(e===r)break}while(e=lv(e))}return null}var C0=/\s+/g;function _r(e,t,r){if(e&&t)if(e.classList)e.classList[r?"add":"remove"](t);else{var n=(" "+e.className+" ").replace(C0," ").replace(" "+t+" "," ");e.className=(n+(r?" "+t:"")).replace(C0," ")}}function De(e,t,r){var n=e&&e.style;if(n){if(r===void 0)return document.defaultView&&document.defaultView.getComputedStyle?r=document.defaultView.getComputedStyle(e,""):e.currentStyle&&(r=e.currentStyle),t===void 0?r:r[t];!(t in n)&&t.indexOf("webkit")===-1&&(t="-webkit-"+t),n[t]=r+(typeof r=="string"?"":"px")}}function Va(e,t){var r="";if(typeof e=="string")r=e;else do{var n=De(e,"transform");n&&n!=="none"&&(r=n+" "+r)}while(!t&&(e=e.parentNode));var a=window.DOMMatrix||window.WebKitCSSMatrix||window.CSSMatrix||window.MSCSSMatrix;return a&&new a(r)}function F0(e,t,r){if(e){var n=e.getElementsByTagName(t),a=0,i=n.length;if(r)for(;a<i;a++)r(n[a],a);return n}return[]}function dn(){var e=document.scrollingElement;return e||document.documentElement}function Bt(e,t,r,n,a){if(!(!e.getBoundingClientRect&&e!==window)){var i,s,o,c,f,u,d;if(e!==window&&e.parentNode&&e!==dn()?(i=e.getBoundingClientRect(),s=i.top,o=i.left,c=i.bottom,f=i.right,u=i.height,d=i.width):(s=0,o=0,c=window.innerHeight,f=window.innerWidth,u=window.innerHeight,d=window.innerWidth),(t||r)&&e!==window&&(a=a||e.parentNode,!Fn))do if(a&&a.getBoundingClientRect&&(De(a,"transform")!=="none"||r&&De(a,"position")!=="static")){var h=a.getBoundingClientRect();s-=h.top+parseInt(De(a,"border-top-width")),o-=h.left+parseInt(De(a,"border-left-width")),c=s+i.height,f=o+i.width;break}while(a=a.parentNode);if(n&&e!==window){var p=Va(a||e),g=p&&p.a,m=p&&p.d;p&&(s/=m,o/=g,d/=g,u/=m,c=s+u,f=o+d)}return{top:s,left:o,bottom:c,right:f,width:d,height:u}}}function A0(e,t,r){for(var n=$n(e,!0),a=Bt(e)[t];n;){var i=Bt(n)[r],s=void 0;if(r==="top"||r==="left"?s=a>=i:s=a<=i,!s)return n;if(n===dn())break;n=$n(n,!1)}return!1}function Ua(e,t,r,n){for(var a=0,i=0,s=e.children;i<s.length;){if(s[i].style.display!=="none"&&s[i]!==Re.ghost&&(n||s[i]!==Re.dragged)&&un(s[i],r.draggable,e,!1)){if(a===t)return s[i];a++}i++}return null}function sl(e,t){for(var r=e.lastElementChild;r&&(r===Re.ghost||De(r,"display")==="none"||t&&!Ms(r,t));)r=r.previousElementSibling;return r||null}function Nr(e,t){var r=0;if(!e||!e.parentNode)return-1;for(;e=e.previousElementSibling;)e.nodeName.toUpperCase()!=="TEMPLATE"&&e!==Re.clone&&(!t||Ms(e,t))&&r++;return r}function D0(e){var t=0,r=0,n=dn();if(e)do{var a=Va(e),i=a.a,s=a.d;t+=e.scrollLeft*i,r+=e.scrollTop*s}while(e!==n&&(e=e.parentNode));return[t,r]}function cv(e,t){for(var r in e)if(e.hasOwnProperty(r)){for(var n in t)if(t.hasOwnProperty(n)&&t[n]===e[r][n])return Number(r)}return-1}function $n(e,t){if(!e||!e.getBoundingClientRect)return dn();var r=e,n=!1;do if(r.clientWidth<r.scrollWidth||r.clientHeight<r.scrollHeight){var a=De(r);if(r.clientWidth<r.scrollWidth&&(a.overflowX=="auto"||a.overflowX=="scroll")||r.clientHeight<r.scrollHeight&&(a.overflowY=="auto"||a.overflowY=="scroll")){if(!r.getBoundingClientRect||r===document.body)return dn();if(n||t)return r;n=!0}}while(r=r.parentNode);return dn()}function fv(e,t){if(e&&t)for(var r in t)t.hasOwnProperty(r)&&(e[r]=t[r]);return e}function ol(e,t){return Math.round(e.top)===Math.round(t.top)&&Math.round(e.left)===Math.round(t.left)&&Math.round(e.height)===Math.round(t.height)&&Math.round(e.width)===Math.round(t.width)}var Ci;function R0(e,t){return function(){if(!Ci){var r=arguments,n=this;r.length===1?e.call(n,r[0]):e.apply(n,r),Ci=setTimeout(function(){Ci=void 0},t)}}}function uv(){clearTimeout(Ci),Ci=void 0}function O0(e,t,r){e.scrollLeft+=t,e.scrollTop+=r}function B0(e){var t=window.Polymer,r=window.jQuery||window.Zepto;return t&&t.dom?t.dom(e).cloneNode(!0):r?r(e).clone(!0)[0]:e.cloneNode(!0)}var yr="Sortable"+new Date().getTime();function dv(){var e=[],t;return{captureAnimationState:function(){if(e=[],!!this.options.animation){var n=[].slice.call(this.el.children);n.forEach(function(a){if(!(De(a,"display")==="none"||a===Re.ghost)){e.push({target:a,rect:Bt(a)});var i=fn({},e[e.length-1].rect);if(a.thisAnimationDuration){var s=Va(a,!0);s&&(i.top-=s.f,i.left-=s.e)}a.fromRect=i}})}},addAnimationState:function(n){e.push(n)},removeAnimationState:function(n){e.splice(cv(e,{target:n}),1)},animateAll:function(n){var a=this;if(!this.options.animation){clearTimeout(t),typeof n=="function"&&n();return}var i=!1,s=0;e.forEach(function(o){var c=0,f=o.target,u=f.fromRect,d=Bt(f),h=f.prevFromRect,p=f.prevToRect,g=o.rect,m=Va(f,!0);m&&(d.top-=m.f,d.left-=m.e),f.toRect=d,f.thisAnimationDuration&&ol(h,d)&&!ol(u,d)&&(g.top-d.top)/(g.left-d.left)===(u.top-d.top)/(u.left-d.left)&&(c=mv(g,h,p,a.options)),ol(d,u)||(f.prevFromRect=u,f.prevToRect=d,c||(c=a.options.animation),a.animate(f,g,d,c)),c&&(i=!0,s=Math.max(s,c),clearTimeout(f.animationResetTimer),f.animationResetTimer=setTimeout(function(){f.animationTime=0,f.prevFromRect=null,f.fromRect=null,f.prevToRect=null,f.thisAnimationDuration=null},c),f.thisAnimationDuration=c)}),clearTimeout(t),i?t=setTimeout(function(){typeof n=="function"&&n()},s):typeof n=="function"&&n(),e=[]},animate:function(n,a,i,s){if(s){De(n,"transition",""),De(n,"transform","");var o=Va(this.el),c=o&&o.a,f=o&&o.d,u=(a.left-i.left)/(c||1),d=(a.top-i.top)/(f||1);n.animatingX=!!u,n.animatingY=!!d,De(n,"transform","translate3d("+u+"px,"+d+"px,0)"),this.forRepaintDummy=hv(n),De(n,"transition","transform "+s+"ms"+(this.options.easing?" "+this.options.easing:"")),De(n,"transform","translate3d(0,0,0)"),typeof n.animated=="number"&&clearTimeout(n.animated),n.animated=setTimeout(function(){De(n,"transition",""),De(n,"transform",""),n.animated=!1,n.animatingX=!1,n.animatingY=!1},s)}}}}function hv(e){return e.offsetWidth}function mv(e,t,r,n){return Math.sqrt(Math.pow(t.top-e.top,2)+Math.pow(t.left-e.left,2))/Math.sqrt(Math.pow(t.top-r.top,2)+Math.pow(t.left-r.left,2))*n.animation}var $a=[],ll={initializeByDefault:!0},Fi={mount:function(t){for(var r in ll)ll.hasOwnProperty(r)&&!(r in t)&&(t[r]=ll[r]);$a.forEach(function(n){if(n.pluginName===t.pluginName)throw"Sortable: Cannot mount plugin ".concat(t.pluginName," more than once")}),$a.push(t)},pluginEvent:function(t,r,n){var a=this;this.eventCanceled=!1,n.cancel=function(){a.eventCanceled=!0};var i=t+"Global";$a.forEach(function(s){r[s.pluginName]&&(r[s.pluginName][i]&&r[s.pluginName][i](fn({sortable:r},n)),r.options[s.pluginName]&&r[s.pluginName][t]&&r[s.pluginName][t](fn({sortable:r},n)))})},initializePlugins:function(t,r,n,a){$a.forEach(function(o){var c=o.pluginName;if(!(!t.options[c]&&!o.initializeByDefault)){var f=new o(t,r,t.options);f.sortable=t,f.options=t.options,t[c]=f,Tn(n,f.defaults)}});for(var i in t.options)if(t.options.hasOwnProperty(i)){var s=this.modifyOption(t,i,t.options[i]);typeof s<"u"&&(t.options[i]=s)}},getEventProperties:function(t,r){var n={};return $a.forEach(function(a){typeof a.eventProperties=="function"&&Tn(n,a.eventProperties.call(r[a.pluginName],t))}),n},modifyOption:function(t,r,n){var a;return $a.forEach(function(i){t[i.pluginName]&&i.optionListeners&&typeof i.optionListeners[r]=="function"&&(a=i.optionListeners[r].call(t[i.pluginName],n))}),a}};function pv(e){var t=e.sortable,r=e.rootEl,n=e.name,a=e.targetEl,i=e.cloneEl,s=e.toEl,o=e.fromEl,c=e.oldIndex,f=e.newIndex,u=e.oldDraggableIndex,d=e.newDraggableIndex,h=e.originalEvent,p=e.putSortable,g=e.extraEventProperties;if(t=t||r&&r[yr],!!t){var m,x=t.options,v="on"+n.charAt(0).toUpperCase()+n.substr(1);window.CustomEvent&&!Fn&&!Si?m=new CustomEvent(n,{bubbles:!0,cancelable:!0}):(m=document.createEvent("Event"),m.initEvent(n,!0,!0)),m.to=s||r,m.from=o||r,m.item=a||r,m.clone=i,m.oldIndex=c,m.newIndex=f,m.oldDraggableIndex=u,m.newDraggableIndex=d,m.originalEvent=h,m.pullMode=p?p.lastPutMode:void 0;var y=fn(fn({},g),Fi.getEventProperties(n,t));for(var _ in y)m[_]=y[_];r&&r.dispatchEvent(m),x[v]&&x[v].call(t,m)}}var gv=["evt"],mr=function(t,r){var n=arguments.length>2&&arguments[2]!==void 0?arguments[2]:{},a=n.evt,i=iv(n,gv);Fi.pluginEvent.bind(Re)(t,r,fn({dragEl:ge,parentEl:xt,ghostEl:Ie,rootEl:ft,nextEl:la,lastDownEl:Vs,cloneEl:vt,cloneHidden:Wn,dragStarted:Di,putSortable:zt,activeSortable:Re.active,originalEvent:a,oldIndex:Wa,oldDraggableIndex:Ai,newIndex:kr,newDraggableIndex:Hn,hideGhostForTarget:U0,unhideGhostForTarget:$0,cloneNowHidden:function(){Wn=!0},cloneNowShown:function(){Wn=!1},dispatchSortableEvent:function(o){or({sortable:r,name:o,originalEvent:a})}},i))};function or(e){pv(fn({putSortable:zt,cloneEl:vt,targetEl:ge,rootEl:ft,oldIndex:Wa,oldDraggableIndex:Ai,newIndex:kr,newDraggableIndex:Hn},e))}var ge,xt,Ie,ft,la,Vs,vt,Wn,Wa,kr,Ai,Hn,Us,zt,Ha=!1,$s=!1,Ws=[],ca,Kr,cl,fl,N0,I0,Di,ja,Ri,Oi=!1,Hs=!1,js,qt,ul=[],dl=!1,zs=[],Gs=typeof document<"u",Xs=S0,P0=Si||Fn?"cssFloat":"float",xv=Gs&&!ov&&!S0&&"draggable"in document.createElement("div"),L0=function(){if(Gs){if(Fn)return!1;var e=document.createElement("x");return e.style.cssText="pointer-events:auto",e.style.pointerEvents==="auto"}}(),M0=function(t,r){var n=De(t),a=parseInt(n.width)-parseInt(n.paddingLeft)-parseInt(n.paddingRight)-parseInt(n.borderLeftWidth)-parseInt(n.borderRightWidth),i=Ua(t,0,r),s=Ua(t,1,r),o=i&&De(i),c=s&&De(s),f=o&&parseInt(o.marginLeft)+parseInt(o.marginRight)+Bt(i).width,u=c&&parseInt(c.marginLeft)+parseInt(c.marginRight)+Bt(s).width;if(n.display==="flex")return n.flexDirection==="column"||n.flexDirection==="column-reverse"?"vertical":"horizontal";if(n.display==="grid")return n.gridTemplateColumns.split(" ").length<=1?"vertical":"horizontal";if(i&&o.float&&o.float!=="none"){var d=o.float==="left"?"left":"right";return s&&(c.clear==="both"||c.clear===d)?"vertical":"horizontal"}return i&&(o.display==="block"||o.display==="flex"||o.display==="table"||o.display==="grid"||f>=a&&n[P0]==="none"||s&&n[P0]==="none"&&f+u>a)?"vertical":"horizontal"},vv=function(t,r,n){var a=n?t.left:t.top,i=n?t.right:t.bottom,s=n?t.width:t.height,o=n?r.left:r.top,c=n?r.right:r.bottom,f=n?r.width:r.height;return a===o||i===c||a+s/2===o+f/2},wv=function(t,r){var n;return Ws.some(function(a){var i=a[yr].options.emptyInsertThreshold;if(!(!i||sl(a))){var s=Bt(a),o=t>=s.left-i&&t<=s.right+i,c=r>=s.top-i&&r<=s.bottom+i;if(o&&c)return n=a}}),n},V0=function(t){function r(i,s){return function(o,c,f,u){var d=o.options.group.name&&c.options.group.name&&o.options.group.name===c.options.group.name;if(i==null&&(s||d))return!0;if(i==null||i===!1)return!1;if(s&&i==="clone")return i;if(typeof i=="function")return r(i(o,c,f,u),s)(o,c,f,u);var h=(s?o:c).options.group.name;return i===!0||typeof i=="string"&&i===h||i.join&&i.indexOf(h)>-1}}var n={},a=t.group;(!a||Ls(a)!="object")&&(a={name:a}),n.name=a.name,n.checkPull=r(a.pull,!0),n.checkPut=r(a.put),n.revertClone=a.revertClone,t.group=n},U0=function(){!L0&&Ie&&De(Ie,"display","none")},$0=function(){!L0&&Ie&&De(Ie,"display","")};Gs&&document.addEventListener("click",function(e){if($s)return e.preventDefault(),e.stopPropagation&&e.stopPropagation(),e.stopImmediatePropagation&&e.stopImmediatePropagation(),$s=!1,!1},!0);var fa=function(t){if(ge){t=t.touches?t.touches[0]:t;var r=wv(t.clientX,t.clientY);if(r){var n={};for(var a in t)t.hasOwnProperty(a)&&(n[a]=t[a]);n.target=n.rootEl=r,n.preventDefault=void 0,n.stopPropagation=void 0,r[yr]._onDragOver(n)}}},_v=function(t){ge&&ge.parentNode[yr]._isOutsideThisEl(t.target)};function Re(e,t){if(!(e&&e.nodeType&&e.nodeType===1))throw"Sortable: `el` must be an HTMLElement, not ".concat({}.toString.call(e));this.el=e,this.options=t=Tn({},t),e[yr]=this;var r={group:null,sort:!0,disabled:!1,store:null,handle:null,draggable:/^[uo]l$/i.test(e.nodeName)?">li":">*",swapThreshold:1,invertSwap:!1,invertedSwapThreshold:null,removeCloneOnHide:!0,direction:function(){return M0(e,this.options)},ghostClass:"sortable-ghost",chosenClass:"sortable-chosen",dragClass:"sortable-drag",ignore:"a, img",filter:null,preventOnFilter:!0,animation:0,easing:null,setData:function(s,o){s.setData("Text",o.textContent)},dropBubble:!1,dragoverBubble:!1,dataIdAttr:"data-id",delay:0,delayOnTouchOnly:!1,touchStartThreshold:(Number.parseInt?Number:window).parseInt(window.devicePixelRatio,10)||1,forceFallback:!1,fallbackClass:"sortable-fallback",fallbackOnBody:!1,fallbackTolerance:0,fallbackOffset:{x:0,y:0},supportPointer:Re.supportPointer!==!1&&"PointerEvent"in window&&!Ti,emptyInsertThreshold:5};Fi.initializePlugins(this,e,r);for(var n in r)!(n in t)&&(t[n]=r[n]);V0(t);for(var a in this)a.charAt(0)==="_"&&typeof this[a]=="function"&&(this[a]=this[a].bind(this));this.nativeDraggable=t.forceFallback?!1:xv,this.nativeDraggable&&(this.options.touchStartThreshold=1),t.supportPointer?Je(e,"pointerdown",this._onTapStart):(Je(e,"mousedown",this._onTapStart),Je(e,"touchstart",this._onTapStart)),this.nativeDraggable&&(Je(e,"dragover",this),Je(e,"dragenter",this)),Ws.push(this.el),t.store&&t.store.get&&this.sort(t.store.get(this)||[]),Tn(this,dv())}Re.prototype={constructor:Re,_isOutsideThisEl:function(t){!this.el.contains(t)&&t!==this.el&&(ja=null)},_getDirection:function(t,r){return typeof this.options.direction=="function"?this.options.direction.call(this,t,r,ge):this.options.direction},_onTapStart:function(t){if(t.cancelable){var r=this,n=this.el,a=this.options,i=a.preventOnFilter,s=t.type,o=t.touches&&t.touches[0]||t.pointerType&&t.pointerType==="touch"&&t,c=(o||t).target,f=t.target.shadowRoot&&(t.path&&t.path[0]||t.composedPath&&t.composedPath()[0])||c,u=a.filter;if(Fv(n),!ge&&!(/mousedown|pointerdown/.test(s)&&t.button!==0||a.disabled)&&!f.isContentEditable&&!(!this.nativeDraggable&&Ti&&c&&c.tagName.toUpperCase()==="SELECT")&&(c=un(c,a.draggable,n,!1),!(c&&c.animated)&&Vs!==c)){if(Wa=Nr(c),Ai=Nr(c,a.draggable),typeof u=="function"){if(u.call(this,t,c,this)){or({sortable:r,rootEl:f,name:"filter",targetEl:c,toEl:n,fromEl:n}),mr("filter",r,{evt:t}),i&&t.cancelable&&t.preventDefault();return}}else if(u&&(u=u.split(",").some(function(d){if(d=un(f,d.trim(),n,!1),d)return or({sortable:r,rootEl:d,name:"filter",targetEl:c,fromEl:n,toEl:n}),mr("filter",r,{evt:t}),!0}),u)){i&&t.cancelable&&t.preventDefault();return}a.handle&&!un(f,a.handle,n,!1)||this._prepareDragStart(t,o,c)}}},_prepareDragStart:function(t,r,n){var a=this,i=a.el,s=a.options,o=i.ownerDocument,c;if(n&&!ge&&n.parentNode===i){var f=Bt(n);if(ft=i,ge=n,xt=ge.parentNode,la=ge.nextSibling,Vs=n,Us=s.group,Re.dragged=ge,ca={target:ge,clientX:(r||t).clientX,clientY:(r||t).clientY},N0=ca.clientX-f.left,I0=ca.clientY-f.top,this._lastX=(r||t).clientX,this._lastY=(r||t).clientY,ge.style["will-change"]="all",c=function(){if(mr("delayEnded",a,{evt:t}),Re.eventCanceled){a._onDrop();return}a._disableDelayedDragEvents(),!b0&&a.nativeDraggable&&(ge.draggable=!0),a._triggerDragStart(t,r),or({sortable:a,name:"choose",originalEvent:t}),_r(ge,s.chosenClass,!0)},s.ignore.split(",").forEach(function(u){F0(ge,u.trim(),hl)}),Je(o,"dragover",fa),Je(o,"mousemove",fa),Je(o,"touchmove",fa),Je(o,"mouseup",a._onDrop),Je(o,"touchend",a._onDrop),Je(o,"touchcancel",a._onDrop),b0&&this.nativeDraggable&&(this.options.touchStartThreshold=4,ge.draggable=!0),mr("delayStart",this,{evt:t}),s.delay&&(!s.delayOnTouchOnly||r)&&(!this.nativeDraggable||!(Si||Fn))){if(Re.eventCanceled){this._onDrop();return}Je(o,"mouseup",a._disableDelayedDrag),Je(o,"touchend",a._disableDelayedDrag),Je(o,"touchcancel",a._disableDelayedDrag),Je(o,"mousemove",a._delayedDragTouchMoveHandler),Je(o,"touchmove",a._delayedDragTouchMoveHandler),s.supportPointer&&Je(o,"pointermove",a._delayedDragTouchMoveHandler),a._dragStartTimer=setTimeout(c,s.delay)}else c()}},_delayedDragTouchMoveHandler:function(t){var r=t.touches?t.touches[0]:t;Math.max(Math.abs(r.clientX-this._lastX),Math.abs(r.clientY-this._lastY))>=Math.floor(this.options.touchStartThreshold/(this.nativeDraggable&&window.devicePixelRatio||1))&&this._disableDelayedDrag()},_disableDelayedDrag:function(){ge&&hl(ge),clearTimeout(this._dragStartTimer),this._disableDelayedDragEvents()},_disableDelayedDragEvents:function(){var t=this.el.ownerDocument;ze(t,"mouseup",this._disableDelayedDrag),ze(t,"touchend",this._disableDelayedDrag),ze(t,"touchcancel",this._disableDelayedDrag),ze(t,"mousemove",this._delayedDragTouchMoveHandler),ze(t,"touchmove",this._delayedDragTouchMoveHandler),ze(t,"pointermove",this._delayedDragTouchMoveHandler)},_triggerDragStart:function(t,r){r=r||t.pointerType=="touch"&&t,!this.nativeDraggable||r?this.options.supportPointer?Je(document,"pointermove",this._onTouchMove):r?Je(document,"touchmove",this._onTouchMove):Je(document,"mousemove",this._onTouchMove):(Je(ge,"dragend",this),Je(ft,"dragstart",this._onDragStart));try{document.selection?Ys(function(){document.selection.empty()}):window.getSelection().removeAllRanges()}catch{}},_dragStarted:function(t,r){if(Ha=!1,ft&&ge){mr("dragStarted",this,{evt:r}),this.nativeDraggable&&Je(document,"dragover",_v);var n=this.options;!t&&_r(ge,n.dragClass,!1),_r(ge,n.ghostClass,!0),Re.active=this,t&&this._appendGhost(),or({sortable:this,name:"start",originalEvent:r})}else this._nulling()},_emulateDragOver:function(){if(Kr){this._lastX=Kr.clientX,this._lastY=Kr.clientY,U0();for(var t=document.elementFromPoint(Kr.clientX,Kr.clientY),r=t;t&&t.shadowRoot&&(t=t.shadowRoot.elementFromPoint(Kr.clientX,Kr.clientY),t!==r);)r=t;if(ge.parentNode[yr]._isOutsideThisEl(t),r)do{if(r[yr]){var n=void 0;if(n=r[yr]._onDragOver({clientX:Kr.clientX,clientY:Kr.clientY,target:t,rootEl:r}),n&&!this.options.dragoverBubble)break}t=r}while(r=r.parentNode);$0()}},_onTouchMove:function(t){if(ca){var r=this.options,n=r.fallbackTolerance,a=r.fallbackOffset,i=t.touches?t.touches[0]:t,s=Ie&&Va(Ie,!0),o=Ie&&s&&s.a,c=Ie&&s&&s.d,f=Xs&&qt&&D0(qt),u=(i.clientX-ca.clientX+a.x)/(o||1)+(f?f[0]-ul[0]:0)/(o||1),d=(i.clientY-ca.clientY+a.y)/(c||1)+(f?f[1]-ul[1]:0)/(c||1);if(!Re.active&&!Ha){if(n&&Math.max(Math.abs(i.clientX-this._lastX),Math.abs(i.clientY-this._lastY))<n)return;this._onDragStart(t,!0)}if(Ie){s?(s.e+=u-(cl||0),s.f+=d-(fl||0)):s={a:1,b:0,c:0,d:1,e:u,f:d};var h="matrix(".concat(s.a,",").concat(s.b,",").concat(s.c,",").concat(s.d,",").concat(s.e,",").concat(s.f,")");De(Ie,"webkitTransform",h),De(Ie,"mozTransform",h),De(Ie,"msTransform",h),De(Ie,"transform",h),cl=u,fl=d,Kr=i}t.cancelable&&t.preventDefault()}},_appendGhost:function(){if(!Ie){var t=this.options.fallbackOnBody?document.body:ft,r=Bt(ge,!0,Xs,!0,t),n=this.options;if(Xs){for(qt=t;De(qt,"position")==="static"&&De(qt,"transform")==="none"&&qt!==document;)qt=qt.parentNode;qt!==document.body&&qt!==document.documentElement?(qt===document&&(qt=dn()),r.top+=qt.scrollTop,r.left+=qt.scrollLeft):qt=dn(),ul=D0(qt)}Ie=ge.cloneNode(!0),_r(Ie,n.ghostClass,!1),_r(Ie,n.fallbackClass,!0),_r(Ie,n.dragClass,!0),De(Ie,"transition",""),De(Ie,"transform",""),De(Ie,"box-sizing","border-box"),De(Ie,"margin",0),De(Ie,"top",r.top),De(Ie,"left",r.left),De(Ie,"width",r.width),De(Ie,"height",r.height),De(Ie,"opacity","0.8"),De(Ie,"position",Xs?"absolute":"fixed"),De(Ie,"zIndex","100000"),De(Ie,"pointerEvents","none"),Re.ghost=Ie,t.appendChild(Ie),De(Ie,"transform-origin",N0/parseInt(Ie.style.width)*100+"% "+I0/parseInt(Ie.style.height)*100+"%")}},_onDragStart:function(t,r){var n=this,a=t.dataTransfer,i=n.options;if(mr("dragStart",this,{evt:t}),Re.eventCanceled){this._onDrop();return}mr("setupClone",this),Re.eventCanceled||(vt=B0(ge),vt.draggable=!1,vt.style["will-change"]="",this._hideClone(),_r(vt,this.options.chosenClass,!1),Re.clone=vt),n.cloneId=Ys(function(){mr("clone",n),!Re.eventCanceled&&(n.options.removeCloneOnHide||ft.insertBefore(vt,ge),n._hideClone(),or({sortable:n,name:"clone"}))}),!r&&_r(ge,i.dragClass,!0),r?($s=!0,n._loopId=setInterval(n._emulateDragOver,50)):(ze(document,"mouseup",n._onDrop),ze(document,"touchend",n._onDrop),ze(document,"touchcancel",n._onDrop),a&&(a.effectAllowed="move",i.setData&&i.setData.call(n,a,ge)),Je(document,"drop",n),De(ge,"transform","translateZ(0)")),Ha=!0,n._dragStartId=Ys(n._dragStarted.bind(n,r,t)),Je(document,"selectstart",n),Di=!0,Ti&&De(document.body,"user-select","none")},_onDragOver:function(t){var r=this.el,n=t.target,a,i,s,o=this.options,c=o.group,f=Re.active,u=Us===c,d=o.sort,h=zt||f,p,g=this,m=!1;if(dl)return;function x(ke,H){mr(ke,g,fn({evt:t,isOwner:u,axis:p?"vertical":"horizontal",revert:s,dragRect:a,targetRect:i,canSort:d,fromSortable:h,target:n,completed:y,onMove:function(B,w){return Ks(ft,r,ge,a,B,Bt(B),t,w)},changed:_},H))}function v(){x("dragOverAnimationCapture"),g.captureAnimationState(),g!==h&&h.captureAnimationState()}function y(ke){return x("dragOverCompleted",{insertion:ke}),ke&&(u?f._hideClone():f._showClone(g),g!==h&&(_r(ge,zt?zt.options.ghostClass:f.options.ghostClass,!1),_r(ge,o.ghostClass,!0)),zt!==g&&g!==Re.active?zt=g:g===Re.active&&zt&&(zt=null),h===g&&(g._ignoreWhileAnimating=n),g.animateAll(function(){x("dragOverAnimationComplete"),g._ignoreWhileAnimating=null}),g!==h&&(h.animateAll(),h._ignoreWhileAnimating=null)),(n===ge&&!ge.animated||n===r&&!n.animated)&&(ja=null),!o.dragoverBubble&&!t.rootEl&&n!==document&&(ge.parentNode[yr]._isOutsideThisEl(t.target),!ke&&fa(t)),!o.dragoverBubble&&t.stopPropagation&&t.stopPropagation(),m=!0}function _(){kr=Nr(ge),Hn=Nr(ge,o.draggable),or({sortable:g,name:"change",toEl:r,newIndex:kr,newDraggableIndex:Hn,originalEvent:t})}if(t.preventDefault!==void 0&&t.cancelable&&t.preventDefault(),n=un(n,o.draggable,r,!0),x("dragOver"),Re.eventCanceled)return m;if(ge.contains(t.target)||n.animated&&n.animatingX&&n.animatingY||g._ignoreWhileAnimating===n)return y(!1);if($s=!1,f&&!o.disabled&&(u?d||(s=xt!==ft):zt===this||(this.lastPutMode=Us.checkPull(this,f,ge,t))&&c.checkPut(this,f,ge,t))){if(p=this._getDirection(t,n)==="vertical",a=Bt(ge),x("dragOverValid"),Re.eventCanceled)return m;if(s)return xt=ft,v(),this._hideClone(),x("revert"),Re.eventCanceled||(la?ft.insertBefore(ge,la):ft.appendChild(ge)),y(!0);var b=sl(r,o.draggable);if(!b||bv(t,p,this)&&!b.animated){if(b===ge)return y(!1);if(b&&r===t.target&&(n=b),n&&(i=Bt(n)),Ks(ft,r,ge,a,n,i,t,!!n)!==!1)return v(),r.appendChild(ge),xt=r,_(),y(!0)}else if(b&&Ev(t,p,this)){var D=Ua(r,0,o,!0);if(D===ge)return y(!1);if(n=D,i=Bt(n),Ks(ft,r,ge,a,n,i,t,!1)!==!1)return v(),r.insertBefore(ge,D),xt=r,_(),y(!0)}else if(n.parentNode===r){i=Bt(n);var C=0,k,F=ge.parentNode!==r,O=!vv(ge.animated&&ge.toRect||a,n.animated&&n.toRect||i,p),X=p?"top":"left",j=A0(n,"top","top")||A0(ge,"top","top"),I=j?j.scrollTop:void 0;ja!==n&&(k=i[X],Oi=!1,Hs=!O&&o.invertSwap||F),C=Sv(t,n,i,p,O?1:o.swapThreshold,o.invertedSwapThreshold==null?o.swapThreshold:o.invertedSwapThreshold,Hs,ja===n);var G;if(C!==0){var re=Nr(ge);do re-=C,G=xt.children[re];while(G&&(De(G,"display")==="none"||G===Ie))}if(C===0||G===n)return y(!1);ja=n,Ri=C;var ae=n.nextElementSibling,oe=!1;oe=C===1;var fe=Ks(ft,r,ge,a,n,i,t,oe);if(fe!==!1)return(fe===1||fe===-1)&&(oe=fe===1),dl=!0,setTimeout(kv,30),v(),oe&&!ae?r.appendChild(ge):n.parentNode.insertBefore(ge,oe?ae:n),j&&O0(j,0,I-j.scrollTop),xt=ge.parentNode,k!==void 0&&!Hs&&(js=Math.abs(k-Bt(n)[X])),_(),y(!0)}if(r.contains(ge))return y(!1)}return!1},_ignoreWhileAnimating:null,_offMoveEvents:function(){ze(document,"mousemove",this._onTouchMove),ze(document,"touchmove",this._onTouchMove),ze(document,"pointermove",this._onTouchMove),ze(document,"dragover",fa),ze(document,"mousemove",fa),ze(document,"touchmove",fa)},_offUpEvents:function(){var t=this.el.ownerDocument;ze(t,"mouseup",this._onDrop),ze(t,"touchend",this._onDrop),ze(t,"pointerup",this._onDrop),ze(t,"touchcancel",this._onDrop),ze(document,"selectstart",this)},_onDrop:function(t){var r=this.el,n=this.options;if(kr=Nr(ge),Hn=Nr(ge,n.draggable),mr("drop",this,{evt:t}),xt=ge&&ge.parentNode,kr=Nr(ge),Hn=Nr(ge,n.draggable),Re.eventCanceled){this._nulling();return}Ha=!1,Hs=!1,Oi=!1,clearInterval(this._loopId),clearTimeout(this._dragStartTimer),ml(this.cloneId),ml(this._dragStartId),this.nativeDraggable&&(ze(document,"drop",this),ze(r,"dragstart",this._onDragStart)),this._offMoveEvents(),this._offUpEvents(),Ti&&De(document.body,"user-select",""),De(ge,"transform",""),t&&(Di&&(t.cancelable&&t.preventDefault(),!n.dropBubble&&t.stopPropagation()),Ie&&Ie.parentNode&&Ie.parentNode.removeChild(Ie),(ft===xt||zt&&zt.lastPutMode!=="clone")&&vt&&vt.parentNode&&vt.parentNode.removeChild(vt),ge&&(this.nativeDraggable&&ze(ge,"dragend",this),hl(ge),ge.style["will-change"]="",Di&&!Ha&&_r(ge,zt?zt.options.ghostClass:this.options.ghostClass,!1),_r(ge,this.options.chosenClass,!1),or({sortable:this,name:"unchoose",toEl:xt,newIndex:null,newDraggableIndex:null,originalEvent:t}),ft!==xt?(kr>=0&&(or({rootEl:xt,name:"add",toEl:xt,fromEl:ft,originalEvent:t}),or({sortable:this,name:"remove",toEl:xt,originalEvent:t}),or({rootEl:xt,name:"sort",toEl:xt,fromEl:ft,originalEvent:t}),or({sortable:this,name:"sort",toEl:xt,originalEvent:t})),zt&&zt.save()):kr!==Wa&&kr>=0&&(or({sortable:this,name:"update",toEl:xt,originalEvent:t}),or({sortable:this,name:"sort",toEl:xt,originalEvent:t})),Re.active&&((kr==null||kr===-1)&&(kr=Wa,Hn=Ai),or({sortable:this,name:"end",toEl:xt,originalEvent:t}),this.save()))),this._nulling()},_nulling:function(){mr("nulling",this),ft=ge=xt=Ie=la=vt=Vs=Wn=ca=Kr=Di=kr=Hn=Wa=Ai=ja=Ri=zt=Us=Re.dragged=Re.ghost=Re.clone=Re.active=null,zs.forEach(function(t){t.checked=!0}),zs.length=cl=fl=0},handleEvent:function(t){switch(t.type){case"drop":case"dragend":this._onDrop(t);break;case"dragenter":case"dragover":ge&&(this._onDragOver(t),yv(t));break;case"selectstart":t.preventDefault();break}},toArray:function(){for(var t=[],r,n=this.el.children,a=0,i=n.length,s=this.options;a<i;a++)r=n[a],un(r,s.draggable,this.el,!1)&&t.push(r.getAttribute(s.dataIdAttr)||Cv(r));return t},sort:function(t,r){var n={},a=this.el;this.toArray().forEach(function(i,s){var o=a.children[s];un(o,this.options.draggable,a,!1)&&(n[i]=o)},this),r&&this.captureAnimationState(),t.forEach(function(i){n[i]&&(a.removeChild(n[i]),a.appendChild(n[i]))}),r&&this.animateAll()},save:function(){var t=this.options.store;t&&t.set&&t.set(this)},closest:function(t,r){return un(t,r||this.options.draggable,this.el,!1)},option:function(t,r){var n=this.options;if(r===void 0)return n[t];var a=Fi.modifyOption(this,t,r);typeof a<"u"?n[t]=a:n[t]=r,t==="group"&&V0(n)},destroy:function(){mr("destroy",this);var t=this.el;t[yr]=null,ze(t,"mousedown",this._onTapStart),ze(t,"touchstart",this._onTapStart),ze(t,"pointerdown",this._onTapStart),this.nativeDraggable&&(ze(t,"dragover",this),ze(t,"dragenter",this)),Array.prototype.forEach.call(t.querySelectorAll("[draggable]"),function(r){r.removeAttribute("draggable")}),this._onDrop(),this._disableDelayedDragEvents(),Ws.splice(Ws.indexOf(this.el),1),this.el=t=null},_hideClone:function(){if(!Wn){if(mr("hideClone",this),Re.eventCanceled)return;De(vt,"display","none"),this.options.removeCloneOnHide&&vt.parentNode&&vt.parentNode.removeChild(vt),Wn=!0}},_showClone:function(t){if(t.lastPutMode!=="clone"){this._hideClone();return}if(Wn){if(mr("showClone",this),Re.eventCanceled)return;ge.parentNode==ft&&!this.options.group.revertClone?ft.insertBefore(vt,ge):la?ft.insertBefore(vt,la):ft.appendChild(vt),this.options.group.revertClone&&this.animate(ge,vt),De(vt,"display",""),Wn=!1}}};function yv(e){e.dataTransfer&&(e.dataTransfer.dropEffect="move"),e.cancelable&&e.preventDefault()}function Ks(e,t,r,n,a,i,s,o){var c,f=e[yr],u=f.options.onMove,d;return window.CustomEvent&&!Fn&&!Si?c=new CustomEvent("move",{bubbles:!0,cancelable:!0}):(c=document.createEvent("Event"),c.initEvent("move",!0,!0)),c.to=t,c.from=e,c.dragged=r,c.draggedRect=n,c.related=a||t,c.relatedRect=i||Bt(t),c.willInsertAfter=o,c.originalEvent=s,e.dispatchEvent(c),u&&(d=u.call(f,c,s)),d}function hl(e){e.draggable=!1}function kv(){dl=!1}function Ev(e,t,r){var n=Bt(Ua(r.el,0,r.options,!0)),a=10;return t?e.clientX<n.left-a||e.clientY<n.top&&e.clientX<n.right:e.clientY<n.top-a||e.clientY<n.bottom&&e.clientX<n.left}function bv(e,t,r){var n=Bt(sl(r.el,r.options.draggable)),a=10;return t?e.clientX>n.right+a||e.clientX<=n.right&&e.clientY>n.bottom&&e.clientX>=n.left:e.clientX>n.right&&e.clientY>n.top||e.clientX<=n.right&&e.clientY>n.bottom+a}function Sv(e,t,r,n,a,i,s,o){var c=n?e.clientY:e.clientX,f=n?r.height:r.width,u=n?r.top:r.left,d=n?r.bottom:r.right,h=!1;if(!s){if(o&&js<f*a){if(!Oi&&(Ri===1?c>u+f*i/2:c<d-f*i/2)&&(Oi=!0),Oi)h=!0;else if(Ri===1?c<u+js:c>d-js)return-Ri}else if(c>u+f*(1-a)/2&&c<d-f*(1-a)/2)return Tv(t)}return h=h||s,h&&(c<u+f*i/2||c>d-f*i/2)?c>u+f/2?1:-1:0}function Tv(e){return Nr(ge)<Nr(e)?1:-1}function Cv(e){for(var t=e.tagName+e.className+e.src+e.href+e.textContent,r=t.length,n=0;r--;)n+=t.charCodeAt(r);return n.toString(36)}function Fv(e){zs.length=0;for(var t=e.getElementsByTagName("input"),r=t.length;r--;){var n=t[r];n.checked&&zs.push(n)}}function Ys(e){return setTimeout(e,0)}function ml(e){return clearTimeout(e)}Gs&&Je(document,"touchmove",function(e){(Re.active||Ha)&&e.cancelable&&e.preventDefault()}),Re.utils={on:Je,off:ze,css:De,find:F0,is:function(t,r){return!!un(t,r,t,!1)},extend:fv,throttle:R0,closest:un,toggleClass:_r,clone:B0,index:Nr,nextTick:Ys,cancelNextTick:ml,detectDirection:M0,getChild:Ua},Re.get=function(e){return e[yr]},Re.mount=function(){for(var e=arguments.length,t=new Array(e),r=0;r<e;r++)t[r]=arguments[r];t[0].constructor===Array&&(t=t[0]),t.forEach(function(n){if(!n.prototype||!n.prototype.constructor)throw"Sortable: Mounted plugin must be a constructor function, not ".concat({}.toString.call(n));n.utils&&(Re.utils=fn(fn({},Re.utils),n.utils)),Fi.mount(n)})},Re.create=function(e,t){return new Re(e,t)},Re.version=sv;var Tt=[],Bi,pl,gl=!1,xl,vl,qs,Ni;function Av(){function e(){this.defaults={scroll:!0,forceAutoScrollFallback:!1,scrollSensitivity:30,scrollSpeed:10,bubbleScroll:!0};for(var t in this)t.charAt(0)==="_"&&typeof this[t]=="function"&&(this[t]=this[t].bind(this))}return e.prototype={dragStarted:function(r){var n=r.originalEvent;this.sortable.nativeDraggable?Je(document,"dragover",this._handleAutoScroll):this.options.supportPointer?Je(document,"pointermove",this._handleFallbackAutoScroll):n.touches?Je(document,"touchmove",this._handleFallbackAutoScroll):Je(document,"mousemove",this._handleFallbackAutoScroll)},dragOverCompleted:function(r){var n=r.originalEvent;!this.options.dragOverBubble&&!n.rootEl&&this._handleAutoScroll(n)},drop:function(){this.sortable.nativeDraggable?ze(document,"dragover",this._handleAutoScroll):(ze(document,"pointermove",this._handleFallbackAutoScroll),ze(document,"touchmove",this._handleFallbackAutoScroll),ze(document,"mousemove",this._handleFallbackAutoScroll)),W0(),Js(),uv()},nulling:function(){qs=pl=Bi=gl=Ni=xl=vl=null,Tt.length=0},_handleFallbackAutoScroll:function(r){this._handleAutoScroll(r,!0)},_handleAutoScroll:function(r,n){var a=this,i=(r.touches?r.touches[0]:r).clientX,s=(r.touches?r.touches[0]:r).clientY,o=document.elementFromPoint(i,s);if(qs=r,n||this.options.forceAutoScrollFallback||Si||Fn||Ti){wl(r,this.options,o,n);var c=$n(o,!0);gl&&(!Ni||i!==xl||s!==vl)&&(Ni&&W0(),Ni=setInterval(function(){var f=$n(document.elementFromPoint(i,s),!0);f!==c&&(c=f,Js()),wl(r,a.options,f,n)},10),xl=i,vl=s)}else{if(!this.options.bubbleScroll||$n(o,!0)===dn()){Js();return}wl(r,this.options,$n(o,!1),!1)}}},Tn(e,{pluginName:"scroll",initializeByDefault:!0})}function Js(){Tt.forEach(function(e){clearInterval(e.pid)}),Tt=[]}function W0(){clearInterval(Ni)}var wl=R0(function(e,t,r,n){if(t.scroll){var a=(e.touches?e.touches[0]:e).clientX,i=(e.touches?e.touches[0]:e).clientY,s=t.scrollSensitivity,o=t.scrollSpeed,c=dn(),f=!1,u;pl!==r&&(pl=r,Js(),Bi=t.scroll,u=t.scrollFn,Bi===!0&&(Bi=$n(r,!0)));var d=0,h=Bi;do{var p=h,g=Bt(p),m=g.top,x=g.bottom,v=g.left,y=g.right,_=g.width,b=g.height,D=void 0,C=void 0,k=p.scrollWidth,F=p.scrollHeight,O=De(p),X=p.scrollLeft,j=p.scrollTop;p===c?(D=_<k&&(O.overflowX==="auto"||O.overflowX==="scroll"||O.overflowX==="visible"),C=b<F&&(O.overflowY==="auto"||O.overflowY==="scroll"||O.overflowY==="visible")):(D=_<k&&(O.overflowX==="auto"||O.overflowX==="scroll"),C=b<F&&(O.overflowY==="auto"||O.overflowY==="scroll"));var I=D&&(Math.abs(y-a)<=s&&X+_<k)-(Math.abs(v-a)<=s&&!!X),G=C&&(Math.abs(x-i)<=s&&j+b<F)-(Math.abs(m-i)<=s&&!!j);if(!Tt[d])for(var re=0;re<=d;re++)Tt[re]||(Tt[re]={});(Tt[d].vx!=I||Tt[d].vy!=G||Tt[d].el!==p)&&(Tt[d].el=p,Tt[d].vx=I,Tt[d].vy=G,clearInterval(Tt[d].pid),(I!=0||G!=0)&&(f=!0,Tt[d].pid=setInterval((function(){n&&this.layer===0&&Re.active._onTouchMove(qs);var ae=Tt[this.layer].vy?Tt[this.layer].vy*o:0,oe=Tt[this.layer].vx?Tt[this.layer].vx*o:0;typeof u=="function"&&u.call(Re.dragged.parentNode[yr],oe,ae,e,qs,Tt[this.layer].el)!=="continue"||O0(Tt[this.layer].el,oe,ae)}).bind({layer:d}),24))),d++}while(t.bubbleScroll&&h!==c&&(h=$n(h,!1)));gl=f}},30),H0=function(t){var r=t.originalEvent,n=t.putSortable,a=t.dragEl,i=t.activeSortable,s=t.dispatchSortableEvent,o=t.hideGhostForTarget,c=t.unhideGhostForTarget;if(r){var f=n||i;o();var u=r.changedTouches&&r.changedTouches.length?r.changedTouches[0]:r,d=document.elementFromPoint(u.clientX,u.clientY);c(),f&&!f.el.contains(d)&&(s("spill"),this.onSpill({dragEl:a,putSortable:n}))}};function _l(){}_l.prototype={startIndex:null,dragStart:function(t){var r=t.oldDraggableIndex;this.startIndex=r},onSpill:function(t){var r=t.dragEl,n=t.putSortable;this.sortable.captureAnimationState(),n&&n.captureAnimationState();var a=Ua(this.sortable.el,this.startIndex,this.options);a?this.sortable.el.insertBefore(r,a):this.sortable.el.appendChild(r),this.sortable.animateAll(),n&&n.animateAll()},drop:H0},Tn(_l,{pluginName:"revertOnSpill"});function yl(){}yl.prototype={onSpill:function(t){var r=t.dragEl,n=t.putSortable,a=n||this.sortable;a.captureAnimationState(),r.parentNode&&r.parentNode.removeChild(r),a.animateAll()},drop:H0},Tn(yl,{pluginName:"removeOnSpill"}),Re.mount(new Av),Re.mount(yl,_l);var Dv=Object.defineProperty,Rv=Object.defineProperties,Ov=Object.getOwnPropertyDescriptors,j0=Object.getOwnPropertySymbols,Bv=Object.prototype.hasOwnProperty,Nv=Object.prototype.propertyIsEnumerable,z0=(e,t,r)=>t in e?Dv(e,t,{enumerable:!0,configurable:!0,writable:!0,value:r}):e[t]=r,jn=(e,t)=>{for(var r in t||(t={}))Bv.call(t,r)&&z0(e,r,t[r]);if(j0)for(var r of j0(t))Nv.call(t,r)&&z0(e,r,t[r]);return e},Zs=(e,t)=>Rv(e,Ov(t));function kl(e){e.parentElement!==null&&e.parentElement.removeChild(e)}function G0(e,t,r){const n=r===0?e.children[0]:e.children[r-1].nextSibling;e.insertBefore(t,n)}function Iv(){return typeof window<"u"?window.console:global.console}const Pv=Iv();function Lv(e){const t=Object.create(null);return function(n){return t[n]||(t[n]=e(n))}}const Mv=/-(\w)/g,Vv=Lv(e=>e.replace(Mv,(t,r)=>r.toUpperCase())),X0=["Start","Add","Remove","Update","End"],K0=["Choose","Unchoose","Sort","Filter","Clone"],Y0=["Move"],Uv=[Y0,X0,K0].flatMap(e=>e).map(e=>`on${e}`),El={manage:Y0,manageAndEmit:X0,emit:K0};function $v(e){return Uv.indexOf(e)!==-1}const Wv=["a","abbr","address","area","article","aside","audio","b","base","bdi","bdo","blockquote","body","br","button","canvas","caption","cite","code","col","colgroup","data","datalist","dd","del","details","dfn","dialog","div","dl","dt","em","embed","fieldset","figcaption","figure","footer","form","h1","h2","h3","h4","h5","h6","head","header","hgroup","hr","html","i","iframe","img","input","ins","kbd","label","legend","li","link","main","map","mark","math","menu","menuitem","meta","meter","nav","noscript","object","ol","optgroup","option","output","p","param","picture","pre","progress","q","rb","rp","rt","rtc","ruby","s","samp","script","section","select","slot","small","source","span","strong","style","sub","summary","sup","svg","table","tbody","td","template","textarea","tfoot","th","thead","time","title","tr","track","u","ul","var","video","wbr"];function Hv(e){return Wv.includes(e)}function jv(e){return["transition-group","TransitionGroup"].includes(e)}function q0(e){return["id","class","role","style"].includes(e)||e.startsWith("data-")||e.startsWith("aria-")||e.startsWith("on")}function J0(e){return e.reduce((t,[r,n])=>(t[r]=n,t),{})}function zv({$attrs:e,componentData:t={}}){const r=J0(Object.entries(e).filter(([n,a])=>q0(n)));return jn(jn({},r),t)}function Gv({$attrs:e,callBackBuilder:t}){const r=J0(Z0(e));Object.entries(t).forEach(([a,i])=>{El[a].forEach(s=>{r[`on${s}`]=i(s)})});const n=`[data-draggable]${r.draggable||""}`;return Zs(jn({},r),{draggable:n})}function Z0(e){return Object.entries(e).filter(([t,r])=>!q0(t)).map(([t,r])=>[Vv(t),r]).filter(([t,r])=>!$v(t))}const Q0=e=>{const t=e.el||Array.isArray(e.children)&&e.children[0].el.parentNode;return t||console.error("使用 transition-group , 需要在slot中template内至少2层html标签"),t||{}},Xv=(e,t)=>e.__draggable_context=t,eu=e=>e.__draggable_context;class Kv{constructor({nodes:{header:t,default:r,footer:n},root:a,realList:i}){this.defaultNodes=r,this.children=[...t,...r,...n],this.externalComponent=a.externalComponent,this.rootTransition=a.transition,this.tag=a.tag,this.realList=i}get _isRootComponent(){return this.externalComponent||this.rootTransition}render(t,r){const{tag:n,children:a,_isRootComponent:i}=this;return t(n,r,i?{default:()=>a}:a)}updated(){const{defaultNodes:t,realList:r}=this;t.forEach((n,a)=>{Xv(Q0(n),{element:r[a],index:a})})}getUnderlyingVm(t){return eu(t)}getVmIndexFromDomIndex(t,r){const{defaultNodes:n}=this,{length:a}=n,i=r.children,s=i.item(t);if(s===null)return a;const o=eu(s);if(o)return o.index;if(a===0)return 0;const c=Q0(n[0]),f=[...i].findIndex(u=>u===c);return t<f?0:a}}function Yv(e,t){const r=e[t];return r?r():[]}function qv({$slots:e,realList:t,getKey:r}){const n=t||[],[a,i]=["header","footer"].map(c=>Yv(e,c)),{item:s}=e;if(!s)throw new Error("draggable element must have an item slot");const o=n.flatMap((c,f)=>s({element:c,index:f}).map(u=>(u.key=r(c),u.props=Zs(jn({},u.props||{}),{"data-draggable":!0}),u)));if(o.length!==n.length)throw new Error("Item slot must have only one child");return{header:a,footer:i,default:o}}function Jv(e){const t=jv(e),r=!Hv(e)&&!t;return{transition:t,externalComponent:r,tag:r?l.resolveComponent(e):t?l.TransitionGroup:e}}function Zv({$slots:e,tag:t,realList:r,getKey:n}){const a=qv({$slots:e,realList:r,getKey:n}),i=Jv(t);return new Kv({nodes:a,root:i,realList:r})}function tu(e,t){l.nextTick(()=>this.$emit(e.toLowerCase(),t))}function ru(e){return(t,r)=>{if(this.realList!==null)return this[`onDrag${e}`](t,r)}}function Qv(e){const t=ru.call(this,e);return(r,n)=>{t.call(this,r,n),tu.call(this,e,r)}}let bl=null;const ew={list:{type:Array,required:!1,default:null},modelValue:{type:Array,required:!1,default:null},itemKey:{type:[String,Function],required:!0},clone:{type:Function,default:e=>e},tag:{type:String,default:"div"},move:{type:Function,default:null},componentData:{type:Object,required:!1,default:null}},tw=["update:modelValue","change",...[...El.manageAndEmit,...El.emit].map(e=>e.toLowerCase())],rw=l.defineComponent({name:"draggable",inheritAttrs:!1,props:ew,emits:tw,data(){return{error:!1}},render(){try{this.error=!1;const{$slots:e,$attrs:t,tag:r,componentData:n,realList:a,getKey:i}=this,s=Zv({$slots:e,tag:r,realList:a,getKey:i});this.componentStructure=s;const o=zv({$attrs:t,componentData:n});return s.render(l.h,o)}catch(e){return this.error=!0,l.h("pre",{style:{color:"red"}},e.stack)}},created(){this.list!==null&&this.modelValue!==null&&Pv.error("modelValue and list props are mutually exclusive! Please set one or another.")},mounted(){if(this.error)return;const{$attrs:e,$el:t,componentStructure:r}=this;r.updated();const n=Gv({$attrs:e,callBackBuilder:{manageAndEmit:i=>Qv.call(this,i),emit:i=>tu.bind(this,i),manage:i=>ru.call(this,i)}}),a=t.nodeType===1?t:t.parentElement;this._sortable=new Re(a,n),this.targetDomElement=a,a.__draggable_component__=this},updated(){this.componentStructure.updated()},beforeUnmount(){this._sortable!==void 0&&this._sortable.destroy()},computed:{realList(){const{list:e}=this;return e||this.modelValue},getKey(){const{itemKey:e}=this;return typeof e=="function"?e:t=>t[e]}},watch:{$attrs:{handler(e){const{_sortable:t}=this;t&&Z0(e).forEach(([r,n])=>{t.option(r,n)})},deep:!0}},methods:{getUnderlyingVm(e){return this.componentStructure.getUnderlyingVm(e)||null},getUnderlyingPotencialDraggableComponent(e){return e.__draggable_component__},emitChanges(e){l.nextTick(()=>this.$emit("change",e))},alterList(e){if(this.list){e(this.list);return}const t=[...this.modelValue];e(t),this.$emit("update:modelValue",t)},spliceList(){const e=t=>t.splice(...arguments);this.alterList(e)},updatePosition(e,t){const r=n=>n.splice(t,0,n.splice(e,1)[0]);this.alterList(r)},getRelatedContextFromMoveEvent({to:e,related:t}){const r=this.getUnderlyingPotencialDraggableComponent(e);if(!r)return{component:r};const n=r.realList,a={list:n,component:r};if(e!==t&&n){const i=r.getUnderlyingVm(t)||{};return jn(jn({},i),a)}return a},getVmIndexFromDomIndex(e){return this.componentStructure.getVmIndexFromDomIndex(e,this.targetDomElement)},onDragStart(e){this.context=this.getUnderlyingVm(e.item),e.item._underlying_vm_=this.clone(this.context.element),bl=e.item},onDragAdd(e){const t=e.item._underlying_vm_;if(t===void 0)return;kl(e.item);const r=this.getVmIndexFromDomIndex(e.newIndex);this.spliceList(r,0,t);const n={element:t,newIndex:r};this.emitChanges({added:n})},onDragRemove(e){if(G0(this.$el,e.item,e.oldIndex),e.pullMode==="clone"){kl(e.clone);return}const{index:t,element:r}=this.context;this.spliceList(t,1);const n={element:r,oldIndex:t};this.emitChanges({removed:n})},onDragUpdate(e){kl(e.item),G0(e.from,e.item,e.oldIndex);const t=this.context.index,r=this.getVmIndexFromDomIndex(e.newIndex);this.updatePosition(t,r);const n={element:this.context.element,oldIndex:t,newIndex:r};this.emitChanges({moved:n})},computeFutureIndex(e,t){if(!e.element)return 0;const r=[...t.to.children].filter(s=>s.style.display!=="none"),n=r.indexOf(t.related),a=e.component.getVmIndexFromDomIndex(n);return r.indexOf(bl)!==-1||!t.willInsertAfter?a:a+1},onDragMove(e,t){const{move:r,realList:n}=this;if(!r||!n)return!0;const a=this.getRelatedContextFromMoveEvent(e),i=this.computeFutureIndex(a,e),s=Zs(jn({},this.context),{futureIndex:i}),o=Zs(jn({},e),{relatedContext:a,draggedContext:s});return r(o,t)},onDragEnd(){bl=null}}}),nw=l.defineComponent({name:"FsTableColumnsFixedController",props:{modelValue:{default:!1}},emits:["update:modelValue","change"],setup(e,t){const{ui:r}=de.useUi(),n=l.computed(()=>[{value:"left",icon:r.icons.left},{value:!1,icon:r.icons.close},{value:"right",icon:r.icons.right}]);function a(i){t.emit("update:modelValue",i),t.emit("change",i)}return{ui:r,options:n,submit:a}}}),sD="";function aw(e,t,r,n,a,i){const s=l.resolveComponent("fs-button");return l.openBlock(),l.createBlock(l.resolveDynamicComponent(e.ui.buttonGroup.name),{class:"fs-table-columns-fixed-controller"},{default:l.withCtx(()=>[(l.openBlock(!0),l.createElementBlock(l.Fragment,null,l.renderList(e.options,o=>(l.openBlock(),l.createBlock(s,{key:o.icon,type:e.modelValue===o.value?"primary":"default",icon:o.icon,size:"small",onClick:c=>e.submit(o.value)},null,8,["type","icon","onClick"]))),128))]),_:1})}const Sl=rt(nw,[["render",aw]]),iw=["title","i"],sw={class:"item-right"},ow={"flex-box":"0",class:"component--list-item-handle handle"},lw={style:{"margin-left":"20px","padding-left":"10px","border-left":"1px solid #eee"}},Tl=l.defineComponent({__name:"fs-columns-filter-nest-list",props:{columns:{},isRoot:{type:Boolean,default:!1}},emits:["check-changed","fixed-changed"],setup(e,{emit:t}){const{ui:r}=de.useUi(),n=t,{originalColumns:a,currentColumns:i,originalColumnsMap:s,text:o,active:c}=l.inject(Ps);function f(m){return m.label||m.title||m.key||o.value.unnamed}function u(m){const x=m.draggedContext.element,v=m.relatedContext.element,y=[];for(const k of i.value)k.key===x.key?y.push(v):k.key===v.key?y.push(x):y.push(k);let _=0,b=y.length-1,D=y.length-1,C=0;for(let k=0;k<y.length;k++){const F=y[k];F.fixed==="left"?_=k:F.fixed==="right"?b=b>k?k:b:(D=D>k?k:D,C=C<k?k:C)}if(D<_||C>b)return!1}function d(m){return"update:"+m}function h(m){m.show=!m.show;function x(y){y.children&&y.children.forEach(_=>{!_.__show||_.__disabled||(_.show=y.show,x(_))})}x(m);function v(y){if(y.__parent){const _=y.__parent;_&&(_.show=_.children.filter(b=>b.__show&&b.show===!0).length>0,v(_))}}v(m)}function p(){n("check-changed")}function g(m,x){n("fixed-changed",m,x)}return(m,x)=>{const v=l.resolveComponent("fs-icon"),y=l.resolveComponent("fs-columns-filter-nest-list",!0);return l.openBlock(),l.createBlock(l.unref(rw),{list:m.columns,"item-key":"key",move:u},{item:l.withCtx(({element:_,index:b})=>{var D,C;return[l.createElementVNode("div",null,[l.withDirectives(l.createElementVNode("div",{title:f(_),class:"component--list-item",flex:"main:justify cross:center",i:b},[(l.openBlock(),l.createBlock(l.resolveDynamicComponent(l.unref(r).checkbox.name),l.mergeProps({[l.unref(r).checkbox.modelValue||""]:_.show,disabled:((D=l.unref(s)[_.__key])==null?void 0:D.__disabled)===!0,class:"item-label",title:f(_)},{[l.toHandlerKey(d(l.unref(r).checkbox.modelValue))]:k=>h(_)},{onChange:p}),{default:l.withCtx(()=>[l.createTextVNode(l.toDisplayString(f(_)),1)]),_:2},1040,["disabled","title"])),l.createElementVNode("div",sw,[m.isRoot?(l.openBlock(),l.createBlock(Sl,{key:0,modelValue:_.fixed,"onUpdate:modelValue":k=>_.fixed=k,"flex-box":"0",class:"d2-mr-10",onChange:k=>g(b,k)},null,8,["modelValue","onUpdate:modelValue","onChange"])):l.createCommentVNode("",!0),l.createElementVNode("div",ow,[l.createVNode(v,{icon:l.unref(r).icons.sort},null,8,["icon"])])])],8,iw),[[l.vShow,((C=l.unref(s)[_.__key])==null?void 0:C.__show)!==!1]]),l.createElementVNode("div",lw,[_.children?(l.openBlock(),l.createBlock(y,{key:0,columns:_.children,onCheckChanged:p},null,8,["columns"])):l.createCommentVNode("",!0)])])]}),_:1},8,["list"])}}}),cw={class:"component--list"},fw={key:"__first__",class:"component--list-item",flex:"main:justify cross:center"},uw={span:12},dw={class:"title"},nu=l.defineComponent({__name:"fs-columns-filter-layout-default",props:{width:{},drawer:{}},setup(e){const{ui:t}=de.useUi(),{originalColumns:r,currentColumns:n,text:a,active:i}=l.inject(Ps),s=e,o=l.computed(()=>z.merge({[t.drawer.visible]:i.value,["onUpdate:"+t.drawer.visible]:x=>{i.value=x},[t.drawer.width]:s.width||"400px"},s.drawer)),c=l.ref(!1);function f(x){c.value=x,n.value=n.value.map(v=>(!v.__show||v.__disabled||(v.show=x),v))}const u=l.computed(()=>({[t.checkbox.modelValue]:c.value,["onUpdate:"+t.checkbox.modelValue]:x=>{f(x)}})),d=l.computed(()=>n.value.filter(x=>x.__show&&x.show===!0).length),h=l.computed(()=>n.value.filter(x=>x.__show).length),p=l.computed(()=>d.value>0&&d.value<h.value);l.watch(()=>{n.value},()=>{m()},{immediate:!0});function g(x,v){v&&(n.value[x].show=!0),v==="left"&&n.value.unshift(n.value.splice(x,1)[0]),v==="right"&&n.value.push(n.value.splice(x,1)[0]),m()}function m(){c.value=d.value===h.value}return(x,v)=>(l.openBlock(),l.createBlock(l.resolveDynamicComponent(l.unref(t).drawer.name),l.mergeProps({class:"fs-columns-filter-layout-default",title:l.unref(a).title},o.value,{"append-to-body":""}),{default:l.withCtx(()=>[(l.openBlock(),l.createBlock(l.resolveDynamicComponent(l.unref(t).drawer.hasContentWrap||"div"),{class:"fs-drawer-wrapper fs-table-columns-filter",title:l.unref(a).title},{default:l.withCtx(()=>[(l.openBlock(),l.createBlock(l.resolveDynamicComponent(l.unref(t).card.name),{shadow:"never"},{default:l.withCtx(()=>[l.createElementVNode("div",cw,[l.createElementVNode("div",fw,[l.createElementVNode("span",uw,[(l.openBlock(),l.createBlock(l.resolveDynamicComponent(l.unref(t).checkbox.name),l.mergeProps({indeterminate:p.value},u.value),{default:l.withCtx(()=>[l.createTextVNode(l.toDisplayString(d.value)+" / "+l.toDisplayString(h.value),1)]),_:1},16,["indeterminate"]))]),l.createElementVNode("span",dw,l.toDisplayString(l.unref(a).fixed)+" / "+l.toDisplayString(l.unref(a).order),1)]),l.createVNode(Tl,{columns:l.unref(n),"is-root":!0,onCheckChanged:m,onFixedChanged:g},null,8,["columns"])])]),_:1})),l.renderSlot(x.$slots,"buttons")]),_:3},8,["title"]))]),_:3},16,["title"]))}}),hw=l.defineComponent({name:"FsSearchButtons",inheritAttrs:!1,props:{buttons:{type:Object}},setup(){const{ui:e}=de.useUi();return{ui:e}}}),mw={class:"fs-search-col fs-search-btns"};function pw(e,t,r,n,a,i){const s=l.resolveComponent("fs-button");return l.openBlock(),l.createElementBlock("div",mw,[(l.openBlock(),l.createBlock(l.resolveDynamicComponent(e.ui.formItem.name),null,{default:l.withCtx(()=>[(l.openBlock(!0),l.createElementBlock(l.Fragment,null,l.renderList(e.buttons,(o,c)=>(l.openBlock(),l.createElementBlock(l.Fragment,{key:c},[o.show?(l.openBlock(),l.createBlock(s,l.mergeProps({key:0,ref_for:!0},o,{onClick:f=>o._click()}),null,16,["onClick"])):l.createCommentVNode("",!0)],64))),128))]),_:1}))])}const au=rt(hw,[["render",pw]]),gw=l.defineComponent({name:"FsSearch",components:{FsSearchButtons:au},inheritAttrs:!1,props:{container:{type:Object},initialForm:{type:Object},validatedForm:{type:Object},options:{type:Object},columns:{type:Object},buttons:{type:Object},searchAfterReset:{type:Boolean,default:!0},autoSearch:{type:Boolean,default:!0},debounce:{type:[Boolean,Object],default:void 0},slots:{type:Object,default(){return{}}},show:{type:Boolean,default:!0},validate:{default:!1},validateOnChange:{default:!0,type:Boolean},col:{},formItem:{type:Object,default:void 0}},emits:["search","_search","reset","_reset","validate-error","update:validatedForm"],setup(e,t){const{ui:r}=de.useUi(),{merge:n}=Ze(),a=n,{doComputed:i,AsyncComputeValue:s,ComputeValue:o}=Gr();z.each(e.columns,B=>{B.value!=null&&(B.value instanceof s||B.value instanceof o)&&Te.warn("search.value配置不支持ComputeValue/AsyncCompute类型的动态计算")});function c(){const B={};return z.forEach(e.columns,(w,S)=>{var R;if(w.value===void 0)return;const T=l.unref(w.value);T!==void 0&&w.show!==!1&&((R=w.component)==null?void 0:R.show)!==!1&&(B[S]=T)}),z.cloneDeep(n({},e.initialForm,B))}const f=l.reactive(c());let u=null;const d=i(()=>e.columns,D,null,B=>{const w=z.cloneDeep(e.formItem||{});z.forEach(B,R=>{n(R,w,R)}),e.validate||z.forEach(B,R=>{delete R.rules,delete R.rule}),e.col&&z.forEach(B,R=>{R.col=n({},e.col,R.col)}),z.forEach(B,R=>{R._cellRender=()=>m(R)});let S=[];z.forEach(B,(R,W)=>{R._key=W,S.push(R)}),S=z.sortBy(S,R=>R.order??Mn.orderDefault);const T={};return S.forEach(R=>{let W=R._key;delete R._key,T[W]=R}),T});function h(){const B=z.cloneDeep(f);t.emit("update:validatedForm",B)}l.watch(()=>e.validatedForm,B=>{for(const w in f)delete f[w];n(f,B||{})},{deep:!0});const p=(B,w)=>z.get(B,w);function g(B){if(B!=null)return B.indexOf(".")>=0?B.split("."):B}function m(B){const w=B.key;async function S(q){H(q,B)}function T(){fe(B)}function R(q,K){K.code==="Enter"&&q.autoSearchTrigger==="enter"&&F()}let W=null;e.slots["search_"+w]?W=l.createVNode(l.resolveComponent("fs-slot-render"),{slots:e.slots["search_"+w],scope:C(w)},null):B.render?W=l.createVNode(l.resolveComponent("fs-render"),{"render-func":B.render,scope:C(w)},null):B.component&&B.component.show!==!1&&(W=l.createVNode(l.resolveComponent("fs-component-render"),l.mergeProps({ref:q=>{y.value[w]=q},"model-value":p(f,w),onKeyup:q=>{R(B,q)}},B.component,{scope:C(w),"onUpdate:modelValue":S,onInput:T}),null));const Y=g(w);return r.formItem.render({props:{...B,label:B.title,[r.formItem.prop]:Y,path:w,rulePath:w},slots:{default(){return W}}})}const x=l.ref(),{t:v}=Yt(),y=l.ref({});function _(B){return y.value[B]}function b(B){var w;return(w=_(B))==null?void 0:w.getTargetRef()}function D(){return{form:f,validatedForm:e.validatedForm,getComponentRef:b,doSearch:F,doReset:O,doValidate:k}}function C(B){return{...D(),key:B,value:z.get(f,B)}}async function k(B=!1,w="search"){try{return e.validate&&await r.form.validateWrap(x.value),!0}catch(S){return B||t.emit("validate-error",{...D(),error:S,trigger:w}),!1}}async function F(){u&&u.cancel(),await k()&&(h(),await l.nextTick(),t.emit("_search",D()),t.emit("search",D()))}async function O(){const B=c(),w=z.entries(f);for(const S of w){const T=z.get(B,S[0]);T==null?z.unset(f,S[0]):z.set(f,S[0],T)}await k()&&(h(),await l.nextTick(),e.reset&&e.reset(D()),t.emit("_reset",D()),t.emit("reset",D()),e.searchAfterReset&&F())}const X=l.computed(()=>{const B=[],w={search:{show:!0,type:"primary",disabled:!1,click:S=>{F()},order:1,text:v("fs.search.search.text")},reset:{show:!0,disabled:!1,click:S=>{O()},text:v("fs.search.reset.text"),order:2}};n(w,e.buttons);for(let S in w){const T=w[S];T._click=()=>{T.click(D())},B.push(T)}return B.sort((S,T)=>S.order-T.order),B});function j(){var B;if(e.autoSearch!==!1&&e.debounce!==!1){let w=((B=e.debounce)==null?void 0:B.wait)||500;u=z.debounce(F,w,e.debounce)}}j();function I(){return f}function G(){return e.validatedForm}function re(B,w=!0){w||z.each(z.keys(f),S=>{delete f[S]}),a(f,B),h()}const ae=l.ref(!1),oe=()=>{Te.debug("do auto search,inputEventDisabled:",ae.value),ae.value!==!0&&u&&u()},fe=B=>{B.autoSearchTrigger==="input"&&oe()},ke=B=>{ae.value=B,oe()};async function H(B,w){const S=w.key;z.set(f,S,B);const T=e.validateOnChangeSilent;if(w.valueChange){const R=w.key,W=f[R],Y=b(R),q=w.valueChange instanceof Function?w.valueChange:w.valueChange.handle,K=D(),ee={index:0,row:K.form,form:K.form,...K,key:R,value:W,componentRef:Y,immediate:!1,getComponentRef:b,mode:"search"};q(ee)}e.validateOnChange&&await k(T,"change")&&h(),(w.autoSearchTrigger==null||w.autoSearchTrigger===!0||w.autoSearchTrigger==="change")&&oe()}const le=l.computed(()=>e.validate?e.options.rules:[]);return h(),{get:p,ui:r,onValueChanged:H,doValidate:k,doSearch:F,doReset:O,formData:f,componentRenderRefs:y,getComponentRenderRef:_,getComponentRef:b,getForm:I,getValidatedForm:G,setForm:re,searchFormRef:x,onInput:fe,inputEventDisabled:ae,changeInputEventDisabled:ke,computedColumns:d,computedButtons:X,computedRules:le,buildFieldContext:C,getContextFn:D}}}),oD="",xw={class:"fs-search fs-search-v2"},vw={class:"fs-search-buttons"};function ww(e,t,r,n,a,i){const s=l.resolveComponent("fs-button"),o=l.resolveComponent("fs-slot-render");return l.openBlock(),l.createElementBlock("div",xw,[(l.openBlock(),l.createBlock(l.resolveDynamicComponent(e.ui.collapseTransition.name),null,{default:l.withCtx(()=>[(l.openBlock(),l.createBlock(l.resolveDynamicComponent(e.ui.form.name),l.mergeProps({ref:"searchFormRef",model:e.formData,onsubmit:"event.preventDefault();"},e.options,{rules:e.computedRules,class:"fs-search-form",onCompositionstart:t[0]||(t[0]=c=>e.changeInputEventDisabled(!0)),onCompositionend:t[1]||(t[1]=c=>e.changeInputEventDisabled(!1))}),{default:l.withCtx(()=>{var c;return[e.show!==!1?(l.openBlock(),l.createBlock(l.resolveDynamicComponent(((c=e.container)==null?void 0:c.is)||"fs-search-layout-default"),l.mergeProps({key:0},e.container,{columns:e.computedColumns,"get-context-fn":e.getContextFn}),l.createSlots({"search-buttons":l.withCtx(()=>[l.createElementVNode("div",vw,[(l.openBlock(!0),l.createElementBlock(l.Fragment,null,l.renderList(e.computedButtons,(f,u)=>(l.openBlock(),l.createElementBlock(l.Fragment,{key:u},[f.show!==!1?(l.openBlock(),l.createBlock(s,l.mergeProps({key:0,ref_for:!0},f,{onClick:d=>f._click()}),null,16,["onClick"])):l.createCommentVNode("",!0)],64))),128))])]),_:2},[e.slots["search-left"]?{name:"search-left",fn:l.withCtx(()=>[l.createVNode(o,{slots:e.slots["search-left"],scope:e.getContextFn()},null,8,["slots","scope"])]),key:"0"}:void 0,e.slots["search-middle"]?{name:"search-middle",fn:l.withCtx(()=>[l.createVNode(o,{slots:e.slots["search-middle"],scope:e.getContextFn()},null,8,["slots","scope"])]),key:"1"}:void 0,e.slots["search-right"]?{name:"search-right",fn:l.withCtx(()=>[l.createVNode(o,{slots:e.slots["search-right"],scope:e.getContextFn()},null,8,["slots","scope"])]),key:"2"}:void 0]),1040,["columns","get-context-fn"])):l.createCommentVNode("",!0)]}),_:1},16,["model","rules"]))]),_:1}))])}const iu=rt(gw,[["render",ww]]),_w=l.defineComponent({name:"FsSearchV1",components:{FsSearchButtons:au},inheritAttrs:!1,props:{initialForm:{type:Object},options:{type:Object},columns:{type:Object},tabs:{type:Object},buttons:{type:Object},searchAfterReset:{type:Boolean,default:!0},autoSearch:{type:Boolean,default:!0},debounce:{type:[Boolean,Object],default:void 0},slots:{default(){return{}}},show:{type:Boolean,default:!0},validate:{default:!1},layout:{type:String,default:"single-line"},col:{},collapse:{type:Boolean,default:!1}},emits:["search","reset","collapse","update:collapse"],setup(e,t){const{ui:r}=de.useUi();l.onMounted(()=>{if(H.value&&re.value){ae.value=re.value.$el.offsetHeight;const B=re.value.$el.children;B&&B.length>1&&(oe.value=B[1].offsetHeight+2)}});let n=null;function a(){return z.cloneDeep(e.initialForm||{})}const i=l.reactive(a()),{doComputed:s,AsyncComputeValue:o}=Gr();z.each(e.columns,B=>{B.value!=null&&B.value instanceof o&&Te.warn("search.value配置不支持AsyncCompute类型的动态计算")});const{merge:c}=Ze(),f=c,u=s(()=>e.columns,x,null,B=>{e.validate||z.forEach(B,T=>{delete T.rules}),e.col&&z.forEach(B,T=>{T.col=c({},e.col,T.col)});let w=[];z.forEach(B,(T,R)=>{T._key=R,w.push(T)}),w=z.sortBy(w,T=>T.order??Mn.orderDefault);const S={};return w.forEach(T=>{let R=T._key;delete T._key,S[R]=T}),S});z.forEach(u.value,(B,w)=>{var T;if(B.value===void 0)return;const S=l.unref(B.value);S!==void 0&&B.show!==!1&&((T=B.component)==null?void 0:T.show)!==!1&&(i[w]=S)});const d=l.ref(),{t:h}=Yt(),p=l.ref({});function g(B){return p.value[B]}function m(B){var w,S;return(S=(w=g(B))==null?void 0:w.$refs)==null?void 0:S.targetRef}function x(){return{form:i,validatedForm:i,getComponentRef:m,doValidate:null}}const v=l.ref(x());async function y(){if(n&&n.cancel(),await r.form.validateWrap(d.value))t.emit("search",v.value);else return r.message.error({message:h("fs.search.error.message")}),!1}function _(){const B=a(),w=z.entries(i);for(const S of w){const T=z.get(B,S[0]);T==null?z.unset(i,S[0]):z.set(i,S[0],T)}e.reset&&e.reset(v.value),t.emit("reset",x()),e.searchAfterReset&&l.nextTick(()=>{y()})}const b=l.computed(()=>{const B=[],w={search:{show:!0,type:"primary",disabled:!1,click:S=>{y()},order:1,text:h("fs.search.search.text")},reset:{show:!0,disabled:!1,click:S=>{_()},text:h("fs.search.reset.text"),order:2}};c(w,e.buttons);for(let S in w){const T=w[S];T._click=()=>{T.click(x())},B.push(T)}return B.sort((S,T)=>S.order-T.order),B});function D(){var B;if(e.autoSearch!==!1&&e.debounce!==!1){let w=((B=e.debounce)==null?void 0:B.wait)||500;n=z.debounce(y,w,e.debounce)}}D();function C(){return i}function k(B,w=!0){w||z.each(z.keys(i),S=>{delete i[S]}),f(i,B)}const F=l.ref(!1),O=()=>{Te.debug("do auto search,inputEventDisabled:",F.value),F.value!==!0&&n&&n()},X=B=>{B.autoSearchTrigger==="input"&&O()},j=B=>{F.value=B,O()};function I(B,w){const S=w.key;if(z.set(i,S,B),w.valueChange){const T=w.key,R=i[T],W=m(T);(w.valueChange instanceof Function?w.valueChange:w.valueChange.handle)({key:T,value:R,componentRef:W,...x(),immidiate:!1})}(w.autoSearchTrigger==null||w.autoSearchTrigger===!0||w.autoSearchTrigger==="change")&&O()}const G=l.computed(()=>e.validate?e.options.rules:[]),re=l.ref(),ae=l.ref(0),oe=l.ref(0),fe=()=>{t.emit("update:collapse",!e.collapse),t.emit("collapse",!e.collapse)},ke=l.computed(()=>e.layout==="multi-line"?r.col.name:"div"),H=l.computed(()=>e.layout==="multi-line"),le=l.computed(()=>H.value?e.collapse?oe.value?oe.value+"px":"":ae.value?ae.value+"px":"":"auto");return{get:(B,w)=>z.get(B,w),ui:r,onValueChanged:I,doSearch:y,doReset:_,form:i,componentRenderRefs:p,getComponentRenderRef:g,getComponentRef:m,getForm:C,setForm:k,searchFormRef:d,onInput:X,inputEventDisabled:F,changeInputEventDisabled:j,computedColumns:u,computedButtons:b,computedRules:G,columnsRowRef:re,computedColumnBoxHeight:le,computedColName:ke,computedIsMultiLine:H,toggleCollapse:fe,searchEventContextRef:v}}}),lD="",yw={class:"fs-search-box"},kw={class:"fs-search-main"},Ew={key:0,class:"fs-search-col"},bw={key:1,class:"fs-search-col fs-search-middle"},Sw={key:3,class:"fs-search-col fs-search-right"},Tw={key:0,class:"fs-search-action"};function Cw(e,t,r,n,a,i){const s=l.resolveComponent("fs-slot-render"),o=l.resolveComponent("fs-component-render"),c=l.resolveComponent("fs-search-buttons"),f=l.resolveComponent("fs-button");return l.openBlock(),l.createBlock(l.resolveDynamicComponent(e.ui.collapseTransition.name),null,{default:l.withCtx(()=>[e.show!==!1?(l.openBlock(),l.createElementBlock("div",{key:0,class:l.normalizeClass(["fs-search",{"fs-search-multi-line":e.computedIsMultiLine}])},[(l.openBlock(),l.createBlock(l.resolveDynamicComponent(e.ui.form.name),l.mergeProps({ref:"searchFormRef",model:e.form},e.options,{rules:e.computedRules,class:"fs-search-form",onCompositionstart:t[0]||(t[0]=u=>e.changeInputEventDisabled(!0)),onCompositionend:t[1]||(t[1]=u=>e.changeInputEventDisabled(!1))}),{default:l.withCtx(()=>[l.createElementVNode("div",yw,[l.createElementVNode("div",kw,[l.createElementVNode("div",{class:l.normalizeClass(["fs-search-columns",{"fs-search-collapse":e.collapse}]),style:l.normalizeStyle({height:e.computedColumnBoxHeight})},[(l.openBlock(),l.createBlock(l.resolveDynamicComponent(e.ui.row.name),{ref:"columnsRowRef"},{default:l.withCtx(()=>[e.slots["search-left"]?(l.openBlock(),l.createElementBlock("div",Ew,[(l.openBlock(),l.createBlock(l.resolveDynamicComponent(e.ui.formItem.name),null,{default:l.withCtx(()=>[l.createVNode(s,{slots:e.slots["search-left"],scope:e.searchEventContextRef},null,8,["slots","scope"])]),_:1}))])):l.createCommentVNode("",!0),(l.openBlock(!0),l.createElementBlock(l.Fragment,null,l.renderList(e.computedColumns,(u,d)=>(l.openBlock(),l.createElementBlock(l.Fragment,{key:d},[u.show===!0?(l.openBlock(),l.createBlock(l.resolveDynamicComponent(e.computedColName),l.mergeProps({key:0,class:"fs-search-col",ref_for:!0},u.col),{default:l.withCtx(()=>[(l.openBlock(),l.createBlock(l.resolveDynamicComponent(e.ui.formItem.name),l.mergeProps({ref_for:!0},u,{[e.ui.formItem.prop||""]:d,label:u.title}),{default:l.withCtx(()=>[e.slots["search_"+d]?(l.openBlock(),l.createBlock(s,{key:0,slots:e.slots["search_"+d],scope:{...e.searchEventContextRef,key:d}},null,8,["slots","scope"])):(l.openBlock(),l.createElementBlock(l.Fragment,{key:1},[u.component&&u.component.show!==!1?(l.openBlock(),l.createBlock(o,l.mergeProps({key:0,ref_for:!0,ref:h=>{h&&(e.componentRenderRefs[u.key]=h)},"model-value":e.get(e.form,d)},u.component,{scope:e.searchEventContextRef,"onUpdate:modelValue":h=>e.onValueChanged(h,u),onInput:h=>e.onInput(u)}),null,16,["model-value","scope","onUpdate:modelValue","onInput"])):l.createCommentVNode("",!0)],64))]),_:2},1040,["label"]))]),_:2},1040)):l.createCommentVNode("",!0)],64))),128)),e.slots["search-middle"]?(l.openBlock(),l.createElementBlock("div",bw,[(l.openBlock(),l.createBlock(l.resolveDynamicComponent(e.ui.formItem.name),null,{default:l.withCtx(()=>[l.createVNode(s,{slots:e.slots["search-middle"],scope:e.searchEventContextRef},null,8,["slots","scope"])]),_:1}))])):l.createCommentVNode("",!0),e.computedIsMultiLine?l.createCommentVNode("",!0):(l.openBlock(),l.createBlock(c,{key:2,buttons:e.computedButtons},null,8,["buttons"])),e.slots["search-right"]?(l.openBlock(),l.createElementBlock("div",Sw,[(l.openBlock(),l.createBlock(l.resolveDynamicComponent(e.ui.formItem.name),null,{default:l.withCtx(()=>[l.createVNode(s,{slots:e.slots["search-right"],scope:e.searchEventContextRef},null,8,["slots","scope"])]),_:1}))])):l.createCommentVNode("",!0)]),_:1},512))],6),e.computedIsMultiLine?(l.openBlock(),l.createBlock(c,{key:0,buttons:e.computedButtons},null,8,["buttons"])):l.createCommentVNode("",!0)]),e.computedIsMultiLine?(l.openBlock(),l.createElementBlock("div",Tw,[(l.openBlock(),l.createBlock(l.resolveDynamicComponent(e.ui.formItem.name),null,{default:l.withCtx(()=>[l.createVNode(f,{icon:e.collapse?e.ui.icons.caretUp:e.ui.icons.caretDown,onClick:e.toggleCollapse},null,8,["icon","onClick"])]),_:1}))])):l.createCommentVNode("",!0)])]),_:1},16,["model","rules"]))],2)):l.createCommentVNode("",!0)]),_:1})}const su=rt(_w,[["render",Cw]]),Fw=l.defineComponent({name:"FsSearchLayoutDefault",props:{collapse:{type:Boolean,default:!0},collapseButton:{type:Object},action:{type:Object},layout:{type:String,default:"single-line"},columns:{type:Object},col:{type:Object},getContextFn:{type:Function}},emits:["update:collapse","collapse"],setup(e,t){const{ui:r}=de.useUi(),{t:n}=Yt(),a=l.ref(),i=l.computed(()=>e.layout==="multi-line");l.onMounted(()=>{i.value&&a.value&&(o.value=a.value.$el.offsetHeight)});const s=l.computed(()=>!i.value||!e.collapse?"auto":o.value?o.value+"px":""),o=l.ref(0),c=()=>{t.emit("update:collapse",!e.collapse),t.emit("collapse",!e.collapse)};function f(u){return z.merge({},e.col,u)}return{ui:r,columnsRowRef:a,computedColumnBoxHeight:s,computedIsMultiLine:i,toggleCollapse:c,mergeCol:f,t:n}}}),cD="",Aw={class:"fs-search-box"},Dw={class:"fs-search-col fs-search-slot"},Rw={class:"fs-search-col fs-search-slot"},Ow={class:"fs-search-col fs-search-slot"},Bw={key:0,class:"fs-search-buttons-group fs-search-multi-line-buttons"};function Nw(e,t,r,n,a,i){var c;const s=l.resolveComponent("fs-render"),o=l.resolveComponent("fs-button");return l.openBlock(),l.createElementBlock("div",{class:l.normalizeClass(["fs-search-layout-default",{"fs-search-multi-line":e.computedIsMultiLine}])},[l.createElementVNode("div",Aw,[l.createElementVNode("div",{class:l.normalizeClass(["fs-search-main",{"fs-search-collapse":e.collapse}]),style:l.normalizeStyle({maxHeight:e.computedColumnBoxHeight})},[(l.openBlock(),l.createBlock(l.resolveDynamicComponent(e.ui.row.name),{ref:"columnsRowRef",class:"fs-search-columns"},{default:l.withCtx(()=>{var f;return[l.createElementVNode("span",Dw,[l.renderSlot(e.$slots,"search-left")]),(l.openBlock(!0),l.createElementBlock(l.Fragment,null,l.renderList(e.columns,(u,d)=>(l.openBlock(),l.createElementBlock(l.Fragment,{key:d},[u.show?(l.openBlock(),l.createBlock(l.resolveDynamicComponent(e.ui.col.name),l.mergeProps({key:0,class:"fs-search-col",ref_for:!0},e.mergeCol(u.col)),{default:l.withCtx(()=>[l.createVNode(s,{"render-func":u._cellRender,scope:e.getContextFn()},null,8,["render-func","scope"])]),_:2},1040)):l.createCommentVNode("",!0)],64))),128)),l.createElementVNode("span",Rw,[l.renderSlot(e.$slots,"search-middle")]),e.computedIsMultiLine?l.createCommentVNode("",!0):(l.openBlock(),l.createBlock(l.resolveDynamicComponent(e.ui.col.name),l.mergeProps({key:0,class:"fs-search-col fs-search-buttons-group"},e.mergeCol((f=e.action)==null?void 0:f.col)),{default:l.withCtx(()=>{var u;return[(l.openBlock(),l.createBlock(l.resolveDynamicComponent(e.ui.formItem.name),l.normalizeProps({[e.ui.formItem.label||""]:(u=e.action)==null?void 0:u.label}),{default:l.withCtx(()=>[l.renderSlot(e.$slots,"search-buttons",l.normalizeProps(l.guardReactiveProps(e.getContextFn())))]),_:3},16))]}),_:3},16)),l.createElementVNode("span",Ow,[l.renderSlot(e.$slots,"search-right",l.normalizeProps(l.guardReactiveProps(e.getContextFn())))])]}),_:3},512))],6),e.computedIsMultiLine?(l.openBlock(),l.createElementBlock("div",Bw,[l.renderSlot(e.$slots,"search-buttons"),((c=e.collapseButton)==null?void 0:c.show)!==!1?(l.openBlock(),l.createBlock(o,l.mergeProps({key:0,icon:e.collapse?e.ui.icons.caretUp:e.ui.icons.caretDown,text:e.collapse?e.t("fs.search.container.collapseButton.text.expand"):e.t("fs.search.container.collapseButton.text.collapse")},e.collapseButton,{onClick:e.toggleCollapse}),null,16,["icon","text","onClick"])):l.createCommentVNode("",!0)])):l.createCommentVNode("",!0)])],2)}const ou=rt(Fw,[["render",Nw]]),Iw={class:"fs-tabs-filter"},Pw=l.defineComponent({name:"FsTabsFilter",inheritAttrs:!1}),lu=l.defineComponent({...Pw,props:{name:{},show:{type:Boolean,default:!1},defaultOption:{default:void 0},options:{default:()=>[]},modelValue:{},value:{default:"value"},label:{default:"label"}},emits:["update:modelValue","change"],setup(e,{emit:t}){const r=l.useAttrs(),{merge:n}=Ze(),a=e,i=l.computed(()=>n({show:!0,value:null,label:"全部"},a.defaultOption||{})),s="_default_key_",o=l.computed(()=>{const p=a.modelValue==null||a.modelValue===i.value.value?s:a.modelValue;return{type:"card",...r,[h.tabs.modelValue]:p,["onUpdate:"+h.tabs.modelValue]:f}}),c=t;function f(p){s===p&&(p=i.value.value);const g=a.modelValue;c("update:modelValue",p),g!==p&&c("change",p)}function u(p){return p[a.value]}function d(p){return p[a.label]}const{ui:h}=de.useUi();return(p,g)=>(l.openBlock(),l.createElementBlock("div",Iw,[(l.openBlock(),l.createBlock(l.resolveDynamicComponent(l.unref(h).tabs.name),l.normalizeProps(l.guardReactiveProps(o.value)),{default:l.withCtx(()=>[i.value.show?(l.openBlock(),l.createBlock(l.resolveDynamicComponent(l.unref(h).tabPane.name),l.normalizeProps({key:0,[l.unref(h).tabPane.key||""]:s,[l.unref(h).tabPane.tab||""]:i.value.label}),null,16)):l.createCommentVNode("",!0),(l.openBlock(!0),l.createElementBlock(l.Fragment,null,l.renderList(p.options,(m,x)=>(l.openBlock(),l.createBlock(l.resolveDynamicComponent(l.unref(h).tabPane.name),l.normalizeProps({key:x,[l.unref(h).tabPane.key||""]:u(m),[l.unref(h).tabPane.tab||""]:d(m)}),null,16))),128))]),_:1},16))]))}}),fD="",Lw=l.defineComponent({name:"FsDictRadio",props:{dict:{},options:{type:Array},radioName:{},optionName:{type:String},optionProps:{type:Object,default(){return{}}},transformDictData:{type:Function,default:void 0}},emits:["dict-change","selected-change","change"],setup(e,t){const{ui:r}=de.useUi();e.radioName&&console.warn("参数radioName即将废弃，请改成optionName");const n=l.computed(()=>e.optionName??e.radioName??r.radio.name);let a=Sn(e,t,r.radioGroup.modelValue);const i=a.createComputedOptions();return{ui:r,computedRadioName:n,...a,computedOptions:i,onSelectedChange:o=>{t.emit("change",o),o&&o.target&&(o=o.target.value);const c=a.getDict();if(c&&c.dataMap&&c.dataMap[o]){const f=c.dataMap[o];t.emit("selected-change",f)}else t.emit("selected-change",null)}}}});function Mw(e,t,r,n,a,i){return l.openBlock(),l.createBlock(l.resolveDynamicComponent(e.ui.radioGroup.name),{onChange:e.onSelectedChange},{default:l.withCtx(()=>[(l.openBlock(!0),l.createElementBlock(l.Fragment,null,l.renderList(e.computedOptions,s=>(l.openBlock(),l.createBlock(l.resolveDynamicComponent(e.computedRadioName),l.mergeProps({ref_for:!0,ref:"radioRef",key:e.getValue(s),[e.ui.radio.value||""]:e.getValue(s)},e.optionProps),{default:l.withCtx(()=>[l.createTextVNode(l.toDisplayString(e.getLabel(s)),1)]),_:2},1040))),128))]),_:1},40,["onChange"])}const cu=rt(Lw,[["render",Mw]]),fu=l.defineComponent({name:"FsDictSelect",props:{dict:{},options:{type:Array},placeholder:{type:String},slots:{},renderLabel:{type:Function},transformDictData:{type:Function,default:void 0}},emits:["dict-change","selected-change","change"],setup(e,t){const{t:r}=Yt(),n=l.computed(()=>e.placeholder||r("fs.component.select.placeholder")),{ui:a}=de.useUi(),i=Sn(e,t,a.select.modelValue),s=i.createComputedOptions();return{computedPlaceholder:n,...i,computedOptions:s,onSelectedChange:c=>{t.emit("change",c);const f=i.getDict();if(c&&Array.isArray(c)&&c.length>0){const u=[];for(const d of c)f&&f.dataMap&&f.dataMap[d]&&u.push(f.dataMap[d]);t.emit("selected-change",u);return}if(f&&f.dataMap&&f.dataMap[c]){const u=f.dataMap[c];t.emit("selected-change",u)}else t.emit("selected-change",null)}}},render(){const{ui:e}=de.useUi(),t=l.resolveDynamicComponent(e.select.name),r=e.select.modelValue;if(e.option.name==null){const s=this.computedOptions||[],o={[`onUpdate:${r}`]:c=>{this.$emit(`onUpdate:${r}`,c),this.onSelectedChange(c)}};return l.createVNode(t,l.mergeProps({ref:"selectRef",placeholder:this.computedPlaceholder,options:s,renderLabel:this.renderLabel},o),null)}const n=[],a=l.resolveDynamicComponent(e.option.name),i=this.computedOptions||[];for(const s of i){const o=l.createVNode(a,l.mergeProps(s,{value:this.getValue(s),label:this.getLabel(s)}),{default:()=>[this.renderLabel?this.renderLabel(s):this.getLabel(s)]});n.push(o)}return l.createVNode(t,{ref:"selectRef",placeholder:this.computedPlaceholder,onChange:this.onSelectedChange},{default:()=>[n],...this.slots})}});function Vw(e){if(e==null)return 0;typeof e!="string"&&(e=JSON.stringify(e));let t=0,r,n,a;if(e.length===0)return t;for(r=0,a=e.length;r<a;r++)n=e.charCodeAt(r),t=(t<<5)-t+n,t|=0;return t}function Uw(e){let t=[];return typeof e.modelValue=="string"&&e.multiple&&e.separator!=null&&e.separator!==""?t=e.modelValue.split(e.separator):e.modelValue instanceof Array?t=e.modelValue:t=[e.modelValue],t}const $w=l.defineComponent({name:"FsValuesFormat",props:{modelValue:{},dict:{},multiple:{default:!0},separator:{default:","},color:{},effect:{},autoColors:{type:Array},autoEffects:{type:Array},type:{default:"tag"},valueType:{type:String},defaultLabel:{},labelFormatter:{type:Function},itemRender:{type:Function},closable:{type:Boolean,default:!1}},emits:["click","dict-change","close","update:modelValue"],setup(e,t){const{ui:r}=de.useUi(),n=r.tag.colors,a=["plain","light"],i=Sn(e,t),{getColor:s,getValue:o,removePropValue:c}=i;i.watchValue();function f(p,g){!g.effect&&p.effect&&(g.effect=p.effect);const m=r.tag.type,x=s(g);if(x!=null){if(typeof x!="string")return;c(g,"color"),g[m]=x;return}if(p.color==="auto"){const v=Vw(o(g)),y=p.autoColors?p.autoColors:n;g[m]=y[v%y.length];const _=p.autoEffects?p.autoEffects:a;g.effect=_[Math.floor(v/y.length)%_.length]}else g[m]=p.color}const u=l.computed(()=>{var _,b;if(e.valueType==="object")return e.modelValue&&!Array.isArray(e.modelValue)?[e.modelValue]:e.modelValue;const p=i.getDict();if(e.modelValue==null||e.modelValue==="")return[];const g=Uw(e);let m=[];const x=((_=e.dict)==null?void 0:_.value)||"value",v=((b=e.dict)==null?void 0:b.label)||"label";p?(m=p.getNodesFromDataMap(g),z.forEach(m,D=>{D[v]==null&&(D[v]=e.defaultLabel||D[x])})):(m=[],z.forEach(g,D=>{D instanceof Object?m.push(D):m.push({[x]:D,[v]:D})}));const y=[];return z.forEach(m,D=>{y.push(z.omit(D,"children"))}),z.forEach(y,D=>{f(e,D)}),y});function d(p){t.emit("click",{item:p})}function h(p,g){t.emit("close",{item:g,index:p});const m=[];for(let x=0;x<u.value.length;x++)x!==p&&m.push(o(u.value[x]));t.emit("update:modelValue",m)}return{ui:r,...i,doClick:d,computedValueItems:u,doClose:h}}}),uD="",Ww={class:"fs-values-format"},Hw=["onClick"];function jw(e,t,r,n,a,i){const s=l.resolveComponent("fs-render"),o=l.resolveComponent("fs-icon");return l.openBlock(),l.createElementBlock("span",Ww,[e.itemRender?(l.openBlock(!0),l.createElementBlock(l.Fragment,{key:0},l.renderList(e.computedValueItems,c=>(l.openBlock(),l.createBlock(s,{key:e.getValue(c),"render-func":e.itemRender,scope:c},null,8,["render-func","scope"]))),128)):e.type==="text"?(l.openBlock(!0),l.createElementBlock(l.Fragment,{key:1},l.renderList(e.computedValueItems,c=>(l.openBlock(),l.createElementBlock("span",{key:e.getValue(c),onClick:f=>e.doClick(c)},l.toDisplayString(e.getLabel(c)),9,Hw))),128)):(l.openBlock(!0),l.createElementBlock(l.Fragment,{key:2},l.renderList(e.computedValueItems,(c,f)=>(l.openBlock(),l.createBlock(l.resolveDynamicComponent(e.ui.tag.name),l.mergeProps({key:e.getValue(c),class:"fs-tag",size:"small",closable:e.closable,ref_for:!0},c,{icon:null,name:null,onClose:u=>e.doClose(f,c),onClick:u=>e.doClick(c)}),{default:l.withCtx(()=>[c.icon?(l.openBlock(),l.createBlock(o,{key:0,icon:c.icon,spin:c.iconSpin,class:"fs-tag-icon"},null,8,["icon","spin"])):l.createCommentVNode("",!0),l.createTextVNode(" "+l.toDisplayString(e.getLabel(c)),1)]),_:2},1040,["closable","onClose","onClick"]))),128))])}const uu=rt($w,[["render",jw]]),zw=l.defineComponent({name:"FsDictCascaderFormat",props:{modelValue:{type:[String,Array],default:void 0,require:!0},separator:{type:String,default:",",require:!1},multiple:{type:Boolean,default:!1},dict:{type:Object,default:void 0,require:!1}},emits:["dict-change"],setup(e,t){var a;const r=Sn(e,t);(a=e.dict)!=null&&a.getNodesByValues&&r.watchValue();const n=l.computed(()=>e.multiple);return{...r,computedMultiple:n}},data(){return{}},computed:{labels(){return this.modelValue==null?[]:this.buildValueItem(this.modelValue)},multipleLabels(){if(this.modelValue==null)return[];const e=[];for(const t of this.modelValue)e.push(this.buildValueItem(t));return e}},methods:{getValueArr(e){if(e==null)if(this.multiple){e=[];for(const r of this.modelValue)for(const n of r)e.push(n)}else e=this.modelValue;if(e==null)return[];let t=null;return typeof e=="string"&&!this.multiple&&this.separator!=null&&this.separator!==""?t=e.split(this.separator):e instanceof Array?t=e:t=[e],t},buildValueItem(e){const t=this.getValueArr(e),r=this.getDict();if(r)return r.getNodesFromDataMap(t)}}}),Gw={key:0},Xw={key:0};function Kw(e,t,r,n,a,i){return l.openBlock(),l.createElementBlock("span",null,[e.computedMultiple?(l.openBlock(!0),l.createElementBlock(l.Fragment,{key:0},l.renderList(e.multipleLabels,(s,o)=>(l.openBlock(),l.createElementBlock("div",{key:o},[(l.openBlock(!0),l.createElementBlock(l.Fragment,null,l.renderList(s,(c,f)=>(l.openBlock(),l.createElementBlock("span",{key:f},[f!==0?(l.openBlock(),l.createElementBlock("span",Gw," / ")):l.createCommentVNode("",!0),l.createElementVNode("span",null,l.toDisplayString(e.getLabel(c)),1)]))),128))]))),128)):(l.openBlock(!0),l.createElementBlock(l.Fragment,{key:1},l.renderList(e.labels,(s,o)=>(l.openBlock(),l.createElementBlock("span",{key:o},[o!==0?(l.openBlock(),l.createElementBlock("span",Xw," / ")):l.createCommentVNode("",!0),l.createElementVNode("span",null,l.toDisplayString(e.getLabel(s)),1)]))),128))])}const du=rt(zw,[["render",Kw]]),Yw=l.defineComponent({name:"FsDictCascader",props:{dict:{},options:{type:Array},transformDictData:{type:Function,default:void 0}},emits:["dict-change","selected-change","change"],setup(e,t){const r=Sn(e,t),{ui:n}=de.useUi(),a=l.ref();e.dict&&(a.value=n.cascader.fieldNames({value:e.dict.value,label:e.dict.label,children:e.dict.children}));const i=r.createComputedOptions();function s(o){if(t.emit("change",o),o){let c=[];const f=r.getDict();if(f&&f.dataMap){for(let u of o){const d=f.dataMap[u];d&&c.push(d)}t.emit("selected-change",c)}}else t.emit("selected-change",null)}return{ui:n,...r,fieldNamesBinder:a,computedOptions:i,onSelectChange:s}}});function qw(e,t,r,n,a,i){return l.openBlock(),l.createBlock(l.resolveDynamicComponent(e.ui.cascader.name),l.mergeProps({ref:"cascaderRef",options:e.computedOptions},e.fieldNamesBinder,{onChange:e.onSelectChange}),null,16,["options","onChange"])}const hu=rt(Yw,[["render",qw]]),Jw=l.defineComponent({name:"FsDictCheckbox",props:{dict:{},options:{type:Array,default:void 0,require:!1},optionName:{type:String},optionProps:{type:Object,default(){return{}}},transformDictData:{type:Function,default:void 0}},emits:["dict-change","selected-change","change"],setup(e,t){const{ui:r}=de.useUi();let n=Sn(e,t,r.checkboxGroup.modelValue);const a=n.createComputedOptions();return{ui:r,...n,computedOptions:a,onSelectedChange:s=>{if(t.emit("change",s),s){let o=[];const c=n.getDict();if(c&&c.dataMap){for(let f of s){const u=c.dataMap[f];u&&o.push(u)}t.emit("selected-change",o)}}else t.emit("selected-change",null)}}}});function Zw(e,t,r,n,a,i){return l.openBlock(),l.createBlock(l.resolveDynamicComponent(e.ui.checkboxGroup.name),{onChange:e.onSelectedChange},{default:l.withCtx(()=>[(l.openBlock(!0),l.createElementBlock(l.Fragment,null,l.renderList(e.computedOptions,s=>(l.openBlock(),l.createBlock(l.resolveDynamicComponent(e.optionName||e.ui.checkbox.name),l.mergeProps({ref_for:!0,ref:"checkboxRef",key:e.getValue(s),[e.ui.checkbox.value||""]:e.getValue(s)},e.optionProps),{default:l.withCtx(()=>[l.createTextVNode(l.toDisplayString(e.getLabel(s)),1)]),_:2},1040))),128))]),_:1},40,["onChange"])}const mu=rt(Jw,[["render",Zw]]),Qw=l.defineComponent({name:"FsDictSwitch",props:{dict:{type:Object},options:{},transformDictData:{type:Function,default:void 0}},emits:["dict-change"],setup(e,t){const{ui:r}=de.useUi();let n=Sn(e,t,r.switch.modelValue);const a=n.createComputedOptions();return{ui:r,...n,computedOptions:a}},computed:{_active(){return this.computedOptions.length>0?this.computedOptions[0]:{}},_inActive(){return this.computedOptions.length>1?this.computedOptions[1]:{}},binding(){var t,r,n,a,i,s;const e=de.uiContext.get();return{[e.switch.activeText]:this._active[((t=this.dict)==null?void 0:t.label)||"label"],[e.switch.inactiveText]:this._inActive[((r=this.dict)==null?void 0:r.label)||"label"],[e.switch.activeColor]:this._active[((n=this.dict)==null?void 0:n.color)||"color"],[e.switch.inactiveColor]:this._inActive[((a=this.dict)==null?void 0:a.color)||"color"],[e.switch.activeValue]:this._active[((i=this.dict)==null?void 0:i.value)||"value"],[e.switch.inactiveValue]:this._inActive[((s=this.dict)==null?void 0:s.value)||"value"]}}}});function e2(e,t,r,n,a,i){return l.openBlock(),l.createBlock(l.resolveDynamicComponent(e.ui.switch.name),l.mergeProps({ref:"switchRef"},e.binding),null,16)}const pu=rt(Qw,[["render",e2]]),t2=l.defineComponent({name:"FsDateFormat",props:{modelValue:{required:!1},valueFormat:{type:String,default:void 0,required:!1},format:{type:String,default:"YYYY-MM-DD HH:mm:ss",required:!1}},data(){return{item:{}}},computed:{doFormat(){if(this.modelValue==null||this.modelValue==="")return"";let e=null;return this.valueFormat!=null?e=Vt(this.modelValue,this.valueFormat):e=Vt(this.modelValue),e.format(this.format)}},created(){},methods:{}});function r2(e,t,r,n,a,i){return l.openBlock(),l.createElementBlock("span",null,l.toDisplayString(e.doFormat),1)}const gu=rt(t2,[["render",r2]]),n2=l.defineComponent({name:"FsDictTree",components:{},props:{dict:{},options:{type:Array},placeholder:{type:String},transformDictData:{type:Function,default:void 0}},emits:["dict-change","selected-change","change"],setup(e,t){const{t:r}=Yt(),{ui:n}=de.useUi(),a=l.computed(()=>e.placeholder||r("fs.component.select.placeholder"));let i=Sn(e,t);const s=t.slots,o=i.createComputedOptions(),c=l.computed(()=>{const d=i.getDict();return n.treeSelect.buildOptionKeysNameBinding({label:d.label,value:d.value,children:d.children})}),f=d=>{if(t.emit("change",d),d){const h=i.getDict();if(h&&h.dataMap)if(d instanceof Array){let p=[];for(let g of d){const m=h.dataMap[g];m&&p.push(m)}t.emit("selected-change",p)}else t.emit("selected-change",h.dataMap[d])}else t.emit("selected-change",null)},u=l.ref();return{ui:n,computedBinding:c,computedPlaceholder:a,...i,computedOptions:o,onSelectedChange:f,slots:s,treeRef:u}}});function a2(e,t,r,n,a,i){const s=l.resolveComponent("fs-slot-render");return l.openBlock(),l.createBlock(l.resolveDynamicComponent(e.ui.treeSelect.name),l.mergeProps({ref:"treeRef",[e.ui.treeSelect.options||""]:e.computedOptions,placeholder:e.computedPlaceholder},e.computedBinding,{onChange:e.onSelectedChange}),l.createSlots({_:2},[l.renderList(e.slots,(o,c)=>({name:c,fn:l.withCtx(f=>[l.createVNode(s,{slots:o,scope:f},null,8,["slots","scope"])])}))]),1040,["placeholder","onChange"])}const xu=rt(n2,[["render",a2]]),i2={class:"fs-table-select"},s2={key:0,class:"fs-table-select-current"},vu=l.defineComponent({__name:"fs-table-select",props:{modelValue:{},createCrudOptions:{},crudOptionsOverride:{default:void 0},beforeOpen:{},dict:{},select:{default:void 0},showSelect:{type:Boolean,default:!0},dialog:{default:void 0},showCurrent:{type:Boolean,default:!0},valuesFormat:{default:void 0},height:{default:void 0},multiple:{type:Boolean},crossPage:{type:Boolean,default:!0},rowKey:{default:void 0},disabled:{type:Boolean,default:!1},readonly:{type:Boolean,default:!1},valueType:{default:"value"},viewMode:{type:Boolean,default:!1},destroyOnClose:{type:Boolean,default:!0}},emits:["change","update:modelValue","selected-change","dialog-close","dialog-closed"],setup(e,{expose:t,emit:r}){const n=e,a=l.useSlots(),i=r,{ui:s}=de.useUi(),{t:o}=Yt(),c=l.ref(),f=l.ref(),u=l.ref(!1),{crudRef:d,crudBinding:h,context:p}=Nf();function g(I){I==null||Array.isArray(I)&&I.length==0?b.value=[]:(n.multiple?b.value=I||[]:b.value=[I],n.valueType==="object"&&(b.value=b.value.map(G=>n.dict.getValue(G))))}const{crudExpose:m}=As({crudRef:d,crudBinding:h}),x=async I=>{var re,ae;if(n.disabled||n.readonly||(re=n.select)!=null&&re.disabled||(ae=n.select)!=null&&ae.readonly)return;if(n.dict==null)throw new Error("必须配置dict，且必须配置dict.getNodesByValues");const G=await Bf({crudBinding:h,crudRef:d,createCrudOptions:n.createCrudOptions,crudOptionsOverride:k(),context:p,crudExpose:m});return u.value=!0,g(n.modelValue),n.beforeOpen&&await n.beforeOpen({crudOptions:I.crudOptions,...X()}),I&&G.appendCrudOptions(I.crudOptions),await l.nextTick(),await m.doRefresh(),G},v=l.computed(()=>({...n.valuesFormat})),y=l.computed(()=>{const I=`onUpdate:${s.select.modelValue}`;let G=n.modelValue;return n.valueType==="object"&&n.modelValue&&(n.multiple?G=n.modelValue.map(re=>n.dict.getValue(re)):G=n.dict.getValue(n.modelValue)),{[s.select.modelValue]:G,[I]:re=>{i("update:modelValue",re)},[s.select.clearable]:!0,...s.select.buildMultiBinding(n.multiple),show:!1,...n.select}}),_=l.computed(()=>{const I=s.dialog.buildProps({title:n.viewMode?o("fs.extends.tableSelect.view"):o("fs.extends.tableSelect.select"),width:"80%"});return F(I,n.dialog)});l.watch(()=>n.modelValue,async I=>{I!==b.value&&(g(I),await l.nextTick(),await n.dict.appendByValues(b.value))});const b=l.ref([]);function D(){return n.rowKey||h.value.table.rowKey||"id"}const C=l.ref(!1);function k(){let I=s.table.buildSelectionCrudOptions({crossPage:n.crossPage,selectOnClickRow:!0,getRowKey:D,getPageData(){return h.value.data},useCompute:Gr,multiple:n.multiple,selectedRowKeys:b,onSelectedKeysChanged:async re=>{b.value=[...re],await l.nextTick(),await n.dict.appendByValues(b.value)}});return F({table:{async onRefreshed(){if(s.table.setSelectedRows){C.value=!0,await l.nextTick(),await l.nextTick();const re=m.getBaseTableRef();s.table.setSelectedRows({getRowKey:D,multiple:n.multiple,tableRef:re,selectedRowKeys:b}),C.value=!1}}}},I,n.crudOptionsOverride)}const{merge:F}=Ze();async function O(){var ae;if(n.dict.loading)return;let I=null,G=null;((ae=b.value)==null?void 0:ae.length)>0&&(I=[...b.value],G=I.map(oe=>n.dict.getDictMap()[oe]),n.valueType==="object"&&(I=G),n.multiple!==!0&&I.length>0&&(I=I[0])),n.viewMode||(i("update:modelValue",I),i("change",I),i("selected-change",G)),u.value=!1;let re={value:I,rows:G,selectedRowKeys:b.value};i("dialog-close",re),await l.nextTick(),i("dialog-closed",re)}const X=()=>({opened:u,open:x,selectedRowKeys:b,dictSelectRef:c,valuesFormatRef:f,crudRef:d,crudBinding:h,crudExpose:m}),j=l.ref(X());return t(j.value),(I,G)=>{var fe;const re=l.resolveComponent("fs-dict-select"),ae=l.resolveComponent("fs-values-format"),oe=l.resolveComponent("fs-crud");return l.openBlock(),l.createElementBlock("div",i2,[!((fe=l.unref(a))!=null&&fe.default)&&!I.viewMode?(l.openBlock(),l.createBlock(re,l.mergeProps({key:0},y.value,{ref_key:"dictSelectRef",ref:c,disabled:I.disabled,readonly:I.readonly,open:!1,dict:I.dict,onClick:x}),null,16,["disabled","readonly","dict"])):l.createCommentVNode("",!0),l.renderSlot(I.$slots,"default",l.normalizeProps(l.guardReactiveProps(j.value))),(l.openBlock(),l.createBlock(l.resolveDynamicComponent(l.unref(s).formItem.skipValidationWrapper),null,{default:l.withCtx(()=>[(l.openBlock(),l.createBlock(l.resolveDynamicComponent(l.unref(s).dialog.name),l.mergeProps({[l.unref(s).dialog.visible]:u.value,["onUpdate:"+l.unref(s).dialog.visible]:G[2]||(G[2]=ke=>u.value=ke)},_.value),{[l.unref(s).dialog.footerSlotName]:l.withCtx(()=>[I.viewMode?l.createCommentVNode("",!0):(l.openBlock(),l.createBlock(l.resolveDynamicComponent(l.unref(s).button.name),{key:0,onClick:G[1]||(G[1]=ke=>u.value=!1)},{default:l.withCtx(()=>[l.createTextVNode("取消")]),_:1})),(l.openBlock(),l.createBlock(l.resolveDynamicComponent(l.unref(s).button.name),{type:"primary",onClick:O},{default:l.withCtx(()=>[l.createTextVNode("确认")]),_:1}))]),default:l.withCtx(()=>[u.value?(l.openBlock(),l.createElementBlock("div",{key:0,style:l.normalizeStyle({width:"100%",height:I.height||"60vh"})},[l.createVNode(oe,l.mergeProps({ref_key:"crudRef",ref:d},l.unref(h)),{"header-top":l.withCtx(()=>[I.showCurrent!==!1&&!I.viewMode?(l.openBlock(),l.createElementBlock("div",s2,[l.createTextVNode(" 当前选中： "),l.createVNode(ae,l.mergeProps({ref_key:"valuesFormatRef",ref:f,modelValue:b.value,"onUpdate:modelValue":G[0]||(G[0]=ke=>b.value=ke),dict:I.dict,closable:!0},v.value),null,16,["modelValue","dict"])])):l.createCommentVNode("",!0)]),_:1},16)],4)):l.createCommentVNode("",!0)]),_:2},1040))]),_:1}))])}}}),dD="",wu=Object.freeze(Object.defineProperty({__proto__:null,FsActionbar:y0,FsBox:Qf,FsButton:Xf,FsCell:v0,FsColumnsFilterLayoutDefault:nu,FsComponentRender:t0,FsContainer:jf,FsCrud:o0,FsDateFormat:gu,FsDictCascader:hu,FsDictCascaderFormat:du,FsDictCheckbox:mu,FsDictRadio:cu,FsDictSelect:fu,FsDictSwitch:pu,FsDictTree:xu,FsEditable:_0,FsEditableCell:w0,FsForm:n0,FsFormHelper:i0,FsFormItem:a0,FsFormProvider:s0,FsFormWrapper:La,FsIcon:Kf,FsIconSvg:qf,FsIconify:Yf,FsLabel:Jf,FsLayoutCard:Gf,FsLayoutDefault:zf,FsLoading:Zf,FsPage:mf,FsRender:Zo,FsRowHandle:l0,FsSearch:iu,FsSearchLayoutDefault:ou,FsSearchV1:su,FsSlotRender:r0,FsTable:x0,FsTableColumnsFixedController:Sl,FsTableSelect:vu,FsTabsFilter:lu,FsToolbar:k0,FsValuesFormat:uu,fsColumnsFilterNestList:Tl},Symbol.toStringTag,{value:"Module"})),{setDictRequest:o2}=$f(),_u={install(e,t={}){t.ui&&de.uiContext.set(t.ui);const{merge:r}=Ze();t.commonOptions&&(ui.commonOptions=t.commonOptions),t.dictRequest&&o2(t.dictRequest),t.i18n&&Ss.setVueI18n(t.i18n);const n=t.customComponents||{};for(const a in wu){const i=n[a]||wu[a];e.component(a,i)}La._context=e._context,Ia.install(),e.config.globalProperties.$fsui=de.uiContext.get(),r(Hf.logger,t.logger),l2(t.logger)}};function l2(e){var t;((t=e==null?void 0:e.off)==null?void 0:t.tableColumns)!==!1&&console.warn(`[fast-crud] crudBinding.value.table.columns / toolbar.columnsFilter.originalColumns 由array改成map. 请改成通过key读取，你可以全局代码搜索【value.table.columns / columnsFilter.originalColumns】来检查是否有使用它们。
      [通过 app.use(FastCrud,{logger:{off:{tableColumns:false}}}) 可关闭此警告] `)}function Cl(e){const t=navigator.userAgent;return e==="ie"?t.indexOf("compatible")>-1&&t.indexOf("MSIE")>-1?(new RegExp("MSIE (\\d+\\.\\d+);").test(t),parseFloat(RegExp.$1)):!1:t.indexOf(e)>-1}const c2={_isIE11(){let e=0;const t=/MSIE (\d+\.\d+);/.test(navigator.userAgent),r=!!navigator.userAgent.match(/Trident\/7.0/),n=navigator.userAgent.indexOf("rv:11.0");return t&&(e=Number(RegExp.$1)),navigator.appVersion.indexOf("MSIE 10")!==-1&&(e=10),r&&n!==-1&&(e=11),e===11},_isEdge(){return/Edge/.test(navigator.userAgent)},_getDownloadUrl(e){const t="\uFEFF";if(window.Blob&&window.URL&&window.URL.createObjectURL){const r=new Blob([t+e],{type:"text/csv"});return URL.createObjectURL(r)}else return"data:attachment/csv;charset=utf-8,"+t+encodeURIComponent(e)},download(e,t){if(Cl("ie")&&Cl("ie")<10){const r=window.top.open("about:blank","_blank");r.document.charset="utf-8",r.document.write(t),r.document.close(),r.document.execCommand("SaveAs",e+".csv"),r.close()}else if(Cl("ie")===10||this._isIE11()||this._isEdge()){const r="\uFEFF",n=new Blob([r+t],{type:"text/csv"});navigator.msSaveBlob(n,e+".csv")}else{const r=document.createElement("a");r.download=e+".csv",r.href=this._getDownloadUrl(t),document.body.appendChild(r),r.click(),document.body.removeChild(r)}}},f2=`\r
`,Fl=(e,t,{separator:r,quoted:n})=>{const a=t.map(i=>n?(i=typeof i=="string"?i.replace(/"/g,'"'):i,`"${i}"`):i);e.push(a.join(r))},u2={separator:",",quoted:!1};function d2(e,t,r,n=!1){r=Object.assign({},u2,r);let a;const i=[],s=[];return e?(a=e.map(o=>typeof o=="string"?o:(n||s.push(typeof o.label<"u"?o.label:o.prop),o.prop)),s.length>0&&Fl(i,s,r)):(a=[],t.forEach(o=>{Array.isArray(o)||(a=a.concat(Object.keys(o)))}),a.length>0&&(a=a.filter((o,c,f)=>f.indexOf(o)===c),n||Fl(i,a,r))),Array.isArray(t)&&t.forEach(o=>{Array.isArray(o)||(o=a.map(c=>typeof o[c]<"u"?o[c]:"")),Fl(i,o,r)}),i.join(f2)}/*! @source http://purl.eligrey.com/github/Blob.js/blob/master/Blob.js */(function(e){if(e.URL=e.URL||e.webkitURL,e.Blob&&e.URL)try{new Blob;return}catch{}var t=e.BlobBuilder||e.WebKitBlobBuilder||e.MozBlobBuilder||function(r){var n=function(b){return Object.prototype.toString.call(b).match(/^\[object\s(.*)\]$/)[1]},a=function(){this.data=[]},i=function(D,C,k){this.data=D,this.size=D.length,this.type=C,this.encoding=k},s=a.prototype,o=i.prototype,c=r.FileReaderSync,f=function(b){this.code=this[this.name=b]},u="NOT_FOUND_ERR SECURITY_ERR ABORT_ERR NOT_READABLE_ERR ENCODING_ERR NO_MODIFICATION_ALLOWED_ERR INVALID_STATE_ERR SYNTAX_ERR".split(" "),d=u.length,h=r.URL||r.webkitURL||r,p=h.createObjectURL,g=h.revokeObjectURL,m=h,x=r.btoa,v=r.atob,y=r.ArrayBuffer,_=r.Uint8Array;for(i.fake=o.fake=!0;d--;)f.prototype[u[d]]=d+1;return h.createObjectURL||(m=r.URL={}),m.createObjectURL=function(b){var D=b.type,C;if(D===null&&(D="application/octet-stream"),b instanceof i)return C="data:"+D,b.encoding==="base64"?C+";base64,"+b.data:b.encoding==="URI"?C+","+decodeURIComponent(b.data):x?C+";base64,"+x(b.data):C+","+encodeURIComponent(b.data);if(p)return p.call(h,b)},m.revokeObjectURL=function(b){b.substring(0,5)!=="data:"&&g&&g.call(h,b)},s.append=function(b){var D=this.data;if(_&&(b instanceof y||b instanceof _)){for(var C="",k=new _(b),F=0,O=k.length;F<O;F++)C+=String.fromCharCode(k[F]);D.push(C)}else if(n(b)==="Blob"||n(b)==="File")if(c){var X=new c;D.push(X.readAsBinaryString(b))}else throw new f("NOT_READABLE_ERR");else b instanceof i?b.encoding==="base64"&&v?D.push(v(b.data)):b.encoding==="URI"?D.push(decodeURIComponent(b.data)):b.encoding==="raw"&&D.push(b.data):(typeof b!="string"&&(b+=""),D.push(unescape(encodeURIComponent(b))))},s.getBlob=function(b){return arguments.length||(b=null),new i(this.data.join(""),b,"raw")},s.toString=function(){return"[object BlobBuilder]"},o.slice=function(b,D,C){var k=arguments.length;return k<3&&(C=null),new i(this.data.slice(b,k>1?D:this.data.length),C,this.encoding)},o.toString=function(){return"[object Blob]"},o.close=function(){this.size=this.data.length=0},a}(e);e.Blob=function(n,a){var i=a&&a.type||"",s=new t;if(n)for(var o=0,c=n.length;o<c;o++)s.append(n[o]);return s.getBlob(i)}})(typeof self<"u"&&self||typeof window<"u"&&window||globalThis.content||globalThis);var yu={exports:{}};(function(e,t){(function(r,n){n()})(En,function(){function r(f,u){return typeof u>"u"?u={autoBom:!1}:typeof u!="object"&&(console.warn("Deprecated: Expected third argument to be a object"),u={autoBom:!u}),u.autoBom&&/^\s*(?:text\/\S*|application\/xml|\S*\/\S*\+xml)\s*;.*charset\s*=\s*utf-8/i.test(f.type)?new Blob(["\uFEFF",f],{type:f.type}):f}function n(f,u,d){var h=new XMLHttpRequest;h.open("GET",f),h.responseType="blob",h.onload=function(){c(h.response,u,d)},h.onerror=function(){console.error("could not download file")},h.send()}function a(f){var u=new XMLHttpRequest;u.open("HEAD",f,!1);try{u.send()}catch{}return 200<=u.status&&299>=u.status}function i(f){try{f.dispatchEvent(new MouseEvent("click"))}catch{var u=document.createEvent("MouseEvents");u.initMouseEvent("click",!0,!0,window,0,0,0,80,20,!1,!1,!1,!1,0,null),f.dispatchEvent(u)}}var s=typeof window=="object"&&window.window===window?window:typeof self=="object"&&self.self===self?self:typeof En=="object"&&En.global===En?En:void 0,o=s.navigator&&/Macintosh/.test(navigator.userAgent)&&/AppleWebKit/.test(navigator.userAgent)&&!/Safari/.test(navigator.userAgent),c=s.saveAs||(typeof window!="object"||window!==s?function(){}:"download"in HTMLAnchorElement.prototype&&!o?function(f,u,d){var h=s.URL||s.webkitURL,p=document.createElement("a");u=u||f.name||"download",p.download=u,p.rel="noopener",typeof f=="string"?(p.href=f,p.origin===location.origin?i(p):a(p.href)?n(f,u,d):i(p,p.target="_blank")):(p.href=h.createObjectURL(f),setTimeout(function(){h.revokeObjectURL(p.href)},4e4),setTimeout(function(){i(p)},0))}:"msSaveOrOpenBlob"in navigator?function(f,u,d){if(u=u||f.name||"download",typeof f!="string")navigator.msSaveOrOpenBlob(r(f,d),u);else if(a(f))n(f,u,d);else{var h=document.createElement("a");h.href=f,h.target="_blank",setTimeout(function(){i(h)})}}:function(f,u,d,h){if(h=h||open("","_blank"),h&&(h.document.title=h.document.body.innerText="downloading..."),typeof f=="string")return n(f,u,d);var p=f.type==="application/octet-stream",g=/constructor/i.test(s.HTMLElement)||s.safari,m=/CriOS\/[\d]+/.test(navigator.userAgent);if((m||p&&g||o)&&typeof FileReader<"u"){var x=new FileReader;x.onloadend=function(){var _=x.result;_=m?_:_.replace(/^data:[^;]*;/,"data:attachment/file;"),h?h.location.href=_:location=_,h=null},x.readAsDataURL(f)}else{var v=s.URL||s.webkitURL,y=v.createObjectURL(f);h?h.location=y:location.href=y,h=null,setTimeout(function(){v.revokeObjectURL(y)},4e4)}});s.saveAs=c.saveAs=c,e.exports=c})})(yu);var h2=yu.exports;const ku=mi(h2);/*! xlsx.js (C) 2013-present SheetJS -- http://sheetjs.com */var Qs={};Qs.version="0.18.5";var Eu=1252,m2=[874,932,936,949,950,1250,1251,1252,1253,1254,1255,1256,1257,1258,1e4],Al={0:1252,1:65001,2:65001,77:1e4,128:932,129:949,130:1361,134:936,136:950,161:1253,162:1254,163:1258,177:1255,178:1256,186:1257,204:1251,222:874,238:1250,255:1252,69:6969},Dl=function(e){m2.indexOf(e)!=-1&&(Eu=Al[0]=e)};function p2(){Dl(1252)}var Yr=function(e){Dl(e)};function Rl(){Yr(1200),p2()}function bu(e){for(var t=[],r=0,n=e.length;r<n;++r)t[r]=e.charCodeAt(r);return t}function g2(e){for(var t=[],r=0;r<e.length>>1;++r)t[r]=String.fromCharCode(e.charCodeAt(2*r)+(e.charCodeAt(2*r+1)<<8));return t.join("")}function Su(e){for(var t=[],r=0;r<e.length>>1;++r)t[r]=String.fromCharCode(e.charCodeAt(2*r+1)+(e.charCodeAt(2*r)<<8));return t.join("")}var Ii=function(e){var t=e.charCodeAt(0),r=e.charCodeAt(1);return t==255&&r==254?g2(e.slice(2)):t==254&&r==255?Su(e.slice(2)):t==65279?e.slice(1):e},eo=function(t){return String.fromCharCode(t)},Tu=function(t){return String.fromCharCode(t)},zn,Gn="ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/=";function Pi(e){for(var t="",r=0,n=0,a=0,i=0,s=0,o=0,c=0,f=0;f<e.length;)r=e.charCodeAt(f++),i=r>>2,n=e.charCodeAt(f++),s=(r&3)<<4|n>>4,a=e.charCodeAt(f++),o=(n&15)<<2|a>>6,c=a&63,isNaN(n)?o=c=64:isNaN(a)&&(c=64),t+=Gn.charAt(i)+Gn.charAt(s)+Gn.charAt(o)+Gn.charAt(c);return t}function Er(e){var t="",r=0,n=0,a=0,i=0,s=0,o=0,c=0;e=e.replace(/[^\w\+\/\=]/g,"");for(var f=0;f<e.length;)i=Gn.indexOf(e.charAt(f++)),s=Gn.indexOf(e.charAt(f++)),r=i<<2|s>>4,t+=String.fromCharCode(r),o=Gn.indexOf(e.charAt(f++)),n=(s&15)<<4|o>>2,o!==64&&(t+=String.fromCharCode(n)),c=Gn.indexOf(e.charAt(f++)),a=(o&3)<<6|c,c!==64&&(t+=String.fromCharCode(a));return t}var Ue=function(){return typeof Buffer<"u"&&typeof process<"u"&&typeof process.versions<"u"&&!!process.versions.node}(),An=function(){if(typeof Buffer<"u"){var e=!Buffer.from;if(!e)try{Buffer.from("foo","utf8")}catch{e=!0}return e?function(t,r){return r?new Buffer(t,r):new Buffer(t)}:Buffer.from.bind(Buffer)}return function(){}}();function Xn(e){return Ue?Buffer.alloc?Buffer.alloc(e):new Buffer(e):typeof Uint8Array<"u"?new Uint8Array(e):new Array(e)}function Cu(e){return Ue?Buffer.allocUnsafe?Buffer.allocUnsafe(e):new Buffer(e):typeof Uint8Array<"u"?new Uint8Array(e):new Array(e)}var br=function(t){return Ue?An(t,"binary"):t.split("").map(function(r){return r.charCodeAt(0)&255})};function to(e){if(typeof ArrayBuffer>"u")return br(e);for(var t=new ArrayBuffer(e.length),r=new Uint8Array(t),n=0;n!=e.length;++n)r[n]=e.charCodeAt(n)&255;return t}function Kn(e){if(Array.isArray(e))return e.map(function(n){return String.fromCharCode(n)}).join("");for(var t=[],r=0;r<e.length;++r)t[r]=String.fromCharCode(e[r]);return t.join("")}function x2(e){if(typeof Uint8Array>"u")throw new Error("Unsupported");return new Uint8Array(e)}function Ol(e){if(typeof ArrayBuffer>"u")throw new Error("Unsupported");if(e instanceof ArrayBuffer)return Ol(new Uint8Array(e));for(var t=new Array(e.length),r=0;r<e.length;++r)t[r]=e[r];return t}var Ut=Ue?function(e){return Buffer.concat(e.map(function(t){return Buffer.isBuffer(t)?t:An(t)}))}:function(e){if(typeof Uint8Array<"u"){var t=0,r=0;for(t=0;t<e.length;++t)r+=e[t].length;var n=new Uint8Array(r),a=0;for(t=0,r=0;t<e.length;r+=a,++t)if(a=e[t].length,e[t]instanceof Uint8Array)n.set(e[t],r);else{if(typeof e[t]=="string")throw"wtf";n.set(new Uint8Array(e[t]),r)}return n}return[].concat.apply([],e.map(function(i){return Array.isArray(i)?i:[].slice.call(i)}))};function v2(e){for(var t=[],r=0,n=e.length+250,a=Xn(e.length+255),i=0;i<e.length;++i){var s=e.charCodeAt(i);if(s<128)a[r++]=s;else if(s<2048)a[r++]=192|s>>6&31,a[r++]=128|s&63;else if(s>=55296&&s<57344){s=(s&1023)+64;var o=e.charCodeAt(++i)&1023;a[r++]=240|s>>8&7,a[r++]=128|s>>2&63,a[r++]=128|o>>6&15|(s&3)<<4,a[r++]=128|o&63}else a[r++]=224|s>>12&15,a[r++]=128|s>>6&63,a[r++]=128|s&63;r>n&&(t.push(a.slice(0,r)),r=0,a=Xn(65535),n=65530)}return t.push(a.slice(0,r)),Ut(t)}var lr=/\u0000/g,Li=/[\u0001-\u0006]/g;function za(e){for(var t="",r=e.length-1;r>=0;)t+=e.charAt(r--);return t}function qr(e,t){var r=""+e;return r.length>=t?r:_t("0",t-r.length)+r}function Bl(e,t){var r=""+e;return r.length>=t?r:_t(" ",t-r.length)+r}function ro(e,t){var r=""+e;return r.length>=t?r:r+_t(" ",t-r.length)}function w2(e,t){var r=""+Math.round(e);return r.length>=t?r:_t("0",t-r.length)+r}function _2(e,t){var r=""+e;return r.length>=t?r:_t("0",t-r.length)+r}var Fu=Math.pow(2,32);function Ga(e,t){if(e>Fu||e<-Fu)return w2(e,t);var r=Math.round(e);return _2(r,t)}function no(e,t){return t=t||0,e.length>=7+t&&(e.charCodeAt(t)|32)===103&&(e.charCodeAt(t+1)|32)===101&&(e.charCodeAt(t+2)|32)===110&&(e.charCodeAt(t+3)|32)===101&&(e.charCodeAt(t+4)|32)===114&&(e.charCodeAt(t+5)|32)===97&&(e.charCodeAt(t+6)|32)===108}var Au=[["Sun","Sunday"],["Mon","Monday"],["Tue","Tuesday"],["Wed","Wednesday"],["Thu","Thursday"],["Fri","Friday"],["Sat","Saturday"]],Nl=[["J","Jan","January"],["F","Feb","February"],["M","Mar","March"],["A","Apr","April"],["M","May","May"],["J","Jun","June"],["J","Jul","July"],["A","Aug","August"],["S","Sep","September"],["O","Oct","October"],["N","Nov","November"],["D","Dec","December"]];function y2(e){return e||(e={}),e[0]="General",e[1]="0",e[2]="0.00",e[3]="#,##0",e[4]="#,##0.00",e[9]="0%",e[10]="0.00%",e[11]="0.00E+00",e[12]="# ?/?",e[13]="# ??/??",e[14]="m/d/yy",e[15]="d-mmm-yy",e[16]="d-mmm",e[17]="mmm-yy",e[18]="h:mm AM/PM",e[19]="h:mm:ss AM/PM",e[20]="h:mm",e[21]="h:mm:ss",e[22]="m/d/yy h:mm",e[37]="#,##0 ;(#,##0)",e[38]="#,##0 ;[Red](#,##0)",e[39]="#,##0.00;(#,##0.00)",e[40]="#,##0.00;[Red](#,##0.00)",e[45]="mm:ss",e[46]="[h]:mm:ss",e[47]="mmss.0",e[48]="##0.0E+0",e[49]="@",e[56]='"上午/下午 "hh"時"mm"分"ss"秒 "',e}var Ce={0:"General",1:"0",2:"0.00",3:"#,##0",4:"#,##0.00",9:"0%",10:"0.00%",11:"0.00E+00",12:"# ?/?",13:"# ??/??",14:"m/d/yy",15:"d-mmm-yy",16:"d-mmm",17:"mmm-yy",18:"h:mm AM/PM",19:"h:mm:ss AM/PM",20:"h:mm",21:"h:mm:ss",22:"m/d/yy h:mm",37:"#,##0 ;(#,##0)",38:"#,##0 ;[Red](#,##0)",39:"#,##0.00;(#,##0.00)",40:"#,##0.00;[Red](#,##0.00)",45:"mm:ss",46:"[h]:mm:ss",47:"mmss.0",48:"##0.0E+0",49:"@",56:'"上午/下午 "hh"時"mm"分"ss"秒 "'},Du={5:37,6:38,7:39,8:40,23:0,24:0,25:0,26:0,27:14,28:14,29:14,30:14,31:14,50:14,51:14,52:14,53:14,54:14,55:14,56:14,57:14,58:14,59:1,60:2,61:3,62:4,67:9,68:10,69:12,70:13,71:14,72:14,73:15,74:16,75:17,76:20,77:21,78:22,79:45,80:46,81:47,82:0},k2={5:'"$"#,##0_);\\("$"#,##0\\)',63:'"$"#,##0_);\\("$"#,##0\\)',6:'"$"#,##0_);[Red]\\("$"#,##0\\)',64:'"$"#,##0_);[Red]\\("$"#,##0\\)',7:'"$"#,##0.00_);\\("$"#,##0.00\\)',65:'"$"#,##0.00_);\\("$"#,##0.00\\)',8:'"$"#,##0.00_);[Red]\\("$"#,##0.00\\)',66:'"$"#,##0.00_);[Red]\\("$"#,##0.00\\)',41:'_(* #,##0_);_(* \\(#,##0\\);_(* "-"_);_(@_)',42:'_("$"* #,##0_);_("$"* \\(#,##0\\);_("$"* "-"_);_(@_)',43:'_(* #,##0.00_);_(* \\(#,##0.00\\);_(* "-"??_);_(@_)',44:'_("$"* #,##0.00_);_("$"* \\(#,##0.00\\);_("$"* "-"??_);_(@_)'};function ao(e,t,r){for(var n=e<0?-1:1,a=e*n,i=0,s=1,o=0,c=1,f=0,u=0,d=Math.floor(a);f<t&&(d=Math.floor(a),o=d*s+i,u=d*f+c,!(a-d<5e-8));)a=1/(a-d),i=s,s=o,c=f,f=u;if(u>t&&(f>t?(u=c,o=i):(u=f,o=s)),!r)return[0,n*o,u];var h=Math.floor(n*o/u);return[h,n*o-h*u,u]}function Yn(e,t,r){if(e>2958465||e<0)return null;var n=e|0,a=Math.floor(86400*(e-n)),i=0,s=[],o={D:n,T:a,u:86400*(e-n)-a,y:0,m:0,d:0,H:0,M:0,S:0,q:0};if(Math.abs(o.u)<1e-6&&(o.u=0),t&&t.date1904&&(n+=1462),o.u>.9999&&(o.u=0,++a==86400&&(o.T=a=0,++n,++o.D)),n===60)s=r?[1317,10,29]:[1900,2,29],i=3;else if(n===0)s=r?[1317,8,29]:[1900,1,0],i=6;else{n>60&&--n;var c=new Date(1900,0,1);c.setDate(c.getDate()+n-1),s=[c.getFullYear(),c.getMonth()+1,c.getDate()],i=c.getDay(),n<60&&(i=(i+6)%7),r&&(i=F2(c,s))}return o.y=s[0],o.m=s[1],o.d=s[2],o.S=a%60,a=Math.floor(a/60),o.M=a%60,a=Math.floor(a/60),o.H=a,o.q=i,o}var Ru=new Date(1899,11,31,0,0,0),E2=Ru.getTime(),b2=new Date(1900,2,1,0,0,0);function Ou(e,t){var r=e.getTime();return t?r-=1461*24*60*60*1e3:e>=b2&&(r+=24*60*60*1e3),(r-(E2+(e.getTimezoneOffset()-Ru.getTimezoneOffset())*6e4))/(24*60*60*1e3)}function Il(e){return e.indexOf(".")==-1?e:e.replace(/(?:\.0*|(\.\d*[1-9])0+)$/,"$1")}function S2(e){return e.indexOf("E")==-1?e:e.replace(/(?:\.0*|(\.\d*[1-9])0+)[Ee]/,"$1E").replace(/(E[+-])(\d)$/,"$10$2")}function T2(e){var t=e<0?12:11,r=Il(e.toFixed(12));return r.length<=t||(r=e.toPrecision(10),r.length<=t)?r:e.toExponential(5)}function C2(e){var t=Il(e.toFixed(11));return t.length>(e<0?12:11)||t==="0"||t==="-0"?e.toPrecision(6):t}function Mi(e){var t=Math.floor(Math.log(Math.abs(e))*Math.LOG10E),r;return t>=-4&&t<=-1?r=e.toPrecision(10+t):Math.abs(t)<=9?r=T2(e):t===10?r=e.toFixed(10).substr(0,12):r=C2(e),Il(S2(r.toUpperCase()))}function ua(e,t){switch(typeof e){case"string":return e;case"boolean":return e?"TRUE":"FALSE";case"number":return(e|0)===e?e.toString(10):Mi(e);case"undefined":return"";case"object":if(e==null)return"";if(e instanceof Date)return Sr(14,Ou(e,t&&t.date1904),t)}throw new Error("unsupported value in General format: "+e)}function F2(e,t){t[0]-=581;var r=e.getDay();return e<60&&(r=(r+6)%7),r}function A2(e,t,r,n){var a="",i=0,s=0,o=r.y,c,f=0;switch(e){case 98:o=r.y+543;case 121:switch(t.length){case 1:case 2:c=o%100,f=2;break;default:c=o%1e4,f=4;break}break;case 109:switch(t.length){case 1:case 2:c=r.m,f=t.length;break;case 3:return Nl[r.m-1][1];case 5:return Nl[r.m-1][0];default:return Nl[r.m-1][2]}break;case 100:switch(t.length){case 1:case 2:c=r.d,f=t.length;break;case 3:return Au[r.q][0];default:return Au[r.q][1]}break;case 104:switch(t.length){case 1:case 2:c=1+(r.H+11)%12,f=t.length;break;default:throw"bad hour format: "+t}break;case 72:switch(t.length){case 1:case 2:c=r.H,f=t.length;break;default:throw"bad hour format: "+t}break;case 77:switch(t.length){case 1:case 2:c=r.M,f=t.length;break;default:throw"bad minute format: "+t}break;case 115:if(t!="s"&&t!="ss"&&t!=".0"&&t!=".00"&&t!=".000")throw"bad second format: "+t;return r.u===0&&(t=="s"||t=="ss")?qr(r.S,t.length):(n>=2?s=n===3?1e3:100:s=n===1?10:1,i=Math.round(s*(r.S+r.u)),i>=60*s&&(i=0),t==="s"?i===0?"0":""+i/s:(a=qr(i,2+n),t==="ss"?a.substr(0,2):"."+a.substr(2,t.length-1)));case 90:switch(t){case"[h]":case"[hh]":c=r.D*24+r.H;break;case"[m]":case"[mm]":c=(r.D*24+r.H)*60+r.M;break;case"[s]":case"[ss]":c=((r.D*24+r.H)*60+r.M)*60+Math.round(r.S+r.u);break;default:throw"bad abstime format: "+t}f=t.length===3?1:2;break;case 101:c=o,f=1;break}var u=f>0?qr(c,f):"";return u}function qn(e){var t=3;if(e.length<=t)return e;for(var r=e.length%t,n=e.substr(0,r);r!=e.length;r+=t)n+=(n.length>0?",":"")+e.substr(r,t);return n}var Bu=/%/g;function D2(e,t,r){var n=t.replace(Bu,""),a=t.length-n.length;return Dn(e,n,r*Math.pow(10,2*a))+_t("%",a)}function R2(e,t,r){for(var n=t.length-1;t.charCodeAt(n-1)===44;)--n;return Dn(e,t.substr(0,n),r/Math.pow(10,3*(t.length-n)))}function Nu(e,t){var r,n=e.indexOf("E")-e.indexOf(".")-1;if(e.match(/^#+0.0E\+0$/)){if(t==0)return"0.0E+0";if(t<0)return"-"+Nu(e,-t);var a=e.indexOf(".");a===-1&&(a=e.indexOf("E"));var i=Math.floor(Math.log(t)*Math.LOG10E)%a;if(i<0&&(i+=a),r=(t/Math.pow(10,i)).toPrecision(n+1+(a+i)%a),r.indexOf("e")===-1){var s=Math.floor(Math.log(t)*Math.LOG10E);for(r.indexOf(".")===-1?r=r.charAt(0)+"."+r.substr(1)+"E+"+(s-r.length+i):r+="E+"+(s-i);r.substr(0,2)==="0.";)r=r.charAt(0)+r.substr(2,a)+"."+r.substr(2+a),r=r.replace(/^0+([1-9])/,"$1").replace(/^0+\./,"0.");r=r.replace(/\+-/,"-")}r=r.replace(/^([+-]?)(\d*)\.(\d*)[Ee]/,function(o,c,f,u){return c+f+u.substr(0,(a+i)%a)+"."+u.substr(i)+"E"})}else r=t.toExponential(n);return e.match(/E\+00$/)&&r.match(/e[+-]\d$/)&&(r=r.substr(0,r.length-1)+"0"+r.charAt(r.length-1)),e.match(/E\-/)&&r.match(/e\+/)&&(r=r.replace(/e\+/,"e")),r.replace("e","E")}var Iu=/# (\?+)( ?)\/( ?)(\d+)/;function O2(e,t,r){var n=parseInt(e[4],10),a=Math.round(t*n),i=Math.floor(a/n),s=a-i*n,o=n;return r+(i===0?"":""+i)+" "+(s===0?_t(" ",e[1].length+1+e[4].length):Bl(s,e[1].length)+e[2]+"/"+e[3]+qr(o,e[4].length))}function B2(e,t,r){return r+(t===0?"":""+t)+_t(" ",e[1].length+2+e[4].length)}var Pu=/^#*0*\.([0#]+)/,Lu=/\).*[0#]/,Mu=/\(###\) ###\\?-####/;function cr(e){for(var t="",r,n=0;n!=e.length;++n)switch(r=e.charCodeAt(n)){case 35:break;case 63:t+=" ";break;case 48:t+="0";break;default:t+=String.fromCharCode(r)}return t}function Vu(e,t){var r=Math.pow(10,t);return""+Math.round(e*r)/r}function Uu(e,t){var r=e-Math.floor(e),n=Math.pow(10,t);return t<(""+Math.round(r*n)).length?0:Math.round(r*n)}function N2(e,t){return t<(""+Math.round((e-Math.floor(e))*Math.pow(10,t))).length?1:0}function I2(e){return e<2147483647&&e>-2147483648?""+(e>=0?e|0:e-1|0):""+Math.floor(e)}function Ir(e,t,r){if(e.charCodeAt(0)===40&&!t.match(Lu)){var n=t.replace(/\( */,"").replace(/ \)/,"").replace(/\)/,"");return r>=0?Ir("n",n,r):"("+Ir("n",n,-r)+")"}if(t.charCodeAt(t.length-1)===44)return R2(e,t,r);if(t.indexOf("%")!==-1)return D2(e,t,r);if(t.indexOf("E")!==-1)return Nu(t,r);if(t.charCodeAt(0)===36)return"$"+Ir(e,t.substr(t.charAt(1)==" "?2:1),r);var a,i,s,o,c=Math.abs(r),f=r<0?"-":"";if(t.match(/^00+$/))return f+Ga(c,t.length);if(t.match(/^[#?]+$/))return a=Ga(r,0),a==="0"&&(a=""),a.length>t.length?a:cr(t.substr(0,t.length-a.length))+a;if(i=t.match(Iu))return O2(i,c,f);if(t.match(/^#+0+$/))return f+Ga(c,t.length-t.indexOf("0"));if(i=t.match(Pu))return a=Vu(r,i[1].length).replace(/^([^\.]+)$/,"$1."+cr(i[1])).replace(/\.$/,"."+cr(i[1])).replace(/\.(\d*)$/,function(g,m){return"."+m+_t("0",cr(i[1]).length-m.length)}),t.indexOf("0.")!==-1?a:a.replace(/^0\./,".");if(t=t.replace(/^#+([0.])/,"$1"),i=t.match(/^(0*)\.(#*)$/))return f+Vu(c,i[2].length).replace(/\.(\d*[1-9])0*$/,".$1").replace(/^(-?\d*)$/,"$1.").replace(/^0\./,i[1].length?"0.":".");if(i=t.match(/^#{1,3},##0(\.?)$/))return f+qn(Ga(c,0));if(i=t.match(/^#,##0\.([#0]*0)$/))return r<0?"-"+Ir(e,t,-r):qn(""+(Math.floor(r)+N2(r,i[1].length)))+"."+qr(Uu(r,i[1].length),i[1].length);if(i=t.match(/^#,#*,#0/))return Ir(e,t.replace(/^#,#*,/,""),r);if(i=t.match(/^([0#]+)(\\?-([0#]+))+$/))return a=za(Ir(e,t.replace(/[\\-]/g,""),r)),s=0,za(za(t.replace(/\\/g,"")).replace(/[0#]/g,function(g){return s<a.length?a.charAt(s++):g==="0"?"0":""}));if(t.match(Mu))return a=Ir(e,"##########",r),"("+a.substr(0,3)+") "+a.substr(3,3)+"-"+a.substr(6);var u="";if(i=t.match(/^([#0?]+)( ?)\/( ?)([#0?]+)/))return s=Math.min(i[4].length,7),o=ao(c,Math.pow(10,s)-1,!1),a=""+f,u=Dn("n",i[1],o[1]),u.charAt(u.length-1)==" "&&(u=u.substr(0,u.length-1)+"0"),a+=u+i[2]+"/"+i[3],u=ro(o[2],s),u.length<i[4].length&&(u=cr(i[4].substr(i[4].length-u.length))+u),a+=u,a;if(i=t.match(/^# ([#0?]+)( ?)\/( ?)([#0?]+)/))return s=Math.min(Math.max(i[1].length,i[4].length),7),o=ao(c,Math.pow(10,s)-1,!0),f+(o[0]||(o[1]?"":"0"))+" "+(o[1]?Bl(o[1],s)+i[2]+"/"+i[3]+ro(o[2],s):_t(" ",2*s+1+i[2].length+i[3].length));if(i=t.match(/^[#0?]+$/))return a=Ga(r,0),t.length<=a.length?a:cr(t.substr(0,t.length-a.length))+a;if(i=t.match(/^([#0?]+)\.([#0]+)$/)){a=""+r.toFixed(Math.min(i[2].length,10)).replace(/([^0])0+$/,"$1"),s=a.indexOf(".");var d=t.indexOf(".")-s,h=t.length-a.length-d;return cr(t.substr(0,d)+a+t.substr(t.length-h))}if(i=t.match(/^00,000\.([#0]*0)$/))return s=Uu(r,i[1].length),r<0?"-"+Ir(e,t,-r):qn(I2(r)).replace(/^\d,\d{3}$/,"0$&").replace(/^\d*$/,function(g){return"00,"+(g.length<3?qr(0,3-g.length):"")+g})+"."+qr(s,i[1].length);switch(t){case"###,##0.00":return Ir(e,"#,##0.00",r);case"###,###":case"##,###":case"#,###":var p=qn(Ga(c,0));return p!=="0"?f+p:"";case"###,###.00":return Ir(e,"###,##0.00",r).replace(/^0\./,".");case"#,###.00":return Ir(e,"#,##0.00",r).replace(/^0\./,".")}throw new Error("unsupported format |"+t+"|")}function P2(e,t,r){for(var n=t.length-1;t.charCodeAt(n-1)===44;)--n;return Dn(e,t.substr(0,n),r/Math.pow(10,3*(t.length-n)))}function L2(e,t,r){var n=t.replace(Bu,""),a=t.length-n.length;return Dn(e,n,r*Math.pow(10,2*a))+_t("%",a)}function $u(e,t){var r,n=e.indexOf("E")-e.indexOf(".")-1;if(e.match(/^#+0.0E\+0$/)){if(t==0)return"0.0E+0";if(t<0)return"-"+$u(e,-t);var a=e.indexOf(".");a===-1&&(a=e.indexOf("E"));var i=Math.floor(Math.log(t)*Math.LOG10E)%a;if(i<0&&(i+=a),r=(t/Math.pow(10,i)).toPrecision(n+1+(a+i)%a),!r.match(/[Ee]/)){var s=Math.floor(Math.log(t)*Math.LOG10E);r.indexOf(".")===-1?r=r.charAt(0)+"."+r.substr(1)+"E+"+(s-r.length+i):r+="E+"+(s-i),r=r.replace(/\+-/,"-")}r=r.replace(/^([+-]?)(\d*)\.(\d*)[Ee]/,function(o,c,f,u){return c+f+u.substr(0,(a+i)%a)+"."+u.substr(i)+"E"})}else r=t.toExponential(n);return e.match(/E\+00$/)&&r.match(/e[+-]\d$/)&&(r=r.substr(0,r.length-1)+"0"+r.charAt(r.length-1)),e.match(/E\-/)&&r.match(/e\+/)&&(r=r.replace(/e\+/,"e")),r.replace("e","E")}function hn(e,t,r){if(e.charCodeAt(0)===40&&!t.match(Lu)){var n=t.replace(/\( */,"").replace(/ \)/,"").replace(/\)/,"");return r>=0?hn("n",n,r):"("+hn("n",n,-r)+")"}if(t.charCodeAt(t.length-1)===44)return P2(e,t,r);if(t.indexOf("%")!==-1)return L2(e,t,r);if(t.indexOf("E")!==-1)return $u(t,r);if(t.charCodeAt(0)===36)return"$"+hn(e,t.substr(t.charAt(1)==" "?2:1),r);var a,i,s,o,c=Math.abs(r),f=r<0?"-":"";if(t.match(/^00+$/))return f+qr(c,t.length);if(t.match(/^[#?]+$/))return a=""+r,r===0&&(a=""),a.length>t.length?a:cr(t.substr(0,t.length-a.length))+a;if(i=t.match(Iu))return B2(i,c,f);if(t.match(/^#+0+$/))return f+qr(c,t.length-t.indexOf("0"));if(i=t.match(Pu))return a=(""+r).replace(/^([^\.]+)$/,"$1."+cr(i[1])).replace(/\.$/,"."+cr(i[1])),a=a.replace(/\.(\d*)$/,function(g,m){return"."+m+_t("0",cr(i[1]).length-m.length)}),t.indexOf("0.")!==-1?a:a.replace(/^0\./,".");if(t=t.replace(/^#+([0.])/,"$1"),i=t.match(/^(0*)\.(#*)$/))return f+(""+c).replace(/\.(\d*[1-9])0*$/,".$1").replace(/^(-?\d*)$/,"$1.").replace(/^0\./,i[1].length?"0.":".");if(i=t.match(/^#{1,3},##0(\.?)$/))return f+qn(""+c);if(i=t.match(/^#,##0\.([#0]*0)$/))return r<0?"-"+hn(e,t,-r):qn(""+r)+"."+_t("0",i[1].length);if(i=t.match(/^#,#*,#0/))return hn(e,t.replace(/^#,#*,/,""),r);if(i=t.match(/^([0#]+)(\\?-([0#]+))+$/))return a=za(hn(e,t.replace(/[\\-]/g,""),r)),s=0,za(za(t.replace(/\\/g,"")).replace(/[0#]/g,function(g){return s<a.length?a.charAt(s++):g==="0"?"0":""}));if(t.match(Mu))return a=hn(e,"##########",r),"("+a.substr(0,3)+") "+a.substr(3,3)+"-"+a.substr(6);var u="";if(i=t.match(/^([#0?]+)( ?)\/( ?)([#0?]+)/))return s=Math.min(i[4].length,7),o=ao(c,Math.pow(10,s)-1,!1),a=""+f,u=Dn("n",i[1],o[1]),u.charAt(u.length-1)==" "&&(u=u.substr(0,u.length-1)+"0"),a+=u+i[2]+"/"+i[3],u=ro(o[2],s),u.length<i[4].length&&(u=cr(i[4].substr(i[4].length-u.length))+u),a+=u,a;if(i=t.match(/^# ([#0?]+)( ?)\/( ?)([#0?]+)/))return s=Math.min(Math.max(i[1].length,i[4].length),7),o=ao(c,Math.pow(10,s)-1,!0),f+(o[0]||(o[1]?"":"0"))+" "+(o[1]?Bl(o[1],s)+i[2]+"/"+i[3]+ro(o[2],s):_t(" ",2*s+1+i[2].length+i[3].length));if(i=t.match(/^[#0?]+$/))return a=""+r,t.length<=a.length?a:cr(t.substr(0,t.length-a.length))+a;if(i=t.match(/^([#0]+)\.([#0]+)$/)){a=""+r.toFixed(Math.min(i[2].length,10)).replace(/([^0])0+$/,"$1"),s=a.indexOf(".");var d=t.indexOf(".")-s,h=t.length-a.length-d;return cr(t.substr(0,d)+a+t.substr(t.length-h))}if(i=t.match(/^00,000\.([#0]*0)$/))return r<0?"-"+hn(e,t,-r):qn(""+r).replace(/^\d,\d{3}$/,"0$&").replace(/^\d*$/,function(g){return"00,"+(g.length<3?qr(0,3-g.length):"")+g})+"."+qr(0,i[1].length);switch(t){case"###,###":case"##,###":case"#,###":var p=qn(""+c);return p!=="0"?f+p:"";default:if(t.match(/\.[0#?]*$/))return hn(e,t.slice(0,t.lastIndexOf(".")),r)+cr(t.slice(t.lastIndexOf(".")))}throw new Error("unsupported format |"+t+"|")}function Dn(e,t,r){return(r|0)===r?hn(e,t,r):Ir(e,t,r)}function M2(e){for(var t=[],r=!1,n=0,a=0;n<e.length;++n)switch(e.charCodeAt(n)){case 34:r=!r;break;case 95:case 42:case 92:++n;break;case 59:t[t.length]=e.substr(a,n-a),a=n+1}if(t[t.length]=e.substr(a),r===!0)throw new Error("Format |"+e+"| unterminated string ");return t}var Wu=/\[[HhMmSs\u0E0A\u0E19\u0E17]*\]/;function da(e){for(var t=0,r="",n="";t<e.length;)switch(r=e.charAt(t)){case"G":no(e,t)&&(t+=6),t++;break;case'"':for(;e.charCodeAt(++t)!==34&&t<e.length;);++t;break;case"\\":t+=2;break;case"_":t+=2;break;case"@":++t;break;case"B":case"b":if(e.charAt(t+1)==="1"||e.charAt(t+1)==="2")return!0;case"M":case"D":case"Y":case"H":case"S":case"E":case"m":case"d":case"y":case"h":case"s":case"e":case"g":return!0;case"A":case"a":case"上":if(e.substr(t,3).toUpperCase()==="A/P"||e.substr(t,5).toUpperCase()==="AM/PM"||e.substr(t,5).toUpperCase()==="上午/下午")return!0;++t;break;case"[":for(n=r;e.charAt(t++)!=="]"&&t<e.length;)n+=e.charAt(t);if(n.match(Wu))return!0;break;case".":case"0":case"#":for(;t<e.length&&("0#?.,E+-%".indexOf(r=e.charAt(++t))>-1||r=="\\"&&e.charAt(t+1)=="-"&&"0#".indexOf(e.charAt(t+2))>-1););break;case"?":for(;e.charAt(++t)===r;);break;case"*":++t,(e.charAt(t)==" "||e.charAt(t)=="*")&&++t;break;case"(":case")":++t;break;case"1":case"2":case"3":case"4":case"5":case"6":case"7":case"8":case"9":for(;t<e.length&&"0123456789".indexOf(e.charAt(++t))>-1;);break;case" ":++t;break;default:++t;break}return!1}function V2(e,t,r,n){for(var a=[],i="",s=0,o="",c="t",f,u,d,h="H";s<e.length;)switch(o=e.charAt(s)){case"G":if(!no(e,s))throw new Error("unrecognized character "+o+" in "+e);a[a.length]={t:"G",v:"General"},s+=7;break;case'"':for(i="";(d=e.charCodeAt(++s))!==34&&s<e.length;)i+=String.fromCharCode(d);a[a.length]={t:"t",v:i},++s;break;case"\\":var p=e.charAt(++s),g=p==="("||p===")"?p:"t";a[a.length]={t:g,v:p},++s;break;case"_":a[a.length]={t:"t",v:" "},s+=2;break;case"@":a[a.length]={t:"T",v:t},++s;break;case"B":case"b":if(e.charAt(s+1)==="1"||e.charAt(s+1)==="2"){if(f==null&&(f=Yn(t,r,e.charAt(s+1)==="2"),f==null))return"";a[a.length]={t:"X",v:e.substr(s,2)},c=o,s+=2;break}case"M":case"D":case"Y":case"H":case"S":case"E":o=o.toLowerCase();case"m":case"d":case"y":case"h":case"s":case"e":case"g":if(t<0||f==null&&(f=Yn(t,r),f==null))return"";for(i=o;++s<e.length&&e.charAt(s).toLowerCase()===o;)i+=o;o==="m"&&c.toLowerCase()==="h"&&(o="M"),o==="h"&&(o=h),a[a.length]={t:o,v:i},c=o;break;case"A":case"a":case"上":var m={t:o,v:o};if(f==null&&(f=Yn(t,r)),e.substr(s,3).toUpperCase()==="A/P"?(f!=null&&(m.v=f.H>=12?"P":"A"),m.t="T",h="h",s+=3):e.substr(s,5).toUpperCase()==="AM/PM"?(f!=null&&(m.v=f.H>=12?"PM":"AM"),m.t="T",s+=5,h="h"):e.substr(s,5).toUpperCase()==="上午/下午"?(f!=null&&(m.v=f.H>=12?"下午":"上午"),m.t="T",s+=5,h="h"):(m.t="t",++s),f==null&&m.t==="T")return"";a[a.length]=m,c=o;break;case"[":for(i=o;e.charAt(s++)!=="]"&&s<e.length;)i+=e.charAt(s);if(i.slice(-1)!=="]")throw'unterminated "[" block: |'+i+"|";if(i.match(Wu)){if(f==null&&(f=Yn(t,r),f==null))return"";a[a.length]={t:"Z",v:i.toLowerCase()},c=i.charAt(1)}else i.indexOf("$")>-1&&(i=(i.match(/\$([^-\[\]]*)/)||[])[1]||"$",da(e)||(a[a.length]={t:"t",v:i}));break;case".":if(f!=null){for(i=o;++s<e.length&&(o=e.charAt(s))==="0";)i+=o;a[a.length]={t:"s",v:i};break}case"0":case"#":for(i=o;++s<e.length&&"0#?.,E+-%".indexOf(o=e.charAt(s))>-1;)i+=o;a[a.length]={t:"n",v:i};break;case"?":for(i=o;e.charAt(++s)===o;)i+=o;a[a.length]={t:o,v:i},c=o;break;case"*":++s,(e.charAt(s)==" "||e.charAt(s)=="*")&&++s;break;case"(":case")":a[a.length]={t:n===1?"t":o,v:o},++s;break;case"1":case"2":case"3":case"4":case"5":case"6":case"7":case"8":case"9":for(i=o;s<e.length&&"0123456789".indexOf(e.charAt(++s))>-1;)i+=e.charAt(s);a[a.length]={t:"D",v:i};break;case" ":a[a.length]={t:o,v:o},++s;break;case"$":a[a.length]={t:"t",v:"$"},++s;break;default:if(",$-+/():!^&'~{}<>=€acfijklopqrtuvwxzP".indexOf(o)===-1)throw new Error("unrecognized character "+o+" in "+e);a[a.length]={t:"t",v:o},++s;break}var x=0,v=0,y;for(s=a.length-1,c="t";s>=0;--s)switch(a[s].t){case"h":case"H":a[s].t=h,c="h",x<1&&(x=1);break;case"s":(y=a[s].v.match(/\.0+$/))&&(v=Math.max(v,y[0].length-1)),x<3&&(x=3);case"d":case"y":case"M":case"e":c=a[s].t;break;case"m":c==="s"&&(a[s].t="M",x<2&&(x=2));break;case"X":break;case"Z":x<1&&a[s].v.match(/[Hh]/)&&(x=1),x<2&&a[s].v.match(/[Mm]/)&&(x=2),x<3&&a[s].v.match(/[Ss]/)&&(x=3)}switch(x){case 0:break;case 1:f.u>=.5&&(f.u=0,++f.S),f.S>=60&&(f.S=0,++f.M),f.M>=60&&(f.M=0,++f.H);break;case 2:f.u>=.5&&(f.u=0,++f.S),f.S>=60&&(f.S=0,++f.M);break}var _="",b;for(s=0;s<a.length;++s)switch(a[s].t){case"t":case"T":case" ":case"D":break;case"X":a[s].v="",a[s].t=";";break;case"d":case"m":case"y":case"h":case"H":case"M":case"s":case"e":case"b":case"Z":a[s].v=A2(a[s].t.charCodeAt(0),a[s].v,f,v),a[s].t="t";break;case"n":case"?":for(b=s+1;a[b]!=null&&((o=a[b].t)==="?"||o==="D"||(o===" "||o==="t")&&a[b+1]!=null&&(a[b+1].t==="?"||a[b+1].t==="t"&&a[b+1].v==="/")||a[s].t==="("&&(o===" "||o==="n"||o===")")||o==="t"&&(a[b].v==="/"||a[b].v===" "&&a[b+1]!=null&&a[b+1].t=="?"));)a[s].v+=a[b].v,a[b]={v:"",t:";"},++b;_+=a[s].v,s=b-1;break;case"G":a[s].t="t",a[s].v=ua(t,r);break}var D="",C,k;if(_.length>0){_.charCodeAt(0)==40?(C=t<0&&_.charCodeAt(0)===45?-t:t,k=Dn("n",_,C)):(C=t<0&&n>1?-t:t,k=Dn("n",_,C),C<0&&a[0]&&a[0].t=="t"&&(k=k.substr(1),a[0].v="-"+a[0].v)),b=k.length-1;var F=a.length;for(s=0;s<a.length;++s)if(a[s]!=null&&a[s].t!="t"&&a[s].v.indexOf(".")>-1){F=s;break}var O=a.length;if(F===a.length&&k.indexOf("E")===-1){for(s=a.length-1;s>=0;--s)a[s]==null||"n?".indexOf(a[s].t)===-1||(b>=a[s].v.length-1?(b-=a[s].v.length,a[s].v=k.substr(b+1,a[s].v.length)):b<0?a[s].v="":(a[s].v=k.substr(0,b+1),b=-1),a[s].t="t",O=s);b>=0&&O<a.length&&(a[O].v=k.substr(0,b+1)+a[O].v)}else if(F!==a.length&&k.indexOf("E")===-1){for(b=k.indexOf(".")-1,s=F;s>=0;--s)if(!(a[s]==null||"n?".indexOf(a[s].t)===-1)){for(u=a[s].v.indexOf(".")>-1&&s===F?a[s].v.indexOf(".")-1:a[s].v.length-1,D=a[s].v.substr(u+1);u>=0;--u)b>=0&&(a[s].v.charAt(u)==="0"||a[s].v.charAt(u)==="#")&&(D=k.charAt(b--)+D);a[s].v=D,a[s].t="t",O=s}for(b>=0&&O<a.length&&(a[O].v=k.substr(0,b+1)+a[O].v),b=k.indexOf(".")+1,s=F;s<a.length;++s)if(!(a[s]==null||"n?(".indexOf(a[s].t)===-1&&s!==F)){for(u=a[s].v.indexOf(".")>-1&&s===F?a[s].v.indexOf(".")+1:0,D=a[s].v.substr(0,u);u<a[s].v.length;++u)b<k.length&&(D+=k.charAt(b++));a[s].v=D,a[s].t="t",O=s}}}for(s=0;s<a.length;++s)a[s]!=null&&"n?".indexOf(a[s].t)>-1&&(C=n>1&&t<0&&s>0&&a[s-1].v==="-"?-t:t,a[s].v=Dn(a[s].t,a[s].v,C),a[s].t="t");var X="";for(s=0;s!==a.length;++s)a[s]!=null&&(X+=a[s].v);return X}var Hu=/\[(=|>[=]?|<[>=]?)(-?\d+(?:\.\d*)?)\]/;function ju(e,t){if(t==null)return!1;var r=parseFloat(t[2]);switch(t[1]){case"=":if(e==r)return!0;break;case">":if(e>r)return!0;break;case"<":if(e<r)return!0;break;case"<>":if(e!=r)return!0;break;case">=":if(e>=r)return!0;break;case"<=":if(e<=r)return!0;break}return!1}function U2(e,t){var r=M2(e),n=r.length,a=r[n-1].indexOf("@");if(n<4&&a>-1&&--n,r.length>4)throw new Error("cannot find right format for |"+r.join("|")+"|");if(typeof t!="number")return[4,r.length===4||a>-1?r[r.length-1]:"@"];switch(r.length){case 1:r=a>-1?["General","General","General",r[0]]:[r[0],r[0],r[0],"@"];break;case 2:r=a>-1?[r[0],r[0],r[0],r[1]]:[r[0],r[1],r[0],"@"];break;case 3:r=a>-1?[r[0],r[1],r[0],r[2]]:[r[0],r[1],r[2],"@"];break}var i=t>0?r[0]:t<0?r[1]:r[2];if(r[0].indexOf("[")===-1&&r[1].indexOf("[")===-1)return[n,i];if(r[0].match(/\[[=<>]/)!=null||r[1].match(/\[[=<>]/)!=null){var s=r[0].match(Hu),o=r[1].match(Hu);return ju(t,s)?[n,r[0]]:ju(t,o)?[n,r[1]]:[n,r[s!=null&&o!=null?2:1]]}return[n,i]}function Sr(e,t,r){r==null&&(r={});var n="";switch(typeof e){case"string":e=="m/d/yy"&&r.dateNF?n=r.dateNF:n=e;break;case"number":e==14&&r.dateNF?n=r.dateNF:n=(r.table!=null?r.table:Ce)[e],n==null&&(n=r.table&&r.table[Du[e]]||Ce[Du[e]]),n==null&&(n=k2[e]||"General");break}if(no(n,0))return ua(t,r);t instanceof Date&&(t=Ou(t,r.date1904));var a=U2(n,t);if(no(a[1]))return ua(t,r);if(t===!0)t="TRUE";else if(t===!1)t="FALSE";else if(t===""||t==null)return"";return V2(a[1],t,r,a[0])}function mn(e,t){if(typeof t!="number"){t=+t||-1;for(var r=0;r<392;++r){if(Ce[r]==null){t<0&&(t=r);continue}if(Ce[r]==e){t=r;break}}t<0&&(t=391)}return Ce[t]=e,t}function Vi(e){for(var t=0;t!=392;++t)e[t]!==void 0&&mn(e[t],t)}function Xa(){Ce=y2()}var zu={format:Sr,load:mn,_table:Ce,load_table:Vi,parse_date_code:Yn,is_date:da,get_table:function(){return zu._table=Ce}},$2={5:'"$"#,##0_);\\("$"#,##0\\)',6:'"$"#,##0_);[Red]\\("$"#,##0\\)',7:'"$"#,##0.00_);\\("$"#,##0.00\\)',8:'"$"#,##0.00_);[Red]\\("$"#,##0.00\\)',23:"General",24:"General",25:"General",26:"General",27:"m/d/yy",28:"m/d/yy",29:"m/d/yy",30:"m/d/yy",31:"m/d/yy",32:"h:mm:ss",33:"h:mm:ss",34:"h:mm:ss",35:"h:mm:ss",36:"m/d/yy",41:'_(* #,##0_);_(* (#,##0);_(* "-"_);_(@_)',42:'_("$"* #,##0_);_("$"* (#,##0);_("$"* "-"_);_(@_)',43:'_(* #,##0.00_);_(* (#,##0.00);_(* "-"??_);_(@_)',44:'_("$"* #,##0.00_);_("$"* (#,##0.00);_("$"* "-"??_);_(@_)',50:"m/d/yy",51:"m/d/yy",52:"m/d/yy",53:"m/d/yy",54:"m/d/yy",55:"m/d/yy",56:"m/d/yy",57:"m/d/yy",58:"m/d/yy",59:"0",60:"0.00",61:"#,##0",62:"#,##0.00",63:'"$"#,##0_);\\("$"#,##0\\)',64:'"$"#,##0_);[Red]\\("$"#,##0\\)',65:'"$"#,##0.00_);\\("$"#,##0.00\\)',66:'"$"#,##0.00_);[Red]\\("$"#,##0.00\\)',67:"0%",68:"0.00%",69:"# ?/?",70:"# ??/??",71:"m/d/yy",72:"m/d/yy",73:"d-mmm-yy",74:"d-mmm",75:"mmm-yy",76:"h:mm",77:"h:mm:ss",78:"m/d/yy h:mm",79:"mm:ss",80:"[h]:mm:ss",81:"mmss.0"},Gu=/[dD]+|[mM]+|[yYeE]+|[Hh]+|[Ss]+/g;function W2(e){var t=typeof e=="number"?Ce[e]:e;return t=t.replace(Gu,"(\\d+)"),new RegExp("^"+t+"$")}function H2(e,t,r){var n=-1,a=-1,i=-1,s=-1,o=-1,c=-1;(t.match(Gu)||[]).forEach(function(d,h){var p=parseInt(r[h+1],10);switch(d.toLowerCase().charAt(0)){case"y":n=p;break;case"d":i=p;break;case"h":s=p;break;case"s":c=p;break;case"m":s>=0?o=p:a=p;break}}),c>=0&&o==-1&&a>=0&&(o=a,a=-1);var f=(""+(n>=0?n:new Date().getFullYear())).slice(-4)+"-"+("00"+(a>=1?a:1)).slice(-2)+"-"+("00"+(i>=1?i:1)).slice(-2);f.length==7&&(f="0"+f),f.length==8&&(f="20"+f);var u=("00"+(s>=0?s:0)).slice(-2)+":"+("00"+(o>=0?o:0)).slice(-2)+":"+("00"+(c>=0?c:0)).slice(-2);return s==-1&&o==-1&&c==-1?f:n==-1&&a==-1&&i==-1?u:f+"T"+u}var j2=function(){var e={};e.version="1.2.0";function t(){for(var k=0,F=new Array(256),O=0;O!=256;++O)k=O,k=k&1?-306674912^k>>>1:k>>>1,k=k&1?-306674912^k>>>1:k>>>1,k=k&1?-306674912^k>>>1:k>>>1,k=k&1?-306674912^k>>>1:k>>>1,k=k&1?-306674912^k>>>1:k>>>1,k=k&1?-306674912^k>>>1:k>>>1,k=k&1?-306674912^k>>>1:k>>>1,k=k&1?-306674912^k>>>1:k>>>1,F[O]=k;return typeof Int32Array<"u"?new Int32Array(F):F}var r=t();function n(k){var F=0,O=0,X=0,j=typeof Int32Array<"u"?new Int32Array(4096):new Array(4096);for(X=0;X!=256;++X)j[X]=k[X];for(X=0;X!=256;++X)for(O=k[X],F=256+X;F<4096;F+=256)O=j[F]=O>>>8^k[O&255];var I=[];for(X=1;X!=16;++X)I[X-1]=typeof Int32Array<"u"?j.subarray(X*256,X*256+256):j.slice(X*256,X*256+256);return I}var a=n(r),i=a[0],s=a[1],o=a[2],c=a[3],f=a[4],u=a[5],d=a[6],h=a[7],p=a[8],g=a[9],m=a[10],x=a[11],v=a[12],y=a[13],_=a[14];function b(k,F){for(var O=F^-1,X=0,j=k.length;X<j;)O=O>>>8^r[(O^k.charCodeAt(X++))&255];return~O}function D(k,F){for(var O=F^-1,X=k.length-15,j=0;j<X;)O=_[k[j++]^O&255]^y[k[j++]^O>>8&255]^v[k[j++]^O>>16&255]^x[k[j++]^O>>>24]^m[k[j++]]^g[k[j++]]^p[k[j++]]^h[k[j++]]^d[k[j++]]^u[k[j++]]^f[k[j++]]^c[k[j++]]^o[k[j++]]^s[k[j++]]^i[k[j++]]^r[k[j++]];for(X+=15;j<X;)O=O>>>8^r[(O^k[j++])&255];return~O}function C(k,F){for(var O=F^-1,X=0,j=k.length,I=0,G=0;X<j;)I=k.charCodeAt(X++),I<128?O=O>>>8^r[(O^I)&255]:I<2048?(O=O>>>8^r[(O^(192|I>>6&31))&255],O=O>>>8^r[(O^(128|I&63))&255]):I>=55296&&I<57344?(I=(I&1023)+64,G=k.charCodeAt(X++)&1023,O=O>>>8^r[(O^(240|I>>8&7))&255],O=O>>>8^r[(O^(128|I>>2&63))&255],O=O>>>8^r[(O^(128|G>>6&15|(I&3)<<4))&255],O=O>>>8^r[(O^(128|G&63))&255]):(O=O>>>8^r[(O^(224|I>>12&15))&255],O=O>>>8^r[(O^(128|I>>6&63))&255],O=O>>>8^r[(O^(128|I&63))&255]);return~O}return e.table=r,e.bstr=b,e.buf=D,e.str=C,e}(),Se=function(){var t={};t.version="1.2.1";function r(E,P){for(var A=E.split("/"),N=P.split("/"),L=0,V=0,Z=Math.min(A.length,N.length);L<Z;++L){if(V=A[L].length-N[L].length)return V;if(A[L]!=N[L])return A[L]<N[L]?-1:1}return A.length-N.length}function n(E){if(E.charAt(E.length-1)=="/")return E.slice(0,-1).indexOf("/")===-1?E:n(E.slice(0,-1));var P=E.lastIndexOf("/");return P===-1?E:E.slice(0,P+1)}function a(E){if(E.charAt(E.length-1)=="/")return a(E.slice(0,-1));var P=E.lastIndexOf("/");return P===-1?E:E.slice(P+1)}function i(E,P){typeof P=="string"&&(P=new Date(P));var A=P.getHours();A=A<<6|P.getMinutes(),A=A<<5|P.getSeconds()>>>1,E.write_shift(2,A);var N=P.getFullYear()-1980;N=N<<4|P.getMonth()+1,N=N<<5|P.getDate(),E.write_shift(2,N)}function s(E){var P=E.read_shift(2)&65535,A=E.read_shift(2)&65535,N=new Date,L=A&31;A>>>=5;var V=A&15;A>>>=4,N.setMilliseconds(0),N.setFullYear(A+1980),N.setMonth(V-1),N.setDate(L);var Z=P&31;P>>>=5;var se=P&63;return P>>>=6,N.setHours(P),N.setMinutes(se),N.setSeconds(Z<<1),N}function o(E){Xt(E,0);for(var P={},A=0;E.l<=E.length-4;){var N=E.read_shift(2),L=E.read_shift(2),V=E.l+L,Z={};switch(N){case 21589:A=E.read_shift(1),A&1&&(Z.mtime=E.read_shift(4)),L>5&&(A&2&&(Z.atime=E.read_shift(4)),A&4&&(Z.ctime=E.read_shift(4))),Z.mtime&&(Z.mt=new Date(Z.mtime*1e3));break}E.l=V,P[N]=Z}return P}var c;function f(){return c||(c={})}function u(E,P){if(E[0]==80&&E[1]==75)return Km(E,P);if((E[0]|32)==109&&(E[1]|32)==105)return A3(E,P);if(E.length<512)throw new Error("CFB file size "+E.length+" < 512");var A=3,N=512,L=0,V=0,Z=0,se=0,J=0,Q=[],te=E.slice(0,512);Xt(te,0);var ue=d(te);switch(A=ue[0],A){case 3:N=512;break;case 4:N=4096;break;case 0:if(ue[1]==0)return Km(E,P);default:throw new Error("Major Version: Expected 3 or 4 saw "+A)}N!==512&&(te=E.slice(0,N),Xt(te,28));var xe=E.slice(0,N);h(te,A);var _e=te.read_shift(4,"i");if(A===3&&_e!==0)throw new Error("# Directory Sectors: Expected 0 saw "+_e);te.l+=4,Z=te.read_shift(4,"i"),te.l+=4,te.chk("00100000","Mini Stream Cutoff Size: "),se=te.read_shift(4,"i"),L=te.read_shift(4,"i"),J=te.read_shift(4,"i"),V=te.read_shift(4,"i");for(var he=-1,we=0;we<109&&(he=te.read_shift(4,"i"),!(he<0));++we)Q[we]=he;var Ne=p(E,N);x(J,V,Ne,N,Q);var pt=y(Ne,Z,Q,N);pt[Z].name="!Directory",L>0&&se!==G&&(pt[se].name="!MiniFAT"),pt[Q[0]].name="!FAT",pt.fat_addrs=Q,pt.ssz=N;var gt={},sr=[],ys=[],ks=[];_(Z,pt,Ne,sr,L,gt,ys,se),g(ys,ks,sr),sr.shift();var Es={FileIndex:ys,FullPaths:ks};return P&&P.raw&&(Es.raw={header:xe,sectors:Ne}),Es}function d(E){if(E[E.l]==80&&E[E.l+1]==75)return[0,0];E.chk(re,"Header Signature: "),E.l+=16;var P=E.read_shift(2,"u");return[E.read_shift(2,"u"),P]}function h(E,P){var A=9;switch(E.l+=2,A=E.read_shift(2)){case 9:if(P!=3)throw new Error("Sector Shift: Expected 9 saw "+A);break;case 12:if(P!=4)throw new Error("Sector Shift: Expected 12 saw "+A);break;default:throw new Error("Sector Shift: Expected 9 or 12 saw "+A)}E.chk("0600","Mini Sector Shift: "),E.chk("000000000000","Reserved: ")}function p(E,P){for(var A=Math.ceil(E.length/P)-1,N=[],L=1;L<A;++L)N[L-1]=E.slice(L*P,(L+1)*P);return N[A-1]=E.slice(A*P),N}function g(E,P,A){for(var N=0,L=0,V=0,Z=0,se=0,J=A.length,Q=[],te=[];N<J;++N)Q[N]=te[N]=N,P[N]=A[N];for(;se<te.length;++se)N=te[se],L=E[N].L,V=E[N].R,Z=E[N].C,Q[N]===N&&(L!==-1&&Q[L]!==L&&(Q[N]=Q[L]),V!==-1&&Q[V]!==V&&(Q[N]=Q[V])),Z!==-1&&(Q[Z]=N),L!==-1&&N!=Q[N]&&(Q[L]=Q[N],te.lastIndexOf(L)<se&&te.push(L)),V!==-1&&N!=Q[N]&&(Q[V]=Q[N],te.lastIndexOf(V)<se&&te.push(V));for(N=1;N<J;++N)Q[N]===N&&(V!==-1&&Q[V]!==V?Q[N]=Q[V]:L!==-1&&Q[L]!==L&&(Q[N]=Q[L]));for(N=1;N<J;++N)if(E[N].type!==0){if(se=N,se!=Q[se])do se=Q[se],P[N]=P[se]+"/"+P[N];while(se!==0&&Q[se]!==-1&&se!=Q[se]);Q[N]=-1}for(P[0]+="/",N=1;N<J;++N)E[N].type!==2&&(P[N]+="/")}function m(E,P,A){for(var N=E.start,L=E.size,V=[],Z=N;A&&L>0&&Z>=0;)V.push(P.slice(Z*I,Z*I+I)),L-=I,Z=pa(A,Z*4);return V.length===0?ne(0):Ut(V).slice(0,E.size)}function x(E,P,A,N,L){var V=G;if(E===G){if(P!==0)throw new Error("DIFAT chain shorter than expected")}else if(E!==-1){var Z=A[E],se=(N>>>2)-1;if(!Z)return;for(var J=0;J<se&&(V=pa(Z,J*4))!==G;++J)L.push(V);x(pa(Z,N-4),P-1,A,N,L)}}function v(E,P,A,N,L){var V=[],Z=[];L||(L=[]);var se=N-1,J=0,Q=0;for(J=P;J>=0;){L[J]=!0,V[V.length]=J,Z.push(E[J]);var te=A[Math.floor(J*4/N)];if(Q=J*4&se,N<4+Q)throw new Error("FAT boundary crossed: "+J+" 4 "+N);if(!E[te])break;J=pa(E[te],Q)}return{nodes:V,data:md([Z])}}function y(E,P,A,N){var L=E.length,V=[],Z=[],se=[],J=[],Q=N-1,te=0,ue=0,xe=0,_e=0;for(te=0;te<L;++te)if(se=[],xe=te+P,xe>=L&&(xe-=L),!Z[xe]){J=[];var he=[];for(ue=xe;ue>=0;){he[ue]=!0,Z[ue]=!0,se[se.length]=ue,J.push(E[ue]);var we=A[Math.floor(ue*4/N)];if(_e=ue*4&Q,N<4+_e)throw new Error("FAT boundary crossed: "+ue+" 4 "+N);if(!E[we]||(ue=pa(E[we],_e),he[ue]))break}V[xe]={nodes:se,data:md([J])}}return V}function _(E,P,A,N,L,V,Z,se){for(var J=0,Q=N.length?2:0,te=P[E].data,ue=0,xe=0,_e;ue<te.length;ue+=128){var he=te.slice(ue,ue+128);Xt(he,64),xe=he.read_shift(2),_e=jl(he,0,xe-Q),N.push(_e);var we={name:_e,type:he.read_shift(1),color:he.read_shift(1),L:he.read_shift(4,"i"),R:he.read_shift(4,"i"),C:he.read_shift(4,"i"),clsid:he.read_shift(16),state:he.read_shift(4,"i"),start:0,size:0},Ne=he.read_shift(2)+he.read_shift(2)+he.read_shift(2)+he.read_shift(2);Ne!==0&&(we.ct=b(he,he.l-8));var pt=he.read_shift(2)+he.read_shift(2)+he.read_shift(2)+he.read_shift(2);pt!==0&&(we.mt=b(he,he.l-8)),we.start=he.read_shift(4,"i"),we.size=he.read_shift(4,"i"),we.size<0&&we.start<0&&(we.size=we.type=0,we.start=G,we.name=""),we.type===5?(J=we.start,L>0&&J!==G&&(P[J].name="!StreamData")):we.size>=4096?(we.storage="fat",P[we.start]===void 0&&(P[we.start]=v(A,we.start,P.fat_addrs,P.ssz)),P[we.start].name=we.name,we.content=P[we.start].data.slice(0,we.size)):(we.storage="minifat",we.size<0?we.size=0:J!==G&&we.start!==G&&P[J]&&(we.content=m(we,P[J].data,(P[se]||{}).data))),we.content&&Xt(we.content,0),V[_e]=we,Z.push(we)}}function b(E,P){return new Date((Fr(E,P+4)/1e7*Math.pow(2,32)+Fr(E,P)/1e7-11644473600)*1e3)}function D(E,P){return f(),u(c.readFileSync(E),P)}function C(E,P){var A=P&&P.type;switch(A||Ue&&Buffer.isBuffer(E)&&(A="buffer"),A||"base64"){case"file":return D(E,P);case"base64":return u(br(Er(E)),P);case"binary":return u(br(E),P)}return u(E,P)}function k(E,P){var A=P||{},N=A.root||"Root Entry";if(E.FullPaths||(E.FullPaths=[]),E.FileIndex||(E.FileIndex=[]),E.FullPaths.length!==E.FileIndex.length)throw new Error("inconsistent CFB structure");E.FullPaths.length===0&&(E.FullPaths[0]=N+"/",E.FileIndex[0]={name:N,type:5}),A.CLSID&&(E.FileIndex[0].clsid=A.CLSID),F(E)}function F(E){var P="Sh33tJ5";if(!Se.find(E,"/"+P)){var A=ne(4);A[0]=55,A[1]=A[3]=50,A[2]=54,E.FileIndex.push({name:P,type:2,content:A,size:4,L:69,R:69,C:69}),E.FullPaths.push(E.FullPaths[0]+P),O(E)}}function O(E,P){k(E);for(var A=!1,N=!1,L=E.FullPaths.length-1;L>=0;--L){var V=E.FileIndex[L];switch(V.type){case 0:N?A=!0:(E.FileIndex.pop(),E.FullPaths.pop());break;case 1:case 2:case 5:N=!0,isNaN(V.R*V.L*V.C)&&(A=!0),V.R>-1&&V.L>-1&&V.R==V.L&&(A=!0);break;default:A=!0;break}}if(!(!A&&!P)){var Z=new Date(1987,1,19),se=0,J=Object.create?Object.create(null):{},Q=[];for(L=0;L<E.FullPaths.length;++L)J[E.FullPaths[L]]=!0,E.FileIndex[L].type!==0&&Q.push([E.FullPaths[L],E.FileIndex[L]]);for(L=0;L<Q.length;++L){var te=n(Q[L][0]);N=J[te],N||(Q.push([te,{name:a(te).replace("/",""),type:1,clsid:oe,ct:Z,mt:Z,content:null}]),J[te]=!0)}for(Q.sort(function(_e,he){return r(_e[0],he[0])}),E.FullPaths=[],E.FileIndex=[],L=0;L<Q.length;++L)E.FullPaths[L]=Q[L][0],E.FileIndex[L]=Q[L][1];for(L=0;L<Q.length;++L){var ue=E.FileIndex[L],xe=E.FullPaths[L];if(ue.name=a(xe).replace("/",""),ue.L=ue.R=ue.C=-(ue.color=1),ue.size=ue.content?ue.content.length:0,ue.start=0,ue.clsid=ue.clsid||oe,L===0)ue.C=Q.length>1?1:-1,ue.size=0,ue.type=5;else if(xe.slice(-1)=="/"){for(se=L+1;se<Q.length&&n(E.FullPaths[se])!=xe;++se);for(ue.C=se>=Q.length?-1:se,se=L+1;se<Q.length&&n(E.FullPaths[se])!=n(xe);++se);ue.R=se>=Q.length?-1:se,ue.type=1}else n(E.FullPaths[L+1]||"")==n(xe)&&(ue.R=L+1),ue.type=2}}}function X(E,P){var A=P||{};if(A.fileType=="mad")return D3(E,A);switch(O(E),A.fileType){case"zip":return E3(E,A)}var N=function(_e){for(var he=0,we=0,Ne=0;Ne<_e.FileIndex.length;++Ne){var pt=_e.FileIndex[Ne];if(pt.content){var gt=pt.content.length;gt>0&&(gt<4096?he+=gt+63>>6:we+=gt+511>>9)}}for(var sr=_e.FullPaths.length+3>>2,ys=he+7>>3,ks=he+127>>7,Es=ys+we+sr+ks,Na=Es+127>>7,Gc=Na<=109?0:Math.ceil((Na-109)/127);Es+Na+Gc+127>>7>Na;)Gc=++Na<=109?0:Math.ceil((Na-109)/127);var Ln=[1,Gc,Na,ks,sr,we,he,0];return _e.FileIndex[0].size=he<<6,Ln[7]=(_e.FileIndex[0].start=Ln[0]+Ln[1]+Ln[2]+Ln[3]+Ln[4]+Ln[5])+(Ln[6]+7>>3),Ln}(E),L=ne(N[7]<<9),V=0,Z=0;{for(V=0;V<8;++V)L.write_shift(1,ae[V]);for(V=0;V<8;++V)L.write_shift(2,0);for(L.write_shift(2,62),L.write_shift(2,3),L.write_shift(2,65534),L.write_shift(2,9),L.write_shift(2,6),V=0;V<3;++V)L.write_shift(2,0);for(L.write_shift(4,0),L.write_shift(4,N[2]),L.write_shift(4,N[0]+N[1]+N[2]+N[3]-1),L.write_shift(4,0),L.write_shift(4,4096),L.write_shift(4,N[3]?N[0]+N[1]+N[2]-1:G),L.write_shift(4,N[3]),L.write_shift(-4,N[1]?N[0]-1:G),L.write_shift(4,N[1]),V=0;V<109;++V)L.write_shift(-4,V<N[2]?N[1]+V:-1)}if(N[1])for(Z=0;Z<N[1];++Z){for(;V<236+Z*127;++V)L.write_shift(-4,V<N[2]?N[1]+V:-1);L.write_shift(-4,Z===N[1]-1?G:Z+1)}var se=function(_e){for(Z+=_e;V<Z-1;++V)L.write_shift(-4,V+1);_e&&(++V,L.write_shift(-4,G))};for(Z=V=0,Z+=N[1];V<Z;++V)L.write_shift(-4,fe.DIFSECT);for(Z+=N[2];V<Z;++V)L.write_shift(-4,fe.FATSECT);se(N[3]),se(N[4]);for(var J=0,Q=0,te=E.FileIndex[0];J<E.FileIndex.length;++J)te=E.FileIndex[J],te.content&&(Q=te.content.length,!(Q<4096)&&(te.start=Z,se(Q+511>>9)));for(se(N[6]+7>>3);L.l&511;)L.write_shift(-4,fe.ENDOFCHAIN);for(Z=V=0,J=0;J<E.FileIndex.length;++J)te=E.FileIndex[J],te.content&&(Q=te.content.length,!(!Q||Q>=4096)&&(te.start=Z,se(Q+63>>6)));for(;L.l&511;)L.write_shift(-4,fe.ENDOFCHAIN);for(V=0;V<N[4]<<2;++V){var ue=E.FullPaths[V];if(!ue||ue.length===0){for(J=0;J<17;++J)L.write_shift(4,0);for(J=0;J<3;++J)L.write_shift(4,-1);for(J=0;J<12;++J)L.write_shift(4,0);continue}te=E.FileIndex[V],V===0&&(te.start=te.size?te.start-1:G);var xe=V===0&&A.root||te.name;if(Q=2*(xe.length+1),L.write_shift(64,xe,"utf16le"),L.write_shift(2,Q),L.write_shift(1,te.type),L.write_shift(1,te.color),L.write_shift(-4,te.L),L.write_shift(-4,te.R),L.write_shift(-4,te.C),te.clsid)L.write_shift(16,te.clsid,"hex");else for(J=0;J<4;++J)L.write_shift(4,0);L.write_shift(4,te.state||0),L.write_shift(4,0),L.write_shift(4,0),L.write_shift(4,0),L.write_shift(4,0),L.write_shift(4,te.start),L.write_shift(4,te.size),L.write_shift(4,0)}for(V=1;V<E.FileIndex.length;++V)if(te=E.FileIndex[V],te.size>=4096)if(L.l=te.start+1<<9,Ue&&Buffer.isBuffer(te.content))te.content.copy(L,L.l,0,te.size),L.l+=te.size+511&-512;else{for(J=0;J<te.size;++J)L.write_shift(1,te.content[J]);for(;J&511;++J)L.write_shift(1,0)}for(V=1;V<E.FileIndex.length;++V)if(te=E.FileIndex[V],te.size>0&&te.size<4096)if(Ue&&Buffer.isBuffer(te.content))te.content.copy(L,L.l,0,te.size),L.l+=te.size+63&-64;else{for(J=0;J<te.size;++J)L.write_shift(1,te.content[J]);for(;J&63;++J)L.write_shift(1,0)}if(Ue)L.l=L.length;else for(;L.l<L.length;)L.write_shift(1,0);return L}function j(E,P){var A=E.FullPaths.map(function(J){return J.toUpperCase()}),N=A.map(function(J){var Q=J.split("/");return Q[Q.length-(J.slice(-1)=="/"?2:1)]}),L=!1;P.charCodeAt(0)===47?(L=!0,P=A[0].slice(0,-1)+P):L=P.indexOf("/")!==-1;var V=P.toUpperCase(),Z=L===!0?A.indexOf(V):N.indexOf(V);if(Z!==-1)return E.FileIndex[Z];var se=!V.match(Li);for(V=V.replace(lr,""),se&&(V=V.replace(Li,"!")),Z=0;Z<A.length;++Z)if((se?A[Z].replace(Li,"!"):A[Z]).replace(lr,"")==V||(se?N[Z].replace(Li,"!"):N[Z]).replace(lr,"")==V)return E.FileIndex[Z];return null}var I=64,G=-2,re="d0cf11e0a1b11ae1",ae=[208,207,17,224,161,177,26,225],oe="00000000000000000000000000000000",fe={MAXREGSECT:-6,DIFSECT:-4,FATSECT:-3,ENDOFCHAIN:G,FREESECT:-1,HEADER_SIGNATURE:re,HEADER_MINOR_VERSION:"3e00",MAXREGSID:-6,NOSTREAM:-1,HEADER_CLSID:oe,EntryTypes:["unknown","storage","stream","lockbytes","property","root"]};function ke(E,P,A){f();var N=X(E,A);c.writeFileSync(P,N)}function H(E){for(var P=new Array(E.length),A=0;A<E.length;++A)P[A]=String.fromCharCode(E[A]);return P.join("")}function le(E,P){var A=X(E,P);switch(P&&P.type||"buffer"){case"file":return f(),c.writeFileSync(P.filename,A),A;case"binary":return typeof A=="string"?A:H(A);case"base64":return Pi(typeof A=="string"?A:H(A));case"buffer":if(Ue)return Buffer.isBuffer(A)?A:An(A);case"array":return typeof A=="string"?br(A):A}return A}var B;function w(E){try{var P=E.InflateRaw,A=new P;if(A._processChunk(new Uint8Array([3,0]),A._finishFlushFlag),A.bytesRead)B=E;else throw new Error("zlib does not expose bytesRead")}catch(N){console.error("cannot use native zlib: "+(N.message||N))}}function S(E,P){if(!B)return Gm(E,P);var A=B.InflateRaw,N=new A,L=N._processChunk(E.slice(E.l),N._finishFlushFlag);return E.l+=N.bytesRead,L}function T(E){return B?B.deflateRawSync(E):He(E)}var R=[16,17,18,0,8,7,9,6,10,5,11,4,12,3,13,2,14,1,15],W=[3,4,5,6,7,8,9,10,11,13,15,17,19,23,27,31,35,43,51,59,67,83,99,115,131,163,195,227,258],Y=[1,2,3,4,5,7,9,13,17,25,33,49,65,97,129,193,257,385,513,769,1025,1537,2049,3073,4097,6145,8193,12289,16385,24577];function q(E){var P=(E<<1|E<<11)&139536|(E<<5|E<<15)&558144;return(P>>16|P>>8|P)&255}for(var K=typeof Uint8Array<"u",ee=K?new Uint8Array(256):[],ye=0;ye<256;++ye)ee[ye]=q(ye);function M(E,P){var A=ee[E&255];return P<=8?A>>>8-P:(A=A<<8|ee[E>>8&255],P<=16?A>>>16-P:(A=A<<8|ee[E>>16&255],A>>>24-P))}function Ke(E,P){var A=P&7,N=P>>>3;return(E[N]|(A<=6?0:E[N+1]<<8))>>>A&3}function Le(E,P){var A=P&7,N=P>>>3;return(E[N]|(A<=5?0:E[N+1]<<8))>>>A&7}function Ye(E,P){var A=P&7,N=P>>>3;return(E[N]|(A<=4?0:E[N+1]<<8))>>>A&15}function $e(E,P){var A=P&7,N=P>>>3;return(E[N]|(A<=3?0:E[N+1]<<8))>>>A&31}function ve(E,P){var A=P&7,N=P>>>3;return(E[N]|(A<=1?0:E[N+1]<<8))>>>A&127}function mt(E,P,A){var N=P&7,L=P>>>3,V=(1<<A)-1,Z=E[L]>>>N;return A<8-N||(Z|=E[L+1]<<8-N,A<16-N)||(Z|=E[L+2]<<16-N,A<24-N)||(Z|=E[L+3]<<24-N),Z&V}function vr(E,P,A){var N=P&7,L=P>>>3;return N<=5?E[L]|=(A&7)<<N:(E[L]|=A<<N&255,E[L+1]=(A&7)>>8-N),P+3}function Hr(E,P,A){var N=P&7,L=P>>>3;return A=(A&1)<<N,E[L]|=A,P+1}function Rt(E,P,A){var N=P&7,L=P>>>3;return A<<=N,E[L]|=A&255,A>>>=8,E[L+1]=A,P+8}function Br(E,P,A){var N=P&7,L=P>>>3;return A<<=N,E[L]|=A&255,A>>>=8,E[L+1]=A&255,E[L+2]=A>>>8,P+16}function ut(E,P){var A=E.length,N=2*A>P?2*A:P+5,L=0;if(A>=P)return E;if(Ue){var V=Cu(N);if(E.copy)E.copy(V);else for(;L<E.length;++L)V[L]=E[L];return V}else if(K){var Z=new Uint8Array(N);if(Z.set)Z.set(E);else for(;L<A;++L)Z[L]=E[L];return Z}return E.length=N,E}function Lt(E){for(var P=new Array(E),A=0;A<E;++A)P[A]=0;return P}function jr(E,P,A){var N=1,L=0,V=0,Z=0,se=0,J=E.length,Q=K?new Uint16Array(32):Lt(32);for(V=0;V<32;++V)Q[V]=0;for(V=J;V<A;++V)E[V]=0;J=E.length;var te=K?new Uint16Array(J):Lt(J);for(V=0;V<J;++V)Q[L=E[V]]++,N<L&&(N=L),te[V]=0;for(Q[0]=0,V=1;V<=N;++V)Q[V+16]=se=se+Q[V-1]<<1;for(V=0;V<J;++V)se=E[V],se!=0&&(te[V]=Q[se+16]++);var ue=0;for(V=0;V<J;++V)if(ue=E[V],ue!=0)for(se=M(te[V],N)>>N-ue,Z=(1<<N+4-ue)-1;Z>=0;--Z)P[se|Z<<ue]=ue&15|V<<4;return N}var aa=K?new Uint16Array(512):Lt(512),_s=K?new Uint16Array(32):Lt(32);if(!K){for(var hr=0;hr<512;++hr)aa[hr]=0;for(hr=0;hr<32;++hr)_s[hr]=0}(function(){for(var E=[],P=0;P<32;P++)E.push(5);jr(E,_s,32);var A=[];for(P=0;P<=143;P++)A.push(8);for(;P<=255;P++)A.push(9);for(;P<=279;P++)A.push(7);for(;P<=287;P++)A.push(8);jr(A,aa,288)})();var kn=function(){for(var P=K?new Uint8Array(32768):[],A=0,N=0;A<Y.length-1;++A)for(;N<Y[A+1];++N)P[N]=A;for(;N<32768;++N)P[N]=29;var L=K?new Uint8Array(259):[];for(A=0,N=0;A<W.length-1;++A)for(;N<W[A+1];++N)L[N]=A;function V(se,J){for(var Q=0;Q<se.length;){var te=Math.min(65535,se.length-Q),ue=Q+te==se.length;for(J.write_shift(1,+ue),J.write_shift(2,te),J.write_shift(2,~te&65535);te-- >0;)J[J.l++]=se[Q++]}return J.l}function Z(se,J){for(var Q=0,te=0,ue=K?new Uint16Array(32768):[];te<se.length;){var xe=Math.min(65535,se.length-te);if(xe<10){for(Q=vr(J,Q,+(te+xe==se.length)),Q&7&&(Q+=8-(Q&7)),J.l=Q/8|0,J.write_shift(2,xe),J.write_shift(2,~xe&65535);xe-- >0;)J[J.l++]=se[te++];Q=J.l*8;continue}Q=vr(J,Q,+(te+xe==se.length)+2);for(var _e=0;xe-- >0;){var he=se[te];_e=(_e<<5^he)&32767;var we=-1,Ne=0;if((we=ue[_e])&&(we|=te&-32768,we>te&&(we-=32768),we<te))for(;se[we+Ne]==se[te+Ne]&&Ne<250;)++Ne;if(Ne>2){he=L[Ne],he<=22?Q=Rt(J,Q,ee[he+1]>>1)-1:(Rt(J,Q,3),Q+=5,Rt(J,Q,ee[he-23]>>5),Q+=3);var pt=he<8?0:he-4>>2;pt>0&&(Br(J,Q,Ne-W[he]),Q+=pt),he=P[te-we],Q=Rt(J,Q,ee[he]>>3),Q-=3;var gt=he<4?0:he-2>>1;gt>0&&(Br(J,Q,te-we-Y[he]),Q+=gt);for(var sr=0;sr<Ne;++sr)ue[_e]=te&32767,_e=(_e<<5^se[te])&32767,++te;xe-=Ne-1}else he<=143?he=he+48:Q=Hr(J,Q,1),Q=Rt(J,Q,ee[he]),ue[_e]=te&32767,++te}Q=Rt(J,Q,0)-1}return J.l=(Q+7)/8|0,J.l}return function(J,Q){return J.length<8?V(J,Q):Z(J,Q)}}();function He(E){var P=ne(50+Math.floor(E.length*1.1)),A=kn(E,P);return P.slice(0,A)}var St=K?new Uint16Array(32768):Lt(32768),zr=K?new Uint16Array(32768):Lt(32768),Mt=K?new Uint16Array(128):Lt(128),Ba=1,zm=1;function _3(E,P){var A=$e(E,P)+257;P+=5;var N=$e(E,P)+1;P+=5;var L=Ye(E,P)+4;P+=4;for(var V=0,Z=K?new Uint8Array(19):Lt(19),se=[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],J=1,Q=K?new Uint8Array(8):Lt(8),te=K?new Uint8Array(8):Lt(8),ue=Z.length,xe=0;xe<L;++xe)Z[R[xe]]=V=Le(E,P),J<V&&(J=V),Q[V]++,P+=3;var _e=0;for(Q[0]=0,xe=1;xe<=J;++xe)te[xe]=_e=_e+Q[xe-1]<<1;for(xe=0;xe<ue;++xe)(_e=Z[xe])!=0&&(se[xe]=te[_e]++);var he=0;for(xe=0;xe<ue;++xe)if(he=Z[xe],he!=0){_e=ee[se[xe]]>>8-he;for(var we=(1<<7-he)-1;we>=0;--we)Mt[_e|we<<he]=he&7|xe<<3}var Ne=[];for(J=1;Ne.length<A+N;)switch(_e=Mt[ve(E,P)],P+=_e&7,_e>>>=3){case 16:for(V=3+Ke(E,P),P+=2,_e=Ne[Ne.length-1];V-- >0;)Ne.push(_e);break;case 17:for(V=3+Le(E,P),P+=3;V-- >0;)Ne.push(0);break;case 18:for(V=11+ve(E,P),P+=7;V-- >0;)Ne.push(0);break;default:Ne.push(_e),J<_e&&(J=_e);break}var pt=Ne.slice(0,A),gt=Ne.slice(A);for(xe=A;xe<286;++xe)pt[xe]=0;for(xe=N;xe<30;++xe)gt[xe]=0;return Ba=jr(pt,St,286),zm=jr(gt,zr,30),P}function y3(E,P){if(E[0]==3&&!(E[1]&3))return[Xn(P),2];for(var A=0,N=0,L=Cu(P||1<<18),V=0,Z=L.length>>>0,se=0,J=0;!(N&1);){if(N=Le(E,A),A+=3,N>>>1)N>>1==1?(se=9,J=5):(A=_3(E,A),se=Ba,J=zm);else{A&7&&(A+=8-(A&7));var Q=E[A>>>3]|E[(A>>>3)+1]<<8;if(A+=32,Q>0)for(!P&&Z<V+Q&&(L=ut(L,V+Q),Z=L.length);Q-- >0;)L[V++]=E[A>>>3],A+=8;continue}for(;;){!P&&Z<V+32767&&(L=ut(L,V+32767),Z=L.length);var te=mt(E,A,se),ue=N>>>1==1?aa[te]:St[te];if(A+=ue&15,ue>>>=4,!(ue>>>8&255))L[V++]=ue;else{if(ue==256)break;ue-=257;var xe=ue<8?0:ue-4>>2;xe>5&&(xe=0);var _e=V+W[ue];xe>0&&(_e+=mt(E,A,xe),A+=xe),te=mt(E,A,J),ue=N>>>1==1?_s[te]:zr[te],A+=ue&15,ue>>>=4;var he=ue<4?0:ue-2>>1,we=Y[ue];for(he>0&&(we+=mt(E,A,he),A+=he),!P&&Z<_e&&(L=ut(L,_e+100),Z=L.length);V<_e;)L[V]=L[V-we],++V}}}return P?[L,A+7>>>3]:[L.slice(0,V),A+7>>>3]}function Gm(E,P){var A=E.slice(E.l||0),N=y3(A,P);return E.l+=N[1],N[0]}function Xm(E,P){if(E)typeof console<"u"&&console.error(P);else throw new Error(P)}function Km(E,P){var A=E;Xt(A,0);var N=[],L=[],V={FileIndex:N,FullPaths:L};k(V,{root:P.root});for(var Z=A.length-4;(A[Z]!=80||A[Z+1]!=75||A[Z+2]!=5||A[Z+3]!=6)&&Z>=0;)--Z;A.l=Z+4,A.l+=4;var se=A.read_shift(2);A.l+=6;var J=A.read_shift(4);for(A.l=J,Z=0;Z<se;++Z){A.l+=20;var Q=A.read_shift(4),te=A.read_shift(4),ue=A.read_shift(2),xe=A.read_shift(2),_e=A.read_shift(2);A.l+=8;var he=A.read_shift(4),we=o(A.slice(A.l+ue,A.l+ue+xe));A.l+=ue+xe+_e;var Ne=A.l;A.l=he+4,k3(A,Q,te,V,we),A.l=Ne}return V}function k3(E,P,A,N,L){E.l+=2;var V=E.read_shift(2),Z=E.read_shift(2),se=s(E);if(V&8257)throw new Error("Unsupported ZIP encryption");for(var J=E.read_shift(4),Q=E.read_shift(4),te=E.read_shift(4),ue=E.read_shift(2),xe=E.read_shift(2),_e="",he=0;he<ue;++he)_e+=String.fromCharCode(E[E.l++]);if(xe){var we=o(E.slice(E.l,E.l+xe));(we[21589]||{}).mt&&(se=we[21589].mt),((L||{})[21589]||{}).mt&&(se=L[21589].mt)}E.l+=xe;var Ne=E.slice(E.l,E.l+Q);switch(Z){case 8:Ne=S(E,te);break;case 0:break;default:throw new Error("Unsupported ZIP Compression method "+Z)}var pt=!1;V&8&&(J=E.read_shift(4),J==134695760&&(J=E.read_shift(4),pt=!0),Q=E.read_shift(4),te=E.read_shift(4)),Q!=P&&Xm(pt,"Bad compressed size: "+P+" != "+Q),te!=A&&Xm(pt,"Bad uncompressed size: "+A+" != "+te),zc(N,_e,Ne,{unsafe:!0,mt:se})}function E3(E,P){var A=P||{},N=[],L=[],V=ne(1),Z=A.compression?8:0,se=0,J=0,Q=0,te=0,ue=0,xe=E.FullPaths[0],_e=xe,he=E.FileIndex[0],we=[],Ne=0;for(J=1;J<E.FullPaths.length;++J)if(_e=E.FullPaths[J].slice(xe.length),he=E.FileIndex[J],!(!he.size||!he.content||_e=="Sh33tJ5")){var pt=te,gt=ne(_e.length);for(Q=0;Q<_e.length;++Q)gt.write_shift(1,_e.charCodeAt(Q)&127);gt=gt.slice(0,gt.l),we[ue]=j2.buf(he.content,0);var sr=he.content;Z==8&&(sr=T(sr)),V=ne(30),V.write_shift(4,67324752),V.write_shift(2,20),V.write_shift(2,se),V.write_shift(2,Z),he.mt?i(V,he.mt):V.write_shift(4,0),V.write_shift(-4,we[ue]),V.write_shift(4,sr.length),V.write_shift(4,he.content.length),V.write_shift(2,gt.length),V.write_shift(2,0),te+=V.length,N.push(V),te+=gt.length,N.push(gt),te+=sr.length,N.push(sr),V=ne(46),V.write_shift(4,33639248),V.write_shift(2,0),V.write_shift(2,20),V.write_shift(2,se),V.write_shift(2,Z),V.write_shift(4,0),V.write_shift(-4,we[ue]),V.write_shift(4,sr.length),V.write_shift(4,he.content.length),V.write_shift(2,gt.length),V.write_shift(2,0),V.write_shift(2,0),V.write_shift(2,0),V.write_shift(2,0),V.write_shift(4,0),V.write_shift(4,pt),Ne+=V.l,L.push(V),Ne+=gt.length,L.push(gt),++ue}return V=ne(22),V.write_shift(4,101010256),V.write_shift(2,0),V.write_shift(2,0),V.write_shift(2,ue),V.write_shift(2,ue),V.write_shift(4,Ne),V.write_shift(4,te),V.write_shift(2,0),Ut([Ut(N),Ut(L),V])}var Bo={htm:"text/html",xml:"text/xml",gif:"image/gif",jpg:"image/jpeg",png:"image/png",mso:"application/x-mso",thmx:"application/vnd.ms-officetheme",sh33tj5:"application/octet-stream"};function b3(E,P){if(E.ctype)return E.ctype;var A=E.name||"",N=A.match(/\.([^\.]+)$/);return N&&Bo[N[1]]||P&&(N=(A=P).match(/[\.\\]([^\.\\])+$/),N&&Bo[N[1]])?Bo[N[1]]:"application/octet-stream"}function S3(E){for(var P=Pi(E),A=[],N=0;N<P.length;N+=76)A.push(P.slice(N,N+76));return A.join(`\r
`)+`\r
`}function T3(E){var P=E.replace(/[\x00-\x08\x0B\x0C\x0E-\x1F\x7E-\xFF=]/g,function(Q){var te=Q.charCodeAt(0).toString(16).toUpperCase();return"="+(te.length==1?"0"+te:te)});P=P.replace(/ $/mg,"=20").replace(/\t$/mg,"=09"),P.charAt(0)==`
`&&(P="=0D"+P.slice(1)),P=P.replace(/\r(?!\n)/mg,"=0D").replace(/\n\n/mg,`
=0A`).replace(/([^\r\n])\n/mg,"$1=0A");for(var A=[],N=P.split(`\r
`),L=0;L<N.length;++L){var V=N[L];if(V.length==0){A.push("");continue}for(var Z=0;Z<V.length;){var se=76,J=V.slice(Z,Z+se);J.charAt(se-1)=="="?se--:J.charAt(se-2)=="="?se-=2:J.charAt(se-3)=="="&&(se-=3),J=V.slice(Z,Z+se),Z+=se,Z<V.length&&(J+="="),A.push(J)}}return A.join(`\r
`)}function C3(E){for(var P=[],A=0;A<E.length;++A){for(var N=E[A];A<=E.length&&N.charAt(N.length-1)=="=";)N=N.slice(0,N.length-1)+E[++A];P.push(N)}for(var L=0;L<P.length;++L)P[L]=P[L].replace(/[=][0-9A-Fa-f]{2}/g,function(V){return String.fromCharCode(parseInt(V.slice(1),16))});return br(P.join(`\r
`))}function F3(E,P,A){for(var N="",L="",V="",Z,se=0;se<10;++se){var J=P[se];if(!J||J.match(/^\s*$/))break;var Q=J.match(/^(.*?):\s*([^\s].*)$/);if(Q)switch(Q[1].toLowerCase()){case"content-location":N=Q[2].trim();break;case"content-type":V=Q[2].trim();break;case"content-transfer-encoding":L=Q[2].trim();break}}switch(++se,L.toLowerCase()){case"base64":Z=br(Er(P.slice(se).join("")));break;case"quoted-printable":Z=C3(P.slice(se));break;default:throw new Error("Unsupported Content-Transfer-Encoding "+L)}var te=zc(E,N.slice(A.length),Z,{unsafe:!0});V&&(te.ctype=V)}function A3(E,P){if(H(E.slice(0,13)).toLowerCase()!="mime-version:")throw new Error("Unsupported MAD header");var A=P&&P.root||"",N=(Ue&&Buffer.isBuffer(E)?E.toString("binary"):H(E)).split(`\r
`),L=0,V="";for(L=0;L<N.length;++L)if(V=N[L],!!/^Content-Location:/i.test(V)&&(V=V.slice(V.indexOf("file")),A||(A=V.slice(0,V.lastIndexOf("/")+1)),V.slice(0,A.length)!=A))for(;A.length>0&&(A=A.slice(0,A.length-1),A=A.slice(0,A.lastIndexOf("/")+1),V.slice(0,A.length)!=A););var Z=(N[1]||"").match(/boundary="(.*?)"/);if(!Z)throw new Error("MAD cannot find boundary");var se="--"+(Z[1]||""),J=[],Q=[],te={FileIndex:J,FullPaths:Q};k(te);var ue,xe=0;for(L=0;L<N.length;++L){var _e=N[L];_e!==se&&_e!==se+"--"||(xe++&&F3(te,N.slice(ue,L),A),ue=L)}return te}function D3(E,P){var A=P||{},N=A.boundary||"SheetJS";N="------="+N;for(var L=["MIME-Version: 1.0",'Content-Type: multipart/related; boundary="'+N.slice(2)+'"',"","",""],V=E.FullPaths[0],Z=V,se=E.FileIndex[0],J=1;J<E.FullPaths.length;++J)if(Z=E.FullPaths[J].slice(V.length),se=E.FileIndex[J],!(!se.size||!se.content||Z=="Sh33tJ5")){Z=Z.replace(/[\x00-\x08\x0B\x0C\x0E-\x1F\x7E-\xFF]/g,function(Ne){return"_x"+Ne.charCodeAt(0).toString(16)+"_"}).replace(/[\u0080-\uFFFF]/g,function(Ne){return"_u"+Ne.charCodeAt(0).toString(16)+"_"});for(var Q=se.content,te=Ue&&Buffer.isBuffer(Q)?Q.toString("binary"):H(Q),ue=0,xe=Math.min(1024,te.length),_e=0,he=0;he<=xe;++he)(_e=te.charCodeAt(he))>=32&&_e<128&&++ue;var we=ue>=xe*4/5;L.push(N),L.push("Content-Location: "+(A.root||"file:///C:/SheetJS/")+Z),L.push("Content-Transfer-Encoding: "+(we?"quoted-printable":"base64")),L.push("Content-Type: "+b3(se,Z)),L.push(""),L.push(we?T3(te):S3(te))}return L.push(N+`--\r
`),L.join(`\r
`)}function R3(E){var P={};return k(P,E),P}function zc(E,P,A,N){var L=N&&N.unsafe;L||k(E);var V=!L&&Se.find(E,P);if(!V){var Z=E.FullPaths[0];P.slice(0,Z.length)==Z?Z=P:(Z.slice(-1)!="/"&&(Z+="/"),Z=(Z+P).replace("//","/")),V={name:a(P),type:2},E.FileIndex.push(V),E.FullPaths.push(Z),L||Se.utils.cfb_gc(E)}return V.content=A,V.size=A?A.length:0,N&&(N.CLSID&&(V.clsid=N.CLSID),N.mt&&(V.mt=N.mt),N.ct&&(V.ct=N.ct)),V}function O3(E,P){k(E);var A=Se.find(E,P);if(A){for(var N=0;N<E.FileIndex.length;++N)if(E.FileIndex[N]==A)return E.FileIndex.splice(N,1),E.FullPaths.splice(N,1),!0}return!1}function B3(E,P,A){k(E);var N=Se.find(E,P);if(N){for(var L=0;L<E.FileIndex.length;++L)if(E.FileIndex[L]==N)return E.FileIndex[L].name=a(A),E.FullPaths[L]=A,!0}return!1}function N3(E){O(E,!0)}return t.find=j,t.read=C,t.parse=u,t.write=le,t.writeFile=ke,t.utils={cfb_new:R3,cfb_add:zc,cfb_del:O3,cfb_mov:B3,cfb_gc:N3,ReadShift:Gi,CheckField:Dd,prep_blob:Xt,bconcat:Ut,use_zlib:w,_deflateRaw:He,_inflateRaw:Gm,consts:fe},t}();function z2(e){return typeof e=="string"?to(e):Array.isArray(e)?x2(e):e}function Ui(e,t,r){if(typeof Deno<"u"){if(r&&typeof t=="string")switch(r){case"utf8":t=new TextEncoder(r).encode(t);break;case"binary":t=to(t);break;default:throw new Error("Unsupported encoding "+r)}return Deno.writeFileSync(e,t)}var n=r=="utf8"?gn(t):t;if(typeof IE_SaveFile<"u")return IE_SaveFile(n,e);if(typeof Blob<"u"){var a=new Blob([z2(n)],{type:"application/octet-stream"});if(typeof navigator<"u"&&navigator.msSaveBlob)return navigator.msSaveBlob(a,e);if(typeof saveAs<"u")return saveAs(a,e);if(typeof URL<"u"&&typeof document<"u"&&document.createElement&&URL.createObjectURL){var i=URL.createObjectURL(a);if(typeof chrome=="object"&&typeof(chrome.downloads||{}).download=="function")return URL.revokeObjectURL&&typeof setTimeout<"u"&&setTimeout(function(){URL.revokeObjectURL(i)},6e4),chrome.downloads.download({url:i,filename:e,saveAs:!0});var s=document.createElement("a");if(s.download!=null)return s.download=e,s.href=i,document.body.appendChild(s),s.click(),document.body.removeChild(s),URL.revokeObjectURL&&typeof setTimeout<"u"&&setTimeout(function(){URL.revokeObjectURL(i)},6e4),i}}if(typeof $<"u"&&typeof File<"u"&&typeof Folder<"u")try{var o=File(e);return o.open("w"),o.encoding="binary",Array.isArray(t)&&(t=Kn(t)),o.write(t),o.close(),t}catch(c){if(!c.message||!c.message.match(/onstruct/))throw c}throw new Error("cannot save file "+e)}function G2(e){if(typeof Deno<"u")return Deno.readFileSync(e);if(typeof $<"u"&&typeof File<"u"&&typeof Folder<"u")try{var t=File(e);t.open("r"),t.encoding="binary";var r=t.read();return t.close(),r}catch(n){if(!n.message||!n.message.match(/onstruct/))throw n}throw new Error("Cannot access file "+e)}function wt(e){for(var t=Object.keys(e),r=[],n=0;n<t.length;++n)Object.prototype.hasOwnProperty.call(e,t[n])&&r.push(t[n]);return r}function Xu(e,t){for(var r=[],n=wt(e),a=0;a!==n.length;++a)r[e[n[a]][t]]==null&&(r[e[n[a]][t]]=n[a]);return r}function io(e){for(var t=[],r=wt(e),n=0;n!==r.length;++n)t[e[r[n]]]=r[n];return t}function so(e){for(var t=[],r=wt(e),n=0;n!==r.length;++n)t[e[r[n]]]=parseInt(r[n],10);return t}function X2(e){for(var t=[],r=wt(e),n=0;n!==r.length;++n)t[e[r[n]]]==null&&(t[e[r[n]]]=[]),t[e[r[n]]].push(r[n]);return t}var oo=new Date(1899,11,30,0,0,0);function Nt(e,t){var r=e.getTime();t&&(r-=1462*24*60*60*1e3);var n=oo.getTime()+(e.getTimezoneOffset()-oo.getTimezoneOffset())*6e4;return(r-n)/(24*60*60*1e3)}var Ku=new Date,K2=oo.getTime()+(Ku.getTimezoneOffset()-oo.getTimezoneOffset())*6e4,Yu=Ku.getTimezoneOffset();function lo(e){var t=new Date;return t.setTime(e*24*60*60*1e3+K2),t.getTimezoneOffset()!==Yu&&t.setTime(t.getTime()+(t.getTimezoneOffset()-Yu)*6e4),t}function Y2(e){var t=0,r=0,n=!1,a=e.match(/P([0-9\.]+Y)?([0-9\.]+M)?([0-9\.]+D)?T([0-9\.]+H)?([0-9\.]+M)?([0-9\.]+S)?/);if(!a)throw new Error("|"+e+"| is not an ISO8601 Duration");for(var i=1;i!=a.length;++i)if(a[i]){switch(r=1,i>3&&(n=!0),a[i].slice(a[i].length-1)){case"Y":throw new Error("Unsupported ISO Duration Field: "+a[i].slice(a[i].length-1));case"D":r*=24;case"H":r*=60;case"M":if(n)r*=60;else throw new Error("Unsupported ISO Duration Field: M")}t+=r*parseInt(a[i],10)}return t}var qu=new Date("2017-02-19T19:06:09.000Z"),Ju=isNaN(qu.getFullYear())?new Date("2/19/17"):qu,q2=Ju.getFullYear()==2017;function it(e,t){var r=new Date(e);if(q2)return t>0?r.setTime(r.getTime()+r.getTimezoneOffset()*60*1e3):t<0&&r.setTime(r.getTime()-r.getTimezoneOffset()*60*1e3),r;if(e instanceof Date)return e;if(Ju.getFullYear()==1917&&!isNaN(r.getFullYear())){var n=r.getFullYear();return e.indexOf(""+n)>-1||r.setFullYear(r.getFullYear()+100),r}var a=e.match(/\d+/g)||["2017","2","19","0","0","0"],i=new Date(+a[0],+a[1]-1,+a[2],+a[3]||0,+a[4]||0,+a[5]||0);return e.indexOf("Z")>-1&&(i=new Date(i.getTime()-i.getTimezoneOffset()*60*1e3)),i}function ha(e,t){if(Ue&&Buffer.isBuffer(e)){if(t){if(e[0]==255&&e[1]==254)return gn(e.slice(2).toString("utf16le"));if(e[1]==254&&e[2]==255)return gn(Su(e.slice(2).toString("binary")))}return e.toString("binary")}if(typeof TextDecoder<"u")try{if(t){if(e[0]==255&&e[1]==254)return gn(new TextDecoder("utf-16le").decode(e.slice(2)));if(e[0]==254&&e[1]==255)return gn(new TextDecoder("utf-16be").decode(e.slice(2)))}var r={"€":"","‚":"",ƒ:"","„":"","…":"","†":"","‡":"","ˆ":"","‰":"",Š:"","‹":"",Œ:"",Ž:"","‘":"","’":"","“":"","”":"","•":"","–":"","—":"","˜":"","™":"",š:"","›":"",œ:"",ž:"",Ÿ:""};return Array.isArray(e)&&(e=new Uint8Array(e)),new TextDecoder("latin1").decode(e).replace(/[€‚ƒ„…†‡ˆ‰Š‹ŒŽ‘’“”•–—˜™š›œžŸ]/g,function(i){return r[i]||i})}catch{}for(var n=[],a=0;a!=e.length;++a)n.push(String.fromCharCode(e[a]));return n.join("")}function st(e){if(typeof JSON<"u"&&!Array.isArray(e))return JSON.parse(JSON.stringify(e));if(typeof e!="object"||e==null)return e;if(e instanceof Date)return new Date(e.getTime());var t={};for(var r in e)Object.prototype.hasOwnProperty.call(e,r)&&(t[r]=st(e[r]));return t}function _t(e,t){for(var r="";r.length<t;)r+=e;return r}function Jr(e){var t=Number(e);if(!isNaN(t))return isFinite(t)?t:NaN;if(!/\d/.test(e))return t;var r=1,n=e.replace(/([\d]),([\d])/g,"$1$2").replace(/[$]/g,"").replace(/[%]/g,function(){return r*=100,""});return!isNaN(t=Number(n))||(n=n.replace(/[(](.*)[)]/,function(a,i){return r=-r,i}),!isNaN(t=Number(n)))?t/r:t}var J2=["january","february","march","april","may","june","july","august","september","october","november","december"];function Ka(e){var t=new Date(e),r=new Date(NaN),n=t.getYear(),a=t.getMonth(),i=t.getDate();if(isNaN(i))return r;var s=e.toLowerCase();if(s.match(/jan|feb|mar|apr|may|jun|jul|aug|sep|oct|nov|dec/)){if(s=s.replace(/[^a-z]/g,"").replace(/([^a-z]|^)[ap]m?([^a-z]|$)/,""),s.length>3&&J2.indexOf(s)==-1)return r}else if(s.match(/[a-z]/))return r;return n<0||n>8099?r:(a>0||i>1)&&n!=101?t:e.match(/[^-0-9:,\/\\]/)?r:t}var Z2=function(){var e="abacaba".split(/(:?b)/i).length==5;return function(r,n,a){if(e||typeof n=="string")return r.split(n);for(var i=r.split(n),s=[i[0]],o=1;o<i.length;++o)s.push(a),s.push(i[o]);return s}}();function Zu(e){return e?e.content&&e.type?ha(e.content,!0):e.data?Ii(e.data):e.asNodeBuffer&&Ue?Ii(e.asNodeBuffer().toString("binary")):e.asBinary?Ii(e.asBinary()):e._data&&e._data.getContent?Ii(ha(Array.prototype.slice.call(e._data.getContent(),0))):null:null}function Qu(e){if(!e)return null;if(e.data)return bu(e.data);if(e.asNodeBuffer&&Ue)return e.asNodeBuffer();if(e._data&&e._data.getContent){var t=e._data.getContent();return typeof t=="string"?bu(t):Array.prototype.slice.call(t)}return e.content&&e.type?e.content:null}function Q2(e){return e&&e.name.slice(-4)===".bin"?Qu(e):Zu(e)}function Pr(e,t){for(var r=e.FullPaths||wt(e.files),n=t.toLowerCase().replace(/[\/]/g,"\\"),a=n.replace(/\\/g,"/"),i=0;i<r.length;++i){var s=r[i].replace(/^Root Entry[\/]/,"").toLowerCase();if(n==s||a==s)return e.files?e.files[r[i]]:e.FileIndex[i]}return null}function Pl(e,t){var r=Pr(e,t);if(r==null)throw new Error("Cannot find file "+t+" in zip");return r}function Ct(e,t,r){if(!r)return Q2(Pl(e,t));if(!t)return null;try{return Ct(e,t)}catch{return null}}function Tr(e,t,r){if(!r)return Zu(Pl(e,t));if(!t)return null;try{return Tr(e,t)}catch{return null}}function ed(e,t,r){if(!r)return Qu(Pl(e,t));if(!t)return null;try{return ed(e,t)}catch{return null}}function td(e){for(var t=e.FullPaths||wt(e.files),r=[],n=0;n<t.length;++n)t[n].slice(-1)!="/"&&r.push(t[n].replace(/^Root Entry[\/]/,""));return r.sort()}function Me(e,t,r){if(e.FullPaths){if(typeof r=="string"){var n;return Ue?n=An(r):n=v2(r),Se.utils.cfb_add(e,t,n)}Se.utils.cfb_add(e,t,r)}else e.file(t,r)}function Ll(){return Se.utils.cfb_new()}function rd(e,t){switch(t.type){case"base64":return Se.read(e,{type:"base64"});case"binary":return Se.read(e,{type:"binary"});case"buffer":case"array":return Se.read(e,{type:"buffer"})}throw new Error("Unrecognized type "+t.type)}function $i(e,t){if(e.charAt(0)=="/")return e.slice(1);var r=t.split("/");t.slice(-1)!="/"&&r.pop();for(var n=e.split("/");n.length!==0;){var a=n.shift();a===".."?r.pop():a!=="."&&r.push(a)}return r.join("/")}var kt=`<?xml version="1.0" encoding="UTF-8" standalone="yes"?>\r
`,e_=/([^"\s?>\/]+)\s*=\s*((?:")([^"]*)(?:")|(?:')([^']*)(?:')|([^'">\s]+))/g,nd=/<[\/\?]?[a-zA-Z0-9:_-]+(?:\s+[^"\s?>\/]+\s*=\s*(?:"[^"]*"|'[^']*'|[^'">\s=]+))*\s*[\/\?]?>/mg,t_=/<[^>]*>/g,Jt=kt.match(nd)?nd:t_,r_=/<\w*:/,n_=/<(\/?)\w+:/;function Oe(e,t,r){for(var n={},a=0,i=0;a!==e.length&&!((i=e.charCodeAt(a))===32||i===10||i===13);++a);if(t||(n[0]=e.slice(0,a)),a===e.length)return n;var s=e.match(e_),o=0,c="",f=0,u="",d="",h=1;if(s)for(f=0;f!=s.length;++f){for(d=s[f],i=0;i!=d.length&&d.charCodeAt(i)!==61;++i);for(u=d.slice(0,i).trim();d.charCodeAt(i+1)==32;)++i;for(h=(a=d.charCodeAt(i+1))==34||a==39?1:0,c=d.slice(i+1+h,d.length-h),o=0;o!=u.length&&u.charCodeAt(o)!==58;++o);if(o===u.length)u.indexOf("_")>0&&(u=u.slice(0,u.indexOf("_"))),n[u]=c,r||(n[u.toLowerCase()]=c);else{var p=(o===5&&u.slice(0,5)==="xmlns"?"xmlns":"")+u.slice(o+1);if(n[p]&&u.slice(o-3,o)=="ext")continue;n[p]=c,r||(n[p.toLowerCase()]=c)}}return n}function pn(e){return e.replace(n_,"<$1")}var ad={"&quot;":'"',"&apos;":"'","&gt;":">","&lt;":"<","&amp;":"&"},Ml=io(ad),Ge=function(){var e=/&(?:quot|apos|gt|lt|amp|#x?([\da-fA-F]+));/ig,t=/_x([\da-fA-F]{4})_/ig;return function r(n){var a=n+"",i=a.indexOf("<![CDATA[");if(i==-1)return a.replace(e,function(o,c){return ad[o]||String.fromCharCode(parseInt(c,o.indexOf("x")>-1?16:10))||o}).replace(t,function(o,c){return String.fromCharCode(parseInt(c,16))});var s=a.indexOf("]]>");return r(a.slice(0,i))+a.slice(i+9,s)+r(a.slice(s+3))}}(),Vl=/[&<>'"]/g,a_=/[\u0000-\u0008\u000b-\u001f]/g;function Qe(e){var t=e+"";return t.replace(Vl,function(r){return Ml[r]}).replace(a_,function(r){return"_x"+("000"+r.charCodeAt(0).toString(16)).slice(-4)+"_"})}function id(e){return Qe(e).replace(/ /g,"_x0020_")}var sd=/[\u0000-\u001f]/g;function Ul(e){var t=e+"";return t.replace(Vl,function(r){return Ml[r]}).replace(/\n/g,"<br/>").replace(sd,function(r){return"&#x"+("000"+r.charCodeAt(0).toString(16)).slice(-4)+";"})}function i_(e){var t=e+"";return t.replace(Vl,function(r){return Ml[r]}).replace(sd,function(r){return"&#x"+r.charCodeAt(0).toString(16).toUpperCase()+";"})}var od=function(){var e=/&#(\d+);/g;function t(r,n){return String.fromCharCode(parseInt(n,10))}return function(n){return n.replace(e,t)}}();function s_(e){return e.replace(/(\r\n|[\r\n])/g,"&#10;")}function ot(e){switch(e){case 1:case!0:case"1":case"true":case"TRUE":return!0;default:return!1}}function $l(e){for(var t="",r=0,n=0,a=0,i=0,s=0,o=0;r<e.length;){if(n=e.charCodeAt(r++),n<128){t+=String.fromCharCode(n);continue}if(a=e.charCodeAt(r++),n>191&&n<224){s=(n&31)<<6,s|=a&63,t+=String.fromCharCode(s);continue}if(i=e.charCodeAt(r++),n<240){t+=String.fromCharCode((n&15)<<12|(a&63)<<6|i&63);continue}s=e.charCodeAt(r++),o=((n&7)<<18|(a&63)<<12|(i&63)<<6|s&63)-65536,t+=String.fromCharCode(55296+(o>>>10&1023)),t+=String.fromCharCode(56320+(o&1023))}return t}function ld(e){var t=Xn(2*e.length),r,n,a=1,i=0,s=0,o;for(n=0;n<e.length;n+=a)a=1,(o=e.charCodeAt(n))<128?r=o:o<224?(r=(o&31)*64+(e.charCodeAt(n+1)&63),a=2):o<240?(r=(o&15)*4096+(e.charCodeAt(n+1)&63)*64+(e.charCodeAt(n+2)&63),a=3):(a=4,r=(o&7)*262144+(e.charCodeAt(n+1)&63)*4096+(e.charCodeAt(n+2)&63)*64+(e.charCodeAt(n+3)&63),r-=65536,s=55296+(r>>>10&1023),r=56320+(r&1023)),s!==0&&(t[i++]=s&255,t[i++]=s>>>8,s=0),t[i++]=r%256,t[i++]=r>>>8;return t.slice(0,i).toString("ucs2")}function cd(e){return An(e,"binary").toString("utf8")}var co="foo bar bazâð£",nt=Ue&&(cd(co)==$l(co)&&cd||ld(co)==$l(co)&&ld)||$l,gn=Ue?function(e){return An(e,"utf8").toString("binary")}:function(e){for(var t=[],r=0,n=0,a=0;r<e.length;)switch(n=e.charCodeAt(r++),!0){case n<128:t.push(String.fromCharCode(n));break;case n<2048:t.push(String.fromCharCode(192+(n>>6))),t.push(String.fromCharCode(128+(n&63)));break;case(n>=55296&&n<57344):n-=55296,a=e.charCodeAt(r++)-56320+(n<<10),t.push(String.fromCharCode(240+(a>>18&7))),t.push(String.fromCharCode(144+(a>>12&63))),t.push(String.fromCharCode(128+(a>>6&63))),t.push(String.fromCharCode(128+(a&63)));break;default:t.push(String.fromCharCode(224+(n>>12))),t.push(String.fromCharCode(128+(n>>6&63))),t.push(String.fromCharCode(128+(n&63)))}return t.join("")},Wi=function(){var e={};return function(r,n){var a=r+"|"+(n||"");return e[a]?e[a]:e[a]=new RegExp("<(?:\\w+:)?"+r+'(?: xml:space="preserve")?(?:[^>]*)>([\\s\\S]*?)</(?:\\w+:)?'+r+">",n||"")}}(),fd=function(){var e=[["nbsp"," "],["middot","·"],["quot",'"'],["apos","'"],["gt",">"],["lt","<"],["amp","&"]].map(function(t){return[new RegExp("&"+t[0]+";","ig"),t[1]]});return function(r){for(var n=r.replace(/^[\t\n\r ]+/,"").replace(/[\t\n\r ]+$/,"").replace(/>\s+/g,">").replace(/\s+</g,"<").replace(/[\t\n\r ]+/g," ").replace(/<\s*[bB][rR]\s*\/?>/g,`
`).replace(/<[^>]*>/g,""),a=0;a<e.length;++a)n=n.replace(e[a][0],e[a][1]);return n}}(),o_=function(){var e={};return function(r){return e[r]!==void 0?e[r]:e[r]=new RegExp("<(?:vt:)?"+r+">([\\s\\S]*?)</(?:vt:)?"+r+">","g")}}(),l_=/<\/?(?:vt:)?variant>/g,c_=/<(?:vt:)([^>]*)>([\s\S]*)</;function ud(e,t){var r=Oe(e),n=e.match(o_(r.baseType))||[],a=[];if(n.length!=r.size){if(t.WTF)throw new Error("unexpected vector length "+n.length+" != "+r.size);return a}return n.forEach(function(i){var s=i.replace(l_,"").match(c_);s&&a.push({v:nt(s[2]),t:s[1]})}),a}var dd=/(^\s|\s$|\n)/;function Gt(e,t){return"<"+e+(t.match(dd)?' xml:space="preserve"':"")+">"+t+"</"+e+">"}function Hi(e){return wt(e).map(function(t){return" "+t+'="'+e[t]+'"'}).join("")}function me(e,t,r){return"<"+e+(r!=null?Hi(r):"")+(t!=null?(t.match(dd)?' xml:space="preserve"':"")+">"+t+"</"+e:"/")+">"}function Wl(e,t){try{return e.toISOString().replace(/\.\d*/,"")}catch(r){if(t)throw r}return""}function f_(e,t){switch(typeof e){case"string":var r=me("vt:lpwstr",Qe(e));return t&&(r=r.replace(/&quot;/g,"_x0022_")),r;case"number":return me((e|0)==e?"vt:i4":"vt:r8",Qe(String(e)));case"boolean":return me("vt:bool",e?"true":"false")}if(e instanceof Date)return me("vt:filetime",Wl(e));throw new Error("Unable to serialize "+e)}function Hl(e){if(Ue&&Buffer.isBuffer(e))return e.toString("utf8");if(typeof e=="string")return e;if(typeof Uint8Array<"u"&&e instanceof Uint8Array)return nt(Kn(Ol(e)));throw new Error("Bad input format: expected Buffer or string")}var ji=/<(\/?)([^\s?><!\/:]*:|)([^\s?<>:\/]+)(?:[\s?:\/][^>]*)?>/mg,It={CORE_PROPS:"http://schemas.openxmlformats.org/package/2006/metadata/core-properties",CUST_PROPS:"http://schemas.openxmlformats.org/officeDocument/2006/custom-properties",EXT_PROPS:"http://schemas.openxmlformats.org/officeDocument/2006/extended-properties",CT:"http://schemas.openxmlformats.org/package/2006/content-types",RELS:"http://schemas.openxmlformats.org/package/2006/relationships",TCMNT:"http://schemas.microsoft.com/office/spreadsheetml/2018/threadedcomments",dc:"http://purl.org/dc/elements/1.1/",dcterms:"http://purl.org/dc/terms/",dcmitype:"http://purl.org/dc/dcmitype/",mx:"http://schemas.microsoft.com/office/mac/excel/2008/main",r:"http://schemas.openxmlformats.org/officeDocument/2006/relationships",sjs:"http://schemas.openxmlformats.org/package/2006/sheetjs/core-properties",vt:"http://schemas.openxmlformats.org/officeDocument/2006/docPropsVTypes",xsi:"http://www.w3.org/2001/XMLSchema-instance",xsd:"http://www.w3.org/2001/XMLSchema"},ma=["http://schemas.openxmlformats.org/spreadsheetml/2006/main","http://purl.oclc.org/ooxml/spreadsheetml/main","http://schemas.microsoft.com/office/excel/2006/main","http://schemas.microsoft.com/office/excel/2006/2"],Cr={o:"urn:schemas-microsoft-com:office:office",x:"urn:schemas-microsoft-com:office:excel",ss:"urn:schemas-microsoft-com:office:spreadsheet",dt:"uuid:C2F41010-65B3-11d1-A29F-00AA00C14882",mv:"http://macVmlSchemaUri",v:"urn:schemas-microsoft-com:vml",html:"http://www.w3.org/TR/REC-html40"};function u_(e,t){for(var r=1-2*(e[t+7]>>>7),n=((e[t+7]&127)<<4)+(e[t+6]>>>4&15),a=e[t+6]&15,i=5;i>=0;--i)a=a*256+e[t+i];return n==2047?a==0?r*(1/0):NaN:(n==0?n=-1022:(n-=1023,a+=Math.pow(2,52)),r*Math.pow(2,n-52)*a)}function d_(e,t,r){var n=(t<0||1/t==-1/0?1:0)<<7,a=0,i=0,s=n?-t:t;isFinite(s)?s==0?a=i=0:(a=Math.floor(Math.log(s)/Math.LN2),i=s*Math.pow(2,52-a),a<=-1023&&(!isFinite(i)||i<Math.pow(2,52))?a=-1022:(i-=Math.pow(2,52),a+=1023)):(a=2047,i=isNaN(t)?26985:0);for(var o=0;o<=5;++o,i/=256)e[r+o]=i&255;e[r+6]=(a&15)<<4|i&15,e[r+7]=a>>4|n}var hd=function(e){for(var t=[],r=10240,n=0;n<e[0].length;++n)if(e[0][n])for(var a=0,i=e[0][n].length;a<i;a+=r)t.push.apply(t,e[0][n].slice(a,a+r));return t},md=Ue?function(e){return e[0].length>0&&Buffer.isBuffer(e[0][0])?Buffer.concat(e[0].map(function(t){return Buffer.isBuffer(t)?t:An(t)})):hd(e)}:hd,pd=function(e,t,r){for(var n=[],a=t;a<r;a+=2)n.push(String.fromCharCode(Rn(e,a)));return n.join("").replace(lr,"")},jl=Ue?function(e,t,r){return Buffer.isBuffer(e)?e.toString("utf16le",t,r).replace(lr,""):pd(e,t,r)}:pd,gd=function(e,t,r){for(var n=[],a=t;a<t+r;++a)n.push(("0"+e[a].toString(16)).slice(-2));return n.join("")},xd=Ue?function(e,t,r){return Buffer.isBuffer(e)?e.toString("hex",t,t+r):gd(e,t,r)}:gd,vd=function(e,t,r){for(var n=[],a=t;a<r;a++)n.push(String.fromCharCode(Ya(e,a)));return n.join("")},zi=Ue?function(t,r,n){return Buffer.isBuffer(t)?t.toString("utf8",r,n):vd(t,r,n)}:vd,wd=function(e,t){var r=Fr(e,t);return r>0?zi(e,t+4,t+4+r-1):""},_d=wd,yd=function(e,t){var r=Fr(e,t);return r>0?zi(e,t+4,t+4+r-1):""},kd=yd,Ed=function(e,t){var r=2*Fr(e,t);return r>0?zi(e,t+4,t+4+r-1):""},bd=Ed,Sd=function(t,r){var n=Fr(t,r);return n>0?jl(t,r+4,r+4+n):""},Td=Sd,Cd=function(e,t){var r=Fr(e,t);return r>0?zi(e,t+4,t+4+r):""},Fd=Cd,Ad=function(e,t){return u_(e,t)},fo=Ad,zl=function(t){return Array.isArray(t)||typeof Uint8Array<"u"&&t instanceof Uint8Array};Ue&&(_d=function(t,r){if(!Buffer.isBuffer(t))return wd(t,r);var n=t.readUInt32LE(r);return n>0?t.toString("utf8",r+4,r+4+n-1):""},kd=function(t,r){if(!Buffer.isBuffer(t))return yd(t,r);var n=t.readUInt32LE(r);return n>0?t.toString("utf8",r+4,r+4+n-1):""},bd=function(t,r){if(!Buffer.isBuffer(t))return Ed(t,r);var n=2*t.readUInt32LE(r);return t.toString("utf16le",r+4,r+4+n-1)},Td=function(t,r){if(!Buffer.isBuffer(t))return Sd(t,r);var n=t.readUInt32LE(r);return t.toString("utf16le",r+4,r+4+n)},Fd=function(t,r){if(!Buffer.isBuffer(t))return Cd(t,r);var n=t.readUInt32LE(r);return t.toString("utf8",r+4,r+4+n)},fo=function(t,r){return Buffer.isBuffer(t)?t.readDoubleLE(r):Ad(t,r)},zl=function(t){return Buffer.isBuffer(t)||Array.isArray(t)||typeof Uint8Array<"u"&&t instanceof Uint8Array});var Ya=function(e,t){return e[t]},Rn=function(e,t){return e[t+1]*256+e[t]},h_=function(e,t){var r=e[t+1]*256+e[t];return r<32768?r:(65535-r+1)*-1},Fr=function(e,t){return e[t+3]*(1<<24)+(e[t+2]<<16)+(e[t+1]<<8)+e[t]},pa=function(e,t){return e[t+3]<<24|e[t+2]<<16|e[t+1]<<8|e[t]},m_=function(e,t){return e[t]<<24|e[t+1]<<16|e[t+2]<<8|e[t+3]};function Gi(e,t){var r="",n,a,i=[],s,o,c,f;switch(t){case"dbcs":if(f=this.l,Ue&&Buffer.isBuffer(this))r=this.slice(this.l,this.l+2*e).toString("utf16le");else for(c=0;c<e;++c)r+=String.fromCharCode(Rn(this,f)),f+=2;e*=2;break;case"utf8":r=zi(this,this.l,this.l+e);break;case"utf16le":e*=2,r=jl(this,this.l,this.l+e);break;case"wstr":return Gi.call(this,e,"dbcs");case"lpstr-ansi":r=_d(this,this.l),e=4+Fr(this,this.l);break;case"lpstr-cp":r=kd(this,this.l),e=4+Fr(this,this.l);break;case"lpwstr":r=bd(this,this.l),e=4+2*Fr(this,this.l);break;case"lpp4":e=4+Fr(this,this.l),r=Td(this,this.l),e&2&&(e+=2);break;case"8lpp4":e=4+Fr(this,this.l),r=Fd(this,this.l),e&3&&(e+=4-(e&3));break;case"cstr":for(e=0,r="";(s=Ya(this,this.l+e++))!==0;)i.push(eo(s));r=i.join("");break;case"_wstr":for(e=0,r="";(s=Rn(this,this.l+e))!==0;)i.push(eo(s)),e+=2;e+=2,r=i.join("");break;case"dbcs-cont":for(r="",f=this.l,c=0;c<e;++c){if(this.lens&&this.lens.indexOf(f)!==-1)return s=Ya(this,f),this.l=f+1,o=Gi.call(this,e-c,s?"dbcs-cont":"sbcs-cont"),i.join("")+o;i.push(eo(Rn(this,f))),f+=2}r=i.join(""),e*=2;break;case"cpstr":case"sbcs-cont":for(r="",f=this.l,c=0;c!=e;++c){if(this.lens&&this.lens.indexOf(f)!==-1)return s=Ya(this,f),this.l=f+1,o=Gi.call(this,e-c,s?"dbcs-cont":"sbcs-cont"),i.join("")+o;i.push(eo(Ya(this,f))),f+=1}r=i.join("");break;default:switch(e){case 1:return n=Ya(this,this.l),this.l++,n;case 2:return n=(t==="i"?h_:Rn)(this,this.l),this.l+=2,n;case 4:case-4:return t==="i"||!(this[this.l+3]&128)?(n=(e>0?pa:m_)(this,this.l),this.l+=4,n):(a=Fr(this,this.l),this.l+=4,a);case 8:case-8:if(t==="f")return e==8?a=fo(this,this.l):a=fo([this[this.l+7],this[this.l+6],this[this.l+5],this[this.l+4],this[this.l+3],this[this.l+2],this[this.l+1],this[this.l+0]],0),this.l+=8,a;e=8;case 16:r=xd(this,this.l,e);break}}return this.l+=e,r}var p_=function(e,t,r){e[r]=t&255,e[r+1]=t>>>8&255,e[r+2]=t>>>16&255,e[r+3]=t>>>24&255},g_=function(e,t,r){e[r]=t&255,e[r+1]=t>>8&255,e[r+2]=t>>16&255,e[r+3]=t>>24&255},x_=function(e,t,r){e[r]=t&255,e[r+1]=t>>>8&255};function v_(e,t,r){var n=0,a=0;if(r==="dbcs"){for(a=0;a!=t.length;++a)x_(this,t.charCodeAt(a),this.l+2*a);n=2*t.length}else if(r==="sbcs"){for(t=t.replace(/[^\x00-\x7F]/g,"_"),a=0;a!=t.length;++a)this[this.l+a]=t.charCodeAt(a)&255;n=t.length}else if(r==="hex"){for(;a<e;++a)this[this.l++]=parseInt(t.slice(2*a,2*a+2),16)||0;return this}else if(r==="utf16le"){var i=Math.min(this.l+e,this.length);for(a=0;a<Math.min(t.length,e);++a){var s=t.charCodeAt(a);this[this.l++]=s&255,this[this.l++]=s>>8}for(;this.l<i;)this[this.l++]=0;return this}else switch(e){case 1:n=1,this[this.l]=t&255;break;case 2:n=2,this[this.l]=t&255,t>>>=8,this[this.l+1]=t&255;break;case 3:n=3,this[this.l]=t&255,t>>>=8,this[this.l+1]=t&255,t>>>=8,this[this.l+2]=t&255;break;case 4:n=4,p_(this,t,this.l);break;case 8:if(n=8,r==="f"){d_(this,t,this.l);break}case 16:break;case-4:n=4,g_(this,t,this.l);break}return this.l+=n,this}function Dd(e,t){var r=xd(this,this.l,e.length>>1);if(r!==e)throw new Error(t+"Expected "+e+" saw "+r);this.l+=e.length>>1}function Xt(e,t){e.l=t,e.read_shift=Gi,e.chk=Dd,e.write_shift=v_}function Zt(e,t){e.l+=t}function ne(e){var t=Xn(e);return Xt(t,0),t}function On(e,t,r){if(e){var n,a,i;Xt(e,e.l||0);for(var s=e.length,o=0,c=0;e.l<s;){o=e.read_shift(1),o&128&&(o=(o&127)+((e.read_shift(1)&127)<<7));var f=us[o]||us[65535];for(n=e.read_shift(1),i=n&127,a=1;a<4&&n&128;++a)i+=((n=e.read_shift(1))&127)<<7*a;c=e.l+i;var u=f.f&&f.f(e,i,r);if(e.l=c,t(u,f,o))return}}}function pr(){var e=[],t=Ue?256:2048,r=function(f){var u=ne(f);return Xt(u,0),u},n=r(t),a=function(){n&&(n.length>n.l&&(n=n.slice(0,n.l),n.l=n.length),n.length>0&&e.push(n),n=null)},i=function(f){return n&&f<n.length-n.l?n:(a(),n=r(Math.max(f+1,t)))},s=function(){return a(),Ut(e)},o=function(f){a(),n=f,n.l==null&&(n.l=n.length),i(t)};return{next:i,push:o,end:s,_bufs:e}}function ce(e,t,r,n){var a=+t,i;if(!isNaN(a)){n||(n=us[a].p||(r||[]).length||0),i=1+(a>=128?1:0)+1,n>=128&&++i,n>=16384&&++i,n>=2097152&&++i;var s=e.next(i);a<=127?s.write_shift(1,a):(s.write_shift(1,(a&127)+128),s.write_shift(1,a>>7));for(var o=0;o!=4;++o)if(n>=128)s.write_shift(1,(n&127)+128),n>>=7;else{s.write_shift(1,n);break}n>0&&zl(r)&&e.push(r)}}function Xi(e,t,r){var n=st(e);if(t.s?(n.cRel&&(n.c+=t.s.c),n.rRel&&(n.r+=t.s.r)):(n.cRel&&(n.c+=t.c),n.rRel&&(n.r+=t.r)),!r||r.biff<12){for(;n.c>=256;)n.c-=256;for(;n.r>=65536;)n.r-=65536}return n}function Rd(e,t,r){var n=st(e);return n.s=Xi(n.s,t.s,r),n.e=Xi(n.e,t.s,r),n}function Ki(e,t){if(e.cRel&&e.c<0)for(e=st(e);e.c<0;)e.c+=t>8?16384:256;if(e.rRel&&e.r<0)for(e=st(e);e.r<0;)e.r+=t>8?1048576:t>5?65536:16384;var r=Ae(e);return!e.cRel&&e.cRel!=null&&(r=y_(r)),!e.rRel&&e.rRel!=null&&(r=w_(r)),r}function Gl(e,t){return e.s.r==0&&!e.s.rRel&&e.e.r==(t.biff>=12?1048575:t.biff>=8?65536:16384)&&!e.e.rRel?(e.s.cRel?"":"$")+dt(e.s.c)+":"+(e.e.cRel?"":"$")+dt(e.e.c):e.s.c==0&&!e.s.cRel&&e.e.c==(t.biff>=12?16383:255)&&!e.e.cRel?(e.s.rRel?"":"$")+Et(e.s.r)+":"+(e.e.rRel?"":"$")+Et(e.e.r):Ki(e.s,t.biff)+":"+Ki(e.e,t.biff)}function Xl(e){return parseInt(__(e),10)-1}function Et(e){return""+(e+1)}function w_(e){return e.replace(/([A-Z]|^)(\d+)$/,"$1$$$2")}function __(e){return e.replace(/\$(\d+)$/,"$1")}function Kl(e){for(var t=k_(e),r=0,n=0;n!==t.length;++n)r=26*r+t.charCodeAt(n)-64;return r-1}function dt(e){if(e<0)throw new Error("invalid column "+e);var t="";for(++e;e;e=Math.floor((e-1)/26))t=String.fromCharCode((e-1)%26+65)+t;return t}function y_(e){return e.replace(/^([A-Z])/,"$$$1")}function k_(e){return e.replace(/^\$([A-Z])/,"$1")}function E_(e){return e.replace(/(\$?[A-Z]*)(\$?\d*)/,"$1,$2").split(",")}function ht(e){for(var t=0,r=0,n=0;n<e.length;++n){var a=e.charCodeAt(n);a>=48&&a<=57?t=10*t+(a-48):a>=65&&a<=90&&(r=26*r+(a-64))}return{c:r-1,r:t-1}}function Ae(e){for(var t=e.c+1,r="";t;t=(t-1)/26|0)r=String.fromCharCode((t-1)%26+65)+r;return r+(e.r+1)}function gr(e){var t=e.indexOf(":");return t==-1?{s:ht(e),e:ht(e)}:{s:ht(e.slice(0,t)),e:ht(e.slice(t+1))}}function Pe(e,t){return typeof t>"u"||typeof t=="number"?Pe(e.s,e.e):(typeof e!="string"&&(e=Ae(e)),typeof t!="string"&&(t=Ae(t)),e==t?e:e+":"+t)}function Xe(e){var t={s:{c:0,r:0},e:{c:0,r:0}},r=0,n=0,a=0,i=e.length;for(r=0;n<i&&!((a=e.charCodeAt(n)-64)<1||a>26);++n)r=26*r+a;for(t.s.c=--r,r=0;n<i&&!((a=e.charCodeAt(n)-48)<0||a>9);++n)r=10*r+a;if(t.s.r=--r,n===i||a!=10)return t.e.c=t.s.c,t.e.r=t.s.r,t;for(++n,r=0;n!=i&&!((a=e.charCodeAt(n)-64)<1||a>26);++n)r=26*r+a;for(t.e.c=--r,r=0;n!=i&&!((a=e.charCodeAt(n)-48)<0||a>9);++n)r=10*r+a;return t.e.r=--r,t}function Od(e,t){var r=e.t=="d"&&t instanceof Date;if(e.z!=null)try{return e.w=Sr(e.z,r?Nt(t):t)}catch{}try{return e.w=Sr((e.XF||{}).numFmtId||(r?14:0),r?Nt(t):t)}catch{return""+t}}function Bn(e,t,r){return e==null||e.t==null||e.t=="z"?"":e.w!==void 0?e.w:(e.t=="d"&&!e.z&&r&&r.dateNF&&(e.z=r.dateNF),e.t=="e"?Nn[e.v]||e.v:t==null?Od(e,e.v):Od(e,t))}function Jn(e,t){var r=t&&t.sheet?t.sheet:"Sheet1",n={};return n[r]=e,{SheetNames:[r],Sheets:n}}function Bd(e,t,r){var n=r||{},a=e?Array.isArray(e):n.dense,i=e||(a?[]:{}),s=0,o=0;if(i&&n.origin!=null){if(typeof n.origin=="number")s=n.origin;else{var c=typeof n.origin=="string"?ht(n.origin):n.origin;s=c.r,o=c.c}i["!ref"]||(i["!ref"]="A1:A1")}var f={s:{c:1e7,r:1e7},e:{c:0,r:0}};if(i["!ref"]){var u=Xe(i["!ref"]);f.s.c=u.s.c,f.s.r=u.s.r,f.e.c=Math.max(f.e.c,u.e.c),f.e.r=Math.max(f.e.r,u.e.r),s==-1&&(f.e.r=s=u.e.r+1)}for(var d=0;d!=t.length;++d)if(t[d]){if(!Array.isArray(t[d]))throw new Error("aoa_to_sheet expects an array of arrays");for(var h=0;h!=t[d].length;++h)if(!(typeof t[d][h]>"u")){var p={v:t[d][h]},g=s+d,m=o+h;if(f.s.r>g&&(f.s.r=g),f.s.c>m&&(f.s.c=m),f.e.r<g&&(f.e.r=g),f.e.c<m&&(f.e.c=m),t[d][h]&&typeof t[d][h]=="object"&&!Array.isArray(t[d][h])&&!(t[d][h]instanceof Date))p=t[d][h];else if(Array.isArray(p.v)&&(p.f=t[d][h][1],p.v=p.v[0]),p.v===null)if(p.f)p.t="n";else if(n.nullError)p.t="e",p.v=0;else if(n.sheetStubs)p.t="z";else continue;else typeof p.v=="number"?p.t="n":typeof p.v=="boolean"?p.t="b":p.v instanceof Date?(p.z=n.dateNF||Ce[14],n.cellDates?(p.t="d",p.w=Sr(p.z,Nt(p.v))):(p.t="n",p.v=Nt(p.v),p.w=Sr(p.z,p.v))):p.t="s";if(a)i[g]||(i[g]=[]),i[g][m]&&i[g][m].z&&(p.z=i[g][m].z),i[g][m]=p;else{var x=Ae({c:m,r:g});i[x]&&i[x].z&&(p.z=i[x].z),i[x]=p}}}return f.s.c<1e7&&(i["!ref"]=Pe(f)),i}function qa(e,t){return Bd(null,e,t)}function b_(e){return e.read_shift(4,"i")}function Zr(e,t){return t||(t=ne(4)),t.write_shift(4,e),t}function Qt(e){var t=e.read_shift(4);return t===0?"":e.read_shift(t,"dbcs")}function $t(e,t){var r=!1;return t==null&&(r=!0,t=ne(4+2*e.length)),t.write_shift(4,e.length),e.length>0&&t.write_shift(0,e,"dbcs"),r?t.slice(0,t.l):t}function S_(e){return{ich:e.read_shift(2),ifnt:e.read_shift(2)}}function T_(e,t){return t||(t=ne(4)),t.write_shift(2,e.ich||0),t.write_shift(2,e.ifnt||0),t}function Yl(e,t){var r=e.l,n=e.read_shift(1),a=Qt(e),i=[],s={t:a,h:a};if(n&1){for(var o=e.read_shift(4),c=0;c!=o;++c)i.push(S_(e));s.r=i}else s.r=[{ich:0,ifnt:0}];return e.l=r+t,s}function C_(e,t){var r=!1;return t==null&&(r=!0,t=ne(15+4*e.t.length)),t.write_shift(1,0),$t(e.t,t),r?t.slice(0,t.l):t}var F_=Yl;function A_(e,t){var r=!1;return t==null&&(r=!0,t=ne(23+4*e.t.length)),t.write_shift(1,1),$t(e.t,t),t.write_shift(4,1),T_({ich:0,ifnt:0},t),r?t.slice(0,t.l):t}function Lr(e){var t=e.read_shift(4),r=e.read_shift(2);return r+=e.read_shift(1)<<16,e.l++,{c:t,iStyleRef:r}}function ga(e,t){return t==null&&(t=ne(8)),t.write_shift(-4,e.c),t.write_shift(3,e.iStyleRef||e.s),t.write_shift(1,0),t}function xa(e){var t=e.read_shift(2);return t+=e.read_shift(1)<<16,e.l++,{c:-1,iStyleRef:t}}function va(e,t){return t==null&&(t=ne(4)),t.write_shift(3,e.iStyleRef||e.s),t.write_shift(1,0),t}var D_=Qt,Nd=$t;function ql(e){var t=e.read_shift(4);return t===0||t===4294967295?"":e.read_shift(t,"dbcs")}function uo(e,t){var r=!1;return t==null&&(r=!0,t=ne(127)),t.write_shift(4,e.length>0?e.length:4294967295),e.length>0&&t.write_shift(0,e,"dbcs"),r?t.slice(0,t.l):t}var R_=Qt,Jl=ql,Zl=uo;function Ql(e){var t=e.slice(e.l,e.l+4),r=t[0]&1,n=t[0]&2;e.l+=4;var a=n===0?fo([0,0,0,0,t[0]&252,t[1],t[2],t[3]],0):pa(t,0)>>2;return r?a/100:a}function Id(e,t){t==null&&(t=ne(4));var r=0,n=0,a=e*100;if(e==(e|0)&&e>=-(1<<29)&&e<1<<29?n=1:a==(a|0)&&a>=-(1<<29)&&a<1<<29&&(n=1,r=1),n)t.write_shift(-4,((r?a:e)<<2)+(r+2));else throw new Error("unsupported RkNumber "+e)}function Pd(e){var t={s:{},e:{}};return t.s.r=e.read_shift(4),t.e.r=e.read_shift(4),t.s.c=e.read_shift(4),t.e.c=e.read_shift(4),t}function O_(e,t){return t||(t=ne(16)),t.write_shift(4,e.s.r),t.write_shift(4,e.e.r),t.write_shift(4,e.s.c),t.write_shift(4,e.e.c),t}var wa=Pd,Ja=O_;function er(e){if(e.length-e.l<8)throw"XLS Xnum Buffer underflow";return e.read_shift(8,"f")}function _a(e,t){return(t||ne(8)).write_shift(8,e,"f")}function B_(e){var t={},r=e.read_shift(1),n=r>>>1,a=e.read_shift(1),i=e.read_shift(2,"i"),s=e.read_shift(1),o=e.read_shift(1),c=e.read_shift(1);switch(e.l++,n){case 0:t.auto=1;break;case 1:t.index=a;var f=ya[a];f&&(t.rgb=Qi(f));break;case 2:t.rgb=Qi([s,o,c]);break;case 3:t.theme=a;break}return i!=0&&(t.tint=i>0?i/32767:i/32768),t}function ho(e,t){if(t||(t=ne(8)),!e||e.auto)return t.write_shift(4,0),t.write_shift(4,0),t;e.index!=null?(t.write_shift(1,2),t.write_shift(1,e.index)):e.theme!=null?(t.write_shift(1,6),t.write_shift(1,e.theme)):(t.write_shift(1,5),t.write_shift(1,0));var r=e.tint||0;if(r>0?r*=32767:r<0&&(r*=32768),t.write_shift(2,r),!e.rgb||e.theme!=null)t.write_shift(2,0),t.write_shift(1,0),t.write_shift(1,0);else{var n=e.rgb||"FFFFFF";typeof n=="number"&&(n=("000000"+n.toString(16)).slice(-6)),t.write_shift(1,parseInt(n.slice(0,2),16)),t.write_shift(1,parseInt(n.slice(2,4),16)),t.write_shift(1,parseInt(n.slice(4,6),16)),t.write_shift(1,255)}return t}function N_(e){var t=e.read_shift(1);e.l++;var r={fBold:t&1,fItalic:t&2,fUnderline:t&4,fStrikeout:t&8,fOutline:t&16,fShadow:t&32,fCondense:t&64,fExtend:t&128};return r}function I_(e,t){t||(t=ne(2));var r=(e.italic?2:0)|(e.strike?8:0)|(e.outline?16:0)|(e.shadow?32:0)|(e.condense?64:0)|(e.extend?128:0);return t.write_shift(1,r),t.write_shift(1,0),t}function Ld(e,t){var r={2:"BITMAP",3:"METAFILEPICT",8:"DIB",14:"ENHMETAFILE"},n=e.read_shift(4);switch(n){case 0:return"";case 4294967295:case 4294967294:return r[e.read_shift(4)]||""}if(n>400)throw new Error("Unsupported Clipboard: "+n.toString(16));return e.l-=4,e.read_shift(0,t==1?"lpstr":"lpwstr")}function P_(e){return Ld(e,1)}function L_(e){return Ld(e,2)}var ec=2,xr=3,mo=11,Md=12,po=19,go=64,M_=65,V_=71,U_=4108,$_=4126,Wt=80,Vd=81,W_=[Wt,Vd],tc={1:{n:"CodePage",t:ec},2:{n:"Category",t:Wt},3:{n:"PresentationFormat",t:Wt},4:{n:"ByteCount",t:xr},5:{n:"LineCount",t:xr},6:{n:"ParagraphCount",t:xr},7:{n:"SlideCount",t:xr},8:{n:"NoteCount",t:xr},9:{n:"HiddenCount",t:xr},10:{n:"MultimediaClipCount",t:xr},11:{n:"ScaleCrop",t:mo},12:{n:"HeadingPairs",t:U_},13:{n:"TitlesOfParts",t:$_},14:{n:"Manager",t:Wt},15:{n:"Company",t:Wt},16:{n:"LinksUpToDate",t:mo},17:{n:"CharacterCount",t:xr},19:{n:"SharedDoc",t:mo},22:{n:"HyperlinksChanged",t:mo},23:{n:"AppVersion",t:xr,p:"version"},24:{n:"DigSig",t:M_},26:{n:"ContentType",t:Wt},27:{n:"ContentStatus",t:Wt},28:{n:"Language",t:Wt},29:{n:"Version",t:Wt},255:{},2147483648:{n:"Locale",t:po},2147483651:{n:"Behavior",t:po},1919054434:{}},rc={1:{n:"CodePage",t:ec},2:{n:"Title",t:Wt},3:{n:"Subject",t:Wt},4:{n:"Author",t:Wt},5:{n:"Keywords",t:Wt},6:{n:"Comments",t:Wt},7:{n:"Template",t:Wt},8:{n:"LastAuthor",t:Wt},9:{n:"RevNumber",t:Wt},10:{n:"EditTime",t:go},11:{n:"LastPrinted",t:go},12:{n:"CreatedDate",t:go},13:{n:"ModifiedDate",t:go},14:{n:"PageCount",t:xr},15:{n:"WordCount",t:xr},16:{n:"CharCount",t:xr},17:{n:"Thumbnail",t:V_},18:{n:"Application",t:Wt},19:{n:"DocSecurity",t:xr},255:{},2147483648:{n:"Locale",t:po},2147483651:{n:"Behavior",t:po},1919054434:{}},Ud={1:"US",2:"CA",3:"",7:"RU",20:"EG",30:"GR",31:"NL",32:"BE",33:"FR",34:"ES",36:"HU",39:"IT",41:"CH",43:"AT",44:"GB",45:"DK",46:"SE",47:"NO",48:"PL",49:"DE",52:"MX",55:"BR",61:"AU",64:"NZ",66:"TH",81:"JP",82:"KR",84:"VN",86:"CN",90:"TR",105:"JS",213:"DZ",216:"MA",218:"LY",351:"PT",354:"IS",358:"FI",420:"CZ",886:"TW",961:"LB",962:"JO",963:"SY",964:"IQ",965:"KW",966:"SA",971:"AE",972:"IL",974:"QA",981:"IR",65535:"US"},H_=[null,"solid","mediumGray","darkGray","lightGray","darkHorizontal","darkVertical","darkDown","darkUp","darkGrid","darkTrellis","lightHorizontal","lightVertical","lightDown","lightUp","lightGrid","lightTrellis","gray125","gray0625"];function j_(e){return e.map(function(t){return[t>>16&255,t>>8&255,t&255]})}var z_=j_([0,16777215,16711680,65280,255,16776960,16711935,65535,0,16777215,16711680,65280,255,16776960,16711935,65535,8388608,32768,128,8421376,8388736,32896,12632256,8421504,10066431,10040166,16777164,13434879,6684774,16744576,26316,13421823,128,16711935,16776960,65535,8388736,8388608,32896,255,52479,13434879,13434828,16777113,10079487,16751052,13408767,16764057,3368703,3394764,10079232,16763904,16750848,16737792,6710937,9868950,13158,3381606,13056,3355392,10040064,10040166,3355545,3355443,16777215,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0]),ya=st(z_),Nn={0:"#NULL!",7:"#DIV/0!",15:"#VALUE!",23:"#REF!",29:"#NAME?",36:"#NUM!",42:"#N/A",43:"#GETTING_DATA",255:"#WTF?"},$d={"#NULL!":0,"#DIV/0!":7,"#VALUE!":15,"#REF!":23,"#NAME?":29,"#NUM!":36,"#N/A":42,"#GETTING_DATA":43,"#WTF?":255},nc={"application/vnd.openxmlformats-officedocument.spreadsheetml.sheet.main+xml":"workbooks","application/vnd.ms-excel.sheet.macroEnabled.main+xml":"workbooks","application/vnd.ms-excel.sheet.binary.macroEnabled.main":"workbooks","application/vnd.ms-excel.addin.macroEnabled.main+xml":"workbooks","application/vnd.openxmlformats-officedocument.spreadsheetml.template.main+xml":"workbooks","application/vnd.openxmlformats-officedocument.spreadsheetml.worksheet+xml":"sheets","application/vnd.ms-excel.worksheet":"sheets","application/vnd.ms-excel.binIndexWs":"TODO","application/vnd.openxmlformats-officedocument.spreadsheetml.chartsheet+xml":"charts","application/vnd.ms-excel.chartsheet":"charts","application/vnd.ms-excel.macrosheet+xml":"macros","application/vnd.ms-excel.macrosheet":"macros","application/vnd.ms-excel.intlmacrosheet":"TODO","application/vnd.ms-excel.binIndexMs":"TODO","application/vnd.openxmlformats-officedocument.spreadsheetml.dialogsheet+xml":"dialogs","application/vnd.ms-excel.dialogsheet":"dialogs","application/vnd.openxmlformats-officedocument.spreadsheetml.sharedStrings+xml":"strs","application/vnd.ms-excel.sharedStrings":"strs","application/vnd.openxmlformats-officedocument.spreadsheetml.styles+xml":"styles","application/vnd.ms-excel.styles":"styles","application/vnd.openxmlformats-package.core-properties+xml":"coreprops","application/vnd.openxmlformats-officedocument.custom-properties+xml":"custprops","application/vnd.openxmlformats-officedocument.extended-properties+xml":"extprops","application/vnd.openxmlformats-officedocument.customXmlProperties+xml":"TODO","application/vnd.openxmlformats-officedocument.spreadsheetml.customProperty":"TODO","application/vnd.openxmlformats-officedocument.spreadsheetml.comments+xml":"comments","application/vnd.ms-excel.comments":"comments","application/vnd.ms-excel.threadedcomments+xml":"threadedcomments","application/vnd.ms-excel.person+xml":"people","application/vnd.openxmlformats-officedocument.spreadsheetml.sheetMetadata+xml":"metadata","application/vnd.ms-excel.sheetMetadata":"metadata","application/vnd.ms-excel.pivotTable":"TODO","application/vnd.openxmlformats-officedocument.spreadsheetml.pivotTable+xml":"TODO","application/vnd.openxmlformats-officedocument.drawingml.chart+xml":"TODO","application/vnd.ms-office.chartcolorstyle+xml":"TODO","application/vnd.ms-office.chartstyle+xml":"TODO","application/vnd.ms-office.chartex+xml":"TODO","application/vnd.ms-excel.calcChain":"calcchains","application/vnd.openxmlformats-officedocument.spreadsheetml.calcChain+xml":"calcchains","application/vnd.openxmlformats-officedocument.spreadsheetml.printerSettings":"TODO","application/vnd.ms-office.activeX":"TODO","application/vnd.ms-office.activeX+xml":"TODO","application/vnd.ms-excel.attachedToolbars":"TODO","application/vnd.ms-excel.connections":"TODO","application/vnd.openxmlformats-officedocument.spreadsheetml.connections+xml":"TODO","application/vnd.ms-excel.externalLink":"links","application/vnd.openxmlformats-officedocument.spreadsheetml.externalLink+xml":"links","application/vnd.ms-excel.pivotCacheDefinition":"TODO","application/vnd.ms-excel.pivotCacheRecords":"TODO","application/vnd.openxmlformats-officedocument.spreadsheetml.pivotCacheDefinition+xml":"TODO","application/vnd.openxmlformats-officedocument.spreadsheetml.pivotCacheRecords+xml":"TODO","application/vnd.ms-excel.queryTable":"TODO","application/vnd.openxmlformats-officedocument.spreadsheetml.queryTable+xml":"TODO","application/vnd.ms-excel.userNames":"TODO","application/vnd.ms-excel.revisionHeaders":"TODO","application/vnd.ms-excel.revisionLog":"TODO","application/vnd.openxmlformats-officedocument.spreadsheetml.revisionHeaders+xml":"TODO","application/vnd.openxmlformats-officedocument.spreadsheetml.revisionLog+xml":"TODO","application/vnd.openxmlformats-officedocument.spreadsheetml.userNames+xml":"TODO","application/vnd.ms-excel.tableSingleCells":"TODO","application/vnd.openxmlformats-officedocument.spreadsheetml.tableSingleCells+xml":"TODO","application/vnd.ms-excel.slicer":"TODO","application/vnd.ms-excel.slicerCache":"TODO","application/vnd.ms-excel.slicer+xml":"TODO","application/vnd.ms-excel.slicerCache+xml":"TODO","application/vnd.ms-excel.wsSortMap":"TODO","application/vnd.ms-excel.table":"TODO","application/vnd.openxmlformats-officedocument.spreadsheetml.table+xml":"TODO","application/vnd.openxmlformats-officedocument.theme+xml":"themes","application/vnd.openxmlformats-officedocument.themeOverride+xml":"TODO","application/vnd.ms-excel.Timeline+xml":"TODO","application/vnd.ms-excel.TimelineCache+xml":"TODO","application/vnd.ms-office.vbaProject":"vba","application/vnd.ms-office.vbaProjectSignature":"TODO","application/vnd.ms-office.volatileDependencies":"TODO","application/vnd.openxmlformats-officedocument.spreadsheetml.volatileDependencies+xml":"TODO","application/vnd.ms-excel.controlproperties+xml":"TODO","application/vnd.openxmlformats-officedocument.model+data":"TODO","application/vnd.ms-excel.Survey+xml":"TODO","application/vnd.openxmlformats-officedocument.drawing+xml":"drawings","application/vnd.openxmlformats-officedocument.drawingml.chartshapes+xml":"TODO","application/vnd.openxmlformats-officedocument.drawingml.diagramColors+xml":"TODO","application/vnd.openxmlformats-officedocument.drawingml.diagramData+xml":"TODO","application/vnd.openxmlformats-officedocument.drawingml.diagramLayout+xml":"TODO","application/vnd.openxmlformats-officedocument.drawingml.diagramStyle+xml":"TODO","application/vnd.openxmlformats-officedocument.vmlDrawing":"TODO","application/vnd.openxmlformats-package.relationships+xml":"rels","application/vnd.openxmlformats-officedocument.oleObject":"TODO","image/png":"TODO",sheet:"js"},xo={workbooks:{xlsx:"application/vnd.openxmlformats-officedocument.spreadsheetml.sheet.main+xml",xlsm:"application/vnd.ms-excel.sheet.macroEnabled.main+xml",xlsb:"application/vnd.ms-excel.sheet.binary.macroEnabled.main",xlam:"application/vnd.ms-excel.addin.macroEnabled.main+xml",xltx:"application/vnd.openxmlformats-officedocument.spreadsheetml.template.main+xml"},strs:{xlsx:"application/vnd.openxmlformats-officedocument.spreadsheetml.sharedStrings+xml",xlsb:"application/vnd.ms-excel.sharedStrings"},comments:{xlsx:"application/vnd.openxmlformats-officedocument.spreadsheetml.comments+xml",xlsb:"application/vnd.ms-excel.comments"},sheets:{xlsx:"application/vnd.openxmlformats-officedocument.spreadsheetml.worksheet+xml",xlsb:"application/vnd.ms-excel.worksheet"},charts:{xlsx:"application/vnd.openxmlformats-officedocument.spreadsheetml.chartsheet+xml",xlsb:"application/vnd.ms-excel.chartsheet"},dialogs:{xlsx:"application/vnd.openxmlformats-officedocument.spreadsheetml.dialogsheet+xml",xlsb:"application/vnd.ms-excel.dialogsheet"},macros:{xlsx:"application/vnd.ms-excel.macrosheet+xml",xlsb:"application/vnd.ms-excel.macrosheet"},metadata:{xlsx:"application/vnd.openxmlformats-officedocument.spreadsheetml.sheetMetadata+xml",xlsb:"application/vnd.ms-excel.sheetMetadata"},styles:{xlsx:"application/vnd.openxmlformats-officedocument.spreadsheetml.styles+xml",xlsb:"application/vnd.ms-excel.styles"}};function ac(){return{workbooks:[],sheets:[],charts:[],dialogs:[],macros:[],rels:[],strs:[],comments:[],threadedcomments:[],links:[],coreprops:[],extprops:[],custprops:[],themes:[],styles:[],calcchains:[],vba:[],drawings:[],metadata:[],people:[],TODO:[],xmlns:""}}function G_(e){var t=ac();if(!e||!e.match)return t;var r={};if((e.match(Jt)||[]).forEach(function(n){var a=Oe(n);switch(a[0].replace(r_,"<")){case"<?xml":break;case"<Types":t.xmlns=a["xmlns"+(a[0].match(/<(\w+):/)||["",""])[1]];break;case"<Default":r[a.Extension]=a.ContentType;break;case"<Override":t[nc[a.ContentType]]!==void 0&&t[nc[a.ContentType]].push(a.PartName);break}}),t.xmlns!==It.CT)throw new Error("Unknown Namespace: "+t.xmlns);return t.calcchain=t.calcchains.length>0?t.calcchains[0]:"",t.sst=t.strs.length>0?t.strs[0]:"",t.style=t.styles.length>0?t.styles[0]:"",t.defaults=r,delete t.calcchains,t}function Wd(e,t){var r=X2(nc),n=[],a;n[n.length]=kt,n[n.length]=me("Types",null,{xmlns:It.CT,"xmlns:xsd":It.xsd,"xmlns:xsi":It.xsi}),n=n.concat([["xml","application/xml"],["bin","application/vnd.ms-excel.sheet.binary.macroEnabled.main"],["vml","application/vnd.openxmlformats-officedocument.vmlDrawing"],["data","application/vnd.openxmlformats-officedocument.model+data"],["bmp","image/bmp"],["png","image/png"],["gif","image/gif"],["emf","image/x-emf"],["wmf","image/x-wmf"],["jpg","image/jpeg"],["jpeg","image/jpeg"],["tif","image/tiff"],["tiff","image/tiff"],["pdf","application/pdf"],["rels","application/vnd.openxmlformats-package.relationships+xml"]].map(function(c){return me("Default",null,{Extension:c[0],ContentType:c[1]})}));var i=function(c){e[c]&&e[c].length>0&&(a=e[c][0],n[n.length]=me("Override",null,{PartName:(a[0]=="/"?"":"/")+a,ContentType:xo[c][t.bookType]||xo[c].xlsx}))},s=function(c){(e[c]||[]).forEach(function(f){n[n.length]=me("Override",null,{PartName:(f[0]=="/"?"":"/")+f,ContentType:xo[c][t.bookType]||xo[c].xlsx})})},o=function(c){(e[c]||[]).forEach(function(f){n[n.length]=me("Override",null,{PartName:(f[0]=="/"?"":"/")+f,ContentType:r[c][0]})})};return i("workbooks"),s("sheets"),s("charts"),o("themes"),["strs","styles"].forEach(i),["coreprops","extprops","custprops"].forEach(o),o("vba"),o("comments"),o("threadedcomments"),o("drawings"),s("metadata"),o("people"),n.length>2&&(n[n.length]="</Types>",n[1]=n[1].replace("/>",">")),n.join("")}var We={WB:"http://schemas.openxmlformats.org/officeDocument/2006/relationships/officeDocument",SHEET:"http://sheetjs.openxmlformats.org/officeDocument/2006/relationships/officeDocument",HLINK:"http://schemas.openxmlformats.org/officeDocument/2006/relationships/hyperlink",VML:"http://schemas.openxmlformats.org/officeDocument/2006/relationships/vmlDrawing",XPATH:"http://schemas.openxmlformats.org/officeDocument/2006/relationships/externalLinkPath",XMISS:"http://schemas.microsoft.com/office/2006/relationships/xlExternalLinkPath/xlPathMissing",XLINK:"http://schemas.openxmlformats.org/officeDocument/2006/relationships/externalLink",CXML:"http://schemas.openxmlformats.org/officeDocument/2006/relationships/customXml",CXMLP:"http://schemas.openxmlformats.org/officeDocument/2006/relationships/customXmlProps",CMNT:"http://schemas.openxmlformats.org/officeDocument/2006/relationships/comments",CORE_PROPS:"http://schemas.openxmlformats.org/package/2006/relationships/metadata/core-properties",EXT_PROPS:"http://schemas.openxmlformats.org/officeDocument/2006/relationships/extended-properties",CUST_PROPS:"http://schemas.openxmlformats.org/officeDocument/2006/relationships/custom-properties",SST:"http://schemas.openxmlformats.org/officeDocument/2006/relationships/sharedStrings",STY:"http://schemas.openxmlformats.org/officeDocument/2006/relationships/styles",THEME:"http://schemas.openxmlformats.org/officeDocument/2006/relationships/theme",CHART:"http://schemas.openxmlformats.org/officeDocument/2006/relationships/chart",CHARTEX:"http://schemas.microsoft.com/office/2014/relationships/chartEx",CS:"http://schemas.openxmlformats.org/officeDocument/2006/relationships/chartsheet",WS:["http://schemas.openxmlformats.org/officeDocument/2006/relationships/worksheet","http://purl.oclc.org/ooxml/officeDocument/relationships/worksheet"],DS:"http://schemas.openxmlformats.org/officeDocument/2006/relationships/dialogsheet",MS:"http://schemas.microsoft.com/office/2006/relationships/xlMacrosheet",IMG:"http://schemas.openxmlformats.org/officeDocument/2006/relationships/image",DRAW:"http://schemas.openxmlformats.org/officeDocument/2006/relationships/drawing",XLMETA:"http://schemas.openxmlformats.org/officeDocument/2006/relationships/sheetMetadata",TCMNT:"http://schemas.microsoft.com/office/2017/10/relationships/threadedComment",PEOPLE:"http://schemas.microsoft.com/office/2017/10/relationships/person",VBA:"http://schemas.microsoft.com/office/2006/relationships/vbaProject"};function Yi(e){var t=e.lastIndexOf("/");return e.slice(0,t+1)+"_rels/"+e.slice(t+1)+".rels"}function qi(e,t){var r={"!id":{}};if(!e)return r;t.charAt(0)!=="/"&&(t="/"+t);var n={};return(e.match(Jt)||[]).forEach(function(a){var i=Oe(a);if(i[0]==="<Relationship"){var s={};s.Type=i.Type,s.Target=i.Target,s.Id=i.Id,i.TargetMode&&(s.TargetMode=i.TargetMode);var o=i.TargetMode==="External"?i.Target:$i(i.Target,t);r[o]=s,n[i.Id]=s}}),r["!id"]=n,r}function Za(e){var t=[kt,me("Relationships",null,{xmlns:It.RELS})];return wt(e["!id"]).forEach(function(r){t[t.length]=me("Relationship",null,e["!id"][r])}),t.length>2&&(t[t.length]="</Relationships>",t[1]=t[1].replace("/>",">")),t.join("")}function et(e,t,r,n,a,i){if(a||(a={}),e["!id"]||(e["!id"]={}),e["!idx"]||(e["!idx"]=1),t<0)for(t=e["!idx"];e["!id"]["rId"+t];++t);if(e["!idx"]=t+1,a.Id="rId"+t,a.Type=n,a.Target=r,i?a.TargetMode=i:[We.HLINK,We.XPATH,We.XMISS].indexOf(a.Type)>-1&&(a.TargetMode="External"),e["!id"][a.Id])throw new Error("Cannot rewrite rId "+t);return e["!id"][a.Id]=a,e[("/"+a.Target).replace("//","/")]=a,t}var X_="application/vnd.oasis.opendocument.spreadsheet";function K_(e,t){for(var r=Hl(e),n,a;n=ji.exec(r);)switch(n[3]){case"manifest":break;case"file-entry":if(a=Oe(n[0],!1),a.path=="/"&&a.type!==X_)throw new Error("This OpenDocument is not a spreadsheet");break;case"encryption-data":case"algorithm":case"start-key-generation":case"key-derivation":throw new Error("Unsupported ODS Encryption");default:if(t&&t.WTF)throw n}}function Y_(e){var t=[kt];t.push(`<manifest:manifest xmlns:manifest="urn:oasis:names:tc:opendocument:xmlns:manifest:1.0" manifest:version="1.2">
`),t.push(`  <manifest:file-entry manifest:full-path="/" manifest:version="1.2" manifest:media-type="application/vnd.oasis.opendocument.spreadsheet"/>
`);for(var r=0;r<e.length;++r)t.push('  <manifest:file-entry manifest:full-path="'+e[r][0]+'" manifest:media-type="'+e[r][1]+`"/>
`);return t.push("</manifest:manifest>"),t.join("")}function Hd(e,t,r){return['  <rdf:Description rdf:about="'+e+`">
`,'    <rdf:type rdf:resource="http://docs.oasis-open.org/ns/office/1.2/meta/'+(r||"odf")+"#"+t+`"/>
`,`  </rdf:Description>
`].join("")}function q_(e,t){return['  <rdf:Description rdf:about="'+e+`">
`,'    <ns0:hasPart xmlns:ns0="http://docs.oasis-open.org/ns/office/1.2/meta/pkg#" rdf:resource="'+t+`"/>
`,`  </rdf:Description>
`].join("")}function J_(e){var t=[kt];t.push(`<rdf:RDF xmlns:rdf="http://www.w3.org/1999/02/22-rdf-syntax-ns#">
`);for(var r=0;r!=e.length;++r)t.push(Hd(e[r][0],e[r][1])),t.push(q_("",e[r][0]));return t.push(Hd("","Document","pkg")),t.push("</rdf:RDF>"),t.join("")}function jd(){return'<office:document-meta xmlns:office="urn:oasis:names:tc:opendocument:xmlns:office:1.0" xmlns:meta="urn:oasis:names:tc:opendocument:xmlns:meta:1.0" xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:xlink="http://www.w3.org/1999/xlink" office:version="1.2"><office:meta><meta:generator>SheetJS '+Qs.version+"</meta:generator></office:meta></office:document-meta>"}var Mr=[["cp:category","Category"],["cp:contentStatus","ContentStatus"],["cp:keywords","Keywords"],["cp:lastModifiedBy","LastAuthor"],["cp:lastPrinted","LastPrinted"],["cp:revision","RevNumber"],["cp:version","Version"],["dc:creator","Author"],["dc:description","Comments"],["dc:identifier","Identifier"],["dc:language","Language"],["dc:subject","Subject"],["dc:title","Title"],["dcterms:created","CreatedDate","date"],["dcterms:modified","ModifiedDate","date"]],Z_=function(){for(var e=new Array(Mr.length),t=0;t<Mr.length;++t){var r=Mr[t],n="(?:"+r[0].slice(0,r[0].indexOf(":"))+":)"+r[0].slice(r[0].indexOf(":")+1);e[t]=new RegExp("<"+n+"[^>]*>([\\s\\S]*?)</"+n+">")}return e}();function zd(e){var t={};e=nt(e);for(var r=0;r<Mr.length;++r){var n=Mr[r],a=e.match(Z_[r]);a!=null&&a.length>0&&(t[n[1]]=Ge(a[1])),n[2]==="date"&&t[n[1]]&&(t[n[1]]=it(t[n[1]]))}return t}function ic(e,t,r,n,a){a[e]!=null||t==null||t===""||(a[e]=t,t=Qe(t),n[n.length]=r?me(e,t,r):Gt(e,t))}function Gd(e,t){var r=t||{},n=[kt,me("cp:coreProperties",null,{"xmlns:cp":It.CORE_PROPS,"xmlns:dc":It.dc,"xmlns:dcterms":It.dcterms,"xmlns:dcmitype":It.dcmitype,"xmlns:xsi":It.xsi})],a={};if(!e&&!r.Props)return n.join("");e&&(e.CreatedDate!=null&&ic("dcterms:created",typeof e.CreatedDate=="string"?e.CreatedDate:Wl(e.CreatedDate,r.WTF),{"xsi:type":"dcterms:W3CDTF"},n,a),e.ModifiedDate!=null&&ic("dcterms:modified",typeof e.ModifiedDate=="string"?e.ModifiedDate:Wl(e.ModifiedDate,r.WTF),{"xsi:type":"dcterms:W3CDTF"},n,a));for(var i=0;i!=Mr.length;++i){var s=Mr[i],o=r.Props&&r.Props[s[1]]!=null?r.Props[s[1]]:e?e[s[1]]:null;o===!0?o="1":o===!1?o="0":typeof o=="number"&&(o=String(o)),o!=null&&ic(s[0],o,null,n,a)}return n.length>2&&(n[n.length]="</cp:coreProperties>",n[1]=n[1].replace("/>",">")),n.join("")}var ka=[["Application","Application","string"],["AppVersion","AppVersion","string"],["Company","Company","string"],["DocSecurity","DocSecurity","string"],["Manager","Manager","string"],["HyperlinksChanged","HyperlinksChanged","bool"],["SharedDoc","SharedDoc","bool"],["LinksUpToDate","LinksUpToDate","bool"],["ScaleCrop","ScaleCrop","bool"],["HeadingPairs","HeadingPairs","raw"],["TitlesOfParts","TitlesOfParts","raw"]],Xd=["Worksheets","SheetNames","NamedRanges","DefinedNames","Chartsheets","ChartNames"];function Kd(e,t,r,n){var a=[];if(typeof e=="string")a=ud(e,n);else for(var i=0;i<e.length;++i)a=a.concat(e[i].map(function(u){return{v:u}}));var s=typeof t=="string"?ud(t,n).map(function(u){return u.v}):t,o=0,c=0;if(s.length>0)for(var f=0;f!==a.length;f+=2){switch(c=+a[f+1].v,a[f].v){case"Worksheets":case"工作表":case"Листы":case"أوراق العمل":case"ワークシート":case"גליונות עבודה":case"Arbeitsblätter":case"Çalışma Sayfaları":case"Feuilles de calcul":case"Fogli di lavoro":case"Folhas de cálculo":case"Planilhas":case"Regneark":case"Hojas de cálculo":case"Werkbladen":r.Worksheets=c,r.SheetNames=s.slice(o,o+c);break;case"Named Ranges":case"Rangos con nombre":case"名前付き一覧":case"Benannte Bereiche":case"Navngivne områder":r.NamedRanges=c,r.DefinedNames=s.slice(o,o+c);break;case"Charts":case"Diagramme":r.Chartsheets=c,r.ChartNames=s.slice(o,o+c);break}o+=c}}function Q_(e,t,r){var n={};return t||(t={}),e=nt(e),ka.forEach(function(a){var i=(e.match(Wi(a[0]))||[])[1];switch(a[2]){case"string":i&&(t[a[1]]=Ge(i));break;case"bool":t[a[1]]=i==="true";break;case"raw":var s=e.match(new RegExp("<"+a[0]+"[^>]*>([\\s\\S]*?)</"+a[0]+">"));s&&s.length>0&&(n[a[1]]=s[1]);break}}),n.HeadingPairs&&n.TitlesOfParts&&Kd(n.HeadingPairs,n.TitlesOfParts,t,r),t}function Yd(e){var t=[],r=me;return e||(e={}),e.Application="SheetJS",t[t.length]=kt,t[t.length]=me("Properties",null,{xmlns:It.EXT_PROPS,"xmlns:vt":It.vt}),ka.forEach(function(n){if(e[n[1]]!==void 0){var a;switch(n[2]){case"string":a=Qe(String(e[n[1]]));break;case"bool":a=e[n[1]]?"true":"false";break}a!==void 0&&(t[t.length]=r(n[0],a))}}),t[t.length]=r("HeadingPairs",r("vt:vector",r("vt:variant","<vt:lpstr>Worksheets</vt:lpstr>")+r("vt:variant",r("vt:i4",String(e.Worksheets))),{size:2,baseType:"variant"})),t[t.length]=r("TitlesOfParts",r("vt:vector",e.SheetNames.map(function(n){return"<vt:lpstr>"+Qe(n)+"</vt:lpstr>"}).join(""),{size:e.Worksheets,baseType:"lpstr"})),t.length>2&&(t[t.length]="</Properties>",t[1]=t[1].replace("/>",">")),t.join("")}var ey=/<[^>]+>[^<]*/g;function ty(e,t){var r={},n="",a=e.match(ey);if(a)for(var i=0;i!=a.length;++i){var s=a[i],o=Oe(s);switch(o[0]){case"<?xml":break;case"<Properties":break;case"<property":n=Ge(o.name);break;case"</property>":n=null;break;default:if(s.indexOf("<vt:")===0){var c=s.split(">"),f=c[0].slice(4),u=c[1];switch(f){case"lpstr":case"bstr":case"lpwstr":r[n]=Ge(u);break;case"bool":r[n]=ot(u);break;case"i1":case"i2":case"i4":case"i8":case"int":case"uint":r[n]=parseInt(u,10);break;case"r4":case"r8":case"decimal":r[n]=parseFloat(u);break;case"filetime":case"date":r[n]=it(u);break;case"cy":case"error":r[n]=Ge(u);break;default:if(f.slice(-1)=="/")break;t.WTF&&typeof console<"u"&&console.warn("Unexpected",s,f,c)}}else if(s.slice(0,2)!=="</"){if(t.WTF)throw new Error(s)}}}return r}function qd(e){var t=[kt,me("Properties",null,{xmlns:It.CUST_PROPS,"xmlns:vt":It.vt})];if(!e)return t.join("");var r=1;return wt(e).forEach(function(a){++r,t[t.length]=me("property",f_(e[a],!0),{fmtid:"{D5CDD505-2E9C-101B-9397-08002B2CF9AE}",pid:r,name:Qe(a)})}),t.length>2&&(t[t.length]="</Properties>",t[1]=t[1].replace("/>",">")),t.join("")}var sc={Title:"Title",Subject:"Subject",Author:"Author",Keywords:"Keywords",Comments:"Description",LastAuthor:"LastAuthor",RevNumber:"Revision",Application:"AppName",LastPrinted:"LastPrinted",CreatedDate:"Created",ModifiedDate:"LastSaved",Category:"Category",Manager:"Manager",Company:"Company",AppVersion:"Version",ContentStatus:"ContentStatus",Identifier:"Identifier",Language:"Language"},oc;function ry(e,t,r){oc||(oc=io(sc)),t=oc[t]||t,e[t]=r}function ny(e,t){var r=[];return wt(sc).map(function(n){for(var a=0;a<Mr.length;++a)if(Mr[a][1]==n)return Mr[a];for(a=0;a<ka.length;++a)if(ka[a][1]==n)return ka[a];throw n}).forEach(function(n){if(e[n[1]]!=null){var a=t&&t.Props&&t.Props[n[1]]!=null?t.Props[n[1]]:e[n[1]];switch(n[2]){case"date":a=new Date(a).toISOString().replace(/\.\d*Z/,"Z");break}typeof a=="number"?a=String(a):a===!0||a===!1?a=a?"1":"0":a instanceof Date&&(a=new Date(a).toISOString().replace(/\.\d*Z/,"")),r.push(Gt(sc[n[1]]||n[1],a))}}),me("DocumentProperties",r.join(""),{xmlns:Cr.o})}function ay(e,t){var r=["Worksheets","SheetNames"],n="CustomDocumentProperties",a=[];return e&&wt(e).forEach(function(i){if(Object.prototype.hasOwnProperty.call(e,i)){for(var s=0;s<Mr.length;++s)if(i==Mr[s][1])return;for(s=0;s<ka.length;++s)if(i==ka[s][1])return;for(s=0;s<r.length;++s)if(i==r[s])return;var o=e[i],c="string";typeof o=="number"?(c="float",o=String(o)):o===!0||o===!1?(c="boolean",o=o?"1":"0"):o=String(o),a.push(me(id(i),o,{"dt:dt":c}))}}),t&&wt(t).forEach(function(i){if(Object.prototype.hasOwnProperty.call(t,i)&&!(e&&Object.prototype.hasOwnProperty.call(e,i))){var s=t[i],o="string";typeof s=="number"?(o="float",s=String(s)):s===!0||s===!1?(o="boolean",s=s?"1":"0"):s instanceof Date?(o="dateTime.tz",s=s.toISOString()):s=String(s),a.push(me(id(i),s,{"dt:dt":o}))}}),"<"+n+' xmlns="'+Cr.o+'">'+a.join("")+"</"+n+">"}function lc(e){var t=e.read_shift(4),r=e.read_shift(4);return new Date((r/1e7*Math.pow(2,32)+t/1e7-11644473600)*1e3).toISOString().replace(/\.000/,"")}function iy(e){var t=typeof e=="string"?new Date(Date.parse(e)):e,r=t.getTime()/1e3+11644473600,n=r%Math.pow(2,32),a=(r-n)/Math.pow(2,32);n*=1e7,a*=1e7;var i=n/Math.pow(2,32)|0;i>0&&(n=n%Math.pow(2,32),a+=i);var s=ne(8);return s.write_shift(4,n),s.write_shift(4,a),s}function Jd(e,t,r){var n=e.l,a=e.read_shift(0,"lpstr-cp");if(r)for(;e.l-n&3;)++e.l;return a}function Zd(e,t,r){var n=e.read_shift(0,"lpwstr");return r&&(e.l+=4-(n.length+1&3)&3),n}function Qd(e,t,r){return t===31?Zd(e):Jd(e,t,r)}function cc(e,t,r){return Qd(e,t,r===!1?0:4)}function sy(e,t){if(!t)throw new Error("VtUnalignedString must have positive length");return Qd(e,t,0)}function oy(e){for(var t=e.read_shift(4),r=[],n=0;n!=t;++n){var a=e.l;r[n]=e.read_shift(0,"lpwstr").replace(lr,""),e.l-a&2&&(e.l+=2)}return r}function ly(e){for(var t=e.read_shift(4),r=[],n=0;n!=t;++n)r[n]=e.read_shift(0,"lpstr-cp").replace(lr,"");return r}function cy(e){var t=e.l,r=vo(e,Vd);e[e.l]==0&&e[e.l+1]==0&&e.l-t&2&&(e.l+=2);var n=vo(e,xr);return[r,n]}function fy(e){for(var t=e.read_shift(4),r=[],n=0;n<t/2;++n)r.push(cy(e));return r}function eh(e,t){for(var r=e.read_shift(4),n={},a=0;a!=r;++a){var i=e.read_shift(4),s=e.read_shift(4);n[i]=e.read_shift(s,t===1200?"utf16le":"utf8").replace(lr,"").replace(Li,"!"),t===1200&&s%2&&(e.l+=2)}return e.l&3&&(e.l=e.l>>2+1<<2),n}function th(e){var t=e.read_shift(4),r=e.slice(e.l,e.l+t);return e.l+=t,(t&3)>0&&(e.l+=4-(t&3)&3),r}function uy(e){var t={};return t.Size=e.read_shift(4),e.l+=t.Size+3-(t.Size-1)%4,t}function vo(e,t,r){var n=e.read_shift(2),a,i=r||{};if(e.l+=2,t!==Md&&n!==t&&W_.indexOf(t)===-1&&!((t&65534)==4126&&(n&65534)==4126))throw new Error("Expected type "+t+" saw "+n);switch(t===Md?n:t){case 2:return a=e.read_shift(2,"i"),i.raw||(e.l+=2),a;case 3:return a=e.read_shift(4,"i"),a;case 11:return e.read_shift(4)!==0;case 19:return a=e.read_shift(4),a;case 30:return Jd(e,n,4).replace(lr,"");case 31:return Zd(e);case 64:return lc(e);case 65:return th(e);case 71:return uy(e);case 80:return cc(e,n,!i.raw).replace(lr,"");case 81:return sy(e,n).replace(lr,"");case 4108:return fy(e);case 4126:case 4127:return n==4127?oy(e):ly(e);default:throw new Error("TypedPropertyValue unrecognized type "+t+" "+n)}}function rh(e,t){var r=ne(4),n=ne(4);switch(r.write_shift(4,e==80?31:e),e){case 3:n.write_shift(-4,t);break;case 5:n=ne(8),n.write_shift(8,t,"f");break;case 11:n.write_shift(4,t?1:0);break;case 64:n=iy(t);break;case 31:case 80:for(n=ne(4+2*(t.length+1)+(t.length%2?0:2)),n.write_shift(4,t.length+1),n.write_shift(0,t,"dbcs");n.l!=n.length;)n.write_shift(1,0);break;default:throw new Error("TypedPropertyValue unrecognized type "+e+" "+t)}return Ut([r,n])}function nh(e,t){var r=e.l,n=e.read_shift(4),a=e.read_shift(4),i=[],s=0,o=0,c=-1,f={};for(s=0;s!=a;++s){var u=e.read_shift(4),d=e.read_shift(4);i[s]=[u,d+r]}i.sort(function(y,_){return y[1]-_[1]});var h={};for(s=0;s!=a;++s){if(e.l!==i[s][1]){var p=!0;if(s>0&&t)switch(t[i[s-1][0]].t){case 2:e.l+2===i[s][1]&&(e.l+=2,p=!1);break;case 80:e.l<=i[s][1]&&(e.l=i[s][1],p=!1);break;case 4108:e.l<=i[s][1]&&(e.l=i[s][1],p=!1);break}if((!t||s==0)&&e.l<=i[s][1]&&(p=!1,e.l=i[s][1]),p)throw new Error("Read Error: Expected address "+i[s][1]+" at "+e.l+" :"+s)}if(t){var g=t[i[s][0]];if(h[g.n]=vo(e,g.t,{raw:!0}),g.p==="version"&&(h[g.n]=String(h[g.n]>>16)+"."+("0000"+String(h[g.n]&65535)).slice(-4)),g.n=="CodePage")switch(h[g.n]){case 0:h[g.n]=1252;case 874:case 932:case 936:case 949:case 950:case 1250:case 1251:case 1253:case 1254:case 1255:case 1256:case 1257:case 1258:case 1e4:case 1200:case 1201:case 1252:case 65e3:case-536:case 65001:case-535:Yr(o=h[g.n]>>>0&65535);break;default:throw new Error("Unsupported CodePage: "+h[g.n])}}else if(i[s][0]===1){if(o=h.CodePage=vo(e,ec),Yr(o),c!==-1){var m=e.l;e.l=i[c][1],f=eh(e,o),e.l=m}}else if(i[s][0]===0){if(o===0){c=s,e.l=i[s+1][1];continue}f=eh(e,o)}else{var x=f[i[s][0]],v;switch(e[e.l]){case 65:e.l+=4,v=th(e);break;case 30:e.l+=4,v=cc(e,e[e.l-4]).replace(/\u0000+$/,"");break;case 31:e.l+=4,v=cc(e,e[e.l-4]).replace(/\u0000+$/,"");break;case 3:e.l+=4,v=e.read_shift(4,"i");break;case 19:e.l+=4,v=e.read_shift(4);break;case 5:e.l+=4,v=e.read_shift(8,"f");break;case 11:e.l+=4,v=bt(e,4);break;case 64:e.l+=4,v=it(lc(e));break;default:throw new Error("unparsed value: "+e[e.l])}h[x]=v}}return e.l=r+n,h}var ah=["CodePage","Thumbnail","_PID_LINKBASE","_PID_HLINKS","SystemIdentifier","FMTID"];function dy(e){switch(typeof e){case"boolean":return 11;case"number":return(e|0)==e?3:5;case"string":return 31;case"object":if(e instanceof Date)return 64;break}return-1}function ih(e,t,r){var n=ne(8),a=[],i=[],s=8,o=0,c=ne(8),f=ne(8);if(c.write_shift(4,2),c.write_shift(4,1200),f.write_shift(4,1),i.push(c),a.push(f),s+=8+c.length,!t){f=ne(8),f.write_shift(4,0),a.unshift(f);var u=[ne(4)];for(u[0].write_shift(4,e.length),o=0;o<e.length;++o){var d=e[o][0];for(c=ne(4+4+2*(d.length+1)+(d.length%2?0:2)),c.write_shift(4,o+2),c.write_shift(4,d.length+1),c.write_shift(0,d,"dbcs");c.l!=c.length;)c.write_shift(1,0);u.push(c)}c=Ut(u),i.unshift(c),s+=8+c.length}for(o=0;o<e.length;++o)if(!(t&&!t[e[o][0]])&&!(ah.indexOf(e[o][0])>-1||Xd.indexOf(e[o][0])>-1)&&e[o][1]!=null){var h=e[o][1],p=0;if(t){p=+t[e[o][0]];var g=r[p];if(g.p=="version"&&typeof h=="string"){var m=h.split(".");h=(+m[0]<<16)+(+m[1]||0)}c=rh(g.t,h)}else{var x=dy(h);x==-1&&(x=31,h=String(h)),c=rh(x,h)}i.push(c),f=ne(8),f.write_shift(4,t?p:2+o),a.push(f),s+=8+c.length}var v=8*(i.length+1);for(o=0;o<i.length;++o)a[o].write_shift(4,v),v+=i[o].length;return n.write_shift(4,s),n.write_shift(4,i.length),Ut([n].concat(a).concat(i))}function sh(e,t,r){var n=e.content;if(!n)return{};Xt(n,0);var a,i,s,o,c=0;n.chk("feff","Byte Order: "),n.read_shift(2);var f=n.read_shift(4),u=n.read_shift(16);if(u!==Se.utils.consts.HEADER_CLSID&&u!==r)throw new Error("Bad PropertySet CLSID "+u);if(a=n.read_shift(4),a!==1&&a!==2)throw new Error("Unrecognized #Sets: "+a);if(i=n.read_shift(16),o=n.read_shift(4),a===1&&o!==n.l)throw new Error("Length mismatch: "+o+" !== "+n.l);a===2&&(s=n.read_shift(16),c=n.read_shift(4));var d=nh(n,t),h={SystemIdentifier:f};for(var p in d)h[p]=d[p];if(h.FMTID=i,a===1)return h;if(c-n.l==2&&(n.l+=2),n.l!==c)throw new Error("Length mismatch 2: "+n.l+" !== "+c);var g;try{g=nh(n,null)}catch{}for(p in g)h[p]=g[p];return h.FMTID=[i,s],h}function oh(e,t,r,n,a,i){var s=ne(a?68:48),o=[s];s.write_shift(2,65534),s.write_shift(2,0),s.write_shift(4,842412599),s.write_shift(16,Se.utils.consts.HEADER_CLSID,"hex"),s.write_shift(4,a?2:1),s.write_shift(16,t,"hex"),s.write_shift(4,a?68:48);var c=ih(e,r,n);if(o.push(c),a){var f=ih(a,null,null);s.write_shift(16,i,"hex"),s.write_shift(4,68+c.length),o.push(f)}return Ut(o)}function Zn(e,t){return e.read_shift(t),null}function hy(e,t){t||(t=ne(e));for(var r=0;r<e;++r)t.write_shift(1,0);return t}function my(e,t,r){for(var n=[],a=e.l+t;e.l<a;)n.push(r(e,a-e.l));if(a!==e.l)throw new Error("Slurp error");return n}function bt(e,t){return e.read_shift(t)===1}function fr(e,t){return t||(t=ne(2)),t.write_shift(2,+!!e),t}function Ft(e){return e.read_shift(2,"u")}function Vr(e,t){return t||(t=ne(2)),t.write_shift(2,e),t}function lh(e,t){return my(e,t,Ft)}function py(e){var t=e.read_shift(1),r=e.read_shift(1);return r===1?t:t===1}function ch(e,t,r){return r||(r=ne(2)),r.write_shift(1,t=="e"?+e:+!!e),r.write_shift(1,t=="e"?1:0),r}function Ji(e,t,r){var n=e.read_shift(r&&r.biff>=12?2:1),a="sbcs-cont";if(r&&r.biff>=8,!r||r.biff==8){var i=e.read_shift(1);i&&(a="dbcs-cont")}else r.biff==12&&(a="wstr");r.biff>=2&&r.biff<=5&&(a="cpstr");var s=n?e.read_shift(n,a):"";return s}function gy(e){var t=e.read_shift(2),r=e.read_shift(1),n=r&4,a=r&8,i=1+(r&1),s=0,o,c={};a&&(s=e.read_shift(2)),n&&(o=e.read_shift(4));var f=i==2?"dbcs-cont":"sbcs-cont",u=t===0?"":e.read_shift(t,f);return a&&(e.l+=4*s),n&&(e.l+=o),c.t=u,a||(c.raw="<t>"+c.t+"</t>",c.r=c.t),c}function xy(e){var t=e.t||"",r=ne(3+0);r.write_shift(2,t.length),r.write_shift(1,1);var n=ne(2*t.length);n.write_shift(2*t.length,t,"utf16le");var a=[r,n];return Ut(a)}function Ea(e,t,r){var n;if(r){if(r.biff>=2&&r.biff<=5)return e.read_shift(t,"cpstr");if(r.biff>=12)return e.read_shift(t,"dbcs-cont")}var a=e.read_shift(1);return a===0?n=e.read_shift(t,"sbcs-cont"):n=e.read_shift(t,"dbcs-cont"),n}function Zi(e,t,r){var n=e.read_shift(r&&r.biff==2?1:2);return n===0?(e.l++,""):Ea(e,n,r)}function ba(e,t,r){if(r.biff>5)return Zi(e,t,r);var n=e.read_shift(1);return n===0?(e.l++,""):e.read_shift(n,r.biff<=4||!e.lens?"cpstr":"sbcs-cont")}function fh(e,t,r){return r||(r=ne(3+2*e.length)),r.write_shift(2,e.length),r.write_shift(1,1),r.write_shift(31,e,"utf16le"),r}function vy(e){var t=e.read_shift(1);e.l++;var r=e.read_shift(2);return e.l+=2,[t,r]}function wy(e){var t=e.read_shift(4),r=e.l,n=!1;t>24&&(e.l+=t-24,e.read_shift(16)==="795881f43b1d7f48af2c825dc4852763"&&(n=!0),e.l=r);var a=e.read_shift((n?t-24:t)>>1,"utf16le").replace(lr,"");return n&&(e.l+=24),a}function _y(e){for(var t=e.read_shift(2),r="";t-- >0;)r+="../";var n=e.read_shift(0,"lpstr-ansi");if(e.l+=2,e.read_shift(2)!=57005)throw new Error("Bad FileMoniker");var a=e.read_shift(4);if(a===0)return r+n.replace(/\\/g,"/");var i=e.read_shift(4);if(e.read_shift(2)!=3)throw new Error("Bad FileMoniker");var s=e.read_shift(i>>1,"utf16le").replace(lr,"");return r+s}function yy(e,t){var r=e.read_shift(16);switch(r){case"e0c9ea79f9bace118c8200aa004ba90b":return wy(e);case"0303000000000000c000000000000046":return _y(e);default:throw new Error("Unsupported Moniker "+r)}}function wo(e){var t=e.read_shift(4),r=t>0?e.read_shift(t,"utf16le").replace(lr,""):"";return r}function uh(e,t){t||(t=ne(6+e.length*2)),t.write_shift(4,1+e.length);for(var r=0;r<e.length;++r)t.write_shift(2,e.charCodeAt(r));return t.write_shift(2,0),t}function ky(e,t){var r=e.l+t,n=e.read_shift(4);if(n!==2)throw new Error("Unrecognized streamVersion: "+n);var a=e.read_shift(2);e.l+=2;var i,s,o,c,f="",u,d;a&16&&(i=wo(e,r-e.l)),a&128&&(s=wo(e,r-e.l)),(a&257)===257&&(o=wo(e,r-e.l)),(a&257)===1&&(c=yy(e,r-e.l)),a&8&&(f=wo(e,r-e.l)),a&32&&(u=e.read_shift(16)),a&64&&(d=lc(e)),e.l=r;var h=s||o||c||"";h&&f&&(h+="#"+f),h||(h="#"+f),a&2&&h.charAt(0)=="/"&&h.charAt(1)!="/"&&(h="file://"+h);var p={Target:h};return u&&(p.guid=u),d&&(p.time=d),i&&(p.Tooltip=i),p}function Ey(e){var t=ne(512),r=0,n=e.Target;n.slice(0,7)=="file://"&&(n=n.slice(7));var a=n.indexOf("#"),i=a>-1?31:23;switch(n.charAt(0)){case"#":i=28;break;case".":i&=-3;break}t.write_shift(4,2),t.write_shift(4,i);var s=[8,6815827,6619237,4849780,83];for(r=0;r<s.length;++r)t.write_shift(4,s[r]);if(i==28)n=n.slice(1),uh(n,t);else if(i&2){for(s="e0 c9 ea 79 f9 ba ce 11 8c 82 00 aa 00 4b a9 0b".split(" "),r=0;r<s.length;++r)t.write_shift(1,parseInt(s[r],16));var o=a>-1?n.slice(0,a):n;for(t.write_shift(4,2*(o.length+1)),r=0;r<o.length;++r)t.write_shift(2,o.charCodeAt(r));t.write_shift(2,0),i&8&&uh(a>-1?n.slice(a+1):"",t)}else{for(s="03 03 00 00 00 00 00 00 c0 00 00 00 00 00 00 46".split(" "),r=0;r<s.length;++r)t.write_shift(1,parseInt(s[r],16));for(var c=0;n.slice(c*3,c*3+3)=="../"||n.slice(c*3,c*3+3)=="..\\";)++c;for(t.write_shift(2,c),t.write_shift(4,n.length-3*c+1),r=0;r<n.length-3*c;++r)t.write_shift(1,n.charCodeAt(r+3*c)&255);for(t.write_shift(1,0),t.write_shift(2,65535),t.write_shift(2,57005),r=0;r<6;++r)t.write_shift(4,0)}return t.slice(0,t.l)}function dh(e){var t=e.read_shift(1),r=e.read_shift(1),n=e.read_shift(1),a=e.read_shift(1);return[t,r,n,a]}function hh(e,t){var r=dh(e);return r[3]=0,r}function xn(e){var t=e.read_shift(2),r=e.read_shift(2),n=e.read_shift(2);return{r:t,c:r,ixfe:n}}function Sa(e,t,r,n){return n||(n=ne(6)),n.write_shift(2,e),n.write_shift(2,t),n.write_shift(2,r||0),n}function by(e){var t=e.read_shift(2),r=e.read_shift(2);return e.l+=8,{type:t,flags:r}}function Sy(e,t,r){return t===0?"":ba(e,t,r)}function Ty(e,t,r){var n=r.biff>8?4:2,a=e.read_shift(n),i=e.read_shift(n,"i"),s=e.read_shift(n,"i");return[a,i,s]}function mh(e){var t=e.read_shift(2),r=Ql(e);return[t,r]}function Cy(e,t,r){e.l+=4,t-=4;var n=e.l+t,a=Ji(e,t,r),i=e.read_shift(2);if(n-=e.l,i!==n)throw new Error("Malformed AddinUdf: padding = "+n+" != "+i);return e.l+=i,a}function _o(e){var t=e.read_shift(2),r=e.read_shift(2),n=e.read_shift(2),a=e.read_shift(2);return{s:{c:n,r:t},e:{c:a,r}}}function ph(e,t){return t||(t=ne(8)),t.write_shift(2,e.s.r),t.write_shift(2,e.e.r),t.write_shift(2,e.s.c),t.write_shift(2,e.e.c),t}function gh(e){var t=e.read_shift(2),r=e.read_shift(2),n=e.read_shift(1),a=e.read_shift(1);return{s:{c:n,r:t},e:{c:a,r}}}var Fy=gh;function xh(e){e.l+=4;var t=e.read_shift(2),r=e.read_shift(2),n=e.read_shift(2);return e.l+=12,[r,t,n]}function Ay(e){var t={};return e.l+=4,e.l+=16,t.fSharedNote=e.read_shift(2),e.l+=4,t}function Dy(e){var t={};return e.l+=4,e.cf=e.read_shift(2),t}function tr(e){e.l+=2,e.l+=e.read_shift(2)}var Ry={0:tr,4:tr,5:tr,6:tr,7:Dy,8:tr,9:tr,10:tr,11:tr,12:tr,13:Ay,14:tr,15:tr,16:tr,17:tr,18:tr,19:tr,20:tr,21:xh};function Oy(e,t){for(var r=e.l+t,n=[];e.l<r;){var a=e.read_shift(2);e.l-=2;try{n.push(Ry[a](e,r-e.l))}catch{return e.l=r,n}}return e.l!=r&&(e.l=r),n}function yo(e,t){var r={BIFFVer:0,dt:0};switch(r.BIFFVer=e.read_shift(2),t-=2,t>=2&&(r.dt=e.read_shift(2),e.l-=2),r.BIFFVer){case 1536:case 1280:case 1024:case 768:case 512:case 2:case 7:break;default:if(t>6)throw new Error("Unexpected BIFF Ver "+r.BIFFVer)}return e.read_shift(t),r}function fc(e,t,r){var n=1536,a=16;switch(r.bookType){case"biff8":break;case"biff5":n=1280,a=8;break;case"biff4":n=4,a=6;break;case"biff3":n=3,a=6;break;case"biff2":n=2,a=4;break;case"xla":break;default:throw new Error("unsupported BIFF version")}var i=ne(a);return i.write_shift(2,n),i.write_shift(2,t),a>4&&i.write_shift(2,29282),a>6&&i.write_shift(2,1997),a>8&&(i.write_shift(2,49161),i.write_shift(2,1),i.write_shift(2,1798),i.write_shift(2,0)),i}function By(e,t){return t===0||e.read_shift(2),1200}function Ny(e,t,r){if(r.enc)return e.l+=t,"";var n=e.l,a=ba(e,0,r);return e.read_shift(t+n-e.l),a}function Iy(e,t){var r=!t||t.biff==8,n=ne(r?112:54);for(n.write_shift(t.biff==8?2:1,7),r&&n.write_shift(1,0),n.write_shift(4,859007059),n.write_shift(4,5458548|(r?0:536870912));n.l<n.length;)n.write_shift(1,r?0:32);return n}function Py(e,t,r){var n=r&&r.biff==8||t==2?e.read_shift(2):(e.l+=t,0);return{fDialog:n&16,fBelow:n&64,fRight:n&128}}function Ly(e,t,r){var n=e.read_shift(4),a=e.read_shift(1)&3,i=e.read_shift(1);switch(i){case 0:i="Worksheet";break;case 1:i="Macrosheet";break;case 2:i="Chartsheet";break;case 6:i="VBAModule";break}var s=Ji(e,0,r);return s.length===0&&(s="Sheet1"),{pos:n,hs:a,dt:i,name:s}}function My(e,t){var r=!t||t.biff>=8?2:1,n=ne(8+r*e.name.length);n.write_shift(4,e.pos),n.write_shift(1,e.hs||0),n.write_shift(1,e.dt),n.write_shift(1,e.name.length),t.biff>=8&&n.write_shift(1,1),n.write_shift(r*e.name.length,e.name,t.biff<8?"sbcs":"utf16le");var a=n.slice(0,n.l);return a.l=n.l,a}function Vy(e,t){for(var r=e.l+t,n=e.read_shift(4),a=e.read_shift(4),i=[],s=0;s!=a&&e.l<r;++s)i.push(gy(e));return i.Count=n,i.Unique=a,i}function Uy(e,t){var r=ne(8);r.write_shift(4,e.Count),r.write_shift(4,e.Unique);for(var n=[],a=0;a<e.length;++a)n[a]=xy(e[a]);var i=Ut([r].concat(n));return i.parts=[r.length].concat(n.map(function(s){return s.length})),i}function $y(e,t){var r={};return r.dsst=e.read_shift(2),e.l+=t-2,r}function Wy(e){var t={};t.r=e.read_shift(2),t.c=e.read_shift(2),t.cnt=e.read_shift(2)-t.c;var r=e.read_shift(2);e.l+=4;var n=e.read_shift(1);return e.l+=3,n&7&&(t.level=n&7),n&32&&(t.hidden=!0),n&64&&(t.hpt=r/20),t}function Hy(e){var t=by(e);if(t.type!=2211)throw new Error("Invalid Future Record "+t.type);var r=e.read_shift(4);return r!==0}function jy(e){return e.read_shift(2),e.read_shift(4)}function vh(e,t,r){var n=0;r&&r.biff==2||(n=e.read_shift(2));var a=e.read_shift(2);r&&r.biff==2&&(n=1-(a>>15),a&=32767);var i={Unsynced:n&1,DyZero:(n&2)>>1,ExAsc:(n&4)>>2,ExDsc:(n&8)>>3};return[i,a]}function zy(e){var t=e.read_shift(2),r=e.read_shift(2),n=e.read_shift(2),a=e.read_shift(2),i=e.read_shift(2),s=e.read_shift(2),o=e.read_shift(2),c=e.read_shift(2),f=e.read_shift(2);return{Pos:[t,r],Dim:[n,a],Flags:i,CurTab:s,FirstTab:o,Selected:c,TabRatio:f}}function Gy(){var e=ne(18);return e.write_shift(2,0),e.write_shift(2,0),e.write_shift(2,29280),e.write_shift(2,17600),e.write_shift(2,56),e.write_shift(2,0),e.write_shift(2,0),e.write_shift(2,1),e.write_shift(2,500),e}function Xy(e,t,r){if(r&&r.biff>=2&&r.biff<5)return{};var n=e.read_shift(2);return{RTL:n&64}}function Ky(e){var t=ne(18),r=1718;return e&&e.RTL&&(r|=64),t.write_shift(2,r),t.write_shift(4,0),t.write_shift(4,64),t.write_shift(4,0),t.write_shift(4,0),t}function Yy(){}function qy(e,t,r){var n={dyHeight:e.read_shift(2),fl:e.read_shift(2)};switch(r&&r.biff||8){case 2:break;case 3:case 4:e.l+=2;break;default:e.l+=10;break}return n.name=Ji(e,0,r),n}function Jy(e,t){var r=e.name||"Arial",n=t&&t.biff==5,a=n?15+r.length:16+2*r.length,i=ne(a);return i.write_shift(2,(e.sz||12)*20),i.write_shift(4,0),i.write_shift(2,400),i.write_shift(4,0),i.write_shift(2,0),i.write_shift(1,r.length),n||i.write_shift(1,1),i.write_shift((n?1:2)*r.length,r,n?"sbcs":"utf16le"),i}function Zy(e){var t=xn(e);return t.isst=e.read_shift(4),t}function Qy(e,t,r,n){var a=ne(10);return Sa(e,t,n,a),a.write_shift(4,r),a}function ek(e,t,r){r.biffguess&&r.biff==2&&(r.biff=5);var n=e.l+t,a=xn(e);r.biff==2&&e.l++;var i=Zi(e,n-e.l,r);return a.val=i,a}function tk(e,t,r,n,a){var i=!a||a.biff==8,s=ne(6+2+ +i+(1+i)*r.length);return Sa(e,t,n,s),s.write_shift(2,r.length),i&&s.write_shift(1,1),s.write_shift((1+i)*r.length,r,i?"utf16le":"sbcs"),s}function rk(e,t,r){var n=e.read_shift(2),a=ba(e,0,r);return[n,a]}function nk(e,t,r,n){var a=r&&r.biff==5;n||(n=ne(a?3+t.length:5+2*t.length)),n.write_shift(2,e),n.write_shift(a?1:2,t.length),a||n.write_shift(1,1),n.write_shift((a?1:2)*t.length,t,a?"sbcs":"utf16le");var i=n.length>n.l?n.slice(0,n.l):n;return i.l==null&&(i.l=i.length),i}var ak=ba;function wh(e,t,r){var n=e.l+t,a=r.biff==8||!r.biff?4:2,i=e.read_shift(a),s=e.read_shift(a),o=e.read_shift(2),c=e.read_shift(2);return e.l=n,{s:{r:i,c:o},e:{r:s,c}}}function ik(e,t){var r=t.biff==8||!t.biff?4:2,n=ne(2*r+6);return n.write_shift(r,e.s.r),n.write_shift(r,e.e.r+1),n.write_shift(2,e.s.c),n.write_shift(2,e.e.c+1),n.write_shift(2,0),n}function sk(e){var t=e.read_shift(2),r=e.read_shift(2),n=mh(e);return{r:t,c:r,ixfe:n[0],rknum:n[1]}}function ok(e,t){for(var r=e.l+t-2,n=e.read_shift(2),a=e.read_shift(2),i=[];e.l<r;)i.push(mh(e));if(e.l!==r)throw new Error("MulRK read error");var s=e.read_shift(2);if(i.length!=s-a+1)throw new Error("MulRK length mismatch");return{r:n,c:a,C:s,rkrec:i}}function lk(e,t){for(var r=e.l+t-2,n=e.read_shift(2),a=e.read_shift(2),i=[];e.l<r;)i.push(e.read_shift(2));if(e.l!==r)throw new Error("MulBlank read error");var s=e.read_shift(2);if(i.length!=s-a+1)throw new Error("MulBlank length mismatch");return{r:n,c:a,C:s,ixfe:i}}function ck(e,t,r,n){var a={},i=e.read_shift(4),s=e.read_shift(4),o=e.read_shift(4),c=e.read_shift(2);return a.patternType=H_[o>>26],n.cellStyles&&(a.alc=i&7,a.fWrap=i>>3&1,a.alcV=i>>4&7,a.fJustLast=i>>7&1,a.trot=i>>8&255,a.cIndent=i>>16&15,a.fShrinkToFit=i>>20&1,a.iReadOrder=i>>22&2,a.fAtrNum=i>>26&1,a.fAtrFnt=i>>27&1,a.fAtrAlc=i>>28&1,a.fAtrBdr=i>>29&1,a.fAtrPat=i>>30&1,a.fAtrProt=i>>31&1,a.dgLeft=s&15,a.dgRight=s>>4&15,a.dgTop=s>>8&15,a.dgBottom=s>>12&15,a.icvLeft=s>>16&127,a.icvRight=s>>23&127,a.grbitDiag=s>>30&3,a.icvTop=o&127,a.icvBottom=o>>7&127,a.icvDiag=o>>14&127,a.dgDiag=o>>21&15,a.icvFore=c&127,a.icvBack=c>>7&127,a.fsxButton=c>>14&1),a}function fk(e,t,r){var n={};return n.ifnt=e.read_shift(2),n.numFmtId=e.read_shift(2),n.flags=e.read_shift(2),n.fStyle=n.flags>>2&1,t-=6,n.data=ck(e,t,n.fStyle,r),n}function _h(e,t,r,n){var a=r&&r.biff==5;n||(n=ne(a?16:20)),n.write_shift(2,0),e.style?(n.write_shift(2,e.numFmtId||0),n.write_shift(2,65524)):(n.write_shift(2,e.numFmtId||0),n.write_shift(2,t<<4));var i=0;return e.numFmtId>0&&a&&(i|=1024),n.write_shift(4,i),n.write_shift(4,0),a||n.write_shift(4,0),n.write_shift(2,0),n}function uk(e){e.l+=4;var t=[e.read_shift(2),e.read_shift(2)];if(t[0]!==0&&t[0]--,t[1]!==0&&t[1]--,t[0]>7||t[1]>7)throw new Error("Bad Gutters: "+t.join("|"));return t}function dk(e){var t=ne(8);return t.write_shift(4,0),t.write_shift(2,e[0]?e[0]+1:0),t.write_shift(2,e[1]?e[1]+1:0),t}function yh(e,t,r){var n=xn(e);(r.biff==2||t==9)&&++e.l;var a=py(e);return n.val=a,n.t=a===!0||a===!1?"b":"e",n}function hk(e,t,r,n,a,i){var s=ne(8);return Sa(e,t,n,s),ch(r,i,s),s}function mk(e,t,r){r.biffguess&&r.biff==2&&(r.biff=5);var n=xn(e),a=er(e);return n.val=a,n}function pk(e,t,r,n){var a=ne(14);return Sa(e,t,n,a),_a(r,a),a}var kh=Sy;function gk(e,t,r){var n=e.l+t,a=e.read_shift(2),i=e.read_shift(2);if(r.sbcch=i,i==1025||i==14849)return[i,a];if(i<1||i>255)throw new Error("Unexpected SupBook type: "+i);for(var s=Ea(e,i),o=[];n>e.l;)o.push(Zi(e));return[i,a,s,o]}function Eh(e,t,r){var n=e.read_shift(2),a,i={fBuiltIn:n&1,fWantAdvise:n>>>1&1,fWantPict:n>>>2&1,fOle:n>>>3&1,fOleLink:n>>>4&1,cf:n>>>5&1023,fIcon:n>>>15&1};return r.sbcch===14849&&(a=Cy(e,t-2,r)),i.body=a||e.read_shift(t-2),typeof a=="string"&&(i.Name=a),i}var xk=["_xlnm.Consolidate_Area","_xlnm.Auto_Open","_xlnm.Auto_Close","_xlnm.Extract","_xlnm.Database","_xlnm.Criteria","_xlnm.Print_Area","_xlnm.Print_Titles","_xlnm.Recorder","_xlnm.Data_Form","_xlnm.Auto_Activate","_xlnm.Auto_Deactivate","_xlnm.Sheet_Title","_xlnm._FilterDatabase"];function bh(e,t,r){var n=e.l+t,a=e.read_shift(2),i=e.read_shift(1),s=e.read_shift(1),o=e.read_shift(r&&r.biff==2?1:2),c=0;(!r||r.biff>=5)&&(r.biff!=5&&(e.l+=2),c=e.read_shift(2),r.biff==5&&(e.l+=2),e.l+=4);var f=Ea(e,s,r);a&32&&(f=xk[f.charCodeAt(0)]);var u=n-e.l;r&&r.biff==2&&--u;var d=n==e.l||o===0||!(u>0)?[]:OT(e,u,r,o);return{chKey:i,Name:f,itab:c,rgce:d}}function Sh(e,t,r){if(r.biff<8)return vk(e,t,r);for(var n=[],a=e.l+t,i=e.read_shift(r.biff>8?4:2);i--!==0;)n.push(Ty(e,r.biff>8?12:6,r));if(e.l!=a)throw new Error("Bad ExternSheet: "+e.l+" != "+a);return n}function vk(e,t,r){e[e.l+1]==3&&e[e.l]++;var n=Ji(e,t,r);return n.charCodeAt(0)==3?n.slice(1):n}function wk(e,t,r){if(r.biff<8){e.l+=t;return}var n=e.read_shift(2),a=e.read_shift(2),i=Ea(e,n,r),s=Ea(e,a,r);return[i,s]}function _k(e,t,r){var n=gh(e);e.l++;var a=e.read_shift(1);return t-=8,[BT(e,t,r),a,n]}function Th(e,t,r){var n=Fy(e);switch(r.biff){case 2:e.l++,t-=7;break;case 3:case 4:e.l+=2,t-=8;break;default:e.l+=6,t-=12}return[n,DT(e,t,r)]}function yk(e){var t=e.read_shift(4)!==0,r=e.read_shift(4)!==0,n=e.read_shift(4);return[t,r,n]}function kk(e,t,r){if(!(r.biff<8)){var n=e.read_shift(2),a=e.read_shift(2),i=e.read_shift(2),s=e.read_shift(2),o=ba(e,0,r);return r.biff<8&&e.read_shift(1),[{r:n,c:a},o,s,i]}}function Ek(e,t,r){return kk(e,t,r)}function bk(e,t){for(var r=[],n=e.read_shift(2);n--;)r.push(_o(e));return r}function Sk(e){var t=ne(2+e.length*8);t.write_shift(2,e.length);for(var r=0;r<e.length;++r)ph(e[r],t);return t}function Tk(e,t,r){if(r&&r.biff<8)return Fk(e,t,r);var n=xh(e),a=Oy(e,t-22,n[1]);return{cmo:n,ft:a}}var Ck={8:function(e,t){var r=e.l+t;e.l+=10;var n=e.read_shift(2);e.l+=4,e.l+=2,e.l+=2,e.l+=2,e.l+=4;var a=e.read_shift(1);return e.l+=a,e.l=r,{fmt:n}}};function Fk(e,t,r){e.l+=4;var n=e.read_shift(2),a=e.read_shift(2),i=e.read_shift(2);e.l+=2,e.l+=2,e.l+=2,e.l+=2,e.l+=2,e.l+=2,e.l+=2,e.l+=2,e.l+=2,e.l+=6,t-=36;var s=[];return s.push((Ck[n]||Zt)(e,t,r)),{cmo:[a,n,i],ft:s}}function Ak(e,t,r){var n=e.l,a="";try{e.l+=4;var i=(r.lastobj||{cmo:[0,0]}).cmo[1],s;[0,5,7,11,12,14].indexOf(i)==-1?e.l+=6:s=vy(e,6,r);var o=e.read_shift(2);e.read_shift(2),Ft(e,2);var c=e.read_shift(2);e.l+=c;for(var f=1;f<e.lens.length-1;++f){if(e.l-n!=e.lens[f])throw new Error("TxO: bad continue record");var u=e[e.l],d=Ea(e,e.lens[f+1]-e.lens[f]-1);if(a+=d,a.length>=(u?o:2*o))break}if(a.length!==o&&a.length!==o*2)throw new Error("cchText: "+o+" != "+a.length);return e.l=n+t,{t:a}}catch{return e.l=n+t,{t:a}}}function Dk(e,t){var r=_o(e);e.l+=16;var n=ky(e,t-24);return[r,n]}function Rk(e){var t=ne(24),r=ht(e[0]);t.write_shift(2,r.r),t.write_shift(2,r.r),t.write_shift(2,r.c),t.write_shift(2,r.c);for(var n="d0 c9 ea 79 f9 ba ce 11 8c 82 00 aa 00 4b a9 0b".split(" "),a=0;a<16;++a)t.write_shift(1,parseInt(n[a],16));return Ut([t,Ey(e[1])])}function Ok(e,t){e.read_shift(2);var r=_o(e),n=e.read_shift((t-10)/2,"dbcs-cont");return n=n.replace(lr,""),[r,n]}function Bk(e){var t=e[1].Tooltip,r=ne(10+2*(t.length+1));r.write_shift(2,2048);var n=ht(e[0]);r.write_shift(2,n.r),r.write_shift(2,n.r),r.write_shift(2,n.c),r.write_shift(2,n.c);for(var a=0;a<t.length;++a)r.write_shift(2,t.charCodeAt(a));return r.write_shift(2,0),r}function Nk(e){var t=[0,0],r;return r=e.read_shift(2),t[0]=Ud[r]||r,r=e.read_shift(2),t[1]=Ud[r]||r,t}function Ik(e){return e||(e=ne(4)),e.write_shift(2,1),e.write_shift(2,1),e}function Pk(e){for(var t=e.read_shift(2),r=[];t-- >0;)r.push(hh(e));return r}function Lk(e){for(var t=e.read_shift(2),r=[];t-- >0;)r.push(hh(e));return r}function Mk(e){e.l+=2;var t={cxfs:0,crc:0};return t.cxfs=e.read_shift(2),t.crc=e.read_shift(4),t}function Ch(e,t,r){if(!r.cellStyles)return Zt(e,t);var n=r&&r.biff>=12?4:2,a=e.read_shift(n),i=e.read_shift(n),s=e.read_shift(n),o=e.read_shift(n),c=e.read_shift(2);n==2&&(e.l+=2);var f={s:a,e:i,w:s,ixfe:o,flags:c};return(r.biff>=5||!r.biff)&&(f.level=c>>8&7),f}function Vk(e,t){var r=ne(12);r.write_shift(2,t),r.write_shift(2,t),r.write_shift(2,e.width*256),r.write_shift(2,0);var n=0;return e.hidden&&(n|=1),r.write_shift(1,n),n=e.level||0,r.write_shift(1,n),r.write_shift(2,0),r}function Uk(e,t){var r={};return t<32||(e.l+=16,r.header=er(e),r.footer=er(e),e.l+=2),r}function $k(e,t,r){var n={area:!1};if(r.biff!=5)return e.l+=t,n;var a=e.read_shift(1);return e.l+=3,a&16&&(n.area=!0),n}function Wk(e){for(var t=ne(2*e),r=0;r<e;++r)t.write_shift(2,r+1);return t}var Hk=xn,jk=lh,zk=Zi;function Gk(e){var t=e.read_shift(2),r=e.read_shift(2),n=e.read_shift(4),a={fmt:t,env:r,len:n,data:e.slice(e.l,e.l+n)};return e.l+=n,a}function Xk(e,t,r){r.biffguess&&r.biff==5&&(r.biff=2);var n=xn(e);++e.l;var a=ba(e,t-7,r);return n.t="str",n.val=a,n}function Kk(e){var t=xn(e);++e.l;var r=er(e);return t.t="n",t.val=r,t}function Yk(e,t,r){var n=ne(15);return ds(n,e,t),n.write_shift(8,r,"f"),n}function qk(e){var t=xn(e);++e.l;var r=e.read_shift(2);return t.t="n",t.val=r,t}function Jk(e,t,r){var n=ne(9);return ds(n,e,t),n.write_shift(2,r),n}function Zk(e){var t=e.read_shift(1);return t===0?(e.l++,""):e.read_shift(t,"sbcs-cont")}function Qk(e,t){e.l+=6,e.l+=2,e.l+=1,e.l+=3,e.l+=1,e.l+=t-13}function eE(e,t,r){var n=e.l+t,a=xn(e),i=e.read_shift(2),s=Ea(e,i,r);return e.l=n,a.t="str",a.val=s,a}var tE=[2,3,48,49,131,139,140,245],uc=function(){var e={1:437,2:850,3:1252,4:1e4,100:852,101:866,102:865,103:861,104:895,105:620,106:737,107:857,120:950,121:949,122:936,123:932,124:874,125:1255,126:1256,150:10007,151:10029,152:10006,200:1250,201:1251,202:1254,203:1253,0:20127,8:865,9:437,10:850,11:437,13:437,14:850,15:437,16:850,17:437,18:850,19:932,20:850,21:437,22:850,23:865,24:437,25:437,26:850,27:437,28:863,29:850,31:852,34:852,35:852,36:860,37:850,38:866,55:850,64:852,77:936,78:949,79:950,80:874,87:1252,88:1252,89:1252,108:863,134:737,135:852,136:857,204:1257,255:16969},t=io({1:437,2:850,3:1252,4:1e4,100:852,101:866,102:865,103:861,104:895,105:620,106:737,107:857,120:950,121:949,122:936,123:932,124:874,125:1255,126:1256,150:10007,151:10029,152:10006,200:1250,201:1251,202:1254,203:1253,0:20127});function r(o,c){var f=[],u=Xn(1);switch(c.type){case"base64":u=br(Er(o));break;case"binary":u=br(o);break;case"buffer":case"array":u=o;break}Xt(u,0);var d=u.read_shift(1),h=!!(d&136),p=!1,g=!1;switch(d){case 2:break;case 3:break;case 48:p=!0,h=!0;break;case 49:p=!0,h=!0;break;case 131:break;case 139:break;case 140:g=!0;break;case 245:break;default:throw new Error("DBF Unsupported Version: "+d.toString(16))}var m=0,x=521;d==2&&(m=u.read_shift(2)),u.l+=3,d!=2&&(m=u.read_shift(4)),m>1048576&&(m=1e6),d!=2&&(x=u.read_shift(2));var v=u.read_shift(2),y=c.codepage||1252;d!=2&&(u.l+=16,u.read_shift(1),u[u.l]!==0&&(y=e[u[u.l]]),u.l+=1,u.l+=2),g&&(u.l+=36);for(var _=[],b={},D=Math.min(u.length,d==2?521:x-10-(p?264:0)),C=g?32:11;u.l<D&&u[u.l]!=13;)switch(b={},b.name=zn.utils.decode(y,u.slice(u.l,u.l+C)).replace(/[\u0000\r\n].*$/g,""),u.l+=C,b.type=String.fromCharCode(u.read_shift(1)),d!=2&&!g&&(b.offset=u.read_shift(4)),b.len=u.read_shift(1),d==2&&(b.offset=u.read_shift(2)),b.dec=u.read_shift(1),b.name.length&&_.push(b),d!=2&&(u.l+=g?13:14),b.type){case"B":(!p||b.len!=8)&&c.WTF&&""+b.name+b.type;break;case"G":case"P":c.WTF&&""+b.name+b.type;break;case"+":case"0":case"@":case"C":case"D":case"F":case"I":case"L":case"M":case"N":case"O":case"T":case"Y":break;default:throw new Error("Unknown Field Type: "+b.type)}if(u[u.l]!==13&&(u.l=x-1),u.read_shift(1)!==13)throw new Error("DBF Terminator not found "+u.l+" "+u[u.l]);u.l=x;var k=0,F=0;for(f[0]=[],F=0;F!=_.length;++F)f[0][F]=_[F].name;for(;m-- >0;){if(u[u.l]===42){u.l+=v;continue}for(++u.l,f[++k]=[],F=0,F=0;F!=_.length;++F){var O=u.slice(u.l,u.l+_[F].len);u.l+=_[F].len,Xt(O,0);var X=zn.utils.decode(y,O);switch(_[F].type){case"C":X.trim().length&&(f[k][F]=X.replace(/\s+$/,""));break;case"D":X.length===8?f[k][F]=new Date(+X.slice(0,4),+X.slice(4,6)-1,+X.slice(6,8)):f[k][F]=X;break;case"F":f[k][F]=parseFloat(X.trim());break;case"+":case"I":f[k][F]=g?O.read_shift(-4,"i")^2147483648:O.read_shift(4,"i");break;case"L":switch(X.trim().toUpperCase()){case"Y":case"T":f[k][F]=!0;break;case"N":case"F":f[k][F]=!1;break;case"":case"?":break;default:throw new Error("DBF Unrecognized L:|"+X+"|")}break;case"M":if(!h)throw new Error("DBF Unexpected MEMO for type "+d.toString(16));f[k][F]="##MEMO##"+(g?parseInt(X.trim(),10):O.read_shift(4));break;case"N":X=X.replace(/\u0000/g,"").trim(),X&&X!="."&&(f[k][F]=+X||0);break;case"@":f[k][F]=new Date(O.read_shift(-8,"f")-621356832e5);break;case"T":f[k][F]=new Date((O.read_shift(4)-2440588)*864e5+O.read_shift(4));break;case"Y":f[k][F]=O.read_shift(4,"i")/1e4+O.read_shift(4,"i")/1e4*Math.pow(2,32);break;case"O":f[k][F]=-O.read_shift(-8,"f");break;case"B":if(p&&_[F].len==8){f[k][F]=O.read_shift(8,"f");break}case"G":case"P":O.l+=_[F].len;break;case"0":if(_[F].name==="_NullFlags")break;default:throw new Error("DBF Unsupported data type "+_[F].type)}}}if(d!=2&&u.l<u.length&&u[u.l++]!=26)throw new Error("DBF EOF Marker missing "+(u.l-1)+" of "+u.length+" "+u[u.l-1].toString(16));return c&&c.sheetRows&&(f=f.slice(0,c.sheetRows)),c.DBF=_,f}function n(o,c){var f=c||{};f.dateNF||(f.dateNF="yyyymmdd");var u=qa(r(o,f),f);return u["!cols"]=f.DBF.map(function(d){return{wch:d.len,DBF:d}}),delete f.DBF,u}function a(o,c){try{return Jn(n(o,c),c)}catch(f){if(c&&c.WTF)throw f}return{SheetNames:[],Sheets:{}}}var i={B:8,C:250,L:1,D:8,"?":0,"":0};function s(o,c){var f=c||{};if(+f.codepage>=0&&Yr(+f.codepage),f.type=="string")throw new Error("Cannot write DBF to JS string");var u=pr(),d=Ro(o,{header:1,raw:!0,cellDates:!0}),h=d[0],p=d.slice(1),g=o["!cols"]||[],m=0,x=0,v=0,y=1;for(m=0;m<h.length;++m){if(((g[m]||{}).DBF||{}).name){h[m]=g[m].DBF.name,++v;continue}if(h[m]!=null){if(++v,typeof h[m]=="number"&&(h[m]=h[m].toString(10)),typeof h[m]!="string")throw new Error("DBF Invalid column name "+h[m]+" |"+typeof h[m]+"|");if(h.indexOf(h[m])!==m){for(x=0;x<1024;++x)if(h.indexOf(h[m]+"_"+x)==-1){h[m]+="_"+x;break}}}}var _=Xe(o["!ref"]),b=[],D=[],C=[];for(m=0;m<=_.e.c-_.s.c;++m){var k="",F="",O=0,X=[];for(x=0;x<p.length;++x)p[x][m]!=null&&X.push(p[x][m]);if(X.length==0||h[m]==null){b[m]="?";continue}for(x=0;x<X.length;++x){switch(typeof X[x]){case"number":F="B";break;case"string":F="C";break;case"boolean":F="L";break;case"object":F=X[x]instanceof Date?"D":"C";break;default:F="C"}O=Math.max(O,String(X[x]).length),k=k&&k!=F?"C":F}O>250&&(O=250),F=((g[m]||{}).DBF||{}).type,F=="C"&&g[m].DBF.len>O&&(O=g[m].DBF.len),k=="B"&&F=="N"&&(k="N",C[m]=g[m].DBF.dec,O=g[m].DBF.len),D[m]=k=="C"||F=="N"?O:i[k]||0,y+=D[m],b[m]=k}var j=u.next(32);for(j.write_shift(4,318902576),j.write_shift(4,p.length),j.write_shift(2,296+32*v),j.write_shift(2,y),m=0;m<4;++m)j.write_shift(4,0);for(j.write_shift(4,0|(+t[Eu]||3)<<8),m=0,x=0;m<h.length;++m)if(h[m]!=null){var I=u.next(32),G=(h[m].slice(-10)+"\0\0\0\0\0\0\0\0\0\0\0").slice(0,11);I.write_shift(1,G,"sbcs"),I.write_shift(1,b[m]=="?"?"C":b[m],"sbcs"),I.write_shift(4,x),I.write_shift(1,D[m]||i[b[m]]||0),I.write_shift(1,C[m]||0),I.write_shift(1,2),I.write_shift(4,0),I.write_shift(1,0),I.write_shift(4,0),I.write_shift(4,0),x+=D[m]||i[b[m]]||0}var re=u.next(264);for(re.write_shift(4,13),m=0;m<65;++m)re.write_shift(4,0);for(m=0;m<p.length;++m){var ae=u.next(y);for(ae.write_shift(1,0),x=0;x<h.length;++x)if(h[x]!=null)switch(b[x]){case"L":ae.write_shift(1,p[m][x]==null?63:p[m][x]?84:70);break;case"B":ae.write_shift(8,p[m][x]||0,"f");break;case"N":var oe="0";for(typeof p[m][x]=="number"&&(oe=p[m][x].toFixed(C[x]||0)),v=0;v<D[x]-oe.length;++v)ae.write_shift(1,32);ae.write_shift(1,oe,"sbcs");break;case"D":p[m][x]?(ae.write_shift(4,("0000"+p[m][x].getFullYear()).slice(-4),"sbcs"),ae.write_shift(2,("00"+(p[m][x].getMonth()+1)).slice(-2),"sbcs"),ae.write_shift(2,("00"+p[m][x].getDate()).slice(-2),"sbcs")):ae.write_shift(8,"00000000","sbcs");break;case"C":var fe=String(p[m][x]!=null?p[m][x]:"").slice(0,D[x]);for(ae.write_shift(1,fe,"sbcs"),v=0;v<D[x]-fe.length;++v)ae.write_shift(1,32);break}}return u.next(1).write_shift(1,26),u.end()}return{to_workbook:a,to_sheet:n,from_sheet:s}}(),Fh=function(){var e={AA:"À",BA:"Á",CA:"Â",DA:195,HA:"Ä",JA:197,AE:"È",BE:"É",CE:"Ê",HE:"Ë",AI:"Ì",BI:"Í",CI:"Î",HI:"Ï",AO:"Ò",BO:"Ó",CO:"Ô",DO:213,HO:"Ö",AU:"Ù",BU:"Ú",CU:"Û",HU:"Ü",Aa:"à",Ba:"á",Ca:"â",Da:227,Ha:"ä",Ja:229,Ae:"è",Be:"é",Ce:"ê",He:"ë",Ai:"ì",Bi:"í",Ci:"î",Hi:"ï",Ao:"ò",Bo:"ó",Co:"ô",Do:245,Ho:"ö",Au:"ù",Bu:"ú",Cu:"û",Hu:"ü",KC:"Ç",Kc:"ç",q:"æ",z:"œ",a:"Æ",j:"Œ",DN:209,Dn:241,Hy:255,S:169,c:170,R:174,"B ":180,0:176,1:177,2:178,3:179,5:181,6:182,7:183,Q:185,k:186,b:208,i:216,l:222,s:240,y:248,"!":161,'"':162,"#":163,"(":164,"%":165,"'":167,"H ":168,"+":171,";":187,"<":188,"=":189,">":190,"?":191,"{":223},t=new RegExp("\x1BN("+wt(e).join("|").replace(/\|\|\|/,"|\\||").replace(/([?()+])/g,"\\$1")+"|\\|)","gm"),r=function(h,p){var g=e[p];return typeof g=="number"?Tu(g):g},n=function(h,p,g){var m=p.charCodeAt(0)-32<<4|g.charCodeAt(0)-48;return m==59?h:Tu(m)};e["|"]=254;function a(h,p){switch(p.type){case"base64":return i(Er(h),p);case"binary":return i(h,p);case"buffer":return i(Ue&&Buffer.isBuffer(h)?h.toString("binary"):Kn(h),p);case"array":return i(ha(h),p)}throw new Error("Unrecognized type "+p.type)}function i(h,p){var g=h.split(/[\n\r]+/),m=-1,x=-1,v=0,y=0,_=[],b=[],D=null,C={},k=[],F=[],O=[],X=0,j;for(+p.codepage>=0&&Yr(+p.codepage);v!==g.length;++v){X=0;var I=g[v].trim().replace(/\x1B([\x20-\x2F])([\x30-\x3F])/g,n).replace(t,r),G=I.replace(/;;/g,"\0").split(";").map(function(R){return R.replace(/\u0000/g,";")}),re=G[0],ae;if(I.length>0)switch(re){case"ID":break;case"E":break;case"B":break;case"O":break;case"W":break;case"P":G[1].charAt(0)=="P"&&b.push(I.slice(3).replace(/;;/g,";"));break;case"C":var oe=!1,fe=!1,ke=!1,H=!1,le=-1,B=-1;for(y=1;y<G.length;++y)switch(G[y].charAt(0)){case"A":break;case"X":x=parseInt(G[y].slice(1))-1,fe=!0;break;case"Y":for(m=parseInt(G[y].slice(1))-1,fe||(x=0),j=_.length;j<=m;++j)_[j]=[];break;case"K":ae=G[y].slice(1),ae.charAt(0)==='"'?ae=ae.slice(1,ae.length-1):ae==="TRUE"?ae=!0:ae==="FALSE"?ae=!1:isNaN(Jr(ae))?isNaN(Ka(ae).getDate())||(ae=it(ae)):(ae=Jr(ae),D!==null&&da(D)&&(ae=lo(ae))),oe=!0;break;case"E":H=!0;var w=ri(G[y].slice(1),{r:m,c:x});_[m][x]=[_[m][x],w];break;case"S":ke=!0,_[m][x]=[_[m][x],"S5S"];break;case"G":break;case"R":le=parseInt(G[y].slice(1))-1;break;case"C":B=parseInt(G[y].slice(1))-1;break;default:if(p&&p.WTF)throw new Error("SYLK bad record "+I)}if(oe&&(_[m][x]&&_[m][x].length==2?_[m][x][0]=ae:_[m][x]=ae,D=null),ke){if(H)throw new Error("SYLK shared formula cannot have own formula");var S=le>-1&&_[le][B];if(!S||!S[1])throw new Error("SYLK shared formula cannot find base");_[m][x][1]=Kh(S[1],{r:m-le,c:x-B})}break;case"F":var T=0;for(y=1;y<G.length;++y)switch(G[y].charAt(0)){case"X":x=parseInt(G[y].slice(1))-1,++T;break;case"Y":for(m=parseInt(G[y].slice(1))-1,j=_.length;j<=m;++j)_[j]=[];break;case"M":X=parseInt(G[y].slice(1))/20;break;case"F":break;case"G":break;case"P":D=b[parseInt(G[y].slice(1))];break;case"S":break;case"D":break;case"N":break;case"W":for(O=G[y].slice(1).split(" "),j=parseInt(O[0],10);j<=parseInt(O[1],10);++j)X=parseInt(O[2],10),F[j-1]=X===0?{hidden:!0}:{wch:X},Qn(F[j-1]);break;case"C":x=parseInt(G[y].slice(1))-1,F[x]||(F[x]={});break;case"R":m=parseInt(G[y].slice(1))-1,k[m]||(k[m]={}),X>0?(k[m].hpt=X,k[m].hpx=ei(X)):X===0&&(k[m].hidden=!0);break;default:if(p&&p.WTF)throw new Error("SYLK bad record "+I)}T<1&&(D=null);break;default:if(p&&p.WTF)throw new Error("SYLK bad record "+I)}}return k.length>0&&(C["!rows"]=k),F.length>0&&(C["!cols"]=F),p&&p.sheetRows&&(_=_.slice(0,p.sheetRows)),[_,C]}function s(h,p){var g=a(h,p),m=g[0],x=g[1],v=qa(m,p);return wt(x).forEach(function(y){v[y]=x[y]}),v}function o(h,p){return Jn(s(h,p),p)}function c(h,p,g,m){var x="C;Y"+(g+1)+";X"+(m+1)+";K";switch(h.t){case"n":x+=h.v||0,h.f&&!h.F&&(x+=";E"+wc(h.f,{r:g,c:m}));break;case"b":x+=h.v?"TRUE":"FALSE";break;case"e":x+=h.w||h.v;break;case"d":x+='"'+(h.w||h.v)+'"';break;case"s":x+='"'+h.v.replace(/"/g,"").replace(/;/g,";;")+'"';break}return x}function f(h,p){p.forEach(function(g,m){var x="F;W"+(m+1)+" "+(m+1)+" ";g.hidden?x+="0":(typeof g.width=="number"&&!g.wpx&&(g.wpx=es(g.width)),typeof g.wpx=="number"&&!g.wch&&(g.wch=ts(g.wpx)),typeof g.wch=="number"&&(x+=Math.round(g.wch))),x.charAt(x.length-1)!=" "&&h.push(x)})}function u(h,p){p.forEach(function(g,m){var x="F;";g.hidden?x+="M0;":g.hpt?x+="M"+20*g.hpt+";":g.hpx&&(x+="M"+20*rs(g.hpx)+";"),x.length>2&&h.push(x+"R"+(m+1))})}function d(h,p){var g=["ID;PWXL;N;E"],m=[],x=Xe(h["!ref"]),v,y=Array.isArray(h),_=`\r
`;g.push("P;PGeneral"),g.push("F;P0;DG0G8;M255"),h["!cols"]&&f(g,h["!cols"]),h["!rows"]&&u(g,h["!rows"]),g.push("B;Y"+(x.e.r-x.s.r+1)+";X"+(x.e.c-x.s.c+1)+";D"+[x.s.c,x.s.r,x.e.c,x.e.r].join(" "));for(var b=x.s.r;b<=x.e.r;++b)for(var D=x.s.c;D<=x.e.c;++D){var C=Ae({r:b,c:D});v=y?(h[b]||[])[D]:h[C],!(!v||v.v==null&&(!v.f||v.F))&&m.push(c(v,h,b,D))}return g.join(_)+_+m.join(_)+_+"E"+_}return{to_workbook:o,to_sheet:s,from_sheet:d}}(),Ah=function(){function e(i,s){switch(s.type){case"base64":return t(Er(i),s);case"binary":return t(i,s);case"buffer":return t(Ue&&Buffer.isBuffer(i)?i.toString("binary"):Kn(i),s);case"array":return t(ha(i),s)}throw new Error("Unrecognized type "+s.type)}function t(i,s){for(var o=i.split(`
`),c=-1,f=-1,u=0,d=[];u!==o.length;++u){if(o[u].trim()==="BOT"){d[++c]=[],f=0;continue}if(!(c<0)){var h=o[u].trim().split(","),p=h[0],g=h[1];++u;for(var m=o[u]||"";(m.match(/["]/g)||[]).length&1&&u<o.length-1;)m+=`
`+o[++u];switch(m=m.trim(),+p){case-1:if(m==="BOT"){d[++c]=[],f=0;continue}else if(m!=="EOD")throw new Error("Unrecognized DIF special command "+m);break;case 0:m==="TRUE"?d[c][f]=!0:m==="FALSE"?d[c][f]=!1:isNaN(Jr(g))?isNaN(Ka(g).getDate())?d[c][f]=g:d[c][f]=it(g):d[c][f]=Jr(g),++f;break;case 1:m=m.slice(1,m.length-1),m=m.replace(/""/g,'"'),m&&m.match(/^=".*"$/)&&(m=m.slice(2,-1)),d[c][f++]=m!==""?m:null;break}if(m==="EOD")break}}return s&&s.sheetRows&&(d=d.slice(0,s.sheetRows)),d}function r(i,s){return qa(e(i,s),s)}function n(i,s){return Jn(r(i,s),s)}var a=function(){var i=function(c,f,u,d,h){c.push(f),c.push(u+","+d),c.push('"'+h.replace(/"/g,'""')+'"')},s=function(c,f,u,d){c.push(f+","+u),c.push(f==1?'"'+d.replace(/"/g,'""')+'"':d)};return function(c){var f=[],u=Xe(c["!ref"]),d,h=Array.isArray(c);i(f,"TABLE",0,1,"sheetjs"),i(f,"VECTORS",0,u.e.r-u.s.r+1,""),i(f,"TUPLES",0,u.e.c-u.s.c+1,""),i(f,"DATA",0,0,"");for(var p=u.s.r;p<=u.e.r;++p){s(f,-1,0,"BOT");for(var g=u.s.c;g<=u.e.c;++g){var m=Ae({r:p,c:g});if(d=h?(c[p]||[])[g]:c[m],!d){s(f,1,0,"");continue}switch(d.t){case"n":var x=d.w;!x&&d.v!=null&&(x=d.v),x==null?d.f&&!d.F?s(f,1,0,"="+d.f):s(f,1,0,""):s(f,0,x,"V");break;case"b":s(f,0,d.v?1:0,d.v?"TRUE":"FALSE");break;case"s":s(f,1,0,isNaN(d.v)?d.v:'="'+d.v+'"');break;case"d":d.w||(d.w=Sr(d.z||Ce[14],Nt(it(d.v)))),s(f,0,d.w,"V");break;default:s(f,1,0,"")}}}s(f,-1,0,"EOD");var v=`\r
`,y=f.join(v);return y}}();return{to_workbook:n,to_sheet:r,from_sheet:a}}(),Dh=function(){function e(d){return d.replace(/\\b/g,"\\").replace(/\\c/g,":").replace(/\\n/g,`
`)}function t(d){return d.replace(/\\/g,"\\b").replace(/:/g,"\\c").replace(/\n/g,"\\n")}function r(d,h){for(var p=d.split(`
`),g=-1,m=-1,x=0,v=[];x!==p.length;++x){var y=p[x].trim().split(":");if(y[0]==="cell"){var _=ht(y[1]);if(v.length<=_.r)for(g=v.length;g<=_.r;++g)v[g]||(v[g]=[]);switch(g=_.r,m=_.c,y[2]){case"t":v[g][m]=e(y[3]);break;case"v":v[g][m]=+y[3];break;case"vtf":var b=y[y.length-1];case"vtc":switch(y[3]){case"nl":v[g][m]=!!+y[4];break;default:v[g][m]=+y[4];break}y[2]=="vtf"&&(v[g][m]=[v[g][m],b])}}}return h&&h.sheetRows&&(v=v.slice(0,h.sheetRows)),v}function n(d,h){return qa(r(d,h),h)}function a(d,h){return Jn(n(d,h),h)}var i=["socialcalc:version:1.5","MIME-Version: 1.0","Content-Type: multipart/mixed; boundary=SocialCalcSpreadsheetControlSave"].join(`
`),s=["--SocialCalcSpreadsheetControlSave","Content-type: text/plain; charset=UTF-8"].join(`
`)+`
`,o=["# SocialCalc Spreadsheet Control Save","part:sheet"].join(`
`),c="--SocialCalcSpreadsheetControlSave--";function f(d){if(!d||!d["!ref"])return"";for(var h=[],p=[],g,m="",x=gr(d["!ref"]),v=Array.isArray(d),y=x.s.r;y<=x.e.r;++y)for(var _=x.s.c;_<=x.e.c;++_)if(m=Ae({r:y,c:_}),g=v?(d[y]||[])[_]:d[m],!(!g||g.v==null||g.t==="z")){switch(p=["cell",m,"t"],g.t){case"s":case"str":p.push(t(g.v));break;case"n":g.f?(p[2]="vtf",p[3]="n",p[4]=g.v,p[5]=t(g.f)):(p[2]="v",p[3]=g.v);break;case"b":p[2]="vt"+(g.f?"f":"c"),p[3]="nl",p[4]=g.v?"1":"0",p[5]=t(g.f||(g.v?"TRUE":"FALSE"));break;case"d":var b=Nt(it(g.v));p[2]="vtc",p[3]="nd",p[4]=""+b,p[5]=g.w||Sr(g.z||Ce[14],b);break;case"e":continue}h.push(p.join(":"))}return h.push("sheet:c:"+(x.e.c-x.s.c+1)+":r:"+(x.e.r-x.s.r+1)+":tvf:1"),h.push("valueformat:1:text-wiki"),h.join(`
`)}function u(d){return[i,s,o,s,f(d),c].join(`
`)}return{to_workbook:a,to_sheet:n,from_sheet:u}}(),Qa=function(){function e(u,d,h,p,g){g.raw?d[h][p]=u:u===""||(u==="TRUE"?d[h][p]=!0:u==="FALSE"?d[h][p]=!1:isNaN(Jr(u))?isNaN(Ka(u).getDate())?d[h][p]=u:d[h][p]=it(u):d[h][p]=Jr(u))}function t(u,d){var h=d||{},p=[];if(!u||u.length===0)return p;for(var g=u.split(/[\r\n]/),m=g.length-1;m>=0&&g[m].length===0;)--m;for(var x=10,v=0,y=0;y<=m;++y)v=g[y].indexOf(" "),v==-1?v=g[y].length:v++,x=Math.max(x,v);for(y=0;y<=m;++y){p[y]=[];var _=0;for(e(g[y].slice(0,x).trim(),p,y,_,h),_=1;_<=(g[y].length-x)/10+1;++_)e(g[y].slice(x+(_-1)*10,x+_*10).trim(),p,y,_,h)}return h.sheetRows&&(p=p.slice(0,h.sheetRows)),p}var r={44:",",9:"	",59:";",124:"|"},n={44:3,9:2,59:1,124:0};function a(u){for(var d={},h=!1,p=0,g=0;p<u.length;++p)(g=u.charCodeAt(p))==34?h=!h:!h&&g in r&&(d[g]=(d[g]||0)+1);g=[];for(p in d)Object.prototype.hasOwnProperty.call(d,p)&&g.push([d[p],p]);if(!g.length){d=n;for(p in d)Object.prototype.hasOwnProperty.call(d,p)&&g.push([d[p],p])}return g.sort(function(m,x){return m[0]-x[0]||n[m[1]]-n[x[1]]}),r[g.pop()[1]]||44}function i(u,d){var h=d||{},p="",g=h.dense?[]:{},m={s:{c:0,r:0},e:{c:0,r:0}};u.slice(0,4)=="sep="?u.charCodeAt(5)==13&&u.charCodeAt(6)==10?(p=u.charAt(4),u=u.slice(7)):u.charCodeAt(5)==13||u.charCodeAt(5)==10?(p=u.charAt(4),u=u.slice(6)):p=a(u.slice(0,1024)):h&&h.FS?p=h.FS:p=a(u.slice(0,1024));var x=0,v=0,y=0,_=0,b=0,D=p.charCodeAt(0),C=!1,k=0,F=u.charCodeAt(0);u=u.replace(/\r\n/mg,`
`);var O=h.dateNF!=null?W2(h.dateNF):null;function X(){var j=u.slice(_,b),I={};if(j.charAt(0)=='"'&&j.charAt(j.length-1)=='"'&&(j=j.slice(1,-1).replace(/""/g,'"')),j.length===0)I.t="z";else if(h.raw)I.t="s",I.v=j;else if(j.trim().length===0)I.t="s",I.v=j;else if(j.charCodeAt(0)==61)j.charCodeAt(1)==34&&j.charCodeAt(j.length-1)==34?(I.t="s",I.v=j.slice(2,-1).replace(/""/g,'"')):gS(j)?(I.t="n",I.f=j.slice(1)):(I.t="s",I.v=j);else if(j=="TRUE")I.t="b",I.v=!0;else if(j=="FALSE")I.t="b",I.v=!1;else if(!isNaN(y=Jr(j)))I.t="n",h.cellText!==!1&&(I.w=j),I.v=y;else if(!isNaN(Ka(j).getDate())||O&&j.match(O)){I.z=h.dateNF||Ce[14];var G=0;O&&j.match(O)&&(j=H2(j,h.dateNF,j.match(O)||[]),G=1),h.cellDates?(I.t="d",I.v=it(j,G)):(I.t="n",I.v=Nt(it(j,G))),h.cellText!==!1&&(I.w=Sr(I.z,I.v instanceof Date?Nt(I.v):I.v)),h.cellNF||delete I.z}else I.t="s",I.v=j;if(I.t=="z"||(h.dense?(g[x]||(g[x]=[]),g[x][v]=I):g[Ae({c:v,r:x})]=I),_=b+1,F=u.charCodeAt(_),m.e.c<v&&(m.e.c=v),m.e.r<x&&(m.e.r=x),k==D)++v;else if(v=0,++x,h.sheetRows&&h.sheetRows<=x)return!0}e:for(;b<u.length;++b)switch(k=u.charCodeAt(b)){case 34:F===34&&(C=!C);break;case D:case 10:case 13:if(!C&&X())break e;break}return b-_>0&&X(),g["!ref"]=Pe(m),g}function s(u,d){return!(d&&d.PRN)||d.FS||u.slice(0,4)=="sep="||u.indexOf("	")>=0||u.indexOf(",")>=0||u.indexOf(";")>=0?i(u,d):qa(t(u,d),d)}function o(u,d){var h="",p=d.type=="string"?[0,0,0,0]:Pc(u,d);switch(d.type){case"base64":h=Er(u);break;case"binary":h=u;break;case"buffer":d.codepage==65001?h=u.toString("utf8"):d.codepage&&typeof zn<"u"?h=zn.utils.decode(d.codepage,u):h=Ue&&Buffer.isBuffer(u)?u.toString("binary"):Kn(u);break;case"array":h=ha(u);break;case"string":h=u;break;default:throw new Error("Unrecognized type "+d.type)}return p[0]==239&&p[1]==187&&p[2]==191?h=nt(h.slice(3)):d.type!="string"&&d.type!="buffer"&&d.codepage==65001?h=nt(h):d.type=="binary"&&typeof zn<"u"&&d.codepage&&(h=zn.utils.decode(d.codepage,zn.utils.encode(28591,h))),h.slice(0,19)=="socialcalc:version:"?Dh.to_sheet(d.type=="string"?h:nt(h),d):s(h,d)}function c(u,d){return Jn(o(u,d),d)}function f(u){for(var d=[],h=Xe(u["!ref"]),p,g=Array.isArray(u),m=h.s.r;m<=h.e.r;++m){for(var x=[],v=h.s.c;v<=h.e.c;++v){var y=Ae({r:m,c:v});if(p=g?(u[m]||[])[v]:u[y],!p||p.v==null){x.push("          ");continue}for(var _=(p.w||(Bn(p),p.w)||"").slice(0,10);_.length<10;)_+=" ";x.push(_+(v===0?" ":""))}d.push(x.join(""))}return d.join(`
`)}return{to_workbook:c,to_sheet:o,from_sheet:f}}();function rE(e,t){var r=t||{},n=!!r.WTF;r.WTF=!0;try{var a=Fh.to_workbook(e,r);return r.WTF=n,a}catch(i){if(r.WTF=n,!i.message.match(/SYLK bad record ID/)&&n)throw i;return Qa.to_workbook(e,t)}}var Ta=function(){function e(w,S,T){if(w){Xt(w,w.l||0);for(var R=T.Enum||le;w.l<w.length;){var W=w.read_shift(2),Y=R[W]||R[65535],q=w.read_shift(2),K=w.l+q,ee=Y.f&&Y.f(w,q,T);if(w.l=K,S(ee,Y,W))return}}}function t(w,S){switch(S.type){case"base64":return r(br(Er(w)),S);case"binary":return r(br(w),S);case"buffer":case"array":return r(w,S)}throw"Unsupported type "+S.type}function r(w,S){if(!w)return w;var T=S||{},R=T.dense?[]:{},W="Sheet1",Y="",q=0,K={},ee=[],ye=[],M={s:{r:0,c:0},e:{r:0,c:0}},Ke=T.sheetRows||0;if(w[2]==0&&(w[3]==8||w[3]==9)&&w.length>=16&&w[14]==5&&w[15]===108)throw new Error("Unsupported Works 3 for Mac file");if(w[2]==2)T.Enum=le,e(w,function(ve,mt,vr){switch(vr){case 0:T.vers=ve,ve>=4096&&(T.qpro=!0);break;case 6:M=ve;break;case 204:ve&&(Y=ve);break;case 222:Y=ve;break;case 15:case 51:T.qpro||(ve[1].v=ve[1].v.slice(1));case 13:case 14:case 16:vr==14&&(ve[2]&112)==112&&(ve[2]&15)>1&&(ve[2]&15)<15&&(ve[1].z=T.dateNF||Ce[14],T.cellDates&&(ve[1].t="d",ve[1].v=lo(ve[1].v))),T.qpro&&ve[3]>q&&(R["!ref"]=Pe(M),K[W]=R,ee.push(W),R=T.dense?[]:{},M={s:{r:0,c:0},e:{r:0,c:0}},q=ve[3],W=Y||"Sheet"+(q+1),Y="");var Hr=T.dense?(R[ve[0].r]||[])[ve[0].c]:R[Ae(ve[0])];if(Hr){Hr.t=ve[1].t,Hr.v=ve[1].v,ve[1].z!=null&&(Hr.z=ve[1].z),ve[1].f!=null&&(Hr.f=ve[1].f);break}T.dense?(R[ve[0].r]||(R[ve[0].r]=[]),R[ve[0].r][ve[0].c]=ve[1]):R[Ae(ve[0])]=ve[1];break}},T);else if(w[2]==26||w[2]==14)T.Enum=B,w[2]==14&&(T.qpro=!0,w.l=0),e(w,function(ve,mt,vr){switch(vr){case 204:W=ve;break;case 22:ve[1].v=ve[1].v.slice(1);case 23:case 24:case 25:case 37:case 39:case 40:if(ve[3]>q&&(R["!ref"]=Pe(M),K[W]=R,ee.push(W),R=T.dense?[]:{},M={s:{r:0,c:0},e:{r:0,c:0}},q=ve[3],W="Sheet"+(q+1)),Ke>0&&ve[0].r>=Ke)break;T.dense?(R[ve[0].r]||(R[ve[0].r]=[]),R[ve[0].r][ve[0].c]=ve[1]):R[Ae(ve[0])]=ve[1],M.e.c<ve[0].c&&(M.e.c=ve[0].c),M.e.r<ve[0].r&&(M.e.r=ve[0].r);break;case 27:ve[14e3]&&(ye[ve[14e3][0]]=ve[14e3][1]);break;case 1537:ye[ve[0]]=ve[1],ve[0]==q&&(W=ve[1]);break}},T);else throw new Error("Unrecognized LOTUS BOF "+w[2]);if(R["!ref"]=Pe(M),K[Y||W]=R,ee.push(Y||W),!ye.length)return{SheetNames:ee,Sheets:K};for(var Le={},Ye=[],$e=0;$e<ye.length;++$e)K[ee[$e]]?(Ye.push(ye[$e]||ee[$e]),Le[ye[$e]]=K[ye[$e]]||K[ee[$e]]):(Ye.push(ye[$e]),Le[ye[$e]]={"!ref":"A1"});return{SheetNames:Ye,Sheets:Le}}function n(w,S){var T=S||{};if(+T.codepage>=0&&Yr(+T.codepage),T.type=="string")throw new Error("Cannot write WK1 to JS string");var R=pr(),W=Xe(w["!ref"]),Y=Array.isArray(w),q=[];pe(R,0,i(1030)),pe(R,6,c(W));for(var K=Math.min(W.e.r,8191),ee=W.s.r;ee<=K;++ee)for(var ye=Et(ee),M=W.s.c;M<=W.e.c;++M){ee===W.s.r&&(q[M]=dt(M));var Ke=q[M]+ye,Le=Y?(w[ee]||[])[M]:w[Ke];if(!(!Le||Le.t=="z"))if(Le.t=="n")(Le.v|0)==Le.v&&Le.v>=-32768&&Le.v<=32767?pe(R,13,p(ee,M,Le.v)):pe(R,14,m(ee,M,Le.v));else{var Ye=Bn(Le);pe(R,15,d(ee,M,Ye.slice(0,239)))}}return pe(R,1),R.end()}function a(w,S){var T=S||{};if(+T.codepage>=0&&Yr(+T.codepage),T.type=="string")throw new Error("Cannot write WK3 to JS string");var R=pr();pe(R,0,s(w));for(var W=0,Y=0;W<w.SheetNames.length;++W)(w.Sheets[w.SheetNames[W]]||{})["!ref"]&&pe(R,27,H(w.SheetNames[W],Y++));var q=0;for(W=0;W<w.SheetNames.length;++W){var K=w.Sheets[w.SheetNames[W]];if(!(!K||!K["!ref"])){for(var ee=Xe(K["!ref"]),ye=Array.isArray(K),M=[],Ke=Math.min(ee.e.r,8191),Le=ee.s.r;Le<=Ke;++Le)for(var Ye=Et(Le),$e=ee.s.c;$e<=ee.e.c;++$e){Le===ee.s.r&&(M[$e]=dt($e));var ve=M[$e]+Ye,mt=ye?(K[Le]||[])[$e]:K[ve];if(!(!mt||mt.t=="z"))if(mt.t=="n")pe(R,23,X(Le,$e,q,mt.v));else{var vr=Bn(mt);pe(R,22,k(Le,$e,q,vr.slice(0,239)))}}++q}}return pe(R,1),R.end()}function i(w){var S=ne(2);return S.write_shift(2,w),S}function s(w){var S=ne(26);S.write_shift(2,4096),S.write_shift(2,4),S.write_shift(4,0);for(var T=0,R=0,W=0,Y=0;Y<w.SheetNames.length;++Y){var q=w.SheetNames[Y],K=w.Sheets[q];if(!(!K||!K["!ref"])){++W;var ee=gr(K["!ref"]);T<ee.e.r&&(T=ee.e.r),R<ee.e.c&&(R=ee.e.c)}}return T>8191&&(T=8191),S.write_shift(2,T),S.write_shift(1,W),S.write_shift(1,R),S.write_shift(2,0),S.write_shift(2,0),S.write_shift(1,1),S.write_shift(1,2),S.write_shift(4,0),S.write_shift(4,0),S}function o(w,S,T){var R={s:{c:0,r:0},e:{c:0,r:0}};return S==8&&T.qpro?(R.s.c=w.read_shift(1),w.l++,R.s.r=w.read_shift(2),R.e.c=w.read_shift(1),w.l++,R.e.r=w.read_shift(2),R):(R.s.c=w.read_shift(2),R.s.r=w.read_shift(2),S==12&&T.qpro&&(w.l+=2),R.e.c=w.read_shift(2),R.e.r=w.read_shift(2),S==12&&T.qpro&&(w.l+=2),R.s.c==65535&&(R.s.c=R.e.c=R.s.r=R.e.r=0),R)}function c(w){var S=ne(8);return S.write_shift(2,w.s.c),S.write_shift(2,w.s.r),S.write_shift(2,w.e.c),S.write_shift(2,w.e.r),S}function f(w,S,T){var R=[{c:0,r:0},{t:"n",v:0},0,0];return T.qpro&&T.vers!=20768?(R[0].c=w.read_shift(1),R[3]=w.read_shift(1),R[0].r=w.read_shift(2),w.l+=2):(R[2]=w.read_shift(1),R[0].c=w.read_shift(2),R[0].r=w.read_shift(2)),R}function u(w,S,T){var R=w.l+S,W=f(w,S,T);if(W[1].t="s",T.vers==20768){w.l++;var Y=w.read_shift(1);return W[1].v=w.read_shift(Y,"utf8"),W}return T.qpro&&w.l++,W[1].v=w.read_shift(R-w.l,"cstr"),W}function d(w,S,T){var R=ne(7+T.length);R.write_shift(1,255),R.write_shift(2,S),R.write_shift(2,w),R.write_shift(1,39);for(var W=0;W<R.length;++W){var Y=T.charCodeAt(W);R.write_shift(1,Y>=128?95:Y)}return R.write_shift(1,0),R}function h(w,S,T){var R=f(w,S,T);return R[1].v=w.read_shift(2,"i"),R}function p(w,S,T){var R=ne(7);return R.write_shift(1,255),R.write_shift(2,S),R.write_shift(2,w),R.write_shift(2,T,"i"),R}function g(w,S,T){var R=f(w,S,T);return R[1].v=w.read_shift(8,"f"),R}function m(w,S,T){var R=ne(13);return R.write_shift(1,255),R.write_shift(2,S),R.write_shift(2,w),R.write_shift(8,T,"f"),R}function x(w,S,T){var R=w.l+S,W=f(w,S,T);if(W[1].v=w.read_shift(8,"f"),T.qpro)w.l=R;else{var Y=w.read_shift(2);b(w.slice(w.l,w.l+Y),W),w.l+=Y}return W}function v(w,S,T){var R=S&32768;return S&=-32769,S=(R?w:0)+(S>=8192?S-16384:S),(R?"":"$")+(T?dt(S):Et(S))}var y={51:["FALSE",0],52:["TRUE",0],70:["LEN",1],80:["SUM",69],81:["AVERAGEA",69],82:["COUNTA",69],83:["MINA",69],84:["MAXA",69],111:["T",1]},_=["","","","","","","","","","+","-","*","/","^","=","<>","<=",">=","<",">","","","","","&","","","","","","",""];function b(w,S){Xt(w,0);for(var T=[],R=0,W="",Y="",q="",K="";w.l<w.length;){var ee=w[w.l++];switch(ee){case 0:T.push(w.read_shift(8,"f"));break;case 1:Y=v(S[0].c,w.read_shift(2),!0),W=v(S[0].r,w.read_shift(2),!1),T.push(Y+W);break;case 2:{var ye=v(S[0].c,w.read_shift(2),!0),M=v(S[0].r,w.read_shift(2),!1);Y=v(S[0].c,w.read_shift(2),!0),W=v(S[0].r,w.read_shift(2),!1),T.push(ye+M+":"+Y+W)}break;case 3:if(w.l<w.length){console.error("WK1 premature formula end");return}break;case 4:T.push("("+T.pop()+")");break;case 5:T.push(w.read_shift(2));break;case 6:{for(var Ke="";ee=w[w.l++];)Ke+=String.fromCharCode(ee);T.push('"'+Ke.replace(/"/g,'""')+'"')}break;case 8:T.push("-"+T.pop());break;case 23:T.push("+"+T.pop());break;case 22:T.push("NOT("+T.pop()+")");break;case 20:case 21:K=T.pop(),q=T.pop(),T.push(["AND","OR"][ee-20]+"("+q+","+K+")");break;default:if(ee<32&&_[ee])K=T.pop(),q=T.pop(),T.push(q+_[ee]+K);else if(y[ee]){if(R=y[ee][1],R==69&&(R=w[w.l++]),R>T.length){console.error("WK1 bad formula parse 0x"+ee.toString(16)+":|"+T.join("|")+"|");return}var Le=T.slice(-R);T.length-=R,T.push(y[ee][0]+"("+Le.join(",")+")")}else return ee<=7?console.error("WK1 invalid opcode "+ee.toString(16)):ee<=24?console.error("WK1 unsupported op "+ee.toString(16)):ee<=30?console.error("WK1 invalid opcode "+ee.toString(16)):ee<=115?console.error("WK1 unsupported function opcode "+ee.toString(16)):console.error("WK1 unrecognized opcode "+ee.toString(16))}}T.length==1?S[1].f=""+T[0]:console.error("WK1 bad formula parse |"+T.join("|")+"|")}function D(w){var S=[{c:0,r:0},{t:"n",v:0},0];return S[0].r=w.read_shift(2),S[3]=w[w.l++],S[0].c=w[w.l++],S}function C(w,S){var T=D(w);return T[1].t="s",T[1].v=w.read_shift(S-4,"cstr"),T}function k(w,S,T,R){var W=ne(6+R.length);W.write_shift(2,w),W.write_shift(1,T),W.write_shift(1,S),W.write_shift(1,39);for(var Y=0;Y<R.length;++Y){var q=R.charCodeAt(Y);W.write_shift(1,q>=128?95:q)}return W.write_shift(1,0),W}function F(w,S){var T=D(w);T[1].v=w.read_shift(2);var R=T[1].v>>1;if(T[1].v&1)switch(R&7){case 0:R=(R>>3)*5e3;break;case 1:R=(R>>3)*500;break;case 2:R=(R>>3)/20;break;case 3:R=(R>>3)/200;break;case 4:R=(R>>3)/2e3;break;case 5:R=(R>>3)/2e4;break;case 6:R=(R>>3)/16;break;case 7:R=(R>>3)/64;break}return T[1].v=R,T}function O(w,S){var T=D(w),R=w.read_shift(4),W=w.read_shift(4),Y=w.read_shift(2);if(Y==65535)return R===0&&W===3221225472?(T[1].t="e",T[1].v=15):R===0&&W===3489660928?(T[1].t="e",T[1].v=42):T[1].v=0,T;var q=Y&32768;return Y=(Y&32767)-16446,T[1].v=(1-q*2)*(W*Math.pow(2,Y+32)+R*Math.pow(2,Y)),T}function X(w,S,T,R){var W=ne(14);if(W.write_shift(2,w),W.write_shift(1,T),W.write_shift(1,S),R==0)return W.write_shift(4,0),W.write_shift(4,0),W.write_shift(2,65535),W;var Y=0,q=0,K=0,ee=0;return R<0&&(Y=1,R=-R),q=Math.log2(R)|0,R/=Math.pow(2,q-31),ee=R>>>0,ee&2147483648||(R/=2,++q,ee=R>>>0),R-=ee,ee|=2147483648,ee>>>=0,R*=Math.pow(2,32),K=R>>>0,W.write_shift(4,K),W.write_shift(4,ee),q+=16383+(Y?32768:0),W.write_shift(2,q),W}function j(w,S){var T=O(w);return w.l+=S-14,T}function I(w,S){var T=D(w),R=w.read_shift(4);return T[1].v=R>>6,T}function G(w,S){var T=D(w),R=w.read_shift(8,"f");return T[1].v=R,T}function re(w,S){var T=G(w);return w.l+=S-10,T}function ae(w,S){return w[w.l+S-1]==0?w.read_shift(S,"cstr"):""}function oe(w,S){var T=w[w.l++];T>S-1&&(T=S-1);for(var R="";R.length<T;)R+=String.fromCharCode(w[w.l++]);return R}function fe(w,S,T){if(!(!T.qpro||S<21)){var R=w.read_shift(1);w.l+=17,w.l+=1,w.l+=2;var W=w.read_shift(S-21,"cstr");return[R,W]}}function ke(w,S){for(var T={},R=w.l+S;w.l<R;){var W=w.read_shift(2);if(W==14e3){for(T[W]=[0,""],T[W][0]=w.read_shift(2);w[w.l];)T[W][1]+=String.fromCharCode(w[w.l]),w.l++;w.l++}}return T}function H(w,S){var T=ne(5+w.length);T.write_shift(2,14e3),T.write_shift(2,S);for(var R=0;R<w.length;++R){var W=w.charCodeAt(R);T[T.l++]=W>127?95:W}return T[T.l++]=0,T}var le={0:{n:"BOF",f:Ft},1:{n:"EOF"},2:{n:"CALCMODE"},3:{n:"CALCORDER"},4:{n:"SPLIT"},5:{n:"SYNC"},6:{n:"RANGE",f:o},7:{n:"WINDOW1"},8:{n:"COLW1"},9:{n:"WINTWO"},10:{n:"COLW2"},11:{n:"NAME"},12:{n:"BLANK"},13:{n:"INTEGER",f:h},14:{n:"NUMBER",f:g},15:{n:"LABEL",f:u},16:{n:"FORMULA",f:x},24:{n:"TABLE"},25:{n:"ORANGE"},26:{n:"PRANGE"},27:{n:"SRANGE"},28:{n:"FRANGE"},29:{n:"KRANGE1"},32:{n:"HRANGE"},35:{n:"KRANGE2"},36:{n:"PROTEC"},37:{n:"FOOTER"},38:{n:"HEADER"},39:{n:"SETUP"},40:{n:"MARGINS"},41:{n:"LABELFMT"},42:{n:"TITLES"},43:{n:"SHEETJS"},45:{n:"GRAPH"},46:{n:"NGRAPH"},47:{n:"CALCCOUNT"},48:{n:"UNFORMATTED"},49:{n:"CURSORW12"},50:{n:"WINDOW"},51:{n:"STRING",f:u},55:{n:"PASSWORD"},56:{n:"LOCKED"},60:{n:"QUERY"},61:{n:"QUERYNAME"},62:{n:"PRINT"},63:{n:"PRINTNAME"},64:{n:"GRAPH2"},65:{n:"GRAPHNAME"},66:{n:"ZOOM"},67:{n:"SYMSPLIT"},68:{n:"NSROWS"},69:{n:"NSCOLS"},70:{n:"RULER"},71:{n:"NNAME"},72:{n:"ACOMM"},73:{n:"AMACRO"},74:{n:"PARSE"},102:{n:"PRANGES??"},103:{n:"RRANGES??"},104:{n:"FNAME??"},105:{n:"MRANGES??"},204:{n:"SHEETNAMECS",f:ae},222:{n:"SHEETNAMELP",f:oe},65535:{n:""}},B={0:{n:"BOF"},1:{n:"EOF"},2:{n:"PASSWORD"},3:{n:"CALCSET"},4:{n:"WINDOWSET"},5:{n:"SHEETCELLPTR"},6:{n:"SHEETLAYOUT"},7:{n:"COLUMNWIDTH"},8:{n:"HIDDENCOLUMN"},9:{n:"USERRANGE"},10:{n:"SYSTEMRANGE"},11:{n:"ZEROFORCE"},12:{n:"SORTKEYDIR"},13:{n:"FILESEAL"},14:{n:"DATAFILLNUMS"},15:{n:"PRINTMAIN"},16:{n:"PRINTSTRING"},17:{n:"GRAPHMAIN"},18:{n:"GRAPHSTRING"},19:{n:"??"},20:{n:"ERRCELL"},21:{n:"NACELL"},22:{n:"LABEL16",f:C},23:{n:"NUMBER17",f:O},24:{n:"NUMBER18",f:F},25:{n:"FORMULA19",f:j},26:{n:"FORMULA1A"},27:{n:"XFORMAT",f:ke},28:{n:"DTLABELMISC"},29:{n:"DTLABELCELL"},30:{n:"GRAPHWINDOW"},31:{n:"CPA"},32:{n:"LPLAUTO"},33:{n:"QUERY"},34:{n:"HIDDENSHEET"},35:{n:"??"},37:{n:"NUMBER25",f:I},38:{n:"??"},39:{n:"NUMBER27",f:G},40:{n:"FORMULA28",f:re},142:{n:"??"},147:{n:"??"},150:{n:"??"},151:{n:"??"},152:{n:"??"},153:{n:"??"},154:{n:"??"},155:{n:"??"},156:{n:"??"},163:{n:"??"},174:{n:"??"},175:{n:"??"},176:{n:"??"},177:{n:"??"},184:{n:"??"},185:{n:"??"},186:{n:"??"},187:{n:"??"},188:{n:"??"},195:{n:"??"},201:{n:"??"},204:{n:"SHEETNAMECS",f:ae},205:{n:"??"},206:{n:"??"},207:{n:"??"},208:{n:"??"},256:{n:"??"},259:{n:"??"},260:{n:"??"},261:{n:"??"},262:{n:"??"},263:{n:"??"},265:{n:"??"},266:{n:"??"},267:{n:"??"},268:{n:"??"},270:{n:"??"},271:{n:"??"},384:{n:"??"},389:{n:"??"},390:{n:"??"},393:{n:"??"},396:{n:"??"},512:{n:"??"},514:{n:"??"},513:{n:"??"},516:{n:"??"},517:{n:"??"},640:{n:"??"},641:{n:"??"},642:{n:"??"},643:{n:"??"},644:{n:"??"},645:{n:"??"},646:{n:"??"},647:{n:"??"},648:{n:"??"},658:{n:"??"},659:{n:"??"},660:{n:"??"},661:{n:"??"},662:{n:"??"},665:{n:"??"},666:{n:"??"},768:{n:"??"},772:{n:"??"},1537:{n:"SHEETINFOQP",f:fe},1600:{n:"??"},1602:{n:"??"},1793:{n:"??"},1794:{n:"??"},1795:{n:"??"},1796:{n:"??"},1920:{n:"??"},2048:{n:"??"},2049:{n:"??"},2052:{n:"??"},2688:{n:"??"},10998:{n:"??"},12849:{n:"??"},28233:{n:"??"},28484:{n:"??"},65535:{n:""}};return{sheet_to_wk1:n,book_to_wk3:a,to_workbook:t}}();function nE(e){var t={},r=e.match(Jt),n=0,a=!1;if(r)for(;n!=r.length;++n){var i=Oe(r[n]);switch(i[0].replace(/\w*:/g,"")){case"<condense":break;case"<extend":break;case"<shadow":if(!i.val)break;case"<shadow>":case"<shadow/>":t.shadow=1;break;case"</shadow>":break;case"<charset":if(i.val=="1")break;t.cp=Al[parseInt(i.val,10)];break;case"<outline":if(!i.val)break;case"<outline>":case"<outline/>":t.outline=1;break;case"</outline>":break;case"<rFont":t.name=i.val;break;case"<sz":t.sz=i.val;break;case"<strike":if(!i.val)break;case"<strike>":case"<strike/>":t.strike=1;break;case"</strike>":break;case"<u":if(!i.val)break;switch(i.val){case"double":t.uval="double";break;case"singleAccounting":t.uval="single-accounting";break;case"doubleAccounting":t.uval="double-accounting";break}case"<u>":case"<u/>":t.u=1;break;case"</u>":break;case"<b":if(i.val=="0")break;case"<b>":case"<b/>":t.b=1;break;case"</b>":break;case"<i":if(i.val=="0")break;case"<i>":case"<i/>":t.i=1;break;case"</i>":break;case"<color":i.rgb&&(t.color=i.rgb.slice(2,8));break;case"<color>":case"<color/>":case"</color>":break;case"<family":t.family=i.val;break;case"<family>":case"<family/>":case"</family>":break;case"<vertAlign":t.valign=i.val;break;case"<vertAlign>":case"<vertAlign/>":case"</vertAlign>":break;case"<scheme":break;case"<scheme>":case"<scheme/>":case"</scheme>":break;case"<extLst":case"<extLst>":case"</extLst>":break;case"<ext":a=!0;break;case"</ext>":a=!1;break;default:if(i[0].charCodeAt(1)!==47&&!a)throw new Error("Unrecognized rich format "+i[0])}}return t}var aE=function(){var e=Wi("t"),t=Wi("rPr");function r(i){var s=i.match(e);if(!s)return{t:"s",v:""};var o={t:"s",v:Ge(s[1])},c=i.match(t);return c&&(o.s=nE(c[1])),o}var n=/<(?:\w+:)?r>/g,a=/<\/(?:\w+:)?r>/;return function(s){return s.replace(n,"").split(a).map(r).filter(function(o){return o.v})}}(),iE=function(){var t=/(\r\n|\n)/g;function r(a,i,s){var o=[];a.u&&o.push("text-decoration: underline;"),a.uval&&o.push("text-underline-style:"+a.uval+";"),a.sz&&o.push("font-size:"+a.sz+"pt;"),a.outline&&o.push("text-effect: outline;"),a.shadow&&o.push("text-shadow: auto;"),i.push('<span style="'+o.join("")+'">'),a.b&&(i.push("<b>"),s.push("</b>")),a.i&&(i.push("<i>"),s.push("</i>")),a.strike&&(i.push("<s>"),s.push("</s>"));var c=a.valign||"";return c=="superscript"||c=="super"?c="sup":c=="subscript"&&(c="sub"),c!=""&&(i.push("<"+c+">"),s.push("</"+c+">")),s.push("</span>"),a}function n(a){var i=[[],a.v,[]];return a.v?(a.s&&r(a.s,i[0],i[2]),i[0].join("")+i[1].replace(t,"<br/>")+i[2].join("")):""}return function(i){return i.map(n).join("")}}(),sE=/<(?:\w+:)?t[^>]*>([^<]*)<\/(?:\w+:)?t>/g,oE=/<(?:\w+:)?r>/,lE=/<(?:\w+:)?rPh.*?>([\s\S]*?)<\/(?:\w+:)?rPh>/g;function dc(e,t){var r=t?t.cellHTML:!0,n={};return e?(e.match(/^\s*<(?:\w+:)?t[^>]*>/)?(n.t=Ge(nt(e.slice(e.indexOf(">")+1).split(/<\/(?:\w+:)?t>/)[0]||"")),n.r=nt(e),r&&(n.h=Ul(n.t))):e.match(oE)&&(n.r=nt(e),n.t=Ge(nt((e.replace(lE,"").match(sE)||[]).join("").replace(Jt,""))),r&&(n.h=iE(aE(n.r)))),n):{t:""}}var cE=/<(?:\w+:)?sst([^>]*)>([\s\S]*)<\/(?:\w+:)?sst>/,fE=/<(?:\w+:)?(?:si|sstItem)>/g,uE=/<\/(?:\w+:)?(?:si|sstItem)>/;function dE(e,t){var r=[],n="";if(!e)return r;var a=e.match(cE);if(a){n=a[2].replace(fE,"").split(uE);for(var i=0;i!=n.length;++i){var s=dc(n[i].trim(),t);s!=null&&(r[r.length]=s)}a=Oe(a[1]),r.Count=a.count,r.Unique=a.uniqueCount}return r}var hE=/^\s|\s$|[\t\n\r]/;function Rh(e,t){if(!t.bookSST)return"";var r=[kt];r[r.length]=me("sst",null,{xmlns:ma[0],count:e.Count,uniqueCount:e.Unique});for(var n=0;n!=e.length;++n)if(e[n]!=null){var a=e[n],i="<si>";a.r?i+=a.r:(i+="<t",a.t||(a.t=""),a.t.match(hE)&&(i+=' xml:space="preserve"'),i+=">"+Qe(a.t)+"</t>"),i+="</si>",r[r.length]=i}return r.length>2&&(r[r.length]="</sst>",r[1]=r[1].replace("/>",">")),r.join("")}function mE(e){return[e.read_shift(4),e.read_shift(4)]}function pE(e,t){var r=[],n=!1;return On(e,function(i,s,o){switch(o){case 159:r.Count=i[0],r.Unique=i[1];break;case 19:r.push(i);break;case 160:return!0;case 35:n=!0;break;case 36:n=!1;break;default:if(s.T,!n||t.WTF)throw new Error("Unexpected record 0x"+o.toString(16))}}),r}function gE(e,t){return t||(t=ne(8)),t.write_shift(4,e.Count),t.write_shift(4,e.Unique),t}var xE=C_;function vE(e){var t=pr();ce(t,159,gE(e));for(var r=0;r<e.length;++r)ce(t,19,xE(e[r]));return ce(t,160),t.end()}function Oh(e){for(var t=[],r=e.split(""),n=0;n<r.length;++n)t[n]=r[n].charCodeAt(0);return t}function In(e,t){var r={};return r.Major=e.read_shift(2),r.Minor=e.read_shift(2),t>=4&&(e.l+=t-4),r}function wE(e){var t={};return t.id=e.read_shift(0,"lpp4"),t.R=In(e,4),t.U=In(e,4),t.W=In(e,4),t}function _E(e){for(var t=e.read_shift(4),r=e.l+t-4,n={},a=e.read_shift(4),i=[];a-- >0;)i.push({t:e.read_shift(4),v:e.read_shift(0,"lpp4")});if(n.name=e.read_shift(0,"lpp4"),n.comps=i,e.l!=r)throw new Error("Bad DataSpaceMapEntry: "+e.l+" != "+r);return n}function yE(e){var t=[];e.l+=4;for(var r=e.read_shift(4);r-- >0;)t.push(_E(e));return t}function kE(e){var t=[];e.l+=4;for(var r=e.read_shift(4);r-- >0;)t.push(e.read_shift(0,"lpp4"));return t}function EE(e){var t={};return e.read_shift(4),e.l+=4,t.id=e.read_shift(0,"lpp4"),t.name=e.read_shift(0,"lpp4"),t.R=In(e,4),t.U=In(e,4),t.W=In(e,4),t}function bE(e){var t=EE(e);if(t.ename=e.read_shift(0,"8lpp4"),t.blksz=e.read_shift(4),t.cmode=e.read_shift(4),e.read_shift(4)!=4)throw new Error("Bad !Primary record");return t}function Bh(e,t){var r=e.l+t,n={};n.Flags=e.read_shift(4)&63,e.l+=4,n.AlgID=e.read_shift(4);var a=!1;switch(n.AlgID){case 26126:case 26127:case 26128:a=n.Flags==36;break;case 26625:a=n.Flags==4;break;case 0:a=n.Flags==16||n.Flags==4||n.Flags==36;break;default:throw"Unrecognized encryption algorithm: "+n.AlgID}if(!a)throw new Error("Encryption Flags/AlgID mismatch");return n.AlgIDHash=e.read_shift(4),n.KeySize=e.read_shift(4),n.ProviderType=e.read_shift(4),e.l+=8,n.CSPName=e.read_shift(r-e.l>>1,"utf16le"),e.l=r,n}function Nh(e,t){var r={},n=e.l+t;return e.l+=4,r.Salt=e.slice(e.l,e.l+16),e.l+=16,r.Verifier=e.slice(e.l,e.l+16),e.l+=16,e.read_shift(4),r.VerifierHash=e.slice(e.l,n),e.l=n,r}function SE(e){var t=In(e);switch(t.Minor){case 2:return[t.Minor,TE(e)];case 3:return[t.Minor,CE()];case 4:return[t.Minor,FE(e)]}throw new Error("ECMA-376 Encrypted file unrecognized Version: "+t.Minor)}function TE(e){var t=e.read_shift(4);if((t&63)!=36)throw new Error("EncryptionInfo mismatch");var r=e.read_shift(4),n=Bh(e,r),a=Nh(e,e.length-e.l);return{t:"Std",h:n,v:a}}function CE(){throw new Error("File is password-protected: ECMA-376 Extensible")}function FE(e){var t=["saltSize","blockSize","keyBits","hashSize","cipherAlgorithm","cipherChaining","hashAlgorithm","saltValue"];e.l+=4;var r=e.read_shift(e.length-e.l,"utf8"),n={};return r.replace(Jt,function(i){var s=Oe(i);switch(pn(s[0])){case"<?xml":break;case"<encryption":case"</encryption>":break;case"<keyData":t.forEach(function(o){n[o]=s[o]});break;case"<dataIntegrity":n.encryptedHmacKey=s.encryptedHmacKey,n.encryptedHmacValue=s.encryptedHmacValue;break;case"<keyEncryptors>":case"<keyEncryptors":n.encs=[];break;case"</keyEncryptors>":break;case"<keyEncryptor":n.uri=s.uri;break;case"</keyEncryptor>":break;case"<encryptedKey":n.encs.push(s);break;default:throw s[0]}}),n}function AE(e,t){var r={},n=r.EncryptionVersionInfo=In(e,4);if(t-=4,n.Minor!=2)throw new Error("unrecognized minor version code: "+n.Minor);if(n.Major>4||n.Major<2)throw new Error("unrecognized major version code: "+n.Major);r.Flags=e.read_shift(4),t-=4;var a=e.read_shift(4);return t-=4,r.EncryptionHeader=Bh(e,a),t-=a,r.EncryptionVerifier=Nh(e,t),r}function DE(e){var t={},r=t.EncryptionVersionInfo=In(e,4);if(r.Major!=1||r.Minor!=1)throw"unrecognized version code "+r.Major+" : "+r.Minor;return t.Salt=e.read_shift(16),t.EncryptedVerifier=e.read_shift(16),t.EncryptedVerifierHash=e.read_shift(16),t}function hc(e){var t=0,r,n=Oh(e),a=n.length+1,i,s,o,c,f;for(r=Xn(a),r[0]=n.length,i=1;i!=a;++i)r[i]=n[i-1];for(i=a-1;i>=0;--i)s=r[i],o=t&16384?1:0,c=t<<1&32767,f=o|c,t=f^s;return t^52811}var Ih=function(){var e=[187,255,255,186,255,255,185,128,0,190,15,0,191,15,0],t=[57840,7439,52380,33984,4364,3600,61902,12606,6258,57657,54287,34041,10252,43370,20163],r=[44796,19929,39858,10053,20106,40212,10761,31585,63170,64933,60267,50935,40399,11199,17763,35526,1453,2906,5812,11624,23248,885,1770,3540,7080,14160,28320,56640,55369,41139,20807,41614,21821,43642,17621,28485,56970,44341,19019,38038,14605,29210,60195,50791,40175,10751,21502,43004,24537,18387,36774,3949,7898,15796,31592,63184,47201,24803,49606,37805,14203,28406,56812,17824,35648,1697,3394,6788,13576,27152,43601,17539,35078,557,1114,2228,4456,30388,60776,51953,34243,7079,14158,28316,14128,28256,56512,43425,17251,34502,7597,13105,26210,52420,35241,883,1766,3532,4129,8258,16516,33032,4657,9314,18628],n=function(s){return(s/2|s*128)&255},a=function(s,o){return n(s^o)},i=function(s){for(var o=t[s.length-1],c=104,f=s.length-1;f>=0;--f)for(var u=s[f],d=0;d!=7;++d)u&64&&(o^=r[c]),u*=2,--c;return o};return function(s){for(var o=Oh(s),c=i(o),f=o.length,u=Xn(16),d=0;d!=16;++d)u[d]=0;var h,p,g;for((f&1)===1&&(h=c>>8,u[f]=a(e[0],h),--f,h=c&255,p=o[o.length-1],u[f]=a(p,h));f>0;)--f,h=c>>8,u[f]=a(o[f],h),--f,h=c&255,u[f]=a(o[f],h);for(f=15,g=15-o.length;g>0;)h=c>>8,u[f]=a(e[g],h),--f,--g,h=c&255,u[f]=a(o[f],h),--f,--g;return u}}(),RE=function(e,t,r,n,a){a||(a=t),n||(n=Ih(e));var i,s;for(i=0;i!=t.length;++i)s=t[i],s^=n[r],s=(s>>5|s<<3)&255,a[i]=s,++r;return[a,r,n]},OE=function(e){var t=0,r=Ih(e);return function(n){var a=RE("",n,t,r);return t=a[1],a[0]}};function BE(e,t,r,n){var a={key:Ft(e),verificationBytes:Ft(e)};return r.password&&(a.verifier=hc(r.password)),n.valid=a.verificationBytes===a.verifier,n.valid&&(n.insitu=OE(r.password)),a}function NE(e,t,r){var n=r||{};return n.Info=e.read_shift(2),e.l-=2,n.Info===1?n.Data=DE(e):n.Data=AE(e,t),n}function IE(e,t,r){var n={Type:r.biff>=8?e.read_shift(2):0};return n.Type?NE(e,t-2,n):BE(e,r.biff>=8?t:t-2,r,n),n}var Ph=function(){function e(a,i){switch(i.type){case"base64":return t(Er(a),i);case"binary":return t(a,i);case"buffer":return t(Ue&&Buffer.isBuffer(a)?a.toString("binary"):Kn(a),i);case"array":return t(ha(a),i)}throw new Error("Unrecognized type "+i.type)}function t(a,i){var s=i||{},o=s.dense?[]:{},c=a.match(/\\trowd.*?\\row\b/g);if(!c.length)throw new Error("RTF missing table");var f={s:{c:0,r:0},e:{c:0,r:c.length-1}};return c.forEach(function(u,d){Array.isArray(o)&&(o[d]=[]);for(var h=/\\\w+\b/g,p=0,g,m=-1;g=h.exec(u);){switch(g[0]){case"\\cell":var x=u.slice(p,h.lastIndex-g[0].length);if(x[0]==" "&&(x=x.slice(1)),++m,x.length){var v={v:x,t:"s"};Array.isArray(o)?o[d][m]=v:o[Ae({r:d,c:m})]=v}break}p=h.lastIndex}m>f.e.c&&(f.e.c=m)}),o["!ref"]=Pe(f),o}function r(a,i){return Jn(e(a,i),i)}function n(a){for(var i=["{\\rtf1\\ansi"],s=Xe(a["!ref"]),o,c=Array.isArray(a),f=s.s.r;f<=s.e.r;++f){i.push("\\trowd\\trautofit1");for(var u=s.s.c;u<=s.e.c;++u)i.push("\\cellx"+(u+1));for(i.push("\\pard\\intbl"),u=s.s.c;u<=s.e.c;++u){var d=Ae({r:f,c:u});o=c?(a[f]||[])[u]:a[d],!(!o||o.v==null&&(!o.f||o.F))&&(i.push(" "+(o.w||(Bn(o),o.w))),i.push("\\cell"))}i.push("\\pard\\intbl\\row")}return i.join("")+"}"}return{to_workbook:r,to_sheet:e,from_sheet:n}}();function PE(e){var t=e.slice(e[0]==="#"?1:0).slice(0,6);return[parseInt(t.slice(0,2),16),parseInt(t.slice(2,4),16),parseInt(t.slice(4,6),16)]}function Qi(e){for(var t=0,r=1;t!=3;++t)r=r*256+(e[t]>255?255:e[t]<0?0:e[t]);return r.toString(16).toUpperCase().slice(1)}function LE(e){var t=e[0]/255,r=e[1]/255,n=e[2]/255,a=Math.max(t,r,n),i=Math.min(t,r,n),s=a-i;if(s===0)return[0,0,t];var o=0,c=0,f=a+i;switch(c=s/(f>1?2-f:f),a){case t:o=((r-n)/s+6)%6;break;case r:o=(n-t)/s+2;break;case n:o=(t-r)/s+4;break}return[o/6,c,f/2]}function ME(e){var t=e[0],r=e[1],n=e[2],a=r*2*(n<.5?n:1-n),i=n-a/2,s=[i,i,i],o=6*t,c;if(r!==0)switch(o|0){case 0:case 6:c=a*o,s[0]+=a,s[1]+=c;break;case 1:c=a*(2-o),s[0]+=c,s[1]+=a;break;case 2:c=a*(o-2),s[1]+=a,s[2]+=c;break;case 3:c=a*(4-o),s[1]+=c,s[2]+=a;break;case 4:c=a*(o-4),s[2]+=a,s[0]+=c;break;case 5:c=a*(6-o),s[2]+=c,s[0]+=a;break}for(var f=0;f!=3;++f)s[f]=Math.round(s[f]*255);return s}function ko(e,t){if(t===0)return e;var r=LE(PE(e));return t<0?r[2]=r[2]*(1+t):r[2]=1-(1-r[2])*(1-t),Qi(ME(r))}var Lh=6,VE=15,UE=1,rr=Lh;function es(e){return Math.floor((e+Math.round(128/rr)/256)*rr)}function ts(e){return Math.floor((e-5)/rr*100+.5)/100}function Eo(e){return Math.round((e*rr+5)/rr*256)/256}function mc(e){return Eo(ts(es(e)))}function pc(e){var t=Math.abs(e-mc(e)),r=rr;if(t>.005)for(rr=UE;rr<VE;++rr)Math.abs(e-mc(e))<=t&&(t=Math.abs(e-mc(e)),r=rr);rr=r}function Qn(e){e.width?(e.wpx=es(e.width),e.wch=ts(e.wpx),e.MDW=rr):e.wpx?(e.wch=ts(e.wpx),e.width=Eo(e.wch),e.MDW=rr):typeof e.wch=="number"&&(e.width=Eo(e.wch),e.wpx=es(e.width),e.MDW=rr),e.customWidth&&delete e.customWidth}var $E=96,Mh=$E;function rs(e){return e*96/Mh}function ei(e){return e*Mh/96}var WE={None:"none",Solid:"solid",Gray50:"mediumGray",Gray75:"darkGray",Gray25:"lightGray",HorzStripe:"darkHorizontal",VertStripe:"darkVertical",ReverseDiagStripe:"darkDown",DiagStripe:"darkUp",DiagCross:"darkGrid",ThickDiagCross:"darkTrellis",ThinHorzStripe:"lightHorizontal",ThinVertStripe:"lightVertical",ThinReverseDiagStripe:"lightDown",ThinHorzCross:"lightGrid"};function HE(e,t,r,n){t.Borders=[];var a={},i=!1;(e[0].match(Jt)||[]).forEach(function(s){var o=Oe(s);switch(pn(o[0])){case"<borders":case"<borders>":case"</borders>":break;case"<border":case"<border>":case"<border/>":a={},o.diagonalUp&&(a.diagonalUp=ot(o.diagonalUp)),o.diagonalDown&&(a.diagonalDown=ot(o.diagonalDown)),t.Borders.push(a);break;case"</border>":break;case"<left/>":break;case"<left":case"<left>":break;case"</left>":break;case"<right/>":break;case"<right":case"<right>":break;case"</right>":break;case"<top/>":break;case"<top":case"<top>":break;case"</top>":break;case"<bottom/>":break;case"<bottom":case"<bottom>":break;case"</bottom>":break;case"<diagonal":case"<diagonal>":case"<diagonal/>":break;case"</diagonal>":break;case"<horizontal":case"<horizontal>":case"<horizontal/>":break;case"</horizontal>":break;case"<vertical":case"<vertical>":case"<vertical/>":break;case"</vertical>":break;case"<start":case"<start>":case"<start/>":break;case"</start>":break;case"<end":case"<end>":case"<end/>":break;case"</end>":break;case"<color":case"<color>":break;case"<color/>":case"</color>":break;case"<extLst":case"<extLst>":case"</extLst>":break;case"<ext":i=!0;break;case"</ext>":i=!1;break;default:if(n&&n.WTF&&!i)throw new Error("unrecognized "+o[0]+" in borders")}})}function jE(e,t,r,n){t.Fills=[];var a={},i=!1;(e[0].match(Jt)||[]).forEach(function(s){var o=Oe(s);switch(pn(o[0])){case"<fills":case"<fills>":case"</fills>":break;case"<fill>":case"<fill":case"<fill/>":a={},t.Fills.push(a);break;case"</fill>":break;case"<gradientFill>":break;case"<gradientFill":case"</gradientFill>":t.Fills.push(a),a={};break;case"<patternFill":case"<patternFill>":o.patternType&&(a.patternType=o.patternType);break;case"<patternFill/>":case"</patternFill>":break;case"<bgColor":a.bgColor||(a.bgColor={}),o.indexed&&(a.bgColor.indexed=parseInt(o.indexed,10)),o.theme&&(a.bgColor.theme=parseInt(o.theme,10)),o.tint&&(a.bgColor.tint=parseFloat(o.tint)),o.rgb&&(a.bgColor.rgb=o.rgb.slice(-6));break;case"<bgColor/>":case"</bgColor>":break;case"<fgColor":a.fgColor||(a.fgColor={}),o.theme&&(a.fgColor.theme=parseInt(o.theme,10)),o.tint&&(a.fgColor.tint=parseFloat(o.tint)),o.rgb!=null&&(a.fgColor.rgb=o.rgb.slice(-6));break;case"<fgColor/>":case"</fgColor>":break;case"<stop":case"<stop/>":break;case"</stop>":break;case"<color":case"<color/>":break;case"</color>":break;case"<extLst":case"<extLst>":case"</extLst>":break;case"<ext":i=!0;break;case"</ext>":i=!1;break;default:if(n&&n.WTF&&!i)throw new Error("unrecognized "+o[0]+" in fills")}})}function zE(e,t,r,n){t.Fonts=[];var a={},i=!1;(e[0].match(Jt)||[]).forEach(function(s){var o=Oe(s);switch(pn(o[0])){case"<fonts":case"<fonts>":case"</fonts>":break;case"<font":case"<font>":break;case"</font>":case"<font/>":t.Fonts.push(a),a={};break;case"<name":o.val&&(a.name=nt(o.val));break;case"<name/>":case"</name>":break;case"<b":a.bold=o.val?ot(o.val):1;break;case"<b/>":a.bold=1;break;case"<i":a.italic=o.val?ot(o.val):1;break;case"<i/>":a.italic=1;break;case"<u":switch(o.val){case"none":a.underline=0;break;case"single":a.underline=1;break;case"double":a.underline=2;break;case"singleAccounting":a.underline=33;break;case"doubleAccounting":a.underline=34;break}break;case"<u/>":a.underline=1;break;case"<strike":a.strike=o.val?ot(o.val):1;break;case"<strike/>":a.strike=1;break;case"<outline":a.outline=o.val?ot(o.val):1;break;case"<outline/>":a.outline=1;break;case"<shadow":a.shadow=o.val?ot(o.val):1;break;case"<shadow/>":a.shadow=1;break;case"<condense":a.condense=o.val?ot(o.val):1;break;case"<condense/>":a.condense=1;break;case"<extend":a.extend=o.val?ot(o.val):1;break;case"<extend/>":a.extend=1;break;case"<sz":o.val&&(a.sz=+o.val);break;case"<sz/>":case"</sz>":break;case"<vertAlign":o.val&&(a.vertAlign=o.val);break;case"<vertAlign/>":case"</vertAlign>":break;case"<family":o.val&&(a.family=parseInt(o.val,10));break;case"<family/>":case"</family>":break;case"<scheme":o.val&&(a.scheme=o.val);break;case"<scheme/>":case"</scheme>":break;case"<charset":if(o.val=="1")break;o.codepage=Al[parseInt(o.val,10)];break;case"<color":if(a.color||(a.color={}),o.auto&&(a.color.auto=ot(o.auto)),o.rgb)a.color.rgb=o.rgb.slice(-6);else if(o.indexed){a.color.index=parseInt(o.indexed,10);var c=ya[a.color.index];a.color.index==81&&(c=ya[1]),c||(c=ya[1]),a.color.rgb=c[0].toString(16)+c[1].toString(16)+c[2].toString(16)}else o.theme&&(a.color.theme=parseInt(o.theme,10),o.tint&&(a.color.tint=parseFloat(o.tint)),o.theme&&r.themeElements&&r.themeElements.clrScheme&&(a.color.rgb=ko(r.themeElements.clrScheme[a.color.theme].rgb,a.color.tint||0)));break;case"<color/>":case"</color>":break;case"<AlternateContent":i=!0;break;case"</AlternateContent>":i=!1;break;case"<extLst":case"<extLst>":case"</extLst>":break;case"<ext":i=!0;break;case"</ext>":i=!1;break;default:if(n&&n.WTF&&!i)throw new Error("unrecognized "+o[0]+" in fonts")}})}function GE(e,t,r){t.NumberFmt=[];for(var n=wt(Ce),a=0;a<n.length;++a)t.NumberFmt[n[a]]=Ce[n[a]];var i=e[0].match(Jt);if(i)for(a=0;a<i.length;++a){var s=Oe(i[a]);switch(pn(s[0])){case"<numFmts":case"</numFmts>":case"<numFmts/>":case"<numFmts>":break;case"<numFmt":{var o=Ge(nt(s.formatCode)),c=parseInt(s.numFmtId,10);if(t.NumberFmt[c]=o,c>0){if(c>392){for(c=392;c>60&&t.NumberFmt[c]!=null;--c);t.NumberFmt[c]=o}mn(o,c)}}break;case"</numFmt>":break;default:if(r.WTF)throw new Error("unrecognized "+s[0]+" in numFmts")}}}function XE(e){var t=["<numFmts>"];return[[5,8],[23,26],[41,44],[50,392]].forEach(function(r){for(var n=r[0];n<=r[1];++n)e[n]!=null&&(t[t.length]=me("numFmt",null,{numFmtId:n,formatCode:Qe(e[n])}))}),t.length===1?"":(t[t.length]="</numFmts>",t[0]=me("numFmts",null,{count:t.length-2}).replace("/>",">"),t.join(""))}var bo=["numFmtId","fillId","fontId","borderId","xfId"],So=["applyAlignment","applyBorder","applyFill","applyFont","applyNumberFormat","applyProtection","pivotButton","quotePrefix"];function KE(e,t,r){t.CellXf=[];var n,a=!1;(e[0].match(Jt)||[]).forEach(function(i){var s=Oe(i),o=0;switch(pn(s[0])){case"<cellXfs":case"<cellXfs>":case"<cellXfs/>":case"</cellXfs>":break;case"<xf":case"<xf/>":for(n=s,delete n[0],o=0;o<bo.length;++o)n[bo[o]]&&(n[bo[o]]=parseInt(n[bo[o]],10));for(o=0;o<So.length;++o)n[So[o]]&&(n[So[o]]=ot(n[So[o]]));if(t.NumberFmt&&n.numFmtId>392){for(o=392;o>60;--o)if(t.NumberFmt[n.numFmtId]==t.NumberFmt[o]){n.numFmtId=o;break}}t.CellXf.push(n);break;case"</xf>":break;case"<alignment":case"<alignment/>":var c={};s.vertical&&(c.vertical=s.vertical),s.horizontal&&(c.horizontal=s.horizontal),s.textRotation!=null&&(c.textRotation=s.textRotation),s.indent&&(c.indent=s.indent),s.wrapText&&(c.wrapText=ot(s.wrapText)),n.alignment=c;break;case"</alignment>":break;case"<protection":break;case"</protection>":case"<protection/>":break;case"<AlternateContent":a=!0;break;case"</AlternateContent>":a=!1;break;case"<extLst":case"<extLst>":case"</extLst>":break;case"<ext":a=!0;break;case"</ext>":a=!1;break;default:if(r&&r.WTF&&!a)throw new Error("unrecognized "+s[0]+" in cellXfs")}})}function YE(e){var t=[];return t[t.length]=me("cellXfs",null),e.forEach(function(r){t[t.length]=me("xf",null,r)}),t[t.length]="</cellXfs>",t.length===2?"":(t[0]=me("cellXfs",null,{count:t.length-2}).replace("/>",">"),t.join(""))}var qE=function(){var t=/<(?:\w+:)?numFmts([^>]*)>[\S\s]*?<\/(?:\w+:)?numFmts>/,r=/<(?:\w+:)?cellXfs([^>]*)>[\S\s]*?<\/(?:\w+:)?cellXfs>/,n=/<(?:\w+:)?fills([^>]*)>[\S\s]*?<\/(?:\w+:)?fills>/,a=/<(?:\w+:)?fonts([^>]*)>[\S\s]*?<\/(?:\w+:)?fonts>/,i=/<(?:\w+:)?borders([^>]*)>[\S\s]*?<\/(?:\w+:)?borders>/;return function(o,c,f){var u={};if(!o)return u;o=o.replace(/<!--([\s\S]*?)-->/mg,"").replace(/<!DOCTYPE[^\[]*\[[^\]]*\]>/gm,"");var d;return(d=o.match(t))&&GE(d,u,f),(d=o.match(a))&&zE(d,u,c,f),(d=o.match(n))&&jE(d,u,c,f),(d=o.match(i))&&HE(d,u,c,f),(d=o.match(r))&&KE(d,u,f),u}}();function Vh(e,t){var r=[kt,me("styleSheet",null,{xmlns:ma[0],"xmlns:vt":It.vt})],n;return e.SSF&&(n=XE(e.SSF))!=null&&(r[r.length]=n),r[r.length]='<fonts count="1"><font><sz val="12"/><color theme="1"/><name val="Calibri"/><family val="2"/><scheme val="minor"/></font></fonts>',r[r.length]='<fills count="2"><fill><patternFill patternType="none"/></fill><fill><patternFill patternType="gray125"/></fill></fills>',r[r.length]='<borders count="1"><border><left/><right/><top/><bottom/><diagonal/></border></borders>',r[r.length]='<cellStyleXfs count="1"><xf numFmtId="0" fontId="0" fillId="0" borderId="0"/></cellStyleXfs>',(n=YE(t.cellXfs))&&(r[r.length]=n),r[r.length]='<cellStyles count="1"><cellStyle name="Normal" xfId="0" builtinId="0"/></cellStyles>',r[r.length]='<dxfs count="0"/>',r[r.length]='<tableStyles count="0" defaultTableStyle="TableStyleMedium9" defaultPivotStyle="PivotStyleMedium4"/>',r.length>2&&(r[r.length]="</styleSheet>",r[1]=r[1].replace("/>",">")),r.join("")}function JE(e,t){var r=e.read_shift(2),n=Qt(e);return[r,n]}function ZE(e,t,r){r||(r=ne(6+4*t.length)),r.write_shift(2,e),$t(t,r);var n=r.length>r.l?r.slice(0,r.l):r;return r.l==null&&(r.l=r.length),n}function QE(e,t,r){var n={};n.sz=e.read_shift(2)/20;var a=N_(e);a.fItalic&&(n.italic=1),a.fCondense&&(n.condense=1),a.fExtend&&(n.extend=1),a.fShadow&&(n.shadow=1),a.fOutline&&(n.outline=1),a.fStrikeout&&(n.strike=1);var i=e.read_shift(2);switch(i===700&&(n.bold=1),e.read_shift(2)){case 1:n.vertAlign="superscript";break;case 2:n.vertAlign="subscript";break}var s=e.read_shift(1);s!=0&&(n.underline=s);var o=e.read_shift(1);o>0&&(n.family=o);var c=e.read_shift(1);switch(c>0&&(n.charset=c),e.l++,n.color=B_(e),e.read_shift(1)){case 1:n.scheme="major";break;case 2:n.scheme="minor";break}return n.name=Qt(e),n}function eb(e,t){t||(t=ne(25+4*32)),t.write_shift(2,e.sz*20),I_(e,t),t.write_shift(2,e.bold?700:400);var r=0;e.vertAlign=="superscript"?r=1:e.vertAlign=="subscript"&&(r=2),t.write_shift(2,r),t.write_shift(1,e.underline||0),t.write_shift(1,e.family||0),t.write_shift(1,e.charset||0),t.write_shift(1,0),ho(e.color,t);var n=0;return e.scheme=="major"&&(n=1),e.scheme=="minor"&&(n=2),t.write_shift(1,n),$t(e.name,t),t.length>t.l?t.slice(0,t.l):t}var tb=["none","solid","mediumGray","darkGray","lightGray","darkHorizontal","darkVertical","darkDown","darkUp","darkGrid","darkTrellis","lightHorizontal","lightVertical","lightDown","lightUp","lightGrid","lightTrellis","gray125","gray0625"],gc,rb=Zt;function Uh(e,t){t||(t=ne(4*3+8*7+16*1)),gc||(gc=io(tb));var r=gc[e.patternType];r==null&&(r=40),t.write_shift(4,r);var n=0;if(r!=40)for(ho({auto:1},t),ho({auto:1},t);n<12;++n)t.write_shift(4,0);else{for(;n<4;++n)t.write_shift(4,0);for(;n<12;++n)t.write_shift(4,0)}return t.length>t.l?t.slice(0,t.l):t}function nb(e,t){var r=e.l+t,n=e.read_shift(2),a=e.read_shift(2);return e.l=r,{ixfe:n,numFmtId:a}}function $h(e,t,r){r||(r=ne(16)),r.write_shift(2,t||0),r.write_shift(2,e.numFmtId||0),r.write_shift(2,0),r.write_shift(2,0),r.write_shift(2,0),r.write_shift(1,0),r.write_shift(1,0);var n=0;return r.write_shift(1,n),r.write_shift(1,0),r.write_shift(1,0),r.write_shift(1,0),r}function ns(e,t){return t||(t=ne(10)),t.write_shift(1,0),t.write_shift(1,0),t.write_shift(4,0),t.write_shift(4,0),t}var ab=Zt;function ib(e,t){return t||(t=ne(51)),t.write_shift(1,0),ns(null,t),ns(null,t),ns(null,t),ns(null,t),ns(null,t),t.length>t.l?t.slice(0,t.l):t}function sb(e,t){return t||(t=ne(12+4*10)),t.write_shift(4,e.xfId),t.write_shift(2,1),t.write_shift(1,+e.builtinId),t.write_shift(1,0),uo(e.name||"",t),t.length>t.l?t.slice(0,t.l):t}function ob(e,t,r){var n=ne(2052);return n.write_shift(4,e),uo(t,n),uo(r,n),n.length>n.l?n.slice(0,n.l):n}function lb(e,t,r){var n={};n.NumberFmt=[];for(var a in Ce)n.NumberFmt[a]=Ce[a];n.CellXf=[],n.Fonts=[];var i=[],s=!1;return On(e,function(c,f,u){switch(u){case 44:n.NumberFmt[c[0]]=c[1],mn(c[1],c[0]);break;case 43:n.Fonts.push(c),c.color.theme!=null&&t&&t.themeElements&&t.themeElements.clrScheme&&(c.color.rgb=ko(t.themeElements.clrScheme[c.color.theme].rgb,c.color.tint||0));break;case 1025:break;case 45:break;case 46:break;case 47:i[i.length-1]==617&&n.CellXf.push(c);break;case 48:case 507:case 572:case 475:break;case 1171:case 2102:case 1130:case 512:case 2095:case 3072:break;case 35:s=!0;break;case 36:s=!1;break;case 37:i.push(u),s=!0;break;case 38:i.pop(),s=!1;break;default:if(f.T>0)i.push(u);else if(f.T<0)i.pop();else if(!s||r.WTF&&i[i.length-1]!=37)throw new Error("Unexpected record 0x"+u.toString(16))}}),n}function cb(e,t){if(t){var r=0;[[5,8],[23,26],[41,44],[50,392]].forEach(function(n){for(var a=n[0];a<=n[1];++a)t[a]!=null&&++r}),r!=0&&(ce(e,615,Zr(r)),[[5,8],[23,26],[41,44],[50,392]].forEach(function(n){for(var a=n[0];a<=n[1];++a)t[a]!=null&&ce(e,44,ZE(a,t[a]))}),ce(e,616))}}function fb(e){var t=1;ce(e,611,Zr(t)),ce(e,43,eb({sz:12,color:{theme:1},name:"Calibri",family:2,scheme:"minor"})),ce(e,612)}function ub(e){var t=2;ce(e,603,Zr(t)),ce(e,45,Uh({patternType:"none"})),ce(e,45,Uh({patternType:"gray125"})),ce(e,604)}function db(e){var t=1;ce(e,613,Zr(t)),ce(e,46,ib()),ce(e,614)}function hb(e){var t=1;ce(e,626,Zr(t)),ce(e,47,$h({numFmtId:0,fontId:0,fillId:0,borderId:0},65535)),ce(e,627)}function mb(e,t){ce(e,617,Zr(t.length)),t.forEach(function(r){ce(e,47,$h(r,0))}),ce(e,618)}function pb(e){var t=1;ce(e,619,Zr(t)),ce(e,48,sb({xfId:0,builtinId:0,name:"Normal"})),ce(e,620)}function gb(e){var t=0;ce(e,505,Zr(t)),ce(e,506)}function xb(e){var t=0;ce(e,508,ob(t,"TableStyleMedium9","PivotStyleMedium4")),ce(e,509)}function vb(e,t){var r=pr();return ce(r,278),cb(r,e.SSF),fb(r),ub(r),db(r),hb(r),mb(r,t.cellXfs),pb(r),gb(r),xb(r),ce(r,279),r.end()}var wb=["</a:lt1>","</a:dk1>","</a:lt2>","</a:dk2>","</a:accent1>","</a:accent2>","</a:accent3>","</a:accent4>","</a:accent5>","</a:accent6>","</a:hlink>","</a:folHlink>"];function _b(e,t,r){t.themeElements.clrScheme=[];var n={};(e[0].match(Jt)||[]).forEach(function(a){var i=Oe(a);switch(i[0]){case"<a:clrScheme":case"</a:clrScheme>":break;case"<a:srgbClr":n.rgb=i.val;break;case"<a:sysClr":n.rgb=i.lastClr;break;case"<a:dk1>":case"</a:dk1>":case"<a:lt1>":case"</a:lt1>":case"<a:dk2>":case"</a:dk2>":case"<a:lt2>":case"</a:lt2>":case"<a:accent1>":case"</a:accent1>":case"<a:accent2>":case"</a:accent2>":case"<a:accent3>":case"</a:accent3>":case"<a:accent4>":case"</a:accent4>":case"<a:accent5>":case"</a:accent5>":case"<a:accent6>":case"</a:accent6>":case"<a:hlink>":case"</a:hlink>":case"<a:folHlink>":case"</a:folHlink>":i[0].charAt(1)==="/"?(t.themeElements.clrScheme[wb.indexOf(i[0])]=n,n={}):n.name=i[0].slice(3,i[0].length-1);break;default:if(r&&r.WTF)throw new Error("Unrecognized "+i[0]+" in clrScheme")}})}function yb(){}function kb(){}var Eb=/<a:clrScheme([^>]*)>[\s\S]*<\/a:clrScheme>/,bb=/<a:fontScheme([^>]*)>[\s\S]*<\/a:fontScheme>/,Sb=/<a:fmtScheme([^>]*)>[\s\S]*<\/a:fmtScheme>/;function Tb(e,t,r){t.themeElements={};var n;[["clrScheme",Eb,_b],["fontScheme",bb,yb],["fmtScheme",Sb,kb]].forEach(function(a){if(!(n=e.match(a[1])))throw new Error(a[0]+" not found in themeElements");a[2](n,t,r)})}var Cb=/<a:themeElements([^>]*)>[\s\S]*<\/a:themeElements>/;function Wh(e,t){(!e||e.length===0)&&(e=xc());var r,n={};if(!(r=e.match(Cb)))throw new Error("themeElements not found in theme");return Tb(r[0],n,t),n.raw=e,n}function xc(e,t){if(t&&t.themeXLSX)return t.themeXLSX;if(e&&typeof e.raw=="string")return e.raw;var r=[kt];return r[r.length]='<a:theme xmlns:a="http://schemas.openxmlformats.org/drawingml/2006/main" name="Office Theme">',r[r.length]="<a:themeElements>",r[r.length]='<a:clrScheme name="Office">',r[r.length]='<a:dk1><a:sysClr val="windowText" lastClr="000000"/></a:dk1>',r[r.length]='<a:lt1><a:sysClr val="window" lastClr="FFFFFF"/></a:lt1>',r[r.length]='<a:dk2><a:srgbClr val="1F497D"/></a:dk2>',r[r.length]='<a:lt2><a:srgbClr val="EEECE1"/></a:lt2>',r[r.length]='<a:accent1><a:srgbClr val="4F81BD"/></a:accent1>',r[r.length]='<a:accent2><a:srgbClr val="C0504D"/></a:accent2>',r[r.length]='<a:accent3><a:srgbClr val="9BBB59"/></a:accent3>',r[r.length]='<a:accent4><a:srgbClr val="8064A2"/></a:accent4>',r[r.length]='<a:accent5><a:srgbClr val="4BACC6"/></a:accent5>',r[r.length]='<a:accent6><a:srgbClr val="F79646"/></a:accent6>',r[r.length]='<a:hlink><a:srgbClr val="0000FF"/></a:hlink>',r[r.length]='<a:folHlink><a:srgbClr val="800080"/></a:folHlink>',r[r.length]="</a:clrScheme>",r[r.length]='<a:fontScheme name="Office">',r[r.length]="<a:majorFont>",r[r.length]='<a:latin typeface="Cambria"/>',r[r.length]='<a:ea typeface=""/>',r[r.length]='<a:cs typeface=""/>',r[r.length]='<a:font script="Jpan" typeface="ＭＳ Ｐゴシック"/>',r[r.length]='<a:font script="Hang" typeface="맑은 고딕"/>',r[r.length]='<a:font script="Hans" typeface="宋体"/>',r[r.length]='<a:font script="Hant" typeface="新細明體"/>',r[r.length]='<a:font script="Arab" typeface="Times New Roman"/>',r[r.length]='<a:font script="Hebr" typeface="Times New Roman"/>',r[r.length]='<a:font script="Thai" typeface="Tahoma"/>',r[r.length]='<a:font script="Ethi" typeface="Nyala"/>',r[r.length]='<a:font script="Beng" typeface="Vrinda"/>',r[r.length]='<a:font script="Gujr" typeface="Shruti"/>',r[r.length]='<a:font script="Khmr" typeface="MoolBoran"/>',r[r.length]='<a:font script="Knda" typeface="Tunga"/>',r[r.length]='<a:font script="Guru" typeface="Raavi"/>',r[r.length]='<a:font script="Cans" typeface="Euphemia"/>',r[r.length]='<a:font script="Cher" typeface="Plantagenet Cherokee"/>',r[r.length]='<a:font script="Yiii" typeface="Microsoft Yi Baiti"/>',r[r.length]='<a:font script="Tibt" typeface="Microsoft Himalaya"/>',r[r.length]='<a:font script="Thaa" typeface="MV Boli"/>',r[r.length]='<a:font script="Deva" typeface="Mangal"/>',r[r.length]='<a:font script="Telu" typeface="Gautami"/>',r[r.length]='<a:font script="Taml" typeface="Latha"/>',r[r.length]='<a:font script="Syrc" typeface="Estrangelo Edessa"/>',r[r.length]='<a:font script="Orya" typeface="Kalinga"/>',r[r.length]='<a:font script="Mlym" typeface="Kartika"/>',r[r.length]='<a:font script="Laoo" typeface="DokChampa"/>',r[r.length]='<a:font script="Sinh" typeface="Iskoola Pota"/>',r[r.length]='<a:font script="Mong" typeface="Mongolian Baiti"/>',r[r.length]='<a:font script="Viet" typeface="Times New Roman"/>',r[r.length]='<a:font script="Uigh" typeface="Microsoft Uighur"/>',r[r.length]='<a:font script="Geor" typeface="Sylfaen"/>',r[r.length]="</a:majorFont>",r[r.length]="<a:minorFont>",r[r.length]='<a:latin typeface="Calibri"/>',r[r.length]='<a:ea typeface=""/>',r[r.length]='<a:cs typeface=""/>',r[r.length]='<a:font script="Jpan" typeface="ＭＳ Ｐゴシック"/>',r[r.length]='<a:font script="Hang" typeface="맑은 고딕"/>',r[r.length]='<a:font script="Hans" typeface="宋体"/>',r[r.length]='<a:font script="Hant" typeface="新細明體"/>',r[r.length]='<a:font script="Arab" typeface="Arial"/>',r[r.length]='<a:font script="Hebr" typeface="Arial"/>',r[r.length]='<a:font script="Thai" typeface="Tahoma"/>',r[r.length]='<a:font script="Ethi" typeface="Nyala"/>',r[r.length]='<a:font script="Beng" typeface="Vrinda"/>',r[r.length]='<a:font script="Gujr" typeface="Shruti"/>',r[r.length]='<a:font script="Khmr" typeface="DaunPenh"/>',r[r.length]='<a:font script="Knda" typeface="Tunga"/>',r[r.length]='<a:font script="Guru" typeface="Raavi"/>',r[r.length]='<a:font script="Cans" typeface="Euphemia"/>',r[r.length]='<a:font script="Cher" typeface="Plantagenet Cherokee"/>',r[r.length]='<a:font script="Yiii" typeface="Microsoft Yi Baiti"/>',r[r.length]='<a:font script="Tibt" typeface="Microsoft Himalaya"/>',r[r.length]='<a:font script="Thaa" typeface="MV Boli"/>',r[r.length]='<a:font script="Deva" typeface="Mangal"/>',r[r.length]='<a:font script="Telu" typeface="Gautami"/>',r[r.length]='<a:font script="Taml" typeface="Latha"/>',r[r.length]='<a:font script="Syrc" typeface="Estrangelo Edessa"/>',r[r.length]='<a:font script="Orya" typeface="Kalinga"/>',r[r.length]='<a:font script="Mlym" typeface="Kartika"/>',r[r.length]='<a:font script="Laoo" typeface="DokChampa"/>',r[r.length]='<a:font script="Sinh" typeface="Iskoola Pota"/>',r[r.length]='<a:font script="Mong" typeface="Mongolian Baiti"/>',r[r.length]='<a:font script="Viet" typeface="Arial"/>',r[r.length]='<a:font script="Uigh" typeface="Microsoft Uighur"/>',r[r.length]='<a:font script="Geor" typeface="Sylfaen"/>',r[r.length]="</a:minorFont>",r[r.length]="</a:fontScheme>",r[r.length]='<a:fmtScheme name="Office">',r[r.length]="<a:fillStyleLst>",r[r.length]='<a:solidFill><a:schemeClr val="phClr"/></a:solidFill>',r[r.length]='<a:gradFill rotWithShape="1">',r[r.length]="<a:gsLst>",r[r.length]='<a:gs pos="0"><a:schemeClr val="phClr"><a:tint val="50000"/><a:satMod val="300000"/></a:schemeClr></a:gs>',r[r.length]='<a:gs pos="35000"><a:schemeClr val="phClr"><a:tint val="37000"/><a:satMod val="300000"/></a:schemeClr></a:gs>',r[r.length]='<a:gs pos="100000"><a:schemeClr val="phClr"><a:tint val="15000"/><a:satMod val="350000"/></a:schemeClr></a:gs>',r[r.length]="</a:gsLst>",r[r.length]='<a:lin ang="16200000" scaled="1"/>',r[r.length]="</a:gradFill>",r[r.length]='<a:gradFill rotWithShape="1">',r[r.length]="<a:gsLst>",r[r.length]='<a:gs pos="0"><a:schemeClr val="phClr"><a:tint val="100000"/><a:shade val="100000"/><a:satMod val="130000"/></a:schemeClr></a:gs>',r[r.length]='<a:gs pos="100000"><a:schemeClr val="phClr"><a:tint val="50000"/><a:shade val="100000"/><a:satMod val="350000"/></a:schemeClr></a:gs>',r[r.length]="</a:gsLst>",r[r.length]='<a:lin ang="16200000" scaled="0"/>',r[r.length]="</a:gradFill>",r[r.length]="</a:fillStyleLst>",r[r.length]="<a:lnStyleLst>",r[r.length]='<a:ln w="9525" cap="flat" cmpd="sng" algn="ctr"><a:solidFill><a:schemeClr val="phClr"><a:shade val="95000"/><a:satMod val="105000"/></a:schemeClr></a:solidFill><a:prstDash val="solid"/></a:ln>',r[r.length]='<a:ln w="25400" cap="flat" cmpd="sng" algn="ctr"><a:solidFill><a:schemeClr val="phClr"/></a:solidFill><a:prstDash val="solid"/></a:ln>',r[r.length]='<a:ln w="38100" cap="flat" cmpd="sng" algn="ctr"><a:solidFill><a:schemeClr val="phClr"/></a:solidFill><a:prstDash val="solid"/></a:ln>',r[r.length]="</a:lnStyleLst>",r[r.length]="<a:effectStyleLst>",r[r.length]="<a:effectStyle>",r[r.length]="<a:effectLst>",r[r.length]='<a:outerShdw blurRad="40000" dist="20000" dir="5400000" rotWithShape="0"><a:srgbClr val="000000"><a:alpha val="38000"/></a:srgbClr></a:outerShdw>',r[r.length]="</a:effectLst>",r[r.length]="</a:effectStyle>",r[r.length]="<a:effectStyle>",r[r.length]="<a:effectLst>",r[r.length]='<a:outerShdw blurRad="40000" dist="23000" dir="5400000" rotWithShape="0"><a:srgbClr val="000000"><a:alpha val="35000"/></a:srgbClr></a:outerShdw>',r[r.length]="</a:effectLst>",r[r.length]="</a:effectStyle>",r[r.length]="<a:effectStyle>",r[r.length]="<a:effectLst>",r[r.length]='<a:outerShdw blurRad="40000" dist="23000" dir="5400000" rotWithShape="0"><a:srgbClr val="000000"><a:alpha val="35000"/></a:srgbClr></a:outerShdw>',r[r.length]="</a:effectLst>",r[r.length]='<a:scene3d><a:camera prst="orthographicFront"><a:rot lat="0" lon="0" rev="0"/></a:camera><a:lightRig rig="threePt" dir="t"><a:rot lat="0" lon="0" rev="1200000"/></a:lightRig></a:scene3d>',r[r.length]='<a:sp3d><a:bevelT w="63500" h="25400"/></a:sp3d>',r[r.length]="</a:effectStyle>",r[r.length]="</a:effectStyleLst>",r[r.length]="<a:bgFillStyleLst>",r[r.length]='<a:solidFill><a:schemeClr val="phClr"/></a:solidFill>',r[r.length]='<a:gradFill rotWithShape="1">',r[r.length]="<a:gsLst>",r[r.length]='<a:gs pos="0"><a:schemeClr val="phClr"><a:tint val="40000"/><a:satMod val="350000"/></a:schemeClr></a:gs>',r[r.length]='<a:gs pos="40000"><a:schemeClr val="phClr"><a:tint val="45000"/><a:shade val="99000"/><a:satMod val="350000"/></a:schemeClr></a:gs>',r[r.length]='<a:gs pos="100000"><a:schemeClr val="phClr"><a:shade val="20000"/><a:satMod val="255000"/></a:schemeClr></a:gs>',r[r.length]="</a:gsLst>",r[r.length]='<a:path path="circle"><a:fillToRect l="50000" t="-80000" r="50000" b="180000"/></a:path>',r[r.length]="</a:gradFill>",r[r.length]='<a:gradFill rotWithShape="1">',r[r.length]="<a:gsLst>",r[r.length]='<a:gs pos="0"><a:schemeClr val="phClr"><a:tint val="80000"/><a:satMod val="300000"/></a:schemeClr></a:gs>',r[r.length]='<a:gs pos="100000"><a:schemeClr val="phClr"><a:shade val="30000"/><a:satMod val="200000"/></a:schemeClr></a:gs>',r[r.length]="</a:gsLst>",r[r.length]='<a:path path="circle"><a:fillToRect l="50000" t="50000" r="50000" b="50000"/></a:path>',r[r.length]="</a:gradFill>",r[r.length]="</a:bgFillStyleLst>",r[r.length]="</a:fmtScheme>",r[r.length]="</a:themeElements>",r[r.length]="<a:objectDefaults>",r[r.length]="<a:spDef>",r[r.length]='<a:spPr/><a:bodyPr/><a:lstStyle/><a:style><a:lnRef idx="1"><a:schemeClr val="accent1"/></a:lnRef><a:fillRef idx="3"><a:schemeClr val="accent1"/></a:fillRef><a:effectRef idx="2"><a:schemeClr val="accent1"/></a:effectRef><a:fontRef idx="minor"><a:schemeClr val="lt1"/></a:fontRef></a:style>',r[r.length]="</a:spDef>",r[r.length]="<a:lnDef>",r[r.length]='<a:spPr/><a:bodyPr/><a:lstStyle/><a:style><a:lnRef idx="2"><a:schemeClr val="accent1"/></a:lnRef><a:fillRef idx="0"><a:schemeClr val="accent1"/></a:fillRef><a:effectRef idx="1"><a:schemeClr val="accent1"/></a:effectRef><a:fontRef idx="minor"><a:schemeClr val="tx1"/></a:fontRef></a:style>',r[r.length]="</a:lnDef>",r[r.length]="</a:objectDefaults>",r[r.length]="<a:extraClrSchemeLst/>",r[r.length]="</a:theme>",r.join("")}function Fb(e,t,r){var n=e.l+t,a=e.read_shift(4);if(a!==124226){if(!r.cellStyles){e.l=n;return}var i=e.slice(e.l);e.l=n;var s;try{s=rd(i,{type:"array"})}catch{return}var o=Tr(s,"theme/theme/theme1.xml",!0);if(o)return Wh(o,r)}}function Ab(e){return e.read_shift(4)}function Db(e){var t={};switch(t.xclrType=e.read_shift(2),t.nTintShade=e.read_shift(2),t.xclrType){case 0:e.l+=4;break;case 1:t.xclrValue=Rb(e,4);break;case 2:t.xclrValue=dh(e);break;case 3:t.xclrValue=Ab(e);break;case 4:e.l+=4;break}return e.l+=8,t}function Rb(e,t){return Zt(e,t)}function Ob(e,t){return Zt(e,t)}function Bb(e){var t=e.read_shift(2),r=e.read_shift(2)-4,n=[t];switch(t){case 4:case 5:case 7:case 8:case 9:case 10:case 11:case 13:n[1]=Db(e);break;case 6:n[1]=Ob(e,r);break;case 14:case 15:n[1]=e.read_shift(r===1?1:2);break;default:throw new Error("Unrecognized ExtProp type: "+t+" "+r)}return n}function Nb(e,t){var r=e.l+t;e.l+=2;var n=e.read_shift(2);e.l+=2;for(var a=e.read_shift(2),i=[];a-- >0;)i.push(Bb(e,r-e.l));return{ixfe:n,ext:i}}function Ib(e,t){t.forEach(function(r){switch(r[0]){}})}function Pb(e,t){return{flags:e.read_shift(4),version:e.read_shift(4),name:Qt(e)}}function Lb(e){var t=ne(12+2*e.name.length);return t.write_shift(4,e.flags),t.write_shift(4,e.version),$t(e.name,t),t.slice(0,t.l)}function Mb(e){for(var t=[],r=e.read_shift(4);r-- >0;)t.push([e.read_shift(4),e.read_shift(4)]);return t}function Vb(e){var t=ne(4+8*e.length);t.write_shift(4,e.length);for(var r=0;r<e.length;++r)t.write_shift(4,e[r][0]),t.write_shift(4,e[r][1]);return t}function Ub(e,t){var r=ne(8+2*t.length);return r.write_shift(4,e),$t(t,r),r.slice(0,r.l)}function $b(e){return e.l+=4,e.read_shift(4)!=0}function Wb(e,t){var r=ne(8);return r.write_shift(4,e),r.write_shift(4,t?1:0),r}function Hb(e,t,r){var n={Types:[],Cell:[],Value:[]},a=r||{},i=[],s=!1,o=2;return On(e,function(c,f,u){switch(u){case 335:n.Types.push({name:c.name});break;case 51:c.forEach(function(d){o==1?n.Cell.push({type:n.Types[d[0]-1].name,index:d[1]}):o==0&&n.Value.push({type:n.Types[d[0]-1].name,index:d[1]})});break;case 337:o=c?1:0;break;case 338:o=2;break;case 35:i.push(u),s=!0;break;case 36:i.pop(),s=!1;break;default:if(!f.T){if(!s||a.WTF&&i[i.length-1]!=35)throw new Error("Unexpected record 0x"+u.toString(16))}}}),n}function jb(){var e=pr();return ce(e,332),ce(e,334,Zr(1)),ce(e,335,Lb({name:"XLDAPR",version:12e4,flags:3496657072})),ce(e,336),ce(e,339,Ub(1,"XLDAPR")),ce(e,52),ce(e,35,Zr(514)),ce(e,4096,Zr(0)),ce(e,4097,Vr(1)),ce(e,36),ce(e,53),ce(e,340),ce(e,337,Wb(1,!0)),ce(e,51,Vb([[1,0]])),ce(e,338),ce(e,333),e.end()}function zb(e,t,r){var n={Types:[],Cell:[],Value:[]};if(!e)return n;var a=!1,i=2,s;return e.replace(Jt,function(o){var c=Oe(o);switch(pn(c[0])){case"<?xml":break;case"<metadata":case"</metadata>":break;case"<metadataTypes":case"</metadataTypes>":break;case"<metadataType":n.Types.push({name:c.name});break;case"</metadataType>":break;case"<futureMetadata":for(var f=0;f<n.Types.length;++f)n.Types[f].name==c.name&&(s=n.Types[f]);break;case"</futureMetadata>":break;case"<bk>":break;case"</bk>":break;case"<rc":i==1?n.Cell.push({type:n.Types[c.t-1].name,index:+c.v}):i==0&&n.Value.push({type:n.Types[c.t-1].name,index:+c.v});break;case"</rc>":break;case"<cellMetadata":i=1;break;case"</cellMetadata>":i=2;break;case"<valueMetadata":i=0;break;case"</valueMetadata>":i=2;break;case"<extLst":case"<extLst>":case"</extLst>":case"<extLst/>":break;case"<ext":a=!0;break;case"</ext>":a=!1;break;case"<rvb":if(!s)break;s.offsets||(s.offsets=[]),s.offsets.push(+c.i);break;default:if(!a&&r.WTF)throw new Error("unrecognized "+c[0]+" in metadata")}return o}),n}function Hh(){var e=[kt];return e.push(`<metadata xmlns="http://schemas.openxmlformats.org/spreadsheetml/2006/main" xmlns:xlrd="http://schemas.microsoft.com/office/spreadsheetml/2017/richdata" xmlns:xda="http://schemas.microsoft.com/office/spreadsheetml/2017/dynamicarray">
  <metadataTypes count="1">
    <metadataType name="XLDAPR" minSupportedVersion="120000" copy="1" pasteAll="1" pasteValues="1" merge="1" splitFirst="1" rowColShift="1" clearFormats="1" clearComments="1" assign="1" coerce="1" cellMeta="1"/>
  </metadataTypes>
  <futureMetadata name="XLDAPR" count="1">
    <bk>
      <extLst>
        <ext uri="{bdbb8cdc-fa1e-496e-a857-3c3f30c029c3}">
          <xda:dynamicArrayProperties fDynamic="1" fCollapsed="0"/>
        </ext>
      </extLst>
    </bk>
  </futureMetadata>
  <cellMetadata count="1">
    <bk>
      <rc t="1" v="0"/>
    </bk>
  </cellMetadata>
</metadata>`),e.join("")}function Gb(e){var t=[];if(!e)return t;var r=1;return(e.match(Jt)||[]).forEach(function(n){var a=Oe(n);switch(a[0]){case"<?xml":break;case"<calcChain":case"<calcChain>":case"</calcChain>":break;case"<c":delete a[0],a.i?r=a.i:a.i=r,t.push(a);break}}),t}function Xb(e){var t={};t.i=e.read_shift(4);var r={};r.r=e.read_shift(4),r.c=e.read_shift(4),t.r=Ae(r);var n=e.read_shift(1);return n&2&&(t.l="1"),n&8&&(t.a="1"),t}function Kb(e,t,r){var n=[];return On(e,function(i,s,o){switch(o){case 63:n.push(i);break;default:if(!s.T)throw new Error("Unexpected record 0x"+o.toString(16))}}),n}function hD(){}function Yb(e,t,r,n){if(!e)return e;var a=n||{},i=!1;On(e,function(o,c,f){switch(f){case 359:case 363:case 364:case 366:case 367:case 368:case 369:case 370:case 371:case 472:case 577:case 578:case 579:case 580:case 581:case 582:case 583:case 584:case 585:case 586:case 587:break;case 35:i=!0;break;case 36:i=!1;break;default:if(!c.T){if(!i||a.WTF)throw new Error("Unexpected record 0x"+f.toString(16))}}},a)}function qb(e,t){if(!e)return"??";var r=(e.match(/<c:chart [^>]*r:id="([^"]*)"/)||["",""])[1];return t["!id"][r].Target}var ti=1024;function jh(e,t){for(var r=[21600,21600],n=["m0,0l0",r[1],r[0],r[1],r[0],"0xe"].join(","),a=[me("xml",null,{"xmlns:v":Cr.v,"xmlns:o":Cr.o,"xmlns:x":Cr.x,"xmlns:mv":Cr.mv}).replace(/\/>/,">"),me("o:shapelayout",me("o:idmap",null,{"v:ext":"edit",data:e}),{"v:ext":"edit"}),me("v:shapetype",[me("v:stroke",null,{joinstyle:"miter"}),me("v:path",null,{gradientshapeok:"t","o:connecttype":"rect"})].join(""),{id:"_x0000_t202","o:spt":202,coordsize:r.join(","),path:n})];ti<e*1e3;)ti+=1e3;return t.forEach(function(i){var s=ht(i[0]),o={color2:"#BEFF82",type:"gradient"};o.type=="gradient"&&(o.angle="-180");var c=o.type=="gradient"?me("o:fill",null,{type:"gradientUnscaled","v:ext":"view"}):null,f=me("v:fill",c,o),u={on:"t",obscured:"t"};++ti,a=a.concat(["<v:shape"+Hi({id:"_x0000_s"+ti,type:"#_x0000_t202",style:"position:absolute; margin-left:80pt;margin-top:5pt;width:104pt;height:64pt;z-index:10"+(i[1].hidden?";visibility:hidden":""),fillcolor:"#ECFAD4",strokecolor:"#edeaa1"})+">",f,me("v:shadow",null,u),me("v:path",null,{"o:connecttype":"none"}),'<v:textbox><div style="text-align:left"></div></v:textbox>','<x:ClientData ObjectType="Note">',"<x:MoveWithCells/>","<x:SizeWithCells/>",Gt("x:Anchor",[s.c+1,0,s.r+1,0,s.c+3,20,s.r+5,20].join(",")),Gt("x:AutoFill","False"),Gt("x:Row",String(s.r)),Gt("x:Column",String(s.c)),i[1].hidden?"":"<x:Visible/>","</x:ClientData>","</v:shape>"])}),a.push("</xml>"),a.join("")}function zh(e,t,r,n){var a=Array.isArray(e),i;t.forEach(function(s){var o=ht(s.ref);if(a?(e[o.r]||(e[o.r]=[]),i=e[o.r][o.c]):i=e[s.ref],!i){i={t:"z"},a?e[o.r][o.c]=i:e[s.ref]=i;var c=Xe(e["!ref"]||"BDWGO1000001:A1");c.s.r>o.r&&(c.s.r=o.r),c.e.r<o.r&&(c.e.r=o.r),c.s.c>o.c&&(c.s.c=o.c),c.e.c<o.c&&(c.e.c=o.c);var f=Pe(c);f!==e["!ref"]&&(e["!ref"]=f)}i.c||(i.c=[]);var u={a:s.author,t:s.t,r:s.r,T:r};s.h&&(u.h=s.h);for(var d=i.c.length-1;d>=0;--d){if(!r&&i.c[d].T)return;r&&!i.c[d].T&&i.c.splice(d,1)}if(r&&n){for(d=0;d<n.length;++d)if(u.a==n[d].id){u.a=n[d].name||u.a;break}}i.c.push(u)})}function Jb(e,t){if(e.match(/<(?:\w+:)?comments *\/>/))return[];var r=[],n=[],a=e.match(/<(?:\w+:)?authors>([\s\S]*)<\/(?:\w+:)?authors>/);a&&a[1]&&a[1].split(/<\/\w*:?author>/).forEach(function(s){if(!(s===""||s.trim()==="")){var o=s.match(/<(?:\w+:)?author[^>]*>(.*)/);o&&r.push(o[1])}});var i=e.match(/<(?:\w+:)?commentList>([\s\S]*)<\/(?:\w+:)?commentList>/);return i&&i[1]&&i[1].split(/<\/\w*:?comment>/).forEach(function(s){if(!(s===""||s.trim()==="")){var o=s.match(/<(?:\w+:)?comment[^>]*>/);if(o){var c=Oe(o[0]),f={author:c.authorId&&r[c.authorId]||"sheetjsghost",ref:c.ref,guid:c.guid},u=ht(c.ref);if(!(t.sheetRows&&t.sheetRows<=u.r)){var d=s.match(/<(?:\w+:)?text>([\s\S]*)<\/(?:\w+:)?text>/),h=!!d&&!!d[1]&&dc(d[1])||{r:"",t:"",h:""};f.r=h.r,h.r=="<t></t>"&&(h.t=h.h=""),f.t=(h.t||"").replace(/\r\n/g,`
`).replace(/\r/g,`
`),t.cellHTML&&(f.h=h.h),n.push(f)}}}}),n}function Gh(e){var t=[kt,me("comments",null,{xmlns:ma[0]})],r=[];return t.push("<authors>"),e.forEach(function(n){n[1].forEach(function(a){var i=Qe(a.a);r.indexOf(i)==-1&&(r.push(i),t.push("<author>"+i+"</author>")),a.T&&a.ID&&r.indexOf("tc="+a.ID)==-1&&(r.push("tc="+a.ID),t.push("<author>tc="+a.ID+"</author>"))})}),r.length==0&&(r.push("SheetJ5"),t.push("<author>SheetJ5</author>")),t.push("</authors>"),t.push("<commentList>"),e.forEach(function(n){var a=0,i=[];if(n[1][0]&&n[1][0].T&&n[1][0].ID?a=r.indexOf("tc="+n[1][0].ID):n[1].forEach(function(c){c.a&&(a=r.indexOf(Qe(c.a))),i.push(c.t||"")}),t.push('<comment ref="'+n[0]+'" authorId="'+a+'"><text>'),i.length<=1)t.push(Gt("t",Qe(i[0]||"")));else{for(var s=`Comment:
    `+i[0]+`
`,o=1;o<i.length;++o)s+=`Reply:
    `+i[o]+`
`;t.push(Gt("t",Qe(s)))}t.push("</text></comment>")}),t.push("</commentList>"),t.length>2&&(t[t.length]="</comments>",t[1]=t[1].replace("/>",">")),t.join("")}function Zb(e,t){var r=[],n=!1,a={},i=0;return e.replace(Jt,function(o,c){var f=Oe(o);switch(pn(f[0])){case"<?xml":break;case"<ThreadedComments":break;case"</ThreadedComments>":break;case"<threadedComment":a={author:f.personId,guid:f.id,ref:f.ref,T:1};break;case"</threadedComment>":a.t!=null&&r.push(a);break;case"<text>":case"<text":i=c+o.length;break;case"</text>":a.t=e.slice(i,c).replace(/\r\n/g,`
`).replace(/\r/g,`
`);break;case"<mentions":case"<mentions>":n=!0;break;case"</mentions>":n=!1;break;case"<extLst":case"<extLst>":case"</extLst>":case"<extLst/>":break;case"<ext":n=!0;break;case"</ext>":n=!1;break;default:if(!n&&t.WTF)throw new Error("unrecognized "+f[0]+" in threaded comments")}return o}),r}function Qb(e,t,r){var n=[kt,me("ThreadedComments",null,{xmlns:It.TCMNT}).replace(/[\/]>/,">")];return e.forEach(function(a){var i="";(a[1]||[]).forEach(function(s,o){if(!s.T){delete s.ID;return}s.a&&t.indexOf(s.a)==-1&&t.push(s.a);var c={ref:a[0],id:"{54EE7951-7262-4200-6969-"+("000000000000"+r.tcid++).slice(-12)+"}"};o==0?i=c.id:c.parentId=i,s.ID=c.id,s.a&&(c.personId="{54EE7950-7262-4200-6969-"+("000000000000"+t.indexOf(s.a)).slice(-12)+"}"),n.push(me("threadedComment",Gt("text",s.t||""),c))})}),n.push("</ThreadedComments>"),n.join("")}function eS(e,t){var r=[],n=!1;return e.replace(Jt,function(i){var s=Oe(i);switch(pn(s[0])){case"<?xml":break;case"<personList":break;case"</personList>":break;case"<person":r.push({name:s.displayname,id:s.id});break;case"</person>":break;case"<extLst":case"<extLst>":case"</extLst>":case"<extLst/>":break;case"<ext":n=!0;break;case"</ext>":n=!1;break;default:if(!n&&t.WTF)throw new Error("unrecognized "+s[0]+" in threaded comments")}return i}),r}function tS(e){var t=[kt,me("personList",null,{xmlns:It.TCMNT,"xmlns:x":ma[0]}).replace(/[\/]>/,">")];return e.forEach(function(r,n){t.push(me("person",null,{displayName:r,id:"{54EE7950-7262-4200-6969-"+("000000000000"+n).slice(-12)+"}",userId:r,providerId:"None"}))}),t.push("</personList>"),t.join("")}function rS(e){var t={};t.iauthor=e.read_shift(4);var r=wa(e);return t.rfx=r.s,t.ref=Ae(r.s),e.l+=16,t}function nS(e,t){return t==null&&(t=ne(36)),t.write_shift(4,e[1].iauthor),Ja(e[0],t),t.write_shift(4,0),t.write_shift(4,0),t.write_shift(4,0),t.write_shift(4,0),t}var aS=Qt;function iS(e){return $t(e.slice(0,54))}function sS(e,t){var r=[],n=[],a={},i=!1;return On(e,function(o,c,f){switch(f){case 632:n.push(o);break;case 635:a=o;break;case 637:a.t=o.t,a.h=o.h,a.r=o.r;break;case 636:if(a.author=n[a.iauthor],delete a.iauthor,t.sheetRows&&a.rfx&&t.sheetRows<=a.rfx.r)break;a.t||(a.t=""),delete a.rfx,r.push(a);break;case 3072:break;case 35:i=!0;break;case 36:i=!1;break;case 37:break;case 38:break;default:if(!c.T){if(!i||t.WTF)throw new Error("Unexpected record 0x"+f.toString(16))}}}),r}function oS(e){var t=pr(),r=[];return ce(t,628),ce(t,630),e.forEach(function(n){n[1].forEach(function(a){r.indexOf(a.a)>-1||(r.push(a.a.slice(0,54)),ce(t,632,iS(a.a)))})}),ce(t,631),ce(t,633),e.forEach(function(n){n[1].forEach(function(a){a.iauthor=r.indexOf(a.a);var i={s:ht(n[0]),e:ht(n[0])};ce(t,635,nS([i,a])),a.t&&a.t.length>0&&ce(t,637,A_(a)),ce(t,636),delete a.iauthor})}),ce(t,634),ce(t,629),t.end()}var lS="application/vnd.ms-office.vbaProject";function cS(e){var t=Se.utils.cfb_new({root:"R"});return e.FullPaths.forEach(function(r,n){if(!(r.slice(-1)==="/"||!r.match(/_VBA_PROJECT_CUR/))){var a=r.replace(/^[^\/]*/,"R").replace(/\/_VBA_PROJECT_CUR\u0000*/,"");Se.utils.cfb_add(t,a,e.FileIndex[n].content)}}),Se.write(t)}function fS(e,t){t.FullPaths.forEach(function(r,n){if(n!=0){var a=r.replace(/[^\/]*[\/]/,"/_VBA_PROJECT_CUR/");a.slice(-1)!=="/"&&Se.utils.cfb_add(e,a,t.FileIndex[n].content)}})}var Xh=["xlsb","xlsm","xlam","biff8","xla"];function uS(){return{"!type":"dialog"}}function dS(){return{"!type":"dialog"}}function hS(){return{"!type":"macro"}}function mS(){return{"!type":"macro"}}var ri=function(){var e=/(^|[^A-Za-z_])R(\[?-?\d+\]|[1-9]\d*|)C(\[?-?\d+\]|[1-9]\d*|)(?![A-Za-z0-9_])/g,t={r:0,c:0};function r(n,a,i,s){var o=!1,c=!1;i.length==0?c=!0:i.charAt(0)=="["&&(c=!0,i=i.slice(1,-1)),s.length==0?o=!0:s.charAt(0)=="["&&(o=!0,s=s.slice(1,-1));var f=i.length>0?parseInt(i,10)|0:0,u=s.length>0?parseInt(s,10)|0:0;return o?u+=t.c:--u,c?f+=t.r:--f,a+(o?"":"$")+dt(u)+(c?"":"$")+Et(f)}return function(a,i){return t=i,a.replace(e,r)}}(),vc=/(^|[^._A-Z0-9])([$]?)([A-Z]{1,2}|[A-W][A-Z]{2}|X[A-E][A-Z]|XF[A-D])([$]?)(10[0-3]\d{4}|104[0-7]\d{3}|1048[0-4]\d{2}|10485[0-6]\d|104857[0-6]|[1-9]\d{0,5})(?![_.\(A-Za-z0-9])/g,wc=function(){return function(t,r){return t.replace(vc,function(n,a,i,s,o,c){var f=Kl(s)-(i?0:r.c),u=Xl(c)-(o?0:r.r),d=u==0?"":o?u+1:"["+u+"]",h=f==0?"":i?f+1:"["+f+"]";return a+"R"+d+"C"+h})}}();function Kh(e,t){return e.replace(vc,function(r,n,a,i,s,o){return n+(a=="$"?a+i:dt(Kl(i)+t.c))+(s=="$"?s+o:Et(Xl(o)+t.r))})}function pS(e,t,r){var n=gr(t),a=n.s,i=ht(r),s={r:i.r-a.r,c:i.c-a.c};return Kh(e,s)}function gS(e){return e.length!=1}function Yh(e){return e.replace(/_xlfn\./g,"")}function At(e){e.l+=1}function ea(e,t){var r=e.read_shift(t==1?1:2);return[r&16383,r>>14&1,r>>15&1]}function qh(e,t,r){var n=2;if(r){if(r.biff>=2&&r.biff<=5)return Jh(e);r.biff==12&&(n=4)}var a=e.read_shift(n),i=e.read_shift(n),s=ea(e,2),o=ea(e,2);return{s:{r:a,c:s[0],cRel:s[1],rRel:s[2]},e:{r:i,c:o[0],cRel:o[1],rRel:o[2]}}}function Jh(e){var t=ea(e,2),r=ea(e,2),n=e.read_shift(1),a=e.read_shift(1);return{s:{r:t[0],c:n,cRel:t[1],rRel:t[2]},e:{r:r[0],c:a,cRel:r[1],rRel:r[2]}}}function xS(e,t,r){if(r.biff<8)return Jh(e);var n=e.read_shift(r.biff==12?4:2),a=e.read_shift(r.biff==12?4:2),i=ea(e,2),s=ea(e,2);return{s:{r:n,c:i[0],cRel:i[1],rRel:i[2]},e:{r:a,c:s[0],cRel:s[1],rRel:s[2]}}}function Zh(e,t,r){if(r&&r.biff>=2&&r.biff<=5)return vS(e);var n=e.read_shift(r&&r.biff==12?4:2),a=ea(e,2);return{r:n,c:a[0],cRel:a[1],rRel:a[2]}}function vS(e){var t=ea(e,2),r=e.read_shift(1);return{r:t[0],c:r,cRel:t[1],rRel:t[2]}}function wS(e){var t=e.read_shift(2),r=e.read_shift(2);return{r:t,c:r&255,fQuoted:!!(r&16384),cRel:r>>15,rRel:r>>15}}function _S(e,t,r){var n=r&&r.biff?r.biff:8;if(n>=2&&n<=5)return yS(e);var a=e.read_shift(n>=12?4:2),i=e.read_shift(2),s=(i&16384)>>14,o=(i&32768)>>15;if(i&=16383,o==1)for(;a>524287;)a-=1048576;if(s==1)for(;i>8191;)i=i-16384;return{r:a,c:i,cRel:s,rRel:o}}function yS(e){var t=e.read_shift(2),r=e.read_shift(1),n=(t&32768)>>15,a=(t&16384)>>14;return t&=16383,n==1&&t>=8192&&(t=t-16384),a==1&&r>=128&&(r=r-256),{r:t,c:r,cRel:a,rRel:n}}function kS(e,t,r){var n=(e[e.l++]&96)>>5,a=qh(e,r.biff>=2&&r.biff<=5?6:8,r);return[n,a]}function ES(e,t,r){var n=(e[e.l++]&96)>>5,a=e.read_shift(2,"i"),i=8;if(r)switch(r.biff){case 5:e.l+=12,i=6;break;case 12:i=12;break}var s=qh(e,i,r);return[n,a,s]}function bS(e,t,r){var n=(e[e.l++]&96)>>5;return e.l+=r&&r.biff>8?12:r.biff<8?6:8,[n]}function SS(e,t,r){var n=(e[e.l++]&96)>>5,a=e.read_shift(2),i=8;if(r)switch(r.biff){case 5:e.l+=12,i=6;break;case 12:i=12;break}return e.l+=i,[n,a]}function TS(e,t,r){var n=(e[e.l++]&96)>>5,a=xS(e,t-1,r);return[n,a]}function CS(e,t,r){var n=(e[e.l++]&96)>>5;return e.l+=r.biff==2?6:r.biff==12?14:7,[n]}function Qh(e){var t=e[e.l+1]&1,r=1;return e.l+=4,[t,r]}function FS(e,t,r){e.l+=2;for(var n=e.read_shift(r&&r.biff==2?1:2),a=[],i=0;i<=n;++i)a.push(e.read_shift(r&&r.biff==2?1:2));return a}function AS(e,t,r){var n=e[e.l+1]&255?1:0;return e.l+=2,[n,e.read_shift(r&&r.biff==2?1:2)]}function DS(e,t,r){var n=e[e.l+1]&255?1:0;return e.l+=2,[n,e.read_shift(r&&r.biff==2?1:2)]}function RS(e){var t=e[e.l+1]&255?1:0;return e.l+=2,[t,e.read_shift(2)]}function OS(e,t,r){var n=e[e.l+1]&255?1:0;return e.l+=r&&r.biff==2?3:4,[n]}function em(e){var t=e.read_shift(1),r=e.read_shift(1);return[t,r]}function BS(e){return e.read_shift(2),em(e)}function NS(e){return e.read_shift(2),em(e)}function IS(e,t,r){var n=(e[e.l]&96)>>5;e.l+=1;var a=Zh(e,0,r);return[n,a]}function PS(e,t,r){var n=(e[e.l]&96)>>5;e.l+=1;var a=_S(e,0,r);return[n,a]}function LS(e,t,r){var n=(e[e.l]&96)>>5;e.l+=1;var a=e.read_shift(2);r&&r.biff==5&&(e.l+=12);var i=Zh(e,0,r);return[n,a,i]}function MS(e,t,r){var n=(e[e.l]&96)>>5;e.l+=1;var a=e.read_shift(r&&r.biff<=3?1:2);return[$T[a],im[a],n]}function VS(e,t,r){var n=e[e.l++],a=e.read_shift(1),i=r&&r.biff<=3?[n==88?-1:0,e.read_shift(1)]:US(e);return[a,(i[0]===0?im:UT)[i[1]]]}function US(e){return[e[e.l+1]>>7,e.read_shift(2)&32767]}function $S(e,t,r){e.l+=r&&r.biff==2?3:4}function WS(e,t,r){if(e.l++,r&&r.biff==12)return[e.read_shift(4,"i"),0];var n=e.read_shift(2),a=e.read_shift(r&&r.biff==2?1:2);return[n,a]}function HS(e){return e.l++,Nn[e.read_shift(1)]}function jS(e){return e.l++,e.read_shift(2)}function zS(e){return e.l++,e.read_shift(1)!==0}function GS(e){return e.l++,er(e)}function XS(e,t,r){return e.l++,Ji(e,t-1,r)}function KS(e,t){var r=[e.read_shift(1)];if(t==12)switch(r[0]){case 2:r[0]=4;break;case 4:r[0]=16;break;case 0:r[0]=1;break;case 1:r[0]=2;break}switch(r[0]){case 4:r[1]=bt(e,1)?"TRUE":"FALSE",t!=12&&(e.l+=7);break;case 37:case 16:r[1]=Nn[e[e.l]],e.l+=t==12?4:8;break;case 0:e.l+=8;break;case 1:r[1]=er(e);break;case 2:r[1]=ba(e,0,{biff:t>0&&t<8?2:t});break;default:throw new Error("Bad SerAr: "+r[0])}return r}function YS(e,t,r){for(var n=e.read_shift(r.biff==12?4:2),a=[],i=0;i!=n;++i)a.push((r.biff==12?wa:_o)(e));return a}function qS(e,t,r){var n=0,a=0;r.biff==12?(n=e.read_shift(4),a=e.read_shift(4)):(a=1+e.read_shift(1),n=1+e.read_shift(2)),r.biff>=2&&r.biff<8&&(--n,--a==0&&(a=256));for(var i=0,s=[];i!=n&&(s[i]=[]);++i)for(var o=0;o!=a;++o)s[i][o]=KS(e,r.biff);return s}function JS(e,t,r){var n=e.read_shift(1)>>>5&3,a=!r||r.biff>=8?4:2,i=e.read_shift(a);switch(r.biff){case 2:e.l+=5;break;case 3:case 4:e.l+=8;break;case 5:e.l+=12;break}return[n,0,i]}function ZS(e,t,r){if(r.biff==5)return QS(e);var n=e.read_shift(1)>>>5&3,a=e.read_shift(2),i=e.read_shift(4);return[n,a,i]}function QS(e){var t=e.read_shift(1)>>>5&3,r=e.read_shift(2,"i");e.l+=8;var n=e.read_shift(2);return e.l+=12,[t,r,n]}function eT(e,t,r){var n=e.read_shift(1)>>>5&3;e.l+=r&&r.biff==2?3:4;var a=e.read_shift(r&&r.biff==2?1:2);return[n,a]}function tT(e,t,r){var n=e.read_shift(1)>>>5&3,a=e.read_shift(r&&r.biff==2?1:2);return[n,a]}function rT(e,t,r){var n=e.read_shift(1)>>>5&3;return e.l+=4,r.biff<8&&e.l--,r.biff==12&&(e.l+=2),[n]}function nT(e,t,r){var n=(e[e.l++]&96)>>5,a=e.read_shift(2),i=4;if(r)switch(r.biff){case 5:i=15;break;case 12:i=6;break}return e.l+=i,[n,a]}var aT=Zt,iT=Zt,sT=Zt;function as(e,t,r){return e.l+=2,[wS(e)]}function _c(e){return e.l+=6,[]}var oT=as,lT=_c,cT=_c,fT=as;function tm(e){return e.l+=2,[Ft(e),e.read_shift(2)&1]}var uT=as,dT=tm,hT=_c,mT=as,pT=as,gT=["Data","All","Headers","??","?Data2","??","?DataHeaders","??","Totals","??","??","??","?DataTotals","??","??","??","?Current"];function xT(e){e.l+=2;var t=e.read_shift(2),r=e.read_shift(2),n=e.read_shift(4),a=e.read_shift(2),i=e.read_shift(2),s=gT[r>>2&31];return{ixti:t,coltype:r&3,rt:s,idx:n,c:a,C:i}}function vT(e){return e.l+=2,[e.read_shift(4)]}function wT(e,t,r){return e.l+=5,e.l+=2,e.l+=r.biff==2?1:4,["PTGSHEET"]}function _T(e,t,r){return e.l+=r.biff==2?4:5,["PTGENDSHEET"]}function yT(e){var t=e.read_shift(1)>>>5&3,r=e.read_shift(2);return[t,r]}function kT(e){var t=e.read_shift(1)>>>5&3,r=e.read_shift(2);return[t,r]}function ET(e){return e.l+=4,[0,0]}var rm={1:{n:"PtgExp",f:WS},2:{n:"PtgTbl",f:sT},3:{n:"PtgAdd",f:At},4:{n:"PtgSub",f:At},5:{n:"PtgMul",f:At},6:{n:"PtgDiv",f:At},7:{n:"PtgPower",f:At},8:{n:"PtgConcat",f:At},9:{n:"PtgLt",f:At},10:{n:"PtgLe",f:At},11:{n:"PtgEq",f:At},12:{n:"PtgGe",f:At},13:{n:"PtgGt",f:At},14:{n:"PtgNe",f:At},15:{n:"PtgIsect",f:At},16:{n:"PtgUnion",f:At},17:{n:"PtgRange",f:At},18:{n:"PtgUplus",f:At},19:{n:"PtgUminus",f:At},20:{n:"PtgPercent",f:At},21:{n:"PtgParen",f:At},22:{n:"PtgMissArg",f:At},23:{n:"PtgStr",f:XS},26:{n:"PtgSheet",f:wT},27:{n:"PtgEndSheet",f:_T},28:{n:"PtgErr",f:HS},29:{n:"PtgBool",f:zS},30:{n:"PtgInt",f:jS},31:{n:"PtgNum",f:GS},32:{n:"PtgArray",f:CS},33:{n:"PtgFunc",f:MS},34:{n:"PtgFuncVar",f:VS},35:{n:"PtgName",f:JS},36:{n:"PtgRef",f:IS},37:{n:"PtgArea",f:kS},38:{n:"PtgMemArea",f:eT},39:{n:"PtgMemErr",f:aT},40:{n:"PtgMemNoMem",f:iT},41:{n:"PtgMemFunc",f:tT},42:{n:"PtgRefErr",f:rT},43:{n:"PtgAreaErr",f:bS},44:{n:"PtgRefN",f:PS},45:{n:"PtgAreaN",f:TS},46:{n:"PtgMemAreaN",f:yT},47:{n:"PtgMemNoMemN",f:kT},57:{n:"PtgNameX",f:ZS},58:{n:"PtgRef3d",f:LS},59:{n:"PtgArea3d",f:ES},60:{n:"PtgRefErr3d",f:nT},61:{n:"PtgAreaErr3d",f:SS},255:{}},bT={64:32,96:32,65:33,97:33,66:34,98:34,67:35,99:35,68:36,100:36,69:37,101:37,70:38,102:38,71:39,103:39,72:40,104:40,73:41,105:41,74:42,106:42,75:43,107:43,76:44,108:44,77:45,109:45,78:46,110:46,79:47,111:47,88:34,120:34,89:57,121:57,90:58,122:58,91:59,123:59,92:60,124:60,93:61,125:61},ST={1:{n:"PtgElfLel",f:tm},2:{n:"PtgElfRw",f:mT},3:{n:"PtgElfCol",f:oT},6:{n:"PtgElfRwV",f:pT},7:{n:"PtgElfColV",f:fT},10:{n:"PtgElfRadical",f:uT},11:{n:"PtgElfRadicalS",f:hT},13:{n:"PtgElfColS",f:lT},15:{n:"PtgElfColSV",f:cT},16:{n:"PtgElfRadicalLel",f:dT},25:{n:"PtgList",f:xT},29:{n:"PtgSxName",f:vT},255:{}},TT={0:{n:"PtgAttrNoop",f:ET},1:{n:"PtgAttrSemi",f:OS},2:{n:"PtgAttrIf",f:DS},4:{n:"PtgAttrChoose",f:FS},8:{n:"PtgAttrGoto",f:AS},16:{n:"PtgAttrSum",f:$S},32:{n:"PtgAttrBaxcel",f:Qh},33:{n:"PtgAttrBaxcel",f:Qh},64:{n:"PtgAttrSpace",f:BS},65:{n:"PtgAttrSpaceSemi",f:NS},128:{n:"PtgAttrIfError",f:RS},255:{}};function is(e,t,r,n){if(n.biff<8)return Zt(e,t);for(var a=e.l+t,i=[],s=0;s!==r.length;++s)switch(r[s][0]){case"PtgArray":r[s][1]=qS(e,0,n),i.push(r[s][1]);break;case"PtgMemArea":r[s][2]=YS(e,r[s][1],n),i.push(r[s][2]);break;case"PtgExp":n&&n.biff==12&&(r[s][1][1]=e.read_shift(4),i.push(r[s][1]));break;case"PtgList":case"PtgElfRadicalS":case"PtgElfColS":case"PtgElfColSV":throw"Unsupported "+r[s][0]}return t=a-e.l,t!==0&&i.push(Zt(e,t)),i}function ss(e,t,r){for(var n=e.l+t,a,i,s=[];n!=e.l;)t=n-e.l,i=e[e.l],a=rm[i]||rm[bT[i]],(i===24||i===25)&&(a=(i===24?ST:TT)[e[e.l+1]]),!a||!a.f?Zt(e,t):s.push([a.n,a.f(e,t,r)]);return s}function CT(e){for(var t=[],r=0;r<e.length;++r){for(var n=e[r],a=[],i=0;i<n.length;++i){var s=n[i];if(s)switch(s[0]){case 2:a.push('"'+s[1].replace(/"/g,'""')+'"');break;default:a.push(s[1])}else a.push("")}t.push(a.join(","))}return t.join(";")}var FT={PtgAdd:"+",PtgConcat:"&",PtgDiv:"/",PtgEq:"=",PtgGe:">=",PtgGt:">",PtgLe:"<=",PtgLt:"<",PtgMul:"*",PtgNe:"<>",PtgPower:"^",PtgSub:"-"};function AT(e,t){if(!e&&!(t&&t.biff<=5&&t.biff>=2))throw new Error("empty sheet name");return/[^\w\u4E00-\u9FFF\u3040-\u30FF]/.test(e)?"'"+e+"'":e}function nm(e,t,r){if(!e)return"SH33TJSERR0";if(r.biff>8&&(!e.XTI||!e.XTI[t]))return e.SheetNames[t];if(!e.XTI)return"SH33TJSERR6";var n=e.XTI[t];if(r.biff<8)return t>1e4&&(t-=65536),t<0&&(t=-t),t==0?"":e.XTI[t-1];if(!n)return"SH33TJSERR1";var a="";if(r.biff>8)switch(e[n[0]][0]){case 357:return a=n[1]==-1?"#REF":e.SheetNames[n[1]],n[1]==n[2]?a:a+":"+e.SheetNames[n[2]];case 358:return r.SID!=null?e.SheetNames[r.SID]:"SH33TJSSAME"+e[n[0]][0];case 355:default:return"SH33TJSSRC"+e[n[0]][0]}switch(e[n[0]][0][0]){case 1025:return a=n[1]==-1?"#REF":e.SheetNames[n[1]]||"SH33TJSERR3",n[1]==n[2]?a:a+":"+e.SheetNames[n[2]];case 14849:return e[n[0]].slice(1).map(function(i){return i.Name}).join(";;");default:return e[n[0]][0][3]?(a=n[1]==-1?"#REF":e[n[0]][0][3][n[1]]||"SH33TJSERR4",n[1]==n[2]?a:a+":"+e[n[0]][0][3][n[2]]):"SH33TJSERR2"}}function am(e,t,r){var n=nm(e,t,r);return n=="#REF"?n:AT(n,r)}function nr(e,t,r,n,a){var i=a&&a.biff||8,s={s:{c:0,r:0},e:{c:0,r:0}},o=[],c,f,u,d=0,h=0,p,g="";if(!e[0]||!e[0][0])return"";for(var m=-1,x="",v=0,y=e[0].length;v<y;++v){var _=e[0][v];switch(_[0]){case"PtgUminus":o.push("-"+o.pop());break;case"PtgUplus":o.push("+"+o.pop());break;case"PtgPercent":o.push(o.pop()+"%");break;case"PtgAdd":case"PtgConcat":case"PtgDiv":case"PtgEq":case"PtgGe":case"PtgGt":case"PtgLe":case"PtgLt":case"PtgMul":case"PtgNe":case"PtgPower":case"PtgSub":if(c=o.pop(),f=o.pop(),m>=0){switch(e[0][m][1][0]){case 0:x=_t(" ",e[0][m][1][1]);break;case 1:x=_t("\r",e[0][m][1][1]);break;default:if(x="",a.WTF)throw new Error("Unexpected PtgAttrSpaceType "+e[0][m][1][0])}f=f+x,m=-1}o.push(f+FT[_[0]]+c);break;case"PtgIsect":c=o.pop(),f=o.pop(),o.push(f+" "+c);break;case"PtgUnion":c=o.pop(),f=o.pop(),o.push(f+","+c);break;case"PtgRange":c=o.pop(),f=o.pop(),o.push(f+":"+c);break;case"PtgAttrChoose":break;case"PtgAttrGoto":break;case"PtgAttrIf":break;case"PtgAttrIfError":break;case"PtgRef":u=Xi(_[1][1],s,a),o.push(Ki(u,i));break;case"PtgRefN":u=r?Xi(_[1][1],r,a):_[1][1],o.push(Ki(u,i));break;case"PtgRef3d":d=_[1][1],u=Xi(_[1][2],s,a),g=am(n,d,a),o.push(g+"!"+Ki(u,i));break;case"PtgFunc":case"PtgFuncVar":var b=_[1][0],D=_[1][1];b||(b=0),b&=127;var C=b==0?[]:o.slice(-b);o.length-=b,D==="User"&&(D=C.shift()),o.push(D+"("+C.join(",")+")");break;case"PtgBool":o.push(_[1]?"TRUE":"FALSE");break;case"PtgInt":o.push(_[1]);break;case"PtgNum":o.push(String(_[1]));break;case"PtgStr":o.push('"'+_[1].replace(/"/g,'""')+'"');break;case"PtgErr":o.push(_[1]);break;case"PtgAreaN":p=Rd(_[1][1],r?{s:r}:s,a),o.push(Gl(p,a));break;case"PtgArea":p=Rd(_[1][1],s,a),o.push(Gl(p,a));break;case"PtgArea3d":d=_[1][1],p=_[1][2],g=am(n,d,a),o.push(g+"!"+Gl(p,a));break;case"PtgAttrSum":o.push("SUM("+o.pop()+")");break;case"PtgAttrBaxcel":case"PtgAttrSemi":break;case"PtgName":h=_[1][2];var k=(n.names||[])[h-1]||(n[0]||[])[h],F=k?k.Name:"SH33TJSNAME"+String(h);F&&F.slice(0,6)=="_xlfn."&&!a.xlfn&&(F=F.slice(6)),o.push(F);break;case"PtgNameX":var O=_[1][1];h=_[1][2];var X;if(a.biff<=5)O<0&&(O=-O),n[O]&&(X=n[O][h]);else{var j="";if(((n[O]||[])[0]||[])[0]==14849||(((n[O]||[])[0]||[])[0]==1025?n[O][h]&&n[O][h].itab>0&&(j=n.SheetNames[n[O][h].itab-1]+"!"):j=n.SheetNames[h-1]+"!"),n[O]&&n[O][h])j+=n[O][h].Name;else if(n[0]&&n[0][h])j+=n[0][h].Name;else{var I=(nm(n,O,a)||"").split(";;");I[h-1]?j=I[h-1]:j+="SH33TJSERRX"}o.push(j);break}X||(X={Name:"SH33TJSERRY"}),o.push(X.Name);break;case"PtgParen":var G="(",re=")";if(m>=0){switch(x="",e[0][m][1][0]){case 2:G=_t(" ",e[0][m][1][1])+G;break;case 3:G=_t("\r",e[0][m][1][1])+G;break;case 4:re=_t(" ",e[0][m][1][1])+re;break;case 5:re=_t("\r",e[0][m][1][1])+re;break;default:if(a.WTF)throw new Error("Unexpected PtgAttrSpaceType "+e[0][m][1][0])}m=-1}o.push(G+o.pop()+re);break;case"PtgRefErr":o.push("#REF!");break;case"PtgRefErr3d":o.push("#REF!");break;case"PtgExp":u={c:_[1][1],r:_[1][0]};var ae={c:r.c,r:r.r};if(n.sharedf[Ae(u)]){var oe=n.sharedf[Ae(u)];o.push(nr(oe,s,ae,n,a))}else{var fe=!1;for(c=0;c!=n.arrayf.length;++c)if(f=n.arrayf[c],!(u.c<f[0].s.c||u.c>f[0].e.c)&&!(u.r<f[0].s.r||u.r>f[0].e.r)){o.push(nr(f[1],s,ae,n,a)),fe=!0;break}fe||o.push(_[1])}break;case"PtgArray":o.push("{"+CT(_[1])+"}");break;case"PtgMemArea":break;case"PtgAttrSpace":case"PtgAttrSpaceSemi":m=v;break;case"PtgTbl":break;case"PtgMemErr":break;case"PtgMissArg":o.push("");break;case"PtgAreaErr":o.push("#REF!");break;case"PtgAreaErr3d":o.push("#REF!");break;case"PtgList":o.push("Table"+_[1].idx+"[#"+_[1].rt+"]");break;case"PtgMemAreaN":case"PtgMemNoMemN":case"PtgAttrNoop":case"PtgSheet":case"PtgEndSheet":break;case"PtgMemFunc":break;case"PtgMemNoMem":break;case"PtgElfCol":case"PtgElfColS":case"PtgElfColSV":case"PtgElfColV":case"PtgElfLel":case"PtgElfRadical":case"PtgElfRadicalLel":case"PtgElfRadicalS":case"PtgElfRw":case"PtgElfRwV":throw new Error("Unsupported ELFs");case"PtgSxName":throw new Error("Unrecognized Formula Token: "+String(_));default:throw new Error("Unrecognized Formula Token: "+String(_))}var ke=["PtgAttrSpace","PtgAttrSpaceSemi","PtgAttrGoto"];if(a.biff!=3&&m>=0&&ke.indexOf(e[0][v][0])==-1){_=e[0][m];var H=!0;switch(_[1][0]){case 4:H=!1;case 0:x=_t(" ",_[1][1]);break;case 5:H=!1;case 1:x=_t("\r",_[1][1]);break;default:if(x="",a.WTF)throw new Error("Unexpected PtgAttrSpaceType "+_[1][0])}o.push((H?x:"")+o.pop()+(H?"":x)),m=-1}}if(o.length>1&&a.WTF)throw new Error("bad formula stack");return o[0]}function DT(e,t,r){var n=e.l+t,a=r.biff==2?1:2,i,s=e.read_shift(a);if(s==65535)return[[],Zt(e,t-2)];var o=ss(e,s,r);return t!==s+a&&(i=is(e,t-s-a,o,r)),e.l=n,[o,i]}function RT(e,t,r){var n=e.l+t,a=r.biff==2?1:2,i,s=e.read_shift(a);if(s==65535)return[[],Zt(e,t-2)];var o=ss(e,s,r);return t!==s+a&&(i=is(e,t-s-a,o,r)),e.l=n,[o,i]}function OT(e,t,r,n){var a=e.l+t,i=ss(e,n,r),s;return a!==e.l&&(s=is(e,a-e.l,i,r)),[i,s]}function BT(e,t,r){var n=e.l+t,a,i=e.read_shift(2),s=ss(e,i,r);return i==65535?[[],Zt(e,t-2)]:(t!==i+2&&(a=is(e,n-i-2,s,r)),[s,a])}function NT(e){var t;if(Rn(e,e.l+6)!==65535)return[er(e),"n"];switch(e[e.l]){case 0:return e.l+=8,["String","s"];case 1:return t=e[e.l+2]===1,e.l+=8,[t,"b"];case 2:return t=e[e.l+2],e.l+=8,[t,"e"];case 3:return e.l+=8,["","s"]}return[]}function IT(e){if(e==null){var t=ne(8);return t.write_shift(1,3),t.write_shift(1,0),t.write_shift(2,0),t.write_shift(2,0),t.write_shift(2,65535),t}else if(typeof e=="number")return _a(e);return _a(0)}function yc(e,t,r){var n=e.l+t,a=xn(e);r.biff==2&&++e.l;var i=NT(e),s=e.read_shift(1);r.biff!=2&&(e.read_shift(1),r.biff>=5&&e.read_shift(4));var o=RT(e,n-e.l,r);return{cell:a,val:i[0],formula:o,shared:s>>3&1,tt:i[1]}}function PT(e,t,r,n,a){var i=Sa(t,r,a),s=IT(e.v),o=ne(6),c=33;o.write_shift(2,c),o.write_shift(4,0);for(var f=ne(e.bf.length),u=0;u<e.bf.length;++u)f[u]=e.bf[u];var d=Ut([i,s,o,f]);return d}function To(e,t,r){var n=e.read_shift(4),a=ss(e,n,r),i=e.read_shift(4),s=i>0?is(e,i,a,r):null;return[a,s]}var LT=To,Co=To,MT=To,VT=To,UT={0:"BEEP",1:"OPEN",2:"OPEN.LINKS",3:"CLOSE.ALL",4:"SAVE",5:"SAVE.AS",6:"FILE.DELETE",7:"PAGE.SETUP",8:"PRINT",9:"PRINTER.SETUP",10:"QUIT",11:"NEW.WINDOW",12:"ARRANGE.ALL",13:"WINDOW.SIZE",14:"WINDOW.MOVE",15:"FULL",16:"CLOSE",17:"RUN",22:"SET.PRINT.AREA",23:"SET.PRINT.TITLES",24:"SET.PAGE.BREAK",25:"REMOVE.PAGE.BREAK",26:"FONT",27:"DISPLAY",28:"PROTECT.DOCUMENT",29:"PRECISION",30:"A1.R1C1",31:"CALCULATE.NOW",32:"CALCULATION",34:"DATA.FIND",35:"EXTRACT",36:"DATA.DELETE",37:"SET.DATABASE",38:"SET.CRITERIA",39:"SORT",40:"DATA.SERIES",41:"TABLE",42:"FORMAT.NUMBER",43:"ALIGNMENT",44:"STYLE",45:"BORDER",46:"CELL.PROTECTION",47:"COLUMN.WIDTH",48:"UNDO",49:"CUT",50:"COPY",51:"PASTE",52:"CLEAR",53:"PASTE.SPECIAL",54:"EDIT.DELETE",55:"INSERT",56:"FILL.RIGHT",57:"FILL.DOWN",61:"DEFINE.NAME",62:"CREATE.NAMES",63:"FORMULA.GOTO",64:"FORMULA.FIND",65:"SELECT.LAST.CELL",66:"SHOW.ACTIVE.CELL",67:"GALLERY.AREA",68:"GALLERY.BAR",69:"GALLERY.COLUMN",70:"GALLERY.LINE",71:"GALLERY.PIE",72:"GALLERY.SCATTER",73:"COMBINATION",74:"PREFERRED",75:"ADD.OVERLAY",76:"GRIDLINES",77:"SET.PREFERRED",78:"AXES",79:"LEGEND",80:"ATTACH.TEXT",81:"ADD.ARROW",82:"SELECT.CHART",83:"SELECT.PLOT.AREA",84:"PATTERNS",85:"MAIN.CHART",86:"OVERLAY",87:"SCALE",88:"FORMAT.LEGEND",89:"FORMAT.TEXT",90:"EDIT.REPEAT",91:"PARSE",92:"JUSTIFY",93:"HIDE",94:"UNHIDE",95:"WORKSPACE",96:"FORMULA",97:"FORMULA.FILL",98:"FORMULA.ARRAY",99:"DATA.FIND.NEXT",100:"DATA.FIND.PREV",101:"FORMULA.FIND.NEXT",102:"FORMULA.FIND.PREV",103:"ACTIVATE",104:"ACTIVATE.NEXT",105:"ACTIVATE.PREV",106:"UNLOCKED.NEXT",107:"UNLOCKED.PREV",108:"COPY.PICTURE",109:"SELECT",110:"DELETE.NAME",111:"DELETE.FORMAT",112:"VLINE",113:"HLINE",114:"VPAGE",115:"HPAGE",116:"VSCROLL",117:"HSCROLL",118:"ALERT",119:"NEW",120:"CANCEL.COPY",121:"SHOW.CLIPBOARD",122:"MESSAGE",124:"PASTE.LINK",125:"APP.ACTIVATE",126:"DELETE.ARROW",127:"ROW.HEIGHT",128:"FORMAT.MOVE",129:"FORMAT.SIZE",130:"FORMULA.REPLACE",131:"SEND.KEYS",132:"SELECT.SPECIAL",133:"APPLY.NAMES",134:"REPLACE.FONT",135:"FREEZE.PANES",136:"SHOW.INFO",137:"SPLIT",138:"ON.WINDOW",139:"ON.DATA",140:"DISABLE.INPUT",142:"OUTLINE",143:"LIST.NAMES",144:"FILE.CLOSE",145:"SAVE.WORKBOOK",146:"DATA.FORM",147:"COPY.CHART",148:"ON.TIME",149:"WAIT",150:"FORMAT.FONT",151:"FILL.UP",152:"FILL.LEFT",153:"DELETE.OVERLAY",155:"SHORT.MENUS",159:"SET.UPDATE.STATUS",161:"COLOR.PALETTE",162:"DELETE.STYLE",163:"WINDOW.RESTORE",164:"WINDOW.MAXIMIZE",166:"CHANGE.LINK",167:"CALCULATE.DOCUMENT",168:"ON.KEY",169:"APP.RESTORE",170:"APP.MOVE",171:"APP.SIZE",172:"APP.MINIMIZE",173:"APP.MAXIMIZE",174:"BRING.TO.FRONT",175:"SEND.TO.BACK",185:"MAIN.CHART.TYPE",186:"OVERLAY.CHART.TYPE",187:"SELECT.END",188:"OPEN.MAIL",189:"SEND.MAIL",190:"STANDARD.FONT",191:"CONSOLIDATE",192:"SORT.SPECIAL",193:"GALLERY.3D.AREA",194:"GALLERY.3D.COLUMN",195:"GALLERY.3D.LINE",196:"GALLERY.3D.PIE",197:"VIEW.3D",198:"GOAL.SEEK",199:"WORKGROUP",200:"FILL.GROUP",201:"UPDATE.LINK",202:"PROMOTE",203:"DEMOTE",204:"SHOW.DETAIL",206:"UNGROUP",207:"OBJECT.PROPERTIES",208:"SAVE.NEW.OBJECT",209:"SHARE",210:"SHARE.NAME",211:"DUPLICATE",212:"APPLY.STYLE",213:"ASSIGN.TO.OBJECT",214:"OBJECT.PROTECTION",215:"HIDE.OBJECT",216:"SET.EXTRACT",217:"CREATE.PUBLISHER",218:"SUBSCRIBE.TO",219:"ATTRIBUTES",220:"SHOW.TOOLBAR",222:"PRINT.PREVIEW",223:"EDIT.COLOR",224:"SHOW.LEVELS",225:"FORMAT.MAIN",226:"FORMAT.OVERLAY",227:"ON.RECALC",228:"EDIT.SERIES",229:"DEFINE.STYLE",240:"LINE.PRINT",243:"ENTER.DATA",249:"GALLERY.RADAR",250:"MERGE.STYLES",251:"EDITION.OPTIONS",252:"PASTE.PICTURE",253:"PASTE.PICTURE.LINK",254:"SPELLING",256:"ZOOM",259:"INSERT.OBJECT",260:"WINDOW.MINIMIZE",265:"SOUND.NOTE",266:"SOUND.PLAY",267:"FORMAT.SHAPE",268:"EXTEND.POLYGON",269:"FORMAT.AUTO",272:"GALLERY.3D.BAR",273:"GALLERY.3D.SURFACE",274:"FILL.AUTO",276:"CUSTOMIZE.TOOLBAR",277:"ADD.TOOL",278:"EDIT.OBJECT",279:"ON.DOUBLECLICK",280:"ON.ENTRY",281:"WORKBOOK.ADD",282:"WORKBOOK.MOVE",283:"WORKBOOK.COPY",284:"WORKBOOK.OPTIONS",285:"SAVE.WORKSPACE",288:"CHART.WIZARD",289:"DELETE.TOOL",290:"MOVE.TOOL",291:"WORKBOOK.SELECT",292:"WORKBOOK.ACTIVATE",293:"ASSIGN.TO.TOOL",295:"COPY.TOOL",296:"RESET.TOOL",297:"CONSTRAIN.NUMERIC",298:"PASTE.TOOL",302:"WORKBOOK.NEW",305:"SCENARIO.CELLS",306:"SCENARIO.DELETE",307:"SCENARIO.ADD",308:"SCENARIO.EDIT",309:"SCENARIO.SHOW",310:"SCENARIO.SHOW.NEXT",311:"SCENARIO.SUMMARY",312:"PIVOT.TABLE.WIZARD",313:"PIVOT.FIELD.PROPERTIES",314:"PIVOT.FIELD",315:"PIVOT.ITEM",316:"PIVOT.ADD.FIELDS",318:"OPTIONS.CALCULATION",319:"OPTIONS.EDIT",320:"OPTIONS.VIEW",321:"ADDIN.MANAGER",322:"MENU.EDITOR",323:"ATTACH.TOOLBARS",324:"VBAActivate",325:"OPTIONS.CHART",328:"VBA.INSERT.FILE",330:"VBA.PROCEDURE.DEFINITION",336:"ROUTING.SLIP",338:"ROUTE.DOCUMENT",339:"MAIL.LOGON",342:"INSERT.PICTURE",343:"EDIT.TOOL",344:"GALLERY.DOUGHNUT",350:"CHART.TREND",352:"PIVOT.ITEM.PROPERTIES",354:"WORKBOOK.INSERT",355:"OPTIONS.TRANSITION",356:"OPTIONS.GENERAL",370:"FILTER.ADVANCED",373:"MAIL.ADD.MAILER",374:"MAIL.DELETE.MAILER",375:"MAIL.REPLY",376:"MAIL.REPLY.ALL",377:"MAIL.FORWARD",378:"MAIL.NEXT.LETTER",379:"DATA.LABEL",380:"INSERT.TITLE",381:"FONT.PROPERTIES",382:"MACRO.OPTIONS",383:"WORKBOOK.HIDE",384:"WORKBOOK.UNHIDE",385:"WORKBOOK.DELETE",386:"WORKBOOK.NAME",388:"GALLERY.CUSTOM",390:"ADD.CHART.AUTOFORMAT",391:"DELETE.CHART.AUTOFORMAT",392:"CHART.ADD.DATA",393:"AUTO.OUTLINE",394:"TAB.ORDER",395:"SHOW.DIALOG",396:"SELECT.ALL",397:"UNGROUP.SHEETS",398:"SUBTOTAL.CREATE",399:"SUBTOTAL.REMOVE",400:"RENAME.OBJECT",412:"WORKBOOK.SCROLL",413:"WORKBOOK.NEXT",414:"WORKBOOK.PREV",415:"WORKBOOK.TAB.SPLIT",416:"FULL.SCREEN",417:"WORKBOOK.PROTECT",420:"SCROLLBAR.PROPERTIES",421:"PIVOT.SHOW.PAGES",422:"TEXT.TO.COLUMNS",423:"FORMAT.CHARTTYPE",424:"LINK.FORMAT",425:"TRACER.DISPLAY",430:"TRACER.NAVIGATE",431:"TRACER.CLEAR",432:"TRACER.ERROR",433:"PIVOT.FIELD.GROUP",434:"PIVOT.FIELD.UNGROUP",435:"CHECKBOX.PROPERTIES",436:"LABEL.PROPERTIES",437:"LISTBOX.PROPERTIES",438:"EDITBOX.PROPERTIES",439:"PIVOT.REFRESH",440:"LINK.COMBO",441:"OPEN.TEXT",442:"HIDE.DIALOG",443:"SET.DIALOG.FOCUS",444:"ENABLE.OBJECT",445:"PUSHBUTTON.PROPERTIES",446:"SET.DIALOG.DEFAULT",447:"FILTER",448:"FILTER.SHOW.ALL",449:"CLEAR.OUTLINE",450:"FUNCTION.WIZARD",451:"ADD.LIST.ITEM",452:"SET.LIST.ITEM",453:"REMOVE.LIST.ITEM",454:"SELECT.LIST.ITEM",455:"SET.CONTROL.VALUE",456:"SAVE.COPY.AS",458:"OPTIONS.LISTS.ADD",459:"OPTIONS.LISTS.DELETE",460:"SERIES.AXES",461:"SERIES.X",462:"SERIES.Y",463:"ERRORBAR.X",464:"ERRORBAR.Y",465:"FORMAT.CHART",466:"SERIES.ORDER",467:"MAIL.LOGOFF",468:"CLEAR.ROUTING.SLIP",469:"APP.ACTIVATE.MICROSOFT",470:"MAIL.EDIT.MAILER",471:"ON.SHEET",472:"STANDARD.WIDTH",473:"SCENARIO.MERGE",474:"SUMMARY.INFO",475:"FIND.FILE",476:"ACTIVE.CELL.FONT",477:"ENABLE.TIPWIZARD",478:"VBA.MAKE.ADDIN",480:"INSERTDATATABLE",481:"WORKGROUP.OPTIONS",482:"MAIL.SEND.MAILER",485:"AUTOCORRECT",489:"POST.DOCUMENT",491:"PICKLIST",493:"VIEW.SHOW",494:"VIEW.DEFINE",495:"VIEW.DELETE",509:"SHEET.BACKGROUND",510:"INSERT.MAP.OBJECT",511:"OPTIONS.MENONO",517:"MSOCHECKS",518:"NORMAL",519:"LAYOUT",520:"RM.PRINT.AREA",521:"CLEAR.PRINT.AREA",522:"ADD.PRINT.AREA",523:"MOVE.BRK",545:"HIDECURR.NOTE",546:"HIDEALL.NOTES",547:"DELETE.NOTE",548:"TRAVERSE.NOTES",549:"ACTIVATE.NOTES",620:"PROTECT.REVISIONS",621:"UNPROTECT.REVISIONS",647:"OPTIONS.ME",653:"WEB.PUBLISH",667:"NEWWEBQUERY",673:"PIVOT.TABLE.CHART",753:"OPTIONS.SAVE",755:"OPTIONS.SPELL",808:"HIDEALL.INKANNOTS"},im={0:"COUNT",1:"IF",2:"ISNA",3:"ISERROR",4:"SUM",5:"AVERAGE",6:"MIN",7:"MAX",8:"ROW",9:"COLUMN",10:"NA",11:"NPV",12:"STDEV",13:"DOLLAR",14:"FIXED",15:"SIN",16:"COS",17:"TAN",18:"ATAN",19:"PI",20:"SQRT",21:"EXP",22:"LN",23:"LOG10",24:"ABS",25:"INT",26:"SIGN",27:"ROUND",28:"LOOKUP",29:"INDEX",30:"REPT",31:"MID",32:"LEN",33:"VALUE",34:"TRUE",35:"FALSE",36:"AND",37:"OR",38:"NOT",39:"MOD",40:"DCOUNT",41:"DSUM",42:"DAVERAGE",43:"DMIN",44:"DMAX",45:"DSTDEV",46:"VAR",47:"DVAR",48:"TEXT",49:"LINEST",50:"TREND",51:"LOGEST",52:"GROWTH",53:"GOTO",54:"HALT",55:"RETURN",56:"PV",57:"FV",58:"NPER",59:"PMT",60:"RATE",61:"MIRR",62:"IRR",63:"RAND",64:"MATCH",65:"DATE",66:"TIME",67:"DAY",68:"MONTH",69:"YEAR",70:"WEEKDAY",71:"HOUR",72:"MINUTE",73:"SECOND",74:"NOW",75:"AREAS",76:"ROWS",77:"COLUMNS",78:"OFFSET",79:"ABSREF",80:"RELREF",81:"ARGUMENT",82:"SEARCH",83:"TRANSPOSE",84:"ERROR",85:"STEP",86:"TYPE",87:"ECHO",88:"SET.NAME",89:"CALLER",90:"DEREF",91:"WINDOWS",92:"SERIES",93:"DOCUMENTS",94:"ACTIVE.CELL",95:"SELECTION",96:"RESULT",97:"ATAN2",98:"ASIN",99:"ACOS",100:"CHOOSE",101:"HLOOKUP",102:"VLOOKUP",103:"LINKS",104:"INPUT",105:"ISREF",106:"GET.FORMULA",107:"GET.NAME",108:"SET.VALUE",109:"LOG",110:"EXEC",111:"CHAR",112:"LOWER",113:"UPPER",114:"PROPER",115:"LEFT",116:"RIGHT",117:"EXACT",118:"TRIM",119:"REPLACE",120:"SUBSTITUTE",121:"CODE",122:"NAMES",123:"DIRECTORY",124:"FIND",125:"CELL",126:"ISERR",127:"ISTEXT",128:"ISNUMBER",129:"ISBLANK",130:"T",131:"N",132:"FOPEN",133:"FCLOSE",134:"FSIZE",135:"FREADLN",136:"FREAD",137:"FWRITELN",138:"FWRITE",139:"FPOS",140:"DATEVALUE",141:"TIMEVALUE",142:"SLN",143:"SYD",144:"DDB",145:"GET.DEF",146:"REFTEXT",147:"TEXTREF",148:"INDIRECT",149:"REGISTER",150:"CALL",151:"ADD.BAR",152:"ADD.MENU",153:"ADD.COMMAND",154:"ENABLE.COMMAND",155:"CHECK.COMMAND",156:"RENAME.COMMAND",157:"SHOW.BAR",158:"DELETE.MENU",159:"DELETE.COMMAND",160:"GET.CHART.ITEM",161:"DIALOG.BOX",162:"CLEAN",163:"MDETERM",164:"MINVERSE",165:"MMULT",166:"FILES",167:"IPMT",168:"PPMT",169:"COUNTA",170:"CANCEL.KEY",171:"FOR",172:"WHILE",173:"BREAK",174:"NEXT",175:"INITIATE",176:"REQUEST",177:"POKE",178:"EXECUTE",179:"TERMINATE",180:"RESTART",181:"HELP",182:"GET.BAR",183:"PRODUCT",184:"FACT",185:"GET.CELL",186:"GET.WORKSPACE",187:"GET.WINDOW",188:"GET.DOCUMENT",189:"DPRODUCT",190:"ISNONTEXT",191:"GET.NOTE",192:"NOTE",193:"STDEVP",194:"VARP",195:"DSTDEVP",196:"DVARP",197:"TRUNC",198:"ISLOGICAL",199:"DCOUNTA",200:"DELETE.BAR",201:"UNREGISTER",204:"USDOLLAR",205:"FINDB",206:"SEARCHB",207:"REPLACEB",208:"LEFTB",209:"RIGHTB",210:"MIDB",211:"LENB",212:"ROUNDUP",213:"ROUNDDOWN",214:"ASC",215:"DBCS",216:"RANK",219:"ADDRESS",220:"DAYS360",221:"TODAY",222:"VDB",223:"ELSE",224:"ELSE.IF",225:"END.IF",226:"FOR.CELL",227:"MEDIAN",228:"SUMPRODUCT",229:"SINH",230:"COSH",231:"TANH",232:"ASINH",233:"ACOSH",234:"ATANH",235:"DGET",236:"CREATE.OBJECT",237:"VOLATILE",238:"LAST.ERROR",239:"CUSTOM.UNDO",240:"CUSTOM.REPEAT",241:"FORMULA.CONVERT",242:"GET.LINK.INFO",243:"TEXT.BOX",244:"INFO",245:"GROUP",246:"GET.OBJECT",247:"DB",248:"PAUSE",251:"RESUME",252:"FREQUENCY",253:"ADD.TOOLBAR",254:"DELETE.TOOLBAR",255:"User",256:"RESET.TOOLBAR",257:"EVALUATE",258:"GET.TOOLBAR",259:"GET.TOOL",260:"SPELLING.CHECK",261:"ERROR.TYPE",262:"APP.TITLE",263:"WINDOW.TITLE",264:"SAVE.TOOLBAR",265:"ENABLE.TOOL",266:"PRESS.TOOL",267:"REGISTER.ID",268:"GET.WORKBOOK",269:"AVEDEV",270:"BETADIST",271:"GAMMALN",272:"BETAINV",273:"BINOMDIST",274:"CHIDIST",275:"CHIINV",276:"COMBIN",277:"CONFIDENCE",278:"CRITBINOM",279:"EVEN",280:"EXPONDIST",281:"FDIST",282:"FINV",283:"FISHER",284:"FISHERINV",285:"FLOOR",286:"GAMMADIST",287:"GAMMAINV",288:"CEILING",289:"HYPGEOMDIST",290:"LOGNORMDIST",291:"LOGINV",292:"NEGBINOMDIST",293:"NORMDIST",294:"NORMSDIST",295:"NORMINV",296:"NORMSINV",297:"STANDARDIZE",298:"ODD",299:"PERMUT",300:"POISSON",301:"TDIST",302:"WEIBULL",303:"SUMXMY2",304:"SUMX2MY2",305:"SUMX2PY2",306:"CHITEST",307:"CORREL",308:"COVAR",309:"FORECAST",310:"FTEST",311:"INTERCEPT",312:"PEARSON",313:"RSQ",314:"STEYX",315:"SLOPE",316:"TTEST",317:"PROB",318:"DEVSQ",319:"GEOMEAN",320:"HARMEAN",321:"SUMSQ",322:"KURT",323:"SKEW",324:"ZTEST",325:"LARGE",326:"SMALL",327:"QUARTILE",328:"PERCENTILE",329:"PERCENTRANK",330:"MODE",331:"TRIMMEAN",332:"TINV",334:"MOVIE.COMMAND",335:"GET.MOVIE",336:"CONCATENATE",337:"POWER",338:"PIVOT.ADD.DATA",339:"GET.PIVOT.TABLE",340:"GET.PIVOT.FIELD",341:"GET.PIVOT.ITEM",342:"RADIANS",343:"DEGREES",344:"SUBTOTAL",345:"SUMIF",346:"COUNTIF",347:"COUNTBLANK",348:"SCENARIO.GET",349:"OPTIONS.LISTS.GET",350:"ISPMT",351:"DATEDIF",352:"DATESTRING",353:"NUMBERSTRING",354:"ROMAN",355:"OPEN.DIALOG",356:"SAVE.DIALOG",357:"VIEW.GET",358:"GETPIVOTDATA",359:"HYPERLINK",360:"PHONETIC",361:"AVERAGEA",362:"MAXA",363:"MINA",364:"STDEVPA",365:"VARPA",366:"STDEVA",367:"VARA",368:"BAHTTEXT",369:"THAIDAYOFWEEK",370:"THAIDIGIT",371:"THAIMONTHOFYEAR",372:"THAINUMSOUND",373:"THAINUMSTRING",374:"THAISTRINGLENGTH",375:"ISTHAIDIGIT",376:"ROUNDBAHTDOWN",377:"ROUNDBAHTUP",378:"THAIYEAR",379:"RTD",380:"CUBEVALUE",381:"CUBEMEMBER",382:"CUBEMEMBERPROPERTY",383:"CUBERANKEDMEMBER",384:"HEX2BIN",385:"HEX2DEC",386:"HEX2OCT",387:"DEC2BIN",388:"DEC2HEX",389:"DEC2OCT",390:"OCT2BIN",391:"OCT2HEX",392:"OCT2DEC",393:"BIN2DEC",394:"BIN2OCT",395:"BIN2HEX",396:"IMSUB",397:"IMDIV",398:"IMPOWER",399:"IMABS",400:"IMSQRT",401:"IMLN",402:"IMLOG2",403:"IMLOG10",404:"IMSIN",405:"IMCOS",406:"IMEXP",407:"IMARGUMENT",408:"IMCONJUGATE",409:"IMAGINARY",410:"IMREAL",411:"COMPLEX",412:"IMSUM",413:"IMPRODUCT",414:"SERIESSUM",415:"FACTDOUBLE",416:"SQRTPI",417:"QUOTIENT",418:"DELTA",419:"GESTEP",420:"ISEVEN",421:"ISODD",422:"MROUND",423:"ERF",424:"ERFC",425:"BESSELJ",426:"BESSELK",427:"BESSELY",428:"BESSELI",429:"XIRR",430:"XNPV",431:"PRICEMAT",432:"YIELDMAT",433:"INTRATE",434:"RECEIVED",435:"DISC",436:"PRICEDISC",437:"YIELDDISC",438:"TBILLEQ",439:"TBILLPRICE",440:"TBILLYIELD",441:"PRICE",442:"YIELD",443:"DOLLARDE",444:"DOLLARFR",445:"NOMINAL",446:"EFFECT",447:"CUMPRINC",448:"CUMIPMT",449:"EDATE",450:"EOMONTH",451:"YEARFRAC",452:"COUPDAYBS",453:"COUPDAYS",454:"COUPDAYSNC",455:"COUPNCD",456:"COUPNUM",457:"COUPPCD",458:"DURATION",459:"MDURATION",460:"ODDLPRICE",461:"ODDLYIELD",462:"ODDFPRICE",463:"ODDFYIELD",464:"RANDBETWEEN",465:"WEEKNUM",466:"AMORDEGRC",467:"AMORLINC",468:"CONVERT",724:"SHEETJS",469:"ACCRINT",470:"ACCRINTM",471:"WORKDAY",472:"NETWORKDAYS",473:"GCD",474:"MULTINOMIAL",475:"LCM",476:"FVSCHEDULE",477:"CUBEKPIMEMBER",478:"CUBESET",479:"CUBESETCOUNT",480:"IFERROR",481:"COUNTIFS",482:"SUMIFS",483:"AVERAGEIF",484:"AVERAGEIFS"},$T={2:1,3:1,10:0,15:1,16:1,17:1,18:1,19:0,20:1,21:1,22:1,23:1,24:1,25:1,26:1,27:2,30:2,31:3,32:1,33:1,34:0,35:0,38:1,39:2,40:3,41:3,42:3,43:3,44:3,45:3,47:3,48:2,53:1,61:3,63:0,65:3,66:3,67:1,68:1,69:1,70:1,71:1,72:1,73:1,74:0,75:1,76:1,77:1,79:2,80:2,83:1,85:0,86:1,89:0,90:1,94:0,95:0,97:2,98:1,99:1,101:3,102:3,105:1,106:1,108:2,111:1,112:1,113:1,114:1,117:2,118:1,119:4,121:1,126:1,127:1,128:1,129:1,130:1,131:1,133:1,134:1,135:1,136:2,137:2,138:2,140:1,141:1,142:3,143:4,144:4,161:1,162:1,163:1,164:1,165:2,172:1,175:2,176:2,177:3,178:2,179:1,184:1,186:1,189:3,190:1,195:3,196:3,197:1,198:1,199:3,201:1,207:4,210:3,211:1,212:2,213:2,214:1,215:1,225:0,229:1,230:1,231:1,232:1,233:1,234:1,235:3,244:1,247:4,252:2,257:1,261:1,271:1,273:4,274:2,275:2,276:2,277:3,278:3,279:1,280:3,281:3,282:3,283:1,284:1,285:2,286:4,287:3,288:2,289:4,290:3,291:3,292:3,293:4,294:1,295:3,296:1,297:3,298:1,299:2,300:3,301:3,302:4,303:2,304:2,305:2,306:2,307:2,308:2,309:3,310:2,311:2,312:2,313:2,314:2,315:2,316:4,325:2,326:2,327:2,328:2,331:2,332:2,337:2,342:1,343:1,346:2,347:1,350:4,351:3,352:1,353:2,360:1,368:1,369:1,370:1,371:1,372:1,373:1,374:1,375:1,376:1,377:1,378:1,382:3,385:1,392:1,393:1,396:2,397:2,398:2,399:1,400:1,401:1,402:1,403:1,404:1,405:1,406:1,407:1,408:1,409:1,410:1,414:4,415:1,416:1,417:2,420:1,421:1,422:2,424:1,425:2,426:2,427:2,428:2,430:3,438:3,439:3,440:3,443:2,444:2,445:2,446:2,447:6,448:6,449:2,450:2,464:2,468:3,476:2,479:1,480:2,65535:0};function sm(e){return e.slice(0,3)=="of:"&&(e=e.slice(3)),e.charCodeAt(0)==61&&(e=e.slice(1),e.charCodeAt(0)==61&&(e=e.slice(1))),e=e.replace(/COM\.MICROSOFT\./g,""),e=e.replace(/\[((?:\.[A-Z]+[0-9]+)(?::\.[A-Z]+[0-9]+)?)\]/g,function(t,r){return r.replace(/\./g,"")}),e=e.replace(/\[.(#[A-Z]*[?!])\]/g,"$1"),e.replace(/[;~]/g,",").replace(/\|/g,";")}function WT(e){var t="of:="+e.replace(vc,"$1[.$2$3$4$5]").replace(/\]:\[/g,":");return t.replace(/;/g,"|").replace(/,/g,";")}function kc(e){var t=e.split(":"),r=t[0].split(".")[0];return[r,t[0].split(".")[1]+(t.length>1?":"+(t[1].split(".")[1]||t[1].split(".")[0]):"")]}function HT(e){return e.replace(/\./,"!")}var os={},ni={},ls=typeof Map<"u";function Ec(e,t,r){var n=0,a=e.length;if(r){if(ls?r.has(t):Object.prototype.hasOwnProperty.call(r,t)){for(var i=ls?r.get(t):r[t];n<i.length;++n)if(e[i[n]].t===t)return e.Count++,i[n]}}else for(;n<a;++n)if(e[n].t===t)return e.Count++,n;return e[a]={t},e.Count++,e.Unique++,r&&(ls?(r.has(t)||r.set(t,[]),r.get(t).push(a)):(Object.prototype.hasOwnProperty.call(r,t)||(r[t]=[]),r[t].push(a))),a}function Fo(e,t){var r={min:e+1,max:e+1},n=-1;return t.MDW&&(rr=t.MDW),t.width!=null?r.customWidth=1:t.wpx!=null?n=ts(t.wpx):t.wch!=null&&(n=t.wch),n>-1?(r.width=Eo(n),r.customWidth=1):t.width!=null&&(r.width=t.width),t.hidden&&(r.hidden=!0),t.level!=null&&(r.outlineLevel=r.level=t.level),r}function Ca(e,t){if(e){var r=[.7,.7,.75,.75,.3,.3];t=="xlml"&&(r=[1,1,1,1,.5,.5]),e.left==null&&(e.left=r[0]),e.right==null&&(e.right=r[1]),e.top==null&&(e.top=r[2]),e.bottom==null&&(e.bottom=r[3]),e.header==null&&(e.header=r[4]),e.footer==null&&(e.footer=r[5])}}function ta(e,t,r){var n=r.revssf[t.z!=null?t.z:"General"],a=60,i=e.length;if(n==null&&r.ssf){for(;a<392;++a)if(r.ssf[a]==null){mn(t.z,a),r.ssf[a]=t.z,r.revssf[t.z]=n=a;break}}for(a=0;a!=i;++a)if(e[a].numFmtId===n)return a;return e[i]={numFmtId:n,fontId:0,fillId:0,borderId:0,xfId:0,applyNumberFormat:1},i}function om(e,t,r,n,a,i){try{n.cellNF&&(e.z=Ce[t])}catch(o){if(n.WTF)throw o}if(!(e.t==="z"&&!n.cellStyles)){if(e.t==="d"&&typeof e.v=="string"&&(e.v=it(e.v)),(!n||n.cellText!==!1)&&e.t!=="z")try{if(Ce[t]==null&&mn($2[t]||"General",t),e.t==="e")e.w=e.w||Nn[e.v];else if(t===0)if(e.t==="n")(e.v|0)===e.v?e.w=e.v.toString(10):e.w=Mi(e.v);else if(e.t==="d"){var s=Nt(e.v);(s|0)===s?e.w=s.toString(10):e.w=Mi(s)}else{if(e.v===void 0)return"";e.w=ua(e.v,ni)}else e.t==="d"?e.w=Sr(t,Nt(e.v),ni):e.w=Sr(t,e.v,ni)}catch(o){if(n.WTF)throw o}if(n.cellStyles&&r!=null)try{e.s=i.Fills[r],e.s.fgColor&&e.s.fgColor.theme&&!e.s.fgColor.rgb&&(e.s.fgColor.rgb=ko(a.themeElements.clrScheme[e.s.fgColor.theme].rgb,e.s.fgColor.tint||0),n.WTF&&(e.s.fgColor.raw_rgb=a.themeElements.clrScheme[e.s.fgColor.theme].rgb)),e.s.bgColor&&e.s.bgColor.theme&&(e.s.bgColor.rgb=ko(a.themeElements.clrScheme[e.s.bgColor.theme].rgb,e.s.bgColor.tint||0),n.WTF&&(e.s.bgColor.raw_rgb=a.themeElements.clrScheme[e.s.bgColor.theme].rgb))}catch(o){if(n.WTF&&i.Fills)throw o}}}function jT(e,t,r){if(e&&e["!ref"]){var n=Xe(e["!ref"]);if(n.e.c<n.s.c||n.e.r<n.s.r)throw new Error("Bad range ("+r+"): "+e["!ref"])}}function zT(e,t){var r=Xe(t);r.s.r<=r.e.r&&r.s.c<=r.e.c&&r.s.r>=0&&r.s.c>=0&&(e["!ref"]=Pe(r))}var GT=/<(?:\w:)?mergeCell ref="[A-Z0-9:]+"\s*[\/]?>/g,XT=/<(?:\w+:)?sheetData[^>]*>([\s\S]*)<\/(?:\w+:)?sheetData>/,KT=/<(?:\w:)?hyperlink [^>]*>/mg,YT=/"(\w*:\w*)"/,qT=/<(?:\w:)?col\b[^>]*[\/]?>/g,JT=/<(?:\w:)?autoFilter[^>]*([\/]|>([\s\S]*)<\/(?:\w:)?autoFilter)>/g,ZT=/<(?:\w:)?pageMargins[^>]*\/>/g,lm=/<(?:\w:)?sheetPr\b(?:[^>a-z][^>]*)?\/>/,QT=/<(?:\w:)?sheetPr[^>]*(?:[\/]|>([\s\S]*)<\/(?:\w:)?sheetPr)>/,eC=/<(?:\w:)?sheetViews[^>]*(?:[\/]|>([\s\S]*)<\/(?:\w:)?sheetViews)>/;function tC(e,t,r,n,a,i,s){if(!e)return e;n||(n={"!id":{}});var o=t.dense?[]:{},c={s:{r:2e6,c:2e6},e:{r:0,c:0}},f="",u="",d=e.match(XT);d?(f=e.slice(0,d.index),u=e.slice(d.index+d[0].length)):f=u=e;var h=f.match(lm);h?bc(h[0],o,a,r):(h=f.match(QT))&&nC(h[0],h[1]||"",o,a,r);var p=(f.match(/<(?:\w*:)?dimension/)||{index:-1}).index;if(p>0){var g=f.slice(p,p+50).match(YT);g&&zT(o,g[1])}var m=f.match(eC);m&&m[1]&&gC(m[1],a);var x=[];if(t.cellStyles){var v=f.match(qT);v&&uC(x,v)}d&&wC(d[1],o,t,c,i,s);var y=u.match(JT);y&&(o["!autofilter"]=hC(y[0]));var _=[],b=u.match(GT);if(b)for(p=0;p!=b.length;++p)_[p]=Xe(b[p].slice(b[p].indexOf('"')+1));var D=u.match(KT);D&&lC(o,D,n);var C=u.match(ZT);if(C&&(o["!margins"]=cC(Oe(C[0]))),!o["!ref"]&&c.e.c>=c.s.c&&c.e.r>=c.s.r&&(o["!ref"]=Pe(c)),t.sheetRows>0&&o["!ref"]){var k=Xe(o["!ref"]);t.sheetRows<=+k.e.r&&(k.e.r=t.sheetRows-1,k.e.r>c.e.r&&(k.e.r=c.e.r),k.e.r<k.s.r&&(k.s.r=k.e.r),k.e.c>c.e.c&&(k.e.c=c.e.c),k.e.c<k.s.c&&(k.s.c=k.e.c),o["!fullref"]=o["!ref"],o["!ref"]=Pe(k))}return x.length>0&&(o["!cols"]=x),_.length>0&&(o["!merges"]=_),o}function rC(e){if(e.length===0)return"";for(var t='<mergeCells count="'+e.length+'">',r=0;r!=e.length;++r)t+='<mergeCell ref="'+Pe(e[r])+'"/>';return t+"</mergeCells>"}function bc(e,t,r,n){var a=Oe(e);r.Sheets[n]||(r.Sheets[n]={}),a.codeName&&(r.Sheets[n].CodeName=Ge(nt(a.codeName)))}function nC(e,t,r,n,a){bc(e.slice(0,e.indexOf(">")),r,n,a)}function aC(e,t,r,n,a){var i=!1,s={},o=null;if(n.bookType!=="xlsx"&&t.vbaraw){var c=t.SheetNames[r];try{t.Workbook&&(c=t.Workbook.Sheets[r].CodeName||c)}catch{}i=!0,s.codeName=gn(Qe(c))}if(e&&e["!outline"]){var f={summaryBelow:1,summaryRight:1};e["!outline"].above&&(f.summaryBelow=0),e["!outline"].left&&(f.summaryRight=0),o=(o||"")+me("outlinePr",null,f)}!i&&!o||(a[a.length]=me("sheetPr",o,s))}var iC=["objects","scenarios","selectLockedCells","selectUnlockedCells"],sC=["formatColumns","formatRows","formatCells","insertColumns","insertRows","insertHyperlinks","deleteColumns","deleteRows","sort","autoFilter","pivotTables"];function oC(e){var t={sheet:1};return iC.forEach(function(r){e[r]!=null&&e[r]&&(t[r]="1")}),sC.forEach(function(r){e[r]!=null&&!e[r]&&(t[r]="0")}),e.password&&(t.password=hc(e.password).toString(16).toUpperCase()),me("sheetProtection",null,t)}function lC(e,t,r){for(var n=Array.isArray(e),a=0;a!=t.length;++a){var i=Oe(nt(t[a]),!0);if(!i.ref)return;var s=((r||{})["!id"]||[])[i.id];s?(i.Target=s.Target,i.location&&(i.Target+="#"+Ge(i.location))):(i.Target="#"+Ge(i.location),s={Target:i.Target,TargetMode:"Internal"}),i.Rel=s,i.tooltip&&(i.Tooltip=i.tooltip,delete i.tooltip);for(var o=Xe(i.ref),c=o.s.r;c<=o.e.r;++c)for(var f=o.s.c;f<=o.e.c;++f){var u=Ae({c:f,r:c});n?(e[c]||(e[c]=[]),e[c][f]||(e[c][f]={t:"z",v:void 0}),e[c][f].l=i):(e[u]||(e[u]={t:"z",v:void 0}),e[u].l=i)}}}function cC(e){var t={};return["left","right","top","bottom","header","footer"].forEach(function(r){e[r]&&(t[r]=parseFloat(e[r]))}),t}function fC(e){return Ca(e),me("pageMargins",null,e)}function uC(e,t){for(var r=!1,n=0;n!=t.length;++n){var a=Oe(t[n],!0);a.hidden&&(a.hidden=ot(a.hidden));var i=parseInt(a.min,10)-1,s=parseInt(a.max,10)-1;for(a.outlineLevel&&(a.level=+a.outlineLevel||0),delete a.min,delete a.max,a.width=+a.width,!r&&a.width&&(r=!0,pc(a.width)),Qn(a);i<=s;)e[i++]=st(a)}}function dC(e,t){for(var r=["<cols>"],n,a=0;a!=t.length;++a)(n=t[a])&&(r[r.length]=me("col",null,Fo(a,n)));return r[r.length]="</cols>",r.join("")}function hC(e){var t={ref:(e.match(/ref="([^"]*)"/)||[])[1]};return t}function mC(e,t,r,n){var a=typeof e.ref=="string"?e.ref:Pe(e.ref);r.Workbook||(r.Workbook={Sheets:[]}),r.Workbook.Names||(r.Workbook.Names=[]);var i=r.Workbook.Names,s=gr(a);s.s.r==s.e.r&&(s.e.r=gr(t["!ref"]).e.r,a=Pe(s));for(var o=0;o<i.length;++o){var c=i[o];if(c.Name=="_xlnm._FilterDatabase"&&c.Sheet==n){c.Ref="'"+r.SheetNames[n]+"'!"+a;break}}return o==i.length&&i.push({Name:"_xlnm._FilterDatabase",Sheet:n,Ref:"'"+r.SheetNames[n]+"'!"+a}),me("autoFilter",null,{ref:a})}var pC=/<(?:\w:)?sheetView(?:[^>a-z][^>]*)?\/?>/;function gC(e,t){t.Views||(t.Views=[{}]),(e.match(pC)||[]).forEach(function(r,n){var a=Oe(r);t.Views[n]||(t.Views[n]={}),+a.zoomScale&&(t.Views[n].zoom=+a.zoomScale),ot(a.rightToLeft)&&(t.Views[n].RTL=!0)})}function xC(e,t,r,n){var a={workbookViewId:"0"};return(((n||{}).Workbook||{}).Views||[])[0]&&(a.rightToLeft=n.Workbook.Views[0].RTL?"1":"0"),me("sheetViews",me("sheetView",null,a),{})}function vC(e,t,r,n){if(e.c&&r["!comments"].push([t,e.c]),e.v===void 0&&typeof e.f!="string"||e.t==="z"&&!e.f)return"";var a="",i=e.t,s=e.v;if(e.t!=="z")switch(e.t){case"b":a=e.v?"1":"0";break;case"n":a=""+e.v;break;case"e":a=Nn[e.v];break;case"d":n&&n.cellDates?a=it(e.v,-1).toISOString():(e=st(e),e.t="n",a=""+(e.v=Nt(it(e.v)))),typeof e.z>"u"&&(e.z=Ce[14]);break;default:a=e.v;break}var o=Gt("v",Qe(a)),c={r:t},f=ta(n.cellXfs,e,n);switch(f!==0&&(c.s=f),e.t){case"n":break;case"d":c.t="d";break;case"b":c.t="b";break;case"e":c.t="e";break;case"z":break;default:if(e.v==null){delete e.t;break}if(e.v.length>32767)throw new Error("Text length must not exceed 32767 characters");if(n&&n.bookSST){o=Gt("v",""+Ec(n.Strings,e.v,n.revStrings)),c.t="s";break}c.t="str";break}if(e.t!=i&&(e.t=i,e.v=s),typeof e.f=="string"&&e.f){var u=e.F&&e.F.slice(0,t.length)==t?{t:"array",ref:e.F}:null;o=me("f",Qe(e.f),u)+(e.v!=null?o:"")}return e.l&&r["!links"].push([t,e.l]),e.D&&(c.cm=1),me("c",o,c)}var wC=function(){var e=/<(?:\w+:)?c[ \/>]/,t=/<\/(?:\w+:)?row>/,r=/r=["']([^"']*)["']/,n=/<(?:\w+:)?is>([\S\s]*?)<\/(?:\w+:)?is>/,a=/ref=["']([^"']*)["']/,i=Wi("v"),s=Wi("f");return function(c,f,u,d,h,p){for(var g=0,m="",x=[],v=[],y=0,_=0,b=0,D="",C,k,F=0,O=0,X,j,I=0,G=0,re=Array.isArray(p.CellXf),ae,oe=[],fe=[],ke=Array.isArray(f),H=[],le={},B=!1,w=!!u.sheetStubs,S=c.split(t),T=0,R=S.length;T!=R;++T){m=S[T].trim();var W=m.length;if(W!==0){var Y=0;e:for(g=0;g<W;++g)switch(m[g]){case">":if(m[g-1]!="/"){++g;break e}if(u&&u.cellStyles){if(k=Oe(m.slice(Y,g),!0),F=k.r!=null?parseInt(k.r,10):F+1,O=-1,u.sheetRows&&u.sheetRows<F)continue;le={},B=!1,k.ht&&(B=!0,le.hpt=parseFloat(k.ht),le.hpx=ei(le.hpt)),k.hidden=="1"&&(B=!0,le.hidden=!0),k.outlineLevel!=null&&(B=!0,le.level=+k.outlineLevel),B&&(H[F-1]=le)}break;case"<":Y=g;break}if(Y>=g)break;if(k=Oe(m.slice(Y,g),!0),F=k.r!=null?parseInt(k.r,10):F+1,O=-1,!(u.sheetRows&&u.sheetRows<F)){d.s.r>F-1&&(d.s.r=F-1),d.e.r<F-1&&(d.e.r=F-1),u&&u.cellStyles&&(le={},B=!1,k.ht&&(B=!0,le.hpt=parseFloat(k.ht),le.hpx=ei(le.hpt)),k.hidden=="1"&&(B=!0,le.hidden=!0),k.outlineLevel!=null&&(B=!0,le.level=+k.outlineLevel),B&&(H[F-1]=le)),x=m.slice(g).split(e);for(var q=0;q!=x.length&&x[q].trim().charAt(0)=="<";++q);for(x=x.slice(q),g=0;g!=x.length;++g)if(m=x[g].trim(),m.length!==0){if(v=m.match(r),y=g,_=0,b=0,m="<c "+(m.slice(0,1)=="<"?">":"")+m,v!=null&&v.length===2){for(y=0,D=v[1],_=0;_!=D.length&&!((b=D.charCodeAt(_)-64)<1||b>26);++_)y=26*y+b;--y,O=y}else++O;for(_=0;_!=m.length&&m.charCodeAt(_)!==62;++_);if(++_,k=Oe(m.slice(0,_),!0),k.r||(k.r=Ae({r:F-1,c:O})),D=m.slice(_),C={t:""},(v=D.match(i))!=null&&v[1]!==""&&(C.v=Ge(v[1])),u.cellFormula){if((v=D.match(s))!=null&&v[1]!==""){if(C.f=Ge(nt(v[1])).replace(/\r\n/g,`
`),u.xlfn||(C.f=Yh(C.f)),v[0].indexOf('t="array"')>-1)C.F=(D.match(a)||[])[1],C.F.indexOf(":")>-1&&oe.push([Xe(C.F),C.F]);else if(v[0].indexOf('t="shared"')>-1){j=Oe(v[0]);var K=Ge(nt(v[1]));u.xlfn||(K=Yh(K)),fe[parseInt(j.si,10)]=[j,K,k.r]}}else(v=D.match(/<f[^>]*\/>/))&&(j=Oe(v[0]),fe[j.si]&&(C.f=pS(fe[j.si][1],fe[j.si][2],k.r)));var ee=ht(k.r);for(_=0;_<oe.length;++_)ee.r>=oe[_][0].s.r&&ee.r<=oe[_][0].e.r&&ee.c>=oe[_][0].s.c&&ee.c<=oe[_][0].e.c&&(C.F=oe[_][1])}if(k.t==null&&C.v===void 0)if(C.f||C.F)C.v=0,C.t="n";else if(w)C.t="z";else continue;else C.t=k.t||"n";switch(d.s.c>O&&(d.s.c=O),d.e.c<O&&(d.e.c=O),C.t){case"n":if(C.v==""||C.v==null){if(!w)continue;C.t="z"}else C.v=parseFloat(C.v);break;case"s":if(typeof C.v>"u"){if(!w)continue;C.t="z"}else X=os[parseInt(C.v,10)],C.v=X.t,C.r=X.r,u.cellHTML&&(C.h=X.h);break;case"str":C.t="s",C.v=C.v!=null?nt(C.v):"",u.cellHTML&&(C.h=Ul(C.v));break;case"inlineStr":v=D.match(n),C.t="s",v!=null&&(X=dc(v[1]))?(C.v=X.t,u.cellHTML&&(C.h=X.h)):C.v="";break;case"b":C.v=ot(C.v);break;case"d":u.cellDates?C.v=it(C.v,1):(C.v=Nt(it(C.v,1)),C.t="n");break;case"e":(!u||u.cellText!==!1)&&(C.w=C.v),C.v=$d[C.v];break}if(I=G=0,ae=null,re&&k.s!==void 0&&(ae=p.CellXf[k.s],ae!=null&&(ae.numFmtId!=null&&(I=ae.numFmtId),u.cellStyles&&ae.fillId!=null&&(G=ae.fillId))),om(C,I,G,u,h,p),u.cellDates&&re&&C.t=="n"&&da(Ce[I])&&(C.t="d",C.v=lo(C.v)),k.cm&&u.xlmeta){var ye=(u.xlmeta.Cell||[])[+k.cm-1];ye&&ye.type=="XLDAPR"&&(C.D=!0)}if(ke){var M=ht(k.r);f[M.r]||(f[M.r]=[]),f[M.r][M.c]=C}else f[k.r]=C}}}}H.length>0&&(f["!rows"]=H)}}();function _C(e,t,r,n){var a=[],i=[],s=Xe(e["!ref"]),o="",c,f="",u=[],d=0,h=0,p=e["!rows"],g=Array.isArray(e),m={r:f},x,v=-1;for(h=s.s.c;h<=s.e.c;++h)u[h]=dt(h);for(d=s.s.r;d<=s.e.r;++d){for(i=[],f=Et(d),h=s.s.c;h<=s.e.c;++h){c=u[h]+f;var y=g?(e[d]||[])[h]:e[c];y!==void 0&&(o=vC(y,c,e,t))!=null&&i.push(o)}(i.length>0||p&&p[d])&&(m={r:f},p&&p[d]&&(x=p[d],x.hidden&&(m.hidden=1),v=-1,x.hpx?v=rs(x.hpx):x.hpt&&(v=x.hpt),v>-1&&(m.ht=v,m.customHeight=1),x.level&&(m.outlineLevel=x.level)),a[a.length]=me("row",i.join(""),m))}if(p)for(;d<p.length;++d)p&&p[d]&&(m={r:d+1},x=p[d],x.hidden&&(m.hidden=1),v=-1,x.hpx?v=rs(x.hpx):x.hpt&&(v=x.hpt),v>-1&&(m.ht=v,m.customHeight=1),x.level&&(m.outlineLevel=x.level),a[a.length]=me("row","",m));return a.join("")}function cm(e,t,r,n){var a=[kt,me("worksheet",null,{xmlns:ma[0],"xmlns:r":It.r})],i=r.SheetNames[e],s=0,o="",c=r.Sheets[i];c==null&&(c={});var f=c["!ref"]||"A1",u=Xe(f);if(u.e.c>16383||u.e.r>1048575){if(t.WTF)throw new Error("Range "+f+" exceeds format limit A1:XFD1048576");u.e.c=Math.min(u.e.c,16383),u.e.r=Math.min(u.e.c,1048575),f=Pe(u)}n||(n={}),c["!comments"]=[];var d=[];aC(c,r,e,t,a),a[a.length]=me("dimension",null,{ref:f}),a[a.length]=xC(c,t,e,r),t.sheetFormat&&(a[a.length]=me("sheetFormatPr",null,{defaultRowHeight:t.sheetFormat.defaultRowHeight||"16",baseColWidth:t.sheetFormat.baseColWidth||"10",outlineLevelRow:t.sheetFormat.outlineLevelRow||"7"})),c["!cols"]!=null&&c["!cols"].length>0&&(a[a.length]=dC(c,c["!cols"])),a[s=a.length]="<sheetData/>",c["!links"]=[],c["!ref"]!=null&&(o=_C(c,t),o.length>0&&(a[a.length]=o)),a.length>s+1&&(a[a.length]="</sheetData>",a[s]=a[s].replace("/>",">")),c["!protect"]&&(a[a.length]=oC(c["!protect"])),c["!autofilter"]!=null&&(a[a.length]=mC(c["!autofilter"],c,r,e)),c["!merges"]!=null&&c["!merges"].length>0&&(a[a.length]=rC(c["!merges"]));var h=-1,p,g=-1;return c["!links"].length>0&&(a[a.length]="<hyperlinks>",c["!links"].forEach(function(m){m[1].Target&&(p={ref:m[0]},m[1].Target.charAt(0)!="#"&&(g=et(n,-1,Qe(m[1].Target).replace(/#.*$/,""),We.HLINK),p["r:id"]="rId"+g),(h=m[1].Target.indexOf("#"))>-1&&(p.location=Qe(m[1].Target.slice(h+1))),m[1].Tooltip&&(p.tooltip=Qe(m[1].Tooltip)),a[a.length]=me("hyperlink",null,p))}),a[a.length]="</hyperlinks>"),delete c["!links"],c["!margins"]!=null&&(a[a.length]=fC(c["!margins"])),(!t||t.ignoreEC||t.ignoreEC==null)&&(a[a.length]=Gt("ignoredErrors",me("ignoredError",null,{numberStoredAsText:1,sqref:f}))),d.length>0&&(g=et(n,-1,"../drawings/drawing"+(e+1)+".xml",We.DRAW),a[a.length]=me("drawing",null,{"r:id":"rId"+g}),c["!drawing"]=d),c["!comments"].length>0&&(g=et(n,-1,"../drawings/vmlDrawing"+(e+1)+".vml",We.VML),a[a.length]=me("legacyDrawing",null,{"r:id":"rId"+g}),c["!legacy"]=g),a.length>1&&(a[a.length]="</worksheet>",a[1]=a[1].replace("/>",">")),a.join("")}function yC(e,t){var r={},n=e.l+t;r.r=e.read_shift(4),e.l+=4;var a=e.read_shift(2);e.l+=1;var i=e.read_shift(1);return e.l=n,i&7&&(r.level=i&7),i&16&&(r.hidden=!0),i&32&&(r.hpt=a/20),r}function kC(e,t,r){var n=ne(145),a=(r["!rows"]||[])[e]||{};n.write_shift(4,e),n.write_shift(4,0);var i=320;a.hpx?i=rs(a.hpx)*20:a.hpt&&(i=a.hpt*20),n.write_shift(2,i),n.write_shift(1,0);var s=0;a.level&&(s|=a.level),a.hidden&&(s|=16),(a.hpx||a.hpt)&&(s|=32),n.write_shift(1,s),n.write_shift(1,0);var o=0,c=n.l;n.l+=4;for(var f={r:e,c:0},u=0;u<16;++u)if(!(t.s.c>u+1<<10||t.e.c<u<<10)){for(var d=-1,h=-1,p=u<<10;p<u+1<<10;++p){f.c=p;var g=Array.isArray(r)?(r[f.r]||[])[f.c]:r[Ae(f)];g&&(d<0&&(d=p),h=p)}d<0||(++o,n.write_shift(4,d),n.write_shift(4,h))}var m=n.l;return n.l=c,n.write_shift(4,o),n.l=m,n.length>n.l?n.slice(0,n.l):n}function EC(e,t,r,n){var a=kC(n,r,t);(a.length>17||(t["!rows"]||[])[n])&&ce(e,0,a)}var bC=wa,SC=Ja;function TC(){}function CC(e,t){var r={},n=e[e.l];return++e.l,r.above=!(n&64),r.left=!(n&128),e.l+=18,r.name=D_(e),r}function FC(e,t,r){r==null&&(r=ne(84+4*e.length));var n=192;t&&(t.above&&(n&=-65),t.left&&(n&=-129)),r.write_shift(1,n);for(var a=1;a<3;++a)r.write_shift(1,0);return ho({auto:1},r),r.write_shift(-4,-1),r.write_shift(-4,-1),Nd(e,r),r.slice(0,r.l)}function AC(e){var t=Lr(e);return[t]}function DC(e,t,r){return r==null&&(r=ne(8)),ga(t,r)}function RC(e){var t=xa(e);return[t]}function OC(e,t,r){return r==null&&(r=ne(4)),va(t,r)}function BC(e){var t=Lr(e),r=e.read_shift(1);return[t,r,"b"]}function NC(e,t,r){return r==null&&(r=ne(9)),ga(t,r),r.write_shift(1,e.v?1:0),r}function IC(e){var t=xa(e),r=e.read_shift(1);return[t,r,"b"]}function PC(e,t,r){return r==null&&(r=ne(5)),va(t,r),r.write_shift(1,e.v?1:0),r}function LC(e){var t=Lr(e),r=e.read_shift(1);return[t,r,"e"]}function MC(e,t,r){return r==null&&(r=ne(9)),ga(t,r),r.write_shift(1,e.v),r}function VC(e){var t=xa(e),r=e.read_shift(1);return[t,r,"e"]}function UC(e,t,r){return r==null&&(r=ne(8)),va(t,r),r.write_shift(1,e.v),r.write_shift(2,0),r.write_shift(1,0),r}function $C(e){var t=Lr(e),r=e.read_shift(4);return[t,r,"s"]}function WC(e,t,r){return r==null&&(r=ne(12)),ga(t,r),r.write_shift(4,t.v),r}function HC(e){var t=xa(e),r=e.read_shift(4);return[t,r,"s"]}function jC(e,t,r){return r==null&&(r=ne(8)),va(t,r),r.write_shift(4,t.v),r}function zC(e){var t=Lr(e),r=er(e);return[t,r,"n"]}function GC(e,t,r){return r==null&&(r=ne(16)),ga(t,r),_a(e.v,r),r}function fm(e){var t=xa(e),r=er(e);return[t,r,"n"]}function XC(e,t,r){return r==null&&(r=ne(12)),va(t,r),_a(e.v,r),r}function KC(e){var t=Lr(e),r=Ql(e);return[t,r,"n"]}function YC(e,t,r){return r==null&&(r=ne(12)),ga(t,r),Id(e.v,r),r}function qC(e){var t=xa(e),r=Ql(e);return[t,r,"n"]}function JC(e,t,r){return r==null&&(r=ne(8)),va(t,r),Id(e.v,r),r}function ZC(e){var t=Lr(e),r=Yl(e);return[t,r,"is"]}function QC(e){var t=Lr(e),r=Qt(e);return[t,r,"str"]}function eF(e,t,r){return r==null&&(r=ne(12+4*e.v.length)),ga(t,r),$t(e.v,r),r.length>r.l?r.slice(0,r.l):r}function tF(e){var t=xa(e),r=Qt(e);return[t,r,"str"]}function rF(e,t,r){return r==null&&(r=ne(8+4*e.v.length)),va(t,r),$t(e.v,r),r.length>r.l?r.slice(0,r.l):r}function nF(e,t,r){var n=e.l+t,a=Lr(e);a.r=r["!row"];var i=e.read_shift(1),s=[a,i,"b"];if(r.cellFormula){e.l+=2;var o=Co(e,n-e.l,r);s[3]=nr(o,null,a,r.supbooks,r)}else e.l=n;return s}function aF(e,t,r){var n=e.l+t,a=Lr(e);a.r=r["!row"];var i=e.read_shift(1),s=[a,i,"e"];if(r.cellFormula){e.l+=2;var o=Co(e,n-e.l,r);s[3]=nr(o,null,a,r.supbooks,r)}else e.l=n;return s}function iF(e,t,r){var n=e.l+t,a=Lr(e);a.r=r["!row"];var i=er(e),s=[a,i,"n"];if(r.cellFormula){e.l+=2;var o=Co(e,n-e.l,r);s[3]=nr(o,null,a,r.supbooks,r)}else e.l=n;return s}function sF(e,t,r){var n=e.l+t,a=Lr(e);a.r=r["!row"];var i=Qt(e),s=[a,i,"str"];if(r.cellFormula){e.l+=2;var o=Co(e,n-e.l,r);s[3]=nr(o,null,a,r.supbooks,r)}else e.l=n;return s}var oF=wa,lF=Ja;function cF(e,t){return t==null&&(t=ne(4)),t.write_shift(4,e),t}function fF(e,t){var r=e.l+t,n=wa(e),a=ql(e),i=Qt(e),s=Qt(e),o=Qt(e);e.l=r;var c={rfx:n,relId:a,loc:i,display:o};return s&&(c.Tooltip=s),c}function uF(e,t){var r=ne(50+4*(e[1].Target.length+(e[1].Tooltip||"").length));Ja({s:ht(e[0]),e:ht(e[0])},r),Zl("rId"+t,r);var n=e[1].Target.indexOf("#"),a=n==-1?"":e[1].Target.slice(n+1);return $t(a||"",r),$t(e[1].Tooltip||"",r),$t("",r),r.slice(0,r.l)}function dF(){}function hF(e,t,r){var n=e.l+t,a=Pd(e),i=e.read_shift(1),s=[a];if(s[2]=i,r.cellFormula){var o=LT(e,n-e.l,r);s[1]=o}else e.l=n;return s}function mF(e,t,r){var n=e.l+t,a=wa(e),i=[a];if(r.cellFormula){var s=VT(e,n-e.l,r);i[1]=s,e.l=n}else e.l=n;return i}function pF(e,t,r){r==null&&(r=ne(18));var n=Fo(e,t);r.write_shift(-4,e),r.write_shift(-4,e),r.write_shift(4,(n.width||10)*256),r.write_shift(4,0);var a=0;return t.hidden&&(a|=1),typeof n.width=="number"&&(a|=2),t.level&&(a|=t.level<<8),r.write_shift(2,a),r}var um=["left","right","top","bottom","header","footer"];function gF(e){var t={};return um.forEach(function(r){t[r]=er(e)}),t}function xF(e,t){return t==null&&(t=ne(6*8)),Ca(e),um.forEach(function(r){_a(e[r],t)}),t}function vF(e){var t=e.read_shift(2);return e.l+=28,{RTL:t&32}}function wF(e,t,r){r==null&&(r=ne(30));var n=924;return(((t||{}).Views||[])[0]||{}).RTL&&(n|=32),r.write_shift(2,n),r.write_shift(4,0),r.write_shift(4,0),r.write_shift(4,0),r.write_shift(1,0),r.write_shift(1,0),r.write_shift(2,0),r.write_shift(2,100),r.write_shift(2,0),r.write_shift(2,0),r.write_shift(2,0),r.write_shift(4,0),r}function _F(e){var t=ne(24);return t.write_shift(4,4),t.write_shift(4,1),Ja(e,t),t}function yF(e,t){return t==null&&(t=ne(16*4+2)),t.write_shift(2,e.password?hc(e.password):0),t.write_shift(4,1),[["objects",!1],["scenarios",!1],["formatCells",!0],["formatColumns",!0],["formatRows",!0],["insertColumns",!0],["insertRows",!0],["insertHyperlinks",!0],["deleteColumns",!0],["deleteRows",!0],["selectLockedCells",!1],["sort",!0],["autoFilter",!0],["pivotTables",!0],["selectUnlockedCells",!1]].forEach(function(r){r[1]?t.write_shift(4,e[r[0]]!=null&&!e[r[0]]?1:0):t.write_shift(4,e[r[0]]!=null&&e[r[0]]?0:1)}),t}function kF(){}function EF(){}function bF(e,t,r,n,a,i,s){if(!e)return e;var o=t||{};n||(n={"!id":{}});var c=o.dense?[]:{},f,u={s:{r:2e6,c:2e6},e:{r:0,c:0}},d=!1,h=!1,p,g,m,x,v,y,_,b,D,C=[];o.biff=12,o["!row"]=0;var k=0,F=!1,O=[],X={},j=o.supbooks||a.supbooks||[[]];if(j.sharedf=X,j.arrayf=O,j.SheetNames=a.SheetNames||a.Sheets.map(function(ke){return ke.name}),!o.supbooks&&(o.supbooks=j,a.Names))for(var I=0;I<a.Names.length;++I)j[0][I+1]=a.Names[I];var G=[],re=[],ae=!1;us[16]={n:"BrtShortReal",f:fm};var oe;if(On(e,function(H,le,B){if(!h)switch(B){case 148:f=H;break;case 0:p=H,o.sheetRows&&o.sheetRows<=p.r&&(h=!0),b=Et(x=p.r),o["!row"]=p.r,(H.hidden||H.hpt||H.level!=null)&&(H.hpt&&(H.hpx=ei(H.hpt)),re[H.r]=H);break;case 2:case 3:case 4:case 5:case 6:case 7:case 8:case 9:case 10:case 11:case 13:case 14:case 15:case 16:case 17:case 18:case 62:switch(g={t:H[2]},H[2]){case"n":g.v=H[1];break;case"s":_=os[H[1]],g.v=_.t,g.r=_.r;break;case"b":g.v=!!H[1];break;case"e":g.v=H[1],o.cellText!==!1&&(g.w=Nn[g.v]);break;case"str":g.t="s",g.v=H[1];break;case"is":g.t="s",g.v=H[1].t;break}if((m=s.CellXf[H[0].iStyleRef])&&om(g,m.numFmtId,null,o,i,s),v=H[0].c==-1?v+1:H[0].c,o.dense?(c[x]||(c[x]=[]),c[x][v]=g):c[dt(v)+b]=g,o.cellFormula){for(F=!1,k=0;k<O.length;++k){var w=O[k];p.r>=w[0].s.r&&p.r<=w[0].e.r&&v>=w[0].s.c&&v<=w[0].e.c&&(g.F=Pe(w[0]),F=!0)}!F&&H.length>3&&(g.f=H[3])}if(u.s.r>p.r&&(u.s.r=p.r),u.s.c>v&&(u.s.c=v),u.e.r<p.r&&(u.e.r=p.r),u.e.c<v&&(u.e.c=v),o.cellDates&&m&&g.t=="n"&&da(Ce[m.numFmtId])){var S=Yn(g.v);S&&(g.t="d",g.v=new Date(S.y,S.m-1,S.d,S.H,S.M,S.S,S.u))}oe&&(oe.type=="XLDAPR"&&(g.D=!0),oe=void 0);break;case 1:case 12:if(!o.sheetStubs||d)break;g={t:"z",v:void 0},v=H[0].c==-1?v+1:H[0].c,o.dense?(c[x]||(c[x]=[]),c[x][v]=g):c[dt(v)+b]=g,u.s.r>p.r&&(u.s.r=p.r),u.s.c>v&&(u.s.c=v),u.e.r<p.r&&(u.e.r=p.r),u.e.c<v&&(u.e.c=v),oe&&(oe.type=="XLDAPR"&&(g.D=!0),oe=void 0);break;case 176:C.push(H);break;case 49:oe=((o.xlmeta||{}).Cell||[])[H-1];break;case 494:var T=n["!id"][H.relId];for(T?(H.Target=T.Target,H.loc&&(H.Target+="#"+H.loc),H.Rel=T):H.relId==""&&(H.Target="#"+H.loc),x=H.rfx.s.r;x<=H.rfx.e.r;++x)for(v=H.rfx.s.c;v<=H.rfx.e.c;++v)o.dense?(c[x]||(c[x]=[]),c[x][v]||(c[x][v]={t:"z",v:void 0}),c[x][v].l=H):(y=Ae({c:v,r:x}),c[y]||(c[y]={t:"z",v:void 0}),c[y].l=H);break;case 426:if(!o.cellFormula)break;O.push(H),D=o.dense?c[x][v]:c[dt(v)+b],D.f=nr(H[1],u,{r:p.r,c:v},j,o),D.F=Pe(H[0]);break;case 427:if(!o.cellFormula)break;X[Ae(H[0].s)]=H[1],D=o.dense?c[x][v]:c[dt(v)+b],D.f=nr(H[1],u,{r:p.r,c:v},j,o);break;case 60:if(!o.cellStyles)break;for(;H.e>=H.s;)G[H.e--]={width:H.w/256,hidden:!!(H.flags&1),level:H.level},ae||(ae=!0,pc(H.w/256)),Qn(G[H.e+1]);break;case 161:c["!autofilter"]={ref:Pe(H)};break;case 476:c["!margins"]=H;break;case 147:a.Sheets[r]||(a.Sheets[r]={}),H.name&&(a.Sheets[r].CodeName=H.name),(H.above||H.left)&&(c["!outline"]={above:H.above,left:H.left});break;case 137:a.Views||(a.Views=[{}]),a.Views[0]||(a.Views[0]={}),H.RTL&&(a.Views[0].RTL=!0);break;case 485:break;case 64:case 1053:break;case 151:break;case 152:case 175:case 644:case 625:case 562:case 396:case 1112:case 1146:case 471:case 1050:case 649:case 1105:case 589:case 607:case 564:case 1055:case 168:case 174:case 1180:case 499:case 507:case 550:case 171:case 167:case 1177:case 169:case 1181:case 551:case 552:case 661:case 639:case 478:case 537:case 477:case 536:case 1103:case 680:case 1104:case 1024:case 663:case 535:case 678:case 504:case 1043:case 428:case 170:case 3072:case 50:case 2070:case 1045:break;case 35:d=!0;break;case 36:d=!1;break;case 37:d=!0;break;case 38:d=!1;break;default:if(!le.T){if(!d||o.WTF)throw new Error("Unexpected record 0x"+B.toString(16))}}},o),delete o.supbooks,delete o["!row"],!c["!ref"]&&(u.s.r<2e6||f&&(f.e.r>0||f.e.c>0||f.s.r>0||f.s.c>0))&&(c["!ref"]=Pe(f||u)),o.sheetRows&&c["!ref"]){var fe=Xe(c["!ref"]);o.sheetRows<=+fe.e.r&&(fe.e.r=o.sheetRows-1,fe.e.r>u.e.r&&(fe.e.r=u.e.r),fe.e.r<fe.s.r&&(fe.s.r=fe.e.r),fe.e.c>u.e.c&&(fe.e.c=u.e.c),fe.e.c<fe.s.c&&(fe.s.c=fe.e.c),c["!fullref"]=c["!ref"],c["!ref"]=Pe(fe))}return C.length>0&&(c["!merges"]=C),G.length>0&&(c["!cols"]=G),re.length>0&&(c["!rows"]=re),c}function SF(e,t,r,n,a,i,s){if(t.v===void 0)return!1;var o="";switch(t.t){case"b":o=t.v?"1":"0";break;case"d":t=st(t),t.z=t.z||Ce[14],t.v=Nt(it(t.v)),t.t="n";break;case"n":case"e":o=""+t.v;break;default:o=t.v;break}var c={r,c:n};switch(c.s=ta(a.cellXfs,t,a),t.l&&i["!links"].push([Ae(c),t.l]),t.c&&i["!comments"].push([Ae(c),t.c]),t.t){case"s":case"str":return a.bookSST?(o=Ec(a.Strings,t.v,a.revStrings),c.t="s",c.v=o,s?ce(e,18,jC(t,c)):ce(e,7,WC(t,c))):(c.t="str",s?ce(e,17,rF(t,c)):ce(e,6,eF(t,c))),!0;case"n":return t.v==(t.v|0)&&t.v>-1e3&&t.v<1e3?s?ce(e,13,JC(t,c)):ce(e,2,YC(t,c)):s?ce(e,16,XC(t,c)):ce(e,5,GC(t,c)),!0;case"b":return c.t="b",s?ce(e,15,PC(t,c)):ce(e,4,NC(t,c)),!0;case"e":return c.t="e",s?ce(e,14,UC(t,c)):ce(e,3,MC(t,c)),!0}return s?ce(e,12,OC(t,c)):ce(e,1,DC(t,c)),!0}function TF(e,t,r,n){var a=Xe(t["!ref"]||"A1"),i,s="",o=[];ce(e,145);var c=Array.isArray(t),f=a.e.r;t["!rows"]&&(f=Math.max(a.e.r,t["!rows"].length-1));for(var u=a.s.r;u<=f;++u){s=Et(u),EC(e,t,a,u);var d=!1;if(u<=a.e.r)for(var h=a.s.c;h<=a.e.c;++h){u===a.s.r&&(o[h]=dt(h)),i=o[h]+s;var p=c?(t[u]||[])[h]:t[i];if(!p){d=!1;continue}d=SF(e,p,u,h,n,t,d)}}ce(e,146)}function CF(e,t){!t||!t["!merges"]||(ce(e,177,cF(t["!merges"].length)),t["!merges"].forEach(function(r){ce(e,176,lF(r))}),ce(e,178))}function FF(e,t){!t||!t["!cols"]||(ce(e,390),t["!cols"].forEach(function(r,n){r&&ce(e,60,pF(n,r))}),ce(e,391))}function AF(e,t){!t||!t["!ref"]||(ce(e,648),ce(e,649,_F(Xe(t["!ref"]))),ce(e,650))}function DF(e,t,r){t["!links"].forEach(function(n){if(n[1].Target){var a=et(r,-1,n[1].Target.replace(/#.*$/,""),We.HLINK);ce(e,494,uF(n,a))}}),delete t["!links"]}function RF(e,t,r,n){if(t["!comments"].length>0){var a=et(n,-1,"../drawings/vmlDrawing"+(r+1)+".vml",We.VML);ce(e,551,Zl("rId"+a)),t["!legacy"]=a}}function OF(e,t,r,n){if(t["!autofilter"]){var a=t["!autofilter"],i=typeof a.ref=="string"?a.ref:Pe(a.ref);r.Workbook||(r.Workbook={Sheets:[]}),r.Workbook.Names||(r.Workbook.Names=[]);var s=r.Workbook.Names,o=gr(i);o.s.r==o.e.r&&(o.e.r=gr(t["!ref"]).e.r,i=Pe(o));for(var c=0;c<s.length;++c){var f=s[c];if(f.Name=="_xlnm._FilterDatabase"&&f.Sheet==n){f.Ref="'"+r.SheetNames[n]+"'!"+i;break}}c==s.length&&s.push({Name:"_xlnm._FilterDatabase",Sheet:n,Ref:"'"+r.SheetNames[n]+"'!"+i}),ce(e,161,Ja(Xe(i))),ce(e,162)}}function BF(e,t,r){ce(e,133),ce(e,137,wF(t,r)),ce(e,138),ce(e,134)}function NF(e,t){t["!protect"]&&ce(e,535,yF(t["!protect"]))}function IF(e,t,r,n){var a=pr(),i=r.SheetNames[e],s=r.Sheets[i]||{},o=i;try{r&&r.Workbook&&(o=r.Workbook.Sheets[e].CodeName||o)}catch{}var c=Xe(s["!ref"]||"A1");if(c.e.c>16383||c.e.r>1048575){if(t.WTF)throw new Error("Range "+(s["!ref"]||"A1")+" exceeds format limit A1:XFD1048576");c.e.c=Math.min(c.e.c,16383),c.e.r=Math.min(c.e.c,1048575)}return s["!links"]=[],s["!comments"]=[],ce(a,129),(r.vbaraw||s["!outline"])&&ce(a,147,FC(o,s["!outline"])),ce(a,148,SC(c)),BF(a,s,r.Workbook),FF(a,s),TF(a,s,e,t),NF(a,s),OF(a,s,r,e),CF(a,s),DF(a,s,n),s["!margins"]&&ce(a,476,xF(s["!margins"])),(!t||t.ignoreEC||t.ignoreEC==null)&&AF(a,s),RF(a,s,e,n),ce(a,130),a.end()}function PF(e){var t=[],r=e.match(/^<c:numCache>/),n;(e.match(/<c:pt idx="(\d*)">(.*?)<\/c:pt>/mg)||[]).forEach(function(i){var s=i.match(/<c:pt idx="(\d*?)"><c:v>(.*)<\/c:v><\/c:pt>/);s&&(t[+s[1]]=r?+s[2]:s[2])});var a=Ge((e.match(/<c:formatCode>([\s\S]*?)<\/c:formatCode>/)||["","General"])[1]);return(e.match(/<c:f>(.*?)<\/c:f>/mg)||[]).forEach(function(i){n=i.replace(/<.*?>/g,"")}),[t,a,n]}function LF(e,t,r,n,a,i){var s=i||{"!type":"chart"};if(!e)return i;var o=0,c=0,f="A",u={s:{r:2e6,c:2e6},e:{r:0,c:0}};return(e.match(/<c:numCache>[\s\S]*?<\/c:numCache>/gm)||[]).forEach(function(d){var h=PF(d);u.s.r=u.s.c=0,u.e.c=o,f=dt(o),h[0].forEach(function(p,g){s[f+Et(g)]={t:"n",v:p,z:h[1]},c=g}),u.e.r<c&&(u.e.r=c),++o}),o>0&&(s["!ref"]=Pe(u)),s}function MF(e,t,r,n,a){if(!e)return e;n||(n={"!id":{}});var i={"!type":"chart","!drawel":null,"!rel":""},s,o=e.match(lm);return o&&bc(o[0],i,a,r),(s=e.match(/drawing r:id="(.*?)"/))&&(i["!rel"]=s[1]),n["!id"][i["!rel"]]&&(i["!drawel"]=n["!id"][i["!rel"]]),i}function VF(e,t){e.l+=10;var r=Qt(e);return{name:r}}function UF(e,t,r,n,a){if(!e)return e;n||(n={"!id":{}});var i={"!type":"chart","!drawel":null,"!rel":""},s=!1;return On(e,function(c,f,u){switch(u){case 550:i["!rel"]=c;break;case 651:a.Sheets[r]||(a.Sheets[r]={}),c.name&&(a.Sheets[r].CodeName=c.name);break;case 562:case 652:case 669:case 679:case 551:case 552:case 476:case 3072:break;case 35:s=!0;break;case 36:s=!1;break;case 37:break;case 38:break;default:if(!(f.T>0)){if(!(f.T<0)){if(!s||t.WTF)throw new Error("Unexpected record 0x"+u.toString(16))}}}},t),n["!id"][i["!rel"]]&&(i["!drawel"]=n["!id"][i["!rel"]]),i}var Sc=[["allowRefreshQuery",!1,"bool"],["autoCompressPictures",!0,"bool"],["backupFile",!1,"bool"],["checkCompatibility",!1,"bool"],["CodeName",""],["date1904",!1,"bool"],["defaultThemeVersion",0,"int"],["filterPrivacy",!1,"bool"],["hidePivotFieldList",!1,"bool"],["promptedSolutions",!1,"bool"],["publishItems",!1,"bool"],["refreshAllConnections",!1,"bool"],["saveExternalLinkValues",!0,"bool"],["showBorderUnselectedTables",!0,"bool"],["showInkAnnotation",!0,"bool"],["showObjects","all"],["showPivotChartFilter",!1,"bool"],["updateLinks","userSet"]],$F=[["activeTab",0,"int"],["autoFilterDateGrouping",!0,"bool"],["firstSheet",0,"int"],["minimized",!1,"bool"],["showHorizontalScroll",!0,"bool"],["showSheetTabs",!0,"bool"],["showVerticalScroll",!0,"bool"],["tabRatio",600,"int"],["visibility","visible"]],WF=[],HF=[["calcCompleted","true"],["calcMode","auto"],["calcOnSave","true"],["concurrentCalc","true"],["fullCalcOnLoad","false"],["fullPrecision","true"],["iterate","false"],["iterateCount","100"],["iterateDelta","0.001"],["refMode","A1"]];function dm(e,t){for(var r=0;r!=e.length;++r)for(var n=e[r],a=0;a!=t.length;++a){var i=t[a];if(n[i[0]]==null)n[i[0]]=i[1];else switch(i[2]){case"bool":typeof n[i[0]]=="string"&&(n[i[0]]=ot(n[i[0]]));break;case"int":typeof n[i[0]]=="string"&&(n[i[0]]=parseInt(n[i[0]],10));break}}}function hm(e,t){for(var r=0;r!=t.length;++r){var n=t[r];if(e[n[0]]==null)e[n[0]]=n[1];else switch(n[2]){case"bool":typeof e[n[0]]=="string"&&(e[n[0]]=ot(e[n[0]]));break;case"int":typeof e[n[0]]=="string"&&(e[n[0]]=parseInt(e[n[0]],10));break}}}function mm(e){hm(e.WBProps,Sc),hm(e.CalcPr,HF),dm(e.WBView,$F),dm(e.Sheets,WF),ni.date1904=ot(e.WBProps.date1904)}function jF(e){return!e.Workbook||!e.Workbook.WBProps?"false":ot(e.Workbook.WBProps.date1904)?"true":"false"}var zF="][*?/\\".split("");function pm(e,t){if(e.length>31){if(t)return!1;throw new Error("Sheet names cannot exceed 31 chars")}var r=!0;return zF.forEach(function(n){if(e.indexOf(n)!=-1){if(!t)throw new Error("Sheet name cannot contain : \\ / ? * [ ]");r=!1}}),r}function GF(e,t,r){e.forEach(function(n,a){pm(n);for(var i=0;i<a;++i)if(n==e[i])throw new Error("Duplicate Sheet Name: "+n);if(r){var s=t&&t[a]&&t[a].CodeName||n;if(s.charCodeAt(0)==95&&s.length>22)throw new Error("Bad Code Name: Worksheet"+s)}})}function XF(e){if(!e||!e.SheetNames||!e.Sheets)throw new Error("Invalid Workbook");if(!e.SheetNames.length)throw new Error("Workbook is empty");var t=e.Workbook&&e.Workbook.Sheets||[];GF(e.SheetNames,t,!!e.vbaraw);for(var r=0;r<e.SheetNames.length;++r)jT(e.Sheets[e.SheetNames[r]],e.SheetNames[r],r)}var KF=/<\w+:workbook/;function YF(e,t){if(!e)throw new Error("Could not find file");var r={AppVersion:{},WBProps:{},WBView:[],Sheets:[],CalcPr:{},Names:[],xmlns:""},n=!1,a="xmlns",i={},s=0;if(e.replace(Jt,function(c,f){var u=Oe(c);switch(pn(u[0])){case"<?xml":break;case"<workbook":c.match(KF)&&(a="xmlns"+c.match(/<(\w+):/)[1]),r.xmlns=u[a];break;case"</workbook>":break;case"<fileVersion":delete u[0],r.AppVersion=u;break;case"<fileVersion/>":case"</fileVersion>":break;case"<fileSharing":break;case"<fileSharing/>":break;case"<workbookPr":case"<workbookPr/>":Sc.forEach(function(d){if(u[d[0]]!=null)switch(d[2]){case"bool":r.WBProps[d[0]]=ot(u[d[0]]);break;case"int":r.WBProps[d[0]]=parseInt(u[d[0]],10);break;default:r.WBProps[d[0]]=u[d[0]]}}),u.codeName&&(r.WBProps.CodeName=nt(u.codeName));break;case"</workbookPr>":break;case"<workbookProtection":break;case"<workbookProtection/>":break;case"<bookViews":case"<bookViews>":case"</bookViews>":break;case"<workbookView":case"<workbookView/>":delete u[0],r.WBView.push(u);break;case"</workbookView>":break;case"<sheets":case"<sheets>":case"</sheets>":break;case"<sheet":switch(u.state){case"hidden":u.Hidden=1;break;case"veryHidden":u.Hidden=2;break;default:u.Hidden=0}delete u.state,u.name=Ge(nt(u.name)),delete u[0],r.Sheets.push(u);break;case"</sheet>":break;case"<functionGroups":case"<functionGroups/>":break;case"<functionGroup":break;case"<externalReferences":case"</externalReferences>":case"<externalReferences>":break;case"<externalReference":break;case"<definedNames/>":break;case"<definedNames>":case"<definedNames":n=!0;break;case"</definedNames>":n=!1;break;case"<definedName":i={},i.Name=nt(u.name),u.comment&&(i.Comment=u.comment),u.localSheetId&&(i.Sheet=+u.localSheetId),ot(u.hidden||"0")&&(i.Hidden=!0),s=f+c.length;break;case"</definedName>":i.Ref=Ge(nt(e.slice(s,f))),r.Names.push(i);break;case"<definedName/>":break;case"<calcPr":delete u[0],r.CalcPr=u;break;case"<calcPr/>":delete u[0],r.CalcPr=u;break;case"</calcPr>":break;case"<oleSize":break;case"<customWorkbookViews>":case"</customWorkbookViews>":case"<customWorkbookViews":break;case"<customWorkbookView":case"</customWorkbookView>":break;case"<pivotCaches>":case"</pivotCaches>":case"<pivotCaches":break;case"<pivotCache":break;case"<smartTagPr":case"<smartTagPr/>":break;case"<smartTagTypes":case"<smartTagTypes>":case"</smartTagTypes>":break;case"<smartTagType":break;case"<webPublishing":case"<webPublishing/>":break;case"<fileRecoveryPr":case"<fileRecoveryPr/>":break;case"<webPublishObjects>":case"<webPublishObjects":case"</webPublishObjects>":break;case"<webPublishObject":break;case"<extLst":case"<extLst>":case"</extLst>":case"<extLst/>":break;case"<ext":n=!0;break;case"</ext>":n=!1;break;case"<ArchID":break;case"<AlternateContent":case"<AlternateContent>":n=!0;break;case"</AlternateContent>":n=!1;break;case"<revisionPtr":break;default:if(!n&&t.WTF)throw new Error("unrecognized "+u[0]+" in workbook")}return c}),ma.indexOf(r.xmlns)===-1)throw new Error("Unknown Namespace: "+r.xmlns);return mm(r),r}function gm(e){var t=[kt];t[t.length]=me("workbook",null,{xmlns:ma[0],"xmlns:r":It.r});var r=e.Workbook&&(e.Workbook.Names||[]).length>0,n={codeName:"ThisWorkbook"};e.Workbook&&e.Workbook.WBProps&&(Sc.forEach(function(o){e.Workbook.WBProps[o[0]]!=null&&e.Workbook.WBProps[o[0]]!=o[1]&&(n[o[0]]=e.Workbook.WBProps[o[0]])}),e.Workbook.WBProps.CodeName&&(n.codeName=e.Workbook.WBProps.CodeName,delete n.CodeName)),t[t.length]=me("workbookPr",null,n);var a=e.Workbook&&e.Workbook.Sheets||[],i=0;if(a&&a[0]&&a[0].Hidden){for(t[t.length]="<bookViews>",i=0;i!=e.SheetNames.length&&!(!a[i]||!a[i].Hidden);++i);i==e.SheetNames.length&&(i=0),t[t.length]='<workbookView firstSheet="'+i+'" activeTab="'+i+'"/>',t[t.length]="</bookViews>"}for(t[t.length]="<sheets>",i=0;i!=e.SheetNames.length;++i){var s={name:Qe(e.SheetNames[i].slice(0,31))};if(s.sheetId=""+(i+1),s["r:id"]="rId"+(i+1),a[i])switch(a[i].Hidden){case 1:s.state="hidden";break;case 2:s.state="veryHidden";break}t[t.length]=me("sheet",null,s)}return t[t.length]="</sheets>",r&&(t[t.length]="<definedNames>",e.Workbook&&e.Workbook.Names&&e.Workbook.Names.forEach(function(o){var c={name:o.Name};o.Comment&&(c.comment=o.Comment),o.Sheet!=null&&(c.localSheetId=""+o.Sheet),o.Hidden&&(c.hidden="1"),o.Ref&&(t[t.length]=me("definedName",Qe(o.Ref),c))}),t[t.length]="</definedNames>"),t.length>2&&(t[t.length]="</workbook>",t[1]=t[1].replace("/>",">")),t.join("")}function qF(e,t){var r={};return r.Hidden=e.read_shift(4),r.iTabID=e.read_shift(4),r.strRelID=Jl(e),r.name=Qt(e),r}function JF(e,t){return t||(t=ne(127)),t.write_shift(4,e.Hidden),t.write_shift(4,e.iTabID),Zl(e.strRelID,t),$t(e.name.slice(0,31),t),t.length>t.l?t.slice(0,t.l):t}function ZF(e,t){var r={},n=e.read_shift(4);r.defaultThemeVersion=e.read_shift(4);var a=t>8?Qt(e):"";return a.length>0&&(r.CodeName=a),r.autoCompressPictures=!!(n&65536),r.backupFile=!!(n&64),r.checkCompatibility=!!(n&4096),r.date1904=!!(n&1),r.filterPrivacy=!!(n&8),r.hidePivotFieldList=!!(n&1024),r.promptedSolutions=!!(n&16),r.publishItems=!!(n&2048),r.refreshAllConnections=!!(n&262144),r.saveExternalLinkValues=!!(n&128),r.showBorderUnselectedTables=!!(n&4),r.showInkAnnotation=!!(n&32),r.showObjects=["all","placeholders","none"][n>>13&3],r.showPivotChartFilter=!!(n&32768),r.updateLinks=["userSet","never","always"][n>>8&3],r}function QF(e,t){t||(t=ne(72));var r=0;return e&&e.filterPrivacy&&(r|=8),t.write_shift(4,r),t.write_shift(4,0),Nd(e&&e.CodeName||"ThisWorkbook",t),t.slice(0,t.l)}function e4(e,t){var r={};return e.read_shift(4),r.ArchID=e.read_shift(4),e.l+=t-8,r}function t4(e,t,r){var n=e.l+t;e.l+=4,e.l+=1;var a=e.read_shift(4),i=R_(e),s=MT(e,0,r),o=ql(e);e.l=n;var c={Name:i,Ptg:s};return a<268435455&&(c.Sheet=a),o&&(c.Comment=o),c}function r4(e,t){var r={AppVersion:{},WBProps:{},WBView:[],Sheets:[],CalcPr:{},xmlns:""},n=[],a=!1;t||(t={}),t.biff=12;var i=[],s=[[]];return s.SheetNames=[],s.XTI=[],us[16]={n:"BrtFRTArchID$",f:e4},On(e,function(c,f,u){switch(u){case 156:s.SheetNames.push(c.name),r.Sheets.push(c);break;case 153:r.WBProps=c;break;case 39:c.Sheet!=null&&(t.SID=c.Sheet),c.Ref=nr(c.Ptg,null,null,s,t),delete t.SID,delete c.Ptg,i.push(c);break;case 1036:break;case 357:case 358:case 355:case 667:s[0].length?s.push([u,c]):s[0]=[u,c],s[s.length-1].XTI=[];break;case 362:s.length===0&&(s[0]=[],s[0].XTI=[]),s[s.length-1].XTI=s[s.length-1].XTI.concat(c),s.XTI=s.XTI.concat(c);break;case 361:break;case 2071:case 158:case 143:case 664:case 353:break;case 3072:case 3073:case 534:case 677:case 157:case 610:case 2050:case 155:case 548:case 676:case 128:case 665:case 2128:case 2125:case 549:case 2053:case 596:case 2076:case 2075:case 2082:case 397:case 154:case 1117:case 553:case 2091:break;case 35:n.push(u),a=!0;break;case 36:n.pop(),a=!1;break;case 37:n.push(u),a=!0;break;case 38:n.pop(),a=!1;break;case 16:break;default:if(!f.T){if(!a||t.WTF&&n[n.length-1]!=37&&n[n.length-1]!=35)throw new Error("Unexpected record 0x"+u.toString(16))}}},t),mm(r),r.Names=i,r.supbooks=s,r}function n4(e,t){ce(e,143);for(var r=0;r!=t.SheetNames.length;++r){var n=t.Workbook&&t.Workbook.Sheets&&t.Workbook.Sheets[r]&&t.Workbook.Sheets[r].Hidden||0,a={Hidden:n,iTabID:r+1,strRelID:"rId"+(r+1),name:t.SheetNames[r]};ce(e,156,JF(a))}ce(e,144)}function a4(e,t){t||(t=ne(127));for(var r=0;r!=4;++r)t.write_shift(4,0);return $t("SheetJS",t),$t(Qs.version,t),$t(Qs.version,t),$t("7262",t),t.length>t.l?t.slice(0,t.l):t}function i4(e,t){t||(t=ne(29)),t.write_shift(-4,0),t.write_shift(-4,460),t.write_shift(4,28800),t.write_shift(4,17600),t.write_shift(4,500),t.write_shift(4,e),t.write_shift(4,e);var r=120;return t.write_shift(1,r),t.length>t.l?t.slice(0,t.l):t}function s4(e,t){if(!(!t.Workbook||!t.Workbook.Sheets)){for(var r=t.Workbook.Sheets,n=0,a=-1,i=-1;n<r.length;++n)!r[n]||!r[n].Hidden&&a==-1?a=n:r[n].Hidden==1&&i==-1&&(i=n);i>a||(ce(e,135),ce(e,158,i4(a)),ce(e,136))}}function o4(e,t){var r=pr();return ce(r,131),ce(r,128,a4()),ce(r,153,QF(e.Workbook&&e.Workbook.WBProps||null)),s4(r,e),n4(r,e),ce(r,132),r.end()}function l4(e,t,r){return t.slice(-4)===".bin"?r4(e,r):YF(e,r)}function c4(e,t,r,n,a,i,s,o){return t.slice(-4)===".bin"?bF(e,n,r,a,i,s,o):tC(e,n,r,a,i,s,o)}function f4(e,t,r,n,a,i,s,o){return t.slice(-4)===".bin"?UF(e,n,r,a,i):MF(e,n,r,a,i)}function u4(e,t,r,n,a,i,s,o){return t.slice(-4)===".bin"?hS():mS()}function d4(e,t,r,n,a,i,s,o){return t.slice(-4)===".bin"?uS():dS()}function h4(e,t,r,n){return t.slice(-4)===".bin"?lb(e,r,n):qE(e,r,n)}function m4(e,t,r){return Wh(e,r)}function p4(e,t,r){return t.slice(-4)===".bin"?pE(e,r):dE(e,r)}function g4(e,t,r){return t.slice(-4)===".bin"?sS(e,r):Jb(e,r)}function x4(e,t,r){return t.slice(-4)===".bin"?Kb(e):Gb(e)}function v4(e,t,r,n){return r.slice(-4)===".bin"?Yb(e,t,r,n):void 0}function w4(e,t,r){return t.slice(-4)===".bin"?Hb(e,t,r):zb(e,t,r)}function _4(e,t,r){return(t.slice(-4)===".bin"?o4:gm)(e)}function y4(e,t,r,n,a){return(t.slice(-4)===".bin"?IF:cm)(e,r,n,a)}function k4(e,t,r){return(t.slice(-4)===".bin"?vb:Vh)(e,r)}function E4(e,t,r){return(t.slice(-4)===".bin"?vE:Rh)(e,r)}function b4(e,t,r){return(t.slice(-4)===".bin"?oS:Gh)(e)}function S4(e){return(e.slice(-4)===".bin"?jb:Hh)()}var xm=/([\w:]+)=((?:")([^"]*)(?:")|(?:')([^']*)(?:'))/g,vm=/([\w:]+)=((?:")(?:[^"]*)(?:")|(?:')(?:[^']*)(?:'))/;function Qr(e,t){var r=e.split(/\s+/),n=[];if(t||(n[0]=r[0]),r.length===1)return n;var a=e.match(xm),i,s,o,c;if(a)for(c=0;c!=a.length;++c)i=a[c].match(vm),(s=i[1].indexOf(":"))===-1?n[i[1]]=i[2].slice(1,i[2].length-1):(i[1].slice(0,6)==="xmlns:"?o="xmlns"+i[1].slice(6):o=i[1].slice(s+1),n[o]=i[2].slice(1,i[2].length-1));return n}function T4(e){var t=e.split(/\s+/),r={};if(t.length===1)return r;var n=e.match(xm),a,i,s,o;if(n)for(o=0;o!=n.length;++o)a=n[o].match(vm),(i=a[1].indexOf(":"))===-1?r[a[1]]=a[2].slice(1,a[2].length-1):(a[1].slice(0,6)==="xmlns:"?s="xmlns"+a[1].slice(6):s=a[1].slice(i+1),r[s]=a[2].slice(1,a[2].length-1));return r}var cs;function C4(e,t){var r=cs[e]||Ge(e);return r==="General"?ua(t):Sr(r,t)}function F4(e,t,r,n){var a=n;switch((r[0].match(/dt:dt="([\w.]+)"/)||["",""])[1]){case"boolean":a=ot(n);break;case"i2":case"int":a=parseInt(n,10);break;case"r4":case"float":a=parseFloat(n);break;case"date":case"dateTime.tz":a=it(n);break;case"i8":case"string":case"fixed":case"uuid":case"bin.base64":break;default:throw new Error("bad custprop:"+r[0])}e[Ge(t)]=a}function A4(e,t,r){if(e.t!=="z"){if(!r||r.cellText!==!1)try{e.t==="e"?e.w=e.w||Nn[e.v]:t==="General"?e.t==="n"?(e.v|0)===e.v?e.w=e.v.toString(10):e.w=Mi(e.v):e.w=ua(e.v):e.w=C4(t||"General",e.v)}catch(i){if(r.WTF)throw i}try{var n=cs[t]||t||"General";if(r.cellNF&&(e.z=n),r.cellDates&&e.t=="n"&&da(n)){var a=Yn(e.v);a&&(e.t="d",e.v=new Date(a.y,a.m-1,a.d,a.H,a.M,a.S,a.u))}}catch(i){if(r.WTF)throw i}}}function D4(e,t,r){if(r.cellStyles&&t.Interior){var n=t.Interior;n.Pattern&&(n.patternType=WE[n.Pattern]||n.Pattern)}e[t.ID]=t}function R4(e,t,r,n,a,i,s,o,c,f){var u="General",d=n.StyleID,h={};f=f||{};var p=[],g=0;for(d===void 0&&o&&(d=o.StyleID),d===void 0&&s&&(d=s.StyleID);i[d]!==void 0&&(i[d].nf&&(u=i[d].nf),i[d].Interior&&p.push(i[d].Interior),!!i[d].Parent);)d=i[d].Parent;switch(r.Type){case"Boolean":n.t="b",n.v=ot(e);break;case"String":n.t="s",n.r=od(Ge(e)),n.v=e.indexOf("<")>-1?Ge(t||e).replace(/<.*?>/g,""):n.r;break;case"DateTime":e.slice(-1)!="Z"&&(e+="Z"),n.v=(it(e)-new Date(Date.UTC(1899,11,30)))/(24*60*60*1e3),n.v!==n.v?n.v=Ge(e):n.v<60&&(n.v=n.v-1),(!u||u=="General")&&(u="yyyy-mm-dd");case"Number":n.v===void 0&&(n.v=+e),n.t||(n.t="n");break;case"Error":n.t="e",n.v=$d[e],f.cellText!==!1&&(n.w=e);break;default:e==""&&t==""?n.t="z":(n.t="s",n.v=od(t||e));break}if(A4(n,u,f),f.cellFormula!==!1)if(n.Formula){var m=Ge(n.Formula);m.charCodeAt(0)==61&&(m=m.slice(1)),n.f=ri(m,a),delete n.Formula,n.ArrayRange=="RC"?n.F=ri("RC:RC",a):n.ArrayRange&&(n.F=ri(n.ArrayRange,a),c.push([Xe(n.F),n.F]))}else for(g=0;g<c.length;++g)a.r>=c[g][0].s.r&&a.r<=c[g][0].e.r&&a.c>=c[g][0].s.c&&a.c<=c[g][0].e.c&&(n.F=c[g][1]);f.cellStyles&&(p.forEach(function(x){!h.patternType&&x.patternType&&(h.patternType=x.patternType)}),n.s=h),n.StyleID!==void 0&&(n.ixfe=n.StyleID)}function O4(e){e.t=e.v||"",e.t=e.t.replace(/\r\n/g,`
`).replace(/\r/g,`
`),e.v=e.w=e.ixfe=void 0}function Tc(e,t){var r=t||{};Xa();var n=Ii(Hl(e));(r.type=="binary"||r.type=="array"||r.type=="base64")&&(n=nt(n));var a=n.slice(0,1024).toLowerCase(),i=!1;if(a=a.replace(/".*?"/g,""),(a.indexOf(">")&1023)>Math.min(a.indexOf(",")&1023,a.indexOf(";")&1023)){var s=st(r);return s.type="string",Qa.to_workbook(n,s)}if(a.indexOf("<?xml")==-1&&["html","table","head","meta","script","style","div"].forEach(function(mt){a.indexOf("<"+mt)>=0&&(i=!0)}),i)return xA(n,r);cs={"General Number":"General","General Date":Ce[22],"Long Date":"dddd, mmmm dd, yyyy","Medium Date":Ce[15],"Short Date":Ce[14],"Long Time":Ce[19],"Medium Time":Ce[18],"Short Time":Ce[20],Currency:'"$"#,##0.00_);[Red]\\("$"#,##0.00\\)',Fixed:Ce[2],Standard:Ce[4],Percent:Ce[10],Scientific:Ce[11],"Yes/No":'"Yes";"Yes";"No";@',"True/False":'"True";"True";"False";@',"On/Off":'"Yes";"Yes";"No";@'};var o,c=[],f,u={},d=[],h=r.dense?[]:{},p="",g={},m={},x=Qr('<Data ss:Type="String">'),v=0,y=0,_=0,b={s:{r:2e6,c:2e6},e:{r:0,c:0}},D={},C={},k="",F=0,O=[],X={},j={},I=0,G=[],re=[],ae={},oe=[],fe,ke=!1,H=[],le=[],B={},w=0,S=0,T={Sheets:[],WBProps:{date1904:!1}},R={};ji.lastIndex=0,n=n.replace(/<!--([\s\S]*?)-->/mg,"");for(var W="";o=ji.exec(n);)switch(o[3]=(W=o[3]).toLowerCase()){case"data":if(W=="data"){if(o[1]==="/"){if((f=c.pop())[0]!==o[3])throw new Error("Bad state: "+f.join("|"))}else o[0].charAt(o[0].length-2)!=="/"&&c.push([o[3],!0]);break}if(c[c.length-1][1])break;o[1]==="/"?R4(n.slice(v,o.index),k,x,c[c.length-1][0]=="comment"?ae:g,{c:y,r:_},D,oe[y],m,H,r):(k="",x=Qr(o[0]),v=o.index+o[0].length);break;case"cell":if(o[1]==="/")if(re.length>0&&(g.c=re),(!r.sheetRows||r.sheetRows>_)&&g.v!==void 0&&(r.dense?(h[_]||(h[_]=[]),h[_][y]=g):h[dt(y)+Et(_)]=g),g.HRef&&(g.l={Target:Ge(g.HRef)},g.HRefScreenTip&&(g.l.Tooltip=g.HRefScreenTip),delete g.HRef,delete g.HRefScreenTip),(g.MergeAcross||g.MergeDown)&&(w=y+(parseInt(g.MergeAcross,10)|0),S=_+(parseInt(g.MergeDown,10)|0),O.push({s:{c:y,r:_},e:{c:w,r:S}})),!r.sheetStubs)g.MergeAcross?y=w+1:++y;else if(g.MergeAcross||g.MergeDown){for(var Y=y;Y<=w;++Y)for(var q=_;q<=S;++q)(Y>y||q>_)&&(r.dense?(h[q]||(h[q]=[]),h[q][Y]={t:"z"}):h[dt(Y)+Et(q)]={t:"z"});y=w+1}else++y;else g=T4(o[0]),g.Index&&(y=+g.Index-1),y<b.s.c&&(b.s.c=y),y>b.e.c&&(b.e.c=y),o[0].slice(-2)==="/>"&&++y,re=[];break;case"row":o[1]==="/"||o[0].slice(-2)==="/>"?(_<b.s.r&&(b.s.r=_),_>b.e.r&&(b.e.r=_),o[0].slice(-2)==="/>"&&(m=Qr(o[0]),m.Index&&(_=+m.Index-1)),y=0,++_):(m=Qr(o[0]),m.Index&&(_=+m.Index-1),B={},(m.AutoFitHeight=="0"||m.Height)&&(B.hpx=parseInt(m.Height,10),B.hpt=rs(B.hpx),le[_]=B),m.Hidden=="1"&&(B.hidden=!0,le[_]=B));break;case"worksheet":if(o[1]==="/"){if((f=c.pop())[0]!==o[3])throw new Error("Bad state: "+f.join("|"));d.push(p),b.s.r<=b.e.r&&b.s.c<=b.e.c&&(h["!ref"]=Pe(b),r.sheetRows&&r.sheetRows<=b.e.r&&(h["!fullref"]=h["!ref"],b.e.r=r.sheetRows-1,h["!ref"]=Pe(b))),O.length&&(h["!merges"]=O),oe.length>0&&(h["!cols"]=oe),le.length>0&&(h["!rows"]=le),u[p]=h}else b={s:{r:2e6,c:2e6},e:{r:0,c:0}},_=y=0,c.push([o[3],!1]),f=Qr(o[0]),p=Ge(f.Name),h=r.dense?[]:{},O=[],H=[],le=[],R={name:p,Hidden:0},T.Sheets.push(R);break;case"table":if(o[1]==="/"){if((f=c.pop())[0]!==o[3])throw new Error("Bad state: "+f.join("|"))}else{if(o[0].slice(-2)=="/>")break;c.push([o[3],!1]),oe=[],ke=!1}break;case"style":o[1]==="/"?D4(D,C,r):C=Qr(o[0]);break;case"numberformat":C.nf=Ge(Qr(o[0]).Format||"General"),cs[C.nf]&&(C.nf=cs[C.nf]);for(var K=0;K!=392&&Ce[K]!=C.nf;++K);if(K==392){for(K=57;K!=392;++K)if(Ce[K]==null){mn(C.nf,K);break}}break;case"column":if(c[c.length-1][0]!=="table")break;if(fe=Qr(o[0]),fe.Hidden&&(fe.hidden=!0,delete fe.Hidden),fe.Width&&(fe.wpx=parseInt(fe.Width,10)),!ke&&fe.wpx>10){ke=!0,rr=Lh;for(var ee=0;ee<oe.length;++ee)oe[ee]&&Qn(oe[ee])}ke&&Qn(fe),oe[fe.Index-1||oe.length]=fe;for(var ye=0;ye<+fe.Span;++ye)oe[oe.length]=st(fe);break;case"namedrange":if(o[1]==="/")break;T.Names||(T.Names=[]);var M=Oe(o[0]),Ke={Name:M.Name,Ref:ri(M.RefersTo.slice(1),{r:0,c:0})};T.Sheets.length>0&&(Ke.Sheet=T.Sheets.length-1),T.Names.push(Ke);break;case"namedcell":break;case"b":break;case"i":break;case"u":break;case"s":break;case"em":break;case"h2":break;case"h3":break;case"sub":break;case"sup":break;case"span":break;case"alignment":break;case"borders":break;case"border":break;case"font":if(o[0].slice(-2)==="/>")break;o[1]==="/"?k+=n.slice(F,o.index):F=o.index+o[0].length;break;case"interior":if(!r.cellStyles)break;C.Interior=Qr(o[0]);break;case"protection":break;case"author":case"title":case"description":case"created":case"keywords":case"subject":case"category":case"company":case"lastauthor":case"lastsaved":case"lastprinted":case"version":case"revision":case"totaltime":case"hyperlinkbase":case"manager":case"contentstatus":case"identifier":case"language":case"appname":if(o[0].slice(-2)==="/>")break;o[1]==="/"?ry(X,W,n.slice(I,o.index)):I=o.index+o[0].length;break;case"paragraphs":break;case"styles":case"workbook":if(o[1]==="/"){if((f=c.pop())[0]!==o[3])throw new Error("Bad state: "+f.join("|"))}else c.push([o[3],!1]);break;case"comment":if(o[1]==="/"){if((f=c.pop())[0]!==o[3])throw new Error("Bad state: "+f.join("|"));O4(ae),re.push(ae)}else c.push([o[3],!1]),f=Qr(o[0]),ae={a:f.Author};break;case"autofilter":if(o[1]==="/"){if((f=c.pop())[0]!==o[3])throw new Error("Bad state: "+f.join("|"))}else if(o[0].charAt(o[0].length-2)!=="/"){var Le=Qr(o[0]);h["!autofilter"]={ref:ri(Le.Range).replace(/\$/g,"")},c.push([o[3],!0])}break;case"name":break;case"datavalidation":if(o[1]==="/"){if((f=c.pop())[0]!==o[3])throw new Error("Bad state: "+f.join("|"))}else o[0].charAt(o[0].length-2)!=="/"&&c.push([o[3],!0]);break;case"pixelsperinch":break;case"componentoptions":case"documentproperties":case"customdocumentproperties":case"officedocumentsettings":case"pivottable":case"pivotcache":case"names":case"mapinfo":case"pagebreaks":case"querytable":case"sorting":case"schema":case"conditionalformatting":case"smarttagtype":case"smarttags":case"excelworkbook":case"workbookoptions":case"worksheetoptions":if(o[1]==="/"){if((f=c.pop())[0]!==o[3])throw new Error("Bad state: "+f.join("|"))}else o[0].charAt(o[0].length-2)!=="/"&&c.push([o[3],!0]);break;case"null":break;default:if(c.length==0&&o[3]=="document"||c.length==0&&o[3]=="uof")return Dm(n,r);var Ye=!0;switch(c[c.length-1][0]){case"officedocumentsettings":switch(o[3]){case"allowpng":break;case"removepersonalinformation":break;case"downloadcomponents":break;case"locationofcomponents":break;case"colors":break;case"color":break;case"index":break;case"rgb":break;case"targetscreensize":break;case"readonlyrecommended":break;default:Ye=!1}break;case"componentoptions":switch(o[3]){case"toolbar":break;case"hideofficelogo":break;case"spreadsheetautofit":break;case"label":break;case"caption":break;case"maxheight":break;case"maxwidth":break;case"nextsheetnumber":break;default:Ye=!1}break;case"excelworkbook":switch(o[3]){case"date1904":T.WBProps.date1904=!0;break;case"windowheight":break;case"windowwidth":break;case"windowtopx":break;case"windowtopy":break;case"tabratio":break;case"protectstructure":break;case"protectwindow":break;case"protectwindows":break;case"activesheet":break;case"displayinknotes":break;case"firstvisiblesheet":break;case"supbook":break;case"sheetname":break;case"sheetindex":break;case"sheetindexfirst":break;case"sheetindexlast":break;case"dll":break;case"acceptlabelsinformulas":break;case"donotsavelinkvalues":break;case"iteration":break;case"maxiterations":break;case"maxchange":break;case"path":break;case"xct":break;case"count":break;case"selectedsheets":break;case"calculation":break;case"uncalced":break;case"startupprompt":break;case"crn":break;case"externname":break;case"formula":break;case"colfirst":break;case"collast":break;case"wantadvise":break;case"boolean":break;case"error":break;case"text":break;case"ole":break;case"noautorecover":break;case"publishobjects":break;case"donotcalculatebeforesave":break;case"number":break;case"refmoder1c1":break;case"embedsavesmarttags":break;default:Ye=!1}break;case"workbookoptions":switch(o[3]){case"owcversion":break;case"height":break;case"width":break;default:Ye=!1}break;case"worksheetoptions":switch(o[3]){case"visible":if(o[0].slice(-2)!=="/>")if(o[1]==="/")switch(n.slice(I,o.index)){case"SheetHidden":R.Hidden=1;break;case"SheetVeryHidden":R.Hidden=2;break}else I=o.index+o[0].length;break;case"header":h["!margins"]||Ca(h["!margins"]={},"xlml"),isNaN(+Oe(o[0]).Margin)||(h["!margins"].header=+Oe(o[0]).Margin);break;case"footer":h["!margins"]||Ca(h["!margins"]={},"xlml"),isNaN(+Oe(o[0]).Margin)||(h["!margins"].footer=+Oe(o[0]).Margin);break;case"pagemargins":var $e=Oe(o[0]);h["!margins"]||Ca(h["!margins"]={},"xlml"),isNaN(+$e.Top)||(h["!margins"].top=+$e.Top),isNaN(+$e.Left)||(h["!margins"].left=+$e.Left),isNaN(+$e.Right)||(h["!margins"].right=+$e.Right),isNaN(+$e.Bottom)||(h["!margins"].bottom=+$e.Bottom);break;case"displayrighttoleft":T.Views||(T.Views=[]),T.Views[0]||(T.Views[0]={}),T.Views[0].RTL=!0;break;case"freezepanes":break;case"frozennosplit":break;case"splithorizontal":case"splitvertical":break;case"donotdisplaygridlines":break;case"activerow":break;case"activecol":break;case"toprowbottompane":break;case"leftcolumnrightpane":break;case"unsynced":break;case"print":break;case"printerrors":break;case"panes":break;case"scale":break;case"pane":break;case"number":break;case"layout":break;case"pagesetup":break;case"selected":break;case"protectobjects":break;case"enableselection":break;case"protectscenarios":break;case"validprinterinfo":break;case"horizontalresolution":break;case"verticalresolution":break;case"numberofcopies":break;case"activepane":break;case"toprowvisible":break;case"leftcolumnvisible":break;case"fittopage":break;case"rangeselection":break;case"papersizeindex":break;case"pagelayoutzoom":break;case"pagebreakzoom":break;case"filteron":break;case"fitwidth":break;case"fitheight":break;case"commentslayout":break;case"zoom":break;case"lefttoright":break;case"gridlines":break;case"allowsort":break;case"allowfilter":break;case"allowinsertrows":break;case"allowdeleterows":break;case"allowinsertcols":break;case"allowdeletecols":break;case"allowinserthyperlinks":break;case"allowformatcells":break;case"allowsizecols":break;case"allowsizerows":break;case"nosummaryrowsbelowdetail":h["!outline"]||(h["!outline"]={}),h["!outline"].above=!0;break;case"tabcolorindex":break;case"donotdisplayheadings":break;case"showpagelayoutzoom":break;case"nosummarycolumnsrightdetail":h["!outline"]||(h["!outline"]={}),h["!outline"].left=!0;break;case"blackandwhite":break;case"donotdisplayzeros":break;case"displaypagebreak":break;case"rowcolheadings":break;case"donotdisplayoutline":break;case"noorientation":break;case"allowusepivottables":break;case"zeroheight":break;case"viewablerange":break;case"selection":break;case"protectcontents":break;default:Ye=!1}break;case"pivottable":case"pivotcache":switch(o[3]){case"immediateitemsondrop":break;case"showpagemultipleitemlabel":break;case"compactrowindent":break;case"location":break;case"pivotfield":break;case"orientation":break;case"layoutform":break;case"layoutsubtotallocation":break;case"layoutcompactrow":break;case"position":break;case"pivotitem":break;case"datatype":break;case"datafield":break;case"sourcename":break;case"parentfield":break;case"ptlineitems":break;case"ptlineitem":break;case"countofsameitems":break;case"item":break;case"itemtype":break;case"ptsource":break;case"cacheindex":break;case"consolidationreference":break;case"filename":break;case"reference":break;case"nocolumngrand":break;case"norowgrand":break;case"blanklineafteritems":break;case"hidden":break;case"subtotal":break;case"basefield":break;case"mapchilditems":break;case"function":break;case"refreshonfileopen":break;case"printsettitles":break;case"mergelabels":break;case"defaultversion":break;case"refreshname":break;case"refreshdate":break;case"refreshdatecopy":break;case"versionlastrefresh":break;case"versionlastupdate":break;case"versionupdateablemin":break;case"versionrefreshablemin":break;case"calculation":break;default:Ye=!1}break;case"pagebreaks":switch(o[3]){case"colbreaks":break;case"colbreak":break;case"rowbreaks":break;case"rowbreak":break;case"colstart":break;case"colend":break;case"rowend":break;default:Ye=!1}break;case"autofilter":switch(o[3]){case"autofiltercolumn":break;case"autofiltercondition":break;case"autofilterand":break;case"autofilteror":break;default:Ye=!1}break;case"querytable":switch(o[3]){case"id":break;case"autoformatfont":break;case"autoformatpattern":break;case"querysource":break;case"querytype":break;case"enableredirections":break;case"refreshedinxl9":break;case"urlstring":break;case"htmltables":break;case"connection":break;case"commandtext":break;case"refreshinfo":break;case"notitles":break;case"nextid":break;case"columninfo":break;case"overwritecells":break;case"donotpromptforfile":break;case"textwizardsettings":break;case"source":break;case"number":break;case"decimal":break;case"thousandseparator":break;case"trailingminusnumbers":break;case"formatsettings":break;case"fieldtype":break;case"delimiters":break;case"tab":break;case"comma":break;case"autoformatname":break;case"versionlastedit":break;case"versionlastrefresh":break;default:Ye=!1}break;case"datavalidation":switch(o[3]){case"range":break;case"type":break;case"min":break;case"max":break;case"sort":break;case"descending":break;case"order":break;case"casesensitive":break;case"value":break;case"errorstyle":break;case"errormessage":break;case"errortitle":break;case"inputmessage":break;case"inputtitle":break;case"combohide":break;case"inputhide":break;case"condition":break;case"qualifier":break;case"useblank":break;case"value1":break;case"value2":break;case"format":break;case"cellrangelist":break;default:Ye=!1}break;case"sorting":case"conditionalformatting":switch(o[3]){case"range":break;case"type":break;case"min":break;case"max":break;case"sort":break;case"descending":break;case"order":break;case"casesensitive":break;case"value":break;case"errorstyle":break;case"errormessage":break;case"errortitle":break;case"cellrangelist":break;case"inputmessage":break;case"inputtitle":break;case"combohide":break;case"inputhide":break;case"condition":break;case"qualifier":break;case"useblank":break;case"value1":break;case"value2":break;case"format":break;default:Ye=!1}break;case"mapinfo":case"schema":case"data":switch(o[3]){case"map":break;case"entry":break;case"range":break;case"xpath":break;case"field":break;case"xsdtype":break;case"filteron":break;case"aggregate":break;case"elementtype":break;case"attributetype":break;case"schema":case"element":case"complextype":case"datatype":case"all":case"attribute":case"extends":break;case"row":break;default:Ye=!1}break;case"smarttags":break;default:Ye=!1;break}if(Ye||o[3].match(/!\[CDATA/))break;if(!c[c.length-1][1])throw"Unrecognized tag: "+o[3]+"|"+c.join("|");if(c[c.length-1][0]==="customdocumentproperties"){if(o[0].slice(-2)==="/>")break;o[1]==="/"?F4(j,W,G,n.slice(I,o.index)):(G=o,I=o.index+o[0].length);break}if(r.WTF)throw"Unrecognized tag: "+o[3]+"|"+c.join("|")}var ve={};return!r.bookSheets&&!r.bookProps&&(ve.Sheets=u),ve.SheetNames=d,ve.Workbook=T,ve.SSF=st(Ce),ve.Props=X,ve.Custprops=j,ve}function Cc(e,t){switch(Nc(t=t||{}),t.type||"base64"){case"base64":return Tc(Er(e),t);case"binary":case"buffer":case"file":return Tc(e,t);case"array":return Tc(Kn(e),t)}}function B4(e,t){var r=[];return e.Props&&r.push(ny(e.Props,t)),e.Custprops&&r.push(ay(e.Props,e.Custprops)),r.join("")}function N4(){return""}function I4(e,t){var r=['<Style ss:ID="Default" ss:Name="Normal"><NumberFormat/></Style>'];return t.cellXfs.forEach(function(n,a){var i=[];i.push(me("NumberFormat",null,{"ss:Format":Qe(Ce[n.numFmtId])}));var s={"ss:ID":"s"+(21+a)};r.push(me("Style",i.join(""),s))}),me("Styles",r.join(""))}function wm(e){return me("NamedRange",null,{"ss:Name":e.Name,"ss:RefersTo":"="+wc(e.Ref,{r:0,c:0})})}function P4(e){if(!((e||{}).Workbook||{}).Names)return"";for(var t=e.Workbook.Names,r=[],n=0;n<t.length;++n){var a=t[n];a.Sheet==null&&(a.Name.match(/^_xlfn\./)||r.push(wm(a)))}return me("Names",r.join(""))}function L4(e,t,r,n){if(!e||!((n||{}).Workbook||{}).Names)return"";for(var a=n.Workbook.Names,i=[],s=0;s<a.length;++s){var o=a[s];o.Sheet==r&&(o.Name.match(/^_xlfn\./)||i.push(wm(o)))}return i.join("")}function M4(e,t,r,n){if(!e)return"";var a=[];if(e["!margins"]&&(a.push("<PageSetup>"),e["!margins"].header&&a.push(me("Header",null,{"x:Margin":e["!margins"].header})),e["!margins"].footer&&a.push(me("Footer",null,{"x:Margin":e["!margins"].footer})),a.push(me("PageMargins",null,{"x:Bottom":e["!margins"].bottom||"0.75","x:Left":e["!margins"].left||"0.7","x:Right":e["!margins"].right||"0.7","x:Top":e["!margins"].top||"0.75"})),a.push("</PageSetup>")),n&&n.Workbook&&n.Workbook.Sheets&&n.Workbook.Sheets[r])if(n.Workbook.Sheets[r].Hidden)a.push(me("Visible",n.Workbook.Sheets[r].Hidden==1?"SheetHidden":"SheetVeryHidden",{}));else{for(var i=0;i<r&&!(n.Workbook.Sheets[i]&&!n.Workbook.Sheets[i].Hidden);++i);i==r&&a.push("<Selected/>")}return((((n||{}).Workbook||{}).Views||[])[0]||{}).RTL&&a.push("<DisplayRightToLeft/>"),e["!protect"]&&(a.push(Gt("ProtectContents","True")),e["!protect"].objects&&a.push(Gt("ProtectObjects","True")),e["!protect"].scenarios&&a.push(Gt("ProtectScenarios","True")),e["!protect"].selectLockedCells!=null&&!e["!protect"].selectLockedCells?a.push(Gt("EnableSelection","NoSelection")):e["!protect"].selectUnlockedCells!=null&&!e["!protect"].selectUnlockedCells&&a.push(Gt("EnableSelection","UnlockedCells")),[["formatCells","AllowFormatCells"],["formatColumns","AllowSizeCols"],["formatRows","AllowSizeRows"],["insertColumns","AllowInsertCols"],["insertRows","AllowInsertRows"],["insertHyperlinks","AllowInsertHyperlinks"],["deleteColumns","AllowDeleteCols"],["deleteRows","AllowDeleteRows"],["sort","AllowSort"],["autoFilter","AllowFilter"],["pivotTables","AllowUsePivotTables"]].forEach(function(s){e["!protect"][s[0]]&&a.push("<"+s[1]+"/>")})),a.length==0?"":me("WorksheetOptions",a.join(""),{xmlns:Cr.x})}function V4(e){return e.map(function(t){var r=s_(t.t||""),n=me("ss:Data",r,{xmlns:"http://www.w3.org/TR/REC-html40"});return me("Comment",n,{"ss:Author":t.a})}).join("")}function U4(e,t,r,n,a,i,s){if(!e||e.v==null&&e.f==null)return"";var o={};if(e.f&&(o["ss:Formula"]="="+Qe(wc(e.f,s))),e.F&&e.F.slice(0,t.length)==t){var c=ht(e.F.slice(t.length+1));o["ss:ArrayRange"]="RC:R"+(c.r==s.r?"":"["+(c.r-s.r)+"]")+"C"+(c.c==s.c?"":"["+(c.c-s.c)+"]")}if(e.l&&e.l.Target&&(o["ss:HRef"]=Qe(e.l.Target),e.l.Tooltip&&(o["x:HRefScreenTip"]=Qe(e.l.Tooltip))),r["!merges"])for(var f=r["!merges"],u=0;u!=f.length;++u)f[u].s.c!=s.c||f[u].s.r!=s.r||(f[u].e.c>f[u].s.c&&(o["ss:MergeAcross"]=f[u].e.c-f[u].s.c),f[u].e.r>f[u].s.r&&(o["ss:MergeDown"]=f[u].e.r-f[u].s.r));var d="",h="";switch(e.t){case"z":if(!n.sheetStubs)return"";break;case"n":d="Number",h=String(e.v);break;case"b":d="Boolean",h=e.v?"1":"0";break;case"e":d="Error",h=Nn[e.v];break;case"d":d="DateTime",h=new Date(e.v).toISOString(),e.z==null&&(e.z=e.z||Ce[14]);break;case"s":d="String",h=i_(e.v||"");break}var p=ta(n.cellXfs,e,n);o["ss:StyleID"]="s"+(21+p),o["ss:Index"]=s.c+1;var g=e.v!=null?h:"",m=e.t=="z"?"":'<Data ss:Type="'+d+'">'+g+"</Data>";return(e.c||[]).length>0&&(m+=V4(e.c)),me("Cell",m,o)}function $4(e,t){var r='<Row ss:Index="'+(e+1)+'"';return t&&(t.hpt&&!t.hpx&&(t.hpx=ei(t.hpt)),t.hpx&&(r+=' ss:AutoFitHeight="0" ss:Height="'+t.hpx+'"'),t.hidden&&(r+=' ss:Hidden="1"')),r+">"}function W4(e,t,r,n){if(!e["!ref"])return"";var a=Xe(e["!ref"]),i=e["!merges"]||[],s=0,o=[];e["!cols"]&&e["!cols"].forEach(function(x,v){Qn(x);var y=!!x.width,_=Fo(v,x),b={"ss:Index":v+1};y&&(b["ss:Width"]=es(_.width)),x.hidden&&(b["ss:Hidden"]="1"),o.push(me("Column",null,b))});for(var c=Array.isArray(e),f=a.s.r;f<=a.e.r;++f){for(var u=[$4(f,(e["!rows"]||[])[f])],d=a.s.c;d<=a.e.c;++d){var h=!1;for(s=0;s!=i.length;++s)if(!(i[s].s.c>d)&&!(i[s].s.r>f)&&!(i[s].e.c<d)&&!(i[s].e.r<f)){(i[s].s.c!=d||i[s].s.r!=f)&&(h=!0);break}if(!h){var p={r:f,c:d},g=Ae(p),m=c?(e[f]||[])[d]:e[g];u.push(U4(m,g,e,t,r,n,p))}}u.push("</Row>"),u.length>2&&o.push(u.join(""))}return o.join("")}function H4(e,t,r){var n=[],a=r.SheetNames[e],i=r.Sheets[a],s=i?L4(i,t,e,r):"";return s.length>0&&n.push("<Names>"+s+"</Names>"),s=i?W4(i,t,e,r):"",s.length>0&&n.push("<Table>"+s+"</Table>"),n.push(M4(i,t,e,r)),n.join("")}function j4(e,t){t||(t={}),e.SSF||(e.SSF=st(Ce)),e.SSF&&(Xa(),Vi(e.SSF),t.revssf=so(e.SSF),t.revssf[e.SSF[65535]]=0,t.ssf=e.SSF,t.cellXfs=[],ta(t.cellXfs,{},{revssf:{General:0}}));var r=[];r.push(B4(e,t)),r.push(N4()),r.push(""),r.push("");for(var n=0;n<e.SheetNames.length;++n)r.push(me("Worksheet",H4(n,t,e),{"ss:Name":Qe(e.SheetNames[n])}));return r[2]=I4(e,t),r[3]=P4(e),kt+me("Workbook",r.join(""),{xmlns:Cr.ss,"xmlns:o":Cr.o,"xmlns:x":Cr.x,"xmlns:ss":Cr.ss,"xmlns:dt":Cr.dt,"xmlns:html":Cr.html})}function z4(e){var t={},r=e.content;if(r.l=28,t.AnsiUserType=r.read_shift(0,"lpstr-ansi"),t.AnsiClipboardFormat=P_(r),r.length-r.l<=4)return t;var n=r.read_shift(4);if(n==0||n>40||(r.l-=4,t.Reserved1=r.read_shift(0,"lpstr-ansi"),r.length-r.l<=4)||(n=r.read_shift(4),n!==1907505652)||(t.UnicodeClipboardFormat=L_(r),n=r.read_shift(4),n==0||n>40))return t;r.l-=4,t.Reserved2=r.read_shift(0,"lpwstr")}var G4=[60,1084,2066,2165,2175];function X4(e,t,r,n,a){var i=n,s=[],o=r.slice(r.l,r.l+i);if(a&&a.enc&&a.enc.insitu&&o.length>0)switch(e){case 9:case 521:case 1033:case 2057:case 47:case 405:case 225:case 406:case 312:case 404:case 10:break;case 133:break;default:a.enc.insitu(o)}s.push(o),r.l+=i;for(var c=Rn(r,r.l),f=Fc[c],u=0;f!=null&&G4.indexOf(c)>-1;)i=Rn(r,r.l+2),u=r.l+4,c==2066?u+=4:(c==2165||c==2175)&&(u+=12),o=r.slice(u,r.l+4+i),s.push(o),r.l+=4+i,f=Fc[c=Rn(r,r.l)];var d=Ut(s);Xt(d,0);var h=0;d.lens=[];for(var p=0;p<s.length;++p)d.lens.push(h),h+=s[p].length;if(d.length<n)throw"XLS Record 0x"+e.toString(16)+" Truncated: "+d.length+" < "+n;return t.f(d,d.length,a)}function vn(e,t,r){if(e.t!=="z"&&e.XF){var n=0;try{n=e.z||e.XF.numFmtId||0,t.cellNF&&(e.z=Ce[n])}catch(i){if(t.WTF)throw i}if(!t||t.cellText!==!1)try{e.t==="e"?e.w=e.w||Nn[e.v]:n===0||n=="General"?e.t==="n"?(e.v|0)===e.v?e.w=e.v.toString(10):e.w=Mi(e.v):e.w=ua(e.v):e.w=Sr(n,e.v,{date1904:!!r,dateNF:t&&t.dateNF})}catch(i){if(t.WTF)throw i}if(t.cellDates&&n&&e.t=="n"&&da(Ce[n]||String(n))){var a=Yn(e.v);a&&(e.t="d",e.v=new Date(a.y,a.m-1,a.d,a.H,a.M,a.S,a.u))}}}function Ao(e,t,r){return{v:e,ixfe:t,t:r}}function K4(e,t){var r={opts:{}},n={},a=t.dense?[]:{},i={},s={},o=null,c=[],f="",u={},d,h="",p,g,m,x,v={},y=[],_,b,D=[],C=[],k={Sheets:[],WBProps:{date1904:!1},Views:[{}]},F={},O=function(He){return He<8?ya[He]:He<64&&C[He-8]||ya[He]},X=function(He,St,zr){var Mt=St.XF.data;if(!(!Mt||!Mt.patternType||!zr||!zr.cellStyles)){St.s={},St.s.patternType=Mt.patternType;var Ba;(Ba=Qi(O(Mt.icvFore)))&&(St.s.fgColor={rgb:Ba}),(Ba=Qi(O(Mt.icvBack)))&&(St.s.bgColor={rgb:Ba})}},j=function(He,St,zr){if(!(B>1)&&!(zr.sheetRows&&He.r>=zr.sheetRows)){if(zr.cellStyles&&St.XF&&St.XF.data&&X(He,St,zr),delete St.ixfe,delete St.XF,d=He,h=Ae(He),(!s||!s.s||!s.e)&&(s={s:{r:0,c:0},e:{r:0,c:0}}),He.r<s.s.r&&(s.s.r=He.r),He.c<s.s.c&&(s.s.c=He.c),He.r+1>s.e.r&&(s.e.r=He.r+1),He.c+1>s.e.c&&(s.e.c=He.c+1),zr.cellFormula&&St.f){for(var Mt=0;Mt<y.length;++Mt)if(!(y[Mt][0].s.c>He.c||y[Mt][0].s.r>He.r)&&!(y[Mt][0].e.c<He.c||y[Mt][0].e.r<He.r)){St.F=Pe(y[Mt][0]),(y[Mt][0].s.c!=He.c||y[Mt][0].s.r!=He.r)&&delete St.f,St.f&&(St.f=""+nr(y[Mt][1],s,He,H,I));break}}zr.dense?(a[He.r]||(a[He.r]=[]),a[He.r][He.c]=St):a[h]=St}},I={enc:!1,sbcch:0,snames:[],sharedf:v,arrayf:y,rrtabid:[],lastuser:"",biff:8,codepage:0,winlocked:0,cellStyles:!!t&&!!t.cellStyles,WTF:!!t&&!!t.wtf};t.password&&(I.password=t.password);var G,re=[],ae=[],oe=[],fe=[],ke=!1,H=[];H.SheetNames=I.snames,H.sharedf=I.sharedf,H.arrayf=I.arrayf,H.names=[],H.XTI=[];var le=0,B=0,w=0,S=[],T=[],R;I.codepage=1200,Yr(1200);for(var W=!1;e.l<e.length-1;){var Y=e.l,q=e.read_shift(2);if(q===0&&le===10)break;var K=e.l===e.length?0:e.read_shift(2),ee=Fc[q];if(ee&&ee.f){if(t.bookSheets&&le===133&&q!==133)break;if(le=q,ee.r===2||ee.r==12){var ye=e.read_shift(2);if(K-=2,!I.enc&&ye!==q&&((ye&255)<<8|ye>>8)!==q)throw new Error("rt mismatch: "+ye+"!="+q);ee.r==12&&(e.l+=10,K-=10)}var M={};if(q===10?M=ee.f(e,K,I):M=X4(q,ee,e,K,I),B==0&&[9,521,1033,2057].indexOf(le)===-1)continue;switch(q){case 34:r.opts.Date1904=k.WBProps.date1904=M;break;case 134:r.opts.WriteProtect=!0;break;case 47:if(I.enc||(e.l=0),I.enc=M,!t.password)throw new Error("File is password-protected");if(M.valid==null)throw new Error("Encryption scheme unsupported");if(!M.valid)throw new Error("Password is incorrect");break;case 92:I.lastuser=M;break;case 66:var Ke=Number(M);switch(Ke){case 21010:Ke=1200;break;case 32768:Ke=1e4;break;case 32769:Ke=1252;break}Yr(I.codepage=Ke),W=!0;break;case 317:I.rrtabid=M;break;case 25:I.winlocked=M;break;case 439:r.opts.RefreshAll=M;break;case 12:r.opts.CalcCount=M;break;case 16:r.opts.CalcDelta=M;break;case 17:r.opts.CalcIter=M;break;case 13:r.opts.CalcMode=M;break;case 14:r.opts.CalcPrecision=M;break;case 95:r.opts.CalcSaveRecalc=M;break;case 15:I.CalcRefMode=M;break;case 2211:r.opts.FullCalc=M;break;case 129:M.fDialog&&(a["!type"]="dialog"),M.fBelow||((a["!outline"]||(a["!outline"]={})).above=!0),M.fRight||((a["!outline"]||(a["!outline"]={})).left=!0);break;case 224:D.push(M);break;case 430:H.push([M]),H[H.length-1].XTI=[];break;case 35:case 547:H[H.length-1].push(M);break;case 24:case 536:R={Name:M.Name,Ref:nr(M.rgce,s,null,H,I)},M.itab>0&&(R.Sheet=M.itab-1),H.names.push(R),H[0]||(H[0]=[],H[0].XTI=[]),H[H.length-1].push(M),M.Name=="_xlnm._FilterDatabase"&&M.itab>0&&M.rgce&&M.rgce[0]&&M.rgce[0][0]&&M.rgce[0][0][0]=="PtgArea3d"&&(T[M.itab-1]={ref:Pe(M.rgce[0][0][1][2])});break;case 22:I.ExternCount=M;break;case 23:H.length==0&&(H[0]=[],H[0].XTI=[]),H[H.length-1].XTI=H[H.length-1].XTI.concat(M),H.XTI=H.XTI.concat(M);break;case 2196:if(I.biff<8)break;R!=null&&(R.Comment=M[1]);break;case 18:a["!protect"]=M;break;case 19:M!==0&&I.WTF&&console.error("Password verifier: "+M);break;case 133:i[M.pos]=M,I.snames.push(M.name);break;case 10:{if(--B)break;if(s.e){if(s.e.r>0&&s.e.c>0){if(s.e.r--,s.e.c--,a["!ref"]=Pe(s),t.sheetRows&&t.sheetRows<=s.e.r){var Le=s.e.r;s.e.r=t.sheetRows-1,a["!fullref"]=a["!ref"],a["!ref"]=Pe(s),s.e.r=Le}s.e.r++,s.e.c++}re.length>0&&(a["!merges"]=re),ae.length>0&&(a["!objects"]=ae),oe.length>0&&(a["!cols"]=oe),fe.length>0&&(a["!rows"]=fe),k.Sheets.push(F)}f===""?u=a:n[f]=a,a=t.dense?[]:{}}break;case 9:case 521:case 1033:case 2057:{if(I.biff===8&&(I.biff={9:2,521:3,1033:4}[q]||{512:2,768:3,1024:4,1280:5,1536:8,2:2,7:2}[M.BIFFVer]||8),I.biffguess=M.BIFFVer==0,M.BIFFVer==0&&M.dt==4096&&(I.biff=5,W=!0,Yr(I.codepage=28591)),I.biff==8&&M.BIFFVer==0&&M.dt==16&&(I.biff=2),B++)break;if(a=t.dense?[]:{},I.biff<8&&!W&&(W=!0,Yr(I.codepage=t.codepage||1252)),I.biff<5||M.BIFFVer==0&&M.dt==4096){f===""&&(f="Sheet1"),s={s:{r:0,c:0},e:{r:0,c:0}};var Ye={pos:e.l-K,name:f};i[Ye.pos]=Ye,I.snames.push(f)}else f=(i[Y]||{name:""}).name;M.dt==32&&(a["!type"]="chart"),M.dt==64&&(a["!type"]="macro"),re=[],ae=[],I.arrayf=y=[],oe=[],fe=[],ke=!1,F={Hidden:(i[Y]||{hs:0}).hs,name:f}}break;case 515:case 3:case 2:a["!type"]=="chart"&&(t.dense?(a[M.r]||[])[M.c]:a[Ae({c:M.c,r:M.r})])&&++M.c,_={ixfe:M.ixfe,XF:D[M.ixfe]||{},v:M.val,t:"n"},w>0&&(_.z=S[_.ixfe>>8&63]),vn(_,t,r.opts.Date1904),j({c:M.c,r:M.r},_,t);break;case 5:case 517:_={ixfe:M.ixfe,XF:D[M.ixfe],v:M.val,t:M.t},w>0&&(_.z=S[_.ixfe>>8&63]),vn(_,t,r.opts.Date1904),j({c:M.c,r:M.r},_,t);break;case 638:_={ixfe:M.ixfe,XF:D[M.ixfe],v:M.rknum,t:"n"},w>0&&(_.z=S[_.ixfe>>8&63]),vn(_,t,r.opts.Date1904),j({c:M.c,r:M.r},_,t);break;case 189:for(var $e=M.c;$e<=M.C;++$e){var ve=M.rkrec[$e-M.c][0];_={ixfe:ve,XF:D[ve],v:M.rkrec[$e-M.c][1],t:"n"},w>0&&(_.z=S[_.ixfe>>8&63]),vn(_,t,r.opts.Date1904),j({c:$e,r:M.r},_,t)}break;case 6:case 518:case 1030:{if(M.val=="String"){o=M;break}if(_=Ao(M.val,M.cell.ixfe,M.tt),_.XF=D[_.ixfe],t.cellFormula){var mt=M.formula;if(mt&&mt[0]&&mt[0][0]&&mt[0][0][0]=="PtgExp"){var vr=mt[0][0][1][0],Hr=mt[0][0][1][1],Rt=Ae({r:vr,c:Hr});v[Rt]?_.f=""+nr(M.formula,s,M.cell,H,I):_.F=((t.dense?(a[vr]||[])[Hr]:a[Rt])||{}).F}else _.f=""+nr(M.formula,s,M.cell,H,I)}w>0&&(_.z=S[_.ixfe>>8&63]),vn(_,t,r.opts.Date1904),j(M.cell,_,t),o=M}break;case 7:case 519:if(o)o.val=M,_=Ao(M,o.cell.ixfe,"s"),_.XF=D[_.ixfe],t.cellFormula&&(_.f=""+nr(o.formula,s,o.cell,H,I)),w>0&&(_.z=S[_.ixfe>>8&63]),vn(_,t,r.opts.Date1904),j(o.cell,_,t),o=null;else throw new Error("String record expects Formula");break;case 33:case 545:{y.push(M);var Br=Ae(M[0].s);if(p=t.dense?(a[M[0].s.r]||[])[M[0].s.c]:a[Br],t.cellFormula&&p){if(!o||!Br||!p)break;p.f=""+nr(M[1],s,M[0],H,I),p.F=Pe(M[0])}}break;case 1212:{if(!t.cellFormula)break;if(h){if(!o)break;v[Ae(o.cell)]=M[0],p=t.dense?(a[o.cell.r]||[])[o.cell.c]:a[Ae(o.cell)],(p||{}).f=""+nr(M[0],s,d,H,I)}}break;case 253:_=Ao(c[M.isst].t,M.ixfe,"s"),c[M.isst].h&&(_.h=c[M.isst].h),_.XF=D[_.ixfe],w>0&&(_.z=S[_.ixfe>>8&63]),vn(_,t,r.opts.Date1904),j({c:M.c,r:M.r},_,t);break;case 513:t.sheetStubs&&(_={ixfe:M.ixfe,XF:D[M.ixfe],t:"z"},w>0&&(_.z=S[_.ixfe>>8&63]),vn(_,t,r.opts.Date1904),j({c:M.c,r:M.r},_,t));break;case 190:if(t.sheetStubs)for(var ut=M.c;ut<=M.C;++ut){var Lt=M.ixfe[ut-M.c];_={ixfe:Lt,XF:D[Lt],t:"z"},w>0&&(_.z=S[_.ixfe>>8&63]),vn(_,t,r.opts.Date1904),j({c:ut,r:M.r},_,t)}break;case 214:case 516:case 4:_=Ao(M.val,M.ixfe,"s"),_.XF=D[_.ixfe],w>0&&(_.z=S[_.ixfe>>8&63]),vn(_,t,r.opts.Date1904),j({c:M.c,r:M.r},_,t);break;case 0:case 512:B===1&&(s=M);break;case 252:c=M;break;case 1054:if(I.biff==4){S[w++]=M[1];for(var jr=0;jr<w+163&&Ce[jr]!=M[1];++jr);jr>=163&&mn(M[1],w+163)}else mn(M[1],M[0]);break;case 30:{S[w++]=M;for(var aa=0;aa<w+163&&Ce[aa]!=M;++aa);aa>=163&&mn(M,w+163)}break;case 229:re=re.concat(M);break;case 93:ae[M.cmo[0]]=I.lastobj=M;break;case 438:I.lastobj.TxO=M;break;case 127:I.lastobj.ImData=M;break;case 440:for(x=M[0].s.r;x<=M[0].e.r;++x)for(m=M[0].s.c;m<=M[0].e.c;++m)p=t.dense?(a[x]||[])[m]:a[Ae({c:m,r:x})],p&&(p.l=M[1]);break;case 2048:for(x=M[0].s.r;x<=M[0].e.r;++x)for(m=M[0].s.c;m<=M[0].e.c;++m)p=t.dense?(a[x]||[])[m]:a[Ae({c:m,r:x})],p&&p.l&&(p.l.Tooltip=M[1]);break;case 28:{if(I.biff<=5&&I.biff>=2)break;p=t.dense?(a[M[0].r]||[])[M[0].c]:a[Ae(M[0])];var _s=ae[M[2]];p||(t.dense?(a[M[0].r]||(a[M[0].r]=[]),p=a[M[0].r][M[0].c]={t:"z"}):p=a[Ae(M[0])]={t:"z"},s.e.r=Math.max(s.e.r,M[0].r),s.s.r=Math.min(s.s.r,M[0].r),s.e.c=Math.max(s.e.c,M[0].c),s.s.c=Math.min(s.s.c,M[0].c)),p.c||(p.c=[]),g={a:M[1],t:_s.TxO.t},p.c.push(g)}break;case 2173:Ib(D[M.ixfe],M.ext);break;case 125:{if(!I.cellStyles)break;for(;M.e>=M.s;)oe[M.e--]={width:M.w/256,level:M.level||0,hidden:!!(M.flags&1)},ke||(ke=!0,pc(M.w/256)),Qn(oe[M.e+1])}break;case 520:{var hr={};M.level!=null&&(fe[M.r]=hr,hr.level=M.level),M.hidden&&(fe[M.r]=hr,hr.hidden=!0),M.hpt&&(fe[M.r]=hr,hr.hpt=M.hpt,hr.hpx=ei(M.hpt))}break;case 38:case 39:case 40:case 41:a["!margins"]||Ca(a["!margins"]={}),a["!margins"][{38:"left",39:"right",40:"top",41:"bottom"}[q]]=M;break;case 161:a["!margins"]||Ca(a["!margins"]={}),a["!margins"].header=M.header,a["!margins"].footer=M.footer;break;case 574:M.RTL&&(k.Views[0].RTL=!0);break;case 146:C=M;break;case 2198:G=M;break;case 140:b=M;break;case 442:f?F.CodeName=M||F.name:k.WBProps.CodeName=M||"ThisWorkbook";break}}else ee||console.error("Missing Info for XLS Record 0x"+q.toString(16)),e.l+=K}return r.SheetNames=wt(i).sort(function(kn,He){return Number(kn)-Number(He)}).map(function(kn){return i[kn].name}),t.bookSheets||(r.Sheets=n),!r.SheetNames.length&&u["!ref"]?(r.SheetNames.push("Sheet1"),r.Sheets&&(r.Sheets.Sheet1=u)):r.Preamble=u,r.Sheets&&T.forEach(function(kn,He){r.Sheets[r.SheetNames[He]]["!autofilter"]=kn}),r.Strings=c,r.SSF=st(Ce),I.enc&&(r.Encryption=I.enc),G&&(r.Themes=G),r.Metadata={},b!==void 0&&(r.Metadata.Country=b),H.names.length>0&&(k.Names=H.names),r.Workbook=k,r}var fs={SI:"e0859ff2f94f6810ab9108002b27b3d9",DSI:"02d5cdd59c2e1b10939708002b2cf9ae",UDI:"05d5cdd59c2e1b10939708002b2cf9ae"};function Y4(e,t,r){var n=Se.find(e,"/!DocumentSummaryInformation");if(n&&n.size>0)try{var a=sh(n,tc,fs.DSI);for(var i in a)t[i]=a[i]}catch(f){if(r.WTF)throw f}var s=Se.find(e,"/!SummaryInformation");if(s&&s.size>0)try{var o=sh(s,rc,fs.SI);for(var c in o)t[c]==null&&(t[c]=o[c])}catch(f){if(r.WTF)throw f}t.HeadingPairs&&t.TitlesOfParts&&(Kd(t.HeadingPairs,t.TitlesOfParts,t,r),delete t.HeadingPairs,delete t.TitlesOfParts)}function q4(e,t){var r=[],n=[],a=[],i=0,s,o=Xu(tc,"n"),c=Xu(rc,"n");if(e.Props)for(s=wt(e.Props),i=0;i<s.length;++i)(Object.prototype.hasOwnProperty.call(o,s[i])?r:Object.prototype.hasOwnProperty.call(c,s[i])?n:a).push([s[i],e.Props[s[i]]]);if(e.Custprops)for(s=wt(e.Custprops),i=0;i<s.length;++i)Object.prototype.hasOwnProperty.call(e.Props||{},s[i])||(Object.prototype.hasOwnProperty.call(o,s[i])?r:Object.prototype.hasOwnProperty.call(c,s[i])?n:a).push([s[i],e.Custprops[s[i]]]);var f=[];for(i=0;i<a.length;++i)ah.indexOf(a[i][0])>-1||Xd.indexOf(a[i][0])>-1||a[i][1]!=null&&f.push(a[i]);n.length&&Se.utils.cfb_add(t,"/SummaryInformation",oh(n,fs.SI,c,rc)),(r.length||f.length)&&Se.utils.cfb_add(t,"/DocumentSummaryInformation",oh(r,fs.DSI,o,tc,f.length?f:null,fs.UDI))}function _m(e,t){t||(t={}),Nc(t),Rl(),t.codepage&&Dl(t.codepage);var r,n;if(e.FullPaths){if(Se.find(e,"/encryption"))throw new Error("File is password-protected");r=Se.find(e,"!CompObj"),n=Se.find(e,"/Workbook")||Se.find(e,"/Book")}else{switch(t.type){case"base64":e=br(Er(e));break;case"binary":e=br(e);break;case"buffer":break;case"array":Array.isArray(e)||(e=Array.prototype.slice.call(e));break}Xt(e,0),n={content:e}}var a,i;if(r&&z4(r),t.bookProps&&!t.bookSheets)a={};else{var s=Ue?"buffer":"array";if(n&&n.content)a=K4(n.content,t);else if((i=Se.find(e,"PerfectOffice_MAIN"))&&i.content)a=Ta.to_workbook(i.content,(t.type=s,t));else if((i=Se.find(e,"NativeContent_MAIN"))&&i.content)a=Ta.to_workbook(i.content,(t.type=s,t));else throw(i=Se.find(e,"MN0"))&&i.content?new Error("Unsupported Works 4 for Mac file"):new Error("Cannot find Workbook stream");t.bookVBA&&e.FullPaths&&Se.find(e,"/_VBA_PROJECT_CUR/VBA/dir")&&(a.vbaraw=cS(e))}var o={};return e.FullPaths&&Y4(e,o,t),a.Props=a.Custprops=o,t.bookFiles&&(a.cfb=e),a}function J4(e,t){var r=t||{},n=Se.utils.cfb_new({root:"R"}),a="/Workbook";switch(r.bookType||"xls"){case"xls":r.bookType="biff8";case"xla":r.bookType||(r.bookType="xla");case"biff8":a="/Workbook",r.biff=8;break;case"biff5":a="/Book",r.biff=5;break;default:throw new Error("invalid type "+r.bookType+" for XLS CFB")}return Se.utils.cfb_add(n,a,ym(e,r)),r.biff==8&&(e.Props||e.Custprops)&&q4(e,n),r.biff==8&&e.vbaraw&&fS(n,Se.read(e.vbaraw,{type:typeof e.vbaraw=="string"?"binary":"buffer"})),n}var us={0:{f:yC},1:{f:AC},2:{f:KC},3:{f:LC},4:{f:BC},5:{f:zC},6:{f:QC},7:{f:$C},8:{f:sF},9:{f:iF},10:{f:nF},11:{f:aF},12:{f:RC},13:{f:qC},14:{f:VC},15:{f:IC},16:{f:fm},17:{f:tF},18:{f:HC},19:{f:Yl},20:{},21:{},22:{},23:{},24:{},25:{},26:{},27:{},28:{},29:{},30:{},31:{},32:{},33:{},34:{},35:{T:1},36:{T:-1},37:{T:1},38:{T:-1},39:{f:t4},40:{},42:{},43:{f:QE},44:{f:JE},45:{f:rb},46:{f:ab},47:{f:nb},48:{},49:{f:b_},50:{},51:{f:Mb},52:{T:1},53:{T:-1},54:{T:1},55:{T:-1},56:{T:1},57:{T:-1},58:{},59:{},60:{f:Ch},62:{f:ZC},63:{f:Xb},64:{f:kF},65:{},66:{},67:{},68:{},69:{},70:{},128:{},129:{T:1},130:{T:-1},131:{T:1,f:Zt,p:0},132:{T:-1},133:{T:1},134:{T:-1},135:{T:1},136:{T:-1},137:{T:1,f:vF},138:{T:-1},139:{T:1},140:{T:-1},141:{T:1},142:{T:-1},143:{T:1},144:{T:-1},145:{T:1},146:{T:-1},147:{f:CC},148:{f:bC,p:16},151:{f:dF},152:{},153:{f:ZF},154:{},155:{},156:{f:qF},157:{},158:{},159:{T:1,f:mE},160:{T:-1},161:{T:1,f:wa},162:{T:-1},163:{T:1},164:{T:-1},165:{T:1},166:{T:-1},167:{},168:{},169:{},170:{},171:{},172:{T:1},173:{T:-1},174:{},175:{},176:{f:oF},177:{T:1},178:{T:-1},179:{T:1},180:{T:-1},181:{T:1},182:{T:-1},183:{T:1},184:{T:-1},185:{T:1},186:{T:-1},187:{T:1},188:{T:-1},189:{T:1},190:{T:-1},191:{T:1},192:{T:-1},193:{T:1},194:{T:-1},195:{T:1},196:{T:-1},197:{T:1},198:{T:-1},199:{T:1},200:{T:-1},201:{T:1},202:{T:-1},203:{T:1},204:{T:-1},205:{T:1},206:{T:-1},207:{T:1},208:{T:-1},209:{T:1},210:{T:-1},211:{T:1},212:{T:-1},213:{T:1},214:{T:-1},215:{T:1},216:{T:-1},217:{T:1},218:{T:-1},219:{T:1},220:{T:-1},221:{T:1},222:{T:-1},223:{T:1},224:{T:-1},225:{T:1},226:{T:-1},227:{T:1},228:{T:-1},229:{T:1},230:{T:-1},231:{T:1},232:{T:-1},233:{T:1},234:{T:-1},235:{T:1},236:{T:-1},237:{T:1},238:{T:-1},239:{T:1},240:{T:-1},241:{T:1},242:{T:-1},243:{T:1},244:{T:-1},245:{T:1},246:{T:-1},247:{T:1},248:{T:-1},249:{T:1},250:{T:-1},251:{T:1},252:{T:-1},253:{T:1},254:{T:-1},255:{T:1},256:{T:-1},257:{T:1},258:{T:-1},259:{T:1},260:{T:-1},261:{T:1},262:{T:-1},263:{T:1},264:{T:-1},265:{T:1},266:{T:-1},267:{T:1},268:{T:-1},269:{T:1},270:{T:-1},271:{T:1},272:{T:-1},273:{T:1},274:{T:-1},275:{T:1},276:{T:-1},277:{},278:{T:1},279:{T:-1},280:{T:1},281:{T:-1},282:{T:1},283:{T:1},284:{T:-1},285:{T:1},286:{T:-1},287:{T:1},288:{T:-1},289:{T:1},290:{T:-1},291:{T:1},292:{T:-1},293:{T:1},294:{T:-1},295:{T:1},296:{T:-1},297:{T:1},298:{T:-1},299:{T:1},300:{T:-1},301:{T:1},302:{T:-1},303:{T:1},304:{T:-1},305:{T:1},306:{T:-1},307:{T:1},308:{T:-1},309:{T:1},310:{T:-1},311:{T:1},312:{T:-1},313:{T:-1},314:{T:1},315:{T:-1},316:{T:1},317:{T:-1},318:{T:1},319:{T:-1},320:{T:1},321:{T:-1},322:{T:1},323:{T:-1},324:{T:1},325:{T:-1},326:{T:1},327:{T:-1},328:{T:1},329:{T:-1},330:{T:1},331:{T:-1},332:{T:1},333:{T:-1},334:{T:1},335:{f:Pb},336:{T:-1},337:{f:$b,T:1},338:{T:-1},339:{T:1},340:{T:-1},341:{T:1},342:{T:-1},343:{T:1},344:{T:-1},345:{T:1},346:{T:-1},347:{T:1},348:{T:-1},349:{T:1},350:{T:-1},351:{},352:{},353:{T:1},354:{T:-1},355:{f:Jl},357:{},358:{},359:{},360:{T:1},361:{},362:{f:Sh},363:{},364:{},366:{},367:{},368:{},369:{},370:{},371:{},372:{T:1},373:{T:-1},374:{T:1},375:{T:-1},376:{T:1},377:{T:-1},378:{T:1},379:{T:-1},380:{T:1},381:{T:-1},382:{T:1},383:{T:-1},384:{T:1},385:{T:-1},386:{T:1},387:{T:-1},388:{T:1},389:{T:-1},390:{T:1},391:{T:-1},392:{T:1},393:{T:-1},394:{T:1},395:{T:-1},396:{},397:{},398:{},399:{},400:{},401:{T:1},403:{},404:{},405:{},406:{},407:{},408:{},409:{},410:{},411:{},412:{},413:{},414:{},415:{},416:{},417:{},418:{},419:{},420:{},421:{},422:{T:1},423:{T:1},424:{T:-1},425:{T:-1},426:{f:hF},427:{f:mF},428:{},429:{T:1},430:{T:-1},431:{T:1},432:{T:-1},433:{T:1},434:{T:-1},435:{T:1},436:{T:-1},437:{T:1},438:{T:-1},439:{T:1},440:{T:-1},441:{T:1},442:{T:-1},443:{T:1},444:{T:-1},445:{T:1},446:{T:-1},447:{T:1},448:{T:-1},449:{T:1},450:{T:-1},451:{T:1},452:{T:-1},453:{T:1},454:{T:-1},455:{T:1},456:{T:-1},457:{T:1},458:{T:-1},459:{T:1},460:{T:-1},461:{T:1},462:{T:-1},463:{T:1},464:{T:-1},465:{T:1},466:{T:-1},467:{T:1},468:{T:-1},469:{T:1},470:{T:-1},471:{},472:{},473:{T:1},474:{T:-1},475:{},476:{f:gF},477:{},478:{},479:{T:1},480:{T:-1},481:{T:1},482:{T:-1},483:{T:1},484:{T:-1},485:{f:TC},486:{T:1},487:{T:-1},488:{T:1},489:{T:-1},490:{T:1},491:{T:-1},492:{T:1},493:{T:-1},494:{f:fF},495:{T:1},496:{T:-1},497:{T:1},498:{T:-1},499:{},500:{T:1},501:{T:-1},502:{T:1},503:{T:-1},504:{},505:{T:1},506:{T:-1},507:{},508:{T:1},509:{T:-1},510:{T:1},511:{T:-1},512:{},513:{},514:{T:1},515:{T:-1},516:{T:1},517:{T:-1},518:{T:1},519:{T:-1},520:{T:1},521:{T:-1},522:{},523:{},524:{},525:{},526:{},527:{},528:{T:1},529:{T:-1},530:{T:1},531:{T:-1},532:{T:1},533:{T:-1},534:{},535:{},536:{},537:{},538:{T:1},539:{T:-1},540:{T:1},541:{T:-1},542:{T:1},548:{},549:{},550:{f:Jl},551:{},552:{},553:{},554:{T:1},555:{T:-1},556:{T:1},557:{T:-1},558:{T:1},559:{T:-1},560:{T:1},561:{T:-1},562:{},564:{},565:{T:1},566:{T:-1},569:{T:1},570:{T:-1},572:{},573:{T:1},574:{T:-1},577:{},578:{},579:{},580:{},581:{},582:{},583:{},584:{},585:{},586:{},587:{},588:{T:-1},589:{},590:{T:1},591:{T:-1},592:{T:1},593:{T:-1},594:{T:1},595:{T:-1},596:{},597:{T:1},598:{T:-1},599:{T:1},600:{T:-1},601:{T:1},602:{T:-1},603:{T:1},604:{T:-1},605:{T:1},606:{T:-1},607:{},608:{T:1},609:{T:-1},610:{},611:{T:1},612:{T:-1},613:{T:1},614:{T:-1},615:{T:1},616:{T:-1},617:{T:1},618:{T:-1},619:{T:1},620:{T:-1},625:{},626:{T:1},627:{T:-1},628:{T:1},629:{T:-1},630:{T:1},631:{T:-1},632:{f:aS},633:{T:1},634:{T:-1},635:{T:1,f:rS},636:{T:-1},637:{f:F_},638:{T:1},639:{},640:{T:-1},641:{T:1},642:{T:-1},643:{T:1},644:{},645:{T:-1},646:{T:1},648:{T:1},649:{},650:{T:-1},651:{f:VF},652:{},653:{T:1},654:{T:-1},655:{T:1},656:{T:-1},657:{T:1},658:{T:-1},659:{},660:{T:1},661:{},662:{T:-1},663:{},664:{T:1},665:{},666:{T:-1},667:{},668:{},669:{},671:{T:1},672:{T:-1},673:{T:1},674:{T:-1},675:{},676:{},677:{},678:{},679:{},680:{},681:{},1024:{},1025:{},1026:{T:1},1027:{T:-1},1028:{T:1},1029:{T:-1},1030:{},1031:{T:1},1032:{T:-1},1033:{T:1},1034:{T:-1},1035:{},1036:{},1037:{},1038:{T:1},1039:{T:-1},1040:{},1041:{T:1},1042:{T:-1},1043:{},1044:{},1045:{},1046:{T:1},1047:{T:-1},1048:{T:1},1049:{T:-1},1050:{},1051:{T:1},1052:{T:1},1053:{f:EF},1054:{T:1},1055:{},1056:{T:1},1057:{T:-1},1058:{T:1},1059:{T:-1},1061:{},1062:{T:1},1063:{T:-1},1064:{T:1},1065:{T:-1},1066:{T:1},1067:{T:-1},1068:{T:1},1069:{T:-1},1070:{T:1},1071:{T:-1},1072:{T:1},1073:{T:-1},1075:{T:1},1076:{T:-1},1077:{T:1},1078:{T:-1},1079:{T:1},1080:{T:-1},1081:{T:1},1082:{T:-1},1083:{T:1},1084:{T:-1},1085:{},1086:{T:1},1087:{T:-1},1088:{T:1},1089:{T:-1},1090:{T:1},1091:{T:-1},1092:{T:1},1093:{T:-1},1094:{T:1},1095:{T:-1},1096:{},1097:{T:1},1098:{},1099:{T:-1},1100:{T:1},1101:{T:-1},1102:{},1103:{},1104:{},1105:{},1111:{},1112:{},1113:{T:1},1114:{T:-1},1115:{T:1},1116:{T:-1},1117:{},1118:{T:1},1119:{T:-1},1120:{T:1},1121:{T:-1},1122:{T:1},1123:{T:-1},1124:{T:1},1125:{T:-1},1126:{},1128:{T:1},1129:{T:-1},1130:{},1131:{T:1},1132:{T:-1},1133:{T:1},1134:{T:-1},1135:{T:1},1136:{T:-1},1137:{T:1},1138:{T:-1},1139:{T:1},1140:{T:-1},1141:{},1142:{T:1},1143:{T:-1},1144:{T:1},1145:{T:-1},1146:{},1147:{T:1},1148:{T:-1},1149:{T:1},1150:{T:-1},1152:{T:1},1153:{T:-1},1154:{T:-1},1155:{T:-1},1156:{T:-1},1157:{T:1},1158:{T:-1},1159:{T:1},1160:{T:-1},1161:{T:1},1162:{T:-1},1163:{T:1},1164:{T:-1},1165:{T:1},1166:{T:-1},1167:{T:1},1168:{T:-1},1169:{T:1},1170:{T:-1},1171:{},1172:{T:1},1173:{T:-1},1177:{},1178:{T:1},1180:{},1181:{},1182:{},2048:{T:1},2049:{T:-1},2050:{},2051:{T:1},2052:{T:-1},2053:{},2054:{},2055:{T:1},2056:{T:-1},2057:{T:1},2058:{T:-1},2060:{},2067:{},2068:{T:1},2069:{T:-1},2070:{},2071:{},2072:{T:1},2073:{T:-1},2075:{},2076:{},2077:{T:1},2078:{T:-1},2079:{},2080:{T:1},2081:{T:-1},2082:{},2083:{T:1},2084:{T:-1},2085:{T:1},2086:{T:-1},2087:{T:1},2088:{T:-1},2089:{T:1},2090:{T:-1},2091:{},2092:{},2093:{T:1},2094:{T:-1},2095:{},2096:{T:1},2097:{T:-1},2098:{T:1},2099:{T:-1},2100:{T:1},2101:{T:-1},2102:{},2103:{T:1},2104:{T:-1},2105:{},2106:{T:1},2107:{T:-1},2108:{},2109:{T:1},2110:{T:-1},2111:{T:1},2112:{T:-1},2113:{T:1},2114:{T:-1},2115:{},2116:{},2117:{},2118:{T:1},2119:{T:-1},2120:{},2121:{T:1},2122:{T:-1},2123:{T:1},2124:{T:-1},2125:{},2126:{T:1},2127:{T:-1},2128:{},2129:{T:1},2130:{T:-1},2131:{T:1},2132:{T:-1},2133:{T:1},2134:{},2135:{},2136:{},2137:{T:1},2138:{T:-1},2139:{T:1},2140:{T:-1},2141:{},3072:{},3073:{},4096:{T:1},4097:{T:-1},5002:{T:1},5003:{T:-1},5081:{T:1},5082:{T:-1},5083:{},5084:{T:1},5085:{T:-1},5086:{T:1},5087:{T:-1},5088:{},5089:{},5090:{},5092:{T:1},5093:{T:-1},5094:{},5095:{T:1},5096:{T:-1},5097:{},5099:{},65535:{n:""}},Fc={6:{f:yc},10:{f:Zn},12:{f:Ft},13:{f:Ft},14:{f:bt},15:{f:bt},16:{f:er},17:{f:bt},18:{f:bt},19:{f:Ft},20:{f:kh},21:{f:kh},23:{f:Sh},24:{f:bh},25:{f:bt},26:{},27:{},28:{f:Ek},29:{},34:{f:bt},35:{f:Eh},38:{f:er},39:{f:er},40:{f:er},41:{f:er},42:{f:bt},43:{f:bt},47:{f:IE},49:{f:qy},51:{f:Ft},60:{},61:{f:zy},64:{f:bt},65:{f:Yy},66:{f:Ft},77:{},80:{},81:{},82:{},85:{f:Ft},89:{},90:{},91:{},92:{f:Ny},93:{f:Tk},94:{},95:{f:bt},96:{},97:{},99:{f:bt},125:{f:Ch},128:{f:uk},129:{f:Py},130:{f:Ft},131:{f:bt},132:{f:bt},133:{f:Ly},134:{},140:{f:Nk},141:{f:Ft},144:{},146:{f:Lk},151:{},152:{},153:{},154:{},155:{},156:{f:Ft},157:{},158:{},160:{f:jk},161:{f:Uk},174:{},175:{},176:{},177:{},178:{},180:{},181:{},182:{},184:{},185:{},189:{f:ok},190:{f:lk},193:{f:Zn},197:{},198:{},199:{},200:{},201:{},202:{f:bt},203:{},204:{},205:{},206:{},207:{},208:{},209:{},210:{},211:{},213:{},215:{},216:{},217:{},218:{f:Ft},220:{},221:{f:bt},222:{},224:{f:fk},225:{f:By},226:{f:Zn},227:{},229:{f:bk},233:{},235:{},236:{},237:{},239:{},240:{},241:{},242:{},244:{},245:{},246:{},247:{},248:{},249:{},251:{},252:{f:Vy},253:{f:Zy},255:{f:$y},256:{},259:{},290:{},311:{},312:{},315:{},317:{f:lh},318:{},319:{},320:{},330:{},331:{},333:{},334:{},335:{},336:{},337:{},338:{},339:{},340:{},351:{},352:{f:bt},353:{f:Zn},401:{},402:{},403:{},404:{},405:{},406:{},407:{},408:{},425:{},426:{},427:{},428:{},429:{},430:{f:gk},431:{f:bt},432:{},433:{},434:{},437:{},438:{f:Ak},439:{f:bt},440:{f:Dk},441:{},442:{f:Zi},443:{},444:{f:Ft},445:{},446:{},448:{f:Zn},449:{f:jy,r:2},450:{f:Zn},512:{f:wh},513:{f:Hk},515:{f:mk},516:{f:ek},517:{f:yh},519:{f:zk},520:{f:Wy},523:{},545:{f:Th},549:{f:vh},566:{},574:{f:Xy},638:{f:sk},659:{},1048:{},1054:{f:rk},1084:{},1212:{f:_k},2048:{f:Ok},2049:{},2050:{},2051:{},2052:{},2053:{},2054:{},2055:{},2056:{},2057:{f:yo},2058:{},2059:{},2060:{},2061:{},2062:{},2063:{},2064:{},2066:{},2067:{},2128:{},2129:{},2130:{},2131:{},2132:{},2133:{},2134:{},2135:{},2136:{},2137:{},2138:{},2146:{},2147:{r:12},2148:{},2149:{},2150:{},2151:{f:Zn},2152:{},2154:{},2155:{},2156:{},2161:{},2162:{},2164:{},2165:{},2166:{},2167:{},2168:{},2169:{},2170:{},2171:{},2172:{f:Mk,r:12},2173:{f:Nb,r:12},2174:{},2175:{},2180:{},2181:{},2182:{},2183:{},2184:{},2185:{},2186:{},2187:{},2188:{f:bt,r:12},2189:{},2190:{r:12},2191:{},2192:{},2194:{},2195:{},2196:{f:wk,r:12},2197:{},2198:{f:Fb,r:12},2199:{},2200:{},2201:{},2202:{f:yk,r:12},2203:{f:Zn},2204:{},2205:{},2206:{},2207:{},2211:{f:Hy},2212:{},2213:{},2214:{},2215:{},4097:{},4098:{},4099:{},4102:{},4103:{},4105:{},4106:{},4107:{},4108:{},4109:{},4116:{},4117:{},4118:{},4119:{},4120:{},4121:{},4122:{},4123:{},4124:{},4125:{},4126:{},4127:{},4128:{},4129:{},4130:{},4132:{},4133:{},4134:{f:Ft},4135:{},4146:{},4147:{},4148:{},4149:{},4154:{},4156:{},4157:{},4158:{},4159:{},4160:{},4161:{},4163:{},4164:{f:$k},4165:{},4166:{},4168:{},4170:{},4171:{},4174:{},4175:{},4176:{},4177:{},4187:{},4188:{f:Pk},4189:{},4191:{},4192:{},4193:{},4194:{},4195:{},4196:{},4197:{},4198:{},4199:{},4200:{},0:{f:wh},1:{},2:{f:qk},3:{f:Kk},4:{f:Xk},5:{f:yh},7:{f:Zk},8:{},9:{f:yo},11:{},22:{f:Ft},30:{f:ak},31:{},32:{},33:{f:Th},36:{},37:{f:vh},50:{f:Qk},62:{},52:{},67:{},68:{f:Ft},69:{},86:{},126:{},127:{f:Gk},135:{},136:{},137:{},145:{},148:{},149:{},150:{},169:{},171:{},188:{},191:{},192:{},194:{},195:{},214:{f:eE},223:{},234:{},354:{},421:{},518:{f:yc},521:{f:yo},536:{f:bh},547:{f:Eh},561:{},579:{},1030:{f:yc},1033:{f:yo},1091:{},2157:{},2163:{},2177:{},2240:{},2241:{},2242:{},2243:{},2244:{},2245:{},2246:{},2247:{},2248:{},2249:{},2250:{},2251:{},2262:{r:12},29282:{}};function pe(e,t,r,n){var a=t;if(!isNaN(a)){var i=n||(r||[]).length||0,s=e.next(4);s.write_shift(2,a),s.write_shift(2,i),i>0&&zl(r)&&e.push(r)}}function Z4(e,t,r,n){var a=n||(r||[]).length||0;if(a<=8224)return pe(e,t,r,a);var i=t;if(!isNaN(i)){for(var s=r.parts||[],o=0,c=0,f=0;f+(s[o]||8224)<=8224;)f+=s[o]||8224,o++;var u=e.next(4);for(u.write_shift(2,i),u.write_shift(2,f),e.push(r.slice(c,c+f)),c+=f;c<a;){for(u=e.next(4),u.write_shift(2,60),f=0;f+(s[o]||8224)<=8224;)f+=s[o]||8224,o++;u.write_shift(2,f),e.push(r.slice(c,c+f)),c+=f}}}function ds(e,t,r){return e||(e=ne(7)),e.write_shift(2,t),e.write_shift(2,r),e.write_shift(2,0),e.write_shift(1,0),e}function Q4(e,t,r,n){var a=ne(9);return ds(a,e,t),ch(r,n||"b",a),a}function eA(e,t,r){var n=ne(8+2*r.length);return ds(n,e,t),n.write_shift(1,r.length),n.write_shift(r.length,r,"sbcs"),n.l<n.length?n.slice(0,n.l):n}function tA(e,t,r,n){if(t.v!=null)switch(t.t){case"d":case"n":var a=t.t=="d"?Nt(it(t.v)):t.v;a==(a|0)&&a>=0&&a<65536?pe(e,2,Jk(r,n,a)):pe(e,3,Yk(r,n,a));return;case"b":case"e":pe(e,5,Q4(r,n,t.v,t.t));return;case"s":case"str":pe(e,4,eA(r,n,(t.v||"").slice(0,255)));return}pe(e,1,ds(null,r,n))}function rA(e,t,r,n){var a=Array.isArray(t),i=Xe(t["!ref"]||"A1"),s,o="",c=[];if(i.e.c>255||i.e.r>16383){if(n.WTF)throw new Error("Range "+(t["!ref"]||"A1")+" exceeds format limit A1:IV16384");i.e.c=Math.min(i.e.c,255),i.e.r=Math.min(i.e.c,16383),s=Pe(i)}for(var f=i.s.r;f<=i.e.r;++f){o=Et(f);for(var u=i.s.c;u<=i.e.c;++u){f===i.s.r&&(c[u]=dt(u)),s=c[u]+o;var d=a?(t[f]||[])[u]:t[s];d&&tA(e,d,f,u)}}}function nA(e,t){for(var r=t||{},n=pr(),a=0,i=0;i<e.SheetNames.length;++i)e.SheetNames[i]==r.sheet&&(a=i);if(a==0&&r.sheet&&e.SheetNames[0]!=r.sheet)throw new Error("Sheet not found: "+r.sheet);return pe(n,r.biff==4?1033:r.biff==3?521:9,fc(e,16,r)),rA(n,e.Sheets[e.SheetNames[a]],a,r),pe(n,10),n.end()}function aA(e,t,r){pe(e,49,Jy({sz:12,color:{theme:1},name:"Arial",family:2,scheme:"minor"},r))}function iA(e,t,r){t&&[[5,8],[23,26],[41,44],[50,392]].forEach(function(n){for(var a=n[0];a<=n[1];++a)t[a]!=null&&pe(e,1054,nk(a,t[a],r))})}function sA(e,t){var r=ne(19);r.write_shift(4,2151),r.write_shift(4,0),r.write_shift(4,0),r.write_shift(2,3),r.write_shift(1,1),r.write_shift(4,0),pe(e,2151,r),r=ne(39),r.write_shift(4,2152),r.write_shift(4,0),r.write_shift(4,0),r.write_shift(2,3),r.write_shift(1,0),r.write_shift(4,0),r.write_shift(2,1),r.write_shift(4,4),r.write_shift(2,0),ph(Xe(t["!ref"]||"A1"),r),r.write_shift(4,4),pe(e,2152,r)}function oA(e,t){for(var r=0;r<16;++r)pe(e,224,_h({numFmtId:0,style:!0},0,t));t.cellXfs.forEach(function(n){pe(e,224,_h(n,0,t))})}function lA(e,t){for(var r=0;r<t["!links"].length;++r){var n=t["!links"][r];pe(e,440,Rk(n)),n[1].Tooltip&&pe(e,2048,Bk(n))}delete t["!links"]}function cA(e,t){if(t){var r=0;t.forEach(function(n,a){++r<=256&&n&&pe(e,125,Vk(Fo(a,n),a))})}}function fA(e,t,r,n,a){var i=16+ta(a.cellXfs,t,a);if(t.v==null&&!t.bf){pe(e,513,Sa(r,n,i));return}if(t.bf)pe(e,6,PT(t,r,n,a,i));else switch(t.t){case"d":case"n":var s=t.t=="d"?Nt(it(t.v)):t.v;pe(e,515,pk(r,n,s,i));break;case"b":case"e":pe(e,517,hk(r,n,t.v,i,a,t.t));break;case"s":case"str":if(a.bookSST){var o=Ec(a.Strings,t.v,a.revStrings);pe(e,253,Qy(r,n,o,i))}else pe(e,516,tk(r,n,(t.v||"").slice(0,255),i,a));break;default:pe(e,513,Sa(r,n,i))}}function uA(e,t,r){var n=pr(),a=r.SheetNames[e],i=r.Sheets[a]||{},s=(r||{}).Workbook||{},o=(s.Sheets||[])[e]||{},c=Array.isArray(i),f=t.biff==8,u,d="",h=[],p=Xe(i["!ref"]||"A1"),g=f?65536:16384;if(p.e.c>255||p.e.r>=g){if(t.WTF)throw new Error("Range "+(i["!ref"]||"A1")+" exceeds format limit A1:IV16384");p.e.c=Math.min(p.e.c,255),p.e.r=Math.min(p.e.c,g-1)}pe(n,2057,fc(r,16,t)),pe(n,13,Vr(1)),pe(n,12,Vr(100)),pe(n,15,fr(!0)),pe(n,17,fr(!1)),pe(n,16,_a(.001)),pe(n,95,fr(!0)),pe(n,42,fr(!1)),pe(n,43,fr(!1)),pe(n,130,Vr(1)),pe(n,128,dk([0,0])),pe(n,131,fr(!1)),pe(n,132,fr(!1)),f&&cA(n,i["!cols"]),pe(n,512,ik(p,t)),f&&(i["!links"]=[]);for(var m=p.s.r;m<=p.e.r;++m){d=Et(m);for(var x=p.s.c;x<=p.e.c;++x){m===p.s.r&&(h[x]=dt(x)),u=h[x]+d;var v=c?(i[m]||[])[x]:i[u];v&&(fA(n,v,m,x,t),f&&v.l&&i["!links"].push([u,v.l]))}}var y=o.CodeName||o.name||a;return f&&pe(n,574,Ky((s.Views||[])[0])),f&&(i["!merges"]||[]).length&&pe(n,229,Sk(i["!merges"])),f&&lA(n,i),pe(n,442,fh(y)),f&&sA(n,i),pe(n,10),n.end()}function dA(e,t,r){var n=pr(),a=(e||{}).Workbook||{},i=a.Sheets||[],s=a.WBProps||{},o=r.biff==8,c=r.biff==5;if(pe(n,2057,fc(e,5,r)),r.bookType=="xla"&&pe(n,135),pe(n,225,o?Vr(1200):null),pe(n,193,hy(2)),c&&pe(n,191),c&&pe(n,192),pe(n,226),pe(n,92,Iy("SheetJS",r)),pe(n,66,Vr(o?1200:1252)),o&&pe(n,353,Vr(0)),o&&pe(n,448),pe(n,317,Wk(e.SheetNames.length)),o&&e.vbaraw&&pe(n,211),o&&e.vbaraw){var f=s.CodeName||"ThisWorkbook";pe(n,442,fh(f))}pe(n,156,Vr(17)),pe(n,25,fr(!1)),pe(n,18,fr(!1)),pe(n,19,Vr(0)),o&&pe(n,431,fr(!1)),o&&pe(n,444,Vr(0)),pe(n,61,Gy()),pe(n,64,fr(!1)),pe(n,141,Vr(0)),pe(n,34,fr(jF(e)=="true")),pe(n,14,fr(!0)),o&&pe(n,439,fr(!1)),pe(n,218,Vr(0)),aA(n,e,r),iA(n,e.SSF,r),oA(n,r),o&&pe(n,352,fr(!1));var u=n.end(),d=pr();o&&pe(d,140,Ik()),o&&r.Strings&&Z4(d,252,Uy(r.Strings)),pe(d,10);var h=d.end(),p=pr(),g=0,m=0;for(m=0;m<e.SheetNames.length;++m)g+=(o?12:11)+(o?2:1)*e.SheetNames[m].length;var x=u.length+g+h.length;for(m=0;m<e.SheetNames.length;++m){var v=i[m]||{};pe(p,133,My({pos:x,hs:v.Hidden||0,dt:0,name:e.SheetNames[m]},r)),x+=t[m].length}var y=p.end();if(g!=y.length)throw new Error("BS8 "+g+" != "+y.length);var _=[];return u.length&&_.push(u),y.length&&_.push(y),h.length&&_.push(h),Ut(_)}function hA(e,t){var r=t||{},n=[];e&&!e.SSF&&(e.SSF=st(Ce)),e&&e.SSF&&(Xa(),Vi(e.SSF),r.revssf=so(e.SSF),r.revssf[e.SSF[65535]]=0,r.ssf=e.SSF),r.Strings=[],r.Strings.Count=0,r.Strings.Unique=0,Ic(r),r.cellXfs=[],ta(r.cellXfs,{},{revssf:{General:0}}),e.Props||(e.Props={});for(var a=0;a<e.SheetNames.length;++a)n[n.length]=uA(a,r,e);return n.unshift(dA(e,n,r)),Ut(n)}function ym(e,t){for(var r=0;r<=e.SheetNames.length;++r){var n=e.Sheets[e.SheetNames[r]];if(!(!n||!n["!ref"])){var a=gr(n["!ref"]);a.e.c>255&&typeof console<"u"&&console.error&&console.error("Worksheet '"+e.SheetNames[r]+"' extends beyond column IV (255).  Data may be lost.")}}var i=t||{};switch(i.biff||2){case 8:case 5:return hA(e,t);case 4:case 3:case 2:return nA(e,t)}throw new Error("invalid type "+i.bookType+" for BIFF")}function km(e,t){var r=t||{},n=r.dense?[]:{};e=e.replace(/<!--.*?-->/g,"");var a=e.match(/<table/i);if(!a)throw new Error("Invalid HTML: could not find <table>");var i=e.match(/<\/table/i),s=a.index,o=i&&i.index||e.length,c=Z2(e.slice(s,o),/(:?<tr[^>]*>)/i,"<tr>"),f=-1,u=0,d=0,h=0,p={s:{r:1e7,c:1e7},e:{r:0,c:0}},g=[];for(s=0;s<c.length;++s){var m=c[s].trim(),x=m.slice(0,3).toLowerCase();if(x=="<tr"){if(++f,r.sheetRows&&r.sheetRows<=f){--f;break}u=0;continue}if(!(x!="<td"&&x!="<th")){var v=m.split(/<\/t[dh]>/i);for(o=0;o<v.length;++o){var y=v[o].trim();if(y.match(/<t[dh]/i)){for(var _=y,b=0;_.charAt(0)=="<"&&(b=_.indexOf(">"))>-1;)_=_.slice(b+1);for(var D=0;D<g.length;++D){var C=g[D];C.s.c==u&&C.s.r<f&&f<=C.e.r&&(u=C.e.c+1,D=-1)}var k=Oe(y.slice(0,y.indexOf(">")));h=k.colspan?+k.colspan:1,((d=+k.rowspan)>1||h>1)&&g.push({s:{r:f,c:u},e:{r:f+(d||1)-1,c:u+h-1}});var F=k.t||k["data-t"]||"";if(!_.length){u+=h;continue}if(_=fd(_),p.s.r>f&&(p.s.r=f),p.e.r<f&&(p.e.r=f),p.s.c>u&&(p.s.c=u),p.e.c<u&&(p.e.c=u),!_.length){u+=h;continue}var O={t:"s",v:_};r.raw||!_.trim().length||F=="s"||(_==="TRUE"?O={t:"b",v:!0}:_==="FALSE"?O={t:"b",v:!1}:isNaN(Jr(_))?isNaN(Ka(_).getDate())||(O={t:"d",v:it(_)},r.cellDates||(O={t:"n",v:Nt(O.v)}),O.z=r.dateNF||Ce[14]):O={t:"n",v:Jr(_)}),r.dense?(n[f]||(n[f]=[]),n[f][u]=O):n[Ae({r:f,c:u})]=O,u+=h}}}}return n["!ref"]=Pe(p),g.length&&(n["!merges"]=g),n}function mA(e,t,r,n){for(var a=e["!merges"]||[],i=[],s=t.s.c;s<=t.e.c;++s){for(var o=0,c=0,f=0;f<a.length;++f)if(!(a[f].s.r>r||a[f].s.c>s)&&!(a[f].e.r<r||a[f].e.c<s)){if(a[f].s.r<r||a[f].s.c<s){o=-1;break}o=a[f].e.r-a[f].s.r+1,c=a[f].e.c-a[f].s.c+1;break}if(!(o<0)){var u=Ae({r,c:s}),d=n.dense?(e[r]||[])[s]:e[u],h=d&&d.v!=null&&(d.h||Ul(d.w||(Bn(d),d.w)||""))||"",p={};o>1&&(p.rowspan=o),c>1&&(p.colspan=c),n.editable?h='<span contenteditable="true">'+h+"</span>":d&&(p["data-t"]=d&&d.t||"z",d.v!=null&&(p["data-v"]=d.v),d.z!=null&&(p["data-z"]=d.z),d.l&&(d.l.Target||"#").charAt(0)!="#"&&(h='<a href="'+d.l.Target+'">'+h+"</a>")),p.id=(n.id||"sjs")+"-"+u,i.push(me("td",h,p))}}var g="<tr>";return g+i.join("")+"</tr>"}var pA='<html><head><meta charset="utf-8"/><title>SheetJS Table Export</title></head><body>',gA="</body></html>";function xA(e,t){var r=e.match(/<table[\s\S]*?>[\s\S]*?<\/table>/gi);if(!r||r.length==0)throw new Error("Invalid HTML: could not find <table>");if(r.length==1)return Jn(km(r[0],t),t);var n=Uc();return r.forEach(function(a,i){$c(n,km(a,t),"Sheet"+(i+1))}),n}function vA(e,t,r){var n=[];return n.join("")+"<table"+(r&&r.id?' id="'+r.id+'"':"")+">"}function Em(e,t){var r=t||{},n=r.header!=null?r.header:pA,a=r.footer!=null?r.footer:gA,i=[n],s=gr(e["!ref"]);r.dense=Array.isArray(e),i.push(vA(e,s,r));for(var o=s.s.r;o<=s.e.r;++o)i.push(mA(e,s,o,r));return i.push("</table>"+a),i.join("")}function bm(e,t,r){var n=r||{},a=0,i=0;if(n.origin!=null)if(typeof n.origin=="number")a=n.origin;else{var s=typeof n.origin=="string"?ht(n.origin):n.origin;a=s.r,i=s.c}var o=t.getElementsByTagName("tr"),c=Math.min(n.sheetRows||1e7,o.length),f={s:{r:0,c:0},e:{r:a,c:i}};if(e["!ref"]){var u=gr(e["!ref"]);f.s.r=Math.min(f.s.r,u.s.r),f.s.c=Math.min(f.s.c,u.s.c),f.e.r=Math.max(f.e.r,u.e.r),f.e.c=Math.max(f.e.c,u.e.c),a==-1&&(f.e.r=a=u.e.r+1)}var d=[],h=0,p=e["!rows"]||(e["!rows"]=[]),g=0,m=0,x=0,v=0,y=0,_=0;for(e["!cols"]||(e["!cols"]=[]);g<o.length&&m<c;++g){var b=o[g];if(Tm(b)){if(n.display)continue;p[m]={hidden:!0}}var D=b.children;for(x=v=0;x<D.length;++x){var C=D[x];if(!(n.display&&Tm(C))){var k=C.hasAttribute("data-v")?C.getAttribute("data-v"):C.hasAttribute("v")?C.getAttribute("v"):fd(C.innerHTML),F=C.getAttribute("data-z")||C.getAttribute("z");for(h=0;h<d.length;++h){var O=d[h];O.s.c==v+i&&O.s.r<m+a&&m+a<=O.e.r&&(v=O.e.c+1-i,h=-1)}_=+C.getAttribute("colspan")||1,((y=+C.getAttribute("rowspan")||1)>1||_>1)&&d.push({s:{r:m+a,c:v+i},e:{r:m+a+(y||1)-1,c:v+i+(_||1)-1}});var X={t:"s",v:k},j=C.getAttribute("data-t")||C.getAttribute("t")||"";k!=null&&(k.length==0?X.t=j||"z":n.raw||k.trim().length==0||j=="s"||(k==="TRUE"?X={t:"b",v:!0}:k==="FALSE"?X={t:"b",v:!1}:isNaN(Jr(k))?isNaN(Ka(k).getDate())||(X={t:"d",v:it(k)},n.cellDates||(X={t:"n",v:Nt(X.v)}),X.z=n.dateNF||Ce[14]):X={t:"n",v:Jr(k)})),X.z===void 0&&F!=null&&(X.z=F);var I="",G=C.getElementsByTagName("A");if(G&&G.length)for(var re=0;re<G.length&&!(G[re].hasAttribute("href")&&(I=G[re].getAttribute("href"),I.charAt(0)!="#"));++re);I&&I.charAt(0)!="#"&&(X.l={Target:I}),n.dense?(e[m+a]||(e[m+a]=[]),e[m+a][v+i]=X):e[Ae({c:v+i,r:m+a})]=X,f.e.c<v+i&&(f.e.c=v+i),v+=_}}++m}return d.length&&(e["!merges"]=(e["!merges"]||[]).concat(d)),f.e.r=Math.max(f.e.r,m-1+a),e["!ref"]=Pe(f),m>=c&&(e["!fullref"]=Pe((f.e.r=o.length-g+m-1+a,f))),e}function Sm(e,t){var r=t||{},n=r.dense?[]:{};return bm(n,e,t)}function wA(e,t){return Jn(Sm(e,t),t)}function Tm(e){var t="",r=_A(e);return r&&(t=r(e).getPropertyValue("display")),t||(t=e.style&&e.style.display),t==="none"}function _A(e){return e.ownerDocument.defaultView&&typeof e.ownerDocument.defaultView.getComputedStyle=="function"?e.ownerDocument.defaultView.getComputedStyle:typeof getComputedStyle=="function"?getComputedStyle:null}function yA(e){var t=e.replace(/[\t\r\n]/g," ").trim().replace(/ +/g," ").replace(/<text:s\/>/g," ").replace(/<text:s text:c="(\d+)"\/>/g,function(n,a){return Array(parseInt(a,10)+1).join(" ")}).replace(/<text:tab[^>]*\/>/g,"	").replace(/<text:line-break\/>/g,`
`),r=Ge(t.replace(/<[^>]*>/g,""));return[r]}var Cm={day:["d","dd"],month:["m","mm"],year:["y","yy"],hours:["h","hh"],minutes:["m","mm"],seconds:["s","ss"],"am-pm":["A/P","AM/PM"],"day-of-week":["ddd","dddd"],era:["e","ee"],quarter:["\\Qm",'m\\"th quarter"']};function Fm(e,t){var r=t||{},n=Hl(e),a=[],i,s,o={name:""},c="",f=0,u,d,h={},p=[],g=r.dense?[]:{},m,x,v={value:""},y="",_=0,b=[],D=-1,C=-1,k={s:{r:1e6,c:1e7},e:{r:0,c:0}},F=0,O={},X=[],j={},I=0,G=0,re=[],ae=1,oe=1,fe=[],ke={Names:[]},H={},le=["",""],B=[],w={},S="",T=0,R=!1,W=!1,Y=0;for(ji.lastIndex=0,n=n.replace(/<!--([\s\S]*?)-->/mg,"").replace(/<!DOCTYPE[^\[]*\[[^\]]*\]>/gm,"");m=ji.exec(n);)switch(m[3]=m[3].replace(/_.*$/,"")){case"table":case"工作表":m[1]==="/"?(k.e.c>=k.s.c&&k.e.r>=k.s.r?g["!ref"]=Pe(k):g["!ref"]="A1:A1",r.sheetRows>0&&r.sheetRows<=k.e.r&&(g["!fullref"]=g["!ref"],k.e.r=r.sheetRows-1,g["!ref"]=Pe(k)),X.length&&(g["!merges"]=X),re.length&&(g["!rows"]=re),u.name=u.名称||u.name,typeof JSON<"u"&&JSON.stringify(u),p.push(u.name),h[u.name]=g,W=!1):m[0].charAt(m[0].length-2)!=="/"&&(u=Oe(m[0],!1),D=C=-1,k.s.r=k.s.c=1e7,k.e.r=k.e.c=0,g=r.dense?[]:{},X=[],re=[],W=!0);break;case"table-row-group":m[1]==="/"?--F:++F;break;case"table-row":case"行":if(m[1]==="/"){D+=ae,ae=1;break}if(d=Oe(m[0],!1),d.行号?D=d.行号-1:D==-1&&(D=0),ae=+d["number-rows-repeated"]||1,ae<10)for(Y=0;Y<ae;++Y)F>0&&(re[D+Y]={level:F});C=-1;break;case"covered-table-cell":m[1]!=="/"&&++C,r.sheetStubs&&(r.dense?(g[D]||(g[D]=[]),g[D][C]={t:"z"}):g[Ae({r:D,c:C})]={t:"z"}),y="",b=[];break;case"table-cell":case"数据":if(m[0].charAt(m[0].length-2)==="/")++C,v=Oe(m[0],!1),oe=parseInt(v["number-columns-repeated"]||"1",10),x={t:"z",v:null},v.formula&&r.cellFormula!=!1&&(x.f=sm(Ge(v.formula))),(v.数据类型||v["value-type"])=="string"&&(x.t="s",x.v=Ge(v["string-value"]||""),r.dense?(g[D]||(g[D]=[]),g[D][C]=x):g[Ae({r:D,c:C})]=x),C+=oe-1;else if(m[1]!=="/"){++C,y="",_=0,b=[],oe=1;var q=ae?D+ae-1:D;if(C>k.e.c&&(k.e.c=C),C<k.s.c&&(k.s.c=C),D<k.s.r&&(k.s.r=D),q>k.e.r&&(k.e.r=q),v=Oe(m[0],!1),B=[],w={},x={t:v.数据类型||v["value-type"],v:null},r.cellFormula)if(v.formula&&(v.formula=Ge(v.formula)),v["number-matrix-columns-spanned"]&&v["number-matrix-rows-spanned"]&&(I=parseInt(v["number-matrix-rows-spanned"],10)||0,G=parseInt(v["number-matrix-columns-spanned"],10)||0,j={s:{r:D,c:C},e:{r:D+I-1,c:C+G-1}},x.F=Pe(j),fe.push([j,x.F])),v.formula)x.f=sm(v.formula);else for(Y=0;Y<fe.length;++Y)D>=fe[Y][0].s.r&&D<=fe[Y][0].e.r&&C>=fe[Y][0].s.c&&C<=fe[Y][0].e.c&&(x.F=fe[Y][1]);switch((v["number-columns-spanned"]||v["number-rows-spanned"])&&(I=parseInt(v["number-rows-spanned"],10)||0,G=parseInt(v["number-columns-spanned"],10)||0,j={s:{r:D,c:C},e:{r:D+I-1,c:C+G-1}},X.push(j)),v["number-columns-repeated"]&&(oe=parseInt(v["number-columns-repeated"],10)),x.t){case"boolean":x.t="b",x.v=ot(v["boolean-value"]);break;case"float":x.t="n",x.v=parseFloat(v.value);break;case"percentage":x.t="n",x.v=parseFloat(v.value);break;case"currency":x.t="n",x.v=parseFloat(v.value);break;case"date":x.t="d",x.v=it(v["date-value"]),r.cellDates||(x.t="n",x.v=Nt(x.v)),x.z="m/d/yy";break;case"time":x.t="n",x.v=Y2(v["time-value"])/86400,r.cellDates&&(x.t="d",x.v=lo(x.v)),x.z="HH:MM:SS";break;case"number":x.t="n",x.v=parseFloat(v.数据数值);break;default:if(x.t==="string"||x.t==="text"||!x.t)x.t="s",v["string-value"]!=null&&(y=Ge(v["string-value"]),b=[]);else throw new Error("Unsupported value type "+x.t)}}else{if(R=!1,x.t==="s"&&(x.v=y||"",b.length&&(x.R=b),R=_==0),H.Target&&(x.l=H),B.length>0&&(x.c=B,B=[]),y&&r.cellText!==!1&&(x.w=y),R&&(x.t="z",delete x.v),(!R||r.sheetStubs)&&!(r.sheetRows&&r.sheetRows<=D))for(var K=0;K<ae;++K){if(oe=parseInt(v["number-columns-repeated"]||"1",10),r.dense)for(g[D+K]||(g[D+K]=[]),g[D+K][C]=K==0?x:st(x);--oe>0;)g[D+K][C+oe]=st(x);else for(g[Ae({r:D+K,c:C})]=x;--oe>0;)g[Ae({r:D+K,c:C+oe})]=st(x);k.e.c<=C&&(k.e.c=C)}oe=parseInt(v["number-columns-repeated"]||"1",10),C+=oe-1,oe=0,x={},y="",b=[]}H={};break;case"document":case"document-content":case"电子表格文档":case"spreadsheet":case"主体":case"scripts":case"styles":case"font-face-decls":case"master-styles":if(m[1]==="/"){if((i=a.pop())[0]!==m[3])throw"Bad state: "+i}else m[0].charAt(m[0].length-2)!=="/"&&a.push([m[3],!0]);break;case"annotation":if(m[1]==="/"){if((i=a.pop())[0]!==m[3])throw"Bad state: "+i;w.t=y,b.length&&(w.R=b),w.a=S,B.push(w)}else m[0].charAt(m[0].length-2)!=="/"&&a.push([m[3],!1]);S="",T=0,y="",_=0,b=[];break;case"creator":m[1]==="/"?S=n.slice(T,m.index):T=m.index+m[0].length;break;case"meta":case"元数据":case"settings":case"config-item-set":case"config-item-map-indexed":case"config-item-map-entry":case"config-item-map-named":case"shapes":case"frame":case"text-box":case"image":case"data-pilot-tables":case"list-style":case"form":case"dde-links":case"event-listeners":case"chart":if(m[1]==="/"){if((i=a.pop())[0]!==m[3])throw"Bad state: "+i}else m[0].charAt(m[0].length-2)!=="/"&&a.push([m[3],!1]);y="",_=0,b=[];break;case"scientific-number":break;case"currency-symbol":break;case"currency-style":break;case"number-style":case"percentage-style":case"date-style":case"time-style":if(m[1]==="/"){if(O[o.name]=c,(i=a.pop())[0]!==m[3])throw"Bad state: "+i}else m[0].charAt(m[0].length-2)!=="/"&&(c="",o=Oe(m[0],!1),a.push([m[3],!0]));break;case"script":break;case"libraries":break;case"automatic-styles":break;case"default-style":case"page-layout":break;case"style":break;case"map":break;case"font-face":break;case"paragraph-properties":break;case"table-properties":break;case"table-column-properties":break;case"table-row-properties":break;case"table-cell-properties":break;case"number":switch(a[a.length-1][0]){case"time-style":case"date-style":s=Oe(m[0],!1),c+=Cm[m[3]][s.style==="long"?1:0];break}break;case"fraction":break;case"day":case"month":case"year":case"era":case"day-of-week":case"week-of-year":case"quarter":case"hours":case"minutes":case"seconds":case"am-pm":switch(a[a.length-1][0]){case"time-style":case"date-style":s=Oe(m[0],!1),c+=Cm[m[3]][s.style==="long"?1:0];break}break;case"boolean-style":break;case"boolean":break;case"text-style":break;case"text":if(m[0].slice(-2)==="/>")break;if(m[1]==="/")switch(a[a.length-1][0]){case"number-style":case"date-style":case"time-style":c+=n.slice(f,m.index);break}else f=m.index+m[0].length;break;case"named-range":s=Oe(m[0],!1),le=kc(s["cell-range-address"]);var ee={Name:s.name,Ref:le[0]+"!"+le[1]};W&&(ee.Sheet=p.length),ke.Names.push(ee);break;case"text-content":break;case"text-properties":break;case"embedded-text":break;case"body":case"电子表格":break;case"forms":break;case"table-column":break;case"table-header-rows":break;case"table-rows":break;case"table-column-group":break;case"table-header-columns":break;case"table-columns":break;case"null-date":break;case"graphic-properties":break;case"calculation-settings":break;case"named-expressions":break;case"label-range":break;case"label-ranges":break;case"named-expression":break;case"sort":break;case"sort-by":break;case"sort-groups":break;case"tab":break;case"line-break":break;case"span":break;case"p":case"文本串":if(["master-styles"].indexOf(a[a.length-1][0])>-1)break;if(m[1]==="/"&&(!v||!v["string-value"])){var ye=yA(n.slice(_,m.index));y=(y.length>0?y+`
`:"")+ye[0]}else Oe(m[0],!1),_=m.index+m[0].length;break;case"s":break;case"database-range":if(m[1]==="/")break;try{le=kc(Oe(m[0])["target-range-address"]),h[le[0]]["!autofilter"]={ref:le[1]}}catch{}break;case"date":break;case"object":break;case"title":case"标题":break;case"desc":break;case"binary-data":break;case"table-source":break;case"scenario":break;case"iteration":break;case"content-validations":break;case"content-validation":break;case"help-message":break;case"error-message":break;case"database-ranges":break;case"filter":break;case"filter-and":break;case"filter-or":break;case"filter-condition":break;case"list-level-style-bullet":break;case"list-level-style-number":break;case"list-level-properties":break;case"sender-firstname":case"sender-lastname":case"sender-initials":case"sender-title":case"sender-position":case"sender-email":case"sender-phone-private":case"sender-fax":case"sender-company":case"sender-phone-work":case"sender-street":case"sender-city":case"sender-postal-code":case"sender-country":case"sender-state-or-province":case"author-name":case"author-initials":case"chapter":case"file-name":case"template-name":case"sheet-name":break;case"event-listener":break;case"initial-creator":case"creation-date":case"print-date":case"generator":case"document-statistic":case"user-defined":case"editing-duration":case"editing-cycles":break;case"config-item":break;case"page-number":break;case"page-count":break;case"time":break;case"cell-range-source":break;case"detective":break;case"operation":break;case"highlighted-range":break;case"data-pilot-table":case"source-cell-range":case"source-service":case"data-pilot-field":case"data-pilot-level":case"data-pilot-subtotals":case"data-pilot-subtotal":case"data-pilot-members":case"data-pilot-member":case"data-pilot-display-info":case"data-pilot-sort-info":case"data-pilot-layout-info":case"data-pilot-field-reference":case"data-pilot-groups":case"data-pilot-group":case"data-pilot-group-member":break;case"rect":break;case"dde-connection-decls":case"dde-connection-decl":case"dde-link":case"dde-source":break;case"properties":break;case"property":break;case"a":if(m[1]!=="/"){if(H=Oe(m[0],!1),!H.href)break;H.Target=Ge(H.href),delete H.href,H.Target.charAt(0)=="#"&&H.Target.indexOf(".")>-1?(le=kc(H.Target.slice(1)),H.Target="#"+le[0]+"!"+le[1]):H.Target.match(/^\.\.[\\\/]/)&&(H.Target=H.Target.slice(3))}break;case"table-protection":break;case"data-pilot-grand-total":break;case"office-document-common-attrs":break;default:switch(m[2]){case"dc:":case"calcext:":case"loext:":case"ooo:":case"chartooo:":case"draw:":case"style:":case"chart:":case"form:":case"uof:":case"表:":case"字:":break;default:if(r.WTF)throw new Error(m)}}var M={Sheets:h,SheetNames:p,Workbook:ke};return r.bookSheets&&delete M.Sheets,M}function Am(e,t){t=t||{},Pr(e,"META-INF/manifest.xml")&&K_(Ct(e,"META-INF/manifest.xml"),t);var r=Tr(e,"content.xml");if(!r)throw new Error("Missing content.xml in ODS / UOF file");var n=Fm(nt(r),t);return Pr(e,"meta.xml")&&(n.Props=zd(Ct(e,"meta.xml"))),n}function Dm(e,t){return Fm(e,t)}var kA=function(){var e=["<office:master-styles>",'<style:master-page style:name="mp1" style:page-layout-name="mp1">',"<style:header/>",'<style:header-left style:display="false"/>',"<style:footer/>",'<style:footer-left style:display="false"/>',"</style:master-page>","</office:master-styles>"].join(""),t="<office:document-styles "+Hi({"xmlns:office":"urn:oasis:names:tc:opendocument:xmlns:office:1.0","xmlns:table":"urn:oasis:names:tc:opendocument:xmlns:table:1.0","xmlns:style":"urn:oasis:names:tc:opendocument:xmlns:style:1.0","xmlns:text":"urn:oasis:names:tc:opendocument:xmlns:text:1.0","xmlns:draw":"urn:oasis:names:tc:opendocument:xmlns:drawing:1.0","xmlns:fo":"urn:oasis:names:tc:opendocument:xmlns:xsl-fo-compatible:1.0","xmlns:xlink":"http://www.w3.org/1999/xlink","xmlns:dc":"http://purl.org/dc/elements/1.1/","xmlns:number":"urn:oasis:names:tc:opendocument:xmlns:datastyle:1.0","xmlns:svg":"urn:oasis:names:tc:opendocument:xmlns:svg-compatible:1.0","xmlns:of":"urn:oasis:names:tc:opendocument:xmlns:of:1.2","office:version":"1.2"})+">"+e+"</office:document-styles>";return function(){return kt+t}}(),Rm=function(){var e=function(i){return Qe(i).replace(/  +/g,function(s){return'<text:s text:c="'+s.length+'"/>'}).replace(/\t/g,"<text:tab/>").replace(/\n/g,"</text:p><text:p>").replace(/^ /,"<text:s/>").replace(/ $/,"<text:s/>")},t=`          <table:table-cell />
`,r=`          <table:covered-table-cell/>
`,n=function(i,s,o){var c=[];c.push('      <table:table table:name="'+Qe(s.SheetNames[o])+`" table:style-name="ta1">
`);var f=0,u=0,d=gr(i["!ref"]||"A1"),h=i["!merges"]||[],p=0,g=Array.isArray(i);if(i["!cols"])for(u=0;u<=d.e.c;++u)c.push("        <table:table-column"+(i["!cols"][u]?' table:style-name="co'+i["!cols"][u].ods+'"':"")+`></table:table-column>
`);var m="",x=i["!rows"]||[];for(f=0;f<d.s.r;++f)m=x[f]?' table:style-name="ro'+x[f].ods+'"':"",c.push("        <table:table-row"+m+`></table:table-row>
`);for(;f<=d.e.r;++f){for(m=x[f]?' table:style-name="ro'+x[f].ods+'"':"",c.push("        <table:table-row"+m+`>
`),u=0;u<d.s.c;++u)c.push(t);for(;u<=d.e.c;++u){var v=!1,y={},_="";for(p=0;p!=h.length;++p)if(!(h[p].s.c>u)&&!(h[p].s.r>f)&&!(h[p].e.c<u)&&!(h[p].e.r<f)){(h[p].s.c!=u||h[p].s.r!=f)&&(v=!0),y["table:number-columns-spanned"]=h[p].e.c-h[p].s.c+1,y["table:number-rows-spanned"]=h[p].e.r-h[p].s.r+1;break}if(v){c.push(r);continue}var b=Ae({r:f,c:u}),D=g?(i[f]||[])[u]:i[b];if(D&&D.f&&(y["table:formula"]=Qe(WT(D.f)),D.F&&D.F.slice(0,b.length)==b)){var C=gr(D.F);y["table:number-matrix-columns-spanned"]=C.e.c-C.s.c+1,y["table:number-matrix-rows-spanned"]=C.e.r-C.s.r+1}if(!D){c.push(t);continue}switch(D.t){case"b":_=D.v?"TRUE":"FALSE",y["office:value-type"]="boolean",y["office:boolean-value"]=D.v?"true":"false";break;case"n":_=D.w||String(D.v||0),y["office:value-type"]="float",y["office:value"]=D.v||0;break;case"s":case"str":_=D.v==null?"":D.v,y["office:value-type"]="string";break;case"d":_=D.w||it(D.v).toISOString(),y["office:value-type"]="date",y["office:date-value"]=it(D.v).toISOString(),y["table:style-name"]="ce1";break;default:c.push(t);continue}var k=e(_);if(D.l&&D.l.Target){var F=D.l.Target;F=F.charAt(0)=="#"?"#"+HT(F.slice(1)):F,F.charAt(0)!="#"&&!F.match(/^\w+:/)&&(F="../"+F),k=me("text:a",k,{"xlink:href":F.replace(/&/g,"&amp;")})}c.push("          "+me("table:table-cell",me("text:p",k,{}),y)+`
`)}c.push(`        </table:table-row>
`)}return c.push(`      </table:table>
`),c.join("")},a=function(i,s){i.push(` <office:automatic-styles>
`),i.push(`  <number:date-style style:name="N37" number:automatic-order="true">
`),i.push(`   <number:month number:style="long"/>
`),i.push(`   <number:text>/</number:text>
`),i.push(`   <number:day number:style="long"/>
`),i.push(`   <number:text>/</number:text>
`),i.push(`   <number:year/>
`),i.push(`  </number:date-style>
`);var o=0;s.SheetNames.map(function(f){return s.Sheets[f]}).forEach(function(f){if(f&&f["!cols"]){for(var u=0;u<f["!cols"].length;++u)if(f["!cols"][u]){var d=f["!cols"][u];if(d.width==null&&d.wpx==null&&d.wch==null)continue;Qn(d),d.ods=o;var h=f["!cols"][u].wpx+"px";i.push('  <style:style style:name="co'+o+`" style:family="table-column">
`),i.push('   <style:table-column-properties fo:break-before="auto" style:column-width="'+h+`"/>
`),i.push(`  </style:style>
`),++o}}});var c=0;s.SheetNames.map(function(f){return s.Sheets[f]}).forEach(function(f){if(f&&f["!rows"]){for(var u=0;u<f["!rows"].length;++u)if(f["!rows"][u]){f["!rows"][u].ods=c;var d=f["!rows"][u].hpx+"px";i.push('  <style:style style:name="ro'+c+`" style:family="table-row">
`),i.push('   <style:table-row-properties fo:break-before="auto" style:row-height="'+d+`"/>
`),i.push(`  </style:style>
`),++c}}}),i.push(`  <style:style style:name="ta1" style:family="table" style:master-page-name="mp1">
`),i.push(`   <style:table-properties table:display="true" style:writing-mode="lr-tb"/>
`),i.push(`  </style:style>
`),i.push(`  <style:style style:name="ce1" style:family="table-cell" style:parent-style-name="Default" style:data-style-name="N37"/>
`),i.push(` </office:automatic-styles>
`)};return function(s,o){var c=[kt],f=Hi({"xmlns:office":"urn:oasis:names:tc:opendocument:xmlns:office:1.0","xmlns:table":"urn:oasis:names:tc:opendocument:xmlns:table:1.0","xmlns:style":"urn:oasis:names:tc:opendocument:xmlns:style:1.0","xmlns:text":"urn:oasis:names:tc:opendocument:xmlns:text:1.0","xmlns:draw":"urn:oasis:names:tc:opendocument:xmlns:drawing:1.0","xmlns:fo":"urn:oasis:names:tc:opendocument:xmlns:xsl-fo-compatible:1.0","xmlns:xlink":"http://www.w3.org/1999/xlink","xmlns:dc":"http://purl.org/dc/elements/1.1/","xmlns:meta":"urn:oasis:names:tc:opendocument:xmlns:meta:1.0","xmlns:number":"urn:oasis:names:tc:opendocument:xmlns:datastyle:1.0","xmlns:presentation":"urn:oasis:names:tc:opendocument:xmlns:presentation:1.0","xmlns:svg":"urn:oasis:names:tc:opendocument:xmlns:svg-compatible:1.0","xmlns:chart":"urn:oasis:names:tc:opendocument:xmlns:chart:1.0","xmlns:dr3d":"urn:oasis:names:tc:opendocument:xmlns:dr3d:1.0","xmlns:math":"http://www.w3.org/1998/Math/MathML","xmlns:form":"urn:oasis:names:tc:opendocument:xmlns:form:1.0","xmlns:script":"urn:oasis:names:tc:opendocument:xmlns:script:1.0","xmlns:ooo":"http://openoffice.org/2004/office","xmlns:ooow":"http://openoffice.org/2004/writer","xmlns:oooc":"http://openoffice.org/2004/calc","xmlns:dom":"http://www.w3.org/2001/xml-events","xmlns:xforms":"http://www.w3.org/2002/xforms","xmlns:xsd":"http://www.w3.org/2001/XMLSchema","xmlns:xsi":"http://www.w3.org/2001/XMLSchema-instance","xmlns:sheet":"urn:oasis:names:tc:opendocument:sh33tjs:1.0","xmlns:rpt":"http://openoffice.org/2005/report","xmlns:of":"urn:oasis:names:tc:opendocument:xmlns:of:1.2","xmlns:xhtml":"http://www.w3.org/1999/xhtml","xmlns:grddl":"http://www.w3.org/2003/g/data-view#","xmlns:tableooo":"http://openoffice.org/2009/table","xmlns:drawooo":"http://openoffice.org/2010/draw","xmlns:calcext":"urn:org:documentfoundation:names:experimental:calc:xmlns:calcext:1.0","xmlns:loext":"urn:org:documentfoundation:names:experimental:office:xmlns:loext:1.0","xmlns:field":"urn:openoffice:names:experimental:ooo-ms-interop:xmlns:field:1.0","xmlns:formx":"urn:openoffice:names:experimental:ooxml-odf-interop:xmlns:form:1.0","xmlns:css3t":"http://www.w3.org/TR/css3-text/","office:version":"1.2"}),u=Hi({"xmlns:config":"urn:oasis:names:tc:opendocument:xmlns:config:1.0","office:mimetype":"application/vnd.oasis.opendocument.spreadsheet"});o.bookType=="fods"?(c.push("<office:document"+f+u+`>
`),c.push(jd().replace(/office:document-meta/g,"office:meta"))):c.push("<office:document-content"+f+`>
`),a(c,s),c.push(`  <office:body>
`),c.push(`    <office:spreadsheet>
`);for(var d=0;d!=s.SheetNames.length;++d)c.push(n(s.Sheets[s.SheetNames[d]],s,d));return c.push(`    </office:spreadsheet>
`),c.push(`  </office:body>
`),o.bookType=="fods"?c.push("</office:document>"):c.push("</office:document-content>"),c.join("")}}();function Om(e,t){if(t.bookType=="fods")return Rm(e,t);var r=Ll(),n="",a=[],i=[];return n="mimetype",Me(r,n,"application/vnd.oasis.opendocument.spreadsheet"),n="content.xml",Me(r,n,Rm(e,t)),a.push([n,"text/xml"]),i.push([n,"ContentFile"]),n="styles.xml",Me(r,n,kA(e,t)),a.push([n,"text/xml"]),i.push([n,"StylesFile"]),n="meta.xml",Me(r,n,kt+jd()),a.push([n,"text/xml"]),i.push([n,"MetadataFile"]),n="manifest.rdf",Me(r,n,J_(i)),a.push([n,"application/rdf+xml"]),n="META-INF/manifest.xml",Me(r,n,Y_(a)),r}/*! sheetjs (C) 2013-present SheetJS -- http://sheetjs.com */function Fa(e){return new DataView(e.buffer,e.byteOffset,e.byteLength)}function Ac(e){return typeof TextDecoder<"u"?new TextDecoder().decode(e):nt(Kn(e))}function EA(e){return typeof TextEncoder<"u"?new TextEncoder().encode(e):br(gn(e))}function bA(e,t){e:for(var r=0;r<=e.length-t.length;++r){for(var n=0;n<t.length;++n)if(e[r+n]!=t[n])continue e;return!0}return!1}function ra(e){var t=e.reduce(function(a,i){return a+i.length},0),r=new Uint8Array(t),n=0;return e.forEach(function(a){r.set(a,n),n+=a.length}),r}function Bm(e){return e-=e>>1&1431655765,e=(e&858993459)+(e>>2&858993459),(e+(e>>4)&252645135)*16843009>>>24}function SA(e,t){for(var r=(e[t+15]&127)<<7|e[t+14]>>1,n=e[t+14]&1,a=t+13;a>=t;--a)n=n*256+e[a];return(e[t+15]&128?-n:n)*Math.pow(10,r-6176)}function TA(e,t,r){var n=Math.floor(r==0?0:Math.LOG10E*Math.log(Math.abs(r)))+6176-20,a=r/Math.pow(10,n-6176);e[t+15]|=n>>7,e[t+14]|=(n&127)<<1;for(var i=0;a>=1;++i,a/=256)e[t+i]=a&255;e[t+15]|=r>=0?0:128}function hs(e,t){var r=t?t[0]:0,n=e[r]&127;e:if(e[r++]>=128&&(n|=(e[r]&127)<<7,e[r++]<128||(n|=(e[r]&127)<<14,e[r++]<128)||(n|=(e[r]&127)<<21,e[r++]<128)||(n+=(e[r]&127)*Math.pow(2,28),++r,e[r++]<128)||(n+=(e[r]&127)*Math.pow(2,35),++r,e[r++]<128)||(n+=(e[r]&127)*Math.pow(2,42),++r,e[r++]<128)))break e;return t&&(t[0]=r),n}function tt(e){var t=new Uint8Array(7);t[0]=e&127;var r=1;e:if(e>127){if(t[r-1]|=128,t[r]=e>>7&127,++r,e<=16383||(t[r-1]|=128,t[r]=e>>14&127,++r,e<=2097151)||(t[r-1]|=128,t[r]=e>>21&127,++r,e<=268435455)||(t[r-1]|=128,t[r]=e/256>>>21&127,++r,e<=34359738367)||(t[r-1]|=128,t[r]=e/65536>>>21&127,++r,e<=4398046511103))break e;t[r-1]|=128,t[r]=e/16777216>>>21&127,++r}return t.slice(0,r)}function yt(e){var t=0,r=e[t]&127;e:if(e[t++]>=128){if(r|=(e[t]&127)<<7,e[t++]<128||(r|=(e[t]&127)<<14,e[t++]<128)||(r|=(e[t]&127)<<21,e[t++]<128))break e;r|=(e[t]&127)<<28}return r}function qe(e){for(var t=[],r=[0];r[0]<e.length;){var n=r[0],a=hs(e,r),i=a&7;a=Math.floor(a/8);var s=0,o;if(a==0)break;switch(i){case 0:{for(var c=r[0];e[r[0]++]>=128;);o=e.slice(c,r[0])}break;case 5:s=4,o=e.slice(r[0],r[0]+s),r[0]+=s;break;case 1:s=8,o=e.slice(r[0],r[0]+s),r[0]+=s;break;case 2:s=hs(e,r),o=e.slice(r[0],r[0]+s),r[0]+=s;break;case 3:case 4:default:throw new Error("PB Type ".concat(i," for Field ").concat(a," at offset ").concat(n))}var f={data:o,type:i};t[a]==null?t[a]=[f]:t[a].push(f)}return t}function Kt(e){var t=[];return e.forEach(function(r,n){r.forEach(function(a){a.data&&(t.push(tt(n*8+a.type)),a.type==2&&t.push(tt(a.data.length)),t.push(a.data))})}),ra(t)}function Dc(e,t){return(e==null?void 0:e.map(function(r){return t(r.data)}))||[]}function Ur(e){for(var t,r=[],n=[0];n[0]<e.length;){var a=hs(e,n),i=qe(e.slice(n[0],n[0]+a));n[0]+=a;var s={id:yt(i[1][0].data),messages:[]};i[2].forEach(function(o){var c=qe(o.data),f=yt(c[3][0].data);s.messages.push({meta:c,data:e.slice(n[0],n[0]+f)}),n[0]+=f}),(t=i[3])!=null&&t[0]&&(s.merge=yt(i[3][0].data)>>>0>0),r.push(s)}return r}function ai(e){var t=[];return e.forEach(function(r){var n=[];n[1]=[{data:tt(r.id),type:0}],n[2]=[],r.merge!=null&&(n[3]=[{data:tt(+!!r.merge),type:0}]);var a=[];r.messages.forEach(function(s){a.push(s.data),s.meta[3]=[{type:0,data:tt(s.data.length)}],n[2].push({data:Kt(s.meta),type:2})});var i=Kt(n);t.push(tt(i.length)),t.push(i),a.forEach(function(s){return t.push(s)})}),ra(t)}function CA(e,t){if(e!=0)throw new Error("Unexpected Snappy chunk type ".concat(e));for(var r=[0],n=hs(t,r),a=[];r[0]<t.length;){var i=t[r[0]]&3;if(i==0){var s=t[r[0]++]>>2;if(s<60)++s;else{var o=s-59;s=t[r[0]],o>1&&(s|=t[r[0]+1]<<8),o>2&&(s|=t[r[0]+2]<<16),o>3&&(s|=t[r[0]+3]<<24),s>>>=0,s++,r[0]+=o}a.push(t.slice(r[0],r[0]+s)),r[0]+=s;continue}else{var c=0,f=0;if(i==1?(f=(t[r[0]]>>2&7)+4,c=(t[r[0]++]&224)<<3,c|=t[r[0]++]):(f=(t[r[0]++]>>2)+1,i==2?(c=t[r[0]]|t[r[0]+1]<<8,r[0]+=2):(c=(t[r[0]]|t[r[0]+1]<<8|t[r[0]+2]<<16|t[r[0]+3]<<24)>>>0,r[0]+=4)),a=[ra(a)],c==0)throw new Error("Invalid offset 0");if(c>a[0].length)throw new Error("Invalid offset beyond length");if(f>=c)for(a.push(a[0].slice(-c)),f-=c;f>=a[a.length-1].length;)a.push(a[a.length-1]),f-=a[a.length-1].length;a.push(a[0].slice(-c,-c+f))}}var u=ra(a);if(u.length!=n)throw new Error("Unexpected length: ".concat(u.length," != ").concat(n));return u}function $r(e){for(var t=[],r=0;r<e.length;){var n=e[r++],a=e[r]|e[r+1]<<8|e[r+2]<<16;r+=3,t.push(CA(n,e.slice(r,r+a))),r+=a}if(r!==e.length)throw new Error("data is not a valid framed stream!");return ra(t)}function ii(e){for(var t=[],r=0;r<e.length;){var n=Math.min(e.length-r,268435455),a=new Uint8Array(4);t.push(a);var i=tt(n),s=i.length;t.push(i),n<=60?(s++,t.push(new Uint8Array([n-1<<2]))):n<=256?(s+=2,t.push(new Uint8Array([240,n-1&255]))):n<=65536?(s+=3,t.push(new Uint8Array([244,n-1&255,n-1>>8&255]))):n<=16777216?(s+=4,t.push(new Uint8Array([248,n-1&255,n-1>>8&255,n-1>>16&255]))):n<=4294967296&&(s+=5,t.push(new Uint8Array([252,n-1&255,n-1>>8&255,n-1>>16&255,n-1>>>24&255]))),t.push(e.slice(r,r+n)),s+=n,a[0]=0,a[1]=s&255,a[2]=s>>8&255,a[3]=s>>16&255,r+=n}return ra(t)}function FA(e,t,r,n){var a=Fa(e),i=a.getUint32(4,!0),s=(n>1?12:8)+Bm(i&(n>1?3470:398))*4,o=-1,c=-1,f=NaN,u=new Date(2001,0,1);i&512&&(o=a.getUint32(s,!0),s+=4),s+=Bm(i&(n>1?12288:4096))*4,i&16&&(c=a.getUint32(s,!0),s+=4),i&32&&(f=a.getFloat64(s,!0),s+=8),i&64&&(u.setTime(u.getTime()+a.getFloat64(s,!0)*1e3),s+=8);var d;switch(e[2]){case 0:break;case 2:d={t:"n",v:f};break;case 3:d={t:"s",v:t[c]};break;case 5:d={t:"d",v:u};break;case 6:d={t:"b",v:f>0};break;case 7:d={t:"n",v:f/86400};break;case 8:d={t:"e",v:0};break;case 9:if(o>-1)d={t:"s",v:r[o]};else if(c>-1)d={t:"s",v:t[c]};else if(!isNaN(f))d={t:"n",v:f};else throw new Error("Unsupported cell type ".concat(e.slice(0,4)));break;default:throw new Error("Unsupported cell type ".concat(e.slice(0,4)))}return d}function AA(e,t,r){var n=Fa(e),a=n.getUint32(8,!0),i=12,s=-1,o=-1,c=NaN,f=NaN,u=new Date(2001,0,1);a&1&&(c=SA(e,i),i+=16),a&2&&(f=n.getFloat64(i,!0),i+=8),a&4&&(u.setTime(u.getTime()+n.getFloat64(i,!0)*1e3),i+=8),a&8&&(o=n.getUint32(i,!0),i+=4),a&16&&(s=n.getUint32(i,!0),i+=4);var d;switch(e[1]){case 0:break;case 2:d={t:"n",v:c};break;case 3:d={t:"s",v:t[o]};break;case 5:d={t:"d",v:u};break;case 6:d={t:"b",v:f>0};break;case 7:d={t:"n",v:f/86400};break;case 8:d={t:"e",v:0};break;case 9:if(s>-1)d={t:"s",v:r[s]};else throw new Error("Unsupported cell type ".concat(e[1]," : ").concat(a&31," : ").concat(e.slice(0,4)));break;case 10:d={t:"n",v:c};break;default:throw new Error("Unsupported cell type ".concat(e[1]," : ").concat(a&31," : ").concat(e.slice(0,4)))}return d}function Rc(e,t){var r=new Uint8Array(32),n=Fa(r),a=12,i=0;switch(r[0]=5,e.t){case"n":r[1]=2,TA(r,a,e.v),i|=1,a+=16;break;case"b":r[1]=6,n.setFloat64(a,e.v?1:0,!0),i|=2,a+=8;break;case"s":if(t.indexOf(e.v)==-1)throw new Error("Value ".concat(e.v," missing from SST!"));r[1]=3,n.setUint32(a,t.indexOf(e.v),!0),i|=8,a+=4;break;default:throw"unsupported cell type "+e.t}return n.setUint32(8,i,!0),r.slice(0,a)}function Oc(e,t){var r=new Uint8Array(32),n=Fa(r),a=12,i=0;switch(r[0]=3,e.t){case"n":r[2]=2,n.setFloat64(a,e.v,!0),i|=32,a+=8;break;case"b":r[2]=6,n.setFloat64(a,e.v?1:0,!0),i|=32,a+=8;break;case"s":if(t.indexOf(e.v)==-1)throw new Error("Value ".concat(e.v," missing from SST!"));r[2]=3,n.setUint32(a,t.indexOf(e.v),!0),i|=16,a+=4;break;default:throw"unsupported cell type "+e.t}return n.setUint32(4,i,!0),r.slice(0,a)}function DA(e,t,r){switch(e[0]){case 0:case 1:case 2:case 3:return FA(e,t,r,e[0]);case 5:return AA(e,t,r);default:throw new Error("Unsupported payload version ".concat(e[0]))}}function ar(e){var t=qe(e);return hs(t[1][0].data)}function Nm(e,t){var r=qe(t.data),n=yt(r[1][0].data),a=r[3],i=[];return(a||[]).forEach(function(s){var o=qe(s.data),c=yt(o[1][0].data)>>>0;switch(n){case 1:i[c]=Ac(o[3][0].data);break;case 8:{var f=e[ar(o[9][0].data)][0],u=qe(f.data),d=e[ar(u[1][0].data)][0],h=yt(d.meta[1][0].data);if(h!=2001)throw new Error("2000 unexpected reference to ".concat(h));var p=qe(d.data);i[c]=p[3].map(function(g){return Ac(g.data)}).join("")}break}}),i}function RA(e,t){var r,n,a,i,s,o,c,f,u,d,h,p,g,m,x=qe(e),v=yt(x[1][0].data)>>>0,y=yt(x[2][0].data)>>>0,_=((n=(r=x[8])==null?void 0:r[0])==null?void 0:n.data)&&yt(x[8][0].data)>0||!1,b,D;if((i=(a=x[7])==null?void 0:a[0])!=null&&i.data&&t!=0)b=(o=(s=x[7])==null?void 0:s[0])==null?void 0:o.data,D=(f=(c=x[6])==null?void 0:c[0])==null?void 0:f.data;else if((d=(u=x[4])==null?void 0:u[0])!=null&&d.data&&t!=1)b=(p=(h=x[4])==null?void 0:h[0])==null?void 0:p.data,D=(m=(g=x[3])==null?void 0:g[0])==null?void 0:m.data;else throw"NUMBERS Tile missing ".concat(t," cell storage");for(var C=_?4:1,k=Fa(b),F=[],O=0;O<b.length/2;++O){var X=k.getUint16(O*2,!0);X<65535&&F.push([O,X])}if(F.length!=y)throw"Expected ".concat(y," cells, found ").concat(F.length);var j=[];for(O=0;O<F.length-1;++O)j[F[O][0]]=D.subarray(F[O][1]*C,F[O+1][1]*C);return F.length>=1&&(j[F[F.length-1][0]]=D.subarray(F[F.length-1][1]*C)),{R:v,cells:j}}function OA(e,t){var r,n=qe(t.data),a=(r=n==null?void 0:n[7])!=null&&r[0]?yt(n[7][0].data)>>>0>0?1:0:-1,i=Dc(n[5],function(s){return RA(s,a)});return{nrows:yt(n[4][0].data)>>>0,data:i.reduce(function(s,o){return s[o.R]||(s[o.R]=[]),o.cells.forEach(function(c,f){if(s[o.R][f])throw new Error("Duplicate cell r=".concat(o.R," c=").concat(f));s[o.R][f]=c}),s},[])}}function BA(e,t,r){var n,a=qe(t.data),i={s:{r:0,c:0},e:{r:0,c:0}};if(i.e.r=(yt(a[6][0].data)>>>0)-1,i.e.r<0)throw new Error("Invalid row varint ".concat(a[6][0].data));if(i.e.c=(yt(a[7][0].data)>>>0)-1,i.e.c<0)throw new Error("Invalid col varint ".concat(a[7][0].data));r["!ref"]=Pe(i);var s=qe(a[4][0].data),o=Nm(e,e[ar(s[4][0].data)][0]),c=(n=s[17])!=null&&n[0]?Nm(e,e[ar(s[17][0].data)][0]):[],f=qe(s[3][0].data),u=0;f[1].forEach(function(d){var h=qe(d.data),p=e[ar(h[2][0].data)][0],g=yt(p.meta[1][0].data);if(g!=6002)throw new Error("6001 unexpected reference to ".concat(g));var m=OA(e,p);m.data.forEach(function(x,v){x.forEach(function(y,_){var b=Ae({r:u+v,c:_}),D=DA(y,o,c);D&&(r[b]=D)})}),u+=m.nrows})}function NA(e,t){var r=qe(t.data),n={"!ref":"A1"},a=e[ar(r[2][0].data)],i=yt(a[0].meta[1][0].data);if(i!=6001)throw new Error("6000 unexpected reference to ".concat(i));return BA(e,a[0],n),n}function IA(e,t){var r,n=qe(t.data),a={name:(r=n[1])!=null&&r[0]?Ac(n[1][0].data):"",sheets:[]},i=Dc(n[2],ar);return i.forEach(function(s){e[s].forEach(function(o){var c=yt(o.meta[1][0].data);c==6e3&&a.sheets.push(NA(e,o))})}),a}function PA(e,t){var r=Uc(),n=qe(t.data),a=Dc(n[1],ar);if(a.forEach(function(i){e[i].forEach(function(s){var o=yt(s.meta[1][0].data);if(o==2){var c=IA(e,s);c.sheets.forEach(function(f,u){$c(r,f,u==0?c.name:c.name+"_"+u,!0)})}})}),r.SheetNames.length==0)throw new Error("Empty NUMBERS file");return r}function Bc(e){var t,r,n,a,i={},s=[];if(e.FullPaths.forEach(function(c){if(c.match(/\.iwpv2/))throw new Error("Unsupported password protection")}),e.FileIndex.forEach(function(c){if(c.name.match(/\.iwa$/)){var f;try{f=$r(c.content)}catch(d){return console.log("?? "+c.content.length+" "+(d.message||d))}var u;try{u=Ur(f)}catch(d){return console.log("## "+(d.message||d))}u.forEach(function(d){i[d.id]=d.messages,s.push(d.id)})}}),!s.length)throw new Error("File has no messages");var o=((a=(n=(r=(t=i==null?void 0:i[1])==null?void 0:t[0])==null?void 0:r.meta)==null?void 0:n[1])==null?void 0:a[0].data)&&yt(i[1][0].meta[1][0].data)==1&&i[1][0];if(o||s.forEach(function(c){i[c].forEach(function(f){var u=yt(f.meta[1][0].data)>>>0;if(u==1)if(!o)o=f;else throw new Error("Document has multiple roots")})}),!o)throw new Error("Cannot find Document root");return PA(i,o)}function LA(e,t,r){var n,a,i,s;if(!((n=e[6])!=null&&n[0])||!((a=e[7])!=null&&a[0]))throw"Mutation only works on post-BNC storages!";var o=((s=(i=e[8])==null?void 0:i[0])==null?void 0:s.data)&&yt(e[8][0].data)>0||!1;if(o)throw"Math only works with normal offsets";for(var c=0,f=Fa(e[7][0].data),u=0,d=[],h=Fa(e[4][0].data),p=0,g=[],m=0;m<t.length;++m){if(t[m]==null){f.setUint16(m*2,65535,!0),h.setUint16(m*2,65535);continue}f.setUint16(m*2,u,!0),h.setUint16(m*2,p,!0);var x,v;switch(typeof t[m]){case"string":x=Rc({t:"s",v:t[m]},r),v=Oc({t:"s",v:t[m]},r);break;case"number":x=Rc({t:"n",v:t[m]},r),v=Oc({t:"n",v:t[m]},r);break;case"boolean":x=Rc({t:"b",v:t[m]},r),v=Oc({t:"b",v:t[m]},r);break;default:throw new Error("Unsupported value "+t[m])}d.push(x),u+=x.length,g.push(v),p+=v.length,++c}for(e[2][0].data=tt(c);m<e[7][0].data.length/2;++m)f.setUint16(m*2,65535,!0),h.setUint16(m*2,65535,!0);return e[6][0].data=ra(d),e[3][0].data=ra(g),c}function MA(e,t){if(!t||!t.numbers)throw new Error("Must pass a `numbers` option -- check the README");var r=e.Sheets[e.SheetNames[0]];e.SheetNames.length>1&&console.error("The Numbers writer currently writes only the first table");var n=gr(r["!ref"]);n.s.r=n.s.c=0;var a=!1;n.e.c>9&&(a=!0,n.e.c=9),n.e.r>49&&(a=!0,n.e.r=49),a&&console.error("The Numbers writer is currently limited to ".concat(Pe(n)));var i=Ro(r,{range:n,header:1}),s=["~Sh33tJ5~"];i.forEach(function(S){return S.forEach(function(T){typeof T=="string"&&s.push(T)})});var o={},c=[],f=Se.read(t.numbers,{type:"base64"});f.FileIndex.map(function(S,T){return[S,f.FullPaths[T]]}).forEach(function(S){var T=S[0],R=S[1];if(T.type==2&&T.name.match(/\.iwa/)){var W=T.content,Y=$r(W),q=Ur(Y);q.forEach(function(K){c.push(K.id),o[K.id]={deps:[],location:R,type:yt(K.messages[0].meta[1][0].data)}})}}),c.sort(function(S,T){return S-T});var u=c.filter(function(S){return S>1}).map(function(S){return[S,tt(S)]});f.FileIndex.map(function(S,T){return[S,f.FullPaths[T]]}).forEach(function(S){var T=S[0];if(S[1],!!T.name.match(/\.iwa/)){var R=Ur($r(T.content));R.forEach(function(W){W.messages.forEach(function(Y){u.forEach(function(q){W.messages.some(function(K){return yt(K.meta[1][0].data)!=11006&&bA(K.data,q[1])})&&o[q[0]].deps.push(W.id)})})})}});for(var d=Se.find(f,o[1].location),h=Ur($r(d.content)),p,g=0;g<h.length;++g){var m=h[g];m.id==1&&(p=m)}var x=ar(qe(p.messages[0].data)[1][0].data);for(d=Se.find(f,o[x].location),h=Ur($r(d.content)),g=0;g<h.length;++g)m=h[g],m.id==x&&(p=m);for(x=ar(qe(p.messages[0].data)[2][0].data),d=Se.find(f,o[x].location),h=Ur($r(d.content)),g=0;g<h.length;++g)m=h[g],m.id==x&&(p=m);for(x=ar(qe(p.messages[0].data)[2][0].data),d=Se.find(f,o[x].location),h=Ur($r(d.content)),g=0;g<h.length;++g)m=h[g],m.id==x&&(p=m);var v=qe(p.messages[0].data);{v[6][0].data=tt(n.e.r+1),v[7][0].data=tt(n.e.c+1);var y=ar(v[46][0].data),_=Se.find(f,o[y].location),b=Ur($r(_.content));{for(var D=0;D<b.length&&b[D].id!=y;++D);if(b[D].id!=y)throw"Bad ColumnRowUIDMapArchive";var C=qe(b[D].messages[0].data);C[1]=[],C[2]=[],C[3]=[];for(var k=0;k<=n.e.c;++k){var F=[];F[1]=F[2]=[{type:0,data:tt(k+420690)}],C[1].push({type:2,data:Kt(F)}),C[2].push({type:0,data:tt(k)}),C[3].push({type:0,data:tt(k)})}C[4]=[],C[5]=[],C[6]=[];for(var O=0;O<=n.e.r;++O)F=[],F[1]=F[2]=[{type:0,data:tt(O+726270)}],C[4].push({type:2,data:Kt(F)}),C[5].push({type:0,data:tt(O)}),C[6].push({type:0,data:tt(O)});b[D].messages[0].data=Kt(C)}_.content=ii(ai(b)),_.size=_.content.length,delete v[46];var X=qe(v[4][0].data);{X[7][0].data=tt(n.e.r+1);var j=qe(X[1][0].data),I=ar(j[2][0].data);_=Se.find(f,o[I].location),b=Ur($r(_.content));{if(b[0].id!=I)throw"Bad HeaderStorageBucket";var G=qe(b[0].messages[0].data);for(O=0;O<i.length;++O){var re=qe(G[2][0].data);re[1][0].data=tt(O),re[4][0].data=tt(i[O].length),G[2][O]={type:G[2][0].type,data:Kt(re)}}b[0].messages[0].data=Kt(G)}_.content=ii(ai(b)),_.size=_.content.length;var ae=ar(X[2][0].data);_=Se.find(f,o[ae].location),b=Ur($r(_.content));{if(b[0].id!=ae)throw"Bad HeaderStorageBucket";for(G=qe(b[0].messages[0].data),k=0;k<=n.e.c;++k)re=qe(G[2][0].data),re[1][0].data=tt(k),re[4][0].data=tt(n.e.r+1),G[2][k]={type:G[2][0].type,data:Kt(re)};b[0].messages[0].data=Kt(G)}_.content=ii(ai(b)),_.size=_.content.length;var oe=ar(X[4][0].data);(function(){for(var S=Se.find(f,o[oe].location),T=Ur($r(S.content)),R,W=0;W<T.length;++W){var Y=T[W];Y.id==oe&&(R=Y)}var q=qe(R.messages[0].data);{q[3]=[];var K=[];s.forEach(function(M,Ke){K[1]=[{type:0,data:tt(Ke)}],K[2]=[{type:0,data:tt(1)}],K[3]=[{type:2,data:EA(M)}],q[3].push({type:2,data:Kt(K)})})}R.messages[0].data=Kt(q);var ee=ai(T),ye=ii(ee);S.content=ye,S.size=S.content.length})();var fe=qe(X[3][0].data);{var ke=fe[1][0];delete fe[2];var H=qe(ke.data);{var le=ar(H[2][0].data);(function(){for(var S=Se.find(f,o[le].location),T=Ur($r(S.content)),R,W=0;W<T.length;++W){var Y=T[W];Y.id==le&&(R=Y)}var q=qe(R.messages[0].data);{delete q[6],delete fe[7];var K=new Uint8Array(q[5][0].data);q[5]=[];for(var ee=0,ye=0;ye<=n.e.r;++ye){var M=qe(K);ee+=LA(M,i[ye],s),M[1][0].data=tt(ye),q[5].push({data:Kt(M),type:2})}q[1]=[{type:0,data:tt(n.e.c+1)}],q[2]=[{type:0,data:tt(n.e.r+1)}],q[3]=[{type:0,data:tt(ee)}],q[4]=[{type:0,data:tt(n.e.r+1)}]}R.messages[0].data=Kt(q);var Ke=ai(T),Le=ii(Ke);S.content=Le,S.size=S.content.length})()}ke.data=Kt(H)}X[3][0].data=Kt(fe)}v[4][0].data=Kt(X)}p.messages[0].data=Kt(v);var B=ai(h),w=ii(B);return d.content=w,d.size=d.content.length,f}function Im(e){return function(r){for(var n=0;n!=e.length;++n){var a=e[n];r[a[0]]===void 0&&(r[a[0]]=a[1]),a[2]==="n"&&(r[a[0]]=Number(r[a[0]]))}}}function Nc(e){Im([["cellNF",!1],["cellHTML",!0],["cellFormula",!0],["cellStyles",!1],["cellText",!0],["cellDates",!1],["sheetStubs",!1],["sheetRows",0,"n"],["bookDeps",!1],["bookSheets",!1],["bookProps",!1],["bookFiles",!1],["bookVBA",!1],["password",""],["WTF",!1]])(e)}function Ic(e){Im([["cellDates",!1],["bookSST",!1],["bookType","xlsx"],["compression",!1],["WTF",!1]])(e)}function VA(e){return We.WS.indexOf(e)>-1?"sheet":e==We.CS?"chart":e==We.DS?"dialog":e==We.MS?"macro":e&&e.length?e:"sheet"}function UA(e,t){if(!e)return 0;try{e=t.map(function(n){return n.id||(n.id=n.strRelID),[n.name,e["!id"][n.id].Target,VA(e["!id"][n.id].Type)]})}catch{return null}return!e||e.length===0?null:e}function $A(e,t,r,n,a,i,s,o,c,f,u,d){try{i[n]=qi(Tr(e,r,!0),t);var h=Ct(e,t),p;switch(o){case"sheet":p=c4(h,t,a,c,i[n],f,u,d);break;case"chart":if(p=f4(h,t,a,c,i[n],f,u,d),!p||!p["!drawel"])break;var g=$i(p["!drawel"].Target,t),m=Yi(g),x=qb(Tr(e,g,!0),qi(Tr(e,m,!0),g)),v=$i(x,g),y=Yi(v);p=LF(Tr(e,v,!0),v,c,qi(Tr(e,y,!0),v),f,p);break;case"macro":p=u4(h,t,a,c,i[n],f,u,d);break;case"dialog":p=d4(h,t,a,c,i[n],f,u,d);break;default:throw new Error("Unrecognized sheet type "+o)}s[n]=p;var _=[];i&&i[n]&&wt(i[n]).forEach(function(b){var D="";if(i[n][b].Type==We.CMNT){D=$i(i[n][b].Target,t);var C=g4(Ct(e,D,!0),D,c);if(!C||!C.length)return;zh(p,C,!1)}i[n][b].Type==We.TCMNT&&(D=$i(i[n][b].Target,t),_=_.concat(Zb(Ct(e,D,!0),c)))}),_&&_.length&&zh(p,_,!0,c.people||[])}catch(b){if(c.WTF)throw b}}function Wr(e){return e.charAt(0)=="/"?e.slice(1):e}function WA(e,t){if(Xa(),t=t||{},Nc(t),Pr(e,"META-INF/manifest.xml")||Pr(e,"objectdata.xml"))return Am(e,t);if(Pr(e,"Index/Document.iwa")){if(typeof Uint8Array>"u")throw new Error("NUMBERS file parsing requires Uint8Array support");if(typeof Bc<"u"){if(e.FileIndex)return Bc(e);var r=Se.utils.cfb_new();return td(e).forEach(function(re){Me(r,re,ed(e,re))}),Bc(r)}throw new Error("Unsupported NUMBERS file")}if(!Pr(e,"[Content_Types].xml"))throw Pr(e,"index.xml.gz")?new Error("Unsupported NUMBERS 08 file"):Pr(e,"index.xml")?new Error("Unsupported NUMBERS 09 file"):new Error("Unsupported ZIP file");var n=td(e),a=G_(Tr(e,"[Content_Types].xml")),i=!1,s,o;if(a.workbooks.length===0&&(o="xl/workbook.xml",Ct(e,o,!0)&&a.workbooks.push(o)),a.workbooks.length===0){if(o="xl/workbook.bin",!Ct(e,o,!0))throw new Error("Could not find workbook");a.workbooks.push(o),i=!0}a.workbooks[0].slice(-3)=="bin"&&(i=!0);var c={},f={};if(!t.bookSheets&&!t.bookProps){if(os=[],a.sst)try{os=p4(Ct(e,Wr(a.sst)),a.sst,t)}catch(re){if(t.WTF)throw re}t.cellStyles&&a.themes.length&&(c=m4(Tr(e,a.themes[0].replace(/^\//,""),!0)||"",a.themes[0],t)),a.style&&(f=h4(Ct(e,Wr(a.style)),a.style,c,t))}a.links.map(function(re){try{var ae=qi(Tr(e,Yi(Wr(re))),re);return v4(Ct(e,Wr(re)),ae,re,t)}catch{}});var u=l4(Ct(e,Wr(a.workbooks[0])),a.workbooks[0],t),d={},h="";a.coreprops.length&&(h=Ct(e,Wr(a.coreprops[0]),!0),h&&(d=zd(h)),a.extprops.length!==0&&(h=Ct(e,Wr(a.extprops[0]),!0),h&&Q_(h,d,t)));var p={};(!t.bookSheets||t.bookProps)&&a.custprops.length!==0&&(h=Tr(e,Wr(a.custprops[0]),!0),h&&(p=ty(h,t)));var g={};if((t.bookSheets||t.bookProps)&&(u.Sheets?s=u.Sheets.map(function(ae){return ae.name}):d.Worksheets&&d.SheetNames.length>0&&(s=d.SheetNames),t.bookProps&&(g.Props=d,g.Custprops=p),t.bookSheets&&typeof s<"u"&&(g.SheetNames=s),t.bookSheets?g.SheetNames:t.bookProps))return g;s={};var m={};t.bookDeps&&a.calcchain&&(m=x4(Ct(e,Wr(a.calcchain)),a.calcchain));var x=0,v={},y,_;{var b=u.Sheets;d.Worksheets=b.length,d.SheetNames=[];for(var D=0;D!=b.length;++D)d.SheetNames[D]=b[D].name}var C=i?"bin":"xml",k=a.workbooks[0].lastIndexOf("/"),F=(a.workbooks[0].slice(0,k+1)+"_rels/"+a.workbooks[0].slice(k+1)+".rels").replace(/^\//,"");Pr(e,F)||(F="xl/_rels/workbook."+C+".rels");var O=qi(Tr(e,F,!0),F.replace(/_rels.*/,"s5s"));(a.metadata||[]).length>=1&&(t.xlmeta=w4(Ct(e,Wr(a.metadata[0])),a.metadata[0],t)),(a.people||[]).length>=1&&(t.people=eS(Ct(e,Wr(a.people[0])),t)),O&&(O=UA(O,u.Sheets));var X=Ct(e,"xl/worksheets/sheet.xml",!0)?1:0;e:for(x=0;x!=d.Worksheets;++x){var j="sheet";if(O&&O[x]?(y="xl/"+O[x][1].replace(/[\/]?xl\//,""),Pr(e,y)||(y=O[x][1]),Pr(e,y)||(y=F.replace(/_rels\/.*$/,"")+O[x][1]),j=O[x][2]):(y="xl/worksheets/sheet"+(x+1-X)+"."+C,y=y.replace(/sheet0\./,"sheet.")),_=y.replace(/^(.*)(\/)([^\/]*)$/,"$1/_rels/$3.rels"),t&&t.sheets!=null)switch(typeof t.sheets){case"number":if(x!=t.sheets)continue e;break;case"string":if(d.SheetNames[x].toLowerCase()!=t.sheets.toLowerCase())continue e;break;default:if(Array.isArray&&Array.isArray(t.sheets)){for(var I=!1,G=0;G!=t.sheets.length;++G)typeof t.sheets[G]=="number"&&t.sheets[G]==x&&(I=1),typeof t.sheets[G]=="string"&&t.sheets[G].toLowerCase()==d.SheetNames[x].toLowerCase()&&(I=1);if(!I)continue e}}$A(e,y,_,d.SheetNames[x],x,v,s,j,t,u,c,f)}return g={Directory:a,Workbook:u,Props:d,Custprops:p,Deps:m,Sheets:s,SheetNames:d.SheetNames,Strings:os,Styles:f,Themes:c,SSF:st(Ce)},t&&t.bookFiles&&(e.files?(g.keys=n,g.files=e.files):(g.keys=[],g.files={},e.FullPaths.forEach(function(re,ae){re=re.replace(/^Root Entry[\/]/,""),g.keys.push(re),g.files[re]=e.FileIndex[ae]}))),t&&t.bookVBA&&(a.vba.length>0?g.vbaraw=Ct(e,Wr(a.vba[0]),!0):a.defaults&&a.defaults.bin===lS&&(g.vbaraw=Ct(e,"xl/vbaProject.bin",!0))),g}function HA(e,t){var r=t||{},n="Workbook",a=Se.find(e,n);try{if(n="/!DataSpaces/Version",a=Se.find(e,n),!a||!a.content)throw new Error("ECMA-376 Encrypted file missing "+n);if(wE(a.content),n="/!DataSpaces/DataSpaceMap",a=Se.find(e,n),!a||!a.content)throw new Error("ECMA-376 Encrypted file missing "+n);var i=yE(a.content);if(i.length!==1||i[0].comps.length!==1||i[0].comps[0].t!==0||i[0].name!=="StrongEncryptionDataSpace"||i[0].comps[0].v!=="EncryptedPackage")throw new Error("ECMA-376 Encrypted file bad "+n);if(n="/!DataSpaces/DataSpaceInfo/StrongEncryptionDataSpace",a=Se.find(e,n),!a||!a.content)throw new Error("ECMA-376 Encrypted file missing "+n);var s=kE(a.content);if(s.length!=1||s[0]!="StrongEncryptionTransform")throw new Error("ECMA-376 Encrypted file bad "+n);if(n="/!DataSpaces/TransformInfo/StrongEncryptionTransform/!Primary",a=Se.find(e,n),!a||!a.content)throw new Error("ECMA-376 Encrypted file missing "+n);bE(a.content)}catch{}if(n="/EncryptionInfo",a=Se.find(e,n),!a||!a.content)throw new Error("ECMA-376 Encrypted file missing "+n);var o=SE(a.content);if(n="/EncryptedPackage",a=Se.find(e,n),!a||!a.content)throw new Error("ECMA-376 Encrypted file missing "+n);if(o[0]==4&&typeof decrypt_agile<"u")return decrypt_agile(o[1],a.content,r.password||"",r);if(o[0]==2&&typeof decrypt_std76<"u")return decrypt_std76(o[1],a.content,r.password||"",r);throw new Error("File is password-protected")}function jA(e,t){return t.bookType=="ods"?Om(e,t):t.bookType=="numbers"?MA(e,t):t.bookType=="xlsb"?zA(e,t):GA(e,t)}function zA(e,t){ti=1024,e&&!e.SSF&&(e.SSF=st(Ce)),e&&e.SSF&&(Xa(),Vi(e.SSF),t.revssf=so(e.SSF),t.revssf[e.SSF[65535]]=0,t.ssf=e.SSF),t.rels={},t.wbrels={},t.Strings=[],t.Strings.Count=0,t.Strings.Unique=0,ls?t.revStrings=new Map:(t.revStrings={},t.revStrings.foo=[],delete t.revStrings.foo);var r=t.bookType=="xlsb"?"bin":"xml",n=Xh.indexOf(t.bookType)>-1,a=ac();Ic(t=t||{});var i=Ll(),s="",o=0;if(t.cellXfs=[],ta(t.cellXfs,{},{revssf:{General:0}}),e.Props||(e.Props={}),s="docProps/core.xml",Me(i,s,Gd(e.Props,t)),a.coreprops.push(s),et(t.rels,2,s,We.CORE_PROPS),s="docProps/app.xml",!(e.Props&&e.Props.SheetNames))if(!e.Workbook||!e.Workbook.Sheets)e.Props.SheetNames=e.SheetNames;else{for(var c=[],f=0;f<e.SheetNames.length;++f)(e.Workbook.Sheets[f]||{}).Hidden!=2&&c.push(e.SheetNames[f]);e.Props.SheetNames=c}for(e.Props.Worksheets=e.Props.SheetNames.length,Me(i,s,Yd(e.Props)),a.extprops.push(s),et(t.rels,3,s,We.EXT_PROPS),e.Custprops!==e.Props&&wt(e.Custprops||{}).length>0&&(s="docProps/custom.xml",Me(i,s,qd(e.Custprops)),a.custprops.push(s),et(t.rels,4,s,We.CUST_PROPS)),o=1;o<=e.SheetNames.length;++o){var u={"!id":{}},d=e.Sheets[e.SheetNames[o-1]],h=(d||{})["!type"]||"sheet";switch(h){case"chart":default:s="xl/worksheets/sheet"+o+"."+r,Me(i,s,y4(o-1,s,t,e,u)),a.sheets.push(s),et(t.wbrels,-1,"worksheets/sheet"+o+"."+r,We.WS[0])}if(d){var p=d["!comments"],g=!1,m="";p&&p.length>0&&(m="xl/comments"+o+"."+r,Me(i,m,b4(p,m)),a.comments.push(m),et(u,-1,"../comments"+o+"."+r,We.CMNT),g=!0),d["!legacy"]&&g&&Me(i,"xl/drawings/vmlDrawing"+o+".vml",jh(o,d["!comments"])),delete d["!comments"],delete d["!legacy"]}u["!id"].rId1&&Me(i,Yi(s),Za(u))}return t.Strings!=null&&t.Strings.length>0&&(s="xl/sharedStrings."+r,Me(i,s,E4(t.Strings,s,t)),a.strs.push(s),et(t.wbrels,-1,"sharedStrings."+r,We.SST)),s="xl/workbook."+r,Me(i,s,_4(e,s)),a.workbooks.push(s),et(t.rels,1,s,We.WB),s="xl/theme/theme1.xml",Me(i,s,xc(e.Themes,t)),a.themes.push(s),et(t.wbrels,-1,"theme/theme1.xml",We.THEME),s="xl/styles."+r,Me(i,s,k4(e,s,t)),a.styles.push(s),et(t.wbrels,-1,"styles."+r,We.STY),e.vbaraw&&n&&(s="xl/vbaProject.bin",Me(i,s,e.vbaraw),a.vba.push(s),et(t.wbrels,-1,"vbaProject.bin",We.VBA)),s="xl/metadata."+r,Me(i,s,S4(s)),a.metadata.push(s),et(t.wbrels,-1,"metadata."+r,We.XLMETA),Me(i,"[Content_Types].xml",Wd(a,t)),Me(i,"_rels/.rels",Za(t.rels)),Me(i,"xl/_rels/workbook."+r+".rels",Za(t.wbrels)),delete t.revssf,delete t.ssf,i}function GA(e,t){ti=1024,e&&!e.SSF&&(e.SSF=st(Ce)),e&&e.SSF&&(Xa(),Vi(e.SSF),t.revssf=so(e.SSF),t.revssf[e.SSF[65535]]=0,t.ssf=e.SSF),t.rels={},t.wbrels={},t.Strings=[],t.Strings.Count=0,t.Strings.Unique=0,ls?t.revStrings=new Map:(t.revStrings={},t.revStrings.foo=[],delete t.revStrings.foo);var r="xml",n=Xh.indexOf(t.bookType)>-1,a=ac();Ic(t=t||{});var i=Ll(),s="",o=0;if(t.cellXfs=[],ta(t.cellXfs,{},{revssf:{General:0}}),e.Props||(e.Props={}),s="docProps/core.xml",Me(i,s,Gd(e.Props,t)),a.coreprops.push(s),et(t.rels,2,s,We.CORE_PROPS),s="docProps/app.xml",!(e.Props&&e.Props.SheetNames))if(!e.Workbook||!e.Workbook.Sheets)e.Props.SheetNames=e.SheetNames;else{for(var c=[],f=0;f<e.SheetNames.length;++f)(e.Workbook.Sheets[f]||{}).Hidden!=2&&c.push(e.SheetNames[f]);e.Props.SheetNames=c}e.Props.Worksheets=e.Props.SheetNames.length,Me(i,s,Yd(e.Props)),a.extprops.push(s),et(t.rels,3,s,We.EXT_PROPS),e.Custprops!==e.Props&&wt(e.Custprops||{}).length>0&&(s="docProps/custom.xml",Me(i,s,qd(e.Custprops)),a.custprops.push(s),et(t.rels,4,s,We.CUST_PROPS));var u=["SheetJ5"];for(t.tcid=0,o=1;o<=e.SheetNames.length;++o){var d={"!id":{}},h=e.Sheets[e.SheetNames[o-1]],p=(h||{})["!type"]||"sheet";switch(p){case"chart":default:s="xl/worksheets/sheet"+o+"."+r,Me(i,s,cm(o-1,t,e,d)),a.sheets.push(s),et(t.wbrels,-1,"worksheets/sheet"+o+"."+r,We.WS[0])}if(h){var g=h["!comments"],m=!1,x="";if(g&&g.length>0){var v=!1;g.forEach(function(y){y[1].forEach(function(_){_.T==!0&&(v=!0)})}),v&&(x="xl/threadedComments/threadedComment"+o+"."+r,Me(i,x,Qb(g,u,t)),a.threadedcomments.push(x),et(d,-1,"../threadedComments/threadedComment"+o+"."+r,We.TCMNT)),x="xl/comments"+o+"."+r,Me(i,x,Gh(g)),a.comments.push(x),et(d,-1,"../comments"+o+"."+r,We.CMNT),m=!0}h["!legacy"]&&m&&Me(i,"xl/drawings/vmlDrawing"+o+".vml",jh(o,h["!comments"])),delete h["!comments"],delete h["!legacy"]}d["!id"].rId1&&Me(i,Yi(s),Za(d))}return t.Strings!=null&&t.Strings.length>0&&(s="xl/sharedStrings."+r,Me(i,s,Rh(t.Strings,t)),a.strs.push(s),et(t.wbrels,-1,"sharedStrings."+r,We.SST)),s="xl/workbook."+r,Me(i,s,gm(e)),a.workbooks.push(s),et(t.rels,1,s,We.WB),s="xl/theme/theme1.xml",Me(i,s,xc(e.Themes,t)),a.themes.push(s),et(t.wbrels,-1,"theme/theme1.xml",We.THEME),s="xl/styles."+r,Me(i,s,Vh(e,t)),a.styles.push(s),et(t.wbrels,-1,"styles."+r,We.STY),e.vbaraw&&n&&(s="xl/vbaProject.bin",Me(i,s,e.vbaraw),a.vba.push(s),et(t.wbrels,-1,"vbaProject.bin",We.VBA)),s="xl/metadata."+r,Me(i,s,Hh()),a.metadata.push(s),et(t.wbrels,-1,"metadata."+r,We.XLMETA),u.length>1&&(s="xl/persons/person.xml",Me(i,s,tS(u)),a.people.push(s),et(t.wbrels,-1,"persons/person.xml",We.PEOPLE)),Me(i,"[Content_Types].xml",Wd(a,t)),Me(i,"_rels/.rels",Za(t.rels)),Me(i,"xl/_rels/workbook."+r+".rels",Za(t.wbrels)),delete t.revssf,delete t.ssf,i}function Pc(e,t){var r="";switch((t||{}).type||"base64"){case"buffer":return[e[0],e[1],e[2],e[3],e[4],e[5],e[6],e[7]];case"base64":r=Er(e.slice(0,12));break;case"binary":r=e;break;case"array":return[e[0],e[1],e[2],e[3],e[4],e[5],e[6],e[7]];default:throw new Error("Unrecognized type "+(t&&t.type||"undefined"))}return[r.charCodeAt(0),r.charCodeAt(1),r.charCodeAt(2),r.charCodeAt(3),r.charCodeAt(4),r.charCodeAt(5),r.charCodeAt(6),r.charCodeAt(7)]}function XA(e,t){return Se.find(e,"EncryptedPackage")?HA(e,t):_m(e,t)}function KA(e,t){var r,n=e,a=t||{};return a.type||(a.type=Ue&&Buffer.isBuffer(e)?"buffer":"base64"),r=rd(n,a),WA(r,a)}function Pm(e,t){var r=0;e:for(;r<e.length;)switch(e.charCodeAt(r)){case 10:case 13:case 32:++r;break;case 60:return Cc(e.slice(r),t);default:break e}return Qa.to_workbook(e,t)}function YA(e,t){var r="",n=Pc(e,t);switch(t.type){case"base64":r=Er(e);break;case"binary":r=e;break;case"buffer":r=e.toString("binary");break;case"array":r=ha(e);break;default:throw new Error("Unrecognized type "+t.type)}return n[0]==239&&n[1]==187&&n[2]==191&&(r=nt(r)),t.type="binary",Pm(r,t)}function qA(e,t){var r=e;return t.type=="base64"&&(r=Er(r)),r=zn.utils.decode(1200,r.slice(2),"str"),t.type="binary",Pm(r,t)}function JA(e){return e.match(/[^\x00-\x7F]/)?gn(e):e}function Lc(e,t,r,n){return n?(r.type="string",Qa.to_workbook(e,r)):Qa.to_workbook(t,r)}function Mc(e,t){Rl();var r=t||{};if(typeof ArrayBuffer<"u"&&e instanceof ArrayBuffer)return Mc(new Uint8Array(e),(r=st(r),r.type="array",r));typeof Uint8Array<"u"&&e instanceof Uint8Array&&!r.type&&(r.type=typeof Deno<"u"?"buffer":"array");var n=e,a=[0,0,0,0],i=!1;if(r.cellStyles&&(r.cellNF=!0,r.sheetStubs=!0),ni={},r.dateNF&&(ni.dateNF=r.dateNF),r.type||(r.type=Ue&&Buffer.isBuffer(e)?"buffer":"base64"),r.type=="file"&&(r.type=Ue?"buffer":"binary",n=G2(e),typeof Uint8Array<"u"&&!Ue&&(r.type="array")),r.type=="string"&&(i=!0,r.type="binary",r.codepage=65001,n=JA(e)),r.type=="array"&&typeof Uint8Array<"u"&&e instanceof Uint8Array&&typeof ArrayBuffer<"u"){var s=new ArrayBuffer(3),o=new Uint8Array(s);if(o.foo="bar",!o.foo)return r=st(r),r.type="array",Mc(Ol(n),r)}switch((a=Pc(n,r))[0]){case 208:if(a[1]===207&&a[2]===17&&a[3]===224&&a[4]===161&&a[5]===177&&a[6]===26&&a[7]===225)return XA(Se.read(n,r),r);break;case 9:if(a[1]<=8)return _m(n,r);break;case 60:return Cc(n,r);case 73:if(a[1]===73&&a[2]===42&&a[3]===0)throw new Error("TIFF Image File is not a spreadsheet");if(a[1]===68)return rE(n,r);break;case 84:if(a[1]===65&&a[2]===66&&a[3]===76)return Ah.to_workbook(n,r);break;case 80:return a[1]===75&&a[2]<9&&a[3]<9?KA(n,r):Lc(e,n,r,i);case 239:return a[3]===60?Cc(n,r):Lc(e,n,r,i);case 255:if(a[1]===254)return qA(n,r);if(a[1]===0&&a[2]===2&&a[3]===0)return Ta.to_workbook(n,r);break;case 0:if(a[1]===0&&(a[2]>=2&&a[3]===0||a[2]===0&&(a[3]===8||a[3]===9)))return Ta.to_workbook(n,r);break;case 3:case 131:case 139:case 140:return uc.to_workbook(n,r);case 123:if(a[1]===92&&a[2]===114&&a[3]===116)return Ph.to_workbook(n,r);break;case 10:case 13:case 32:return YA(n,r);case 137:if(a[1]===80&&a[2]===78&&a[3]===71)throw new Error("PNG Image File is not a spreadsheet");break}return tE.indexOf(a[0])>-1&&a[2]<=12&&a[3]<=31?uc.to_workbook(n,r):Lc(e,n,r,i)}function Lm(e,t){switch(t.type){case"base64":case"binary":break;case"buffer":case"array":t.type="";break;case"file":return Ui(t.file,Se.write(e,{type:Ue?"buffer":""}));case"string":throw new Error("'string' output type invalid for '"+t.bookType+"' files");default:throw new Error("Unrecognized type "+t.type)}return Se.write(e,t)}function ZA(e,t){var r=st(t||{}),n=jA(e,r);return QA(n,r)}function QA(e,t){var r={},n=Ue?"nodebuffer":typeof Uint8Array<"u"?"array":"string";if(t.compression&&(r.compression="DEFLATE"),t.password)r.type=n;else switch(t.type){case"base64":r.type="base64";break;case"binary":r.type="string";break;case"string":throw new Error("'string' output type invalid for '"+t.bookType+"' files");case"buffer":case"file":r.type=n;break;default:throw new Error("Unrecognized type "+t.type)}var a=e.FullPaths?Se.write(e,{fileType:"zip",type:{nodebuffer:"buffer",string:"binary"}[r.type]||r.type,compression:!!t.compression}):e.generate(r);if(typeof Deno<"u"&&typeof a=="string"){if(t.type=="binary"||t.type=="base64")return a;a=new Uint8Array(to(a))}return t.password&&typeof encrypt_agile<"u"?Lm(encrypt_agile(a,t.password),t):t.type==="file"?Ui(t.file,a):t.type=="string"?nt(a):a}function e3(e,t){var r=t||{},n=J4(e,r);return Lm(n,r)}function wn(e,t,r){r||(r="");var n=r+e;switch(t.type){case"base64":return Pi(gn(n));case"binary":return gn(n);case"string":return e;case"file":return Ui(t.file,n,"utf8");case"buffer":return Ue?An(n,"utf8"):typeof TextEncoder<"u"?new TextEncoder().encode(n):wn(n,{type:"binary"}).split("").map(function(a){return a.charCodeAt(0)})}throw new Error("Unrecognized type "+t.type)}function t3(e,t){switch(t.type){case"base64":return Pi(e);case"binary":return e;case"string":return e;case"file":return Ui(t.file,e,"binary");case"buffer":return Ue?An(e,"binary"):e.split("").map(function(r){return r.charCodeAt(0)})}throw new Error("Unrecognized type "+t.type)}function Do(e,t){switch(t.type){case"string":case"base64":case"binary":for(var r="",n=0;n<e.length;++n)r+=String.fromCharCode(e[n]);return t.type=="base64"?Pi(r):t.type=="string"?nt(r):r;case"file":return Ui(t.file,e);case"buffer":return e;default:throw new Error("Unrecognized type "+t.type)}}function Mm(e,t){Rl(),XF(e);var r=st(t||{});if(r.cellStyles&&(r.cellNF=!0,r.sheetStubs=!0),r.type=="array"){r.type="binary";var n=Mm(e,r);return r.type="array",to(n)}var a=0;if(r.sheet&&(typeof r.sheet=="number"?a=r.sheet:a=e.SheetNames.indexOf(r.sheet),!e.SheetNames[a]))throw new Error("Sheet not found: "+r.sheet+" : "+typeof r.sheet);switch(r.bookType||"xlsb"){case"xml":case"xlml":return wn(j4(e,r),r);case"slk":case"sylk":return wn(Fh.from_sheet(e.Sheets[e.SheetNames[a]],r),r);case"htm":case"html":return wn(Em(e.Sheets[e.SheetNames[a]],r),r);case"txt":return t3(Um(e.Sheets[e.SheetNames[a]],r),r);case"csv":return wn(Vc(e.Sheets[e.SheetNames[a]],r),r,"\uFEFF");case"dif":return wn(Ah.from_sheet(e.Sheets[e.SheetNames[a]],r),r);case"dbf":return Do(uc.from_sheet(e.Sheets[e.SheetNames[a]],r),r);case"prn":return wn(Qa.from_sheet(e.Sheets[e.SheetNames[a]],r),r);case"rtf":return wn(Ph.from_sheet(e.Sheets[e.SheetNames[a]],r),r);case"eth":return wn(Dh.from_sheet(e.Sheets[e.SheetNames[a]],r),r);case"fods":return wn(Om(e,r),r);case"wk1":return Do(Ta.sheet_to_wk1(e.Sheets[e.SheetNames[a]],r),r);case"wk3":return Do(Ta.book_to_wk3(e,r),r);case"biff2":r.biff||(r.biff=2);case"biff3":r.biff||(r.biff=3);case"biff4":return r.biff||(r.biff=4),Do(ym(e,r),r);case"biff5":r.biff||(r.biff=5);case"biff8":case"xla":case"xls":return r.biff||(r.biff=8),e3(e,r);case"xlsx":case"xlsm":case"xlam":case"xlsb":case"numbers":case"ods":return ZA(e,r);default:throw new Error("Unrecognized bookType |"+r.bookType+"|")}}function r3(e,t,r,n,a,i,s,o){var c=Et(r),f=o.defval,u=o.raw||!Object.prototype.hasOwnProperty.call(o,"raw"),d=!0,h=a===1?[]:{};if(a!==1)if(Object.defineProperty)try{Object.defineProperty(h,"__rowNum__",{value:r,enumerable:!1})}catch{h.__rowNum__=r}else h.__rowNum__=r;if(!s||e[r])for(var p=t.s.c;p<=t.e.c;++p){var g=s?e[r][p]:e[n[p]+c];if(g===void 0||g.t===void 0){if(f===void 0)continue;i[p]!=null&&(h[i[p]]=f);continue}var m=g.v;switch(g.t){case"z":if(m==null)break;continue;case"e":m=m==0?null:void 0;break;case"s":case"d":case"b":case"n":break;default:throw new Error("unrecognized type "+g.t)}if(i[p]!=null){if(m==null)if(g.t=="e"&&m===null)h[i[p]]=null;else if(f!==void 0)h[i[p]]=f;else if(u&&m===null)h[i[p]]=null;else continue;else h[i[p]]=u&&(g.t!=="n"||g.t==="n"&&o.rawNumbers!==!1)?m:Bn(g,m,o);m!=null&&(d=!1)}}return{row:h,isempty:d}}function Ro(e,t){if(e==null||e["!ref"]==null)return[];var r={t:"n",v:0},n=0,a=1,i=[],s=0,o="",c={s:{r:0,c:0},e:{r:0,c:0}},f=t||{},u=f.range!=null?f.range:e["!ref"];switch(f.header===1?n=1:f.header==="A"?n=2:Array.isArray(f.header)?n=3:f.header==null&&(n=0),typeof u){case"string":c=Xe(u);break;case"number":c=Xe(e["!ref"]),c.s.r=u;break;default:c=u}n>0&&(a=0);var d=Et(c.s.r),h=[],p=[],g=0,m=0,x=Array.isArray(e),v=c.s.r,y=0,_={};x&&!e[v]&&(e[v]=[]);var b=f.skipHidden&&e["!cols"]||[],D=f.skipHidden&&e["!rows"]||[];for(y=c.s.c;y<=c.e.c;++y)if(!(b[y]||{}).hidden)switch(h[y]=dt(y),r=x?e[v][y]:e[h[y]+d],n){case 1:i[y]=y-c.s.c;break;case 2:i[y]=h[y];break;case 3:i[y]=f.header[y-c.s.c];break;default:if(r==null&&(r={w:"__EMPTY",t:"s"}),o=s=Bn(r,null,f),m=_[s]||0,!m)_[s]=1;else{do o=s+"_"+m++;while(_[o]);_[s]=m,_[o]=1}i[y]=o}for(v=c.s.r+a;v<=c.e.r;++v)if(!(D[v]||{}).hidden){var C=r3(e,c,v,h,n,i,x,f);(C.isempty===!1||(n===1?f.blankrows!==!1:f.blankrows))&&(p[g++]=C.row)}return p.length=g,p}var Vm=/"/g;function n3(e,t,r,n,a,i,s,o){for(var c=!0,f=[],u="",d=Et(r),h=t.s.c;h<=t.e.c;++h)if(n[h]){var p=o.dense?(e[r]||[])[h]:e[n[h]+d];if(p==null)u="";else if(p.v!=null){c=!1,u=""+(o.rawNumbers&&p.t=="n"?p.v:Bn(p,null,o));for(var g=0,m=0;g!==u.length;++g)if((m=u.charCodeAt(g))===a||m===i||m===34||o.forceQuotes){u='"'+u.replace(Vm,'""')+'"';break}u=="ID"&&(u='"ID"')}else p.f!=null&&!p.F?(c=!1,u="="+p.f,u.indexOf(",")>=0&&(u='"'+u.replace(Vm,'""')+'"')):u="";f.push(u)}return o.blankrows===!1&&c?null:f.join(s)}function Vc(e,t){var r=[],n=t??{};if(e==null||e["!ref"]==null)return"";var a=Xe(e["!ref"]),i=n.FS!==void 0?n.FS:",",s=i.charCodeAt(0),o=n.RS!==void 0?n.RS:`
`,c=o.charCodeAt(0),f=new RegExp((i=="|"?"\\|":i)+"+$"),u="",d=[];n.dense=Array.isArray(e);for(var h=n.skipHidden&&e["!cols"]||[],p=n.skipHidden&&e["!rows"]||[],g=a.s.c;g<=a.e.c;++g)(h[g]||{}).hidden||(d[g]=dt(g));for(var m=0,x=a.s.r;x<=a.e.r;++x)(p[x]||{}).hidden||(u=n3(e,a,x,d,s,c,i,n),u!=null&&(n.strip&&(u=u.replace(f,"")),(u||n.blankrows!==!1)&&r.push((m++?o:"")+u)));return delete n.dense,r.join("")}function Um(e,t){t||(t={}),t.FS="	",t.RS=`
`;var r=Vc(e,t);return r}function a3(e){var t="",r,n="";if(e==null||e["!ref"]==null)return[];var a=Xe(e["!ref"]),i="",s=[],o,c=[],f=Array.isArray(e);for(o=a.s.c;o<=a.e.c;++o)s[o]=dt(o);for(var u=a.s.r;u<=a.e.r;++u)for(i=Et(u),o=a.s.c;o<=a.e.c;++o)if(t=s[o]+i,r=f?(e[u]||[])[o]:e[t],n="",r!==void 0){if(r.F!=null){if(t=r.F,!r.f)continue;n=r.f,t.indexOf(":")==-1&&(t=t+":"+t)}if(r.f!=null)n=r.f;else{if(r.t=="z")continue;if(r.t=="n"&&r.v!=null)n=""+r.v;else if(r.t=="b")n=r.v?"TRUE":"FALSE";else if(r.w!==void 0)n="'"+r.w;else{if(r.v===void 0)continue;r.t=="s"?n="'"+r.v:n=""+r.v}}c[c.length]=t+"="+n}return c}function $m(e,t,r){var n=r||{},a=+!n.skipHeader,i=e||{},s=0,o=0;if(i&&n.origin!=null)if(typeof n.origin=="number")s=n.origin;else{var c=typeof n.origin=="string"?ht(n.origin):n.origin;s=c.r,o=c.c}var f,u={s:{c:0,r:0},e:{c:o,r:s+t.length-1+a}};if(i["!ref"]){var d=Xe(i["!ref"]);u.e.c=Math.max(u.e.c,d.e.c),u.e.r=Math.max(u.e.r,d.e.r),s==-1&&(s=d.e.r+1,u.e.r=s+t.length-1+a)}else s==-1&&(s=0,u.e.r=t.length-1+a);var h=n.header||[],p=0;t.forEach(function(m,x){wt(m).forEach(function(v){(p=h.indexOf(v))==-1&&(h[p=h.length]=v);var y=m[v],_="z",b="",D=Ae({c:o+p,r:s+x+a});f=ms(i,D),y&&typeof y=="object"&&!(y instanceof Date)?i[D]=y:(typeof y=="number"?_="n":typeof y=="boolean"?_="b":typeof y=="string"?_="s":y instanceof Date?(_="d",n.cellDates||(_="n",y=Nt(y)),b=n.dateNF||Ce[14]):y===null&&n.nullError&&(_="e",y=0),f?(f.t=_,f.v=y,delete f.w,delete f.R,b&&(f.z=b)):i[D]=f={t:_,v:y},b&&(f.z=b))})}),u.e.c=Math.max(u.e.c,o+h.length-1);var g=Et(s);if(a)for(p=0;p<h.length;++p)i[dt(p+o)+g]={t:"s",v:h[p]};return i["!ref"]=Pe(u),i}function i3(e,t){return $m(null,e,t)}function ms(e,t,r){if(typeof t=="string"){if(Array.isArray(e)){var n=ht(t);return e[n.r]||(e[n.r]=[]),e[n.r][n.c]||(e[n.r][n.c]={t:"z"})}return e[t]||(e[t]={t:"z"})}return typeof t!="number"?ms(e,Ae(t)):ms(e,Ae({r:t,c:r||0}))}function s3(e,t){if(typeof t=="number"){if(t>=0&&e.SheetNames.length>t)return t;throw new Error("Cannot find sheet # "+t)}else if(typeof t=="string"){var r=e.SheetNames.indexOf(t);if(r>-1)return r;throw new Error("Cannot find sheet name |"+t+"|")}else throw new Error("Cannot find sheet |"+t+"|")}function Uc(){return{SheetNames:[],Sheets:{}}}function $c(e,t,r,n){var a=1;if(!r)for(;a<=65535&&e.SheetNames.indexOf(r="Sheet"+a)!=-1;++a,r=void 0);if(!r||e.SheetNames.length>=65535)throw new Error("Too many worksheets");if(n&&e.SheetNames.indexOf(r)>=0){var i=r.match(/(^.*?)(\d+)$/);a=i&&+i[2]||0;var s=i&&i[1]||r;for(++a;a<=65535&&e.SheetNames.indexOf(r=s+a)!=-1;++a);}if(pm(r),e.SheetNames.indexOf(r)>=0)throw new Error("Worksheet with name |"+r+"| already exists!");return e.SheetNames.push(r),e.Sheets[r]=t,r}function o3(e,t,r){e.Workbook||(e.Workbook={}),e.Workbook.Sheets||(e.Workbook.Sheets=[]);var n=s3(e,t);switch(e.Workbook.Sheets[n]||(e.Workbook.Sheets[n]={}),r){case 0:case 1:case 2:break;default:throw new Error("Bad sheet visibility setting "+r)}e.Workbook.Sheets[n].Hidden=r}function l3(e,t){return e.z=t,e}function Wm(e,t,r){return t?(e.l={Target:t},r&&(e.l.Tooltip=r)):delete e.l,e}function c3(e,t,r){return Wm(e,"#"+t,r)}function f3(e,t,r){e.c||(e.c=[]),e.c.push({t,a:r||"SheetJS"})}function u3(e,t,r,n){for(var a=typeof t!="string"?t:Xe(t),i=typeof t=="string"?t:Pe(t),s=a.s.r;s<=a.e.r;++s)for(var o=a.s.c;o<=a.e.c;++o){var c=ms(e,s,o);c.t="n",c.F=i,delete c.v,s==a.s.r&&o==a.s.c&&(c.f=r,n&&(c.D=!0))}return e}var Wc={encode_col:dt,encode_row:Et,encode_cell:Ae,encode_range:Pe,decode_col:Kl,decode_row:Xl,split_cell:E_,decode_cell:ht,decode_range:gr,format_cell:Bn,sheet_add_aoa:Bd,sheet_add_json:$m,sheet_add_dom:bm,aoa_to_sheet:qa,json_to_sheet:i3,table_to_sheet:Sm,table_to_book:wA,sheet_to_csv:Vc,sheet_to_txt:Um,sheet_to_json:Ro,sheet_to_html:Em,sheet_to_formulae:a3,sheet_to_row_object_array:Ro,sheet_get_cell:ms,book_new:Uc,book_append_sheet:$c,book_set_sheet_visibility:o3,cell_set_number_format:l3,cell_set_hyperlink:Wm,cell_set_internal_link:c3,cell_add_comment:f3,sheet_set_array_formula:u3,consts:{SHEET_VISIBLE:0,SHEET_HIDDEN:1,SHEET_VERY_HIDDEN:2}};function d3(e,t){t&&(e+=1462);var r=Date.parse(e);return(r-new Date(Date.UTC(1899,11,30)))/(24*60*60*1e3)}function h3(e,t={}){for(var r={},n={s:{c:1e7,r:1e7},e:{c:0,r:0}},a=0;a!=e.length;++a)for(var i=0;i!=e[a].length;++i){n.s.r>a&&(n.s.r=a),n.s.c>i&&(n.s.c=i),n.e.r<a&&(n.e.r=a),n.e.c<i&&(n.e.c=i);var s={v:e[a][i]};if(s.v!=null){var o=Wc.encode_cell({c:i,r:a});typeof s.v=="number"?s.t="n":typeof s.v=="boolean"?s.t="b":s.v instanceof Date?(s.t="n",s.z=zu._table[14],s.v=d3(s.v)):s.t="s",r[o]=s}}return n.s.c<1e7&&(r["!ref"]=Wc.encode_range(n)),r}function Hc(){if(!(this instanceof Hc))return new Hc;this.SheetNames=[],this.Sheets={}}function m3(e){for(var t=new ArrayBuffer(e.length),r=new Uint8Array(t),n=0;n!=e.length;++n)r[n]=e.charCodeAt(n)&255;return t}function p3(e,t,r,n={merges:[],header:null,cols:null}){var a=t;a.unshift(e),n.header&&a.unshift([n.header]);var i="SheetJS";const s={};var o=new Hc,c=h3(a,s);let{merges:f}=n;typeof f[0]=="string"&&f.length==2&&(f=[f]),f=f.map(h=>h instanceof Array?{s:h[0],e:h[1]}:h),c["!merges"]=f,n.cols&&(c["!cols"]=n.cols),o.SheetNames.push(i),o.Sheets[i]=c;var u=Mm(o,{bookType:"xlsx",bookSST:!1,type:"binary"}),d=r||"列表";ku.saveAs(new Blob([m3(u)],{type:"application/octet-stream"}),d+".xlsx")}const g3=e=>{const t=e.split(/\r\n|\n/),r=t[0].split(/,(?![^"]*"(?:(?:[^"]*"){2})*[^"]*$)/),n=[];for(let i=1;i<t.length;i++){const s=t[i].split(/,(?![^"]*"(?:(?:[^"]*"){2})*[^"]*$)/);if(r&&s.length==r.length){const o={};for(let c=0;c<r.length;c++){let f=s[c];f.length>0&&(f[0]=='"'&&(f=f.substring(1,f.length-1)),f[f.length-1]=='"'&&(f=f.substring(f.length-2,1))),r[c]&&(o[r[c]]=f)}Object.values(o).filter(c=>c).length>0&&n.push(o)}}const a=r.map(i=>({title:i,key:i}));return{data:n,columns:a}};async function x3(e){const t=new FileReader;return new Promise((r,n)=>{t.onload=a=>{const i=a.target.result,s=Mc(i,{type:"binary"}),o=s.SheetNames[0],c=s.Sheets[o],f=Wc.sheet_to_csv(c),u=g3(f);r(u)},t.onerror=a=>{n(a)},t.readAsBinaryString(e)})}function v3(e){return e.map(t=>({prop:t.key,label:t.title}))}const Hm=Object.freeze(Object.defineProperty({__proto__:null,exportUtil:{csv(e){return new Promise((t,r)=>{const a=Object.assign({},{columns:[],data:[],filename:"table",noHeader:!1},e),i=d2(v3(a.columns),a.data,e,a.noHeader);c2.download(a.filename,i),t()})},excel(e){return new Promise((t,r)=>{const a=Object.assign({},{columns:[],data:[],filename:"table",header:null,merges:[]},e),i=a.columns.map(c=>c.title),s=a.data.map(c=>a.columns.map(f=>c[f.key])),o=a.columns.map(c=>{const f={...c};return delete f.title,delete f.key,f});p3(i,s,a.filename,{merges:a.merges,header:a.header,cols:o}),t()})},txt(e){return new Promise((t,r)=>{const a=Object.assign({},{text:"",filename:"文本"},e),i=new Blob([a.text],{type:"text/plain;charset=utf-8"});ku.saveAs(i,a.filename+".txt"),t()})}},importUtil:{async csv(e){return await x3(e)}}},Symbol.toStringTag,{value:"Module"}));Object.defineProperty(ie,"uiContext",{enumerable:!0,get:()=>de.uiContext}),Object.defineProperty(ie,"useUi",{enumerable:!0,get:()=>de.useUi}),ie.AsyncComputeValue=Ts,ie.ColumnsFilterProvideKey=Ps,ie.ComputeValue=gi,ie.Dict=Jo,ie.FastCrud=_u,ie.FsActionbar=y0,ie.FsBox=Qf,ie.FsButton=Xf,ie.FsCell=v0,ie.FsColumnsFilterLayoutDefault=nu,ie.FsComponentRender=t0,ie.FsContainer=jf,ie.FsCrud=o0,ie.FsDateFormat=gu,ie.FsDictCascader=hu,ie.FsDictCascaderFormat=du,ie.FsDictCheckbox=mu,ie.FsDictRadio=cu,ie.FsDictSelect=fu,ie.FsDictSwitch=pu,ie.FsDictTree=xu,ie.FsEditable=_0,ie.FsEditableCell=w0,ie.FsForm=n0,ie.FsFormHelper=i0,ie.FsFormItem=a0,ie.FsFormProvider=s0,ie.FsFormWrapper=La,ie.FsIcon=Kf,ie.FsIconSvg=qf,ie.FsIconify=Yf,ie.FsLabel=Jf,ie.FsLayoutCard=Gf,ie.FsLayoutDefault=zf,ie.FsLoading=Zf,ie.FsPage=mf,ie.FsRender=Zo,ie.FsRowHandle=l0,ie.FsSearch=iu,ie.FsSearchLayoutDefault=ou,ie.FsSearchV1=su,ie.FsSlotRender=r0,ie.FsTable=x0,ie.FsTableColumnsFixedController=Sl,ie.FsTableSelect=vu,ie.FsTabsFilter=lu,ie.FsToolbar=k0,ie.FsValuesFormat=uu,ie.GlobalConfig=Hf,ie.SetFormDataOptions=Zx,ie.asyncCompute=wf,ie.buildTableColumnsFlatMap=Cs,ie.compute=vf,ie.crudOptionsPlugins=Xo,ie.default=_u,ie.dict=Uf,ie.exportTable=Ff,ie.forEachColumns=_i,ie.forEachTableColumns=Fs,ie.fsColumnsFilterNestList=Tl,ie.getCrudOptionsPlugin=Df,ie.importTable=N1,ie.loadFsExportUtil=Tf,ie.loadFsImportUtil=Cf,ie.registerCrudOptionsPlugin=Af,ie.registerMergeColumnPlugin=vi,ie.setLogger=Zc,ie.useColumns=zo,ie.useCompute=Gr,ie.useCrud=Rf,ie.useDict=Sn,ie.useDictDefine=$f,ie.useDrag=Wf,ie.useExpose=As,ie.useFormWrapper=bf,ie.useFs=I1,ie.useFsAsync=Bf,ie.useFsRef=Nf,ie.useI18n=Yt,ie.useMerge=Ze,ie.useTypes=V1,ie.utils=hi,Object.keys(de).forEach(e=>{e!=="default"&&!Object.prototype.hasOwnProperty.call(ie,e)&&Object.defineProperty(ie,e,{enumerable:!0,get:()=>de[e]})}),Object.defineProperties(ie,{__esModule:{value:!0},[Symbol.toStringTag]:{value:"Module"}})});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZmFzdC1jcnVkLnVtZC5qcyIsInNvdXJjZXMiOlsiLi4vLi4vc3JjL3VzZS9kZWZhdWx0LWNydWQtb3B0aW9ucy50cyIsIi4uLy4uL3NyYy91dGlscy91dGlsLmxvZy50cyIsIi4uLy4uL3NyYy91dGlscy91dGlsLnN0cmluZy50cyIsIi4uLy4uL3NyYy91dGlscy91dGlsLnRyYWNlLnRzIiwiLi4vLi4vc3JjL3V0aWxzL3V0aWwudml0ZS50cyIsIi4uLy4uL3NyYy91dGlscy91dGlsLnN0b3JlLnRzIiwiLi4vLi4vc3JjL3V0aWxzL2RlZXBkYXNoL3ByaXZhdGUvZ2V0UGF0aFRvU3RyaW5nLnRzIiwiLi4vLi4vc3JjL3V0aWxzL2RlZXBkYXNoL3ByaXZhdGUvZ2V0SXRlcmF0ZS50cyIsIi4uLy4uL3NyYy91dGlscy9kZWVwZGFzaC9nZXQtZWFjaC1kZWVwLnRzIiwiLi4vLi4vc3JjL3V0aWxzL2RlZXBkYXNoL2luZGV4LnRzIiwiLi4vLi4vc3JjL3V0aWxzL2luZGV4LnRzIiwiLi4vLi4vc3JjL3V0aWxzL3V0aWwuZGFzaC50cyIsIi4uLy4uL3NyYy90eXBlcy9saXN0L2Fzc2lzdC50cyIsIi4uLy4uL3NyYy90eXBlcy9saXN0L2J1dHRvbi50cyIsIi4uLy4uL3NyYy90eXBlcy9saXN0L2Nhc2NhZGVyLnRzIiwiLi4vLi4vc3JjL2xvY2FsZS9sYW5nL3poLWNuLnRzIiwiLi4vLi4vc3JjL2xvY2FsZS9sYW5nL2VuLnRzIiwiLi4vLi4vc3JjL2xvY2FsZS9pbmRleC50cyIsIi4uLy4uLy4uL25vZGVfbW9kdWxlcy8ucG5wbS9kYXlqc0AxLjExLjExL25vZGVfbW9kdWxlcy9kYXlqcy9wbHVnaW4vYWR2YW5jZWRGb3JtYXQuanMiLCIuLi8uLi9zcmMvdHlwZXMvZnVuY3Rpb25zLnRzIiwiLi4vLi4vLi4vbm9kZV9tb2R1bGVzLy5wbnBtL2RheWpzQDEuMTEuMTEvbm9kZV9tb2R1bGVzL2RheWpzL3BsdWdpbi93ZWVrT2ZZZWFyLmpzIiwiLi4vLi4vLi4vbm9kZV9tb2R1bGVzLy5wbnBtL2RheWpzQDEuMTEuMTEvbm9kZV9tb2R1bGVzL2RheWpzL3BsdWdpbi93ZWVrZGF5LmpzIiwiLi4vLi4vLi4vbm9kZV9tb2R1bGVzLy5wbnBtL2RheWpzQDEuMTEuMTEvbm9kZV9tb2R1bGVzL2RheWpzL3BsdWdpbi9sb2NhbGVEYXRhLmpzIiwiLi4vLi4vc3JjL3R5cGVzL2xpc3QvZGF0ZS50cyIsIi4uLy4uL3NyYy90eXBlcy9saXN0L2VsLnRzIiwiLi4vLi4vc3JjL3R5cGVzL2xpc3QvbnVtYmVyLnRzIiwiLi4vLi4vc3JjL3R5cGVzL2xpc3QvcGhvbmUudHMiLCIuLi8uLi9zcmMvdHlwZXMvbGlzdC9zZWxlY3QudHMiLCIuLi8uLi9zcmMvdHlwZXMvbGlzdC90ZXh0LnRzIiwiLi4vLi4vc3JjL3R5cGVzL2xpc3QvdHJlZS50cyIsIi4uLy4uL3NyYy90eXBlcy9pbmRleC50cyIsIi4uL3NyYy9jb21wb25lbnRzL2NvbnRhaW5lci9mcy1wYWdlLnZ1ZSIsIi4uL3NyYy9jb21wb25lbnRzL2NvbnRhaW5lci9mcy1wYWdlLnZ1ZSIsIi4uLy4uL3NyYy91c2UvdXNlLW1lcmdlLnRzIiwiLi4vLi4vc3JjL3VzZS91c2UtY29tcHV0ZS50cyIsIi4uLy4uL3NyYy91dGlscy91dGlsLmNvbnN0YW50cy50cyIsIi4uLy4uL3NyYy91c2UvdXNlLWNvbHVtbnMudHN4IiwiLi4vLi4vc3JjL3VzZS91c2UtZm9ybS50cyIsIi4uLy4uL3NyYy91c2UvdXNlLWV4cG9zZS50cyIsIi4uLy4uL3NyYy9saWIvZnMtZXhwb3J0L2luZGV4LnRzIiwiLi4vLi4vc3JjL3VzZS91c2UtcGx1Z2lucy50cyIsIi4uLy4uL3NyYy91c2UvdXNlLWNydWQudHMiLCIuLi8uLi9zcmMvdXNlL3VzZS1kaWN0LnRzIiwiLi4vLi4vLi4vbm9kZV9tb2R1bGVzLy5wbnBtL2xydS1jYWNoZUAxMC4yLjIvbm9kZV9tb2R1bGVzL2xydS1jYWNoZS9kaXN0L2VzbS9pbmRleC5qcyIsIi4uLy4uL3NyYy91c2UvdXNlLWRpY3QtZGVmaW5lLnRzIiwiLi4vLi4vc3JjL3VzZS91c2UtdHlwZXMudHMiLCIuLi8uLi9zcmMvdXNlL3VzZS1kcmFnLnRzIiwiLi4vLi4vc3JjL3VzZS9jb25maWcudHMiLCIuLi9zcmMvY29tcG9uZW50cy9jb250YWluZXIvZnMtY29udGFpbmVyLnZ1ZSIsIi4uL3NyYy9jb21wb25lbnRzL2NvbnRhaW5lci9mcy1jb250YWluZXIudnVlIiwiLi4vc3JjL2NvbXBvbmVudHMvY29udGFpbmVyL2ZzLWxheW91dC1kZWZhdWx0LnZ1ZSIsIi4uL3NyYy9jb21wb25lbnRzL2NvbnRhaW5lci9mcy1sYXlvdXQtZGVmYXVsdC52dWUiLCIuLi9zcmMvY29tcG9uZW50cy9jb250YWluZXIvZnMtbGF5b3V0LWNhcmQudnVlIiwiLi4vc3JjL2NvbXBvbmVudHMvY29udGFpbmVyL2ZzLWxheW91dC1jYXJkLnZ1ZSIsIi4uLy4uL3NyYy9jb21wb25lbnRzL2Jhc2ljL2ZzLWJ1dHRvbi50c3giLCIuLi8uLi9zcmMvY29tcG9uZW50cy9iYXNpYy9mcy1pY29uLnRzeCIsIi4uL3NyYy9jb21wb25lbnRzL2Jhc2ljL2ZzLWljb25pZnkudnVlIiwiLi4vc3JjL2NvbXBvbmVudHMvYmFzaWMvZnMtaWNvbmlmeS52dWUiLCIuLi9zcmMvY29tcG9uZW50cy9iYXNpYy9mcy1pY29uLXN2Zy52dWUiLCIuLi9zcmMvY29tcG9uZW50cy9iYXNpYy9mcy1pY29uLXN2Zy52dWUiLCIuLi9zcmMvY29tcG9uZW50cy9iYXNpYy9mcy1sYWJlbC52dWUiLCIuLi9zcmMvY29tcG9uZW50cy9iYXNpYy9mcy1sYWJlbC52dWUiLCIuLi8uLi9zcmMvY29tcG9uZW50cy9iYXNpYy9mcy1sb2FkaW5nLnRzeCIsIi4uL3NyYy9jb21wb25lbnRzL2Jhc2ljL2ZzLWJveC52dWUiLCIuLi9zcmMvY29tcG9uZW50cy9iYXNpYy9mcy1ib3gudnVlIiwiLi4vLi4vc3JjL2NvbXBvbmVudHMvcmVuZGVyL2ZzLWNvbXBvbmVudC1yZW5kZXIudHN4IiwiLi4vLi4vc3JjL2NvbXBvbmVudHMvcmVuZGVyL2ZzLXNsb3QtcmVuZGVyLnRzeCIsIi4uLy4uL3NyYy9jb21wb25lbnRzL3JlbmRlci9mcy1yZW5kZXIudHN4IiwiLi4vc3JjL2NvbXBvbmVudHMvY3J1ZC9mcy1mb3JtLnZ1ZSIsIi4uL3NyYy9jb21wb25lbnRzL2NydWQvZnMtZm9ybS52dWUiLCIuLi9zcmMvY29tcG9uZW50cy9jcnVkL2ZzLWZvcm0taXRlbS52dWUiLCIuLi9zcmMvY29tcG9uZW50cy9jcnVkL2ZzLWZvcm0taXRlbS52dWUiLCIuLi9zcmMvY29tcG9uZW50cy9jcnVkL2ZzLWZvcm0taGVscGVyLnZ1ZSIsIi4uL3NyYy9jb21wb25lbnRzL2NydWQvZnMtZm9ybS1oZWxwZXIudnVlIiwiLi4vLi4vc3JjL2NvbXBvbmVudHMvY3J1ZC9mcy1mb3JtLXdyYXBwZXIudHN4IiwiLi4vc3JjL2NvbXBvbmVudHMvY3J1ZC9mcy1mb3JtLXByb3ZpZGVyLnZ1ZSIsIi4uL3NyYy9jb21wb25lbnRzL2ZzLWNydWQudnVlIiwiLi4vc3JjL2NvbXBvbmVudHMvZnMtY3J1ZC52dWUiLCIuLi9zcmMvY29tcG9uZW50cy9jcnVkL2ZzLXJvdy1oYW5kbGUudnVlIiwiLi4vc3JjL2NvbXBvbmVudHMvY3J1ZC9mcy1yb3ctaGFuZGxlLnZ1ZSIsIi4uLy4uLy4uL25vZGVfbW9kdWxlcy8ucG5wbS9hc3luYy12YWxpZGF0b3JANC4yLjUvbm9kZV9tb2R1bGVzL2FzeW5jLXZhbGlkYXRvci9kaXN0LXdlYi9pbmRleC5qcyIsIi4uLy4uL3NyYy9jb21wb25lbnRzL2NydWQvZWRpdGFibGUvdmFsaWRhdG9yLnRzIiwiLi4vLi4vc3JjL2NvbXBvbmVudHMvY3J1ZC9lZGl0YWJsZS91c2UtZWRpdGFibGUudHMiLCIuLi8uLi9zcmMvY29tcG9uZW50cy9jcnVkL3VzZS9wcm92aWRlci50cyIsIi4uLy4uL3NyYy9jb21wb25lbnRzL2NydWQvZnMtdGFibGUudHN4IiwiLi4vLi4vc3JjL2NvbXBvbmVudHMvY3J1ZC9mcy1jZWxsLnRzeCIsIi4uLy4uL3NyYy9jb21wb25lbnRzL2NydWQvZWRpdGFibGUvZnMtZWRpdGFibGUtY2VsbC50c3giLCIuLi9zcmMvY29tcG9uZW50cy9jcnVkL2VkaXRhYmxlL2ZzLWVkaXRhYmxlLnZ1ZSIsIi4uL3NyYy9jb21wb25lbnRzL2FjdGlvbmJhci9pbmRleC52dWUiLCIuLi9zcmMvY29tcG9uZW50cy9hY3Rpb25iYXIvaW5kZXgudnVlIiwiLi4vLi4vc3JjL2QvZXhwb3NlLnRzIiwiLi4vLi4vc3JjL2QvY29sdW1ucy1maWx0ZXIudHMiLCIuLi9zcmMvY29tcG9uZW50cy90b29sYmFyL2ZzLXRhYmxlLWNvbHVtbnMtZmlsdGVyL2luZGV4LnZ1ZSIsIi4uL3NyYy9jb21wb25lbnRzL3Rvb2xiYXIvaW5kZXgudnVlIiwiLi4vc3JjL2NvbXBvbmVudHMvdG9vbGJhci9pbmRleC52dWUiLCIuLi8uLi8uLi9ub2RlX21vZHVsZXMvLnBucG0vc29ydGFibGVqc0AxLjE0LjAvbm9kZV9tb2R1bGVzL3NvcnRhYmxlanMvbW9kdWxhci9zb3J0YWJsZS5lc20uanMiLCIuLi8uLi8uLi9ub2RlX21vZHVsZXMvLnBucG0vdnVlZHJhZ2dhYmxlLWVzQDQuMS4xX3Z1ZUAzLjQuMjcvbm9kZV9tb2R1bGVzL3Z1ZWRyYWdnYWJsZS1lcy9kaXN0L2luZGV4LmVzLmpzIiwiLi4vc3JjL2NvbXBvbmVudHMvdG9vbGJhci9mcy10YWJsZS1jb2x1bW5zLWZpbHRlci9mcy10YWJsZS1jb2x1bW5zLWZpeGVkLWNvbnRyb2xsZXIvaW5kZXgudnVlIiwiLi4vc3JjL2NvbXBvbmVudHMvdG9vbGJhci9mcy10YWJsZS1jb2x1bW5zLWZpbHRlci9mcy10YWJsZS1jb2x1bW5zLWZpeGVkLWNvbnRyb2xsZXIvaW5kZXgudnVlIiwiLi4vc3JjL2NvbXBvbmVudHMvdG9vbGJhci9mcy10YWJsZS1jb2x1bW5zLWZpbHRlci9mcy1jb2x1bW5zLWZpbHRlci1uZXN0LWxpc3QudnVlIiwiLi4vc3JjL2NvbXBvbmVudHMvdG9vbGJhci9mcy10YWJsZS1jb2x1bW5zLWZpbHRlci9mcy1jb2x1bW5zLWZpbHRlci1sYXlvdXQtZGVmYXVsdC52dWUiLCIuLi9zcmMvY29tcG9uZW50cy9zZWFyY2gvYnV0dG9ucy52dWUiLCIuLi9zcmMvY29tcG9uZW50cy9zZWFyY2gvYnV0dG9ucy52dWUiLCIuLi9zcmMvY29tcG9uZW50cy9zZWFyY2gvaW5kZXgudnVlIiwiLi4vc3JjL2NvbXBvbmVudHMvc2VhcmNoL2luZGV4LnZ1ZSIsIi4uL3NyYy9jb21wb25lbnRzL3NlYXJjaC9zZWFyY2hfdjEudnVlIiwiLi4vc3JjL2NvbXBvbmVudHMvc2VhcmNoL3NlYXJjaF92MS52dWUiLCIuLi9zcmMvY29tcG9uZW50cy9zZWFyY2gvbGF5b3V0LWRlZmF1bHQudnVlIiwiLi4vc3JjL2NvbXBvbmVudHMvc2VhcmNoL2xheW91dC1kZWZhdWx0LnZ1ZSIsIi4uL3NyYy9jb21wb25lbnRzL3NlYXJjaC90YWJzLWZpbHRlci52dWUiLCIuLi9zcmMvY29tcG9uZW50cy9leHRlbmRzL2ZzLWRpY3QtcmFkaW8udnVlIiwiLi4vc3JjL2NvbXBvbmVudHMvZXh0ZW5kcy9mcy1kaWN0LXJhZGlvLnZ1ZSIsIi4uLy4uL3NyYy9jb21wb25lbnRzL2V4dGVuZHMvZnMtZGljdC1zZWxlY3QudHN4IiwiLi4vc3JjL2NvbXBvbmVudHMvZXh0ZW5kcy9mcy12YWx1ZXMtZm9ybWF0LnZ1ZSIsIi4uL3NyYy9jb21wb25lbnRzL2V4dGVuZHMvZnMtdmFsdWVzLWZvcm1hdC52dWUiLCIuLi9zcmMvY29tcG9uZW50cy9leHRlbmRzL2ZzLWRpY3QtY2FzY2FkZXItZm9ybWF0LnZ1ZSIsIi4uL3NyYy9jb21wb25lbnRzL2V4dGVuZHMvZnMtZGljdC1jYXNjYWRlci1mb3JtYXQudnVlIiwiLi4vc3JjL2NvbXBvbmVudHMvZXh0ZW5kcy9mcy1kaWN0LWNhc2NhZGVyLnZ1ZSIsIi4uL3NyYy9jb21wb25lbnRzL2V4dGVuZHMvZnMtZGljdC1jYXNjYWRlci52dWUiLCIuLi9zcmMvY29tcG9uZW50cy9leHRlbmRzL2ZzLWRpY3QtY2hlY2tib3gudnVlIiwiLi4vc3JjL2NvbXBvbmVudHMvZXh0ZW5kcy9mcy1kaWN0LWNoZWNrYm94LnZ1ZSIsIi4uL3NyYy9jb21wb25lbnRzL2V4dGVuZHMvZnMtZGljdC1zd2l0Y2gudnVlIiwiLi4vc3JjL2NvbXBvbmVudHMvZXh0ZW5kcy9mcy1kYXRlLWZvcm1hdC52dWUiLCIuLi9zcmMvY29tcG9uZW50cy9leHRlbmRzL2ZzLWRpY3QtdHJlZS52dWUiLCIuLi9zcmMvY29tcG9uZW50cy9leHRlbmRzL2ZzLWRpY3QtdHJlZS52dWUiLCIuLi9zcmMvY29tcG9uZW50cy9leHRlbmRzL2ZzLXRhYmxlLXNlbGVjdC52dWUiLCIuLi8uLi9zcmMvaW5kZXgudHMiLCIuLi9zcmMvbGliL2ZzLWV4cG9ydC9saWIvX2V4cG9ydC1jc3YuanMiLCIuLi9zcmMvbGliL2ZzLWV4cG9ydC9saWIvX2Nzdi5qcyIsIi4uL3NyYy9saWIvZnMtZXhwb3J0L2xpYi9fYmxvYi5qcyIsIi4uLy4uLy4uL25vZGVfbW9kdWxlcy8ucG5wbS9maWxlLXNhdmVyQDIuMC41L25vZGVfbW9kdWxlcy9maWxlLXNhdmVyL2Rpc3QvRmlsZVNhdmVyLm1pbi5qcyIsIi4uLy4uLy4uL25vZGVfbW9kdWxlcy8ucG5wbS94bHN4QDAuMTguNS9ub2RlX21vZHVsZXMveGxzeC94bHN4Lm1qcyIsIi4uL3NyYy9saWIvZnMtZXhwb3J0L2xpYi9fZXhwb3J0MkV4Y2VsLmpzIiwiLi4vLi4vc3JjL2xpYi9mcy1leHBvcnQvbGliL19pbXBvcnQuY3N2LnRzIiwiLi4vLi4vc3JjL2xpYi9mcy1leHBvcnQvbGliL2luZGV4LnRzIl0sInNvdXJjZXNDb250ZW50IjpbbnVsbCxudWxsLG51bGwsbnVsbCxudWxsLG51bGwsbnVsbCxudWxsLG51bGwsbnVsbCxudWxsLG51bGwsbnVsbCxudWxsLG51bGwsbnVsbCxudWxsLG51bGwsIiFmdW5jdGlvbihlLHQpe1wib2JqZWN0XCI9PXR5cGVvZiBleHBvcnRzJiZcInVuZGVmaW5lZFwiIT10eXBlb2YgbW9kdWxlP21vZHVsZS5leHBvcnRzPXQoKTpcImZ1bmN0aW9uXCI9PXR5cGVvZiBkZWZpbmUmJmRlZmluZS5hbWQ/ZGVmaW5lKHQpOihlPVwidW5kZWZpbmVkXCIhPXR5cGVvZiBnbG9iYWxUaGlzP2dsb2JhbFRoaXM6ZXx8c2VsZikuZGF5anNfcGx1Z2luX2FkdmFuY2VkRm9ybWF0PXQoKX0odGhpcywoZnVuY3Rpb24oKXtcInVzZSBzdHJpY3RcIjtyZXR1cm4gZnVuY3Rpb24oZSx0KXt2YXIgcj10LnByb3RvdHlwZSxuPXIuZm9ybWF0O3IuZm9ybWF0PWZ1bmN0aW9uKGUpe3ZhciB0PXRoaXMscj10aGlzLiRsb2NhbGUoKTtpZighdGhpcy5pc1ZhbGlkKCkpcmV0dXJuIG4uYmluZCh0aGlzKShlKTt2YXIgcz10aGlzLiR1dGlscygpLGE9KGV8fFwiWVlZWS1NTS1ERFRISDptbTpzc1pcIikucmVwbGFjZSgvXFxbKFteXFxdXSspXXxRfHdvfHd3fHd8V1d8V3x6enp8enxnZ2dnfEdHR0d8RG98WHx4fGt7MSwyfXxTL2csKGZ1bmN0aW9uKGUpe3N3aXRjaChlKXtjYXNlXCJRXCI6cmV0dXJuIE1hdGguY2VpbCgodC4kTSsxKS8zKTtjYXNlXCJEb1wiOnJldHVybiByLm9yZGluYWwodC4kRCk7Y2FzZVwiZ2dnZ1wiOnJldHVybiB0LndlZWtZZWFyKCk7Y2FzZVwiR0dHR1wiOnJldHVybiB0Lmlzb1dlZWtZZWFyKCk7Y2FzZVwid29cIjpyZXR1cm4gci5vcmRpbmFsKHQud2VlaygpLFwiV1wiKTtjYXNlXCJ3XCI6Y2FzZVwid3dcIjpyZXR1cm4gcy5zKHQud2VlaygpLFwid1wiPT09ZT8xOjIsXCIwXCIpO2Nhc2VcIldcIjpjYXNlXCJXV1wiOnJldHVybiBzLnModC5pc29XZWVrKCksXCJXXCI9PT1lPzE6MixcIjBcIik7Y2FzZVwia1wiOmNhc2VcImtrXCI6cmV0dXJuIHMucyhTdHJpbmcoMD09PXQuJEg/MjQ6dC4kSCksXCJrXCI9PT1lPzE6MixcIjBcIik7Y2FzZVwiWFwiOnJldHVybiBNYXRoLmZsb29yKHQuJGQuZ2V0VGltZSgpLzFlMyk7Y2FzZVwieFwiOnJldHVybiB0LiRkLmdldFRpbWUoKTtjYXNlXCJ6XCI6cmV0dXJuXCJbXCIrdC5vZmZzZXROYW1lKCkrXCJdXCI7Y2FzZVwienp6XCI6cmV0dXJuXCJbXCIrdC5vZmZzZXROYW1lKFwibG9uZ1wiKStcIl1cIjtkZWZhdWx0OnJldHVybiBlfX0pKTtyZXR1cm4gbi5iaW5kKHRoaXMpKGEpfX19KSk7IixudWxsLCIhZnVuY3Rpb24oZSx0KXtcIm9iamVjdFwiPT10eXBlb2YgZXhwb3J0cyYmXCJ1bmRlZmluZWRcIiE9dHlwZW9mIG1vZHVsZT9tb2R1bGUuZXhwb3J0cz10KCk6XCJmdW5jdGlvblwiPT10eXBlb2YgZGVmaW5lJiZkZWZpbmUuYW1kP2RlZmluZSh0KTooZT1cInVuZGVmaW5lZFwiIT10eXBlb2YgZ2xvYmFsVGhpcz9nbG9iYWxUaGlzOmV8fHNlbGYpLmRheWpzX3BsdWdpbl93ZWVrT2ZZZWFyPXQoKX0odGhpcywoZnVuY3Rpb24oKXtcInVzZSBzdHJpY3RcIjt2YXIgZT1cIndlZWtcIix0PVwieWVhclwiO3JldHVybiBmdW5jdGlvbihpLG4scil7dmFyIGY9bi5wcm90b3R5cGU7Zi53ZWVrPWZ1bmN0aW9uKGkpe2lmKHZvaWQgMD09PWkmJihpPW51bGwpLG51bGwhPT1pKXJldHVybiB0aGlzLmFkZCg3KihpLXRoaXMud2VlaygpKSxcImRheVwiKTt2YXIgbj10aGlzLiRsb2NhbGUoKS55ZWFyU3RhcnR8fDE7aWYoMTE9PT10aGlzLm1vbnRoKCkmJnRoaXMuZGF0ZSgpPjI1KXt2YXIgZj1yKHRoaXMpLnN0YXJ0T2YodCkuYWRkKDEsdCkuZGF0ZShuKSxzPXIodGhpcykuZW5kT2YoZSk7aWYoZi5pc0JlZm9yZShzKSlyZXR1cm4gMX12YXIgYT1yKHRoaXMpLnN0YXJ0T2YodCkuZGF0ZShuKS5zdGFydE9mKGUpLnN1YnRyYWN0KDEsXCJtaWxsaXNlY29uZFwiKSxvPXRoaXMuZGlmZihhLGUsITApO3JldHVybiBvPDA/cih0aGlzKS5zdGFydE9mKFwid2Vla1wiKS53ZWVrKCk6TWF0aC5jZWlsKG8pfSxmLndlZWtzPWZ1bmN0aW9uKGUpe3JldHVybiB2b2lkIDA9PT1lJiYoZT1udWxsKSx0aGlzLndlZWsoZSl9fX0pKTsiLCIhZnVuY3Rpb24oZSx0KXtcIm9iamVjdFwiPT10eXBlb2YgZXhwb3J0cyYmXCJ1bmRlZmluZWRcIiE9dHlwZW9mIG1vZHVsZT9tb2R1bGUuZXhwb3J0cz10KCk6XCJmdW5jdGlvblwiPT10eXBlb2YgZGVmaW5lJiZkZWZpbmUuYW1kP2RlZmluZSh0KTooZT1cInVuZGVmaW5lZFwiIT10eXBlb2YgZ2xvYmFsVGhpcz9nbG9iYWxUaGlzOmV8fHNlbGYpLmRheWpzX3BsdWdpbl93ZWVrZGF5PXQoKX0odGhpcywoZnVuY3Rpb24oKXtcInVzZSBzdHJpY3RcIjtyZXR1cm4gZnVuY3Rpb24oZSx0KXt0LnByb3RvdHlwZS53ZWVrZGF5PWZ1bmN0aW9uKGUpe3ZhciB0PXRoaXMuJGxvY2FsZSgpLndlZWtTdGFydHx8MCxpPXRoaXMuJFcsbj0oaTx0P2krNzppKS10O3JldHVybiB0aGlzLiR1dGlscygpLnUoZSk/bjp0aGlzLnN1YnRyYWN0KG4sXCJkYXlcIikuYWRkKGUsXCJkYXlcIil9fX0pKTsiLCIhZnVuY3Rpb24obixlKXtcIm9iamVjdFwiPT10eXBlb2YgZXhwb3J0cyYmXCJ1bmRlZmluZWRcIiE9dHlwZW9mIG1vZHVsZT9tb2R1bGUuZXhwb3J0cz1lKCk6XCJmdW5jdGlvblwiPT10eXBlb2YgZGVmaW5lJiZkZWZpbmUuYW1kP2RlZmluZShlKToobj1cInVuZGVmaW5lZFwiIT10eXBlb2YgZ2xvYmFsVGhpcz9nbG9iYWxUaGlzOm58fHNlbGYpLmRheWpzX3BsdWdpbl9sb2NhbGVEYXRhPWUoKX0odGhpcywoZnVuY3Rpb24oKXtcInVzZSBzdHJpY3RcIjtyZXR1cm4gZnVuY3Rpb24obixlLHQpe3ZhciByPWUucHJvdG90eXBlLG89ZnVuY3Rpb24obil7cmV0dXJuIG4mJihuLmluZGV4T2Y/bjpuLnMpfSx1PWZ1bmN0aW9uKG4sZSx0LHIsdSl7dmFyIGk9bi5uYW1lP246bi4kbG9jYWxlKCksYT1vKGlbZV0pLHM9byhpW3RdKSxmPWF8fHMubWFwKChmdW5jdGlvbihuKXtyZXR1cm4gbi5zbGljZSgwLHIpfSkpO2lmKCF1KXJldHVybiBmO3ZhciBkPWkud2Vla1N0YXJ0O3JldHVybiBmLm1hcCgoZnVuY3Rpb24obixlKXtyZXR1cm4gZlsoZSsoZHx8MCkpJTddfSkpfSxpPWZ1bmN0aW9uKCl7cmV0dXJuIHQuTHNbdC5sb2NhbGUoKV19LGE9ZnVuY3Rpb24obixlKXtyZXR1cm4gbi5mb3JtYXRzW2VdfHxmdW5jdGlvbihuKXtyZXR1cm4gbi5yZXBsYWNlKC8oXFxbW15cXF1dK10pfChNTU1NfE1NfEREfGRkZGQpL2csKGZ1bmN0aW9uKG4sZSx0KXtyZXR1cm4gZXx8dC5zbGljZSgxKX0pKX0obi5mb3JtYXRzW2UudG9VcHBlckNhc2UoKV0pfSxzPWZ1bmN0aW9uKCl7dmFyIG49dGhpcztyZXR1cm57bW9udGhzOmZ1bmN0aW9uKGUpe3JldHVybiBlP2UuZm9ybWF0KFwiTU1NTVwiKTp1KG4sXCJtb250aHNcIil9LG1vbnRoc1Nob3J0OmZ1bmN0aW9uKGUpe3JldHVybiBlP2UuZm9ybWF0KFwiTU1NXCIpOnUobixcIm1vbnRoc1Nob3J0XCIsXCJtb250aHNcIiwzKX0sZmlyc3REYXlPZldlZWs6ZnVuY3Rpb24oKXtyZXR1cm4gbi4kbG9jYWxlKCkud2Vla1N0YXJ0fHwwfSx3ZWVrZGF5czpmdW5jdGlvbihlKXtyZXR1cm4gZT9lLmZvcm1hdChcImRkZGRcIik6dShuLFwid2Vla2RheXNcIil9LHdlZWtkYXlzTWluOmZ1bmN0aW9uKGUpe3JldHVybiBlP2UuZm9ybWF0KFwiZGRcIik6dShuLFwid2Vla2RheXNNaW5cIixcIndlZWtkYXlzXCIsMil9LHdlZWtkYXlzU2hvcnQ6ZnVuY3Rpb24oZSl7cmV0dXJuIGU/ZS5mb3JtYXQoXCJkZGRcIik6dShuLFwid2Vla2RheXNTaG9ydFwiLFwid2Vla2RheXNcIiwzKX0sbG9uZ0RhdGVGb3JtYXQ6ZnVuY3Rpb24oZSl7cmV0dXJuIGEobi4kbG9jYWxlKCksZSl9LG1lcmlkaWVtOnRoaXMuJGxvY2FsZSgpLm1lcmlkaWVtLG9yZGluYWw6dGhpcy4kbG9jYWxlKCkub3JkaW5hbH19O3IubG9jYWxlRGF0YT1mdW5jdGlvbigpe3JldHVybiBzLmJpbmQodGhpcykoKX0sdC5sb2NhbGVEYXRhPWZ1bmN0aW9uKCl7dmFyIG49aSgpO3JldHVybntmaXJzdERheU9mV2VlazpmdW5jdGlvbigpe3JldHVybiBuLndlZWtTdGFydHx8MH0sd2Vla2RheXM6ZnVuY3Rpb24oKXtyZXR1cm4gdC53ZWVrZGF5cygpfSx3ZWVrZGF5c1Nob3J0OmZ1bmN0aW9uKCl7cmV0dXJuIHQud2Vla2RheXNTaG9ydCgpfSx3ZWVrZGF5c01pbjpmdW5jdGlvbigpe3JldHVybiB0LndlZWtkYXlzTWluKCl9LG1vbnRoczpmdW5jdGlvbigpe3JldHVybiB0Lm1vbnRocygpfSxtb250aHNTaG9ydDpmdW5jdGlvbigpe3JldHVybiB0Lm1vbnRoc1Nob3J0KCl9LGxvbmdEYXRlRm9ybWF0OmZ1bmN0aW9uKGUpe3JldHVybiBhKG4sZSl9LG1lcmlkaWVtOm4ubWVyaWRpZW0sb3JkaW5hbDpuLm9yZGluYWx9fSx0Lm1vbnRocz1mdW5jdGlvbigpe3JldHVybiB1KGkoKSxcIm1vbnRoc1wiKX0sdC5tb250aHNTaG9ydD1mdW5jdGlvbigpe3JldHVybiB1KGkoKSxcIm1vbnRoc1Nob3J0XCIsXCJtb250aHNcIiwzKX0sdC53ZWVrZGF5cz1mdW5jdGlvbihuKXtyZXR1cm4gdShpKCksXCJ3ZWVrZGF5c1wiLG51bGwsbnVsbCxuKX0sdC53ZWVrZGF5c1Nob3J0PWZ1bmN0aW9uKG4pe3JldHVybiB1KGkoKSxcIndlZWtkYXlzU2hvcnRcIixcIndlZWtkYXlzXCIsMyxuKX0sdC53ZWVrZGF5c01pbj1mdW5jdGlvbihuKXtyZXR1cm4gdShpKCksXCJ3ZWVrZGF5c01pblwiLFwid2Vla2RheXNcIiwyLG4pfX19KSk7IixudWxsLG51bGwsbnVsbCxudWxsLG51bGwsbnVsbCxudWxsLG51bGwsIjx0ZW1wbGF0ZT5cbiAgPGRpdiByZWY9XCJwYWdlUmVmXCIgY2xhc3M9XCJmcy1wYWdlXCI+XG4gICAgPGRpdiB2LWlmPVwiJHNsb3RzLmhlYWRlciAhPSBudWxsXCIgY2xhc3M9XCJmcy1wYWdlLWhlYWRlclwiPlxuICAgICAgPHNsb3QgbmFtZT1cImhlYWRlclwiPjwvc2xvdD5cbiAgICA8L2Rpdj5cblxuICAgIDxkaXYgY2xhc3M9XCJmcy1wYWdlLWNvbnRlbnRcIj5cbiAgICAgIDxzbG90Pjwvc2xvdD5cbiAgICA8L2Rpdj5cbiAgICA8ZGl2IHYtaWY9XCIkc2xvdHMuZm9vdGVyICE9IG51bGxcIiBjbGFzcz1cImZzLXBhZ2UtZm9vdGVyXCI+XG4gICAgICA8c2xvdCBuYW1lPVwiZm9vdGVyXCI+PC9zbG90PlxuICAgIDwvZGl2PlxuICA8L2Rpdj5cbjwvdGVtcGxhdGU+XG5cbjxzY3JpcHQgbGFuZz1cInRzXCI+XG5pbXBvcnQgeyBkZWZpbmVDb21wb25lbnQsIG9uTW91bnRlZCwgcmVmLCBSZWYgfSBmcm9tIFwidnVlXCI7XG5pbXBvcnQgeyB1dGlscyB9IGZyb20gXCIuLi8uLi91dGlsc1wiO1xuZXhwb3J0IGRlZmF1bHQgZGVmaW5lQ29tcG9uZW50KHtcbiAgbmFtZTogXCJGc1BhZ2VcIixcbiAgc2V0dXAoKSB7XG4gICAgY29uc3QgcGFnZVJlZjogUmVmID0gcmVmKCk7XG4gICAgb25Nb3VudGVkKCgpID0+IHtcbiAgICAgIGNvbnN0IHN0eWxlcyA9IHdpbmRvdy5nZXRDb21wdXRlZFN0eWxlKHBhZ2VSZWYudmFsdWUucGFyZW50Tm9kZSk7XG4gICAgICBjb25zdCBwb3NpdGlvblZhbHVlID0gc3R5bGVzLmdldFByb3BlcnR5VmFsdWUoXCJwb3NpdGlvblwiKTtcbiAgICAgIGlmIChwb3NpdGlvblZhbHVlICE9PSBcInJlbGF0aXZlXCIpIHtcbiAgICAgICAgdXRpbHMubG9nZ2VyLndhcm4oXG4gICAgICAgICAgXCJmcy1wYWdl54i26IqC54K555qEcG9zaXRpb27lu7rorq7kuLpyZWxhdGl2ZSzlm6DkuLpmcy1wYWdl5Li655u45a+55a6a5L2N77yIcG9zaXRpb246YWJzb2x1dGXvvInvvIzlpoLmnpzmoLflvI/msqHmnInlvILluLjvvIzkvaDlj6/ku6Xlv73nlaXmraTorablkYpcIlxuICAgICAgICApO1xuICAgICAgfVxuICAgIH0pO1xuICAgIHJldHVybiB7XG4gICAgICBwYWdlUmVmXG4gICAgfTtcbiAgfVxufSk7XG48L3NjcmlwdD5cblxuPHN0eWxlIGxhbmc9XCJsZXNzXCI+XG4uZnMtcGFnZSB7XG4gIHdpZHRoOiAxMDAlO1xuICB0b3A6IDA7XG4gIGJvdHRvbTogMDtcbiAgcG9zaXRpb246IGFic29sdXRlO1xuICBkaXNwbGF5OiBmbGV4O1xuICBmbGV4LWRpcmVjdGlvbjogY29sdW1uO1xuXG4gIC5mcy1wYWdlLWhlYWRlciB7XG4gICAgZGlzcGxheTogZmxleDtcbiAgICBhbGlnbi1pdGVtczogY2VudGVyO1xuICAgIGJvcmRlci1ib3R0b206IDFweCBzb2xpZCAjZGRkO1xuICAgID4gLnRpdGxlIHtcbiAgICAgIGZsZXg6IDE7XG4gICAgICBqdXN0aWZ5LXNlbGY6IGZsZXgtc3RhcnQ7XG4gICAgICBwYWRkaW5nOiAxOHB4O1xuICAgICAgZm9udC1zaXplOiAxNnB4O1xuICAgICAgZm9udC13ZWlnaHQ6IGJvbGQ7XG4gICAgICBjb2xvcjogIzQ0NDtcblxuICAgICAgLnN1YiB7XG4gICAgICAgIGZvbnQtc2l6ZTogMTJweDtcbiAgICAgICAgY29sb3I6IGdyYXk7XG4gICAgICAgIG1hcmdpbi1sZWZ0OiAyMHB4O1xuICAgICAgICBmb250LXdlaWdodDogbGlnaHRlcjtcbiAgICAgIH1cbiAgICB9XG4gICAgPiAubW9yZSB7XG4gICAgICBqdXN0aWZ5LXNlbGY6IGZsZXgtZW5kO1xuICAgICAgbWFyZ2luLXJpZ2h0OiAxOHB4O1xuICAgICAgZm9udC1zaXplOiAxNHB4O1xuICAgICAgZGlzcGxheTogZmxleDtcbiAgICB9XG4gIH1cbiAgLmZzLXBhZ2UtY29udGVudCB7XG4gICAgZmxleDogMTtcbiAgICBvdmVyZmxvdzogYXV0bztcbiAgfVxufVxuPC9zdHlsZT5cbiIsIjx0ZW1wbGF0ZT5cbiAgPGRpdiByZWY9XCJwYWdlUmVmXCIgY2xhc3M9XCJmcy1wYWdlXCI+XG4gICAgPGRpdiB2LWlmPVwiJHNsb3RzLmhlYWRlciAhPSBudWxsXCIgY2xhc3M9XCJmcy1wYWdlLWhlYWRlclwiPlxuICAgICAgPHNsb3QgbmFtZT1cImhlYWRlclwiPjwvc2xvdD5cbiAgICA8L2Rpdj5cblxuICAgIDxkaXYgY2xhc3M9XCJmcy1wYWdlLWNvbnRlbnRcIj5cbiAgICAgIDxzbG90Pjwvc2xvdD5cbiAgICA8L2Rpdj5cbiAgICA8ZGl2IHYtaWY9XCIkc2xvdHMuZm9vdGVyICE9IG51bGxcIiBjbGFzcz1cImZzLXBhZ2UtZm9vdGVyXCI+XG4gICAgICA8c2xvdCBuYW1lPVwiZm9vdGVyXCI+PC9zbG90PlxuICAgIDwvZGl2PlxuICA8L2Rpdj5cbjwvdGVtcGxhdGU+XG5cbjxzY3JpcHQgbGFuZz1cInRzXCI+XG5pbXBvcnQgeyBkZWZpbmVDb21wb25lbnQsIG9uTW91bnRlZCwgcmVmLCBSZWYgfSBmcm9tIFwidnVlXCI7XG5pbXBvcnQgeyB1dGlscyB9IGZyb20gXCIuLi8uLi91dGlsc1wiO1xuZXhwb3J0IGRlZmF1bHQgZGVmaW5lQ29tcG9uZW50KHtcbiAgbmFtZTogXCJGc1BhZ2VcIixcbiAgc2V0dXAoKSB7XG4gICAgY29uc3QgcGFnZVJlZjogUmVmID0gcmVmKCk7XG4gICAgb25Nb3VudGVkKCgpID0+IHtcbiAgICAgIGNvbnN0IHN0eWxlcyA9IHdpbmRvdy5nZXRDb21wdXRlZFN0eWxlKHBhZ2VSZWYudmFsdWUucGFyZW50Tm9kZSk7XG4gICAgICBjb25zdCBwb3NpdGlvblZhbHVlID0gc3R5bGVzLmdldFByb3BlcnR5VmFsdWUoXCJwb3NpdGlvblwiKTtcbiAgICAgIGlmIChwb3NpdGlvblZhbHVlICE9PSBcInJlbGF0aXZlXCIpIHtcbiAgICAgICAgdXRpbHMubG9nZ2VyLndhcm4oXG4gICAgICAgICAgXCJmcy1wYWdl54i26IqC54K555qEcG9zaXRpb27lu7rorq7kuLpyZWxhdGl2ZSzlm6DkuLpmcy1wYWdl5Li655u45a+55a6a5L2N77yIcG9zaXRpb246YWJzb2x1dGXvvInvvIzlpoLmnpzmoLflvI/msqHmnInlvILluLjvvIzkvaDlj6/ku6Xlv73nlaXmraTorablkYpcIlxuICAgICAgICApO1xuICAgICAgfVxuICAgIH0pO1xuICAgIHJldHVybiB7XG4gICAgICBwYWdlUmVmXG4gICAgfTtcbiAgfVxufSk7XG48L3NjcmlwdD5cblxuPHN0eWxlIGxhbmc9XCJsZXNzXCI+XG4uZnMtcGFnZSB7XG4gIHdpZHRoOiAxMDAlO1xuICB0b3A6IDA7XG4gIGJvdHRvbTogMDtcbiAgcG9zaXRpb246IGFic29sdXRlO1xuICBkaXNwbGF5OiBmbGV4O1xuICBmbGV4LWRpcmVjdGlvbjogY29sdW1uO1xuXG4gIC5mcy1wYWdlLWhlYWRlciB7XG4gICAgZGlzcGxheTogZmxleDtcbiAgICBhbGlnbi1pdGVtczogY2VudGVyO1xuICAgIGJvcmRlci1ib3R0b206IDFweCBzb2xpZCAjZGRkO1xuICAgID4gLnRpdGxlIHtcbiAgICAgIGZsZXg6IDE7XG4gICAgICBqdXN0aWZ5LXNlbGY6IGZsZXgtc3RhcnQ7XG4gICAgICBwYWRkaW5nOiAxOHB4O1xuICAgICAgZm9udC1zaXplOiAxNnB4O1xuICAgICAgZm9udC13ZWlnaHQ6IGJvbGQ7XG4gICAgICBjb2xvcjogIzQ0NDtcblxuICAgICAgLnN1YiB7XG4gICAgICAgIGZvbnQtc2l6ZTogMTJweDtcbiAgICAgICAgY29sb3I6IGdyYXk7XG4gICAgICAgIG1hcmdpbi1sZWZ0OiAyMHB4O1xuICAgICAgICBmb250LXdlaWdodDogbGlnaHRlcjtcbiAgICAgIH1cbiAgICB9XG4gICAgPiAubW9yZSB7XG4gICAgICBqdXN0aWZ5LXNlbGY6IGZsZXgtZW5kO1xuICAgICAgbWFyZ2luLXJpZ2h0OiAxOHB4O1xuICAgICAgZm9udC1zaXplOiAxNHB4O1xuICAgICAgZGlzcGxheTogZmxleDtcbiAgICB9XG4gIH1cbiAgLmZzLXBhZ2UtY29udGVudCB7XG4gICAgZmxleDogMTtcbiAgICBvdmVyZmxvdzogYXV0bztcbiAgfVxufVxuPC9zdHlsZT5cbiIsbnVsbCxudWxsLG51bGwsbnVsbCxudWxsLG51bGwsbnVsbCxudWxsLG51bGwsbnVsbCwiLyoqXG4gKiBAbW9kdWxlIExSVUNhY2hlXG4gKi9cbmNvbnN0IHBlcmYgPSB0eXBlb2YgcGVyZm9ybWFuY2UgPT09ICdvYmplY3QnICYmXG4gICAgcGVyZm9ybWFuY2UgJiZcbiAgICB0eXBlb2YgcGVyZm9ybWFuY2Uubm93ID09PSAnZnVuY3Rpb24nXG4gICAgPyBwZXJmb3JtYW5jZVxuICAgIDogRGF0ZTtcbmNvbnN0IHdhcm5lZCA9IG5ldyBTZXQoKTtcbi8qIGM4IGlnbm9yZSBzdGFydCAqL1xuY29uc3QgUFJPQ0VTUyA9ICh0eXBlb2YgcHJvY2VzcyA9PT0gJ29iamVjdCcgJiYgISFwcm9jZXNzID8gcHJvY2VzcyA6IHt9KTtcbi8qIGM4IGlnbm9yZSBzdGFydCAqL1xuY29uc3QgZW1pdFdhcm5pbmcgPSAobXNnLCB0eXBlLCBjb2RlLCBmbikgPT4ge1xuICAgIHR5cGVvZiBQUk9DRVNTLmVtaXRXYXJuaW5nID09PSAnZnVuY3Rpb24nXG4gICAgICAgID8gUFJPQ0VTUy5lbWl0V2FybmluZyhtc2csIHR5cGUsIGNvZGUsIGZuKVxuICAgICAgICA6IGNvbnNvbGUuZXJyb3IoYFske2NvZGV9XSAke3R5cGV9OiAke21zZ31gKTtcbn07XG5sZXQgQUMgPSBnbG9iYWxUaGlzLkFib3J0Q29udHJvbGxlcjtcbmxldCBBUyA9IGdsb2JhbFRoaXMuQWJvcnRTaWduYWw7XG4vKiBjOCBpZ25vcmUgc3RhcnQgKi9cbmlmICh0eXBlb2YgQUMgPT09ICd1bmRlZmluZWQnKSB7XG4gICAgLy9AdHMtaWdub3JlXG4gICAgQVMgPSBjbGFzcyBBYm9ydFNpZ25hbCB7XG4gICAgICAgIG9uYWJvcnQ7XG4gICAgICAgIF9vbmFib3J0ID0gW107XG4gICAgICAgIHJlYXNvbjtcbiAgICAgICAgYWJvcnRlZCA9IGZhbHNlO1xuICAgICAgICBhZGRFdmVudExpc3RlbmVyKF8sIGZuKSB7XG4gICAgICAgICAgICB0aGlzLl9vbmFib3J0LnB1c2goZm4pO1xuICAgICAgICB9XG4gICAgfTtcbiAgICAvL0B0cy1pZ25vcmVcbiAgICBBQyA9IGNsYXNzIEFib3J0Q29udHJvbGxlciB7XG4gICAgICAgIGNvbnN0cnVjdG9yKCkge1xuICAgICAgICAgICAgd2FybkFDUG9seWZpbGwoKTtcbiAgICAgICAgfVxuICAgICAgICBzaWduYWwgPSBuZXcgQVMoKTtcbiAgICAgICAgYWJvcnQocmVhc29uKSB7XG4gICAgICAgICAgICBpZiAodGhpcy5zaWduYWwuYWJvcnRlZClcbiAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICAvL0B0cy1pZ25vcmVcbiAgICAgICAgICAgIHRoaXMuc2lnbmFsLnJlYXNvbiA9IHJlYXNvbjtcbiAgICAgICAgICAgIC8vQHRzLWlnbm9yZVxuICAgICAgICAgICAgdGhpcy5zaWduYWwuYWJvcnRlZCA9IHRydWU7XG4gICAgICAgICAgICAvL0B0cy1pZ25vcmVcbiAgICAgICAgICAgIGZvciAoY29uc3QgZm4gb2YgdGhpcy5zaWduYWwuX29uYWJvcnQpIHtcbiAgICAgICAgICAgICAgICBmbihyZWFzb24pO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgdGhpcy5zaWduYWwub25hYm9ydD8uKHJlYXNvbik7XG4gICAgICAgIH1cbiAgICB9O1xuICAgIGxldCBwcmludEFDUG9seWZpbGxXYXJuaW5nID0gUFJPQ0VTUy5lbnY/LkxSVV9DQUNIRV9JR05PUkVfQUNfV0FSTklORyAhPT0gJzEnO1xuICAgIGNvbnN0IHdhcm5BQ1BvbHlmaWxsID0gKCkgPT4ge1xuICAgICAgICBpZiAoIXByaW50QUNQb2x5ZmlsbFdhcm5pbmcpXG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIHByaW50QUNQb2x5ZmlsbFdhcm5pbmcgPSBmYWxzZTtcbiAgICAgICAgZW1pdFdhcm5pbmcoJ0Fib3J0Q29udHJvbGxlciBpcyBub3QgZGVmaW5lZC4gSWYgdXNpbmcgbHJ1LWNhY2hlIGluICcgK1xuICAgICAgICAgICAgJ25vZGUgMTQsIGxvYWQgYW4gQWJvcnRDb250cm9sbGVyIHBvbHlmaWxsIGZyb20gdGhlICcgK1xuICAgICAgICAgICAgJ2Bub2RlLWFib3J0LWNvbnRyb2xsZXJgIHBhY2thZ2UuIEEgbWluaW1hbCBwb2x5ZmlsbCBpcyAnICtcbiAgICAgICAgICAgICdwcm92aWRlZCBmb3IgdXNlIGJ5IExSVUNhY2hlLmZldGNoKCksIGJ1dCBpdCBzaG91bGQgbm90IGJlICcgK1xuICAgICAgICAgICAgJ3JlbGllZCB1cG9uIGluIG90aGVyIGNvbnRleHRzIChlZywgcGFzc2luZyBpdCB0byBvdGhlciBBUElzIHRoYXQgJyArXG4gICAgICAgICAgICAndXNlIEFib3J0Q29udHJvbGxlci9BYm9ydFNpZ25hbCBtaWdodCBoYXZlIHVuZGVzaXJhYmxlIGVmZmVjdHMpLiAnICtcbiAgICAgICAgICAgICdZb3UgbWF5IGRpc2FibGUgdGhpcyB3aXRoIExSVV9DQUNIRV9JR05PUkVfQUNfV0FSTklORz0xIGluIHRoZSBlbnYuJywgJ05PX0FCT1JUX0NPTlRST0xMRVInLCAnRU5PVFNVUCcsIHdhcm5BQ1BvbHlmaWxsKTtcbiAgICB9O1xufVxuLyogYzggaWdub3JlIHN0b3AgKi9cbmNvbnN0IHNob3VsZFdhcm4gPSAoY29kZSkgPT4gIXdhcm5lZC5oYXMoY29kZSk7XG5jb25zdCBUWVBFID0gU3ltYm9sKCd0eXBlJyk7XG5jb25zdCBpc1Bvc0ludCA9IChuKSA9PiBuICYmIG4gPT09IE1hdGguZmxvb3IobikgJiYgbiA+IDAgJiYgaXNGaW5pdGUobik7XG4vKiBjOCBpZ25vcmUgc3RhcnQgKi9cbi8vIFRoaXMgaXMgYSBsaXR0bGUgYml0IHJpZGljdWxvdXMsIHRiaC5cbi8vIFRoZSBtYXhpbXVtIGFycmF5IGxlbmd0aCBpcyAyXjMyLTEgb3IgdGhlcmVhYm91dHMgb24gbW9zdCBKUyBpbXBscy5cbi8vIEFuZCB3ZWxsIGJlZm9yZSB0aGF0IHBvaW50LCB5b3UncmUgY2FjaGluZyB0aGUgZW50aXJlIHdvcmxkLCBJIG1lYW4sXG4vLyB0aGF0J3MgfjMyR0Igb2YganVzdCBpbnRlZ2VycyBmb3IgdGhlIG5leHQvcHJldiBsaW5rcywgcGx1cyB3aGF0ZXZlclxuLy8gZWxzZSB0byBob2xkIHRoYXQgbWFueSBrZXlzIGFuZCB2YWx1ZXMuICBKdXN0IGZpbGxpbmcgdGhlIG1lbW9yeSB3aXRoXG4vLyB6ZXJvZXMgYXQgaW5pdCB0aW1lIGlzIGJydXRhbCB3aGVuIHlvdSBnZXQgdGhhdCBiaWcuXG4vLyBCdXQgd2h5IG5vdCBiZSBjb21wbGV0ZT9cbi8vIE1heWJlIGluIHRoZSBmdXR1cmUsIHRoZXNlIGxpbWl0cyB3aWxsIGhhdmUgZXhwYW5kZWQuXG5jb25zdCBnZXRVaW50QXJyYXkgPSAobWF4KSA9PiAhaXNQb3NJbnQobWF4KVxuICAgID8gbnVsbFxuICAgIDogbWF4IDw9IE1hdGgucG93KDIsIDgpXG4gICAgICAgID8gVWludDhBcnJheVxuICAgICAgICA6IG1heCA8PSBNYXRoLnBvdygyLCAxNilcbiAgICAgICAgICAgID8gVWludDE2QXJyYXlcbiAgICAgICAgICAgIDogbWF4IDw9IE1hdGgucG93KDIsIDMyKVxuICAgICAgICAgICAgICAgID8gVWludDMyQXJyYXlcbiAgICAgICAgICAgICAgICA6IG1heCA8PSBOdW1iZXIuTUFYX1NBRkVfSU5URUdFUlxuICAgICAgICAgICAgICAgICAgICA/IFplcm9BcnJheVxuICAgICAgICAgICAgICAgICAgICA6IG51bGw7XG4vKiBjOCBpZ25vcmUgc3RvcCAqL1xuY2xhc3MgWmVyb0FycmF5IGV4dGVuZHMgQXJyYXkge1xuICAgIGNvbnN0cnVjdG9yKHNpemUpIHtcbiAgICAgICAgc3VwZXIoc2l6ZSk7XG4gICAgICAgIHRoaXMuZmlsbCgwKTtcbiAgICB9XG59XG5jbGFzcyBTdGFjayB7XG4gICAgaGVhcDtcbiAgICBsZW5ndGg7XG4gICAgLy8gcHJpdmF0ZSBjb25zdHJ1Y3RvclxuICAgIHN0YXRpYyAjY29uc3RydWN0aW5nID0gZmFsc2U7XG4gICAgc3RhdGljIGNyZWF0ZShtYXgpIHtcbiAgICAgICAgY29uc3QgSGVhcENscyA9IGdldFVpbnRBcnJheShtYXgpO1xuICAgICAgICBpZiAoIUhlYXBDbHMpXG4gICAgICAgICAgICByZXR1cm4gW107XG4gICAgICAgIFN0YWNrLiNjb25zdHJ1Y3RpbmcgPSB0cnVlO1xuICAgICAgICBjb25zdCBzID0gbmV3IFN0YWNrKG1heCwgSGVhcENscyk7XG4gICAgICAgIFN0YWNrLiNjb25zdHJ1Y3RpbmcgPSBmYWxzZTtcbiAgICAgICAgcmV0dXJuIHM7XG4gICAgfVxuICAgIGNvbnN0cnVjdG9yKG1heCwgSGVhcENscykge1xuICAgICAgICAvKiBjOCBpZ25vcmUgc3RhcnQgKi9cbiAgICAgICAgaWYgKCFTdGFjay4jY29uc3RydWN0aW5nKSB7XG4gICAgICAgICAgICB0aHJvdyBuZXcgVHlwZUVycm9yKCdpbnN0YW50aWF0ZSBTdGFjayB1c2luZyBTdGFjay5jcmVhdGUobiknKTtcbiAgICAgICAgfVxuICAgICAgICAvKiBjOCBpZ25vcmUgc3RvcCAqL1xuICAgICAgICB0aGlzLmhlYXAgPSBuZXcgSGVhcENscyhtYXgpO1xuICAgICAgICB0aGlzLmxlbmd0aCA9IDA7XG4gICAgfVxuICAgIHB1c2gobikge1xuICAgICAgICB0aGlzLmhlYXBbdGhpcy5sZW5ndGgrK10gPSBuO1xuICAgIH1cbiAgICBwb3AoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLmhlYXBbLS10aGlzLmxlbmd0aF07XG4gICAgfVxufVxuLyoqXG4gKiBEZWZhdWx0IGV4cG9ydCwgdGhlIHRoaW5nIHlvdSdyZSB1c2luZyB0aGlzIG1vZHVsZSB0byBnZXQuXG4gKlxuICogQWxsIHByb3BlcnRpZXMgZnJvbSB0aGUgb3B0aW9ucyBvYmplY3QgKHdpdGggdGhlIGV4Y2VwdGlvbiBvZlxuICoge0BsaW5rIE9wdGlvbnNCYXNlLm1heH0gYW5kIHtAbGluayBPcHRpb25zQmFzZS5tYXhTaXplfSkgYXJlIGFkZGVkIGFzXG4gKiBub3JtYWwgcHVibGljIG1lbWJlcnMuIChgbWF4YCBhbmQgYG1heEJhc2VgIGFyZSByZWFkLW9ubHkgZ2V0dGVycy4pXG4gKiBDaGFuZ2luZyBhbnkgb2YgdGhlc2Ugd2lsbCBhbHRlciB0aGUgZGVmYXVsdHMgZm9yIHN1YnNlcXVlbnQgbWV0aG9kIGNhbGxzLFxuICogYnV0IGlzIG90aGVyd2lzZSBzYWZlLlxuICovXG5leHBvcnQgY2xhc3MgTFJVQ2FjaGUge1xuICAgIC8vIHByb3BlcnRpZXMgY29taW5nIGluIGZyb20gdGhlIG9wdGlvbnMgb2YgdGhlc2UsIG9ubHkgbWF4IGFuZCBtYXhTaXplXG4gICAgLy8gcmVhbGx5ICpuZWVkKiB0byBiZSBwcm90ZWN0ZWQuIFRoZSByZXN0IGNhbiBiZSBtb2RpZmllZCwgYXMgdGhleSBqdXN0XG4gICAgLy8gc2V0IGRlZmF1bHRzIGZvciB2YXJpb3VzIG1ldGhvZHMuXG4gICAgI21heDtcbiAgICAjbWF4U2l6ZTtcbiAgICAjZGlzcG9zZTtcbiAgICAjZGlzcG9zZUFmdGVyO1xuICAgICNmZXRjaE1ldGhvZDtcbiAgICAvKipcbiAgICAgKiB7QGxpbmsgTFJVQ2FjaGUuT3B0aW9uc0Jhc2UudHRsfVxuICAgICAqL1xuICAgIHR0bDtcbiAgICAvKipcbiAgICAgKiB7QGxpbmsgTFJVQ2FjaGUuT3B0aW9uc0Jhc2UudHRsUmVzb2x1dGlvbn1cbiAgICAgKi9cbiAgICB0dGxSZXNvbHV0aW9uO1xuICAgIC8qKlxuICAgICAqIHtAbGluayBMUlVDYWNoZS5PcHRpb25zQmFzZS50dGxBdXRvcHVyZ2V9XG4gICAgICovXG4gICAgdHRsQXV0b3B1cmdlO1xuICAgIC8qKlxuICAgICAqIHtAbGluayBMUlVDYWNoZS5PcHRpb25zQmFzZS51cGRhdGVBZ2VPbkdldH1cbiAgICAgKi9cbiAgICB1cGRhdGVBZ2VPbkdldDtcbiAgICAvKipcbiAgICAgKiB7QGxpbmsgTFJVQ2FjaGUuT3B0aW9uc0Jhc2UudXBkYXRlQWdlT25IYXN9XG4gICAgICovXG4gICAgdXBkYXRlQWdlT25IYXM7XG4gICAgLyoqXG4gICAgICoge0BsaW5rIExSVUNhY2hlLk9wdGlvbnNCYXNlLmFsbG93U3RhbGV9XG4gICAgICovXG4gICAgYWxsb3dTdGFsZTtcbiAgICAvKipcbiAgICAgKiB7QGxpbmsgTFJVQ2FjaGUuT3B0aW9uc0Jhc2Uubm9EaXNwb3NlT25TZXR9XG4gICAgICovXG4gICAgbm9EaXNwb3NlT25TZXQ7XG4gICAgLyoqXG4gICAgICoge0BsaW5rIExSVUNhY2hlLk9wdGlvbnNCYXNlLm5vVXBkYXRlVFRMfVxuICAgICAqL1xuICAgIG5vVXBkYXRlVFRMO1xuICAgIC8qKlxuICAgICAqIHtAbGluayBMUlVDYWNoZS5PcHRpb25zQmFzZS5tYXhFbnRyeVNpemV9XG4gICAgICovXG4gICAgbWF4RW50cnlTaXplO1xuICAgIC8qKlxuICAgICAqIHtAbGluayBMUlVDYWNoZS5PcHRpb25zQmFzZS5zaXplQ2FsY3VsYXRpb259XG4gICAgICovXG4gICAgc2l6ZUNhbGN1bGF0aW9uO1xuICAgIC8qKlxuICAgICAqIHtAbGluayBMUlVDYWNoZS5PcHRpb25zQmFzZS5ub0RlbGV0ZU9uRmV0Y2hSZWplY3Rpb259XG4gICAgICovXG4gICAgbm9EZWxldGVPbkZldGNoUmVqZWN0aW9uO1xuICAgIC8qKlxuICAgICAqIHtAbGluayBMUlVDYWNoZS5PcHRpb25zQmFzZS5ub0RlbGV0ZU9uU3RhbGVHZXR9XG4gICAgICovXG4gICAgbm9EZWxldGVPblN0YWxlR2V0O1xuICAgIC8qKlxuICAgICAqIHtAbGluayBMUlVDYWNoZS5PcHRpb25zQmFzZS5hbGxvd1N0YWxlT25GZXRjaEFib3J0fVxuICAgICAqL1xuICAgIGFsbG93U3RhbGVPbkZldGNoQWJvcnQ7XG4gICAgLyoqXG4gICAgICoge0BsaW5rIExSVUNhY2hlLk9wdGlvbnNCYXNlLmFsbG93U3RhbGVPbkZldGNoUmVqZWN0aW9ufVxuICAgICAqL1xuICAgIGFsbG93U3RhbGVPbkZldGNoUmVqZWN0aW9uO1xuICAgIC8qKlxuICAgICAqIHtAbGluayBMUlVDYWNoZS5PcHRpb25zQmFzZS5pZ25vcmVGZXRjaEFib3J0fVxuICAgICAqL1xuICAgIGlnbm9yZUZldGNoQWJvcnQ7XG4gICAgLy8gY29tcHV0ZWQgcHJvcGVydGllc1xuICAgICNzaXplO1xuICAgICNjYWxjdWxhdGVkU2l6ZTtcbiAgICAja2V5TWFwO1xuICAgICNrZXlMaXN0O1xuICAgICN2YWxMaXN0O1xuICAgICNuZXh0O1xuICAgICNwcmV2O1xuICAgICNoZWFkO1xuICAgICN0YWlsO1xuICAgICNmcmVlO1xuICAgICNkaXNwb3NlZDtcbiAgICAjc2l6ZXM7XG4gICAgI3N0YXJ0cztcbiAgICAjdHRscztcbiAgICAjaGFzRGlzcG9zZTtcbiAgICAjaGFzRmV0Y2hNZXRob2Q7XG4gICAgI2hhc0Rpc3Bvc2VBZnRlcjtcbiAgICAvKipcbiAgICAgKiBEbyBub3QgY2FsbCB0aGlzIG1ldGhvZCB1bmxlc3MgeW91IG5lZWQgdG8gaW5zcGVjdCB0aGVcbiAgICAgKiBpbm5lciB3b3JraW5ncyBvZiB0aGUgY2FjaGUuICBJZiBhbnl0aGluZyByZXR1cm5lZCBieSB0aGlzXG4gICAgICogb2JqZWN0IGlzIG1vZGlmaWVkIGluIGFueSB3YXksIHN0cmFuZ2UgYnJlYWthZ2UgbWF5IG9jY3VyLlxuICAgICAqXG4gICAgICogVGhlc2UgZmllbGRzIGFyZSBwcml2YXRlIGZvciBhIHJlYXNvbiFcbiAgICAgKlxuICAgICAqIEBpbnRlcm5hbFxuICAgICAqL1xuICAgIHN0YXRpYyB1bnNhZmVFeHBvc2VJbnRlcm5hbHMoYykge1xuICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgLy8gcHJvcGVydGllc1xuICAgICAgICAgICAgc3RhcnRzOiBjLiNzdGFydHMsXG4gICAgICAgICAgICB0dGxzOiBjLiN0dGxzLFxuICAgICAgICAgICAgc2l6ZXM6IGMuI3NpemVzLFxuICAgICAgICAgICAga2V5TWFwOiBjLiNrZXlNYXAsXG4gICAgICAgICAgICBrZXlMaXN0OiBjLiNrZXlMaXN0LFxuICAgICAgICAgICAgdmFsTGlzdDogYy4jdmFsTGlzdCxcbiAgICAgICAgICAgIG5leHQ6IGMuI25leHQsXG4gICAgICAgICAgICBwcmV2OiBjLiNwcmV2LFxuICAgICAgICAgICAgZ2V0IGhlYWQoKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIGMuI2hlYWQ7XG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgZ2V0IHRhaWwoKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIGMuI3RhaWw7XG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgZnJlZTogYy4jZnJlZSxcbiAgICAgICAgICAgIC8vIG1ldGhvZHNcbiAgICAgICAgICAgIGlzQmFja2dyb3VuZEZldGNoOiAocCkgPT4gYy4jaXNCYWNrZ3JvdW5kRmV0Y2gocCksXG4gICAgICAgICAgICBiYWNrZ3JvdW5kRmV0Y2g6IChrLCBpbmRleCwgb3B0aW9ucywgY29udGV4dCkgPT4gYy4jYmFja2dyb3VuZEZldGNoKGssIGluZGV4LCBvcHRpb25zLCBjb250ZXh0KSxcbiAgICAgICAgICAgIG1vdmVUb1RhaWw6IChpbmRleCkgPT4gYy4jbW92ZVRvVGFpbChpbmRleCksXG4gICAgICAgICAgICBpbmRleGVzOiAob3B0aW9ucykgPT4gYy4jaW5kZXhlcyhvcHRpb25zKSxcbiAgICAgICAgICAgIHJpbmRleGVzOiAob3B0aW9ucykgPT4gYy4jcmluZGV4ZXMob3B0aW9ucyksXG4gICAgICAgICAgICBpc1N0YWxlOiAoaW5kZXgpID0+IGMuI2lzU3RhbGUoaW5kZXgpLFxuICAgICAgICB9O1xuICAgIH1cbiAgICAvLyBQcm90ZWN0ZWQgcmVhZC1vbmx5IG1lbWJlcnNcbiAgICAvKipcbiAgICAgKiB7QGxpbmsgTFJVQ2FjaGUuT3B0aW9uc0Jhc2UubWF4fSAocmVhZC1vbmx5KVxuICAgICAqL1xuICAgIGdldCBtYXgoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLiNtYXg7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIHtAbGluayBMUlVDYWNoZS5PcHRpb25zQmFzZS5tYXhTaXplfSAocmVhZC1vbmx5KVxuICAgICAqL1xuICAgIGdldCBtYXhTaXplKCkge1xuICAgICAgICByZXR1cm4gdGhpcy4jbWF4U2l6ZTtcbiAgICB9XG4gICAgLyoqXG4gICAgICogVGhlIHRvdGFsIGNvbXB1dGVkIHNpemUgb2YgaXRlbXMgaW4gdGhlIGNhY2hlIChyZWFkLW9ubHkpXG4gICAgICovXG4gICAgZ2V0IGNhbGN1bGF0ZWRTaXplKCkge1xuICAgICAgICByZXR1cm4gdGhpcy4jY2FsY3VsYXRlZFNpemU7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIFRoZSBudW1iZXIgb2YgaXRlbXMgc3RvcmVkIGluIHRoZSBjYWNoZSAocmVhZC1vbmx5KVxuICAgICAqL1xuICAgIGdldCBzaXplKCkge1xuICAgICAgICByZXR1cm4gdGhpcy4jc2l6ZTtcbiAgICB9XG4gICAgLyoqXG4gICAgICoge0BsaW5rIExSVUNhY2hlLk9wdGlvbnNCYXNlLmZldGNoTWV0aG9kfSAocmVhZC1vbmx5KVxuICAgICAqL1xuICAgIGdldCBmZXRjaE1ldGhvZCgpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuI2ZldGNoTWV0aG9kO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiB7QGxpbmsgTFJVQ2FjaGUuT3B0aW9uc0Jhc2UuZGlzcG9zZX0gKHJlYWQtb25seSlcbiAgICAgKi9cbiAgICBnZXQgZGlzcG9zZSgpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuI2Rpc3Bvc2U7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIHtAbGluayBMUlVDYWNoZS5PcHRpb25zQmFzZS5kaXNwb3NlQWZ0ZXJ9IChyZWFkLW9ubHkpXG4gICAgICovXG4gICAgZ2V0IGRpc3Bvc2VBZnRlcigpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuI2Rpc3Bvc2VBZnRlcjtcbiAgICB9XG4gICAgY29uc3RydWN0b3Iob3B0aW9ucykge1xuICAgICAgICBjb25zdCB7IG1heCA9IDAsIHR0bCwgdHRsUmVzb2x1dGlvbiA9IDEsIHR0bEF1dG9wdXJnZSwgdXBkYXRlQWdlT25HZXQsIHVwZGF0ZUFnZU9uSGFzLCBhbGxvd1N0YWxlLCBkaXNwb3NlLCBkaXNwb3NlQWZ0ZXIsIG5vRGlzcG9zZU9uU2V0LCBub1VwZGF0ZVRUTCwgbWF4U2l6ZSA9IDAsIG1heEVudHJ5U2l6ZSA9IDAsIHNpemVDYWxjdWxhdGlvbiwgZmV0Y2hNZXRob2QsIG5vRGVsZXRlT25GZXRjaFJlamVjdGlvbiwgbm9EZWxldGVPblN0YWxlR2V0LCBhbGxvd1N0YWxlT25GZXRjaFJlamVjdGlvbiwgYWxsb3dTdGFsZU9uRmV0Y2hBYm9ydCwgaWdub3JlRmV0Y2hBYm9ydCwgfSA9IG9wdGlvbnM7XG4gICAgICAgIGlmIChtYXggIT09IDAgJiYgIWlzUG9zSW50KG1heCkpIHtcbiAgICAgICAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IoJ21heCBvcHRpb24gbXVzdCBiZSBhIG5vbm5lZ2F0aXZlIGludGVnZXInKTtcbiAgICAgICAgfVxuICAgICAgICBjb25zdCBVaW50QXJyYXkgPSBtYXggPyBnZXRVaW50QXJyYXkobWF4KSA6IEFycmF5O1xuICAgICAgICBpZiAoIVVpbnRBcnJheSkge1xuICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdpbnZhbGlkIG1heCB2YWx1ZTogJyArIG1heCk7XG4gICAgICAgIH1cbiAgICAgICAgdGhpcy4jbWF4ID0gbWF4O1xuICAgICAgICB0aGlzLiNtYXhTaXplID0gbWF4U2l6ZTtcbiAgICAgICAgdGhpcy5tYXhFbnRyeVNpemUgPSBtYXhFbnRyeVNpemUgfHwgdGhpcy4jbWF4U2l6ZTtcbiAgICAgICAgdGhpcy5zaXplQ2FsY3VsYXRpb24gPSBzaXplQ2FsY3VsYXRpb247XG4gICAgICAgIGlmICh0aGlzLnNpemVDYWxjdWxhdGlvbikge1xuICAgICAgICAgICAgaWYgKCF0aGlzLiNtYXhTaXplICYmICF0aGlzLm1heEVudHJ5U2l6ZSkge1xuICAgICAgICAgICAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IoJ2Nhbm5vdCBzZXQgc2l6ZUNhbGN1bGF0aW9uIHdpdGhvdXQgc2V0dGluZyBtYXhTaXplIG9yIG1heEVudHJ5U2l6ZScpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKHR5cGVvZiB0aGlzLnNpemVDYWxjdWxhdGlvbiAhPT0gJ2Z1bmN0aW9uJykge1xuICAgICAgICAgICAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IoJ3NpemVDYWxjdWxhdGlvbiBzZXQgdG8gbm9uLWZ1bmN0aW9uJyk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgaWYgKGZldGNoTWV0aG9kICE9PSB1bmRlZmluZWQgJiZcbiAgICAgICAgICAgIHR5cGVvZiBmZXRjaE1ldGhvZCAhPT0gJ2Z1bmN0aW9uJykge1xuICAgICAgICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcignZmV0Y2hNZXRob2QgbXVzdCBiZSBhIGZ1bmN0aW9uIGlmIHNwZWNpZmllZCcpO1xuICAgICAgICB9XG4gICAgICAgIHRoaXMuI2ZldGNoTWV0aG9kID0gZmV0Y2hNZXRob2Q7XG4gICAgICAgIHRoaXMuI2hhc0ZldGNoTWV0aG9kID0gISFmZXRjaE1ldGhvZDtcbiAgICAgICAgdGhpcy4ja2V5TWFwID0gbmV3IE1hcCgpO1xuICAgICAgICB0aGlzLiNrZXlMaXN0ID0gbmV3IEFycmF5KG1heCkuZmlsbCh1bmRlZmluZWQpO1xuICAgICAgICB0aGlzLiN2YWxMaXN0ID0gbmV3IEFycmF5KG1heCkuZmlsbCh1bmRlZmluZWQpO1xuICAgICAgICB0aGlzLiNuZXh0ID0gbmV3IFVpbnRBcnJheShtYXgpO1xuICAgICAgICB0aGlzLiNwcmV2ID0gbmV3IFVpbnRBcnJheShtYXgpO1xuICAgICAgICB0aGlzLiNoZWFkID0gMDtcbiAgICAgICAgdGhpcy4jdGFpbCA9IDA7XG4gICAgICAgIHRoaXMuI2ZyZWUgPSBTdGFjay5jcmVhdGUobWF4KTtcbiAgICAgICAgdGhpcy4jc2l6ZSA9IDA7XG4gICAgICAgIHRoaXMuI2NhbGN1bGF0ZWRTaXplID0gMDtcbiAgICAgICAgaWYgKHR5cGVvZiBkaXNwb3NlID09PSAnZnVuY3Rpb24nKSB7XG4gICAgICAgICAgICB0aGlzLiNkaXNwb3NlID0gZGlzcG9zZTtcbiAgICAgICAgfVxuICAgICAgICBpZiAodHlwZW9mIGRpc3Bvc2VBZnRlciA9PT0gJ2Z1bmN0aW9uJykge1xuICAgICAgICAgICAgdGhpcy4jZGlzcG9zZUFmdGVyID0gZGlzcG9zZUFmdGVyO1xuICAgICAgICAgICAgdGhpcy4jZGlzcG9zZWQgPSBbXTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIHRoaXMuI2Rpc3Bvc2VBZnRlciA9IHVuZGVmaW5lZDtcbiAgICAgICAgICAgIHRoaXMuI2Rpc3Bvc2VkID0gdW5kZWZpbmVkO1xuICAgICAgICB9XG4gICAgICAgIHRoaXMuI2hhc0Rpc3Bvc2UgPSAhIXRoaXMuI2Rpc3Bvc2U7XG4gICAgICAgIHRoaXMuI2hhc0Rpc3Bvc2VBZnRlciA9ICEhdGhpcy4jZGlzcG9zZUFmdGVyO1xuICAgICAgICB0aGlzLm5vRGlzcG9zZU9uU2V0ID0gISFub0Rpc3Bvc2VPblNldDtcbiAgICAgICAgdGhpcy5ub1VwZGF0ZVRUTCA9ICEhbm9VcGRhdGVUVEw7XG4gICAgICAgIHRoaXMubm9EZWxldGVPbkZldGNoUmVqZWN0aW9uID0gISFub0RlbGV0ZU9uRmV0Y2hSZWplY3Rpb247XG4gICAgICAgIHRoaXMuYWxsb3dTdGFsZU9uRmV0Y2hSZWplY3Rpb24gPSAhIWFsbG93U3RhbGVPbkZldGNoUmVqZWN0aW9uO1xuICAgICAgICB0aGlzLmFsbG93U3RhbGVPbkZldGNoQWJvcnQgPSAhIWFsbG93U3RhbGVPbkZldGNoQWJvcnQ7XG4gICAgICAgIHRoaXMuaWdub3JlRmV0Y2hBYm9ydCA9ICEhaWdub3JlRmV0Y2hBYm9ydDtcbiAgICAgICAgLy8gTkI6IG1heEVudHJ5U2l6ZSBpcyBzZXQgdG8gbWF4U2l6ZSBpZiBpdCdzIHNldFxuICAgICAgICBpZiAodGhpcy5tYXhFbnRyeVNpemUgIT09IDApIHtcbiAgICAgICAgICAgIGlmICh0aGlzLiNtYXhTaXplICE9PSAwKSB7XG4gICAgICAgICAgICAgICAgaWYgKCFpc1Bvc0ludCh0aGlzLiNtYXhTaXplKSkge1xuICAgICAgICAgICAgICAgICAgICB0aHJvdyBuZXcgVHlwZUVycm9yKCdtYXhTaXplIG11c3QgYmUgYSBwb3NpdGl2ZSBpbnRlZ2VyIGlmIHNwZWNpZmllZCcpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmICghaXNQb3NJbnQodGhpcy5tYXhFbnRyeVNpemUpKSB7XG4gICAgICAgICAgICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcignbWF4RW50cnlTaXplIG11c3QgYmUgYSBwb3NpdGl2ZSBpbnRlZ2VyIGlmIHNwZWNpZmllZCcpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgdGhpcy4jaW5pdGlhbGl6ZVNpemVUcmFja2luZygpO1xuICAgICAgICB9XG4gICAgICAgIHRoaXMuYWxsb3dTdGFsZSA9ICEhYWxsb3dTdGFsZTtcbiAgICAgICAgdGhpcy5ub0RlbGV0ZU9uU3RhbGVHZXQgPSAhIW5vRGVsZXRlT25TdGFsZUdldDtcbiAgICAgICAgdGhpcy51cGRhdGVBZ2VPbkdldCA9ICEhdXBkYXRlQWdlT25HZXQ7XG4gICAgICAgIHRoaXMudXBkYXRlQWdlT25IYXMgPSAhIXVwZGF0ZUFnZU9uSGFzO1xuICAgICAgICB0aGlzLnR0bFJlc29sdXRpb24gPVxuICAgICAgICAgICAgaXNQb3NJbnQodHRsUmVzb2x1dGlvbikgfHwgdHRsUmVzb2x1dGlvbiA9PT0gMFxuICAgICAgICAgICAgICAgID8gdHRsUmVzb2x1dGlvblxuICAgICAgICAgICAgICAgIDogMTtcbiAgICAgICAgdGhpcy50dGxBdXRvcHVyZ2UgPSAhIXR0bEF1dG9wdXJnZTtcbiAgICAgICAgdGhpcy50dGwgPSB0dGwgfHwgMDtcbiAgICAgICAgaWYgKHRoaXMudHRsKSB7XG4gICAgICAgICAgICBpZiAoIWlzUG9zSW50KHRoaXMudHRsKSkge1xuICAgICAgICAgICAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IoJ3R0bCBtdXN0IGJlIGEgcG9zaXRpdmUgaW50ZWdlciBpZiBzcGVjaWZpZWQnKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHRoaXMuI2luaXRpYWxpemVUVExUcmFja2luZygpO1xuICAgICAgICB9XG4gICAgICAgIC8vIGRvIG5vdCBhbGxvdyBjb21wbGV0ZWx5IHVuYm91bmRlZCBjYWNoZXNcbiAgICAgICAgaWYgKHRoaXMuI21heCA9PT0gMCAmJiB0aGlzLnR0bCA9PT0gMCAmJiB0aGlzLiNtYXhTaXplID09PSAwKSB7XG4gICAgICAgICAgICB0aHJvdyBuZXcgVHlwZUVycm9yKCdBdCBsZWFzdCBvbmUgb2YgbWF4LCBtYXhTaXplLCBvciB0dGwgaXMgcmVxdWlyZWQnKTtcbiAgICAgICAgfVxuICAgICAgICBpZiAoIXRoaXMudHRsQXV0b3B1cmdlICYmICF0aGlzLiNtYXggJiYgIXRoaXMuI21heFNpemUpIHtcbiAgICAgICAgICAgIGNvbnN0IGNvZGUgPSAnTFJVX0NBQ0hFX1VOQk9VTkRFRCc7XG4gICAgICAgICAgICBpZiAoc2hvdWxkV2Fybihjb2RlKSkge1xuICAgICAgICAgICAgICAgIHdhcm5lZC5hZGQoY29kZSk7XG4gICAgICAgICAgICAgICAgY29uc3QgbXNnID0gJ1RUTCBjYWNoaW5nIHdpdGhvdXQgdHRsQXV0b3B1cmdlLCBtYXgsIG9yIG1heFNpemUgY2FuICcgK1xuICAgICAgICAgICAgICAgICAgICAncmVzdWx0IGluIHVuYm91bmRlZCBtZW1vcnkgY29uc3VtcHRpb24uJztcbiAgICAgICAgICAgICAgICBlbWl0V2FybmluZyhtc2csICdVbmJvdW5kZWRDYWNoZVdhcm5pbmcnLCBjb2RlLCBMUlVDYWNoZSk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9XG4gICAgLyoqXG4gICAgICogUmV0dXJuIHRoZSByZW1haW5pbmcgVFRMIHRpbWUgZm9yIGEgZ2l2ZW4gZW50cnkga2V5XG4gICAgICovXG4gICAgZ2V0UmVtYWluaW5nVFRMKGtleSkge1xuICAgICAgICByZXR1cm4gdGhpcy4ja2V5TWFwLmhhcyhrZXkpID8gSW5maW5pdHkgOiAwO1xuICAgIH1cbiAgICAjaW5pdGlhbGl6ZVRUTFRyYWNraW5nKCkge1xuICAgICAgICBjb25zdCB0dGxzID0gbmV3IFplcm9BcnJheSh0aGlzLiNtYXgpO1xuICAgICAgICBjb25zdCBzdGFydHMgPSBuZXcgWmVyb0FycmF5KHRoaXMuI21heCk7XG4gICAgICAgIHRoaXMuI3R0bHMgPSB0dGxzO1xuICAgICAgICB0aGlzLiNzdGFydHMgPSBzdGFydHM7XG4gICAgICAgIHRoaXMuI3NldEl0ZW1UVEwgPSAoaW5kZXgsIHR0bCwgc3RhcnQgPSBwZXJmLm5vdygpKSA9PiB7XG4gICAgICAgICAgICBzdGFydHNbaW5kZXhdID0gdHRsICE9PSAwID8gc3RhcnQgOiAwO1xuICAgICAgICAgICAgdHRsc1tpbmRleF0gPSB0dGw7XG4gICAgICAgICAgICBpZiAodHRsICE9PSAwICYmIHRoaXMudHRsQXV0b3B1cmdlKSB7XG4gICAgICAgICAgICAgICAgY29uc3QgdCA9IHNldFRpbWVvdXQoKCkgPT4ge1xuICAgICAgICAgICAgICAgICAgICBpZiAodGhpcy4jaXNTdGFsZShpbmRleCkpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuZGVsZXRlKHRoaXMuI2tleUxpc3RbaW5kZXhdKTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH0sIHR0bCArIDEpO1xuICAgICAgICAgICAgICAgIC8vIHVucmVmKCkgbm90IHN1cHBvcnRlZCBvbiBhbGwgcGxhdGZvcm1zXG4gICAgICAgICAgICAgICAgLyogYzggaWdub3JlIHN0YXJ0ICovXG4gICAgICAgICAgICAgICAgaWYgKHQudW5yZWYpIHtcbiAgICAgICAgICAgICAgICAgICAgdC51bnJlZigpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAvKiBjOCBpZ25vcmUgc3RvcCAqL1xuICAgICAgICAgICAgfVxuICAgICAgICB9O1xuICAgICAgICB0aGlzLiN1cGRhdGVJdGVtQWdlID0gaW5kZXggPT4ge1xuICAgICAgICAgICAgc3RhcnRzW2luZGV4XSA9IHR0bHNbaW5kZXhdICE9PSAwID8gcGVyZi5ub3coKSA6IDA7XG4gICAgICAgIH07XG4gICAgICAgIHRoaXMuI3N0YXR1c1RUTCA9IChzdGF0dXMsIGluZGV4KSA9PiB7XG4gICAgICAgICAgICBpZiAodHRsc1tpbmRleF0pIHtcbiAgICAgICAgICAgICAgICBjb25zdCB0dGwgPSB0dGxzW2luZGV4XTtcbiAgICAgICAgICAgICAgICBjb25zdCBzdGFydCA9IHN0YXJ0c1tpbmRleF07XG4gICAgICAgICAgICAgICAgLyogYzggaWdub3JlIG5leHQgKi9cbiAgICAgICAgICAgICAgICBpZiAoIXR0bCB8fCAhc3RhcnQpXG4gICAgICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgICAgICBzdGF0dXMudHRsID0gdHRsO1xuICAgICAgICAgICAgICAgIHN0YXR1cy5zdGFydCA9IHN0YXJ0O1xuICAgICAgICAgICAgICAgIHN0YXR1cy5ub3cgPSBjYWNoZWROb3cgfHwgZ2V0Tm93KCk7XG4gICAgICAgICAgICAgICAgY29uc3QgYWdlID0gc3RhdHVzLm5vdyAtIHN0YXJ0O1xuICAgICAgICAgICAgICAgIHN0YXR1cy5yZW1haW5pbmdUVEwgPSB0dGwgLSBhZ2U7XG4gICAgICAgICAgICB9XG4gICAgICAgIH07XG4gICAgICAgIC8vIGRlYm91bmNlIGNhbGxzIHRvIHBlcmYubm93KCkgdG8gMXMgc28gd2UncmUgbm90IGhpdHRpbmdcbiAgICAgICAgLy8gdGhhdCBjb3N0bHkgY2FsbCByZXBlYXRlZGx5LlxuICAgICAgICBsZXQgY2FjaGVkTm93ID0gMDtcbiAgICAgICAgY29uc3QgZ2V0Tm93ID0gKCkgPT4ge1xuICAgICAgICAgICAgY29uc3QgbiA9IHBlcmYubm93KCk7XG4gICAgICAgICAgICBpZiAodGhpcy50dGxSZXNvbHV0aW9uID4gMCkge1xuICAgICAgICAgICAgICAgIGNhY2hlZE5vdyA9IG47XG4gICAgICAgICAgICAgICAgY29uc3QgdCA9IHNldFRpbWVvdXQoKCkgPT4gKGNhY2hlZE5vdyA9IDApLCB0aGlzLnR0bFJlc29sdXRpb24pO1xuICAgICAgICAgICAgICAgIC8vIG5vdCBhdmFpbGFibGUgb24gYWxsIHBsYXRmb3Jtc1xuICAgICAgICAgICAgICAgIC8qIGM4IGlnbm9yZSBzdGFydCAqL1xuICAgICAgICAgICAgICAgIGlmICh0LnVucmVmKSB7XG4gICAgICAgICAgICAgICAgICAgIHQudW5yZWYoKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgLyogYzggaWdub3JlIHN0b3AgKi9cbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHJldHVybiBuO1xuICAgICAgICB9O1xuICAgICAgICB0aGlzLmdldFJlbWFpbmluZ1RUTCA9IGtleSA9PiB7XG4gICAgICAgICAgICBjb25zdCBpbmRleCA9IHRoaXMuI2tleU1hcC5nZXQoa2V5KTtcbiAgICAgICAgICAgIGlmIChpbmRleCA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIDA7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBjb25zdCB0dGwgPSB0dGxzW2luZGV4XTtcbiAgICAgICAgICAgIGNvbnN0IHN0YXJ0ID0gc3RhcnRzW2luZGV4XTtcbiAgICAgICAgICAgIGlmICghdHRsIHx8ICFzdGFydCkge1xuICAgICAgICAgICAgICAgIHJldHVybiBJbmZpbml0eTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGNvbnN0IGFnZSA9IChjYWNoZWROb3cgfHwgZ2V0Tm93KCkpIC0gc3RhcnQ7XG4gICAgICAgICAgICByZXR1cm4gdHRsIC0gYWdlO1xuICAgICAgICB9O1xuICAgICAgICB0aGlzLiNpc1N0YWxlID0gaW5kZXggPT4ge1xuICAgICAgICAgICAgY29uc3QgcyA9IHN0YXJ0c1tpbmRleF07XG4gICAgICAgICAgICBjb25zdCB0ID0gdHRsc1tpbmRleF07XG4gICAgICAgICAgICByZXR1cm4gISF0ICYmICEhcyAmJiAoY2FjaGVkTm93IHx8IGdldE5vdygpKSAtIHMgPiB0O1xuICAgICAgICB9O1xuICAgIH1cbiAgICAvLyBjb25kaXRpb25hbGx5IHNldCBwcml2YXRlIG1ldGhvZHMgcmVsYXRlZCB0byBUVExcbiAgICAjdXBkYXRlSXRlbUFnZSA9ICgpID0+IHsgfTtcbiAgICAjc3RhdHVzVFRMID0gKCkgPT4geyB9O1xuICAgICNzZXRJdGVtVFRMID0gKCkgPT4geyB9O1xuICAgIC8qIGM4IGlnbm9yZSBzdG9wICovXG4gICAgI2lzU3RhbGUgPSAoKSA9PiBmYWxzZTtcbiAgICAjaW5pdGlhbGl6ZVNpemVUcmFja2luZygpIHtcbiAgICAgICAgY29uc3Qgc2l6ZXMgPSBuZXcgWmVyb0FycmF5KHRoaXMuI21heCk7XG4gICAgICAgIHRoaXMuI2NhbGN1bGF0ZWRTaXplID0gMDtcbiAgICAgICAgdGhpcy4jc2l6ZXMgPSBzaXplcztcbiAgICAgICAgdGhpcy4jcmVtb3ZlSXRlbVNpemUgPSBpbmRleCA9PiB7XG4gICAgICAgICAgICB0aGlzLiNjYWxjdWxhdGVkU2l6ZSAtPSBzaXplc1tpbmRleF07XG4gICAgICAgICAgICBzaXplc1tpbmRleF0gPSAwO1xuICAgICAgICB9O1xuICAgICAgICB0aGlzLiNyZXF1aXJlU2l6ZSA9IChrLCB2LCBzaXplLCBzaXplQ2FsY3VsYXRpb24pID0+IHtcbiAgICAgICAgICAgIC8vIHByb3Zpc2lvbmFsbHkgYWNjZXB0IGJhY2tncm91bmQgZmV0Y2hlcy5cbiAgICAgICAgICAgIC8vIGFjdHVhbCB2YWx1ZSBzaXplIHdpbGwgYmUgY2hlY2tlZCB3aGVuIHRoZXkgcmV0dXJuLlxuICAgICAgICAgICAgaWYgKHRoaXMuI2lzQmFja2dyb3VuZEZldGNoKHYpKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIDA7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAoIWlzUG9zSW50KHNpemUpKSB7XG4gICAgICAgICAgICAgICAgaWYgKHNpemVDYWxjdWxhdGlvbikge1xuICAgICAgICAgICAgICAgICAgICBpZiAodHlwZW9mIHNpemVDYWxjdWxhdGlvbiAhPT0gJ2Z1bmN0aW9uJykge1xuICAgICAgICAgICAgICAgICAgICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcignc2l6ZUNhbGN1bGF0aW9uIG11c3QgYmUgYSBmdW5jdGlvbicpO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIHNpemUgPSBzaXplQ2FsY3VsYXRpb24odiwgayk7XG4gICAgICAgICAgICAgICAgICAgIGlmICghaXNQb3NJbnQoc2l6ZSkpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IoJ3NpemVDYWxjdWxhdGlvbiByZXR1cm4gaW52YWxpZCAoZXhwZWN0IHBvc2l0aXZlIGludGVnZXIpJyk7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IoJ2ludmFsaWQgc2l6ZSB2YWx1ZSAobXVzdCBiZSBwb3NpdGl2ZSBpbnRlZ2VyKS4gJyArXG4gICAgICAgICAgICAgICAgICAgICAgICAnV2hlbiBtYXhTaXplIG9yIG1heEVudHJ5U2l6ZSBpcyB1c2VkLCBzaXplQ2FsY3VsYXRpb24gJyArXG4gICAgICAgICAgICAgICAgICAgICAgICAnb3Igc2l6ZSBtdXN0IGJlIHNldC4nKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICByZXR1cm4gc2l6ZTtcbiAgICAgICAgfTtcbiAgICAgICAgdGhpcy4jYWRkSXRlbVNpemUgPSAoaW5kZXgsIHNpemUsIHN0YXR1cykgPT4ge1xuICAgICAgICAgICAgc2l6ZXNbaW5kZXhdID0gc2l6ZTtcbiAgICAgICAgICAgIGlmICh0aGlzLiNtYXhTaXplKSB7XG4gICAgICAgICAgICAgICAgY29uc3QgbWF4U2l6ZSA9IHRoaXMuI21heFNpemUgLSBzaXplc1tpbmRleF07XG4gICAgICAgICAgICAgICAgd2hpbGUgKHRoaXMuI2NhbGN1bGF0ZWRTaXplID4gbWF4U2l6ZSkge1xuICAgICAgICAgICAgICAgICAgICB0aGlzLiNldmljdCh0cnVlKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICB0aGlzLiNjYWxjdWxhdGVkU2l6ZSArPSBzaXplc1tpbmRleF07XG4gICAgICAgICAgICBpZiAoc3RhdHVzKSB7XG4gICAgICAgICAgICAgICAgc3RhdHVzLmVudHJ5U2l6ZSA9IHNpemU7XG4gICAgICAgICAgICAgICAgc3RhdHVzLnRvdGFsQ2FsY3VsYXRlZFNpemUgPSB0aGlzLiNjYWxjdWxhdGVkU2l6ZTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfTtcbiAgICB9XG4gICAgI3JlbW92ZUl0ZW1TaXplID0gX2kgPT4geyB9O1xuICAgICNhZGRJdGVtU2l6ZSA9IChfaSwgX3MsIF9zdCkgPT4geyB9O1xuICAgICNyZXF1aXJlU2l6ZSA9IChfaywgX3YsIHNpemUsIHNpemVDYWxjdWxhdGlvbikgPT4ge1xuICAgICAgICBpZiAoc2l6ZSB8fCBzaXplQ2FsY3VsYXRpb24pIHtcbiAgICAgICAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IoJ2Nhbm5vdCBzZXQgc2l6ZSB3aXRob3V0IHNldHRpbmcgbWF4U2l6ZSBvciBtYXhFbnRyeVNpemUgb24gY2FjaGUnKTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gMDtcbiAgICB9O1xuICAgICojaW5kZXhlcyh7IGFsbG93U3RhbGUgPSB0aGlzLmFsbG93U3RhbGUgfSA9IHt9KSB7XG4gICAgICAgIGlmICh0aGlzLiNzaXplKSB7XG4gICAgICAgICAgICBmb3IgKGxldCBpID0gdGhpcy4jdGFpbDsgdHJ1ZTspIHtcbiAgICAgICAgICAgICAgICBpZiAoIXRoaXMuI2lzVmFsaWRJbmRleChpKSkge1xuICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgaWYgKGFsbG93U3RhbGUgfHwgIXRoaXMuI2lzU3RhbGUoaSkpIHtcbiAgICAgICAgICAgICAgICAgICAgeWllbGQgaTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgaWYgKGkgPT09IHRoaXMuI2hlYWQpIHtcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICBpID0gdGhpcy4jcHJldltpXTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9XG4gICAgKiNyaW5kZXhlcyh7IGFsbG93U3RhbGUgPSB0aGlzLmFsbG93U3RhbGUgfSA9IHt9KSB7XG4gICAgICAgIGlmICh0aGlzLiNzaXplKSB7XG4gICAgICAgICAgICBmb3IgKGxldCBpID0gdGhpcy4jaGVhZDsgdHJ1ZTspIHtcbiAgICAgICAgICAgICAgICBpZiAoIXRoaXMuI2lzVmFsaWRJbmRleChpKSkge1xuICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgaWYgKGFsbG93U3RhbGUgfHwgIXRoaXMuI2lzU3RhbGUoaSkpIHtcbiAgICAgICAgICAgICAgICAgICAgeWllbGQgaTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgaWYgKGkgPT09IHRoaXMuI3RhaWwpIHtcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICBpID0gdGhpcy4jbmV4dFtpXTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9XG4gICAgI2lzVmFsaWRJbmRleChpbmRleCkge1xuICAgICAgICByZXR1cm4gKGluZGV4ICE9PSB1bmRlZmluZWQgJiZcbiAgICAgICAgICAgIHRoaXMuI2tleU1hcC5nZXQodGhpcy4ja2V5TGlzdFtpbmRleF0pID09PSBpbmRleCk7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIFJldHVybiBhIGdlbmVyYXRvciB5aWVsZGluZyBgW2tleSwgdmFsdWVdYCBwYWlycyxcbiAgICAgKiBpbiBvcmRlciBmcm9tIG1vc3QgcmVjZW50bHkgdXNlZCB0byBsZWFzdCByZWNlbnRseSB1c2VkLlxuICAgICAqL1xuICAgICplbnRyaWVzKCkge1xuICAgICAgICBmb3IgKGNvbnN0IGkgb2YgdGhpcy4jaW5kZXhlcygpKSB7XG4gICAgICAgICAgICBpZiAodGhpcy4jdmFsTGlzdFtpXSAhPT0gdW5kZWZpbmVkICYmXG4gICAgICAgICAgICAgICAgdGhpcy4ja2V5TGlzdFtpXSAhPT0gdW5kZWZpbmVkICYmXG4gICAgICAgICAgICAgICAgIXRoaXMuI2lzQmFja2dyb3VuZEZldGNoKHRoaXMuI3ZhbExpc3RbaV0pKSB7XG4gICAgICAgICAgICAgICAgeWllbGQgW3RoaXMuI2tleUxpc3RbaV0sIHRoaXMuI3ZhbExpc3RbaV1dO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfVxuICAgIC8qKlxuICAgICAqIEludmVyc2Ugb3JkZXIgdmVyc2lvbiBvZiB7QGxpbmsgTFJVQ2FjaGUuZW50cmllc31cbiAgICAgKlxuICAgICAqIFJldHVybiBhIGdlbmVyYXRvciB5aWVsZGluZyBgW2tleSwgdmFsdWVdYCBwYWlycyxcbiAgICAgKiBpbiBvcmRlciBmcm9tIGxlYXN0IHJlY2VudGx5IHVzZWQgdG8gbW9zdCByZWNlbnRseSB1c2VkLlxuICAgICAqL1xuICAgICpyZW50cmllcygpIHtcbiAgICAgICAgZm9yIChjb25zdCBpIG9mIHRoaXMuI3JpbmRleGVzKCkpIHtcbiAgICAgICAgICAgIGlmICh0aGlzLiN2YWxMaXN0W2ldICE9PSB1bmRlZmluZWQgJiZcbiAgICAgICAgICAgICAgICB0aGlzLiNrZXlMaXN0W2ldICE9PSB1bmRlZmluZWQgJiZcbiAgICAgICAgICAgICAgICAhdGhpcy4jaXNCYWNrZ3JvdW5kRmV0Y2godGhpcy4jdmFsTGlzdFtpXSkpIHtcbiAgICAgICAgICAgICAgICB5aWVsZCBbdGhpcy4ja2V5TGlzdFtpXSwgdGhpcy4jdmFsTGlzdFtpXV07XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9XG4gICAgLyoqXG4gICAgICogUmV0dXJuIGEgZ2VuZXJhdG9yIHlpZWxkaW5nIHRoZSBrZXlzIGluIHRoZSBjYWNoZSxcbiAgICAgKiBpbiBvcmRlciBmcm9tIG1vc3QgcmVjZW50bHkgdXNlZCB0byBsZWFzdCByZWNlbnRseSB1c2VkLlxuICAgICAqL1xuICAgICprZXlzKCkge1xuICAgICAgICBmb3IgKGNvbnN0IGkgb2YgdGhpcy4jaW5kZXhlcygpKSB7XG4gICAgICAgICAgICBjb25zdCBrID0gdGhpcy4ja2V5TGlzdFtpXTtcbiAgICAgICAgICAgIGlmIChrICE9PSB1bmRlZmluZWQgJiZcbiAgICAgICAgICAgICAgICAhdGhpcy4jaXNCYWNrZ3JvdW5kRmV0Y2godGhpcy4jdmFsTGlzdFtpXSkpIHtcbiAgICAgICAgICAgICAgICB5aWVsZCBrO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfVxuICAgIC8qKlxuICAgICAqIEludmVyc2Ugb3JkZXIgdmVyc2lvbiBvZiB7QGxpbmsgTFJVQ2FjaGUua2V5c31cbiAgICAgKlxuICAgICAqIFJldHVybiBhIGdlbmVyYXRvciB5aWVsZGluZyB0aGUga2V5cyBpbiB0aGUgY2FjaGUsXG4gICAgICogaW4gb3JkZXIgZnJvbSBsZWFzdCByZWNlbnRseSB1c2VkIHRvIG1vc3QgcmVjZW50bHkgdXNlZC5cbiAgICAgKi9cbiAgICAqcmtleXMoKSB7XG4gICAgICAgIGZvciAoY29uc3QgaSBvZiB0aGlzLiNyaW5kZXhlcygpKSB7XG4gICAgICAgICAgICBjb25zdCBrID0gdGhpcy4ja2V5TGlzdFtpXTtcbiAgICAgICAgICAgIGlmIChrICE9PSB1bmRlZmluZWQgJiZcbiAgICAgICAgICAgICAgICAhdGhpcy4jaXNCYWNrZ3JvdW5kRmV0Y2godGhpcy4jdmFsTGlzdFtpXSkpIHtcbiAgICAgICAgICAgICAgICB5aWVsZCBrO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfVxuICAgIC8qKlxuICAgICAqIFJldHVybiBhIGdlbmVyYXRvciB5aWVsZGluZyB0aGUgdmFsdWVzIGluIHRoZSBjYWNoZSxcbiAgICAgKiBpbiBvcmRlciBmcm9tIG1vc3QgcmVjZW50bHkgdXNlZCB0byBsZWFzdCByZWNlbnRseSB1c2VkLlxuICAgICAqL1xuICAgICp2YWx1ZXMoKSB7XG4gICAgICAgIGZvciAoY29uc3QgaSBvZiB0aGlzLiNpbmRleGVzKCkpIHtcbiAgICAgICAgICAgIGNvbnN0IHYgPSB0aGlzLiN2YWxMaXN0W2ldO1xuICAgICAgICAgICAgaWYgKHYgIT09IHVuZGVmaW5lZCAmJlxuICAgICAgICAgICAgICAgICF0aGlzLiNpc0JhY2tncm91bmRGZXRjaCh0aGlzLiN2YWxMaXN0W2ldKSkge1xuICAgICAgICAgICAgICAgIHlpZWxkIHRoaXMuI3ZhbExpc3RbaV07XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9XG4gICAgLyoqXG4gICAgICogSW52ZXJzZSBvcmRlciB2ZXJzaW9uIG9mIHtAbGluayBMUlVDYWNoZS52YWx1ZXN9XG4gICAgICpcbiAgICAgKiBSZXR1cm4gYSBnZW5lcmF0b3IgeWllbGRpbmcgdGhlIHZhbHVlcyBpbiB0aGUgY2FjaGUsXG4gICAgICogaW4gb3JkZXIgZnJvbSBsZWFzdCByZWNlbnRseSB1c2VkIHRvIG1vc3QgcmVjZW50bHkgdXNlZC5cbiAgICAgKi9cbiAgICAqcnZhbHVlcygpIHtcbiAgICAgICAgZm9yIChjb25zdCBpIG9mIHRoaXMuI3JpbmRleGVzKCkpIHtcbiAgICAgICAgICAgIGNvbnN0IHYgPSB0aGlzLiN2YWxMaXN0W2ldO1xuICAgICAgICAgICAgaWYgKHYgIT09IHVuZGVmaW5lZCAmJlxuICAgICAgICAgICAgICAgICF0aGlzLiNpc0JhY2tncm91bmRGZXRjaCh0aGlzLiN2YWxMaXN0W2ldKSkge1xuICAgICAgICAgICAgICAgIHlpZWxkIHRoaXMuI3ZhbExpc3RbaV07XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9XG4gICAgLyoqXG4gICAgICogSXRlcmF0aW5nIG92ZXIgdGhlIGNhY2hlIGl0c2VsZiB5aWVsZHMgdGhlIHNhbWUgcmVzdWx0cyBhc1xuICAgICAqIHtAbGluayBMUlVDYWNoZS5lbnRyaWVzfVxuICAgICAqL1xuICAgIFtTeW1ib2wuaXRlcmF0b3JdKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5lbnRyaWVzKCk7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIEEgU3RyaW5nIHZhbHVlIHRoYXQgaXMgdXNlZCBpbiB0aGUgY3JlYXRpb24gb2YgdGhlIGRlZmF1bHQgc3RyaW5nIGRlc2NyaXB0aW9uIG9mIGFuIG9iamVjdC5cbiAgICAgKiBDYWxsZWQgYnkgdGhlIGJ1aWx0LWluIG1ldGhvZCBPYmplY3QucHJvdG90eXBlLnRvU3RyaW5nLlxuICAgICAqL1xuICAgIFtTeW1ib2wudG9TdHJpbmdUYWddID0gJ0xSVUNhY2hlJztcbiAgICAvKipcbiAgICAgKiBGaW5kIGEgdmFsdWUgZm9yIHdoaWNoIHRoZSBzdXBwbGllZCBmbiBtZXRob2QgcmV0dXJucyBhIHRydXRoeSB2YWx1ZSxcbiAgICAgKiBzaW1pbGFyIHRvIEFycmF5LmZpbmQoKS4gIGZuIGlzIGNhbGxlZCBhcyBmbih2YWx1ZSwga2V5LCBjYWNoZSkuXG4gICAgICovXG4gICAgZmluZChmbiwgZ2V0T3B0aW9ucyA9IHt9KSB7XG4gICAgICAgIGZvciAoY29uc3QgaSBvZiB0aGlzLiNpbmRleGVzKCkpIHtcbiAgICAgICAgICAgIGNvbnN0IHYgPSB0aGlzLiN2YWxMaXN0W2ldO1xuICAgICAgICAgICAgY29uc3QgdmFsdWUgPSB0aGlzLiNpc0JhY2tncm91bmRGZXRjaCh2KVxuICAgICAgICAgICAgICAgID8gdi5fX3N0YWxlV2hpbGVGZXRjaGluZ1xuICAgICAgICAgICAgICAgIDogdjtcbiAgICAgICAgICAgIGlmICh2YWx1ZSA9PT0gdW5kZWZpbmVkKVxuICAgICAgICAgICAgICAgIGNvbnRpbnVlO1xuICAgICAgICAgICAgaWYgKGZuKHZhbHVlLCB0aGlzLiNrZXlMaXN0W2ldLCB0aGlzKSkge1xuICAgICAgICAgICAgICAgIHJldHVybiB0aGlzLmdldCh0aGlzLiNrZXlMaXN0W2ldLCBnZXRPcHRpb25zKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH1cbiAgICAvKipcbiAgICAgKiBDYWxsIHRoZSBzdXBwbGllZCBmdW5jdGlvbiBvbiBlYWNoIGl0ZW0gaW4gdGhlIGNhY2hlLCBpbiBvcmRlciBmcm9tXG4gICAgICogbW9zdCByZWNlbnRseSB1c2VkIHRvIGxlYXN0IHJlY2VudGx5IHVzZWQuICBmbiBpcyBjYWxsZWQgYXNcbiAgICAgKiBmbih2YWx1ZSwga2V5LCBjYWNoZSkuICBEb2VzIG5vdCB1cGRhdGUgYWdlIG9yIHJlY2VudHkgb2YgdXNlLlxuICAgICAqIERvZXMgbm90IGl0ZXJhdGUgb3ZlciBzdGFsZSB2YWx1ZXMuXG4gICAgICovXG4gICAgZm9yRWFjaChmbiwgdGhpc3AgPSB0aGlzKSB7XG4gICAgICAgIGZvciAoY29uc3QgaSBvZiB0aGlzLiNpbmRleGVzKCkpIHtcbiAgICAgICAgICAgIGNvbnN0IHYgPSB0aGlzLiN2YWxMaXN0W2ldO1xuICAgICAgICAgICAgY29uc3QgdmFsdWUgPSB0aGlzLiNpc0JhY2tncm91bmRGZXRjaCh2KVxuICAgICAgICAgICAgICAgID8gdi5fX3N0YWxlV2hpbGVGZXRjaGluZ1xuICAgICAgICAgICAgICAgIDogdjtcbiAgICAgICAgICAgIGlmICh2YWx1ZSA9PT0gdW5kZWZpbmVkKVxuICAgICAgICAgICAgICAgIGNvbnRpbnVlO1xuICAgICAgICAgICAgZm4uY2FsbCh0aGlzcCwgdmFsdWUsIHRoaXMuI2tleUxpc3RbaV0sIHRoaXMpO1xuICAgICAgICB9XG4gICAgfVxuICAgIC8qKlxuICAgICAqIFRoZSBzYW1lIGFzIHtAbGluayBMUlVDYWNoZS5mb3JFYWNofSBidXQgaXRlbXMgYXJlIGl0ZXJhdGVkIG92ZXIgaW5cbiAgICAgKiByZXZlcnNlIG9yZGVyLiAgKGllLCBsZXNzIHJlY2VudGx5IHVzZWQgaXRlbXMgYXJlIGl0ZXJhdGVkIG92ZXIgZmlyc3QuKVxuICAgICAqL1xuICAgIHJmb3JFYWNoKGZuLCB0aGlzcCA9IHRoaXMpIHtcbiAgICAgICAgZm9yIChjb25zdCBpIG9mIHRoaXMuI3JpbmRleGVzKCkpIHtcbiAgICAgICAgICAgIGNvbnN0IHYgPSB0aGlzLiN2YWxMaXN0W2ldO1xuICAgICAgICAgICAgY29uc3QgdmFsdWUgPSB0aGlzLiNpc0JhY2tncm91bmRGZXRjaCh2KVxuICAgICAgICAgICAgICAgID8gdi5fX3N0YWxlV2hpbGVGZXRjaGluZ1xuICAgICAgICAgICAgICAgIDogdjtcbiAgICAgICAgICAgIGlmICh2YWx1ZSA9PT0gdW5kZWZpbmVkKVxuICAgICAgICAgICAgICAgIGNvbnRpbnVlO1xuICAgICAgICAgICAgZm4uY2FsbCh0aGlzcCwgdmFsdWUsIHRoaXMuI2tleUxpc3RbaV0sIHRoaXMpO1xuICAgICAgICB9XG4gICAgfVxuICAgIC8qKlxuICAgICAqIERlbGV0ZSBhbnkgc3RhbGUgZW50cmllcy4gUmV0dXJucyB0cnVlIGlmIGFueXRoaW5nIHdhcyByZW1vdmVkLFxuICAgICAqIGZhbHNlIG90aGVyd2lzZS5cbiAgICAgKi9cbiAgICBwdXJnZVN0YWxlKCkge1xuICAgICAgICBsZXQgZGVsZXRlZCA9IGZhbHNlO1xuICAgICAgICBmb3IgKGNvbnN0IGkgb2YgdGhpcy4jcmluZGV4ZXMoeyBhbGxvd1N0YWxlOiB0cnVlIH0pKSB7XG4gICAgICAgICAgICBpZiAodGhpcy4jaXNTdGFsZShpKSkge1xuICAgICAgICAgICAgICAgIHRoaXMuZGVsZXRlKHRoaXMuI2tleUxpc3RbaV0pO1xuICAgICAgICAgICAgICAgIGRlbGV0ZWQgPSB0cnVlO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIHJldHVybiBkZWxldGVkO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBHZXQgdGhlIGV4dGVuZGVkIGluZm8gYWJvdXQgYSBnaXZlbiBlbnRyeSwgdG8gZ2V0IGl0cyB2YWx1ZSwgc2l6ZSwgYW5kXG4gICAgICogVFRMIGluZm8gc2ltdWx0YW5lb3VzbHkuIExpa2Uge0BsaW5rIExSVUNhY2hlI2R1bXB9LCBidXQganVzdCBmb3IgYVxuICAgICAqIHNpbmdsZSBrZXkuIEFsd2F5cyByZXR1cm5zIHN0YWxlIHZhbHVlcywgaWYgdGhlaXIgaW5mbyBpcyBmb3VuZCBpbiB0aGVcbiAgICAgKiBjYWNoZSwgc28gYmUgc3VyZSB0byBjaGVjayBmb3IgZXhwaXJlZCBUVExzIGlmIHJlbGV2YW50LlxuICAgICAqL1xuICAgIGluZm8oa2V5KSB7XG4gICAgICAgIGNvbnN0IGkgPSB0aGlzLiNrZXlNYXAuZ2V0KGtleSk7XG4gICAgICAgIGlmIChpID09PSB1bmRlZmluZWQpXG4gICAgICAgICAgICByZXR1cm4gdW5kZWZpbmVkO1xuICAgICAgICBjb25zdCB2ID0gdGhpcy4jdmFsTGlzdFtpXTtcbiAgICAgICAgY29uc3QgdmFsdWUgPSB0aGlzLiNpc0JhY2tncm91bmRGZXRjaCh2KVxuICAgICAgICAgICAgPyB2Ll9fc3RhbGVXaGlsZUZldGNoaW5nXG4gICAgICAgICAgICA6IHY7XG4gICAgICAgIGlmICh2YWx1ZSA9PT0gdW5kZWZpbmVkKVxuICAgICAgICAgICAgcmV0dXJuIHVuZGVmaW5lZDtcbiAgICAgICAgY29uc3QgZW50cnkgPSB7IHZhbHVlIH07XG4gICAgICAgIGlmICh0aGlzLiN0dGxzICYmIHRoaXMuI3N0YXJ0cykge1xuICAgICAgICAgICAgY29uc3QgdHRsID0gdGhpcy4jdHRsc1tpXTtcbiAgICAgICAgICAgIGNvbnN0IHN0YXJ0ID0gdGhpcy4jc3RhcnRzW2ldO1xuICAgICAgICAgICAgaWYgKHR0bCAmJiBzdGFydCkge1xuICAgICAgICAgICAgICAgIGNvbnN0IHJlbWFpbiA9IHR0bCAtIChwZXJmLm5vdygpIC0gc3RhcnQpO1xuICAgICAgICAgICAgICAgIGVudHJ5LnR0bCA9IHJlbWFpbjtcbiAgICAgICAgICAgICAgICBlbnRyeS5zdGFydCA9IERhdGUubm93KCk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgaWYgKHRoaXMuI3NpemVzKSB7XG4gICAgICAgICAgICBlbnRyeS5zaXplID0gdGhpcy4jc2l6ZXNbaV07XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIGVudHJ5O1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBSZXR1cm4gYW4gYXJyYXkgb2YgW2tleSwge0BsaW5rIExSVUNhY2hlLkVudHJ5fV0gdHVwbGVzIHdoaWNoIGNhbiBiZVxuICAgICAqIHBhc3NlZCB0byBjYWNoZS5sb2FkKClcbiAgICAgKi9cbiAgICBkdW1wKCkge1xuICAgICAgICBjb25zdCBhcnIgPSBbXTtcbiAgICAgICAgZm9yIChjb25zdCBpIG9mIHRoaXMuI2luZGV4ZXMoeyBhbGxvd1N0YWxlOiB0cnVlIH0pKSB7XG4gICAgICAgICAgICBjb25zdCBrZXkgPSB0aGlzLiNrZXlMaXN0W2ldO1xuICAgICAgICAgICAgY29uc3QgdiA9IHRoaXMuI3ZhbExpc3RbaV07XG4gICAgICAgICAgICBjb25zdCB2YWx1ZSA9IHRoaXMuI2lzQmFja2dyb3VuZEZldGNoKHYpXG4gICAgICAgICAgICAgICAgPyB2Ll9fc3RhbGVXaGlsZUZldGNoaW5nXG4gICAgICAgICAgICAgICAgOiB2O1xuICAgICAgICAgICAgaWYgKHZhbHVlID09PSB1bmRlZmluZWQgfHwga2V5ID09PSB1bmRlZmluZWQpXG4gICAgICAgICAgICAgICAgY29udGludWU7XG4gICAgICAgICAgICBjb25zdCBlbnRyeSA9IHsgdmFsdWUgfTtcbiAgICAgICAgICAgIGlmICh0aGlzLiN0dGxzICYmIHRoaXMuI3N0YXJ0cykge1xuICAgICAgICAgICAgICAgIGVudHJ5LnR0bCA9IHRoaXMuI3R0bHNbaV07XG4gICAgICAgICAgICAgICAgLy8gYWx3YXlzIGR1bXAgdGhlIHN0YXJ0IHJlbGF0aXZlIHRvIGEgcG9ydGFibGUgdGltZXN0YW1wXG4gICAgICAgICAgICAgICAgLy8gaXQncyBvayBmb3IgdGhpcyB0byBiZSBhIGJpdCBzbG93LCBpdCdzIGEgcmFyZSBvcGVyYXRpb24uXG4gICAgICAgICAgICAgICAgY29uc3QgYWdlID0gcGVyZi5ub3coKSAtIHRoaXMuI3N0YXJ0c1tpXTtcbiAgICAgICAgICAgICAgICBlbnRyeS5zdGFydCA9IE1hdGguZmxvb3IoRGF0ZS5ub3coKSAtIGFnZSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAodGhpcy4jc2l6ZXMpIHtcbiAgICAgICAgICAgICAgICBlbnRyeS5zaXplID0gdGhpcy4jc2l6ZXNbaV07XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBhcnIudW5zaGlmdChba2V5LCBlbnRyeV0pO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBhcnI7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIFJlc2V0IHRoZSBjYWNoZSBhbmQgbG9hZCBpbiB0aGUgaXRlbXMgaW4gZW50cmllcyBpbiB0aGUgb3JkZXIgbGlzdGVkLlxuICAgICAqIE5vdGUgdGhhdCB0aGUgc2hhcGUgb2YgdGhlIHJlc3VsdGluZyBjYWNoZSBtYXkgYmUgZGlmZmVyZW50IGlmIHRoZVxuICAgICAqIHNhbWUgb3B0aW9ucyBhcmUgbm90IHVzZWQgaW4gYm90aCBjYWNoZXMuXG4gICAgICovXG4gICAgbG9hZChhcnIpIHtcbiAgICAgICAgdGhpcy5jbGVhcigpO1xuICAgICAgICBmb3IgKGNvbnN0IFtrZXksIGVudHJ5XSBvZiBhcnIpIHtcbiAgICAgICAgICAgIGlmIChlbnRyeS5zdGFydCkge1xuICAgICAgICAgICAgICAgIC8vIGVudHJ5LnN0YXJ0IGlzIGEgcG9ydGFibGUgdGltZXN0YW1wLCBidXQgd2UgbWF5IGJlIHVzaW5nXG4gICAgICAgICAgICAgICAgLy8gbm9kZSdzIHBlcmZvcm1hbmNlLm5vdygpLCBzbyBjYWxjdWxhdGUgdGhlIG9mZnNldCwgc28gdGhhdFxuICAgICAgICAgICAgICAgIC8vIHdlIGdldCB0aGUgaW50ZW5kZWQgcmVtYWluaW5nIFRUTCwgbm8gbWF0dGVyIGhvdyBsb25nIGl0J3NcbiAgICAgICAgICAgICAgICAvLyBiZWVuIG9uIGljZS5cbiAgICAgICAgICAgICAgICAvL1xuICAgICAgICAgICAgICAgIC8vIGl0J3Mgb2sgZm9yIHRoaXMgdG8gYmUgYSBiaXQgc2xvdywgaXQncyBhIHJhcmUgb3BlcmF0aW9uLlxuICAgICAgICAgICAgICAgIGNvbnN0IGFnZSA9IERhdGUubm93KCkgLSBlbnRyeS5zdGFydDtcbiAgICAgICAgICAgICAgICBlbnRyeS5zdGFydCA9IHBlcmYubm93KCkgLSBhZ2U7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICB0aGlzLnNldChrZXksIGVudHJ5LnZhbHVlLCBlbnRyeSk7XG4gICAgICAgIH1cbiAgICB9XG4gICAgLyoqXG4gICAgICogQWRkIGEgdmFsdWUgdG8gdGhlIGNhY2hlLlxuICAgICAqXG4gICAgICogTm90ZTogaWYgYHVuZGVmaW5lZGAgaXMgc3BlY2lmaWVkIGFzIGEgdmFsdWUsIHRoaXMgaXMgYW4gYWxpYXMgZm9yXG4gICAgICoge0BsaW5rIExSVUNhY2hlI2RlbGV0ZX1cbiAgICAgKi9cbiAgICBzZXQoaywgdiwgc2V0T3B0aW9ucyA9IHt9KSB7XG4gICAgICAgIGlmICh2ID09PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgIHRoaXMuZGVsZXRlKGspO1xuICAgICAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgICAgIH1cbiAgICAgICAgY29uc3QgeyB0dGwgPSB0aGlzLnR0bCwgc3RhcnQsIG5vRGlzcG9zZU9uU2V0ID0gdGhpcy5ub0Rpc3Bvc2VPblNldCwgc2l6ZUNhbGN1bGF0aW9uID0gdGhpcy5zaXplQ2FsY3VsYXRpb24sIHN0YXR1cywgfSA9IHNldE9wdGlvbnM7XG4gICAgICAgIGxldCB7IG5vVXBkYXRlVFRMID0gdGhpcy5ub1VwZGF0ZVRUTCB9ID0gc2V0T3B0aW9ucztcbiAgICAgICAgY29uc3Qgc2l6ZSA9IHRoaXMuI3JlcXVpcmVTaXplKGssIHYsIHNldE9wdGlvbnMuc2l6ZSB8fCAwLCBzaXplQ2FsY3VsYXRpb24pO1xuICAgICAgICAvLyBpZiB0aGUgaXRlbSBkb2Vzbid0IGZpdCwgZG9uJ3QgZG8gYW55dGhpbmdcbiAgICAgICAgLy8gTkI6IG1heEVudHJ5U2l6ZSBzZXQgdG8gbWF4U2l6ZSBieSBkZWZhdWx0XG4gICAgICAgIGlmICh0aGlzLm1heEVudHJ5U2l6ZSAmJiBzaXplID4gdGhpcy5tYXhFbnRyeVNpemUpIHtcbiAgICAgICAgICAgIGlmIChzdGF0dXMpIHtcbiAgICAgICAgICAgICAgICBzdGF0dXMuc2V0ID0gJ21pc3MnO1xuICAgICAgICAgICAgICAgIHN0YXR1cy5tYXhFbnRyeVNpemVFeGNlZWRlZCA9IHRydWU7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICAvLyBoYXZlIHRvIGRlbGV0ZSwgaW4gY2FzZSBzb21ldGhpbmcgaXMgdGhlcmUgYWxyZWFkeS5cbiAgICAgICAgICAgIHRoaXMuZGVsZXRlKGspO1xuICAgICAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgICAgIH1cbiAgICAgICAgbGV0IGluZGV4ID0gdGhpcy4jc2l6ZSA9PT0gMCA/IHVuZGVmaW5lZCA6IHRoaXMuI2tleU1hcC5nZXQoayk7XG4gICAgICAgIGlmIChpbmRleCA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICAvLyBhZGRpdGlvblxuICAgICAgICAgICAgaW5kZXggPSAodGhpcy4jc2l6ZSA9PT0gMFxuICAgICAgICAgICAgICAgID8gdGhpcy4jdGFpbFxuICAgICAgICAgICAgICAgIDogdGhpcy4jZnJlZS5sZW5ndGggIT09IDBcbiAgICAgICAgICAgICAgICAgICAgPyB0aGlzLiNmcmVlLnBvcCgpXG4gICAgICAgICAgICAgICAgICAgIDogdGhpcy4jc2l6ZSA9PT0gdGhpcy4jbWF4XG4gICAgICAgICAgICAgICAgICAgICAgICA/IHRoaXMuI2V2aWN0KGZhbHNlKVxuICAgICAgICAgICAgICAgICAgICAgICAgOiB0aGlzLiNzaXplKTtcbiAgICAgICAgICAgIHRoaXMuI2tleUxpc3RbaW5kZXhdID0gaztcbiAgICAgICAgICAgIHRoaXMuI3ZhbExpc3RbaW5kZXhdID0gdjtcbiAgICAgICAgICAgIHRoaXMuI2tleU1hcC5zZXQoaywgaW5kZXgpO1xuICAgICAgICAgICAgdGhpcy4jbmV4dFt0aGlzLiN0YWlsXSA9IGluZGV4O1xuICAgICAgICAgICAgdGhpcy4jcHJldltpbmRleF0gPSB0aGlzLiN0YWlsO1xuICAgICAgICAgICAgdGhpcy4jdGFpbCA9IGluZGV4O1xuICAgICAgICAgICAgdGhpcy4jc2l6ZSsrO1xuICAgICAgICAgICAgdGhpcy4jYWRkSXRlbVNpemUoaW5kZXgsIHNpemUsIHN0YXR1cyk7XG4gICAgICAgICAgICBpZiAoc3RhdHVzKVxuICAgICAgICAgICAgICAgIHN0YXR1cy5zZXQgPSAnYWRkJztcbiAgICAgICAgICAgIG5vVXBkYXRlVFRMID0gZmFsc2U7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAvLyB1cGRhdGVcbiAgICAgICAgICAgIHRoaXMuI21vdmVUb1RhaWwoaW5kZXgpO1xuICAgICAgICAgICAgY29uc3Qgb2xkVmFsID0gdGhpcy4jdmFsTGlzdFtpbmRleF07XG4gICAgICAgICAgICBpZiAodiAhPT0gb2xkVmFsKSB7XG4gICAgICAgICAgICAgICAgaWYgKHRoaXMuI2hhc0ZldGNoTWV0aG9kICYmIHRoaXMuI2lzQmFja2dyb3VuZEZldGNoKG9sZFZhbCkpIHtcbiAgICAgICAgICAgICAgICAgICAgb2xkVmFsLl9fYWJvcnRDb250cm9sbGVyLmFib3J0KG5ldyBFcnJvcigncmVwbGFjZWQnKSk7XG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IHsgX19zdGFsZVdoaWxlRmV0Y2hpbmc6IHMgfSA9IG9sZFZhbDtcbiAgICAgICAgICAgICAgICAgICAgaWYgKHMgIT09IHVuZGVmaW5lZCAmJiAhbm9EaXNwb3NlT25TZXQpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmICh0aGlzLiNoYXNEaXNwb3NlKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy4jZGlzcG9zZT8uKHMsIGssICdzZXQnKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgIGlmICh0aGlzLiNoYXNEaXNwb3NlQWZ0ZXIpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGlzLiNkaXNwb3NlZD8ucHVzaChbcywgaywgJ3NldCddKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBlbHNlIGlmICghbm9EaXNwb3NlT25TZXQpIHtcbiAgICAgICAgICAgICAgICAgICAgaWYgKHRoaXMuI2hhc0Rpc3Bvc2UpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuI2Rpc3Bvc2U/LihvbGRWYWwsIGssICdzZXQnKTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICBpZiAodGhpcy4jaGFzRGlzcG9zZUFmdGVyKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLiNkaXNwb3NlZD8ucHVzaChbb2xkVmFsLCBrLCAnc2V0J10pO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIHRoaXMuI3JlbW92ZUl0ZW1TaXplKGluZGV4KTtcbiAgICAgICAgICAgICAgICB0aGlzLiNhZGRJdGVtU2l6ZShpbmRleCwgc2l6ZSwgc3RhdHVzKTtcbiAgICAgICAgICAgICAgICB0aGlzLiN2YWxMaXN0W2luZGV4XSA9IHY7XG4gICAgICAgICAgICAgICAgaWYgKHN0YXR1cykge1xuICAgICAgICAgICAgICAgICAgICBzdGF0dXMuc2V0ID0gJ3JlcGxhY2UnO1xuICAgICAgICAgICAgICAgICAgICBjb25zdCBvbGRWYWx1ZSA9IG9sZFZhbCAmJiB0aGlzLiNpc0JhY2tncm91bmRGZXRjaChvbGRWYWwpXG4gICAgICAgICAgICAgICAgICAgICAgICA/IG9sZFZhbC5fX3N0YWxlV2hpbGVGZXRjaGluZ1xuICAgICAgICAgICAgICAgICAgICAgICAgOiBvbGRWYWw7XG4gICAgICAgICAgICAgICAgICAgIGlmIChvbGRWYWx1ZSAhPT0gdW5kZWZpbmVkKVxuICAgICAgICAgICAgICAgICAgICAgICAgc3RhdHVzLm9sZFZhbHVlID0gb2xkVmFsdWU7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSBpZiAoc3RhdHVzKSB7XG4gICAgICAgICAgICAgICAgc3RhdHVzLnNldCA9ICd1cGRhdGUnO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIGlmICh0dGwgIT09IDAgJiYgIXRoaXMuI3R0bHMpIHtcbiAgICAgICAgICAgIHRoaXMuI2luaXRpYWxpemVUVExUcmFja2luZygpO1xuICAgICAgICB9XG4gICAgICAgIGlmICh0aGlzLiN0dGxzKSB7XG4gICAgICAgICAgICBpZiAoIW5vVXBkYXRlVFRMKSB7XG4gICAgICAgICAgICAgICAgdGhpcy4jc2V0SXRlbVRUTChpbmRleCwgdHRsLCBzdGFydCk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAoc3RhdHVzKVxuICAgICAgICAgICAgICAgIHRoaXMuI3N0YXR1c1RUTChzdGF0dXMsIGluZGV4KTtcbiAgICAgICAgfVxuICAgICAgICBpZiAoIW5vRGlzcG9zZU9uU2V0ICYmIHRoaXMuI2hhc0Rpc3Bvc2VBZnRlciAmJiB0aGlzLiNkaXNwb3NlZCkge1xuICAgICAgICAgICAgY29uc3QgZHQgPSB0aGlzLiNkaXNwb3NlZDtcbiAgICAgICAgICAgIGxldCB0YXNrO1xuICAgICAgICAgICAgd2hpbGUgKCh0YXNrID0gZHQ/LnNoaWZ0KCkpKSB7XG4gICAgICAgICAgICAgICAgdGhpcy4jZGlzcG9zZUFmdGVyPy4oLi4udGFzayk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIEV2aWN0IHRoZSBsZWFzdCByZWNlbnRseSB1c2VkIGl0ZW0sIHJldHVybmluZyBpdHMgdmFsdWUgb3JcbiAgICAgKiBgdW5kZWZpbmVkYCBpZiBjYWNoZSBpcyBlbXB0eS5cbiAgICAgKi9cbiAgICBwb3AoKSB7XG4gICAgICAgIHRyeSB7XG4gICAgICAgICAgICB3aGlsZSAodGhpcy4jc2l6ZSkge1xuICAgICAgICAgICAgICAgIGNvbnN0IHZhbCA9IHRoaXMuI3ZhbExpc3RbdGhpcy4jaGVhZF07XG4gICAgICAgICAgICAgICAgdGhpcy4jZXZpY3QodHJ1ZSk7XG4gICAgICAgICAgICAgICAgaWYgKHRoaXMuI2lzQmFja2dyb3VuZEZldGNoKHZhbCkpIHtcbiAgICAgICAgICAgICAgICAgICAgaWYgKHZhbC5fX3N0YWxlV2hpbGVGZXRjaGluZykge1xuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHZhbC5fX3N0YWxlV2hpbGVGZXRjaGluZztcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBlbHNlIGlmICh2YWwgIT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gdmFsO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBmaW5hbGx5IHtcbiAgICAgICAgICAgIGlmICh0aGlzLiNoYXNEaXNwb3NlQWZ0ZXIgJiYgdGhpcy4jZGlzcG9zZWQpIHtcbiAgICAgICAgICAgICAgICBjb25zdCBkdCA9IHRoaXMuI2Rpc3Bvc2VkO1xuICAgICAgICAgICAgICAgIGxldCB0YXNrO1xuICAgICAgICAgICAgICAgIHdoaWxlICgodGFzayA9IGR0Py5zaGlmdCgpKSkge1xuICAgICAgICAgICAgICAgICAgICB0aGlzLiNkaXNwb3NlQWZ0ZXI/LiguLi50YXNrKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9XG4gICAgI2V2aWN0KGZyZWUpIHtcbiAgICAgICAgY29uc3QgaGVhZCA9IHRoaXMuI2hlYWQ7XG4gICAgICAgIGNvbnN0IGsgPSB0aGlzLiNrZXlMaXN0W2hlYWRdO1xuICAgICAgICBjb25zdCB2ID0gdGhpcy4jdmFsTGlzdFtoZWFkXTtcbiAgICAgICAgaWYgKHRoaXMuI2hhc0ZldGNoTWV0aG9kICYmIHRoaXMuI2lzQmFja2dyb3VuZEZldGNoKHYpKSB7XG4gICAgICAgICAgICB2Ll9fYWJvcnRDb250cm9sbGVyLmFib3J0KG5ldyBFcnJvcignZXZpY3RlZCcpKTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIGlmICh0aGlzLiNoYXNEaXNwb3NlIHx8IHRoaXMuI2hhc0Rpc3Bvc2VBZnRlcikge1xuICAgICAgICAgICAgaWYgKHRoaXMuI2hhc0Rpc3Bvc2UpIHtcbiAgICAgICAgICAgICAgICB0aGlzLiNkaXNwb3NlPy4odiwgaywgJ2V2aWN0Jyk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAodGhpcy4jaGFzRGlzcG9zZUFmdGVyKSB7XG4gICAgICAgICAgICAgICAgdGhpcy4jZGlzcG9zZWQ/LnB1c2goW3YsIGssICdldmljdCddKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICB0aGlzLiNyZW1vdmVJdGVtU2l6ZShoZWFkKTtcbiAgICAgICAgLy8gaWYgd2UgYXJlbid0IGFib3V0IHRvIHVzZSB0aGUgaW5kZXgsIHRoZW4gbnVsbCB0aGVzZSBvdXRcbiAgICAgICAgaWYgKGZyZWUpIHtcbiAgICAgICAgICAgIHRoaXMuI2tleUxpc3RbaGVhZF0gPSB1bmRlZmluZWQ7XG4gICAgICAgICAgICB0aGlzLiN2YWxMaXN0W2hlYWRdID0gdW5kZWZpbmVkO1xuICAgICAgICAgICAgdGhpcy4jZnJlZS5wdXNoKGhlYWQpO1xuICAgICAgICB9XG4gICAgICAgIGlmICh0aGlzLiNzaXplID09PSAxKSB7XG4gICAgICAgICAgICB0aGlzLiNoZWFkID0gdGhpcy4jdGFpbCA9IDA7XG4gICAgICAgICAgICB0aGlzLiNmcmVlLmxlbmd0aCA9IDA7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICB0aGlzLiNoZWFkID0gdGhpcy4jbmV4dFtoZWFkXTtcbiAgICAgICAgfVxuICAgICAgICB0aGlzLiNrZXlNYXAuZGVsZXRlKGspO1xuICAgICAgICB0aGlzLiNzaXplLS07XG4gICAgICAgIHJldHVybiBoZWFkO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBDaGVjayBpZiBhIGtleSBpcyBpbiB0aGUgY2FjaGUsIHdpdGhvdXQgdXBkYXRpbmcgdGhlIHJlY2VuY3kgb2YgdXNlLlxuICAgICAqIFdpbGwgcmV0dXJuIGZhbHNlIGlmIHRoZSBpdGVtIGlzIHN0YWxlLCBldmVuIHRob3VnaCBpdCBpcyB0ZWNobmljYWxseVxuICAgICAqIGluIHRoZSBjYWNoZS5cbiAgICAgKlxuICAgICAqIFdpbGwgbm90IHVwZGF0ZSBpdGVtIGFnZSB1bmxlc3NcbiAgICAgKiB7QGxpbmsgTFJVQ2FjaGUuT3B0aW9uc0Jhc2UudXBkYXRlQWdlT25IYXN9IGlzIHNldC5cbiAgICAgKi9cbiAgICBoYXMoaywgaGFzT3B0aW9ucyA9IHt9KSB7XG4gICAgICAgIGNvbnN0IHsgdXBkYXRlQWdlT25IYXMgPSB0aGlzLnVwZGF0ZUFnZU9uSGFzLCBzdGF0dXMgfSA9IGhhc09wdGlvbnM7XG4gICAgICAgIGNvbnN0IGluZGV4ID0gdGhpcy4ja2V5TWFwLmdldChrKTtcbiAgICAgICAgaWYgKGluZGV4ICE9PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgIGNvbnN0IHYgPSB0aGlzLiN2YWxMaXN0W2luZGV4XTtcbiAgICAgICAgICAgIGlmICh0aGlzLiNpc0JhY2tncm91bmRGZXRjaCh2KSAmJlxuICAgICAgICAgICAgICAgIHYuX19zdGFsZVdoaWxlRmV0Y2hpbmcgPT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmICghdGhpcy4jaXNTdGFsZShpbmRleCkpIHtcbiAgICAgICAgICAgICAgICBpZiAodXBkYXRlQWdlT25IYXMpIHtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy4jdXBkYXRlSXRlbUFnZShpbmRleCk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGlmIChzdGF0dXMpIHtcbiAgICAgICAgICAgICAgICAgICAgc3RhdHVzLmhhcyA9ICdoaXQnO1xuICAgICAgICAgICAgICAgICAgICB0aGlzLiNzdGF0dXNUVEwoc3RhdHVzLCBpbmRleCk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSBpZiAoc3RhdHVzKSB7XG4gICAgICAgICAgICAgICAgc3RhdHVzLmhhcyA9ICdzdGFsZSc7XG4gICAgICAgICAgICAgICAgdGhpcy4jc3RhdHVzVFRMKHN0YXR1cywgaW5kZXgpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIGVsc2UgaWYgKHN0YXR1cykge1xuICAgICAgICAgICAgc3RhdHVzLmhhcyA9ICdtaXNzJztcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIExpa2Uge0BsaW5rIExSVUNhY2hlI2dldH0gYnV0IGRvZXNuJ3QgdXBkYXRlIHJlY2VuY3kgb3IgZGVsZXRlIHN0YWxlXG4gICAgICogaXRlbXMuXG4gICAgICpcbiAgICAgKiBSZXR1cm5zIGB1bmRlZmluZWRgIGlmIHRoZSBpdGVtIGlzIHN0YWxlLCB1bmxlc3NcbiAgICAgKiB7QGxpbmsgTFJVQ2FjaGUuT3B0aW9uc0Jhc2UuYWxsb3dTdGFsZX0gaXMgc2V0LlxuICAgICAqL1xuICAgIHBlZWsoaywgcGVla09wdGlvbnMgPSB7fSkge1xuICAgICAgICBjb25zdCB7IGFsbG93U3RhbGUgPSB0aGlzLmFsbG93U3RhbGUgfSA9IHBlZWtPcHRpb25zO1xuICAgICAgICBjb25zdCBpbmRleCA9IHRoaXMuI2tleU1hcC5nZXQoayk7XG4gICAgICAgIGlmIChpbmRleCA9PT0gdW5kZWZpbmVkIHx8XG4gICAgICAgICAgICAoIWFsbG93U3RhbGUgJiYgdGhpcy4jaXNTdGFsZShpbmRleCkpKSB7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cbiAgICAgICAgY29uc3QgdiA9IHRoaXMuI3ZhbExpc3RbaW5kZXhdO1xuICAgICAgICAvLyBlaXRoZXIgc3RhbGUgYW5kIGFsbG93ZWQsIG9yIGZvcmNpbmcgYSByZWZyZXNoIG9mIG5vbi1zdGFsZSB2YWx1ZVxuICAgICAgICByZXR1cm4gdGhpcy4jaXNCYWNrZ3JvdW5kRmV0Y2godikgPyB2Ll9fc3RhbGVXaGlsZUZldGNoaW5nIDogdjtcbiAgICB9XG4gICAgI2JhY2tncm91bmRGZXRjaChrLCBpbmRleCwgb3B0aW9ucywgY29udGV4dCkge1xuICAgICAgICBjb25zdCB2ID0gaW5kZXggPT09IHVuZGVmaW5lZCA/IHVuZGVmaW5lZCA6IHRoaXMuI3ZhbExpc3RbaW5kZXhdO1xuICAgICAgICBpZiAodGhpcy4jaXNCYWNrZ3JvdW5kRmV0Y2godikpIHtcbiAgICAgICAgICAgIHJldHVybiB2O1xuICAgICAgICB9XG4gICAgICAgIGNvbnN0IGFjID0gbmV3IEFDKCk7XG4gICAgICAgIGNvbnN0IHsgc2lnbmFsIH0gPSBvcHRpb25zO1xuICAgICAgICAvLyB3aGVuL2lmIG91ciBBQyBzaWduYWxzLCB0aGVuIHN0b3AgbGlzdGVuaW5nIHRvIHRoZWlycy5cbiAgICAgICAgc2lnbmFsPy5hZGRFdmVudExpc3RlbmVyKCdhYm9ydCcsICgpID0+IGFjLmFib3J0KHNpZ25hbC5yZWFzb24pLCB7XG4gICAgICAgICAgICBzaWduYWw6IGFjLnNpZ25hbCxcbiAgICAgICAgfSk7XG4gICAgICAgIGNvbnN0IGZldGNoT3B0cyA9IHtcbiAgICAgICAgICAgIHNpZ25hbDogYWMuc2lnbmFsLFxuICAgICAgICAgICAgb3B0aW9ucyxcbiAgICAgICAgICAgIGNvbnRleHQsXG4gICAgICAgIH07XG4gICAgICAgIGNvbnN0IGNiID0gKHYsIHVwZGF0ZUNhY2hlID0gZmFsc2UpID0+IHtcbiAgICAgICAgICAgIGNvbnN0IHsgYWJvcnRlZCB9ID0gYWMuc2lnbmFsO1xuICAgICAgICAgICAgY29uc3QgaWdub3JlQWJvcnQgPSBvcHRpb25zLmlnbm9yZUZldGNoQWJvcnQgJiYgdiAhPT0gdW5kZWZpbmVkO1xuICAgICAgICAgICAgaWYgKG9wdGlvbnMuc3RhdHVzKSB7XG4gICAgICAgICAgICAgICAgaWYgKGFib3J0ZWQgJiYgIXVwZGF0ZUNhY2hlKSB7XG4gICAgICAgICAgICAgICAgICAgIG9wdGlvbnMuc3RhdHVzLmZldGNoQWJvcnRlZCA9IHRydWU7XG4gICAgICAgICAgICAgICAgICAgIG9wdGlvbnMuc3RhdHVzLmZldGNoRXJyb3IgPSBhYy5zaWduYWwucmVhc29uO1xuICAgICAgICAgICAgICAgICAgICBpZiAoaWdub3JlQWJvcnQpXG4gICAgICAgICAgICAgICAgICAgICAgICBvcHRpb25zLnN0YXR1cy5mZXRjaEFib3J0SWdub3JlZCA9IHRydWU7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICBvcHRpb25zLnN0YXR1cy5mZXRjaFJlc29sdmVkID0gdHJ1ZTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAoYWJvcnRlZCAmJiAhaWdub3JlQWJvcnQgJiYgIXVwZGF0ZUNhY2hlKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIGZldGNoRmFpbChhYy5zaWduYWwucmVhc29uKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIC8vIGVpdGhlciB3ZSBkaWRuJ3QgYWJvcnQsIGFuZCBhcmUgc3RpbGwgaGVyZSwgb3Igd2UgZGlkLCBhbmQgaWdub3JlZFxuICAgICAgICAgICAgY29uc3QgYmYgPSBwO1xuICAgICAgICAgICAgaWYgKHRoaXMuI3ZhbExpc3RbaW5kZXhdID09PSBwKSB7XG4gICAgICAgICAgICAgICAgaWYgKHYgPT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgICAgICAgICBpZiAoYmYuX19zdGFsZVdoaWxlRmV0Y2hpbmcpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuI3ZhbExpc3RbaW5kZXhdID0gYmYuX19zdGFsZVdoaWxlRmV0Y2hpbmc7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLmRlbGV0ZShrKTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgaWYgKG9wdGlvbnMuc3RhdHVzKVxuICAgICAgICAgICAgICAgICAgICAgICAgb3B0aW9ucy5zdGF0dXMuZmV0Y2hVcGRhdGVkID0gdHJ1ZTtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5zZXQoaywgdiwgZmV0Y2hPcHRzLm9wdGlvbnMpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHJldHVybiB2O1xuICAgICAgICB9O1xuICAgICAgICBjb25zdCBlYiA9IChlcikgPT4ge1xuICAgICAgICAgICAgaWYgKG9wdGlvbnMuc3RhdHVzKSB7XG4gICAgICAgICAgICAgICAgb3B0aW9ucy5zdGF0dXMuZmV0Y2hSZWplY3RlZCA9IHRydWU7XG4gICAgICAgICAgICAgICAgb3B0aW9ucy5zdGF0dXMuZmV0Y2hFcnJvciA9IGVyO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcmV0dXJuIGZldGNoRmFpbChlcik7XG4gICAgICAgIH07XG4gICAgICAgIGNvbnN0IGZldGNoRmFpbCA9IChlcikgPT4ge1xuICAgICAgICAgICAgY29uc3QgeyBhYm9ydGVkIH0gPSBhYy5zaWduYWw7XG4gICAgICAgICAgICBjb25zdCBhbGxvd1N0YWxlQWJvcnRlZCA9IGFib3J0ZWQgJiYgb3B0aW9ucy5hbGxvd1N0YWxlT25GZXRjaEFib3J0O1xuICAgICAgICAgICAgY29uc3QgYWxsb3dTdGFsZSA9IGFsbG93U3RhbGVBYm9ydGVkIHx8IG9wdGlvbnMuYWxsb3dTdGFsZU9uRmV0Y2hSZWplY3Rpb247XG4gICAgICAgICAgICBjb25zdCBub0RlbGV0ZSA9IGFsbG93U3RhbGUgfHwgb3B0aW9ucy5ub0RlbGV0ZU9uRmV0Y2hSZWplY3Rpb247XG4gICAgICAgICAgICBjb25zdCBiZiA9IHA7XG4gICAgICAgICAgICBpZiAodGhpcy4jdmFsTGlzdFtpbmRleF0gPT09IHApIHtcbiAgICAgICAgICAgICAgICAvLyBpZiB3ZSBhbGxvdyBzdGFsZSBvbiBmZXRjaCByZWplY3Rpb25zLCB0aGVuIHdlIG5lZWQgdG8gZW5zdXJlIHRoYXRcbiAgICAgICAgICAgICAgICAvLyB0aGUgc3RhbGUgdmFsdWUgaXMgbm90IHJlbW92ZWQgZnJvbSB0aGUgY2FjaGUgd2hlbiB0aGUgZmV0Y2ggZmFpbHMuXG4gICAgICAgICAgICAgICAgY29uc3QgZGVsID0gIW5vRGVsZXRlIHx8IGJmLl9fc3RhbGVXaGlsZUZldGNoaW5nID09PSB1bmRlZmluZWQ7XG4gICAgICAgICAgICAgICAgaWYgKGRlbCkge1xuICAgICAgICAgICAgICAgICAgICB0aGlzLmRlbGV0ZShrKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgZWxzZSBpZiAoIWFsbG93U3RhbGVBYm9ydGVkKSB7XG4gICAgICAgICAgICAgICAgICAgIC8vIHN0aWxsIHJlcGxhY2UgdGhlICpwcm9taXNlKiB3aXRoIHRoZSBzdGFsZSB2YWx1ZSxcbiAgICAgICAgICAgICAgICAgICAgLy8gc2luY2Ugd2UgYXJlIGRvbmUgd2l0aCB0aGUgcHJvbWlzZSBhdCB0aGlzIHBvaW50LlxuICAgICAgICAgICAgICAgICAgICAvLyBsZWF2ZSBpdCB1bnRvdWNoZWQgaWYgd2UncmUgc3RpbGwgd2FpdGluZyBmb3IgYW5cbiAgICAgICAgICAgICAgICAgICAgLy8gYWJvcnRlZCBiYWNrZ3JvdW5kIGZldGNoIHRoYXQgaGFzbid0IHlldCByZXR1cm5lZC5cbiAgICAgICAgICAgICAgICAgICAgdGhpcy4jdmFsTGlzdFtpbmRleF0gPSBiZi5fX3N0YWxlV2hpbGVGZXRjaGluZztcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAoYWxsb3dTdGFsZSkge1xuICAgICAgICAgICAgICAgIGlmIChvcHRpb25zLnN0YXR1cyAmJiBiZi5fX3N0YWxlV2hpbGVGZXRjaGluZyAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICAgICAgICAgIG9wdGlvbnMuc3RhdHVzLnJldHVybmVkU3RhbGUgPSB0cnVlO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICByZXR1cm4gYmYuX19zdGFsZVdoaWxlRmV0Y2hpbmc7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNlIGlmIChiZi5fX3JldHVybmVkID09PSBiZikge1xuICAgICAgICAgICAgICAgIHRocm93IGVyO1xuICAgICAgICAgICAgfVxuICAgICAgICB9O1xuICAgICAgICBjb25zdCBwY2FsbCA9IChyZXMsIHJlaikgPT4ge1xuICAgICAgICAgICAgY29uc3QgZm1wID0gdGhpcy4jZmV0Y2hNZXRob2Q/LihrLCB2LCBmZXRjaE9wdHMpO1xuICAgICAgICAgICAgaWYgKGZtcCAmJiBmbXAgaW5zdGFuY2VvZiBQcm9taXNlKSB7XG4gICAgICAgICAgICAgICAgZm1wLnRoZW4odiA9PiByZXModiA9PT0gdW5kZWZpbmVkID8gdW5kZWZpbmVkIDogdiksIHJlaik7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICAvLyBpZ25vcmVkLCB3ZSBnbyB1bnRpbCB3ZSBmaW5pc2gsIHJlZ2FyZGxlc3MuXG4gICAgICAgICAgICAvLyBkZWZlciBjaGVjayB1bnRpbCB3ZSBhcmUgYWN0dWFsbHkgYWJvcnRpbmcsXG4gICAgICAgICAgICAvLyBzbyBmZXRjaE1ldGhvZCBjYW4gb3ZlcnJpZGUuXG4gICAgICAgICAgICBhYy5zaWduYWwuYWRkRXZlbnRMaXN0ZW5lcignYWJvcnQnLCAoKSA9PiB7XG4gICAgICAgICAgICAgICAgaWYgKCFvcHRpb25zLmlnbm9yZUZldGNoQWJvcnQgfHxcbiAgICAgICAgICAgICAgICAgICAgb3B0aW9ucy5hbGxvd1N0YWxlT25GZXRjaEFib3J0KSB7XG4gICAgICAgICAgICAgICAgICAgIHJlcyh1bmRlZmluZWQpO1xuICAgICAgICAgICAgICAgICAgICAvLyB3aGVuIGl0IGV2ZW50dWFsbHkgcmVzb2x2ZXMsIHVwZGF0ZSB0aGUgY2FjaGUuXG4gICAgICAgICAgICAgICAgICAgIGlmIChvcHRpb25zLmFsbG93U3RhbGVPbkZldGNoQWJvcnQpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHJlcyA9IHYgPT4gY2IodiwgdHJ1ZSk7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfTtcbiAgICAgICAgaWYgKG9wdGlvbnMuc3RhdHVzKVxuICAgICAgICAgICAgb3B0aW9ucy5zdGF0dXMuZmV0Y2hEaXNwYXRjaGVkID0gdHJ1ZTtcbiAgICAgICAgY29uc3QgcCA9IG5ldyBQcm9taXNlKHBjYWxsKS50aGVuKGNiLCBlYik7XG4gICAgICAgIGNvbnN0IGJmID0gT2JqZWN0LmFzc2lnbihwLCB7XG4gICAgICAgICAgICBfX2Fib3J0Q29udHJvbGxlcjogYWMsXG4gICAgICAgICAgICBfX3N0YWxlV2hpbGVGZXRjaGluZzogdixcbiAgICAgICAgICAgIF9fcmV0dXJuZWQ6IHVuZGVmaW5lZCxcbiAgICAgICAgfSk7XG4gICAgICAgIGlmIChpbmRleCA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICAvLyBpbnRlcm5hbCwgZG9uJ3QgZXhwb3NlIHN0YXR1cy5cbiAgICAgICAgICAgIHRoaXMuc2V0KGssIGJmLCB7IC4uLmZldGNoT3B0cy5vcHRpb25zLCBzdGF0dXM6IHVuZGVmaW5lZCB9KTtcbiAgICAgICAgICAgIGluZGV4ID0gdGhpcy4ja2V5TWFwLmdldChrKTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIHRoaXMuI3ZhbExpc3RbaW5kZXhdID0gYmY7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIGJmO1xuICAgIH1cbiAgICAjaXNCYWNrZ3JvdW5kRmV0Y2gocCkge1xuICAgICAgICBpZiAoIXRoaXMuI2hhc0ZldGNoTWV0aG9kKVxuICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICBjb25zdCBiID0gcDtcbiAgICAgICAgcmV0dXJuICghIWIgJiZcbiAgICAgICAgICAgIGIgaW5zdGFuY2VvZiBQcm9taXNlICYmXG4gICAgICAgICAgICBiLmhhc093blByb3BlcnR5KCdfX3N0YWxlV2hpbGVGZXRjaGluZycpICYmXG4gICAgICAgICAgICBiLl9fYWJvcnRDb250cm9sbGVyIGluc3RhbmNlb2YgQUMpO1xuICAgIH1cbiAgICBhc3luYyBmZXRjaChrLCBmZXRjaE9wdGlvbnMgPSB7fSkge1xuICAgICAgICBjb25zdCB7IFxuICAgICAgICAvLyBnZXQgb3B0aW9uc1xuICAgICAgICBhbGxvd1N0YWxlID0gdGhpcy5hbGxvd1N0YWxlLCB1cGRhdGVBZ2VPbkdldCA9IHRoaXMudXBkYXRlQWdlT25HZXQsIG5vRGVsZXRlT25TdGFsZUdldCA9IHRoaXMubm9EZWxldGVPblN0YWxlR2V0LCBcbiAgICAgICAgLy8gc2V0IG9wdGlvbnNcbiAgICAgICAgdHRsID0gdGhpcy50dGwsIG5vRGlzcG9zZU9uU2V0ID0gdGhpcy5ub0Rpc3Bvc2VPblNldCwgc2l6ZSA9IDAsIHNpemVDYWxjdWxhdGlvbiA9IHRoaXMuc2l6ZUNhbGN1bGF0aW9uLCBub1VwZGF0ZVRUTCA9IHRoaXMubm9VcGRhdGVUVEwsIFxuICAgICAgICAvLyBmZXRjaCBleGNsdXNpdmUgb3B0aW9uc1xuICAgICAgICBub0RlbGV0ZU9uRmV0Y2hSZWplY3Rpb24gPSB0aGlzLm5vRGVsZXRlT25GZXRjaFJlamVjdGlvbiwgYWxsb3dTdGFsZU9uRmV0Y2hSZWplY3Rpb24gPSB0aGlzLmFsbG93U3RhbGVPbkZldGNoUmVqZWN0aW9uLCBpZ25vcmVGZXRjaEFib3J0ID0gdGhpcy5pZ25vcmVGZXRjaEFib3J0LCBhbGxvd1N0YWxlT25GZXRjaEFib3J0ID0gdGhpcy5hbGxvd1N0YWxlT25GZXRjaEFib3J0LCBjb250ZXh0LCBmb3JjZVJlZnJlc2ggPSBmYWxzZSwgc3RhdHVzLCBzaWduYWwsIH0gPSBmZXRjaE9wdGlvbnM7XG4gICAgICAgIGlmICghdGhpcy4jaGFzRmV0Y2hNZXRob2QpIHtcbiAgICAgICAgICAgIGlmIChzdGF0dXMpXG4gICAgICAgICAgICAgICAgc3RhdHVzLmZldGNoID0gJ2dldCc7XG4gICAgICAgICAgICByZXR1cm4gdGhpcy5nZXQoaywge1xuICAgICAgICAgICAgICAgIGFsbG93U3RhbGUsXG4gICAgICAgICAgICAgICAgdXBkYXRlQWdlT25HZXQsXG4gICAgICAgICAgICAgICAgbm9EZWxldGVPblN0YWxlR2V0LFxuICAgICAgICAgICAgICAgIHN0YXR1cyxcbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9XG4gICAgICAgIGNvbnN0IG9wdGlvbnMgPSB7XG4gICAgICAgICAgICBhbGxvd1N0YWxlLFxuICAgICAgICAgICAgdXBkYXRlQWdlT25HZXQsXG4gICAgICAgICAgICBub0RlbGV0ZU9uU3RhbGVHZXQsXG4gICAgICAgICAgICB0dGwsXG4gICAgICAgICAgICBub0Rpc3Bvc2VPblNldCxcbiAgICAgICAgICAgIHNpemUsXG4gICAgICAgICAgICBzaXplQ2FsY3VsYXRpb24sXG4gICAgICAgICAgICBub1VwZGF0ZVRUTCxcbiAgICAgICAgICAgIG5vRGVsZXRlT25GZXRjaFJlamVjdGlvbixcbiAgICAgICAgICAgIGFsbG93U3RhbGVPbkZldGNoUmVqZWN0aW9uLFxuICAgICAgICAgICAgYWxsb3dTdGFsZU9uRmV0Y2hBYm9ydCxcbiAgICAgICAgICAgIGlnbm9yZUZldGNoQWJvcnQsXG4gICAgICAgICAgICBzdGF0dXMsXG4gICAgICAgICAgICBzaWduYWwsXG4gICAgICAgIH07XG4gICAgICAgIGxldCBpbmRleCA9IHRoaXMuI2tleU1hcC5nZXQoayk7XG4gICAgICAgIGlmIChpbmRleCA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICBpZiAoc3RhdHVzKVxuICAgICAgICAgICAgICAgIHN0YXR1cy5mZXRjaCA9ICdtaXNzJztcbiAgICAgICAgICAgIGNvbnN0IHAgPSB0aGlzLiNiYWNrZ3JvdW5kRmV0Y2goaywgaW5kZXgsIG9wdGlvbnMsIGNvbnRleHQpO1xuICAgICAgICAgICAgcmV0dXJuIChwLl9fcmV0dXJuZWQgPSBwKTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIC8vIGluIGNhY2hlLCBtYXliZSBhbHJlYWR5IGZldGNoaW5nXG4gICAgICAgICAgICBjb25zdCB2ID0gdGhpcy4jdmFsTGlzdFtpbmRleF07XG4gICAgICAgICAgICBpZiAodGhpcy4jaXNCYWNrZ3JvdW5kRmV0Y2godikpIHtcbiAgICAgICAgICAgICAgICBjb25zdCBzdGFsZSA9IGFsbG93U3RhbGUgJiYgdi5fX3N0YWxlV2hpbGVGZXRjaGluZyAhPT0gdW5kZWZpbmVkO1xuICAgICAgICAgICAgICAgIGlmIChzdGF0dXMpIHtcbiAgICAgICAgICAgICAgICAgICAgc3RhdHVzLmZldGNoID0gJ2luZmxpZ2h0JztcbiAgICAgICAgICAgICAgICAgICAgaWYgKHN0YWxlKVxuICAgICAgICAgICAgICAgICAgICAgICAgc3RhdHVzLnJldHVybmVkU3RhbGUgPSB0cnVlO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICByZXR1cm4gc3RhbGUgPyB2Ll9fc3RhbGVXaGlsZUZldGNoaW5nIDogKHYuX19yZXR1cm5lZCA9IHYpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgLy8gaWYgd2UgZm9yY2UgYSByZWZyZXNoLCB0aGF0IG1lYW5zIGRvIE5PVCBzZXJ2ZSB0aGUgY2FjaGVkIHZhbHVlLFxuICAgICAgICAgICAgLy8gdW5sZXNzIHdlIGFyZSBhbHJlYWR5IGluIHRoZSBwcm9jZXNzIG9mIHJlZnJlc2hpbmcgdGhlIGNhY2hlLlxuICAgICAgICAgICAgY29uc3QgaXNTdGFsZSA9IHRoaXMuI2lzU3RhbGUoaW5kZXgpO1xuICAgICAgICAgICAgaWYgKCFmb3JjZVJlZnJlc2ggJiYgIWlzU3RhbGUpIHtcbiAgICAgICAgICAgICAgICBpZiAoc3RhdHVzKVxuICAgICAgICAgICAgICAgICAgICBzdGF0dXMuZmV0Y2ggPSAnaGl0JztcbiAgICAgICAgICAgICAgICB0aGlzLiNtb3ZlVG9UYWlsKGluZGV4KTtcbiAgICAgICAgICAgICAgICBpZiAodXBkYXRlQWdlT25HZXQpIHtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy4jdXBkYXRlSXRlbUFnZShpbmRleCk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGlmIChzdGF0dXMpXG4gICAgICAgICAgICAgICAgICAgIHRoaXMuI3N0YXR1c1RUTChzdGF0dXMsIGluZGV4KTtcbiAgICAgICAgICAgICAgICByZXR1cm4gdjtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIC8vIG9rLCBpdCBpcyBzdGFsZSBvciBhIGZvcmNlZCByZWZyZXNoLCBhbmQgbm90IGFscmVhZHkgZmV0Y2hpbmcuXG4gICAgICAgICAgICAvLyByZWZyZXNoIHRoZSBjYWNoZS5cbiAgICAgICAgICAgIGNvbnN0IHAgPSB0aGlzLiNiYWNrZ3JvdW5kRmV0Y2goaywgaW5kZXgsIG9wdGlvbnMsIGNvbnRleHQpO1xuICAgICAgICAgICAgY29uc3QgaGFzU3RhbGUgPSBwLl9fc3RhbGVXaGlsZUZldGNoaW5nICE9PSB1bmRlZmluZWQ7XG4gICAgICAgICAgICBjb25zdCBzdGFsZVZhbCA9IGhhc1N0YWxlICYmIGFsbG93U3RhbGU7XG4gICAgICAgICAgICBpZiAoc3RhdHVzKSB7XG4gICAgICAgICAgICAgICAgc3RhdHVzLmZldGNoID0gaXNTdGFsZSA/ICdzdGFsZScgOiAncmVmcmVzaCc7XG4gICAgICAgICAgICAgICAgaWYgKHN0YWxlVmFsICYmIGlzU3RhbGUpXG4gICAgICAgICAgICAgICAgICAgIHN0YXR1cy5yZXR1cm5lZFN0YWxlID0gdHJ1ZTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHJldHVybiBzdGFsZVZhbCA/IHAuX19zdGFsZVdoaWxlRmV0Y2hpbmcgOiAocC5fX3JldHVybmVkID0gcCk7XG4gICAgICAgIH1cbiAgICB9XG4gICAgLyoqXG4gICAgICogUmV0dXJuIGEgdmFsdWUgZnJvbSB0aGUgY2FjaGUuIFdpbGwgdXBkYXRlIHRoZSByZWNlbmN5IG9mIHRoZSBjYWNoZVxuICAgICAqIGVudHJ5IGZvdW5kLlxuICAgICAqXG4gICAgICogSWYgdGhlIGtleSBpcyBub3QgZm91bmQsIGdldCgpIHdpbGwgcmV0dXJuIGB1bmRlZmluZWRgLlxuICAgICAqL1xuICAgIGdldChrLCBnZXRPcHRpb25zID0ge30pIHtcbiAgICAgICAgY29uc3QgeyBhbGxvd1N0YWxlID0gdGhpcy5hbGxvd1N0YWxlLCB1cGRhdGVBZ2VPbkdldCA9IHRoaXMudXBkYXRlQWdlT25HZXQsIG5vRGVsZXRlT25TdGFsZUdldCA9IHRoaXMubm9EZWxldGVPblN0YWxlR2V0LCBzdGF0dXMsIH0gPSBnZXRPcHRpb25zO1xuICAgICAgICBjb25zdCBpbmRleCA9IHRoaXMuI2tleU1hcC5nZXQoayk7XG4gICAgICAgIGlmIChpbmRleCAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICBjb25zdCB2YWx1ZSA9IHRoaXMuI3ZhbExpc3RbaW5kZXhdO1xuICAgICAgICAgICAgY29uc3QgZmV0Y2hpbmcgPSB0aGlzLiNpc0JhY2tncm91bmRGZXRjaCh2YWx1ZSk7XG4gICAgICAgICAgICBpZiAoc3RhdHVzKVxuICAgICAgICAgICAgICAgIHRoaXMuI3N0YXR1c1RUTChzdGF0dXMsIGluZGV4KTtcbiAgICAgICAgICAgIGlmICh0aGlzLiNpc1N0YWxlKGluZGV4KSkge1xuICAgICAgICAgICAgICAgIGlmIChzdGF0dXMpXG4gICAgICAgICAgICAgICAgICAgIHN0YXR1cy5nZXQgPSAnc3RhbGUnO1xuICAgICAgICAgICAgICAgIC8vIGRlbGV0ZSBvbmx5IGlmIG5vdCBhbiBpbi1mbGlnaHQgYmFja2dyb3VuZCBmZXRjaFxuICAgICAgICAgICAgICAgIGlmICghZmV0Y2hpbmcpIHtcbiAgICAgICAgICAgICAgICAgICAgaWYgKCFub0RlbGV0ZU9uU3RhbGVHZXQpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuZGVsZXRlKGspO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIGlmIChzdGF0dXMgJiYgYWxsb3dTdGFsZSlcbiAgICAgICAgICAgICAgICAgICAgICAgIHN0YXR1cy5yZXR1cm5lZFN0YWxlID0gdHJ1ZTtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGFsbG93U3RhbGUgPyB2YWx1ZSA6IHVuZGVmaW5lZDtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgIGlmIChzdGF0dXMgJiZcbiAgICAgICAgICAgICAgICAgICAgICAgIGFsbG93U3RhbGUgJiZcbiAgICAgICAgICAgICAgICAgICAgICAgIHZhbHVlLl9fc3RhbGVXaGlsZUZldGNoaW5nICE9PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHN0YXR1cy5yZXR1cm5lZFN0YWxlID0gdHJ1ZTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gYWxsb3dTdGFsZSA/IHZhbHVlLl9fc3RhbGVXaGlsZUZldGNoaW5nIDogdW5kZWZpbmVkO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgIGlmIChzdGF0dXMpXG4gICAgICAgICAgICAgICAgICAgIHN0YXR1cy5nZXQgPSAnaGl0JztcbiAgICAgICAgICAgICAgICAvLyBpZiB3ZSdyZSBjdXJyZW50bHkgZmV0Y2hpbmcgaXQsIHdlIGRvbid0IGFjdHVhbGx5IGhhdmUgaXQgeWV0XG4gICAgICAgICAgICAgICAgLy8gaXQncyBub3Qgc3RhbGUsIHdoaWNoIG1lYW5zIHRoaXMgaXNuJ3QgYSBzdGFsZVdoaWxlUmVmZXRjaGluZy5cbiAgICAgICAgICAgICAgICAvLyBJZiBpdCdzIG5vdCBzdGFsZSwgYW5kIGZldGNoaW5nLCBBTkQgaGFzIGEgX19zdGFsZVdoaWxlRmV0Y2hpbmdcbiAgICAgICAgICAgICAgICAvLyB2YWx1ZSwgdGhlbiB0aGF0IG1lYW5zIHRoZSB1c2VyIGZldGNoZWQgd2l0aCB7Zm9yY2VSZWZyZXNoOnRydWV9LFxuICAgICAgICAgICAgICAgIC8vIHNvIGl0J3Mgc2FmZSB0byByZXR1cm4gdGhhdCB2YWx1ZS5cbiAgICAgICAgICAgICAgICBpZiAoZmV0Y2hpbmcpIHtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHZhbHVlLl9fc3RhbGVXaGlsZUZldGNoaW5nO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB0aGlzLiNtb3ZlVG9UYWlsKGluZGV4KTtcbiAgICAgICAgICAgICAgICBpZiAodXBkYXRlQWdlT25HZXQpIHtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy4jdXBkYXRlSXRlbUFnZShpbmRleCk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIHJldHVybiB2YWx1ZTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBlbHNlIGlmIChzdGF0dXMpIHtcbiAgICAgICAgICAgIHN0YXR1cy5nZXQgPSAnbWlzcyc7XG4gICAgICAgIH1cbiAgICB9XG4gICAgI2Nvbm5lY3QocCwgbikge1xuICAgICAgICB0aGlzLiNwcmV2W25dID0gcDtcbiAgICAgICAgdGhpcy4jbmV4dFtwXSA9IG47XG4gICAgfVxuICAgICNtb3ZlVG9UYWlsKGluZGV4KSB7XG4gICAgICAgIC8vIGlmIHRhaWwgYWxyZWFkeSwgbm90aGluZyB0byBkb1xuICAgICAgICAvLyBpZiBoZWFkLCBtb3ZlIGhlYWQgdG8gbmV4dFtpbmRleF1cbiAgICAgICAgLy8gZWxzZVxuICAgICAgICAvLyAgIG1vdmUgbmV4dFtwcmV2W2luZGV4XV0gdG8gbmV4dFtpbmRleF0gKGhlYWQgaGFzIG5vIHByZXYpXG4gICAgICAgIC8vICAgbW92ZSBwcmV2W25leHRbaW5kZXhdXSB0byBwcmV2W2luZGV4XVxuICAgICAgICAvLyBwcmV2W2luZGV4XSA9IHRhaWxcbiAgICAgICAgLy8gbmV4dFt0YWlsXSA9IGluZGV4XG4gICAgICAgIC8vIHRhaWwgPSBpbmRleFxuICAgICAgICBpZiAoaW5kZXggIT09IHRoaXMuI3RhaWwpIHtcbiAgICAgICAgICAgIGlmIChpbmRleCA9PT0gdGhpcy4jaGVhZCkge1xuICAgICAgICAgICAgICAgIHRoaXMuI2hlYWQgPSB0aGlzLiNuZXh0W2luZGV4XTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgIHRoaXMuI2Nvbm5lY3QodGhpcy4jcHJldltpbmRleF0sIHRoaXMuI25leHRbaW5kZXhdKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHRoaXMuI2Nvbm5lY3QodGhpcy4jdGFpbCwgaW5kZXgpO1xuICAgICAgICAgICAgdGhpcy4jdGFpbCA9IGluZGV4O1xuICAgICAgICB9XG4gICAgfVxuICAgIC8qKlxuICAgICAqIERlbGV0ZXMgYSBrZXkgb3V0IG9mIHRoZSBjYWNoZS5cbiAgICAgKiBSZXR1cm5zIHRydWUgaWYgdGhlIGtleSB3YXMgZGVsZXRlZCwgZmFsc2Ugb3RoZXJ3aXNlLlxuICAgICAqL1xuICAgIGRlbGV0ZShrKSB7XG4gICAgICAgIGxldCBkZWxldGVkID0gZmFsc2U7XG4gICAgICAgIGlmICh0aGlzLiNzaXplICE9PSAwKSB7XG4gICAgICAgICAgICBjb25zdCBpbmRleCA9IHRoaXMuI2tleU1hcC5nZXQoayk7XG4gICAgICAgICAgICBpZiAoaW5kZXggIT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgICAgIGRlbGV0ZWQgPSB0cnVlO1xuICAgICAgICAgICAgICAgIGlmICh0aGlzLiNzaXplID09PSAxKSB7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMuY2xlYXIoKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMuI3JlbW92ZUl0ZW1TaXplKGluZGV4KTtcbiAgICAgICAgICAgICAgICAgICAgY29uc3QgdiA9IHRoaXMuI3ZhbExpc3RbaW5kZXhdO1xuICAgICAgICAgICAgICAgICAgICBpZiAodGhpcy4jaXNCYWNrZ3JvdW5kRmV0Y2godikpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHYuX19hYm9ydENvbnRyb2xsZXIuYWJvcnQobmV3IEVycm9yKCdkZWxldGVkJykpO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIGVsc2UgaWYgKHRoaXMuI2hhc0Rpc3Bvc2UgfHwgdGhpcy4jaGFzRGlzcG9zZUFmdGVyKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAodGhpcy4jaGFzRGlzcG9zZSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuI2Rpc3Bvc2U/Lih2LCBrLCAnZGVsZXRlJyk7XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAodGhpcy4jaGFzRGlzcG9zZUFmdGVyKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy4jZGlzcG9zZWQ/LnB1c2goW3YsIGssICdkZWxldGUnXSk7XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgdGhpcy4ja2V5TWFwLmRlbGV0ZShrKTtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy4ja2V5TGlzdFtpbmRleF0gPSB1bmRlZmluZWQ7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMuI3ZhbExpc3RbaW5kZXhdID0gdW5kZWZpbmVkO1xuICAgICAgICAgICAgICAgICAgICBpZiAoaW5kZXggPT09IHRoaXMuI3RhaWwpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuI3RhaWwgPSB0aGlzLiNwcmV2W2luZGV4XTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICBlbHNlIGlmIChpbmRleCA9PT0gdGhpcy4jaGVhZCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy4jaGVhZCA9IHRoaXMuI25leHRbaW5kZXhdO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICAgICAgY29uc3QgcGkgPSB0aGlzLiNwcmV2W2luZGV4XTtcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuI25leHRbcGldID0gdGhpcy4jbmV4dFtpbmRleF07XG4gICAgICAgICAgICAgICAgICAgICAgICBjb25zdCBuaSA9IHRoaXMuI25leHRbaW5kZXhdO1xuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy4jcHJldltuaV0gPSB0aGlzLiNwcmV2W2luZGV4XTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICB0aGlzLiNzaXplLS07XG4gICAgICAgICAgICAgICAgICAgIHRoaXMuI2ZyZWUucHVzaChpbmRleCk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIGlmICh0aGlzLiNoYXNEaXNwb3NlQWZ0ZXIgJiYgdGhpcy4jZGlzcG9zZWQ/Lmxlbmd0aCkge1xuICAgICAgICAgICAgY29uc3QgZHQgPSB0aGlzLiNkaXNwb3NlZDtcbiAgICAgICAgICAgIGxldCB0YXNrO1xuICAgICAgICAgICAgd2hpbGUgKCh0YXNrID0gZHQ/LnNoaWZ0KCkpKSB7XG4gICAgICAgICAgICAgICAgdGhpcy4jZGlzcG9zZUFmdGVyPy4oLi4udGFzayk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIGRlbGV0ZWQ7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIENsZWFyIHRoZSBjYWNoZSBlbnRpcmVseSwgdGhyb3dpbmcgYXdheSBhbGwgdmFsdWVzLlxuICAgICAqL1xuICAgIGNsZWFyKCkge1xuICAgICAgICBmb3IgKGNvbnN0IGluZGV4IG9mIHRoaXMuI3JpbmRleGVzKHsgYWxsb3dTdGFsZTogdHJ1ZSB9KSkge1xuICAgICAgICAgICAgY29uc3QgdiA9IHRoaXMuI3ZhbExpc3RbaW5kZXhdO1xuICAgICAgICAgICAgaWYgKHRoaXMuI2lzQmFja2dyb3VuZEZldGNoKHYpKSB7XG4gICAgICAgICAgICAgICAgdi5fX2Fib3J0Q29udHJvbGxlci5hYm9ydChuZXcgRXJyb3IoJ2RlbGV0ZWQnKSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICBjb25zdCBrID0gdGhpcy4ja2V5TGlzdFtpbmRleF07XG4gICAgICAgICAgICAgICAgaWYgKHRoaXMuI2hhc0Rpc3Bvc2UpIHtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy4jZGlzcG9zZT8uKHYsIGssICdkZWxldGUnKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgaWYgKHRoaXMuI2hhc0Rpc3Bvc2VBZnRlcikge1xuICAgICAgICAgICAgICAgICAgICB0aGlzLiNkaXNwb3NlZD8ucHVzaChbdiwgaywgJ2RlbGV0ZSddKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgdGhpcy4ja2V5TWFwLmNsZWFyKCk7XG4gICAgICAgIHRoaXMuI3ZhbExpc3QuZmlsbCh1bmRlZmluZWQpO1xuICAgICAgICB0aGlzLiNrZXlMaXN0LmZpbGwodW5kZWZpbmVkKTtcbiAgICAgICAgaWYgKHRoaXMuI3R0bHMgJiYgdGhpcy4jc3RhcnRzKSB7XG4gICAgICAgICAgICB0aGlzLiN0dGxzLmZpbGwoMCk7XG4gICAgICAgICAgICB0aGlzLiNzdGFydHMuZmlsbCgwKTtcbiAgICAgICAgfVxuICAgICAgICBpZiAodGhpcy4jc2l6ZXMpIHtcbiAgICAgICAgICAgIHRoaXMuI3NpemVzLmZpbGwoMCk7XG4gICAgICAgIH1cbiAgICAgICAgdGhpcy4jaGVhZCA9IDA7XG4gICAgICAgIHRoaXMuI3RhaWwgPSAwO1xuICAgICAgICB0aGlzLiNmcmVlLmxlbmd0aCA9IDA7XG4gICAgICAgIHRoaXMuI2NhbGN1bGF0ZWRTaXplID0gMDtcbiAgICAgICAgdGhpcy4jc2l6ZSA9IDA7XG4gICAgICAgIGlmICh0aGlzLiNoYXNEaXNwb3NlQWZ0ZXIgJiYgdGhpcy4jZGlzcG9zZWQpIHtcbiAgICAgICAgICAgIGNvbnN0IGR0ID0gdGhpcy4jZGlzcG9zZWQ7XG4gICAgICAgICAgICBsZXQgdGFzaztcbiAgICAgICAgICAgIHdoaWxlICgodGFzayA9IGR0Py5zaGlmdCgpKSkge1xuICAgICAgICAgICAgICAgIHRoaXMuI2Rpc3Bvc2VBZnRlcj8uKC4uLnRhc2spO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfVxufVxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9aW5kZXguanMubWFwIixudWxsLG51bGwsbnVsbCxudWxsLCI8dGVtcGxhdGU+XG4gIDxkaXYgY2xhc3M9XCJmcy1jb250YWluZXJcIj5cbiAgICA8ZGl2IGNsYXNzPVwiYm94XCI+XG4gICAgICA8ZGl2IGNsYXNzPVwiaW5uZXJcIiA6c3R5bGU9XCJjb21wdXRlZElubmVyU3R5bGVcIj5cbiAgICAgICAgPGRpdiBjbGFzcz1cImhlYWRlclwiPlxuICAgICAgICAgIDwhLS0gaGVhZGVyIC0tPlxuICAgICAgICAgIDxzbG90IG5hbWU9XCJoZWFkZXJcIj48L3Nsb3Q+XG4gICAgICAgIDwvZGl2PlxuICAgICAgICA8ZGl2IGNsYXNzPVwiYm9keVwiIDpzdHlsZT1cImNvbXB1dGVkQm9keVN0eWxlXCI+XG4gICAgICAgICAgPCEtLSBib2R5LCDpq5jluqboh6rpgILlupQgLS0+XG4gICAgICAgICAgPHNsb3Q+PC9zbG90PlxuICAgICAgICA8L2Rpdj5cbiAgICAgICAgPGRpdiBjbGFzcz1cImZvb3RlclwiPlxuICAgICAgICAgIDwhLS0gZm9vdGVyIC0tPlxuICAgICAgICAgIDxzbG90IG5hbWU9XCJmb290ZXJcIj48L3Nsb3Q+XG4gICAgICAgIDwvZGl2PlxuICAgICAgPC9kaXY+XG4gICAgPC9kaXY+XG4gICAgPHNsb3QgbmFtZT1cImJveFwiPjwvc2xvdD5cbiAgPC9kaXY+XG48L3RlbXBsYXRlPlxuXG48c2NyaXB0IGxhbmc9XCJ0c1wiPlxuaW1wb3J0IHsgZGVmaW5lQ29tcG9uZW50LCBjb21wdXRlZCB9IGZyb20gXCJ2dWVcIjtcbmltcG9ydCB7IHVzZU1lcmdlIH0gZnJvbSBcIi4uLy4uL3VzZVwiO1xuLyoqXG4gKiBjcnVk55qE5a655Zmo77yM5qC55o2u5aSW6YOo6auY5bqm6Ieq6YCC5bqUXG4gKi9cbmV4cG9ydCBkZWZhdWx0IGRlZmluZUNvbXBvbmVudCh7XG4gIG5hbWU6IFwiRnNDb250YWluZXJcIixcbiAgcHJvcHM6IHtcbiAgICAvKipcbiAgICAgKiDmmK/lkKblm7rlrprpq5jluqZcbiAgICAgKi9cbiAgICBmaXhlZEhlaWdodDoge1xuICAgICAgdHlwZTogQm9vbGVhbixcbiAgICAgIGRlZmF1bHQ6IHRydWVcbiAgICB9LFxuICAgIC8qKlxuICAgICAqIGJvZHnnmoTmoLflvI9cbiAgICAgKi9cbiAgICBib2R5U3R5bGU6IHtcbiAgICAgIHR5cGU6IE9iamVjdCxcbiAgICAgIGRlZmF1bHQ6ICgpID0+IHtcbiAgICAgICAgcmV0dXJuIHt9O1xuICAgICAgfVxuICAgIH0sXG4gICAgLyoqXG4gICAgICogaW5uZXLnmoTmoLflvI9cbiAgICAgKi9cbiAgICBpbm5lclN0eWxlOiB7XG4gICAgICB0eXBlOiBPYmplY3QsXG4gICAgICBkZWZhdWx0OiAoKSA9PiB7XG4gICAgICAgIHJldHVybiB7fTtcbiAgICAgIH1cbiAgICB9XG4gIH0sXG4gIHNldHVwKHByb3BzLCBjdHgpIHtcbiAgICBjb25zdCB7IG1lcmdlIH0gPSB1c2VNZXJnZSgpO1xuICAgIGNvbnN0IGNvbXB1dGVkSW5uZXJTdHlsZSA9IGNvbXB1dGVkKCgpID0+IHtcbiAgICAgIGlmIChwcm9wcy5maXhlZEhlaWdodCA9PT0gZmFsc2UpIHtcbiAgICAgICAgcmV0dXJuIG1lcmdlKHsgcG9zaXRpb246IFwicmVsYXRpdmVcIiB9LCBwcm9wcy5pbm5lclN0eWxlKTtcbiAgICAgIH1cbiAgICAgIHJldHVybiBwcm9wcy5pbm5lclN0eWxlO1xuICAgIH0pO1xuXG4gICAgY29uc3QgY29tcHV0ZWRCb2R5U3R5bGUgPSBjb21wdXRlZCgoKSA9PiB7XG4gICAgICBpZiAocHJvcHMuZml4ZWRIZWlnaHQgPT09IGZhbHNlKSB7XG4gICAgICAgIHJldHVybiBtZXJnZSh7IGZsZXg6IFwidW5zZXRcIiB9LCBwcm9wcy5ib2R5U3R5bGUpO1xuICAgICAgfVxuICAgICAgcmV0dXJuIHByb3BzLmJvZHlTdHlsZTtcbiAgICB9KTtcblxuICAgIHJldHVybiB7XG4gICAgICBjb21wdXRlZElubmVyU3R5bGUsXG4gICAgICBjb21wdXRlZEJvZHlTdHlsZVxuICAgIH07XG4gIH1cbn0pO1xuPC9zY3JpcHQ+XG5cbjxzdHlsZSBsYW5nPVwibGVzc1wiPlxuLmZzLWNvbnRhaW5lciB7XG4gICYuY29tcGFjdCB7XG4gICAgcGFkZGluZzogMDtcbiAgfVxuICBwYWRkaW5nOiAwIDIwcHg7XG4gIGhlaWdodDogMTAwJTtcbiAgZGlzcGxheTogZmxleDtcbiAgZmxleC1kaXJlY3Rpb246IGNvbHVtbjtcbiAgLmJveCB7XG4gICAgaGVpZ2h0OiAxMDAlO1xuICAgIHdpZHRoOiAxMDAlO1xuICAgIHBvc2l0aW9uOiByZWxhdGl2ZTtcbiAgICBkaXNwbGF5OiBmbGV4O1xuICAgIGZsZXgtZGlyZWN0aW9uOiBjb2x1bW47XG4gICAgZmxleDogMTtcbiAgICAuaW5uZXIge1xuICAgICAgcG9zaXRpb246IGFic29sdXRlO1xuICAgICAgd2lkdGg6IDEwMCU7XG4gICAgICB0b3A6IDA7XG4gICAgICBib3R0b206IDA7XG4gICAgICBkaXNwbGF5OiBmbGV4O1xuICAgICAgZmxleC1kaXJlY3Rpb246IGNvbHVtbjtcbiAgICAgIC5oZWFkZXIge1xuICAgICAgICBmbGV4LXNocmluazogMDtcbiAgICAgIH1cbiAgICAgIC5ib2R5IHtcbiAgICAgICAgZmxleDogMTtcbiAgICAgICAgb3ZlcmZsb3cteTogYXV0bztcbiAgICAgIH1cbiAgICAgIC5mb290ZXIge1xuICAgICAgICBmbGV4LXNocmluazogMDtcbiAgICAgIH1cbiAgICB9XG4gIH1cbn1cbjwvc3R5bGU+XG4iLCI8dGVtcGxhdGU+XG4gIDxkaXYgY2xhc3M9XCJmcy1jb250YWluZXJcIj5cbiAgICA8ZGl2IGNsYXNzPVwiYm94XCI+XG4gICAgICA8ZGl2IGNsYXNzPVwiaW5uZXJcIiA6c3R5bGU9XCJjb21wdXRlZElubmVyU3R5bGVcIj5cbiAgICAgICAgPGRpdiBjbGFzcz1cImhlYWRlclwiPlxuICAgICAgICAgIDwhLS0gaGVhZGVyIC0tPlxuICAgICAgICAgIDxzbG90IG5hbWU9XCJoZWFkZXJcIj48L3Nsb3Q+XG4gICAgICAgIDwvZGl2PlxuICAgICAgICA8ZGl2IGNsYXNzPVwiYm9keVwiIDpzdHlsZT1cImNvbXB1dGVkQm9keVN0eWxlXCI+XG4gICAgICAgICAgPCEtLSBib2R5LCDpq5jluqboh6rpgILlupQgLS0+XG4gICAgICAgICAgPHNsb3Q+PC9zbG90PlxuICAgICAgICA8L2Rpdj5cbiAgICAgICAgPGRpdiBjbGFzcz1cImZvb3RlclwiPlxuICAgICAgICAgIDwhLS0gZm9vdGVyIC0tPlxuICAgICAgICAgIDxzbG90IG5hbWU9XCJmb290ZXJcIj48L3Nsb3Q+XG4gICAgICAgIDwvZGl2PlxuICAgICAgPC9kaXY+XG4gICAgPC9kaXY+XG4gICAgPHNsb3QgbmFtZT1cImJveFwiPjwvc2xvdD5cbiAgPC9kaXY+XG48L3RlbXBsYXRlPlxuXG48c2NyaXB0IGxhbmc9XCJ0c1wiPlxuaW1wb3J0IHsgZGVmaW5lQ29tcG9uZW50LCBjb21wdXRlZCB9IGZyb20gXCJ2dWVcIjtcbmltcG9ydCB7IHVzZU1lcmdlIH0gZnJvbSBcIi4uLy4uL3VzZVwiO1xuLyoqXG4gKiBjcnVk55qE5a655Zmo77yM5qC55o2u5aSW6YOo6auY5bqm6Ieq6YCC5bqUXG4gKi9cbmV4cG9ydCBkZWZhdWx0IGRlZmluZUNvbXBvbmVudCh7XG4gIG5hbWU6IFwiRnNDb250YWluZXJcIixcbiAgcHJvcHM6IHtcbiAgICAvKipcbiAgICAgKiDmmK/lkKblm7rlrprpq5jluqZcbiAgICAgKi9cbiAgICBmaXhlZEhlaWdodDoge1xuICAgICAgdHlwZTogQm9vbGVhbixcbiAgICAgIGRlZmF1bHQ6IHRydWVcbiAgICB9LFxuICAgIC8qKlxuICAgICAqIGJvZHnnmoTmoLflvI9cbiAgICAgKi9cbiAgICBib2R5U3R5bGU6IHtcbiAgICAgIHR5cGU6IE9iamVjdCxcbiAgICAgIGRlZmF1bHQ6ICgpID0+IHtcbiAgICAgICAgcmV0dXJuIHt9O1xuICAgICAgfVxuICAgIH0sXG4gICAgLyoqXG4gICAgICogaW5uZXLnmoTmoLflvI9cbiAgICAgKi9cbiAgICBpbm5lclN0eWxlOiB7XG4gICAgICB0eXBlOiBPYmplY3QsXG4gICAgICBkZWZhdWx0OiAoKSA9PiB7XG4gICAgICAgIHJldHVybiB7fTtcbiAgICAgIH1cbiAgICB9XG4gIH0sXG4gIHNldHVwKHByb3BzLCBjdHgpIHtcbiAgICBjb25zdCB7IG1lcmdlIH0gPSB1c2VNZXJnZSgpO1xuICAgIGNvbnN0IGNvbXB1dGVkSW5uZXJTdHlsZSA9IGNvbXB1dGVkKCgpID0+IHtcbiAgICAgIGlmIChwcm9wcy5maXhlZEhlaWdodCA9PT0gZmFsc2UpIHtcbiAgICAgICAgcmV0dXJuIG1lcmdlKHsgcG9zaXRpb246IFwicmVsYXRpdmVcIiB9LCBwcm9wcy5pbm5lclN0eWxlKTtcbiAgICAgIH1cbiAgICAgIHJldHVybiBwcm9wcy5pbm5lclN0eWxlO1xuICAgIH0pO1xuXG4gICAgY29uc3QgY29tcHV0ZWRCb2R5U3R5bGUgPSBjb21wdXRlZCgoKSA9PiB7XG4gICAgICBpZiAocHJvcHMuZml4ZWRIZWlnaHQgPT09IGZhbHNlKSB7XG4gICAgICAgIHJldHVybiBtZXJnZSh7IGZsZXg6IFwidW5zZXRcIiB9LCBwcm9wcy5ib2R5U3R5bGUpO1xuICAgICAgfVxuICAgICAgcmV0dXJuIHByb3BzLmJvZHlTdHlsZTtcbiAgICB9KTtcblxuICAgIHJldHVybiB7XG4gICAgICBjb21wdXRlZElubmVyU3R5bGUsXG4gICAgICBjb21wdXRlZEJvZHlTdHlsZVxuICAgIH07XG4gIH1cbn0pO1xuPC9zY3JpcHQ+XG5cbjxzdHlsZSBsYW5nPVwibGVzc1wiPlxuLmZzLWNvbnRhaW5lciB7XG4gICYuY29tcGFjdCB7XG4gICAgcGFkZGluZzogMDtcbiAgfVxuICBwYWRkaW5nOiAwIDIwcHg7XG4gIGhlaWdodDogMTAwJTtcbiAgZGlzcGxheTogZmxleDtcbiAgZmxleC1kaXJlY3Rpb246IGNvbHVtbjtcbiAgLmJveCB7XG4gICAgaGVpZ2h0OiAxMDAlO1xuICAgIHdpZHRoOiAxMDAlO1xuICAgIHBvc2l0aW9uOiByZWxhdGl2ZTtcbiAgICBkaXNwbGF5OiBmbGV4O1xuICAgIGZsZXgtZGlyZWN0aW9uOiBjb2x1bW47XG4gICAgZmxleDogMTtcbiAgICAuaW5uZXIge1xuICAgICAgcG9zaXRpb246IGFic29sdXRlO1xuICAgICAgd2lkdGg6IDEwMCU7XG4gICAgICB0b3A6IDA7XG4gICAgICBib3R0b206IDA7XG4gICAgICBkaXNwbGF5OiBmbGV4O1xuICAgICAgZmxleC1kaXJlY3Rpb246IGNvbHVtbjtcbiAgICAgIC5oZWFkZXIge1xuICAgICAgICBmbGV4LXNocmluazogMDtcbiAgICAgIH1cbiAgICAgIC5ib2R5IHtcbiAgICAgICAgZmxleDogMTtcbiAgICAgICAgb3ZlcmZsb3cteTogYXV0bztcbiAgICAgIH1cbiAgICAgIC5mb290ZXIge1xuICAgICAgICBmbGV4LXNocmluazogMDtcbiAgICAgIH1cbiAgICB9XG4gIH1cbn1cbjwvc3R5bGU+XG4iLCI8dGVtcGxhdGU+XG4gIDxmcy1jb250YWluZXIgY2xhc3M9XCJmcy1sYXlvdXQtZGVmYXVsdFwiPlxuICAgIDx0ZW1wbGF0ZSAjaGVhZGVyPlxuICAgICAgPGRpdiBjbGFzcz1cImZzLWNydWQtaGVhZGVyXCI+XG4gICAgICAgIDxkaXYgY2xhc3M9XCJmcy1oZWFkZXItdG9wXCI+XG4gICAgICAgICAgPHNsb3QgbmFtZT1cImhlYWRlci10b3BcIj48L3Nsb3Q+XG4gICAgICAgIDwvZGl2PlxuICAgICAgICA8c2xvdCBuYW1lPVwic2VhcmNoXCI+PC9zbG90PlxuICAgICAgICA8ZGl2IGNsYXNzPVwiZnMtaGVhZGVyLW1pZGRsZVwiPlxuICAgICAgICAgIDxzbG90IG5hbWU9XCJoZWFkZXItbWlkZGxlXCI+PC9zbG90PlxuICAgICAgICA8L2Rpdj5cbiAgICAgICAgPHNsb3QgbmFtZT1cImFjdGlvbmJhclwiPjwvc2xvdD5cbiAgICAgICAgPHNsb3QgbmFtZT1cInRvb2xiYXJcIj48L3Nsb3Q+XG4gICAgICAgIDxkaXYgY2xhc3M9XCJmcy1oZWFkZXItYm90dG9tXCI+XG4gICAgICAgICAgPHNsb3QgbmFtZT1cImhlYWRlci1ib3R0b21cIj48L3Nsb3Q+XG4gICAgICAgIDwvZGl2PlxuICAgICAgICA8c2xvdCBuYW1lPVwidGFic1wiPjwvc2xvdD5cbiAgICAgIDwvZGl2PlxuICAgIDwvdGVtcGxhdGU+XG5cbiAgICA8IS0tIOm7mOiupOaPkuanvSAtLT5cbiAgICA8c2xvdD48L3Nsb3Q+XG4gICAgPCEtLSB0YWJsZSAtLT5cbiAgICA8c2xvdCBuYW1lPVwidGFibGVcIj48L3Nsb3Q+XG5cbiAgICA8c2xvdCBuYW1lPVwiZm9ybVwiPiA8L3Nsb3Q+XG5cbiAgICA8dGVtcGxhdGUgI2Zvb3Rlcj5cbiAgICAgIDxkaXYgY2xhc3M9XCJmcy1jcnVkLWZvb3RlclwiPlxuICAgICAgICA8c2xvdCBuYW1lPVwiZm9vdGVyLXRvcFwiPjwvc2xvdD5cbiAgICAgICAgPHNsb3QgbmFtZT1cInBhZ2luYXRpb25cIj48L3Nsb3Q+XG4gICAgICAgIDxzbG90IG5hbWU9XCJmb290ZXItYm90dG9tXCI+PC9zbG90PlxuICAgICAgPC9kaXY+XG4gICAgPC90ZW1wbGF0ZT5cbiAgPC9mcy1jb250YWluZXI+XG48L3RlbXBsYXRlPlxuXG48c2NyaXB0IGxhbmc9XCJ0c1wiPlxuaW1wb3J0IHsgZGVmaW5lQ29tcG9uZW50IH0gZnJvbSBcInZ1ZVwiO1xuLyoqXG4gKiDpu5jorqTluIPlsYBcbiAqL1xuZXhwb3J0IGRlZmF1bHQgZGVmaW5lQ29tcG9uZW50KHtcbiAgbmFtZTogXCJGc0xheW91dERlZmF1bHRcIlxufSk7XG48L3NjcmlwdD5cblxuPHN0eWxlIGxhbmc9XCJsZXNzXCI+XG4uZnMtbGF5b3V0LWRlZmF1bHQge1xuICAuZnMtdGFicy1maWx0ZXIge1xuICAgIG1hcmdpbi10b3A6IDEwcHg7XG4gIH1cbn1cbjwvc3R5bGU+XG4iLCI8dGVtcGxhdGU+XG4gIDxmcy1jb250YWluZXIgY2xhc3M9XCJmcy1sYXlvdXQtZGVmYXVsdFwiPlxuICAgIDx0ZW1wbGF0ZSAjaGVhZGVyPlxuICAgICAgPGRpdiBjbGFzcz1cImZzLWNydWQtaGVhZGVyXCI+XG4gICAgICAgIDxkaXYgY2xhc3M9XCJmcy1oZWFkZXItdG9wXCI+XG4gICAgICAgICAgPHNsb3QgbmFtZT1cImhlYWRlci10b3BcIj48L3Nsb3Q+XG4gICAgICAgIDwvZGl2PlxuICAgICAgICA8c2xvdCBuYW1lPVwic2VhcmNoXCI+PC9zbG90PlxuICAgICAgICA8ZGl2IGNsYXNzPVwiZnMtaGVhZGVyLW1pZGRsZVwiPlxuICAgICAgICAgIDxzbG90IG5hbWU9XCJoZWFkZXItbWlkZGxlXCI+PC9zbG90PlxuICAgICAgICA8L2Rpdj5cbiAgICAgICAgPHNsb3QgbmFtZT1cImFjdGlvbmJhclwiPjwvc2xvdD5cbiAgICAgICAgPHNsb3QgbmFtZT1cInRvb2xiYXJcIj48L3Nsb3Q+XG4gICAgICAgIDxkaXYgY2xhc3M9XCJmcy1oZWFkZXItYm90dG9tXCI+XG4gICAgICAgICAgPHNsb3QgbmFtZT1cImhlYWRlci1ib3R0b21cIj48L3Nsb3Q+XG4gICAgICAgIDwvZGl2PlxuICAgICAgICA8c2xvdCBuYW1lPVwidGFic1wiPjwvc2xvdD5cbiAgICAgIDwvZGl2PlxuICAgIDwvdGVtcGxhdGU+XG5cbiAgICA8IS0tIOm7mOiupOaPkuanvSAtLT5cbiAgICA8c2xvdD48L3Nsb3Q+XG4gICAgPCEtLSB0YWJsZSAtLT5cbiAgICA8c2xvdCBuYW1lPVwidGFibGVcIj48L3Nsb3Q+XG5cbiAgICA8c2xvdCBuYW1lPVwiZm9ybVwiPiA8L3Nsb3Q+XG5cbiAgICA8dGVtcGxhdGUgI2Zvb3Rlcj5cbiAgICAgIDxkaXYgY2xhc3M9XCJmcy1jcnVkLWZvb3RlclwiPlxuICAgICAgICA8c2xvdCBuYW1lPVwiZm9vdGVyLXRvcFwiPjwvc2xvdD5cbiAgICAgICAgPHNsb3QgbmFtZT1cInBhZ2luYXRpb25cIj48L3Nsb3Q+XG4gICAgICAgIDxzbG90IG5hbWU9XCJmb290ZXItYm90dG9tXCI+PC9zbG90PlxuICAgICAgPC9kaXY+XG4gICAgPC90ZW1wbGF0ZT5cbiAgPC9mcy1jb250YWluZXI+XG48L3RlbXBsYXRlPlxuXG48c2NyaXB0IGxhbmc9XCJ0c1wiPlxuaW1wb3J0IHsgZGVmaW5lQ29tcG9uZW50IH0gZnJvbSBcInZ1ZVwiO1xuLyoqXG4gKiDpu5jorqTluIPlsYBcbiAqL1xuZXhwb3J0IGRlZmF1bHQgZGVmaW5lQ29tcG9uZW50KHtcbiAgbmFtZTogXCJGc0xheW91dERlZmF1bHRcIlxufSk7XG48L3NjcmlwdD5cblxuPHN0eWxlIGxhbmc9XCJsZXNzXCI+XG4uZnMtbGF5b3V0LWRlZmF1bHQge1xuICAuZnMtdGFicy1maWx0ZXIge1xuICAgIG1hcmdpbi10b3A6IDEwcHg7XG4gIH1cbn1cbjwvc3R5bGU+XG4iLCI8dGVtcGxhdGU+XG4gIDxmcy1jb250YWluZXIgY2xhc3M9XCJmcy1sYXlvdXQtY2FyZFwiPlxuICAgIDx0ZW1wbGF0ZSB2LWlmPVwic2VhcmNoU2hvd1wiICNoZWFkZXI+XG4gICAgICA8ZGl2IGNsYXNzPVwiZnMtaGVhZGVyLXRvcFwiPlxuICAgICAgICA8c2xvdCBuYW1lPVwiaGVhZGVyLXRvcFwiPjwvc2xvdD5cbiAgICAgIDwvZGl2PlxuICAgICAgPGNvbXBvbmVudCA6aXM9XCJjYXJkQ29tcG9uZW50TmFtZVwiPlxuICAgICAgICA8c2xvdCBuYW1lPVwic2VhcmNoXCI+PC9zbG90PlxuICAgICAgPC9jb21wb25lbnQ+XG4gICAgICA8ZGl2IGNsYXNzPVwiZnMtaGVhZGVyLWJvdHRvbVwiPlxuICAgICAgICA8c2xvdCBuYW1lPVwiaGVhZGVyLWJvdHRvbVwiPjwvc2xvdD5cbiAgICAgIDwvZGl2PlxuICAgIDwvdGVtcGxhdGU+XG5cbiAgICA8ZnMtY29udGFpbmVyPlxuICAgICAgPHRlbXBsYXRlICNoZWFkZXI+XG4gICAgICAgIDxzbG90IG5hbWU9XCJ0YWJzXCI+PC9zbG90PlxuICAgICAgPC90ZW1wbGF0ZT5cbiAgICAgIDxjb21wb25lbnQgOmlzPVwiY2FyZENvbXBvbmVudE5hbWVcIiBjbGFzcz1cImZzLWxheW91dC1jYXJkLWJvZHlcIj5cbiAgICAgICAgPHRlbXBsYXRlICN0aXRsZT5cbiAgICAgICAgICA8ZGl2IGNsYXNzPVwidG9wLWJhclwiPlxuICAgICAgICAgICAgPHNsb3QgbmFtZT1cImFjdGlvbmJhclwiPjwvc2xvdD5cbiAgICAgICAgICAgIDxzbG90IG5hbWU9XCJ0b29sYmFyXCI+PC9zbG90PlxuICAgICAgICAgIDwvZGl2PlxuICAgICAgICA8L3RlbXBsYXRlPlxuICAgICAgICA8dGVtcGxhdGUgI2hlYWRlcj5cbiAgICAgICAgICA8ZGl2IGNsYXNzPVwidG9wLWJhclwiPlxuICAgICAgICAgICAgPHNsb3QgbmFtZT1cImFjdGlvbmJhclwiPjwvc2xvdD5cbiAgICAgICAgICAgIDxzbG90IG5hbWU9XCJ0b29sYmFyXCI+PC9zbG90PlxuICAgICAgICAgIDwvZGl2PlxuICAgICAgICA8L3RlbXBsYXRlPlxuICAgICAgICA8ZnMtY29udGFpbmVyPlxuICAgICAgICAgIDwhLS0g6buY6K6k5o+S5qe9IC0tPlxuICAgICAgICAgIDxzbG90Pjwvc2xvdD5cbiAgICAgICAgICA8IS0tIHRhYmxlIC0tPlxuICAgICAgICAgIDxzbG90IG5hbWU9XCJ0YWJsZVwiPjwvc2xvdD5cbiAgICAgICAgICA8c2xvdCBuYW1lPVwiZm9ybVwiPjwvc2xvdD5cbiAgICAgICAgICA8dGVtcGxhdGUgI2Zvb3Rlcj5cbiAgICAgICAgICAgIDxkaXYgY2xhc3M9XCJmcy1jcnVkLWZvb3RlclwiPlxuICAgICAgICAgICAgICA8c2xvdCBuYW1lPVwiZm9vdGVyLXRvcFwiPjwvc2xvdD5cbiAgICAgICAgICAgICAgPHNsb3QgbmFtZT1cInBhZ2luYXRpb25cIj48L3Nsb3Q+XG4gICAgICAgICAgICAgIDxzbG90IG5hbWU9XCJmb290ZXItYm90dG9tXCI+PC9zbG90PlxuICAgICAgICAgICAgPC9kaXY+XG4gICAgICAgICAgPC90ZW1wbGF0ZT5cbiAgICAgICAgPC9mcy1jb250YWluZXI+XG4gICAgICA8L2NvbXBvbmVudD5cbiAgICA8L2ZzLWNvbnRhaW5lcj5cbiAgPC9mcy1jb250YWluZXI+XG48L3RlbXBsYXRlPlxuXG48c2NyaXB0IGxhbmc9XCJ0c1wiPlxuaW1wb3J0IHsgY29tcHV0ZWQsIGRlZmluZUNvbXBvbmVudCwgaW5qZWN0LCByZWYgfSBmcm9tIFwidnVlXCI7XG5pbXBvcnQgeyB1c2VVaSB9IGZyb20gXCIuLi8uLi91c2UvdXNlLXVpXCI7XG4vKipcbiAqIGNhcmTluIPlsYBcbiAqL1xuZXhwb3J0IGRlZmF1bHQgZGVmaW5lQ29tcG9uZW50KHtcbiAgbmFtZTogXCJGc0xheW91dENhcmRcIixcbiAgc2V0dXAoKSB7XG4gICAgY29uc3QgZ2V0Q3J1ZEJpbmRpbmcgPSBpbmplY3QoXCJnZXQ6Y3J1ZEJpbmRpbmdcIik7XG4gICAgY29uc3Qgc2VhcmNoU2hvdyA9IGNvbXB1dGVkKCgpID0+IHtcbiAgICAgIGlmIChnZXRDcnVkQmluZGluZyA9PSBudWxsKSB7XG4gICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgfVxuICAgICAgLy8gQHRzLWlnbm9yZVxuICAgICAgcmV0dXJuIGdldENydWRCaW5kaW5nKCk/LnNlYXJjaD8uc2hvdztcbiAgICB9KTtcblxuICAgIGNvbnN0IHsgdWkgfSA9IHVzZVVpKCk7XG5cbiAgICBjb25zdCBjYXJkQ29tcG9uZW50TmFtZSA9IHJlZih1aS5jYXJkLm5hbWUpO1xuICAgIHJldHVybiB7XG4gICAgICBzZWFyY2hTaG93LFxuICAgICAgY2FyZENvbXBvbmVudE5hbWVcbiAgICB9O1xuICB9XG59KTtcbjwvc2NyaXB0PlxuXG48c3R5bGUgbGFuZz1cImxlc3NcIj5cbi5mcy1sYXlvdXQtY2FyZCB7XG4gICYgPiAuYm94ID4gLmlubmVyID4gLmhlYWRlciB7XG4gICAgbWFyZ2luOiAxMHB4IDEwcHggNXB4IDEwcHg7XG4gIH1cbiAgJiA+IC5ib3ggPiAuaW5uZXIgPiAuYm9keSB7XG4gICAgbWFyZ2luOiA1cHggMTBweCAxMHB4IDEwcHg7XG4gIH1cbiAgLnRvcC1iYXIge1xuICAgIGRpc3BsYXk6IGZsZXg7XG4gICAganVzdGlmeS1jb250ZW50OiBzcGFjZS1iZXR3ZWVuO1xuICB9XG4gIC5mcy1jb250YWluZXIge1xuICAgIHBhZGRpbmc6IDA7XG4gICAgLmJveCB7XG4gICAgICAuaW5uZXIge1xuICAgICAgICAuaGVhZGVyIHtcbiAgICAgICAgICAuYW50LWNhcmQtYm9keSB7XG4gICAgICAgICAgICBwYWRkaW5nOiAxNHB4O1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cbiAgfVxuICAuZnMtbGF5b3V0LWNhcmQtYm9keSB7XG4gICAgaGVpZ2h0OiAxMDAlO1xuICAgIGRpc3BsYXk6IGZsZXg7XG4gICAgZmxleC1kaXJlY3Rpb246IGNvbHVtbjtcblxuICAgIC5hbnQtY2FyZC1oZWFkIHtcbiAgICAgIG1pbi1oZWlnaHQ6IDA7XG4gICAgICBwYWRkaW5nOiAwcHg7XG4gICAgICAuYW50LWNhcmQtaGVhZC10aXRsZSB7XG4gICAgICAgIHBhZGRpbmc6IDA7XG4gICAgICB9XG4gICAgfVxuXG4gICAgLmVsLWNhcmRfX2hlYWRlciB7XG4gICAgICBwYWRkaW5nOiAwO1xuICAgIH1cblxuICAgIC5uLWNhcmQtaGVhZGVyIHtcbiAgICAgIHBhZGRpbmc6IDBweDtcbiAgICAgIGJvcmRlci1ib3R0b206IDFweCBzb2xpZCAjZWVlO1xuICAgIH1cbiAgICAubi1jYXJkX19jb250ZW50IHtcbiAgICAgIHBhZGRpbmc6IDEwcHg7XG4gICAgfVxuXG4gICAgLmZzLWNydWQtYWN0aW9uYmFyIHtcbiAgICAgIG1hcmdpbjogMTBweDtcbiAgICAgIGRpc3BsYXk6IGZsZXg7XG4gICAgICBhbGlnbi1pdGVtczogY2VudGVyO1xuICAgIH1cbiAgICAuZnMtY3J1ZC10b29sYmFyIHtcbiAgICAgIG1hcmdpbjogMTBweDtcbiAgICAgIGRpc3BsYXk6IGZsZXg7XG4gICAgICBhbGlnbi1pdGVtczogY2VudGVyO1xuICAgIH1cblxuICAgIC5hbnQtY2FyZC1ib2R5IHtcbiAgICAgIGZsZXg6IDE7XG4gICAgICBwYWRkaW5nOiAxMHB4O1xuICAgIH1cbiAgICAuZWwtY2FyZF9fYm9keSB7XG4gICAgICBmbGV4OiAxO1xuICAgICAgcGFkZGluZzogMTBweDtcbiAgICB9XG4gIH1cblxuICAuZnMtdGFicy1maWx0ZXIge1xuICAgIG1hcmdpbi1ib3R0b206IC0xcHg7XG4gICAgLm4tdGFicyAubi10YWJzLW5hdi5uLXRhYnMtbmF2LS1jYXJkLXR5cGUgLm4tdGFicy10YWIge1xuICAgICAgJi5uLXRhYnMtdGFiLS1hY3RpdmUge1xuICAgICAgICBiYWNrZ3JvdW5kLWNvbG9yOiAjZmZmO1xuICAgICAgfVxuICAgICAgYmFja2dyb3VuZC1jb2xvcjogI2ZmZmZmZjYwO1xuICAgIH1cblxuICAgIC5lbC10YWJzLS1jYXJkID4gLmVsLXRhYnNfX2hlYWRlciAuZWwtdGFic19faXRlbSB7XG4gICAgICAmLmlzLWFjdGl2ZSB7XG4gICAgICAgIGJhY2tncm91bmQtY29sb3I6ICNmZmY7XG4gICAgICB9XG4gICAgICBiYWNrZ3JvdW5kLWNvbG9yOiAjZmZmZmZmODA7XG4gICAgfVxuICB9XG59XG48L3N0eWxlPlxuIiwiPHRlbXBsYXRlPlxuICA8ZnMtY29udGFpbmVyIGNsYXNzPVwiZnMtbGF5b3V0LWNhcmRcIj5cbiAgICA8dGVtcGxhdGUgdi1pZj1cInNlYXJjaFNob3dcIiAjaGVhZGVyPlxuICAgICAgPGRpdiBjbGFzcz1cImZzLWhlYWRlci10b3BcIj5cbiAgICAgICAgPHNsb3QgbmFtZT1cImhlYWRlci10b3BcIj48L3Nsb3Q+XG4gICAgICA8L2Rpdj5cbiAgICAgIDxjb21wb25lbnQgOmlzPVwiY2FyZENvbXBvbmVudE5hbWVcIj5cbiAgICAgICAgPHNsb3QgbmFtZT1cInNlYXJjaFwiPjwvc2xvdD5cbiAgICAgIDwvY29tcG9uZW50PlxuICAgICAgPGRpdiBjbGFzcz1cImZzLWhlYWRlci1ib3R0b21cIj5cbiAgICAgICAgPHNsb3QgbmFtZT1cImhlYWRlci1ib3R0b21cIj48L3Nsb3Q+XG4gICAgICA8L2Rpdj5cbiAgICA8L3RlbXBsYXRlPlxuXG4gICAgPGZzLWNvbnRhaW5lcj5cbiAgICAgIDx0ZW1wbGF0ZSAjaGVhZGVyPlxuICAgICAgICA8c2xvdCBuYW1lPVwidGFic1wiPjwvc2xvdD5cbiAgICAgIDwvdGVtcGxhdGU+XG4gICAgICA8Y29tcG9uZW50IDppcz1cImNhcmRDb21wb25lbnROYW1lXCIgY2xhc3M9XCJmcy1sYXlvdXQtY2FyZC1ib2R5XCI+XG4gICAgICAgIDx0ZW1wbGF0ZSAjdGl0bGU+XG4gICAgICAgICAgPGRpdiBjbGFzcz1cInRvcC1iYXJcIj5cbiAgICAgICAgICAgIDxzbG90IG5hbWU9XCJhY3Rpb25iYXJcIj48L3Nsb3Q+XG4gICAgICAgICAgICA8c2xvdCBuYW1lPVwidG9vbGJhclwiPjwvc2xvdD5cbiAgICAgICAgICA8L2Rpdj5cbiAgICAgICAgPC90ZW1wbGF0ZT5cbiAgICAgICAgPHRlbXBsYXRlICNoZWFkZXI+XG4gICAgICAgICAgPGRpdiBjbGFzcz1cInRvcC1iYXJcIj5cbiAgICAgICAgICAgIDxzbG90IG5hbWU9XCJhY3Rpb25iYXJcIj48L3Nsb3Q+XG4gICAgICAgICAgICA8c2xvdCBuYW1lPVwidG9vbGJhclwiPjwvc2xvdD5cbiAgICAgICAgICA8L2Rpdj5cbiAgICAgICAgPC90ZW1wbGF0ZT5cbiAgICAgICAgPGZzLWNvbnRhaW5lcj5cbiAgICAgICAgICA8IS0tIOm7mOiupOaPkuanvSAtLT5cbiAgICAgICAgICA8c2xvdD48L3Nsb3Q+XG4gICAgICAgICAgPCEtLSB0YWJsZSAtLT5cbiAgICAgICAgICA8c2xvdCBuYW1lPVwidGFibGVcIj48L3Nsb3Q+XG4gICAgICAgICAgPHNsb3QgbmFtZT1cImZvcm1cIj48L3Nsb3Q+XG4gICAgICAgICAgPHRlbXBsYXRlICNmb290ZXI+XG4gICAgICAgICAgICA8ZGl2IGNsYXNzPVwiZnMtY3J1ZC1mb290ZXJcIj5cbiAgICAgICAgICAgICAgPHNsb3QgbmFtZT1cImZvb3Rlci10b3BcIj48L3Nsb3Q+XG4gICAgICAgICAgICAgIDxzbG90IG5hbWU9XCJwYWdpbmF0aW9uXCI+PC9zbG90PlxuICAgICAgICAgICAgICA8c2xvdCBuYW1lPVwiZm9vdGVyLWJvdHRvbVwiPjwvc2xvdD5cbiAgICAgICAgICAgIDwvZGl2PlxuICAgICAgICAgIDwvdGVtcGxhdGU+XG4gICAgICAgIDwvZnMtY29udGFpbmVyPlxuICAgICAgPC9jb21wb25lbnQ+XG4gICAgPC9mcy1jb250YWluZXI+XG4gIDwvZnMtY29udGFpbmVyPlxuPC90ZW1wbGF0ZT5cblxuPHNjcmlwdCBsYW5nPVwidHNcIj5cbmltcG9ydCB7IGNvbXB1dGVkLCBkZWZpbmVDb21wb25lbnQsIGluamVjdCwgcmVmIH0gZnJvbSBcInZ1ZVwiO1xuaW1wb3J0IHsgdXNlVWkgfSBmcm9tIFwiLi4vLi4vdXNlL3VzZS11aVwiO1xuLyoqXG4gKiBjYXJk5biD5bGAXG4gKi9cbmV4cG9ydCBkZWZhdWx0IGRlZmluZUNvbXBvbmVudCh7XG4gIG5hbWU6IFwiRnNMYXlvdXRDYXJkXCIsXG4gIHNldHVwKCkge1xuICAgIGNvbnN0IGdldENydWRCaW5kaW5nID0gaW5qZWN0KFwiZ2V0OmNydWRCaW5kaW5nXCIpO1xuICAgIGNvbnN0IHNlYXJjaFNob3cgPSBjb21wdXRlZCgoKSA9PiB7XG4gICAgICBpZiAoZ2V0Q3J1ZEJpbmRpbmcgPT0gbnVsbCkge1xuICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgIH1cbiAgICAgIC8vIEB0cy1pZ25vcmVcbiAgICAgIHJldHVybiBnZXRDcnVkQmluZGluZygpPy5zZWFyY2g/LnNob3c7XG4gICAgfSk7XG5cbiAgICBjb25zdCB7IHVpIH0gPSB1c2VVaSgpO1xuXG4gICAgY29uc3QgY2FyZENvbXBvbmVudE5hbWUgPSByZWYodWkuY2FyZC5uYW1lKTtcbiAgICByZXR1cm4ge1xuICAgICAgc2VhcmNoU2hvdyxcbiAgICAgIGNhcmRDb21wb25lbnROYW1lXG4gICAgfTtcbiAgfVxufSk7XG48L3NjcmlwdD5cblxuPHN0eWxlIGxhbmc9XCJsZXNzXCI+XG4uZnMtbGF5b3V0LWNhcmQge1xuICAmID4gLmJveCA+IC5pbm5lciA+IC5oZWFkZXIge1xuICAgIG1hcmdpbjogMTBweCAxMHB4IDVweCAxMHB4O1xuICB9XG4gICYgPiAuYm94ID4gLmlubmVyID4gLmJvZHkge1xuICAgIG1hcmdpbjogNXB4IDEwcHggMTBweCAxMHB4O1xuICB9XG4gIC50b3AtYmFyIHtcbiAgICBkaXNwbGF5OiBmbGV4O1xuICAgIGp1c3RpZnktY29udGVudDogc3BhY2UtYmV0d2VlbjtcbiAgfVxuICAuZnMtY29udGFpbmVyIHtcbiAgICBwYWRkaW5nOiAwO1xuICAgIC5ib3gge1xuICAgICAgLmlubmVyIHtcbiAgICAgICAgLmhlYWRlciB7XG4gICAgICAgICAgLmFudC1jYXJkLWJvZHkge1xuICAgICAgICAgICAgcGFkZGluZzogMTRweDtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG4gIH1cbiAgLmZzLWxheW91dC1jYXJkLWJvZHkge1xuICAgIGhlaWdodDogMTAwJTtcbiAgICBkaXNwbGF5OiBmbGV4O1xuICAgIGZsZXgtZGlyZWN0aW9uOiBjb2x1bW47XG5cbiAgICAuYW50LWNhcmQtaGVhZCB7XG4gICAgICBtaW4taGVpZ2h0OiAwO1xuICAgICAgcGFkZGluZzogMHB4O1xuICAgICAgLmFudC1jYXJkLWhlYWQtdGl0bGUge1xuICAgICAgICBwYWRkaW5nOiAwO1xuICAgICAgfVxuICAgIH1cblxuICAgIC5lbC1jYXJkX19oZWFkZXIge1xuICAgICAgcGFkZGluZzogMDtcbiAgICB9XG5cbiAgICAubi1jYXJkLWhlYWRlciB7XG4gICAgICBwYWRkaW5nOiAwcHg7XG4gICAgICBib3JkZXItYm90dG9tOiAxcHggc29saWQgI2VlZTtcbiAgICB9XG4gICAgLm4tY2FyZF9fY29udGVudCB7XG4gICAgICBwYWRkaW5nOiAxMHB4O1xuICAgIH1cblxuICAgIC5mcy1jcnVkLWFjdGlvbmJhciB7XG4gICAgICBtYXJnaW46IDEwcHg7XG4gICAgICBkaXNwbGF5OiBmbGV4O1xuICAgICAgYWxpZ24taXRlbXM6IGNlbnRlcjtcbiAgICB9XG4gICAgLmZzLWNydWQtdG9vbGJhciB7XG4gICAgICBtYXJnaW46IDEwcHg7XG4gICAgICBkaXNwbGF5OiBmbGV4O1xuICAgICAgYWxpZ24taXRlbXM6IGNlbnRlcjtcbiAgICB9XG5cbiAgICAuYW50LWNhcmQtYm9keSB7XG4gICAgICBmbGV4OiAxO1xuICAgICAgcGFkZGluZzogMTBweDtcbiAgICB9XG4gICAgLmVsLWNhcmRfX2JvZHkge1xuICAgICAgZmxleDogMTtcbiAgICAgIHBhZGRpbmc6IDEwcHg7XG4gICAgfVxuICB9XG5cbiAgLmZzLXRhYnMtZmlsdGVyIHtcbiAgICBtYXJnaW4tYm90dG9tOiAtMXB4O1xuICAgIC5uLXRhYnMgLm4tdGFicy1uYXYubi10YWJzLW5hdi0tY2FyZC10eXBlIC5uLXRhYnMtdGFiIHtcbiAgICAgICYubi10YWJzLXRhYi0tYWN0aXZlIHtcbiAgICAgICAgYmFja2dyb3VuZC1jb2xvcjogI2ZmZjtcbiAgICAgIH1cbiAgICAgIGJhY2tncm91bmQtY29sb3I6ICNmZmZmZmY2MDtcbiAgICB9XG5cbiAgICAuZWwtdGFicy0tY2FyZCA+IC5lbC10YWJzX19oZWFkZXIgLmVsLXRhYnNfX2l0ZW0ge1xuICAgICAgJi5pcy1hY3RpdmUge1xuICAgICAgICBiYWNrZ3JvdW5kLWNvbG9yOiAjZmZmO1xuICAgICAgfVxuICAgICAgYmFja2dyb3VuZC1jb2xvcjogI2ZmZmZmZjgwO1xuICAgIH1cbiAgfVxufVxuPC9zdHlsZT5cbiIsbnVsbCxudWxsLCI8dGVtcGxhdGU+XG4gIDxzcGFuIGNsYXNzPVwiZnMtaWNvbmlmeVwiIDpjbGFzcz1cInsgJ2ZzLWljb25pZnktc3Bpbic6IHNwaW4gfVwiPlxuICAgIDxJY29uIHJlZj1cImljb25pZnlSZWZcIiA6aWNvbj1cImljb25cIiAvPlxuICA8L3NwYW4+XG48L3RlbXBsYXRlPlxuPHNjcmlwdCBsYW5nPVwidHNcIj5cbmltcG9ydCB7IGRlZmluZUNvbXBvbmVudCwgbmV4dFRpY2ssIG9uTW91bnRlZCwgcmVmLCB1bnJlZiwgd2F0Y2ggfSBmcm9tIFwidnVlXCI7XG5pbXBvcnQgeyBJY29uIH0gZnJvbSBcIkBpY29uaWZ5L3Z1ZVwiO1xuLyoqXG4gKiBpY29uaWZ5IOaMiemcgOWKoOi9veWbvuagh+e7hOS7tlxuICogaHR0cHM6Ly9pY29uaWZ5LmRlc2lnbi9pY29uLXNldHMvaW9uL1xuICovXG5leHBvcnQgZGVmYXVsdCBkZWZpbmVDb21wb25lbnQoe1xuICBuYW1lOiBcIkZzSWNvbmlmeVwiLFxuICBjb21wb25lbnRzOiB7IEljb24gfSxcbiAgcHJvcHM6IHtcbiAgICAvKipcbiAgICAgKiDlm77moIflkI3np7BcbiAgICAgKi9cbiAgICBpY29uOiB7XG4gICAgICB0eXBlOiBTdHJpbmdcbiAgICB9LFxuICAgIC8qKlxuICAgICAqIOaXi+i9rFxuICAgICAqL1xuICAgIHNwaW46IHtcbiAgICAgIHR5cGU6IEJvb2xlYW4sXG4gICAgICBkZWZhdWx0OiBmYWxzZVxuICAgIH1cbiAgfSxcbiAgc2V0dXAocHJvcHMsIGN0eCkge1xuICAgIGNvbnN0IGljb25pZnlSZWYgPSByZWYobnVsbCk7XG4gICAgcmV0dXJuIHsgaWNvbmlmeVJlZiB9O1xuICB9XG59KTtcbjwvc2NyaXB0PlxuPHN0eWxlIGxhbmc9XCJsZXNzXCI+XG4uZnMtaWNvbmlmeSB7XG4gIC8vZGlzcGxheTogaW5saW5lLWZsZXggIWltcG9ydGFudDtcbiAgZGlzcGxheTogaW5saW5lLWZsZXg7XG4gIGFsaWduLWl0ZW1zOiBjZW50ZXI7XG4gICYtc3BpbiB7XG4gICAgc3ZnIHtcbiAgICAgIGFuaW1hdGlvbjogZnNMb2FkaW5nQ2lyY2xlIDFzIGluZmluaXRlIGxpbmVhcjtcbiAgICB9XG4gIH1cblxuICAmLmZzLWljb24ge1xuICAgIGRpc3BsYXk6IGlubGluZS1mbGV4O1xuICB9XG59XG5cbkBrZXlmcmFtZXMgZnNMb2FkaW5nQ2lyY2xlIHtcbiAgZnJvbSB7XG4gICAgdHJhbnNmb3JtOiByb3RhdGUoMGRlZyk7XG4gIH1cbiAgdG8ge1xuICAgIHRyYW5zZm9ybTogcm90YXRlKDM2MGRlZyk7XG4gIH1cbn1cblxuQC13ZWJraXQta2V5ZnJhbWVzIGZzTG9hZGluZ0NpcmNsZSB7XG4gIGZyb20ge1xuICAgIHRyYW5zZm9ybTogcm90YXRlKDBkZWcpO1xuICB9XG4gIHRvIHtcbiAgICB0cmFuc2Zvcm06IHJvdGF0ZSgzNjBkZWcpO1xuICB9XG59XG5cbi8vc3Bhbi5pY29uaWZ5IHtcbi8vICBkaXNwbGF5OiBibG9jaztcbi8vICBtaW4td2lkdGg6IDFlbTtcbi8vICBtaW4taGVpZ2h0OiAxZW07XG4vLyAgLy8gYmFja2dyb3VuZC1jb2xvcjogQGljb25pZnktYmctY29sb3I7XG4vLyAgYm9yZGVyLXJhZGl1czogMTAwJTtcbi8vfVxuPC9zdHlsZT5cbiIsIjx0ZW1wbGF0ZT5cbiAgPHNwYW4gY2xhc3M9XCJmcy1pY29uaWZ5XCIgOmNsYXNzPVwieyAnZnMtaWNvbmlmeS1zcGluJzogc3BpbiB9XCI+XG4gICAgPEljb24gcmVmPVwiaWNvbmlmeVJlZlwiIDppY29uPVwiaWNvblwiIC8+XG4gIDwvc3Bhbj5cbjwvdGVtcGxhdGU+XG48c2NyaXB0IGxhbmc9XCJ0c1wiPlxuaW1wb3J0IHsgZGVmaW5lQ29tcG9uZW50LCBuZXh0VGljaywgb25Nb3VudGVkLCByZWYsIHVucmVmLCB3YXRjaCB9IGZyb20gXCJ2dWVcIjtcbmltcG9ydCB7IEljb24gfSBmcm9tIFwiQGljb25pZnkvdnVlXCI7XG4vKipcbiAqIGljb25pZnkg5oyJ6ZyA5Yqg6L295Zu+5qCH57uE5Lu2XG4gKiBodHRwczovL2ljb25pZnkuZGVzaWduL2ljb24tc2V0cy9pb24vXG4gKi9cbmV4cG9ydCBkZWZhdWx0IGRlZmluZUNvbXBvbmVudCh7XG4gIG5hbWU6IFwiRnNJY29uaWZ5XCIsXG4gIGNvbXBvbmVudHM6IHsgSWNvbiB9LFxuICBwcm9wczoge1xuICAgIC8qKlxuICAgICAqIOWbvuagh+WQjeensFxuICAgICAqL1xuICAgIGljb246IHtcbiAgICAgIHR5cGU6IFN0cmluZ1xuICAgIH0sXG4gICAgLyoqXG4gICAgICog5peL6L2sXG4gICAgICovXG4gICAgc3Bpbjoge1xuICAgICAgdHlwZTogQm9vbGVhbixcbiAgICAgIGRlZmF1bHQ6IGZhbHNlXG4gICAgfVxuICB9LFxuICBzZXR1cChwcm9wcywgY3R4KSB7XG4gICAgY29uc3QgaWNvbmlmeVJlZiA9IHJlZihudWxsKTtcbiAgICByZXR1cm4geyBpY29uaWZ5UmVmIH07XG4gIH1cbn0pO1xuPC9zY3JpcHQ+XG48c3R5bGUgbGFuZz1cImxlc3NcIj5cbi5mcy1pY29uaWZ5IHtcbiAgLy9kaXNwbGF5OiBpbmxpbmUtZmxleCAhaW1wb3J0YW50O1xuICBkaXNwbGF5OiBpbmxpbmUtZmxleDtcbiAgYWxpZ24taXRlbXM6IGNlbnRlcjtcbiAgJi1zcGluIHtcbiAgICBzdmcge1xuICAgICAgYW5pbWF0aW9uOiBmc0xvYWRpbmdDaXJjbGUgMXMgaW5maW5pdGUgbGluZWFyO1xuICAgIH1cbiAgfVxuXG4gICYuZnMtaWNvbiB7XG4gICAgZGlzcGxheTogaW5saW5lLWZsZXg7XG4gIH1cbn1cblxuQGtleWZyYW1lcyBmc0xvYWRpbmdDaXJjbGUge1xuICBmcm9tIHtcbiAgICB0cmFuc2Zvcm06IHJvdGF0ZSgwZGVnKTtcbiAgfVxuICB0byB7XG4gICAgdHJhbnNmb3JtOiByb3RhdGUoMzYwZGVnKTtcbiAgfVxufVxuXG5ALXdlYmtpdC1rZXlmcmFtZXMgZnNMb2FkaW5nQ2lyY2xlIHtcbiAgZnJvbSB7XG4gICAgdHJhbnNmb3JtOiByb3RhdGUoMGRlZyk7XG4gIH1cbiAgdG8ge1xuICAgIHRyYW5zZm9ybTogcm90YXRlKDM2MGRlZyk7XG4gIH1cbn1cblxuLy9zcGFuLmljb25pZnkge1xuLy8gIGRpc3BsYXk6IGJsb2NrO1xuLy8gIG1pbi13aWR0aDogMWVtO1xuLy8gIG1pbi1oZWlnaHQ6IDFlbTtcbi8vICAvLyBiYWNrZ3JvdW5kLWNvbG9yOiBAaWNvbmlmeS1iZy1jb2xvcjtcbi8vICBib3JkZXItcmFkaXVzOiAxMDAlO1xuLy99XG48L3N0eWxlPlxuIiwiPHRlbXBsYXRlPlxuICA8c3BhbiA6Y2xhc3M9XCJbJ2ZzLWljb24tc3ZnJywgc3BpbiAmJiAnZnMtaWNvbi1zcGluJ11cIj5cbiAgICA8c3ZnIGNsYXNzPVwiZnMtaWNvbi1zdmctY29udGVudFwiIGFyaWEtaGlkZGVuPVwidHJ1ZVwiPlxuICAgICAgPHVzZSA6eGxpbms6aHJlZj1cInN5bWJvbElkXCI+PC91c2U+XG4gICAgPC9zdmc+XG4gIDwvc3Bhbj5cbjwvdGVtcGxhdGU+XG48c2NyaXB0IGxhbmc9XCJ0c1wiPlxuaW1wb3J0IHR5cGUgeyBDU1NQcm9wZXJ0aWVzIH0gZnJvbSBcInZ1ZVwiO1xuaW1wb3J0IHsgZGVmaW5lQ29tcG9uZW50LCBjb21wdXRlZCB9IGZyb20gXCJ2dWVcIjtcblxuZXhwb3J0IGRlZmF1bHQgZGVmaW5lQ29tcG9uZW50KHtcbiAgbmFtZTogXCJGc1N2Z0ljb25cIixcbiAgcHJvcHM6IHtcbiAgICBpY29uOiB7XG4gICAgICB0eXBlOiBTdHJpbmcsXG4gICAgICByZXF1aXJlZDogdHJ1ZVxuICAgIH0sXG4gICAgc2l6ZToge1xuICAgICAgdHlwZTogW051bWJlciwgU3RyaW5nXSxcbiAgICAgIGRlZmF1bHQ6IDE2XG4gICAgfSxcbiAgICBzcGluOiB7XG4gICAgICB0eXBlOiBCb29sZWFuLFxuICAgICAgZGVmYXVsdDogZmFsc2VcbiAgICB9XG4gIH0sXG4gIHNldHVwKHByb3BzKSB7XG4gICAgY29uc3Qgc3ltYm9sSWQgPSBjb21wdXRlZCgoKSA9PiBgIyR7cHJvcHMuaWNvbn1gKTtcblxuICAgIGNvbnN0IGdldFN0eWxlID0gY29tcHV0ZWQoKCk6IENTU1Byb3BlcnRpZXMgPT4ge1xuICAgICAgY29uc3QgeyBzaXplIH0gPSBwcm9wcztcbiAgICAgIGxldCBzID0gYCR7c2l6ZX1gO1xuICAgICAgcyA9IGAke3MucmVwbGFjZShcInB4XCIsIFwiXCIpfXB4YDtcbiAgICAgIHJldHVybiB7XG4gICAgICAgIHdpZHRoOiBzLFxuICAgICAgICBoZWlnaHQ6IHNcbiAgICAgIH07XG4gICAgfSk7XG4gICAgcmV0dXJuIHsgc3ltYm9sSWQsIGdldFN0eWxlIH07XG4gIH1cbn0pO1xuPC9zY3JpcHQ+XG48c3R5bGUgbGFuZz1cImxlc3NcIj5cbi5mcy1pY29uLXN2ZyB7XG4gIGRpc3BsYXk6IGlubGluZS1ibG9jaztcbiAgdmVydGljYWwtYWxpZ246IG1pZGRsZTtcbiAgJi5mcy1pY29uLXNwaW4ge1xuICAgIGFuaW1hdGlvbjogbG9hZGluZ0NpcmNsZSAxcyBpbmZpbml0ZSBsaW5lYXI7XG4gIH1cblxuICAuZnMtaWNvbi1zdmctY29udGVudCB7XG4gICAgd2lkdGg6IDFlbTtcbiAgICBoZWlnaHQ6IDFlbTtcbiAgICB2ZXJ0aWNhbC1hbGlnbjogLTAuMTVlbTtcbiAgICBmaWxsOiBjdXJyZW50Q29sb3I7XG4gICAgb3ZlcmZsb3c6IGhpZGRlbjtcbiAgfVxufVxuPC9zdHlsZT5cbiIsIjx0ZW1wbGF0ZT5cbiAgPHNwYW4gOmNsYXNzPVwiWydmcy1pY29uLXN2ZycsIHNwaW4gJiYgJ2ZzLWljb24tc3BpbiddXCI+XG4gICAgPHN2ZyBjbGFzcz1cImZzLWljb24tc3ZnLWNvbnRlbnRcIiBhcmlhLWhpZGRlbj1cInRydWVcIj5cbiAgICAgIDx1c2UgOnhsaW5rOmhyZWY9XCJzeW1ib2xJZFwiPjwvdXNlPlxuICAgIDwvc3ZnPlxuICA8L3NwYW4+XG48L3RlbXBsYXRlPlxuPHNjcmlwdCBsYW5nPVwidHNcIj5cbmltcG9ydCB0eXBlIHsgQ1NTUHJvcGVydGllcyB9IGZyb20gXCJ2dWVcIjtcbmltcG9ydCB7IGRlZmluZUNvbXBvbmVudCwgY29tcHV0ZWQgfSBmcm9tIFwidnVlXCI7XG5cbmV4cG9ydCBkZWZhdWx0IGRlZmluZUNvbXBvbmVudCh7XG4gIG5hbWU6IFwiRnNTdmdJY29uXCIsXG4gIHByb3BzOiB7XG4gICAgaWNvbjoge1xuICAgICAgdHlwZTogU3RyaW5nLFxuICAgICAgcmVxdWlyZWQ6IHRydWVcbiAgICB9LFxuICAgIHNpemU6IHtcbiAgICAgIHR5cGU6IFtOdW1iZXIsIFN0cmluZ10sXG4gICAgICBkZWZhdWx0OiAxNlxuICAgIH0sXG4gICAgc3Bpbjoge1xuICAgICAgdHlwZTogQm9vbGVhbixcbiAgICAgIGRlZmF1bHQ6IGZhbHNlXG4gICAgfVxuICB9LFxuICBzZXR1cChwcm9wcykge1xuICAgIGNvbnN0IHN5bWJvbElkID0gY29tcHV0ZWQoKCkgPT4gYCMke3Byb3BzLmljb259YCk7XG5cbiAgICBjb25zdCBnZXRTdHlsZSA9IGNvbXB1dGVkKCgpOiBDU1NQcm9wZXJ0aWVzID0+IHtcbiAgICAgIGNvbnN0IHsgc2l6ZSB9ID0gcHJvcHM7XG4gICAgICBsZXQgcyA9IGAke3NpemV9YDtcbiAgICAgIHMgPSBgJHtzLnJlcGxhY2UoXCJweFwiLCBcIlwiKX1weGA7XG4gICAgICByZXR1cm4ge1xuICAgICAgICB3aWR0aDogcyxcbiAgICAgICAgaGVpZ2h0OiBzXG4gICAgICB9O1xuICAgIH0pO1xuICAgIHJldHVybiB7IHN5bWJvbElkLCBnZXRTdHlsZSB9O1xuICB9XG59KTtcbjwvc2NyaXB0PlxuPHN0eWxlIGxhbmc9XCJsZXNzXCI+XG4uZnMtaWNvbi1zdmcge1xuICBkaXNwbGF5OiBpbmxpbmUtYmxvY2s7XG4gIHZlcnRpY2FsLWFsaWduOiBtaWRkbGU7XG4gICYuZnMtaWNvbi1zcGluIHtcbiAgICBhbmltYXRpb246IGxvYWRpbmdDaXJjbGUgMXMgaW5maW5pdGUgbGluZWFyO1xuICB9XG5cbiAgLmZzLWljb24tc3ZnLWNvbnRlbnQge1xuICAgIHdpZHRoOiAxZW07XG4gICAgaGVpZ2h0OiAxZW07XG4gICAgdmVydGljYWwtYWxpZ246IC0wLjE1ZW07XG4gICAgZmlsbDogY3VycmVudENvbG9yO1xuICAgIG92ZXJmbG93OiBoaWRkZW47XG4gIH1cbn1cbjwvc3R5bGU+XG4iLCI8dGVtcGxhdGU+XG4gIDxkaXYgY2xhc3M9XCJmcy1sYWJlbFwiPlxuICAgIDxkaXYgY2xhc3M9XCJsYWJlbFwiIHYtYmluZD1cImxhYmVsQXR0cnNcIj5cbiAgICAgIHt7IGxhYmVsIH19XG4gICAgICA8c2xvdCBuYW1lPVwibGFiZWxcIj48L3Nsb3Q+XG4gICAgPC9kaXY+XG4gICAgPGRpdiBjbGFzcz1cImNvbnRlbnRcIiB2LWJpbmQ9XCJjb250ZW50QXR0cnNcIj5cbiAgICAgIDxzbG90Pjwvc2xvdD5cbiAgICA8L2Rpdj5cbiAgPC9kaXY+XG48L3RlbXBsYXRlPlxuPHNjcmlwdCBsYW5nPVwidHNcIj5cbmltcG9ydCB7IGRlZmluZUNvbXBvbmVudCB9IGZyb20gXCJ2dWVcIjtcblxuLyoqXG4gKiBsYWJlbOe7hOS7tlxuICovXG5leHBvcnQgZGVmYXVsdCBkZWZpbmVDb21wb25lbnQoe1xuICBuYW1lOiBcIkZzTGFiZWxcIixcbiAgcHJvcHM6IHtcbiAgICBsYWJlbDoge1xuICAgICAgdHlwZTogU3RyaW5nLFxuICAgICAgZGVmYXVsdDogXCJcIlxuICAgIH0sXG4gICAgbGFiZWxBdHRyczoge1xuICAgICAgdHlwZTogT2JqZWN0LFxuICAgICAgZGVmYXVsdDogKCkgPT4gKHt9KVxuICAgIH0sXG4gICAgY29udGVudEF0dHJzOiB7XG4gICAgICB0eXBlOiBPYmplY3QsXG4gICAgICBkZWZhdWx0OiAoKSA9PiAoe30pXG4gICAgfVxuICB9XG59KTtcbjwvc2NyaXB0PlxuPHN0eWxlIGxhbmc9XCJsZXNzXCI+XG4uZnMtbGFiZWwge1xuICBkaXNwbGF5OiBmbGV4O1xuICBhbGlnbi1pdGVtczogY2VudGVyO1xuICAubGFiZWwge1xuICAgIGRpc3BsYXk6IGZsZXg7XG4gICAgdGV4dC1hbGlnbjogcmlnaHQ7XG4gICAgbWFyZ2luLXJpZ2h0OiAxMHB4O1xuICAgIG1pbi13aWR0aDogMTAwcHg7XG4gICAganVzdGlmeS1jb250ZW50OiBmbGV4LWVuZDtcbiAgfVxuICAuY29udGVudCB7XG4gICAgZmxleDogMTtcbiAgICBkaXNwbGF5OiBmbGV4O1xuICAgIG1pbi13aWR0aDogMTAwcHg7XG4gICAgZmxleC1kaXJlY3Rpb246IHJvdztcbiAgICBmbGV4LXdyYXA6IG5vd3JhcDtcbiAgICBqdXN0aWZ5LWNvbnRlbnQ6IGxlZnQ7XG4gICAgYWxpZ24taXRlbXM6IGNlbnRlcjtcbiAgfVxufVxuPC9zdHlsZT5cbiIsIjx0ZW1wbGF0ZT5cbiAgPGRpdiBjbGFzcz1cImZzLWxhYmVsXCI+XG4gICAgPGRpdiBjbGFzcz1cImxhYmVsXCIgdi1iaW5kPVwibGFiZWxBdHRyc1wiPlxuICAgICAge3sgbGFiZWwgfX1cbiAgICAgIDxzbG90IG5hbWU9XCJsYWJlbFwiPjwvc2xvdD5cbiAgICA8L2Rpdj5cbiAgICA8ZGl2IGNsYXNzPVwiY29udGVudFwiIHYtYmluZD1cImNvbnRlbnRBdHRyc1wiPlxuICAgICAgPHNsb3Q+PC9zbG90PlxuICAgIDwvZGl2PlxuICA8L2Rpdj5cbjwvdGVtcGxhdGU+XG48c2NyaXB0IGxhbmc9XCJ0c1wiPlxuaW1wb3J0IHsgZGVmaW5lQ29tcG9uZW50IH0gZnJvbSBcInZ1ZVwiO1xuXG4vKipcbiAqIGxhYmVs57uE5Lu2XG4gKi9cbmV4cG9ydCBkZWZhdWx0IGRlZmluZUNvbXBvbmVudCh7XG4gIG5hbWU6IFwiRnNMYWJlbFwiLFxuICBwcm9wczoge1xuICAgIGxhYmVsOiB7XG4gICAgICB0eXBlOiBTdHJpbmcsXG4gICAgICBkZWZhdWx0OiBcIlwiXG4gICAgfSxcbiAgICBsYWJlbEF0dHJzOiB7XG4gICAgICB0eXBlOiBPYmplY3QsXG4gICAgICBkZWZhdWx0OiAoKSA9PiAoe30pXG4gICAgfSxcbiAgICBjb250ZW50QXR0cnM6IHtcbiAgICAgIHR5cGU6IE9iamVjdCxcbiAgICAgIGRlZmF1bHQ6ICgpID0+ICh7fSlcbiAgICB9XG4gIH1cbn0pO1xuPC9zY3JpcHQ+XG48c3R5bGUgbGFuZz1cImxlc3NcIj5cbi5mcy1sYWJlbCB7XG4gIGRpc3BsYXk6IGZsZXg7XG4gIGFsaWduLWl0ZW1zOiBjZW50ZXI7XG4gIC5sYWJlbCB7XG4gICAgZGlzcGxheTogZmxleDtcbiAgICB0ZXh0LWFsaWduOiByaWdodDtcbiAgICBtYXJnaW4tcmlnaHQ6IDEwcHg7XG4gICAgbWluLXdpZHRoOiAxMDBweDtcbiAgICBqdXN0aWZ5LWNvbnRlbnQ6IGZsZXgtZW5kO1xuICB9XG4gIC5jb250ZW50IHtcbiAgICBmbGV4OiAxO1xuICAgIGRpc3BsYXk6IGZsZXg7XG4gICAgbWluLXdpZHRoOiAxMDBweDtcbiAgICBmbGV4LWRpcmVjdGlvbjogcm93O1xuICAgIGZsZXgtd3JhcDogbm93cmFwO1xuICAgIGp1c3RpZnktY29udGVudDogbGVmdDtcbiAgICBhbGlnbi1pdGVtczogY2VudGVyO1xuICB9XG59XG48L3N0eWxlPlxuIixudWxsLCI8dGVtcGxhdGU+XG4gIDxkaXYgY2xhc3M9XCJmcy1ib3hcIj5cbiAgICA8c2xvdD48L3Nsb3Q+XG4gIDwvZGl2PlxuPC90ZW1wbGF0ZT5cbjxzY3JpcHQgbGFuZz1cInRzXCI+XG5pbXBvcnQgeyBkZWZpbmVDb21wb25lbnQgfSBmcm9tIFwidnVlXCI7XG5cbi8qKlxuICog5Y2V57qv55qE5YyF6KO55LiA5Liq5a2Q57uE5Lu2XG4gKi9cbmV4cG9ydCBkZWZhdWx0IGRlZmluZUNvbXBvbmVudCh7XG4gIG5hbWU6IFwiRnNCb3hcIlxufSk7XG48L3NjcmlwdD5cbiIsIjx0ZW1wbGF0ZT5cbiAgPGRpdiBjbGFzcz1cImZzLWJveFwiPlxuICAgIDxzbG90Pjwvc2xvdD5cbiAgPC9kaXY+XG48L3RlbXBsYXRlPlxuPHNjcmlwdCBsYW5nPVwidHNcIj5cbmltcG9ydCB7IGRlZmluZUNvbXBvbmVudCB9IGZyb20gXCJ2dWVcIjtcblxuLyoqXG4gKiDljZXnuq/nmoTljIXoo7nkuIDkuKrlrZDnu4Tku7ZcbiAqL1xuZXhwb3J0IGRlZmF1bHQgZGVmaW5lQ29tcG9uZW50KHtcbiAgbmFtZTogXCJGc0JveFwiXG59KTtcbjwvc2NyaXB0PlxuIixudWxsLG51bGwsbnVsbCwiPHRlbXBsYXRlPlxuICA8Y29tcG9uZW50XG4gICAgOmlzPVwidWkuZm9ybS5uYW1lXCJcbiAgICByZWY9XCJmb3JtUmVmXCJcbiAgICBjbGFzcz1cImZzLWZvcm1cIlxuICAgIDpjbGFzcz1cIntcbiAgICAgICdmcy1mb3JtLWdyaWQnOiBkaXNwbGF5ID09PSAnZ3JpZCcsXG4gICAgICAnZnMtZm9ybS1mbGV4JzogZGlzcGxheSA9PT0gJ2ZsZXgnLFxuICAgICAgJ2ZzLWZvcm0taW52YWxpZCc6IHZhbGlkUmVmID09PSBmYWxzZVxuICAgIH1cIlxuICAgIG9uc3VibWl0PVwiZXZlbnQucHJldmVudERlZmF1bHQoKTtcIlxuICAgIDptb2RlbD1cImZvcm1cIlxuICA+XG4gICAgPCEtLSByb3cgLS0+XG4gICAgPGNvbXBvbmVudCA6aXM9XCJ1aS5yb3cubmFtZVwiIGNsYXNzPVwiZnMtcm93XCIgdi1iaW5kPVwicm93XCI+XG4gICAgICA8IS0tIGNvbCAtLT5cbiAgICAgIDx0ZW1wbGF0ZSB2LWZvcj1cIml0ZW0gaW4gY29tcHV0ZWREZWZhdWx0Q29sdW1uc1wiIDprZXk9XCJpdGVtPy5rZXlcIj5cbiAgICAgICAgPGNvbXBvbmVudCA6aXM9XCJ1aS5jb2wubmFtZVwiIHYtaWY9XCJmb3JtSXRlbVNob3coaXRlbSlcIiBjbGFzcz1cImZzLWNvbFwiIHYtYmluZD1cIml0ZW0uY29sXCI+XG4gICAgICAgICAgPGZzLWZvcm0taXRlbVxuICAgICAgICAgICAgdi1pZj1cIml0ZW0uYmxhbmsgIT09IHRydWVcIlxuICAgICAgICAgICAgOnJlZj1cIlxuICAgICAgICAgICAgICAoZWw6IGFueSkgPT4ge1xuICAgICAgICAgICAgICAgIGlmIChlbCkge1xuICAgICAgICAgICAgICAgICAgZm9ybUl0ZW1SZWZzW2l0ZW0ua2V5XSA9IGVsO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgXCJcbiAgICAgICAgICAgIDppdGVtPVwiaXRlbVwiXG4gICAgICAgICAgICA6aGVscGVyPVwiaGVscGVyXCJcbiAgICAgICAgICAgIDptb2RlbC12YWx1ZT1cImdldChmb3JtLCBpdGVtLmtleSlcIlxuICAgICAgICAgICAgOmZvcm0tc2xvdD1cIm1lcmdlZFNsb3RzWydmb3JtXycgKyBpdGVtLmtleV1cIlxuICAgICAgICAgICAgOmdldC1jb250ZXh0LWZuPVwiZ2V0Q29udGV4dEZuXCJcbiAgICAgICAgICAgIEB1cGRhdGU6bW9kZWwtdmFsdWU9XCJzZXQoZm9ybSwgaXRlbS5rZXksICRldmVudClcIlxuICAgICAgICAgIC8+XG4gICAgICAgIDwvY29tcG9uZW50PlxuICAgICAgPC90ZW1wbGF0ZT5cbiAgICA8L2NvbXBvbmVudD5cbiAgICA8Y29tcG9uZW50XG4gICAgICA6aXM9XCJjb21wdXRlZEdyb3VwLndyYXBwZXIucGFyZW50XCJcbiAgICAgIHYtaWY9XCJjb21wdXRlZEdyb3VwLndyYXBwZXJcIlxuICAgICAgdi1tb2RlbDpbdWkuY29sbGFwc2UubW9kZWxWYWx1ZV09XCJncm91cEFjdGl2ZUtleVwiXG4gICAgICBzdHlsZT1cIndpZHRoOiAxMDAlXCJcbiAgICAgIHYtYmluZD1cImNvbXB1dGVkR3JvdXBcIlxuICAgID5cbiAgICAgIDx0ZW1wbGF0ZSB2LWZvcj1cIihncm91cEl0ZW0sIGdyb3VwS2V5KSBvZiBjb21wdXRlZEdyb3VwLmdyb3Vwc1wiIDprZXk9XCJncm91cEtleVwiPlxuICAgICAgICA8Y29tcG9uZW50XG4gICAgICAgICAgOmlzPVwiY29tcHV0ZWRHcm91cC53cmFwcGVyLmNoaWxkXCJcbiAgICAgICAgICB2LWlmPVwiZ3JvdXBJdGVtU2hvdyhncm91cEl0ZW0pXCJcbiAgICAgICAgICA6W3VpLmNvbGxhcHNlLmtleU5hbWVdPVwiZ3JvdXBLZXlcIlxuICAgICAgICAgIHYtYmluZD1cImdyb3VwSXRlbVwiXG4gICAgICAgICAgOmNsYXNzPVwieyAnZnMtZm9ybS1ncm91cC1lcnJvcic6IGVycm9yc1JlZlsnZ3JvdXAuJyArIGdyb3VwS2V5XSB9XCJcbiAgICAgICAgPlxuICAgICAgICAgIDx0ZW1wbGF0ZSB2LWZvcj1cIihpdGVtLCBzbG90TmFtZSkgb2YgZ3JvdXBJdGVtLnNsb3RzXCIgOmtleT1cInNsb3ROYW1lXCIgI1tzbG90TmFtZV09XCJzY29wZVwiPlxuICAgICAgICAgICAgPGZzLXJlbmRlciA6cmVuZGVyLWZ1bmM9XCJpdGVtXCIgOnNjb3BlPVwieyAuLi5zY29wZSwgaGFzRXJyb3I6IGVycm9yc1JlZlsnZ3JvdXAuJyArIGdyb3VwS2V5XSB9XCIgLz5cbiAgICAgICAgICA8L3RlbXBsYXRlPlxuICAgICAgICAgIDwhLS0gcm93IC0tPlxuICAgICAgICAgIDxjb21wb25lbnQgOmlzPVwidWkucm93Lm5hbWVcIiBjbGFzcz1cImZzLXJvd1wiIHYtYmluZD1cInJvd1wiPlxuICAgICAgICAgICAgPCEtLSBjb2wgLS0+XG4gICAgICAgICAgICA8dGVtcGxhdGUgdi1mb3I9XCJrZXkgaW4gZ3JvdXBJdGVtLmNvbHVtbnNcIiA6a2V5PVwia2V5XCI+XG4gICAgICAgICAgICAgIDxjb21wb25lbnRcbiAgICAgICAgICAgICAgICA6aXM9XCJ1aS5jb2wubmFtZVwiXG4gICAgICAgICAgICAgICAgdi1pZj1cImZvcm1JdGVtU2hvdyhjb21wdXRlZENvbHVtbnNba2V5XSlcIlxuICAgICAgICAgICAgICAgIGNsYXNzPVwiZnMtY29sXCJcbiAgICAgICAgICAgICAgICB2LWJpbmQ9XCJtZXJnZUNvbChncm91cEl0ZW0uY29sLCBjb21wdXRlZENvbHVtbnNba2V5XT8uY29sKVwiXG4gICAgICAgICAgICAgID5cbiAgICAgICAgICAgICAgICA8ZnMtZm9ybS1pdGVtXG4gICAgICAgICAgICAgICAgICB2LWlmPVwiY29tcHV0ZWRDb2x1bW5zW2tleV0gJiYgY29tcHV0ZWRDb2x1bW5zW2tleV0/LmJsYW5rICE9PSB0cnVlXCJcbiAgICAgICAgICAgICAgICAgIDpyZWY9XCJcbiAgICAgICAgICAgICAgICAgICAgKGVsOiBhbnkpID0+IHtcbiAgICAgICAgICAgICAgICAgICAgICBpZiAoZWwpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGZvcm1JdGVtUmVmc1trZXldID0gZWw7XG4gICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICBcIlxuICAgICAgICAgICAgICAgICAgOml0ZW09XCJjb21wdXRlZENvbHVtbnNba2V5XVwiXG4gICAgICAgICAgICAgICAgICA6bW9kZWwtdmFsdWU9XCJnZXQoZm9ybSwga2V5KVwiXG4gICAgICAgICAgICAgICAgICA6Zm9ybS1zbG90PVwibWVyZ2VkU2xvdHNbJ2Zvcm1fJyArIGtleV1cIlxuICAgICAgICAgICAgICAgICAgOmdldC1jb250ZXh0LWZuPVwiZ2V0Q29udGV4dEZuXCJcbiAgICAgICAgICAgICAgICAgIEB1cGRhdGU6bW9kZWwtdmFsdWU9XCJzZXQoZm9ybSwga2V5LCAkZXZlbnQpXCJcbiAgICAgICAgICAgICAgICAvPlxuICAgICAgICAgICAgICA8L2NvbXBvbmVudD5cbiAgICAgICAgICAgIDwvdGVtcGxhdGU+XG4gICAgICAgICAgPC9jb21wb25lbnQ+XG4gICAgICAgIDwvY29tcG9uZW50PlxuICAgICAgPC90ZW1wbGF0ZT5cbiAgICA8L2NvbXBvbmVudD5cbiAgPC9jb21wb25lbnQ+XG48L3RlbXBsYXRlPlxuXG48c2NyaXB0IGxhbmc9XCJ0c1wiPlxuaW1wb3J0IHtcbiAgY29tcHV0ZWQsXG4gIGRlZmluZUNvbXBvbmVudCxcbiAgZ2V0Q3VycmVudEluc3RhbmNlLFxuICBvbk1vdW50ZWQsXG4gIHJlYWN0aXZlLFxuICBSZWYsXG4gIHJlZixcbiAgdG9SYXcsXG4gIHVucmVmLFxuICBVbndyYXBOZXN0ZWRSZWZzLFxuICB3YXRjaFxufSBmcm9tIFwidnVlXCI7XG5pbXBvcnQgXyBmcm9tIFwibG9kYXNoLWVzXCI7XG5pbXBvcnQgeyBDb21wdXRlVmFsdWUsIHVzZUNvbXB1dGUgfSBmcm9tIFwiLi4vLi4vdXNlL3VzZS1jb21wdXRlXCI7XG5pbXBvcnQgbG9nZ2VyIGZyb20gXCIuLi8uLi91dGlscy91dGlsLmxvZ1wiO1xuaW1wb3J0IHsgdXNlTWVyZ2UgfSBmcm9tIFwiLi4vLi4vdXNlL3VzZS1tZXJnZVwiO1xuaW1wb3J0IHsgQ29uc3RhbnRzIH0gZnJvbSBcIi4uLy4uL3V0aWxzL3V0aWwuY29uc3RhbnRzXCI7XG5pbXBvcnQgeyBGb3JtU2NvcGVDb250ZXh0LCBTZXRGb3JtRGF0YU9wdGlvbnMsIHVzZVVpLCB1dGlscyB9IGZyb20gXCIuLi8uLi9pbmRleFwiO1xuXG4vKipcbiAqIOmFjee9ruWMlueahOihqOWNlee7hOS7tlxuICog5pq06Zyy55qE5pa55rOV77yaXG4gKiByZWYuc3VibWl0KCkgPSDmj5DkuqTooajljZVcbiAqIHJlZi5yZXNldCgpID0g6YeN572u6KGo5Y2VXG4gKi9cbmV4cG9ydCBkZWZhdWx0IGRlZmluZUNvbXBvbmVudCh7XG4gIG5hbWU6IFwiRnNGb3JtXCIsXG4gIHByb3BzOiB7XG4gICAgLyoqXG4gICAgICog5Yid5aeL6KGo5Y2V5pWw5o2uXG4gICAgICoqL1xuICAgIGluaXRpYWxGb3JtOiB7XG4gICAgICB0eXBlOiBPYmplY3QsXG4gICAgICBkZWZhdWx0KCkge1xuICAgICAgICByZXR1cm4ge307XG4gICAgICB9XG4gICAgfSxcbiAgICAvKipcbiAgICAgKiDlrZfmrrXmqKHniYhcbiAgICAgKiB7XG4gICAgICogICBrZXk6e1xuICAgICAqICAgICB0aXRsZTogXCLlrZfmrrXlkI3np7BcIixcbiAgICAgKiAgICAgY29tcG9uZW50OntcbiAgICAgKiAgICAgICBuYW1lOlwi57uE5Lu25ZCN56ewXCJcbiAgICAgKiAgICAgICAuLi7nu4Tku7blj4LmlbBcbiAgICAgKiAgICAgfVxuICAgICAqICAgfVxuICAgICAqIH1cbiAgICAgKiAqL1xuICAgIGNvbHVtbnM6IHtcbiAgICAgIHR5cGU6IE9iamVjdCxcbiAgICAgIGRlZmF1bHQ6IHVuZGVmaW5lZFxuICAgIH0sXG4gICAgLyoqXG4gICAgICog5a2X5q615YiG57uEXG4gICAgICoge1xuICAgICAqICAgdHlwZToneHh4JywgLy/liIbnu4TlsZXnpLrnsbvlnotcbiAgICAgKiAgIGdyb3Vwczp7IC8v5YiG57uE5pWw5o2uXG4gICAgICogICAgIGdyb3VwS2V5OnsgdGl0bGU6J3h4eCcsY29sdW1uczpbJ2ZpZWxkS2V5JywnZmllbGRLZXknXX1cbiAgICAgKiAgIH1cbiAgICAgKiB9XG4gICAgICovXG4gICAgZ3JvdXA6IHtcbiAgICAgIHR5cGU6IE9iamVjdCxcbiAgICAgIGRlZmF1bHQ6IHVuZGVmaW5lZFxuICAgIH0sXG4gICAgLyoqXG4gICAgICog6YeN572u6KGo5Y2V5ZCO55qE5pON5L2cXG4gICAgICovXG4gICAgZG9SZXNldDoge1xuICAgICAgdHlwZTogRnVuY3Rpb24sXG4gICAgICBkZWZhdWx0OiB1bmRlZmluZWRcbiAgICB9LFxuICAgIC8qKlxuICAgICAqIOeCueWHu+S/neWtmOaMiemSru+8jOihqOWNleagoemqjOWJjeaJp+ihjOaTjeS9nO+8iGFzeW5j77yJXG4gICAgICovXG4gICAgYmVmb3JlVmFsaWRhdGU6IHtcbiAgICAgIHR5cGU6IEZ1bmN0aW9uLFxuICAgICAgZGVmYXVsdDogdW5kZWZpbmVkXG4gICAgfSxcbiAgICAvKipcbiAgICAgKiDooajljZXmoKHpqozlrozlrozmiJDlkI7vvIzmj5DkuqTliY3lpITnkIbvvIhhc3luY++8iVxuICAgICAqL1xuICAgIGJlZm9yZVN1Ym1pdDoge1xuICAgICAgdHlwZTogRnVuY3Rpb24sXG4gICAgICBkZWZhdWx0OiB1bmRlZmluZWRcbiAgICB9LFxuICAgIC8qKlxuICAgICAqIOeCueWHu+S/neWtmOaMiemSruaXtuaJp+ihjOaTjeS9nO+8iGFzeW5j77yJXG4gICAgICovXG4gICAgZG9TdWJtaXQ6IHtcbiAgICAgIHR5cGU6IEZ1bmN0aW9uLFxuICAgICAgZGVmYXVsdDogdW5kZWZpbmVkXG4gICAgfSxcbiAgICAvKipcbiAgICAgKiDooajljZXmj5DkuqTlkI7lpITnkIbvvIhhc3luY++8iVxuICAgICAqL1xuICAgIGFmdGVyU3VibWl0OiB7XG4gICAgICB0eXBlOiBGdW5jdGlvbixcbiAgICAgIGRlZmF1bHQ6IHVuZGVmaW5lZFxuICAgIH0sXG4gICAgLyoqXG4gICAgICog5o+S5qe95YaF5a65XG4gICAgICovXG4gICAgc2xvdHM6IHtcbiAgICAgIHR5cGU6IE9iamVjdCxcbiAgICAgIGRlZmF1bHQ6ICgpID0+IHtcbiAgICAgICAgcmV0dXJuIHt9O1xuICAgICAgfVxuICAgIH0sXG4gICAgLyoqXG4gICAgICog5biD5bGA5pa55byP44CQZmxleHxncmlk44CRXG4gICAgICovXG4gICAgZGlzcGxheToge1xuICAgICAgdHlwZTogU3RyaW5nLFxuICAgICAgZGVmYXVsdDogXCJmbGV4XCIgLy8gZmxleFxuICAgIH0sXG4gICAgLyoqXG4gICAgICog5bqP5Y+377yM57yW6L6R5pe25Lya5Lyg5YWlXG4gICAgICovXG4gICAgaW5kZXg6IHtcbiAgICAgIHR5cGU6IE51bWJlcixcbiAgICAgIGRlZmF1bHQ6IHVuZGVmaW5lZFxuICAgIH0sXG4gICAgLyoqXG4gICAgICog5qih5byPIFthZGQsZWRpdCx2aWV3LOiHquWumuS5iV1cbiAgICAgKi9cbiAgICBtb2RlOiB7XG4gICAgICB0eXBlOiBTdHJpbmcsXG4gICAgICBkZWZhdWx0OiB1bmRlZmluZWRcbiAgICB9LFxuICAgIC8qKlxuICAgICAqIGEtcm936YWN572uXG4gICAgICovXG4gICAgcm93OiB7XG4gICAgICB0eXBlOiBPYmplY3QsXG4gICAgICBkZWZhdWx0OiB1bmRlZmluZWRcbiAgICB9LFxuICAgIC8qKlxuICAgICAqIGVsLWNvbHxhLWNvbOmFjee9ru+8jOWPr+mFjee9rui3qOWIl1xuICAgICAqL1xuICAgIGNvbDoge1xuICAgICAgdHlwZTogT2JqZWN0LFxuICAgICAgZGVmYXVsdDogdW5kZWZpbmVkXG4gICAgfSxcbiAgICAvKipcbiAgICAgKiBmb3JtSXRlbeeahOWFrOWFsemFjee9rlxuICAgICAqL1xuICAgIGZvcm1JdGVtOiB7XG4gICAgICB0eXBlOiBPYmplY3QsXG4gICAgICBkZWZhdWx0OiB1bmRlZmluZWRcbiAgICB9LFxuICAgIC8qKlxuICAgICAqIGhlbHBlcuS9jee9ru+8mntwb3NpdGlvbjonbGFiZWwnfVxuICAgICAqL1xuICAgIGhlbHBlcjoge1xuICAgICAgdHlwZTogT2JqZWN0XG4gICAgfSxcblxuICAgIHdhdGNoOiB7XG4gICAgICB0eXBlOiBGdW5jdGlvbixcbiAgICAgIGRlZmF1bHQ6IG51bGxcbiAgICB9XG4gIH0sXG4gIGVtaXRzOiBbXCJyZXNldFwiLCBcInN1Ym1pdFwiLCBcInN1Y2Nlc3NcIiwgXCJ2YWxpZGF0aW9uRXJyb3JcIiwgXCJ2YWx1ZS1jaGFuZ2VcIiwgXCJpbml0XCJdLFxuICBzZXR1cChwcm9wcywgY3R4KSB7XG4gICAgY29uc3QgeyBtZXJnZSB9ID0gdXNlTWVyZ2UoKTtcbiAgICBjb25zdCB7IHVpIH0gPSB1c2VVaSgpO1xuICAgIGNvbnN0IHsgQXN5bmNDb21wdXRlVmFsdWUsIGRvQ29tcHV0ZWQgfSA9IHVzZUNvbXB1dGUoKTtcbiAgICBjb25zdCBmb3JtUmVmID0gcmVmKCk7XG4gICAgY29uc3QgZm9ybTogVW53cmFwTmVzdGVkUmVmczxhbnk+ID0gcmVhY3RpdmUoe30pO1xuICAgIGNvbnN0IHsgcHJveHkgfSA9IGdldEN1cnJlbnRJbnN0YW5jZSgpO1xuXG4gICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIHZ1ZS9uby1zZXR1cC1wcm9wcy1kZXN0cnVjdHVyZVxuICAgIF8uZWFjaChwcm9wcy5jb2x1bW5zLCAoaXRlbTogYW55KSA9PiB7XG4gICAgICBpZiAoaXRlbS52YWx1ZSAhPSBudWxsICYmIChpdGVtLnZhbHVlIGluc3RhbmNlb2YgQXN5bmNDb21wdXRlVmFsdWUgfHwgaXRlbS52YWx1ZSBpbnN0YW5jZW9mIENvbXB1dGVWYWx1ZSkpIHtcbiAgICAgICAgbG9nZ2VyLndhcm4oXCJmb3JtLnZhbHVl6YWN572u5LiN5pSv5oyBQ29tcHV0ZS9Bc3luY0NvbXB1dGXnsbvlnovnmoTliqjmgIHorqHnrpdcIik7XG4gICAgICB9XG4gICAgfSk7XG4gICAgZnVuY3Rpb24gY3JlYXRlSW5pdGlhbEZvcm0oKSB7XG4gICAgICBjb25zdCBmb3JtID0ge307XG4gICAgICAvLyDliJ3lp4vmlbDmja7otYvlgLxcbiAgICAgIF8uZWFjaChwcm9wcy5jb2x1bW5zLCAoaXRlbTogYW55LCBrZXk6IGFueSkgPT4ge1xuICAgICAgICBjb25zdCBkZWZWYWx1ZSA9IHVucmVmKGl0ZW0udmFsdWUpO1xuICAgICAgICBpZiAoZGVmVmFsdWUgIT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgIF8uc2V0KGZvcm0sIGtleSwgZGVmVmFsdWUpO1xuICAgICAgICB9XG4gICAgICB9KTtcbiAgICAgIG1lcmdlKGZvcm0sIF8uY2xvbmVEZWVwKHByb3BzLmluaXRpYWxGb3JtKSk7XG4gICAgICByZXR1cm4gZm9ybTtcbiAgICB9XG5cbiAgICBjb25zdCBpbml0aWFsRm9ybSA9IGNyZWF0ZUluaXRpYWxGb3JtKCk7XG4gICAgc2V0Rm9ybURhdGEoaW5pdGlhbEZvcm0pO1xuXG4gICAgY29uc3Qgc2NvcGU6IFJlZjxGb3JtU2NvcGVDb250ZXh0PiA9IGNvbXB1dGVkKCgpID0+IHtcbiAgICAgIHJldHVybiB7XG4gICAgICAgIHJvdzogaW5pdGlhbEZvcm0sXG4gICAgICAgIGZvcm0sXG4gICAgICAgIGluZGV4OiBwcm9wcy5pbmRleCxcbiAgICAgICAgbW9kZTogcHJvcHMubW9kZSB8fCBcImFkZFwiLFxuICAgICAgICBhdHRyczogY3R4LmF0dHJzLFxuICAgICAgICBnZXRDb21wb25lbnRSZWZcbiAgICAgIH0gYXMgRm9ybVNjb3BlQ29udGV4dDtcbiAgICB9KTtcblxuICAgIGZ1bmN0aW9uIGdldENvbnRleHRGbigpIHtcbiAgICAgIHJldHVybiBzY29wZS52YWx1ZTtcbiAgICB9XG5cbiAgICBjb25zdCBjb21wdXRlZENvbHVtbnMgPSBkb0NvbXB1dGVkKCgpID0+IHtcbiAgICAgIHJldHVybiBwcm9wcy5jb2x1bW5zO1xuICAgIH0sIGdldENvbnRleHRGbik7XG4gICAgLy9mb3JtLnZhbHVlQnVpbGRlclxuXG4gICAgZnVuY3Rpb24gZG9WYWx1ZUJ1aWxkZXIoZm9ybTogYW55KSB7XG4gICAgICBpZiAoZm9ybSA9PSBudWxsKSB7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cbiAgICAgIF8uZWFjaChwcm9wcy5jb2x1bW5zLCAoaXRlbTogYW55LCBrZXk6IGFueSkgPT4ge1xuICAgICAgICBsZXQgdmFsdWUgPSBfLmdldChmb3JtLCBrZXkpO1xuICAgICAgICBpZiAoaXRlbS52YWx1ZUJ1aWxkZXIpIHtcbiAgICAgICAgICBpdGVtLnZhbHVlQnVpbGRlcih7XG4gICAgICAgICAgICB2YWx1ZSxcbiAgICAgICAgICAgIGtleSxcbiAgICAgICAgICAgIHJvdzogaW5pdGlhbEZvcm0sXG4gICAgICAgICAgICBmb3JtLFxuICAgICAgICAgICAgaW5kZXg6IHByb3BzLmluZGV4LFxuICAgICAgICAgICAgbW9kZTogcHJvcHMubW9kZVxuICAgICAgICAgIH0pO1xuICAgICAgICB9XG4gICAgICB9KTtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBnZXRGb3JtRGF0YSgpIHtcbiAgICAgIHJldHVybiBmb3JtO1xuICAgIH1cbiAgICBmdW5jdGlvbiBzZXRGb3JtRGF0YShmb3JtRGF0YTogYW55LCBvcHRpb25zOiBTZXRGb3JtRGF0YU9wdGlvbnMgPSB7fSkge1xuICAgICAgZG9WYWx1ZUJ1aWxkZXIoZm9ybURhdGEpO1xuXG4gICAgICBpZiAob3B0aW9ucy5tZXJnZUZvcm0gPT09IGZhbHNlKSB7XG4gICAgICAgIGZvciAoY29uc3Qga2V5IGluIGZvcm0pIHtcbiAgICAgICAgICBkZWxldGUgZm9ybVtrZXldO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgICBtZXJnZShmb3JtLCBmb3JtRGF0YSk7XG4gICAgICBjb25zdCB7IHZhbHVlQ2hhbmdlIH0gPSBvcHRpb25zO1xuICAgICAgaWYgKHZhbHVlQ2hhbmdlKSB7XG4gICAgICAgIF8uZm9yRWFjaChwcm9wcy5jb2x1bW5zLCAoY29sdW1uOiBhbnksIGtleTogYW55KSA9PiB7XG4gICAgICAgICAgY29uc3QgdmFsdWUgPSBmb3JtW2tleV07XG4gICAgICAgICAgZG9WYWx1ZUNoYW5nZShrZXksIHZhbHVlKTtcbiAgICAgICAgfSk7XG4gICAgICB9XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gbWVyZ2VDb2woLi4uY29sOiBhbnkpIHtcbiAgICAgIHJldHVybiBtZXJnZSh7fSwgcHJvcHMuY29sLCAuLi5jb2wpO1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIGJ1aWxkSXRlbVNjb3BlKGl0ZW06IGFueSk6IEZvcm1TY29wZUNvbnRleHQge1xuICAgICAgcmV0dXJuIHsga2V5OiBpdGVtLmtleSwgLi4uc2NvcGUudmFsdWUgfTtcbiAgICB9XG5cbiAgICAvLyBkb1ZhbHVlQnVpbGRlcihmb3JtKTtcblxuICAgIC8vIHdhdGNoKFxuICAgIC8vICAgKCkgPT4gcHJvcHMuaW5pdGlhbEZvcm0sXG4gICAgLy8gICAoKSA9PiB7XG4gICAgLy8gICAgIHNldEZvcm1EYXRhKGNyZWF0ZUluaXRpYWxGb3JtKCksIHsgbWVyZ2VGb3JtOiBmYWxzZSB9KTtcbiAgICAvLyAgIH1cbiAgICAvLyApO1xuXG4gICAgZnVuY3Rpb24gZG9WYWx1ZUNoYW5nZShrZXk6IHN0cmluZywgdmFsdWU6IGFueSkge1xuICAgICAgY29uc3QgZXZlbnQgPSB7IGtleSwgdmFsdWUsIGZvcm1SZWY6IHByb3h5LCAuLi5zY29wZS52YWx1ZSwgaW1tZWRpYXRlOiBmYWxzZSB9O1xuICAgICAgY3R4LmVtaXQoXCJ2YWx1ZS1jaGFuZ2VcIiwgZXZlbnQpO1xuICAgICAgbGV0IHZhbHVlQ2hhbmdlID0gcHJvcHMuY29sdW1uc1trZXldLnZhbHVlQ2hhbmdlO1xuICAgICAgaWYgKHZhbHVlQ2hhbmdlKSB7XG4gICAgICAgIGlmICh2YWx1ZUNoYW5nZSBpbnN0YW5jZW9mIEZ1bmN0aW9uKSB7XG4gICAgICAgICAgdmFsdWVDaGFuZ2UoZXZlbnQpO1xuICAgICAgICB9IGVsc2UgaWYgKHZhbHVlQ2hhbmdlLmhhbmRsZSkge1xuICAgICAgICAgIHZhbHVlQ2hhbmdlLmhhbmRsZShldmVudCk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG5cbiAgICBjb25zdCBmb3JtSXRlbVJlZnM6IFJlZiA9IHJlZih7fSk7XG5cbiAgICBmdW5jdGlvbiBnZXRGb3JtSXRlbVJlZihrZXk6IHN0cmluZykge1xuICAgICAgcmV0dXJuIGZvcm1JdGVtUmVmcy52YWx1ZVtrZXldO1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIGdldENvbXBvbmVudFJlZihrZXk6IHN0cmluZywgaXNBc3luYyA9IGZhbHNlKSB7XG4gICAgICByZXR1cm4gZ2V0Rm9ybUl0ZW1SZWYoa2V5KT8uZ2V0Q29tcG9uZW50UmVmKGlzQXN5bmMpO1xuICAgIH1cblxuICAgIGNvbnN0IGdyb3VwQWN0aXZlS2V5ID0gcmVmKFtdKTtcblxuICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSB2dWUvbm8tc2V0dXAtcHJvcHMtZGVzdHJ1Y3R1cmVcbiAgICBfLmZvckVhY2gocHJvcHMuZ3JvdXA/Lmdyb3VwcywgKGdyb3VwSXRlbTogYW55LCBrZXk6IGFueSkgPT4ge1xuICAgICAgaWYgKGdyb3VwSXRlbS5jb2xsYXBzZWQgIT09IHRydWUpIHtcbiAgICAgICAgZ3JvdXBBY3RpdmVLZXkudmFsdWUucHVzaChrZXkpO1xuICAgICAgfVxuICAgIH0pO1xuICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSB2dWUvbm8tc2V0dXAtcHJvcHMtZGVzdHJ1Y3R1cmVcbiAgICBpZiAocHJvcHMuZ3JvdXA/Lmdyb3VwVHlwZSA9PT0gXCJ0YWJzXCIpIHtcbiAgICAgIGdyb3VwQWN0aXZlS2V5LnZhbHVlID0gZ3JvdXBBY3RpdmVLZXkudmFsdWUubGVuZ3RoID4gMCA/IGdyb3VwQWN0aXZlS2V5LnZhbHVlWzBdIDogbnVsbDtcbiAgICB9XG5cbiAgICAvL+aehOW7uuWIhue7hOaVsOaNrlxuICAgIGNvbnN0IGNvbXB1dGVkR3JvdXAgPSBkb0NvbXB1dGVkKFxuICAgICAgKCkgPT4ge1xuICAgICAgICByZXR1cm4gcHJvcHMuZ3JvdXA7XG4gICAgICB9LFxuICAgICAgZ2V0Q29udGV4dEZuLFxuICAgICAgbnVsbCxcbiAgICAgIChncm91cCkgPT4ge1xuICAgICAgICBpZiAoIWdyb3VwKSB7XG4gICAgICAgICAgcmV0dXJuIHt9O1xuICAgICAgICB9XG4gICAgICAgIC8v5om+5Ye65rKh5pyJ5re75Yqg6L+b5YiG57uE55qE5a2X5q61XG4gICAgICAgIGNvbnN0IGdyb3VwZWRLZXlzOiBhbnkgPSB7fTtcbiAgICAgICAgXy5mb3JFYWNoKGdyb3VwPy5ncm91cHMsIChncm91cEl0ZW06IGFueSwga2V5OiBzdHJpbmcpID0+IHtcbiAgICAgICAgICBfLmZvckVhY2goZ3JvdXBJdGVtLmNvbHVtbnMsIChpdGVtOiBhbnkpID0+IHtcbiAgICAgICAgICAgIGlmIChjb21wdXRlZENvbHVtbnMudmFsdWVbaXRlbV0gPT0gbnVsbCkge1xuICAgICAgICAgICAgICB1dGlscy5sb2dnZXIud2FybihcIuaXoOaViOeahOWIhue7hOWtl+aute+8mlwiICsgaXRlbSk7XG4gICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGdyb3VwZWRLZXlzW2l0ZW1dID0ga2V5O1xuICAgICAgICAgIH0pO1xuICAgICAgICB9KTtcblxuICAgICAgICBjb25zdCB0eXBlID0gZ3JvdXAuZ3JvdXBUeXBlO1xuICAgICAgICBsZXQgd3JhcHBlciA9IHtcbiAgICAgICAgICBwYXJlbnQ6IHVpLmNvbGxhcHNlLm5hbWUsXG4gICAgICAgICAgY2hpbGQ6IHVpLmNvbGxhcHNlSXRlbS5uYW1lXG4gICAgICAgIH07XG4gICAgICAgIGlmICh0eXBlID09PSBcInRhYnNcIikge1xuICAgICAgICAgIHdyYXBwZXIucGFyZW50ID0gdWkudGFicy5uYW1lO1xuICAgICAgICAgIHdyYXBwZXIuY2hpbGQgPSB1aS50YWJQYW5lLm5hbWU7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIG1lcmdlKFxuICAgICAgICAgIHtcbiAgICAgICAgICAgIHdyYXBwZXIsXG4gICAgICAgICAgICBncm91cGVkS2V5c1xuICAgICAgICAgIH0sXG4gICAgICAgICAgZ3JvdXBcbiAgICAgICAgKTtcbiAgICAgIH1cbiAgICApO1xuXG4gICAgY29uc3QgY29tcHV0ZWREZWZhdWx0Q29sdW1ucyA9IGNvbXB1dGVkKCgpID0+IHtcbiAgICAgIGNvbnN0IGNvbHVtbnM6IGFueSA9IFtdO1xuICAgICAgLy9kZWZhdWx0IGNvbHVtbnPmjpLluo9cbiAgICAgIF8uZm9yRWFjaChjb21wdXRlZENvbHVtbnMudmFsdWUsICh2YWx1ZTogYW55LCBrZXk6IHN0cmluZykgPT4ge1xuICAgICAgICBjb25zdCBpdGVtID0gXy5jbG9uZURlZXAocHJvcHMuZm9ybUl0ZW0gfHwge30pO1xuICAgICAgICB2YWx1ZSA9IG1lcmdlKGl0ZW0sIHZhbHVlKTtcbiAgICAgICAgdmFsdWUua2V5ID0ga2V5O1xuICAgICAgICBpZiAodmFsdWUub3JkZXIgPT0gbnVsbCkge1xuICAgICAgICAgIHZhbHVlLm9yZGVyID0gQ29uc3RhbnRzLm9yZGVyRGVmYXVsdDtcbiAgICAgICAgfVxuICAgICAgICBpZiAoY29tcHV0ZWRHcm91cC52YWx1ZT8uZ3JvdXBlZEtleXMgPT0gbnVsbCB8fCBjb21wdXRlZEdyb3VwLnZhbHVlPy5ncm91cGVkS2V5c1trZXldID09IG51bGwpIHtcbiAgICAgICAgICBjb2x1bW5zLnB1c2godmFsdWUpO1xuICAgICAgICB9XG4gICAgICAgIHZhbHVlLmNvbCA9IG1lcmdlQ29sKHZhbHVlLmNvbCk7XG4gICAgICB9KTtcbiAgICAgIC8v5o6S5bqPXG4gICAgICBjb2x1bW5zLnNvcnQoKGE6IGFueSwgYjogYW55KSA9PiB7XG4gICAgICAgIHJldHVybiBhLm9yZGVyIC0gYi5vcmRlcjtcbiAgICAgIH0pO1xuXG4gICAgICByZXR1cm4gY29sdW1ucztcbiAgICB9KTtcblxuICAgIGZ1bmN0aW9uIGdldEZvcm1SZWYoKSB7XG4gICAgICByZXR1cm4gZm9ybVJlZi52YWx1ZTtcbiAgICB9XG4gICAgYXN5bmMgZnVuY3Rpb24gcmVzZXQoKSB7XG4gICAgICAvLyB1aS5mb3JtLnJlc2V0V3JhcChmb3JtUmVmLnZhbHVlLCB7IGZvcm0sIGluaXRpYWxGb3JtOiBjcmVhdGVJbml0aWFsRm9ybSgpIH0pO1xuICAgICAgY29uc3QgaW5pdGlhbEZvcm0gPSBjcmVhdGVJbml0aWFsRm9ybSgpO1xuICAgICAgY29uc3QgZW50cmllcyA9IF8uZW50cmllcyhmb3JtKTtcbiAgICAgIGZvciAoY29uc3QgZW50cnkgb2YgZW50cmllcykge1xuICAgICAgICBjb25zdCBpbml0aWFsVmFsdWUgPSBfLmdldChpbml0aWFsRm9ybSwgZW50cnlbMF0pO1xuICAgICAgICBpZiAoaW5pdGlhbFZhbHVlID09IG51bGwpIHtcbiAgICAgICAgICBfLnVuc2V0KGZvcm0sIGVudHJ5WzBdKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBfLnNldChmb3JtLCBlbnRyeVswXSwgaW5pdGlhbFZhbHVlKTtcbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICBpZiAocHJvcHMuZG9SZXNldCkge1xuICAgICAgICBhd2FpdCBwcm9wcy5kb1Jlc2V0KHNjb3BlLnZhbHVlKTtcbiAgICAgIH1cbiAgICAgIGN0eC5lbWl0KFwicmVzZXRcIik7XG4gICAgfVxuXG4gICAgY29uc3QgdmFsaWRSZWY6IFJlZiA9IHJlZigpO1xuICAgIGNvbnN0IGVycm9yc1JlZjogUmVmID0gcmVmKHt9KTtcblxuICAgIGZ1bmN0aW9uIGZpbGxHcm91cEVycm9yKGZpZWxkRXJyb3JzOiBhbnkpIHtcbiAgICAgIGlmICghY29tcHV0ZWRHcm91cC52YWx1ZT8uZ3JvdXBlZEtleXMpIHtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuICAgICAgZm9yIChsZXQga2V5IGluIGZpZWxkRXJyb3JzKSB7XG4gICAgICAgIGNvbnN0IGdyb3VwID0gY29tcHV0ZWRHcm91cC52YWx1ZT8uZ3JvdXBlZEtleXNba2V5XTtcbiAgICAgICAgaWYgKGdyb3VwICE9IG51bGwpIHtcbiAgICAgICAgICBmaWVsZEVycm9yc1tcImdyb3VwLlwiICsgZ3JvdXBdID0gdHJ1ZTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cbiAgICBhc3luYyBmdW5jdGlvbiBzdWJtaXQoKSB7XG4gICAgICBjb25zdCB2YWxpZGF0ZVNjb3BlID0geyAuLi5zY29wZS52YWx1ZSwgZm9ybSB9O1xuICAgICAgaWYgKHByb3BzLmJlZm9yZVZhbGlkYXRlKSB7XG4gICAgICAgIGNvbnN0IHJldCA9IGF3YWl0IHByb3BzLmJlZm9yZVZhbGlkYXRlKHZhbGlkYXRlU2NvcGUpO1xuICAgICAgICBpZiAocmV0ID09PSBmYWxzZSkge1xuICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICB0cnkge1xuICAgICAgICBlcnJvcnNSZWYudmFsdWUgPSB7fTtcbiAgICAgICAgYXdhaXQgdWkuZm9ybS52YWxpZGF0ZVdyYXAoZm9ybVJlZi52YWx1ZSk7XG4gICAgICAgIHZhbGlkUmVmLnZhbHVlID0gdHJ1ZTtcbiAgICAgIH0gY2F0Y2ggKGU6IGFueSkge1xuICAgICAgICB2YWxpZFJlZi52YWx1ZSA9IGZhbHNlO1xuICAgICAgICBjb25zdCB2YWxpZGF0ZUVycm9ycyA9IHVpLmZvcm0udHJhbnNmb3JtVmFsaWRhdGVFcnJvcnMoZSk7XG4gICAgICAgIGZpbGxHcm91cEVycm9yKHZhbGlkYXRlRXJyb3JzKTtcbiAgICAgICAgZXJyb3JzUmVmLnZhbHVlID0gdmFsaWRhdGVFcnJvcnM7XG4gICAgICAgIGN0eC5lbWl0KFwidmFsaWRhdGlvbkVycm9yXCIsIHNjb3BlLnZhbHVlKTtcbiAgICAgICAgdGhyb3cgZTtcbiAgICAgIH1cblxuICAgICAgY29uc3QgZm9ybURhdGEgPSBfLmNsb25lRGVlcCh0b1Jhdyhmb3JtKSk7XG4gICAgICBjb25zdCBzdWJtaXRTY29wZSA9IHsgLi4uc2NvcGUudmFsdWUsIGZvcm06IGZvcm1EYXRhIH07XG4gICAgICBsb2dnZXIuZGVidWcoXCJmb3JtIHN1Ym1pdFwiLCBKU09OLnN0cmluZ2lmeShmb3JtKSk7XG4gICAgICBfLmVhY2gocHJvcHMuY29sdW1ucywgKGl0ZW06IGFueSwga2V5OiBzdHJpbmcpID0+IHtcbiAgICAgICAgbGV0IHZhbHVlID0gXy5nZXQoZm9ybURhdGEsIGtleSk7XG4gICAgICAgIGlmIChpdGVtLnZhbHVlUmVzb2x2ZSkge1xuICAgICAgICAgIGl0ZW0udmFsdWVSZXNvbHZlKHtcbiAgICAgICAgICAgIHZhbHVlLFxuICAgICAgICAgICAga2V5LFxuICAgICAgICAgICAgLi4uc3VibWl0U2NvcGVcbiAgICAgICAgICB9KTtcbiAgICAgICAgfVxuICAgICAgfSk7XG5cbiAgICAgIGlmIChwcm9wcy5iZWZvcmVTdWJtaXQpIHtcbiAgICAgICAgY29uc3QgcmV0ID0gYXdhaXQgcHJvcHMuYmVmb3JlU3VibWl0KHN1Ym1pdFNjb3BlKTtcbiAgICAgICAgaWYgKHJldCA9PT0gZmFsc2UpIHtcbiAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgLy/np7vpmaTkuI3lhYHorrjmj5DkuqTnmoTlrZfmrrVcbiAgICAgIF8uZWFjaChwcm9wcy5jb2x1bW5zLCAoaXRlbTogYW55LCBrZXk6IHN0cmluZykgPT4ge1xuICAgICAgICBpZiAoaXRlbS5zdWJtaXQgPT09IGZhbHNlKSB7XG4gICAgICAgICAgXy51bnNldChmb3JtRGF0YSwga2V5KTtcbiAgICAgICAgfSBlbHNlIGlmIChpdGVtLnN1Ym1pdCA9PT0gdHJ1ZSkge1xuICAgICAgICAgIC8v6K6+572u5by65Yi25o+Q5Lqk55qE5a2X5q61XG4gICAgICAgICAgXy5zZXQoZm9ybURhdGEsIGtleSwgZm9ybURhdGFba2V5XSk7XG4gICAgICAgIH1cbiAgICAgIH0pO1xuXG4gICAgICBpZiAocHJvcHMuZG9TdWJtaXQpIHtcbiAgICAgICAgY29uc3QgcmVzID0gYXdhaXQgcHJvcHMuZG9TdWJtaXQoc3VibWl0U2NvcGUpO1xuICAgICAgICBzdWJtaXRTY29wZS5yZXMgPSByZXM7XG4gICAgICAgIGlmIChyZXMgPT09IGZhbHNlKSB7XG4gICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgICBjdHguZW1pdChcInN1Ym1pdFwiLCBzdWJtaXRTY29wZSk7XG4gICAgICBpZiAocHJvcHMuYWZ0ZXJTdWJtaXQpIHtcbiAgICAgICAgY29uc3Qgc3VjY2VzcyA9IGF3YWl0IHByb3BzLmFmdGVyU3VibWl0KHN1Ym1pdFNjb3BlKTtcbiAgICAgICAgaWYgKHN1Y2Nlc3MgPT09IGZhbHNlKSB7XG4gICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgICBjdHguZW1pdChcInN1Y2Nlc3NcIiwgc3VibWl0U2NvcGUpO1xuXG4gICAgICByZXR1cm4gc3VibWl0U2NvcGU7XG4gICAgfVxuXG4gICAgb25Nb3VudGVkKCgpID0+IHtcbiAgICAgIC8vIGltbWVkaWF0ZSB2YWx1ZUNoYW5nZeinpuWPkVxuICAgICAgXy5mb3JFYWNoKGNvbXB1dGVkQ29sdW1ucy52YWx1ZSwgKGl0ZW06IGFueSwga2V5OiBzdHJpbmcpID0+IHtcbiAgICAgICAgaWYgKGl0ZW0udmFsdWVDaGFuZ2UgPT0gbnVsbCkge1xuICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuICAgICAgICBsZXQgdmFsdWVDaGFuZ2UgPSBpdGVtLnZhbHVlQ2hhbmdlO1xuICAgICAgICBpZiAodmFsdWVDaGFuZ2UgJiYgdmFsdWVDaGFuZ2UuaW1tZWRpYXRlID09PSB0cnVlICYmIHZhbHVlQ2hhbmdlLmhhbmRsZSkge1xuICAgICAgICAgIGNvbnN0IGV2ZW50ID0geyBrZXksIHZhbHVlOiBmb3JtW2tleV0sIGZvcm1SZWY6IHByb3h5LCAuLi5zY29wZS52YWx1ZSwgaW1tZWRpYXRlOiB0cnVlIH07XG4gICAgICAgICAgaWYgKHZhbHVlQ2hhbmdlLmhhbmRsZSkge1xuICAgICAgICAgICAgdmFsdWVDaGFuZ2UuaGFuZGxlKGV2ZW50KTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH0pO1xuICAgIH0pO1xuXG4gICAgZnVuY3Rpb24gZm9ybUl0ZW1TaG93KGl0ZW06IGFueSkge1xuICAgICAgaWYgKGl0ZW0gJiYgaXRlbS5zaG93ICE9PSBmYWxzZSkge1xuICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgIH1cbiAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9XG4gICAgZnVuY3Rpb24gZ3JvdXBJdGVtU2hvdyhncm91cEl0ZW06IGFueSkge1xuICAgICAgaWYgKCFncm91cEl0ZW0uY29sdW1ucykge1xuICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICB9XG4gICAgICBpZiAoZ3JvdXBJdGVtLnNob3cgPT09IGZhbHNlKSB7XG4gICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgIH1cblxuICAgICAgZm9yIChsZXQga2V5IG9mIGdyb3VwSXRlbS5jb2x1bW5zKSB7XG4gICAgICAgIGlmIChjb21wdXRlZENvbHVtbnMudmFsdWVba2V5XSA9PSBudWxsKSB7XG4gICAgICAgICAgY29udGludWU7XG4gICAgICAgIH1cbiAgICAgICAgY29uc3QgaXNGaWVsZFNob3cgPSBmb3JtSXRlbVNob3coY29tcHV0ZWRDb2x1bW5zLnZhbHVlW2tleV0pO1xuICAgICAgICBpZiAoaXNGaWVsZFNob3cpIHtcbiAgICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH1cblxuICAgIGlmIChwcm9wcy53YXRjaCkge1xuICAgICAgd2F0Y2goXG4gICAgICAgICgpID0+IHtcbiAgICAgICAgICByZXR1cm4gZm9ybTtcbiAgICAgICAgfSxcbiAgICAgICAgKG5ld1ZhbCwgb2xkVmFsKSA9PiB7XG4gICAgICAgICAgaWYgKHByb3BzLndhdGNoKSB7XG4gICAgICAgICAgICBwcm9wcy53YXRjaChzY29wZS52YWx1ZSk7XG4gICAgICAgICAgfVxuICAgICAgICB9LFxuICAgICAgICB7XG4gICAgICAgICAgZGVlcDogdHJ1ZSxcbiAgICAgICAgICBpbW1lZGlhdGU6IHRydWVcbiAgICAgICAgfVxuICAgICAgKTtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBpc0RpcnR5KCkge1xuICAgICAgY29uc3QgYmVmb3JlID0gSlNPTi5zdHJpbmdpZnkoaW5pdGlhbEZvcm0pO1xuICAgICAgY29uc3QgYWZ0ZXIgPSBKU09OLnN0cmluZ2lmeShmb3JtKTtcbiAgICAgIHJldHVybiBiZWZvcmUgIT09IGFmdGVyO1xuICAgIH1cblxuICAgIGNvbnN0IG1lcmdlZFNsb3RzID0gY29tcHV0ZWQoKCkgPT4ge1xuICAgICAgcmV0dXJuIF8ubWVyZ2Uoe30sIHByb3BzLnNsb3RzLCBjdHguc2xvdHMpO1xuICAgIH0pO1xuXG4gICAgY3R4LmVtaXQoXCJpbml0XCIsIHNjb3BlLnZhbHVlKTtcblxuICAgIHJldHVybiB7XG4gICAgICBnZXQ6IChmb3JtOiBhbnksIGtleTogc3RyaW5nKSA9PiB7XG4gICAgICAgIHJldHVybiBfLmdldChmb3JtLCBrZXkpO1xuICAgICAgfSxcbiAgICAgIHNldDogKGZvcm06IGFueSwga2V5OiBzdHJpbmcsIHZhbHVlOiBhbnkpID0+IHtcbiAgICAgICAgXy5zZXQoZm9ybSwga2V5LCB2YWx1ZSk7XG4gICAgICAgIGRvVmFsdWVDaGFuZ2Uoa2V5LCB2YWx1ZSk7XG4gICAgICB9LFxuICAgICAgdWksXG4gICAgICB2YWxpZFJlZixcbiAgICAgIGVycm9yc1JlZixcbiAgICAgIGZvcm1SZWYsXG4gICAgICBjb21wdXRlZENvbHVtbnMsXG4gICAgICBjb21wdXRlZERlZmF1bHRDb2x1bW5zLFxuICAgICAgc3VibWl0LFxuICAgICAgcmVzZXQsXG4gICAgICBnZXRGb3JtUmVmLFxuICAgICAgc2NvcGUsXG4gICAgICBidWlsZEl0ZW1TY29wZSxcbiAgICAgIGdyb3VwQWN0aXZlS2V5LFxuICAgICAgZm9ybSxcbiAgICAgIGZvcm1JdGVtUmVmcyxcbiAgICAgIGdldEZvcm1EYXRhLFxuICAgICAgc2V0Rm9ybURhdGEsXG4gICAgICBnZXRDb21wb25lbnRSZWYsXG4gICAgICBtZXJnZUNvbCxcbiAgICAgIGNvbXB1dGVkR3JvdXAsXG4gICAgICBnZXRDb250ZXh0Rm4sXG4gICAgICBmb3JtSXRlbVNob3csXG4gICAgICBncm91cEl0ZW1TaG93LFxuICAgICAgaXNEaXJ0eSxcbiAgICAgIG1lcmdlZFNsb3RzXG4gICAgfTtcbiAgfVxufSk7XG48L3NjcmlwdD5cblxuPHN0eWxlIGxhbmc9XCJsZXNzXCI+XG4uZnMtZm9ybSB7XG4gIC5lbC1jb2xsYXBzZS1pdGVtX19jb250ZW50IHtcbiAgICBtYXJnaW4tdG9wOiAxMHB4O1xuICAgIHBhZGRpbmctbGVmdDogMzBweDtcbiAgICBwYWRkaW5nLXJpZ2h0OiAzMHB4O1xuICB9XG5cbiAgLmZzLWZvcm0taW52YWxpZCB7XG4gIH1cblxuICAuZnMtZm9ybS1pdGVtLWNvbXBvbmVudCB7XG4gICAgLmFudC1waWNrZXIsXG4gICAgLmFudC1pbnB1dC1hZmZpeC13cmFwcGVyLFxuICAgIC5hbnQtaW5wdXQtbnVtYmVyLFxuICAgIC5lbC1jYXNjYWRlcixcbiAgICAuZWwtZGF0ZS1lZGl0b3IsXG4gICAgLmVsLWlucHV0LW51bWJlcixcbiAgICAuZWwtaW5wdXQsXG4gICAgPiAuZWwtc2VsZWN0LFxuICAgID4gLm4tc2VsZWN0LFxuICAgIC5uLWRhdGUtcGlja2VyLFxuICAgIC5uLWlucHV0LW51bWJlciB7XG4gICAgICB3aWR0aDogMTAwJTtcbiAgICB9XG5cbiAgICAuZWwtZGF0ZS1lZGl0b3IgLmVsLXJhbmdlX19pY29uIHtcbiAgICAgIG1hcmdpbi1sZWZ0OiAxMHB4O1xuICAgIH1cbiAgICAuZWwtZGF0ZS1lZGl0b3IgLmVsLXJhbmdlX19jbG9zZS1pY29uIHtcbiAgICAgIG1hcmdpbi1yaWdodDogMTBweDtcbiAgICB9XG5cbiAgICAuZWwtcmFuZ2UtZWRpdG9yLmVsLWlucHV0X193cmFwcGVyIHtcbiAgICAgIHBhZGRpbmc6IDA7XG4gICAgfVxuICB9XG5cbiAgLy8uZWwtZGF0ZS1lZGl0b3IuZWwtaW5wdXRfX3dyYXBwZXIge1xuICAvLyAgd2lkdGg6IDEwMCU7XG4gIC8vfVxufVxuLmZzLWZvcm0tZ3JpZCB7XG4gIC5mcy1yb3cge1xuICAgIGRpc3BsYXk6IGdyaWQ7XG4gICAgZ3JpZC10ZW1wbGF0ZS1jb2x1bW5zOiA1MCUgNTAlO1xuICAgIC8vIGdhcDogMCAyMHB4OyAvL+WIl+mXtOi3nSAyMHB4XG4gICAgLmZzLWNvbCB7XG4gICAgICBtYXgtd2lkdGg6IDEwMCU7XG4gICAgICB3aWR0aDogMTAwJTtcbiAgICB9XG5cbiAgICAvLyBhbnRkdlxuICAgIC5hbnQtZm9ybS1pdGVtLWxhYmVsIHtcbiAgICAgIHdpZHRoOiAxMDBweDtcbiAgICAgIGZsZXg6IG5vbmU7XG4gICAgICBtYXgtd2lkdGg6IG5vbmU7XG4gICAgfVxuICAgIC5hbnQtZm9ybS1pdGVtLWNvbnRyb2wtd3JhcHBlciB7XG4gICAgICBmbGV4OiAxO1xuICAgICAgbWF4LXdpZHRoOiBub25lO1xuICAgIH1cbiAgfVxuXG4gIC8vIGVsZW1lbnRcbiAgLmVsLXJvdzo6YWZ0ZXIsXG4gIC5lbC1yb3c6OmJlZm9yZSB7XG4gICAgZGlzcGxheTogbm9uZTtcbiAgfVxufVxuLmZzLWZvcm0tZmxleCB7XG4gIGRpc3BsYXk6IGZsZXg7XG4gIGp1c3RpZnktY29udGVudDogZmxleC1zdGFydDtcbiAgYWxpZ24taXRlbXM6IGJhc2VsaW5lO1xuICBmbGV4LXdyYXA6IHdyYXA7XG4gIC5mcy1yb3cge1xuICAgIHdpZHRoOiAxMDAlO1xuICB9XG59XG48L3N0eWxlPlxuIiwiPHRlbXBsYXRlPlxuICA8Y29tcG9uZW50XG4gICAgOmlzPVwidWkuZm9ybS5uYW1lXCJcbiAgICByZWY9XCJmb3JtUmVmXCJcbiAgICBjbGFzcz1cImZzLWZvcm1cIlxuICAgIDpjbGFzcz1cIntcbiAgICAgICdmcy1mb3JtLWdyaWQnOiBkaXNwbGF5ID09PSAnZ3JpZCcsXG4gICAgICAnZnMtZm9ybS1mbGV4JzogZGlzcGxheSA9PT0gJ2ZsZXgnLFxuICAgICAgJ2ZzLWZvcm0taW52YWxpZCc6IHZhbGlkUmVmID09PSBmYWxzZVxuICAgIH1cIlxuICAgIG9uc3VibWl0PVwiZXZlbnQucHJldmVudERlZmF1bHQoKTtcIlxuICAgIDptb2RlbD1cImZvcm1cIlxuICA+XG4gICAgPCEtLSByb3cgLS0+XG4gICAgPGNvbXBvbmVudCA6aXM9XCJ1aS5yb3cubmFtZVwiIGNsYXNzPVwiZnMtcm93XCIgdi1iaW5kPVwicm93XCI+XG4gICAgICA8IS0tIGNvbCAtLT5cbiAgICAgIDx0ZW1wbGF0ZSB2LWZvcj1cIml0ZW0gaW4gY29tcHV0ZWREZWZhdWx0Q29sdW1uc1wiIDprZXk9XCJpdGVtPy5rZXlcIj5cbiAgICAgICAgPGNvbXBvbmVudCA6aXM9XCJ1aS5jb2wubmFtZVwiIHYtaWY9XCJmb3JtSXRlbVNob3coaXRlbSlcIiBjbGFzcz1cImZzLWNvbFwiIHYtYmluZD1cIml0ZW0uY29sXCI+XG4gICAgICAgICAgPGZzLWZvcm0taXRlbVxuICAgICAgICAgICAgdi1pZj1cIml0ZW0uYmxhbmsgIT09IHRydWVcIlxuICAgICAgICAgICAgOnJlZj1cIlxuICAgICAgICAgICAgICAoZWw6IGFueSkgPT4ge1xuICAgICAgICAgICAgICAgIGlmIChlbCkge1xuICAgICAgICAgICAgICAgICAgZm9ybUl0ZW1SZWZzW2l0ZW0ua2V5XSA9IGVsO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgXCJcbiAgICAgICAgICAgIDppdGVtPVwiaXRlbVwiXG4gICAgICAgICAgICA6aGVscGVyPVwiaGVscGVyXCJcbiAgICAgICAgICAgIDptb2RlbC12YWx1ZT1cImdldChmb3JtLCBpdGVtLmtleSlcIlxuICAgICAgICAgICAgOmZvcm0tc2xvdD1cIm1lcmdlZFNsb3RzWydmb3JtXycgKyBpdGVtLmtleV1cIlxuICAgICAgICAgICAgOmdldC1jb250ZXh0LWZuPVwiZ2V0Q29udGV4dEZuXCJcbiAgICAgICAgICAgIEB1cGRhdGU6bW9kZWwtdmFsdWU9XCJzZXQoZm9ybSwgaXRlbS5rZXksICRldmVudClcIlxuICAgICAgICAgIC8+XG4gICAgICAgIDwvY29tcG9uZW50PlxuICAgICAgPC90ZW1wbGF0ZT5cbiAgICA8L2NvbXBvbmVudD5cbiAgICA8Y29tcG9uZW50XG4gICAgICA6aXM9XCJjb21wdXRlZEdyb3VwLndyYXBwZXIucGFyZW50XCJcbiAgICAgIHYtaWY9XCJjb21wdXRlZEdyb3VwLndyYXBwZXJcIlxuICAgICAgdi1tb2RlbDpbdWkuY29sbGFwc2UubW9kZWxWYWx1ZV09XCJncm91cEFjdGl2ZUtleVwiXG4gICAgICBzdHlsZT1cIndpZHRoOiAxMDAlXCJcbiAgICAgIHYtYmluZD1cImNvbXB1dGVkR3JvdXBcIlxuICAgID5cbiAgICAgIDx0ZW1wbGF0ZSB2LWZvcj1cIihncm91cEl0ZW0sIGdyb3VwS2V5KSBvZiBjb21wdXRlZEdyb3VwLmdyb3Vwc1wiIDprZXk9XCJncm91cEtleVwiPlxuICAgICAgICA8Y29tcG9uZW50XG4gICAgICAgICAgOmlzPVwiY29tcHV0ZWRHcm91cC53cmFwcGVyLmNoaWxkXCJcbiAgICAgICAgICB2LWlmPVwiZ3JvdXBJdGVtU2hvdyhncm91cEl0ZW0pXCJcbiAgICAgICAgICA6W3VpLmNvbGxhcHNlLmtleU5hbWVdPVwiZ3JvdXBLZXlcIlxuICAgICAgICAgIHYtYmluZD1cImdyb3VwSXRlbVwiXG4gICAgICAgICAgOmNsYXNzPVwieyAnZnMtZm9ybS1ncm91cC1lcnJvcic6IGVycm9yc1JlZlsnZ3JvdXAuJyArIGdyb3VwS2V5XSB9XCJcbiAgICAgICAgPlxuICAgICAgICAgIDx0ZW1wbGF0ZSB2LWZvcj1cIihpdGVtLCBzbG90TmFtZSkgb2YgZ3JvdXBJdGVtLnNsb3RzXCIgOmtleT1cInNsb3ROYW1lXCIgI1tzbG90TmFtZV09XCJzY29wZVwiPlxuICAgICAgICAgICAgPGZzLXJlbmRlciA6cmVuZGVyLWZ1bmM9XCJpdGVtXCIgOnNjb3BlPVwieyAuLi5zY29wZSwgaGFzRXJyb3I6IGVycm9yc1JlZlsnZ3JvdXAuJyArIGdyb3VwS2V5XSB9XCIgLz5cbiAgICAgICAgICA8L3RlbXBsYXRlPlxuICAgICAgICAgIDwhLS0gcm93IC0tPlxuICAgICAgICAgIDxjb21wb25lbnQgOmlzPVwidWkucm93Lm5hbWVcIiBjbGFzcz1cImZzLXJvd1wiIHYtYmluZD1cInJvd1wiPlxuICAgICAgICAgICAgPCEtLSBjb2wgLS0+XG4gICAgICAgICAgICA8dGVtcGxhdGUgdi1mb3I9XCJrZXkgaW4gZ3JvdXBJdGVtLmNvbHVtbnNcIiA6a2V5PVwia2V5XCI+XG4gICAgICAgICAgICAgIDxjb21wb25lbnRcbiAgICAgICAgICAgICAgICA6aXM9XCJ1aS5jb2wubmFtZVwiXG4gICAgICAgICAgICAgICAgdi1pZj1cImZvcm1JdGVtU2hvdyhjb21wdXRlZENvbHVtbnNba2V5XSlcIlxuICAgICAgICAgICAgICAgIGNsYXNzPVwiZnMtY29sXCJcbiAgICAgICAgICAgICAgICB2LWJpbmQ9XCJtZXJnZUNvbChncm91cEl0ZW0uY29sLCBjb21wdXRlZENvbHVtbnNba2V5XT8uY29sKVwiXG4gICAgICAgICAgICAgID5cbiAgICAgICAgICAgICAgICA8ZnMtZm9ybS1pdGVtXG4gICAgICAgICAgICAgICAgICB2LWlmPVwiY29tcHV0ZWRDb2x1bW5zW2tleV0gJiYgY29tcHV0ZWRDb2x1bW5zW2tleV0/LmJsYW5rICE9PSB0cnVlXCJcbiAgICAgICAgICAgICAgICAgIDpyZWY9XCJcbiAgICAgICAgICAgICAgICAgICAgKGVsOiBhbnkpID0+IHtcbiAgICAgICAgICAgICAgICAgICAgICBpZiAoZWwpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGZvcm1JdGVtUmVmc1trZXldID0gZWw7XG4gICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICBcIlxuICAgICAgICAgICAgICAgICAgOml0ZW09XCJjb21wdXRlZENvbHVtbnNba2V5XVwiXG4gICAgICAgICAgICAgICAgICA6bW9kZWwtdmFsdWU9XCJnZXQoZm9ybSwga2V5KVwiXG4gICAgICAgICAgICAgICAgICA6Zm9ybS1zbG90PVwibWVyZ2VkU2xvdHNbJ2Zvcm1fJyArIGtleV1cIlxuICAgICAgICAgICAgICAgICAgOmdldC1jb250ZXh0LWZuPVwiZ2V0Q29udGV4dEZuXCJcbiAgICAgICAgICAgICAgICAgIEB1cGRhdGU6bW9kZWwtdmFsdWU9XCJzZXQoZm9ybSwga2V5LCAkZXZlbnQpXCJcbiAgICAgICAgICAgICAgICAvPlxuICAgICAgICAgICAgICA8L2NvbXBvbmVudD5cbiAgICAgICAgICAgIDwvdGVtcGxhdGU+XG4gICAgICAgICAgPC9jb21wb25lbnQ+XG4gICAgICAgIDwvY29tcG9uZW50PlxuICAgICAgPC90ZW1wbGF0ZT5cbiAgICA8L2NvbXBvbmVudD5cbiAgPC9jb21wb25lbnQ+XG48L3RlbXBsYXRlPlxuXG48c2NyaXB0IGxhbmc9XCJ0c1wiPlxuaW1wb3J0IHtcbiAgY29tcHV0ZWQsXG4gIGRlZmluZUNvbXBvbmVudCxcbiAgZ2V0Q3VycmVudEluc3RhbmNlLFxuICBvbk1vdW50ZWQsXG4gIHJlYWN0aXZlLFxuICBSZWYsXG4gIHJlZixcbiAgdG9SYXcsXG4gIHVucmVmLFxuICBVbndyYXBOZXN0ZWRSZWZzLFxuICB3YXRjaFxufSBmcm9tIFwidnVlXCI7XG5pbXBvcnQgXyBmcm9tIFwibG9kYXNoLWVzXCI7XG5pbXBvcnQgeyBDb21wdXRlVmFsdWUsIHVzZUNvbXB1dGUgfSBmcm9tIFwiLi4vLi4vdXNlL3VzZS1jb21wdXRlXCI7XG5pbXBvcnQgbG9nZ2VyIGZyb20gXCIuLi8uLi91dGlscy91dGlsLmxvZ1wiO1xuaW1wb3J0IHsgdXNlTWVyZ2UgfSBmcm9tIFwiLi4vLi4vdXNlL3VzZS1tZXJnZVwiO1xuaW1wb3J0IHsgQ29uc3RhbnRzIH0gZnJvbSBcIi4uLy4uL3V0aWxzL3V0aWwuY29uc3RhbnRzXCI7XG5pbXBvcnQgeyBGb3JtU2NvcGVDb250ZXh0LCBTZXRGb3JtRGF0YU9wdGlvbnMsIHVzZVVpLCB1dGlscyB9IGZyb20gXCIuLi8uLi9pbmRleFwiO1xuXG4vKipcbiAqIOmFjee9ruWMlueahOihqOWNlee7hOS7tlxuICog5pq06Zyy55qE5pa55rOV77yaXG4gKiByZWYuc3VibWl0KCkgPSDmj5DkuqTooajljZVcbiAqIHJlZi5yZXNldCgpID0g6YeN572u6KGo5Y2VXG4gKi9cbmV4cG9ydCBkZWZhdWx0IGRlZmluZUNvbXBvbmVudCh7XG4gIG5hbWU6IFwiRnNGb3JtXCIsXG4gIHByb3BzOiB7XG4gICAgLyoqXG4gICAgICog5Yid5aeL6KGo5Y2V5pWw5o2uXG4gICAgICoqL1xuICAgIGluaXRpYWxGb3JtOiB7XG4gICAgICB0eXBlOiBPYmplY3QsXG4gICAgICBkZWZhdWx0KCkge1xuICAgICAgICByZXR1cm4ge307XG4gICAgICB9XG4gICAgfSxcbiAgICAvKipcbiAgICAgKiDlrZfmrrXmqKHniYhcbiAgICAgKiB7XG4gICAgICogICBrZXk6e1xuICAgICAqICAgICB0aXRsZTogXCLlrZfmrrXlkI3np7BcIixcbiAgICAgKiAgICAgY29tcG9uZW50OntcbiAgICAgKiAgICAgICBuYW1lOlwi57uE5Lu25ZCN56ewXCJcbiAgICAgKiAgICAgICAuLi7nu4Tku7blj4LmlbBcbiAgICAgKiAgICAgfVxuICAgICAqICAgfVxuICAgICAqIH1cbiAgICAgKiAqL1xuICAgIGNvbHVtbnM6IHtcbiAgICAgIHR5cGU6IE9iamVjdCxcbiAgICAgIGRlZmF1bHQ6IHVuZGVmaW5lZFxuICAgIH0sXG4gICAgLyoqXG4gICAgICog5a2X5q615YiG57uEXG4gICAgICoge1xuICAgICAqICAgdHlwZToneHh4JywgLy/liIbnu4TlsZXnpLrnsbvlnotcbiAgICAgKiAgIGdyb3Vwczp7IC8v5YiG57uE5pWw5o2uXG4gICAgICogICAgIGdyb3VwS2V5OnsgdGl0bGU6J3h4eCcsY29sdW1uczpbJ2ZpZWxkS2V5JywnZmllbGRLZXknXX1cbiAgICAgKiAgIH1cbiAgICAgKiB9XG4gICAgICovXG4gICAgZ3JvdXA6IHtcbiAgICAgIHR5cGU6IE9iamVjdCxcbiAgICAgIGRlZmF1bHQ6IHVuZGVmaW5lZFxuICAgIH0sXG4gICAgLyoqXG4gICAgICog6YeN572u6KGo5Y2V5ZCO55qE5pON5L2cXG4gICAgICovXG4gICAgZG9SZXNldDoge1xuICAgICAgdHlwZTogRnVuY3Rpb24sXG4gICAgICBkZWZhdWx0OiB1bmRlZmluZWRcbiAgICB9LFxuICAgIC8qKlxuICAgICAqIOeCueWHu+S/neWtmOaMiemSru+8jOihqOWNleagoemqjOWJjeaJp+ihjOaTjeS9nO+8iGFzeW5j77yJXG4gICAgICovXG4gICAgYmVmb3JlVmFsaWRhdGU6IHtcbiAgICAgIHR5cGU6IEZ1bmN0aW9uLFxuICAgICAgZGVmYXVsdDogdW5kZWZpbmVkXG4gICAgfSxcbiAgICAvKipcbiAgICAgKiDooajljZXmoKHpqozlrozlrozmiJDlkI7vvIzmj5DkuqTliY3lpITnkIbvvIhhc3luY++8iVxuICAgICAqL1xuICAgIGJlZm9yZVN1Ym1pdDoge1xuICAgICAgdHlwZTogRnVuY3Rpb24sXG4gICAgICBkZWZhdWx0OiB1bmRlZmluZWRcbiAgICB9LFxuICAgIC8qKlxuICAgICAqIOeCueWHu+S/neWtmOaMiemSruaXtuaJp+ihjOaTjeS9nO+8iGFzeW5j77yJXG4gICAgICovXG4gICAgZG9TdWJtaXQ6IHtcbiAgICAgIHR5cGU6IEZ1bmN0aW9uLFxuICAgICAgZGVmYXVsdDogdW5kZWZpbmVkXG4gICAgfSxcbiAgICAvKipcbiAgICAgKiDooajljZXmj5DkuqTlkI7lpITnkIbvvIhhc3luY++8iVxuICAgICAqL1xuICAgIGFmdGVyU3VibWl0OiB7XG4gICAgICB0eXBlOiBGdW5jdGlvbixcbiAgICAgIGRlZmF1bHQ6IHVuZGVmaW5lZFxuICAgIH0sXG4gICAgLyoqXG4gICAgICog5o+S5qe95YaF5a65XG4gICAgICovXG4gICAgc2xvdHM6IHtcbiAgICAgIHR5cGU6IE9iamVjdCxcbiAgICAgIGRlZmF1bHQ6ICgpID0+IHtcbiAgICAgICAgcmV0dXJuIHt9O1xuICAgICAgfVxuICAgIH0sXG4gICAgLyoqXG4gICAgICog5biD5bGA5pa55byP44CQZmxleHxncmlk44CRXG4gICAgICovXG4gICAgZGlzcGxheToge1xuICAgICAgdHlwZTogU3RyaW5nLFxuICAgICAgZGVmYXVsdDogXCJmbGV4XCIgLy8gZmxleFxuICAgIH0sXG4gICAgLyoqXG4gICAgICog5bqP5Y+377yM57yW6L6R5pe25Lya5Lyg5YWlXG4gICAgICovXG4gICAgaW5kZXg6IHtcbiAgICAgIHR5cGU6IE51bWJlcixcbiAgICAgIGRlZmF1bHQ6IHVuZGVmaW5lZFxuICAgIH0sXG4gICAgLyoqXG4gICAgICog5qih5byPIFthZGQsZWRpdCx2aWV3LOiHquWumuS5iV1cbiAgICAgKi9cbiAgICBtb2RlOiB7XG4gICAgICB0eXBlOiBTdHJpbmcsXG4gICAgICBkZWZhdWx0OiB1bmRlZmluZWRcbiAgICB9LFxuICAgIC8qKlxuICAgICAqIGEtcm936YWN572uXG4gICAgICovXG4gICAgcm93OiB7XG4gICAgICB0eXBlOiBPYmplY3QsXG4gICAgICBkZWZhdWx0OiB1bmRlZmluZWRcbiAgICB9LFxuICAgIC8qKlxuICAgICAqIGVsLWNvbHxhLWNvbOmFjee9ru+8jOWPr+mFjee9rui3qOWIl1xuICAgICAqL1xuICAgIGNvbDoge1xuICAgICAgdHlwZTogT2JqZWN0LFxuICAgICAgZGVmYXVsdDogdW5kZWZpbmVkXG4gICAgfSxcbiAgICAvKipcbiAgICAgKiBmb3JtSXRlbeeahOWFrOWFsemFjee9rlxuICAgICAqL1xuICAgIGZvcm1JdGVtOiB7XG4gICAgICB0eXBlOiBPYmplY3QsXG4gICAgICBkZWZhdWx0OiB1bmRlZmluZWRcbiAgICB9LFxuICAgIC8qKlxuICAgICAqIGhlbHBlcuS9jee9ru+8mntwb3NpdGlvbjonbGFiZWwnfVxuICAgICAqL1xuICAgIGhlbHBlcjoge1xuICAgICAgdHlwZTogT2JqZWN0XG4gICAgfSxcblxuICAgIHdhdGNoOiB7XG4gICAgICB0eXBlOiBGdW5jdGlvbixcbiAgICAgIGRlZmF1bHQ6IG51bGxcbiAgICB9XG4gIH0sXG4gIGVtaXRzOiBbXCJyZXNldFwiLCBcInN1Ym1pdFwiLCBcInN1Y2Nlc3NcIiwgXCJ2YWxpZGF0aW9uRXJyb3JcIiwgXCJ2YWx1ZS1jaGFuZ2VcIiwgXCJpbml0XCJdLFxuICBzZXR1cChwcm9wcywgY3R4KSB7XG4gICAgY29uc3QgeyBtZXJnZSB9ID0gdXNlTWVyZ2UoKTtcbiAgICBjb25zdCB7IHVpIH0gPSB1c2VVaSgpO1xuICAgIGNvbnN0IHsgQXN5bmNDb21wdXRlVmFsdWUsIGRvQ29tcHV0ZWQgfSA9IHVzZUNvbXB1dGUoKTtcbiAgICBjb25zdCBmb3JtUmVmID0gcmVmKCk7XG4gICAgY29uc3QgZm9ybTogVW53cmFwTmVzdGVkUmVmczxhbnk+ID0gcmVhY3RpdmUoe30pO1xuICAgIGNvbnN0IHsgcHJveHkgfSA9IGdldEN1cnJlbnRJbnN0YW5jZSgpO1xuXG4gICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIHZ1ZS9uby1zZXR1cC1wcm9wcy1kZXN0cnVjdHVyZVxuICAgIF8uZWFjaChwcm9wcy5jb2x1bW5zLCAoaXRlbTogYW55KSA9PiB7XG4gICAgICBpZiAoaXRlbS52YWx1ZSAhPSBudWxsICYmIChpdGVtLnZhbHVlIGluc3RhbmNlb2YgQXN5bmNDb21wdXRlVmFsdWUgfHwgaXRlbS52YWx1ZSBpbnN0YW5jZW9mIENvbXB1dGVWYWx1ZSkpIHtcbiAgICAgICAgbG9nZ2VyLndhcm4oXCJmb3JtLnZhbHVl6YWN572u5LiN5pSv5oyBQ29tcHV0ZS9Bc3luY0NvbXB1dGXnsbvlnovnmoTliqjmgIHorqHnrpdcIik7XG4gICAgICB9XG4gICAgfSk7XG4gICAgZnVuY3Rpb24gY3JlYXRlSW5pdGlhbEZvcm0oKSB7XG4gICAgICBjb25zdCBmb3JtID0ge307XG4gICAgICAvLyDliJ3lp4vmlbDmja7otYvlgLxcbiAgICAgIF8uZWFjaChwcm9wcy5jb2x1bW5zLCAoaXRlbTogYW55LCBrZXk6IGFueSkgPT4ge1xuICAgICAgICBjb25zdCBkZWZWYWx1ZSA9IHVucmVmKGl0ZW0udmFsdWUpO1xuICAgICAgICBpZiAoZGVmVmFsdWUgIT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgIF8uc2V0KGZvcm0sIGtleSwgZGVmVmFsdWUpO1xuICAgICAgICB9XG4gICAgICB9KTtcbiAgICAgIG1lcmdlKGZvcm0sIF8uY2xvbmVEZWVwKHByb3BzLmluaXRpYWxGb3JtKSk7XG4gICAgICByZXR1cm4gZm9ybTtcbiAgICB9XG5cbiAgICBjb25zdCBpbml0aWFsRm9ybSA9IGNyZWF0ZUluaXRpYWxGb3JtKCk7XG4gICAgc2V0Rm9ybURhdGEoaW5pdGlhbEZvcm0pO1xuXG4gICAgY29uc3Qgc2NvcGU6IFJlZjxGb3JtU2NvcGVDb250ZXh0PiA9IGNvbXB1dGVkKCgpID0+IHtcbiAgICAgIHJldHVybiB7XG4gICAgICAgIHJvdzogaW5pdGlhbEZvcm0sXG4gICAgICAgIGZvcm0sXG4gICAgICAgIGluZGV4OiBwcm9wcy5pbmRleCxcbiAgICAgICAgbW9kZTogcHJvcHMubW9kZSB8fCBcImFkZFwiLFxuICAgICAgICBhdHRyczogY3R4LmF0dHJzLFxuICAgICAgICBnZXRDb21wb25lbnRSZWZcbiAgICAgIH0gYXMgRm9ybVNjb3BlQ29udGV4dDtcbiAgICB9KTtcblxuICAgIGZ1bmN0aW9uIGdldENvbnRleHRGbigpIHtcbiAgICAgIHJldHVybiBzY29wZS52YWx1ZTtcbiAgICB9XG5cbiAgICBjb25zdCBjb21wdXRlZENvbHVtbnMgPSBkb0NvbXB1dGVkKCgpID0+IHtcbiAgICAgIHJldHVybiBwcm9wcy5jb2x1bW5zO1xuICAgIH0sIGdldENvbnRleHRGbik7XG4gICAgLy9mb3JtLnZhbHVlQnVpbGRlclxuXG4gICAgZnVuY3Rpb24gZG9WYWx1ZUJ1aWxkZXIoZm9ybTogYW55KSB7XG4gICAgICBpZiAoZm9ybSA9PSBudWxsKSB7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cbiAgICAgIF8uZWFjaChwcm9wcy5jb2x1bW5zLCAoaXRlbTogYW55LCBrZXk6IGFueSkgPT4ge1xuICAgICAgICBsZXQgdmFsdWUgPSBfLmdldChmb3JtLCBrZXkpO1xuICAgICAgICBpZiAoaXRlbS52YWx1ZUJ1aWxkZXIpIHtcbiAgICAgICAgICBpdGVtLnZhbHVlQnVpbGRlcih7XG4gICAgICAgICAgICB2YWx1ZSxcbiAgICAgICAgICAgIGtleSxcbiAgICAgICAgICAgIHJvdzogaW5pdGlhbEZvcm0sXG4gICAgICAgICAgICBmb3JtLFxuICAgICAgICAgICAgaW5kZXg6IHByb3BzLmluZGV4LFxuICAgICAgICAgICAgbW9kZTogcHJvcHMubW9kZVxuICAgICAgICAgIH0pO1xuICAgICAgICB9XG4gICAgICB9KTtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBnZXRGb3JtRGF0YSgpIHtcbiAgICAgIHJldHVybiBmb3JtO1xuICAgIH1cbiAgICBmdW5jdGlvbiBzZXRGb3JtRGF0YShmb3JtRGF0YTogYW55LCBvcHRpb25zOiBTZXRGb3JtRGF0YU9wdGlvbnMgPSB7fSkge1xuICAgICAgZG9WYWx1ZUJ1aWxkZXIoZm9ybURhdGEpO1xuXG4gICAgICBpZiAob3B0aW9ucy5tZXJnZUZvcm0gPT09IGZhbHNlKSB7XG4gICAgICAgIGZvciAoY29uc3Qga2V5IGluIGZvcm0pIHtcbiAgICAgICAgICBkZWxldGUgZm9ybVtrZXldO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgICBtZXJnZShmb3JtLCBmb3JtRGF0YSk7XG4gICAgICBjb25zdCB7IHZhbHVlQ2hhbmdlIH0gPSBvcHRpb25zO1xuICAgICAgaWYgKHZhbHVlQ2hhbmdlKSB7XG4gICAgICAgIF8uZm9yRWFjaChwcm9wcy5jb2x1bW5zLCAoY29sdW1uOiBhbnksIGtleTogYW55KSA9PiB7XG4gICAgICAgICAgY29uc3QgdmFsdWUgPSBmb3JtW2tleV07XG4gICAgICAgICAgZG9WYWx1ZUNoYW5nZShrZXksIHZhbHVlKTtcbiAgICAgICAgfSk7XG4gICAgICB9XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gbWVyZ2VDb2woLi4uY29sOiBhbnkpIHtcbiAgICAgIHJldHVybiBtZXJnZSh7fSwgcHJvcHMuY29sLCAuLi5jb2wpO1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIGJ1aWxkSXRlbVNjb3BlKGl0ZW06IGFueSk6IEZvcm1TY29wZUNvbnRleHQge1xuICAgICAgcmV0dXJuIHsga2V5OiBpdGVtLmtleSwgLi4uc2NvcGUudmFsdWUgfTtcbiAgICB9XG5cbiAgICAvLyBkb1ZhbHVlQnVpbGRlcihmb3JtKTtcblxuICAgIC8vIHdhdGNoKFxuICAgIC8vICAgKCkgPT4gcHJvcHMuaW5pdGlhbEZvcm0sXG4gICAgLy8gICAoKSA9PiB7XG4gICAgLy8gICAgIHNldEZvcm1EYXRhKGNyZWF0ZUluaXRpYWxGb3JtKCksIHsgbWVyZ2VGb3JtOiBmYWxzZSB9KTtcbiAgICAvLyAgIH1cbiAgICAvLyApO1xuXG4gICAgZnVuY3Rpb24gZG9WYWx1ZUNoYW5nZShrZXk6IHN0cmluZywgdmFsdWU6IGFueSkge1xuICAgICAgY29uc3QgZXZlbnQgPSB7IGtleSwgdmFsdWUsIGZvcm1SZWY6IHByb3h5LCAuLi5zY29wZS52YWx1ZSwgaW1tZWRpYXRlOiBmYWxzZSB9O1xuICAgICAgY3R4LmVtaXQoXCJ2YWx1ZS1jaGFuZ2VcIiwgZXZlbnQpO1xuICAgICAgbGV0IHZhbHVlQ2hhbmdlID0gcHJvcHMuY29sdW1uc1trZXldLnZhbHVlQ2hhbmdlO1xuICAgICAgaWYgKHZhbHVlQ2hhbmdlKSB7XG4gICAgICAgIGlmICh2YWx1ZUNoYW5nZSBpbnN0YW5jZW9mIEZ1bmN0aW9uKSB7XG4gICAgICAgICAgdmFsdWVDaGFuZ2UoZXZlbnQpO1xuICAgICAgICB9IGVsc2UgaWYgKHZhbHVlQ2hhbmdlLmhhbmRsZSkge1xuICAgICAgICAgIHZhbHVlQ2hhbmdlLmhhbmRsZShldmVudCk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG5cbiAgICBjb25zdCBmb3JtSXRlbVJlZnM6IFJlZiA9IHJlZih7fSk7XG5cbiAgICBmdW5jdGlvbiBnZXRGb3JtSXRlbVJlZihrZXk6IHN0cmluZykge1xuICAgICAgcmV0dXJuIGZvcm1JdGVtUmVmcy52YWx1ZVtrZXldO1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIGdldENvbXBvbmVudFJlZihrZXk6IHN0cmluZywgaXNBc3luYyA9IGZhbHNlKSB7XG4gICAgICByZXR1cm4gZ2V0Rm9ybUl0ZW1SZWYoa2V5KT8uZ2V0Q29tcG9uZW50UmVmKGlzQXN5bmMpO1xuICAgIH1cblxuICAgIGNvbnN0IGdyb3VwQWN0aXZlS2V5ID0gcmVmKFtdKTtcblxuICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSB2dWUvbm8tc2V0dXAtcHJvcHMtZGVzdHJ1Y3R1cmVcbiAgICBfLmZvckVhY2gocHJvcHMuZ3JvdXA/Lmdyb3VwcywgKGdyb3VwSXRlbTogYW55LCBrZXk6IGFueSkgPT4ge1xuICAgICAgaWYgKGdyb3VwSXRlbS5jb2xsYXBzZWQgIT09IHRydWUpIHtcbiAgICAgICAgZ3JvdXBBY3RpdmVLZXkudmFsdWUucHVzaChrZXkpO1xuICAgICAgfVxuICAgIH0pO1xuICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSB2dWUvbm8tc2V0dXAtcHJvcHMtZGVzdHJ1Y3R1cmVcbiAgICBpZiAocHJvcHMuZ3JvdXA/Lmdyb3VwVHlwZSA9PT0gXCJ0YWJzXCIpIHtcbiAgICAgIGdyb3VwQWN0aXZlS2V5LnZhbHVlID0gZ3JvdXBBY3RpdmVLZXkudmFsdWUubGVuZ3RoID4gMCA/IGdyb3VwQWN0aXZlS2V5LnZhbHVlWzBdIDogbnVsbDtcbiAgICB9XG5cbiAgICAvL+aehOW7uuWIhue7hOaVsOaNrlxuICAgIGNvbnN0IGNvbXB1dGVkR3JvdXAgPSBkb0NvbXB1dGVkKFxuICAgICAgKCkgPT4ge1xuICAgICAgICByZXR1cm4gcHJvcHMuZ3JvdXA7XG4gICAgICB9LFxuICAgICAgZ2V0Q29udGV4dEZuLFxuICAgICAgbnVsbCxcbiAgICAgIChncm91cCkgPT4ge1xuICAgICAgICBpZiAoIWdyb3VwKSB7XG4gICAgICAgICAgcmV0dXJuIHt9O1xuICAgICAgICB9XG4gICAgICAgIC8v5om+5Ye65rKh5pyJ5re75Yqg6L+b5YiG57uE55qE5a2X5q61XG4gICAgICAgIGNvbnN0IGdyb3VwZWRLZXlzOiBhbnkgPSB7fTtcbiAgICAgICAgXy5mb3JFYWNoKGdyb3VwPy5ncm91cHMsIChncm91cEl0ZW06IGFueSwga2V5OiBzdHJpbmcpID0+IHtcbiAgICAgICAgICBfLmZvckVhY2goZ3JvdXBJdGVtLmNvbHVtbnMsIChpdGVtOiBhbnkpID0+IHtcbiAgICAgICAgICAgIGlmIChjb21wdXRlZENvbHVtbnMudmFsdWVbaXRlbV0gPT0gbnVsbCkge1xuICAgICAgICAgICAgICB1dGlscy5sb2dnZXIud2FybihcIuaXoOaViOeahOWIhue7hOWtl+aute+8mlwiICsgaXRlbSk7XG4gICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGdyb3VwZWRLZXlzW2l0ZW1dID0ga2V5O1xuICAgICAgICAgIH0pO1xuICAgICAgICB9KTtcblxuICAgICAgICBjb25zdCB0eXBlID0gZ3JvdXAuZ3JvdXBUeXBlO1xuICAgICAgICBsZXQgd3JhcHBlciA9IHtcbiAgICAgICAgICBwYXJlbnQ6IHVpLmNvbGxhcHNlLm5hbWUsXG4gICAgICAgICAgY2hpbGQ6IHVpLmNvbGxhcHNlSXRlbS5uYW1lXG4gICAgICAgIH07XG4gICAgICAgIGlmICh0eXBlID09PSBcInRhYnNcIikge1xuICAgICAgICAgIHdyYXBwZXIucGFyZW50ID0gdWkudGFicy5uYW1lO1xuICAgICAgICAgIHdyYXBwZXIuY2hpbGQgPSB1aS50YWJQYW5lLm5hbWU7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIG1lcmdlKFxuICAgICAgICAgIHtcbiAgICAgICAgICAgIHdyYXBwZXIsXG4gICAgICAgICAgICBncm91cGVkS2V5c1xuICAgICAgICAgIH0sXG4gICAgICAgICAgZ3JvdXBcbiAgICAgICAgKTtcbiAgICAgIH1cbiAgICApO1xuXG4gICAgY29uc3QgY29tcHV0ZWREZWZhdWx0Q29sdW1ucyA9IGNvbXB1dGVkKCgpID0+IHtcbiAgICAgIGNvbnN0IGNvbHVtbnM6IGFueSA9IFtdO1xuICAgICAgLy9kZWZhdWx0IGNvbHVtbnPmjpLluo9cbiAgICAgIF8uZm9yRWFjaChjb21wdXRlZENvbHVtbnMudmFsdWUsICh2YWx1ZTogYW55LCBrZXk6IHN0cmluZykgPT4ge1xuICAgICAgICBjb25zdCBpdGVtID0gXy5jbG9uZURlZXAocHJvcHMuZm9ybUl0ZW0gfHwge30pO1xuICAgICAgICB2YWx1ZSA9IG1lcmdlKGl0ZW0sIHZhbHVlKTtcbiAgICAgICAgdmFsdWUua2V5ID0ga2V5O1xuICAgICAgICBpZiAodmFsdWUub3JkZXIgPT0gbnVsbCkge1xuICAgICAgICAgIHZhbHVlLm9yZGVyID0gQ29uc3RhbnRzLm9yZGVyRGVmYXVsdDtcbiAgICAgICAgfVxuICAgICAgICBpZiAoY29tcHV0ZWRHcm91cC52YWx1ZT8uZ3JvdXBlZEtleXMgPT0gbnVsbCB8fCBjb21wdXRlZEdyb3VwLnZhbHVlPy5ncm91cGVkS2V5c1trZXldID09IG51bGwpIHtcbiAgICAgICAgICBjb2x1bW5zLnB1c2godmFsdWUpO1xuICAgICAgICB9XG4gICAgICAgIHZhbHVlLmNvbCA9IG1lcmdlQ29sKHZhbHVlLmNvbCk7XG4gICAgICB9KTtcbiAgICAgIC8v5o6S5bqPXG4gICAgICBjb2x1bW5zLnNvcnQoKGE6IGFueSwgYjogYW55KSA9PiB7XG4gICAgICAgIHJldHVybiBhLm9yZGVyIC0gYi5vcmRlcjtcbiAgICAgIH0pO1xuXG4gICAgICByZXR1cm4gY29sdW1ucztcbiAgICB9KTtcblxuICAgIGZ1bmN0aW9uIGdldEZvcm1SZWYoKSB7XG4gICAgICByZXR1cm4gZm9ybVJlZi52YWx1ZTtcbiAgICB9XG4gICAgYXN5bmMgZnVuY3Rpb24gcmVzZXQoKSB7XG4gICAgICAvLyB1aS5mb3JtLnJlc2V0V3JhcChmb3JtUmVmLnZhbHVlLCB7IGZvcm0sIGluaXRpYWxGb3JtOiBjcmVhdGVJbml0aWFsRm9ybSgpIH0pO1xuICAgICAgY29uc3QgaW5pdGlhbEZvcm0gPSBjcmVhdGVJbml0aWFsRm9ybSgpO1xuICAgICAgY29uc3QgZW50cmllcyA9IF8uZW50cmllcyhmb3JtKTtcbiAgICAgIGZvciAoY29uc3QgZW50cnkgb2YgZW50cmllcykge1xuICAgICAgICBjb25zdCBpbml0aWFsVmFsdWUgPSBfLmdldChpbml0aWFsRm9ybSwgZW50cnlbMF0pO1xuICAgICAgICBpZiAoaW5pdGlhbFZhbHVlID09IG51bGwpIHtcbiAgICAgICAgICBfLnVuc2V0KGZvcm0sIGVudHJ5WzBdKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBfLnNldChmb3JtLCBlbnRyeVswXSwgaW5pdGlhbFZhbHVlKTtcbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICBpZiAocHJvcHMuZG9SZXNldCkge1xuICAgICAgICBhd2FpdCBwcm9wcy5kb1Jlc2V0KHNjb3BlLnZhbHVlKTtcbiAgICAgIH1cbiAgICAgIGN0eC5lbWl0KFwicmVzZXRcIik7XG4gICAgfVxuXG4gICAgY29uc3QgdmFsaWRSZWY6IFJlZiA9IHJlZigpO1xuICAgIGNvbnN0IGVycm9yc1JlZjogUmVmID0gcmVmKHt9KTtcblxuICAgIGZ1bmN0aW9uIGZpbGxHcm91cEVycm9yKGZpZWxkRXJyb3JzOiBhbnkpIHtcbiAgICAgIGlmICghY29tcHV0ZWRHcm91cC52YWx1ZT8uZ3JvdXBlZEtleXMpIHtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuICAgICAgZm9yIChsZXQga2V5IGluIGZpZWxkRXJyb3JzKSB7XG4gICAgICAgIGNvbnN0IGdyb3VwID0gY29tcHV0ZWRHcm91cC52YWx1ZT8uZ3JvdXBlZEtleXNba2V5XTtcbiAgICAgICAgaWYgKGdyb3VwICE9IG51bGwpIHtcbiAgICAgICAgICBmaWVsZEVycm9yc1tcImdyb3VwLlwiICsgZ3JvdXBdID0gdHJ1ZTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cbiAgICBhc3luYyBmdW5jdGlvbiBzdWJtaXQoKSB7XG4gICAgICBjb25zdCB2YWxpZGF0ZVNjb3BlID0geyAuLi5zY29wZS52YWx1ZSwgZm9ybSB9O1xuICAgICAgaWYgKHByb3BzLmJlZm9yZVZhbGlkYXRlKSB7XG4gICAgICAgIGNvbnN0IHJldCA9IGF3YWl0IHByb3BzLmJlZm9yZVZhbGlkYXRlKHZhbGlkYXRlU2NvcGUpO1xuICAgICAgICBpZiAocmV0ID09PSBmYWxzZSkge1xuICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICB0cnkge1xuICAgICAgICBlcnJvcnNSZWYudmFsdWUgPSB7fTtcbiAgICAgICAgYXdhaXQgdWkuZm9ybS52YWxpZGF0ZVdyYXAoZm9ybVJlZi52YWx1ZSk7XG4gICAgICAgIHZhbGlkUmVmLnZhbHVlID0gdHJ1ZTtcbiAgICAgIH0gY2F0Y2ggKGU6IGFueSkge1xuICAgICAgICB2YWxpZFJlZi52YWx1ZSA9IGZhbHNlO1xuICAgICAgICBjb25zdCB2YWxpZGF0ZUVycm9ycyA9IHVpLmZvcm0udHJhbnNmb3JtVmFsaWRhdGVFcnJvcnMoZSk7XG4gICAgICAgIGZpbGxHcm91cEVycm9yKHZhbGlkYXRlRXJyb3JzKTtcbiAgICAgICAgZXJyb3JzUmVmLnZhbHVlID0gdmFsaWRhdGVFcnJvcnM7XG4gICAgICAgIGN0eC5lbWl0KFwidmFsaWRhdGlvbkVycm9yXCIsIHNjb3BlLnZhbHVlKTtcbiAgICAgICAgdGhyb3cgZTtcbiAgICAgIH1cblxuICAgICAgY29uc3QgZm9ybURhdGEgPSBfLmNsb25lRGVlcCh0b1Jhdyhmb3JtKSk7XG4gICAgICBjb25zdCBzdWJtaXRTY29wZSA9IHsgLi4uc2NvcGUudmFsdWUsIGZvcm06IGZvcm1EYXRhIH07XG4gICAgICBsb2dnZXIuZGVidWcoXCJmb3JtIHN1Ym1pdFwiLCBKU09OLnN0cmluZ2lmeShmb3JtKSk7XG4gICAgICBfLmVhY2gocHJvcHMuY29sdW1ucywgKGl0ZW06IGFueSwga2V5OiBzdHJpbmcpID0+IHtcbiAgICAgICAgbGV0IHZhbHVlID0gXy5nZXQoZm9ybURhdGEsIGtleSk7XG4gICAgICAgIGlmIChpdGVtLnZhbHVlUmVzb2x2ZSkge1xuICAgICAgICAgIGl0ZW0udmFsdWVSZXNvbHZlKHtcbiAgICAgICAgICAgIHZhbHVlLFxuICAgICAgICAgICAga2V5LFxuICAgICAgICAgICAgLi4uc3VibWl0U2NvcGVcbiAgICAgICAgICB9KTtcbiAgICAgICAgfVxuICAgICAgfSk7XG5cbiAgICAgIGlmIChwcm9wcy5iZWZvcmVTdWJtaXQpIHtcbiAgICAgICAgY29uc3QgcmV0ID0gYXdhaXQgcHJvcHMuYmVmb3JlU3VibWl0KHN1Ym1pdFNjb3BlKTtcbiAgICAgICAgaWYgKHJldCA9PT0gZmFsc2UpIHtcbiAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgLy/np7vpmaTkuI3lhYHorrjmj5DkuqTnmoTlrZfmrrVcbiAgICAgIF8uZWFjaChwcm9wcy5jb2x1bW5zLCAoaXRlbTogYW55LCBrZXk6IHN0cmluZykgPT4ge1xuICAgICAgICBpZiAoaXRlbS5zdWJtaXQgPT09IGZhbHNlKSB7XG4gICAgICAgICAgXy51bnNldChmb3JtRGF0YSwga2V5KTtcbiAgICAgICAgfSBlbHNlIGlmIChpdGVtLnN1Ym1pdCA9PT0gdHJ1ZSkge1xuICAgICAgICAgIC8v6K6+572u5by65Yi25o+Q5Lqk55qE5a2X5q61XG4gICAgICAgICAgXy5zZXQoZm9ybURhdGEsIGtleSwgZm9ybURhdGFba2V5XSk7XG4gICAgICAgIH1cbiAgICAgIH0pO1xuXG4gICAgICBpZiAocHJvcHMuZG9TdWJtaXQpIHtcbiAgICAgICAgY29uc3QgcmVzID0gYXdhaXQgcHJvcHMuZG9TdWJtaXQoc3VibWl0U2NvcGUpO1xuICAgICAgICBzdWJtaXRTY29wZS5yZXMgPSByZXM7XG4gICAgICAgIGlmIChyZXMgPT09IGZhbHNlKSB7XG4gICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgICBjdHguZW1pdChcInN1Ym1pdFwiLCBzdWJtaXRTY29wZSk7XG4gICAgICBpZiAocHJvcHMuYWZ0ZXJTdWJtaXQpIHtcbiAgICAgICAgY29uc3Qgc3VjY2VzcyA9IGF3YWl0IHByb3BzLmFmdGVyU3VibWl0KHN1Ym1pdFNjb3BlKTtcbiAgICAgICAgaWYgKHN1Y2Nlc3MgPT09IGZhbHNlKSB7XG4gICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgICBjdHguZW1pdChcInN1Y2Nlc3NcIiwgc3VibWl0U2NvcGUpO1xuXG4gICAgICByZXR1cm4gc3VibWl0U2NvcGU7XG4gICAgfVxuXG4gICAgb25Nb3VudGVkKCgpID0+IHtcbiAgICAgIC8vIGltbWVkaWF0ZSB2YWx1ZUNoYW5nZeinpuWPkVxuICAgICAgXy5mb3JFYWNoKGNvbXB1dGVkQ29sdW1ucy52YWx1ZSwgKGl0ZW06IGFueSwga2V5OiBzdHJpbmcpID0+IHtcbiAgICAgICAgaWYgKGl0ZW0udmFsdWVDaGFuZ2UgPT0gbnVsbCkge1xuICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuICAgICAgICBsZXQgdmFsdWVDaGFuZ2UgPSBpdGVtLnZhbHVlQ2hhbmdlO1xuICAgICAgICBpZiAodmFsdWVDaGFuZ2UgJiYgdmFsdWVDaGFuZ2UuaW1tZWRpYXRlID09PSB0cnVlICYmIHZhbHVlQ2hhbmdlLmhhbmRsZSkge1xuICAgICAgICAgIGNvbnN0IGV2ZW50ID0geyBrZXksIHZhbHVlOiBmb3JtW2tleV0sIGZvcm1SZWY6IHByb3h5LCAuLi5zY29wZS52YWx1ZSwgaW1tZWRpYXRlOiB0cnVlIH07XG4gICAgICAgICAgaWYgKHZhbHVlQ2hhbmdlLmhhbmRsZSkge1xuICAgICAgICAgICAgdmFsdWVDaGFuZ2UuaGFuZGxlKGV2ZW50KTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH0pO1xuICAgIH0pO1xuXG4gICAgZnVuY3Rpb24gZm9ybUl0ZW1TaG93KGl0ZW06IGFueSkge1xuICAgICAgaWYgKGl0ZW0gJiYgaXRlbS5zaG93ICE9PSBmYWxzZSkge1xuICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgIH1cbiAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9XG4gICAgZnVuY3Rpb24gZ3JvdXBJdGVtU2hvdyhncm91cEl0ZW06IGFueSkge1xuICAgICAgaWYgKCFncm91cEl0ZW0uY29sdW1ucykge1xuICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICB9XG4gICAgICBpZiAoZ3JvdXBJdGVtLnNob3cgPT09IGZhbHNlKSB7XG4gICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgIH1cblxuICAgICAgZm9yIChsZXQga2V5IG9mIGdyb3VwSXRlbS5jb2x1bW5zKSB7XG4gICAgICAgIGlmIChjb21wdXRlZENvbHVtbnMudmFsdWVba2V5XSA9PSBudWxsKSB7XG4gICAgICAgICAgY29udGludWU7XG4gICAgICAgIH1cbiAgICAgICAgY29uc3QgaXNGaWVsZFNob3cgPSBmb3JtSXRlbVNob3coY29tcHV0ZWRDb2x1bW5zLnZhbHVlW2tleV0pO1xuICAgICAgICBpZiAoaXNGaWVsZFNob3cpIHtcbiAgICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH1cblxuICAgIGlmIChwcm9wcy53YXRjaCkge1xuICAgICAgd2F0Y2goXG4gICAgICAgICgpID0+IHtcbiAgICAgICAgICByZXR1cm4gZm9ybTtcbiAgICAgICAgfSxcbiAgICAgICAgKG5ld1ZhbCwgb2xkVmFsKSA9PiB7XG4gICAgICAgICAgaWYgKHByb3BzLndhdGNoKSB7XG4gICAgICAgICAgICBwcm9wcy53YXRjaChzY29wZS52YWx1ZSk7XG4gICAgICAgICAgfVxuICAgICAgICB9LFxuICAgICAgICB7XG4gICAgICAgICAgZGVlcDogdHJ1ZSxcbiAgICAgICAgICBpbW1lZGlhdGU6IHRydWVcbiAgICAgICAgfVxuICAgICAgKTtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBpc0RpcnR5KCkge1xuICAgICAgY29uc3QgYmVmb3JlID0gSlNPTi5zdHJpbmdpZnkoaW5pdGlhbEZvcm0pO1xuICAgICAgY29uc3QgYWZ0ZXIgPSBKU09OLnN0cmluZ2lmeShmb3JtKTtcbiAgICAgIHJldHVybiBiZWZvcmUgIT09IGFmdGVyO1xuICAgIH1cblxuICAgIGNvbnN0IG1lcmdlZFNsb3RzID0gY29tcHV0ZWQoKCkgPT4ge1xuICAgICAgcmV0dXJuIF8ubWVyZ2Uoe30sIHByb3BzLnNsb3RzLCBjdHguc2xvdHMpO1xuICAgIH0pO1xuXG4gICAgY3R4LmVtaXQoXCJpbml0XCIsIHNjb3BlLnZhbHVlKTtcblxuICAgIHJldHVybiB7XG4gICAgICBnZXQ6IChmb3JtOiBhbnksIGtleTogc3RyaW5nKSA9PiB7XG4gICAgICAgIHJldHVybiBfLmdldChmb3JtLCBrZXkpO1xuICAgICAgfSxcbiAgICAgIHNldDogKGZvcm06IGFueSwga2V5OiBzdHJpbmcsIHZhbHVlOiBhbnkpID0+IHtcbiAgICAgICAgXy5zZXQoZm9ybSwga2V5LCB2YWx1ZSk7XG4gICAgICAgIGRvVmFsdWVDaGFuZ2Uoa2V5LCB2YWx1ZSk7XG4gICAgICB9LFxuICAgICAgdWksXG4gICAgICB2YWxpZFJlZixcbiAgICAgIGVycm9yc1JlZixcbiAgICAgIGZvcm1SZWYsXG4gICAgICBjb21wdXRlZENvbHVtbnMsXG4gICAgICBjb21wdXRlZERlZmF1bHRDb2x1bW5zLFxuICAgICAgc3VibWl0LFxuICAgICAgcmVzZXQsXG4gICAgICBnZXRGb3JtUmVmLFxuICAgICAgc2NvcGUsXG4gICAgICBidWlsZEl0ZW1TY29wZSxcbiAgICAgIGdyb3VwQWN0aXZlS2V5LFxuICAgICAgZm9ybSxcbiAgICAgIGZvcm1JdGVtUmVmcyxcbiAgICAgIGdldEZvcm1EYXRhLFxuICAgICAgc2V0Rm9ybURhdGEsXG4gICAgICBnZXRDb21wb25lbnRSZWYsXG4gICAgICBtZXJnZUNvbCxcbiAgICAgIGNvbXB1dGVkR3JvdXAsXG4gICAgICBnZXRDb250ZXh0Rm4sXG4gICAgICBmb3JtSXRlbVNob3csXG4gICAgICBncm91cEl0ZW1TaG93LFxuICAgICAgaXNEaXJ0eSxcbiAgICAgIG1lcmdlZFNsb3RzXG4gICAgfTtcbiAgfVxufSk7XG48L3NjcmlwdD5cblxuPHN0eWxlIGxhbmc9XCJsZXNzXCI+XG4uZnMtZm9ybSB7XG4gIC5lbC1jb2xsYXBzZS1pdGVtX19jb250ZW50IHtcbiAgICBtYXJnaW4tdG9wOiAxMHB4O1xuICAgIHBhZGRpbmctbGVmdDogMzBweDtcbiAgICBwYWRkaW5nLXJpZ2h0OiAzMHB4O1xuICB9XG5cbiAgLmZzLWZvcm0taW52YWxpZCB7XG4gIH1cblxuICAuZnMtZm9ybS1pdGVtLWNvbXBvbmVudCB7XG4gICAgLmFudC1waWNrZXIsXG4gICAgLmFudC1pbnB1dC1hZmZpeC13cmFwcGVyLFxuICAgIC5hbnQtaW5wdXQtbnVtYmVyLFxuICAgIC5lbC1jYXNjYWRlcixcbiAgICAuZWwtZGF0ZS1lZGl0b3IsXG4gICAgLmVsLWlucHV0LW51bWJlcixcbiAgICAuZWwtaW5wdXQsXG4gICAgPiAuZWwtc2VsZWN0LFxuICAgID4gLm4tc2VsZWN0LFxuICAgIC5uLWRhdGUtcGlja2VyLFxuICAgIC5uLWlucHV0LW51bWJlciB7XG4gICAgICB3aWR0aDogMTAwJTtcbiAgICB9XG5cbiAgICAuZWwtZGF0ZS1lZGl0b3IgLmVsLXJhbmdlX19pY29uIHtcbiAgICAgIG1hcmdpbi1sZWZ0OiAxMHB4O1xuICAgIH1cbiAgICAuZWwtZGF0ZS1lZGl0b3IgLmVsLXJhbmdlX19jbG9zZS1pY29uIHtcbiAgICAgIG1hcmdpbi1yaWdodDogMTBweDtcbiAgICB9XG5cbiAgICAuZWwtcmFuZ2UtZWRpdG9yLmVsLWlucHV0X193cmFwcGVyIHtcbiAgICAgIHBhZGRpbmc6IDA7XG4gICAgfVxuICB9XG5cbiAgLy8uZWwtZGF0ZS1lZGl0b3IuZWwtaW5wdXRfX3dyYXBwZXIge1xuICAvLyAgd2lkdGg6IDEwMCU7XG4gIC8vfVxufVxuLmZzLWZvcm0tZ3JpZCB7XG4gIC5mcy1yb3cge1xuICAgIGRpc3BsYXk6IGdyaWQ7XG4gICAgZ3JpZC10ZW1wbGF0ZS1jb2x1bW5zOiA1MCUgNTAlO1xuICAgIC8vIGdhcDogMCAyMHB4OyAvL+WIl+mXtOi3nSAyMHB4XG4gICAgLmZzLWNvbCB7XG4gICAgICBtYXgtd2lkdGg6IDEwMCU7XG4gICAgICB3aWR0aDogMTAwJTtcbiAgICB9XG5cbiAgICAvLyBhbnRkdlxuICAgIC5hbnQtZm9ybS1pdGVtLWxhYmVsIHtcbiAgICAgIHdpZHRoOiAxMDBweDtcbiAgICAgIGZsZXg6IG5vbmU7XG4gICAgICBtYXgtd2lkdGg6IG5vbmU7XG4gICAgfVxuICAgIC5hbnQtZm9ybS1pdGVtLWNvbnRyb2wtd3JhcHBlciB7XG4gICAgICBmbGV4OiAxO1xuICAgICAgbWF4LXdpZHRoOiBub25lO1xuICAgIH1cbiAgfVxuXG4gIC8vIGVsZW1lbnRcbiAgLmVsLXJvdzo6YWZ0ZXIsXG4gIC5lbC1yb3c6OmJlZm9yZSB7XG4gICAgZGlzcGxheTogbm9uZTtcbiAgfVxufVxuLmZzLWZvcm0tZmxleCB7XG4gIGRpc3BsYXk6IGZsZXg7XG4gIGp1c3RpZnktY29udGVudDogZmxleC1zdGFydDtcbiAgYWxpZ24taXRlbXM6IGJhc2VsaW5lO1xuICBmbGV4LXdyYXA6IHdyYXA7XG4gIC5mcy1yb3cge1xuICAgIHdpZHRoOiAxMDAlO1xuICB9XG59XG48L3N0eWxlPlxuIiwiPHRlbXBsYXRlPlxuICA8Y29tcG9uZW50XG4gICAgOmlzPVwidWkuZm9ybUl0ZW0ubmFtZVwiXG4gICAgdi1pZj1cIml0ZW1cIlxuICAgIGNsYXNzPVwiZnMtZm9ybS1pdGVtXCJcbiAgICA6W3VpLmZvcm1JdGVtLnByb3BdPVwiY29tcHV0ZWRLZXlcIlxuICAgIHYtYmluZD1cIml0ZW1cIlxuICAgIDpwYXRoPVwiaXRlbS5rZXlcIlxuICAgIDpydWxlLXBhdGg9XCJpdGVtLmtleVwiXG4gID5cbiAgICA8dGVtcGxhdGUgI2xhYmVsPlxuICAgICAgPHNwYW4gdi1pZj1cImNvbXB1dGVkTGFiZWxJc1JlbmRlclwiIGNsYXNzPVwiZnMtZm9ybS1pdGVtLWxhYmVsLXRleHRcIj5cbiAgICAgICAgPGZzLXJlbmRlciA6cmVuZGVyLWZ1bmM9XCJjb21wdXRlZExhYmVsUmVuZGVyXCI+PC9mcy1yZW5kZXI+XG4gICAgICA8L3NwYW4+XG4gICAgICA8c3BhbiB2LWVsc2UgY2xhc3M9XCJmcy1mb3JtLWl0ZW0tbGFiZWwtdGV4dFwiIDp0aXRsZT1cImNvbXB1dGVkTGFiZWxcIj5cbiAgICAgICAge3sgY29tcHV0ZWRMYWJlbCB9fVxuICAgICAgPC9zcGFuPlxuXG4gICAgICA8Y29tcG9uZW50XG4gICAgICAgIDppcz1cInVpLnRvb2x0aXAubmFtZVwiXG4gICAgICAgIHYtaWY9XCJpdGVtLmhlbHBlciAmJiBjb21wdXRlZEhlbHBlclBvc2l0aW9uID09PSAnbGFiZWwnXCJcbiAgICAgICAgdi1iaW5kPVwiY29tcHV0ZWRIZWxwZXJUb29sdGlwXCJcbiAgICAgID5cbiAgICAgICAgPHRlbXBsYXRlICNbdWkudG9vbHRpcC5jb250ZW50XT5cbiAgICAgICAgICA8c3BhbiBjbGFzcz1cImZzLWZvcm0taGVscGVyLXRvb2x0aXBcIj5cbiAgICAgICAgICAgIDxmcy1mb3JtLWhlbHBlciA6aGVscGVyPVwiaXRlbS5oZWxwZXJcIiA6c2NvcGU9XCJzY29wZUZ1bmMoKVwiIC8+XG4gICAgICAgICAgPC9zcGFuPlxuICAgICAgICA8L3RlbXBsYXRlPlxuICAgICAgICA8dGVtcGxhdGUgI1t1aS50b29sdGlwLnRyaWdnZXJdPlxuICAgICAgICAgIDxzcGFuIGNsYXNzPVwiZnMtZm9ybS1pdGVtLWxhYmVsLWljb25cIj5cbiAgICAgICAgICAgIDxmcy1pY29uIGNsYXNzPVwiZnMtZm9ybS1pdGVtLWxhYmVsLWljb24taW5uZXJcIiA6aWNvbj1cInVpLmljb25zLnF1ZXN0aW9uXCI+PC9mcy1pY29uPlxuICAgICAgICAgIDwvc3Bhbj5cbiAgICAgICAgPC90ZW1wbGF0ZT5cbiAgICAgIDwvY29tcG9uZW50PlxuICAgIDwvdGVtcGxhdGU+XG4gICAgPGRpdiBjbGFzcz1cImZzLWZvcm0taXRlbS1jb250ZW50XCI+XG4gICAgICA8ZnMtcmVuZGVyIHYtaWY9XCJpdGVtLnRvcFJlbmRlclwiIDpyZW5kZXItZnVuYz1cIml0ZW0udG9wUmVuZGVyXCIgOnNjb3BlPVwic2NvcGVGdW5jKClcIiAvPlxuICAgICAgPGRpdiBjbGFzcz1cImZzLWZvcm0taXRlbS1yZW5kZXJcIj5cbiAgICAgICAgPGZzLXJlbmRlciB2LWlmPVwiaXRlbS5wcmVmaXhSZW5kZXJcIiA6cmVuZGVyLWZ1bmM9XCJpdGVtLnByZWZpeFJlbmRlclwiIDpzY29wZT1cInNjb3BlRnVuYygpXCIgLz5cbiAgICAgICAgPGRpdiBjbGFzcz1cImZzLWZvcm0taXRlbS1jb21wb25lbnRcIj5cbiAgICAgICAgICA8ZnMtc2xvdC1yZW5kZXIgdi1pZj1cImZvcm1TbG90XCIgOnNsb3RzPVwiZm9ybVNsb3RcIiA6c2NvcGU9XCJzY29wZUZ1bmMoKVwiIC8+XG4gICAgICAgICAgPHRlbXBsYXRlIHYtZWxzZS1pZj1cIml0ZW0uY29tcG9uZW50Py5zaG93ICE9PSBmYWxzZVwiPlxuICAgICAgICAgICAgPGZzLXJlbmRlclxuICAgICAgICAgICAgICB2LWlmPVwiaXRlbS5jb25kaXRpb25hbFJlbmRlciAmJiBpdGVtLmNvbmRpdGlvbmFsUmVuZGVyLm1hdGNoICYmIGl0ZW0uY29uZGl0aW9uYWxSZW5kZXIubWF0Y2goc2NvcGVGdW5jKCkpXCJcbiAgICAgICAgICAgICAgOnJlbmRlci1mdW5jPVwiaXRlbS5jb25kaXRpb25hbFJlbmRlci5yZW5kZXJcIlxuICAgICAgICAgICAgICA6c2NvcGU9XCJzY29wZUZ1bmMoKVwiXG4gICAgICAgICAgICAvPlxuICAgICAgICAgICAgPGZzLXJlbmRlciB2LWVsc2UtaWY9XCJpdGVtLnJlbmRlclwiIDpyZW5kZXItZnVuYz1cIml0ZW0ucmVuZGVyXCIgOnNjb3BlPVwic2NvcGVGdW5jKClcIiAvPlxuICAgICAgICAgICAgPGZzLWNvbXBvbmVudC1yZW5kZXJcbiAgICAgICAgICAgICAgdi1lbHNlXG4gICAgICAgICAgICAgIHJlZj1cImNvbXBvbmVudFJlbmRlclJlZlwiXG4gICAgICAgICAgICAgIHYtYmluZD1cIml0ZW0uY29tcG9uZW50XCJcbiAgICAgICAgICAgICAgOm1vZGVsLXZhbHVlPVwibW9kZWxWYWx1ZVwiXG4gICAgICAgICAgICAgIDpzY29wZT1cInNjb3BlRnVuYygpXCJcbiAgICAgICAgICAgICAgQHVwZGF0ZTptb2RlbFZhbHVlPVwidXBkYXRlTW9kZWxWYWx1ZVwiXG4gICAgICAgICAgICAvPlxuICAgICAgICAgIDwvdGVtcGxhdGU+XG4gICAgICAgIDwvZGl2PlxuICAgICAgICA8ZnMtcmVuZGVyIHYtaWY9XCJpdGVtLnN1ZmZpeFJlbmRlclwiIDpyZW5kZXItZnVuYz1cIml0ZW0uc3VmZml4UmVuZGVyXCIgOnNjb3BlPVwic2NvcGVGdW5jKClcIiAvPlxuICAgICAgPC9kaXY+XG4gICAgICA8ZnMtcmVuZGVyIHYtaWY9XCJpdGVtLmJvdHRvbVJlbmRlclwiIDpyZW5kZXItZnVuYz1cIml0ZW0uYm90dG9tUmVuZGVyXCIgOnNjb3BlPVwic2NvcGVGdW5jKClcIiAvPlxuICAgICAgPHRlbXBsYXRlIHYtaWY9XCJpdGVtLmhlbHBlciAmJiBjb21wdXRlZEhlbHBlclBvc2l0aW9uICE9PSAnbGFiZWwnXCI+XG4gICAgICAgIDxmcy1mb3JtLWhlbHBlciA6aGVscGVyPVwiaXRlbS5oZWxwZXJcIiA6c2NvcGU9XCJzY29wZUZ1bmMoKVwiIC8+XG4gICAgICA8L3RlbXBsYXRlPlxuICAgIDwvZGl2PlxuICA8L2NvbXBvbmVudD5cbjwvdGVtcGxhdGU+XG48c2NyaXB0IGxhbmc9XCJ0c1wiPlxuaW1wb3J0IHsgcmVmLCBjb21wdXRlZCwgZGVmaW5lQ29tcG9uZW50LCBSZWYsIFByb3BUeXBlIH0gZnJvbSBcInZ1ZVwiO1xuaW1wb3J0IEZzUmVuZGVyIGZyb20gXCIuLi9yZW5kZXIvZnMtcmVuZGVyLmpzXCI7XG5pbXBvcnQgeyBTY29wZUNvbnRleHQgfSBmcm9tIFwiLi4vLi4vZFwiO1xuaW1wb3J0IHsgdXNlTWVyZ2UsIHVzZVVpIH0gZnJvbSBcIi4uLy4uL3VzZVwiO1xuLyoqXG4gKiBmb3JtLWl0ZW3nu4Tku7blsIHoo4VcbiAqL1xuZXhwb3J0IGRlZmF1bHQgZGVmaW5lQ29tcG9uZW50KHtcbiAgbmFtZTogXCJGc0Zvcm1JdGVtXCIsXG4gIGNvbXBvbmVudHM6IHsgRnNSZW5kZXIgfSxcbiAgcHJvcHM6IHtcbiAgICAvKipcbiAgICAgKiDooajljZXlrZfmrrXlgLwodi1tb2RlbClcbiAgICAgKi9cbiAgICBtb2RlbFZhbHVlOiB7fSxcbiAgICAvKipcbiAgICAgKiDlrZfmrrXphY3nva5cbiAgICAgKi9cbiAgICBpdGVtOiB7XG4gICAgICB0eXBlOiBPYmplY3QgYXMgUHJvcFR5cGU8YW55PixcbiAgICAgIGRlZmF1bHQ6IHVuZGVmaW5lZFxuICAgIH0sXG4gICAgLyoqXG4gICAgICog5a2X5q6157uE5Lu25o+S5qe9XG4gICAgICovXG4gICAgZm9ybVNsb3Q6IHtcbiAgICAgIHR5cGU6IEZ1bmN0aW9uLFxuICAgICAgZGVmYXVsdDogdW5kZWZpbmVkXG4gICAgfSxcbiAgICBnZXRDb250ZXh0Rm46IHtcbiAgICAgIHR5cGU6IEZ1bmN0aW9uLFxuICAgICAgZGVmYXVsdDogdW5kZWZpbmVkXG4gICAgfSxcbiAgICBoZWxwZXI6IHtcbiAgICAgIHR5cGU6IFtTdHJpbmcsIE9iamVjdF1cbiAgICB9XG4gIH0sXG4gIGVtaXRzOiBbXCJ1cGRhdGU6bW9kZWxWYWx1ZVwiXSxcbiAgc2V0dXAocHJvcHMsIGN0eCkge1xuICAgIGNvbnN0IHsgdWkgfSA9IHVzZVVpKCk7XG4gICAgY29uc3QgeyBtZXJnZSB9ID0gdXNlTWVyZ2UoKTtcbiAgICBjb25zdCBjb21wb25lbnRSZW5kZXJSZWYgPSByZWYoKTtcbiAgICAvLyBjb25zdCBzY29wZUNvbXB1dGVkOiBSZWY8U2NvcGVDb250ZXh0PiA9IGNvbXB1dGVkKCgpID0+IHt9KTtcblxuICAgIGNvbnN0IHNjb3BlRnVuYyA9ICgpID0+IHtcbiAgICAgIGNvbnN0IHNjb3BlID0gcHJvcHMuZ2V0Q29udGV4dEZuID8gcHJvcHMuZ2V0Q29udGV4dEZuKCkgOiB7fTtcbiAgICAgIHJldHVybiB7IHZhbHVlOiBwcm9wcy5tb2RlbFZhbHVlLCBrZXk6IHByb3BzLml0ZW0ua2V5LCAuLi5zY29wZSB9O1xuICAgIH07XG5cbiAgICBmdW5jdGlvbiB1cGRhdGVNb2RlbFZhbHVlKHZhbHVlOiBhbnkpIHtcbiAgICAgIGN0eC5lbWl0KFwidXBkYXRlOm1vZGVsVmFsdWVcIiwgdmFsdWUpO1xuICAgIH1cbiAgICBmdW5jdGlvbiBnZXRDb21wb25lbnRSZWYoaXNBc3luYyA9IGZhbHNlKSB7XG4gICAgICBpZiAoaXNBc3luYykge1xuICAgICAgICByZXR1cm4gY29tcG9uZW50UmVuZGVyUmVmLnZhbHVlPy5nZXRUYXJnZXRSZWZBc3luYygpO1xuICAgICAgfVxuICAgICAgcmV0dXJuIGNvbXBvbmVudFJlbmRlclJlZi52YWx1ZT8uZ2V0VGFyZ2V0UmVmKCk7XG4gICAgfVxuXG4gICAgY29uc3QgY29tcHV0ZWRIZWxwZXJQb3NpdGlvbiA9IGNvbXB1dGVkKCgpID0+IHtcbiAgICAgIHJldHVybiBwcm9wcy5pdGVtPy5oZWxwZXI/LnBvc2l0aW9uIHx8IChwcm9wcy5oZWxwZXIgYXMgYW55KT8ucG9zaXRpb247XG4gICAgfSk7XG4gICAgY29uc3QgY29tcHV0ZWRIZWxwZXJUb29sdGlwID0gY29tcHV0ZWQoKCkgPT4ge1xuICAgICAgcmV0dXJuIG1lcmdlKHt9LCBwcm9wcy5pdGVtLmhlbHBlcj8udG9vbHRpcCwgKHByb3BzLmhlbHBlciBhcyBhbnkpPy50b29sdGlwKTtcbiAgICB9KTtcbiAgICBjb25zdCBjb21wdXRlZEtleSA9IGNvbXB1dGVkKCgpID0+IHtcbiAgICAgIGlmIChwcm9wcy5pdGVtID09IG51bGwpIHtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuICAgICAgaWYgKHByb3BzLml0ZW0ua2V5LmluZGV4T2YoXCIuXCIpID49IDApIHtcbiAgICAgICAgcmV0dXJuIHByb3BzLml0ZW0ua2V5LnNwbGl0KFwiLlwiKTtcbiAgICAgIH1cbiAgICAgIHJldHVybiBwcm9wcy5pdGVtLmtleTtcbiAgICB9KTtcblxuICAgIGNvbnN0IGNvbXB1dGVkTGFiZWwgPSBjb21wdXRlZCgoKSA9PiB7XG4gICAgICByZXR1cm4gcHJvcHMuaXRlbS5sYWJlbCB8fCBwcm9wcy5pdGVtLnRpdGxlO1xuICAgIH0pO1xuICAgIGNvbnN0IGNvbXB1dGVkTGFiZWxJc1JlbmRlciA9IGNvbXB1dGVkKCgpID0+IHtcbiAgICAgIHJldHVybiBjb21wdXRlZExhYmVsLnZhbHVlIGluc3RhbmNlb2YgRnVuY3Rpb247XG4gICAgfSk7XG5cbiAgICBjb25zdCBjb21wdXRlZExhYmVsUmVuZGVyID0gKCkgPT4ge1xuICAgICAgcmV0dXJuIGNvbXB1dGVkTGFiZWwudmFsdWUoc2NvcGVGdW5jKCkpO1xuICAgIH07XG5cbiAgICByZXR1cm4ge1xuICAgICAgdWksXG4gICAgICB1cGRhdGVNb2RlbFZhbHVlLFxuICAgICAgc2NvcGVGdW5jLFxuICAgICAgZ2V0Q29tcG9uZW50UmVmLFxuICAgICAgY29tcG9uZW50UmVuZGVyUmVmLFxuICAgICAgY29tcHV0ZWRIZWxwZXJQb3NpdGlvbixcbiAgICAgIGNvbXB1dGVkSGVscGVyVG9vbHRpcCxcbiAgICAgIGNvbXB1dGVkS2V5LFxuICAgICAgY29tcHV0ZWRMYWJlbElzUmVuZGVyLFxuICAgICAgY29tcHV0ZWRMYWJlbCxcbiAgICAgIGNvbXB1dGVkTGFiZWxSZW5kZXJcbiAgICB9O1xuICB9XG59KTtcbjwvc2NyaXB0PlxuXG48c3R5bGUgbGFuZz1cImxlc3NcIj5cbi5mcy1mb3JtLWl0ZW0ge1xuICAuYW50LWZvcm0taXRlbS1sYWJlbCB7XG4gICAgLy9saW5lLWhlaWdodDogMTtcbiAgICAuZnMtZm9ybS1pdGVtLWxhYmVsLXRleHQge1xuICAgICAgd2lkdGg6IDEwMCU7XG4gICAgICB0ZXh0LW92ZXJmbG93OiBlbGxpcHNpcztcbiAgICAgIG92ZXJmbG93OiBoaWRkZW47XG4gICAgICB3aGl0ZS1zcGFjZTogbm93cmFwO1xuICAgIH1cbiAgfVxuICAuZWwtZm9ybS1pdGVtIHtcbiAgICAuZnMtZm9ybS1pdGVtLWxhYmVsLWljb24ge1xuICAgICAgbGluZS1oZWlnaHQ6IDE7XG4gICAgICBoZWlnaHQ6IGluaGVyaXQ7XG4gICAgfVxuICB9XG4gIC5mcy1mb3JtLWl0ZW0tbGFiZWwtaWNvbiB7XG4gICAgbWFyZ2luOiAwIDJweDtcbiAgICAuZnMtZm9ybS1pdGVtLWxhYmVsLWljb24taW5uZXIge1xuICAgICAgbGluZS1oZWlnaHQ6IGluaGVyaXQ7XG4gICAgICBoZWlnaHQ6IGluaGVyaXQ7XG4gICAgfVxuICB9XG4gIC5mcy1mb3JtLWl0ZW0tY29udGVudCB7XG4gICAgZGlzcGxheTogZmxleDtcbiAgICBmbGV4LWRpcmVjdGlvbjogY29sdW1uO1xuICAgIHdpZHRoOiAxMDAlO1xuICAgIGZsZXg6IDE7XG4gICAgLmZzLWZvcm0taXRlbS1yZW5kZXIge1xuICAgICAgZGlzcGxheTogZmxleDtcbiAgICAgIGFsaWduLWl0ZW1zOiBjZW50ZXI7XG4gICAgICBqdXN0aWZ5LWNvbnRlbnQ6IGZsZXgtc3RhcnQ7XG4gICAgICAuZnMtZm9ybS1pdGVtLWNvbXBvbmVudCB7XG4gICAgICAgIGZsZXg6IDE7XG4gICAgICAgIG1heC13aWR0aDogMTAwJTtcbiAgICAgIH1cbiAgICB9XG4gIH1cbn1cbi5mcy1mb3JtLWhlbHBlci10b29sdGlwIHtcbiAgLmZzLWZvcm0taGVscGVyIHtcbiAgICBjb2xvcjogaW5oZXJpdDtcbiAgfVxufVxuPC9zdHlsZT5cbiIsIjx0ZW1wbGF0ZT5cbiAgPGNvbXBvbmVudFxuICAgIDppcz1cInVpLmZvcm1JdGVtLm5hbWVcIlxuICAgIHYtaWY9XCJpdGVtXCJcbiAgICBjbGFzcz1cImZzLWZvcm0taXRlbVwiXG4gICAgOlt1aS5mb3JtSXRlbS5wcm9wXT1cImNvbXB1dGVkS2V5XCJcbiAgICB2LWJpbmQ9XCJpdGVtXCJcbiAgICA6cGF0aD1cIml0ZW0ua2V5XCJcbiAgICA6cnVsZS1wYXRoPVwiaXRlbS5rZXlcIlxuICA+XG4gICAgPHRlbXBsYXRlICNsYWJlbD5cbiAgICAgIDxzcGFuIHYtaWY9XCJjb21wdXRlZExhYmVsSXNSZW5kZXJcIiBjbGFzcz1cImZzLWZvcm0taXRlbS1sYWJlbC10ZXh0XCI+XG4gICAgICAgIDxmcy1yZW5kZXIgOnJlbmRlci1mdW5jPVwiY29tcHV0ZWRMYWJlbFJlbmRlclwiPjwvZnMtcmVuZGVyPlxuICAgICAgPC9zcGFuPlxuICAgICAgPHNwYW4gdi1lbHNlIGNsYXNzPVwiZnMtZm9ybS1pdGVtLWxhYmVsLXRleHRcIiA6dGl0bGU9XCJjb21wdXRlZExhYmVsXCI+XG4gICAgICAgIHt7IGNvbXB1dGVkTGFiZWwgfX1cbiAgICAgIDwvc3Bhbj5cblxuICAgICAgPGNvbXBvbmVudFxuICAgICAgICA6aXM9XCJ1aS50b29sdGlwLm5hbWVcIlxuICAgICAgICB2LWlmPVwiaXRlbS5oZWxwZXIgJiYgY29tcHV0ZWRIZWxwZXJQb3NpdGlvbiA9PT0gJ2xhYmVsJ1wiXG4gICAgICAgIHYtYmluZD1cImNvbXB1dGVkSGVscGVyVG9vbHRpcFwiXG4gICAgICA+XG4gICAgICAgIDx0ZW1wbGF0ZSAjW3VpLnRvb2x0aXAuY29udGVudF0+XG4gICAgICAgICAgPHNwYW4gY2xhc3M9XCJmcy1mb3JtLWhlbHBlci10b29sdGlwXCI+XG4gICAgICAgICAgICA8ZnMtZm9ybS1oZWxwZXIgOmhlbHBlcj1cIml0ZW0uaGVscGVyXCIgOnNjb3BlPVwic2NvcGVGdW5jKClcIiAvPlxuICAgICAgICAgIDwvc3Bhbj5cbiAgICAgICAgPC90ZW1wbGF0ZT5cbiAgICAgICAgPHRlbXBsYXRlICNbdWkudG9vbHRpcC50cmlnZ2VyXT5cbiAgICAgICAgICA8c3BhbiBjbGFzcz1cImZzLWZvcm0taXRlbS1sYWJlbC1pY29uXCI+XG4gICAgICAgICAgICA8ZnMtaWNvbiBjbGFzcz1cImZzLWZvcm0taXRlbS1sYWJlbC1pY29uLWlubmVyXCIgOmljb249XCJ1aS5pY29ucy5xdWVzdGlvblwiPjwvZnMtaWNvbj5cbiAgICAgICAgICA8L3NwYW4+XG4gICAgICAgIDwvdGVtcGxhdGU+XG4gICAgICA8L2NvbXBvbmVudD5cbiAgICA8L3RlbXBsYXRlPlxuICAgIDxkaXYgY2xhc3M9XCJmcy1mb3JtLWl0ZW0tY29udGVudFwiPlxuICAgICAgPGZzLXJlbmRlciB2LWlmPVwiaXRlbS50b3BSZW5kZXJcIiA6cmVuZGVyLWZ1bmM9XCJpdGVtLnRvcFJlbmRlclwiIDpzY29wZT1cInNjb3BlRnVuYygpXCIgLz5cbiAgICAgIDxkaXYgY2xhc3M9XCJmcy1mb3JtLWl0ZW0tcmVuZGVyXCI+XG4gICAgICAgIDxmcy1yZW5kZXIgdi1pZj1cIml0ZW0ucHJlZml4UmVuZGVyXCIgOnJlbmRlci1mdW5jPVwiaXRlbS5wcmVmaXhSZW5kZXJcIiA6c2NvcGU9XCJzY29wZUZ1bmMoKVwiIC8+XG4gICAgICAgIDxkaXYgY2xhc3M9XCJmcy1mb3JtLWl0ZW0tY29tcG9uZW50XCI+XG4gICAgICAgICAgPGZzLXNsb3QtcmVuZGVyIHYtaWY9XCJmb3JtU2xvdFwiIDpzbG90cz1cImZvcm1TbG90XCIgOnNjb3BlPVwic2NvcGVGdW5jKClcIiAvPlxuICAgICAgICAgIDx0ZW1wbGF0ZSB2LWVsc2UtaWY9XCJpdGVtLmNvbXBvbmVudD8uc2hvdyAhPT0gZmFsc2VcIj5cbiAgICAgICAgICAgIDxmcy1yZW5kZXJcbiAgICAgICAgICAgICAgdi1pZj1cIml0ZW0uY29uZGl0aW9uYWxSZW5kZXIgJiYgaXRlbS5jb25kaXRpb25hbFJlbmRlci5tYXRjaCAmJiBpdGVtLmNvbmRpdGlvbmFsUmVuZGVyLm1hdGNoKHNjb3BlRnVuYygpKVwiXG4gICAgICAgICAgICAgIDpyZW5kZXItZnVuYz1cIml0ZW0uY29uZGl0aW9uYWxSZW5kZXIucmVuZGVyXCJcbiAgICAgICAgICAgICAgOnNjb3BlPVwic2NvcGVGdW5jKClcIlxuICAgICAgICAgICAgLz5cbiAgICAgICAgICAgIDxmcy1yZW5kZXIgdi1lbHNlLWlmPVwiaXRlbS5yZW5kZXJcIiA6cmVuZGVyLWZ1bmM9XCJpdGVtLnJlbmRlclwiIDpzY29wZT1cInNjb3BlRnVuYygpXCIgLz5cbiAgICAgICAgICAgIDxmcy1jb21wb25lbnQtcmVuZGVyXG4gICAgICAgICAgICAgIHYtZWxzZVxuICAgICAgICAgICAgICByZWY9XCJjb21wb25lbnRSZW5kZXJSZWZcIlxuICAgICAgICAgICAgICB2LWJpbmQ9XCJpdGVtLmNvbXBvbmVudFwiXG4gICAgICAgICAgICAgIDptb2RlbC12YWx1ZT1cIm1vZGVsVmFsdWVcIlxuICAgICAgICAgICAgICA6c2NvcGU9XCJzY29wZUZ1bmMoKVwiXG4gICAgICAgICAgICAgIEB1cGRhdGU6bW9kZWxWYWx1ZT1cInVwZGF0ZU1vZGVsVmFsdWVcIlxuICAgICAgICAgICAgLz5cbiAgICAgICAgICA8L3RlbXBsYXRlPlxuICAgICAgICA8L2Rpdj5cbiAgICAgICAgPGZzLXJlbmRlciB2LWlmPVwiaXRlbS5zdWZmaXhSZW5kZXJcIiA6cmVuZGVyLWZ1bmM9XCJpdGVtLnN1ZmZpeFJlbmRlclwiIDpzY29wZT1cInNjb3BlRnVuYygpXCIgLz5cbiAgICAgIDwvZGl2PlxuICAgICAgPGZzLXJlbmRlciB2LWlmPVwiaXRlbS5ib3R0b21SZW5kZXJcIiA6cmVuZGVyLWZ1bmM9XCJpdGVtLmJvdHRvbVJlbmRlclwiIDpzY29wZT1cInNjb3BlRnVuYygpXCIgLz5cbiAgICAgIDx0ZW1wbGF0ZSB2LWlmPVwiaXRlbS5oZWxwZXIgJiYgY29tcHV0ZWRIZWxwZXJQb3NpdGlvbiAhPT0gJ2xhYmVsJ1wiPlxuICAgICAgICA8ZnMtZm9ybS1oZWxwZXIgOmhlbHBlcj1cIml0ZW0uaGVscGVyXCIgOnNjb3BlPVwic2NvcGVGdW5jKClcIiAvPlxuICAgICAgPC90ZW1wbGF0ZT5cbiAgICA8L2Rpdj5cbiAgPC9jb21wb25lbnQ+XG48L3RlbXBsYXRlPlxuPHNjcmlwdCBsYW5nPVwidHNcIj5cbmltcG9ydCB7IHJlZiwgY29tcHV0ZWQsIGRlZmluZUNvbXBvbmVudCwgUmVmLCBQcm9wVHlwZSB9IGZyb20gXCJ2dWVcIjtcbmltcG9ydCBGc1JlbmRlciBmcm9tIFwiLi4vcmVuZGVyL2ZzLXJlbmRlci5qc1wiO1xuaW1wb3J0IHsgU2NvcGVDb250ZXh0IH0gZnJvbSBcIi4uLy4uL2RcIjtcbmltcG9ydCB7IHVzZU1lcmdlLCB1c2VVaSB9IGZyb20gXCIuLi8uLi91c2VcIjtcbi8qKlxuICogZm9ybS1pdGVt57uE5Lu25bCB6KOFXG4gKi9cbmV4cG9ydCBkZWZhdWx0IGRlZmluZUNvbXBvbmVudCh7XG4gIG5hbWU6IFwiRnNGb3JtSXRlbVwiLFxuICBjb21wb25lbnRzOiB7IEZzUmVuZGVyIH0sXG4gIHByb3BzOiB7XG4gICAgLyoqXG4gICAgICog6KGo5Y2V5a2X5q615YC8KHYtbW9kZWwpXG4gICAgICovXG4gICAgbW9kZWxWYWx1ZToge30sXG4gICAgLyoqXG4gICAgICog5a2X5q616YWN572uXG4gICAgICovXG4gICAgaXRlbToge1xuICAgICAgdHlwZTogT2JqZWN0IGFzIFByb3BUeXBlPGFueT4sXG4gICAgICBkZWZhdWx0OiB1bmRlZmluZWRcbiAgICB9LFxuICAgIC8qKlxuICAgICAqIOWtl+autee7hOS7tuaPkuanvVxuICAgICAqL1xuICAgIGZvcm1TbG90OiB7XG4gICAgICB0eXBlOiBGdW5jdGlvbixcbiAgICAgIGRlZmF1bHQ6IHVuZGVmaW5lZFxuICAgIH0sXG4gICAgZ2V0Q29udGV4dEZuOiB7XG4gICAgICB0eXBlOiBGdW5jdGlvbixcbiAgICAgIGRlZmF1bHQ6IHVuZGVmaW5lZFxuICAgIH0sXG4gICAgaGVscGVyOiB7XG4gICAgICB0eXBlOiBbU3RyaW5nLCBPYmplY3RdXG4gICAgfVxuICB9LFxuICBlbWl0czogW1widXBkYXRlOm1vZGVsVmFsdWVcIl0sXG4gIHNldHVwKHByb3BzLCBjdHgpIHtcbiAgICBjb25zdCB7IHVpIH0gPSB1c2VVaSgpO1xuICAgIGNvbnN0IHsgbWVyZ2UgfSA9IHVzZU1lcmdlKCk7XG4gICAgY29uc3QgY29tcG9uZW50UmVuZGVyUmVmID0gcmVmKCk7XG4gICAgLy8gY29uc3Qgc2NvcGVDb21wdXRlZDogUmVmPFNjb3BlQ29udGV4dD4gPSBjb21wdXRlZCgoKSA9PiB7fSk7XG5cbiAgICBjb25zdCBzY29wZUZ1bmMgPSAoKSA9PiB7XG4gICAgICBjb25zdCBzY29wZSA9IHByb3BzLmdldENvbnRleHRGbiA/IHByb3BzLmdldENvbnRleHRGbigpIDoge307XG4gICAgICByZXR1cm4geyB2YWx1ZTogcHJvcHMubW9kZWxWYWx1ZSwga2V5OiBwcm9wcy5pdGVtLmtleSwgLi4uc2NvcGUgfTtcbiAgICB9O1xuXG4gICAgZnVuY3Rpb24gdXBkYXRlTW9kZWxWYWx1ZSh2YWx1ZTogYW55KSB7XG4gICAgICBjdHguZW1pdChcInVwZGF0ZTptb2RlbFZhbHVlXCIsIHZhbHVlKTtcbiAgICB9XG4gICAgZnVuY3Rpb24gZ2V0Q29tcG9uZW50UmVmKGlzQXN5bmMgPSBmYWxzZSkge1xuICAgICAgaWYgKGlzQXN5bmMpIHtcbiAgICAgICAgcmV0dXJuIGNvbXBvbmVudFJlbmRlclJlZi52YWx1ZT8uZ2V0VGFyZ2V0UmVmQXN5bmMoKTtcbiAgICAgIH1cbiAgICAgIHJldHVybiBjb21wb25lbnRSZW5kZXJSZWYudmFsdWU/LmdldFRhcmdldFJlZigpO1xuICAgIH1cblxuICAgIGNvbnN0IGNvbXB1dGVkSGVscGVyUG9zaXRpb24gPSBjb21wdXRlZCgoKSA9PiB7XG4gICAgICByZXR1cm4gcHJvcHMuaXRlbT8uaGVscGVyPy5wb3NpdGlvbiB8fCAocHJvcHMuaGVscGVyIGFzIGFueSk/LnBvc2l0aW9uO1xuICAgIH0pO1xuICAgIGNvbnN0IGNvbXB1dGVkSGVscGVyVG9vbHRpcCA9IGNvbXB1dGVkKCgpID0+IHtcbiAgICAgIHJldHVybiBtZXJnZSh7fSwgcHJvcHMuaXRlbS5oZWxwZXI/LnRvb2x0aXAsIChwcm9wcy5oZWxwZXIgYXMgYW55KT8udG9vbHRpcCk7XG4gICAgfSk7XG4gICAgY29uc3QgY29tcHV0ZWRLZXkgPSBjb21wdXRlZCgoKSA9PiB7XG4gICAgICBpZiAocHJvcHMuaXRlbSA9PSBudWxsKSB7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cbiAgICAgIGlmIChwcm9wcy5pdGVtLmtleS5pbmRleE9mKFwiLlwiKSA+PSAwKSB7XG4gICAgICAgIHJldHVybiBwcm9wcy5pdGVtLmtleS5zcGxpdChcIi5cIik7XG4gICAgICB9XG4gICAgICByZXR1cm4gcHJvcHMuaXRlbS5rZXk7XG4gICAgfSk7XG5cbiAgICBjb25zdCBjb21wdXRlZExhYmVsID0gY29tcHV0ZWQoKCkgPT4ge1xuICAgICAgcmV0dXJuIHByb3BzLml0ZW0ubGFiZWwgfHwgcHJvcHMuaXRlbS50aXRsZTtcbiAgICB9KTtcbiAgICBjb25zdCBjb21wdXRlZExhYmVsSXNSZW5kZXIgPSBjb21wdXRlZCgoKSA9PiB7XG4gICAgICByZXR1cm4gY29tcHV0ZWRMYWJlbC52YWx1ZSBpbnN0YW5jZW9mIEZ1bmN0aW9uO1xuICAgIH0pO1xuXG4gICAgY29uc3QgY29tcHV0ZWRMYWJlbFJlbmRlciA9ICgpID0+IHtcbiAgICAgIHJldHVybiBjb21wdXRlZExhYmVsLnZhbHVlKHNjb3BlRnVuYygpKTtcbiAgICB9O1xuXG4gICAgcmV0dXJuIHtcbiAgICAgIHVpLFxuICAgICAgdXBkYXRlTW9kZWxWYWx1ZSxcbiAgICAgIHNjb3BlRnVuYyxcbiAgICAgIGdldENvbXBvbmVudFJlZixcbiAgICAgIGNvbXBvbmVudFJlbmRlclJlZixcbiAgICAgIGNvbXB1dGVkSGVscGVyUG9zaXRpb24sXG4gICAgICBjb21wdXRlZEhlbHBlclRvb2x0aXAsXG4gICAgICBjb21wdXRlZEtleSxcbiAgICAgIGNvbXB1dGVkTGFiZWxJc1JlbmRlcixcbiAgICAgIGNvbXB1dGVkTGFiZWwsXG4gICAgICBjb21wdXRlZExhYmVsUmVuZGVyXG4gICAgfTtcbiAgfVxufSk7XG48L3NjcmlwdD5cblxuPHN0eWxlIGxhbmc9XCJsZXNzXCI+XG4uZnMtZm9ybS1pdGVtIHtcbiAgLmFudC1mb3JtLWl0ZW0tbGFiZWwge1xuICAgIC8vbGluZS1oZWlnaHQ6IDE7XG4gICAgLmZzLWZvcm0taXRlbS1sYWJlbC10ZXh0IHtcbiAgICAgIHdpZHRoOiAxMDAlO1xuICAgICAgdGV4dC1vdmVyZmxvdzogZWxsaXBzaXM7XG4gICAgICBvdmVyZmxvdzogaGlkZGVuO1xuICAgICAgd2hpdGUtc3BhY2U6IG5vd3JhcDtcbiAgICB9XG4gIH1cbiAgLmVsLWZvcm0taXRlbSB7XG4gICAgLmZzLWZvcm0taXRlbS1sYWJlbC1pY29uIHtcbiAgICAgIGxpbmUtaGVpZ2h0OiAxO1xuICAgICAgaGVpZ2h0OiBpbmhlcml0O1xuICAgIH1cbiAgfVxuICAuZnMtZm9ybS1pdGVtLWxhYmVsLWljb24ge1xuICAgIG1hcmdpbjogMCAycHg7XG4gICAgLmZzLWZvcm0taXRlbS1sYWJlbC1pY29uLWlubmVyIHtcbiAgICAgIGxpbmUtaGVpZ2h0OiBpbmhlcml0O1xuICAgICAgaGVpZ2h0OiBpbmhlcml0O1xuICAgIH1cbiAgfVxuICAuZnMtZm9ybS1pdGVtLWNvbnRlbnQge1xuICAgIGRpc3BsYXk6IGZsZXg7XG4gICAgZmxleC1kaXJlY3Rpb246IGNvbHVtbjtcbiAgICB3aWR0aDogMTAwJTtcbiAgICBmbGV4OiAxO1xuICAgIC5mcy1mb3JtLWl0ZW0tcmVuZGVyIHtcbiAgICAgIGRpc3BsYXk6IGZsZXg7XG4gICAgICBhbGlnbi1pdGVtczogY2VudGVyO1xuICAgICAganVzdGlmeS1jb250ZW50OiBmbGV4LXN0YXJ0O1xuICAgICAgLmZzLWZvcm0taXRlbS1jb21wb25lbnQge1xuICAgICAgICBmbGV4OiAxO1xuICAgICAgICBtYXgtd2lkdGg6IDEwMCU7XG4gICAgICB9XG4gICAgfVxuICB9XG59XG4uZnMtZm9ybS1oZWxwZXItdG9vbHRpcCB7XG4gIC5mcy1mb3JtLWhlbHBlciB7XG4gICAgY29sb3I6IGluaGVyaXQ7XG4gIH1cbn1cbjwvc3R5bGU+XG4iLCI8dGVtcGxhdGU+XG4gIDxkaXYgY2xhc3M9XCJmcy1mb3JtLWhlbHBlclwiPlxuICAgIDxwcmUgdi1pZj1cInR5cGVvZiBoZWxwZXIgPT09ICdzdHJpbmcnXCI+e3sgaGVscGVyIH19PC9wcmU+XG4gICAgPHRlbXBsYXRlIHYtZWxzZS1pZj1cImhlbHBlci5yZW5kZXJcIj5cbiAgICAgIDxmcy1yZW5kZXIgOnJlbmRlci1mdW5jPVwiaGVscGVyLnJlbmRlclwiIDpzY29wZT1cInNjb3BlXCIgLz5cbiAgICA8L3RlbXBsYXRlPlxuICAgIDxwcmUgdi1lbHNlLWlmPVwiaGVscGVyLnRleHRcIj57eyBoZWxwZXIudGV4dCB9fTwvcHJlPlxuICA8L2Rpdj5cbjwvdGVtcGxhdGU+XG48c2NyaXB0IGxhbmc9XCJ0c1wiPlxuaW1wb3J0IHsgZGVmaW5lQ29tcG9uZW50IH0gZnJvbSBcInZ1ZVwiO1xuXG4vKipcbiAqIOihqOWNleWtl+auteW4ruWKqeivtOaYjue7hOS7tlxuICovXG5leHBvcnQgZGVmYXVsdCBkZWZpbmVDb21wb25lbnQoe1xuICBuYW1lOiBcIkZzRm9ybUhlbHBlclwiLFxuICBwcm9wczoge1xuICAgIC8qKlxuICAgICAqIOW4ruWKqeivtOaYjiwgdGV4dDog6K+05piO5paH5a2XLCByZW5kZXI6IGZ1bmN0aW9uKHNjb3BlKSDoh6rlrprkuYnmuLLmn5NcbiAgICAgKi9cbiAgICBoZWxwZXI6IHtcbiAgICAgIHR5cGU6IFtcbiAgICAgICAgLyoqXG4gICAgICAgICAqIHRleHQ6IOivtOaYjuaWh+WtlyxcbiAgICAgICAgICogcmVuZGVyOiBmdW5jdGlvbiAsIOiHquWumuS5iXJlbmRlclxuICAgICAgICAgKi9cbiAgICAgICAgT2JqZWN0LFxuICAgICAgICAvKipcbiAgICAgICAgICog6K+05piO5paH5pysXG4gICAgICAgICAqL1xuICAgICAgICBTdHJpbmdcbiAgICAgIF1cbiAgICB9LFxuICAgIHNjb3BlOiB7fVxuICB9LFxuICBzZXR1cChwcm9wcykge31cbn0pO1xuPC9zY3JpcHQ+XG48c3R5bGUgbGFuZz1cImxlc3NcIj5cbi5mcy1mb3JtLWhlbHBlciB7XG4gIGNvbG9yOiAjN2U3ZTdlO1xuICBsaW5lLWhlaWdodDogMS4zO1xuICBtYXJnaW4tdG9wOiA0cHg7XG4gIG1hcmdpbi1ib3R0b206IDZweDtcblxuICBmb250LXNpemU6IDEycHg7XG4gIHByZSB7XG4gICAgZm9udC1mYW1pbHk6IGluaGVyaXQ7XG4gICAgd2hpdGUtc3BhY2U6IHByZS13cmFwO1xuICAgIHdvcmQtd3JhcDogYnJlYWstd29yZDtcbiAgICBtYXJnaW4tYm90dG9tOiAwcHg7XG4gIH1cbn1cbjwvc3R5bGU+XG4iLCI8dGVtcGxhdGU+XG4gIDxkaXYgY2xhc3M9XCJmcy1mb3JtLWhlbHBlclwiPlxuICAgIDxwcmUgdi1pZj1cInR5cGVvZiBoZWxwZXIgPT09ICdzdHJpbmcnXCI+e3sgaGVscGVyIH19PC9wcmU+XG4gICAgPHRlbXBsYXRlIHYtZWxzZS1pZj1cImhlbHBlci5yZW5kZXJcIj5cbiAgICAgIDxmcy1yZW5kZXIgOnJlbmRlci1mdW5jPVwiaGVscGVyLnJlbmRlclwiIDpzY29wZT1cInNjb3BlXCIgLz5cbiAgICA8L3RlbXBsYXRlPlxuICAgIDxwcmUgdi1lbHNlLWlmPVwiaGVscGVyLnRleHRcIj57eyBoZWxwZXIudGV4dCB9fTwvcHJlPlxuICA8L2Rpdj5cbjwvdGVtcGxhdGU+XG48c2NyaXB0IGxhbmc9XCJ0c1wiPlxuaW1wb3J0IHsgZGVmaW5lQ29tcG9uZW50IH0gZnJvbSBcInZ1ZVwiO1xuXG4vKipcbiAqIOihqOWNleWtl+auteW4ruWKqeivtOaYjue7hOS7tlxuICovXG5leHBvcnQgZGVmYXVsdCBkZWZpbmVDb21wb25lbnQoe1xuICBuYW1lOiBcIkZzRm9ybUhlbHBlclwiLFxuICBwcm9wczoge1xuICAgIC8qKlxuICAgICAqIOW4ruWKqeivtOaYjiwgdGV4dDog6K+05piO5paH5a2XLCByZW5kZXI6IGZ1bmN0aW9uKHNjb3BlKSDoh6rlrprkuYnmuLLmn5NcbiAgICAgKi9cbiAgICBoZWxwZXI6IHtcbiAgICAgIHR5cGU6IFtcbiAgICAgICAgLyoqXG4gICAgICAgICAqIHRleHQ6IOivtOaYjuaWh+WtlyxcbiAgICAgICAgICogcmVuZGVyOiBmdW5jdGlvbiAsIOiHquWumuS5iXJlbmRlclxuICAgICAgICAgKi9cbiAgICAgICAgT2JqZWN0LFxuICAgICAgICAvKipcbiAgICAgICAgICog6K+05piO5paH5pysXG4gICAgICAgICAqL1xuICAgICAgICBTdHJpbmdcbiAgICAgIF1cbiAgICB9LFxuICAgIHNjb3BlOiB7fVxuICB9LFxuICBzZXR1cChwcm9wcykge31cbn0pO1xuPC9zY3JpcHQ+XG48c3R5bGUgbGFuZz1cImxlc3NcIj5cbi5mcy1mb3JtLWhlbHBlciB7XG4gIGNvbG9yOiAjN2U3ZTdlO1xuICBsaW5lLWhlaWdodDogMS4zO1xuICBtYXJnaW4tdG9wOiA0cHg7XG4gIG1hcmdpbi1ib3R0b206IDZweDtcblxuICBmb250LXNpemU6IDEycHg7XG4gIHByZSB7XG4gICAgZm9udC1mYW1pbHk6IGluaGVyaXQ7XG4gICAgd2hpdGUtc3BhY2U6IHByZS13cmFwO1xuICAgIHdvcmQtd3JhcDogYnJlYWstd29yZDtcbiAgICBtYXJnaW4tYm90dG9tOiAwcHg7XG4gIH1cbn1cbjwvc3R5bGU+XG4iLG51bGwsIjxzY3JpcHQgbGFuZz1cInRzXCI+XG5pbXBvcnQgeyBkZWZpbmVDb21wb25lbnQgYXMgX19NQUNST1NfZGVmaW5lQ29tcG9uZW50IH0gZnJvbSBcInZ1ZVwiO1xuZXhwb3J0IGRlZmF1bHQgLyojX19QVVJFX18qLyBfX01BQ1JPU19kZWZpbmVDb21wb25lbnQoe1xuICBuYW1lOiBcIkZzRm9ybVByb3ZpZGVyXCJcbn0pO1xuPC9zY3JpcHQ+XG48dGVtcGxhdGU+XG4gIDxzbG90Pjwvc2xvdD5cbiAgPGZzLWZvcm0td3JhcHBlciB2LWZvcj1cIml0ZW0gb2YgZm9ybVdyYXBwZXJMaXN0XCIgOmtleT1cIml0ZW0uaWRcIiB2LWJpbmQ9XCJpdGVtXCIgLz5cbjwvdGVtcGxhdGU+XG5cbjxzY3JpcHQgc2V0dXAgbGFuZz1cInRzXCI+XG5pbXBvcnQgeyBwcm92aWRlLCBSZWYsIHJlZiB9IGZyb20gXCJ2dWVcIjtcbmltcG9ydCBGc0Zvcm1XcmFwcGVyIGZyb20gXCIuL2ZzLWZvcm0td3JhcHBlci5qc1wiO1xuaW1wb3J0IHsgT3BlbkRpYWxvZ1Byb3BzIH0gZnJvbSBcIi4uLy4uL2RcIjtcblxuO1xuXG5jb25zdCBmb3JtV3JhcHBlckxpc3Q6IFJlZiA9IHJlZih7fSk7XG5cbmZ1bmN0aW9uIGdldE1heFpJbmRleCgpOiBudW1iZXIge1xuICBsZXQgZWxlbWVudHMgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yQWxsKFwiKlwiKTtcbiAgbGV0IG1heFppbmRleCA9IDEwO1xuICBmb3IgKGxldCBpID0gMDsgaSA8IGVsZW1lbnRzLmxlbmd0aDsgaSsrKSB7XG4gICAgLy8gQHRzLWlnbm9yZVxuICAgIG1heFppbmRleCA9IE1hdGgubWF4KG1heFppbmRleCwgZWxlbWVudHNbaV0uc3R5bGUuekluZGV4IHx8IDApO1xuICB9XG4gIHJldHVybiBtYXhaaW5kZXg7XG59XG5cbnByb3ZpZGUoXCJ1c2U6Zm9ybTp3cmFwcGVyXCIsICgpID0+IHtcbiAgcmV0dXJuIHtcbiAgICBvcGVuKG9wdHM6IE9wZW5EaWFsb2dQcm9wcykge1xuICAgICAgY29uc3QgaWQgPSBvcHRzLmlkIHx8IE1hdGguZmxvb3IoTWF0aC5yYW5kb20oKSAqIDEwMDAwMDApICsgXCJcIjtcbiAgICAgIHJldHVybiBuZXcgUHJvbWlzZSgocmVzb2x2ZSwgcmVqZWN0KSA9PiB7XG4gICAgICAgIGZvcm1XcmFwcGVyTGlzdC52YWx1ZVtpZF0gPSB7XG4gICAgICAgICAgaWQsXG4gICAgICAgICAgLy8gekluZGV4OiBnZXRNYXhaSW5kZXgoKSArIDEsXG4gICAgICAgICAgYXN5bmMgb25Nb3VudGVkKGluc3RhbmNlOiBhbnkpIHtcbiAgICAgICAgICAgIGF3YWl0IGluc3RhbmNlLm9wZW4ob3B0cyk7XG4gICAgICAgICAgICByZXNvbHZlKGluc3RhbmNlKTtcbiAgICAgICAgICB9LFxuICAgICAgICAgIG9uQ2xvc2VkKCkge1xuICAgICAgICAgICAgaWYgKCFvcHRzLmlkKSB7XG4gICAgICAgICAgICAgIC8v5aaC5p6c5LiN5piv5Zu65a6aaWTvvIzliJnlhbPpl63lkI7plIDmr4FcbiAgICAgICAgICAgICAgZGVsZXRlIGZvcm1XcmFwcGVyTGlzdC52YWx1ZVtpZF07XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfVxuICAgICAgICB9O1xuICAgICAgfSk7XG4gICAgfVxuICB9O1xufSk7XG48L3NjcmlwdD5cbiIsIjx0ZW1wbGF0ZT5cbiAgPGNvbXBvbmVudFxuICAgIDppcz1cImNvbnRhaW5lcj8uaXMgfHwgJ2ZzLWxheW91dC1kZWZhdWx0J1wiXG4gICAgcmVmPVwiY29udGFpbmVyUmVmXCJcbiAgICBjbGFzcz1cImZzLWNydWQtY29udGFpbmVyXCJcbiAgICB2LWJpbmQ9XCJjb250YWluZXJcIlxuICAgIDpjbGFzcz1cImNvbXB1dGVkQ2xhc3NcIlxuICA+XG4gICAgPHNsb3Q+PC9zbG90PlxuXG4gICAgPHRlbXBsYXRlICNoZWFkZXItdG9wPlxuICAgICAgPHNsb3QgbmFtZT1cImhlYWRlci10b3BcIj48L3Nsb3Q+XG4gICAgPC90ZW1wbGF0ZT5cbiAgICA8dGVtcGxhdGUgI2hlYWRlci1ib3R0b20+XG4gICAgICA8c2xvdCBuYW1lPVwiaGVhZGVyLWJvdHRvbVwiPjwvc2xvdD5cbiAgICA8L3RlbXBsYXRlPlxuICAgIDx0ZW1wbGF0ZSAjaGVhZGVyLW1pZGRsZT5cbiAgICAgIDxzbG90IG5hbWU9XCJoZWFkZXItbWlkZGxlXCI+PC9zbG90PlxuICAgIDwvdGVtcGxhdGU+XG5cbiAgICA8dGVtcGxhdGUgI3NlYXJjaD5cbiAgICAgIDxkaXYgY2xhc3M9XCJmcy1jcnVkLXNlYXJjaFwiPlxuICAgICAgICA8Y29tcG9uZW50IDppcz1cInNlYXJjaC5pcyB8fCAnZnMtc2VhcmNoJ1wiIHJlZj1cInNlYXJjaFJlZlwiIHYtYmluZD1cInNlYXJjaFwiIDpzbG90cz1cImNvbXB1dGVkU2VhcmNoU2xvdHNcIiAvPlxuICAgICAgPC9kaXY+XG4gICAgPC90ZW1wbGF0ZT5cblxuICAgIDx0ZW1wbGF0ZSAjYWN0aW9uYmFyPlxuICAgICAgPGRpdiB2LWlmPVwiYWN0aW9uYmFyICYmIGFjdGlvbmJhci5zaG93ICE9PSBmYWxzZVwiIGNsYXNzPVwiZnMtY3J1ZC1hY3Rpb25iYXJcIj5cbiAgICAgICAgPHNsb3QgbmFtZT1cImFjdGlvbmJhci1sZWZ0XCI+PC9zbG90PlxuICAgICAgICA8ZnMtYWN0aW9uYmFyIHYtYmluZD1cImFjdGlvbmJhclwiIC8+XG4gICAgICAgIDxzbG90IG5hbWU9XCJhY3Rpb25iYXItcmlnaHRcIj48L3Nsb3Q+XG4gICAgICA8L2Rpdj5cbiAgICA8L3RlbXBsYXRlPlxuXG4gICAgPHRlbXBsYXRlICN0b29sYmFyPlxuICAgICAgPGRpdiB2LWlmPVwidG9vbGJhciAmJiB0b29sYmFyLnNob3cgIT09IGZhbHNlXCIgY2xhc3M9XCJmcy1jcnVkLXRvb2xiYXJcIj5cbiAgICAgICAgPHNsb3QgbmFtZT1cInRvb2xiYXItbGVmdFwiPjwvc2xvdD5cbiAgICAgICAgPGZzLXRvb2xiYXIgcmVmPVwidG9vbGJhclJlZlwiIHYtYmluZD1cInRvb2xiYXJcIiA6c2xvdHM9XCJjb21wdXRlZFRvb2xiYXJTbG90c1wiIDpjb2x1bW5zPVwidGFibGUuY29sdW1uc1wiIC8+XG4gICAgICAgIDxzbG90IG5hbWU9XCJ0b29sYmFyLXJpZ2h0XCI+PC9zbG90PlxuICAgICAgPC9kaXY+XG4gICAgPC90ZW1wbGF0ZT5cbiAgICA8dGVtcGxhdGUgI3RhYnM+XG4gICAgICA8ZnMtdGFicy1maWx0ZXIgdi1pZj1cInRhYnNCaW5kaW5nLnNob3dcIiByZWY9XCJ0YWJzUmVmXCIgY2xhc3M9XCJmcy10YWJzXCIgdi1iaW5kPVwidGFic0JpbmRpbmdcIiAvPlxuICAgIDwvdGVtcGxhdGU+XG4gICAgPHRlbXBsYXRlICN0YWJsZT5cbiAgICAgIDxmcy10YWJsZVxuICAgICAgICByZWY9XCJ0YWJsZVJlZlwiXG4gICAgICAgIGNsYXNzPVwiZnMtY3J1ZC10YWJsZVwiXG4gICAgICAgIHYtYmluZD1cImNvbXB1dGVkVGFibGVcIlxuICAgICAgICA6Y29sdW1ucz1cInRhYmxlLmNvbHVtbnNcIlxuICAgICAgICA6bG9hZGluZz1cInRhYmxlLmxvYWRpbmdcIlxuICAgICAgICA6cm93LWhhbmRsZT1cInJvd0hhbmRsZVwiXG4gICAgICAgIDpkYXRhPVwiZGF0YVwiXG4gICAgICAgIDpjZWxsLXNsb3RzPVwiY29tcHV0ZWRDZWxsU2xvdHNcIlxuICAgICAgLz5cbiAgICA8L3RlbXBsYXRlPlxuXG4gICAgPHRlbXBsYXRlICNmb3JtPlxuICAgICAgPGRpdiByZWY9XCJpbm5lcldyYXBwZXJSZWZcIiBjbGFzcz1cImZzLWZvcm0td3JhcHBlci1jb250YWluZXJcIiA6Y2xhc3M9XCJ7ICdmcy1mb3JtLWlubmVyLXdyYXBwZXInOiBpc0Zvcm1Jbm5lciB9XCI+XG4gICAgICAgIDxmcy1mb3JtLXdyYXBwZXJcbiAgICAgICAgICByZWY9XCJmb3JtV3JhcHBlclJlZlwiXG4gICAgICAgICAgOnNsb3RzPVwiY29tcHV0ZWRGb3JtU2xvdHNcIlxuICAgICAgICAgIDppbm5lci13cmFwcGVyPVwiaW5uZXJXcmFwcGVyUmVmXCJcbiAgICAgICAgICBAaW5uZXItY2hhbmdlPVwib25Gb3JtSW5uZXJDaGFuZ2VcIlxuICAgICAgICAgIEB2YWx1ZS1jaGFuZ2U9XCIkZW1pdCgnZm9ybS12YWx1ZS1jaGFuZ2UnLCAkZXZlbnQpXCJcbiAgICAgICAgLz5cbiAgICAgICAgPCEtLSDnvJbovpHlr7nor53moYYgLS0+XG4gICAgICA8L2Rpdj5cbiAgICA8L3RlbXBsYXRlPlxuXG4gICAgPHRlbXBsYXRlICNwYWdpbmF0aW9uPlxuICAgICAgPGRpdiBjbGFzcz1cImZzLWNydWQtcGFnaW5hdGlvblwiPlxuICAgICAgICA8ZGl2IGNsYXNzPVwiZnMtcGFnaW5hdGlvbi1sZWZ0XCI+XG4gICAgICAgICAgPHNsb3QgbmFtZT1cInBhZ2luYXRpb24tbGVmdFwiPjwvc2xvdD5cbiAgICAgICAgPC9kaXY+XG4gICAgICAgIDxkaXYgY2xhc3M9XCJmcy1wYWdpbmF0aW9uXCI+XG4gICAgICAgICAgPCEtLSBwYWdpbmF0aW9uLmN1cnJlbnRQYWdlIOWmguaenOS4uuepuu+8jCBlbGVtZW505Lya5Ye66K2m5ZGKIC0tPlxuICAgICAgICAgIDxjb21wb25lbnQgOmlzPVwidWkucGFnaW5hdGlvbi5uYW1lXCIgdi1pZj1cInBhZ2luYXRpb24uc2hvdyAhPT0gZmFsc2VcIiB2LWJpbmQ9XCJwYWdpbmF0aW9uXCIgLz5cbiAgICAgICAgPC9kaXY+XG4gICAgICAgIDxkaXYgY2xhc3M9XCJmcy1wYWdpbmF0aW9uLXJpZ2h0XCI+XG4gICAgICAgICAgPHNsb3QgbmFtZT1cInBhZ2luYXRpb24tcmlnaHRcIj48L3Nsb3Q+XG4gICAgICAgIDwvZGl2PlxuICAgICAgPC9kaXY+XG4gICAgPC90ZW1wbGF0ZT5cblxuICAgIDx0ZW1wbGF0ZSAjZm9vdGVyLXRvcD5cbiAgICAgIDxzbG90IG5hbWU9XCJmb290ZXItdG9wXCI+PC9zbG90PlxuICAgIDwvdGVtcGxhdGU+XG4gICAgPHRlbXBsYXRlICNmb290ZXItYm90dG9tPlxuICAgICAgPHNsb3QgbmFtZT1cImZvb3Rlci1ib3R0b21cIj48L3Nsb3Q+XG4gICAgPC90ZW1wbGF0ZT5cbiAgPC9jb21wb25lbnQ+XG48L3RlbXBsYXRlPlxuPHNjcmlwdCBsYW5nPVwidHNcIj5cbmltcG9ydCB7IGNvbXB1dGVkLCBkZWZpbmVDb21wb25lbnQsIG5leHRUaWNrLCBvbk1vdW50ZWQsIFByb3BUeXBlLCBwcm92aWRlLCByZWYsIFNldHVwQ29udGV4dCwgdG9SZWYgfSBmcm9tIFwidnVlXCI7XG5pbXBvcnQgXyBmcm9tIFwibG9kYXNoLWVzXCI7XG5pbXBvcnQgeyB1aUNvbnRleHQgfSBmcm9tIFwiLi4vdWlcIjtcbmltcG9ydCB7IHVzZU1lcmdlIH0gZnJvbSBcIi4uL3VzZS91c2UtbWVyZ2VcIjtcbmltcG9ydCB1dGlsTG9nIGZyb20gXCIuLi91dGlscy91dGlsLmxvZ1wiO1xuaW1wb3J0IHsgUm93U2VsZWN0aW9uUHJvcHMsIFNldFNlYXJjaEZvcm1EYXRhUHJvcHMgfSBmcm9tIFwiLi4vZFwiO1xuaW1wb3J0IHsgdXNlVWkgfSBmcm9tIFwiLi4vdXNlXCI7XG5pbXBvcnQgeyB1dGlscyB9IGZyb20gXCIuLi91dGlsc1wiO1xuaW1wb3J0IGxvZ2dlciBmcm9tIFwiLi4vdXRpbHMvdXRpbC5sb2dcIjtcblxuY29uc3QgeyBtZXJnZSB9ID0gdXNlTWVyZ2UoKTtcblxuZnVuY3Rpb24gdXNlUHJvdmlkZXJzKHByb3BzOiBhbnksIGN0eDogU2V0dXBDb250ZXh0KSB7XG4gIHByb3ZpZGUoXCJnZXQ6Y29sdW1uc1wiLCAoKSA9PiB7XG4gICAgcmV0dXJuIHByb3BzLnRhYmxlLmNvbHVtbnM7XG4gIH0pO1xuICBwcm92aWRlKFwidXBkYXRlOmNvbHVtbnNcIiwgKGNvbHVtbnM6IGFueSkgPT4ge1xuICAgIGN0eC5lbWl0KFwidXBkYXRlOmNvbHVtbnNcIiwgY29sdW1ucyk7XG4gIH0pO1xuXG4gIHByb3ZpZGUoXCJnZXQ6Y3J1ZEJpbmRpbmdcIiwgKCkgPT4ge1xuICAgIHJldHVybiBwcm9wcztcbiAgfSk7XG59XG5cbmZ1bmN0aW9uIHVzZVNlYXJjaChwcm9wczogYW55LCBjdHg6IFNldHVwQ29udGV4dCkge1xuICBjb25zdCBzZWFyY2hSZWYgPSByZWYoKTtcbiAgY29uc3QgZ2V0U2VhcmNoUmVmID0gKCkgPT4ge1xuICAgIHJldHVybiBzZWFyY2hSZWYudmFsdWU7XG4gIH07XG5cbiAgY29uc3QgZ2V0U2VhcmNoRm9ybURhdGEgPSAoKSA9PiB7XG4gICAgaWYgKHNlYXJjaFJlZi52YWx1ZSkge1xuICAgICAgcmV0dXJuIHNlYXJjaFJlZi52YWx1ZS5nZXRGb3JtKCk7XG4gICAgfVxuICAgIGxvZ2dlci53YXJuKFwi6K+35L2/55SoZXhwb3NlLmdldFNlYXJjaEZvcm1EYXRh5Luj5pu/XCIpO1xuICAgIHJldHVybiB7fTtcbiAgfTtcblxuICBjb25zdCBnZXRTZWFyY2hWYWxpZGF0ZWRGb3JtRGF0YSA9ICgpID0+IHtcbiAgICBpZiAoc2VhcmNoUmVmLnZhbHVlKSB7XG4gICAgICByZXR1cm4gc2VhcmNoUmVmLnZhbHVlLmdldFZhbGlkYXRlZEZvcm0oKTtcbiAgICB9XG4gICAgbG9nZ2VyLndhcm4oXCLor7fkvb/nlKhleHBvc2UuZ2V0U2VhcmNoVmFsaWRhdGVkRm9ybURhdGHku6Pmm79cIik7XG4gICAgcmV0dXJuIHt9O1xuICB9O1xuXG4gIC8qKlxuICAgKiDorr7nva5mb3Jt5YC8XG4gICAqIEBwYXJhbSBmb3JtIGZvcm3lr7nosaFcbiAgICogQHBhcmFtIG9wdHMgPSB7XG4gICAqICAgIGlzTWVyZ2U6ZmFsc2Ug5piv5ZCm5LiO5Y6f5pyJZm9ybeWAvOWQiOW5tixcbiAgICogfVxuICAgKi9cbiAgZnVuY3Rpb24gc2V0U2VhcmNoRm9ybURhdGEoeyBmb3JtLCBtZXJnZUZvcm0gPSBmYWxzZSB9OiBTZXRTZWFyY2hGb3JtRGF0YVByb3BzKSB7XG4gICAgaWYgKHNlYXJjaFJlZi52YWx1ZSkge1xuICAgICAgc2VhcmNoUmVmLnZhbHVlLnNldEZvcm0oZm9ybSwgbWVyZ2VGb3JtKTtcbiAgICB9XG4gIH1cblxuICByZXR1cm4ge1xuICAgIHNlYXJjaFJlZixcbiAgICBnZXRTZWFyY2hSZWYsXG4gICAgZ2V0U2VhcmNoRm9ybURhdGEsXG4gICAgc2V0U2VhcmNoRm9ybURhdGEsXG4gICAgZ2V0U2VhcmNoVmFsaWRhdGVkRm9ybURhdGFcbiAgfTtcbn1cblxuZnVuY3Rpb24gdXNlVGFicyhzZWFyY2hSZXQ6IGFueSwgcHJvcHM6IGFueSwgY3R4OiBTZXR1cENvbnRleHQpIHtcbiAgY29uc3QgdGFic0JpbmRpbmcgPSBjb21wdXRlZCgoKSA9PiB7XG4gICAgaWYgKHByb3BzLnRhYnMgJiYgcHJvcHMudGFicy5zaG93ICYmIHByb3BzLnRhYnMubmFtZSkge1xuICAgICAgbGV0IGRpY3QgPSBudWxsO1xuICAgICAgY29uc3QgZGVmYXVsdFRhYnMgPSB7IC4uLnByb3BzLnRhYnMgfTtcbiAgICAgIGlmIChwcm9wcy5zZWFyY2g/LmNvbHVtbnMgJiYgcHJvcHMuc2VhcmNoPy5jb2x1bW5zW3Byb3BzLnRhYnMubmFtZV0/LmNvbXBvbmVudD8uZGljdCkge1xuICAgICAgICBkaWN0ID0gcHJvcHMuc2VhcmNoPy5jb2x1bW5zW3Byb3BzLnRhYnMubmFtZV0/LmNvbXBvbmVudD8uZGljdDtcbiAgICAgICAgaWYgKGRlZmF1bHRUYWJzLnZhbHVlID09IG51bGwpIHtcbiAgICAgICAgICBkZWZhdWx0VGFicy52YWx1ZSA9IGRpY3QudmFsdWU7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKGRlZmF1bHRUYWJzLmxhYmVsID09IG51bGwpIHtcbiAgICAgICAgICBkZWZhdWx0VGFicy5sYWJlbCA9IGRpY3QubGFiZWw7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKGRlZmF1bHRUYWJzLm9wdGlvbnMgPT0gbnVsbCkge1xuICAgICAgICAgIGRlZmF1bHRUYWJzLm9wdGlvbnMgPSBkaWN0LmRhdGEgfHwgW107XG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgcmV0dXJuIHtcbiAgICAgICAgLi4uZGVmYXVsdFRhYnMsXG4gICAgICAgIG1vZGVsVmFsdWU6IHByb3BzLnNlYXJjaC52YWxpZGF0ZWRGb3JtICYmIHByb3BzLnNlYXJjaC52YWxpZGF0ZWRGb3JtW3Byb3BzLnRhYnMubmFtZV0sXG4gICAgICAgIFwib25VcGRhdGU6bW9kZWxWYWx1ZVwiOiAodmFsdWU6IGFueSkgPT4ge1xuICAgICAgICAgIGN0eC5lbWl0KFwidGFiLWNoYW5nZVwiLCB7IFtwcm9wcy50YWJzLm5hbWVdOiB2YWx1ZSB9KTtcbiAgICAgICAgfVxuICAgICAgfTtcbiAgICB9XG4gICAgcmV0dXJuIHtcbiAgICAgIHNob3c6IGZhbHNlXG4gICAgfTtcbiAgfSk7XG4gIHJldHVybiB7XG4gICAgdGFic0JpbmRpbmdcbiAgfTtcbn1cblxuZnVuY3Rpb24gc2xvdEZpbHRlcihjdHhTbG90czogYW55LCBrZXlQcmVmaXg6IHN0cmluZykge1xuICBpZiAoIWN0eFNsb3RzKSB7XG4gICAgcmV0dXJuIHt9O1xuICB9XG4gIGNvbnN0IHNsb3RzOiBhbnkgPSB7fTtcbiAgXy5mb3JFYWNoKGN0eFNsb3RzLCAodmFsdWUsIGtleSkgPT4ge1xuICAgIGlmIChrZXkuc3RhcnRzV2l0aChrZXlQcmVmaXgpKSB7XG4gICAgICBzbG90c1trZXldID0gdmFsdWU7XG4gICAgfVxuICB9KTtcbiAgcmV0dXJuIHNsb3RzO1xufVxuXG5mdW5jdGlvbiB1c2VGaXhlZEhlaWdodChwcm9wczogYW55LCBjdHg6IFNldHVwQ29udGV4dCwgeyB0YWJsZVJlZiwgY29udGFpbmVyUmVmIH06IGFueSkge1xuICBjb25zdCB1aSA9IHVpQ29udGV4dC5nZXQoKTtcbiAgaWYgKHVpLnRhYmxlLmhhc01heEhlaWdodChwcm9wcy50YWJsZSkpIHtcbiAgICByZXR1cm4ge307XG4gIH1cbiAgaWYgKCF1aS50YWJsZS5maXhlZEhlYWRlck5lZWRDb21wdXRlQm9keUhlaWdodCkge1xuICAgIHJldHVybiB7fTtcbiAgfVxuICBjb25zdCBtYXhIZWlnaHRSZWYgPSByZWYobnVsbCk7XG5cbiAgZnVuY3Rpb24gY29tcHV0ZUJvZHlIZWlnaHQoKSB7XG4gICAgY29uc3QgdGFibGVEb20gPSB0YWJsZVJlZj8udmFsdWU/LiRlbDtcbiAgICBpZiAodGFibGVEb20gPT0gbnVsbCB8fCB0YWJsZURvbS5xdWVyeVNlbGVjdG9yID09IG51bGwpIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG4gICAgY29uc3QgaGVhZERvbSA9IHRhYmxlRG9tLnF1ZXJ5U2VsZWN0b3IodWkudGFibGUuaGVhZGVyRG9tU2VsZWN0b3IpO1xuICAgIGlmIChoZWFkRG9tID09IG51bGwpIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG4gICAgY29uc3QgdGFibGVIZWlnaHQgPSB0YWJsZURvbS5nZXRCb3VuZGluZ0NsaWVudFJlY3QoKS5oZWlnaHQ7XG4gICAgY29uc3QgaGVhZEhlaWdodCA9IGhlYWREb20uZ2V0Qm91bmRpbmdDbGllbnRSZWN0KCkuaGVpZ2h0O1xuICAgIG1heEhlaWdodFJlZi52YWx1ZSA9IHRhYmxlSGVpZ2h0IC0gaGVhZEhlaWdodCAtIDIgKyAocHJvcHMudGFibGUubWF4SGVpZ2h0QWRqdXN0IHx8IDApO1xuXG4gICAgdXRpbExvZy5kZWJ1ZyhcInRhYmxlIG1heCBoZWlnaHQgcmVjb21wdXRlZCBcIiwgbWF4SGVpZ2h0UmVmLnZhbHVlKTtcbiAgfVxuXG4gIGZ1bmN0aW9uIHdhdGNoQm9keUhlaWdodENoYW5nZSgpIHtcbiAgICBjb25zdCB0YWJsZURvbSA9IHRhYmxlUmVmLnZhbHVlLiRlbDtcbiAgICBpZiAodGFibGVEb20gPT0gbnVsbCkge1xuICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICBjb25zdCB0YWJsZVdyYXBwZXJEb20gPSB0YWJsZURvbS5wYXJlbnROb2RlO1xuXG4gICAgY29uc3Qgb2JzZXJ2ZXIgPSBuZXcgUmVzaXplT2JzZXJ2ZXIoZnVuY3Rpb24gKGVudHJpZXMpIHtcbiAgICAgIHV0aWxMb2cuZGVidWcoXCJ0YWJsZSByZXNpemVkXCIsIGVudHJpZXMpO1xuICAgICAgLy8g5q+P5qyh6KKr6KeC5rWL55qE5YWD57Sg5bC65a+45Y+R55Sf5pS55Y+Y6L+Z6YeM6YO95Lya5omn6KGMXG4gICAgICBpZiAoZW50cmllcy5sZW5ndGggPiAwICYmIGVudHJpZXNbMF0uY29udGVudFJlY3QuaGVpZ2h0ID4gMCkge1xuICAgICAgICBjb21wdXRlQm9keUhlaWdodCgpO1xuICAgICAgICBzZXRUaW1lb3V0KCgpID0+IHtcbiAgICAgICAgICBjb21wdXRlQm9keUhlaWdodCgpO1xuICAgICAgICB9LCAyMDApO1xuICAgICAgICBzZXRUaW1lb3V0KCgpID0+IHtcbiAgICAgICAgICBjb21wdXRlQm9keUhlaWdodCgpO1xuICAgICAgICB9LCA1MDApO1xuICAgICAgfVxuICAgIH0pO1xuICAgIG9ic2VydmVyLm9ic2VydmUodGFibGVXcmFwcGVyRG9tKTsgLy8g6KeC5rWLRE9N5YWD57SgXG4gIH1cblxuICBvbk1vdW50ZWQoYXN5bmMgKCkgPT4ge1xuICAgIGF3YWl0IG5leHRUaWNrKCk7XG4gICAgYXdhaXQgbmV4dFRpY2soKTtcbiAgICB3YXRjaEJvZHlIZWlnaHRDaGFuZ2UoKTtcbiAgfSk7XG4gIHJldHVybiB7IG1heEhlaWdodFJlZiwgY29tcHV0ZUJvZHlIZWlnaHQgfTtcbn1cblxuZnVuY3Rpb24gdXNlVGFibGUocHJvcHM6IGFueSwgY3R4OiBTZXR1cENvbnRleHQpIHtcbiAgY29uc3QgdWkgPSB1aUNvbnRleHQuZ2V0KCk7XG4gIGNvbnN0IHRhYmxlUmVmID0gcmVmKCk7XG4gIGNvbnN0IHRvb2xiYXJSZWYgPSByZWYoKTtcbiAgY29uc3QgY29udGFpbmVyUmVmID0gcmVmKCk7XG4gIGNvbnN0IHsgbWF4SGVpZ2h0UmVmLCBjb21wdXRlQm9keUhlaWdodCB9ID0gdXNlRml4ZWRIZWlnaHQocHJvcHMsIGN0eCwgeyB0YWJsZVJlZiwgY29udGFpbmVyUmVmIH0pO1xuICBjb25zdCB7IG1lcmdlIH0gPSB1c2VNZXJnZSgpO1xuICBjb25zdCB0YWJsZVByb3BSZWYgPSB0b1JlZihwcm9wcywgXCJ0YWJsZVwiKTtcbiAgY29uc3QgY29tcHV0ZWRUYWJsZSA9IGNvbXB1dGVkKCgpID0+IHtcbiAgICAvLyBhbnRkdiBuYWl2ZSDpq5jluqboh6rpgILlupTvvIwg5aaC5p6c55So5oi35pyJ6YWN572uc2Nyb2xs77yM5YiZ5LyY5YWI5L2/55So55So5oi36YWN572u55qEXG4gICAgbGV0IGZpeGVkSGVpZ2h0ID0ge307XG4gICAgaWYgKG1heEhlaWdodFJlZj8udmFsdWUgIT0gbnVsbCkge1xuICAgICAgZml4ZWRIZWlnaHQgPSB1aS50YWJsZS5idWlsZE1heEhlaWdodChtYXhIZWlnaHRSZWYudmFsdWUpO1xuICAgIH1cbiAgICBjb25zdCBwQXR0cnMgPSB1dGlscy5kYXNoLm9taXQodGFibGVQcm9wUmVmLCBcImxvYWRpbmdcIiwgXCJjb2x1bW5zXCIsIFwiY29sdW1uc01hcFwiKTtcblxuICAgIHJldHVybiBtZXJnZShmaXhlZEhlaWdodCwgeyAuLi5jdHguYXR0cnMsIC4uLnBBdHRycyB9KTtcbiAgfSk7XG5cbiAgY29uc3QgY29tcHV0ZWRUb29sYmFyID0gdG9SZWYocHJvcHMsIFwidG9vbGJhclwiKTtcblxuICBjb25zdCBjb21wdXRlZENlbGxTbG90cyA9IGNvbXB1dGVkKCgpID0+IHtcbiAgICByZXR1cm4gc2xvdEZpbHRlcihjdHguc2xvdHMsIFwiY2VsbFwiKTtcbiAgfSk7XG5cbiAgY29uc3QgY29tcHV0ZWRGb3JtU2xvdHMgPSBjb21wdXRlZCgoKSA9PiB7XG4gICAgcmV0dXJuIHNsb3RGaWx0ZXIoY3R4LnNsb3RzLCBcImZvcm1cIik7XG4gIH0pO1xuICBjb25zdCBjb21wdXRlZFNlYXJjaFNsb3RzID0gY29tcHV0ZWQoKCkgPT4ge1xuICAgIHJldHVybiBzbG90RmlsdGVyKGN0eC5zbG90cywgXCJzZWFyY2hcIik7XG4gIH0pO1xuICBjb25zdCBjb21wdXRlZFRvb2xiYXJTbG90cyA9IGNvbXB1dGVkKCgpID0+IHtcbiAgICByZXR1cm4gc2xvdEZpbHRlcihjdHguc2xvdHMsIFwidG9vbGJhclwiKTtcbiAgfSk7XG5cbiAgY29uc3QgZm9ybVdyYXBwZXJSZWYgPSByZWYoKTtcblxuICBjb25zdCBjb21wdXRlZENsYXNzID0gY29tcHV0ZWQoKCkgPT4ge1xuICAgIGNvbnN0IGNsYXp6OiBhbnkgPSB7IGNvbXBhY3Q6IHByb3BzLnRvb2xiYXIuY29tcGFjdCAhPT0gZmFsc2UgfTtcbiAgICBpZiAocHJvcHMuY3VzdG9tQ2xhc3MpIHtcbiAgICAgIGNsYXp6W3Byb3BzLmN1c3RvbUNsYXNzXSA9IHRydWU7XG4gICAgfVxuICAgIHJldHVybiBjbGF6ejtcbiAgfSk7XG5cbiAgY29uc3QgaW5uZXJXcmFwcGVyUmVmID0gcmVmKCk7XG5cbiAgY29uc3QgaXNGb3JtSW5uZXIgPSByZWYoZmFsc2UpO1xuICBjb25zdCBvbkZvcm1Jbm5lckNoYW5nZSA9ICh2YWx1ZTogYW55KSA9PiB7XG4gICAgaXNGb3JtSW5uZXIudmFsdWUgPSB2YWx1ZTtcbiAgfTtcblxuICByZXR1cm4ge1xuICAgIHRhYmxlUmVmLFxuICAgIGNvbnRhaW5lclJlZixcbiAgICB0b29sYmFyUmVmLFxuICAgIGNvbXB1dGVkVGFibGUsXG4gICAgY29tcHV0ZWRUb29sYmFyLFxuICAgIGNvbXB1dGVkQ2VsbFNsb3RzLFxuICAgIGZvcm1XcmFwcGVyUmVmLFxuICAgIGlzRm9ybUlubmVyLFxuICAgIG9uRm9ybUlubmVyQ2hhbmdlLFxuICAgIGNvbXB1dGVkRm9ybVNsb3RzLFxuICAgIGNvbXB1dGVkU2VhcmNoU2xvdHMsXG4gICAgY29tcHV0ZWRUb29sYmFyU2xvdHMsXG4gICAgY29tcHV0ZUJvZHlIZWlnaHQsXG4gICAgY29tcHV0ZWRDbGFzcyxcbiAgICBpbm5lcldyYXBwZXJSZWZcbiAgfTtcbn1cblxuLyoqXG4gKiBmcy1jcnVkXG4gKi9cbmV4cG9ydCBkZWZhdWx0IGRlZmluZUNvbXBvbmVudCh7XG4gIG5hbWU6IFwiRnNDcnVkXCIsXG4gIGluaGVyaXRBdHRyczogZmFsc2UsXG4gIHByb3BzOiB7XG4gICAgLyoqXG4gICAgICog6KGo5qC86YWN572u77yM6KeBRnNUYWJsZVxuICAgICAqL1xuICAgIHRhYmxlOiB7XG4gICAgICB0eXBlOiBPYmplY3QsXG4gICAgICBkZWZhdWx0KCkge1xuICAgICAgICByZXR1cm4ge307XG4gICAgICB9XG4gICAgfSxcbiAgICAvKipcbiAgICAgKiDooajmoLzmlbDmja5cbiAgICAgKi9cbiAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgdnVlL3JlcXVpcmUtZGVmYXVsdC1wcm9wXG4gICAgZGF0YToge1xuICAgICAgdHlwZTogQXJyYXlcbiAgICB9LFxuICAgIC8qKlxuICAgICAqIOaTjeS9nOWIl+mFjee9ru+8jOingUZzUm93SGFuZGxlXG4gICAgICovXG4gICAgcm93SGFuZGxlOiB7XG4gICAgICB0eXBlOiBPYmplY3QsXG4gICAgICBkZWZhdWx0KCkge1xuICAgICAgICByZXR1cm4ge307XG4gICAgICB9XG4gICAgfSxcbiAgICAvKipcbiAgICAgKiDmn6Xor6LmoYbphY3nva7vvIzop4FGc1NlYXJjaFxuICAgICAqL1xuICAgIHNlYXJjaDoge1xuICAgICAgdHlwZTogT2JqZWN0LFxuICAgICAgZGVmYXVsdCgpIHtcbiAgICAgICAgcmV0dXJuIHt9O1xuICAgICAgfVxuICAgIH0sXG4gICAgLyoqXG4gICAgICog5bel5YW35p2h6YWN572u77yM6KeBRnNUb29sYmFyXG4gICAgICovXG4gICAgdG9vbGJhcjoge1xuICAgICAgdHlwZTogT2JqZWN0LFxuICAgICAgZGVmYXVsdCgpIHtcbiAgICAgICAgcmV0dXJuIHt9O1xuICAgICAgfVxuICAgIH0sXG4gICAgLyoqXG4gICAgICog5Yqo5L2c5p2h6YWN572u77yM6KeBRnNBY3Rpb25iYXJcbiAgICAgKi9cbiAgICBhY3Rpb25iYXI6IHtcbiAgICAgIHR5cGU6IE9iamVjdCxcbiAgICAgIGRlZmF1bHQoKSB7XG4gICAgICAgIHJldHVybiB7fTtcbiAgICAgIH1cbiAgICB9LFxuICAgIC8qKlxuICAgICAqIHRhYnMgZmlsdGVyXG4gICAgICovXG4gICAgdGFiczoge1xuICAgICAgdHlwZTogT2JqZWN0LFxuICAgICAgZGVmYXVsdCgpIHtcbiAgICAgICAgcmV0dXJuIHt9O1xuICAgICAgfVxuICAgIH0sXG4gICAgLyoqXG4gICAgICog5re75Yqg6KGo5Y2V5a+56K+d5qGG6YWN572u77yM6KeBRnNGb3JtV3JhcHBlclxuICAgICAqL1xuICAgIGFkZEZvcm06IHtcbiAgICAgIHR5cGU6IE9iamVjdCxcbiAgICAgIGRlZmF1bHQoKSB7XG4gICAgICAgIHJldHVybiB7fTtcbiAgICAgIH1cbiAgICB9LFxuICAgIC8qKlxuICAgICAqIOe8lui+keihqOWNleWvueivneahhumFjee9ru+8jOingUZzRm9ybVdyYXBwZXJcbiAgICAgKi9cbiAgICBlZGl0Rm9ybToge1xuICAgICAgdHlwZTogT2JqZWN0LFxuICAgICAgZGVmYXVsdCgpIHtcbiAgICAgICAgcmV0dXJuIHt9O1xuICAgICAgfVxuICAgIH0sXG4gICAgLyoqXG4gICAgICog5p+l55yL6KGo5Y2V5a+56K+d5qGG6YWN572u77yM6KeBRnNGb3JtV3JhcHBlclxuICAgICAqL1xuICAgIHZpZXdGb3JtOiB7XG4gICAgICB0eXBlOiBPYmplY3QsXG4gICAgICBkZWZhdWx0KCkge1xuICAgICAgICByZXR1cm4ge307XG4gICAgICB9XG4gICAgfSxcbiAgICAvKipcbiAgICAgKiDnv7vpobXphY3nva4s5pSv5oyBZWwtcGFnaW5hdGlvbnxhLXBhZ2luYXRpb27phY3nva5cbiAgICAgKi9cbiAgICBwYWdpbmF0aW9uOiB7XG4gICAgICB0eXBlOiBPYmplY3QsXG4gICAgICBkZWZhdWx0KCkge1xuICAgICAgICByZXR1cm4geyBzaG93OiBmYWxzZSB9O1xuICAgICAgfVxuICAgIH0sXG4gICAgLyoqXG4gICAgICog5a655Zmo6YWN572u77yM6KeBRnNDb250YWluZXJcbiAgICAgKi9cbiAgICBjb250YWluZXI6IHtcbiAgICAgIHR5cGU6IE9iamVjdCxcbiAgICAgIGRlZmF1bHQoKSB7XG4gICAgICAgIHJldHVybiB7fTtcbiAgICAgIH1cbiAgICB9LFxuXG4gICAgLyoqXG4gICAgICogY3J1ZOWMheijueWuueWZqOeahGNsYXNzXG4gICAgICovXG4gICAgY3VzdG9tQ2xhc3M6IHt9LFxuICAgIC8qKlxuICAgICAqIOS4jeimgeS8oOWIsGZzLXRhYmxl5Y67XG4gICAgICovXG4gICAgZm9ybToge1xuICAgICAgdHlwZTogT2JqZWN0LFxuICAgICAgZGVmYXVsdCgpIHtcbiAgICAgICAgcmV0dXJuIHt9O1xuICAgICAgfVxuICAgIH0sXG5cbiAgICAvKipcbiAgICAgKiDlj6/pgInmi6lcbiAgICAgKi9cbiAgICBzZWxlY3Rpb246IHtcbiAgICAgIHR5cGU6IE9iamVjdCBhcyBQcm9wVHlwZTxSb3dTZWxlY3Rpb25Qcm9wcz4sXG4gICAgICBkZWZhdWx0KCkge1xuICAgICAgICByZXR1cm4geyBzaG93OiBmYWxzZSB9O1xuICAgICAgfVxuICAgIH1cbiAgfSxcbiAgZW1pdHM6IFtcInVwZGF0ZTpzZWFyY2hcIiwgXCJ1cGRhdGU6Y29tcGFjdFwiLCBcInVwZGF0ZTpjb2x1bW5zXCIsIFwiZm9ybS12YWx1ZS1jaGFuZ2VcIiwgXCJ1cGRhdGU6bW9kZWxWYWx1ZVwiLCBcInRhYi1jaGFuZ2VcIl0sXG4gIHNldHVwKHByb3BzOiBhbnksIGN0eDogYW55KSB7XG4gICAgY29uc3QgeyB1aSB9ID0gdXNlVWkoKTtcbiAgICB1c2VQcm92aWRlcnMocHJvcHMsIGN0eCk7XG4gICAgY29uc3Qgc2VhcmNoID0gdXNlU2VhcmNoKHByb3BzLCBjdHgpO1xuICAgIGNvbnN0IHRhYnMgPSB1c2VUYWJzKHNlYXJjaCwgcHJvcHMsIGN0eCk7XG4gICAgY29uc3QgdGFibGUgPSB1c2VUYWJsZShwcm9wcywgY3R4KTtcbiAgICByZXR1cm4ge1xuICAgICAgdWksXG4gICAgICAuLi5zZWFyY2gsXG4gICAgICAuLi50YWJsZSxcbiAgICAgIC4uLnRhYnNcbiAgICB9O1xuICB9XG59KTtcbjwvc2NyaXB0PlxuPHN0eWxlIGxhbmc9XCJsZXNzXCI+XG4vL+S9nOS4uuaVsOaNruihqOagvOS9v+eUqOeahOmihOiuvuagt+W8j++8jOmakOiXj2Zvb3Rlcu+8jOihqOagvOmrmOW6pueijuiusOW9leaVsOWinuWKoOiAjOWinuWKoFxuLmZzLWNydWQtYXMtdGFibGUge1xuICBtaW4taGVpZ2h0OiAwICFpbXBvcnRhbnQ7XG4gIGhlaWdodDogdW5zZXQ7XG5cbiAgLmZzLWNydWQtZm9vdGVyIHtcbiAgICBkaXNwbGF5OiBub25lO1xuICB9XG5cbiAgLmJveCAuaW5uZXIge1xuICAgIHBvc2l0aW9uOiBzdGF0aWM7XG4gIH1cbn1cblxuLmZzLWNydWQtY29udGFpbmVyIHtcbiAgbWluLWhlaWdodDogMzAwcHg7XG5cbiAgJi5jb21wYWN0IHtcbiAgICAuZWwtdGFibGUtLWJvcmRlciB7XG4gICAgICBib3JkZXItbGVmdDogMDtcbiAgICB9XG5cbiAgICAuZnMtY3J1ZC1oZWFkZXIge1xuICAgICAgcGFkZGluZy1sZWZ0OiAxMHB4O1xuICAgICAgcGFkZGluZy1yaWdodDogMTBweDtcbiAgICB9XG5cbiAgICAuZnMtY3J1ZC1mb290ZXIge1xuICAgICAgcGFkZGluZy1sZWZ0OiAxMHB4O1xuICAgICAgcGFkZGluZy1yaWdodDogMTBweDtcbiAgICB9XG4gIH1cblxuICAuZnMtY3J1ZC1oZWFkZXIge1xuICAgIGRpc3BsYXk6IGZsZXg7XG4gICAgcGFkZGluZzogMTBweCAwO1xuICAgIGZsZXgtd3JhcDogd3JhcDtcblxuICAgIC5mcy1oZWFkZXItdG9wIHtcbiAgICAgIHdpZHRoOiAxMDAlO1xuICAgIH1cblxuICAgIC5mcy1jcnVkLXNlYXJjaCB7XG4gICAgICB3aWR0aDogMTAwJTtcbiAgICAgIGdyaWQtY29sdW1uOiBzcGFuIDI7XG4gICAgICBwYWRkaW5nLWJvdHRvbTogNXB4O1xuICAgIH1cblxuICAgIC5mcy1oZWFkZXItbWlkZGxlIHtcbiAgICAgIHdpZHRoOiAxMDAlO1xuICAgIH1cblxuICAgIC5mcy1oZWFkZXItYm90dG9tIHtcbiAgICAgIHdpZHRoOiAxMDAlO1xuICAgIH1cblxuICAgIC5mcy1jcnVkLWFjdGlvbmJhciB7XG4gICAgICAvLyBwYWRkaW5nLXRvcDogNXB4O1xuICAgICAgZGlzcGxheTogZmxleDtcbiAgICAgIGZsZXg6IDEwMDAwO1xuICAgICAgYWxpZ24taXRlbXM6IGNlbnRlcjtcbiAgICAgIG1pbi13aWR0aDogMXB4O1xuICAgIH1cblxuICAgIC5mcy1jcnVkLXRvb2xiYXIge1xuICAgICAgZGlzcGxheTogZmxleDtcbiAgICAgIGp1c3RpZnktY29udGVudDogZmxleC1lbmQ7XG4gICAgICBhbGlnbi1pdGVtczogY2VudGVyO1xuICAgICAgbWFyZ2luLXJpZ2h0OiAxMHB4O1xuICAgICAgZmxleDogMTtcbiAgICB9XG4gIH1cblxuICAuZnMtY3J1ZC10YWJsZSB7XG4gICAgaGVpZ2h0OiAxMDAlO1xuICAgIHdpZHRoOiAxMDAlO1xuICB9XG5cbiAgLmZzLWNydWQtZm9vdGVyIHtcbiAgICBwYWRkaW5nOiAxMHB4IDA7XG5cbiAgICAuZnMtY3J1ZC1wYWdpbmF0aW9uIHtcbiAgICAgIGRpc3BsYXk6IGZsZXg7XG4gICAgICBmbGV4LWRpcmVjdGlvbjogcm93O1xuICAgICAganVzdGlmeS1jb250ZW50OiBjZW50ZXI7XG4gICAgICBhbGlnbi1pdGVtczogY2VudGVyO1xuXG4gICAgICAuZnMtcGFnaW5hdGlvbi1sZWZ0IHtcbiAgICAgICAgbWFyZ2luLXJpZ2h0OiAxMHB4O1xuICAgICAgfVxuXG4gICAgICAuZnMtcGFnaW5hdGlvbi1yaWdodCB7XG4gICAgICAgIGZsZXg6IDA7XG4gICAgICB9XG5cbiAgICAgIC5mcy1wYWdpbmF0aW9uIHtcbiAgICAgICAgZmxleDogMTtcblxuICAgICAgICAuYW50LXBhZ2luYXRpb24tb3B0aW9ucyB7XG4gICAgICAgICAgLmFudC1zZWxlY3Qge1xuICAgICAgICAgICAgd2lkdGg6IGF1dG87XG4gICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgLmVsLXBhZ2luYXRpb24ge1xuICAgICAgICAgIHBhZGRpbmctbGVmdDogMDtcbiAgICAgICAgICBwYWRkaW5nLXJpZ2h0OiAwO1xuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIC5mcy1wYWdpbmF0aW9uLXJpZ2h0IHtcbiAgICAgICAgZmxleDogMDtcbiAgICAgIH1cbiAgICB9XG4gIH1cbn1cbjwvc3R5bGU+XG4iLCI8dGVtcGxhdGU+XG4gIDxjb21wb25lbnRcbiAgICA6aXM9XCJjb250YWluZXI/LmlzIHx8ICdmcy1sYXlvdXQtZGVmYXVsdCdcIlxuICAgIHJlZj1cImNvbnRhaW5lclJlZlwiXG4gICAgY2xhc3M9XCJmcy1jcnVkLWNvbnRhaW5lclwiXG4gICAgdi1iaW5kPVwiY29udGFpbmVyXCJcbiAgICA6Y2xhc3M9XCJjb21wdXRlZENsYXNzXCJcbiAgPlxuICAgIDxzbG90Pjwvc2xvdD5cblxuICAgIDx0ZW1wbGF0ZSAjaGVhZGVyLXRvcD5cbiAgICAgIDxzbG90IG5hbWU9XCJoZWFkZXItdG9wXCI+PC9zbG90PlxuICAgIDwvdGVtcGxhdGU+XG4gICAgPHRlbXBsYXRlICNoZWFkZXItYm90dG9tPlxuICAgICAgPHNsb3QgbmFtZT1cImhlYWRlci1ib3R0b21cIj48L3Nsb3Q+XG4gICAgPC90ZW1wbGF0ZT5cbiAgICA8dGVtcGxhdGUgI2hlYWRlci1taWRkbGU+XG4gICAgICA8c2xvdCBuYW1lPVwiaGVhZGVyLW1pZGRsZVwiPjwvc2xvdD5cbiAgICA8L3RlbXBsYXRlPlxuXG4gICAgPHRlbXBsYXRlICNzZWFyY2g+XG4gICAgICA8ZGl2IGNsYXNzPVwiZnMtY3J1ZC1zZWFyY2hcIj5cbiAgICAgICAgPGNvbXBvbmVudCA6aXM9XCJzZWFyY2guaXMgfHwgJ2ZzLXNlYXJjaCdcIiByZWY9XCJzZWFyY2hSZWZcIiB2LWJpbmQ9XCJzZWFyY2hcIiA6c2xvdHM9XCJjb21wdXRlZFNlYXJjaFNsb3RzXCIgLz5cbiAgICAgIDwvZGl2PlxuICAgIDwvdGVtcGxhdGU+XG5cbiAgICA8dGVtcGxhdGUgI2FjdGlvbmJhcj5cbiAgICAgIDxkaXYgdi1pZj1cImFjdGlvbmJhciAmJiBhY3Rpb25iYXIuc2hvdyAhPT0gZmFsc2VcIiBjbGFzcz1cImZzLWNydWQtYWN0aW9uYmFyXCI+XG4gICAgICAgIDxzbG90IG5hbWU9XCJhY3Rpb25iYXItbGVmdFwiPjwvc2xvdD5cbiAgICAgICAgPGZzLWFjdGlvbmJhciB2LWJpbmQ9XCJhY3Rpb25iYXJcIiAvPlxuICAgICAgICA8c2xvdCBuYW1lPVwiYWN0aW9uYmFyLXJpZ2h0XCI+PC9zbG90PlxuICAgICAgPC9kaXY+XG4gICAgPC90ZW1wbGF0ZT5cblxuICAgIDx0ZW1wbGF0ZSAjdG9vbGJhcj5cbiAgICAgIDxkaXYgdi1pZj1cInRvb2xiYXIgJiYgdG9vbGJhci5zaG93ICE9PSBmYWxzZVwiIGNsYXNzPVwiZnMtY3J1ZC10b29sYmFyXCI+XG4gICAgICAgIDxzbG90IG5hbWU9XCJ0b29sYmFyLWxlZnRcIj48L3Nsb3Q+XG4gICAgICAgIDxmcy10b29sYmFyIHJlZj1cInRvb2xiYXJSZWZcIiB2LWJpbmQ9XCJ0b29sYmFyXCIgOnNsb3RzPVwiY29tcHV0ZWRUb29sYmFyU2xvdHNcIiA6Y29sdW1ucz1cInRhYmxlLmNvbHVtbnNcIiAvPlxuICAgICAgICA8c2xvdCBuYW1lPVwidG9vbGJhci1yaWdodFwiPjwvc2xvdD5cbiAgICAgIDwvZGl2PlxuICAgIDwvdGVtcGxhdGU+XG4gICAgPHRlbXBsYXRlICN0YWJzPlxuICAgICAgPGZzLXRhYnMtZmlsdGVyIHYtaWY9XCJ0YWJzQmluZGluZy5zaG93XCIgcmVmPVwidGFic1JlZlwiIGNsYXNzPVwiZnMtdGFic1wiIHYtYmluZD1cInRhYnNCaW5kaW5nXCIgLz5cbiAgICA8L3RlbXBsYXRlPlxuICAgIDx0ZW1wbGF0ZSAjdGFibGU+XG4gICAgICA8ZnMtdGFibGVcbiAgICAgICAgcmVmPVwidGFibGVSZWZcIlxuICAgICAgICBjbGFzcz1cImZzLWNydWQtdGFibGVcIlxuICAgICAgICB2LWJpbmQ9XCJjb21wdXRlZFRhYmxlXCJcbiAgICAgICAgOmNvbHVtbnM9XCJ0YWJsZS5jb2x1bW5zXCJcbiAgICAgICAgOmxvYWRpbmc9XCJ0YWJsZS5sb2FkaW5nXCJcbiAgICAgICAgOnJvdy1oYW5kbGU9XCJyb3dIYW5kbGVcIlxuICAgICAgICA6ZGF0YT1cImRhdGFcIlxuICAgICAgICA6Y2VsbC1zbG90cz1cImNvbXB1dGVkQ2VsbFNsb3RzXCJcbiAgICAgIC8+XG4gICAgPC90ZW1wbGF0ZT5cblxuICAgIDx0ZW1wbGF0ZSAjZm9ybT5cbiAgICAgIDxkaXYgcmVmPVwiaW5uZXJXcmFwcGVyUmVmXCIgY2xhc3M9XCJmcy1mb3JtLXdyYXBwZXItY29udGFpbmVyXCIgOmNsYXNzPVwieyAnZnMtZm9ybS1pbm5lci13cmFwcGVyJzogaXNGb3JtSW5uZXIgfVwiPlxuICAgICAgICA8ZnMtZm9ybS13cmFwcGVyXG4gICAgICAgICAgcmVmPVwiZm9ybVdyYXBwZXJSZWZcIlxuICAgICAgICAgIDpzbG90cz1cImNvbXB1dGVkRm9ybVNsb3RzXCJcbiAgICAgICAgICA6aW5uZXItd3JhcHBlcj1cImlubmVyV3JhcHBlclJlZlwiXG4gICAgICAgICAgQGlubmVyLWNoYW5nZT1cIm9uRm9ybUlubmVyQ2hhbmdlXCJcbiAgICAgICAgICBAdmFsdWUtY2hhbmdlPVwiJGVtaXQoJ2Zvcm0tdmFsdWUtY2hhbmdlJywgJGV2ZW50KVwiXG4gICAgICAgIC8+XG4gICAgICAgIDwhLS0g57yW6L6R5a+56K+d5qGGIC0tPlxuICAgICAgPC9kaXY+XG4gICAgPC90ZW1wbGF0ZT5cblxuICAgIDx0ZW1wbGF0ZSAjcGFnaW5hdGlvbj5cbiAgICAgIDxkaXYgY2xhc3M9XCJmcy1jcnVkLXBhZ2luYXRpb25cIj5cbiAgICAgICAgPGRpdiBjbGFzcz1cImZzLXBhZ2luYXRpb24tbGVmdFwiPlxuICAgICAgICAgIDxzbG90IG5hbWU9XCJwYWdpbmF0aW9uLWxlZnRcIj48L3Nsb3Q+XG4gICAgICAgIDwvZGl2PlxuICAgICAgICA8ZGl2IGNsYXNzPVwiZnMtcGFnaW5hdGlvblwiPlxuICAgICAgICAgIDwhLS0gcGFnaW5hdGlvbi5jdXJyZW50UGFnZSDlpoLmnpzkuLrnqbrvvIwgZWxlbWVudOS8muWHuuitpuWRiiAtLT5cbiAgICAgICAgICA8Y29tcG9uZW50IDppcz1cInVpLnBhZ2luYXRpb24ubmFtZVwiIHYtaWY9XCJwYWdpbmF0aW9uLnNob3cgIT09IGZhbHNlXCIgdi1iaW5kPVwicGFnaW5hdGlvblwiIC8+XG4gICAgICAgIDwvZGl2PlxuICAgICAgICA8ZGl2IGNsYXNzPVwiZnMtcGFnaW5hdGlvbi1yaWdodFwiPlxuICAgICAgICAgIDxzbG90IG5hbWU9XCJwYWdpbmF0aW9uLXJpZ2h0XCI+PC9zbG90PlxuICAgICAgICA8L2Rpdj5cbiAgICAgIDwvZGl2PlxuICAgIDwvdGVtcGxhdGU+XG5cbiAgICA8dGVtcGxhdGUgI2Zvb3Rlci10b3A+XG4gICAgICA8c2xvdCBuYW1lPVwiZm9vdGVyLXRvcFwiPjwvc2xvdD5cbiAgICA8L3RlbXBsYXRlPlxuICAgIDx0ZW1wbGF0ZSAjZm9vdGVyLWJvdHRvbT5cbiAgICAgIDxzbG90IG5hbWU9XCJmb290ZXItYm90dG9tXCI+PC9zbG90PlxuICAgIDwvdGVtcGxhdGU+XG4gIDwvY29tcG9uZW50PlxuPC90ZW1wbGF0ZT5cbjxzY3JpcHQgbGFuZz1cInRzXCI+XG5pbXBvcnQgeyBjb21wdXRlZCwgZGVmaW5lQ29tcG9uZW50LCBuZXh0VGljaywgb25Nb3VudGVkLCBQcm9wVHlwZSwgcHJvdmlkZSwgcmVmLCBTZXR1cENvbnRleHQsIHRvUmVmIH0gZnJvbSBcInZ1ZVwiO1xuaW1wb3J0IF8gZnJvbSBcImxvZGFzaC1lc1wiO1xuaW1wb3J0IHsgdWlDb250ZXh0IH0gZnJvbSBcIi4uL3VpXCI7XG5pbXBvcnQgeyB1c2VNZXJnZSB9IGZyb20gXCIuLi91c2UvdXNlLW1lcmdlXCI7XG5pbXBvcnQgdXRpbExvZyBmcm9tIFwiLi4vdXRpbHMvdXRpbC5sb2dcIjtcbmltcG9ydCB7IFJvd1NlbGVjdGlvblByb3BzLCBTZXRTZWFyY2hGb3JtRGF0YVByb3BzIH0gZnJvbSBcIi4uL2RcIjtcbmltcG9ydCB7IHVzZVVpIH0gZnJvbSBcIi4uL3VzZVwiO1xuaW1wb3J0IHsgdXRpbHMgfSBmcm9tIFwiLi4vdXRpbHNcIjtcbmltcG9ydCBsb2dnZXIgZnJvbSBcIi4uL3V0aWxzL3V0aWwubG9nXCI7XG5cbmNvbnN0IHsgbWVyZ2UgfSA9IHVzZU1lcmdlKCk7XG5cbmZ1bmN0aW9uIHVzZVByb3ZpZGVycyhwcm9wczogYW55LCBjdHg6IFNldHVwQ29udGV4dCkge1xuICBwcm92aWRlKFwiZ2V0OmNvbHVtbnNcIiwgKCkgPT4ge1xuICAgIHJldHVybiBwcm9wcy50YWJsZS5jb2x1bW5zO1xuICB9KTtcbiAgcHJvdmlkZShcInVwZGF0ZTpjb2x1bW5zXCIsIChjb2x1bW5zOiBhbnkpID0+IHtcbiAgICBjdHguZW1pdChcInVwZGF0ZTpjb2x1bW5zXCIsIGNvbHVtbnMpO1xuICB9KTtcblxuICBwcm92aWRlKFwiZ2V0OmNydWRCaW5kaW5nXCIsICgpID0+IHtcbiAgICByZXR1cm4gcHJvcHM7XG4gIH0pO1xufVxuXG5mdW5jdGlvbiB1c2VTZWFyY2gocHJvcHM6IGFueSwgY3R4OiBTZXR1cENvbnRleHQpIHtcbiAgY29uc3Qgc2VhcmNoUmVmID0gcmVmKCk7XG4gIGNvbnN0IGdldFNlYXJjaFJlZiA9ICgpID0+IHtcbiAgICByZXR1cm4gc2VhcmNoUmVmLnZhbHVlO1xuICB9O1xuXG4gIGNvbnN0IGdldFNlYXJjaEZvcm1EYXRhID0gKCkgPT4ge1xuICAgIGlmIChzZWFyY2hSZWYudmFsdWUpIHtcbiAgICAgIHJldHVybiBzZWFyY2hSZWYudmFsdWUuZ2V0Rm9ybSgpO1xuICAgIH1cbiAgICBsb2dnZXIud2FybihcIuivt+S9v+eUqGV4cG9zZS5nZXRTZWFyY2hGb3JtRGF0YeS7o+abv1wiKTtcbiAgICByZXR1cm4ge307XG4gIH07XG5cbiAgY29uc3QgZ2V0U2VhcmNoVmFsaWRhdGVkRm9ybURhdGEgPSAoKSA9PiB7XG4gICAgaWYgKHNlYXJjaFJlZi52YWx1ZSkge1xuICAgICAgcmV0dXJuIHNlYXJjaFJlZi52YWx1ZS5nZXRWYWxpZGF0ZWRGb3JtKCk7XG4gICAgfVxuICAgIGxvZ2dlci53YXJuKFwi6K+35L2/55SoZXhwb3NlLmdldFNlYXJjaFZhbGlkYXRlZEZvcm1EYXRh5Luj5pu/XCIpO1xuICAgIHJldHVybiB7fTtcbiAgfTtcblxuICAvKipcbiAgICog6K6+572uZm9ybeWAvFxuICAgKiBAcGFyYW0gZm9ybSBmb3Jt5a+56LGhXG4gICAqIEBwYXJhbSBvcHRzID0ge1xuICAgKiAgICBpc01lcmdlOmZhbHNlIOaYr+WQpuS4juWOn+aciWZvcm3lgLzlkIjlubYsXG4gICAqIH1cbiAgICovXG4gIGZ1bmN0aW9uIHNldFNlYXJjaEZvcm1EYXRhKHsgZm9ybSwgbWVyZ2VGb3JtID0gZmFsc2UgfTogU2V0U2VhcmNoRm9ybURhdGFQcm9wcykge1xuICAgIGlmIChzZWFyY2hSZWYudmFsdWUpIHtcbiAgICAgIHNlYXJjaFJlZi52YWx1ZS5zZXRGb3JtKGZvcm0sIG1lcmdlRm9ybSk7XG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIHtcbiAgICBzZWFyY2hSZWYsXG4gICAgZ2V0U2VhcmNoUmVmLFxuICAgIGdldFNlYXJjaEZvcm1EYXRhLFxuICAgIHNldFNlYXJjaEZvcm1EYXRhLFxuICAgIGdldFNlYXJjaFZhbGlkYXRlZEZvcm1EYXRhXG4gIH07XG59XG5cbmZ1bmN0aW9uIHVzZVRhYnMoc2VhcmNoUmV0OiBhbnksIHByb3BzOiBhbnksIGN0eDogU2V0dXBDb250ZXh0KSB7XG4gIGNvbnN0IHRhYnNCaW5kaW5nID0gY29tcHV0ZWQoKCkgPT4ge1xuICAgIGlmIChwcm9wcy50YWJzICYmIHByb3BzLnRhYnMuc2hvdyAmJiBwcm9wcy50YWJzLm5hbWUpIHtcbiAgICAgIGxldCBkaWN0ID0gbnVsbDtcbiAgICAgIGNvbnN0IGRlZmF1bHRUYWJzID0geyAuLi5wcm9wcy50YWJzIH07XG4gICAgICBpZiAocHJvcHMuc2VhcmNoPy5jb2x1bW5zICYmIHByb3BzLnNlYXJjaD8uY29sdW1uc1twcm9wcy50YWJzLm5hbWVdPy5jb21wb25lbnQ/LmRpY3QpIHtcbiAgICAgICAgZGljdCA9IHByb3BzLnNlYXJjaD8uY29sdW1uc1twcm9wcy50YWJzLm5hbWVdPy5jb21wb25lbnQ/LmRpY3Q7XG4gICAgICAgIGlmIChkZWZhdWx0VGFicy52YWx1ZSA9PSBudWxsKSB7XG4gICAgICAgICAgZGVmYXVsdFRhYnMudmFsdWUgPSBkaWN0LnZhbHVlO1xuICAgICAgICB9XG4gICAgICAgIGlmIChkZWZhdWx0VGFicy5sYWJlbCA9PSBudWxsKSB7XG4gICAgICAgICAgZGVmYXVsdFRhYnMubGFiZWwgPSBkaWN0LmxhYmVsO1xuICAgICAgICB9XG4gICAgICAgIGlmIChkZWZhdWx0VGFicy5vcHRpb25zID09IG51bGwpIHtcbiAgICAgICAgICBkZWZhdWx0VGFicy5vcHRpb25zID0gZGljdC5kYXRhIHx8IFtdO1xuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIHJldHVybiB7XG4gICAgICAgIC4uLmRlZmF1bHRUYWJzLFxuICAgICAgICBtb2RlbFZhbHVlOiBwcm9wcy5zZWFyY2gudmFsaWRhdGVkRm9ybSAmJiBwcm9wcy5zZWFyY2gudmFsaWRhdGVkRm9ybVtwcm9wcy50YWJzLm5hbWVdLFxuICAgICAgICBcIm9uVXBkYXRlOm1vZGVsVmFsdWVcIjogKHZhbHVlOiBhbnkpID0+IHtcbiAgICAgICAgICBjdHguZW1pdChcInRhYi1jaGFuZ2VcIiwgeyBbcHJvcHMudGFicy5uYW1lXTogdmFsdWUgfSk7XG4gICAgICAgIH1cbiAgICAgIH07XG4gICAgfVxuICAgIHJldHVybiB7XG4gICAgICBzaG93OiBmYWxzZVxuICAgIH07XG4gIH0pO1xuICByZXR1cm4ge1xuICAgIHRhYnNCaW5kaW5nXG4gIH07XG59XG5cbmZ1bmN0aW9uIHNsb3RGaWx0ZXIoY3R4U2xvdHM6IGFueSwga2V5UHJlZml4OiBzdHJpbmcpIHtcbiAgaWYgKCFjdHhTbG90cykge1xuICAgIHJldHVybiB7fTtcbiAgfVxuICBjb25zdCBzbG90czogYW55ID0ge307XG4gIF8uZm9yRWFjaChjdHhTbG90cywgKHZhbHVlLCBrZXkpID0+IHtcbiAgICBpZiAoa2V5LnN0YXJ0c1dpdGgoa2V5UHJlZml4KSkge1xuICAgICAgc2xvdHNba2V5XSA9IHZhbHVlO1xuICAgIH1cbiAgfSk7XG4gIHJldHVybiBzbG90cztcbn1cblxuZnVuY3Rpb24gdXNlRml4ZWRIZWlnaHQocHJvcHM6IGFueSwgY3R4OiBTZXR1cENvbnRleHQsIHsgdGFibGVSZWYsIGNvbnRhaW5lclJlZiB9OiBhbnkpIHtcbiAgY29uc3QgdWkgPSB1aUNvbnRleHQuZ2V0KCk7XG4gIGlmICh1aS50YWJsZS5oYXNNYXhIZWlnaHQocHJvcHMudGFibGUpKSB7XG4gICAgcmV0dXJuIHt9O1xuICB9XG4gIGlmICghdWkudGFibGUuZml4ZWRIZWFkZXJOZWVkQ29tcHV0ZUJvZHlIZWlnaHQpIHtcbiAgICByZXR1cm4ge307XG4gIH1cbiAgY29uc3QgbWF4SGVpZ2h0UmVmID0gcmVmKG51bGwpO1xuXG4gIGZ1bmN0aW9uIGNvbXB1dGVCb2R5SGVpZ2h0KCkge1xuICAgIGNvbnN0IHRhYmxlRG9tID0gdGFibGVSZWY/LnZhbHVlPy4kZWw7XG4gICAgaWYgKHRhYmxlRG9tID09IG51bGwgfHwgdGFibGVEb20ucXVlcnlTZWxlY3RvciA9PSBudWxsKSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuICAgIGNvbnN0IGhlYWREb20gPSB0YWJsZURvbS5xdWVyeVNlbGVjdG9yKHVpLnRhYmxlLmhlYWRlckRvbVNlbGVjdG9yKTtcbiAgICBpZiAoaGVhZERvbSA9PSBudWxsKSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuICAgIGNvbnN0IHRhYmxlSGVpZ2h0ID0gdGFibGVEb20uZ2V0Qm91bmRpbmdDbGllbnRSZWN0KCkuaGVpZ2h0O1xuICAgIGNvbnN0IGhlYWRIZWlnaHQgPSBoZWFkRG9tLmdldEJvdW5kaW5nQ2xpZW50UmVjdCgpLmhlaWdodDtcbiAgICBtYXhIZWlnaHRSZWYudmFsdWUgPSB0YWJsZUhlaWdodCAtIGhlYWRIZWlnaHQgLSAyICsgKHByb3BzLnRhYmxlLm1heEhlaWdodEFkanVzdCB8fCAwKTtcblxuICAgIHV0aWxMb2cuZGVidWcoXCJ0YWJsZSBtYXggaGVpZ2h0IHJlY29tcHV0ZWQgXCIsIG1heEhlaWdodFJlZi52YWx1ZSk7XG4gIH1cblxuICBmdW5jdGlvbiB3YXRjaEJvZHlIZWlnaHRDaGFuZ2UoKSB7XG4gICAgY29uc3QgdGFibGVEb20gPSB0YWJsZVJlZi52YWx1ZS4kZWw7XG4gICAgaWYgKHRhYmxlRG9tID09IG51bGwpIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG4gICAgY29uc3QgdGFibGVXcmFwcGVyRG9tID0gdGFibGVEb20ucGFyZW50Tm9kZTtcblxuICAgIGNvbnN0IG9ic2VydmVyID0gbmV3IFJlc2l6ZU9ic2VydmVyKGZ1bmN0aW9uIChlbnRyaWVzKSB7XG4gICAgICB1dGlsTG9nLmRlYnVnKFwidGFibGUgcmVzaXplZFwiLCBlbnRyaWVzKTtcbiAgICAgIC8vIOavj+asoeiiq+ingua1i+eahOWFg+e0oOWwuuWvuOWPkeeUn+aUueWPmOi/memHjOmDveS8muaJp+ihjFxuICAgICAgaWYgKGVudHJpZXMubGVuZ3RoID4gMCAmJiBlbnRyaWVzWzBdLmNvbnRlbnRSZWN0LmhlaWdodCA+IDApIHtcbiAgICAgICAgY29tcHV0ZUJvZHlIZWlnaHQoKTtcbiAgICAgICAgc2V0VGltZW91dCgoKSA9PiB7XG4gICAgICAgICAgY29tcHV0ZUJvZHlIZWlnaHQoKTtcbiAgICAgICAgfSwgMjAwKTtcbiAgICAgICAgc2V0VGltZW91dCgoKSA9PiB7XG4gICAgICAgICAgY29tcHV0ZUJvZHlIZWlnaHQoKTtcbiAgICAgICAgfSwgNTAwKTtcbiAgICAgIH1cbiAgICB9KTtcbiAgICBvYnNlcnZlci5vYnNlcnZlKHRhYmxlV3JhcHBlckRvbSk7IC8vIOingua1i0RPTeWFg+e0oFxuICB9XG5cbiAgb25Nb3VudGVkKGFzeW5jICgpID0+IHtcbiAgICBhd2FpdCBuZXh0VGljaygpO1xuICAgIGF3YWl0IG5leHRUaWNrKCk7XG4gICAgd2F0Y2hCb2R5SGVpZ2h0Q2hhbmdlKCk7XG4gIH0pO1xuICByZXR1cm4geyBtYXhIZWlnaHRSZWYsIGNvbXB1dGVCb2R5SGVpZ2h0IH07XG59XG5cbmZ1bmN0aW9uIHVzZVRhYmxlKHByb3BzOiBhbnksIGN0eDogU2V0dXBDb250ZXh0KSB7XG4gIGNvbnN0IHVpID0gdWlDb250ZXh0LmdldCgpO1xuICBjb25zdCB0YWJsZVJlZiA9IHJlZigpO1xuICBjb25zdCB0b29sYmFyUmVmID0gcmVmKCk7XG4gIGNvbnN0IGNvbnRhaW5lclJlZiA9IHJlZigpO1xuICBjb25zdCB7IG1heEhlaWdodFJlZiwgY29tcHV0ZUJvZHlIZWlnaHQgfSA9IHVzZUZpeGVkSGVpZ2h0KHByb3BzLCBjdHgsIHsgdGFibGVSZWYsIGNvbnRhaW5lclJlZiB9KTtcbiAgY29uc3QgeyBtZXJnZSB9ID0gdXNlTWVyZ2UoKTtcbiAgY29uc3QgdGFibGVQcm9wUmVmID0gdG9SZWYocHJvcHMsIFwidGFibGVcIik7XG4gIGNvbnN0IGNvbXB1dGVkVGFibGUgPSBjb21wdXRlZCgoKSA9PiB7XG4gICAgLy8gYW50ZHYgbmFpdmUg6auY5bqm6Ieq6YCC5bqU77yMIOWmguaenOeUqOaIt+aciemFjee9rnNjcm9sbO+8jOWImeS8mOWFiOS9v+eUqOeUqOaIt+mFjee9rueahFxuICAgIGxldCBmaXhlZEhlaWdodCA9IHt9O1xuICAgIGlmIChtYXhIZWlnaHRSZWY/LnZhbHVlICE9IG51bGwpIHtcbiAgICAgIGZpeGVkSGVpZ2h0ID0gdWkudGFibGUuYnVpbGRNYXhIZWlnaHQobWF4SGVpZ2h0UmVmLnZhbHVlKTtcbiAgICB9XG4gICAgY29uc3QgcEF0dHJzID0gdXRpbHMuZGFzaC5vbWl0KHRhYmxlUHJvcFJlZiwgXCJsb2FkaW5nXCIsIFwiY29sdW1uc1wiLCBcImNvbHVtbnNNYXBcIik7XG5cbiAgICByZXR1cm4gbWVyZ2UoZml4ZWRIZWlnaHQsIHsgLi4uY3R4LmF0dHJzLCAuLi5wQXR0cnMgfSk7XG4gIH0pO1xuXG4gIGNvbnN0IGNvbXB1dGVkVG9vbGJhciA9IHRvUmVmKHByb3BzLCBcInRvb2xiYXJcIik7XG5cbiAgY29uc3QgY29tcHV0ZWRDZWxsU2xvdHMgPSBjb21wdXRlZCgoKSA9PiB7XG4gICAgcmV0dXJuIHNsb3RGaWx0ZXIoY3R4LnNsb3RzLCBcImNlbGxcIik7XG4gIH0pO1xuXG4gIGNvbnN0IGNvbXB1dGVkRm9ybVNsb3RzID0gY29tcHV0ZWQoKCkgPT4ge1xuICAgIHJldHVybiBzbG90RmlsdGVyKGN0eC5zbG90cywgXCJmb3JtXCIpO1xuICB9KTtcbiAgY29uc3QgY29tcHV0ZWRTZWFyY2hTbG90cyA9IGNvbXB1dGVkKCgpID0+IHtcbiAgICByZXR1cm4gc2xvdEZpbHRlcihjdHguc2xvdHMsIFwic2VhcmNoXCIpO1xuICB9KTtcbiAgY29uc3QgY29tcHV0ZWRUb29sYmFyU2xvdHMgPSBjb21wdXRlZCgoKSA9PiB7XG4gICAgcmV0dXJuIHNsb3RGaWx0ZXIoY3R4LnNsb3RzLCBcInRvb2xiYXJcIik7XG4gIH0pO1xuXG4gIGNvbnN0IGZvcm1XcmFwcGVyUmVmID0gcmVmKCk7XG5cbiAgY29uc3QgY29tcHV0ZWRDbGFzcyA9IGNvbXB1dGVkKCgpID0+IHtcbiAgICBjb25zdCBjbGF6ejogYW55ID0geyBjb21wYWN0OiBwcm9wcy50b29sYmFyLmNvbXBhY3QgIT09IGZhbHNlIH07XG4gICAgaWYgKHByb3BzLmN1c3RvbUNsYXNzKSB7XG4gICAgICBjbGF6eltwcm9wcy5jdXN0b21DbGFzc10gPSB0cnVlO1xuICAgIH1cbiAgICByZXR1cm4gY2xheno7XG4gIH0pO1xuXG4gIGNvbnN0IGlubmVyV3JhcHBlclJlZiA9IHJlZigpO1xuXG4gIGNvbnN0IGlzRm9ybUlubmVyID0gcmVmKGZhbHNlKTtcbiAgY29uc3Qgb25Gb3JtSW5uZXJDaGFuZ2UgPSAodmFsdWU6IGFueSkgPT4ge1xuICAgIGlzRm9ybUlubmVyLnZhbHVlID0gdmFsdWU7XG4gIH07XG5cbiAgcmV0dXJuIHtcbiAgICB0YWJsZVJlZixcbiAgICBjb250YWluZXJSZWYsXG4gICAgdG9vbGJhclJlZixcbiAgICBjb21wdXRlZFRhYmxlLFxuICAgIGNvbXB1dGVkVG9vbGJhcixcbiAgICBjb21wdXRlZENlbGxTbG90cyxcbiAgICBmb3JtV3JhcHBlclJlZixcbiAgICBpc0Zvcm1Jbm5lcixcbiAgICBvbkZvcm1Jbm5lckNoYW5nZSxcbiAgICBjb21wdXRlZEZvcm1TbG90cyxcbiAgICBjb21wdXRlZFNlYXJjaFNsb3RzLFxuICAgIGNvbXB1dGVkVG9vbGJhclNsb3RzLFxuICAgIGNvbXB1dGVCb2R5SGVpZ2h0LFxuICAgIGNvbXB1dGVkQ2xhc3MsXG4gICAgaW5uZXJXcmFwcGVyUmVmXG4gIH07XG59XG5cbi8qKlxuICogZnMtY3J1ZFxuICovXG5leHBvcnQgZGVmYXVsdCBkZWZpbmVDb21wb25lbnQoe1xuICBuYW1lOiBcIkZzQ3J1ZFwiLFxuICBpbmhlcml0QXR0cnM6IGZhbHNlLFxuICBwcm9wczoge1xuICAgIC8qKlxuICAgICAqIOihqOagvOmFjee9ru+8jOingUZzVGFibGVcbiAgICAgKi9cbiAgICB0YWJsZToge1xuICAgICAgdHlwZTogT2JqZWN0LFxuICAgICAgZGVmYXVsdCgpIHtcbiAgICAgICAgcmV0dXJuIHt9O1xuICAgICAgfVxuICAgIH0sXG4gICAgLyoqXG4gICAgICog6KGo5qC85pWw5o2uXG4gICAgICovXG4gICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIHZ1ZS9yZXF1aXJlLWRlZmF1bHQtcHJvcFxuICAgIGRhdGE6IHtcbiAgICAgIHR5cGU6IEFycmF5XG4gICAgfSxcbiAgICAvKipcbiAgICAgKiDmk43kvZzliJfphY3nva7vvIzop4FGc1Jvd0hhbmRsZVxuICAgICAqL1xuICAgIHJvd0hhbmRsZToge1xuICAgICAgdHlwZTogT2JqZWN0LFxuICAgICAgZGVmYXVsdCgpIHtcbiAgICAgICAgcmV0dXJuIHt9O1xuICAgICAgfVxuICAgIH0sXG4gICAgLyoqXG4gICAgICog5p+l6K+i5qGG6YWN572u77yM6KeBRnNTZWFyY2hcbiAgICAgKi9cbiAgICBzZWFyY2g6IHtcbiAgICAgIHR5cGU6IE9iamVjdCxcbiAgICAgIGRlZmF1bHQoKSB7XG4gICAgICAgIHJldHVybiB7fTtcbiAgICAgIH1cbiAgICB9LFxuICAgIC8qKlxuICAgICAqIOW3peWFt+adoemFjee9ru+8jOingUZzVG9vbGJhclxuICAgICAqL1xuICAgIHRvb2xiYXI6IHtcbiAgICAgIHR5cGU6IE9iamVjdCxcbiAgICAgIGRlZmF1bHQoKSB7XG4gICAgICAgIHJldHVybiB7fTtcbiAgICAgIH1cbiAgICB9LFxuICAgIC8qKlxuICAgICAqIOWKqOS9nOadoemFjee9ru+8jOingUZzQWN0aW9uYmFyXG4gICAgICovXG4gICAgYWN0aW9uYmFyOiB7XG4gICAgICB0eXBlOiBPYmplY3QsXG4gICAgICBkZWZhdWx0KCkge1xuICAgICAgICByZXR1cm4ge307XG4gICAgICB9XG4gICAgfSxcbiAgICAvKipcbiAgICAgKiB0YWJzIGZpbHRlclxuICAgICAqL1xuICAgIHRhYnM6IHtcbiAgICAgIHR5cGU6IE9iamVjdCxcbiAgICAgIGRlZmF1bHQoKSB7XG4gICAgICAgIHJldHVybiB7fTtcbiAgICAgIH1cbiAgICB9LFxuICAgIC8qKlxuICAgICAqIOa3u+WKoOihqOWNleWvueivneahhumFjee9ru+8jOingUZzRm9ybVdyYXBwZXJcbiAgICAgKi9cbiAgICBhZGRGb3JtOiB7XG4gICAgICB0eXBlOiBPYmplY3QsXG4gICAgICBkZWZhdWx0KCkge1xuICAgICAgICByZXR1cm4ge307XG4gICAgICB9XG4gICAgfSxcbiAgICAvKipcbiAgICAgKiDnvJbovpHooajljZXlr7nor53moYbphY3nva7vvIzop4FGc0Zvcm1XcmFwcGVyXG4gICAgICovXG4gICAgZWRpdEZvcm06IHtcbiAgICAgIHR5cGU6IE9iamVjdCxcbiAgICAgIGRlZmF1bHQoKSB7XG4gICAgICAgIHJldHVybiB7fTtcbiAgICAgIH1cbiAgICB9LFxuICAgIC8qKlxuICAgICAqIOafpeeci+ihqOWNleWvueivneahhumFjee9ru+8jOingUZzRm9ybVdyYXBwZXJcbiAgICAgKi9cbiAgICB2aWV3Rm9ybToge1xuICAgICAgdHlwZTogT2JqZWN0LFxuICAgICAgZGVmYXVsdCgpIHtcbiAgICAgICAgcmV0dXJuIHt9O1xuICAgICAgfVxuICAgIH0sXG4gICAgLyoqXG4gICAgICog57+76aG16YWN572uLOaUr+aMgWVsLXBhZ2luYXRpb258YS1wYWdpbmF0aW9u6YWN572uXG4gICAgICovXG4gICAgcGFnaW5hdGlvbjoge1xuICAgICAgdHlwZTogT2JqZWN0LFxuICAgICAgZGVmYXVsdCgpIHtcbiAgICAgICAgcmV0dXJuIHsgc2hvdzogZmFsc2UgfTtcbiAgICAgIH1cbiAgICB9LFxuICAgIC8qKlxuICAgICAqIOWuueWZqOmFjee9ru+8jOingUZzQ29udGFpbmVyXG4gICAgICovXG4gICAgY29udGFpbmVyOiB7XG4gICAgICB0eXBlOiBPYmplY3QsXG4gICAgICBkZWZhdWx0KCkge1xuICAgICAgICByZXR1cm4ge307XG4gICAgICB9XG4gICAgfSxcblxuICAgIC8qKlxuICAgICAqIGNydWTljIXoo7nlrrnlmajnmoRjbGFzc1xuICAgICAqL1xuICAgIGN1c3RvbUNsYXNzOiB7fSxcbiAgICAvKipcbiAgICAgKiDkuI3opoHkvKDliLBmcy10YWJsZeWOu1xuICAgICAqL1xuICAgIGZvcm06IHtcbiAgICAgIHR5cGU6IE9iamVjdCxcbiAgICAgIGRlZmF1bHQoKSB7XG4gICAgICAgIHJldHVybiB7fTtcbiAgICAgIH1cbiAgICB9LFxuXG4gICAgLyoqXG4gICAgICog5Y+v6YCJ5oupXG4gICAgICovXG4gICAgc2VsZWN0aW9uOiB7XG4gICAgICB0eXBlOiBPYmplY3QgYXMgUHJvcFR5cGU8Um93U2VsZWN0aW9uUHJvcHM+LFxuICAgICAgZGVmYXVsdCgpIHtcbiAgICAgICAgcmV0dXJuIHsgc2hvdzogZmFsc2UgfTtcbiAgICAgIH1cbiAgICB9XG4gIH0sXG4gIGVtaXRzOiBbXCJ1cGRhdGU6c2VhcmNoXCIsIFwidXBkYXRlOmNvbXBhY3RcIiwgXCJ1cGRhdGU6Y29sdW1uc1wiLCBcImZvcm0tdmFsdWUtY2hhbmdlXCIsIFwidXBkYXRlOm1vZGVsVmFsdWVcIiwgXCJ0YWItY2hhbmdlXCJdLFxuICBzZXR1cChwcm9wczogYW55LCBjdHg6IGFueSkge1xuICAgIGNvbnN0IHsgdWkgfSA9IHVzZVVpKCk7XG4gICAgdXNlUHJvdmlkZXJzKHByb3BzLCBjdHgpO1xuICAgIGNvbnN0IHNlYXJjaCA9IHVzZVNlYXJjaChwcm9wcywgY3R4KTtcbiAgICBjb25zdCB0YWJzID0gdXNlVGFicyhzZWFyY2gsIHByb3BzLCBjdHgpO1xuICAgIGNvbnN0IHRhYmxlID0gdXNlVGFibGUocHJvcHMsIGN0eCk7XG4gICAgcmV0dXJuIHtcbiAgICAgIHVpLFxuICAgICAgLi4uc2VhcmNoLFxuICAgICAgLi4udGFibGUsXG4gICAgICAuLi50YWJzXG4gICAgfTtcbiAgfVxufSk7XG48L3NjcmlwdD5cbjxzdHlsZSBsYW5nPVwibGVzc1wiPlxuLy/kvZzkuLrmlbDmja7ooajmoLzkvb/nlKjnmoTpooTorr7moLflvI/vvIzpmpDol49mb290ZXLvvIzooajmoLzpq5jluqbnoo7orrDlvZXmlbDlop7liqDogIzlop7liqBcbi5mcy1jcnVkLWFzLXRhYmxlIHtcbiAgbWluLWhlaWdodDogMCAhaW1wb3J0YW50O1xuICBoZWlnaHQ6IHVuc2V0O1xuXG4gIC5mcy1jcnVkLWZvb3RlciB7XG4gICAgZGlzcGxheTogbm9uZTtcbiAgfVxuXG4gIC5ib3ggLmlubmVyIHtcbiAgICBwb3NpdGlvbjogc3RhdGljO1xuICB9XG59XG5cbi5mcy1jcnVkLWNvbnRhaW5lciB7XG4gIG1pbi1oZWlnaHQ6IDMwMHB4O1xuXG4gICYuY29tcGFjdCB7XG4gICAgLmVsLXRhYmxlLS1ib3JkZXIge1xuICAgICAgYm9yZGVyLWxlZnQ6IDA7XG4gICAgfVxuXG4gICAgLmZzLWNydWQtaGVhZGVyIHtcbiAgICAgIHBhZGRpbmctbGVmdDogMTBweDtcbiAgICAgIHBhZGRpbmctcmlnaHQ6IDEwcHg7XG4gICAgfVxuXG4gICAgLmZzLWNydWQtZm9vdGVyIHtcbiAgICAgIHBhZGRpbmctbGVmdDogMTBweDtcbiAgICAgIHBhZGRpbmctcmlnaHQ6IDEwcHg7XG4gICAgfVxuICB9XG5cbiAgLmZzLWNydWQtaGVhZGVyIHtcbiAgICBkaXNwbGF5OiBmbGV4O1xuICAgIHBhZGRpbmc6IDEwcHggMDtcbiAgICBmbGV4LXdyYXA6IHdyYXA7XG5cbiAgICAuZnMtaGVhZGVyLXRvcCB7XG4gICAgICB3aWR0aDogMTAwJTtcbiAgICB9XG5cbiAgICAuZnMtY3J1ZC1zZWFyY2gge1xuICAgICAgd2lkdGg6IDEwMCU7XG4gICAgICBncmlkLWNvbHVtbjogc3BhbiAyO1xuICAgICAgcGFkZGluZy1ib3R0b206IDVweDtcbiAgICB9XG5cbiAgICAuZnMtaGVhZGVyLW1pZGRsZSB7XG4gICAgICB3aWR0aDogMTAwJTtcbiAgICB9XG5cbiAgICAuZnMtaGVhZGVyLWJvdHRvbSB7XG4gICAgICB3aWR0aDogMTAwJTtcbiAgICB9XG5cbiAgICAuZnMtY3J1ZC1hY3Rpb25iYXIge1xuICAgICAgLy8gcGFkZGluZy10b3A6IDVweDtcbiAgICAgIGRpc3BsYXk6IGZsZXg7XG4gICAgICBmbGV4OiAxMDAwMDtcbiAgICAgIGFsaWduLWl0ZW1zOiBjZW50ZXI7XG4gICAgICBtaW4td2lkdGg6IDFweDtcbiAgICB9XG5cbiAgICAuZnMtY3J1ZC10b29sYmFyIHtcbiAgICAgIGRpc3BsYXk6IGZsZXg7XG4gICAgICBqdXN0aWZ5LWNvbnRlbnQ6IGZsZXgtZW5kO1xuICAgICAgYWxpZ24taXRlbXM6IGNlbnRlcjtcbiAgICAgIG1hcmdpbi1yaWdodDogMTBweDtcbiAgICAgIGZsZXg6IDE7XG4gICAgfVxuICB9XG5cbiAgLmZzLWNydWQtdGFibGUge1xuICAgIGhlaWdodDogMTAwJTtcbiAgICB3aWR0aDogMTAwJTtcbiAgfVxuXG4gIC5mcy1jcnVkLWZvb3RlciB7XG4gICAgcGFkZGluZzogMTBweCAwO1xuXG4gICAgLmZzLWNydWQtcGFnaW5hdGlvbiB7XG4gICAgICBkaXNwbGF5OiBmbGV4O1xuICAgICAgZmxleC1kaXJlY3Rpb246IHJvdztcbiAgICAgIGp1c3RpZnktY29udGVudDogY2VudGVyO1xuICAgICAgYWxpZ24taXRlbXM6IGNlbnRlcjtcblxuICAgICAgLmZzLXBhZ2luYXRpb24tbGVmdCB7XG4gICAgICAgIG1hcmdpbi1yaWdodDogMTBweDtcbiAgICAgIH1cblxuICAgICAgLmZzLXBhZ2luYXRpb24tcmlnaHQge1xuICAgICAgICBmbGV4OiAwO1xuICAgICAgfVxuXG4gICAgICAuZnMtcGFnaW5hdGlvbiB7XG4gICAgICAgIGZsZXg6IDE7XG5cbiAgICAgICAgLmFudC1wYWdpbmF0aW9uLW9wdGlvbnMge1xuICAgICAgICAgIC5hbnQtc2VsZWN0IHtcbiAgICAgICAgICAgIHdpZHRoOiBhdXRvO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIC5lbC1wYWdpbmF0aW9uIHtcbiAgICAgICAgICBwYWRkaW5nLWxlZnQ6IDA7XG4gICAgICAgICAgcGFkZGluZy1yaWdodDogMDtcbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICAuZnMtcGFnaW5hdGlvbi1yaWdodCB7XG4gICAgICAgIGZsZXg6IDA7XG4gICAgICB9XG4gICAgfVxuICB9XG59XG48L3N0eWxlPlxuIiwiPHRlbXBsYXRlPlxuICA8ZGl2IGNsYXNzPVwiZnMtcm93LWhhbmRsZVwiPlxuICAgIDxzbG90IG5hbWU9XCJjZWxsLXJvd0hhbmRsZS1sZWZ0XCIgdi1iaW5kPVwic2NvcGVcIj48L3Nsb3Q+XG4gICAgPHRlbXBsYXRlIHYtZm9yPVwiKGl0ZW0sIGluZGV4KSBpbiBjb21wdXRlZEhhbmRsZUJ0bnNcIiA6a2V5PVwiaW5kZXhcIj5cbiAgICAgIDxmcy1idXR0b25cbiAgICAgICAgdi1pZj1cIml0ZW0uc2hvdyAhPT0gZmFsc2UgJiYgIWlzRHJvcGRvd25CdG4oaXRlbSwgaW5kZXgpXCJcbiAgICAgICAgY2xhc3M9XCJyb3ctaGFuZGxlLWJ0blwiXG4gICAgICAgIHYtYmluZD1cIml0ZW1cIlxuICAgICAgICBAY2xpY2suc3RvcD1cImRvQ2xpY2soaXRlbSlcIlxuICAgICAgLz5cbiAgICA8L3RlbXBsYXRlPlxuICAgIDxzbG90IG5hbWU9XCJjZWxsLXJvd0hhbmRsZS1taWRkbGVcIiB2LWJpbmQ9XCJzY29wZVwiPjwvc2xvdD5cbiAgICA8IS0tIOS4i+aLieaMiemSruiPnOWNlSAtLT5cbiAgICA8c3BhbiB2LWlmPVwiaGFzRHJvcGRvd25CdG5cIiBjbGFzcz1cInJvdy1oYW5kbGUtYnRuIGZzLWhhbmRsZS1yb3ctZHJvcGRvd25cIj5cbiAgICAgIDxjb21wb25lbnQgOmlzPVwidWkuZHJvcGRvd24ubmFtZVwiIHYtYmluZD1cImNvbXB1dGVkRHJvcGRvd25CaW5kaW5nXCI+XG4gICAgICAgIDxmcy1idXR0b24gdi1iaW5kPVwiZHJvcGRvd24ubW9yZVwiIC8+XG4gICAgICAgIDx0ZW1wbGF0ZSAjW3VpLmRyb3Bkb3duLnNsb3ROYW1lXT5cbiAgICAgICAgICA8Y29tcG9uZW50XG4gICAgICAgICAgICA6aXM9XCJ1aS5kcm9wZG93bk1lbnUubmFtZVwiXG4gICAgICAgICAgICB2LWlmPVwidWkuZHJvcGRvd24ucmVuZGVyTW9kZSA9PT0gJ3Nsb3QnXCJcbiAgICAgICAgICAgIHYtYmluZD1cInVpLmRyb3Bkb3duTWVudS5jb21tYW5kKGRvRHJvcGRvd25JdGVtQ2xpY2spXCJcbiAgICAgICAgICA+XG4gICAgICAgICAgICA8dGVtcGxhdGUgdi1mb3I9XCIoaXRlbSwgaW5kZXgpIGluIGNvbXB1dGVkSGFuZGxlQnRuc1wiIDprZXk9XCJpbmRleFwiPlxuICAgICAgICAgICAgICA8Y29tcG9uZW50XG4gICAgICAgICAgICAgICAgOmlzPVwidWkuZHJvcGRvd25JdGVtLm5hbWVcIlxuICAgICAgICAgICAgICAgIHYtaWY9XCJpdGVtLnNob3cgIT09IGZhbHNlICYmIGlzRHJvcGRvd25CdG4oaXRlbSwgaW5kZXgpXCJcbiAgICAgICAgICAgICAgICA6W3VpLmRyb3Bkb3duSXRlbS5jb21tYW5kXT1cIml0ZW0ua2V5XCJcbiAgICAgICAgICAgICAgICB2LWJpbmQ9XCJpdGVtLmRyb3Bkb3duSXRlbVwiXG4gICAgICAgICAgICAgICAgOmRpc2FibGVkPVwiaXRlbS5kaXNhYmxlZFwiXG4gICAgICAgICAgICAgID5cbiAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPVwiZnMtcm93LWhhbmRsZS1kcm9wZG93bi1pdGVtXCIgdi1iaW5kPVwiaXRlbVwiPlxuICAgICAgICAgICAgICAgICAgPGZzLWljb24gdi1pZj1cIml0ZW0uaWNvblwiIDppY29uPVwiaXRlbS5pY29uXCIgLz4ge3sgaXRlbS50ZXh0IHx8IGl0ZW0udGl0bGUgfX1cbiAgICAgICAgICAgICAgICA8L2Rpdj5cbiAgICAgICAgICAgICAgPC9jb21wb25lbnQ+XG4gICAgICAgICAgICA8L3RlbXBsYXRlPlxuICAgICAgICAgIDwvY29tcG9uZW50PlxuICAgICAgICA8L3RlbXBsYXRlPlxuICAgICAgPC9jb21wb25lbnQ+XG4gICAgPC9zcGFuPlxuICAgIDxzbG90IG5hbWU9XCJjZWxsLXJvd0hhbmRsZS1yaWdodFwiIHYtYmluZD1cInNjb3BlXCI+PC9zbG90PlxuICA8L2Rpdj5cbjwvdGVtcGxhdGU+XG48c2NyaXB0IGxhbmc9XCJ0c1wiPlxuaW1wb3J0IHsgY29tcHV0ZWQsIGRlZmluZUNvbXBvbmVudCB9IGZyb20gXCJ2dWVcIjtcbmltcG9ydCBfIGZyb20gXCJsb2Rhc2gtZXNcIjtcbmltcG9ydCB0cmFjZVV0aWwgZnJvbSBcIi4uLy4uL3V0aWxzL3V0aWwudHJhY2VcIjtcbmltcG9ydCB7IHVzZUkxOG4gfSBmcm9tIFwiLi4vLi4vbG9jYWxlXCI7XG5pbXBvcnQgeyB1c2VVaSB9IGZyb20gXCIuLi8uLi91c2UvdXNlLXVpXCI7XG5pbXBvcnQgeyB1c2VDb21wdXRlIH0gZnJvbSBcIi4uLy4uL3VzZS91c2UtY29tcHV0ZVwiO1xuaW1wb3J0IHsgQ29uc3RhbnRzIH0gZnJvbSBcIi4uLy4uL3V0aWxzL3V0aWwuY29uc3RhbnRzXCI7XG5pbXBvcnQgeyBCdXR0b25Qcm9wcywgU2NvcGVDb250ZXh0IH0gZnJvbSBcIi4uLy4uL2RcIjtcbmltcG9ydCB7IHVzZU1lcmdlIH0gZnJvbSBcIi4uLy4uL3VzZVwiO1xuXG4vKipcbiAqIOaTjeS9nOWIl+mFjee9rlxuICovXG5leHBvcnQgZGVmYXVsdCBkZWZpbmVDb21wb25lbnQoe1xuICBuYW1lOiBcIkZzUm93SGFuZGxlXCIsXG4gIHByb3BzOiB7XG4gICAgLyoqXG4gICAgICog5oyJ6ZKu5oqY5Y+g6YWN572uXG4gICAgICovXG4gICAgZHJvcGRvd246IHtcbiAgICAgIHR5cGU6IE9iamVjdFxuICAgIH0sXG4gICAgLyoqXG4gICAgICog5oyJ6ZKu6YWN572uXG4gICAgICoge1xuICAgICAqICAgdmlldzp7Li4uRnNCdXR0b24sY2xpY2s6RnVuY3Rpb24sb3JkZXI6MX0sXG4gICAgICogICBlZGl0OnsuLi5Gc0J1dHRvbixjbGljazpGdW5jdGlvbixvcmRlcjoyfSxcbiAgICAgKiAgIHJlbW92ZTp7Li4uRnNCdXR0b24sY2xpY2s6RnVuY3Rpb24sb3JkZXI6M30sXG4gICAgICogICAuLi7oh6rlrprkuYlcbiAgICAgKiB9XG4gICAgICovXG4gICAgYnV0dG9uczoge1xuICAgICAgdHlwZTogT2JqZWN0XG4gICAgfSxcbiAgICAvKipcbiAgICAgKiDmjInpkq7liIbnu4Qs5LiK6Z2i55qEYnV0dG9uc+S4uum7mOiupOWIhue7hFxuICAgICAqICB7XG4gICAgICogICAgZ3JvdXBLZXk6e2J1dHRvbktleTp7fSxidXR0b25LZXkyOnt9fVxuICAgICAqICB9XG4gICAgICovXG4gICAgZ3JvdXA6IHtcbiAgICAgIHR5cGU6IE9iamVjdFxuICAgIH0sXG4gICAgLyoqXG4gICAgICog5b2T5YmN5r+A5rS75YiG57uEXG4gICAgICovXG4gICAgYWN0aXZlOiB7XG4gICAgICB0eXBlOiBTdHJpbmcsXG4gICAgICBkZWZhdWx0OiBcImRlZmF1bHRcIlxuICAgIH0sXG4gICAgLyoqXG4gICAgICogc2NvcGVcbiAgICAgKi9cbiAgICBzY29wZToge1xuICAgICAgdHlwZTogT2JqZWN0LFxuICAgICAgZGVmYXVsdDogKCkgPT4ge1xuICAgICAgICByZXR1cm4ge307XG4gICAgICB9XG4gICAgfVxuICB9LFxuICBlbWl0czogW1wiaGFuZGxlXCJdLFxuICBzZXR1cChwcm9wczogYW55LCBjdHgpIHtcbiAgICBjb25zdCB7IHVpIH0gPSB1c2VVaSgpO1xuICAgIGNvbnN0IHsgbWVyZ2UgfSA9IHVzZU1lcmdlKCk7XG4gICAgY29uc3QgeyB0IH0gPSB1c2VJMThuKCk7XG4gICAgY29uc3QgZG9DbGljayA9IChpdGVtOiBhbnkpID0+IHtcbiAgICAgIGNvbnN0IGluZGV4ID0gcHJvcHMuc2NvcGVbdWkudGFibGVDb2x1bW4uaW5kZXhdO1xuICAgICAgY29uc3Qgcm93ID0gcHJvcHMuc2NvcGVbdWkudGFibGVDb2x1bW4ucm93XTtcbiAgICAgIGNvbnN0IGU6IFNjb3BlQ29udGV4dCA9IHsga2V5OiBpdGVtLmtleSwgcm93LCBidG46IGl0ZW0sIGluZGV4LCAuLi5wcm9wcy5zY29wZSB9O1xuICAgICAgaWYgKGl0ZW0uY2xpY2spIHtcbiAgICAgICAgcmV0dXJuIGl0ZW0uY2xpY2soZSk7XG4gICAgICB9XG4gICAgICBjdHguZW1pdChcImhhbmRsZVwiLCBlKTtcbiAgICB9O1xuICAgIGNvbnN0IHsgZG9Db21wdXRlZCB9ID0gdXNlQ29tcHV0ZSgpO1xuICAgIGNvbnN0IHBpY2tlZFByb3BzID0gY29tcHV0ZWQoKCkgPT4ge1xuICAgICAgcmV0dXJuIHtcbiAgICAgICAgZHJvcGRvd246IHByb3BzLmRyb3Bkb3duLFxuICAgICAgICBidXR0b25zOiBwcm9wcy5idXR0b25zLFxuICAgICAgICBhY3RpdmU6IHByb3BzLmFjdGl2ZSxcbiAgICAgICAgZ3JvdXA6IHByb3BzLmdyb3VwXG4gICAgICB9O1xuICAgIH0pO1xuICAgIGNvbnN0IGNvbXB1dGVQcm9wcyA9IGRvQ29tcHV0ZWQoXG4gICAgICAoKSA9PiB7XG4gICAgICAgIHJldHVybiBwaWNrZWRQcm9wcy52YWx1ZTtcbiAgICAgIH0sXG4gICAgICAoKSA9PiB7XG4gICAgICAgIGNvbnN0IGluZGV4ID0gcHJvcHMuc2NvcGVbdWkudGFibGVDb2x1bW4uaW5kZXhdO1xuICAgICAgICBjb25zdCByb3cgPSBwcm9wcy5zY29wZVt1aS50YWJsZUNvbHVtbi5yb3ddO1xuICAgICAgICByZXR1cm4geyAuLi5wcm9wcy5zY29wZSwgaW5kZXgsIHJvdyB9O1xuICAgICAgfVxuICAgICk7XG5cbiAgICAvL2NvbnN0IGNvbXB1dGVQcm9wcyA9IHsgdmFsdWU6IHByb3BzIH07XG4gICAgY29uc3QgY29tcHV0ZWRIYW5kbGVCdG5zID0gY29tcHV0ZWQoKCkgPT4ge1xuICAgICAgbGV0IG1lcmdlZEJ0bnMgPSBudWxsO1xuICAgICAgaWYgKGNvbXB1dGVQcm9wcy52YWx1ZS5hY3RpdmUgPT0gbnVsbCB8fCBjb21wdXRlUHJvcHMudmFsdWUuYWN0aXZlID09PSBcImRlZmF1bHRcIikge1xuICAgICAgICBjb25zdCBkZWZCdG5zID0ge1xuICAgICAgICAgIHZpZXc6IHtcbiAgICAgICAgICAgIGtleTogXCJ2aWV3XCIsXG4gICAgICAgICAgICB0ZXh0OiB0KFwiZnMucm93SGFuZGxlLnZpZXcudGV4dFwiKSxcbiAgICAgICAgICAgIHRpdGxlOiB0KFwiZnMucm93SGFuZGxlLnZpZXcudGV4dFwiKVxuICAgICAgICAgIH0sXG4gICAgICAgICAgY29weToge1xuICAgICAgICAgICAga2V5OiBcImNvcHlcIixcbiAgICAgICAgICAgIHRleHQ6IHQoXCJmcy5yb3dIYW5kbGUuY29weS50ZXh0XCIpLFxuICAgICAgICAgICAgdGl0bGU6IHQoXCJmcy5yb3dIYW5kbGUuY29weS50ZXh0XCIpXG4gICAgICAgICAgfSxcbiAgICAgICAgICBlZGl0OiB7XG4gICAgICAgICAgICBrZXk6IFwiZWRpdFwiLFxuICAgICAgICAgICAgdHlwZTogXCJwcmltYXJ5XCIsXG4gICAgICAgICAgICB0ZXh0OiB0KFwiZnMucm93SGFuZGxlLmVkaXQudGV4dFwiKSxcbiAgICAgICAgICAgIHRpdGxlOiB0KFwiZnMucm93SGFuZGxlLmVkaXQudGV4dFwiKVxuICAgICAgICAgIH0sXG4gICAgICAgICAgcmVtb3ZlOiB7XG4gICAgICAgICAgICBrZXk6IFwicmVtb3ZlXCIsXG4gICAgICAgICAgICAuLi51aS5idXR0b24uY29sb3JzKFwiZGFuZ2VyXCIpLFxuICAgICAgICAgICAgdGV4dDogdChcImZzLnJvd0hhbmRsZS5yZW1vdmUudGV4dFwiKSxcbiAgICAgICAgICAgIHRpdGxlOiB0KFwiZnMucm93SGFuZGxlLnJlbW92ZS50ZXh0XCIpXG4gICAgICAgICAgfVxuICAgICAgICB9O1xuICAgICAgICBtZXJnZWRCdG5zID0gbWVyZ2UoZGVmQnRucywgY29tcHV0ZVByb3BzLnZhbHVlLmJ1dHRvbnMpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgbWVyZ2VkQnRucyA9IGNvbXB1dGVQcm9wcy52YWx1ZS5ncm91cFtjb21wdXRlUHJvcHMudmFsdWUuYWN0aXZlXTtcbiAgICAgIH1cblxuICAgICAgY29uc3QgYnRuczogQnV0dG9uUHJvcHNbXSA9IFtdO1xuICAgICAgXy5mb3JFYWNoKG1lcmdlZEJ0bnMsIChpdGVtLCBrZXkpID0+IHtcbiAgICAgICAgaXRlbS5rZXkgPSBrZXk7XG4gICAgICAgIGlmIChpdGVtLnNob3cgPT09IGZhbHNlKSB7XG4gICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG4gICAgICAgIGJ0bnMucHVzaChpdGVtKTtcbiAgICAgIH0pO1xuXG4gICAgICByZXR1cm4gXy5zb3J0QnkoYnRucywgKGl0ZW0pID0+IHtcbiAgICAgICAgcmV0dXJuIGl0ZW0ub3JkZXIgPz8gQ29uc3RhbnRzLm9yZGVyRGVmYXVsdDtcbiAgICAgIH0pO1xuICAgIH0pO1xuXG4gICAgY29uc3QgY29tcHV0ZWREcm9wZG93bkF0TGVhc3QgPSBjb21wdXRlZCgoKSA9PiB7XG4gICAgICBpZiAoXG4gICAgICAgIGNvbXB1dGVQcm9wcy52YWx1ZS5kcm9wZG93biA9PSBudWxsIHx8XG4gICAgICAgIGNvbXB1dGVQcm9wcy52YWx1ZS5kcm9wZG93bi5hdExlYXN0ID09IG51bGwgfHxcbiAgICAgICAgY29tcHV0ZVByb3BzLnZhbHVlLmRyb3Bkb3duLmF0TGVhc3QgPD0gMCB8fFxuICAgICAgICBjb21wdXRlZEhhbmRsZUJ0bnMudmFsdWUubGVuZ3RoIDw9IGNvbXB1dGVQcm9wcy52YWx1ZS5kcm9wZG93bi5hdExlYXN0XG4gICAgICApIHtcbiAgICAgICAgcmV0dXJuIDA7XG4gICAgICB9XG4gICAgICByZXR1cm4gY29tcHV0ZVByb3BzLnZhbHVlLmRyb3Bkb3duLmF0TGVhc3QgfHwgMDtcbiAgICB9KTtcbiAgICBmdW5jdGlvbiBpc0Ryb3Bkb3duQnRuKGl0ZW06IGFueSwgaW5kZXg6IG51bWJlcikge1xuICAgICAgaWYgKGl0ZW0uZHJvcGRvd24gPT09IHRydWUpIHtcbiAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICB9XG4gICAgICBpZiAoY29tcHV0ZWREcm9wZG93bkF0TGVhc3QudmFsdWUgPiAwICYmIGNvbXB1dGVkRHJvcGRvd25BdExlYXN0LnZhbHVlIDwgaW5kZXgpIHtcbiAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICB9XG4gICAgICByZXR1cm4gZmFsc2U7XG4gICAgfVxuICAgIGNvbnN0IGhhc0Ryb3Bkb3duQnRuID0gY29tcHV0ZWQoKCkgPT4ge1xuICAgICAgbGV0IGluZGV4ID0gMDtcbiAgICAgIGZvciAoY29uc3QgaXRlbSBvZiBjb21wdXRlZEhhbmRsZUJ0bnMudmFsdWUpIHtcbiAgICAgICAgY29uc3QgaXMgPSBpc0Ryb3Bkb3duQnRuKGl0ZW0sIGluZGV4KTtcbiAgICAgICAgaWYgKGlzKSB7XG4gICAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICAgIH1cbiAgICAgICAgaW5kZXgrKztcbiAgICAgIH1cbiAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9KTtcblxuICAgIGZ1bmN0aW9uIGRvRHJvcGRvd25JdGVtQ2xpY2soJGV2ZW50OiBhbnkpIHtcbiAgICAgIGZvciAobGV0IGJ0biBvZiBjb21wdXRlZEhhbmRsZUJ0bnMudmFsdWUpIHtcbiAgICAgICAgaWYgKCRldmVudCA9PT0gYnRuLmtleSkge1xuICAgICAgICAgIGRvQ2xpY2soYnRuKTtcbiAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG5cbiAgICBjb25zdCBjb21wdXRlZERyb3Bkb3duQmluZGluZyA9IGNvbXB1dGVkKCgpID0+IHtcbiAgICAgIGNvbnN0IGJpbmRpbmc6IGFueSA9IHt9O1xuICAgICAgaWYgKHVpLmRyb3Bkb3duLnJlbmRlck1vZGUgIT09IFwic2xvdFwiKSB7XG4gICAgICAgIC8vIG5haXZlIOmAmui/h29wdGlvbnPphY3nva7mnaXmmL7npLrlrZDpoblcbiAgICAgICAgY29uc3QgYnRucyA9IGNvbXB1dGVkSGFuZGxlQnRucy52YWx1ZTtcbiAgICAgICAgY29uc3Qgb3B0czogQnV0dG9uUHJvcHNbXSA9IFtdO1xuICAgICAgICBfLmZvckVhY2goYnRucywgKHZhbHVlLCBpbmRleCkgPT4ge1xuICAgICAgICAgIGlmICh2YWx1ZS5zaG93ICE9PSBmYWxzZSAmJiBpc0Ryb3Bkb3duQnRuKHZhbHVlLCBpbmRleCkpIHtcbiAgICAgICAgICAgIG9wdHMucHVzaCh7XG4gICAgICAgICAgICAgIFt1aS5kcm9wZG93bi52YWx1ZV06IHZhbHVlLmtleSxcbiAgICAgICAgICAgICAgW3VpLmRyb3Bkb3duLmxhYmVsXTogdmFsdWUudGV4dCxcbiAgICAgICAgICAgICAgdGl0bGU6IHZhbHVlLnRpdGxlXG4gICAgICAgICAgICB9KTtcbiAgICAgICAgICB9XG4gICAgICAgIH0pO1xuICAgICAgICBiaW5kaW5nLm9wdGlvbnMgPSBvcHRzO1xuICAgICAgfVxuICAgICAgcmV0dXJuIHtcbiAgICAgICAgLi4uXy5vbWl0KHByb3BzLmRyb3Bkb3duLCBcIm1vcmVcIiwgXCJhdExlYXN0XCIpLFxuICAgICAgICAuLi51aS5kcm9wZG93bi5jb21tYW5kKGRvRHJvcGRvd25JdGVtQ2xpY2spLFxuICAgICAgICAuLi5iaW5kaW5nXG4gICAgICB9O1xuICAgIH0pO1xuXG4gICAgcmV0dXJuIHtcbiAgICAgIHVpLFxuICAgICAgaGFzRHJvcGRvd25CdG4sXG4gICAgICBjb21wdXRlZEhhbmRsZUJ0bnMsXG4gICAgICBkb0Ryb3Bkb3duSXRlbUNsaWNrLFxuICAgICAgY29tcHV0ZWREcm9wZG93bkF0TGVhc3QsXG4gICAgICBkb0NsaWNrLFxuICAgICAgaXNEcm9wZG93bkJ0bixcbiAgICAgIGNvbXB1dGVkRHJvcGRvd25CaW5kaW5nXG4gICAgfTtcbiAgfVxufSk7XG48L3NjcmlwdD5cblxuPHN0eWxlIGxhbmc9XCJsZXNzXCI+XG4uZnMtcm93LWhhbmRsZSB7XG4gIC8vIGRpc3BsYXk6IGZsZXggOyAvLyDov5nph4zkuI3og73nlKhmbGV477yM5ZCm5YiZ5Lya56C05Z2PYWxpZ246Y2VudGVy6YWN572uXG4gIGZsZXgtd3JhcDogd3JhcDtcbiAgZGlzcGxheTogaW5saW5lLWZsZXg7XG4gIGFsaWduLWl0ZW1zOiBjZW50ZXI7XG4gIC5lbC1idXR0b24gKyAuZWwtYnV0dG9uIHtcbiAgICBtYXJnaW4tbGVmdDogMnB4O1xuICB9XG4gICYgPiAqIHtcbiAgICBtYXJnaW46IDJweDtcbiAgICBkaXNwbGF5OiBpbmxpbmUtZmxleDtcbiAgICBhbGlnbi1pdGVtczogY2VudGVyO1xuICB9XG4gIC5mcy1yb3ctaGFuZGxlLWRyb3Bkb3duLWl0ZW0ge1xuICAgIGRpc3BsYXk6IGZsZXg7XG4gIH1cblxuICAubi1idXR0b24ge1xuICAgIGFsaWduLWl0ZW1zOiBjZW50ZXI7XG4gIH1cbn1cbjwvc3R5bGU+XG4iLCI8dGVtcGxhdGU+XG4gIDxkaXYgY2xhc3M9XCJmcy1yb3ctaGFuZGxlXCI+XG4gICAgPHNsb3QgbmFtZT1cImNlbGwtcm93SGFuZGxlLWxlZnRcIiB2LWJpbmQ9XCJzY29wZVwiPjwvc2xvdD5cbiAgICA8dGVtcGxhdGUgdi1mb3I9XCIoaXRlbSwgaW5kZXgpIGluIGNvbXB1dGVkSGFuZGxlQnRuc1wiIDprZXk9XCJpbmRleFwiPlxuICAgICAgPGZzLWJ1dHRvblxuICAgICAgICB2LWlmPVwiaXRlbS5zaG93ICE9PSBmYWxzZSAmJiAhaXNEcm9wZG93bkJ0bihpdGVtLCBpbmRleClcIlxuICAgICAgICBjbGFzcz1cInJvdy1oYW5kbGUtYnRuXCJcbiAgICAgICAgdi1iaW5kPVwiaXRlbVwiXG4gICAgICAgIEBjbGljay5zdG9wPVwiZG9DbGljayhpdGVtKVwiXG4gICAgICAvPlxuICAgIDwvdGVtcGxhdGU+XG4gICAgPHNsb3QgbmFtZT1cImNlbGwtcm93SGFuZGxlLW1pZGRsZVwiIHYtYmluZD1cInNjb3BlXCI+PC9zbG90PlxuICAgIDwhLS0g5LiL5ouJ5oyJ6ZKu6I+c5Y2VIC0tPlxuICAgIDxzcGFuIHYtaWY9XCJoYXNEcm9wZG93bkJ0blwiIGNsYXNzPVwicm93LWhhbmRsZS1idG4gZnMtaGFuZGxlLXJvdy1kcm9wZG93blwiPlxuICAgICAgPGNvbXBvbmVudCA6aXM9XCJ1aS5kcm9wZG93bi5uYW1lXCIgdi1iaW5kPVwiY29tcHV0ZWREcm9wZG93bkJpbmRpbmdcIj5cbiAgICAgICAgPGZzLWJ1dHRvbiB2LWJpbmQ9XCJkcm9wZG93bi5tb3JlXCIgLz5cbiAgICAgICAgPHRlbXBsYXRlICNbdWkuZHJvcGRvd24uc2xvdE5hbWVdPlxuICAgICAgICAgIDxjb21wb25lbnRcbiAgICAgICAgICAgIDppcz1cInVpLmRyb3Bkb3duTWVudS5uYW1lXCJcbiAgICAgICAgICAgIHYtaWY9XCJ1aS5kcm9wZG93bi5yZW5kZXJNb2RlID09PSAnc2xvdCdcIlxuICAgICAgICAgICAgdi1iaW5kPVwidWkuZHJvcGRvd25NZW51LmNvbW1hbmQoZG9Ecm9wZG93bkl0ZW1DbGljaylcIlxuICAgICAgICAgID5cbiAgICAgICAgICAgIDx0ZW1wbGF0ZSB2LWZvcj1cIihpdGVtLCBpbmRleCkgaW4gY29tcHV0ZWRIYW5kbGVCdG5zXCIgOmtleT1cImluZGV4XCI+XG4gICAgICAgICAgICAgIDxjb21wb25lbnRcbiAgICAgICAgICAgICAgICA6aXM9XCJ1aS5kcm9wZG93bkl0ZW0ubmFtZVwiXG4gICAgICAgICAgICAgICAgdi1pZj1cIml0ZW0uc2hvdyAhPT0gZmFsc2UgJiYgaXNEcm9wZG93bkJ0bihpdGVtLCBpbmRleClcIlxuICAgICAgICAgICAgICAgIDpbdWkuZHJvcGRvd25JdGVtLmNvbW1hbmRdPVwiaXRlbS5rZXlcIlxuICAgICAgICAgICAgICAgIHYtYmluZD1cIml0ZW0uZHJvcGRvd25JdGVtXCJcbiAgICAgICAgICAgICAgICA6ZGlzYWJsZWQ9XCJpdGVtLmRpc2FibGVkXCJcbiAgICAgICAgICAgICAgPlxuICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9XCJmcy1yb3ctaGFuZGxlLWRyb3Bkb3duLWl0ZW1cIiB2LWJpbmQ9XCJpdGVtXCI+XG4gICAgICAgICAgICAgICAgICA8ZnMtaWNvbiB2LWlmPVwiaXRlbS5pY29uXCIgOmljb249XCJpdGVtLmljb25cIiAvPiB7eyBpdGVtLnRleHQgfHwgaXRlbS50aXRsZSB9fVxuICAgICAgICAgICAgICAgIDwvZGl2PlxuICAgICAgICAgICAgICA8L2NvbXBvbmVudD5cbiAgICAgICAgICAgIDwvdGVtcGxhdGU+XG4gICAgICAgICAgPC9jb21wb25lbnQ+XG4gICAgICAgIDwvdGVtcGxhdGU+XG4gICAgICA8L2NvbXBvbmVudD5cbiAgICA8L3NwYW4+XG4gICAgPHNsb3QgbmFtZT1cImNlbGwtcm93SGFuZGxlLXJpZ2h0XCIgdi1iaW5kPVwic2NvcGVcIj48L3Nsb3Q+XG4gIDwvZGl2PlxuPC90ZW1wbGF0ZT5cbjxzY3JpcHQgbGFuZz1cInRzXCI+XG5pbXBvcnQgeyBjb21wdXRlZCwgZGVmaW5lQ29tcG9uZW50IH0gZnJvbSBcInZ1ZVwiO1xuaW1wb3J0IF8gZnJvbSBcImxvZGFzaC1lc1wiO1xuaW1wb3J0IHRyYWNlVXRpbCBmcm9tIFwiLi4vLi4vdXRpbHMvdXRpbC50cmFjZVwiO1xuaW1wb3J0IHsgdXNlSTE4biB9IGZyb20gXCIuLi8uLi9sb2NhbGVcIjtcbmltcG9ydCB7IHVzZVVpIH0gZnJvbSBcIi4uLy4uL3VzZS91c2UtdWlcIjtcbmltcG9ydCB7IHVzZUNvbXB1dGUgfSBmcm9tIFwiLi4vLi4vdXNlL3VzZS1jb21wdXRlXCI7XG5pbXBvcnQgeyBDb25zdGFudHMgfSBmcm9tIFwiLi4vLi4vdXRpbHMvdXRpbC5jb25zdGFudHNcIjtcbmltcG9ydCB7IEJ1dHRvblByb3BzLCBTY29wZUNvbnRleHQgfSBmcm9tIFwiLi4vLi4vZFwiO1xuaW1wb3J0IHsgdXNlTWVyZ2UgfSBmcm9tIFwiLi4vLi4vdXNlXCI7XG5cbi8qKlxuICog5pON5L2c5YiX6YWN572uXG4gKi9cbmV4cG9ydCBkZWZhdWx0IGRlZmluZUNvbXBvbmVudCh7XG4gIG5hbWU6IFwiRnNSb3dIYW5kbGVcIixcbiAgcHJvcHM6IHtcbiAgICAvKipcbiAgICAgKiDmjInpkq7mipjlj6DphY3nva5cbiAgICAgKi9cbiAgICBkcm9wZG93bjoge1xuICAgICAgdHlwZTogT2JqZWN0XG4gICAgfSxcbiAgICAvKipcbiAgICAgKiDmjInpkq7phY3nva5cbiAgICAgKiB7XG4gICAgICogICB2aWV3OnsuLi5Gc0J1dHRvbixjbGljazpGdW5jdGlvbixvcmRlcjoxfSxcbiAgICAgKiAgIGVkaXQ6ey4uLkZzQnV0dG9uLGNsaWNrOkZ1bmN0aW9uLG9yZGVyOjJ9LFxuICAgICAqICAgcmVtb3ZlOnsuLi5Gc0J1dHRvbixjbGljazpGdW5jdGlvbixvcmRlcjozfSxcbiAgICAgKiAgIC4uLuiHquWumuS5iVxuICAgICAqIH1cbiAgICAgKi9cbiAgICBidXR0b25zOiB7XG4gICAgICB0eXBlOiBPYmplY3RcbiAgICB9LFxuICAgIC8qKlxuICAgICAqIOaMiemSruWIhue7hCzkuIrpnaLnmoRidXR0b25z5Li66buY6K6k5YiG57uEXG4gICAgICogIHtcbiAgICAgKiAgICBncm91cEtleTp7YnV0dG9uS2V5Ont9LGJ1dHRvbktleTI6e319XG4gICAgICogIH1cbiAgICAgKi9cbiAgICBncm91cDoge1xuICAgICAgdHlwZTogT2JqZWN0XG4gICAgfSxcbiAgICAvKipcbiAgICAgKiDlvZPliY3mv4DmtLvliIbnu4RcbiAgICAgKi9cbiAgICBhY3RpdmU6IHtcbiAgICAgIHR5cGU6IFN0cmluZyxcbiAgICAgIGRlZmF1bHQ6IFwiZGVmYXVsdFwiXG4gICAgfSxcbiAgICAvKipcbiAgICAgKiBzY29wZVxuICAgICAqL1xuICAgIHNjb3BlOiB7XG4gICAgICB0eXBlOiBPYmplY3QsXG4gICAgICBkZWZhdWx0OiAoKSA9PiB7XG4gICAgICAgIHJldHVybiB7fTtcbiAgICAgIH1cbiAgICB9XG4gIH0sXG4gIGVtaXRzOiBbXCJoYW5kbGVcIl0sXG4gIHNldHVwKHByb3BzOiBhbnksIGN0eCkge1xuICAgIGNvbnN0IHsgdWkgfSA9IHVzZVVpKCk7XG4gICAgY29uc3QgeyBtZXJnZSB9ID0gdXNlTWVyZ2UoKTtcbiAgICBjb25zdCB7IHQgfSA9IHVzZUkxOG4oKTtcbiAgICBjb25zdCBkb0NsaWNrID0gKGl0ZW06IGFueSkgPT4ge1xuICAgICAgY29uc3QgaW5kZXggPSBwcm9wcy5zY29wZVt1aS50YWJsZUNvbHVtbi5pbmRleF07XG4gICAgICBjb25zdCByb3cgPSBwcm9wcy5zY29wZVt1aS50YWJsZUNvbHVtbi5yb3ddO1xuICAgICAgY29uc3QgZTogU2NvcGVDb250ZXh0ID0geyBrZXk6IGl0ZW0ua2V5LCByb3csIGJ0bjogaXRlbSwgaW5kZXgsIC4uLnByb3BzLnNjb3BlIH07XG4gICAgICBpZiAoaXRlbS5jbGljaykge1xuICAgICAgICByZXR1cm4gaXRlbS5jbGljayhlKTtcbiAgICAgIH1cbiAgICAgIGN0eC5lbWl0KFwiaGFuZGxlXCIsIGUpO1xuICAgIH07XG4gICAgY29uc3QgeyBkb0NvbXB1dGVkIH0gPSB1c2VDb21wdXRlKCk7XG4gICAgY29uc3QgcGlja2VkUHJvcHMgPSBjb21wdXRlZCgoKSA9PiB7XG4gICAgICByZXR1cm4ge1xuICAgICAgICBkcm9wZG93bjogcHJvcHMuZHJvcGRvd24sXG4gICAgICAgIGJ1dHRvbnM6IHByb3BzLmJ1dHRvbnMsXG4gICAgICAgIGFjdGl2ZTogcHJvcHMuYWN0aXZlLFxuICAgICAgICBncm91cDogcHJvcHMuZ3JvdXBcbiAgICAgIH07XG4gICAgfSk7XG4gICAgY29uc3QgY29tcHV0ZVByb3BzID0gZG9Db21wdXRlZChcbiAgICAgICgpID0+IHtcbiAgICAgICAgcmV0dXJuIHBpY2tlZFByb3BzLnZhbHVlO1xuICAgICAgfSxcbiAgICAgICgpID0+IHtcbiAgICAgICAgY29uc3QgaW5kZXggPSBwcm9wcy5zY29wZVt1aS50YWJsZUNvbHVtbi5pbmRleF07XG4gICAgICAgIGNvbnN0IHJvdyA9IHByb3BzLnNjb3BlW3VpLnRhYmxlQ29sdW1uLnJvd107XG4gICAgICAgIHJldHVybiB7IC4uLnByb3BzLnNjb3BlLCBpbmRleCwgcm93IH07XG4gICAgICB9XG4gICAgKTtcblxuICAgIC8vY29uc3QgY29tcHV0ZVByb3BzID0geyB2YWx1ZTogcHJvcHMgfTtcbiAgICBjb25zdCBjb21wdXRlZEhhbmRsZUJ0bnMgPSBjb21wdXRlZCgoKSA9PiB7XG4gICAgICBsZXQgbWVyZ2VkQnRucyA9IG51bGw7XG4gICAgICBpZiAoY29tcHV0ZVByb3BzLnZhbHVlLmFjdGl2ZSA9PSBudWxsIHx8IGNvbXB1dGVQcm9wcy52YWx1ZS5hY3RpdmUgPT09IFwiZGVmYXVsdFwiKSB7XG4gICAgICAgIGNvbnN0IGRlZkJ0bnMgPSB7XG4gICAgICAgICAgdmlldzoge1xuICAgICAgICAgICAga2V5OiBcInZpZXdcIixcbiAgICAgICAgICAgIHRleHQ6IHQoXCJmcy5yb3dIYW5kbGUudmlldy50ZXh0XCIpLFxuICAgICAgICAgICAgdGl0bGU6IHQoXCJmcy5yb3dIYW5kbGUudmlldy50ZXh0XCIpXG4gICAgICAgICAgfSxcbiAgICAgICAgICBjb3B5OiB7XG4gICAgICAgICAgICBrZXk6IFwiY29weVwiLFxuICAgICAgICAgICAgdGV4dDogdChcImZzLnJvd0hhbmRsZS5jb3B5LnRleHRcIiksXG4gICAgICAgICAgICB0aXRsZTogdChcImZzLnJvd0hhbmRsZS5jb3B5LnRleHRcIilcbiAgICAgICAgICB9LFxuICAgICAgICAgIGVkaXQ6IHtcbiAgICAgICAgICAgIGtleTogXCJlZGl0XCIsXG4gICAgICAgICAgICB0eXBlOiBcInByaW1hcnlcIixcbiAgICAgICAgICAgIHRleHQ6IHQoXCJmcy5yb3dIYW5kbGUuZWRpdC50ZXh0XCIpLFxuICAgICAgICAgICAgdGl0bGU6IHQoXCJmcy5yb3dIYW5kbGUuZWRpdC50ZXh0XCIpXG4gICAgICAgICAgfSxcbiAgICAgICAgICByZW1vdmU6IHtcbiAgICAgICAgICAgIGtleTogXCJyZW1vdmVcIixcbiAgICAgICAgICAgIC4uLnVpLmJ1dHRvbi5jb2xvcnMoXCJkYW5nZXJcIiksXG4gICAgICAgICAgICB0ZXh0OiB0KFwiZnMucm93SGFuZGxlLnJlbW92ZS50ZXh0XCIpLFxuICAgICAgICAgICAgdGl0bGU6IHQoXCJmcy5yb3dIYW5kbGUucmVtb3ZlLnRleHRcIilcbiAgICAgICAgICB9XG4gICAgICAgIH07XG4gICAgICAgIG1lcmdlZEJ0bnMgPSBtZXJnZShkZWZCdG5zLCBjb21wdXRlUHJvcHMudmFsdWUuYnV0dG9ucyk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBtZXJnZWRCdG5zID0gY29tcHV0ZVByb3BzLnZhbHVlLmdyb3VwW2NvbXB1dGVQcm9wcy52YWx1ZS5hY3RpdmVdO1xuICAgICAgfVxuXG4gICAgICBjb25zdCBidG5zOiBCdXR0b25Qcm9wc1tdID0gW107XG4gICAgICBfLmZvckVhY2gobWVyZ2VkQnRucywgKGl0ZW0sIGtleSkgPT4ge1xuICAgICAgICBpdGVtLmtleSA9IGtleTtcbiAgICAgICAgaWYgKGl0ZW0uc2hvdyA9PT0gZmFsc2UpIHtcbiAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cbiAgICAgICAgYnRucy5wdXNoKGl0ZW0pO1xuICAgICAgfSk7XG5cbiAgICAgIHJldHVybiBfLnNvcnRCeShidG5zLCAoaXRlbSkgPT4ge1xuICAgICAgICByZXR1cm4gaXRlbS5vcmRlciA/PyBDb25zdGFudHMub3JkZXJEZWZhdWx0O1xuICAgICAgfSk7XG4gICAgfSk7XG5cbiAgICBjb25zdCBjb21wdXRlZERyb3Bkb3duQXRMZWFzdCA9IGNvbXB1dGVkKCgpID0+IHtcbiAgICAgIGlmIChcbiAgICAgICAgY29tcHV0ZVByb3BzLnZhbHVlLmRyb3Bkb3duID09IG51bGwgfHxcbiAgICAgICAgY29tcHV0ZVByb3BzLnZhbHVlLmRyb3Bkb3duLmF0TGVhc3QgPT0gbnVsbCB8fFxuICAgICAgICBjb21wdXRlUHJvcHMudmFsdWUuZHJvcGRvd24uYXRMZWFzdCA8PSAwIHx8XG4gICAgICAgIGNvbXB1dGVkSGFuZGxlQnRucy52YWx1ZS5sZW5ndGggPD0gY29tcHV0ZVByb3BzLnZhbHVlLmRyb3Bkb3duLmF0TGVhc3RcbiAgICAgICkge1xuICAgICAgICByZXR1cm4gMDtcbiAgICAgIH1cbiAgICAgIHJldHVybiBjb21wdXRlUHJvcHMudmFsdWUuZHJvcGRvd24uYXRMZWFzdCB8fCAwO1xuICAgIH0pO1xuICAgIGZ1bmN0aW9uIGlzRHJvcGRvd25CdG4oaXRlbTogYW55LCBpbmRleDogbnVtYmVyKSB7XG4gICAgICBpZiAoaXRlbS5kcm9wZG93biA9PT0gdHJ1ZSkge1xuICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgIH1cbiAgICAgIGlmIChjb21wdXRlZERyb3Bkb3duQXRMZWFzdC52YWx1ZSA+IDAgJiYgY29tcHV0ZWREcm9wZG93bkF0TGVhc3QudmFsdWUgPCBpbmRleCkge1xuICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgIH1cbiAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9XG4gICAgY29uc3QgaGFzRHJvcGRvd25CdG4gPSBjb21wdXRlZCgoKSA9PiB7XG4gICAgICBsZXQgaW5kZXggPSAwO1xuICAgICAgZm9yIChjb25zdCBpdGVtIG9mIGNvbXB1dGVkSGFuZGxlQnRucy52YWx1ZSkge1xuICAgICAgICBjb25zdCBpcyA9IGlzRHJvcGRvd25CdG4oaXRlbSwgaW5kZXgpO1xuICAgICAgICBpZiAoaXMpIHtcbiAgICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgICAgfVxuICAgICAgICBpbmRleCsrO1xuICAgICAgfVxuICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH0pO1xuXG4gICAgZnVuY3Rpb24gZG9Ecm9wZG93bkl0ZW1DbGljaygkZXZlbnQ6IGFueSkge1xuICAgICAgZm9yIChsZXQgYnRuIG9mIGNvbXB1dGVkSGFuZGxlQnRucy52YWx1ZSkge1xuICAgICAgICBpZiAoJGV2ZW50ID09PSBidG4ua2V5KSB7XG4gICAgICAgICAgZG9DbGljayhidG4pO1xuICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cblxuICAgIGNvbnN0IGNvbXB1dGVkRHJvcGRvd25CaW5kaW5nID0gY29tcHV0ZWQoKCkgPT4ge1xuICAgICAgY29uc3QgYmluZGluZzogYW55ID0ge307XG4gICAgICBpZiAodWkuZHJvcGRvd24ucmVuZGVyTW9kZSAhPT0gXCJzbG90XCIpIHtcbiAgICAgICAgLy8gbmFpdmUg6YCa6L+Hb3B0aW9uc+mFjee9ruadpeaYvuekuuWtkOmhuVxuICAgICAgICBjb25zdCBidG5zID0gY29tcHV0ZWRIYW5kbGVCdG5zLnZhbHVlO1xuICAgICAgICBjb25zdCBvcHRzOiBCdXR0b25Qcm9wc1tdID0gW107XG4gICAgICAgIF8uZm9yRWFjaChidG5zLCAodmFsdWUsIGluZGV4KSA9PiB7XG4gICAgICAgICAgaWYgKHZhbHVlLnNob3cgIT09IGZhbHNlICYmIGlzRHJvcGRvd25CdG4odmFsdWUsIGluZGV4KSkge1xuICAgICAgICAgICAgb3B0cy5wdXNoKHtcbiAgICAgICAgICAgICAgW3VpLmRyb3Bkb3duLnZhbHVlXTogdmFsdWUua2V5LFxuICAgICAgICAgICAgICBbdWkuZHJvcGRvd24ubGFiZWxdOiB2YWx1ZS50ZXh0LFxuICAgICAgICAgICAgICB0aXRsZTogdmFsdWUudGl0bGVcbiAgICAgICAgICAgIH0pO1xuICAgICAgICAgIH1cbiAgICAgICAgfSk7XG4gICAgICAgIGJpbmRpbmcub3B0aW9ucyA9IG9wdHM7XG4gICAgICB9XG4gICAgICByZXR1cm4ge1xuICAgICAgICAuLi5fLm9taXQocHJvcHMuZHJvcGRvd24sIFwibW9yZVwiLCBcImF0TGVhc3RcIiksXG4gICAgICAgIC4uLnVpLmRyb3Bkb3duLmNvbW1hbmQoZG9Ecm9wZG93bkl0ZW1DbGljayksXG4gICAgICAgIC4uLmJpbmRpbmdcbiAgICAgIH07XG4gICAgfSk7XG5cbiAgICByZXR1cm4ge1xuICAgICAgdWksXG4gICAgICBoYXNEcm9wZG93bkJ0bixcbiAgICAgIGNvbXB1dGVkSGFuZGxlQnRucyxcbiAgICAgIGRvRHJvcGRvd25JdGVtQ2xpY2ssXG4gICAgICBjb21wdXRlZERyb3Bkb3duQXRMZWFzdCxcbiAgICAgIGRvQ2xpY2ssXG4gICAgICBpc0Ryb3Bkb3duQnRuLFxuICAgICAgY29tcHV0ZWREcm9wZG93bkJpbmRpbmdcbiAgICB9O1xuICB9XG59KTtcbjwvc2NyaXB0PlxuXG48c3R5bGUgbGFuZz1cImxlc3NcIj5cbi5mcy1yb3ctaGFuZGxlIHtcbiAgLy8gZGlzcGxheTogZmxleCA7IC8vIOi/memHjOS4jeiDveeUqGZsZXjvvIzlkKbliJnkvJrnoLTlnY9hbGlnbjpjZW50ZXLphY3nva5cbiAgZmxleC13cmFwOiB3cmFwO1xuICBkaXNwbGF5OiBpbmxpbmUtZmxleDtcbiAgYWxpZ24taXRlbXM6IGNlbnRlcjtcbiAgLmVsLWJ1dHRvbiArIC5lbC1idXR0b24ge1xuICAgIG1hcmdpbi1sZWZ0OiAycHg7XG4gIH1cbiAgJiA+ICoge1xuICAgIG1hcmdpbjogMnB4O1xuICAgIGRpc3BsYXk6IGlubGluZS1mbGV4O1xuICAgIGFsaWduLWl0ZW1zOiBjZW50ZXI7XG4gIH1cbiAgLmZzLXJvdy1oYW5kbGUtZHJvcGRvd24taXRlbSB7XG4gICAgZGlzcGxheTogZmxleDtcbiAgfVxuXG4gIC5uLWJ1dHRvbiB7XG4gICAgYWxpZ24taXRlbXM6IGNlbnRlcjtcbiAgfVxufVxuPC9zdHlsZT5cbiIsImZ1bmN0aW9uIF9leHRlbmRzKCkge1xuICBfZXh0ZW5kcyA9IE9iamVjdC5hc3NpZ24gPyBPYmplY3QuYXNzaWduLmJpbmQoKSA6IGZ1bmN0aW9uICh0YXJnZXQpIHtcbiAgICBmb3IgKHZhciBpID0gMTsgaSA8IGFyZ3VtZW50cy5sZW5ndGg7IGkrKykge1xuICAgICAgdmFyIHNvdXJjZSA9IGFyZ3VtZW50c1tpXTtcblxuICAgICAgZm9yICh2YXIga2V5IGluIHNvdXJjZSkge1xuICAgICAgICBpZiAoT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKHNvdXJjZSwga2V5KSkge1xuICAgICAgICAgIHRhcmdldFtrZXldID0gc291cmNlW2tleV07XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG5cbiAgICByZXR1cm4gdGFyZ2V0O1xuICB9O1xuICByZXR1cm4gX2V4dGVuZHMuYXBwbHkodGhpcywgYXJndW1lbnRzKTtcbn1cblxuZnVuY3Rpb24gX2luaGVyaXRzTG9vc2Uoc3ViQ2xhc3MsIHN1cGVyQ2xhc3MpIHtcbiAgc3ViQ2xhc3MucHJvdG90eXBlID0gT2JqZWN0LmNyZWF0ZShzdXBlckNsYXNzLnByb3RvdHlwZSk7XG4gIHN1YkNsYXNzLnByb3RvdHlwZS5jb25zdHJ1Y3RvciA9IHN1YkNsYXNzO1xuXG4gIF9zZXRQcm90b3R5cGVPZihzdWJDbGFzcywgc3VwZXJDbGFzcyk7XG59XG5cbmZ1bmN0aW9uIF9nZXRQcm90b3R5cGVPZihvKSB7XG4gIF9nZXRQcm90b3R5cGVPZiA9IE9iamVjdC5zZXRQcm90b3R5cGVPZiA/IE9iamVjdC5nZXRQcm90b3R5cGVPZi5iaW5kKCkgOiBmdW5jdGlvbiBfZ2V0UHJvdG90eXBlT2Yobykge1xuICAgIHJldHVybiBvLl9fcHJvdG9fXyB8fCBPYmplY3QuZ2V0UHJvdG90eXBlT2Yobyk7XG4gIH07XG4gIHJldHVybiBfZ2V0UHJvdG90eXBlT2Yobyk7XG59XG5cbmZ1bmN0aW9uIF9zZXRQcm90b3R5cGVPZihvLCBwKSB7XG4gIF9zZXRQcm90b3R5cGVPZiA9IE9iamVjdC5zZXRQcm90b3R5cGVPZiA/IE9iamVjdC5zZXRQcm90b3R5cGVPZi5iaW5kKCkgOiBmdW5jdGlvbiBfc2V0UHJvdG90eXBlT2YobywgcCkge1xuICAgIG8uX19wcm90b19fID0gcDtcbiAgICByZXR1cm4gbztcbiAgfTtcbiAgcmV0dXJuIF9zZXRQcm90b3R5cGVPZihvLCBwKTtcbn1cblxuZnVuY3Rpb24gX2lzTmF0aXZlUmVmbGVjdENvbnN0cnVjdCgpIHtcbiAgaWYgKHR5cGVvZiBSZWZsZWN0ID09PSBcInVuZGVmaW5lZFwiIHx8ICFSZWZsZWN0LmNvbnN0cnVjdCkgcmV0dXJuIGZhbHNlO1xuICBpZiAoUmVmbGVjdC5jb25zdHJ1Y3Quc2hhbSkgcmV0dXJuIGZhbHNlO1xuICBpZiAodHlwZW9mIFByb3h5ID09PSBcImZ1bmN0aW9uXCIpIHJldHVybiB0cnVlO1xuXG4gIHRyeSB7XG4gICAgQm9vbGVhbi5wcm90b3R5cGUudmFsdWVPZi5jYWxsKFJlZmxlY3QuY29uc3RydWN0KEJvb2xlYW4sIFtdLCBmdW5jdGlvbiAoKSB7fSkpO1xuICAgIHJldHVybiB0cnVlO1xuICB9IGNhdGNoIChlKSB7XG4gICAgcmV0dXJuIGZhbHNlO1xuICB9XG59XG5cbmZ1bmN0aW9uIF9jb25zdHJ1Y3QoUGFyZW50LCBhcmdzLCBDbGFzcykge1xuICBpZiAoX2lzTmF0aXZlUmVmbGVjdENvbnN0cnVjdCgpKSB7XG4gICAgX2NvbnN0cnVjdCA9IFJlZmxlY3QuY29uc3RydWN0LmJpbmQoKTtcbiAgfSBlbHNlIHtcbiAgICBfY29uc3RydWN0ID0gZnVuY3Rpb24gX2NvbnN0cnVjdChQYXJlbnQsIGFyZ3MsIENsYXNzKSB7XG4gICAgICB2YXIgYSA9IFtudWxsXTtcbiAgICAgIGEucHVzaC5hcHBseShhLCBhcmdzKTtcbiAgICAgIHZhciBDb25zdHJ1Y3RvciA9IEZ1bmN0aW9uLmJpbmQuYXBwbHkoUGFyZW50LCBhKTtcbiAgICAgIHZhciBpbnN0YW5jZSA9IG5ldyBDb25zdHJ1Y3RvcigpO1xuICAgICAgaWYgKENsYXNzKSBfc2V0UHJvdG90eXBlT2YoaW5zdGFuY2UsIENsYXNzLnByb3RvdHlwZSk7XG4gICAgICByZXR1cm4gaW5zdGFuY2U7XG4gICAgfTtcbiAgfVxuXG4gIHJldHVybiBfY29uc3RydWN0LmFwcGx5KG51bGwsIGFyZ3VtZW50cyk7XG59XG5cbmZ1bmN0aW9uIF9pc05hdGl2ZUZ1bmN0aW9uKGZuKSB7XG4gIHJldHVybiBGdW5jdGlvbi50b1N0cmluZy5jYWxsKGZuKS5pbmRleE9mKFwiW25hdGl2ZSBjb2RlXVwiKSAhPT0gLTE7XG59XG5cbmZ1bmN0aW9uIF93cmFwTmF0aXZlU3VwZXIoQ2xhc3MpIHtcbiAgdmFyIF9jYWNoZSA9IHR5cGVvZiBNYXAgPT09IFwiZnVuY3Rpb25cIiA/IG5ldyBNYXAoKSA6IHVuZGVmaW5lZDtcblxuICBfd3JhcE5hdGl2ZVN1cGVyID0gZnVuY3Rpb24gX3dyYXBOYXRpdmVTdXBlcihDbGFzcykge1xuICAgIGlmIChDbGFzcyA9PT0gbnVsbCB8fCAhX2lzTmF0aXZlRnVuY3Rpb24oQ2xhc3MpKSByZXR1cm4gQ2xhc3M7XG5cbiAgICBpZiAodHlwZW9mIENsYXNzICE9PSBcImZ1bmN0aW9uXCIpIHtcbiAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IoXCJTdXBlciBleHByZXNzaW9uIG11c3QgZWl0aGVyIGJlIG51bGwgb3IgYSBmdW5jdGlvblwiKTtcbiAgICB9XG5cbiAgICBpZiAodHlwZW9mIF9jYWNoZSAhPT0gXCJ1bmRlZmluZWRcIikge1xuICAgICAgaWYgKF9jYWNoZS5oYXMoQ2xhc3MpKSByZXR1cm4gX2NhY2hlLmdldChDbGFzcyk7XG5cbiAgICAgIF9jYWNoZS5zZXQoQ2xhc3MsIFdyYXBwZXIpO1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIFdyYXBwZXIoKSB7XG4gICAgICByZXR1cm4gX2NvbnN0cnVjdChDbGFzcywgYXJndW1lbnRzLCBfZ2V0UHJvdG90eXBlT2YodGhpcykuY29uc3RydWN0b3IpO1xuICAgIH1cblxuICAgIFdyYXBwZXIucHJvdG90eXBlID0gT2JqZWN0LmNyZWF0ZShDbGFzcy5wcm90b3R5cGUsIHtcbiAgICAgIGNvbnN0cnVjdG9yOiB7XG4gICAgICAgIHZhbHVlOiBXcmFwcGVyLFxuICAgICAgICBlbnVtZXJhYmxlOiBmYWxzZSxcbiAgICAgICAgd3JpdGFibGU6IHRydWUsXG4gICAgICAgIGNvbmZpZ3VyYWJsZTogdHJ1ZVxuICAgICAgfVxuICAgIH0pO1xuICAgIHJldHVybiBfc2V0UHJvdG90eXBlT2YoV3JhcHBlciwgQ2xhc3MpO1xuICB9O1xuXG4gIHJldHVybiBfd3JhcE5hdGl2ZVN1cGVyKENsYXNzKTtcbn1cblxuLyogZXNsaW50IG5vLWNvbnNvbGU6MCAqL1xudmFyIGZvcm1hdFJlZ0V4cCA9IC8lW3NkaiVdL2c7XG52YXIgd2FybmluZyA9IGZ1bmN0aW9uIHdhcm5pbmcoKSB7fTsgLy8gZG9uJ3QgcHJpbnQgd2FybmluZyBtZXNzYWdlIHdoZW4gaW4gcHJvZHVjdGlvbiBlbnYgb3Igbm9kZSBydW50aW1lXG5cbmlmICh0eXBlb2YgcHJvY2VzcyAhPT0gJ3VuZGVmaW5lZCcgJiYgcHJvY2Vzcy5lbnYgJiYgcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJyAmJiB0eXBlb2Ygd2luZG93ICE9PSAndW5kZWZpbmVkJyAmJiB0eXBlb2YgZG9jdW1lbnQgIT09ICd1bmRlZmluZWQnKSB7XG4gIHdhcm5pbmcgPSBmdW5jdGlvbiB3YXJuaW5nKHR5cGUsIGVycm9ycykge1xuICAgIGlmICh0eXBlb2YgY29uc29sZSAhPT0gJ3VuZGVmaW5lZCcgJiYgY29uc29sZS53YXJuICYmIHR5cGVvZiBBU1lOQ19WQUxJREFUT1JfTk9fV0FSTklORyA9PT0gJ3VuZGVmaW5lZCcpIHtcbiAgICAgIGlmIChlcnJvcnMuZXZlcnkoZnVuY3Rpb24gKGUpIHtcbiAgICAgICAgcmV0dXJuIHR5cGVvZiBlID09PSAnc3RyaW5nJztcbiAgICAgIH0pKSB7XG4gICAgICAgIGNvbnNvbGUud2Fybih0eXBlLCBlcnJvcnMpO1xuICAgICAgfVxuICAgIH1cbiAgfTtcbn1cblxuZnVuY3Rpb24gY29udmVydEZpZWxkc0Vycm9yKGVycm9ycykge1xuICBpZiAoIWVycm9ycyB8fCAhZXJyb3JzLmxlbmd0aCkgcmV0dXJuIG51bGw7XG4gIHZhciBmaWVsZHMgPSB7fTtcbiAgZXJyb3JzLmZvckVhY2goZnVuY3Rpb24gKGVycm9yKSB7XG4gICAgdmFyIGZpZWxkID0gZXJyb3IuZmllbGQ7XG4gICAgZmllbGRzW2ZpZWxkXSA9IGZpZWxkc1tmaWVsZF0gfHwgW107XG4gICAgZmllbGRzW2ZpZWxkXS5wdXNoKGVycm9yKTtcbiAgfSk7XG4gIHJldHVybiBmaWVsZHM7XG59XG5mdW5jdGlvbiBmb3JtYXQodGVtcGxhdGUpIHtcbiAgZm9yICh2YXIgX2xlbiA9IGFyZ3VtZW50cy5sZW5ndGgsIGFyZ3MgPSBuZXcgQXJyYXkoX2xlbiA+IDEgPyBfbGVuIC0gMSA6IDApLCBfa2V5ID0gMTsgX2tleSA8IF9sZW47IF9rZXkrKykge1xuICAgIGFyZ3NbX2tleSAtIDFdID0gYXJndW1lbnRzW19rZXldO1xuICB9XG5cbiAgdmFyIGkgPSAwO1xuICB2YXIgbGVuID0gYXJncy5sZW5ndGg7XG5cbiAgaWYgKHR5cGVvZiB0ZW1wbGF0ZSA9PT0gJ2Z1bmN0aW9uJykge1xuICAgIHJldHVybiB0ZW1wbGF0ZS5hcHBseShudWxsLCBhcmdzKTtcbiAgfVxuXG4gIGlmICh0eXBlb2YgdGVtcGxhdGUgPT09ICdzdHJpbmcnKSB7XG4gICAgdmFyIHN0ciA9IHRlbXBsYXRlLnJlcGxhY2UoZm9ybWF0UmVnRXhwLCBmdW5jdGlvbiAoeCkge1xuICAgICAgaWYgKHggPT09ICclJScpIHtcbiAgICAgICAgcmV0dXJuICclJztcbiAgICAgIH1cblxuICAgICAgaWYgKGkgPj0gbGVuKSB7XG4gICAgICAgIHJldHVybiB4O1xuICAgICAgfVxuXG4gICAgICBzd2l0Y2ggKHgpIHtcbiAgICAgICAgY2FzZSAnJXMnOlxuICAgICAgICAgIHJldHVybiBTdHJpbmcoYXJnc1tpKytdKTtcblxuICAgICAgICBjYXNlICclZCc6XG4gICAgICAgICAgcmV0dXJuIE51bWJlcihhcmdzW2krK10pO1xuXG4gICAgICAgIGNhc2UgJyVqJzpcbiAgICAgICAgICB0cnkge1xuICAgICAgICAgICAgcmV0dXJuIEpTT04uc3RyaW5naWZ5KGFyZ3NbaSsrXSk7XG4gICAgICAgICAgfSBjYXRjaCAoXykge1xuICAgICAgICAgICAgcmV0dXJuICdbQ2lyY3VsYXJdJztcbiAgICAgICAgICB9XG5cbiAgICAgICAgICBicmVhaztcblxuICAgICAgICBkZWZhdWx0OlxuICAgICAgICAgIHJldHVybiB4O1xuICAgICAgfVxuICAgIH0pO1xuICAgIHJldHVybiBzdHI7XG4gIH1cblxuICByZXR1cm4gdGVtcGxhdGU7XG59XG5cbmZ1bmN0aW9uIGlzTmF0aXZlU3RyaW5nVHlwZSh0eXBlKSB7XG4gIHJldHVybiB0eXBlID09PSAnc3RyaW5nJyB8fCB0eXBlID09PSAndXJsJyB8fCB0eXBlID09PSAnaGV4JyB8fCB0eXBlID09PSAnZW1haWwnIHx8IHR5cGUgPT09ICdkYXRlJyB8fCB0eXBlID09PSAncGF0dGVybic7XG59XG5cbmZ1bmN0aW9uIGlzRW1wdHlWYWx1ZSh2YWx1ZSwgdHlwZSkge1xuICBpZiAodmFsdWUgPT09IHVuZGVmaW5lZCB8fCB2YWx1ZSA9PT0gbnVsbCkge1xuICAgIHJldHVybiB0cnVlO1xuICB9XG5cbiAgaWYgKHR5cGUgPT09ICdhcnJheScgJiYgQXJyYXkuaXNBcnJheSh2YWx1ZSkgJiYgIXZhbHVlLmxlbmd0aCkge1xuICAgIHJldHVybiB0cnVlO1xuICB9XG5cbiAgaWYgKGlzTmF0aXZlU3RyaW5nVHlwZSh0eXBlKSAmJiB0eXBlb2YgdmFsdWUgPT09ICdzdHJpbmcnICYmICF2YWx1ZSkge1xuICAgIHJldHVybiB0cnVlO1xuICB9XG5cbiAgcmV0dXJuIGZhbHNlO1xufVxuXG5mdW5jdGlvbiBhc3luY1BhcmFsbGVsQXJyYXkoYXJyLCBmdW5jLCBjYWxsYmFjaykge1xuICB2YXIgcmVzdWx0cyA9IFtdO1xuICB2YXIgdG90YWwgPSAwO1xuICB2YXIgYXJyTGVuZ3RoID0gYXJyLmxlbmd0aDtcblxuICBmdW5jdGlvbiBjb3VudChlcnJvcnMpIHtcbiAgICByZXN1bHRzLnB1c2guYXBwbHkocmVzdWx0cywgZXJyb3JzIHx8IFtdKTtcbiAgICB0b3RhbCsrO1xuXG4gICAgaWYgKHRvdGFsID09PSBhcnJMZW5ndGgpIHtcbiAgICAgIGNhbGxiYWNrKHJlc3VsdHMpO1xuICAgIH1cbiAgfVxuXG4gIGFyci5mb3JFYWNoKGZ1bmN0aW9uIChhKSB7XG4gICAgZnVuYyhhLCBjb3VudCk7XG4gIH0pO1xufVxuXG5mdW5jdGlvbiBhc3luY1NlcmlhbEFycmF5KGFyciwgZnVuYywgY2FsbGJhY2spIHtcbiAgdmFyIGluZGV4ID0gMDtcbiAgdmFyIGFyckxlbmd0aCA9IGFyci5sZW5ndGg7XG5cbiAgZnVuY3Rpb24gbmV4dChlcnJvcnMpIHtcbiAgICBpZiAoZXJyb3JzICYmIGVycm9ycy5sZW5ndGgpIHtcbiAgICAgIGNhbGxiYWNrKGVycm9ycyk7XG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgdmFyIG9yaWdpbmFsID0gaW5kZXg7XG4gICAgaW5kZXggPSBpbmRleCArIDE7XG5cbiAgICBpZiAob3JpZ2luYWwgPCBhcnJMZW5ndGgpIHtcbiAgICAgIGZ1bmMoYXJyW29yaWdpbmFsXSwgbmV4dCk7XG4gICAgfSBlbHNlIHtcbiAgICAgIGNhbGxiYWNrKFtdKTtcbiAgICB9XG4gIH1cblxuICBuZXh0KFtdKTtcbn1cblxuZnVuY3Rpb24gZmxhdHRlbk9iakFycihvYmpBcnIpIHtcbiAgdmFyIHJldCA9IFtdO1xuICBPYmplY3Qua2V5cyhvYmpBcnIpLmZvckVhY2goZnVuY3Rpb24gKGspIHtcbiAgICByZXQucHVzaC5hcHBseShyZXQsIG9iakFycltrXSB8fCBbXSk7XG4gIH0pO1xuICByZXR1cm4gcmV0O1xufVxuXG52YXIgQXN5bmNWYWxpZGF0aW9uRXJyb3IgPSAvKiNfX1BVUkVfXyovZnVuY3Rpb24gKF9FcnJvcikge1xuICBfaW5oZXJpdHNMb29zZShBc3luY1ZhbGlkYXRpb25FcnJvciwgX0Vycm9yKTtcblxuICBmdW5jdGlvbiBBc3luY1ZhbGlkYXRpb25FcnJvcihlcnJvcnMsIGZpZWxkcykge1xuICAgIHZhciBfdGhpcztcblxuICAgIF90aGlzID0gX0Vycm9yLmNhbGwodGhpcywgJ0FzeW5jIFZhbGlkYXRpb24gRXJyb3InKSB8fCB0aGlzO1xuICAgIF90aGlzLmVycm9ycyA9IGVycm9ycztcbiAgICBfdGhpcy5maWVsZHMgPSBmaWVsZHM7XG4gICAgcmV0dXJuIF90aGlzO1xuICB9XG5cbiAgcmV0dXJuIEFzeW5jVmFsaWRhdGlvbkVycm9yO1xufSggLyojX19QVVJFX18qL193cmFwTmF0aXZlU3VwZXIoRXJyb3IpKTtcbmZ1bmN0aW9uIGFzeW5jTWFwKG9iakFyciwgb3B0aW9uLCBmdW5jLCBjYWxsYmFjaywgc291cmNlKSB7XG4gIGlmIChvcHRpb24uZmlyc3QpIHtcbiAgICB2YXIgX3BlbmRpbmcgPSBuZXcgUHJvbWlzZShmdW5jdGlvbiAocmVzb2x2ZSwgcmVqZWN0KSB7XG4gICAgICB2YXIgbmV4dCA9IGZ1bmN0aW9uIG5leHQoZXJyb3JzKSB7XG4gICAgICAgIGNhbGxiYWNrKGVycm9ycyk7XG4gICAgICAgIHJldHVybiBlcnJvcnMubGVuZ3RoID8gcmVqZWN0KG5ldyBBc3luY1ZhbGlkYXRpb25FcnJvcihlcnJvcnMsIGNvbnZlcnRGaWVsZHNFcnJvcihlcnJvcnMpKSkgOiByZXNvbHZlKHNvdXJjZSk7XG4gICAgICB9O1xuXG4gICAgICB2YXIgZmxhdHRlbkFyciA9IGZsYXR0ZW5PYmpBcnIob2JqQXJyKTtcbiAgICAgIGFzeW5jU2VyaWFsQXJyYXkoZmxhdHRlbkFyciwgZnVuYywgbmV4dCk7XG4gICAgfSk7XG5cbiAgICBfcGVuZGluZ1tcImNhdGNoXCJdKGZ1bmN0aW9uIChlKSB7XG4gICAgICByZXR1cm4gZTtcbiAgICB9KTtcblxuICAgIHJldHVybiBfcGVuZGluZztcbiAgfVxuXG4gIHZhciBmaXJzdEZpZWxkcyA9IG9wdGlvbi5maXJzdEZpZWxkcyA9PT0gdHJ1ZSA/IE9iamVjdC5rZXlzKG9iakFycikgOiBvcHRpb24uZmlyc3RGaWVsZHMgfHwgW107XG4gIHZhciBvYmpBcnJLZXlzID0gT2JqZWN0LmtleXMob2JqQXJyKTtcbiAgdmFyIG9iakFyckxlbmd0aCA9IG9iakFycktleXMubGVuZ3RoO1xuICB2YXIgdG90YWwgPSAwO1xuICB2YXIgcmVzdWx0cyA9IFtdO1xuICB2YXIgcGVuZGluZyA9IG5ldyBQcm9taXNlKGZ1bmN0aW9uIChyZXNvbHZlLCByZWplY3QpIHtcbiAgICB2YXIgbmV4dCA9IGZ1bmN0aW9uIG5leHQoZXJyb3JzKSB7XG4gICAgICByZXN1bHRzLnB1c2guYXBwbHkocmVzdWx0cywgZXJyb3JzKTtcbiAgICAgIHRvdGFsKys7XG5cbiAgICAgIGlmICh0b3RhbCA9PT0gb2JqQXJyTGVuZ3RoKSB7XG4gICAgICAgIGNhbGxiYWNrKHJlc3VsdHMpO1xuICAgICAgICByZXR1cm4gcmVzdWx0cy5sZW5ndGggPyByZWplY3QobmV3IEFzeW5jVmFsaWRhdGlvbkVycm9yKHJlc3VsdHMsIGNvbnZlcnRGaWVsZHNFcnJvcihyZXN1bHRzKSkpIDogcmVzb2x2ZShzb3VyY2UpO1xuICAgICAgfVxuICAgIH07XG5cbiAgICBpZiAoIW9iakFycktleXMubGVuZ3RoKSB7XG4gICAgICBjYWxsYmFjayhyZXN1bHRzKTtcbiAgICAgIHJlc29sdmUoc291cmNlKTtcbiAgICB9XG5cbiAgICBvYmpBcnJLZXlzLmZvckVhY2goZnVuY3Rpb24gKGtleSkge1xuICAgICAgdmFyIGFyciA9IG9iakFycltrZXldO1xuXG4gICAgICBpZiAoZmlyc3RGaWVsZHMuaW5kZXhPZihrZXkpICE9PSAtMSkge1xuICAgICAgICBhc3luY1NlcmlhbEFycmF5KGFyciwgZnVuYywgbmV4dCk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBhc3luY1BhcmFsbGVsQXJyYXkoYXJyLCBmdW5jLCBuZXh0KTtcbiAgICAgIH1cbiAgICB9KTtcbiAgfSk7XG4gIHBlbmRpbmdbXCJjYXRjaFwiXShmdW5jdGlvbiAoZSkge1xuICAgIHJldHVybiBlO1xuICB9KTtcbiAgcmV0dXJuIHBlbmRpbmc7XG59XG5cbmZ1bmN0aW9uIGlzRXJyb3JPYmoob2JqKSB7XG4gIHJldHVybiAhIShvYmogJiYgb2JqLm1lc3NhZ2UgIT09IHVuZGVmaW5lZCk7XG59XG5cbmZ1bmN0aW9uIGdldFZhbHVlKHZhbHVlLCBwYXRoKSB7XG4gIHZhciB2ID0gdmFsdWU7XG5cbiAgZm9yICh2YXIgaSA9IDA7IGkgPCBwYXRoLmxlbmd0aDsgaSsrKSB7XG4gICAgaWYgKHYgPT0gdW5kZWZpbmVkKSB7XG4gICAgICByZXR1cm4gdjtcbiAgICB9XG5cbiAgICB2ID0gdltwYXRoW2ldXTtcbiAgfVxuXG4gIHJldHVybiB2O1xufVxuXG5mdW5jdGlvbiBjb21wbGVtZW50RXJyb3IocnVsZSwgc291cmNlKSB7XG4gIHJldHVybiBmdW5jdGlvbiAob2UpIHtcbiAgICB2YXIgZmllbGRWYWx1ZTtcblxuICAgIGlmIChydWxlLmZ1bGxGaWVsZHMpIHtcbiAgICAgIGZpZWxkVmFsdWUgPSBnZXRWYWx1ZShzb3VyY2UsIHJ1bGUuZnVsbEZpZWxkcyk7XG4gICAgfSBlbHNlIHtcbiAgICAgIGZpZWxkVmFsdWUgPSBzb3VyY2Vbb2UuZmllbGQgfHwgcnVsZS5mdWxsRmllbGRdO1xuICAgIH1cblxuICAgIGlmIChpc0Vycm9yT2JqKG9lKSkge1xuICAgICAgb2UuZmllbGQgPSBvZS5maWVsZCB8fCBydWxlLmZ1bGxGaWVsZDtcbiAgICAgIG9lLmZpZWxkVmFsdWUgPSBmaWVsZFZhbHVlO1xuICAgICAgcmV0dXJuIG9lO1xuICAgIH1cblxuICAgIHJldHVybiB7XG4gICAgICBtZXNzYWdlOiB0eXBlb2Ygb2UgPT09ICdmdW5jdGlvbicgPyBvZSgpIDogb2UsXG4gICAgICBmaWVsZFZhbHVlOiBmaWVsZFZhbHVlLFxuICAgICAgZmllbGQ6IG9lLmZpZWxkIHx8IHJ1bGUuZnVsbEZpZWxkXG4gICAgfTtcbiAgfTtcbn1cbmZ1bmN0aW9uIGRlZXBNZXJnZSh0YXJnZXQsIHNvdXJjZSkge1xuICBpZiAoc291cmNlKSB7XG4gICAgZm9yICh2YXIgcyBpbiBzb3VyY2UpIHtcbiAgICAgIGlmIChzb3VyY2UuaGFzT3duUHJvcGVydHkocykpIHtcbiAgICAgICAgdmFyIHZhbHVlID0gc291cmNlW3NdO1xuXG4gICAgICAgIGlmICh0eXBlb2YgdmFsdWUgPT09ICdvYmplY3QnICYmIHR5cGVvZiB0YXJnZXRbc10gPT09ICdvYmplY3QnKSB7XG4gICAgICAgICAgdGFyZ2V0W3NdID0gX2V4dGVuZHMoe30sIHRhcmdldFtzXSwgdmFsdWUpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIHRhcmdldFtzXSA9IHZhbHVlO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIHRhcmdldDtcbn1cblxudmFyIHJlcXVpcmVkJDEgPSBmdW5jdGlvbiByZXF1aXJlZChydWxlLCB2YWx1ZSwgc291cmNlLCBlcnJvcnMsIG9wdGlvbnMsIHR5cGUpIHtcbiAgaWYgKHJ1bGUucmVxdWlyZWQgJiYgKCFzb3VyY2UuaGFzT3duUHJvcGVydHkocnVsZS5maWVsZCkgfHwgaXNFbXB0eVZhbHVlKHZhbHVlLCB0eXBlIHx8IHJ1bGUudHlwZSkpKSB7XG4gICAgZXJyb3JzLnB1c2goZm9ybWF0KG9wdGlvbnMubWVzc2FnZXMucmVxdWlyZWQsIHJ1bGUuZnVsbEZpZWxkKSk7XG4gIH1cbn07XG5cbi8qKlxuICogIFJ1bGUgZm9yIHZhbGlkYXRpbmcgd2hpdGVzcGFjZS5cbiAqXG4gKiAgQHBhcmFtIHJ1bGUgVGhlIHZhbGlkYXRpb24gcnVsZS5cbiAqICBAcGFyYW0gdmFsdWUgVGhlIHZhbHVlIG9mIHRoZSBmaWVsZCBvbiB0aGUgc291cmNlIG9iamVjdC5cbiAqICBAcGFyYW0gc291cmNlIFRoZSBzb3VyY2Ugb2JqZWN0IGJlaW5nIHZhbGlkYXRlZC5cbiAqICBAcGFyYW0gZXJyb3JzIEFuIGFycmF5IG9mIGVycm9ycyB0aGF0IHRoaXMgcnVsZSBtYXkgYWRkXG4gKiAgdmFsaWRhdGlvbiBlcnJvcnMgdG8uXG4gKiAgQHBhcmFtIG9wdGlvbnMgVGhlIHZhbGlkYXRpb24gb3B0aW9ucy5cbiAqICBAcGFyYW0gb3B0aW9ucy5tZXNzYWdlcyBUaGUgdmFsaWRhdGlvbiBtZXNzYWdlcy5cbiAqL1xuXG52YXIgd2hpdGVzcGFjZSA9IGZ1bmN0aW9uIHdoaXRlc3BhY2UocnVsZSwgdmFsdWUsIHNvdXJjZSwgZXJyb3JzLCBvcHRpb25zKSB7XG4gIGlmICgvXlxccyskLy50ZXN0KHZhbHVlKSB8fCB2YWx1ZSA9PT0gJycpIHtcbiAgICBlcnJvcnMucHVzaChmb3JtYXQob3B0aW9ucy5tZXNzYWdlcy53aGl0ZXNwYWNlLCBydWxlLmZ1bGxGaWVsZCkpO1xuICB9XG59O1xuXG4vLyBodHRwczovL2dpdGh1Yi5jb20va2V2dmEvdXJsLXJlZ2V4L2Jsb2IvbWFzdGVyL2luZGV4LmpzXG52YXIgdXJsUmVnO1xudmFyIGdldFVybFJlZ2V4ID0gKGZ1bmN0aW9uICgpIHtcbiAgaWYgKHVybFJlZykge1xuICAgIHJldHVybiB1cmxSZWc7XG4gIH1cblxuICB2YXIgd29yZCA9ICdbYS1mQS1GXFxcXGQ6XSc7XG5cbiAgdmFyIGIgPSBmdW5jdGlvbiBiKG9wdGlvbnMpIHtcbiAgICByZXR1cm4gb3B0aW9ucyAmJiBvcHRpb25zLmluY2x1ZGVCb3VuZGFyaWVzID8gXCIoPzooPzw9XFxcXHN8XikoPz1cIiArIHdvcmQgKyBcIil8KD88PVwiICsgd29yZCArIFwiKSg/PVxcXFxzfCQpKVwiIDogJyc7XG4gIH07XG5cbiAgdmFyIHY0ID0gJyg/OjI1WzAtNV18MlswLTRdXFxcXGR8MVxcXFxkXFxcXGR8WzEtOV1cXFxcZHxcXFxcZCkoPzpcXFxcLig/OjI1WzAtNV18MlswLTRdXFxcXGR8MVxcXFxkXFxcXGR8WzEtOV1cXFxcZHxcXFxcZCkpezN9JztcbiAgdmFyIHY2c2VnID0gJ1thLWZBLUZcXFxcZF17MSw0fSc7XG4gIHZhciB2NiA9IChcIlxcbig/Olxcbig/OlwiICsgdjZzZWcgKyBcIjopezd9KD86XCIgKyB2NnNlZyArIFwifDopfCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIDE6MjozOjQ6NTo2Ojc6OiAgMToyOjM6NDo1OjY6Nzo4XFxuKD86XCIgKyB2NnNlZyArIFwiOil7Nn0oPzpcIiArIHY0ICsgXCJ8OlwiICsgdjZzZWcgKyBcInw6KXwgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIDE6MjozOjQ6NTo2OjogICAgMToyOjM6NDo1OjY6OjggICAxOjI6Mzo0OjU6Njo6OCAgMToyOjM6NDo1OjY6OjEuMi4zLjRcXG4oPzpcIiArIHY2c2VnICsgXCI6KXs1fSg/OjpcIiArIHY0ICsgXCJ8KD86OlwiICsgdjZzZWcgKyBcIil7MSwyfXw6KXwgICAgICAgICAgICAgICAgICAgLy8gMToyOjM6NDo1OjogICAgICAxOjI6Mzo0OjU6Ojc6OCAgIDE6MjozOjQ6NTo6OCAgICAxOjI6Mzo0OjU6Ojc6MS4yLjMuNFxcbig/OlwiICsgdjZzZWcgKyBcIjopezR9KD86KD86OlwiICsgdjZzZWcgKyBcIil7MCwxfTpcIiArIHY0ICsgXCJ8KD86OlwiICsgdjZzZWcgKyBcIil7MSwzfXw6KXwgLy8gMToyOjM6NDo6ICAgICAgICAxOjI6Mzo0Ojo2Ojc6OCAgIDE6MjozOjQ6OjggICAgICAxOjI6Mzo0Ojo2Ojc6MS4yLjMuNFxcbig/OlwiICsgdjZzZWcgKyBcIjopezN9KD86KD86OlwiICsgdjZzZWcgKyBcIil7MCwyfTpcIiArIHY0ICsgXCJ8KD86OlwiICsgdjZzZWcgKyBcIil7MSw0fXw6KXwgLy8gMToyOjM6OiAgICAgICAgICAxOjI6Mzo6NTo2Ojc6OCAgIDE6MjozOjo4ICAgICAgICAxOjI6Mzo6NTo2Ojc6MS4yLjMuNFxcbig/OlwiICsgdjZzZWcgKyBcIjopezJ9KD86KD86OlwiICsgdjZzZWcgKyBcIil7MCwzfTpcIiArIHY0ICsgXCJ8KD86OlwiICsgdjZzZWcgKyBcIil7MSw1fXw6KXwgLy8gMToyOjogICAgICAgICAgICAxOjI6OjQ6NTo2Ojc6OCAgIDE6Mjo6OCAgICAgICAgICAxOjI6OjQ6NTo2Ojc6MS4yLjMuNFxcbig/OlwiICsgdjZzZWcgKyBcIjopezF9KD86KD86OlwiICsgdjZzZWcgKyBcIil7MCw0fTpcIiArIHY0ICsgXCJ8KD86OlwiICsgdjZzZWcgKyBcIil7MSw2fXw6KXwgLy8gMTo6ICAgICAgICAgICAgICAxOjozOjQ6NTo2Ojc6OCAgIDE6OjggICAgICAgICAgICAxOjozOjQ6NTo2Ojc6MS4yLjMuNFxcbig/OjooPzooPzo6XCIgKyB2NnNlZyArIFwiKXswLDV9OlwiICsgdjQgKyBcInwoPzo6XCIgKyB2NnNlZyArIFwiKXsxLDd9fDopKSAgICAgICAgICAgICAvLyA6OjI6Mzo0OjU6Njo3OjggIDo6MjozOjQ6NTo2Ojc6OCAgOjo4ICAgICAgICAgICAgIDo6MS4yLjMuNFxcbikoPzolWzAtOWEtekEtWl17MSx9KT8gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyAlZXRoMCAgICAgICAgICAgICUxXFxuXCIpLnJlcGxhY2UoL1xccypcXC9cXC8uKiQvZ20sICcnKS5yZXBsYWNlKC9cXG4vZywgJycpLnRyaW0oKTsgLy8gUHJlLWNvbXBpbGUgb25seSB0aGUgZXhhY3QgcmVnZXhlcyBiZWNhdXNlIGFkZGluZyBhIGdsb2JhbCBmbGFnIG1ha2UgcmVnZXhlcyBzdGF0ZWZ1bFxuXG4gIHZhciB2NDZFeGFjdCA9IG5ldyBSZWdFeHAoXCIoPzpeXCIgKyB2NCArIFwiJCl8KD86XlwiICsgdjYgKyBcIiQpXCIpO1xuICB2YXIgdjRleGFjdCA9IG5ldyBSZWdFeHAoXCJeXCIgKyB2NCArIFwiJFwiKTtcbiAgdmFyIHY2ZXhhY3QgPSBuZXcgUmVnRXhwKFwiXlwiICsgdjYgKyBcIiRcIik7XG5cbiAgdmFyIGlwID0gZnVuY3Rpb24gaXAob3B0aW9ucykge1xuICAgIHJldHVybiBvcHRpb25zICYmIG9wdGlvbnMuZXhhY3QgPyB2NDZFeGFjdCA6IG5ldyBSZWdFeHAoXCIoPzpcIiArIGIob3B0aW9ucykgKyB2NCArIGIob3B0aW9ucykgKyBcIil8KD86XCIgKyBiKG9wdGlvbnMpICsgdjYgKyBiKG9wdGlvbnMpICsgXCIpXCIsICdnJyk7XG4gIH07XG5cbiAgaXAudjQgPSBmdW5jdGlvbiAob3B0aW9ucykge1xuICAgIHJldHVybiBvcHRpb25zICYmIG9wdGlvbnMuZXhhY3QgPyB2NGV4YWN0IDogbmV3IFJlZ0V4cChcIlwiICsgYihvcHRpb25zKSArIHY0ICsgYihvcHRpb25zKSwgJ2cnKTtcbiAgfTtcblxuICBpcC52NiA9IGZ1bmN0aW9uIChvcHRpb25zKSB7XG4gICAgcmV0dXJuIG9wdGlvbnMgJiYgb3B0aW9ucy5leGFjdCA/IHY2ZXhhY3QgOiBuZXcgUmVnRXhwKFwiXCIgKyBiKG9wdGlvbnMpICsgdjYgKyBiKG9wdGlvbnMpLCAnZycpO1xuICB9O1xuXG4gIHZhciBwcm90b2NvbCA9IFwiKD86KD86W2Etel0rOik/Ly8pXCI7XG4gIHZhciBhdXRoID0gJyg/OlxcXFxTKyg/OjpcXFxcUyopP0ApPyc7XG4gIHZhciBpcHY0ID0gaXAudjQoKS5zb3VyY2U7XG4gIHZhciBpcHY2ID0gaXAudjYoKS5zb3VyY2U7XG4gIHZhciBob3N0ID0gXCIoPzooPzpbYS16XFxcXHUwMGExLVxcXFx1ZmZmZjAtOV1bLV9dKikqW2EtelxcXFx1MDBhMS1cXFxcdWZmZmYwLTldKylcIjtcbiAgdmFyIGRvbWFpbiA9IFwiKD86XFxcXC4oPzpbYS16XFxcXHUwMGExLVxcXFx1ZmZmZjAtOV0tKikqW2EtelxcXFx1MDBhMS1cXFxcdWZmZmYwLTldKykqXCI7XG4gIHZhciB0bGQgPSBcIig/OlxcXFwuKD86W2EtelxcXFx1MDBhMS1cXFxcdWZmZmZdezIsfSkpXCI7XG4gIHZhciBwb3J0ID0gJyg/OjpcXFxcZHsyLDV9KT8nO1xuICB2YXIgcGF0aCA9ICcoPzpbLz8jXVteXFxcXHNcIl0qKT8nO1xuICB2YXIgcmVnZXggPSBcIig/OlwiICsgcHJvdG9jb2wgKyBcInx3d3dcXFxcLilcIiArIGF1dGggKyBcIig/OmxvY2FsaG9zdHxcIiArIGlwdjQgKyBcInxcIiArIGlwdjYgKyBcInxcIiArIGhvc3QgKyBkb21haW4gKyB0bGQgKyBcIilcIiArIHBvcnQgKyBwYXRoO1xuICB1cmxSZWcgPSBuZXcgUmVnRXhwKFwiKD86XlwiICsgcmVnZXggKyBcIiQpXCIsICdpJyk7XG4gIHJldHVybiB1cmxSZWc7XG59KTtcblxuLyogZXNsaW50IG1heC1sZW46MCAqL1xuXG52YXIgcGF0dGVybiQyID0ge1xuICAvLyBodHRwOi8vZW1haWxyZWdleC5jb20vXG4gIGVtYWlsOiAvXigoW148PigpXFxbXFxdXFxcXC4sOzpcXHNAXCJdKyhcXC5bXjw+KClcXFtcXF1cXFxcLiw7Olxcc0BcIl0rKSopfChcIi4rXCIpKUAoKFxcW1swLTldezEsM31cXC5bMC05XXsxLDN9XFwuWzAtOV17MSwzfVxcLlswLTldezEsM31dKXwoKFthLXpBLVpcXC0wLTlcXHUwMEEwLVxcdUQ3RkZcXHVGOTAwLVxcdUZEQ0ZcXHVGREYwLVxcdUZGRUZdK1xcLikrW2EtekEtWlxcdTAwQTAtXFx1RDdGRlxcdUY5MDAtXFx1RkRDRlxcdUZERjAtXFx1RkZFRl17Mix9KSkkLyxcbiAgLy8gdXJsOiBuZXcgUmVnRXhwKFxuICAvLyAgICdeKD8hbWFpbHRvOikoPzooPzpodHRwfGh0dHBzfGZ0cCk6Ly98Ly8pKD86XFxcXFMrKD86OlxcXFxTKik/QCk/KD86KD86KD86WzEtOV1cXFxcZD98MVxcXFxkXFxcXGR8MlswMV1cXFxcZHwyMlswLTNdKSg/OlxcXFwuKD86MT9cXFxcZHsxLDJ9fDJbMC00XVxcXFxkfDI1WzAtNV0pKXsyfSg/OlxcXFwuKD86WzAtOV1cXFxcZD98MVxcXFxkXFxcXGR8MlswLTRdXFxcXGR8MjVbMC00XSkpfCg/Oig/OlthLXpcXFxcdTAwYTEtXFxcXHVmZmZmMC05XSstKikqW2EtelxcXFx1MDBhMS1cXFxcdWZmZmYwLTldKykoPzpcXFxcLig/OlthLXpcXFxcdTAwYTEtXFxcXHVmZmZmMC05XSstKikqW2EtelxcXFx1MDBhMS1cXFxcdWZmZmYwLTldKykqKD86XFxcXC4oPzpbYS16XFxcXHUwMGExLVxcXFx1ZmZmZl17Mix9KSkpfGxvY2FsaG9zdCkoPzo6XFxcXGR7Miw1fSk/KD86KC98XFxcXD98IylbXlxcXFxzXSopPyQnLFxuICAvLyAgICdpJyxcbiAgLy8gKSxcbiAgaGV4OiAvXiM/KFthLWYwLTldezZ9fFthLWYwLTldezN9KSQvaVxufTtcbnZhciB0eXBlcyA9IHtcbiAgaW50ZWdlcjogZnVuY3Rpb24gaW50ZWdlcih2YWx1ZSkge1xuICAgIHJldHVybiB0eXBlcy5udW1iZXIodmFsdWUpICYmIHBhcnNlSW50KHZhbHVlLCAxMCkgPT09IHZhbHVlO1xuICB9LFxuICBcImZsb2F0XCI6IGZ1bmN0aW9uIGZsb2F0KHZhbHVlKSB7XG4gICAgcmV0dXJuIHR5cGVzLm51bWJlcih2YWx1ZSkgJiYgIXR5cGVzLmludGVnZXIodmFsdWUpO1xuICB9LFxuICBhcnJheTogZnVuY3Rpb24gYXJyYXkodmFsdWUpIHtcbiAgICByZXR1cm4gQXJyYXkuaXNBcnJheSh2YWx1ZSk7XG4gIH0sXG4gIHJlZ2V4cDogZnVuY3Rpb24gcmVnZXhwKHZhbHVlKSB7XG4gICAgaWYgKHZhbHVlIGluc3RhbmNlb2YgUmVnRXhwKSB7XG4gICAgICByZXR1cm4gdHJ1ZTtcbiAgICB9XG5cbiAgICB0cnkge1xuICAgICAgcmV0dXJuICEhbmV3IFJlZ0V4cCh2YWx1ZSk7XG4gICAgfSBjYXRjaCAoZSkge1xuICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH1cbiAgfSxcbiAgZGF0ZTogZnVuY3Rpb24gZGF0ZSh2YWx1ZSkge1xuICAgIHJldHVybiB0eXBlb2YgdmFsdWUuZ2V0VGltZSA9PT0gJ2Z1bmN0aW9uJyAmJiB0eXBlb2YgdmFsdWUuZ2V0TW9udGggPT09ICdmdW5jdGlvbicgJiYgdHlwZW9mIHZhbHVlLmdldFllYXIgPT09ICdmdW5jdGlvbicgJiYgIWlzTmFOKHZhbHVlLmdldFRpbWUoKSk7XG4gIH0sXG4gIG51bWJlcjogZnVuY3Rpb24gbnVtYmVyKHZhbHVlKSB7XG4gICAgaWYgKGlzTmFOKHZhbHVlKSkge1xuICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH1cblxuICAgIHJldHVybiB0eXBlb2YgdmFsdWUgPT09ICdudW1iZXInO1xuICB9LFxuICBvYmplY3Q6IGZ1bmN0aW9uIG9iamVjdCh2YWx1ZSkge1xuICAgIHJldHVybiB0eXBlb2YgdmFsdWUgPT09ICdvYmplY3QnICYmICF0eXBlcy5hcnJheSh2YWx1ZSk7XG4gIH0sXG4gIG1ldGhvZDogZnVuY3Rpb24gbWV0aG9kKHZhbHVlKSB7XG4gICAgcmV0dXJuIHR5cGVvZiB2YWx1ZSA9PT0gJ2Z1bmN0aW9uJztcbiAgfSxcbiAgZW1haWw6IGZ1bmN0aW9uIGVtYWlsKHZhbHVlKSB7XG4gICAgcmV0dXJuIHR5cGVvZiB2YWx1ZSA9PT0gJ3N0cmluZycgJiYgdmFsdWUubGVuZ3RoIDw9IDMyMCAmJiAhIXZhbHVlLm1hdGNoKHBhdHRlcm4kMi5lbWFpbCk7XG4gIH0sXG4gIHVybDogZnVuY3Rpb24gdXJsKHZhbHVlKSB7XG4gICAgcmV0dXJuIHR5cGVvZiB2YWx1ZSA9PT0gJ3N0cmluZycgJiYgdmFsdWUubGVuZ3RoIDw9IDIwNDggJiYgISF2YWx1ZS5tYXRjaChnZXRVcmxSZWdleCgpKTtcbiAgfSxcbiAgaGV4OiBmdW5jdGlvbiBoZXgodmFsdWUpIHtcbiAgICByZXR1cm4gdHlwZW9mIHZhbHVlID09PSAnc3RyaW5nJyAmJiAhIXZhbHVlLm1hdGNoKHBhdHRlcm4kMi5oZXgpO1xuICB9XG59O1xuXG52YXIgdHlwZSQxID0gZnVuY3Rpb24gdHlwZShydWxlLCB2YWx1ZSwgc291cmNlLCBlcnJvcnMsIG9wdGlvbnMpIHtcbiAgaWYgKHJ1bGUucmVxdWlyZWQgJiYgdmFsdWUgPT09IHVuZGVmaW5lZCkge1xuICAgIHJlcXVpcmVkJDEocnVsZSwgdmFsdWUsIHNvdXJjZSwgZXJyb3JzLCBvcHRpb25zKTtcbiAgICByZXR1cm47XG4gIH1cblxuICB2YXIgY3VzdG9tID0gWydpbnRlZ2VyJywgJ2Zsb2F0JywgJ2FycmF5JywgJ3JlZ2V4cCcsICdvYmplY3QnLCAnbWV0aG9kJywgJ2VtYWlsJywgJ251bWJlcicsICdkYXRlJywgJ3VybCcsICdoZXgnXTtcbiAgdmFyIHJ1bGVUeXBlID0gcnVsZS50eXBlO1xuXG4gIGlmIChjdXN0b20uaW5kZXhPZihydWxlVHlwZSkgPiAtMSkge1xuICAgIGlmICghdHlwZXNbcnVsZVR5cGVdKHZhbHVlKSkge1xuICAgICAgZXJyb3JzLnB1c2goZm9ybWF0KG9wdGlvbnMubWVzc2FnZXMudHlwZXNbcnVsZVR5cGVdLCBydWxlLmZ1bGxGaWVsZCwgcnVsZS50eXBlKSk7XG4gICAgfSAvLyBzdHJhaWdodCB0eXBlb2YgY2hlY2tcblxuICB9IGVsc2UgaWYgKHJ1bGVUeXBlICYmIHR5cGVvZiB2YWx1ZSAhPT0gcnVsZS50eXBlKSB7XG4gICAgZXJyb3JzLnB1c2goZm9ybWF0KG9wdGlvbnMubWVzc2FnZXMudHlwZXNbcnVsZVR5cGVdLCBydWxlLmZ1bGxGaWVsZCwgcnVsZS50eXBlKSk7XG4gIH1cbn07XG5cbnZhciByYW5nZSA9IGZ1bmN0aW9uIHJhbmdlKHJ1bGUsIHZhbHVlLCBzb3VyY2UsIGVycm9ycywgb3B0aW9ucykge1xuICB2YXIgbGVuID0gdHlwZW9mIHJ1bGUubGVuID09PSAnbnVtYmVyJztcbiAgdmFyIG1pbiA9IHR5cGVvZiBydWxlLm1pbiA9PT0gJ251bWJlcic7XG4gIHZhciBtYXggPSB0eXBlb2YgcnVsZS5tYXggPT09ICdudW1iZXInOyAvLyDmraPliJnljLnphY3noIHngrnojIPlm7Tku45VKzAxMDAwMOS4gOebtOWIsFUrMTBGRkZG55qE5paH5a2X77yI6KGl5YWF5bmz6Z2iU3VwcGxlbWVudGFyeSBQbGFuZe+8iVxuXG4gIHZhciBzcFJlZ2V4cCA9IC9bXFx1RDgwMC1cXHVEQkZGXVtcXHVEQzAwLVxcdURGRkZdL2c7XG4gIHZhciB2YWwgPSB2YWx1ZTtcbiAgdmFyIGtleSA9IG51bGw7XG4gIHZhciBudW0gPSB0eXBlb2YgdmFsdWUgPT09ICdudW1iZXInO1xuICB2YXIgc3RyID0gdHlwZW9mIHZhbHVlID09PSAnc3RyaW5nJztcbiAgdmFyIGFyciA9IEFycmF5LmlzQXJyYXkodmFsdWUpO1xuXG4gIGlmIChudW0pIHtcbiAgICBrZXkgPSAnbnVtYmVyJztcbiAgfSBlbHNlIGlmIChzdHIpIHtcbiAgICBrZXkgPSAnc3RyaW5nJztcbiAgfSBlbHNlIGlmIChhcnIpIHtcbiAgICBrZXkgPSAnYXJyYXknO1xuICB9IC8vIGlmIHRoZSB2YWx1ZSBpcyBub3Qgb2YgYSBzdXBwb3J0ZWQgdHlwZSBmb3IgcmFuZ2UgdmFsaWRhdGlvblxuICAvLyB0aGUgdmFsaWRhdGlvbiBydWxlIHJ1bGUgc2hvdWxkIHVzZSB0aGVcbiAgLy8gdHlwZSBwcm9wZXJ0eSB0byBhbHNvIHRlc3QgZm9yIGEgcGFydGljdWxhciB0eXBlXG5cblxuICBpZiAoIWtleSkge1xuICAgIHJldHVybiBmYWxzZTtcbiAgfVxuXG4gIGlmIChhcnIpIHtcbiAgICB2YWwgPSB2YWx1ZS5sZW5ndGg7XG4gIH1cblxuICBpZiAoc3RyKSB7XG4gICAgLy8g5aSE55CG56CB54K55aSn5LqOVSswMTAwMDDnmoTmloflrZdsZW5ndGjlsZ7mgKfkuI3lh4bnoa7nmoRidWfvvIzlpoJcIvCgrrfwoK638KCut1wiLmxlbmdodCAhPT0gM1xuICAgIHZhbCA9IHZhbHVlLnJlcGxhY2Uoc3BSZWdleHAsICdfJykubGVuZ3RoO1xuICB9XG5cbiAgaWYgKGxlbikge1xuICAgIGlmICh2YWwgIT09IHJ1bGUubGVuKSB7XG4gICAgICBlcnJvcnMucHVzaChmb3JtYXQob3B0aW9ucy5tZXNzYWdlc1trZXldLmxlbiwgcnVsZS5mdWxsRmllbGQsIHJ1bGUubGVuKSk7XG4gICAgfVxuICB9IGVsc2UgaWYgKG1pbiAmJiAhbWF4ICYmIHZhbCA8IHJ1bGUubWluKSB7XG4gICAgZXJyb3JzLnB1c2goZm9ybWF0KG9wdGlvbnMubWVzc2FnZXNba2V5XS5taW4sIHJ1bGUuZnVsbEZpZWxkLCBydWxlLm1pbikpO1xuICB9IGVsc2UgaWYgKG1heCAmJiAhbWluICYmIHZhbCA+IHJ1bGUubWF4KSB7XG4gICAgZXJyb3JzLnB1c2goZm9ybWF0KG9wdGlvbnMubWVzc2FnZXNba2V5XS5tYXgsIHJ1bGUuZnVsbEZpZWxkLCBydWxlLm1heCkpO1xuICB9IGVsc2UgaWYgKG1pbiAmJiBtYXggJiYgKHZhbCA8IHJ1bGUubWluIHx8IHZhbCA+IHJ1bGUubWF4KSkge1xuICAgIGVycm9ycy5wdXNoKGZvcm1hdChvcHRpb25zLm1lc3NhZ2VzW2tleV0ucmFuZ2UsIHJ1bGUuZnVsbEZpZWxkLCBydWxlLm1pbiwgcnVsZS5tYXgpKTtcbiAgfVxufTtcblxudmFyIEVOVU0kMSA9ICdlbnVtJztcblxudmFyIGVudW1lcmFibGUkMSA9IGZ1bmN0aW9uIGVudW1lcmFibGUocnVsZSwgdmFsdWUsIHNvdXJjZSwgZXJyb3JzLCBvcHRpb25zKSB7XG4gIHJ1bGVbRU5VTSQxXSA9IEFycmF5LmlzQXJyYXkocnVsZVtFTlVNJDFdKSA/IHJ1bGVbRU5VTSQxXSA6IFtdO1xuXG4gIGlmIChydWxlW0VOVU0kMV0uaW5kZXhPZih2YWx1ZSkgPT09IC0xKSB7XG4gICAgZXJyb3JzLnB1c2goZm9ybWF0KG9wdGlvbnMubWVzc2FnZXNbRU5VTSQxXSwgcnVsZS5mdWxsRmllbGQsIHJ1bGVbRU5VTSQxXS5qb2luKCcsICcpKSk7XG4gIH1cbn07XG5cbnZhciBwYXR0ZXJuJDEgPSBmdW5jdGlvbiBwYXR0ZXJuKHJ1bGUsIHZhbHVlLCBzb3VyY2UsIGVycm9ycywgb3B0aW9ucykge1xuICBpZiAocnVsZS5wYXR0ZXJuKSB7XG4gICAgaWYgKHJ1bGUucGF0dGVybiBpbnN0YW5jZW9mIFJlZ0V4cCkge1xuICAgICAgLy8gaWYgYSBSZWdFeHAgaW5zdGFuY2UgaXMgcGFzc2VkLCByZXNldCBgbGFzdEluZGV4YCBpbiBjYXNlIGl0cyBgZ2xvYmFsYFxuICAgICAgLy8gZmxhZyBpcyBhY2NpZGVudGFsbHkgc2V0IHRvIGB0cnVlYCwgd2hpY2ggaW4gYSB2YWxpZGF0aW9uIHNjZW5hcmlvXG4gICAgICAvLyBpcyBub3QgbmVjZXNzYXJ5IGFuZCB0aGUgcmVzdWx0IG1pZ2h0IGJlIG1pc2xlYWRpbmdcbiAgICAgIHJ1bGUucGF0dGVybi5sYXN0SW5kZXggPSAwO1xuXG4gICAgICBpZiAoIXJ1bGUucGF0dGVybi50ZXN0KHZhbHVlKSkge1xuICAgICAgICBlcnJvcnMucHVzaChmb3JtYXQob3B0aW9ucy5tZXNzYWdlcy5wYXR0ZXJuLm1pc21hdGNoLCBydWxlLmZ1bGxGaWVsZCwgdmFsdWUsIHJ1bGUucGF0dGVybikpO1xuICAgICAgfVxuICAgIH0gZWxzZSBpZiAodHlwZW9mIHJ1bGUucGF0dGVybiA9PT0gJ3N0cmluZycpIHtcbiAgICAgIHZhciBfcGF0dGVybiA9IG5ldyBSZWdFeHAocnVsZS5wYXR0ZXJuKTtcblxuICAgICAgaWYgKCFfcGF0dGVybi50ZXN0KHZhbHVlKSkge1xuICAgICAgICBlcnJvcnMucHVzaChmb3JtYXQob3B0aW9ucy5tZXNzYWdlcy5wYXR0ZXJuLm1pc21hdGNoLCBydWxlLmZ1bGxGaWVsZCwgdmFsdWUsIHJ1bGUucGF0dGVybikpO1xuICAgICAgfVxuICAgIH1cbiAgfVxufTtcblxudmFyIHJ1bGVzID0ge1xuICByZXF1aXJlZDogcmVxdWlyZWQkMSxcbiAgd2hpdGVzcGFjZTogd2hpdGVzcGFjZSxcbiAgdHlwZTogdHlwZSQxLFxuICByYW5nZTogcmFuZ2UsXG4gIFwiZW51bVwiOiBlbnVtZXJhYmxlJDEsXG4gIHBhdHRlcm46IHBhdHRlcm4kMVxufTtcblxudmFyIHN0cmluZyA9IGZ1bmN0aW9uIHN0cmluZyhydWxlLCB2YWx1ZSwgY2FsbGJhY2ssIHNvdXJjZSwgb3B0aW9ucykge1xuICB2YXIgZXJyb3JzID0gW107XG4gIHZhciB2YWxpZGF0ZSA9IHJ1bGUucmVxdWlyZWQgfHwgIXJ1bGUucmVxdWlyZWQgJiYgc291cmNlLmhhc093blByb3BlcnR5KHJ1bGUuZmllbGQpO1xuXG4gIGlmICh2YWxpZGF0ZSkge1xuICAgIGlmIChpc0VtcHR5VmFsdWUodmFsdWUsICdzdHJpbmcnKSAmJiAhcnVsZS5yZXF1aXJlZCkge1xuICAgICAgcmV0dXJuIGNhbGxiYWNrKCk7XG4gICAgfVxuXG4gICAgcnVsZXMucmVxdWlyZWQocnVsZSwgdmFsdWUsIHNvdXJjZSwgZXJyb3JzLCBvcHRpb25zLCAnc3RyaW5nJyk7XG5cbiAgICBpZiAoIWlzRW1wdHlWYWx1ZSh2YWx1ZSwgJ3N0cmluZycpKSB7XG4gICAgICBydWxlcy50eXBlKHJ1bGUsIHZhbHVlLCBzb3VyY2UsIGVycm9ycywgb3B0aW9ucyk7XG4gICAgICBydWxlcy5yYW5nZShydWxlLCB2YWx1ZSwgc291cmNlLCBlcnJvcnMsIG9wdGlvbnMpO1xuICAgICAgcnVsZXMucGF0dGVybihydWxlLCB2YWx1ZSwgc291cmNlLCBlcnJvcnMsIG9wdGlvbnMpO1xuXG4gICAgICBpZiAocnVsZS53aGl0ZXNwYWNlID09PSB0cnVlKSB7XG4gICAgICAgIHJ1bGVzLndoaXRlc3BhY2UocnVsZSwgdmFsdWUsIHNvdXJjZSwgZXJyb3JzLCBvcHRpb25zKTtcbiAgICAgIH1cbiAgICB9XG4gIH1cblxuICBjYWxsYmFjayhlcnJvcnMpO1xufTtcblxudmFyIG1ldGhvZCA9IGZ1bmN0aW9uIG1ldGhvZChydWxlLCB2YWx1ZSwgY2FsbGJhY2ssIHNvdXJjZSwgb3B0aW9ucykge1xuICB2YXIgZXJyb3JzID0gW107XG4gIHZhciB2YWxpZGF0ZSA9IHJ1bGUucmVxdWlyZWQgfHwgIXJ1bGUucmVxdWlyZWQgJiYgc291cmNlLmhhc093blByb3BlcnR5KHJ1bGUuZmllbGQpO1xuXG4gIGlmICh2YWxpZGF0ZSkge1xuICAgIGlmIChpc0VtcHR5VmFsdWUodmFsdWUpICYmICFydWxlLnJlcXVpcmVkKSB7XG4gICAgICByZXR1cm4gY2FsbGJhY2soKTtcbiAgICB9XG5cbiAgICBydWxlcy5yZXF1aXJlZChydWxlLCB2YWx1ZSwgc291cmNlLCBlcnJvcnMsIG9wdGlvbnMpO1xuXG4gICAgaWYgKHZhbHVlICE9PSB1bmRlZmluZWQpIHtcbiAgICAgIHJ1bGVzLnR5cGUocnVsZSwgdmFsdWUsIHNvdXJjZSwgZXJyb3JzLCBvcHRpb25zKTtcbiAgICB9XG4gIH1cblxuICBjYWxsYmFjayhlcnJvcnMpO1xufTtcblxudmFyIG51bWJlciA9IGZ1bmN0aW9uIG51bWJlcihydWxlLCB2YWx1ZSwgY2FsbGJhY2ssIHNvdXJjZSwgb3B0aW9ucykge1xuICB2YXIgZXJyb3JzID0gW107XG4gIHZhciB2YWxpZGF0ZSA9IHJ1bGUucmVxdWlyZWQgfHwgIXJ1bGUucmVxdWlyZWQgJiYgc291cmNlLmhhc093blByb3BlcnR5KHJ1bGUuZmllbGQpO1xuXG4gIGlmICh2YWxpZGF0ZSkge1xuICAgIGlmICh2YWx1ZSA9PT0gJycpIHtcbiAgICAgIHZhbHVlID0gdW5kZWZpbmVkO1xuICAgIH1cblxuICAgIGlmIChpc0VtcHR5VmFsdWUodmFsdWUpICYmICFydWxlLnJlcXVpcmVkKSB7XG4gICAgICByZXR1cm4gY2FsbGJhY2soKTtcbiAgICB9XG5cbiAgICBydWxlcy5yZXF1aXJlZChydWxlLCB2YWx1ZSwgc291cmNlLCBlcnJvcnMsIG9wdGlvbnMpO1xuXG4gICAgaWYgKHZhbHVlICE9PSB1bmRlZmluZWQpIHtcbiAgICAgIHJ1bGVzLnR5cGUocnVsZSwgdmFsdWUsIHNvdXJjZSwgZXJyb3JzLCBvcHRpb25zKTtcbiAgICAgIHJ1bGVzLnJhbmdlKHJ1bGUsIHZhbHVlLCBzb3VyY2UsIGVycm9ycywgb3B0aW9ucyk7XG4gICAgfVxuICB9XG5cbiAgY2FsbGJhY2soZXJyb3JzKTtcbn07XG5cbnZhciBfYm9vbGVhbiA9IGZ1bmN0aW9uIF9ib29sZWFuKHJ1bGUsIHZhbHVlLCBjYWxsYmFjaywgc291cmNlLCBvcHRpb25zKSB7XG4gIHZhciBlcnJvcnMgPSBbXTtcbiAgdmFyIHZhbGlkYXRlID0gcnVsZS5yZXF1aXJlZCB8fCAhcnVsZS5yZXF1aXJlZCAmJiBzb3VyY2UuaGFzT3duUHJvcGVydHkocnVsZS5maWVsZCk7XG5cbiAgaWYgKHZhbGlkYXRlKSB7XG4gICAgaWYgKGlzRW1wdHlWYWx1ZSh2YWx1ZSkgJiYgIXJ1bGUucmVxdWlyZWQpIHtcbiAgICAgIHJldHVybiBjYWxsYmFjaygpO1xuICAgIH1cblxuICAgIHJ1bGVzLnJlcXVpcmVkKHJ1bGUsIHZhbHVlLCBzb3VyY2UsIGVycm9ycywgb3B0aW9ucyk7XG5cbiAgICBpZiAodmFsdWUgIT09IHVuZGVmaW5lZCkge1xuICAgICAgcnVsZXMudHlwZShydWxlLCB2YWx1ZSwgc291cmNlLCBlcnJvcnMsIG9wdGlvbnMpO1xuICAgIH1cbiAgfVxuXG4gIGNhbGxiYWNrKGVycm9ycyk7XG59O1xuXG52YXIgcmVnZXhwID0gZnVuY3Rpb24gcmVnZXhwKHJ1bGUsIHZhbHVlLCBjYWxsYmFjaywgc291cmNlLCBvcHRpb25zKSB7XG4gIHZhciBlcnJvcnMgPSBbXTtcbiAgdmFyIHZhbGlkYXRlID0gcnVsZS5yZXF1aXJlZCB8fCAhcnVsZS5yZXF1aXJlZCAmJiBzb3VyY2UuaGFzT3duUHJvcGVydHkocnVsZS5maWVsZCk7XG5cbiAgaWYgKHZhbGlkYXRlKSB7XG4gICAgaWYgKGlzRW1wdHlWYWx1ZSh2YWx1ZSkgJiYgIXJ1bGUucmVxdWlyZWQpIHtcbiAgICAgIHJldHVybiBjYWxsYmFjaygpO1xuICAgIH1cblxuICAgIHJ1bGVzLnJlcXVpcmVkKHJ1bGUsIHZhbHVlLCBzb3VyY2UsIGVycm9ycywgb3B0aW9ucyk7XG5cbiAgICBpZiAoIWlzRW1wdHlWYWx1ZSh2YWx1ZSkpIHtcbiAgICAgIHJ1bGVzLnR5cGUocnVsZSwgdmFsdWUsIHNvdXJjZSwgZXJyb3JzLCBvcHRpb25zKTtcbiAgICB9XG4gIH1cblxuICBjYWxsYmFjayhlcnJvcnMpO1xufTtcblxudmFyIGludGVnZXIgPSBmdW5jdGlvbiBpbnRlZ2VyKHJ1bGUsIHZhbHVlLCBjYWxsYmFjaywgc291cmNlLCBvcHRpb25zKSB7XG4gIHZhciBlcnJvcnMgPSBbXTtcbiAgdmFyIHZhbGlkYXRlID0gcnVsZS5yZXF1aXJlZCB8fCAhcnVsZS5yZXF1aXJlZCAmJiBzb3VyY2UuaGFzT3duUHJvcGVydHkocnVsZS5maWVsZCk7XG5cbiAgaWYgKHZhbGlkYXRlKSB7XG4gICAgaWYgKGlzRW1wdHlWYWx1ZSh2YWx1ZSkgJiYgIXJ1bGUucmVxdWlyZWQpIHtcbiAgICAgIHJldHVybiBjYWxsYmFjaygpO1xuICAgIH1cblxuICAgIHJ1bGVzLnJlcXVpcmVkKHJ1bGUsIHZhbHVlLCBzb3VyY2UsIGVycm9ycywgb3B0aW9ucyk7XG5cbiAgICBpZiAodmFsdWUgIT09IHVuZGVmaW5lZCkge1xuICAgICAgcnVsZXMudHlwZShydWxlLCB2YWx1ZSwgc291cmNlLCBlcnJvcnMsIG9wdGlvbnMpO1xuICAgICAgcnVsZXMucmFuZ2UocnVsZSwgdmFsdWUsIHNvdXJjZSwgZXJyb3JzLCBvcHRpb25zKTtcbiAgICB9XG4gIH1cblxuICBjYWxsYmFjayhlcnJvcnMpO1xufTtcblxudmFyIGZsb2F0Rm4gPSBmdW5jdGlvbiBmbG9hdEZuKHJ1bGUsIHZhbHVlLCBjYWxsYmFjaywgc291cmNlLCBvcHRpb25zKSB7XG4gIHZhciBlcnJvcnMgPSBbXTtcbiAgdmFyIHZhbGlkYXRlID0gcnVsZS5yZXF1aXJlZCB8fCAhcnVsZS5yZXF1aXJlZCAmJiBzb3VyY2UuaGFzT3duUHJvcGVydHkocnVsZS5maWVsZCk7XG5cbiAgaWYgKHZhbGlkYXRlKSB7XG4gICAgaWYgKGlzRW1wdHlWYWx1ZSh2YWx1ZSkgJiYgIXJ1bGUucmVxdWlyZWQpIHtcbiAgICAgIHJldHVybiBjYWxsYmFjaygpO1xuICAgIH1cblxuICAgIHJ1bGVzLnJlcXVpcmVkKHJ1bGUsIHZhbHVlLCBzb3VyY2UsIGVycm9ycywgb3B0aW9ucyk7XG5cbiAgICBpZiAodmFsdWUgIT09IHVuZGVmaW5lZCkge1xuICAgICAgcnVsZXMudHlwZShydWxlLCB2YWx1ZSwgc291cmNlLCBlcnJvcnMsIG9wdGlvbnMpO1xuICAgICAgcnVsZXMucmFuZ2UocnVsZSwgdmFsdWUsIHNvdXJjZSwgZXJyb3JzLCBvcHRpb25zKTtcbiAgICB9XG4gIH1cblxuICBjYWxsYmFjayhlcnJvcnMpO1xufTtcblxudmFyIGFycmF5ID0gZnVuY3Rpb24gYXJyYXkocnVsZSwgdmFsdWUsIGNhbGxiYWNrLCBzb3VyY2UsIG9wdGlvbnMpIHtcbiAgdmFyIGVycm9ycyA9IFtdO1xuICB2YXIgdmFsaWRhdGUgPSBydWxlLnJlcXVpcmVkIHx8ICFydWxlLnJlcXVpcmVkICYmIHNvdXJjZS5oYXNPd25Qcm9wZXJ0eShydWxlLmZpZWxkKTtcblxuICBpZiAodmFsaWRhdGUpIHtcbiAgICBpZiAoKHZhbHVlID09PSB1bmRlZmluZWQgfHwgdmFsdWUgPT09IG51bGwpICYmICFydWxlLnJlcXVpcmVkKSB7XG4gICAgICByZXR1cm4gY2FsbGJhY2soKTtcbiAgICB9XG5cbiAgICBydWxlcy5yZXF1aXJlZChydWxlLCB2YWx1ZSwgc291cmNlLCBlcnJvcnMsIG9wdGlvbnMsICdhcnJheScpO1xuXG4gICAgaWYgKHZhbHVlICE9PSB1bmRlZmluZWQgJiYgdmFsdWUgIT09IG51bGwpIHtcbiAgICAgIHJ1bGVzLnR5cGUocnVsZSwgdmFsdWUsIHNvdXJjZSwgZXJyb3JzLCBvcHRpb25zKTtcbiAgICAgIHJ1bGVzLnJhbmdlKHJ1bGUsIHZhbHVlLCBzb3VyY2UsIGVycm9ycywgb3B0aW9ucyk7XG4gICAgfVxuICB9XG5cbiAgY2FsbGJhY2soZXJyb3JzKTtcbn07XG5cbnZhciBvYmplY3QgPSBmdW5jdGlvbiBvYmplY3QocnVsZSwgdmFsdWUsIGNhbGxiYWNrLCBzb3VyY2UsIG9wdGlvbnMpIHtcbiAgdmFyIGVycm9ycyA9IFtdO1xuICB2YXIgdmFsaWRhdGUgPSBydWxlLnJlcXVpcmVkIHx8ICFydWxlLnJlcXVpcmVkICYmIHNvdXJjZS5oYXNPd25Qcm9wZXJ0eShydWxlLmZpZWxkKTtcblxuICBpZiAodmFsaWRhdGUpIHtcbiAgICBpZiAoaXNFbXB0eVZhbHVlKHZhbHVlKSAmJiAhcnVsZS5yZXF1aXJlZCkge1xuICAgICAgcmV0dXJuIGNhbGxiYWNrKCk7XG4gICAgfVxuXG4gICAgcnVsZXMucmVxdWlyZWQocnVsZSwgdmFsdWUsIHNvdXJjZSwgZXJyb3JzLCBvcHRpb25zKTtcblxuICAgIGlmICh2YWx1ZSAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICBydWxlcy50eXBlKHJ1bGUsIHZhbHVlLCBzb3VyY2UsIGVycm9ycywgb3B0aW9ucyk7XG4gICAgfVxuICB9XG5cbiAgY2FsbGJhY2soZXJyb3JzKTtcbn07XG5cbnZhciBFTlVNID0gJ2VudW0nO1xuXG52YXIgZW51bWVyYWJsZSA9IGZ1bmN0aW9uIGVudW1lcmFibGUocnVsZSwgdmFsdWUsIGNhbGxiYWNrLCBzb3VyY2UsIG9wdGlvbnMpIHtcbiAgdmFyIGVycm9ycyA9IFtdO1xuICB2YXIgdmFsaWRhdGUgPSBydWxlLnJlcXVpcmVkIHx8ICFydWxlLnJlcXVpcmVkICYmIHNvdXJjZS5oYXNPd25Qcm9wZXJ0eShydWxlLmZpZWxkKTtcblxuICBpZiAodmFsaWRhdGUpIHtcbiAgICBpZiAoaXNFbXB0eVZhbHVlKHZhbHVlKSAmJiAhcnVsZS5yZXF1aXJlZCkge1xuICAgICAgcmV0dXJuIGNhbGxiYWNrKCk7XG4gICAgfVxuXG4gICAgcnVsZXMucmVxdWlyZWQocnVsZSwgdmFsdWUsIHNvdXJjZSwgZXJyb3JzLCBvcHRpb25zKTtcblxuICAgIGlmICh2YWx1ZSAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICBydWxlc1tFTlVNXShydWxlLCB2YWx1ZSwgc291cmNlLCBlcnJvcnMsIG9wdGlvbnMpO1xuICAgIH1cbiAgfVxuXG4gIGNhbGxiYWNrKGVycm9ycyk7XG59O1xuXG52YXIgcGF0dGVybiA9IGZ1bmN0aW9uIHBhdHRlcm4ocnVsZSwgdmFsdWUsIGNhbGxiYWNrLCBzb3VyY2UsIG9wdGlvbnMpIHtcbiAgdmFyIGVycm9ycyA9IFtdO1xuICB2YXIgdmFsaWRhdGUgPSBydWxlLnJlcXVpcmVkIHx8ICFydWxlLnJlcXVpcmVkICYmIHNvdXJjZS5oYXNPd25Qcm9wZXJ0eShydWxlLmZpZWxkKTtcblxuICBpZiAodmFsaWRhdGUpIHtcbiAgICBpZiAoaXNFbXB0eVZhbHVlKHZhbHVlLCAnc3RyaW5nJykgJiYgIXJ1bGUucmVxdWlyZWQpIHtcbiAgICAgIHJldHVybiBjYWxsYmFjaygpO1xuICAgIH1cblxuICAgIHJ1bGVzLnJlcXVpcmVkKHJ1bGUsIHZhbHVlLCBzb3VyY2UsIGVycm9ycywgb3B0aW9ucyk7XG5cbiAgICBpZiAoIWlzRW1wdHlWYWx1ZSh2YWx1ZSwgJ3N0cmluZycpKSB7XG4gICAgICBydWxlcy5wYXR0ZXJuKHJ1bGUsIHZhbHVlLCBzb3VyY2UsIGVycm9ycywgb3B0aW9ucyk7XG4gICAgfVxuICB9XG5cbiAgY2FsbGJhY2soZXJyb3JzKTtcbn07XG5cbnZhciBkYXRlID0gZnVuY3Rpb24gZGF0ZShydWxlLCB2YWx1ZSwgY2FsbGJhY2ssIHNvdXJjZSwgb3B0aW9ucykge1xuICAvLyBjb25zb2xlLmxvZygnaW50ZWdlciBydWxlIGNhbGxlZCAlaicsIHJ1bGUpO1xuICB2YXIgZXJyb3JzID0gW107XG4gIHZhciB2YWxpZGF0ZSA9IHJ1bGUucmVxdWlyZWQgfHwgIXJ1bGUucmVxdWlyZWQgJiYgc291cmNlLmhhc093blByb3BlcnR5KHJ1bGUuZmllbGQpOyAvLyBjb25zb2xlLmxvZygndmFsaWRhdGUgb24gJXMgdmFsdWUnLCB2YWx1ZSk7XG5cbiAgaWYgKHZhbGlkYXRlKSB7XG4gICAgaWYgKGlzRW1wdHlWYWx1ZSh2YWx1ZSwgJ2RhdGUnKSAmJiAhcnVsZS5yZXF1aXJlZCkge1xuICAgICAgcmV0dXJuIGNhbGxiYWNrKCk7XG4gICAgfVxuXG4gICAgcnVsZXMucmVxdWlyZWQocnVsZSwgdmFsdWUsIHNvdXJjZSwgZXJyb3JzLCBvcHRpb25zKTtcblxuICAgIGlmICghaXNFbXB0eVZhbHVlKHZhbHVlLCAnZGF0ZScpKSB7XG4gICAgICB2YXIgZGF0ZU9iamVjdDtcblxuICAgICAgaWYgKHZhbHVlIGluc3RhbmNlb2YgRGF0ZSkge1xuICAgICAgICBkYXRlT2JqZWN0ID0gdmFsdWU7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBkYXRlT2JqZWN0ID0gbmV3IERhdGUodmFsdWUpO1xuICAgICAgfVxuXG4gICAgICBydWxlcy50eXBlKHJ1bGUsIGRhdGVPYmplY3QsIHNvdXJjZSwgZXJyb3JzLCBvcHRpb25zKTtcblxuICAgICAgaWYgKGRhdGVPYmplY3QpIHtcbiAgICAgICAgcnVsZXMucmFuZ2UocnVsZSwgZGF0ZU9iamVjdC5nZXRUaW1lKCksIHNvdXJjZSwgZXJyb3JzLCBvcHRpb25zKTtcbiAgICAgIH1cbiAgICB9XG4gIH1cblxuICBjYWxsYmFjayhlcnJvcnMpO1xufTtcblxudmFyIHJlcXVpcmVkID0gZnVuY3Rpb24gcmVxdWlyZWQocnVsZSwgdmFsdWUsIGNhbGxiYWNrLCBzb3VyY2UsIG9wdGlvbnMpIHtcbiAgdmFyIGVycm9ycyA9IFtdO1xuICB2YXIgdHlwZSA9IEFycmF5LmlzQXJyYXkodmFsdWUpID8gJ2FycmF5JyA6IHR5cGVvZiB2YWx1ZTtcbiAgcnVsZXMucmVxdWlyZWQocnVsZSwgdmFsdWUsIHNvdXJjZSwgZXJyb3JzLCBvcHRpb25zLCB0eXBlKTtcbiAgY2FsbGJhY2soZXJyb3JzKTtcbn07XG5cbnZhciB0eXBlID0gZnVuY3Rpb24gdHlwZShydWxlLCB2YWx1ZSwgY2FsbGJhY2ssIHNvdXJjZSwgb3B0aW9ucykge1xuICB2YXIgcnVsZVR5cGUgPSBydWxlLnR5cGU7XG4gIHZhciBlcnJvcnMgPSBbXTtcbiAgdmFyIHZhbGlkYXRlID0gcnVsZS5yZXF1aXJlZCB8fCAhcnVsZS5yZXF1aXJlZCAmJiBzb3VyY2UuaGFzT3duUHJvcGVydHkocnVsZS5maWVsZCk7XG5cbiAgaWYgKHZhbGlkYXRlKSB7XG4gICAgaWYgKGlzRW1wdHlWYWx1ZSh2YWx1ZSwgcnVsZVR5cGUpICYmICFydWxlLnJlcXVpcmVkKSB7XG4gICAgICByZXR1cm4gY2FsbGJhY2soKTtcbiAgICB9XG5cbiAgICBydWxlcy5yZXF1aXJlZChydWxlLCB2YWx1ZSwgc291cmNlLCBlcnJvcnMsIG9wdGlvbnMsIHJ1bGVUeXBlKTtcblxuICAgIGlmICghaXNFbXB0eVZhbHVlKHZhbHVlLCBydWxlVHlwZSkpIHtcbiAgICAgIHJ1bGVzLnR5cGUocnVsZSwgdmFsdWUsIHNvdXJjZSwgZXJyb3JzLCBvcHRpb25zKTtcbiAgICB9XG4gIH1cblxuICBjYWxsYmFjayhlcnJvcnMpO1xufTtcblxudmFyIGFueSA9IGZ1bmN0aW9uIGFueShydWxlLCB2YWx1ZSwgY2FsbGJhY2ssIHNvdXJjZSwgb3B0aW9ucykge1xuICB2YXIgZXJyb3JzID0gW107XG4gIHZhciB2YWxpZGF0ZSA9IHJ1bGUucmVxdWlyZWQgfHwgIXJ1bGUucmVxdWlyZWQgJiYgc291cmNlLmhhc093blByb3BlcnR5KHJ1bGUuZmllbGQpO1xuXG4gIGlmICh2YWxpZGF0ZSkge1xuICAgIGlmIChpc0VtcHR5VmFsdWUodmFsdWUpICYmICFydWxlLnJlcXVpcmVkKSB7XG4gICAgICByZXR1cm4gY2FsbGJhY2soKTtcbiAgICB9XG5cbiAgICBydWxlcy5yZXF1aXJlZChydWxlLCB2YWx1ZSwgc291cmNlLCBlcnJvcnMsIG9wdGlvbnMpO1xuICB9XG5cbiAgY2FsbGJhY2soZXJyb3JzKTtcbn07XG5cbnZhciB2YWxpZGF0b3JzID0ge1xuICBzdHJpbmc6IHN0cmluZyxcbiAgbWV0aG9kOiBtZXRob2QsXG4gIG51bWJlcjogbnVtYmVyLFxuICBcImJvb2xlYW5cIjogX2Jvb2xlYW4sXG4gIHJlZ2V4cDogcmVnZXhwLFxuICBpbnRlZ2VyOiBpbnRlZ2VyLFxuICBcImZsb2F0XCI6IGZsb2F0Rm4sXG4gIGFycmF5OiBhcnJheSxcbiAgb2JqZWN0OiBvYmplY3QsXG4gIFwiZW51bVwiOiBlbnVtZXJhYmxlLFxuICBwYXR0ZXJuOiBwYXR0ZXJuLFxuICBkYXRlOiBkYXRlLFxuICB1cmw6IHR5cGUsXG4gIGhleDogdHlwZSxcbiAgZW1haWw6IHR5cGUsXG4gIHJlcXVpcmVkOiByZXF1aXJlZCxcbiAgYW55OiBhbnlcbn07XG5cbmZ1bmN0aW9uIG5ld01lc3NhZ2VzKCkge1xuICByZXR1cm4ge1xuICAgIFwiZGVmYXVsdFwiOiAnVmFsaWRhdGlvbiBlcnJvciBvbiBmaWVsZCAlcycsXG4gICAgcmVxdWlyZWQ6ICclcyBpcyByZXF1aXJlZCcsXG4gICAgXCJlbnVtXCI6ICclcyBtdXN0IGJlIG9uZSBvZiAlcycsXG4gICAgd2hpdGVzcGFjZTogJyVzIGNhbm5vdCBiZSBlbXB0eScsXG4gICAgZGF0ZToge1xuICAgICAgZm9ybWF0OiAnJXMgZGF0ZSAlcyBpcyBpbnZhbGlkIGZvciBmb3JtYXQgJXMnLFxuICAgICAgcGFyc2U6ICclcyBkYXRlIGNvdWxkIG5vdCBiZSBwYXJzZWQsICVzIGlzIGludmFsaWQgJyxcbiAgICAgIGludmFsaWQ6ICclcyBkYXRlICVzIGlzIGludmFsaWQnXG4gICAgfSxcbiAgICB0eXBlczoge1xuICAgICAgc3RyaW5nOiAnJXMgaXMgbm90IGEgJXMnLFxuICAgICAgbWV0aG9kOiAnJXMgaXMgbm90IGEgJXMgKGZ1bmN0aW9uKScsXG4gICAgICBhcnJheTogJyVzIGlzIG5vdCBhbiAlcycsXG4gICAgICBvYmplY3Q6ICclcyBpcyBub3QgYW4gJXMnLFxuICAgICAgbnVtYmVyOiAnJXMgaXMgbm90IGEgJXMnLFxuICAgICAgZGF0ZTogJyVzIGlzIG5vdCBhICVzJyxcbiAgICAgIFwiYm9vbGVhblwiOiAnJXMgaXMgbm90IGEgJXMnLFxuICAgICAgaW50ZWdlcjogJyVzIGlzIG5vdCBhbiAlcycsXG4gICAgICBcImZsb2F0XCI6ICclcyBpcyBub3QgYSAlcycsXG4gICAgICByZWdleHA6ICclcyBpcyBub3QgYSB2YWxpZCAlcycsXG4gICAgICBlbWFpbDogJyVzIGlzIG5vdCBhIHZhbGlkICVzJyxcbiAgICAgIHVybDogJyVzIGlzIG5vdCBhIHZhbGlkICVzJyxcbiAgICAgIGhleDogJyVzIGlzIG5vdCBhIHZhbGlkICVzJ1xuICAgIH0sXG4gICAgc3RyaW5nOiB7XG4gICAgICBsZW46ICclcyBtdXN0IGJlIGV4YWN0bHkgJXMgY2hhcmFjdGVycycsXG4gICAgICBtaW46ICclcyBtdXN0IGJlIGF0IGxlYXN0ICVzIGNoYXJhY3RlcnMnLFxuICAgICAgbWF4OiAnJXMgY2Fubm90IGJlIGxvbmdlciB0aGFuICVzIGNoYXJhY3RlcnMnLFxuICAgICAgcmFuZ2U6ICclcyBtdXN0IGJlIGJldHdlZW4gJXMgYW5kICVzIGNoYXJhY3RlcnMnXG4gICAgfSxcbiAgICBudW1iZXI6IHtcbiAgICAgIGxlbjogJyVzIG11c3QgZXF1YWwgJXMnLFxuICAgICAgbWluOiAnJXMgY2Fubm90IGJlIGxlc3MgdGhhbiAlcycsXG4gICAgICBtYXg6ICclcyBjYW5ub3QgYmUgZ3JlYXRlciB0aGFuICVzJyxcbiAgICAgIHJhbmdlOiAnJXMgbXVzdCBiZSBiZXR3ZWVuICVzIGFuZCAlcydcbiAgICB9LFxuICAgIGFycmF5OiB7XG4gICAgICBsZW46ICclcyBtdXN0IGJlIGV4YWN0bHkgJXMgaW4gbGVuZ3RoJyxcbiAgICAgIG1pbjogJyVzIGNhbm5vdCBiZSBsZXNzIHRoYW4gJXMgaW4gbGVuZ3RoJyxcbiAgICAgIG1heDogJyVzIGNhbm5vdCBiZSBncmVhdGVyIHRoYW4gJXMgaW4gbGVuZ3RoJyxcbiAgICAgIHJhbmdlOiAnJXMgbXVzdCBiZSBiZXR3ZWVuICVzIGFuZCAlcyBpbiBsZW5ndGgnXG4gICAgfSxcbiAgICBwYXR0ZXJuOiB7XG4gICAgICBtaXNtYXRjaDogJyVzIHZhbHVlICVzIGRvZXMgbm90IG1hdGNoIHBhdHRlcm4gJXMnXG4gICAgfSxcbiAgICBjbG9uZTogZnVuY3Rpb24gY2xvbmUoKSB7XG4gICAgICB2YXIgY2xvbmVkID0gSlNPTi5wYXJzZShKU09OLnN0cmluZ2lmeSh0aGlzKSk7XG4gICAgICBjbG9uZWQuY2xvbmUgPSB0aGlzLmNsb25lO1xuICAgICAgcmV0dXJuIGNsb25lZDtcbiAgICB9XG4gIH07XG59XG52YXIgbWVzc2FnZXMgPSBuZXdNZXNzYWdlcygpO1xuXG4vKipcbiAqICBFbmNhcHN1bGF0ZXMgYSB2YWxpZGF0aW9uIHNjaGVtYS5cbiAqXG4gKiAgQHBhcmFtIGRlc2NyaXB0b3IgQW4gb2JqZWN0IGRlY2xhcmluZyB2YWxpZGF0aW9uIHJ1bGVzXG4gKiAgZm9yIHRoaXMgc2NoZW1hLlxuICovXG5cbnZhciBTY2hlbWEgPSAvKiNfX1BVUkVfXyovZnVuY3Rpb24gKCkge1xuICAvLyA9PT09PT09PT09PT09PT09PT09PT09PT09IFN0YXRpYyA9PT09PT09PT09PT09PT09PT09PT09PT09XG4gIC8vID09PT09PT09PT09PT09PT09PT09PT09PSBJbnN0YW5jZSA9PT09PT09PT09PT09PT09PT09PT09PT1cbiAgZnVuY3Rpb24gU2NoZW1hKGRlc2NyaXB0b3IpIHtcbiAgICB0aGlzLnJ1bGVzID0gbnVsbDtcbiAgICB0aGlzLl9tZXNzYWdlcyA9IG1lc3NhZ2VzO1xuICAgIHRoaXMuZGVmaW5lKGRlc2NyaXB0b3IpO1xuICB9XG5cbiAgdmFyIF9wcm90byA9IFNjaGVtYS5wcm90b3R5cGU7XG5cbiAgX3Byb3RvLmRlZmluZSA9IGZ1bmN0aW9uIGRlZmluZShydWxlcykge1xuICAgIHZhciBfdGhpcyA9IHRoaXM7XG5cbiAgICBpZiAoIXJ1bGVzKSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoJ0Nhbm5vdCBjb25maWd1cmUgYSBzY2hlbWEgd2l0aCBubyBydWxlcycpO1xuICAgIH1cblxuICAgIGlmICh0eXBlb2YgcnVsZXMgIT09ICdvYmplY3QnIHx8IEFycmF5LmlzQXJyYXkocnVsZXMpKSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoJ1J1bGVzIG11c3QgYmUgYW4gb2JqZWN0Jyk7XG4gICAgfVxuXG4gICAgdGhpcy5ydWxlcyA9IHt9O1xuICAgIE9iamVjdC5rZXlzKHJ1bGVzKS5mb3JFYWNoKGZ1bmN0aW9uIChuYW1lKSB7XG4gICAgICB2YXIgaXRlbSA9IHJ1bGVzW25hbWVdO1xuICAgICAgX3RoaXMucnVsZXNbbmFtZV0gPSBBcnJheS5pc0FycmF5KGl0ZW0pID8gaXRlbSA6IFtpdGVtXTtcbiAgICB9KTtcbiAgfTtcblxuICBfcHJvdG8ubWVzc2FnZXMgPSBmdW5jdGlvbiBtZXNzYWdlcyhfbWVzc2FnZXMpIHtcbiAgICBpZiAoX21lc3NhZ2VzKSB7XG4gICAgICB0aGlzLl9tZXNzYWdlcyA9IGRlZXBNZXJnZShuZXdNZXNzYWdlcygpLCBfbWVzc2FnZXMpO1xuICAgIH1cblxuICAgIHJldHVybiB0aGlzLl9tZXNzYWdlcztcbiAgfTtcblxuICBfcHJvdG8udmFsaWRhdGUgPSBmdW5jdGlvbiB2YWxpZGF0ZShzb3VyY2VfLCBvLCBvYykge1xuICAgIHZhciBfdGhpczIgPSB0aGlzO1xuXG4gICAgaWYgKG8gPT09IHZvaWQgMCkge1xuICAgICAgbyA9IHt9O1xuICAgIH1cblxuICAgIGlmIChvYyA9PT0gdm9pZCAwKSB7XG4gICAgICBvYyA9IGZ1bmN0aW9uIG9jKCkge307XG4gICAgfVxuXG4gICAgdmFyIHNvdXJjZSA9IHNvdXJjZV87XG4gICAgdmFyIG9wdGlvbnMgPSBvO1xuICAgIHZhciBjYWxsYmFjayA9IG9jO1xuXG4gICAgaWYgKHR5cGVvZiBvcHRpb25zID09PSAnZnVuY3Rpb24nKSB7XG4gICAgICBjYWxsYmFjayA9IG9wdGlvbnM7XG4gICAgICBvcHRpb25zID0ge307XG4gICAgfVxuXG4gICAgaWYgKCF0aGlzLnJ1bGVzIHx8IE9iamVjdC5rZXlzKHRoaXMucnVsZXMpLmxlbmd0aCA9PT0gMCkge1xuICAgICAgaWYgKGNhbGxiYWNrKSB7XG4gICAgICAgIGNhbGxiYWNrKG51bGwsIHNvdXJjZSk7XG4gICAgICB9XG5cbiAgICAgIHJldHVybiBQcm9taXNlLnJlc29sdmUoc291cmNlKTtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBjb21wbGV0ZShyZXN1bHRzKSB7XG4gICAgICB2YXIgZXJyb3JzID0gW107XG4gICAgICB2YXIgZmllbGRzID0ge307XG5cbiAgICAgIGZ1bmN0aW9uIGFkZChlKSB7XG4gICAgICAgIGlmIChBcnJheS5pc0FycmF5KGUpKSB7XG4gICAgICAgICAgdmFyIF9lcnJvcnM7XG5cbiAgICAgICAgICBlcnJvcnMgPSAoX2Vycm9ycyA9IGVycm9ycykuY29uY2F0LmFwcGx5KF9lcnJvcnMsIGUpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIGVycm9ycy5wdXNoKGUpO1xuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgcmVzdWx0cy5sZW5ndGg7IGkrKykge1xuICAgICAgICBhZGQocmVzdWx0c1tpXSk7XG4gICAgICB9XG5cbiAgICAgIGlmICghZXJyb3JzLmxlbmd0aCkge1xuICAgICAgICBjYWxsYmFjayhudWxsLCBzb3VyY2UpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgZmllbGRzID0gY29udmVydEZpZWxkc0Vycm9yKGVycm9ycyk7XG4gICAgICAgIGNhbGxiYWNrKGVycm9ycywgZmllbGRzKTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICBpZiAob3B0aW9ucy5tZXNzYWdlcykge1xuICAgICAgdmFyIG1lc3NhZ2VzJDEgPSB0aGlzLm1lc3NhZ2VzKCk7XG5cbiAgICAgIGlmIChtZXNzYWdlcyQxID09PSBtZXNzYWdlcykge1xuICAgICAgICBtZXNzYWdlcyQxID0gbmV3TWVzc2FnZXMoKTtcbiAgICAgIH1cblxuICAgICAgZGVlcE1lcmdlKG1lc3NhZ2VzJDEsIG9wdGlvbnMubWVzc2FnZXMpO1xuICAgICAgb3B0aW9ucy5tZXNzYWdlcyA9IG1lc3NhZ2VzJDE7XG4gICAgfSBlbHNlIHtcbiAgICAgIG9wdGlvbnMubWVzc2FnZXMgPSB0aGlzLm1lc3NhZ2VzKCk7XG4gICAgfVxuXG4gICAgdmFyIHNlcmllcyA9IHt9O1xuICAgIHZhciBrZXlzID0gb3B0aW9ucy5rZXlzIHx8IE9iamVjdC5rZXlzKHRoaXMucnVsZXMpO1xuICAgIGtleXMuZm9yRWFjaChmdW5jdGlvbiAoeikge1xuICAgICAgdmFyIGFyciA9IF90aGlzMi5ydWxlc1t6XTtcbiAgICAgIHZhciB2YWx1ZSA9IHNvdXJjZVt6XTtcbiAgICAgIGFyci5mb3JFYWNoKGZ1bmN0aW9uIChyKSB7XG4gICAgICAgIHZhciBydWxlID0gcjtcblxuICAgICAgICBpZiAodHlwZW9mIHJ1bGUudHJhbnNmb3JtID09PSAnZnVuY3Rpb24nKSB7XG4gICAgICAgICAgaWYgKHNvdXJjZSA9PT0gc291cmNlXykge1xuICAgICAgICAgICAgc291cmNlID0gX2V4dGVuZHMoe30sIHNvdXJjZSk7XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgdmFsdWUgPSBzb3VyY2Vbel0gPSBydWxlLnRyYW5zZm9ybSh2YWx1ZSk7XG4gICAgICAgIH1cblxuICAgICAgICBpZiAodHlwZW9mIHJ1bGUgPT09ICdmdW5jdGlvbicpIHtcbiAgICAgICAgICBydWxlID0ge1xuICAgICAgICAgICAgdmFsaWRhdG9yOiBydWxlXG4gICAgICAgICAgfTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBydWxlID0gX2V4dGVuZHMoe30sIHJ1bGUpO1xuICAgICAgICB9IC8vIEZpbGwgdmFsaWRhdG9yLiBTa2lwIGlmIG5vdGhpbmcgbmVlZCB0byB2YWxpZGF0ZVxuXG5cbiAgICAgICAgcnVsZS52YWxpZGF0b3IgPSBfdGhpczIuZ2V0VmFsaWRhdGlvbk1ldGhvZChydWxlKTtcblxuICAgICAgICBpZiAoIXJ1bGUudmFsaWRhdG9yKSB7XG4gICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG5cbiAgICAgICAgcnVsZS5maWVsZCA9IHo7XG4gICAgICAgIHJ1bGUuZnVsbEZpZWxkID0gcnVsZS5mdWxsRmllbGQgfHwgejtcbiAgICAgICAgcnVsZS50eXBlID0gX3RoaXMyLmdldFR5cGUocnVsZSk7XG4gICAgICAgIHNlcmllc1t6XSA9IHNlcmllc1t6XSB8fCBbXTtcbiAgICAgICAgc2VyaWVzW3pdLnB1c2goe1xuICAgICAgICAgIHJ1bGU6IHJ1bGUsXG4gICAgICAgICAgdmFsdWU6IHZhbHVlLFxuICAgICAgICAgIHNvdXJjZTogc291cmNlLFxuICAgICAgICAgIGZpZWxkOiB6XG4gICAgICAgIH0pO1xuICAgICAgfSk7XG4gICAgfSk7XG4gICAgdmFyIGVycm9yRmllbGRzID0ge307XG4gICAgcmV0dXJuIGFzeW5jTWFwKHNlcmllcywgb3B0aW9ucywgZnVuY3Rpb24gKGRhdGEsIGRvSXQpIHtcbiAgICAgIHZhciBydWxlID0gZGF0YS5ydWxlO1xuICAgICAgdmFyIGRlZXAgPSAocnVsZS50eXBlID09PSAnb2JqZWN0JyB8fCBydWxlLnR5cGUgPT09ICdhcnJheScpICYmICh0eXBlb2YgcnVsZS5maWVsZHMgPT09ICdvYmplY3QnIHx8IHR5cGVvZiBydWxlLmRlZmF1bHRGaWVsZCA9PT0gJ29iamVjdCcpO1xuICAgICAgZGVlcCA9IGRlZXAgJiYgKHJ1bGUucmVxdWlyZWQgfHwgIXJ1bGUucmVxdWlyZWQgJiYgZGF0YS52YWx1ZSk7XG4gICAgICBydWxlLmZpZWxkID0gZGF0YS5maWVsZDtcblxuICAgICAgZnVuY3Rpb24gYWRkRnVsbEZpZWxkKGtleSwgc2NoZW1hKSB7XG4gICAgICAgIHJldHVybiBfZXh0ZW5kcyh7fSwgc2NoZW1hLCB7XG4gICAgICAgICAgZnVsbEZpZWxkOiBydWxlLmZ1bGxGaWVsZCArIFwiLlwiICsga2V5LFxuICAgICAgICAgIGZ1bGxGaWVsZHM6IHJ1bGUuZnVsbEZpZWxkcyA/IFtdLmNvbmNhdChydWxlLmZ1bGxGaWVsZHMsIFtrZXldKSA6IFtrZXldXG4gICAgICAgIH0pO1xuICAgICAgfVxuXG4gICAgICBmdW5jdGlvbiBjYihlKSB7XG4gICAgICAgIGlmIChlID09PSB2b2lkIDApIHtcbiAgICAgICAgICBlID0gW107XG4gICAgICAgIH1cblxuICAgICAgICB2YXIgZXJyb3JMaXN0ID0gQXJyYXkuaXNBcnJheShlKSA/IGUgOiBbZV07XG5cbiAgICAgICAgaWYgKCFvcHRpb25zLnN1cHByZXNzV2FybmluZyAmJiBlcnJvckxpc3QubGVuZ3RoKSB7XG4gICAgICAgICAgU2NoZW1hLndhcm5pbmcoJ2FzeW5jLXZhbGlkYXRvcjonLCBlcnJvckxpc3QpO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKGVycm9yTGlzdC5sZW5ndGggJiYgcnVsZS5tZXNzYWdlICE9PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICBlcnJvckxpc3QgPSBbXS5jb25jYXQocnVsZS5tZXNzYWdlKTtcbiAgICAgICAgfSAvLyBGaWxsIGVycm9yIGluZm9cblxuXG4gICAgICAgIHZhciBmaWxsZWRFcnJvcnMgPSBlcnJvckxpc3QubWFwKGNvbXBsZW1lbnRFcnJvcihydWxlLCBzb3VyY2UpKTtcblxuICAgICAgICBpZiAob3B0aW9ucy5maXJzdCAmJiBmaWxsZWRFcnJvcnMubGVuZ3RoKSB7XG4gICAgICAgICAgZXJyb3JGaWVsZHNbcnVsZS5maWVsZF0gPSAxO1xuICAgICAgICAgIHJldHVybiBkb0l0KGZpbGxlZEVycm9ycyk7XG4gICAgICAgIH1cblxuICAgICAgICBpZiAoIWRlZXApIHtcbiAgICAgICAgICBkb0l0KGZpbGxlZEVycm9ycyk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgLy8gaWYgcnVsZSBpcyByZXF1aXJlZCBidXQgdGhlIHRhcmdldCBvYmplY3RcbiAgICAgICAgICAvLyBkb2VzIG5vdCBleGlzdCBmYWlsIGF0IHRoZSBydWxlIGxldmVsIGFuZCBkb24ndFxuICAgICAgICAgIC8vIGdvIGRlZXBlclxuICAgICAgICAgIGlmIChydWxlLnJlcXVpcmVkICYmICFkYXRhLnZhbHVlKSB7XG4gICAgICAgICAgICBpZiAocnVsZS5tZXNzYWdlICE9PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgICAgZmlsbGVkRXJyb3JzID0gW10uY29uY2F0KHJ1bGUubWVzc2FnZSkubWFwKGNvbXBsZW1lbnRFcnJvcihydWxlLCBzb3VyY2UpKTtcbiAgICAgICAgICAgIH0gZWxzZSBpZiAob3B0aW9ucy5lcnJvcikge1xuICAgICAgICAgICAgICBmaWxsZWRFcnJvcnMgPSBbb3B0aW9ucy5lcnJvcihydWxlLCBmb3JtYXQob3B0aW9ucy5tZXNzYWdlcy5yZXF1aXJlZCwgcnVsZS5maWVsZCkpXTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgcmV0dXJuIGRvSXQoZmlsbGVkRXJyb3JzKTtcbiAgICAgICAgICB9XG5cbiAgICAgICAgICB2YXIgZmllbGRzU2NoZW1hID0ge307XG5cbiAgICAgICAgICBpZiAocnVsZS5kZWZhdWx0RmllbGQpIHtcbiAgICAgICAgICAgIE9iamVjdC5rZXlzKGRhdGEudmFsdWUpLm1hcChmdW5jdGlvbiAoa2V5KSB7XG4gICAgICAgICAgICAgIGZpZWxkc1NjaGVtYVtrZXldID0gcnVsZS5kZWZhdWx0RmllbGQ7XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgICB9XG5cbiAgICAgICAgICBmaWVsZHNTY2hlbWEgPSBfZXh0ZW5kcyh7fSwgZmllbGRzU2NoZW1hLCBkYXRhLnJ1bGUuZmllbGRzKTtcbiAgICAgICAgICB2YXIgcGFyZWRGaWVsZHNTY2hlbWEgPSB7fTtcbiAgICAgICAgICBPYmplY3Qua2V5cyhmaWVsZHNTY2hlbWEpLmZvckVhY2goZnVuY3Rpb24gKGZpZWxkKSB7XG4gICAgICAgICAgICB2YXIgZmllbGRTY2hlbWEgPSBmaWVsZHNTY2hlbWFbZmllbGRdO1xuICAgICAgICAgICAgdmFyIGZpZWxkU2NoZW1hTGlzdCA9IEFycmF5LmlzQXJyYXkoZmllbGRTY2hlbWEpID8gZmllbGRTY2hlbWEgOiBbZmllbGRTY2hlbWFdO1xuICAgICAgICAgICAgcGFyZWRGaWVsZHNTY2hlbWFbZmllbGRdID0gZmllbGRTY2hlbWFMaXN0Lm1hcChhZGRGdWxsRmllbGQuYmluZChudWxsLCBmaWVsZCkpO1xuICAgICAgICAgIH0pO1xuICAgICAgICAgIHZhciBzY2hlbWEgPSBuZXcgU2NoZW1hKHBhcmVkRmllbGRzU2NoZW1hKTtcbiAgICAgICAgICBzY2hlbWEubWVzc2FnZXMob3B0aW9ucy5tZXNzYWdlcyk7XG5cbiAgICAgICAgICBpZiAoZGF0YS5ydWxlLm9wdGlvbnMpIHtcbiAgICAgICAgICAgIGRhdGEucnVsZS5vcHRpb25zLm1lc3NhZ2VzID0gb3B0aW9ucy5tZXNzYWdlcztcbiAgICAgICAgICAgIGRhdGEucnVsZS5vcHRpb25zLmVycm9yID0gb3B0aW9ucy5lcnJvcjtcbiAgICAgICAgICB9XG5cbiAgICAgICAgICBzY2hlbWEudmFsaWRhdGUoZGF0YS52YWx1ZSwgZGF0YS5ydWxlLm9wdGlvbnMgfHwgb3B0aW9ucywgZnVuY3Rpb24gKGVycnMpIHtcbiAgICAgICAgICAgIHZhciBmaW5hbEVycm9ycyA9IFtdO1xuXG4gICAgICAgICAgICBpZiAoZmlsbGVkRXJyb3JzICYmIGZpbGxlZEVycm9ycy5sZW5ndGgpIHtcbiAgICAgICAgICAgICAgZmluYWxFcnJvcnMucHVzaC5hcHBseShmaW5hbEVycm9ycywgZmlsbGVkRXJyb3JzKTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgaWYgKGVycnMgJiYgZXJycy5sZW5ndGgpIHtcbiAgICAgICAgICAgICAgZmluYWxFcnJvcnMucHVzaC5hcHBseShmaW5hbEVycm9ycywgZXJycyk7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIGRvSXQoZmluYWxFcnJvcnMubGVuZ3RoID8gZmluYWxFcnJvcnMgOiBudWxsKTtcbiAgICAgICAgICB9KTtcbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICB2YXIgcmVzO1xuXG4gICAgICBpZiAocnVsZS5hc3luY1ZhbGlkYXRvcikge1xuICAgICAgICByZXMgPSBydWxlLmFzeW5jVmFsaWRhdG9yKHJ1bGUsIGRhdGEudmFsdWUsIGNiLCBkYXRhLnNvdXJjZSwgb3B0aW9ucyk7XG4gICAgICB9IGVsc2UgaWYgKHJ1bGUudmFsaWRhdG9yKSB7XG4gICAgICAgIHRyeSB7XG4gICAgICAgICAgcmVzID0gcnVsZS52YWxpZGF0b3IocnVsZSwgZGF0YS52YWx1ZSwgY2IsIGRhdGEuc291cmNlLCBvcHRpb25zKTtcbiAgICAgICAgfSBjYXRjaCAoZXJyb3IpIHtcbiAgICAgICAgICBjb25zb2xlLmVycm9yID09IG51bGwgPyB2b2lkIDAgOiBjb25zb2xlLmVycm9yKGVycm9yKTsgLy8gcmV0aHJvdyB0byByZXBvcnQgZXJyb3JcblxuICAgICAgICAgIGlmICghb3B0aW9ucy5zdXBwcmVzc1ZhbGlkYXRvckVycm9yKSB7XG4gICAgICAgICAgICBzZXRUaW1lb3V0KGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICAgdGhyb3cgZXJyb3I7XG4gICAgICAgICAgICB9LCAwKTtcbiAgICAgICAgICB9XG5cbiAgICAgICAgICBjYihlcnJvci5tZXNzYWdlKTtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmIChyZXMgPT09IHRydWUpIHtcbiAgICAgICAgICBjYigpO1xuICAgICAgICB9IGVsc2UgaWYgKHJlcyA9PT0gZmFsc2UpIHtcbiAgICAgICAgICBjYih0eXBlb2YgcnVsZS5tZXNzYWdlID09PSAnZnVuY3Rpb24nID8gcnVsZS5tZXNzYWdlKHJ1bGUuZnVsbEZpZWxkIHx8IHJ1bGUuZmllbGQpIDogcnVsZS5tZXNzYWdlIHx8IChydWxlLmZ1bGxGaWVsZCB8fCBydWxlLmZpZWxkKSArIFwiIGZhaWxzXCIpO1xuICAgICAgICB9IGVsc2UgaWYgKHJlcyBpbnN0YW5jZW9mIEFycmF5KSB7XG4gICAgICAgICAgY2IocmVzKTtcbiAgICAgICAgfSBlbHNlIGlmIChyZXMgaW5zdGFuY2VvZiBFcnJvcikge1xuICAgICAgICAgIGNiKHJlcy5tZXNzYWdlKTtcbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICBpZiAocmVzICYmIHJlcy50aGVuKSB7XG4gICAgICAgIHJlcy50aGVuKGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICByZXR1cm4gY2IoKTtcbiAgICAgICAgfSwgZnVuY3Rpb24gKGUpIHtcbiAgICAgICAgICByZXR1cm4gY2IoZSk7XG4gICAgICAgIH0pO1xuICAgICAgfVxuICAgIH0sIGZ1bmN0aW9uIChyZXN1bHRzKSB7XG4gICAgICBjb21wbGV0ZShyZXN1bHRzKTtcbiAgICB9LCBzb3VyY2UpO1xuICB9O1xuXG4gIF9wcm90by5nZXRUeXBlID0gZnVuY3Rpb24gZ2V0VHlwZShydWxlKSB7XG4gICAgaWYgKHJ1bGUudHlwZSA9PT0gdW5kZWZpbmVkICYmIHJ1bGUucGF0dGVybiBpbnN0YW5jZW9mIFJlZ0V4cCkge1xuICAgICAgcnVsZS50eXBlID0gJ3BhdHRlcm4nO1xuICAgIH1cblxuICAgIGlmICh0eXBlb2YgcnVsZS52YWxpZGF0b3IgIT09ICdmdW5jdGlvbicgJiYgcnVsZS50eXBlICYmICF2YWxpZGF0b3JzLmhhc093blByb3BlcnR5KHJ1bGUudHlwZSkpIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcihmb3JtYXQoJ1Vua25vd24gcnVsZSB0eXBlICVzJywgcnVsZS50eXBlKSk7XG4gICAgfVxuXG4gICAgcmV0dXJuIHJ1bGUudHlwZSB8fCAnc3RyaW5nJztcbiAgfTtcblxuICBfcHJvdG8uZ2V0VmFsaWRhdGlvbk1ldGhvZCA9IGZ1bmN0aW9uIGdldFZhbGlkYXRpb25NZXRob2QocnVsZSkge1xuICAgIGlmICh0eXBlb2YgcnVsZS52YWxpZGF0b3IgPT09ICdmdW5jdGlvbicpIHtcbiAgICAgIHJldHVybiBydWxlLnZhbGlkYXRvcjtcbiAgICB9XG5cbiAgICB2YXIga2V5cyA9IE9iamVjdC5rZXlzKHJ1bGUpO1xuICAgIHZhciBtZXNzYWdlSW5kZXggPSBrZXlzLmluZGV4T2YoJ21lc3NhZ2UnKTtcblxuICAgIGlmIChtZXNzYWdlSW5kZXggIT09IC0xKSB7XG4gICAgICBrZXlzLnNwbGljZShtZXNzYWdlSW5kZXgsIDEpO1xuICAgIH1cblxuICAgIGlmIChrZXlzLmxlbmd0aCA9PT0gMSAmJiBrZXlzWzBdID09PSAncmVxdWlyZWQnKSB7XG4gICAgICByZXR1cm4gdmFsaWRhdG9ycy5yZXF1aXJlZDtcbiAgICB9XG5cbiAgICByZXR1cm4gdmFsaWRhdG9yc1t0aGlzLmdldFR5cGUocnVsZSldIHx8IHVuZGVmaW5lZDtcbiAgfTtcblxuICByZXR1cm4gU2NoZW1hO1xufSgpO1xuXG5TY2hlbWEucmVnaXN0ZXIgPSBmdW5jdGlvbiByZWdpc3Rlcih0eXBlLCB2YWxpZGF0b3IpIHtcbiAgaWYgKHR5cGVvZiB2YWxpZGF0b3IgIT09ICdmdW5jdGlvbicpIHtcbiAgICB0aHJvdyBuZXcgRXJyb3IoJ0Nhbm5vdCByZWdpc3RlciBhIHZhbGlkYXRvciBieSB0eXBlLCB2YWxpZGF0b3IgaXMgbm90IGEgZnVuY3Rpb24nKTtcbiAgfVxuXG4gIHZhbGlkYXRvcnNbdHlwZV0gPSB2YWxpZGF0b3I7XG59O1xuXG5TY2hlbWEud2FybmluZyA9IHdhcm5pbmc7XG5TY2hlbWEubWVzc2FnZXMgPSBtZXNzYWdlcztcblNjaGVtYS52YWxpZGF0b3JzID0gdmFsaWRhdG9ycztcblxuZXhwb3J0IHsgU2NoZW1hIGFzIGRlZmF1bHQgfTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWluZGV4LmpzLm1hcFxuIixudWxsLG51bGwsbnVsbCxudWxsLG51bGwsbnVsbCwiPHRlbXBsYXRlPlxuICA8ZGl2IGNsYXNzPVwiZnMtZWRpdGFibGVcIj5cbiAgICA8ZGl2IHYtaWY9XCIhZWRpdGluZyB8fCBkaXNhYmxlZFwiIGNsYXNzPVwiZnMtZWRpdGFibGUtaW5uZXIgZnMtZWRpdGFibGUtcG9pbnRlclwiIHYtYmluZD1cImFjdGl2ZVRyaWdnZXJcIj5cbiAgICAgIDxkaXYgY2xhc3M9XCJmcy1lZGl0YWJsZS1pbnB1dFwiPlxuICAgICAgICA8ZGl2IHYtaWY9XCJkaXJ0eVwiIGNsYXNzPVwiZnMtZWRpdGFibGUtZGlydHlcIiAvPlxuICAgICAgICA8c2xvdD48L3Nsb3Q+XG4gICAgICA8L2Rpdj5cbiAgICAgIDxkaXYgdi1pZj1cInRyaWdnZXIgJiYgIWRpc2FibGVkXCIgY2xhc3M9XCJmcy1lZGl0YWJsZS1hY3Rpb24gZnMtZWRpdGFibGUtaWNvblwiPlxuICAgICAgICA8ZnMtaWNvbiA6aWNvbj1cInVpLmljb25zLmVkaXRcIiAvPlxuICAgICAgPC9kaXY+XG4gICAgPC9kaXY+XG4gICAgPGRpdiB2LWVsc2UgY2xhc3M9XCJmcy1lZGl0YWJsZS1pbm5lclwiIDpjbGFzcz1cInsgJ2ZzLXZhbGlkYXRlLWVycm9yJzogaGFzRXJyb3IoKSB9XCI+XG4gICAgICA8ZGl2IGNsYXNzPVwiZnMtZWRpdGFibGUtaW5wdXRcIj5cbiAgICAgICAgPHNsb3QgbmFtZT1cImVkaXRcIj48L3Nsb3Q+XG4gICAgICA8L2Rpdj5cbiAgICAgIDxkaXYgY2xhc3M9XCJmcy1lZGl0YWJsZS1hY3Rpb25cIj5cbiAgICAgICAgPGNvbXBvbmVudCA6aXM9XCJ1aS50b29sdGlwLm5hbWVcIj5cbiAgICAgICAgICA8dGVtcGxhdGUgI1t1aS50b29sdGlwLmNvbnRlbnRdPlxuICAgICAgICAgICAgPHNwYW4gY2xhc3M9XCJlcnJvci1pY29uXCI+XG4gICAgICAgICAgICAgIHt7IGdldFZhbGlkYXRlRXJyb3JNZXNzYWdlKCkgfX1cbiAgICAgICAgICAgIDwvc3Bhbj5cbiAgICAgICAgICA8L3RlbXBsYXRlPlxuICAgICAgICAgIDx0ZW1wbGF0ZSAjW3VpLnRvb2x0aXAudHJpZ2dlcl0+XG4gICAgICAgICAgICA8ZnMtaWNvbiA6Y2xhc3M9XCJ7IGhpZGRlbjogIWhhc0Vycm9yKCksICdlcnJvci1pY29uJzogdHJ1ZSB9XCIgc2l6ZT1cIm1pbmlcIiA6aWNvbj1cInVpLmljb25zLmluZm9cIiAvPlxuICAgICAgICAgIDwvdGVtcGxhdGU+XG4gICAgICAgIDwvY29tcG9uZW50PlxuICAgICAgICA8dGVtcGxhdGUgdi1pZj1cInNob3dBY3Rpb25cIj5cbiAgICAgICAgICA8ZnMtaWNvbiB2LWlmPVwibG9hZGluZ1wiIHNpemU9XCJtaW5pXCIgOnNwaW49XCJ0cnVlXCIgOmljb249XCJ1aS5pY29ucy5yZWZyZXNoXCIgLz5cbiAgICAgICAgICA8ZnMtaWNvbiB2LWVsc2Ugc2l6ZT1cIm1pbmlcIiA6aWNvbj1cInVpLmljb25zLmNoZWNrXCIgQGNsaWNrPVwiZG9TdWJtaXRcIiAvPlxuICAgICAgICAgIDxmcy1pY29uIDpjbGFzcz1cInsgaGlkZGVuOiBsb2FkaW5nIH1cIiBzaXplPVwibWluaVwiIDppY29uPVwidWkuaWNvbnMuY2xvc2VcIiBAY2xpY2s9XCJkb0NhbmNlbFwiIC8+XG4gICAgICAgIDwvdGVtcGxhdGU+XG4gICAgICA8L2Rpdj5cbiAgICA8L2Rpdj5cbiAgPC9kaXY+XG48L3RlbXBsYXRlPlxuXG48c2NyaXB0IHNldHVwIGxhbmc9XCJ0c1wiPlxuaW1wb3J0IHsgdXNlVWkgfSBmcm9tIFwiQGZhc3QtY3J1ZC91aS1pbnRlcmZhY2VcIjtcbmltcG9ydCB7IGNvbXB1dGVkIH0gZnJvbSBcInZ1ZVwiO1xuXG50eXBlIEZzRWRpdGFibGVQcm9wcyA9IHtcbiAgZGlzYWJsZWQ/OiBib29sZWFuO1xuICBlZGl0aW5nOiBib29sZWFuO1xuICBkaXJ0eT86IGJvb2xlYW47XG4gIHRyaWdnZXI/OiBcIm9uQ2xpY2tcIiB8IFwib25EYkNsaWNrXCIgfCBmYWxzZTtcbiAgbG9hZGluZz86IGJvb2xlYW47XG4gIHNob3dBY3Rpb24/OiBib29sZWFuO1xuICB2YWxpZGF0ZUVycm9ycz86IGFueVtdO1xufTtcbmNvbnN0IHByb3BzID0gd2l0aERlZmF1bHRzKGRlZmluZVByb3BzPEZzRWRpdGFibGVQcm9wcz4oKSwge1xuICBkaXNhYmxlZDogZmFsc2UsXG4gIGVkaXRpbmc6IGZhbHNlLFxuICBkaXJ0eTogZmFsc2UsXG4gIGxvYWRpbmc6IGZhbHNlLFxuICBzaG93QWN0aW9uOiB0cnVlLFxuICB0cmlnZ2VyOiBcIm9uQ2xpY2tcIixcbiAgdmFsaWRhdGVFcnJvcnM6ICgpID0+IHtcbiAgICByZXR1cm4gW107XG4gIH1cbn0pO1xuXG5jb25zdCB7IHVpIH0gPSB1c2VVaSgpO1xuY29uc3QgZW1pdHMgPSBkZWZpbmVFbWl0cyhbXCJ1cGRhdGU6ZWRpdGluZ1wiLCBcInN1Ym1pdFwiLCBcImNhbmNlbFwiXSk7XG5jb25zdCBhY3RpdmVUcmlnZ2VyID0gY29tcHV0ZWQoKCkgPT4ge1xuICBpZiAoIXByb3BzLnRyaWdnZXIpIHtcbiAgICByZXR1cm4ge307XG4gIH1cbiAgcmV0dXJuIHtcbiAgICBbcHJvcHMudHJpZ2dlcl06ICgpID0+IHtcbiAgICAgIGVtaXRzKFwidXBkYXRlOmVkaXRpbmdcIiwgdHJ1ZSk7XG4gICAgfVxuICB9O1xufSk7XG5mdW5jdGlvbiBkb1N1Ym1pdCgpIHtcbiAgZW1pdHMoXCJzdWJtaXRcIik7XG59XG5mdW5jdGlvbiBkb0NhbmNlbCgpIHtcbiAgZW1pdHMoXCJjYW5jZWxcIik7XG59XG5mdW5jdGlvbiBoYXNFcnJvcigpIHtcbiAgcmV0dXJuIHByb3BzLnZhbGlkYXRlRXJyb3JzPy5sZW5ndGggPiAwO1xufVxuZnVuY3Rpb24gZ2V0VmFsaWRhdGVFcnJvck1lc3NhZ2UoKSB7XG4gIGlmIChwcm9wcy52YWxpZGF0ZUVycm9ycz8ubGVuZ3RoID09PSAwKSB7XG4gICAgcmV0dXJuO1xuICB9XG4gIHJldHVybiBwcm9wcy52YWxpZGF0ZUVycm9ycz8ubWFwKChpdGVtKSA9PiBpdGVtLm1lc3NhZ2UpLmpvaW4oXCIsXCIpO1xufVxuPC9zY3JpcHQ+XG5cbjxzdHlsZSBsYW5nPVwibGVzc1wiPlxuLmZzLWVkaXRhYmxlIHtcbiAgZGlzcGxheTogZmxleDtcbiAgd2lkdGg6IDEwMCU7XG4gIGFsaWduLWl0ZW1zOiBjZW50ZXI7XG4gIC5mcy1lZGl0YWJsZS1wb2ludGVyIHtcbiAgICBjdXJzb3I6IHBvaW50ZXI7XG4gIH1cbiAgLmZzLWVkaXRhYmxlLWlubmVyIHtcbiAgICBkaXNwbGF5OiBmbGV4O1xuICAgIHdpZHRoOiAxMDAlO1xuICAgIGFsaWduLWl0ZW1zOiBjZW50ZXI7XG4gICAgbWluLWhlaWdodDogMjNweDtcbiAgICAuZnMtZWRpdGFibGUtZGlydHkge1xuICAgICAgYm9yZGVyLXJhZGl1czogMTAwcHg7XG4gICAgICB3aWR0aDogNXB4O1xuICAgICAgaGVpZ2h0OiA1cHg7XG4gICAgICBtYXJnaW4tbGVmdDogLTVweDtcbiAgICAgIGJhY2tncm91bmQ6IHJlZDtcbiAgICB9XG4gICAgLmZzLWVkaXRhYmxlLWlucHV0IHtcbiAgICAgIGZsZXg6IDE7XG4gICAgfVxuICAgIC5mcy1lZGl0YWJsZS1hY3Rpb24ge1xuICAgICAgZGlzcGxheTogZmxleDtcbiAgICAgIGp1c3RpZnktY29udGVudDogZmxleC1lbmQ7XG4gICAgICBhbGlnbi1pdGVtczogY2VudGVyO1xuICAgICAgbWFyZ2luLWxlZnQ6IDEwcHg7XG4gICAgICBpLFxuICAgICAgLmFudGljb24ge1xuICAgICAgICB3aWR0aDogMjBweDtcbiAgICAgICAgdGV4dC1hbGlnbjogY2VudGVyO1xuICAgICAgICBmb250LXNpemU6IDE2cHg7XG4gICAgICAgIGN1cnNvcjogcG9pbnRlcjtcbiAgICAgIH1cbiAgICAgIC5oaWRkZW4ge1xuICAgICAgICB2aXNpYmlsaXR5OiBoaWRkZW47XG4gICAgICB9XG4gICAgfVxuXG4gICAgLmZzLWVkaXRhYmxlLWljb24ge1xuICAgICAgdmlzaWJpbGl0eTogaGlkZGVuO1xuICAgIH1cbiAgICAmOmhvdmVyIC5mcy1lZGl0YWJsZS1pY29uIHtcbiAgICAgIHZpc2liaWxpdHk6IHZpc2libGU7XG4gICAgfVxuXG4gICAgLmVsLXJhZGlvIHtcbiAgICAgIG1hcmdpbi1yaWdodDogNXB4O1xuICAgICAgLmVsLXJhZGlvX19sYWJlbCB7XG4gICAgICAgIHBhZGRpbmc6IDJweDtcbiAgICAgIH1cbiAgICB9XG5cbiAgICAmLmZzLXZhbGlkYXRlLWVycm9yIHtcbiAgICAgIC5lcnJvci1pY29uIHtcbiAgICAgICAgY29sb3I6ICNmZjRkNGY7XG4gICAgICB9XG4gICAgICAuYW50LWlucHV0LWFmZml4LXdyYXBwZXIge1xuICAgICAgICBib3JkZXItY29sb3I6ICNmZjRkNGY7XG4gICAgICAgIGJveC1zaGFkb3c6IDAgMCAwIDJweCByZ2IoMjU1IDM4IDUgLyA2JSk7XG4gICAgICB9XG4gICAgICAuZWwtaW5wdXRfX3dyYXBwZXIge1xuICAgICAgICBib3JkZXItY29sb3I6ICNmZjRkNGYgIWltcG9ydGFudDtcbiAgICAgICAgYm94LXNoYWRvdzogMCAwIDAgMXB4ICNmZjRkNGYgaW5zZXQgIWltcG9ydGFudDtcbiAgICAgIH1cbiAgICAgIC5uLWlucHV0IC5uLWlucHV0X19zdGF0ZS1ib3JkZXIge1xuICAgICAgICBib3JkZXItY29sb3I6ICNmZjRkNGYgIWltcG9ydGFudDtcbiAgICAgICAgYm94LXNoYWRvdzogMCAwIDAgMnB4IHJnYigyNTUgMzggNSAvIDYlKTtcbiAgICAgIH1cbiAgICB9XG4gIH1cbn1cbjwvc3R5bGU+XG4iLCI8dGVtcGxhdGU+XG4gIDxkaXYgY2xhc3M9XCJmcy1hY3Rpb25iYXJcIj5cbiAgICA8dGVtcGxhdGUgdi1mb3I9XCIodmFsdWUsIGtleSkgaW4gY29tcHV0ZWRCdXR0b25zXCIgOmtleT1cImtleVwiPlxuICAgICAgPGZzLWJ1dHRvbiB2LWlmPVwidmFsdWUuc2hvdyAhPT0gZmFsc2VcIiB2LWJpbmQ9XCJ2YWx1ZVwiIEBjbGljaz1cIm9uQ2xpY2soa2V5LCB2YWx1ZSwgJGV2ZW50KVwiIC8+XG4gICAgPC90ZW1wbGF0ZT5cbiAgPC9kaXY+XG48L3RlbXBsYXRlPlxuPHNjcmlwdCBsYW5nPVwidHNcIj5cbmltcG9ydCB7IGRlZmluZUNvbXBvbmVudCwgY29tcHV0ZWQsIFJlZiB9IGZyb20gXCJ2dWVcIjtcbmltcG9ydCBfIGZyb20gXCJsb2Rhc2gtZXNcIjtcbmltcG9ydCB7IENvbnN0YW50cyB9IGZyb20gXCIuLi8uLi91dGlscy91dGlsLmNvbnN0YW50c1wiO1xuaW1wb3J0IHsgQWN0aW9uYmFyQ2xpY2tFdmVudCwgQnV0dG9uc1Byb3BzIH0gZnJvbSBcIi4uLy4uL2RcIjtcblxuZXhwb3J0IGRlZmF1bHQgZGVmaW5lQ29tcG9uZW50KHtcbiAgbmFtZTogXCJGc0FjdGlvbmJhclwiLFxuICBwcm9wczoge1xuICAgIC8qKlxuICAgICAqIOaMiemSrumFjee9rlxuICAgICAqIHtcbiAgICAgKiAgYWRkOntcbiAgICAgKiAgICAuLi5Gc0J1dHRvbixcbiAgICAgKiAgICBzaG93OnRydWVcbiAgICAgKiAgfSxcbiAgICAgKiAgY3VzdG9tOnsuLi59XG4gICAgICogfVxuICAgICAqL1xuICAgIGJ1dHRvbnM6IHt9XG4gIH0gYXMgYW55LFxuICBlbWl0czogW1wiYWN0aW9uXCJdLFxuICBzZXR1cChwcm9wcywgY3R4OiBhbnkpIHtcbiAgICBmdW5jdGlvbiBvbkNsaWNrKGtleTogYW55LCBidG46IGFueSwgJGV2ZW50OiBhbnkpIHtcbiAgICAgIGNvbnN0IGUgPSB7IGtleSwgYnRuLCAkZXZlbnQgfTtcbiAgICAgIGlmIChidG4uY2xpY2spIHtcbiAgICAgICAgYnRuLmNsaWNrKGUpO1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG4gICAgICBpZiAoYnRuLm9uQ2xpY2spIHtcbiAgICAgICAgYnRuLm9uQ2xpY2soZSk7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cbiAgICAgIGN0eC5lbWl0KFwiYWN0aW9uXCIsIGUpO1xuICAgIH1cbiAgICBjb25zdCBjb21wdXRlZEJ1dHRvbnM6IFJlZiA9IGNvbXB1dGVkKCgpID0+IHtcbiAgICAgIGxldCBzb3J0QXJyID0gW107XG4gICAgICAvLyBAdHMtaWdub3JlXG4gICAgICBmb3IgKGxldCBrZXkgaW4gcHJvcHMuYnV0dG9ucykge1xuICAgICAgICBzb3J0QXJyLnB1c2goe1xuICAgICAgICAgIC8vIEB0cy1pZ25vcmVcbiAgICAgICAgICAuLi5wcm9wcy5idXR0b25zW2tleV0sXG4gICAgICAgICAgX2tleToga2V5XG4gICAgICAgIH0pO1xuICAgICAgfVxuICAgICAgc29ydEFyciA9IF8uc29ydEJ5KHNvcnRBcnIsIChpdGVtOiBhbnkpID0+IHtcbiAgICAgICAgcmV0dXJuIGl0ZW0ub3JkZXIgPz8gQ29uc3RhbnRzLm9yZGVyRGVmYXVsdDtcbiAgICAgIH0pO1xuXG4gICAgICBjb25zdCBzb3J0ZWRCdXR0b25zOiBCdXR0b25zUHJvcHM8QWN0aW9uYmFyQ2xpY2tFdmVudD4gPSB7fTtcblxuICAgICAgc29ydEFyci5mb3JFYWNoKChpdGVtOiBhbnkpID0+IHtcbiAgICAgICAgbGV0IF9rZXkgPSBpdGVtLl9rZXk7XG4gICAgICAgIGRlbGV0ZSBpdGVtLl9rZXk7XG4gICAgICAgIHNvcnRlZEJ1dHRvbnNbX2tleV0gPSBpdGVtO1xuICAgICAgfSk7XG4gICAgICByZXR1cm4gc29ydGVkQnV0dG9ucztcbiAgICB9KTtcbiAgICByZXR1cm4ge1xuICAgICAgb25DbGljayxcbiAgICAgIGNvbXB1dGVkQnV0dG9uc1xuICAgIH07XG4gIH1cbn0pO1xuPC9zY3JpcHQ+XG48c3R5bGUgbGFuZz1cImxlc3NcIj5cbi5mcy1hY3Rpb25iYXIge1xuICAuZnMtYnV0dG9uIHtcbiAgICBtYXJnaW46IDAgMnB4O1xuICB9XG59XG48L3N0eWxlPlxuIiwiPHRlbXBsYXRlPlxuICA8ZGl2IGNsYXNzPVwiZnMtYWN0aW9uYmFyXCI+XG4gICAgPHRlbXBsYXRlIHYtZm9yPVwiKHZhbHVlLCBrZXkpIGluIGNvbXB1dGVkQnV0dG9uc1wiIDprZXk9XCJrZXlcIj5cbiAgICAgIDxmcy1idXR0b24gdi1pZj1cInZhbHVlLnNob3cgIT09IGZhbHNlXCIgdi1iaW5kPVwidmFsdWVcIiBAY2xpY2s9XCJvbkNsaWNrKGtleSwgdmFsdWUsICRldmVudClcIiAvPlxuICAgIDwvdGVtcGxhdGU+XG4gIDwvZGl2PlxuPC90ZW1wbGF0ZT5cbjxzY3JpcHQgbGFuZz1cInRzXCI+XG5pbXBvcnQgeyBkZWZpbmVDb21wb25lbnQsIGNvbXB1dGVkLCBSZWYgfSBmcm9tIFwidnVlXCI7XG5pbXBvcnQgXyBmcm9tIFwibG9kYXNoLWVzXCI7XG5pbXBvcnQgeyBDb25zdGFudHMgfSBmcm9tIFwiLi4vLi4vdXRpbHMvdXRpbC5jb25zdGFudHNcIjtcbmltcG9ydCB7IEFjdGlvbmJhckNsaWNrRXZlbnQsIEJ1dHRvbnNQcm9wcyB9IGZyb20gXCIuLi8uLi9kXCI7XG5cbmV4cG9ydCBkZWZhdWx0IGRlZmluZUNvbXBvbmVudCh7XG4gIG5hbWU6IFwiRnNBY3Rpb25iYXJcIixcbiAgcHJvcHM6IHtcbiAgICAvKipcbiAgICAgKiDmjInpkq7phY3nva5cbiAgICAgKiB7XG4gICAgICogIGFkZDp7XG4gICAgICogICAgLi4uRnNCdXR0b24sXG4gICAgICogICAgc2hvdzp0cnVlXG4gICAgICogIH0sXG4gICAgICogIGN1c3RvbTp7Li4ufVxuICAgICAqIH1cbiAgICAgKi9cbiAgICBidXR0b25zOiB7fVxuICB9IGFzIGFueSxcbiAgZW1pdHM6IFtcImFjdGlvblwiXSxcbiAgc2V0dXAocHJvcHMsIGN0eDogYW55KSB7XG4gICAgZnVuY3Rpb24gb25DbGljayhrZXk6IGFueSwgYnRuOiBhbnksICRldmVudDogYW55KSB7XG4gICAgICBjb25zdCBlID0geyBrZXksIGJ0biwgJGV2ZW50IH07XG4gICAgICBpZiAoYnRuLmNsaWNrKSB7XG4gICAgICAgIGJ0bi5jbGljayhlKTtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuICAgICAgaWYgKGJ0bi5vbkNsaWNrKSB7XG4gICAgICAgIGJ0bi5vbkNsaWNrKGUpO1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG4gICAgICBjdHguZW1pdChcImFjdGlvblwiLCBlKTtcbiAgICB9XG4gICAgY29uc3QgY29tcHV0ZWRCdXR0b25zOiBSZWYgPSBjb21wdXRlZCgoKSA9PiB7XG4gICAgICBsZXQgc29ydEFyciA9IFtdO1xuICAgICAgLy8gQHRzLWlnbm9yZVxuICAgICAgZm9yIChsZXQga2V5IGluIHByb3BzLmJ1dHRvbnMpIHtcbiAgICAgICAgc29ydEFyci5wdXNoKHtcbiAgICAgICAgICAvLyBAdHMtaWdub3JlXG4gICAgICAgICAgLi4ucHJvcHMuYnV0dG9uc1trZXldLFxuICAgICAgICAgIF9rZXk6IGtleVxuICAgICAgICB9KTtcbiAgICAgIH1cbiAgICAgIHNvcnRBcnIgPSBfLnNvcnRCeShzb3J0QXJyLCAoaXRlbTogYW55KSA9PiB7XG4gICAgICAgIHJldHVybiBpdGVtLm9yZGVyID8/IENvbnN0YW50cy5vcmRlckRlZmF1bHQ7XG4gICAgICB9KTtcblxuICAgICAgY29uc3Qgc29ydGVkQnV0dG9uczogQnV0dG9uc1Byb3BzPEFjdGlvbmJhckNsaWNrRXZlbnQ+ID0ge307XG5cbiAgICAgIHNvcnRBcnIuZm9yRWFjaCgoaXRlbTogYW55KSA9PiB7XG4gICAgICAgIGxldCBfa2V5ID0gaXRlbS5fa2V5O1xuICAgICAgICBkZWxldGUgaXRlbS5fa2V5O1xuICAgICAgICBzb3J0ZWRCdXR0b25zW19rZXldID0gaXRlbTtcbiAgICAgIH0pO1xuICAgICAgcmV0dXJuIHNvcnRlZEJ1dHRvbnM7XG4gICAgfSk7XG4gICAgcmV0dXJuIHtcbiAgICAgIG9uQ2xpY2ssXG4gICAgICBjb21wdXRlZEJ1dHRvbnNcbiAgICB9O1xuICB9XG59KTtcbjwvc2NyaXB0PlxuPHN0eWxlIGxhbmc9XCJsZXNzXCI+XG4uZnMtYWN0aW9uYmFyIHtcbiAgLmZzLWJ1dHRvbiB7XG4gICAgbWFyZ2luOiAwIDJweDtcbiAgfVxufVxuPC9zdHlsZT5cbiIsbnVsbCxudWxsLCI8dGVtcGxhdGU+XG4gIDwhLS0g566A5Y2V5qih5byPIC0tPlxuICA8dGVtcGxhdGUgdi1pZj1cIm1vZGUgPT09ICdzaW1wbGUnXCI+XG4gICAgPGNvbXBvbmVudCA6aXM9XCJ1aS5yb3cubmFtZVwiIGNsYXNzPVwiZnMtdGFibGUtY29sdW1ucy1maWx0ZXItc2ltcGxlXCI+XG4gICAgICA8Y29tcG9uZW50XG4gICAgICAgIDppcz1cInVpLmNvbC5uYW1lXCJcbiAgICAgICAgdi1mb3I9XCIoZWxlbWVudCwga2V5KSBpbiBjdXJyZW50Q29sdW1uc1wiXG4gICAgICAgIHYtc2hvdz1cIm9yaWdpbmFsW2VsZW1lbnQua2V5XT8uX19zaG93ICE9PSBmYWxzZVwiXG4gICAgICAgIDprZXk9XCJrZXlcIlxuICAgICAgICA6c3Bhbj1cIjZcIlxuICAgICAgPlxuICAgICAgICA8Y29tcG9uZW50XG4gICAgICAgICAgOmlzPVwidWkuY2hlY2tib3gubmFtZVwiXG4gICAgICAgICAgdi1tb2RlbDpbdWkuY2hlY2tib3gubW9kZWxWYWx1ZV09XCJlbGVtZW50LnNob3dcIlxuICAgICAgICAgIDpkaXNhYmxlZD1cIm9yaWdpbmFsW2VsZW1lbnQua2V5XT8uX19kaXNhYmxlZCA9PT0gdHJ1ZVwiXG4gICAgICAgICAgY2xhc3M9XCJpdGVtLWxhYmVsXCJcbiAgICAgICAgICA6dGl0bGU9XCJidWlsZFRleHQoZWxlbWVudClcIlxuICAgICAgICA+XG4gICAgICAgICAge3sgYnVpbGRUZXh0KGVsZW1lbnQpIH19XG4gICAgICAgIDwvY29tcG9uZW50PlxuICAgICAgPC9jb21wb25lbnQ+XG4gICAgPC9jb21wb25lbnQ+XG4gICAgPGNvbXBvbmVudCA6aXM9XCJ1aS5kaXZpZGVyLm5hbWVcIiAvPlxuICAgIDxjb21wb25lbnQgOmlzPVwidWkucm93Lm5hbWVcIj5cbiAgICAgIDxmcy1idXR0b25cbiAgICAgICAgc3R5bGU9XCJtYXJnaW4tcmlnaHQ6IDVweFwiXG4gICAgICAgIHR5cGU9XCJwcmltYXJ5XCJcbiAgICAgICAgOmljb249XCJ1aS5pY29ucy5jaGVja1wiXG4gICAgICAgIDp0ZXh0PVwiX3RleHQuY29uZmlybVwiXG4gICAgICAgIEBjbGljaz1cInNpbXBsZVN1Ym1pdCgpXCJcbiAgICAgIC8+XG4gICAgICA8ZnMtYnV0dG9uIDppY29uPVwidWkuaWNvbnMucmVmcmVzaFwiIDp0ZXh0PVwiX3RleHQucmVzZXRcIiBAY2xpY2s9XCJzaW1wbGVSZXNldFwiIC8+XG4gICAgPC9jb21wb25lbnQ+XG4gIDwvdGVtcGxhdGU+XG4gIDwhLS0g5a6M5YWo5qih5byPIC0tPlxuXG4gIDxjb21wb25lbnQgOmlzPVwiY29udGFpbmVyPy5pcyB8fCAnZnMtY29sdW1ucy1maWx0ZXItbGF5b3V0LWRlZmF1bHQnXCIgdi1lbHNlIHYtYmluZD1cImNvbnRhaW5lclwiPlxuICAgIDx0ZW1wbGF0ZSAjYnV0dG9ucz5cbiAgICAgIDxjb21wb25lbnQgOmlzPVwidWkucm93Lm5hbWVcIiBjbGFzcz1cImZzLWRyYXdlci1mb290ZXJcIiA6Z3V0dGVyPVwiMTBcIj5cbiAgICAgICAgPGNvbXBvbmVudCA6aXM9XCJ1aS5jb2wubmFtZVwiIDpzcGFuPVwiMTJcIj5cbiAgICAgICAgICA8ZnMtYnV0dG9uIDppY29uPVwidWkuaWNvbnMucmVmcmVzaFwiIDp0ZXh0PVwiX3RleHQucmVzZXRcIiBibG9jayBAY2xpY2s9XCJyZXNldFwiIC8+XG4gICAgICAgIDwvY29tcG9uZW50PlxuICAgICAgICA8Y29tcG9uZW50IDppcz1cInVpLmNvbC5uYW1lXCIgOnNwYW49XCIxMlwiPlxuICAgICAgICAgIDxmcy1idXR0b24gdHlwZT1cInByaW1hcnlcIiA6aWNvbj1cInVpLmljb25zLmNoZWNrXCIgOnRleHQ9XCJfdGV4dC5jb25maXJtXCIgYmxvY2sgQGNsaWNrPVwic3VibWl0KGZhbHNlKVwiIC8+XG4gICAgICAgIDwvY29tcG9uZW50PlxuICAgICAgPC9jb21wb25lbnQ+XG4gICAgPC90ZW1wbGF0ZT5cbiAgPC9jb21wb25lbnQ+XG48L3RlbXBsYXRlPlxuXG48c2NyaXB0IGxhbmc9XCJ0c1wiIHNldHVwPlxuLyoqXG4gKiBGc1RhYmxlQ29sdW1uc0ZpbHRlcu+8jOWIl+iuvue9rue7hOS7tlxuICovXG5pbXBvcnQgXywgeyBjbG9uZURlZXAgfSBmcm9tIFwibG9kYXNoLWVzXCI7XG5pbXBvcnQgVGFibGVTdG9yZSBmcm9tIFwiLi4vLi4vLi4vdXRpbHMvdXRpbC5zdG9yZVwiO1xuaW1wb3J0IHsgdXNlSTE4biB9IGZyb20gXCIuLi8uLi8uLi9sb2NhbGVcIjtcbmltcG9ydCB7IGNvbXB1dGVkLCBuZXh0VGljaywgcHJvdmlkZSwgUmVmLCByZWYsIHdhdGNoIH0gZnJvbSBcInZ1ZVwiO1xuaW1wb3J0IHsgdWlDb250ZXh0IH0gZnJvbSBcIi4uLy4uLy4uL3VpXCI7XG5pbXBvcnQgeyB1c2VNZXJnZSB9IGZyb20gXCIuLi8uLi8uLi91c2UvdXNlLW1lcmdlXCI7XG5pbXBvcnQgeyB1c2VSb3V0ZSB9IGZyb20gXCJ2dWUtcm91dGVyXCI7XG5pbXBvcnQge1xuICBDb2x1bW5Qcm9wcyxcbiAgQ29sdW1uc0ZpbHRlckNvbXBvbmVudFByb3BzLFxuICBDb2x1bW5zRmlsdGVySXRlbSxcbiAgQ29sdW1uc0ZpbHRlclByb3ZpZGVLZXksXG4gIFRhYmxlQ29sdW1uc1Byb3BzXG59IGZyb20gXCIuLi8uLi8uLi9kXCI7XG5cbmNvbnN0IHByb3BzID0gd2l0aERlZmF1bHRzKGRlZmluZVByb3BzPENvbHVtbnNGaWx0ZXJDb21wb25lbnRQcm9wcz4oKSwge1xuICBzdG9yYWdlOiB0cnVlLFxuICBtb2RlOiBcImRlZmF1bHRcIixcbiAgY29udGFpbmVyOiAoKSA9PiB7XG4gICAgcmV0dXJuIHsgaXM6IFwiZnMtY29sdW1ucy1maWx0ZXItbGF5b3V0LWRlZmF1bHRcIiB9O1xuICB9XG59KTtcbmNvbnN0IGVtaXQgPSBkZWZpbmVFbWl0cyhbXCJ1cGRhdGU6Y29sdW1uc1wiLCBcInVwZGF0ZTpzaG93XCIsIFwicmVzZXRcIiwgXCJzdWJtaXRcIl0pO1xuXG5jb25zdCB7IHQgfSA9IHVzZUkxOG4oKTtcbmNvbnN0IHVpID0gdWlDb250ZXh0LmdldCgpO1xuY29uc3QgYWN0aXZlID0gcmVmKGZhbHNlKTtcbmNvbnN0IHN0YXJ0ID0gKCkgPT4ge1xuICBhY3RpdmUudmFsdWUgPSB0cnVlO1xufTtcblxuLy8g5pWw57uE5b2i5byP55qE5Y6f5aeLdHJlZVxuY29uc3Qgb3JpZ2luYWw6IFJlZjxDb2x1bW5zRmlsdGVySXRlbVtdPiA9IGNvbXB1dGVkKCgpID0+IHtcbiAgcmV0dXJuIHRyYW5zZm9ybUNvbHVtbnNUcmVlKHByb3BzLm9yaWdpbmFsQ29sdW1ucyk7XG59KTtcbi8v5pWw57uE5b2i5byP55qEdHJlZVxuY29uc3QgY3VycmVudENvbHVtbnM6IFJlZjxDb2x1bW5zRmlsdGVySXRlbVtdPiA9IHJlZihbXSk7XG5cbmNvbnN0IG9yaWdpbmFsQ29sdW1uc01hcDogUmVmPFJlY29yZDxzdHJpbmcsIENvbHVtbnNGaWx0ZXJJdGVtPj4gPSBjb21wdXRlZCgoKSA9PiB7XG4gIGNvbnN0IG1hcDogUmVjb3JkPHN0cmluZywgQ29sdW1uc0ZpbHRlckl0ZW0+ID0ge307XG4gIGVhY2hUcmVlKG9yaWdpbmFsLnZhbHVlLCAoaXRlbTogQ29sdW1uc0ZpbHRlckl0ZW0pID0+IHtcbiAgICBtYXBbaXRlbS5fX2tleV0gPSBpdGVtO1xuICB9KTtcbiAgcmV0dXJuIG1hcDtcbn0pO1xuY29uc3QgeyBtZXJnZSB9ID0gdXNlTWVyZ2UoKTtcblxuY29uc3QgX3RleHQgPSBjb21wdXRlZCgoKSA9PiB7XG4gIGNvbnN0IGRlZiA9IHtcbiAgICB0aXRsZTogdChcImZzLnRvb2xiYXIuY29sdW1uRmlsdGVyLnRpdGxlXCIpLFxuICAgIGZpeGVkOiB0KFwiZnMudG9vbGJhci5jb2x1bW5GaWx0ZXIuZml4ZWRcIiksXG4gICAgb3JkZXI6IHQoXCJmcy50b29sYmFyLmNvbHVtbkZpbHRlci5vcmRlclwiKSxcbiAgICByZXNldDogdChcImZzLnRvb2xiYXIuY29sdW1uRmlsdGVyLnJlc2V0XCIpLFxuICAgIGNvbmZpcm06IHQoXCJmcy50b29sYmFyLmNvbHVtbkZpbHRlci5jb25maXJtXCIpLFxuICAgIHVubmFtZWQ6IHQoXCJmcy50b29sYmFyLmNvbHVtbkZpbHRlci51bm5hbWVkXCIpXG4gIH07XG4gIG1lcmdlKGRlZiwgcHJvcHMudGV4dCk7XG4gIHJldHVybiBkZWY7XG59KTtcblxuZnVuY3Rpb24gZWFjaFRyZWUodHJlZTogYW55LCBjYWxsYmFjazogRnVuY3Rpb24pIHtcbiAgaWYgKCF0cmVlKSB7XG4gICAgcmV0dXJuO1xuICB9XG4gIGlmIChBcnJheS5pc0FycmF5KHRyZWUpKSB7XG4gICAgZm9yIChjb25zdCBpdGVtIG9mIHRyZWUpIHtcbiAgICAgIGNhbGxiYWNrKGl0ZW0pO1xuICAgICAgaWYgKGl0ZW0uY2hpbGRyZW4pIHtcbiAgICAgICAgZWFjaFRyZWUoaXRlbS5jaGlsZHJlbiwgY2FsbGJhY2spO1xuICAgICAgfVxuICAgIH1cbiAgfSBlbHNlIHtcbiAgICBmb3IgKGNvbnN0IGtleSBpbiB0cmVlKSB7XG4gICAgICBjb25zdCBpdGVtID0gdHJlZVtrZXldO1xuICAgICAgY2FsbGJhY2soaXRlbSk7XG4gICAgICBpZiAoaXRlbS5jaGlsZHJlbikge1xuICAgICAgICBlYWNoVHJlZShpdGVtLmNoaWxkcmVuLCBjYWxsYmFjayk7XG4gICAgICB9XG4gICAgfVxuICB9XG59XG5cbmZ1bmN0aW9uIGJ1aWxkQ29sdW1uRmlsdGVySXRlbShpdGVtOiBDb2x1bW5Qcm9wcyk6IENvbHVtbnNGaWx0ZXJJdGVtIHtcbiAgcmV0dXJuIHtcbiAgICBrZXk6IGl0ZW0ua2V5LFxuICAgIHRpdGxlOiBpdGVtLnRpdGxlLFxuICAgIGZpeGVkOiBpdGVtLmZpeGVkID8/IGZhbHNlLFxuICAgIHNob3c6IGl0ZW0uc2hvdyA/PyB0cnVlLFxuICAgIF9fc2hvdzogaXRlbS5jb2x1bW5TZXRTaG93ICE9PSBmYWxzZSxcbiAgICBfX2Rpc2FibGVkOiBpdGVtLmNvbHVtblNldERpc2FibGVkID8/IGZhbHNlXG4gIH07XG59XG5cbmZ1bmN0aW9uIHRyYW5zZm9ybVRvVGFibGVDb2x1bW5zKHJlc3VsdDogQ29sdW1uc0ZpbHRlckl0ZW1bXSkge1xuICBjb25zdCBjb2x1bW5zOiBUYWJsZUNvbHVtbnNQcm9wcyA9IHt9O1xuICBfLmZvckVhY2gocmVzdWx0LCAoaXRlbSkgPT4ge1xuICAgIGNvbnN0IGNvbHVtbjogQ29sdW1uUHJvcHMgPSBfLm9taXQoaXRlbSwgXCJjaGlsZHJlblwiLCBcIl9fc2hvd1wiLCBcIl9fZGlzYWJsZWRcIiwgXCJfX3BhcmVudFwiLCBcIl9fa2V5XCIpO1xuICAgIGlmIChpdGVtLmNoaWxkcmVuICYmIGl0ZW0uY2hpbGRyZW4ubGVuZ3RoID4gMCkge1xuICAgICAgY29sdW1uLmNoaWxkcmVuID0gdHJhbnNmb3JtVG9UYWJsZUNvbHVtbnMoaXRlbS5jaGlsZHJlbik7XG4gICAgfVxuICAgIGNvbHVtbnNbaXRlbS5rZXldID0gY29sdW1uO1xuICB9KTtcbiAgcmV0dXJuIGNvbHVtbnM7XG59XG5cbmZ1bmN0aW9uIHRyYW5zZm9ybUNvbHVtbnNUcmVlKHZhbHVlOiBUYWJsZUNvbHVtbnNQcm9wcywgcGFyZW50PzogQ29sdW1uc0ZpbHRlckl0ZW0pOiBDb2x1bW5zRmlsdGVySXRlbVtdIHtcbiAgY29uc3QgY29sdW1uczogQ29sdW1uc0ZpbHRlckl0ZW1bXSA9IFtdO1xuICBfLmZvckVhY2godmFsdWUsIChpdGVtKSA9PiB7XG4gICAgY29uc3QgY29sdW1uID0gYnVpbGRDb2x1bW5GaWx0ZXJJdGVtKGl0ZW0pO1xuICAgIGNvbHVtbi5fX3BhcmVudCA9IHBhcmVudDtcbiAgICBjb2x1bW4uX19rZXkgPSBgJHtwYXJlbnQ/LmtleSB8fCBcIlwifS4ke2l0ZW0ua2V5fWA7XG4gICAgY29sdW1ucy5wdXNoKGNvbHVtbik7XG4gICAgaWYgKGl0ZW0uY2hpbGRyZW4pIHtcbiAgICAgIGNvbHVtbi5jaGlsZHJlbiA9IHRyYW5zZm9ybUNvbHVtbnNUcmVlKGl0ZW0uY2hpbGRyZW4sIGNvbHVtbik7XG4gICAgfVxuICB9KTtcbiAgcmV0dXJuIGNvbHVtbnM7XG59XG5cbmZ1bmN0aW9uIHNldEN1cnJlbnRWYWx1ZSh2YWx1ZTogYW55KSB7XG4gIGN1cnJlbnRDb2x1bW5zLnZhbHVlID0gdHJhbnNmb3JtQ29sdW1uc1RyZWUodmFsdWUpO1xufVxuXG4vLyDov5jljp9cbmFzeW5jIGZ1bmN0aW9uIHJlc2V0KCkge1xuICBjdXJyZW50Q29sdW1ucy52YWx1ZSA9IHRyYW5zZm9ybUNvbHVtbnNUcmVlKHByb3BzLm9yaWdpbmFsQ29sdW1ucyk7XG4gIGF3YWl0IGRvX3NhdmUodHJ1ZSk7XG4gIGF3YWl0IGNsZWFyVGhpc1N0b3JhZ2UoKTtcbiAgZW1pdChcInJlc2V0XCIpO1xufVxuXG4vLyDnoa7orqRcbmFzeW5jIGZ1bmN0aW9uIGRvX3NhdmUobm9TYXZlID0gZmFsc2UpIHtcbiAgaWYgKCFub1NhdmUpIHtcbiAgICBhd2FpdCBzYXZlT3B0aW9uc1RvU3RvcmFnZShjdXJyZW50Q29sdW1ucy52YWx1ZSk7XG4gIH1cbiAgY29uc3QgcmVzdWx0ID0gXy5jbG9uZURlZXAoY3VycmVudENvbHVtbnMudmFsdWUpO1xuXG4gIC8v6Kej5YazbmFpdmUgdWnkuI7liJforr7nva7lhrLnqoHnmoTpl67pophcbiAgZWFjaFRyZWUocmVzdWx0LCAoaXRlbTogYW55KSA9PiB7XG4gICAgaWYgKGl0ZW0pIHtcbiAgICAgIGRlbGV0ZSBpdGVtLl9fZGlzYWJsZWQ7XG4gICAgICBkZWxldGUgaXRlbS5fX3Nob3c7XG4gICAgICBkZWxldGUgaXRlbS5fX3BhcmVudDtcbiAgICAgIGRlbGV0ZSBpdGVtLl9fa2V5O1xuICAgIH1cbiAgfSk7XG5cbiAgZG9FbWl0KHJlc3VsdCk7XG4gIGFjdGl2ZS52YWx1ZSA9IGZhbHNlO1xuICByZXR1cm4gcmVzdWx0O1xufVxuXG5hc3luYyBmdW5jdGlvbiBzdWJtaXQobm9TYXZlID0gZmFsc2UpIHtcbiAgY29uc3QgY29sdW1ucyA9IGF3YWl0IGRvX3NhdmUobm9TYXZlKTtcbiAgZW1pdChcInN1Ym1pdFwiLCB7IGNvbHVtbnMgfSk7XG59XG5jb25zdCBjb21wdXRlZE9yaWdpbmFsQ29sdW1ucyA9IGNvbXB1dGVkKCgpID0+IHtcbiAgcmV0dXJuIHByb3BzLm9yaWdpbmFsQ29sdW1ucztcbn0pO1xucHJvdmlkZShDb2x1bW5zRmlsdGVyUHJvdmlkZUtleSwge1xuICBvcmlnaW5hbENvbHVtbnM6IGNvbXB1dGVkT3JpZ2luYWxDb2x1bW5zLFxuICBvcmlnaW5hbENvbHVtbnNNYXA6IG9yaWdpbmFsQ29sdW1uc01hcCxcbiAgY3VycmVudENvbHVtbnMsXG4gIHRleHQ6IF90ZXh0LFxuICBhY3RpdmUsXG4gIHN1Ym1pdCxcbiAgcmVzZXRcbn0pO1xuXG5hc3luYyBmdW5jdGlvbiBzaW1wbGVTdWJtaXQoKSB7XG4gIGF3YWl0IHN1Ym1pdChmYWxzZSk7XG4gIGVtaXQoXCJ1cGRhdGU6c2hvd1wiLCBmYWxzZSk7XG59XG5hc3luYyBmdW5jdGlvbiBzaW1wbGVSZXNldCgpIHtcbiAgYXdhaXQgcmVzZXQoKTtcbiAgZW1pdChcInVwZGF0ZTpzaG93XCIsIGZhbHNlKTtcbn1cblxuZnVuY3Rpb24gZG9FbWl0KHJlc3VsdDogQ29sdW1uc0ZpbHRlckl0ZW1bXSkge1xuICBlbWl0KFwidXBkYXRlOmNvbHVtbnNcIiwgdHJhbnNmb3JtVG9UYWJsZUNvbHVtbnMocmVzdWx0KSk7XG59XG5cbmNvbnN0IHN0b3JhZ2VUYWJsZVN0b3JlID0gcmVmKCk7XG5mdW5jdGlvbiBnZXRTdG9yYWdlVGFibGUoKSB7XG4gIC8vcHJvcHMuc3RvcmFnZeaYr+WQpuWunueOsOS6hkNvbHVtbkZpbHRlclN0b3JhZ2Ug5o6l5Y+jXG4gIGNvbnN0IHJlbW90ZVN0b3JhZ2UgPSB0eXBlb2YgcHJvcHMuc3RvcmFnZSA9PT0gXCJvYmplY3RcIiA/IHByb3BzLnN0b3JhZ2UgOiBudWxsO1xuICBjb25zdCBrZXlUeXBlID0gdHlwZW9mIHByb3BzLnN0b3JhZ2UgPT09IFwic3RyaW5nXCIgPyBwcm9wcy5zdG9yYWdlIDogXCJcIjtcbiAgaWYgKHN0b3JhZ2VUYWJsZVN0b3JlLnZhbHVlID09IG51bGwpIHtcbiAgICBjb25zdCByb3V0ZSA9IHVzZVJvdXRlKCk7XG4gICAgc3RvcmFnZVRhYmxlU3RvcmUudmFsdWUgPSBuZXcgVGFibGVTdG9yZSh7XG4gICAgICAkcm91dGVyOiByb3V0ZSxcbiAgICAgIHRhYmxlTmFtZTogXCJjb2x1bW5zRmlsdGVyXCIsXG4gICAgICBrZXlUeXBlOiBrZXlUeXBlLFxuICAgICAgcmVtb3RlU3RvcmFnZVxuICAgIH0pO1xuICB9XG4gIHJldHVybiBzdG9yYWdlVGFibGVTdG9yZS52YWx1ZTtcbn1cblxuYXN5bmMgZnVuY3Rpb24gc2F2ZU9wdGlvbnNUb1N0b3JhZ2UodmFsdWU6IGFueSkge1xuICBpZiAocHJvcHMuc3RvcmFnZSA9PT0gZmFsc2UpIHtcbiAgICByZXR1cm47XG4gIH1cbiAgY29uc3Qgc3RvcmVkT3B0aW9uczogYW55ID0gY2xvbmVEZWVwKHZhbHVlKTtcbiAgLy/liKDpmaRwYXJlbnTlvJXnlKhcbiAgZWFjaFRyZWUoc3RvcmVkT3B0aW9ucywgKGl0ZW06IGFueSkgPT4ge1xuICAgIGRlbGV0ZSBpdGVtLl9fcGFyZW50O1xuICB9KTtcblxuICBhd2FpdCBnZXRTdG9yYWdlVGFibGUoKS51cGRhdGVUYWJsZVZhbHVlKHN0b3JlZE9wdGlvbnMpO1xufVxuXG5hc3luYyBmdW5jdGlvbiBnZXRPcHRpb25zRnJvbVN0b3JhZ2UoKSB7XG4gIGlmIChwcm9wcy5zdG9yYWdlID09PSBmYWxzZSkge1xuICAgIHJldHVybjtcbiAgfVxuICByZXR1cm4gYXdhaXQgZ2V0U3RvcmFnZVRhYmxlKCkuZ2V0VGFibGVWYWx1ZSgpO1xufVxuYXN5bmMgZnVuY3Rpb24gY2xlYXJUaGlzU3RvcmFnZSgpIHtcbiAgYXdhaXQgZ2V0U3RvcmFnZVRhYmxlKCkuY2xlYXJUYWJsZVZhbHVlKCk7XG59XG5cbmZ1bmN0aW9uIGdldENvbHVtbnNIYXNoKGNvbHVtbnM6IGFueSkge1xuICBjb25zdCBrZXlzOiBhbnkgPSBbXTtcbiAgZWFjaFRyZWUoY29sdW1ucywgKGl0ZW06IGFueSkgPT4ge1xuICAgIGNvbnN0IHRhcmdldCA9IF8ucGljayhpdGVtLCBcImtleVwiLCBcIl9fc2hvd1wiLCBcIl9fZGlzYWJsZWRcIik7XG4gICAga2V5cy5wdXNoKEpTT04uc3RyaW5naWZ5KHRhcmdldCkpO1xuICB9KTtcbiAga2V5cy5zb3J0KCk7XG4gIGxldCBoYXNoID0gXCJcIjtcbiAgZm9yIChjb25zdCBrZXkgb2Yga2V5cykge1xuICAgIGhhc2ggKz0ga2V5O1xuICB9XG4gIHJldHVybiBoYXNoO1xufVxud2F0Y2goXG4gICgpID0+IHtcbiAgICByZXR1cm4gcHJvcHMuY29sdW1ucztcbiAgfSxcbiAgKHZhbHVlKSA9PiB7XG4gICAgc2V0Q3VycmVudFZhbHVlKHZhbHVlKTtcbiAgfVxuKTtcblxuY29uc3QgaW5pdCA9IGFzeW5jICgpID0+IHtcbiAgc2V0Q3VycmVudFZhbHVlKHByb3BzLmNvbHVtbnMpO1xuICBjb25zdCBzdG9yZWRPcHRpb25zID0gYXdhaXQgZ2V0T3B0aW9uc0Zyb21TdG9yYWdlKCk7XG4gIGlmIChzdG9yZWRPcHRpb25zKSB7XG4gICAgY29uc3Qgc3RvcmVIYXNoID0gZ2V0Q29sdW1uc0hhc2goc3RvcmVkT3B0aW9ucyk7XG4gICAgY29uc3Qgb3B0aW9uSGFzaCA9IGdldENvbHVtbnNIYXNoKG9yaWdpbmFsLnZhbHVlKTtcbiAgICBpZiAob3B0aW9uSGFzaCAhPT0gc3RvcmVIYXNoKSB7XG4gICAgICBjb25zb2xlLmxvZyhcImNvbHVtbnMgY2hhbmdlZCwgaWdub3JlIGxvY2FsIHN0b3JhZ2VcIik7XG4gICAgICAvLyDlpoLmnpzlrZfmrrXliJfmnInov4fkv67mlLnvvIzliJnkuI3kvb/nlKjmnKzlnLDorr7nva5cbiAgICAgIHJldHVybjtcbiAgICB9XG4gICAgY3VycmVudENvbHVtbnMudmFsdWUgPSBzdG9yZWRPcHRpb25zO1xuICAgIGF3YWl0IG5leHRUaWNrKCk7XG4gICAgYXdhaXQgc3VibWl0KHRydWUpO1xuICB9XG59O1xuXG5hc3luYyBmdW5jdGlvbiB1cGRhdGUoY2hhbmdlOiAoY3VycmVudENvbHVtbnM6IFJlZjxDb2x1bW5zRmlsdGVySXRlbVtdPikgPT4gUHJvbWlzZTx2b2lkPikge1xuICBhd2FpdCBjaGFuZ2UoY3VycmVudENvbHVtbnMpO1xuICBhd2FpdCBkb19zYXZlKCk7XG59XG5cbmluaXQoKTtcbmRlZmluZUV4cG9zZSh7XG4gIHN0YXJ0LFxuICBzYXZlOiBkb19zYXZlLFxuICB1cGRhdGUsXG4gIG9yaWdpbmFsLFxuICBjb2x1bW5zOiBjdXJyZW50Q29sdW1uc1xufSk7XG5cbmZ1bmN0aW9uIGJ1aWxkVGV4dChlbGVtZW50OiBhbnkpIHtcbiAgcmV0dXJuIGVsZW1lbnQubGFiZWwgfHwgZWxlbWVudC50aXRsZSB8fCBlbGVtZW50LmtleSB8fCBfdGV4dC52YWx1ZS51bm5hbWVkO1xufVxuPC9zY3JpcHQ+XG48c3R5bGUgbGFuZz1cImxlc3NcIj5cbi5mcy10YWJsZS1jb2x1bW5zLWZpbHRlci1zaW1wbGUge1xuICBtaW4td2lkdGg6IDc2MHB4O1xuICBwYWRkaW5nLXRvcDogMjBweDtcbn1cblxuLmZzLXRhYmxlLWNvbHVtbnMtZmlsdGVyIHtcbiAgOmZvY3VzIHtcbiAgICBvdXRsaW5lOiAwO1xuICB9XG5cbiAgW2ZsZXh+PVwiY3Jvc3M6Y2VudGVyXCJdIHtcbiAgICAtbXMtZmxleC1hbGlnbjogY2VudGVyO1xuICAgIGFsaWduLWl0ZW1zOiBjZW50ZXI7XG4gIH1cblxuICBbZmxleH49XCJtYWluOmp1c3RpZnlcIl0ge1xuICAgIC1tcy1mbGV4LXBhY2s6IGp1c3RpZnk7XG4gICAganVzdGlmeS1jb250ZW50OiBzcGFjZS1iZXR3ZWVuO1xuICB9XG5cbiAgW2ZsZXhdIHtcbiAgICBkaXNwbGF5OiAtbXMtZmxleGJveDtcbiAgICBkaXNwbGF5OiBmbGV4O1xuICB9XG5cbiAgW2ZsZXgtYm94PVwiMVwiXSB7XG4gICAgZmxleC1ncm93OiAxO1xuICAgIGZsZXgtc2hyaW5rOiAxO1xuICB9XG5cbiAgW2ZsZXhdID4gKiB7XG4gICAgZGlzcGxheTogZmxleDtcbiAgfVxuXG4gIC5lbC1kcmF3ZXJfX2JvZHkge1xuICAgIGhlaWdodDogMDtcbiAgfVxuXG4gIC5mcy1kcmF3ZXItd3JhcHBlciB7XG4gICAgcGFkZGluZzogMTBweDtcbiAgICBoZWlnaHQ6IDEwMCU7XG4gICAgb3ZlcmZsb3cteTogYXV0bztcbiAgfVxuXG4gIC5mcy1kcmF3ZXItZm9vdGVyIHtcbiAgICBwYWRkaW5nOiAyMHB4O1xuICB9XG5cbiAgLmNvbXBvbmVudC0tbGlzdCB7XG4gICAgbWFyZ2luOiAtMjBweDtcblxuICAgIC5pdGVtLWxhYmVsIHtcbiAgICAgIGZsZXg6IDE7XG4gICAgICBtaW4td2lkdGg6IDA7XG5cbiAgICAgIC5hbnQtY2hlY2tib3ggKyBzcGFuIHtcbiAgICAgICAgd2hpdGUtc3BhY2U6IG5vd3JhcDtcbiAgICAgICAgb3ZlcmZsb3c6IGhpZGRlbjtcbiAgICAgICAgdGV4dC1vdmVyZmxvdzogZWxsaXBzaXM7XG4gICAgICB9XG4gICAgfVxuICAgIC5pdGVtLXJpZ2h0IHtcbiAgICAgIGZsZXgtc2hyaW5rOiAxO1xuICAgICAgZGlzcGxheTogZmxleDtcbiAgICB9XG5cbiAgICAudGl0bGUge1xuICAgICAgZm9udC1zaXplOiAxNHB4O1xuICAgIH1cblxuICAgIC5jb21wb25lbnQtLWxpc3QtaXRlbSB7XG4gICAgICBwYWRkaW5nOiAxMHB4O1xuICAgICAgbWFyZ2luLWJvdHRvbTogMXB4O1xuXG4gICAgICAmLmdob3N0IHtcbiAgICAgICAgb3BhY2l0eTogMC41O1xuICAgICAgfVxuXG4gICAgICAmOmxhc3QtY2hpbGQge1xuICAgICAgICBtYXJnaW4tYm90dG9tOiAwcHg7XG4gICAgICB9XG5cbiAgICAgIC5jb21wb25lbnQtLWxpc3QtaXRlbS1oYW5kbGUge1xuICAgICAgICBtYXJnaW4tbGVmdDogMTBweDtcbiAgICAgICAgY3Vyc29yOiBtb3ZlO1xuXG4gICAgICAgICYuZGlzYWJsZWQge1xuICAgICAgICAgIG9wYWNpdHk6IDAuMztcbiAgICAgICAgICBjdXJzb3I6IHBvaW50ZXI7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG4gIH1cbn1cbjwvc3R5bGU+XG4iLCI8dGVtcGxhdGU+XG4gIDxkaXYgY2xhc3M9XCJmcy10b29sYmFyXCI+XG4gICAgPHRlbXBsYXRlIHYtZm9yPVwiKGl0ZW0sIGtleSkgb2YgY29tcHV0ZWRCdXR0b25zXCIgOmtleT1cImtleVwiPlxuICAgICAgPHRlbXBsYXRlIHYtaWY9XCJpdGVtLnNob3cgIT09IGZhbHNlXCI+XG4gICAgICAgIDxjb21wb25lbnRcbiAgICAgICAgICA6aXM9XCJ1aS5wb3BvdmVyLm5hbWVcIlxuICAgICAgICAgIHYtaWY9XCJrZXkgPT09ICdjb2x1bW5zJyAmJiBjb2x1bW5zRmlsdGVyICYmIGNvbHVtbnNGaWx0ZXI/Lm1vZGUgPT09ICdzaW1wbGUnXCJcbiAgICAgICAgICB2LW1vZGVsOlt1aS5wb3BvdmVyLnZpc2libGVdPVwicG9wb3ZlclZpc2libGVcIlxuICAgICAgICAgIGRpc3BsYXktZGlyZWN0aXZlPVwic2hvd1wiXG4gICAgICAgICAgcGxhY2VtZW50PVwiYm90dG9tXCJcbiAgICAgICAgICA6d2lkdGg9XCI3NjBcIlxuICAgICAgICAgIHRyaWdnZXI9XCJjbGlja1wiXG4gICAgICAgID5cbiAgICAgICAgICA8dGVtcGxhdGUgI1t1aS5wb3BvdmVyLnRyaWdnZXJTbG90TmFtZV0+XG4gICAgICAgICAgICA8ZnMtYnV0dG9uIHYtYmluZD1cIml0ZW1cIiBAY2xpY2s9XCJoYW5kbGVTaW1wbGVDbGlja1wiIC8+XG4gICAgICAgICAgPC90ZW1wbGF0ZT5cbiAgICAgICAgICA8dGVtcGxhdGUgI1t1aS5wb3BvdmVyLmNvbnRlbnRTbG90TmFtZV0+XG4gICAgICAgICAgICA8Y29tcG9uZW50XG4gICAgICAgICAgICAgIDppcz1cImNvbHVtbnNGaWx0ZXIuaXMgfHwgJ2ZzLXRhYmxlLWNvbHVtbnMtZmlsdGVyJ1wiXG4gICAgICAgICAgICAgIHYtaWY9XCJjb2x1bW5zXCJcbiAgICAgICAgICAgICAgcmVmPVwiY29sdW1uc0ZpbHRlclJlZlwiXG4gICAgICAgICAgICAgIHYtbW9kZWw6c2hvdz1cInBvcG92ZXJWaXNpYmxlXCJcbiAgICAgICAgICAgICAgbW9kZT1cInNpbXBsZVwiXG4gICAgICAgICAgICAgIHYtYmluZD1cImNvbHVtbnNGaWx0ZXJcIlxuICAgICAgICAgICAgICA6Y29sdW1ucz1cImNvbHVtbnNcIlxuICAgICAgICAgICAgICA6c3RvcmFnZT1cInN0b3JhZ2VcIlxuICAgICAgICAgICAgICBAdXBkYXRlOmNvbHVtbnM9XCIkZW1pdCgndXBkYXRlOmNvbHVtbnMnLCAkZXZlbnQpXCJcbiAgICAgICAgICAgIC8+XG4gICAgICAgICAgPC90ZW1wbGF0ZT5cbiAgICAgICAgPC9jb21wb25lbnQ+XG4gICAgICAgIDxmcy1idXR0b24gdi1lbHNlIHYtYmluZD1cIml0ZW1cIiBAY2xpY2s9XCJpdGVtLmNsaWNrKClcIiAvPlxuICAgICAgPC90ZW1wbGF0ZT5cbiAgICA8L3RlbXBsYXRlPlxuICAgIDxjb21wb25lbnRcbiAgICAgIDppcz1cImNvbHVtbnNGaWx0ZXIuaXMgfHwgJ2ZzLXRhYmxlLWNvbHVtbnMtZmlsdGVyJ1wiXG4gICAgICB2LWlmPVwiY29sdW1ucyAmJiBjb2x1bW5zRmlsdGVyPy5tb2RlICE9PSAnc2ltcGxlJ1wiXG4gICAgICByZWY9XCJjb2x1bW5zRmlsdGVyUmVmXCJcbiAgICAgIDpzdG9yYWdlPVwic3RvcmFnZVwiXG4gICAgICB2LWJpbmQ9XCJjb2x1bW5zRmlsdGVyXCJcbiAgICAgIDpjb2x1bW5zPVwiY29sdW1uc1wiXG4gICAgICBAdXBkYXRlOmNvbHVtbnM9XCIkZW1pdCgndXBkYXRlOmNvbHVtbnMnLCAkZXZlbnQpXCJcbiAgICAvPlxuICA8L2Rpdj5cbjwvdGVtcGxhdGU+XG5cbjxzY3JpcHQgbGFuZz1cInRzXCI+XG5pbXBvcnQgRnNUYWJsZUNvbHVtbnNGaWx0ZXIgZnJvbSBcIi4vZnMtdGFibGUtY29sdW1ucy1maWx0ZXIvaW5kZXgudnVlXCI7XG5pbXBvcnQgXyBmcm9tIFwibG9kYXNoLWVzXCI7XG5pbXBvcnQgeyBjb21wdXRlZCwgZGVmaW5lQ29tcG9uZW50LCBQcm9wVHlwZSwgcmVmLCBSZWYgfSBmcm9tIFwidnVlXCI7XG5pbXBvcnQgeyB1c2VJMThuIH0gZnJvbSBcIi4uLy4uL2xvY2FsZVwiO1xuaW1wb3J0IHsgQ29uc3RhbnRzIH0gZnJvbSBcIi4uLy4uL3V0aWxzL3V0aWwuY29uc3RhbnRzXCI7XG5pbXBvcnQgeyBCdXR0b25Qcm9wcywgQnV0dG9uc1Byb3BzLCBUYWJsZUNvbHVtbnNQcm9wcyB9IGZyb20gXCIuLi8uLi9kXCI7XG5pbXBvcnQgeyB1c2VNZXJnZSwgdXNlVWkgfSBmcm9tIFwiLi4vLi4vdXNlXCI7XG4vKipcbiAqIOW3peWFt+adoVxuICovXG5leHBvcnQgZGVmYXVsdCBkZWZpbmVDb21wb25lbnQoe1xuICBuYW1lOiBcIkZzVG9vbGJhclwiLFxuICBjb21wb25lbnRzOiB7IEZzVGFibGVDb2x1bW5zRmlsdGVyIH0sXG4gIHByb3BzOiB7XG4gICAgLyoqXG4gICAgICog5oyJ6ZKu6YWN572uXG4gICAgICp7XG4gICAgICogICBzZWFyY2g6e30sIOafpeivolxuICAgICAqICAgcmVmcmVzaDp7fSwg5Yi35pawXG4gICAgICogICBjb21wYWN0Ont9LCDntKflh5HmqKHlvI9cbiAgICAgKiAgIGV4cG9ydDp7fSwg5a+85Ye6XG4gICAgICogICBjb2x1bW5zOnt9IOWIl+iuvue9rlxuICAgICAqfVxuICAgICAqKi9cbiAgICBidXR0b25zOiB7XG4gICAgICB0eXBlOiBPYmplY3RcbiAgICB9LFxuICAgIC8qKlxuICAgICAqIOW9k+WJjeaYr+WQpue0p+WHkeaooeW8j1xuICAgICAqL1xuICAgIGNvbXBhY3Q6IHtcbiAgICAgIHR5cGU6IEJvb2xlYW4sXG4gICAgICBkZWZhdWx0OiB0cnVlXG4gICAgfSxcbiAgICAvKipcbiAgICAgKiDliJfphY3nva5cbiAgICAgKi9cbiAgICBjb2x1bW5zOiB7XG4gICAgICB0eXBlOiBPYmplY3QgYXMgUHJvcFR5cGU8VGFibGVDb2x1bW5zUHJvcHM+LFxuICAgICAgZGVmYXVsdDogdW5kZWZpbmVkXG4gICAgfSxcbiAgICAvKipcbiAgICAgKiDmmK/lkKbkv53lrZjnlKjmiLfliJforr7nva5cbiAgICAgKiDkvKBzdHJpbmfliJnooajnpLrkvKDlhaXnvJPlrZjnmoTkuLtrZXlcbiAgICAgKi9cbiAgICBzdG9yYWdlOiB7XG4gICAgICB0eXBlOiBbU3RyaW5nLCBCb29sZWFuXSxcbiAgICAgIGRlZmF1bHQ6IHRydWVcbiAgICB9LFxuICAgIC8qKlxuICAgICAqIOaPkuanvVxuICAgICAqL1xuICAgIHNsb3RzOiB7fSxcblxuICAgIC8qKlxuICAgICAqIOWIl+iuvue9rumFjee9rlxuICAgICAqL1xuICAgIGNvbHVtbnNGaWx0ZXI6IHtcbiAgICAgIHR5cGU6IE9iamVjdCBhcyBQcm9wVHlwZTxhbnk+XG4gICAgfVxuICB9LFxuICBlbWl0czogW1widXBkYXRlOmNvbHVtbnNcIl0sXG4gIHNldHVwKHByb3BzOiBhbnksIGN0eCkge1xuICAgIGNvbnN0IHsgdCB9ID0gdXNlSTE4bigpO1xuICAgIGNvbnN0IGNvbHVtbnNGaWx0ZXJSZWY6IFJlZiA9IHJlZigpO1xuICAgIGNvbnN0IHsgdWkgfSA9IHVzZVVpKCk7XG4gICAgY29uc3QgeyBtZXJnZSB9ID0gdXNlTWVyZ2UoKTtcbiAgICBjb25zdCBjb21wdXRlZEJ1dHRvbnMgPSBjb21wdXRlZCgoKSA9PiB7XG4gICAgICBjb25zdCBkZWZhdWx0QnV0dG9uczogQnV0dG9uc1Byb3BzPHZvaWQ+ID0ge1xuICAgICAgICBjb2x1bW5zOiB7XG4gICAgICAgICAgY2xpY2s6ICgpID0+IHtcbiAgICAgICAgICAgIGNvbHVtbnNGaWx0ZXJSZWYudmFsdWUuc3RhcnQoKTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH07XG5cbiAgICAgIG1lcmdlKGRlZmF1bHRCdXR0b25zLCBwcm9wcy5idXR0b25zKTtcbiAgICAgIC8vIGlmIChkZWZhdWx0QnV0dG9ucy5zZWFyY2gpIHtcbiAgICAgIC8vICAgZGVmYXVsdEJ1dHRvbnMuc2VhcmNoLnR5cGUgPSBwcm9wcy5zZWFyY2ggPyBcInByaW1hcnlcIiA6IFwiZGVmYXVsdFwiO1xuICAgICAgLy8gfVxuICAgICAgLy8gaWYgKGRlZmF1bHRCdXR0b25zLmNvbXBhY3QpIHtcbiAgICAgIC8vICAgZGVmYXVsdEJ1dHRvbnMuY29tcGFjdC50eXBlID0gcHJvcHMuY29tcGFjdCA/IFwicHJpbWFyeVwiIDogXCJkZWZhdWx0XCI7XG4gICAgICAvLyB9XG5cbiAgICAgIGxldCBzb3J0QXJyOiBCdXR0b25Qcm9wc1tdID0gW107XG4gICAgICBmb3IgKGxldCBkZWZhdWx0QnV0dG9uc0tleSBpbiBkZWZhdWx0QnV0dG9ucykge1xuICAgICAgICBzb3J0QXJyLnB1c2goe1xuICAgICAgICAgIC4uLmRlZmF1bHRCdXR0b25zW2RlZmF1bHRCdXR0b25zS2V5XSxcbiAgICAgICAgICBfa2V5OiBkZWZhdWx0QnV0dG9uc0tleVxuICAgICAgICB9KTtcbiAgICAgIH1cbiAgICAgIHNvcnRBcnIgPSBfLnNvcnRCeShzb3J0QXJyLCAoaXRlbSkgPT4ge1xuICAgICAgICByZXR1cm4gaXRlbS5vcmRlciA/PyBDb25zdGFudHMub3JkZXJEZWZhdWx0O1xuICAgICAgfSk7XG5cbiAgICAgIGNvbnN0IHNvcnRlZEJ1dHRvbnM6IEJ1dHRvbnNQcm9wczx2b2lkPiA9IHt9O1xuXG4gICAgICBzb3J0QXJyLmZvckVhY2goKGl0ZW0pID0+IHtcbiAgICAgICAgbGV0IF9rZXkgPSBpdGVtLl9rZXk7XG4gICAgICAgIGRlbGV0ZSBpdGVtLl9rZXk7XG4gICAgICAgIHNvcnRlZEJ1dHRvbnNbX2tleV0gPSBpdGVtO1xuICAgICAgfSk7XG4gICAgICByZXR1cm4gc29ydGVkQnV0dG9ucztcbiAgICB9KTtcbiAgICBjb25zdCBwb3BvdmVyVmlzaWJsZSA9IHJlZihmYWxzZSk7XG4gICAgY29uc3QgaGFuZGxlU2ltcGxlQ2xpY2sgPSAoKSA9PiB7XG4gICAgICBpZiAodWkudHlwZSA9PT0gXCJlbGVtZW50XCIpIHtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuICAgICAgcG9wb3ZlclZpc2libGUudmFsdWUgPSAhcG9wb3ZlclZpc2libGUudmFsdWU7XG4gICAgfTtcbiAgICByZXR1cm4ge1xuICAgICAgdWksXG4gICAgICBjb2x1bW5zRmlsdGVyUmVmLFxuICAgICAgY29tcHV0ZWRCdXR0b25zLFxuICAgICAgcG9wb3ZlclZpc2libGUsXG4gICAgICBoYW5kbGVTaW1wbGVDbGlja1xuICAgIH07XG4gIH1cbn0pO1xuPC9zY3JpcHQ+XG48c3R5bGUgbGFuZz1cImxlc3NcIj5cbi5mcy10b29sYmFyIHtcbiAgZGlzcGxheTogZmxleDtcblxuICAuZnMtYnV0dG9uIHtcbiAgICBtYXJnaW4tbGVmdDogNXB4O1xuICB9XG59XG48L3N0eWxlPlxuIiwiPHRlbXBsYXRlPlxuICA8ZGl2IGNsYXNzPVwiZnMtdG9vbGJhclwiPlxuICAgIDx0ZW1wbGF0ZSB2LWZvcj1cIihpdGVtLCBrZXkpIG9mIGNvbXB1dGVkQnV0dG9uc1wiIDprZXk9XCJrZXlcIj5cbiAgICAgIDx0ZW1wbGF0ZSB2LWlmPVwiaXRlbS5zaG93ICE9PSBmYWxzZVwiPlxuICAgICAgICA8Y29tcG9uZW50XG4gICAgICAgICAgOmlzPVwidWkucG9wb3Zlci5uYW1lXCJcbiAgICAgICAgICB2LWlmPVwia2V5ID09PSAnY29sdW1ucycgJiYgY29sdW1uc0ZpbHRlciAmJiBjb2x1bW5zRmlsdGVyPy5tb2RlID09PSAnc2ltcGxlJ1wiXG4gICAgICAgICAgdi1tb2RlbDpbdWkucG9wb3Zlci52aXNpYmxlXT1cInBvcG92ZXJWaXNpYmxlXCJcbiAgICAgICAgICBkaXNwbGF5LWRpcmVjdGl2ZT1cInNob3dcIlxuICAgICAgICAgIHBsYWNlbWVudD1cImJvdHRvbVwiXG4gICAgICAgICAgOndpZHRoPVwiNzYwXCJcbiAgICAgICAgICB0cmlnZ2VyPVwiY2xpY2tcIlxuICAgICAgICA+XG4gICAgICAgICAgPHRlbXBsYXRlICNbdWkucG9wb3Zlci50cmlnZ2VyU2xvdE5hbWVdPlxuICAgICAgICAgICAgPGZzLWJ1dHRvbiB2LWJpbmQ9XCJpdGVtXCIgQGNsaWNrPVwiaGFuZGxlU2ltcGxlQ2xpY2tcIiAvPlxuICAgICAgICAgIDwvdGVtcGxhdGU+XG4gICAgICAgICAgPHRlbXBsYXRlICNbdWkucG9wb3Zlci5jb250ZW50U2xvdE5hbWVdPlxuICAgICAgICAgICAgPGNvbXBvbmVudFxuICAgICAgICAgICAgICA6aXM9XCJjb2x1bW5zRmlsdGVyLmlzIHx8ICdmcy10YWJsZS1jb2x1bW5zLWZpbHRlcidcIlxuICAgICAgICAgICAgICB2LWlmPVwiY29sdW1uc1wiXG4gICAgICAgICAgICAgIHJlZj1cImNvbHVtbnNGaWx0ZXJSZWZcIlxuICAgICAgICAgICAgICB2LW1vZGVsOnNob3c9XCJwb3BvdmVyVmlzaWJsZVwiXG4gICAgICAgICAgICAgIG1vZGU9XCJzaW1wbGVcIlxuICAgICAgICAgICAgICB2LWJpbmQ9XCJjb2x1bW5zRmlsdGVyXCJcbiAgICAgICAgICAgICAgOmNvbHVtbnM9XCJjb2x1bW5zXCJcbiAgICAgICAgICAgICAgOnN0b3JhZ2U9XCJzdG9yYWdlXCJcbiAgICAgICAgICAgICAgQHVwZGF0ZTpjb2x1bW5zPVwiJGVtaXQoJ3VwZGF0ZTpjb2x1bW5zJywgJGV2ZW50KVwiXG4gICAgICAgICAgICAvPlxuICAgICAgICAgIDwvdGVtcGxhdGU+XG4gICAgICAgIDwvY29tcG9uZW50PlxuICAgICAgICA8ZnMtYnV0dG9uIHYtZWxzZSB2LWJpbmQ9XCJpdGVtXCIgQGNsaWNrPVwiaXRlbS5jbGljaygpXCIgLz5cbiAgICAgIDwvdGVtcGxhdGU+XG4gICAgPC90ZW1wbGF0ZT5cbiAgICA8Y29tcG9uZW50XG4gICAgICA6aXM9XCJjb2x1bW5zRmlsdGVyLmlzIHx8ICdmcy10YWJsZS1jb2x1bW5zLWZpbHRlcidcIlxuICAgICAgdi1pZj1cImNvbHVtbnMgJiYgY29sdW1uc0ZpbHRlcj8ubW9kZSAhPT0gJ3NpbXBsZSdcIlxuICAgICAgcmVmPVwiY29sdW1uc0ZpbHRlclJlZlwiXG4gICAgICA6c3RvcmFnZT1cInN0b3JhZ2VcIlxuICAgICAgdi1iaW5kPVwiY29sdW1uc0ZpbHRlclwiXG4gICAgICA6Y29sdW1ucz1cImNvbHVtbnNcIlxuICAgICAgQHVwZGF0ZTpjb2x1bW5zPVwiJGVtaXQoJ3VwZGF0ZTpjb2x1bW5zJywgJGV2ZW50KVwiXG4gICAgLz5cbiAgPC9kaXY+XG48L3RlbXBsYXRlPlxuXG48c2NyaXB0IGxhbmc9XCJ0c1wiPlxuaW1wb3J0IEZzVGFibGVDb2x1bW5zRmlsdGVyIGZyb20gXCIuL2ZzLXRhYmxlLWNvbHVtbnMtZmlsdGVyL2luZGV4LnZ1ZVwiO1xuaW1wb3J0IF8gZnJvbSBcImxvZGFzaC1lc1wiO1xuaW1wb3J0IHsgY29tcHV0ZWQsIGRlZmluZUNvbXBvbmVudCwgUHJvcFR5cGUsIHJlZiwgUmVmIH0gZnJvbSBcInZ1ZVwiO1xuaW1wb3J0IHsgdXNlSTE4biB9IGZyb20gXCIuLi8uLi9sb2NhbGVcIjtcbmltcG9ydCB7IENvbnN0YW50cyB9IGZyb20gXCIuLi8uLi91dGlscy91dGlsLmNvbnN0YW50c1wiO1xuaW1wb3J0IHsgQnV0dG9uUHJvcHMsIEJ1dHRvbnNQcm9wcywgVGFibGVDb2x1bW5zUHJvcHMgfSBmcm9tIFwiLi4vLi4vZFwiO1xuaW1wb3J0IHsgdXNlTWVyZ2UsIHVzZVVpIH0gZnJvbSBcIi4uLy4uL3VzZVwiO1xuLyoqXG4gKiDlt6XlhbfmnaFcbiAqL1xuZXhwb3J0IGRlZmF1bHQgZGVmaW5lQ29tcG9uZW50KHtcbiAgbmFtZTogXCJGc1Rvb2xiYXJcIixcbiAgY29tcG9uZW50czogeyBGc1RhYmxlQ29sdW1uc0ZpbHRlciB9LFxuICBwcm9wczoge1xuICAgIC8qKlxuICAgICAqIOaMiemSrumFjee9rlxuICAgICAqe1xuICAgICAqICAgc2VhcmNoOnt9LCDmn6Xor6JcbiAgICAgKiAgIHJlZnJlc2g6e30sIOWIt+aWsFxuICAgICAqICAgY29tcGFjdDp7fSwg57Sn5YeR5qih5byPXG4gICAgICogICBleHBvcnQ6e30sIOWvvOWHulxuICAgICAqICAgY29sdW1uczp7fSDliJforr7nva5cbiAgICAgKn1cbiAgICAgKiovXG4gICAgYnV0dG9uczoge1xuICAgICAgdHlwZTogT2JqZWN0XG4gICAgfSxcbiAgICAvKipcbiAgICAgKiDlvZPliY3mmK/lkKbntKflh5HmqKHlvI9cbiAgICAgKi9cbiAgICBjb21wYWN0OiB7XG4gICAgICB0eXBlOiBCb29sZWFuLFxuICAgICAgZGVmYXVsdDogdHJ1ZVxuICAgIH0sXG4gICAgLyoqXG4gICAgICog5YiX6YWN572uXG4gICAgICovXG4gICAgY29sdW1uczoge1xuICAgICAgdHlwZTogT2JqZWN0IGFzIFByb3BUeXBlPFRhYmxlQ29sdW1uc1Byb3BzPixcbiAgICAgIGRlZmF1bHQ6IHVuZGVmaW5lZFxuICAgIH0sXG4gICAgLyoqXG4gICAgICog5piv5ZCm5L+d5a2Y55So5oi35YiX6K6+572uXG4gICAgICog5Lygc3RyaW5n5YiZ6KGo56S65Lyg5YWl57yT5a2Y55qE5Li7a2V5XG4gICAgICovXG4gICAgc3RvcmFnZToge1xuICAgICAgdHlwZTogW1N0cmluZywgQm9vbGVhbl0sXG4gICAgICBkZWZhdWx0OiB0cnVlXG4gICAgfSxcbiAgICAvKipcbiAgICAgKiDmj5Lmp71cbiAgICAgKi9cbiAgICBzbG90czoge30sXG5cbiAgICAvKipcbiAgICAgKiDliJforr7nva7phY3nva5cbiAgICAgKi9cbiAgICBjb2x1bW5zRmlsdGVyOiB7XG4gICAgICB0eXBlOiBPYmplY3QgYXMgUHJvcFR5cGU8YW55PlxuICAgIH1cbiAgfSxcbiAgZW1pdHM6IFtcInVwZGF0ZTpjb2x1bW5zXCJdLFxuICBzZXR1cChwcm9wczogYW55LCBjdHgpIHtcbiAgICBjb25zdCB7IHQgfSA9IHVzZUkxOG4oKTtcbiAgICBjb25zdCBjb2x1bW5zRmlsdGVyUmVmOiBSZWYgPSByZWYoKTtcbiAgICBjb25zdCB7IHVpIH0gPSB1c2VVaSgpO1xuICAgIGNvbnN0IHsgbWVyZ2UgfSA9IHVzZU1lcmdlKCk7XG4gICAgY29uc3QgY29tcHV0ZWRCdXR0b25zID0gY29tcHV0ZWQoKCkgPT4ge1xuICAgICAgY29uc3QgZGVmYXVsdEJ1dHRvbnM6IEJ1dHRvbnNQcm9wczx2b2lkPiA9IHtcbiAgICAgICAgY29sdW1uczoge1xuICAgICAgICAgIGNsaWNrOiAoKSA9PiB7XG4gICAgICAgICAgICBjb2x1bW5zRmlsdGVyUmVmLnZhbHVlLnN0YXJ0KCk7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9O1xuXG4gICAgICBtZXJnZShkZWZhdWx0QnV0dG9ucywgcHJvcHMuYnV0dG9ucyk7XG4gICAgICAvLyBpZiAoZGVmYXVsdEJ1dHRvbnMuc2VhcmNoKSB7XG4gICAgICAvLyAgIGRlZmF1bHRCdXR0b25zLnNlYXJjaC50eXBlID0gcHJvcHMuc2VhcmNoID8gXCJwcmltYXJ5XCIgOiBcImRlZmF1bHRcIjtcbiAgICAgIC8vIH1cbiAgICAgIC8vIGlmIChkZWZhdWx0QnV0dG9ucy5jb21wYWN0KSB7XG4gICAgICAvLyAgIGRlZmF1bHRCdXR0b25zLmNvbXBhY3QudHlwZSA9IHByb3BzLmNvbXBhY3QgPyBcInByaW1hcnlcIiA6IFwiZGVmYXVsdFwiO1xuICAgICAgLy8gfVxuXG4gICAgICBsZXQgc29ydEFycjogQnV0dG9uUHJvcHNbXSA9IFtdO1xuICAgICAgZm9yIChsZXQgZGVmYXVsdEJ1dHRvbnNLZXkgaW4gZGVmYXVsdEJ1dHRvbnMpIHtcbiAgICAgICAgc29ydEFyci5wdXNoKHtcbiAgICAgICAgICAuLi5kZWZhdWx0QnV0dG9uc1tkZWZhdWx0QnV0dG9uc0tleV0sXG4gICAgICAgICAgX2tleTogZGVmYXVsdEJ1dHRvbnNLZXlcbiAgICAgICAgfSk7XG4gICAgICB9XG4gICAgICBzb3J0QXJyID0gXy5zb3J0Qnkoc29ydEFyciwgKGl0ZW0pID0+IHtcbiAgICAgICAgcmV0dXJuIGl0ZW0ub3JkZXIgPz8gQ29uc3RhbnRzLm9yZGVyRGVmYXVsdDtcbiAgICAgIH0pO1xuXG4gICAgICBjb25zdCBzb3J0ZWRCdXR0b25zOiBCdXR0b25zUHJvcHM8dm9pZD4gPSB7fTtcblxuICAgICAgc29ydEFyci5mb3JFYWNoKChpdGVtKSA9PiB7XG4gICAgICAgIGxldCBfa2V5ID0gaXRlbS5fa2V5O1xuICAgICAgICBkZWxldGUgaXRlbS5fa2V5O1xuICAgICAgICBzb3J0ZWRCdXR0b25zW19rZXldID0gaXRlbTtcbiAgICAgIH0pO1xuICAgICAgcmV0dXJuIHNvcnRlZEJ1dHRvbnM7XG4gICAgfSk7XG4gICAgY29uc3QgcG9wb3ZlclZpc2libGUgPSByZWYoZmFsc2UpO1xuICAgIGNvbnN0IGhhbmRsZVNpbXBsZUNsaWNrID0gKCkgPT4ge1xuICAgICAgaWYgKHVpLnR5cGUgPT09IFwiZWxlbWVudFwiKSB7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cbiAgICAgIHBvcG92ZXJWaXNpYmxlLnZhbHVlID0gIXBvcG92ZXJWaXNpYmxlLnZhbHVlO1xuICAgIH07XG4gICAgcmV0dXJuIHtcbiAgICAgIHVpLFxuICAgICAgY29sdW1uc0ZpbHRlclJlZixcbiAgICAgIGNvbXB1dGVkQnV0dG9ucyxcbiAgICAgIHBvcG92ZXJWaXNpYmxlLFxuICAgICAgaGFuZGxlU2ltcGxlQ2xpY2tcbiAgICB9O1xuICB9XG59KTtcbjwvc2NyaXB0PlxuPHN0eWxlIGxhbmc9XCJsZXNzXCI+XG4uZnMtdG9vbGJhciB7XG4gIGRpc3BsYXk6IGZsZXg7XG5cbiAgLmZzLWJ1dHRvbiB7XG4gICAgbWFyZ2luLWxlZnQ6IDVweDtcbiAgfVxufVxuPC9zdHlsZT5cbiIsIi8qKiFcbiAqIFNvcnRhYmxlIDEuMTQuMFxuICogQGF1dGhvclx0UnViYVhhICAgPHRyYXNoQHJ1YmF4YS5vcmc+XG4gKiBAYXV0aG9yXHRvd2VubSAgICA8b3dlbjIzMzU1QGdtYWlsLmNvbT5cbiAqIEBsaWNlbnNlIE1JVFxuICovXG5mdW5jdGlvbiBvd25LZXlzKG9iamVjdCwgZW51bWVyYWJsZU9ubHkpIHtcbiAgdmFyIGtleXMgPSBPYmplY3Qua2V5cyhvYmplY3QpO1xuXG4gIGlmIChPYmplY3QuZ2V0T3duUHJvcGVydHlTeW1ib2xzKSB7XG4gICAgdmFyIHN5bWJvbHMgPSBPYmplY3QuZ2V0T3duUHJvcGVydHlTeW1ib2xzKG9iamVjdCk7XG5cbiAgICBpZiAoZW51bWVyYWJsZU9ubHkpIHtcbiAgICAgIHN5bWJvbHMgPSBzeW1ib2xzLmZpbHRlcihmdW5jdGlvbiAoc3ltKSB7XG4gICAgICAgIHJldHVybiBPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yKG9iamVjdCwgc3ltKS5lbnVtZXJhYmxlO1xuICAgICAgfSk7XG4gICAgfVxuXG4gICAga2V5cy5wdXNoLmFwcGx5KGtleXMsIHN5bWJvbHMpO1xuICB9XG5cbiAgcmV0dXJuIGtleXM7XG59XG5cbmZ1bmN0aW9uIF9vYmplY3RTcHJlYWQyKHRhcmdldCkge1xuICBmb3IgKHZhciBpID0gMTsgaSA8IGFyZ3VtZW50cy5sZW5ndGg7IGkrKykge1xuICAgIHZhciBzb3VyY2UgPSBhcmd1bWVudHNbaV0gIT0gbnVsbCA/IGFyZ3VtZW50c1tpXSA6IHt9O1xuXG4gICAgaWYgKGkgJSAyKSB7XG4gICAgICBvd25LZXlzKE9iamVjdChzb3VyY2UpLCB0cnVlKS5mb3JFYWNoKGZ1bmN0aW9uIChrZXkpIHtcbiAgICAgICAgX2RlZmluZVByb3BlcnR5KHRhcmdldCwga2V5LCBzb3VyY2Vba2V5XSk7XG4gICAgICB9KTtcbiAgICB9IGVsc2UgaWYgKE9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3JzKSB7XG4gICAgICBPYmplY3QuZGVmaW5lUHJvcGVydGllcyh0YXJnZXQsIE9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3JzKHNvdXJjZSkpO1xuICAgIH0gZWxzZSB7XG4gICAgICBvd25LZXlzKE9iamVjdChzb3VyY2UpKS5mb3JFYWNoKGZ1bmN0aW9uIChrZXkpIHtcbiAgICAgICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KHRhcmdldCwga2V5LCBPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yKHNvdXJjZSwga2V5KSk7XG4gICAgICB9KTtcbiAgICB9XG4gIH1cblxuICByZXR1cm4gdGFyZ2V0O1xufVxuXG5mdW5jdGlvbiBfdHlwZW9mKG9iaikge1xuICBcIkBiYWJlbC9oZWxwZXJzIC0gdHlwZW9mXCI7XG5cbiAgaWYgKHR5cGVvZiBTeW1ib2wgPT09IFwiZnVuY3Rpb25cIiAmJiB0eXBlb2YgU3ltYm9sLml0ZXJhdG9yID09PSBcInN5bWJvbFwiKSB7XG4gICAgX3R5cGVvZiA9IGZ1bmN0aW9uIChvYmopIHtcbiAgICAgIHJldHVybiB0eXBlb2Ygb2JqO1xuICAgIH07XG4gIH0gZWxzZSB7XG4gICAgX3R5cGVvZiA9IGZ1bmN0aW9uIChvYmopIHtcbiAgICAgIHJldHVybiBvYmogJiYgdHlwZW9mIFN5bWJvbCA9PT0gXCJmdW5jdGlvblwiICYmIG9iai5jb25zdHJ1Y3RvciA9PT0gU3ltYm9sICYmIG9iaiAhPT0gU3ltYm9sLnByb3RvdHlwZSA/IFwic3ltYm9sXCIgOiB0eXBlb2Ygb2JqO1xuICAgIH07XG4gIH1cblxuICByZXR1cm4gX3R5cGVvZihvYmopO1xufVxuXG5mdW5jdGlvbiBfZGVmaW5lUHJvcGVydHkob2JqLCBrZXksIHZhbHVlKSB7XG4gIGlmIChrZXkgaW4gb2JqKSB7XG4gICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KG9iaiwga2V5LCB7XG4gICAgICB2YWx1ZTogdmFsdWUsXG4gICAgICBlbnVtZXJhYmxlOiB0cnVlLFxuICAgICAgY29uZmlndXJhYmxlOiB0cnVlLFxuICAgICAgd3JpdGFibGU6IHRydWVcbiAgICB9KTtcbiAgfSBlbHNlIHtcbiAgICBvYmpba2V5XSA9IHZhbHVlO1xuICB9XG5cbiAgcmV0dXJuIG9iajtcbn1cblxuZnVuY3Rpb24gX2V4dGVuZHMoKSB7XG4gIF9leHRlbmRzID0gT2JqZWN0LmFzc2lnbiB8fCBmdW5jdGlvbiAodGFyZ2V0KSB7XG4gICAgZm9yICh2YXIgaSA9IDE7IGkgPCBhcmd1bWVudHMubGVuZ3RoOyBpKyspIHtcbiAgICAgIHZhciBzb3VyY2UgPSBhcmd1bWVudHNbaV07XG5cbiAgICAgIGZvciAodmFyIGtleSBpbiBzb3VyY2UpIHtcbiAgICAgICAgaWYgKE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChzb3VyY2UsIGtleSkpIHtcbiAgICAgICAgICB0YXJnZXRba2V5XSA9IHNvdXJjZVtrZXldO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuXG4gICAgcmV0dXJuIHRhcmdldDtcbiAgfTtcblxuICByZXR1cm4gX2V4dGVuZHMuYXBwbHkodGhpcywgYXJndW1lbnRzKTtcbn1cblxuZnVuY3Rpb24gX29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzTG9vc2Uoc291cmNlLCBleGNsdWRlZCkge1xuICBpZiAoc291cmNlID09IG51bGwpIHJldHVybiB7fTtcbiAgdmFyIHRhcmdldCA9IHt9O1xuICB2YXIgc291cmNlS2V5cyA9IE9iamVjdC5rZXlzKHNvdXJjZSk7XG4gIHZhciBrZXksIGk7XG5cbiAgZm9yIChpID0gMDsgaSA8IHNvdXJjZUtleXMubGVuZ3RoOyBpKyspIHtcbiAgICBrZXkgPSBzb3VyY2VLZXlzW2ldO1xuICAgIGlmIChleGNsdWRlZC5pbmRleE9mKGtleSkgPj0gMCkgY29udGludWU7XG4gICAgdGFyZ2V0W2tleV0gPSBzb3VyY2Vba2V5XTtcbiAgfVxuXG4gIHJldHVybiB0YXJnZXQ7XG59XG5cbmZ1bmN0aW9uIF9vYmplY3RXaXRob3V0UHJvcGVydGllcyhzb3VyY2UsIGV4Y2x1ZGVkKSB7XG4gIGlmIChzb3VyY2UgPT0gbnVsbCkgcmV0dXJuIHt9O1xuXG4gIHZhciB0YXJnZXQgPSBfb2JqZWN0V2l0aG91dFByb3BlcnRpZXNMb29zZShzb3VyY2UsIGV4Y2x1ZGVkKTtcblxuICB2YXIga2V5LCBpO1xuXG4gIGlmIChPYmplY3QuZ2V0T3duUHJvcGVydHlTeW1ib2xzKSB7XG4gICAgdmFyIHNvdXJjZVN5bWJvbEtleXMgPSBPYmplY3QuZ2V0T3duUHJvcGVydHlTeW1ib2xzKHNvdXJjZSk7XG5cbiAgICBmb3IgKGkgPSAwOyBpIDwgc291cmNlU3ltYm9sS2V5cy5sZW5ndGg7IGkrKykge1xuICAgICAga2V5ID0gc291cmNlU3ltYm9sS2V5c1tpXTtcbiAgICAgIGlmIChleGNsdWRlZC5pbmRleE9mKGtleSkgPj0gMCkgY29udGludWU7XG4gICAgICBpZiAoIU9iamVjdC5wcm90b3R5cGUucHJvcGVydHlJc0VudW1lcmFibGUuY2FsbChzb3VyY2UsIGtleSkpIGNvbnRpbnVlO1xuICAgICAgdGFyZ2V0W2tleV0gPSBzb3VyY2Vba2V5XTtcbiAgICB9XG4gIH1cblxuICByZXR1cm4gdGFyZ2V0O1xufVxuXG5mdW5jdGlvbiBfdG9Db25zdW1hYmxlQXJyYXkoYXJyKSB7XG4gIHJldHVybiBfYXJyYXlXaXRob3V0SG9sZXMoYXJyKSB8fCBfaXRlcmFibGVUb0FycmF5KGFycikgfHwgX3Vuc3VwcG9ydGVkSXRlcmFibGVUb0FycmF5KGFycikgfHwgX25vbkl0ZXJhYmxlU3ByZWFkKCk7XG59XG5cbmZ1bmN0aW9uIF9hcnJheVdpdGhvdXRIb2xlcyhhcnIpIHtcbiAgaWYgKEFycmF5LmlzQXJyYXkoYXJyKSkgcmV0dXJuIF9hcnJheUxpa2VUb0FycmF5KGFycik7XG59XG5cbmZ1bmN0aW9uIF9pdGVyYWJsZVRvQXJyYXkoaXRlcikge1xuICBpZiAodHlwZW9mIFN5bWJvbCAhPT0gXCJ1bmRlZmluZWRcIiAmJiBpdGVyW1N5bWJvbC5pdGVyYXRvcl0gIT0gbnVsbCB8fCBpdGVyW1wiQEBpdGVyYXRvclwiXSAhPSBudWxsKSByZXR1cm4gQXJyYXkuZnJvbShpdGVyKTtcbn1cblxuZnVuY3Rpb24gX3Vuc3VwcG9ydGVkSXRlcmFibGVUb0FycmF5KG8sIG1pbkxlbikge1xuICBpZiAoIW8pIHJldHVybjtcbiAgaWYgKHR5cGVvZiBvID09PSBcInN0cmluZ1wiKSByZXR1cm4gX2FycmF5TGlrZVRvQXJyYXkobywgbWluTGVuKTtcbiAgdmFyIG4gPSBPYmplY3QucHJvdG90eXBlLnRvU3RyaW5nLmNhbGwobykuc2xpY2UoOCwgLTEpO1xuICBpZiAobiA9PT0gXCJPYmplY3RcIiAmJiBvLmNvbnN0cnVjdG9yKSBuID0gby5jb25zdHJ1Y3Rvci5uYW1lO1xuICBpZiAobiA9PT0gXCJNYXBcIiB8fCBuID09PSBcIlNldFwiKSByZXR1cm4gQXJyYXkuZnJvbShvKTtcbiAgaWYgKG4gPT09IFwiQXJndW1lbnRzXCIgfHwgL14oPzpVaXxJKW50KD86OHwxNnwzMikoPzpDbGFtcGVkKT9BcnJheSQvLnRlc3QobikpIHJldHVybiBfYXJyYXlMaWtlVG9BcnJheShvLCBtaW5MZW4pO1xufVxuXG5mdW5jdGlvbiBfYXJyYXlMaWtlVG9BcnJheShhcnIsIGxlbikge1xuICBpZiAobGVuID09IG51bGwgfHwgbGVuID4gYXJyLmxlbmd0aCkgbGVuID0gYXJyLmxlbmd0aDtcblxuICBmb3IgKHZhciBpID0gMCwgYXJyMiA9IG5ldyBBcnJheShsZW4pOyBpIDwgbGVuOyBpKyspIGFycjJbaV0gPSBhcnJbaV07XG5cbiAgcmV0dXJuIGFycjI7XG59XG5cbmZ1bmN0aW9uIF9ub25JdGVyYWJsZVNwcmVhZCgpIHtcbiAgdGhyb3cgbmV3IFR5cGVFcnJvcihcIkludmFsaWQgYXR0ZW1wdCB0byBzcHJlYWQgbm9uLWl0ZXJhYmxlIGluc3RhbmNlLlxcbkluIG9yZGVyIHRvIGJlIGl0ZXJhYmxlLCBub24tYXJyYXkgb2JqZWN0cyBtdXN0IGhhdmUgYSBbU3ltYm9sLml0ZXJhdG9yXSgpIG1ldGhvZC5cIik7XG59XG5cbnZhciB2ZXJzaW9uID0gXCIxLjE0LjBcIjtcblxuZnVuY3Rpb24gdXNlckFnZW50KHBhdHRlcm4pIHtcbiAgaWYgKHR5cGVvZiB3aW5kb3cgIT09ICd1bmRlZmluZWQnICYmIHdpbmRvdy5uYXZpZ2F0b3IpIHtcbiAgICByZXR1cm4gISEgLypAX19QVVJFX18qL25hdmlnYXRvci51c2VyQWdlbnQubWF0Y2gocGF0dGVybik7XG4gIH1cbn1cblxudmFyIElFMTFPckxlc3MgPSB1c2VyQWdlbnQoLyg/OlRyaWRlbnQuKnJ2WyA6XT8xMVxcLnxtc2llfGllbW9iaWxlfFdpbmRvd3MgUGhvbmUpL2kpO1xudmFyIEVkZ2UgPSB1c2VyQWdlbnQoL0VkZ2UvaSk7XG52YXIgRmlyZUZveCA9IHVzZXJBZ2VudCgvZmlyZWZveC9pKTtcbnZhciBTYWZhcmkgPSB1c2VyQWdlbnQoL3NhZmFyaS9pKSAmJiAhdXNlckFnZW50KC9jaHJvbWUvaSkgJiYgIXVzZXJBZ2VudCgvYW5kcm9pZC9pKTtcbnZhciBJT1MgPSB1c2VyQWdlbnQoL2lQKGFkfG9kfGhvbmUpL2kpO1xudmFyIENocm9tZUZvckFuZHJvaWQgPSB1c2VyQWdlbnQoL2Nocm9tZS9pKSAmJiB1c2VyQWdlbnQoL2FuZHJvaWQvaSk7XG5cbnZhciBjYXB0dXJlTW9kZSA9IHtcbiAgY2FwdHVyZTogZmFsc2UsXG4gIHBhc3NpdmU6IGZhbHNlXG59O1xuXG5mdW5jdGlvbiBvbihlbCwgZXZlbnQsIGZuKSB7XG4gIGVsLmFkZEV2ZW50TGlzdGVuZXIoZXZlbnQsIGZuLCAhSUUxMU9yTGVzcyAmJiBjYXB0dXJlTW9kZSk7XG59XG5cbmZ1bmN0aW9uIG9mZihlbCwgZXZlbnQsIGZuKSB7XG4gIGVsLnJlbW92ZUV2ZW50TGlzdGVuZXIoZXZlbnQsIGZuLCAhSUUxMU9yTGVzcyAmJiBjYXB0dXJlTW9kZSk7XG59XG5cbmZ1bmN0aW9uIG1hdGNoZXMoXG4vKipIVE1MRWxlbWVudCovXG5lbCxcbi8qKlN0cmluZyovXG5zZWxlY3Rvcikge1xuICBpZiAoIXNlbGVjdG9yKSByZXR1cm47XG4gIHNlbGVjdG9yWzBdID09PSAnPicgJiYgKHNlbGVjdG9yID0gc2VsZWN0b3Iuc3Vic3RyaW5nKDEpKTtcblxuICBpZiAoZWwpIHtcbiAgICB0cnkge1xuICAgICAgaWYgKGVsLm1hdGNoZXMpIHtcbiAgICAgICAgcmV0dXJuIGVsLm1hdGNoZXMoc2VsZWN0b3IpO1xuICAgICAgfSBlbHNlIGlmIChlbC5tc01hdGNoZXNTZWxlY3Rvcikge1xuICAgICAgICByZXR1cm4gZWwubXNNYXRjaGVzU2VsZWN0b3Ioc2VsZWN0b3IpO1xuICAgICAgfSBlbHNlIGlmIChlbC53ZWJraXRNYXRjaGVzU2VsZWN0b3IpIHtcbiAgICAgICAgcmV0dXJuIGVsLndlYmtpdE1hdGNoZXNTZWxlY3RvcihzZWxlY3Rvcik7XG4gICAgICB9XG4gICAgfSBjYXRjaCAoXykge1xuICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH1cbiAgfVxuXG4gIHJldHVybiBmYWxzZTtcbn1cblxuZnVuY3Rpb24gZ2V0UGFyZW50T3JIb3N0KGVsKSB7XG4gIHJldHVybiBlbC5ob3N0ICYmIGVsICE9PSBkb2N1bWVudCAmJiBlbC5ob3N0Lm5vZGVUeXBlID8gZWwuaG9zdCA6IGVsLnBhcmVudE5vZGU7XG59XG5cbmZ1bmN0aW9uIGNsb3Nlc3QoXG4vKipIVE1MRWxlbWVudCovXG5lbCxcbi8qKlN0cmluZyovXG5zZWxlY3Rvcixcbi8qKkhUTUxFbGVtZW50Ki9cbmN0eCwgaW5jbHVkZUNUWCkge1xuICBpZiAoZWwpIHtcbiAgICBjdHggPSBjdHggfHwgZG9jdW1lbnQ7XG5cbiAgICBkbyB7XG4gICAgICBpZiAoc2VsZWN0b3IgIT0gbnVsbCAmJiAoc2VsZWN0b3JbMF0gPT09ICc+JyA/IGVsLnBhcmVudE5vZGUgPT09IGN0eCAmJiBtYXRjaGVzKGVsLCBzZWxlY3RvcikgOiBtYXRjaGVzKGVsLCBzZWxlY3RvcikpIHx8IGluY2x1ZGVDVFggJiYgZWwgPT09IGN0eCkge1xuICAgICAgICByZXR1cm4gZWw7XG4gICAgICB9XG5cbiAgICAgIGlmIChlbCA9PT0gY3R4KSBicmVhaztcbiAgICAgIC8qIGpzaGludCBib3NzOnRydWUgKi9cbiAgICB9IHdoaWxlIChlbCA9IGdldFBhcmVudE9ySG9zdChlbCkpO1xuICB9XG5cbiAgcmV0dXJuIG51bGw7XG59XG5cbnZhciBSX1NQQUNFID0gL1xccysvZztcblxuZnVuY3Rpb24gdG9nZ2xlQ2xhc3MoZWwsIG5hbWUsIHN0YXRlKSB7XG4gIGlmIChlbCAmJiBuYW1lKSB7XG4gICAgaWYgKGVsLmNsYXNzTGlzdCkge1xuICAgICAgZWwuY2xhc3NMaXN0W3N0YXRlID8gJ2FkZCcgOiAncmVtb3ZlJ10obmFtZSk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHZhciBjbGFzc05hbWUgPSAoJyAnICsgZWwuY2xhc3NOYW1lICsgJyAnKS5yZXBsYWNlKFJfU1BBQ0UsICcgJykucmVwbGFjZSgnICcgKyBuYW1lICsgJyAnLCAnICcpO1xuICAgICAgZWwuY2xhc3NOYW1lID0gKGNsYXNzTmFtZSArIChzdGF0ZSA/ICcgJyArIG5hbWUgOiAnJykpLnJlcGxhY2UoUl9TUEFDRSwgJyAnKTtcbiAgICB9XG4gIH1cbn1cblxuZnVuY3Rpb24gY3NzKGVsLCBwcm9wLCB2YWwpIHtcbiAgdmFyIHN0eWxlID0gZWwgJiYgZWwuc3R5bGU7XG5cbiAgaWYgKHN0eWxlKSB7XG4gICAgaWYgKHZhbCA9PT0gdm9pZCAwKSB7XG4gICAgICBpZiAoZG9jdW1lbnQuZGVmYXVsdFZpZXcgJiYgZG9jdW1lbnQuZGVmYXVsdFZpZXcuZ2V0Q29tcHV0ZWRTdHlsZSkge1xuICAgICAgICB2YWwgPSBkb2N1bWVudC5kZWZhdWx0Vmlldy5nZXRDb21wdXRlZFN0eWxlKGVsLCAnJyk7XG4gICAgICB9IGVsc2UgaWYgKGVsLmN1cnJlbnRTdHlsZSkge1xuICAgICAgICB2YWwgPSBlbC5jdXJyZW50U3R5bGU7XG4gICAgICB9XG5cbiAgICAgIHJldHVybiBwcm9wID09PSB2b2lkIDAgPyB2YWwgOiB2YWxbcHJvcF07XG4gICAgfSBlbHNlIHtcbiAgICAgIGlmICghKHByb3AgaW4gc3R5bGUpICYmIHByb3AuaW5kZXhPZignd2Via2l0JykgPT09IC0xKSB7XG4gICAgICAgIHByb3AgPSAnLXdlYmtpdC0nICsgcHJvcDtcbiAgICAgIH1cblxuICAgICAgc3R5bGVbcHJvcF0gPSB2YWwgKyAodHlwZW9mIHZhbCA9PT0gJ3N0cmluZycgPyAnJyA6ICdweCcpO1xuICAgIH1cbiAgfVxufVxuXG5mdW5jdGlvbiBtYXRyaXgoZWwsIHNlbGZPbmx5KSB7XG4gIHZhciBhcHBsaWVkVHJhbnNmb3JtcyA9ICcnO1xuXG4gIGlmICh0eXBlb2YgZWwgPT09ICdzdHJpbmcnKSB7XG4gICAgYXBwbGllZFRyYW5zZm9ybXMgPSBlbDtcbiAgfSBlbHNlIHtcbiAgICBkbyB7XG4gICAgICB2YXIgdHJhbnNmb3JtID0gY3NzKGVsLCAndHJhbnNmb3JtJyk7XG5cbiAgICAgIGlmICh0cmFuc2Zvcm0gJiYgdHJhbnNmb3JtICE9PSAnbm9uZScpIHtcbiAgICAgICAgYXBwbGllZFRyYW5zZm9ybXMgPSB0cmFuc2Zvcm0gKyAnICcgKyBhcHBsaWVkVHJhbnNmb3JtcztcbiAgICAgIH1cbiAgICAgIC8qIGpzaGludCBib3NzOnRydWUgKi9cblxuICAgIH0gd2hpbGUgKCFzZWxmT25seSAmJiAoZWwgPSBlbC5wYXJlbnROb2RlKSk7XG4gIH1cblxuICB2YXIgbWF0cml4Rm4gPSB3aW5kb3cuRE9NTWF0cml4IHx8IHdpbmRvdy5XZWJLaXRDU1NNYXRyaXggfHwgd2luZG93LkNTU01hdHJpeCB8fCB3aW5kb3cuTVNDU1NNYXRyaXg7XG4gIC8qanNoaW50IC1XMDU2ICovXG5cbiAgcmV0dXJuIG1hdHJpeEZuICYmIG5ldyBtYXRyaXhGbihhcHBsaWVkVHJhbnNmb3Jtcyk7XG59XG5cbmZ1bmN0aW9uIGZpbmQoY3R4LCB0YWdOYW1lLCBpdGVyYXRvcikge1xuICBpZiAoY3R4KSB7XG4gICAgdmFyIGxpc3QgPSBjdHguZ2V0RWxlbWVudHNCeVRhZ05hbWUodGFnTmFtZSksXG4gICAgICAgIGkgPSAwLFxuICAgICAgICBuID0gbGlzdC5sZW5ndGg7XG5cbiAgICBpZiAoaXRlcmF0b3IpIHtcbiAgICAgIGZvciAoOyBpIDwgbjsgaSsrKSB7XG4gICAgICAgIGl0ZXJhdG9yKGxpc3RbaV0sIGkpO1xuICAgICAgfVxuICAgIH1cblxuICAgIHJldHVybiBsaXN0O1xuICB9XG5cbiAgcmV0dXJuIFtdO1xufVxuXG5mdW5jdGlvbiBnZXRXaW5kb3dTY3JvbGxpbmdFbGVtZW50KCkge1xuICB2YXIgc2Nyb2xsaW5nRWxlbWVudCA9IGRvY3VtZW50LnNjcm9sbGluZ0VsZW1lbnQ7XG5cbiAgaWYgKHNjcm9sbGluZ0VsZW1lbnQpIHtcbiAgICByZXR1cm4gc2Nyb2xsaW5nRWxlbWVudDtcbiAgfSBlbHNlIHtcbiAgICByZXR1cm4gZG9jdW1lbnQuZG9jdW1lbnRFbGVtZW50O1xuICB9XG59XG4vKipcbiAqIFJldHVybnMgdGhlIFwiYm91bmRpbmcgY2xpZW50IHJlY3RcIiBvZiBnaXZlbiBlbGVtZW50XG4gKiBAcGFyYW0gIHtIVE1MRWxlbWVudH0gZWwgICAgICAgICAgICAgICAgICAgICAgIFRoZSBlbGVtZW50IHdob3NlIGJvdW5kaW5nQ2xpZW50UmVjdCBpcyB3YW50ZWRcbiAqIEBwYXJhbSAge1tCb29sZWFuXX0gcmVsYXRpdmVUb0NvbnRhaW5pbmdCbG9jayAgV2hldGhlciB0aGUgcmVjdCBzaG91bGQgYmUgcmVsYXRpdmUgdG8gdGhlIGNvbnRhaW5pbmcgYmxvY2sgb2YgKGluY2x1ZGluZykgdGhlIGNvbnRhaW5lclxuICogQHBhcmFtICB7W0Jvb2xlYW5dfSByZWxhdGl2ZVRvTm9uU3RhdGljUGFyZW50ICBXaGV0aGVyIHRoZSByZWN0IHNob3VsZCBiZSByZWxhdGl2ZSB0byB0aGUgcmVsYXRpdmUgcGFyZW50IG9mIChpbmNsdWRpbmcpIHRoZSBjb250YWllbnJcbiAqIEBwYXJhbSAge1tCb29sZWFuXX0gdW5kb1NjYWxlICAgICAgICAgICAgICAgICAgV2hldGhlciB0aGUgY29udGFpbmVyJ3Mgc2NhbGUoKSBzaG91bGQgYmUgdW5kb25lXG4gKiBAcGFyYW0gIHtbSFRNTEVsZW1lbnRdfSBjb250YWluZXIgICAgICAgICAgICAgIFRoZSBwYXJlbnQgdGhlIGVsZW1lbnQgd2lsbCBiZSBwbGFjZWQgaW5cbiAqIEByZXR1cm4ge09iamVjdH0gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgVGhlIGJvdW5kaW5nQ2xpZW50UmVjdCBvZiBlbCwgd2l0aCBzcGVjaWZpZWQgYWRqdXN0bWVudHNcbiAqL1xuXG5cbmZ1bmN0aW9uIGdldFJlY3QoZWwsIHJlbGF0aXZlVG9Db250YWluaW5nQmxvY2ssIHJlbGF0aXZlVG9Ob25TdGF0aWNQYXJlbnQsIHVuZG9TY2FsZSwgY29udGFpbmVyKSB7XG4gIGlmICghZWwuZ2V0Qm91bmRpbmdDbGllbnRSZWN0ICYmIGVsICE9PSB3aW5kb3cpIHJldHVybjtcbiAgdmFyIGVsUmVjdCwgdG9wLCBsZWZ0LCBib3R0b20sIHJpZ2h0LCBoZWlnaHQsIHdpZHRoO1xuXG4gIGlmIChlbCAhPT0gd2luZG93ICYmIGVsLnBhcmVudE5vZGUgJiYgZWwgIT09IGdldFdpbmRvd1Njcm9sbGluZ0VsZW1lbnQoKSkge1xuICAgIGVsUmVjdCA9IGVsLmdldEJvdW5kaW5nQ2xpZW50UmVjdCgpO1xuICAgIHRvcCA9IGVsUmVjdC50b3A7XG4gICAgbGVmdCA9IGVsUmVjdC5sZWZ0O1xuICAgIGJvdHRvbSA9IGVsUmVjdC5ib3R0b207XG4gICAgcmlnaHQgPSBlbFJlY3QucmlnaHQ7XG4gICAgaGVpZ2h0ID0gZWxSZWN0LmhlaWdodDtcbiAgICB3aWR0aCA9IGVsUmVjdC53aWR0aDtcbiAgfSBlbHNlIHtcbiAgICB0b3AgPSAwO1xuICAgIGxlZnQgPSAwO1xuICAgIGJvdHRvbSA9IHdpbmRvdy5pbm5lckhlaWdodDtcbiAgICByaWdodCA9IHdpbmRvdy5pbm5lcldpZHRoO1xuICAgIGhlaWdodCA9IHdpbmRvdy5pbm5lckhlaWdodDtcbiAgICB3aWR0aCA9IHdpbmRvdy5pbm5lcldpZHRoO1xuICB9XG5cbiAgaWYgKChyZWxhdGl2ZVRvQ29udGFpbmluZ0Jsb2NrIHx8IHJlbGF0aXZlVG9Ob25TdGF0aWNQYXJlbnQpICYmIGVsICE9PSB3aW5kb3cpIHtcbiAgICAvLyBBZGp1c3QgZm9yIHRyYW5zbGF0ZSgpXG4gICAgY29udGFpbmVyID0gY29udGFpbmVyIHx8IGVsLnBhcmVudE5vZGU7IC8vIHNvbHZlcyAjMTEyMyAoc2VlOiBodHRwczovL3N0YWNrb3ZlcmZsb3cuY29tL2EvMzc5NTM4MDYvNjA4ODMxMilcbiAgICAvLyBOb3QgbmVlZGVkIG9uIDw9IElFMTFcblxuICAgIGlmICghSUUxMU9yTGVzcykge1xuICAgICAgZG8ge1xuICAgICAgICBpZiAoY29udGFpbmVyICYmIGNvbnRhaW5lci5nZXRCb3VuZGluZ0NsaWVudFJlY3QgJiYgKGNzcyhjb250YWluZXIsICd0cmFuc2Zvcm0nKSAhPT0gJ25vbmUnIHx8IHJlbGF0aXZlVG9Ob25TdGF0aWNQYXJlbnQgJiYgY3NzKGNvbnRhaW5lciwgJ3Bvc2l0aW9uJykgIT09ICdzdGF0aWMnKSkge1xuICAgICAgICAgIHZhciBjb250YWluZXJSZWN0ID0gY29udGFpbmVyLmdldEJvdW5kaW5nQ2xpZW50UmVjdCgpOyAvLyBTZXQgcmVsYXRpdmUgdG8gZWRnZXMgb2YgcGFkZGluZyBib3ggb2YgY29udGFpbmVyXG5cbiAgICAgICAgICB0b3AgLT0gY29udGFpbmVyUmVjdC50b3AgKyBwYXJzZUludChjc3MoY29udGFpbmVyLCAnYm9yZGVyLXRvcC13aWR0aCcpKTtcbiAgICAgICAgICBsZWZ0IC09IGNvbnRhaW5lclJlY3QubGVmdCArIHBhcnNlSW50KGNzcyhjb250YWluZXIsICdib3JkZXItbGVmdC13aWR0aCcpKTtcbiAgICAgICAgICBib3R0b20gPSB0b3AgKyBlbFJlY3QuaGVpZ2h0O1xuICAgICAgICAgIHJpZ2h0ID0gbGVmdCArIGVsUmVjdC53aWR0aDtcbiAgICAgICAgICBicmVhaztcbiAgICAgICAgfVxuICAgICAgICAvKiBqc2hpbnQgYm9zczp0cnVlICovXG5cbiAgICAgIH0gd2hpbGUgKGNvbnRhaW5lciA9IGNvbnRhaW5lci5wYXJlbnROb2RlKTtcbiAgICB9XG4gIH1cblxuICBpZiAodW5kb1NjYWxlICYmIGVsICE9PSB3aW5kb3cpIHtcbiAgICAvLyBBZGp1c3QgZm9yIHNjYWxlKClcbiAgICB2YXIgZWxNYXRyaXggPSBtYXRyaXgoY29udGFpbmVyIHx8IGVsKSxcbiAgICAgICAgc2NhbGVYID0gZWxNYXRyaXggJiYgZWxNYXRyaXguYSxcbiAgICAgICAgc2NhbGVZID0gZWxNYXRyaXggJiYgZWxNYXRyaXguZDtcblxuICAgIGlmIChlbE1hdHJpeCkge1xuICAgICAgdG9wIC89IHNjYWxlWTtcbiAgICAgIGxlZnQgLz0gc2NhbGVYO1xuICAgICAgd2lkdGggLz0gc2NhbGVYO1xuICAgICAgaGVpZ2h0IC89IHNjYWxlWTtcbiAgICAgIGJvdHRvbSA9IHRvcCArIGhlaWdodDtcbiAgICAgIHJpZ2h0ID0gbGVmdCArIHdpZHRoO1xuICAgIH1cbiAgfVxuXG4gIHJldHVybiB7XG4gICAgdG9wOiB0b3AsXG4gICAgbGVmdDogbGVmdCxcbiAgICBib3R0b206IGJvdHRvbSxcbiAgICByaWdodDogcmlnaHQsXG4gICAgd2lkdGg6IHdpZHRoLFxuICAgIGhlaWdodDogaGVpZ2h0XG4gIH07XG59XG4vKipcbiAqIENoZWNrcyBpZiBhIHNpZGUgb2YgYW4gZWxlbWVudCBpcyBzY3JvbGxlZCBwYXN0IGEgc2lkZSBvZiBpdHMgcGFyZW50c1xuICogQHBhcmFtICB7SFRNTEVsZW1lbnR9ICBlbCAgICAgICAgICAgVGhlIGVsZW1lbnQgd2hvJ3Mgc2lkZSBiZWluZyBzY3JvbGxlZCBvdXQgb2YgdmlldyBpcyBpbiBxdWVzdGlvblxuICogQHBhcmFtICB7U3RyaW5nfSAgICAgICBlbFNpZGUgICAgICAgU2lkZSBvZiB0aGUgZWxlbWVudCBpbiBxdWVzdGlvbiAoJ3RvcCcsICdsZWZ0JywgJ3JpZ2h0JywgJ2JvdHRvbScpXG4gKiBAcGFyYW0gIHtTdHJpbmd9ICAgICAgIHBhcmVudFNpZGUgICBTaWRlIG9mIHRoZSBwYXJlbnQgaW4gcXVlc3Rpb24gKCd0b3AnLCAnbGVmdCcsICdyaWdodCcsICdib3R0b20nKVxuICogQHJldHVybiB7SFRNTEVsZW1lbnR9ICAgICAgICAgICAgICAgVGhlIHBhcmVudCBzY3JvbGwgZWxlbWVudCB0aGF0IHRoZSBlbCdzIHNpZGUgaXMgc2Nyb2xsZWQgcGFzdCwgb3IgbnVsbCBpZiB0aGVyZSBpcyBubyBzdWNoIGVsZW1lbnRcbiAqL1xuXG5cbmZ1bmN0aW9uIGlzU2Nyb2xsZWRQYXN0KGVsLCBlbFNpZGUsIHBhcmVudFNpZGUpIHtcbiAgdmFyIHBhcmVudCA9IGdldFBhcmVudEF1dG9TY3JvbGxFbGVtZW50KGVsLCB0cnVlKSxcbiAgICAgIGVsU2lkZVZhbCA9IGdldFJlY3QoZWwpW2VsU2lkZV07XG4gIC8qIGpzaGludCBib3NzOnRydWUgKi9cblxuICB3aGlsZSAocGFyZW50KSB7XG4gICAgdmFyIHBhcmVudFNpZGVWYWwgPSBnZXRSZWN0KHBhcmVudClbcGFyZW50U2lkZV0sXG4gICAgICAgIHZpc2libGUgPSB2b2lkIDA7XG5cbiAgICBpZiAocGFyZW50U2lkZSA9PT0gJ3RvcCcgfHwgcGFyZW50U2lkZSA9PT0gJ2xlZnQnKSB7XG4gICAgICB2aXNpYmxlID0gZWxTaWRlVmFsID49IHBhcmVudFNpZGVWYWw7XG4gICAgfSBlbHNlIHtcbiAgICAgIHZpc2libGUgPSBlbFNpZGVWYWwgPD0gcGFyZW50U2lkZVZhbDtcbiAgICB9XG5cbiAgICBpZiAoIXZpc2libGUpIHJldHVybiBwYXJlbnQ7XG4gICAgaWYgKHBhcmVudCA9PT0gZ2V0V2luZG93U2Nyb2xsaW5nRWxlbWVudCgpKSBicmVhaztcbiAgICBwYXJlbnQgPSBnZXRQYXJlbnRBdXRvU2Nyb2xsRWxlbWVudChwYXJlbnQsIGZhbHNlKTtcbiAgfVxuXG4gIHJldHVybiBmYWxzZTtcbn1cbi8qKlxuICogR2V0cyBudGggY2hpbGQgb2YgZWwsIGlnbm9yaW5nIGhpZGRlbiBjaGlsZHJlbiwgc29ydGFibGUncyBlbGVtZW50cyAoZG9lcyBub3QgaWdub3JlIGNsb25lIGlmIGl0J3MgdmlzaWJsZSlcbiAqIGFuZCBub24tZHJhZ2dhYmxlIGVsZW1lbnRzXG4gKiBAcGFyYW0gIHtIVE1MRWxlbWVudH0gZWwgICAgICAgVGhlIHBhcmVudCBlbGVtZW50XG4gKiBAcGFyYW0gIHtOdW1iZXJ9IGNoaWxkTnVtICAgICAgVGhlIGluZGV4IG9mIHRoZSBjaGlsZFxuICogQHBhcmFtICB7T2JqZWN0fSBvcHRpb25zICAgICAgIFBhcmVudCBTb3J0YWJsZSdzIG9wdGlvbnNcbiAqIEByZXR1cm4ge0hUTUxFbGVtZW50fSAgICAgICAgICBUaGUgY2hpbGQgYXQgaW5kZXggY2hpbGROdW0sIG9yIG51bGwgaWYgbm90IGZvdW5kXG4gKi9cblxuXG5mdW5jdGlvbiBnZXRDaGlsZChlbCwgY2hpbGROdW0sIG9wdGlvbnMsIGluY2x1ZGVEcmFnRWwpIHtcbiAgdmFyIGN1cnJlbnRDaGlsZCA9IDAsXG4gICAgICBpID0gMCxcbiAgICAgIGNoaWxkcmVuID0gZWwuY2hpbGRyZW47XG5cbiAgd2hpbGUgKGkgPCBjaGlsZHJlbi5sZW5ndGgpIHtcbiAgICBpZiAoY2hpbGRyZW5baV0uc3R5bGUuZGlzcGxheSAhPT0gJ25vbmUnICYmIGNoaWxkcmVuW2ldICE9PSBTb3J0YWJsZS5naG9zdCAmJiAoaW5jbHVkZURyYWdFbCB8fCBjaGlsZHJlbltpXSAhPT0gU29ydGFibGUuZHJhZ2dlZCkgJiYgY2xvc2VzdChjaGlsZHJlbltpXSwgb3B0aW9ucy5kcmFnZ2FibGUsIGVsLCBmYWxzZSkpIHtcbiAgICAgIGlmIChjdXJyZW50Q2hpbGQgPT09IGNoaWxkTnVtKSB7XG4gICAgICAgIHJldHVybiBjaGlsZHJlbltpXTtcbiAgICAgIH1cblxuICAgICAgY3VycmVudENoaWxkKys7XG4gICAgfVxuXG4gICAgaSsrO1xuICB9XG5cbiAgcmV0dXJuIG51bGw7XG59XG4vKipcbiAqIEdldHMgdGhlIGxhc3QgY2hpbGQgaW4gdGhlIGVsLCBpZ25vcmluZyBnaG9zdEVsIG9yIGludmlzaWJsZSBlbGVtZW50cyAoY2xvbmVzKVxuICogQHBhcmFtICB7SFRNTEVsZW1lbnR9IGVsICAgICAgIFBhcmVudCBlbGVtZW50XG4gKiBAcGFyYW0gIHtzZWxlY3Rvcn0gc2VsZWN0b3IgICAgQW55IG90aGVyIGVsZW1lbnRzIHRoYXQgc2hvdWxkIGJlIGlnbm9yZWRcbiAqIEByZXR1cm4ge0hUTUxFbGVtZW50fSAgICAgICAgICBUaGUgbGFzdCBjaGlsZCwgaWdub3JpbmcgZ2hvc3RFbFxuICovXG5cblxuZnVuY3Rpb24gbGFzdENoaWxkKGVsLCBzZWxlY3Rvcikge1xuICB2YXIgbGFzdCA9IGVsLmxhc3RFbGVtZW50Q2hpbGQ7XG5cbiAgd2hpbGUgKGxhc3QgJiYgKGxhc3QgPT09IFNvcnRhYmxlLmdob3N0IHx8IGNzcyhsYXN0LCAnZGlzcGxheScpID09PSAnbm9uZScgfHwgc2VsZWN0b3IgJiYgIW1hdGNoZXMobGFzdCwgc2VsZWN0b3IpKSkge1xuICAgIGxhc3QgPSBsYXN0LnByZXZpb3VzRWxlbWVudFNpYmxpbmc7XG4gIH1cblxuICByZXR1cm4gbGFzdCB8fCBudWxsO1xufVxuLyoqXG4gKiBSZXR1cm5zIHRoZSBpbmRleCBvZiBhbiBlbGVtZW50IHdpdGhpbiBpdHMgcGFyZW50IGZvciBhIHNlbGVjdGVkIHNldCBvZlxuICogZWxlbWVudHNcbiAqIEBwYXJhbSAge0hUTUxFbGVtZW50fSBlbFxuICogQHBhcmFtICB7c2VsZWN0b3J9IHNlbGVjdG9yXG4gKiBAcmV0dXJuIHtudW1iZXJ9XG4gKi9cblxuXG5mdW5jdGlvbiBpbmRleChlbCwgc2VsZWN0b3IpIHtcbiAgdmFyIGluZGV4ID0gMDtcblxuICBpZiAoIWVsIHx8ICFlbC5wYXJlbnROb2RlKSB7XG4gICAgcmV0dXJuIC0xO1xuICB9XG4gIC8qIGpzaGludCBib3NzOnRydWUgKi9cblxuXG4gIHdoaWxlIChlbCA9IGVsLnByZXZpb3VzRWxlbWVudFNpYmxpbmcpIHtcbiAgICBpZiAoZWwubm9kZU5hbWUudG9VcHBlckNhc2UoKSAhPT0gJ1RFTVBMQVRFJyAmJiBlbCAhPT0gU29ydGFibGUuY2xvbmUgJiYgKCFzZWxlY3RvciB8fCBtYXRjaGVzKGVsLCBzZWxlY3RvcikpKSB7XG4gICAgICBpbmRleCsrO1xuICAgIH1cbiAgfVxuXG4gIHJldHVybiBpbmRleDtcbn1cbi8qKlxuICogUmV0dXJucyB0aGUgc2Nyb2xsIG9mZnNldCBvZiB0aGUgZ2l2ZW4gZWxlbWVudCwgYWRkZWQgd2l0aCBhbGwgdGhlIHNjcm9sbCBvZmZzZXRzIG9mIHBhcmVudCBlbGVtZW50cy5cbiAqIFRoZSB2YWx1ZSBpcyByZXR1cm5lZCBpbiByZWFsIHBpeGVscy5cbiAqIEBwYXJhbSAge0hUTUxFbGVtZW50fSBlbFxuICogQHJldHVybiB7QXJyYXl9ICAgICAgICAgICAgIE9mZnNldHMgaW4gdGhlIGZvcm1hdCBvZiBbbGVmdCwgdG9wXVxuICovXG5cblxuZnVuY3Rpb24gZ2V0UmVsYXRpdmVTY3JvbGxPZmZzZXQoZWwpIHtcbiAgdmFyIG9mZnNldExlZnQgPSAwLFxuICAgICAgb2Zmc2V0VG9wID0gMCxcbiAgICAgIHdpblNjcm9sbGVyID0gZ2V0V2luZG93U2Nyb2xsaW5nRWxlbWVudCgpO1xuXG4gIGlmIChlbCkge1xuICAgIGRvIHtcbiAgICAgIHZhciBlbE1hdHJpeCA9IG1hdHJpeChlbCksXG4gICAgICAgICAgc2NhbGVYID0gZWxNYXRyaXguYSxcbiAgICAgICAgICBzY2FsZVkgPSBlbE1hdHJpeC5kO1xuICAgICAgb2Zmc2V0TGVmdCArPSBlbC5zY3JvbGxMZWZ0ICogc2NhbGVYO1xuICAgICAgb2Zmc2V0VG9wICs9IGVsLnNjcm9sbFRvcCAqIHNjYWxlWTtcbiAgICB9IHdoaWxlIChlbCAhPT0gd2luU2Nyb2xsZXIgJiYgKGVsID0gZWwucGFyZW50Tm9kZSkpO1xuICB9XG5cbiAgcmV0dXJuIFtvZmZzZXRMZWZ0LCBvZmZzZXRUb3BdO1xufVxuLyoqXG4gKiBSZXR1cm5zIHRoZSBpbmRleCBvZiB0aGUgb2JqZWN0IHdpdGhpbiB0aGUgZ2l2ZW4gYXJyYXlcbiAqIEBwYXJhbSAge0FycmF5fSBhcnIgICBBcnJheSB0aGF0IG1heSBvciBtYXkgbm90IGhvbGQgdGhlIG9iamVjdFxuICogQHBhcmFtICB7T2JqZWN0fSBvYmogIEFuIG9iamVjdCB0aGF0IGhhcyBhIGtleS12YWx1ZSBwYWlyIHVuaXF1ZSB0byBhbmQgaWRlbnRpY2FsIHRvIGEga2V5LXZhbHVlIHBhaXIgaW4gdGhlIG9iamVjdCB5b3Ugd2FudCB0byBmaW5kXG4gKiBAcmV0dXJuIHtOdW1iZXJ9ICAgICAgVGhlIGluZGV4IG9mIHRoZSBvYmplY3QgaW4gdGhlIGFycmF5LCBvciAtMVxuICovXG5cblxuZnVuY3Rpb24gaW5kZXhPZk9iamVjdChhcnIsIG9iaikge1xuICBmb3IgKHZhciBpIGluIGFycikge1xuICAgIGlmICghYXJyLmhhc093blByb3BlcnR5KGkpKSBjb250aW51ZTtcblxuICAgIGZvciAodmFyIGtleSBpbiBvYmopIHtcbiAgICAgIGlmIChvYmouaGFzT3duUHJvcGVydHkoa2V5KSAmJiBvYmpba2V5XSA9PT0gYXJyW2ldW2tleV0pIHJldHVybiBOdW1iZXIoaSk7XG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIC0xO1xufVxuXG5mdW5jdGlvbiBnZXRQYXJlbnRBdXRvU2Nyb2xsRWxlbWVudChlbCwgaW5jbHVkZVNlbGYpIHtcbiAgLy8gc2tpcCB0byB3aW5kb3dcbiAgaWYgKCFlbCB8fCAhZWwuZ2V0Qm91bmRpbmdDbGllbnRSZWN0KSByZXR1cm4gZ2V0V2luZG93U2Nyb2xsaW5nRWxlbWVudCgpO1xuICB2YXIgZWxlbSA9IGVsO1xuICB2YXIgZ290U2VsZiA9IGZhbHNlO1xuXG4gIGRvIHtcbiAgICAvLyB3ZSBkb24ndCBuZWVkIHRvIGdldCBlbGVtIGNzcyBpZiBpdCBpc24ndCBldmVuIG92ZXJmbG93aW5nIGluIHRoZSBmaXJzdCBwbGFjZSAocGVyZm9ybWFuY2UpXG4gICAgaWYgKGVsZW0uY2xpZW50V2lkdGggPCBlbGVtLnNjcm9sbFdpZHRoIHx8IGVsZW0uY2xpZW50SGVpZ2h0IDwgZWxlbS5zY3JvbGxIZWlnaHQpIHtcbiAgICAgIHZhciBlbGVtQ1NTID0gY3NzKGVsZW0pO1xuXG4gICAgICBpZiAoZWxlbS5jbGllbnRXaWR0aCA8IGVsZW0uc2Nyb2xsV2lkdGggJiYgKGVsZW1DU1Mub3ZlcmZsb3dYID09ICdhdXRvJyB8fCBlbGVtQ1NTLm92ZXJmbG93WCA9PSAnc2Nyb2xsJykgfHwgZWxlbS5jbGllbnRIZWlnaHQgPCBlbGVtLnNjcm9sbEhlaWdodCAmJiAoZWxlbUNTUy5vdmVyZmxvd1kgPT0gJ2F1dG8nIHx8IGVsZW1DU1Mub3ZlcmZsb3dZID09ICdzY3JvbGwnKSkge1xuICAgICAgICBpZiAoIWVsZW0uZ2V0Qm91bmRpbmdDbGllbnRSZWN0IHx8IGVsZW0gPT09IGRvY3VtZW50LmJvZHkpIHJldHVybiBnZXRXaW5kb3dTY3JvbGxpbmdFbGVtZW50KCk7XG4gICAgICAgIGlmIChnb3RTZWxmIHx8IGluY2x1ZGVTZWxmKSByZXR1cm4gZWxlbTtcbiAgICAgICAgZ290U2VsZiA9IHRydWU7XG4gICAgICB9XG4gICAgfVxuICAgIC8qIGpzaGludCBib3NzOnRydWUgKi9cblxuICB9IHdoaWxlIChlbGVtID0gZWxlbS5wYXJlbnROb2RlKTtcblxuICByZXR1cm4gZ2V0V2luZG93U2Nyb2xsaW5nRWxlbWVudCgpO1xufVxuXG5mdW5jdGlvbiBleHRlbmQoZHN0LCBzcmMpIHtcbiAgaWYgKGRzdCAmJiBzcmMpIHtcbiAgICBmb3IgKHZhciBrZXkgaW4gc3JjKSB7XG4gICAgICBpZiAoc3JjLmhhc093blByb3BlcnR5KGtleSkpIHtcbiAgICAgICAgZHN0W2tleV0gPSBzcmNba2V5XTtcbiAgICAgIH1cbiAgICB9XG4gIH1cblxuICByZXR1cm4gZHN0O1xufVxuXG5mdW5jdGlvbiBpc1JlY3RFcXVhbChyZWN0MSwgcmVjdDIpIHtcbiAgcmV0dXJuIE1hdGgucm91bmQocmVjdDEudG9wKSA9PT0gTWF0aC5yb3VuZChyZWN0Mi50b3ApICYmIE1hdGgucm91bmQocmVjdDEubGVmdCkgPT09IE1hdGgucm91bmQocmVjdDIubGVmdCkgJiYgTWF0aC5yb3VuZChyZWN0MS5oZWlnaHQpID09PSBNYXRoLnJvdW5kKHJlY3QyLmhlaWdodCkgJiYgTWF0aC5yb3VuZChyZWN0MS53aWR0aCkgPT09IE1hdGgucm91bmQocmVjdDIud2lkdGgpO1xufVxuXG52YXIgX3Rocm90dGxlVGltZW91dDtcblxuZnVuY3Rpb24gdGhyb3R0bGUoY2FsbGJhY2ssIG1zKSB7XG4gIHJldHVybiBmdW5jdGlvbiAoKSB7XG4gICAgaWYgKCFfdGhyb3R0bGVUaW1lb3V0KSB7XG4gICAgICB2YXIgYXJncyA9IGFyZ3VtZW50cyxcbiAgICAgICAgICBfdGhpcyA9IHRoaXM7XG5cbiAgICAgIGlmIChhcmdzLmxlbmd0aCA9PT0gMSkge1xuICAgICAgICBjYWxsYmFjay5jYWxsKF90aGlzLCBhcmdzWzBdKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGNhbGxiYWNrLmFwcGx5KF90aGlzLCBhcmdzKTtcbiAgICAgIH1cblxuICAgICAgX3Rocm90dGxlVGltZW91dCA9IHNldFRpbWVvdXQoZnVuY3Rpb24gKCkge1xuICAgICAgICBfdGhyb3R0bGVUaW1lb3V0ID0gdm9pZCAwO1xuICAgICAgfSwgbXMpO1xuICAgIH1cbiAgfTtcbn1cblxuZnVuY3Rpb24gY2FuY2VsVGhyb3R0bGUoKSB7XG4gIGNsZWFyVGltZW91dChfdGhyb3R0bGVUaW1lb3V0KTtcbiAgX3Rocm90dGxlVGltZW91dCA9IHZvaWQgMDtcbn1cblxuZnVuY3Rpb24gc2Nyb2xsQnkoZWwsIHgsIHkpIHtcbiAgZWwuc2Nyb2xsTGVmdCArPSB4O1xuICBlbC5zY3JvbGxUb3AgKz0geTtcbn1cblxuZnVuY3Rpb24gY2xvbmUoZWwpIHtcbiAgdmFyIFBvbHltZXIgPSB3aW5kb3cuUG9seW1lcjtcbiAgdmFyICQgPSB3aW5kb3cualF1ZXJ5IHx8IHdpbmRvdy5aZXB0bztcblxuICBpZiAoUG9seW1lciAmJiBQb2x5bWVyLmRvbSkge1xuICAgIHJldHVybiBQb2x5bWVyLmRvbShlbCkuY2xvbmVOb2RlKHRydWUpO1xuICB9IGVsc2UgaWYgKCQpIHtcbiAgICByZXR1cm4gJChlbCkuY2xvbmUodHJ1ZSlbMF07XG4gIH0gZWxzZSB7XG4gICAgcmV0dXJuIGVsLmNsb25lTm9kZSh0cnVlKTtcbiAgfVxufVxuXG5mdW5jdGlvbiBzZXRSZWN0KGVsLCByZWN0KSB7XG4gIGNzcyhlbCwgJ3Bvc2l0aW9uJywgJ2Fic29sdXRlJyk7XG4gIGNzcyhlbCwgJ3RvcCcsIHJlY3QudG9wKTtcbiAgY3NzKGVsLCAnbGVmdCcsIHJlY3QubGVmdCk7XG4gIGNzcyhlbCwgJ3dpZHRoJywgcmVjdC53aWR0aCk7XG4gIGNzcyhlbCwgJ2hlaWdodCcsIHJlY3QuaGVpZ2h0KTtcbn1cblxuZnVuY3Rpb24gdW5zZXRSZWN0KGVsKSB7XG4gIGNzcyhlbCwgJ3Bvc2l0aW9uJywgJycpO1xuICBjc3MoZWwsICd0b3AnLCAnJyk7XG4gIGNzcyhlbCwgJ2xlZnQnLCAnJyk7XG4gIGNzcyhlbCwgJ3dpZHRoJywgJycpO1xuICBjc3MoZWwsICdoZWlnaHQnLCAnJyk7XG59XG5cbnZhciBleHBhbmRvID0gJ1NvcnRhYmxlJyArIG5ldyBEYXRlKCkuZ2V0VGltZSgpO1xuXG5mdW5jdGlvbiBBbmltYXRpb25TdGF0ZU1hbmFnZXIoKSB7XG4gIHZhciBhbmltYXRpb25TdGF0ZXMgPSBbXSxcbiAgICAgIGFuaW1hdGlvbkNhbGxiYWNrSWQ7XG4gIHJldHVybiB7XG4gICAgY2FwdHVyZUFuaW1hdGlvblN0YXRlOiBmdW5jdGlvbiBjYXB0dXJlQW5pbWF0aW9uU3RhdGUoKSB7XG4gICAgICBhbmltYXRpb25TdGF0ZXMgPSBbXTtcbiAgICAgIGlmICghdGhpcy5vcHRpb25zLmFuaW1hdGlvbikgcmV0dXJuO1xuICAgICAgdmFyIGNoaWxkcmVuID0gW10uc2xpY2UuY2FsbCh0aGlzLmVsLmNoaWxkcmVuKTtcbiAgICAgIGNoaWxkcmVuLmZvckVhY2goZnVuY3Rpb24gKGNoaWxkKSB7XG4gICAgICAgIGlmIChjc3MoY2hpbGQsICdkaXNwbGF5JykgPT09ICdub25lJyB8fCBjaGlsZCA9PT0gU29ydGFibGUuZ2hvc3QpIHJldHVybjtcbiAgICAgICAgYW5pbWF0aW9uU3RhdGVzLnB1c2goe1xuICAgICAgICAgIHRhcmdldDogY2hpbGQsXG4gICAgICAgICAgcmVjdDogZ2V0UmVjdChjaGlsZClcbiAgICAgICAgfSk7XG5cbiAgICAgICAgdmFyIGZyb21SZWN0ID0gX29iamVjdFNwcmVhZDIoe30sIGFuaW1hdGlvblN0YXRlc1thbmltYXRpb25TdGF0ZXMubGVuZ3RoIC0gMV0ucmVjdCk7IC8vIElmIGFuaW1hdGluZzogY29tcGVuc2F0ZSBmb3IgY3VycmVudCBhbmltYXRpb25cblxuXG4gICAgICAgIGlmIChjaGlsZC50aGlzQW5pbWF0aW9uRHVyYXRpb24pIHtcbiAgICAgICAgICB2YXIgY2hpbGRNYXRyaXggPSBtYXRyaXgoY2hpbGQsIHRydWUpO1xuXG4gICAgICAgICAgaWYgKGNoaWxkTWF0cml4KSB7XG4gICAgICAgICAgICBmcm9tUmVjdC50b3AgLT0gY2hpbGRNYXRyaXguZjtcbiAgICAgICAgICAgIGZyb21SZWN0LmxlZnQgLT0gY2hpbGRNYXRyaXguZTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICBjaGlsZC5mcm9tUmVjdCA9IGZyb21SZWN0O1xuICAgICAgfSk7XG4gICAgfSxcbiAgICBhZGRBbmltYXRpb25TdGF0ZTogZnVuY3Rpb24gYWRkQW5pbWF0aW9uU3RhdGUoc3RhdGUpIHtcbiAgICAgIGFuaW1hdGlvblN0YXRlcy5wdXNoKHN0YXRlKTtcbiAgICB9LFxuICAgIHJlbW92ZUFuaW1hdGlvblN0YXRlOiBmdW5jdGlvbiByZW1vdmVBbmltYXRpb25TdGF0ZSh0YXJnZXQpIHtcbiAgICAgIGFuaW1hdGlvblN0YXRlcy5zcGxpY2UoaW5kZXhPZk9iamVjdChhbmltYXRpb25TdGF0ZXMsIHtcbiAgICAgICAgdGFyZ2V0OiB0YXJnZXRcbiAgICAgIH0pLCAxKTtcbiAgICB9LFxuICAgIGFuaW1hdGVBbGw6IGZ1bmN0aW9uIGFuaW1hdGVBbGwoY2FsbGJhY2spIHtcbiAgICAgIHZhciBfdGhpcyA9IHRoaXM7XG5cbiAgICAgIGlmICghdGhpcy5vcHRpb25zLmFuaW1hdGlvbikge1xuICAgICAgICBjbGVhclRpbWVvdXQoYW5pbWF0aW9uQ2FsbGJhY2tJZCk7XG4gICAgICAgIGlmICh0eXBlb2YgY2FsbGJhY2sgPT09ICdmdW5jdGlvbicpIGNhbGxiYWNrKCk7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cblxuICAgICAgdmFyIGFuaW1hdGluZyA9IGZhbHNlLFxuICAgICAgICAgIGFuaW1hdGlvblRpbWUgPSAwO1xuICAgICAgYW5pbWF0aW9uU3RhdGVzLmZvckVhY2goZnVuY3Rpb24gKHN0YXRlKSB7XG4gICAgICAgIHZhciB0aW1lID0gMCxcbiAgICAgICAgICAgIHRhcmdldCA9IHN0YXRlLnRhcmdldCxcbiAgICAgICAgICAgIGZyb21SZWN0ID0gdGFyZ2V0LmZyb21SZWN0LFxuICAgICAgICAgICAgdG9SZWN0ID0gZ2V0UmVjdCh0YXJnZXQpLFxuICAgICAgICAgICAgcHJldkZyb21SZWN0ID0gdGFyZ2V0LnByZXZGcm9tUmVjdCxcbiAgICAgICAgICAgIHByZXZUb1JlY3QgPSB0YXJnZXQucHJldlRvUmVjdCxcbiAgICAgICAgICAgIGFuaW1hdGluZ1JlY3QgPSBzdGF0ZS5yZWN0LFxuICAgICAgICAgICAgdGFyZ2V0TWF0cml4ID0gbWF0cml4KHRhcmdldCwgdHJ1ZSk7XG5cbiAgICAgICAgaWYgKHRhcmdldE1hdHJpeCkge1xuICAgICAgICAgIC8vIENvbXBlbnNhdGUgZm9yIGN1cnJlbnQgYW5pbWF0aW9uXG4gICAgICAgICAgdG9SZWN0LnRvcCAtPSB0YXJnZXRNYXRyaXguZjtcbiAgICAgICAgICB0b1JlY3QubGVmdCAtPSB0YXJnZXRNYXRyaXguZTtcbiAgICAgICAgfVxuXG4gICAgICAgIHRhcmdldC50b1JlY3QgPSB0b1JlY3Q7XG5cbiAgICAgICAgaWYgKHRhcmdldC50aGlzQW5pbWF0aW9uRHVyYXRpb24pIHtcbiAgICAgICAgICAvLyBDb3VsZCBhbHNvIGNoZWNrIGlmIGFuaW1hdGluZ1JlY3QgaXMgYmV0d2VlbiBmcm9tUmVjdCBhbmQgdG9SZWN0XG4gICAgICAgICAgaWYgKGlzUmVjdEVxdWFsKHByZXZGcm9tUmVjdCwgdG9SZWN0KSAmJiAhaXNSZWN0RXF1YWwoZnJvbVJlY3QsIHRvUmVjdCkgJiYgLy8gTWFrZSBzdXJlIGFuaW1hdGluZ1JlY3QgaXMgb24gbGluZSBiZXR3ZWVuIHRvUmVjdCAmIGZyb21SZWN0XG4gICAgICAgICAgKGFuaW1hdGluZ1JlY3QudG9wIC0gdG9SZWN0LnRvcCkgLyAoYW5pbWF0aW5nUmVjdC5sZWZ0IC0gdG9SZWN0LmxlZnQpID09PSAoZnJvbVJlY3QudG9wIC0gdG9SZWN0LnRvcCkgLyAoZnJvbVJlY3QubGVmdCAtIHRvUmVjdC5sZWZ0KSkge1xuICAgICAgICAgICAgLy8gSWYgcmV0dXJuaW5nIHRvIHNhbWUgcGxhY2UgYXMgc3RhcnRlZCBmcm9tIGFuaW1hdGlvbiBhbmQgb24gc2FtZSBheGlzXG4gICAgICAgICAgICB0aW1lID0gY2FsY3VsYXRlUmVhbFRpbWUoYW5pbWF0aW5nUmVjdCwgcHJldkZyb21SZWN0LCBwcmV2VG9SZWN0LCBfdGhpcy5vcHRpb25zKTtcbiAgICAgICAgICB9XG4gICAgICAgIH0gLy8gaWYgZnJvbVJlY3QgIT0gdG9SZWN0OiBhbmltYXRlXG5cblxuICAgICAgICBpZiAoIWlzUmVjdEVxdWFsKHRvUmVjdCwgZnJvbVJlY3QpKSB7XG4gICAgICAgICAgdGFyZ2V0LnByZXZGcm9tUmVjdCA9IGZyb21SZWN0O1xuICAgICAgICAgIHRhcmdldC5wcmV2VG9SZWN0ID0gdG9SZWN0O1xuXG4gICAgICAgICAgaWYgKCF0aW1lKSB7XG4gICAgICAgICAgICB0aW1lID0gX3RoaXMub3B0aW9ucy5hbmltYXRpb247XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgX3RoaXMuYW5pbWF0ZSh0YXJnZXQsIGFuaW1hdGluZ1JlY3QsIHRvUmVjdCwgdGltZSk7XG4gICAgICAgIH1cblxuICAgICAgICBpZiAodGltZSkge1xuICAgICAgICAgIGFuaW1hdGluZyA9IHRydWU7XG4gICAgICAgICAgYW5pbWF0aW9uVGltZSA9IE1hdGgubWF4KGFuaW1hdGlvblRpbWUsIHRpbWUpO1xuICAgICAgICAgIGNsZWFyVGltZW91dCh0YXJnZXQuYW5pbWF0aW9uUmVzZXRUaW1lcik7XG4gICAgICAgICAgdGFyZ2V0LmFuaW1hdGlvblJlc2V0VGltZXIgPSBzZXRUaW1lb3V0KGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgIHRhcmdldC5hbmltYXRpb25UaW1lID0gMDtcbiAgICAgICAgICAgIHRhcmdldC5wcmV2RnJvbVJlY3QgPSBudWxsO1xuICAgICAgICAgICAgdGFyZ2V0LmZyb21SZWN0ID0gbnVsbDtcbiAgICAgICAgICAgIHRhcmdldC5wcmV2VG9SZWN0ID0gbnVsbDtcbiAgICAgICAgICAgIHRhcmdldC50aGlzQW5pbWF0aW9uRHVyYXRpb24gPSBudWxsO1xuICAgICAgICAgIH0sIHRpbWUpO1xuICAgICAgICAgIHRhcmdldC50aGlzQW5pbWF0aW9uRHVyYXRpb24gPSB0aW1lO1xuICAgICAgICB9XG4gICAgICB9KTtcbiAgICAgIGNsZWFyVGltZW91dChhbmltYXRpb25DYWxsYmFja0lkKTtcblxuICAgICAgaWYgKCFhbmltYXRpbmcpIHtcbiAgICAgICAgaWYgKHR5cGVvZiBjYWxsYmFjayA9PT0gJ2Z1bmN0aW9uJykgY2FsbGJhY2soKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGFuaW1hdGlvbkNhbGxiYWNrSWQgPSBzZXRUaW1lb3V0KGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICBpZiAodHlwZW9mIGNhbGxiYWNrID09PSAnZnVuY3Rpb24nKSBjYWxsYmFjaygpO1xuICAgICAgICB9LCBhbmltYXRpb25UaW1lKTtcbiAgICAgIH1cblxuICAgICAgYW5pbWF0aW9uU3RhdGVzID0gW107XG4gICAgfSxcbiAgICBhbmltYXRlOiBmdW5jdGlvbiBhbmltYXRlKHRhcmdldCwgY3VycmVudFJlY3QsIHRvUmVjdCwgZHVyYXRpb24pIHtcbiAgICAgIGlmIChkdXJhdGlvbikge1xuICAgICAgICBjc3ModGFyZ2V0LCAndHJhbnNpdGlvbicsICcnKTtcbiAgICAgICAgY3NzKHRhcmdldCwgJ3RyYW5zZm9ybScsICcnKTtcbiAgICAgICAgdmFyIGVsTWF0cml4ID0gbWF0cml4KHRoaXMuZWwpLFxuICAgICAgICAgICAgc2NhbGVYID0gZWxNYXRyaXggJiYgZWxNYXRyaXguYSxcbiAgICAgICAgICAgIHNjYWxlWSA9IGVsTWF0cml4ICYmIGVsTWF0cml4LmQsXG4gICAgICAgICAgICB0cmFuc2xhdGVYID0gKGN1cnJlbnRSZWN0LmxlZnQgLSB0b1JlY3QubGVmdCkgLyAoc2NhbGVYIHx8IDEpLFxuICAgICAgICAgICAgdHJhbnNsYXRlWSA9IChjdXJyZW50UmVjdC50b3AgLSB0b1JlY3QudG9wKSAvIChzY2FsZVkgfHwgMSk7XG4gICAgICAgIHRhcmdldC5hbmltYXRpbmdYID0gISF0cmFuc2xhdGVYO1xuICAgICAgICB0YXJnZXQuYW5pbWF0aW5nWSA9ICEhdHJhbnNsYXRlWTtcbiAgICAgICAgY3NzKHRhcmdldCwgJ3RyYW5zZm9ybScsICd0cmFuc2xhdGUzZCgnICsgdHJhbnNsYXRlWCArICdweCwnICsgdHJhbnNsYXRlWSArICdweCwwKScpO1xuICAgICAgICB0aGlzLmZvclJlcGFpbnREdW1teSA9IHJlcGFpbnQodGFyZ2V0KTsgLy8gcmVwYWludFxuXG4gICAgICAgIGNzcyh0YXJnZXQsICd0cmFuc2l0aW9uJywgJ3RyYW5zZm9ybSAnICsgZHVyYXRpb24gKyAnbXMnICsgKHRoaXMub3B0aW9ucy5lYXNpbmcgPyAnICcgKyB0aGlzLm9wdGlvbnMuZWFzaW5nIDogJycpKTtcbiAgICAgICAgY3NzKHRhcmdldCwgJ3RyYW5zZm9ybScsICd0cmFuc2xhdGUzZCgwLDAsMCknKTtcbiAgICAgICAgdHlwZW9mIHRhcmdldC5hbmltYXRlZCA9PT0gJ251bWJlcicgJiYgY2xlYXJUaW1lb3V0KHRhcmdldC5hbmltYXRlZCk7XG4gICAgICAgIHRhcmdldC5hbmltYXRlZCA9IHNldFRpbWVvdXQoZnVuY3Rpb24gKCkge1xuICAgICAgICAgIGNzcyh0YXJnZXQsICd0cmFuc2l0aW9uJywgJycpO1xuICAgICAgICAgIGNzcyh0YXJnZXQsICd0cmFuc2Zvcm0nLCAnJyk7XG4gICAgICAgICAgdGFyZ2V0LmFuaW1hdGVkID0gZmFsc2U7XG4gICAgICAgICAgdGFyZ2V0LmFuaW1hdGluZ1ggPSBmYWxzZTtcbiAgICAgICAgICB0YXJnZXQuYW5pbWF0aW5nWSA9IGZhbHNlO1xuICAgICAgICB9LCBkdXJhdGlvbik7XG4gICAgICB9XG4gICAgfVxuICB9O1xufVxuXG5mdW5jdGlvbiByZXBhaW50KHRhcmdldCkge1xuICByZXR1cm4gdGFyZ2V0Lm9mZnNldFdpZHRoO1xufVxuXG5mdW5jdGlvbiBjYWxjdWxhdGVSZWFsVGltZShhbmltYXRpbmdSZWN0LCBmcm9tUmVjdCwgdG9SZWN0LCBvcHRpb25zKSB7XG4gIHJldHVybiBNYXRoLnNxcnQoTWF0aC5wb3coZnJvbVJlY3QudG9wIC0gYW5pbWF0aW5nUmVjdC50b3AsIDIpICsgTWF0aC5wb3coZnJvbVJlY3QubGVmdCAtIGFuaW1hdGluZ1JlY3QubGVmdCwgMikpIC8gTWF0aC5zcXJ0KE1hdGgucG93KGZyb21SZWN0LnRvcCAtIHRvUmVjdC50b3AsIDIpICsgTWF0aC5wb3coZnJvbVJlY3QubGVmdCAtIHRvUmVjdC5sZWZ0LCAyKSkgKiBvcHRpb25zLmFuaW1hdGlvbjtcbn1cblxudmFyIHBsdWdpbnMgPSBbXTtcbnZhciBkZWZhdWx0cyA9IHtcbiAgaW5pdGlhbGl6ZUJ5RGVmYXVsdDogdHJ1ZVxufTtcbnZhciBQbHVnaW5NYW5hZ2VyID0ge1xuICBtb3VudDogZnVuY3Rpb24gbW91bnQocGx1Z2luKSB7XG4gICAgLy8gU2V0IGRlZmF1bHQgc3RhdGljIHByb3BlcnRpZXNcbiAgICBmb3IgKHZhciBvcHRpb24gaW4gZGVmYXVsdHMpIHtcbiAgICAgIGlmIChkZWZhdWx0cy5oYXNPd25Qcm9wZXJ0eShvcHRpb24pICYmICEob3B0aW9uIGluIHBsdWdpbikpIHtcbiAgICAgICAgcGx1Z2luW29wdGlvbl0gPSBkZWZhdWx0c1tvcHRpb25dO1xuICAgICAgfVxuICAgIH1cblxuICAgIHBsdWdpbnMuZm9yRWFjaChmdW5jdGlvbiAocCkge1xuICAgICAgaWYgKHAucGx1Z2luTmFtZSA9PT0gcGx1Z2luLnBsdWdpbk5hbWUpIHtcbiAgICAgICAgdGhyb3cgXCJTb3J0YWJsZTogQ2Fubm90IG1vdW50IHBsdWdpbiBcIi5jb25jYXQocGx1Z2luLnBsdWdpbk5hbWUsIFwiIG1vcmUgdGhhbiBvbmNlXCIpO1xuICAgICAgfVxuICAgIH0pO1xuICAgIHBsdWdpbnMucHVzaChwbHVnaW4pO1xuICB9LFxuICBwbHVnaW5FdmVudDogZnVuY3Rpb24gcGx1Z2luRXZlbnQoZXZlbnROYW1lLCBzb3J0YWJsZSwgZXZ0KSB7XG4gICAgdmFyIF90aGlzID0gdGhpcztcblxuICAgIHRoaXMuZXZlbnRDYW5jZWxlZCA9IGZhbHNlO1xuXG4gICAgZXZ0LmNhbmNlbCA9IGZ1bmN0aW9uICgpIHtcbiAgICAgIF90aGlzLmV2ZW50Q2FuY2VsZWQgPSB0cnVlO1xuICAgIH07XG5cbiAgICB2YXIgZXZlbnROYW1lR2xvYmFsID0gZXZlbnROYW1lICsgJ0dsb2JhbCc7XG4gICAgcGx1Z2lucy5mb3JFYWNoKGZ1bmN0aW9uIChwbHVnaW4pIHtcbiAgICAgIGlmICghc29ydGFibGVbcGx1Z2luLnBsdWdpbk5hbWVdKSByZXR1cm47IC8vIEZpcmUgZ2xvYmFsIGV2ZW50cyBpZiBpdCBleGlzdHMgaW4gdGhpcyBzb3J0YWJsZVxuXG4gICAgICBpZiAoc29ydGFibGVbcGx1Z2luLnBsdWdpbk5hbWVdW2V2ZW50TmFtZUdsb2JhbF0pIHtcbiAgICAgICAgc29ydGFibGVbcGx1Z2luLnBsdWdpbk5hbWVdW2V2ZW50TmFtZUdsb2JhbF0oX29iamVjdFNwcmVhZDIoe1xuICAgICAgICAgIHNvcnRhYmxlOiBzb3J0YWJsZVxuICAgICAgICB9LCBldnQpKTtcbiAgICAgIH0gLy8gT25seSBmaXJlIHBsdWdpbiBldmVudCBpZiBwbHVnaW4gaXMgZW5hYmxlZCBpbiB0aGlzIHNvcnRhYmxlLFxuICAgICAgLy8gYW5kIHBsdWdpbiBoYXMgZXZlbnQgZGVmaW5lZFxuXG5cbiAgICAgIGlmIChzb3J0YWJsZS5vcHRpb25zW3BsdWdpbi5wbHVnaW5OYW1lXSAmJiBzb3J0YWJsZVtwbHVnaW4ucGx1Z2luTmFtZV1bZXZlbnROYW1lXSkge1xuICAgICAgICBzb3J0YWJsZVtwbHVnaW4ucGx1Z2luTmFtZV1bZXZlbnROYW1lXShfb2JqZWN0U3ByZWFkMih7XG4gICAgICAgICAgc29ydGFibGU6IHNvcnRhYmxlXG4gICAgICAgIH0sIGV2dCkpO1xuICAgICAgfVxuICAgIH0pO1xuICB9LFxuICBpbml0aWFsaXplUGx1Z2luczogZnVuY3Rpb24gaW5pdGlhbGl6ZVBsdWdpbnMoc29ydGFibGUsIGVsLCBkZWZhdWx0cywgb3B0aW9ucykge1xuICAgIHBsdWdpbnMuZm9yRWFjaChmdW5jdGlvbiAocGx1Z2luKSB7XG4gICAgICB2YXIgcGx1Z2luTmFtZSA9IHBsdWdpbi5wbHVnaW5OYW1lO1xuICAgICAgaWYgKCFzb3J0YWJsZS5vcHRpb25zW3BsdWdpbk5hbWVdICYmICFwbHVnaW4uaW5pdGlhbGl6ZUJ5RGVmYXVsdCkgcmV0dXJuO1xuICAgICAgdmFyIGluaXRpYWxpemVkID0gbmV3IHBsdWdpbihzb3J0YWJsZSwgZWwsIHNvcnRhYmxlLm9wdGlvbnMpO1xuICAgICAgaW5pdGlhbGl6ZWQuc29ydGFibGUgPSBzb3J0YWJsZTtcbiAgICAgIGluaXRpYWxpemVkLm9wdGlvbnMgPSBzb3J0YWJsZS5vcHRpb25zO1xuICAgICAgc29ydGFibGVbcGx1Z2luTmFtZV0gPSBpbml0aWFsaXplZDsgLy8gQWRkIGRlZmF1bHQgb3B0aW9ucyBmcm9tIHBsdWdpblxuXG4gICAgICBfZXh0ZW5kcyhkZWZhdWx0cywgaW5pdGlhbGl6ZWQuZGVmYXVsdHMpO1xuICAgIH0pO1xuXG4gICAgZm9yICh2YXIgb3B0aW9uIGluIHNvcnRhYmxlLm9wdGlvbnMpIHtcbiAgICAgIGlmICghc29ydGFibGUub3B0aW9ucy5oYXNPd25Qcm9wZXJ0eShvcHRpb24pKSBjb250aW51ZTtcbiAgICAgIHZhciBtb2RpZmllZCA9IHRoaXMubW9kaWZ5T3B0aW9uKHNvcnRhYmxlLCBvcHRpb24sIHNvcnRhYmxlLm9wdGlvbnNbb3B0aW9uXSk7XG5cbiAgICAgIGlmICh0eXBlb2YgbW9kaWZpZWQgIT09ICd1bmRlZmluZWQnKSB7XG4gICAgICAgIHNvcnRhYmxlLm9wdGlvbnNbb3B0aW9uXSA9IG1vZGlmaWVkO1xuICAgICAgfVxuICAgIH1cbiAgfSxcbiAgZ2V0RXZlbnRQcm9wZXJ0aWVzOiBmdW5jdGlvbiBnZXRFdmVudFByb3BlcnRpZXMobmFtZSwgc29ydGFibGUpIHtcbiAgICB2YXIgZXZlbnRQcm9wZXJ0aWVzID0ge307XG4gICAgcGx1Z2lucy5mb3JFYWNoKGZ1bmN0aW9uIChwbHVnaW4pIHtcbiAgICAgIGlmICh0eXBlb2YgcGx1Z2luLmV2ZW50UHJvcGVydGllcyAhPT0gJ2Z1bmN0aW9uJykgcmV0dXJuO1xuXG4gICAgICBfZXh0ZW5kcyhldmVudFByb3BlcnRpZXMsIHBsdWdpbi5ldmVudFByb3BlcnRpZXMuY2FsbChzb3J0YWJsZVtwbHVnaW4ucGx1Z2luTmFtZV0sIG5hbWUpKTtcbiAgICB9KTtcbiAgICByZXR1cm4gZXZlbnRQcm9wZXJ0aWVzO1xuICB9LFxuICBtb2RpZnlPcHRpb246IGZ1bmN0aW9uIG1vZGlmeU9wdGlvbihzb3J0YWJsZSwgbmFtZSwgdmFsdWUpIHtcbiAgICB2YXIgbW9kaWZpZWRWYWx1ZTtcbiAgICBwbHVnaW5zLmZvckVhY2goZnVuY3Rpb24gKHBsdWdpbikge1xuICAgICAgLy8gUGx1Z2luIG11c3QgZXhpc3Qgb24gdGhlIFNvcnRhYmxlXG4gICAgICBpZiAoIXNvcnRhYmxlW3BsdWdpbi5wbHVnaW5OYW1lXSkgcmV0dXJuOyAvLyBJZiBzdGF0aWMgb3B0aW9uIGxpc3RlbmVyIGV4aXN0cyBmb3IgdGhpcyBvcHRpb24sIGNhbGwgaW4gdGhlIGNvbnRleHQgb2YgdGhlIFNvcnRhYmxlJ3MgaW5zdGFuY2Ugb2YgdGhpcyBwbHVnaW5cblxuICAgICAgaWYgKHBsdWdpbi5vcHRpb25MaXN0ZW5lcnMgJiYgdHlwZW9mIHBsdWdpbi5vcHRpb25MaXN0ZW5lcnNbbmFtZV0gPT09ICdmdW5jdGlvbicpIHtcbiAgICAgICAgbW9kaWZpZWRWYWx1ZSA9IHBsdWdpbi5vcHRpb25MaXN0ZW5lcnNbbmFtZV0uY2FsbChzb3J0YWJsZVtwbHVnaW4ucGx1Z2luTmFtZV0sIHZhbHVlKTtcbiAgICAgIH1cbiAgICB9KTtcbiAgICByZXR1cm4gbW9kaWZpZWRWYWx1ZTtcbiAgfVxufTtcblxuZnVuY3Rpb24gZGlzcGF0Y2hFdmVudChfcmVmKSB7XG4gIHZhciBzb3J0YWJsZSA9IF9yZWYuc29ydGFibGUsXG4gICAgICByb290RWwgPSBfcmVmLnJvb3RFbCxcbiAgICAgIG5hbWUgPSBfcmVmLm5hbWUsXG4gICAgICB0YXJnZXRFbCA9IF9yZWYudGFyZ2V0RWwsXG4gICAgICBjbG9uZUVsID0gX3JlZi5jbG9uZUVsLFxuICAgICAgdG9FbCA9IF9yZWYudG9FbCxcbiAgICAgIGZyb21FbCA9IF9yZWYuZnJvbUVsLFxuICAgICAgb2xkSW5kZXggPSBfcmVmLm9sZEluZGV4LFxuICAgICAgbmV3SW5kZXggPSBfcmVmLm5ld0luZGV4LFxuICAgICAgb2xkRHJhZ2dhYmxlSW5kZXggPSBfcmVmLm9sZERyYWdnYWJsZUluZGV4LFxuICAgICAgbmV3RHJhZ2dhYmxlSW5kZXggPSBfcmVmLm5ld0RyYWdnYWJsZUluZGV4LFxuICAgICAgb3JpZ2luYWxFdmVudCA9IF9yZWYub3JpZ2luYWxFdmVudCxcbiAgICAgIHB1dFNvcnRhYmxlID0gX3JlZi5wdXRTb3J0YWJsZSxcbiAgICAgIGV4dHJhRXZlbnRQcm9wZXJ0aWVzID0gX3JlZi5leHRyYUV2ZW50UHJvcGVydGllcztcbiAgc29ydGFibGUgPSBzb3J0YWJsZSB8fCByb290RWwgJiYgcm9vdEVsW2V4cGFuZG9dO1xuICBpZiAoIXNvcnRhYmxlKSByZXR1cm47XG4gIHZhciBldnQsXG4gICAgICBvcHRpb25zID0gc29ydGFibGUub3B0aW9ucyxcbiAgICAgIG9uTmFtZSA9ICdvbicgKyBuYW1lLmNoYXJBdCgwKS50b1VwcGVyQ2FzZSgpICsgbmFtZS5zdWJzdHIoMSk7IC8vIFN1cHBvcnQgZm9yIG5ldyBDdXN0b21FdmVudCBmZWF0dXJlXG5cbiAgaWYgKHdpbmRvdy5DdXN0b21FdmVudCAmJiAhSUUxMU9yTGVzcyAmJiAhRWRnZSkge1xuICAgIGV2dCA9IG5ldyBDdXN0b21FdmVudChuYW1lLCB7XG4gICAgICBidWJibGVzOiB0cnVlLFxuICAgICAgY2FuY2VsYWJsZTogdHJ1ZVxuICAgIH0pO1xuICB9IGVsc2Uge1xuICAgIGV2dCA9IGRvY3VtZW50LmNyZWF0ZUV2ZW50KCdFdmVudCcpO1xuICAgIGV2dC5pbml0RXZlbnQobmFtZSwgdHJ1ZSwgdHJ1ZSk7XG4gIH1cblxuICBldnQudG8gPSB0b0VsIHx8IHJvb3RFbDtcbiAgZXZ0LmZyb20gPSBmcm9tRWwgfHwgcm9vdEVsO1xuICBldnQuaXRlbSA9IHRhcmdldEVsIHx8IHJvb3RFbDtcbiAgZXZ0LmNsb25lID0gY2xvbmVFbDtcbiAgZXZ0Lm9sZEluZGV4ID0gb2xkSW5kZXg7XG4gIGV2dC5uZXdJbmRleCA9IG5ld0luZGV4O1xuICBldnQub2xkRHJhZ2dhYmxlSW5kZXggPSBvbGREcmFnZ2FibGVJbmRleDtcbiAgZXZ0Lm5ld0RyYWdnYWJsZUluZGV4ID0gbmV3RHJhZ2dhYmxlSW5kZXg7XG4gIGV2dC5vcmlnaW5hbEV2ZW50ID0gb3JpZ2luYWxFdmVudDtcbiAgZXZ0LnB1bGxNb2RlID0gcHV0U29ydGFibGUgPyBwdXRTb3J0YWJsZS5sYXN0UHV0TW9kZSA6IHVuZGVmaW5lZDtcblxuICB2YXIgYWxsRXZlbnRQcm9wZXJ0aWVzID0gX29iamVjdFNwcmVhZDIoX29iamVjdFNwcmVhZDIoe30sIGV4dHJhRXZlbnRQcm9wZXJ0aWVzKSwgUGx1Z2luTWFuYWdlci5nZXRFdmVudFByb3BlcnRpZXMobmFtZSwgc29ydGFibGUpKTtcblxuICBmb3IgKHZhciBvcHRpb24gaW4gYWxsRXZlbnRQcm9wZXJ0aWVzKSB7XG4gICAgZXZ0W29wdGlvbl0gPSBhbGxFdmVudFByb3BlcnRpZXNbb3B0aW9uXTtcbiAgfVxuXG4gIGlmIChyb290RWwpIHtcbiAgICByb290RWwuZGlzcGF0Y2hFdmVudChldnQpO1xuICB9XG5cbiAgaWYgKG9wdGlvbnNbb25OYW1lXSkge1xuICAgIG9wdGlvbnNbb25OYW1lXS5jYWxsKHNvcnRhYmxlLCBldnQpO1xuICB9XG59XG5cbnZhciBfZXhjbHVkZWQgPSBbXCJldnRcIl07XG5cbnZhciBwbHVnaW5FdmVudCA9IGZ1bmN0aW9uIHBsdWdpbkV2ZW50KGV2ZW50TmFtZSwgc29ydGFibGUpIHtcbiAgdmFyIF9yZWYgPSBhcmd1bWVudHMubGVuZ3RoID4gMiAmJiBhcmd1bWVudHNbMl0gIT09IHVuZGVmaW5lZCA/IGFyZ3VtZW50c1syXSA6IHt9LFxuICAgICAgb3JpZ2luYWxFdmVudCA9IF9yZWYuZXZ0LFxuICAgICAgZGF0YSA9IF9vYmplY3RXaXRob3V0UHJvcGVydGllcyhfcmVmLCBfZXhjbHVkZWQpO1xuXG4gIFBsdWdpbk1hbmFnZXIucGx1Z2luRXZlbnQuYmluZChTb3J0YWJsZSkoZXZlbnROYW1lLCBzb3J0YWJsZSwgX29iamVjdFNwcmVhZDIoe1xuICAgIGRyYWdFbDogZHJhZ0VsLFxuICAgIHBhcmVudEVsOiBwYXJlbnRFbCxcbiAgICBnaG9zdEVsOiBnaG9zdEVsLFxuICAgIHJvb3RFbDogcm9vdEVsLFxuICAgIG5leHRFbDogbmV4dEVsLFxuICAgIGxhc3REb3duRWw6IGxhc3REb3duRWwsXG4gICAgY2xvbmVFbDogY2xvbmVFbCxcbiAgICBjbG9uZUhpZGRlbjogY2xvbmVIaWRkZW4sXG4gICAgZHJhZ1N0YXJ0ZWQ6IG1vdmVkLFxuICAgIHB1dFNvcnRhYmxlOiBwdXRTb3J0YWJsZSxcbiAgICBhY3RpdmVTb3J0YWJsZTogU29ydGFibGUuYWN0aXZlLFxuICAgIG9yaWdpbmFsRXZlbnQ6IG9yaWdpbmFsRXZlbnQsXG4gICAgb2xkSW5kZXg6IG9sZEluZGV4LFxuICAgIG9sZERyYWdnYWJsZUluZGV4OiBvbGREcmFnZ2FibGVJbmRleCxcbiAgICBuZXdJbmRleDogbmV3SW5kZXgsXG4gICAgbmV3RHJhZ2dhYmxlSW5kZXg6IG5ld0RyYWdnYWJsZUluZGV4LFxuICAgIGhpZGVHaG9zdEZvclRhcmdldDogX2hpZGVHaG9zdEZvclRhcmdldCxcbiAgICB1bmhpZGVHaG9zdEZvclRhcmdldDogX3VuaGlkZUdob3N0Rm9yVGFyZ2V0LFxuICAgIGNsb25lTm93SGlkZGVuOiBmdW5jdGlvbiBjbG9uZU5vd0hpZGRlbigpIHtcbiAgICAgIGNsb25lSGlkZGVuID0gdHJ1ZTtcbiAgICB9LFxuICAgIGNsb25lTm93U2hvd246IGZ1bmN0aW9uIGNsb25lTm93U2hvd24oKSB7XG4gICAgICBjbG9uZUhpZGRlbiA9IGZhbHNlO1xuICAgIH0sXG4gICAgZGlzcGF0Y2hTb3J0YWJsZUV2ZW50OiBmdW5jdGlvbiBkaXNwYXRjaFNvcnRhYmxlRXZlbnQobmFtZSkge1xuICAgICAgX2Rpc3BhdGNoRXZlbnQoe1xuICAgICAgICBzb3J0YWJsZTogc29ydGFibGUsXG4gICAgICAgIG5hbWU6IG5hbWUsXG4gICAgICAgIG9yaWdpbmFsRXZlbnQ6IG9yaWdpbmFsRXZlbnRcbiAgICAgIH0pO1xuICAgIH1cbiAgfSwgZGF0YSkpO1xufTtcblxuZnVuY3Rpb24gX2Rpc3BhdGNoRXZlbnQoaW5mbykge1xuICBkaXNwYXRjaEV2ZW50KF9vYmplY3RTcHJlYWQyKHtcbiAgICBwdXRTb3J0YWJsZTogcHV0U29ydGFibGUsXG4gICAgY2xvbmVFbDogY2xvbmVFbCxcbiAgICB0YXJnZXRFbDogZHJhZ0VsLFxuICAgIHJvb3RFbDogcm9vdEVsLFxuICAgIG9sZEluZGV4OiBvbGRJbmRleCxcbiAgICBvbGREcmFnZ2FibGVJbmRleDogb2xkRHJhZ2dhYmxlSW5kZXgsXG4gICAgbmV3SW5kZXg6IG5ld0luZGV4LFxuICAgIG5ld0RyYWdnYWJsZUluZGV4OiBuZXdEcmFnZ2FibGVJbmRleFxuICB9LCBpbmZvKSk7XG59XG5cbnZhciBkcmFnRWwsXG4gICAgcGFyZW50RWwsXG4gICAgZ2hvc3RFbCxcbiAgICByb290RWwsXG4gICAgbmV4dEVsLFxuICAgIGxhc3REb3duRWwsXG4gICAgY2xvbmVFbCxcbiAgICBjbG9uZUhpZGRlbixcbiAgICBvbGRJbmRleCxcbiAgICBuZXdJbmRleCxcbiAgICBvbGREcmFnZ2FibGVJbmRleCxcbiAgICBuZXdEcmFnZ2FibGVJbmRleCxcbiAgICBhY3RpdmVHcm91cCxcbiAgICBwdXRTb3J0YWJsZSxcbiAgICBhd2FpdGluZ0RyYWdTdGFydGVkID0gZmFsc2UsXG4gICAgaWdub3JlTmV4dENsaWNrID0gZmFsc2UsXG4gICAgc29ydGFibGVzID0gW10sXG4gICAgdGFwRXZ0LFxuICAgIHRvdWNoRXZ0LFxuICAgIGxhc3REeCxcbiAgICBsYXN0RHksXG4gICAgdGFwRGlzdGFuY2VMZWZ0LFxuICAgIHRhcERpc3RhbmNlVG9wLFxuICAgIG1vdmVkLFxuICAgIGxhc3RUYXJnZXQsXG4gICAgbGFzdERpcmVjdGlvbixcbiAgICBwYXN0Rmlyc3RJbnZlcnRUaHJlc2ggPSBmYWxzZSxcbiAgICBpc0NpcmN1bXN0YW50aWFsSW52ZXJ0ID0gZmFsc2UsXG4gICAgdGFyZ2V0TW92ZURpc3RhbmNlLFxuICAgIC8vIEZvciBwb3NpdGlvbmluZyBnaG9zdCBhYnNvbHV0ZWx5XG5naG9zdFJlbGF0aXZlUGFyZW50LFxuICAgIGdob3N0UmVsYXRpdmVQYXJlbnRJbml0aWFsU2Nyb2xsID0gW10sXG4gICAgLy8gKGxlZnQsIHRvcClcbl9zaWxlbnQgPSBmYWxzZSxcbiAgICBzYXZlZElucHV0Q2hlY2tlZCA9IFtdO1xuLyoqIEBjb25zdCAqL1xuXG52YXIgZG9jdW1lbnRFeGlzdHMgPSB0eXBlb2YgZG9jdW1lbnQgIT09ICd1bmRlZmluZWQnLFxuICAgIFBvc2l0aW9uR2hvc3RBYnNvbHV0ZWx5ID0gSU9TLFxuICAgIENTU0Zsb2F0UHJvcGVydHkgPSBFZGdlIHx8IElFMTFPckxlc3MgPyAnY3NzRmxvYXQnIDogJ2Zsb2F0JyxcbiAgICAvLyBUaGlzIHdpbGwgbm90IHBhc3MgZm9yIElFOSwgYmVjYXVzZSBJRTkgRG5EIG9ubHkgd29ya3Mgb24gYW5jaG9yc1xuc3VwcG9ydERyYWdnYWJsZSA9IGRvY3VtZW50RXhpc3RzICYmICFDaHJvbWVGb3JBbmRyb2lkICYmICFJT1MgJiYgJ2RyYWdnYWJsZScgaW4gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnZGl2JyksXG4gICAgc3VwcG9ydENzc1BvaW50ZXJFdmVudHMgPSBmdW5jdGlvbiAoKSB7XG4gIGlmICghZG9jdW1lbnRFeGlzdHMpIHJldHVybjsgLy8gZmFsc2Ugd2hlbiA8PSBJRTExXG5cbiAgaWYgKElFMTFPckxlc3MpIHtcbiAgICByZXR1cm4gZmFsc2U7XG4gIH1cblxuICB2YXIgZWwgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCd4Jyk7XG4gIGVsLnN0eWxlLmNzc1RleHQgPSAncG9pbnRlci1ldmVudHM6YXV0byc7XG4gIHJldHVybiBlbC5zdHlsZS5wb2ludGVyRXZlbnRzID09PSAnYXV0byc7XG59KCksXG4gICAgX2RldGVjdERpcmVjdGlvbiA9IGZ1bmN0aW9uIF9kZXRlY3REaXJlY3Rpb24oZWwsIG9wdGlvbnMpIHtcbiAgdmFyIGVsQ1NTID0gY3NzKGVsKSxcbiAgICAgIGVsV2lkdGggPSBwYXJzZUludChlbENTUy53aWR0aCkgLSBwYXJzZUludChlbENTUy5wYWRkaW5nTGVmdCkgLSBwYXJzZUludChlbENTUy5wYWRkaW5nUmlnaHQpIC0gcGFyc2VJbnQoZWxDU1MuYm9yZGVyTGVmdFdpZHRoKSAtIHBhcnNlSW50KGVsQ1NTLmJvcmRlclJpZ2h0V2lkdGgpLFxuICAgICAgY2hpbGQxID0gZ2V0Q2hpbGQoZWwsIDAsIG9wdGlvbnMpLFxuICAgICAgY2hpbGQyID0gZ2V0Q2hpbGQoZWwsIDEsIG9wdGlvbnMpLFxuICAgICAgZmlyc3RDaGlsZENTUyA9IGNoaWxkMSAmJiBjc3MoY2hpbGQxKSxcbiAgICAgIHNlY29uZENoaWxkQ1NTID0gY2hpbGQyICYmIGNzcyhjaGlsZDIpLFxuICAgICAgZmlyc3RDaGlsZFdpZHRoID0gZmlyc3RDaGlsZENTUyAmJiBwYXJzZUludChmaXJzdENoaWxkQ1NTLm1hcmdpbkxlZnQpICsgcGFyc2VJbnQoZmlyc3RDaGlsZENTUy5tYXJnaW5SaWdodCkgKyBnZXRSZWN0KGNoaWxkMSkud2lkdGgsXG4gICAgICBzZWNvbmRDaGlsZFdpZHRoID0gc2Vjb25kQ2hpbGRDU1MgJiYgcGFyc2VJbnQoc2Vjb25kQ2hpbGRDU1MubWFyZ2luTGVmdCkgKyBwYXJzZUludChzZWNvbmRDaGlsZENTUy5tYXJnaW5SaWdodCkgKyBnZXRSZWN0KGNoaWxkMikud2lkdGg7XG5cbiAgaWYgKGVsQ1NTLmRpc3BsYXkgPT09ICdmbGV4Jykge1xuICAgIHJldHVybiBlbENTUy5mbGV4RGlyZWN0aW9uID09PSAnY29sdW1uJyB8fCBlbENTUy5mbGV4RGlyZWN0aW9uID09PSAnY29sdW1uLXJldmVyc2UnID8gJ3ZlcnRpY2FsJyA6ICdob3Jpem9udGFsJztcbiAgfVxuXG4gIGlmIChlbENTUy5kaXNwbGF5ID09PSAnZ3JpZCcpIHtcbiAgICByZXR1cm4gZWxDU1MuZ3JpZFRlbXBsYXRlQ29sdW1ucy5zcGxpdCgnICcpLmxlbmd0aCA8PSAxID8gJ3ZlcnRpY2FsJyA6ICdob3Jpem9udGFsJztcbiAgfVxuXG4gIGlmIChjaGlsZDEgJiYgZmlyc3RDaGlsZENTU1tcImZsb2F0XCJdICYmIGZpcnN0Q2hpbGRDU1NbXCJmbG9hdFwiXSAhPT0gJ25vbmUnKSB7XG4gICAgdmFyIHRvdWNoaW5nU2lkZUNoaWxkMiA9IGZpcnN0Q2hpbGRDU1NbXCJmbG9hdFwiXSA9PT0gJ2xlZnQnID8gJ2xlZnQnIDogJ3JpZ2h0JztcbiAgICByZXR1cm4gY2hpbGQyICYmIChzZWNvbmRDaGlsZENTUy5jbGVhciA9PT0gJ2JvdGgnIHx8IHNlY29uZENoaWxkQ1NTLmNsZWFyID09PSB0b3VjaGluZ1NpZGVDaGlsZDIpID8gJ3ZlcnRpY2FsJyA6ICdob3Jpem9udGFsJztcbiAgfVxuXG4gIHJldHVybiBjaGlsZDEgJiYgKGZpcnN0Q2hpbGRDU1MuZGlzcGxheSA9PT0gJ2Jsb2NrJyB8fCBmaXJzdENoaWxkQ1NTLmRpc3BsYXkgPT09ICdmbGV4JyB8fCBmaXJzdENoaWxkQ1NTLmRpc3BsYXkgPT09ICd0YWJsZScgfHwgZmlyc3RDaGlsZENTUy5kaXNwbGF5ID09PSAnZ3JpZCcgfHwgZmlyc3RDaGlsZFdpZHRoID49IGVsV2lkdGggJiYgZWxDU1NbQ1NTRmxvYXRQcm9wZXJ0eV0gPT09ICdub25lJyB8fCBjaGlsZDIgJiYgZWxDU1NbQ1NTRmxvYXRQcm9wZXJ0eV0gPT09ICdub25lJyAmJiBmaXJzdENoaWxkV2lkdGggKyBzZWNvbmRDaGlsZFdpZHRoID4gZWxXaWR0aCkgPyAndmVydGljYWwnIDogJ2hvcml6b250YWwnO1xufSxcbiAgICBfZHJhZ0VsSW5Sb3dDb2x1bW4gPSBmdW5jdGlvbiBfZHJhZ0VsSW5Sb3dDb2x1bW4oZHJhZ1JlY3QsIHRhcmdldFJlY3QsIHZlcnRpY2FsKSB7XG4gIHZhciBkcmFnRWxTMU9wcCA9IHZlcnRpY2FsID8gZHJhZ1JlY3QubGVmdCA6IGRyYWdSZWN0LnRvcCxcbiAgICAgIGRyYWdFbFMyT3BwID0gdmVydGljYWwgPyBkcmFnUmVjdC5yaWdodCA6IGRyYWdSZWN0LmJvdHRvbSxcbiAgICAgIGRyYWdFbE9wcExlbmd0aCA9IHZlcnRpY2FsID8gZHJhZ1JlY3Qud2lkdGggOiBkcmFnUmVjdC5oZWlnaHQsXG4gICAgICB0YXJnZXRTMU9wcCA9IHZlcnRpY2FsID8gdGFyZ2V0UmVjdC5sZWZ0IDogdGFyZ2V0UmVjdC50b3AsXG4gICAgICB0YXJnZXRTMk9wcCA9IHZlcnRpY2FsID8gdGFyZ2V0UmVjdC5yaWdodCA6IHRhcmdldFJlY3QuYm90dG9tLFxuICAgICAgdGFyZ2V0T3BwTGVuZ3RoID0gdmVydGljYWwgPyB0YXJnZXRSZWN0LndpZHRoIDogdGFyZ2V0UmVjdC5oZWlnaHQ7XG4gIHJldHVybiBkcmFnRWxTMU9wcCA9PT0gdGFyZ2V0UzFPcHAgfHwgZHJhZ0VsUzJPcHAgPT09IHRhcmdldFMyT3BwIHx8IGRyYWdFbFMxT3BwICsgZHJhZ0VsT3BwTGVuZ3RoIC8gMiA9PT0gdGFyZ2V0UzFPcHAgKyB0YXJnZXRPcHBMZW5ndGggLyAyO1xufSxcblxuLyoqXG4gKiBEZXRlY3RzIGZpcnN0IG5lYXJlc3QgZW1wdHkgc29ydGFibGUgdG8gWCBhbmQgWSBwb3NpdGlvbiB1c2luZyBlbXB0eUluc2VydFRocmVzaG9sZC5cbiAqIEBwYXJhbSAge051bWJlcn0geCAgICAgIFggcG9zaXRpb25cbiAqIEBwYXJhbSAge051bWJlcn0geSAgICAgIFkgcG9zaXRpb25cbiAqIEByZXR1cm4ge0hUTUxFbGVtZW50fSAgIEVsZW1lbnQgb2YgdGhlIGZpcnN0IGZvdW5kIG5lYXJlc3QgU29ydGFibGVcbiAqL1xuX2RldGVjdE5lYXJlc3RFbXB0eVNvcnRhYmxlID0gZnVuY3Rpb24gX2RldGVjdE5lYXJlc3RFbXB0eVNvcnRhYmxlKHgsIHkpIHtcbiAgdmFyIHJldDtcbiAgc29ydGFibGVzLnNvbWUoZnVuY3Rpb24gKHNvcnRhYmxlKSB7XG4gICAgdmFyIHRocmVzaG9sZCA9IHNvcnRhYmxlW2V4cGFuZG9dLm9wdGlvbnMuZW1wdHlJbnNlcnRUaHJlc2hvbGQ7XG4gICAgaWYgKCF0aHJlc2hvbGQgfHwgbGFzdENoaWxkKHNvcnRhYmxlKSkgcmV0dXJuO1xuICAgIHZhciByZWN0ID0gZ2V0UmVjdChzb3J0YWJsZSksXG4gICAgICAgIGluc2lkZUhvcml6b250YWxseSA9IHggPj0gcmVjdC5sZWZ0IC0gdGhyZXNob2xkICYmIHggPD0gcmVjdC5yaWdodCArIHRocmVzaG9sZCxcbiAgICAgICAgaW5zaWRlVmVydGljYWxseSA9IHkgPj0gcmVjdC50b3AgLSB0aHJlc2hvbGQgJiYgeSA8PSByZWN0LmJvdHRvbSArIHRocmVzaG9sZDtcblxuICAgIGlmIChpbnNpZGVIb3Jpem9udGFsbHkgJiYgaW5zaWRlVmVydGljYWxseSkge1xuICAgICAgcmV0dXJuIHJldCA9IHNvcnRhYmxlO1xuICAgIH1cbiAgfSk7XG4gIHJldHVybiByZXQ7XG59LFxuICAgIF9wcmVwYXJlR3JvdXAgPSBmdW5jdGlvbiBfcHJlcGFyZUdyb3VwKG9wdGlvbnMpIHtcbiAgZnVuY3Rpb24gdG9Gbih2YWx1ZSwgcHVsbCkge1xuICAgIHJldHVybiBmdW5jdGlvbiAodG8sIGZyb20sIGRyYWdFbCwgZXZ0KSB7XG4gICAgICB2YXIgc2FtZUdyb3VwID0gdG8ub3B0aW9ucy5ncm91cC5uYW1lICYmIGZyb20ub3B0aW9ucy5ncm91cC5uYW1lICYmIHRvLm9wdGlvbnMuZ3JvdXAubmFtZSA9PT0gZnJvbS5vcHRpb25zLmdyb3VwLm5hbWU7XG5cbiAgICAgIGlmICh2YWx1ZSA9PSBudWxsICYmIChwdWxsIHx8IHNhbWVHcm91cCkpIHtcbiAgICAgICAgLy8gRGVmYXVsdCBwdWxsIHZhbHVlXG4gICAgICAgIC8vIERlZmF1bHQgcHVsbCBhbmQgcHV0IHZhbHVlIGlmIHNhbWUgZ3JvdXBcbiAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICB9IGVsc2UgaWYgKHZhbHVlID09IG51bGwgfHwgdmFsdWUgPT09IGZhbHNlKSB7XG4gICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgIH0gZWxzZSBpZiAocHVsbCAmJiB2YWx1ZSA9PT0gJ2Nsb25lJykge1xuICAgICAgICByZXR1cm4gdmFsdWU7XG4gICAgICB9IGVsc2UgaWYgKHR5cGVvZiB2YWx1ZSA9PT0gJ2Z1bmN0aW9uJykge1xuICAgICAgICByZXR1cm4gdG9Gbih2YWx1ZSh0bywgZnJvbSwgZHJhZ0VsLCBldnQpLCBwdWxsKSh0bywgZnJvbSwgZHJhZ0VsLCBldnQpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgdmFyIG90aGVyR3JvdXAgPSAocHVsbCA/IHRvIDogZnJvbSkub3B0aW9ucy5ncm91cC5uYW1lO1xuICAgICAgICByZXR1cm4gdmFsdWUgPT09IHRydWUgfHwgdHlwZW9mIHZhbHVlID09PSAnc3RyaW5nJyAmJiB2YWx1ZSA9PT0gb3RoZXJHcm91cCB8fCB2YWx1ZS5qb2luICYmIHZhbHVlLmluZGV4T2Yob3RoZXJHcm91cCkgPiAtMTtcbiAgICAgIH1cbiAgICB9O1xuICB9XG5cbiAgdmFyIGdyb3VwID0ge307XG4gIHZhciBvcmlnaW5hbEdyb3VwID0gb3B0aW9ucy5ncm91cDtcblxuICBpZiAoIW9yaWdpbmFsR3JvdXAgfHwgX3R5cGVvZihvcmlnaW5hbEdyb3VwKSAhPSAnb2JqZWN0Jykge1xuICAgIG9yaWdpbmFsR3JvdXAgPSB7XG4gICAgICBuYW1lOiBvcmlnaW5hbEdyb3VwXG4gICAgfTtcbiAgfVxuXG4gIGdyb3VwLm5hbWUgPSBvcmlnaW5hbEdyb3VwLm5hbWU7XG4gIGdyb3VwLmNoZWNrUHVsbCA9IHRvRm4ob3JpZ2luYWxHcm91cC5wdWxsLCB0cnVlKTtcbiAgZ3JvdXAuY2hlY2tQdXQgPSB0b0ZuKG9yaWdpbmFsR3JvdXAucHV0KTtcbiAgZ3JvdXAucmV2ZXJ0Q2xvbmUgPSBvcmlnaW5hbEdyb3VwLnJldmVydENsb25lO1xuICBvcHRpb25zLmdyb3VwID0gZ3JvdXA7XG59LFxuICAgIF9oaWRlR2hvc3RGb3JUYXJnZXQgPSBmdW5jdGlvbiBfaGlkZUdob3N0Rm9yVGFyZ2V0KCkge1xuICBpZiAoIXN1cHBvcnRDc3NQb2ludGVyRXZlbnRzICYmIGdob3N0RWwpIHtcbiAgICBjc3MoZ2hvc3RFbCwgJ2Rpc3BsYXknLCAnbm9uZScpO1xuICB9XG59LFxuICAgIF91bmhpZGVHaG9zdEZvclRhcmdldCA9IGZ1bmN0aW9uIF91bmhpZGVHaG9zdEZvclRhcmdldCgpIHtcbiAgaWYgKCFzdXBwb3J0Q3NzUG9pbnRlckV2ZW50cyAmJiBnaG9zdEVsKSB7XG4gICAgY3NzKGdob3N0RWwsICdkaXNwbGF5JywgJycpO1xuICB9XG59OyAvLyAjMTE4NCBmaXggLSBQcmV2ZW50IGNsaWNrIGV2ZW50IG9uIGZhbGxiYWNrIGlmIGRyYWdnZWQgYnV0IGl0ZW0gbm90IGNoYW5nZWQgcG9zaXRpb25cblxuXG5pZiAoZG9jdW1lbnRFeGlzdHMpIHtcbiAgZG9jdW1lbnQuYWRkRXZlbnRMaXN0ZW5lcignY2xpY2snLCBmdW5jdGlvbiAoZXZ0KSB7XG4gICAgaWYgKGlnbm9yZU5leHRDbGljaykge1xuICAgICAgZXZ0LnByZXZlbnREZWZhdWx0KCk7XG4gICAgICBldnQuc3RvcFByb3BhZ2F0aW9uICYmIGV2dC5zdG9wUHJvcGFnYXRpb24oKTtcbiAgICAgIGV2dC5zdG9wSW1tZWRpYXRlUHJvcGFnYXRpb24gJiYgZXZ0LnN0b3BJbW1lZGlhdGVQcm9wYWdhdGlvbigpO1xuICAgICAgaWdub3JlTmV4dENsaWNrID0gZmFsc2U7XG4gICAgICByZXR1cm4gZmFsc2U7XG4gICAgfVxuICB9LCB0cnVlKTtcbn1cblxudmFyIG5lYXJlc3RFbXB0eUluc2VydERldGVjdEV2ZW50ID0gZnVuY3Rpb24gbmVhcmVzdEVtcHR5SW5zZXJ0RGV0ZWN0RXZlbnQoZXZ0KSB7XG4gIGlmIChkcmFnRWwpIHtcbiAgICBldnQgPSBldnQudG91Y2hlcyA/IGV2dC50b3VjaGVzWzBdIDogZXZ0O1xuXG4gICAgdmFyIG5lYXJlc3QgPSBfZGV0ZWN0TmVhcmVzdEVtcHR5U29ydGFibGUoZXZ0LmNsaWVudFgsIGV2dC5jbGllbnRZKTtcblxuICAgIGlmIChuZWFyZXN0KSB7XG4gICAgICAvLyBDcmVhdGUgaW1pdGF0aW9uIGV2ZW50XG4gICAgICB2YXIgZXZlbnQgPSB7fTtcblxuICAgICAgZm9yICh2YXIgaSBpbiBldnQpIHtcbiAgICAgICAgaWYgKGV2dC5oYXNPd25Qcm9wZXJ0eShpKSkge1xuICAgICAgICAgIGV2ZW50W2ldID0gZXZ0W2ldO1xuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIGV2ZW50LnRhcmdldCA9IGV2ZW50LnJvb3RFbCA9IG5lYXJlc3Q7XG4gICAgICBldmVudC5wcmV2ZW50RGVmYXVsdCA9IHZvaWQgMDtcbiAgICAgIGV2ZW50LnN0b3BQcm9wYWdhdGlvbiA9IHZvaWQgMDtcblxuICAgICAgbmVhcmVzdFtleHBhbmRvXS5fb25EcmFnT3ZlcihldmVudCk7XG4gICAgfVxuICB9XG59O1xuXG52YXIgX2NoZWNrT3V0c2lkZVRhcmdldEVsID0gZnVuY3Rpb24gX2NoZWNrT3V0c2lkZVRhcmdldEVsKGV2dCkge1xuICBpZiAoZHJhZ0VsKSB7XG4gICAgZHJhZ0VsLnBhcmVudE5vZGVbZXhwYW5kb10uX2lzT3V0c2lkZVRoaXNFbChldnQudGFyZ2V0KTtcbiAgfVxufTtcbi8qKlxuICogQGNsYXNzICBTb3J0YWJsZVxuICogQHBhcmFtICB7SFRNTEVsZW1lbnR9ICBlbFxuICogQHBhcmFtICB7T2JqZWN0fSAgICAgICBbb3B0aW9uc11cbiAqL1xuXG5cbmZ1bmN0aW9uIFNvcnRhYmxlKGVsLCBvcHRpb25zKSB7XG4gIGlmICghKGVsICYmIGVsLm5vZGVUeXBlICYmIGVsLm5vZGVUeXBlID09PSAxKSkge1xuICAgIHRocm93IFwiU29ydGFibGU6IGBlbGAgbXVzdCBiZSBhbiBIVE1MRWxlbWVudCwgbm90IFwiLmNvbmNhdCh7fS50b1N0cmluZy5jYWxsKGVsKSk7XG4gIH1cblxuICB0aGlzLmVsID0gZWw7IC8vIHJvb3QgZWxlbWVudFxuXG4gIHRoaXMub3B0aW9ucyA9IG9wdGlvbnMgPSBfZXh0ZW5kcyh7fSwgb3B0aW9ucyk7IC8vIEV4cG9ydCBpbnN0YW5jZVxuXG4gIGVsW2V4cGFuZG9dID0gdGhpcztcbiAgdmFyIGRlZmF1bHRzID0ge1xuICAgIGdyb3VwOiBudWxsLFxuICAgIHNvcnQ6IHRydWUsXG4gICAgZGlzYWJsZWQ6IGZhbHNlLFxuICAgIHN0b3JlOiBudWxsLFxuICAgIGhhbmRsZTogbnVsbCxcbiAgICBkcmFnZ2FibGU6IC9eW3VvXWwkL2kudGVzdChlbC5ub2RlTmFtZSkgPyAnPmxpJyA6ICc+KicsXG4gICAgc3dhcFRocmVzaG9sZDogMSxcbiAgICAvLyBwZXJjZW50YWdlOyAwIDw9IHggPD0gMVxuICAgIGludmVydFN3YXA6IGZhbHNlLFxuICAgIC8vIGludmVydCBhbHdheXNcbiAgICBpbnZlcnRlZFN3YXBUaHJlc2hvbGQ6IG51bGwsXG4gICAgLy8gd2lsbCBiZSBzZXQgdG8gc2FtZSBhcyBzd2FwVGhyZXNob2xkIGlmIGRlZmF1bHRcbiAgICByZW1vdmVDbG9uZU9uSGlkZTogdHJ1ZSxcbiAgICBkaXJlY3Rpb246IGZ1bmN0aW9uIGRpcmVjdGlvbigpIHtcbiAgICAgIHJldHVybiBfZGV0ZWN0RGlyZWN0aW9uKGVsLCB0aGlzLm9wdGlvbnMpO1xuICAgIH0sXG4gICAgZ2hvc3RDbGFzczogJ3NvcnRhYmxlLWdob3N0JyxcbiAgICBjaG9zZW5DbGFzczogJ3NvcnRhYmxlLWNob3NlbicsXG4gICAgZHJhZ0NsYXNzOiAnc29ydGFibGUtZHJhZycsXG4gICAgaWdub3JlOiAnYSwgaW1nJyxcbiAgICBmaWx0ZXI6IG51bGwsXG4gICAgcHJldmVudE9uRmlsdGVyOiB0cnVlLFxuICAgIGFuaW1hdGlvbjogMCxcbiAgICBlYXNpbmc6IG51bGwsXG4gICAgc2V0RGF0YTogZnVuY3Rpb24gc2V0RGF0YShkYXRhVHJhbnNmZXIsIGRyYWdFbCkge1xuICAgICAgZGF0YVRyYW5zZmVyLnNldERhdGEoJ1RleHQnLCBkcmFnRWwudGV4dENvbnRlbnQpO1xuICAgIH0sXG4gICAgZHJvcEJ1YmJsZTogZmFsc2UsXG4gICAgZHJhZ292ZXJCdWJibGU6IGZhbHNlLFxuICAgIGRhdGFJZEF0dHI6ICdkYXRhLWlkJyxcbiAgICBkZWxheTogMCxcbiAgICBkZWxheU9uVG91Y2hPbmx5OiBmYWxzZSxcbiAgICB0b3VjaFN0YXJ0VGhyZXNob2xkOiAoTnVtYmVyLnBhcnNlSW50ID8gTnVtYmVyIDogd2luZG93KS5wYXJzZUludCh3aW5kb3cuZGV2aWNlUGl4ZWxSYXRpbywgMTApIHx8IDEsXG4gICAgZm9yY2VGYWxsYmFjazogZmFsc2UsXG4gICAgZmFsbGJhY2tDbGFzczogJ3NvcnRhYmxlLWZhbGxiYWNrJyxcbiAgICBmYWxsYmFja09uQm9keTogZmFsc2UsXG4gICAgZmFsbGJhY2tUb2xlcmFuY2U6IDAsXG4gICAgZmFsbGJhY2tPZmZzZXQ6IHtcbiAgICAgIHg6IDAsXG4gICAgICB5OiAwXG4gICAgfSxcbiAgICBzdXBwb3J0UG9pbnRlcjogU29ydGFibGUuc3VwcG9ydFBvaW50ZXIgIT09IGZhbHNlICYmICdQb2ludGVyRXZlbnQnIGluIHdpbmRvdyAmJiAhU2FmYXJpLFxuICAgIGVtcHR5SW5zZXJ0VGhyZXNob2xkOiA1XG4gIH07XG4gIFBsdWdpbk1hbmFnZXIuaW5pdGlhbGl6ZVBsdWdpbnModGhpcywgZWwsIGRlZmF1bHRzKTsgLy8gU2V0IGRlZmF1bHQgb3B0aW9uc1xuXG4gIGZvciAodmFyIG5hbWUgaW4gZGVmYXVsdHMpIHtcbiAgICAhKG5hbWUgaW4gb3B0aW9ucykgJiYgKG9wdGlvbnNbbmFtZV0gPSBkZWZhdWx0c1tuYW1lXSk7XG4gIH1cblxuICBfcHJlcGFyZUdyb3VwKG9wdGlvbnMpOyAvLyBCaW5kIGFsbCBwcml2YXRlIG1ldGhvZHNcblxuXG4gIGZvciAodmFyIGZuIGluIHRoaXMpIHtcbiAgICBpZiAoZm4uY2hhckF0KDApID09PSAnXycgJiYgdHlwZW9mIHRoaXNbZm5dID09PSAnZnVuY3Rpb24nKSB7XG4gICAgICB0aGlzW2ZuXSA9IHRoaXNbZm5dLmJpbmQodGhpcyk7XG4gICAgfVxuICB9IC8vIFNldHVwIGRyYWcgbW9kZVxuXG5cbiAgdGhpcy5uYXRpdmVEcmFnZ2FibGUgPSBvcHRpb25zLmZvcmNlRmFsbGJhY2sgPyBmYWxzZSA6IHN1cHBvcnREcmFnZ2FibGU7XG5cbiAgaWYgKHRoaXMubmF0aXZlRHJhZ2dhYmxlKSB7XG4gICAgLy8gVG91Y2ggc3RhcnQgdGhyZXNob2xkIGNhbm5vdCBiZSBncmVhdGVyIHRoYW4gdGhlIG5hdGl2ZSBkcmFnc3RhcnQgdGhyZXNob2xkXG4gICAgdGhpcy5vcHRpb25zLnRvdWNoU3RhcnRUaHJlc2hvbGQgPSAxO1xuICB9IC8vIEJpbmQgZXZlbnRzXG5cblxuICBpZiAob3B0aW9ucy5zdXBwb3J0UG9pbnRlcikge1xuICAgIG9uKGVsLCAncG9pbnRlcmRvd24nLCB0aGlzLl9vblRhcFN0YXJ0KTtcbiAgfSBlbHNlIHtcbiAgICBvbihlbCwgJ21vdXNlZG93bicsIHRoaXMuX29uVGFwU3RhcnQpO1xuICAgIG9uKGVsLCAndG91Y2hzdGFydCcsIHRoaXMuX29uVGFwU3RhcnQpO1xuICB9XG5cbiAgaWYgKHRoaXMubmF0aXZlRHJhZ2dhYmxlKSB7XG4gICAgb24oZWwsICdkcmFnb3ZlcicsIHRoaXMpO1xuICAgIG9uKGVsLCAnZHJhZ2VudGVyJywgdGhpcyk7XG4gIH1cblxuICBzb3J0YWJsZXMucHVzaCh0aGlzLmVsKTsgLy8gUmVzdG9yZSBzb3J0aW5nXG5cbiAgb3B0aW9ucy5zdG9yZSAmJiBvcHRpb25zLnN0b3JlLmdldCAmJiB0aGlzLnNvcnQob3B0aW9ucy5zdG9yZS5nZXQodGhpcykgfHwgW10pOyAvLyBBZGQgYW5pbWF0aW9uIHN0YXRlIG1hbmFnZXJcblxuICBfZXh0ZW5kcyh0aGlzLCBBbmltYXRpb25TdGF0ZU1hbmFnZXIoKSk7XG59XG5cblNvcnRhYmxlLnByb3RvdHlwZSA9XG4vKiogQGxlbmRzIFNvcnRhYmxlLnByb3RvdHlwZSAqL1xue1xuICBjb25zdHJ1Y3RvcjogU29ydGFibGUsXG4gIF9pc091dHNpZGVUaGlzRWw6IGZ1bmN0aW9uIF9pc091dHNpZGVUaGlzRWwodGFyZ2V0KSB7XG4gICAgaWYgKCF0aGlzLmVsLmNvbnRhaW5zKHRhcmdldCkgJiYgdGFyZ2V0ICE9PSB0aGlzLmVsKSB7XG4gICAgICBsYXN0VGFyZ2V0ID0gbnVsbDtcbiAgICB9XG4gIH0sXG4gIF9nZXREaXJlY3Rpb246IGZ1bmN0aW9uIF9nZXREaXJlY3Rpb24oZXZ0LCB0YXJnZXQpIHtcbiAgICByZXR1cm4gdHlwZW9mIHRoaXMub3B0aW9ucy5kaXJlY3Rpb24gPT09ICdmdW5jdGlvbicgPyB0aGlzLm9wdGlvbnMuZGlyZWN0aW9uLmNhbGwodGhpcywgZXZ0LCB0YXJnZXQsIGRyYWdFbCkgOiB0aGlzLm9wdGlvbnMuZGlyZWN0aW9uO1xuICB9LFxuICBfb25UYXBTdGFydDogZnVuY3Rpb24gX29uVGFwU3RhcnQoXG4gIC8qKiBFdmVudHxUb3VjaEV2ZW50ICovXG4gIGV2dCkge1xuICAgIGlmICghZXZ0LmNhbmNlbGFibGUpIHJldHVybjtcblxuICAgIHZhciBfdGhpcyA9IHRoaXMsXG4gICAgICAgIGVsID0gdGhpcy5lbCxcbiAgICAgICAgb3B0aW9ucyA9IHRoaXMub3B0aW9ucyxcbiAgICAgICAgcHJldmVudE9uRmlsdGVyID0gb3B0aW9ucy5wcmV2ZW50T25GaWx0ZXIsXG4gICAgICAgIHR5cGUgPSBldnQudHlwZSxcbiAgICAgICAgdG91Y2ggPSBldnQudG91Y2hlcyAmJiBldnQudG91Y2hlc1swXSB8fCBldnQucG9pbnRlclR5cGUgJiYgZXZ0LnBvaW50ZXJUeXBlID09PSAndG91Y2gnICYmIGV2dCxcbiAgICAgICAgdGFyZ2V0ID0gKHRvdWNoIHx8IGV2dCkudGFyZ2V0LFxuICAgICAgICBvcmlnaW5hbFRhcmdldCA9IGV2dC50YXJnZXQuc2hhZG93Um9vdCAmJiAoZXZ0LnBhdGggJiYgZXZ0LnBhdGhbMF0gfHwgZXZ0LmNvbXBvc2VkUGF0aCAmJiBldnQuY29tcG9zZWRQYXRoKClbMF0pIHx8IHRhcmdldCxcbiAgICAgICAgZmlsdGVyID0gb3B0aW9ucy5maWx0ZXI7XG5cbiAgICBfc2F2ZUlucHV0Q2hlY2tlZFN0YXRlKGVsKTsgLy8gRG9uJ3QgdHJpZ2dlciBzdGFydCBldmVudCB3aGVuIGFuIGVsZW1lbnQgaXMgYmVlbiBkcmFnZ2VkLCBvdGhlcndpc2UgdGhlIGV2dC5vbGRpbmRleCBhbHdheXMgd3Jvbmcgd2hlbiBzZXQgb3B0aW9uLmdyb3VwLlxuXG5cbiAgICBpZiAoZHJhZ0VsKSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgaWYgKC9tb3VzZWRvd258cG9pbnRlcmRvd24vLnRlc3QodHlwZSkgJiYgZXZ0LmJ1dHRvbiAhPT0gMCB8fCBvcHRpb25zLmRpc2FibGVkKSB7XG4gICAgICByZXR1cm47IC8vIG9ubHkgbGVmdCBidXR0b24gYW5kIGVuYWJsZWRcbiAgICB9IC8vIGNhbmNlbCBkbmQgaWYgb3JpZ2luYWwgdGFyZ2V0IGlzIGNvbnRlbnQgZWRpdGFibGVcblxuXG4gICAgaWYgKG9yaWdpbmFsVGFyZ2V0LmlzQ29udGVudEVkaXRhYmxlKSB7XG4gICAgICByZXR1cm47XG4gICAgfSAvLyBTYWZhcmkgaWdub3JlcyBmdXJ0aGVyIGV2ZW50IGhhbmRsaW5nIGFmdGVyIG1vdXNlZG93blxuXG5cbiAgICBpZiAoIXRoaXMubmF0aXZlRHJhZ2dhYmxlICYmIFNhZmFyaSAmJiB0YXJnZXQgJiYgdGFyZ2V0LnRhZ05hbWUudG9VcHBlckNhc2UoKSA9PT0gJ1NFTEVDVCcpIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICB0YXJnZXQgPSBjbG9zZXN0KHRhcmdldCwgb3B0aW9ucy5kcmFnZ2FibGUsIGVsLCBmYWxzZSk7XG5cbiAgICBpZiAodGFyZ2V0ICYmIHRhcmdldC5hbmltYXRlZCkge1xuICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIGlmIChsYXN0RG93bkVsID09PSB0YXJnZXQpIHtcbiAgICAgIC8vIElnbm9yaW5nIGR1cGxpY2F0ZSBgZG93bmBcbiAgICAgIHJldHVybjtcbiAgICB9IC8vIEdldCB0aGUgaW5kZXggb2YgdGhlIGRyYWdnZWQgZWxlbWVudCB3aXRoaW4gaXRzIHBhcmVudFxuXG5cbiAgICBvbGRJbmRleCA9IGluZGV4KHRhcmdldCk7XG4gICAgb2xkRHJhZ2dhYmxlSW5kZXggPSBpbmRleCh0YXJnZXQsIG9wdGlvbnMuZHJhZ2dhYmxlKTsgLy8gQ2hlY2sgZmlsdGVyXG5cbiAgICBpZiAodHlwZW9mIGZpbHRlciA9PT0gJ2Z1bmN0aW9uJykge1xuICAgICAgaWYgKGZpbHRlci5jYWxsKHRoaXMsIGV2dCwgdGFyZ2V0LCB0aGlzKSkge1xuICAgICAgICBfZGlzcGF0Y2hFdmVudCh7XG4gICAgICAgICAgc29ydGFibGU6IF90aGlzLFxuICAgICAgICAgIHJvb3RFbDogb3JpZ2luYWxUYXJnZXQsXG4gICAgICAgICAgbmFtZTogJ2ZpbHRlcicsXG4gICAgICAgICAgdGFyZ2V0RWw6IHRhcmdldCxcbiAgICAgICAgICB0b0VsOiBlbCxcbiAgICAgICAgICBmcm9tRWw6IGVsXG4gICAgICAgIH0pO1xuXG4gICAgICAgIHBsdWdpbkV2ZW50KCdmaWx0ZXInLCBfdGhpcywge1xuICAgICAgICAgIGV2dDogZXZ0XG4gICAgICAgIH0pO1xuICAgICAgICBwcmV2ZW50T25GaWx0ZXIgJiYgZXZ0LmNhbmNlbGFibGUgJiYgZXZ0LnByZXZlbnREZWZhdWx0KCk7XG4gICAgICAgIHJldHVybjsgLy8gY2FuY2VsIGRuZFxuICAgICAgfVxuICAgIH0gZWxzZSBpZiAoZmlsdGVyKSB7XG4gICAgICBmaWx0ZXIgPSBmaWx0ZXIuc3BsaXQoJywnKS5zb21lKGZ1bmN0aW9uIChjcml0ZXJpYSkge1xuICAgICAgICBjcml0ZXJpYSA9IGNsb3Nlc3Qob3JpZ2luYWxUYXJnZXQsIGNyaXRlcmlhLnRyaW0oKSwgZWwsIGZhbHNlKTtcblxuICAgICAgICBpZiAoY3JpdGVyaWEpIHtcbiAgICAgICAgICBfZGlzcGF0Y2hFdmVudCh7XG4gICAgICAgICAgICBzb3J0YWJsZTogX3RoaXMsXG4gICAgICAgICAgICByb290RWw6IGNyaXRlcmlhLFxuICAgICAgICAgICAgbmFtZTogJ2ZpbHRlcicsXG4gICAgICAgICAgICB0YXJnZXRFbDogdGFyZ2V0LFxuICAgICAgICAgICAgZnJvbUVsOiBlbCxcbiAgICAgICAgICAgIHRvRWw6IGVsXG4gICAgICAgICAgfSk7XG5cbiAgICAgICAgICBwbHVnaW5FdmVudCgnZmlsdGVyJywgX3RoaXMsIHtcbiAgICAgICAgICAgIGV2dDogZXZ0XG4gICAgICAgICAgfSk7XG4gICAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICAgIH1cbiAgICAgIH0pO1xuXG4gICAgICBpZiAoZmlsdGVyKSB7XG4gICAgICAgIHByZXZlbnRPbkZpbHRlciAmJiBldnQuY2FuY2VsYWJsZSAmJiBldnQucHJldmVudERlZmF1bHQoKTtcbiAgICAgICAgcmV0dXJuOyAvLyBjYW5jZWwgZG5kXG4gICAgICB9XG4gICAgfVxuXG4gICAgaWYgKG9wdGlvbnMuaGFuZGxlICYmICFjbG9zZXN0KG9yaWdpbmFsVGFyZ2V0LCBvcHRpb25zLmhhbmRsZSwgZWwsIGZhbHNlKSkge1xuICAgICAgcmV0dXJuO1xuICAgIH0gLy8gUHJlcGFyZSBgZHJhZ3N0YXJ0YFxuXG5cbiAgICB0aGlzLl9wcmVwYXJlRHJhZ1N0YXJ0KGV2dCwgdG91Y2gsIHRhcmdldCk7XG4gIH0sXG4gIF9wcmVwYXJlRHJhZ1N0YXJ0OiBmdW5jdGlvbiBfcHJlcGFyZURyYWdTdGFydChcbiAgLyoqIEV2ZW50ICovXG4gIGV2dCxcbiAgLyoqIFRvdWNoICovXG4gIHRvdWNoLFxuICAvKiogSFRNTEVsZW1lbnQgKi9cbiAgdGFyZ2V0KSB7XG4gICAgdmFyIF90aGlzID0gdGhpcyxcbiAgICAgICAgZWwgPSBfdGhpcy5lbCxcbiAgICAgICAgb3B0aW9ucyA9IF90aGlzLm9wdGlvbnMsXG4gICAgICAgIG93bmVyRG9jdW1lbnQgPSBlbC5vd25lckRvY3VtZW50LFxuICAgICAgICBkcmFnU3RhcnRGbjtcblxuICAgIGlmICh0YXJnZXQgJiYgIWRyYWdFbCAmJiB0YXJnZXQucGFyZW50Tm9kZSA9PT0gZWwpIHtcbiAgICAgIHZhciBkcmFnUmVjdCA9IGdldFJlY3QodGFyZ2V0KTtcbiAgICAgIHJvb3RFbCA9IGVsO1xuICAgICAgZHJhZ0VsID0gdGFyZ2V0O1xuICAgICAgcGFyZW50RWwgPSBkcmFnRWwucGFyZW50Tm9kZTtcbiAgICAgIG5leHRFbCA9IGRyYWdFbC5uZXh0U2libGluZztcbiAgICAgIGxhc3REb3duRWwgPSB0YXJnZXQ7XG4gICAgICBhY3RpdmVHcm91cCA9IG9wdGlvbnMuZ3JvdXA7XG4gICAgICBTb3J0YWJsZS5kcmFnZ2VkID0gZHJhZ0VsO1xuICAgICAgdGFwRXZ0ID0ge1xuICAgICAgICB0YXJnZXQ6IGRyYWdFbCxcbiAgICAgICAgY2xpZW50WDogKHRvdWNoIHx8IGV2dCkuY2xpZW50WCxcbiAgICAgICAgY2xpZW50WTogKHRvdWNoIHx8IGV2dCkuY2xpZW50WVxuICAgICAgfTtcbiAgICAgIHRhcERpc3RhbmNlTGVmdCA9IHRhcEV2dC5jbGllbnRYIC0gZHJhZ1JlY3QubGVmdDtcbiAgICAgIHRhcERpc3RhbmNlVG9wID0gdGFwRXZ0LmNsaWVudFkgLSBkcmFnUmVjdC50b3A7XG4gICAgICB0aGlzLl9sYXN0WCA9ICh0b3VjaCB8fCBldnQpLmNsaWVudFg7XG4gICAgICB0aGlzLl9sYXN0WSA9ICh0b3VjaCB8fCBldnQpLmNsaWVudFk7XG4gICAgICBkcmFnRWwuc3R5bGVbJ3dpbGwtY2hhbmdlJ10gPSAnYWxsJztcblxuICAgICAgZHJhZ1N0YXJ0Rm4gPSBmdW5jdGlvbiBkcmFnU3RhcnRGbigpIHtcbiAgICAgICAgcGx1Z2luRXZlbnQoJ2RlbGF5RW5kZWQnLCBfdGhpcywge1xuICAgICAgICAgIGV2dDogZXZ0XG4gICAgICAgIH0pO1xuXG4gICAgICAgIGlmIChTb3J0YWJsZS5ldmVudENhbmNlbGVkKSB7XG4gICAgICAgICAgX3RoaXMuX29uRHJvcCgpO1xuXG4gICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9IC8vIERlbGF5ZWQgZHJhZyBoYXMgYmVlbiB0cmlnZ2VyZWRcbiAgICAgICAgLy8gd2UgY2FuIHJlLWVuYWJsZSB0aGUgZXZlbnRzOiB0b3VjaG1vdmUvbW91c2Vtb3ZlXG5cblxuICAgICAgICBfdGhpcy5fZGlzYWJsZURlbGF5ZWREcmFnRXZlbnRzKCk7XG5cbiAgICAgICAgaWYgKCFGaXJlRm94ICYmIF90aGlzLm5hdGl2ZURyYWdnYWJsZSkge1xuICAgICAgICAgIGRyYWdFbC5kcmFnZ2FibGUgPSB0cnVlO1xuICAgICAgICB9IC8vIEJpbmQgdGhlIGV2ZW50czogZHJhZ3N0YXJ0L2RyYWdlbmRcblxuXG4gICAgICAgIF90aGlzLl90cmlnZ2VyRHJhZ1N0YXJ0KGV2dCwgdG91Y2gpOyAvLyBEcmFnIHN0YXJ0IGV2ZW50XG5cblxuICAgICAgICBfZGlzcGF0Y2hFdmVudCh7XG4gICAgICAgICAgc29ydGFibGU6IF90aGlzLFxuICAgICAgICAgIG5hbWU6ICdjaG9vc2UnLFxuICAgICAgICAgIG9yaWdpbmFsRXZlbnQ6IGV2dFxuICAgICAgICB9KTsgLy8gQ2hvc2VuIGl0ZW1cblxuXG4gICAgICAgIHRvZ2dsZUNsYXNzKGRyYWdFbCwgb3B0aW9ucy5jaG9zZW5DbGFzcywgdHJ1ZSk7XG4gICAgICB9OyAvLyBEaXNhYmxlIFwiZHJhZ2dhYmxlXCJcblxuXG4gICAgICBvcHRpb25zLmlnbm9yZS5zcGxpdCgnLCcpLmZvckVhY2goZnVuY3Rpb24gKGNyaXRlcmlhKSB7XG4gICAgICAgIGZpbmQoZHJhZ0VsLCBjcml0ZXJpYS50cmltKCksIF9kaXNhYmxlRHJhZ2dhYmxlKTtcbiAgICAgIH0pO1xuICAgICAgb24ob3duZXJEb2N1bWVudCwgJ2RyYWdvdmVyJywgbmVhcmVzdEVtcHR5SW5zZXJ0RGV0ZWN0RXZlbnQpO1xuICAgICAgb24ob3duZXJEb2N1bWVudCwgJ21vdXNlbW92ZScsIG5lYXJlc3RFbXB0eUluc2VydERldGVjdEV2ZW50KTtcbiAgICAgIG9uKG93bmVyRG9jdW1lbnQsICd0b3VjaG1vdmUnLCBuZWFyZXN0RW1wdHlJbnNlcnREZXRlY3RFdmVudCk7XG4gICAgICBvbihvd25lckRvY3VtZW50LCAnbW91c2V1cCcsIF90aGlzLl9vbkRyb3ApO1xuICAgICAgb24ob3duZXJEb2N1bWVudCwgJ3RvdWNoZW5kJywgX3RoaXMuX29uRHJvcCk7XG4gICAgICBvbihvd25lckRvY3VtZW50LCAndG91Y2hjYW5jZWwnLCBfdGhpcy5fb25Ecm9wKTsgLy8gTWFrZSBkcmFnRWwgZHJhZ2dhYmxlIChtdXN0IGJlIGJlZm9yZSBkZWxheSBmb3IgRmlyZUZveClcblxuICAgICAgaWYgKEZpcmVGb3ggJiYgdGhpcy5uYXRpdmVEcmFnZ2FibGUpIHtcbiAgICAgICAgdGhpcy5vcHRpb25zLnRvdWNoU3RhcnRUaHJlc2hvbGQgPSA0O1xuICAgICAgICBkcmFnRWwuZHJhZ2dhYmxlID0gdHJ1ZTtcbiAgICAgIH1cblxuICAgICAgcGx1Z2luRXZlbnQoJ2RlbGF5U3RhcnQnLCB0aGlzLCB7XG4gICAgICAgIGV2dDogZXZ0XG4gICAgICB9KTsgLy8gRGVsYXkgaXMgaW1wb3NzaWJsZSBmb3IgbmF0aXZlIERuRCBpbiBFZGdlIG9yIElFXG5cbiAgICAgIGlmIChvcHRpb25zLmRlbGF5ICYmICghb3B0aW9ucy5kZWxheU9uVG91Y2hPbmx5IHx8IHRvdWNoKSAmJiAoIXRoaXMubmF0aXZlRHJhZ2dhYmxlIHx8ICEoRWRnZSB8fCBJRTExT3JMZXNzKSkpIHtcbiAgICAgICAgaWYgKFNvcnRhYmxlLmV2ZW50Q2FuY2VsZWQpIHtcbiAgICAgICAgICB0aGlzLl9vbkRyb3AoKTtcblxuICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfSAvLyBJZiB0aGUgdXNlciBtb3ZlcyB0aGUgcG9pbnRlciBvciBsZXQgZ28gdGhlIGNsaWNrIG9yIHRvdWNoXG4gICAgICAgIC8vIGJlZm9yZSB0aGUgZGVsYXkgaGFzIGJlZW4gcmVhY2hlZDpcbiAgICAgICAgLy8gZGlzYWJsZSB0aGUgZGVsYXllZCBkcmFnXG5cblxuICAgICAgICBvbihvd25lckRvY3VtZW50LCAnbW91c2V1cCcsIF90aGlzLl9kaXNhYmxlRGVsYXllZERyYWcpO1xuICAgICAgICBvbihvd25lckRvY3VtZW50LCAndG91Y2hlbmQnLCBfdGhpcy5fZGlzYWJsZURlbGF5ZWREcmFnKTtcbiAgICAgICAgb24ob3duZXJEb2N1bWVudCwgJ3RvdWNoY2FuY2VsJywgX3RoaXMuX2Rpc2FibGVEZWxheWVkRHJhZyk7XG4gICAgICAgIG9uKG93bmVyRG9jdW1lbnQsICdtb3VzZW1vdmUnLCBfdGhpcy5fZGVsYXllZERyYWdUb3VjaE1vdmVIYW5kbGVyKTtcbiAgICAgICAgb24ob3duZXJEb2N1bWVudCwgJ3RvdWNobW92ZScsIF90aGlzLl9kZWxheWVkRHJhZ1RvdWNoTW92ZUhhbmRsZXIpO1xuICAgICAgICBvcHRpb25zLnN1cHBvcnRQb2ludGVyICYmIG9uKG93bmVyRG9jdW1lbnQsICdwb2ludGVybW92ZScsIF90aGlzLl9kZWxheWVkRHJhZ1RvdWNoTW92ZUhhbmRsZXIpO1xuICAgICAgICBfdGhpcy5fZHJhZ1N0YXJ0VGltZXIgPSBzZXRUaW1lb3V0KGRyYWdTdGFydEZuLCBvcHRpb25zLmRlbGF5KTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGRyYWdTdGFydEZuKCk7XG4gICAgICB9XG4gICAgfVxuICB9LFxuICBfZGVsYXllZERyYWdUb3VjaE1vdmVIYW5kbGVyOiBmdW5jdGlvbiBfZGVsYXllZERyYWdUb3VjaE1vdmVIYW5kbGVyKFxuICAvKiogVG91Y2hFdmVudHxQb2ludGVyRXZlbnQgKiovXG4gIGUpIHtcbiAgICB2YXIgdG91Y2ggPSBlLnRvdWNoZXMgPyBlLnRvdWNoZXNbMF0gOiBlO1xuXG4gICAgaWYgKE1hdGgubWF4KE1hdGguYWJzKHRvdWNoLmNsaWVudFggLSB0aGlzLl9sYXN0WCksIE1hdGguYWJzKHRvdWNoLmNsaWVudFkgLSB0aGlzLl9sYXN0WSkpID49IE1hdGguZmxvb3IodGhpcy5vcHRpb25zLnRvdWNoU3RhcnRUaHJlc2hvbGQgLyAodGhpcy5uYXRpdmVEcmFnZ2FibGUgJiYgd2luZG93LmRldmljZVBpeGVsUmF0aW8gfHwgMSkpKSB7XG4gICAgICB0aGlzLl9kaXNhYmxlRGVsYXllZERyYWcoKTtcbiAgICB9XG4gIH0sXG4gIF9kaXNhYmxlRGVsYXllZERyYWc6IGZ1bmN0aW9uIF9kaXNhYmxlRGVsYXllZERyYWcoKSB7XG4gICAgZHJhZ0VsICYmIF9kaXNhYmxlRHJhZ2dhYmxlKGRyYWdFbCk7XG4gICAgY2xlYXJUaW1lb3V0KHRoaXMuX2RyYWdTdGFydFRpbWVyKTtcblxuICAgIHRoaXMuX2Rpc2FibGVEZWxheWVkRHJhZ0V2ZW50cygpO1xuICB9LFxuICBfZGlzYWJsZURlbGF5ZWREcmFnRXZlbnRzOiBmdW5jdGlvbiBfZGlzYWJsZURlbGF5ZWREcmFnRXZlbnRzKCkge1xuICAgIHZhciBvd25lckRvY3VtZW50ID0gdGhpcy5lbC5vd25lckRvY3VtZW50O1xuICAgIG9mZihvd25lckRvY3VtZW50LCAnbW91c2V1cCcsIHRoaXMuX2Rpc2FibGVEZWxheWVkRHJhZyk7XG4gICAgb2ZmKG93bmVyRG9jdW1lbnQsICd0b3VjaGVuZCcsIHRoaXMuX2Rpc2FibGVEZWxheWVkRHJhZyk7XG4gICAgb2ZmKG93bmVyRG9jdW1lbnQsICd0b3VjaGNhbmNlbCcsIHRoaXMuX2Rpc2FibGVEZWxheWVkRHJhZyk7XG4gICAgb2ZmKG93bmVyRG9jdW1lbnQsICdtb3VzZW1vdmUnLCB0aGlzLl9kZWxheWVkRHJhZ1RvdWNoTW92ZUhhbmRsZXIpO1xuICAgIG9mZihvd25lckRvY3VtZW50LCAndG91Y2htb3ZlJywgdGhpcy5fZGVsYXllZERyYWdUb3VjaE1vdmVIYW5kbGVyKTtcbiAgICBvZmYob3duZXJEb2N1bWVudCwgJ3BvaW50ZXJtb3ZlJywgdGhpcy5fZGVsYXllZERyYWdUb3VjaE1vdmVIYW5kbGVyKTtcbiAgfSxcbiAgX3RyaWdnZXJEcmFnU3RhcnQ6IGZ1bmN0aW9uIF90cmlnZ2VyRHJhZ1N0YXJ0KFxuICAvKiogRXZlbnQgKi9cbiAgZXZ0LFxuICAvKiogVG91Y2ggKi9cbiAgdG91Y2gpIHtcbiAgICB0b3VjaCA9IHRvdWNoIHx8IGV2dC5wb2ludGVyVHlwZSA9PSAndG91Y2gnICYmIGV2dDtcblxuICAgIGlmICghdGhpcy5uYXRpdmVEcmFnZ2FibGUgfHwgdG91Y2gpIHtcbiAgICAgIGlmICh0aGlzLm9wdGlvbnMuc3VwcG9ydFBvaW50ZXIpIHtcbiAgICAgICAgb24oZG9jdW1lbnQsICdwb2ludGVybW92ZScsIHRoaXMuX29uVG91Y2hNb3ZlKTtcbiAgICAgIH0gZWxzZSBpZiAodG91Y2gpIHtcbiAgICAgICAgb24oZG9jdW1lbnQsICd0b3VjaG1vdmUnLCB0aGlzLl9vblRvdWNoTW92ZSk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBvbihkb2N1bWVudCwgJ21vdXNlbW92ZScsIHRoaXMuX29uVG91Y2hNb3ZlKTtcbiAgICAgIH1cbiAgICB9IGVsc2Uge1xuICAgICAgb24oZHJhZ0VsLCAnZHJhZ2VuZCcsIHRoaXMpO1xuICAgICAgb24ocm9vdEVsLCAnZHJhZ3N0YXJ0JywgdGhpcy5fb25EcmFnU3RhcnQpO1xuICAgIH1cblxuICAgIHRyeSB7XG4gICAgICBpZiAoZG9jdW1lbnQuc2VsZWN0aW9uKSB7XG4gICAgICAgIC8vIFRpbWVvdXQgbmVjY2Vzc2FyeSBmb3IgSUU5XG4gICAgICAgIF9uZXh0VGljayhmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgZG9jdW1lbnQuc2VsZWN0aW9uLmVtcHR5KCk7XG4gICAgICAgIH0pO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgd2luZG93LmdldFNlbGVjdGlvbigpLnJlbW92ZUFsbFJhbmdlcygpO1xuICAgICAgfVxuICAgIH0gY2F0Y2ggKGVycikge31cbiAgfSxcbiAgX2RyYWdTdGFydGVkOiBmdW5jdGlvbiBfZHJhZ1N0YXJ0ZWQoZmFsbGJhY2ssIGV2dCkge1xuXG4gICAgYXdhaXRpbmdEcmFnU3RhcnRlZCA9IGZhbHNlO1xuXG4gICAgaWYgKHJvb3RFbCAmJiBkcmFnRWwpIHtcbiAgICAgIHBsdWdpbkV2ZW50KCdkcmFnU3RhcnRlZCcsIHRoaXMsIHtcbiAgICAgICAgZXZ0OiBldnRcbiAgICAgIH0pO1xuXG4gICAgICBpZiAodGhpcy5uYXRpdmVEcmFnZ2FibGUpIHtcbiAgICAgICAgb24oZG9jdW1lbnQsICdkcmFnb3ZlcicsIF9jaGVja091dHNpZGVUYXJnZXRFbCk7XG4gICAgICB9XG5cbiAgICAgIHZhciBvcHRpb25zID0gdGhpcy5vcHRpb25zOyAvLyBBcHBseSBlZmZlY3RcblxuICAgICAgIWZhbGxiYWNrICYmIHRvZ2dsZUNsYXNzKGRyYWdFbCwgb3B0aW9ucy5kcmFnQ2xhc3MsIGZhbHNlKTtcbiAgICAgIHRvZ2dsZUNsYXNzKGRyYWdFbCwgb3B0aW9ucy5naG9zdENsYXNzLCB0cnVlKTtcbiAgICAgIFNvcnRhYmxlLmFjdGl2ZSA9IHRoaXM7XG4gICAgICBmYWxsYmFjayAmJiB0aGlzLl9hcHBlbmRHaG9zdCgpOyAvLyBEcmFnIHN0YXJ0IGV2ZW50XG5cbiAgICAgIF9kaXNwYXRjaEV2ZW50KHtcbiAgICAgICAgc29ydGFibGU6IHRoaXMsXG4gICAgICAgIG5hbWU6ICdzdGFydCcsXG4gICAgICAgIG9yaWdpbmFsRXZlbnQ6IGV2dFxuICAgICAgfSk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHRoaXMuX251bGxpbmcoKTtcbiAgICB9XG4gIH0sXG4gIF9lbXVsYXRlRHJhZ092ZXI6IGZ1bmN0aW9uIF9lbXVsYXRlRHJhZ092ZXIoKSB7XG4gICAgaWYgKHRvdWNoRXZ0KSB7XG4gICAgICB0aGlzLl9sYXN0WCA9IHRvdWNoRXZ0LmNsaWVudFg7XG4gICAgICB0aGlzLl9sYXN0WSA9IHRvdWNoRXZ0LmNsaWVudFk7XG5cbiAgICAgIF9oaWRlR2hvc3RGb3JUYXJnZXQoKTtcblxuICAgICAgdmFyIHRhcmdldCA9IGRvY3VtZW50LmVsZW1lbnRGcm9tUG9pbnQodG91Y2hFdnQuY2xpZW50WCwgdG91Y2hFdnQuY2xpZW50WSk7XG4gICAgICB2YXIgcGFyZW50ID0gdGFyZ2V0O1xuXG4gICAgICB3aGlsZSAodGFyZ2V0ICYmIHRhcmdldC5zaGFkb3dSb290KSB7XG4gICAgICAgIHRhcmdldCA9IHRhcmdldC5zaGFkb3dSb290LmVsZW1lbnRGcm9tUG9pbnQodG91Y2hFdnQuY2xpZW50WCwgdG91Y2hFdnQuY2xpZW50WSk7XG4gICAgICAgIGlmICh0YXJnZXQgPT09IHBhcmVudCkgYnJlYWs7XG4gICAgICAgIHBhcmVudCA9IHRhcmdldDtcbiAgICAgIH1cblxuICAgICAgZHJhZ0VsLnBhcmVudE5vZGVbZXhwYW5kb10uX2lzT3V0c2lkZVRoaXNFbCh0YXJnZXQpO1xuXG4gICAgICBpZiAocGFyZW50KSB7XG4gICAgICAgIGRvIHtcbiAgICAgICAgICBpZiAocGFyZW50W2V4cGFuZG9dKSB7XG4gICAgICAgICAgICB2YXIgaW5zZXJ0ZWQgPSB2b2lkIDA7XG4gICAgICAgICAgICBpbnNlcnRlZCA9IHBhcmVudFtleHBhbmRvXS5fb25EcmFnT3Zlcih7XG4gICAgICAgICAgICAgIGNsaWVudFg6IHRvdWNoRXZ0LmNsaWVudFgsXG4gICAgICAgICAgICAgIGNsaWVudFk6IHRvdWNoRXZ0LmNsaWVudFksXG4gICAgICAgICAgICAgIHRhcmdldDogdGFyZ2V0LFxuICAgICAgICAgICAgICByb290RWw6IHBhcmVudFxuICAgICAgICAgICAgfSk7XG5cbiAgICAgICAgICAgIGlmIChpbnNlcnRlZCAmJiAhdGhpcy5vcHRpb25zLmRyYWdvdmVyQnViYmxlKSB7XG4gICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH1cblxuICAgICAgICAgIHRhcmdldCA9IHBhcmVudDsgLy8gc3RvcmUgbGFzdCBlbGVtZW50XG4gICAgICAgIH1cbiAgICAgICAgLyoganNoaW50IGJvc3M6dHJ1ZSAqL1xuICAgICAgICB3aGlsZSAocGFyZW50ID0gcGFyZW50LnBhcmVudE5vZGUpO1xuICAgICAgfVxuXG4gICAgICBfdW5oaWRlR2hvc3RGb3JUYXJnZXQoKTtcbiAgICB9XG4gIH0sXG4gIF9vblRvdWNoTW92ZTogZnVuY3Rpb24gX29uVG91Y2hNb3ZlKFxuICAvKipUb3VjaEV2ZW50Ki9cbiAgZXZ0KSB7XG4gICAgaWYgKHRhcEV2dCkge1xuICAgICAgdmFyIG9wdGlvbnMgPSB0aGlzLm9wdGlvbnMsXG4gICAgICAgICAgZmFsbGJhY2tUb2xlcmFuY2UgPSBvcHRpb25zLmZhbGxiYWNrVG9sZXJhbmNlLFxuICAgICAgICAgIGZhbGxiYWNrT2Zmc2V0ID0gb3B0aW9ucy5mYWxsYmFja09mZnNldCxcbiAgICAgICAgICB0b3VjaCA9IGV2dC50b3VjaGVzID8gZXZ0LnRvdWNoZXNbMF0gOiBldnQsXG4gICAgICAgICAgZ2hvc3RNYXRyaXggPSBnaG9zdEVsICYmIG1hdHJpeChnaG9zdEVsLCB0cnVlKSxcbiAgICAgICAgICBzY2FsZVggPSBnaG9zdEVsICYmIGdob3N0TWF0cml4ICYmIGdob3N0TWF0cml4LmEsXG4gICAgICAgICAgc2NhbGVZID0gZ2hvc3RFbCAmJiBnaG9zdE1hdHJpeCAmJiBnaG9zdE1hdHJpeC5kLFxuICAgICAgICAgIHJlbGF0aXZlU2Nyb2xsT2Zmc2V0ID0gUG9zaXRpb25HaG9zdEFic29sdXRlbHkgJiYgZ2hvc3RSZWxhdGl2ZVBhcmVudCAmJiBnZXRSZWxhdGl2ZVNjcm9sbE9mZnNldChnaG9zdFJlbGF0aXZlUGFyZW50KSxcbiAgICAgICAgICBkeCA9ICh0b3VjaC5jbGllbnRYIC0gdGFwRXZ0LmNsaWVudFggKyBmYWxsYmFja09mZnNldC54KSAvIChzY2FsZVggfHwgMSkgKyAocmVsYXRpdmVTY3JvbGxPZmZzZXQgPyByZWxhdGl2ZVNjcm9sbE9mZnNldFswXSAtIGdob3N0UmVsYXRpdmVQYXJlbnRJbml0aWFsU2Nyb2xsWzBdIDogMCkgLyAoc2NhbGVYIHx8IDEpLFxuICAgICAgICAgIGR5ID0gKHRvdWNoLmNsaWVudFkgLSB0YXBFdnQuY2xpZW50WSArIGZhbGxiYWNrT2Zmc2V0LnkpIC8gKHNjYWxlWSB8fCAxKSArIChyZWxhdGl2ZVNjcm9sbE9mZnNldCA/IHJlbGF0aXZlU2Nyb2xsT2Zmc2V0WzFdIC0gZ2hvc3RSZWxhdGl2ZVBhcmVudEluaXRpYWxTY3JvbGxbMV0gOiAwKSAvIChzY2FsZVkgfHwgMSk7IC8vIG9ubHkgc2V0IHRoZSBzdGF0dXMgdG8gZHJhZ2dpbmcsIHdoZW4gd2UgYXJlIGFjdHVhbGx5IGRyYWdnaW5nXG5cbiAgICAgIGlmICghU29ydGFibGUuYWN0aXZlICYmICFhd2FpdGluZ0RyYWdTdGFydGVkKSB7XG4gICAgICAgIGlmIChmYWxsYmFja1RvbGVyYW5jZSAmJiBNYXRoLm1heChNYXRoLmFicyh0b3VjaC5jbGllbnRYIC0gdGhpcy5fbGFzdFgpLCBNYXRoLmFicyh0b3VjaC5jbGllbnRZIC0gdGhpcy5fbGFzdFkpKSA8IGZhbGxiYWNrVG9sZXJhbmNlKSB7XG4gICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG5cbiAgICAgICAgdGhpcy5fb25EcmFnU3RhcnQoZXZ0LCB0cnVlKTtcbiAgICAgIH1cblxuICAgICAgaWYgKGdob3N0RWwpIHtcbiAgICAgICAgaWYgKGdob3N0TWF0cml4KSB7XG4gICAgICAgICAgZ2hvc3RNYXRyaXguZSArPSBkeCAtIChsYXN0RHggfHwgMCk7XG4gICAgICAgICAgZ2hvc3RNYXRyaXguZiArPSBkeSAtIChsYXN0RHkgfHwgMCk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgZ2hvc3RNYXRyaXggPSB7XG4gICAgICAgICAgICBhOiAxLFxuICAgICAgICAgICAgYjogMCxcbiAgICAgICAgICAgIGM6IDAsXG4gICAgICAgICAgICBkOiAxLFxuICAgICAgICAgICAgZTogZHgsXG4gICAgICAgICAgICBmOiBkeVxuICAgICAgICAgIH07XG4gICAgICAgIH1cblxuICAgICAgICB2YXIgY3NzTWF0cml4ID0gXCJtYXRyaXgoXCIuY29uY2F0KGdob3N0TWF0cml4LmEsIFwiLFwiKS5jb25jYXQoZ2hvc3RNYXRyaXguYiwgXCIsXCIpLmNvbmNhdChnaG9zdE1hdHJpeC5jLCBcIixcIikuY29uY2F0KGdob3N0TWF0cml4LmQsIFwiLFwiKS5jb25jYXQoZ2hvc3RNYXRyaXguZSwgXCIsXCIpLmNvbmNhdChnaG9zdE1hdHJpeC5mLCBcIilcIik7XG4gICAgICAgIGNzcyhnaG9zdEVsLCAnd2Via2l0VHJhbnNmb3JtJywgY3NzTWF0cml4KTtcbiAgICAgICAgY3NzKGdob3N0RWwsICdtb3pUcmFuc2Zvcm0nLCBjc3NNYXRyaXgpO1xuICAgICAgICBjc3MoZ2hvc3RFbCwgJ21zVHJhbnNmb3JtJywgY3NzTWF0cml4KTtcbiAgICAgICAgY3NzKGdob3N0RWwsICd0cmFuc2Zvcm0nLCBjc3NNYXRyaXgpO1xuICAgICAgICBsYXN0RHggPSBkeDtcbiAgICAgICAgbGFzdER5ID0gZHk7XG4gICAgICAgIHRvdWNoRXZ0ID0gdG91Y2g7XG4gICAgICB9XG5cbiAgICAgIGV2dC5jYW5jZWxhYmxlICYmIGV2dC5wcmV2ZW50RGVmYXVsdCgpO1xuICAgIH1cbiAgfSxcbiAgX2FwcGVuZEdob3N0OiBmdW5jdGlvbiBfYXBwZW5kR2hvc3QoKSB7XG4gICAgLy8gQnVnIGlmIHVzaW5nIHNjYWxlKCk6IGh0dHBzOi8vc3RhY2tvdmVyZmxvdy5jb20vcXVlc3Rpb25zLzI2MzcwNThcbiAgICAvLyBOb3QgYmVpbmcgYWRqdXN0ZWQgZm9yXG4gICAgaWYgKCFnaG9zdEVsKSB7XG4gICAgICB2YXIgY29udGFpbmVyID0gdGhpcy5vcHRpb25zLmZhbGxiYWNrT25Cb2R5ID8gZG9jdW1lbnQuYm9keSA6IHJvb3RFbCxcbiAgICAgICAgICByZWN0ID0gZ2V0UmVjdChkcmFnRWwsIHRydWUsIFBvc2l0aW9uR2hvc3RBYnNvbHV0ZWx5LCB0cnVlLCBjb250YWluZXIpLFxuICAgICAgICAgIG9wdGlvbnMgPSB0aGlzLm9wdGlvbnM7IC8vIFBvc2l0aW9uIGFic29sdXRlbHlcblxuICAgICAgaWYgKFBvc2l0aW9uR2hvc3RBYnNvbHV0ZWx5KSB7XG4gICAgICAgIC8vIEdldCByZWxhdGl2ZWx5IHBvc2l0aW9uZWQgcGFyZW50XG4gICAgICAgIGdob3N0UmVsYXRpdmVQYXJlbnQgPSBjb250YWluZXI7XG5cbiAgICAgICAgd2hpbGUgKGNzcyhnaG9zdFJlbGF0aXZlUGFyZW50LCAncG9zaXRpb24nKSA9PT0gJ3N0YXRpYycgJiYgY3NzKGdob3N0UmVsYXRpdmVQYXJlbnQsICd0cmFuc2Zvcm0nKSA9PT0gJ25vbmUnICYmIGdob3N0UmVsYXRpdmVQYXJlbnQgIT09IGRvY3VtZW50KSB7XG4gICAgICAgICAgZ2hvc3RSZWxhdGl2ZVBhcmVudCA9IGdob3N0UmVsYXRpdmVQYXJlbnQucGFyZW50Tm9kZTtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmIChnaG9zdFJlbGF0aXZlUGFyZW50ICE9PSBkb2N1bWVudC5ib2R5ICYmIGdob3N0UmVsYXRpdmVQYXJlbnQgIT09IGRvY3VtZW50LmRvY3VtZW50RWxlbWVudCkge1xuICAgICAgICAgIGlmIChnaG9zdFJlbGF0aXZlUGFyZW50ID09PSBkb2N1bWVudCkgZ2hvc3RSZWxhdGl2ZVBhcmVudCA9IGdldFdpbmRvd1Njcm9sbGluZ0VsZW1lbnQoKTtcbiAgICAgICAgICByZWN0LnRvcCArPSBnaG9zdFJlbGF0aXZlUGFyZW50LnNjcm9sbFRvcDtcbiAgICAgICAgICByZWN0LmxlZnQgKz0gZ2hvc3RSZWxhdGl2ZVBhcmVudC5zY3JvbGxMZWZ0O1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIGdob3N0UmVsYXRpdmVQYXJlbnQgPSBnZXRXaW5kb3dTY3JvbGxpbmdFbGVtZW50KCk7XG4gICAgICAgIH1cblxuICAgICAgICBnaG9zdFJlbGF0aXZlUGFyZW50SW5pdGlhbFNjcm9sbCA9IGdldFJlbGF0aXZlU2Nyb2xsT2Zmc2V0KGdob3N0UmVsYXRpdmVQYXJlbnQpO1xuICAgICAgfVxuXG4gICAgICBnaG9zdEVsID0gZHJhZ0VsLmNsb25lTm9kZSh0cnVlKTtcbiAgICAgIHRvZ2dsZUNsYXNzKGdob3N0RWwsIG9wdGlvbnMuZ2hvc3RDbGFzcywgZmFsc2UpO1xuICAgICAgdG9nZ2xlQ2xhc3MoZ2hvc3RFbCwgb3B0aW9ucy5mYWxsYmFja0NsYXNzLCB0cnVlKTtcbiAgICAgIHRvZ2dsZUNsYXNzKGdob3N0RWwsIG9wdGlvbnMuZHJhZ0NsYXNzLCB0cnVlKTtcbiAgICAgIGNzcyhnaG9zdEVsLCAndHJhbnNpdGlvbicsICcnKTtcbiAgICAgIGNzcyhnaG9zdEVsLCAndHJhbnNmb3JtJywgJycpO1xuICAgICAgY3NzKGdob3N0RWwsICdib3gtc2l6aW5nJywgJ2JvcmRlci1ib3gnKTtcbiAgICAgIGNzcyhnaG9zdEVsLCAnbWFyZ2luJywgMCk7XG4gICAgICBjc3MoZ2hvc3RFbCwgJ3RvcCcsIHJlY3QudG9wKTtcbiAgICAgIGNzcyhnaG9zdEVsLCAnbGVmdCcsIHJlY3QubGVmdCk7XG4gICAgICBjc3MoZ2hvc3RFbCwgJ3dpZHRoJywgcmVjdC53aWR0aCk7XG4gICAgICBjc3MoZ2hvc3RFbCwgJ2hlaWdodCcsIHJlY3QuaGVpZ2h0KTtcbiAgICAgIGNzcyhnaG9zdEVsLCAnb3BhY2l0eScsICcwLjgnKTtcbiAgICAgIGNzcyhnaG9zdEVsLCAncG9zaXRpb24nLCBQb3NpdGlvbkdob3N0QWJzb2x1dGVseSA/ICdhYnNvbHV0ZScgOiAnZml4ZWQnKTtcbiAgICAgIGNzcyhnaG9zdEVsLCAnekluZGV4JywgJzEwMDAwMCcpO1xuICAgICAgY3NzKGdob3N0RWwsICdwb2ludGVyRXZlbnRzJywgJ25vbmUnKTtcbiAgICAgIFNvcnRhYmxlLmdob3N0ID0gZ2hvc3RFbDtcbiAgICAgIGNvbnRhaW5lci5hcHBlbmRDaGlsZChnaG9zdEVsKTsgLy8gU2V0IHRyYW5zZm9ybS1vcmlnaW5cblxuICAgICAgY3NzKGdob3N0RWwsICd0cmFuc2Zvcm0tb3JpZ2luJywgdGFwRGlzdGFuY2VMZWZ0IC8gcGFyc2VJbnQoZ2hvc3RFbC5zdHlsZS53aWR0aCkgKiAxMDAgKyAnJSAnICsgdGFwRGlzdGFuY2VUb3AgLyBwYXJzZUludChnaG9zdEVsLnN0eWxlLmhlaWdodCkgKiAxMDAgKyAnJScpO1xuICAgIH1cbiAgfSxcbiAgX29uRHJhZ1N0YXJ0OiBmdW5jdGlvbiBfb25EcmFnU3RhcnQoXG4gIC8qKkV2ZW50Ki9cbiAgZXZ0LFxuICAvKipib29sZWFuKi9cbiAgZmFsbGJhY2spIHtcbiAgICB2YXIgX3RoaXMgPSB0aGlzO1xuXG4gICAgdmFyIGRhdGFUcmFuc2ZlciA9IGV2dC5kYXRhVHJhbnNmZXI7XG4gICAgdmFyIG9wdGlvbnMgPSBfdGhpcy5vcHRpb25zO1xuICAgIHBsdWdpbkV2ZW50KCdkcmFnU3RhcnQnLCB0aGlzLCB7XG4gICAgICBldnQ6IGV2dFxuICAgIH0pO1xuXG4gICAgaWYgKFNvcnRhYmxlLmV2ZW50Q2FuY2VsZWQpIHtcbiAgICAgIHRoaXMuX29uRHJvcCgpO1xuXG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgcGx1Z2luRXZlbnQoJ3NldHVwQ2xvbmUnLCB0aGlzKTtcblxuICAgIGlmICghU29ydGFibGUuZXZlbnRDYW5jZWxlZCkge1xuICAgICAgY2xvbmVFbCA9IGNsb25lKGRyYWdFbCk7XG4gICAgICBjbG9uZUVsLmRyYWdnYWJsZSA9IGZhbHNlO1xuICAgICAgY2xvbmVFbC5zdHlsZVsnd2lsbC1jaGFuZ2UnXSA9ICcnO1xuXG4gICAgICB0aGlzLl9oaWRlQ2xvbmUoKTtcblxuICAgICAgdG9nZ2xlQ2xhc3MoY2xvbmVFbCwgdGhpcy5vcHRpb25zLmNob3NlbkNsYXNzLCBmYWxzZSk7XG4gICAgICBTb3J0YWJsZS5jbG9uZSA9IGNsb25lRWw7XG4gICAgfSAvLyAjMTE0MzogSUZyYW1lIHN1cHBvcnQgd29ya2Fyb3VuZFxuXG5cbiAgICBfdGhpcy5jbG9uZUlkID0gX25leHRUaWNrKGZ1bmN0aW9uICgpIHtcbiAgICAgIHBsdWdpbkV2ZW50KCdjbG9uZScsIF90aGlzKTtcbiAgICAgIGlmIChTb3J0YWJsZS5ldmVudENhbmNlbGVkKSByZXR1cm47XG5cbiAgICAgIGlmICghX3RoaXMub3B0aW9ucy5yZW1vdmVDbG9uZU9uSGlkZSkge1xuICAgICAgICByb290RWwuaW5zZXJ0QmVmb3JlKGNsb25lRWwsIGRyYWdFbCk7XG4gICAgICB9XG5cbiAgICAgIF90aGlzLl9oaWRlQ2xvbmUoKTtcblxuICAgICAgX2Rpc3BhdGNoRXZlbnQoe1xuICAgICAgICBzb3J0YWJsZTogX3RoaXMsXG4gICAgICAgIG5hbWU6ICdjbG9uZSdcbiAgICAgIH0pO1xuICAgIH0pO1xuICAgICFmYWxsYmFjayAmJiB0b2dnbGVDbGFzcyhkcmFnRWwsIG9wdGlvbnMuZHJhZ0NsYXNzLCB0cnVlKTsgLy8gU2V0IHByb3BlciBkcm9wIGV2ZW50c1xuXG4gICAgaWYgKGZhbGxiYWNrKSB7XG4gICAgICBpZ25vcmVOZXh0Q2xpY2sgPSB0cnVlO1xuICAgICAgX3RoaXMuX2xvb3BJZCA9IHNldEludGVydmFsKF90aGlzLl9lbXVsYXRlRHJhZ092ZXIsIDUwKTtcbiAgICB9IGVsc2Uge1xuICAgICAgLy8gVW5kbyB3aGF0IHdhcyBzZXQgaW4gX3ByZXBhcmVEcmFnU3RhcnQgYmVmb3JlIGRyYWcgc3RhcnRlZFxuICAgICAgb2ZmKGRvY3VtZW50LCAnbW91c2V1cCcsIF90aGlzLl9vbkRyb3ApO1xuICAgICAgb2ZmKGRvY3VtZW50LCAndG91Y2hlbmQnLCBfdGhpcy5fb25Ecm9wKTtcbiAgICAgIG9mZihkb2N1bWVudCwgJ3RvdWNoY2FuY2VsJywgX3RoaXMuX29uRHJvcCk7XG5cbiAgICAgIGlmIChkYXRhVHJhbnNmZXIpIHtcbiAgICAgICAgZGF0YVRyYW5zZmVyLmVmZmVjdEFsbG93ZWQgPSAnbW92ZSc7XG4gICAgICAgIG9wdGlvbnMuc2V0RGF0YSAmJiBvcHRpb25zLnNldERhdGEuY2FsbChfdGhpcywgZGF0YVRyYW5zZmVyLCBkcmFnRWwpO1xuICAgICAgfVxuXG4gICAgICBvbihkb2N1bWVudCwgJ2Ryb3AnLCBfdGhpcyk7IC8vICMxMjc2IGZpeDpcblxuICAgICAgY3NzKGRyYWdFbCwgJ3RyYW5zZm9ybScsICd0cmFuc2xhdGVaKDApJyk7XG4gICAgfVxuXG4gICAgYXdhaXRpbmdEcmFnU3RhcnRlZCA9IHRydWU7XG4gICAgX3RoaXMuX2RyYWdTdGFydElkID0gX25leHRUaWNrKF90aGlzLl9kcmFnU3RhcnRlZC5iaW5kKF90aGlzLCBmYWxsYmFjaywgZXZ0KSk7XG4gICAgb24oZG9jdW1lbnQsICdzZWxlY3RzdGFydCcsIF90aGlzKTtcbiAgICBtb3ZlZCA9IHRydWU7XG5cbiAgICBpZiAoU2FmYXJpKSB7XG4gICAgICBjc3MoZG9jdW1lbnQuYm9keSwgJ3VzZXItc2VsZWN0JywgJ25vbmUnKTtcbiAgICB9XG4gIH0sXG4gIC8vIFJldHVybnMgdHJ1ZSAtIGlmIG5vIGZ1cnRoZXIgYWN0aW9uIGlzIG5lZWRlZCAoZWl0aGVyIGluc2VydGVkIG9yIGFub3RoZXIgY29uZGl0aW9uKVxuICBfb25EcmFnT3ZlcjogZnVuY3Rpb24gX29uRHJhZ092ZXIoXG4gIC8qKkV2ZW50Ki9cbiAgZXZ0KSB7XG4gICAgdmFyIGVsID0gdGhpcy5lbCxcbiAgICAgICAgdGFyZ2V0ID0gZXZ0LnRhcmdldCxcbiAgICAgICAgZHJhZ1JlY3QsXG4gICAgICAgIHRhcmdldFJlY3QsXG4gICAgICAgIHJldmVydCxcbiAgICAgICAgb3B0aW9ucyA9IHRoaXMub3B0aW9ucyxcbiAgICAgICAgZ3JvdXAgPSBvcHRpb25zLmdyb3VwLFxuICAgICAgICBhY3RpdmVTb3J0YWJsZSA9IFNvcnRhYmxlLmFjdGl2ZSxcbiAgICAgICAgaXNPd25lciA9IGFjdGl2ZUdyb3VwID09PSBncm91cCxcbiAgICAgICAgY2FuU29ydCA9IG9wdGlvbnMuc29ydCxcbiAgICAgICAgZnJvbVNvcnRhYmxlID0gcHV0U29ydGFibGUgfHwgYWN0aXZlU29ydGFibGUsXG4gICAgICAgIHZlcnRpY2FsLFxuICAgICAgICBfdGhpcyA9IHRoaXMsXG4gICAgICAgIGNvbXBsZXRlZEZpcmVkID0gZmFsc2U7XG5cbiAgICBpZiAoX3NpbGVudCkgcmV0dXJuO1xuXG4gICAgZnVuY3Rpb24gZHJhZ092ZXJFdmVudChuYW1lLCBleHRyYSkge1xuICAgICAgcGx1Z2luRXZlbnQobmFtZSwgX3RoaXMsIF9vYmplY3RTcHJlYWQyKHtcbiAgICAgICAgZXZ0OiBldnQsXG4gICAgICAgIGlzT3duZXI6IGlzT3duZXIsXG4gICAgICAgIGF4aXM6IHZlcnRpY2FsID8gJ3ZlcnRpY2FsJyA6ICdob3Jpem9udGFsJyxcbiAgICAgICAgcmV2ZXJ0OiByZXZlcnQsXG4gICAgICAgIGRyYWdSZWN0OiBkcmFnUmVjdCxcbiAgICAgICAgdGFyZ2V0UmVjdDogdGFyZ2V0UmVjdCxcbiAgICAgICAgY2FuU29ydDogY2FuU29ydCxcbiAgICAgICAgZnJvbVNvcnRhYmxlOiBmcm9tU29ydGFibGUsXG4gICAgICAgIHRhcmdldDogdGFyZ2V0LFxuICAgICAgICBjb21wbGV0ZWQ6IGNvbXBsZXRlZCxcbiAgICAgICAgb25Nb3ZlOiBmdW5jdGlvbiBvbk1vdmUodGFyZ2V0LCBhZnRlcikge1xuICAgICAgICAgIHJldHVybiBfb25Nb3ZlKHJvb3RFbCwgZWwsIGRyYWdFbCwgZHJhZ1JlY3QsIHRhcmdldCwgZ2V0UmVjdCh0YXJnZXQpLCBldnQsIGFmdGVyKTtcbiAgICAgICAgfSxcbiAgICAgICAgY2hhbmdlZDogY2hhbmdlZFxuICAgICAgfSwgZXh0cmEpKTtcbiAgICB9IC8vIENhcHR1cmUgYW5pbWF0aW9uIHN0YXRlXG5cblxuICAgIGZ1bmN0aW9uIGNhcHR1cmUoKSB7XG4gICAgICBkcmFnT3ZlckV2ZW50KCdkcmFnT3ZlckFuaW1hdGlvbkNhcHR1cmUnKTtcblxuICAgICAgX3RoaXMuY2FwdHVyZUFuaW1hdGlvblN0YXRlKCk7XG5cbiAgICAgIGlmIChfdGhpcyAhPT0gZnJvbVNvcnRhYmxlKSB7XG4gICAgICAgIGZyb21Tb3J0YWJsZS5jYXB0dXJlQW5pbWF0aW9uU3RhdGUoKTtcbiAgICAgIH1cbiAgICB9IC8vIFJldHVybiBpbnZvY2F0aW9uIHdoZW4gZHJhZ0VsIGlzIGluc2VydGVkIChvciBjb21wbGV0ZWQpXG5cblxuICAgIGZ1bmN0aW9uIGNvbXBsZXRlZChpbnNlcnRpb24pIHtcbiAgICAgIGRyYWdPdmVyRXZlbnQoJ2RyYWdPdmVyQ29tcGxldGVkJywge1xuICAgICAgICBpbnNlcnRpb246IGluc2VydGlvblxuICAgICAgfSk7XG5cbiAgICAgIGlmIChpbnNlcnRpb24pIHtcbiAgICAgICAgLy8gQ2xvbmVzIG11c3QgYmUgaGlkZGVuIGJlZm9yZSBmb2xkaW5nIGFuaW1hdGlvbiB0byBjYXB0dXJlIGRyYWdSZWN0QWJzb2x1dGUgcHJvcGVybHlcbiAgICAgICAgaWYgKGlzT3duZXIpIHtcbiAgICAgICAgICBhY3RpdmVTb3J0YWJsZS5faGlkZUNsb25lKCk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgYWN0aXZlU29ydGFibGUuX3Nob3dDbG9uZShfdGhpcyk7XG4gICAgICAgIH1cblxuICAgICAgICBpZiAoX3RoaXMgIT09IGZyb21Tb3J0YWJsZSkge1xuICAgICAgICAgIC8vIFNldCBnaG9zdCBjbGFzcyB0byBuZXcgc29ydGFibGUncyBnaG9zdCBjbGFzc1xuICAgICAgICAgIHRvZ2dsZUNsYXNzKGRyYWdFbCwgcHV0U29ydGFibGUgPyBwdXRTb3J0YWJsZS5vcHRpb25zLmdob3N0Q2xhc3MgOiBhY3RpdmVTb3J0YWJsZS5vcHRpb25zLmdob3N0Q2xhc3MsIGZhbHNlKTtcbiAgICAgICAgICB0b2dnbGVDbGFzcyhkcmFnRWwsIG9wdGlvbnMuZ2hvc3RDbGFzcywgdHJ1ZSk7XG4gICAgICAgIH1cblxuICAgICAgICBpZiAocHV0U29ydGFibGUgIT09IF90aGlzICYmIF90aGlzICE9PSBTb3J0YWJsZS5hY3RpdmUpIHtcbiAgICAgICAgICBwdXRTb3J0YWJsZSA9IF90aGlzO1xuICAgICAgICB9IGVsc2UgaWYgKF90aGlzID09PSBTb3J0YWJsZS5hY3RpdmUgJiYgcHV0U29ydGFibGUpIHtcbiAgICAgICAgICBwdXRTb3J0YWJsZSA9IG51bGw7XG4gICAgICAgIH0gLy8gQW5pbWF0aW9uXG5cblxuICAgICAgICBpZiAoZnJvbVNvcnRhYmxlID09PSBfdGhpcykge1xuICAgICAgICAgIF90aGlzLl9pZ25vcmVXaGlsZUFuaW1hdGluZyA9IHRhcmdldDtcbiAgICAgICAgfVxuXG4gICAgICAgIF90aGlzLmFuaW1hdGVBbGwoZnVuY3Rpb24gKCkge1xuICAgICAgICAgIGRyYWdPdmVyRXZlbnQoJ2RyYWdPdmVyQW5pbWF0aW9uQ29tcGxldGUnKTtcbiAgICAgICAgICBfdGhpcy5faWdub3JlV2hpbGVBbmltYXRpbmcgPSBudWxsO1xuICAgICAgICB9KTtcblxuICAgICAgICBpZiAoX3RoaXMgIT09IGZyb21Tb3J0YWJsZSkge1xuICAgICAgICAgIGZyb21Tb3J0YWJsZS5hbmltYXRlQWxsKCk7XG4gICAgICAgICAgZnJvbVNvcnRhYmxlLl9pZ25vcmVXaGlsZUFuaW1hdGluZyA9IG51bGw7XG4gICAgICAgIH1cbiAgICAgIH0gLy8gTnVsbCBsYXN0VGFyZ2V0IGlmIGl0IGlzIG5vdCBpbnNpZGUgYSBwcmV2aW91c2x5IHN3YXBwZWQgZWxlbWVudFxuXG5cbiAgICAgIGlmICh0YXJnZXQgPT09IGRyYWdFbCAmJiAhZHJhZ0VsLmFuaW1hdGVkIHx8IHRhcmdldCA9PT0gZWwgJiYgIXRhcmdldC5hbmltYXRlZCkge1xuICAgICAgICBsYXN0VGFyZ2V0ID0gbnVsbDtcbiAgICAgIH0gLy8gbm8gYnViYmxpbmcgYW5kIG5vdCBmYWxsYmFja1xuXG5cbiAgICAgIGlmICghb3B0aW9ucy5kcmFnb3ZlckJ1YmJsZSAmJiAhZXZ0LnJvb3RFbCAmJiB0YXJnZXQgIT09IGRvY3VtZW50KSB7XG4gICAgICAgIGRyYWdFbC5wYXJlbnROb2RlW2V4cGFuZG9dLl9pc091dHNpZGVUaGlzRWwoZXZ0LnRhcmdldCk7IC8vIERvIG5vdCBkZXRlY3QgZm9yIGVtcHR5IGluc2VydCBpZiBhbHJlYWR5IGluc2VydGVkXG5cblxuICAgICAgICAhaW5zZXJ0aW9uICYmIG5lYXJlc3RFbXB0eUluc2VydERldGVjdEV2ZW50KGV2dCk7XG4gICAgICB9XG5cbiAgICAgICFvcHRpb25zLmRyYWdvdmVyQnViYmxlICYmIGV2dC5zdG9wUHJvcGFnYXRpb24gJiYgZXZ0LnN0b3BQcm9wYWdhdGlvbigpO1xuICAgICAgcmV0dXJuIGNvbXBsZXRlZEZpcmVkID0gdHJ1ZTtcbiAgICB9IC8vIENhbGwgd2hlbiBkcmFnRWwgaGFzIGJlZW4gaW5zZXJ0ZWRcblxuXG4gICAgZnVuY3Rpb24gY2hhbmdlZCgpIHtcbiAgICAgIG5ld0luZGV4ID0gaW5kZXgoZHJhZ0VsKTtcbiAgICAgIG5ld0RyYWdnYWJsZUluZGV4ID0gaW5kZXgoZHJhZ0VsLCBvcHRpb25zLmRyYWdnYWJsZSk7XG5cbiAgICAgIF9kaXNwYXRjaEV2ZW50KHtcbiAgICAgICAgc29ydGFibGU6IF90aGlzLFxuICAgICAgICBuYW1lOiAnY2hhbmdlJyxcbiAgICAgICAgdG9FbDogZWwsXG4gICAgICAgIG5ld0luZGV4OiBuZXdJbmRleCxcbiAgICAgICAgbmV3RHJhZ2dhYmxlSW5kZXg6IG5ld0RyYWdnYWJsZUluZGV4LFxuICAgICAgICBvcmlnaW5hbEV2ZW50OiBldnRcbiAgICAgIH0pO1xuICAgIH1cblxuICAgIGlmIChldnQucHJldmVudERlZmF1bHQgIT09IHZvaWQgMCkge1xuICAgICAgZXZ0LmNhbmNlbGFibGUgJiYgZXZ0LnByZXZlbnREZWZhdWx0KCk7XG4gICAgfVxuXG4gICAgdGFyZ2V0ID0gY2xvc2VzdCh0YXJnZXQsIG9wdGlvbnMuZHJhZ2dhYmxlLCBlbCwgdHJ1ZSk7XG4gICAgZHJhZ092ZXJFdmVudCgnZHJhZ092ZXInKTtcbiAgICBpZiAoU29ydGFibGUuZXZlbnRDYW5jZWxlZCkgcmV0dXJuIGNvbXBsZXRlZEZpcmVkO1xuXG4gICAgaWYgKGRyYWdFbC5jb250YWlucyhldnQudGFyZ2V0KSB8fCB0YXJnZXQuYW5pbWF0ZWQgJiYgdGFyZ2V0LmFuaW1hdGluZ1ggJiYgdGFyZ2V0LmFuaW1hdGluZ1kgfHwgX3RoaXMuX2lnbm9yZVdoaWxlQW5pbWF0aW5nID09PSB0YXJnZXQpIHtcbiAgICAgIHJldHVybiBjb21wbGV0ZWQoZmFsc2UpO1xuICAgIH1cblxuICAgIGlnbm9yZU5leHRDbGljayA9IGZhbHNlO1xuXG4gICAgaWYgKGFjdGl2ZVNvcnRhYmxlICYmICFvcHRpb25zLmRpc2FibGVkICYmIChpc093bmVyID8gY2FuU29ydCB8fCAocmV2ZXJ0ID0gcGFyZW50RWwgIT09IHJvb3RFbCkgLy8gUmV2ZXJ0aW5nIGl0ZW0gaW50byB0aGUgb3JpZ2luYWwgbGlzdFxuICAgIDogcHV0U29ydGFibGUgPT09IHRoaXMgfHwgKHRoaXMubGFzdFB1dE1vZGUgPSBhY3RpdmVHcm91cC5jaGVja1B1bGwodGhpcywgYWN0aXZlU29ydGFibGUsIGRyYWdFbCwgZXZ0KSkgJiYgZ3JvdXAuY2hlY2tQdXQodGhpcywgYWN0aXZlU29ydGFibGUsIGRyYWdFbCwgZXZ0KSkpIHtcbiAgICAgIHZlcnRpY2FsID0gdGhpcy5fZ2V0RGlyZWN0aW9uKGV2dCwgdGFyZ2V0KSA9PT0gJ3ZlcnRpY2FsJztcbiAgICAgIGRyYWdSZWN0ID0gZ2V0UmVjdChkcmFnRWwpO1xuICAgICAgZHJhZ092ZXJFdmVudCgnZHJhZ092ZXJWYWxpZCcpO1xuICAgICAgaWYgKFNvcnRhYmxlLmV2ZW50Q2FuY2VsZWQpIHJldHVybiBjb21wbGV0ZWRGaXJlZDtcblxuICAgICAgaWYgKHJldmVydCkge1xuICAgICAgICBwYXJlbnRFbCA9IHJvb3RFbDsgLy8gYWN0dWFsaXphdGlvblxuXG4gICAgICAgIGNhcHR1cmUoKTtcblxuICAgICAgICB0aGlzLl9oaWRlQ2xvbmUoKTtcblxuICAgICAgICBkcmFnT3ZlckV2ZW50KCdyZXZlcnQnKTtcblxuICAgICAgICBpZiAoIVNvcnRhYmxlLmV2ZW50Q2FuY2VsZWQpIHtcbiAgICAgICAgICBpZiAobmV4dEVsKSB7XG4gICAgICAgICAgICByb290RWwuaW5zZXJ0QmVmb3JlKGRyYWdFbCwgbmV4dEVsKTtcbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgcm9vdEVsLmFwcGVuZENoaWxkKGRyYWdFbCk7XG4gICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIGNvbXBsZXRlZCh0cnVlKTtcbiAgICAgIH1cblxuICAgICAgdmFyIGVsTGFzdENoaWxkID0gbGFzdENoaWxkKGVsLCBvcHRpb25zLmRyYWdnYWJsZSk7XG5cbiAgICAgIGlmICghZWxMYXN0Q2hpbGQgfHwgX2dob3N0SXNMYXN0KGV2dCwgdmVydGljYWwsIHRoaXMpICYmICFlbExhc3RDaGlsZC5hbmltYXRlZCkge1xuICAgICAgICAvLyBJbnNlcnQgdG8gZW5kIG9mIGxpc3RcbiAgICAgICAgLy8gSWYgYWxyZWFkeSBhdCBlbmQgb2YgbGlzdDogRG8gbm90IGluc2VydFxuICAgICAgICBpZiAoZWxMYXN0Q2hpbGQgPT09IGRyYWdFbCkge1xuICAgICAgICAgIHJldHVybiBjb21wbGV0ZWQoZmFsc2UpO1xuICAgICAgICB9IC8vIGlmIHRoZXJlIGlzIGEgbGFzdCBlbGVtZW50LCBpdCBpcyB0aGUgdGFyZ2V0XG5cblxuICAgICAgICBpZiAoZWxMYXN0Q2hpbGQgJiYgZWwgPT09IGV2dC50YXJnZXQpIHtcbiAgICAgICAgICB0YXJnZXQgPSBlbExhc3RDaGlsZDtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmICh0YXJnZXQpIHtcbiAgICAgICAgICB0YXJnZXRSZWN0ID0gZ2V0UmVjdCh0YXJnZXQpO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKF9vbk1vdmUocm9vdEVsLCBlbCwgZHJhZ0VsLCBkcmFnUmVjdCwgdGFyZ2V0LCB0YXJnZXRSZWN0LCBldnQsICEhdGFyZ2V0KSAhPT0gZmFsc2UpIHtcbiAgICAgICAgICBjYXB0dXJlKCk7XG4gICAgICAgICAgZWwuYXBwZW5kQ2hpbGQoZHJhZ0VsKTtcbiAgICAgICAgICBwYXJlbnRFbCA9IGVsOyAvLyBhY3R1YWxpemF0aW9uXG5cbiAgICAgICAgICBjaGFuZ2VkKCk7XG4gICAgICAgICAgcmV0dXJuIGNvbXBsZXRlZCh0cnVlKTtcbiAgICAgICAgfVxuICAgICAgfSBlbHNlIGlmIChlbExhc3RDaGlsZCAmJiBfZ2hvc3RJc0ZpcnN0KGV2dCwgdmVydGljYWwsIHRoaXMpKSB7XG4gICAgICAgIC8vIEluc2VydCB0byBzdGFydCBvZiBsaXN0XG4gICAgICAgIHZhciBmaXJzdENoaWxkID0gZ2V0Q2hpbGQoZWwsIDAsIG9wdGlvbnMsIHRydWUpO1xuXG4gICAgICAgIGlmIChmaXJzdENoaWxkID09PSBkcmFnRWwpIHtcbiAgICAgICAgICByZXR1cm4gY29tcGxldGVkKGZhbHNlKTtcbiAgICAgICAgfVxuXG4gICAgICAgIHRhcmdldCA9IGZpcnN0Q2hpbGQ7XG4gICAgICAgIHRhcmdldFJlY3QgPSBnZXRSZWN0KHRhcmdldCk7XG5cbiAgICAgICAgaWYgKF9vbk1vdmUocm9vdEVsLCBlbCwgZHJhZ0VsLCBkcmFnUmVjdCwgdGFyZ2V0LCB0YXJnZXRSZWN0LCBldnQsIGZhbHNlKSAhPT0gZmFsc2UpIHtcbiAgICAgICAgICBjYXB0dXJlKCk7XG4gICAgICAgICAgZWwuaW5zZXJ0QmVmb3JlKGRyYWdFbCwgZmlyc3RDaGlsZCk7XG4gICAgICAgICAgcGFyZW50RWwgPSBlbDsgLy8gYWN0dWFsaXphdGlvblxuXG4gICAgICAgICAgY2hhbmdlZCgpO1xuICAgICAgICAgIHJldHVybiBjb21wbGV0ZWQodHJ1ZSk7XG4gICAgICAgIH1cbiAgICAgIH0gZWxzZSBpZiAodGFyZ2V0LnBhcmVudE5vZGUgPT09IGVsKSB7XG4gICAgICAgIHRhcmdldFJlY3QgPSBnZXRSZWN0KHRhcmdldCk7XG4gICAgICAgIHZhciBkaXJlY3Rpb24gPSAwLFxuICAgICAgICAgICAgdGFyZ2V0QmVmb3JlRmlyc3RTd2FwLFxuICAgICAgICAgICAgZGlmZmVyZW50TGV2ZWwgPSBkcmFnRWwucGFyZW50Tm9kZSAhPT0gZWwsXG4gICAgICAgICAgICBkaWZmZXJlbnRSb3dDb2wgPSAhX2RyYWdFbEluUm93Q29sdW1uKGRyYWdFbC5hbmltYXRlZCAmJiBkcmFnRWwudG9SZWN0IHx8IGRyYWdSZWN0LCB0YXJnZXQuYW5pbWF0ZWQgJiYgdGFyZ2V0LnRvUmVjdCB8fCB0YXJnZXRSZWN0LCB2ZXJ0aWNhbCksXG4gICAgICAgICAgICBzaWRlMSA9IHZlcnRpY2FsID8gJ3RvcCcgOiAnbGVmdCcsXG4gICAgICAgICAgICBzY3JvbGxlZFBhc3RUb3AgPSBpc1Njcm9sbGVkUGFzdCh0YXJnZXQsICd0b3AnLCAndG9wJykgfHwgaXNTY3JvbGxlZFBhc3QoZHJhZ0VsLCAndG9wJywgJ3RvcCcpLFxuICAgICAgICAgICAgc2Nyb2xsQmVmb3JlID0gc2Nyb2xsZWRQYXN0VG9wID8gc2Nyb2xsZWRQYXN0VG9wLnNjcm9sbFRvcCA6IHZvaWQgMDtcblxuICAgICAgICBpZiAobGFzdFRhcmdldCAhPT0gdGFyZ2V0KSB7XG4gICAgICAgICAgdGFyZ2V0QmVmb3JlRmlyc3RTd2FwID0gdGFyZ2V0UmVjdFtzaWRlMV07XG4gICAgICAgICAgcGFzdEZpcnN0SW52ZXJ0VGhyZXNoID0gZmFsc2U7XG4gICAgICAgICAgaXNDaXJjdW1zdGFudGlhbEludmVydCA9ICFkaWZmZXJlbnRSb3dDb2wgJiYgb3B0aW9ucy5pbnZlcnRTd2FwIHx8IGRpZmZlcmVudExldmVsO1xuICAgICAgICB9XG5cbiAgICAgICAgZGlyZWN0aW9uID0gX2dldFN3YXBEaXJlY3Rpb24oZXZ0LCB0YXJnZXQsIHRhcmdldFJlY3QsIHZlcnRpY2FsLCBkaWZmZXJlbnRSb3dDb2wgPyAxIDogb3B0aW9ucy5zd2FwVGhyZXNob2xkLCBvcHRpb25zLmludmVydGVkU3dhcFRocmVzaG9sZCA9PSBudWxsID8gb3B0aW9ucy5zd2FwVGhyZXNob2xkIDogb3B0aW9ucy5pbnZlcnRlZFN3YXBUaHJlc2hvbGQsIGlzQ2lyY3Vtc3RhbnRpYWxJbnZlcnQsIGxhc3RUYXJnZXQgPT09IHRhcmdldCk7XG4gICAgICAgIHZhciBzaWJsaW5nO1xuXG4gICAgICAgIGlmIChkaXJlY3Rpb24gIT09IDApIHtcbiAgICAgICAgICAvLyBDaGVjayBpZiB0YXJnZXQgaXMgYmVzaWRlIGRyYWdFbCBpbiByZXNwZWN0aXZlIGRpcmVjdGlvbiAoaWdub3JpbmcgaGlkZGVuIGVsZW1lbnRzKVxuICAgICAgICAgIHZhciBkcmFnSW5kZXggPSBpbmRleChkcmFnRWwpO1xuXG4gICAgICAgICAgZG8ge1xuICAgICAgICAgICAgZHJhZ0luZGV4IC09IGRpcmVjdGlvbjtcbiAgICAgICAgICAgIHNpYmxpbmcgPSBwYXJlbnRFbC5jaGlsZHJlbltkcmFnSW5kZXhdO1xuICAgICAgICAgIH0gd2hpbGUgKHNpYmxpbmcgJiYgKGNzcyhzaWJsaW5nLCAnZGlzcGxheScpID09PSAnbm9uZScgfHwgc2libGluZyA9PT0gZ2hvc3RFbCkpO1xuICAgICAgICB9IC8vIElmIGRyYWdFbCBpcyBhbHJlYWR5IGJlc2lkZSB0YXJnZXQ6IERvIG5vdCBpbnNlcnRcblxuXG4gICAgICAgIGlmIChkaXJlY3Rpb24gPT09IDAgfHwgc2libGluZyA9PT0gdGFyZ2V0KSB7XG4gICAgICAgICAgcmV0dXJuIGNvbXBsZXRlZChmYWxzZSk7XG4gICAgICAgIH1cblxuICAgICAgICBsYXN0VGFyZ2V0ID0gdGFyZ2V0O1xuICAgICAgICBsYXN0RGlyZWN0aW9uID0gZGlyZWN0aW9uO1xuICAgICAgICB2YXIgbmV4dFNpYmxpbmcgPSB0YXJnZXQubmV4dEVsZW1lbnRTaWJsaW5nLFxuICAgICAgICAgICAgYWZ0ZXIgPSBmYWxzZTtcbiAgICAgICAgYWZ0ZXIgPSBkaXJlY3Rpb24gPT09IDE7XG5cbiAgICAgICAgdmFyIG1vdmVWZWN0b3IgPSBfb25Nb3ZlKHJvb3RFbCwgZWwsIGRyYWdFbCwgZHJhZ1JlY3QsIHRhcmdldCwgdGFyZ2V0UmVjdCwgZXZ0LCBhZnRlcik7XG5cbiAgICAgICAgaWYgKG1vdmVWZWN0b3IgIT09IGZhbHNlKSB7XG4gICAgICAgICAgaWYgKG1vdmVWZWN0b3IgPT09IDEgfHwgbW92ZVZlY3RvciA9PT0gLTEpIHtcbiAgICAgICAgICAgIGFmdGVyID0gbW92ZVZlY3RvciA9PT0gMTtcbiAgICAgICAgICB9XG5cbiAgICAgICAgICBfc2lsZW50ID0gdHJ1ZTtcbiAgICAgICAgICBzZXRUaW1lb3V0KF91bnNpbGVudCwgMzApO1xuICAgICAgICAgIGNhcHR1cmUoKTtcblxuICAgICAgICAgIGlmIChhZnRlciAmJiAhbmV4dFNpYmxpbmcpIHtcbiAgICAgICAgICAgIGVsLmFwcGVuZENoaWxkKGRyYWdFbCk7XG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHRhcmdldC5wYXJlbnROb2RlLmluc2VydEJlZm9yZShkcmFnRWwsIGFmdGVyID8gbmV4dFNpYmxpbmcgOiB0YXJnZXQpO1xuICAgICAgICAgIH0gLy8gVW5kbyBjaHJvbWUncyBzY3JvbGwgYWRqdXN0bWVudCAoaGFzIG5vIGVmZmVjdCBvbiBvdGhlciBicm93c2VycylcblxuXG4gICAgICAgICAgaWYgKHNjcm9sbGVkUGFzdFRvcCkge1xuICAgICAgICAgICAgc2Nyb2xsQnkoc2Nyb2xsZWRQYXN0VG9wLCAwLCBzY3JvbGxCZWZvcmUgLSBzY3JvbGxlZFBhc3RUb3Auc2Nyb2xsVG9wKTtcbiAgICAgICAgICB9XG5cbiAgICAgICAgICBwYXJlbnRFbCA9IGRyYWdFbC5wYXJlbnROb2RlOyAvLyBhY3R1YWxpemF0aW9uXG4gICAgICAgICAgLy8gbXVzdCBiZSBkb25lIGJlZm9yZSBhbmltYXRpb25cblxuICAgICAgICAgIGlmICh0YXJnZXRCZWZvcmVGaXJzdFN3YXAgIT09IHVuZGVmaW5lZCAmJiAhaXNDaXJjdW1zdGFudGlhbEludmVydCkge1xuICAgICAgICAgICAgdGFyZ2V0TW92ZURpc3RhbmNlID0gTWF0aC5hYnModGFyZ2V0QmVmb3JlRmlyc3RTd2FwIC0gZ2V0UmVjdCh0YXJnZXQpW3NpZGUxXSk7XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgY2hhbmdlZCgpO1xuICAgICAgICAgIHJldHVybiBjb21wbGV0ZWQodHJ1ZSk7XG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgaWYgKGVsLmNvbnRhaW5zKGRyYWdFbCkpIHtcbiAgICAgICAgcmV0dXJuIGNvbXBsZXRlZChmYWxzZSk7XG4gICAgICB9XG4gICAgfVxuXG4gICAgcmV0dXJuIGZhbHNlO1xuICB9LFxuICBfaWdub3JlV2hpbGVBbmltYXRpbmc6IG51bGwsXG4gIF9vZmZNb3ZlRXZlbnRzOiBmdW5jdGlvbiBfb2ZmTW92ZUV2ZW50cygpIHtcbiAgICBvZmYoZG9jdW1lbnQsICdtb3VzZW1vdmUnLCB0aGlzLl9vblRvdWNoTW92ZSk7XG4gICAgb2ZmKGRvY3VtZW50LCAndG91Y2htb3ZlJywgdGhpcy5fb25Ub3VjaE1vdmUpO1xuICAgIG9mZihkb2N1bWVudCwgJ3BvaW50ZXJtb3ZlJywgdGhpcy5fb25Ub3VjaE1vdmUpO1xuICAgIG9mZihkb2N1bWVudCwgJ2RyYWdvdmVyJywgbmVhcmVzdEVtcHR5SW5zZXJ0RGV0ZWN0RXZlbnQpO1xuICAgIG9mZihkb2N1bWVudCwgJ21vdXNlbW92ZScsIG5lYXJlc3RFbXB0eUluc2VydERldGVjdEV2ZW50KTtcbiAgICBvZmYoZG9jdW1lbnQsICd0b3VjaG1vdmUnLCBuZWFyZXN0RW1wdHlJbnNlcnREZXRlY3RFdmVudCk7XG4gIH0sXG4gIF9vZmZVcEV2ZW50czogZnVuY3Rpb24gX29mZlVwRXZlbnRzKCkge1xuICAgIHZhciBvd25lckRvY3VtZW50ID0gdGhpcy5lbC5vd25lckRvY3VtZW50O1xuICAgIG9mZihvd25lckRvY3VtZW50LCAnbW91c2V1cCcsIHRoaXMuX29uRHJvcCk7XG4gICAgb2ZmKG93bmVyRG9jdW1lbnQsICd0b3VjaGVuZCcsIHRoaXMuX29uRHJvcCk7XG4gICAgb2ZmKG93bmVyRG9jdW1lbnQsICdwb2ludGVydXAnLCB0aGlzLl9vbkRyb3ApO1xuICAgIG9mZihvd25lckRvY3VtZW50LCAndG91Y2hjYW5jZWwnLCB0aGlzLl9vbkRyb3ApO1xuICAgIG9mZihkb2N1bWVudCwgJ3NlbGVjdHN0YXJ0JywgdGhpcyk7XG4gIH0sXG4gIF9vbkRyb3A6IGZ1bmN0aW9uIF9vbkRyb3AoXG4gIC8qKkV2ZW50Ki9cbiAgZXZ0KSB7XG4gICAgdmFyIGVsID0gdGhpcy5lbCxcbiAgICAgICAgb3B0aW9ucyA9IHRoaXMub3B0aW9uczsgLy8gR2V0IHRoZSBpbmRleCBvZiB0aGUgZHJhZ2dlZCBlbGVtZW50IHdpdGhpbiBpdHMgcGFyZW50XG5cbiAgICBuZXdJbmRleCA9IGluZGV4KGRyYWdFbCk7XG4gICAgbmV3RHJhZ2dhYmxlSW5kZXggPSBpbmRleChkcmFnRWwsIG9wdGlvbnMuZHJhZ2dhYmxlKTtcbiAgICBwbHVnaW5FdmVudCgnZHJvcCcsIHRoaXMsIHtcbiAgICAgIGV2dDogZXZ0XG4gICAgfSk7XG4gICAgcGFyZW50RWwgPSBkcmFnRWwgJiYgZHJhZ0VsLnBhcmVudE5vZGU7IC8vIEdldCBhZ2FpbiBhZnRlciBwbHVnaW4gZXZlbnRcblxuICAgIG5ld0luZGV4ID0gaW5kZXgoZHJhZ0VsKTtcbiAgICBuZXdEcmFnZ2FibGVJbmRleCA9IGluZGV4KGRyYWdFbCwgb3B0aW9ucy5kcmFnZ2FibGUpO1xuXG4gICAgaWYgKFNvcnRhYmxlLmV2ZW50Q2FuY2VsZWQpIHtcbiAgICAgIHRoaXMuX251bGxpbmcoKTtcblxuICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIGF3YWl0aW5nRHJhZ1N0YXJ0ZWQgPSBmYWxzZTtcbiAgICBpc0NpcmN1bXN0YW50aWFsSW52ZXJ0ID0gZmFsc2U7XG4gICAgcGFzdEZpcnN0SW52ZXJ0VGhyZXNoID0gZmFsc2U7XG4gICAgY2xlYXJJbnRlcnZhbCh0aGlzLl9sb29wSWQpO1xuICAgIGNsZWFyVGltZW91dCh0aGlzLl9kcmFnU3RhcnRUaW1lcik7XG5cbiAgICBfY2FuY2VsTmV4dFRpY2sodGhpcy5jbG9uZUlkKTtcblxuICAgIF9jYW5jZWxOZXh0VGljayh0aGlzLl9kcmFnU3RhcnRJZCk7IC8vIFVuYmluZCBldmVudHNcblxuXG4gICAgaWYgKHRoaXMubmF0aXZlRHJhZ2dhYmxlKSB7XG4gICAgICBvZmYoZG9jdW1lbnQsICdkcm9wJywgdGhpcyk7XG4gICAgICBvZmYoZWwsICdkcmFnc3RhcnQnLCB0aGlzLl9vbkRyYWdTdGFydCk7XG4gICAgfVxuXG4gICAgdGhpcy5fb2ZmTW92ZUV2ZW50cygpO1xuXG4gICAgdGhpcy5fb2ZmVXBFdmVudHMoKTtcblxuICAgIGlmIChTYWZhcmkpIHtcbiAgICAgIGNzcyhkb2N1bWVudC5ib2R5LCAndXNlci1zZWxlY3QnLCAnJyk7XG4gICAgfVxuXG4gICAgY3NzKGRyYWdFbCwgJ3RyYW5zZm9ybScsICcnKTtcblxuICAgIGlmIChldnQpIHtcbiAgICAgIGlmIChtb3ZlZCkge1xuICAgICAgICBldnQuY2FuY2VsYWJsZSAmJiBldnQucHJldmVudERlZmF1bHQoKTtcbiAgICAgICAgIW9wdGlvbnMuZHJvcEJ1YmJsZSAmJiBldnQuc3RvcFByb3BhZ2F0aW9uKCk7XG4gICAgICB9XG5cbiAgICAgIGdob3N0RWwgJiYgZ2hvc3RFbC5wYXJlbnROb2RlICYmIGdob3N0RWwucGFyZW50Tm9kZS5yZW1vdmVDaGlsZChnaG9zdEVsKTtcblxuICAgICAgaWYgKHJvb3RFbCA9PT0gcGFyZW50RWwgfHwgcHV0U29ydGFibGUgJiYgcHV0U29ydGFibGUubGFzdFB1dE1vZGUgIT09ICdjbG9uZScpIHtcbiAgICAgICAgLy8gUmVtb3ZlIGNsb25lKHMpXG4gICAgICAgIGNsb25lRWwgJiYgY2xvbmVFbC5wYXJlbnROb2RlICYmIGNsb25lRWwucGFyZW50Tm9kZS5yZW1vdmVDaGlsZChjbG9uZUVsKTtcbiAgICAgIH1cblxuICAgICAgaWYgKGRyYWdFbCkge1xuICAgICAgICBpZiAodGhpcy5uYXRpdmVEcmFnZ2FibGUpIHtcbiAgICAgICAgICBvZmYoZHJhZ0VsLCAnZHJhZ2VuZCcsIHRoaXMpO1xuICAgICAgICB9XG5cbiAgICAgICAgX2Rpc2FibGVEcmFnZ2FibGUoZHJhZ0VsKTtcblxuICAgICAgICBkcmFnRWwuc3R5bGVbJ3dpbGwtY2hhbmdlJ10gPSAnJzsgLy8gUmVtb3ZlIGNsYXNzZXNcbiAgICAgICAgLy8gZ2hvc3RDbGFzcyBpcyBhZGRlZCBpbiBkcmFnU3RhcnRlZFxuXG4gICAgICAgIGlmIChtb3ZlZCAmJiAhYXdhaXRpbmdEcmFnU3RhcnRlZCkge1xuICAgICAgICAgIHRvZ2dsZUNsYXNzKGRyYWdFbCwgcHV0U29ydGFibGUgPyBwdXRTb3J0YWJsZS5vcHRpb25zLmdob3N0Q2xhc3MgOiB0aGlzLm9wdGlvbnMuZ2hvc3RDbGFzcywgZmFsc2UpO1xuICAgICAgICB9XG5cbiAgICAgICAgdG9nZ2xlQ2xhc3MoZHJhZ0VsLCB0aGlzLm9wdGlvbnMuY2hvc2VuQ2xhc3MsIGZhbHNlKTsgLy8gRHJhZyBzdG9wIGV2ZW50XG5cbiAgICAgICAgX2Rpc3BhdGNoRXZlbnQoe1xuICAgICAgICAgIHNvcnRhYmxlOiB0aGlzLFxuICAgICAgICAgIG5hbWU6ICd1bmNob29zZScsXG4gICAgICAgICAgdG9FbDogcGFyZW50RWwsXG4gICAgICAgICAgbmV3SW5kZXg6IG51bGwsXG4gICAgICAgICAgbmV3RHJhZ2dhYmxlSW5kZXg6IG51bGwsXG4gICAgICAgICAgb3JpZ2luYWxFdmVudDogZXZ0XG4gICAgICAgIH0pO1xuXG4gICAgICAgIGlmIChyb290RWwgIT09IHBhcmVudEVsKSB7XG4gICAgICAgICAgaWYgKG5ld0luZGV4ID49IDApIHtcbiAgICAgICAgICAgIC8vIEFkZCBldmVudFxuICAgICAgICAgICAgX2Rpc3BhdGNoRXZlbnQoe1xuICAgICAgICAgICAgICByb290RWw6IHBhcmVudEVsLFxuICAgICAgICAgICAgICBuYW1lOiAnYWRkJyxcbiAgICAgICAgICAgICAgdG9FbDogcGFyZW50RWwsXG4gICAgICAgICAgICAgIGZyb21FbDogcm9vdEVsLFxuICAgICAgICAgICAgICBvcmlnaW5hbEV2ZW50OiBldnRcbiAgICAgICAgICAgIH0pOyAvLyBSZW1vdmUgZXZlbnRcblxuXG4gICAgICAgICAgICBfZGlzcGF0Y2hFdmVudCh7XG4gICAgICAgICAgICAgIHNvcnRhYmxlOiB0aGlzLFxuICAgICAgICAgICAgICBuYW1lOiAncmVtb3ZlJyxcbiAgICAgICAgICAgICAgdG9FbDogcGFyZW50RWwsXG4gICAgICAgICAgICAgIG9yaWdpbmFsRXZlbnQ6IGV2dFxuICAgICAgICAgICAgfSk7IC8vIGRyYWcgZnJvbSBvbmUgbGlzdCBhbmQgZHJvcCBpbnRvIGFub3RoZXJcblxuXG4gICAgICAgICAgICBfZGlzcGF0Y2hFdmVudCh7XG4gICAgICAgICAgICAgIHJvb3RFbDogcGFyZW50RWwsXG4gICAgICAgICAgICAgIG5hbWU6ICdzb3J0JyxcbiAgICAgICAgICAgICAgdG9FbDogcGFyZW50RWwsXG4gICAgICAgICAgICAgIGZyb21FbDogcm9vdEVsLFxuICAgICAgICAgICAgICBvcmlnaW5hbEV2ZW50OiBldnRcbiAgICAgICAgICAgIH0pO1xuXG4gICAgICAgICAgICBfZGlzcGF0Y2hFdmVudCh7XG4gICAgICAgICAgICAgIHNvcnRhYmxlOiB0aGlzLFxuICAgICAgICAgICAgICBuYW1lOiAnc29ydCcsXG4gICAgICAgICAgICAgIHRvRWw6IHBhcmVudEVsLFxuICAgICAgICAgICAgICBvcmlnaW5hbEV2ZW50OiBldnRcbiAgICAgICAgICAgIH0pO1xuICAgICAgICAgIH1cblxuICAgICAgICAgIHB1dFNvcnRhYmxlICYmIHB1dFNvcnRhYmxlLnNhdmUoKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBpZiAobmV3SW5kZXggIT09IG9sZEluZGV4KSB7XG4gICAgICAgICAgICBpZiAobmV3SW5kZXggPj0gMCkge1xuICAgICAgICAgICAgICAvLyBkcmFnICYgZHJvcCB3aXRoaW4gdGhlIHNhbWUgbGlzdFxuICAgICAgICAgICAgICBfZGlzcGF0Y2hFdmVudCh7XG4gICAgICAgICAgICAgICAgc29ydGFibGU6IHRoaXMsXG4gICAgICAgICAgICAgICAgbmFtZTogJ3VwZGF0ZScsXG4gICAgICAgICAgICAgICAgdG9FbDogcGFyZW50RWwsXG4gICAgICAgICAgICAgICAgb3JpZ2luYWxFdmVudDogZXZ0XG4gICAgICAgICAgICAgIH0pO1xuXG4gICAgICAgICAgICAgIF9kaXNwYXRjaEV2ZW50KHtcbiAgICAgICAgICAgICAgICBzb3J0YWJsZTogdGhpcyxcbiAgICAgICAgICAgICAgICBuYW1lOiAnc29ydCcsXG4gICAgICAgICAgICAgICAgdG9FbDogcGFyZW50RWwsXG4gICAgICAgICAgICAgICAgb3JpZ2luYWxFdmVudDogZXZ0XG4gICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIGlmIChTb3J0YWJsZS5hY3RpdmUpIHtcbiAgICAgICAgICAvKiBqc2hpbnQgZXFudWxsOnRydWUgKi9cbiAgICAgICAgICBpZiAobmV3SW5kZXggPT0gbnVsbCB8fCBuZXdJbmRleCA9PT0gLTEpIHtcbiAgICAgICAgICAgIG5ld0luZGV4ID0gb2xkSW5kZXg7XG4gICAgICAgICAgICBuZXdEcmFnZ2FibGVJbmRleCA9IG9sZERyYWdnYWJsZUluZGV4O1xuICAgICAgICAgIH1cblxuICAgICAgICAgIF9kaXNwYXRjaEV2ZW50KHtcbiAgICAgICAgICAgIHNvcnRhYmxlOiB0aGlzLFxuICAgICAgICAgICAgbmFtZTogJ2VuZCcsXG4gICAgICAgICAgICB0b0VsOiBwYXJlbnRFbCxcbiAgICAgICAgICAgIG9yaWdpbmFsRXZlbnQ6IGV2dFxuICAgICAgICAgIH0pOyAvLyBTYXZlIHNvcnRpbmdcblxuXG4gICAgICAgICAgdGhpcy5zYXZlKCk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG5cbiAgICB0aGlzLl9udWxsaW5nKCk7XG4gIH0sXG4gIF9udWxsaW5nOiBmdW5jdGlvbiBfbnVsbGluZygpIHtcbiAgICBwbHVnaW5FdmVudCgnbnVsbGluZycsIHRoaXMpO1xuICAgIHJvb3RFbCA9IGRyYWdFbCA9IHBhcmVudEVsID0gZ2hvc3RFbCA9IG5leHRFbCA9IGNsb25lRWwgPSBsYXN0RG93bkVsID0gY2xvbmVIaWRkZW4gPSB0YXBFdnQgPSB0b3VjaEV2dCA9IG1vdmVkID0gbmV3SW5kZXggPSBuZXdEcmFnZ2FibGVJbmRleCA9IG9sZEluZGV4ID0gb2xkRHJhZ2dhYmxlSW5kZXggPSBsYXN0VGFyZ2V0ID0gbGFzdERpcmVjdGlvbiA9IHB1dFNvcnRhYmxlID0gYWN0aXZlR3JvdXAgPSBTb3J0YWJsZS5kcmFnZ2VkID0gU29ydGFibGUuZ2hvc3QgPSBTb3J0YWJsZS5jbG9uZSA9IFNvcnRhYmxlLmFjdGl2ZSA9IG51bGw7XG4gICAgc2F2ZWRJbnB1dENoZWNrZWQuZm9yRWFjaChmdW5jdGlvbiAoZWwpIHtcbiAgICAgIGVsLmNoZWNrZWQgPSB0cnVlO1xuICAgIH0pO1xuICAgIHNhdmVkSW5wdXRDaGVja2VkLmxlbmd0aCA9IGxhc3REeCA9IGxhc3REeSA9IDA7XG4gIH0sXG4gIGhhbmRsZUV2ZW50OiBmdW5jdGlvbiBoYW5kbGVFdmVudChcbiAgLyoqRXZlbnQqL1xuICBldnQpIHtcbiAgICBzd2l0Y2ggKGV2dC50eXBlKSB7XG4gICAgICBjYXNlICdkcm9wJzpcbiAgICAgIGNhc2UgJ2RyYWdlbmQnOlxuICAgICAgICB0aGlzLl9vbkRyb3AoZXZ0KTtcblxuICAgICAgICBicmVhaztcblxuICAgICAgY2FzZSAnZHJhZ2VudGVyJzpcbiAgICAgIGNhc2UgJ2RyYWdvdmVyJzpcbiAgICAgICAgaWYgKGRyYWdFbCkge1xuICAgICAgICAgIHRoaXMuX29uRHJhZ092ZXIoZXZ0KTtcblxuICAgICAgICAgIF9nbG9iYWxEcmFnT3ZlcihldnQpO1xuICAgICAgICB9XG5cbiAgICAgICAgYnJlYWs7XG5cbiAgICAgIGNhc2UgJ3NlbGVjdHN0YXJ0JzpcbiAgICAgICAgZXZ0LnByZXZlbnREZWZhdWx0KCk7XG4gICAgICAgIGJyZWFrO1xuICAgIH1cbiAgfSxcblxuICAvKipcbiAgICogU2VyaWFsaXplcyB0aGUgaXRlbSBpbnRvIGFuIGFycmF5IG9mIHN0cmluZy5cbiAgICogQHJldHVybnMge1N0cmluZ1tdfVxuICAgKi9cbiAgdG9BcnJheTogZnVuY3Rpb24gdG9BcnJheSgpIHtcbiAgICB2YXIgb3JkZXIgPSBbXSxcbiAgICAgICAgZWwsXG4gICAgICAgIGNoaWxkcmVuID0gdGhpcy5lbC5jaGlsZHJlbixcbiAgICAgICAgaSA9IDAsXG4gICAgICAgIG4gPSBjaGlsZHJlbi5sZW5ndGgsXG4gICAgICAgIG9wdGlvbnMgPSB0aGlzLm9wdGlvbnM7XG5cbiAgICBmb3IgKDsgaSA8IG47IGkrKykge1xuICAgICAgZWwgPSBjaGlsZHJlbltpXTtcblxuICAgICAgaWYgKGNsb3Nlc3QoZWwsIG9wdGlvbnMuZHJhZ2dhYmxlLCB0aGlzLmVsLCBmYWxzZSkpIHtcbiAgICAgICAgb3JkZXIucHVzaChlbC5nZXRBdHRyaWJ1dGUob3B0aW9ucy5kYXRhSWRBdHRyKSB8fCBfZ2VuZXJhdGVJZChlbCkpO1xuICAgICAgfVxuICAgIH1cblxuICAgIHJldHVybiBvcmRlcjtcbiAgfSxcblxuICAvKipcbiAgICogU29ydHMgdGhlIGVsZW1lbnRzIGFjY29yZGluZyB0byB0aGUgYXJyYXkuXG4gICAqIEBwYXJhbSAge1N0cmluZ1tdfSAgb3JkZXIgIG9yZGVyIG9mIHRoZSBpdGVtc1xuICAgKi9cbiAgc29ydDogZnVuY3Rpb24gc29ydChvcmRlciwgdXNlQW5pbWF0aW9uKSB7XG4gICAgdmFyIGl0ZW1zID0ge30sXG4gICAgICAgIHJvb3RFbCA9IHRoaXMuZWw7XG4gICAgdGhpcy50b0FycmF5KCkuZm9yRWFjaChmdW5jdGlvbiAoaWQsIGkpIHtcbiAgICAgIHZhciBlbCA9IHJvb3RFbC5jaGlsZHJlbltpXTtcblxuICAgICAgaWYgKGNsb3Nlc3QoZWwsIHRoaXMub3B0aW9ucy5kcmFnZ2FibGUsIHJvb3RFbCwgZmFsc2UpKSB7XG4gICAgICAgIGl0ZW1zW2lkXSA9IGVsO1xuICAgICAgfVxuICAgIH0sIHRoaXMpO1xuICAgIHVzZUFuaW1hdGlvbiAmJiB0aGlzLmNhcHR1cmVBbmltYXRpb25TdGF0ZSgpO1xuICAgIG9yZGVyLmZvckVhY2goZnVuY3Rpb24gKGlkKSB7XG4gICAgICBpZiAoaXRlbXNbaWRdKSB7XG4gICAgICAgIHJvb3RFbC5yZW1vdmVDaGlsZChpdGVtc1tpZF0pO1xuICAgICAgICByb290RWwuYXBwZW5kQ2hpbGQoaXRlbXNbaWRdKTtcbiAgICAgIH1cbiAgICB9KTtcbiAgICB1c2VBbmltYXRpb24gJiYgdGhpcy5hbmltYXRlQWxsKCk7XG4gIH0sXG5cbiAgLyoqXG4gICAqIFNhdmUgdGhlIGN1cnJlbnQgc29ydGluZ1xuICAgKi9cbiAgc2F2ZTogZnVuY3Rpb24gc2F2ZSgpIHtcbiAgICB2YXIgc3RvcmUgPSB0aGlzLm9wdGlvbnMuc3RvcmU7XG4gICAgc3RvcmUgJiYgc3RvcmUuc2V0ICYmIHN0b3JlLnNldCh0aGlzKTtcbiAgfSxcblxuICAvKipcbiAgICogRm9yIGVhY2ggZWxlbWVudCBpbiB0aGUgc2V0LCBnZXQgdGhlIGZpcnN0IGVsZW1lbnQgdGhhdCBtYXRjaGVzIHRoZSBzZWxlY3RvciBieSB0ZXN0aW5nIHRoZSBlbGVtZW50IGl0c2VsZiBhbmQgdHJhdmVyc2luZyB1cCB0aHJvdWdoIGl0cyBhbmNlc3RvcnMgaW4gdGhlIERPTSB0cmVlLlxuICAgKiBAcGFyYW0gICB7SFRNTEVsZW1lbnR9ICBlbFxuICAgKiBAcGFyYW0gICB7U3RyaW5nfSAgICAgICBbc2VsZWN0b3JdICBkZWZhdWx0OiBgb3B0aW9ucy5kcmFnZ2FibGVgXG4gICAqIEByZXR1cm5zIHtIVE1MRWxlbWVudHxudWxsfVxuICAgKi9cbiAgY2xvc2VzdDogZnVuY3Rpb24gY2xvc2VzdCQxKGVsLCBzZWxlY3Rvcikge1xuICAgIHJldHVybiBjbG9zZXN0KGVsLCBzZWxlY3RvciB8fCB0aGlzLm9wdGlvbnMuZHJhZ2dhYmxlLCB0aGlzLmVsLCBmYWxzZSk7XG4gIH0sXG5cbiAgLyoqXG4gICAqIFNldC9nZXQgb3B0aW9uXG4gICAqIEBwYXJhbSAgIHtzdHJpbmd9IG5hbWVcbiAgICogQHBhcmFtICAgeyp9ICAgICAgW3ZhbHVlXVxuICAgKiBAcmV0dXJucyB7Kn1cbiAgICovXG4gIG9wdGlvbjogZnVuY3Rpb24gb3B0aW9uKG5hbWUsIHZhbHVlKSB7XG4gICAgdmFyIG9wdGlvbnMgPSB0aGlzLm9wdGlvbnM7XG5cbiAgICBpZiAodmFsdWUgPT09IHZvaWQgMCkge1xuICAgICAgcmV0dXJuIG9wdGlvbnNbbmFtZV07XG4gICAgfSBlbHNlIHtcbiAgICAgIHZhciBtb2RpZmllZFZhbHVlID0gUGx1Z2luTWFuYWdlci5tb2RpZnlPcHRpb24odGhpcywgbmFtZSwgdmFsdWUpO1xuXG4gICAgICBpZiAodHlwZW9mIG1vZGlmaWVkVmFsdWUgIT09ICd1bmRlZmluZWQnKSB7XG4gICAgICAgIG9wdGlvbnNbbmFtZV0gPSBtb2RpZmllZFZhbHVlO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgb3B0aW9uc1tuYW1lXSA9IHZhbHVlO1xuICAgICAgfVxuXG4gICAgICBpZiAobmFtZSA9PT0gJ2dyb3VwJykge1xuICAgICAgICBfcHJlcGFyZUdyb3VwKG9wdGlvbnMpO1xuICAgICAgfVxuICAgIH1cbiAgfSxcblxuICAvKipcbiAgICogRGVzdHJveVxuICAgKi9cbiAgZGVzdHJveTogZnVuY3Rpb24gZGVzdHJveSgpIHtcbiAgICBwbHVnaW5FdmVudCgnZGVzdHJveScsIHRoaXMpO1xuICAgIHZhciBlbCA9IHRoaXMuZWw7XG4gICAgZWxbZXhwYW5kb10gPSBudWxsO1xuICAgIG9mZihlbCwgJ21vdXNlZG93bicsIHRoaXMuX29uVGFwU3RhcnQpO1xuICAgIG9mZihlbCwgJ3RvdWNoc3RhcnQnLCB0aGlzLl9vblRhcFN0YXJ0KTtcbiAgICBvZmYoZWwsICdwb2ludGVyZG93bicsIHRoaXMuX29uVGFwU3RhcnQpO1xuXG4gICAgaWYgKHRoaXMubmF0aXZlRHJhZ2dhYmxlKSB7XG4gICAgICBvZmYoZWwsICdkcmFnb3ZlcicsIHRoaXMpO1xuICAgICAgb2ZmKGVsLCAnZHJhZ2VudGVyJywgdGhpcyk7XG4gICAgfSAvLyBSZW1vdmUgZHJhZ2dhYmxlIGF0dHJpYnV0ZXNcblxuXG4gICAgQXJyYXkucHJvdG90eXBlLmZvckVhY2guY2FsbChlbC5xdWVyeVNlbGVjdG9yQWxsKCdbZHJhZ2dhYmxlXScpLCBmdW5jdGlvbiAoZWwpIHtcbiAgICAgIGVsLnJlbW92ZUF0dHJpYnV0ZSgnZHJhZ2dhYmxlJyk7XG4gICAgfSk7XG5cbiAgICB0aGlzLl9vbkRyb3AoKTtcblxuICAgIHRoaXMuX2Rpc2FibGVEZWxheWVkRHJhZ0V2ZW50cygpO1xuXG4gICAgc29ydGFibGVzLnNwbGljZShzb3J0YWJsZXMuaW5kZXhPZih0aGlzLmVsKSwgMSk7XG4gICAgdGhpcy5lbCA9IGVsID0gbnVsbDtcbiAgfSxcbiAgX2hpZGVDbG9uZTogZnVuY3Rpb24gX2hpZGVDbG9uZSgpIHtcbiAgICBpZiAoIWNsb25lSGlkZGVuKSB7XG4gICAgICBwbHVnaW5FdmVudCgnaGlkZUNsb25lJywgdGhpcyk7XG4gICAgICBpZiAoU29ydGFibGUuZXZlbnRDYW5jZWxlZCkgcmV0dXJuO1xuICAgICAgY3NzKGNsb25lRWwsICdkaXNwbGF5JywgJ25vbmUnKTtcblxuICAgICAgaWYgKHRoaXMub3B0aW9ucy5yZW1vdmVDbG9uZU9uSGlkZSAmJiBjbG9uZUVsLnBhcmVudE5vZGUpIHtcbiAgICAgICAgY2xvbmVFbC5wYXJlbnROb2RlLnJlbW92ZUNoaWxkKGNsb25lRWwpO1xuICAgICAgfVxuXG4gICAgICBjbG9uZUhpZGRlbiA9IHRydWU7XG4gICAgfVxuICB9LFxuICBfc2hvd0Nsb25lOiBmdW5jdGlvbiBfc2hvd0Nsb25lKHB1dFNvcnRhYmxlKSB7XG4gICAgaWYgKHB1dFNvcnRhYmxlLmxhc3RQdXRNb2RlICE9PSAnY2xvbmUnKSB7XG4gICAgICB0aGlzLl9oaWRlQ2xvbmUoKTtcblxuICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIGlmIChjbG9uZUhpZGRlbikge1xuICAgICAgcGx1Z2luRXZlbnQoJ3Nob3dDbG9uZScsIHRoaXMpO1xuICAgICAgaWYgKFNvcnRhYmxlLmV2ZW50Q2FuY2VsZWQpIHJldHVybjsgLy8gc2hvdyBjbG9uZSBhdCBkcmFnRWwgb3Igb3JpZ2luYWwgcG9zaXRpb25cblxuICAgICAgaWYgKGRyYWdFbC5wYXJlbnROb2RlID09IHJvb3RFbCAmJiAhdGhpcy5vcHRpb25zLmdyb3VwLnJldmVydENsb25lKSB7XG4gICAgICAgIHJvb3RFbC5pbnNlcnRCZWZvcmUoY2xvbmVFbCwgZHJhZ0VsKTtcbiAgICAgIH0gZWxzZSBpZiAobmV4dEVsKSB7XG4gICAgICAgIHJvb3RFbC5pbnNlcnRCZWZvcmUoY2xvbmVFbCwgbmV4dEVsKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHJvb3RFbC5hcHBlbmRDaGlsZChjbG9uZUVsKTtcbiAgICAgIH1cblxuICAgICAgaWYgKHRoaXMub3B0aW9ucy5ncm91cC5yZXZlcnRDbG9uZSkge1xuICAgICAgICB0aGlzLmFuaW1hdGUoZHJhZ0VsLCBjbG9uZUVsKTtcbiAgICAgIH1cblxuICAgICAgY3NzKGNsb25lRWwsICdkaXNwbGF5JywgJycpO1xuICAgICAgY2xvbmVIaWRkZW4gPSBmYWxzZTtcbiAgICB9XG4gIH1cbn07XG5cbmZ1bmN0aW9uIF9nbG9iYWxEcmFnT3Zlcihcbi8qKkV2ZW50Ki9cbmV2dCkge1xuICBpZiAoZXZ0LmRhdGFUcmFuc2Zlcikge1xuICAgIGV2dC5kYXRhVHJhbnNmZXIuZHJvcEVmZmVjdCA9ICdtb3ZlJztcbiAgfVxuXG4gIGV2dC5jYW5jZWxhYmxlICYmIGV2dC5wcmV2ZW50RGVmYXVsdCgpO1xufVxuXG5mdW5jdGlvbiBfb25Nb3ZlKGZyb21FbCwgdG9FbCwgZHJhZ0VsLCBkcmFnUmVjdCwgdGFyZ2V0RWwsIHRhcmdldFJlY3QsIG9yaWdpbmFsRXZlbnQsIHdpbGxJbnNlcnRBZnRlcikge1xuICB2YXIgZXZ0LFxuICAgICAgc29ydGFibGUgPSBmcm9tRWxbZXhwYW5kb10sXG4gICAgICBvbk1vdmVGbiA9IHNvcnRhYmxlLm9wdGlvbnMub25Nb3ZlLFxuICAgICAgcmV0VmFsOyAvLyBTdXBwb3J0IGZvciBuZXcgQ3VzdG9tRXZlbnQgZmVhdHVyZVxuXG4gIGlmICh3aW5kb3cuQ3VzdG9tRXZlbnQgJiYgIUlFMTFPckxlc3MgJiYgIUVkZ2UpIHtcbiAgICBldnQgPSBuZXcgQ3VzdG9tRXZlbnQoJ21vdmUnLCB7XG4gICAgICBidWJibGVzOiB0cnVlLFxuICAgICAgY2FuY2VsYWJsZTogdHJ1ZVxuICAgIH0pO1xuICB9IGVsc2Uge1xuICAgIGV2dCA9IGRvY3VtZW50LmNyZWF0ZUV2ZW50KCdFdmVudCcpO1xuICAgIGV2dC5pbml0RXZlbnQoJ21vdmUnLCB0cnVlLCB0cnVlKTtcbiAgfVxuXG4gIGV2dC50byA9IHRvRWw7XG4gIGV2dC5mcm9tID0gZnJvbUVsO1xuICBldnQuZHJhZ2dlZCA9IGRyYWdFbDtcbiAgZXZ0LmRyYWdnZWRSZWN0ID0gZHJhZ1JlY3Q7XG4gIGV2dC5yZWxhdGVkID0gdGFyZ2V0RWwgfHwgdG9FbDtcbiAgZXZ0LnJlbGF0ZWRSZWN0ID0gdGFyZ2V0UmVjdCB8fCBnZXRSZWN0KHRvRWwpO1xuICBldnQud2lsbEluc2VydEFmdGVyID0gd2lsbEluc2VydEFmdGVyO1xuICBldnQub3JpZ2luYWxFdmVudCA9IG9yaWdpbmFsRXZlbnQ7XG4gIGZyb21FbC5kaXNwYXRjaEV2ZW50KGV2dCk7XG5cbiAgaWYgKG9uTW92ZUZuKSB7XG4gICAgcmV0VmFsID0gb25Nb3ZlRm4uY2FsbChzb3J0YWJsZSwgZXZ0LCBvcmlnaW5hbEV2ZW50KTtcbiAgfVxuXG4gIHJldHVybiByZXRWYWw7XG59XG5cbmZ1bmN0aW9uIF9kaXNhYmxlRHJhZ2dhYmxlKGVsKSB7XG4gIGVsLmRyYWdnYWJsZSA9IGZhbHNlO1xufVxuXG5mdW5jdGlvbiBfdW5zaWxlbnQoKSB7XG4gIF9zaWxlbnQgPSBmYWxzZTtcbn1cblxuZnVuY3Rpb24gX2dob3N0SXNGaXJzdChldnQsIHZlcnRpY2FsLCBzb3J0YWJsZSkge1xuICB2YXIgcmVjdCA9IGdldFJlY3QoZ2V0Q2hpbGQoc29ydGFibGUuZWwsIDAsIHNvcnRhYmxlLm9wdGlvbnMsIHRydWUpKTtcbiAgdmFyIHNwYWNlciA9IDEwO1xuICByZXR1cm4gdmVydGljYWwgPyBldnQuY2xpZW50WCA8IHJlY3QubGVmdCAtIHNwYWNlciB8fCBldnQuY2xpZW50WSA8IHJlY3QudG9wICYmIGV2dC5jbGllbnRYIDwgcmVjdC5yaWdodCA6IGV2dC5jbGllbnRZIDwgcmVjdC50b3AgLSBzcGFjZXIgfHwgZXZ0LmNsaWVudFkgPCByZWN0LmJvdHRvbSAmJiBldnQuY2xpZW50WCA8IHJlY3QubGVmdDtcbn1cblxuZnVuY3Rpb24gX2dob3N0SXNMYXN0KGV2dCwgdmVydGljYWwsIHNvcnRhYmxlKSB7XG4gIHZhciByZWN0ID0gZ2V0UmVjdChsYXN0Q2hpbGQoc29ydGFibGUuZWwsIHNvcnRhYmxlLm9wdGlvbnMuZHJhZ2dhYmxlKSk7XG4gIHZhciBzcGFjZXIgPSAxMDtcbiAgcmV0dXJuIHZlcnRpY2FsID8gZXZ0LmNsaWVudFggPiByZWN0LnJpZ2h0ICsgc3BhY2VyIHx8IGV2dC5jbGllbnRYIDw9IHJlY3QucmlnaHQgJiYgZXZ0LmNsaWVudFkgPiByZWN0LmJvdHRvbSAmJiBldnQuY2xpZW50WCA+PSByZWN0LmxlZnQgOiBldnQuY2xpZW50WCA+IHJlY3QucmlnaHQgJiYgZXZ0LmNsaWVudFkgPiByZWN0LnRvcCB8fCBldnQuY2xpZW50WCA8PSByZWN0LnJpZ2h0ICYmIGV2dC5jbGllbnRZID4gcmVjdC5ib3R0b20gKyBzcGFjZXI7XG59XG5cbmZ1bmN0aW9uIF9nZXRTd2FwRGlyZWN0aW9uKGV2dCwgdGFyZ2V0LCB0YXJnZXRSZWN0LCB2ZXJ0aWNhbCwgc3dhcFRocmVzaG9sZCwgaW52ZXJ0ZWRTd2FwVGhyZXNob2xkLCBpbnZlcnRTd2FwLCBpc0xhc3RUYXJnZXQpIHtcbiAgdmFyIG1vdXNlT25BeGlzID0gdmVydGljYWwgPyBldnQuY2xpZW50WSA6IGV2dC5jbGllbnRYLFxuICAgICAgdGFyZ2V0TGVuZ3RoID0gdmVydGljYWwgPyB0YXJnZXRSZWN0LmhlaWdodCA6IHRhcmdldFJlY3Qud2lkdGgsXG4gICAgICB0YXJnZXRTMSA9IHZlcnRpY2FsID8gdGFyZ2V0UmVjdC50b3AgOiB0YXJnZXRSZWN0LmxlZnQsXG4gICAgICB0YXJnZXRTMiA9IHZlcnRpY2FsID8gdGFyZ2V0UmVjdC5ib3R0b20gOiB0YXJnZXRSZWN0LnJpZ2h0LFxuICAgICAgaW52ZXJ0ID0gZmFsc2U7XG5cbiAgaWYgKCFpbnZlcnRTd2FwKSB7XG4gICAgLy8gTmV2ZXIgaW52ZXJ0IG9yIGNyZWF0ZSBkcmFnRWwgc2hhZG93IHdoZW4gdGFyZ2V0IG1vdmVtZW5ldCBjYXVzZXMgbW91c2UgdG8gbW92ZSBwYXN0IHRoZSBlbmQgb2YgcmVndWxhciBzd2FwVGhyZXNob2xkXG4gICAgaWYgKGlzTGFzdFRhcmdldCAmJiB0YXJnZXRNb3ZlRGlzdGFuY2UgPCB0YXJnZXRMZW5ndGggKiBzd2FwVGhyZXNob2xkKSB7XG4gICAgICAvLyBtdWx0aXBsaWVkIG9ubHkgYnkgc3dhcFRocmVzaG9sZCBiZWNhdXNlIG1vdXNlIHdpbGwgYWxyZWFkeSBiZSBpbnNpZGUgdGFyZ2V0IGJ5ICgxIC0gdGhyZXNob2xkKSAqIHRhcmdldExlbmd0aCAvIDJcbiAgICAgIC8vIGNoZWNrIGlmIHBhc3QgZmlyc3QgaW52ZXJ0IHRocmVzaG9sZCBvbiBzaWRlIG9wcG9zaXRlIG9mIGxhc3REaXJlY3Rpb25cbiAgICAgIGlmICghcGFzdEZpcnN0SW52ZXJ0VGhyZXNoICYmIChsYXN0RGlyZWN0aW9uID09PSAxID8gbW91c2VPbkF4aXMgPiB0YXJnZXRTMSArIHRhcmdldExlbmd0aCAqIGludmVydGVkU3dhcFRocmVzaG9sZCAvIDIgOiBtb3VzZU9uQXhpcyA8IHRhcmdldFMyIC0gdGFyZ2V0TGVuZ3RoICogaW52ZXJ0ZWRTd2FwVGhyZXNob2xkIC8gMikpIHtcbiAgICAgICAgLy8gcGFzdCBmaXJzdCBpbnZlcnQgdGhyZXNob2xkLCBkbyBub3QgcmVzdHJpY3QgaW52ZXJ0ZWQgdGhyZXNob2xkIHRvIGRyYWdFbCBzaGFkb3dcbiAgICAgICAgcGFzdEZpcnN0SW52ZXJ0VGhyZXNoID0gdHJ1ZTtcbiAgICAgIH1cblxuICAgICAgaWYgKCFwYXN0Rmlyc3RJbnZlcnRUaHJlc2gpIHtcbiAgICAgICAgLy8gZHJhZ0VsIHNoYWRvdyAodGFyZ2V0IG1vdmUgZGlzdGFuY2Ugc2hhZG93KVxuICAgICAgICBpZiAobGFzdERpcmVjdGlvbiA9PT0gMSA/IG1vdXNlT25BeGlzIDwgdGFyZ2V0UzEgKyB0YXJnZXRNb3ZlRGlzdGFuY2UgLy8gb3ZlciBkcmFnRWwgc2hhZG93XG4gICAgICAgIDogbW91c2VPbkF4aXMgPiB0YXJnZXRTMiAtIHRhcmdldE1vdmVEaXN0YW5jZSkge1xuICAgICAgICAgIHJldHVybiAtbGFzdERpcmVjdGlvbjtcbiAgICAgICAgfVxuICAgICAgfSBlbHNlIHtcbiAgICAgICAgaW52ZXJ0ID0gdHJ1ZTtcbiAgICAgIH1cbiAgICB9IGVsc2Uge1xuICAgICAgLy8gUmVndWxhclxuICAgICAgaWYgKG1vdXNlT25BeGlzID4gdGFyZ2V0UzEgKyB0YXJnZXRMZW5ndGggKiAoMSAtIHN3YXBUaHJlc2hvbGQpIC8gMiAmJiBtb3VzZU9uQXhpcyA8IHRhcmdldFMyIC0gdGFyZ2V0TGVuZ3RoICogKDEgLSBzd2FwVGhyZXNob2xkKSAvIDIpIHtcbiAgICAgICAgcmV0dXJuIF9nZXRJbnNlcnREaXJlY3Rpb24odGFyZ2V0KTtcbiAgICAgIH1cbiAgICB9XG4gIH1cblxuICBpbnZlcnQgPSBpbnZlcnQgfHwgaW52ZXJ0U3dhcDtcblxuICBpZiAoaW52ZXJ0KSB7XG4gICAgLy8gSW52ZXJ0IG9mIHJlZ3VsYXJcbiAgICBpZiAobW91c2VPbkF4aXMgPCB0YXJnZXRTMSArIHRhcmdldExlbmd0aCAqIGludmVydGVkU3dhcFRocmVzaG9sZCAvIDIgfHwgbW91c2VPbkF4aXMgPiB0YXJnZXRTMiAtIHRhcmdldExlbmd0aCAqIGludmVydGVkU3dhcFRocmVzaG9sZCAvIDIpIHtcbiAgICAgIHJldHVybiBtb3VzZU9uQXhpcyA+IHRhcmdldFMxICsgdGFyZ2V0TGVuZ3RoIC8gMiA/IDEgOiAtMTtcbiAgICB9XG4gIH1cblxuICByZXR1cm4gMDtcbn1cbi8qKlxuICogR2V0cyB0aGUgZGlyZWN0aW9uIGRyYWdFbCBtdXN0IGJlIHN3YXBwZWQgcmVsYXRpdmUgdG8gdGFyZ2V0IGluIG9yZGVyIHRvIG1ha2UgaXRcbiAqIHNlZW0gdGhhdCBkcmFnRWwgaGFzIGJlZW4gXCJpbnNlcnRlZFwiIGludG8gdGhhdCBlbGVtZW50J3MgcG9zaXRpb25cbiAqIEBwYXJhbSAge0hUTUxFbGVtZW50fSB0YXJnZXQgICAgICAgVGhlIHRhcmdldCB3aG9zZSBwb3NpdGlvbiBkcmFnRWwgaXMgYmVpbmcgaW5zZXJ0ZWQgYXRcbiAqIEByZXR1cm4ge051bWJlcn0gICAgICAgICAgICAgICAgICAgRGlyZWN0aW9uIGRyYWdFbCBtdXN0IGJlIHN3YXBwZWRcbiAqL1xuXG5cbmZ1bmN0aW9uIF9nZXRJbnNlcnREaXJlY3Rpb24odGFyZ2V0KSB7XG4gIGlmIChpbmRleChkcmFnRWwpIDwgaW5kZXgodGFyZ2V0KSkge1xuICAgIHJldHVybiAxO1xuICB9IGVsc2Uge1xuICAgIHJldHVybiAtMTtcbiAgfVxufVxuLyoqXG4gKiBHZW5lcmF0ZSBpZFxuICogQHBhcmFtICAge0hUTUxFbGVtZW50fSBlbFxuICogQHJldHVybnMge1N0cmluZ31cbiAqIEBwcml2YXRlXG4gKi9cblxuXG5mdW5jdGlvbiBfZ2VuZXJhdGVJZChlbCkge1xuICB2YXIgc3RyID0gZWwudGFnTmFtZSArIGVsLmNsYXNzTmFtZSArIGVsLnNyYyArIGVsLmhyZWYgKyBlbC50ZXh0Q29udGVudCxcbiAgICAgIGkgPSBzdHIubGVuZ3RoLFxuICAgICAgc3VtID0gMDtcblxuICB3aGlsZSAoaS0tKSB7XG4gICAgc3VtICs9IHN0ci5jaGFyQ29kZUF0KGkpO1xuICB9XG5cbiAgcmV0dXJuIHN1bS50b1N0cmluZygzNik7XG59XG5cbmZ1bmN0aW9uIF9zYXZlSW5wdXRDaGVja2VkU3RhdGUocm9vdCkge1xuICBzYXZlZElucHV0Q2hlY2tlZC5sZW5ndGggPSAwO1xuICB2YXIgaW5wdXRzID0gcm9vdC5nZXRFbGVtZW50c0J5VGFnTmFtZSgnaW5wdXQnKTtcbiAgdmFyIGlkeCA9IGlucHV0cy5sZW5ndGg7XG5cbiAgd2hpbGUgKGlkeC0tKSB7XG4gICAgdmFyIGVsID0gaW5wdXRzW2lkeF07XG4gICAgZWwuY2hlY2tlZCAmJiBzYXZlZElucHV0Q2hlY2tlZC5wdXNoKGVsKTtcbiAgfVxufVxuXG5mdW5jdGlvbiBfbmV4dFRpY2soZm4pIHtcbiAgcmV0dXJuIHNldFRpbWVvdXQoZm4sIDApO1xufVxuXG5mdW5jdGlvbiBfY2FuY2VsTmV4dFRpY2soaWQpIHtcbiAgcmV0dXJuIGNsZWFyVGltZW91dChpZCk7XG59IC8vIEZpeGVkICM5NzM6XG5cblxuaWYgKGRvY3VtZW50RXhpc3RzKSB7XG4gIG9uKGRvY3VtZW50LCAndG91Y2htb3ZlJywgZnVuY3Rpb24gKGV2dCkge1xuICAgIGlmICgoU29ydGFibGUuYWN0aXZlIHx8IGF3YWl0aW5nRHJhZ1N0YXJ0ZWQpICYmIGV2dC5jYW5jZWxhYmxlKSB7XG4gICAgICBldnQucHJldmVudERlZmF1bHQoKTtcbiAgICB9XG4gIH0pO1xufSAvLyBFeHBvcnQgdXRpbHNcblxuXG5Tb3J0YWJsZS51dGlscyA9IHtcbiAgb246IG9uLFxuICBvZmY6IG9mZixcbiAgY3NzOiBjc3MsXG4gIGZpbmQ6IGZpbmQsXG4gIGlzOiBmdW5jdGlvbiBpcyhlbCwgc2VsZWN0b3IpIHtcbiAgICByZXR1cm4gISFjbG9zZXN0KGVsLCBzZWxlY3RvciwgZWwsIGZhbHNlKTtcbiAgfSxcbiAgZXh0ZW5kOiBleHRlbmQsXG4gIHRocm90dGxlOiB0aHJvdHRsZSxcbiAgY2xvc2VzdDogY2xvc2VzdCxcbiAgdG9nZ2xlQ2xhc3M6IHRvZ2dsZUNsYXNzLFxuICBjbG9uZTogY2xvbmUsXG4gIGluZGV4OiBpbmRleCxcbiAgbmV4dFRpY2s6IF9uZXh0VGljayxcbiAgY2FuY2VsTmV4dFRpY2s6IF9jYW5jZWxOZXh0VGljayxcbiAgZGV0ZWN0RGlyZWN0aW9uOiBfZGV0ZWN0RGlyZWN0aW9uLFxuICBnZXRDaGlsZDogZ2V0Q2hpbGRcbn07XG4vKipcbiAqIEdldCB0aGUgU29ydGFibGUgaW5zdGFuY2Ugb2YgYW4gZWxlbWVudFxuICogQHBhcmFtICB7SFRNTEVsZW1lbnR9IGVsZW1lbnQgVGhlIGVsZW1lbnRcbiAqIEByZXR1cm4ge1NvcnRhYmxlfHVuZGVmaW5lZH0gICAgICAgICBUaGUgaW5zdGFuY2Ugb2YgU29ydGFibGVcbiAqL1xuXG5Tb3J0YWJsZS5nZXQgPSBmdW5jdGlvbiAoZWxlbWVudCkge1xuICByZXR1cm4gZWxlbWVudFtleHBhbmRvXTtcbn07XG4vKipcbiAqIE1vdW50IGEgcGx1Z2luIHRvIFNvcnRhYmxlXG4gKiBAcGFyYW0gIHsuLi5Tb3J0YWJsZVBsdWdpbnxTb3J0YWJsZVBsdWdpbltdfSBwbHVnaW5zICAgICAgIFBsdWdpbnMgYmVpbmcgbW91bnRlZFxuICovXG5cblxuU29ydGFibGUubW91bnQgPSBmdW5jdGlvbiAoKSB7XG4gIGZvciAodmFyIF9sZW4gPSBhcmd1bWVudHMubGVuZ3RoLCBwbHVnaW5zID0gbmV3IEFycmF5KF9sZW4pLCBfa2V5ID0gMDsgX2tleSA8IF9sZW47IF9rZXkrKykge1xuICAgIHBsdWdpbnNbX2tleV0gPSBhcmd1bWVudHNbX2tleV07XG4gIH1cblxuICBpZiAocGx1Z2luc1swXS5jb25zdHJ1Y3RvciA9PT0gQXJyYXkpIHBsdWdpbnMgPSBwbHVnaW5zWzBdO1xuICBwbHVnaW5zLmZvckVhY2goZnVuY3Rpb24gKHBsdWdpbikge1xuICAgIGlmICghcGx1Z2luLnByb3RvdHlwZSB8fCAhcGx1Z2luLnByb3RvdHlwZS5jb25zdHJ1Y3Rvcikge1xuICAgICAgdGhyb3cgXCJTb3J0YWJsZTogTW91bnRlZCBwbHVnaW4gbXVzdCBiZSBhIGNvbnN0cnVjdG9yIGZ1bmN0aW9uLCBub3QgXCIuY29uY2F0KHt9LnRvU3RyaW5nLmNhbGwocGx1Z2luKSk7XG4gICAgfVxuXG4gICAgaWYgKHBsdWdpbi51dGlscykgU29ydGFibGUudXRpbHMgPSBfb2JqZWN0U3ByZWFkMihfb2JqZWN0U3ByZWFkMih7fSwgU29ydGFibGUudXRpbHMpLCBwbHVnaW4udXRpbHMpO1xuICAgIFBsdWdpbk1hbmFnZXIubW91bnQocGx1Z2luKTtcbiAgfSk7XG59O1xuLyoqXG4gKiBDcmVhdGUgc29ydGFibGUgaW5zdGFuY2VcbiAqIEBwYXJhbSB7SFRNTEVsZW1lbnR9ICBlbFxuICogQHBhcmFtIHtPYmplY3R9ICAgICAgW29wdGlvbnNdXG4gKi9cblxuXG5Tb3J0YWJsZS5jcmVhdGUgPSBmdW5jdGlvbiAoZWwsIG9wdGlvbnMpIHtcbiAgcmV0dXJuIG5ldyBTb3J0YWJsZShlbCwgb3B0aW9ucyk7XG59OyAvLyBFeHBvcnRcblxuXG5Tb3J0YWJsZS52ZXJzaW9uID0gdmVyc2lvbjtcblxudmFyIGF1dG9TY3JvbGxzID0gW10sXG4gICAgc2Nyb2xsRWwsXG4gICAgc2Nyb2xsUm9vdEVsLFxuICAgIHNjcm9sbGluZyA9IGZhbHNlLFxuICAgIGxhc3RBdXRvU2Nyb2xsWCxcbiAgICBsYXN0QXV0b1Njcm9sbFksXG4gICAgdG91Y2hFdnQkMSxcbiAgICBwb2ludGVyRWxlbUNoYW5nZWRJbnRlcnZhbDtcblxuZnVuY3Rpb24gQXV0b1Njcm9sbFBsdWdpbigpIHtcbiAgZnVuY3Rpb24gQXV0b1Njcm9sbCgpIHtcbiAgICB0aGlzLmRlZmF1bHRzID0ge1xuICAgICAgc2Nyb2xsOiB0cnVlLFxuICAgICAgZm9yY2VBdXRvU2Nyb2xsRmFsbGJhY2s6IGZhbHNlLFxuICAgICAgc2Nyb2xsU2Vuc2l0aXZpdHk6IDMwLFxuICAgICAgc2Nyb2xsU3BlZWQ6IDEwLFxuICAgICAgYnViYmxlU2Nyb2xsOiB0cnVlXG4gICAgfTsgLy8gQmluZCBhbGwgcHJpdmF0ZSBtZXRob2RzXG5cbiAgICBmb3IgKHZhciBmbiBpbiB0aGlzKSB7XG4gICAgICBpZiAoZm4uY2hhckF0KDApID09PSAnXycgJiYgdHlwZW9mIHRoaXNbZm5dID09PSAnZnVuY3Rpb24nKSB7XG4gICAgICAgIHRoaXNbZm5dID0gdGhpc1tmbl0uYmluZCh0aGlzKTtcbiAgICAgIH1cbiAgICB9XG4gIH1cblxuICBBdXRvU2Nyb2xsLnByb3RvdHlwZSA9IHtcbiAgICBkcmFnU3RhcnRlZDogZnVuY3Rpb24gZHJhZ1N0YXJ0ZWQoX3JlZikge1xuICAgICAgdmFyIG9yaWdpbmFsRXZlbnQgPSBfcmVmLm9yaWdpbmFsRXZlbnQ7XG5cbiAgICAgIGlmICh0aGlzLnNvcnRhYmxlLm5hdGl2ZURyYWdnYWJsZSkge1xuICAgICAgICBvbihkb2N1bWVudCwgJ2RyYWdvdmVyJywgdGhpcy5faGFuZGxlQXV0b1Njcm9sbCk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBpZiAodGhpcy5vcHRpb25zLnN1cHBvcnRQb2ludGVyKSB7XG4gICAgICAgICAgb24oZG9jdW1lbnQsICdwb2ludGVybW92ZScsIHRoaXMuX2hhbmRsZUZhbGxiYWNrQXV0b1Njcm9sbCk7XG4gICAgICAgIH0gZWxzZSBpZiAob3JpZ2luYWxFdmVudC50b3VjaGVzKSB7XG4gICAgICAgICAgb24oZG9jdW1lbnQsICd0b3VjaG1vdmUnLCB0aGlzLl9oYW5kbGVGYWxsYmFja0F1dG9TY3JvbGwpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIG9uKGRvY3VtZW50LCAnbW91c2Vtb3ZlJywgdGhpcy5faGFuZGxlRmFsbGJhY2tBdXRvU2Nyb2xsKTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH0sXG4gICAgZHJhZ092ZXJDb21wbGV0ZWQ6IGZ1bmN0aW9uIGRyYWdPdmVyQ29tcGxldGVkKF9yZWYyKSB7XG4gICAgICB2YXIgb3JpZ2luYWxFdmVudCA9IF9yZWYyLm9yaWdpbmFsRXZlbnQ7XG5cbiAgICAgIC8vIEZvciB3aGVuIGJ1YmJsaW5nIGlzIGNhbmNlbGVkIGFuZCB1c2luZyBmYWxsYmFjayAoZmFsbGJhY2sgJ3RvdWNobW92ZScgYWx3YXlzIHJlYWNoZWQpXG4gICAgICBpZiAoIXRoaXMub3B0aW9ucy5kcmFnT3ZlckJ1YmJsZSAmJiAhb3JpZ2luYWxFdmVudC5yb290RWwpIHtcbiAgICAgICAgdGhpcy5faGFuZGxlQXV0b1Njcm9sbChvcmlnaW5hbEV2ZW50KTtcbiAgICAgIH1cbiAgICB9LFxuICAgIGRyb3A6IGZ1bmN0aW9uIGRyb3AoKSB7XG4gICAgICBpZiAodGhpcy5zb3J0YWJsZS5uYXRpdmVEcmFnZ2FibGUpIHtcbiAgICAgICAgb2ZmKGRvY3VtZW50LCAnZHJhZ292ZXInLCB0aGlzLl9oYW5kbGVBdXRvU2Nyb2xsKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIG9mZihkb2N1bWVudCwgJ3BvaW50ZXJtb3ZlJywgdGhpcy5faGFuZGxlRmFsbGJhY2tBdXRvU2Nyb2xsKTtcbiAgICAgICAgb2ZmKGRvY3VtZW50LCAndG91Y2htb3ZlJywgdGhpcy5faGFuZGxlRmFsbGJhY2tBdXRvU2Nyb2xsKTtcbiAgICAgICAgb2ZmKGRvY3VtZW50LCAnbW91c2Vtb3ZlJywgdGhpcy5faGFuZGxlRmFsbGJhY2tBdXRvU2Nyb2xsKTtcbiAgICAgIH1cblxuICAgICAgY2xlYXJQb2ludGVyRWxlbUNoYW5nZWRJbnRlcnZhbCgpO1xuICAgICAgY2xlYXJBdXRvU2Nyb2xscygpO1xuICAgICAgY2FuY2VsVGhyb3R0bGUoKTtcbiAgICB9LFxuICAgIG51bGxpbmc6IGZ1bmN0aW9uIG51bGxpbmcoKSB7XG4gICAgICB0b3VjaEV2dCQxID0gc2Nyb2xsUm9vdEVsID0gc2Nyb2xsRWwgPSBzY3JvbGxpbmcgPSBwb2ludGVyRWxlbUNoYW5nZWRJbnRlcnZhbCA9IGxhc3RBdXRvU2Nyb2xsWCA9IGxhc3RBdXRvU2Nyb2xsWSA9IG51bGw7XG4gICAgICBhdXRvU2Nyb2xscy5sZW5ndGggPSAwO1xuICAgIH0sXG4gICAgX2hhbmRsZUZhbGxiYWNrQXV0b1Njcm9sbDogZnVuY3Rpb24gX2hhbmRsZUZhbGxiYWNrQXV0b1Njcm9sbChldnQpIHtcbiAgICAgIHRoaXMuX2hhbmRsZUF1dG9TY3JvbGwoZXZ0LCB0cnVlKTtcbiAgICB9LFxuICAgIF9oYW5kbGVBdXRvU2Nyb2xsOiBmdW5jdGlvbiBfaGFuZGxlQXV0b1Njcm9sbChldnQsIGZhbGxiYWNrKSB7XG4gICAgICB2YXIgX3RoaXMgPSB0aGlzO1xuXG4gICAgICB2YXIgeCA9IChldnQudG91Y2hlcyA/IGV2dC50b3VjaGVzWzBdIDogZXZ0KS5jbGllbnRYLFxuICAgICAgICAgIHkgPSAoZXZ0LnRvdWNoZXMgPyBldnQudG91Y2hlc1swXSA6IGV2dCkuY2xpZW50WSxcbiAgICAgICAgICBlbGVtID0gZG9jdW1lbnQuZWxlbWVudEZyb21Qb2ludCh4LCB5KTtcbiAgICAgIHRvdWNoRXZ0JDEgPSBldnQ7IC8vIElFIGRvZXMgbm90IHNlZW0gdG8gaGF2ZSBuYXRpdmUgYXV0b3Njcm9sbCxcbiAgICAgIC8vIEVkZ2UncyBhdXRvc2Nyb2xsIHNlZW1zIHRvbyBjb25kaXRpb25hbCxcbiAgICAgIC8vIE1BQ09TIFNhZmFyaSBkb2VzIG5vdCBoYXZlIGF1dG9zY3JvbGwsXG4gICAgICAvLyBGaXJlZm94IGFuZCBDaHJvbWUgYXJlIGdvb2RcblxuICAgICAgaWYgKGZhbGxiYWNrIHx8IHRoaXMub3B0aW9ucy5mb3JjZUF1dG9TY3JvbGxGYWxsYmFjayB8fCBFZGdlIHx8IElFMTFPckxlc3MgfHwgU2FmYXJpKSB7XG4gICAgICAgIGF1dG9TY3JvbGwoZXZ0LCB0aGlzLm9wdGlvbnMsIGVsZW0sIGZhbGxiYWNrKTsgLy8gTGlzdGVuZXIgZm9yIHBvaW50ZXIgZWxlbWVudCBjaGFuZ2VcblxuICAgICAgICB2YXIgb2dFbGVtU2Nyb2xsZXIgPSBnZXRQYXJlbnRBdXRvU2Nyb2xsRWxlbWVudChlbGVtLCB0cnVlKTtcblxuICAgICAgICBpZiAoc2Nyb2xsaW5nICYmICghcG9pbnRlckVsZW1DaGFuZ2VkSW50ZXJ2YWwgfHwgeCAhPT0gbGFzdEF1dG9TY3JvbGxYIHx8IHkgIT09IGxhc3RBdXRvU2Nyb2xsWSkpIHtcbiAgICAgICAgICBwb2ludGVyRWxlbUNoYW5nZWRJbnRlcnZhbCAmJiBjbGVhclBvaW50ZXJFbGVtQ2hhbmdlZEludGVydmFsKCk7IC8vIERldGVjdCBmb3IgcG9pbnRlciBlbGVtIGNoYW5nZSwgZW11bGF0aW5nIG5hdGl2ZSBEbkQgYmVoYXZpb3VyXG5cbiAgICAgICAgICBwb2ludGVyRWxlbUNoYW5nZWRJbnRlcnZhbCA9IHNldEludGVydmFsKGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgIHZhciBuZXdFbGVtID0gZ2V0UGFyZW50QXV0b1Njcm9sbEVsZW1lbnQoZG9jdW1lbnQuZWxlbWVudEZyb21Qb2ludCh4LCB5KSwgdHJ1ZSk7XG5cbiAgICAgICAgICAgIGlmIChuZXdFbGVtICE9PSBvZ0VsZW1TY3JvbGxlcikge1xuICAgICAgICAgICAgICBvZ0VsZW1TY3JvbGxlciA9IG5ld0VsZW07XG4gICAgICAgICAgICAgIGNsZWFyQXV0b1Njcm9sbHMoKTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgYXV0b1Njcm9sbChldnQsIF90aGlzLm9wdGlvbnMsIG5ld0VsZW0sIGZhbGxiYWNrKTtcbiAgICAgICAgICB9LCAxMCk7XG4gICAgICAgICAgbGFzdEF1dG9TY3JvbGxYID0geDtcbiAgICAgICAgICBsYXN0QXV0b1Njcm9sbFkgPSB5O1xuICAgICAgICB9XG4gICAgICB9IGVsc2Uge1xuICAgICAgICAvLyBpZiBEbkQgaXMgZW5hYmxlZCAoYW5kIGJyb3dzZXIgaGFzIGdvb2QgYXV0b3Njcm9sbGluZyksIGZpcnN0IGF1dG9zY3JvbGwgd2lsbCBhbHJlYWR5IHNjcm9sbCwgc28gZ2V0IHBhcmVudCBhdXRvc2Nyb2xsIG9mIGZpcnN0IGF1dG9zY3JvbGxcbiAgICAgICAgaWYgKCF0aGlzLm9wdGlvbnMuYnViYmxlU2Nyb2xsIHx8IGdldFBhcmVudEF1dG9TY3JvbGxFbGVtZW50KGVsZW0sIHRydWUpID09PSBnZXRXaW5kb3dTY3JvbGxpbmdFbGVtZW50KCkpIHtcbiAgICAgICAgICBjbGVhckF1dG9TY3JvbGxzKCk7XG4gICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG5cbiAgICAgICAgYXV0b1Njcm9sbChldnQsIHRoaXMub3B0aW9ucywgZ2V0UGFyZW50QXV0b1Njcm9sbEVsZW1lbnQoZWxlbSwgZmFsc2UpLCBmYWxzZSk7XG4gICAgICB9XG4gICAgfVxuICB9O1xuICByZXR1cm4gX2V4dGVuZHMoQXV0b1Njcm9sbCwge1xuICAgIHBsdWdpbk5hbWU6ICdzY3JvbGwnLFxuICAgIGluaXRpYWxpemVCeURlZmF1bHQ6IHRydWVcbiAgfSk7XG59XG5cbmZ1bmN0aW9uIGNsZWFyQXV0b1Njcm9sbHMoKSB7XG4gIGF1dG9TY3JvbGxzLmZvckVhY2goZnVuY3Rpb24gKGF1dG9TY3JvbGwpIHtcbiAgICBjbGVhckludGVydmFsKGF1dG9TY3JvbGwucGlkKTtcbiAgfSk7XG4gIGF1dG9TY3JvbGxzID0gW107XG59XG5cbmZ1bmN0aW9uIGNsZWFyUG9pbnRlckVsZW1DaGFuZ2VkSW50ZXJ2YWwoKSB7XG4gIGNsZWFySW50ZXJ2YWwocG9pbnRlckVsZW1DaGFuZ2VkSW50ZXJ2YWwpO1xufVxuXG52YXIgYXV0b1Njcm9sbCA9IHRocm90dGxlKGZ1bmN0aW9uIChldnQsIG9wdGlvbnMsIHJvb3RFbCwgaXNGYWxsYmFjaykge1xuICAvLyBCdWc6IGh0dHBzOi8vYnVnemlsbGEubW96aWxsYS5vcmcvc2hvd19idWcuY2dpP2lkPTUwNTUyMVxuICBpZiAoIW9wdGlvbnMuc2Nyb2xsKSByZXR1cm47XG4gIHZhciB4ID0gKGV2dC50b3VjaGVzID8gZXZ0LnRvdWNoZXNbMF0gOiBldnQpLmNsaWVudFgsXG4gICAgICB5ID0gKGV2dC50b3VjaGVzID8gZXZ0LnRvdWNoZXNbMF0gOiBldnQpLmNsaWVudFksXG4gICAgICBzZW5zID0gb3B0aW9ucy5zY3JvbGxTZW5zaXRpdml0eSxcbiAgICAgIHNwZWVkID0gb3B0aW9ucy5zY3JvbGxTcGVlZCxcbiAgICAgIHdpblNjcm9sbGVyID0gZ2V0V2luZG93U2Nyb2xsaW5nRWxlbWVudCgpO1xuICB2YXIgc2Nyb2xsVGhpc0luc3RhbmNlID0gZmFsc2UsXG4gICAgICBzY3JvbGxDdXN0b21GbjsgLy8gTmV3IHNjcm9sbCByb290LCBzZXQgc2Nyb2xsRWxcblxuICBpZiAoc2Nyb2xsUm9vdEVsICE9PSByb290RWwpIHtcbiAgICBzY3JvbGxSb290RWwgPSByb290RWw7XG4gICAgY2xlYXJBdXRvU2Nyb2xscygpO1xuICAgIHNjcm9sbEVsID0gb3B0aW9ucy5zY3JvbGw7XG4gICAgc2Nyb2xsQ3VzdG9tRm4gPSBvcHRpb25zLnNjcm9sbEZuO1xuXG4gICAgaWYgKHNjcm9sbEVsID09PSB0cnVlKSB7XG4gICAgICBzY3JvbGxFbCA9IGdldFBhcmVudEF1dG9TY3JvbGxFbGVtZW50KHJvb3RFbCwgdHJ1ZSk7XG4gICAgfVxuICB9XG5cbiAgdmFyIGxheWVyc091dCA9IDA7XG4gIHZhciBjdXJyZW50UGFyZW50ID0gc2Nyb2xsRWw7XG5cbiAgZG8ge1xuICAgIHZhciBlbCA9IGN1cnJlbnRQYXJlbnQsXG4gICAgICAgIHJlY3QgPSBnZXRSZWN0KGVsKSxcbiAgICAgICAgdG9wID0gcmVjdC50b3AsXG4gICAgICAgIGJvdHRvbSA9IHJlY3QuYm90dG9tLFxuICAgICAgICBsZWZ0ID0gcmVjdC5sZWZ0LFxuICAgICAgICByaWdodCA9IHJlY3QucmlnaHQsXG4gICAgICAgIHdpZHRoID0gcmVjdC53aWR0aCxcbiAgICAgICAgaGVpZ2h0ID0gcmVjdC5oZWlnaHQsXG4gICAgICAgIGNhblNjcm9sbFggPSB2b2lkIDAsXG4gICAgICAgIGNhblNjcm9sbFkgPSB2b2lkIDAsXG4gICAgICAgIHNjcm9sbFdpZHRoID0gZWwuc2Nyb2xsV2lkdGgsXG4gICAgICAgIHNjcm9sbEhlaWdodCA9IGVsLnNjcm9sbEhlaWdodCxcbiAgICAgICAgZWxDU1MgPSBjc3MoZWwpLFxuICAgICAgICBzY3JvbGxQb3NYID0gZWwuc2Nyb2xsTGVmdCxcbiAgICAgICAgc2Nyb2xsUG9zWSA9IGVsLnNjcm9sbFRvcDtcblxuICAgIGlmIChlbCA9PT0gd2luU2Nyb2xsZXIpIHtcbiAgICAgIGNhblNjcm9sbFggPSB3aWR0aCA8IHNjcm9sbFdpZHRoICYmIChlbENTUy5vdmVyZmxvd1ggPT09ICdhdXRvJyB8fCBlbENTUy5vdmVyZmxvd1ggPT09ICdzY3JvbGwnIHx8IGVsQ1NTLm92ZXJmbG93WCA9PT0gJ3Zpc2libGUnKTtcbiAgICAgIGNhblNjcm9sbFkgPSBoZWlnaHQgPCBzY3JvbGxIZWlnaHQgJiYgKGVsQ1NTLm92ZXJmbG93WSA9PT0gJ2F1dG8nIHx8IGVsQ1NTLm92ZXJmbG93WSA9PT0gJ3Njcm9sbCcgfHwgZWxDU1Mub3ZlcmZsb3dZID09PSAndmlzaWJsZScpO1xuICAgIH0gZWxzZSB7XG4gICAgICBjYW5TY3JvbGxYID0gd2lkdGggPCBzY3JvbGxXaWR0aCAmJiAoZWxDU1Mub3ZlcmZsb3dYID09PSAnYXV0bycgfHwgZWxDU1Mub3ZlcmZsb3dYID09PSAnc2Nyb2xsJyk7XG4gICAgICBjYW5TY3JvbGxZID0gaGVpZ2h0IDwgc2Nyb2xsSGVpZ2h0ICYmIChlbENTUy5vdmVyZmxvd1kgPT09ICdhdXRvJyB8fCBlbENTUy5vdmVyZmxvd1kgPT09ICdzY3JvbGwnKTtcbiAgICB9XG5cbiAgICB2YXIgdnggPSBjYW5TY3JvbGxYICYmIChNYXRoLmFicyhyaWdodCAtIHgpIDw9IHNlbnMgJiYgc2Nyb2xsUG9zWCArIHdpZHRoIDwgc2Nyb2xsV2lkdGgpIC0gKE1hdGguYWJzKGxlZnQgLSB4KSA8PSBzZW5zICYmICEhc2Nyb2xsUG9zWCk7XG4gICAgdmFyIHZ5ID0gY2FuU2Nyb2xsWSAmJiAoTWF0aC5hYnMoYm90dG9tIC0geSkgPD0gc2VucyAmJiBzY3JvbGxQb3NZICsgaGVpZ2h0IDwgc2Nyb2xsSGVpZ2h0KSAtIChNYXRoLmFicyh0b3AgLSB5KSA8PSBzZW5zICYmICEhc2Nyb2xsUG9zWSk7XG5cbiAgICBpZiAoIWF1dG9TY3JvbGxzW2xheWVyc091dF0pIHtcbiAgICAgIGZvciAodmFyIGkgPSAwOyBpIDw9IGxheWVyc091dDsgaSsrKSB7XG4gICAgICAgIGlmICghYXV0b1Njcm9sbHNbaV0pIHtcbiAgICAgICAgICBhdXRvU2Nyb2xsc1tpXSA9IHt9O1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuXG4gICAgaWYgKGF1dG9TY3JvbGxzW2xheWVyc091dF0udnggIT0gdnggfHwgYXV0b1Njcm9sbHNbbGF5ZXJzT3V0XS52eSAhPSB2eSB8fCBhdXRvU2Nyb2xsc1tsYXllcnNPdXRdLmVsICE9PSBlbCkge1xuICAgICAgYXV0b1Njcm9sbHNbbGF5ZXJzT3V0XS5lbCA9IGVsO1xuICAgICAgYXV0b1Njcm9sbHNbbGF5ZXJzT3V0XS52eCA9IHZ4O1xuICAgICAgYXV0b1Njcm9sbHNbbGF5ZXJzT3V0XS52eSA9IHZ5O1xuICAgICAgY2xlYXJJbnRlcnZhbChhdXRvU2Nyb2xsc1tsYXllcnNPdXRdLnBpZCk7XG5cbiAgICAgIGlmICh2eCAhPSAwIHx8IHZ5ICE9IDApIHtcbiAgICAgICAgc2Nyb2xsVGhpc0luc3RhbmNlID0gdHJ1ZTtcbiAgICAgICAgLyoganNoaW50IGxvb3BmdW5jOnRydWUgKi9cblxuICAgICAgICBhdXRvU2Nyb2xsc1tsYXllcnNPdXRdLnBpZCA9IHNldEludGVydmFsKGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAvLyBlbXVsYXRlIGRyYWcgb3ZlciBkdXJpbmcgYXV0b3Njcm9sbCAoZmFsbGJhY2spLCBlbXVsYXRpbmcgbmF0aXZlIERuRCBiZWhhdmlvdXJcbiAgICAgICAgICBpZiAoaXNGYWxsYmFjayAmJiB0aGlzLmxheWVyID09PSAwKSB7XG4gICAgICAgICAgICBTb3J0YWJsZS5hY3RpdmUuX29uVG91Y2hNb3ZlKHRvdWNoRXZ0JDEpOyAvLyBUbyBtb3ZlIGdob3N0IGlmIGl0IGlzIHBvc2l0aW9uZWQgYWJzb2x1dGVseVxuXG4gICAgICAgICAgfVxuXG4gICAgICAgICAgdmFyIHNjcm9sbE9mZnNldFkgPSBhdXRvU2Nyb2xsc1t0aGlzLmxheWVyXS52eSA/IGF1dG9TY3JvbGxzW3RoaXMubGF5ZXJdLnZ5ICogc3BlZWQgOiAwO1xuICAgICAgICAgIHZhciBzY3JvbGxPZmZzZXRYID0gYXV0b1Njcm9sbHNbdGhpcy5sYXllcl0udnggPyBhdXRvU2Nyb2xsc1t0aGlzLmxheWVyXS52eCAqIHNwZWVkIDogMDtcblxuICAgICAgICAgIGlmICh0eXBlb2Ygc2Nyb2xsQ3VzdG9tRm4gPT09ICdmdW5jdGlvbicpIHtcbiAgICAgICAgICAgIGlmIChzY3JvbGxDdXN0b21Gbi5jYWxsKFNvcnRhYmxlLmRyYWdnZWQucGFyZW50Tm9kZVtleHBhbmRvXSwgc2Nyb2xsT2Zmc2V0WCwgc2Nyb2xsT2Zmc2V0WSwgZXZ0LCB0b3VjaEV2dCQxLCBhdXRvU2Nyb2xsc1t0aGlzLmxheWVyXS5lbCkgIT09ICdjb250aW51ZScpIHtcbiAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH1cblxuICAgICAgICAgIHNjcm9sbEJ5KGF1dG9TY3JvbGxzW3RoaXMubGF5ZXJdLmVsLCBzY3JvbGxPZmZzZXRYLCBzY3JvbGxPZmZzZXRZKTtcbiAgICAgICAgfS5iaW5kKHtcbiAgICAgICAgICBsYXllcjogbGF5ZXJzT3V0XG4gICAgICAgIH0pLCAyNCk7XG4gICAgICB9XG4gICAgfVxuXG4gICAgbGF5ZXJzT3V0Kys7XG4gIH0gd2hpbGUgKG9wdGlvbnMuYnViYmxlU2Nyb2xsICYmIGN1cnJlbnRQYXJlbnQgIT09IHdpblNjcm9sbGVyICYmIChjdXJyZW50UGFyZW50ID0gZ2V0UGFyZW50QXV0b1Njcm9sbEVsZW1lbnQoY3VycmVudFBhcmVudCwgZmFsc2UpKSk7XG5cbiAgc2Nyb2xsaW5nID0gc2Nyb2xsVGhpc0luc3RhbmNlOyAvLyBpbiBjYXNlIGFub3RoZXIgZnVuY3Rpb24gY2F0Y2hlcyBzY3JvbGxpbmcgYXMgZmFsc2UgaW4gYmV0d2VlbiB3aGVuIGl0IGlzIG5vdFxufSwgMzApO1xuXG52YXIgZHJvcCA9IGZ1bmN0aW9uIGRyb3AoX3JlZikge1xuICB2YXIgb3JpZ2luYWxFdmVudCA9IF9yZWYub3JpZ2luYWxFdmVudCxcbiAgICAgIHB1dFNvcnRhYmxlID0gX3JlZi5wdXRTb3J0YWJsZSxcbiAgICAgIGRyYWdFbCA9IF9yZWYuZHJhZ0VsLFxuICAgICAgYWN0aXZlU29ydGFibGUgPSBfcmVmLmFjdGl2ZVNvcnRhYmxlLFxuICAgICAgZGlzcGF0Y2hTb3J0YWJsZUV2ZW50ID0gX3JlZi5kaXNwYXRjaFNvcnRhYmxlRXZlbnQsXG4gICAgICBoaWRlR2hvc3RGb3JUYXJnZXQgPSBfcmVmLmhpZGVHaG9zdEZvclRhcmdldCxcbiAgICAgIHVuaGlkZUdob3N0Rm9yVGFyZ2V0ID0gX3JlZi51bmhpZGVHaG9zdEZvclRhcmdldDtcbiAgaWYgKCFvcmlnaW5hbEV2ZW50KSByZXR1cm47XG4gIHZhciB0b1NvcnRhYmxlID0gcHV0U29ydGFibGUgfHwgYWN0aXZlU29ydGFibGU7XG4gIGhpZGVHaG9zdEZvclRhcmdldCgpO1xuICB2YXIgdG91Y2ggPSBvcmlnaW5hbEV2ZW50LmNoYW5nZWRUb3VjaGVzICYmIG9yaWdpbmFsRXZlbnQuY2hhbmdlZFRvdWNoZXMubGVuZ3RoID8gb3JpZ2luYWxFdmVudC5jaGFuZ2VkVG91Y2hlc1swXSA6IG9yaWdpbmFsRXZlbnQ7XG4gIHZhciB0YXJnZXQgPSBkb2N1bWVudC5lbGVtZW50RnJvbVBvaW50KHRvdWNoLmNsaWVudFgsIHRvdWNoLmNsaWVudFkpO1xuICB1bmhpZGVHaG9zdEZvclRhcmdldCgpO1xuXG4gIGlmICh0b1NvcnRhYmxlICYmICF0b1NvcnRhYmxlLmVsLmNvbnRhaW5zKHRhcmdldCkpIHtcbiAgICBkaXNwYXRjaFNvcnRhYmxlRXZlbnQoJ3NwaWxsJyk7XG4gICAgdGhpcy5vblNwaWxsKHtcbiAgICAgIGRyYWdFbDogZHJhZ0VsLFxuICAgICAgcHV0U29ydGFibGU6IHB1dFNvcnRhYmxlXG4gICAgfSk7XG4gIH1cbn07XG5cbmZ1bmN0aW9uIFJldmVydCgpIHt9XG5cblJldmVydC5wcm90b3R5cGUgPSB7XG4gIHN0YXJ0SW5kZXg6IG51bGwsXG4gIGRyYWdTdGFydDogZnVuY3Rpb24gZHJhZ1N0YXJ0KF9yZWYyKSB7XG4gICAgdmFyIG9sZERyYWdnYWJsZUluZGV4ID0gX3JlZjIub2xkRHJhZ2dhYmxlSW5kZXg7XG4gICAgdGhpcy5zdGFydEluZGV4ID0gb2xkRHJhZ2dhYmxlSW5kZXg7XG4gIH0sXG4gIG9uU3BpbGw6IGZ1bmN0aW9uIG9uU3BpbGwoX3JlZjMpIHtcbiAgICB2YXIgZHJhZ0VsID0gX3JlZjMuZHJhZ0VsLFxuICAgICAgICBwdXRTb3J0YWJsZSA9IF9yZWYzLnB1dFNvcnRhYmxlO1xuICAgIHRoaXMuc29ydGFibGUuY2FwdHVyZUFuaW1hdGlvblN0YXRlKCk7XG5cbiAgICBpZiAocHV0U29ydGFibGUpIHtcbiAgICAgIHB1dFNvcnRhYmxlLmNhcHR1cmVBbmltYXRpb25TdGF0ZSgpO1xuICAgIH1cblxuICAgIHZhciBuZXh0U2libGluZyA9IGdldENoaWxkKHRoaXMuc29ydGFibGUuZWwsIHRoaXMuc3RhcnRJbmRleCwgdGhpcy5vcHRpb25zKTtcblxuICAgIGlmIChuZXh0U2libGluZykge1xuICAgICAgdGhpcy5zb3J0YWJsZS5lbC5pbnNlcnRCZWZvcmUoZHJhZ0VsLCBuZXh0U2libGluZyk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHRoaXMuc29ydGFibGUuZWwuYXBwZW5kQ2hpbGQoZHJhZ0VsKTtcbiAgICB9XG5cbiAgICB0aGlzLnNvcnRhYmxlLmFuaW1hdGVBbGwoKTtcblxuICAgIGlmIChwdXRTb3J0YWJsZSkge1xuICAgICAgcHV0U29ydGFibGUuYW5pbWF0ZUFsbCgpO1xuICAgIH1cbiAgfSxcbiAgZHJvcDogZHJvcFxufTtcblxuX2V4dGVuZHMoUmV2ZXJ0LCB7XG4gIHBsdWdpbk5hbWU6ICdyZXZlcnRPblNwaWxsJ1xufSk7XG5cbmZ1bmN0aW9uIFJlbW92ZSgpIHt9XG5cblJlbW92ZS5wcm90b3R5cGUgPSB7XG4gIG9uU3BpbGw6IGZ1bmN0aW9uIG9uU3BpbGwoX3JlZjQpIHtcbiAgICB2YXIgZHJhZ0VsID0gX3JlZjQuZHJhZ0VsLFxuICAgICAgICBwdXRTb3J0YWJsZSA9IF9yZWY0LnB1dFNvcnRhYmxlO1xuICAgIHZhciBwYXJlbnRTb3J0YWJsZSA9IHB1dFNvcnRhYmxlIHx8IHRoaXMuc29ydGFibGU7XG4gICAgcGFyZW50U29ydGFibGUuY2FwdHVyZUFuaW1hdGlvblN0YXRlKCk7XG4gICAgZHJhZ0VsLnBhcmVudE5vZGUgJiYgZHJhZ0VsLnBhcmVudE5vZGUucmVtb3ZlQ2hpbGQoZHJhZ0VsKTtcbiAgICBwYXJlbnRTb3J0YWJsZS5hbmltYXRlQWxsKCk7XG4gIH0sXG4gIGRyb3A6IGRyb3Bcbn07XG5cbl9leHRlbmRzKFJlbW92ZSwge1xuICBwbHVnaW5OYW1lOiAncmVtb3ZlT25TcGlsbCdcbn0pO1xuXG52YXIgbGFzdFN3YXBFbDtcblxuZnVuY3Rpb24gU3dhcFBsdWdpbigpIHtcbiAgZnVuY3Rpb24gU3dhcCgpIHtcbiAgICB0aGlzLmRlZmF1bHRzID0ge1xuICAgICAgc3dhcENsYXNzOiAnc29ydGFibGUtc3dhcC1oaWdobGlnaHQnXG4gICAgfTtcbiAgfVxuXG4gIFN3YXAucHJvdG90eXBlID0ge1xuICAgIGRyYWdTdGFydDogZnVuY3Rpb24gZHJhZ1N0YXJ0KF9yZWYpIHtcbiAgICAgIHZhciBkcmFnRWwgPSBfcmVmLmRyYWdFbDtcbiAgICAgIGxhc3RTd2FwRWwgPSBkcmFnRWw7XG4gICAgfSxcbiAgICBkcmFnT3ZlclZhbGlkOiBmdW5jdGlvbiBkcmFnT3ZlclZhbGlkKF9yZWYyKSB7XG4gICAgICB2YXIgY29tcGxldGVkID0gX3JlZjIuY29tcGxldGVkLFxuICAgICAgICAgIHRhcmdldCA9IF9yZWYyLnRhcmdldCxcbiAgICAgICAgICBvbk1vdmUgPSBfcmVmMi5vbk1vdmUsXG4gICAgICAgICAgYWN0aXZlU29ydGFibGUgPSBfcmVmMi5hY3RpdmVTb3J0YWJsZSxcbiAgICAgICAgICBjaGFuZ2VkID0gX3JlZjIuY2hhbmdlZCxcbiAgICAgICAgICBjYW5jZWwgPSBfcmVmMi5jYW5jZWw7XG4gICAgICBpZiAoIWFjdGl2ZVNvcnRhYmxlLm9wdGlvbnMuc3dhcCkgcmV0dXJuO1xuICAgICAgdmFyIGVsID0gdGhpcy5zb3J0YWJsZS5lbCxcbiAgICAgICAgICBvcHRpb25zID0gdGhpcy5vcHRpb25zO1xuXG4gICAgICBpZiAodGFyZ2V0ICYmIHRhcmdldCAhPT0gZWwpIHtcbiAgICAgICAgdmFyIHByZXZTd2FwRWwgPSBsYXN0U3dhcEVsO1xuXG4gICAgICAgIGlmIChvbk1vdmUodGFyZ2V0KSAhPT0gZmFsc2UpIHtcbiAgICAgICAgICB0b2dnbGVDbGFzcyh0YXJnZXQsIG9wdGlvbnMuc3dhcENsYXNzLCB0cnVlKTtcbiAgICAgICAgICBsYXN0U3dhcEVsID0gdGFyZ2V0O1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIGxhc3RTd2FwRWwgPSBudWxsO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKHByZXZTd2FwRWwgJiYgcHJldlN3YXBFbCAhPT0gbGFzdFN3YXBFbCkge1xuICAgICAgICAgIHRvZ2dsZUNsYXNzKHByZXZTd2FwRWwsIG9wdGlvbnMuc3dhcENsYXNzLCBmYWxzZSk7XG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgY2hhbmdlZCgpO1xuICAgICAgY29tcGxldGVkKHRydWUpO1xuICAgICAgY2FuY2VsKCk7XG4gICAgfSxcbiAgICBkcm9wOiBmdW5jdGlvbiBkcm9wKF9yZWYzKSB7XG4gICAgICB2YXIgYWN0aXZlU29ydGFibGUgPSBfcmVmMy5hY3RpdmVTb3J0YWJsZSxcbiAgICAgICAgICBwdXRTb3J0YWJsZSA9IF9yZWYzLnB1dFNvcnRhYmxlLFxuICAgICAgICAgIGRyYWdFbCA9IF9yZWYzLmRyYWdFbDtcbiAgICAgIHZhciB0b1NvcnRhYmxlID0gcHV0U29ydGFibGUgfHwgdGhpcy5zb3J0YWJsZTtcbiAgICAgIHZhciBvcHRpb25zID0gdGhpcy5vcHRpb25zO1xuICAgICAgbGFzdFN3YXBFbCAmJiB0b2dnbGVDbGFzcyhsYXN0U3dhcEVsLCBvcHRpb25zLnN3YXBDbGFzcywgZmFsc2UpO1xuXG4gICAgICBpZiAobGFzdFN3YXBFbCAmJiAob3B0aW9ucy5zd2FwIHx8IHB1dFNvcnRhYmxlICYmIHB1dFNvcnRhYmxlLm9wdGlvbnMuc3dhcCkpIHtcbiAgICAgICAgaWYgKGRyYWdFbCAhPT0gbGFzdFN3YXBFbCkge1xuICAgICAgICAgIHRvU29ydGFibGUuY2FwdHVyZUFuaW1hdGlvblN0YXRlKCk7XG4gICAgICAgICAgaWYgKHRvU29ydGFibGUgIT09IGFjdGl2ZVNvcnRhYmxlKSBhY3RpdmVTb3J0YWJsZS5jYXB0dXJlQW5pbWF0aW9uU3RhdGUoKTtcbiAgICAgICAgICBzd2FwTm9kZXMoZHJhZ0VsLCBsYXN0U3dhcEVsKTtcbiAgICAgICAgICB0b1NvcnRhYmxlLmFuaW1hdGVBbGwoKTtcbiAgICAgICAgICBpZiAodG9Tb3J0YWJsZSAhPT0gYWN0aXZlU29ydGFibGUpIGFjdGl2ZVNvcnRhYmxlLmFuaW1hdGVBbGwoKTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH0sXG4gICAgbnVsbGluZzogZnVuY3Rpb24gbnVsbGluZygpIHtcbiAgICAgIGxhc3RTd2FwRWwgPSBudWxsO1xuICAgIH1cbiAgfTtcbiAgcmV0dXJuIF9leHRlbmRzKFN3YXAsIHtcbiAgICBwbHVnaW5OYW1lOiAnc3dhcCcsXG4gICAgZXZlbnRQcm9wZXJ0aWVzOiBmdW5jdGlvbiBldmVudFByb3BlcnRpZXMoKSB7XG4gICAgICByZXR1cm4ge1xuICAgICAgICBzd2FwSXRlbTogbGFzdFN3YXBFbFxuICAgICAgfTtcbiAgICB9XG4gIH0pO1xufVxuXG5mdW5jdGlvbiBzd2FwTm9kZXMobjEsIG4yKSB7XG4gIHZhciBwMSA9IG4xLnBhcmVudE5vZGUsXG4gICAgICBwMiA9IG4yLnBhcmVudE5vZGUsXG4gICAgICBpMSxcbiAgICAgIGkyO1xuICBpZiAoIXAxIHx8ICFwMiB8fCBwMS5pc0VxdWFsTm9kZShuMikgfHwgcDIuaXNFcXVhbE5vZGUobjEpKSByZXR1cm47XG4gIGkxID0gaW5kZXgobjEpO1xuICBpMiA9IGluZGV4KG4yKTtcblxuICBpZiAocDEuaXNFcXVhbE5vZGUocDIpICYmIGkxIDwgaTIpIHtcbiAgICBpMisrO1xuICB9XG5cbiAgcDEuaW5zZXJ0QmVmb3JlKG4yLCBwMS5jaGlsZHJlbltpMV0pO1xuICBwMi5pbnNlcnRCZWZvcmUobjEsIHAyLmNoaWxkcmVuW2kyXSk7XG59XG5cbnZhciBtdWx0aURyYWdFbGVtZW50cyA9IFtdLFxuICAgIG11bHRpRHJhZ0Nsb25lcyA9IFtdLFxuICAgIGxhc3RNdWx0aURyYWdTZWxlY3QsXG4gICAgLy8gZm9yIHNlbGVjdGlvbiB3aXRoIG1vZGlmaWVyIGtleSBkb3duIChTSElGVClcbm11bHRpRHJhZ1NvcnRhYmxlLFxuICAgIGluaXRpYWxGb2xkaW5nID0gZmFsc2UsXG4gICAgLy8gSW5pdGlhbCBtdWx0aS1kcmFnIGZvbGQgd2hlbiBkcmFnIHN0YXJ0ZWRcbmZvbGRpbmcgPSBmYWxzZSxcbiAgICAvLyBGb2xkaW5nIGFueSBvdGhlciB0aW1lXG5kcmFnU3RhcnRlZCA9IGZhbHNlLFxuICAgIGRyYWdFbCQxLFxuICAgIGNsb25lc0Zyb21SZWN0LFxuICAgIGNsb25lc0hpZGRlbjtcblxuZnVuY3Rpb24gTXVsdGlEcmFnUGx1Z2luKCkge1xuICBmdW5jdGlvbiBNdWx0aURyYWcoc29ydGFibGUpIHtcbiAgICAvLyBCaW5kIGFsbCBwcml2YXRlIG1ldGhvZHNcbiAgICBmb3IgKHZhciBmbiBpbiB0aGlzKSB7XG4gICAgICBpZiAoZm4uY2hhckF0KDApID09PSAnXycgJiYgdHlwZW9mIHRoaXNbZm5dID09PSAnZnVuY3Rpb24nKSB7XG4gICAgICAgIHRoaXNbZm5dID0gdGhpc1tmbl0uYmluZCh0aGlzKTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICBpZiAoc29ydGFibGUub3B0aW9ucy5zdXBwb3J0UG9pbnRlcikge1xuICAgICAgb24oZG9jdW1lbnQsICdwb2ludGVydXAnLCB0aGlzLl9kZXNlbGVjdE11bHRpRHJhZyk7XG4gICAgfSBlbHNlIHtcbiAgICAgIG9uKGRvY3VtZW50LCAnbW91c2V1cCcsIHRoaXMuX2Rlc2VsZWN0TXVsdGlEcmFnKTtcbiAgICAgIG9uKGRvY3VtZW50LCAndG91Y2hlbmQnLCB0aGlzLl9kZXNlbGVjdE11bHRpRHJhZyk7XG4gICAgfVxuXG4gICAgb24oZG9jdW1lbnQsICdrZXlkb3duJywgdGhpcy5fY2hlY2tLZXlEb3duKTtcbiAgICBvbihkb2N1bWVudCwgJ2tleXVwJywgdGhpcy5fY2hlY2tLZXlVcCk7XG4gICAgdGhpcy5kZWZhdWx0cyA9IHtcbiAgICAgIHNlbGVjdGVkQ2xhc3M6ICdzb3J0YWJsZS1zZWxlY3RlZCcsXG4gICAgICBtdWx0aURyYWdLZXk6IG51bGwsXG4gICAgICBzZXREYXRhOiBmdW5jdGlvbiBzZXREYXRhKGRhdGFUcmFuc2ZlciwgZHJhZ0VsKSB7XG4gICAgICAgIHZhciBkYXRhID0gJyc7XG5cbiAgICAgICAgaWYgKG11bHRpRHJhZ0VsZW1lbnRzLmxlbmd0aCAmJiBtdWx0aURyYWdTb3J0YWJsZSA9PT0gc29ydGFibGUpIHtcbiAgICAgICAgICBtdWx0aURyYWdFbGVtZW50cy5mb3JFYWNoKGZ1bmN0aW9uIChtdWx0aURyYWdFbGVtZW50LCBpKSB7XG4gICAgICAgICAgICBkYXRhICs9ICghaSA/ICcnIDogJywgJykgKyBtdWx0aURyYWdFbGVtZW50LnRleHRDb250ZW50O1xuICAgICAgICAgIH0pO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIGRhdGEgPSBkcmFnRWwudGV4dENvbnRlbnQ7XG4gICAgICAgIH1cblxuICAgICAgICBkYXRhVHJhbnNmZXIuc2V0RGF0YSgnVGV4dCcsIGRhdGEpO1xuICAgICAgfVxuICAgIH07XG4gIH1cblxuICBNdWx0aURyYWcucHJvdG90eXBlID0ge1xuICAgIG11bHRpRHJhZ0tleURvd246IGZhbHNlLFxuICAgIGlzTXVsdGlEcmFnOiBmYWxzZSxcbiAgICBkZWxheVN0YXJ0R2xvYmFsOiBmdW5jdGlvbiBkZWxheVN0YXJ0R2xvYmFsKF9yZWYpIHtcbiAgICAgIHZhciBkcmFnZ2VkID0gX3JlZi5kcmFnRWw7XG4gICAgICBkcmFnRWwkMSA9IGRyYWdnZWQ7XG4gICAgfSxcbiAgICBkZWxheUVuZGVkOiBmdW5jdGlvbiBkZWxheUVuZGVkKCkge1xuICAgICAgdGhpcy5pc011bHRpRHJhZyA9IH5tdWx0aURyYWdFbGVtZW50cy5pbmRleE9mKGRyYWdFbCQxKTtcbiAgICB9LFxuICAgIHNldHVwQ2xvbmU6IGZ1bmN0aW9uIHNldHVwQ2xvbmUoX3JlZjIpIHtcbiAgICAgIHZhciBzb3J0YWJsZSA9IF9yZWYyLnNvcnRhYmxlLFxuICAgICAgICAgIGNhbmNlbCA9IF9yZWYyLmNhbmNlbDtcbiAgICAgIGlmICghdGhpcy5pc011bHRpRHJhZykgcmV0dXJuO1xuXG4gICAgICBmb3IgKHZhciBpID0gMDsgaSA8IG11bHRpRHJhZ0VsZW1lbnRzLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgIG11bHRpRHJhZ0Nsb25lcy5wdXNoKGNsb25lKG11bHRpRHJhZ0VsZW1lbnRzW2ldKSk7XG4gICAgICAgIG11bHRpRHJhZ0Nsb25lc1tpXS5zb3J0YWJsZUluZGV4ID0gbXVsdGlEcmFnRWxlbWVudHNbaV0uc29ydGFibGVJbmRleDtcbiAgICAgICAgbXVsdGlEcmFnQ2xvbmVzW2ldLmRyYWdnYWJsZSA9IGZhbHNlO1xuICAgICAgICBtdWx0aURyYWdDbG9uZXNbaV0uc3R5bGVbJ3dpbGwtY2hhbmdlJ10gPSAnJztcbiAgICAgICAgdG9nZ2xlQ2xhc3MobXVsdGlEcmFnQ2xvbmVzW2ldLCB0aGlzLm9wdGlvbnMuc2VsZWN0ZWRDbGFzcywgZmFsc2UpO1xuICAgICAgICBtdWx0aURyYWdFbGVtZW50c1tpXSA9PT0gZHJhZ0VsJDEgJiYgdG9nZ2xlQ2xhc3MobXVsdGlEcmFnQ2xvbmVzW2ldLCB0aGlzLm9wdGlvbnMuY2hvc2VuQ2xhc3MsIGZhbHNlKTtcbiAgICAgIH1cblxuICAgICAgc29ydGFibGUuX2hpZGVDbG9uZSgpO1xuXG4gICAgICBjYW5jZWwoKTtcbiAgICB9LFxuICAgIGNsb25lOiBmdW5jdGlvbiBjbG9uZShfcmVmMykge1xuICAgICAgdmFyIHNvcnRhYmxlID0gX3JlZjMuc29ydGFibGUsXG4gICAgICAgICAgcm9vdEVsID0gX3JlZjMucm9vdEVsLFxuICAgICAgICAgIGRpc3BhdGNoU29ydGFibGVFdmVudCA9IF9yZWYzLmRpc3BhdGNoU29ydGFibGVFdmVudCxcbiAgICAgICAgICBjYW5jZWwgPSBfcmVmMy5jYW5jZWw7XG4gICAgICBpZiAoIXRoaXMuaXNNdWx0aURyYWcpIHJldHVybjtcblxuICAgICAgaWYgKCF0aGlzLm9wdGlvbnMucmVtb3ZlQ2xvbmVPbkhpZGUpIHtcbiAgICAgICAgaWYgKG11bHRpRHJhZ0VsZW1lbnRzLmxlbmd0aCAmJiBtdWx0aURyYWdTb3J0YWJsZSA9PT0gc29ydGFibGUpIHtcbiAgICAgICAgICBpbnNlcnRNdWx0aURyYWdDbG9uZXModHJ1ZSwgcm9vdEVsKTtcbiAgICAgICAgICBkaXNwYXRjaFNvcnRhYmxlRXZlbnQoJ2Nsb25lJyk7XG4gICAgICAgICAgY2FuY2VsKCk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9LFxuICAgIHNob3dDbG9uZTogZnVuY3Rpb24gc2hvd0Nsb25lKF9yZWY0KSB7XG4gICAgICB2YXIgY2xvbmVOb3dTaG93biA9IF9yZWY0LmNsb25lTm93U2hvd24sXG4gICAgICAgICAgcm9vdEVsID0gX3JlZjQucm9vdEVsLFxuICAgICAgICAgIGNhbmNlbCA9IF9yZWY0LmNhbmNlbDtcbiAgICAgIGlmICghdGhpcy5pc011bHRpRHJhZykgcmV0dXJuO1xuICAgICAgaW5zZXJ0TXVsdGlEcmFnQ2xvbmVzKGZhbHNlLCByb290RWwpO1xuICAgICAgbXVsdGlEcmFnQ2xvbmVzLmZvckVhY2goZnVuY3Rpb24gKGNsb25lKSB7XG4gICAgICAgIGNzcyhjbG9uZSwgJ2Rpc3BsYXknLCAnJyk7XG4gICAgICB9KTtcbiAgICAgIGNsb25lTm93U2hvd24oKTtcbiAgICAgIGNsb25lc0hpZGRlbiA9IGZhbHNlO1xuICAgICAgY2FuY2VsKCk7XG4gICAgfSxcbiAgICBoaWRlQ2xvbmU6IGZ1bmN0aW9uIGhpZGVDbG9uZShfcmVmNSkge1xuICAgICAgdmFyIF90aGlzID0gdGhpcztcblxuICAgICAgdmFyIHNvcnRhYmxlID0gX3JlZjUuc29ydGFibGUsXG4gICAgICAgICAgY2xvbmVOb3dIaWRkZW4gPSBfcmVmNS5jbG9uZU5vd0hpZGRlbixcbiAgICAgICAgICBjYW5jZWwgPSBfcmVmNS5jYW5jZWw7XG4gICAgICBpZiAoIXRoaXMuaXNNdWx0aURyYWcpIHJldHVybjtcbiAgICAgIG11bHRpRHJhZ0Nsb25lcy5mb3JFYWNoKGZ1bmN0aW9uIChjbG9uZSkge1xuICAgICAgICBjc3MoY2xvbmUsICdkaXNwbGF5JywgJ25vbmUnKTtcblxuICAgICAgICBpZiAoX3RoaXMub3B0aW9ucy5yZW1vdmVDbG9uZU9uSGlkZSAmJiBjbG9uZS5wYXJlbnROb2RlKSB7XG4gICAgICAgICAgY2xvbmUucGFyZW50Tm9kZS5yZW1vdmVDaGlsZChjbG9uZSk7XG4gICAgICAgIH1cbiAgICAgIH0pO1xuICAgICAgY2xvbmVOb3dIaWRkZW4oKTtcbiAgICAgIGNsb25lc0hpZGRlbiA9IHRydWU7XG4gICAgICBjYW5jZWwoKTtcbiAgICB9LFxuICAgIGRyYWdTdGFydEdsb2JhbDogZnVuY3Rpb24gZHJhZ1N0YXJ0R2xvYmFsKF9yZWY2KSB7XG4gICAgICB2YXIgc29ydGFibGUgPSBfcmVmNi5zb3J0YWJsZTtcblxuICAgICAgaWYgKCF0aGlzLmlzTXVsdGlEcmFnICYmIG11bHRpRHJhZ1NvcnRhYmxlKSB7XG4gICAgICAgIG11bHRpRHJhZ1NvcnRhYmxlLm11bHRpRHJhZy5fZGVzZWxlY3RNdWx0aURyYWcoKTtcbiAgICAgIH1cblxuICAgICAgbXVsdGlEcmFnRWxlbWVudHMuZm9yRWFjaChmdW5jdGlvbiAobXVsdGlEcmFnRWxlbWVudCkge1xuICAgICAgICBtdWx0aURyYWdFbGVtZW50LnNvcnRhYmxlSW5kZXggPSBpbmRleChtdWx0aURyYWdFbGVtZW50KTtcbiAgICAgIH0pOyAvLyBTb3J0IG11bHRpLWRyYWcgZWxlbWVudHNcblxuICAgICAgbXVsdGlEcmFnRWxlbWVudHMgPSBtdWx0aURyYWdFbGVtZW50cy5zb3J0KGZ1bmN0aW9uIChhLCBiKSB7XG4gICAgICAgIHJldHVybiBhLnNvcnRhYmxlSW5kZXggLSBiLnNvcnRhYmxlSW5kZXg7XG4gICAgICB9KTtcbiAgICAgIGRyYWdTdGFydGVkID0gdHJ1ZTtcbiAgICB9LFxuICAgIGRyYWdTdGFydGVkOiBmdW5jdGlvbiBkcmFnU3RhcnRlZChfcmVmNykge1xuICAgICAgdmFyIF90aGlzMiA9IHRoaXM7XG5cbiAgICAgIHZhciBzb3J0YWJsZSA9IF9yZWY3LnNvcnRhYmxlO1xuICAgICAgaWYgKCF0aGlzLmlzTXVsdGlEcmFnKSByZXR1cm47XG5cbiAgICAgIGlmICh0aGlzLm9wdGlvbnMuc29ydCkge1xuICAgICAgICAvLyBDYXB0dXJlIHJlY3RzLFxuICAgICAgICAvLyBoaWRlIG11bHRpIGRyYWcgZWxlbWVudHMgKGJ5IHBvc2l0aW9uaW5nIHRoZW0gYWJzb2x1dGUpLFxuICAgICAgICAvLyBzZXQgbXVsdGkgZHJhZyBlbGVtZW50cyByZWN0cyB0byBkcmFnUmVjdCxcbiAgICAgICAgLy8gc2hvdyBtdWx0aSBkcmFnIGVsZW1lbnRzLFxuICAgICAgICAvLyBhbmltYXRlIHRvIHJlY3RzLFxuICAgICAgICAvLyB1bnNldCByZWN0cyAmIHJlbW92ZSBmcm9tIERPTVxuICAgICAgICBzb3J0YWJsZS5jYXB0dXJlQW5pbWF0aW9uU3RhdGUoKTtcblxuICAgICAgICBpZiAodGhpcy5vcHRpb25zLmFuaW1hdGlvbikge1xuICAgICAgICAgIG11bHRpRHJhZ0VsZW1lbnRzLmZvckVhY2goZnVuY3Rpb24gKG11bHRpRHJhZ0VsZW1lbnQpIHtcbiAgICAgICAgICAgIGlmIChtdWx0aURyYWdFbGVtZW50ID09PSBkcmFnRWwkMSkgcmV0dXJuO1xuICAgICAgICAgICAgY3NzKG11bHRpRHJhZ0VsZW1lbnQsICdwb3NpdGlvbicsICdhYnNvbHV0ZScpO1xuICAgICAgICAgIH0pO1xuICAgICAgICAgIHZhciBkcmFnUmVjdCA9IGdldFJlY3QoZHJhZ0VsJDEsIGZhbHNlLCB0cnVlLCB0cnVlKTtcbiAgICAgICAgICBtdWx0aURyYWdFbGVtZW50cy5mb3JFYWNoKGZ1bmN0aW9uIChtdWx0aURyYWdFbGVtZW50KSB7XG4gICAgICAgICAgICBpZiAobXVsdGlEcmFnRWxlbWVudCA9PT0gZHJhZ0VsJDEpIHJldHVybjtcbiAgICAgICAgICAgIHNldFJlY3QobXVsdGlEcmFnRWxlbWVudCwgZHJhZ1JlY3QpO1xuICAgICAgICAgIH0pO1xuICAgICAgICAgIGZvbGRpbmcgPSB0cnVlO1xuICAgICAgICAgIGluaXRpYWxGb2xkaW5nID0gdHJ1ZTtcbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICBzb3J0YWJsZS5hbmltYXRlQWxsKGZ1bmN0aW9uICgpIHtcbiAgICAgICAgZm9sZGluZyA9IGZhbHNlO1xuICAgICAgICBpbml0aWFsRm9sZGluZyA9IGZhbHNlO1xuXG4gICAgICAgIGlmIChfdGhpczIub3B0aW9ucy5hbmltYXRpb24pIHtcbiAgICAgICAgICBtdWx0aURyYWdFbGVtZW50cy5mb3JFYWNoKGZ1bmN0aW9uIChtdWx0aURyYWdFbGVtZW50KSB7XG4gICAgICAgICAgICB1bnNldFJlY3QobXVsdGlEcmFnRWxlbWVudCk7XG4gICAgICAgICAgfSk7XG4gICAgICAgIH0gLy8gUmVtb3ZlIGFsbCBhdXhpbGlhcnkgbXVsdGlkcmFnIGl0ZW1zIGZyb20gZWwsIGlmIHNvcnRpbmcgZW5hYmxlZFxuXG5cbiAgICAgICAgaWYgKF90aGlzMi5vcHRpb25zLnNvcnQpIHtcbiAgICAgICAgICByZW1vdmVNdWx0aURyYWdFbGVtZW50cygpO1xuICAgICAgICB9XG4gICAgICB9KTtcbiAgICB9LFxuICAgIGRyYWdPdmVyOiBmdW5jdGlvbiBkcmFnT3ZlcihfcmVmOCkge1xuICAgICAgdmFyIHRhcmdldCA9IF9yZWY4LnRhcmdldCxcbiAgICAgICAgICBjb21wbGV0ZWQgPSBfcmVmOC5jb21wbGV0ZWQsXG4gICAgICAgICAgY2FuY2VsID0gX3JlZjguY2FuY2VsO1xuXG4gICAgICBpZiAoZm9sZGluZyAmJiB+bXVsdGlEcmFnRWxlbWVudHMuaW5kZXhPZih0YXJnZXQpKSB7XG4gICAgICAgIGNvbXBsZXRlZChmYWxzZSk7XG4gICAgICAgIGNhbmNlbCgpO1xuICAgICAgfVxuICAgIH0sXG4gICAgcmV2ZXJ0OiBmdW5jdGlvbiByZXZlcnQoX3JlZjkpIHtcbiAgICAgIHZhciBmcm9tU29ydGFibGUgPSBfcmVmOS5mcm9tU29ydGFibGUsXG4gICAgICAgICAgcm9vdEVsID0gX3JlZjkucm9vdEVsLFxuICAgICAgICAgIHNvcnRhYmxlID0gX3JlZjkuc29ydGFibGUsXG4gICAgICAgICAgZHJhZ1JlY3QgPSBfcmVmOS5kcmFnUmVjdDtcblxuICAgICAgaWYgKG11bHRpRHJhZ0VsZW1lbnRzLmxlbmd0aCA+IDEpIHtcbiAgICAgICAgLy8gU2V0dXAgdW5mb2xkIGFuaW1hdGlvblxuICAgICAgICBtdWx0aURyYWdFbGVtZW50cy5mb3JFYWNoKGZ1bmN0aW9uIChtdWx0aURyYWdFbGVtZW50KSB7XG4gICAgICAgICAgc29ydGFibGUuYWRkQW5pbWF0aW9uU3RhdGUoe1xuICAgICAgICAgICAgdGFyZ2V0OiBtdWx0aURyYWdFbGVtZW50LFxuICAgICAgICAgICAgcmVjdDogZm9sZGluZyA/IGdldFJlY3QobXVsdGlEcmFnRWxlbWVudCkgOiBkcmFnUmVjdFxuICAgICAgICAgIH0pO1xuICAgICAgICAgIHVuc2V0UmVjdChtdWx0aURyYWdFbGVtZW50KTtcbiAgICAgICAgICBtdWx0aURyYWdFbGVtZW50LmZyb21SZWN0ID0gZHJhZ1JlY3Q7XG4gICAgICAgICAgZnJvbVNvcnRhYmxlLnJlbW92ZUFuaW1hdGlvblN0YXRlKG11bHRpRHJhZ0VsZW1lbnQpO1xuICAgICAgICB9KTtcbiAgICAgICAgZm9sZGluZyA9IGZhbHNlO1xuICAgICAgICBpbnNlcnRNdWx0aURyYWdFbGVtZW50cyghdGhpcy5vcHRpb25zLnJlbW92ZUNsb25lT25IaWRlLCByb290RWwpO1xuICAgICAgfVxuICAgIH0sXG4gICAgZHJhZ092ZXJDb21wbGV0ZWQ6IGZ1bmN0aW9uIGRyYWdPdmVyQ29tcGxldGVkKF9yZWYxMCkge1xuICAgICAgdmFyIHNvcnRhYmxlID0gX3JlZjEwLnNvcnRhYmxlLFxuICAgICAgICAgIGlzT3duZXIgPSBfcmVmMTAuaXNPd25lcixcbiAgICAgICAgICBpbnNlcnRpb24gPSBfcmVmMTAuaW5zZXJ0aW9uLFxuICAgICAgICAgIGFjdGl2ZVNvcnRhYmxlID0gX3JlZjEwLmFjdGl2ZVNvcnRhYmxlLFxuICAgICAgICAgIHBhcmVudEVsID0gX3JlZjEwLnBhcmVudEVsLFxuICAgICAgICAgIHB1dFNvcnRhYmxlID0gX3JlZjEwLnB1dFNvcnRhYmxlO1xuICAgICAgdmFyIG9wdGlvbnMgPSB0aGlzLm9wdGlvbnM7XG5cbiAgICAgIGlmIChpbnNlcnRpb24pIHtcbiAgICAgICAgLy8gQ2xvbmVzIG11c3QgYmUgaGlkZGVuIGJlZm9yZSBmb2xkaW5nIGFuaW1hdGlvbiB0byBjYXB0dXJlIGRyYWdSZWN0QWJzb2x1dGUgcHJvcGVybHlcbiAgICAgICAgaWYgKGlzT3duZXIpIHtcbiAgICAgICAgICBhY3RpdmVTb3J0YWJsZS5faGlkZUNsb25lKCk7XG4gICAgICAgIH1cblxuICAgICAgICBpbml0aWFsRm9sZGluZyA9IGZhbHNlOyAvLyBJZiBsZWF2aW5nIHNvcnQ6ZmFsc2Ugcm9vdCwgb3IgYWxyZWFkeSBmb2xkaW5nIC0gRm9sZCB0byBuZXcgbG9jYXRpb25cblxuICAgICAgICBpZiAob3B0aW9ucy5hbmltYXRpb24gJiYgbXVsdGlEcmFnRWxlbWVudHMubGVuZ3RoID4gMSAmJiAoZm9sZGluZyB8fCAhaXNPd25lciAmJiAhYWN0aXZlU29ydGFibGUub3B0aW9ucy5zb3J0ICYmICFwdXRTb3J0YWJsZSkpIHtcbiAgICAgICAgICAvLyBGb2xkOiBTZXQgYWxsIG11bHRpIGRyYWcgZWxlbWVudHMncyByZWN0cyB0byBkcmFnRWwncyByZWN0IHdoZW4gbXVsdGktZHJhZyBlbGVtZW50cyBhcmUgaW52aXNpYmxlXG4gICAgICAgICAgdmFyIGRyYWdSZWN0QWJzb2x1dGUgPSBnZXRSZWN0KGRyYWdFbCQxLCBmYWxzZSwgdHJ1ZSwgdHJ1ZSk7XG4gICAgICAgICAgbXVsdGlEcmFnRWxlbWVudHMuZm9yRWFjaChmdW5jdGlvbiAobXVsdGlEcmFnRWxlbWVudCkge1xuICAgICAgICAgICAgaWYgKG11bHRpRHJhZ0VsZW1lbnQgPT09IGRyYWdFbCQxKSByZXR1cm47XG4gICAgICAgICAgICBzZXRSZWN0KG11bHRpRHJhZ0VsZW1lbnQsIGRyYWdSZWN0QWJzb2x1dGUpOyAvLyBNb3ZlIGVsZW1lbnQocykgdG8gZW5kIG9mIHBhcmVudEVsIHNvIHRoYXQgaXQgZG9lcyBub3QgaW50ZXJmZXJlIHdpdGggbXVsdGktZHJhZyBjbG9uZXMgaW5zZXJ0aW9uIGlmIHRoZXkgYXJlIGluc2VydGVkXG4gICAgICAgICAgICAvLyB3aGlsZSBmb2xkaW5nLCBhbmQgc28gdGhhdCB3ZSBjYW4gY2FwdHVyZSB0aGVtIGFnYWluIGJlY2F1c2Ugb2xkIHNvcnRhYmxlIHdpbGwgbm8gbG9uZ2VyIGJlIGZyb21Tb3J0YWJsZVxuXG4gICAgICAgICAgICBwYXJlbnRFbC5hcHBlbmRDaGlsZChtdWx0aURyYWdFbGVtZW50KTtcbiAgICAgICAgICB9KTtcbiAgICAgICAgICBmb2xkaW5nID0gdHJ1ZTtcbiAgICAgICAgfSAvLyBDbG9uZXMgbXVzdCBiZSBzaG93biAoYW5kIGNoZWNrIHRvIHJlbW92ZSBtdWx0aSBkcmFncykgYWZ0ZXIgZm9sZGluZyB3aGVuIGludGVyZmVyaW5nIG11bHRpRHJhZ0VsZW1lbnRzIGFyZSBtb3ZlZCBvdXRcblxuXG4gICAgICAgIGlmICghaXNPd25lcikge1xuICAgICAgICAgIC8vIE9ubHkgcmVtb3ZlIGlmIG5vdCBmb2xkaW5nIChmb2xkaW5nIHdpbGwgcmVtb3ZlIHRoZW0gYW55d2F5cylcbiAgICAgICAgICBpZiAoIWZvbGRpbmcpIHtcbiAgICAgICAgICAgIHJlbW92ZU11bHRpRHJhZ0VsZW1lbnRzKCk7XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgaWYgKG11bHRpRHJhZ0VsZW1lbnRzLmxlbmd0aCA+IDEpIHtcbiAgICAgICAgICAgIHZhciBjbG9uZXNIaWRkZW5CZWZvcmUgPSBjbG9uZXNIaWRkZW47XG5cbiAgICAgICAgICAgIGFjdGl2ZVNvcnRhYmxlLl9zaG93Q2xvbmUoc29ydGFibGUpOyAvLyBVbmZvbGQgYW5pbWF0aW9uIGZvciBjbG9uZXMgaWYgc2hvd2luZyBmcm9tIGhpZGRlblxuXG5cbiAgICAgICAgICAgIGlmIChhY3RpdmVTb3J0YWJsZS5vcHRpb25zLmFuaW1hdGlvbiAmJiAhY2xvbmVzSGlkZGVuICYmIGNsb25lc0hpZGRlbkJlZm9yZSkge1xuICAgICAgICAgICAgICBtdWx0aURyYWdDbG9uZXMuZm9yRWFjaChmdW5jdGlvbiAoY2xvbmUpIHtcbiAgICAgICAgICAgICAgICBhY3RpdmVTb3J0YWJsZS5hZGRBbmltYXRpb25TdGF0ZSh7XG4gICAgICAgICAgICAgICAgICB0YXJnZXQ6IGNsb25lLFxuICAgICAgICAgICAgICAgICAgcmVjdDogY2xvbmVzRnJvbVJlY3RcbiAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICBjbG9uZS5mcm9tUmVjdCA9IGNsb25lc0Zyb21SZWN0O1xuICAgICAgICAgICAgICAgIGNsb25lLnRoaXNBbmltYXRpb25EdXJhdGlvbiA9IG51bGw7XG4gICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBhY3RpdmVTb3J0YWJsZS5fc2hvd0Nsb25lKHNvcnRhYmxlKTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9LFxuICAgIGRyYWdPdmVyQW5pbWF0aW9uQ2FwdHVyZTogZnVuY3Rpb24gZHJhZ092ZXJBbmltYXRpb25DYXB0dXJlKF9yZWYxMSkge1xuICAgICAgdmFyIGRyYWdSZWN0ID0gX3JlZjExLmRyYWdSZWN0LFxuICAgICAgICAgIGlzT3duZXIgPSBfcmVmMTEuaXNPd25lcixcbiAgICAgICAgICBhY3RpdmVTb3J0YWJsZSA9IF9yZWYxMS5hY3RpdmVTb3J0YWJsZTtcbiAgICAgIG11bHRpRHJhZ0VsZW1lbnRzLmZvckVhY2goZnVuY3Rpb24gKG11bHRpRHJhZ0VsZW1lbnQpIHtcbiAgICAgICAgbXVsdGlEcmFnRWxlbWVudC50aGlzQW5pbWF0aW9uRHVyYXRpb24gPSBudWxsO1xuICAgICAgfSk7XG5cbiAgICAgIGlmIChhY3RpdmVTb3J0YWJsZS5vcHRpb25zLmFuaW1hdGlvbiAmJiAhaXNPd25lciAmJiBhY3RpdmVTb3J0YWJsZS5tdWx0aURyYWcuaXNNdWx0aURyYWcpIHtcbiAgICAgICAgY2xvbmVzRnJvbVJlY3QgPSBfZXh0ZW5kcyh7fSwgZHJhZ1JlY3QpO1xuICAgICAgICB2YXIgZHJhZ01hdHJpeCA9IG1hdHJpeChkcmFnRWwkMSwgdHJ1ZSk7XG4gICAgICAgIGNsb25lc0Zyb21SZWN0LnRvcCAtPSBkcmFnTWF0cml4LmY7XG4gICAgICAgIGNsb25lc0Zyb21SZWN0LmxlZnQgLT0gZHJhZ01hdHJpeC5lO1xuICAgICAgfVxuICAgIH0sXG4gICAgZHJhZ092ZXJBbmltYXRpb25Db21wbGV0ZTogZnVuY3Rpb24gZHJhZ092ZXJBbmltYXRpb25Db21wbGV0ZSgpIHtcbiAgICAgIGlmIChmb2xkaW5nKSB7XG4gICAgICAgIGZvbGRpbmcgPSBmYWxzZTtcbiAgICAgICAgcmVtb3ZlTXVsdGlEcmFnRWxlbWVudHMoKTtcbiAgICAgIH1cbiAgICB9LFxuICAgIGRyb3A6IGZ1bmN0aW9uIGRyb3AoX3JlZjEyKSB7XG4gICAgICB2YXIgZXZ0ID0gX3JlZjEyLm9yaWdpbmFsRXZlbnQsXG4gICAgICAgICAgcm9vdEVsID0gX3JlZjEyLnJvb3RFbCxcbiAgICAgICAgICBwYXJlbnRFbCA9IF9yZWYxMi5wYXJlbnRFbCxcbiAgICAgICAgICBzb3J0YWJsZSA9IF9yZWYxMi5zb3J0YWJsZSxcbiAgICAgICAgICBkaXNwYXRjaFNvcnRhYmxlRXZlbnQgPSBfcmVmMTIuZGlzcGF0Y2hTb3J0YWJsZUV2ZW50LFxuICAgICAgICAgIG9sZEluZGV4ID0gX3JlZjEyLm9sZEluZGV4LFxuICAgICAgICAgIHB1dFNvcnRhYmxlID0gX3JlZjEyLnB1dFNvcnRhYmxlO1xuICAgICAgdmFyIHRvU29ydGFibGUgPSBwdXRTb3J0YWJsZSB8fCB0aGlzLnNvcnRhYmxlO1xuICAgICAgaWYgKCFldnQpIHJldHVybjtcbiAgICAgIHZhciBvcHRpb25zID0gdGhpcy5vcHRpb25zLFxuICAgICAgICAgIGNoaWxkcmVuID0gcGFyZW50RWwuY2hpbGRyZW47IC8vIE11bHRpLWRyYWcgc2VsZWN0aW9uXG5cbiAgICAgIGlmICghZHJhZ1N0YXJ0ZWQpIHtcbiAgICAgICAgaWYgKG9wdGlvbnMubXVsdGlEcmFnS2V5ICYmICF0aGlzLm11bHRpRHJhZ0tleURvd24pIHtcbiAgICAgICAgICB0aGlzLl9kZXNlbGVjdE11bHRpRHJhZygpO1xuICAgICAgICB9XG5cbiAgICAgICAgdG9nZ2xlQ2xhc3MoZHJhZ0VsJDEsIG9wdGlvbnMuc2VsZWN0ZWRDbGFzcywgIX5tdWx0aURyYWdFbGVtZW50cy5pbmRleE9mKGRyYWdFbCQxKSk7XG5cbiAgICAgICAgaWYgKCF+bXVsdGlEcmFnRWxlbWVudHMuaW5kZXhPZihkcmFnRWwkMSkpIHtcbiAgICAgICAgICBtdWx0aURyYWdFbGVtZW50cy5wdXNoKGRyYWdFbCQxKTtcbiAgICAgICAgICBkaXNwYXRjaEV2ZW50KHtcbiAgICAgICAgICAgIHNvcnRhYmxlOiBzb3J0YWJsZSxcbiAgICAgICAgICAgIHJvb3RFbDogcm9vdEVsLFxuICAgICAgICAgICAgbmFtZTogJ3NlbGVjdCcsXG4gICAgICAgICAgICB0YXJnZXRFbDogZHJhZ0VsJDEsXG4gICAgICAgICAgICBvcmlnaW5hbEV2dDogZXZ0XG4gICAgICAgICAgfSk7IC8vIE1vZGlmaWVyIGFjdGl2YXRlZCwgc2VsZWN0IGZyb20gbGFzdCB0byBkcmFnRWxcblxuICAgICAgICAgIGlmIChldnQuc2hpZnRLZXkgJiYgbGFzdE11bHRpRHJhZ1NlbGVjdCAmJiBzb3J0YWJsZS5lbC5jb250YWlucyhsYXN0TXVsdGlEcmFnU2VsZWN0KSkge1xuICAgICAgICAgICAgdmFyIGxhc3RJbmRleCA9IGluZGV4KGxhc3RNdWx0aURyYWdTZWxlY3QpLFxuICAgICAgICAgICAgICAgIGN1cnJlbnRJbmRleCA9IGluZGV4KGRyYWdFbCQxKTtcblxuICAgICAgICAgICAgaWYgKH5sYXN0SW5kZXggJiYgfmN1cnJlbnRJbmRleCAmJiBsYXN0SW5kZXggIT09IGN1cnJlbnRJbmRleCkge1xuICAgICAgICAgICAgICAvLyBNdXN0IGluY2x1ZGUgbGFzdE11bHRpRHJhZ1NlbGVjdCAoc2VsZWN0IGl0KSwgaW4gY2FzZSBtb2RpZmllZCBzZWxlY3Rpb24gZnJvbSBubyBzZWxlY3Rpb25cbiAgICAgICAgICAgICAgLy8gKGJ1dCBwcmV2aW91cyBzZWxlY3Rpb24gZXhpc3RlZClcbiAgICAgICAgICAgICAgdmFyIG4sIGk7XG5cbiAgICAgICAgICAgICAgaWYgKGN1cnJlbnRJbmRleCA+IGxhc3RJbmRleCkge1xuICAgICAgICAgICAgICAgIGkgPSBsYXN0SW5kZXg7XG4gICAgICAgICAgICAgICAgbiA9IGN1cnJlbnRJbmRleDtcbiAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICBpID0gY3VycmVudEluZGV4O1xuICAgICAgICAgICAgICAgIG4gPSBsYXN0SW5kZXggKyAxO1xuICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgZm9yICg7IGkgPCBuOyBpKyspIHtcbiAgICAgICAgICAgICAgICBpZiAofm11bHRpRHJhZ0VsZW1lbnRzLmluZGV4T2YoY2hpbGRyZW5baV0pKSBjb250aW51ZTtcbiAgICAgICAgICAgICAgICB0b2dnbGVDbGFzcyhjaGlsZHJlbltpXSwgb3B0aW9ucy5zZWxlY3RlZENsYXNzLCB0cnVlKTtcbiAgICAgICAgICAgICAgICBtdWx0aURyYWdFbGVtZW50cy5wdXNoKGNoaWxkcmVuW2ldKTtcbiAgICAgICAgICAgICAgICBkaXNwYXRjaEV2ZW50KHtcbiAgICAgICAgICAgICAgICAgIHNvcnRhYmxlOiBzb3J0YWJsZSxcbiAgICAgICAgICAgICAgICAgIHJvb3RFbDogcm9vdEVsLFxuICAgICAgICAgICAgICAgICAgbmFtZTogJ3NlbGVjdCcsXG4gICAgICAgICAgICAgICAgICB0YXJnZXRFbDogY2hpbGRyZW5baV0sXG4gICAgICAgICAgICAgICAgICBvcmlnaW5hbEV2dDogZXZ0XG4gICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgbGFzdE11bHRpRHJhZ1NlbGVjdCA9IGRyYWdFbCQxO1xuICAgICAgICAgIH1cblxuICAgICAgICAgIG11bHRpRHJhZ1NvcnRhYmxlID0gdG9Tb3J0YWJsZTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBtdWx0aURyYWdFbGVtZW50cy5zcGxpY2UobXVsdGlEcmFnRWxlbWVudHMuaW5kZXhPZihkcmFnRWwkMSksIDEpO1xuICAgICAgICAgIGxhc3RNdWx0aURyYWdTZWxlY3QgPSBudWxsO1xuICAgICAgICAgIGRpc3BhdGNoRXZlbnQoe1xuICAgICAgICAgICAgc29ydGFibGU6IHNvcnRhYmxlLFxuICAgICAgICAgICAgcm9vdEVsOiByb290RWwsXG4gICAgICAgICAgICBuYW1lOiAnZGVzZWxlY3QnLFxuICAgICAgICAgICAgdGFyZ2V0RWw6IGRyYWdFbCQxLFxuICAgICAgICAgICAgb3JpZ2luYWxFdnQ6IGV2dFxuICAgICAgICAgIH0pO1xuICAgICAgICB9XG4gICAgICB9IC8vIE11bHRpLWRyYWcgZHJvcFxuXG5cbiAgICAgIGlmIChkcmFnU3RhcnRlZCAmJiB0aGlzLmlzTXVsdGlEcmFnKSB7XG4gICAgICAgIGZvbGRpbmcgPSBmYWxzZTsgLy8gRG8gbm90IFwidW5mb2xkXCIgYWZ0ZXIgYXJvdW5kIGRyYWdFbCBpZiByZXZlcnRlZFxuXG4gICAgICAgIGlmICgocGFyZW50RWxbZXhwYW5kb10ub3B0aW9ucy5zb3J0IHx8IHBhcmVudEVsICE9PSByb290RWwpICYmIG11bHRpRHJhZ0VsZW1lbnRzLmxlbmd0aCA+IDEpIHtcbiAgICAgICAgICB2YXIgZHJhZ1JlY3QgPSBnZXRSZWN0KGRyYWdFbCQxKSxcbiAgICAgICAgICAgICAgbXVsdGlEcmFnSW5kZXggPSBpbmRleChkcmFnRWwkMSwgJzpub3QoLicgKyB0aGlzLm9wdGlvbnMuc2VsZWN0ZWRDbGFzcyArICcpJyk7XG4gICAgICAgICAgaWYgKCFpbml0aWFsRm9sZGluZyAmJiBvcHRpb25zLmFuaW1hdGlvbikgZHJhZ0VsJDEudGhpc0FuaW1hdGlvbkR1cmF0aW9uID0gbnVsbDtcbiAgICAgICAgICB0b1NvcnRhYmxlLmNhcHR1cmVBbmltYXRpb25TdGF0ZSgpO1xuXG4gICAgICAgICAgaWYgKCFpbml0aWFsRm9sZGluZykge1xuICAgICAgICAgICAgaWYgKG9wdGlvbnMuYW5pbWF0aW9uKSB7XG4gICAgICAgICAgICAgIGRyYWdFbCQxLmZyb21SZWN0ID0gZHJhZ1JlY3Q7XG4gICAgICAgICAgICAgIG11bHRpRHJhZ0VsZW1lbnRzLmZvckVhY2goZnVuY3Rpb24gKG11bHRpRHJhZ0VsZW1lbnQpIHtcbiAgICAgICAgICAgICAgICBtdWx0aURyYWdFbGVtZW50LnRoaXNBbmltYXRpb25EdXJhdGlvbiA9IG51bGw7XG5cbiAgICAgICAgICAgICAgICBpZiAobXVsdGlEcmFnRWxlbWVudCAhPT0gZHJhZ0VsJDEpIHtcbiAgICAgICAgICAgICAgICAgIHZhciByZWN0ID0gZm9sZGluZyA/IGdldFJlY3QobXVsdGlEcmFnRWxlbWVudCkgOiBkcmFnUmVjdDtcbiAgICAgICAgICAgICAgICAgIG11bHRpRHJhZ0VsZW1lbnQuZnJvbVJlY3QgPSByZWN0OyAvLyBQcmVwYXJlIHVuZm9sZCBhbmltYXRpb25cblxuICAgICAgICAgICAgICAgICAgdG9Tb3J0YWJsZS5hZGRBbmltYXRpb25TdGF0ZSh7XG4gICAgICAgICAgICAgICAgICAgIHRhcmdldDogbXVsdGlEcmFnRWxlbWVudCxcbiAgICAgICAgICAgICAgICAgICAgcmVjdDogcmVjdFxuICAgICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIH0gLy8gTXVsdGkgZHJhZyBlbGVtZW50cyBhcmUgbm90IG5lY2Vzc2FyaWx5IHJlbW92ZWQgZnJvbSB0aGUgRE9NIG9uIGRyb3AsIHNvIHRvIHJlaW5zZXJ0XG4gICAgICAgICAgICAvLyBwcm9wZXJseSB0aGV5IG11c3QgYWxsIGJlIHJlbW92ZWRcblxuXG4gICAgICAgICAgICByZW1vdmVNdWx0aURyYWdFbGVtZW50cygpO1xuICAgICAgICAgICAgbXVsdGlEcmFnRWxlbWVudHMuZm9yRWFjaChmdW5jdGlvbiAobXVsdGlEcmFnRWxlbWVudCkge1xuICAgICAgICAgICAgICBpZiAoY2hpbGRyZW5bbXVsdGlEcmFnSW5kZXhdKSB7XG4gICAgICAgICAgICAgICAgcGFyZW50RWwuaW5zZXJ0QmVmb3JlKG11bHRpRHJhZ0VsZW1lbnQsIGNoaWxkcmVuW211bHRpRHJhZ0luZGV4XSk7XG4gICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgcGFyZW50RWwuYXBwZW5kQ2hpbGQobXVsdGlEcmFnRWxlbWVudCk7XG4gICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICBtdWx0aURyYWdJbmRleCsrO1xuICAgICAgICAgICAgfSk7IC8vIElmIGluaXRpYWwgZm9sZGluZyBpcyBkb25lLCB0aGUgZWxlbWVudHMgbWF5IGhhdmUgY2hhbmdlZCBwb3NpdGlvbiBiZWNhdXNlIHRoZXkgYXJlIG5vd1xuICAgICAgICAgICAgLy8gdW5mb2xkaW5nIGFyb3VuZCBkcmFnRWwsIGV2ZW4gdGhvdWdoIGRyYWdFbCBtYXkgbm90IGhhdmUgaGlzIGluZGV4IGNoYW5nZWQsIHNvIHVwZGF0ZSBldmVudFxuICAgICAgICAgICAgLy8gbXVzdCBiZSBmaXJlZCBoZXJlIGFzIFNvcnRhYmxlIHdpbGwgbm90LlxuXG4gICAgICAgICAgICBpZiAob2xkSW5kZXggPT09IGluZGV4KGRyYWdFbCQxKSkge1xuICAgICAgICAgICAgICB2YXIgdXBkYXRlID0gZmFsc2U7XG4gICAgICAgICAgICAgIG11bHRpRHJhZ0VsZW1lbnRzLmZvckVhY2goZnVuY3Rpb24gKG11bHRpRHJhZ0VsZW1lbnQpIHtcbiAgICAgICAgICAgICAgICBpZiAobXVsdGlEcmFnRWxlbWVudC5zb3J0YWJsZUluZGV4ICE9PSBpbmRleChtdWx0aURyYWdFbGVtZW50KSkge1xuICAgICAgICAgICAgICAgICAgdXBkYXRlID0gdHJ1ZTtcbiAgICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgIH0pO1xuXG4gICAgICAgICAgICAgIGlmICh1cGRhdGUpIHtcbiAgICAgICAgICAgICAgICBkaXNwYXRjaFNvcnRhYmxlRXZlbnQoJ3VwZGF0ZScpO1xuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfSAvLyBNdXN0IGJlIGRvbmUgYWZ0ZXIgY2FwdHVyaW5nIGluZGl2aWR1YWwgcmVjdHMgKHNjcm9sbCBiYXIpXG5cblxuICAgICAgICAgIG11bHRpRHJhZ0VsZW1lbnRzLmZvckVhY2goZnVuY3Rpb24gKG11bHRpRHJhZ0VsZW1lbnQpIHtcbiAgICAgICAgICAgIHVuc2V0UmVjdChtdWx0aURyYWdFbGVtZW50KTtcbiAgICAgICAgICB9KTtcbiAgICAgICAgICB0b1NvcnRhYmxlLmFuaW1hdGVBbGwoKTtcbiAgICAgICAgfVxuXG4gICAgICAgIG11bHRpRHJhZ1NvcnRhYmxlID0gdG9Tb3J0YWJsZTtcbiAgICAgIH0gLy8gUmVtb3ZlIGNsb25lcyBpZiBuZWNlc3NhcnlcblxuXG4gICAgICBpZiAocm9vdEVsID09PSBwYXJlbnRFbCB8fCBwdXRTb3J0YWJsZSAmJiBwdXRTb3J0YWJsZS5sYXN0UHV0TW9kZSAhPT0gJ2Nsb25lJykge1xuICAgICAgICBtdWx0aURyYWdDbG9uZXMuZm9yRWFjaChmdW5jdGlvbiAoY2xvbmUpIHtcbiAgICAgICAgICBjbG9uZS5wYXJlbnROb2RlICYmIGNsb25lLnBhcmVudE5vZGUucmVtb3ZlQ2hpbGQoY2xvbmUpO1xuICAgICAgICB9KTtcbiAgICAgIH1cbiAgICB9LFxuICAgIG51bGxpbmdHbG9iYWw6IGZ1bmN0aW9uIG51bGxpbmdHbG9iYWwoKSB7XG4gICAgICB0aGlzLmlzTXVsdGlEcmFnID0gZHJhZ1N0YXJ0ZWQgPSBmYWxzZTtcbiAgICAgIG11bHRpRHJhZ0Nsb25lcy5sZW5ndGggPSAwO1xuICAgIH0sXG4gICAgZGVzdHJveUdsb2JhbDogZnVuY3Rpb24gZGVzdHJveUdsb2JhbCgpIHtcbiAgICAgIHRoaXMuX2Rlc2VsZWN0TXVsdGlEcmFnKCk7XG5cbiAgICAgIG9mZihkb2N1bWVudCwgJ3BvaW50ZXJ1cCcsIHRoaXMuX2Rlc2VsZWN0TXVsdGlEcmFnKTtcbiAgICAgIG9mZihkb2N1bWVudCwgJ21vdXNldXAnLCB0aGlzLl9kZXNlbGVjdE11bHRpRHJhZyk7XG4gICAgICBvZmYoZG9jdW1lbnQsICd0b3VjaGVuZCcsIHRoaXMuX2Rlc2VsZWN0TXVsdGlEcmFnKTtcbiAgICAgIG9mZihkb2N1bWVudCwgJ2tleWRvd24nLCB0aGlzLl9jaGVja0tleURvd24pO1xuICAgICAgb2ZmKGRvY3VtZW50LCAna2V5dXAnLCB0aGlzLl9jaGVja0tleVVwKTtcbiAgICB9LFxuICAgIF9kZXNlbGVjdE11bHRpRHJhZzogZnVuY3Rpb24gX2Rlc2VsZWN0TXVsdGlEcmFnKGV2dCkge1xuICAgICAgaWYgKHR5cGVvZiBkcmFnU3RhcnRlZCAhPT0gXCJ1bmRlZmluZWRcIiAmJiBkcmFnU3RhcnRlZCkgcmV0dXJuOyAvLyBPbmx5IGRlc2VsZWN0IGlmIHNlbGVjdGlvbiBpcyBpbiB0aGlzIHNvcnRhYmxlXG5cbiAgICAgIGlmIChtdWx0aURyYWdTb3J0YWJsZSAhPT0gdGhpcy5zb3J0YWJsZSkgcmV0dXJuOyAvLyBPbmx5IGRlc2VsZWN0IGlmIHRhcmdldCBpcyBub3QgaXRlbSBpbiB0aGlzIHNvcnRhYmxlXG5cbiAgICAgIGlmIChldnQgJiYgY2xvc2VzdChldnQudGFyZ2V0LCB0aGlzLm9wdGlvbnMuZHJhZ2dhYmxlLCB0aGlzLnNvcnRhYmxlLmVsLCBmYWxzZSkpIHJldHVybjsgLy8gT25seSBkZXNlbGVjdCBpZiBsZWZ0IGNsaWNrXG5cbiAgICAgIGlmIChldnQgJiYgZXZ0LmJ1dHRvbiAhPT0gMCkgcmV0dXJuO1xuXG4gICAgICB3aGlsZSAobXVsdGlEcmFnRWxlbWVudHMubGVuZ3RoKSB7XG4gICAgICAgIHZhciBlbCA9IG11bHRpRHJhZ0VsZW1lbnRzWzBdO1xuICAgICAgICB0b2dnbGVDbGFzcyhlbCwgdGhpcy5vcHRpb25zLnNlbGVjdGVkQ2xhc3MsIGZhbHNlKTtcbiAgICAgICAgbXVsdGlEcmFnRWxlbWVudHMuc2hpZnQoKTtcbiAgICAgICAgZGlzcGF0Y2hFdmVudCh7XG4gICAgICAgICAgc29ydGFibGU6IHRoaXMuc29ydGFibGUsXG4gICAgICAgICAgcm9vdEVsOiB0aGlzLnNvcnRhYmxlLmVsLFxuICAgICAgICAgIG5hbWU6ICdkZXNlbGVjdCcsXG4gICAgICAgICAgdGFyZ2V0RWw6IGVsLFxuICAgICAgICAgIG9yaWdpbmFsRXZ0OiBldnRcbiAgICAgICAgfSk7XG4gICAgICB9XG4gICAgfSxcbiAgICBfY2hlY2tLZXlEb3duOiBmdW5jdGlvbiBfY2hlY2tLZXlEb3duKGV2dCkge1xuICAgICAgaWYgKGV2dC5rZXkgPT09IHRoaXMub3B0aW9ucy5tdWx0aURyYWdLZXkpIHtcbiAgICAgICAgdGhpcy5tdWx0aURyYWdLZXlEb3duID0gdHJ1ZTtcbiAgICAgIH1cbiAgICB9LFxuICAgIF9jaGVja0tleVVwOiBmdW5jdGlvbiBfY2hlY2tLZXlVcChldnQpIHtcbiAgICAgIGlmIChldnQua2V5ID09PSB0aGlzLm9wdGlvbnMubXVsdGlEcmFnS2V5KSB7XG4gICAgICAgIHRoaXMubXVsdGlEcmFnS2V5RG93biA9IGZhbHNlO1xuICAgICAgfVxuICAgIH1cbiAgfTtcbiAgcmV0dXJuIF9leHRlbmRzKE11bHRpRHJhZywge1xuICAgIC8vIFN0YXRpYyBtZXRob2RzICYgcHJvcGVydGllc1xuICAgIHBsdWdpbk5hbWU6ICdtdWx0aURyYWcnLFxuICAgIHV0aWxzOiB7XG4gICAgICAvKipcbiAgICAgICAqIFNlbGVjdHMgdGhlIHByb3ZpZGVkIG11bHRpLWRyYWcgaXRlbVxuICAgICAgICogQHBhcmFtICB7SFRNTEVsZW1lbnR9IGVsICAgIFRoZSBlbGVtZW50IHRvIGJlIHNlbGVjdGVkXG4gICAgICAgKi9cbiAgICAgIHNlbGVjdDogZnVuY3Rpb24gc2VsZWN0KGVsKSB7XG4gICAgICAgIHZhciBzb3J0YWJsZSA9IGVsLnBhcmVudE5vZGVbZXhwYW5kb107XG4gICAgICAgIGlmICghc29ydGFibGUgfHwgIXNvcnRhYmxlLm9wdGlvbnMubXVsdGlEcmFnIHx8IH5tdWx0aURyYWdFbGVtZW50cy5pbmRleE9mKGVsKSkgcmV0dXJuO1xuXG4gICAgICAgIGlmIChtdWx0aURyYWdTb3J0YWJsZSAmJiBtdWx0aURyYWdTb3J0YWJsZSAhPT0gc29ydGFibGUpIHtcbiAgICAgICAgICBtdWx0aURyYWdTb3J0YWJsZS5tdWx0aURyYWcuX2Rlc2VsZWN0TXVsdGlEcmFnKCk7XG5cbiAgICAgICAgICBtdWx0aURyYWdTb3J0YWJsZSA9IHNvcnRhYmxlO1xuICAgICAgICB9XG5cbiAgICAgICAgdG9nZ2xlQ2xhc3MoZWwsIHNvcnRhYmxlLm9wdGlvbnMuc2VsZWN0ZWRDbGFzcywgdHJ1ZSk7XG4gICAgICAgIG11bHRpRHJhZ0VsZW1lbnRzLnB1c2goZWwpO1xuICAgICAgfSxcblxuICAgICAgLyoqXG4gICAgICAgKiBEZXNlbGVjdHMgdGhlIHByb3ZpZGVkIG11bHRpLWRyYWcgaXRlbVxuICAgICAgICogQHBhcmFtICB7SFRNTEVsZW1lbnR9IGVsICAgIFRoZSBlbGVtZW50IHRvIGJlIGRlc2VsZWN0ZWRcbiAgICAgICAqL1xuICAgICAgZGVzZWxlY3Q6IGZ1bmN0aW9uIGRlc2VsZWN0KGVsKSB7XG4gICAgICAgIHZhciBzb3J0YWJsZSA9IGVsLnBhcmVudE5vZGVbZXhwYW5kb10sXG4gICAgICAgICAgICBpbmRleCA9IG11bHRpRHJhZ0VsZW1lbnRzLmluZGV4T2YoZWwpO1xuICAgICAgICBpZiAoIXNvcnRhYmxlIHx8ICFzb3J0YWJsZS5vcHRpb25zLm11bHRpRHJhZyB8fCAhfmluZGV4KSByZXR1cm47XG4gICAgICAgIHRvZ2dsZUNsYXNzKGVsLCBzb3J0YWJsZS5vcHRpb25zLnNlbGVjdGVkQ2xhc3MsIGZhbHNlKTtcbiAgICAgICAgbXVsdGlEcmFnRWxlbWVudHMuc3BsaWNlKGluZGV4LCAxKTtcbiAgICAgIH1cbiAgICB9LFxuICAgIGV2ZW50UHJvcGVydGllczogZnVuY3Rpb24gZXZlbnRQcm9wZXJ0aWVzKCkge1xuICAgICAgdmFyIF90aGlzMyA9IHRoaXM7XG5cbiAgICAgIHZhciBvbGRJbmRpY2llcyA9IFtdLFxuICAgICAgICAgIG5ld0luZGljaWVzID0gW107XG4gICAgICBtdWx0aURyYWdFbGVtZW50cy5mb3JFYWNoKGZ1bmN0aW9uIChtdWx0aURyYWdFbGVtZW50KSB7XG4gICAgICAgIG9sZEluZGljaWVzLnB1c2goe1xuICAgICAgICAgIG11bHRpRHJhZ0VsZW1lbnQ6IG11bHRpRHJhZ0VsZW1lbnQsXG4gICAgICAgICAgaW5kZXg6IG11bHRpRHJhZ0VsZW1lbnQuc29ydGFibGVJbmRleFxuICAgICAgICB9KTsgLy8gbXVsdGlEcmFnRWxlbWVudHMgd2lsbCBhbHJlYWR5IGJlIHNvcnRlZCBpZiBmb2xkaW5nXG5cbiAgICAgICAgdmFyIG5ld0luZGV4O1xuXG4gICAgICAgIGlmIChmb2xkaW5nICYmIG11bHRpRHJhZ0VsZW1lbnQgIT09IGRyYWdFbCQxKSB7XG4gICAgICAgICAgbmV3SW5kZXggPSAtMTtcbiAgICAgICAgfSBlbHNlIGlmIChmb2xkaW5nKSB7XG4gICAgICAgICAgbmV3SW5kZXggPSBpbmRleChtdWx0aURyYWdFbGVtZW50LCAnOm5vdCguJyArIF90aGlzMy5vcHRpb25zLnNlbGVjdGVkQ2xhc3MgKyAnKScpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIG5ld0luZGV4ID0gaW5kZXgobXVsdGlEcmFnRWxlbWVudCk7XG4gICAgICAgIH1cblxuICAgICAgICBuZXdJbmRpY2llcy5wdXNoKHtcbiAgICAgICAgICBtdWx0aURyYWdFbGVtZW50OiBtdWx0aURyYWdFbGVtZW50LFxuICAgICAgICAgIGluZGV4OiBuZXdJbmRleFxuICAgICAgICB9KTtcbiAgICAgIH0pO1xuICAgICAgcmV0dXJuIHtcbiAgICAgICAgaXRlbXM6IF90b0NvbnN1bWFibGVBcnJheShtdWx0aURyYWdFbGVtZW50cyksXG4gICAgICAgIGNsb25lczogW10uY29uY2F0KG11bHRpRHJhZ0Nsb25lcyksXG4gICAgICAgIG9sZEluZGljaWVzOiBvbGRJbmRpY2llcyxcbiAgICAgICAgbmV3SW5kaWNpZXM6IG5ld0luZGljaWVzXG4gICAgICB9O1xuICAgIH0sXG4gICAgb3B0aW9uTGlzdGVuZXJzOiB7XG4gICAgICBtdWx0aURyYWdLZXk6IGZ1bmN0aW9uIG11bHRpRHJhZ0tleShrZXkpIHtcbiAgICAgICAga2V5ID0ga2V5LnRvTG93ZXJDYXNlKCk7XG5cbiAgICAgICAgaWYgKGtleSA9PT0gJ2N0cmwnKSB7XG4gICAgICAgICAga2V5ID0gJ0NvbnRyb2wnO1xuICAgICAgICB9IGVsc2UgaWYgKGtleS5sZW5ndGggPiAxKSB7XG4gICAgICAgICAga2V5ID0ga2V5LmNoYXJBdCgwKS50b1VwcGVyQ2FzZSgpICsga2V5LnN1YnN0cigxKTtcbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiBrZXk7XG4gICAgICB9XG4gICAgfVxuICB9KTtcbn1cblxuZnVuY3Rpb24gaW5zZXJ0TXVsdGlEcmFnRWxlbWVudHMoY2xvbmVzSW5zZXJ0ZWQsIHJvb3RFbCkge1xuICBtdWx0aURyYWdFbGVtZW50cy5mb3JFYWNoKGZ1bmN0aW9uIChtdWx0aURyYWdFbGVtZW50LCBpKSB7XG4gICAgdmFyIHRhcmdldCA9IHJvb3RFbC5jaGlsZHJlblttdWx0aURyYWdFbGVtZW50LnNvcnRhYmxlSW5kZXggKyAoY2xvbmVzSW5zZXJ0ZWQgPyBOdW1iZXIoaSkgOiAwKV07XG5cbiAgICBpZiAodGFyZ2V0KSB7XG4gICAgICByb290RWwuaW5zZXJ0QmVmb3JlKG11bHRpRHJhZ0VsZW1lbnQsIHRhcmdldCk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHJvb3RFbC5hcHBlbmRDaGlsZChtdWx0aURyYWdFbGVtZW50KTtcbiAgICB9XG4gIH0pO1xufVxuLyoqXG4gKiBJbnNlcnQgbXVsdGktZHJhZyBjbG9uZXNcbiAqIEBwYXJhbSAge1tCb29sZWFuXX0gZWxlbWVudHNJbnNlcnRlZCAgV2hldGhlciB0aGUgbXVsdGktZHJhZyBlbGVtZW50cyBhcmUgaW5zZXJ0ZWRcbiAqIEBwYXJhbSAge0hUTUxFbGVtZW50fSByb290RWxcbiAqL1xuXG5cbmZ1bmN0aW9uIGluc2VydE11bHRpRHJhZ0Nsb25lcyhlbGVtZW50c0luc2VydGVkLCByb290RWwpIHtcbiAgbXVsdGlEcmFnQ2xvbmVzLmZvckVhY2goZnVuY3Rpb24gKGNsb25lLCBpKSB7XG4gICAgdmFyIHRhcmdldCA9IHJvb3RFbC5jaGlsZHJlbltjbG9uZS5zb3J0YWJsZUluZGV4ICsgKGVsZW1lbnRzSW5zZXJ0ZWQgPyBOdW1iZXIoaSkgOiAwKV07XG5cbiAgICBpZiAodGFyZ2V0KSB7XG4gICAgICByb290RWwuaW5zZXJ0QmVmb3JlKGNsb25lLCB0YXJnZXQpO1xuICAgIH0gZWxzZSB7XG4gICAgICByb290RWwuYXBwZW5kQ2hpbGQoY2xvbmUpO1xuICAgIH1cbiAgfSk7XG59XG5cbmZ1bmN0aW9uIHJlbW92ZU11bHRpRHJhZ0VsZW1lbnRzKCkge1xuICBtdWx0aURyYWdFbGVtZW50cy5mb3JFYWNoKGZ1bmN0aW9uIChtdWx0aURyYWdFbGVtZW50KSB7XG4gICAgaWYgKG11bHRpRHJhZ0VsZW1lbnQgPT09IGRyYWdFbCQxKSByZXR1cm47XG4gICAgbXVsdGlEcmFnRWxlbWVudC5wYXJlbnROb2RlICYmIG11bHRpRHJhZ0VsZW1lbnQucGFyZW50Tm9kZS5yZW1vdmVDaGlsZChtdWx0aURyYWdFbGVtZW50KTtcbiAgfSk7XG59XG5cblNvcnRhYmxlLm1vdW50KG5ldyBBdXRvU2Nyb2xsUGx1Z2luKCkpO1xuU29ydGFibGUubW91bnQoUmVtb3ZlLCBSZXZlcnQpO1xuXG5leHBvcnQgZGVmYXVsdCBTb3J0YWJsZTtcbmV4cG9ydCB7IE11bHRpRHJhZ1BsdWdpbiBhcyBNdWx0aURyYWcsIFNvcnRhYmxlLCBTd2FwUGx1Z2luIGFzIFN3YXAgfTtcbiIsInZhciBfX2RlZlByb3AgPSBPYmplY3QuZGVmaW5lUHJvcGVydHk7XG52YXIgX19kZWZQcm9wcyA9IE9iamVjdC5kZWZpbmVQcm9wZXJ0aWVzO1xudmFyIF9fZ2V0T3duUHJvcERlc2NzID0gT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcnM7XG52YXIgX19nZXRPd25Qcm9wU3ltYm9scyA9IE9iamVjdC5nZXRPd25Qcm9wZXJ0eVN5bWJvbHM7XG52YXIgX19oYXNPd25Qcm9wID0gT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eTtcbnZhciBfX3Byb3BJc0VudW0gPSBPYmplY3QucHJvdG90eXBlLnByb3BlcnR5SXNFbnVtZXJhYmxlO1xudmFyIF9fZGVmTm9ybWFsUHJvcCA9IChvYmosIGtleSwgdmFsdWUpID0+IGtleSBpbiBvYmogPyBfX2RlZlByb3Aob2JqLCBrZXksIHsgZW51bWVyYWJsZTogdHJ1ZSwgY29uZmlndXJhYmxlOiB0cnVlLCB3cml0YWJsZTogdHJ1ZSwgdmFsdWUgfSkgOiBvYmpba2V5XSA9IHZhbHVlO1xudmFyIF9fc3ByZWFkVmFsdWVzID0gKGEsIGIpID0+IHtcbiAgZm9yICh2YXIgcHJvcCBpbiBiIHx8IChiID0ge30pKVxuICAgIGlmIChfX2hhc093blByb3AuY2FsbChiLCBwcm9wKSlcbiAgICAgIF9fZGVmTm9ybWFsUHJvcChhLCBwcm9wLCBiW3Byb3BdKTtcbiAgaWYgKF9fZ2V0T3duUHJvcFN5bWJvbHMpXG4gICAgZm9yICh2YXIgcHJvcCBvZiBfX2dldE93blByb3BTeW1ib2xzKGIpKSB7XG4gICAgICBpZiAoX19wcm9wSXNFbnVtLmNhbGwoYiwgcHJvcCkpXG4gICAgICAgIF9fZGVmTm9ybWFsUHJvcChhLCBwcm9wLCBiW3Byb3BdKTtcbiAgICB9XG4gIHJldHVybiBhO1xufTtcbnZhciBfX3NwcmVhZFByb3BzID0gKGEsIGIpID0+IF9fZGVmUHJvcHMoYSwgX19nZXRPd25Qcm9wRGVzY3MoYikpO1xuaW1wb3J0IFNvcnRhYmxlIGZyb20gXCJzb3J0YWJsZWpzXCI7XG5pbXBvcnQgeyByZXNvbHZlQ29tcG9uZW50LCBUcmFuc2l0aW9uR3JvdXAsIGRlZmluZUNvbXBvbmVudCwgaCwgbmV4dFRpY2sgfSBmcm9tIFwidnVlXCI7XG5mdW5jdGlvbiByZW1vdmVOb2RlKG5vZGUpIHtcbiAgaWYgKG5vZGUucGFyZW50RWxlbWVudCAhPT0gbnVsbCkge1xuICAgIG5vZGUucGFyZW50RWxlbWVudC5yZW1vdmVDaGlsZChub2RlKTtcbiAgfVxufVxuZnVuY3Rpb24gaW5zZXJ0Tm9kZUF0KGZhdGhlck5vZGUsIG5vZGUsIHBvc2l0aW9uKSB7XG4gIGNvbnN0IHJlZk5vZGUgPSBwb3NpdGlvbiA9PT0gMCA/IGZhdGhlck5vZGUuY2hpbGRyZW5bMF0gOiBmYXRoZXJOb2RlLmNoaWxkcmVuW3Bvc2l0aW9uIC0gMV0ubmV4dFNpYmxpbmc7XG4gIGZhdGhlck5vZGUuaW5zZXJ0QmVmb3JlKG5vZGUsIHJlZk5vZGUpO1xufVxuZnVuY3Rpb24gZ2V0Q29uc29sZSgpIHtcbiAgaWYgKHR5cGVvZiB3aW5kb3cgIT09IFwidW5kZWZpbmVkXCIpIHtcbiAgICByZXR1cm4gd2luZG93LmNvbnNvbGU7XG4gIH1cbiAgcmV0dXJuIGdsb2JhbC5jb25zb2xlO1xufVxuY29uc3QgY29uc29sZSQxID0gZ2V0Q29uc29sZSgpO1xuZnVuY3Rpb24gY2FjaGVkKGZuKSB7XG4gIGNvbnN0IGNhY2hlID0gLyogQF9fUFVSRV9fICovIE9iamVjdC5jcmVhdGUobnVsbCk7XG4gIHJldHVybiBmdW5jdGlvbiBjYWNoZWRGbihzdHIpIHtcbiAgICBjb25zdCBoaXQgPSBjYWNoZVtzdHJdO1xuICAgIHJldHVybiBoaXQgfHwgKGNhY2hlW3N0cl0gPSBmbihzdHIpKTtcbiAgfTtcbn1cbmNvbnN0IHJlZ2V4ID0gLy0oXFx3KS9nO1xuY29uc3QgY2FtZWxpemUgPSBjYWNoZWQoKHN0cikgPT4gc3RyLnJlcGxhY2UocmVnZXgsIChfLCBjKSA9PiBjLnRvVXBwZXJDYXNlKCkpKTtcbmNvbnN0IG1hbmFnZUFuZEVtaXQkMSA9IFtcIlN0YXJ0XCIsIFwiQWRkXCIsIFwiUmVtb3ZlXCIsIFwiVXBkYXRlXCIsIFwiRW5kXCJdO1xuY29uc3QgZW1pdCQxID0gW1wiQ2hvb3NlXCIsIFwiVW5jaG9vc2VcIiwgXCJTb3J0XCIsIFwiRmlsdGVyXCIsIFwiQ2xvbmVcIl07XG5jb25zdCBtYW5hZ2UkMSA9IFtcIk1vdmVcIl07XG5jb25zdCBldmVudEhhbmRsZXJOYW1lcyA9IFttYW5hZ2UkMSwgbWFuYWdlQW5kRW1pdCQxLCBlbWl0JDFdLmZsYXRNYXAoKGV2ZW50czIpID0+IGV2ZW50czIpLm1hcCgoZXZ0KSA9PiBgb24ke2V2dH1gKTtcbmNvbnN0IGV2ZW50cyA9IHtcbiAgbWFuYWdlOiBtYW5hZ2UkMSxcbiAgbWFuYWdlQW5kRW1pdDogbWFuYWdlQW5kRW1pdCQxLFxuICBlbWl0OiBlbWl0JDFcbn07XG5mdW5jdGlvbiBpc1JlYWRPbmx5KGV2ZW50TmFtZSkge1xuICByZXR1cm4gZXZlbnRIYW5kbGVyTmFtZXMuaW5kZXhPZihldmVudE5hbWUpICE9PSAtMTtcbn1cbmNvbnN0IHRhZ3MgPSBbXG4gIFwiYVwiLFxuICBcImFiYnJcIixcbiAgXCJhZGRyZXNzXCIsXG4gIFwiYXJlYVwiLFxuICBcImFydGljbGVcIixcbiAgXCJhc2lkZVwiLFxuICBcImF1ZGlvXCIsXG4gIFwiYlwiLFxuICBcImJhc2VcIixcbiAgXCJiZGlcIixcbiAgXCJiZG9cIixcbiAgXCJibG9ja3F1b3RlXCIsXG4gIFwiYm9keVwiLFxuICBcImJyXCIsXG4gIFwiYnV0dG9uXCIsXG4gIFwiY2FudmFzXCIsXG4gIFwiY2FwdGlvblwiLFxuICBcImNpdGVcIixcbiAgXCJjb2RlXCIsXG4gIFwiY29sXCIsXG4gIFwiY29sZ3JvdXBcIixcbiAgXCJkYXRhXCIsXG4gIFwiZGF0YWxpc3RcIixcbiAgXCJkZFwiLFxuICBcImRlbFwiLFxuICBcImRldGFpbHNcIixcbiAgXCJkZm5cIixcbiAgXCJkaWFsb2dcIixcbiAgXCJkaXZcIixcbiAgXCJkbFwiLFxuICBcImR0XCIsXG4gIFwiZW1cIixcbiAgXCJlbWJlZFwiLFxuICBcImZpZWxkc2V0XCIsXG4gIFwiZmlnY2FwdGlvblwiLFxuICBcImZpZ3VyZVwiLFxuICBcImZvb3RlclwiLFxuICBcImZvcm1cIixcbiAgXCJoMVwiLFxuICBcImgyXCIsXG4gIFwiaDNcIixcbiAgXCJoNFwiLFxuICBcImg1XCIsXG4gIFwiaDZcIixcbiAgXCJoZWFkXCIsXG4gIFwiaGVhZGVyXCIsXG4gIFwiaGdyb3VwXCIsXG4gIFwiaHJcIixcbiAgXCJodG1sXCIsXG4gIFwiaVwiLFxuICBcImlmcmFtZVwiLFxuICBcImltZ1wiLFxuICBcImlucHV0XCIsXG4gIFwiaW5zXCIsXG4gIFwia2JkXCIsXG4gIFwibGFiZWxcIixcbiAgXCJsZWdlbmRcIixcbiAgXCJsaVwiLFxuICBcImxpbmtcIixcbiAgXCJtYWluXCIsXG4gIFwibWFwXCIsXG4gIFwibWFya1wiLFxuICBcIm1hdGhcIixcbiAgXCJtZW51XCIsXG4gIFwibWVudWl0ZW1cIixcbiAgXCJtZXRhXCIsXG4gIFwibWV0ZXJcIixcbiAgXCJuYXZcIixcbiAgXCJub3NjcmlwdFwiLFxuICBcIm9iamVjdFwiLFxuICBcIm9sXCIsXG4gIFwib3B0Z3JvdXBcIixcbiAgXCJvcHRpb25cIixcbiAgXCJvdXRwdXRcIixcbiAgXCJwXCIsXG4gIFwicGFyYW1cIixcbiAgXCJwaWN0dXJlXCIsXG4gIFwicHJlXCIsXG4gIFwicHJvZ3Jlc3NcIixcbiAgXCJxXCIsXG4gIFwicmJcIixcbiAgXCJycFwiLFxuICBcInJ0XCIsXG4gIFwicnRjXCIsXG4gIFwicnVieVwiLFxuICBcInNcIixcbiAgXCJzYW1wXCIsXG4gIFwic2NyaXB0XCIsXG4gIFwic2VjdGlvblwiLFxuICBcInNlbGVjdFwiLFxuICBcInNsb3RcIixcbiAgXCJzbWFsbFwiLFxuICBcInNvdXJjZVwiLFxuICBcInNwYW5cIixcbiAgXCJzdHJvbmdcIixcbiAgXCJzdHlsZVwiLFxuICBcInN1YlwiLFxuICBcInN1bW1hcnlcIixcbiAgXCJzdXBcIixcbiAgXCJzdmdcIixcbiAgXCJ0YWJsZVwiLFxuICBcInRib2R5XCIsXG4gIFwidGRcIixcbiAgXCJ0ZW1wbGF0ZVwiLFxuICBcInRleHRhcmVhXCIsXG4gIFwidGZvb3RcIixcbiAgXCJ0aFwiLFxuICBcInRoZWFkXCIsXG4gIFwidGltZVwiLFxuICBcInRpdGxlXCIsXG4gIFwidHJcIixcbiAgXCJ0cmFja1wiLFxuICBcInVcIixcbiAgXCJ1bFwiLFxuICBcInZhclwiLFxuICBcInZpZGVvXCIsXG4gIFwid2JyXCJcbl07XG5mdW5jdGlvbiBpc0h0bWxUYWcobmFtZSkge1xuICByZXR1cm4gdGFncy5pbmNsdWRlcyhuYW1lKTtcbn1cbmZ1bmN0aW9uIGlzVHJhbnNpdGlvbihuYW1lKSB7XG4gIHJldHVybiBbXCJ0cmFuc2l0aW9uLWdyb3VwXCIsIFwiVHJhbnNpdGlvbkdyb3VwXCJdLmluY2x1ZGVzKG5hbWUpO1xufVxuZnVuY3Rpb24gaXNIdG1sQXR0cmlidXRlKHZhbHVlKSB7XG4gIHJldHVybiBbXCJpZFwiLCBcImNsYXNzXCIsIFwicm9sZVwiLCBcInN0eWxlXCJdLmluY2x1ZGVzKHZhbHVlKSB8fCB2YWx1ZS5zdGFydHNXaXRoKFwiZGF0YS1cIikgfHwgdmFsdWUuc3RhcnRzV2l0aChcImFyaWEtXCIpIHx8IHZhbHVlLnN0YXJ0c1dpdGgoXCJvblwiKTtcbn1cbmZ1bmN0aW9uIHByb2plY3QoZW50cmllcykge1xuICByZXR1cm4gZW50cmllcy5yZWR1Y2UoKHJlcywgW2tleSwgdmFsdWVdKSA9PiB7XG4gICAgcmVzW2tleV0gPSB2YWx1ZTtcbiAgICByZXR1cm4gcmVzO1xuICB9LCB7fSk7XG59XG5mdW5jdGlvbiBnZXRDb21wb25lbnRBdHRyaWJ1dGVzKHsgJGF0dHJzLCBjb21wb25lbnREYXRhID0ge30gfSkge1xuICBjb25zdCBhdHRyaWJ1dGVzID0gcHJvamVjdChPYmplY3QuZW50cmllcygkYXR0cnMpLmZpbHRlcigoW2tleSwgX10pID0+IGlzSHRtbEF0dHJpYnV0ZShrZXkpKSk7XG4gIHJldHVybiBfX3NwcmVhZFZhbHVlcyhfX3NwcmVhZFZhbHVlcyh7fSwgYXR0cmlidXRlcyksIGNvbXBvbmVudERhdGEpO1xufVxuZnVuY3Rpb24gY3JlYXRlU29ydGFibGVPcHRpb24oeyAkYXR0cnMsIGNhbGxCYWNrQnVpbGRlciB9KSB7XG4gIGNvbnN0IG9wdGlvbnMgPSBwcm9qZWN0KGdldFZhbGlkU29ydGFibGVFbnRyaWVzKCRhdHRycykpO1xuICBPYmplY3QuZW50cmllcyhjYWxsQmFja0J1aWxkZXIpLmZvckVhY2goKFtldmVudFR5cGUsIGV2ZW50QnVpbGRlcl0pID0+IHtcbiAgICBldmVudHNbZXZlbnRUeXBlXS5mb3JFYWNoKChldmVudCkgPT4ge1xuICAgICAgb3B0aW9uc1tgb24ke2V2ZW50fWBdID0gZXZlbnRCdWlsZGVyKGV2ZW50KTtcbiAgICB9KTtcbiAgfSk7XG4gIGNvbnN0IGRyYWdnYWJsZSA9IGBbZGF0YS1kcmFnZ2FibGVdJHtvcHRpb25zLmRyYWdnYWJsZSB8fCBcIlwifWA7XG4gIHJldHVybiBfX3NwcmVhZFByb3BzKF9fc3ByZWFkVmFsdWVzKHt9LCBvcHRpb25zKSwge1xuICAgIGRyYWdnYWJsZVxuICB9KTtcbn1cbmZ1bmN0aW9uIGdldFZhbGlkU29ydGFibGVFbnRyaWVzKHZhbHVlKSB7XG4gIHJldHVybiBPYmplY3QuZW50cmllcyh2YWx1ZSkuZmlsdGVyKChba2V5LCBfXSkgPT4gIWlzSHRtbEF0dHJpYnV0ZShrZXkpKS5tYXAoKFtrZXksIHZhbHVlMl0pID0+IFtjYW1lbGl6ZShrZXkpLCB2YWx1ZTJdKS5maWx0ZXIoKFtrZXksIF9dKSA9PiAhaXNSZWFkT25seShrZXkpKTtcbn1cbmNvbnN0IGdldEh0bWxFbGVtZW50RnJvbU5vZGUgPSAobm9kZSkgPT4ge1xuICBjb25zdCBlbCA9IG5vZGUuZWwgfHwgQXJyYXkuaXNBcnJheShub2RlLmNoaWxkcmVuKSAmJiBub2RlLmNoaWxkcmVuWzBdLmVsLnBhcmVudE5vZGU7XG4gIGlmICghZWwpIHtcbiAgICBjb25zb2xlLmVycm9yKFwiXFx1NEY3RlxcdTc1MjggdHJhbnNpdGlvbi1ncm91cCAsIFxcdTk3MDBcXHU4OTgxXFx1NTcyOHNsb3RcXHU0RTJEdGVtcGxhdGVcXHU1MTg1XFx1ODFGM1xcdTVDMTEyXFx1NUM0Mmh0bWxcXHU2ODA3XFx1N0I3RVwiKTtcbiAgfVxuICByZXR1cm4gZWwgfHwge307XG59O1xuY29uc3QgYWRkQ29udGV4dCA9IChkb21FbGVtZW50LCBjb250ZXh0KSA9PiBkb21FbGVtZW50Ll9fZHJhZ2dhYmxlX2NvbnRleHQgPSBjb250ZXh0O1xuY29uc3QgZ2V0Q29udGV4dCA9IChkb21FbGVtZW50KSA9PiBkb21FbGVtZW50Ll9fZHJhZ2dhYmxlX2NvbnRleHQ7XG5jbGFzcyBDb21wb25lbnRTdHJ1Y3R1cmUge1xuICBjb25zdHJ1Y3Rvcih7XG4gICAgbm9kZXM6IHsgaGVhZGVyLCBkZWZhdWx0OiBkZWZhdWx0Tm9kZXMsIGZvb3RlciB9LFxuICAgIHJvb3QsXG4gICAgcmVhbExpc3RcbiAgfSkge1xuICAgIHRoaXMuZGVmYXVsdE5vZGVzID0gZGVmYXVsdE5vZGVzO1xuICAgIHRoaXMuY2hpbGRyZW4gPSBbLi4uaGVhZGVyLCAuLi5kZWZhdWx0Tm9kZXMsIC4uLmZvb3Rlcl07XG4gICAgdGhpcy5leHRlcm5hbENvbXBvbmVudCA9IHJvb3QuZXh0ZXJuYWxDb21wb25lbnQ7XG4gICAgdGhpcy5yb290VHJhbnNpdGlvbiA9IHJvb3QudHJhbnNpdGlvbjtcbiAgICB0aGlzLnRhZyA9IHJvb3QudGFnO1xuICAgIHRoaXMucmVhbExpc3QgPSByZWFsTGlzdDtcbiAgfVxuICBnZXQgX2lzUm9vdENvbXBvbmVudCgpIHtcbiAgICByZXR1cm4gdGhpcy5leHRlcm5hbENvbXBvbmVudCB8fCB0aGlzLnJvb3RUcmFuc2l0aW9uO1xuICB9XG4gIHJlbmRlcihoMiwgYXR0cmlidXRlcykge1xuICAgIGNvbnN0IHsgdGFnLCBjaGlsZHJlbiwgX2lzUm9vdENvbXBvbmVudCB9ID0gdGhpcztcbiAgICBjb25zdCBvcHRpb24gPSAhX2lzUm9vdENvbXBvbmVudCA/IGNoaWxkcmVuIDogeyBkZWZhdWx0OiAoKSA9PiBjaGlsZHJlbiB9O1xuICAgIHJldHVybiBoMih0YWcsIGF0dHJpYnV0ZXMsIG9wdGlvbik7XG4gIH1cbiAgdXBkYXRlZCgpIHtcbiAgICBjb25zdCB7IGRlZmF1bHROb2RlcywgcmVhbExpc3QgfSA9IHRoaXM7XG4gICAgZGVmYXVsdE5vZGVzLmZvckVhY2goKG5vZGUsIGluZGV4KSA9PiB7XG4gICAgICBhZGRDb250ZXh0KGdldEh0bWxFbGVtZW50RnJvbU5vZGUobm9kZSksIHtcbiAgICAgICAgZWxlbWVudDogcmVhbExpc3RbaW5kZXhdLFxuICAgICAgICBpbmRleFxuICAgICAgfSk7XG4gICAgfSk7XG4gIH1cbiAgZ2V0VW5kZXJseWluZ1ZtKGRvbUVsZW1lbnQpIHtcbiAgICByZXR1cm4gZ2V0Q29udGV4dChkb21FbGVtZW50KTtcbiAgfVxuICBnZXRWbUluZGV4RnJvbURvbUluZGV4KGRvbUluZGV4LCBlbGVtZW50KSB7XG4gICAgY29uc3QgeyBkZWZhdWx0Tm9kZXMgfSA9IHRoaXM7XG4gICAgY29uc3QgeyBsZW5ndGggfSA9IGRlZmF1bHROb2RlcztcbiAgICBjb25zdCBkb21DaGlsZHJlbiA9IGVsZW1lbnQuY2hpbGRyZW47XG4gICAgY29uc3QgZG9tRWxlbWVudCA9IGRvbUNoaWxkcmVuLml0ZW0oZG9tSW5kZXgpO1xuICAgIGlmIChkb21FbGVtZW50ID09PSBudWxsKSB7XG4gICAgICByZXR1cm4gbGVuZ3RoO1xuICAgIH1cbiAgICBjb25zdCBjb250ZXh0ID0gZ2V0Q29udGV4dChkb21FbGVtZW50KTtcbiAgICBpZiAoY29udGV4dCkge1xuICAgICAgcmV0dXJuIGNvbnRleHQuaW5kZXg7XG4gICAgfVxuICAgIGlmIChsZW5ndGggPT09IDApIHtcbiAgICAgIHJldHVybiAwO1xuICAgIH1cbiAgICBjb25zdCBmaXJzdERvbUxpc3RFbGVtZW50ID0gZ2V0SHRtbEVsZW1lbnRGcm9tTm9kZShkZWZhdWx0Tm9kZXNbMF0pO1xuICAgIGNvbnN0IGluZGV4Rmlyc3REb21MaXN0RWxlbWVudCA9IFsuLi5kb21DaGlsZHJlbl0uZmluZEluZGV4KChlbGVtZW50MikgPT4gZWxlbWVudDIgPT09IGZpcnN0RG9tTGlzdEVsZW1lbnQpO1xuICAgIHJldHVybiBkb21JbmRleCA8IGluZGV4Rmlyc3REb21MaXN0RWxlbWVudCA/IDAgOiBsZW5ndGg7XG4gIH1cbn1cbmZ1bmN0aW9uIGdldFNsb3Qoc2xvdHMsIGtleSkge1xuICBjb25zdCBzbG90VmFsdWUgPSBzbG90c1trZXldO1xuICByZXR1cm4gc2xvdFZhbHVlID8gc2xvdFZhbHVlKCkgOiBbXTtcbn1cbmZ1bmN0aW9uIGNvbXB1dGVOb2Rlcyh7ICRzbG90cywgcmVhbExpc3QsIGdldEtleSB9KSB7XG4gIGNvbnN0IG5vcm1hbGl6ZWRMaXN0ID0gcmVhbExpc3QgfHwgW107XG4gIGNvbnN0IFtoZWFkZXIsIGZvb3Rlcl0gPSBbXCJoZWFkZXJcIiwgXCJmb290ZXJcIl0ubWFwKChuYW1lKSA9PiBnZXRTbG90KCRzbG90cywgbmFtZSkpO1xuICBjb25zdCB7IGl0ZW0gfSA9ICRzbG90cztcbiAgaWYgKCFpdGVtKSB7XG4gICAgdGhyb3cgbmV3IEVycm9yKFwiZHJhZ2dhYmxlIGVsZW1lbnQgbXVzdCBoYXZlIGFuIGl0ZW0gc2xvdFwiKTtcbiAgfVxuICBjb25zdCBkZWZhdWx0Tm9kZXMgPSBub3JtYWxpemVkTGlzdC5mbGF0TWFwKChlbGVtZW50LCBpbmRleCkgPT4gaXRlbSh7IGVsZW1lbnQsIGluZGV4IH0pLm1hcCgobm9kZSkgPT4ge1xuICAgIG5vZGUua2V5ID0gZ2V0S2V5KGVsZW1lbnQpO1xuICAgIG5vZGUucHJvcHMgPSBfX3NwcmVhZFByb3BzKF9fc3ByZWFkVmFsdWVzKHt9LCBub2RlLnByb3BzIHx8IHt9KSwgeyBcImRhdGEtZHJhZ2dhYmxlXCI6IHRydWUgfSk7XG4gICAgcmV0dXJuIG5vZGU7XG4gIH0pKTtcbiAgaWYgKGRlZmF1bHROb2Rlcy5sZW5ndGggIT09IG5vcm1hbGl6ZWRMaXN0Lmxlbmd0aCkge1xuICAgIHRocm93IG5ldyBFcnJvcihcIkl0ZW0gc2xvdCBtdXN0IGhhdmUgb25seSBvbmUgY2hpbGRcIik7XG4gIH1cbiAgcmV0dXJuIHtcbiAgICBoZWFkZXIsXG4gICAgZm9vdGVyLFxuICAgIGRlZmF1bHQ6IGRlZmF1bHROb2Rlc1xuICB9O1xufVxuZnVuY3Rpb24gZ2V0Um9vdEluZm9ybWF0aW9uKHRhZykge1xuICBjb25zdCB0cmFuc2l0aW9uID0gaXNUcmFuc2l0aW9uKHRhZyk7XG4gIGNvbnN0IGV4dGVybmFsQ29tcG9uZW50ID0gIWlzSHRtbFRhZyh0YWcpICYmICF0cmFuc2l0aW9uO1xuICByZXR1cm4ge1xuICAgIHRyYW5zaXRpb24sXG4gICAgZXh0ZXJuYWxDb21wb25lbnQsXG4gICAgdGFnOiBleHRlcm5hbENvbXBvbmVudCA/IHJlc29sdmVDb21wb25lbnQodGFnKSA6IHRyYW5zaXRpb24gPyBUcmFuc2l0aW9uR3JvdXAgOiB0YWdcbiAgfTtcbn1cbmZ1bmN0aW9uIGNvbXB1dGVDb21wb25lbnRTdHJ1Y3R1cmUoeyAkc2xvdHMsIHRhZywgcmVhbExpc3QsIGdldEtleSB9KSB7XG4gIGNvbnN0IG5vZGVzID0gY29tcHV0ZU5vZGVzKHsgJHNsb3RzLCByZWFsTGlzdCwgZ2V0S2V5IH0pO1xuICBjb25zdCByb290ID0gZ2V0Um9vdEluZm9ybWF0aW9uKHRhZyk7XG4gIHJldHVybiBuZXcgQ29tcG9uZW50U3RydWN0dXJlKHsgbm9kZXMsIHJvb3QsIHJlYWxMaXN0IH0pO1xufVxuZnVuY3Rpb24gZW1pdChldnROYW1lLCBldnREYXRhKSB7XG4gIG5leHRUaWNrKCgpID0+IHRoaXMuJGVtaXQoZXZ0TmFtZS50b0xvd2VyQ2FzZSgpLCBldnREYXRhKSk7XG59XG5mdW5jdGlvbiBtYW5hZ2UoZXZ0TmFtZSkge1xuICByZXR1cm4gKGV2dERhdGEsIG9yaWdpbmFsRWxlbWVudCkgPT4ge1xuICAgIGlmICh0aGlzLnJlYWxMaXN0ICE9PSBudWxsKSB7XG4gICAgICByZXR1cm4gdGhpc1tgb25EcmFnJHtldnROYW1lfWBdKGV2dERhdGEsIG9yaWdpbmFsRWxlbWVudCk7XG4gICAgfVxuICB9O1xufVxuZnVuY3Rpb24gbWFuYWdlQW5kRW1pdChldnROYW1lKSB7XG4gIGNvbnN0IGRlbGVnYXRlQ2FsbEJhY2sgPSBtYW5hZ2UuY2FsbCh0aGlzLCBldnROYW1lKTtcbiAgcmV0dXJuIChldnREYXRhLCBvcmlnaW5hbEVsZW1lbnQpID0+IHtcbiAgICBkZWxlZ2F0ZUNhbGxCYWNrLmNhbGwodGhpcywgZXZ0RGF0YSwgb3JpZ2luYWxFbGVtZW50KTtcbiAgICBlbWl0LmNhbGwodGhpcywgZXZ0TmFtZSwgZXZ0RGF0YSk7XG4gIH07XG59XG5sZXQgZHJhZ2dpbmdFbGVtZW50ID0gbnVsbDtcbmNvbnN0IHByb3BzID0ge1xuICBsaXN0OiB7XG4gICAgdHlwZTogQXJyYXksXG4gICAgcmVxdWlyZWQ6IGZhbHNlLFxuICAgIGRlZmF1bHQ6IG51bGxcbiAgfSxcbiAgbW9kZWxWYWx1ZToge1xuICAgIHR5cGU6IEFycmF5LFxuICAgIHJlcXVpcmVkOiBmYWxzZSxcbiAgICBkZWZhdWx0OiBudWxsXG4gIH0sXG4gIGl0ZW1LZXk6IHtcbiAgICB0eXBlOiBbU3RyaW5nLCBGdW5jdGlvbl0sXG4gICAgcmVxdWlyZWQ6IHRydWVcbiAgfSxcbiAgY2xvbmU6IHtcbiAgICB0eXBlOiBGdW5jdGlvbixcbiAgICBkZWZhdWx0OiAob3JpZ2luYWwpID0+IHtcbiAgICAgIHJldHVybiBvcmlnaW5hbDtcbiAgICB9XG4gIH0sXG4gIHRhZzoge1xuICAgIHR5cGU6IFN0cmluZyxcbiAgICBkZWZhdWx0OiBcImRpdlwiXG4gIH0sXG4gIG1vdmU6IHtcbiAgICB0eXBlOiBGdW5jdGlvbixcbiAgICBkZWZhdWx0OiBudWxsXG4gIH0sXG4gIGNvbXBvbmVudERhdGE6IHtcbiAgICB0eXBlOiBPYmplY3QsXG4gICAgcmVxdWlyZWQ6IGZhbHNlLFxuICAgIGRlZmF1bHQ6IG51bGxcbiAgfVxufTtcbmNvbnN0IGVtaXRzID0gW1xuICBcInVwZGF0ZTptb2RlbFZhbHVlXCIsXG4gIFwiY2hhbmdlXCIsXG4gIC4uLlsuLi5ldmVudHMubWFuYWdlQW5kRW1pdCwgLi4uZXZlbnRzLmVtaXRdLm1hcCgoZXZ0KSA9PiBldnQudG9Mb3dlckNhc2UoKSlcbl07XG5jb25zdCBkcmFnZ2FibGVDb21wb25lbnQgPSBkZWZpbmVDb21wb25lbnQoe1xuICBuYW1lOiBcImRyYWdnYWJsZVwiLFxuICBpbmhlcml0QXR0cnM6IGZhbHNlLFxuICBwcm9wcyxcbiAgZW1pdHMsXG4gIGRhdGEoKSB7XG4gICAgcmV0dXJuIHtcbiAgICAgIGVycm9yOiBmYWxzZVxuICAgIH07XG4gIH0sXG4gIHJlbmRlcigpIHtcbiAgICB0cnkge1xuICAgICAgdGhpcy5lcnJvciA9IGZhbHNlO1xuICAgICAgY29uc3QgeyAkc2xvdHMsICRhdHRycywgdGFnLCBjb21wb25lbnREYXRhLCByZWFsTGlzdCwgZ2V0S2V5IH0gPSB0aGlzO1xuICAgICAgY29uc3QgY29tcG9uZW50U3RydWN0dXJlID0gY29tcHV0ZUNvbXBvbmVudFN0cnVjdHVyZSh7XG4gICAgICAgICRzbG90cyxcbiAgICAgICAgdGFnLFxuICAgICAgICByZWFsTGlzdCxcbiAgICAgICAgZ2V0S2V5XG4gICAgICB9KTtcbiAgICAgIHRoaXMuY29tcG9uZW50U3RydWN0dXJlID0gY29tcG9uZW50U3RydWN0dXJlO1xuICAgICAgY29uc3QgYXR0cmlidXRlcyA9IGdldENvbXBvbmVudEF0dHJpYnV0ZXMoeyAkYXR0cnMsIGNvbXBvbmVudERhdGEgfSk7XG4gICAgICByZXR1cm4gY29tcG9uZW50U3RydWN0dXJlLnJlbmRlcihoLCBhdHRyaWJ1dGVzKTtcbiAgICB9IGNhdGNoIChlcnIpIHtcbiAgICAgIHRoaXMuZXJyb3IgPSB0cnVlO1xuICAgICAgcmV0dXJuIGgoXCJwcmVcIiwgeyBzdHlsZTogeyBjb2xvcjogXCJyZWRcIiB9IH0sIGVyci5zdGFjayk7XG4gICAgfVxuICB9LFxuICBjcmVhdGVkKCkge1xuICAgIGlmICh0aGlzLmxpc3QgIT09IG51bGwgJiYgdGhpcy5tb2RlbFZhbHVlICE9PSBudWxsKSB7XG4gICAgICBjb25zb2xlJDEuZXJyb3IoXCJtb2RlbFZhbHVlIGFuZCBsaXN0IHByb3BzIGFyZSBtdXR1YWxseSBleGNsdXNpdmUhIFBsZWFzZSBzZXQgb25lIG9yIGFub3RoZXIuXCIpO1xuICAgIH1cbiAgfSxcbiAgbW91bnRlZCgpIHtcbiAgICBpZiAodGhpcy5lcnJvcikge1xuICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICBjb25zdCB7ICRhdHRycywgJGVsLCBjb21wb25lbnRTdHJ1Y3R1cmUgfSA9IHRoaXM7XG4gICAgY29tcG9uZW50U3RydWN0dXJlLnVwZGF0ZWQoKTtcbiAgICBjb25zdCBzb3J0YWJsZU9wdGlvbnMgPSBjcmVhdGVTb3J0YWJsZU9wdGlvbih7XG4gICAgICAkYXR0cnMsXG4gICAgICBjYWxsQmFja0J1aWxkZXI6IHtcbiAgICAgICAgbWFuYWdlQW5kRW1pdDogKGV2ZW50KSA9PiBtYW5hZ2VBbmRFbWl0LmNhbGwodGhpcywgZXZlbnQpLFxuICAgICAgICBlbWl0OiAoZXZlbnQpID0+IGVtaXQuYmluZCh0aGlzLCBldmVudCksXG4gICAgICAgIG1hbmFnZTogKGV2ZW50KSA9PiBtYW5hZ2UuY2FsbCh0aGlzLCBldmVudClcbiAgICAgIH1cbiAgICB9KTtcbiAgICBjb25zdCB0YXJnZXREb21FbGVtZW50ID0gJGVsLm5vZGVUeXBlID09PSAxID8gJGVsIDogJGVsLnBhcmVudEVsZW1lbnQ7XG4gICAgdGhpcy5fc29ydGFibGUgPSBuZXcgU29ydGFibGUodGFyZ2V0RG9tRWxlbWVudCwgc29ydGFibGVPcHRpb25zKTtcbiAgICB0aGlzLnRhcmdldERvbUVsZW1lbnQgPSB0YXJnZXREb21FbGVtZW50O1xuICAgIHRhcmdldERvbUVsZW1lbnQuX19kcmFnZ2FibGVfY29tcG9uZW50X18gPSB0aGlzO1xuICB9LFxuICB1cGRhdGVkKCkge1xuICAgIHRoaXMuY29tcG9uZW50U3RydWN0dXJlLnVwZGF0ZWQoKTtcbiAgfSxcbiAgYmVmb3JlVW5tb3VudCgpIHtcbiAgICBpZiAodGhpcy5fc29ydGFibGUgIT09IHZvaWQgMClcbiAgICAgIHRoaXMuX3NvcnRhYmxlLmRlc3Ryb3koKTtcbiAgfSxcbiAgY29tcHV0ZWQ6IHtcbiAgICByZWFsTGlzdCgpIHtcbiAgICAgIGNvbnN0IHsgbGlzdCB9ID0gdGhpcztcbiAgICAgIHJldHVybiBsaXN0ID8gbGlzdCA6IHRoaXMubW9kZWxWYWx1ZTtcbiAgICB9LFxuICAgIGdldEtleSgpIHtcbiAgICAgIGNvbnN0IHsgaXRlbUtleSB9ID0gdGhpcztcbiAgICAgIGlmICh0eXBlb2YgaXRlbUtleSA9PT0gXCJmdW5jdGlvblwiKSB7XG4gICAgICAgIHJldHVybiBpdGVtS2V5O1xuICAgICAgfVxuICAgICAgcmV0dXJuIChlbGVtZW50KSA9PiBlbGVtZW50W2l0ZW1LZXldO1xuICAgIH1cbiAgfSxcbiAgd2F0Y2g6IHtcbiAgICAkYXR0cnM6IHtcbiAgICAgIGhhbmRsZXIobmV3T3B0aW9uVmFsdWUpIHtcbiAgICAgICAgY29uc3QgeyBfc29ydGFibGUgfSA9IHRoaXM7XG4gICAgICAgIGlmICghX3NvcnRhYmxlKVxuICAgICAgICAgIHJldHVybjtcbiAgICAgICAgZ2V0VmFsaWRTb3J0YWJsZUVudHJpZXMobmV3T3B0aW9uVmFsdWUpLmZvckVhY2goKFtrZXksIHZhbHVlXSkgPT4ge1xuICAgICAgICAgIF9zb3J0YWJsZS5vcHRpb24oa2V5LCB2YWx1ZSk7XG4gICAgICAgIH0pO1xuICAgICAgfSxcbiAgICAgIGRlZXA6IHRydWVcbiAgICB9XG4gIH0sXG4gIG1ldGhvZHM6IHtcbiAgICBnZXRVbmRlcmx5aW5nVm0oZG9tRWxlbWVudCkge1xuICAgICAgcmV0dXJuIHRoaXMuY29tcG9uZW50U3RydWN0dXJlLmdldFVuZGVybHlpbmdWbShkb21FbGVtZW50KSB8fCBudWxsO1xuICAgIH0sXG4gICAgZ2V0VW5kZXJseWluZ1BvdGVuY2lhbERyYWdnYWJsZUNvbXBvbmVudChodG1FbGVtZW50KSB7XG4gICAgICByZXR1cm4gaHRtRWxlbWVudC5fX2RyYWdnYWJsZV9jb21wb25lbnRfXztcbiAgICB9LFxuICAgIGVtaXRDaGFuZ2VzKGV2dCkge1xuICAgICAgbmV4dFRpY2soKCkgPT4gdGhpcy4kZW1pdChcImNoYW5nZVwiLCBldnQpKTtcbiAgICB9LFxuICAgIGFsdGVyTGlzdChvbkxpc3QpIHtcbiAgICAgIGlmICh0aGlzLmxpc3QpIHtcbiAgICAgICAgb25MaXN0KHRoaXMubGlzdCk7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cbiAgICAgIGNvbnN0IG5ld0xpc3QgPSBbLi4udGhpcy5tb2RlbFZhbHVlXTtcbiAgICAgIG9uTGlzdChuZXdMaXN0KTtcbiAgICAgIHRoaXMuJGVtaXQoXCJ1cGRhdGU6bW9kZWxWYWx1ZVwiLCBuZXdMaXN0KTtcbiAgICB9LFxuICAgIHNwbGljZUxpc3QoKSB7XG4gICAgICBjb25zdCBzcGxpY2VMaXN0ID0gKGxpc3QpID0+IGxpc3Quc3BsaWNlKC4uLmFyZ3VtZW50cyk7XG4gICAgICB0aGlzLmFsdGVyTGlzdChzcGxpY2VMaXN0KTtcbiAgICB9LFxuICAgIHVwZGF0ZVBvc2l0aW9uKG9sZEluZGV4LCBuZXdJbmRleCkge1xuICAgICAgY29uc3QgdXBkYXRlUG9zaXRpb24gPSAobGlzdCkgPT4gbGlzdC5zcGxpY2UobmV3SW5kZXgsIDAsIGxpc3Quc3BsaWNlKG9sZEluZGV4LCAxKVswXSk7XG4gICAgICB0aGlzLmFsdGVyTGlzdCh1cGRhdGVQb3NpdGlvbik7XG4gICAgfSxcbiAgICBnZXRSZWxhdGVkQ29udGV4dEZyb21Nb3ZlRXZlbnQoeyB0bywgcmVsYXRlZCB9KSB7XG4gICAgICBjb25zdCBjb21wb25lbnQgPSB0aGlzLmdldFVuZGVybHlpbmdQb3RlbmNpYWxEcmFnZ2FibGVDb21wb25lbnQodG8pO1xuICAgICAgaWYgKCFjb21wb25lbnQpIHtcbiAgICAgICAgcmV0dXJuIHsgY29tcG9uZW50IH07XG4gICAgICB9XG4gICAgICBjb25zdCBsaXN0ID0gY29tcG9uZW50LnJlYWxMaXN0O1xuICAgICAgY29uc3QgY29udGV4dCA9IHsgbGlzdCwgY29tcG9uZW50IH07XG4gICAgICBpZiAodG8gIT09IHJlbGF0ZWQgJiYgbGlzdCkge1xuICAgICAgICBjb25zdCBkZXN0aW5hdGlvbiA9IGNvbXBvbmVudC5nZXRVbmRlcmx5aW5nVm0ocmVsYXRlZCkgfHwge307XG4gICAgICAgIHJldHVybiBfX3NwcmVhZFZhbHVlcyhfX3NwcmVhZFZhbHVlcyh7fSwgZGVzdGluYXRpb24pLCBjb250ZXh0KTtcbiAgICAgIH1cbiAgICAgIHJldHVybiBjb250ZXh0O1xuICAgIH0sXG4gICAgZ2V0Vm1JbmRleEZyb21Eb21JbmRleChkb21JbmRleCkge1xuICAgICAgcmV0dXJuIHRoaXMuY29tcG9uZW50U3RydWN0dXJlLmdldFZtSW5kZXhGcm9tRG9tSW5kZXgoZG9tSW5kZXgsIHRoaXMudGFyZ2V0RG9tRWxlbWVudCk7XG4gICAgfSxcbiAgICBvbkRyYWdTdGFydChldnQpIHtcbiAgICAgIHRoaXMuY29udGV4dCA9IHRoaXMuZ2V0VW5kZXJseWluZ1ZtKGV2dC5pdGVtKTtcbiAgICAgIGV2dC5pdGVtLl91bmRlcmx5aW5nX3ZtXyA9IHRoaXMuY2xvbmUodGhpcy5jb250ZXh0LmVsZW1lbnQpO1xuICAgICAgZHJhZ2dpbmdFbGVtZW50ID0gZXZ0Lml0ZW07XG4gICAgfSxcbiAgICBvbkRyYWdBZGQoZXZ0KSB7XG4gICAgICBjb25zdCBlbGVtZW50ID0gZXZ0Lml0ZW0uX3VuZGVybHlpbmdfdm1fO1xuICAgICAgaWYgKGVsZW1lbnQgPT09IHZvaWQgMCkge1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG4gICAgICByZW1vdmVOb2RlKGV2dC5pdGVtKTtcbiAgICAgIGNvbnN0IG5ld0luZGV4ID0gdGhpcy5nZXRWbUluZGV4RnJvbURvbUluZGV4KGV2dC5uZXdJbmRleCk7XG4gICAgICB0aGlzLnNwbGljZUxpc3QobmV3SW5kZXgsIDAsIGVsZW1lbnQpO1xuICAgICAgY29uc3QgYWRkZWQgPSB7IGVsZW1lbnQsIG5ld0luZGV4IH07XG4gICAgICB0aGlzLmVtaXRDaGFuZ2VzKHsgYWRkZWQgfSk7XG4gICAgfSxcbiAgICBvbkRyYWdSZW1vdmUoZXZ0KSB7XG4gICAgICBpbnNlcnROb2RlQXQodGhpcy4kZWwsIGV2dC5pdGVtLCBldnQub2xkSW5kZXgpO1xuICAgICAgaWYgKGV2dC5wdWxsTW9kZSA9PT0gXCJjbG9uZVwiKSB7XG4gICAgICAgIHJlbW92ZU5vZGUoZXZ0LmNsb25lKTtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuICAgICAgY29uc3QgeyBpbmRleDogb2xkSW5kZXgsIGVsZW1lbnQgfSA9IHRoaXMuY29udGV4dDtcbiAgICAgIHRoaXMuc3BsaWNlTGlzdChvbGRJbmRleCwgMSk7XG4gICAgICBjb25zdCByZW1vdmVkID0geyBlbGVtZW50LCBvbGRJbmRleCB9O1xuICAgICAgdGhpcy5lbWl0Q2hhbmdlcyh7IHJlbW92ZWQgfSk7XG4gICAgfSxcbiAgICBvbkRyYWdVcGRhdGUoZXZ0KSB7XG4gICAgICByZW1vdmVOb2RlKGV2dC5pdGVtKTtcbiAgICAgIGluc2VydE5vZGVBdChldnQuZnJvbSwgZXZ0Lml0ZW0sIGV2dC5vbGRJbmRleCk7XG4gICAgICBjb25zdCBvbGRJbmRleCA9IHRoaXMuY29udGV4dC5pbmRleDtcbiAgICAgIGNvbnN0IG5ld0luZGV4ID0gdGhpcy5nZXRWbUluZGV4RnJvbURvbUluZGV4KGV2dC5uZXdJbmRleCk7XG4gICAgICB0aGlzLnVwZGF0ZVBvc2l0aW9uKG9sZEluZGV4LCBuZXdJbmRleCk7XG4gICAgICBjb25zdCBtb3ZlZCA9IHsgZWxlbWVudDogdGhpcy5jb250ZXh0LmVsZW1lbnQsIG9sZEluZGV4LCBuZXdJbmRleCB9O1xuICAgICAgdGhpcy5lbWl0Q2hhbmdlcyh7IG1vdmVkIH0pO1xuICAgIH0sXG4gICAgY29tcHV0ZUZ1dHVyZUluZGV4KHJlbGF0ZWRDb250ZXh0LCBldnQpIHtcbiAgICAgIGlmICghcmVsYXRlZENvbnRleHQuZWxlbWVudCkge1xuICAgICAgICByZXR1cm4gMDtcbiAgICAgIH1cbiAgICAgIGNvbnN0IGRvbUNoaWxkcmVuID0gWy4uLmV2dC50by5jaGlsZHJlbl0uZmlsdGVyKChlbCkgPT4gZWwuc3R5bGVbXCJkaXNwbGF5XCJdICE9PSBcIm5vbmVcIik7XG4gICAgICBjb25zdCBjdXJyZW50RG9tSW5kZXggPSBkb21DaGlsZHJlbi5pbmRleE9mKGV2dC5yZWxhdGVkKTtcbiAgICAgIGNvbnN0IGN1cnJlbnRJbmRleCA9IHJlbGF0ZWRDb250ZXh0LmNvbXBvbmVudC5nZXRWbUluZGV4RnJvbURvbUluZGV4KGN1cnJlbnREb21JbmRleCk7XG4gICAgICBjb25zdCBkcmFnZ2VkSW5MaXN0ID0gZG9tQ2hpbGRyZW4uaW5kZXhPZihkcmFnZ2luZ0VsZW1lbnQpICE9PSAtMTtcbiAgICAgIHJldHVybiBkcmFnZ2VkSW5MaXN0IHx8ICFldnQud2lsbEluc2VydEFmdGVyID8gY3VycmVudEluZGV4IDogY3VycmVudEluZGV4ICsgMTtcbiAgICB9LFxuICAgIG9uRHJhZ01vdmUoZXZ0LCBvcmlnaW5hbEV2ZW50KSB7XG4gICAgICBjb25zdCB7IG1vdmUsIHJlYWxMaXN0IH0gPSB0aGlzO1xuICAgICAgaWYgKCFtb3ZlIHx8ICFyZWFsTGlzdCkge1xuICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgIH1cbiAgICAgIGNvbnN0IHJlbGF0ZWRDb250ZXh0ID0gdGhpcy5nZXRSZWxhdGVkQ29udGV4dEZyb21Nb3ZlRXZlbnQoZXZ0KTtcbiAgICAgIGNvbnN0IGZ1dHVyZUluZGV4ID0gdGhpcy5jb21wdXRlRnV0dXJlSW5kZXgocmVsYXRlZENvbnRleHQsIGV2dCk7XG4gICAgICBjb25zdCBkcmFnZ2VkQ29udGV4dCA9IF9fc3ByZWFkUHJvcHMoX19zcHJlYWRWYWx1ZXMoe30sIHRoaXMuY29udGV4dCksIHtcbiAgICAgICAgZnV0dXJlSW5kZXhcbiAgICAgIH0pO1xuICAgICAgY29uc3Qgc2VuZEV2ZW50ID0gX19zcHJlYWRQcm9wcyhfX3NwcmVhZFZhbHVlcyh7fSwgZXZ0KSwge1xuICAgICAgICByZWxhdGVkQ29udGV4dCxcbiAgICAgICAgZHJhZ2dlZENvbnRleHRcbiAgICAgIH0pO1xuICAgICAgcmV0dXJuIG1vdmUoc2VuZEV2ZW50LCBvcmlnaW5hbEV2ZW50KTtcbiAgICB9LFxuICAgIG9uRHJhZ0VuZCgpIHtcbiAgICAgIGRyYWdnaW5nRWxlbWVudCA9IG51bGw7XG4gICAgfVxuICB9XG59KTtcbmV4cG9ydCB7IGRyYWdnYWJsZUNvbXBvbmVudCBhcyBkZWZhdWx0IH07XG4iLCI8dGVtcGxhdGU+XG4gIDxjb21wb25lbnQgOmlzPVwidWkuYnV0dG9uR3JvdXAubmFtZVwiIGNsYXNzPVwiZnMtdGFibGUtY29sdW1ucy1maXhlZC1jb250cm9sbGVyXCI+XG4gICAgPGZzLWJ1dHRvblxuICAgICAgdi1mb3I9XCJvcHRpb24gb2Ygb3B0aW9uc1wiXG4gICAgICA6a2V5PVwib3B0aW9uLmljb25cIlxuICAgICAgOnR5cGU9XCJtb2RlbFZhbHVlID09PSBvcHRpb24udmFsdWUgPyAncHJpbWFyeScgOiAnZGVmYXVsdCdcIlxuICAgICAgOmljb249XCJvcHRpb24uaWNvblwiXG4gICAgICBzaXplPVwic21hbGxcIlxuICAgICAgQGNsaWNrPVwic3VibWl0KG9wdGlvbi52YWx1ZSlcIlxuICAgIC8+XG4gIDwvY29tcG9uZW50PlxuPC90ZW1wbGF0ZT5cblxuPHNjcmlwdCBsYW5nPVwidHNcIj5cbmltcG9ydCB7IGNvbXB1dGVkLCBkZWZpbmVDb21wb25lbnQsIHJlZiB9IGZyb20gXCJ2dWVcIjtcbmltcG9ydCB7IHVzZVVpIH0gZnJvbSBcIi4uLy4uLy4uLy4uL3VzZVwiO1xuXG5leHBvcnQgZGVmYXVsdCBkZWZpbmVDb21wb25lbnQoe1xuICBuYW1lOiBcIkZzVGFibGVDb2x1bW5zRml4ZWRDb250cm9sbGVyXCIsXG4gIHByb3BzOiB7XG4gICAgbW9kZWxWYWx1ZToge1xuICAgICAgZGVmYXVsdDogZmFsc2VcbiAgICB9XG4gIH0sXG4gIGVtaXRzOiBbXCJ1cGRhdGU6bW9kZWxWYWx1ZVwiLCBcImNoYW5nZVwiXSxcbiAgc2V0dXAocHJvcHMsIGN0eCkge1xuICAgIGNvbnN0IHsgdWkgfSA9IHVzZVVpKCk7XG4gICAgY29uc3Qgb3B0aW9ucyA9IGNvbXB1dGVkKCgpID0+IHtcbiAgICAgIHJldHVybiBbXG4gICAgICAgIHtcbiAgICAgICAgICB2YWx1ZTogXCJsZWZ0XCIsXG4gICAgICAgICAgaWNvbjogdWkuaWNvbnMubGVmdCAvLyAnZWwtaWNvbi1hcnJvdy1sZWZ0J1xuICAgICAgICB9LFxuICAgICAgICB7XG4gICAgICAgICAgdmFsdWU6IGZhbHNlLFxuICAgICAgICAgIGljb246IHVpLmljb25zLmNsb3NlIC8vICdlbC1pY29uLWNsb3NlJ1xuICAgICAgICB9LFxuICAgICAgICB7XG4gICAgICAgICAgdmFsdWU6IFwicmlnaHRcIixcbiAgICAgICAgICBpY29uOiB1aS5pY29ucy5yaWdodCAvLyAnZWwtaWNvbi1hcnJvdy1yaWdodCdcbiAgICAgICAgfVxuICAgICAgXTtcbiAgICB9KTtcblxuICAgIGZ1bmN0aW9uIHN1Ym1pdCh2YWx1ZTogYW55KSB7XG4gICAgICBjdHguZW1pdChcInVwZGF0ZTptb2RlbFZhbHVlXCIsIHZhbHVlKTtcbiAgICAgIGN0eC5lbWl0KFwiY2hhbmdlXCIsIHZhbHVlKTtcbiAgICB9XG4gICAgcmV0dXJuIHtcbiAgICAgIHVpLFxuICAgICAgb3B0aW9ucyxcbiAgICAgIHN1Ym1pdFxuICAgIH07XG4gIH1cbn0pO1xuPC9zY3JpcHQ+XG5cbjxzdHlsZSBsYW5nPVwibGVzc1wiPlxuLmZzLXRhYmxlLWNvbHVtbnMtZml4ZWQtY29udHJvbGxlciB7XG4gIC5mcy1idXR0b24ge1xuICAgIHBhZGRpbmc6IDJweCAhaW1wb3J0YW50O1xuICAgIGZvbnQtc2l6ZTogMTBweDtcbiAgICBtaW4taGVpZ2h0OiBhdXRvO1xuICB9XG59XG48L3N0eWxlPlxuIiwiPHRlbXBsYXRlPlxuICA8Y29tcG9uZW50IDppcz1cInVpLmJ1dHRvbkdyb3VwLm5hbWVcIiBjbGFzcz1cImZzLXRhYmxlLWNvbHVtbnMtZml4ZWQtY29udHJvbGxlclwiPlxuICAgIDxmcy1idXR0b25cbiAgICAgIHYtZm9yPVwib3B0aW9uIG9mIG9wdGlvbnNcIlxuICAgICAgOmtleT1cIm9wdGlvbi5pY29uXCJcbiAgICAgIDp0eXBlPVwibW9kZWxWYWx1ZSA9PT0gb3B0aW9uLnZhbHVlID8gJ3ByaW1hcnknIDogJ2RlZmF1bHQnXCJcbiAgICAgIDppY29uPVwib3B0aW9uLmljb25cIlxuICAgICAgc2l6ZT1cInNtYWxsXCJcbiAgICAgIEBjbGljaz1cInN1Ym1pdChvcHRpb24udmFsdWUpXCJcbiAgICAvPlxuICA8L2NvbXBvbmVudD5cbjwvdGVtcGxhdGU+XG5cbjxzY3JpcHQgbGFuZz1cInRzXCI+XG5pbXBvcnQgeyBjb21wdXRlZCwgZGVmaW5lQ29tcG9uZW50LCByZWYgfSBmcm9tIFwidnVlXCI7XG5pbXBvcnQgeyB1c2VVaSB9IGZyb20gXCIuLi8uLi8uLi8uLi91c2VcIjtcblxuZXhwb3J0IGRlZmF1bHQgZGVmaW5lQ29tcG9uZW50KHtcbiAgbmFtZTogXCJGc1RhYmxlQ29sdW1uc0ZpeGVkQ29udHJvbGxlclwiLFxuICBwcm9wczoge1xuICAgIG1vZGVsVmFsdWU6IHtcbiAgICAgIGRlZmF1bHQ6IGZhbHNlXG4gICAgfVxuICB9LFxuICBlbWl0czogW1widXBkYXRlOm1vZGVsVmFsdWVcIiwgXCJjaGFuZ2VcIl0sXG4gIHNldHVwKHByb3BzLCBjdHgpIHtcbiAgICBjb25zdCB7IHVpIH0gPSB1c2VVaSgpO1xuICAgIGNvbnN0IG9wdGlvbnMgPSBjb21wdXRlZCgoKSA9PiB7XG4gICAgICByZXR1cm4gW1xuICAgICAgICB7XG4gICAgICAgICAgdmFsdWU6IFwibGVmdFwiLFxuICAgICAgICAgIGljb246IHVpLmljb25zLmxlZnQgLy8gJ2VsLWljb24tYXJyb3ctbGVmdCdcbiAgICAgICAgfSxcbiAgICAgICAge1xuICAgICAgICAgIHZhbHVlOiBmYWxzZSxcbiAgICAgICAgICBpY29uOiB1aS5pY29ucy5jbG9zZSAvLyAnZWwtaWNvbi1jbG9zZSdcbiAgICAgICAgfSxcbiAgICAgICAge1xuICAgICAgICAgIHZhbHVlOiBcInJpZ2h0XCIsXG4gICAgICAgICAgaWNvbjogdWkuaWNvbnMucmlnaHQgLy8gJ2VsLWljb24tYXJyb3ctcmlnaHQnXG4gICAgICAgIH1cbiAgICAgIF07XG4gICAgfSk7XG5cbiAgICBmdW5jdGlvbiBzdWJtaXQodmFsdWU6IGFueSkge1xuICAgICAgY3R4LmVtaXQoXCJ1cGRhdGU6bW9kZWxWYWx1ZVwiLCB2YWx1ZSk7XG4gICAgICBjdHguZW1pdChcImNoYW5nZVwiLCB2YWx1ZSk7XG4gICAgfVxuICAgIHJldHVybiB7XG4gICAgICB1aSxcbiAgICAgIG9wdGlvbnMsXG4gICAgICBzdWJtaXRcbiAgICB9O1xuICB9XG59KTtcbjwvc2NyaXB0PlxuXG48c3R5bGUgbGFuZz1cImxlc3NcIj5cbi5mcy10YWJsZS1jb2x1bW5zLWZpeGVkLWNvbnRyb2xsZXIge1xuICAuZnMtYnV0dG9uIHtcbiAgICBwYWRkaW5nOiAycHggIWltcG9ydGFudDtcbiAgICBmb250LXNpemU6IDEwcHg7XG4gICAgbWluLWhlaWdodDogYXV0bztcbiAgfVxufVxuPC9zdHlsZT5cbiIsIjx0ZW1wbGF0ZT5cbiAgPGRyYWdnYWJsZSA6bGlzdD1cImNvbHVtbnNcIiBpdGVtLWtleT1cImtleVwiIDptb3ZlPVwib25EcmFnZ2FibGVNb3ZlXCI+XG4gICAgPHRlbXBsYXRlICNpdGVtPVwieyBlbGVtZW50LCBpbmRleCB9XCI+XG4gICAgICA8ZGl2PlxuICAgICAgICA8ZGl2XG4gICAgICAgICAgdi1zaG93PVwib3JpZ2luYWxDb2x1bW5zTWFwW2VsZW1lbnQuX19rZXldPy5fX3Nob3cgIT09IGZhbHNlXCJcbiAgICAgICAgICA6dGl0bGU9XCJidWlsZFRleHQoZWxlbWVudClcIlxuICAgICAgICAgIGNsYXNzPVwiY29tcG9uZW50LS1saXN0LWl0ZW1cIlxuICAgICAgICAgIGZsZXg9XCJtYWluOmp1c3RpZnkgY3Jvc3M6Y2VudGVyXCJcbiAgICAgICAgICA6aT1cImluZGV4XCJcbiAgICAgICAgPlxuICAgICAgICAgIDxjb21wb25lbnRcbiAgICAgICAgICAgIDppcz1cInVpLmNoZWNrYm94Lm5hbWVcIlxuICAgICAgICAgICAgOlt1aS5jaGVja2JveC5tb2RlbFZhbHVlXT1cImVsZW1lbnQuc2hvd1wiXG4gICAgICAgICAgICA6ZGlzYWJsZWQ9XCJvcmlnaW5hbENvbHVtbnNNYXBbZWxlbWVudC5fX2tleV0/Ll9fZGlzYWJsZWQgPT09IHRydWVcIlxuICAgICAgICAgICAgY2xhc3M9XCJpdGVtLWxhYmVsXCJcbiAgICAgICAgICAgIDp0aXRsZT1cImJ1aWxkVGV4dChlbGVtZW50KVwiXG4gICAgICAgICAgICBAW2J1aWxkVXBkYXRlS2V5KHVpLmNoZWNrYm94Lm1vZGVsVmFsdWUpXT1cInVwZGF0ZUNoZWNrZWQoZWxlbWVudClcIlxuICAgICAgICAgICAgQGNoYW5nZT1cIm9uQ2hlY2tDaGFuZ2VkXCJcbiAgICAgICAgICA+XG4gICAgICAgICAgICB7eyBidWlsZFRleHQoZWxlbWVudCkgfX1cbiAgICAgICAgICA8L2NvbXBvbmVudD5cbiAgICAgICAgICA8ZGl2IGNsYXNzPVwiaXRlbS1yaWdodFwiPlxuICAgICAgICAgICAgPGZzLXRhYmxlLWNvbHVtbnMtZml4ZWQtY29udHJvbGxlclxuICAgICAgICAgICAgICB2LWlmPVwiaXNSb290XCJcbiAgICAgICAgICAgICAgdi1tb2RlbD1cImVsZW1lbnQuZml4ZWRcIlxuICAgICAgICAgICAgICBmbGV4LWJveD1cIjBcIlxuICAgICAgICAgICAgICBjbGFzcz1cImQyLW1yLTEwXCJcbiAgICAgICAgICAgICAgQGNoYW5nZT1cImZpeGVkQ2hhbmdlKGluZGV4LCAkZXZlbnQpXCJcbiAgICAgICAgICAgIC8+XG4gICAgICAgICAgICA8ZGl2IGZsZXgtYm94PVwiMFwiIGNsYXNzPVwiY29tcG9uZW50LS1saXN0LWl0ZW0taGFuZGxlIGhhbmRsZVwiPlxuICAgICAgICAgICAgICA8ZnMtaWNvbiA6aWNvbj1cInVpLmljb25zLnNvcnRcIiAvPlxuICAgICAgICAgICAgPC9kaXY+XG4gICAgICAgICAgPC9kaXY+XG4gICAgICAgIDwvZGl2PlxuICAgICAgICA8ZGl2IHN0eWxlPVwibWFyZ2luLWxlZnQ6IDIwcHg7IHBhZGRpbmctbGVmdDogMTBweDsgYm9yZGVyLWxlZnQ6IDFweCBzb2xpZCAjZWVlXCI+XG4gICAgICAgICAgPGZzLWNvbHVtbnMtZmlsdGVyLW5lc3QtbGlzdFxuICAgICAgICAgICAgdi1pZj1cImVsZW1lbnQuY2hpbGRyZW5cIlxuICAgICAgICAgICAgOmNvbHVtbnM9XCJlbGVtZW50LmNoaWxkcmVuXCJcbiAgICAgICAgICAgIEBjaGVjay1jaGFuZ2VkPVwib25DaGVja0NoYW5nZWRcIlxuICAgICAgICAgIC8+XG4gICAgICAgIDwvZGl2PlxuICAgICAgPC9kaXY+XG4gICAgPC90ZW1wbGF0ZT5cbiAgPC9kcmFnZ2FibGU+XG48L3RlbXBsYXRlPlxuPHNjcmlwdCBzZXR1cCBsYW5nPVwidHNcIj5cbi8v5LiN6KaB5YigXG4vL0B0cy1pZ25vcmVcbmltcG9ydCBkcmFnZ2FibGUgZnJvbSBcInZ1ZWRyYWdnYWJsZS1lc1wiO1xuaW1wb3J0IEZzVGFibGVDb2x1bW5zRml4ZWRDb250cm9sbGVyIGZyb20gXCIuL2ZzLXRhYmxlLWNvbHVtbnMtZml4ZWQtY29udHJvbGxlci9pbmRleC52dWVcIjtcbmltcG9ydCB7IENvbHVtbnNGaWx0ZXJDb250ZXh0LCBDb2x1bW5zRmlsdGVySXRlbSwgQ29sdW1uc0ZpbHRlclByb3ZpZGVLZXkgfSBmcm9tIFwiLi4vLi4vLi4vZFwiO1xuaW1wb3J0IHsgaW5qZWN0IH0gZnJvbSBcInZ1ZVwiO1xuaW1wb3J0IHsgdXNlVWkgfSBmcm9tIFwiQGZhc3QtY3J1ZC91aS1pbnRlcmZhY2VcIjtcblxuY29uc3QgeyB1aSB9ID0gdXNlVWkoKTtcbmNvbnN0IGVtaXRzID0gZGVmaW5lRW1pdHMoW1wiY2hlY2stY2hhbmdlZFwiLCBcImZpeGVkLWNoYW5nZWRcIl0pO1xudHlwZSBOZXN0TGlzdFByb3BzID0ge1xuICBjb2x1bW5zOiBDb2x1bW5zRmlsdGVySXRlbVtdO1xuICBpc1Jvb3Q/OiBib29sZWFuO1xufTtcbmNvbnN0IHByb3BzID0gd2l0aERlZmF1bHRzKGRlZmluZVByb3BzPE5lc3RMaXN0UHJvcHM+KCksIHtcbiAgaXNSb290OiBmYWxzZVxufSk7XG5jb25zdCB7IG9yaWdpbmFsQ29sdW1ucywgY3VycmVudENvbHVtbnMsIG9yaWdpbmFsQ29sdW1uc01hcCwgdGV4dCwgYWN0aXZlIH0gPVxuICBpbmplY3Q8Q29sdW1uc0ZpbHRlckNvbnRleHQ+KENvbHVtbnNGaWx0ZXJQcm92aWRlS2V5KTtcbmZ1bmN0aW9uIGJ1aWxkVGV4dChlbGVtZW50OiBhbnkpIHtcbiAgcmV0dXJuIGVsZW1lbnQubGFiZWwgfHwgZWxlbWVudC50aXRsZSB8fCBlbGVtZW50LmtleSB8fCB0ZXh0LnZhbHVlLnVubmFtZWQ7XG59XG5cbmZ1bmN0aW9uIG9uRHJhZ2dhYmxlTW92ZShlOiBhbnkpIHtcbiAgY29uc3QgZHJhZ2VkID0gZS5kcmFnZ2VkQ29udGV4dC5lbGVtZW50O1xuICBjb25zdCB0YXJnZXQgPSBlLnJlbGF0ZWRDb250ZXh0LmVsZW1lbnQ7XG4gIGNvbnN0IHNvcnRlZDogQ29sdW1uc0ZpbHRlckl0ZW1bXSA9IFtdO1xuICBmb3IgKGNvbnN0IGl0ZW0gb2YgY3VycmVudENvbHVtbnMudmFsdWUpIHtcbiAgICBpZiAoaXRlbS5rZXkgPT09IGRyYWdlZC5rZXkpIHtcbiAgICAgIHNvcnRlZC5wdXNoKHRhcmdldCk7XG4gICAgfSBlbHNlIGlmIChpdGVtLmtleSA9PT0gdGFyZ2V0LmtleSkge1xuICAgICAgc29ydGVkLnB1c2goZHJhZ2VkKTtcbiAgICB9IGVsc2Uge1xuICAgICAgc29ydGVkLnB1c2goaXRlbSk7XG4gICAgfVxuICB9XG4gIC8v55yLa2V555qE5o6S5YiX5piv5ZCm5q2j5bi4XG4gIGxldCBsZWZ0SW5kZXggPSAwO1xuICBsZXQgcmlnaHRJbmRleCA9IHNvcnRlZC5sZW5ndGggLSAxO1xuICBsZXQgbWluTm90SW5kZXggPSBzb3J0ZWQubGVuZ3RoIC0gMTtcbiAgbGV0IG1heE5vdEluZGV4ID0gMDtcbiAgZm9yIChsZXQgaSA9IDA7IGkgPCBzb3J0ZWQubGVuZ3RoOyBpKyspIHtcbiAgICBjb25zdCBpdGVtID0gc29ydGVkW2ldO1xuICAgIGlmIChpdGVtLmZpeGVkID09PSBcImxlZnRcIikge1xuICAgICAgbGVmdEluZGV4ID0gaTtcbiAgICB9IGVsc2UgaWYgKGl0ZW0uZml4ZWQgPT09IFwicmlnaHRcIikge1xuICAgICAgcmlnaHRJbmRleCA9IHJpZ2h0SW5kZXggPiBpID8gaSA6IHJpZ2h0SW5kZXg7XG4gICAgfSBlbHNlIHtcbiAgICAgIG1pbk5vdEluZGV4ID0gbWluTm90SW5kZXggPiBpID8gaSA6IG1pbk5vdEluZGV4O1xuICAgICAgbWF4Tm90SW5kZXggPSBtYXhOb3RJbmRleCA8IGkgPyBpIDogbWF4Tm90SW5kZXg7XG4gICAgfVxuICB9XG5cbiAgaWYgKG1pbk5vdEluZGV4IDwgbGVmdEluZGV4IHx8IG1heE5vdEluZGV4ID4gcmlnaHRJbmRleCkge1xuICAgIC8vdWkubWVzc2FnZS5lcnJvcihcIumdnmZpeGVk5a2X5q615LiN5b6X6LaK6L+HZml4ZWTlrZfmrrXnmoTpobrluo9cIik7XG4gICAgcmV0dXJuIGZhbHNlO1xuICB9XG59XG5mdW5jdGlvbiBidWlsZFVwZGF0ZUtleShrZXkpIHtcbiAgcmV0dXJuIFwidXBkYXRlOlwiICsga2V5O1xufVxuXG5mdW5jdGlvbiBmaW5kRnJvbVRyZWUodHJlZTogYW55W10sIGtleTogc3RyaW5nKSB7XG4gIGZvciAoY29uc3QgaXRlbSBvZiB0cmVlKSB7XG4gICAgaWYgKGl0ZW0ua2V5ID09PSBrZXkpIHtcbiAgICAgIHJldHVybiBpdGVtO1xuICAgIH1cbiAgICBpZiAoaXRlbS5jaGlsZHJlbikge1xuICAgICAgY29uc3QgcmVzdWx0ID0gZmluZEZyb21UcmVlKGl0ZW0uY2hpbGRyZW4sIGtleSk7XG4gICAgICBpZiAocmVzdWx0KSB7XG4gICAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgICB9XG4gICAgfVxuICB9XG4gIHJldHVybiBudWxsO1xufVxuZnVuY3Rpb24gdXBkYXRlQ2hlY2tlZChlbGVtZW50OiBhbnkpIHtcbiAgZWxlbWVudC5zaG93ID0gIWVsZW1lbnQuc2hvdztcbiAgLy/nuqfogZTpgInkuK3lkozlj5bmtohcblxuICBmdW5jdGlvbiB1cGRhdGVDaGlsZHJlbihlbGVtZW50OiBhbnkpIHtcbiAgICBpZiAoZWxlbWVudC5jaGlsZHJlbikge1xuICAgICAgZWxlbWVudC5jaGlsZHJlbi5mb3JFYWNoKChlOiBhbnkpID0+IHtcbiAgICAgICAgaWYgKCFlLl9fc2hvdyB8fCBlLl9fZGlzYWJsZWQpIHtcbiAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cbiAgICAgICAgZS5zaG93ID0gZWxlbWVudC5zaG93O1xuICAgICAgICB1cGRhdGVDaGlsZHJlbihlKTtcbiAgICAgIH0pO1xuICAgIH1cbiAgfVxuICB1cGRhdGVDaGlsZHJlbihlbGVtZW50KTtcblxuICBmdW5jdGlvbiB1cGRhdGVQYXJlbnQoZWxlbWVudCkge1xuICAgIGlmIChlbGVtZW50Ll9fcGFyZW50KSB7XG4gICAgICBjb25zdCBwYXJlbnQgPSBlbGVtZW50Ll9fcGFyZW50O1xuICAgICAgaWYgKHBhcmVudCkge1xuICAgICAgICBwYXJlbnQuc2hvdyA9IHBhcmVudC5jaGlsZHJlbi5maWx0ZXIoKGU6IGFueSkgPT4gZS5fX3Nob3cgJiYgZS5zaG93ID09PSB0cnVlKS5sZW5ndGggPiAwO1xuICAgICAgICB1cGRhdGVQYXJlbnQocGFyZW50KTtcbiAgICAgIH1cbiAgICB9XG4gIH1cbiAgdXBkYXRlUGFyZW50KGVsZW1lbnQpO1xufVxuZnVuY3Rpb24gb25DaGVja0NoYW5nZWQoKSB7XG4gIGVtaXRzKFwiY2hlY2stY2hhbmdlZFwiKTtcbn1cbmZ1bmN0aW9uIGZpeGVkQ2hhbmdlKGluZGV4OiBudW1iZXIsIHZhbHVlOiBhbnkpIHtcbiAgZW1pdHMoXCJmaXhlZC1jaGFuZ2VkXCIsIGluZGV4LCB2YWx1ZSk7XG59XG48L3NjcmlwdD5cbiIsIjx0ZW1wbGF0ZT5cbiAgPGNvbXBvbmVudFxuICAgIDppcz1cInVpLmRyYXdlci5uYW1lXCJcbiAgICBjbGFzcz1cImZzLWNvbHVtbnMtZmlsdGVyLWxheW91dC1kZWZhdWx0XCJcbiAgICA6dGl0bGU9XCJ0ZXh0LnRpdGxlXCJcbiAgICB2LWJpbmQ9XCJkcmF3ZXJCaW5kXCJcbiAgICBhcHBlbmQtdG8tYm9keVxuICA+XG4gICAgPGNvbXBvbmVudFxuICAgICAgOmlzPVwidWkuZHJhd2VyLmhhc0NvbnRlbnRXcmFwIHx8ICdkaXYnXCJcbiAgICAgIGNsYXNzPVwiZnMtZHJhd2VyLXdyYXBwZXIgZnMtdGFibGUtY29sdW1ucy1maWx0ZXJcIlxuICAgICAgOnRpdGxlPVwidGV4dC50aXRsZVwiXG4gICAgPlxuICAgICAgPGNvbXBvbmVudCA6aXM9XCJ1aS5jYXJkLm5hbWVcIiBzaGFkb3c9XCJuZXZlclwiPlxuICAgICAgICA8ZGl2IGNsYXNzPVwiY29tcG9uZW50LS1saXN0XCI+XG4gICAgICAgICAgPGRpdiBrZXk9XCJfX2ZpcnN0X19cIiBjbGFzcz1cImNvbXBvbmVudC0tbGlzdC1pdGVtXCIgZmxleD1cIm1haW46anVzdGlmeSBjcm9zczpjZW50ZXJcIj5cbiAgICAgICAgICAgIDxzcGFuIDpzcGFuPVwiMTJcIj5cbiAgICAgICAgICAgICAgPCEtLSDlhajpgIkg5Y+N6YCJIC0tPlxuICAgICAgICAgICAgICA8Y29tcG9uZW50IDppcz1cInVpLmNoZWNrYm94Lm5hbWVcIiA6aW5kZXRlcm1pbmF0ZT1cImlzSW5kZXRlcm1pbmF0ZVwiIHYtYmluZD1cImNoZWNrQWxsQmluZFwiPlxuICAgICAgICAgICAgICAgIHt7IHNob3dMZW5ndGggfX0gLyB7eyBhbGxMZW5ndGggfX1cbiAgICAgICAgICAgICAgPC9jb21wb25lbnQ+XG4gICAgICAgICAgICA8L3NwYW4+XG4gICAgICAgICAgICA8c3BhbiBjbGFzcz1cInRpdGxlXCI+e3sgdGV4dC5maXhlZCB9fSAvIHt7IHRleHQub3JkZXIgfX08L3NwYW4+XG4gICAgICAgICAgPC9kaXY+XG5cbiAgICAgICAgICA8ZnMtY29sdW1ucy1maWx0ZXItbmVzdC1saXN0XG4gICAgICAgICAgICA6Y29sdW1ucz1cImN1cnJlbnRDb2x1bW5zXCJcbiAgICAgICAgICAgIDppcy1yb290PVwidHJ1ZVwiXG4gICAgICAgICAgICBAY2hlY2stY2hhbmdlZD1cImFsbENoZWNrZWRVcGRhdGVcIlxuICAgICAgICAgICAgQGZpeGVkLWNoYW5nZWQ9XCJmaXhlZENoYW5nZVwiXG4gICAgICAgICAgPjwvZnMtY29sdW1ucy1maWx0ZXItbmVzdC1saXN0PlxuICAgICAgICA8L2Rpdj5cbiAgICAgIDwvY29tcG9uZW50PlxuICAgICAgPHNsb3QgbmFtZT1cImJ1dHRvbnNcIj48L3Nsb3Q+XG4gICAgPC9jb21wb25lbnQ+XG4gIDwvY29tcG9uZW50PlxuPC90ZW1wbGF0ZT5cblxuPHNjcmlwdCBsYW5nPVwidHNcIiBzZXR1cD5cbmltcG9ydCBfIGZyb20gXCJsb2Rhc2gtZXNcIjtcbi8v5LiN6KaB5YigXG4vL0B0cy1pZ25vcmVcbmltcG9ydCBkcmFnZ2FibGUgZnJvbSBcInZ1ZWRyYWdnYWJsZS1lc1wiO1xuaW1wb3J0IHsgdXNlVWkgfSBmcm9tIFwiLi4vLi4vLi4vdXNlXCI7XG5pbXBvcnQgeyBjb21wdXRlZCwgaW5qZWN0LCByZWYsIHdhdGNoIH0gZnJvbSBcInZ1ZVwiO1xuaW1wb3J0IHsgQ29sdW1uc0ZpbHRlclByb3ZpZGVLZXksIENvbHVtbnNGaWx0ZXJDb250ZXh0LCBDb2x1bW5zRmlsdGVyQ29udGFpbmVyUHJvcHMgfSBmcm9tIFwiLi4vLi4vLi4vZC9cIjtcbmltcG9ydCBGc0NvbHVtbnNGaWx0ZXJOZXN0TGlzdCBmcm9tIFwiLi9mcy1jb2x1bW5zLWZpbHRlci1uZXN0LWxpc3QudnVlXCI7XG5cbmNvbnN0IHsgdWkgfSA9IHVzZVVpKCk7XG5cbmNvbnN0IHsgb3JpZ2luYWxDb2x1bW5zLCBjdXJyZW50Q29sdW1ucywgdGV4dCwgYWN0aXZlIH0gPSBpbmplY3Q8Q29sdW1uc0ZpbHRlckNvbnRleHQ+KENvbHVtbnNGaWx0ZXJQcm92aWRlS2V5KTtcbmNvbnN0IHByb3BzID0gZGVmaW5lUHJvcHM8Q29sdW1uc0ZpbHRlckNvbnRhaW5lclByb3BzPigpO1xuY29uc3QgZHJhd2VyQmluZCA9IGNvbXB1dGVkKCgpID0+IHtcbiAgcmV0dXJuIF8ubWVyZ2UoXG4gICAge1xuICAgICAgW3VpLmRyYXdlci52aXNpYmxlXTogYWN0aXZlLnZhbHVlLFxuICAgICAgW1wib25VcGRhdGU6XCIgKyB1aS5kcmF3ZXIudmlzaWJsZV06IChlOiBhbnkpID0+IHtcbiAgICAgICAgYWN0aXZlLnZhbHVlID0gZTtcbiAgICAgIH0sXG4gICAgICBbdWkuZHJhd2VyLndpZHRoXTogcHJvcHMud2lkdGggfHwgXCI0MDBweFwiXG4gICAgfSxcbiAgICBwcm9wcy5kcmF3ZXJcbiAgKTtcbn0pO1xuXG5jb25zdCBjaGVja0FsbCA9IHJlZihmYWxzZSk7XG4vLyDlhajpgInlkozlj43pgInlj5HnlJ/lj5jljJbml7bop6blj5FcbmZ1bmN0aW9uIG9uQ2hlY2tBbGxDaGFuZ2UodmFsdWU6IGFueSkge1xuICBjaGVja0FsbC52YWx1ZSA9IHZhbHVlO1xuICBjdXJyZW50Q29sdW1ucy52YWx1ZSA9IGN1cnJlbnRDb2x1bW5zLnZhbHVlLm1hcCgoZTogYW55KSA9PiB7XG4gICAgaWYgKCFlLl9fc2hvdyB8fCBlLl9fZGlzYWJsZWQpIHtcbiAgICAgIHJldHVybiBlO1xuICAgIH1cbiAgICBlLnNob3cgPSB2YWx1ZTtcbiAgICByZXR1cm4gZTtcbiAgfSk7XG59XG5cbmNvbnN0IGNoZWNrQWxsQmluZCA9IGNvbXB1dGVkKCgpID0+IHtcbiAgcmV0dXJuIHtcbiAgICBbdWkuY2hlY2tib3gubW9kZWxWYWx1ZV06IGNoZWNrQWxsLnZhbHVlLFxuICAgIFtcIm9uVXBkYXRlOlwiICsgdWkuY2hlY2tib3gubW9kZWxWYWx1ZV06ICh2OiBhbnkpID0+IHtcbiAgICAgIG9uQ2hlY2tBbGxDaGFuZ2Uodik7XG4gICAgfVxuICB9O1xufSk7XG5cbmNvbnN0IHNob3dMZW5ndGggPSBjb21wdXRlZCgoKSA9PiB7XG4gIHJldHVybiBjdXJyZW50Q29sdW1ucy52YWx1ZS5maWx0ZXIoKGU6IGFueSkgPT4gZS5fX3Nob3cgJiYgZS5zaG93ID09PSB0cnVlKS5sZW5ndGg7XG59KTtcbmNvbnN0IGFsbExlbmd0aCA9IGNvbXB1dGVkKCgpID0+IHtcbiAgcmV0dXJuIGN1cnJlbnRDb2x1bW5zLnZhbHVlLmZpbHRlcigoZTogYW55KSA9PiBlLl9fc2hvdykubGVuZ3RoO1xufSk7XG5jb25zdCBpc0luZGV0ZXJtaW5hdGUgPSBjb21wdXRlZCgoKSA9PiB7XG4gIHJldHVybiBzaG93TGVuZ3RoLnZhbHVlID4gMCAmJiBzaG93TGVuZ3RoLnZhbHVlIDwgYWxsTGVuZ3RoLnZhbHVlO1xufSk7XG5cbndhdGNoKFxuICAoKSA9PiB7XG4gICAgY3VycmVudENvbHVtbnMudmFsdWU7XG4gIH0sXG4gICgpID0+IHtcbiAgICBhbGxDaGVja2VkVXBkYXRlKCk7XG4gIH0sXG4gIHsgaW1tZWRpYXRlOiB0cnVlIH1cbik7XG5cbi8vIGZpeGVkIOWPmOWMluaXtuinpuWPkVxuZnVuY3Rpb24gZml4ZWRDaGFuZ2UoaW5kZXg6IG51bWJlciwgdmFsdWU6IGFueSkge1xuICBpZiAodmFsdWUpIHtcbiAgICBjdXJyZW50Q29sdW1ucy52YWx1ZVtpbmRleF0uc2hvdyA9IHRydWU7XG4gIH1cbiAgaWYgKHZhbHVlID09PSBcImxlZnRcIikge1xuICAgIGN1cnJlbnRDb2x1bW5zLnZhbHVlLnVuc2hpZnQoY3VycmVudENvbHVtbnMudmFsdWUuc3BsaWNlKGluZGV4LCAxKVswXSk7XG4gIH1cbiAgaWYgKHZhbHVlID09PSBcInJpZ2h0XCIpIHtcbiAgICBjdXJyZW50Q29sdW1ucy52YWx1ZS5wdXNoKGN1cnJlbnRDb2x1bW5zLnZhbHVlLnNwbGljZShpbmRleCwgMSlbMF0pO1xuICB9XG4gIGFsbENoZWNrZWRVcGRhdGUoKTtcbn1cbmZ1bmN0aW9uIGFsbENoZWNrZWRVcGRhdGUoKSB7XG4gIGNoZWNrQWxsLnZhbHVlID0gc2hvd0xlbmd0aC52YWx1ZSA9PT0gYWxsTGVuZ3RoLnZhbHVlO1xufVxuPC9zY3JpcHQ+XG5cbjxzdHlsZSBsYW5nPVwibGVzc1wiPjwvc3R5bGU+XG4iLCI8dGVtcGxhdGU+XG4gIDxkaXYgY2xhc3M9XCJmcy1zZWFyY2gtY29sIGZzLXNlYXJjaC1idG5zXCI+XG4gICAgPGNvbXBvbmVudCA6aXM9XCJ1aS5mb3JtSXRlbS5uYW1lXCI+XG4gICAgICA8dGVtcGxhdGUgdi1mb3I9XCIoaXRlbSwgaW5kZXgpIGluIGJ1dHRvbnNcIiA6a2V5PVwiaW5kZXhcIj5cbiAgICAgICAgPGZzLWJ1dHRvbiB2LWlmPVwiaXRlbS5zaG93XCIgdi1iaW5kPVwiaXRlbVwiIEBjbGljaz1cIml0ZW0uX2NsaWNrKClcIiAvPlxuICAgICAgPC90ZW1wbGF0ZT5cbiAgICA8L2NvbXBvbmVudD5cbiAgPC9kaXY+XG48L3RlbXBsYXRlPlxuPHNjcmlwdCBsYW5nPVwidHNcIj5cbmltcG9ydCB7IGRlZmluZUNvbXBvbmVudCB9IGZyb20gXCJ2dWVcIjtcbmltcG9ydCB7IHVzZVVpIH0gZnJvbSBcIi4uLy4uL3VzZVwiO1xuXG5leHBvcnQgZGVmYXVsdCBkZWZpbmVDb21wb25lbnQoe1xuICBuYW1lOiBcIkZzU2VhcmNoQnV0dG9uc1wiLFxuICBpbmhlcml0QXR0cnM6IGZhbHNlLFxuICBwcm9wczoge1xuICAgIGJ1dHRvbnM6IHtcbiAgICAgIHR5cGU6IE9iamVjdFxuICAgIH1cbiAgfSxcbiAgc2V0dXAoKSB7XG4gICAgY29uc3QgeyB1aSB9ID0gdXNlVWkoKTtcbiAgICByZXR1cm4geyB1aSB9O1xuICB9XG59KTtcbjwvc2NyaXB0PlxuIiwiPHRlbXBsYXRlPlxuICA8ZGl2IGNsYXNzPVwiZnMtc2VhcmNoLWNvbCBmcy1zZWFyY2gtYnRuc1wiPlxuICAgIDxjb21wb25lbnQgOmlzPVwidWkuZm9ybUl0ZW0ubmFtZVwiPlxuICAgICAgPHRlbXBsYXRlIHYtZm9yPVwiKGl0ZW0sIGluZGV4KSBpbiBidXR0b25zXCIgOmtleT1cImluZGV4XCI+XG4gICAgICAgIDxmcy1idXR0b24gdi1pZj1cIml0ZW0uc2hvd1wiIHYtYmluZD1cIml0ZW1cIiBAY2xpY2s9XCJpdGVtLl9jbGljaygpXCIgLz5cbiAgICAgIDwvdGVtcGxhdGU+XG4gICAgPC9jb21wb25lbnQ+XG4gIDwvZGl2PlxuPC90ZW1wbGF0ZT5cbjxzY3JpcHQgbGFuZz1cInRzXCI+XG5pbXBvcnQgeyBkZWZpbmVDb21wb25lbnQgfSBmcm9tIFwidnVlXCI7XG5pbXBvcnQgeyB1c2VVaSB9IGZyb20gXCIuLi8uLi91c2VcIjtcblxuZXhwb3J0IGRlZmF1bHQgZGVmaW5lQ29tcG9uZW50KHtcbiAgbmFtZTogXCJGc1NlYXJjaEJ1dHRvbnNcIixcbiAgaW5oZXJpdEF0dHJzOiBmYWxzZSxcbiAgcHJvcHM6IHtcbiAgICBidXR0b25zOiB7XG4gICAgICB0eXBlOiBPYmplY3RcbiAgICB9XG4gIH0sXG4gIHNldHVwKCkge1xuICAgIGNvbnN0IHsgdWkgfSA9IHVzZVVpKCk7XG4gICAgcmV0dXJuIHsgdWkgfTtcbiAgfVxufSk7XG48L3NjcmlwdD5cbiIsIjx0ZW1wbGF0ZT5cbiAgPGRpdiBjbGFzcz1cImZzLXNlYXJjaCBmcy1zZWFyY2gtdjJcIj5cbiAgICA8Y29tcG9uZW50IDppcz1cInVpLmNvbGxhcHNlVHJhbnNpdGlvbi5uYW1lXCI+XG4gICAgICA8Y29tcG9uZW50XG4gICAgICAgIDppcz1cInVpLmZvcm0ubmFtZVwiXG4gICAgICAgIHJlZj1cInNlYXJjaEZvcm1SZWZcIlxuICAgICAgICA6bW9kZWw9XCJmb3JtRGF0YVwiXG4gICAgICAgIG9uc3VibWl0PVwiZXZlbnQucHJldmVudERlZmF1bHQoKTtcIlxuICAgICAgICB2LWJpbmQ9XCJvcHRpb25zXCJcbiAgICAgICAgOnJ1bGVzPVwiY29tcHV0ZWRSdWxlc1wiXG4gICAgICAgIGNsYXNzPVwiZnMtc2VhcmNoLWZvcm1cIlxuICAgICAgICBAY29tcG9zaXRpb25zdGFydD1cImNoYW5nZUlucHV0RXZlbnREaXNhYmxlZCh0cnVlKVwiXG4gICAgICAgIEBjb21wb3NpdGlvbmVuZD1cImNoYW5nZUlucHV0RXZlbnREaXNhYmxlZChmYWxzZSlcIlxuICAgICAgPlxuICAgICAgICA8Y29tcG9uZW50XG4gICAgICAgICAgOmlzPVwiY29udGFpbmVyPy5pcyB8fCAnZnMtc2VhcmNoLWxheW91dC1kZWZhdWx0J1wiXG4gICAgICAgICAgdi1pZj1cInNob3cgIT09IGZhbHNlXCJcbiAgICAgICAgICB2LWJpbmQ9XCJjb250YWluZXJcIlxuICAgICAgICAgIDpjb2x1bW5zPVwiY29tcHV0ZWRDb2x1bW5zXCJcbiAgICAgICAgICA6Z2V0LWNvbnRleHQtZm49XCJnZXRDb250ZXh0Rm5cIlxuICAgICAgICA+XG4gICAgICAgICAgPHRlbXBsYXRlICNzZWFyY2gtYnV0dG9ucz5cbiAgICAgICAgICAgIDxkaXYgY2xhc3M9XCJmcy1zZWFyY2gtYnV0dG9uc1wiPlxuICAgICAgICAgICAgICA8dGVtcGxhdGUgdi1mb3I9XCIoaXRlbSwgaW5kZXgpIGluIGNvbXB1dGVkQnV0dG9uc1wiIDprZXk9XCJpbmRleFwiPlxuICAgICAgICAgICAgICAgIDxmcy1idXR0b24gdi1pZj1cIml0ZW0uc2hvdyAhPT0gZmFsc2VcIiB2LWJpbmQ9XCJpdGVtXCIgQGNsaWNrPVwiaXRlbS5fY2xpY2soKVwiIC8+XG4gICAgICAgICAgICAgIDwvdGVtcGxhdGU+XG4gICAgICAgICAgICA8L2Rpdj5cbiAgICAgICAgICA8L3RlbXBsYXRlPlxuXG4gICAgICAgICAgPHRlbXBsYXRlIHYtaWY9XCJzbG90c1snc2VhcmNoLWxlZnQnXVwiICNzZWFyY2gtbGVmdD5cbiAgICAgICAgICAgIDxmcy1zbG90LXJlbmRlciA6c2xvdHM9XCJzbG90c1snc2VhcmNoLWxlZnQnXVwiIDpzY29wZT1cImdldENvbnRleHRGbigpXCIgLz5cbiAgICAgICAgICA8L3RlbXBsYXRlPlxuICAgICAgICAgIDx0ZW1wbGF0ZSB2LWlmPVwic2xvdHNbJ3NlYXJjaC1taWRkbGUnXVwiICNzZWFyY2gtbWlkZGxlPlxuICAgICAgICAgICAgPGZzLXNsb3QtcmVuZGVyIDpzbG90cz1cInNsb3RzWydzZWFyY2gtbWlkZGxlJ11cIiA6c2NvcGU9XCJnZXRDb250ZXh0Rm4oKVwiIC8+XG4gICAgICAgICAgPC90ZW1wbGF0ZT5cbiAgICAgICAgICA8dGVtcGxhdGUgdi1pZj1cInNsb3RzWydzZWFyY2gtcmlnaHQnXVwiICNzZWFyY2gtcmlnaHQ+XG4gICAgICAgICAgICA8ZnMtc2xvdC1yZW5kZXIgOnNsb3RzPVwic2xvdHNbJ3NlYXJjaC1yaWdodCddXCIgOnNjb3BlPVwiZ2V0Q29udGV4dEZuKClcIiAvPlxuICAgICAgICAgIDwvdGVtcGxhdGU+XG4gICAgICAgIDwvY29tcG9uZW50PlxuICAgICAgPC9jb21wb25lbnQ+XG4gICAgPC9jb21wb25lbnQ+XG4gIDwvZGl2PlxuPC90ZW1wbGF0ZT5cblxuPHNjcmlwdCBsYW5nPVwidHN4XCI+XG5pbXBvcnQgeyBjb21wdXRlZCwgZGVmaW5lQ29tcG9uZW50LCBuZXh0VGljaywgcmVhY3RpdmUsIHJlZiwgUmVmLCB1bnJlZiwgd2F0Y2ggfSBmcm9tIFwidnVlXCI7XG5pbXBvcnQgXyBmcm9tIFwibG9kYXNoLWVzXCI7XG5pbXBvcnQgeyB1c2VDb21wdXRlIH0gZnJvbSBcIi4uLy4uL3VzZS91c2UtY29tcHV0ZVwiO1xuaW1wb3J0IHsgdXNlSTE4biB9IGZyb20gXCIuLi8uLi9sb2NhbGVcIjtcbmltcG9ydCBsb2dnZXIgZnJvbSBcIi4uLy4uL3V0aWxzL3V0aWwubG9nXCI7XG5pbXBvcnQgRnNTZWFyY2hCdXR0b25zIGZyb20gXCIuL2J1dHRvbnMudnVlXCI7XG5pbXBvcnQgeyBDb25zdGFudHMgfSBmcm9tIFwiLi4vLi4vdXRpbHMvdXRpbC5jb25zdGFudHNcIjtcbmltcG9ydCB7XG4gIEJ1dHRvbnNQcm9wcyxcbiAgU2VhcmNoRXZlbnRDb250ZXh0LFxuICBTZWFyY2hJdGVtUHJvcHMsXG4gIFR5cGVNYXAsXG4gIFZhbHVlQ2hhbmdlQ29udGV4dCxcbiAgVmFsdWVDaGFuZ2VIYW5kbGVcbn0gZnJvbSBcIi4uLy4uL2RcIjtcbmltcG9ydCB7IHVzZVVpIH0gZnJvbSBcIi4uLy4uL3VzZS91c2UtdWlcIjtcbmltcG9ydCB7IHVzZU1lcmdlIH0gZnJvbSBcIi4uLy4uL3VzZS91c2UtbWVyZ2VcIjtcblxuLyoqXG4gKiDmn6Xor6LmoYbnu4Tku7ZcbiAqL1xuZXhwb3J0IGRlZmF1bHQgZGVmaW5lQ29tcG9uZW50KHtcbiAgbmFtZTogXCJGc1NlYXJjaFwiLFxuICBjb21wb25lbnRzOiB7IEZzU2VhcmNoQnV0dG9ucyB9LFxuICBpbmhlcml0QXR0cnM6IGZhbHNlLFxuICBwcm9wczoge1xuICAgIC8qKlxuICAgICAqIOW4g+WxgOWuueWZqFxuICAgICAqL1xuICAgIGNvbnRhaW5lcjoge1xuICAgICAgdHlwZTogT2JqZWN0XG4gICAgfSxcbiAgICAvKipcbiAgICAgKiDliJ3lp4vmn6Xor6LmnaHku7ZcbiAgICAgKiDngrnlh7vph43nva7vvIzkvJrph43nva7miJDor6XmnaHku7ZcbiAgICAgKi9cbiAgICBpbml0aWFsRm9ybToge1xuICAgICAgdHlwZTogT2JqZWN0XG4gICAgfSxcbiAgICAvKipcbiAgICAgKiDmoKHpqozlkI7nmoTmn6Xor6LooajljZXmlbDmja5cbiAgICAgKi9cbiAgICB2YWxpZGF0ZWRGb3JtOiB7XG4gICAgICB0eXBlOiBPYmplY3RcbiAgICB9LFxuICAgIC8qKlxuICAgICAqIOihqOWNleWPguaVsFxuICAgICAqIOaUr+aMgWVsLWZvcm0gfCBhLWZvcm3nmoTlsZ7mgKdcbiAgICAgKi9cbiAgICBvcHRpb25zOiB7XG4gICAgICB0eXBlOiBPYmplY3RcbiAgICB9LFxuICAgIC8qKlxuICAgICAqIOafpeivouWtl+autemFjee9rlxuICAgICAqL1xuICAgIGNvbHVtbnM6IHtcbiAgICAgIHR5cGU6IE9iamVjdFxuICAgIH0sXG4gICAgLyoqXG4gICAgICog5oyJ6ZKu6YWN572uLOWPr+S7peagueaNrm9yZGVy5o6S5bqPXG4gICAgICogYHtzZWFyY2g6ey4uLkZzQnV0dG9ufSxyZXNldDp7Li4uRnNCdXR0b259fWBcbiAgICAgKi9cbiAgICBidXR0b25zOiB7XG4gICAgICB0eXBlOiBPYmplY3RcbiAgICB9LFxuICAgIC8qKlxuICAgICAqIOeCueWHu+mHjee9ruWQjuaYr+WQpueri+WNs+inpuWPkeafpeivolxuICAgICAqL1xuICAgIHNlYXJjaEFmdGVyUmVzZXQ6IHtcbiAgICAgIHR5cGU6IEJvb2xlYW4sXG4gICAgICBkZWZhdWx0OiB0cnVlXG4gICAgfSxcbiAgICAvKipcbiAgICAgKiDmmK/lkKblvIDlkK/oh6rliqjmn6Xor6JcbiAgICAgKi9cbiAgICBhdXRvU2VhcmNoOiB7XG4gICAgICB0eXBlOiBCb29sZWFuLFxuICAgICAgZGVmYXVsdDogdHJ1ZVxuICAgIH0sXG4gICAgLyoqXG4gICAgICog6Ieq5Yqo5p+l6K+i77yM6Ziy5oqW6K6+572uXG4gICAgICog5LygZmFsc2XliJnlhbPpl63oh6rliqjmn6Xor6JcbiAgICAgKi9cbiAgICBkZWJvdW5jZToge1xuICAgICAgdHlwZTogW0Jvb2xlYW4sIE9iamVjdF0sXG4gICAgICBkZWZhdWx0OiB1bmRlZmluZWRcbiAgICB9LFxuICAgIC8qKlxuICAgICAqIOaPkuanvVxuICAgICAqL1xuICAgIHNsb3RzOiB7XG4gICAgICB0eXBlOiBPYmplY3QsXG4gICAgICBkZWZhdWx0KCkge1xuICAgICAgICByZXR1cm4ge307XG4gICAgICB9XG4gICAgfSxcbiAgICAvKipcbiAgICAgKiDmmK/lkKbmmL7npLrmn6Xor6LmoYZcbiAgICAgKi9cbiAgICBzaG93OiB7XG4gICAgICB0eXBlOiBCb29sZWFuLFxuICAgICAgZGVmYXVsdDogdHJ1ZVxuICAgIH0sXG4gICAgLyoqXG4gICAgICog5piv5ZCm5ZCv55So5qCh6aqMXG4gICAgICovXG4gICAgdmFsaWRhdGU6IHtcbiAgICAgIGRlZmF1bHQ6IGZhbHNlXG4gICAgfSxcblxuICAgIC8qKlxuICAgICAqIOaYr+WQpuS7u+aEj+WAvOWPmOWMluWwseinpuWPkeagoemqjFxuICAgICAqL1xuICAgIHZhbGlkYXRlT25DaGFuZ2U6IHtcbiAgICAgIGRlZmF1bHQ6IHRydWUsXG4gICAgICB0eXBlOiBCb29sZWFuXG4gICAgfSxcbiAgICAvKipcbiAgICAgKiDliJfnmoTlrr3luqborr7nva7vvIxzcGFuPXh4XG4gICAgICovXG4gICAgY29sOiB7fSxcblxuICAgIC8qKlxuICAgICAqIOe7n+S4gOWtl+auteeahGZvcm1JdGVt5bGe5oCnXG4gICAgICovXG4gICAgZm9ybUl0ZW06IHtcbiAgICAgIHR5cGU6IE9iamVjdCxcbiAgICAgIGRlZmF1bHQ6IHVuZGVmaW5lZFxuICAgIH1cbiAgfSxcbiAgZW1pdHM6IFtcbiAgICAvKipcbiAgICAgKiDmn6Xor6Lkuovku7ZcbiAgICAgKiovXG4gICAgXCJzZWFyY2hcIixcbiAgICAvKipcbiAgICAgKiDmn6Xor6Lkuovku7bvvIzmraTkuovku7bkvpvns7vnu5/osIPnlKhcbiAgICAgKi9cbiAgICBcIl9zZWFyY2hcIixcbiAgICAvKipcbiAgICAgKiDph43nva7kuovku7bvvIzkvpvnlKjmiLfkvb/nlKhcbiAgICAgKiovXG4gICAgXCJyZXNldFwiLFxuICAgIC8qKlxuICAgICAqIOmHjee9ruS6i+S7tu+8jOatpOS6i+S7tuS+m+ezu+e7n+iwg+eUqFxuICAgICAqL1xuICAgIFwiX3Jlc2V0XCIsXG4gICAgLyoqXG4gICAgICog5qCh6aqM5aSx6LSl5LqL5Lu2XG4gICAgICovXG4gICAgXCJ2YWxpZGF0ZS1lcnJvclwiLFxuICAgIC8qKlxuICAgICAqIOagoemqjOWQjueahOihqOWNleaVsOaNruWPmOWMllxuICAgICAqL1xuICAgIFwidXBkYXRlOnZhbGlkYXRlZEZvcm1cIlxuICBdLFxuICBzZXR1cChwcm9wczogYW55LCBjdHg6IGFueSkge1xuICAgIGNvbnN0IHsgdWkgfSA9IHVzZVVpKCk7XG4gICAgY29uc3QgeyBtZXJnZSB9ID0gdXNlTWVyZ2UoKTtcbiAgICBjb25zdCBkb01lcmdlID0gbWVyZ2U7XG4gICAgY29uc3QgeyBkb0NvbXB1dGVkLCBBc3luY0NvbXB1dGVWYWx1ZSwgQ29tcHV0ZVZhbHVlIH0gPSB1c2VDb21wdXRlKCk7XG4gICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIHZ1ZS9uby1zZXR1cC1wcm9wcy1kZXN0cnVjdHVyZVxuICAgIF8uZWFjaChwcm9wcy5jb2x1bW5zLCAoaXRlbSkgPT4ge1xuICAgICAgaWYgKGl0ZW0udmFsdWUgIT0gbnVsbCAmJiAoaXRlbS52YWx1ZSBpbnN0YW5jZW9mIEFzeW5jQ29tcHV0ZVZhbHVlIHx8IGl0ZW0udmFsdWUgaW5zdGFuY2VvZiBDb21wdXRlVmFsdWUpKSB7XG4gICAgICAgIGxvZ2dlci53YXJuKFwic2VhcmNoLnZhbHVl6YWN572u5LiN5pSv5oyBQ29tcHV0ZVZhbHVlL0FzeW5jQ29tcHV0Zeexu+Wei+eahOWKqOaAgeiuoeeul1wiKTtcbiAgICAgIH1cbiAgICB9KTtcblxuICAgIGZ1bmN0aW9uIGNyZWF0ZUluaXRpYWxGb3JtKCk6IGFueSB7XG4gICAgICAvL+m7mOiupOWAvFxuICAgICAgY29uc3QgZm9ybTogYW55ID0ge307XG5cbiAgICAgIF8uZm9yRWFjaChwcm9wcy5jb2x1bW5zLCAoY29sdW1uLCBrZXkpID0+IHtcbiAgICAgICAgaWYgKGNvbHVtbi52YWx1ZSA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG4gICAgICAgIGNvbnN0IGRlZlZhbHVlID0gdW5yZWYoY29sdW1uLnZhbHVlKTtcbiAgICAgICAgaWYgKGRlZlZhbHVlICE9PSB1bmRlZmluZWQgJiYgY29sdW1uLnNob3cgIT09IGZhbHNlICYmIGNvbHVtbi5jb21wb25lbnQ/LnNob3cgIT09IGZhbHNlKSB7XG4gICAgICAgICAgLy/pu5jorqTlgLxcbiAgICAgICAgICBmb3JtW2tleV0gPSBkZWZWYWx1ZTtcbiAgICAgICAgfVxuICAgICAgfSk7XG5cbiAgICAgIHJldHVybiBfLmNsb25lRGVlcChtZXJnZSh7fSwgcHJvcHMuaW5pdGlhbEZvcm0sIGZvcm0pKTtcbiAgICB9XG5cbiAgICBjb25zdCBmb3JtRGF0YSA9IHJlYWN0aXZlKGNyZWF0ZUluaXRpYWxGb3JtKCkpO1xuXG4gICAgbGV0IGF1dG9TZWFyY2g6IGFueSA9IG51bGw7XG5cbiAgICBjb25zdCBjb21wdXRlZENvbHVtbnM6IFJlZjxUeXBlTWFwPFNlYXJjaEl0ZW1Qcm9wcz4+ID0gZG9Db21wdXRlZChcbiAgICAgICgpID0+IHtcbiAgICAgICAgcmV0dXJuIHByb3BzLmNvbHVtbnM7XG4gICAgICB9LFxuICAgICAgZ2V0Q29udGV4dEZuLFxuICAgICAgbnVsbCxcbiAgICAgIChjb2x1bW5zOiBhbnkpID0+IHtcbiAgICAgICAgY29uc3QgZm9ybUl0ZW0gPSBfLmNsb25lRGVlcChwcm9wcy5mb3JtSXRlbSB8fCB7fSk7XG4gICAgICAgIF8uZm9yRWFjaChjb2x1bW5zLCAoaXRlbSkgPT4ge1xuICAgICAgICAgIG1lcmdlKGl0ZW0sIGZvcm1JdGVtLCBpdGVtKTtcbiAgICAgICAgfSk7XG4gICAgICAgIC8vIGNvbHVtbnMgPSBtZXJnZShmb3JtSXRlbSwgY29sdW1ucyk7XG4gICAgICAgIGlmICghcHJvcHMudmFsaWRhdGUpIHtcbiAgICAgICAgICAvL+WmguaenOWFs+mXrXZhbGlkYXRl5YiZ5Y675o6JcnVsZXNcbiAgICAgICAgICBfLmZvckVhY2goY29sdW1ucywgKGl0ZW0pID0+IHtcbiAgICAgICAgICAgIGRlbGV0ZSBpdGVtLnJ1bGVzO1xuICAgICAgICAgICAgZGVsZXRlIGl0ZW0ucnVsZTtcbiAgICAgICAgICB9KTtcbiAgICAgICAgfVxuICAgICAgICAvLyDlkIjlubZjb2xcbiAgICAgICAgaWYgKHByb3BzLmNvbCkge1xuICAgICAgICAgIF8uZm9yRWFjaChjb2x1bW5zLCAodikgPT4ge1xuICAgICAgICAgICAgdi5jb2wgPSBtZXJnZSh7fSwgcHJvcHMuY29sLCB2LmNvbCk7XG4gICAgICAgICAgfSk7XG4gICAgICAgIH1cblxuICAgICAgICAvL2NlbGxSZW5kZXJcbiAgICAgICAgXy5mb3JFYWNoKGNvbHVtbnMsIChpdGVtKSA9PiB7XG4gICAgICAgICAgaXRlbS5fY2VsbFJlbmRlciA9ICgpID0+IHtcbiAgICAgICAgICAgIHJldHVybiBjZWxsUmVuZGVyKGl0ZW0pO1xuICAgICAgICAgIH07XG4gICAgICAgIH0pO1xuXG4gICAgICAgIC8v5a2X5q615o6S5bqPXG4gICAgICAgIGxldCBzb3J0QXJyOiBTZWFyY2hJdGVtUHJvcHNbXSA9IFtdO1xuICAgICAgICBfLmZvckVhY2goY29sdW1ucywgKHYsIGtleSkgPT4ge1xuICAgICAgICAgIHYuX2tleSA9IGtleTtcbiAgICAgICAgICBzb3J0QXJyLnB1c2godik7XG4gICAgICAgIH0pO1xuICAgICAgICBzb3J0QXJyID0gXy5zb3J0Qnkoc29ydEFyciwgKGl0ZW0pID0+IHtcbiAgICAgICAgICByZXR1cm4gaXRlbS5vcmRlciA/PyBDb25zdGFudHMub3JkZXJEZWZhdWx0O1xuICAgICAgICB9KTtcblxuICAgICAgICBjb25zdCBzb3J0ZWRDb2x1bW5zOiB7XG4gICAgICAgICAgW2tleTogc3RyaW5nXTogU2VhcmNoSXRlbVByb3BzO1xuICAgICAgICB9ID0ge307XG5cbiAgICAgICAgc29ydEFyci5mb3JFYWNoKChpdGVtKSA9PiB7XG4gICAgICAgICAgbGV0IF9rZXkgPSBpdGVtLl9rZXk7XG4gICAgICAgICAgZGVsZXRlIGl0ZW0uX2tleTtcbiAgICAgICAgICBzb3J0ZWRDb2x1bW5zW19rZXldID0gaXRlbTtcbiAgICAgICAgfSk7XG4gICAgICAgIHJldHVybiBzb3J0ZWRDb2x1bW5zO1xuICAgICAgfVxuICAgICk7XG5cbiAgICBmdW5jdGlvbiBvbkZvcm1WYWxpZGF0ZWQoKSB7XG4gICAgICBjb25zdCB2YWxpZGF0ZWRGb3JtID0gXy5jbG9uZURlZXAoZm9ybURhdGEpO1xuICAgICAgY3R4LmVtaXQoXCJ1cGRhdGU6dmFsaWRhdGVkRm9ybVwiLCB2YWxpZGF0ZWRGb3JtKTtcbiAgICB9XG5cbiAgICB3YXRjaChcbiAgICAgICgpID0+IHtcbiAgICAgICAgcmV0dXJuIHByb3BzLnZhbGlkYXRlZEZvcm07XG4gICAgICB9LFxuICAgICAgKHZhbHVlOiBhbnkpID0+IHtcbiAgICAgICAgZm9yIChjb25zdCBrZXkgaW4gZm9ybURhdGEpIHtcbiAgICAgICAgICBkZWxldGUgZm9ybURhdGFba2V5XTtcbiAgICAgICAgfVxuICAgICAgICBtZXJnZShmb3JtRGF0YSwgdmFsdWUgfHwge30pO1xuICAgICAgfSxcbiAgICAgIHtcbiAgICAgICAgZGVlcDogdHJ1ZVxuICAgICAgfVxuICAgICk7XG5cbiAgICBjb25zdCBnZXQgPSAoZm9ybTogYW55LCBrZXk6IGFueSkgPT4ge1xuICAgICAgcmV0dXJuIF8uZ2V0KGZvcm0sIGtleSk7XG4gICAgfTtcblxuICAgIGZ1bmN0aW9uIHNwbGl0S2V5KGtleTogc3RyaW5nKSB7XG4gICAgICBpZiAoa2V5ID09IG51bGwpIHtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuICAgICAgaWYgKGtleS5pbmRleE9mKFwiLlwiKSA+PSAwKSB7XG4gICAgICAgIHJldHVybiBrZXkuc3BsaXQoXCIuXCIpO1xuICAgICAgfVxuICAgICAgcmV0dXJuIGtleTtcbiAgICB9XG5cbiAgICAvLyBjb25zdCBkZWJvdW5jZVZhbGlkYXRlID0gXy5kZWJvdW5jZShhc3luYyAoKSA9PiB7XG4gICAgLy8gICBpZiAoYXdhaXQgZG9WYWxpZGF0ZSgpKSB7XG4gICAgLy8gICAgIG9uRm9ybVZhbGlkYXRlZCgpO1xuICAgIC8vICAgfVxuICAgIC8vIH0sIDUwMCk7XG5cbiAgICBmdW5jdGlvbiBjZWxsUmVuZGVyKGl0ZW06IGFueSkge1xuICAgICAgY29uc3Qga2V5ID0gaXRlbS5rZXk7XG5cbiAgICAgIGFzeW5jIGZ1bmN0aW9uIF9vblVwZGF0ZU1vZGVsVmFsdWUoJGV2ZW50OiBhbnkpIHtcbiAgICAgICAgLy8gYXdhaXQgZGVib3VuY2VWYWxpZGF0ZSgpO1xuICAgICAgICBvblZhbHVlQ2hhbmdlZCgkZXZlbnQsIGl0ZW0pO1xuICAgICAgfVxuXG4gICAgICBmdW5jdGlvbiBfb25JbnB1dCgpIHtcbiAgICAgICAgb25JbnB1dChpdGVtKTtcbiAgICAgIH1cblxuICAgICAgZnVuY3Rpb24gb25LZXl1cChpdGVtOiBhbnksIGtleTogYW55KSB7XG4gICAgICAgIGlmIChrZXkuY29kZSA9PT0gXCJFbnRlclwiKSB7XG4gICAgICAgICAgaWYgKGl0ZW0uYXV0b1NlYXJjaFRyaWdnZXIgPT09IFwiZW50ZXJcIikge1xuICAgICAgICAgICAgZG9TZWFyY2goKTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgbGV0IGRlZmF1bHRTbG90OiBhbnkgPSBudWxsO1xuICAgICAgaWYgKHByb3BzLnNsb3RzW1wic2VhcmNoX1wiICsga2V5XSkge1xuICAgICAgICBkZWZhdWx0U2xvdCA9IDxmcy1zbG90LXJlbmRlciBzbG90cz17cHJvcHMuc2xvdHNbXCJzZWFyY2hfXCIgKyBrZXldfSBzY29wZT17YnVpbGRGaWVsZENvbnRleHQoa2V5KX0gLz47XG4gICAgICB9IGVsc2UgaWYgKGl0ZW0ucmVuZGVyKSB7XG4gICAgICAgIGRlZmF1bHRTbG90ID0gPGZzLXJlbmRlciByZW5kZXItZnVuYz17aXRlbS5yZW5kZXJ9IHNjb3BlPXtidWlsZEZpZWxkQ29udGV4dChrZXkpfSAvPjtcbiAgICAgIH0gZWxzZSBpZiAoaXRlbS5jb21wb25lbnQgJiYgaXRlbS5jb21wb25lbnQuc2hvdyAhPT0gZmFsc2UpIHtcbiAgICAgICAgZGVmYXVsdFNsb3QgPSAoXG4gICAgICAgICAgPGZzLWNvbXBvbmVudC1yZW5kZXJcbiAgICAgICAgICAgIHJlZj17KHZhbHVlOiBhbnkpID0+IHtcbiAgICAgICAgICAgICAgY29tcG9uZW50UmVuZGVyUmVmcy52YWx1ZVtrZXldID0gdmFsdWU7XG4gICAgICAgICAgICB9fVxuICAgICAgICAgICAgbW9kZWwtdmFsdWU9e2dldChmb3JtRGF0YSwga2V5KX1cbiAgICAgICAgICAgIG9uS2V5dXA9eygkZXZlbnQ6IGFueSkgPT4ge1xuICAgICAgICAgICAgICBvbktleXVwKGl0ZW0sICRldmVudCk7XG4gICAgICAgICAgICB9fVxuICAgICAgICAgICAgey4uLml0ZW0uY29tcG9uZW50fVxuICAgICAgICAgICAgc2NvcGU9e2J1aWxkRmllbGRDb250ZXh0KGtleSl9XG4gICAgICAgICAgICBvblVwZGF0ZTptb2RlbFZhbHVlPXtfb25VcGRhdGVNb2RlbFZhbHVlfVxuICAgICAgICAgICAgb25JbnB1dD17X29uSW5wdXR9XG4gICAgICAgICAgLz5cbiAgICAgICAgKTtcbiAgICAgIH1cblxuICAgICAgY29uc3Qgc3BsaXRlZEtleSA9IHNwbGl0S2V5KGtleSk7XG5cbiAgICAgIHJldHVybiB1aS5mb3JtSXRlbS5yZW5kZXIoe1xuICAgICAgICBwcm9wczoge1xuICAgICAgICAgIC4uLml0ZW0sXG4gICAgICAgICAgbGFiZWw6IGl0ZW0udGl0bGUsXG4gICAgICAgICAgW3VpLmZvcm1JdGVtLnByb3BdOiBzcGxpdGVkS2V5LFxuICAgICAgICAgIHBhdGg6IGtleSxcbiAgICAgICAgICBydWxlUGF0aDoga2V5XG4gICAgICAgIH0sXG4gICAgICAgIHNsb3RzOiB7XG4gICAgICAgICAgZGVmYXVsdCgpIHtcbiAgICAgICAgICAgIHJldHVybiBkZWZhdWx0U2xvdDtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH0pO1xuICAgIH1cblxuICAgIGNvbnN0IHNlYXJjaEZvcm1SZWYgPSByZWYoKTtcbiAgICBjb25zdCB7IHQgfSA9IHVzZUkxOG4oKTtcbiAgICBjb25zdCBjb21wb25lbnRSZW5kZXJSZWZzOiBSZWYgPSByZWYoe30pO1xuXG4gICAgZnVuY3Rpb24gZ2V0Q29tcG9uZW50UmVuZGVyUmVmKGtleTogc3RyaW5nKSB7XG4gICAgICByZXR1cm4gY29tcG9uZW50UmVuZGVyUmVmcy52YWx1ZVtrZXldO1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIGdldENvbXBvbmVudFJlZihrZXk6IHN0cmluZyk6IGFueSB7XG4gICAgICByZXR1cm4gZ2V0Q29tcG9uZW50UmVuZGVyUmVmKGtleSk/LmdldFRhcmdldFJlZigpO1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIGdldENvbnRleHRGbigpOiBTZWFyY2hFdmVudENvbnRleHQge1xuICAgICAgcmV0dXJuIHsgZm9ybTogZm9ybURhdGEsIHZhbGlkYXRlZEZvcm06IHByb3BzLnZhbGlkYXRlZEZvcm0sIGdldENvbXBvbmVudFJlZiwgZG9TZWFyY2gsIGRvUmVzZXQsIGRvVmFsaWRhdGUgfTtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBidWlsZEZpZWxkQ29udGV4dChrZXk6IHN0cmluZykge1xuICAgICAgcmV0dXJuIHsgLi4uZ2V0Q29udGV4dEZuKCksIGtleSwgdmFsdWU6IF8uZ2V0KGZvcm1EYXRhLCBrZXkpIH07XG4gICAgfVxuXG4gICAgYXN5bmMgZnVuY3Rpb24gZG9WYWxpZGF0ZShzaWxlbnQ6IGJvb2xlYW4gPSBmYWxzZSwgdHJpZ2dlcjogc3RyaW5nID0gXCJzZWFyY2hcIik6IFByb21pc2U8Ym9vbGVhbj4ge1xuICAgICAgdHJ5IHtcbiAgICAgICAgaWYgKHByb3BzLnZhbGlkYXRlKSB7XG4gICAgICAgICAgYXdhaXQgdWkuZm9ybS52YWxpZGF0ZVdyYXAoc2VhcmNoRm9ybVJlZi52YWx1ZSk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICB9IGNhdGNoIChlOiBhbnkpIHtcbiAgICAgICAgaWYgKCFzaWxlbnQpIHtcbiAgICAgICAgICBjdHguZW1pdChcInZhbGlkYXRlLWVycm9yXCIsIHsgLi4uZ2V0Q29udGV4dEZuKCksIGVycm9yOiBlLCB0cmlnZ2VyIH0pO1xuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgfVxuICAgIH1cblxuICAgIGFzeW5jIGZ1bmN0aW9uIGRvU2VhcmNoKCkge1xuICAgICAgaWYgKGF1dG9TZWFyY2gpIHtcbiAgICAgICAgLy8g6Ziy5oqW5p+l6K+i5Y+W5raIXG4gICAgICAgIGF1dG9TZWFyY2guY2FuY2VsKCk7XG4gICAgICB9XG5cbiAgICAgIGlmIChhd2FpdCBkb1ZhbGlkYXRlKCkpIHtcbiAgICAgICAgb25Gb3JtVmFsaWRhdGVkKCk7XG4gICAgICAgIGF3YWl0IG5leHRUaWNrKCk7XG4gICAgICAgIGN0eC5lbWl0KFwiX3NlYXJjaFwiLCBnZXRDb250ZXh0Rm4oKSk7XG4gICAgICAgIGN0eC5lbWl0KFwic2VhcmNoXCIsIGdldENvbnRleHRGbigpKTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICBhc3luYyBmdW5jdGlvbiBkb1Jlc2V0KCkge1xuICAgICAgLy8gZGVidWdnZXI7XG4gICAgICAvLyB1aS5mb3JtLnJlc2V0V3JhcChzZWFyY2hGb3JtUmVmLnZhbHVlLCB7IGZvcm0sIGluaXRpYWxGb3JtOiBjcmVhdGVJbml0aWFsRm9ybSgpIH0pO1xuICAgICAgY29uc3QgaW5pdGlhbEZvcm0gPSBjcmVhdGVJbml0aWFsRm9ybSgpO1xuICAgICAgY29uc3QgZW50cmllcyA9IF8uZW50cmllcyhmb3JtRGF0YSk7XG4gICAgICBmb3IgKGNvbnN0IGVudHJ5IG9mIGVudHJpZXMpIHtcbiAgICAgICAgY29uc3QgaW5pdGlhbFZhbHVlID0gXy5nZXQoaW5pdGlhbEZvcm0sIGVudHJ5WzBdKTtcbiAgICAgICAgaWYgKGluaXRpYWxWYWx1ZSA9PSBudWxsKSB7XG4gICAgICAgICAgXy51bnNldChmb3JtRGF0YSwgZW50cnlbMF0pO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIF8uc2V0KGZvcm1EYXRhLCBlbnRyeVswXSwgaW5pdGlhbFZhbHVlKTtcbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICBpZiAoYXdhaXQgZG9WYWxpZGF0ZSgpKSB7XG4gICAgICAgIG9uRm9ybVZhbGlkYXRlZCgpO1xuICAgICAgICBhd2FpdCBuZXh0VGljaygpO1xuICAgICAgICBpZiAocHJvcHMucmVzZXQpIHtcbiAgICAgICAgICBwcm9wcy5yZXNldChnZXRDb250ZXh0Rm4oKSk7XG4gICAgICAgIH1cbiAgICAgICAgLy8g6KGo5Y2V6YeN572u5LqL5Lu2XG4gICAgICAgIGN0eC5lbWl0KFwiX3Jlc2V0XCIsIGdldENvbnRleHRGbigpKTtcbiAgICAgICAgY3R4LmVtaXQoXCJyZXNldFwiLCBnZXRDb250ZXh0Rm4oKSk7XG4gICAgICAgIGlmIChwcm9wcy5zZWFyY2hBZnRlclJlc2V0KSB7XG4gICAgICAgICAgZG9TZWFyY2goKTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cblxuICAgIGNvbnN0IGNvbXB1dGVkQnV0dG9ucyA9IGNvbXB1dGVkKCgpID0+IHtcbiAgICAgIGNvbnN0IGJ0bnM6IGFueSA9IFtdO1xuICAgICAgY29uc3QgZGVmQnRuT3B0aW9uczogQnV0dG9uc1Byb3BzPFNlYXJjaEV2ZW50Q29udGV4dD4gPSB7XG4gICAgICAgIHNlYXJjaDoge1xuICAgICAgICAgIHNob3c6IHRydWUsXG4gICAgICAgICAgdHlwZTogXCJwcmltYXJ5XCIsXG4gICAgICAgICAgZGlzYWJsZWQ6IGZhbHNlLFxuICAgICAgICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBAdHlwZXNjcmlwdC1lc2xpbnQvbm8tdW51c2VkLXZhcnNcbiAgICAgICAgICBjbGljazogKGNvbnRleHQ6IFNlYXJjaEV2ZW50Q29udGV4dCkgPT4ge1xuICAgICAgICAgICAgZG9TZWFyY2goKTtcbiAgICAgICAgICB9LFxuICAgICAgICAgIG9yZGVyOiAxLFxuICAgICAgICAgIHRleHQ6IHQoXCJmcy5zZWFyY2guc2VhcmNoLnRleHRcIikgLy8gJ+afpeivoicsXG4gICAgICAgIH0sXG4gICAgICAgIHJlc2V0OiB7XG4gICAgICAgICAgc2hvdzogdHJ1ZSxcbiAgICAgICAgICBkaXNhYmxlZDogZmFsc2UsXG4gICAgICAgICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIEB0eXBlc2NyaXB0LWVzbGludC9uby11bnVzZWQtdmFyc1xuICAgICAgICAgIGNsaWNrOiAoY29udGV4dDogU2VhcmNoRXZlbnRDb250ZXh0KSA9PiB7XG4gICAgICAgICAgICBkb1Jlc2V0KCk7XG4gICAgICAgICAgfSxcbiAgICAgICAgICB0ZXh0OiB0KFwiZnMuc2VhcmNoLnJlc2V0LnRleHRcIiksIC8vICfph43nva4nLFxuICAgICAgICAgIG9yZGVyOiAyXG4gICAgICAgIH1cbiAgICAgIH07XG4gICAgICBtZXJnZShkZWZCdG5PcHRpb25zLCBwcm9wcy5idXR0b25zKTtcbiAgICAgIGZvciAobGV0IGtleSBpbiBkZWZCdG5PcHRpb25zKSB7XG4gICAgICAgIGNvbnN0IGJ0biA9IGRlZkJ0bk9wdGlvbnNba2V5XTtcbiAgICAgICAgYnRuLl9jbGljayA9ICgpID0+IHtcbiAgICAgICAgICBidG4uY2xpY2soZ2V0Q29udGV4dEZuKCkpO1xuICAgICAgICB9O1xuICAgICAgICBidG5zLnB1c2goYnRuKTtcbiAgICAgIH1cblxuICAgICAgYnRucy5zb3J0KChhOiBhbnksIGI6IGFueSkgPT4ge1xuICAgICAgICByZXR1cm4gYS5vcmRlciAtIGIub3JkZXI7XG4gICAgICB9KTtcbiAgICAgIHJldHVybiBidG5zO1xuICAgIH0pO1xuXG4gICAgZnVuY3Rpb24gaW5pdEF1dG9TZWFyY2goKSB7XG4gICAgICBpZiAocHJvcHMuYXV0b1NlYXJjaCA9PT0gZmFsc2UpIHtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuICAgICAgLy8g5p6E5bu66Ziy5oqW5p+l6K+i5Ye95pWwXG4gICAgICBpZiAocHJvcHMuZGVib3VuY2UgIT09IGZhbHNlKSB7XG4gICAgICAgIGxldCB3YWl0ID0gcHJvcHMuZGVib3VuY2U/LndhaXQgfHwgNTAwO1xuICAgICAgICBhdXRvU2VhcmNoID0gXy5kZWJvdW5jZShkb1NlYXJjaCwgd2FpdCwgcHJvcHMuZGVib3VuY2UpO1xuICAgICAgfVxuICAgIH1cblxuICAgIGluaXRBdXRvU2VhcmNoKCk7XG5cbiAgICBmdW5jdGlvbiBnZXRGb3JtKCkge1xuICAgICAgcmV0dXJuIGZvcm1EYXRhO1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIGdldFZhbGlkYXRlZEZvcm0oKSB7XG4gICAgICByZXR1cm4gcHJvcHMudmFsaWRhdGVkRm9ybTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiDorr7nva5mb3Jt5YC8XG4gICAgICovXG4gICAgZnVuY3Rpb24gc2V0Rm9ybShuZXdGb3JtOiBhbnksIG1lcmdlID0gdHJ1ZSkge1xuICAgICAgaWYgKCFtZXJnZSkge1xuICAgICAgICBfLmVhY2goXy5rZXlzKGZvcm1EYXRhKSwgKGl0ZW0pID0+IHtcbiAgICAgICAgICBkZWxldGUgZm9ybURhdGFbaXRlbV07XG4gICAgICAgIH0pO1xuICAgICAgfVxuICAgICAgZG9NZXJnZShmb3JtRGF0YSwgbmV3Rm9ybSk7XG4gICAgICBvbkZvcm1WYWxpZGF0ZWQoKTtcbiAgICB9XG5cbiAgICBjb25zdCBpbnB1dEV2ZW50RGlzYWJsZWQgPSByZWYoZmFsc2UpO1xuXG4gICAgY29uc3QgZG9BdXRvU2VhcmNoID0gKCkgPT4ge1xuICAgICAgbG9nZ2VyLmRlYnVnKFwiZG8gYXV0byBzZWFyY2gsaW5wdXRFdmVudERpc2FibGVkOlwiLCBpbnB1dEV2ZW50RGlzYWJsZWQudmFsdWUpO1xuICAgICAgaWYgKGlucHV0RXZlbnREaXNhYmxlZC52YWx1ZSAhPT0gdHJ1ZSAmJiBhdXRvU2VhcmNoKSB7XG4gICAgICAgIC8vIOmYsuaKluafpeivolxuICAgICAgICBhdXRvU2VhcmNoKCk7XG4gICAgICB9XG4gICAgfTtcblxuICAgIGNvbnN0IG9uSW5wdXQgPSAoaXRlbTogYW55KSA9PiB7XG4gICAgICBpZiAoaXRlbS5hdXRvU2VhcmNoVHJpZ2dlciA9PT0gXCJpbnB1dFwiKSB7XG4gICAgICAgIGRvQXV0b1NlYXJjaCgpO1xuICAgICAgfVxuICAgIH07XG4gICAgLy8g6L6T5YWl5rOV55uR5ZCsXG4gICAgY29uc3QgY2hhbmdlSW5wdXRFdmVudERpc2FibGVkID0gKGRpc2FibGVkOiBib29sZWFuKSA9PiB7XG4gICAgICBpbnB1dEV2ZW50RGlzYWJsZWQudmFsdWUgPSBkaXNhYmxlZDtcbiAgICAgIGRvQXV0b1NlYXJjaCgpO1xuICAgIH07XG5cbiAgICBhc3luYyBmdW5jdGlvbiBvblZhbHVlQ2hhbmdlZCh2YWx1ZTogYW55LCBpdGVtOiBTZWFyY2hJdGVtUHJvcHMpIHtcbiAgICAgIGNvbnN0IGtleSA9IGl0ZW0ua2V5O1xuICAgICAgXy5zZXQoZm9ybURhdGEsIGtleSwgdmFsdWUpO1xuXG4gICAgICBjb25zdCBzaWxlbnQgPSBwcm9wcy52YWxpZGF0ZU9uQ2hhbmdlU2lsZW50O1xuICAgICAgLy8gaWYgKHByb3BzLnZhbGlkYXRlT25DaGFuZ2UgJiYgKGF3YWl0IGRvVmFsaWRhdGUoc2lsZW50LCBcImNoYW5nZVwiKSkpIHtcbiAgICAgIC8vICAgb25Gb3JtVmFsaWRhdGVkKCk7XG4gICAgICAvLyB9XG5cbiAgICAgIGlmIChpdGVtLnZhbHVlQ2hhbmdlKSB7XG4gICAgICAgIGNvbnN0IGtleSA9IGl0ZW0ua2V5O1xuICAgICAgICBjb25zdCB2YWx1ZSA9IGZvcm1EYXRhW2tleV07XG4gICAgICAgIGNvbnN0IGNvbXBvbmVudFJlZiA9IGdldENvbXBvbmVudFJlZihrZXkpO1xuICAgICAgICBjb25zdCB2YWx1ZUNoYW5nZTogVmFsdWVDaGFuZ2VIYW5kbGUgPVxuICAgICAgICAgIGl0ZW0udmFsdWVDaGFuZ2UgaW5zdGFuY2VvZiBGdW5jdGlvbiA/IGl0ZW0udmFsdWVDaGFuZ2UgOiBpdGVtLnZhbHVlQ2hhbmdlLmhhbmRsZTtcbiAgICAgICAgY29uc3Qgc2NvcGUgPSBnZXRDb250ZXh0Rm4oKTtcbiAgICAgICAgY29uc3QgdmFsdWVDaGFuZ2VDb250ZXh0OiBWYWx1ZUNoYW5nZUNvbnRleHQgPSB7XG4gICAgICAgICAgaW5kZXg6IDAsXG4gICAgICAgICAgcm93OiBzY29wZS5mb3JtLFxuICAgICAgICAgIGZvcm06IHNjb3BlLmZvcm0sXG4gICAgICAgICAgLi4uc2NvcGUsXG4gICAgICAgICAga2V5LFxuICAgICAgICAgIHZhbHVlLFxuICAgICAgICAgIGNvbXBvbmVudFJlZixcbiAgICAgICAgICBpbW1lZGlhdGU6IGZhbHNlLFxuICAgICAgICAgIGdldENvbXBvbmVudFJlZixcbiAgICAgICAgICBtb2RlOiBcInNlYXJjaFwiXG4gICAgICAgIH07XG4gICAgICAgIHZhbHVlQ2hhbmdlKHZhbHVlQ2hhbmdlQ29udGV4dCk7XG4gICAgICB9XG4gICAgICAvLyBUT0RPIOeUseS6jnZhbGlkYXRlZEZvcm0g5Y+R5bCE5Ye65Y675ZCO77yM5Lya5pu05pawZm9ybURhdGHnmoTmlbDmja7vvIzmiYDku6XopoHmlL7lnKh2YWx1ZUNoYW5nZeWQjumdoizkuI3nhLbkvJrmrbvlvqrnjq9cbiAgICAgIGlmIChwcm9wcy52YWxpZGF0ZU9uQ2hhbmdlICYmIChhd2FpdCBkb1ZhbGlkYXRlKHNpbGVudCwgXCJjaGFuZ2VcIikpKSB7XG4gICAgICAgIG9uRm9ybVZhbGlkYXRlZCgpO1xuICAgICAgfVxuICAgICAgaWYgKGl0ZW0uYXV0b1NlYXJjaFRyaWdnZXIgPT0gbnVsbCB8fCBpdGVtLmF1dG9TZWFyY2hUcmlnZ2VyID09PSB0cnVlIHx8IGl0ZW0uYXV0b1NlYXJjaFRyaWdnZXIgPT09IFwiY2hhbmdlXCIpIHtcbiAgICAgICAgZG9BdXRvU2VhcmNoKCk7XG4gICAgICB9XG4gICAgfVxuXG4gICAgY29uc3QgY29tcHV0ZWRSdWxlcyA9IGNvbXB1dGVkKCgpID0+IHtcbiAgICAgIGlmICghcHJvcHMudmFsaWRhdGUpIHtcbiAgICAgICAgcmV0dXJuIFtdO1xuICAgICAgfVxuICAgICAgcmV0dXJuIHByb3BzLm9wdGlvbnMucnVsZXM7XG4gICAgfSk7XG5cbiAgICBvbkZvcm1WYWxpZGF0ZWQoKTtcbiAgICByZXR1cm4ge1xuICAgICAgZ2V0LFxuICAgICAgdWksXG4gICAgICBvblZhbHVlQ2hhbmdlZCxcbiAgICAgIGRvVmFsaWRhdGUsXG4gICAgICBkb1NlYXJjaCxcbiAgICAgIGRvUmVzZXQsXG4gICAgICBmb3JtRGF0YSxcbiAgICAgIGNvbXBvbmVudFJlbmRlclJlZnMsXG4gICAgICBnZXRDb21wb25lbnRSZW5kZXJSZWYsXG4gICAgICBnZXRDb21wb25lbnRSZWYsXG4gICAgICBnZXRGb3JtLFxuICAgICAgZ2V0VmFsaWRhdGVkRm9ybSxcbiAgICAgIHNldEZvcm0sXG4gICAgICBzZWFyY2hGb3JtUmVmLFxuICAgICAgb25JbnB1dCxcbiAgICAgIGlucHV0RXZlbnREaXNhYmxlZCxcbiAgICAgIGNoYW5nZUlucHV0RXZlbnREaXNhYmxlZCxcbiAgICAgIGNvbXB1dGVkQ29sdW1ucyxcbiAgICAgIGNvbXB1dGVkQnV0dG9ucyxcbiAgICAgIGNvbXB1dGVkUnVsZXMsXG4gICAgICBidWlsZEZpZWxkQ29udGV4dCxcbiAgICAgIGdldENvbnRleHRGblxuICAgIH07XG4gIH1cbn0pO1xuPC9zY3JpcHQ+XG48c3R5bGUgbGFuZz1cImxlc3NcIj5cbi5mcy1zZWFyY2gge1xuICAmLmZzLXNlYXJjaC12MiB7XG4gICAgLy9kaXNwbGF5OiBmbGV4O1xuICAgIC8vZmxleC13cmFwOiBub3dyYXA7XG4gICAgLmZzLXNlYXJjaC1idXR0b25zIHtcbiAgICAgIGRpc3BsYXk6IGZsZXg7XG4gICAgfVxuICAgIC5zZWFyY2gtbGVmdCB7XG4gICAgfVxuXG4gICAgLnNlYXJjaC1yaWdodCB7XG4gICAgICBmbGV4OiAxO1xuICAgIH1cblxuICAgIC5hbnQtZm9ybS1pbmxpbmUge1xuICAgICAgZmxleC13cmFwOiB3cmFwO1xuICAgIH1cblxuICAgIC5mcy1zZWFyY2gtZm9ybSB7XG4gICAgICBkaXNwbGF5OiBmbGV4O1xuICAgICAgYWxpZ24taXRlbXM6IGNlbnRlcjtcbiAgICAgIGZsZXgtd3JhcDogd3JhcDtcblxuICAgICAgLmFudC1waWNrZXIsXG4gICAgICAuYW50LXNlbGVjdCxcbiAgICAgIC5uLWRhdGUtcGlja2VyLFxuICAgICAgLmVsLXNlbGVjdCxcbiAgICAgIC5lbC1kYXRlLWVkaXRvciB7XG4gICAgICAgIHdpZHRoOiAxMDAlO1xuICAgICAgfVxuXG4gICAgICAuZWwtcmFuZ2UtZWRpdG9yLmVsLWlucHV0X193cmFwcGVyIHtcbiAgICAgICAgcGFkZGluZzogMDtcbiAgICAgIH1cblxuICAgICAgLmFudC1idG4tbG9hZGluZy1pY29uIHtcbiAgICAgICAgZGlzcGxheTogZmxleDtcbiAgICAgICAgbWFyZ2luLWxlZnQ6IDJweDtcbiAgICAgICAgbWFyZ2luLXJpZ2h0OiAycHg7XG4gICAgICB9XG5cbiAgICAgICYuZWwtZm9ybS0tbGFiZWwtdG9wIHtcbiAgICAgICAgLmVsLWZvcm0taXRlbSB7XG4gICAgICAgICAgZGlzcGxheTogYmxvY2s7XG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgLmVsLWZvcm0taXRlbSB7XG4gICAgICAgIG1hcmdpbi1ib3R0b206IDRweDtcbiAgICAgICAgbWFyZ2luLXRvcDogNHB4O1xuICAgICAgICBkaXNwbGF5OiBmbGV4O1xuICAgICAgICBhbGlnbi1pdGVtczogY2VudGVyO1xuICAgICAgfVxuXG4gICAgICAmLmVsLWZvcm0tLWlubGluZSB7XG4gICAgICAgIC5lbC1pbnB1dCB7XG4gICAgICAgICAgd2lkdGg6IDEwMCU7XG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgLmVsLWZvcm0taXRlbV9fY29udGVudCB7XG4gICAgICAgIGRpc3BsYXk6IGZsZXg7XG4gICAgICAgIGFsaWduLWl0ZW1zOiBjZW50ZXI7XG4gICAgICB9XG4gICAgfVxuXG4gICAgLmZzLXNlYXJjaC1jb2wge1xuICAgICAgcG9zaXRpb246IHJlbGF0aXZlO1xuICAgICAgLy8gYW50ZHZcbiAgICAgIC5hbnQtZm9ybS1pdGVtLWV4cGxhaW4sXG4gICAgICAuZWwtZm9ybS1pdGVtX19lcnJvciB7XG4gICAgICAgIGZsb2F0OiBsZWZ0O1xuICAgICAgICBwb3NpdGlvbjogYWJzb2x1dGU7XG4gICAgICAgIGJvdHRvbTogM3B4O1xuICAgICAgICByaWdodDogOHB4O1xuICAgICAgICBwb2ludGVyLWV2ZW50czogbm9uZTtcbiAgICAgICAgdG9wOiBhdXRvO1xuICAgICAgICBsZWZ0OiBhdXRvO1xuICAgICAgICB2aXNpYmlsaXR5OiBoaWRkZW47XG4gICAgICB9XG5cbiAgICAgIC5lbC1mb3JtLWl0ZW1fX2Vycm9yIHtcbiAgICAgICAgYm90dG9tOiAxMHB4O1xuICAgICAgfVxuXG4gICAgICAmOmhvdmVyIHtcbiAgICAgICAgLmFudC1mb3JtLWl0ZW0tZXhwbGFpbixcbiAgICAgICAgLmVsLWZvcm0taXRlbV9fZXJyb3Ige1xuICAgICAgICAgIHZpc2liaWxpdHk6IHZpc2libGU7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG4gIH1cblxuICAubi1mb3JtLWl0ZW0tYmxhbmsge1xuICB9XG59XG48L3N0eWxlPlxuIiwiPHRlbXBsYXRlPlxuICA8ZGl2IGNsYXNzPVwiZnMtc2VhcmNoIGZzLXNlYXJjaC12MlwiPlxuICAgIDxjb21wb25lbnQgOmlzPVwidWkuY29sbGFwc2VUcmFuc2l0aW9uLm5hbWVcIj5cbiAgICAgIDxjb21wb25lbnRcbiAgICAgICAgOmlzPVwidWkuZm9ybS5uYW1lXCJcbiAgICAgICAgcmVmPVwic2VhcmNoRm9ybVJlZlwiXG4gICAgICAgIDptb2RlbD1cImZvcm1EYXRhXCJcbiAgICAgICAgb25zdWJtaXQ9XCJldmVudC5wcmV2ZW50RGVmYXVsdCgpO1wiXG4gICAgICAgIHYtYmluZD1cIm9wdGlvbnNcIlxuICAgICAgICA6cnVsZXM9XCJjb21wdXRlZFJ1bGVzXCJcbiAgICAgICAgY2xhc3M9XCJmcy1zZWFyY2gtZm9ybVwiXG4gICAgICAgIEBjb21wb3NpdGlvbnN0YXJ0PVwiY2hhbmdlSW5wdXRFdmVudERpc2FibGVkKHRydWUpXCJcbiAgICAgICAgQGNvbXBvc2l0aW9uZW5kPVwiY2hhbmdlSW5wdXRFdmVudERpc2FibGVkKGZhbHNlKVwiXG4gICAgICA+XG4gICAgICAgIDxjb21wb25lbnRcbiAgICAgICAgICA6aXM9XCJjb250YWluZXI/LmlzIHx8ICdmcy1zZWFyY2gtbGF5b3V0LWRlZmF1bHQnXCJcbiAgICAgICAgICB2LWlmPVwic2hvdyAhPT0gZmFsc2VcIlxuICAgICAgICAgIHYtYmluZD1cImNvbnRhaW5lclwiXG4gICAgICAgICAgOmNvbHVtbnM9XCJjb21wdXRlZENvbHVtbnNcIlxuICAgICAgICAgIDpnZXQtY29udGV4dC1mbj1cImdldENvbnRleHRGblwiXG4gICAgICAgID5cbiAgICAgICAgICA8dGVtcGxhdGUgI3NlYXJjaC1idXR0b25zPlxuICAgICAgICAgICAgPGRpdiBjbGFzcz1cImZzLXNlYXJjaC1idXR0b25zXCI+XG4gICAgICAgICAgICAgIDx0ZW1wbGF0ZSB2LWZvcj1cIihpdGVtLCBpbmRleCkgaW4gY29tcHV0ZWRCdXR0b25zXCIgOmtleT1cImluZGV4XCI+XG4gICAgICAgICAgICAgICAgPGZzLWJ1dHRvbiB2LWlmPVwiaXRlbS5zaG93ICE9PSBmYWxzZVwiIHYtYmluZD1cIml0ZW1cIiBAY2xpY2s9XCJpdGVtLl9jbGljaygpXCIgLz5cbiAgICAgICAgICAgICAgPC90ZW1wbGF0ZT5cbiAgICAgICAgICAgIDwvZGl2PlxuICAgICAgICAgIDwvdGVtcGxhdGU+XG5cbiAgICAgICAgICA8dGVtcGxhdGUgdi1pZj1cInNsb3RzWydzZWFyY2gtbGVmdCddXCIgI3NlYXJjaC1sZWZ0PlxuICAgICAgICAgICAgPGZzLXNsb3QtcmVuZGVyIDpzbG90cz1cInNsb3RzWydzZWFyY2gtbGVmdCddXCIgOnNjb3BlPVwiZ2V0Q29udGV4dEZuKClcIiAvPlxuICAgICAgICAgIDwvdGVtcGxhdGU+XG4gICAgICAgICAgPHRlbXBsYXRlIHYtaWY9XCJzbG90c1snc2VhcmNoLW1pZGRsZSddXCIgI3NlYXJjaC1taWRkbGU+XG4gICAgICAgICAgICA8ZnMtc2xvdC1yZW5kZXIgOnNsb3RzPVwic2xvdHNbJ3NlYXJjaC1taWRkbGUnXVwiIDpzY29wZT1cImdldENvbnRleHRGbigpXCIgLz5cbiAgICAgICAgICA8L3RlbXBsYXRlPlxuICAgICAgICAgIDx0ZW1wbGF0ZSB2LWlmPVwic2xvdHNbJ3NlYXJjaC1yaWdodCddXCIgI3NlYXJjaC1yaWdodD5cbiAgICAgICAgICAgIDxmcy1zbG90LXJlbmRlciA6c2xvdHM9XCJzbG90c1snc2VhcmNoLXJpZ2h0J11cIiA6c2NvcGU9XCJnZXRDb250ZXh0Rm4oKVwiIC8+XG4gICAgICAgICAgPC90ZW1wbGF0ZT5cbiAgICAgICAgPC9jb21wb25lbnQ+XG4gICAgICA8L2NvbXBvbmVudD5cbiAgICA8L2NvbXBvbmVudD5cbiAgPC9kaXY+XG48L3RlbXBsYXRlPlxuXG48c2NyaXB0IGxhbmc9XCJ0c3hcIj5cbmltcG9ydCB7IGNvbXB1dGVkLCBkZWZpbmVDb21wb25lbnQsIG5leHRUaWNrLCByZWFjdGl2ZSwgcmVmLCBSZWYsIHVucmVmLCB3YXRjaCB9IGZyb20gXCJ2dWVcIjtcbmltcG9ydCBfIGZyb20gXCJsb2Rhc2gtZXNcIjtcbmltcG9ydCB7IHVzZUNvbXB1dGUgfSBmcm9tIFwiLi4vLi4vdXNlL3VzZS1jb21wdXRlXCI7XG5pbXBvcnQgeyB1c2VJMThuIH0gZnJvbSBcIi4uLy4uL2xvY2FsZVwiO1xuaW1wb3J0IGxvZ2dlciBmcm9tIFwiLi4vLi4vdXRpbHMvdXRpbC5sb2dcIjtcbmltcG9ydCBGc1NlYXJjaEJ1dHRvbnMgZnJvbSBcIi4vYnV0dG9ucy52dWVcIjtcbmltcG9ydCB7IENvbnN0YW50cyB9IGZyb20gXCIuLi8uLi91dGlscy91dGlsLmNvbnN0YW50c1wiO1xuaW1wb3J0IHtcbiAgQnV0dG9uc1Byb3BzLFxuICBTZWFyY2hFdmVudENvbnRleHQsXG4gIFNlYXJjaEl0ZW1Qcm9wcyxcbiAgVHlwZU1hcCxcbiAgVmFsdWVDaGFuZ2VDb250ZXh0LFxuICBWYWx1ZUNoYW5nZUhhbmRsZVxufSBmcm9tIFwiLi4vLi4vZFwiO1xuaW1wb3J0IHsgdXNlVWkgfSBmcm9tIFwiLi4vLi4vdXNlL3VzZS11aVwiO1xuaW1wb3J0IHsgdXNlTWVyZ2UgfSBmcm9tIFwiLi4vLi4vdXNlL3VzZS1tZXJnZVwiO1xuXG4vKipcbiAqIOafpeivouahhue7hOS7tlxuICovXG5leHBvcnQgZGVmYXVsdCBkZWZpbmVDb21wb25lbnQoe1xuICBuYW1lOiBcIkZzU2VhcmNoXCIsXG4gIGNvbXBvbmVudHM6IHsgRnNTZWFyY2hCdXR0b25zIH0sXG4gIGluaGVyaXRBdHRyczogZmFsc2UsXG4gIHByb3BzOiB7XG4gICAgLyoqXG4gICAgICog5biD5bGA5a655ZmoXG4gICAgICovXG4gICAgY29udGFpbmVyOiB7XG4gICAgICB0eXBlOiBPYmplY3RcbiAgICB9LFxuICAgIC8qKlxuICAgICAqIOWIneWni+afpeivouadoeS7tlxuICAgICAqIOeCueWHu+mHjee9ru+8jOS8mumHjee9ruaIkOivpeadoeS7tlxuICAgICAqL1xuICAgIGluaXRpYWxGb3JtOiB7XG4gICAgICB0eXBlOiBPYmplY3RcbiAgICB9LFxuICAgIC8qKlxuICAgICAqIOagoemqjOWQjueahOafpeivouihqOWNleaVsOaNrlxuICAgICAqL1xuICAgIHZhbGlkYXRlZEZvcm06IHtcbiAgICAgIHR5cGU6IE9iamVjdFxuICAgIH0sXG4gICAgLyoqXG4gICAgICog6KGo5Y2V5Y+C5pWwXG4gICAgICog5pSv5oyBZWwtZm9ybSB8IGEtZm9ybeeahOWxnuaAp1xuICAgICAqL1xuICAgIG9wdGlvbnM6IHtcbiAgICAgIHR5cGU6IE9iamVjdFxuICAgIH0sXG4gICAgLyoqXG4gICAgICog5p+l6K+i5a2X5q616YWN572uXG4gICAgICovXG4gICAgY29sdW1uczoge1xuICAgICAgdHlwZTogT2JqZWN0XG4gICAgfSxcbiAgICAvKipcbiAgICAgKiDmjInpkq7phY3nva4s5Y+v5Lul5qC55o2ub3JkZXLmjpLluo9cbiAgICAgKiBge3NlYXJjaDp7Li4uRnNCdXR0b259LHJlc2V0OnsuLi5Gc0J1dHRvbn19YFxuICAgICAqL1xuICAgIGJ1dHRvbnM6IHtcbiAgICAgIHR5cGU6IE9iamVjdFxuICAgIH0sXG4gICAgLyoqXG4gICAgICog54K55Ye76YeN572u5ZCO5piv5ZCm56uL5Y2z6Kem5Y+R5p+l6K+iXG4gICAgICovXG4gICAgc2VhcmNoQWZ0ZXJSZXNldDoge1xuICAgICAgdHlwZTogQm9vbGVhbixcbiAgICAgIGRlZmF1bHQ6IHRydWVcbiAgICB9LFxuICAgIC8qKlxuICAgICAqIOaYr+WQpuW8gOWQr+iHquWKqOafpeivolxuICAgICAqL1xuICAgIGF1dG9TZWFyY2g6IHtcbiAgICAgIHR5cGU6IEJvb2xlYW4sXG4gICAgICBkZWZhdWx0OiB0cnVlXG4gICAgfSxcbiAgICAvKipcbiAgICAgKiDoh6rliqjmn6Xor6LvvIzpmLLmipborr7nva5cbiAgICAgKiDkvKBmYWxzZeWImeWFs+mXreiHquWKqOafpeivolxuICAgICAqL1xuICAgIGRlYm91bmNlOiB7XG4gICAgICB0eXBlOiBbQm9vbGVhbiwgT2JqZWN0XSxcbiAgICAgIGRlZmF1bHQ6IHVuZGVmaW5lZFxuICAgIH0sXG4gICAgLyoqXG4gICAgICog5o+S5qe9XG4gICAgICovXG4gICAgc2xvdHM6IHtcbiAgICAgIHR5cGU6IE9iamVjdCxcbiAgICAgIGRlZmF1bHQoKSB7XG4gICAgICAgIHJldHVybiB7fTtcbiAgICAgIH1cbiAgICB9LFxuICAgIC8qKlxuICAgICAqIOaYr+WQpuaYvuekuuafpeivouahhlxuICAgICAqL1xuICAgIHNob3c6IHtcbiAgICAgIHR5cGU6IEJvb2xlYW4sXG4gICAgICBkZWZhdWx0OiB0cnVlXG4gICAgfSxcbiAgICAvKipcbiAgICAgKiDmmK/lkKblkK/nlKjmoKHpqoxcbiAgICAgKi9cbiAgICB2YWxpZGF0ZToge1xuICAgICAgZGVmYXVsdDogZmFsc2VcbiAgICB9LFxuXG4gICAgLyoqXG4gICAgICog5piv5ZCm5Lu75oSP5YC85Y+Y5YyW5bCx6Kem5Y+R5qCh6aqMXG4gICAgICovXG4gICAgdmFsaWRhdGVPbkNoYW5nZToge1xuICAgICAgZGVmYXVsdDogdHJ1ZSxcbiAgICAgIHR5cGU6IEJvb2xlYW5cbiAgICB9LFxuICAgIC8qKlxuICAgICAqIOWIl+eahOWuveW6puiuvue9ru+8jHNwYW49eHhcbiAgICAgKi9cbiAgICBjb2w6IHt9LFxuXG4gICAgLyoqXG4gICAgICog57uf5LiA5a2X5q6155qEZm9ybUl0ZW3lsZ7mgKdcbiAgICAgKi9cbiAgICBmb3JtSXRlbToge1xuICAgICAgdHlwZTogT2JqZWN0LFxuICAgICAgZGVmYXVsdDogdW5kZWZpbmVkXG4gICAgfVxuICB9LFxuICBlbWl0czogW1xuICAgIC8qKlxuICAgICAqIOafpeivouS6i+S7tlxuICAgICAqKi9cbiAgICBcInNlYXJjaFwiLFxuICAgIC8qKlxuICAgICAqIOafpeivouS6i+S7tu+8jOatpOS6i+S7tuS+m+ezu+e7n+iwg+eUqFxuICAgICAqL1xuICAgIFwiX3NlYXJjaFwiLFxuICAgIC8qKlxuICAgICAqIOmHjee9ruS6i+S7tu+8jOS+m+eUqOaIt+S9v+eUqFxuICAgICAqKi9cbiAgICBcInJlc2V0XCIsXG4gICAgLyoqXG4gICAgICog6YeN572u5LqL5Lu277yM5q2k5LqL5Lu25L6b57O757uf6LCD55SoXG4gICAgICovXG4gICAgXCJfcmVzZXRcIixcbiAgICAvKipcbiAgICAgKiDmoKHpqozlpLHotKXkuovku7ZcbiAgICAgKi9cbiAgICBcInZhbGlkYXRlLWVycm9yXCIsXG4gICAgLyoqXG4gICAgICog5qCh6aqM5ZCO55qE6KGo5Y2V5pWw5o2u5Y+Y5YyWXG4gICAgICovXG4gICAgXCJ1cGRhdGU6dmFsaWRhdGVkRm9ybVwiXG4gIF0sXG4gIHNldHVwKHByb3BzOiBhbnksIGN0eDogYW55KSB7XG4gICAgY29uc3QgeyB1aSB9ID0gdXNlVWkoKTtcbiAgICBjb25zdCB7IG1lcmdlIH0gPSB1c2VNZXJnZSgpO1xuICAgIGNvbnN0IGRvTWVyZ2UgPSBtZXJnZTtcbiAgICBjb25zdCB7IGRvQ29tcHV0ZWQsIEFzeW5jQ29tcHV0ZVZhbHVlLCBDb21wdXRlVmFsdWUgfSA9IHVzZUNvbXB1dGUoKTtcbiAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgdnVlL25vLXNldHVwLXByb3BzLWRlc3RydWN0dXJlXG4gICAgXy5lYWNoKHByb3BzLmNvbHVtbnMsIChpdGVtKSA9PiB7XG4gICAgICBpZiAoaXRlbS52YWx1ZSAhPSBudWxsICYmIChpdGVtLnZhbHVlIGluc3RhbmNlb2YgQXN5bmNDb21wdXRlVmFsdWUgfHwgaXRlbS52YWx1ZSBpbnN0YW5jZW9mIENvbXB1dGVWYWx1ZSkpIHtcbiAgICAgICAgbG9nZ2VyLndhcm4oXCJzZWFyY2gudmFsdWXphY3nva7kuI3mlK/mjIFDb21wdXRlVmFsdWUvQXN5bmNDb21wdXRl57G75Z6L55qE5Yqo5oCB6K6h566XXCIpO1xuICAgICAgfVxuICAgIH0pO1xuXG4gICAgZnVuY3Rpb24gY3JlYXRlSW5pdGlhbEZvcm0oKTogYW55IHtcbiAgICAgIC8v6buY6K6k5YC8XG4gICAgICBjb25zdCBmb3JtOiBhbnkgPSB7fTtcblxuICAgICAgXy5mb3JFYWNoKHByb3BzLmNvbHVtbnMsIChjb2x1bW4sIGtleSkgPT4ge1xuICAgICAgICBpZiAoY29sdW1uLnZhbHVlID09PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cbiAgICAgICAgY29uc3QgZGVmVmFsdWUgPSB1bnJlZihjb2x1bW4udmFsdWUpO1xuICAgICAgICBpZiAoZGVmVmFsdWUgIT09IHVuZGVmaW5lZCAmJiBjb2x1bW4uc2hvdyAhPT0gZmFsc2UgJiYgY29sdW1uLmNvbXBvbmVudD8uc2hvdyAhPT0gZmFsc2UpIHtcbiAgICAgICAgICAvL+m7mOiupOWAvFxuICAgICAgICAgIGZvcm1ba2V5XSA9IGRlZlZhbHVlO1xuICAgICAgICB9XG4gICAgICB9KTtcblxuICAgICAgcmV0dXJuIF8uY2xvbmVEZWVwKG1lcmdlKHt9LCBwcm9wcy5pbml0aWFsRm9ybSwgZm9ybSkpO1xuICAgIH1cblxuICAgIGNvbnN0IGZvcm1EYXRhID0gcmVhY3RpdmUoY3JlYXRlSW5pdGlhbEZvcm0oKSk7XG5cbiAgICBsZXQgYXV0b1NlYXJjaDogYW55ID0gbnVsbDtcblxuICAgIGNvbnN0IGNvbXB1dGVkQ29sdW1uczogUmVmPFR5cGVNYXA8U2VhcmNoSXRlbVByb3BzPj4gPSBkb0NvbXB1dGVkKFxuICAgICAgKCkgPT4ge1xuICAgICAgICByZXR1cm4gcHJvcHMuY29sdW1ucztcbiAgICAgIH0sXG4gICAgICBnZXRDb250ZXh0Rm4sXG4gICAgICBudWxsLFxuICAgICAgKGNvbHVtbnM6IGFueSkgPT4ge1xuICAgICAgICBjb25zdCBmb3JtSXRlbSA9IF8uY2xvbmVEZWVwKHByb3BzLmZvcm1JdGVtIHx8IHt9KTtcbiAgICAgICAgXy5mb3JFYWNoKGNvbHVtbnMsIChpdGVtKSA9PiB7XG4gICAgICAgICAgbWVyZ2UoaXRlbSwgZm9ybUl0ZW0sIGl0ZW0pO1xuICAgICAgICB9KTtcbiAgICAgICAgLy8gY29sdW1ucyA9IG1lcmdlKGZvcm1JdGVtLCBjb2x1bW5zKTtcbiAgICAgICAgaWYgKCFwcm9wcy52YWxpZGF0ZSkge1xuICAgICAgICAgIC8v5aaC5p6c5YWz6ZetdmFsaWRhdGXliJnljrvmjolydWxlc1xuICAgICAgICAgIF8uZm9yRWFjaChjb2x1bW5zLCAoaXRlbSkgPT4ge1xuICAgICAgICAgICAgZGVsZXRlIGl0ZW0ucnVsZXM7XG4gICAgICAgICAgICBkZWxldGUgaXRlbS5ydWxlO1xuICAgICAgICAgIH0pO1xuICAgICAgICB9XG4gICAgICAgIC8vIOWQiOW5tmNvbFxuICAgICAgICBpZiAocHJvcHMuY29sKSB7XG4gICAgICAgICAgXy5mb3JFYWNoKGNvbHVtbnMsICh2KSA9PiB7XG4gICAgICAgICAgICB2LmNvbCA9IG1lcmdlKHt9LCBwcm9wcy5jb2wsIHYuY29sKTtcbiAgICAgICAgICB9KTtcbiAgICAgICAgfVxuXG4gICAgICAgIC8vY2VsbFJlbmRlclxuICAgICAgICBfLmZvckVhY2goY29sdW1ucywgKGl0ZW0pID0+IHtcbiAgICAgICAgICBpdGVtLl9jZWxsUmVuZGVyID0gKCkgPT4ge1xuICAgICAgICAgICAgcmV0dXJuIGNlbGxSZW5kZXIoaXRlbSk7XG4gICAgICAgICAgfTtcbiAgICAgICAgfSk7XG5cbiAgICAgICAgLy/lrZfmrrXmjpLluo9cbiAgICAgICAgbGV0IHNvcnRBcnI6IFNlYXJjaEl0ZW1Qcm9wc1tdID0gW107XG4gICAgICAgIF8uZm9yRWFjaChjb2x1bW5zLCAodiwga2V5KSA9PiB7XG4gICAgICAgICAgdi5fa2V5ID0ga2V5O1xuICAgICAgICAgIHNvcnRBcnIucHVzaCh2KTtcbiAgICAgICAgfSk7XG4gICAgICAgIHNvcnRBcnIgPSBfLnNvcnRCeShzb3J0QXJyLCAoaXRlbSkgPT4ge1xuICAgICAgICAgIHJldHVybiBpdGVtLm9yZGVyID8/IENvbnN0YW50cy5vcmRlckRlZmF1bHQ7XG4gICAgICAgIH0pO1xuXG4gICAgICAgIGNvbnN0IHNvcnRlZENvbHVtbnM6IHtcbiAgICAgICAgICBba2V5OiBzdHJpbmddOiBTZWFyY2hJdGVtUHJvcHM7XG4gICAgICAgIH0gPSB7fTtcblxuICAgICAgICBzb3J0QXJyLmZvckVhY2goKGl0ZW0pID0+IHtcbiAgICAgICAgICBsZXQgX2tleSA9IGl0ZW0uX2tleTtcbiAgICAgICAgICBkZWxldGUgaXRlbS5fa2V5O1xuICAgICAgICAgIHNvcnRlZENvbHVtbnNbX2tleV0gPSBpdGVtO1xuICAgICAgICB9KTtcbiAgICAgICAgcmV0dXJuIHNvcnRlZENvbHVtbnM7XG4gICAgICB9XG4gICAgKTtcblxuICAgIGZ1bmN0aW9uIG9uRm9ybVZhbGlkYXRlZCgpIHtcbiAgICAgIGNvbnN0IHZhbGlkYXRlZEZvcm0gPSBfLmNsb25lRGVlcChmb3JtRGF0YSk7XG4gICAgICBjdHguZW1pdChcInVwZGF0ZTp2YWxpZGF0ZWRGb3JtXCIsIHZhbGlkYXRlZEZvcm0pO1xuICAgIH1cblxuICAgIHdhdGNoKFxuICAgICAgKCkgPT4ge1xuICAgICAgICByZXR1cm4gcHJvcHMudmFsaWRhdGVkRm9ybTtcbiAgICAgIH0sXG4gICAgICAodmFsdWU6IGFueSkgPT4ge1xuICAgICAgICBmb3IgKGNvbnN0IGtleSBpbiBmb3JtRGF0YSkge1xuICAgICAgICAgIGRlbGV0ZSBmb3JtRGF0YVtrZXldO1xuICAgICAgICB9XG4gICAgICAgIG1lcmdlKGZvcm1EYXRhLCB2YWx1ZSB8fCB7fSk7XG4gICAgICB9LFxuICAgICAge1xuICAgICAgICBkZWVwOiB0cnVlXG4gICAgICB9XG4gICAgKTtcblxuICAgIGNvbnN0IGdldCA9IChmb3JtOiBhbnksIGtleTogYW55KSA9PiB7XG4gICAgICByZXR1cm4gXy5nZXQoZm9ybSwga2V5KTtcbiAgICB9O1xuXG4gICAgZnVuY3Rpb24gc3BsaXRLZXkoa2V5OiBzdHJpbmcpIHtcbiAgICAgIGlmIChrZXkgPT0gbnVsbCkge1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG4gICAgICBpZiAoa2V5LmluZGV4T2YoXCIuXCIpID49IDApIHtcbiAgICAgICAgcmV0dXJuIGtleS5zcGxpdChcIi5cIik7XG4gICAgICB9XG4gICAgICByZXR1cm4ga2V5O1xuICAgIH1cblxuICAgIC8vIGNvbnN0IGRlYm91bmNlVmFsaWRhdGUgPSBfLmRlYm91bmNlKGFzeW5jICgpID0+IHtcbiAgICAvLyAgIGlmIChhd2FpdCBkb1ZhbGlkYXRlKCkpIHtcbiAgICAvLyAgICAgb25Gb3JtVmFsaWRhdGVkKCk7XG4gICAgLy8gICB9XG4gICAgLy8gfSwgNTAwKTtcblxuICAgIGZ1bmN0aW9uIGNlbGxSZW5kZXIoaXRlbTogYW55KSB7XG4gICAgICBjb25zdCBrZXkgPSBpdGVtLmtleTtcblxuICAgICAgYXN5bmMgZnVuY3Rpb24gX29uVXBkYXRlTW9kZWxWYWx1ZSgkZXZlbnQ6IGFueSkge1xuICAgICAgICAvLyBhd2FpdCBkZWJvdW5jZVZhbGlkYXRlKCk7XG4gICAgICAgIG9uVmFsdWVDaGFuZ2VkKCRldmVudCwgaXRlbSk7XG4gICAgICB9XG5cbiAgICAgIGZ1bmN0aW9uIF9vbklucHV0KCkge1xuICAgICAgICBvbklucHV0KGl0ZW0pO1xuICAgICAgfVxuXG4gICAgICBmdW5jdGlvbiBvbktleXVwKGl0ZW06IGFueSwga2V5OiBhbnkpIHtcbiAgICAgICAgaWYgKGtleS5jb2RlID09PSBcIkVudGVyXCIpIHtcbiAgICAgICAgICBpZiAoaXRlbS5hdXRvU2VhcmNoVHJpZ2dlciA9PT0gXCJlbnRlclwiKSB7XG4gICAgICAgICAgICBkb1NlYXJjaCgpO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICBsZXQgZGVmYXVsdFNsb3Q6IGFueSA9IG51bGw7XG4gICAgICBpZiAocHJvcHMuc2xvdHNbXCJzZWFyY2hfXCIgKyBrZXldKSB7XG4gICAgICAgIGRlZmF1bHRTbG90ID0gPGZzLXNsb3QtcmVuZGVyIHNsb3RzPXtwcm9wcy5zbG90c1tcInNlYXJjaF9cIiArIGtleV19IHNjb3BlPXtidWlsZEZpZWxkQ29udGV4dChrZXkpfSAvPjtcbiAgICAgIH0gZWxzZSBpZiAoaXRlbS5yZW5kZXIpIHtcbiAgICAgICAgZGVmYXVsdFNsb3QgPSA8ZnMtcmVuZGVyIHJlbmRlci1mdW5jPXtpdGVtLnJlbmRlcn0gc2NvcGU9e2J1aWxkRmllbGRDb250ZXh0KGtleSl9IC8+O1xuICAgICAgfSBlbHNlIGlmIChpdGVtLmNvbXBvbmVudCAmJiBpdGVtLmNvbXBvbmVudC5zaG93ICE9PSBmYWxzZSkge1xuICAgICAgICBkZWZhdWx0U2xvdCA9IChcbiAgICAgICAgICA8ZnMtY29tcG9uZW50LXJlbmRlclxuICAgICAgICAgICAgcmVmPXsodmFsdWU6IGFueSkgPT4ge1xuICAgICAgICAgICAgICBjb21wb25lbnRSZW5kZXJSZWZzLnZhbHVlW2tleV0gPSB2YWx1ZTtcbiAgICAgICAgICAgIH19XG4gICAgICAgICAgICBtb2RlbC12YWx1ZT17Z2V0KGZvcm1EYXRhLCBrZXkpfVxuICAgICAgICAgICAgb25LZXl1cD17KCRldmVudDogYW55KSA9PiB7XG4gICAgICAgICAgICAgIG9uS2V5dXAoaXRlbSwgJGV2ZW50KTtcbiAgICAgICAgICAgIH19XG4gICAgICAgICAgICB7Li4uaXRlbS5jb21wb25lbnR9XG4gICAgICAgICAgICBzY29wZT17YnVpbGRGaWVsZENvbnRleHQoa2V5KX1cbiAgICAgICAgICAgIG9uVXBkYXRlOm1vZGVsVmFsdWU9e19vblVwZGF0ZU1vZGVsVmFsdWV9XG4gICAgICAgICAgICBvbklucHV0PXtfb25JbnB1dH1cbiAgICAgICAgICAvPlxuICAgICAgICApO1xuICAgICAgfVxuXG4gICAgICBjb25zdCBzcGxpdGVkS2V5ID0gc3BsaXRLZXkoa2V5KTtcblxuICAgICAgcmV0dXJuIHVpLmZvcm1JdGVtLnJlbmRlcih7XG4gICAgICAgIHByb3BzOiB7XG4gICAgICAgICAgLi4uaXRlbSxcbiAgICAgICAgICBsYWJlbDogaXRlbS50aXRsZSxcbiAgICAgICAgICBbdWkuZm9ybUl0ZW0ucHJvcF06IHNwbGl0ZWRLZXksXG4gICAgICAgICAgcGF0aDoga2V5LFxuICAgICAgICAgIHJ1bGVQYXRoOiBrZXlcbiAgICAgICAgfSxcbiAgICAgICAgc2xvdHM6IHtcbiAgICAgICAgICBkZWZhdWx0KCkge1xuICAgICAgICAgICAgcmV0dXJuIGRlZmF1bHRTbG90O1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfSk7XG4gICAgfVxuXG4gICAgY29uc3Qgc2VhcmNoRm9ybVJlZiA9IHJlZigpO1xuICAgIGNvbnN0IHsgdCB9ID0gdXNlSTE4bigpO1xuICAgIGNvbnN0IGNvbXBvbmVudFJlbmRlclJlZnM6IFJlZiA9IHJlZih7fSk7XG5cbiAgICBmdW5jdGlvbiBnZXRDb21wb25lbnRSZW5kZXJSZWYoa2V5OiBzdHJpbmcpIHtcbiAgICAgIHJldHVybiBjb21wb25lbnRSZW5kZXJSZWZzLnZhbHVlW2tleV07XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gZ2V0Q29tcG9uZW50UmVmKGtleTogc3RyaW5nKTogYW55IHtcbiAgICAgIHJldHVybiBnZXRDb21wb25lbnRSZW5kZXJSZWYoa2V5KT8uZ2V0VGFyZ2V0UmVmKCk7XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gZ2V0Q29udGV4dEZuKCk6IFNlYXJjaEV2ZW50Q29udGV4dCB7XG4gICAgICByZXR1cm4geyBmb3JtOiBmb3JtRGF0YSwgdmFsaWRhdGVkRm9ybTogcHJvcHMudmFsaWRhdGVkRm9ybSwgZ2V0Q29tcG9uZW50UmVmLCBkb1NlYXJjaCwgZG9SZXNldCwgZG9WYWxpZGF0ZSB9O1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIGJ1aWxkRmllbGRDb250ZXh0KGtleTogc3RyaW5nKSB7XG4gICAgICByZXR1cm4geyAuLi5nZXRDb250ZXh0Rm4oKSwga2V5LCB2YWx1ZTogXy5nZXQoZm9ybURhdGEsIGtleSkgfTtcbiAgICB9XG5cbiAgICBhc3luYyBmdW5jdGlvbiBkb1ZhbGlkYXRlKHNpbGVudDogYm9vbGVhbiA9IGZhbHNlLCB0cmlnZ2VyOiBzdHJpbmcgPSBcInNlYXJjaFwiKTogUHJvbWlzZTxib29sZWFuPiB7XG4gICAgICB0cnkge1xuICAgICAgICBpZiAocHJvcHMudmFsaWRhdGUpIHtcbiAgICAgICAgICBhd2FpdCB1aS5mb3JtLnZhbGlkYXRlV3JhcChzZWFyY2hGb3JtUmVmLnZhbHVlKTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgIH0gY2F0Y2ggKGU6IGFueSkge1xuICAgICAgICBpZiAoIXNpbGVudCkge1xuICAgICAgICAgIGN0eC5lbWl0KFwidmFsaWRhdGUtZXJyb3JcIiwgeyAuLi5nZXRDb250ZXh0Rm4oKSwgZXJyb3I6IGUsIHRyaWdnZXIgfSk7XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICB9XG4gICAgfVxuXG4gICAgYXN5bmMgZnVuY3Rpb24gZG9TZWFyY2goKSB7XG4gICAgICBpZiAoYXV0b1NlYXJjaCkge1xuICAgICAgICAvLyDpmLLmipbmn6Xor6Llj5bmtohcbiAgICAgICAgYXV0b1NlYXJjaC5jYW5jZWwoKTtcbiAgICAgIH1cblxuICAgICAgaWYgKGF3YWl0IGRvVmFsaWRhdGUoKSkge1xuICAgICAgICBvbkZvcm1WYWxpZGF0ZWQoKTtcbiAgICAgICAgYXdhaXQgbmV4dFRpY2soKTtcbiAgICAgICAgY3R4LmVtaXQoXCJfc2VhcmNoXCIsIGdldENvbnRleHRGbigpKTtcbiAgICAgICAgY3R4LmVtaXQoXCJzZWFyY2hcIiwgZ2V0Q29udGV4dEZuKCkpO1xuICAgICAgfVxuICAgIH1cblxuICAgIGFzeW5jIGZ1bmN0aW9uIGRvUmVzZXQoKSB7XG4gICAgICAvLyBkZWJ1Z2dlcjtcbiAgICAgIC8vIHVpLmZvcm0ucmVzZXRXcmFwKHNlYXJjaEZvcm1SZWYudmFsdWUsIHsgZm9ybSwgaW5pdGlhbEZvcm06IGNyZWF0ZUluaXRpYWxGb3JtKCkgfSk7XG4gICAgICBjb25zdCBpbml0aWFsRm9ybSA9IGNyZWF0ZUluaXRpYWxGb3JtKCk7XG4gICAgICBjb25zdCBlbnRyaWVzID0gXy5lbnRyaWVzKGZvcm1EYXRhKTtcbiAgICAgIGZvciAoY29uc3QgZW50cnkgb2YgZW50cmllcykge1xuICAgICAgICBjb25zdCBpbml0aWFsVmFsdWUgPSBfLmdldChpbml0aWFsRm9ybSwgZW50cnlbMF0pO1xuICAgICAgICBpZiAoaW5pdGlhbFZhbHVlID09IG51bGwpIHtcbiAgICAgICAgICBfLnVuc2V0KGZvcm1EYXRhLCBlbnRyeVswXSk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgXy5zZXQoZm9ybURhdGEsIGVudHJ5WzBdLCBpbml0aWFsVmFsdWUpO1xuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIGlmIChhd2FpdCBkb1ZhbGlkYXRlKCkpIHtcbiAgICAgICAgb25Gb3JtVmFsaWRhdGVkKCk7XG4gICAgICAgIGF3YWl0IG5leHRUaWNrKCk7XG4gICAgICAgIGlmIChwcm9wcy5yZXNldCkge1xuICAgICAgICAgIHByb3BzLnJlc2V0KGdldENvbnRleHRGbigpKTtcbiAgICAgICAgfVxuICAgICAgICAvLyDooajljZXph43nva7kuovku7ZcbiAgICAgICAgY3R4LmVtaXQoXCJfcmVzZXRcIiwgZ2V0Q29udGV4dEZuKCkpO1xuICAgICAgICBjdHguZW1pdChcInJlc2V0XCIsIGdldENvbnRleHRGbigpKTtcbiAgICAgICAgaWYgKHByb3BzLnNlYXJjaEFmdGVyUmVzZXQpIHtcbiAgICAgICAgICBkb1NlYXJjaCgpO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuXG4gICAgY29uc3QgY29tcHV0ZWRCdXR0b25zID0gY29tcHV0ZWQoKCkgPT4ge1xuICAgICAgY29uc3QgYnRuczogYW55ID0gW107XG4gICAgICBjb25zdCBkZWZCdG5PcHRpb25zOiBCdXR0b25zUHJvcHM8U2VhcmNoRXZlbnRDb250ZXh0PiA9IHtcbiAgICAgICAgc2VhcmNoOiB7XG4gICAgICAgICAgc2hvdzogdHJ1ZSxcbiAgICAgICAgICB0eXBlOiBcInByaW1hcnlcIixcbiAgICAgICAgICBkaXNhYmxlZDogZmFsc2UsXG4gICAgICAgICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIEB0eXBlc2NyaXB0LWVzbGludC9uby11bnVzZWQtdmFyc1xuICAgICAgICAgIGNsaWNrOiAoY29udGV4dDogU2VhcmNoRXZlbnRDb250ZXh0KSA9PiB7XG4gICAgICAgICAgICBkb1NlYXJjaCgpO1xuICAgICAgICAgIH0sXG4gICAgICAgICAgb3JkZXI6IDEsXG4gICAgICAgICAgdGV4dDogdChcImZzLnNlYXJjaC5zZWFyY2gudGV4dFwiKSAvLyAn5p+l6K+iJyxcbiAgICAgICAgfSxcbiAgICAgICAgcmVzZXQ6IHtcbiAgICAgICAgICBzaG93OiB0cnVlLFxuICAgICAgICAgIGRpc2FibGVkOiBmYWxzZSxcbiAgICAgICAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgQHR5cGVzY3JpcHQtZXNsaW50L25vLXVudXNlZC12YXJzXG4gICAgICAgICAgY2xpY2s6IChjb250ZXh0OiBTZWFyY2hFdmVudENvbnRleHQpID0+IHtcbiAgICAgICAgICAgIGRvUmVzZXQoKTtcbiAgICAgICAgICB9LFxuICAgICAgICAgIHRleHQ6IHQoXCJmcy5zZWFyY2gucmVzZXQudGV4dFwiKSwgLy8gJ+mHjee9ricsXG4gICAgICAgICAgb3JkZXI6IDJcbiAgICAgICAgfVxuICAgICAgfTtcbiAgICAgIG1lcmdlKGRlZkJ0bk9wdGlvbnMsIHByb3BzLmJ1dHRvbnMpO1xuICAgICAgZm9yIChsZXQga2V5IGluIGRlZkJ0bk9wdGlvbnMpIHtcbiAgICAgICAgY29uc3QgYnRuID0gZGVmQnRuT3B0aW9uc1trZXldO1xuICAgICAgICBidG4uX2NsaWNrID0gKCkgPT4ge1xuICAgICAgICAgIGJ0bi5jbGljayhnZXRDb250ZXh0Rm4oKSk7XG4gICAgICAgIH07XG4gICAgICAgIGJ0bnMucHVzaChidG4pO1xuICAgICAgfVxuXG4gICAgICBidG5zLnNvcnQoKGE6IGFueSwgYjogYW55KSA9PiB7XG4gICAgICAgIHJldHVybiBhLm9yZGVyIC0gYi5vcmRlcjtcbiAgICAgIH0pO1xuICAgICAgcmV0dXJuIGJ0bnM7XG4gICAgfSk7XG5cbiAgICBmdW5jdGlvbiBpbml0QXV0b1NlYXJjaCgpIHtcbiAgICAgIGlmIChwcm9wcy5hdXRvU2VhcmNoID09PSBmYWxzZSkge1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG4gICAgICAvLyDmnoTlu7rpmLLmipbmn6Xor6Llh73mlbBcbiAgICAgIGlmIChwcm9wcy5kZWJvdW5jZSAhPT0gZmFsc2UpIHtcbiAgICAgICAgbGV0IHdhaXQgPSBwcm9wcy5kZWJvdW5jZT8ud2FpdCB8fCA1MDA7XG4gICAgICAgIGF1dG9TZWFyY2ggPSBfLmRlYm91bmNlKGRvU2VhcmNoLCB3YWl0LCBwcm9wcy5kZWJvdW5jZSk7XG4gICAgICB9XG4gICAgfVxuXG4gICAgaW5pdEF1dG9TZWFyY2goKTtcblxuICAgIGZ1bmN0aW9uIGdldEZvcm0oKSB7XG4gICAgICByZXR1cm4gZm9ybURhdGE7XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gZ2V0VmFsaWRhdGVkRm9ybSgpIHtcbiAgICAgIHJldHVybiBwcm9wcy52YWxpZGF0ZWRGb3JtO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIOiuvue9rmZvcm3lgLxcbiAgICAgKi9cbiAgICBmdW5jdGlvbiBzZXRGb3JtKG5ld0Zvcm06IGFueSwgbWVyZ2UgPSB0cnVlKSB7XG4gICAgICBpZiAoIW1lcmdlKSB7XG4gICAgICAgIF8uZWFjaChfLmtleXMoZm9ybURhdGEpLCAoaXRlbSkgPT4ge1xuICAgICAgICAgIGRlbGV0ZSBmb3JtRGF0YVtpdGVtXTtcbiAgICAgICAgfSk7XG4gICAgICB9XG4gICAgICBkb01lcmdlKGZvcm1EYXRhLCBuZXdGb3JtKTtcbiAgICAgIG9uRm9ybVZhbGlkYXRlZCgpO1xuICAgIH1cblxuICAgIGNvbnN0IGlucHV0RXZlbnREaXNhYmxlZCA9IHJlZihmYWxzZSk7XG5cbiAgICBjb25zdCBkb0F1dG9TZWFyY2ggPSAoKSA9PiB7XG4gICAgICBsb2dnZXIuZGVidWcoXCJkbyBhdXRvIHNlYXJjaCxpbnB1dEV2ZW50RGlzYWJsZWQ6XCIsIGlucHV0RXZlbnREaXNhYmxlZC52YWx1ZSk7XG4gICAgICBpZiAoaW5wdXRFdmVudERpc2FibGVkLnZhbHVlICE9PSB0cnVlICYmIGF1dG9TZWFyY2gpIHtcbiAgICAgICAgLy8g6Ziy5oqW5p+l6K+iXG4gICAgICAgIGF1dG9TZWFyY2goKTtcbiAgICAgIH1cbiAgICB9O1xuXG4gICAgY29uc3Qgb25JbnB1dCA9IChpdGVtOiBhbnkpID0+IHtcbiAgICAgIGlmIChpdGVtLmF1dG9TZWFyY2hUcmlnZ2VyID09PSBcImlucHV0XCIpIHtcbiAgICAgICAgZG9BdXRvU2VhcmNoKCk7XG4gICAgICB9XG4gICAgfTtcbiAgICAvLyDovpPlhaXms5Xnm5HlkKxcbiAgICBjb25zdCBjaGFuZ2VJbnB1dEV2ZW50RGlzYWJsZWQgPSAoZGlzYWJsZWQ6IGJvb2xlYW4pID0+IHtcbiAgICAgIGlucHV0RXZlbnREaXNhYmxlZC52YWx1ZSA9IGRpc2FibGVkO1xuICAgICAgZG9BdXRvU2VhcmNoKCk7XG4gICAgfTtcblxuICAgIGFzeW5jIGZ1bmN0aW9uIG9uVmFsdWVDaGFuZ2VkKHZhbHVlOiBhbnksIGl0ZW06IFNlYXJjaEl0ZW1Qcm9wcykge1xuICAgICAgY29uc3Qga2V5ID0gaXRlbS5rZXk7XG4gICAgICBfLnNldChmb3JtRGF0YSwga2V5LCB2YWx1ZSk7XG5cbiAgICAgIGNvbnN0IHNpbGVudCA9IHByb3BzLnZhbGlkYXRlT25DaGFuZ2VTaWxlbnQ7XG4gICAgICAvLyBpZiAocHJvcHMudmFsaWRhdGVPbkNoYW5nZSAmJiAoYXdhaXQgZG9WYWxpZGF0ZShzaWxlbnQsIFwiY2hhbmdlXCIpKSkge1xuICAgICAgLy8gICBvbkZvcm1WYWxpZGF0ZWQoKTtcbiAgICAgIC8vIH1cblxuICAgICAgaWYgKGl0ZW0udmFsdWVDaGFuZ2UpIHtcbiAgICAgICAgY29uc3Qga2V5ID0gaXRlbS5rZXk7XG4gICAgICAgIGNvbnN0IHZhbHVlID0gZm9ybURhdGFba2V5XTtcbiAgICAgICAgY29uc3QgY29tcG9uZW50UmVmID0gZ2V0Q29tcG9uZW50UmVmKGtleSk7XG4gICAgICAgIGNvbnN0IHZhbHVlQ2hhbmdlOiBWYWx1ZUNoYW5nZUhhbmRsZSA9XG4gICAgICAgICAgaXRlbS52YWx1ZUNoYW5nZSBpbnN0YW5jZW9mIEZ1bmN0aW9uID8gaXRlbS52YWx1ZUNoYW5nZSA6IGl0ZW0udmFsdWVDaGFuZ2UuaGFuZGxlO1xuICAgICAgICBjb25zdCBzY29wZSA9IGdldENvbnRleHRGbigpO1xuICAgICAgICBjb25zdCB2YWx1ZUNoYW5nZUNvbnRleHQ6IFZhbHVlQ2hhbmdlQ29udGV4dCA9IHtcbiAgICAgICAgICBpbmRleDogMCxcbiAgICAgICAgICByb3c6IHNjb3BlLmZvcm0sXG4gICAgICAgICAgZm9ybTogc2NvcGUuZm9ybSxcbiAgICAgICAgICAuLi5zY29wZSxcbiAgICAgICAgICBrZXksXG4gICAgICAgICAgdmFsdWUsXG4gICAgICAgICAgY29tcG9uZW50UmVmLFxuICAgICAgICAgIGltbWVkaWF0ZTogZmFsc2UsXG4gICAgICAgICAgZ2V0Q29tcG9uZW50UmVmLFxuICAgICAgICAgIG1vZGU6IFwic2VhcmNoXCJcbiAgICAgICAgfTtcbiAgICAgICAgdmFsdWVDaGFuZ2UodmFsdWVDaGFuZ2VDb250ZXh0KTtcbiAgICAgIH1cbiAgICAgIC8vIFRPRE8g55Sx5LqOdmFsaWRhdGVkRm9ybSDlj5HlsITlh7rljrvlkI7vvIzkvJrmm7TmlrBmb3JtRGF0YeeahOaVsOaNru+8jOaJgOS7peimgeaUvuWcqHZhbHVlQ2hhbmdl5ZCO6Z2iLOS4jeeEtuS8muatu+W+queOr1xuICAgICAgaWYgKHByb3BzLnZhbGlkYXRlT25DaGFuZ2UgJiYgKGF3YWl0IGRvVmFsaWRhdGUoc2lsZW50LCBcImNoYW5nZVwiKSkpIHtcbiAgICAgICAgb25Gb3JtVmFsaWRhdGVkKCk7XG4gICAgICB9XG4gICAgICBpZiAoaXRlbS5hdXRvU2VhcmNoVHJpZ2dlciA9PSBudWxsIHx8IGl0ZW0uYXV0b1NlYXJjaFRyaWdnZXIgPT09IHRydWUgfHwgaXRlbS5hdXRvU2VhcmNoVHJpZ2dlciA9PT0gXCJjaGFuZ2VcIikge1xuICAgICAgICBkb0F1dG9TZWFyY2goKTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICBjb25zdCBjb21wdXRlZFJ1bGVzID0gY29tcHV0ZWQoKCkgPT4ge1xuICAgICAgaWYgKCFwcm9wcy52YWxpZGF0ZSkge1xuICAgICAgICByZXR1cm4gW107XG4gICAgICB9XG4gICAgICByZXR1cm4gcHJvcHMub3B0aW9ucy5ydWxlcztcbiAgICB9KTtcblxuICAgIG9uRm9ybVZhbGlkYXRlZCgpO1xuICAgIHJldHVybiB7XG4gICAgICBnZXQsXG4gICAgICB1aSxcbiAgICAgIG9uVmFsdWVDaGFuZ2VkLFxuICAgICAgZG9WYWxpZGF0ZSxcbiAgICAgIGRvU2VhcmNoLFxuICAgICAgZG9SZXNldCxcbiAgICAgIGZvcm1EYXRhLFxuICAgICAgY29tcG9uZW50UmVuZGVyUmVmcyxcbiAgICAgIGdldENvbXBvbmVudFJlbmRlclJlZixcbiAgICAgIGdldENvbXBvbmVudFJlZixcbiAgICAgIGdldEZvcm0sXG4gICAgICBnZXRWYWxpZGF0ZWRGb3JtLFxuICAgICAgc2V0Rm9ybSxcbiAgICAgIHNlYXJjaEZvcm1SZWYsXG4gICAgICBvbklucHV0LFxuICAgICAgaW5wdXRFdmVudERpc2FibGVkLFxuICAgICAgY2hhbmdlSW5wdXRFdmVudERpc2FibGVkLFxuICAgICAgY29tcHV0ZWRDb2x1bW5zLFxuICAgICAgY29tcHV0ZWRCdXR0b25zLFxuICAgICAgY29tcHV0ZWRSdWxlcyxcbiAgICAgIGJ1aWxkRmllbGRDb250ZXh0LFxuICAgICAgZ2V0Q29udGV4dEZuXG4gICAgfTtcbiAgfVxufSk7XG48L3NjcmlwdD5cbjxzdHlsZSBsYW5nPVwibGVzc1wiPlxuLmZzLXNlYXJjaCB7XG4gICYuZnMtc2VhcmNoLXYyIHtcbiAgICAvL2Rpc3BsYXk6IGZsZXg7XG4gICAgLy9mbGV4LXdyYXA6IG5vd3JhcDtcbiAgICAuZnMtc2VhcmNoLWJ1dHRvbnMge1xuICAgICAgZGlzcGxheTogZmxleDtcbiAgICB9XG4gICAgLnNlYXJjaC1sZWZ0IHtcbiAgICB9XG5cbiAgICAuc2VhcmNoLXJpZ2h0IHtcbiAgICAgIGZsZXg6IDE7XG4gICAgfVxuXG4gICAgLmFudC1mb3JtLWlubGluZSB7XG4gICAgICBmbGV4LXdyYXA6IHdyYXA7XG4gICAgfVxuXG4gICAgLmZzLXNlYXJjaC1mb3JtIHtcbiAgICAgIGRpc3BsYXk6IGZsZXg7XG4gICAgICBhbGlnbi1pdGVtczogY2VudGVyO1xuICAgICAgZmxleC13cmFwOiB3cmFwO1xuXG4gICAgICAuYW50LXBpY2tlcixcbiAgICAgIC5hbnQtc2VsZWN0LFxuICAgICAgLm4tZGF0ZS1waWNrZXIsXG4gICAgICAuZWwtc2VsZWN0LFxuICAgICAgLmVsLWRhdGUtZWRpdG9yIHtcbiAgICAgICAgd2lkdGg6IDEwMCU7XG4gICAgICB9XG5cbiAgICAgIC5lbC1yYW5nZS1lZGl0b3IuZWwtaW5wdXRfX3dyYXBwZXIge1xuICAgICAgICBwYWRkaW5nOiAwO1xuICAgICAgfVxuXG4gICAgICAuYW50LWJ0bi1sb2FkaW5nLWljb24ge1xuICAgICAgICBkaXNwbGF5OiBmbGV4O1xuICAgICAgICBtYXJnaW4tbGVmdDogMnB4O1xuICAgICAgICBtYXJnaW4tcmlnaHQ6IDJweDtcbiAgICAgIH1cblxuICAgICAgJi5lbC1mb3JtLS1sYWJlbC10b3Age1xuICAgICAgICAuZWwtZm9ybS1pdGVtIHtcbiAgICAgICAgICBkaXNwbGF5OiBibG9jaztcbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICAuZWwtZm9ybS1pdGVtIHtcbiAgICAgICAgbWFyZ2luLWJvdHRvbTogNHB4O1xuICAgICAgICBtYXJnaW4tdG9wOiA0cHg7XG4gICAgICAgIGRpc3BsYXk6IGZsZXg7XG4gICAgICAgIGFsaWduLWl0ZW1zOiBjZW50ZXI7XG4gICAgICB9XG5cbiAgICAgICYuZWwtZm9ybS0taW5saW5lIHtcbiAgICAgICAgLmVsLWlucHV0IHtcbiAgICAgICAgICB3aWR0aDogMTAwJTtcbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICAuZWwtZm9ybS1pdGVtX19jb250ZW50IHtcbiAgICAgICAgZGlzcGxheTogZmxleDtcbiAgICAgICAgYWxpZ24taXRlbXM6IGNlbnRlcjtcbiAgICAgIH1cbiAgICB9XG5cbiAgICAuZnMtc2VhcmNoLWNvbCB7XG4gICAgICBwb3NpdGlvbjogcmVsYXRpdmU7XG4gICAgICAvLyBhbnRkdlxuICAgICAgLmFudC1mb3JtLWl0ZW0tZXhwbGFpbixcbiAgICAgIC5lbC1mb3JtLWl0ZW1fX2Vycm9yIHtcbiAgICAgICAgZmxvYXQ6IGxlZnQ7XG4gICAgICAgIHBvc2l0aW9uOiBhYnNvbHV0ZTtcbiAgICAgICAgYm90dG9tOiAzcHg7XG4gICAgICAgIHJpZ2h0OiA4cHg7XG4gICAgICAgIHBvaW50ZXItZXZlbnRzOiBub25lO1xuICAgICAgICB0b3A6IGF1dG87XG4gICAgICAgIGxlZnQ6IGF1dG87XG4gICAgICAgIHZpc2liaWxpdHk6IGhpZGRlbjtcbiAgICAgIH1cblxuICAgICAgLmVsLWZvcm0taXRlbV9fZXJyb3Ige1xuICAgICAgICBib3R0b206IDEwcHg7XG4gICAgICB9XG5cbiAgICAgICY6aG92ZXIge1xuICAgICAgICAuYW50LWZvcm0taXRlbS1leHBsYWluLFxuICAgICAgICAuZWwtZm9ybS1pdGVtX19lcnJvciB7XG4gICAgICAgICAgdmlzaWJpbGl0eTogdmlzaWJsZTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cbiAgfVxuXG4gIC5uLWZvcm0taXRlbS1ibGFuayB7XG4gIH1cbn1cbjwvc3R5bGU+XG4iLCI8dGVtcGxhdGU+XG4gIDxjb21wb25lbnQgOmlzPVwidWkuY29sbGFwc2VUcmFuc2l0aW9uLm5hbWVcIj5cbiAgICA8ZGl2IHYtaWY9XCJzaG93ICE9PSBmYWxzZVwiIGNsYXNzPVwiZnMtc2VhcmNoXCIgOmNsYXNzPVwieyAnZnMtc2VhcmNoLW11bHRpLWxpbmUnOiBjb21wdXRlZElzTXVsdGlMaW5lIH1cIj5cbiAgICAgIDxjb21wb25lbnRcbiAgICAgICAgOmlzPVwidWkuZm9ybS5uYW1lXCJcbiAgICAgICAgcmVmPVwic2VhcmNoRm9ybVJlZlwiXG4gICAgICAgIDptb2RlbD1cImZvcm1cIlxuICAgICAgICB2LWJpbmQ9XCJvcHRpb25zXCJcbiAgICAgICAgOnJ1bGVzPVwiY29tcHV0ZWRSdWxlc1wiXG4gICAgICAgIGNsYXNzPVwiZnMtc2VhcmNoLWZvcm1cIlxuICAgICAgICBAY29tcG9zaXRpb25zdGFydD1cImNoYW5nZUlucHV0RXZlbnREaXNhYmxlZCh0cnVlKVwiXG4gICAgICAgIEBjb21wb3NpdGlvbmVuZD1cImNoYW5nZUlucHV0RXZlbnREaXNhYmxlZChmYWxzZSlcIlxuICAgICAgPlxuICAgICAgICA8ZGl2IGNsYXNzPVwiZnMtc2VhcmNoLWJveFwiPlxuICAgICAgICAgIDxkaXYgY2xhc3M9XCJmcy1zZWFyY2gtbWFpblwiPlxuICAgICAgICAgICAgPGRpdlxuICAgICAgICAgICAgICBjbGFzcz1cImZzLXNlYXJjaC1jb2x1bW5zXCJcbiAgICAgICAgICAgICAgOmNsYXNzPVwieyAnZnMtc2VhcmNoLWNvbGxhcHNlJzogY29sbGFwc2UgfVwiXG4gICAgICAgICAgICAgIDpzdHlsZT1cInsgaGVpZ2h0OiBjb21wdXRlZENvbHVtbkJveEhlaWdodCB9XCJcbiAgICAgICAgICAgID5cbiAgICAgICAgICAgICAgPGNvbXBvbmVudCA6aXM9XCJ1aS5yb3cubmFtZVwiIHJlZj1cImNvbHVtbnNSb3dSZWZcIj5cbiAgICAgICAgICAgICAgICA8ZGl2IHYtaWY9XCJzbG90c1snc2VhcmNoLWxlZnQnXVwiIGNsYXNzPVwiZnMtc2VhcmNoLWNvbFwiPlxuICAgICAgICAgICAgICAgICAgPGNvbXBvbmVudCA6aXM9XCJ1aS5mb3JtSXRlbS5uYW1lXCI+XG4gICAgICAgICAgICAgICAgICAgIDxmcy1zbG90LXJlbmRlciA6c2xvdHM9XCJzbG90c1snc2VhcmNoLWxlZnQnXVwiIDpzY29wZT1cInNlYXJjaEV2ZW50Q29udGV4dFJlZlwiIC8+XG4gICAgICAgICAgICAgICAgICA8L2NvbXBvbmVudD5cbiAgICAgICAgICAgICAgICA8L2Rpdj5cbiAgICAgICAgICAgICAgICA8dGVtcGxhdGUgdi1mb3I9XCIoaXRlbSwga2V5KSBpbiBjb21wdXRlZENvbHVtbnNcIiA6a2V5PVwia2V5XCI+XG4gICAgICAgICAgICAgICAgICA8Y29tcG9uZW50IDppcz1cImNvbXB1dGVkQ29sTmFtZVwiIHYtaWY9XCJpdGVtLnNob3cgPT09IHRydWVcIiBjbGFzcz1cImZzLXNlYXJjaC1jb2xcIiB2LWJpbmQ9XCJpdGVtLmNvbFwiPlxuICAgICAgICAgICAgICAgICAgICA8Y29tcG9uZW50IDppcz1cInVpLmZvcm1JdGVtLm5hbWVcIiB2LWJpbmQ9XCJpdGVtXCIgOlt1aS5mb3JtSXRlbS5wcm9wXT1cImtleVwiIDpsYWJlbD1cIml0ZW0udGl0bGVcIj5cbiAgICAgICAgICAgICAgICAgICAgICA8dGVtcGxhdGUgdi1pZj1cInNsb3RzWydzZWFyY2hfJyArIGtleV1cIj5cbiAgICAgICAgICAgICAgICAgICAgICAgIDxmcy1zbG90LXJlbmRlciA6c2xvdHM9XCJzbG90c1snc2VhcmNoXycgKyBrZXldXCIgOnNjb3BlPVwieyAuLi5zZWFyY2hFdmVudENvbnRleHRSZWYsIGtleSB9XCIgLz5cbiAgICAgICAgICAgICAgICAgICAgICA8L3RlbXBsYXRlPlxuICAgICAgICAgICAgICAgICAgICAgIDx0ZW1wbGF0ZSB2LWVsc2U+XG4gICAgICAgICAgICAgICAgICAgICAgICA8ZnMtY29tcG9uZW50LXJlbmRlclxuICAgICAgICAgICAgICAgICAgICAgICAgICB2LWlmPVwiaXRlbS5jb21wb25lbnQgJiYgaXRlbS5jb21wb25lbnQuc2hvdyAhPT0gZmFsc2VcIlxuICAgICAgICAgICAgICAgICAgICAgICAgICA6cmVmPVwiXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgKGVsOiBhbnkpID0+IHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChlbCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb21wb25lbnRSZW5kZXJSZWZzW2l0ZW0ua2V5XSA9IGVsO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgXCJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgOm1vZGVsLXZhbHVlPVwiZ2V0KGZvcm0sIGtleSlcIlxuICAgICAgICAgICAgICAgICAgICAgICAgICB2LWJpbmQ9XCJpdGVtLmNvbXBvbmVudFwiXG4gICAgICAgICAgICAgICAgICAgICAgICAgIDpzY29wZT1cInNlYXJjaEV2ZW50Q29udGV4dFJlZlwiXG4gICAgICAgICAgICAgICAgICAgICAgICAgIEB1cGRhdGU6bW9kZWwtdmFsdWU9XCJvblZhbHVlQ2hhbmdlZCgkZXZlbnQsIGl0ZW0pXCJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgQGlucHV0PVwib25JbnB1dChpdGVtKVwiXG4gICAgICAgICAgICAgICAgICAgICAgICAvPlxuICAgICAgICAgICAgICAgICAgICAgIDwvdGVtcGxhdGU+XG4gICAgICAgICAgICAgICAgICAgIDwvY29tcG9uZW50PlxuICAgICAgICAgICAgICAgICAgPC9jb21wb25lbnQ+XG4gICAgICAgICAgICAgICAgPC90ZW1wbGF0ZT5cblxuICAgICAgICAgICAgICAgIDxkaXYgdi1pZj1cInNsb3RzWydzZWFyY2gtbWlkZGxlJ11cIiBjbGFzcz1cImZzLXNlYXJjaC1jb2wgZnMtc2VhcmNoLW1pZGRsZVwiPlxuICAgICAgICAgICAgICAgICAgPGNvbXBvbmVudCA6aXM9XCJ1aS5mb3JtSXRlbS5uYW1lXCI+XG4gICAgICAgICAgICAgICAgICAgIDxmcy1zbG90LXJlbmRlciA6c2xvdHM9XCJzbG90c1snc2VhcmNoLW1pZGRsZSddXCIgOnNjb3BlPVwic2VhcmNoRXZlbnRDb250ZXh0UmVmXCIgLz5cbiAgICAgICAgICAgICAgICAgIDwvY29tcG9uZW50PlxuICAgICAgICAgICAgICAgIDwvZGl2PlxuICAgICAgICAgICAgICAgIDxmcy1zZWFyY2gtYnV0dG9ucyB2LWlmPVwiIWNvbXB1dGVkSXNNdWx0aUxpbmVcIiA6YnV0dG9ucz1cImNvbXB1dGVkQnV0dG9uc1wiPjwvZnMtc2VhcmNoLWJ1dHRvbnM+XG4gICAgICAgICAgICAgICAgPGRpdiB2LWlmPVwic2xvdHNbJ3NlYXJjaC1yaWdodCddXCIgY2xhc3M9XCJmcy1zZWFyY2gtY29sIGZzLXNlYXJjaC1yaWdodFwiPlxuICAgICAgICAgICAgICAgICAgPGNvbXBvbmVudCA6aXM9XCJ1aS5mb3JtSXRlbS5uYW1lXCI+XG4gICAgICAgICAgICAgICAgICAgIDxmcy1zbG90LXJlbmRlciA6c2xvdHM9XCJzbG90c1snc2VhcmNoLXJpZ2h0J11cIiA6c2NvcGU9XCJzZWFyY2hFdmVudENvbnRleHRSZWZcIiAvPlxuICAgICAgICAgICAgICAgICAgPC9jb21wb25lbnQ+XG4gICAgICAgICAgICAgICAgPC9kaXY+XG4gICAgICAgICAgICAgIDwvY29tcG9uZW50PlxuICAgICAgICAgICAgPC9kaXY+XG4gICAgICAgICAgICA8ZnMtc2VhcmNoLWJ1dHRvbnMgdi1pZj1cImNvbXB1dGVkSXNNdWx0aUxpbmVcIiA6YnV0dG9ucz1cImNvbXB1dGVkQnV0dG9uc1wiPjwvZnMtc2VhcmNoLWJ1dHRvbnM+XG4gICAgICAgICAgPC9kaXY+XG5cbiAgICAgICAgICA8ZGl2IHYtaWY9XCJjb21wdXRlZElzTXVsdGlMaW5lXCIgY2xhc3M9XCJmcy1zZWFyY2gtYWN0aW9uXCI+XG4gICAgICAgICAgICA8Y29tcG9uZW50IDppcz1cInVpLmZvcm1JdGVtLm5hbWVcIj5cbiAgICAgICAgICAgICAgPGZzLWJ1dHRvbiA6aWNvbj1cImNvbGxhcHNlID8gdWkuaWNvbnMuY2FyZXRVcCA6IHVpLmljb25zLmNhcmV0RG93blwiIEBjbGljaz1cInRvZ2dsZUNvbGxhcHNlXCIgLz5cbiAgICAgICAgICAgIDwvY29tcG9uZW50PlxuICAgICAgICAgIDwvZGl2PlxuICAgICAgICA8L2Rpdj5cbiAgICAgIDwvY29tcG9uZW50PlxuICAgIDwvZGl2PlxuICA8L2NvbXBvbmVudD5cbjwvdGVtcGxhdGU+XG5cbjxzY3JpcHQgbGFuZz1cInRzXCI+XG5pbXBvcnQgeyBjb21wdXRlZCwgZGVmaW5lQ29tcG9uZW50LCBuZXh0VGljaywgb25Nb3VudGVkLCByZWFjdGl2ZSwgcmVmLCBSZWYsIHVucmVmIH0gZnJvbSBcInZ1ZVwiO1xuaW1wb3J0IF8gZnJvbSBcImxvZGFzaC1lc1wiO1xuaW1wb3J0IHsgdXNlQ29tcHV0ZSB9IGZyb20gXCIuLi8uLi91c2UvdXNlLWNvbXB1dGVcIjtcbmltcG9ydCB7IHVzZUkxOG4gfSBmcm9tIFwiLi4vLi4vbG9jYWxlXCI7XG5pbXBvcnQgbG9nZ2VyIGZyb20gXCIuLi8uLi91dGlscy91dGlsLmxvZ1wiO1xuaW1wb3J0IEZzU2VhcmNoQnV0dG9ucyBmcm9tIFwiLi9idXR0b25zLnZ1ZVwiO1xuaW1wb3J0IHsgQ29uc3RhbnRzIH0gZnJvbSBcIi4uLy4uL3V0aWxzL3V0aWwuY29uc3RhbnRzXCI7XG5pbXBvcnQgeyBCdXR0b25zUHJvcHMsIFNlYXJjaEV2ZW50Q29udGV4dCwgU2VhcmNoSXRlbVByb3BzIH0gZnJvbSBcIi4uLy4uL2RcIjtcbmltcG9ydCB7IHVzZVVpIH0gZnJvbSBcIi4uLy4uL3VzZS91c2UtdWlcIjtcbmltcG9ydCB7IHVzZU1lcmdlIH0gZnJvbSBcIi4uLy4uL3VzZS91c2UtbWVyZ2VcIjtcblxuLyoqXG4gKiDmn6Xor6LmoYbnu4Tku7ZcbiAqL1xuZXhwb3J0IGRlZmF1bHQgZGVmaW5lQ29tcG9uZW50KHtcbiAgbmFtZTogXCJGc1NlYXJjaFYxXCIsXG4gIGNvbXBvbmVudHM6IHsgRnNTZWFyY2hCdXR0b25zIH0sXG4gIGluaGVyaXRBdHRyczogZmFsc2UsXG4gIHByb3BzOiB7XG4gICAgLyoqXG4gICAgICog5Yid5aeL5p+l6K+i5p2h5Lu2XG4gICAgICog54K55Ye76YeN572u77yM5Lya6YeN572u5oiQ6K+l5p2h5Lu2XG4gICAgICovXG4gICAgaW5pdGlhbEZvcm06IHtcbiAgICAgIHR5cGU6IE9iamVjdFxuICAgIH0sXG4gICAgLyoqXG4gICAgICog6KGo5Y2V5Y+C5pWwXG4gICAgICog5pSv5oyBZWwtZm9ybSB8IGEtZm9ybeeahOWxnuaAp1xuICAgICAqL1xuICAgIG9wdGlvbnM6IHtcbiAgICAgIHR5cGU6IE9iamVjdFxuICAgIH0sXG4gICAgLyoqXG4gICAgICog5p+l6K+i5a2X5q616YWN572uXG4gICAgICovXG4gICAgY29sdW1uczoge1xuICAgICAgdHlwZTogT2JqZWN0XG4gICAgfSxcbiAgICAvKipcbiAgICAgKiB0YWJzXG4gICAgICogeyBzaG93ICwgb3B0aW9ucyxrZXksIGRlZmF1bHR9XG4gICAgICovXG4gICAgdGFiczoge1xuICAgICAgdHlwZTogT2JqZWN0XG4gICAgfSxcbiAgICAvKipcbiAgICAgKiDmjInpkq7phY3nva4s5Y+v5Lul5qC55o2ub3JkZXLmjpLluo9cbiAgICAgKiB7c2VhcmNoOnsuLi5Gc0J1dHRvbn0scmVzZXQ6ey4uLkZzQnV0dG9ufX1cbiAgICAgKi9cbiAgICBidXR0b25zOiB7XG4gICAgICB0eXBlOiBPYmplY3RcbiAgICB9LFxuICAgIC8qKlxuICAgICAqIOeCueWHu+mHjee9ruWQjuaYr+WQpueri+WNs+inpuWPkeafpeivolxuICAgICAqL1xuICAgIHNlYXJjaEFmdGVyUmVzZXQ6IHtcbiAgICAgIHR5cGU6IEJvb2xlYW4sXG4gICAgICBkZWZhdWx0OiB0cnVlXG4gICAgfSxcbiAgICAvKipcbiAgICAgKiDmmK/lkKblvIDlkK/oh6rliqjmn6Xor6JcbiAgICAgKi9cbiAgICBhdXRvU2VhcmNoOiB7XG4gICAgICB0eXBlOiBCb29sZWFuLFxuICAgICAgZGVmYXVsdDogdHJ1ZVxuICAgIH0sXG4gICAgLyoqXG4gICAgICog6Ieq5Yqo5p+l6K+i77yM6Ziy5oqW6K6+572uXG4gICAgICog5LygZmFsc2XliJnlhbPpl63oh6rliqjmn6Xor6JcbiAgICAgKi9cbiAgICBkZWJvdW5jZToge1xuICAgICAgdHlwZTogW0Jvb2xlYW4sIE9iamVjdF0sXG4gICAgICBkZWZhdWx0OiB1bmRlZmluZWRcbiAgICB9LFxuICAgIC8qKlxuICAgICAqIOaPkuanvVxuICAgICAqL1xuICAgIHNsb3RzOiB7XG4gICAgICBkZWZhdWx0KCkge1xuICAgICAgICByZXR1cm4ge307XG4gICAgICB9XG4gICAgfSxcbiAgICAvKipcbiAgICAgKiDmmK/lkKbmmL7npLrmn6Xor6LmoYZcbiAgICAgKi9cbiAgICBzaG93OiB7XG4gICAgICB0eXBlOiBCb29sZWFuLFxuICAgICAgZGVmYXVsdDogdHJ1ZVxuICAgIH0sXG4gICAgLyoqXG4gICAgICog5piv5ZCm5ZCv55So5qCh6aqMXG4gICAgICovXG4gICAgdmFsaWRhdGU6IHtcbiAgICAgIGRlZmF1bHQ6IGZhbHNlXG4gICAgfSxcbiAgICAvKipcbiAgICAgKiDluIPlsYAsIHNpbmdsZS1saW5lIOWNleihjO+8jCBtdWx0aS1saW5lIOWkmuihjO+8iOaUr+aMgeWxleW8gOaUtui1t++8iVxuICAgICAqL1xuICAgIGxheW91dDoge1xuICAgICAgdHlwZTogU3RyaW5nLFxuICAgICAgZGVmYXVsdDogXCJzaW5nbGUtbGluZVwiXG4gICAgfSxcbiAgICAvKipcbiAgICAgKiDliJfnmoTlrr3luqborr7nva7vvIxzcGFuPXh4XG4gICAgICovXG4gICAgY29sOiB7fSxcblxuICAgIC8qKlxuICAgICAqIOaYr+WQpuaKmOWPoFxuICAgICAqL1xuICAgIGNvbGxhcHNlOiB7XG4gICAgICB0eXBlOiBCb29sZWFuLFxuICAgICAgZGVmYXVsdDogZmFsc2VcbiAgICB9XG4gIH0sXG4gIGVtaXRzOiBbXG4gICAgLyoqXG4gICAgICog5p+l6K+i5LqL5Lu2XG4gICAgICoqL1xuICAgIFwic2VhcmNoXCIsXG4gICAgLyoqXG4gICAgICog6YeN572u5LqL5Lu2XG4gICAgICoqL1xuICAgIFwicmVzZXRcIixcbiAgICBcImNvbGxhcHNlXCIsXG4gICAgXCJ1cGRhdGU6Y29sbGFwc2VcIlxuICBdLFxuICBzZXR1cChwcm9wcywgY3R4KSB7XG4gICAgY29uc3QgeyB1aSB9ID0gdXNlVWkoKTtcbiAgICAvLyDlvILmraVzZXR1cOmcgOimgeaUvuWcqOesrOS4gOS4qmF3YWl05LmL5YmNXG4gICAgLy8gb25Nb3VudGVkIGlzIGNhbGxlZCB3aGVuIHRoZXJlIGlzIG5vIGFjdGl2ZSBjb21wb25lbnQgaW5zdGFuY2UgdG8gYmUgYXNzb2NpYXRlZCB3aXRoLlxuICAgIC8v5Li65ZWl5Lya5pyJ6L+Z5Liq6K2m5ZGKXG4gICAgb25Nb3VudGVkKCgpID0+IHtcbiAgICAgIGlmIChjb21wdXRlZElzTXVsdGlMaW5lLnZhbHVlICYmIGNvbHVtbnNSb3dSZWYudmFsdWUpIHtcbiAgICAgICAgY29sdW1uc0JveEhlaWdodFJlZi52YWx1ZSA9IGNvbHVtbnNSb3dSZWYudmFsdWUuJGVsLm9mZnNldEhlaWdodDtcbiAgICAgICAgY29uc3QgY29sdW1uc0xpc3QgPSBjb2x1bW5zUm93UmVmLnZhbHVlLiRlbC5jaGlsZHJlbjtcbiAgICAgICAgaWYgKGNvbHVtbnNMaXN0ICYmIGNvbHVtbnNMaXN0Lmxlbmd0aCA+IDEpIHtcbiAgICAgICAgICBjb2x1bW5zTGluZUhlaWdodFJlZi52YWx1ZSA9IGNvbHVtbnNMaXN0WzFdLm9mZnNldEhlaWdodCArIDI7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9KTtcblxuICAgIGxldCBhdXRvU2VhcmNoOiBhbnkgPSBudWxsO1xuICAgIGZ1bmN0aW9uIGNyZWF0ZUluaXRpYWxGb3JtKCkge1xuICAgICAgLy9AdHMtaWdub3JlXG4gICAgICByZXR1cm4gXy5jbG9uZURlZXAocHJvcHMuaW5pdGlhbEZvcm0gfHwge30pO1xuICAgIH1cbiAgICBjb25zdCBmb3JtID0gcmVhY3RpdmUoY3JlYXRlSW5pdGlhbEZvcm0oKSk7XG4gICAgY29uc3QgeyBkb0NvbXB1dGVkLCBBc3luY0NvbXB1dGVWYWx1ZSB9ID0gdXNlQ29tcHV0ZSgpO1xuICAgIC8vQHRzLWlnbm9yZVxuICAgIF8uZWFjaChwcm9wcy5jb2x1bW5zLCAoaXRlbSkgPT4ge1xuICAgICAgaWYgKGl0ZW0udmFsdWUgIT0gbnVsbCAmJiBpdGVtLnZhbHVlIGluc3RhbmNlb2YgQXN5bmNDb21wdXRlVmFsdWUpIHtcbiAgICAgICAgbG9nZ2VyLndhcm4oXCJzZWFyY2gudmFsdWXphY3nva7kuI3mlK/mjIFBc3luY0NvbXB1dGXnsbvlnovnmoTliqjmgIHorqHnrpdcIik7XG4gICAgICB9XG4gICAgfSk7XG4gICAgY29uc3QgeyBtZXJnZSB9ID0gdXNlTWVyZ2UoKTtcbiAgICBjb25zdCBkb01lcmdlID0gbWVyZ2U7XG4gICAgY29uc3QgY29tcHV0ZWRDb2x1bW5zID0gZG9Db21wdXRlZChcbiAgICAgICgpID0+IHtcbiAgICAgICAgLy9AdHMtaWdub3JlXG4gICAgICAgIHJldHVybiBwcm9wcy5jb2x1bW5zO1xuICAgICAgfSxcbiAgICAgIGdldENvbnRleHRGbixcbiAgICAgIG51bGwsXG4gICAgICAodmFsdWUpID0+IHtcbiAgICAgICAgLy9AdHMtaWdub3JlXG4gICAgICAgIGlmICghcHJvcHMudmFsaWRhdGUpIHtcbiAgICAgICAgICAvL+WmguaenOWFs+mXrXZhbGlkYXRl5YiZ5Y675o6JcnVsZXNcbiAgICAgICAgICBfLmZvckVhY2godmFsdWUsIChpdGVtKSA9PiB7XG4gICAgICAgICAgICBkZWxldGUgaXRlbS5ydWxlcztcbiAgICAgICAgICB9KTtcbiAgICAgICAgfVxuICAgICAgICAvLyDlkIjlubZjb2xcbiAgICAgICAgLy9AdHMtaWdub3JlXG4gICAgICAgIGlmIChwcm9wcy5jb2wpIHtcbiAgICAgICAgICBfLmZvckVhY2godmFsdWUsICh2KSA9PiB7XG4gICAgICAgICAgICAvL0B0cy1pZ25vcmVcbiAgICAgICAgICAgIHYuY29sID0gbWVyZ2Uoe30sIHByb3BzLmNvbCwgdi5jb2wpO1xuICAgICAgICAgIH0pO1xuICAgICAgICB9XG5cbiAgICAgICAgLy/lrZfmrrXmjpLluo9cbiAgICAgICAgbGV0IHNvcnRBcnI6IFNlYXJjaEl0ZW1Qcm9wc1tdID0gW107XG4gICAgICAgIF8uZm9yRWFjaCh2YWx1ZSwgKHYsIGtleSkgPT4ge1xuICAgICAgICAgIHYuX2tleSA9IGtleTtcbiAgICAgICAgICBzb3J0QXJyLnB1c2godik7XG4gICAgICAgIH0pO1xuICAgICAgICBzb3J0QXJyID0gXy5zb3J0Qnkoc29ydEFyciwgKGl0ZW0pID0+IHtcbiAgICAgICAgICByZXR1cm4gaXRlbS5vcmRlciA/PyBDb25zdGFudHMub3JkZXJEZWZhdWx0O1xuICAgICAgICB9KTtcblxuICAgICAgICBjb25zdCBzb3J0ZWRDb2x1bW5zOiB7XG4gICAgICAgICAgW2tleTogc3RyaW5nXTogU2VhcmNoSXRlbVByb3BzO1xuICAgICAgICB9ID0ge307XG5cbiAgICAgICAgc29ydEFyci5mb3JFYWNoKChpdGVtKSA9PiB7XG4gICAgICAgICAgbGV0IF9rZXkgPSBpdGVtLl9rZXk7XG4gICAgICAgICAgZGVsZXRlIGl0ZW0uX2tleTtcbiAgICAgICAgICBzb3J0ZWRDb2x1bW5zW19rZXldID0gaXRlbTtcbiAgICAgICAgfSk7XG4gICAgICAgIHJldHVybiBzb3J0ZWRDb2x1bW5zO1xuICAgICAgfVxuICAgICk7XG5cbiAgICAvL+m7mOiupOWAvFxuICAgIF8uZm9yRWFjaChjb21wdXRlZENvbHVtbnMudmFsdWUsIChjb2x1bW4sIGtleSkgPT4ge1xuICAgICAgaWYgKGNvbHVtbi52YWx1ZSA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cbiAgICAgIGNvbnN0IGRlZlZhbHVlID0gdW5yZWYoY29sdW1uLnZhbHVlKTtcbiAgICAgIGlmIChkZWZWYWx1ZSAhPT0gdW5kZWZpbmVkICYmIGNvbHVtbi5zaG93ICE9PSBmYWxzZSAmJiBjb2x1bW4uY29tcG9uZW50Py5zaG93ICE9PSBmYWxzZSkge1xuICAgICAgICAvL+m7mOiupOWAvFxuICAgICAgICBmb3JtW2tleV0gPSBkZWZWYWx1ZTtcbiAgICAgIH1cbiAgICB9KTtcbiAgICBjb25zdCBzZWFyY2hGb3JtUmVmID0gcmVmKCk7XG4gICAgY29uc3QgeyB0IH0gPSB1c2VJMThuKCk7XG4gICAgY29uc3QgY29tcG9uZW50UmVuZGVyUmVmczogUmVmID0gcmVmKHt9KTtcbiAgICBmdW5jdGlvbiBnZXRDb21wb25lbnRSZW5kZXJSZWYoa2V5OiBzdHJpbmcpIHtcbiAgICAgIHJldHVybiBjb21wb25lbnRSZW5kZXJSZWZzLnZhbHVlW2tleV07XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gZ2V0Q29tcG9uZW50UmVmKGtleTogc3RyaW5nKTogYW55IHtcbiAgICAgIHJldHVybiBnZXRDb21wb25lbnRSZW5kZXJSZWYoa2V5KT8uJHJlZnM/LnRhcmdldFJlZjtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBnZXRDb250ZXh0Rm4oKTogU2VhcmNoRXZlbnRDb250ZXh0IHtcbiAgICAgIHJldHVybiB7IGZvcm0sIHZhbGlkYXRlZEZvcm06IGZvcm0sIGdldENvbXBvbmVudFJlZiwgZG9WYWxpZGF0ZTogbnVsbCB9O1xuICAgIH1cblxuICAgIGNvbnN0IHNlYXJjaEV2ZW50Q29udGV4dFJlZjogUmVmPFNlYXJjaEV2ZW50Q29udGV4dD4gPSByZWYoZ2V0Q29udGV4dEZuKCkpO1xuXG4gICAgYXN5bmMgZnVuY3Rpb24gZG9TZWFyY2goKSB7XG4gICAgICBpZiAoYXV0b1NlYXJjaCkge1xuICAgICAgICAvLyDpmLLmipbmn6Xor6Llj5bmtohcbiAgICAgICAgYXV0b1NlYXJjaC5jYW5jZWwoKTtcbiAgICAgIH1cblxuICAgICAgY29uc3QgdmFsaWQgPSBhd2FpdCB1aS5mb3JtLnZhbGlkYXRlV3JhcChzZWFyY2hGb3JtUmVmLnZhbHVlKTtcbiAgICAgIGlmICh2YWxpZCkge1xuICAgICAgICBjdHguZW1pdChcInNlYXJjaFwiLCBzZWFyY2hFdmVudENvbnRleHRSZWYudmFsdWUpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgdWkubWVzc2FnZS5lcnJvcih7XG4gICAgICAgICAgbWVzc2FnZTogdChcImZzLnNlYXJjaC5lcnJvci5tZXNzYWdlXCIpXG4gICAgICAgIH0pO1xuICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICB9XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gZG9SZXNldCgpIHtcbiAgICAgIC8vIGRlYnVnZ2VyO1xuICAgICAgLy8gdWkuZm9ybS5yZXNldFdyYXAoc2VhcmNoRm9ybVJlZi52YWx1ZSwgeyBmb3JtLCBpbml0aWFsRm9ybTogY3JlYXRlSW5pdGlhbEZvcm0oKSB9KTtcbiAgICAgIGNvbnN0IGluaXRpYWxGb3JtID0gY3JlYXRlSW5pdGlhbEZvcm0oKTtcbiAgICAgIGNvbnN0IGVudHJpZXMgPSBfLmVudHJpZXMoZm9ybSk7XG4gICAgICBmb3IgKGNvbnN0IGVudHJ5IG9mIGVudHJpZXMpIHtcbiAgICAgICAgY29uc3QgaW5pdGlhbFZhbHVlID0gXy5nZXQoaW5pdGlhbEZvcm0sIGVudHJ5WzBdKTtcbiAgICAgICAgaWYgKGluaXRpYWxWYWx1ZSA9PSBudWxsKSB7XG4gICAgICAgICAgXy51bnNldChmb3JtLCBlbnRyeVswXSk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgXy5zZXQoZm9ybSwgZW50cnlbMF0sIGluaXRpYWxWYWx1ZSk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIC8vQHRzLWlnbm9yZVxuICAgICAgaWYgKHByb3BzLnJlc2V0KSB7XG4gICAgICAgIC8vQHRzLWlnbm9yZVxuICAgICAgICBwcm9wcy5yZXNldChzZWFyY2hFdmVudENvbnRleHRSZWYudmFsdWUpO1xuICAgICAgfVxuICAgICAgLy8g6KGo5Y2V6YeN572u5LqL5Lu2XG4gICAgICBjdHguZW1pdChcInJlc2V0XCIsIGdldENvbnRleHRGbigpKTtcbiAgICAgIC8vQHRzLWlnbm9yZVxuICAgICAgaWYgKHByb3BzLnNlYXJjaEFmdGVyUmVzZXQpIHtcbiAgICAgICAgbmV4dFRpY2soKCkgPT4ge1xuICAgICAgICAgIGRvU2VhcmNoKCk7XG4gICAgICAgIH0pO1xuICAgICAgfVxuICAgIH1cbiAgICBjb25zdCBjb21wdXRlZEJ1dHRvbnMgPSBjb21wdXRlZCgoKSA9PiB7XG4gICAgICBjb25zdCBidG5zOiBhbnkgPSBbXTtcbiAgICAgIGNvbnN0IGRlZkJ0bk9wdGlvbnM6IEJ1dHRvbnNQcm9wczxTZWFyY2hFdmVudENvbnRleHQ+ID0ge1xuICAgICAgICBzZWFyY2g6IHtcbiAgICAgICAgICBzaG93OiB0cnVlLFxuICAgICAgICAgIHR5cGU6IFwicHJpbWFyeVwiLFxuICAgICAgICAgIGRpc2FibGVkOiBmYWxzZSxcbiAgICAgICAgICBjbGljazogKGNvbnRleHQ6IFNlYXJjaEV2ZW50Q29udGV4dCkgPT4ge1xuICAgICAgICAgICAgZG9TZWFyY2goKTtcbiAgICAgICAgICB9LFxuICAgICAgICAgIG9yZGVyOiAxLFxuICAgICAgICAgIHRleHQ6IHQoXCJmcy5zZWFyY2guc2VhcmNoLnRleHRcIikgLy8gJ+afpeivoicsXG4gICAgICAgIH0sXG4gICAgICAgIHJlc2V0OiB7XG4gICAgICAgICAgc2hvdzogdHJ1ZSxcbiAgICAgICAgICBkaXNhYmxlZDogZmFsc2UsXG4gICAgICAgICAgY2xpY2s6IChjb250ZXh0OiBTZWFyY2hFdmVudENvbnRleHQpID0+IHtcbiAgICAgICAgICAgIGRvUmVzZXQoKTtcbiAgICAgICAgICB9LFxuICAgICAgICAgIHRleHQ6IHQoXCJmcy5zZWFyY2gucmVzZXQudGV4dFwiKSwgLy8gJ+mHjee9ricsXG4gICAgICAgICAgb3JkZXI6IDJcbiAgICAgICAgfVxuICAgICAgfTtcbiAgICAgIC8vQHRzLWlnbm9yZVxuICAgICAgbWVyZ2UoZGVmQnRuT3B0aW9ucywgcHJvcHMuYnV0dG9ucyk7XG4gICAgICBmb3IgKGxldCBrZXkgaW4gZGVmQnRuT3B0aW9ucykge1xuICAgICAgICBjb25zdCBidG4gPSBkZWZCdG5PcHRpb25zW2tleV07XG4gICAgICAgIGJ0bi5fY2xpY2sgPSAoKSA9PiB7XG4gICAgICAgICAgYnRuLmNsaWNrKGdldENvbnRleHRGbigpKTtcbiAgICAgICAgfTtcbiAgICAgICAgYnRucy5wdXNoKGJ0bik7XG4gICAgICB9XG5cbiAgICAgIGJ0bnMuc29ydCgoYTogYW55LCBiOiBhbnkpID0+IHtcbiAgICAgICAgcmV0dXJuIGEub3JkZXIgLSBiLm9yZGVyO1xuICAgICAgfSk7XG4gICAgICByZXR1cm4gYnRucztcbiAgICB9KTtcblxuICAgIGZ1bmN0aW9uIGluaXRBdXRvU2VhcmNoKCkge1xuICAgICAgLy9AdHMtaWdub3JlXG4gICAgICBpZiAocHJvcHMuYXV0b1NlYXJjaCA9PT0gZmFsc2UpIHtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuICAgICAgLy8g5p6E5bu66Ziy5oqW5p+l6K+i5Ye95pWwXG4gICAgICAvL0B0cy1pZ25vcmVcbiAgICAgIGlmIChwcm9wcy5kZWJvdW5jZSAhPT0gZmFsc2UpIHtcbiAgICAgICAgLy9AdHMtaWdub3JlXG4gICAgICAgIGxldCB3YWl0ID0gcHJvcHMuZGVib3VuY2U/LndhaXQgfHwgNTAwO1xuICAgICAgICAvL0B0cy1pZ25vcmVcbiAgICAgICAgYXV0b1NlYXJjaCA9IF8uZGVib3VuY2UoZG9TZWFyY2gsIHdhaXQsIHByb3BzLmRlYm91bmNlKTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICBpbml0QXV0b1NlYXJjaCgpO1xuXG4gICAgZnVuY3Rpb24gZ2V0Rm9ybSgpIHtcbiAgICAgIHJldHVybiBmb3JtO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIOiuvue9rmZvcm3lgLxcbiAgICAgKi9cbiAgICBmdW5jdGlvbiBzZXRGb3JtKG5ld0Zvcm06IGFueSwgbWVyZ2UgPSB0cnVlKSB7XG4gICAgICBpZiAoIW1lcmdlKSB7XG4gICAgICAgIF8uZWFjaChfLmtleXMoZm9ybSksIChpdGVtKSA9PiB7XG4gICAgICAgICAgZGVsZXRlIGZvcm1baXRlbV07XG4gICAgICAgIH0pO1xuICAgICAgfVxuICAgICAgZG9NZXJnZShmb3JtLCBuZXdGb3JtKTtcbiAgICB9XG5cbiAgICBjb25zdCBpbnB1dEV2ZW50RGlzYWJsZWQgPSByZWYoZmFsc2UpO1xuXG4gICAgY29uc3QgZG9BdXRvU2VhcmNoID0gKCkgPT4ge1xuICAgICAgbG9nZ2VyLmRlYnVnKFwiZG8gYXV0byBzZWFyY2gsaW5wdXRFdmVudERpc2FibGVkOlwiLCBpbnB1dEV2ZW50RGlzYWJsZWQudmFsdWUpO1xuICAgICAgaWYgKGlucHV0RXZlbnREaXNhYmxlZC52YWx1ZSAhPT0gdHJ1ZSAmJiBhdXRvU2VhcmNoKSB7XG4gICAgICAgIC8vIOmYsuaKluafpeivolxuICAgICAgICBhdXRvU2VhcmNoKCk7XG4gICAgICB9XG4gICAgfTtcblxuICAgIGNvbnN0IG9uSW5wdXQgPSAoaXRlbTogYW55KSA9PiB7XG4gICAgICBpZiAoaXRlbS5hdXRvU2VhcmNoVHJpZ2dlciA9PT0gXCJpbnB1dFwiKSB7XG4gICAgICAgIGRvQXV0b1NlYXJjaCgpO1xuICAgICAgfVxuICAgIH07XG4gICAgLy8g6L6T5YWl5rOV55uR5ZCsXG4gICAgY29uc3QgY2hhbmdlSW5wdXRFdmVudERpc2FibGVkID0gKGRpc2FibGVkOiBib29sZWFuKSA9PiB7XG4gICAgICBpbnB1dEV2ZW50RGlzYWJsZWQudmFsdWUgPSBkaXNhYmxlZDtcbiAgICAgIGRvQXV0b1NlYXJjaCgpO1xuICAgIH07XG5cbiAgICBmdW5jdGlvbiBvblZhbHVlQ2hhbmdlZCh2YWx1ZTogYW55LCBpdGVtOiBTZWFyY2hJdGVtUHJvcHMpIHtcbiAgICAgIGNvbnN0IGtleSA9IGl0ZW0ua2V5O1xuICAgICAgXy5zZXQoZm9ybSwga2V5LCB2YWx1ZSk7XG4gICAgICBpZiAoaXRlbS52YWx1ZUNoYW5nZSkge1xuICAgICAgICBjb25zdCBrZXkgPSBpdGVtLmtleTtcbiAgICAgICAgY29uc3QgdmFsdWUgPSBmb3JtW2tleV07XG4gICAgICAgIGNvbnN0IGNvbXBvbmVudFJlZiA9IGdldENvbXBvbmVudFJlZihrZXkpO1xuICAgICAgICBjb25zdCB2YWx1ZUNoYW5nZSA9IGl0ZW0udmFsdWVDaGFuZ2UgaW5zdGFuY2VvZiBGdW5jdGlvbiA/IGl0ZW0udmFsdWVDaGFuZ2UgOiBpdGVtLnZhbHVlQ2hhbmdlLmhhbmRsZTtcbiAgICAgICAgLy9AdHMtaWdub3JlXG4gICAgICAgIHZhbHVlQ2hhbmdlKHsga2V5LCB2YWx1ZSwgY29tcG9uZW50UmVmLCAuLi5nZXRDb250ZXh0Rm4oKSwgaW1taWRpYXRlOiBmYWxzZSB9KTtcbiAgICAgIH1cbiAgICAgIGlmIChpdGVtLmF1dG9TZWFyY2hUcmlnZ2VyID09IG51bGwgfHwgaXRlbS5hdXRvU2VhcmNoVHJpZ2dlciA9PT0gdHJ1ZSB8fCBpdGVtLmF1dG9TZWFyY2hUcmlnZ2VyID09PSBcImNoYW5nZVwiKSB7XG4gICAgICAgIGRvQXV0b1NlYXJjaCgpO1xuICAgICAgfVxuICAgIH1cblxuICAgIGNvbnN0IGNvbXB1dGVkUnVsZXMgPSBjb21wdXRlZCgoKSA9PiB7XG4gICAgICAvL0B0cy1pZ25vcmVcbiAgICAgIGlmICghcHJvcHMudmFsaWRhdGUpIHtcbiAgICAgICAgcmV0dXJuIFtdO1xuICAgICAgfVxuICAgICAgLy9AdHMtaWdub3JlXG4gICAgICByZXR1cm4gcHJvcHMub3B0aW9ucy5ydWxlcztcbiAgICB9KTtcblxuICAgIC8vLS0tLS3lpJrooYzmqKHlvI/mipjlj6BcblxuICAgIGNvbnN0IGNvbHVtbnNSb3dSZWYgPSByZWYoKTtcbiAgICBjb25zdCBjb2x1bW5zQm94SGVpZ2h0UmVmID0gcmVmKDApO1xuICAgIGNvbnN0IGNvbHVtbnNMaW5lSGVpZ2h0UmVmID0gcmVmKDApO1xuXG4gICAgY29uc3QgdG9nZ2xlQ29sbGFwc2UgPSAoKSA9PiB7XG4gICAgICAvL0B0cy1pZ25vcmVcbiAgICAgIGN0eC5lbWl0KFwidXBkYXRlOmNvbGxhcHNlXCIsICFwcm9wcy5jb2xsYXBzZSk7XG4gICAgICAvL0B0cy1pZ25vcmVcbiAgICAgIGN0eC5lbWl0KFwiY29sbGFwc2VcIiwgIXByb3BzLmNvbGxhcHNlKTtcbiAgICB9O1xuXG4gICAgY29uc3QgY29tcHV0ZWRDb2xOYW1lID0gY29tcHV0ZWQoKCkgPT4ge1xuICAgICAgLy9AdHMtaWdub3JlXG4gICAgICBpZiAocHJvcHMubGF5b3V0ID09PSBcIm11bHRpLWxpbmVcIikge1xuICAgICAgICByZXR1cm4gdWkuY29sLm5hbWU7XG4gICAgICB9XG4gICAgICByZXR1cm4gXCJkaXZcIjtcbiAgICB9KTtcbiAgICBjb25zdCBjb21wdXRlZElzTXVsdGlMaW5lID0gY29tcHV0ZWQoKCkgPT4ge1xuICAgICAgLy9AdHMtaWdub3JlXG4gICAgICByZXR1cm4gcHJvcHMubGF5b3V0ID09PSBcIm11bHRpLWxpbmVcIjtcbiAgICAgIC8v5LiN6KaB6L+Z5Liq77yM5Lya5q275b6q546v77yMICYmIGNvbHVtbnNCb3hIZWlnaHRSZWYudmFsdWUgPiBjb2x1bW5zTGluZUhlaWdodFJlZi52YWx1ZTtcbiAgICB9KTtcblxuICAgIGNvbnN0IGNvbXB1dGVkQ29sdW1uQm94SGVpZ2h0ID0gY29tcHV0ZWQoKCkgPT4ge1xuICAgICAgaWYgKCFjb21wdXRlZElzTXVsdGlMaW5lLnZhbHVlKSB7XG4gICAgICAgIHJldHVybiBcImF1dG9cIjtcbiAgICAgIH1cbiAgICAgIC8vQHRzLWlnbm9yZVxuICAgICAgaWYgKHByb3BzLmNvbGxhcHNlKSB7XG4gICAgICAgIHJldHVybiBjb2x1bW5zTGluZUhlaWdodFJlZi52YWx1ZSA/IGNvbHVtbnNMaW5lSGVpZ2h0UmVmLnZhbHVlICsgXCJweFwiIDogXCJcIjtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHJldHVybiBjb2x1bW5zQm94SGVpZ2h0UmVmLnZhbHVlID8gY29sdW1uc0JveEhlaWdodFJlZi52YWx1ZSArIFwicHhcIiA6IFwiXCI7XG4gICAgICB9XG4gICAgfSk7XG5cbiAgICByZXR1cm4ge1xuICAgICAgZ2V0OiAoZm9ybTogYW55LCBrZXk6IGFueSkgPT4ge1xuICAgICAgICByZXR1cm4gXy5nZXQoZm9ybSwga2V5KTtcbiAgICAgIH0sXG4gICAgICB1aSxcbiAgICAgIG9uVmFsdWVDaGFuZ2VkLFxuICAgICAgZG9TZWFyY2gsXG4gICAgICBkb1Jlc2V0LFxuICAgICAgZm9ybSxcbiAgICAgIGNvbXBvbmVudFJlbmRlclJlZnMsXG4gICAgICBnZXRDb21wb25lbnRSZW5kZXJSZWYsXG4gICAgICBnZXRDb21wb25lbnRSZWYsXG4gICAgICBnZXRGb3JtLFxuICAgICAgc2V0Rm9ybSxcbiAgICAgIHNlYXJjaEZvcm1SZWYsXG4gICAgICBvbklucHV0LFxuICAgICAgaW5wdXRFdmVudERpc2FibGVkLFxuICAgICAgY2hhbmdlSW5wdXRFdmVudERpc2FibGVkLFxuICAgICAgY29tcHV0ZWRDb2x1bW5zLFxuICAgICAgY29tcHV0ZWRCdXR0b25zLFxuICAgICAgY29tcHV0ZWRSdWxlcyxcbiAgICAgIGNvbHVtbnNSb3dSZWYsXG4gICAgICBjb21wdXRlZENvbHVtbkJveEhlaWdodCxcbiAgICAgIGNvbXB1dGVkQ29sTmFtZSxcbiAgICAgIGNvbXB1dGVkSXNNdWx0aUxpbmUsXG4gICAgICB0b2dnbGVDb2xsYXBzZSxcbiAgICAgIHNlYXJjaEV2ZW50Q29udGV4dFJlZlxuICAgIH07XG4gIH1cbn0pO1xuPC9zY3JpcHQ+XG48c3R5bGUgbGFuZz1cImxlc3NcIj5cbi5mcy1zZWFyY2gge1xuICAvL2Rpc3BsYXk6IGZsZXg7XG4gIC8vZmxleC13cmFwOiBub3dyYXA7XG4gIC5zZWFyY2gtbGVmdCB7XG4gIH1cbiAgLnNlYXJjaC1yaWdodCB7XG4gICAgZmxleDogMTtcbiAgfVxuICAuYW50LWZvcm0taW5saW5lIHtcbiAgICBmbGV4LXdyYXA6IHdyYXA7XG4gIH1cbiAgLmZzLXNlYXJjaC1mb3JtIHtcbiAgICBkaXNwbGF5OiBmbGV4O1xuICAgIGFsaWduLWl0ZW1zOiBjZW50ZXI7XG4gICAgZmxleC13cmFwOiB3cmFwO1xuICAgIC8vJiA+ICoge1xuICAgIC8vICBtYXJnaW4tYm90dG9tOiA0cHg7XG4gICAgLy8gIG1hcmdpbi10b3A6IDRweDtcbiAgICAvLyAgbWFyZ2luLXJpZ2h0OiAxMHB4O1xuICAgIC8vfVxuXG4gICAgLmZzLXNlYXJjaC1ib3gge1xuICAgICAgZGlzcGxheTogZmxleDtcbiAgICAgIC5mcy1zZWFyY2gtbWFpbiB7XG4gICAgICAgIGRpc3BsYXk6IGZsZXg7XG4gICAgICAgIGZsZXgtZGlyZWN0aW9uOiByb3c7XG4gICAgICB9XG4gICAgfVxuICAgIC5mcy1zZWFyY2gtY29sIHtcbiAgICAgICYgPiAqIHtcbiAgICAgICAgbWFyZ2luOiAwcHggNXB4O1xuICAgICAgfVxuICAgICAgbWFyZ2luOiAxcHggMDtcbiAgICAgICY6Zmlyc3QtY2hpbGQge1xuICAgICAgICAvLyBtYXJnaW4tbGVmdDogMDtcbiAgICAgIH1cbiAgICB9XG5cbiAgICAuZWwtZm9ybS1pdGVtIHtcbiAgICAgIG1hcmdpbi1ib3R0b206IDRweDtcbiAgICAgIG1hcmdpbi10b3A6IDRweDtcbiAgICAgIGRpc3BsYXk6IGZsZXg7XG4gICAgICBhbGlnbi1pdGVtczogY2VudGVyO1xuICAgIH1cblxuICAgIC5lbC1mb3JtLS1pbmxpbmUge1xuICAgICAgZGlzcGxheTogZmxleDtcbiAgICAgIGFsaWduLWl0ZW1zOiBjZW50ZXI7XG4gICAgfVxuXG4gICAgLmVsLWZvcm0taXRlbV9fY29udGVudCB7XG4gICAgICBkaXNwbGF5OiBmbGV4O1xuICAgICAgYWxpZ24taXRlbXM6IGNlbnRlcjtcbiAgICB9XG4gIH1cblxuICAuZnMtc2VhcmNoLWJ0bnMge1xuICAgIC5mcy1idXR0b24ge1xuICAgICAgbWFyZ2luLXJpZ2h0OiA1cHg7XG4gICAgfVxuICB9XG5cbiAgJi5mcy1zZWFyY2gtbXVsdGktbGluZSB7XG4gICAgLmZzLXNlYXJjaC1ib3gge1xuICAgICAgLmZzLXNlYXJjaC1tYWluIHtcbiAgICAgICAgZmxleC1kaXJlY3Rpb246IGNvbHVtbjtcbiAgICAgICAgLmZzLXNlYXJjaC1jb2x1bW5zIHtcbiAgICAgICAgICBoZWlnaHQ6IGF1dG87XG4gICAgICAgICAgb3ZlcmZsb3cteTogaGlkZGVuO1xuICAgICAgICAgIC8vIHRyYW5zaXRpb246IGFsbCAwLjNzIGxpbmVhcjtcbiAgICAgICAgICAvLyB3aWxsLWNoYW5nZTogaGVpZ2h0O1xuICAgICAgICB9XG4gICAgICAgIC5mcy1zZWFyY2gtYnRucyB7XG4gICAgICAgICAgd2lkdGg6IDEwMCU7XG4gICAgICAgICAgdGV4dC1hbGlnbjogY2VudGVyO1xuICAgICAgICAgIG1hcmdpbi10b3A6IDRweDtcbiAgICAgICAgICAuZWwtZm9ybS1pdGVtX19jb250ZW50IHtcbiAgICAgICAgICAgIGp1c3RpZnktY29udGVudDogY2VudGVyO1xuICAgICAgICAgIH1cblxuICAgICAgICAgIC5uLWZvcm0taXRlbS1ibGFuayB7XG4gICAgICAgICAgICBkaXNwbGF5OiBmbGV4O1xuICAgICAgICAgICAganVzdGlmeS1jb250ZW50OiBjZW50ZXI7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuICAgIC5mcy1zZWFyY2gtYWN0aW9uIHtcbiAgICAgIC5hbnQtZm9ybS1pdGVtIHtcbiAgICAgICAgbWFyZ2luLXJpZ2h0OiAycHg7XG4gICAgICB9XG4gICAgfVxuICB9XG59XG5cbi5mcy1zZWFyY2gge1xuICAubi1mb3JtLWl0ZW0tYmxhbmsge1xuICB9XG59XG48L3N0eWxlPlxuIiwiPHRlbXBsYXRlPlxuICA8Y29tcG9uZW50IDppcz1cInVpLmNvbGxhcHNlVHJhbnNpdGlvbi5uYW1lXCI+XG4gICAgPGRpdiB2LWlmPVwic2hvdyAhPT0gZmFsc2VcIiBjbGFzcz1cImZzLXNlYXJjaFwiIDpjbGFzcz1cInsgJ2ZzLXNlYXJjaC1tdWx0aS1saW5lJzogY29tcHV0ZWRJc011bHRpTGluZSB9XCI+XG4gICAgICA8Y29tcG9uZW50XG4gICAgICAgIDppcz1cInVpLmZvcm0ubmFtZVwiXG4gICAgICAgIHJlZj1cInNlYXJjaEZvcm1SZWZcIlxuICAgICAgICA6bW9kZWw9XCJmb3JtXCJcbiAgICAgICAgdi1iaW5kPVwib3B0aW9uc1wiXG4gICAgICAgIDpydWxlcz1cImNvbXB1dGVkUnVsZXNcIlxuICAgICAgICBjbGFzcz1cImZzLXNlYXJjaC1mb3JtXCJcbiAgICAgICAgQGNvbXBvc2l0aW9uc3RhcnQ9XCJjaGFuZ2VJbnB1dEV2ZW50RGlzYWJsZWQodHJ1ZSlcIlxuICAgICAgICBAY29tcG9zaXRpb25lbmQ9XCJjaGFuZ2VJbnB1dEV2ZW50RGlzYWJsZWQoZmFsc2UpXCJcbiAgICAgID5cbiAgICAgICAgPGRpdiBjbGFzcz1cImZzLXNlYXJjaC1ib3hcIj5cbiAgICAgICAgICA8ZGl2IGNsYXNzPVwiZnMtc2VhcmNoLW1haW5cIj5cbiAgICAgICAgICAgIDxkaXZcbiAgICAgICAgICAgICAgY2xhc3M9XCJmcy1zZWFyY2gtY29sdW1uc1wiXG4gICAgICAgICAgICAgIDpjbGFzcz1cInsgJ2ZzLXNlYXJjaC1jb2xsYXBzZSc6IGNvbGxhcHNlIH1cIlxuICAgICAgICAgICAgICA6c3R5bGU9XCJ7IGhlaWdodDogY29tcHV0ZWRDb2x1bW5Cb3hIZWlnaHQgfVwiXG4gICAgICAgICAgICA+XG4gICAgICAgICAgICAgIDxjb21wb25lbnQgOmlzPVwidWkucm93Lm5hbWVcIiByZWY9XCJjb2x1bW5zUm93UmVmXCI+XG4gICAgICAgICAgICAgICAgPGRpdiB2LWlmPVwic2xvdHNbJ3NlYXJjaC1sZWZ0J11cIiBjbGFzcz1cImZzLXNlYXJjaC1jb2xcIj5cbiAgICAgICAgICAgICAgICAgIDxjb21wb25lbnQgOmlzPVwidWkuZm9ybUl0ZW0ubmFtZVwiPlxuICAgICAgICAgICAgICAgICAgICA8ZnMtc2xvdC1yZW5kZXIgOnNsb3RzPVwic2xvdHNbJ3NlYXJjaC1sZWZ0J11cIiA6c2NvcGU9XCJzZWFyY2hFdmVudENvbnRleHRSZWZcIiAvPlxuICAgICAgICAgICAgICAgICAgPC9jb21wb25lbnQ+XG4gICAgICAgICAgICAgICAgPC9kaXY+XG4gICAgICAgICAgICAgICAgPHRlbXBsYXRlIHYtZm9yPVwiKGl0ZW0sIGtleSkgaW4gY29tcHV0ZWRDb2x1bW5zXCIgOmtleT1cImtleVwiPlxuICAgICAgICAgICAgICAgICAgPGNvbXBvbmVudCA6aXM9XCJjb21wdXRlZENvbE5hbWVcIiB2LWlmPVwiaXRlbS5zaG93ID09PSB0cnVlXCIgY2xhc3M9XCJmcy1zZWFyY2gtY29sXCIgdi1iaW5kPVwiaXRlbS5jb2xcIj5cbiAgICAgICAgICAgICAgICAgICAgPGNvbXBvbmVudCA6aXM9XCJ1aS5mb3JtSXRlbS5uYW1lXCIgdi1iaW5kPVwiaXRlbVwiIDpbdWkuZm9ybUl0ZW0ucHJvcF09XCJrZXlcIiA6bGFiZWw9XCJpdGVtLnRpdGxlXCI+XG4gICAgICAgICAgICAgICAgICAgICAgPHRlbXBsYXRlIHYtaWY9XCJzbG90c1snc2VhcmNoXycgKyBrZXldXCI+XG4gICAgICAgICAgICAgICAgICAgICAgICA8ZnMtc2xvdC1yZW5kZXIgOnNsb3RzPVwic2xvdHNbJ3NlYXJjaF8nICsga2V5XVwiIDpzY29wZT1cInsgLi4uc2VhcmNoRXZlbnRDb250ZXh0UmVmLCBrZXkgfVwiIC8+XG4gICAgICAgICAgICAgICAgICAgICAgPC90ZW1wbGF0ZT5cbiAgICAgICAgICAgICAgICAgICAgICA8dGVtcGxhdGUgdi1lbHNlPlxuICAgICAgICAgICAgICAgICAgICAgICAgPGZzLWNvbXBvbmVudC1yZW5kZXJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgdi1pZj1cIml0ZW0uY29tcG9uZW50ICYmIGl0ZW0uY29tcG9uZW50LnNob3cgIT09IGZhbHNlXCJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgOnJlZj1cIlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIChlbDogYW55KSA9PiB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoZWwpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY29tcG9uZW50UmVuZGVyUmVmc1tpdGVtLmtleV0gPSBlbDtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICAgIFwiXG4gICAgICAgICAgICAgICAgICAgICAgICAgIDptb2RlbC12YWx1ZT1cImdldChmb3JtLCBrZXkpXCJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgdi1iaW5kPVwiaXRlbS5jb21wb25lbnRcIlxuICAgICAgICAgICAgICAgICAgICAgICAgICA6c2NvcGU9XCJzZWFyY2hFdmVudENvbnRleHRSZWZcIlxuICAgICAgICAgICAgICAgICAgICAgICAgICBAdXBkYXRlOm1vZGVsLXZhbHVlPVwib25WYWx1ZUNoYW5nZWQoJGV2ZW50LCBpdGVtKVwiXG4gICAgICAgICAgICAgICAgICAgICAgICAgIEBpbnB1dD1cIm9uSW5wdXQoaXRlbSlcIlxuICAgICAgICAgICAgICAgICAgICAgICAgLz5cbiAgICAgICAgICAgICAgICAgICAgICA8L3RlbXBsYXRlPlxuICAgICAgICAgICAgICAgICAgICA8L2NvbXBvbmVudD5cbiAgICAgICAgICAgICAgICAgIDwvY29tcG9uZW50PlxuICAgICAgICAgICAgICAgIDwvdGVtcGxhdGU+XG5cbiAgICAgICAgICAgICAgICA8ZGl2IHYtaWY9XCJzbG90c1snc2VhcmNoLW1pZGRsZSddXCIgY2xhc3M9XCJmcy1zZWFyY2gtY29sIGZzLXNlYXJjaC1taWRkbGVcIj5cbiAgICAgICAgICAgICAgICAgIDxjb21wb25lbnQgOmlzPVwidWkuZm9ybUl0ZW0ubmFtZVwiPlxuICAgICAgICAgICAgICAgICAgICA8ZnMtc2xvdC1yZW5kZXIgOnNsb3RzPVwic2xvdHNbJ3NlYXJjaC1taWRkbGUnXVwiIDpzY29wZT1cInNlYXJjaEV2ZW50Q29udGV4dFJlZlwiIC8+XG4gICAgICAgICAgICAgICAgICA8L2NvbXBvbmVudD5cbiAgICAgICAgICAgICAgICA8L2Rpdj5cbiAgICAgICAgICAgICAgICA8ZnMtc2VhcmNoLWJ1dHRvbnMgdi1pZj1cIiFjb21wdXRlZElzTXVsdGlMaW5lXCIgOmJ1dHRvbnM9XCJjb21wdXRlZEJ1dHRvbnNcIj48L2ZzLXNlYXJjaC1idXR0b25zPlxuICAgICAgICAgICAgICAgIDxkaXYgdi1pZj1cInNsb3RzWydzZWFyY2gtcmlnaHQnXVwiIGNsYXNzPVwiZnMtc2VhcmNoLWNvbCBmcy1zZWFyY2gtcmlnaHRcIj5cbiAgICAgICAgICAgICAgICAgIDxjb21wb25lbnQgOmlzPVwidWkuZm9ybUl0ZW0ubmFtZVwiPlxuICAgICAgICAgICAgICAgICAgICA8ZnMtc2xvdC1yZW5kZXIgOnNsb3RzPVwic2xvdHNbJ3NlYXJjaC1yaWdodCddXCIgOnNjb3BlPVwic2VhcmNoRXZlbnRDb250ZXh0UmVmXCIgLz5cbiAgICAgICAgICAgICAgICAgIDwvY29tcG9uZW50PlxuICAgICAgICAgICAgICAgIDwvZGl2PlxuICAgICAgICAgICAgICA8L2NvbXBvbmVudD5cbiAgICAgICAgICAgIDwvZGl2PlxuICAgICAgICAgICAgPGZzLXNlYXJjaC1idXR0b25zIHYtaWY9XCJjb21wdXRlZElzTXVsdGlMaW5lXCIgOmJ1dHRvbnM9XCJjb21wdXRlZEJ1dHRvbnNcIj48L2ZzLXNlYXJjaC1idXR0b25zPlxuICAgICAgICAgIDwvZGl2PlxuXG4gICAgICAgICAgPGRpdiB2LWlmPVwiY29tcHV0ZWRJc011bHRpTGluZVwiIGNsYXNzPVwiZnMtc2VhcmNoLWFjdGlvblwiPlxuICAgICAgICAgICAgPGNvbXBvbmVudCA6aXM9XCJ1aS5mb3JtSXRlbS5uYW1lXCI+XG4gICAgICAgICAgICAgIDxmcy1idXR0b24gOmljb249XCJjb2xsYXBzZSA/IHVpLmljb25zLmNhcmV0VXAgOiB1aS5pY29ucy5jYXJldERvd25cIiBAY2xpY2s9XCJ0b2dnbGVDb2xsYXBzZVwiIC8+XG4gICAgICAgICAgICA8L2NvbXBvbmVudD5cbiAgICAgICAgICA8L2Rpdj5cbiAgICAgICAgPC9kaXY+XG4gICAgICA8L2NvbXBvbmVudD5cbiAgICA8L2Rpdj5cbiAgPC9jb21wb25lbnQ+XG48L3RlbXBsYXRlPlxuXG48c2NyaXB0IGxhbmc9XCJ0c1wiPlxuaW1wb3J0IHsgY29tcHV0ZWQsIGRlZmluZUNvbXBvbmVudCwgbmV4dFRpY2ssIG9uTW91bnRlZCwgcmVhY3RpdmUsIHJlZiwgUmVmLCB1bnJlZiB9IGZyb20gXCJ2dWVcIjtcbmltcG9ydCBfIGZyb20gXCJsb2Rhc2gtZXNcIjtcbmltcG9ydCB7IHVzZUNvbXB1dGUgfSBmcm9tIFwiLi4vLi4vdXNlL3VzZS1jb21wdXRlXCI7XG5pbXBvcnQgeyB1c2VJMThuIH0gZnJvbSBcIi4uLy4uL2xvY2FsZVwiO1xuaW1wb3J0IGxvZ2dlciBmcm9tIFwiLi4vLi4vdXRpbHMvdXRpbC5sb2dcIjtcbmltcG9ydCBGc1NlYXJjaEJ1dHRvbnMgZnJvbSBcIi4vYnV0dG9ucy52dWVcIjtcbmltcG9ydCB7IENvbnN0YW50cyB9IGZyb20gXCIuLi8uLi91dGlscy91dGlsLmNvbnN0YW50c1wiO1xuaW1wb3J0IHsgQnV0dG9uc1Byb3BzLCBTZWFyY2hFdmVudENvbnRleHQsIFNlYXJjaEl0ZW1Qcm9wcyB9IGZyb20gXCIuLi8uLi9kXCI7XG5pbXBvcnQgeyB1c2VVaSB9IGZyb20gXCIuLi8uLi91c2UvdXNlLXVpXCI7XG5pbXBvcnQgeyB1c2VNZXJnZSB9IGZyb20gXCIuLi8uLi91c2UvdXNlLW1lcmdlXCI7XG5cbi8qKlxuICog5p+l6K+i5qGG57uE5Lu2XG4gKi9cbmV4cG9ydCBkZWZhdWx0IGRlZmluZUNvbXBvbmVudCh7XG4gIG5hbWU6IFwiRnNTZWFyY2hWMVwiLFxuICBjb21wb25lbnRzOiB7IEZzU2VhcmNoQnV0dG9ucyB9LFxuICBpbmhlcml0QXR0cnM6IGZhbHNlLFxuICBwcm9wczoge1xuICAgIC8qKlxuICAgICAqIOWIneWni+afpeivouadoeS7tlxuICAgICAqIOeCueWHu+mHjee9ru+8jOS8mumHjee9ruaIkOivpeadoeS7tlxuICAgICAqL1xuICAgIGluaXRpYWxGb3JtOiB7XG4gICAgICB0eXBlOiBPYmplY3RcbiAgICB9LFxuICAgIC8qKlxuICAgICAqIOihqOWNleWPguaVsFxuICAgICAqIOaUr+aMgWVsLWZvcm0gfCBhLWZvcm3nmoTlsZ7mgKdcbiAgICAgKi9cbiAgICBvcHRpb25zOiB7XG4gICAgICB0eXBlOiBPYmplY3RcbiAgICB9LFxuICAgIC8qKlxuICAgICAqIOafpeivouWtl+autemFjee9rlxuICAgICAqL1xuICAgIGNvbHVtbnM6IHtcbiAgICAgIHR5cGU6IE9iamVjdFxuICAgIH0sXG4gICAgLyoqXG4gICAgICogdGFic1xuICAgICAqIHsgc2hvdyAsIG9wdGlvbnMsa2V5LCBkZWZhdWx0fVxuICAgICAqL1xuICAgIHRhYnM6IHtcbiAgICAgIHR5cGU6IE9iamVjdFxuICAgIH0sXG4gICAgLyoqXG4gICAgICog5oyJ6ZKu6YWN572uLOWPr+S7peagueaNrm9yZGVy5o6S5bqPXG4gICAgICoge3NlYXJjaDp7Li4uRnNCdXR0b259LHJlc2V0OnsuLi5Gc0J1dHRvbn19XG4gICAgICovXG4gICAgYnV0dG9uczoge1xuICAgICAgdHlwZTogT2JqZWN0XG4gICAgfSxcbiAgICAvKipcbiAgICAgKiDngrnlh7vph43nva7lkI7mmK/lkKbnq4vljbPop6blj5Hmn6Xor6JcbiAgICAgKi9cbiAgICBzZWFyY2hBZnRlclJlc2V0OiB7XG4gICAgICB0eXBlOiBCb29sZWFuLFxuICAgICAgZGVmYXVsdDogdHJ1ZVxuICAgIH0sXG4gICAgLyoqXG4gICAgICog5piv5ZCm5byA5ZCv6Ieq5Yqo5p+l6K+iXG4gICAgICovXG4gICAgYXV0b1NlYXJjaDoge1xuICAgICAgdHlwZTogQm9vbGVhbixcbiAgICAgIGRlZmF1bHQ6IHRydWVcbiAgICB9LFxuICAgIC8qKlxuICAgICAqIOiHquWKqOafpeivou+8jOmYsuaKluiuvue9rlxuICAgICAqIOS8oGZhbHNl5YiZ5YWz6Zet6Ieq5Yqo5p+l6K+iXG4gICAgICovXG4gICAgZGVib3VuY2U6IHtcbiAgICAgIHR5cGU6IFtCb29sZWFuLCBPYmplY3RdLFxuICAgICAgZGVmYXVsdDogdW5kZWZpbmVkXG4gICAgfSxcbiAgICAvKipcbiAgICAgKiDmj5Lmp71cbiAgICAgKi9cbiAgICBzbG90czoge1xuICAgICAgZGVmYXVsdCgpIHtcbiAgICAgICAgcmV0dXJuIHt9O1xuICAgICAgfVxuICAgIH0sXG4gICAgLyoqXG4gICAgICog5piv5ZCm5pi+56S65p+l6K+i5qGGXG4gICAgICovXG4gICAgc2hvdzoge1xuICAgICAgdHlwZTogQm9vbGVhbixcbiAgICAgIGRlZmF1bHQ6IHRydWVcbiAgICB9LFxuICAgIC8qKlxuICAgICAqIOaYr+WQpuWQr+eUqOagoemqjFxuICAgICAqL1xuICAgIHZhbGlkYXRlOiB7XG4gICAgICBkZWZhdWx0OiBmYWxzZVxuICAgIH0sXG4gICAgLyoqXG4gICAgICog5biD5bGALCBzaW5nbGUtbGluZSDljZXooYzvvIwgbXVsdGktbGluZSDlpJrooYzvvIjmlK/mjIHlsZXlvIDmlLbotbfvvIlcbiAgICAgKi9cbiAgICBsYXlvdXQ6IHtcbiAgICAgIHR5cGU6IFN0cmluZyxcbiAgICAgIGRlZmF1bHQ6IFwic2luZ2xlLWxpbmVcIlxuICAgIH0sXG4gICAgLyoqXG4gICAgICog5YiX55qE5a695bqm6K6+572u77yMc3Bhbj14eFxuICAgICAqL1xuICAgIGNvbDoge30sXG5cbiAgICAvKipcbiAgICAgKiDmmK/lkKbmipjlj6BcbiAgICAgKi9cbiAgICBjb2xsYXBzZToge1xuICAgICAgdHlwZTogQm9vbGVhbixcbiAgICAgIGRlZmF1bHQ6IGZhbHNlXG4gICAgfVxuICB9LFxuICBlbWl0czogW1xuICAgIC8qKlxuICAgICAqIOafpeivouS6i+S7tlxuICAgICAqKi9cbiAgICBcInNlYXJjaFwiLFxuICAgIC8qKlxuICAgICAqIOmHjee9ruS6i+S7tlxuICAgICAqKi9cbiAgICBcInJlc2V0XCIsXG4gICAgXCJjb2xsYXBzZVwiLFxuICAgIFwidXBkYXRlOmNvbGxhcHNlXCJcbiAgXSxcbiAgc2V0dXAocHJvcHMsIGN0eCkge1xuICAgIGNvbnN0IHsgdWkgfSA9IHVzZVVpKCk7XG4gICAgLy8g5byC5q2lc2V0dXDpnIDopoHmlL7lnKjnrKzkuIDkuKphd2FpdOS5i+WJjVxuICAgIC8vIG9uTW91bnRlZCBpcyBjYWxsZWQgd2hlbiB0aGVyZSBpcyBubyBhY3RpdmUgY29tcG9uZW50IGluc3RhbmNlIHRvIGJlIGFzc29jaWF0ZWQgd2l0aC5cbiAgICAvL+S4uuWVpeS8muaciei/meS4quitpuWRilxuICAgIG9uTW91bnRlZCgoKSA9PiB7XG4gICAgICBpZiAoY29tcHV0ZWRJc011bHRpTGluZS52YWx1ZSAmJiBjb2x1bW5zUm93UmVmLnZhbHVlKSB7XG4gICAgICAgIGNvbHVtbnNCb3hIZWlnaHRSZWYudmFsdWUgPSBjb2x1bW5zUm93UmVmLnZhbHVlLiRlbC5vZmZzZXRIZWlnaHQ7XG4gICAgICAgIGNvbnN0IGNvbHVtbnNMaXN0ID0gY29sdW1uc1Jvd1JlZi52YWx1ZS4kZWwuY2hpbGRyZW47XG4gICAgICAgIGlmIChjb2x1bW5zTGlzdCAmJiBjb2x1bW5zTGlzdC5sZW5ndGggPiAxKSB7XG4gICAgICAgICAgY29sdW1uc0xpbmVIZWlnaHRSZWYudmFsdWUgPSBjb2x1bW5zTGlzdFsxXS5vZmZzZXRIZWlnaHQgKyAyO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfSk7XG5cbiAgICBsZXQgYXV0b1NlYXJjaDogYW55ID0gbnVsbDtcbiAgICBmdW5jdGlvbiBjcmVhdGVJbml0aWFsRm9ybSgpIHtcbiAgICAgIC8vQHRzLWlnbm9yZVxuICAgICAgcmV0dXJuIF8uY2xvbmVEZWVwKHByb3BzLmluaXRpYWxGb3JtIHx8IHt9KTtcbiAgICB9XG4gICAgY29uc3QgZm9ybSA9IHJlYWN0aXZlKGNyZWF0ZUluaXRpYWxGb3JtKCkpO1xuICAgIGNvbnN0IHsgZG9Db21wdXRlZCwgQXN5bmNDb21wdXRlVmFsdWUgfSA9IHVzZUNvbXB1dGUoKTtcbiAgICAvL0B0cy1pZ25vcmVcbiAgICBfLmVhY2gocHJvcHMuY29sdW1ucywgKGl0ZW0pID0+IHtcbiAgICAgIGlmIChpdGVtLnZhbHVlICE9IG51bGwgJiYgaXRlbS52YWx1ZSBpbnN0YW5jZW9mIEFzeW5jQ29tcHV0ZVZhbHVlKSB7XG4gICAgICAgIGxvZ2dlci53YXJuKFwic2VhcmNoLnZhbHVl6YWN572u5LiN5pSv5oyBQXN5bmNDb21wdXRl57G75Z6L55qE5Yqo5oCB6K6h566XXCIpO1xuICAgICAgfVxuICAgIH0pO1xuICAgIGNvbnN0IHsgbWVyZ2UgfSA9IHVzZU1lcmdlKCk7XG4gICAgY29uc3QgZG9NZXJnZSA9IG1lcmdlO1xuICAgIGNvbnN0IGNvbXB1dGVkQ29sdW1ucyA9IGRvQ29tcHV0ZWQoXG4gICAgICAoKSA9PiB7XG4gICAgICAgIC8vQHRzLWlnbm9yZVxuICAgICAgICByZXR1cm4gcHJvcHMuY29sdW1ucztcbiAgICAgIH0sXG4gICAgICBnZXRDb250ZXh0Rm4sXG4gICAgICBudWxsLFxuICAgICAgKHZhbHVlKSA9PiB7XG4gICAgICAgIC8vQHRzLWlnbm9yZVxuICAgICAgICBpZiAoIXByb3BzLnZhbGlkYXRlKSB7XG4gICAgICAgICAgLy/lpoLmnpzlhbPpl612YWxpZGF0ZeWImeWOu+aOiXJ1bGVzXG4gICAgICAgICAgXy5mb3JFYWNoKHZhbHVlLCAoaXRlbSkgPT4ge1xuICAgICAgICAgICAgZGVsZXRlIGl0ZW0ucnVsZXM7XG4gICAgICAgICAgfSk7XG4gICAgICAgIH1cbiAgICAgICAgLy8g5ZCI5bm2Y29sXG4gICAgICAgIC8vQHRzLWlnbm9yZVxuICAgICAgICBpZiAocHJvcHMuY29sKSB7XG4gICAgICAgICAgXy5mb3JFYWNoKHZhbHVlLCAodikgPT4ge1xuICAgICAgICAgICAgLy9AdHMtaWdub3JlXG4gICAgICAgICAgICB2LmNvbCA9IG1lcmdlKHt9LCBwcm9wcy5jb2wsIHYuY29sKTtcbiAgICAgICAgICB9KTtcbiAgICAgICAgfVxuXG4gICAgICAgIC8v5a2X5q615o6S5bqPXG4gICAgICAgIGxldCBzb3J0QXJyOiBTZWFyY2hJdGVtUHJvcHNbXSA9IFtdO1xuICAgICAgICBfLmZvckVhY2godmFsdWUsICh2LCBrZXkpID0+IHtcbiAgICAgICAgICB2Ll9rZXkgPSBrZXk7XG4gICAgICAgICAgc29ydEFyci5wdXNoKHYpO1xuICAgICAgICB9KTtcbiAgICAgICAgc29ydEFyciA9IF8uc29ydEJ5KHNvcnRBcnIsIChpdGVtKSA9PiB7XG4gICAgICAgICAgcmV0dXJuIGl0ZW0ub3JkZXIgPz8gQ29uc3RhbnRzLm9yZGVyRGVmYXVsdDtcbiAgICAgICAgfSk7XG5cbiAgICAgICAgY29uc3Qgc29ydGVkQ29sdW1uczoge1xuICAgICAgICAgIFtrZXk6IHN0cmluZ106IFNlYXJjaEl0ZW1Qcm9wcztcbiAgICAgICAgfSA9IHt9O1xuXG4gICAgICAgIHNvcnRBcnIuZm9yRWFjaCgoaXRlbSkgPT4ge1xuICAgICAgICAgIGxldCBfa2V5ID0gaXRlbS5fa2V5O1xuICAgICAgICAgIGRlbGV0ZSBpdGVtLl9rZXk7XG4gICAgICAgICAgc29ydGVkQ29sdW1uc1tfa2V5XSA9IGl0ZW07XG4gICAgICAgIH0pO1xuICAgICAgICByZXR1cm4gc29ydGVkQ29sdW1ucztcbiAgICAgIH1cbiAgICApO1xuXG4gICAgLy/pu5jorqTlgLxcbiAgICBfLmZvckVhY2goY29tcHV0ZWRDb2x1bW5zLnZhbHVlLCAoY29sdW1uLCBrZXkpID0+IHtcbiAgICAgIGlmIChjb2x1bW4udmFsdWUgPT09IHVuZGVmaW5lZCkge1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG4gICAgICBjb25zdCBkZWZWYWx1ZSA9IHVucmVmKGNvbHVtbi52YWx1ZSk7XG4gICAgICBpZiAoZGVmVmFsdWUgIT09IHVuZGVmaW5lZCAmJiBjb2x1bW4uc2hvdyAhPT0gZmFsc2UgJiYgY29sdW1uLmNvbXBvbmVudD8uc2hvdyAhPT0gZmFsc2UpIHtcbiAgICAgICAgLy/pu5jorqTlgLxcbiAgICAgICAgZm9ybVtrZXldID0gZGVmVmFsdWU7XG4gICAgICB9XG4gICAgfSk7XG4gICAgY29uc3Qgc2VhcmNoRm9ybVJlZiA9IHJlZigpO1xuICAgIGNvbnN0IHsgdCB9ID0gdXNlSTE4bigpO1xuICAgIGNvbnN0IGNvbXBvbmVudFJlbmRlclJlZnM6IFJlZiA9IHJlZih7fSk7XG4gICAgZnVuY3Rpb24gZ2V0Q29tcG9uZW50UmVuZGVyUmVmKGtleTogc3RyaW5nKSB7XG4gICAgICByZXR1cm4gY29tcG9uZW50UmVuZGVyUmVmcy52YWx1ZVtrZXldO1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIGdldENvbXBvbmVudFJlZihrZXk6IHN0cmluZyk6IGFueSB7XG4gICAgICByZXR1cm4gZ2V0Q29tcG9uZW50UmVuZGVyUmVmKGtleSk/LiRyZWZzPy50YXJnZXRSZWY7XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gZ2V0Q29udGV4dEZuKCk6IFNlYXJjaEV2ZW50Q29udGV4dCB7XG4gICAgICByZXR1cm4geyBmb3JtLCB2YWxpZGF0ZWRGb3JtOiBmb3JtLCBnZXRDb21wb25lbnRSZWYsIGRvVmFsaWRhdGU6IG51bGwgfTtcbiAgICB9XG5cbiAgICBjb25zdCBzZWFyY2hFdmVudENvbnRleHRSZWY6IFJlZjxTZWFyY2hFdmVudENvbnRleHQ+ID0gcmVmKGdldENvbnRleHRGbigpKTtcblxuICAgIGFzeW5jIGZ1bmN0aW9uIGRvU2VhcmNoKCkge1xuICAgICAgaWYgKGF1dG9TZWFyY2gpIHtcbiAgICAgICAgLy8g6Ziy5oqW5p+l6K+i5Y+W5raIXG4gICAgICAgIGF1dG9TZWFyY2guY2FuY2VsKCk7XG4gICAgICB9XG5cbiAgICAgIGNvbnN0IHZhbGlkID0gYXdhaXQgdWkuZm9ybS52YWxpZGF0ZVdyYXAoc2VhcmNoRm9ybVJlZi52YWx1ZSk7XG4gICAgICBpZiAodmFsaWQpIHtcbiAgICAgICAgY3R4LmVtaXQoXCJzZWFyY2hcIiwgc2VhcmNoRXZlbnRDb250ZXh0UmVmLnZhbHVlKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHVpLm1lc3NhZ2UuZXJyb3Ioe1xuICAgICAgICAgIG1lc3NhZ2U6IHQoXCJmcy5zZWFyY2guZXJyb3IubWVzc2FnZVwiKVxuICAgICAgICB9KTtcbiAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgfVxuICAgIH1cblxuICAgIGZ1bmN0aW9uIGRvUmVzZXQoKSB7XG4gICAgICAvLyBkZWJ1Z2dlcjtcbiAgICAgIC8vIHVpLmZvcm0ucmVzZXRXcmFwKHNlYXJjaEZvcm1SZWYudmFsdWUsIHsgZm9ybSwgaW5pdGlhbEZvcm06IGNyZWF0ZUluaXRpYWxGb3JtKCkgfSk7XG4gICAgICBjb25zdCBpbml0aWFsRm9ybSA9IGNyZWF0ZUluaXRpYWxGb3JtKCk7XG4gICAgICBjb25zdCBlbnRyaWVzID0gXy5lbnRyaWVzKGZvcm0pO1xuICAgICAgZm9yIChjb25zdCBlbnRyeSBvZiBlbnRyaWVzKSB7XG4gICAgICAgIGNvbnN0IGluaXRpYWxWYWx1ZSA9IF8uZ2V0KGluaXRpYWxGb3JtLCBlbnRyeVswXSk7XG4gICAgICAgIGlmIChpbml0aWFsVmFsdWUgPT0gbnVsbCkge1xuICAgICAgICAgIF8udW5zZXQoZm9ybSwgZW50cnlbMF0pO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIF8uc2V0KGZvcm0sIGVudHJ5WzBdLCBpbml0aWFsVmFsdWUpO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgICAvL0B0cy1pZ25vcmVcbiAgICAgIGlmIChwcm9wcy5yZXNldCkge1xuICAgICAgICAvL0B0cy1pZ25vcmVcbiAgICAgICAgcHJvcHMucmVzZXQoc2VhcmNoRXZlbnRDb250ZXh0UmVmLnZhbHVlKTtcbiAgICAgIH1cbiAgICAgIC8vIOihqOWNlemHjee9ruS6i+S7tlxuICAgICAgY3R4LmVtaXQoXCJyZXNldFwiLCBnZXRDb250ZXh0Rm4oKSk7XG4gICAgICAvL0B0cy1pZ25vcmVcbiAgICAgIGlmIChwcm9wcy5zZWFyY2hBZnRlclJlc2V0KSB7XG4gICAgICAgIG5leHRUaWNrKCgpID0+IHtcbiAgICAgICAgICBkb1NlYXJjaCgpO1xuICAgICAgICB9KTtcbiAgICAgIH1cbiAgICB9XG4gICAgY29uc3QgY29tcHV0ZWRCdXR0b25zID0gY29tcHV0ZWQoKCkgPT4ge1xuICAgICAgY29uc3QgYnRuczogYW55ID0gW107XG4gICAgICBjb25zdCBkZWZCdG5PcHRpb25zOiBCdXR0b25zUHJvcHM8U2VhcmNoRXZlbnRDb250ZXh0PiA9IHtcbiAgICAgICAgc2VhcmNoOiB7XG4gICAgICAgICAgc2hvdzogdHJ1ZSxcbiAgICAgICAgICB0eXBlOiBcInByaW1hcnlcIixcbiAgICAgICAgICBkaXNhYmxlZDogZmFsc2UsXG4gICAgICAgICAgY2xpY2s6IChjb250ZXh0OiBTZWFyY2hFdmVudENvbnRleHQpID0+IHtcbiAgICAgICAgICAgIGRvU2VhcmNoKCk7XG4gICAgICAgICAgfSxcbiAgICAgICAgICBvcmRlcjogMSxcbiAgICAgICAgICB0ZXh0OiB0KFwiZnMuc2VhcmNoLnNlYXJjaC50ZXh0XCIpIC8vICfmn6Xor6InLFxuICAgICAgICB9LFxuICAgICAgICByZXNldDoge1xuICAgICAgICAgIHNob3c6IHRydWUsXG4gICAgICAgICAgZGlzYWJsZWQ6IGZhbHNlLFxuICAgICAgICAgIGNsaWNrOiAoY29udGV4dDogU2VhcmNoRXZlbnRDb250ZXh0KSA9PiB7XG4gICAgICAgICAgICBkb1Jlc2V0KCk7XG4gICAgICAgICAgfSxcbiAgICAgICAgICB0ZXh0OiB0KFwiZnMuc2VhcmNoLnJlc2V0LnRleHRcIiksIC8vICfph43nva4nLFxuICAgICAgICAgIG9yZGVyOiAyXG4gICAgICAgIH1cbiAgICAgIH07XG4gICAgICAvL0B0cy1pZ25vcmVcbiAgICAgIG1lcmdlKGRlZkJ0bk9wdGlvbnMsIHByb3BzLmJ1dHRvbnMpO1xuICAgICAgZm9yIChsZXQga2V5IGluIGRlZkJ0bk9wdGlvbnMpIHtcbiAgICAgICAgY29uc3QgYnRuID0gZGVmQnRuT3B0aW9uc1trZXldO1xuICAgICAgICBidG4uX2NsaWNrID0gKCkgPT4ge1xuICAgICAgICAgIGJ0bi5jbGljayhnZXRDb250ZXh0Rm4oKSk7XG4gICAgICAgIH07XG4gICAgICAgIGJ0bnMucHVzaChidG4pO1xuICAgICAgfVxuXG4gICAgICBidG5zLnNvcnQoKGE6IGFueSwgYjogYW55KSA9PiB7XG4gICAgICAgIHJldHVybiBhLm9yZGVyIC0gYi5vcmRlcjtcbiAgICAgIH0pO1xuICAgICAgcmV0dXJuIGJ0bnM7XG4gICAgfSk7XG5cbiAgICBmdW5jdGlvbiBpbml0QXV0b1NlYXJjaCgpIHtcbiAgICAgIC8vQHRzLWlnbm9yZVxuICAgICAgaWYgKHByb3BzLmF1dG9TZWFyY2ggPT09IGZhbHNlKSB7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cbiAgICAgIC8vIOaehOW7uumYsuaKluafpeivouWHveaVsFxuICAgICAgLy9AdHMtaWdub3JlXG4gICAgICBpZiAocHJvcHMuZGVib3VuY2UgIT09IGZhbHNlKSB7XG4gICAgICAgIC8vQHRzLWlnbm9yZVxuICAgICAgICBsZXQgd2FpdCA9IHByb3BzLmRlYm91bmNlPy53YWl0IHx8IDUwMDtcbiAgICAgICAgLy9AdHMtaWdub3JlXG4gICAgICAgIGF1dG9TZWFyY2ggPSBfLmRlYm91bmNlKGRvU2VhcmNoLCB3YWl0LCBwcm9wcy5kZWJvdW5jZSk7XG4gICAgICB9XG4gICAgfVxuXG4gICAgaW5pdEF1dG9TZWFyY2goKTtcblxuICAgIGZ1bmN0aW9uIGdldEZvcm0oKSB7XG4gICAgICByZXR1cm4gZm9ybTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiDorr7nva5mb3Jt5YC8XG4gICAgICovXG4gICAgZnVuY3Rpb24gc2V0Rm9ybShuZXdGb3JtOiBhbnksIG1lcmdlID0gdHJ1ZSkge1xuICAgICAgaWYgKCFtZXJnZSkge1xuICAgICAgICBfLmVhY2goXy5rZXlzKGZvcm0pLCAoaXRlbSkgPT4ge1xuICAgICAgICAgIGRlbGV0ZSBmb3JtW2l0ZW1dO1xuICAgICAgICB9KTtcbiAgICAgIH1cbiAgICAgIGRvTWVyZ2UoZm9ybSwgbmV3Rm9ybSk7XG4gICAgfVxuXG4gICAgY29uc3QgaW5wdXRFdmVudERpc2FibGVkID0gcmVmKGZhbHNlKTtcblxuICAgIGNvbnN0IGRvQXV0b1NlYXJjaCA9ICgpID0+IHtcbiAgICAgIGxvZ2dlci5kZWJ1ZyhcImRvIGF1dG8gc2VhcmNoLGlucHV0RXZlbnREaXNhYmxlZDpcIiwgaW5wdXRFdmVudERpc2FibGVkLnZhbHVlKTtcbiAgICAgIGlmIChpbnB1dEV2ZW50RGlzYWJsZWQudmFsdWUgIT09IHRydWUgJiYgYXV0b1NlYXJjaCkge1xuICAgICAgICAvLyDpmLLmipbmn6Xor6JcbiAgICAgICAgYXV0b1NlYXJjaCgpO1xuICAgICAgfVxuICAgIH07XG5cbiAgICBjb25zdCBvbklucHV0ID0gKGl0ZW06IGFueSkgPT4ge1xuICAgICAgaWYgKGl0ZW0uYXV0b1NlYXJjaFRyaWdnZXIgPT09IFwiaW5wdXRcIikge1xuICAgICAgICBkb0F1dG9TZWFyY2goKTtcbiAgICAgIH1cbiAgICB9O1xuICAgIC8vIOi+k+WFpeazleebkeWQrFxuICAgIGNvbnN0IGNoYW5nZUlucHV0RXZlbnREaXNhYmxlZCA9IChkaXNhYmxlZDogYm9vbGVhbikgPT4ge1xuICAgICAgaW5wdXRFdmVudERpc2FibGVkLnZhbHVlID0gZGlzYWJsZWQ7XG4gICAgICBkb0F1dG9TZWFyY2goKTtcbiAgICB9O1xuXG4gICAgZnVuY3Rpb24gb25WYWx1ZUNoYW5nZWQodmFsdWU6IGFueSwgaXRlbTogU2VhcmNoSXRlbVByb3BzKSB7XG4gICAgICBjb25zdCBrZXkgPSBpdGVtLmtleTtcbiAgICAgIF8uc2V0KGZvcm0sIGtleSwgdmFsdWUpO1xuICAgICAgaWYgKGl0ZW0udmFsdWVDaGFuZ2UpIHtcbiAgICAgICAgY29uc3Qga2V5ID0gaXRlbS5rZXk7XG4gICAgICAgIGNvbnN0IHZhbHVlID0gZm9ybVtrZXldO1xuICAgICAgICBjb25zdCBjb21wb25lbnRSZWYgPSBnZXRDb21wb25lbnRSZWYoa2V5KTtcbiAgICAgICAgY29uc3QgdmFsdWVDaGFuZ2UgPSBpdGVtLnZhbHVlQ2hhbmdlIGluc3RhbmNlb2YgRnVuY3Rpb24gPyBpdGVtLnZhbHVlQ2hhbmdlIDogaXRlbS52YWx1ZUNoYW5nZS5oYW5kbGU7XG4gICAgICAgIC8vQHRzLWlnbm9yZVxuICAgICAgICB2YWx1ZUNoYW5nZSh7IGtleSwgdmFsdWUsIGNvbXBvbmVudFJlZiwgLi4uZ2V0Q29udGV4dEZuKCksIGltbWlkaWF0ZTogZmFsc2UgfSk7XG4gICAgICB9XG4gICAgICBpZiAoaXRlbS5hdXRvU2VhcmNoVHJpZ2dlciA9PSBudWxsIHx8IGl0ZW0uYXV0b1NlYXJjaFRyaWdnZXIgPT09IHRydWUgfHwgaXRlbS5hdXRvU2VhcmNoVHJpZ2dlciA9PT0gXCJjaGFuZ2VcIikge1xuICAgICAgICBkb0F1dG9TZWFyY2goKTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICBjb25zdCBjb21wdXRlZFJ1bGVzID0gY29tcHV0ZWQoKCkgPT4ge1xuICAgICAgLy9AdHMtaWdub3JlXG4gICAgICBpZiAoIXByb3BzLnZhbGlkYXRlKSB7XG4gICAgICAgIHJldHVybiBbXTtcbiAgICAgIH1cbiAgICAgIC8vQHRzLWlnbm9yZVxuICAgICAgcmV0dXJuIHByb3BzLm9wdGlvbnMucnVsZXM7XG4gICAgfSk7XG5cbiAgICAvLy0tLS0t5aSa6KGM5qih5byP5oqY5Y+gXG5cbiAgICBjb25zdCBjb2x1bW5zUm93UmVmID0gcmVmKCk7XG4gICAgY29uc3QgY29sdW1uc0JveEhlaWdodFJlZiA9IHJlZigwKTtcbiAgICBjb25zdCBjb2x1bW5zTGluZUhlaWdodFJlZiA9IHJlZigwKTtcblxuICAgIGNvbnN0IHRvZ2dsZUNvbGxhcHNlID0gKCkgPT4ge1xuICAgICAgLy9AdHMtaWdub3JlXG4gICAgICBjdHguZW1pdChcInVwZGF0ZTpjb2xsYXBzZVwiLCAhcHJvcHMuY29sbGFwc2UpO1xuICAgICAgLy9AdHMtaWdub3JlXG4gICAgICBjdHguZW1pdChcImNvbGxhcHNlXCIsICFwcm9wcy5jb2xsYXBzZSk7XG4gICAgfTtcblxuICAgIGNvbnN0IGNvbXB1dGVkQ29sTmFtZSA9IGNvbXB1dGVkKCgpID0+IHtcbiAgICAgIC8vQHRzLWlnbm9yZVxuICAgICAgaWYgKHByb3BzLmxheW91dCA9PT0gXCJtdWx0aS1saW5lXCIpIHtcbiAgICAgICAgcmV0dXJuIHVpLmNvbC5uYW1lO1xuICAgICAgfVxuICAgICAgcmV0dXJuIFwiZGl2XCI7XG4gICAgfSk7XG4gICAgY29uc3QgY29tcHV0ZWRJc011bHRpTGluZSA9IGNvbXB1dGVkKCgpID0+IHtcbiAgICAgIC8vQHRzLWlnbm9yZVxuICAgICAgcmV0dXJuIHByb3BzLmxheW91dCA9PT0gXCJtdWx0aS1saW5lXCI7XG4gICAgICAvL+S4jeimgei/meS4qu+8jOS8muatu+W+queOr++8jCAmJiBjb2x1bW5zQm94SGVpZ2h0UmVmLnZhbHVlID4gY29sdW1uc0xpbmVIZWlnaHRSZWYudmFsdWU7XG4gICAgfSk7XG5cbiAgICBjb25zdCBjb21wdXRlZENvbHVtbkJveEhlaWdodCA9IGNvbXB1dGVkKCgpID0+IHtcbiAgICAgIGlmICghY29tcHV0ZWRJc011bHRpTGluZS52YWx1ZSkge1xuICAgICAgICByZXR1cm4gXCJhdXRvXCI7XG4gICAgICB9XG4gICAgICAvL0B0cy1pZ25vcmVcbiAgICAgIGlmIChwcm9wcy5jb2xsYXBzZSkge1xuICAgICAgICByZXR1cm4gY29sdW1uc0xpbmVIZWlnaHRSZWYudmFsdWUgPyBjb2x1bW5zTGluZUhlaWdodFJlZi52YWx1ZSArIFwicHhcIiA6IFwiXCI7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICByZXR1cm4gY29sdW1uc0JveEhlaWdodFJlZi52YWx1ZSA/IGNvbHVtbnNCb3hIZWlnaHRSZWYudmFsdWUgKyBcInB4XCIgOiBcIlwiO1xuICAgICAgfVxuICAgIH0pO1xuXG4gICAgcmV0dXJuIHtcbiAgICAgIGdldDogKGZvcm06IGFueSwga2V5OiBhbnkpID0+IHtcbiAgICAgICAgcmV0dXJuIF8uZ2V0KGZvcm0sIGtleSk7XG4gICAgICB9LFxuICAgICAgdWksXG4gICAgICBvblZhbHVlQ2hhbmdlZCxcbiAgICAgIGRvU2VhcmNoLFxuICAgICAgZG9SZXNldCxcbiAgICAgIGZvcm0sXG4gICAgICBjb21wb25lbnRSZW5kZXJSZWZzLFxuICAgICAgZ2V0Q29tcG9uZW50UmVuZGVyUmVmLFxuICAgICAgZ2V0Q29tcG9uZW50UmVmLFxuICAgICAgZ2V0Rm9ybSxcbiAgICAgIHNldEZvcm0sXG4gICAgICBzZWFyY2hGb3JtUmVmLFxuICAgICAgb25JbnB1dCxcbiAgICAgIGlucHV0RXZlbnREaXNhYmxlZCxcbiAgICAgIGNoYW5nZUlucHV0RXZlbnREaXNhYmxlZCxcbiAgICAgIGNvbXB1dGVkQ29sdW1ucyxcbiAgICAgIGNvbXB1dGVkQnV0dG9ucyxcbiAgICAgIGNvbXB1dGVkUnVsZXMsXG4gICAgICBjb2x1bW5zUm93UmVmLFxuICAgICAgY29tcHV0ZWRDb2x1bW5Cb3hIZWlnaHQsXG4gICAgICBjb21wdXRlZENvbE5hbWUsXG4gICAgICBjb21wdXRlZElzTXVsdGlMaW5lLFxuICAgICAgdG9nZ2xlQ29sbGFwc2UsXG4gICAgICBzZWFyY2hFdmVudENvbnRleHRSZWZcbiAgICB9O1xuICB9XG59KTtcbjwvc2NyaXB0PlxuPHN0eWxlIGxhbmc9XCJsZXNzXCI+XG4uZnMtc2VhcmNoIHtcbiAgLy9kaXNwbGF5OiBmbGV4O1xuICAvL2ZsZXgtd3JhcDogbm93cmFwO1xuICAuc2VhcmNoLWxlZnQge1xuICB9XG4gIC5zZWFyY2gtcmlnaHQge1xuICAgIGZsZXg6IDE7XG4gIH1cbiAgLmFudC1mb3JtLWlubGluZSB7XG4gICAgZmxleC13cmFwOiB3cmFwO1xuICB9XG4gIC5mcy1zZWFyY2gtZm9ybSB7XG4gICAgZGlzcGxheTogZmxleDtcbiAgICBhbGlnbi1pdGVtczogY2VudGVyO1xuICAgIGZsZXgtd3JhcDogd3JhcDtcbiAgICAvLyYgPiAqIHtcbiAgICAvLyAgbWFyZ2luLWJvdHRvbTogNHB4O1xuICAgIC8vICBtYXJnaW4tdG9wOiA0cHg7XG4gICAgLy8gIG1hcmdpbi1yaWdodDogMTBweDtcbiAgICAvL31cblxuICAgIC5mcy1zZWFyY2gtYm94IHtcbiAgICAgIGRpc3BsYXk6IGZsZXg7XG4gICAgICAuZnMtc2VhcmNoLW1haW4ge1xuICAgICAgICBkaXNwbGF5OiBmbGV4O1xuICAgICAgICBmbGV4LWRpcmVjdGlvbjogcm93O1xuICAgICAgfVxuICAgIH1cbiAgICAuZnMtc2VhcmNoLWNvbCB7XG4gICAgICAmID4gKiB7XG4gICAgICAgIG1hcmdpbjogMHB4IDVweDtcbiAgICAgIH1cbiAgICAgIG1hcmdpbjogMXB4IDA7XG4gICAgICAmOmZpcnN0LWNoaWxkIHtcbiAgICAgICAgLy8gbWFyZ2luLWxlZnQ6IDA7XG4gICAgICB9XG4gICAgfVxuXG4gICAgLmVsLWZvcm0taXRlbSB7XG4gICAgICBtYXJnaW4tYm90dG9tOiA0cHg7XG4gICAgICBtYXJnaW4tdG9wOiA0cHg7XG4gICAgICBkaXNwbGF5OiBmbGV4O1xuICAgICAgYWxpZ24taXRlbXM6IGNlbnRlcjtcbiAgICB9XG5cbiAgICAuZWwtZm9ybS0taW5saW5lIHtcbiAgICAgIGRpc3BsYXk6IGZsZXg7XG4gICAgICBhbGlnbi1pdGVtczogY2VudGVyO1xuICAgIH1cblxuICAgIC5lbC1mb3JtLWl0ZW1fX2NvbnRlbnQge1xuICAgICAgZGlzcGxheTogZmxleDtcbiAgICAgIGFsaWduLWl0ZW1zOiBjZW50ZXI7XG4gICAgfVxuICB9XG5cbiAgLmZzLXNlYXJjaC1idG5zIHtcbiAgICAuZnMtYnV0dG9uIHtcbiAgICAgIG1hcmdpbi1yaWdodDogNXB4O1xuICAgIH1cbiAgfVxuXG4gICYuZnMtc2VhcmNoLW11bHRpLWxpbmUge1xuICAgIC5mcy1zZWFyY2gtYm94IHtcbiAgICAgIC5mcy1zZWFyY2gtbWFpbiB7XG4gICAgICAgIGZsZXgtZGlyZWN0aW9uOiBjb2x1bW47XG4gICAgICAgIC5mcy1zZWFyY2gtY29sdW1ucyB7XG4gICAgICAgICAgaGVpZ2h0OiBhdXRvO1xuICAgICAgICAgIG92ZXJmbG93LXk6IGhpZGRlbjtcbiAgICAgICAgICAvLyB0cmFuc2l0aW9uOiBhbGwgMC4zcyBsaW5lYXI7XG4gICAgICAgICAgLy8gd2lsbC1jaGFuZ2U6IGhlaWdodDtcbiAgICAgICAgfVxuICAgICAgICAuZnMtc2VhcmNoLWJ0bnMge1xuICAgICAgICAgIHdpZHRoOiAxMDAlO1xuICAgICAgICAgIHRleHQtYWxpZ246IGNlbnRlcjtcbiAgICAgICAgICBtYXJnaW4tdG9wOiA0cHg7XG4gICAgICAgICAgLmVsLWZvcm0taXRlbV9fY29udGVudCB7XG4gICAgICAgICAgICBqdXN0aWZ5LWNvbnRlbnQ6IGNlbnRlcjtcbiAgICAgICAgICB9XG5cbiAgICAgICAgICAubi1mb3JtLWl0ZW0tYmxhbmsge1xuICAgICAgICAgICAgZGlzcGxheTogZmxleDtcbiAgICAgICAgICAgIGp1c3RpZnktY29udGVudDogY2VudGVyO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cbiAgICAuZnMtc2VhcmNoLWFjdGlvbiB7XG4gICAgICAuYW50LWZvcm0taXRlbSB7XG4gICAgICAgIG1hcmdpbi1yaWdodDogMnB4O1xuICAgICAgfVxuICAgIH1cbiAgfVxufVxuXG4uZnMtc2VhcmNoIHtcbiAgLm4tZm9ybS1pdGVtLWJsYW5rIHtcbiAgfVxufVxuPC9zdHlsZT5cbiIsIjx0ZW1wbGF0ZT5cbiAgPGRpdiBjbGFzcz1cImZzLXNlYXJjaC1sYXlvdXQtZGVmYXVsdFwiIDpjbGFzcz1cInsgJ2ZzLXNlYXJjaC1tdWx0aS1saW5lJzogY29tcHV0ZWRJc011bHRpTGluZSB9XCI+XG4gICAgPGRpdiBjbGFzcz1cImZzLXNlYXJjaC1ib3hcIj5cbiAgICAgIDxkaXZcbiAgICAgICAgY2xhc3M9XCJmcy1zZWFyY2gtbWFpblwiXG4gICAgICAgIDpjbGFzcz1cInsgJ2ZzLXNlYXJjaC1jb2xsYXBzZSc6IGNvbGxhcHNlIH1cIlxuICAgICAgICA6c3R5bGU9XCJ7IG1heEhlaWdodDogY29tcHV0ZWRDb2x1bW5Cb3hIZWlnaHQgfVwiXG4gICAgICA+XG4gICAgICAgIDxjb21wb25lbnQgOmlzPVwidWkucm93Lm5hbWVcIiByZWY9XCJjb2x1bW5zUm93UmVmXCIgY2xhc3M9XCJmcy1zZWFyY2gtY29sdW1uc1wiPlxuICAgICAgICAgIDxzcGFuIGNsYXNzPVwiZnMtc2VhcmNoLWNvbCBmcy1zZWFyY2gtc2xvdFwiPlxuICAgICAgICAgICAgPHNsb3QgbmFtZT1cInNlYXJjaC1sZWZ0XCI+PC9zbG90PlxuICAgICAgICAgIDwvc3Bhbj5cbiAgICAgICAgICA8IS0tIOafpeivouWtl+autXJlbmRlcu+8jOmcgOimgeWumuS5iXByb3BzLmNvbHVtbnMgLS0+XG4gICAgICAgICAgPHRlbXBsYXRlIHYtZm9yPVwiKGl0ZW0sIGtleSkgb2YgY29sdW1uc1wiIDprZXk9XCJrZXlcIj5cbiAgICAgICAgICAgIDxjb21wb25lbnQgOmlzPVwidWkuY29sLm5hbWVcIiB2LWlmPVwiaXRlbS5zaG93XCIgY2xhc3M9XCJmcy1zZWFyY2gtY29sXCIgdi1iaW5kPVwibWVyZ2VDb2woaXRlbS5jb2wpXCI+XG4gICAgICAgICAgICAgIDxmcy1yZW5kZXIgOnJlbmRlci1mdW5jPVwiaXRlbS5fY2VsbFJlbmRlclwiIDpzY29wZT1cImdldENvbnRleHRGbigpXCIgLz5cbiAgICAgICAgICAgIDwvY29tcG9uZW50PlxuICAgICAgICAgIDwvdGVtcGxhdGU+XG4gICAgICAgICAgPHNwYW4gY2xhc3M9XCJmcy1zZWFyY2gtY29sIGZzLXNlYXJjaC1zbG90XCI+XG4gICAgICAgICAgICA8c2xvdCBuYW1lPVwic2VhcmNoLW1pZGRsZVwiPjwvc2xvdD5cbiAgICAgICAgICA8L3NwYW4+XG4gICAgICAgICAgPGNvbXBvbmVudFxuICAgICAgICAgICAgOmlzPVwidWkuY29sLm5hbWVcIlxuICAgICAgICAgICAgdi1pZj1cIiFjb21wdXRlZElzTXVsdGlMaW5lXCJcbiAgICAgICAgICAgIGNsYXNzPVwiZnMtc2VhcmNoLWNvbCBmcy1zZWFyY2gtYnV0dG9ucy1ncm91cFwiXG4gICAgICAgICAgICB2LWJpbmQ9XCJtZXJnZUNvbChhY3Rpb24/LmNvbClcIlxuICAgICAgICAgID5cbiAgICAgICAgICAgIDxjb21wb25lbnQgOmlzPVwidWkuZm9ybUl0ZW0ubmFtZVwiIDpbdWkuZm9ybUl0ZW0ubGFiZWxdPVwiYWN0aW9uPy5sYWJlbFwiPlxuICAgICAgICAgICAgICA8IS0tIOafpeivouaMiemSruaPkuanvS0tPlxuICAgICAgICAgICAgICA8c2xvdCBuYW1lPVwic2VhcmNoLWJ1dHRvbnNcIiB2LWJpbmQ9XCJnZXRDb250ZXh0Rm4oKVwiPjwvc2xvdD5cbiAgICAgICAgICAgIDwvY29tcG9uZW50PlxuICAgICAgICAgIDwvY29tcG9uZW50PlxuICAgICAgICAgIDxzcGFuIGNsYXNzPVwiZnMtc2VhcmNoLWNvbCBmcy1zZWFyY2gtc2xvdFwiPlxuICAgICAgICAgICAgPHNsb3QgbmFtZT1cInNlYXJjaC1yaWdodFwiIHYtYmluZD1cImdldENvbnRleHRGbigpXCI+PC9zbG90PlxuICAgICAgICAgIDwvc3Bhbj5cbiAgICAgICAgPC9jb21wb25lbnQ+XG4gICAgICA8L2Rpdj5cbiAgICAgIDxkaXYgdi1pZj1cImNvbXB1dGVkSXNNdWx0aUxpbmVcIiBjbGFzcz1cImZzLXNlYXJjaC1idXR0b25zLWdyb3VwIGZzLXNlYXJjaC1tdWx0aS1saW5lLWJ1dHRvbnNcIj5cbiAgICAgICAgPCEtLSDlpJrooYzmqKHlvI/ml7bnmoTmn6Xor6LmjInpkq4tLT5cbiAgICAgICAgPHNsb3QgbmFtZT1cInNlYXJjaC1idXR0b25zXCI+PC9zbG90PlxuICAgICAgICA8ZnMtYnV0dG9uXG4gICAgICAgICAgdi1pZj1cImNvbGxhcHNlQnV0dG9uPy5zaG93ICE9PSBmYWxzZVwiXG4gICAgICAgICAgOmljb249XCJjb2xsYXBzZSA/IHVpLmljb25zLmNhcmV0VXAgOiB1aS5pY29ucy5jYXJldERvd25cIlxuICAgICAgICAgIDp0ZXh0PVwiXG4gICAgICAgICAgICBjb2xsYXBzZVxuICAgICAgICAgICAgICA/IHQoJ2ZzLnNlYXJjaC5jb250YWluZXIuY29sbGFwc2VCdXR0b24udGV4dC5leHBhbmQnKVxuICAgICAgICAgICAgICA6IHQoJ2ZzLnNlYXJjaC5jb250YWluZXIuY29sbGFwc2VCdXR0b24udGV4dC5jb2xsYXBzZScpXG4gICAgICAgICAgXCJcbiAgICAgICAgICB2LWJpbmQ9XCJjb2xsYXBzZUJ1dHRvblwiXG4gICAgICAgICAgQGNsaWNrPVwidG9nZ2xlQ29sbGFwc2VcIlxuICAgICAgICAvPlxuICAgICAgPC9kaXY+XG4gICAgPC9kaXY+XG4gIDwvZGl2PlxuPC90ZW1wbGF0ZT5cbjxzY3JpcHQgbGFuZz1cInRzXCI+XG5pbXBvcnQgeyB1c2VVaSB9IGZyb20gXCIuLi8uLi91c2VcIjtcbmltcG9ydCB7IGNvbXB1dGVkLCBkZWZpbmVDb21wb25lbnQsIG9uTW91bnRlZCwgcmVmIH0gZnJvbSBcInZ1ZVwiO1xuaW1wb3J0IF8gZnJvbSBcImxvZGFzaC1lc1wiO1xuaW1wb3J0IHsgdXNlSTE4biB9IGZyb20gXCIuLi8uLi9sb2NhbGVcIjtcblxuZXhwb3J0IGRlZmF1bHQgZGVmaW5lQ29tcG9uZW50KHtcbiAgbmFtZTogXCJGc1NlYXJjaExheW91dERlZmF1bHRcIixcbiAgcHJvcHM6IHtcbiAgICAvKipcbiAgICAgKiDmmK/lkKbmlLbnvKlcbiAgICAgKi9cbiAgICBjb2xsYXBzZToge1xuICAgICAgdHlwZTogQm9vbGVhbixcbiAgICAgIGRlZmF1bHQ6IHRydWVcbiAgICB9LFxuICAgIC8qKlxuICAgICAqIOWxleW8gOaMiemSrlxuICAgICAqL1xuICAgIGNvbGxhcHNlQnV0dG9uOiB7XG4gICAgICB0eXBlOiBPYmplY3RcbiAgICB9LFxuXG4gICAgYWN0aW9uOiB7XG4gICAgICB0eXBlOiBPYmplY3RcbiAgICB9LFxuICAgIC8qKlxuICAgICAqIOW4g+WxgOaooeW8j1xuICAgICAqL1xuICAgIGxheW91dDoge1xuICAgICAgdHlwZTogU3RyaW5nLFxuICAgICAgZGVmYXVsdDogXCJzaW5nbGUtbGluZVwiXG4gICAgfSxcbiAgICAvKipcbiAgICAgKiDmn6Xor6LlrZfmrrXliJfooajvvIzlj6/ku6Xnsr7nu4bljJboh6rlrprkuYnmn6Xor6LlrZfmrrXluIPlsYBcbiAgICAgKi9cbiAgICBjb2x1bW5zOiB7XG4gICAgICB0eXBlOiBPYmplY3RcbiAgICB9LFxuICAgIC8qKlxuICAgICAqIOm7mOiupOeahGNvbOmFjee9rlxuICAgICAqL1xuICAgIGNvbDoge1xuICAgICAgdHlwZTogT2JqZWN0XG4gICAgfSxcblxuICAgIC8qKlxuICAgICAqIOiOt+WPluafpeivouS4iuS4i+aWh1xuICAgICAqL1xuICAgIGdldENvbnRleHRGbjoge1xuICAgICAgdHlwZTogRnVuY3Rpb25cbiAgICB9XG4gIH0sXG4gIGVtaXRzOiBbXCJ1cGRhdGU6Y29sbGFwc2VcIiwgXCJjb2xsYXBzZVwiXSxcbiAgc2V0dXAocHJvcHMsIGN0eCkge1xuICAgIGNvbnN0IHsgdWkgfSA9IHVzZVVpKCk7XG4gICAgY29uc3QgeyB0IH0gPSB1c2VJMThuKCk7XG4gICAgY29uc3QgY29sdW1uc1Jvd1JlZiA9IHJlZigpO1xuICAgIGNvbnN0IGNvbXB1dGVkSXNNdWx0aUxpbmUgPSBjb21wdXRlZCgoKSA9PiB7XG4gICAgICByZXR1cm4gcHJvcHMubGF5b3V0ID09PSBcIm11bHRpLWxpbmVcIjtcbiAgICAgIC8v5LiN6KaB6L+Z5Liq77yM5Lya5q275b6q546v77yMICYmIGNvbHVtbnNCb3hIZWlnaHRSZWYudmFsdWUgPiBjb2x1bW5zTGluZUhlaWdodFJlZi52YWx1ZTtcbiAgICB9KTtcbiAgICBvbk1vdW50ZWQoKCkgPT4ge1xuICAgICAgaWYgKGNvbXB1dGVkSXNNdWx0aUxpbmUudmFsdWUgJiYgY29sdW1uc1Jvd1JlZi52YWx1ZSkge1xuICAgICAgICBjb2x1bW5zQm94SGVpZ2h0UmVmLnZhbHVlID0gY29sdW1uc1Jvd1JlZi52YWx1ZS4kZWwub2Zmc2V0SGVpZ2h0O1xuICAgICAgfVxuICAgIH0pO1xuXG4gICAgY29uc3QgY29tcHV0ZWRDb2x1bW5Cb3hIZWlnaHQgPSBjb21wdXRlZCgoKSA9PiB7XG4gICAgICBpZiAoIWNvbXB1dGVkSXNNdWx0aUxpbmUudmFsdWUgfHwgIXByb3BzLmNvbGxhcHNlKSB7XG4gICAgICAgIHJldHVybiBcImF1dG9cIjtcbiAgICAgIH1cbiAgICAgIHJldHVybiBjb2x1bW5zQm94SGVpZ2h0UmVmLnZhbHVlID8gY29sdW1uc0JveEhlaWdodFJlZi52YWx1ZSArIFwicHhcIiA6IFwiXCI7XG4gICAgfSk7XG5cbiAgICBjb25zdCBjb2x1bW5zQm94SGVpZ2h0UmVmID0gcmVmKDApO1xuXG4gICAgY29uc3QgdG9nZ2xlQ29sbGFwc2UgPSAoKSA9PiB7XG4gICAgICBjdHguZW1pdChcInVwZGF0ZTpjb2xsYXBzZVwiLCAhcHJvcHMuY29sbGFwc2UpO1xuICAgICAgY3R4LmVtaXQoXCJjb2xsYXBzZVwiLCAhcHJvcHMuY29sbGFwc2UpO1xuICAgIH07XG5cbiAgICBmdW5jdGlvbiBtZXJnZUNvbChjb2w6IGFueSkge1xuICAgICAgcmV0dXJuIF8ubWVyZ2Uoe30sIHByb3BzLmNvbCwgY29sKTtcbiAgICB9XG5cbiAgICByZXR1cm4ge1xuICAgICAgdWksXG4gICAgICBjb2x1bW5zUm93UmVmLFxuICAgICAgY29tcHV0ZWRDb2x1bW5Cb3hIZWlnaHQsXG4gICAgICBjb21wdXRlZElzTXVsdGlMaW5lLFxuICAgICAgdG9nZ2xlQ29sbGFwc2UsXG4gICAgICBtZXJnZUNvbCxcbiAgICAgIHRcbiAgICB9O1xuICB9XG59KTtcbjwvc2NyaXB0PlxuPHN0eWxlIGxhbmc9XCJsZXNzXCI+XG4uZnMtc2VhcmNoLWxheW91dC1kZWZhdWx0IHtcbiAgd2lkdGg6IDEwMCU7XG5cbiAgLmZzLXNlYXJjaC1ib3gge1xuICAgIHdpZHRoOiAxMDAlO1xuICAgIGRpc3BsYXk6IGZsZXg7XG4gICAgZmxleC1kaXJlY3Rpb246IGNvbHVtbjtcbiAgICBwb3NpdGlvbjogcmVsYXRpdmU7XG5cbiAgICAuZnMtc2VhcmNoLW1haW4ge1xuICAgICAgd2lkdGg6IDEwMCU7XG4gICAgICBkaXNwbGF5OiBmbGV4O1xuICAgICAgaGVpZ2h0OiBhdXRvO1xuXG4gICAgICAuZnMtc2VhcmNoLWNvbHVtbnMge1xuICAgICAgICB3aWR0aDogMTAwJTtcbiAgICAgICAgZGlzcGxheTogZmxleDtcbiAgICAgICAgZmxleC13cmFwOiB3cmFwO1xuICAgICAgICBoZWlnaHQ6IGF1dG87XG4gICAgICAgIHBhZGRpbmc6IDRweCAwIDRweCAwO1xuXG4gICAgICAgIC5mcy1zZWFyY2gtY29sIHtcbiAgICAgICAgICBtaW4td2lkdGg6IDE4MHB4O1xuICAgICAgICAgICYuZnMtc2VhcmNoLXNsb3Qge1xuICAgICAgICAgICAgbWluLXdpZHRoOiAwO1xuICAgICAgICAgIH1cbiAgICAgICAgICAmID4gKiB7XG4gICAgICAgICAgICBtYXJnaW46IDBweCA0cHg7XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgbWFyZ2luOiA0cHggMDtcblxuICAgICAgICAgICY6Zmlyc3QtY2hpbGQge1xuICAgICAgICAgICAgLy8gbWFyZ2luLWxlZnQ6IDA7XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgLmFudC1pbnB1dC1udW1iZXIsXG4gICAgICAgICAgLmFudC1waWNrZXIsXG4gICAgICAgICAgLmVsLWlucHV0LW51bWJlcixcbiAgICAgICAgICAuZWwtY2FzY2FkZXIsXG4gICAgICAgICAgLmVsLWRhdGUtZWRpdG9yLFxuICAgICAgICAgIC5uLXNlbGVjdCxcbiAgICAgICAgICAubi1kYXRlLXBpY2tlcixcbiAgICAgICAgICAubi1pbnB1dC1udW1iZXIge1xuICAgICAgICAgICAgd2lkdGg6IDEwMCU7XG4gICAgICAgICAgfVxuICAgICAgICAgIC5lbC1kYXRlLWVkaXRvciAuZWwtcmFuZ2VfX2ljb24ge1xuICAgICAgICAgICAgbWFyZ2luLWxlZnQ6IDEwcHg7XG4gICAgICAgICAgfVxuICAgICAgICAgIC5lbC1kYXRlLWVkaXRvciAuZWwtcmFuZ2VfX2Nsb3NlLWljb24ge1xuICAgICAgICAgICAgbWFyZ2luLXJpZ2h0OiAxMHB4O1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cbiAgfVxuXG4gIC5mcy1zZWFyY2gtYnV0dG9ucy1ncm91cCB7XG4gICAgZGlzcGxheTogZmxleDtcbiAgICBhbGlnbi1pdGVtczogY2VudGVyO1xuXG4gICAgLmZzLWJ1dHRvbiB7XG4gICAgICBtYXJnaW46IDAgMnB4IDAgMnB4O1xuICAgIH1cbiAgfVxuXG4gICYuZnMtc2VhcmNoLW11bHRpLWxpbmUge1xuICAgIC5mcy1zZWFyY2gtYm94IHtcbiAgICAgIC5mcy1zZWFyY2gtbWFpbiB7XG4gICAgICAgIGZsZXgtZGlyZWN0aW9uOiBjb2x1bW47XG4gICAgICAgIG92ZXJmbG93OiBoaWRkZW47XG4gICAgICAgIGhlaWdodDogYXV0bztcbiAgICAgICAgdHJhbnNpdGlvbjogbWF4LWhlaWdodCAwLjJzIGVhc2U7XG5cbiAgICAgICAgJi5mcy1zZWFyY2gtY29sbGFwc2Uge1xuICAgICAgICAgIG1heC1oZWlnaHQ6IDQycHggIWltcG9ydGFudDtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cblxuICAgIC5hbnQtZm9ybS1pdGVtIHtcbiAgICAgIGRpc3BsYXk6IGZsZXg7XG4gICAgICAuYW50LWZvcm0tcm93IHtcbiAgICAgICAgd2lkdGg6IDEwMCU7XG4gICAgICB9XG4gICAgICAuYW50LWZvcm0taXRlbS1jb250cm9sIHtcbiAgICAgICAgZmxleDogMTtcbiAgICAgICAgb3ZlcmZsb3c6IGhpZGRlbjtcbiAgICAgIH1cbiAgICB9XG4gIH1cbn1cbjwvc3R5bGU+XG4iLCI8dGVtcGxhdGU+XG4gIDxkaXYgY2xhc3M9XCJmcy1zZWFyY2gtbGF5b3V0LWRlZmF1bHRcIiA6Y2xhc3M9XCJ7ICdmcy1zZWFyY2gtbXVsdGktbGluZSc6IGNvbXB1dGVkSXNNdWx0aUxpbmUgfVwiPlxuICAgIDxkaXYgY2xhc3M9XCJmcy1zZWFyY2gtYm94XCI+XG4gICAgICA8ZGl2XG4gICAgICAgIGNsYXNzPVwiZnMtc2VhcmNoLW1haW5cIlxuICAgICAgICA6Y2xhc3M9XCJ7ICdmcy1zZWFyY2gtY29sbGFwc2UnOiBjb2xsYXBzZSB9XCJcbiAgICAgICAgOnN0eWxlPVwieyBtYXhIZWlnaHQ6IGNvbXB1dGVkQ29sdW1uQm94SGVpZ2h0IH1cIlxuICAgICAgPlxuICAgICAgICA8Y29tcG9uZW50IDppcz1cInVpLnJvdy5uYW1lXCIgcmVmPVwiY29sdW1uc1Jvd1JlZlwiIGNsYXNzPVwiZnMtc2VhcmNoLWNvbHVtbnNcIj5cbiAgICAgICAgICA8c3BhbiBjbGFzcz1cImZzLXNlYXJjaC1jb2wgZnMtc2VhcmNoLXNsb3RcIj5cbiAgICAgICAgICAgIDxzbG90IG5hbWU9XCJzZWFyY2gtbGVmdFwiPjwvc2xvdD5cbiAgICAgICAgICA8L3NwYW4+XG4gICAgICAgICAgPCEtLSDmn6Xor6LlrZfmrrVyZW5kZXLvvIzpnIDopoHlrprkuYlwcm9wcy5jb2x1bW5zIC0tPlxuICAgICAgICAgIDx0ZW1wbGF0ZSB2LWZvcj1cIihpdGVtLCBrZXkpIG9mIGNvbHVtbnNcIiA6a2V5PVwia2V5XCI+XG4gICAgICAgICAgICA8Y29tcG9uZW50IDppcz1cInVpLmNvbC5uYW1lXCIgdi1pZj1cIml0ZW0uc2hvd1wiIGNsYXNzPVwiZnMtc2VhcmNoLWNvbFwiIHYtYmluZD1cIm1lcmdlQ29sKGl0ZW0uY29sKVwiPlxuICAgICAgICAgICAgICA8ZnMtcmVuZGVyIDpyZW5kZXItZnVuYz1cIml0ZW0uX2NlbGxSZW5kZXJcIiA6c2NvcGU9XCJnZXRDb250ZXh0Rm4oKVwiIC8+XG4gICAgICAgICAgICA8L2NvbXBvbmVudD5cbiAgICAgICAgICA8L3RlbXBsYXRlPlxuICAgICAgICAgIDxzcGFuIGNsYXNzPVwiZnMtc2VhcmNoLWNvbCBmcy1zZWFyY2gtc2xvdFwiPlxuICAgICAgICAgICAgPHNsb3QgbmFtZT1cInNlYXJjaC1taWRkbGVcIj48L3Nsb3Q+XG4gICAgICAgICAgPC9zcGFuPlxuICAgICAgICAgIDxjb21wb25lbnRcbiAgICAgICAgICAgIDppcz1cInVpLmNvbC5uYW1lXCJcbiAgICAgICAgICAgIHYtaWY9XCIhY29tcHV0ZWRJc011bHRpTGluZVwiXG4gICAgICAgICAgICBjbGFzcz1cImZzLXNlYXJjaC1jb2wgZnMtc2VhcmNoLWJ1dHRvbnMtZ3JvdXBcIlxuICAgICAgICAgICAgdi1iaW5kPVwibWVyZ2VDb2woYWN0aW9uPy5jb2wpXCJcbiAgICAgICAgICA+XG4gICAgICAgICAgICA8Y29tcG9uZW50IDppcz1cInVpLmZvcm1JdGVtLm5hbWVcIiA6W3VpLmZvcm1JdGVtLmxhYmVsXT1cImFjdGlvbj8ubGFiZWxcIj5cbiAgICAgICAgICAgICAgPCEtLSDmn6Xor6LmjInpkq7mj5Lmp70tLT5cbiAgICAgICAgICAgICAgPHNsb3QgbmFtZT1cInNlYXJjaC1idXR0b25zXCIgdi1iaW5kPVwiZ2V0Q29udGV4dEZuKClcIj48L3Nsb3Q+XG4gICAgICAgICAgICA8L2NvbXBvbmVudD5cbiAgICAgICAgICA8L2NvbXBvbmVudD5cbiAgICAgICAgICA8c3BhbiBjbGFzcz1cImZzLXNlYXJjaC1jb2wgZnMtc2VhcmNoLXNsb3RcIj5cbiAgICAgICAgICAgIDxzbG90IG5hbWU9XCJzZWFyY2gtcmlnaHRcIiB2LWJpbmQ9XCJnZXRDb250ZXh0Rm4oKVwiPjwvc2xvdD5cbiAgICAgICAgICA8L3NwYW4+XG4gICAgICAgIDwvY29tcG9uZW50PlxuICAgICAgPC9kaXY+XG4gICAgICA8ZGl2IHYtaWY9XCJjb21wdXRlZElzTXVsdGlMaW5lXCIgY2xhc3M9XCJmcy1zZWFyY2gtYnV0dG9ucy1ncm91cCBmcy1zZWFyY2gtbXVsdGktbGluZS1idXR0b25zXCI+XG4gICAgICAgIDwhLS0g5aSa6KGM5qih5byP5pe255qE5p+l6K+i5oyJ6ZKuLS0+XG4gICAgICAgIDxzbG90IG5hbWU9XCJzZWFyY2gtYnV0dG9uc1wiPjwvc2xvdD5cbiAgICAgICAgPGZzLWJ1dHRvblxuICAgICAgICAgIHYtaWY9XCJjb2xsYXBzZUJ1dHRvbj8uc2hvdyAhPT0gZmFsc2VcIlxuICAgICAgICAgIDppY29uPVwiY29sbGFwc2UgPyB1aS5pY29ucy5jYXJldFVwIDogdWkuaWNvbnMuY2FyZXREb3duXCJcbiAgICAgICAgICA6dGV4dD1cIlxuICAgICAgICAgICAgY29sbGFwc2VcbiAgICAgICAgICAgICAgPyB0KCdmcy5zZWFyY2guY29udGFpbmVyLmNvbGxhcHNlQnV0dG9uLnRleHQuZXhwYW5kJylcbiAgICAgICAgICAgICAgOiB0KCdmcy5zZWFyY2guY29udGFpbmVyLmNvbGxhcHNlQnV0dG9uLnRleHQuY29sbGFwc2UnKVxuICAgICAgICAgIFwiXG4gICAgICAgICAgdi1iaW5kPVwiY29sbGFwc2VCdXR0b25cIlxuICAgICAgICAgIEBjbGljaz1cInRvZ2dsZUNvbGxhcHNlXCJcbiAgICAgICAgLz5cbiAgICAgIDwvZGl2PlxuICAgIDwvZGl2PlxuICA8L2Rpdj5cbjwvdGVtcGxhdGU+XG48c2NyaXB0IGxhbmc9XCJ0c1wiPlxuaW1wb3J0IHsgdXNlVWkgfSBmcm9tIFwiLi4vLi4vdXNlXCI7XG5pbXBvcnQgeyBjb21wdXRlZCwgZGVmaW5lQ29tcG9uZW50LCBvbk1vdW50ZWQsIHJlZiB9IGZyb20gXCJ2dWVcIjtcbmltcG9ydCBfIGZyb20gXCJsb2Rhc2gtZXNcIjtcbmltcG9ydCB7IHVzZUkxOG4gfSBmcm9tIFwiLi4vLi4vbG9jYWxlXCI7XG5cbmV4cG9ydCBkZWZhdWx0IGRlZmluZUNvbXBvbmVudCh7XG4gIG5hbWU6IFwiRnNTZWFyY2hMYXlvdXREZWZhdWx0XCIsXG4gIHByb3BzOiB7XG4gICAgLyoqXG4gICAgICog5piv5ZCm5pS257ypXG4gICAgICovXG4gICAgY29sbGFwc2U6IHtcbiAgICAgIHR5cGU6IEJvb2xlYW4sXG4gICAgICBkZWZhdWx0OiB0cnVlXG4gICAgfSxcbiAgICAvKipcbiAgICAgKiDlsZXlvIDmjInpkq5cbiAgICAgKi9cbiAgICBjb2xsYXBzZUJ1dHRvbjoge1xuICAgICAgdHlwZTogT2JqZWN0XG4gICAgfSxcblxuICAgIGFjdGlvbjoge1xuICAgICAgdHlwZTogT2JqZWN0XG4gICAgfSxcbiAgICAvKipcbiAgICAgKiDluIPlsYDmqKHlvI9cbiAgICAgKi9cbiAgICBsYXlvdXQ6IHtcbiAgICAgIHR5cGU6IFN0cmluZyxcbiAgICAgIGRlZmF1bHQ6IFwic2luZ2xlLWxpbmVcIlxuICAgIH0sXG4gICAgLyoqXG4gICAgICog5p+l6K+i5a2X5q615YiX6KGo77yM5Y+v5Lul57K+57uG5YyW6Ieq5a6a5LmJ5p+l6K+i5a2X5q615biD5bGAXG4gICAgICovXG4gICAgY29sdW1uczoge1xuICAgICAgdHlwZTogT2JqZWN0XG4gICAgfSxcbiAgICAvKipcbiAgICAgKiDpu5jorqTnmoRjb2zphY3nva5cbiAgICAgKi9cbiAgICBjb2w6IHtcbiAgICAgIHR5cGU6IE9iamVjdFxuICAgIH0sXG5cbiAgICAvKipcbiAgICAgKiDojrflj5bmn6Xor6LkuIrkuIvmlodcbiAgICAgKi9cbiAgICBnZXRDb250ZXh0Rm46IHtcbiAgICAgIHR5cGU6IEZ1bmN0aW9uXG4gICAgfVxuICB9LFxuICBlbWl0czogW1widXBkYXRlOmNvbGxhcHNlXCIsIFwiY29sbGFwc2VcIl0sXG4gIHNldHVwKHByb3BzLCBjdHgpIHtcbiAgICBjb25zdCB7IHVpIH0gPSB1c2VVaSgpO1xuICAgIGNvbnN0IHsgdCB9ID0gdXNlSTE4bigpO1xuICAgIGNvbnN0IGNvbHVtbnNSb3dSZWYgPSByZWYoKTtcbiAgICBjb25zdCBjb21wdXRlZElzTXVsdGlMaW5lID0gY29tcHV0ZWQoKCkgPT4ge1xuICAgICAgcmV0dXJuIHByb3BzLmxheW91dCA9PT0gXCJtdWx0aS1saW5lXCI7XG4gICAgICAvL+S4jeimgei/meS4qu+8jOS8muatu+W+queOr++8jCAmJiBjb2x1bW5zQm94SGVpZ2h0UmVmLnZhbHVlID4gY29sdW1uc0xpbmVIZWlnaHRSZWYudmFsdWU7XG4gICAgfSk7XG4gICAgb25Nb3VudGVkKCgpID0+IHtcbiAgICAgIGlmIChjb21wdXRlZElzTXVsdGlMaW5lLnZhbHVlICYmIGNvbHVtbnNSb3dSZWYudmFsdWUpIHtcbiAgICAgICAgY29sdW1uc0JveEhlaWdodFJlZi52YWx1ZSA9IGNvbHVtbnNSb3dSZWYudmFsdWUuJGVsLm9mZnNldEhlaWdodDtcbiAgICAgIH1cbiAgICB9KTtcblxuICAgIGNvbnN0IGNvbXB1dGVkQ29sdW1uQm94SGVpZ2h0ID0gY29tcHV0ZWQoKCkgPT4ge1xuICAgICAgaWYgKCFjb21wdXRlZElzTXVsdGlMaW5lLnZhbHVlIHx8ICFwcm9wcy5jb2xsYXBzZSkge1xuICAgICAgICByZXR1cm4gXCJhdXRvXCI7XG4gICAgICB9XG4gICAgICByZXR1cm4gY29sdW1uc0JveEhlaWdodFJlZi52YWx1ZSA/IGNvbHVtbnNCb3hIZWlnaHRSZWYudmFsdWUgKyBcInB4XCIgOiBcIlwiO1xuICAgIH0pO1xuXG4gICAgY29uc3QgY29sdW1uc0JveEhlaWdodFJlZiA9IHJlZigwKTtcblxuICAgIGNvbnN0IHRvZ2dsZUNvbGxhcHNlID0gKCkgPT4ge1xuICAgICAgY3R4LmVtaXQoXCJ1cGRhdGU6Y29sbGFwc2VcIiwgIXByb3BzLmNvbGxhcHNlKTtcbiAgICAgIGN0eC5lbWl0KFwiY29sbGFwc2VcIiwgIXByb3BzLmNvbGxhcHNlKTtcbiAgICB9O1xuXG4gICAgZnVuY3Rpb24gbWVyZ2VDb2woY29sOiBhbnkpIHtcbiAgICAgIHJldHVybiBfLm1lcmdlKHt9LCBwcm9wcy5jb2wsIGNvbCk7XG4gICAgfVxuXG4gICAgcmV0dXJuIHtcbiAgICAgIHVpLFxuICAgICAgY29sdW1uc1Jvd1JlZixcbiAgICAgIGNvbXB1dGVkQ29sdW1uQm94SGVpZ2h0LFxuICAgICAgY29tcHV0ZWRJc011bHRpTGluZSxcbiAgICAgIHRvZ2dsZUNvbGxhcHNlLFxuICAgICAgbWVyZ2VDb2wsXG4gICAgICB0XG4gICAgfTtcbiAgfVxufSk7XG48L3NjcmlwdD5cbjxzdHlsZSBsYW5nPVwibGVzc1wiPlxuLmZzLXNlYXJjaC1sYXlvdXQtZGVmYXVsdCB7XG4gIHdpZHRoOiAxMDAlO1xuXG4gIC5mcy1zZWFyY2gtYm94IHtcbiAgICB3aWR0aDogMTAwJTtcbiAgICBkaXNwbGF5OiBmbGV4O1xuICAgIGZsZXgtZGlyZWN0aW9uOiBjb2x1bW47XG4gICAgcG9zaXRpb246IHJlbGF0aXZlO1xuXG4gICAgLmZzLXNlYXJjaC1tYWluIHtcbiAgICAgIHdpZHRoOiAxMDAlO1xuICAgICAgZGlzcGxheTogZmxleDtcbiAgICAgIGhlaWdodDogYXV0bztcblxuICAgICAgLmZzLXNlYXJjaC1jb2x1bW5zIHtcbiAgICAgICAgd2lkdGg6IDEwMCU7XG4gICAgICAgIGRpc3BsYXk6IGZsZXg7XG4gICAgICAgIGZsZXgtd3JhcDogd3JhcDtcbiAgICAgICAgaGVpZ2h0OiBhdXRvO1xuICAgICAgICBwYWRkaW5nOiA0cHggMCA0cHggMDtcblxuICAgICAgICAuZnMtc2VhcmNoLWNvbCB7XG4gICAgICAgICAgbWluLXdpZHRoOiAxODBweDtcbiAgICAgICAgICAmLmZzLXNlYXJjaC1zbG90IHtcbiAgICAgICAgICAgIG1pbi13aWR0aDogMDtcbiAgICAgICAgICB9XG4gICAgICAgICAgJiA+ICoge1xuICAgICAgICAgICAgbWFyZ2luOiAwcHggNHB4O1xuICAgICAgICAgIH1cblxuICAgICAgICAgIG1hcmdpbjogNHB4IDA7XG5cbiAgICAgICAgICAmOmZpcnN0LWNoaWxkIHtcbiAgICAgICAgICAgIC8vIG1hcmdpbi1sZWZ0OiAwO1xuICAgICAgICAgIH1cblxuICAgICAgICAgIC5hbnQtaW5wdXQtbnVtYmVyLFxuICAgICAgICAgIC5hbnQtcGlja2VyLFxuICAgICAgICAgIC5lbC1pbnB1dC1udW1iZXIsXG4gICAgICAgICAgLmVsLWNhc2NhZGVyLFxuICAgICAgICAgIC5lbC1kYXRlLWVkaXRvcixcbiAgICAgICAgICAubi1zZWxlY3QsXG4gICAgICAgICAgLm4tZGF0ZS1waWNrZXIsXG4gICAgICAgICAgLm4taW5wdXQtbnVtYmVyIHtcbiAgICAgICAgICAgIHdpZHRoOiAxMDAlO1xuICAgICAgICAgIH1cbiAgICAgICAgICAuZWwtZGF0ZS1lZGl0b3IgLmVsLXJhbmdlX19pY29uIHtcbiAgICAgICAgICAgIG1hcmdpbi1sZWZ0OiAxMHB4O1xuICAgICAgICAgIH1cbiAgICAgICAgICAuZWwtZGF0ZS1lZGl0b3IgLmVsLXJhbmdlX19jbG9zZS1pY29uIHtcbiAgICAgICAgICAgIG1hcmdpbi1yaWdodDogMTBweDtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG4gIH1cblxuICAuZnMtc2VhcmNoLWJ1dHRvbnMtZ3JvdXAge1xuICAgIGRpc3BsYXk6IGZsZXg7XG4gICAgYWxpZ24taXRlbXM6IGNlbnRlcjtcblxuICAgIC5mcy1idXR0b24ge1xuICAgICAgbWFyZ2luOiAwIDJweCAwIDJweDtcbiAgICB9XG4gIH1cblxuICAmLmZzLXNlYXJjaC1tdWx0aS1saW5lIHtcbiAgICAuZnMtc2VhcmNoLWJveCB7XG4gICAgICAuZnMtc2VhcmNoLW1haW4ge1xuICAgICAgICBmbGV4LWRpcmVjdGlvbjogY29sdW1uO1xuICAgICAgICBvdmVyZmxvdzogaGlkZGVuO1xuICAgICAgICBoZWlnaHQ6IGF1dG87XG4gICAgICAgIHRyYW5zaXRpb246IG1heC1oZWlnaHQgMC4ycyBlYXNlO1xuXG4gICAgICAgICYuZnMtc2VhcmNoLWNvbGxhcHNlIHtcbiAgICAgICAgICBtYXgtaGVpZ2h0OiA0MnB4ICFpbXBvcnRhbnQ7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG5cbiAgICAuYW50LWZvcm0taXRlbSB7XG4gICAgICBkaXNwbGF5OiBmbGV4O1xuICAgICAgLmFudC1mb3JtLXJvdyB7XG4gICAgICAgIHdpZHRoOiAxMDAlO1xuICAgICAgfVxuICAgICAgLmFudC1mb3JtLWl0ZW0tY29udHJvbCB7XG4gICAgICAgIGZsZXg6IDE7XG4gICAgICAgIG92ZXJmbG93OiBoaWRkZW47XG4gICAgICB9XG4gICAgfVxuICB9XG59XG48L3N0eWxlPlxuIiwiPHNjcmlwdCBsYW5nPVwidHNcIj5cbmltcG9ydCB7IGRlZmluZUNvbXBvbmVudCBhcyBfX01BQ1JPU19kZWZpbmVDb21wb25lbnQgfSBmcm9tIFwidnVlXCI7XG5leHBvcnQgZGVmYXVsdCAvKiNfX1BVUkVfXyovIF9fTUFDUk9TX2RlZmluZUNvbXBvbmVudCh7XG4gIG5hbWU6IFwiRnNUYWJzRmlsdGVyXCIsXG4gIGluaGVyaXRBdHRyczogZmFsc2Vcbn0pO1xuPC9zY3JpcHQ+XG48dGVtcGxhdGU+XG4gIDxkaXYgY2xhc3M9XCJmcy10YWJzLWZpbHRlclwiPlxuICAgIDxjb21wb25lbnQgOmlzPVwidWkudGFicy5uYW1lXCIgdi1iaW5kPVwiYmluZGluZ1wiPlxuICAgICAgPGNvbXBvbmVudFxuICAgICAgICA6aXM9XCJ1aS50YWJQYW5lLm5hbWVcIlxuICAgICAgICB2LWlmPVwiZGVmYXVsdE9wdGlvbi5zaG93XCJcbiAgICAgICAgOlt1aS50YWJQYW5lLmtleV09XCJfX0RFRkFVTFRfX1wiXG4gICAgICAgIDpbdWkudGFiUGFuZS50YWJdPVwiZGVmYXVsdE9wdGlvbi5sYWJlbFwiXG4gICAgICAvPlxuICAgICAgPGNvbXBvbmVudFxuICAgICAgICA6aXM9XCJ1aS50YWJQYW5lLm5hbWVcIlxuICAgICAgICB2LWZvcj1cIihpdGVtLCBpbmRleCkgb2Ygb3B0aW9uc1wiXG4gICAgICAgIDprZXk9XCJpbmRleFwiXG4gICAgICAgIDpbdWkudGFiUGFuZS5rZXldPVwiZ2V0VmFsdWUoaXRlbSlcIlxuICAgICAgICA6W3VpLnRhYlBhbmUudGFiXT1cImdldExhYmVsKGl0ZW0pXCJcbiAgICAgIC8+XG4gICAgPC9jb21wb25lbnQ+XG4gIDwvZGl2PlxuPC90ZW1wbGF0ZT5cbjxzY3JpcHQgbGFuZz1cInRzXCIgc2V0dXA+XG5pbXBvcnQgeyBjb21wdXRlZCwgdXNlQXR0cnMgfSBmcm9tIFwidnVlXCI7XG5pbXBvcnQgXyBmcm9tIFwibG9kYXNoLWVzXCI7XG5pbXBvcnQgeyB1c2VNZXJnZSwgdXNlVWkgfSBmcm9tIFwiLi4vLi4vdXNlXCI7XG47XG5cbnR5cGUgVGFic0ZpbHRlckRlZmF1bHRPcHRpb24gPSB7IHNob3c/OiBib29sZWFuOyB2YWx1ZT86IGFueTsgbGFiZWw/OiBzdHJpbmcgfTtcbnR5cGUgVGFic0ZpbHRlck9wdGlvbiA9IHsgdmFsdWU6IGFueTsgbGFiZWw6IHN0cmluZzsgW2tleTogc3RyaW5nXTogYW55IH07XG5pbnRlcmZhY2UgVGFic0ZpbHRlclByb3BzIHtcbiAgbmFtZTogc3RyaW5nOyAvL+afpeivouWtl+auteeahGtleSxzZWFyY2jlj4LmlbBrZXlcbiAgc2hvdz86IGJvb2xlYW47XG4gIGRlZmF1bHRPcHRpb24/OiBUYWJzRmlsdGVyRGVmYXVsdE9wdGlvbjtcbiAgb3B0aW9uczogVGFic0ZpbHRlck9wdGlvbltdO1xuICBtb2RlbFZhbHVlOiBhbnk7XG4gIHZhbHVlPzogc3RyaW5nO1xuICBsYWJlbD86IHN0cmluZztcbn1cblxuY29uc3QgYXR0cnMgPSB1c2VBdHRycygpO1xuY29uc3QgeyBtZXJnZSB9ID0gdXNlTWVyZ2UoKTtcbmNvbnN0IHByb3BzID0gd2l0aERlZmF1bHRzKGRlZmluZVByb3BzPFRhYnNGaWx0ZXJQcm9wcz4oKSwge1xuICBzaG93OiBmYWxzZSxcbiAgdmFsdWU6IFwidmFsdWVcIixcbiAgbGFiZWw6IFwibGFiZWxcIixcbiAgZGVmYXVsdE9wdGlvbjogdW5kZWZpbmVkLFxuICBvcHRpb25zOiAoKSA9PiB7XG4gICAgcmV0dXJuIFtdO1xuICB9XG59KTtcblxuY29uc3QgZGVmYXVsdE9wdGlvbiA9IGNvbXB1dGVkKCgpID0+IHtcbiAgY29uc3QgZGVmID0ge1xuICAgIHNob3c6IHRydWUsXG4gICAgdmFsdWU6IG51bGwsXG4gICAgbGFiZWw6IFwi5YWo6YOoXCJcbiAgfSBhcyBUYWJzRmlsdGVyRGVmYXVsdE9wdGlvbjtcbiAgcmV0dXJuIG1lcmdlKGRlZiwgcHJvcHMuZGVmYXVsdE9wdGlvbiB8fCB7fSk7XG59KTtcblxuY29uc3QgX19ERUZBVUxUX18gPSBcIl9kZWZhdWx0X2tleV9cIjtcbmNvbnN0IGJpbmRpbmcgPSBjb21wdXRlZCgoKSA9PiB7XG4gIGNvbnN0IHZhbHVlID1cbiAgICBwcm9wcy5tb2RlbFZhbHVlID09IG51bGwgfHwgcHJvcHMubW9kZWxWYWx1ZSA9PT0gZGVmYXVsdE9wdGlvbi52YWx1ZS52YWx1ZSA/IF9fREVGQVVMVF9fIDogcHJvcHMubW9kZWxWYWx1ZTtcbiAgcmV0dXJuIHtcbiAgICB0eXBlOiBcImNhcmRcIixcbiAgICAuLi5hdHRycyxcbiAgICBbdWkudGFicy5tb2RlbFZhbHVlXTogdmFsdWUsXG4gICAgW1wib25VcGRhdGU6XCIgKyB1aS50YWJzLm1vZGVsVmFsdWVdOiBvblVwZGF0ZUFjdGl2ZUtleVxuICB9O1xufSk7XG5cbmNvbnN0IGVtaXQgPSBkZWZpbmVFbWl0cyhbXCJ1cGRhdGU6bW9kZWxWYWx1ZVwiLCBcImNoYW5nZVwiXSk7XG5cbmZ1bmN0aW9uIG9uVXBkYXRlQWN0aXZlS2V5KHZhbHVlOiBhbnkpIHtcbiAgaWYgKF9fREVGQVVMVF9fID09PSB2YWx1ZSkge1xuICAgIHZhbHVlID0gZGVmYXVsdE9wdGlvbi52YWx1ZS52YWx1ZTtcbiAgfVxuICBjb25zdCBvbGRWYWx1ZSA9IHByb3BzLm1vZGVsVmFsdWU7XG4gIGVtaXQoXCJ1cGRhdGU6bW9kZWxWYWx1ZVwiLCB2YWx1ZSk7XG4gIGlmIChvbGRWYWx1ZSAhPT0gdmFsdWUpIHtcbiAgICBlbWl0KFwiY2hhbmdlXCIsIHZhbHVlKTtcbiAgfVxufVxuXG5mdW5jdGlvbiBnZXRWYWx1ZShvcHRpb246IFRhYnNGaWx0ZXJPcHRpb24pIHtcbiAgcmV0dXJuIG9wdGlvbltwcm9wcy52YWx1ZV07XG59XG5mdW5jdGlvbiBnZXRMYWJlbChvcHRpb246IFRhYnNGaWx0ZXJPcHRpb24pIHtcbiAgcmV0dXJuIG9wdGlvbltwcm9wcy5sYWJlbF07XG59XG5cbmNvbnN0IHsgdWkgfSA9IHVzZVVpKCk7XG48L3NjcmlwdD5cblxuPHN0eWxlIGxhbmc9XCJsZXNzXCI+XG4uZnMtdGFicy1maWx0ZXIge1xuICBtYXJnaW46IDA7XG4gIHdpZHRoOiAxMDAlO1xuICAvL3dpZHRoOiAxMDAlO1xuICAuYW50LXRhYnMgPiAuYW50LXRhYnMtbmF2LFxuICAuYW50LXRhYnMgPiBkaXYgPiAuYW50LXRhYnMtbmF2IHtcbiAgICBtYXJnaW4tYm90dG9tOiAwO1xuICB9XG5cbiAgLmVsLXRhYnMtLWNhcmQgPiAuZWwtdGFic19faGVhZGVyIHtcbiAgICBtYXJnaW4tYm90dG9tOiAwO1xuICB9XG5cbiAgLm4tdGFiLXBhbmUge1xuICAgIHBhZGRpbmc6IDAgIWltcG9ydGFudDtcbiAgfVxufVxuPC9zdHlsZT5cbiIsIjx0ZW1wbGF0ZT5cbiAgPGNvbXBvbmVudCA6aXM9XCJ1aS5yYWRpb0dyb3VwLm5hbWVcIiBAY2hhbmdlPVwib25TZWxlY3RlZENoYW5nZVwiPlxuICAgIDxjb21wb25lbnRcbiAgICAgIDppcz1cImNvbXB1dGVkUmFkaW9OYW1lXCJcbiAgICAgIHYtZm9yPVwiaXRlbSBvZiBjb21wdXRlZE9wdGlvbnNcIlxuICAgICAgcmVmPVwicmFkaW9SZWZcIlxuICAgICAgOmtleT1cImdldFZhbHVlKGl0ZW0pXCJcbiAgICAgIDpbdWkucmFkaW8udmFsdWVdPVwiZ2V0VmFsdWUoaXRlbSlcIlxuICAgICAgdi1iaW5kPVwib3B0aW9uUHJvcHNcIlxuICAgID5cbiAgICAgIHt7IGdldExhYmVsKGl0ZW0pIH19XG4gICAgPC9jb21wb25lbnQ+XG4gIDwvY29tcG9uZW50PlxuPC90ZW1wbGF0ZT5cbjxzY3JpcHQgbGFuZz1cInRzXCI+XG5pbXBvcnQgeyB1c2VEaWN0IH0gZnJvbSBcIi4uLy4uL3VzZS91c2UtZGljdFwiO1xuaW1wb3J0IHsgdWlDb250ZXh0IH0gZnJvbSBcIi4uLy4uL3VpXCI7XG5pbXBvcnQgeyByZWYsIGNvbXB1dGVkLCBkZWZpbmVDb21wb25lbnQgfSBmcm9tIFwidnVlXCI7XG5pbXBvcnQgeyB1c2VVaSB9IGZyb20gXCIuLi8uLi91c2VcIjtcbi8qKlxuICog5a2X5YW45Y2V6YCJ5qGGXG4gKiDmlK/mjIFlbC1yYWRpby1ncm91cHxhLXJhZGlvLWdyb3Vw55qE5Y+C5pWwXG4gKlxuICovXG5leHBvcnQgZGVmYXVsdCBkZWZpbmVDb21wb25lbnQoe1xuICBuYW1lOiBcIkZzRGljdFJhZGlvXCIsXG4gIHByb3BzOiB7XG4gICAgLyoqXG4gICAgICog5pWw5o2u5a2X5YW46YWN572uXG4gICAgICovXG4gICAgZGljdDoge30sXG4gICAgLyoqXG4gICAgICog5Y+v6YCJ6aG577yM5q+UZGljdC5kYXRh5LyY5YWI57qn6auYXG4gICAgICovXG4gICAgb3B0aW9uczogeyB0eXBlOiBBcnJheSB9LFxuXG4gICAgLyoqXG4gICAgICogcmFkaW/nu4Tku7blkI3np7BcbiAgICAgKiBhbnRkduS9v+eUqGJ1dHRvbuagt+W8j+eahOaXtuWAmeacieeUqFxuICAgICAqIOWNs+WwhuW6n+W8gyzor7fkvb/nlKhvcHRpb25OYW1lXG4gICAgICovXG4gICAgcmFkaW9OYW1lOiB7fSxcblxuICAgIC8qKlxuICAgICAqIOmAiemhueeahOe7hOS7tuWQjeensFxuICAgICAqL1xuICAgIG9wdGlvbk5hbWU6IHtcbiAgICAgIHR5cGU6IFN0cmluZ1xuICAgIH0sXG5cbiAgICAvKipcbiAgICAgKiDpgInpobnnmoTlsZ7mgKdcbiAgICAgKi9cbiAgICBvcHRpb25Qcm9wczoge1xuICAgICAgdHlwZTogT2JqZWN0LFxuICAgICAgZGVmYXVsdCgpIHtcbiAgICAgICAgcmV0dXJuIHt9O1xuICAgICAgfVxuICAgIH0sXG4gICAgLyoqXG4gICAgICog6L2s5o2iRGljdERhdGFcbiAgICAgKi9cbiAgICB0cmFuc2Zvcm1EaWN0RGF0YToge1xuICAgICAgdHlwZTogRnVuY3Rpb24sXG4gICAgICBkZWZhdWx0OiB1bmRlZmluZWRcbiAgICB9XG4gIH0sXG4gIGVtaXRzOiBbXG4gICAgLyoqXG4gICAgICog5a2X5YW45pWw5o2u5Y+Y5YyW5LqL5Lu2XG4gICAgICovXG4gICAgXCJkaWN0LWNoYW5nZVwiLFxuXG4gICAgLyoqXG4gICAgICog6YCJ5Lit5YC85Y+Y5YyW5LqL5Lu277yM5Y+v5Lul6I635Y+W5Yiw5b2T5YmN6YCJ5Lit55qEb3B0aW9u5a+56LGhXG4gICAgICovXG4gICAgXCJzZWxlY3RlZC1jaGFuZ2VcIixcbiAgICAvKipcbiAgICAgKiDlgLzlj5jljJbkuovku7ZcbiAgICAgKi9cbiAgICBcImNoYW5nZVwiXG4gIF0sXG4gIHNldHVwKHByb3BzOiBhbnksIGN0eDogYW55KSB7XG4gICAgY29uc3QgeyB1aSB9ID0gdXNlVWkoKTtcblxuICAgIGlmIChwcm9wcy5yYWRpb05hbWUpIHtcbiAgICAgIGNvbnNvbGUud2FybihcIuWPguaVsHJhZGlvTmFtZeWNs+WwhuW6n+W8g++8jOivt+aUueaIkG9wdGlvbk5hbWVcIik7XG4gICAgfVxuICAgIGNvbnN0IGNvbXB1dGVkUmFkaW9OYW1lID0gY29tcHV0ZWQoKCkgPT4ge1xuICAgICAgcmV0dXJuIHByb3BzLm9wdGlvbk5hbWUgPz8gcHJvcHMucmFkaW9OYW1lID8/IHVpLnJhZGlvLm5hbWU7XG4gICAgfSk7XG5cbiAgICBsZXQgdXNlZERpY3QgPSB1c2VEaWN0KHByb3BzLCBjdHgsIHVpLnJhZGlvR3JvdXAubW9kZWxWYWx1ZSk7XG4gICAgY29uc3QgY29tcHV0ZWRPcHRpb25zID0gdXNlZERpY3QuY3JlYXRlQ29tcHV0ZWRPcHRpb25zKCk7XG5cbiAgICBjb25zdCBvblNlbGVjdGVkQ2hhbmdlID0gKHZhbHVlOiBhbnkpID0+IHtcbiAgICAgIGN0eC5lbWl0KFwiY2hhbmdlXCIsIHZhbHVlKTtcbiAgICAgIGlmICh2YWx1ZSAmJiB2YWx1ZS50YXJnZXQpIHtcbiAgICAgICAgdmFsdWUgPSB2YWx1ZS50YXJnZXQudmFsdWU7XG4gICAgICB9XG4gICAgICBjb25zdCBkaWN0ID0gdXNlZERpY3QuZ2V0RGljdCgpO1xuICAgICAgaWYgKGRpY3QgJiYgZGljdC5kYXRhTWFwICYmIGRpY3QuZGF0YU1hcFt2YWx1ZV0pIHtcbiAgICAgICAgY29uc3Qgb3B0ID0gZGljdC5kYXRhTWFwW3ZhbHVlXTtcbiAgICAgICAgY3R4LmVtaXQoXCJzZWxlY3RlZC1jaGFuZ2VcIiwgb3B0KTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGN0eC5lbWl0KFwic2VsZWN0ZWQtY2hhbmdlXCIsIG51bGwpO1xuICAgICAgfVxuICAgIH07XG5cbiAgICByZXR1cm4ge1xuICAgICAgdWksXG4gICAgICBjb21wdXRlZFJhZGlvTmFtZSxcbiAgICAgIC4uLnVzZWREaWN0LFxuICAgICAgY29tcHV0ZWRPcHRpb25zLFxuICAgICAgb25TZWxlY3RlZENoYW5nZVxuICAgIH07XG4gIH1cbn0pO1xuPC9zY3JpcHQ+XG4iLCI8dGVtcGxhdGU+XG4gIDxjb21wb25lbnQgOmlzPVwidWkucmFkaW9Hcm91cC5uYW1lXCIgQGNoYW5nZT1cIm9uU2VsZWN0ZWRDaGFuZ2VcIj5cbiAgICA8Y29tcG9uZW50XG4gICAgICA6aXM9XCJjb21wdXRlZFJhZGlvTmFtZVwiXG4gICAgICB2LWZvcj1cIml0ZW0gb2YgY29tcHV0ZWRPcHRpb25zXCJcbiAgICAgIHJlZj1cInJhZGlvUmVmXCJcbiAgICAgIDprZXk9XCJnZXRWYWx1ZShpdGVtKVwiXG4gICAgICA6W3VpLnJhZGlvLnZhbHVlXT1cImdldFZhbHVlKGl0ZW0pXCJcbiAgICAgIHYtYmluZD1cIm9wdGlvblByb3BzXCJcbiAgICA+XG4gICAgICB7eyBnZXRMYWJlbChpdGVtKSB9fVxuICAgIDwvY29tcG9uZW50PlxuICA8L2NvbXBvbmVudD5cbjwvdGVtcGxhdGU+XG48c2NyaXB0IGxhbmc9XCJ0c1wiPlxuaW1wb3J0IHsgdXNlRGljdCB9IGZyb20gXCIuLi8uLi91c2UvdXNlLWRpY3RcIjtcbmltcG9ydCB7IHVpQ29udGV4dCB9IGZyb20gXCIuLi8uLi91aVwiO1xuaW1wb3J0IHsgcmVmLCBjb21wdXRlZCwgZGVmaW5lQ29tcG9uZW50IH0gZnJvbSBcInZ1ZVwiO1xuaW1wb3J0IHsgdXNlVWkgfSBmcm9tIFwiLi4vLi4vdXNlXCI7XG4vKipcbiAqIOWtl+WFuOWNlemAieahhlxuICog5pSv5oyBZWwtcmFkaW8tZ3JvdXB8YS1yYWRpby1ncm91cOeahOWPguaVsFxuICpcbiAqL1xuZXhwb3J0IGRlZmF1bHQgZGVmaW5lQ29tcG9uZW50KHtcbiAgbmFtZTogXCJGc0RpY3RSYWRpb1wiLFxuICBwcm9wczoge1xuICAgIC8qKlxuICAgICAqIOaVsOaNruWtl+WFuOmFjee9rlxuICAgICAqL1xuICAgIGRpY3Q6IHt9LFxuICAgIC8qKlxuICAgICAqIOWPr+mAiemhue+8jOavlGRpY3QuZGF0YeS8mOWFiOe6p+mrmFxuICAgICAqL1xuICAgIG9wdGlvbnM6IHsgdHlwZTogQXJyYXkgfSxcblxuICAgIC8qKlxuICAgICAqIHJhZGlv57uE5Lu25ZCN56ewXG4gICAgICogYW50ZHbkvb/nlKhidXR0b27moLflvI/nmoTml7blgJnmnInnlKhcbiAgICAgKiDljbPlsIblup/lvIMs6K+35L2/55Sob3B0aW9uTmFtZVxuICAgICAqL1xuICAgIHJhZGlvTmFtZToge30sXG5cbiAgICAvKipcbiAgICAgKiDpgInpobnnmoTnu4Tku7blkI3np7BcbiAgICAgKi9cbiAgICBvcHRpb25OYW1lOiB7XG4gICAgICB0eXBlOiBTdHJpbmdcbiAgICB9LFxuXG4gICAgLyoqXG4gICAgICog6YCJ6aG555qE5bGe5oCnXG4gICAgICovXG4gICAgb3B0aW9uUHJvcHM6IHtcbiAgICAgIHR5cGU6IE9iamVjdCxcbiAgICAgIGRlZmF1bHQoKSB7XG4gICAgICAgIHJldHVybiB7fTtcbiAgICAgIH1cbiAgICB9LFxuICAgIC8qKlxuICAgICAqIOi9rOaNokRpY3REYXRhXG4gICAgICovXG4gICAgdHJhbnNmb3JtRGljdERhdGE6IHtcbiAgICAgIHR5cGU6IEZ1bmN0aW9uLFxuICAgICAgZGVmYXVsdDogdW5kZWZpbmVkXG4gICAgfVxuICB9LFxuICBlbWl0czogW1xuICAgIC8qKlxuICAgICAqIOWtl+WFuOaVsOaNruWPmOWMluS6i+S7tlxuICAgICAqL1xuICAgIFwiZGljdC1jaGFuZ2VcIixcblxuICAgIC8qKlxuICAgICAqIOmAieS4reWAvOWPmOWMluS6i+S7tu+8jOWPr+S7peiOt+WPluWIsOW9k+WJjemAieS4reeahG9wdGlvbuWvueixoVxuICAgICAqL1xuICAgIFwic2VsZWN0ZWQtY2hhbmdlXCIsXG4gICAgLyoqXG4gICAgICog5YC85Y+Y5YyW5LqL5Lu2XG4gICAgICovXG4gICAgXCJjaGFuZ2VcIlxuICBdLFxuICBzZXR1cChwcm9wczogYW55LCBjdHg6IGFueSkge1xuICAgIGNvbnN0IHsgdWkgfSA9IHVzZVVpKCk7XG5cbiAgICBpZiAocHJvcHMucmFkaW9OYW1lKSB7XG4gICAgICBjb25zb2xlLndhcm4oXCLlj4LmlbByYWRpb05hbWXljbPlsIblup/lvIPvvIzor7fmlLnmiJBvcHRpb25OYW1lXCIpO1xuICAgIH1cbiAgICBjb25zdCBjb21wdXRlZFJhZGlvTmFtZSA9IGNvbXB1dGVkKCgpID0+IHtcbiAgICAgIHJldHVybiBwcm9wcy5vcHRpb25OYW1lID8/IHByb3BzLnJhZGlvTmFtZSA/PyB1aS5yYWRpby5uYW1lO1xuICAgIH0pO1xuXG4gICAgbGV0IHVzZWREaWN0ID0gdXNlRGljdChwcm9wcywgY3R4LCB1aS5yYWRpb0dyb3VwLm1vZGVsVmFsdWUpO1xuICAgIGNvbnN0IGNvbXB1dGVkT3B0aW9ucyA9IHVzZWREaWN0LmNyZWF0ZUNvbXB1dGVkT3B0aW9ucygpO1xuXG4gICAgY29uc3Qgb25TZWxlY3RlZENoYW5nZSA9ICh2YWx1ZTogYW55KSA9PiB7XG4gICAgICBjdHguZW1pdChcImNoYW5nZVwiLCB2YWx1ZSk7XG4gICAgICBpZiAodmFsdWUgJiYgdmFsdWUudGFyZ2V0KSB7XG4gICAgICAgIHZhbHVlID0gdmFsdWUudGFyZ2V0LnZhbHVlO1xuICAgICAgfVxuICAgICAgY29uc3QgZGljdCA9IHVzZWREaWN0LmdldERpY3QoKTtcbiAgICAgIGlmIChkaWN0ICYmIGRpY3QuZGF0YU1hcCAmJiBkaWN0LmRhdGFNYXBbdmFsdWVdKSB7XG4gICAgICAgIGNvbnN0IG9wdCA9IGRpY3QuZGF0YU1hcFt2YWx1ZV07XG4gICAgICAgIGN0eC5lbWl0KFwic2VsZWN0ZWQtY2hhbmdlXCIsIG9wdCk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBjdHguZW1pdChcInNlbGVjdGVkLWNoYW5nZVwiLCBudWxsKTtcbiAgICAgIH1cbiAgICB9O1xuXG4gICAgcmV0dXJuIHtcbiAgICAgIHVpLFxuICAgICAgY29tcHV0ZWRSYWRpb05hbWUsXG4gICAgICAuLi51c2VkRGljdCxcbiAgICAgIGNvbXB1dGVkT3B0aW9ucyxcbiAgICAgIG9uU2VsZWN0ZWRDaGFuZ2VcbiAgICB9O1xuICB9XG59KTtcbjwvc2NyaXB0PlxuIixudWxsLCI8dGVtcGxhdGU+XG4gIDxzcGFuIGNsYXNzPVwiZnMtdmFsdWVzLWZvcm1hdFwiPlxuICAgIDx0ZW1wbGF0ZSB2LWlmPVwiaXRlbVJlbmRlclwiPlxuICAgICAgPGZzLXJlbmRlciB2LWZvcj1cIml0ZW0gaW4gY29tcHV0ZWRWYWx1ZUl0ZW1zXCIgOmtleT1cImdldFZhbHVlKGl0ZW0pXCIgOnJlbmRlci1mdW5jPVwiaXRlbVJlbmRlclwiIDpzY29wZT1cIml0ZW1cIiAvPlxuICAgIDwvdGVtcGxhdGU+XG4gICAgPHRlbXBsYXRlIHYtZWxzZS1pZj1cInR5cGUgPT09ICd0ZXh0J1wiPlxuICAgICAgPHNwYW4gdi1mb3I9XCJpdGVtIGluIGNvbXB1dGVkVmFsdWVJdGVtc1wiIDprZXk9XCJnZXRWYWx1ZShpdGVtKVwiIEBjbGljaz1cImRvQ2xpY2soaXRlbSlcIj57eyBnZXRMYWJlbChpdGVtKSB9fTwvc3Bhbj5cbiAgICA8L3RlbXBsYXRlPlxuICAgIDx0ZW1wbGF0ZSB2LWVsc2U+XG4gICAgICA8dGVtcGxhdGUgdi1mb3I9XCIoaXRlbSwgaW5kZXgpIGluIGNvbXB1dGVkVmFsdWVJdGVtc1wiIDprZXk9XCJnZXRWYWx1ZShpdGVtKVwiPlxuICAgICAgICA8Y29tcG9uZW50XG4gICAgICAgICAgOmlzPVwidWkudGFnLm5hbWVcIlxuICAgICAgICAgIGNsYXNzPVwiZnMtdGFnXCJcbiAgICAgICAgICBzaXplPVwic21hbGxcIlxuICAgICAgICAgIDpjbG9zYWJsZT1cImNsb3NhYmxlXCJcbiAgICAgICAgICB2LWJpbmQ9XCJpdGVtXCJcbiAgICAgICAgICA6aWNvbj1cIm51bGxcIlxuICAgICAgICAgIDpuYW1lPVwibnVsbFwiXG4gICAgICAgICAgQGNsb3NlPVwiZG9DbG9zZShpbmRleCwgaXRlbSlcIlxuICAgICAgICAgIEBjbGljaz1cImRvQ2xpY2soaXRlbSlcIlxuICAgICAgICA+XG4gICAgICAgICAgPHRlbXBsYXRlIHYtaWY9XCJpdGVtLmljb25cIj5cbiAgICAgICAgICAgIDxmcy1pY29uIDppY29uPVwiaXRlbS5pY29uXCIgOnNwaW49XCJpdGVtLmljb25TcGluXCIgY2xhc3M9XCJmcy10YWctaWNvblwiIC8+XG4gICAgICAgICAgPC90ZW1wbGF0ZT5cbiAgICAgICAgICB7eyBnZXRMYWJlbChpdGVtKSB9fVxuICAgICAgICA8L2NvbXBvbmVudD5cbiAgICAgIDwvdGVtcGxhdGU+XG4gICAgPC90ZW1wbGF0ZT5cbiAgPC9zcGFuPlxuPC90ZW1wbGF0ZT5cblxuPHNjcmlwdCBsYW5nPVwidHNcIj5cbmltcG9ydCBfIGZyb20gXCJsb2Rhc2gtZXNcIjtcbmltcG9ydCB7IGNvbXB1dGVkLCBkZWZpbmVDb21wb25lbnQsIFJlZiB9IGZyb20gXCJ2dWVcIjtcbmltcG9ydCB7IHVzZURpY3QgfSBmcm9tIFwiLi4vLi4vdXNlL3VzZS1kaWN0XCI7XG5pbXBvcnQgeyB1c2VVaSB9IGZyb20gXCIuLi8uLi91c2VcIjtcbmZ1bmN0aW9uIGdldEhhc2hDb2RlKHN0cjogc3RyaW5nKSB7XG4gIGlmIChzdHIgPT0gbnVsbCkge1xuICAgIHJldHVybiAwO1xuICB9XG4gIGlmICh0eXBlb2Ygc3RyICE9PSBcInN0cmluZ1wiKSB7XG4gICAgc3RyID0gSlNPTi5zdHJpbmdpZnkoc3RyKTtcbiAgfVxuICBsZXQgaGFzaCA9IDA7XG4gIGxldCBpO1xuICBsZXQgY2hyO1xuICBsZXQgbGVuO1xuICBpZiAoc3RyLmxlbmd0aCA9PT0gMCkgcmV0dXJuIGhhc2g7XG4gIGZvciAoaSA9IDAsIGxlbiA9IHN0ci5sZW5ndGg7IGkgPCBsZW47IGkrKykge1xuICAgIGNociA9IHN0ci5jaGFyQ29kZUF0KGkpO1xuICAgIGhhc2ggPSAoaGFzaCA8PCA1KSAtIGhhc2ggKyBjaHI7XG4gICAgaGFzaCB8PSAwOyAvLyBDb252ZXJ0IHRvIDMyYml0IGludGVnZXJcbiAgfVxuICByZXR1cm4gaGFzaDtcbn1cblxuZnVuY3Rpb24gYnVpbGRBcnJheVZhbHVlKHByb3BzOiBhbnkpIHtcbiAgbGV0IHZhbHVlQXJyID0gW107XG4gIGlmICh0eXBlb2YgcHJvcHMubW9kZWxWYWx1ZSA9PT0gXCJzdHJpbmdcIiAmJiBwcm9wcy5tdWx0aXBsZSAmJiBwcm9wcy5zZXBhcmF0b3IgIT0gbnVsbCAmJiBwcm9wcy5zZXBhcmF0b3IgIT09IFwiXCIpIHtcbiAgICB2YWx1ZUFyciA9IHByb3BzLm1vZGVsVmFsdWUuc3BsaXQocHJvcHMuc2VwYXJhdG9yKTtcbiAgfSBlbHNlIGlmIChwcm9wcy5tb2RlbFZhbHVlIGluc3RhbmNlb2YgQXJyYXkpIHtcbiAgICAvLyDmnKzmnaXlsLHmmK/mlbDnu4TnmoRcbiAgICB2YWx1ZUFyciA9IHByb3BzLm1vZGVsVmFsdWU7XG4gIH0gZWxzZSB7XG4gICAgdmFsdWVBcnIgPSBbcHJvcHMubW9kZWxWYWx1ZV07XG4gIH1cbiAgcmV0dXJuIHZhbHVlQXJyO1xufVxuXG4vKipcbiAqIHZhbHVl5qC85byP5YyW5bGV56S657uE5Lu2XG4gKi9cbmV4cG9ydCBkZWZhdWx0IGRlZmluZUNvbXBvbmVudCh7XG4gIG5hbWU6IFwiRnNWYWx1ZXNGb3JtYXRcIixcbiAgcHJvcHM6IHtcbiAgICAvKipcbiAgICAgKiDlgLxcbiAgICAgKi9cbiAgICBtb2RlbFZhbHVlOiB7fSxcbiAgICAvKipcbiAgICAgKiDlrZflhbjphY3nva5cbiAgICAgKi9cbiAgICBkaWN0OiB7fSxcbiAgICAvKipcbiAgICAgKiDmmK/lkKblpJrpgIlcbiAgICAgKi9cbiAgICBtdWx0aXBsZTogeyBkZWZhdWx0OiB0cnVlIH0sXG4gICAgLyoqXG4gICAgICog5YiG6ZqU56ymPGJyLz5cbiAgICAgKiDlpJrpgInml7bvvIzlpoLmnpx2YWx1ZeS4unN0cmluZ++8jOWImeS7peivpeWIhumalOespuWIhuWJsuaIkOWkmuS4quWxleekujxici8+XG4gICAgICog5Lyg5YWl56m65a2X56ym5Liy77yM6KGo56S65LiN5YiG5YmyPGJyLz5cbiAgICAgKi9cbiAgICBzZXBhcmF0b3I6IHsgZGVmYXVsdDogXCIsXCIgfSxcblxuICAgIC8qKlxuICAgICAqIOminOiJslxuICAgICAqIGVsZW1lbnQ944CQYXV0bywgcHJpbWFyeSwgc3VjY2Vzcywgd2FybmluZywgZGFuZ2VyICxpbmZv44CRXG4gICAgICogYW50ZHY944CQYXV0bywgcHJpbWFyeSwgc3VjY2VzcywgYmx1ZSxyZWQsLi4u44CRXG4gICAgICog6YWN572uYXV0b++8jOWImeiHquWKqOagueaNrnZhbHVl5YC8aGFzaGNvZGXliIbphY3popzoibLlgLxcbiAgICAgKi9cbiAgICBjb2xvcjoge30sXG4gICAgLyoqXG4gICAgICog5pWI5p6c77yI5LuFZWxlbWVudO+8iVxuICAgICAqKi9cbiAgICBlZmZlY3Q6IHt9LFxuICAgIC8qKlxuICAgICAqIOiHquWKqOafk+iJsuminOiJsuWAvOWIl+ihqFxuICAgICAqL1xuICAgIGF1dG9Db2xvcnM6IHtcbiAgICAgIHR5cGU6IEFycmF5XG4gICAgfSxcbiAgICAvKipcbiAgICAgKiDoh6rliqjkuLvpopjliJfooajvvIjku4VlbGVtZW5077yJXG4gICAgICog44CQIGxpZ2h0LCBwbGFpbiDjgJFcbiAgICAgKi9cbiAgICBhdXRvRWZmZWN0czoge1xuICAgICAgdHlwZTogQXJyYXlcbiAgICB9LFxuICAgIC8qKlxuICAgICAqIOaYvuekuuexu+Wei++8muOAkHRleHQsIHRhZ+OAkVxuICAgICAqL1xuICAgIHR5cGU6IHtcbiAgICAgIGRlZmF1bHQ6IFwidGFnXCJcbiAgICB9LFxuICAgIC8qKlxuICAgICAqIOWAvOeahOexu+Wei++8jOOAkCB2YWx1ZSB8IG9iamVjdOOAkVxuICAgICAqL1xuICAgIHZhbHVlVHlwZToge1xuICAgICAgdHlwZTogU3RyaW5nXG4gICAgfSxcbiAgICAvKipcbiAgICAgKiDlvZN2YWx1ZeWAvOS4jeWcqOWtl+WFuOS4reaXtum7mOiupOaYvuekuueahOaWh+acrFxuICAgICAqL1xuICAgIGRlZmF1bHRMYWJlbDoge30sXG5cbiAgICAvKipcbiAgICAgKiBsYWJlbOiHquWumuS5iXJlbmRlclxuICAgICAqL1xuICAgIGxhYmVsRm9ybWF0dGVyOiB7XG4gICAgICB0eXBlOiBGdW5jdGlvblxuICAgIH0sXG4gICAgLyoqXG4gICAgICog6Ieq5a6a5LmJ6YCJ6aG5cmVuZGVyXG4gICAgICovXG4gICAgaXRlbVJlbmRlcjoge1xuICAgICAgdHlwZTogRnVuY3Rpb25cbiAgICB9LFxuXG4gICAgY2xvc2FibGU6IHtcbiAgICAgIHR5cGU6IEJvb2xlYW4sXG4gICAgICBkZWZhdWx0OiBmYWxzZVxuICAgIH1cbiAgfSxcbiAgZW1pdHM6IFtcImNsaWNrXCIsIFwiZGljdC1jaGFuZ2VcIiwgXCJjbG9zZVwiLCBcInVwZGF0ZTptb2RlbFZhbHVlXCJdLFxuICBzZXR1cChwcm9wczogYW55LCBjdHg6IGFueSkge1xuICAgIC8vIHRyYWNlLnRyYWNlKFwidmFsdWVzLWZvcm1hdFwiKTtcbiAgICAvLyBjb25zb2xlLmxvZyhcInZhbHVlcy1mb3JtYXQgaW5pdFwiLCBwcm9wcy5tb2RlbFZhbHVlKTtcbiAgICAvL2NvbnN0IGRpY3QgPSB1c2VEaWN0KHByb3BzLCBjdHgpO1xuICAgIGNvbnN0IHsgdWkgfSA9IHVzZVVpKCk7XG4gICAgY29uc3QgQ09MT1JfTElTVCA9IHVpLnRhZy5jb2xvcnM7XG4gICAgY29uc3QgRUZGRUNUX0xJU1QgPSBbXCJwbGFpblwiLCBcImxpZ2h0XCJdO1xuXG4gICAgY29uc3QgdXNlZERpY3QgPSB1c2VEaWN0KHByb3BzLCBjdHgpO1xuICAgIGNvbnN0IHsgZ2V0Q29sb3IsIGdldFZhbHVlLCByZW1vdmVQcm9wVmFsdWUgfSA9IHVzZWREaWN0O1xuICAgIHVzZWREaWN0LndhdGNoVmFsdWUoKTtcbiAgICBmdW5jdGlvbiBzZXRDb2xvcihwcm9wczogYW55LCBpdGVtOiBhbnkpIHtcbiAgICAgIGlmICghaXRlbS5lZmZlY3QgJiYgcHJvcHMuZWZmZWN0KSB7XG4gICAgICAgIGl0ZW0uZWZmZWN0ID0gcHJvcHMuZWZmZWN0O1xuICAgICAgfVxuICAgICAgY29uc3QgdHlwZUtleSA9IHVpLnRhZy50eXBlO1xuICAgICAgY29uc3QgY29sb3IgPSBnZXRDb2xvcihpdGVtKTtcbiAgICAgIGlmIChjb2xvciAhPSBudWxsKSB7XG4gICAgICAgIC8v5aaC5p6c5bey57uP6YWN572u5LqGY29sb3JcbiAgICAgICAgaWYgKHR5cGVvZiBjb2xvciAhPSBcInN0cmluZ1wiKSB7XG4gICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG4gICAgICAgIC8v5bCG5Y6f5pyJ55qEY29sb3LlrZfmrrXliKDmjonvvIzpgb/lhY1uYWl2ZSBjb2xvcuaKpemUmVxuICAgICAgICByZW1vdmVQcm9wVmFsdWUoaXRlbSwgXCJjb2xvclwiKTtcbiAgICAgICAgaXRlbVt0eXBlS2V5XSA9IGNvbG9yO1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG4gICAgICBpZiAocHJvcHMuY29sb3IgPT09IFwiYXV0b1wiKSB7XG4gICAgICAgIGNvbnN0IGhhc2hjb2RlID0gZ2V0SGFzaENvZGUoZ2V0VmFsdWUoaXRlbSkpO1xuICAgICAgICBjb25zdCBjb2xvcnMgPSBwcm9wcy5hdXRvQ29sb3JzID8gcHJvcHMuYXV0b0NvbG9ycyA6IENPTE9SX0xJU1Q7XG4gICAgICAgIGl0ZW1bdHlwZUtleV0gPSBjb2xvcnNbaGFzaGNvZGUgJSBjb2xvcnMubGVuZ3RoXTtcbiAgICAgICAgY29uc3QgZWZmZWN0cyA9IHByb3BzLmF1dG9FZmZlY3RzID8gcHJvcHMuYXV0b0VmZmVjdHMgOiBFRkZFQ1RfTElTVDtcbiAgICAgICAgaXRlbS5lZmZlY3QgPSBlZmZlY3RzW01hdGguZmxvb3IoaGFzaGNvZGUgLyBjb2xvcnMubGVuZ3RoKSAlIGVmZmVjdHMubGVuZ3RoXTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGl0ZW1bdHlwZUtleV0gPSBwcm9wcy5jb2xvcjtcbiAgICAgIH1cbiAgICB9XG5cbiAgICBjb25zdCBjb21wdXRlZFZhbHVlSXRlbXM6IFJlZjxhbnlbXT4gPSBjb21wdXRlZCgoKSA9PiB7XG4gICAgICBpZiAocHJvcHMudmFsdWVUeXBlID09PSBcIm9iamVjdFwiKSB7XG4gICAgICAgIGlmIChwcm9wcy5tb2RlbFZhbHVlICYmICFBcnJheS5pc0FycmF5KHByb3BzLm1vZGVsVmFsdWUpKSB7XG4gICAgICAgICAgcmV0dXJuIFtwcm9wcy5tb2RlbFZhbHVlXTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gcHJvcHMubW9kZWxWYWx1ZTtcbiAgICAgIH1cblxuICAgICAgY29uc3QgZGljdCA9IHVzZWREaWN0LmdldERpY3QoKTtcbiAgICAgIGlmIChwcm9wcy5tb2RlbFZhbHVlID09IG51bGwgfHwgcHJvcHMubW9kZWxWYWx1ZSA9PT0gXCJcIikge1xuICAgICAgICByZXR1cm4gW107XG4gICAgICB9XG4gICAgICBjb25zdCB2YWx1ZUFyciA9IGJ1aWxkQXJyYXlWYWx1ZShwcm9wcyk7XG5cbiAgICAgIGxldCBvcHRpb25zID0gW107XG5cbiAgICAgIGNvbnN0IHZhbHVlUHJvcCA9IHByb3BzLmRpY3Q/LnZhbHVlIHx8IFwidmFsdWVcIjtcbiAgICAgIGNvbnN0IGxhYmVsUHJvcCA9IHByb3BzLmRpY3Q/LmxhYmVsIHx8IFwibGFiZWxcIjtcblxuICAgICAgaWYgKGRpY3QpIHtcbiAgICAgICAgb3B0aW9ucyA9IGRpY3QuZ2V0Tm9kZXNGcm9tRGF0YU1hcCh2YWx1ZUFycik7XG4gICAgICAgIC8v6K6+572u6buY6K6kbGFiZWxcbiAgICAgICAgXy5mb3JFYWNoKG9wdGlvbnMsIChpdGVtKSA9PiB7XG4gICAgICAgICAgaWYgKGl0ZW1bbGFiZWxQcm9wXSA9PSBudWxsKSB7XG4gICAgICAgICAgICBpdGVtW2xhYmVsUHJvcF0gPSBwcm9wcy5kZWZhdWx0TGFiZWwgfHwgaXRlbVt2YWx1ZVByb3BdO1xuICAgICAgICAgIH1cbiAgICAgICAgfSk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBvcHRpb25zID0gW107XG4gICAgICAgIF8uZm9yRWFjaCh2YWx1ZUFyciwgKGl0ZW0pID0+IHtcbiAgICAgICAgICBpZiAoaXRlbSBpbnN0YW5jZW9mIE9iamVjdCkge1xuICAgICAgICAgICAgb3B0aW9ucy5wdXNoKGl0ZW0pO1xuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBvcHRpb25zLnB1c2goe1xuICAgICAgICAgICAgICBbdmFsdWVQcm9wXTogaXRlbSxcbiAgICAgICAgICAgICAgW2xhYmVsUHJvcF06IGl0ZW1cbiAgICAgICAgICAgIH0pO1xuICAgICAgICAgIH1cbiAgICAgICAgfSk7XG4gICAgICB9XG5cbiAgICAgIGNvbnN0IGNvbG9yZnVsT3B0aW9uczogYW55ID0gW107XG4gICAgICBfLmZvckVhY2gob3B0aW9ucywgKGl0ZW0pID0+IHtcbiAgICAgICAgY29sb3JmdWxPcHRpb25zLnB1c2goXy5vbWl0KGl0ZW0sIFwiY2hpbGRyZW5cIikpO1xuICAgICAgfSk7XG4gICAgICBfLmZvckVhY2goY29sb3JmdWxPcHRpb25zLCAoaXRlbSkgPT4ge1xuICAgICAgICBzZXRDb2xvcihwcm9wcywgaXRlbSk7XG4gICAgICB9KTtcbiAgICAgIHJldHVybiBjb2xvcmZ1bE9wdGlvbnM7XG4gICAgfSk7XG5cbiAgICBmdW5jdGlvbiBkb0NsaWNrKGl0ZW06IGFueSkge1xuICAgICAgY3R4LmVtaXQoXCJjbGlja1wiLCB7IGl0ZW06IGl0ZW0gfSk7XG4gICAgfVxuICAgIGZ1bmN0aW9uIGRvQ2xvc2UoaW5kZXg6IG51bWJlciwgaXRlbTogYW55KSB7XG4gICAgICBjdHguZW1pdChcImNsb3NlXCIsIHsgaXRlbSwgaW5kZXggfSk7XG4gICAgICBjb25zdCBuZXdWYWx1ZXM6IGFueVtdID0gW107XG4gICAgICBmb3IgKGxldCBpID0gMDsgaSA8IGNvbXB1dGVkVmFsdWVJdGVtcy52YWx1ZS5sZW5ndGg7IGkrKykge1xuICAgICAgICBpZiAoaSAhPT0gaW5kZXgpIHtcbiAgICAgICAgICBuZXdWYWx1ZXMucHVzaChnZXRWYWx1ZShjb21wdXRlZFZhbHVlSXRlbXMudmFsdWVbaV0pKTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgY3R4LmVtaXQoXCJ1cGRhdGU6bW9kZWxWYWx1ZVwiLCBuZXdWYWx1ZXMpO1xuICAgIH1cblxuICAgIHJldHVybiB7XG4gICAgICB1aSxcbiAgICAgIC4uLnVzZWREaWN0LFxuICAgICAgZG9DbGljayxcbiAgICAgIGNvbXB1dGVkVmFsdWVJdGVtcyxcbiAgICAgIGRvQ2xvc2VcbiAgICB9O1xuICB9XG59KTtcbjwvc2NyaXB0PlxuPHN0eWxlIGxhbmc9XCJsZXNzXCI+XG4uZnMtdmFsdWVzLWZvcm1hdCAuZnMtdGFnIHtcbiAgbWFyZ2luOiAycHg7XG4gIGN1cnNvcjogcG9pbnRlcjtcbiAgLmZzLXRhZy1pY29uIHtcbiAgfVxufVxuPC9zdHlsZT5cbiIsIjx0ZW1wbGF0ZT5cbiAgPHNwYW4gY2xhc3M9XCJmcy12YWx1ZXMtZm9ybWF0XCI+XG4gICAgPHRlbXBsYXRlIHYtaWY9XCJpdGVtUmVuZGVyXCI+XG4gICAgICA8ZnMtcmVuZGVyIHYtZm9yPVwiaXRlbSBpbiBjb21wdXRlZFZhbHVlSXRlbXNcIiA6a2V5PVwiZ2V0VmFsdWUoaXRlbSlcIiA6cmVuZGVyLWZ1bmM9XCJpdGVtUmVuZGVyXCIgOnNjb3BlPVwiaXRlbVwiIC8+XG4gICAgPC90ZW1wbGF0ZT5cbiAgICA8dGVtcGxhdGUgdi1lbHNlLWlmPVwidHlwZSA9PT0gJ3RleHQnXCI+XG4gICAgICA8c3BhbiB2LWZvcj1cIml0ZW0gaW4gY29tcHV0ZWRWYWx1ZUl0ZW1zXCIgOmtleT1cImdldFZhbHVlKGl0ZW0pXCIgQGNsaWNrPVwiZG9DbGljayhpdGVtKVwiPnt7IGdldExhYmVsKGl0ZW0pIH19PC9zcGFuPlxuICAgIDwvdGVtcGxhdGU+XG4gICAgPHRlbXBsYXRlIHYtZWxzZT5cbiAgICAgIDx0ZW1wbGF0ZSB2LWZvcj1cIihpdGVtLCBpbmRleCkgaW4gY29tcHV0ZWRWYWx1ZUl0ZW1zXCIgOmtleT1cImdldFZhbHVlKGl0ZW0pXCI+XG4gICAgICAgIDxjb21wb25lbnRcbiAgICAgICAgICA6aXM9XCJ1aS50YWcubmFtZVwiXG4gICAgICAgICAgY2xhc3M9XCJmcy10YWdcIlxuICAgICAgICAgIHNpemU9XCJzbWFsbFwiXG4gICAgICAgICAgOmNsb3NhYmxlPVwiY2xvc2FibGVcIlxuICAgICAgICAgIHYtYmluZD1cIml0ZW1cIlxuICAgICAgICAgIDppY29uPVwibnVsbFwiXG4gICAgICAgICAgOm5hbWU9XCJudWxsXCJcbiAgICAgICAgICBAY2xvc2U9XCJkb0Nsb3NlKGluZGV4LCBpdGVtKVwiXG4gICAgICAgICAgQGNsaWNrPVwiZG9DbGljayhpdGVtKVwiXG4gICAgICAgID5cbiAgICAgICAgICA8dGVtcGxhdGUgdi1pZj1cIml0ZW0uaWNvblwiPlxuICAgICAgICAgICAgPGZzLWljb24gOmljb249XCJpdGVtLmljb25cIiA6c3Bpbj1cIml0ZW0uaWNvblNwaW5cIiBjbGFzcz1cImZzLXRhZy1pY29uXCIgLz5cbiAgICAgICAgICA8L3RlbXBsYXRlPlxuICAgICAgICAgIHt7IGdldExhYmVsKGl0ZW0pIH19XG4gICAgICAgIDwvY29tcG9uZW50PlxuICAgICAgPC90ZW1wbGF0ZT5cbiAgICA8L3RlbXBsYXRlPlxuICA8L3NwYW4+XG48L3RlbXBsYXRlPlxuXG48c2NyaXB0IGxhbmc9XCJ0c1wiPlxuaW1wb3J0IF8gZnJvbSBcImxvZGFzaC1lc1wiO1xuaW1wb3J0IHsgY29tcHV0ZWQsIGRlZmluZUNvbXBvbmVudCwgUmVmIH0gZnJvbSBcInZ1ZVwiO1xuaW1wb3J0IHsgdXNlRGljdCB9IGZyb20gXCIuLi8uLi91c2UvdXNlLWRpY3RcIjtcbmltcG9ydCB7IHVzZVVpIH0gZnJvbSBcIi4uLy4uL3VzZVwiO1xuZnVuY3Rpb24gZ2V0SGFzaENvZGUoc3RyOiBzdHJpbmcpIHtcbiAgaWYgKHN0ciA9PSBudWxsKSB7XG4gICAgcmV0dXJuIDA7XG4gIH1cbiAgaWYgKHR5cGVvZiBzdHIgIT09IFwic3RyaW5nXCIpIHtcbiAgICBzdHIgPSBKU09OLnN0cmluZ2lmeShzdHIpO1xuICB9XG4gIGxldCBoYXNoID0gMDtcbiAgbGV0IGk7XG4gIGxldCBjaHI7XG4gIGxldCBsZW47XG4gIGlmIChzdHIubGVuZ3RoID09PSAwKSByZXR1cm4gaGFzaDtcbiAgZm9yIChpID0gMCwgbGVuID0gc3RyLmxlbmd0aDsgaSA8IGxlbjsgaSsrKSB7XG4gICAgY2hyID0gc3RyLmNoYXJDb2RlQXQoaSk7XG4gICAgaGFzaCA9IChoYXNoIDw8IDUpIC0gaGFzaCArIGNocjtcbiAgICBoYXNoIHw9IDA7IC8vIENvbnZlcnQgdG8gMzJiaXQgaW50ZWdlclxuICB9XG4gIHJldHVybiBoYXNoO1xufVxuXG5mdW5jdGlvbiBidWlsZEFycmF5VmFsdWUocHJvcHM6IGFueSkge1xuICBsZXQgdmFsdWVBcnIgPSBbXTtcbiAgaWYgKHR5cGVvZiBwcm9wcy5tb2RlbFZhbHVlID09PSBcInN0cmluZ1wiICYmIHByb3BzLm11bHRpcGxlICYmIHByb3BzLnNlcGFyYXRvciAhPSBudWxsICYmIHByb3BzLnNlcGFyYXRvciAhPT0gXCJcIikge1xuICAgIHZhbHVlQXJyID0gcHJvcHMubW9kZWxWYWx1ZS5zcGxpdChwcm9wcy5zZXBhcmF0b3IpO1xuICB9IGVsc2UgaWYgKHByb3BzLm1vZGVsVmFsdWUgaW5zdGFuY2VvZiBBcnJheSkge1xuICAgIC8vIOacrOadpeWwseaYr+aVsOe7hOeahFxuICAgIHZhbHVlQXJyID0gcHJvcHMubW9kZWxWYWx1ZTtcbiAgfSBlbHNlIHtcbiAgICB2YWx1ZUFyciA9IFtwcm9wcy5tb2RlbFZhbHVlXTtcbiAgfVxuICByZXR1cm4gdmFsdWVBcnI7XG59XG5cbi8qKlxuICogdmFsdWXmoLzlvI/ljJblsZXnpLrnu4Tku7ZcbiAqL1xuZXhwb3J0IGRlZmF1bHQgZGVmaW5lQ29tcG9uZW50KHtcbiAgbmFtZTogXCJGc1ZhbHVlc0Zvcm1hdFwiLFxuICBwcm9wczoge1xuICAgIC8qKlxuICAgICAqIOWAvFxuICAgICAqL1xuICAgIG1vZGVsVmFsdWU6IHt9LFxuICAgIC8qKlxuICAgICAqIOWtl+WFuOmFjee9rlxuICAgICAqL1xuICAgIGRpY3Q6IHt9LFxuICAgIC8qKlxuICAgICAqIOaYr+WQpuWkmumAiVxuICAgICAqL1xuICAgIG11bHRpcGxlOiB7IGRlZmF1bHQ6IHRydWUgfSxcbiAgICAvKipcbiAgICAgKiDliIbpmpTnrKY8YnIvPlxuICAgICAqIOWkmumAieaXtu+8jOWmguaenHZhbHVl5Li6c3RyaW5n77yM5YiZ5Lul6K+l5YiG6ZqU56ym5YiG5Ymy5oiQ5aSa5Liq5bGV56S6PGJyLz5cbiAgICAgKiDkvKDlhaXnqbrlrZfnrKbkuLLvvIzooajnpLrkuI3liIblibI8YnIvPlxuICAgICAqL1xuICAgIHNlcGFyYXRvcjogeyBkZWZhdWx0OiBcIixcIiB9LFxuXG4gICAgLyoqXG4gICAgICog6aKc6ImyXG4gICAgICogZWxlbWVudD3jgJBhdXRvLCBwcmltYXJ5LCBzdWNjZXNzLCB3YXJuaW5nLCBkYW5nZXIgLGluZm/jgJFcbiAgICAgKiBhbnRkdj3jgJBhdXRvLCBwcmltYXJ5LCBzdWNjZXNzLCBibHVlLHJlZCwuLi7jgJFcbiAgICAgKiDphY3nva5hdXRv77yM5YiZ6Ieq5Yqo5qC55o2udmFsdWXlgLxoYXNoY29kZeWIhumFjeminOiJsuWAvFxuICAgICAqL1xuICAgIGNvbG9yOiB7fSxcbiAgICAvKipcbiAgICAgKiDmlYjmnpzvvIjku4VlbGVtZW5077yJXG4gICAgICoqL1xuICAgIGVmZmVjdDoge30sXG4gICAgLyoqXG4gICAgICog6Ieq5Yqo5p+T6Imy6aKc6Imy5YC85YiX6KGoXG4gICAgICovXG4gICAgYXV0b0NvbG9yczoge1xuICAgICAgdHlwZTogQXJyYXlcbiAgICB9LFxuICAgIC8qKlxuICAgICAqIOiHquWKqOS4u+mimOWIl+ihqO+8iOS7hWVsZW1lbnTvvIlcbiAgICAgKiDjgJAgbGlnaHQsIHBsYWluIOOAkVxuICAgICAqL1xuICAgIGF1dG9FZmZlY3RzOiB7XG4gICAgICB0eXBlOiBBcnJheVxuICAgIH0sXG4gICAgLyoqXG4gICAgICog5pi+56S657G75Z6L77ya44CQdGV4dCwgdGFn44CRXG4gICAgICovXG4gICAgdHlwZToge1xuICAgICAgZGVmYXVsdDogXCJ0YWdcIlxuICAgIH0sXG4gICAgLyoqXG4gICAgICog5YC855qE57G75Z6L77yM44CQIHZhbHVlIHwgb2JqZWN044CRXG4gICAgICovXG4gICAgdmFsdWVUeXBlOiB7XG4gICAgICB0eXBlOiBTdHJpbmdcbiAgICB9LFxuICAgIC8qKlxuICAgICAqIOW9k3ZhbHVl5YC85LiN5Zyo5a2X5YW45Lit5pe26buY6K6k5pi+56S655qE5paH5pysXG4gICAgICovXG4gICAgZGVmYXVsdExhYmVsOiB7fSxcblxuICAgIC8qKlxuICAgICAqIGxhYmVs6Ieq5a6a5LmJcmVuZGVyXG4gICAgICovXG4gICAgbGFiZWxGb3JtYXR0ZXI6IHtcbiAgICAgIHR5cGU6IEZ1bmN0aW9uXG4gICAgfSxcbiAgICAvKipcbiAgICAgKiDoh6rlrprkuYnpgInpoblyZW5kZXJcbiAgICAgKi9cbiAgICBpdGVtUmVuZGVyOiB7XG4gICAgICB0eXBlOiBGdW5jdGlvblxuICAgIH0sXG5cbiAgICBjbG9zYWJsZToge1xuICAgICAgdHlwZTogQm9vbGVhbixcbiAgICAgIGRlZmF1bHQ6IGZhbHNlXG4gICAgfVxuICB9LFxuICBlbWl0czogW1wiY2xpY2tcIiwgXCJkaWN0LWNoYW5nZVwiLCBcImNsb3NlXCIsIFwidXBkYXRlOm1vZGVsVmFsdWVcIl0sXG4gIHNldHVwKHByb3BzOiBhbnksIGN0eDogYW55KSB7XG4gICAgLy8gdHJhY2UudHJhY2UoXCJ2YWx1ZXMtZm9ybWF0XCIpO1xuICAgIC8vIGNvbnNvbGUubG9nKFwidmFsdWVzLWZvcm1hdCBpbml0XCIsIHByb3BzLm1vZGVsVmFsdWUpO1xuICAgIC8vY29uc3QgZGljdCA9IHVzZURpY3QocHJvcHMsIGN0eCk7XG4gICAgY29uc3QgeyB1aSB9ID0gdXNlVWkoKTtcbiAgICBjb25zdCBDT0xPUl9MSVNUID0gdWkudGFnLmNvbG9ycztcbiAgICBjb25zdCBFRkZFQ1RfTElTVCA9IFtcInBsYWluXCIsIFwibGlnaHRcIl07XG5cbiAgICBjb25zdCB1c2VkRGljdCA9IHVzZURpY3QocHJvcHMsIGN0eCk7XG4gICAgY29uc3QgeyBnZXRDb2xvciwgZ2V0VmFsdWUsIHJlbW92ZVByb3BWYWx1ZSB9ID0gdXNlZERpY3Q7XG4gICAgdXNlZERpY3Qud2F0Y2hWYWx1ZSgpO1xuICAgIGZ1bmN0aW9uIHNldENvbG9yKHByb3BzOiBhbnksIGl0ZW06IGFueSkge1xuICAgICAgaWYgKCFpdGVtLmVmZmVjdCAmJiBwcm9wcy5lZmZlY3QpIHtcbiAgICAgICAgaXRlbS5lZmZlY3QgPSBwcm9wcy5lZmZlY3Q7XG4gICAgICB9XG4gICAgICBjb25zdCB0eXBlS2V5ID0gdWkudGFnLnR5cGU7XG4gICAgICBjb25zdCBjb2xvciA9IGdldENvbG9yKGl0ZW0pO1xuICAgICAgaWYgKGNvbG9yICE9IG51bGwpIHtcbiAgICAgICAgLy/lpoLmnpzlt7Lnu4/phY3nva7kuoZjb2xvclxuICAgICAgICBpZiAodHlwZW9mIGNvbG9yICE9IFwic3RyaW5nXCIpIHtcbiAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cbiAgICAgICAgLy/lsIbljp/mnInnmoRjb2xvcuWtl+auteWIoOaOie+8jOmBv+WFjW5haXZlIGNvbG9y5oql6ZSZXG4gICAgICAgIHJlbW92ZVByb3BWYWx1ZShpdGVtLCBcImNvbG9yXCIpO1xuICAgICAgICBpdGVtW3R5cGVLZXldID0gY29sb3I7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cbiAgICAgIGlmIChwcm9wcy5jb2xvciA9PT0gXCJhdXRvXCIpIHtcbiAgICAgICAgY29uc3QgaGFzaGNvZGUgPSBnZXRIYXNoQ29kZShnZXRWYWx1ZShpdGVtKSk7XG4gICAgICAgIGNvbnN0IGNvbG9ycyA9IHByb3BzLmF1dG9Db2xvcnMgPyBwcm9wcy5hdXRvQ29sb3JzIDogQ09MT1JfTElTVDtcbiAgICAgICAgaXRlbVt0eXBlS2V5XSA9IGNvbG9yc1toYXNoY29kZSAlIGNvbG9ycy5sZW5ndGhdO1xuICAgICAgICBjb25zdCBlZmZlY3RzID0gcHJvcHMuYXV0b0VmZmVjdHMgPyBwcm9wcy5hdXRvRWZmZWN0cyA6IEVGRkVDVF9MSVNUO1xuICAgICAgICBpdGVtLmVmZmVjdCA9IGVmZmVjdHNbTWF0aC5mbG9vcihoYXNoY29kZSAvIGNvbG9ycy5sZW5ndGgpICUgZWZmZWN0cy5sZW5ndGhdO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgaXRlbVt0eXBlS2V5XSA9IHByb3BzLmNvbG9yO1xuICAgICAgfVxuICAgIH1cblxuICAgIGNvbnN0IGNvbXB1dGVkVmFsdWVJdGVtczogUmVmPGFueVtdPiA9IGNvbXB1dGVkKCgpID0+IHtcbiAgICAgIGlmIChwcm9wcy52YWx1ZVR5cGUgPT09IFwib2JqZWN0XCIpIHtcbiAgICAgICAgaWYgKHByb3BzLm1vZGVsVmFsdWUgJiYgIUFycmF5LmlzQXJyYXkocHJvcHMubW9kZWxWYWx1ZSkpIHtcbiAgICAgICAgICByZXR1cm4gW3Byb3BzLm1vZGVsVmFsdWVdO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBwcm9wcy5tb2RlbFZhbHVlO1xuICAgICAgfVxuXG4gICAgICBjb25zdCBkaWN0ID0gdXNlZERpY3QuZ2V0RGljdCgpO1xuICAgICAgaWYgKHByb3BzLm1vZGVsVmFsdWUgPT0gbnVsbCB8fCBwcm9wcy5tb2RlbFZhbHVlID09PSBcIlwiKSB7XG4gICAgICAgIHJldHVybiBbXTtcbiAgICAgIH1cbiAgICAgIGNvbnN0IHZhbHVlQXJyID0gYnVpbGRBcnJheVZhbHVlKHByb3BzKTtcblxuICAgICAgbGV0IG9wdGlvbnMgPSBbXTtcblxuICAgICAgY29uc3QgdmFsdWVQcm9wID0gcHJvcHMuZGljdD8udmFsdWUgfHwgXCJ2YWx1ZVwiO1xuICAgICAgY29uc3QgbGFiZWxQcm9wID0gcHJvcHMuZGljdD8ubGFiZWwgfHwgXCJsYWJlbFwiO1xuXG4gICAgICBpZiAoZGljdCkge1xuICAgICAgICBvcHRpb25zID0gZGljdC5nZXROb2Rlc0Zyb21EYXRhTWFwKHZhbHVlQXJyKTtcbiAgICAgICAgLy/orr7nva7pu5jorqRsYWJlbFxuICAgICAgICBfLmZvckVhY2gob3B0aW9ucywgKGl0ZW0pID0+IHtcbiAgICAgICAgICBpZiAoaXRlbVtsYWJlbFByb3BdID09IG51bGwpIHtcbiAgICAgICAgICAgIGl0ZW1bbGFiZWxQcm9wXSA9IHByb3BzLmRlZmF1bHRMYWJlbCB8fCBpdGVtW3ZhbHVlUHJvcF07XG4gICAgICAgICAgfVxuICAgICAgICB9KTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIG9wdGlvbnMgPSBbXTtcbiAgICAgICAgXy5mb3JFYWNoKHZhbHVlQXJyLCAoaXRlbSkgPT4ge1xuICAgICAgICAgIGlmIChpdGVtIGluc3RhbmNlb2YgT2JqZWN0KSB7XG4gICAgICAgICAgICBvcHRpb25zLnB1c2goaXRlbSk7XG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIG9wdGlvbnMucHVzaCh7XG4gICAgICAgICAgICAgIFt2YWx1ZVByb3BdOiBpdGVtLFxuICAgICAgICAgICAgICBbbGFiZWxQcm9wXTogaXRlbVxuICAgICAgICAgICAgfSk7XG4gICAgICAgICAgfVxuICAgICAgICB9KTtcbiAgICAgIH1cblxuICAgICAgY29uc3QgY29sb3JmdWxPcHRpb25zOiBhbnkgPSBbXTtcbiAgICAgIF8uZm9yRWFjaChvcHRpb25zLCAoaXRlbSkgPT4ge1xuICAgICAgICBjb2xvcmZ1bE9wdGlvbnMucHVzaChfLm9taXQoaXRlbSwgXCJjaGlsZHJlblwiKSk7XG4gICAgICB9KTtcbiAgICAgIF8uZm9yRWFjaChjb2xvcmZ1bE9wdGlvbnMsIChpdGVtKSA9PiB7XG4gICAgICAgIHNldENvbG9yKHByb3BzLCBpdGVtKTtcbiAgICAgIH0pO1xuICAgICAgcmV0dXJuIGNvbG9yZnVsT3B0aW9ucztcbiAgICB9KTtcblxuICAgIGZ1bmN0aW9uIGRvQ2xpY2soaXRlbTogYW55KSB7XG4gICAgICBjdHguZW1pdChcImNsaWNrXCIsIHsgaXRlbTogaXRlbSB9KTtcbiAgICB9XG4gICAgZnVuY3Rpb24gZG9DbG9zZShpbmRleDogbnVtYmVyLCBpdGVtOiBhbnkpIHtcbiAgICAgIGN0eC5lbWl0KFwiY2xvc2VcIiwgeyBpdGVtLCBpbmRleCB9KTtcbiAgICAgIGNvbnN0IG5ld1ZhbHVlczogYW55W10gPSBbXTtcbiAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgY29tcHV0ZWRWYWx1ZUl0ZW1zLnZhbHVlLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgIGlmIChpICE9PSBpbmRleCkge1xuICAgICAgICAgIG5ld1ZhbHVlcy5wdXNoKGdldFZhbHVlKGNvbXB1dGVkVmFsdWVJdGVtcy52YWx1ZVtpXSkpO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgICBjdHguZW1pdChcInVwZGF0ZTptb2RlbFZhbHVlXCIsIG5ld1ZhbHVlcyk7XG4gICAgfVxuXG4gICAgcmV0dXJuIHtcbiAgICAgIHVpLFxuICAgICAgLi4udXNlZERpY3QsXG4gICAgICBkb0NsaWNrLFxuICAgICAgY29tcHV0ZWRWYWx1ZUl0ZW1zLFxuICAgICAgZG9DbG9zZVxuICAgIH07XG4gIH1cbn0pO1xuPC9zY3JpcHQ+XG48c3R5bGUgbGFuZz1cImxlc3NcIj5cbi5mcy12YWx1ZXMtZm9ybWF0IC5mcy10YWcge1xuICBtYXJnaW46IDJweDtcbiAgY3Vyc29yOiBwb2ludGVyO1xuICAuZnMtdGFnLWljb24ge1xuICB9XG59XG48L3N0eWxlPlxuIiwiPHRlbXBsYXRlPlxuICA8c3Bhbj5cbiAgICA8dGVtcGxhdGUgdi1pZj1cImNvbXB1dGVkTXVsdGlwbGVcIj5cbiAgICAgIDxkaXYgdi1mb3I9XCIoTGFiZWxzLCBJbmRleCkgaW4gbXVsdGlwbGVMYWJlbHNcIiA6a2V5PVwiSW5kZXhcIj5cbiAgICAgICAgPHNwYW4gdi1mb3I9XCIoaXRlbSwgaW5kZXgpIGluIExhYmVsc1wiIDprZXk9XCJpbmRleFwiPlxuICAgICAgICAgIDxzcGFuIHYtaWY9XCJpbmRleCAhPT0gMFwiPiAvIDwvc3Bhbj5cbiAgICAgICAgICA8c3Bhbj57eyBnZXRMYWJlbChpdGVtKSB9fTwvc3Bhbj5cbiAgICAgICAgPC9zcGFuPlxuICAgICAgPC9kaXY+XG4gICAgPC90ZW1wbGF0ZT5cbiAgICA8dGVtcGxhdGUgdi1lbHNlPlxuICAgICAgPHNwYW4gdi1mb3I9XCIoaXRlbSwgaW5kZXgpIGluIGxhYmVsc1wiIDprZXk9XCJpbmRleFwiPlxuICAgICAgICA8c3BhbiB2LWlmPVwiaW5kZXggIT09IDBcIj4gLyA8L3NwYW4+XG4gICAgICAgIDxzcGFuPnt7IGdldExhYmVsKGl0ZW0pIH19PC9zcGFuPlxuICAgICAgPC9zcGFuPlxuICAgIDwvdGVtcGxhdGU+XG4gIDwvc3Bhbj5cbjwvdGVtcGxhdGU+XG5cbjxzY3JpcHQgbGFuZz1cInRzXCI+XG5pbXBvcnQgeyB1c2VEaWN0IH0gZnJvbSBcIi4uLy4uL3VzZS91c2UtZGljdFwiO1xuaW1wb3J0IHsgY29tcHV0ZWQsIGRlZmluZUNvbXBvbmVudCB9IGZyb20gXCJ2dWVcIjtcbi8qKlxuICog57qn6IGU5pWw5o2u5qC85byP5YyW5bGV56S657uE5Lu2XG4gKi9cbmV4cG9ydCBkZWZhdWx0IGRlZmluZUNvbXBvbmVudCh7XG4gIG5hbWU6IFwiRnNEaWN0Q2FzY2FkZXJGb3JtYXRcIixcbiAgcHJvcHM6IHtcbiAgICAvKipcbiAgICAgKiAgIOWAvDxici8+XG4gICAgICogICDljZXpgInml7YgJzEsMiwzJyDmiJYgWzEsMiwzXTxici8+XG4gICAgICogICDlpJrpgIlbWzEsMiwzXSxbNCw1LDZdXTxici8+XG4gICAgICovXG4gICAgLy8gQHRzLWlnbm9yZVxuICAgIG1vZGVsVmFsdWU6IHtcbiAgICAgIHR5cGU6IFtTdHJpbmcsIEFycmF5XSxcbiAgICAgIGRlZmF1bHQ6IHVuZGVmaW5lZCxcbiAgICAgIHJlcXVpcmU6IHRydWVcbiAgICB9LFxuICAgIC8qKlxuICAgICAqICB2YWx1ZeeahOWIhumalOespjxici8+XG4gICAgICogIOWkmumAieaXtu+8jOWmguaenHZhbHVl5Li6c3RyaW5n77yM5YiZ5Lul6K+l5YiG6ZqU56ym5YiG5Ymy5oiQ5aSa5Liq5bGV56S6PGJyLz5cbiAgICAgKiAg5Lyg5YWl56m65a2X56ym5Liy77yM6KGo56S65LiN5YiG5YmyPGJyLz5cbiAgICAgKi9cbiAgICAvLyBAdHMtaWdub3JlXG4gICAgc2VwYXJhdG9yOiB7IHR5cGU6IFN0cmluZywgZGVmYXVsdDogXCIsXCIsIHJlcXVpcmU6IGZhbHNlIH0sXG4gICAgLyoqXG4gICAgICog5piv5ZCm5aSa6YCJXG4gICAgICovXG4gICAgLy8gQHRzLWlnbm9yZVxuICAgIG11bHRpcGxlOiB7IHR5cGU6IEJvb2xlYW4sIGRlZmF1bHQ6IGZhbHNlIH0sXG4gICAgLyoqXG4gICAgICog5pWw5o2u5a2X5YW4XG4gICAgICovXG4gICAgZGljdDoge1xuICAgICAgdHlwZTogT2JqZWN0LFxuICAgICAgZGVmYXVsdDogdW5kZWZpbmVkLFxuICAgICAgcmVxdWlyZTogZmFsc2VcbiAgICB9XG4gIH0gYXMgYW55LFxuICBlbWl0czogW1wiZGljdC1jaGFuZ2VcIl0sXG4gIHNldHVwKHByb3BzLCBjdHgpIHtcbiAgICBjb25zdCBkaWN0ID0gdXNlRGljdChwcm9wcywgY3R4KTtcbiAgICAvLyBAdHMtaWdub3JlXG4gICAgaWYgKHByb3BzLmRpY3Q/LmdldE5vZGVzQnlWYWx1ZXMpIHtcbiAgICAgIGRpY3Qud2F0Y2hWYWx1ZSgpO1xuICAgIH1cblxuICAgIGNvbnN0IGNvbXB1dGVkTXVsdGlwbGUgPSBjb21wdXRlZCgoKSA9PiB7XG4gICAgICAvLyBAdHMtaWdub3JlXG4gICAgICByZXR1cm4gcHJvcHMubXVsdGlwbGU7XG4gICAgfSk7XG5cbiAgICByZXR1cm4ge1xuICAgICAgLi4uZGljdCxcbiAgICAgIGNvbXB1dGVkTXVsdGlwbGVcbiAgICB9O1xuICB9LFxuICBkYXRhKCkge1xuICAgIHJldHVybiB7fTtcbiAgfSxcbiAgY29tcHV0ZWQ6IHtcbiAgICBsYWJlbHMoKSB7XG4gICAgICAvLyBAdHMtaWdub3JlXG4gICAgICBpZiAodGhpcy5tb2RlbFZhbHVlID09IG51bGwpIHtcbiAgICAgICAgcmV0dXJuIFtdO1xuICAgICAgfVxuICAgICAgLy8gQHRzLWlnbm9yZVxuICAgICAgcmV0dXJuIHRoaXMuYnVpbGRWYWx1ZUl0ZW0odGhpcy5tb2RlbFZhbHVlKTtcbiAgICB9LFxuICAgIG11bHRpcGxlTGFiZWxzKCkge1xuICAgICAgLy8gQHRzLWlnbm9yZVxuICAgICAgaWYgKHRoaXMubW9kZWxWYWx1ZSA9PSBudWxsKSB7XG4gICAgICAgIHJldHVybiBbXTtcbiAgICAgIH1cbiAgICAgIGNvbnN0IGFyciA9IFtdO1xuICAgICAgLy8gQHRzLWlnbm9yZVxuICAgICAgZm9yIChjb25zdCBpdGVtIG9mIHRoaXMubW9kZWxWYWx1ZSkge1xuICAgICAgICAvLyBAdHMtaWdub3JlXG4gICAgICAgIGFyci5wdXNoKHRoaXMuYnVpbGRWYWx1ZUl0ZW0oaXRlbSkpO1xuICAgICAgfVxuICAgICAgcmV0dXJuIGFycjtcbiAgICB9XG4gIH0sXG4gIG1ldGhvZHM6IHtcbiAgICBnZXRWYWx1ZUFycih2YWx1ZXM6IGFueSkge1xuICAgICAgaWYgKHZhbHVlcyA9PSBudWxsKSB7XG4gICAgICAgIC8vIEB0cy1pZ25vcmVcbiAgICAgICAgaWYgKHRoaXMubXVsdGlwbGUpIHtcbiAgICAgICAgICB2YWx1ZXMgPSBbXTtcbiAgICAgICAgICAvLyBAdHMtaWdub3JlXG4gICAgICAgICAgZm9yIChjb25zdCBpdGVtIG9mIHRoaXMubW9kZWxWYWx1ZSkge1xuICAgICAgICAgICAgZm9yIChjb25zdCBzdWIgb2YgaXRlbSkge1xuICAgICAgICAgICAgICB2YWx1ZXMucHVzaChzdWIpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH1cbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAvLyBAdHMtaWdub3JlXG4gICAgICAgICAgdmFsdWVzID0gdGhpcy5tb2RlbFZhbHVlO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgICBpZiAodmFsdWVzID09IG51bGwpIHtcbiAgICAgICAgcmV0dXJuIFtdO1xuICAgICAgfVxuICAgICAgbGV0IGFyciA9IG51bGw7XG4gICAgICAvLyBAdHMtaWdub3JlXG4gICAgICBpZiAodHlwZW9mIHZhbHVlcyA9PT0gXCJzdHJpbmdcIiAmJiAhdGhpcy5tdWx0aXBsZSAmJiB0aGlzLnNlcGFyYXRvciAhPSBudWxsICYmIHRoaXMuc2VwYXJhdG9yICE9PSBcIlwiKSB7XG4gICAgICAgIC8vIEB0cy1pZ25vcmVcbiAgICAgICAgYXJyID0gdmFsdWVzLnNwbGl0KHRoaXMuc2VwYXJhdG9yKTtcbiAgICAgIH0gZWxzZSBpZiAodmFsdWVzIGluc3RhbmNlb2YgQXJyYXkpIHtcbiAgICAgICAgYXJyID0gdmFsdWVzO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgYXJyID0gW3ZhbHVlc107XG4gICAgICB9XG4gICAgICByZXR1cm4gYXJyO1xuICAgIH0sXG4gICAgYnVpbGRWYWx1ZUl0ZW0odmFsdWVzOiBhbnkpIHtcbiAgICAgIC8vIEB0cy1pZ25vcmVcbiAgICAgIGNvbnN0IGFyciA9IHRoaXMuZ2V0VmFsdWVBcnIodmFsdWVzKTtcblxuICAgICAgLy8gQHRzLWlnbm9yZVxuICAgICAgY29uc3QgZGljdCA9IHRoaXMuZ2V0RGljdCgpO1xuICAgICAgaWYgKGRpY3QpIHtcbiAgICAgICAgcmV0dXJuIGRpY3QuZ2V0Tm9kZXNGcm9tRGF0YU1hcChhcnIpO1xuICAgICAgfVxuICAgIH1cbiAgfVxufSk7XG48L3NjcmlwdD5cbiIsIjx0ZW1wbGF0ZT5cbiAgPHNwYW4+XG4gICAgPHRlbXBsYXRlIHYtaWY9XCJjb21wdXRlZE11bHRpcGxlXCI+XG4gICAgICA8ZGl2IHYtZm9yPVwiKExhYmVscywgSW5kZXgpIGluIG11bHRpcGxlTGFiZWxzXCIgOmtleT1cIkluZGV4XCI+XG4gICAgICAgIDxzcGFuIHYtZm9yPVwiKGl0ZW0sIGluZGV4KSBpbiBMYWJlbHNcIiA6a2V5PVwiaW5kZXhcIj5cbiAgICAgICAgICA8c3BhbiB2LWlmPVwiaW5kZXggIT09IDBcIj4gLyA8L3NwYW4+XG4gICAgICAgICAgPHNwYW4+e3sgZ2V0TGFiZWwoaXRlbSkgfX08L3NwYW4+XG4gICAgICAgIDwvc3Bhbj5cbiAgICAgIDwvZGl2PlxuICAgIDwvdGVtcGxhdGU+XG4gICAgPHRlbXBsYXRlIHYtZWxzZT5cbiAgICAgIDxzcGFuIHYtZm9yPVwiKGl0ZW0sIGluZGV4KSBpbiBsYWJlbHNcIiA6a2V5PVwiaW5kZXhcIj5cbiAgICAgICAgPHNwYW4gdi1pZj1cImluZGV4ICE9PSAwXCI+IC8gPC9zcGFuPlxuICAgICAgICA8c3Bhbj57eyBnZXRMYWJlbChpdGVtKSB9fTwvc3Bhbj5cbiAgICAgIDwvc3Bhbj5cbiAgICA8L3RlbXBsYXRlPlxuICA8L3NwYW4+XG48L3RlbXBsYXRlPlxuXG48c2NyaXB0IGxhbmc9XCJ0c1wiPlxuaW1wb3J0IHsgdXNlRGljdCB9IGZyb20gXCIuLi8uLi91c2UvdXNlLWRpY3RcIjtcbmltcG9ydCB7IGNvbXB1dGVkLCBkZWZpbmVDb21wb25lbnQgfSBmcm9tIFwidnVlXCI7XG4vKipcbiAqIOe6p+iBlOaVsOaNruagvOW8j+WMluWxleekuue7hOS7tlxuICovXG5leHBvcnQgZGVmYXVsdCBkZWZpbmVDb21wb25lbnQoe1xuICBuYW1lOiBcIkZzRGljdENhc2NhZGVyRm9ybWF0XCIsXG4gIHByb3BzOiB7XG4gICAgLyoqXG4gICAgICogICDlgLw8YnIvPlxuICAgICAqICAg5Y2V6YCJ5pe2ICcxLDIsMycg5oiWIFsxLDIsM108YnIvPlxuICAgICAqICAg5aSa6YCJW1sxLDIsM10sWzQsNSw2XV08YnIvPlxuICAgICAqL1xuICAgIC8vIEB0cy1pZ25vcmVcbiAgICBtb2RlbFZhbHVlOiB7XG4gICAgICB0eXBlOiBbU3RyaW5nLCBBcnJheV0sXG4gICAgICBkZWZhdWx0OiB1bmRlZmluZWQsXG4gICAgICByZXF1aXJlOiB0cnVlXG4gICAgfSxcbiAgICAvKipcbiAgICAgKiAgdmFsdWXnmoTliIbpmpTnrKY8YnIvPlxuICAgICAqICDlpJrpgInml7bvvIzlpoLmnpx2YWx1ZeS4unN0cmluZ++8jOWImeS7peivpeWIhumalOespuWIhuWJsuaIkOWkmuS4quWxleekujxici8+XG4gICAgICogIOS8oOWFpeepuuWtl+espuS4su+8jOihqOekuuS4jeWIhuWJsjxici8+XG4gICAgICovXG4gICAgLy8gQHRzLWlnbm9yZVxuICAgIHNlcGFyYXRvcjogeyB0eXBlOiBTdHJpbmcsIGRlZmF1bHQ6IFwiLFwiLCByZXF1aXJlOiBmYWxzZSB9LFxuICAgIC8qKlxuICAgICAqIOaYr+WQpuWkmumAiVxuICAgICAqL1xuICAgIC8vIEB0cy1pZ25vcmVcbiAgICBtdWx0aXBsZTogeyB0eXBlOiBCb29sZWFuLCBkZWZhdWx0OiBmYWxzZSB9LFxuICAgIC8qKlxuICAgICAqIOaVsOaNruWtl+WFuFxuICAgICAqL1xuICAgIGRpY3Q6IHtcbiAgICAgIHR5cGU6IE9iamVjdCxcbiAgICAgIGRlZmF1bHQ6IHVuZGVmaW5lZCxcbiAgICAgIHJlcXVpcmU6IGZhbHNlXG4gICAgfVxuICB9IGFzIGFueSxcbiAgZW1pdHM6IFtcImRpY3QtY2hhbmdlXCJdLFxuICBzZXR1cChwcm9wcywgY3R4KSB7XG4gICAgY29uc3QgZGljdCA9IHVzZURpY3QocHJvcHMsIGN0eCk7XG4gICAgLy8gQHRzLWlnbm9yZVxuICAgIGlmIChwcm9wcy5kaWN0Py5nZXROb2Rlc0J5VmFsdWVzKSB7XG4gICAgICBkaWN0LndhdGNoVmFsdWUoKTtcbiAgICB9XG5cbiAgICBjb25zdCBjb21wdXRlZE11bHRpcGxlID0gY29tcHV0ZWQoKCkgPT4ge1xuICAgICAgLy8gQHRzLWlnbm9yZVxuICAgICAgcmV0dXJuIHByb3BzLm11bHRpcGxlO1xuICAgIH0pO1xuXG4gICAgcmV0dXJuIHtcbiAgICAgIC4uLmRpY3QsXG4gICAgICBjb21wdXRlZE11bHRpcGxlXG4gICAgfTtcbiAgfSxcbiAgZGF0YSgpIHtcbiAgICByZXR1cm4ge307XG4gIH0sXG4gIGNvbXB1dGVkOiB7XG4gICAgbGFiZWxzKCkge1xuICAgICAgLy8gQHRzLWlnbm9yZVxuICAgICAgaWYgKHRoaXMubW9kZWxWYWx1ZSA9PSBudWxsKSB7XG4gICAgICAgIHJldHVybiBbXTtcbiAgICAgIH1cbiAgICAgIC8vIEB0cy1pZ25vcmVcbiAgICAgIHJldHVybiB0aGlzLmJ1aWxkVmFsdWVJdGVtKHRoaXMubW9kZWxWYWx1ZSk7XG4gICAgfSxcbiAgICBtdWx0aXBsZUxhYmVscygpIHtcbiAgICAgIC8vIEB0cy1pZ25vcmVcbiAgICAgIGlmICh0aGlzLm1vZGVsVmFsdWUgPT0gbnVsbCkge1xuICAgICAgICByZXR1cm4gW107XG4gICAgICB9XG4gICAgICBjb25zdCBhcnIgPSBbXTtcbiAgICAgIC8vIEB0cy1pZ25vcmVcbiAgICAgIGZvciAoY29uc3QgaXRlbSBvZiB0aGlzLm1vZGVsVmFsdWUpIHtcbiAgICAgICAgLy8gQHRzLWlnbm9yZVxuICAgICAgICBhcnIucHVzaCh0aGlzLmJ1aWxkVmFsdWVJdGVtKGl0ZW0pKTtcbiAgICAgIH1cbiAgICAgIHJldHVybiBhcnI7XG4gICAgfVxuICB9LFxuICBtZXRob2RzOiB7XG4gICAgZ2V0VmFsdWVBcnIodmFsdWVzOiBhbnkpIHtcbiAgICAgIGlmICh2YWx1ZXMgPT0gbnVsbCkge1xuICAgICAgICAvLyBAdHMtaWdub3JlXG4gICAgICAgIGlmICh0aGlzLm11bHRpcGxlKSB7XG4gICAgICAgICAgdmFsdWVzID0gW107XG4gICAgICAgICAgLy8gQHRzLWlnbm9yZVxuICAgICAgICAgIGZvciAoY29uc3QgaXRlbSBvZiB0aGlzLm1vZGVsVmFsdWUpIHtcbiAgICAgICAgICAgIGZvciAoY29uc3Qgc3ViIG9mIGl0ZW0pIHtcbiAgICAgICAgICAgICAgdmFsdWVzLnB1c2goc3ViKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgLy8gQHRzLWlnbm9yZVxuICAgICAgICAgIHZhbHVlcyA9IHRoaXMubW9kZWxWYWx1ZTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgaWYgKHZhbHVlcyA9PSBudWxsKSB7XG4gICAgICAgIHJldHVybiBbXTtcbiAgICAgIH1cbiAgICAgIGxldCBhcnIgPSBudWxsO1xuICAgICAgLy8gQHRzLWlnbm9yZVxuICAgICAgaWYgKHR5cGVvZiB2YWx1ZXMgPT09IFwic3RyaW5nXCIgJiYgIXRoaXMubXVsdGlwbGUgJiYgdGhpcy5zZXBhcmF0b3IgIT0gbnVsbCAmJiB0aGlzLnNlcGFyYXRvciAhPT0gXCJcIikge1xuICAgICAgICAvLyBAdHMtaWdub3JlXG4gICAgICAgIGFyciA9IHZhbHVlcy5zcGxpdCh0aGlzLnNlcGFyYXRvcik7XG4gICAgICB9IGVsc2UgaWYgKHZhbHVlcyBpbnN0YW5jZW9mIEFycmF5KSB7XG4gICAgICAgIGFyciA9IHZhbHVlcztcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGFyciA9IFt2YWx1ZXNdO1xuICAgICAgfVxuICAgICAgcmV0dXJuIGFycjtcbiAgICB9LFxuICAgIGJ1aWxkVmFsdWVJdGVtKHZhbHVlczogYW55KSB7XG4gICAgICAvLyBAdHMtaWdub3JlXG4gICAgICBjb25zdCBhcnIgPSB0aGlzLmdldFZhbHVlQXJyKHZhbHVlcyk7XG5cbiAgICAgIC8vIEB0cy1pZ25vcmVcbiAgICAgIGNvbnN0IGRpY3QgPSB0aGlzLmdldERpY3QoKTtcbiAgICAgIGlmIChkaWN0KSB7XG4gICAgICAgIHJldHVybiBkaWN0LmdldE5vZGVzRnJvbURhdGFNYXAoYXJyKTtcbiAgICAgIH1cbiAgICB9XG4gIH1cbn0pO1xuPC9zY3JpcHQ+XG4iLCI8dGVtcGxhdGU+XG4gIDxjb21wb25lbnRcbiAgICA6aXM9XCJ1aS5jYXNjYWRlci5uYW1lXCJcbiAgICByZWY9XCJjYXNjYWRlclJlZlwiXG4gICAgOm9wdGlvbnM9XCJjb21wdXRlZE9wdGlvbnNcIlxuICAgIHYtYmluZD1cImZpZWxkTmFtZXNCaW5kZXJcIlxuICAgIEBjaGFuZ2U9XCJvblNlbGVjdENoYW5nZVwiXG4gIC8+XG48L3RlbXBsYXRlPlxuPHNjcmlwdCBsYW5nPVwidHNcIj5cbmltcG9ydCB7IHVzZURpY3QgfSBmcm9tIFwiLi4vLi4vdXNlL3VzZS1kaWN0XCI7XG5pbXBvcnQgeyB1c2VVaSB9IGZyb20gXCIuLi8uLi91c2VcIjtcbmltcG9ydCB7IGRlZmluZUNvbXBvbmVudCwgcmVmIH0gZnJvbSBcInZ1ZVwiO1xuLyoqXG4gKiDlrZflhbjnuqfogZTnu4Tku7ZcbiAqIOaUr+aMgWVsLWNhc2NhZGVyfGEtY2FzY2FkZXLnu4Tku7bnmoTlj4LmlbBcbiAqL1xuZXhwb3J0IGRlZmF1bHQgZGVmaW5lQ29tcG9uZW50KHtcbiAgbmFtZTogXCJGc0RpY3RDYXNjYWRlclwiLFxuICBwcm9wczoge1xuICAgIC8qKlxuICAgICAqIOWtl+WFuOmFjee9rlxuICAgICAqL1xuICAgIGRpY3Q6IHt9LFxuICAgIC8qKlxuICAgICAqIOmAiemhue+8jOavlGRpY3QuZGF0YeS8mOWFiOe6p+mrmFxuICAgICAqL1xuICAgIG9wdGlvbnM6IHsgdHlwZTogQXJyYXkgfSxcbiAgICAvKipcbiAgICAgKiDovazmjaJEaWN0RGF0YVxuICAgICAqL1xuICAgIHRyYW5zZm9ybURpY3REYXRhOiB7XG4gICAgICB0eXBlOiBGdW5jdGlvbixcbiAgICAgIGRlZmF1bHQ6IHVuZGVmaW5lZFxuICAgIH1cbiAgfSxcbiAgZW1pdHM6IFtcbiAgICAvKipcbiAgICAgKiDlrZflhbjmlbDmja7lj5jljJbkuovku7ZcbiAgICAgKi9cbiAgICBcImRpY3QtY2hhbmdlXCIsXG5cbiAgICAvKipcbiAgICAgKiDpgInkuK3lgLzlj5jljJbkuovku7bvvIzlj6/ku6Xojrflj5bliLDlvZPliY3pgInkuK3nmoRvcHRpb27lr7nosaFcbiAgICAgKi9cbiAgICBcInNlbGVjdGVkLWNoYW5nZVwiLFxuICAgIC8qKlxuICAgICAqIOWAvOWPmOWMluS6i+S7tlxuICAgICAqL1xuICAgIFwiY2hhbmdlXCJcbiAgXSxcbiAgc2V0dXAocHJvcHMsIGN0eCkge1xuICAgIGNvbnN0IGRpY3RVc2VSZXQgPSB1c2VEaWN0KHByb3BzLCBjdHgpO1xuICAgIGNvbnN0IHsgdWkgfSA9IHVzZVVpKCk7XG4gICAgY29uc3QgZmllbGROYW1lc0JpbmRlciA9IHJlZigpO1xuICAgIC8vIEB0cy1pZ25vcmVcbiAgICBpZiAocHJvcHMuZGljdCkge1xuICAgICAgZmllbGROYW1lc0JpbmRlci52YWx1ZSA9IHVpLmNhc2NhZGVyLmZpZWxkTmFtZXMoe1xuICAgICAgICAvLyBAdHMtaWdub3JlXG4gICAgICAgIHZhbHVlOiBwcm9wcy5kaWN0LnZhbHVlLFxuICAgICAgICAvLyBAdHMtaWdub3JlXG4gICAgICAgIGxhYmVsOiBwcm9wcy5kaWN0LmxhYmVsLFxuICAgICAgICAvLyBAdHMtaWdub3JlXG4gICAgICAgIGNoaWxkcmVuOiBwcm9wcy5kaWN0LmNoaWxkcmVuXG4gICAgICB9KTtcbiAgICB9XG4gICAgY29uc3QgY29tcHV0ZWRPcHRpb25zID0gZGljdFVzZVJldC5jcmVhdGVDb21wdXRlZE9wdGlvbnMoKTtcblxuICAgIGZ1bmN0aW9uIG9uU2VsZWN0Q2hhbmdlKHZhbHVlOiBhbnkpIHtcbiAgICAgIGN0eC5lbWl0KFwiY2hhbmdlXCIsIHZhbHVlKTtcbiAgICAgIGlmICh2YWx1ZSkge1xuICAgICAgICBsZXQgc2VsZWN0ZWRPcHRpb25zID0gW107XG4gICAgICAgIGNvbnN0IGRpY3QgPSBkaWN0VXNlUmV0LmdldERpY3QoKTtcbiAgICAgICAgaWYgKGRpY3QgJiYgZGljdC5kYXRhTWFwKSB7XG4gICAgICAgICAgZm9yIChsZXQgaXRlbSBvZiB2YWx1ZSkge1xuICAgICAgICAgICAgY29uc3Qgb3B0ID0gZGljdC5kYXRhTWFwW2l0ZW1dO1xuICAgICAgICAgICAgaWYgKG9wdCkge1xuICAgICAgICAgICAgICBzZWxlY3RlZE9wdGlvbnMucHVzaChvcHQpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH1cbiAgICAgICAgICBjdHguZW1pdChcInNlbGVjdGVkLWNoYW5nZVwiLCBzZWxlY3RlZE9wdGlvbnMpO1xuICAgICAgICB9XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBjdHguZW1pdChcInNlbGVjdGVkLWNoYW5nZVwiLCBudWxsKTtcbiAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIHtcbiAgICAgIHVpLFxuICAgICAgLi4uZGljdFVzZVJldCxcbiAgICAgIGZpZWxkTmFtZXNCaW5kZXIsXG4gICAgICBjb21wdXRlZE9wdGlvbnMsXG4gICAgICBvblNlbGVjdENoYW5nZVxuICAgIH07XG4gIH1cbn0pO1xuPC9zY3JpcHQ+XG4iLCI8dGVtcGxhdGU+XG4gIDxjb21wb25lbnRcbiAgICA6aXM9XCJ1aS5jYXNjYWRlci5uYW1lXCJcbiAgICByZWY9XCJjYXNjYWRlclJlZlwiXG4gICAgOm9wdGlvbnM9XCJjb21wdXRlZE9wdGlvbnNcIlxuICAgIHYtYmluZD1cImZpZWxkTmFtZXNCaW5kZXJcIlxuICAgIEBjaGFuZ2U9XCJvblNlbGVjdENoYW5nZVwiXG4gIC8+XG48L3RlbXBsYXRlPlxuPHNjcmlwdCBsYW5nPVwidHNcIj5cbmltcG9ydCB7IHVzZURpY3QgfSBmcm9tIFwiLi4vLi4vdXNlL3VzZS1kaWN0XCI7XG5pbXBvcnQgeyB1c2VVaSB9IGZyb20gXCIuLi8uLi91c2VcIjtcbmltcG9ydCB7IGRlZmluZUNvbXBvbmVudCwgcmVmIH0gZnJvbSBcInZ1ZVwiO1xuLyoqXG4gKiDlrZflhbjnuqfogZTnu4Tku7ZcbiAqIOaUr+aMgWVsLWNhc2NhZGVyfGEtY2FzY2FkZXLnu4Tku7bnmoTlj4LmlbBcbiAqL1xuZXhwb3J0IGRlZmF1bHQgZGVmaW5lQ29tcG9uZW50KHtcbiAgbmFtZTogXCJGc0RpY3RDYXNjYWRlclwiLFxuICBwcm9wczoge1xuICAgIC8qKlxuICAgICAqIOWtl+WFuOmFjee9rlxuICAgICAqL1xuICAgIGRpY3Q6IHt9LFxuICAgIC8qKlxuICAgICAqIOmAiemhue+8jOavlGRpY3QuZGF0YeS8mOWFiOe6p+mrmFxuICAgICAqL1xuICAgIG9wdGlvbnM6IHsgdHlwZTogQXJyYXkgfSxcbiAgICAvKipcbiAgICAgKiDovazmjaJEaWN0RGF0YVxuICAgICAqL1xuICAgIHRyYW5zZm9ybURpY3REYXRhOiB7XG4gICAgICB0eXBlOiBGdW5jdGlvbixcbiAgICAgIGRlZmF1bHQ6IHVuZGVmaW5lZFxuICAgIH1cbiAgfSxcbiAgZW1pdHM6IFtcbiAgICAvKipcbiAgICAgKiDlrZflhbjmlbDmja7lj5jljJbkuovku7ZcbiAgICAgKi9cbiAgICBcImRpY3QtY2hhbmdlXCIsXG5cbiAgICAvKipcbiAgICAgKiDpgInkuK3lgLzlj5jljJbkuovku7bvvIzlj6/ku6Xojrflj5bliLDlvZPliY3pgInkuK3nmoRvcHRpb27lr7nosaFcbiAgICAgKi9cbiAgICBcInNlbGVjdGVkLWNoYW5nZVwiLFxuICAgIC8qKlxuICAgICAqIOWAvOWPmOWMluS6i+S7tlxuICAgICAqL1xuICAgIFwiY2hhbmdlXCJcbiAgXSxcbiAgc2V0dXAocHJvcHMsIGN0eCkge1xuICAgIGNvbnN0IGRpY3RVc2VSZXQgPSB1c2VEaWN0KHByb3BzLCBjdHgpO1xuICAgIGNvbnN0IHsgdWkgfSA9IHVzZVVpKCk7XG4gICAgY29uc3QgZmllbGROYW1lc0JpbmRlciA9IHJlZigpO1xuICAgIC8vIEB0cy1pZ25vcmVcbiAgICBpZiAocHJvcHMuZGljdCkge1xuICAgICAgZmllbGROYW1lc0JpbmRlci52YWx1ZSA9IHVpLmNhc2NhZGVyLmZpZWxkTmFtZXMoe1xuICAgICAgICAvLyBAdHMtaWdub3JlXG4gICAgICAgIHZhbHVlOiBwcm9wcy5kaWN0LnZhbHVlLFxuICAgICAgICAvLyBAdHMtaWdub3JlXG4gICAgICAgIGxhYmVsOiBwcm9wcy5kaWN0LmxhYmVsLFxuICAgICAgICAvLyBAdHMtaWdub3JlXG4gICAgICAgIGNoaWxkcmVuOiBwcm9wcy5kaWN0LmNoaWxkcmVuXG4gICAgICB9KTtcbiAgICB9XG4gICAgY29uc3QgY29tcHV0ZWRPcHRpb25zID0gZGljdFVzZVJldC5jcmVhdGVDb21wdXRlZE9wdGlvbnMoKTtcblxuICAgIGZ1bmN0aW9uIG9uU2VsZWN0Q2hhbmdlKHZhbHVlOiBhbnkpIHtcbiAgICAgIGN0eC5lbWl0KFwiY2hhbmdlXCIsIHZhbHVlKTtcbiAgICAgIGlmICh2YWx1ZSkge1xuICAgICAgICBsZXQgc2VsZWN0ZWRPcHRpb25zID0gW107XG4gICAgICAgIGNvbnN0IGRpY3QgPSBkaWN0VXNlUmV0LmdldERpY3QoKTtcbiAgICAgICAgaWYgKGRpY3QgJiYgZGljdC5kYXRhTWFwKSB7XG4gICAgICAgICAgZm9yIChsZXQgaXRlbSBvZiB2YWx1ZSkge1xuICAgICAgICAgICAgY29uc3Qgb3B0ID0gZGljdC5kYXRhTWFwW2l0ZW1dO1xuICAgICAgICAgICAgaWYgKG9wdCkge1xuICAgICAgICAgICAgICBzZWxlY3RlZE9wdGlvbnMucHVzaChvcHQpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH1cbiAgICAgICAgICBjdHguZW1pdChcInNlbGVjdGVkLWNoYW5nZVwiLCBzZWxlY3RlZE9wdGlvbnMpO1xuICAgICAgICB9XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBjdHguZW1pdChcInNlbGVjdGVkLWNoYW5nZVwiLCBudWxsKTtcbiAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIHtcbiAgICAgIHVpLFxuICAgICAgLi4uZGljdFVzZVJldCxcbiAgICAgIGZpZWxkTmFtZXNCaW5kZXIsXG4gICAgICBjb21wdXRlZE9wdGlvbnMsXG4gICAgICBvblNlbGVjdENoYW5nZVxuICAgIH07XG4gIH1cbn0pO1xuPC9zY3JpcHQ+XG4iLCI8dGVtcGxhdGU+XG4gIDxjb21wb25lbnQgOmlzPVwidWkuY2hlY2tib3hHcm91cC5uYW1lXCIgQGNoYW5nZT1cIm9uU2VsZWN0ZWRDaGFuZ2VcIj5cbiAgICA8Y29tcG9uZW50XG4gICAgICA6aXM9XCJvcHRpb25OYW1lIHx8IHVpLmNoZWNrYm94Lm5hbWVcIlxuICAgICAgdi1mb3I9XCJpdGVtIG9mIGNvbXB1dGVkT3B0aW9uc1wiXG4gICAgICByZWY9XCJjaGVja2JveFJlZlwiXG4gICAgICA6a2V5PVwiZ2V0VmFsdWUoaXRlbSlcIlxuICAgICAgOlt1aS5jaGVja2JveC52YWx1ZV09XCJnZXRWYWx1ZShpdGVtKVwiXG4gICAgICB2LWJpbmQ9XCJvcHRpb25Qcm9wc1wiXG4gICAgICA+e3sgZ2V0TGFiZWwoaXRlbSkgfX08L2NvbXBvbmVudFxuICAgID5cbiAgPC9jb21wb25lbnQ+XG48L3RlbXBsYXRlPlxuPHNjcmlwdCBsYW5nPVwidHNcIj5cbmltcG9ydCB7IHVzZURpY3QgfSBmcm9tIFwiLi4vLi4vdXNlL3VzZS1kaWN0XCI7XG5pbXBvcnQgeyBkZWZpbmVDb21wb25lbnQgfSBmcm9tIFwidnVlXCI7XG5pbXBvcnQgeyB1c2VVaSB9IGZyb20gXCIuLi8uLi91c2VcIjtcblxuLyoqXG4gKiDlrZflhbhjaGVja2JveFxuICog5pSv5oyBZWwtY2hlY2tib3h8YS1jaGVja2JveOWPguaVsFxuICovXG5leHBvcnQgZGVmYXVsdCBkZWZpbmVDb21wb25lbnQoe1xuICBuYW1lOiBcIkZzRGljdENoZWNrYm94XCIsXG4gIHByb3BzOiB7XG4gICAgLyoqXG4gICAgICog5a2X5YW4XG4gICAgICovXG4gICAgZGljdDoge30sXG4gICAgLyoqXG4gICAgICog6YCJ6aG577yM5q+UZGljdC5kYXRh5LyY5YWI57qn6auYXG4gICAgICovXG4gICAgb3B0aW9uczogeyB0eXBlOiBBcnJheSwgZGVmYXVsdDogdW5kZWZpbmVkLCByZXF1aXJlOiBmYWxzZSB9LFxuXG4gICAgLyoqXG4gICAgICog6YCJ6aG555qE57uE5Lu25ZCN56ewXG4gICAgICovXG4gICAgb3B0aW9uTmFtZToge1xuICAgICAgdHlwZTogU3RyaW5nXG4gICAgfSxcblxuICAgIC8qKlxuICAgICAqIOmAiemhueeahOWxnuaAp1xuICAgICAqL1xuICAgIG9wdGlvblByb3BzOiB7XG4gICAgICB0eXBlOiBPYmplY3QsXG4gICAgICBkZWZhdWx0KCkge1xuICAgICAgICByZXR1cm4ge307XG4gICAgICB9XG4gICAgfSxcbiAgICAvKipcbiAgICAgKiDovazmjaJEaWN0RGF0YVxuICAgICAqL1xuICAgIHRyYW5zZm9ybURpY3REYXRhOiB7XG4gICAgICB0eXBlOiBGdW5jdGlvbixcbiAgICAgIGRlZmF1bHQ6IHVuZGVmaW5lZFxuICAgIH1cbiAgfSxcbiAgZW1pdHM6IFtcbiAgICAvKipcbiAgICAgKiDlrZflhbjmlbDmja7lj5jljJbkuovku7ZcbiAgICAgKi9cbiAgICBcImRpY3QtY2hhbmdlXCIsXG5cbiAgICAvKipcbiAgICAgKiDpgInkuK3lgLzlj5jljJbkuovku7bvvIzlj6/ku6Xojrflj5bliLDlvZPliY3pgInkuK3nmoRvcHRpb27lr7nosaFcbiAgICAgKi9cbiAgICBcInNlbGVjdGVkLWNoYW5nZVwiLFxuICAgIC8qKlxuICAgICAqIOWAvOWPmOWMluS6i+S7tlxuICAgICAqL1xuICAgIFwiY2hhbmdlXCJcbiAgXSxcbiAgc2V0dXAocHJvcHMsIGN0eCkge1xuICAgIGNvbnN0IHsgdWkgfSA9IHVzZVVpKCk7XG4gICAgbGV0IHVzZWREaWN0ID0gdXNlRGljdChwcm9wcywgY3R4LCB1aS5jaGVja2JveEdyb3VwLm1vZGVsVmFsdWUpO1xuICAgIGNvbnN0IGNvbXB1dGVkT3B0aW9ucyA9IHVzZWREaWN0LmNyZWF0ZUNvbXB1dGVkT3B0aW9ucygpO1xuICAgIGNvbnN0IG9uU2VsZWN0ZWRDaGFuZ2UgPSAodmFsdWU6IGFueSkgPT4ge1xuICAgICAgY3R4LmVtaXQoXCJjaGFuZ2VcIiwgdmFsdWUpO1xuICAgICAgaWYgKHZhbHVlKSB7XG4gICAgICAgIGxldCBzZWxlY3RlZE9wdGlvbnMgPSBbXTtcbiAgICAgICAgY29uc3QgZGljdCA9IHVzZWREaWN0LmdldERpY3QoKTtcbiAgICAgICAgaWYgKGRpY3QgJiYgZGljdC5kYXRhTWFwKSB7XG4gICAgICAgICAgZm9yIChsZXQgaXRlbSBvZiB2YWx1ZSkge1xuICAgICAgICAgICAgY29uc3Qgb3B0ID0gZGljdC5kYXRhTWFwW2l0ZW1dO1xuICAgICAgICAgICAgaWYgKG9wdCkge1xuICAgICAgICAgICAgICBzZWxlY3RlZE9wdGlvbnMucHVzaChvcHQpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH1cbiAgICAgICAgICBjdHguZW1pdChcInNlbGVjdGVkLWNoYW5nZVwiLCBzZWxlY3RlZE9wdGlvbnMpO1xuICAgICAgICB9XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBjdHguZW1pdChcInNlbGVjdGVkLWNoYW5nZVwiLCBudWxsKTtcbiAgICAgIH1cbiAgICB9O1xuXG4gICAgcmV0dXJuIHtcbiAgICAgIHVpLFxuICAgICAgLi4udXNlZERpY3QsXG4gICAgICBjb21wdXRlZE9wdGlvbnMsXG4gICAgICBvblNlbGVjdGVkQ2hhbmdlXG4gICAgfTtcbiAgfVxufSk7XG48L3NjcmlwdD5cbiIsIjx0ZW1wbGF0ZT5cbiAgPGNvbXBvbmVudCA6aXM9XCJ1aS5jaGVja2JveEdyb3VwLm5hbWVcIiBAY2hhbmdlPVwib25TZWxlY3RlZENoYW5nZVwiPlxuICAgIDxjb21wb25lbnRcbiAgICAgIDppcz1cIm9wdGlvbk5hbWUgfHwgdWkuY2hlY2tib3gubmFtZVwiXG4gICAgICB2LWZvcj1cIml0ZW0gb2YgY29tcHV0ZWRPcHRpb25zXCJcbiAgICAgIHJlZj1cImNoZWNrYm94UmVmXCJcbiAgICAgIDprZXk9XCJnZXRWYWx1ZShpdGVtKVwiXG4gICAgICA6W3VpLmNoZWNrYm94LnZhbHVlXT1cImdldFZhbHVlKGl0ZW0pXCJcbiAgICAgIHYtYmluZD1cIm9wdGlvblByb3BzXCJcbiAgICAgID57eyBnZXRMYWJlbChpdGVtKSB9fTwvY29tcG9uZW50XG4gICAgPlxuICA8L2NvbXBvbmVudD5cbjwvdGVtcGxhdGU+XG48c2NyaXB0IGxhbmc9XCJ0c1wiPlxuaW1wb3J0IHsgdXNlRGljdCB9IGZyb20gXCIuLi8uLi91c2UvdXNlLWRpY3RcIjtcbmltcG9ydCB7IGRlZmluZUNvbXBvbmVudCB9IGZyb20gXCJ2dWVcIjtcbmltcG9ydCB7IHVzZVVpIH0gZnJvbSBcIi4uLy4uL3VzZVwiO1xuXG4vKipcbiAqIOWtl+WFuGNoZWNrYm94XG4gKiDmlK/mjIFlbC1jaGVja2JveHxhLWNoZWNrYm945Y+C5pWwXG4gKi9cbmV4cG9ydCBkZWZhdWx0IGRlZmluZUNvbXBvbmVudCh7XG4gIG5hbWU6IFwiRnNEaWN0Q2hlY2tib3hcIixcbiAgcHJvcHM6IHtcbiAgICAvKipcbiAgICAgKiDlrZflhbhcbiAgICAgKi9cbiAgICBkaWN0OiB7fSxcbiAgICAvKipcbiAgICAgKiDpgInpobnvvIzmr5RkaWN0LmRhdGHkvJjlhYjnuqfpq5hcbiAgICAgKi9cbiAgICBvcHRpb25zOiB7IHR5cGU6IEFycmF5LCBkZWZhdWx0OiB1bmRlZmluZWQsIHJlcXVpcmU6IGZhbHNlIH0sXG5cbiAgICAvKipcbiAgICAgKiDpgInpobnnmoTnu4Tku7blkI3np7BcbiAgICAgKi9cbiAgICBvcHRpb25OYW1lOiB7XG4gICAgICB0eXBlOiBTdHJpbmdcbiAgICB9LFxuXG4gICAgLyoqXG4gICAgICog6YCJ6aG555qE5bGe5oCnXG4gICAgICovXG4gICAgb3B0aW9uUHJvcHM6IHtcbiAgICAgIHR5cGU6IE9iamVjdCxcbiAgICAgIGRlZmF1bHQoKSB7XG4gICAgICAgIHJldHVybiB7fTtcbiAgICAgIH1cbiAgICB9LFxuICAgIC8qKlxuICAgICAqIOi9rOaNokRpY3REYXRhXG4gICAgICovXG4gICAgdHJhbnNmb3JtRGljdERhdGE6IHtcbiAgICAgIHR5cGU6IEZ1bmN0aW9uLFxuICAgICAgZGVmYXVsdDogdW5kZWZpbmVkXG4gICAgfVxuICB9LFxuICBlbWl0czogW1xuICAgIC8qKlxuICAgICAqIOWtl+WFuOaVsOaNruWPmOWMluS6i+S7tlxuICAgICAqL1xuICAgIFwiZGljdC1jaGFuZ2VcIixcblxuICAgIC8qKlxuICAgICAqIOmAieS4reWAvOWPmOWMluS6i+S7tu+8jOWPr+S7peiOt+WPluWIsOW9k+WJjemAieS4reeahG9wdGlvbuWvueixoVxuICAgICAqL1xuICAgIFwic2VsZWN0ZWQtY2hhbmdlXCIsXG4gICAgLyoqXG4gICAgICog5YC85Y+Y5YyW5LqL5Lu2XG4gICAgICovXG4gICAgXCJjaGFuZ2VcIlxuICBdLFxuICBzZXR1cChwcm9wcywgY3R4KSB7XG4gICAgY29uc3QgeyB1aSB9ID0gdXNlVWkoKTtcbiAgICBsZXQgdXNlZERpY3QgPSB1c2VEaWN0KHByb3BzLCBjdHgsIHVpLmNoZWNrYm94R3JvdXAubW9kZWxWYWx1ZSk7XG4gICAgY29uc3QgY29tcHV0ZWRPcHRpb25zID0gdXNlZERpY3QuY3JlYXRlQ29tcHV0ZWRPcHRpb25zKCk7XG4gICAgY29uc3Qgb25TZWxlY3RlZENoYW5nZSA9ICh2YWx1ZTogYW55KSA9PiB7XG4gICAgICBjdHguZW1pdChcImNoYW5nZVwiLCB2YWx1ZSk7XG4gICAgICBpZiAodmFsdWUpIHtcbiAgICAgICAgbGV0IHNlbGVjdGVkT3B0aW9ucyA9IFtdO1xuICAgICAgICBjb25zdCBkaWN0ID0gdXNlZERpY3QuZ2V0RGljdCgpO1xuICAgICAgICBpZiAoZGljdCAmJiBkaWN0LmRhdGFNYXApIHtcbiAgICAgICAgICBmb3IgKGxldCBpdGVtIG9mIHZhbHVlKSB7XG4gICAgICAgICAgICBjb25zdCBvcHQgPSBkaWN0LmRhdGFNYXBbaXRlbV07XG4gICAgICAgICAgICBpZiAob3B0KSB7XG4gICAgICAgICAgICAgIHNlbGVjdGVkT3B0aW9ucy5wdXNoKG9wdCk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfVxuICAgICAgICAgIGN0eC5lbWl0KFwic2VsZWN0ZWQtY2hhbmdlXCIsIHNlbGVjdGVkT3B0aW9ucyk7XG4gICAgICAgIH1cbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGN0eC5lbWl0KFwic2VsZWN0ZWQtY2hhbmdlXCIsIG51bGwpO1xuICAgICAgfVxuICAgIH07XG5cbiAgICByZXR1cm4ge1xuICAgICAgdWksXG4gICAgICAuLi51c2VkRGljdCxcbiAgICAgIGNvbXB1dGVkT3B0aW9ucyxcbiAgICAgIG9uU2VsZWN0ZWRDaGFuZ2VcbiAgICB9O1xuICB9XG59KTtcbjwvc2NyaXB0PlxuIiwiPHRlbXBsYXRlPlxuICA8Y29tcG9uZW50IDppcz1cInVpLnN3aXRjaC5uYW1lXCIgcmVmPVwic3dpdGNoUmVmXCIgdi1iaW5kPVwiYmluZGluZ1wiIC8+XG48L3RlbXBsYXRlPlxuPHNjcmlwdCBsYW5nPVwidHNcIj5cbmltcG9ydCB7IHVzZURpY3QgfSBmcm9tIFwiLi4vLi4vdXNlL3VzZS1kaWN0XCI7XG5pbXBvcnQgeyB1aUNvbnRleHQgfSBmcm9tIFwiLi4vLi4vdWlcIjtcbmltcG9ydCB7IGRlZmluZUNvbXBvbmVudCwgUHJvcFR5cGUgfSBmcm9tIFwidnVlXCI7XG5pbXBvcnQgeyBEaWN0T3B0aW9ucywgdXNlVWkgfSBmcm9tIFwiLi4vLi4vdXNlXCI7XG5cbi8qKlxuICog5a2X5YW45byA5YWzXG4gKiDmlK/mjIFlbC1zd2l0Y2h8YS1zd2l0Y2jnmoTlsZ7mgKdcbiAqL1xuZXhwb3J0IGRlZmF1bHQgZGVmaW5lQ29tcG9uZW50KHtcbiAgbmFtZTogXCJGc0RpY3RTd2l0Y2hcIixcbiAgcHJvcHM6IHtcbiAgICAvKipcbiAgICAgKiDlrZflhbjnrKzkuIDkuKrkuLrlvIDlkK9cbiAgICAgKiDnrKzkuozkuKrkuLrlhbPpl61cbiAgICAgKi9cbiAgICBkaWN0OiB7XG4gICAgICB0eXBlOiBPYmplY3QgYXMgUHJvcFR5cGU8RGljdE9wdGlvbnM8YW55Pj5cbiAgICB9LFxuICAgIG9wdGlvbnM6IHt9LFxuICAgIC8qKlxuICAgICAqIOi9rOaNokRpY3REYXRhXG4gICAgICovXG4gICAgdHJhbnNmb3JtRGljdERhdGE6IHtcbiAgICAgIHR5cGU6IEZ1bmN0aW9uLFxuICAgICAgZGVmYXVsdDogdW5kZWZpbmVkXG4gICAgfVxuICB9IGFzIGFueSxcbiAgZW1pdHM6IFtcImRpY3QtY2hhbmdlXCJdLFxuICBzZXR1cChwcm9wcywgY3R4KSB7XG4gICAgY29uc3QgeyB1aSB9ID0gdXNlVWkoKTtcbiAgICBsZXQgdXNlZERpY3QgPSB1c2VEaWN0KHByb3BzLCBjdHgsIHVpLnN3aXRjaC5tb2RlbFZhbHVlKTtcbiAgICBjb25zdCBjb21wdXRlZE9wdGlvbnMgPSB1c2VkRGljdC5jcmVhdGVDb21wdXRlZE9wdGlvbnMoKTtcbiAgICByZXR1cm4ge1xuICAgICAgdWksXG4gICAgICAuLi51c2VkRGljdCxcbiAgICAgIGNvbXB1dGVkT3B0aW9uc1xuICAgIH07XG4gIH0sXG4gIGNvbXB1dGVkOiB7XG4gICAgX2FjdGl2ZSgpIHtcbiAgICAgIGlmICh0aGlzLmNvbXB1dGVkT3B0aW9ucy5sZW5ndGggPiAwKSB7XG4gICAgICAgIHJldHVybiB0aGlzLmNvbXB1dGVkT3B0aW9uc1swXTtcbiAgICAgIH1cbiAgICAgIHJldHVybiB7fTtcbiAgICB9LFxuICAgIF9pbkFjdGl2ZSgpIHtcbiAgICAgIGlmICh0aGlzLmNvbXB1dGVkT3B0aW9ucy5sZW5ndGggPiAxKSB7XG4gICAgICAgIHJldHVybiB0aGlzLmNvbXB1dGVkT3B0aW9uc1sxXTtcbiAgICAgIH1cbiAgICAgIHJldHVybiB7fTtcbiAgICB9LFxuICAgIGJpbmRpbmcoKSB7XG4gICAgICBjb25zdCB1aSA9IHVpQ29udGV4dC5nZXQoKTtcbiAgICAgIHJldHVybiB7XG4gICAgICAgIC8vIEB0cy1pZ25vcmVcbiAgICAgICAgW3VpLnN3aXRjaC5hY3RpdmVUZXh0XTogdGhpcy5fYWN0aXZlW3RoaXMuZGljdD8ubGFiZWwgfHwgXCJsYWJlbFwiXSxcbiAgICAgICAgLy8gQHRzLWlnbm9yZVxuICAgICAgICBbdWkuc3dpdGNoLmluYWN0aXZlVGV4dF06IHRoaXMuX2luQWN0aXZlW3RoaXMuZGljdD8ubGFiZWwgfHwgXCJsYWJlbFwiXSxcbiAgICAgICAgLy8gQHRzLWlnbm9yZVxuICAgICAgICBbdWkuc3dpdGNoLmFjdGl2ZUNvbG9yXTogdGhpcy5fYWN0aXZlW3RoaXMuZGljdD8uY29sb3IgfHwgXCJjb2xvclwiXSxcbiAgICAgICAgLy8gQHRzLWlnbm9yZVxuICAgICAgICBbdWkuc3dpdGNoLmluYWN0aXZlQ29sb3JdOiB0aGlzLl9pbkFjdGl2ZVt0aGlzLmRpY3Q/LmNvbG9yIHx8IFwiY29sb3JcIl0sXG4gICAgICAgIC8vIEB0cy1pZ25vcmVcbiAgICAgICAgW3VpLnN3aXRjaC5hY3RpdmVWYWx1ZV06IHRoaXMuX2FjdGl2ZVt0aGlzLmRpY3Q/LnZhbHVlIHx8IFwidmFsdWVcIl0sXG4gICAgICAgIC8vIEB0cy1pZ25vcmVcbiAgICAgICAgW3VpLnN3aXRjaC5pbmFjdGl2ZVZhbHVlXTogdGhpcy5faW5BY3RpdmVbdGhpcy5kaWN0Py52YWx1ZSB8fCBcInZhbHVlXCJdXG4gICAgICB9O1xuICAgIH1cbiAgfVxufSk7XG48L3NjcmlwdD5cbiIsIjx0ZW1wbGF0ZT5cbiAgPHNwYW4+e3sgZG9Gb3JtYXQgfX08L3NwYW4+XG48L3RlbXBsYXRlPlxuXG48c2NyaXB0IGxhbmc9XCJ0c1wiPlxuaW1wb3J0IGRheWpzIGZyb20gXCJkYXlqc1wiO1xuaW1wb3J0IHsgZGVmaW5lQ29tcG9uZW50IH0gZnJvbSBcInZ1ZVwiO1xuLyoqXG4gKiDml6XmnJ/moLzlvI/ljJblsZXnpLrnu4Tku7ZcbiAqL1xuZXhwb3J0IGRlZmF1bHQgZGVmaW5lQ29tcG9uZW50KHtcbiAgbmFtZTogXCJGc0RhdGVGb3JtYXRcIixcbiAgcHJvcHM6IHtcbiAgICAvKipcbiAgICAgKiDml6XmnJ/ml7bpl7TlgLzvvIzmlK/mjIFsb25nLHN0cmluZyxkYXRl562J77yM55SxZGF5anPovazljJZcbiAgICAgKi9cbiAgICBtb2RlbFZhbHVlOiB7IHJlcXVpcmVkOiBmYWxzZSB9LFxuICAgIC8qKlxuICAgICAqICDovpPlhaXmoLzlvI/ljJbvvIzkuI3kvKDliJnnlLFkYXlqc+iHquWKqOi9rOWMllxuICAgICAqL1xuICAgIHZhbHVlRm9ybWF0OiB7IHR5cGU6IFN0cmluZywgZGVmYXVsdDogdW5kZWZpbmVkLCByZXF1aXJlZDogZmFsc2UgfSxcbiAgICAvKipcbiAgICAgKiAg6L6T5Ye65qC85byP5YyWXG4gICAgICovXG4gICAgZm9ybWF0OiB7IHR5cGU6IFN0cmluZywgZGVmYXVsdDogXCJZWVlZLU1NLUREIEhIOm1tOnNzXCIsIHJlcXVpcmVkOiBmYWxzZSB9XG4gIH0sXG4gIGRhdGEoKSB7XG4gICAgcmV0dXJuIHtcbiAgICAgIGl0ZW06IHt9XG4gICAgfTtcbiAgfSxcbiAgY29tcHV0ZWQ6IHtcbiAgICBkb0Zvcm1hdCgpIHtcbiAgICAgIGlmICh0aGlzLm1vZGVsVmFsdWUgPT0gbnVsbCB8fCB0aGlzLm1vZGVsVmFsdWUgPT09IFwiXCIpIHtcbiAgICAgICAgcmV0dXJuIFwiXCI7XG4gICAgICB9XG4gICAgICBsZXQgZGF0ZSA9IG51bGw7XG4gICAgICBpZiAodGhpcy52YWx1ZUZvcm1hdCAhPSBudWxsKSB7XG4gICAgICAgIGRhdGUgPSBkYXlqcyh0aGlzLm1vZGVsVmFsdWUsIHRoaXMudmFsdWVGb3JtYXQpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgZGF0ZSA9IGRheWpzKHRoaXMubW9kZWxWYWx1ZSk7XG4gICAgICB9XG4gICAgICByZXR1cm4gZGF0ZS5mb3JtYXQodGhpcy5mb3JtYXQpO1xuICAgIH1cbiAgfSBhcyBhbnksXG4gIGNyZWF0ZWQoKSB7fSxcbiAgbWV0aG9kczoge31cbn0pO1xuPC9zY3JpcHQ+XG4iLCI8dGVtcGxhdGU+XG4gIDxjb21wb25lbnRcbiAgICA6aXM9XCJ1aS50cmVlU2VsZWN0Lm5hbWVcIlxuICAgIHJlZj1cInRyZWVSZWZcIlxuICAgIDpbdWkudHJlZVNlbGVjdC5vcHRpb25zXT1cImNvbXB1dGVkT3B0aW9uc1wiXG4gICAgOnBsYWNlaG9sZGVyPVwiY29tcHV0ZWRQbGFjZWhvbGRlclwiXG4gICAgdi1iaW5kPVwiY29tcHV0ZWRCaW5kaW5nXCJcbiAgICBAY2hhbmdlPVwib25TZWxlY3RlZENoYW5nZVwiXG4gID5cbiAgICA8dGVtcGxhdGUgdi1mb3I9XCIodmFsdWUsIGtleSkgb2Ygc2xvdHNcIiA6a2V5PVwia2V5XCIgI1trZXldPVwic2NvcGVcIj5cbiAgICAgIDxmcy1zbG90LXJlbmRlciA6c2xvdHM9XCJ2YWx1ZVwiIDpzY29wZT1cInNjb3BlXCI+PC9mcy1zbG90LXJlbmRlcj5cbiAgICA8L3RlbXBsYXRlPlxuICA8L2NvbXBvbmVudD5cbjwvdGVtcGxhdGU+XG48c2NyaXB0IGxhbmc9XCJ0c1wiPlxuaW1wb3J0IHsgY29tcHV0ZWQsIGRlZmluZUNvbXBvbmVudCwgcmVmIH0gZnJvbSBcInZ1ZVwiO1xuaW1wb3J0IHsgdXNlRGljdCB9IGZyb20gXCIuLi8uLi91c2UvdXNlLWRpY3RcIjtcbmltcG9ydCB7IHVzZUkxOG4gfSBmcm9tIFwiLi4vLi4vbG9jYWxlXCI7XG5pbXBvcnQgeyB1c2VVaSB9IGZyb20gXCIuLi8uLi91c2VcIjtcblxuLyoqXG4gKiDlrZflhbjmoJHpgInmi6nnu4Tku7ZcbiAqIOaUr+aMgSBhLXRyZWUtc2VsZWN0IOWPguaVsFxuICovXG5leHBvcnQgZGVmYXVsdCBkZWZpbmVDb21wb25lbnQoe1xuICBuYW1lOiBcIkZzRGljdFRyZWVcIixcbiAgY29tcG9uZW50czoge30sXG4gIHByb3BzOiB7XG4gICAgLyoqXG4gICAgICog5pWw5o2u5a2X5YW4XG4gICAgICovXG4gICAgZGljdDoge30sXG4gICAgLyoqXG4gICAgICog5Y+v6YCJ6aG577yM5q+UZGljdC5kYXRh5LyY5YWI57qn6auYXG4gICAgICovXG4gICAgb3B0aW9uczogeyB0eXBlOiBBcnJheSB9LFxuICAgIC8qKlxuICAgICAqIHBsYWNlaG9sZGVyXG4gICAgICovXG4gICAgcGxhY2Vob2xkZXI6IHsgdHlwZTogU3RyaW5nIH0sXG4gICAgLyoqXG4gICAgICog6L2s5o2iRGljdERhdGFcbiAgICAgKi9cbiAgICB0cmFuc2Zvcm1EaWN0RGF0YToge1xuICAgICAgdHlwZTogRnVuY3Rpb24sXG4gICAgICBkZWZhdWx0OiB1bmRlZmluZWRcbiAgICB9XG4gIH0sXG4gIGVtaXRzOiBbXG4gICAgLyoqXG4gICAgICog5a2X5YW45pWw5o2u5Y+Y5YyW5LqL5Lu2XG4gICAgICovXG4gICAgXCJkaWN0LWNoYW5nZVwiLFxuXG4gICAgLyoqXG4gICAgICog6YCJ5Lit5YC85Y+Y5YyW5LqL5Lu277yM5Y+v5Lul6I635Y+W5Yiw5b2T5YmN6YCJ5Lit55qEb3B0aW9u5a+56LGhXG4gICAgICovXG4gICAgXCJzZWxlY3RlZC1jaGFuZ2VcIixcbiAgICAvKipcbiAgICAgKiDlgLzlj5jljJbkuovku7ZcbiAgICAgKi9cbiAgICBcImNoYW5nZVwiXG4gIF0sXG4gIC8vIHJlbmRlciAoKSB7XG4gIC8vICAgcmV0dXJuIHRoaXMucmVuZGVyRnVuYyh7IGRhdGE6IHRoaXMuZGF0YSwgZGF0YU1hcDogdGhpcy5kYXRhTWFwLCBzY29wZTogdGhpcy5zY29wZSwgYXR0cnM6IHRoaXMuJGF0dHJzIH0pXG4gIC8vIH0sXG4gIHNldHVwKHByb3BzLCBjdHgpIHtcbiAgICBjb25zdCB7IHQgfSA9IHVzZUkxOG4oKTtcbiAgICBjb25zdCB7IHVpIH0gPSB1c2VVaSgpO1xuICAgIGNvbnN0IGNvbXB1dGVkUGxhY2Vob2xkZXIgPSBjb21wdXRlZCgoKSA9PiB7XG4gICAgICByZXR1cm4gcHJvcHMucGxhY2Vob2xkZXIgfHwgdChcImZzLmNvbXBvbmVudC5zZWxlY3QucGxhY2Vob2xkZXJcIik7XG4gICAgfSk7XG5cbiAgICBsZXQgdXNlZERpY3QgPSB1c2VEaWN0KHByb3BzLCBjdHgpO1xuXG4gICAgY29uc3Qgc2xvdHMgPSBjdHguc2xvdHM7XG5cbiAgICBjb25zdCBjb21wdXRlZE9wdGlvbnMgPSB1c2VkRGljdC5jcmVhdGVDb21wdXRlZE9wdGlvbnMoKTtcblxuICAgIGNvbnN0IGNvbXB1dGVkQmluZGluZyA9IGNvbXB1dGVkKCgpID0+IHtcbiAgICAgIGNvbnN0IGRpY3QgPSB1c2VkRGljdC5nZXREaWN0KCk7XG4gICAgICByZXR1cm4gdWkudHJlZVNlbGVjdC5idWlsZE9wdGlvbktleXNOYW1lQmluZGluZyh7XG4gICAgICAgIGxhYmVsOiBkaWN0LmxhYmVsLFxuICAgICAgICB2YWx1ZTogZGljdC52YWx1ZSxcbiAgICAgICAgY2hpbGRyZW46IGRpY3QuY2hpbGRyZW5cbiAgICAgIH0pO1xuICAgIH0pO1xuXG4gICAgY29uc3Qgb25TZWxlY3RlZENoYW5nZSA9ICh2YWx1ZTogYW55KSA9PiB7XG4gICAgICBjdHguZW1pdChcImNoYW5nZVwiLCB2YWx1ZSk7XG4gICAgICBpZiAodmFsdWUpIHtcbiAgICAgICAgY29uc3QgZGljdCA9IHVzZWREaWN0LmdldERpY3QoKTtcbiAgICAgICAgaWYgKGRpY3QgJiYgZGljdC5kYXRhTWFwKSB7XG4gICAgICAgICAgaWYgKHZhbHVlIGluc3RhbmNlb2YgQXJyYXkpIHtcbiAgICAgICAgICAgIGxldCBzZWxlY3RlZE9wdGlvbnMgPSBbXTtcbiAgICAgICAgICAgIGZvciAobGV0IGl0ZW0gb2YgdmFsdWUpIHtcbiAgICAgICAgICAgICAgY29uc3Qgb3B0ID0gZGljdC5kYXRhTWFwW2l0ZW1dO1xuICAgICAgICAgICAgICBpZiAob3B0KSB7XG4gICAgICAgICAgICAgICAgc2VsZWN0ZWRPcHRpb25zLnB1c2gob3B0KTtcbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgY3R4LmVtaXQoXCJzZWxlY3RlZC1jaGFuZ2VcIiwgc2VsZWN0ZWRPcHRpb25zKTtcbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgY3R4LmVtaXQoXCJzZWxlY3RlZC1jaGFuZ2VcIiwgZGljdC5kYXRhTWFwW3ZhbHVlXSk7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBjdHguZW1pdChcInNlbGVjdGVkLWNoYW5nZVwiLCBudWxsKTtcbiAgICAgIH1cbiAgICB9O1xuXG4gICAgY29uc3QgdHJlZVJlZiA9IHJlZigpO1xuICAgIHJldHVybiB7XG4gICAgICB1aSxcbiAgICAgIGNvbXB1dGVkQmluZGluZyxcbiAgICAgIGNvbXB1dGVkUGxhY2Vob2xkZXIsXG4gICAgICAuLi51c2VkRGljdCxcbiAgICAgIGNvbXB1dGVkT3B0aW9ucyxcbiAgICAgIG9uU2VsZWN0ZWRDaGFuZ2UsXG4gICAgICBzbG90cyxcbiAgICAgIHRyZWVSZWZcbiAgICB9O1xuICB9XG59KTtcbjwvc2NyaXB0PlxuIiwiPHRlbXBsYXRlPlxuICA8Y29tcG9uZW50XG4gICAgOmlzPVwidWkudHJlZVNlbGVjdC5uYW1lXCJcbiAgICByZWY9XCJ0cmVlUmVmXCJcbiAgICA6W3VpLnRyZWVTZWxlY3Qub3B0aW9uc109XCJjb21wdXRlZE9wdGlvbnNcIlxuICAgIDpwbGFjZWhvbGRlcj1cImNvbXB1dGVkUGxhY2Vob2xkZXJcIlxuICAgIHYtYmluZD1cImNvbXB1dGVkQmluZGluZ1wiXG4gICAgQGNoYW5nZT1cIm9uU2VsZWN0ZWRDaGFuZ2VcIlxuICA+XG4gICAgPHRlbXBsYXRlIHYtZm9yPVwiKHZhbHVlLCBrZXkpIG9mIHNsb3RzXCIgOmtleT1cImtleVwiICNba2V5XT1cInNjb3BlXCI+XG4gICAgICA8ZnMtc2xvdC1yZW5kZXIgOnNsb3RzPVwidmFsdWVcIiA6c2NvcGU9XCJzY29wZVwiPjwvZnMtc2xvdC1yZW5kZXI+XG4gICAgPC90ZW1wbGF0ZT5cbiAgPC9jb21wb25lbnQ+XG48L3RlbXBsYXRlPlxuPHNjcmlwdCBsYW5nPVwidHNcIj5cbmltcG9ydCB7IGNvbXB1dGVkLCBkZWZpbmVDb21wb25lbnQsIHJlZiB9IGZyb20gXCJ2dWVcIjtcbmltcG9ydCB7IHVzZURpY3QgfSBmcm9tIFwiLi4vLi4vdXNlL3VzZS1kaWN0XCI7XG5pbXBvcnQgeyB1c2VJMThuIH0gZnJvbSBcIi4uLy4uL2xvY2FsZVwiO1xuaW1wb3J0IHsgdXNlVWkgfSBmcm9tIFwiLi4vLi4vdXNlXCI7XG5cbi8qKlxuICog5a2X5YW45qCR6YCJ5oup57uE5Lu2XG4gKiDmlK/mjIEgYS10cmVlLXNlbGVjdCDlj4LmlbBcbiAqL1xuZXhwb3J0IGRlZmF1bHQgZGVmaW5lQ29tcG9uZW50KHtcbiAgbmFtZTogXCJGc0RpY3RUcmVlXCIsXG4gIGNvbXBvbmVudHM6IHt9LFxuICBwcm9wczoge1xuICAgIC8qKlxuICAgICAqIOaVsOaNruWtl+WFuFxuICAgICAqL1xuICAgIGRpY3Q6IHt9LFxuICAgIC8qKlxuICAgICAqIOWPr+mAiemhue+8jOavlGRpY3QuZGF0YeS8mOWFiOe6p+mrmFxuICAgICAqL1xuICAgIG9wdGlvbnM6IHsgdHlwZTogQXJyYXkgfSxcbiAgICAvKipcbiAgICAgKiBwbGFjZWhvbGRlclxuICAgICAqL1xuICAgIHBsYWNlaG9sZGVyOiB7IHR5cGU6IFN0cmluZyB9LFxuICAgIC8qKlxuICAgICAqIOi9rOaNokRpY3REYXRhXG4gICAgICovXG4gICAgdHJhbnNmb3JtRGljdERhdGE6IHtcbiAgICAgIHR5cGU6IEZ1bmN0aW9uLFxuICAgICAgZGVmYXVsdDogdW5kZWZpbmVkXG4gICAgfVxuICB9LFxuICBlbWl0czogW1xuICAgIC8qKlxuICAgICAqIOWtl+WFuOaVsOaNruWPmOWMluS6i+S7tlxuICAgICAqL1xuICAgIFwiZGljdC1jaGFuZ2VcIixcblxuICAgIC8qKlxuICAgICAqIOmAieS4reWAvOWPmOWMluS6i+S7tu+8jOWPr+S7peiOt+WPluWIsOW9k+WJjemAieS4reeahG9wdGlvbuWvueixoVxuICAgICAqL1xuICAgIFwic2VsZWN0ZWQtY2hhbmdlXCIsXG4gICAgLyoqXG4gICAgICog5YC85Y+Y5YyW5LqL5Lu2XG4gICAgICovXG4gICAgXCJjaGFuZ2VcIlxuICBdLFxuICAvLyByZW5kZXIgKCkge1xuICAvLyAgIHJldHVybiB0aGlzLnJlbmRlckZ1bmMoeyBkYXRhOiB0aGlzLmRhdGEsIGRhdGFNYXA6IHRoaXMuZGF0YU1hcCwgc2NvcGU6IHRoaXMuc2NvcGUsIGF0dHJzOiB0aGlzLiRhdHRycyB9KVxuICAvLyB9LFxuICBzZXR1cChwcm9wcywgY3R4KSB7XG4gICAgY29uc3QgeyB0IH0gPSB1c2VJMThuKCk7XG4gICAgY29uc3QgeyB1aSB9ID0gdXNlVWkoKTtcbiAgICBjb25zdCBjb21wdXRlZFBsYWNlaG9sZGVyID0gY29tcHV0ZWQoKCkgPT4ge1xuICAgICAgcmV0dXJuIHByb3BzLnBsYWNlaG9sZGVyIHx8IHQoXCJmcy5jb21wb25lbnQuc2VsZWN0LnBsYWNlaG9sZGVyXCIpO1xuICAgIH0pO1xuXG4gICAgbGV0IHVzZWREaWN0ID0gdXNlRGljdChwcm9wcywgY3R4KTtcblxuICAgIGNvbnN0IHNsb3RzID0gY3R4LnNsb3RzO1xuXG4gICAgY29uc3QgY29tcHV0ZWRPcHRpb25zID0gdXNlZERpY3QuY3JlYXRlQ29tcHV0ZWRPcHRpb25zKCk7XG5cbiAgICBjb25zdCBjb21wdXRlZEJpbmRpbmcgPSBjb21wdXRlZCgoKSA9PiB7XG4gICAgICBjb25zdCBkaWN0ID0gdXNlZERpY3QuZ2V0RGljdCgpO1xuICAgICAgcmV0dXJuIHVpLnRyZWVTZWxlY3QuYnVpbGRPcHRpb25LZXlzTmFtZUJpbmRpbmcoe1xuICAgICAgICBsYWJlbDogZGljdC5sYWJlbCxcbiAgICAgICAgdmFsdWU6IGRpY3QudmFsdWUsXG4gICAgICAgIGNoaWxkcmVuOiBkaWN0LmNoaWxkcmVuXG4gICAgICB9KTtcbiAgICB9KTtcblxuICAgIGNvbnN0IG9uU2VsZWN0ZWRDaGFuZ2UgPSAodmFsdWU6IGFueSkgPT4ge1xuICAgICAgY3R4LmVtaXQoXCJjaGFuZ2VcIiwgdmFsdWUpO1xuICAgICAgaWYgKHZhbHVlKSB7XG4gICAgICAgIGNvbnN0IGRpY3QgPSB1c2VkRGljdC5nZXREaWN0KCk7XG4gICAgICAgIGlmIChkaWN0ICYmIGRpY3QuZGF0YU1hcCkge1xuICAgICAgICAgIGlmICh2YWx1ZSBpbnN0YW5jZW9mIEFycmF5KSB7XG4gICAgICAgICAgICBsZXQgc2VsZWN0ZWRPcHRpb25zID0gW107XG4gICAgICAgICAgICBmb3IgKGxldCBpdGVtIG9mIHZhbHVlKSB7XG4gICAgICAgICAgICAgIGNvbnN0IG9wdCA9IGRpY3QuZGF0YU1hcFtpdGVtXTtcbiAgICAgICAgICAgICAgaWYgKG9wdCkge1xuICAgICAgICAgICAgICAgIHNlbGVjdGVkT3B0aW9ucy5wdXNoKG9wdCk7XG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGN0eC5lbWl0KFwic2VsZWN0ZWQtY2hhbmdlXCIsIHNlbGVjdGVkT3B0aW9ucyk7XG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIGN0eC5lbWl0KFwic2VsZWN0ZWQtY2hhbmdlXCIsIGRpY3QuZGF0YU1hcFt2YWx1ZV0pO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfSBlbHNlIHtcbiAgICAgICAgY3R4LmVtaXQoXCJzZWxlY3RlZC1jaGFuZ2VcIiwgbnVsbCk7XG4gICAgICB9XG4gICAgfTtcblxuICAgIGNvbnN0IHRyZWVSZWYgPSByZWYoKTtcbiAgICByZXR1cm4ge1xuICAgICAgdWksXG4gICAgICBjb21wdXRlZEJpbmRpbmcsXG4gICAgICBjb21wdXRlZFBsYWNlaG9sZGVyLFxuICAgICAgLi4udXNlZERpY3QsXG4gICAgICBjb21wdXRlZE9wdGlvbnMsXG4gICAgICBvblNlbGVjdGVkQ2hhbmdlLFxuICAgICAgc2xvdHMsXG4gICAgICB0cmVlUmVmXG4gICAgfTtcbiAgfVxufSk7XG48L3NjcmlwdD5cbiIsIjx0ZW1wbGF0ZT5cbiAgPGRpdiBjbGFzcz1cImZzLXRhYmxlLXNlbGVjdFwiPlxuICAgIDx0ZW1wbGF0ZSB2LWlmPVwiIXNsb3RzPy5kZWZhdWx0ICYmICF2aWV3TW9kZVwiPlxuICAgICAgPGZzLWRpY3Qtc2VsZWN0XG4gICAgICAgIHYtYmluZD1cImNvbXB1dGVkU2VsZWN0XCJcbiAgICAgICAgcmVmPVwiZGljdFNlbGVjdFJlZlwiXG4gICAgICAgIDpkaXNhYmxlZD1cImRpc2FibGVkXCJcbiAgICAgICAgOnJlYWRvbmx5PVwicmVhZG9ubHlcIlxuICAgICAgICA6b3Blbj1cImZhbHNlXCJcbiAgICAgICAgOmRpY3Q9XCJkaWN0XCJcbiAgICAgICAgQGNsaWNrPVwib3BlblRhYmxlU2VsZWN0XCJcbiAgICAgIC8+XG4gICAgPC90ZW1wbGF0ZT5cbiAgICA8c2xvdCB2LWJpbmQ9XCJzY29wZVJlZlwiPjwvc2xvdD5cbiAgICA8Y29tcG9uZW50IDppcz1cInVpLmZvcm1JdGVtLnNraXBWYWxpZGF0aW9uV3JhcHBlclwiPlxuICAgICAgPGNvbXBvbmVudCA6aXM9XCJ1aS5kaWFsb2cubmFtZVwiIHYtbW9kZWw6W3VpLmRpYWxvZy52aXNpYmxlXT1cImRpYWxvZ09wZW5cIiB2LWJpbmQ9XCJjb21wdXRlZERpYWxvZ0JpbmRpbmdcIj5cbiAgICAgICAgPGRpdiB2LWlmPVwiZGlhbG9nT3BlblwiIDpzdHlsZT1cInsgd2lkdGg6ICcxMDAlJywgaGVpZ2h0OiBoZWlnaHQgfHwgJzYwdmgnIH1cIj5cbiAgICAgICAgICA8ZnMtY3J1ZCByZWY9XCJjcnVkUmVmXCIgdi1iaW5kPVwiY3J1ZEJpbmRpbmdcIj5cbiAgICAgICAgICAgIDx0ZW1wbGF0ZSAjaGVhZGVyLXRvcD5cbiAgICAgICAgICAgICAgPGRpdiB2LWlmPVwic2hvd0N1cnJlbnQgIT09IGZhbHNlICYmICF2aWV3TW9kZVwiIGNsYXNzPVwiZnMtdGFibGUtc2VsZWN0LWN1cnJlbnRcIj5cbiAgICAgICAgICAgICAgICDlvZPliY3pgInkuK3vvJpcbiAgICAgICAgICAgICAgICA8ZnMtdmFsdWVzLWZvcm1hdFxuICAgICAgICAgICAgICAgICAgcmVmPVwidmFsdWVzRm9ybWF0UmVmXCJcbiAgICAgICAgICAgICAgICAgIHYtbW9kZWw9XCJzZWxlY3RlZFJvd0tleXNcIlxuICAgICAgICAgICAgICAgICAgOmRpY3Q9XCJkaWN0XCJcbiAgICAgICAgICAgICAgICAgIDpjbG9zYWJsZT1cInRydWVcIlxuICAgICAgICAgICAgICAgICAgdi1iaW5kPVwiY29tcHV0ZWRWYWx1ZXNGb3JtYXRcIlxuICAgICAgICAgICAgICAgID48L2ZzLXZhbHVlcy1mb3JtYXQ+XG4gICAgICAgICAgICAgIDwvZGl2PlxuICAgICAgICAgICAgPC90ZW1wbGF0ZT5cbiAgICAgICAgICA8L2ZzLWNydWQ+XG4gICAgICAgIDwvZGl2PlxuICAgICAgICA8dGVtcGxhdGUgI1t1aS5kaWFsb2cuZm9vdGVyU2xvdE5hbWVdPlxuICAgICAgICAgIDxjb21wb25lbnQgOmlzPVwidWkuYnV0dG9uLm5hbWVcIiB2LWlmPVwiIXZpZXdNb2RlXCIgQGNsaWNrPVwiZGlhbG9nT3BlbiA9IGZhbHNlXCI+5Y+W5raIPC9jb21wb25lbnQ+XG4gICAgICAgICAgPGNvbXBvbmVudCA6aXM9XCJ1aS5idXR0b24ubmFtZVwiIHR5cGU9XCJwcmltYXJ5XCIgQGNsaWNrPVwib25Pa1wiPuehruiupDwvY29tcG9uZW50PlxuICAgICAgICA8L3RlbXBsYXRlPlxuICAgICAgPC9jb21wb25lbnQ+XG4gICAgPC9jb21wb25lbnQ+XG4gIDwvZGl2PlxuPC90ZW1wbGF0ZT5cbjxzY3JpcHQgbGFuZz1cInRzeFwiIHNldHVwPlxuaW1wb3J0IHsgRGljdCwgdXNlQ29tcHV0ZSwgdXNlRXhwb3NlLCB1c2VGcywgdXNlRnNBc3luYywgdXNlRnNSZWYsIHVzZU1lcmdlLCB1c2VVaSB9IGZyb20gXCIuLi8uLi91c2VcIjtcbmltcG9ydCB7IGNvbXB1dGVkLCBuZXh0VGljaywgcmVmLCBSZWYsIHdhdGNoIH0gZnJvbSBcInZ1ZVwiO1xuaW1wb3J0IHsgQ3JlYXRlQ3J1ZE9wdGlvbnMsIER5bmFtaWNhbGx5Q3J1ZE9wdGlvbnMgfSBmcm9tIFwiLi4vLi4vZFwiO1xuaW1wb3J0IHsgdXNlSTE4biB9IGZyb20gXCIuLi8uLi9sb2NhbGVcIjtcblxudHlwZSBGc1RhYmxlU2VsZWN0UHJvcHMgPSB7XG4gIC8qKlxuICAgKiBtb2RlbFZhbHVlXG4gICAqL1xuICBtb2RlbFZhbHVlOiBhbnk7XG4gIC8qKlxuICAgKiBjcnVkT3B0aW9uc+WIm+W7uuaWueazlVxuICAgKi9cbiAgY3JlYXRlQ3J1ZE9wdGlvbnM6IENyZWF0ZUNydWRPcHRpb25zO1xuICAvKipcbiAgICogY3J1ZE9wdGlvbnMg6KaG55uW6YWN572uXG4gICAqL1xuICBjcnVkT3B0aW9uc092ZXJyaWRlPzogRHluYW1pY2FsbHlDcnVkT3B0aW9ucztcblxuICAvKipcbiAgICog5omT5byA5a+56K+d5qGG5YmN77yM5Y+v5Lul5L+u5pS56YWN572uXG4gICAqIEBwYXJhbSBvcHRpb25zXG4gICAqL1xuICBiZWZvcmVPcGVuPzogKG9wdGlvbnM6IHtcbiAgICBjcnVkT3B0aW9uczogRHluYW1pY2FsbHlDcnVkT3B0aW9ucztcbiAgICBzZWxlY3RlZFJvd0tleXM6IGFueTtcbiAgICBvcGVuOiBhbnk7XG4gICAgb3BlbmVkOiBhbnk7XG4gICAgW2tleTogc3RyaW5nXTogYW55O1xuICB9KSA9PiBQcm9taXNlPHZvaWQ+O1xuICAvKipcbiAgICog5pWw5o2u5a2X5YW4XG4gICAqIOW/hemgiOmFjee9rmBnZXROb2Rlc0J5VmFsdWVzYOWPguaVsCzkvaDpnIDopoHlrp7njrDvvJrmoLnmja5pZOWIl+ihqOWQkeWQjuWPsOivt+axguWkmuihjOaVsOaNruW5tui/lOWbnlxuICAgKiBgZGljdC52YWx1ZeW/hemhu+S4jnRhYmxlLnJvd0tleeS4gOiHtGBcbiAgICovXG4gIGRpY3Q6IERpY3Q7XG4gIC8qKlxuICAgKiDpgInmi6nmoYYgZnMtZGljdC1zZWxlY3TphY3nva5cbiAgICovXG4gIHNlbGVjdD86IGFueTtcblxuICAvKipcbiAgICog5piv5ZCm5pi+56S66YCJ5oup5qGGXG4gICAqIOacieaXtuWAmeS9oOWPquaYr+aDs+imgemCo+S4qumAieaLqeeahERpYWxvZ++8jOmCo+S5iOS9oOWPr+S7pemakOiXj3NlbGVjdO+8jOeEtuWQjuiHquWumuS5iea/gOa0u+aWueW8j1xuICAgKi9cbiAgc2hvd1NlbGVjdD86IGJvb2xlYW47XG4gIC8qKlxuICAgKiDlr7nor53moYbphY3nva5cbiAgICovXG4gIGRpYWxvZz86IGFueTtcblxuICAvKipcbiAgICog5a+56K+d5qGG5Lit5piv5ZCm5pi+56S65b2T5YmN6YCJ5Lit5YC8XG4gICAqL1xuICBzaG93Q3VycmVudD86IGJvb2xlYW47XG4gIC8qKlxuICAgKiDlvZPliY3pgInkuK3lgLwgZnMtdmFsdWVzLWZvcm1hdOe7hOS7tiDphY3nva5cbiAgICovXG4gIHZhbHVlc0Zvcm1hdD86IGFueTtcblxuICAvKipcbiAgICogY3J1ZOmrmOW6plxuICAgKi9cbiAgaGVpZ2h0Pzogc3RyaW5nO1xuICAvKipcbiAgICog5piv5ZCm5aSa6YCJXG4gICAqL1xuICBtdWx0aXBsZT86IGJvb2xlYW47IC8v5Y2V6YCJ6L+Y5piv5aSa6YCJXG4gIC8qKlxuICAgKiDot6jpobXpgInkuK1cbiAgICovXG4gIGNyb3NzUGFnZT86IGJvb2xlYW47IC8v6Leo6aG16YCJ5LitXG5cbiAgLyoqXG4gICAqIOWPr+mAiSxlbGVtZW50LXBsdXPlv4XkvKBcbiAgICovXG4gIHJvd0tleT86IHN0cmluZztcblxuICBkaXNhYmxlZD86IGJvb2xlYW47XG5cbiAgcmVhZG9ubHk/OiBib29sZWFuO1xuXG4gIC8qKlxuICAgKiDlgLznsbvlnotcbiAgICovXG4gIHZhbHVlVHlwZT86IFwidmFsdWVcIiB8IFwib2JqZWN0XCI7XG5cbiAgLyoqXG4gICAqIOaYr+WQpuafpeeci+aooeW8j1xuICAgKi9cbiAgdmlld01vZGU/OiBib29sZWFuO1xuXG4gIC8qKlxuICAgKiB0YWJsZeaYr+WQpui3n+maj+eql+WPo+WFs+mXreiAjOmUgOavgVxuICAgKi9cbiAgZGVzdHJveU9uQ2xvc2U/OiBib29sZWFuO1xufTtcbmNvbnN0IHByb3BzID0gd2l0aERlZmF1bHRzKGRlZmluZVByb3BzPEZzVGFibGVTZWxlY3RQcm9wcz4oKSwge1xuICBjcm9zc1BhZ2U6IHRydWUsXG4gIHJvd0tleTogdW5kZWZpbmVkLFxuICBkaXNhYmxlZDogZmFsc2UsXG4gIHJlYWRvbmx5OiBmYWxzZSxcbiAgaGVpZ2h0OiB1bmRlZmluZWQsXG4gIHZhbHVlc0Zvcm1hdDogdW5kZWZpbmVkLFxuICBkaWFsb2c6IHVuZGVmaW5lZCxcbiAgc2VsZWN0OiB1bmRlZmluZWQsXG4gIGNydWRPcHRpb25zT3ZlcnJpZGU6IHVuZGVmaW5lZCxcbiAgdmFsdWVUeXBlOiBcInZhbHVlXCIsXG4gIHNob3dTZWxlY3Q6IHRydWUsXG4gIHNob3dDdXJyZW50OiB0cnVlLFxuICB2aWV3TW9kZTogZmFsc2UsXG4gIGRlc3Ryb3lPbkNsb3NlOiB0cnVlXG59KTtcblxuY29uc3Qgc2xvdHMgPSBkZWZpbmVTbG90czx7XG4gIC8qKmBcbiAgICog6buY6K6k5o+S5qe9XG4gICAqIGBgYGpzXG4gICAqIHNjb3BlID0ge1xuICAgKiAgLy/mmK/lkKblt7LmiZPlvIBcbiAgICogIG9wZW5lZDpib29sZWFuLFxuICAgKiAgLy/miZPlvIDmlrnms5VcbiAgICogIG9wZW46KCk9PnZvaWRcbiAgICogfVxuICAgKiBgYGBcbiAgICovXG4gIGRlZmF1bHQ6IGFueTtcbn0+KCk7XG5cbmNvbnN0IGVtaXRzID0gZGVmaW5lRW1pdHMoW1xuICBcImNoYW5nZVwiLFxuICBcInVwZGF0ZTptb2RlbFZhbHVlXCIsXG4gIC8qIOmAieS4reihjOWPmOWMluS6i+S7tiAqL1xuICBcInNlbGVjdGVkLWNoYW5nZVwiLFxuICAvKuWvueivneahhuWNs+WwhuWFs+mXrSovXG4gIFwiZGlhbG9nLWNsb3NlXCIsXG4gIC8q5a+56K+d5qGG5bey5YWz6ZetKi9cbiAgXCJkaWFsb2ctY2xvc2VkXCJcbl0pO1xuY29uc3QgeyB1aSB9ID0gdXNlVWkoKTtcbmNvbnN0IHsgdCB9ID0gdXNlSTE4bigpO1xuY29uc3QgZGljdFNlbGVjdFJlZiA9IHJlZigpO1xuY29uc3QgdmFsdWVzRm9ybWF0UmVmID0gcmVmKCk7XG5jb25zdCBkaWFsb2dPcGVuID0gcmVmKGZhbHNlKTtcblxuY29uc3QgeyBjcnVkUmVmLCBjcnVkQmluZGluZywgY29udGV4dCB9ID0gdXNlRnNSZWYoKTtcblxuZnVuY3Rpb24gaW5pdFNlbGVjdGVkS2V5cyhtb2RlbFZhbHVlOiBhbnkpIHtcbiAgaWYgKG1vZGVsVmFsdWUgPT0gbnVsbCB8fCAoQXJyYXkuaXNBcnJheShtb2RlbFZhbHVlKSAmJiBtb2RlbFZhbHVlLmxlbmd0aCA9PSAwKSkge1xuICAgIHNlbGVjdGVkUm93S2V5cy52YWx1ZSA9IFtdO1xuICB9IGVsc2Uge1xuICAgIGlmIChwcm9wcy5tdWx0aXBsZSkge1xuICAgICAgc2VsZWN0ZWRSb3dLZXlzLnZhbHVlID0gbW9kZWxWYWx1ZSB8fCBbXTtcbiAgICB9IGVsc2Uge1xuICAgICAgc2VsZWN0ZWRSb3dLZXlzLnZhbHVlID0gW21vZGVsVmFsdWVdO1xuICAgIH1cbiAgICBpZiAocHJvcHMudmFsdWVUeXBlID09PSBcIm9iamVjdFwiKSB7XG4gICAgICBzZWxlY3RlZFJvd0tleXMudmFsdWUgPSBzZWxlY3RlZFJvd0tleXMudmFsdWUubWFwKChpdGVtKSA9PiB7XG4gICAgICAgIHJldHVybiBwcm9wcy5kaWN0LmdldFZhbHVlKGl0ZW0pO1xuICAgICAgfSk7XG4gICAgfVxuICB9XG59XG5cbmNvbnN0IHsgY3J1ZEV4cG9zZSB9ID0gdXNlRXhwb3NlKHsgY3J1ZFJlZiwgY3J1ZEJpbmRpbmcgfSk7XG5jb25zdCBvcGVuVGFibGVTZWxlY3QgPSBhc3luYyAob3Blbk9wdGlvbnM6IHsgY3J1ZE9wdGlvbnM6IER5bmFtaWNhbGx5Q3J1ZE9wdGlvbnMgfSkgPT4ge1xuICBpZiAocHJvcHMuZGlzYWJsZWQgfHwgcHJvcHMucmVhZG9ubHkgfHwgcHJvcHMuc2VsZWN0Py5kaXNhYmxlZCB8fCBwcm9wcy5zZWxlY3Q/LnJlYWRvbmx5KSB7XG4gICAgcmV0dXJuO1xuICB9XG4gIGlmIChwcm9wcy5kaWN0ID09IG51bGwpIHtcbiAgICB0aHJvdyBuZXcgRXJyb3IoXCLlv4XpobvphY3nva5kaWN077yM5LiU5b+F6aG76YWN572uZGljdC5nZXROb2Rlc0J5VmFsdWVzXCIpO1xuICB9XG5cbiAgY29uc3QgcmV0ID0gYXdhaXQgdXNlRnNBc3luYyh7XG4gICAgY3J1ZEJpbmRpbmcsXG4gICAgY3J1ZFJlZixcbiAgICBjcmVhdGVDcnVkT3B0aW9uczogcHJvcHMuY3JlYXRlQ3J1ZE9wdGlvbnMsXG4gICAgY3J1ZE9wdGlvbnNPdmVycmlkZTogYnVpbGRNZXJnZWRDcnVkT3B0aW9ucygpLFxuICAgIGNvbnRleHQsXG4gICAgY3J1ZEV4cG9zZVxuICB9KTtcbiAgZGlhbG9nT3Blbi52YWx1ZSA9IHRydWU7XG4gIGluaXRTZWxlY3RlZEtleXMocHJvcHMubW9kZWxWYWx1ZSk7XG4gIGlmIChwcm9wcy5iZWZvcmVPcGVuKSB7XG4gICAgYXdhaXQgcHJvcHMuYmVmb3JlT3Blbih7XG4gICAgICBjcnVkT3B0aW9uczogb3Blbk9wdGlvbnMuY3J1ZE9wdGlvbnMsXG4gICAgICAuLi5nZXRTY29wZUNvbnRleHQoKVxuICAgIH0pO1xuICB9XG4gIGlmIChvcGVuT3B0aW9ucykge1xuICAgIHJldC5hcHBlbmRDcnVkT3B0aW9ucyhvcGVuT3B0aW9ucy5jcnVkT3B0aW9ucyk7XG4gIH1cblxuICBhd2FpdCBuZXh0VGljaygpO1xuICBhd2FpdCBjcnVkRXhwb3NlLmRvUmVmcmVzaCgpO1xuICByZXR1cm4gcmV0O1xufTtcblxuY29uc3QgY29tcHV0ZWRWYWx1ZXNGb3JtYXQgPSBjb21wdXRlZCgoKSA9PiB7XG4gIHJldHVybiB7XG4gICAgLi4ucHJvcHMudmFsdWVzRm9ybWF0XG4gIH07XG59KTtcblxuY29uc3QgY29tcHV0ZWRTZWxlY3QgPSBjb21wdXRlZCgoKSA9PiB7XG4gIGNvbnN0IHVwZGF0ZUtleSA9IGBvblVwZGF0ZToke3VpLnNlbGVjdC5tb2RlbFZhbHVlfWA7XG5cbiAgbGV0IHZhbHVlID0gcHJvcHMubW9kZWxWYWx1ZTtcbiAgaWYgKHByb3BzLnZhbHVlVHlwZSA9PT0gXCJvYmplY3RcIiAmJiBwcm9wcy5tb2RlbFZhbHVlKSB7XG4gICAgaWYgKHByb3BzLm11bHRpcGxlKSB7XG4gICAgICB2YWx1ZSA9IHByb3BzLm1vZGVsVmFsdWUubWFwKChpdGVtOiBhbnkpID0+IHtcbiAgICAgICAgcmV0dXJuIHByb3BzLmRpY3QuZ2V0VmFsdWUoaXRlbSk7XG4gICAgICB9KTtcbiAgICB9IGVsc2Uge1xuICAgICAgdmFsdWUgPSBwcm9wcy5kaWN0LmdldFZhbHVlKHByb3BzLm1vZGVsVmFsdWUpO1xuICAgIH1cbiAgfVxuICByZXR1cm4ge1xuICAgIFt1aS5zZWxlY3QubW9kZWxWYWx1ZV06IHZhbHVlLFxuICAgIFt1cGRhdGVLZXldOiAodmFsdWU6IGFueSkgPT4ge1xuICAgICAgZW1pdHMoXCJ1cGRhdGU6bW9kZWxWYWx1ZVwiLCB2YWx1ZSk7XG4gICAgfSxcbiAgICBbdWkuc2VsZWN0LmNsZWFyYWJsZV06IHRydWUsXG4gICAgLi4udWkuc2VsZWN0LmJ1aWxkTXVsdGlCaW5kaW5nKHByb3BzLm11bHRpcGxlKSxcbiAgICBzaG93OiBmYWxzZSxcbiAgICAuLi5wcm9wcy5zZWxlY3RcbiAgfTtcbn0pO1xuXG5jb25zdCBjb21wdXRlZERpYWxvZ0JpbmRpbmcgPSBjb21wdXRlZCgoKSA9PiB7XG4gIGNvbnN0IGJhc2UgPSB1aS5kaWFsb2cuYnVpbGRQcm9wcyh7XG4gICAgdGl0bGU6IHByb3BzLnZpZXdNb2RlID8gdChcImZzLmV4dGVuZHMudGFibGVTZWxlY3Qudmlld1wiKSA6IHQoXCJmcy5leHRlbmRzLnRhYmxlU2VsZWN0LnNlbGVjdFwiKSxcbiAgICB3aWR0aDogXCI4MCVcIlxuICB9KTtcbiAgcmV0dXJuIG1lcmdlKGJhc2UsIHByb3BzLmRpYWxvZyk7XG59KTtcblxud2F0Y2goXG4gICgpID0+IHtcbiAgICByZXR1cm4gcHJvcHMubW9kZWxWYWx1ZTtcbiAgfSxcbiAgYXN5bmMgKHZhbHVlKSA9PiB7XG4gICAgaWYgKHZhbHVlID09PSBzZWxlY3RlZFJvd0tleXMudmFsdWUpIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG4gICAgaW5pdFNlbGVjdGVkS2V5cyh2YWx1ZSk7XG4gICAgYXdhaXQgbmV4dFRpY2soKTtcbiAgICBhd2FpdCBwcm9wcy5kaWN0LmFwcGVuZEJ5VmFsdWVzKHNlbGVjdGVkUm93S2V5cy52YWx1ZSk7XG4gICAgLy8gZGljdFNlbGVjdFJlZi52YWx1ZS5yZWxvYWREaWN0KCk7XG4gIH1cbik7XG5jb25zdCBzZWxlY3RlZFJvd0tleXM6IFJlZjxhbnlbXT4gPSByZWYoW10pO1xuXG5mdW5jdGlvbiBnZXRSb3dLZXkoKSB7XG4gIHJldHVybiBwcm9wcy5yb3dLZXkgfHwgY3J1ZEJpbmRpbmcudmFsdWUudGFibGUucm93S2V5IHx8IFwiaWRcIjtcbn1cbmNvbnN0IHJlZnJlc2hpbmcgPSByZWYoZmFsc2UpO1xuXG5mdW5jdGlvbiBidWlsZE1lcmdlZENydWRPcHRpb25zKCkge1xuICBsZXQgc2VsZWN0aW9uT3B0aW9ucyA9IHVpLnRhYmxlLmJ1aWxkU2VsZWN0aW9uQ3J1ZE9wdGlvbnMoe1xuICAgIGNyb3NzUGFnZTogcHJvcHMuY3Jvc3NQYWdlLFxuICAgIHNlbGVjdE9uQ2xpY2tSb3c6IHRydWUsXG4gICAgZ2V0Um93S2V5LFxuICAgIGdldFBhZ2VEYXRhKCkge1xuICAgICAgcmV0dXJuIGNydWRCaW5kaW5nLnZhbHVlLmRhdGE7XG4gICAgfSxcbiAgICB1c2VDb21wdXRlOiB1c2VDb21wdXRlLFxuICAgIG11bHRpcGxlOiBwcm9wcy5tdWx0aXBsZSxcbiAgICBzZWxlY3RlZFJvd0tleXMsXG4gICAgb25TZWxlY3RlZEtleXNDaGFuZ2VkOiBhc3luYyAoY2hhbmdlZCkgPT4ge1xuICAgICAgc2VsZWN0ZWRSb3dLZXlzLnZhbHVlID0gWy4uLmNoYW5nZWRdO1xuICAgICAgYXdhaXQgbmV4dFRpY2soKTtcbiAgICAgIGF3YWl0IHByb3BzLmRpY3QuYXBwZW5kQnlWYWx1ZXMoc2VsZWN0ZWRSb3dLZXlzLnZhbHVlKTtcbiAgICAgIC8vIGlmICh2YWx1ZXNGb3JtYXRSZWYudmFsdWUpIHtcbiAgICAgIC8vICAgdmFsdWVzRm9ybWF0UmVmLnZhbHVlLnJlbG9hZERpY3QoKTtcbiAgICAgIC8vIH1cbiAgICB9XG4gIH0pO1xuICBjb25zdCBjcnVkT3B0aW9ucyA9IHtcbiAgICB0YWJsZToge1xuICAgICAgYXN5bmMgb25SZWZyZXNoZWQoKSB7XG4gICAgICAgIGlmICh1aS50YWJsZS5zZXRTZWxlY3RlZFJvd3MpIHtcbiAgICAgICAgICByZWZyZXNoaW5nLnZhbHVlID0gdHJ1ZTtcbiAgICAgICAgICBhd2FpdCBuZXh0VGljaygpO1xuICAgICAgICAgIGF3YWl0IG5leHRUaWNrKCk7XG4gICAgICAgICAgY29uc3QgYmFzZVRhYmxlUmVmID0gY3J1ZEV4cG9zZS5nZXRCYXNlVGFibGVSZWYoKTtcbiAgICAgICAgICB1aS50YWJsZS5zZXRTZWxlY3RlZFJvd3Moe1xuICAgICAgICAgICAgZ2V0Um93S2V5LFxuICAgICAgICAgICAgbXVsdGlwbGU6IHByb3BzLm11bHRpcGxlLFxuICAgICAgICAgICAgdGFibGVSZWY6IGJhc2VUYWJsZVJlZixcbiAgICAgICAgICAgIHNlbGVjdGVkUm93S2V5c1xuICAgICAgICAgIH0pO1xuICAgICAgICAgIHJlZnJlc2hpbmcudmFsdWUgPSBmYWxzZTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cbiAgfTtcbiAgcmV0dXJuIG1lcmdlKGNydWRPcHRpb25zLCBzZWxlY3Rpb25PcHRpb25zLCBwcm9wcy5jcnVkT3B0aW9uc092ZXJyaWRlKTtcbn1cblxuY29uc3QgeyBtZXJnZSB9ID0gdXNlTWVyZ2UoKTtcblxuLy8gd2F0Y2goXG4vLyAgICgpID0+IHtcbi8vICAgICByZXR1cm4gcHJvcHMuY3J1ZE9wdGlvbnNPdmVycmlkZTtcbi8vICAgfSxcbi8vICAgYXN5bmMgKHZhbHVlLCBvbGRWYWx1ZSkgPT4ge1xuLy8gICAgIGlmIChKU09OLnN0cmluZ2lmeSh2YWx1ZSkgPT09IEpTT04uc3RyaW5naWZ5KG9sZFZhbHVlKSkge1xuLy8gICAgICAgcmV0dXJuO1xuLy8gICAgIH1cbi8vICAgICBjb25zdCBjdXIgPSBjcnVkQmluZGluZy52YWx1ZT8ucGFnaW5hdGlvblt1aS5wYWdpbmF0aW9uLmN1cnJlbnRQYWdlXTtcbi8vICAgICBhcHBlbmRDcnVkT3B0aW9ucyh2YWx1ZSk7XG4vLyAgICAgaWYgKGNydWRSZWYudmFsdWUpIHtcbi8vICAgICAgIGNydWRCaW5kaW5nLnZhbHVlLnBhZ2luYXRpb25bdWkucGFnaW5hdGlvbi5jdXJyZW50UGFnZV0gPSBjdXI7XG4vLyAgICAgICBhd2FpdCBjcnVkRXhwb3NlLmRvUmVmcmVzaCh7IGdvRmlyc3RQYWdlOiBmYWxzZSB9KTtcbi8vICAgICB9XG4vLyAgIH1cbi8vICk7XG5cbmFzeW5jIGZ1bmN0aW9uIG9uT2soKSB7XG4gIGlmIChwcm9wcy5kaWN0LmxvYWRpbmcpIHtcbiAgICByZXR1cm47XG4gIH1cbiAgbGV0IHZhbHVlID0gbnVsbDtcbiAgbGV0IHJvd3MgPSBudWxsO1xuICBpZiAoc2VsZWN0ZWRSb3dLZXlzLnZhbHVlPy5sZW5ndGggPiAwKSB7XG4gICAgdmFsdWUgPSBbLi4uc2VsZWN0ZWRSb3dLZXlzLnZhbHVlXTtcblxuICAgIHJvd3MgPSB2YWx1ZS5tYXAoKGl0ZW0pID0+IHtcbiAgICAgIHJldHVybiBwcm9wcy5kaWN0LmdldERpY3RNYXAoKVtpdGVtXTtcbiAgICB9KTtcbiAgICBpZiAocHJvcHMudmFsdWVUeXBlID09PSBcIm9iamVjdFwiKSB7XG4gICAgICB2YWx1ZSA9IHJvd3M7XG4gICAgfVxuXG4gICAgaWYgKHByb3BzLm11bHRpcGxlICE9PSB0cnVlICYmIHZhbHVlLmxlbmd0aCA+IDApIHtcbiAgICAgIHZhbHVlID0gdmFsdWVbMF07XG4gICAgfVxuICB9XG5cbiAgaWYgKCFwcm9wcy52aWV3TW9kZSkge1xuICAgIC8v6Z2edmlld+aooeW8j+S4i++8jOmcgOimgeabtOaWsHZhbHVlXG4gICAgZW1pdHMoXCJ1cGRhdGU6bW9kZWxWYWx1ZVwiLCB2YWx1ZSk7XG4gICAgZW1pdHMoXCJjaGFuZ2VcIiwgdmFsdWUpO1xuICAgIGVtaXRzKFwic2VsZWN0ZWQtY2hhbmdlXCIsIHJvd3MpO1xuICB9XG4gIGRpYWxvZ09wZW4udmFsdWUgPSBmYWxzZTtcblxuICBsZXQgc2NvcGUgPSB7XG4gICAgdmFsdWUsXG4gICAgcm93cyxcbiAgICBzZWxlY3RlZFJvd0tleXM6IHNlbGVjdGVkUm93S2V5cy52YWx1ZVxuICB9O1xuICBlbWl0cyhcImRpYWxvZy1jbG9zZVwiLCBzY29wZSk7XG4gIGF3YWl0IG5leHRUaWNrKCk7XG4gIGVtaXRzKFwiZGlhbG9nLWNsb3NlZFwiLCBzY29wZSk7XG59XG5cbmNvbnN0IGdldFNjb3BlQ29udGV4dCA9ICgpID0+IHtcbiAgcmV0dXJuIHtcbiAgICBvcGVuZWQ6IGRpYWxvZ09wZW4sXG4gICAgb3Blbjogb3BlblRhYmxlU2VsZWN0LFxuICAgIHNlbGVjdGVkUm93S2V5cyxcbiAgICBkaWN0U2VsZWN0UmVmLFxuICAgIHZhbHVlc0Zvcm1hdFJlZixcbiAgICBjcnVkUmVmLFxuICAgIGNydWRCaW5kaW5nLFxuICAgIGNydWRFeHBvc2VcbiAgfTtcbn07XG5cbmNvbnN0IHNjb3BlUmVmID0gcmVmKGdldFNjb3BlQ29udGV4dCgpKTtcbmRlZmluZUV4cG9zZShzY29wZVJlZi52YWx1ZSk7XG48L3NjcmlwdD5cbjxzdHlsZSBsYW5nPVwibGVzc1wiPlxuLmZzLXRhYmxlLXNlbGVjdCB7XG4gIHdpZHRoOiAxMDAlO1xuICAuZWwtZGlhbG9nX19ib2R5IHtcbiAgICBwYWRkaW5nLXRvcDogMDtcbiAgICBwYWRkaW5nLWJvdHRvbTogMDtcbiAgfVxufVxuLmZzLXRhYmxlLXNlbGVjdC1jdXJyZW50IHtcbiAgLy9ib3JkZXI6IDFweCBzb2xpZCAjZWVlO1xuICAvL2JvcmRlci1yYWRpdXM6IDNweDtcbiAgcGFkZGluZzogMTBweCAwO1xufVxuPC9zdHlsZT5cbiIsbnVsbCwiLyogZXNsaW50LWRpc2FibGUgKi9cblxuLypcbiAg5q2k5Luj56CB5p2l5rqQ5LqOaXZpZXfooajmoLznu4Tku7bnmoRDU1blr7zlh7rpg6jliIZcbiAgaHR0cHM6Ly9naXRodWIuY29tL2l2aWV3L2l2aWV3XG4qL1xuXG5mdW5jdGlvbiBoYXMgKGJyb3dzZXIpIHtcbiAgICBjb25zdCB1YSA9IG5hdmlnYXRvci51c2VyQWdlbnQ7XG4gICAgaWYgKGJyb3dzZXIgPT09ICdpZScpIHtcbiAgICAgICAgY29uc3QgaXNJRSA9IHVhLmluZGV4T2YoJ2NvbXBhdGlibGUnKSA+IC0xICYmIHVhLmluZGV4T2YoJ01TSUUnKSA+IC0xO1xuICAgICAgICBpZiAoaXNJRSkge1xuICAgICAgICAgICAgY29uc3QgcmVJRSA9IG5ldyBSZWdFeHAoJ01TSUUgKFxcXFxkK1xcXFwuXFxcXGQrKTsnKTtcbiAgICAgICAgICAgIHJlSUUudGVzdCh1YSk7XG4gICAgICAgICAgICByZXR1cm4gcGFyc2VGbG9hdChSZWdFeHBbJyQxJ10pO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICB9XG4gICAgfSBlbHNlIHtcbiAgICAgICAgcmV0dXJuIHVhLmluZGV4T2YoYnJvd3NlcikgPiAtMTtcbiAgICB9XG59XG5cbmNvbnN0IGNzdiA9IHtcbiAgICBfaXNJRTExICgpIHtcbiAgICAgICAgbGV0IGlldiA9IDA7XG4gICAgICAgIGNvbnN0IGllb2xkID0gKC9NU0lFIChcXGQrXFwuXFxkKyk7Ly50ZXN0KG5hdmlnYXRvci51c2VyQWdlbnQpKTtcbiAgICAgICAgY29uc3QgdHJpZGVudCA9ICEhbmF2aWdhdG9yLnVzZXJBZ2VudC5tYXRjaCgvVHJpZGVudFxcLzcuMC8pO1xuICAgICAgICBjb25zdCBydiA9IG5hdmlnYXRvci51c2VyQWdlbnQuaW5kZXhPZigncnY6MTEuMCcpO1xuXG4gICAgICAgIGlmIChpZW9sZCkge1xuICAgICAgICAgICAgaWV2ID0gTnVtYmVyKFJlZ0V4cC4kMSk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKG5hdmlnYXRvci5hcHBWZXJzaW9uLmluZGV4T2YoJ01TSUUgMTAnKSAhPT0gLTEpIHtcbiAgICAgICAgICAgIGlldiA9IDEwO1xuICAgICAgICB9XG4gICAgICAgIGlmICh0cmlkZW50ICYmIHJ2ICE9PSAtMSkge1xuICAgICAgICAgICAgaWV2ID0gMTE7XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4gaWV2ID09PSAxMTtcbiAgICB9LFxuXG4gICAgX2lzRWRnZSAoKSB7XG4gICAgICAgIHJldHVybiAvRWRnZS8udGVzdChuYXZpZ2F0b3IudXNlckFnZW50KTtcbiAgICB9LFxuXG4gICAgX2dldERvd25sb2FkVXJsICh0ZXh0KSB7XG4gICAgICAgIGNvbnN0IEJPTSA9ICdcXHVGRUZGJztcbiAgICAgICAgLy8gQWRkIEJPTSB0byB0ZXh0IGZvciBvcGVuIGluIGV4Y2VsIGNvcnJlY3RseVxuICAgICAgICBpZiAod2luZG93LkJsb2IgJiYgd2luZG93LlVSTCAmJiB3aW5kb3cuVVJMLmNyZWF0ZU9iamVjdFVSTCkge1xuICAgICAgICAgICAgY29uc3QgY3N2RGF0YSA9IG5ldyBCbG9iKFtCT00gKyB0ZXh0XSwgeyB0eXBlOiAndGV4dC9jc3YnIH0pO1xuICAgICAgICAgICAgcmV0dXJuIFVSTC5jcmVhdGVPYmplY3RVUkwoY3N2RGF0YSk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICByZXR1cm4gJ2RhdGE6YXR0YWNobWVudC9jc3Y7Y2hhcnNldD11dGYtOCwnICsgQk9NICsgZW5jb2RlVVJJQ29tcG9uZW50KHRleHQpO1xuICAgICAgICB9XG4gICAgfSxcblxuICAgIGRvd25sb2FkIChmaWxlbmFtZSwgdGV4dCkge1xuICAgICAgICBpZiAoaGFzKCdpZScpICYmIGhhcygnaWUnKSA8IDEwKSB7XG4gICAgICAgICAgICAvLyBoYXMgbW9kdWxlIHVuYWJsZSBpZGVudGlmeSBpZTExIGFuZCBFZGdlXG4gICAgICAgICAgICBjb25zdCBvV2luID0gd2luZG93LnRvcC5vcGVuKCdhYm91dDpibGFuaycsICdfYmxhbmsnKTtcbiAgICAgICAgICAgIG9XaW4uZG9jdW1lbnQuY2hhcnNldCA9ICd1dGYtOCc7XG4gICAgICAgICAgICBvV2luLmRvY3VtZW50LndyaXRlKHRleHQpO1xuICAgICAgICAgICAgb1dpbi5kb2N1bWVudC5jbG9zZSgpO1xuICAgICAgICAgICAgb1dpbi5kb2N1bWVudC5leGVjQ29tbWFuZCgnU2F2ZUFzJywgZmlsZW5hbWUgKyAnLmNzdicpO1xuICAgICAgICAgICAgb1dpbi5jbG9zZSgpO1xuICAgICAgICB9IGVsc2UgaWYgKGhhcygnaWUnKSA9PT0gMTAgfHwgdGhpcy5faXNJRTExKCkgfHwgdGhpcy5faXNFZGdlKCkpIHtcbiAgICAgICAgICAgIGNvbnN0IEJPTSA9ICdcXHVGRUZGJztcbiAgICAgICAgICAgIGNvbnN0IGNzdkRhdGEgPSBuZXcgQmxvYihbQk9NICsgdGV4dF0sIHsgdHlwZTogJ3RleHQvY3N2JyB9KTtcbiAgICAgICAgICAgIG5hdmlnYXRvci5tc1NhdmVCbG9iKGNzdkRhdGEsIGZpbGVuYW1lICsgJy5jc3YnKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIGNvbnN0IGxpbmsgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdhJyk7XG4gICAgICAgICAgICBsaW5rLmRvd25sb2FkID0gZmlsZW5hbWUgKyAnLmNzdic7XG4gICAgICAgICAgICBsaW5rLmhyZWYgPSB0aGlzLl9nZXREb3dubG9hZFVybCh0ZXh0KTtcbiAgICAgICAgICAgIGRvY3VtZW50LmJvZHkuYXBwZW5kQ2hpbGQobGluayk7XG4gICAgICAgICAgICBsaW5rLmNsaWNrKCk7XG4gICAgICAgICAgICBkb2N1bWVudC5ib2R5LnJlbW92ZUNoaWxkKGxpbmspO1xuICAgICAgICB9XG4gICAgfVxufTtcblxuZXhwb3J0IGRlZmF1bHQgY3N2OyIsIi8qXG4gIGluc3BpcmVkIGJ5IGh0dHBzOi8vd3d3Lm5wbWpzLmNvbS9wYWNrYWdlL3JlYWN0LWNzdi1kb3dubG9hZGVyXG4gIG5vdyByZW1vdmVkIGZyb20gR2l0aHViXG4gIGluc3BpcmVkIGJ5IGh0dHBzOi8vZ2l0aHViLmNvbS9pdmlldy9pdmlld1xuKi9cblxuLyogZXNsaW50LWRpc2FibGUgKi9cblxuY29uc3QgbmV3TGluZSA9ICdcXHJcXG4nO1xuY29uc3QgYXBwZW5kTGluZSA9IChjb250ZW50LCByb3csIHsgc2VwYXJhdG9yLCBxdW90ZWQgfSkgPT4ge1xuICAgIGNvbnN0IGxpbmUgPSByb3cubWFwKGRhdGEgPT4ge1xuICAgICAgICBpZiAoIXF1b3RlZCkgcmV0dXJuIGRhdGE7XG4gICAgICAgIC8vIHF1b3RlIGRhdGFcbiAgICAgICAgZGF0YSA9IHR5cGVvZiBkYXRhID09PSAnc3RyaW5nJyA/IGRhdGEucmVwbGFjZSgvXCIvZywgJ1wiJykgOiBkYXRhO1xuICAgICAgICByZXR1cm4gYFwiJHtkYXRhfVwiYDtcbiAgICB9KTtcbiAgICBjb250ZW50LnB1c2gobGluZS5qb2luKHNlcGFyYXRvcikpO1xufTtcblxuY29uc3QgZGVmYXVsdHMgPSB7XG4gICAgc2VwYXJhdG9yOiAnLCcsXG4gICAgcXVvdGVkOiBmYWxzZVxufTtcblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gY3N2KGNvbHVtbnMsIGRhdGFzLCBvcHRpb25zLCBub0hlYWRlciA9IGZhbHNlKSB7XG4gICAgb3B0aW9ucyA9IE9iamVjdC5hc3NpZ24oe30sIGRlZmF1bHRzLCBvcHRpb25zKTtcbiAgICBsZXQgY29sdW1uT3JkZXI7XG4gICAgY29uc3QgY29udGVudCA9IFtdO1xuICAgIGNvbnN0IGNvbHVtbiA9IFtdO1xuXG4gICAgaWYgKGNvbHVtbnMpIHtcbiAgICAgICAgY29sdW1uT3JkZXIgPSBjb2x1bW5zLm1hcCh2ID0+IHtcbiAgICAgICAgICAgIGlmICh0eXBlb2YgdiA9PT0gJ3N0cmluZycpIHJldHVybiB2O1xuICAgICAgICAgICAgaWYgKCFub0hlYWRlcikge1xuICAgICAgICAgICAgICAgIGNvbHVtbi5wdXNoKHR5cGVvZiB2LmxhYmVsICE9PSAndW5kZWZpbmVkJyA/IHYubGFiZWwgOiB2LnByb3ApO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcmV0dXJuIHYucHJvcDtcbiAgICAgICAgfSk7XG4gICAgICAgIGlmIChjb2x1bW4ubGVuZ3RoID4gMCkgYXBwZW5kTGluZShjb250ZW50LCBjb2x1bW4sIG9wdGlvbnMpO1xuICAgIH0gZWxzZSB7XG4gICAgICAgIGNvbHVtbk9yZGVyID0gW107XG4gICAgICAgIGRhdGFzLmZvckVhY2godiA9PiB7XG4gICAgICAgICAgICBpZiAoIUFycmF5LmlzQXJyYXkodikpIHtcbiAgICAgICAgICAgICAgICBjb2x1bW5PcmRlciA9IGNvbHVtbk9yZGVyLmNvbmNhdChPYmplY3Qua2V5cyh2KSk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0pO1xuICAgICAgICBpZiAoY29sdW1uT3JkZXIubGVuZ3RoID4gMCkge1xuICAgICAgICAgICAgY29sdW1uT3JkZXIgPSBjb2x1bW5PcmRlci5maWx0ZXIoKHZhbHVlLCBpbmRleCwgc2VsZikgPT4gc2VsZi5pbmRleE9mKHZhbHVlKSA9PT0gaW5kZXgpO1xuICAgICAgICAgICAgaWYgKCFub0hlYWRlcikgYXBwZW5kTGluZShjb250ZW50LCBjb2x1bW5PcmRlciwgb3B0aW9ucyk7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBpZiAoQXJyYXkuaXNBcnJheShkYXRhcykpIHtcbiAgICAgICAgZGF0YXMuZm9yRWFjaChyb3cgPT4ge1xuICAgICAgICAgICAgaWYgKCFBcnJheS5pc0FycmF5KHJvdykpIHtcbiAgICAgICAgICAgICAgICByb3cgPSBjb2x1bW5PcmRlci5tYXAoayA9PiAodHlwZW9mIHJvd1trXSAhPT0gJ3VuZGVmaW5lZCcgPyByb3dba10gOiAnJykpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgYXBwZW5kTGluZShjb250ZW50LCByb3csIG9wdGlvbnMpO1xuICAgICAgICB9KTtcbiAgICB9XG4gICAgcmV0dXJuIGNvbnRlbnQuam9pbihuZXdMaW5lKTtcbn1cbiIsIi8qIGVzbGludC1kaXNhYmxlICovXG4vKiBCbG9iLmpzXG4gKiBBIEJsb2IgaW1wbGVtZW50YXRpb24uXG4gKiAyMDE0LTA1LTI3XG4gKlxuICogQnkgRWxpIEdyZXksIGh0dHA6Ly9lbGlncmV5LmNvbVxuICogQnkgRGV2aW4gU2FtYXJpbiwgaHR0cHM6Ly9naXRodWIuY29tL2Vib3lqclxuICogTGljZW5zZTogWDExL01JVFxuICogICBTZWUgTElDRU5TRS5tZFxuICovXG5cbi8qZ2xvYmFsIHNlbGYsIHVuZXNjYXBlICovXG4vKmpzbGludCBiaXR3aXNlOiB0cnVlLCByZWdleHA6IHRydWUsIGNvbmZ1c2lvbjogdHJ1ZSwgZXM1OiB0cnVlLCB2YXJzOiB0cnVlLCB3aGl0ZTogdHJ1ZSxcbiBwbHVzcGx1czogdHJ1ZSAqL1xuXG4vKiEgQHNvdXJjZSBodHRwOi8vcHVybC5lbGlncmV5LmNvbS9naXRodWIvQmxvYi5qcy9ibG9iL21hc3Rlci9CbG9iLmpzICovXG5cbihmdW5jdGlvbiAodmlldykge1xuICAgIFwidXNlIHN0cmljdFwiO1xuXG4gICAgdmlldy5VUkwgPSB2aWV3LlVSTCB8fCB2aWV3LndlYmtpdFVSTDtcblxuICAgIGlmICh2aWV3LkJsb2IgJiYgdmlldy5VUkwpIHtcbiAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgIG5ldyBCbG9iO1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9IGNhdGNoIChlKSB7fVxuICAgIH1cblxuICAgIC8vIEludGVybmFsbHkgd2UgdXNlIGEgQmxvYkJ1aWxkZXIgaW1wbGVtZW50YXRpb24gdG8gYmFzZSBCbG9iIG9mZiBvZlxuICAgIC8vIGluIG9yZGVyIHRvIHN1cHBvcnQgb2xkZXIgYnJvd3NlcnMgdGhhdCBvbmx5IGhhdmUgQmxvYkJ1aWxkZXJcbiAgICB2YXIgQmxvYkJ1aWxkZXIgPSB2aWV3LkJsb2JCdWlsZGVyIHx8IHZpZXcuV2ViS2l0QmxvYkJ1aWxkZXIgfHwgdmlldy5Nb3pCbG9iQnVpbGRlciB8fCAoZnVuY3Rpb24odmlldykge1xuICAgICAgICAgICAgdmFyXG4gICAgICAgICAgICAgICAgZ2V0X2NsYXNzID0gZnVuY3Rpb24ob2JqZWN0KSB7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBPYmplY3QucHJvdG90eXBlLnRvU3RyaW5nLmNhbGwob2JqZWN0KS5tYXRjaCgvXlxcW29iamVjdFxccyguKilcXF0kLylbMV07XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICwgRmFrZUJsb2JCdWlsZGVyID0gZnVuY3Rpb24gQmxvYkJ1aWxkZXIoKSB7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMuZGF0YSA9IFtdO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAsIEZha2VCbG9iID0gZnVuY3Rpb24gQmxvYihkYXRhLCB0eXBlLCBlbmNvZGluZykge1xuICAgICAgICAgICAgICAgICAgICB0aGlzLmRhdGEgPSBkYXRhO1xuICAgICAgICAgICAgICAgICAgICB0aGlzLnNpemUgPSBkYXRhLmxlbmd0aDtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy50eXBlID0gdHlwZTtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5lbmNvZGluZyA9IGVuY29kaW5nO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAsIEZCQl9wcm90byA9IEZha2VCbG9iQnVpbGRlci5wcm90b3R5cGVcbiAgICAgICAgICAgICAgICAsIEZCX3Byb3RvID0gRmFrZUJsb2IucHJvdG90eXBlXG4gICAgICAgICAgICAgICAgLCBGaWxlUmVhZGVyU3luYyA9IHZpZXcuRmlsZVJlYWRlclN5bmNcbiAgICAgICAgICAgICAgICAsIEZpbGVFeGNlcHRpb24gPSBmdW5jdGlvbih0eXBlKSB7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMuY29kZSA9IHRoaXNbdGhpcy5uYW1lID0gdHlwZV07XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICwgZmlsZV9leF9jb2RlcyA9IChcbiAgICAgICAgICAgICAgICAgICAgXCJOT1RfRk9VTkRfRVJSIFNFQ1VSSVRZX0VSUiBBQk9SVF9FUlIgTk9UX1JFQURBQkxFX0VSUiBFTkNPRElOR19FUlIgXCJcbiAgICAgICAgICAgICAgICAgICAgKyBcIk5PX01PRElGSUNBVElPTl9BTExPV0VEX0VSUiBJTlZBTElEX1NUQVRFX0VSUiBTWU5UQVhfRVJSXCJcbiAgICAgICAgICAgICAgICApLnNwbGl0KFwiIFwiKVxuICAgICAgICAgICAgICAgICwgZmlsZV9leF9jb2RlID0gZmlsZV9leF9jb2Rlcy5sZW5ndGhcbiAgICAgICAgICAgICAgICAsIHJlYWxfVVJMID0gdmlldy5VUkwgfHwgdmlldy53ZWJraXRVUkwgfHwgdmlld1xuICAgICAgICAgICAgICAgICwgcmVhbF9jcmVhdGVfb2JqZWN0X1VSTCA9IHJlYWxfVVJMLmNyZWF0ZU9iamVjdFVSTFxuICAgICAgICAgICAgICAgICwgcmVhbF9yZXZva2Vfb2JqZWN0X1VSTCA9IHJlYWxfVVJMLnJldm9rZU9iamVjdFVSTFxuICAgICAgICAgICAgICAgICwgVVJMID0gcmVhbF9VUkxcbiAgICAgICAgICAgICAgICAsIGJ0b2EgPSB2aWV3LmJ0b2FcbiAgICAgICAgICAgICAgICAsIGF0b2IgPSB2aWV3LmF0b2JcblxuICAgICAgICAgICAgICAgICwgQXJyYXlCdWZmZXIgPSB2aWV3LkFycmF5QnVmZmVyXG4gICAgICAgICAgICAgICAgLCBVaW50OEFycmF5ID0gdmlldy5VaW50OEFycmF5XG4gICAgICAgICAgICAgICAgO1xuICAgICAgICAgICAgRmFrZUJsb2IuZmFrZSA9IEZCX3Byb3RvLmZha2UgPSB0cnVlO1xuICAgICAgICAgICAgd2hpbGUgKGZpbGVfZXhfY29kZS0tKSB7XG4gICAgICAgICAgICAgICAgRmlsZUV4Y2VwdGlvbi5wcm90b3R5cGVbZmlsZV9leF9jb2Rlc1tmaWxlX2V4X2NvZGVdXSA9IGZpbGVfZXhfY29kZSArIDE7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAoIXJlYWxfVVJMLmNyZWF0ZU9iamVjdFVSTCkge1xuICAgICAgICAgICAgICAgIFVSTCA9IHZpZXcuVVJMID0ge307XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBVUkwuY3JlYXRlT2JqZWN0VVJMID0gZnVuY3Rpb24oYmxvYikge1xuICAgICAgICAgICAgICAgIHZhclxuICAgICAgICAgICAgICAgICAgICB0eXBlID0gYmxvYi50eXBlXG4gICAgICAgICAgICAgICAgICAgICwgZGF0YV9VUklfaGVhZGVyXG4gICAgICAgICAgICAgICAgICAgIDtcbiAgICAgICAgICAgICAgICBpZiAodHlwZSA9PT0gbnVsbCkge1xuICAgICAgICAgICAgICAgICAgICB0eXBlID0gXCJhcHBsaWNhdGlvbi9vY3RldC1zdHJlYW1cIjtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgaWYgKGJsb2IgaW5zdGFuY2VvZiBGYWtlQmxvYikge1xuICAgICAgICAgICAgICAgICAgICBkYXRhX1VSSV9oZWFkZXIgPSBcImRhdGE6XCIgKyB0eXBlO1xuICAgICAgICAgICAgICAgICAgICBpZiAoYmxvYi5lbmNvZGluZyA9PT0gXCJiYXNlNjRcIikge1xuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGRhdGFfVVJJX2hlYWRlciArIFwiO2Jhc2U2NCxcIiArIGJsb2IuZGF0YTtcbiAgICAgICAgICAgICAgICAgICAgfSBlbHNlIGlmIChibG9iLmVuY29kaW5nID09PSBcIlVSSVwiKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gZGF0YV9VUklfaGVhZGVyICsgXCIsXCIgKyBkZWNvZGVVUklDb21wb25lbnQoYmxvYi5kYXRhKTtcbiAgICAgICAgICAgICAgICAgICAgfSBpZiAoYnRvYSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGRhdGFfVVJJX2hlYWRlciArIFwiO2Jhc2U2NCxcIiArIGJ0b2EoYmxvYi5kYXRhKTtcbiAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBkYXRhX1VSSV9oZWFkZXIgKyBcIixcIiArIGVuY29kZVVSSUNvbXBvbmVudChibG9iLmRhdGEpO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfSBlbHNlIGlmIChyZWFsX2NyZWF0ZV9vYmplY3RfVVJMKSB7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiByZWFsX2NyZWF0ZV9vYmplY3RfVVJMLmNhbGwocmVhbF9VUkwsIGJsb2IpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH07XG4gICAgICAgICAgICBVUkwucmV2b2tlT2JqZWN0VVJMID0gZnVuY3Rpb24ob2JqZWN0X1VSTCkge1xuICAgICAgICAgICAgICAgIGlmIChvYmplY3RfVVJMLnN1YnN0cmluZygwLCA1KSAhPT0gXCJkYXRhOlwiICYmIHJlYWxfcmV2b2tlX29iamVjdF9VUkwpIHtcbiAgICAgICAgICAgICAgICAgICAgcmVhbF9yZXZva2Vfb2JqZWN0X1VSTC5jYWxsKHJlYWxfVVJMLCBvYmplY3RfVVJMKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9O1xuICAgICAgICAgICAgRkJCX3Byb3RvLmFwcGVuZCA9IGZ1bmN0aW9uKGRhdGEvKiwgZW5kaW5ncyovKSB7XG4gICAgICAgICAgICAgICAgdmFyIGJiID0gdGhpcy5kYXRhO1xuICAgICAgICAgICAgICAgIC8vIGRlY29kZSBkYXRhIHRvIGEgYmluYXJ5IHN0cmluZ1xuICAgICAgICAgICAgICAgIGlmIChVaW50OEFycmF5ICYmIChkYXRhIGluc3RhbmNlb2YgQXJyYXlCdWZmZXIgfHwgZGF0YSBpbnN0YW5jZW9mIFVpbnQ4QXJyYXkpKSB7XG4gICAgICAgICAgICAgICAgICAgIHZhclxuICAgICAgICAgICAgICAgICAgICAgICAgc3RyID0gXCJcIlxuICAgICAgICAgICAgICAgICAgICAgICAgLCBidWYgPSBuZXcgVWludDhBcnJheShkYXRhKVxuICAgICAgICAgICAgICAgICAgICAgICAgLCBpID0gMFxuICAgICAgICAgICAgICAgICAgICAgICAgLCBidWZfbGVuID0gYnVmLmxlbmd0aFxuICAgICAgICAgICAgICAgICAgICAgICAgO1xuICAgICAgICAgICAgICAgICAgICBmb3IgKDsgaSA8IGJ1Zl9sZW47IGkrKykge1xuICAgICAgICAgICAgICAgICAgICAgICAgc3RyICs9IFN0cmluZy5mcm9tQ2hhckNvZGUoYnVmW2ldKTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICBiYi5wdXNoKHN0cik7XG4gICAgICAgICAgICAgICAgfSBlbHNlIGlmIChnZXRfY2xhc3MoZGF0YSkgPT09IFwiQmxvYlwiIHx8IGdldF9jbGFzcyhkYXRhKSA9PT0gXCJGaWxlXCIpIHtcbiAgICAgICAgICAgICAgICAgICAgaWYgKEZpbGVSZWFkZXJTeW5jKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICB2YXIgZnIgPSBuZXcgRmlsZVJlYWRlclN5bmM7XG4gICAgICAgICAgICAgICAgICAgICAgICBiYi5wdXNoKGZyLnJlYWRBc0JpbmFyeVN0cmluZyhkYXRhKSk7XG4gICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAvLyBhc3luYyBGaWxlUmVhZGVyIHdvbid0IHdvcmsgYXMgQmxvYkJ1aWxkZXIgaXMgc3luY1xuICAgICAgICAgICAgICAgICAgICAgICAgdGhyb3cgbmV3IEZpbGVFeGNlcHRpb24oXCJOT1RfUkVBREFCTEVfRVJSXCIpO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfSBlbHNlIGlmIChkYXRhIGluc3RhbmNlb2YgRmFrZUJsb2IpIHtcbiAgICAgICAgICAgICAgICAgICAgaWYgKGRhdGEuZW5jb2RpbmcgPT09IFwiYmFzZTY0XCIgJiYgYXRvYikge1xuICAgICAgICAgICAgICAgICAgICAgICAgYmIucHVzaChhdG9iKGRhdGEuZGF0YSkpO1xuICAgICAgICAgICAgICAgICAgICB9IGVsc2UgaWYgKGRhdGEuZW5jb2RpbmcgPT09IFwiVVJJXCIpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGJiLnB1c2goZGVjb2RlVVJJQ29tcG9uZW50KGRhdGEuZGF0YSkpO1xuICAgICAgICAgICAgICAgICAgICB9IGVsc2UgaWYgKGRhdGEuZW5jb2RpbmcgPT09IFwicmF3XCIpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGJiLnB1c2goZGF0YS5kYXRhKTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgIGlmICh0eXBlb2YgZGF0YSAhPT0gXCJzdHJpbmdcIikge1xuICAgICAgICAgICAgICAgICAgICAgICAgZGF0YSArPSBcIlwiOyAvLyBjb252ZXJ0IHVuc3VwcG9ydGVkIHR5cGVzIHRvIHN0cmluZ3NcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAvLyBkZWNvZGUgVVRGLTE2IHRvIGJpbmFyeSBzdHJpbmdcbiAgICAgICAgICAgICAgICAgICAgYmIucHVzaCh1bmVzY2FwZShlbmNvZGVVUklDb21wb25lbnQoZGF0YSkpKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9O1xuICAgICAgICAgICAgRkJCX3Byb3RvLmdldEJsb2IgPSBmdW5jdGlvbih0eXBlKSB7XG4gICAgICAgICAgICAgICAgaWYgKCFhcmd1bWVudHMubGVuZ3RoKSB7XG4gICAgICAgICAgICAgICAgICAgIHR5cGUgPSBudWxsO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICByZXR1cm4gbmV3IEZha2VCbG9iKHRoaXMuZGF0YS5qb2luKFwiXCIpLCB0eXBlLCBcInJhd1wiKTtcbiAgICAgICAgICAgIH07XG4gICAgICAgICAgICBGQkJfcHJvdG8udG9TdHJpbmcgPSBmdW5jdGlvbigpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gXCJbb2JqZWN0IEJsb2JCdWlsZGVyXVwiO1xuICAgICAgICAgICAgfTtcbiAgICAgICAgICAgIEZCX3Byb3RvLnNsaWNlID0gZnVuY3Rpb24oc3RhcnQsIGVuZCwgdHlwZSkge1xuICAgICAgICAgICAgICAgIHZhciBhcmdzID0gYXJndW1lbnRzLmxlbmd0aDtcbiAgICAgICAgICAgICAgICBpZiAoYXJncyA8IDMpIHtcbiAgICAgICAgICAgICAgICAgICAgdHlwZSA9IG51bGw7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIHJldHVybiBuZXcgRmFrZUJsb2IoXG4gICAgICAgICAgICAgICAgICAgIHRoaXMuZGF0YS5zbGljZShzdGFydCwgYXJncyA+IDEgPyBlbmQgOiB0aGlzLmRhdGEubGVuZ3RoKVxuICAgICAgICAgICAgICAgICAgICAsIHR5cGVcbiAgICAgICAgICAgICAgICAgICAgLCB0aGlzLmVuY29kaW5nXG4gICAgICAgICAgICAgICAgKTtcbiAgICAgICAgICAgIH07XG4gICAgICAgICAgICBGQl9wcm90by50b1N0cmluZyA9IGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgICAgIHJldHVybiBcIltvYmplY3QgQmxvYl1cIjtcbiAgICAgICAgICAgIH07XG4gICAgICAgICAgICBGQl9wcm90by5jbG9zZSA9IGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgICAgIHRoaXMuc2l6ZSA9IHRoaXMuZGF0YS5sZW5ndGggPSAwO1xuICAgICAgICAgICAgfTtcbiAgICAgICAgICAgIHJldHVybiBGYWtlQmxvYkJ1aWxkZXI7XG4gICAgICAgIH0odmlldykpO1xuXG4gICAgdmlldy5CbG9iID0gZnVuY3Rpb24gQmxvYihibG9iUGFydHMsIG9wdGlvbnMpIHtcbiAgICAgICAgdmFyIHR5cGUgPSBvcHRpb25zID8gKG9wdGlvbnMudHlwZSB8fCBcIlwiKSA6IFwiXCI7XG4gICAgICAgIHZhciBidWlsZGVyID0gbmV3IEJsb2JCdWlsZGVyKCk7XG4gICAgICAgIGlmIChibG9iUGFydHMpIHtcbiAgICAgICAgICAgIGZvciAodmFyIGkgPSAwLCBsZW4gPSBibG9iUGFydHMubGVuZ3RoOyBpIDwgbGVuOyBpKyspIHtcbiAgICAgICAgICAgICAgICBidWlsZGVyLmFwcGVuZChibG9iUGFydHNbaV0pO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIHJldHVybiBidWlsZGVyLmdldEJsb2IodHlwZSk7XG4gICAgfTtcbn0odHlwZW9mIHNlbGYgIT09IFwidW5kZWZpbmVkXCIgJiYgc2VsZiB8fCB0eXBlb2Ygd2luZG93ICE9PSBcInVuZGVmaW5lZFwiICYmIHdpbmRvdyB8fCB0aGlzLmNvbnRlbnQgfHwgdGhpcykpO1xuIiwiKGZ1bmN0aW9uKGEsYil7aWYoXCJmdW5jdGlvblwiPT10eXBlb2YgZGVmaW5lJiZkZWZpbmUuYW1kKWRlZmluZShbXSxiKTtlbHNlIGlmKFwidW5kZWZpbmVkXCIhPXR5cGVvZiBleHBvcnRzKWIoKTtlbHNle2IoKSxhLkZpbGVTYXZlcj17ZXhwb3J0czp7fX0uZXhwb3J0c319KSh0aGlzLGZ1bmN0aW9uKCl7XCJ1c2Ugc3RyaWN0XCI7ZnVuY3Rpb24gYihhLGIpe3JldHVyblwidW5kZWZpbmVkXCI9PXR5cGVvZiBiP2I9e2F1dG9Cb206ITF9Olwib2JqZWN0XCIhPXR5cGVvZiBiJiYoY29uc29sZS53YXJuKFwiRGVwcmVjYXRlZDogRXhwZWN0ZWQgdGhpcmQgYXJndW1lbnQgdG8gYmUgYSBvYmplY3RcIiksYj17YXV0b0JvbTohYn0pLGIuYXV0b0JvbSYmL15cXHMqKD86dGV4dFxcL1xcUyp8YXBwbGljYXRpb25cXC94bWx8XFxTKlxcL1xcUypcXCt4bWwpXFxzKjsuKmNoYXJzZXRcXHMqPVxccyp1dGYtOC9pLnRlc3QoYS50eXBlKT9uZXcgQmxvYihbXCJcXHVGRUZGXCIsYV0se3R5cGU6YS50eXBlfSk6YX1mdW5jdGlvbiBjKGEsYixjKXt2YXIgZD1uZXcgWE1MSHR0cFJlcXVlc3Q7ZC5vcGVuKFwiR0VUXCIsYSksZC5yZXNwb25zZVR5cGU9XCJibG9iXCIsZC5vbmxvYWQ9ZnVuY3Rpb24oKXtnKGQucmVzcG9uc2UsYixjKX0sZC5vbmVycm9yPWZ1bmN0aW9uKCl7Y29uc29sZS5lcnJvcihcImNvdWxkIG5vdCBkb3dubG9hZCBmaWxlXCIpfSxkLnNlbmQoKX1mdW5jdGlvbiBkKGEpe3ZhciBiPW5ldyBYTUxIdHRwUmVxdWVzdDtiLm9wZW4oXCJIRUFEXCIsYSwhMSk7dHJ5e2Iuc2VuZCgpfWNhdGNoKGEpe31yZXR1cm4gMjAwPD1iLnN0YXR1cyYmMjk5Pj1iLnN0YXR1c31mdW5jdGlvbiBlKGEpe3RyeXthLmRpc3BhdGNoRXZlbnQobmV3IE1vdXNlRXZlbnQoXCJjbGlja1wiKSl9Y2F0Y2goYyl7dmFyIGI9ZG9jdW1lbnQuY3JlYXRlRXZlbnQoXCJNb3VzZUV2ZW50c1wiKTtiLmluaXRNb3VzZUV2ZW50KFwiY2xpY2tcIiwhMCwhMCx3aW5kb3csMCwwLDAsODAsMjAsITEsITEsITEsITEsMCxudWxsKSxhLmRpc3BhdGNoRXZlbnQoYil9fXZhciBmPVwib2JqZWN0XCI9PXR5cGVvZiB3aW5kb3cmJndpbmRvdy53aW5kb3c9PT13aW5kb3c/d2luZG93Olwib2JqZWN0XCI9PXR5cGVvZiBzZWxmJiZzZWxmLnNlbGY9PT1zZWxmP3NlbGY6XCJvYmplY3RcIj09dHlwZW9mIGdsb2JhbCYmZ2xvYmFsLmdsb2JhbD09PWdsb2JhbD9nbG9iYWw6dm9pZCAwLGE9Zi5uYXZpZ2F0b3ImJi9NYWNpbnRvc2gvLnRlc3QobmF2aWdhdG9yLnVzZXJBZ2VudCkmJi9BcHBsZVdlYktpdC8udGVzdChuYXZpZ2F0b3IudXNlckFnZW50KSYmIS9TYWZhcmkvLnRlc3QobmF2aWdhdG9yLnVzZXJBZ2VudCksZz1mLnNhdmVBc3x8KFwib2JqZWN0XCIhPXR5cGVvZiB3aW5kb3d8fHdpbmRvdyE9PWY/ZnVuY3Rpb24oKXt9OlwiZG93bmxvYWRcImluIEhUTUxBbmNob3JFbGVtZW50LnByb3RvdHlwZSYmIWE/ZnVuY3Rpb24oYixnLGgpe3ZhciBpPWYuVVJMfHxmLndlYmtpdFVSTCxqPWRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJhXCIpO2c9Z3x8Yi5uYW1lfHxcImRvd25sb2FkXCIsai5kb3dubG9hZD1nLGoucmVsPVwibm9vcGVuZXJcIixcInN0cmluZ1wiPT10eXBlb2YgYj8oai5ocmVmPWIsai5vcmlnaW49PT1sb2NhdGlvbi5vcmlnaW4/ZShqKTpkKGouaHJlZik/YyhiLGcsaCk6ZShqLGoudGFyZ2V0PVwiX2JsYW5rXCIpKTooai5ocmVmPWkuY3JlYXRlT2JqZWN0VVJMKGIpLHNldFRpbWVvdXQoZnVuY3Rpb24oKXtpLnJldm9rZU9iamVjdFVSTChqLmhyZWYpfSw0RTQpLHNldFRpbWVvdXQoZnVuY3Rpb24oKXtlKGopfSwwKSl9OlwibXNTYXZlT3JPcGVuQmxvYlwiaW4gbmF2aWdhdG9yP2Z1bmN0aW9uKGYsZyxoKXtpZihnPWd8fGYubmFtZXx8XCJkb3dubG9hZFwiLFwic3RyaW5nXCIhPXR5cGVvZiBmKW5hdmlnYXRvci5tc1NhdmVPck9wZW5CbG9iKGIoZixoKSxnKTtlbHNlIGlmKGQoZikpYyhmLGcsaCk7ZWxzZXt2YXIgaT1kb2N1bWVudC5jcmVhdGVFbGVtZW50KFwiYVwiKTtpLmhyZWY9ZixpLnRhcmdldD1cIl9ibGFua1wiLHNldFRpbWVvdXQoZnVuY3Rpb24oKXtlKGkpfSl9fTpmdW5jdGlvbihiLGQsZSxnKXtpZihnPWd8fG9wZW4oXCJcIixcIl9ibGFua1wiKSxnJiYoZy5kb2N1bWVudC50aXRsZT1nLmRvY3VtZW50LmJvZHkuaW5uZXJUZXh0PVwiZG93bmxvYWRpbmcuLi5cIiksXCJzdHJpbmdcIj09dHlwZW9mIGIpcmV0dXJuIGMoYixkLGUpO3ZhciBoPVwiYXBwbGljYXRpb24vb2N0ZXQtc3RyZWFtXCI9PT1iLnR5cGUsaT0vY29uc3RydWN0b3IvaS50ZXN0KGYuSFRNTEVsZW1lbnQpfHxmLnNhZmFyaSxqPS9DcmlPU1xcL1tcXGRdKy8udGVzdChuYXZpZ2F0b3IudXNlckFnZW50KTtpZigoanx8aCYmaXx8YSkmJlwidW5kZWZpbmVkXCIhPXR5cGVvZiBGaWxlUmVhZGVyKXt2YXIgaz1uZXcgRmlsZVJlYWRlcjtrLm9ubG9hZGVuZD1mdW5jdGlvbigpe3ZhciBhPWsucmVzdWx0O2E9aj9hOmEucmVwbGFjZSgvXmRhdGE6W147XSo7LyxcImRhdGE6YXR0YWNobWVudC9maWxlO1wiKSxnP2cubG9jYXRpb24uaHJlZj1hOmxvY2F0aW9uPWEsZz1udWxsfSxrLnJlYWRBc0RhdGFVUkwoYil9ZWxzZXt2YXIgbD1mLlVSTHx8Zi53ZWJraXRVUkwsbT1sLmNyZWF0ZU9iamVjdFVSTChiKTtnP2cubG9jYXRpb249bTpsb2NhdGlvbi5ocmVmPW0sZz1udWxsLHNldFRpbWVvdXQoZnVuY3Rpb24oKXtsLnJldm9rZU9iamVjdFVSTChtKX0sNEU0KX19KTtmLnNhdmVBcz1nLnNhdmVBcz1nLFwidW5kZWZpbmVkXCIhPXR5cGVvZiBtb2R1bGUmJihtb2R1bGUuZXhwb3J0cz1nKX0pO1xuXG4vLyMgc291cmNlTWFwcGluZ1VSTD1GaWxlU2F2ZXIubWluLmpzLm1hcCIsIi8qISB4bHN4LmpzIChDKSAyMDEzLXByZXNlbnQgU2hlZXRKUyAtLSBodHRwOi8vc2hlZXRqcy5jb20gKi9cbi8qIHZpbTogc2V0IHRzPTI6ICovXG4vKmV4cG9ydGVkIFhMU1ggKi9cbi8qZ2xvYmFsIHByb2Nlc3M6ZmFsc2UsIEJ1ZmZlcjpmYWxzZSwgQXJyYXlCdWZmZXI6ZmFsc2UsIERhdGFWaWV3OmZhbHNlLCBEZW5vOmZhbHNlICovXG52YXIgWExTWCA9IHt9O1xuWExTWC52ZXJzaW9uID0gJzAuMTguNSc7XG52YXIgY3VycmVudF9jb2RlcGFnZSA9IDEyMDAsIGN1cnJlbnRfYW5zaSA9IDEyNTI7XG5cbnZhciBWQUxJRF9BTlNJID0gWyA4NzQsIDkzMiwgOTM2LCA5NDksIDk1MCwgMTI1MCwgMTI1MSwgMTI1MiwgMTI1MywgMTI1NCwgMTI1NSwgMTI1NiwgMTI1NywgMTI1OCwgMTAwMDAgXTtcbi8qIEVDTUEtMzc2IFBhcnQgSSAxOC40LjEgY2hhcnNldCB0byBjb2RlcGFnZSBtYXBwaW5nICovXG52YXIgQ1MyQ1AgPSAoe1xuXHQvKjo6WyovMC8qOjpdKi86ICAgIDEyNTIsIC8qIEFOU0kgKi9cblx0Lyo6OlsqLzEvKjo6XSovOiAgIDY1MDAxLCAvKiBERUZBVUxUICovXG5cdC8qOjpbKi8yLyo6Ol0qLzogICA2NTAwMSwgLyogU1lNQk9MICovXG5cdC8qOjpbKi83Ny8qOjpdKi86ICAxMDAwMCwgLyogTUFDICovXG5cdC8qOjpbKi8xMjgvKjo6XSovOiAgIDkzMiwgLyogU0hJRlRKSVMgKi9cblx0Lyo6OlsqLzEyOS8qOjpdKi86ICAgOTQ5LCAvKiBIQU5HVUwgKi9cblx0Lyo6OlsqLzEzMC8qOjpdKi86ICAxMzYxLCAvKiBKT0hBQiAqL1xuXHQvKjo6WyovMTM0Lyo6Ol0qLzogICA5MzYsIC8qIEdCMjMxMiAqL1xuXHQvKjo6WyovMTM2Lyo6Ol0qLzogICA5NTAsIC8qIENISU5FU0VCSUc1ICovXG5cdC8qOjpbKi8xNjEvKjo6XSovOiAgMTI1MywgLyogR1JFRUsgKi9cblx0Lyo6OlsqLzE2Mi8qOjpdKi86ICAxMjU0LCAvKiBUVVJLSVNIICovXG5cdC8qOjpbKi8xNjMvKjo6XSovOiAgMTI1OCwgLyogVklFVE5BTUVTRSAqL1xuXHQvKjo6WyovMTc3Lyo6Ol0qLzogIDEyNTUsIC8qIEhFQlJFVyAqL1xuXHQvKjo6WyovMTc4Lyo6Ol0qLzogIDEyNTYsIC8qIEFSQUJJQyAqL1xuXHQvKjo6WyovMTg2Lyo6Ol0qLzogIDEyNTcsIC8qIEJBTFRJQyAqL1xuXHQvKjo6WyovMjA0Lyo6Ol0qLzogIDEyNTEsIC8qIFJVU1NJQU4gKi9cblx0Lyo6OlsqLzIyMi8qOjpdKi86ICAgODc0LCAvKiBUSEFJICovXG5cdC8qOjpbKi8yMzgvKjo6XSovOiAgMTI1MCwgLyogRUFTVEVVUk9QRSAqL1xuXHQvKjo6WyovMjU1Lyo6Ol0qLzogIDEyNTIsIC8qIE9FTSAqL1xuXHQvKjo6WyovNjkvKjo6XSovOiAgIDY5NjkgIC8qIE1JU0MgKi9cbn0vKjphbnkqLyk7XG5cbnZhciBzZXRfYW5zaSA9IGZ1bmN0aW9uKGNwLyo6bnVtYmVyKi8pIHsgaWYoVkFMSURfQU5TSS5pbmRleE9mKGNwKSA9PSAtMSkgcmV0dXJuOyBjdXJyZW50X2Fuc2kgPSBDUzJDUFswXSA9IGNwOyB9O1xuZnVuY3Rpb24gcmVzZXRfYW5zaSgpIHsgc2V0X2Fuc2koMTI1Mik7IH1cblxudmFyIHNldF9jcCA9IGZ1bmN0aW9uKGNwLyo6bnVtYmVyKi8pIHsgY3VycmVudF9jb2RlcGFnZSA9IGNwOyBzZXRfYW5zaShjcCk7IH07XG5mdW5jdGlvbiByZXNldF9jcCgpIHsgc2V0X2NwKDEyMDApOyByZXNldF9hbnNpKCk7IH1cblxuZnVuY3Rpb24gY2hhcl9jb2RlcyhkYXRhLyo6c3RyaW5nKi8pLyo6QXJyYXk8bnVtYmVyPiovIHsgdmFyIG8vKjpBcnJheTxudW1iZXI+Ki8gPSBbXTsgZm9yKHZhciBpID0gMCwgbGVuID0gZGF0YS5sZW5ndGg7IGkgPCBsZW47ICsraSkgb1tpXSA9IGRhdGEuY2hhckNvZGVBdChpKTsgcmV0dXJuIG87IH1cblxuZnVuY3Rpb24gdXRmMTZsZXJlYWQoZGF0YS8qOnN0cmluZyovKS8qOnN0cmluZyovIHtcblx0dmFyIG8vKjpBcnJheTxzdHJpbmc+Ki8gPSBbXTtcblx0Zm9yKHZhciBpID0gMDsgaSA8IChkYXRhLmxlbmd0aD4+MSk7ICsraSkgb1tpXSA9IFN0cmluZy5mcm9tQ2hhckNvZGUoZGF0YS5jaGFyQ29kZUF0KDIqaSkgKyAoZGF0YS5jaGFyQ29kZUF0KDIqaSsxKTw8OCkpO1xuXHRyZXR1cm4gby5qb2luKFwiXCIpO1xufVxuZnVuY3Rpb24gdXRmMTZiZXJlYWQoZGF0YS8qOnN0cmluZyovKS8qOnN0cmluZyovIHtcblx0dmFyIG8vKjpBcnJheTxzdHJpbmc+Ki8gPSBbXTtcblx0Zm9yKHZhciBpID0gMDsgaSA8IChkYXRhLmxlbmd0aD4+MSk7ICsraSkgb1tpXSA9IFN0cmluZy5mcm9tQ2hhckNvZGUoZGF0YS5jaGFyQ29kZUF0KDIqaSsxKSArIChkYXRhLmNoYXJDb2RlQXQoMippKTw8OCkpO1xuXHRyZXR1cm4gby5qb2luKFwiXCIpO1xufVxuXG52YXIgZGVib20gPSBmdW5jdGlvbihkYXRhLyo6c3RyaW5nKi8pLyo6c3RyaW5nKi8ge1xuXHR2YXIgYzEgPSBkYXRhLmNoYXJDb2RlQXQoMCksIGMyID0gZGF0YS5jaGFyQ29kZUF0KDEpO1xuXHRpZihjMSA9PSAweEZGICYmIGMyID09IDB4RkUpIHJldHVybiB1dGYxNmxlcmVhZChkYXRhLnNsaWNlKDIpKTtcblx0aWYoYzEgPT0gMHhGRSAmJiBjMiA9PSAweEZGKSByZXR1cm4gdXRmMTZiZXJlYWQoZGF0YS5zbGljZSgyKSk7XG5cdGlmKGMxID09IDB4RkVGRikgcmV0dXJuIGRhdGEuc2xpY2UoMSk7XG5cdHJldHVybiBkYXRhO1xufTtcblxudmFyIF9nZXRjaGFyID0gZnVuY3Rpb24gX2djMSh4Lyo6bnVtYmVyKi8pLyo6c3RyaW5nKi8geyByZXR1cm4gU3RyaW5nLmZyb21DaGFyQ29kZSh4KTsgfTtcbnZhciBfZ2V0YW5zaSA9IGZ1bmN0aW9uIF9nYTEoeC8qOm51bWJlciovKS8qOnN0cmluZyovIHsgcmV0dXJuIFN0cmluZy5mcm9tQ2hhckNvZGUoeCk7IH07XG5cbnZhciAkY3B0YWJsZTtcbmZ1bmN0aW9uIHNldF9jcHRhYmxlKGNwdGFibGUpIHtcblx0JGNwdGFibGUgPSBjcHRhYmxlO1xuXHRzZXRfY3AgPSBmdW5jdGlvbihjcC8qOm51bWJlciovKSB7IGN1cnJlbnRfY29kZXBhZ2UgPSBjcDsgc2V0X2Fuc2koY3ApOyB9O1xuXHRkZWJvbSA9IGZ1bmN0aW9uKGRhdGEvKjpzdHJpbmcqLykge1xuXHRcdGlmKGRhdGEuY2hhckNvZGVBdCgwKSA9PT0gMHhGRiAmJiBkYXRhLmNoYXJDb2RlQXQoMSkgPT09IDB4RkUpIHsgcmV0dXJuICRjcHRhYmxlLnV0aWxzLmRlY29kZSgxMjAwLCBjaGFyX2NvZGVzKGRhdGEuc2xpY2UoMikpKTsgfVxuXHRcdHJldHVybiBkYXRhO1xuXHR9O1xuXHRfZ2V0Y2hhciA9IGZ1bmN0aW9uIF9nYzIoeC8qOm51bWJlciovKS8qOnN0cmluZyovIHtcblx0XHRpZihjdXJyZW50X2NvZGVwYWdlID09PSAxMjAwKSByZXR1cm4gU3RyaW5nLmZyb21DaGFyQ29kZSh4KTtcblx0XHRyZXR1cm4gJGNwdGFibGUudXRpbHMuZGVjb2RlKGN1cnJlbnRfY29kZXBhZ2UsIFt4JjI1NSx4Pj44XSlbMF07XG5cdH07XG5cdF9nZXRhbnNpID0gZnVuY3Rpb24gX2dhMih4Lyo6bnVtYmVyKi8pLyo6c3RyaW5nKi8ge1xuXHRcdHJldHVybiAkY3B0YWJsZS51dGlscy5kZWNvZGUoY3VycmVudF9hbnNpLCBbeF0pWzBdO1xuXHR9O1xuXHRjcGRvaXQoKTtcbn1cbmV4cG9ydCB7IHNldF9jcHRhYmxlIH07XG52YXIgREVOU0UgPSBudWxsO1xudmFyIERJRl9YTCA9IHRydWU7XG52YXIgQmFzZTY0X21hcCA9IFwiQUJDREVGR0hJSktMTU5PUFFSU1RVVldYWVphYmNkZWZnaGlqa2xtbm9wcXJzdHV2d3h5ejAxMjM0NTY3ODkrLz1cIjtcbmZ1bmN0aW9uIEJhc2U2NF9lbmNvZGUoaW5wdXQpIHtcbiAgdmFyIG8gPSBcIlwiO1xuICB2YXIgYzEgPSAwLCBjMiA9IDAsIGMzID0gMCwgZTEgPSAwLCBlMiA9IDAsIGUzID0gMCwgZTQgPSAwO1xuICBmb3IgKHZhciBpID0gMDsgaSA8IGlucHV0Lmxlbmd0aDsgKSB7XG4gICAgYzEgPSBpbnB1dC5jaGFyQ29kZUF0KGkrKyk7XG4gICAgZTEgPSBjMSA+PiAyO1xuICAgIGMyID0gaW5wdXQuY2hhckNvZGVBdChpKyspO1xuICAgIGUyID0gKGMxICYgMykgPDwgNCB8IGMyID4+IDQ7XG4gICAgYzMgPSBpbnB1dC5jaGFyQ29kZUF0KGkrKyk7XG4gICAgZTMgPSAoYzIgJiAxNSkgPDwgMiB8IGMzID4+IDY7XG4gICAgZTQgPSBjMyAmIDYzO1xuICAgIGlmIChpc05hTihjMikpIHtcbiAgICAgIGUzID0gZTQgPSA2NDtcbiAgICB9IGVsc2UgaWYgKGlzTmFOKGMzKSkge1xuICAgICAgZTQgPSA2NDtcbiAgICB9XG4gICAgbyArPSBCYXNlNjRfbWFwLmNoYXJBdChlMSkgKyBCYXNlNjRfbWFwLmNoYXJBdChlMikgKyBCYXNlNjRfbWFwLmNoYXJBdChlMykgKyBCYXNlNjRfbWFwLmNoYXJBdChlNCk7XG4gIH1cbiAgcmV0dXJuIG87XG59XG5mdW5jdGlvbiBCYXNlNjRfZGVjb2RlKGlucHV0KSB7XG4gIHZhciBvID0gXCJcIjtcbiAgdmFyIGMxID0gMCwgYzIgPSAwLCBjMyA9IDAsIGUxID0gMCwgZTIgPSAwLCBlMyA9IDAsIGU0ID0gMDtcbiAgaW5wdXQgPSBpbnB1dC5yZXBsYWNlKC9bXlxcd1xcK1xcL1xcPV0vZywgXCJcIik7XG4gIGZvciAodmFyIGkgPSAwOyBpIDwgaW5wdXQubGVuZ3RoOyApIHtcbiAgICBlMSA9IEJhc2U2NF9tYXAuaW5kZXhPZihpbnB1dC5jaGFyQXQoaSsrKSk7XG4gICAgZTIgPSBCYXNlNjRfbWFwLmluZGV4T2YoaW5wdXQuY2hhckF0KGkrKykpO1xuICAgIGMxID0gZTEgPDwgMiB8IGUyID4+IDQ7XG4gICAgbyArPSBTdHJpbmcuZnJvbUNoYXJDb2RlKGMxKTtcbiAgICBlMyA9IEJhc2U2NF9tYXAuaW5kZXhPZihpbnB1dC5jaGFyQXQoaSsrKSk7XG4gICAgYzIgPSAoZTIgJiAxNSkgPDwgNCB8IGUzID4+IDI7XG4gICAgaWYgKGUzICE9PSA2NCkge1xuICAgICAgbyArPSBTdHJpbmcuZnJvbUNoYXJDb2RlKGMyKTtcbiAgICB9XG4gICAgZTQgPSBCYXNlNjRfbWFwLmluZGV4T2YoaW5wdXQuY2hhckF0KGkrKykpO1xuICAgIGMzID0gKGUzICYgMykgPDwgNiB8IGU0O1xuICAgIGlmIChlNCAhPT0gNjQpIHtcbiAgICAgIG8gKz0gU3RyaW5nLmZyb21DaGFyQ29kZShjMyk7XG4gICAgfVxuICB9XG4gIHJldHVybiBvO1xufVxudmFyIGhhc19idWYgPSAvKiNfX1BVUkVfXyovKGZ1bmN0aW9uKCkgeyByZXR1cm4gdHlwZW9mIEJ1ZmZlciAhPT0gJ3VuZGVmaW5lZCcgJiYgdHlwZW9mIHByb2Nlc3MgIT09ICd1bmRlZmluZWQnICYmIHR5cGVvZiBwcm9jZXNzLnZlcnNpb25zICE9PSAndW5kZWZpbmVkJyAmJiAhIXByb2Nlc3MudmVyc2lvbnMubm9kZTsgfSkoKTtcblxudmFyIEJ1ZmZlcl9mcm9tID0gLyojX19QVVJFX18qLyhmdW5jdGlvbigpIHtcblx0aWYodHlwZW9mIEJ1ZmZlciAhPT0gJ3VuZGVmaW5lZCcpIHtcblx0XHR2YXIgbmJmcyA9ICFCdWZmZXIuZnJvbTtcblx0XHRpZighbmJmcykgdHJ5IHsgQnVmZmVyLmZyb20oXCJmb29cIiwgXCJ1dGY4XCIpOyB9IGNhdGNoKGUpIHsgbmJmcyA9IHRydWU7IH1cblx0XHRyZXR1cm4gbmJmcyA/IGZ1bmN0aW9uKGJ1ZiwgZW5jKSB7IHJldHVybiAoZW5jKSA/IG5ldyBCdWZmZXIoYnVmLCBlbmMpIDogbmV3IEJ1ZmZlcihidWYpOyB9IDogQnVmZmVyLmZyb20uYmluZChCdWZmZXIpO1xuXHR9XG5cdHJldHVybiBmdW5jdGlvbigpIHt9O1xufSkoKTtcblxuXG5mdW5jdGlvbiBuZXdfcmF3X2J1ZihsZW4vKjpudW1iZXIqLykge1xuXHQvKiBqc2hpbnQgLVcwNTYgKi9cblx0aWYoaGFzX2J1ZikgcmV0dXJuIEJ1ZmZlci5hbGxvYyA/IEJ1ZmZlci5hbGxvYyhsZW4pIDogbmV3IEJ1ZmZlcihsZW4pO1xuXHRyZXR1cm4gdHlwZW9mIFVpbnQ4QXJyYXkgIT0gXCJ1bmRlZmluZWRcIiA/IG5ldyBVaW50OEFycmF5KGxlbikgOiBuZXcgQXJyYXkobGVuKTtcblx0LyoganNoaW50ICtXMDU2ICovXG59XG5cbmZ1bmN0aW9uIG5ld191bnNhZmVfYnVmKGxlbi8qOm51bWJlciovKSB7XG5cdC8qIGpzaGludCAtVzA1NiAqL1xuXHRpZihoYXNfYnVmKSByZXR1cm4gQnVmZmVyLmFsbG9jVW5zYWZlID8gQnVmZmVyLmFsbG9jVW5zYWZlKGxlbikgOiBuZXcgQnVmZmVyKGxlbik7XG5cdHJldHVybiB0eXBlb2YgVWludDhBcnJheSAhPSBcInVuZGVmaW5lZFwiID8gbmV3IFVpbnQ4QXJyYXkobGVuKSA6IG5ldyBBcnJheShsZW4pO1xuXHQvKiBqc2hpbnQgK1cwNTYgKi9cbn1cblxudmFyIHMyYSA9IGZ1bmN0aW9uIHMyYShzLyo6c3RyaW5nKi8pLyo6YW55Ki8ge1xuXHRpZihoYXNfYnVmKSByZXR1cm4gQnVmZmVyX2Zyb20ocywgXCJiaW5hcnlcIik7XG5cdHJldHVybiBzLnNwbGl0KFwiXCIpLm1hcChmdW5jdGlvbih4Lyo6c3RyaW5nKi8pLyo6bnVtYmVyKi97IHJldHVybiB4LmNoYXJDb2RlQXQoMCkgJiAweGZmOyB9KTtcbn07XG5cbmZ1bmN0aW9uIHMyYWIocy8qOnN0cmluZyovKS8qOmFueSovIHtcblx0aWYodHlwZW9mIEFycmF5QnVmZmVyID09PSAndW5kZWZpbmVkJykgcmV0dXJuIHMyYShzKTtcblx0dmFyIGJ1ZiA9IG5ldyBBcnJheUJ1ZmZlcihzLmxlbmd0aCksIHZpZXcgPSBuZXcgVWludDhBcnJheShidWYpO1xuXHRmb3IgKHZhciBpPTA7IGkhPXMubGVuZ3RoOyArK2kpIHZpZXdbaV0gPSBzLmNoYXJDb2RlQXQoaSkgJiAweEZGO1xuXHRyZXR1cm4gYnVmO1xufVxuXG5mdW5jdGlvbiBhMnMoZGF0YS8qOmFueSovKS8qOnN0cmluZyovIHtcblx0aWYoQXJyYXkuaXNBcnJheShkYXRhKSkgcmV0dXJuIGRhdGEubWFwKGZ1bmN0aW9uKGMpIHsgcmV0dXJuIFN0cmluZy5mcm9tQ2hhckNvZGUoYyk7IH0pLmpvaW4oXCJcIik7XG5cdHZhciBvLyo6QXJyYXk8c3RyaW5nPiovID0gW107IGZvcih2YXIgaSA9IDA7IGkgPCBkYXRhLmxlbmd0aDsgKytpKSBvW2ldID0gU3RyaW5nLmZyb21DaGFyQ29kZShkYXRhW2ldKTsgcmV0dXJuIG8uam9pbihcIlwiKTtcbn1cblxuZnVuY3Rpb24gYTJ1KGRhdGEvKjpBcnJheTxudW1iZXI+Ki8pLyo6VWludDhBcnJheSovIHtcblx0aWYodHlwZW9mIFVpbnQ4QXJyYXkgPT09ICd1bmRlZmluZWQnKSB0aHJvdyBuZXcgRXJyb3IoXCJVbnN1cHBvcnRlZFwiKTtcblx0cmV0dXJuIG5ldyBVaW50OEFycmF5KGRhdGEpO1xufVxuXG5mdW5jdGlvbiBhYjJhKGRhdGEvKjpBcnJheUJ1ZmZlcnxVaW50OEFycmF5Ki8pLyo6QXJyYXk8bnVtYmVyPiovIHtcblx0aWYodHlwZW9mIEFycmF5QnVmZmVyID09ICd1bmRlZmluZWQnKSB0aHJvdyBuZXcgRXJyb3IoXCJVbnN1cHBvcnRlZFwiKTtcblx0aWYoZGF0YSBpbnN0YW5jZW9mIEFycmF5QnVmZmVyKSByZXR1cm4gYWIyYShuZXcgVWludDhBcnJheShkYXRhKSk7XG5cdC8qOjogaWYoZGF0YSBpbnN0YW5jZW9mIEFycmF5QnVmZmVyKSB0aHJvdyBuZXcgRXJyb3IoXCJ1bnJlYWNoYWJsZVwiKTsgKi9cblx0dmFyIG8gPSBuZXcgQXJyYXkoZGF0YS5sZW5ndGgpO1xuXHRmb3IodmFyIGkgPSAwOyBpIDwgZGF0YS5sZW5ndGg7ICsraSkgb1tpXSA9IGRhdGFbaV07XG5cdHJldHVybiBvO1xufVxuXG52YXIgYmNvbmNhdCA9IGhhc19idWYgPyBmdW5jdGlvbihidWZzKSB7IHJldHVybiBCdWZmZXIuY29uY2F0KGJ1ZnMubWFwKGZ1bmN0aW9uKGJ1ZikgeyByZXR1cm4gQnVmZmVyLmlzQnVmZmVyKGJ1ZikgPyBidWYgOiBCdWZmZXJfZnJvbShidWYpOyB9KSk7IH0gOiBmdW5jdGlvbihidWZzKSB7XG5cdGlmKHR5cGVvZiBVaW50OEFycmF5ICE9PSBcInVuZGVmaW5lZFwiKSB7XG5cdFx0dmFyIGkgPSAwLCBtYXhsZW4gPSAwO1xuXHRcdGZvcihpID0gMDsgaSA8IGJ1ZnMubGVuZ3RoOyArK2kpIG1heGxlbiArPSBidWZzW2ldLmxlbmd0aDtcblx0XHR2YXIgbyA9IG5ldyBVaW50OEFycmF5KG1heGxlbik7XG5cdFx0dmFyIGxlbiA9IDA7XG5cdFx0Zm9yKGkgPSAwLCBtYXhsZW4gPSAwOyBpIDwgYnVmcy5sZW5ndGg7IG1heGxlbiArPSBsZW4sICsraSkge1xuXHRcdFx0bGVuID0gYnVmc1tpXS5sZW5ndGg7XG5cdFx0XHRpZihidWZzW2ldIGluc3RhbmNlb2YgVWludDhBcnJheSkgby5zZXQoYnVmc1tpXSwgbWF4bGVuKTtcblx0XHRcdGVsc2UgaWYodHlwZW9mIGJ1ZnNbaV0gPT0gXCJzdHJpbmdcIikgeyB0aHJvdyBcInd0ZlwiOyB9XG5cdFx0XHRlbHNlIG8uc2V0KG5ldyBVaW50OEFycmF5KGJ1ZnNbaV0pLCBtYXhsZW4pO1xuXHRcdH1cblx0XHRyZXR1cm4gbztcblx0fVxuXHRyZXR1cm4gW10uY29uY2F0LmFwcGx5KFtdLCBidWZzLm1hcChmdW5jdGlvbihidWYpIHsgcmV0dXJuIEFycmF5LmlzQXJyYXkoYnVmKSA/IGJ1ZiA6IFtdLnNsaWNlLmNhbGwoYnVmKTsgfSkpO1xufTtcblxuZnVuY3Rpb24gdXRmOGRlY29kZShjb250ZW50Lyo6c3RyaW5nKi8pIHtcblx0dmFyIG91dCA9IFtdLCB3aWR4ID0gMCwgTCA9IGNvbnRlbnQubGVuZ3RoICsgMjUwO1xuXHR2YXIgbyA9IG5ld19yYXdfYnVmKGNvbnRlbnQubGVuZ3RoICsgMjU1KTtcblx0Zm9yKHZhciByaWR4ID0gMDsgcmlkeCA8IGNvbnRlbnQubGVuZ3RoOyArK3JpZHgpIHtcblx0XHR2YXIgYyA9IGNvbnRlbnQuY2hhckNvZGVBdChyaWR4KTtcblx0XHRpZihjIDwgMHg4MCkgb1t3aWR4KytdID0gYztcblx0XHRlbHNlIGlmKGMgPCAweDgwMCkge1xuXHRcdFx0b1t3aWR4KytdID0gKDE5MnwoKGM+PjYpJjMxKSk7XG5cdFx0XHRvW3dpZHgrK10gPSAoMTI4fChjJjYzKSk7XG5cdFx0fSBlbHNlIGlmKGMgPj0gMHhEODAwICYmIGMgPCAweEUwMDApIHtcblx0XHRcdGMgPSAoYyYxMDIzKSs2NDtcblx0XHRcdHZhciBkID0gY29udGVudC5jaGFyQ29kZUF0KCsrcmlkeCkmMTAyMztcblx0XHRcdG9bd2lkeCsrXSA9ICgyNDB8KChjPj44KSY3KSk7XG5cdFx0XHRvW3dpZHgrK10gPSAoMTI4fCgoYz4+MikmNjMpKTtcblx0XHRcdG9bd2lkeCsrXSA9ICgxMjh8KChkPj42KSYxNSl8KChjJjMpPDw0KSk7XG5cdFx0XHRvW3dpZHgrK10gPSAoMTI4fChkJjYzKSk7XG5cdFx0fSBlbHNlIHtcblx0XHRcdG9bd2lkeCsrXSA9ICgyMjR8KChjPj4xMikmMTUpKTtcblx0XHRcdG9bd2lkeCsrXSA9ICgxMjh8KChjPj42KSY2MykpO1xuXHRcdFx0b1t3aWR4KytdID0gKDEyOHwoYyY2MykpO1xuXHRcdH1cblx0XHRpZih3aWR4ID4gTCkge1xuXHRcdFx0b3V0LnB1c2goby5zbGljZSgwLCB3aWR4KSk7XG5cdFx0XHR3aWR4ID0gMDtcblx0XHRcdG8gPSBuZXdfcmF3X2J1Zig2NTUzNSk7XG5cdFx0XHRMID0gNjU1MzA7XG5cdFx0fVxuXHR9XG5cdG91dC5wdXNoKG8uc2xpY2UoMCwgd2lkeCkpO1xuXHRyZXR1cm4gYmNvbmNhdChvdXQpO1xufVxuXG52YXIgY2hyMCA9IC9cXHUwMDAwL2csIGNocjEgPSAvW1xcdTAwMDEtXFx1MDAwNl0vZztcbi8qOjpcbmRlY2xhcmUgdHlwZSBCbG9jayA9IGFueTtcbmRlY2xhcmUgdHlwZSBCdWZBcnJheSA9IHtcblx0bmV3YmxrKHN6Om51bWJlcik6QmxvY2s7XG5cdG5leHQoc3o6bnVtYmVyKTpCbG9jaztcblx0ZW5kKCk6YW55O1xuXHRwdXNoKGJ1ZjpCbG9jayk6dm9pZDtcbn07XG5cbnR5cGUgUmVjb3JkSG9wcGVyQ0IgPSB7KGQ6YW55LCBSbjpzdHJpbmcsIFJUOm51bWJlcik6P2Jvb2xlYW47fTtcblxudHlwZSBFdmVydFR5cGUgPSB7W3N0cmluZ106c3RyaW5nfTtcbnR5cGUgRXZlcnROdW1UeXBlID0ge1tzdHJpbmddOm51bWJlcn07XG50eXBlIEV2ZXJ0QXJyVHlwZSA9IHtbc3RyaW5nXTpBcnJheTxzdHJpbmc+fTtcblxudHlwZSBTdHJpbmdDb252ID0geyhzdHJpbmcpOnN0cmluZ307XG5cbiovXG4vKiBzc2YuanMgKEMpIDIwMTMtcHJlc2VudCBTaGVldEpTIC0tIGh0dHA6Ly9zaGVldGpzLmNvbSAqL1xuLypqc2hpbnQgLVcwNDEgKi9cbmZ1bmN0aW9uIF9zdHJyZXYoeC8qOnN0cmluZyovKS8qOnN0cmluZyovIHsgdmFyIG8gPSBcIlwiLCBpID0geC5sZW5ndGgtMTsgd2hpbGUoaT49MCkgbyArPSB4LmNoYXJBdChpLS0pOyByZXR1cm4gbzsgfVxuZnVuY3Rpb24gcGFkMCh2Lyo6YW55Ki8sZC8qOm51bWJlciovKS8qOnN0cmluZyove3ZhciB0PVwiXCIrdjsgcmV0dXJuIHQubGVuZ3RoPj1kP3Q6ZmlsbCgnMCcsZC10Lmxlbmd0aCkrdDt9XG5mdW5jdGlvbiBwYWRfKHYvKjphbnkqLyxkLyo6bnVtYmVyKi8pLyo6c3RyaW5nKi97dmFyIHQ9XCJcIit2O3JldHVybiB0Lmxlbmd0aD49ZD90OmZpbGwoJyAnLGQtdC5sZW5ndGgpK3Q7fVxuZnVuY3Rpb24gcnBhZF8odi8qOmFueSovLGQvKjpudW1iZXIqLykvKjpzdHJpbmcqL3t2YXIgdD1cIlwiK3Y7IHJldHVybiB0Lmxlbmd0aD49ZD90OnQrZmlsbCgnICcsZC10Lmxlbmd0aCk7fVxuZnVuY3Rpb24gcGFkMHIxKHYvKjphbnkqLyxkLyo6bnVtYmVyKi8pLyo6c3RyaW5nKi97dmFyIHQ9XCJcIitNYXRoLnJvdW5kKHYpOyByZXR1cm4gdC5sZW5ndGg+PWQ/dDpmaWxsKCcwJyxkLXQubGVuZ3RoKSt0O31cbmZ1bmN0aW9uIHBhZDByMih2Lyo6YW55Ki8sZC8qOm51bWJlciovKS8qOnN0cmluZyove3ZhciB0PVwiXCIrdjsgcmV0dXJuIHQubGVuZ3RoPj1kP3Q6ZmlsbCgnMCcsZC10Lmxlbmd0aCkrdDt9XG52YXIgcDJfMzIgPSAvKiNfX1BVUkVfXyovTWF0aC5wb3coMiwzMik7XG5mdW5jdGlvbiBwYWQwcih2Lyo6YW55Ki8sZC8qOm51bWJlciovKS8qOnN0cmluZyove2lmKHY+cDJfMzJ8fHY8LXAyXzMyKSByZXR1cm4gcGFkMHIxKHYsZCk7IHZhciBpID0gTWF0aC5yb3VuZCh2KTsgcmV0dXJuIHBhZDByMihpLGQpOyB9XG4vKiB5ZXMsIGluIDIwMjIgdGhpcyBpcyBzdGlsbCBmYXN0ZXIgdGhhbiBzdHJpbmcgY29tcGFyZSAqL1xuZnVuY3Rpb24gU1NGX2lzZ2VuZXJhbChzLyo6c3RyaW5nKi8sIGkvKjo/bnVtYmVyKi8pLyo6Ym9vbGVhbiovIHsgaSA9IGkgfHwgMDsgcmV0dXJuIHMubGVuZ3RoID49IDcgKyBpICYmIChzLmNoYXJDb2RlQXQoaSl8MzIpID09PSAxMDMgJiYgKHMuY2hhckNvZGVBdChpKzEpfDMyKSA9PT0gMTAxICYmIChzLmNoYXJDb2RlQXQoaSsyKXwzMikgPT09IDExMCAmJiAocy5jaGFyQ29kZUF0KGkrMyl8MzIpID09PSAxMDEgJiYgKHMuY2hhckNvZGVBdChpKzQpfDMyKSA9PT0gMTE0ICYmIChzLmNoYXJDb2RlQXQoaSs1KXwzMikgPT09IDk3ICYmIChzLmNoYXJDb2RlQXQoaSs2KXwzMikgPT09IDEwODsgfVxudmFyIGRheXMvKjpBcnJheTxBcnJheTxzdHJpbmc+ID4qLyA9IFtcblx0WydTdW4nLCAnU3VuZGF5J10sXG5cdFsnTW9uJywgJ01vbmRheSddLFxuXHRbJ1R1ZScsICdUdWVzZGF5J10sXG5cdFsnV2VkJywgJ1dlZG5lc2RheSddLFxuXHRbJ1RodScsICdUaHVyc2RheSddLFxuXHRbJ0ZyaScsICdGcmlkYXknXSxcblx0WydTYXQnLCAnU2F0dXJkYXknXVxuXTtcbnZhciBtb250aHMvKjpBcnJheTxBcnJheTxzdHJpbmc+ID4qLyA9IFtcblx0WydKJywgJ0phbicsICdKYW51YXJ5J10sXG5cdFsnRicsICdGZWInLCAnRmVicnVhcnknXSxcblx0WydNJywgJ01hcicsICdNYXJjaCddLFxuXHRbJ0EnLCAnQXByJywgJ0FwcmlsJ10sXG5cdFsnTScsICdNYXknLCAnTWF5J10sXG5cdFsnSicsICdKdW4nLCAnSnVuZSddLFxuXHRbJ0onLCAnSnVsJywgJ0p1bHknXSxcblx0WydBJywgJ0F1ZycsICdBdWd1c3QnXSxcblx0WydTJywgJ1NlcCcsICdTZXB0ZW1iZXInXSxcblx0WydPJywgJ09jdCcsICdPY3RvYmVyJ10sXG5cdFsnTicsICdOb3YnLCAnTm92ZW1iZXInXSxcblx0WydEJywgJ0RlYycsICdEZWNlbWJlciddXG5dO1xuZnVuY3Rpb24gU1NGX2luaXRfdGFibGUodC8qOmFueSovKSB7XG5cdGlmKCF0KSB0ID0ge307XG5cdHRbMF09ICAnR2VuZXJhbCc7XG5cdHRbMV09ICAnMCc7XG5cdHRbMl09ICAnMC4wMCc7XG5cdHRbM109ICAnIywjIzAnO1xuXHR0WzRdPSAgJyMsIyMwLjAwJztcblx0dFs5XT0gICcwJSc7XG5cdHRbMTBdPSAnMC4wMCUnO1xuXHR0WzExXT0gJzAuMDBFKzAwJztcblx0dFsxMl09ICcjID8vPyc7XG5cdHRbMTNdPSAnIyA/Py8/Pyc7XG5cdHRbMTRdPSAnbS9kL3l5Jztcblx0dFsxNV09ICdkLW1tbS15eSc7XG5cdHRbMTZdPSAnZC1tbW0nO1xuXHR0WzE3XT0gJ21tbS15eSc7XG5cdHRbMThdPSAnaDptbSBBTS9QTSc7XG5cdHRbMTldPSAnaDptbTpzcyBBTS9QTSc7XG5cdHRbMjBdPSAnaDptbSc7XG5cdHRbMjFdPSAnaDptbTpzcyc7XG5cdHRbMjJdPSAnbS9kL3l5IGg6bW0nO1xuXHR0WzM3XT0gJyMsIyMwIDsoIywjIzApJztcblx0dFszOF09ICcjLCMjMCA7W1JlZF0oIywjIzApJztcblx0dFszOV09ICcjLCMjMC4wMDsoIywjIzAuMDApJztcblx0dFs0MF09ICcjLCMjMC4wMDtbUmVkXSgjLCMjMC4wMCknO1xuXHR0WzQ1XT0gJ21tOnNzJztcblx0dFs0Nl09ICdbaF06bW06c3MnO1xuXHR0WzQ3XT0gJ21tc3MuMCc7XG5cdHRbNDhdPSAnIyMwLjBFKzAnO1xuXHR0WzQ5XT0gJ0AnO1xuXHR0WzU2XT0gJ1wi5LiK5Y2IL+S4i+WNiCBcImhoXCLmmYJcIm1tXCLliIZcInNzXCLnp5IgXCInO1xuXHRyZXR1cm4gdDtcbn1cbi8qIHJlcGVhdGVkIHRvIHNhdGlhdGUgd2VicGFjayAqL1xudmFyIHRhYmxlX2ZtdCA9IHtcblx0MDogICdHZW5lcmFsJyxcblx0MTogICcwJyxcblx0MjogICcwLjAwJyxcblx0MzogICcjLCMjMCcsXG5cdDQ6ICAnIywjIzAuMDAnLFxuXHQ5OiAgJzAlJyxcblx0MTA6ICcwLjAwJScsXG5cdDExOiAnMC4wMEUrMDAnLFxuXHQxMjogJyMgPy8/Jyxcblx0MTM6ICcjID8/Lz8/Jyxcblx0MTQ6ICdtL2QveXknLFxuXHQxNTogJ2QtbW1tLXl5Jyxcblx0MTY6ICdkLW1tbScsXG5cdDE3OiAnbW1tLXl5Jyxcblx0MTg6ICdoOm1tIEFNL1BNJyxcblx0MTk6ICdoOm1tOnNzIEFNL1BNJyxcblx0MjA6ICdoOm1tJyxcblx0MjE6ICdoOm1tOnNzJyxcblx0MjI6ICdtL2QveXkgaDptbScsXG5cdDM3OiAnIywjIzAgOygjLCMjMCknLFxuXHQzODogJyMsIyMwIDtbUmVkXSgjLCMjMCknLFxuXHQzOTogJyMsIyMwLjAwOygjLCMjMC4wMCknLFxuXHQ0MDogJyMsIyMwLjAwO1tSZWRdKCMsIyMwLjAwKScsXG5cdDQ1OiAnbW06c3MnLFxuXHQ0NjogJ1toXTptbTpzcycsXG5cdDQ3OiAnbW1zcy4wJyxcblx0NDg6ICcjIzAuMEUrMCcsXG5cdDQ5OiAnQCcsXG5cdDU2OiAnXCLkuIrljYgv5LiL5Y2IIFwiaGhcIuaZglwibW1cIuWIhlwic3NcIuenkiBcIidcbn07XG5cbi8qIERlZmF1bHRzIGRldGVybWluZWQgYnkgc3lzdGVtYXRpY2FsbHkgdGVzdGluZyBpbiBFeGNlbCAyMDE5ICovXG5cbi8qIFRoZXNlIGZvcm1hdHMgYXBwZWFyIHRvIGRlZmF1bHQgdG8gb3RoZXIgZm9ybWF0cyBpbiB0aGUgdGFibGUgKi9cbnZhciBTU0ZfZGVmYXVsdF9tYXAgPSB7XG5cdDU6ICAzNywgNjogIDM4LCA3OiAgMzksIDg6ICA0MCwgICAgICAgICAvLyAgNSAtPiAzNyAuLi4gIDggLT4gNDBcblxuXHQyMzogIDAsIDI0OiAgMCwgMjU6ICAwLCAyNjogIDAsICAgICAgICAgLy8gMjMgLT4gIDAgLi4uIDI2IC0+ICAwXG5cblx0Mjc6IDE0LCAyODogMTQsIDI5OiAxNCwgMzA6IDE0LCAzMTogMTQsIC8vIDI3IC0+IDE0IC4uLiAzMSAtPiAxNFxuXG5cdDUwOiAxNCwgNTE6IDE0LCA1MjogMTQsIDUzOiAxNCwgNTQ6IDE0LCAvLyA1MCAtPiAxNCAuLi4gNTggLT4gMTRcblx0NTU6IDE0LCA1NjogMTQsIDU3OiAxNCwgNTg6IDE0LFxuXHQ1OTogIDEsIDYwOiAgMiwgNjE6ICAzLCA2MjogIDQsICAgICAgICAgLy8gNTkgLT4gIDEgLi4uIDYyIC0+ICA0XG5cblx0Njc6ICA5LCA2ODogMTAsICAgICAgICAgICAgICAgICAgICAgICAgIC8vIDY3IC0+ICA5IC4uLiA2OCAtPiAxMFxuXHQ2OTogMTIsIDcwOiAxMywgNzE6IDE0LCAgICAgICAgICAgICAgICAgLy8gNjkgLT4gMTIgLi4uIDcxIC0+IDE0XG5cdDcyOiAxNCwgNzM6IDE1LCA3NDogMTYsIDc1OiAxNywgICAgICAgICAvLyA3MiAtPiAxNCAuLi4gNzUgLT4gMTdcblx0NzY6IDIwLCA3NzogMjEsIDc4OiAyMiwgICAgICAgICAgICAgICAgIC8vIDc2IC0+IDIwIC4uLiA3OCAtPiAyMlxuXHQ3OTogNDUsIDgwOiA0NiwgODE6IDQ3LCAgICAgICAgICAgICAgICAgLy8gNzkgLT4gNDUgLi4uIDgxIC0+IDQ3XG5cdDgyOiAwICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyA4MiAtPiAgMCAuLi4gNjU1MzYgLT4gMCAob21pdHRlZClcbn07XG5cblxuLyogVGhlc2UgZm9ybWF0cyB0ZWNobmljYWxseSByZWZlciB0byBBY2NvdW50aW5nIGZvcm1hdHMgd2l0aCBubyBlcXVpdmFsZW50ICovXG52YXIgU1NGX2RlZmF1bHRfc3RyID0ge1xuXHQvLyAgNSAtLSBDdXJyZW5jeSwgICAwIGRlY2ltYWwsIGJsYWNrIG5lZ2F0aXZlXG5cdDU6ICAnXCIkXCIjLCMjMF8pO1xcXFwoXCIkXCIjLCMjMFxcXFwpJyxcblx0NjM6ICdcIiRcIiMsIyMwXyk7XFxcXChcIiRcIiMsIyMwXFxcXCknLFxuXG5cdC8vICA2IC0tIEN1cnJlbmN5LCAgIDAgZGVjaW1hbCwgcmVkICAgbmVnYXRpdmVcblx0NjogICdcIiRcIiMsIyMwXyk7W1JlZF1cXFxcKFwiJFwiIywjIzBcXFxcKScsXG5cdDY0OiAnXCIkXCIjLCMjMF8pO1tSZWRdXFxcXChcIiRcIiMsIyMwXFxcXCknLFxuXG5cdC8vICA3IC0tIEN1cnJlbmN5LCAgIDIgZGVjaW1hbCwgYmxhY2sgbmVnYXRpdmVcblx0NzogICdcIiRcIiMsIyMwLjAwXyk7XFxcXChcIiRcIiMsIyMwLjAwXFxcXCknLFxuXHQ2NTogJ1wiJFwiIywjIzAuMDBfKTtcXFxcKFwiJFwiIywjIzAuMDBcXFxcKScsXG5cblx0Ly8gIDggLS0gQ3VycmVuY3ksICAgMiBkZWNpbWFsLCByZWQgICBuZWdhdGl2ZVxuXHQ4OiAgJ1wiJFwiIywjIzAuMDBfKTtbUmVkXVxcXFwoXCIkXCIjLCMjMC4wMFxcXFwpJyxcblx0NjY6ICdcIiRcIiMsIyMwLjAwXyk7W1JlZF1cXFxcKFwiJFwiIywjIzAuMDBcXFxcKScsXG5cblx0Ly8gNDEgLS0gQWNjb3VudGluZywgMCBkZWNpbWFsLCBObyBTeW1ib2xcblx0NDE6ICdfKCogIywjIzBfKTtfKCogXFxcXCgjLCMjMFxcXFwpO18oKiBcIi1cIl8pO18oQF8pJyxcblxuXHQvLyA0MiAtLSBBY2NvdW50aW5nLCAwIGRlY2ltYWwsICQgIFN5bWJvbFxuXHQ0MjogJ18oXCIkXCIqICMsIyMwXyk7XyhcIiRcIiogXFxcXCgjLCMjMFxcXFwpO18oXCIkXCIqIFwiLVwiXyk7XyhAXyknLFxuXG5cdC8vIDQzIC0tIEFjY291bnRpbmcsIDIgZGVjaW1hbCwgTm8gU3ltYm9sXG5cdDQzOiAnXygqICMsIyMwLjAwXyk7XygqIFxcXFwoIywjIzAuMDBcXFxcKTtfKCogXCItXCI/P18pO18oQF8pJyxcblxuXHQvLyA0NCAtLSBBY2NvdW50aW5nLCAyIGRlY2ltYWwsICQgIFN5bWJvbFxuXHQ0NDogJ18oXCIkXCIqICMsIyMwLjAwXyk7XyhcIiRcIiogXFxcXCgjLCMjMC4wMFxcXFwpO18oXCIkXCIqIFwiLVwiPz9fKTtfKEBfKSdcbn07XG5cbmZ1bmN0aW9uIFNTRl9mcmFjKHgvKjpudW1iZXIqLywgRC8qOm51bWJlciovLCBtaXhlZC8qOj9ib29sZWFuKi8pLyo6QXJyYXk8bnVtYmVyPiovIHtcblx0dmFyIHNnbiA9IHggPCAwID8gLTEgOiAxO1xuXHR2YXIgQiA9IHggKiBzZ247XG5cdHZhciBQXzIgPSAwLCBQXzEgPSAxLCBQID0gMDtcblx0dmFyIFFfMiA9IDEsIFFfMSA9IDAsIFEgPSAwO1xuXHR2YXIgQSA9IE1hdGguZmxvb3IoQik7XG5cdHdoaWxlKFFfMSA8IEQpIHtcblx0XHRBID0gTWF0aC5mbG9vcihCKTtcblx0XHRQID0gQSAqIFBfMSArIFBfMjtcblx0XHRRID0gQSAqIFFfMSArIFFfMjtcblx0XHRpZigoQiAtIEEpIDwgMC4wMDAwMDAwNSkgYnJlYWs7XG5cdFx0QiA9IDEgLyAoQiAtIEEpO1xuXHRcdFBfMiA9IFBfMTsgUF8xID0gUDtcblx0XHRRXzIgPSBRXzE7IFFfMSA9IFE7XG5cdH1cblx0aWYoUSA+IEQpIHsgaWYoUV8xID4gRCkgeyBRID0gUV8yOyBQID0gUF8yOyB9IGVsc2UgeyBRID0gUV8xOyBQID0gUF8xOyB9IH1cblx0aWYoIW1peGVkKSByZXR1cm4gWzAsIHNnbiAqIFAsIFFdO1xuXHR2YXIgcSA9IE1hdGguZmxvb3Ioc2duICogUC9RKTtcblx0cmV0dXJuIFtxLCBzZ24qUCAtIHEqUSwgUV07XG59XG5mdW5jdGlvbiBTU0ZfcGFyc2VfZGF0ZV9jb2RlKHYvKjpudW1iZXIqLyxvcHRzLyo6P2FueSovLGIyLyo6P2Jvb2xlYW4qLykge1xuXHRpZih2ID4gMjk1ODQ2NSB8fCB2IDwgMCkgcmV0dXJuIG51bGw7XG5cdHZhciBkYXRlID0gKHZ8MCksIHRpbWUgPSBNYXRoLmZsb29yKDg2NDAwICogKHYgLSBkYXRlKSksIGRvdz0wO1xuXHR2YXIgZG91dD1bXTtcblx0dmFyIG91dD17RDpkYXRlLCBUOnRpbWUsIHU6ODY0MDAqKHYtZGF0ZSktdGltZSx5OjAsbTowLGQ6MCxIOjAsTTowLFM6MCxxOjB9O1xuXHRpZihNYXRoLmFicyhvdXQudSkgPCAxZS02KSBvdXQudSA9IDA7XG5cdGlmKG9wdHMgJiYgb3B0cy5kYXRlMTkwNCkgZGF0ZSArPSAxNDYyO1xuXHRpZihvdXQudSA+IDAuOTk5OSkge1xuXHRcdG91dC51ID0gMDtcblx0XHRpZigrK3RpbWUgPT0gODY0MDApIHsgb3V0LlQgPSB0aW1lID0gMDsgKytkYXRlOyArK291dC5EOyB9XG5cdH1cblx0aWYoZGF0ZSA9PT0gNjApIHtkb3V0ID0gYjIgPyBbMTMxNywxMCwyOV0gOiBbMTkwMCwyLDI5XTsgZG93PTM7fVxuXHRlbHNlIGlmKGRhdGUgPT09IDApIHtkb3V0ID0gYjIgPyBbMTMxNyw4LDI5XSA6IFsxOTAwLDEsMF07IGRvdz02O31cblx0ZWxzZSB7XG5cdFx0aWYoZGF0ZSA+IDYwKSAtLWRhdGU7XG5cdFx0LyogMSA9IEphbiAxIDE5MDAgaW4gR3JlZ29yaWFuICovXG5cdFx0dmFyIGQgPSBuZXcgRGF0ZSgxOTAwLCAwLCAxKTtcblx0XHRkLnNldERhdGUoZC5nZXREYXRlKCkgKyBkYXRlIC0gMSk7XG5cdFx0ZG91dCA9IFtkLmdldEZ1bGxZZWFyKCksIGQuZ2V0TW9udGgoKSsxLGQuZ2V0RGF0ZSgpXTtcblx0XHRkb3cgPSBkLmdldERheSgpO1xuXHRcdGlmKGRhdGUgPCA2MCkgZG93ID0gKGRvdyArIDYpICUgNztcblx0XHRpZihiMikgZG93ID0gU1NGX2ZpeF9oaWpyaShkLCBkb3V0KTtcblx0fVxuXHRvdXQueSA9IGRvdXRbMF07IG91dC5tID0gZG91dFsxXTsgb3V0LmQgPSBkb3V0WzJdO1xuXHRvdXQuUyA9IHRpbWUgJSA2MDsgdGltZSA9IE1hdGguZmxvb3IodGltZSAvIDYwKTtcblx0b3V0Lk0gPSB0aW1lICUgNjA7IHRpbWUgPSBNYXRoLmZsb29yKHRpbWUgLyA2MCk7XG5cdG91dC5IID0gdGltZTtcblx0b3V0LnEgPSBkb3c7XG5cdHJldHVybiBvdXQ7XG59XG52YXIgU1NGYmFzZWRhdGUgPSAvKiNfX1BVUkVfXyovbmV3IERhdGUoMTg5OSwgMTEsIDMxLCAwLCAwLCAwKTtcbnZhciBTU0ZkbnRocmVzaCA9IC8qI19fUFVSRV9fKi9TU0ZiYXNlZGF0ZS5nZXRUaW1lKCk7XG52YXIgU1NGYmFzZTE5MDQgPSAvKiNfX1BVUkVfXyovbmV3IERhdGUoMTkwMCwgMiwgMSwgMCwgMCwgMCk7XG5mdW5jdGlvbiBkYXRlbnVtX2xvY2FsKHYvKjpEYXRlKi8sIGRhdGUxOTA0Lyo6P2Jvb2xlYW4qLykvKjpudW1iZXIqLyB7XG5cdHZhciBlcG9jaCA9IC8qI19fUFVSRV9fKi92LmdldFRpbWUoKTtcblx0aWYoZGF0ZTE5MDQpIGVwb2NoIC09IDE0NjEqMjQqNjAqNjAqMTAwMDtcblx0ZWxzZSBpZih2ID49IFNTRmJhc2UxOTA0KSBlcG9jaCArPSAyNCo2MCo2MCoxMDAwO1xuXHRyZXR1cm4gKGVwb2NoIC0gKFNTRmRudGhyZXNoICsgKC8qI19fUFVSRV9fKi92LmdldFRpbWV6b25lT2Zmc2V0KCkgLSAvKiNfX1BVUkVfXyovU1NGYmFzZWRhdGUuZ2V0VGltZXpvbmVPZmZzZXQoKSkgKiA2MDAwMCkpIC8gKDI0ICogNjAgKiA2MCAqIDEwMDApO1xufVxuLyogRUNNQS0zNzYgMTguOC4zMCBudW1GbXQqL1xuLyogTm90ZTogYHRvUHJlY2lzaW9uYCB1c2VzIHN0YW5kYXJkIGZvcm0gd2hlbiBwcmVjID4gRSBhbmQgRSA+PSAtNiAqL1xuLyogZXhwb25lbnQgPj0gLTkgYW5kIDw9IDkgKi9cbmZ1bmN0aW9uIFNTRl9zdHJpcF9kZWNpbWFsKG8vKjpzdHJpbmcqLykvKjpzdHJpbmcqLyB7XG5cdHJldHVybiAoby5pbmRleE9mKFwiLlwiKSA9PSAtMSkgPyBvIDogby5yZXBsYWNlKC8oPzpcXC4wKnwoXFwuXFxkKlsxLTldKTArKSQvLCBcIiQxXCIpO1xufVxuXG4vKiBHZW5lcmFsIEV4cG9uZW50aWFsIGFsd2F5cyBzaG93cyAyIGRpZ2l0cyBleHAgYW5kIHRyaW1zIHRoZSBtYW50aXNzYSAqL1xuZnVuY3Rpb24gU1NGX25vcm1hbGl6ZV9leHAoby8qOnN0cmluZyovKS8qOnN0cmluZyovIHtcblx0aWYoby5pbmRleE9mKFwiRVwiKSA9PSAtMSkgcmV0dXJuIG87XG5cdHJldHVybiBvLnJlcGxhY2UoLyg/OlxcLjAqfChcXC5cXGQqWzEtOV0pMCspW0VlXS8sXCIkMUVcIikucmVwbGFjZSgvKEVbKy1dKShcXGQpJC8sXCIkMTAkMlwiKTtcbn1cblxuLyogZXhwb25lbnQgPj0gLTkgYW5kIDw9IDkgKi9cbmZ1bmN0aW9uIFNTRl9zbWFsbF9leHAodi8qOm51bWJlciovKS8qOnN0cmluZyovIHtcblx0dmFyIHcgPSAodjwwPzEyOjExKTtcblx0dmFyIG8gPSBTU0Zfc3RyaXBfZGVjaW1hbCh2LnRvRml4ZWQoMTIpKTsgaWYoby5sZW5ndGggPD0gdykgcmV0dXJuIG87XG5cdG8gPSB2LnRvUHJlY2lzaW9uKDEwKTsgaWYoby5sZW5ndGggPD0gdykgcmV0dXJuIG87XG5cdHJldHVybiB2LnRvRXhwb25lbnRpYWwoNSk7XG59XG5cbi8qIGV4cG9uZW50ID49IDExIG9yIDw9IC0xMCBsaWtlbHkgZXhwb25lbnRpYWwgKi9cbmZ1bmN0aW9uIFNTRl9sYXJnZV9leHAodi8qOm51bWJlciovKS8qOnN0cmluZyovIHtcblx0dmFyIG8gPSBTU0Zfc3RyaXBfZGVjaW1hbCh2LnRvRml4ZWQoMTEpKTtcblx0cmV0dXJuIChvLmxlbmd0aCA+ICh2PDA/MTI6MTEpIHx8IG8gPT09IFwiMFwiIHx8IG8gPT09IFwiLTBcIikgPyB2LnRvUHJlY2lzaW9uKDYpIDogbztcbn1cblxuZnVuY3Rpb24gU1NGX2dlbmVyYWxfbnVtKHYvKjpudW1iZXIqLykvKjpzdHJpbmcqLyB7XG5cdHZhciBWID0gTWF0aC5mbG9vcihNYXRoLmxvZyhNYXRoLmFicyh2KSkqTWF0aC5MT0cxMEUpLCBvO1xuXG5cdGlmKFYgPj0gLTQgJiYgViA8PSAtMSkgbyA9IHYudG9QcmVjaXNpb24oMTArVik7XG5cdGVsc2UgaWYoTWF0aC5hYnMoVikgPD0gOSkgbyA9IFNTRl9zbWFsbF9leHAodik7XG5cdGVsc2UgaWYoViA9PT0gMTApIG8gPSB2LnRvRml4ZWQoMTApLnN1YnN0cigwLDEyKTtcblx0ZWxzZSBvID0gU1NGX2xhcmdlX2V4cCh2KTtcblxuXHRyZXR1cm4gU1NGX3N0cmlwX2RlY2ltYWwoU1NGX25vcm1hbGl6ZV9leHAoby50b1VwcGVyQ2FzZSgpKSk7XG59XG5cblxuLypcblx0XCJHZW5lcmFsXCIgcnVsZXM6XG5cdC0gdGV4dCBpcyBwYXNzZWQgdGhyb3VnaCAoXCJAXCIpXG5cdC0gYm9vbGVhbnMgYXJlIHJlbmRlcmVkIGFzIFRSVUUvRkFMU0Vcblx0LSBcInVwIHRvIDExIGNoYXJhY3RlcnNcIiBkaXNwbGF5ZWQgZm9yIG51bWJlcnNcblx0LSBEZWZhdWx0IGRhdGUgZm9ybWF0IChjb2RlIDE0KSB1c2VkIGZvciBEYXRlc1xuXG5cdFRoZSBsb25nZXN0IDMyLWJpdCBpbnRlZ2VyIHRleHQgaXMgXCItMjE0NzQ4MzY0OFwiLCBleGFjdGx5IDExIGNoYXJzXG5cdFRPRE86IHRlY2huaWNhbGx5IHRoZSBkaXNwbGF5IGRlcGVuZHMgb24gdGhlIHdpZHRoIG9mIHRoZSBjZWxsXG4qL1xuZnVuY3Rpb24gU1NGX2dlbmVyYWwodi8qOmFueSovLCBvcHRzLyo6YW55Ki8pIHtcblx0c3dpdGNoKHR5cGVvZiB2KSB7XG5cdFx0Y2FzZSAnc3RyaW5nJzogcmV0dXJuIHY7XG5cdFx0Y2FzZSAnYm9vbGVhbic6IHJldHVybiB2ID8gXCJUUlVFXCIgOiBcIkZBTFNFXCI7XG5cdFx0Y2FzZSAnbnVtYmVyJzogcmV0dXJuICh2fDApID09PSB2ID8gdi50b1N0cmluZygxMCkgOiBTU0ZfZ2VuZXJhbF9udW0odik7XG5cdFx0Y2FzZSAndW5kZWZpbmVkJzogcmV0dXJuIFwiXCI7XG5cdFx0Y2FzZSAnb2JqZWN0Jzpcblx0XHRcdGlmKHYgPT0gbnVsbCkgcmV0dXJuIFwiXCI7XG5cdFx0XHRpZih2IGluc3RhbmNlb2YgRGF0ZSkgcmV0dXJuIFNTRl9mb3JtYXQoMTQsIGRhdGVudW1fbG9jYWwodiwgb3B0cyAmJiBvcHRzLmRhdGUxOTA0KSwgb3B0cyk7XG5cdH1cblx0dGhyb3cgbmV3IEVycm9yKFwidW5zdXBwb3J0ZWQgdmFsdWUgaW4gR2VuZXJhbCBmb3JtYXQ6IFwiICsgdik7XG59XG5cbmZ1bmN0aW9uIFNTRl9maXhfaGlqcmkoZGF0ZS8qOkRhdGUqLywgby8qOltudW1iZXIsIG51bWJlciwgbnVtYmVyXSovKSB7XG4gIC8qIFRPRE86IHByb3Blcmx5IGFkanVzdCB5L20vZCBhbmQgICovXG4gIG9bMF0gLT0gNTgxO1xuICB2YXIgZG93ID0gZGF0ZS5nZXREYXkoKTtcbiAgaWYoZGF0ZSA8IDYwKSBkb3cgPSAoZG93ICsgNikgJSA3O1xuICByZXR1cm4gZG93O1xufVxuLy92YXIgVEhBSV9ESUdJVFMgPSBcIlxcdTBFNTBcXHUwRTUxXFx1MEU1MlxcdTBFNTNcXHUwRTU0XFx1MEU1NVxcdTBFNTZcXHUwRTU3XFx1MEU1OFxcdTBFNTlcIi5zcGxpdChcIlwiKTtcbmZ1bmN0aW9uIFNTRl93cml0ZV9kYXRlKHR5cGUvKjpudW1iZXIqLywgZm10Lyo6c3RyaW5nKi8sIHZhbCwgc3MwLyo6P251bWJlciovKS8qOnN0cmluZyovIHtcblx0dmFyIG89XCJcIiwgc3M9MCwgdHQ9MCwgeSA9IHZhbC55LCBvdXQsIG91dGwgPSAwO1xuXHRzd2l0Y2godHlwZSkge1xuXHRcdGNhc2UgOTg6IC8qICdiJyBidWRkaGlzdCB5ZWFyICovXG5cdFx0XHR5ID0gdmFsLnkgKyA1NDM7XG5cdFx0XHQvKiBmYWxscyB0aHJvdWdoICovXG5cdFx0Y2FzZSAxMjE6IC8qICd5JyB5ZWFyICovXG5cdFx0c3dpdGNoKGZtdC5sZW5ndGgpIHtcblx0XHRcdGNhc2UgMTogY2FzZSAyOiBvdXQgPSB5ICUgMTAwOyBvdXRsID0gMjsgYnJlYWs7XG5cdFx0XHRkZWZhdWx0OiBvdXQgPSB5ICUgMTAwMDA7IG91dGwgPSA0OyBicmVhaztcblx0XHR9IGJyZWFrO1xuXHRcdGNhc2UgMTA5OiAvKiAnbScgbW9udGggKi9cblx0XHRzd2l0Y2goZm10Lmxlbmd0aCkge1xuXHRcdFx0Y2FzZSAxOiBjYXNlIDI6IG91dCA9IHZhbC5tOyBvdXRsID0gZm10Lmxlbmd0aDsgYnJlYWs7XG5cdFx0XHRjYXNlIDM6IHJldHVybiBtb250aHNbdmFsLm0tMV1bMV07XG5cdFx0XHRjYXNlIDU6IHJldHVybiBtb250aHNbdmFsLm0tMV1bMF07XG5cdFx0XHRkZWZhdWx0OiByZXR1cm4gbW9udGhzW3ZhbC5tLTFdWzJdO1xuXHRcdH0gYnJlYWs7XG5cdFx0Y2FzZSAxMDA6IC8qICdkJyBkYXkgKi9cblx0XHRzd2l0Y2goZm10Lmxlbmd0aCkge1xuXHRcdFx0Y2FzZSAxOiBjYXNlIDI6IG91dCA9IHZhbC5kOyBvdXRsID0gZm10Lmxlbmd0aDsgYnJlYWs7XG5cdFx0XHRjYXNlIDM6IHJldHVybiBkYXlzW3ZhbC5xXVswXTtcblx0XHRcdGRlZmF1bHQ6IHJldHVybiBkYXlzW3ZhbC5xXVsxXTtcblx0XHR9IGJyZWFrO1xuXHRcdGNhc2UgMTA0OiAvKiAnaCcgMTItaG91ciAqL1xuXHRcdHN3aXRjaChmbXQubGVuZ3RoKSB7XG5cdFx0XHRjYXNlIDE6IGNhc2UgMjogb3V0ID0gMSsodmFsLkgrMTEpJTEyOyBvdXRsID0gZm10Lmxlbmd0aDsgYnJlYWs7XG5cdFx0XHRkZWZhdWx0OiB0aHJvdyAnYmFkIGhvdXIgZm9ybWF0OiAnICsgZm10O1xuXHRcdH0gYnJlYWs7XG5cdFx0Y2FzZSA3MjogLyogJ0gnIDI0LWhvdXIgKi9cblx0XHRzd2l0Y2goZm10Lmxlbmd0aCkge1xuXHRcdFx0Y2FzZSAxOiBjYXNlIDI6IG91dCA9IHZhbC5IOyBvdXRsID0gZm10Lmxlbmd0aDsgYnJlYWs7XG5cdFx0XHRkZWZhdWx0OiB0aHJvdyAnYmFkIGhvdXIgZm9ybWF0OiAnICsgZm10O1xuXHRcdH0gYnJlYWs7XG5cdFx0Y2FzZSA3NzogLyogJ00nIG1pbnV0ZXMgKi9cblx0XHRzd2l0Y2goZm10Lmxlbmd0aCkge1xuXHRcdFx0Y2FzZSAxOiBjYXNlIDI6IG91dCA9IHZhbC5NOyBvdXRsID0gZm10Lmxlbmd0aDsgYnJlYWs7XG5cdFx0XHRkZWZhdWx0OiB0aHJvdyAnYmFkIG1pbnV0ZSBmb3JtYXQ6ICcgKyBmbXQ7XG5cdFx0fSBicmVhaztcblx0XHRjYXNlIDExNTogLyogJ3MnIHNlY29uZHMgKi9cblx0XHRcdGlmKGZtdCAhPSAncycgJiYgZm10ICE9ICdzcycgJiYgZm10ICE9ICcuMCcgJiYgZm10ICE9ICcuMDAnICYmIGZtdCAhPSAnLjAwMCcpIHRocm93ICdiYWQgc2Vjb25kIGZvcm1hdDogJyArIGZtdDtcblx0XHRcdGlmKHZhbC51ID09PSAwICYmIChmbXQgPT0gXCJzXCIgfHwgZm10ID09IFwic3NcIikpIHJldHVybiBwYWQwKHZhbC5TLCBmbXQubGVuZ3RoKTtcblx0XHRcdC8qOjppZighc3MwKSBzczAgPSAwOyAqL1xuXHRcdFx0aWYoc3MwID49IDIpIHR0ID0gc3MwID09PSAzID8gMTAwMCA6IDEwMDtcblx0XHRcdGVsc2UgdHQgPSBzczAgPT09IDEgPyAxMCA6IDE7XG5cdFx0XHRzcyA9IE1hdGgucm91bmQoKHR0KSoodmFsLlMgKyB2YWwudSkpO1xuXHRcdFx0aWYoc3MgPj0gNjAqdHQpIHNzID0gMDtcblx0XHRcdGlmKGZtdCA9PT0gJ3MnKSByZXR1cm4gc3MgPT09IDAgPyBcIjBcIiA6IFwiXCIrc3MvdHQ7XG5cdFx0XHRvID0gcGFkMChzcywyICsgc3MwKTtcblx0XHRcdGlmKGZtdCA9PT0gJ3NzJykgcmV0dXJuIG8uc3Vic3RyKDAsMik7XG5cdFx0XHRyZXR1cm4gXCIuXCIgKyBvLnN1YnN0cigyLGZtdC5sZW5ndGgtMSk7XG5cdFx0Y2FzZSA5MDogLyogJ1onIGFic29sdXRlIHRpbWUgKi9cblx0XHRzd2l0Y2goZm10KSB7XG5cdFx0XHRjYXNlICdbaF0nOiBjYXNlICdbaGhdJzogb3V0ID0gdmFsLkQqMjQrdmFsLkg7IGJyZWFrO1xuXHRcdFx0Y2FzZSAnW21dJzogY2FzZSAnW21tXSc6IG91dCA9ICh2YWwuRCoyNCt2YWwuSCkqNjArdmFsLk07IGJyZWFrO1xuXHRcdFx0Y2FzZSAnW3NdJzogY2FzZSAnW3NzXSc6IG91dCA9ICgodmFsLkQqMjQrdmFsLkgpKjYwK3ZhbC5NKSo2MCtNYXRoLnJvdW5kKHZhbC5TK3ZhbC51KTsgYnJlYWs7XG5cdFx0XHRkZWZhdWx0OiB0aHJvdyAnYmFkIGFic3RpbWUgZm9ybWF0OiAnICsgZm10O1xuXHRcdH0gb3V0bCA9IGZtdC5sZW5ndGggPT09IDMgPyAxIDogMjsgYnJlYWs7XG5cdFx0Y2FzZSAxMDE6IC8qICdlJyBlcmEgKi9cblx0XHRcdG91dCA9IHk7IG91dGwgPSAxOyBicmVhaztcblx0fVxuXHR2YXIgb3V0c3RyID0gb3V0bCA+IDAgPyBwYWQwKG91dCwgb3V0bCkgOiBcIlwiO1xuXHRyZXR1cm4gb3V0c3RyO1xufVxuXG5cbi8qanNoaW50IC1XMDg2ICovXG4vKmpzaGludCArVzA4NiAqL1xuZnVuY3Rpb24gY29tbWFpZnkocy8qOnN0cmluZyovKS8qOnN0cmluZyovIHtcblx0dmFyIHcgPSAzO1xuXHRpZihzLmxlbmd0aCA8PSB3KSByZXR1cm4gcztcblx0dmFyIGogPSAocy5sZW5ndGggJSB3KSwgbyA9IHMuc3Vic3RyKDAsaik7XG5cdGZvcig7IGohPXMubGVuZ3RoOyBqKz13KSBvKz0oby5sZW5ndGggPiAwID8gXCIsXCIgOiBcIlwiKSArIHMuc3Vic3RyKGosdyk7XG5cdHJldHVybiBvO1xufVxudmFyIHBjdDEgPSAvJS9nO1xuZnVuY3Rpb24gd3JpdGVfbnVtX3BjdCh0eXBlLyo6c3RyaW5nKi8sIGZtdC8qOnN0cmluZyovLCB2YWwvKjpudW1iZXIqLykvKjpzdHJpbmcqL3tcblx0dmFyIHNmbXQgPSBmbXQucmVwbGFjZShwY3QxLFwiXCIpLCBtdWwgPSBmbXQubGVuZ3RoIC0gc2ZtdC5sZW5ndGg7XG5cdHJldHVybiB3cml0ZV9udW0odHlwZSwgc2ZtdCwgdmFsICogTWF0aC5wb3coMTAsMiptdWwpKSArIGZpbGwoXCIlXCIsbXVsKTtcbn1cblxuZnVuY3Rpb24gd3JpdGVfbnVtX2NtKHR5cGUvKjpzdHJpbmcqLywgZm10Lyo6c3RyaW5nKi8sIHZhbC8qOm51bWJlciovKS8qOnN0cmluZyove1xuXHR2YXIgaWR4ID0gZm10Lmxlbmd0aCAtIDE7XG5cdHdoaWxlKGZtdC5jaGFyQ29kZUF0KGlkeC0xKSA9PT0gNDQpIC0taWR4O1xuXHRyZXR1cm4gd3JpdGVfbnVtKHR5cGUsIGZtdC5zdWJzdHIoMCxpZHgpLCB2YWwgLyBNYXRoLnBvdygxMCwzKihmbXQubGVuZ3RoLWlkeCkpKTtcbn1cblxuZnVuY3Rpb24gd3JpdGVfbnVtX2V4cChmbXQvKjpzdHJpbmcqLywgdmFsLyo6bnVtYmVyKi8pLyo6c3RyaW5nKi97XG5cdHZhciBvLyo6c3RyaW5nKi87XG5cdHZhciBpZHggPSBmbXQuaW5kZXhPZihcIkVcIikgLSBmbXQuaW5kZXhPZihcIi5cIikgLSAxO1xuXHRpZihmbXQubWF0Y2goL14jKzAuMEVcXCswJC8pKSB7XG5cdFx0aWYodmFsID09IDApIHJldHVybiBcIjAuMEUrMFwiO1xuXHRcdGVsc2UgaWYodmFsIDwgMCkgcmV0dXJuIFwiLVwiICsgd3JpdGVfbnVtX2V4cChmbXQsIC12YWwpO1xuXHRcdHZhciBwZXJpb2QgPSBmbXQuaW5kZXhPZihcIi5cIik7IGlmKHBlcmlvZCA9PT0gLTEpIHBlcmlvZD1mbXQuaW5kZXhPZignRScpO1xuXHRcdHZhciBlZSA9IE1hdGguZmxvb3IoTWF0aC5sb2codmFsKSpNYXRoLkxPRzEwRSklcGVyaW9kO1xuXHRcdGlmKGVlIDwgMCkgZWUgKz0gcGVyaW9kO1xuXHRcdG8gPSAodmFsL01hdGgucG93KDEwLGVlKSkudG9QcmVjaXNpb24oaWR4KzErKHBlcmlvZCtlZSklcGVyaW9kKTtcblx0XHRpZihvLmluZGV4T2YoXCJlXCIpID09PSAtMSkge1xuXHRcdFx0dmFyIGZha2VlID0gTWF0aC5mbG9vcihNYXRoLmxvZyh2YWwpKk1hdGguTE9HMTBFKTtcblx0XHRcdGlmKG8uaW5kZXhPZihcIi5cIikgPT09IC0xKSBvID0gby5jaGFyQXQoMCkgKyBcIi5cIiArIG8uc3Vic3RyKDEpICsgXCJFK1wiICsgKGZha2VlIC0gby5sZW5ndGgrZWUpO1xuXHRcdFx0ZWxzZSBvICs9IFwiRStcIiArIChmYWtlZSAtIGVlKTtcblx0XHRcdHdoaWxlKG8uc3Vic3RyKDAsMikgPT09IFwiMC5cIikge1xuXHRcdFx0XHRvID0gby5jaGFyQXQoMCkgKyBvLnN1YnN0cigyLHBlcmlvZCkgKyBcIi5cIiArIG8uc3Vic3RyKDIrcGVyaW9kKTtcblx0XHRcdFx0byA9IG8ucmVwbGFjZSgvXjArKFsxLTldKS8sXCIkMVwiKS5yZXBsYWNlKC9eMCtcXC4vLFwiMC5cIik7XG5cdFx0XHR9XG5cdFx0XHRvID0gby5yZXBsYWNlKC9cXCstLyxcIi1cIik7XG5cdFx0fVxuXHRcdG8gPSBvLnJlcGxhY2UoL14oWystXT8pKFxcZCopXFwuKFxcZCopW0VlXS8sZnVuY3Rpb24oJCQsJDEsJDIsJDMpIHsgcmV0dXJuICQxICsgJDIgKyAkMy5zdWJzdHIoMCwocGVyaW9kK2VlKSVwZXJpb2QpICsgXCIuXCIgKyAkMy5zdWJzdHIoZWUpICsgXCJFXCI7IH0pO1xuXHR9IGVsc2UgbyA9IHZhbC50b0V4cG9uZW50aWFsKGlkeCk7XG5cdGlmKGZtdC5tYXRjaCgvRVxcKzAwJC8pICYmIG8ubWF0Y2goL2VbKy1dXFxkJC8pKSBvID0gby5zdWJzdHIoMCxvLmxlbmd0aC0xKSArIFwiMFwiICsgby5jaGFyQXQoby5sZW5ndGgtMSk7XG5cdGlmKGZtdC5tYXRjaCgvRVxcLS8pICYmIG8ubWF0Y2goL2VcXCsvKSkgbyA9IG8ucmVwbGFjZSgvZVxcKy8sXCJlXCIpO1xuXHRyZXR1cm4gby5yZXBsYWNlKFwiZVwiLFwiRVwiKTtcbn1cbnZhciBmcmFjMSA9IC8jIChcXD8rKSggPylcXC8oID8pKFxcZCspLztcbmZ1bmN0aW9uIHdyaXRlX251bV9mMShyLyo6QXJyYXk8c3RyaW5nPiovLCBhdmFsLyo6bnVtYmVyKi8sIHNpZ24vKjpzdHJpbmcqLykvKjpzdHJpbmcqLyB7XG5cdHZhciBkZW4gPSBwYXJzZUludChyWzRdLDEwKSwgcnIgPSBNYXRoLnJvdW5kKGF2YWwgKiBkZW4pLCBiYXNlID0gTWF0aC5mbG9vcihyci9kZW4pO1xuXHR2YXIgbXluID0gKHJyIC0gYmFzZSpkZW4pLCBteWQgPSBkZW47XG5cdHJldHVybiBzaWduICsgKGJhc2UgPT09IDAgPyBcIlwiIDogXCJcIitiYXNlKSArIFwiIFwiICsgKG15biA9PT0gMCA/IGZpbGwoXCIgXCIsIHJbMV0ubGVuZ3RoICsgMSArIHJbNF0ubGVuZ3RoKSA6IHBhZF8obXluLHJbMV0ubGVuZ3RoKSArIHJbMl0gKyBcIi9cIiArIHJbM10gKyBwYWQwKG15ZCxyWzRdLmxlbmd0aCkpO1xufVxuZnVuY3Rpb24gd3JpdGVfbnVtX2YyKHIvKjpBcnJheTxzdHJpbmc+Ki8sIGF2YWwvKjpudW1iZXIqLywgc2lnbi8qOnN0cmluZyovKS8qOnN0cmluZyovIHtcblx0cmV0dXJuIHNpZ24gKyAoYXZhbCA9PT0gMCA/IFwiXCIgOiBcIlwiK2F2YWwpICsgZmlsbChcIiBcIiwgclsxXS5sZW5ndGggKyAyICsgcls0XS5sZW5ndGgpO1xufVxudmFyIGRlYzEgPSAvXiMqMCpcXC4oWzAjXSspLztcbnZhciBjbG9zZXBhcmVuID0gL1xcKS4qWzAjXS87XG52YXIgcGhvbmUgPSAvXFwoIyMjXFwpICMjI1xcXFw/LSMjIyMvO1xuZnVuY3Rpb24gaGFzaHEoc3RyLyo6c3RyaW5nKi8pLyo6c3RyaW5nKi8ge1xuXHR2YXIgbyA9IFwiXCIsIGNjO1xuXHRmb3IodmFyIGkgPSAwOyBpICE9IHN0ci5sZW5ndGg7ICsraSkgc3dpdGNoKChjYz1zdHIuY2hhckNvZGVBdChpKSkpIHtcblx0XHRjYXNlIDM1OiBicmVhaztcblx0XHRjYXNlIDYzOiBvKz0gXCIgXCI7IGJyZWFrO1xuXHRcdGNhc2UgNDg6IG8rPSBcIjBcIjsgYnJlYWs7XG5cdFx0ZGVmYXVsdDogbys9IFN0cmluZy5mcm9tQ2hhckNvZGUoY2MpO1xuXHR9XG5cdHJldHVybiBvO1xufVxuZnVuY3Rpb24gcm5kKHZhbC8qOm51bWJlciovLCBkLyo6bnVtYmVyKi8pLyo6c3RyaW5nKi8geyB2YXIgZGQgPSBNYXRoLnBvdygxMCxkKTsgcmV0dXJuIFwiXCIrKE1hdGgucm91bmQodmFsICogZGQpL2RkKTsgfVxuZnVuY3Rpb24gZGVjKHZhbC8qOm51bWJlciovLCBkLyo6bnVtYmVyKi8pLyo6bnVtYmVyKi8ge1xuXHR2YXIgX2ZyYWMgPSB2YWwgLSBNYXRoLmZsb29yKHZhbCksIGRkID0gTWF0aC5wb3coMTAsZCk7XG5cdGlmIChkIDwgKCcnICsgTWF0aC5yb3VuZChfZnJhYyAqIGRkKSkubGVuZ3RoKSByZXR1cm4gMDtcblx0cmV0dXJuIE1hdGgucm91bmQoX2ZyYWMgKiBkZCk7XG59XG5mdW5jdGlvbiBjYXJyeSh2YWwvKjpudW1iZXIqLywgZC8qOm51bWJlciovKS8qOm51bWJlciovIHtcblx0aWYgKGQgPCAoJycgKyBNYXRoLnJvdW5kKCh2YWwtTWF0aC5mbG9vcih2YWwpKSpNYXRoLnBvdygxMCxkKSkpLmxlbmd0aCkge1xuXHRcdHJldHVybiAxO1xuXHR9XG5cdHJldHVybiAwO1xufVxuZnVuY3Rpb24gZmxyKHZhbC8qOm51bWJlciovKS8qOnN0cmluZyovIHtcblx0aWYodmFsIDwgMjE0NzQ4MzY0NyAmJiB2YWwgPiAtMjE0NzQ4MzY0OCkgcmV0dXJuIFwiXCIrKHZhbCA+PSAwID8gKHZhbHwwKSA6ICh2YWwtMXwwKSk7XG5cdHJldHVybiBcIlwiK01hdGguZmxvb3IodmFsKTtcbn1cbmZ1bmN0aW9uIHdyaXRlX251bV9mbHQodHlwZS8qOnN0cmluZyovLCBmbXQvKjpzdHJpbmcqLywgdmFsLyo6bnVtYmVyKi8pLyo6c3RyaW5nKi8ge1xuXHRpZih0eXBlLmNoYXJDb2RlQXQoMCkgPT09IDQwICYmICFmbXQubWF0Y2goY2xvc2VwYXJlbikpIHtcblx0XHR2YXIgZmZtdCA9IGZtdC5yZXBsYWNlKC9cXCggKi8sXCJcIikucmVwbGFjZSgvIFxcKS8sXCJcIikucmVwbGFjZSgvXFwpLyxcIlwiKTtcblx0XHRpZih2YWwgPj0gMCkgcmV0dXJuIHdyaXRlX251bV9mbHQoJ24nLCBmZm10LCB2YWwpO1xuXHRcdHJldHVybiAnKCcgKyB3cml0ZV9udW1fZmx0KCduJywgZmZtdCwgLXZhbCkgKyAnKSc7XG5cdH1cblx0aWYoZm10LmNoYXJDb2RlQXQoZm10Lmxlbmd0aCAtIDEpID09PSA0NCkgcmV0dXJuIHdyaXRlX251bV9jbSh0eXBlLCBmbXQsIHZhbCk7XG5cdGlmKGZtdC5pbmRleE9mKCclJykgIT09IC0xKSByZXR1cm4gd3JpdGVfbnVtX3BjdCh0eXBlLCBmbXQsIHZhbCk7XG5cdGlmKGZtdC5pbmRleE9mKCdFJykgIT09IC0xKSByZXR1cm4gd3JpdGVfbnVtX2V4cChmbXQsIHZhbCk7XG5cdGlmKGZtdC5jaGFyQ29kZUF0KDApID09PSAzNikgcmV0dXJuIFwiJFwiK3dyaXRlX251bV9mbHQodHlwZSxmbXQuc3Vic3RyKGZtdC5jaGFyQXQoMSk9PScgJz8yOjEpLHZhbCk7XG5cdHZhciBvO1xuXHR2YXIgci8qOj9BcnJheTxzdHJpbmc+Ki8sIHJpLCBmZiwgYXZhbCA9IE1hdGguYWJzKHZhbCksIHNpZ24gPSB2YWwgPCAwID8gXCItXCIgOiBcIlwiO1xuXHRpZihmbXQubWF0Y2goL14wMCskLykpIHJldHVybiBzaWduICsgcGFkMHIoYXZhbCxmbXQubGVuZ3RoKTtcblx0aWYoZm10Lm1hdGNoKC9eWyM/XSskLykpIHtcblx0XHRvID0gcGFkMHIodmFsLDApOyBpZihvID09PSBcIjBcIikgbyA9IFwiXCI7XG5cdFx0cmV0dXJuIG8ubGVuZ3RoID4gZm10Lmxlbmd0aCA/IG8gOiBoYXNocShmbXQuc3Vic3RyKDAsZm10Lmxlbmd0aC1vLmxlbmd0aCkpICsgbztcblx0fVxuXHRpZigociA9IGZtdC5tYXRjaChmcmFjMSkpKSByZXR1cm4gd3JpdGVfbnVtX2YxKHIsIGF2YWwsIHNpZ24pO1xuXHRpZihmbXQubWF0Y2goL14jKzArJC8pKSByZXR1cm4gc2lnbiArIHBhZDByKGF2YWwsZm10Lmxlbmd0aCAtIGZtdC5pbmRleE9mKFwiMFwiKSk7XG5cdGlmKChyID0gZm10Lm1hdGNoKGRlYzEpKSkge1xuXHRcdG8gPSBybmQodmFsLCByWzFdLmxlbmd0aCkucmVwbGFjZSgvXihbXlxcLl0rKSQvLFwiJDEuXCIraGFzaHEoclsxXSkpLnJlcGxhY2UoL1xcLiQvLFwiLlwiK2hhc2hxKHJbMV0pKS5yZXBsYWNlKC9cXC4oXFxkKikkLyxmdW5jdGlvbigkJCwgJDEpIHsgcmV0dXJuIFwiLlwiICsgJDEgKyBmaWxsKFwiMFwiLCBoYXNocSgvKjo6KCovci8qOjp8fFtcIlwiXSkqL1sxXSkubGVuZ3RoLSQxLmxlbmd0aCk7IH0pO1xuXHRcdHJldHVybiBmbXQuaW5kZXhPZihcIjAuXCIpICE9PSAtMSA/IG8gOiBvLnJlcGxhY2UoL14wXFwuLyxcIi5cIik7XG5cdH1cblx0Zm10ID0gZm10LnJlcGxhY2UoL14jKyhbMC5dKS8sIFwiJDFcIik7XG5cdGlmKChyID0gZm10Lm1hdGNoKC9eKDAqKVxcLigjKikkLykpKSB7XG5cdFx0cmV0dXJuIHNpZ24gKyBybmQoYXZhbCwgclsyXS5sZW5ndGgpLnJlcGxhY2UoL1xcLihcXGQqWzEtOV0pMCokLyxcIi4kMVwiKS5yZXBsYWNlKC9eKC0/XFxkKikkLyxcIiQxLlwiKS5yZXBsYWNlKC9eMFxcLi8sclsxXS5sZW5ndGg/XCIwLlwiOlwiLlwiKTtcblx0fVxuXHRpZigociA9IGZtdC5tYXRjaCgvXiN7MSwzfSwjIzAoXFwuPykkLykpKSByZXR1cm4gc2lnbiArIGNvbW1haWZ5KHBhZDByKGF2YWwsMCkpO1xuXHRpZigociA9IGZtdC5tYXRjaCgvXiMsIyMwXFwuKFsjMF0qMCkkLykpKSB7XG5cdFx0cmV0dXJuIHZhbCA8IDAgPyBcIi1cIiArIHdyaXRlX251bV9mbHQodHlwZSwgZm10LCAtdmFsKSA6IGNvbW1haWZ5KFwiXCIrKE1hdGguZmxvb3IodmFsKSArIGNhcnJ5KHZhbCwgclsxXS5sZW5ndGgpKSkgKyBcIi5cIiArIHBhZDAoZGVjKHZhbCwgclsxXS5sZW5ndGgpLHJbMV0ubGVuZ3RoKTtcblx0fVxuXHRpZigociA9IGZtdC5tYXRjaCgvXiMsIyosIzAvKSkpIHJldHVybiB3cml0ZV9udW1fZmx0KHR5cGUsZm10LnJlcGxhY2UoL14jLCMqLC8sXCJcIiksdmFsKTtcblx0aWYoKHIgPSBmbXQubWF0Y2goL14oWzAjXSspKFxcXFw/LShbMCNdKykpKyQvKSkpIHtcblx0XHRvID0gX3N0cnJldih3cml0ZV9udW1fZmx0KHR5cGUsIGZtdC5yZXBsYWNlKC9bXFxcXC1dL2csXCJcIiksIHZhbCkpO1xuXHRcdHJpID0gMDtcblx0XHRyZXR1cm4gX3N0cnJldihfc3RycmV2KGZtdC5yZXBsYWNlKC9cXFxcL2csXCJcIikpLnJlcGxhY2UoL1swI10vZyxmdW5jdGlvbih4KXtyZXR1cm4gcmk8by5sZW5ndGg/by5jaGFyQXQocmkrKyk6eD09PScwJz8nMCc6XCJcIjt9KSk7XG5cdH1cblx0aWYoZm10Lm1hdGNoKHBob25lKSkge1xuXHRcdG8gPSB3cml0ZV9udW1fZmx0KHR5cGUsIFwiIyMjIyMjIyMjI1wiLCB2YWwpO1xuXHRcdHJldHVybiBcIihcIiArIG8uc3Vic3RyKDAsMykgKyBcIikgXCIgKyBvLnN1YnN0cigzLCAzKSArIFwiLVwiICsgby5zdWJzdHIoNik7XG5cdH1cblx0dmFyIG9hID0gXCJcIjtcblx0aWYoKHIgPSBmbXQubWF0Y2goL14oWyMwP10rKSggPylcXC8oID8pKFsjMD9dKykvKSkpIHtcblx0XHRyaSA9IE1hdGgubWluKC8qOjpTdHJpbmcoKi9yWzRdLyo6OikqLy5sZW5ndGgsNyk7XG5cdFx0ZmYgPSBTU0ZfZnJhYyhhdmFsLCBNYXRoLnBvdygxMCxyaSktMSwgZmFsc2UpO1xuXHRcdG8gPSBcIlwiICsgc2lnbjtcblx0XHRvYSA9IHdyaXRlX251bShcIm5cIiwgLyo6OlN0cmluZygqL3JbMV0vKjo6KSovLCBmZlsxXSk7XG5cdFx0aWYob2EuY2hhckF0KG9hLmxlbmd0aC0xKSA9PSBcIiBcIikgb2EgPSBvYS5zdWJzdHIoMCxvYS5sZW5ndGgtMSkgKyBcIjBcIjtcblx0XHRvICs9IG9hICsgLyo6OlN0cmluZygqL3JbMl0vKjo6KSovICsgXCIvXCIgKyAvKjo6U3RyaW5nKCovclszXS8qOjopKi87XG5cdFx0b2EgPSBycGFkXyhmZlsyXSxyaSk7XG5cdFx0aWYob2EubGVuZ3RoIDwgcls0XS5sZW5ndGgpIG9hID0gaGFzaHEocls0XS5zdWJzdHIocls0XS5sZW5ndGgtb2EubGVuZ3RoKSkgKyBvYTtcblx0XHRvICs9IG9hO1xuXHRcdHJldHVybiBvO1xuXHR9XG5cdGlmKChyID0gZm10Lm1hdGNoKC9eIyAoWyMwP10rKSggPylcXC8oID8pKFsjMD9dKykvKSkpIHtcblx0XHRyaSA9IE1hdGgubWluKE1hdGgubWF4KHJbMV0ubGVuZ3RoLCByWzRdLmxlbmd0aCksNyk7XG5cdFx0ZmYgPSBTU0ZfZnJhYyhhdmFsLCBNYXRoLnBvdygxMCxyaSktMSwgdHJ1ZSk7XG5cdFx0cmV0dXJuIHNpZ24gKyAoZmZbMF18fChmZlsxXSA/IFwiXCIgOiBcIjBcIikpICsgXCIgXCIgKyAoZmZbMV0gPyBwYWRfKGZmWzFdLHJpKSArIHJbMl0gKyBcIi9cIiArIHJbM10gKyBycGFkXyhmZlsyXSxyaSk6IGZpbGwoXCIgXCIsIDIqcmkrMSArIHJbMl0ubGVuZ3RoICsgclszXS5sZW5ndGgpKTtcblx0fVxuXHRpZigociA9IGZtdC5tYXRjaCgvXlsjMD9dKyQvKSkpIHtcblx0XHRvID0gcGFkMHIodmFsLCAwKTtcblx0XHRpZihmbXQubGVuZ3RoIDw9IG8ubGVuZ3RoKSByZXR1cm4gbztcblx0XHRyZXR1cm4gaGFzaHEoZm10LnN1YnN0cigwLGZtdC5sZW5ndGgtby5sZW5ndGgpKSArIG87XG5cdH1cblx0aWYoKHIgPSBmbXQubWF0Y2goL14oWyMwP10rKVxcLihbIzBdKykkLykpKSB7XG5cdFx0byA9IFwiXCIgKyB2YWwudG9GaXhlZChNYXRoLm1pbihyWzJdLmxlbmd0aCwxMCkpLnJlcGxhY2UoLyhbXjBdKTArJC8sXCIkMVwiKTtcblx0XHRyaSA9IG8uaW5kZXhPZihcIi5cIik7XG5cdFx0dmFyIGxyZXMgPSBmbXQuaW5kZXhPZihcIi5cIikgLSByaSwgcnJlcyA9IGZtdC5sZW5ndGggLSBvLmxlbmd0aCAtIGxyZXM7XG5cdFx0cmV0dXJuIGhhc2hxKGZtdC5zdWJzdHIoMCxscmVzKSArIG8gKyBmbXQuc3Vic3RyKGZtdC5sZW5ndGgtcnJlcykpO1xuXHR9XG5cdGlmKChyID0gZm10Lm1hdGNoKC9eMDAsMDAwXFwuKFsjMF0qMCkkLykpKSB7XG5cdFx0cmkgPSBkZWModmFsLCByWzFdLmxlbmd0aCk7XG5cdFx0cmV0dXJuIHZhbCA8IDAgPyBcIi1cIiArIHdyaXRlX251bV9mbHQodHlwZSwgZm10LCAtdmFsKSA6IGNvbW1haWZ5KGZscih2YWwpKS5yZXBsYWNlKC9eXFxkLFxcZHszfSQvLFwiMCQmXCIpLnJlcGxhY2UoL15cXGQqJC8sZnVuY3Rpb24oJCQpIHsgcmV0dXJuIFwiMDAsXCIgKyAoJCQubGVuZ3RoIDwgMyA/IHBhZDAoMCwzLSQkLmxlbmd0aCkgOiBcIlwiKSArICQkOyB9KSArIFwiLlwiICsgcGFkMChyaSxyWzFdLmxlbmd0aCk7XG5cdH1cblx0c3dpdGNoKGZtdCkge1xuXHRcdGNhc2UgXCIjIyMsIyMwLjAwXCI6IHJldHVybiB3cml0ZV9udW1fZmx0KHR5cGUsIFwiIywjIzAuMDBcIiwgdmFsKTtcblx0XHRjYXNlIFwiIyMjLCMjI1wiOlxuXHRcdGNhc2UgXCIjIywjIyNcIjpcblx0XHRjYXNlIFwiIywjIyNcIjogdmFyIHggPSBjb21tYWlmeShwYWQwcihhdmFsLDApKTsgcmV0dXJuIHggIT09IFwiMFwiID8gc2lnbiArIHggOiBcIlwiO1xuXHRcdGNhc2UgXCIjIyMsIyMjLjAwXCI6IHJldHVybiB3cml0ZV9udW1fZmx0KHR5cGUsIFwiIyMjLCMjMC4wMFwiLHZhbCkucmVwbGFjZSgvXjBcXC4vLFwiLlwiKTtcblx0XHRjYXNlIFwiIywjIyMuMDBcIjogcmV0dXJuIHdyaXRlX251bV9mbHQodHlwZSwgXCIjLCMjMC4wMFwiLHZhbCkucmVwbGFjZSgvXjBcXC4vLFwiLlwiKTtcblx0XHRkZWZhdWx0OlxuXHR9XG5cdHRocm93IG5ldyBFcnJvcihcInVuc3VwcG9ydGVkIGZvcm1hdCB8XCIgKyBmbXQgKyBcInxcIik7XG59XG5mdW5jdGlvbiB3cml0ZV9udW1fY20yKHR5cGUvKjpzdHJpbmcqLywgZm10Lyo6c3RyaW5nKi8sIHZhbC8qOm51bWJlciovKS8qOnN0cmluZyove1xuXHR2YXIgaWR4ID0gZm10Lmxlbmd0aCAtIDE7XG5cdHdoaWxlKGZtdC5jaGFyQ29kZUF0KGlkeC0xKSA9PT0gNDQpIC0taWR4O1xuXHRyZXR1cm4gd3JpdGVfbnVtKHR5cGUsIGZtdC5zdWJzdHIoMCxpZHgpLCB2YWwgLyBNYXRoLnBvdygxMCwzKihmbXQubGVuZ3RoLWlkeCkpKTtcbn1cbmZ1bmN0aW9uIHdyaXRlX251bV9wY3QyKHR5cGUvKjpzdHJpbmcqLywgZm10Lyo6c3RyaW5nKi8sIHZhbC8qOm51bWJlciovKS8qOnN0cmluZyove1xuXHR2YXIgc2ZtdCA9IGZtdC5yZXBsYWNlKHBjdDEsXCJcIiksIG11bCA9IGZtdC5sZW5ndGggLSBzZm10Lmxlbmd0aDtcblx0cmV0dXJuIHdyaXRlX251bSh0eXBlLCBzZm10LCB2YWwgKiBNYXRoLnBvdygxMCwyKm11bCkpICsgZmlsbChcIiVcIixtdWwpO1xufVxuZnVuY3Rpb24gd3JpdGVfbnVtX2V4cDIoZm10Lyo6c3RyaW5nKi8sIHZhbC8qOm51bWJlciovKS8qOnN0cmluZyove1xuXHR2YXIgby8qOnN0cmluZyovO1xuXHR2YXIgaWR4ID0gZm10LmluZGV4T2YoXCJFXCIpIC0gZm10LmluZGV4T2YoXCIuXCIpIC0gMTtcblx0aWYoZm10Lm1hdGNoKC9eIyswLjBFXFwrMCQvKSkge1xuXHRcdGlmKHZhbCA9PSAwKSByZXR1cm4gXCIwLjBFKzBcIjtcblx0XHRlbHNlIGlmKHZhbCA8IDApIHJldHVybiBcIi1cIiArIHdyaXRlX251bV9leHAyKGZtdCwgLXZhbCk7XG5cdFx0dmFyIHBlcmlvZCA9IGZtdC5pbmRleE9mKFwiLlwiKTsgaWYocGVyaW9kID09PSAtMSkgcGVyaW9kPWZtdC5pbmRleE9mKCdFJyk7XG5cdFx0dmFyIGVlID0gTWF0aC5mbG9vcihNYXRoLmxvZyh2YWwpKk1hdGguTE9HMTBFKSVwZXJpb2Q7XG5cdFx0aWYoZWUgPCAwKSBlZSArPSBwZXJpb2Q7XG5cdFx0byA9ICh2YWwvTWF0aC5wb3coMTAsZWUpKS50b1ByZWNpc2lvbihpZHgrMSsocGVyaW9kK2VlKSVwZXJpb2QpO1xuXHRcdGlmKCFvLm1hdGNoKC9bRWVdLykpIHtcblx0XHRcdHZhciBmYWtlZSA9IE1hdGguZmxvb3IoTWF0aC5sb2codmFsKSpNYXRoLkxPRzEwRSk7XG5cdFx0XHRpZihvLmluZGV4T2YoXCIuXCIpID09PSAtMSkgbyA9IG8uY2hhckF0KDApICsgXCIuXCIgKyBvLnN1YnN0cigxKSArIFwiRStcIiArIChmYWtlZSAtIG8ubGVuZ3RoK2VlKTtcblx0XHRcdGVsc2UgbyArPSBcIkUrXCIgKyAoZmFrZWUgLSBlZSk7XG5cdFx0XHRvID0gby5yZXBsYWNlKC9cXCstLyxcIi1cIik7XG5cdFx0fVxuXHRcdG8gPSBvLnJlcGxhY2UoL14oWystXT8pKFxcZCopXFwuKFxcZCopW0VlXS8sZnVuY3Rpb24oJCQsJDEsJDIsJDMpIHsgcmV0dXJuICQxICsgJDIgKyAkMy5zdWJzdHIoMCwocGVyaW9kK2VlKSVwZXJpb2QpICsgXCIuXCIgKyAkMy5zdWJzdHIoZWUpICsgXCJFXCI7IH0pO1xuXHR9IGVsc2UgbyA9IHZhbC50b0V4cG9uZW50aWFsKGlkeCk7XG5cdGlmKGZtdC5tYXRjaCgvRVxcKzAwJC8pICYmIG8ubWF0Y2goL2VbKy1dXFxkJC8pKSBvID0gby5zdWJzdHIoMCxvLmxlbmd0aC0xKSArIFwiMFwiICsgby5jaGFyQXQoby5sZW5ndGgtMSk7XG5cdGlmKGZtdC5tYXRjaCgvRVxcLS8pICYmIG8ubWF0Y2goL2VcXCsvKSkgbyA9IG8ucmVwbGFjZSgvZVxcKy8sXCJlXCIpO1xuXHRyZXR1cm4gby5yZXBsYWNlKFwiZVwiLFwiRVwiKTtcbn1cbmZ1bmN0aW9uIHdyaXRlX251bV9pbnQodHlwZS8qOnN0cmluZyovLCBmbXQvKjpzdHJpbmcqLywgdmFsLyo6bnVtYmVyKi8pLyo6c3RyaW5nKi8ge1xuXHRpZih0eXBlLmNoYXJDb2RlQXQoMCkgPT09IDQwICYmICFmbXQubWF0Y2goY2xvc2VwYXJlbikpIHtcblx0XHR2YXIgZmZtdCA9IGZtdC5yZXBsYWNlKC9cXCggKi8sXCJcIikucmVwbGFjZSgvIFxcKS8sXCJcIikucmVwbGFjZSgvXFwpLyxcIlwiKTtcblx0XHRpZih2YWwgPj0gMCkgcmV0dXJuIHdyaXRlX251bV9pbnQoJ24nLCBmZm10LCB2YWwpO1xuXHRcdHJldHVybiAnKCcgKyB3cml0ZV9udW1faW50KCduJywgZmZtdCwgLXZhbCkgKyAnKSc7XG5cdH1cblx0aWYoZm10LmNoYXJDb2RlQXQoZm10Lmxlbmd0aCAtIDEpID09PSA0NCkgcmV0dXJuIHdyaXRlX251bV9jbTIodHlwZSwgZm10LCB2YWwpO1xuXHRpZihmbXQuaW5kZXhPZignJScpICE9PSAtMSkgcmV0dXJuIHdyaXRlX251bV9wY3QyKHR5cGUsIGZtdCwgdmFsKTtcblx0aWYoZm10LmluZGV4T2YoJ0UnKSAhPT0gLTEpIHJldHVybiB3cml0ZV9udW1fZXhwMihmbXQsIHZhbCk7XG5cdGlmKGZtdC5jaGFyQ29kZUF0KDApID09PSAzNikgcmV0dXJuIFwiJFwiK3dyaXRlX251bV9pbnQodHlwZSxmbXQuc3Vic3RyKGZtdC5jaGFyQXQoMSk9PScgJz8yOjEpLHZhbCk7XG5cdHZhciBvO1xuXHR2YXIgci8qOj9BcnJheTxzdHJpbmc+Ki8sIHJpLCBmZiwgYXZhbCA9IE1hdGguYWJzKHZhbCksIHNpZ24gPSB2YWwgPCAwID8gXCItXCIgOiBcIlwiO1xuXHRpZihmbXQubWF0Y2goL14wMCskLykpIHJldHVybiBzaWduICsgcGFkMChhdmFsLGZtdC5sZW5ndGgpO1xuXHRpZihmbXQubWF0Y2goL15bIz9dKyQvKSkge1xuXHRcdG8gPSAoXCJcIit2YWwpOyBpZih2YWwgPT09IDApIG8gPSBcIlwiO1xuXHRcdHJldHVybiBvLmxlbmd0aCA+IGZtdC5sZW5ndGggPyBvIDogaGFzaHEoZm10LnN1YnN0cigwLGZtdC5sZW5ndGgtby5sZW5ndGgpKSArIG87XG5cdH1cblx0aWYoKHIgPSBmbXQubWF0Y2goZnJhYzEpKSkgcmV0dXJuIHdyaXRlX251bV9mMihyLCBhdmFsLCBzaWduKTtcblx0aWYoZm10Lm1hdGNoKC9eIyswKyQvKSkgcmV0dXJuIHNpZ24gKyBwYWQwKGF2YWwsZm10Lmxlbmd0aCAtIGZtdC5pbmRleE9mKFwiMFwiKSk7XG5cdGlmKChyID0gZm10Lm1hdGNoKGRlYzEpKSkge1xuXHRcdC8qOjogaWYoIUFycmF5LmlzQXJyYXkocikpIHRocm93IG5ldyBFcnJvcihcInVucmVhY2hhYmxlXCIpOyAqL1xuXHRcdG8gPSAoXCJcIit2YWwpLnJlcGxhY2UoL14oW15cXC5dKykkLyxcIiQxLlwiK2hhc2hxKHJbMV0pKS5yZXBsYWNlKC9cXC4kLyxcIi5cIitoYXNocShyWzFdKSk7XG5cdFx0byA9IG8ucmVwbGFjZSgvXFwuKFxcZCopJC8sZnVuY3Rpb24oJCQsICQxKSB7XG5cdFx0Lyo6OiBpZighQXJyYXkuaXNBcnJheShyKSkgdGhyb3cgbmV3IEVycm9yKFwidW5yZWFjaGFibGVcIik7ICovXG5cdFx0XHRyZXR1cm4gXCIuXCIgKyAkMSArIGZpbGwoXCIwXCIsIGhhc2hxKHJbMV0pLmxlbmd0aC0kMS5sZW5ndGgpOyB9KTtcblx0XHRyZXR1cm4gZm10LmluZGV4T2YoXCIwLlwiKSAhPT0gLTEgPyBvIDogby5yZXBsYWNlKC9eMFxcLi8sXCIuXCIpO1xuXHR9XG5cdGZtdCA9IGZtdC5yZXBsYWNlKC9eIysoWzAuXSkvLCBcIiQxXCIpO1xuXHRpZigociA9IGZtdC5tYXRjaCgvXigwKilcXC4oIyopJC8pKSkge1xuXHRcdHJldHVybiBzaWduICsgKFwiXCIrYXZhbCkucmVwbGFjZSgvXFwuKFxcZCpbMS05XSkwKiQvLFwiLiQxXCIpLnJlcGxhY2UoL14oLT9cXGQqKSQvLFwiJDEuXCIpLnJlcGxhY2UoL14wXFwuLyxyWzFdLmxlbmd0aD9cIjAuXCI6XCIuXCIpO1xuXHR9XG5cdGlmKChyID0gZm10Lm1hdGNoKC9eI3sxLDN9LCMjMChcXC4/KSQvKSkpIHJldHVybiBzaWduICsgY29tbWFpZnkoKFwiXCIrYXZhbCkpO1xuXHRpZigociA9IGZtdC5tYXRjaCgvXiMsIyMwXFwuKFsjMF0qMCkkLykpKSB7XG5cdFx0cmV0dXJuIHZhbCA8IDAgPyBcIi1cIiArIHdyaXRlX251bV9pbnQodHlwZSwgZm10LCAtdmFsKSA6IGNvbW1haWZ5KChcIlwiK3ZhbCkpICsgXCIuXCIgKyBmaWxsKCcwJyxyWzFdLmxlbmd0aCk7XG5cdH1cblx0aWYoKHIgPSBmbXQubWF0Y2goL14jLCMqLCMwLykpKSByZXR1cm4gd3JpdGVfbnVtX2ludCh0eXBlLGZtdC5yZXBsYWNlKC9eIywjKiwvLFwiXCIpLHZhbCk7XG5cdGlmKChyID0gZm10Lm1hdGNoKC9eKFswI10rKShcXFxcPy0oWzAjXSspKSskLykpKSB7XG5cdFx0byA9IF9zdHJyZXYod3JpdGVfbnVtX2ludCh0eXBlLCBmbXQucmVwbGFjZSgvW1xcXFwtXS9nLFwiXCIpLCB2YWwpKTtcblx0XHRyaSA9IDA7XG5cdFx0cmV0dXJuIF9zdHJyZXYoX3N0cnJldihmbXQucmVwbGFjZSgvXFxcXC9nLFwiXCIpKS5yZXBsYWNlKC9bMCNdL2csZnVuY3Rpb24oeCl7cmV0dXJuIHJpPG8ubGVuZ3RoP28uY2hhckF0KHJpKyspOng9PT0nMCc/JzAnOlwiXCI7fSkpO1xuXHR9XG5cdGlmKGZtdC5tYXRjaChwaG9uZSkpIHtcblx0XHRvID0gd3JpdGVfbnVtX2ludCh0eXBlLCBcIiMjIyMjIyMjIyNcIiwgdmFsKTtcblx0XHRyZXR1cm4gXCIoXCIgKyBvLnN1YnN0cigwLDMpICsgXCIpIFwiICsgby5zdWJzdHIoMywgMykgKyBcIi1cIiArIG8uc3Vic3RyKDYpO1xuXHR9XG5cdHZhciBvYSA9IFwiXCI7XG5cdGlmKChyID0gZm10Lm1hdGNoKC9eKFsjMD9dKykoID8pXFwvKCA/KShbIzA/XSspLykpKSB7XG5cdFx0cmkgPSBNYXRoLm1pbigvKjo6U3RyaW5nKCovcls0XS8qOjopKi8ubGVuZ3RoLDcpO1xuXHRcdGZmID0gU1NGX2ZyYWMoYXZhbCwgTWF0aC5wb3coMTAscmkpLTEsIGZhbHNlKTtcblx0XHRvID0gXCJcIiArIHNpZ247XG5cdFx0b2EgPSB3cml0ZV9udW0oXCJuXCIsIC8qOjpTdHJpbmcoKi9yWzFdLyo6OikqLywgZmZbMV0pO1xuXHRcdGlmKG9hLmNoYXJBdChvYS5sZW5ndGgtMSkgPT0gXCIgXCIpIG9hID0gb2Euc3Vic3RyKDAsb2EubGVuZ3RoLTEpICsgXCIwXCI7XG5cdFx0byArPSBvYSArIC8qOjpTdHJpbmcoKi9yWzJdLyo6OikqLyArIFwiL1wiICsgLyo6OlN0cmluZygqL3JbM10vKjo6KSovO1xuXHRcdG9hID0gcnBhZF8oZmZbMl0scmkpO1xuXHRcdGlmKG9hLmxlbmd0aCA8IHJbNF0ubGVuZ3RoKSBvYSA9IGhhc2hxKHJbNF0uc3Vic3RyKHJbNF0ubGVuZ3RoLW9hLmxlbmd0aCkpICsgb2E7XG5cdFx0byArPSBvYTtcblx0XHRyZXR1cm4gbztcblx0fVxuXHRpZigociA9IGZtdC5tYXRjaCgvXiMgKFsjMD9dKykoID8pXFwvKCA/KShbIzA/XSspLykpKSB7XG5cdFx0cmkgPSBNYXRoLm1pbihNYXRoLm1heChyWzFdLmxlbmd0aCwgcls0XS5sZW5ndGgpLDcpO1xuXHRcdGZmID0gU1NGX2ZyYWMoYXZhbCwgTWF0aC5wb3coMTAscmkpLTEsIHRydWUpO1xuXHRcdHJldHVybiBzaWduICsgKGZmWzBdfHwoZmZbMV0gPyBcIlwiIDogXCIwXCIpKSArIFwiIFwiICsgKGZmWzFdID8gcGFkXyhmZlsxXSxyaSkgKyByWzJdICsgXCIvXCIgKyByWzNdICsgcnBhZF8oZmZbMl0scmkpOiBmaWxsKFwiIFwiLCAyKnJpKzEgKyByWzJdLmxlbmd0aCArIHJbM10ubGVuZ3RoKSk7XG5cdH1cblx0aWYoKHIgPSBmbXQubWF0Y2goL15bIzA/XSskLykpKSB7XG5cdFx0byA9IFwiXCIgKyB2YWw7XG5cdFx0aWYoZm10Lmxlbmd0aCA8PSBvLmxlbmd0aCkgcmV0dXJuIG87XG5cdFx0cmV0dXJuIGhhc2hxKGZtdC5zdWJzdHIoMCxmbXQubGVuZ3RoLW8ubGVuZ3RoKSkgKyBvO1xuXHR9XG5cdGlmKChyID0gZm10Lm1hdGNoKC9eKFsjMF0rKVxcLihbIzBdKykkLykpKSB7XG5cdFx0byA9IFwiXCIgKyB2YWwudG9GaXhlZChNYXRoLm1pbihyWzJdLmxlbmd0aCwxMCkpLnJlcGxhY2UoLyhbXjBdKTArJC8sXCIkMVwiKTtcblx0XHRyaSA9IG8uaW5kZXhPZihcIi5cIik7XG5cdFx0dmFyIGxyZXMgPSBmbXQuaW5kZXhPZihcIi5cIikgLSByaSwgcnJlcyA9IGZtdC5sZW5ndGggLSBvLmxlbmd0aCAtIGxyZXM7XG5cdFx0cmV0dXJuIGhhc2hxKGZtdC5zdWJzdHIoMCxscmVzKSArIG8gKyBmbXQuc3Vic3RyKGZtdC5sZW5ndGgtcnJlcykpO1xuXHR9XG5cdGlmKChyID0gZm10Lm1hdGNoKC9eMDAsMDAwXFwuKFsjMF0qMCkkLykpKSB7XG5cdFx0cmV0dXJuIHZhbCA8IDAgPyBcIi1cIiArIHdyaXRlX251bV9pbnQodHlwZSwgZm10LCAtdmFsKSA6IGNvbW1haWZ5KFwiXCIrdmFsKS5yZXBsYWNlKC9eXFxkLFxcZHszfSQvLFwiMCQmXCIpLnJlcGxhY2UoL15cXGQqJC8sZnVuY3Rpb24oJCQpIHsgcmV0dXJuIFwiMDAsXCIgKyAoJCQubGVuZ3RoIDwgMyA/IHBhZDAoMCwzLSQkLmxlbmd0aCkgOiBcIlwiKSArICQkOyB9KSArIFwiLlwiICsgcGFkMCgwLHJbMV0ubGVuZ3RoKTtcblx0fVxuXHRzd2l0Y2goZm10KSB7XG5cdFx0Y2FzZSBcIiMjIywjIyNcIjpcblx0XHRjYXNlIFwiIyMsIyMjXCI6XG5cdFx0Y2FzZSBcIiMsIyMjXCI6IHZhciB4ID0gY29tbWFpZnkoXCJcIithdmFsKTsgcmV0dXJuIHggIT09IFwiMFwiID8gc2lnbiArIHggOiBcIlwiO1xuXHRcdGRlZmF1bHQ6XG5cdFx0XHRpZihmbXQubWF0Y2goL1xcLlswIz9dKiQvKSkgcmV0dXJuIHdyaXRlX251bV9pbnQodHlwZSwgZm10LnNsaWNlKDAsZm10Lmxhc3RJbmRleE9mKFwiLlwiKSksIHZhbCkgKyBoYXNocShmbXQuc2xpY2UoZm10Lmxhc3RJbmRleE9mKFwiLlwiKSkpO1xuXHR9XG5cdHRocm93IG5ldyBFcnJvcihcInVuc3VwcG9ydGVkIGZvcm1hdCB8XCIgKyBmbXQgKyBcInxcIik7XG59XG5mdW5jdGlvbiB3cml0ZV9udW0odHlwZS8qOnN0cmluZyovLCBmbXQvKjpzdHJpbmcqLywgdmFsLyo6bnVtYmVyKi8pLyo6c3RyaW5nKi8ge1xuXHRyZXR1cm4gKHZhbHwwKSA9PT0gdmFsID8gd3JpdGVfbnVtX2ludCh0eXBlLCBmbXQsIHZhbCkgOiB3cml0ZV9udW1fZmx0KHR5cGUsIGZtdCwgdmFsKTtcbn1cbmZ1bmN0aW9uIFNTRl9zcGxpdF9mbXQoZm10Lyo6c3RyaW5nKi8pLyo6QXJyYXk8c3RyaW5nPiovIHtcblx0dmFyIG91dC8qOkFycmF5PHN0cmluZz4qLyA9IFtdO1xuXHR2YXIgaW5fc3RyID0gZmFsc2UvKiwgY2MqLztcblx0Zm9yKHZhciBpID0gMCwgaiA9IDA7IGkgPCBmbXQubGVuZ3RoOyArK2kpIHN3aXRjaCgoLypjYz0qL2ZtdC5jaGFyQ29kZUF0KGkpKSkge1xuXHRcdGNhc2UgMzQ6IC8qICdcIicgKi9cblx0XHRcdGluX3N0ciA9ICFpbl9zdHI7IGJyZWFrO1xuXHRcdGNhc2UgOTU6IGNhc2UgNDI6IGNhc2UgOTI6IC8qICdfJyAnKicgJ1xcXFwnICovXG5cdFx0XHQrK2k7IGJyZWFrO1xuXHRcdGNhc2UgNTk6IC8qICc7JyAqL1xuXHRcdFx0b3V0W291dC5sZW5ndGhdID0gZm10LnN1YnN0cihqLGktaik7XG5cdFx0XHRqID0gaSsxO1xuXHR9XG5cdG91dFtvdXQubGVuZ3RoXSA9IGZtdC5zdWJzdHIoaik7XG5cdGlmKGluX3N0ciA9PT0gdHJ1ZSkgdGhyb3cgbmV3IEVycm9yKFwiRm9ybWF0IHxcIiArIGZtdCArIFwifCB1bnRlcm1pbmF0ZWQgc3RyaW5nIFwiKTtcblx0cmV0dXJuIG91dDtcbn1cblxudmFyIFNTRl9hYnN0aW1lID0gL1xcW1tIaE1tU3NcXHUwRTBBXFx1MEUxOVxcdTBFMTddKlxcXS87XG5mdW5jdGlvbiBmbXRfaXNfZGF0ZShmbXQvKjpzdHJpbmcqLykvKjpib29sZWFuKi8ge1xuXHR2YXIgaSA9IDAsIC8qY2MgPSAwLCovIGMgPSBcIlwiLCBvID0gXCJcIjtcblx0d2hpbGUoaSA8IGZtdC5sZW5ndGgpIHtcblx0XHRzd2l0Y2goKGMgPSBmbXQuY2hhckF0KGkpKSkge1xuXHRcdFx0Y2FzZSAnRyc6IGlmKFNTRl9pc2dlbmVyYWwoZm10LCBpKSkgaSs9IDY7IGkrKzsgYnJlYWs7XG5cdFx0XHRjYXNlICdcIic6IGZvcig7KC8qY2M9Ki9mbXQuY2hhckNvZGVBdCgrK2kpKSAhPT0gMzQgJiYgaSA8IGZtdC5sZW5ndGg7KXsvKmVtcHR5Ki99ICsraTsgYnJlYWs7XG5cdFx0XHRjYXNlICdcXFxcJzogaSs9MjsgYnJlYWs7XG5cdFx0XHRjYXNlICdfJzogaSs9MjsgYnJlYWs7XG5cdFx0XHRjYXNlICdAJzogKytpOyBicmVhaztcblx0XHRcdGNhc2UgJ0InOiBjYXNlICdiJzpcblx0XHRcdFx0aWYoZm10LmNoYXJBdChpKzEpID09PSBcIjFcIiB8fCBmbXQuY2hhckF0KGkrMSkgPT09IFwiMlwiKSByZXR1cm4gdHJ1ZTtcblx0XHRcdFx0LyogZmFsbHMgdGhyb3VnaCAqL1xuXHRcdFx0Y2FzZSAnTSc6IGNhc2UgJ0QnOiBjYXNlICdZJzogY2FzZSAnSCc6IGNhc2UgJ1MnOiBjYXNlICdFJzpcblx0XHRcdFx0LyogZmFsbHMgdGhyb3VnaCAqL1xuXHRcdFx0Y2FzZSAnbSc6IGNhc2UgJ2QnOiBjYXNlICd5JzogY2FzZSAnaCc6IGNhc2UgJ3MnOiBjYXNlICdlJzogY2FzZSAnZyc6IHJldHVybiB0cnVlO1xuXHRcdFx0Y2FzZSAnQSc6IGNhc2UgJ2EnOiBjYXNlICfkuIonOlxuXHRcdFx0XHRpZihmbXQuc3Vic3RyKGksIDMpLnRvVXBwZXJDYXNlKCkgPT09IFwiQS9QXCIpIHJldHVybiB0cnVlO1xuXHRcdFx0XHRpZihmbXQuc3Vic3RyKGksIDUpLnRvVXBwZXJDYXNlKCkgPT09IFwiQU0vUE1cIikgcmV0dXJuIHRydWU7XG5cdFx0XHRcdGlmKGZtdC5zdWJzdHIoaSwgNSkudG9VcHBlckNhc2UoKSA9PT0gXCLkuIrljYgv5LiL5Y2IXCIpIHJldHVybiB0cnVlO1xuXHRcdFx0XHQrK2k7IGJyZWFrO1xuXHRcdFx0Y2FzZSAnWyc6XG5cdFx0XHRcdG8gPSBjO1xuXHRcdFx0XHR3aGlsZShmbXQuY2hhckF0KGkrKykgIT09ICddJyAmJiBpIDwgZm10Lmxlbmd0aCkgbyArPSBmbXQuY2hhckF0KGkpO1xuXHRcdFx0XHRpZihvLm1hdGNoKFNTRl9hYnN0aW1lKSkgcmV0dXJuIHRydWU7XG5cdFx0XHRcdGJyZWFrO1xuXHRcdFx0Y2FzZSAnLic6XG5cdFx0XHRcdC8qIGZhbGxzIHRocm91Z2ggKi9cblx0XHRcdGNhc2UgJzAnOiBjYXNlICcjJzpcblx0XHRcdFx0d2hpbGUoaSA8IGZtdC5sZW5ndGggJiYgKFwiMCM/LixFKy0lXCIuaW5kZXhPZihjPWZtdC5jaGFyQXQoKytpKSkgPiAtMSB8fCAoYz09J1xcXFwnICYmIGZtdC5jaGFyQXQoaSsxKSA9PSBcIi1cIiAmJiBcIjAjXCIuaW5kZXhPZihmbXQuY2hhckF0KGkrMikpPi0xKSkpey8qIGVtcHR5ICovfVxuXHRcdFx0XHRicmVhaztcblx0XHRcdGNhc2UgJz8nOiB3aGlsZShmbXQuY2hhckF0KCsraSkgPT09IGMpey8qIGVtcHR5ICovfSBicmVhaztcblx0XHRcdGNhc2UgJyonOiArK2k7IGlmKGZtdC5jaGFyQXQoaSkgPT0gJyAnIHx8IGZtdC5jaGFyQXQoaSkgPT0gJyonKSArK2k7IGJyZWFrO1xuXHRcdFx0Y2FzZSAnKCc6IGNhc2UgJyknOiArK2k7IGJyZWFrO1xuXHRcdFx0Y2FzZSAnMSc6IGNhc2UgJzInOiBjYXNlICczJzogY2FzZSAnNCc6IGNhc2UgJzUnOiBjYXNlICc2JzogY2FzZSAnNyc6IGNhc2UgJzgnOiBjYXNlICc5Jzpcblx0XHRcdFx0d2hpbGUoaSA8IGZtdC5sZW5ndGggJiYgXCIwMTIzNDU2Nzg5XCIuaW5kZXhPZihmbXQuY2hhckF0KCsraSkpID4gLTEpey8qIGVtcHR5ICovfSBicmVhaztcblx0XHRcdGNhc2UgJyAnOiArK2k7IGJyZWFrO1xuXHRcdFx0ZGVmYXVsdDogKytpOyBicmVhaztcblx0XHR9XG5cdH1cblx0cmV0dXJuIGZhbHNlO1xufVxuXG5mdW5jdGlvbiBldmFsX2ZtdChmbXQvKjpzdHJpbmcqLywgdi8qOmFueSovLCBvcHRzLyo6YW55Ki8sIGZsZW4vKjpudW1iZXIqLykge1xuXHR2YXIgb3V0ID0gW10sIG8gPSBcIlwiLCBpID0gMCwgYyA9IFwiXCIsIGxzdD0ndCcsIGR0LCBqLCBjYztcblx0dmFyIGhyPSdIJztcblx0LyogVG9rZW5pemUgKi9cblx0d2hpbGUoaSA8IGZtdC5sZW5ndGgpIHtcblx0XHRzd2l0Y2goKGMgPSBmbXQuY2hhckF0KGkpKSkge1xuXHRcdFx0Y2FzZSAnRyc6IC8qIEdlbmVyYWwgKi9cblx0XHRcdFx0aWYoIVNTRl9pc2dlbmVyYWwoZm10LCBpKSkgdGhyb3cgbmV3IEVycm9yKCd1bnJlY29nbml6ZWQgY2hhcmFjdGVyICcgKyBjICsgJyBpbiAnICtmbXQpO1xuXHRcdFx0XHRvdXRbb3V0Lmxlbmd0aF0gPSB7dDonRycsIHY6J0dlbmVyYWwnfTsgaSs9NzsgYnJlYWs7XG5cdFx0XHRjYXNlICdcIic6IC8qIExpdGVyYWwgdGV4dCAqL1xuXHRcdFx0XHRmb3Iobz1cIlwiOyhjYz1mbXQuY2hhckNvZGVBdCgrK2kpKSAhPT0gMzQgJiYgaSA8IGZtdC5sZW5ndGg7KSBvICs9IFN0cmluZy5mcm9tQ2hhckNvZGUoY2MpO1xuXHRcdFx0XHRvdXRbb3V0Lmxlbmd0aF0gPSB7dDondCcsIHY6b307ICsraTsgYnJlYWs7XG5cdFx0XHRjYXNlICdcXFxcJzogdmFyIHcgPSBmbXQuY2hhckF0KCsraSksIHQgPSAodyA9PT0gXCIoXCIgfHwgdyA9PT0gXCIpXCIpID8gdyA6ICd0Jztcblx0XHRcdFx0b3V0W291dC5sZW5ndGhdID0ge3Q6dCwgdjp3fTsgKytpOyBicmVhaztcblx0XHRcdGNhc2UgJ18nOiBvdXRbb3V0Lmxlbmd0aF0gPSB7dDondCcsIHY6XCIgXCJ9OyBpKz0yOyBicmVhaztcblx0XHRcdGNhc2UgJ0AnOiAvKiBUZXh0IFBsYWNlaG9sZGVyICovXG5cdFx0XHRcdG91dFtvdXQubGVuZ3RoXSA9IHt0OidUJywgdjp2fTsgKytpOyBicmVhaztcblx0XHRcdGNhc2UgJ0InOiBjYXNlICdiJzpcblx0XHRcdFx0aWYoZm10LmNoYXJBdChpKzEpID09PSBcIjFcIiB8fCBmbXQuY2hhckF0KGkrMSkgPT09IFwiMlwiKSB7XG5cdFx0XHRcdFx0aWYoZHQ9PW51bGwpIHsgZHQ9U1NGX3BhcnNlX2RhdGVfY29kZSh2LCBvcHRzLCBmbXQuY2hhckF0KGkrMSkgPT09IFwiMlwiKTsgaWYoZHQ9PW51bGwpIHJldHVybiBcIlwiOyB9XG5cdFx0XHRcdFx0b3V0W291dC5sZW5ndGhdID0ge3Q6J1gnLCB2OmZtdC5zdWJzdHIoaSwyKX07IGxzdCA9IGM7IGkrPTI7IGJyZWFrO1xuXHRcdFx0XHR9XG5cdFx0XHRcdC8qIGZhbGxzIHRocm91Z2ggKi9cblx0XHRcdGNhc2UgJ00nOiBjYXNlICdEJzogY2FzZSAnWSc6IGNhc2UgJ0gnOiBjYXNlICdTJzogY2FzZSAnRSc6XG5cdFx0XHRcdGMgPSBjLnRvTG93ZXJDYXNlKCk7XG5cdFx0XHRcdC8qIGZhbGxzIHRocm91Z2ggKi9cblx0XHRcdGNhc2UgJ20nOiBjYXNlICdkJzogY2FzZSAneSc6IGNhc2UgJ2gnOiBjYXNlICdzJzogY2FzZSAnZSc6IGNhc2UgJ2cnOlxuXHRcdFx0XHRpZih2IDwgMCkgcmV0dXJuIFwiXCI7XG5cdFx0XHRcdGlmKGR0PT1udWxsKSB7IGR0PVNTRl9wYXJzZV9kYXRlX2NvZGUodiwgb3B0cyk7IGlmKGR0PT1udWxsKSByZXR1cm4gXCJcIjsgfVxuXHRcdFx0XHRvID0gYzsgd2hpbGUoKytpIDwgZm10Lmxlbmd0aCAmJiBmbXQuY2hhckF0KGkpLnRvTG93ZXJDYXNlKCkgPT09IGMpIG8rPWM7XG5cdFx0XHRcdGlmKGMgPT09ICdtJyAmJiBsc3QudG9Mb3dlckNhc2UoKSA9PT0gJ2gnKSBjID0gJ00nO1xuXHRcdFx0XHRpZihjID09PSAnaCcpIGMgPSBocjtcblx0XHRcdFx0b3V0W291dC5sZW5ndGhdID0ge3Q6YywgdjpvfTsgbHN0ID0gYzsgYnJlYWs7XG5cdFx0XHRjYXNlICdBJzogY2FzZSAnYSc6IGNhc2UgJ+S4iic6XG5cdFx0XHRcdHZhciBxPXt0OmMsIHY6Y307XG5cdFx0XHRcdGlmKGR0PT1udWxsKSBkdD1TU0ZfcGFyc2VfZGF0ZV9jb2RlKHYsIG9wdHMpO1xuXHRcdFx0XHRpZihmbXQuc3Vic3RyKGksIDMpLnRvVXBwZXJDYXNlKCkgPT09IFwiQS9QXCIpIHsgaWYoZHQhPW51bGwpIHEudiA9IGR0LkggPj0gMTIgPyBcIlBcIiA6IFwiQVwiOyBxLnQgPSAnVCc7IGhyPSdoJztpKz0zO31cblx0XHRcdFx0ZWxzZSBpZihmbXQuc3Vic3RyKGksNSkudG9VcHBlckNhc2UoKSA9PT0gXCJBTS9QTVwiKSB7IGlmKGR0IT1udWxsKSBxLnYgPSBkdC5IID49IDEyID8gXCJQTVwiIDogXCJBTVwiOyBxLnQgPSAnVCc7IGkrPTU7IGhyPSdoJzsgfVxuXHRcdFx0XHRlbHNlIGlmKGZtdC5zdWJzdHIoaSw1KS50b1VwcGVyQ2FzZSgpID09PSBcIuS4iuWNiC/kuIvljYhcIikgeyBpZihkdCE9bnVsbCkgcS52ID0gZHQuSCA+PSAxMiA/IFwi5LiL5Y2IXCIgOiBcIuS4iuWNiFwiOyBxLnQgPSAnVCc7IGkrPTU7IGhyPSdoJzsgfVxuXHRcdFx0XHRlbHNlIHsgcS50ID0gXCJ0XCI7ICsraTsgfVxuXHRcdFx0XHRpZihkdD09bnVsbCAmJiBxLnQgPT09ICdUJykgcmV0dXJuIFwiXCI7XG5cdFx0XHRcdG91dFtvdXQubGVuZ3RoXSA9IHE7IGxzdCA9IGM7IGJyZWFrO1xuXHRcdFx0Y2FzZSAnWyc6XG5cdFx0XHRcdG8gPSBjO1xuXHRcdFx0XHR3aGlsZShmbXQuY2hhckF0KGkrKykgIT09ICddJyAmJiBpIDwgZm10Lmxlbmd0aCkgbyArPSBmbXQuY2hhckF0KGkpO1xuXHRcdFx0XHRpZihvLnNsaWNlKC0xKSAhPT0gJ10nKSB0aHJvdyAndW50ZXJtaW5hdGVkIFwiW1wiIGJsb2NrOiB8JyArIG8gKyAnfCc7XG5cdFx0XHRcdGlmKG8ubWF0Y2goU1NGX2Fic3RpbWUpKSB7XG5cdFx0XHRcdFx0aWYoZHQ9PW51bGwpIHsgZHQ9U1NGX3BhcnNlX2RhdGVfY29kZSh2LCBvcHRzKTsgaWYoZHQ9PW51bGwpIHJldHVybiBcIlwiOyB9XG5cdFx0XHRcdFx0b3V0W291dC5sZW5ndGhdID0ge3Q6J1onLCB2Om8udG9Mb3dlckNhc2UoKX07XG5cdFx0XHRcdFx0bHN0ID0gby5jaGFyQXQoMSk7XG5cdFx0XHRcdH0gZWxzZSBpZihvLmluZGV4T2YoXCIkXCIpID4gLTEpIHtcblx0XHRcdFx0XHRvID0gKG8ubWF0Y2goL1xcJChbXi1cXFtcXF1dKikvKXx8W10pWzFdfHxcIiRcIjtcblx0XHRcdFx0XHRpZighZm10X2lzX2RhdGUoZm10KSkgb3V0W291dC5sZW5ndGhdID0ge3Q6J3QnLHY6b307XG5cdFx0XHRcdH1cblx0XHRcdFx0YnJlYWs7XG5cdFx0XHQvKiBOdW1iZXJzICovXG5cdFx0XHRjYXNlICcuJzpcblx0XHRcdFx0aWYoZHQgIT0gbnVsbCkge1xuXHRcdFx0XHRcdG8gPSBjOyB3aGlsZSgrK2kgPCBmbXQubGVuZ3RoICYmIChjPWZtdC5jaGFyQXQoaSkpID09PSBcIjBcIikgbyArPSBjO1xuXHRcdFx0XHRcdG91dFtvdXQubGVuZ3RoXSA9IHt0OidzJywgdjpvfTsgYnJlYWs7XG5cdFx0XHRcdH1cblx0XHRcdFx0LyogZmFsbHMgdGhyb3VnaCAqL1xuXHRcdFx0Y2FzZSAnMCc6IGNhc2UgJyMnOlxuXHRcdFx0XHRvID0gYzsgd2hpbGUoKytpIDwgZm10Lmxlbmd0aCAmJiBcIjAjPy4sRSstJVwiLmluZGV4T2YoYz1mbXQuY2hhckF0KGkpKSA+IC0xKSBvICs9IGM7XG5cdFx0XHRcdG91dFtvdXQubGVuZ3RoXSA9IHt0OiduJywgdjpvfTsgYnJlYWs7XG5cdFx0XHRjYXNlICc/Jzpcblx0XHRcdFx0byA9IGM7IHdoaWxlKGZtdC5jaGFyQXQoKytpKSA9PT0gYykgbys9Yztcblx0XHRcdFx0b3V0W291dC5sZW5ndGhdID0ge3Q6YywgdjpvfTsgbHN0ID0gYzsgYnJlYWs7XG5cdFx0XHRjYXNlICcqJzogKytpOyBpZihmbXQuY2hhckF0KGkpID09ICcgJyB8fCBmbXQuY2hhckF0KGkpID09ICcqJykgKytpOyBicmVhazsgLy8gKipcblx0XHRcdGNhc2UgJygnOiBjYXNlICcpJzogb3V0W291dC5sZW5ndGhdID0ge3Q6KGZsZW49PT0xPyd0JzpjKSwgdjpjfTsgKytpOyBicmVhaztcblx0XHRcdGNhc2UgJzEnOiBjYXNlICcyJzogY2FzZSAnMyc6IGNhc2UgJzQnOiBjYXNlICc1JzogY2FzZSAnNic6IGNhc2UgJzcnOiBjYXNlICc4JzogY2FzZSAnOSc6XG5cdFx0XHRcdG8gPSBjOyB3aGlsZShpIDwgZm10Lmxlbmd0aCAmJiBcIjAxMjM0NTY3ODlcIi5pbmRleE9mKGZtdC5jaGFyQXQoKytpKSkgPiAtMSkgbys9Zm10LmNoYXJBdChpKTtcblx0XHRcdFx0b3V0W291dC5sZW5ndGhdID0ge3Q6J0QnLCB2Om99OyBicmVhaztcblx0XHRcdGNhc2UgJyAnOiBvdXRbb3V0Lmxlbmd0aF0gPSB7dDpjLCB2OmN9OyArK2k7IGJyZWFrO1xuXHRcdFx0Y2FzZSAnJCc6IG91dFtvdXQubGVuZ3RoXSA9IHt0Oid0JywgdjonJCd9OyArK2k7IGJyZWFrO1xuXHRcdFx0ZGVmYXVsdDpcblx0XHRcdFx0aWYoXCIsJC0rLygpOiFeJid+e308Pj3igqxhY2Zpamtsb3BxcnR1dnd4elBcIi5pbmRleE9mKGMpID09PSAtMSkgdGhyb3cgbmV3IEVycm9yKCd1bnJlY29nbml6ZWQgY2hhcmFjdGVyICcgKyBjICsgJyBpbiAnICsgZm10KTtcblx0XHRcdFx0b3V0W291dC5sZW5ndGhdID0ge3Q6J3QnLCB2OmN9OyArK2k7IGJyZWFrO1xuXHRcdH1cblx0fVxuXG5cdC8qIFNjYW4gZm9yIGRhdGUvdGltZSBwYXJ0cyAqL1xuXHR2YXIgYnQgPSAwLCBzczAgPSAwLCBzc207XG5cdGZvcihpPW91dC5sZW5ndGgtMSwgbHN0PSd0JzsgaSA+PSAwOyAtLWkpIHtcblx0XHRzd2l0Y2gob3V0W2ldLnQpIHtcblx0XHRcdGNhc2UgJ2gnOiBjYXNlICdIJzogb3V0W2ldLnQgPSBocjsgbHN0PSdoJzsgaWYoYnQgPCAxKSBidCA9IDE7IGJyZWFrO1xuXHRcdFx0Y2FzZSAncyc6XG5cdFx0XHRcdGlmKChzc209b3V0W2ldLnYubWF0Y2goL1xcLjArJC8pKSkgc3MwPU1hdGgubWF4KHNzMCxzc21bMF0ubGVuZ3RoLTEpO1xuXHRcdFx0XHRpZihidCA8IDMpIGJ0ID0gMztcblx0XHRcdC8qIGZhbGxzIHRocm91Z2ggKi9cblx0XHRcdGNhc2UgJ2QnOiBjYXNlICd5JzogY2FzZSAnTSc6IGNhc2UgJ2UnOiBsc3Q9b3V0W2ldLnQ7IGJyZWFrO1xuXHRcdFx0Y2FzZSAnbSc6IGlmKGxzdCA9PT0gJ3MnKSB7IG91dFtpXS50ID0gJ00nOyBpZihidCA8IDIpIGJ0ID0gMjsgfSBicmVhaztcblx0XHRcdGNhc2UgJ1gnOiAvKmlmKG91dFtpXS52ID09PSBcIkIyXCIpOyovXG5cdFx0XHRcdGJyZWFrO1xuXHRcdFx0Y2FzZSAnWic6XG5cdFx0XHRcdGlmKGJ0IDwgMSAmJiBvdXRbaV0udi5tYXRjaCgvW0hoXS8pKSBidCA9IDE7XG5cdFx0XHRcdGlmKGJ0IDwgMiAmJiBvdXRbaV0udi5tYXRjaCgvW01tXS8pKSBidCA9IDI7XG5cdFx0XHRcdGlmKGJ0IDwgMyAmJiBvdXRbaV0udi5tYXRjaCgvW1NzXS8pKSBidCA9IDM7XG5cdFx0fVxuXHR9XG5cdC8qIHRpbWUgcm91bmRpbmcgZGVwZW5kcyBvbiBwcmVzZW5jZSBvZiBtaW51dGUgLyBzZWNvbmQgLyB1c2VjIGZpZWxkcyAqL1xuXHRzd2l0Y2goYnQpIHtcblx0XHRjYXNlIDA6IGJyZWFrO1xuXHRcdGNhc2UgMTpcblx0XHRcdC8qOjppZighZHQpIGJyZWFrOyovXG5cdFx0XHRpZihkdC51ID49IDAuNSkgeyBkdC51ID0gMDsgKytkdC5TOyB9XG5cdFx0XHRpZihkdC5TID49ICA2MCkgeyBkdC5TID0gMDsgKytkdC5NOyB9XG5cdFx0XHRpZihkdC5NID49ICA2MCkgeyBkdC5NID0gMDsgKytkdC5IOyB9XG5cdFx0XHRicmVhaztcblx0XHRjYXNlIDI6XG5cdFx0XHQvKjo6aWYoIWR0KSBicmVhazsqL1xuXHRcdFx0aWYoZHQudSA+PSAwLjUpIHsgZHQudSA9IDA7ICsrZHQuUzsgfVxuXHRcdFx0aWYoZHQuUyA+PSAgNjApIHsgZHQuUyA9IDA7ICsrZHQuTTsgfVxuXHRcdFx0YnJlYWs7XG5cdH1cblxuXHQvKiByZXBsYWNlIGZpZWxkcyAqL1xuXHR2YXIgbnN0ciA9IFwiXCIsIGpqO1xuXHRmb3IoaT0wOyBpIDwgb3V0Lmxlbmd0aDsgKytpKSB7XG5cdFx0c3dpdGNoKG91dFtpXS50KSB7XG5cdFx0XHRjYXNlICd0JzogY2FzZSAnVCc6IGNhc2UgJyAnOiBjYXNlICdEJzogYnJlYWs7XG5cdFx0XHRjYXNlICdYJzogb3V0W2ldLnYgPSBcIlwiOyBvdXRbaV0udCA9IFwiO1wiOyBicmVhaztcblx0XHRcdGNhc2UgJ2QnOiBjYXNlICdtJzogY2FzZSAneSc6IGNhc2UgJ2gnOiBjYXNlICdIJzogY2FzZSAnTSc6IGNhc2UgJ3MnOiBjYXNlICdlJzogY2FzZSAnYic6IGNhc2UgJ1onOlxuXHRcdFx0XHQvKjo6aWYoIWR0KSB0aHJvdyBcInVucmVhY2hhYmxlXCI7ICovXG5cdFx0XHRcdG91dFtpXS52ID0gU1NGX3dyaXRlX2RhdGUob3V0W2ldLnQuY2hhckNvZGVBdCgwKSwgb3V0W2ldLnYsIGR0LCBzczApO1xuXHRcdFx0XHRvdXRbaV0udCA9ICd0JzsgYnJlYWs7XG5cdFx0XHRjYXNlICduJzogY2FzZSAnPyc6XG5cdFx0XHRcdGpqID0gaSsxO1xuXHRcdFx0XHR3aGlsZShvdXRbampdICE9IG51bGwgJiYgKFxuXHRcdFx0XHRcdChjPW91dFtqal0udCkgPT09IFwiP1wiIHx8IGMgPT09IFwiRFwiIHx8XG5cdFx0XHRcdFx0KChjID09PSBcIiBcIiB8fCBjID09PSBcInRcIikgJiYgb3V0W2pqKzFdICE9IG51bGwgJiYgKG91dFtqaisxXS50ID09PSAnPycgfHwgb3V0W2pqKzFdLnQgPT09IFwidFwiICYmIG91dFtqaisxXS52ID09PSAnLycpKSB8fFxuXHRcdFx0XHRcdChvdXRbaV0udCA9PT0gJygnICYmIChjID09PSAnICcgfHwgYyA9PT0gJ24nIHx8IGMgPT09ICcpJykpIHx8XG5cdFx0XHRcdFx0KGMgPT09ICd0JyAmJiAob3V0W2pqXS52ID09PSAnLycgfHwgb3V0W2pqXS52ID09PSAnICcgJiYgb3V0W2pqKzFdICE9IG51bGwgJiYgb3V0W2pqKzFdLnQgPT0gJz8nKSlcblx0XHRcdFx0KSkge1xuXHRcdFx0XHRcdG91dFtpXS52ICs9IG91dFtqal0udjtcblx0XHRcdFx0XHRvdXRbampdID0ge3Y6XCJcIiwgdDpcIjtcIn07ICsramo7XG5cdFx0XHRcdH1cblx0XHRcdFx0bnN0ciArPSBvdXRbaV0udjtcblx0XHRcdFx0aSA9IGpqLTE7IGJyZWFrO1xuXHRcdFx0Y2FzZSAnRyc6IG91dFtpXS50ID0gJ3QnOyBvdXRbaV0udiA9IFNTRl9nZW5lcmFsKHYsb3B0cyk7IGJyZWFrO1xuXHRcdH1cblx0fVxuXHR2YXIgdnYgPSBcIlwiLCBteXYsIG9zdHI7XG5cdGlmKG5zdHIubGVuZ3RoID4gMCkge1xuXHRcdGlmKG5zdHIuY2hhckNvZGVBdCgwKSA9PSA0MCkgLyogJygnICovIHtcblx0XHRcdG15diA9ICh2PDAmJm5zdHIuY2hhckNvZGVBdCgwKSA9PT0gNDUgPyAtdiA6IHYpO1xuXHRcdFx0b3N0ciA9IHdyaXRlX251bSgnbicsIG5zdHIsIG15dik7XG5cdFx0fSBlbHNlIHtcblx0XHRcdG15diA9ICh2PDAgJiYgZmxlbiA+IDEgPyAtdiA6IHYpO1xuXHRcdFx0b3N0ciA9IHdyaXRlX251bSgnbicsIG5zdHIsIG15dik7XG5cdFx0XHRpZihteXYgPCAwICYmIG91dFswXSAmJiBvdXRbMF0udCA9PSAndCcpIHtcblx0XHRcdFx0b3N0ciA9IG9zdHIuc3Vic3RyKDEpO1xuXHRcdFx0XHRvdXRbMF0udiA9IFwiLVwiICsgb3V0WzBdLnY7XG5cdFx0XHR9XG5cdFx0fVxuXHRcdGpqPW9zdHIubGVuZ3RoLTE7XG5cdFx0dmFyIGRlY3B0ID0gb3V0Lmxlbmd0aDtcblx0XHRmb3IoaT0wOyBpIDwgb3V0Lmxlbmd0aDsgKytpKSBpZihvdXRbaV0gIT0gbnVsbCAmJiBvdXRbaV0udCAhPSAndCcgJiYgb3V0W2ldLnYuaW5kZXhPZihcIi5cIikgPiAtMSkgeyBkZWNwdCA9IGk7IGJyZWFrOyB9XG5cdFx0dmFyIGxhc3RpPW91dC5sZW5ndGg7XG5cdFx0aWYoZGVjcHQgPT09IG91dC5sZW5ndGggJiYgb3N0ci5pbmRleE9mKFwiRVwiKSA9PT0gLTEpIHtcblx0XHRcdGZvcihpPW91dC5sZW5ndGgtMTsgaT49IDA7LS1pKSB7XG5cdFx0XHRcdGlmKG91dFtpXSA9PSBudWxsIHx8ICduPycuaW5kZXhPZihvdXRbaV0udCkgPT09IC0xKSBjb250aW51ZTtcblx0XHRcdFx0aWYoamo+PW91dFtpXS52Lmxlbmd0aC0xKSB7IGpqIC09IG91dFtpXS52Lmxlbmd0aDsgb3V0W2ldLnYgPSBvc3RyLnN1YnN0cihqaisxLCBvdXRbaV0udi5sZW5ndGgpOyB9XG5cdFx0XHRcdGVsc2UgaWYoamogPCAwKSBvdXRbaV0udiA9IFwiXCI7XG5cdFx0XHRcdGVsc2UgeyBvdXRbaV0udiA9IG9zdHIuc3Vic3RyKDAsIGpqKzEpOyBqaiA9IC0xOyB9XG5cdFx0XHRcdG91dFtpXS50ID0gJ3QnO1xuXHRcdFx0XHRsYXN0aSA9IGk7XG5cdFx0XHR9XG5cdFx0XHRpZihqaj49MCAmJiBsYXN0aTxvdXQubGVuZ3RoKSBvdXRbbGFzdGldLnYgPSBvc3RyLnN1YnN0cigwLGpqKzEpICsgb3V0W2xhc3RpXS52O1xuXHRcdH1cblx0XHRlbHNlIGlmKGRlY3B0ICE9PSBvdXQubGVuZ3RoICYmIG9zdHIuaW5kZXhPZihcIkVcIikgPT09IC0xKSB7XG5cdFx0XHRqaiA9IG9zdHIuaW5kZXhPZihcIi5cIiktMTtcblx0XHRcdGZvcihpPWRlY3B0OyBpPj0gMDsgLS1pKSB7XG5cdFx0XHRcdGlmKG91dFtpXSA9PSBudWxsIHx8ICduPycuaW5kZXhPZihvdXRbaV0udCkgPT09IC0xKSBjb250aW51ZTtcblx0XHRcdFx0aj1vdXRbaV0udi5pbmRleE9mKFwiLlwiKT4tMSYmaT09PWRlY3B0P291dFtpXS52LmluZGV4T2YoXCIuXCIpLTE6b3V0W2ldLnYubGVuZ3RoLTE7XG5cdFx0XHRcdHZ2ID0gb3V0W2ldLnYuc3Vic3RyKGorMSk7XG5cdFx0XHRcdGZvcig7IGo+PTA7IC0taikge1xuXHRcdFx0XHRcdGlmKGpqPj0wICYmIChvdXRbaV0udi5jaGFyQXQoaikgPT09IFwiMFwiIHx8IG91dFtpXS52LmNoYXJBdChqKSA9PT0gXCIjXCIpKSB2diA9IG9zdHIuY2hhckF0KGpqLS0pICsgdnY7XG5cdFx0XHRcdH1cblx0XHRcdFx0b3V0W2ldLnYgPSB2djtcblx0XHRcdFx0b3V0W2ldLnQgPSAndCc7XG5cdFx0XHRcdGxhc3RpID0gaTtcblx0XHRcdH1cblx0XHRcdGlmKGpqPj0wICYmIGxhc3RpPG91dC5sZW5ndGgpIG91dFtsYXN0aV0udiA9IG9zdHIuc3Vic3RyKDAsamorMSkgKyBvdXRbbGFzdGldLnY7XG5cdFx0XHRqaiA9IG9zdHIuaW5kZXhPZihcIi5cIikrMTtcblx0XHRcdGZvcihpPWRlY3B0OyBpPG91dC5sZW5ndGg7ICsraSkge1xuXHRcdFx0XHRpZihvdXRbaV0gPT0gbnVsbCB8fCAoJ24/KCcuaW5kZXhPZihvdXRbaV0udCkgPT09IC0xICYmIGkgIT09IGRlY3B0KSkgY29udGludWU7XG5cdFx0XHRcdGo9b3V0W2ldLnYuaW5kZXhPZihcIi5cIik+LTEmJmk9PT1kZWNwdD9vdXRbaV0udi5pbmRleE9mKFwiLlwiKSsxOjA7XG5cdFx0XHRcdHZ2ID0gb3V0W2ldLnYuc3Vic3RyKDAsaik7XG5cdFx0XHRcdGZvcig7IGo8b3V0W2ldLnYubGVuZ3RoOyArK2opIHtcblx0XHRcdFx0XHRpZihqajxvc3RyLmxlbmd0aCkgdnYgKz0gb3N0ci5jaGFyQXQoamorKyk7XG5cdFx0XHRcdH1cblx0XHRcdFx0b3V0W2ldLnYgPSB2djtcblx0XHRcdFx0b3V0W2ldLnQgPSAndCc7XG5cdFx0XHRcdGxhc3RpID0gaTtcblx0XHRcdH1cblx0XHR9XG5cdH1cblx0Zm9yKGk9MDsgaTxvdXQubGVuZ3RoOyArK2kpIGlmKG91dFtpXSAhPSBudWxsICYmICduPycuaW5kZXhPZihvdXRbaV0udCk+LTEpIHtcblx0XHRteXYgPSAoZmxlbiA+MSAmJiB2IDwgMCAmJiBpPjAgJiYgb3V0W2ktMV0udiA9PT0gXCItXCIgPyAtdjp2KTtcblx0XHRvdXRbaV0udiA9IHdyaXRlX251bShvdXRbaV0udCwgb3V0W2ldLnYsIG15dik7XG5cdFx0b3V0W2ldLnQgPSAndCc7XG5cdH1cblx0dmFyIHJldHZhbCA9IFwiXCI7XG5cdGZvcihpPTA7IGkgIT09IG91dC5sZW5ndGg7ICsraSkgaWYob3V0W2ldICE9IG51bGwpIHJldHZhbCArPSBvdXRbaV0udjtcblx0cmV0dXJuIHJldHZhbDtcbn1cblxudmFyIGNmcmVnZXgyID0gL1xcWyg9fD5bPV0/fDxbPj1dPykoLT9cXGQrKD86XFwuXFxkKik/KVxcXS87XG5mdW5jdGlvbiBjaGtjb25kKHYsIHJyKSB7XG5cdGlmKHJyID09IG51bGwpIHJldHVybiBmYWxzZTtcblx0dmFyIHRocmVzaCA9IHBhcnNlRmxvYXQocnJbMl0pO1xuXHRzd2l0Y2gocnJbMV0pIHtcblx0XHRjYXNlIFwiPVwiOiAgaWYodiA9PSB0aHJlc2gpIHJldHVybiB0cnVlOyBicmVhaztcblx0XHRjYXNlIFwiPlwiOiAgaWYodiA+ICB0aHJlc2gpIHJldHVybiB0cnVlOyBicmVhaztcblx0XHRjYXNlIFwiPFwiOiAgaWYodiA8ICB0aHJlc2gpIHJldHVybiB0cnVlOyBicmVhaztcblx0XHRjYXNlIFwiPD5cIjogaWYodiAhPSB0aHJlc2gpIHJldHVybiB0cnVlOyBicmVhaztcblx0XHRjYXNlIFwiPj1cIjogaWYodiA+PSB0aHJlc2gpIHJldHVybiB0cnVlOyBicmVhaztcblx0XHRjYXNlIFwiPD1cIjogaWYodiA8PSB0aHJlc2gpIHJldHVybiB0cnVlOyBicmVhaztcblx0fVxuXHRyZXR1cm4gZmFsc2U7XG59XG5mdW5jdGlvbiBjaG9vc2VfZm10KGYvKjpzdHJpbmcqLywgdi8qOmFueSovKSB7XG5cdHZhciBmbXQgPSBTU0Zfc3BsaXRfZm10KGYpO1xuXHR2YXIgbCA9IGZtdC5sZW5ndGgsIGxhdCA9IGZtdFtsLTFdLmluZGV4T2YoXCJAXCIpO1xuXHRpZihsPDQgJiYgbGF0Pi0xKSAtLWw7XG5cdGlmKGZtdC5sZW5ndGggPiA0KSB0aHJvdyBuZXcgRXJyb3IoXCJjYW5ub3QgZmluZCByaWdodCBmb3JtYXQgZm9yIHxcIiArIGZtdC5qb2luKFwifFwiKSArIFwifFwiKTtcblx0aWYodHlwZW9mIHYgIT09IFwibnVtYmVyXCIpIHJldHVybiBbNCwgZm10Lmxlbmd0aCA9PT0gNCB8fCBsYXQ+LTE/Zm10W2ZtdC5sZW5ndGgtMV06XCJAXCJdO1xuXHRzd2l0Y2goZm10Lmxlbmd0aCkge1xuXHRcdGNhc2UgMTogZm10ID0gbGF0Pi0xID8gW1wiR2VuZXJhbFwiLCBcIkdlbmVyYWxcIiwgXCJHZW5lcmFsXCIsIGZtdFswXV0gOiBbZm10WzBdLCBmbXRbMF0sIGZtdFswXSwgXCJAXCJdOyBicmVhaztcblx0XHRjYXNlIDI6IGZtdCA9IGxhdD4tMSA/IFtmbXRbMF0sIGZtdFswXSwgZm10WzBdLCBmbXRbMV1dIDogW2ZtdFswXSwgZm10WzFdLCBmbXRbMF0sIFwiQFwiXTsgYnJlYWs7XG5cdFx0Y2FzZSAzOiBmbXQgPSBsYXQ+LTEgPyBbZm10WzBdLCBmbXRbMV0sIGZtdFswXSwgZm10WzJdXSA6IFtmbXRbMF0sIGZtdFsxXSwgZm10WzJdLCBcIkBcIl07IGJyZWFrO1xuXHRcdGNhc2UgNDogYnJlYWs7XG5cdH1cblx0dmFyIGZmID0gdiA+IDAgPyBmbXRbMF0gOiB2IDwgMCA/IGZtdFsxXSA6IGZtdFsyXTtcblx0aWYoZm10WzBdLmluZGV4T2YoXCJbXCIpID09PSAtMSAmJiBmbXRbMV0uaW5kZXhPZihcIltcIikgPT09IC0xKSByZXR1cm4gW2wsIGZmXTtcblx0aWYoZm10WzBdLm1hdGNoKC9cXFtbPTw+XS8pICE9IG51bGwgfHwgZm10WzFdLm1hdGNoKC9cXFtbPTw+XS8pICE9IG51bGwpIHtcblx0XHR2YXIgbTEgPSBmbXRbMF0ubWF0Y2goY2ZyZWdleDIpO1xuXHRcdHZhciBtMiA9IGZtdFsxXS5tYXRjaChjZnJlZ2V4Mik7XG5cdFx0cmV0dXJuIGNoa2NvbmQodiwgbTEpID8gW2wsIGZtdFswXV0gOiBjaGtjb25kKHYsIG0yKSA/IFtsLCBmbXRbMV1dIDogW2wsIGZtdFttMSAhPSBudWxsICYmIG0yICE9IG51bGwgPyAyIDogMV1dO1xuXHR9XG5cdHJldHVybiBbbCwgZmZdO1xufVxuZnVuY3Rpb24gU1NGX2Zvcm1hdChmbXQvKjpzdHJpbmd8bnVtYmVyKi8sdi8qOmFueSovLG8vKjo/YW55Ki8pIHtcblx0aWYobyA9PSBudWxsKSBvID0ge307XG5cdHZhciBzZm10ID0gXCJcIjtcblx0c3dpdGNoKHR5cGVvZiBmbXQpIHtcblx0XHRjYXNlIFwic3RyaW5nXCI6XG5cdFx0XHRpZihmbXQgPT0gXCJtL2QveXlcIiAmJiBvLmRhdGVORikgc2ZtdCA9IG8uZGF0ZU5GO1xuXHRcdFx0ZWxzZSBzZm10ID0gZm10O1xuXHRcdFx0YnJlYWs7XG5cdFx0Y2FzZSBcIm51bWJlclwiOlxuXHRcdFx0aWYoZm10ID09IDE0ICYmIG8uZGF0ZU5GKSBzZm10ID0gby5kYXRlTkY7XG5cdFx0XHRlbHNlIHNmbXQgPSAoby50YWJsZSAhPSBudWxsID8gKG8udGFibGUvKjphbnkqLykgOiB0YWJsZV9mbXQpW2ZtdF07XG5cdFx0XHRpZihzZm10ID09IG51bGwpIHNmbXQgPSAoby50YWJsZSAmJiBvLnRhYmxlW1NTRl9kZWZhdWx0X21hcFtmbXRdXSkgfHwgdGFibGVfZm10W1NTRl9kZWZhdWx0X21hcFtmbXRdXTtcblx0XHRcdGlmKHNmbXQgPT0gbnVsbCkgc2ZtdCA9IFNTRl9kZWZhdWx0X3N0cltmbXRdIHx8IFwiR2VuZXJhbFwiO1xuXHRcdFx0YnJlYWs7XG5cdH1cblx0aWYoU1NGX2lzZ2VuZXJhbChzZm10LDApKSByZXR1cm4gU1NGX2dlbmVyYWwodiwgbyk7XG5cdGlmKHYgaW5zdGFuY2VvZiBEYXRlKSB2ID0gZGF0ZW51bV9sb2NhbCh2LCBvLmRhdGUxOTA0KTtcblx0dmFyIGYgPSBjaG9vc2VfZm10KHNmbXQsIHYpO1xuXHRpZihTU0ZfaXNnZW5lcmFsKGZbMV0pKSByZXR1cm4gU1NGX2dlbmVyYWwodiwgbyk7XG5cdGlmKHYgPT09IHRydWUpIHYgPSBcIlRSVUVcIjsgZWxzZSBpZih2ID09PSBmYWxzZSkgdiA9IFwiRkFMU0VcIjtcblx0ZWxzZSBpZih2ID09PSBcIlwiIHx8IHYgPT0gbnVsbCkgcmV0dXJuIFwiXCI7XG5cdHJldHVybiBldmFsX2ZtdChmWzFdLCB2LCBvLCBmWzBdKTtcbn1cbmZ1bmN0aW9uIFNTRl9sb2FkKGZtdC8qOnN0cmluZyovLCBpZHgvKjo/bnVtYmVyKi8pLyo6bnVtYmVyKi8ge1xuXHRpZih0eXBlb2YgaWR4ICE9ICdudW1iZXInKSB7XG5cdFx0aWR4ID0gK2lkeCB8fCAtMTtcbi8qOjppZih0eXBlb2YgaWR4ICE9ICdudW1iZXInKSByZXR1cm4gMHgxODg7ICovXG5cdFx0Zm9yKHZhciBpID0gMDsgaSA8IDB4MDE4ODsgKytpKSB7XG4vKjo6aWYodHlwZW9mIGlkeCAhPSAnbnVtYmVyJykgcmV0dXJuIDB4MTg4OyAqL1xuXHRcdFx0aWYodGFibGVfZm10W2ldID09IHVuZGVmaW5lZCkgeyBpZihpZHggPCAwKSBpZHggPSBpOyBjb250aW51ZTsgfVxuXHRcdFx0aWYodGFibGVfZm10W2ldID09IGZtdCkgeyBpZHggPSBpOyBicmVhazsgfVxuXHRcdH1cbi8qOjppZih0eXBlb2YgaWR4ICE9ICdudW1iZXInKSByZXR1cm4gMHgxODg7ICovXG5cdFx0aWYoaWR4IDwgMCkgaWR4ID0gMHgxODc7XG5cdH1cbi8qOjppZih0eXBlb2YgaWR4ICE9ICdudW1iZXInKSByZXR1cm4gMHgxODg7ICovXG5cdHRhYmxlX2ZtdFtpZHhdID0gZm10O1xuXHRyZXR1cm4gaWR4O1xufVxuZnVuY3Rpb24gU1NGX2xvYWRfdGFibGUodGJsLyo6U1NGVGFibGUqLykvKjp2b2lkKi8ge1xuXHRmb3IodmFyIGk9MDsgaSE9MHgwMTg4OyArK2kpXG5cdFx0aWYodGJsW2ldICE9PSB1bmRlZmluZWQpIFNTRl9sb2FkKHRibFtpXSwgaSk7XG59XG5cbmZ1bmN0aW9uIG1ha2Vfc3NmKCkge1xuXHR0YWJsZV9mbXQgPSBTU0ZfaW5pdF90YWJsZSgpO1xufVxuXG52YXIgU1NGID0ge1xuXHRmb3JtYXQ6IFNTRl9mb3JtYXQsXG5cdGxvYWQ6IFNTRl9sb2FkLFxuXHRfdGFibGU6IHRhYmxlX2ZtdCxcblx0bG9hZF90YWJsZTogU1NGX2xvYWRfdGFibGUsXG5cdHBhcnNlX2RhdGVfY29kZTogU1NGX3BhcnNlX2RhdGVfY29kZSxcblx0aXNfZGF0ZTogZm10X2lzX2RhdGUsXG5cdGdldF90YWJsZTogZnVuY3Rpb24gZ2V0X3RhYmxlKCkgeyByZXR1cm4gU1NGLl90YWJsZSA9IHRhYmxlX2ZtdDsgfVxufTtcblxudmFyIFNTRkltcGxpY2l0Lyp7W251bWJlcl06c3RyaW5nfSovID0gKHtcblx0XCI1XCI6ICdcIiRcIiMsIyMwXyk7XFxcXChcIiRcIiMsIyMwXFxcXCknLFxuXHRcIjZcIjogJ1wiJFwiIywjIzBfKTtbUmVkXVxcXFwoXCIkXCIjLCMjMFxcXFwpJyxcblx0XCI3XCI6ICdcIiRcIiMsIyMwLjAwXyk7XFxcXChcIiRcIiMsIyMwLjAwXFxcXCknLFxuXHRcIjhcIjogJ1wiJFwiIywjIzAuMDBfKTtbUmVkXVxcXFwoXCIkXCIjLCMjMC4wMFxcXFwpJyxcblx0XCIyM1wiOiAnR2VuZXJhbCcsIFwiMjRcIjogJ0dlbmVyYWwnLCBcIjI1XCI6ICdHZW5lcmFsJywgXCIyNlwiOiAnR2VuZXJhbCcsXG5cdFwiMjdcIjogJ20vZC95eScsIFwiMjhcIjogJ20vZC95eScsIFwiMjlcIjogJ20vZC95eScsIFwiMzBcIjogJ20vZC95eScsIFwiMzFcIjogJ20vZC95eScsXG5cdFwiMzJcIjogJ2g6bW06c3MnLCBcIjMzXCI6ICdoOm1tOnNzJywgXCIzNFwiOiAnaDptbTpzcycsIFwiMzVcIjogJ2g6bW06c3MnLFxuXHRcIjM2XCI6ICdtL2QveXknLFxuXHRcIjQxXCI6ICdfKCogIywjIzBfKTtfKCogXFwoIywjIzBcXCk7XygqIFwiLVwiXyk7XyhAXyknLFxuXHRcIjQyXCI6ICdfKFwiJFwiKiAjLCMjMF8pO18oXCIkXCIqIFxcKCMsIyMwXFwpO18oXCIkXCIqIFwiLVwiXyk7XyhAXyknLFxuXHRcIjQzXCI6ICdfKCogIywjIzAuMDBfKTtfKCogXFwoIywjIzAuMDBcXCk7XygqIFwiLVwiPz9fKTtfKEBfKScsXG5cdFwiNDRcIjogJ18oXCIkXCIqICMsIyMwLjAwXyk7XyhcIiRcIiogXFwoIywjIzAuMDBcXCk7XyhcIiRcIiogXCItXCI/P18pO18oQF8pJyxcblx0XCI1MFwiOiAnbS9kL3l5JywgXCI1MVwiOiAnbS9kL3l5JywgXCI1MlwiOiAnbS9kL3l5JywgXCI1M1wiOiAnbS9kL3l5JywgXCI1NFwiOiAnbS9kL3l5Jyxcblx0XCI1NVwiOiAnbS9kL3l5JywgXCI1NlwiOiAnbS9kL3l5JywgXCI1N1wiOiAnbS9kL3l5JywgXCI1OFwiOiAnbS9kL3l5Jyxcblx0XCI1OVwiOiAnMCcsXG5cdFwiNjBcIjogJzAuMDAnLFxuXHRcIjYxXCI6ICcjLCMjMCcsXG5cdFwiNjJcIjogJyMsIyMwLjAwJyxcblx0XCI2M1wiOiAnXCIkXCIjLCMjMF8pO1xcXFwoXCIkXCIjLCMjMFxcXFwpJyxcblx0XCI2NFwiOiAnXCIkXCIjLCMjMF8pO1tSZWRdXFxcXChcIiRcIiMsIyMwXFxcXCknLFxuXHRcIjY1XCI6ICdcIiRcIiMsIyMwLjAwXyk7XFxcXChcIiRcIiMsIyMwLjAwXFxcXCknLFxuXHRcIjY2XCI6ICdcIiRcIiMsIyMwLjAwXyk7W1JlZF1cXFxcKFwiJFwiIywjIzAuMDBcXFxcKScsXG5cdFwiNjdcIjogJzAlJyxcblx0XCI2OFwiOiAnMC4wMCUnLFxuXHRcIjY5XCI6ICcjID8vPycsXG5cdFwiNzBcIjogJyMgPz8vPz8nLFxuXHRcIjcxXCI6ICdtL2QveXknLFxuXHRcIjcyXCI6ICdtL2QveXknLFxuXHRcIjczXCI6ICdkLW1tbS15eScsXG5cdFwiNzRcIjogJ2QtbW1tJyxcblx0XCI3NVwiOiAnbW1tLXl5Jyxcblx0XCI3NlwiOiAnaDptbScsXG5cdFwiNzdcIjogJ2g6bW06c3MnLFxuXHRcIjc4XCI6ICdtL2QveXkgaDptbScsXG5cdFwiNzlcIjogJ21tOnNzJyxcblx0XCI4MFwiOiAnW2hdOm1tOnNzJyxcblx0XCI4MVwiOiAnbW1zcy4wJ1xufS8qOmFueSovKTtcblxuLyogZGF0ZU5GIHBhcnNlIFRPRE86IG1vdmUgdG8gU1NGICovXG52YXIgZGF0ZU5GcmVnZXggPSAvW2REXSt8W21NXSt8W3lZZUVdK3xbSGhdK3xbU3NdKy9nO1xuZnVuY3Rpb24gZGF0ZU5GX3JlZ2V4KGRhdGVORi8qOnN0cmluZ3xudW1iZXIqLykvKjpSZWdFeHAqLyB7XG5cdHZhciBmbXQgPSB0eXBlb2YgZGF0ZU5GID09IFwibnVtYmVyXCIgPyB0YWJsZV9mbXRbZGF0ZU5GXSA6IGRhdGVORjtcblx0Zm10ID0gZm10LnJlcGxhY2UoZGF0ZU5GcmVnZXgsIFwiKFxcXFxkKylcIik7XG5cdHJldHVybiBuZXcgUmVnRXhwKFwiXlwiICsgZm10ICsgXCIkXCIpO1xufVxuZnVuY3Rpb24gZGF0ZU5GX2ZpeChzdHIvKjpzdHJpbmcqLywgZGF0ZU5GLyo6c3RyaW5nKi8sIG1hdGNoLyo6QXJyYXk8c3RyaW5nPiovKS8qOnN0cmluZyovIHtcblx0dmFyIFkgPSAtMSwgbSA9IC0xLCBkID0gLTEsIEggPSAtMSwgTSA9IC0xLCBTID0gLTE7XG5cdChkYXRlTkYubWF0Y2goZGF0ZU5GcmVnZXgpfHxbXSkuZm9yRWFjaChmdW5jdGlvbihuLCBpKSB7XG5cdFx0dmFyIHYgPSBwYXJzZUludChtYXRjaFtpKzFdLCAxMCk7XG5cdFx0c3dpdGNoKG4udG9Mb3dlckNhc2UoKS5jaGFyQXQoMCkpIHtcblx0XHRcdGNhc2UgJ3knOiBZID0gdjsgYnJlYWs7IGNhc2UgJ2QnOiBkID0gdjsgYnJlYWs7XG5cdFx0XHRjYXNlICdoJzogSCA9IHY7IGJyZWFrOyBjYXNlICdzJzogUyA9IHY7IGJyZWFrO1xuXHRcdFx0Y2FzZSAnbSc6IGlmKEggPj0gMCkgTSA9IHY7IGVsc2UgbSA9IHY7IGJyZWFrO1xuXHRcdH1cblx0fSk7XG5cdGlmKFMgPj0gMCAmJiBNID09IC0xICYmIG0gPj0gMCkgeyBNID0gbTsgbSA9IC0xOyB9XG5cdHZhciBkYXRlc3RyID0gKChcIlwiICsgKFk+PTA/WTogbmV3IERhdGUoKS5nZXRGdWxsWWVhcigpKSkuc2xpY2UoLTQpICsgXCItXCIgKyAoXCIwMFwiICsgKG0+PTE/bToxKSkuc2xpY2UoLTIpICsgXCItXCIgKyAoXCIwMFwiICsgKGQ+PTE/ZDoxKSkuc2xpY2UoLTIpKTtcblx0aWYoZGF0ZXN0ci5sZW5ndGggPT0gNykgZGF0ZXN0ciA9IFwiMFwiICsgZGF0ZXN0cjtcblx0aWYoZGF0ZXN0ci5sZW5ndGggPT0gOCkgZGF0ZXN0ciA9IFwiMjBcIiArIGRhdGVzdHI7XG5cdHZhciB0aW1lc3RyID0gKChcIjAwXCIgKyAoSD49MD9IOjApKS5zbGljZSgtMikgKyBcIjpcIiArIChcIjAwXCIgKyAoTT49MD9NOjApKS5zbGljZSgtMikgKyBcIjpcIiArIChcIjAwXCIgKyAoUz49MD9TOjApKS5zbGljZSgtMikpO1xuXHRpZihIID09IC0xICYmIE0gPT0gLTEgJiYgUyA9PSAtMSkgcmV0dXJuIGRhdGVzdHI7XG5cdGlmKFkgPT0gLTEgJiYgbSA9PSAtMSAmJiBkID09IC0xKSByZXR1cm4gdGltZXN0cjtcblx0cmV0dXJuIGRhdGVzdHIgKyBcIlRcIiArIHRpbWVzdHI7XG59XG5cbi8qOjpcbmRlY2xhcmUgdmFyIFJlYWRTaGlmdDphbnk7XG5kZWNsYXJlIHZhciBDaGVja0ZpZWxkOmFueTtcbmRlY2xhcmUgdmFyIHByZXBfYmxvYjphbnk7XG5kZWNsYXJlIHZhciBfX3JlYWRVSW50MzJMRTphbnk7XG5kZWNsYXJlIHZhciBfX3JlYWRJbnQzMkxFOmFueTtcbmRlY2xhcmUgdmFyIF9fdG9CdWZmZXI6YW55O1xuZGVjbGFyZSB2YXIgX191dGYxNmxlOmFueTtcbmRlY2xhcmUgdmFyIGJjb25jYXQ6YW55O1xuZGVjbGFyZSB2YXIgczJhOmFueTtcbmRlY2xhcmUgdmFyIGNocjA6YW55O1xuZGVjbGFyZSB2YXIgY2hyMTphbnk7XG5kZWNsYXJlIHZhciBoYXNfYnVmOmJvb2xlYW47XG5kZWNsYXJlIHZhciBuZXdfYnVmOmFueTtcbmRlY2xhcmUgdmFyIG5ld19yYXdfYnVmOmFueTtcbmRlY2xhcmUgdmFyIG5ld191bnNhZmVfYnVmOmFueTtcbmRlY2xhcmUgdmFyIEJ1ZmZlcl9mcm9tOmFueTtcbiovXG4vKiBjZmIuanMgKEMpIDIwMTMtcHJlc2VudCBTaGVldEpTIC0tIGh0dHA6Ly9zaGVldGpzLmNvbSAqL1xuLyogdmltOiBzZXQgdHM9MjogKi9cbi8qanNoaW50IGVxbnVsbDp0cnVlICovXG4vKmV4cG9ydGVkIENGQiAqL1xuLypnbG9iYWwgVWludDhBcnJheTpmYWxzZSwgVWludDE2QXJyYXk6ZmFsc2UgKi9cblxuLyo6OlxudHlwZSBTZWN0b3JFbnRyeSA9IHtcblx0bmFtZT86c3RyaW5nO1xuXHRub2Rlcz86QXJyYXk8bnVtYmVyPjtcblx0ZGF0YTpSYXdCeXRlcztcbn07XG50eXBlIFNlY3Rvckxpc3QgPSB7XG5cdFtrOnN0cmluZ3xudW1iZXJdOlNlY3RvckVudHJ5O1xuXHRuYW1lOj9zdHJpbmc7XG5cdGZhdF9hZGRyczpBcnJheTxudW1iZXI+O1xuXHRzc3o6bnVtYmVyO1xufVxudHlwZSBDRkJGaWxlcyA9IHtbbjpzdHJpbmddOkNGQkVudHJ5fTtcbiovXG4vKiBjcmMzMi5qcyAoQykgMjAxNC1wcmVzZW50IFNoZWV0SlMgLS0gaHR0cDovL3NoZWV0anMuY29tICovXG4vKiB2aW06IHNldCB0cz0yOiAqL1xuLypleHBvcnRlZCBDUkMzMiAqL1xudmFyIENSQzMyID0gLyojX19QVVJFX18qLyhmdW5jdGlvbigpIHtcbnZhciBDUkMzMiA9IHt9O1xuQ1JDMzIudmVyc2lvbiA9ICcxLjIuMCc7XG4vKiBzZWUgcGVyZi9jcmMzMnRhYmxlLmpzICovXG4vKmdsb2JhbCBJbnQzMkFycmF5ICovXG5mdW5jdGlvbiBzaWduZWRfY3JjX3RhYmxlKCkvKjphbnkqLyB7XG5cdHZhciBjID0gMCwgdGFibGUvKjpBcnJheTxudW1iZXI+Ki8gPSBuZXcgQXJyYXkoMjU2KTtcblxuXHRmb3IodmFyIG4gPTA7IG4gIT0gMjU2OyArK24pe1xuXHRcdGMgPSBuO1xuXHRcdGMgPSAoKGMmMSkgPyAoLTMwNjY3NDkxMiBeIChjID4+PiAxKSkgOiAoYyA+Pj4gMSkpO1xuXHRcdGMgPSAoKGMmMSkgPyAoLTMwNjY3NDkxMiBeIChjID4+PiAxKSkgOiAoYyA+Pj4gMSkpO1xuXHRcdGMgPSAoKGMmMSkgPyAoLTMwNjY3NDkxMiBeIChjID4+PiAxKSkgOiAoYyA+Pj4gMSkpO1xuXHRcdGMgPSAoKGMmMSkgPyAoLTMwNjY3NDkxMiBeIChjID4+PiAxKSkgOiAoYyA+Pj4gMSkpO1xuXHRcdGMgPSAoKGMmMSkgPyAoLTMwNjY3NDkxMiBeIChjID4+PiAxKSkgOiAoYyA+Pj4gMSkpO1xuXHRcdGMgPSAoKGMmMSkgPyAoLTMwNjY3NDkxMiBeIChjID4+PiAxKSkgOiAoYyA+Pj4gMSkpO1xuXHRcdGMgPSAoKGMmMSkgPyAoLTMwNjY3NDkxMiBeIChjID4+PiAxKSkgOiAoYyA+Pj4gMSkpO1xuXHRcdGMgPSAoKGMmMSkgPyAoLTMwNjY3NDkxMiBeIChjID4+PiAxKSkgOiAoYyA+Pj4gMSkpO1xuXHRcdHRhYmxlW25dID0gYztcblx0fVxuXG5cdHJldHVybiB0eXBlb2YgSW50MzJBcnJheSAhPT0gJ3VuZGVmaW5lZCcgPyBuZXcgSW50MzJBcnJheSh0YWJsZSkgOiB0YWJsZTtcbn1cblxudmFyIFQwID0gc2lnbmVkX2NyY190YWJsZSgpO1xuZnVuY3Rpb24gc2xpY2VfYnlfMTZfdGFibGVzKFQpIHtcblx0dmFyIGMgPSAwLCB2ID0gMCwgbiA9IDAsIHRhYmxlLyo6QXJyYXk8bnVtYmVyPiovID0gdHlwZW9mIEludDMyQXJyYXkgIT09ICd1bmRlZmluZWQnID8gbmV3IEludDMyQXJyYXkoNDA5NikgOiBuZXcgQXJyYXkoNDA5NikgO1xuXG5cdGZvcihuID0gMDsgbiAhPSAyNTY7ICsrbikgdGFibGVbbl0gPSBUW25dO1xuXHRmb3IobiA9IDA7IG4gIT0gMjU2OyArK24pIHtcblx0XHR2ID0gVFtuXTtcblx0XHRmb3IoYyA9IDI1NiArIG47IGMgPCA0MDk2OyBjICs9IDI1NikgdiA9IHRhYmxlW2NdID0gKHYgPj4+IDgpIF4gVFt2ICYgMHhGRl07XG5cdH1cblx0dmFyIG91dCA9IFtdO1xuXHRmb3IobiA9IDE7IG4gIT0gMTY7ICsrbikgb3V0W24gLSAxXSA9IHR5cGVvZiBJbnQzMkFycmF5ICE9PSAndW5kZWZpbmVkJyA/IHRhYmxlLnN1YmFycmF5KG4gKiAyNTYsIG4gKiAyNTYgKyAyNTYpIDogdGFibGUuc2xpY2UobiAqIDI1NiwgbiAqIDI1NiArIDI1Nik7XG5cdHJldHVybiBvdXQ7XG59XG52YXIgVFQgPSBzbGljZV9ieV8xNl90YWJsZXMoVDApO1xudmFyIFQxID0gVFRbMF0sICBUMiA9IFRUWzFdLCAgVDMgPSBUVFsyXSwgIFQ0ID0gVFRbM10sICBUNSA9IFRUWzRdO1xudmFyIFQ2ID0gVFRbNV0sICBUNyA9IFRUWzZdLCAgVDggPSBUVFs3XSwgIFQ5ID0gVFRbOF0sICBUYSA9IFRUWzldO1xudmFyIFRiID0gVFRbMTBdLCBUYyA9IFRUWzExXSwgVGQgPSBUVFsxMl0sIFRlID0gVFRbMTNdLCBUZiA9IFRUWzE0XTtcbmZ1bmN0aW9uIGNyYzMyX2JzdHIoYnN0ci8qOnN0cmluZyovLCBzZWVkLyo6bnVtYmVyKi8pLyo6bnVtYmVyKi8ge1xuXHR2YXIgQyA9IHNlZWQvKjo6ID8gMCA6IDAgKi8gXiAtMTtcblx0Zm9yKHZhciBpID0gMCwgTCA9IGJzdHIubGVuZ3RoOyBpIDwgTDspIEMgPSAoQz4+PjgpIF4gVDBbKENeYnN0ci5jaGFyQ29kZUF0KGkrKykpJjB4RkZdO1xuXHRyZXR1cm4gfkM7XG59XG5cbmZ1bmN0aW9uIGNyYzMyX2J1ZihCLyo6VWludDhBcnJheXxBcnJheTxudW1iZXI+Ki8sIHNlZWQvKjpudW1iZXIqLykvKjpudW1iZXIqLyB7XG5cdHZhciBDID0gc2VlZC8qOjogPyAwIDogMCAqLyBeIC0xLCBMID0gQi5sZW5ndGggLSAxNSwgaSA9IDA7XG5cdGZvcig7IGkgPCBMOykgQyA9XG5cdFx0VGZbQltpKytdIF4gKEMgJiAyNTUpXSBeXG5cdFx0VGVbQltpKytdIF4gKChDID4+IDgpICYgMjU1KV0gXlxuXHRcdFRkW0JbaSsrXSBeICgoQyA+PiAxNikgJiAyNTUpXSBeXG5cdFx0VGNbQltpKytdIF4gKEMgPj4+IDI0KV0gXlxuXHRcdFRiW0JbaSsrXV0gXiBUYVtCW2krK11dIF4gVDlbQltpKytdXSBeIFQ4W0JbaSsrXV0gXlxuXHRcdFQ3W0JbaSsrXV0gXiBUNltCW2krK11dIF4gVDVbQltpKytdXSBeIFQ0W0JbaSsrXV0gXlxuXHRcdFQzW0JbaSsrXV0gXiBUMltCW2krK11dIF4gVDFbQltpKytdXSBeIFQwW0JbaSsrXV07XG5cdEwgKz0gMTU7XG5cdHdoaWxlKGkgPCBMKSBDID0gKEM+Pj44KSBeIFQwWyhDXkJbaSsrXSkmMHhGRl07XG5cdHJldHVybiB+Qztcbn1cblxuZnVuY3Rpb24gY3JjMzJfc3RyKHN0ci8qOnN0cmluZyovLCBzZWVkLyo6bnVtYmVyKi8pLyo6bnVtYmVyKi8ge1xuXHR2YXIgQyA9IHNlZWQgXiAtMTtcblx0Zm9yKHZhciBpID0gMCwgTCA9IHN0ci5sZW5ndGgsIGMgPSAwLCBkID0gMDsgaSA8IEw7KSB7XG5cdFx0YyA9IHN0ci5jaGFyQ29kZUF0KGkrKyk7XG5cdFx0aWYoYyA8IDB4ODApIHtcblx0XHRcdEMgPSAoQz4+PjgpIF4gVDBbKENeYykmMHhGRl07XG5cdFx0fSBlbHNlIGlmKGMgPCAweDgwMCkge1xuXHRcdFx0QyA9IChDPj4+OCkgXiBUMFsoQyBeICgxOTJ8KChjPj42KSYzMSkpKSYweEZGXTtcblx0XHRcdEMgPSAoQz4+PjgpIF4gVDBbKEMgXiAoMTI4fChjJjYzKSkpJjB4RkZdO1xuXHRcdH0gZWxzZSBpZihjID49IDB4RDgwMCAmJiBjIDwgMHhFMDAwKSB7XG5cdFx0XHRjID0gKGMmMTAyMykrNjQ7IGQgPSBzdHIuY2hhckNvZGVBdChpKyspJjEwMjM7XG5cdFx0XHRDID0gKEM+Pj44KSBeIFQwWyhDIF4gKDI0MHwoKGM+PjgpJjcpKSkmMHhGRl07XG5cdFx0XHRDID0gKEM+Pj44KSBeIFQwWyhDIF4gKDEyOHwoKGM+PjIpJjYzKSkpJjB4RkZdO1xuXHRcdFx0QyA9IChDPj4+OCkgXiBUMFsoQyBeICgxMjh8KChkPj42KSYxNSl8KChjJjMpPDw0KSkpJjB4RkZdO1xuXHRcdFx0QyA9IChDPj4+OCkgXiBUMFsoQyBeICgxMjh8KGQmNjMpKSkmMHhGRl07XG5cdFx0fSBlbHNlIHtcblx0XHRcdEMgPSAoQz4+PjgpIF4gVDBbKEMgXiAoMjI0fCgoYz4+MTIpJjE1KSkpJjB4RkZdO1xuXHRcdFx0QyA9IChDPj4+OCkgXiBUMFsoQyBeICgxMjh8KChjPj42KSY2MykpKSYweEZGXTtcblx0XHRcdEMgPSAoQz4+PjgpIF4gVDBbKEMgXiAoMTI4fChjJjYzKSkpJjB4RkZdO1xuXHRcdH1cblx0fVxuXHRyZXR1cm4gfkM7XG59XG5DUkMzMi50YWJsZSA9IFQwO1xuQ1JDMzIuYnN0ciA9IGNyYzMyX2JzdHI7XG5DUkMzMi5idWYgPSBjcmMzMl9idWY7XG5DUkMzMi5zdHIgPSBjcmMzMl9zdHI7XG5yZXR1cm4gQ1JDMzI7XG59KSgpO1xuLyogW01TLUNGQl0gdjIwMTcxMjAxICovXG52YXIgQ0ZCID0gLyojX19QVVJFX18qLyhmdW5jdGlvbiBfQ0ZCKCl7XG52YXIgZXhwb3J0cyA9IHt9O1xuZXhwb3J0cy52ZXJzaW9uID0gJzEuMi4xJztcbi8qIFtNUy1DRkJdIDIuNi40ICovXG5mdW5jdGlvbiBuYW1lY21wKGwvKjpzdHJpbmcqLywgci8qOnN0cmluZyovKS8qOm51bWJlciovIHtcblx0dmFyIEwgPSBsLnNwbGl0KFwiL1wiKSwgUiA9IHIuc3BsaXQoXCIvXCIpO1xuXHRmb3IodmFyIGkgPSAwLCBjID0gMCwgWiA9IE1hdGgubWluKEwubGVuZ3RoLCBSLmxlbmd0aCk7IGkgPCBaOyArK2kpIHtcblx0XHRpZigoYyA9IExbaV0ubGVuZ3RoIC0gUltpXS5sZW5ndGgpKSByZXR1cm4gYztcblx0XHRpZihMW2ldICE9IFJbaV0pIHJldHVybiBMW2ldIDwgUltpXSA/IC0xIDogMTtcblx0fVxuXHRyZXR1cm4gTC5sZW5ndGggLSBSLmxlbmd0aDtcbn1cbmZ1bmN0aW9uIGRpcm5hbWUocC8qOnN0cmluZyovKS8qOnN0cmluZyovIHtcblx0aWYocC5jaGFyQXQocC5sZW5ndGggLSAxKSA9PSBcIi9cIikgcmV0dXJuIChwLnNsaWNlKDAsLTEpLmluZGV4T2YoXCIvXCIpID09PSAtMSkgPyBwIDogZGlybmFtZShwLnNsaWNlKDAsIC0xKSk7XG5cdHZhciBjID0gcC5sYXN0SW5kZXhPZihcIi9cIik7XG5cdHJldHVybiAoYyA9PT0gLTEpID8gcCA6IHAuc2xpY2UoMCwgYysxKTtcbn1cblxuZnVuY3Rpb24gZmlsZW5hbWUocC8qOnN0cmluZyovKS8qOnN0cmluZyovIHtcblx0aWYocC5jaGFyQXQocC5sZW5ndGggLSAxKSA9PSBcIi9cIikgcmV0dXJuIGZpbGVuYW1lKHAuc2xpY2UoMCwgLTEpKTtcblx0dmFyIGMgPSBwLmxhc3RJbmRleE9mKFwiL1wiKTtcblx0cmV0dXJuIChjID09PSAtMSkgPyBwIDogcC5zbGljZShjKzEpO1xufVxuLyogLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0gKi9cbi8qIERPUyBEYXRlIGZvcm1hdDpcbiAgIGhpZ2h8WVlZWVlZWW0ubW1tZGRkZGQuSEhISEhNTU0uTU1NU1NTU1N8bG93XG4gICBhZGQgMTk4MCB0byBzdG9yZWQgeWVhclxuICAgc3RvcmVkIHNlY29uZCBzaG91bGQgYmUgZG91YmxlZFxuKi9cblxuLyogd3JpdGUgSlMgZGF0ZSB0byBidWYgYXMgYSBET1MgZGF0ZSAqL1xuZnVuY3Rpb24gd3JpdGVfZG9zX2RhdGUoYnVmLyo6Q0ZCbG9iKi8sIGRhdGUvKjpEYXRlfHN0cmluZyovKSB7XG5cdGlmKHR5cGVvZiBkYXRlID09PSBcInN0cmluZ1wiKSBkYXRlID0gbmV3IERhdGUoZGF0ZSk7XG5cdHZhciBobXMvKjpudW1iZXIqLyA9IGRhdGUuZ2V0SG91cnMoKTtcblx0aG1zID0gaG1zIDw8IDYgfCBkYXRlLmdldE1pbnV0ZXMoKTtcblx0aG1zID0gaG1zIDw8IDUgfCAoZGF0ZS5nZXRTZWNvbmRzKCk+Pj4xKTtcblx0YnVmLndyaXRlX3NoaWZ0KDIsIGhtcyk7XG5cdHZhciB5bWQvKjpudW1iZXIqLyA9IChkYXRlLmdldEZ1bGxZZWFyKCkgLSAxOTgwKTtcblx0eW1kID0geW1kIDw8IDQgfCAoZGF0ZS5nZXRNb250aCgpKzEpO1xuXHR5bWQgPSB5bWQgPDwgNSB8IGRhdGUuZ2V0RGF0ZSgpO1xuXHRidWYud3JpdGVfc2hpZnQoMiwgeW1kKTtcbn1cblxuLyogcmVhZCBmb3VyIGJ5dGVzIGZyb20gYnVmIGFuZCBpbnRlcnByZXQgYXMgYSBET1MgZGF0ZSAqL1xuZnVuY3Rpb24gcGFyc2VfZG9zX2RhdGUoYnVmLyo6Q0ZCbG9iKi8pLyo6RGF0ZSovIHtcblx0dmFyIGhtcyA9IGJ1Zi5yZWFkX3NoaWZ0KDIpICYgMHhGRkZGO1xuXHR2YXIgeW1kID0gYnVmLnJlYWRfc2hpZnQoMikgJiAweEZGRkY7XG5cdHZhciB2YWwgPSBuZXcgRGF0ZSgpO1xuXHR2YXIgZCA9IHltZCAmIDB4MUY7IHltZCA+Pj49IDU7XG5cdHZhciBtID0geW1kICYgMHgwRjsgeW1kID4+Pj0gNDtcblx0dmFsLnNldE1pbGxpc2Vjb25kcygwKTtcblx0dmFsLnNldEZ1bGxZZWFyKHltZCArIDE5ODApO1xuXHR2YWwuc2V0TW9udGgobS0xKTtcblx0dmFsLnNldERhdGUoZCk7XG5cdHZhciBTID0gaG1zICYgMHgxRjsgaG1zID4+Pj0gNTtcblx0dmFyIE0gPSBobXMgJiAweDNGOyBobXMgPj4+PSA2O1xuXHR2YWwuc2V0SG91cnMoaG1zKTtcblx0dmFsLnNldE1pbnV0ZXMoTSk7XG5cdHZhbC5zZXRTZWNvbmRzKFM8PDEpO1xuXHRyZXR1cm4gdmFsO1xufVxuZnVuY3Rpb24gcGFyc2VfZXh0cmFfZmllbGQoYmxvYi8qOkNGQmxvYiovKS8qOmFueSovIHtcblx0cHJlcF9ibG9iKGJsb2IsIDApO1xuXHR2YXIgbyA9IC8qOjooKi97fS8qOjogOmFueSkqLztcblx0dmFyIGZsYWdzID0gMDtcblx0d2hpbGUoYmxvYi5sIDw9IGJsb2IubGVuZ3RoIC0gNCkge1xuXHRcdHZhciB0eXBlID0gYmxvYi5yZWFkX3NoaWZ0KDIpO1xuXHRcdHZhciBzeiA9IGJsb2IucmVhZF9zaGlmdCgyKSwgdGd0ID0gYmxvYi5sICsgc3o7XG5cdFx0dmFyIHAgPSB7fTtcblx0XHRzd2l0Y2godHlwZSkge1xuXHRcdFx0LyogVU5JWC1zdHlsZSBUaW1lc3RhbXBzICovXG5cdFx0XHRjYXNlIDB4NTQ1NToge1xuXHRcdFx0XHRmbGFncyA9IGJsb2IucmVhZF9zaGlmdCgxKTtcblx0XHRcdFx0aWYoZmxhZ3MgJiAxKSBwLm10aW1lID0gYmxvYi5yZWFkX3NoaWZ0KDQpO1xuXHRcdFx0XHQvKiBmb3Igc29tZSByZWFzb24sIENEIGZsYWcgY29ycmVzcG9uZHMgdG8gTEZIICovXG5cdFx0XHRcdGlmKHN6ID4gNSkge1xuXHRcdFx0XHRcdGlmKGZsYWdzICYgMikgcC5hdGltZSA9IGJsb2IucmVhZF9zaGlmdCg0KTtcblx0XHRcdFx0XHRpZihmbGFncyAmIDQpIHAuY3RpbWUgPSBibG9iLnJlYWRfc2hpZnQoNCk7XG5cdFx0XHRcdH1cblx0XHRcdFx0aWYocC5tdGltZSkgcC5tdCA9IG5ldyBEYXRlKHAubXRpbWUqMTAwMCk7XG5cdFx0XHR9XG5cdFx0XHRicmVhaztcblx0XHR9XG5cdFx0YmxvYi5sID0gdGd0O1xuXHRcdG9bdHlwZV0gPSBwO1xuXHR9XG5cdHJldHVybiBvO1xufVxudmFyIGZzLyo6OiA9IHJlcXVpcmUoJ2ZzJyk7ICovO1xuZnVuY3Rpb24gZ2V0X2ZzKCkgeyByZXR1cm4gZnMgfHwgKGZzID0ge30pOyB9XG5mdW5jdGlvbiBwYXJzZShmaWxlLyo6UmF3Qnl0ZXMqLywgb3B0aW9ucy8qOkNGQlJlYWRPcHRzKi8pLyo6Q0ZCQ29udGFpbmVyKi8ge1xuaWYoZmlsZVswXSA9PSAweDUwICYmIGZpbGVbMV0gPT0gMHg0YikgcmV0dXJuIHBhcnNlX3ppcChmaWxlLCBvcHRpb25zKTtcbmlmKChmaWxlWzBdIHwgMHgyMCkgPT0gMHg2ZCAmJiAoZmlsZVsxXXwweDIwKSA9PSAweDY5KSByZXR1cm4gcGFyc2VfbWFkKGZpbGUsIG9wdGlvbnMpO1xuaWYoZmlsZS5sZW5ndGggPCA1MTIpIHRocm93IG5ldyBFcnJvcihcIkNGQiBmaWxlIHNpemUgXCIgKyBmaWxlLmxlbmd0aCArIFwiIDwgNTEyXCIpO1xudmFyIG12ZXIgPSAzO1xudmFyIHNzeiA9IDUxMjtcbnZhciBubWZzID0gMDsgLy8gbnVtYmVyIG9mIG1pbmkgRkFUIHNlY3RvcnNcbnZhciBkaWZhdF9zZWNfY250ID0gMDtcbnZhciBkaXJfc3RhcnQgPSAwO1xudmFyIG1pbmlmYXRfc3RhcnQgPSAwO1xudmFyIGRpZmF0X3N0YXJ0ID0gMDtcblxudmFyIGZhdF9hZGRycy8qOkFycmF5PG51bWJlcj4qLyA9IFtdOyAvLyBsb2NhdGlvbnMgb2YgRkFUIHNlY3RvcnNcblxuLyogW01TLUNGQl0gMi4yIENvbXBvdW5kIEZpbGUgSGVhZGVyICovXG52YXIgYmxvYi8qOkNGQmxvYiovID0gLyo6OigqL2ZpbGUuc2xpY2UoMCw1MTIpLyo6OiA6YW55KSovO1xucHJlcF9ibG9iKGJsb2IsIDApO1xuXG4vKiBtYWpvciB2ZXJzaW9uICovXG52YXIgbXYgPSBjaGVja19nZXRfbXZlcihibG9iKTtcbm12ZXIgPSBtdlswXTtcbnN3aXRjaChtdmVyKSB7XG5cdGNhc2UgMzogc3N6ID0gNTEyOyBicmVhazsgY2FzZSA0OiBzc3ogPSA0MDk2OyBicmVhaztcblx0Y2FzZSAwOiBpZihtdlsxXSA9PSAwKSByZXR1cm4gcGFyc2VfemlwKGZpbGUsIG9wdGlvbnMpO1xuXHQvKiBmYWxscyB0aHJvdWdoICovXG5cdGRlZmF1bHQ6IHRocm93IG5ldyBFcnJvcihcIk1ham9yIFZlcnNpb246IEV4cGVjdGVkIDMgb3IgNCBzYXcgXCIgKyBtdmVyKTtcbn1cblxuLyogcmVwcm9jZXNzIGhlYWRlciAqL1xuaWYoc3N6ICE9PSA1MTIpIHsgYmxvYiA9IC8qOjooKi9maWxlLnNsaWNlKDAsc3N6KS8qOjogOmFueSkqLzsgcHJlcF9ibG9iKGJsb2IsIDI4IC8qIGJsb2IubCAqLyk7IH1cbi8qIFNhdmUgaGVhZGVyIGZvciBmaW5hbCBvYmplY3QgKi9cbnZhciBoZWFkZXIvKjpSYXdCeXRlcyovID0gZmlsZS5zbGljZSgwLHNzeik7XG5cbmNoZWNrX3NoaWZ0cyhibG9iLCBtdmVyKTtcblxuLy8gTnVtYmVyIG9mIERpcmVjdG9yeSBTZWN0b3JzXG52YXIgZGlyX2NudC8qOm51bWJlciovID0gYmxvYi5yZWFkX3NoaWZ0KDQsICdpJyk7XG5pZihtdmVyID09PSAzICYmIGRpcl9jbnQgIT09IDApIHRocm93IG5ldyBFcnJvcignIyBEaXJlY3RvcnkgU2VjdG9yczogRXhwZWN0ZWQgMCBzYXcgJyArIGRpcl9jbnQpO1xuXG4vLyBOdW1iZXIgb2YgRkFUIFNlY3RvcnNcbmJsb2IubCArPSA0O1xuXG4vLyBGaXJzdCBEaXJlY3RvcnkgU2VjdG9yIExvY2F0aW9uXG5kaXJfc3RhcnQgPSBibG9iLnJlYWRfc2hpZnQoNCwgJ2knKTtcblxuLy8gVHJhbnNhY3Rpb24gU2lnbmF0dXJlXG5ibG9iLmwgKz0gNDtcblxuLy8gTWluaSBTdHJlYW0gQ3V0b2ZmIFNpemVcbmJsb2IuY2hrKCcwMDEwMDAwMCcsICdNaW5pIFN0cmVhbSBDdXRvZmYgU2l6ZTogJyk7XG5cbi8vIEZpcnN0IE1pbmkgRkFUIFNlY3RvciBMb2NhdGlvblxubWluaWZhdF9zdGFydCA9IGJsb2IucmVhZF9zaGlmdCg0LCAnaScpO1xuXG4vLyBOdW1iZXIgb2YgTWluaSBGQVQgU2VjdG9yc1xubm1mcyA9IGJsb2IucmVhZF9zaGlmdCg0LCAnaScpO1xuXG4vLyBGaXJzdCBESUZBVCBzZWN0b3IgbG9jYXRpb25cbmRpZmF0X3N0YXJ0ID0gYmxvYi5yZWFkX3NoaWZ0KDQsICdpJyk7XG5cbi8vIE51bWJlciBvZiBESUZBVCBTZWN0b3JzXG5kaWZhdF9zZWNfY250ID0gYmxvYi5yZWFkX3NoaWZ0KDQsICdpJyk7XG5cbi8vIEdyYWIgRkFUIFNlY3RvciBMb2NhdGlvbnNcbmZvcih2YXIgcSA9IC0xLCBqID0gMDsgaiA8IDEwOTsgKytqKSB7IC8qIDEwOSA9ICg1MTIgLSBibG9iLmwpPj4+MjsgKi9cblx0cSA9IGJsb2IucmVhZF9zaGlmdCg0LCAnaScpO1xuXHRpZihxPDApIGJyZWFrO1xuXHRmYXRfYWRkcnNbal0gPSBxO1xufVxuXG4vKiogQnJlYWsgdGhlIGZpbGUgdXAgaW50byBzZWN0b3JzICovXG52YXIgc2VjdG9ycy8qOkFycmF5PFJhd0J5dGVzPiovID0gc2VjdG9yaWZ5KGZpbGUsIHNzeik7XG5cbnNsZXV0aF9mYXQoZGlmYXRfc3RhcnQsIGRpZmF0X3NlY19jbnQsIHNlY3RvcnMsIHNzeiwgZmF0X2FkZHJzKTtcblxuLyoqIENoYWlucyAqL1xudmFyIHNlY3Rvcl9saXN0Lyo6U2VjdG9yTGlzdCovID0gbWFrZV9zZWN0b3JfbGlzdChzZWN0b3JzLCBkaXJfc3RhcnQsIGZhdF9hZGRycywgc3N6KTtcblxuc2VjdG9yX2xpc3RbZGlyX3N0YXJ0XS5uYW1lID0gXCIhRGlyZWN0b3J5XCI7XG5pZihubWZzID4gMCAmJiBtaW5pZmF0X3N0YXJ0ICE9PSBFTkRPRkNIQUlOKSBzZWN0b3JfbGlzdFttaW5pZmF0X3N0YXJ0XS5uYW1lID0gXCIhTWluaUZBVFwiO1xuc2VjdG9yX2xpc3RbZmF0X2FkZHJzWzBdXS5uYW1lID0gXCIhRkFUXCI7XG5zZWN0b3JfbGlzdC5mYXRfYWRkcnMgPSBmYXRfYWRkcnM7XG5zZWN0b3JfbGlzdC5zc3ogPSBzc3o7XG5cbi8qIFtNUy1DRkJdIDIuNi4xIENvbXBvdW5kIEZpbGUgRGlyZWN0b3J5IEVudHJ5ICovXG52YXIgZmlsZXMvKjpDRkJGaWxlcyovID0ge30sIFBhdGhzLyo6QXJyYXk8c3RyaW5nPiovID0gW10sIEZpbGVJbmRleC8qOkNGQkZpbGVJbmRleCovID0gW10sIEZ1bGxQYXRocy8qOkFycmF5PHN0cmluZz4qLyA9IFtdO1xucmVhZF9kaXJlY3RvcnkoZGlyX3N0YXJ0LCBzZWN0b3JfbGlzdCwgc2VjdG9ycywgUGF0aHMsIG5tZnMsIGZpbGVzLCBGaWxlSW5kZXgsIG1pbmlmYXRfc3RhcnQpO1xuXG5idWlsZF9mdWxsX3BhdGhzKEZpbGVJbmRleCwgRnVsbFBhdGhzLCBQYXRocyk7XG5QYXRocy5zaGlmdCgpO1xuXG52YXIgbyA9IHtcblx0RmlsZUluZGV4OiBGaWxlSW5kZXgsXG5cdEZ1bGxQYXRoczogRnVsbFBhdGhzXG59O1xuXG4vLyAkRmxvd0lnbm9yZVxuaWYob3B0aW9ucyAmJiBvcHRpb25zLnJhdykgby5yYXcgPSB7aGVhZGVyOiBoZWFkZXIsIHNlY3RvcnM6IHNlY3RvcnN9O1xucmV0dXJuIG87XG59IC8vIHBhcnNlXG5cbi8qIFtNUy1DRkJdIDIuMiBDb21wb3VuZCBGaWxlIEhlYWRlciAtLSByZWFkIHVwIHRvIG1ham9yIHZlcnNpb24gKi9cbmZ1bmN0aW9uIGNoZWNrX2dldF9tdmVyKGJsb2IvKjpDRkJsb2IqLykvKjpbbnVtYmVyLCBudW1iZXJdKi8ge1xuXHRpZihibG9iW2Jsb2IubF0gPT0gMHg1MCAmJiBibG9iW2Jsb2IubCArIDFdID09IDB4NGIpIHJldHVybiBbMCwgMF07XG5cdC8vIGhlYWRlciBzaWduYXR1cmUgOFxuXHRibG9iLmNoayhIRUFERVJfU0lHTkFUVVJFLCAnSGVhZGVyIFNpZ25hdHVyZTogJyk7XG5cblx0Ly8gY2xzaWQgMTZcblx0Ly9ibG9iLmNoayhIRUFERVJfQ0xTSUQsICdDTFNJRDogJyk7XG5cdGJsb2IubCArPSAxNjtcblxuXHQvLyBtaW5vciB2ZXJzaW9uIDJcblx0dmFyIG12ZXIvKjpudW1iZXIqLyA9IGJsb2IucmVhZF9zaGlmdCgyLCAndScpO1xuXG5cdHJldHVybiBbYmxvYi5yZWFkX3NoaWZ0KDIsJ3UnKSwgbXZlcl07XG59XG5mdW5jdGlvbiBjaGVja19zaGlmdHMoYmxvYi8qOkNGQmxvYiovLCBtdmVyLyo6bnVtYmVyKi8pLyo6dm9pZCovIHtcblx0dmFyIHNoaWZ0ID0gMHgwOTtcblxuXHQvLyBCeXRlIE9yZGVyXG5cdC8vYmxvYi5jaGsoJ2ZlZmYnLCAnQnl0ZSBPcmRlcjogJyk7IC8vIG5vdGU6IHNvbWUgd3JpdGVycyBwdXQgMHhmZmZmXG5cdGJsb2IubCArPSAyO1xuXG5cdC8vIFNlY3RvciBTaGlmdFxuXHRzd2l0Y2goKHNoaWZ0ID0gYmxvYi5yZWFkX3NoaWZ0KDIpKSkge1xuXHRcdGNhc2UgMHgwOTogaWYobXZlciAhPSAzKSB0aHJvdyBuZXcgRXJyb3IoJ1NlY3RvciBTaGlmdDogRXhwZWN0ZWQgOSBzYXcgJyArIHNoaWZ0KTsgYnJlYWs7XG5cdFx0Y2FzZSAweDBjOiBpZihtdmVyICE9IDQpIHRocm93IG5ldyBFcnJvcignU2VjdG9yIFNoaWZ0OiBFeHBlY3RlZCAxMiBzYXcgJyArIHNoaWZ0KTsgYnJlYWs7XG5cdFx0ZGVmYXVsdDogdGhyb3cgbmV3IEVycm9yKCdTZWN0b3IgU2hpZnQ6IEV4cGVjdGVkIDkgb3IgMTIgc2F3ICcgKyBzaGlmdCk7XG5cdH1cblxuXHQvLyBNaW5pIFNlY3RvciBTaGlmdFxuXHRibG9iLmNoaygnMDYwMCcsICdNaW5pIFNlY3RvciBTaGlmdDogJyk7XG5cblx0Ly8gUmVzZXJ2ZWRcblx0YmxvYi5jaGsoJzAwMDAwMDAwMDAwMCcsICdSZXNlcnZlZDogJyk7XG59XG5cbi8qKiBCcmVhayB0aGUgZmlsZSB1cCBpbnRvIHNlY3RvcnMgKi9cbmZ1bmN0aW9uIHNlY3RvcmlmeShmaWxlLyo6UmF3Qnl0ZXMqLywgc3N6Lyo6bnVtYmVyKi8pLyo6QXJyYXk8UmF3Qnl0ZXM+Ki8ge1xuXHR2YXIgbnNlY3RvcnMgPSBNYXRoLmNlaWwoZmlsZS5sZW5ndGgvc3N6KS0xO1xuXHR2YXIgc2VjdG9ycy8qOkFycmF5PFJhd0J5dGVzPiovID0gW107XG5cdGZvcih2YXIgaT0xOyBpIDwgbnNlY3RvcnM7ICsraSkgc2VjdG9yc1tpLTFdID0gZmlsZS5zbGljZShpKnNzeiwoaSsxKSpzc3opO1xuXHRzZWN0b3JzW25zZWN0b3JzLTFdID0gZmlsZS5zbGljZShuc2VjdG9ycypzc3opO1xuXHRyZXR1cm4gc2VjdG9ycztcbn1cblxuLyogW01TLUNGQl0gMi42LjQgUmVkLUJsYWNrIFRyZWUgKi9cbmZ1bmN0aW9uIGJ1aWxkX2Z1bGxfcGF0aHMoRkkvKjpDRkJGaWxlSW5kZXgqLywgRlAvKjpBcnJheTxzdHJpbmc+Ki8sIFBhdGhzLyo6QXJyYXk8c3RyaW5nPiovKS8qOnZvaWQqLyB7XG5cdHZhciBpID0gMCwgTCA9IDAsIFIgPSAwLCBDID0gMCwgaiA9IDAsIHBsID0gUGF0aHMubGVuZ3RoO1xuXHR2YXIgZGFkLyo6QXJyYXk8bnVtYmVyPiovID0gW10sIHEvKjpBcnJheTxudW1iZXI+Ki8gPSBbXTtcblxuXHRmb3IoOyBpIDwgcGw7ICsraSkgeyBkYWRbaV09cVtpXT1pOyBGUFtpXT1QYXRoc1tpXTsgfVxuXG5cdGZvcig7IGogPCBxLmxlbmd0aDsgKytqKSB7XG5cdFx0aSA9IHFbal07XG5cdFx0TCA9IEZJW2ldLkw7IFIgPSBGSVtpXS5SOyBDID0gRklbaV0uQztcblx0XHRpZihkYWRbaV0gPT09IGkpIHtcblx0XHRcdGlmKEwgIT09IC0xIC8qTk9TVFJFQU0qLyAmJiBkYWRbTF0gIT09IEwpIGRhZFtpXSA9IGRhZFtMXTtcblx0XHRcdGlmKFIgIT09IC0xICYmIGRhZFtSXSAhPT0gUikgZGFkW2ldID0gZGFkW1JdO1xuXHRcdH1cblx0XHRpZihDICE9PSAtMSAvKk5PU1RSRUFNKi8pIGRhZFtDXSA9IGk7XG5cdFx0aWYoTCAhPT0gLTEgJiYgaSAhPSBkYWRbaV0pIHsgZGFkW0xdID0gZGFkW2ldOyBpZihxLmxhc3RJbmRleE9mKEwpIDwgaikgcS5wdXNoKEwpOyB9XG5cdFx0aWYoUiAhPT0gLTEgJiYgaSAhPSBkYWRbaV0pIHsgZGFkW1JdID0gZGFkW2ldOyBpZihxLmxhc3RJbmRleE9mKFIpIDwgaikgcS5wdXNoKFIpOyB9XG5cdH1cblx0Zm9yKGk9MTsgaSA8IHBsOyArK2kpIGlmKGRhZFtpXSA9PT0gaSkge1xuXHRcdGlmKFIgIT09IC0xIC8qTk9TVFJFQU0qLyAmJiBkYWRbUl0gIT09IFIpIGRhZFtpXSA9IGRhZFtSXTtcblx0XHRlbHNlIGlmKEwgIT09IC0xICYmIGRhZFtMXSAhPT0gTCkgZGFkW2ldID0gZGFkW0xdO1xuXHR9XG5cblx0Zm9yKGk9MTsgaSA8IHBsOyArK2kpIHtcblx0XHRpZihGSVtpXS50eXBlID09PSAwIC8qIHVua25vd24gKi8pIGNvbnRpbnVlO1xuXHRcdGogPSBpO1xuXHRcdGlmKGogIT0gZGFkW2pdKSBkbyB7XG5cdFx0XHRqID0gZGFkW2pdO1xuXHRcdFx0RlBbaV0gPSBGUFtqXSArIFwiL1wiICsgRlBbaV07XG5cdFx0fSB3aGlsZSAoaiAhPT0gMCAmJiAtMSAhPT0gZGFkW2pdICYmIGogIT0gZGFkW2pdKTtcblx0XHRkYWRbaV0gPSAtMTtcblx0fVxuXG5cdEZQWzBdICs9IFwiL1wiO1xuXHRmb3IoaT0xOyBpIDwgcGw7ICsraSkge1xuXHRcdGlmKEZJW2ldLnR5cGUgIT09IDIgLyogc3RyZWFtICovKSBGUFtpXSArPSBcIi9cIjtcblx0fVxufVxuXG5mdW5jdGlvbiBnZXRfbWZhdF9lbnRyeShlbnRyeS8qOkNGQkVudHJ5Ki8sIHBheWxvYWQvKjpSYXdCeXRlcyovLCBtaW5pLyo6P1Jhd0J5dGVzKi8pLyo6Q0ZCbG9iKi8ge1xuXHR2YXIgc3RhcnQgPSBlbnRyeS5zdGFydCwgc2l6ZSA9IGVudHJ5LnNpemU7XG5cdC8vcmV0dXJuIChwYXlsb2FkLnNsaWNlKHN0YXJ0Kk1TU1osIHN0YXJ0Kk1TU1ogKyBzaXplKS8qOmFueSovKTtcblx0dmFyIG8gPSBbXTtcblx0dmFyIGlkeCA9IHN0YXJ0O1xuXHR3aGlsZShtaW5pICYmIHNpemUgPiAwICYmIGlkeCA+PSAwKSB7XG5cdFx0by5wdXNoKHBheWxvYWQuc2xpY2UoaWR4ICogTVNTWiwgaWR4ICogTVNTWiArIE1TU1opKTtcblx0XHRzaXplIC09IE1TU1o7XG5cdFx0aWR4ID0gX19yZWFkSW50MzJMRShtaW5pLCBpZHggKiA0KTtcblx0fVxuXHRpZihvLmxlbmd0aCA9PT0gMCkgcmV0dXJuIChuZXdfYnVmKDApLyo6YW55Ki8pO1xuXHRyZXR1cm4gKGJjb25jYXQobykuc2xpY2UoMCwgZW50cnkuc2l6ZSkvKjphbnkqLyk7XG59XG5cbi8qKiBDaGFzZSBkb3duIHRoZSByZXN0IG9mIHRoZSBESUZBVCBjaGFpbiB0byBidWlsZCBhIGNvbXByZWhlbnNpdmUgbGlzdFxuICAgIERJRkFUIGNoYWlucyBieSBzdG9yaW5nIHRoZSBuZXh0IHNlY3RvciBudW1iZXIgYXMgdGhlIGxhc3QgMzIgYml0cyAqL1xuZnVuY3Rpb24gc2xldXRoX2ZhdChpZHgvKjpudW1iZXIqLywgY250Lyo6bnVtYmVyKi8sIHNlY3RvcnMvKjpBcnJheTxSYXdCeXRlcz4qLywgc3N6Lyo6bnVtYmVyKi8sIGZhdF9hZGRycykvKjp2b2lkKi8ge1xuXHR2YXIgcS8qOm51bWJlciovID0gRU5ET0ZDSEFJTjtcblx0aWYoaWR4ID09PSBFTkRPRkNIQUlOKSB7XG5cdFx0aWYoY250ICE9PSAwKSB0aHJvdyBuZXcgRXJyb3IoXCJESUZBVCBjaGFpbiBzaG9ydGVyIHRoYW4gZXhwZWN0ZWRcIik7XG5cdH0gZWxzZSBpZihpZHggIT09IC0xIC8qRlJFRVNFQ1QqLykge1xuXHRcdHZhciBzZWN0b3IgPSBzZWN0b3JzW2lkeF0sIG0gPSAoc3N6Pj4+MiktMTtcblx0XHRpZighc2VjdG9yKSByZXR1cm47XG5cdFx0Zm9yKHZhciBpID0gMDsgaSA8IG07ICsraSkge1xuXHRcdFx0aWYoKHEgPSBfX3JlYWRJbnQzMkxFKHNlY3RvcixpKjQpKSA9PT0gRU5ET0ZDSEFJTikgYnJlYWs7XG5cdFx0XHRmYXRfYWRkcnMucHVzaChxKTtcblx0XHR9XG5cdFx0c2xldXRoX2ZhdChfX3JlYWRJbnQzMkxFKHNlY3Rvcixzc3otNCksY250IC0gMSwgc2VjdG9ycywgc3N6LCBmYXRfYWRkcnMpO1xuXHR9XG59XG5cbi8qKiBGb2xsb3cgdGhlIGxpbmtlZCBsaXN0IG9mIHNlY3RvcnMgZm9yIGEgZ2l2ZW4gc3RhcnRpbmcgcG9pbnQgKi9cbmZ1bmN0aW9uIGdldF9zZWN0b3JfbGlzdChzZWN0b3JzLyo6QXJyYXk8UmF3Qnl0ZXM+Ki8sIHN0YXJ0Lyo6bnVtYmVyKi8sIGZhdF9hZGRycy8qOkFycmF5PG51bWJlcj4qLywgc3N6Lyo6bnVtYmVyKi8sIGNoa2QvKjo/QXJyYXk8Ym9vbGVhbj4qLykvKjpTZWN0b3JFbnRyeSovIHtcblx0dmFyIGJ1Zi8qOkFycmF5PG51bWJlcj4qLyA9IFtdLCBidWZfY2hhaW4vKjpBcnJheTxhbnk+Ki8gPSBbXTtcblx0aWYoIWNoa2QpIGNoa2QgPSBbXTtcblx0dmFyIG1vZHVsdXMgPSBzc3ogLSAxLCBqID0gMCwgamogPSAwO1xuXHRmb3Ioaj1zdGFydDsgaj49MDspIHtcblx0XHRjaGtkW2pdID0gdHJ1ZTtcblx0XHRidWZbYnVmLmxlbmd0aF0gPSBqO1xuXHRcdGJ1Zl9jaGFpbi5wdXNoKHNlY3RvcnNbal0pO1xuXHRcdHZhciBhZGRyID0gZmF0X2FkZHJzW01hdGguZmxvb3Ioaio0L3NzeildO1xuXHRcdGpqID0gKChqKjQpICYgbW9kdWx1cyk7XG5cdFx0aWYoc3N6IDwgNCArIGpqKSB0aHJvdyBuZXcgRXJyb3IoXCJGQVQgYm91bmRhcnkgY3Jvc3NlZDogXCIgKyBqICsgXCIgNCBcIitzc3opO1xuXHRcdGlmKCFzZWN0b3JzW2FkZHJdKSBicmVhaztcblx0XHRqID0gX19yZWFkSW50MzJMRShzZWN0b3JzW2FkZHJdLCBqaik7XG5cdH1cblx0cmV0dXJuIHtub2RlczogYnVmLCBkYXRhOl9fdG9CdWZmZXIoW2J1Zl9jaGFpbl0pfTtcbn1cblxuLyoqIENoYXNlIGRvd24gdGhlIHNlY3RvciBsaW5rZWQgbGlzdHMgKi9cbmZ1bmN0aW9uIG1ha2Vfc2VjdG9yX2xpc3Qoc2VjdG9ycy8qOkFycmF5PFJhd0J5dGVzPiovLCBkaXJfc3RhcnQvKjpudW1iZXIqLywgZmF0X2FkZHJzLyo6QXJyYXk8bnVtYmVyPiovLCBzc3ovKjpudW1iZXIqLykvKjpTZWN0b3JMaXN0Ki8ge1xuXHR2YXIgc2wgPSBzZWN0b3JzLmxlbmd0aCwgc2VjdG9yX2xpc3QvKjpTZWN0b3JMaXN0Ki8gPSAoW10vKjphbnkqLyk7XG5cdHZhciBjaGtkLyo6QXJyYXk8Ym9vbGVhbj4qLyA9IFtdLCBidWYvKjpBcnJheTxudW1iZXI+Ki8gPSBbXSwgYnVmX2NoYWluLyo6QXJyYXk8UmF3Qnl0ZXM+Ki8gPSBbXTtcblx0dmFyIG1vZHVsdXMgPSBzc3ogLSAxLCBpPTAsIGo9MCwgaz0wLCBqaj0wO1xuXHRmb3IoaT0wOyBpIDwgc2w7ICsraSkge1xuXHRcdGJ1ZiA9IChbXS8qOkFycmF5PG51bWJlcj4qLyk7XG5cdFx0ayA9IChpICsgZGlyX3N0YXJ0KTsgaWYoayA+PSBzbCkgay09c2w7XG5cdFx0aWYoY2hrZFtrXSkgY29udGludWU7XG5cdFx0YnVmX2NoYWluID0gW107XG5cdFx0dmFyIHNlZW4gPSBbXTtcblx0XHRmb3Ioaj1rOyBqPj0wOykge1xuXHRcdFx0c2VlbltqXSA9IHRydWU7XG5cdFx0XHRjaGtkW2pdID0gdHJ1ZTtcblx0XHRcdGJ1ZltidWYubGVuZ3RoXSA9IGo7XG5cdFx0XHRidWZfY2hhaW4ucHVzaChzZWN0b3JzW2pdKTtcblx0XHRcdHZhciBhZGRyLyo6bnVtYmVyKi8gPSBmYXRfYWRkcnNbTWF0aC5mbG9vcihqKjQvc3N6KV07XG5cdFx0XHRqaiA9ICgoaio0KSAmIG1vZHVsdXMpO1xuXHRcdFx0aWYoc3N6IDwgNCArIGpqKSB0aHJvdyBuZXcgRXJyb3IoXCJGQVQgYm91bmRhcnkgY3Jvc3NlZDogXCIgKyBqICsgXCIgNCBcIitzc3opO1xuXHRcdFx0aWYoIXNlY3RvcnNbYWRkcl0pIGJyZWFrO1xuXHRcdFx0aiA9IF9fcmVhZEludDMyTEUoc2VjdG9yc1thZGRyXSwgamopO1xuXHRcdFx0aWYoc2VlbltqXSkgYnJlYWs7XG5cdFx0fVxuXHRcdHNlY3Rvcl9saXN0W2tdID0gKHtub2RlczogYnVmLCBkYXRhOl9fdG9CdWZmZXIoW2J1Zl9jaGFpbl0pfS8qOlNlY3RvckVudHJ5Ki8pO1xuXHR9XG5cdHJldHVybiBzZWN0b3JfbGlzdDtcbn1cblxuLyogW01TLUNGQl0gMi42LjEgQ29tcG91bmQgRmlsZSBEaXJlY3RvcnkgRW50cnkgKi9cbmZ1bmN0aW9uIHJlYWRfZGlyZWN0b3J5KGRpcl9zdGFydC8qOm51bWJlciovLCBzZWN0b3JfbGlzdC8qOlNlY3Rvckxpc3QqLywgc2VjdG9ycy8qOkFycmF5PFJhd0J5dGVzPiovLCBQYXRocy8qOkFycmF5PHN0cmluZz4qLywgbm1mcywgZmlsZXMsIEZpbGVJbmRleCwgbWluaSkge1xuXHR2YXIgbWluaWZhdF9zdG9yZSA9IDAsIHBsID0gKFBhdGhzLmxlbmd0aD8yOjApO1xuXHR2YXIgc2VjdG9yID0gc2VjdG9yX2xpc3RbZGlyX3N0YXJ0XS5kYXRhO1xuXHR2YXIgaSA9IDAsIG5hbWVsZW4gPSAwLCBuYW1lO1xuXHRmb3IoOyBpIDwgc2VjdG9yLmxlbmd0aDsgaSs9IDEyOCkge1xuXHRcdHZhciBibG9iLyo6Q0ZCbG9iKi8gPSAvKjo6KCovc2VjdG9yLnNsaWNlKGksIGkrMTI4KS8qOjogOmFueSkqLztcblx0XHRwcmVwX2Jsb2IoYmxvYiwgNjQpO1xuXHRcdG5hbWVsZW4gPSBibG9iLnJlYWRfc2hpZnQoMik7XG5cdFx0bmFtZSA9IF9fdXRmMTZsZShibG9iLDAsbmFtZWxlbi1wbCk7XG5cdFx0UGF0aHMucHVzaChuYW1lKTtcblx0XHR2YXIgby8qOkNGQkVudHJ5Ki8gPSAoe1xuXHRcdFx0bmFtZTogIG5hbWUsXG5cdFx0XHR0eXBlOiAgYmxvYi5yZWFkX3NoaWZ0KDEpLFxuXHRcdFx0Y29sb3I6IGJsb2IucmVhZF9zaGlmdCgxKSxcblx0XHRcdEw6ICAgICBibG9iLnJlYWRfc2hpZnQoNCwgJ2knKSxcblx0XHRcdFI6ICAgICBibG9iLnJlYWRfc2hpZnQoNCwgJ2knKSxcblx0XHRcdEM6ICAgICBibG9iLnJlYWRfc2hpZnQoNCwgJ2knKSxcblx0XHRcdGNsc2lkOiBibG9iLnJlYWRfc2hpZnQoMTYpLFxuXHRcdFx0c3RhdGU6IGJsb2IucmVhZF9zaGlmdCg0LCAnaScpLFxuXHRcdFx0c3RhcnQ6IDAsXG5cdFx0XHRzaXplOiAwXG5cdFx0fSk7XG5cdFx0dmFyIGN0aW1lLyo6bnVtYmVyKi8gPSBibG9iLnJlYWRfc2hpZnQoMikgKyBibG9iLnJlYWRfc2hpZnQoMikgKyBibG9iLnJlYWRfc2hpZnQoMikgKyBibG9iLnJlYWRfc2hpZnQoMik7XG5cdFx0aWYoY3RpbWUgIT09IDApIG8uY3QgPSByZWFkX2RhdGUoYmxvYiwgYmxvYi5sLTgpO1xuXHRcdHZhciBtdGltZS8qOm51bWJlciovID0gYmxvYi5yZWFkX3NoaWZ0KDIpICsgYmxvYi5yZWFkX3NoaWZ0KDIpICsgYmxvYi5yZWFkX3NoaWZ0KDIpICsgYmxvYi5yZWFkX3NoaWZ0KDIpO1xuXHRcdGlmKG10aW1lICE9PSAwKSBvLm10ID0gcmVhZF9kYXRlKGJsb2IsIGJsb2IubC04KTtcblx0XHRvLnN0YXJ0ID0gYmxvYi5yZWFkX3NoaWZ0KDQsICdpJyk7XG5cdFx0by5zaXplID0gYmxvYi5yZWFkX3NoaWZ0KDQsICdpJyk7XG5cdFx0aWYoby5zaXplIDwgMCAmJiBvLnN0YXJ0IDwgMCkgeyBvLnNpemUgPSBvLnR5cGUgPSAwOyBvLnN0YXJ0ID0gRU5ET0ZDSEFJTjsgby5uYW1lID0gXCJcIjsgfVxuXHRcdGlmKG8udHlwZSA9PT0gNSkgeyAvKiByb290ICovXG5cdFx0XHRtaW5pZmF0X3N0b3JlID0gby5zdGFydDtcblx0XHRcdGlmKG5tZnMgPiAwICYmIG1pbmlmYXRfc3RvcmUgIT09IEVORE9GQ0hBSU4pIHNlY3Rvcl9saXN0W21pbmlmYXRfc3RvcmVdLm5hbWUgPSBcIiFTdHJlYW1EYXRhXCI7XG5cdFx0XHQvKm1pbmlmYXRfc2l6ZSA9IG8uc2l6ZTsqL1xuXHRcdH0gZWxzZSBpZihvLnNpemUgPj0gNDA5NiAvKiBNU0NTWiAqLykge1xuXHRcdFx0by5zdG9yYWdlID0gJ2ZhdCc7XG5cdFx0XHRpZihzZWN0b3JfbGlzdFtvLnN0YXJ0XSA9PT0gdW5kZWZpbmVkKSBzZWN0b3JfbGlzdFtvLnN0YXJ0XSA9IGdldF9zZWN0b3JfbGlzdChzZWN0b3JzLCBvLnN0YXJ0LCBzZWN0b3JfbGlzdC5mYXRfYWRkcnMsIHNlY3Rvcl9saXN0LnNzeik7XG5cdFx0XHRzZWN0b3JfbGlzdFtvLnN0YXJ0XS5uYW1lID0gby5uYW1lO1xuXHRcdFx0by5jb250ZW50ID0gKHNlY3Rvcl9saXN0W28uc3RhcnRdLmRhdGEuc2xpY2UoMCxvLnNpemUpLyo6YW55Ki8pO1xuXHRcdH0gZWxzZSB7XG5cdFx0XHRvLnN0b3JhZ2UgPSAnbWluaWZhdCc7XG5cdFx0XHRpZihvLnNpemUgPCAwKSBvLnNpemUgPSAwO1xuXHRcdFx0ZWxzZSBpZihtaW5pZmF0X3N0b3JlICE9PSBFTkRPRkNIQUlOICYmIG8uc3RhcnQgIT09IEVORE9GQ0hBSU4gJiYgc2VjdG9yX2xpc3RbbWluaWZhdF9zdG9yZV0pIHtcblx0XHRcdFx0by5jb250ZW50ID0gZ2V0X21mYXRfZW50cnkobywgc2VjdG9yX2xpc3RbbWluaWZhdF9zdG9yZV0uZGF0YSwgKHNlY3Rvcl9saXN0W21pbmldfHx7fSkuZGF0YSk7XG5cdFx0XHR9XG5cdFx0fVxuXHRcdGlmKG8uY29udGVudCkgcHJlcF9ibG9iKG8uY29udGVudCwgMCk7XG5cdFx0ZmlsZXNbbmFtZV0gPSBvO1xuXHRcdEZpbGVJbmRleC5wdXNoKG8pO1xuXHR9XG59XG5cbmZ1bmN0aW9uIHJlYWRfZGF0ZShibG9iLyo6UmF3Qnl0ZXN8Q0ZCbG9iKi8sIG9mZnNldC8qOm51bWJlciovKS8qOkRhdGUqLyB7XG5cdHJldHVybiBuZXcgRGF0ZSgoICggKF9fcmVhZFVJbnQzMkxFKGJsb2Isb2Zmc2V0KzQpLzFlNykqTWF0aC5wb3coMiwzMikrX19yZWFkVUludDMyTEUoYmxvYixvZmZzZXQpLzFlNyApIC0gMTE2NDQ0NzM2MDApKjEwMDApO1xufVxuXG5mdW5jdGlvbiByZWFkX2ZpbGUoZmlsZW5hbWUvKjpzdHJpbmcqLywgb3B0aW9ucy8qOkNGQlJlYWRPcHRzKi8pIHtcblx0Z2V0X2ZzKCk7XG5cdHJldHVybiBwYXJzZShmcy5yZWFkRmlsZVN5bmMoZmlsZW5hbWUpLCBvcHRpb25zKTtcbn1cblxuZnVuY3Rpb24gcmVhZChibG9iLyo6UmF3Qnl0ZXN8c3RyaW5nKi8sIG9wdGlvbnMvKjpDRkJSZWFkT3B0cyovKSB7XG5cdHZhciB0eXBlID0gb3B0aW9ucyAmJiBvcHRpb25zLnR5cGU7XG5cdGlmKCF0eXBlKSB7XG5cdFx0aWYoaGFzX2J1ZiAmJiBCdWZmZXIuaXNCdWZmZXIoYmxvYikpIHR5cGUgPSBcImJ1ZmZlclwiO1xuXHR9XG5cdHN3aXRjaCh0eXBlIHx8IFwiYmFzZTY0XCIpIHtcblx0XHRjYXNlIFwiZmlsZVwiOiAvKjo6IGlmKHR5cGVvZiBibG9iICE9PSAnc3RyaW5nJykgdGhyb3cgXCJNdXN0IHBhc3MgYSBmaWxlbmFtZSB3aGVuIHR5cGU9J2ZpbGUnXCI7ICovcmV0dXJuIHJlYWRfZmlsZShibG9iLCBvcHRpb25zKTtcblx0XHRjYXNlIFwiYmFzZTY0XCI6IC8qOjogaWYodHlwZW9mIGJsb2IgIT09ICdzdHJpbmcnKSB0aHJvdyBcIk11c3QgcGFzcyBhIGJhc2U2NC1lbmNvZGVkIGJpbmFyeSBzdHJpbmcgd2hlbiB0eXBlPSdmaWxlJ1wiOyAqL3JldHVybiBwYXJzZShzMmEoQmFzZTY0X2RlY29kZShibG9iKSksIG9wdGlvbnMpO1xuXHRcdGNhc2UgXCJiaW5hcnlcIjogLyo6OiBpZih0eXBlb2YgYmxvYiAhPT0gJ3N0cmluZycpIHRocm93IFwiTXVzdCBwYXNzIGEgYmluYXJ5IHN0cmluZyB3aGVuIHR5cGU9J2ZpbGUnXCI7ICovcmV0dXJuIHBhcnNlKHMyYShibG9iKSwgb3B0aW9ucyk7XG5cdH1cblx0cmV0dXJuIHBhcnNlKC8qOjp0eXBlb2YgYmxvYiA9PSAnc3RyaW5nJyA/IG5ldyBCdWZmZXIoYmxvYiwgJ3V0Zi04JykgOiAqL2Jsb2IsIG9wdGlvbnMpO1xufVxuXG5mdW5jdGlvbiBpbml0X2NmYihjZmIvKjpDRkJDb250YWluZXIqLywgb3B0cy8qOj9hbnkqLykvKjp2b2lkKi8ge1xuXHR2YXIgbyA9IG9wdHMgfHwge30sIHJvb3QgPSBvLnJvb3QgfHwgXCJSb290IEVudHJ5XCI7XG5cdGlmKCFjZmIuRnVsbFBhdGhzKSBjZmIuRnVsbFBhdGhzID0gW107XG5cdGlmKCFjZmIuRmlsZUluZGV4KSBjZmIuRmlsZUluZGV4ID0gW107XG5cdGlmKGNmYi5GdWxsUGF0aHMubGVuZ3RoICE9PSBjZmIuRmlsZUluZGV4Lmxlbmd0aCkgdGhyb3cgbmV3IEVycm9yKFwiaW5jb25zaXN0ZW50IENGQiBzdHJ1Y3R1cmVcIik7XG5cdGlmKGNmYi5GdWxsUGF0aHMubGVuZ3RoID09PSAwKSB7XG5cdFx0Y2ZiLkZ1bGxQYXRoc1swXSA9IHJvb3QgKyBcIi9cIjtcblx0XHRjZmIuRmlsZUluZGV4WzBdID0gKHsgbmFtZTogcm9vdCwgdHlwZTogNSB9Lyo6YW55Ki8pO1xuXHR9XG5cdGlmKG8uQ0xTSUQpIGNmYi5GaWxlSW5kZXhbMF0uY2xzaWQgPSBvLkNMU0lEO1xuXHRzZWVkX2NmYihjZmIpO1xufVxuZnVuY3Rpb24gc2VlZF9jZmIoY2ZiLyo6Q0ZCQ29udGFpbmVyKi8pLyo6dm9pZCovIHtcblx0dmFyIG5tID0gXCJcXHUwMDAxU2gzM3RKNVwiO1xuXHRpZihDRkIuZmluZChjZmIsIFwiL1wiICsgbm0pKSByZXR1cm47XG5cdHZhciBwID0gbmV3X2J1Zig0KTsgcFswXSA9IDU1OyBwWzFdID0gcFszXSA9IDUwOyBwWzJdID0gNTQ7XG5cdGNmYi5GaWxlSW5kZXgucHVzaCgoeyBuYW1lOiBubSwgdHlwZTogMiwgY29udGVudDpwLCBzaXplOjQsIEw6NjksIFI6NjksIEM6NjkgfS8qOmFueSovKSk7XG5cdGNmYi5GdWxsUGF0aHMucHVzaChjZmIuRnVsbFBhdGhzWzBdICsgbm0pO1xuXHRyZWJ1aWxkX2NmYihjZmIpO1xufVxuZnVuY3Rpb24gcmVidWlsZF9jZmIoY2ZiLyo6Q0ZCQ29udGFpbmVyKi8sIGYvKjo/Ym9vbGVhbiovKS8qOnZvaWQqLyB7XG5cdGluaXRfY2ZiKGNmYik7XG5cdHZhciBnYyA9IGZhbHNlLCBzID0gZmFsc2U7XG5cdGZvcih2YXIgaSA9IGNmYi5GdWxsUGF0aHMubGVuZ3RoIC0gMTsgaSA+PSAwOyAtLWkpIHtcblx0XHR2YXIgX2ZpbGUgPSBjZmIuRmlsZUluZGV4W2ldO1xuXHRcdHN3aXRjaChfZmlsZS50eXBlKSB7XG5cdFx0XHRjYXNlIDA6XG5cdFx0XHRcdGlmKHMpIGdjID0gdHJ1ZTtcblx0XHRcdFx0ZWxzZSB7IGNmYi5GaWxlSW5kZXgucG9wKCk7IGNmYi5GdWxsUGF0aHMucG9wKCk7IH1cblx0XHRcdFx0YnJlYWs7XG5cdFx0XHRjYXNlIDE6IGNhc2UgMjogY2FzZSA1OlxuXHRcdFx0XHRzID0gdHJ1ZTtcblx0XHRcdFx0aWYoaXNOYU4oX2ZpbGUuUiAqIF9maWxlLkwgKiBfZmlsZS5DKSkgZ2MgPSB0cnVlO1xuXHRcdFx0XHRpZihfZmlsZS5SID4gLTEgJiYgX2ZpbGUuTCA+IC0xICYmIF9maWxlLlIgPT0gX2ZpbGUuTCkgZ2MgPSB0cnVlO1xuXHRcdFx0XHRicmVhaztcblx0XHRcdGRlZmF1bHQ6IGdjID0gdHJ1ZTsgYnJlYWs7XG5cdFx0fVxuXHR9XG5cdGlmKCFnYyAmJiAhZikgcmV0dXJuO1xuXG5cdHZhciBub3cgPSBuZXcgRGF0ZSgxOTg3LCAxLCAxOSksIGogPSAwO1xuXHQvLyBUcmFjayB3aGljaCBuYW1lcyBleGlzdFxuXHR2YXIgZnVsbFBhdGhzID0gT2JqZWN0LmNyZWF0ZSA/IE9iamVjdC5jcmVhdGUobnVsbCkgOiB7fTtcblx0dmFyIGRhdGEvKjpBcnJheTxbc3RyaW5nLCBDRkJFbnRyeV0+Ki8gPSBbXTtcblx0Zm9yKGkgPSAwOyBpIDwgY2ZiLkZ1bGxQYXRocy5sZW5ndGg7ICsraSkge1xuXHRcdGZ1bGxQYXRoc1tjZmIuRnVsbFBhdGhzW2ldXSA9IHRydWU7XG5cdFx0aWYoY2ZiLkZpbGVJbmRleFtpXS50eXBlID09PSAwKSBjb250aW51ZTtcblx0XHRkYXRhLnB1c2goW2NmYi5GdWxsUGF0aHNbaV0sIGNmYi5GaWxlSW5kZXhbaV1dKTtcblx0fVxuXHRmb3IoaSA9IDA7IGkgPCBkYXRhLmxlbmd0aDsgKytpKSB7XG5cdFx0dmFyIGRhZCA9IGRpcm5hbWUoZGF0YVtpXVswXSk7XG5cdFx0cyA9IGZ1bGxQYXRoc1tkYWRdO1xuXHRcdGlmKCFzKSB7XG5cdFx0XHRkYXRhLnB1c2goW2RhZCwgKHtcblx0XHRcdFx0bmFtZTogZmlsZW5hbWUoZGFkKS5yZXBsYWNlKFwiL1wiLFwiXCIpLFxuXHRcdFx0XHR0eXBlOiAxLFxuXHRcdFx0XHRjbHNpZDogSEVBREVSX0NMU0lELFxuXHRcdFx0XHRjdDogbm93LCBtdDogbm93LFxuXHRcdFx0XHRjb250ZW50OiBudWxsXG5cdFx0XHR9Lyo6YW55Ki8pXSk7XG5cdFx0XHQvLyBBZGQgbmFtZSB0byBzZXRcblx0XHRcdGZ1bGxQYXRoc1tkYWRdID0gdHJ1ZTtcblx0XHR9XG5cdH1cblxuXHRkYXRhLnNvcnQoZnVuY3Rpb24oeCx5KSB7IHJldHVybiBuYW1lY21wKHhbMF0sIHlbMF0pOyB9KTtcblx0Y2ZiLkZ1bGxQYXRocyA9IFtdOyBjZmIuRmlsZUluZGV4ID0gW107XG5cdGZvcihpID0gMDsgaSA8IGRhdGEubGVuZ3RoOyArK2kpIHsgY2ZiLkZ1bGxQYXRoc1tpXSA9IGRhdGFbaV1bMF07IGNmYi5GaWxlSW5kZXhbaV0gPSBkYXRhW2ldWzFdOyB9XG5cdGZvcihpID0gMDsgaSA8IGRhdGEubGVuZ3RoOyArK2kpIHtcblx0XHR2YXIgZWx0ID0gY2ZiLkZpbGVJbmRleFtpXTtcblx0XHR2YXIgbm0gPSBjZmIuRnVsbFBhdGhzW2ldO1xuXG5cdFx0ZWx0Lm5hbWUgPSAgZmlsZW5hbWUobm0pLnJlcGxhY2UoXCIvXCIsXCJcIik7XG5cdFx0ZWx0LkwgPSBlbHQuUiA9IGVsdC5DID0gLShlbHQuY29sb3IgPSAxKTtcblx0XHRlbHQuc2l6ZSA9IGVsdC5jb250ZW50ID8gZWx0LmNvbnRlbnQubGVuZ3RoIDogMDtcblx0XHRlbHQuc3RhcnQgPSAwO1xuXHRcdGVsdC5jbHNpZCA9IChlbHQuY2xzaWQgfHwgSEVBREVSX0NMU0lEKTtcblx0XHRpZihpID09PSAwKSB7XG5cdFx0XHRlbHQuQyA9IGRhdGEubGVuZ3RoID4gMSA/IDEgOiAtMTtcblx0XHRcdGVsdC5zaXplID0gMDtcblx0XHRcdGVsdC50eXBlID0gNTtcblx0XHR9IGVsc2UgaWYobm0uc2xpY2UoLTEpID09IFwiL1wiKSB7XG5cdFx0XHRmb3Ioaj1pKzE7aiA8IGRhdGEubGVuZ3RoOyArK2opIGlmKGRpcm5hbWUoY2ZiLkZ1bGxQYXRoc1tqXSk9PW5tKSBicmVhaztcblx0XHRcdGVsdC5DID0gaiA+PSBkYXRhLmxlbmd0aCA/IC0xIDogajtcblx0XHRcdGZvcihqPWkrMTtqIDwgZGF0YS5sZW5ndGg7ICsraikgaWYoZGlybmFtZShjZmIuRnVsbFBhdGhzW2pdKT09ZGlybmFtZShubSkpIGJyZWFrO1xuXHRcdFx0ZWx0LlIgPSBqID49IGRhdGEubGVuZ3RoID8gLTEgOiBqO1xuXHRcdFx0ZWx0LnR5cGUgPSAxO1xuXHRcdH0gZWxzZSB7XG5cdFx0XHRpZihkaXJuYW1lKGNmYi5GdWxsUGF0aHNbaSsxXXx8XCJcIikgPT0gZGlybmFtZShubSkpIGVsdC5SID0gaSArIDE7XG5cdFx0XHRlbHQudHlwZSA9IDI7XG5cdFx0fVxuXHR9XG5cbn1cblxuZnVuY3Rpb24gX3dyaXRlKGNmYi8qOkNGQkNvbnRhaW5lciovLCBvcHRpb25zLyo6Q0ZCV3JpdGVPcHRzKi8pLyo6UmF3Qnl0ZXN8c3RyaW5nKi8ge1xuXHR2YXIgX29wdHMgPSBvcHRpb25zIHx8IHt9O1xuXHQvKiBNQUQgaXMgb3JkZXItc2Vuc2l0aXZlLCBza2lwIHJlYnVpbGQgYW5kIHNvcnQgKi9cblx0aWYoX29wdHMuZmlsZVR5cGUgPT0gJ21hZCcpIHJldHVybiB3cml0ZV9tYWQoY2ZiLCBfb3B0cyk7XG5cdHJlYnVpbGRfY2ZiKGNmYik7XG5cdHN3aXRjaChfb3B0cy5maWxlVHlwZSkge1xuXHRcdGNhc2UgJ3ppcCc6IHJldHVybiB3cml0ZV96aXAoY2ZiLCBfb3B0cyk7XG5cdFx0Ly9jYXNlICdtYWQnOiByZXR1cm4gd3JpdGVfbWFkKGNmYiwgX29wdHMpO1xuXHR9XG5cdHZhciBMID0gKGZ1bmN0aW9uKGNmYi8qOkNGQkNvbnRhaW5lciovKS8qOkFycmF5PG51bWJlcj4qL3tcblx0XHR2YXIgbWluaV9zaXplID0gMCwgZmF0X3NpemUgPSAwO1xuXHRcdGZvcih2YXIgaSA9IDA7IGkgPCBjZmIuRmlsZUluZGV4Lmxlbmd0aDsgKytpKSB7XG5cdFx0XHR2YXIgZmlsZSA9IGNmYi5GaWxlSW5kZXhbaV07XG5cdFx0XHRpZighZmlsZS5jb250ZW50KSBjb250aW51ZTtcblx0XHRcdC8qOjogaWYoZmlsZS5jb250ZW50ID09IG51bGwpIHRocm93IG5ldyBFcnJvcihcInVucmVhY2hhYmxlXCIpOyAqL1xuXHRcdFx0dmFyIGZsZW4gPSBmaWxlLmNvbnRlbnQubGVuZ3RoO1xuXHRcdFx0aWYoZmxlbiA+IDApe1xuXHRcdFx0XHRpZihmbGVuIDwgMHgxMDAwKSBtaW5pX3NpemUgKz0gKGZsZW4gKyAweDNGKSA+PiA2O1xuXHRcdFx0XHRlbHNlIGZhdF9zaXplICs9IChmbGVuICsgMHgwMUZGKSA+PiA5O1xuXHRcdFx0fVxuXHRcdH1cblx0XHR2YXIgZGlyX2NudCA9IChjZmIuRnVsbFBhdGhzLmxlbmd0aCArMykgPj4gMjtcblx0XHR2YXIgbWluaV9jbnQgPSAobWluaV9zaXplICsgNykgPj4gMztcblx0XHR2YXIgbWZhdF9jbnQgPSAobWluaV9zaXplICsgMHg3RikgPj4gNztcblx0XHR2YXIgZmF0X2Jhc2UgPSBtaW5pX2NudCArIGZhdF9zaXplICsgZGlyX2NudCArIG1mYXRfY250O1xuXHRcdHZhciBmYXRfY250ID0gKGZhdF9iYXNlICsgMHg3RikgPj4gNztcblx0XHR2YXIgZGlmYXRfY250ID0gZmF0X2NudCA8PSAxMDkgPyAwIDogTWF0aC5jZWlsKChmYXRfY250LTEwOSkvMHg3Rik7XG5cdFx0d2hpbGUoKChmYXRfYmFzZSArIGZhdF9jbnQgKyBkaWZhdF9jbnQgKyAweDdGKSA+PiA3KSA+IGZhdF9jbnQpIGRpZmF0X2NudCA9ICsrZmF0X2NudCA8PSAxMDkgPyAwIDogTWF0aC5jZWlsKChmYXRfY250LTEwOSkvMHg3Rik7XG5cdFx0dmFyIEwgPSAgWzEsIGRpZmF0X2NudCwgZmF0X2NudCwgbWZhdF9jbnQsIGRpcl9jbnQsIGZhdF9zaXplLCBtaW5pX3NpemUsIDBdO1xuXHRcdGNmYi5GaWxlSW5kZXhbMF0uc2l6ZSA9IG1pbmlfc2l6ZSA8PCA2O1xuXHRcdExbN10gPSAoY2ZiLkZpbGVJbmRleFswXS5zdGFydD1MWzBdK0xbMV0rTFsyXStMWzNdK0xbNF0rTFs1XSkrKChMWzZdKzcpID4+IDMpO1xuXHRcdHJldHVybiBMO1xuXHR9KShjZmIpO1xuXHR2YXIgbyA9IG5ld19idWYoTFs3XSA8PCA5KTtcblx0dmFyIGkgPSAwLCBUID0gMDtcblx0e1xuXHRcdGZvcihpID0gMDsgaSA8IDg7ICsraSkgby53cml0ZV9zaGlmdCgxLCBIRUFERVJfU0lHW2ldKTtcblx0XHRmb3IoaSA9IDA7IGkgPCA4OyArK2kpIG8ud3JpdGVfc2hpZnQoMiwgMCk7XG5cdFx0by53cml0ZV9zaGlmdCgyLCAweDAwM0UpO1xuXHRcdG8ud3JpdGVfc2hpZnQoMiwgMHgwMDAzKTtcblx0XHRvLndyaXRlX3NoaWZ0KDIsIDB4RkZGRSk7XG5cdFx0by53cml0ZV9zaGlmdCgyLCAweDAwMDkpO1xuXHRcdG8ud3JpdGVfc2hpZnQoMiwgMHgwMDA2KTtcblx0XHRmb3IoaSA9IDA7IGkgPCAzOyArK2kpIG8ud3JpdGVfc2hpZnQoMiwgMCk7XG5cdFx0by53cml0ZV9zaGlmdCg0LCAwKTtcblx0XHRvLndyaXRlX3NoaWZ0KDQsIExbMl0pO1xuXHRcdG8ud3JpdGVfc2hpZnQoNCwgTFswXSArIExbMV0gKyBMWzJdICsgTFszXSAtIDEpO1xuXHRcdG8ud3JpdGVfc2hpZnQoNCwgMCk7XG5cdFx0by53cml0ZV9zaGlmdCg0LCAxPDwxMik7XG5cdFx0by53cml0ZV9zaGlmdCg0LCBMWzNdID8gTFswXSArIExbMV0gKyBMWzJdIC0gMTogRU5ET0ZDSEFJTik7XG5cdFx0by53cml0ZV9zaGlmdCg0LCBMWzNdKTtcblx0XHRvLndyaXRlX3NoaWZ0KC00LCBMWzFdID8gTFswXSAtIDE6IEVORE9GQ0hBSU4pO1xuXHRcdG8ud3JpdGVfc2hpZnQoNCwgTFsxXSk7XG5cdFx0Zm9yKGkgPSAwOyBpIDwgMTA5OyArK2kpIG8ud3JpdGVfc2hpZnQoLTQsIGkgPCBMWzJdID8gTFsxXSArIGkgOiAtMSk7XG5cdH1cblx0aWYoTFsxXSkge1xuXHRcdGZvcihUID0gMDsgVCA8IExbMV07ICsrVCkge1xuXHRcdFx0Zm9yKDsgaSA8IDIzNiArIFQgKiAxMjc7ICsraSkgby53cml0ZV9zaGlmdCgtNCwgaSA8IExbMl0gPyBMWzFdICsgaSA6IC0xKTtcblx0XHRcdG8ud3JpdGVfc2hpZnQoLTQsIFQgPT09IExbMV0gLSAxID8gRU5ET0ZDSEFJTiA6IFQgKyAxKTtcblx0XHR9XG5cdH1cblx0dmFyIGNoYWluaXQgPSBmdW5jdGlvbih3Lyo6bnVtYmVyKi8pLyo6dm9pZCovIHtcblx0XHRmb3IoVCArPSB3OyBpPFQtMTsgKytpKSBvLndyaXRlX3NoaWZ0KC00LCBpKzEpO1xuXHRcdGlmKHcpIHsgKytpOyBvLndyaXRlX3NoaWZ0KC00LCBFTkRPRkNIQUlOKTsgfVxuXHR9O1xuXHRUID0gaSA9IDA7XG5cdGZvcihUKz1MWzFdOyBpPFQ7ICsraSkgby53cml0ZV9zaGlmdCgtNCwgY29uc3RzLkRJRlNFQ1QpO1xuXHRmb3IoVCs9TFsyXTsgaTxUOyArK2kpIG8ud3JpdGVfc2hpZnQoLTQsIGNvbnN0cy5GQVRTRUNUKTtcblx0Y2hhaW5pdChMWzNdKTtcblx0Y2hhaW5pdChMWzRdKTtcblx0dmFyIGovKjpudW1iZXIqLyA9IDAsIGZsZW4vKjpudW1iZXIqLyA9IDA7XG5cdHZhciBmaWxlLyo6Q0ZCRW50cnkqLyA9IGNmYi5GaWxlSW5kZXhbMF07XG5cdGZvcig7IGogPCBjZmIuRmlsZUluZGV4Lmxlbmd0aDsgKytqKSB7XG5cdFx0ZmlsZSA9IGNmYi5GaWxlSW5kZXhbal07XG5cdFx0aWYoIWZpbGUuY29udGVudCkgY29udGludWU7XG5cdFx0Lyo6OiBpZihmaWxlLmNvbnRlbnQgPT0gbnVsbCkgdGhyb3cgbmV3IEVycm9yKFwidW5yZWFjaGFibGVcIik7ICovXG5cdFx0ZmxlbiA9IGZpbGUuY29udGVudC5sZW5ndGg7XG5cdFx0aWYoZmxlbiA8IDB4MTAwMCkgY29udGludWU7XG5cdFx0ZmlsZS5zdGFydCA9IFQ7XG5cdFx0Y2hhaW5pdCgoZmxlbiArIDB4MDFGRikgPj4gOSk7XG5cdH1cblx0Y2hhaW5pdCgoTFs2XSArIDcpID4+IDMpO1xuXHR3aGlsZShvLmwgJiAweDFGRikgby53cml0ZV9zaGlmdCgtNCwgY29uc3RzLkVORE9GQ0hBSU4pO1xuXHRUID0gaSA9IDA7XG5cdGZvcihqID0gMDsgaiA8IGNmYi5GaWxlSW5kZXgubGVuZ3RoOyArK2opIHtcblx0XHRmaWxlID0gY2ZiLkZpbGVJbmRleFtqXTtcblx0XHRpZighZmlsZS5jb250ZW50KSBjb250aW51ZTtcblx0XHQvKjo6IGlmKGZpbGUuY29udGVudCA9PSBudWxsKSB0aHJvdyBuZXcgRXJyb3IoXCJ1bnJlYWNoYWJsZVwiKTsgKi9cblx0XHRmbGVuID0gZmlsZS5jb250ZW50Lmxlbmd0aDtcblx0XHRpZighZmxlbiB8fCBmbGVuID49IDB4MTAwMCkgY29udGludWU7XG5cdFx0ZmlsZS5zdGFydCA9IFQ7XG5cdFx0Y2hhaW5pdCgoZmxlbiArIDB4M0YpID4+IDYpO1xuXHR9XG5cdHdoaWxlKG8ubCAmIDB4MUZGKSBvLndyaXRlX3NoaWZ0KC00LCBjb25zdHMuRU5ET0ZDSEFJTik7XG5cdGZvcihpID0gMDsgaSA8IExbNF08PDI7ICsraSkge1xuXHRcdHZhciBubSA9IGNmYi5GdWxsUGF0aHNbaV07XG5cdFx0aWYoIW5tIHx8IG5tLmxlbmd0aCA9PT0gMCkge1xuXHRcdFx0Zm9yKGogPSAwOyBqIDwgMTc7ICsraikgby53cml0ZV9zaGlmdCg0LCAwKTtcblx0XHRcdGZvcihqID0gMDsgaiA8IDM7ICsraikgby53cml0ZV9zaGlmdCg0LCAtMSk7XG5cdFx0XHRmb3IoaiA9IDA7IGogPCAxMjsgKytqKSBvLndyaXRlX3NoaWZ0KDQsIDApO1xuXHRcdFx0Y29udGludWU7XG5cdFx0fVxuXHRcdGZpbGUgPSBjZmIuRmlsZUluZGV4W2ldO1xuXHRcdGlmKGkgPT09IDApIGZpbGUuc3RhcnQgPSBmaWxlLnNpemUgPyBmaWxlLnN0YXJ0IC0gMSA6IEVORE9GQ0hBSU47XG5cdFx0dmFyIF9ubS8qOnN0cmluZyovID0gKGkgPT09IDAgJiYgX29wdHMucm9vdCkgfHwgZmlsZS5uYW1lO1xuXHRcdGZsZW4gPSAyKihfbm0ubGVuZ3RoKzEpO1xuXHRcdG8ud3JpdGVfc2hpZnQoNjQsIF9ubSwgXCJ1dGYxNmxlXCIpO1xuXHRcdG8ud3JpdGVfc2hpZnQoMiwgZmxlbik7XG5cdFx0by53cml0ZV9zaGlmdCgxLCBmaWxlLnR5cGUpO1xuXHRcdG8ud3JpdGVfc2hpZnQoMSwgZmlsZS5jb2xvcik7XG5cdFx0by53cml0ZV9zaGlmdCgtNCwgZmlsZS5MKTtcblx0XHRvLndyaXRlX3NoaWZ0KC00LCBmaWxlLlIpO1xuXHRcdG8ud3JpdGVfc2hpZnQoLTQsIGZpbGUuQyk7XG5cdFx0aWYoIWZpbGUuY2xzaWQpIGZvcihqID0gMDsgaiA8IDQ7ICsraikgby53cml0ZV9zaGlmdCg0LCAwKTtcblx0XHRlbHNlIG8ud3JpdGVfc2hpZnQoMTYsIGZpbGUuY2xzaWQsIFwiaGV4XCIpO1xuXHRcdG8ud3JpdGVfc2hpZnQoNCwgZmlsZS5zdGF0ZSB8fCAwKTtcblx0XHRvLndyaXRlX3NoaWZ0KDQsIDApOyBvLndyaXRlX3NoaWZ0KDQsIDApO1xuXHRcdG8ud3JpdGVfc2hpZnQoNCwgMCk7IG8ud3JpdGVfc2hpZnQoNCwgMCk7XG5cdFx0by53cml0ZV9zaGlmdCg0LCBmaWxlLnN0YXJ0KTtcblx0XHRvLndyaXRlX3NoaWZ0KDQsIGZpbGUuc2l6ZSk7IG8ud3JpdGVfc2hpZnQoNCwgMCk7XG5cdH1cblx0Zm9yKGkgPSAxOyBpIDwgY2ZiLkZpbGVJbmRleC5sZW5ndGg7ICsraSkge1xuXHRcdGZpbGUgPSBjZmIuRmlsZUluZGV4W2ldO1xuXHRcdC8qOjogaWYoIWZpbGUuY29udGVudCkgdGhyb3cgbmV3IEVycm9yKFwidW5yZWFjaGFibGVcIik7ICovXG5cdFx0aWYoZmlsZS5zaXplID49IDB4MTAwMCkge1xuXHRcdFx0by5sID0gKGZpbGUuc3RhcnQrMSkgPDwgOTtcblx0XHRcdGlmIChoYXNfYnVmICYmIEJ1ZmZlci5pc0J1ZmZlcihmaWxlLmNvbnRlbnQpKSB7XG5cdFx0XHRcdGZpbGUuY29udGVudC5jb3B5KG8sIG8ubCwgMCwgZmlsZS5zaXplKTtcblx0XHRcdFx0Ly8gbyBpcyBhIDAtZmlsbGVkIEJ1ZmZlciBzbyBqdXN0IHNldCBuZXh0IG9mZnNldFxuXHRcdFx0XHRvLmwgKz0gKGZpbGUuc2l6ZSArIDUxMSkgJiAtNTEyO1xuXHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0Zm9yKGogPSAwOyBqIDwgZmlsZS5zaXplOyArK2opIG8ud3JpdGVfc2hpZnQoMSwgZmlsZS5jb250ZW50W2pdKTtcblx0XHRcdFx0Zm9yKDsgaiAmIDB4MUZGOyArK2opIG8ud3JpdGVfc2hpZnQoMSwgMCk7XG5cdFx0XHR9XG5cdFx0fVxuXHR9XG5cdGZvcihpID0gMTsgaSA8IGNmYi5GaWxlSW5kZXgubGVuZ3RoOyArK2kpIHtcblx0XHRmaWxlID0gY2ZiLkZpbGVJbmRleFtpXTtcblx0XHQvKjo6IGlmKCFmaWxlLmNvbnRlbnQpIHRocm93IG5ldyBFcnJvcihcInVucmVhY2hhYmxlXCIpOyAqL1xuXHRcdGlmKGZpbGUuc2l6ZSA+IDAgJiYgZmlsZS5zaXplIDwgMHgxMDAwKSB7XG5cdFx0XHRpZiAoaGFzX2J1ZiAmJiBCdWZmZXIuaXNCdWZmZXIoZmlsZS5jb250ZW50KSkge1xuXHRcdFx0XHRmaWxlLmNvbnRlbnQuY29weShvLCBvLmwsIDAsIGZpbGUuc2l6ZSk7XG5cdFx0XHRcdC8vIG8gaXMgYSAwLWZpbGxlZCBCdWZmZXIgc28ganVzdCBzZXQgbmV4dCBvZmZzZXRcblx0XHRcdFx0by5sICs9IChmaWxlLnNpemUgKyA2MykgJiAtNjQ7XG5cdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRmb3IoaiA9IDA7IGogPCBmaWxlLnNpemU7ICsraikgby53cml0ZV9zaGlmdCgxLCBmaWxlLmNvbnRlbnRbal0pO1xuXHRcdFx0XHRmb3IoOyBqICYgMHgzRjsgKytqKSBvLndyaXRlX3NoaWZ0KDEsIDApO1xuXHRcdFx0fVxuXHRcdH1cblx0fVxuXHRpZiAoaGFzX2J1Zikge1xuXHRcdG8ubCA9IG8ubGVuZ3RoO1xuXHR9IGVsc2Uge1xuXHRcdC8vIFdoZW4gdXNpbmcgQnVmZmVyLCBhbHJlYWR5IDAtZmlsbGVkXG5cdFx0d2hpbGUoby5sIDwgby5sZW5ndGgpIG8ud3JpdGVfc2hpZnQoMSwgMCk7XG5cdH1cblx0cmV0dXJuIG87XG59XG4vKiBbTVMtQ0ZCXSAyLjYuNCAoVW5pY29kZSAzLjAuMSBjYXNlIGNvbnZlcnNpb24pICovXG5mdW5jdGlvbiBmaW5kKGNmYi8qOkNGQkNvbnRhaW5lciovLCBwYXRoLyo6c3RyaW5nKi8pLyo6P0NGQkVudHJ5Ki8ge1xuXHR2YXIgVUNGdWxsUGF0aHMvKjpBcnJheTxzdHJpbmc+Ki8gPSBjZmIuRnVsbFBhdGhzLm1hcChmdW5jdGlvbih4KSB7IHJldHVybiB4LnRvVXBwZXJDYXNlKCk7IH0pO1xuXHR2YXIgVUNQYXRocy8qOkFycmF5PHN0cmluZz4qLyA9IFVDRnVsbFBhdGhzLm1hcChmdW5jdGlvbih4KSB7IHZhciB5ID0geC5zcGxpdChcIi9cIik7IHJldHVybiB5W3kubGVuZ3RoIC0gKHguc2xpY2UoLTEpID09IFwiL1wiID8gMiA6IDEpXTsgfSk7XG5cdHZhciBrLyo6Ym9vbGVhbiovID0gZmFsc2U7XG5cdGlmKHBhdGguY2hhckNvZGVBdCgwKSA9PT0gNDcgLyogXCIvXCIgKi8pIHsgayA9IHRydWU7IHBhdGggPSBVQ0Z1bGxQYXRoc1swXS5zbGljZSgwLCAtMSkgKyBwYXRoOyB9XG5cdGVsc2UgayA9IHBhdGguaW5kZXhPZihcIi9cIikgIT09IC0xO1xuXHR2YXIgVUNQYXRoLyo6c3RyaW5nKi8gPSBwYXRoLnRvVXBwZXJDYXNlKCk7XG5cdHZhciB3Lyo6bnVtYmVyKi8gPSBrID09PSB0cnVlID8gVUNGdWxsUGF0aHMuaW5kZXhPZihVQ1BhdGgpIDogVUNQYXRocy5pbmRleE9mKFVDUGF0aCk7XG5cdGlmKHcgIT09IC0xKSByZXR1cm4gY2ZiLkZpbGVJbmRleFt3XTtcblxuXHR2YXIgbSA9ICFVQ1BhdGgubWF0Y2goY2hyMSk7XG5cdFVDUGF0aCA9IFVDUGF0aC5yZXBsYWNlKGNocjAsJycpO1xuXHRpZihtKSBVQ1BhdGggPSBVQ1BhdGgucmVwbGFjZShjaHIxLCchJyk7XG5cdGZvcih3ID0gMDsgdyA8IFVDRnVsbFBhdGhzLmxlbmd0aDsgKyt3KSB7XG5cdFx0aWYoKG0gPyBVQ0Z1bGxQYXRoc1t3XS5yZXBsYWNlKGNocjEsJyEnKSA6IFVDRnVsbFBhdGhzW3ddKS5yZXBsYWNlKGNocjAsJycpID09IFVDUGF0aCkgcmV0dXJuIGNmYi5GaWxlSW5kZXhbd107XG5cdFx0aWYoKG0gPyBVQ1BhdGhzW3ddLnJlcGxhY2UoY2hyMSwnIScpIDogVUNQYXRoc1t3XSkucmVwbGFjZShjaHIwLCcnKSA9PSBVQ1BhdGgpIHJldHVybiBjZmIuRmlsZUluZGV4W3ddO1xuXHR9XG5cdHJldHVybiBudWxsO1xufVxuLyoqIENGQiBDb25zdGFudHMgKi9cbnZhciBNU1NaID0gNjQ7IC8qIE1pbmkgU2VjdG9yIFNpemUgPSAxPDw2ICovXG4vL3ZhciBNU0NTWiA9IDQwOTY7IC8qIE1pbmkgU3RyZWFtIEN1dG9mZiBTaXplICovXG4vKiAyLjEgQ29tcG91bmQgRmlsZSBTZWN0b3IgTnVtYmVycyBhbmQgVHlwZXMgKi9cbnZhciBFTkRPRkNIQUlOID0gLTI7XG4vKiAyLjIgQ29tcG91bmQgRmlsZSBIZWFkZXIgKi9cbnZhciBIRUFERVJfU0lHTkFUVVJFID0gJ2QwY2YxMWUwYTFiMTFhZTEnO1xudmFyIEhFQURFUl9TSUcgPSBbMHhEMCwgMHhDRiwgMHgxMSwgMHhFMCwgMHhBMSwgMHhCMSwgMHgxQSwgMHhFMV07XG52YXIgSEVBREVSX0NMU0lEID0gJzAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwJztcbnZhciBjb25zdHMgPSB7XG5cdC8qIDIuMSBDb21wdW5kIEZpbGUgU2VjdG9yIE51bWJlcnMgYW5kIFR5cGVzICovXG5cdE1BWFJFR1NFQ1Q6IC02LFxuXHRESUZTRUNUOiAtNCxcblx0RkFUU0VDVDogLTMsXG5cdEVORE9GQ0hBSU46IEVORE9GQ0hBSU4sXG5cdEZSRUVTRUNUOiAtMSxcblx0LyogMi4yIENvbXBvdW5kIEZpbGUgSGVhZGVyICovXG5cdEhFQURFUl9TSUdOQVRVUkU6IEhFQURFUl9TSUdOQVRVUkUsXG5cdEhFQURFUl9NSU5PUl9WRVJTSU9OOiAnM2UwMCcsXG5cdE1BWFJFR1NJRDogLTYsXG5cdE5PU1RSRUFNOiAtMSxcblx0SEVBREVSX0NMU0lEOiBIRUFERVJfQ0xTSUQsXG5cdC8qIDIuNi4xIENvbXBvdW5kIEZpbGUgRGlyZWN0b3J5IEVudHJ5ICovXG5cdEVudHJ5VHlwZXM6IFsndW5rbm93bicsJ3N0b3JhZ2UnLCdzdHJlYW0nLCdsb2NrYnl0ZXMnLCdwcm9wZXJ0eScsJ3Jvb3QnXVxufTtcblxuZnVuY3Rpb24gd3JpdGVfZmlsZShjZmIvKjpDRkJDb250YWluZXIqLywgZmlsZW5hbWUvKjpzdHJpbmcqLywgb3B0aW9ucy8qOkNGQldyaXRlT3B0cyovKS8qOnZvaWQqLyB7XG5cdGdldF9mcygpO1xuXHR2YXIgbyA9IF93cml0ZShjZmIsIG9wdGlvbnMpO1xuXHQvKjo6IGlmKHR5cGVvZiBCdWZmZXIgPT0gJ3VuZGVmaW5lZCcgfHwgIUJ1ZmZlci5pc0J1ZmZlcihvKSB8fCAhKG8gaW5zdGFuY2VvZiBCdWZmZXIpKSB0aHJvdyBuZXcgRXJyb3IoXCJ1bnJlYWNoYWJsZVwiKTsgKi9cblx0ZnMud3JpdGVGaWxlU3luYyhmaWxlbmFtZSwgbyk7XG59XG5cbmZ1bmN0aW9uIGEycyhvLyo6UmF3Qnl0ZXMqLykvKjpzdHJpbmcqLyB7XG5cdHZhciBvdXQgPSBuZXcgQXJyYXkoby5sZW5ndGgpO1xuXHRmb3IodmFyIGkgPSAwOyBpIDwgby5sZW5ndGg7ICsraSkgb3V0W2ldID0gU3RyaW5nLmZyb21DaGFyQ29kZShvW2ldKTtcblx0cmV0dXJuIG91dC5qb2luKFwiXCIpO1xufVxuXG5mdW5jdGlvbiB3cml0ZShjZmIvKjpDRkJDb250YWluZXIqLywgb3B0aW9ucy8qOkNGQldyaXRlT3B0cyovKS8qOlJhd0J5dGVzfHN0cmluZyovIHtcblx0dmFyIG8gPSBfd3JpdGUoY2ZiLCBvcHRpb25zKTtcblx0c3dpdGNoKG9wdGlvbnMgJiYgb3B0aW9ucy50eXBlIHx8IFwiYnVmZmVyXCIpIHtcblx0XHRjYXNlIFwiZmlsZVwiOiBnZXRfZnMoKTsgZnMud3JpdGVGaWxlU3luYyhvcHRpb25zLmZpbGVuYW1lLCAoby8qOmFueSovKSk7IHJldHVybiBvO1xuXHRcdGNhc2UgXCJiaW5hcnlcIjogcmV0dXJuIHR5cGVvZiBvID09IFwic3RyaW5nXCIgPyBvIDogYTJzKG8pO1xuXHRcdGNhc2UgXCJiYXNlNjRcIjogcmV0dXJuIEJhc2U2NF9lbmNvZGUodHlwZW9mIG8gPT0gXCJzdHJpbmdcIiA/IG8gOiBhMnMobykpO1xuXHRcdGNhc2UgXCJidWZmZXJcIjogaWYoaGFzX2J1ZikgcmV0dXJuIEJ1ZmZlci5pc0J1ZmZlcihvKSA/IG8gOiBCdWZmZXJfZnJvbShvKTtcblx0XHRcdC8qIGZhbGxzIHRocm91Z2ggKi9cblx0XHRjYXNlIFwiYXJyYXlcIjogcmV0dXJuIHR5cGVvZiBvID09IFwic3RyaW5nXCIgPyBzMmEobykgOiBvO1xuXHR9XG5cdHJldHVybiBvO1xufVxuLyogbm9kZSA8IDguMSB6bGliIGRvZXMgbm90IGV4cG9zZSBieXRlc1JlYWQsIHNvIGRlZmF1bHQgdG8gcHVyZSBKUyAqL1xudmFyIF96bGliO1xuZnVuY3Rpb24gdXNlX3psaWIoemxpYikgeyB0cnkge1xuXHR2YXIgSW5mbGF0ZVJhdyA9IHpsaWIuSW5mbGF0ZVJhdztcblx0dmFyIEluZmxSYXcgPSBuZXcgSW5mbGF0ZVJhdygpO1xuXHRJbmZsUmF3Ll9wcm9jZXNzQ2h1bmsobmV3IFVpbnQ4QXJyYXkoWzMsIDBdKSwgSW5mbFJhdy5fZmluaXNoRmx1c2hGbGFnKTtcblx0aWYoSW5mbFJhdy5ieXRlc1JlYWQpIF96bGliID0gemxpYjtcblx0ZWxzZSB0aHJvdyBuZXcgRXJyb3IoXCJ6bGliIGRvZXMgbm90IGV4cG9zZSBieXRlc1JlYWRcIik7XG59IGNhdGNoKGUpIHtjb25zb2xlLmVycm9yKFwiY2Fubm90IHVzZSBuYXRpdmUgemxpYjogXCIgKyAoZS5tZXNzYWdlIHx8IGUpKTsgfSB9XG5cbmZ1bmN0aW9uIF9pbmZsYXRlUmF3U3luYyhwYXlsb2FkLCB1c3opIHtcblx0aWYoIV96bGliKSByZXR1cm4gX2luZmxhdGUocGF5bG9hZCwgdXN6KTtcblx0dmFyIEluZmxhdGVSYXcgPSBfemxpYi5JbmZsYXRlUmF3O1xuXHR2YXIgSW5mbFJhdyA9IG5ldyBJbmZsYXRlUmF3KCk7XG5cdHZhciBvdXQgPSBJbmZsUmF3Ll9wcm9jZXNzQ2h1bmsocGF5bG9hZC5zbGljZShwYXlsb2FkLmwpLCBJbmZsUmF3Ll9maW5pc2hGbHVzaEZsYWcpO1xuXHRwYXlsb2FkLmwgKz0gSW5mbFJhdy5ieXRlc1JlYWQ7XG5cdHJldHVybiBvdXQ7XG59XG5cbmZ1bmN0aW9uIF9kZWZsYXRlUmF3U3luYyhwYXlsb2FkKSB7XG5cdHJldHVybiBfemxpYiA/IF96bGliLmRlZmxhdGVSYXdTeW5jKHBheWxvYWQpIDogX2RlZmxhdGUocGF5bG9hZCk7XG59XG52YXIgQ0xFTl9PUkRFUiA9IFsgMTYsIDE3LCAxOCwgMCwgOCwgNywgOSwgNiwgMTAsIDUsIDExLCA0LCAxMiwgMywgMTMsIDIsIDE0LCAxLCAxNSBdO1xuXG4vKiAgTEVOX0lEID0gWyAyNTcsIDI1OCwgMjU5LCAyNjAsIDI2MSwgMjYyLCAyNjMsIDI2NCwgMjY1LCAyNjYsIDI2NywgMjY4LCAyNjksIDI3MCwgMjcxLCAyNzIsIDI3MywgMjc0LCAyNzUsIDI3NiwgMjc3LCAyNzgsIDI3OSwgMjgwLCAyODEsIDI4MiwgMjgzLCAyODQsIDI4NSBdOyAqL1xudmFyIExFTl9MTiA9IFsgICAzLCAgIDQsICAgNSwgICA2LCAgIDcsICAgOCwgICA5LCAgMTAsICAxMSwgIDEzICwgMTUsICAxNywgIDE5LCAgMjMsICAyNywgIDMxLCAgMzUsICA0MywgIDUxLCAgNTksICA2NywgIDgzLCAgOTksIDExNSwgMTMxLCAxNjMsIDE5NSwgMjI3LCAyNTggXTtcblxuLyogIERTVF9JRCA9IFsgIDAsICAxLCAgMiwgIDMsICA0LCAgNSwgIDYsICA3LCAgOCwgIDksIDEwLCAxMSwgMTIsIDEzLCAgMTQsICAxNSwgIDE2LCAgMTcsICAxOCwgIDE5LCAgIDIwLCAgIDIxLCAgIDIyLCAgIDIzLCAgIDI0LCAgIDI1LCAgIDI2LCAgICAyNywgICAgMjgsICAgIDI5IF07ICovXG52YXIgRFNUX0xOID0gWyAgMSwgIDIsICAzLCAgNCwgIDUsICA3LCAgOSwgMTMsIDE3LCAyNSwgMzMsIDQ5LCA2NSwgOTcsIDEyOSwgMTkzLCAyNTcsIDM4NSwgNTEzLCA3NjksIDEwMjUsIDE1MzcsIDIwNDksIDMwNzMsIDQwOTcsIDYxNDUsIDgxOTMsIDEyMjg5LCAxNjM4NSwgMjQ1NzcgXTtcblxuZnVuY3Rpb24gYml0X3N3YXBfOChuKSB7IHZhciB0ID0gKCgoKChuPDwxKXwobjw8MTEpKSAmIDB4MjIxMTApIHwgKCgobjw8NSl8KG48PDE1KSkgJiAweDg4NDQwKSkpOyByZXR1cm4gKCh0Pj4xNikgfCAodD4+OCkgfHQpJjB4RkY7IH1cblxudmFyIHVzZV90eXBlZF9hcnJheXMgPSB0eXBlb2YgVWludDhBcnJheSAhPT0gJ3VuZGVmaW5lZCc7XG5cbnZhciBiaXRzd2FwOCA9IHVzZV90eXBlZF9hcnJheXMgPyBuZXcgVWludDhBcnJheSgxPDw4KSA6IFtdO1xuZm9yKHZhciBxID0gMDsgcSA8ICgxPDw4KTsgKytxKSBiaXRzd2FwOFtxXSA9IGJpdF9zd2FwXzgocSk7XG5cbmZ1bmN0aW9uIGJpdF9zd2FwX24obiwgYikge1xuXHR2YXIgcmV2ID0gYml0c3dhcDhbbiAmIDB4RkZdO1xuXHRpZihiIDw9IDgpIHJldHVybiByZXYgPj4+ICg4LWIpO1xuXHRyZXYgPSAocmV2IDw8IDgpIHwgYml0c3dhcDhbKG4+PjgpJjB4RkZdO1xuXHRpZihiIDw9IDE2KSByZXR1cm4gcmV2ID4+PiAoMTYtYik7XG5cdHJldiA9IChyZXYgPDwgOCkgfCBiaXRzd2FwOFsobj4+MTYpJjB4RkZdO1xuXHRyZXR1cm4gcmV2ID4+PiAoMjQtYik7XG59XG5cbi8qIGhlbHBlcnMgZm9yIHVuYWxpZ25lZCBiaXQgcmVhZHMgKi9cbmZ1bmN0aW9uIHJlYWRfYml0c18yKGJ1ZiwgYmwpIHsgdmFyIHcgPSAoYmwmNyksIGggPSAoYmw+Pj4zKTsgcmV0dXJuICgoYnVmW2hdfCh3IDw9IDYgPyAwIDogYnVmW2grMV08PDgpKT4+PncpJiAweDAzOyB9XG5mdW5jdGlvbiByZWFkX2JpdHNfMyhidWYsIGJsKSB7IHZhciB3ID0gKGJsJjcpLCBoID0gKGJsPj4+Myk7IHJldHVybiAoKGJ1ZltoXXwodyA8PSA1ID8gMCA6IGJ1ZltoKzFdPDw4KSk+Pj53KSYgMHgwNzsgfVxuZnVuY3Rpb24gcmVhZF9iaXRzXzQoYnVmLCBibCkgeyB2YXIgdyA9IChibCY3KSwgaCA9IChibD4+PjMpOyByZXR1cm4gKChidWZbaF18KHcgPD0gNCA/IDAgOiBidWZbaCsxXTw8OCkpPj4+dykmIDB4MEY7IH1cbmZ1bmN0aW9uIHJlYWRfYml0c181KGJ1ZiwgYmwpIHsgdmFyIHcgPSAoYmwmNyksIGggPSAoYmw+Pj4zKTsgcmV0dXJuICgoYnVmW2hdfCh3IDw9IDMgPyAwIDogYnVmW2grMV08PDgpKT4+PncpJiAweDFGOyB9XG5mdW5jdGlvbiByZWFkX2JpdHNfNyhidWYsIGJsKSB7IHZhciB3ID0gKGJsJjcpLCBoID0gKGJsPj4+Myk7IHJldHVybiAoKGJ1ZltoXXwodyA8PSAxID8gMCA6IGJ1ZltoKzFdPDw4KSk+Pj53KSYgMHg3RjsgfVxuXG4vKiB3b3JrcyB1cCB0byBuID0gMyAqIDggKyAxID0gMjUgKi9cbmZ1bmN0aW9uIHJlYWRfYml0c19uKGJ1ZiwgYmwsIG4pIHtcblx0dmFyIHcgPSAoYmwmNyksIGggPSAoYmw+Pj4zKSwgZiA9ICgoMTw8biktMSk7XG5cdHZhciB2ID0gYnVmW2hdID4+PiB3O1xuXHRpZihuIDwgOCAtIHcpIHJldHVybiB2ICYgZjtcblx0diB8PSBidWZbaCsxXTw8KDgtdyk7XG5cdGlmKG4gPCAxNiAtIHcpIHJldHVybiB2ICYgZjtcblx0diB8PSBidWZbaCsyXTw8KDE2LXcpO1xuXHRpZihuIDwgMjQgLSB3KSByZXR1cm4gdiAmIGY7XG5cdHYgfD0gYnVmW2grM108PCgyNC13KTtcblx0cmV0dXJuIHYgJiBmO1xufVxuXG4vKiBoZWxwZXJzIGZvciB1bmFsaWduZWQgYml0IHdyaXRlcyAqL1xuZnVuY3Rpb24gd3JpdGVfYml0c18zKGJ1ZiwgYmwsIHYpIHsgdmFyIHcgPSBibCAmIDcsIGggPSBibCA+Pj4gMztcblx0aWYodyA8PSA1KSBidWZbaF0gfD0gKHYgJiA3KSA8PCB3O1xuXHRlbHNlIHtcblx0XHRidWZbaF0gfD0gKHYgPDwgdykgJiAweEZGO1xuXHRcdGJ1ZltoKzFdID0gKHYmNykgPj4gKDgtdyk7XG5cdH1cblx0cmV0dXJuIGJsICsgMztcbn1cblxuZnVuY3Rpb24gd3JpdGVfYml0c18xKGJ1ZiwgYmwsIHYpIHtcblx0dmFyIHcgPSBibCAmIDcsIGggPSBibCA+Pj4gMztcblx0diA9ICh2JjEpIDw8IHc7XG5cdGJ1ZltoXSB8PSB2O1xuXHRyZXR1cm4gYmwgKyAxO1xufVxuZnVuY3Rpb24gd3JpdGVfYml0c184KGJ1ZiwgYmwsIHYpIHtcblx0dmFyIHcgPSBibCAmIDcsIGggPSBibCA+Pj4gMztcblx0diA8PD0gdztcblx0YnVmW2hdIHw9ICB2ICYgMHhGRjsgdiA+Pj49IDg7XG5cdGJ1ZltoKzFdID0gdjtcblx0cmV0dXJuIGJsICsgODtcbn1cbmZ1bmN0aW9uIHdyaXRlX2JpdHNfMTYoYnVmLCBibCwgdikge1xuXHR2YXIgdyA9IGJsICYgNywgaCA9IGJsID4+PiAzO1xuXHR2IDw8PSB3O1xuXHRidWZbaF0gfD0gIHYgJiAweEZGOyB2ID4+Pj0gODtcblx0YnVmW2grMV0gPSB2ICYgMHhGRjtcblx0YnVmW2grMl0gPSB2ID4+PiA4O1xuXHRyZXR1cm4gYmwgKyAxNjtcbn1cblxuLyogdW50aWwgQXJyYXlCdWZmZXIjcmVhbGxvYyBpcyBhIHRoaW5nLCBmYWtlIGEgcmVhbGxvYyAqL1xuZnVuY3Rpb24gcmVhbGxvYyhiLCBzei8qOm51bWJlciovKSB7XG5cdHZhciBMID0gYi5sZW5ndGgsIE0gPSAyKkwgPiBzeiA/IDIqTCA6IHN6ICsgNSwgaSA9IDA7XG5cdGlmKEwgPj0gc3opIHJldHVybiBiO1xuXHRpZihoYXNfYnVmKSB7XG5cdFx0dmFyIG8gPSBuZXdfdW5zYWZlX2J1ZihNKTtcblx0XHQvLyAkRmxvd0lnbm9yZVxuXHRcdGlmKGIuY29weSkgYi5jb3B5KG8pO1xuXHRcdGVsc2UgZm9yKDsgaSA8IGIubGVuZ3RoOyArK2kpIG9baV0gPSBiW2ldO1xuXHRcdHJldHVybiBvO1xuXHR9IGVsc2UgaWYodXNlX3R5cGVkX2FycmF5cykge1xuXHRcdHZhciBhID0gbmV3IFVpbnQ4QXJyYXkoTSk7XG5cdFx0aWYoYS5zZXQpIGEuc2V0KGIpO1xuXHRcdGVsc2UgZm9yKDsgaSA8IEw7ICsraSkgYVtpXSA9IGJbaV07XG5cdFx0cmV0dXJuIGE7XG5cdH1cblx0Yi5sZW5ndGggPSBNO1xuXHRyZXR1cm4gYjtcbn1cblxuLyogemVyby1maWxsZWQgYXJyYXlzIGZvciBvbGRlciBicm93c2VycyAqL1xuZnVuY3Rpb24gemVyb19maWxsX2FycmF5KG4pIHtcblx0dmFyIG8gPSBuZXcgQXJyYXkobik7XG5cdGZvcih2YXIgaSA9IDA7IGkgPCBuOyArK2kpIG9baV0gPSAwO1xuXHRyZXR1cm4gbztcbn1cblxuLyogYnVpbGQgdHJlZSAodXNlZCBmb3IgbGl0ZXJhbHMgYW5kIGxlbmd0aHMpICovXG5mdW5jdGlvbiBidWlsZF90cmVlKGNsZW5zLCBjbWFwLCBNQVgvKjpudW1iZXIqLykvKjpudW1iZXIqLyB7XG5cdHZhciBtYXhsZW4gPSAxLCB3ID0gMCwgaSA9IDAsIGogPSAwLCBjY29kZSA9IDAsIEwgPSBjbGVucy5sZW5ndGg7XG5cblx0dmFyIGJsX2NvdW50ICA9IHVzZV90eXBlZF9hcnJheXMgPyBuZXcgVWludDE2QXJyYXkoMzIpIDogemVyb19maWxsX2FycmF5KDMyKTtcblx0Zm9yKGkgPSAwOyBpIDwgMzI7ICsraSkgYmxfY291bnRbaV0gPSAwO1xuXG5cdGZvcihpID0gTDsgaSA8IE1BWDsgKytpKSBjbGVuc1tpXSA9IDA7XG5cdEwgPSBjbGVucy5sZW5ndGg7XG5cblx0dmFyIGN0cmVlID0gdXNlX3R5cGVkX2FycmF5cyA/IG5ldyBVaW50MTZBcnJheShMKSA6IHplcm9fZmlsbF9hcnJheShMKTsgLy8gW11cblxuXHQvKiBidWlsZCBjb2RlIHRyZWUgKi9cblx0Zm9yKGkgPSAwOyBpIDwgTDsgKytpKSB7XG5cdFx0YmxfY291bnRbKHcgPSBjbGVuc1tpXSldKys7XG5cdFx0aWYobWF4bGVuIDwgdykgbWF4bGVuID0gdztcblx0XHRjdHJlZVtpXSA9IDA7XG5cdH1cblx0YmxfY291bnRbMF0gPSAwO1xuXHRmb3IoaSA9IDE7IGkgPD0gbWF4bGVuOyArK2kpIGJsX2NvdW50W2krMTZdID0gKGNjb2RlID0gKGNjb2RlICsgYmxfY291bnRbaS0xXSk8PDEpO1xuXHRmb3IoaSA9IDA7IGkgPCBMOyArK2kpIHtcblx0XHRjY29kZSA9IGNsZW5zW2ldO1xuXHRcdGlmKGNjb2RlICE9IDApIGN0cmVlW2ldID0gYmxfY291bnRbY2NvZGUrMTZdKys7XG5cdH1cblxuXHQvKiBjbWFwW21heGxlbiArIDQgYml0c10gPSAob2ZmJjE1KSArIChsaXQ8PDQpIHJldmVyc2UgbWFwcGluZyAqL1xuXHR2YXIgY2xlbmkgPSAwO1xuXHRmb3IoaSA9IDA7IGkgPCBMOyArK2kpIHtcblx0XHRjbGVuaSA9IGNsZW5zW2ldO1xuXHRcdGlmKGNsZW5pICE9IDApIHtcblx0XHRcdGNjb2RlID0gYml0X3N3YXBfbihjdHJlZVtpXSwgbWF4bGVuKT4+KG1heGxlbi1jbGVuaSk7XG5cdFx0XHRmb3IoaiA9ICgxPDwobWF4bGVuICsgNCAtIGNsZW5pKSkgLSAxOyBqPj0wOyAtLWopXG5cdFx0XHRcdGNtYXBbY2NvZGV8KGo8PGNsZW5pKV0gPSAoY2xlbmkmMTUpIHwgKGk8PDQpO1xuXHRcdH1cblx0fVxuXHRyZXR1cm4gbWF4bGVuO1xufVxuXG4vKiBGaXhlZCBIdWZmbWFuICovXG52YXIgZml4X2xtYXAgPSB1c2VfdHlwZWRfYXJyYXlzID8gbmV3IFVpbnQxNkFycmF5KDUxMikgOiB6ZXJvX2ZpbGxfYXJyYXkoNTEyKTtcbnZhciBmaXhfZG1hcCA9IHVzZV90eXBlZF9hcnJheXMgPyBuZXcgVWludDE2QXJyYXkoMzIpICA6IHplcm9fZmlsbF9hcnJheSgzMik7XG5pZighdXNlX3R5cGVkX2FycmF5cykge1xuXHRmb3IodmFyIGkgPSAwOyBpIDwgNTEyOyArK2kpIGZpeF9sbWFwW2ldID0gMDtcblx0Zm9yKGkgPSAwOyBpIDwgMzI7ICsraSkgZml4X2RtYXBbaV0gPSAwO1xufVxuKGZ1bmN0aW9uKCkge1xuXHR2YXIgZGxlbnMvKjpBcnJheTxudW1iZXI+Ki8gPSBbXTtcblx0dmFyIGkgPSAwO1xuXHRmb3IoO2k8MzI7IGkrKykgZGxlbnMucHVzaCg1KTtcblx0YnVpbGRfdHJlZShkbGVucywgZml4X2RtYXAsIDMyKTtcblxuXHR2YXIgY2xlbnMvKjpBcnJheTxudW1iZXI+Ki8gPSBbXTtcblx0aSA9IDA7XG5cdGZvcig7IGk8PTE0MzsgaSsrKSBjbGVucy5wdXNoKDgpO1xuXHRmb3IoOyBpPD0yNTU7IGkrKykgY2xlbnMucHVzaCg5KTtcblx0Zm9yKDsgaTw9Mjc5OyBpKyspIGNsZW5zLnB1c2goNyk7XG5cdGZvcig7IGk8PTI4NzsgaSsrKSBjbGVucy5wdXNoKDgpO1xuXHRidWlsZF90cmVlKGNsZW5zLCBmaXhfbG1hcCwgMjg4KTtcbn0pKCk7dmFyIF9kZWZsYXRlUmF3ID0gLyojX19QVVJFX18qLyhmdW5jdGlvbiBfZGVmbGF0ZVJhd0lJRkUoKSB7XG5cdHZhciBEU1RfTE5fUkUgPSB1c2VfdHlwZWRfYXJyYXlzID8gbmV3IFVpbnQ4QXJyYXkoMHg4MDAwKSA6IFtdO1xuXHR2YXIgaiA9IDAsIGsgPSAwO1xuXHRmb3IoOyBqIDwgRFNUX0xOLmxlbmd0aCAtIDE7ICsraikge1xuXHRcdGZvcig7IGsgPCBEU1RfTE5baisxXTsgKytrKSBEU1RfTE5fUkVba10gPSBqO1xuXHR9XG5cdGZvcig7ayA8IDMyNzY4OyArK2spIERTVF9MTl9SRVtrXSA9IDI5O1xuXG5cdHZhciBMRU5fTE5fUkUgPSB1c2VfdHlwZWRfYXJyYXlzID8gbmV3IFVpbnQ4QXJyYXkoMHgxMDMpIDogW107XG5cdGZvcihqID0gMCwgayA9IDA7IGogPCBMRU5fTE4ubGVuZ3RoIC0gMTsgKytqKSB7XG5cdFx0Zm9yKDsgayA8IExFTl9MTltqKzFdOyArK2spIExFTl9MTl9SRVtrXSA9IGo7XG5cdH1cblxuXHRmdW5jdGlvbiB3cml0ZV9zdG9yZWQoZGF0YSwgb3V0KSB7XG5cdFx0dmFyIGJvZmYgPSAwO1xuXHRcdHdoaWxlKGJvZmYgPCBkYXRhLmxlbmd0aCkge1xuXHRcdFx0dmFyIEwgPSBNYXRoLm1pbigweEZGRkYsIGRhdGEubGVuZ3RoIC0gYm9mZik7XG5cdFx0XHR2YXIgaCA9IGJvZmYgKyBMID09IGRhdGEubGVuZ3RoO1xuXHRcdFx0b3V0LndyaXRlX3NoaWZ0KDEsICtoKTtcblx0XHRcdG91dC53cml0ZV9zaGlmdCgyLCBMKTtcblx0XHRcdG91dC53cml0ZV9zaGlmdCgyLCAofkwpICYgMHhGRkZGKTtcblx0XHRcdHdoaWxlKEwtLSA+IDApIG91dFtvdXQubCsrXSA9IGRhdGFbYm9mZisrXTtcblx0XHR9XG5cdFx0cmV0dXJuIG91dC5sO1xuXHR9XG5cblx0LyogRml4ZWQgSHVmZm1hbiAqL1xuXHRmdW5jdGlvbiB3cml0ZV9odWZmX2ZpeGVkKGRhdGEsIG91dCkge1xuXHRcdHZhciBibCA9IDA7XG5cdFx0dmFyIGJvZmYgPSAwO1xuXHRcdHZhciBhZGRycyA9IHVzZV90eXBlZF9hcnJheXMgPyBuZXcgVWludDE2QXJyYXkoMHg4MDAwKSA6IFtdO1xuXHRcdHdoaWxlKGJvZmYgPCBkYXRhLmxlbmd0aCkge1xuXHRcdFx0dmFyIEwgPSAvKiBkYXRhLmxlbmd0aCAtIGJvZmY7ICovIE1hdGgubWluKDB4RkZGRiwgZGF0YS5sZW5ndGggLSBib2ZmKTtcblxuXHRcdFx0Lyogd3JpdGUgYSBzdG9yZWQgYmxvY2sgZm9yIHNob3J0IGRhdGEgKi9cblx0XHRcdGlmKEwgPCAxMCkge1xuXHRcdFx0XHRibCA9IHdyaXRlX2JpdHNfMyhvdXQsIGJsLCArISEoYm9mZiArIEwgPT0gZGF0YS5sZW5ndGgpKTsgLy8ganNoaW50IGlnbm9yZTpsaW5lXG5cdFx0XHRcdGlmKGJsICYgNykgYmwgKz0gOCAtIChibCAmIDcpO1xuXHRcdFx0XHRvdXQubCA9IChibCAvIDgpIHwgMDtcblx0XHRcdFx0b3V0LndyaXRlX3NoaWZ0KDIsIEwpO1xuXHRcdFx0XHRvdXQud3JpdGVfc2hpZnQoMiwgKH5MKSAmIDB4RkZGRik7XG5cdFx0XHRcdHdoaWxlKEwtLSA+IDApIG91dFtvdXQubCsrXSA9IGRhdGFbYm9mZisrXTtcblx0XHRcdFx0YmwgPSBvdXQubCAqIDg7XG5cdFx0XHRcdGNvbnRpbnVlO1xuXHRcdFx0fVxuXG5cdFx0XHRibCA9IHdyaXRlX2JpdHNfMyhvdXQsIGJsLCArISEoYm9mZiArIEwgPT0gZGF0YS5sZW5ndGgpICsgMik7IC8vIGpzaGludCBpZ25vcmU6bGluZVxuXHRcdFx0dmFyIGhhc2ggPSAwO1xuXHRcdFx0d2hpbGUoTC0tID4gMCkge1xuXHRcdFx0XHR2YXIgZCA9IGRhdGFbYm9mZl07XG5cdFx0XHRcdGhhc2ggPSAoKGhhc2ggPDwgNSkgXiBkKSAmIDB4N0ZGRjtcblxuXHRcdFx0XHR2YXIgbWF0Y2ggPSAtMSwgbWxlbiA9IDA7XG5cblx0XHRcdFx0aWYoKG1hdGNoID0gYWRkcnNbaGFzaF0pKSB7XG5cdFx0XHRcdFx0bWF0Y2ggfD0gYm9mZiAmIH4weDdGRkY7XG5cdFx0XHRcdFx0aWYobWF0Y2ggPiBib2ZmKSBtYXRjaCAtPSAweDgwMDA7XG5cdFx0XHRcdFx0aWYobWF0Y2ggPCBib2ZmKSB3aGlsZShkYXRhW21hdGNoICsgbWxlbl0gPT0gZGF0YVtib2ZmICsgbWxlbl0gJiYgbWxlbiA8IDI1MCkgKyttbGVuO1xuXHRcdFx0XHR9XG5cblx0XHRcdFx0aWYobWxlbiA+IDIpIHtcblx0XHRcdFx0XHQvKiBDb3B5IFRva2VuICAqL1xuXHRcdFx0XHRcdGQgPSBMRU5fTE5fUkVbbWxlbl07XG5cdFx0XHRcdFx0aWYoZCA8PSAyMikgYmwgPSB3cml0ZV9iaXRzXzgob3V0LCBibCwgYml0c3dhcDhbZCsxXT4+MSkgLSAxO1xuXHRcdFx0XHRcdGVsc2Uge1xuXHRcdFx0XHRcdFx0d3JpdGVfYml0c184KG91dCwgYmwsIDMpO1xuXHRcdFx0XHRcdFx0YmwgKz0gNTtcblx0XHRcdFx0XHRcdHdyaXRlX2JpdHNfOChvdXQsIGJsLCBiaXRzd2FwOFtkLTIzXT4+NSk7XG5cdFx0XHRcdFx0XHRibCArPSAzO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0XHR2YXIgbGVuX2ViID0gKGQgPCA4KSA/IDAgOiAoKGQgLSA0KT4+Mik7XG5cdFx0XHRcdFx0aWYobGVuX2ViID4gMCkge1xuXHRcdFx0XHRcdFx0d3JpdGVfYml0c18xNihvdXQsIGJsLCBtbGVuIC0gTEVOX0xOW2RdKTtcblx0XHRcdFx0XHRcdGJsICs9IGxlbl9lYjtcblx0XHRcdFx0XHR9XG5cblx0XHRcdFx0XHRkID0gRFNUX0xOX1JFW2JvZmYgLSBtYXRjaF07XG5cdFx0XHRcdFx0YmwgPSB3cml0ZV9iaXRzXzgob3V0LCBibCwgYml0c3dhcDhbZF0+PjMpO1xuXHRcdFx0XHRcdGJsIC09IDM7XG5cblx0XHRcdFx0XHR2YXIgZHN0X2ViID0gZCA8IDQgPyAwIDogKGQtMik+PjE7XG5cdFx0XHRcdFx0aWYoZHN0X2ViID4gMCkge1xuXHRcdFx0XHRcdFx0d3JpdGVfYml0c18xNihvdXQsIGJsLCBib2ZmIC0gbWF0Y2ggLSBEU1RfTE5bZF0pO1xuXHRcdFx0XHRcdFx0YmwgKz0gZHN0X2ViO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0XHRmb3IodmFyIHEgPSAwOyBxIDwgbWxlbjsgKytxKSB7XG5cdFx0XHRcdFx0XHRhZGRyc1toYXNoXSA9IGJvZmYgJiAweDdGRkY7XG5cdFx0XHRcdFx0XHRoYXNoID0gKChoYXNoIDw8IDUpIF4gZGF0YVtib2ZmXSkgJiAweDdGRkY7XG5cdFx0XHRcdFx0XHQrK2JvZmY7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHRcdEwtPSBtbGVuIC0gMTtcblx0XHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0XHQvKiBMaXRlcmFsIFRva2VuICovXG5cdFx0XHRcdFx0aWYoZCA8PSAxNDMpIGQgPSBkICsgNDg7XG5cdFx0XHRcdFx0ZWxzZSBibCA9IHdyaXRlX2JpdHNfMShvdXQsIGJsLCAxKTtcblx0XHRcdFx0XHRibCA9IHdyaXRlX2JpdHNfOChvdXQsIGJsLCBiaXRzd2FwOFtkXSk7XG5cdFx0XHRcdFx0YWRkcnNbaGFzaF0gPSBib2ZmICYgMHg3RkZGO1xuXHRcdFx0XHRcdCsrYm9mZjtcblx0XHRcdFx0fVxuXHRcdFx0fVxuXG5cdFx0XHRibCA9IHdyaXRlX2JpdHNfOChvdXQsIGJsLCAwKSAtIDE7XG5cdFx0fVxuXHRcdG91dC5sID0gKChibCArIDcpLzgpfDA7XG5cdFx0cmV0dXJuIG91dC5sO1xuXHR9XG5cdHJldHVybiBmdW5jdGlvbiBfZGVmbGF0ZVJhdyhkYXRhLCBvdXQpIHtcblx0XHRpZihkYXRhLmxlbmd0aCA8IDgpIHJldHVybiB3cml0ZV9zdG9yZWQoZGF0YSwgb3V0KTtcblx0XHRyZXR1cm4gd3JpdGVfaHVmZl9maXhlZChkYXRhLCBvdXQpO1xuXHR9O1xufSkoKTtcblxuZnVuY3Rpb24gX2RlZmxhdGUoZGF0YSkge1xuXHR2YXIgYnVmID0gbmV3X2J1Zig1MCtNYXRoLmZsb29yKGRhdGEubGVuZ3RoKjEuMSkpO1xuXHR2YXIgb2ZmID0gX2RlZmxhdGVSYXcoZGF0YSwgYnVmKTtcblx0cmV0dXJuIGJ1Zi5zbGljZSgwLCBvZmYpO1xufVxuLyogbW9kaWZpZWQgaW5mbGF0ZSBmdW5jdGlvbiBhbHNvIG1vdmVzIG9yaWdpbmFsIHJlYWQgaGVhZCAqL1xuXG52YXIgZHluX2xtYXAgPSB1c2VfdHlwZWRfYXJyYXlzID8gbmV3IFVpbnQxNkFycmF5KDMyNzY4KSA6IHplcm9fZmlsbF9hcnJheSgzMjc2OCk7XG52YXIgZHluX2RtYXAgPSB1c2VfdHlwZWRfYXJyYXlzID8gbmV3IFVpbnQxNkFycmF5KDMyNzY4KSA6IHplcm9fZmlsbF9hcnJheSgzMjc2OCk7XG52YXIgZHluX2NtYXAgPSB1c2VfdHlwZWRfYXJyYXlzID8gbmV3IFVpbnQxNkFycmF5KDEyOCkgICA6IHplcm9fZmlsbF9hcnJheSgxMjgpO1xudmFyIGR5bl9sZW5fMSA9IDEsIGR5bl9sZW5fMiA9IDE7XG5cbi8qIDUuNS4zIEV4cGFuZGluZyBIdWZmbWFuIENvZGVzICovXG5mdW5jdGlvbiBkeW4oZGF0YSwgYm9mZi8qOm51bWJlciovKSB7XG5cdC8qIG5vbWVuY2xhdHVyZSBmcm9tIFJGQzE5NTEgcmVmZXJzIHRvIGJpdCB2YWx1ZXM7IHRoZXNlIGFyZSBvZmZzZXQgYnkgdGhlIGltcGxpY2l0IGNvbnN0YW50ICovXG5cdHZhciBfSExJVCA9IHJlYWRfYml0c181KGRhdGEsIGJvZmYpICsgMjU3OyBib2ZmICs9IDU7XG5cdHZhciBfSERJU1QgPSByZWFkX2JpdHNfNShkYXRhLCBib2ZmKSArIDE7IGJvZmYgKz0gNTtcblx0dmFyIF9IQ0xFTiA9IHJlYWRfYml0c180KGRhdGEsIGJvZmYpICsgNDsgYm9mZiArPSA0O1xuXHR2YXIgdyA9IDA7XG5cblx0LyogZ3JhYiBhbmQgc3RvcmUgY29kZSBsZW5ndGhzICovXG5cdHZhciBjbGVucyA9IHVzZV90eXBlZF9hcnJheXMgPyBuZXcgVWludDhBcnJheSgxOSkgOiB6ZXJvX2ZpbGxfYXJyYXkoMTkpO1xuXHR2YXIgY3RyZWUgPSBbIDAsIDAsIDAsIDAsIDAsIDAsIDAsIDAsIDAsIDAsIDAsIDAsIDAsIDAsIDAsIDAsIDAsIDAsIDAgXTtcblx0dmFyIG1heGxlbiA9IDE7XG5cdHZhciBibF9jb3VudCA9ICB1c2VfdHlwZWRfYXJyYXlzID8gbmV3IFVpbnQ4QXJyYXkoOCkgOiB6ZXJvX2ZpbGxfYXJyYXkoOCk7XG5cdHZhciBuZXh0X2NvZGUgPSB1c2VfdHlwZWRfYXJyYXlzID8gbmV3IFVpbnQ4QXJyYXkoOCkgOiB6ZXJvX2ZpbGxfYXJyYXkoOCk7XG5cdHZhciBMID0gY2xlbnMubGVuZ3RoOyAvKiAxOSAqL1xuXHRmb3IodmFyIGkgPSAwOyBpIDwgX0hDTEVOOyArK2kpIHtcblx0XHRjbGVuc1tDTEVOX09SREVSW2ldXSA9IHcgPSByZWFkX2JpdHNfMyhkYXRhLCBib2ZmKTtcblx0XHRpZihtYXhsZW4gPCB3KSBtYXhsZW4gPSB3O1xuXHRcdGJsX2NvdW50W3ddKys7XG5cdFx0Ym9mZiArPSAzO1xuXHR9XG5cblx0LyogYnVpbGQgY29kZSB0cmVlICovXG5cdHZhciBjY29kZSA9IDA7XG5cdGJsX2NvdW50WzBdID0gMDtcblx0Zm9yKGkgPSAxOyBpIDw9IG1heGxlbjsgKytpKSBuZXh0X2NvZGVbaV0gPSBjY29kZSA9IChjY29kZSArIGJsX2NvdW50W2ktMV0pPDwxO1xuXHRmb3IoaSA9IDA7IGkgPCBMOyArK2kpIGlmKChjY29kZSA9IGNsZW5zW2ldKSAhPSAwKSBjdHJlZVtpXSA9IG5leHRfY29kZVtjY29kZV0rKztcblx0LyogY21hcFs3IGJpdHMgZnJvbSBzdHJlYW1dID0gKG9mZiY3KSArIChsaXQ8PDMpICovXG5cdHZhciBjbGVuaSA9IDA7XG5cdGZvcihpID0gMDsgaSA8IEw7ICsraSkge1xuXHRcdGNsZW5pID0gY2xlbnNbaV07XG5cdFx0aWYoY2xlbmkgIT0gMCkge1xuXHRcdFx0Y2NvZGUgPSBiaXRzd2FwOFtjdHJlZVtpXV0+Pig4LWNsZW5pKTtcblx0XHRcdGZvcih2YXIgaiA9ICgxPDwoNy1jbGVuaSkpLTE7IGo+PTA7IC0taikgZHluX2NtYXBbY2NvZGV8KGo8PGNsZW5pKV0gPSAoY2xlbmkmNykgfCAoaTw8Myk7XG5cdFx0fVxuXHR9XG5cblx0LyogcmVhZCBsaXRlcmFsIGFuZCBkaXN0IGNvZGVzIGF0IG9uY2UgKi9cblx0dmFyIGhjb2Rlcy8qOkFycmF5PG51bWJlcj4qLyA9IFtdO1xuXHRtYXhsZW4gPSAxO1xuXHRmb3IoOyBoY29kZXMubGVuZ3RoIDwgX0hMSVQgKyBfSERJU1Q7KSB7XG5cdFx0Y2NvZGUgPSBkeW5fY21hcFtyZWFkX2JpdHNfNyhkYXRhLCBib2ZmKV07XG5cdFx0Ym9mZiArPSBjY29kZSAmIDc7XG5cdFx0c3dpdGNoKChjY29kZSA+Pj49IDMpKSB7XG5cdFx0XHRjYXNlIDE2OlxuXHRcdFx0XHR3ID0gMyArIHJlYWRfYml0c18yKGRhdGEsIGJvZmYpOyBib2ZmICs9IDI7XG5cdFx0XHRcdGNjb2RlID0gaGNvZGVzW2hjb2Rlcy5sZW5ndGggLSAxXTtcblx0XHRcdFx0d2hpbGUody0tID4gMCkgaGNvZGVzLnB1c2goY2NvZGUpO1xuXHRcdFx0XHRicmVhaztcblx0XHRcdGNhc2UgMTc6XG5cdFx0XHRcdHcgPSAzICsgcmVhZF9iaXRzXzMoZGF0YSwgYm9mZik7IGJvZmYgKz0gMztcblx0XHRcdFx0d2hpbGUody0tID4gMCkgaGNvZGVzLnB1c2goMCk7XG5cdFx0XHRcdGJyZWFrO1xuXHRcdFx0Y2FzZSAxODpcblx0XHRcdFx0dyA9IDExICsgcmVhZF9iaXRzXzcoZGF0YSwgYm9mZik7IGJvZmYgKz0gNztcblx0XHRcdFx0d2hpbGUodyAtLSA+IDApIGhjb2Rlcy5wdXNoKDApO1xuXHRcdFx0XHRicmVhaztcblx0XHRcdGRlZmF1bHQ6XG5cdFx0XHRcdGhjb2Rlcy5wdXNoKGNjb2RlKTtcblx0XHRcdFx0aWYobWF4bGVuIDwgY2NvZGUpIG1heGxlbiA9IGNjb2RlO1xuXHRcdFx0XHRicmVhaztcblx0XHR9XG5cdH1cblxuXHQvKiBidWlsZCBsaXRlcmFsIC8gbGVuZ3RoIHRyZWVzICovXG5cdHZhciBoMSA9IGhjb2Rlcy5zbGljZSgwLCBfSExJVCksIGgyID0gaGNvZGVzLnNsaWNlKF9ITElUKTtcblx0Zm9yKGkgPSBfSExJVDsgaSA8IDI4NjsgKytpKSBoMVtpXSA9IDA7XG5cdGZvcihpID0gX0hESVNUOyBpIDwgMzA7ICsraSkgaDJbaV0gPSAwO1xuXHRkeW5fbGVuXzEgPSBidWlsZF90cmVlKGgxLCBkeW5fbG1hcCwgMjg2KTtcblx0ZHluX2xlbl8yID0gYnVpbGRfdHJlZShoMiwgZHluX2RtYXAsIDMwKTtcblx0cmV0dXJuIGJvZmY7XG59XG5cbi8qIHJldHVybiBbIGRhdGEsIGJ5dGVzUmVhZCBdICovXG5mdW5jdGlvbiBpbmZsYXRlKGRhdGEsIHVzei8qOm51bWJlciovKSB7XG5cdC8qIHNob3J0Y2lyY3VpdCBmb3IgZW1wdHkgYnVmZmVyIFsweDAzLCAweDAwXSAqL1xuXHRpZihkYXRhWzBdID09IDMgJiYgIShkYXRhWzFdICYgMHgzKSkgeyByZXR1cm4gW25ld19yYXdfYnVmKHVzeiksIDJdOyB9XG5cblx0LyogYml0IG9mZnNldCAqL1xuXHR2YXIgYm9mZiA9IDA7XG5cblx0LyogaGVhZGVyIGluY2x1ZGVzIGZpbmFsIGJpdCBhbmQgdHlwZSBiaXRzICovXG5cdHZhciBoZWFkZXIgPSAwO1xuXG5cdHZhciBvdXRidWYgPSBuZXdfdW5zYWZlX2J1Zih1c3ogPyB1c3ogOiAoMTw8MTgpKTtcblx0dmFyIHdvZmYgPSAwO1xuXHR2YXIgT0wgPSBvdXRidWYubGVuZ3RoPj4+MDtcblx0dmFyIG1heF9sZW5fMSA9IDAsIG1heF9sZW5fMiA9IDA7XG5cblx0d2hpbGUoKGhlYWRlciYxKSA9PSAwKSB7XG5cdFx0aGVhZGVyID0gcmVhZF9iaXRzXzMoZGF0YSwgYm9mZik7IGJvZmYgKz0gMztcblx0XHRpZigoaGVhZGVyID4+PiAxKSA9PSAwKSB7XG5cdFx0XHQvKiBTdG9yZWQgYmxvY2sgKi9cblx0XHRcdGlmKGJvZmYgJiA3KSBib2ZmICs9IDggLSAoYm9mZiY3KTtcblx0XHRcdC8qIDIgYnl0ZXMgc3osIDIgYnl0ZXMgYml0IGludmVyc2UgKi9cblx0XHRcdHZhciBzeiA9IGRhdGFbYm9mZj4+PjNdIHwgZGF0YVsoYm9mZj4+PjMpKzFdPDw4O1xuXHRcdFx0Ym9mZiArPSAzMjtcblx0XHRcdC8qIHB1c2ggc3ogYnl0ZXMgKi9cblx0XHRcdGlmKHN6ID4gMCkge1xuXHRcdFx0XHRpZighdXN6ICYmIE9MIDwgd29mZiArIHN6KSB7IG91dGJ1ZiA9IHJlYWxsb2Mob3V0YnVmLCB3b2ZmICsgc3opOyBPTCA9IG91dGJ1Zi5sZW5ndGg7IH1cblx0XHRcdFx0d2hpbGUoc3otLSA+IDApIHsgb3V0YnVmW3dvZmYrK10gPSBkYXRhW2JvZmY+Pj4zXTsgYm9mZiArPSA4OyB9XG5cdFx0XHR9XG5cdFx0XHRjb250aW51ZTtcblx0XHR9IGVsc2UgaWYoKGhlYWRlciA+PiAxKSA9PSAxKSB7XG5cdFx0XHQvKiBGaXhlZCBIdWZmbWFuICovXG5cdFx0XHRtYXhfbGVuXzEgPSA5OyBtYXhfbGVuXzIgPSA1O1xuXHRcdH0gZWxzZSB7XG5cdFx0XHQvKiBEeW5hbWljIEh1ZmZtYW4gKi9cblx0XHRcdGJvZmYgPSBkeW4oZGF0YSwgYm9mZik7XG5cdFx0XHRtYXhfbGVuXzEgPSBkeW5fbGVuXzE7IG1heF9sZW5fMiA9IGR5bl9sZW5fMjtcblx0XHR9XG5cdFx0Zm9yKDs7KSB7IC8vIHdoaWxlKHRydWUpIGlzIGFwcGFyZW50bHkgb3V0IG9mIHZvZ3VlIGluIG1vZGVybiBKUyBjaXJjbGVzXG5cdFx0XHRpZighdXN6ICYmIChPTCA8IHdvZmYgKyAzMjc2NykpIHsgb3V0YnVmID0gcmVhbGxvYyhvdXRidWYsIHdvZmYgKyAzMjc2Nyk7IE9MID0gb3V0YnVmLmxlbmd0aDsgfVxuXHRcdFx0LyogaW5nZXN0IGNvZGUgYW5kIG1vdmUgcmVhZCBoZWFkICovXG5cdFx0XHR2YXIgYml0cyA9IHJlYWRfYml0c19uKGRhdGEsIGJvZmYsIG1heF9sZW5fMSk7XG5cdFx0XHR2YXIgY29kZSA9IChoZWFkZXI+Pj4xKSA9PSAxID8gZml4X2xtYXBbYml0c10gOiBkeW5fbG1hcFtiaXRzXTtcblx0XHRcdGJvZmYgKz0gY29kZSAmIDE1OyBjb2RlID4+Pj0gNDtcblx0XHRcdC8qIDAtMjU1IGFyZSBsaXRlcmFscywgMjU2IGlzIGVuZCBvZiBibG9jayB0b2tlbiwgMjU3KyBhcmUgY29weSB0b2tlbnMgKi9cblx0XHRcdGlmKCgoY29kZT4+PjgpJjB4RkYpID09PSAwKSBvdXRidWZbd29mZisrXSA9IGNvZGU7XG5cdFx0XHRlbHNlIGlmKGNvZGUgPT0gMjU2KSBicmVhaztcblx0XHRcdGVsc2Uge1xuXHRcdFx0XHRjb2RlIC09IDI1Nztcblx0XHRcdFx0dmFyIGxlbl9lYiA9IChjb2RlIDwgOCkgPyAwIDogKChjb2RlLTQpPj4yKTsgaWYobGVuX2ViID4gNSkgbGVuX2ViID0gMDtcblx0XHRcdFx0dmFyIHRndCA9IHdvZmYgKyBMRU5fTE5bY29kZV07XG5cdFx0XHRcdC8qIGxlbmd0aCBleHRyYSBiaXRzICovXG5cdFx0XHRcdGlmKGxlbl9lYiA+IDApIHtcblx0XHRcdFx0XHR0Z3QgKz0gcmVhZF9iaXRzX24oZGF0YSwgYm9mZiwgbGVuX2ViKTtcblx0XHRcdFx0XHRib2ZmICs9IGxlbl9lYjtcblx0XHRcdFx0fVxuXG5cdFx0XHRcdC8qIGRpc3QgY29kZSAqL1xuXHRcdFx0XHRiaXRzID0gcmVhZF9iaXRzX24oZGF0YSwgYm9mZiwgbWF4X2xlbl8yKTtcblx0XHRcdFx0Y29kZSA9IChoZWFkZXI+Pj4xKSA9PSAxID8gZml4X2RtYXBbYml0c10gOiBkeW5fZG1hcFtiaXRzXTtcblx0XHRcdFx0Ym9mZiArPSBjb2RlICYgMTU7IGNvZGUgPj4+PSA0O1xuXHRcdFx0XHR2YXIgZHN0X2ViID0gKGNvZGUgPCA0ID8gMCA6IChjb2RlLTIpPj4xKTtcblx0XHRcdFx0dmFyIGRzdCA9IERTVF9MTltjb2RlXTtcblx0XHRcdFx0LyogZGlzdCBleHRyYSBiaXRzICovXG5cdFx0XHRcdGlmKGRzdF9lYiA+IDApIHtcblx0XHRcdFx0XHRkc3QgKz0gcmVhZF9iaXRzX24oZGF0YSwgYm9mZiwgZHN0X2ViKTtcblx0XHRcdFx0XHRib2ZmICs9IGRzdF9lYjtcblx0XHRcdFx0fVxuXG5cdFx0XHRcdC8qIGluIHRoZSBjb21tb24gY2FzZSwgbWFudWFsIGJ5dGUgY29weSBpcyBmYXN0ZXIgdGhhbiBUQSBzZXQgLyBCdWZmZXIgY29weSAqL1xuXHRcdFx0XHRpZighdXN6ICYmIE9MIDwgdGd0KSB7IG91dGJ1ZiA9IHJlYWxsb2Mob3V0YnVmLCB0Z3QgKyAxMDApOyBPTCA9IG91dGJ1Zi5sZW5ndGg7IH1cblx0XHRcdFx0d2hpbGUod29mZiA8IHRndCkgeyBvdXRidWZbd29mZl0gPSBvdXRidWZbd29mZiAtIGRzdF07ICsrd29mZjsgfVxuXHRcdFx0fVxuXHRcdH1cblx0fVxuXHRpZih1c3opIHJldHVybiBbb3V0YnVmLCAoYm9mZis3KT4+PjNdO1xuXHRyZXR1cm4gW291dGJ1Zi5zbGljZSgwLCB3b2ZmKSwgKGJvZmYrNyk+Pj4zXTtcbn1cblxuZnVuY3Rpb24gX2luZmxhdGUocGF5bG9hZCwgdXN6KSB7XG5cdHZhciBkYXRhID0gcGF5bG9hZC5zbGljZShwYXlsb2FkLmx8fDApO1xuXHR2YXIgb3V0ID0gaW5mbGF0ZShkYXRhLCB1c3opO1xuXHRwYXlsb2FkLmwgKz0gb3V0WzFdO1xuXHRyZXR1cm4gb3V0WzBdO1xufVxuXG5mdW5jdGlvbiB3YXJuX29yX3Rocm93KHdybiwgbXNnKSB7XG5cdGlmKHdybikgeyBpZih0eXBlb2YgY29uc29sZSAhPT0gJ3VuZGVmaW5lZCcpIGNvbnNvbGUuZXJyb3IobXNnKTsgfVxuXHRlbHNlIHRocm93IG5ldyBFcnJvcihtc2cpO1xufVxuXG5mdW5jdGlvbiBwYXJzZV96aXAoZmlsZS8qOlJhd0J5dGVzKi8sIG9wdGlvbnMvKjpDRkJSZWFkT3B0cyovKS8qOkNGQkNvbnRhaW5lciovIHtcblx0dmFyIGJsb2IvKjpDRkJsb2IqLyA9IC8qOjooKi9maWxlLyo6OiA6YW55KSovO1xuXHRwcmVwX2Jsb2IoYmxvYiwgMCk7XG5cblx0dmFyIEZpbGVJbmRleC8qOkNGQkZpbGVJbmRleCovID0gW10sIEZ1bGxQYXRocy8qOkFycmF5PHN0cmluZz4qLyA9IFtdO1xuXHR2YXIgbyA9IHtcblx0XHRGaWxlSW5kZXg6IEZpbGVJbmRleCxcblx0XHRGdWxsUGF0aHM6IEZ1bGxQYXRoc1xuXHR9O1xuXHRpbml0X2NmYihvLCB7IHJvb3Q6IG9wdGlvbnMucm9vdCB9KTtcblxuXHQvKiBmaW5kIGVuZCBvZiBjZW50cmFsIGRpcmVjdG9yeSwgc3RhcnQganVzdCBhZnRlciBzaWduYXR1cmUgKi9cblx0dmFyIGkgPSBibG9iLmxlbmd0aCAtIDQ7XG5cdHdoaWxlKChibG9iW2ldICE9IDB4NTAgfHwgYmxvYltpKzFdICE9IDB4NGIgfHwgYmxvYltpKzJdICE9IDB4MDUgfHwgYmxvYltpKzNdICE9IDB4MDYpICYmIGkgPj0gMCkgLS1pO1xuXHRibG9iLmwgPSBpICsgNDtcblxuXHQvKiBwYXJzZSBlbmQgb2YgY2VudHJhbCBkaXJlY3RvcnkgKi9cblx0YmxvYi5sICs9IDQ7XG5cdHZhciBmY250ID0gYmxvYi5yZWFkX3NoaWZ0KDIpO1xuXHRibG9iLmwgKz0gNjtcblx0dmFyIHN0YXJ0X2NkID0gYmxvYi5yZWFkX3NoaWZ0KDQpO1xuXG5cdC8qIHBhcnNlIGNlbnRyYWwgZGlyZWN0b3J5ICovXG5cdGJsb2IubCA9IHN0YXJ0X2NkO1xuXG5cdGZvcihpID0gMDsgaSA8IGZjbnQ7ICsraSkge1xuXHRcdC8qIHRydXN0IGxvY2FsIGZpbGUgaGVhZGVyIGluc3RlYWQgb2YgQ0QgZW50cnkgKi9cblx0XHRibG9iLmwgKz0gMjA7XG5cdFx0dmFyIGNzeiA9IGJsb2IucmVhZF9zaGlmdCg0KTtcblx0XHR2YXIgdXN6ID0gYmxvYi5yZWFkX3NoaWZ0KDQpO1xuXHRcdHZhciBuYW1lbGVuID0gYmxvYi5yZWFkX3NoaWZ0KDIpO1xuXHRcdHZhciBlZnN6ID0gYmxvYi5yZWFkX3NoaWZ0KDIpO1xuXHRcdHZhciBmY3N6ID0gYmxvYi5yZWFkX3NoaWZ0KDIpO1xuXHRcdGJsb2IubCArPSA4O1xuXHRcdHZhciBvZmZzZXQgPSBibG9iLnJlYWRfc2hpZnQoNCk7XG5cdFx0dmFyIEVGID0gcGFyc2VfZXh0cmFfZmllbGQoLyo6OigqL2Jsb2Iuc2xpY2UoYmxvYi5sK25hbWVsZW4sIGJsb2IubCtuYW1lbGVuK2Vmc3opLyo6OiA6YW55KSovKTtcblx0XHRibG9iLmwgKz0gbmFtZWxlbiArIGVmc3ogKyBmY3N6O1xuXG5cdFx0dmFyIEwgPSBibG9iLmw7XG5cdFx0YmxvYi5sID0gb2Zmc2V0ICsgNDtcblx0XHRwYXJzZV9sb2NhbF9maWxlKGJsb2IsIGNzeiwgdXN6LCBvLCBFRik7XG5cdFx0YmxvYi5sID0gTDtcblx0fVxuXHRyZXR1cm4gbztcbn1cblxuXG4vKiBoZWFkIHN0YXJ0cyBqdXN0IGFmdGVyIGxvY2FsIGZpbGUgaGVhZGVyIHNpZ25hdHVyZSAqL1xuZnVuY3Rpb24gcGFyc2VfbG9jYWxfZmlsZShibG9iLyo6Q0ZCbG9iKi8sIGNzei8qOm51bWJlciovLCB1c3ovKjpudW1iZXIqLywgby8qOkNGQkNvbnRhaW5lciovLCBFRikge1xuXHQvKiBbbG9jYWwgZmlsZSBoZWFkZXJdICovXG5cdGJsb2IubCArPSAyO1xuXHR2YXIgZmxhZ3MgPSBibG9iLnJlYWRfc2hpZnQoMik7XG5cdHZhciBtZXRoID0gYmxvYi5yZWFkX3NoaWZ0KDIpO1xuXHR2YXIgZGF0ZSA9IHBhcnNlX2Rvc19kYXRlKGJsb2IpO1xuXG5cdGlmKGZsYWdzICYgMHgyMDQxKSB0aHJvdyBuZXcgRXJyb3IoXCJVbnN1cHBvcnRlZCBaSVAgZW5jcnlwdGlvblwiKTtcblx0dmFyIGNyYzMyID0gYmxvYi5yZWFkX3NoaWZ0KDQpO1xuXHR2YXIgX2NzeiA9IGJsb2IucmVhZF9zaGlmdCg0KTtcblx0dmFyIF91c3ogPSBibG9iLnJlYWRfc2hpZnQoNCk7XG5cblx0dmFyIG5hbWVsZW4gPSBibG9iLnJlYWRfc2hpZnQoMik7XG5cdHZhciBlZnN6ID0gYmxvYi5yZWFkX3NoaWZ0KDIpO1xuXG5cdC8vIFRPRE86IGZsYWdzICYgKDE8PDExKSAvLyBVVEY4XG5cdHZhciBuYW1lID0gXCJcIjsgZm9yKHZhciBpID0gMDsgaSA8IG5hbWVsZW47ICsraSkgbmFtZSArPSBTdHJpbmcuZnJvbUNoYXJDb2RlKGJsb2JbYmxvYi5sKytdKTtcblx0aWYoZWZzeikge1xuXHRcdHZhciBlZiA9IHBhcnNlX2V4dHJhX2ZpZWxkKC8qOjooKi9ibG9iLnNsaWNlKGJsb2IubCwgYmxvYi5sICsgZWZzeikvKjo6IDphbnkpKi8pO1xuXHRcdGlmKChlZlsweDU0NTVdfHx7fSkubXQpIGRhdGUgPSBlZlsweDU0NTVdLm10O1xuXHRcdGlmKCgoRUZ8fHt9KVsweDU0NTVdfHx7fSkubXQpIGRhdGUgPSBFRlsweDU0NTVdLm10O1xuXHR9XG5cdGJsb2IubCArPSBlZnN6O1xuXG5cdC8qIFtlbmNyeXB0aW9uIGhlYWRlcl0gKi9cblxuXHQvKiBbZmlsZSBkYXRhXSAqL1xuXHR2YXIgZGF0YSA9IGJsb2Iuc2xpY2UoYmxvYi5sLCBibG9iLmwgKyBfY3N6KTtcblx0c3dpdGNoKG1ldGgpIHtcblx0XHRjYXNlIDg6IGRhdGEgPSBfaW5mbGF0ZVJhd1N5bmMoYmxvYiwgX3Vzeik7IGJyZWFrO1xuXHRcdGNhc2UgMDogYnJlYWs7IC8vIFRPRE86IHNjYW4gZm9yIG1hZ2ljIG51bWJlclxuXHRcdGRlZmF1bHQ6IHRocm93IG5ldyBFcnJvcihcIlVuc3VwcG9ydGVkIFpJUCBDb21wcmVzc2lvbiBtZXRob2QgXCIgKyBtZXRoKTtcblx0fVxuXG5cdC8qIFtkYXRhIGRlc2NyaXB0b3JdICovXG5cdHZhciB3cm4gPSBmYWxzZTtcblx0aWYoZmxhZ3MgJiA4KSB7XG5cdFx0Y3JjMzIgPSBibG9iLnJlYWRfc2hpZnQoNCk7XG5cdFx0aWYoY3JjMzIgPT0gMHgwODA3NGI1MCkgeyBjcmMzMiA9IGJsb2IucmVhZF9zaGlmdCg0KTsgd3JuID0gdHJ1ZTsgfVxuXHRcdF9jc3ogPSBibG9iLnJlYWRfc2hpZnQoNCk7XG5cdFx0X3VzeiA9IGJsb2IucmVhZF9zaGlmdCg0KTtcblx0fVxuXG5cdGlmKF9jc3ogIT0gY3N6KSB3YXJuX29yX3Rocm93KHdybiwgXCJCYWQgY29tcHJlc3NlZCBzaXplOiBcIiArIGNzeiArIFwiICE9IFwiICsgX2Nzeik7XG5cdGlmKF91c3ogIT0gdXN6KSB3YXJuX29yX3Rocm93KHdybiwgXCJCYWQgdW5jb21wcmVzc2VkIHNpemU6IFwiICsgdXN6ICsgXCIgIT0gXCIgKyBfdXN6KTtcblx0Ly92YXIgX2NyYzMyID0gQ1JDMzIuYnVmKGRhdGEsIDApO1xuXHQvL2lmKChjcmMzMj4+MCkgIT0gKF9jcmMzMj4+MCkpIHdhcm5fb3JfdGhyb3cod3JuLCBcIkJhZCBDUkMzMiBjaGVja3N1bTogXCIgKyBjcmMzMiArIFwiICE9IFwiICsgX2NyYzMyKTtcblx0Y2ZiX2FkZChvLCBuYW1lLCBkYXRhLCB7dW5zYWZlOiB0cnVlLCBtdDogZGF0ZX0pO1xufVxuZnVuY3Rpb24gd3JpdGVfemlwKGNmYi8qOkNGQkNvbnRhaW5lciovLCBvcHRpb25zLyo6Q0ZCV3JpdGVPcHRzKi8pLyo6UmF3Qnl0ZXMqLyB7XG5cdHZhciBfb3B0cyA9IG9wdGlvbnMgfHwge307XG5cdHZhciBvdXQgPSBbXSwgY2RpcnMgPSBbXTtcblx0dmFyIG8vKjpDRkJsb2IqLyA9IG5ld19idWYoMSk7XG5cdHZhciBtZXRob2QgPSAoX29wdHMuY29tcHJlc3Npb24gPyA4IDogMCksIGZsYWdzID0gMDtcblx0dmFyIGRlc2MgPSBmYWxzZTtcblx0aWYoZGVzYykgZmxhZ3MgfD0gODtcblx0dmFyIGkgPSAwLCBqID0gMDtcblxuXHR2YXIgc3RhcnRfY2QgPSAwLCBmY250ID0gMDtcblx0dmFyIHJvb3QgPSBjZmIuRnVsbFBhdGhzWzBdLCBmcCA9IHJvb3QsIGZpID0gY2ZiLkZpbGVJbmRleFswXTtcblx0dmFyIGNyY3MgPSBbXTtcblx0dmFyIHN6X2NkID0gMDtcblxuXHRmb3IoaSA9IDE7IGkgPCBjZmIuRnVsbFBhdGhzLmxlbmd0aDsgKytpKSB7XG5cdFx0ZnAgPSBjZmIuRnVsbFBhdGhzW2ldLnNsaWNlKHJvb3QubGVuZ3RoKTsgZmkgPSBjZmIuRmlsZUluZGV4W2ldO1xuXHRcdGlmKCFmaS5zaXplIHx8ICFmaS5jb250ZW50IHx8IGZwID09IFwiXFx1MDAwMVNoMzN0SjVcIikgY29udGludWU7XG5cdFx0dmFyIHN0YXJ0ID0gc3RhcnRfY2Q7XG5cblx0XHQvKiBUT0RPOiBDUDQzNyBmaWxlbmFtZSAqL1xuXHRcdHZhciBuYW1lYnVmID0gbmV3X2J1ZihmcC5sZW5ndGgpO1xuXHRcdGZvcihqID0gMDsgaiA8IGZwLmxlbmd0aDsgKytqKSBuYW1lYnVmLndyaXRlX3NoaWZ0KDEsIGZwLmNoYXJDb2RlQXQoaikgJiAweDdGKTtcblx0XHRuYW1lYnVmID0gbmFtZWJ1Zi5zbGljZSgwLCBuYW1lYnVmLmwpO1xuXHRcdGNyY3NbZmNudF0gPSBDUkMzMi5idWYoLyo6OigoKi9maS5jb250ZW50Lyo6Onx8W10pOmFueSkqLywgMCk7XG5cblx0XHR2YXIgb3V0YnVmID0gZmkuY29udGVudC8qOjp8fFtdKi87XG5cdFx0aWYobWV0aG9kID09IDgpIG91dGJ1ZiA9IF9kZWZsYXRlUmF3U3luYyhvdXRidWYpO1xuXG5cdFx0LyogbG9jYWwgZmlsZSBoZWFkZXIgKi9cblx0XHRvID0gbmV3X2J1ZigzMCk7XG5cdFx0by53cml0ZV9zaGlmdCg0LCAweDA0MDM0YjUwKTtcblx0XHRvLndyaXRlX3NoaWZ0KDIsIDIwKTtcblx0XHRvLndyaXRlX3NoaWZ0KDIsIGZsYWdzKTtcblx0XHRvLndyaXRlX3NoaWZ0KDIsIG1ldGhvZCk7XG5cdFx0LyogVE9ETzogbGFzdCBtb2QgZmlsZSB0aW1lL2RhdGUgKi9cblx0XHRpZihmaS5tdCkgd3JpdGVfZG9zX2RhdGUobywgZmkubXQpO1xuXHRcdGVsc2Ugby53cml0ZV9zaGlmdCg0LCAwKTtcblx0XHRvLndyaXRlX3NoaWZ0KC00LCAoZmxhZ3MgJiA4KSA/IDAgOiBjcmNzW2ZjbnRdKTtcblx0XHRvLndyaXRlX3NoaWZ0KDQsICAoZmxhZ3MgJiA4KSA/IDAgOiBvdXRidWYubGVuZ3RoKTtcblx0XHRvLndyaXRlX3NoaWZ0KDQsICAoZmxhZ3MgJiA4KSA/IDAgOiAvKjo6KCovZmkuY29udGVudC8qOjp8fFtdKSovLmxlbmd0aCk7XG5cdFx0by53cml0ZV9zaGlmdCgyLCBuYW1lYnVmLmxlbmd0aCk7XG5cdFx0by53cml0ZV9zaGlmdCgyLCAwKTtcblxuXHRcdHN0YXJ0X2NkICs9IG8ubGVuZ3RoO1xuXHRcdG91dC5wdXNoKG8pO1xuXHRcdHN0YXJ0X2NkICs9IG5hbWVidWYubGVuZ3RoO1xuXHRcdG91dC5wdXNoKG5hbWVidWYpO1xuXG5cdFx0LyogVE9ETzogZXh0cmEgZmllbGRzPyAqL1xuXG5cdFx0LyogVE9ETzogZW5jcnlwdGlvbiBoZWFkZXIgPyAqL1xuXG5cdFx0c3RhcnRfY2QgKz0gb3V0YnVmLmxlbmd0aDtcblx0XHRvdXQucHVzaChvdXRidWYpO1xuXG5cdFx0LyogZGF0YSBkZXNjcmlwdG9yICovXG5cdFx0aWYoZmxhZ3MgJiA4KSB7XG5cdFx0XHRvID0gbmV3X2J1ZigxMik7XG5cdFx0XHRvLndyaXRlX3NoaWZ0KC00LCBjcmNzW2ZjbnRdKTtcblx0XHRcdG8ud3JpdGVfc2hpZnQoNCwgb3V0YnVmLmxlbmd0aCk7XG5cdFx0XHRvLndyaXRlX3NoaWZ0KDQsIC8qOjooKi9maS5jb250ZW50Lyo6Onx8W10pKi8ubGVuZ3RoKTtcblx0XHRcdHN0YXJ0X2NkICs9IG8ubDtcblx0XHRcdG91dC5wdXNoKG8pO1xuXHRcdH1cblxuXHRcdC8qIGNlbnRyYWwgZGlyZWN0b3J5ICovXG5cdFx0byA9IG5ld19idWYoNDYpO1xuXHRcdG8ud3JpdGVfc2hpZnQoNCwgMHgwMjAxNGI1MCk7XG5cdFx0by53cml0ZV9zaGlmdCgyLCAwKTtcblx0XHRvLndyaXRlX3NoaWZ0KDIsIDIwKTtcblx0XHRvLndyaXRlX3NoaWZ0KDIsIGZsYWdzKTtcblx0XHRvLndyaXRlX3NoaWZ0KDIsIG1ldGhvZCk7XG5cdFx0by53cml0ZV9zaGlmdCg0LCAwKTsgLyogVE9ETzogbGFzdCBtb2QgZmlsZSB0aW1lL2RhdGUgKi9cblx0XHRvLndyaXRlX3NoaWZ0KC00LCBjcmNzW2ZjbnRdKTtcblxuXHRcdG8ud3JpdGVfc2hpZnQoNCwgb3V0YnVmLmxlbmd0aCk7XG5cdFx0by53cml0ZV9zaGlmdCg0LCAvKjo6KCovZmkuY29udGVudC8qOjp8fFtdKSovLmxlbmd0aCk7XG5cdFx0by53cml0ZV9zaGlmdCgyLCBuYW1lYnVmLmxlbmd0aCk7XG5cdFx0by53cml0ZV9zaGlmdCgyLCAwKTtcblx0XHRvLndyaXRlX3NoaWZ0KDIsIDApO1xuXHRcdG8ud3JpdGVfc2hpZnQoMiwgMCk7XG5cdFx0by53cml0ZV9zaGlmdCgyLCAwKTtcblx0XHRvLndyaXRlX3NoaWZ0KDQsIDApO1xuXHRcdG8ud3JpdGVfc2hpZnQoNCwgc3RhcnQpO1xuXG5cdFx0c3pfY2QgKz0gby5sO1xuXHRcdGNkaXJzLnB1c2gobyk7XG5cdFx0c3pfY2QgKz0gbmFtZWJ1Zi5sZW5ndGg7XG5cdFx0Y2RpcnMucHVzaChuYW1lYnVmKTtcblx0XHQrK2ZjbnQ7XG5cdH1cblxuXHQvKiBlbmQgb2YgY2VudHJhbCBkaXJlY3RvcnkgKi9cblx0byA9IG5ld19idWYoMjIpO1xuXHRvLndyaXRlX3NoaWZ0KDQsIDB4MDYwNTRiNTApO1xuXHRvLndyaXRlX3NoaWZ0KDIsIDApO1xuXHRvLndyaXRlX3NoaWZ0KDIsIDApO1xuXHRvLndyaXRlX3NoaWZ0KDIsIGZjbnQpO1xuXHRvLndyaXRlX3NoaWZ0KDIsIGZjbnQpO1xuXHRvLndyaXRlX3NoaWZ0KDQsIHN6X2NkKTtcblx0by53cml0ZV9zaGlmdCg0LCBzdGFydF9jZCk7XG5cdG8ud3JpdGVfc2hpZnQoMiwgMCk7XG5cblx0cmV0dXJuIGJjb25jYXQoKFtiY29uY2F0KChvdXQvKjphbnkqLykpLCBiY29uY2F0KGNkaXJzKSwgb10vKjphbnkqLykpO1xufVxudmFyIENvbnRlbnRUeXBlTWFwID0gKHtcblx0XCJodG1cIjogXCJ0ZXh0L2h0bWxcIixcblx0XCJ4bWxcIjogXCJ0ZXh0L3htbFwiLFxuXG5cdFwiZ2lmXCI6IFwiaW1hZ2UvZ2lmXCIsXG5cdFwianBnXCI6IFwiaW1hZ2UvanBlZ1wiLFxuXHRcInBuZ1wiOiBcImltYWdlL3BuZ1wiLFxuXG5cdFwibXNvXCI6IFwiYXBwbGljYXRpb24veC1tc29cIixcblx0XCJ0aG14XCI6IFwiYXBwbGljYXRpb24vdm5kLm1zLW9mZmljZXRoZW1lXCIsXG5cdFwic2gzM3RqNVwiOiBcImFwcGxpY2F0aW9uL29jdGV0LXN0cmVhbVwiXG59Lyo6YW55Ki8pO1xuXG5mdW5jdGlvbiBnZXRfY29udGVudF90eXBlKGZpLyo6Q0ZCRW50cnkqLywgZnAvKjpzdHJpbmcqLykvKjpzdHJpbmcqLyB7XG5cdGlmKGZpLmN0eXBlKSByZXR1cm4gZmkuY3R5cGU7XG5cblx0dmFyIGV4dCA9IGZpLm5hbWUgfHwgXCJcIiwgbSA9IGV4dC5tYXRjaCgvXFwuKFteXFwuXSspJC8pO1xuXHRpZihtICYmIENvbnRlbnRUeXBlTWFwW21bMV1dKSByZXR1cm4gQ29udGVudFR5cGVNYXBbbVsxXV07XG5cblx0aWYoZnApIHtcblx0XHRtID0gKGV4dCA9IGZwKS5tYXRjaCgvW1xcLlxcXFxdKFteXFwuXFxcXF0pKyQvKTtcblx0XHRpZihtICYmIENvbnRlbnRUeXBlTWFwW21bMV1dKSByZXR1cm4gQ29udGVudFR5cGVNYXBbbVsxXV07XG5cdH1cblxuXHRyZXR1cm4gXCJhcHBsaWNhdGlvbi9vY3RldC1zdHJlYW1cIjtcbn1cblxuLyogNzYgY2hhcmFjdGVyIGNodW5rcyBUT0RPOiBpbnRlcnR3aW5lIGVuY29kaW5nICovXG5mdW5jdGlvbiB3cml0ZV9iYXNlNjRfNzYoYnN0ci8qOnN0cmluZyovKS8qOnN0cmluZyovIHtcblx0dmFyIGRhdGEgPSBCYXNlNjRfZW5jb2RlKGJzdHIpO1xuXHR2YXIgbyA9IFtdO1xuXHRmb3IodmFyIGkgPSAwOyBpIDwgZGF0YS5sZW5ndGg7IGkrPSA3Nikgby5wdXNoKGRhdGEuc2xpY2UoaSwgaSs3NikpO1xuXHRyZXR1cm4gby5qb2luKFwiXFxyXFxuXCIpICsgXCJcXHJcXG5cIjtcbn1cblxuLypcblJ1bGVzIGZvciBRUDpcblx0LSBlc2NhcGUgPSMjIGFwcGxpZXMgZm9yIGFsbCBub24tZGlzcGxheSBjaGFyYWN0ZXJzIGFuZCBsaXRlcmFsIFwiPVwiXG5cdC0gc3BhY2Ugb3IgdGFiIGF0IGVuZCBvZiBsaW5lIG11c3QgYmUgZW5jb2RlZFxuXHQtIFxcclxcbiBuZXdsaW5lcyBjYW4gYmUgcHJlc2VydmVkLCBidXQgYmFyZSBcXHIgYW5kIFxcbiBtdXN0IGJlIGVzY2FwZWRcblx0LSBsaW5lcyBtdXN0IG5vdCBleGNlZWQgNzYgY2hhcmFjdGVycywgdXNlIHNvZnQgYnJlYWtzID1cXHJcXG5cblxuVE9ETzogU29tZSBmaWxlcyBmcm9tIHdvcmQgYXBwZWFyIHRvIHdyaXRlIGxpbmUgZXh0ZW5zaW9ucyB3aXRoIGJhcmUgZXF1YWxzOlxuXG5gYGBcbjx0YWJsZSBjbGFzcz0zRE1zb1RhYmxlR3JpZCBib3JkZXI9M0QxIGNlbGxzcGFjaW5nPTNEMCBjZWxscGFkZGluZz0zRDAgd2lkdGg9XG49XCI3MCVcIlxuYGBgXG4qL1xuZnVuY3Rpb24gd3JpdGVfcXVvdGVkX3ByaW50YWJsZSh0ZXh0Lyo6c3RyaW5nKi8pLyo6c3RyaW5nKi8ge1xuXHR2YXIgZW5jb2RlZCA9IHRleHQucmVwbGFjZSgvW1xceDAwLVxceDA4XFx4MEJcXHgwQ1xceDBFLVxceDFGXFx4N0UtXFx4RkY9XS9nLCBmdW5jdGlvbihjKSB7XG5cdFx0dmFyIHcgPSBjLmNoYXJDb2RlQXQoMCkudG9TdHJpbmcoMTYpLnRvVXBwZXJDYXNlKCk7XG5cdFx0cmV0dXJuIFwiPVwiICsgKHcubGVuZ3RoID09IDEgPyBcIjBcIiArIHcgOiB3KTtcblx0fSk7XG5cblx0ZW5jb2RlZCA9IGVuY29kZWQucmVwbGFjZSgvICQvbWcsIFwiPTIwXCIpLnJlcGxhY2UoL1xcdCQvbWcsIFwiPTA5XCIpO1xuXG5cdGlmKGVuY29kZWQuY2hhckF0KDApID09IFwiXFxuXCIpIGVuY29kZWQgPSBcIj0wRFwiICsgZW5jb2RlZC5zbGljZSgxKTtcblx0ZW5jb2RlZCA9IGVuY29kZWQucmVwbGFjZSgvXFxyKD8hXFxuKS9tZywgXCI9MERcIikucmVwbGFjZSgvXFxuXFxuL21nLCBcIlxcbj0wQVwiKS5yZXBsYWNlKC8oW15cXHJcXG5dKVxcbi9tZywgXCIkMT0wQVwiKTtcblxuXHR2YXIgby8qOkFycmF5PHN0cmluZz4qLyA9IFtdLCBzcGxpdCA9IGVuY29kZWQuc3BsaXQoXCJcXHJcXG5cIik7XG5cdGZvcih2YXIgc2kgPSAwOyBzaSA8IHNwbGl0Lmxlbmd0aDsgKytzaSkge1xuXHRcdHZhciBzdHIgPSBzcGxpdFtzaV07XG5cdFx0aWYoc3RyLmxlbmd0aCA9PSAwKSB7IG8ucHVzaChcIlwiKTsgY29udGludWU7IH1cblx0XHRmb3IodmFyIGkgPSAwOyBpIDwgc3RyLmxlbmd0aDspIHtcblx0XHRcdHZhciBlbmQgPSA3Njtcblx0XHRcdHZhciB0bXAgPSBzdHIuc2xpY2UoaSwgaSArIGVuZCk7XG5cdFx0XHRpZih0bXAuY2hhckF0KGVuZCAtIDEpID09IFwiPVwiKSBlbmQgLS07XG5cdFx0XHRlbHNlIGlmKHRtcC5jaGFyQXQoZW5kIC0gMikgPT0gXCI9XCIpIGVuZCAtPSAyO1xuXHRcdFx0ZWxzZSBpZih0bXAuY2hhckF0KGVuZCAtIDMpID09IFwiPVwiKSBlbmQgLT0gMztcblx0XHRcdHRtcCA9IHN0ci5zbGljZShpLCBpICsgZW5kKTtcblx0XHRcdGkgKz0gZW5kO1xuXHRcdFx0aWYoaSA8IHN0ci5sZW5ndGgpIHRtcCArPSBcIj1cIjtcblx0XHRcdG8ucHVzaCh0bXApO1xuXHRcdH1cblx0fVxuXG5cdHJldHVybiBvLmpvaW4oXCJcXHJcXG5cIik7XG59XG5mdW5jdGlvbiBwYXJzZV9xdW90ZWRfcHJpbnRhYmxlKGRhdGEvKjpBcnJheTxzdHJpbmc+Ki8pLyo6UmF3Qnl0ZXMqLyB7XG5cdHZhciBvID0gW107XG5cblx0LyogdW5pZnkgbG9uZyBsaW5lcyAqL1xuXHRmb3IodmFyIGRpID0gMDsgZGkgPCBkYXRhLmxlbmd0aDsgKytkaSkge1xuXHRcdHZhciBsaW5lID0gZGF0YVtkaV07XG5cdFx0d2hpbGUoZGkgPD0gZGF0YS5sZW5ndGggJiYgbGluZS5jaGFyQXQobGluZS5sZW5ndGggLSAxKSA9PSBcIj1cIikgbGluZSA9IGxpbmUuc2xpY2UoMCwgbGluZS5sZW5ndGggLSAxKSArIGRhdGFbKytkaV07XG5cdFx0by5wdXNoKGxpbmUpO1xuXHR9XG5cblx0LyogZGVjb2RlICovXG5cdGZvcih2YXIgb2kgPSAwOyBvaSA8IG8ubGVuZ3RoOyArK29pKSBvW29pXSA9IG9bb2ldLnJlcGxhY2UoL1s9XVswLTlBLUZhLWZdezJ9L2csIGZ1bmN0aW9uKCQkKSB7IHJldHVybiBTdHJpbmcuZnJvbUNoYXJDb2RlKHBhcnNlSW50KCQkLnNsaWNlKDEpLCAxNikpOyB9KTtcblx0cmV0dXJuIHMyYShvLmpvaW4oXCJcXHJcXG5cIikpO1xufVxuXG5cbmZ1bmN0aW9uIHBhcnNlX21pbWUoY2ZiLyo6Q0ZCQ29udGFpbmVyKi8sIGRhdGEvKjpBcnJheTxzdHJpbmc+Ki8sIHJvb3QvKjpzdHJpbmcqLykvKjp2b2lkKi8ge1xuXHR2YXIgZm5hbWUgPSBcIlwiLCBjdGUgPSBcIlwiLCBjdHlwZSA9IFwiXCIsIGZkYXRhO1xuXHR2YXIgZGkgPSAwO1xuXHRmb3IoO2RpIDwgMTA7ICsrZGkpIHtcblx0XHR2YXIgbGluZSA9IGRhdGFbZGldO1xuXHRcdGlmKCFsaW5lIHx8IGxpbmUubWF0Y2goL15cXHMqJC8pKSBicmVhaztcblx0XHR2YXIgbSA9IGxpbmUubWF0Y2goL14oLio/KTpcXHMqKFteXFxzXS4qKSQvKTtcblx0XHRpZihtKSBzd2l0Y2gobVsxXS50b0xvd2VyQ2FzZSgpKSB7XG5cdFx0XHRjYXNlIFwiY29udGVudC1sb2NhdGlvblwiOiBmbmFtZSA9IG1bMl0udHJpbSgpOyBicmVhaztcblx0XHRcdGNhc2UgXCJjb250ZW50LXR5cGVcIjogY3R5cGUgPSBtWzJdLnRyaW0oKTsgYnJlYWs7XG5cdFx0XHRjYXNlIFwiY29udGVudC10cmFuc2Zlci1lbmNvZGluZ1wiOiBjdGUgPSBtWzJdLnRyaW0oKTsgYnJlYWs7XG5cdFx0fVxuXHR9XG5cdCsrZGk7XG5cdHN3aXRjaChjdGUudG9Mb3dlckNhc2UoKSkge1xuXHRcdGNhc2UgJ2Jhc2U2NCc6IGZkYXRhID0gczJhKEJhc2U2NF9kZWNvZGUoZGF0YS5zbGljZShkaSkuam9pbihcIlwiKSkpOyBicmVhaztcblx0XHRjYXNlICdxdW90ZWQtcHJpbnRhYmxlJzogZmRhdGEgPSBwYXJzZV9xdW90ZWRfcHJpbnRhYmxlKGRhdGEuc2xpY2UoZGkpKTsgYnJlYWs7XG5cdFx0ZGVmYXVsdDogdGhyb3cgbmV3IEVycm9yKFwiVW5zdXBwb3J0ZWQgQ29udGVudC1UcmFuc2Zlci1FbmNvZGluZyBcIiArIGN0ZSk7XG5cdH1cblx0dmFyIGZpbGUgPSBjZmJfYWRkKGNmYiwgZm5hbWUuc2xpY2Uocm9vdC5sZW5ndGgpLCBmZGF0YSwge3Vuc2FmZTogdHJ1ZX0pO1xuXHRpZihjdHlwZSkgZmlsZS5jdHlwZSA9IGN0eXBlO1xufVxuXG5mdW5jdGlvbiBwYXJzZV9tYWQoZmlsZS8qOlJhd0J5dGVzKi8sIG9wdGlvbnMvKjpDRkJSZWFkT3B0cyovKS8qOkNGQkNvbnRhaW5lciovIHtcblx0aWYoYTJzKGZpbGUuc2xpY2UoMCwxMykpLnRvTG93ZXJDYXNlKCkgIT0gXCJtaW1lLXZlcnNpb246XCIpIHRocm93IG5ldyBFcnJvcihcIlVuc3VwcG9ydGVkIE1BRCBoZWFkZXJcIik7XG5cdHZhciByb290ID0gKG9wdGlvbnMgJiYgb3B0aW9ucy5yb290IHx8IFwiXCIpO1xuXHQvLyAkRmxvd0lnbm9yZVxuXHR2YXIgZGF0YSA9IChoYXNfYnVmICYmIEJ1ZmZlci5pc0J1ZmZlcihmaWxlKSA/IGZpbGUudG9TdHJpbmcoXCJiaW5hcnlcIikgOiBhMnMoZmlsZSkpLnNwbGl0KFwiXFxyXFxuXCIpO1xuXHR2YXIgZGkgPSAwLCByb3cgPSBcIlwiO1xuXG5cdC8qIGlmIHJvb3QgaXMgbm90IHNwZWNpZmllZCwgc2NhbiBmb3IgdGhlIGNvbW1vbiBwcmVmaXggKi9cblx0Zm9yKGRpID0gMDsgZGkgPCBkYXRhLmxlbmd0aDsgKytkaSkge1xuXHRcdHJvdyA9IGRhdGFbZGldO1xuXHRcdGlmKCEvXkNvbnRlbnQtTG9jYXRpb246L2kudGVzdChyb3cpKSBjb250aW51ZTtcblx0XHRyb3cgPSByb3cuc2xpY2Uocm93LmluZGV4T2YoXCJmaWxlXCIpKTtcblx0XHRpZighcm9vdCkgcm9vdCA9IHJvdy5zbGljZSgwLCByb3cubGFzdEluZGV4T2YoXCIvXCIpICsgMSk7XG5cdFx0aWYocm93LnNsaWNlKDAsIHJvb3QubGVuZ3RoKSA9PSByb290KSBjb250aW51ZTtcblx0XHR3aGlsZShyb290Lmxlbmd0aCA+IDApIHtcblx0XHRcdHJvb3QgPSByb290LnNsaWNlKDAsIHJvb3QubGVuZ3RoIC0gMSk7XG5cdFx0XHRyb290ID0gcm9vdC5zbGljZSgwLCByb290Lmxhc3RJbmRleE9mKFwiL1wiKSArIDEpO1xuXHRcdFx0aWYocm93LnNsaWNlKDAscm9vdC5sZW5ndGgpID09IHJvb3QpIGJyZWFrO1xuXHRcdH1cblx0fVxuXG5cdHZhciBtYm91bmRhcnkgPSAoZGF0YVsxXSB8fCBcIlwiKS5tYXRjaCgvYm91bmRhcnk9XCIoLio/KVwiLyk7XG5cdGlmKCFtYm91bmRhcnkpIHRocm93IG5ldyBFcnJvcihcIk1BRCBjYW5ub3QgZmluZCBib3VuZGFyeVwiKTtcblx0dmFyIGJvdW5kYXJ5ID0gXCItLVwiICsgKG1ib3VuZGFyeVsxXSB8fCBcIlwiKTtcblxuXHR2YXIgRmlsZUluZGV4Lyo6Q0ZCRmlsZUluZGV4Ki8gPSBbXSwgRnVsbFBhdGhzLyo6QXJyYXk8c3RyaW5nPiovID0gW107XG5cdHZhciBvID0ge1xuXHRcdEZpbGVJbmRleDogRmlsZUluZGV4LFxuXHRcdEZ1bGxQYXRoczogRnVsbFBhdGhzXG5cdH07XG5cdGluaXRfY2ZiKG8pO1xuXHR2YXIgc3RhcnRfZGksIGZjbnQgPSAwO1xuXHRmb3IoZGkgPSAwOyBkaSA8IGRhdGEubGVuZ3RoOyArK2RpKSB7XG5cdFx0dmFyIGxpbmUgPSBkYXRhW2RpXTtcblx0XHRpZihsaW5lICE9PSBib3VuZGFyeSAmJiBsaW5lICE9PSBib3VuZGFyeSArIFwiLS1cIikgY29udGludWU7XG5cdFx0aWYoZmNudCsrKSBwYXJzZV9taW1lKG8sIGRhdGEuc2xpY2Uoc3RhcnRfZGksIGRpKSwgcm9vdCk7XG5cdFx0c3RhcnRfZGkgPSBkaTtcblx0fVxuXHRyZXR1cm4gbztcbn1cblxuZnVuY3Rpb24gd3JpdGVfbWFkKGNmYi8qOkNGQkNvbnRhaW5lciovLCBvcHRpb25zLyo6Q0ZCV3JpdGVPcHRzKi8pLyo6c3RyaW5nKi8ge1xuXHR2YXIgb3B0cyA9IG9wdGlvbnMgfHwge307XG5cdHZhciBib3VuZGFyeSA9IG9wdHMuYm91bmRhcnkgfHwgXCJTaGVldEpTXCI7XG5cdGJvdW5kYXJ5ID0gJy0tLS0tLT0nICsgYm91bmRhcnk7XG5cblx0dmFyIG91dCA9IFtcblx0XHQnTUlNRS1WZXJzaW9uOiAxLjAnLFxuXHRcdCdDb250ZW50LVR5cGU6IG11bHRpcGFydC9yZWxhdGVkOyBib3VuZGFyeT1cIicgKyBib3VuZGFyeS5zbGljZSgyKSArICdcIicsXG5cdFx0JycsXG5cdFx0JycsXG5cdFx0Jydcblx0XTtcblxuXHR2YXIgcm9vdCA9IGNmYi5GdWxsUGF0aHNbMF0sIGZwID0gcm9vdCwgZmkgPSBjZmIuRmlsZUluZGV4WzBdO1xuXHRmb3IodmFyIGkgPSAxOyBpIDwgY2ZiLkZ1bGxQYXRocy5sZW5ndGg7ICsraSkge1xuXHRcdGZwID0gY2ZiLkZ1bGxQYXRoc1tpXS5zbGljZShyb290Lmxlbmd0aCk7XG5cdFx0ZmkgPSBjZmIuRmlsZUluZGV4W2ldO1xuXHRcdGlmKCFmaS5zaXplIHx8ICFmaS5jb250ZW50IHx8IGZwID09IFwiXFx1MDAwMVNoMzN0SjVcIikgY29udGludWU7XG5cblx0XHQvKiBOb3JtYWxpemUgZmlsZW5hbWUgKi9cblx0XHRmcCA9IGZwLnJlcGxhY2UoL1tcXHgwMC1cXHgwOFxceDBCXFx4MENcXHgwRS1cXHgxRlxceDdFLVxceEZGXS9nLCBmdW5jdGlvbihjKSB7XG5cdFx0XHRyZXR1cm4gXCJfeFwiICsgYy5jaGFyQ29kZUF0KDApLnRvU3RyaW5nKDE2KSArIFwiX1wiO1xuXHRcdH0pLnJlcGxhY2UoL1tcXHUwMDgwLVxcdUZGRkZdL2csIGZ1bmN0aW9uKHUpIHtcblx0XHRcdHJldHVybiBcIl91XCIgKyB1LmNoYXJDb2RlQXQoMCkudG9TdHJpbmcoMTYpICsgXCJfXCI7XG5cdFx0fSk7XG5cblx0XHQvKiBFeHRyYWN0IGNvbnRlbnQgYXMgYmluYXJ5IHN0cmluZyAqL1xuXHRcdHZhciBjYSA9IGZpLmNvbnRlbnQ7XG5cdFx0Ly8gJEZsb3dJZ25vcmVcblx0XHR2YXIgY3N0ciA9IGhhc19idWYgJiYgQnVmZmVyLmlzQnVmZmVyKGNhKSA/IGNhLnRvU3RyaW5nKFwiYmluYXJ5XCIpIDogYTJzKGNhKTtcblxuXHRcdC8qIDQvNSBvZiBmaXJzdCAxMDI0IGNoYXJzIGFzY2lpIC0+IHF1b3RlZCBwcmludGFibGUsIGVsc2UgYmFzZTY0ICovXG5cdFx0dmFyIGRpc3BjbnQgPSAwLCBMID0gTWF0aC5taW4oMTAyNCwgY3N0ci5sZW5ndGgpLCBjYyA9IDA7XG5cdFx0Zm9yKHZhciBjc2wgPSAwOyBjc2wgPD0gTDsgKytjc2wpIGlmKChjYz1jc3RyLmNoYXJDb2RlQXQoY3NsKSkgPj0gMHgyMCAmJiBjYyA8IDB4ODApICsrZGlzcGNudDtcblx0XHR2YXIgcXAgPSBkaXNwY250ID49IEwgKiA0IC8gNTtcblxuXHRcdG91dC5wdXNoKGJvdW5kYXJ5KTtcblx0XHRvdXQucHVzaCgnQ29udGVudC1Mb2NhdGlvbjogJyArIChvcHRzLnJvb3QgfHwgJ2ZpbGU6Ly8vQzovU2hlZXRKUy8nKSArIGZwKTtcblx0XHRvdXQucHVzaCgnQ29udGVudC1UcmFuc2Zlci1FbmNvZGluZzogJyArIChxcCA/ICdxdW90ZWQtcHJpbnRhYmxlJyA6ICdiYXNlNjQnKSk7XG5cdFx0b3V0LnB1c2goJ0NvbnRlbnQtVHlwZTogJyArIGdldF9jb250ZW50X3R5cGUoZmksIGZwKSk7XG5cdFx0b3V0LnB1c2goJycpO1xuXG5cdFx0b3V0LnB1c2gocXAgPyB3cml0ZV9xdW90ZWRfcHJpbnRhYmxlKGNzdHIpIDogd3JpdGVfYmFzZTY0Xzc2KGNzdHIpKTtcblx0fVxuXHRvdXQucHVzaChib3VuZGFyeSArICctLVxcclxcbicpO1xuXHRyZXR1cm4gb3V0LmpvaW4oXCJcXHJcXG5cIik7XG59XG5mdW5jdGlvbiBjZmJfbmV3KG9wdHMvKjo/YW55Ki8pLyo6Q0ZCQ29udGFpbmVyKi8ge1xuXHR2YXIgby8qOkNGQkNvbnRhaW5lciovID0gKHt9Lyo6YW55Ki8pO1xuXHRpbml0X2NmYihvLCBvcHRzKTtcblx0cmV0dXJuIG87XG59XG5cbmZ1bmN0aW9uIGNmYl9hZGQoY2ZiLyo6Q0ZCQ29udGFpbmVyKi8sIG5hbWUvKjpzdHJpbmcqLywgY29udGVudC8qOj9SYXdCeXRlcyovLCBvcHRzLyo6P2FueSovKS8qOkNGQkVudHJ5Ki8ge1xuXHR2YXIgdW5zYWZlID0gb3B0cyAmJiBvcHRzLnVuc2FmZTtcblx0aWYoIXVuc2FmZSkgaW5pdF9jZmIoY2ZiKTtcblx0dmFyIGZpbGUgPSAhdW5zYWZlICYmIENGQi5maW5kKGNmYiwgbmFtZSk7XG5cdGlmKCFmaWxlKSB7XG5cdFx0dmFyIGZwYXRoLyo6c3RyaW5nKi8gPSBjZmIuRnVsbFBhdGhzWzBdO1xuXHRcdGlmKG5hbWUuc2xpY2UoMCwgZnBhdGgubGVuZ3RoKSA9PSBmcGF0aCkgZnBhdGggPSBuYW1lO1xuXHRcdGVsc2Uge1xuXHRcdFx0aWYoZnBhdGguc2xpY2UoLTEpICE9IFwiL1wiKSBmcGF0aCArPSBcIi9cIjtcblx0XHRcdGZwYXRoID0gKGZwYXRoICsgbmFtZSkucmVwbGFjZShcIi8vXCIsXCIvXCIpO1xuXHRcdH1cblx0XHRmaWxlID0gKHtuYW1lOiBmaWxlbmFtZShuYW1lKSwgdHlwZTogMn0vKjphbnkqLyk7XG5cdFx0Y2ZiLkZpbGVJbmRleC5wdXNoKGZpbGUpO1xuXHRcdGNmYi5GdWxsUGF0aHMucHVzaChmcGF0aCk7XG5cdFx0aWYoIXVuc2FmZSkgQ0ZCLnV0aWxzLmNmYl9nYyhjZmIpO1xuXHR9XG5cdC8qOjogaWYoIWZpbGUpIHRocm93IG5ldyBFcnJvcihcInVucmVhY2hhYmxlXCIpOyAqL1xuXHRmaWxlLmNvbnRlbnQgPSAoY29udGVudC8qOmFueSovKTtcblx0ZmlsZS5zaXplID0gY29udGVudCA/IGNvbnRlbnQubGVuZ3RoIDogMDtcblx0aWYob3B0cykge1xuXHRcdGlmKG9wdHMuQ0xTSUQpIGZpbGUuY2xzaWQgPSBvcHRzLkNMU0lEO1xuXHRcdGlmKG9wdHMubXQpIGZpbGUubXQgPSBvcHRzLm10O1xuXHRcdGlmKG9wdHMuY3QpIGZpbGUuY3QgPSBvcHRzLmN0O1xuXHR9XG5cdHJldHVybiBmaWxlO1xufVxuXG5mdW5jdGlvbiBjZmJfZGVsKGNmYi8qOkNGQkNvbnRhaW5lciovLCBuYW1lLyo6c3RyaW5nKi8pLyo6Ym9vbGVhbiovIHtcblx0aW5pdF9jZmIoY2ZiKTtcblx0dmFyIGZpbGUgPSBDRkIuZmluZChjZmIsIG5hbWUpO1xuXHRpZihmaWxlKSBmb3IodmFyIGogPSAwOyBqIDwgY2ZiLkZpbGVJbmRleC5sZW5ndGg7ICsraikgaWYoY2ZiLkZpbGVJbmRleFtqXSA9PSBmaWxlKSB7XG5cdFx0Y2ZiLkZpbGVJbmRleC5zcGxpY2UoaiwgMSk7XG5cdFx0Y2ZiLkZ1bGxQYXRocy5zcGxpY2UoaiwgMSk7XG5cdFx0cmV0dXJuIHRydWU7XG5cdH1cblx0cmV0dXJuIGZhbHNlO1xufVxuXG5mdW5jdGlvbiBjZmJfbW92KGNmYi8qOkNGQkNvbnRhaW5lciovLCBvbGRfbmFtZS8qOnN0cmluZyovLCBuZXdfbmFtZS8qOnN0cmluZyovKS8qOmJvb2xlYW4qLyB7XG5cdGluaXRfY2ZiKGNmYik7XG5cdHZhciBmaWxlID0gQ0ZCLmZpbmQoY2ZiLCBvbGRfbmFtZSk7XG5cdGlmKGZpbGUpIGZvcih2YXIgaiA9IDA7IGogPCBjZmIuRmlsZUluZGV4Lmxlbmd0aDsgKytqKSBpZihjZmIuRmlsZUluZGV4W2pdID09IGZpbGUpIHtcblx0XHRjZmIuRmlsZUluZGV4W2pdLm5hbWUgPSBmaWxlbmFtZShuZXdfbmFtZSk7XG5cdFx0Y2ZiLkZ1bGxQYXRoc1tqXSA9IG5ld19uYW1lO1xuXHRcdHJldHVybiB0cnVlO1xuXHR9XG5cdHJldHVybiBmYWxzZTtcbn1cblxuZnVuY3Rpb24gY2ZiX2djKGNmYi8qOkNGQkNvbnRhaW5lciovKS8qOnZvaWQqLyB7IHJlYnVpbGRfY2ZiKGNmYiwgdHJ1ZSk7IH1cblxuZXhwb3J0cy5maW5kID0gZmluZDtcbmV4cG9ydHMucmVhZCA9IHJlYWQ7XG5leHBvcnRzLnBhcnNlID0gcGFyc2U7XG5leHBvcnRzLndyaXRlID0gd3JpdGU7XG5leHBvcnRzLndyaXRlRmlsZSA9IHdyaXRlX2ZpbGU7XG5leHBvcnRzLnV0aWxzID0ge1xuXHRjZmJfbmV3OiBjZmJfbmV3LFxuXHRjZmJfYWRkOiBjZmJfYWRkLFxuXHRjZmJfZGVsOiBjZmJfZGVsLFxuXHRjZmJfbW92OiBjZmJfbW92LFxuXHRjZmJfZ2M6IGNmYl9nYyxcblx0UmVhZFNoaWZ0OiBSZWFkU2hpZnQsXG5cdENoZWNrRmllbGQ6IENoZWNrRmllbGQsXG5cdHByZXBfYmxvYjogcHJlcF9ibG9iLFxuXHRiY29uY2F0OiBiY29uY2F0LFxuXHR1c2VfemxpYjogdXNlX3psaWIsXG5cdF9kZWZsYXRlUmF3OiBfZGVmbGF0ZSxcblx0X2luZmxhdGVSYXc6IF9pbmZsYXRlLFxuXHRjb25zdHM6IGNvbnN0c1xufTtcblxucmV0dXJuIGV4cG9ydHM7XG59KSgpO1xuXG5sZXQgX2ZzID0gdm9pZCAwO1xuZnVuY3Rpb24gc2V0X2ZzKGZzKSB7IF9mcyA9IGZzOyB9XG5leHBvcnQgeyBzZXRfZnMgfTtcblxuLyogbm9ybWFsaXplIGRhdGEgZm9yIGJsb2IgY3RvciAqL1xuZnVuY3Rpb24gYmxvYmlmeShkYXRhKSB7XG5cdGlmKHR5cGVvZiBkYXRhID09PSBcInN0cmluZ1wiKSByZXR1cm4gczJhYihkYXRhKTtcblx0aWYoQXJyYXkuaXNBcnJheShkYXRhKSkgcmV0dXJuIGEydShkYXRhKTtcblx0cmV0dXJuIGRhdGE7XG59XG4vKiB3cml0ZSBvciBkb3dubG9hZCBmaWxlICovXG5mdW5jdGlvbiB3cml0ZV9kbChmbmFtZS8qOnN0cmluZyovLCBwYXlsb2FkLyo6YW55Ki8sIGVuYy8qOj9zdHJpbmcqLykge1xuXHQvKmdsb2JhbCBJRV9TYXZlRmlsZSwgQmxvYiwgbmF2aWdhdG9yLCBzYXZlQXMsIGRvY3VtZW50LCBGaWxlLCBjaHJvbWUgKi9cblx0aWYodHlwZW9mIF9mcyAhPT0gJ3VuZGVmaW5lZCcgJiYgX2ZzLndyaXRlRmlsZVN5bmMpIHJldHVybiBlbmMgPyBfZnMud3JpdGVGaWxlU3luYyhmbmFtZSwgcGF5bG9hZCwgZW5jKSA6IF9mcy53cml0ZUZpbGVTeW5jKGZuYW1lLCBwYXlsb2FkKTtcblx0aWYodHlwZW9mIERlbm8gIT09ICd1bmRlZmluZWQnKSB7XG5cdFx0LyogaW4gdGhpcyBzcG90LCBpdCdzIHNhZmUgdG8gYXNzdW1lIHR5cGVkIGFycmF5cyBhbmQgVGV4dEVuY29kZXIvVGV4dERlY29kZXIgZXhpc3QgKi9cblx0XHRpZihlbmMgJiYgdHlwZW9mIHBheWxvYWQgPT0gXCJzdHJpbmdcIikgc3dpdGNoKGVuYykge1xuXHRcdFx0Y2FzZSBcInV0ZjhcIjogcGF5bG9hZCA9IG5ldyBUZXh0RW5jb2RlcihlbmMpLmVuY29kZShwYXlsb2FkKTsgYnJlYWs7XG5cdFx0XHRjYXNlIFwiYmluYXJ5XCI6IHBheWxvYWQgPSBzMmFiKHBheWxvYWQpOyBicmVhaztcblx0XHRcdC8qIFRPRE86IGJpbmFyeSBlcXVpdmFsZW50ICovXG5cdFx0XHRkZWZhdWx0OiB0aHJvdyBuZXcgRXJyb3IoXCJVbnN1cHBvcnRlZCBlbmNvZGluZyBcIiArIGVuYyk7XG5cdFx0fVxuXHRcdHJldHVybiBEZW5vLndyaXRlRmlsZVN5bmMoZm5hbWUsIHBheWxvYWQpO1xuXHR9XG5cdHZhciBkYXRhID0gKGVuYyA9PSBcInV0ZjhcIikgPyB1dGY4d3JpdGUocGF5bG9hZCkgOiBwYXlsb2FkO1xuXHQvKjo6IGRlY2xhcmUgdmFyIElFX1NhdmVGaWxlOiBhbnk7ICovXG5cdGlmKHR5cGVvZiBJRV9TYXZlRmlsZSAhPT0gJ3VuZGVmaW5lZCcpIHJldHVybiBJRV9TYXZlRmlsZShkYXRhLCBmbmFtZSk7XG5cdGlmKHR5cGVvZiBCbG9iICE9PSAndW5kZWZpbmVkJykge1xuXHRcdHZhciBibG9iID0gbmV3IEJsb2IoW2Jsb2JpZnkoZGF0YSldLCB7dHlwZTpcImFwcGxpY2F0aW9uL29jdGV0LXN0cmVhbVwifSk7XG5cdFx0Lyo6OiBkZWNsYXJlIHZhciBuYXZpZ2F0b3I6IGFueTsgKi9cblx0XHRpZih0eXBlb2YgbmF2aWdhdG9yICE9PSAndW5kZWZpbmVkJyAmJiBuYXZpZ2F0b3IubXNTYXZlQmxvYikgcmV0dXJuIG5hdmlnYXRvci5tc1NhdmVCbG9iKGJsb2IsIGZuYW1lKTtcblx0XHQvKjo6IGRlY2xhcmUgdmFyIHNhdmVBczogYW55OyAqL1xuXHRcdGlmKHR5cGVvZiBzYXZlQXMgIT09ICd1bmRlZmluZWQnKSByZXR1cm4gc2F2ZUFzKGJsb2IsIGZuYW1lKTtcblx0XHRpZih0eXBlb2YgVVJMICE9PSAndW5kZWZpbmVkJyAmJiB0eXBlb2YgZG9jdW1lbnQgIT09ICd1bmRlZmluZWQnICYmIGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQgJiYgVVJMLmNyZWF0ZU9iamVjdFVSTCkge1xuXHRcdFx0dmFyIHVybCA9IFVSTC5jcmVhdGVPYmplY3RVUkwoYmxvYik7XG5cdFx0XHQvKjo6IGRlY2xhcmUgdmFyIGNocm9tZTogYW55OyAqL1xuXHRcdFx0aWYodHlwZW9mIGNocm9tZSA9PT0gJ29iamVjdCcgJiYgdHlwZW9mIChjaHJvbWUuZG93bmxvYWRzfHx7fSkuZG93bmxvYWQgPT0gXCJmdW5jdGlvblwiKSB7XG5cdFx0XHRcdGlmKFVSTC5yZXZva2VPYmplY3RVUkwgJiYgdHlwZW9mIHNldFRpbWVvdXQgIT09ICd1bmRlZmluZWQnKSBzZXRUaW1lb3V0KGZ1bmN0aW9uKCkgeyBVUkwucmV2b2tlT2JqZWN0VVJMKHVybCk7IH0sIDYwMDAwKTtcblx0XHRcdFx0cmV0dXJuIGNocm9tZS5kb3dubG9hZHMuZG93bmxvYWQoeyB1cmw6IHVybCwgZmlsZW5hbWU6IGZuYW1lLCBzYXZlQXM6IHRydWV9KTtcblx0XHRcdH1cblx0XHRcdHZhciBhID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcImFcIik7XG5cdFx0XHRpZihhLmRvd25sb2FkICE9IG51bGwpIHtcblx0XHRcdFx0Lyo6OiBpZihkb2N1bWVudC5ib2R5ID09IG51bGwpIHRocm93IG5ldyBFcnJvcihcInVucmVhY2hhYmxlXCIpOyAqL1xuXHRcdFx0XHRhLmRvd25sb2FkID0gZm5hbWU7IGEuaHJlZiA9IHVybDsgZG9jdW1lbnQuYm9keS5hcHBlbmRDaGlsZChhKTsgYS5jbGljaygpO1xuXHRcdFx0XHQvKjo6IGlmKGRvY3VtZW50LmJvZHkgPT0gbnVsbCkgdGhyb3cgbmV3IEVycm9yKFwidW5yZWFjaGFibGVcIik7ICovIGRvY3VtZW50LmJvZHkucmVtb3ZlQ2hpbGQoYSk7XG5cdFx0XHRcdGlmKFVSTC5yZXZva2VPYmplY3RVUkwgJiYgdHlwZW9mIHNldFRpbWVvdXQgIT09ICd1bmRlZmluZWQnKSBzZXRUaW1lb3V0KGZ1bmN0aW9uKCkgeyBVUkwucmV2b2tlT2JqZWN0VVJMKHVybCk7IH0sIDYwMDAwKTtcblx0XHRcdFx0cmV0dXJuIHVybDtcblx0XHRcdH1cblx0XHR9XG5cdH1cblx0Ly8gJEZsb3dJZ25vcmVcblx0aWYodHlwZW9mICQgIT09ICd1bmRlZmluZWQnICYmIHR5cGVvZiBGaWxlICE9PSAndW5kZWZpbmVkJyAmJiB0eXBlb2YgRm9sZGVyICE9PSAndW5kZWZpbmVkJykgdHJ5IHsgLy8gZXh0ZW5kc2NyaXB0XG5cdFx0Ly8gJEZsb3dJZ25vcmVcblx0XHR2YXIgb3V0ID0gRmlsZShmbmFtZSk7IG91dC5vcGVuKFwid1wiKTsgb3V0LmVuY29kaW5nID0gXCJiaW5hcnlcIjtcblx0XHRpZihBcnJheS5pc0FycmF5KHBheWxvYWQpKSBwYXlsb2FkID0gYTJzKHBheWxvYWQpO1xuXHRcdG91dC53cml0ZShwYXlsb2FkKTsgb3V0LmNsb3NlKCk7IHJldHVybiBwYXlsb2FkO1xuXHR9IGNhdGNoKGUpIHsgaWYoIWUubWVzc2FnZSB8fCAhZS5tZXNzYWdlLm1hdGNoKC9vbnN0cnVjdC8pKSB0aHJvdyBlOyB9XG5cdHRocm93IG5ldyBFcnJvcihcImNhbm5vdCBzYXZlIGZpbGUgXCIgKyBmbmFtZSk7XG59XG5cbi8qIHJlYWQgYmluYXJ5IGRhdGEgZnJvbSBmaWxlICovXG5mdW5jdGlvbiByZWFkX2JpbmFyeShwYXRoLyo6c3RyaW5nKi8pIHtcblx0aWYodHlwZW9mIF9mcyAhPT0gJ3VuZGVmaW5lZCcpIHJldHVybiBfZnMucmVhZEZpbGVTeW5jKHBhdGgpO1xuXHRpZih0eXBlb2YgRGVubyAhPT0gJ3VuZGVmaW5lZCcpIHJldHVybiBEZW5vLnJlYWRGaWxlU3luYyhwYXRoKTtcblx0Ly8gJEZsb3dJZ25vcmVcblx0aWYodHlwZW9mICQgIT09ICd1bmRlZmluZWQnICYmIHR5cGVvZiBGaWxlICE9PSAndW5kZWZpbmVkJyAmJiB0eXBlb2YgRm9sZGVyICE9PSAndW5kZWZpbmVkJykgdHJ5IHsgLy8gZXh0ZW5kc2NyaXB0XG5cdFx0Ly8gJEZsb3dJZ25vcmVcblx0XHR2YXIgaW5maWxlID0gRmlsZShwYXRoKTsgaW5maWxlLm9wZW4oXCJyXCIpOyBpbmZpbGUuZW5jb2RpbmcgPSBcImJpbmFyeVwiO1xuXHRcdHZhciBkYXRhID0gaW5maWxlLnJlYWQoKTsgaW5maWxlLmNsb3NlKCk7XG5cdFx0cmV0dXJuIGRhdGE7XG5cdH0gY2F0Y2goZSkgeyBpZighZS5tZXNzYWdlIHx8ICFlLm1lc3NhZ2UubWF0Y2goL29uc3RydWN0LykpIHRocm93IGU7IH1cblx0dGhyb3cgbmV3IEVycm9yKFwiQ2Fubm90IGFjY2VzcyBmaWxlIFwiICsgcGF0aCk7XG59XG5mdW5jdGlvbiBrZXlzKG8vKjphbnkqLykvKjpBcnJheTxhbnk+Ki8ge1xuXHR2YXIga3MgPSBPYmplY3Qua2V5cyhvKSwgbzIgPSBbXTtcblx0Zm9yKHZhciBpID0gMDsgaSA8IGtzLmxlbmd0aDsgKytpKSBpZihPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwobywga3NbaV0pKSBvMi5wdXNoKGtzW2ldKTtcblx0cmV0dXJuIG8yO1xufVxuXG5mdW5jdGlvbiBldmVydF9rZXkob2JqLyo6YW55Ki8sIGtleS8qOnN0cmluZyovKS8qOkV2ZXJ0VHlwZSovIHtcblx0dmFyIG8gPSAoW10vKjphbnkqLyksIEsgPSBrZXlzKG9iaik7XG5cdGZvcih2YXIgaSA9IDA7IGkgIT09IEsubGVuZ3RoOyArK2kpIGlmKG9bb2JqW0tbaV1dW2tleV1dID09IG51bGwpIG9bb2JqW0tbaV1dW2tleV1dID0gS1tpXTtcblx0cmV0dXJuIG87XG59XG5cbmZ1bmN0aW9uIGV2ZXJ0KG9iai8qOmFueSovKS8qOkV2ZXJ0VHlwZSovIHtcblx0dmFyIG8gPSAoW10vKjphbnkqLyksIEsgPSBrZXlzKG9iaik7XG5cdGZvcih2YXIgaSA9IDA7IGkgIT09IEsubGVuZ3RoOyArK2kpIG9bb2JqW0tbaV1dXSA9IEtbaV07XG5cdHJldHVybiBvO1xufVxuXG5mdW5jdGlvbiBldmVydF9udW0ob2JqLyo6YW55Ki8pLyo6RXZlcnROdW1UeXBlKi8ge1xuXHR2YXIgbyA9IChbXS8qOmFueSovKSwgSyA9IGtleXMob2JqKTtcblx0Zm9yKHZhciBpID0gMDsgaSAhPT0gSy5sZW5ndGg7ICsraSkgb1tvYmpbS1tpXV1dID0gcGFyc2VJbnQoS1tpXSwxMCk7XG5cdHJldHVybiBvO1xufVxuXG5mdW5jdGlvbiBldmVydF9hcnIob2JqLyo6YW55Ki8pLyo6RXZlcnRBcnJUeXBlKi8ge1xuXHR2YXIgby8qOkV2ZXJ0QXJyVHlwZSovID0gKFtdLyo6YW55Ki8pLCBLID0ga2V5cyhvYmopO1xuXHRmb3IodmFyIGkgPSAwOyBpICE9PSBLLmxlbmd0aDsgKytpKSB7XG5cdFx0aWYob1tvYmpbS1tpXV1dID09IG51bGwpIG9bb2JqW0tbaV1dXSA9IFtdO1xuXHRcdG9bb2JqW0tbaV1dXS5wdXNoKEtbaV0pO1xuXHR9XG5cdHJldHVybiBvO1xufVxuXG52YXIgYmFzZWRhdGUgPSAvKiNfX1BVUkVfXyovbmV3IERhdGUoMTg5OSwgMTEsIDMwLCAwLCAwLCAwKTsgLy8gMjIwOTE2MTYwMDAwMFxuZnVuY3Rpb24gZGF0ZW51bSh2Lyo6RGF0ZSovLCBkYXRlMTkwNC8qOj9ib29sZWFuKi8pLyo6bnVtYmVyKi8ge1xuXHR2YXIgZXBvY2ggPSAvKiNfX1BVUkVfXyovdi5nZXRUaW1lKCk7XG5cdGlmKGRhdGUxOTA0KSBlcG9jaCAtPSAxNDYyKjI0KjYwKjYwKjEwMDA7XG5cdHZhciBkbnRocmVzaCA9IC8qI19fUFVSRV9fKi9iYXNlZGF0ZS5nZXRUaW1lKCkgKyAoLyojX19QVVJFX18qL3YuZ2V0VGltZXpvbmVPZmZzZXQoKSAtIC8qI19fUFVSRV9fKi9iYXNlZGF0ZS5nZXRUaW1lem9uZU9mZnNldCgpKSAqIDYwMDAwO1xuXHRyZXR1cm4gKGVwb2NoIC0gZG50aHJlc2gpIC8gKDI0ICogNjAgKiA2MCAqIDEwMDApO1xufVxudmFyIHJlZmRhdGUgPSAvKiNfX1BVUkVfXyovbmV3IERhdGUoKTtcbnZhciBkbnRocmVzaCA9IC8qI19fUFVSRV9fKi9iYXNlZGF0ZS5nZXRUaW1lKCkgKyAoLyojX19QVVJFX18qL3JlZmRhdGUuZ2V0VGltZXpvbmVPZmZzZXQoKSAtIC8qI19fUFVSRV9fKi9iYXNlZGF0ZS5nZXRUaW1lem9uZU9mZnNldCgpKSAqIDYwMDAwO1xudmFyIHJlZm9mZnNldCA9IC8qI19fUFVSRV9fKi9yZWZkYXRlLmdldFRpbWV6b25lT2Zmc2V0KCk7XG5mdW5jdGlvbiBudW1kYXRlKHYvKjpudW1iZXIqLykvKjpEYXRlKi8ge1xuXHR2YXIgb3V0ID0gbmV3IERhdGUoKTtcblx0b3V0LnNldFRpbWUodiAqIDI0ICogNjAgKiA2MCAqIDEwMDAgKyBkbnRocmVzaCk7XG5cdGlmIChvdXQuZ2V0VGltZXpvbmVPZmZzZXQoKSAhPT0gcmVmb2Zmc2V0KSB7XG5cdFx0b3V0LnNldFRpbWUob3V0LmdldFRpbWUoKSArIChvdXQuZ2V0VGltZXpvbmVPZmZzZXQoKSAtIHJlZm9mZnNldCkgKiA2MDAwMCk7XG5cdH1cblx0cmV0dXJuIG91dDtcbn1cblxuLyogSVNPIDg2MDEgRHVyYXRpb24gKi9cbmZ1bmN0aW9uIHBhcnNlX2lzb2R1cihzKSB7XG5cdHZhciBzZWMgPSAwLCBtdCA9IDAsIHRpbWUgPSBmYWxzZTtcblx0dmFyIG0gPSBzLm1hdGNoKC9QKFswLTlcXC5dK1kpPyhbMC05XFwuXStNKT8oWzAtOVxcLl0rRCk/VChbMC05XFwuXStIKT8oWzAtOVxcLl0rTSk/KFswLTlcXC5dK1MpPy8pO1xuXHRpZighbSkgdGhyb3cgbmV3IEVycm9yKFwifFwiICsgcyArIFwifCBpcyBub3QgYW4gSVNPODYwMSBEdXJhdGlvblwiKTtcblx0Zm9yKHZhciBpID0gMTsgaSAhPSBtLmxlbmd0aDsgKytpKSB7XG5cdFx0aWYoIW1baV0pIGNvbnRpbnVlO1xuXHRcdG10ID0gMTtcblx0XHRpZihpID4gMykgdGltZSA9IHRydWU7XG5cdFx0c3dpdGNoKG1baV0uc2xpY2UobVtpXS5sZW5ndGgtMSkpIHtcblx0XHRcdGNhc2UgJ1knOlxuXHRcdFx0XHR0aHJvdyBuZXcgRXJyb3IoXCJVbnN1cHBvcnRlZCBJU08gRHVyYXRpb24gRmllbGQ6IFwiICsgbVtpXS5zbGljZShtW2ldLmxlbmd0aC0xKSk7XG5cdFx0XHRjYXNlICdEJzogbXQgKj0gMjQ7XG5cdFx0XHRcdC8qIGZhbGxzIHRocm91Z2ggKi9cblx0XHRcdGNhc2UgJ0gnOiBtdCAqPSA2MDtcblx0XHRcdFx0LyogZmFsbHMgdGhyb3VnaCAqL1xuXHRcdFx0Y2FzZSAnTSc6XG5cdFx0XHRcdGlmKCF0aW1lKSB0aHJvdyBuZXcgRXJyb3IoXCJVbnN1cHBvcnRlZCBJU08gRHVyYXRpb24gRmllbGQ6IE1cIik7XG5cdFx0XHRcdGVsc2UgbXQgKj0gNjA7XG5cdFx0XHRcdC8qIGZhbGxzIHRocm91Z2ggKi9cblx0XHRcdGNhc2UgJ1MnOiBicmVhaztcblx0XHR9XG5cdFx0c2VjICs9IG10ICogcGFyc2VJbnQobVtpXSwgMTApO1xuXHR9XG5cdHJldHVybiBzZWM7XG59XG5cbnZhciBnb29kX3BkX2RhdGVfMSA9IC8qI19fUFVSRV9fKi9uZXcgRGF0ZSgnMjAxNy0wMi0xOVQxOTowNjowOS4wMDBaJyk7XG52YXIgZ29vZF9wZF9kYXRlID0gLyojX19QVVJFX18qL2lzTmFOKC8qI19fUFVSRV9fKi9nb29kX3BkX2RhdGVfMS5nZXRGdWxsWWVhcigpKSA/IC8qI19fUFVSRV9fKi9uZXcgRGF0ZSgnMi8xOS8xNycpIDogZ29vZF9wZF9kYXRlXzE7XG52YXIgZ29vZF9wZCA9IC8qI19fUFVSRV9fKi9nb29kX3BkX2RhdGUuZ2V0RnVsbFllYXIoKSA9PSAyMDE3O1xuLyogcGFyc2VzIGEgZGF0ZSBhcyBhIGxvY2FsIGRhdGUgKi9cbmZ1bmN0aW9uIHBhcnNlRGF0ZShzdHIvKjpzdHJpbmd8RGF0ZSovLCBmaXhkYXRlLyo6P251bWJlciovKS8qOkRhdGUqLyB7XG5cdHZhciBkID0gbmV3IERhdGUoc3RyKTtcblx0aWYoZ29vZF9wZCkge1xuXHRcdC8qOjogaWYoZml4ZGF0ZSA9PSBudWxsKSBmaXhkYXRlID0gMDsgKi9cblx0XHRpZihmaXhkYXRlID4gMCkgZC5zZXRUaW1lKGQuZ2V0VGltZSgpICsgZC5nZXRUaW1lem9uZU9mZnNldCgpICogNjAgKiAxMDAwKTtcblx0XHRlbHNlIGlmKGZpeGRhdGUgPCAwKSBkLnNldFRpbWUoZC5nZXRUaW1lKCkgLSBkLmdldFRpbWV6b25lT2Zmc2V0KCkgKiA2MCAqIDEwMDApO1xuXHRcdHJldHVybiBkO1xuXHR9XG5cdGlmKHN0ciBpbnN0YW5jZW9mIERhdGUpIHJldHVybiBzdHI7XG5cdGlmKGdvb2RfcGRfZGF0ZS5nZXRGdWxsWWVhcigpID09IDE5MTcgJiYgIWlzTmFOKGQuZ2V0RnVsbFllYXIoKSkpIHtcblx0XHR2YXIgcyA9IGQuZ2V0RnVsbFllYXIoKTtcblx0XHRpZihzdHIuaW5kZXhPZihcIlwiICsgcykgPiAtMSkgcmV0dXJuIGQ7XG5cdFx0ZC5zZXRGdWxsWWVhcihkLmdldEZ1bGxZZWFyKCkgKyAxMDApOyByZXR1cm4gZDtcblx0fVxuXHR2YXIgbiA9IHN0ci5tYXRjaCgvXFxkKy9nKXx8W1wiMjAxN1wiLFwiMlwiLFwiMTlcIixcIjBcIixcIjBcIixcIjBcIl07XG5cdHZhciBvdXQgPSBuZXcgRGF0ZSgrblswXSwgK25bMV0gLSAxLCArblsyXSwgKCtuWzNdfHwwKSwgKCtuWzRdfHwwKSwgKCtuWzVdfHwwKSk7XG5cdGlmKHN0ci5pbmRleE9mKFwiWlwiKSA+IC0xKSBvdXQgPSBuZXcgRGF0ZShvdXQuZ2V0VGltZSgpIC0gb3V0LmdldFRpbWV6b25lT2Zmc2V0KCkgKiA2MCAqIDEwMDApO1xuXHRyZXR1cm4gb3V0O1xufVxuXG5mdW5jdGlvbiBjYzJzdHIoYXJyLyo6QXJyYXk8bnVtYmVyPiovLCBkZWJvbWl0KS8qOnN0cmluZyovIHtcblx0aWYoaGFzX2J1ZiAmJiBCdWZmZXIuaXNCdWZmZXIoYXJyKSkge1xuXHRcdGlmKGRlYm9taXQpIHtcblx0XHRcdGlmKGFyclswXSA9PSAweEZGICYmIGFyclsxXSA9PSAweEZFKSByZXR1cm4gdXRmOHdyaXRlKGFyci5zbGljZSgyKS50b1N0cmluZyhcInV0ZjE2bGVcIikpO1xuXHRcdFx0aWYoYXJyWzFdID09IDB4RkUgJiYgYXJyWzJdID09IDB4RkYpIHJldHVybiB1dGY4d3JpdGUodXRmMTZiZXJlYWQoYXJyLnNsaWNlKDIpLnRvU3RyaW5nKFwiYmluYXJ5XCIpKSk7XG5cdFx0fVxuXHRcdHJldHVybiBhcnIudG9TdHJpbmcoXCJiaW5hcnlcIik7XG5cdH1cblxuXHRpZih0eXBlb2YgVGV4dERlY29kZXIgIT09IFwidW5kZWZpbmVkXCIpIHRyeSB7XG5cdFx0aWYoZGVib21pdCkge1xuXHRcdFx0aWYoYXJyWzBdID09IDB4RkYgJiYgYXJyWzFdID09IDB4RkUpIHJldHVybiB1dGY4d3JpdGUobmV3IFRleHREZWNvZGVyKFwidXRmLTE2bGVcIikuZGVjb2RlKGFyci5zbGljZSgyKSkpO1xuXHRcdFx0aWYoYXJyWzBdID09IDB4RkUgJiYgYXJyWzFdID09IDB4RkYpIHJldHVybiB1dGY4d3JpdGUobmV3IFRleHREZWNvZGVyKFwidXRmLTE2YmVcIikuZGVjb2RlKGFyci5zbGljZSgyKSkpO1xuXHRcdH1cblx0XHR2YXIgcmV2ID0ge1xuXHRcdFx0XCJcXHUyMGFjXCI6IFwiXFx4ODBcIiwgXCJcXHUyMDFhXCI6IFwiXFx4ODJcIiwgXCJcXHUwMTkyXCI6IFwiXFx4ODNcIiwgXCJcXHUyMDFlXCI6IFwiXFx4ODRcIixcblx0XHRcdFwiXFx1MjAyNlwiOiBcIlxceDg1XCIsIFwiXFx1MjAyMFwiOiBcIlxceDg2XCIsIFwiXFx1MjAyMVwiOiBcIlxceDg3XCIsIFwiXFx1MDJjNlwiOiBcIlxceDg4XCIsXG5cdFx0XHRcIlxcdTIwMzBcIjogXCJcXHg4OVwiLCBcIlxcdTAxNjBcIjogXCJcXHg4YVwiLCBcIlxcdTIwMzlcIjogXCJcXHg4YlwiLCBcIlxcdTAxNTJcIjogXCJcXHg4Y1wiLFxuXHRcdFx0XCJcXHUwMTdkXCI6IFwiXFx4OGVcIiwgXCJcXHUyMDE4XCI6IFwiXFx4OTFcIiwgXCJcXHUyMDE5XCI6IFwiXFx4OTJcIiwgXCJcXHUyMDFjXCI6IFwiXFx4OTNcIixcblx0XHRcdFwiXFx1MjAxZFwiOiBcIlxceDk0XCIsIFwiXFx1MjAyMlwiOiBcIlxceDk1XCIsIFwiXFx1MjAxM1wiOiBcIlxceDk2XCIsIFwiXFx1MjAxNFwiOiBcIlxceDk3XCIsXG5cdFx0XHRcIlxcdTAyZGNcIjogXCJcXHg5OFwiLCBcIlxcdTIxMjJcIjogXCJcXHg5OVwiLCBcIlxcdTAxNjFcIjogXCJcXHg5YVwiLCBcIlxcdTIwM2FcIjogXCJcXHg5YlwiLFxuXHRcdFx0XCJcXHUwMTUzXCI6IFwiXFx4OWNcIiwgXCJcXHUwMTdlXCI6IFwiXFx4OWVcIiwgXCJcXHUwMTc4XCI6IFwiXFx4OWZcIlxuXHRcdH07XG5cdFx0aWYoQXJyYXkuaXNBcnJheShhcnIpKSBhcnIgPSBuZXcgVWludDhBcnJheShhcnIpO1xuXHRcdHJldHVybiBuZXcgVGV4dERlY29kZXIoXCJsYXRpbjFcIikuZGVjb2RlKGFycikucmVwbGFjZSgvW+KCrOKAmsaS4oCe4oCm4oCg4oChy4bigLDFoOKAucWSxb3igJjigJnigJzigJ3igKLigJPigJTLnOKEosWh4oC6xZPFvsW4XS9nLCBmdW5jdGlvbihjKSB7IHJldHVybiByZXZbY10gfHwgYzsgfSk7XG5cdH0gY2F0Y2goZSkge31cblxuXHR2YXIgbyA9IFtdO1xuXHRmb3IodmFyIGkgPSAwOyBpICE9IGFyci5sZW5ndGg7ICsraSkgby5wdXNoKFN0cmluZy5mcm9tQ2hhckNvZGUoYXJyW2ldKSk7XG5cdHJldHVybiBvLmpvaW4oXCJcIik7XG59XG5cbmZ1bmN0aW9uIGR1cChvLyo6YW55Ki8pLyo6YW55Ki8ge1xuXHRpZih0eXBlb2YgSlNPTiAhPSAndW5kZWZpbmVkJyAmJiAhQXJyYXkuaXNBcnJheShvKSkgcmV0dXJuIEpTT04ucGFyc2UoSlNPTi5zdHJpbmdpZnkobykpO1xuXHRpZih0eXBlb2YgbyAhPSAnb2JqZWN0JyB8fCBvID09IG51bGwpIHJldHVybiBvO1xuXHRpZihvIGluc3RhbmNlb2YgRGF0ZSkgcmV0dXJuIG5ldyBEYXRlKG8uZ2V0VGltZSgpKTtcblx0dmFyIG91dCA9IHt9O1xuXHRmb3IodmFyIGsgaW4gbykgaWYoT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKG8sIGspKSBvdXRba10gPSBkdXAob1trXSk7XG5cdHJldHVybiBvdXQ7XG59XG5cbmZ1bmN0aW9uIGZpbGwoYy8qOnN0cmluZyovLGwvKjpudW1iZXIqLykvKjpzdHJpbmcqLyB7IHZhciBvID0gXCJcIjsgd2hpbGUoby5sZW5ndGggPCBsKSBvKz1jOyByZXR1cm4gbzsgfVxuXG4vKiBUT0RPOiBzdHJlc3MgdGVzdCAqL1xuZnVuY3Rpb24gZnV6enludW0ocy8qOnN0cmluZyovKS8qOm51bWJlciovIHtcblx0dmFyIHYvKjpudW1iZXIqLyA9IE51bWJlcihzKTtcblx0aWYoIWlzTmFOKHYpKSByZXR1cm4gaXNGaW5pdGUodikgPyB2IDogTmFOO1xuXHRpZighL1xcZC8udGVzdChzKSkgcmV0dXJuIHY7XG5cdHZhciB3dCA9IDE7XG5cdHZhciBzcyA9IHMucmVwbGFjZSgvKFtcXGRdKSwoW1xcZF0pL2csXCIkMSQyXCIpLnJlcGxhY2UoL1skXS9nLFwiXCIpLnJlcGxhY2UoL1slXS9nLCBmdW5jdGlvbigpIHsgd3QgKj0gMTAwOyByZXR1cm4gXCJcIjt9KTtcblx0aWYoIWlzTmFOKHYgPSBOdW1iZXIoc3MpKSkgcmV0dXJuIHYgLyB3dDtcblx0c3MgPSBzcy5yZXBsYWNlKC9bKF0oLiopWyldLyxmdW5jdGlvbigkJCwgJDEpIHsgd3QgPSAtd3Q7IHJldHVybiAkMTt9KTtcblx0aWYoIWlzTmFOKHYgPSBOdW1iZXIoc3MpKSkgcmV0dXJuIHYgLyB3dDtcblx0cmV0dXJuIHY7XG59XG52YXIgbG93ZXJfbW9udGhzID0gWydqYW51YXJ5JywgJ2ZlYnJ1YXJ5JywgJ21hcmNoJywgJ2FwcmlsJywgJ21heScsICdqdW5lJywgJ2p1bHknLCAnYXVndXN0JywgJ3NlcHRlbWJlcicsICdvY3RvYmVyJywgJ25vdmVtYmVyJywgJ2RlY2VtYmVyJ107XG5mdW5jdGlvbiBmdXp6eWRhdGUocy8qOnN0cmluZyovKS8qOkRhdGUqLyB7XG5cdHZhciBvID0gbmV3IERhdGUocyksIG4gPSBuZXcgRGF0ZShOYU4pO1xuXHR2YXIgeSA9IG8uZ2V0WWVhcigpLCBtID0gby5nZXRNb250aCgpLCBkID0gby5nZXREYXRlKCk7XG5cdGlmKGlzTmFOKGQpKSByZXR1cm4gbjtcblx0dmFyIGxvd2VyID0gcy50b0xvd2VyQ2FzZSgpO1xuXHRpZihsb3dlci5tYXRjaCgvamFufGZlYnxtYXJ8YXByfG1heXxqdW58anVsfGF1Z3xzZXB8b2N0fG5vdnxkZWMvKSkge1xuXHRcdGxvd2VyID0gbG93ZXIucmVwbGFjZSgvW15hLXpdL2csXCJcIikucmVwbGFjZSgvKFteYS16XXxeKVthcF1tPyhbXmEtel18JCkvLFwiXCIpO1xuXHRcdGlmKGxvd2VyLmxlbmd0aCA+IDMgJiYgbG93ZXJfbW9udGhzLmluZGV4T2YobG93ZXIpID09IC0xKSByZXR1cm4gbjtcblx0fSBlbHNlIGlmKGxvd2VyLm1hdGNoKC9bYS16XS8pKSByZXR1cm4gbjtcblx0aWYoeSA8IDAgfHwgeSA+IDgwOTkpIHJldHVybiBuO1xuXHRpZigobSA+IDAgfHwgZCA+IDEpICYmIHkgIT0gMTAxKSByZXR1cm4gbztcblx0aWYocy5tYXRjaCgvW14tMC05OixcXC9cXFxcXS8pKSByZXR1cm4gbjtcblx0cmV0dXJuIG87XG59XG5cbnZhciBzcGxpdF9yZWdleCA9IC8qI19fUFVSRV9fKi8oZnVuY3Rpb24oKSB7XG5cdHZhciBzYWZlX3NwbGl0X3JlZ2V4ID0gXCJhYmFjYWJhXCIuc3BsaXQoLyg6P2IpL2kpLmxlbmd0aCA9PSA1O1xuXHRyZXR1cm4gZnVuY3Rpb24gc3BsaXRfcmVnZXgoc3RyLyo6c3RyaW5nKi8sIHJlLCBkZWYvKjpzdHJpbmcqLykvKjpBcnJheTxzdHJpbmc+Ki8ge1xuXHRcdGlmKHNhZmVfc3BsaXRfcmVnZXggfHwgdHlwZW9mIHJlID09IFwic3RyaW5nXCIpIHJldHVybiBzdHIuc3BsaXQocmUpO1xuXHRcdHZhciBwID0gc3RyLnNwbGl0KHJlKSwgbyA9IFtwWzBdXTtcblx0XHRmb3IodmFyIGkgPSAxOyBpIDwgcC5sZW5ndGg7ICsraSkgeyBvLnB1c2goZGVmKTsgby5wdXNoKHBbaV0pOyB9XG5cdFx0cmV0dXJuIG87XG5cdH07XG59KSgpO1xuZnVuY3Rpb24gZ2V0ZGF0YXN0cihkYXRhKS8qOj9zdHJpbmcqLyB7XG5cdGlmKCFkYXRhKSByZXR1cm4gbnVsbDtcblx0aWYoZGF0YS5jb250ZW50ICYmIGRhdGEudHlwZSkgcmV0dXJuIGNjMnN0cihkYXRhLmNvbnRlbnQsIHRydWUpO1xuXHRpZihkYXRhLmRhdGEpIHJldHVybiBkZWJvbShkYXRhLmRhdGEpO1xuXHRpZihkYXRhLmFzTm9kZUJ1ZmZlciAmJiBoYXNfYnVmKSByZXR1cm4gZGVib20oZGF0YS5hc05vZGVCdWZmZXIoKS50b1N0cmluZygnYmluYXJ5JykpO1xuXHRpZihkYXRhLmFzQmluYXJ5KSByZXR1cm4gZGVib20oZGF0YS5hc0JpbmFyeSgpKTtcblx0aWYoZGF0YS5fZGF0YSAmJiBkYXRhLl9kYXRhLmdldENvbnRlbnQpIHJldHVybiBkZWJvbShjYzJzdHIoQXJyYXkucHJvdG90eXBlLnNsaWNlLmNhbGwoZGF0YS5fZGF0YS5nZXRDb250ZW50KCksMCkpKTtcblx0cmV0dXJuIG51bGw7XG59XG5cbmZ1bmN0aW9uIGdldGRhdGFiaW4oZGF0YSkge1xuXHRpZighZGF0YSkgcmV0dXJuIG51bGw7XG5cdGlmKGRhdGEuZGF0YSkgcmV0dXJuIGNoYXJfY29kZXMoZGF0YS5kYXRhKTtcblx0aWYoZGF0YS5hc05vZGVCdWZmZXIgJiYgaGFzX2J1ZikgcmV0dXJuIGRhdGEuYXNOb2RlQnVmZmVyKCk7XG5cdGlmKGRhdGEuX2RhdGEgJiYgZGF0YS5fZGF0YS5nZXRDb250ZW50KSB7XG5cdFx0dmFyIG8gPSBkYXRhLl9kYXRhLmdldENvbnRlbnQoKTtcblx0XHRpZih0eXBlb2YgbyA9PSBcInN0cmluZ1wiKSByZXR1cm4gY2hhcl9jb2RlcyhvKTtcblx0XHRyZXR1cm4gQXJyYXkucHJvdG90eXBlLnNsaWNlLmNhbGwobyk7XG5cdH1cblx0aWYoZGF0YS5jb250ZW50ICYmIGRhdGEudHlwZSkgcmV0dXJuIGRhdGEuY29udGVudDtcblx0cmV0dXJuIG51bGw7XG59XG5cbmZ1bmN0aW9uIGdldGRhdGEoZGF0YSkgeyByZXR1cm4gKGRhdGEgJiYgZGF0YS5uYW1lLnNsaWNlKC00KSA9PT0gXCIuYmluXCIpID8gZ2V0ZGF0YWJpbihkYXRhKSA6IGdldGRhdGFzdHIoZGF0YSk7IH1cblxuLyogUGFydCAyIFNlY3Rpb24gMTAuMS4yIFwiTWFwcGluZyBDb250ZW50IFR5cGVzXCIgTmFtZXMgYXJlIGNhc2UtaW5zZW5zaXRpdmUgKi9cbi8qIE9BU0lTIGRvZXMgbm90IGNvbW1lbnQgb24gZmlsZW5hbWUgY2FzZSBzZW5zaXRpdml0eSAqL1xuZnVuY3Rpb24gc2FmZWdldHppcGZpbGUoemlwLCBmaWxlLyo6c3RyaW5nKi8pIHtcblx0dmFyIGsgPSB6aXAuRnVsbFBhdGhzIHx8IGtleXMoemlwLmZpbGVzKTtcblx0dmFyIGYgPSBmaWxlLnRvTG93ZXJDYXNlKCkucmVwbGFjZSgvW1xcL10vZywgJ1xcXFwnKSwgZyA9IGYucmVwbGFjZSgvXFxcXC9nLCdcXC8nKTtcblx0Zm9yKHZhciBpPTA7IGk8ay5sZW5ndGg7ICsraSkge1xuXHRcdHZhciBuID0ga1tpXS5yZXBsYWNlKC9eUm9vdCBFbnRyeVtcXC9dLyxcIlwiKS50b0xvd2VyQ2FzZSgpO1xuXHRcdGlmKGYgPT0gbiB8fCBnID09IG4pIHJldHVybiB6aXAuZmlsZXMgPyB6aXAuZmlsZXNba1tpXV0gOiB6aXAuRmlsZUluZGV4W2ldO1xuXHR9XG5cdHJldHVybiBudWxsO1xufVxuXG5mdW5jdGlvbiBnZXR6aXBmaWxlKHppcCwgZmlsZS8qOnN0cmluZyovKSB7XG5cdHZhciBvID0gc2FmZWdldHppcGZpbGUoemlwLCBmaWxlKTtcblx0aWYobyA9PSBudWxsKSB0aHJvdyBuZXcgRXJyb3IoXCJDYW5ub3QgZmluZCBmaWxlIFwiICsgZmlsZSArIFwiIGluIHppcFwiKTtcblx0cmV0dXJuIG87XG59XG5cbmZ1bmN0aW9uIGdldHppcGRhdGEoemlwLCBmaWxlLyo6c3RyaW5nKi8sIHNhZmUvKjo/Ym9vbGVhbiovKS8qOmFueSovIHtcblx0aWYoIXNhZmUpIHJldHVybiBnZXRkYXRhKGdldHppcGZpbGUoemlwLCBmaWxlKSk7XG5cdGlmKCFmaWxlKSByZXR1cm4gbnVsbDtcblx0dHJ5IHsgcmV0dXJuIGdldHppcGRhdGEoemlwLCBmaWxlKTsgfSBjYXRjaChlKSB7IHJldHVybiBudWxsOyB9XG59XG5cbmZ1bmN0aW9uIGdldHppcHN0cih6aXAsIGZpbGUvKjpzdHJpbmcqLywgc2FmZS8qOj9ib29sZWFuKi8pLyo6P3N0cmluZyovIHtcblx0aWYoIXNhZmUpIHJldHVybiBnZXRkYXRhc3RyKGdldHppcGZpbGUoemlwLCBmaWxlKSk7XG5cdGlmKCFmaWxlKSByZXR1cm4gbnVsbDtcblx0dHJ5IHsgcmV0dXJuIGdldHppcHN0cih6aXAsIGZpbGUpOyB9IGNhdGNoKGUpIHsgcmV0dXJuIG51bGw7IH1cbn1cblxuZnVuY3Rpb24gZ2V0emlwYmluKHppcCwgZmlsZS8qOnN0cmluZyovLCBzYWZlLyo6P2Jvb2xlYW4qLykvKjphbnkqLyB7XG5cdGlmKCFzYWZlKSByZXR1cm4gZ2V0ZGF0YWJpbihnZXR6aXBmaWxlKHppcCwgZmlsZSkpO1xuXHRpZighZmlsZSkgcmV0dXJuIG51bGw7XG5cdHRyeSB7IHJldHVybiBnZXR6aXBiaW4oemlwLCBmaWxlKTsgfSBjYXRjaChlKSB7IHJldHVybiBudWxsOyB9XG59XG5cbmZ1bmN0aW9uIHppcGVudHJpZXMoemlwKSB7XG5cdHZhciBrID0gemlwLkZ1bGxQYXRocyB8fCBrZXlzKHppcC5maWxlcyksIG8gPSBbXTtcblx0Zm9yKHZhciBpID0gMDsgaSA8IGsubGVuZ3RoOyArK2kpIGlmKGtbaV0uc2xpY2UoLTEpICE9ICcvJykgby5wdXNoKGtbaV0ucmVwbGFjZSgvXlJvb3QgRW50cnlbXFwvXS8sIFwiXCIpKTtcblx0cmV0dXJuIG8uc29ydCgpO1xufVxuXG5mdW5jdGlvbiB6aXBfYWRkX2ZpbGUoemlwLCBwYXRoLCBjb250ZW50KSB7XG5cdGlmKHppcC5GdWxsUGF0aHMpIHtcblx0XHRpZih0eXBlb2YgY29udGVudCA9PSBcInN0cmluZ1wiKSB7XG5cdFx0XHR2YXIgcmVzO1xuXHRcdFx0aWYoaGFzX2J1ZikgcmVzID0gQnVmZmVyX2Zyb20oY29udGVudCk7XG5cdFx0XHQvKiBUT0RPOiBpbnZlc3RpZ2F0ZSBwZXJmb3JtYW5jZSBpbiBFZGdlIDEzICovXG5cdFx0XHQvL2Vsc2UgaWYodHlwZW9mIFRleHRFbmNvZGVyICE9PSBcInVuZGVmaW5lZFwiKSByZXMgPSBuZXcgVGV4dEVuY29kZXIoKS5lbmNvZGUoY29udGVudCk7XG5cdFx0XHRlbHNlIHJlcyA9IHV0ZjhkZWNvZGUoY29udGVudCk7XG5cdFx0XHRyZXR1cm4gQ0ZCLnV0aWxzLmNmYl9hZGQoemlwLCBwYXRoLCByZXMpO1xuXHRcdH1cblx0XHRDRkIudXRpbHMuY2ZiX2FkZCh6aXAsIHBhdGgsIGNvbnRlbnQpO1xuXHR9XG5cdGVsc2UgemlwLmZpbGUocGF0aCwgY29udGVudCk7XG59XG5cbmZ1bmN0aW9uIHppcF9uZXcoKSB7IHJldHVybiBDRkIudXRpbHMuY2ZiX25ldygpOyB9XG5cbmZ1bmN0aW9uIHppcF9yZWFkKGQsIG8pIHtcblx0c3dpdGNoKG8udHlwZSkge1xuXHRcdGNhc2UgXCJiYXNlNjRcIjogcmV0dXJuIENGQi5yZWFkKGQsIHsgdHlwZTogXCJiYXNlNjRcIiB9KTtcblx0XHRjYXNlIFwiYmluYXJ5XCI6IHJldHVybiBDRkIucmVhZChkLCB7IHR5cGU6IFwiYmluYXJ5XCIgfSk7XG5cdFx0Y2FzZSBcImJ1ZmZlclwiOiBjYXNlIFwiYXJyYXlcIjogcmV0dXJuIENGQi5yZWFkKGQsIHsgdHlwZTogXCJidWZmZXJcIiB9KTtcblx0fVxuXHR0aHJvdyBuZXcgRXJyb3IoXCJVbnJlY29nbml6ZWQgdHlwZSBcIiArIG8udHlwZSk7XG59XG5cbmZ1bmN0aW9uIHJlc29sdmVfcGF0aChwYXRoLyo6c3RyaW5nKi8sIGJhc2UvKjpzdHJpbmcqLykvKjpzdHJpbmcqLyB7XG5cdGlmKHBhdGguY2hhckF0KDApID09IFwiL1wiKSByZXR1cm4gcGF0aC5zbGljZSgxKTtcblx0dmFyIHJlc3VsdCA9IGJhc2Uuc3BsaXQoJy8nKTtcblx0aWYoYmFzZS5zbGljZSgtMSkgIT0gXCIvXCIpIHJlc3VsdC5wb3AoKTsgLy8gZm9sZGVyIHBhdGhcblx0dmFyIHRhcmdldCA9IHBhdGguc3BsaXQoJy8nKTtcblx0d2hpbGUgKHRhcmdldC5sZW5ndGggIT09IDApIHtcblx0XHR2YXIgc3RlcCA9IHRhcmdldC5zaGlmdCgpO1xuXHRcdGlmIChzdGVwID09PSAnLi4nKSByZXN1bHQucG9wKCk7XG5cdFx0ZWxzZSBpZiAoc3RlcCAhPT0gJy4nKSByZXN1bHQucHVzaChzdGVwKTtcblx0fVxuXHRyZXR1cm4gcmVzdWx0LmpvaW4oJy8nKTtcbn1cbnZhciBYTUxfSEVBREVSID0gJzw/eG1sIHZlcnNpb249XCIxLjBcIiBlbmNvZGluZz1cIlVURi04XCIgc3RhbmRhbG9uZT1cInllc1wiPz5cXHJcXG4nO1xudmFyIGF0dHJlZ2V4Zz0vKFteXCJcXHM/PlxcL10rKVxccyo9XFxzKigoPzpcIikoW15cIl0qKSg/OlwiKXwoPzonKShbXiddKikoPzonKXwoW14nXCI+XFxzXSspKS9nO1xudmFyIHRhZ3JlZ2V4MT0vPFtcXC9cXD9dP1thLXpBLVowLTk6Xy1dKyg/OlxccytbXlwiXFxzPz5cXC9dK1xccyo9XFxzKig/OlwiW15cIl0qXCJ8J1teJ10qJ3xbXidcIj5cXHM9XSspKSpcXHMqW1xcL1xcP10/Pi9tZywgdGFncmVnZXgyID0gLzxbXj5dKj4vZztcbnZhciB0YWdyZWdleCA9IC8qI19fUFVSRV9fKi9YTUxfSEVBREVSLm1hdGNoKHRhZ3JlZ2V4MSkgPyB0YWdyZWdleDEgOiB0YWdyZWdleDI7XG52YXIgbnNyZWdleD0vPFxcdyo6LywgbnNyZWdleDIgPSAvPChcXC8/KVxcdys6LztcbmZ1bmN0aW9uIHBhcnNleG1sdGFnKHRhZy8qOnN0cmluZyovLCBza2lwX3Jvb3QvKjo/Ym9vbGVhbiovLCBza2lwX0xDLyo6P2Jvb2xlYW4qLykvKjphbnkqLyB7XG5cdHZhciB6ID0gKHt9Lyo6YW55Ki8pO1xuXHR2YXIgZXEgPSAwLCBjID0gMDtcblx0Zm9yKDsgZXEgIT09IHRhZy5sZW5ndGg7ICsrZXEpIGlmKChjID0gdGFnLmNoYXJDb2RlQXQoZXEpKSA9PT0gMzIgfHwgYyA9PT0gMTAgfHwgYyA9PT0gMTMpIGJyZWFrO1xuXHRpZighc2tpcF9yb290KSB6WzBdID0gdGFnLnNsaWNlKDAsIGVxKTtcblx0aWYoZXEgPT09IHRhZy5sZW5ndGgpIHJldHVybiB6O1xuXHR2YXIgbSA9IHRhZy5tYXRjaChhdHRyZWdleGcpLCBqPTAsIHY9XCJcIiwgaT0wLCBxPVwiXCIsIGNjPVwiXCIsIHF1b3QgPSAxO1xuXHRpZihtKSBmb3IoaSA9IDA7IGkgIT0gbS5sZW5ndGg7ICsraSkge1xuXHRcdGNjID0gbVtpXTtcblx0XHRmb3IoYz0wOyBjICE9IGNjLmxlbmd0aDsgKytjKSBpZihjYy5jaGFyQ29kZUF0KGMpID09PSA2MSkgYnJlYWs7XG5cdFx0cSA9IGNjLnNsaWNlKDAsYykudHJpbSgpO1xuXHRcdHdoaWxlKGNjLmNoYXJDb2RlQXQoYysxKSA9PSAzMikgKytjO1xuXHRcdHF1b3QgPSAoKGVxPWNjLmNoYXJDb2RlQXQoYysxKSkgPT0gMzQgfHwgZXEgPT0gMzkpID8gMSA6IDA7XG5cdFx0diA9IGNjLnNsaWNlKGMrMStxdW90LCBjYy5sZW5ndGgtcXVvdCk7XG5cdFx0Zm9yKGo9MDtqIT1xLmxlbmd0aDsrK2opIGlmKHEuY2hhckNvZGVBdChqKSA9PT0gNTgpIGJyZWFrO1xuXHRcdGlmKGo9PT1xLmxlbmd0aCkge1xuXHRcdFx0aWYocS5pbmRleE9mKFwiX1wiKSA+IDApIHEgPSBxLnNsaWNlKDAsIHEuaW5kZXhPZihcIl9cIikpOyAvLyBmcm9tIG9kc1xuXHRcdFx0eltxXSA9IHY7XG5cdFx0XHRpZighc2tpcF9MQykgeltxLnRvTG93ZXJDYXNlKCldID0gdjtcblx0XHR9XG5cdFx0ZWxzZSB7XG5cdFx0XHR2YXIgayA9IChqPT09NSAmJiBxLnNsaWNlKDAsNSk9PT1cInhtbG5zXCI/XCJ4bWxuc1wiOlwiXCIpK3Euc2xpY2UoaisxKTtcblx0XHRcdGlmKHpba10gJiYgcS5zbGljZShqLTMsaikgPT0gXCJleHRcIikgY29udGludWU7IC8vIGZyb20gb2RzXG5cdFx0XHR6W2tdID0gdjtcblx0XHRcdGlmKCFza2lwX0xDKSB6W2sudG9Mb3dlckNhc2UoKV0gPSB2O1xuXHRcdH1cblx0fVxuXHRyZXR1cm4gejtcbn1cbmZ1bmN0aW9uIHN0cmlwX25zKHgvKjpzdHJpbmcqLykvKjpzdHJpbmcqLyB7IHJldHVybiB4LnJlcGxhY2UobnNyZWdleDIsIFwiPCQxXCIpOyB9XG5cbnZhciBlbmNvZGluZ3MgPSB7XG5cdCcmcXVvdDsnOiAnXCInLFxuXHQnJmFwb3M7JzogXCInXCIsXG5cdCcmZ3Q7JzogJz4nLFxuXHQnJmx0Oyc6ICc8Jyxcblx0JyZhbXA7JzogJyYnXG59O1xudmFyIHJlbmNvZGluZyA9IC8qI19fUFVSRV9fKi9ldmVydChlbmNvZGluZ3MpO1xuLy92YXIgcmVuY3N0ciA9IFwiJjw+J1xcXCJcIi5zcGxpdChcIlwiKTtcblxuLy8gVE9ETzogQ1AgcmVtYXAgKG5lZWQgdG8gcmVhZCBmaWxlIHZlcnNpb24gdG8gZGV0ZXJtaW5lIE9TKVxudmFyIHVuZXNjYXBleG1sLyo6U3RyaW5nQ29udiovID0gLyojX19QVVJFX18qLyhmdW5jdGlvbigpIHtcblx0LyogMjIuNC4yLjQgYnN0ciAoQmFzaWMgU3RyaW5nKSAqL1xuXHR2YXIgZW5jcmVnZXggPSAvJig/OnF1b3R8YXBvc3xndHxsdHxhbXB8I3g/KFtcXGRhLWZBLUZdKykpOy9pZywgY29kZXJlZ2V4ID0gL194KFtcXGRhLWZBLUZdezR9KV8vaWc7XG5cdHJldHVybiBmdW5jdGlvbiB1bmVzY2FwZXhtbCh0ZXh0Lyo6c3RyaW5nKi8pLyo6c3RyaW5nKi8ge1xuXHRcdHZhciBzID0gdGV4dCArICcnLCBpID0gcy5pbmRleE9mKFwiPCFbQ0RBVEFbXCIpO1xuXHRcdGlmKGkgPT0gLTEpIHJldHVybiBzLnJlcGxhY2UoZW5jcmVnZXgsIGZ1bmN0aW9uKCQkLCAkMSkgeyByZXR1cm4gZW5jb2RpbmdzWyQkXXx8U3RyaW5nLmZyb21DaGFyQ29kZShwYXJzZUludCgkMSwkJC5pbmRleE9mKFwieFwiKT4tMT8xNjoxMCkpfHwkJDsgfSkucmVwbGFjZShjb2RlcmVnZXgsZnVuY3Rpb24obSxjKSB7cmV0dXJuIFN0cmluZy5mcm9tQ2hhckNvZGUocGFyc2VJbnQoYywxNikpO30pO1xuXHRcdHZhciBqID0gcy5pbmRleE9mKFwiXV0+XCIpO1xuXHRcdHJldHVybiB1bmVzY2FwZXhtbChzLnNsaWNlKDAsIGkpKSArIHMuc2xpY2UoaSs5LGopICsgdW5lc2NhcGV4bWwocy5zbGljZShqKzMpKTtcblx0fTtcbn0pKCk7XG5cbnZhciBkZWNyZWdleD0vWyY8PidcIl0vZywgY2hhcmVnZXggPSAvW1xcdTAwMDAtXFx1MDAwOFxcdTAwMGItXFx1MDAxZl0vZztcbmZ1bmN0aW9uIGVzY2FwZXhtbCh0ZXh0Lyo6c3RyaW5nKi8pLyo6c3RyaW5nKi97XG5cdHZhciBzID0gdGV4dCArICcnO1xuXHRyZXR1cm4gcy5yZXBsYWNlKGRlY3JlZ2V4LCBmdW5jdGlvbih5KSB7IHJldHVybiByZW5jb2RpbmdbeV07IH0pLnJlcGxhY2UoY2hhcmVnZXgsZnVuY3Rpb24ocykgeyByZXR1cm4gXCJfeFwiICsgKFwiMDAwXCIrcy5jaGFyQ29kZUF0KDApLnRvU3RyaW5nKDE2KSkuc2xpY2UoLTQpICsgXCJfXCI7fSk7XG59XG5mdW5jdGlvbiBlc2NhcGV4bWx0YWcodGV4dC8qOnN0cmluZyovKS8qOnN0cmluZyoveyByZXR1cm4gZXNjYXBleG1sKHRleHQpLnJlcGxhY2UoLyAvZyxcIl94MDAyMF9cIik7IH1cblxudmFyIGh0bWxjaGFyZWdleCA9IC9bXFx1MDAwMC1cXHUwMDFmXS9nO1xuZnVuY3Rpb24gZXNjYXBlaHRtbCh0ZXh0Lyo6c3RyaW5nKi8pLyo6c3RyaW5nKi97XG5cdHZhciBzID0gdGV4dCArICcnO1xuXHRyZXR1cm4gcy5yZXBsYWNlKGRlY3JlZ2V4LCBmdW5jdGlvbih5KSB7IHJldHVybiByZW5jb2RpbmdbeV07IH0pLnJlcGxhY2UoL1xcbi9nLCBcIjxici8+XCIpLnJlcGxhY2UoaHRtbGNoYXJlZ2V4LGZ1bmN0aW9uKHMpIHsgcmV0dXJuIFwiJiN4XCIgKyAoXCIwMDBcIitzLmNoYXJDb2RlQXQoMCkudG9TdHJpbmcoMTYpKS5zbGljZSgtNCkgKyBcIjtcIjsgfSk7XG59XG5cbmZ1bmN0aW9uIGVzY2FwZXhsbWwodGV4dC8qOnN0cmluZyovKS8qOnN0cmluZyove1xuXHR2YXIgcyA9IHRleHQgKyAnJztcblx0cmV0dXJuIHMucmVwbGFjZShkZWNyZWdleCwgZnVuY3Rpb24oeSkgeyByZXR1cm4gcmVuY29kaW5nW3ldOyB9KS5yZXBsYWNlKGh0bWxjaGFyZWdleCxmdW5jdGlvbihzKSB7IHJldHVybiBcIiYjeFwiICsgKHMuY2hhckNvZGVBdCgwKS50b1N0cmluZygxNikpLnRvVXBwZXJDYXNlKCkgKyBcIjtcIjsgfSk7XG59XG5cbi8qIFRPRE86IGhhbmRsZSBjb2RlcGFnZXMgKi9cbnZhciB4bG1sX2ZpeHN0ci8qOlN0cmluZ0NvbnYqLyA9IC8qI19fUFVSRV9fKi8oZnVuY3Rpb24oKSB7XG5cdHZhciBlbnRyZWdleCA9IC8mIyhcXGQrKTsvZztcblx0ZnVuY3Rpb24gZW50cmVwbCgkJC8qOnN0cmluZyovLCQxLyo6c3RyaW5nKi8pLyo6c3RyaW5nKi8geyByZXR1cm4gU3RyaW5nLmZyb21DaGFyQ29kZShwYXJzZUludCgkMSwxMCkpOyB9XG5cdHJldHVybiBmdW5jdGlvbiB4bG1sX2ZpeHN0cihzdHIvKjpzdHJpbmcqLykvKjpzdHJpbmcqLyB7IHJldHVybiBzdHIucmVwbGFjZShlbnRyZWdleCxlbnRyZXBsKTsgfTtcbn0pKCk7XG5mdW5jdGlvbiB4bG1sX3VuZml4c3RyKHN0ci8qOnN0cmluZyovKS8qOnN0cmluZyovIHsgcmV0dXJuIHN0ci5yZXBsYWNlKC8oXFxyXFxufFtcXHJcXG5dKS9nLFwiXFwmIzEwO1wiKTsgfVxuXG5mdW5jdGlvbiBwYXJzZXhtbGJvb2wodmFsdWUvKjphbnkqLykvKjpib29sZWFuKi8ge1xuXHRzd2l0Y2godmFsdWUpIHtcblx0XHRjYXNlIDE6IGNhc2UgdHJ1ZTogY2FzZSAnMSc6IGNhc2UgJ3RydWUnOiBjYXNlICdUUlVFJzogcmV0dXJuIHRydWU7XG5cdFx0LyogY2FzZSAnMCc6IGNhc2UgJ2ZhbHNlJzogY2FzZSAnRkFMU0UnOiovXG5cdFx0ZGVmYXVsdDogcmV0dXJuIGZhbHNlO1xuXHR9XG59XG5cbmZ1bmN0aW9uIHV0ZjhyZWFkYShvcmlnLyo6c3RyaW5nKi8pLyo6c3RyaW5nKi8ge1xuXHR2YXIgb3V0ID0gXCJcIiwgaSA9IDAsIGMgPSAwLCBkID0gMCwgZSA9IDAsIGYgPSAwLCB3ID0gMDtcblx0d2hpbGUgKGkgPCBvcmlnLmxlbmd0aCkge1xuXHRcdGMgPSBvcmlnLmNoYXJDb2RlQXQoaSsrKTtcblx0XHRpZiAoYyA8IDEyOCkgeyBvdXQgKz0gU3RyaW5nLmZyb21DaGFyQ29kZShjKTsgY29udGludWU7IH1cblx0XHRkID0gb3JpZy5jaGFyQ29kZUF0KGkrKyk7XG5cdFx0aWYgKGM+MTkxICYmIGM8MjI0KSB7IGYgPSAoKGMgJiAzMSkgPDwgNik7IGYgfD0gKGQgJiA2Myk7IG91dCArPSBTdHJpbmcuZnJvbUNoYXJDb2RlKGYpOyBjb250aW51ZTsgfVxuXHRcdGUgPSBvcmlnLmNoYXJDb2RlQXQoaSsrKTtcblx0XHRpZiAoYyA8IDI0MCkgeyBvdXQgKz0gU3RyaW5nLmZyb21DaGFyQ29kZSgoKGMgJiAxNSkgPDwgMTIpIHwgKChkICYgNjMpIDw8IDYpIHwgKGUgJiA2MykpOyBjb250aW51ZTsgfVxuXHRcdGYgPSBvcmlnLmNoYXJDb2RlQXQoaSsrKTtcblx0XHR3ID0gKCgoYyAmIDcpIDw8IDE4KSB8ICgoZCAmIDYzKSA8PCAxMikgfCAoKGUgJiA2MykgPDwgNikgfCAoZiAmIDYzKSktNjU1MzY7XG5cdFx0b3V0ICs9IFN0cmluZy5mcm9tQ2hhckNvZGUoMHhEODAwICsgKCh3Pj4+MTApJjEwMjMpKTtcblx0XHRvdXQgKz0gU3RyaW5nLmZyb21DaGFyQ29kZSgweERDMDAgKyAodyYxMDIzKSk7XG5cdH1cblx0cmV0dXJuIG91dDtcbn1cblxuZnVuY3Rpb24gdXRmOHJlYWRiKGRhdGEpIHtcblx0dmFyIG91dCA9IG5ld19yYXdfYnVmKDIqZGF0YS5sZW5ndGgpLCB3LCBpLCBqID0gMSwgayA9IDAsIHd3PTAsIGM7XG5cdGZvcihpID0gMDsgaSA8IGRhdGEubGVuZ3RoOyBpKz1qKSB7XG5cdFx0aiA9IDE7XG5cdFx0aWYoKGM9ZGF0YS5jaGFyQ29kZUF0KGkpKSA8IDEyOCkgdyA9IGM7XG5cdFx0ZWxzZSBpZihjIDwgMjI0KSB7IHcgPSAoYyYzMSkqNjQrKGRhdGEuY2hhckNvZGVBdChpKzEpJjYzKTsgaj0yOyB9XG5cdFx0ZWxzZSBpZihjIDwgMjQwKSB7IHc9KGMmMTUpKjQwOTYrKGRhdGEuY2hhckNvZGVBdChpKzEpJjYzKSo2NCsoZGF0YS5jaGFyQ29kZUF0KGkrMikmNjMpOyBqPTM7IH1cblx0XHRlbHNlIHsgaiA9IDQ7XG5cdFx0XHR3ID0gKGMgJiA3KSoyNjIxNDQrKGRhdGEuY2hhckNvZGVBdChpKzEpJjYzKSo0MDk2KyhkYXRhLmNoYXJDb2RlQXQoaSsyKSY2MykqNjQrKGRhdGEuY2hhckNvZGVBdChpKzMpJjYzKTtcblx0XHRcdHcgLT0gNjU1MzY7IHd3ID0gMHhEODAwICsgKCh3Pj4+MTApJjEwMjMpOyB3ID0gMHhEQzAwICsgKHcmMTAyMyk7XG5cdFx0fVxuXHRcdGlmKHd3ICE9PSAwKSB7IG91dFtrKytdID0gd3cmMjU1OyBvdXRbaysrXSA9IHd3Pj4+ODsgd3cgPSAwOyB9XG5cdFx0b3V0W2srK10gPSB3JTI1Njsgb3V0W2srK10gPSB3Pj4+ODtcblx0fVxuXHRyZXR1cm4gb3V0LnNsaWNlKDAsaykudG9TdHJpbmcoJ3VjczInKTtcbn1cblxuZnVuY3Rpb24gdXRmOHJlYWRjKGRhdGEpIHsgcmV0dXJuIEJ1ZmZlcl9mcm9tKGRhdGEsICdiaW5hcnknKS50b1N0cmluZygndXRmOCcpOyB9XG5cbnZhciB1dGY4Y29ycHVzID0gXCJmb28gYmFyIGJhelxcdTAwZTJcXHUwMDk4XFx1MDA4M1xcdTAwZjBcXHUwMDlmXFx1MDA4ZFxcdTAwYTNcIjtcbnZhciB1dGY4cmVhZCA9IGhhc19idWYgJiYgKC8qI19fUFVSRV9fKi91dGY4cmVhZGModXRmOGNvcnB1cykgPT0gLyojX19QVVJFX18qL3V0ZjhyZWFkYSh1dGY4Y29ycHVzKSAmJiB1dGY4cmVhZGMgfHwgLyojX19QVVJFX18qL3V0ZjhyZWFkYih1dGY4Y29ycHVzKSA9PSAvKiNfX1BVUkVfXyovdXRmOHJlYWRhKHV0Zjhjb3JwdXMpICYmIHV0ZjhyZWFkYikgfHwgdXRmOHJlYWRhO1xuXG52YXIgdXRmOHdyaXRlLyo6U3RyaW5nQ29udiovID0gaGFzX2J1ZiA/IGZ1bmN0aW9uKGRhdGEpIHsgcmV0dXJuIEJ1ZmZlcl9mcm9tKGRhdGEsICd1dGY4JykudG9TdHJpbmcoXCJiaW5hcnlcIik7IH0gOiBmdW5jdGlvbihvcmlnLyo6c3RyaW5nKi8pLyo6c3RyaW5nKi8ge1xuXHR2YXIgb3V0Lyo6QXJyYXk8c3RyaW5nPiovID0gW10sIGkgPSAwLCBjID0gMCwgZCA9IDA7XG5cdHdoaWxlKGkgPCBvcmlnLmxlbmd0aCkge1xuXHRcdGMgPSBvcmlnLmNoYXJDb2RlQXQoaSsrKTtcblx0XHRzd2l0Y2godHJ1ZSkge1xuXHRcdFx0Y2FzZSBjIDwgMTI4OiBvdXQucHVzaChTdHJpbmcuZnJvbUNoYXJDb2RlKGMpKTsgYnJlYWs7XG5cdFx0XHRjYXNlIGMgPCAyMDQ4OlxuXHRcdFx0XHRvdXQucHVzaChTdHJpbmcuZnJvbUNoYXJDb2RlKDE5MiArIChjID4+IDYpKSk7XG5cdFx0XHRcdG91dC5wdXNoKFN0cmluZy5mcm9tQ2hhckNvZGUoMTI4ICsgKGMgJiA2MykpKTtcblx0XHRcdFx0YnJlYWs7XG5cdFx0XHRjYXNlIGMgPj0gNTUyOTYgJiYgYyA8IDU3MzQ0OlxuXHRcdFx0XHRjIC09IDU1Mjk2OyBkID0gb3JpZy5jaGFyQ29kZUF0KGkrKykgLSA1NjMyMCArIChjPDwxMCk7XG5cdFx0XHRcdG91dC5wdXNoKFN0cmluZy5mcm9tQ2hhckNvZGUoMjQwICsgKChkID4+MTgpICYgNykpKTtcblx0XHRcdFx0b3V0LnB1c2goU3RyaW5nLmZyb21DaGFyQ29kZSgxNDQgKyAoKGQgPj4xMikgJiA2MykpKTtcblx0XHRcdFx0b3V0LnB1c2goU3RyaW5nLmZyb21DaGFyQ29kZSgxMjggKyAoKGQgPj4gNikgJiA2MykpKTtcblx0XHRcdFx0b3V0LnB1c2goU3RyaW5nLmZyb21DaGFyQ29kZSgxMjggKyAoZCAmIDYzKSkpO1xuXHRcdFx0XHRicmVhaztcblx0XHRcdGRlZmF1bHQ6XG5cdFx0XHRcdG91dC5wdXNoKFN0cmluZy5mcm9tQ2hhckNvZGUoMjI0ICsgKGMgPj4gMTIpKSk7XG5cdFx0XHRcdG91dC5wdXNoKFN0cmluZy5mcm9tQ2hhckNvZGUoMTI4ICsgKChjID4+IDYpICYgNjMpKSk7XG5cdFx0XHRcdG91dC5wdXNoKFN0cmluZy5mcm9tQ2hhckNvZGUoMTI4ICsgKGMgJiA2MykpKTtcblx0XHR9XG5cdH1cblx0cmV0dXJuIG91dC5qb2luKFwiXCIpO1xufTtcblxuLy8gbWF0Y2hlcyA8Zm9vPi4uLjwvZm9vPiBleHRyYWN0cyBjb250ZW50XG52YXIgbWF0Y2h0YWcgPSAvKiNfX1BVUkVfXyovKGZ1bmN0aW9uKCkge1xuXHR2YXIgbXRjYWNoZS8qOntbazpzdHJpbmddOlJlZ0V4cH0qLyA9ICh7fS8qOmFueSovKTtcblx0cmV0dXJuIGZ1bmN0aW9uIG1hdGNodGFnKGYvKjpzdHJpbmcqLyxnLyo6P3N0cmluZyovKS8qOlJlZ0V4cCovIHtcblx0XHR2YXIgdCA9IGYrXCJ8XCIrKGd8fFwiXCIpO1xuXHRcdGlmKG10Y2FjaGVbdF0pIHJldHVybiBtdGNhY2hlW3RdO1xuXHRcdHJldHVybiAobXRjYWNoZVt0XSA9IG5ldyBSZWdFeHAoJzwoPzpcXFxcdys6KT8nK2YrJyg/OiB4bWw6c3BhY2U9XCJwcmVzZXJ2ZVwiKT8oPzpbXj5dKik+KFtcXFxcc1xcXFxTXSo/KTwvKD86XFxcXHcrOik/JytmKyc+JywoKGd8fFwiXCIpLyo6YW55Ki8pKSk7XG5cdH07XG59KSgpO1xuXG52YXIgaHRtbGRlY29kZS8qOnsoczpzdHJpbmcpOnN0cmluZ30qLyA9IC8qI19fUFVSRV9fKi8oZnVuY3Rpb24oKSB7XG5cdHZhciBlbnRpdGllcy8qOkFycmF5PFtSZWdFeHAsIHN0cmluZ10+Ki8gPSBbXG5cdFx0WyduYnNwJywgJyAnXSwgWydtaWRkb3QnLCAnwrcnXSxcblx0XHRbJ3F1b3QnLCAnXCInXSwgWydhcG9zJywgXCInXCJdLCBbJ2d0JywgICAnPiddLCBbJ2x0JywgICAnPCddLCBbJ2FtcCcsICAnJiddXG5cdF0ubWFwKGZ1bmN0aW9uKHgvKjpbc3RyaW5nLCBzdHJpbmddKi8pIHsgcmV0dXJuIFtuZXcgUmVnRXhwKCcmJyArIHhbMF0gKyAnOycsIFwiaWdcIiksIHhbMV1dOyB9KTtcblx0cmV0dXJuIGZ1bmN0aW9uIGh0bWxkZWNvZGUoc3RyLyo6c3RyaW5nKi8pLyo6c3RyaW5nKi8ge1xuXHRcdHZhciBvID0gc3RyXG5cdFx0XHRcdC8vIFJlbW92ZSBuZXcgbGluZXMgYW5kIHNwYWNlcyBmcm9tIHN0YXJ0IG9mIGNvbnRlbnRcblx0XHRcdFx0LnJlcGxhY2UoL15bXFx0XFxuXFxyIF0rLywgXCJcIilcblx0XHRcdFx0Ly8gUmVtb3ZlIG5ldyBsaW5lcyBhbmQgc3BhY2VzIGZyb20gZW5kIG9mIGNvbnRlbnRcblx0XHRcdFx0LnJlcGxhY2UoL1tcXHRcXG5cXHIgXSskLyxcIlwiKVxuXHRcdFx0XHQvLyBBZGRlZCBsaW5lIHdoaWNoIHJlbW92ZXMgYW55IHdoaXRlIHNwYWNlIGNoYXJhY3RlcnMgYWZ0ZXIgYW5kIGJlZm9yZSBodG1sIHRhZ3Ncblx0XHRcdFx0LnJlcGxhY2UoLz5cXHMrL2csXCI+XCIpLnJlcGxhY2UoL1xccys8L2csXCI8XCIpXG5cdFx0XHRcdC8vIFJlcGxhY2UgcmVtYWluaW5nIG5ldyBsaW5lcyBhbmQgc3BhY2VzIHdpdGggc3BhY2Vcblx0XHRcdFx0LnJlcGxhY2UoL1tcXHRcXG5cXHIgXSsvZywgXCIgXCIpXG5cdFx0XHRcdC8vIFJlcGxhY2UgPGJyPiB0YWdzIHdpdGggbmV3IGxpbmVzXG5cdFx0XHRcdC5yZXBsYWNlKC88XFxzKltiQl1bclJdXFxzKlxcLz8+L2csXCJcXG5cIilcblx0XHRcdFx0Ly8gU3RyaXAgSFRNTCBlbGVtZW50c1xuXHRcdFx0XHQucmVwbGFjZSgvPFtePl0qPi9nLFwiXCIpO1xuXHRcdGZvcih2YXIgaSA9IDA7IGkgPCBlbnRpdGllcy5sZW5ndGg7ICsraSkgbyA9IG8ucmVwbGFjZShlbnRpdGllc1tpXVswXSwgZW50aXRpZXNbaV1bMV0pO1xuXHRcdHJldHVybiBvO1xuXHR9O1xufSkoKTtcblxudmFyIHZ0cmVnZXggPSAvKiNfX1BVUkVfXyovKGZ1bmN0aW9uKCl7IHZhciB2dF9jYWNoZSA9IHt9O1xuXHRyZXR1cm4gZnVuY3Rpb24gdnRfcmVnZXgoYnQpIHtcblx0XHRpZih2dF9jYWNoZVtidF0gIT09IHVuZGVmaW5lZCkgcmV0dXJuIHZ0X2NhY2hlW2J0XTtcblx0XHRyZXR1cm4gKHZ0X2NhY2hlW2J0XSA9IG5ldyBSZWdFeHAoXCI8KD86dnQ6KT9cIiArIGJ0ICsgXCI+KFtcXFxcc1xcXFxTXSo/KTwvKD86dnQ6KT9cIiArIGJ0ICsgXCI+XCIsICdnJykgKTtcbn07fSkoKTtcbnZhciB2dHZyZWdleCA9IC88XFwvPyg/OnZ0Oik/dmFyaWFudD4vZywgdnRtcmVnZXggPSAvPCg/OnZ0OikoW14+XSopPihbXFxzXFxTXSopPC87XG5mdW5jdGlvbiBwYXJzZVZlY3RvcihkYXRhLyo6c3RyaW5nKi8sIG9wdHMpLyo6QXJyYXk8e3Y6c3RyaW5nLHQ6c3RyaW5nfT4qLyB7XG5cdHZhciBoID0gcGFyc2V4bWx0YWcoZGF0YSk7XG5cblx0dmFyIG1hdGNoZXMvKjpBcnJheTxzdHJpbmc+Ki8gPSBkYXRhLm1hdGNoKHZ0cmVnZXgoaC5iYXNlVHlwZSkpfHxbXTtcblx0dmFyIHJlcy8qOkFycmF5PGFueT4qLyA9IFtdO1xuXHRpZihtYXRjaGVzLmxlbmd0aCAhPSBoLnNpemUpIHtcblx0XHRpZihvcHRzLldURikgdGhyb3cgbmV3IEVycm9yKFwidW5leHBlY3RlZCB2ZWN0b3IgbGVuZ3RoIFwiICsgbWF0Y2hlcy5sZW5ndGggKyBcIiAhPSBcIiArIGguc2l6ZSk7XG5cdFx0cmV0dXJuIHJlcztcblx0fVxuXHRtYXRjaGVzLmZvckVhY2goZnVuY3Rpb24oeC8qOnN0cmluZyovKSB7XG5cdFx0dmFyIHYgPSB4LnJlcGxhY2UodnR2cmVnZXgsXCJcIikubWF0Y2godnRtcmVnZXgpO1xuXHRcdGlmKHYpIHJlcy5wdXNoKHt2OnV0ZjhyZWFkKHZbMl0pLCB0OnZbMV19KTtcblx0fSk7XG5cdHJldHVybiByZXM7XG59XG5cbnZhciB3dHJlZ2V4ID0gLyheXFxzfFxccyR8XFxuKS87XG5mdW5jdGlvbiB3cml0ZXRhZyhmLyo6c3RyaW5nKi8sZy8qOnN0cmluZyovKS8qOnN0cmluZyovIHsgcmV0dXJuICc8JyArIGYgKyAoZy5tYXRjaCh3dHJlZ2V4KT8nIHhtbDpzcGFjZT1cInByZXNlcnZlXCInIDogXCJcIikgKyAnPicgKyBnICsgJzwvJyArIGYgKyAnPic7IH1cblxuZnVuY3Rpb24gd3h0X2hlbHBlcihoKS8qOnN0cmluZyovIHsgcmV0dXJuIGtleXMoaCkubWFwKGZ1bmN0aW9uKGspIHsgcmV0dXJuIFwiIFwiICsgayArICc9XCInICsgaFtrXSArICdcIic7fSkuam9pbihcIlwiKTsgfVxuZnVuY3Rpb24gd3JpdGV4dGFnKGYvKjpzdHJpbmcqLyxnLyo6P3N0cmluZyovLGgpIHsgcmV0dXJuICc8JyArIGYgKyAoKGggIT0gbnVsbCkgPyB3eHRfaGVscGVyKGgpIDogXCJcIikgKyAoKGcgIT0gbnVsbCkgPyAoZy5tYXRjaCh3dHJlZ2V4KT8nIHhtbDpzcGFjZT1cInByZXNlcnZlXCInIDogXCJcIikgKyAnPicgKyBnICsgJzwvJyArIGYgOiBcIi9cIikgKyAnPic7fVxuXG5mdW5jdGlvbiB3cml0ZV93M2NkdGYoZC8qOkRhdGUqLywgdC8qOj9ib29sZWFuKi8pLyo6c3RyaW5nKi8geyB0cnkgeyByZXR1cm4gZC50b0lTT1N0cmluZygpLnJlcGxhY2UoL1xcLlxcZCovLFwiXCIpOyB9IGNhdGNoKGUpIHsgaWYodCkgdGhyb3cgZTsgfSByZXR1cm4gXCJcIjsgfVxuXG5mdW5jdGlvbiB3cml0ZV92dChzLCB4bHN4Lyo6P2Jvb2xlYW4qLykvKjpzdHJpbmcqLyB7XG5cdHN3aXRjaCh0eXBlb2Ygcykge1xuXHRcdGNhc2UgJ3N0cmluZyc6XG5cdFx0XHR2YXIgbyA9IHdyaXRleHRhZygndnQ6bHB3c3RyJywgZXNjYXBleG1sKHMpKTtcblx0XHRcdGlmKHhsc3gpIG8gPSBvLnJlcGxhY2UoLyZxdW90Oy9nLCBcIl94MDAyMl9cIik7XG5cdFx0XHRyZXR1cm4gbztcblx0XHRjYXNlICdudW1iZXInOiByZXR1cm4gd3JpdGV4dGFnKChzfDApPT1zPyd2dDppNCc6J3Z0OnI4JywgZXNjYXBleG1sKFN0cmluZyhzKSkpO1xuXHRcdGNhc2UgJ2Jvb2xlYW4nOiByZXR1cm4gd3JpdGV4dGFnKCd2dDpib29sJyxzPyd0cnVlJzonZmFsc2UnKTtcblx0fVxuXHRpZihzIGluc3RhbmNlb2YgRGF0ZSkgcmV0dXJuIHdyaXRleHRhZygndnQ6ZmlsZXRpbWUnLCB3cml0ZV93M2NkdGYocykpO1xuXHR0aHJvdyBuZXcgRXJyb3IoXCJVbmFibGUgdG8gc2VyaWFsaXplIFwiICsgcyk7XG59XG5cbmZ1bmN0aW9uIHhsbWxfbm9ybWFsaXplKGQpLyo6c3RyaW5nKi8ge1xuXHRpZihoYXNfYnVmICYmLyo6OnR5cGVvZiBCdWZmZXIgIT09IFwidW5kZWZpbmVkXCIgJiYgZCAhPSBudWxsICYmIGQgaW5zdGFuY2VvZiBCdWZmZXIgJiYqLyBCdWZmZXIuaXNCdWZmZXIoZCkpIHJldHVybiBkLnRvU3RyaW5nKCd1dGY4Jyk7XG5cdGlmKHR5cGVvZiBkID09PSAnc3RyaW5nJykgcmV0dXJuIGQ7XG5cdC8qIGR1a3RhcGUgKi9cblx0aWYodHlwZW9mIFVpbnQ4QXJyYXkgIT09ICd1bmRlZmluZWQnICYmIGQgaW5zdGFuY2VvZiBVaW50OEFycmF5KSByZXR1cm4gdXRmOHJlYWQoYTJzKGFiMmEoZCkpKTtcblx0dGhyb3cgbmV3IEVycm9yKFwiQmFkIGlucHV0IGZvcm1hdDogZXhwZWN0ZWQgQnVmZmVyIG9yIHN0cmluZ1wiKTtcbn1cbi8qIFVPUyB1c2VzIENKSyBpbiB0YWdzICovXG52YXIgeGxtbHJlZ2V4ID0gLzwoXFwvPykoW15cXHM/PjwhXFwvOl0qOnwpKFteXFxzPzw+OlxcL10rKSg/OltcXHM/OlxcL11bXj5dKik/Pi9tZztcbi8vdmFyIHhsbWxyZWdleCA9IC88KFxcLz8pKFthLXowLTldKjp8KShcXHcrKVtePl0qPi9tZztcblxudmFyIFhNTE5TID0gKHtcblx0Q09SRV9QUk9QUzogJ2h0dHA6Ly9zY2hlbWFzLm9wZW54bWxmb3JtYXRzLm9yZy9wYWNrYWdlLzIwMDYvbWV0YWRhdGEvY29yZS1wcm9wZXJ0aWVzJyxcblx0Q1VTVF9QUk9QUzogXCJodHRwOi8vc2NoZW1hcy5vcGVueG1sZm9ybWF0cy5vcmcvb2ZmaWNlRG9jdW1lbnQvMjAwNi9jdXN0b20tcHJvcGVydGllc1wiLFxuXHRFWFRfUFJPUFM6IFwiaHR0cDovL3NjaGVtYXMub3BlbnhtbGZvcm1hdHMub3JnL29mZmljZURvY3VtZW50LzIwMDYvZXh0ZW5kZWQtcHJvcGVydGllc1wiLFxuXHRDVDogJ2h0dHA6Ly9zY2hlbWFzLm9wZW54bWxmb3JtYXRzLm9yZy9wYWNrYWdlLzIwMDYvY29udGVudC10eXBlcycsXG5cdFJFTFM6ICdodHRwOi8vc2NoZW1hcy5vcGVueG1sZm9ybWF0cy5vcmcvcGFja2FnZS8yMDA2L3JlbGF0aW9uc2hpcHMnLFxuXHRUQ01OVDogJ2h0dHA6Ly9zY2hlbWFzLm1pY3Jvc29mdC5jb20vb2ZmaWNlL3NwcmVhZHNoZWV0bWwvMjAxOC90aHJlYWRlZGNvbW1lbnRzJyxcblx0J2RjJzogJ2h0dHA6Ly9wdXJsLm9yZy9kYy9lbGVtZW50cy8xLjEvJyxcblx0J2RjdGVybXMnOiAnaHR0cDovL3B1cmwub3JnL2RjL3Rlcm1zLycsXG5cdCdkY21pdHlwZSc6ICdodHRwOi8vcHVybC5vcmcvZGMvZGNtaXR5cGUvJyxcblx0J214JzogJ2h0dHA6Ly9zY2hlbWFzLm1pY3Jvc29mdC5jb20vb2ZmaWNlL21hYy9leGNlbC8yMDA4L21haW4nLFxuXHQncic6ICdodHRwOi8vc2NoZW1hcy5vcGVueG1sZm9ybWF0cy5vcmcvb2ZmaWNlRG9jdW1lbnQvMjAwNi9yZWxhdGlvbnNoaXBzJyxcblx0J3Nqcyc6ICdodHRwOi8vc2NoZW1hcy5vcGVueG1sZm9ybWF0cy5vcmcvcGFja2FnZS8yMDA2L3NoZWV0anMvY29yZS1wcm9wZXJ0aWVzJyxcblx0J3Z0JzogJ2h0dHA6Ly9zY2hlbWFzLm9wZW54bWxmb3JtYXRzLm9yZy9vZmZpY2VEb2N1bWVudC8yMDA2L2RvY1Byb3BzVlR5cGVzJyxcblx0J3hzaSc6ICdodHRwOi8vd3d3LnczLm9yZy8yMDAxL1hNTFNjaGVtYS1pbnN0YW5jZScsXG5cdCd4c2QnOiAnaHR0cDovL3d3dy53My5vcmcvMjAwMS9YTUxTY2hlbWEnXG59Lyo6YW55Ki8pO1xuXG52YXIgWE1MTlNfbWFpbiA9IFtcblx0J2h0dHA6Ly9zY2hlbWFzLm9wZW54bWxmb3JtYXRzLm9yZy9zcHJlYWRzaGVldG1sLzIwMDYvbWFpbicsXG5cdCdodHRwOi8vcHVybC5vY2xjLm9yZy9vb3htbC9zcHJlYWRzaGVldG1sL21haW4nLFxuXHQnaHR0cDovL3NjaGVtYXMubWljcm9zb2Z0LmNvbS9vZmZpY2UvZXhjZWwvMjAwNi9tYWluJyxcblx0J2h0dHA6Ly9zY2hlbWFzLm1pY3Jvc29mdC5jb20vb2ZmaWNlL2V4Y2VsLzIwMDYvMidcbl07XG5cbnZhciBYTE1MTlMgPSAoe1xuXHQnbyc6ICAgICd1cm46c2NoZW1hcy1taWNyb3NvZnQtY29tOm9mZmljZTpvZmZpY2UnLFxuXHQneCc6ICAgICd1cm46c2NoZW1hcy1taWNyb3NvZnQtY29tOm9mZmljZTpleGNlbCcsXG5cdCdzcyc6ICAgJ3VybjpzY2hlbWFzLW1pY3Jvc29mdC1jb206b2ZmaWNlOnNwcmVhZHNoZWV0Jyxcblx0J2R0JzogICAndXVpZDpDMkY0MTAxMC02NUIzLTExZDEtQTI5Ri0wMEFBMDBDMTQ4ODInLFxuXHQnbXYnOiAgICdodHRwOi8vbWFjVm1sU2NoZW1hVXJpJyxcblx0J3YnOiAgICAndXJuOnNjaGVtYXMtbWljcm9zb2Z0LWNvbTp2bWwnLFxuXHQnaHRtbCc6ICdodHRwOi8vd3d3LnczLm9yZy9UUi9SRUMtaHRtbDQwJ1xufS8qOmFueSovKTtcbmZ1bmN0aW9uIHJlYWRfZG91YmxlX2xlKGIvKjpSYXdCeXRlc3xDRkJsb2IqLywgaWR4Lyo6bnVtYmVyKi8pLyo6bnVtYmVyKi8ge1xuXHR2YXIgcyA9IDEgLSAyICogKGJbaWR4ICsgN10gPj4+IDcpO1xuXHR2YXIgZSA9ICgoYltpZHggKyA3XSAmIDB4N2YpIDw8IDQpICsgKChiW2lkeCArIDZdID4+PiA0KSAmIDB4MGYpO1xuXHR2YXIgbSA9IChiW2lkeCs2XSYweDBmKTtcblx0Zm9yKHZhciBpID0gNTsgaSA+PSAwOyAtLWkpIG0gPSBtICogMjU2ICsgYltpZHggKyBpXTtcblx0aWYoZSA9PSAweDdmZikgcmV0dXJuIG0gPT0gMCA/IChzICogSW5maW5pdHkpIDogTmFOO1xuXHRpZihlID09IDApIGUgPSAtMTAyMjtcblx0ZWxzZSB7IGUgLT0gMTAyMzsgbSArPSBNYXRoLnBvdygyLDUyKTsgfVxuXHRyZXR1cm4gcyAqIE1hdGgucG93KDIsIGUgLSA1MikgKiBtO1xufVxuXG5mdW5jdGlvbiB3cml0ZV9kb3VibGVfbGUoYi8qOlJhd0J5dGVzfENGQmxvYiovLCB2Lyo6bnVtYmVyKi8sIGlkeC8qOm51bWJlciovKSB7XG5cdHZhciBicyA9ICgoKCh2IDwgMCkgfHwgKDEvdiA9PSAtSW5maW5pdHkpKSA/IDEgOiAwKSA8PCA3KSwgZSA9IDAsIG0gPSAwO1xuXHR2YXIgYXYgPSBicyA/ICgtdikgOiB2O1xuXHRpZighaXNGaW5pdGUoYXYpKSB7IGUgPSAweDdmZjsgbSA9IGlzTmFOKHYpID8gMHg2OTY5IDogMDsgfVxuXHRlbHNlIGlmKGF2ID09IDApIGUgPSBtID0gMDtcblx0ZWxzZSB7XG5cdFx0ZSA9IE1hdGguZmxvb3IoTWF0aC5sb2coYXYpIC8gTWF0aC5MTjIpO1xuXHRcdG0gPSBhdiAqIE1hdGgucG93KDIsIDUyIC0gZSk7XG5cdFx0aWYoKGUgPD0gLTEwMjMpICYmICghaXNGaW5pdGUobSkgfHwgKG0gPCBNYXRoLnBvdygyLDUyKSkpKSB7IGUgPSAtMTAyMjsgfVxuXHRcdGVsc2UgeyBtIC09IE1hdGgucG93KDIsNTIpOyBlKz0xMDIzOyB9XG5cdH1cblx0Zm9yKHZhciBpID0gMDsgaSA8PSA1OyArK2ksIG0vPTI1NikgYltpZHggKyBpXSA9IG0gJiAweGZmO1xuXHRiW2lkeCArIDZdID0gKChlICYgMHgwZikgPDwgNCkgfCAobSAmIDB4Zik7XG5cdGJbaWR4ICsgN10gPSAoZSA+PiA0KSB8IGJzO1xufVxuXG52YXIgX19fdG9CdWZmZXIgPSBmdW5jdGlvbihidWZzLyo6QXJyYXk8QXJyYXk8UmF3Qnl0ZXM+ID4qLykvKjpSYXdCeXRlcyovIHsgdmFyIHg9W10sdz0xMDI0MDsgZm9yKHZhciBpPTA7aTxidWZzWzBdLmxlbmd0aDsrK2kpIGlmKGJ1ZnNbMF1baV0pIGZvcih2YXIgaj0wLEw9YnVmc1swXVtpXS5sZW5ndGg7ajxMO2orPXcpIHgucHVzaC5hcHBseSh4LCBidWZzWzBdW2ldLnNsaWNlKGosait3KSk7IHJldHVybiB4OyB9O1xudmFyIF9fdG9CdWZmZXIgPSBoYXNfYnVmID8gZnVuY3Rpb24oYnVmcykgeyByZXR1cm4gKGJ1ZnNbMF0ubGVuZ3RoID4gMCAmJiBCdWZmZXIuaXNCdWZmZXIoYnVmc1swXVswXSkpID8gQnVmZmVyLmNvbmNhdChidWZzWzBdLm1hcChmdW5jdGlvbih4KSB7IHJldHVybiBCdWZmZXIuaXNCdWZmZXIoeCkgPyB4IDogQnVmZmVyX2Zyb20oeCk7IH0pKSA6IF9fX3RvQnVmZmVyKGJ1ZnMpO30gOiBfX190b0J1ZmZlcjtcblxudmFyIF9fX3V0ZjE2bGUgPSBmdW5jdGlvbihiLyo6UmF3Qnl0ZXN8Q0ZCbG9iKi8scy8qOm51bWJlciovLGUvKjpudW1iZXIqLykvKjpzdHJpbmcqLyB7IHZhciBzcy8qOkFycmF5PHN0cmluZz4qLz1bXTsgZm9yKHZhciBpPXM7IGk8ZTsgaSs9Mikgc3MucHVzaChTdHJpbmcuZnJvbUNoYXJDb2RlKF9fcmVhZFVJbnQxNkxFKGIsaSkpKTsgcmV0dXJuIHNzLmpvaW4oXCJcIikucmVwbGFjZShjaHIwLCcnKTsgfTtcbnZhciBfX3V0ZjE2bGUgPSBoYXNfYnVmID8gZnVuY3Rpb24oYi8qOlJhd0J5dGVzfENGQmxvYiovLHMvKjpudW1iZXIqLyxlLyo6bnVtYmVyKi8pLyo6c3RyaW5nKi8geyBpZighQnVmZmVyLmlzQnVmZmVyKGIpLyo6OiB8fCAhKGIgaW5zdGFuY2VvZiBCdWZmZXIpKi8pIHJldHVybiBfX191dGYxNmxlKGIscyxlKTsgcmV0dXJuIGIudG9TdHJpbmcoJ3V0ZjE2bGUnLHMsZSkucmVwbGFjZShjaHIwLCcnKS8qLnJlcGxhY2UoY2hyMSwnIScpKi87IH0gOiBfX191dGYxNmxlO1xuXG52YXIgX19faGV4bGlmeSA9IGZ1bmN0aW9uKGIvKjpSYXdCeXRlc3xDRkJsb2IqLyxzLyo6bnVtYmVyKi8sbC8qOm51bWJlciovKS8qOnN0cmluZyovIHsgdmFyIHNzLyo6QXJyYXk8c3RyaW5nPiovPVtdOyBmb3IodmFyIGk9czsgaTxzK2w7ICsraSkgc3MucHVzaCgoXCIwXCIgKyBiW2ldLnRvU3RyaW5nKDE2KSkuc2xpY2UoLTIpKTsgcmV0dXJuIHNzLmpvaW4oXCJcIik7IH07XG52YXIgX19oZXhsaWZ5ID0gaGFzX2J1ZiA/IGZ1bmN0aW9uKGIvKjpSYXdCeXRlc3xDRkJsb2IqLyxzLyo6bnVtYmVyKi8sbC8qOm51bWJlciovKS8qOnN0cmluZyovIHsgcmV0dXJuIEJ1ZmZlci5pc0J1ZmZlcihiKS8qOjogJiYgYiBpbnN0YW5jZW9mIEJ1ZmZlciovID8gYi50b1N0cmluZygnaGV4JyxzLHMrbCkgOiBfX19oZXhsaWZ5KGIscyxsKTsgfSA6IF9fX2hleGxpZnk7XG5cbnZhciBfX191dGY4ID0gZnVuY3Rpb24oYi8qOlJhd0J5dGVzfENGQmxvYiovLHMvKjpudW1iZXIqLyxlLyo6bnVtYmVyKi8pIHsgdmFyIHNzPVtdOyBmb3IodmFyIGk9czsgaTxlOyBpKyspIHNzLnB1c2goU3RyaW5nLmZyb21DaGFyQ29kZShfX3JlYWRVSW50OChiLGkpKSk7IHJldHVybiBzcy5qb2luKFwiXCIpOyB9O1xudmFyIF9fdXRmOCA9IGhhc19idWYgPyBmdW5jdGlvbiB1dGY4X2IoYi8qOlJhd0J5dGVzfENGQmxvYiovLCBzLyo6bnVtYmVyKi8sIGUvKjpudW1iZXIqLykgeyByZXR1cm4gKEJ1ZmZlci5pc0J1ZmZlcihiKS8qOjogJiYgKGIgaW5zdGFuY2VvZiBCdWZmZXIpKi8pID8gYi50b1N0cmluZygndXRmOCcscyxlKSA6IF9fX3V0ZjgoYixzLGUpOyB9IDogX19fdXRmODtcblxudmFyIF9fX2xwc3RyID0gZnVuY3Rpb24oYi8qOlJhd0J5dGVzfENGQmxvYiovLGkvKjpudW1iZXIqLykgeyB2YXIgbGVuID0gX19yZWFkVUludDMyTEUoYixpKTsgcmV0dXJuIGxlbiA+IDAgPyBfX3V0ZjgoYiwgaSs0LGkrNCtsZW4tMSkgOiBcIlwiO307XG52YXIgX19scHN0ciA9IF9fX2xwc3RyO1xuXG52YXIgX19fY3BzdHIgPSBmdW5jdGlvbihiLyo6UmF3Qnl0ZXN8Q0ZCbG9iKi8saS8qOm51bWJlciovKSB7IHZhciBsZW4gPSBfX3JlYWRVSW50MzJMRShiLGkpOyByZXR1cm4gbGVuID4gMCA/IF9fdXRmOChiLCBpKzQsaSs0K2xlbi0xKSA6IFwiXCI7fTtcbnZhciBfX2Nwc3RyID0gX19fY3BzdHI7XG5cbnZhciBfX19scHdzdHIgPSBmdW5jdGlvbihiLyo6UmF3Qnl0ZXN8Q0ZCbG9iKi8saS8qOm51bWJlciovKSB7IHZhciBsZW4gPSAyKl9fcmVhZFVJbnQzMkxFKGIsaSk7IHJldHVybiBsZW4gPiAwID8gX191dGY4KGIsIGkrNCxpKzQrbGVuLTEpIDogXCJcIjt9O1xudmFyIF9fbHB3c3RyID0gX19fbHB3c3RyO1xuXG52YXIgX19fbHBwNCA9IGZ1bmN0aW9uIGxwcDRfKGIvKjpSYXdCeXRlc3xDRkJsb2IqLyxpLyo6bnVtYmVyKi8pIHsgdmFyIGxlbiA9IF9fcmVhZFVJbnQzMkxFKGIsaSk7IHJldHVybiBsZW4gPiAwID8gX191dGYxNmxlKGIsIGkrNCxpKzQrbGVuKSA6IFwiXCI7fTtcbnZhciBfX2xwcDQgPSBfX19scHA0O1xuXG52YXIgX19fOGxwcDQgPSBmdW5jdGlvbihiLyo6UmF3Qnl0ZXN8Q0ZCbG9iKi8saS8qOm51bWJlciovKSB7IHZhciBsZW4gPSBfX3JlYWRVSW50MzJMRShiLGkpOyByZXR1cm4gbGVuID4gMCA/IF9fdXRmOChiLCBpKzQsaSs0K2xlbikgOiBcIlwiO307XG52YXIgX184bHBwNCA9IF9fXzhscHA0O1xuXG52YXIgX19fZG91YmxlID0gZnVuY3Rpb24oYi8qOlJhd0J5dGVzfENGQmxvYiovLCBpZHgvKjpudW1iZXIqLykgeyByZXR1cm4gcmVhZF9kb3VibGVfbGUoYiwgaWR4KTt9O1xudmFyIF9fZG91YmxlID0gX19fZG91YmxlO1xuXG52YXIgaXNfYnVmID0gZnVuY3Rpb24gaXNfYnVmX2EoYSkgeyByZXR1cm4gQXJyYXkuaXNBcnJheShhKSB8fCAodHlwZW9mIFVpbnQ4QXJyYXkgIT09IFwidW5kZWZpbmVkXCIgJiYgYSBpbnN0YW5jZW9mIFVpbnQ4QXJyYXkpOyB9O1xuXG5pZihoYXNfYnVmLyo6OiAmJiB0eXBlb2YgQnVmZmVyICE9PSAndW5kZWZpbmVkJyovKSB7XG5cdF9fbHBzdHIgPSBmdW5jdGlvbiBscHN0cl9iKGIvKjpSYXdCeXRlc3xDRkJsb2IqLywgaS8qOm51bWJlciovKSB7IGlmKCFCdWZmZXIuaXNCdWZmZXIoYikvKjo6IHx8ICEoYiBpbnN0YW5jZW9mIEJ1ZmZlcikqLykgcmV0dXJuIF9fX2xwc3RyKGIsIGkpOyB2YXIgbGVuID0gYi5yZWFkVUludDMyTEUoaSk7IHJldHVybiBsZW4gPiAwID8gYi50b1N0cmluZygndXRmOCcsaSs0LGkrNCtsZW4tMSkgOiBcIlwiO307XG5cdF9fY3BzdHIgPSBmdW5jdGlvbiBjcHN0cl9iKGIvKjpSYXdCeXRlc3xDRkJsb2IqLywgaS8qOm51bWJlciovKSB7IGlmKCFCdWZmZXIuaXNCdWZmZXIoYikvKjo6IHx8ICEoYiBpbnN0YW5jZW9mIEJ1ZmZlcikqLykgcmV0dXJuIF9fX2Nwc3RyKGIsIGkpOyB2YXIgbGVuID0gYi5yZWFkVUludDMyTEUoaSk7IHJldHVybiBsZW4gPiAwID8gYi50b1N0cmluZygndXRmOCcsaSs0LGkrNCtsZW4tMSkgOiBcIlwiO307XG5cdF9fbHB3c3RyID0gZnVuY3Rpb24gbHB3c3RyX2IoYi8qOlJhd0J5dGVzfENGQmxvYiovLCBpLyo6bnVtYmVyKi8pIHsgaWYoIUJ1ZmZlci5pc0J1ZmZlcihiKS8qOjogfHwgIShiIGluc3RhbmNlb2YgQnVmZmVyKSovKSByZXR1cm4gX19fbHB3c3RyKGIsIGkpOyB2YXIgbGVuID0gMipiLnJlYWRVSW50MzJMRShpKTsgcmV0dXJuIGIudG9TdHJpbmcoJ3V0ZjE2bGUnLGkrNCxpKzQrbGVuLTEpO307XG5cdF9fbHBwNCA9IGZ1bmN0aW9uIGxwcDRfYihiLyo6UmF3Qnl0ZXN8Q0ZCbG9iKi8sIGkvKjpudW1iZXIqLykgeyBpZighQnVmZmVyLmlzQnVmZmVyKGIpLyo6OiB8fCAhKGIgaW5zdGFuY2VvZiBCdWZmZXIpKi8pIHJldHVybiBfX19scHA0KGIsIGkpOyB2YXIgbGVuID0gYi5yZWFkVUludDMyTEUoaSk7IHJldHVybiBiLnRvU3RyaW5nKCd1dGYxNmxlJyxpKzQsaSs0K2xlbik7fTtcblx0X184bHBwNCA9IGZ1bmN0aW9uIGxwcDRfOGIoYi8qOlJhd0J5dGVzfENGQmxvYiovLCBpLyo6bnVtYmVyKi8pIHsgaWYoIUJ1ZmZlci5pc0J1ZmZlcihiKS8qOjogfHwgIShiIGluc3RhbmNlb2YgQnVmZmVyKSovKSByZXR1cm4gX19fOGxwcDQoYiwgaSk7IHZhciBsZW4gPSBiLnJlYWRVSW50MzJMRShpKTsgcmV0dXJuIGIudG9TdHJpbmcoJ3V0ZjgnLGkrNCxpKzQrbGVuKTt9O1xuXHRfX2RvdWJsZSA9IGZ1bmN0aW9uIGRvdWJsZV8oYi8qOlJhd0J5dGVzfENGQmxvYiovLCBpLyo6bnVtYmVyKi8pIHsgaWYoQnVmZmVyLmlzQnVmZmVyKGIpLyo6OiYmIGIgaW5zdGFuY2VvZiBCdWZmZXIqLykgcmV0dXJuIGIucmVhZERvdWJsZUxFKGkpOyByZXR1cm4gX19fZG91YmxlKGIsaSk7IH07XG5cdGlzX2J1ZiA9IGZ1bmN0aW9uIGlzX2J1Zl9iKGEpIHsgcmV0dXJuIEJ1ZmZlci5pc0J1ZmZlcihhKSB8fCBBcnJheS5pc0FycmF5KGEpIHx8ICh0eXBlb2YgVWludDhBcnJheSAhPT0gXCJ1bmRlZmluZWRcIiAmJiBhIGluc3RhbmNlb2YgVWludDhBcnJheSk7IH07XG59XG5cbi8qIGZyb20ganMteGxzICovXG5mdW5jdGlvbiBjcGRvaXQoKSB7XG5cdF9fdXRmMTZsZSA9IGZ1bmN0aW9uKGIvKjpSYXdCeXRlc3xDRkJsb2IqLyxzLyo6bnVtYmVyKi8sZS8qOm51bWJlciovKSB7IHJldHVybiAkY3B0YWJsZS51dGlscy5kZWNvZGUoMTIwMCwgYi5zbGljZShzLGUpKS5yZXBsYWNlKGNocjAsICcnKTsgfTtcblx0X191dGY4ID0gZnVuY3Rpb24oYi8qOlJhd0J5dGVzfENGQmxvYiovLHMvKjpudW1iZXIqLyxlLyo6bnVtYmVyKi8pIHsgcmV0dXJuICRjcHRhYmxlLnV0aWxzLmRlY29kZSg2NTAwMSwgYi5zbGljZShzLGUpKTsgfTtcblx0X19scHN0ciA9IGZ1bmN0aW9uKGIvKjpSYXdCeXRlc3xDRkJsb2IqLyxpLyo6bnVtYmVyKi8pIHsgdmFyIGxlbiA9IF9fcmVhZFVJbnQzMkxFKGIsaSk7IHJldHVybiBsZW4gPiAwID8gJGNwdGFibGUudXRpbHMuZGVjb2RlKGN1cnJlbnRfYW5zaSwgYi5zbGljZShpKzQsIGkrNCtsZW4tMSkpIDogXCJcIjt9O1xuXHRfX2Nwc3RyID0gZnVuY3Rpb24oYi8qOlJhd0J5dGVzfENGQmxvYiovLGkvKjpudW1iZXIqLykgeyB2YXIgbGVuID0gX19yZWFkVUludDMyTEUoYixpKTsgcmV0dXJuIGxlbiA+IDAgPyAkY3B0YWJsZS51dGlscy5kZWNvZGUoY3VycmVudF9jb2RlcGFnZSwgYi5zbGljZShpKzQsIGkrNCtsZW4tMSkpIDogXCJcIjt9O1xuXHRfX2xwd3N0ciA9IGZ1bmN0aW9uKGIvKjpSYXdCeXRlc3xDRkJsb2IqLyxpLyo6bnVtYmVyKi8pIHsgdmFyIGxlbiA9IDIqX19yZWFkVUludDMyTEUoYixpKTsgcmV0dXJuIGxlbiA+IDAgPyAkY3B0YWJsZS51dGlscy5kZWNvZGUoMTIwMCwgYi5zbGljZShpKzQsaSs0K2xlbi0xKSkgOiBcIlwiO307XG5cdF9fbHBwNCA9IGZ1bmN0aW9uKGIvKjpSYXdCeXRlc3xDRkJsb2IqLyxpLyo6bnVtYmVyKi8pIHsgdmFyIGxlbiA9IF9fcmVhZFVJbnQzMkxFKGIsaSk7IHJldHVybiBsZW4gPiAwID8gJGNwdGFibGUudXRpbHMuZGVjb2RlKDEyMDAsIGIuc2xpY2UoaSs0LGkrNCtsZW4pKSA6IFwiXCI7fTtcblx0X184bHBwNCA9IGZ1bmN0aW9uKGIvKjpSYXdCeXRlc3xDRkJsb2IqLyxpLyo6bnVtYmVyKi8pIHsgdmFyIGxlbiA9IF9fcmVhZFVJbnQzMkxFKGIsaSk7IHJldHVybiBsZW4gPiAwID8gJGNwdGFibGUudXRpbHMuZGVjb2RlKDY1MDAxLCBiLnNsaWNlKGkrNCxpKzQrbGVuKSkgOiBcIlwiO307XG59XG5pZih0eXBlb2YgJGNwdGFibGUgIT09ICd1bmRlZmluZWQnKSBjcGRvaXQoKTtcblxudmFyIF9fcmVhZFVJbnQ4ID0gZnVuY3Rpb24oYi8qOlJhd0J5dGVzfENGQmxvYiovLCBpZHgvKjpudW1iZXIqLykvKjpudW1iZXIqLyB7IHJldHVybiBiW2lkeF07IH07XG52YXIgX19yZWFkVUludDE2TEUgPSBmdW5jdGlvbihiLyo6UmF3Qnl0ZXN8Q0ZCbG9iKi8sIGlkeC8qOm51bWJlciovKS8qOm51bWJlciovIHsgcmV0dXJuIChiW2lkeCsxXSooMTw8OCkpK2JbaWR4XTsgfTtcbnZhciBfX3JlYWRJbnQxNkxFID0gZnVuY3Rpb24oYi8qOlJhd0J5dGVzfENGQmxvYiovLCBpZHgvKjpudW1iZXIqLykvKjpudW1iZXIqLyB7IHZhciB1ID0gKGJbaWR4KzFdKigxPDw4KSkrYltpZHhdOyByZXR1cm4gKHUgPCAweDgwMDApID8gdSA6ICgoMHhmZmZmIC0gdSArIDEpICogLTEpOyB9O1xudmFyIF9fcmVhZFVJbnQzMkxFID0gZnVuY3Rpb24oYi8qOlJhd0J5dGVzfENGQmxvYiovLCBpZHgvKjpudW1iZXIqLykvKjpudW1iZXIqLyB7IHJldHVybiBiW2lkeCszXSooMTw8MjQpKyhiW2lkeCsyXTw8MTYpKyhiW2lkeCsxXTw8OCkrYltpZHhdOyB9O1xudmFyIF9fcmVhZEludDMyTEUgPSBmdW5jdGlvbihiLyo6UmF3Qnl0ZXN8Q0ZCbG9iKi8sIGlkeC8qOm51bWJlciovKS8qOm51bWJlciovIHsgcmV0dXJuIChiW2lkeCszXTw8MjQpfChiW2lkeCsyXTw8MTYpfChiW2lkeCsxXTw8OCl8YltpZHhdOyB9O1xudmFyIF9fcmVhZEludDMyQkUgPSBmdW5jdGlvbihiLyo6UmF3Qnl0ZXN8Q0ZCbG9iKi8sIGlkeC8qOm51bWJlciovKS8qOm51bWJlciovIHsgcmV0dXJuIChiW2lkeF08PDI0KXwoYltpZHgrMV08PDE2KXwoYltpZHgrMl08PDgpfGJbaWR4KzNdOyB9O1xuXG5mdW5jdGlvbiBSZWFkU2hpZnQoc2l6ZS8qOm51bWJlciovLCB0Lyo6P3N0cmluZyovKS8qOm51bWJlcnxzdHJpbmcqLyB7XG5cdHZhciBvPVwiXCIsIG9JLyo6OiA6bnVtYmVyID0gMCovLCBvUiwgb289W10sIHcsIHZ2LCBpLCBsb2M7XG5cdHN3aXRjaCh0KSB7XG5cdFx0Y2FzZSAnZGJjcyc6XG5cdFx0XHRsb2MgPSB0aGlzLmw7XG5cdFx0XHRpZihoYXNfYnVmICYmIEJ1ZmZlci5pc0J1ZmZlcih0aGlzKSkgbyA9IHRoaXMuc2xpY2UodGhpcy5sLCB0aGlzLmwrMipzaXplKS50b1N0cmluZyhcInV0ZjE2bGVcIik7XG5cdFx0XHRlbHNlIGZvcihpID0gMDsgaSA8IHNpemU7ICsraSkgeyBvKz1TdHJpbmcuZnJvbUNoYXJDb2RlKF9fcmVhZFVJbnQxNkxFKHRoaXMsIGxvYykpOyBsb2MrPTI7IH1cblx0XHRcdHNpemUgKj0gMjtcblx0XHRcdGJyZWFrO1xuXG5cdFx0Y2FzZSAndXRmOCc6IG8gPSBfX3V0ZjgodGhpcywgdGhpcy5sLCB0aGlzLmwgKyBzaXplKTsgYnJlYWs7XG5cdFx0Y2FzZSAndXRmMTZsZSc6IHNpemUgKj0gMjsgbyA9IF9fdXRmMTZsZSh0aGlzLCB0aGlzLmwsIHRoaXMubCArIHNpemUpOyBicmVhaztcblxuXHRcdGNhc2UgJ3dzdHInOlxuXHRcdFx0aWYodHlwZW9mICRjcHRhYmxlICE9PSAndW5kZWZpbmVkJykgbyA9ICRjcHRhYmxlLnV0aWxzLmRlY29kZShjdXJyZW50X2NvZGVwYWdlLCB0aGlzLnNsaWNlKHRoaXMubCwgdGhpcy5sKzIqc2l6ZSkpO1xuXHRcdFx0ZWxzZSByZXR1cm4gUmVhZFNoaWZ0LmNhbGwodGhpcywgc2l6ZSwgJ2RiY3MnKTtcblx0XHRcdHNpemUgPSAyICogc2l6ZTsgYnJlYWs7XG5cblx0XHQvKiBbTVMtT0xFRFNdIDIuMS40IExlbmd0aFByZWZpeGVkQW5zaVN0cmluZyAqL1xuXHRcdGNhc2UgJ2xwc3RyLWFuc2knOiBvID0gX19scHN0cih0aGlzLCB0aGlzLmwpOyBzaXplID0gNCArIF9fcmVhZFVJbnQzMkxFKHRoaXMsIHRoaXMubCk7IGJyZWFrO1xuXHRcdGNhc2UgJ2xwc3RyLWNwJzogbyA9IF9fY3BzdHIodGhpcywgdGhpcy5sKTsgc2l6ZSA9IDQgKyBfX3JlYWRVSW50MzJMRSh0aGlzLCB0aGlzLmwpOyBicmVhaztcblx0XHQvKiBbTVMtT0xFRFNdIDIuMS41IExlbmd0aFByZWZpeGVkVW5pY29kZVN0cmluZyAqL1xuXHRcdGNhc2UgJ2xwd3N0cic6IG8gPSBfX2xwd3N0cih0aGlzLCB0aGlzLmwpOyBzaXplID0gNCArIDIgKiBfX3JlYWRVSW50MzJMRSh0aGlzLCB0aGlzLmwpOyBicmVhaztcblx0XHQvKiBbTVMtT0ZGQ1JZUFRPXSAyLjEuMiBMZW5ndGgtUHJlZml4ZWQgUGFkZGVkIFVuaWNvZGUgU3RyaW5nIChVTklDT0RFLUxQLVA0KSAqL1xuXHRcdGNhc2UgJ2xwcDQnOiBzaXplID0gNCArICBfX3JlYWRVSW50MzJMRSh0aGlzLCB0aGlzLmwpOyBvID0gX19scHA0KHRoaXMsIHRoaXMubCk7IGlmKHNpemUgJiAweDAyKSBzaXplICs9IDI7IGJyZWFrO1xuXHRcdC8qIFtNUy1PRkZDUllQVE9dIDIuMS4zIExlbmd0aC1QcmVmaXhlZCBVVEYtOCBTdHJpbmcgKFVURi04LUxQLVA0KSAqL1xuXHRcdGNhc2UgJzhscHA0Jzogc2l6ZSA9IDQgKyAgX19yZWFkVUludDMyTEUodGhpcywgdGhpcy5sKTsgbyA9IF9fOGxwcDQodGhpcywgdGhpcy5sKTsgaWYoc2l6ZSAmIDB4MDMpIHNpemUgKz0gNCAtIChzaXplICYgMHgwMyk7IGJyZWFrO1xuXG5cdFx0Y2FzZSAnY3N0cic6IHNpemUgPSAwOyBvID0gXCJcIjtcblx0XHRcdHdoaWxlKCh3PV9fcmVhZFVJbnQ4KHRoaXMsIHRoaXMubCArIHNpemUrKykpIT09MCkgb28ucHVzaChfZ2V0Y2hhcih3KSk7XG5cdFx0XHRvID0gb28uam9pbihcIlwiKTsgYnJlYWs7XG5cdFx0Y2FzZSAnX3dzdHInOiBzaXplID0gMDsgbyA9IFwiXCI7XG5cdFx0XHR3aGlsZSgodz1fX3JlYWRVSW50MTZMRSh0aGlzLHRoaXMubCArc2l6ZSkpIT09MCl7b28ucHVzaChfZ2V0Y2hhcih3KSk7c2l6ZSs9Mjt9XG5cdFx0XHRzaXplKz0yOyBvID0gb28uam9pbihcIlwiKTsgYnJlYWs7XG5cblx0XHQvKiBzYmNzIGFuZCBkYmNzIHN1cHBvcnQgY29udGludWUgcmVjb3JkcyBpbiB0aGUgU1NUIHdheSBUT0RPIGNvZGVwYWdlcyAqL1xuXHRcdGNhc2UgJ2RiY3MtY29udCc6IG8gPSBcIlwiOyBsb2MgPSB0aGlzLmw7XG5cdFx0XHRmb3IoaSA9IDA7IGkgPCBzaXplOyArK2kpIHtcblx0XHRcdFx0aWYodGhpcy5sZW5zICYmIHRoaXMubGVucy5pbmRleE9mKGxvYykgIT09IC0xKSB7XG5cdFx0XHRcdFx0dyA9IF9fcmVhZFVJbnQ4KHRoaXMsIGxvYyk7XG5cdFx0XHRcdFx0dGhpcy5sID0gbG9jICsgMTtcblx0XHRcdFx0XHR2diA9IFJlYWRTaGlmdC5jYWxsKHRoaXMsIHNpemUtaSwgdyA/ICdkYmNzLWNvbnQnIDogJ3NiY3MtY29udCcpO1xuXHRcdFx0XHRcdHJldHVybiBvby5qb2luKFwiXCIpICsgdnY7XG5cdFx0XHRcdH1cblx0XHRcdFx0b28ucHVzaChfZ2V0Y2hhcihfX3JlYWRVSW50MTZMRSh0aGlzLCBsb2MpKSk7XG5cdFx0XHRcdGxvYys9Mjtcblx0XHRcdH0gbyA9IG9vLmpvaW4oXCJcIik7IHNpemUgKj0gMjsgYnJlYWs7XG5cblx0XHRjYXNlICdjcHN0cic6XG5cdFx0XHRpZih0eXBlb2YgJGNwdGFibGUgIT09ICd1bmRlZmluZWQnKSB7XG5cdFx0XHRcdG8gPSAkY3B0YWJsZS51dGlscy5kZWNvZGUoY3VycmVudF9jb2RlcGFnZSwgdGhpcy5zbGljZSh0aGlzLmwsIHRoaXMubCArIHNpemUpKTtcblx0XHRcdFx0YnJlYWs7XG5cdFx0XHR9XG5cdFx0LyogZmFsbHMgdGhyb3VnaCAqL1xuXHRcdGNhc2UgJ3NiY3MtY29udCc6IG8gPSBcIlwiOyBsb2MgPSB0aGlzLmw7XG5cdFx0XHRmb3IoaSA9IDA7IGkgIT0gc2l6ZTsgKytpKSB7XG5cdFx0XHRcdGlmKHRoaXMubGVucyAmJiB0aGlzLmxlbnMuaW5kZXhPZihsb2MpICE9PSAtMSkge1xuXHRcdFx0XHRcdHcgPSBfX3JlYWRVSW50OCh0aGlzLCBsb2MpO1xuXHRcdFx0XHRcdHRoaXMubCA9IGxvYyArIDE7XG5cdFx0XHRcdFx0dnYgPSBSZWFkU2hpZnQuY2FsbCh0aGlzLCBzaXplLWksIHcgPyAnZGJjcy1jb250JyA6ICdzYmNzLWNvbnQnKTtcblx0XHRcdFx0XHRyZXR1cm4gb28uam9pbihcIlwiKSArIHZ2O1xuXHRcdFx0XHR9XG5cdFx0XHRcdG9vLnB1c2goX2dldGNoYXIoX19yZWFkVUludDgodGhpcywgbG9jKSkpO1xuXHRcdFx0XHRsb2MrPTE7XG5cdFx0XHR9IG8gPSBvby5qb2luKFwiXCIpOyBicmVhaztcblxuXHRcdGRlZmF1bHQ6XG5cdHN3aXRjaChzaXplKSB7XG5cdFx0Y2FzZSAxOiBvSSA9IF9fcmVhZFVJbnQ4KHRoaXMsIHRoaXMubCk7IHRoaXMubCsrOyByZXR1cm4gb0k7XG5cdFx0Y2FzZSAyOiBvSSA9ICh0ID09PSAnaScgPyBfX3JlYWRJbnQxNkxFIDogX19yZWFkVUludDE2TEUpKHRoaXMsIHRoaXMubCk7IHRoaXMubCArPSAyOyByZXR1cm4gb0k7XG5cdFx0Y2FzZSA0OiBjYXNlIC00OlxuXHRcdFx0aWYodCA9PT0gJ2knIHx8ICgodGhpc1t0aGlzLmwrM10gJiAweDgwKT09PTApKSB7IG9JID0gKChzaXplID4gMCkgPyBfX3JlYWRJbnQzMkxFIDogX19yZWFkSW50MzJCRSkodGhpcywgdGhpcy5sKTsgdGhpcy5sICs9IDQ7IHJldHVybiBvSTsgfVxuXHRcdFx0ZWxzZSB7IG9SID0gX19yZWFkVUludDMyTEUodGhpcywgdGhpcy5sKTsgdGhpcy5sICs9IDQ7IH0gcmV0dXJuIG9SO1xuXHRcdGNhc2UgODogY2FzZSAtODpcblx0XHRcdGlmKHQgPT09ICdmJykge1xuXHRcdFx0XHRpZihzaXplID09IDgpIG9SID0gX19kb3VibGUodGhpcywgdGhpcy5sKTtcblx0XHRcdFx0ZWxzZSBvUiA9IF9fZG91YmxlKFt0aGlzW3RoaXMubCs3XSx0aGlzW3RoaXMubCs2XSx0aGlzW3RoaXMubCs1XSx0aGlzW3RoaXMubCs0XSx0aGlzW3RoaXMubCszXSx0aGlzW3RoaXMubCsyXSx0aGlzW3RoaXMubCsxXSx0aGlzW3RoaXMubCswXV0sIDApO1xuXHRcdFx0XHR0aGlzLmwgKz0gODsgcmV0dXJuIG9SO1xuXHRcdFx0fSBlbHNlIHNpemUgPSA4O1xuXHRcdC8qIGZhbGxzIHRocm91Z2ggKi9cblx0XHRjYXNlIDE2OiBvID0gX19oZXhsaWZ5KHRoaXMsIHRoaXMubCwgc2l6ZSk7IGJyZWFrO1xuXHR9fVxuXHR0aGlzLmwrPXNpemU7IHJldHVybiBvO1xufVxuXG52YXIgX193cml0ZVVJbnQzMkxFID0gZnVuY3Rpb24oYi8qOlJhd0J5dGVzfENGQmxvYiovLCB2YWwvKjpudW1iZXIqLywgaWR4Lyo6bnVtYmVyKi8pLyo6dm9pZCovIHsgYltpZHhdID0gKHZhbCAmIDB4RkYpOyBiW2lkeCsxXSA9ICgodmFsID4+PiA4KSAmIDB4RkYpOyBiW2lkeCsyXSA9ICgodmFsID4+PiAxNikgJiAweEZGKTsgYltpZHgrM10gPSAoKHZhbCA+Pj4gMjQpICYgMHhGRik7IH07XG52YXIgX193cml0ZUludDMyTEUgID0gZnVuY3Rpb24oYi8qOlJhd0J5dGVzfENGQmxvYiovLCB2YWwvKjpudW1iZXIqLywgaWR4Lyo6bnVtYmVyKi8pLyo6dm9pZCovIHsgYltpZHhdID0gKHZhbCAmIDB4RkYpOyBiW2lkeCsxXSA9ICgodmFsID4+IDgpICYgMHhGRik7IGJbaWR4KzJdID0gKCh2YWwgPj4gMTYpICYgMHhGRik7IGJbaWR4KzNdID0gKCh2YWwgPj4gMjQpICYgMHhGRik7IH07XG52YXIgX193cml0ZVVJbnQxNkxFID0gZnVuY3Rpb24oYi8qOlJhd0J5dGVzfENGQmxvYiovLCB2YWwvKjpudW1iZXIqLywgaWR4Lyo6bnVtYmVyKi8pLyo6dm9pZCovIHsgYltpZHhdID0gKHZhbCAmIDB4RkYpOyBiW2lkeCsxXSA9ICgodmFsID4+PiA4KSAmIDB4RkYpOyB9O1xuXG5mdW5jdGlvbiBXcml0ZVNoaWZ0KHQvKjpudW1iZXIqLywgdmFsLyo6c3RyaW5nfG51bWJlciovLCBmLyo6P3N0cmluZyovKS8qOmFueSovIHtcblx0dmFyIHNpemUgPSAwLCBpID0gMDtcblx0aWYoZiA9PT0gJ2RiY3MnKSB7XG5cdFx0Lyo6OiBpZih0eXBlb2YgdmFsICE9PSAnc3RyaW5nJykgdGhyb3cgbmV3IEVycm9yKFwidW5yZWFjaGFibGVcIik7ICovXG5cdFx0Zm9yKGkgPSAwOyBpICE9IHZhbC5sZW5ndGg7ICsraSkgX193cml0ZVVJbnQxNkxFKHRoaXMsIHZhbC5jaGFyQ29kZUF0KGkpLCB0aGlzLmwgKyAyICogaSk7XG5cdFx0c2l6ZSA9IDIgKiB2YWwubGVuZ3RoO1xuXHR9IGVsc2UgaWYoZiA9PT0gJ3NiY3MnKSB7XG5cdFx0aWYodHlwZW9mICRjcHRhYmxlICE9PSAndW5kZWZpbmVkJyAmJiBjdXJyZW50X2Fuc2kgPT0gODc0KSB7XG5cdFx0XHQvKiBUT0RPOiB1c2UgdGFibGVzIGRpcmVjdGx5LCBkb24ndCBlbmNvZGUgKi9cblx0XHRcdC8qOjogaWYodHlwZW9mIHZhbCAhPT0gXCJzdHJpbmdcIikgdGhyb3cgbmV3IEVycm9yKFwidW5yZWFjaGFibGVcIik7ICovXG5cdFx0XHRmb3IoaSA9IDA7IGkgIT0gdmFsLmxlbmd0aDsgKytpKSB7XG5cdFx0XHRcdHZhciBjcHBheWxvYWQgPSAkY3B0YWJsZS51dGlscy5lbmNvZGUoY3VycmVudF9hbnNpLCB2YWwuY2hhckF0KGkpKTtcblx0XHRcdFx0dGhpc1t0aGlzLmwgKyBpXSA9IGNwcGF5bG9hZFswXTtcblx0XHRcdH1cblx0XHR9IGVsc2Uge1xuXHRcdFx0Lyo6OiBpZih0eXBlb2YgdmFsICE9PSAnc3RyaW5nJykgdGhyb3cgbmV3IEVycm9yKFwidW5yZWFjaGFibGVcIik7ICovXG5cdFx0XHR2YWwgPSB2YWwucmVwbGFjZSgvW15cXHgwMC1cXHg3Rl0vZywgXCJfXCIpO1xuXHRcdFx0Lyo6OiBpZih0eXBlb2YgdmFsICE9PSAnc3RyaW5nJykgdGhyb3cgbmV3IEVycm9yKFwidW5yZWFjaGFibGVcIik7ICovXG5cdFx0XHRmb3IoaSA9IDA7IGkgIT0gdmFsLmxlbmd0aDsgKytpKSB0aGlzW3RoaXMubCArIGldID0gKHZhbC5jaGFyQ29kZUF0KGkpICYgMHhGRik7XG5cdFx0fVxuXHRcdHNpemUgPSB2YWwubGVuZ3RoO1xuXHR9IGVsc2UgaWYoZiA9PT0gJ2hleCcpIHtcblx0XHRmb3IoOyBpIDwgdDsgKytpKSB7XG5cdFx0XHQvKjo6IGlmKHR5cGVvZiB2YWwgIT09IFwic3RyaW5nXCIpIHRocm93IG5ldyBFcnJvcihcInVucmVhY2hhYmxlXCIpOyAqL1xuXHRcdFx0dGhpc1t0aGlzLmwrK10gPSAocGFyc2VJbnQodmFsLnNsaWNlKDIqaSwgMippKzIpLCAxNil8fDApO1xuXHRcdH0gcmV0dXJuIHRoaXM7XG5cdH0gZWxzZSBpZihmID09PSAndXRmMTZsZScpIHtcblx0XHRcdC8qOjogaWYodHlwZW9mIHZhbCAhPT0gXCJzdHJpbmdcIikgdGhyb3cgbmV3IEVycm9yKFwidW5yZWFjaGFibGVcIik7ICovXG5cdFx0XHR2YXIgZW5kLyo6bnVtYmVyKi8gPSBNYXRoLm1pbih0aGlzLmwgKyB0LCB0aGlzLmxlbmd0aCk7XG5cdFx0XHRmb3IoaSA9IDA7IGkgPCBNYXRoLm1pbih2YWwubGVuZ3RoLCB0KTsgKytpKSB7XG5cdFx0XHRcdHZhciBjYyA9IHZhbC5jaGFyQ29kZUF0KGkpO1xuXHRcdFx0XHR0aGlzW3RoaXMubCsrXSA9IChjYyAmIDB4ZmYpO1xuXHRcdFx0XHR0aGlzW3RoaXMubCsrXSA9IChjYyA+PiA4KTtcblx0XHRcdH1cblx0XHRcdHdoaWxlKHRoaXMubCA8IGVuZCkgdGhpc1t0aGlzLmwrK10gPSAwO1xuXHRcdFx0cmV0dXJuIHRoaXM7XG5cdH0gZWxzZSAvKjo6IGlmKHR5cGVvZiB2YWwgPT09ICdudW1iZXInKSAqLyBzd2l0Y2godCkge1xuXHRcdGNhc2UgIDE6IHNpemUgPSAxOyB0aGlzW3RoaXMubF0gPSB2YWwmMHhGRjsgYnJlYWs7XG5cdFx0Y2FzZSAgMjogc2l6ZSA9IDI7IHRoaXNbdGhpcy5sXSA9IHZhbCYweEZGOyB2YWwgPj4+PSA4OyB0aGlzW3RoaXMubCsxXSA9IHZhbCYweEZGOyBicmVhaztcblx0XHRjYXNlICAzOiBzaXplID0gMzsgdGhpc1t0aGlzLmxdID0gdmFsJjB4RkY7IHZhbCA+Pj49IDg7IHRoaXNbdGhpcy5sKzFdID0gdmFsJjB4RkY7IHZhbCA+Pj49IDg7IHRoaXNbdGhpcy5sKzJdID0gdmFsJjB4RkY7IGJyZWFrO1xuXHRcdGNhc2UgIDQ6IHNpemUgPSA0OyBfX3dyaXRlVUludDMyTEUodGhpcywgdmFsLCB0aGlzLmwpOyBicmVhaztcblx0XHRjYXNlICA4OiBzaXplID0gODsgaWYoZiA9PT0gJ2YnKSB7IHdyaXRlX2RvdWJsZV9sZSh0aGlzLCB2YWwsIHRoaXMubCk7IGJyZWFrOyB9XG5cdFx0LyogZmFsbHMgdGhyb3VnaCAqL1xuXHRcdGNhc2UgMTY6IGJyZWFrO1xuXHRcdGNhc2UgLTQ6IHNpemUgPSA0OyBfX3dyaXRlSW50MzJMRSh0aGlzLCB2YWwsIHRoaXMubCk7IGJyZWFrO1xuXHR9XG5cdHRoaXMubCArPSBzaXplOyByZXR1cm4gdGhpcztcbn1cblxuZnVuY3Rpb24gQ2hlY2tGaWVsZChoZXhzdHIvKjpzdHJpbmcqLywgZmxkLyo6c3RyaW5nKi8pLyo6dm9pZCovIHtcblx0dmFyIG0gPSBfX2hleGxpZnkodGhpcyx0aGlzLmwsaGV4c3RyLmxlbmd0aD4+MSk7XG5cdGlmKG0gIT09IGhleHN0cikgdGhyb3cgbmV3IEVycm9yKGZsZCArICdFeHBlY3RlZCAnICsgaGV4c3RyICsgJyBzYXcgJyArIG0pO1xuXHR0aGlzLmwgKz0gaGV4c3RyLmxlbmd0aD4+MTtcbn1cblxuZnVuY3Rpb24gcHJlcF9ibG9iKGJsb2IsIHBvcy8qOm51bWJlciovKS8qOnZvaWQqLyB7XG5cdGJsb2IubCA9IHBvcztcblx0YmxvYi5yZWFkX3NoaWZ0ID0gLyo6OigqL1JlYWRTaGlmdC8qOjogOmFueSkqLztcblx0YmxvYi5jaGsgPSBDaGVja0ZpZWxkO1xuXHRibG9iLndyaXRlX3NoaWZ0ID0gV3JpdGVTaGlmdDtcbn1cblxuZnVuY3Rpb24gcGFyc2Vub29wKGJsb2IsIGxlbmd0aC8qOjogOm51bWJlciwgb3B0cz86YW55ICovKSB7IGJsb2IubCArPSBsZW5ndGg7IH1cblxuZnVuY3Rpb24gbmV3X2J1Zihzei8qOm51bWJlciovKS8qOkJsb2NrKi8ge1xuXHR2YXIgbyA9IG5ld19yYXdfYnVmKHN6KTtcblx0cHJlcF9ibG9iKG8sIDApO1xuXHRyZXR1cm4gbztcbn1cblxuLyogW01TLVhMU0JdIDIuMS40IFJlY29yZCAqL1xuZnVuY3Rpb24gcmVjb3JkaG9wcGVyKGRhdGEsIGNiLyo6UmVjb3JkSG9wcGVyQ0IqLywgb3B0cy8qOj9hbnkqLykge1xuXHRpZighZGF0YSkgcmV0dXJuO1xuXHR2YXIgdG1wYnl0ZSwgY250Ynl0ZSwgbGVuZ3RoO1xuXHRwcmVwX2Jsb2IoZGF0YSwgZGF0YS5sIHx8IDApO1xuXHR2YXIgTCA9IGRhdGEubGVuZ3RoLCBSVCA9IDAsIHRndCA9IDA7XG5cdHdoaWxlKGRhdGEubCA8IEwpIHtcblx0XHRSVCA9IGRhdGEucmVhZF9zaGlmdCgxKTtcblx0XHRpZihSVCAmIDB4ODApIFJUID0gKFJUICYgMHg3RikgKyAoKGRhdGEucmVhZF9zaGlmdCgxKSAmIDB4N0YpPDw3KTtcblx0XHR2YXIgUiA9IFhMU0JSZWNvcmRFbnVtW1JUXSB8fCBYTFNCUmVjb3JkRW51bVsweEZGRkZdO1xuXHRcdHRtcGJ5dGUgPSBkYXRhLnJlYWRfc2hpZnQoMSk7XG5cdFx0bGVuZ3RoID0gdG1wYnl0ZSAmIDB4N0Y7XG5cdFx0Zm9yKGNudGJ5dGUgPSAxOyBjbnRieXRlIDw0ICYmICh0bXBieXRlICYgMHg4MCk7ICsrY250Ynl0ZSkgbGVuZ3RoICs9ICgodG1wYnl0ZSA9IGRhdGEucmVhZF9zaGlmdCgxKSkgJiAweDdGKTw8KDcqY250Ynl0ZSk7XG5cdFx0dGd0ID0gZGF0YS5sICsgbGVuZ3RoO1xuXHRcdHZhciBkID0gUi5mICYmIFIuZihkYXRhLCBsZW5ndGgsIG9wdHMpO1xuXHRcdGRhdGEubCA9IHRndDtcblx0XHRpZihjYihkLCBSLCBSVCkpIHJldHVybjtcblx0fVxufVxuXG4vKiBjb250cm9sIGJ1ZmZlciB1c2FnZSBmb3IgZml4ZWQtbGVuZ3RoIGJ1ZmZlcnMgKi9cbmZ1bmN0aW9uIGJ1Zl9hcnJheSgpLyo6QnVmQXJyYXkqLyB7XG5cdHZhciBidWZzLyo6QXJyYXk8QmxvY2s+Ki8gPSBbXSwgYmxrc3ogPSBoYXNfYnVmID8gMjU2IDogMjA0ODtcblx0dmFyIG5ld2JsayA9IGZ1bmN0aW9uIGJhX25ld2Jsayhzei8qOm51bWJlciovKS8qOkJsb2NrKi8ge1xuXHRcdHZhciBvLyo6QmxvY2sqLyA9IChuZXdfYnVmKHN6KS8qOmFueSovKTtcblx0XHRwcmVwX2Jsb2IobywgMCk7XG5cdFx0cmV0dXJuIG87XG5cdH07XG5cblx0dmFyIGN1cmJ1Zi8qOkJsb2NrKi8gPSBuZXdibGsoYmxrc3opO1xuXG5cdHZhciBlbmRidWYgPSBmdW5jdGlvbiBiYV9lbmRidWYoKSB7XG5cdFx0aWYoIWN1cmJ1ZikgcmV0dXJuO1xuXHRcdGlmKGN1cmJ1Zi5sZW5ndGggPiBjdXJidWYubCkgeyBjdXJidWYgPSBjdXJidWYuc2xpY2UoMCwgY3VyYnVmLmwpOyBjdXJidWYubCA9IGN1cmJ1Zi5sZW5ndGg7IH1cblx0XHRpZihjdXJidWYubGVuZ3RoID4gMCkgYnVmcy5wdXNoKGN1cmJ1Zik7XG5cdFx0Y3VyYnVmID0gbnVsbDtcblx0fTtcblxuXHR2YXIgbmV4dCA9IGZ1bmN0aW9uIGJhX25leHQoc3ovKjpudW1iZXIqLykvKjpCbG9jayovIHtcblx0XHRpZihjdXJidWYgJiYgKHN6IDwgKGN1cmJ1Zi5sZW5ndGggLSBjdXJidWYubCkpKSByZXR1cm4gY3VyYnVmO1xuXHRcdGVuZGJ1ZigpO1xuXHRcdHJldHVybiAoY3VyYnVmID0gbmV3YmxrKE1hdGgubWF4KHN6KzEsIGJsa3N6KSkpO1xuXHR9O1xuXG5cdHZhciBlbmQgPSBmdW5jdGlvbiBiYV9lbmQoKSB7XG5cdFx0ZW5kYnVmKCk7XG5cdFx0cmV0dXJuIGJjb25jYXQoYnVmcyk7XG5cdH07XG5cblx0dmFyIHB1c2ggPSBmdW5jdGlvbiBiYV9wdXNoKGJ1ZikgeyBlbmRidWYoKTsgY3VyYnVmID0gYnVmOyBpZihjdXJidWYubCA9PSBudWxsKSBjdXJidWYubCA9IGN1cmJ1Zi5sZW5ndGg7IG5leHQoYmxrc3opOyB9O1xuXG5cdHJldHVybiAoeyBuZXh0Om5leHQsIHB1c2g6cHVzaCwgZW5kOmVuZCwgX2J1ZnM6YnVmcyB9Lyo6YW55Ki8pO1xufVxuXG5mdW5jdGlvbiB3cml0ZV9yZWNvcmQoYmEvKjpCdWZBcnJheSovLCB0eXBlLyo6bnVtYmVyKi8sIHBheWxvYWQsIGxlbmd0aC8qOj9udW1iZXIqLykge1xuXHR2YXIgdC8qOm51bWJlciovID0gK3R5cGUsIGw7XG5cdGlmKGlzTmFOKHQpKSByZXR1cm47IC8vIFRPRE86IHRocm93IHNvbWV0aGluZyBoZXJlP1xuXHRpZighbGVuZ3RoKSBsZW5ndGggPSBYTFNCUmVjb3JkRW51bVt0XS5wIHx8IChwYXlsb2FkfHxbXSkubGVuZ3RoIHx8IDA7XG5cdGwgPSAxICsgKHQgPj0gMHg4MCA/IDEgOiAwKSArIDEvKiArIGxlbmd0aCovO1xuXHRpZihsZW5ndGggPj0gMHg4MCkgKytsOyBpZihsZW5ndGggPj0gMHg0MDAwKSArK2w7IGlmKGxlbmd0aCA+PSAweDIwMDAwMCkgKytsO1xuXHR2YXIgbyA9IGJhLm5leHQobCk7XG5cdGlmKHQgPD0gMHg3Rikgby53cml0ZV9zaGlmdCgxLCB0KTtcblx0ZWxzZSB7XG5cdFx0by53cml0ZV9zaGlmdCgxLCAodCAmIDB4N0YpICsgMHg4MCk7XG5cdFx0by53cml0ZV9zaGlmdCgxLCAodCA+PiA3KSk7XG5cdH1cblx0Zm9yKHZhciBpID0gMDsgaSAhPSA0OyArK2kpIHtcblx0XHRpZihsZW5ndGggPj0gMHg4MCkgeyBvLndyaXRlX3NoaWZ0KDEsIChsZW5ndGggJiAweDdGKSsweDgwKTsgbGVuZ3RoID4+PSA3OyB9XG5cdFx0ZWxzZSB7IG8ud3JpdGVfc2hpZnQoMSwgbGVuZ3RoKTsgYnJlYWs7IH1cblx0fVxuXHRpZigvKjo6IGxlbmd0aCAhPSBudWxsICYmKi9sZW5ndGggPiAwICYmIGlzX2J1ZihwYXlsb2FkKSkgYmEucHVzaChwYXlsb2FkKTtcbn1cbi8qIFhMUyByYW5nZXMgZW5mb3JjZWQgKi9cbmZ1bmN0aW9uIHNoaWZ0X2NlbGxfeGxzKGNlbGwvKjpDZWxsQWRkcmVzcyovLCB0Z3QvKjphbnkqLywgb3B0cy8qOj9hbnkqLykvKjpDZWxsQWRkcmVzcyovIHtcblx0dmFyIG91dCA9IGR1cChjZWxsKTtcblx0aWYodGd0LnMpIHtcblx0XHRpZihvdXQuY1JlbCkgb3V0LmMgKz0gdGd0LnMuYztcblx0XHRpZihvdXQuclJlbCkgb3V0LnIgKz0gdGd0LnMucjtcblx0fSBlbHNlIHtcblx0XHRpZihvdXQuY1JlbCkgb3V0LmMgKz0gdGd0LmM7XG5cdFx0aWYob3V0LnJSZWwpIG91dC5yICs9IHRndC5yO1xuXHR9XG5cdGlmKCFvcHRzIHx8IG9wdHMuYmlmZiA8IDEyKSB7XG5cdFx0d2hpbGUob3V0LmMgPj0gMHgxMDApIG91dC5jIC09IDB4MTAwO1xuXHRcdHdoaWxlKG91dC5yID49IDB4MTAwMDApIG91dC5yIC09IDB4MTAwMDA7XG5cdH1cblx0cmV0dXJuIG91dDtcbn1cblxuZnVuY3Rpb24gc2hpZnRfcmFuZ2VfeGxzKGNlbGwsIHJhbmdlLCBvcHRzKSB7XG5cdHZhciBvdXQgPSBkdXAoY2VsbCk7XG5cdG91dC5zID0gc2hpZnRfY2VsbF94bHMob3V0LnMsIHJhbmdlLnMsIG9wdHMpO1xuXHRvdXQuZSA9IHNoaWZ0X2NlbGxfeGxzKG91dC5lLCByYW5nZS5zLCBvcHRzKTtcblx0cmV0dXJuIG91dDtcbn1cblxuZnVuY3Rpb24gZW5jb2RlX2NlbGxfeGxzKGMvKjpDZWxsQWRkcmVzcyovLCBiaWZmLyo6bnVtYmVyKi8pLyo6c3RyaW5nKi8ge1xuXHRpZihjLmNSZWwgJiYgYy5jIDwgMCkgeyBjID0gZHVwKGMpOyB3aGlsZShjLmMgPCAwKSBjLmMgKz0gKGJpZmYgPiA4KSA/IDB4NDAwMCA6IDB4MTAwOyB9XG5cdGlmKGMuclJlbCAmJiBjLnIgPCAwKSB7IGMgPSBkdXAoYyk7IHdoaWxlKGMuciA8IDApIGMuciArPSAoYmlmZiA+IDgpID8gMHgxMDAwMDAgOiAoKGJpZmYgPiA1KSA/IDB4MTAwMDAgOiAweDQwMDApOyB9XG5cdHZhciBzID0gZW5jb2RlX2NlbGwoYyk7XG5cdGlmKCFjLmNSZWwgJiYgYy5jUmVsICE9IG51bGwpIHMgPSBmaXhfY29sKHMpO1xuXHRpZighYy5yUmVsICYmIGMuclJlbCAhPSBudWxsKSBzID0gZml4X3JvdyhzKTtcblx0cmV0dXJuIHM7XG59XG5cbmZ1bmN0aW9uIGVuY29kZV9yYW5nZV94bHMociwgb3B0cykvKjpzdHJpbmcqLyB7XG5cdGlmKHIucy5yID09IDAgJiYgIXIucy5yUmVsKSB7XG5cdFx0aWYoci5lLnIgPT0gKG9wdHMuYmlmZiA+PSAxMiA/IDB4RkZGRkYgOiAob3B0cy5iaWZmID49IDggPyAweDEwMDAwIDogMHg0MDAwKSkgJiYgIXIuZS5yUmVsKSB7XG5cdFx0XHRyZXR1cm4gKHIucy5jUmVsID8gXCJcIiA6IFwiJFwiKSArIGVuY29kZV9jb2woci5zLmMpICsgXCI6XCIgKyAoci5lLmNSZWwgPyBcIlwiIDogXCIkXCIpICsgZW5jb2RlX2NvbChyLmUuYyk7XG5cdFx0fVxuXHR9XG5cdGlmKHIucy5jID09IDAgJiYgIXIucy5jUmVsKSB7XG5cdFx0aWYoci5lLmMgPT0gKG9wdHMuYmlmZiA+PSAxMiA/IDB4M0ZGRiA6IDB4RkYpICYmICFyLmUuY1JlbCkge1xuXHRcdFx0cmV0dXJuIChyLnMuclJlbCA/IFwiXCIgOiBcIiRcIikgKyBlbmNvZGVfcm93KHIucy5yKSArIFwiOlwiICsgKHIuZS5yUmVsID8gXCJcIiA6IFwiJFwiKSArIGVuY29kZV9yb3coci5lLnIpO1xuXHRcdH1cblx0fVxuXHRyZXR1cm4gZW5jb2RlX2NlbGxfeGxzKHIucywgb3B0cy5iaWZmKSArIFwiOlwiICsgZW5jb2RlX2NlbGxfeGxzKHIuZSwgb3B0cy5iaWZmKTtcbn1cbmZ1bmN0aW9uIGRlY29kZV9yb3cocm93c3RyLyo6c3RyaW5nKi8pLyo6bnVtYmVyKi8geyByZXR1cm4gcGFyc2VJbnQodW5maXhfcm93KHJvd3N0ciksMTApIC0gMTsgfVxuZnVuY3Rpb24gZW5jb2RlX3Jvdyhyb3cvKjpudW1iZXIqLykvKjpzdHJpbmcqLyB7IHJldHVybiBcIlwiICsgKHJvdyArIDEpOyB9XG5mdW5jdGlvbiBmaXhfcm93KGNzdHIvKjpzdHJpbmcqLykvKjpzdHJpbmcqLyB7IHJldHVybiBjc3RyLnJlcGxhY2UoLyhbQS1aXXxeKShcXGQrKSQvLFwiJDEkJCQyXCIpOyB9XG5mdW5jdGlvbiB1bmZpeF9yb3coY3N0ci8qOnN0cmluZyovKS8qOnN0cmluZyovIHsgcmV0dXJuIGNzdHIucmVwbGFjZSgvXFwkKFxcZCspJC8sXCIkMVwiKTsgfVxuXG5mdW5jdGlvbiBkZWNvZGVfY29sKGNvbHN0ci8qOnN0cmluZyovKS8qOm51bWJlciovIHsgdmFyIGMgPSB1bmZpeF9jb2woY29sc3RyKSwgZCA9IDAsIGkgPSAwOyBmb3IoOyBpICE9PSBjLmxlbmd0aDsgKytpKSBkID0gMjYqZCArIGMuY2hhckNvZGVBdChpKSAtIDY0OyByZXR1cm4gZCAtIDE7IH1cbmZ1bmN0aW9uIGVuY29kZV9jb2woY29sLyo6bnVtYmVyKi8pLyo6c3RyaW5nKi8geyBpZihjb2wgPCAwKSB0aHJvdyBuZXcgRXJyb3IoXCJpbnZhbGlkIGNvbHVtbiBcIiArIGNvbCk7IHZhciBzPVwiXCI7IGZvcigrK2NvbDsgY29sOyBjb2w9TWF0aC5mbG9vcigoY29sLTEpLzI2KSkgcyA9IFN0cmluZy5mcm9tQ2hhckNvZGUoKChjb2wtMSklMjYpICsgNjUpICsgczsgcmV0dXJuIHM7IH1cbmZ1bmN0aW9uIGZpeF9jb2woY3N0ci8qOnN0cmluZyovKS8qOnN0cmluZyovIHsgcmV0dXJuIGNzdHIucmVwbGFjZSgvXihbQS1aXSkvLFwiJCQkMVwiKTsgfVxuZnVuY3Rpb24gdW5maXhfY29sKGNzdHIvKjpzdHJpbmcqLykvKjpzdHJpbmcqLyB7IHJldHVybiBjc3RyLnJlcGxhY2UoL15cXCQoW0EtWl0pLyxcIiQxXCIpOyB9XG5cbmZ1bmN0aW9uIHNwbGl0X2NlbGwoY3N0ci8qOnN0cmluZyovKS8qOkFycmF5PHN0cmluZz4qLyB7IHJldHVybiBjc3RyLnJlcGxhY2UoLyhcXCQ/W0EtWl0qKShcXCQ/XFxkKikvLFwiJDEsJDJcIikuc3BsaXQoXCIsXCIpOyB9XG4vL2Z1bmN0aW9uIGRlY29kZV9jZWxsKGNzdHIvKjpzdHJpbmcqLykvKjpDZWxsQWRkcmVzcyovIHsgdmFyIHNwbHQgPSBzcGxpdF9jZWxsKGNzdHIpOyByZXR1cm4geyBjOmRlY29kZV9jb2woc3BsdFswXSksIHI6ZGVjb2RlX3JvdyhzcGx0WzFdKSB9OyB9XG5mdW5jdGlvbiBkZWNvZGVfY2VsbChjc3RyLyo6c3RyaW5nKi8pLyo6Q2VsbEFkZHJlc3MqLyB7XG5cdHZhciBSID0gMCwgQyA9IDA7XG5cdGZvcih2YXIgaSA9IDA7IGkgPCBjc3RyLmxlbmd0aDsgKytpKSB7XG5cdFx0dmFyIGNjID0gY3N0ci5jaGFyQ29kZUF0KGkpO1xuXHRcdGlmKGNjID49IDQ4ICYmIGNjIDw9IDU3KSBSID0gMTAgKiBSICsgKGNjIC0gNDgpO1xuXHRcdGVsc2UgaWYoY2MgPj0gNjUgJiYgY2MgPD0gOTApIEMgPSAyNiAqIEMgKyAoY2MgLSA2NCk7XG5cdH1cblx0cmV0dXJuIHsgYzogQyAtIDEsIHI6UiAtIDEgfTtcbn1cbi8vZnVuY3Rpb24gZW5jb2RlX2NlbGwoY2VsbC8qOkNlbGxBZGRyZXNzKi8pLyo6c3RyaW5nKi8geyByZXR1cm4gZW5jb2RlX2NvbChjZWxsLmMpICsgZW5jb2RlX3JvdyhjZWxsLnIpOyB9XG5mdW5jdGlvbiBlbmNvZGVfY2VsbChjZWxsLyo6Q2VsbEFkZHJlc3MqLykvKjpzdHJpbmcqLyB7XG5cdHZhciBjb2wgPSBjZWxsLmMgKyAxO1xuXHR2YXIgcz1cIlwiO1xuXHRmb3IoOyBjb2w7IGNvbD0oKGNvbC0xKS8yNil8MCkgcyA9IFN0cmluZy5mcm9tQ2hhckNvZGUoKChjb2wtMSklMjYpICsgNjUpICsgcztcblx0cmV0dXJuIHMgKyAoY2VsbC5yICsgMSk7XG59XG5mdW5jdGlvbiBkZWNvZGVfcmFuZ2UocmFuZ2UvKjpzdHJpbmcqLykvKjpSYW5nZSovIHtcblx0dmFyIGlkeCA9IHJhbmdlLmluZGV4T2YoXCI6XCIpO1xuXHRpZihpZHggPT0gLTEpIHJldHVybiB7IHM6IGRlY29kZV9jZWxsKHJhbmdlKSwgZTogZGVjb2RlX2NlbGwocmFuZ2UpIH07XG5cdHJldHVybiB7IHM6IGRlY29kZV9jZWxsKHJhbmdlLnNsaWNlKDAsIGlkeCkpLCBlOiBkZWNvZGVfY2VsbChyYW5nZS5zbGljZShpZHggKyAxKSkgfTtcbn1cbi8qIyBpZiBvbmx5IG9uZSBhcmcsIGl0IGlzIGFzc3VtZWQgdG8gYmUgYSBSYW5nZS4gIElmIDIgYXJncywgYm90aCBhcmUgY2VsbCBhZGRyZXNzZXMgKi9cbmZ1bmN0aW9uIGVuY29kZV9yYW5nZShjcy8qOkNlbGxBZGRyU3BlY3xSYW5nZSovLGNlLyo6P0NlbGxBZGRyU3BlYyovKS8qOnN0cmluZyovIHtcblx0aWYodHlwZW9mIGNlID09PSAndW5kZWZpbmVkJyB8fCB0eXBlb2YgY2UgPT09ICdudW1iZXInKSB7XG4vKjo6IGlmKCEoY3MgaW5zdGFuY2VvZiBSYW5nZSkpIHRocm93IFwidW5yZWFjaGFibGVcIjsgKi9cblx0XHRyZXR1cm4gZW5jb2RlX3JhbmdlKGNzLnMsIGNzLmUpO1xuXHR9XG4vKjo6IGlmKChjcyBpbnN0YW5jZW9mIFJhbmdlKSkgdGhyb3cgXCJ1bnJlYWNoYWJsZVwiOyAqL1xuXHRpZih0eXBlb2YgY3MgIT09ICdzdHJpbmcnKSBjcyA9IGVuY29kZV9jZWxsKChjcy8qOmFueSovKSk7XG5cdGlmKHR5cGVvZiBjZSAhPT0gJ3N0cmluZycpIGNlID0gZW5jb2RlX2NlbGwoKGNlLyo6YW55Ki8pKTtcbi8qOjogaWYodHlwZW9mIGNzICE9PSAnc3RyaW5nJykgdGhyb3cgXCJ1bnJlYWNoYWJsZVwiOyAqL1xuLyo6OiBpZih0eXBlb2YgY2UgIT09ICdzdHJpbmcnKSB0aHJvdyBcInVucmVhY2hhYmxlXCI7ICovXG5cdHJldHVybiBjcyA9PSBjZSA/IGNzIDogY3MgKyBcIjpcIiArIGNlO1xufVxuXG5mdW5jdGlvbiBzYWZlX2RlY29kZV9yYW5nZShyYW5nZS8qOnN0cmluZyovKS8qOlJhbmdlKi8ge1xuXHR2YXIgbyA9IHtzOntjOjAscjowfSxlOntjOjAscjowfX07XG5cdHZhciBpZHggPSAwLCBpID0gMCwgY2MgPSAwO1xuXHR2YXIgbGVuID0gcmFuZ2UubGVuZ3RoO1xuXHRmb3IoaWR4ID0gMDsgaSA8IGxlbjsgKytpKSB7XG5cdFx0aWYoKGNjPXJhbmdlLmNoYXJDb2RlQXQoaSktNjQpIDwgMSB8fCBjYyA+IDI2KSBicmVhaztcblx0XHRpZHggPSAyNippZHggKyBjYztcblx0fVxuXHRvLnMuYyA9IC0taWR4O1xuXG5cdGZvcihpZHggPSAwOyBpIDwgbGVuOyArK2kpIHtcblx0XHRpZigoY2M9cmFuZ2UuY2hhckNvZGVBdChpKS00OCkgPCAwIHx8IGNjID4gOSkgYnJlYWs7XG5cdFx0aWR4ID0gMTAqaWR4ICsgY2M7XG5cdH1cblx0by5zLnIgPSAtLWlkeDtcblxuXHRpZihpID09PSBsZW4gfHwgY2MgIT0gMTApIHsgby5lLmM9by5zLmM7IG8uZS5yPW8ucy5yOyByZXR1cm4gbzsgfVxuXHQrK2k7XG5cblx0Zm9yKGlkeCA9IDA7IGkgIT0gbGVuOyArK2kpIHtcblx0XHRpZigoY2M9cmFuZ2UuY2hhckNvZGVBdChpKS02NCkgPCAxIHx8IGNjID4gMjYpIGJyZWFrO1xuXHRcdGlkeCA9IDI2KmlkeCArIGNjO1xuXHR9XG5cdG8uZS5jID0gLS1pZHg7XG5cblx0Zm9yKGlkeCA9IDA7IGkgIT0gbGVuOyArK2kpIHtcblx0XHRpZigoY2M9cmFuZ2UuY2hhckNvZGVBdChpKS00OCkgPCAwIHx8IGNjID4gOSkgYnJlYWs7XG5cdFx0aWR4ID0gMTAqaWR4ICsgY2M7XG5cdH1cblx0by5lLnIgPSAtLWlkeDtcblx0cmV0dXJuIG87XG59XG5cbmZ1bmN0aW9uIHNhZmVfZm9ybWF0X2NlbGwoY2VsbC8qOkNlbGwqLywgdi8qOmFueSovKSB7XG5cdHZhciBxID0gKGNlbGwudCA9PSAnZCcgJiYgdiBpbnN0YW5jZW9mIERhdGUpO1xuXHRpZihjZWxsLnogIT0gbnVsbCkgdHJ5IHsgcmV0dXJuIChjZWxsLncgPSBTU0ZfZm9ybWF0KGNlbGwueiwgcSA/IGRhdGVudW0odikgOiB2KSk7IH0gY2F0Y2goZSkgeyB9XG5cdHRyeSB7IHJldHVybiAoY2VsbC53ID0gU1NGX2Zvcm1hdCgoY2VsbC5YRnx8e30pLm51bUZtdElkfHwocSA/IDE0IDogMCksICBxID8gZGF0ZW51bSh2KSA6IHYpKTsgfSBjYXRjaChlKSB7IHJldHVybiAnJyt2OyB9XG59XG5cbmZ1bmN0aW9uIGZvcm1hdF9jZWxsKGNlbGwvKjpDZWxsKi8sIHYvKjphbnkqLywgby8qOmFueSovKSB7XG5cdGlmKGNlbGwgPT0gbnVsbCB8fCBjZWxsLnQgPT0gbnVsbCB8fCBjZWxsLnQgPT0gJ3onKSByZXR1cm4gXCJcIjtcblx0aWYoY2VsbC53ICE9PSB1bmRlZmluZWQpIHJldHVybiBjZWxsLnc7XG5cdGlmKGNlbGwudCA9PSAnZCcgJiYgIWNlbGwueiAmJiBvICYmIG8uZGF0ZU5GKSBjZWxsLnogPSBvLmRhdGVORjtcblx0aWYoY2VsbC50ID09IFwiZVwiKSByZXR1cm4gQkVycltjZWxsLnZdIHx8IGNlbGwudjtcblx0aWYodiA9PSB1bmRlZmluZWQpIHJldHVybiBzYWZlX2Zvcm1hdF9jZWxsKGNlbGwsIGNlbGwudik7XG5cdHJldHVybiBzYWZlX2Zvcm1hdF9jZWxsKGNlbGwsIHYpO1xufVxuXG5mdW5jdGlvbiBzaGVldF90b193b3JrYm9vayhzaGVldC8qOldvcmtzaGVldCovLCBvcHRzKS8qOldvcmtib29rKi8ge1xuXHR2YXIgbiA9IG9wdHMgJiYgb3B0cy5zaGVldCA/IG9wdHMuc2hlZXQgOiBcIlNoZWV0MVwiO1xuXHR2YXIgc2hlZXRzID0ge307IHNoZWV0c1tuXSA9IHNoZWV0O1xuXHRyZXR1cm4geyBTaGVldE5hbWVzOiBbbl0sIFNoZWV0czogc2hlZXRzIH07XG59XG5cbmZ1bmN0aW9uIHNoZWV0X2FkZF9hb2EoX3dzLyo6P1dvcmtzaGVldCovLCBkYXRhLyo6QU9BKi8sIG9wdHMvKjo/YW55Ki8pLyo6V29ya3NoZWV0Ki8ge1xuXHR2YXIgbyA9IG9wdHMgfHwge307XG5cdHZhciBkZW5zZSA9IF93cyA/IEFycmF5LmlzQXJyYXkoX3dzKSA6IG8uZGVuc2U7XG5cdGlmKERFTlNFICE9IG51bGwgJiYgZGVuc2UgPT0gbnVsbCkgZGVuc2UgPSBERU5TRTtcblx0dmFyIHdzLyo6V29ya3NoZWV0Ki8gPSBfd3MgfHwgKGRlbnNlID8gKFtdLyo6YW55Ki8pIDogKHt9Lyo6YW55Ki8pKTtcblx0dmFyIF9SID0gMCwgX0MgPSAwO1xuXHRpZih3cyAmJiBvLm9yaWdpbiAhPSBudWxsKSB7XG5cdFx0aWYodHlwZW9mIG8ub3JpZ2luID09ICdudW1iZXInKSBfUiA9IG8ub3JpZ2luO1xuXHRcdGVsc2Uge1xuXHRcdFx0dmFyIF9vcmlnaW4vKjpDZWxsQWRkcmVzcyovID0gdHlwZW9mIG8ub3JpZ2luID09IFwic3RyaW5nXCIgPyBkZWNvZGVfY2VsbChvLm9yaWdpbikgOiBvLm9yaWdpbjtcblx0XHRcdF9SID0gX29yaWdpbi5yOyBfQyA9IF9vcmlnaW4uYztcblx0XHR9XG5cdFx0aWYoIXdzW1wiIXJlZlwiXSkgd3NbXCIhcmVmXCJdID0gXCJBMTpBMVwiO1xuXHR9XG5cdHZhciByYW5nZS8qOlJhbmdlKi8gPSAoe3M6IHtjOjEwMDAwMDAwLCByOjEwMDAwMDAwfSwgZToge2M6MCwgcjowfX0vKjphbnkqLyk7XG5cdGlmKHdzWychcmVmJ10pIHtcblx0XHR2YXIgX3JhbmdlID0gc2FmZV9kZWNvZGVfcmFuZ2Uod3NbJyFyZWYnXSk7XG5cdFx0cmFuZ2Uucy5jID0gX3JhbmdlLnMuYztcblx0XHRyYW5nZS5zLnIgPSBfcmFuZ2Uucy5yO1xuXHRcdHJhbmdlLmUuYyA9IE1hdGgubWF4KHJhbmdlLmUuYywgX3JhbmdlLmUuYyk7XG5cdFx0cmFuZ2UuZS5yID0gTWF0aC5tYXgocmFuZ2UuZS5yLCBfcmFuZ2UuZS5yKTtcblx0XHRpZihfUiA9PSAtMSkgcmFuZ2UuZS5yID0gX1IgPSBfcmFuZ2UuZS5yICsgMTtcblx0fVxuXHRmb3IodmFyIFIgPSAwOyBSICE9IGRhdGEubGVuZ3RoOyArK1IpIHtcblx0XHRpZighZGF0YVtSXSkgY29udGludWU7XG5cdFx0aWYoIUFycmF5LmlzQXJyYXkoZGF0YVtSXSkpIHRocm93IG5ldyBFcnJvcihcImFvYV90b19zaGVldCBleHBlY3RzIGFuIGFycmF5IG9mIGFycmF5c1wiKTtcblx0XHRmb3IodmFyIEMgPSAwOyBDICE9IGRhdGFbUl0ubGVuZ3RoOyArK0MpIHtcblx0XHRcdGlmKHR5cGVvZiBkYXRhW1JdW0NdID09PSAndW5kZWZpbmVkJykgY29udGludWU7XG5cdFx0XHR2YXIgY2VsbC8qOkNlbGwqLyA9ICh7djogZGF0YVtSXVtDXSB9Lyo6YW55Ki8pO1xuXHRcdFx0dmFyIF9fUiA9IF9SICsgUiwgX19DID0gX0MgKyBDO1xuXHRcdFx0aWYocmFuZ2Uucy5yID4gX19SKSByYW5nZS5zLnIgPSBfX1I7XG5cdFx0XHRpZihyYW5nZS5zLmMgPiBfX0MpIHJhbmdlLnMuYyA9IF9fQztcblx0XHRcdGlmKHJhbmdlLmUuciA8IF9fUikgcmFuZ2UuZS5yID0gX19SO1xuXHRcdFx0aWYocmFuZ2UuZS5jIDwgX19DKSByYW5nZS5lLmMgPSBfX0M7XG5cdFx0XHRpZihkYXRhW1JdW0NdICYmIHR5cGVvZiBkYXRhW1JdW0NdID09PSAnb2JqZWN0JyAmJiAhQXJyYXkuaXNBcnJheShkYXRhW1JdW0NdKSAmJiAhKGRhdGFbUl1bQ10gaW5zdGFuY2VvZiBEYXRlKSkgY2VsbCA9IGRhdGFbUl1bQ107XG5cdFx0XHRlbHNlIHtcblx0XHRcdFx0aWYoQXJyYXkuaXNBcnJheShjZWxsLnYpKSB7IGNlbGwuZiA9IGRhdGFbUl1bQ11bMV07IGNlbGwudiA9IGNlbGwudlswXTsgfVxuXHRcdFx0XHRpZihjZWxsLnYgPT09IG51bGwpIHtcblx0XHRcdFx0XHRpZihjZWxsLmYpIGNlbGwudCA9ICduJztcblx0XHRcdFx0XHRlbHNlIGlmKG8ubnVsbEVycm9yKSB7IGNlbGwudCA9ICdlJzsgY2VsbC52ID0gMDsgfVxuXHRcdFx0XHRcdGVsc2UgaWYoIW8uc2hlZXRTdHVicykgY29udGludWU7XG5cdFx0XHRcdFx0ZWxzZSBjZWxsLnQgPSAneic7XG5cdFx0XHRcdH1cblx0XHRcdFx0ZWxzZSBpZih0eXBlb2YgY2VsbC52ID09PSAnbnVtYmVyJykgY2VsbC50ID0gJ24nO1xuXHRcdFx0XHRlbHNlIGlmKHR5cGVvZiBjZWxsLnYgPT09ICdib29sZWFuJykgY2VsbC50ID0gJ2InO1xuXHRcdFx0XHRlbHNlIGlmKGNlbGwudiBpbnN0YW5jZW9mIERhdGUpIHtcblx0XHRcdFx0XHRjZWxsLnogPSBvLmRhdGVORiB8fCB0YWJsZV9mbXRbMTRdO1xuXHRcdFx0XHRcdGlmKG8uY2VsbERhdGVzKSB7IGNlbGwudCA9ICdkJzsgY2VsbC53ID0gU1NGX2Zvcm1hdChjZWxsLnosIGRhdGVudW0oY2VsbC52KSk7IH1cblx0XHRcdFx0XHRlbHNlIHsgY2VsbC50ID0gJ24nOyBjZWxsLnYgPSBkYXRlbnVtKGNlbGwudik7IGNlbGwudyA9IFNTRl9mb3JtYXQoY2VsbC56LCBjZWxsLnYpOyB9XG5cdFx0XHRcdH1cblx0XHRcdFx0ZWxzZSBjZWxsLnQgPSAncyc7XG5cdFx0XHR9XG5cdFx0XHRpZihkZW5zZSkge1xuXHRcdFx0XHRpZighd3NbX19SXSkgd3NbX19SXSA9IFtdO1xuXHRcdFx0XHRpZih3c1tfX1JdW19fQ10gJiYgd3NbX19SXVtfX0NdLnopIGNlbGwueiA9IHdzW19fUl1bX19DXS56O1xuXHRcdFx0XHR3c1tfX1JdW19fQ10gPSBjZWxsO1xuXHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0dmFyIGNlbGxfcmVmID0gZW5jb2RlX2NlbGwoKHtjOl9fQyxyOl9fUn0vKjphbnkqLykpO1xuXHRcdFx0XHRpZih3c1tjZWxsX3JlZl0gJiYgd3NbY2VsbF9yZWZdLnopIGNlbGwueiA9IHdzW2NlbGxfcmVmXS56O1xuXHRcdFx0XHR3c1tjZWxsX3JlZl0gPSBjZWxsO1xuXHRcdFx0fVxuXHRcdH1cblx0fVxuXHRpZihyYW5nZS5zLmMgPCAxMDAwMDAwMCkgd3NbJyFyZWYnXSA9IGVuY29kZV9yYW5nZShyYW5nZSk7XG5cdHJldHVybiB3cztcbn1cbmZ1bmN0aW9uIGFvYV90b19zaGVldChkYXRhLyo6QU9BKi8sIG9wdHMvKjo/YW55Ki8pLyo6V29ya3NoZWV0Ki8geyByZXR1cm4gc2hlZXRfYWRkX2FvYShudWxsLCBkYXRhLCBvcHRzKTsgfVxuXG5mdW5jdGlvbiBwYXJzZV9JbnQzMkxFKGRhdGEpIHtcblx0cmV0dXJuIGRhdGEucmVhZF9zaGlmdCg0LCAnaScpO1xufVxuZnVuY3Rpb24gd3JpdGVfVUludDMyTEUoeC8qOm51bWJlciovLCBvKSB7XG5cdGlmICghbykgbyA9IG5ld19idWYoNCk7XG5cdG8ud3JpdGVfc2hpZnQoNCwgeCk7XG5cdHJldHVybiBvO1xufVxuXG4vKiBbTVMtWExTQl0gMi41LjE2OCAqL1xuZnVuY3Rpb24gcGFyc2VfWExXaWRlU3RyaW5nKGRhdGEvKjo6LCBsZW5ndGgqLykvKjpzdHJpbmcqLyB7XG5cdHZhciBjY2hDaGFyYWN0ZXJzID0gZGF0YS5yZWFkX3NoaWZ0KDQpO1xuXHRyZXR1cm4gY2NoQ2hhcmFjdGVycyA9PT0gMCA/IFwiXCIgOiBkYXRhLnJlYWRfc2hpZnQoY2NoQ2hhcmFjdGVycywgJ2RiY3MnKTtcbn1cbmZ1bmN0aW9uIHdyaXRlX1hMV2lkZVN0cmluZyhkYXRhLyo6c3RyaW5nKi8sIG8pIHtcblx0dmFyIF9udWxsID0gZmFsc2U7IGlmIChvID09IG51bGwpIHsgX251bGwgPSB0cnVlOyBvID0gbmV3X2J1Zig0ICsgMiAqIGRhdGEubGVuZ3RoKTsgfVxuXHRvLndyaXRlX3NoaWZ0KDQsIGRhdGEubGVuZ3RoKTtcblx0aWYgKGRhdGEubGVuZ3RoID4gMCkgby53cml0ZV9zaGlmdCgwLCBkYXRhLCAnZGJjcycpO1xuXHRyZXR1cm4gX251bGwgPyBvLnNsaWNlKDAsIG8ubCkgOiBvO1xufVxuXG4vKiBbTVMtWExTQl0gMi41LjkxICovXG4vL2Z1bmN0aW9uIHBhcnNlX0xQV2lkZVN0cmluZyhkYXRhLyo6OiwgbGVuZ3RoKi8pLyo6c3RyaW5nKi8ge1xuLy9cdHZhciBjY2hDaGFyYWN0ZXJzID0gZGF0YS5yZWFkX3NoaWZ0KDIpO1xuLy9cdHJldHVybiBjY2hDaGFyYWN0ZXJzID09PSAwID8gXCJcIiA6IGRhdGEucmVhZF9zaGlmdChjY2hDaGFyYWN0ZXJzLCBcInV0ZjE2bGVcIik7XG4vL31cblxuLyogW01TLVhMU0JdIDIuNS4xNDMgKi9cbmZ1bmN0aW9uIHBhcnNlX1N0clJ1bihkYXRhKSB7XG5cdHJldHVybiB7IGljaDogZGF0YS5yZWFkX3NoaWZ0KDIpLCBpZm50OiBkYXRhLnJlYWRfc2hpZnQoMikgfTtcbn1cbmZ1bmN0aW9uIHdyaXRlX1N0clJ1bihydW4sIG8pIHtcblx0aWYgKCFvKSBvID0gbmV3X2J1Zig0KTtcblx0by53cml0ZV9zaGlmdCgyLCBydW4uaWNoIHx8IDApO1xuXHRvLndyaXRlX3NoaWZ0KDIsIHJ1bi5pZm50IHx8IDApO1xuXHRyZXR1cm4gbztcbn1cblxuLyogW01TLVhMU0JdIDIuNS4xMjEgKi9cbmZ1bmN0aW9uIHBhcnNlX1JpY2hTdHIoZGF0YSwgbGVuZ3RoLyo6bnVtYmVyKi8pLyo6WExTdHJpbmcqLyB7XG5cdHZhciBzdGFydCA9IGRhdGEubDtcblx0dmFyIGZsYWdzID0gZGF0YS5yZWFkX3NoaWZ0KDEpO1xuXHR2YXIgc3RyID0gcGFyc2VfWExXaWRlU3RyaW5nKGRhdGEpO1xuXHR2YXIgcmdzU3RyUnVuID0gW107XG5cdHZhciB6ID0gKHsgdDogc3RyLCBoOiBzdHIgfS8qOmFueSovKTtcblx0aWYgKChmbGFncyAmIDEpICE9PSAwKSB7IC8qIGZSaWNoU3RyICovXG5cdFx0LyogVE9ETzogZm9ybWF0dGVkIHN0cmluZyAqL1xuXHRcdHZhciBkd1NpemVTdHJSdW4gPSBkYXRhLnJlYWRfc2hpZnQoNCk7XG5cdFx0Zm9yICh2YXIgaSA9IDA7IGkgIT0gZHdTaXplU3RyUnVuOyArK2kpIHJnc1N0clJ1bi5wdXNoKHBhcnNlX1N0clJ1bihkYXRhKSk7XG5cdFx0ei5yID0gcmdzU3RyUnVuO1xuXHR9XG5cdGVsc2Ugei5yID0gW3sgaWNoOiAwLCBpZm50OiAwIH1dO1xuXHQvL2lmKChmbGFncyAmIDIpICE9PSAwKSB7IC8qIGZFeHRTdHIgKi9cblx0Ly9cdC8qIFRPRE86IHBob25ldGljIHN0cmluZyAqL1xuXHQvL31cblx0ZGF0YS5sID0gc3RhcnQgKyBsZW5ndGg7XG5cdHJldHVybiB6O1xufVxuZnVuY3Rpb24gd3JpdGVfUmljaFN0cihzdHIvKjpYTFN0cmluZyovLCBvLyo6P0Jsb2NrKi8pLyo6QmxvY2sqLyB7XG5cdC8qIFRPRE86IGZvcm1hdHRlZCBzdHJpbmcgKi9cblx0dmFyIF9udWxsID0gZmFsc2U7IGlmIChvID09IG51bGwpIHsgX251bGwgPSB0cnVlOyBvID0gbmV3X2J1ZigxNSArIDQgKiBzdHIudC5sZW5ndGgpOyB9XG5cdG8ud3JpdGVfc2hpZnQoMSwgMCk7XG5cdHdyaXRlX1hMV2lkZVN0cmluZyhzdHIudCwgbyk7XG5cdHJldHVybiBfbnVsbCA/IG8uc2xpY2UoMCwgby5sKSA6IG87XG59XG4vKiBbTVMtWExTQl0gMi40LjMyOCBCcnRDb21tZW50VGV4dCAoUmljaFN0ciB3LzEgcnVuKSAqL1xudmFyIHBhcnNlX0JydENvbW1lbnRUZXh0ID0gcGFyc2VfUmljaFN0cjtcbmZ1bmN0aW9uIHdyaXRlX0JydENvbW1lbnRUZXh0KHN0ci8qOlhMU3RyaW5nKi8sIG8vKjo/QmxvY2sqLykvKjpCbG9jayovIHtcblx0LyogVE9ETzogZm9ybWF0dGVkIHN0cmluZyAqL1xuXHR2YXIgX251bGwgPSBmYWxzZTsgaWYgKG8gPT0gbnVsbCkgeyBfbnVsbCA9IHRydWU7IG8gPSBuZXdfYnVmKDIzICsgNCAqIHN0ci50Lmxlbmd0aCk7IH1cblx0by53cml0ZV9zaGlmdCgxLCAxKTtcblx0d3JpdGVfWExXaWRlU3RyaW5nKHN0ci50LCBvKTtcblx0by53cml0ZV9zaGlmdCg0LCAxKTtcblx0d3JpdGVfU3RyUnVuKHsgaWNoOiAwLCBpZm50OiAwIH0sIG8pO1xuXHRyZXR1cm4gX251bGwgPyBvLnNsaWNlKDAsIG8ubCkgOiBvO1xufVxuXG4vKiBbTVMtWExTQl0gMi41LjkgKi9cbmZ1bmN0aW9uIHBhcnNlX1hMU0JDZWxsKGRhdGEpLyo6YW55Ki8ge1xuXHR2YXIgY29sID0gZGF0YS5yZWFkX3NoaWZ0KDQpO1xuXHR2YXIgaVN0eWxlUmVmID0gZGF0YS5yZWFkX3NoaWZ0KDIpO1xuXHRpU3R5bGVSZWYgKz0gZGF0YS5yZWFkX3NoaWZ0KDEpIDw8IDE2O1xuXHRkYXRhLmwrKzsgLy92YXIgZlBoU2hvdyA9IGRhdGEucmVhZF9zaGlmdCgxKTtcblx0cmV0dXJuIHsgYzogY29sLCBpU3R5bGVSZWY6IGlTdHlsZVJlZiB9O1xufVxuZnVuY3Rpb24gd3JpdGVfWExTQkNlbGwoY2VsbC8qOmFueSovLCBvLyo6P0Jsb2NrKi8pIHtcblx0aWYgKG8gPT0gbnVsbCkgbyA9IG5ld19idWYoOCk7XG5cdG8ud3JpdGVfc2hpZnQoLTQsIGNlbGwuYyk7XG5cdG8ud3JpdGVfc2hpZnQoMywgY2VsbC5pU3R5bGVSZWYgfHwgY2VsbC5zKTtcblx0by53cml0ZV9zaGlmdCgxLCAwKTsgLyogZlBoU2hvdyAqL1xuXHRyZXR1cm4gbztcbn1cblxuLyogU2hvcnQgWExTQiBDZWxsIGRvZXMgbm90IGluY2x1ZGUgY29sdW1uICovXG5mdW5jdGlvbiBwYXJzZV9YTFNCU2hvcnRDZWxsKGRhdGEpLyo6YW55Ki8ge1xuXHR2YXIgaVN0eWxlUmVmID0gZGF0YS5yZWFkX3NoaWZ0KDIpO1xuXHRpU3R5bGVSZWYgKz0gZGF0YS5yZWFkX3NoaWZ0KDEpIDw8MTY7XG5cdGRhdGEubCsrOyAvL3ZhciBmUGhTaG93ID0gZGF0YS5yZWFkX3NoaWZ0KDEpO1xuXHRyZXR1cm4geyBjOi0xLCBpU3R5bGVSZWY6IGlTdHlsZVJlZiB9O1xufVxuZnVuY3Rpb24gd3JpdGVfWExTQlNob3J0Q2VsbChjZWxsLyo6YW55Ki8sIG8vKjo/QmxvY2sqLykge1xuXHRpZihvID09IG51bGwpIG8gPSBuZXdfYnVmKDQpO1xuXHRvLndyaXRlX3NoaWZ0KDMsIGNlbGwuaVN0eWxlUmVmIHx8IGNlbGwucyk7XG5cdG8ud3JpdGVfc2hpZnQoMSwgMCk7IC8qIGZQaFNob3cgKi9cblx0cmV0dXJuIG87XG59XG5cbi8qIFtNUy1YTFNCXSAyLjUuMjEgKi9cbnZhciBwYXJzZV9YTFNCQ29kZU5hbWUgPSBwYXJzZV9YTFdpZGVTdHJpbmc7XG52YXIgd3JpdGVfWExTQkNvZGVOYW1lID0gd3JpdGVfWExXaWRlU3RyaW5nO1xuXG4vKiBbTVMtWExTQl0gMi41LjE2NiAqL1xuZnVuY3Rpb24gcGFyc2VfWExOdWxsYWJsZVdpZGVTdHJpbmcoZGF0YS8qOjosIGxlbmd0aCovKS8qOnN0cmluZyovIHtcblx0dmFyIGNjaENoYXJhY3RlcnMgPSBkYXRhLnJlYWRfc2hpZnQoNCk7XG5cdHJldHVybiBjY2hDaGFyYWN0ZXJzID09PSAwIHx8IGNjaENoYXJhY3RlcnMgPT09IDB4RkZGRkZGRkYgPyBcIlwiIDogZGF0YS5yZWFkX3NoaWZ0KGNjaENoYXJhY3RlcnMsICdkYmNzJyk7XG59XG5mdW5jdGlvbiB3cml0ZV9YTE51bGxhYmxlV2lkZVN0cmluZyhkYXRhLyo6c3RyaW5nKi8sIG8pIHtcblx0dmFyIF9udWxsID0gZmFsc2U7IGlmIChvID09IG51bGwpIHsgX251bGwgPSB0cnVlOyBvID0gbmV3X2J1ZigxMjcpOyB9XG5cdG8ud3JpdGVfc2hpZnQoNCwgZGF0YS5sZW5ndGggPiAwID8gZGF0YS5sZW5ndGggOiAweEZGRkZGRkZGKTtcblx0aWYgKGRhdGEubGVuZ3RoID4gMCkgby53cml0ZV9zaGlmdCgwLCBkYXRhLCAnZGJjcycpO1xuXHRyZXR1cm4gX251bGwgPyBvLnNsaWNlKDAsIG8ubCkgOiBvO1xufVxuXG4vKiBbTVMtWExTQl0gMi41LjE2NSAqL1xudmFyIHBhcnNlX1hMTmFtZVdpZGVTdHJpbmcgPSBwYXJzZV9YTFdpZGVTdHJpbmc7XG4vL3ZhciB3cml0ZV9YTE5hbWVXaWRlU3RyaW5nID0gd3JpdGVfWExXaWRlU3RyaW5nO1xuXG4vKiBbTVMtWExTQl0gMi41LjExNCAqL1xudmFyIHBhcnNlX1JlbElEID0gcGFyc2VfWExOdWxsYWJsZVdpZGVTdHJpbmc7XG52YXIgd3JpdGVfUmVsSUQgPSB3cml0ZV9YTE51bGxhYmxlV2lkZVN0cmluZztcblxuXG4vKiBbTVMtWExTXSAyLjUuMjE3IDsgW01TLVhMU0JdIDIuNS4xMjIgKi9cbmZ1bmN0aW9uIHBhcnNlX1JrTnVtYmVyKGRhdGEpLyo6bnVtYmVyKi8ge1xuXHR2YXIgYiA9IGRhdGEuc2xpY2UoZGF0YS5sLCBkYXRhLmwgKyA0KTtcblx0dmFyIGZYMTAwID0gKGJbMF0gJiAxKSwgZkludCA9IChiWzBdICYgMik7XG5cdGRhdGEubCArPSA0O1xuXHR2YXIgUksgPSBmSW50ID09PSAwID8gX19kb3VibGUoWzAsIDAsIDAsIDAsIChiWzBdICYgMHhGQyksIGJbMV0sIGJbMl0sIGJbM11dLCAwKSA6IF9fcmVhZEludDMyTEUoYiwgMCkgPj4gMjtcblx0cmV0dXJuIGZYMTAwID8gKFJLIC8gMTAwKSA6IFJLO1xufVxuZnVuY3Rpb24gd3JpdGVfUmtOdW1iZXIoZGF0YS8qOm51bWJlciovLCBvKSB7XG5cdGlmIChvID09IG51bGwpIG8gPSBuZXdfYnVmKDQpO1xuXHR2YXIgZlgxMDAgPSAwLCBmSW50ID0gMCwgZDEwMCA9IGRhdGEgKiAxMDA7XG5cdGlmICgoZGF0YSA9PSAoZGF0YSB8IDApKSAmJiAoZGF0YSA+PSAtKDEgPDwgMjkpKSAmJiAoZGF0YSA8ICgxIDw8IDI5KSkpIHsgZkludCA9IDE7IH1cblx0ZWxzZSBpZiAoKGQxMDAgPT0gKGQxMDAgfCAwKSkgJiYgKGQxMDAgPj0gLSgxIDw8IDI5KSkgJiYgKGQxMDAgPCAoMSA8PCAyOSkpKSB7IGZJbnQgPSAxOyBmWDEwMCA9IDE7IH1cblx0aWYgKGZJbnQpIG8ud3JpdGVfc2hpZnQoLTQsICgoZlgxMDAgPyBkMTAwIDogZGF0YSkgPDwgMikgKyAoZlgxMDAgKyAyKSk7XG5cdGVsc2UgdGhyb3cgbmV3IEVycm9yKFwidW5zdXBwb3J0ZWQgUmtOdW1iZXIgXCIgKyBkYXRhKTsgLy8gVE9ET1xufVxuXG5cbi8qIFtNUy1YTFNCXSAyLjUuMTE3IFJmWCAqL1xuZnVuY3Rpb24gcGFyc2VfUmZYKGRhdGEgLyo6OiwgbGVuZ3RoKi8pLyo6UmFuZ2UqLyB7XG5cdHZhciBjZWxsLyo6UmFuZ2UqLyA9ICh7IHM6IHt9LCBlOiB7fSB9Lyo6YW55Ki8pO1xuXHRjZWxsLnMuciA9IGRhdGEucmVhZF9zaGlmdCg0KTtcblx0Y2VsbC5lLnIgPSBkYXRhLnJlYWRfc2hpZnQoNCk7XG5cdGNlbGwucy5jID0gZGF0YS5yZWFkX3NoaWZ0KDQpO1xuXHRjZWxsLmUuYyA9IGRhdGEucmVhZF9zaGlmdCg0KTtcblx0cmV0dXJuIGNlbGw7XG59XG5mdW5jdGlvbiB3cml0ZV9SZlgoci8qOlJhbmdlKi8sIG8pIHtcblx0aWYgKCFvKSBvID0gbmV3X2J1ZigxNik7XG5cdG8ud3JpdGVfc2hpZnQoNCwgci5zLnIpO1xuXHRvLndyaXRlX3NoaWZ0KDQsIHIuZS5yKTtcblx0by53cml0ZV9zaGlmdCg0LCByLnMuYyk7XG5cdG8ud3JpdGVfc2hpZnQoNCwgci5lLmMpO1xuXHRyZXR1cm4gbztcbn1cblxuLyogW01TLVhMU0JdIDIuNS4xNTMgVW5jaGVja2VkUmZYICovXG52YXIgcGFyc2VfVW5jaGVja2VkUmZYID0gcGFyc2VfUmZYO1xudmFyIHdyaXRlX1VuY2hlY2tlZFJmWCA9IHdyaXRlX1JmWDtcblxuLyogW01TLVhMU0JdIDIuNS4xNTUgVW5jaGVja2VkU3FSZlggKi9cbi8vZnVuY3Rpb24gcGFyc2VfVW5jaGVja2VkU3FSZlgoZGF0YSkge1xuLy9cdHZhciBjbnQgPSBkYXRhLnJlYWRfc2hpZnQoNCk7XG4vL1x0dmFyIG91dCA9IFtdO1xuLy9cdGZvcih2YXIgaSA9IDA7IGkgPCBjbnQ7ICsraSkge1xuLy9cdFx0dmFyIHJuZyA9IHBhcnNlX1VuY2hlY2tlZFJmWChkYXRhKTtcbi8vXHRcdG91dC5wdXNoKGVuY29kZV9yYW5nZShybmcpKTtcbi8vXHR9XG4vL1x0cmV0dXJuIG91dC5qb2luKFwiLFwiKTtcbi8vfVxuLy9mdW5jdGlvbiB3cml0ZV9VbmNoZWNrZWRTcVJmWChzcXJmeC8qOnN0cmluZyovKSB7XG4vL1x0dmFyIHBhcnRzID0gc3FyZnguc3BsaXQoL1xccyosXFxzKi8pO1xuLy9cdHZhciBvID0gbmV3X2J1Zig0KTsgby53cml0ZV9zaGlmdCg0LCBwYXJ0cy5sZW5ndGgpO1xuLy9cdHZhciBvdXQgPSBbb107XG4vL1x0cGFydHMuZm9yRWFjaChmdW5jdGlvbihybmcpIHtcbi8vXHRcdG91dC5wdXNoKHdyaXRlX1VuY2hlY2tlZFJmWChzYWZlX2RlY29kZV9yYW5nZShybmcpKSk7XG4vL1x0fSk7XG4vL1x0cmV0dXJuIGJjb25jYXQob3V0KTtcbi8vfVxuXG4vKiBbTVMtWExTXSAyLjUuMzQyIDsgW01TLVhMU0JdIDIuNS4xNzEgKi9cbi8qIFRPRE86IGVycm9yIGNoZWNraW5nLCBOYU4gYW5kIEluZmluaXR5IHZhbHVlcyBhcmUgbm90IHZhbGlkIFhudW0gKi9cbmZ1bmN0aW9uIHBhcnNlX1hudW0oZGF0YS8qOjosIGxlbmd0aCovKSB7XG5cdGlmKGRhdGEubGVuZ3RoIC0gZGF0YS5sIDwgOCkgdGhyb3cgXCJYTFMgWG51bSBCdWZmZXIgdW5kZXJmbG93XCI7XG5cdHJldHVybiBkYXRhLnJlYWRfc2hpZnQoOCwgJ2YnKTtcbn1cbmZ1bmN0aW9uIHdyaXRlX1hudW0oZGF0YSwgbykgeyByZXR1cm4gKG8gfHwgbmV3X2J1Zig4KSkud3JpdGVfc2hpZnQoOCwgZGF0YSwgJ2YnKTsgfVxuXG4vKiBbTVMtWExTQl0gMi40LjMyNCBCcnRDb2xvciAqL1xuZnVuY3Rpb24gcGFyc2VfQnJ0Q29sb3IoZGF0YS8qOjosIGxlbmd0aCovKSB7XG5cdHZhciBvdXQgPSB7fTtcblx0dmFyIGQgPSBkYXRhLnJlYWRfc2hpZnQoMSk7XG5cblx0Ly92YXIgZlZhbGlkUkdCID0gZCAmIDE7XG5cdHZhciB4Q29sb3JUeXBlID0gZCA+Pj4gMTtcblxuXHR2YXIgaW5kZXggPSBkYXRhLnJlYWRfc2hpZnQoMSk7XG5cdHZhciBuVFMgPSBkYXRhLnJlYWRfc2hpZnQoMiwgJ2knKTtcblx0dmFyIGJSID0gZGF0YS5yZWFkX3NoaWZ0KDEpO1xuXHR2YXIgYkcgPSBkYXRhLnJlYWRfc2hpZnQoMSk7XG5cdHZhciBiQiA9IGRhdGEucmVhZF9zaGlmdCgxKTtcblx0ZGF0YS5sKys7IC8vdmFyIGJBbHBoYSA9IGRhdGEucmVhZF9zaGlmdCgxKTtcblxuXHRzd2l0Y2ggKHhDb2xvclR5cGUpIHtcblx0XHRjYXNlIDA6IG91dC5hdXRvID0gMTsgYnJlYWs7XG5cdFx0Y2FzZSAxOlxuXHRcdFx0b3V0LmluZGV4ID0gaW5kZXg7XG5cdFx0XHR2YXIgaWN2ID0gWExTSWN2W2luZGV4XTtcblx0XHRcdC8qIGF1dG9tYXRpYyBwc2V1ZG8gaW5kZXggODEgKi9cblx0XHRcdGlmIChpY3YpIG91dC5yZ2IgPSByZ2IySGV4KGljdik7XG5cdFx0XHRicmVhaztcblx0XHRjYXNlIDI6XG5cdFx0XHQvKiBpZighZlZhbGlkUkdCKSB0aHJvdyBuZXcgRXJyb3IoXCJpbnZhbGlkXCIpOyAqL1xuXHRcdFx0b3V0LnJnYiA9IHJnYjJIZXgoW2JSLCBiRywgYkJdKTtcblx0XHRcdGJyZWFrO1xuXHRcdGNhc2UgMzogb3V0LnRoZW1lID0gaW5kZXg7IGJyZWFrO1xuXHR9XG5cdGlmIChuVFMgIT0gMCkgb3V0LnRpbnQgPSBuVFMgPiAwID8gblRTIC8gMzI3NjcgOiBuVFMgLyAzMjc2ODtcblxuXHRyZXR1cm4gb3V0O1xufVxuZnVuY3Rpb24gd3JpdGVfQnJ0Q29sb3IoY29sb3IsIG8pIHtcblx0aWYgKCFvKSBvID0gbmV3X2J1Zig4KTtcblx0aWYgKCFjb2xvciB8fCBjb2xvci5hdXRvKSB7IG8ud3JpdGVfc2hpZnQoNCwgMCk7IG8ud3JpdGVfc2hpZnQoNCwgMCk7IHJldHVybiBvOyB9XG5cdGlmIChjb2xvci5pbmRleCAhPSBudWxsKSB7XG5cdFx0by53cml0ZV9zaGlmdCgxLCAweDAyKTtcblx0XHRvLndyaXRlX3NoaWZ0KDEsIGNvbG9yLmluZGV4KTtcblx0fSBlbHNlIGlmIChjb2xvci50aGVtZSAhPSBudWxsKSB7XG5cdFx0by53cml0ZV9zaGlmdCgxLCAweDA2KTtcblx0XHRvLndyaXRlX3NoaWZ0KDEsIGNvbG9yLnRoZW1lKTtcblx0fSBlbHNlIHtcblx0XHRvLndyaXRlX3NoaWZ0KDEsIDB4MDUpO1xuXHRcdG8ud3JpdGVfc2hpZnQoMSwgMCk7XG5cdH1cblx0dmFyIG5UUyA9IGNvbG9yLnRpbnQgfHwgMDtcblx0aWYgKG5UUyA+IDApIG5UUyAqPSAzMjc2Nztcblx0ZWxzZSBpZiAoblRTIDwgMCkgblRTICo9IDMyNzY4O1xuXHRvLndyaXRlX3NoaWZ0KDIsIG5UUyk7XG5cdGlmICghY29sb3IucmdiIHx8IGNvbG9yLnRoZW1lICE9IG51bGwpIHtcblx0XHRvLndyaXRlX3NoaWZ0KDIsIDApO1xuXHRcdG8ud3JpdGVfc2hpZnQoMSwgMCk7XG5cdFx0by53cml0ZV9zaGlmdCgxLCAwKTtcblx0fSBlbHNlIHtcblx0XHR2YXIgcmdiID0gKGNvbG9yLnJnYiB8fCAnRkZGRkZGJyk7XG5cdFx0aWYgKHR5cGVvZiByZ2IgPT0gJ251bWJlcicpIHJnYiA9IChcIjAwMDAwMFwiICsgcmdiLnRvU3RyaW5nKDE2KSkuc2xpY2UoLTYpO1xuXHRcdG8ud3JpdGVfc2hpZnQoMSwgcGFyc2VJbnQocmdiLnNsaWNlKDAsIDIpLCAxNikpO1xuXHRcdG8ud3JpdGVfc2hpZnQoMSwgcGFyc2VJbnQocmdiLnNsaWNlKDIsIDQpLCAxNikpO1xuXHRcdG8ud3JpdGVfc2hpZnQoMSwgcGFyc2VJbnQocmdiLnNsaWNlKDQsIDYpLCAxNikpO1xuXHRcdG8ud3JpdGVfc2hpZnQoMSwgMHhGRik7XG5cdH1cblx0cmV0dXJuIG87XG59XG5cbi8qIFtNUy1YTFNCXSAyLjUuNTIgKi9cbmZ1bmN0aW9uIHBhcnNlX0ZvbnRGbGFncyhkYXRhLyo6OiwgbGVuZ3RoLCBvcHRzKi8pIHtcblx0dmFyIGQgPSBkYXRhLnJlYWRfc2hpZnQoMSk7XG5cdGRhdGEubCsrO1xuXHR2YXIgb3V0ID0ge1xuXHRcdGZCb2xkOiBkICYgMHgwMSxcblx0XHRmSXRhbGljOiBkICYgMHgwMixcblx0XHRmVW5kZXJsaW5lOiBkICYgMHgwNCxcblx0XHRmU3RyaWtlb3V0OiBkICYgMHgwOCxcblx0XHRmT3V0bGluZTogZCAmIDB4MTAsXG5cdFx0ZlNoYWRvdzogZCAmIDB4MjAsXG5cdFx0ZkNvbmRlbnNlOiBkICYgMHg0MCxcblx0XHRmRXh0ZW5kOiBkICYgMHg4MFxuXHR9O1xuXHRyZXR1cm4gb3V0O1xufVxuZnVuY3Rpb24gd3JpdGVfRm9udEZsYWdzKGZvbnQsIG8pIHtcblx0aWYgKCFvKSBvID0gbmV3X2J1ZigyKTtcblx0dmFyIGdyYml0ID1cblx0XHQoZm9udC5pdGFsaWMgPyAweDAyIDogMCkgfFxuXHRcdChmb250LnN0cmlrZSA/IDB4MDggOiAwKSB8XG5cdFx0KGZvbnQub3V0bGluZSA/IDB4MTAgOiAwKSB8XG5cdFx0KGZvbnQuc2hhZG93ID8gMHgyMCA6IDApIHxcblx0XHQoZm9udC5jb25kZW5zZSA/IDB4NDAgOiAwKSB8XG5cdFx0KGZvbnQuZXh0ZW5kID8gMHg4MCA6IDApO1xuXHRvLndyaXRlX3NoaWZ0KDEsIGdyYml0KTtcblx0by53cml0ZV9zaGlmdCgxLCAwKTtcblx0cmV0dXJuIG87XG59XG5cbi8qIFtNUy1PTEVEU10gMi4zLjEgYW5kIDIuMy4yICovXG5mdW5jdGlvbiBwYXJzZV9DbGlwYm9hcmRGb3JtYXRPclN0cmluZyhvLCB3Lyo6bnVtYmVyKi8pLyo6c3RyaW5nKi8ge1xuXHQvLyAkRmxvd0lnbm9yZVxuXHR2YXIgQ2xpcEZtdCA9IHsgMjogXCJCSVRNQVBcIiwgMzogXCJNRVRBRklMRVBJQ1RcIiwgODogXCJESUJcIiwgMTQ6IFwiRU5ITUVUQUZJTEVcIiB9O1xuXHR2YXIgbS8qOm51bWJlciovID0gby5yZWFkX3NoaWZ0KDQpO1xuXHRzd2l0Y2ggKG0pIHtcblx0XHRjYXNlIDB4MDAwMDAwMDA6IHJldHVybiBcIlwiO1xuXHRcdGNhc2UgMHhmZmZmZmZmZjogY2FzZSAweGZmZmZmZmZlOiByZXR1cm4gQ2xpcEZtdFtvLnJlYWRfc2hpZnQoNCldIHx8IFwiXCI7XG5cdH1cblx0aWYgKG0gPiAweDE5MCkgdGhyb3cgbmV3IEVycm9yKFwiVW5zdXBwb3J0ZWQgQ2xpcGJvYXJkOiBcIiArIG0udG9TdHJpbmcoMTYpKTtcblx0by5sIC09IDQ7XG5cdHJldHVybiBvLnJlYWRfc2hpZnQoMCwgdyA9PSAxID8gXCJscHN0clwiIDogXCJscHdzdHJcIik7XG59XG5mdW5jdGlvbiBwYXJzZV9DbGlwYm9hcmRGb3JtYXRPckFuc2lTdHJpbmcobykgeyByZXR1cm4gcGFyc2VfQ2xpcGJvYXJkRm9ybWF0T3JTdHJpbmcobywgMSk7IH1cbmZ1bmN0aW9uIHBhcnNlX0NsaXBib2FyZEZvcm1hdE9yVW5pY29kZVN0cmluZyhvKSB7IHJldHVybiBwYXJzZV9DbGlwYm9hcmRGb3JtYXRPclN0cmluZyhvLCAyKTsgfVxuXG4vKiBbTVMtT0xFUFNdIDIuMiBQcm9wZXJ0eVR5cGUgKi9cbi8vIE5vdGU6IHNvbWUgdHJlZSBzaGFrZXJzIGNhbm5vdCBoYW5kbGUgVlRfVkVDVE9SIHwgJENPTlNULCBoZW5jZSBleHRyYSB2YXJzXG4vL3ZhciBWVF9FTVBUWSAgICA9IDB4MDAwMDtcbi8vdmFyIFZUX05VTEwgICAgID0gMHgwMDAxO1xudmFyIFZUX0kyICAgICAgID0gMHgwMDAyO1xudmFyIFZUX0k0ICAgICAgID0gMHgwMDAzO1xuLy92YXIgVlRfUjQgICAgICAgPSAweDAwMDQ7XG4vL3ZhciBWVF9SOCAgICAgICA9IDB4MDAwNTtcbi8vdmFyIFZUX0NZICAgICAgID0gMHgwMDA2O1xuLy92YXIgVlRfREFURSAgICAgPSAweDAwMDc7XG4vL3ZhciBWVF9CU1RSICAgICA9IDB4MDAwODtcbi8vdmFyIFZUX0VSUk9SICAgID0gMHgwMDBBO1xudmFyIFZUX0JPT0wgICAgID0gMHgwMDBCO1xudmFyIFZUX1ZBUklBTlQgID0gMHgwMDBDO1xuLy92YXIgVlRfREVDSU1BTCAgPSAweDAwMEU7XG4vL3ZhciBWVF9JMSAgICAgICA9IDB4MDAxMDtcbi8vdmFyIFZUX1VJMSAgICAgID0gMHgwMDExO1xuLy92YXIgVlRfVUkyICAgICAgPSAweDAwMTI7XG52YXIgVlRfVUk0ICAgICAgPSAweDAwMTM7XG4vL3ZhciBWVF9JOCAgICAgICA9IDB4MDAxNDtcbi8vdmFyIFZUX1VJOCAgICAgID0gMHgwMDE1O1xuLy92YXIgVlRfSU5UICAgICAgPSAweDAwMTY7XG4vL3ZhciBWVF9VSU5UICAgICA9IDB4MDAxNztcbnZhciBWVF9MUFNUUiAgICA9IDB4MDAxRTtcbi8vdmFyIFZUX0xQV1NUUiAgID0gMHgwMDFGO1xudmFyIFZUX0ZJTEVUSU1FID0gMHgwMDQwO1xudmFyIFZUX0JMT0IgICAgID0gMHgwMDQxO1xuLy92YXIgVlRfU1RSRUFNICAgPSAweDAwNDI7XG4vL3ZhciBWVF9TVE9SQUdFICA9IDB4MDA0Mztcbi8vdmFyIFZUX1NUUkVBTUVEX09iamVjdCAgPSAweDAwNDQ7XG4vL3ZhciBWVF9TVE9SRURfT2JqZWN0ICAgID0gMHgwMDQ1O1xuLy92YXIgVlRfQkxPQl9PYmplY3QgICAgICA9IDB4MDA0NjtcbnZhciBWVF9DRiAgICAgICA9IDB4MDA0Nztcbi8vdmFyIFZUX0NMU0lEICAgID0gMHgwMDQ4O1xuLy92YXIgVlRfVkVSU0lPTkVEX1NUUkVBTSA9IDB4MDA0OTtcbnZhciBWVF9WRUNUT1IgICA9IDB4MTAwMDtcbnZhciBWVF9WRUNUT1JfVkFSSUFOVCA9IDB4MTAwQztcbnZhciBWVF9WRUNUT1JfTFBTVFIgICA9IDB4MTAxRTtcbi8vdmFyIFZUX0FSUkFZICAgID0gMHgyMDAwO1xuXG52YXIgVlRfU1RSSU5HICAgPSAweDAwNTA7IC8vIDIuMy4zLjEuMTEgVnRTdHJpbmdcbnZhciBWVF9VU1RSICAgICA9IDB4MDA1MTsgLy8gMi4zLjMuMS4xMiBWdFVuYWxpZ25lZFN0cmluZ1xudmFyIFZUX0NVU1RPTSAgID0gW1ZUX1NUUklORywgVlRfVVNUUl07XG5cbi8qIFtNUy1PU0hBUkVEXSAyLjMuMy4yLjIuMSBEb2N1bWVudCBTdW1tYXJ5IEluZm9ybWF0aW9uIFBJRERTSSAqL1xudmFyIERvY1N1bW1hcnlQSUREU0kgPSB7XG5cdC8qOjpbKi8weDAxLyo6Ol0qLzogeyBuOiAnQ29kZVBhZ2UnLCB0OiBWVF9JMiB9LFxuXHQvKjo6WyovMHgwMi8qOjpdKi86IHsgbjogJ0NhdGVnb3J5JywgdDogVlRfU1RSSU5HIH0sXG5cdC8qOjpbKi8weDAzLyo6Ol0qLzogeyBuOiAnUHJlc2VudGF0aW9uRm9ybWF0JywgdDogVlRfU1RSSU5HIH0sXG5cdC8qOjpbKi8weDA0Lyo6Ol0qLzogeyBuOiAnQnl0ZUNvdW50JywgdDogVlRfSTQgfSxcblx0Lyo6OlsqLzB4MDUvKjo6XSovOiB7IG46ICdMaW5lQ291bnQnLCB0OiBWVF9JNCB9LFxuXHQvKjo6WyovMHgwNi8qOjpdKi86IHsgbjogJ1BhcmFncmFwaENvdW50JywgdDogVlRfSTQgfSxcblx0Lyo6OlsqLzB4MDcvKjo6XSovOiB7IG46ICdTbGlkZUNvdW50JywgdDogVlRfSTQgfSxcblx0Lyo6OlsqLzB4MDgvKjo6XSovOiB7IG46ICdOb3RlQ291bnQnLCB0OiBWVF9JNCB9LFxuXHQvKjo6WyovMHgwOS8qOjpdKi86IHsgbjogJ0hpZGRlbkNvdW50JywgdDogVlRfSTQgfSxcblx0Lyo6OlsqLzB4MGEvKjo6XSovOiB7IG46ICdNdWx0aW1lZGlhQ2xpcENvdW50JywgdDogVlRfSTQgfSxcblx0Lyo6OlsqLzB4MGIvKjo6XSovOiB7IG46ICdTY2FsZUNyb3AnLCB0OiBWVF9CT09MIH0sXG5cdC8qOjpbKi8weDBjLyo6Ol0qLzogeyBuOiAnSGVhZGluZ1BhaXJzJywgdDogVlRfVkVDVE9SX1ZBUklBTlQgLyogVlRfVkVDVE9SIHwgVlRfVkFSSUFOVCAqLyB9LFxuXHQvKjo6WyovMHgwZC8qOjpdKi86IHsgbjogJ1RpdGxlc09mUGFydHMnLCB0OiBWVF9WRUNUT1JfTFBTVFIgLyogVlRfVkVDVE9SIHwgVlRfTFBTVFIgKi8gfSxcblx0Lyo6OlsqLzB4MGUvKjo6XSovOiB7IG46ICdNYW5hZ2VyJywgdDogVlRfU1RSSU5HIH0sXG5cdC8qOjpbKi8weDBmLyo6Ol0qLzogeyBuOiAnQ29tcGFueScsIHQ6IFZUX1NUUklORyB9LFxuXHQvKjo6WyovMHgxMC8qOjpdKi86IHsgbjogJ0xpbmtzVXBUb0RhdGUnLCB0OiBWVF9CT09MIH0sXG5cdC8qOjpbKi8weDExLyo6Ol0qLzogeyBuOiAnQ2hhcmFjdGVyQ291bnQnLCB0OiBWVF9JNCB9LFxuXHQvKjo6WyovMHgxMy8qOjpdKi86IHsgbjogJ1NoYXJlZERvYycsIHQ6IFZUX0JPT0wgfSxcblx0Lyo6OlsqLzB4MTYvKjo6XSovOiB7IG46ICdIeXBlcmxpbmtzQ2hhbmdlZCcsIHQ6IFZUX0JPT0wgfSxcblx0Lyo6OlsqLzB4MTcvKjo6XSovOiB7IG46ICdBcHBWZXJzaW9uJywgdDogVlRfSTQsIHA6ICd2ZXJzaW9uJyB9LFxuXHQvKjo6WyovMHgxOC8qOjpdKi86IHsgbjogJ0RpZ1NpZycsIHQ6IFZUX0JMT0IgfSxcblx0Lyo6OlsqLzB4MUEvKjo6XSovOiB7IG46ICdDb250ZW50VHlwZScsIHQ6IFZUX1NUUklORyB9LFxuXHQvKjo6WyovMHgxQi8qOjpdKi86IHsgbjogJ0NvbnRlbnRTdGF0dXMnLCB0OiBWVF9TVFJJTkcgfSxcblx0Lyo6OlsqLzB4MUMvKjo6XSovOiB7IG46ICdMYW5ndWFnZScsIHQ6IFZUX1NUUklORyB9LFxuXHQvKjo6WyovMHgxRC8qOjpdKi86IHsgbjogJ1ZlcnNpb24nLCB0OiBWVF9TVFJJTkcgfSxcblx0Lyo6OlsqLzB4RkYvKjo6XSovOiB7fSxcblx0LyogW01TLU9MRVBTXSAyLjE4ICovXG5cdC8qOjpbKi8weDgwMDAwMDAwLyo6Ol0qLzogeyBuOiAnTG9jYWxlJywgdDogVlRfVUk0IH0sXG5cdC8qOjpbKi8weDgwMDAwMDAzLyo6Ol0qLzogeyBuOiAnQmVoYXZpb3InLCB0OiBWVF9VSTQgfSxcblx0Lyo6OlsqLzB4NzI2MjcyNjIvKjo6XSovOiB7fVxufTtcblxuLyogW01TLU9TSEFSRURdIDIuMy4zLjIuMS4xIFN1bW1hcnkgSW5mb3JtYXRpb24gUHJvcGVydHkgU2V0IFBJRFNJICovXG52YXIgU3VtbWFyeVBJRFNJID0ge1xuXHQvKjo6WyovMHgwMS8qOjpdKi86IHsgbjogJ0NvZGVQYWdlJywgdDogVlRfSTIgfSxcblx0Lyo6OlsqLzB4MDIvKjo6XSovOiB7IG46ICdUaXRsZScsIHQ6IFZUX1NUUklORyB9LFxuXHQvKjo6WyovMHgwMy8qOjpdKi86IHsgbjogJ1N1YmplY3QnLCB0OiBWVF9TVFJJTkcgfSxcblx0Lyo6OlsqLzB4MDQvKjo6XSovOiB7IG46ICdBdXRob3InLCB0OiBWVF9TVFJJTkcgfSxcblx0Lyo6OlsqLzB4MDUvKjo6XSovOiB7IG46ICdLZXl3b3JkcycsIHQ6IFZUX1NUUklORyB9LFxuXHQvKjo6WyovMHgwNi8qOjpdKi86IHsgbjogJ0NvbW1lbnRzJywgdDogVlRfU1RSSU5HIH0sXG5cdC8qOjpbKi8weDA3Lyo6Ol0qLzogeyBuOiAnVGVtcGxhdGUnLCB0OiBWVF9TVFJJTkcgfSxcblx0Lyo6OlsqLzB4MDgvKjo6XSovOiB7IG46ICdMYXN0QXV0aG9yJywgdDogVlRfU1RSSU5HIH0sXG5cdC8qOjpbKi8weDA5Lyo6Ol0qLzogeyBuOiAnUmV2TnVtYmVyJywgdDogVlRfU1RSSU5HIH0sXG5cdC8qOjpbKi8weDBBLyo6Ol0qLzogeyBuOiAnRWRpdFRpbWUnLCB0OiBWVF9GSUxFVElNRSB9LFxuXHQvKjo6WyovMHgwQi8qOjpdKi86IHsgbjogJ0xhc3RQcmludGVkJywgdDogVlRfRklMRVRJTUUgfSxcblx0Lyo6OlsqLzB4MEMvKjo6XSovOiB7IG46ICdDcmVhdGVkRGF0ZScsIHQ6IFZUX0ZJTEVUSU1FIH0sXG5cdC8qOjpbKi8weDBELyo6Ol0qLzogeyBuOiAnTW9kaWZpZWREYXRlJywgdDogVlRfRklMRVRJTUUgfSxcblx0Lyo6OlsqLzB4MEUvKjo6XSovOiB7IG46ICdQYWdlQ291bnQnLCB0OiBWVF9JNCB9LFxuXHQvKjo6WyovMHgwRi8qOjpdKi86IHsgbjogJ1dvcmRDb3VudCcsIHQ6IFZUX0k0IH0sXG5cdC8qOjpbKi8weDEwLyo6Ol0qLzogeyBuOiAnQ2hhckNvdW50JywgdDogVlRfSTQgfSxcblx0Lyo6OlsqLzB4MTEvKjo6XSovOiB7IG46ICdUaHVtYm5haWwnLCB0OiBWVF9DRiB9LFxuXHQvKjo6WyovMHgxMi8qOjpdKi86IHsgbjogJ0FwcGxpY2F0aW9uJywgdDogVlRfU1RSSU5HIH0sXG5cdC8qOjpbKi8weDEzLyo6Ol0qLzogeyBuOiAnRG9jU2VjdXJpdHknLCB0OiBWVF9JNCB9LFxuXHQvKjo6WyovMHhGRi8qOjpdKi86IHt9LFxuXHQvKiBbTVMtT0xFUFNdIDIuMTggKi9cblx0Lyo6OlsqLzB4ODAwMDAwMDAvKjo6XSovOiB7IG46ICdMb2NhbGUnLCB0OiBWVF9VSTQgfSxcblx0Lyo6OlsqLzB4ODAwMDAwMDMvKjo6XSovOiB7IG46ICdCZWhhdmlvcicsIHQ6IFZUX1VJNCB9LFxuXHQvKjo6WyovMHg3MjYyNzI2Mi8qOjpdKi86IHt9XG59O1xuXG4vKiBbTVMtWExTXSAyLjQuNjMgQ291bnRyeS9SZWdpb24gY29kZXMgKi9cbnZhciBDb3VudHJ5RW51bSA9IHtcblx0Lyo6OlsqLzB4MDAwMS8qOjpdKi86IFwiVVNcIiwgLy8gVW5pdGVkIFN0YXRlc1xuXHQvKjo6WyovMHgwMDAyLyo6Ol0qLzogXCJDQVwiLCAvLyBDYW5hZGFcblx0Lyo6OlsqLzB4MDAwMy8qOjpdKi86IFwiXCIsIC8vIExhdGluIEFtZXJpY2EgKGV4Y2VwdCBCcmF6aWwpXG5cdC8qOjpbKi8weDAwMDcvKjo6XSovOiBcIlJVXCIsIC8vIFJ1c3NpYVxuXHQvKjo6WyovMHgwMDE0Lyo6Ol0qLzogXCJFR1wiLCAvLyBFZ3lwdFxuXHQvKjo6WyovMHgwMDFFLyo6Ol0qLzogXCJHUlwiLCAvLyBHcmVlY2Vcblx0Lyo6OlsqLzB4MDAxRi8qOjpdKi86IFwiTkxcIiwgLy8gTmV0aGVybGFuZHNcblx0Lyo6OlsqLzB4MDAyMC8qOjpdKi86IFwiQkVcIiwgLy8gQmVsZ2l1bVxuXHQvKjo6WyovMHgwMDIxLyo6Ol0qLzogXCJGUlwiLCAvLyBGcmFuY2Vcblx0Lyo6OlsqLzB4MDAyMi8qOjpdKi86IFwiRVNcIiwgLy8gU3BhaW5cblx0Lyo6OlsqLzB4MDAyNC8qOjpdKi86IFwiSFVcIiwgLy8gSHVuZ2FyeVxuXHQvKjo6WyovMHgwMDI3Lyo6Ol0qLzogXCJJVFwiLCAvLyBJdGFseVxuXHQvKjo6WyovMHgwMDI5Lyo6Ol0qLzogXCJDSFwiLCAvLyBTd2l0emVybGFuZFxuXHQvKjo6WyovMHgwMDJCLyo6Ol0qLzogXCJBVFwiLCAvLyBBdXN0cmlhXG5cdC8qOjpbKi8weDAwMkMvKjo6XSovOiBcIkdCXCIsIC8vIFVuaXRlZCBLaW5nZG9tXG5cdC8qOjpbKi8weDAwMkQvKjo6XSovOiBcIkRLXCIsIC8vIERlbm1hcmtcblx0Lyo6OlsqLzB4MDAyRS8qOjpdKi86IFwiU0VcIiwgLy8gU3dlZGVuXG5cdC8qOjpbKi8weDAwMkYvKjo6XSovOiBcIk5PXCIsIC8vIE5vcndheVxuXHQvKjo6WyovMHgwMDMwLyo6Ol0qLzogXCJQTFwiLCAvLyBQb2xhbmRcblx0Lyo6OlsqLzB4MDAzMS8qOjpdKi86IFwiREVcIiwgLy8gR2VybWFueVxuXHQvKjo6WyovMHgwMDM0Lyo6Ol0qLzogXCJNWFwiLCAvLyBNZXhpY29cblx0Lyo6OlsqLzB4MDAzNy8qOjpdKi86IFwiQlJcIiwgLy8gQnJhemlsXG5cdC8qOjpbKi8weDAwM2QvKjo6XSovOiBcIkFVXCIsIC8vIEF1c3RyYWxpYVxuXHQvKjo6WyovMHgwMDQwLyo6Ol0qLzogXCJOWlwiLCAvLyBOZXcgWmVhbGFuZFxuXHQvKjo6WyovMHgwMDQyLyo6Ol0qLzogXCJUSFwiLCAvLyBUaGFpbGFuZFxuXHQvKjo6WyovMHgwMDUxLyo6Ol0qLzogXCJKUFwiLCAvLyBKYXBhblxuXHQvKjo6WyovMHgwMDUyLyo6Ol0qLzogXCJLUlwiLCAvLyBLb3JlYVxuXHQvKjo6WyovMHgwMDU0Lyo6Ol0qLzogXCJWTlwiLCAvLyBWaWV0IE5hbVxuXHQvKjo6WyovMHgwMDU2Lyo6Ol0qLzogXCJDTlwiLCAvLyBDaGluYVxuXHQvKjo6WyovMHgwMDVBLyo6Ol0qLzogXCJUUlwiLCAvLyBUdXJrZXlcblx0Lyo6OlsqLzB4MDA2OS8qOjpdKi86IFwiSlNcIiwgLy8gUmFtYXN0YW5cblx0Lyo6OlsqLzB4MDBENS8qOjpdKi86IFwiRFpcIiwgLy8gQWxnZXJpYVxuXHQvKjo6WyovMHgwMEQ4Lyo6Ol0qLzogXCJNQVwiLCAvLyBNb3JvY2NvXG5cdC8qOjpbKi8weDAwREEvKjo6XSovOiBcIkxZXCIsIC8vIExpYnlhXG5cdC8qOjpbKi8weDAxNUYvKjo6XSovOiBcIlBUXCIsIC8vIFBvcnR1Z2FsXG5cdC8qOjpbKi8weDAxNjIvKjo6XSovOiBcIklTXCIsIC8vIEljZWxhbmRcblx0Lyo6OlsqLzB4MDE2Ni8qOjpdKi86IFwiRklcIiwgLy8gRmlubGFuZFxuXHQvKjo6WyovMHgwMUE0Lyo6Ol0qLzogXCJDWlwiLCAvLyBDemVjaCBSZXB1YmxpY1xuXHQvKjo6WyovMHgwMzc2Lyo6Ol0qLzogXCJUV1wiLCAvLyBUYWl3YW5cblx0Lyo6OlsqLzB4MDNDMS8qOjpdKi86IFwiTEJcIiwgLy8gTGViYW5vblxuXHQvKjo6WyovMHgwM0MyLyo6Ol0qLzogXCJKT1wiLCAvLyBKb3JkYW5cblx0Lyo6OlsqLzB4MDNDMy8qOjpdKi86IFwiU1lcIiwgLy8gU3lyaWFcblx0Lyo6OlsqLzB4MDNDNC8qOjpdKi86IFwiSVFcIiwgLy8gSXJhcVxuXHQvKjo6WyovMHgwM0M1Lyo6Ol0qLzogXCJLV1wiLCAvLyBLdXdhaXRcblx0Lyo6OlsqLzB4MDNDNi8qOjpdKi86IFwiU0FcIiwgLy8gU2F1ZGkgQXJhYmlhXG5cdC8qOjpbKi8weDAzQ0IvKjo6XSovOiBcIkFFXCIsIC8vIFVuaXRlZCBBcmFiIEVtaXJhdGVzXG5cdC8qOjpbKi8weDAzQ0MvKjo6XSovOiBcIklMXCIsIC8vIElzcmFlbFxuXHQvKjo6WyovMHgwM0NFLyo6Ol0qLzogXCJRQVwiLCAvLyBRYXRhclxuXHQvKjo6WyovMHgwM0Q1Lyo6Ol0qLzogXCJJUlwiLCAvLyBJcmFuXG5cdC8qOjpbKi8weEZGRkYvKjo6XSovOiBcIlVTXCIgIC8vIFVuaXRlZCBTdGF0ZXNcbn07XG5cbi8qIFtNUy1YTFNdIDIuNS4xMjcgKi9cbnZhciBYTFNGaWxsUGF0dGVybiA9IFtcblx0bnVsbCxcblx0J3NvbGlkJyxcblx0J21lZGl1bUdyYXknLFxuXHQnZGFya0dyYXknLFxuXHQnbGlnaHRHcmF5Jyxcblx0J2RhcmtIb3Jpem9udGFsJyxcblx0J2RhcmtWZXJ0aWNhbCcsXG5cdCdkYXJrRG93bicsXG5cdCdkYXJrVXAnLFxuXHQnZGFya0dyaWQnLFxuXHQnZGFya1RyZWxsaXMnLFxuXHQnbGlnaHRIb3Jpem9udGFsJyxcblx0J2xpZ2h0VmVydGljYWwnLFxuXHQnbGlnaHREb3duJyxcblx0J2xpZ2h0VXAnLFxuXHQnbGlnaHRHcmlkJyxcblx0J2xpZ2h0VHJlbGxpcycsXG5cdCdncmF5MTI1Jyxcblx0J2dyYXkwNjI1J1xuXTtcblxuZnVuY3Rpb24gcmdiaWZ5KGFyci8qOkFycmF5PG51bWJlcj4qLykvKjpBcnJheTxbbnVtYmVyLCBudW1iZXIsIG51bWJlcl0+Ki8geyByZXR1cm4gYXJyLm1hcChmdW5jdGlvbih4KSB7IHJldHVybiBbKHg+PjE2KSYyNTUsKHg+PjgpJjI1NSx4JjI1NV07IH0pOyB9XG5cbi8qIFtNUy1YTFNdIDIuNS4xNjEgKi9cbi8qIFtNUy1YTFNCXSAyLjUuNzUgSWN2ICovXG52YXIgX1hMU0ljdiA9IC8qI19fUFVSRV9fKi8gcmdiaWZ5KFtcblx0LyogQ29sb3IgQ29uc3RhbnRzICovXG5cdDB4MDAwMDAwLFxuXHQweEZGRkZGRixcblx0MHhGRjAwMDAsXG5cdDB4MDBGRjAwLFxuXHQweDAwMDBGRixcblx0MHhGRkZGMDAsXG5cdDB4RkYwMEZGLFxuXHQweDAwRkZGRixcblxuXHQvKiBPdmVycmlkYWJsZSBEZWZhdWx0cyAqL1xuXHQweDAwMDAwMCxcblx0MHhGRkZGRkYsXG5cdDB4RkYwMDAwLFxuXHQweDAwRkYwMCxcblx0MHgwMDAwRkYsXG5cdDB4RkZGRjAwLFxuXHQweEZGMDBGRixcblx0MHgwMEZGRkYsXG5cblx0MHg4MDAwMDAsXG5cdDB4MDA4MDAwLFxuXHQweDAwMDA4MCxcblx0MHg4MDgwMDAsXG5cdDB4ODAwMDgwLFxuXHQweDAwODA4MCxcblx0MHhDMEMwQzAsXG5cdDB4ODA4MDgwLFxuXHQweDk5OTlGRixcblx0MHg5OTMzNjYsXG5cdDB4RkZGRkNDLFxuXHQweENDRkZGRixcblx0MHg2NjAwNjYsXG5cdDB4RkY4MDgwLFxuXHQweDAwNjZDQyxcblx0MHhDQ0NDRkYsXG5cblx0MHgwMDAwODAsXG5cdDB4RkYwMEZGLFxuXHQweEZGRkYwMCxcblx0MHgwMEZGRkYsXG5cdDB4ODAwMDgwLFxuXHQweDgwMDAwMCxcblx0MHgwMDgwODAsXG5cdDB4MDAwMEZGLFxuXHQweDAwQ0NGRixcblx0MHhDQ0ZGRkYsXG5cdDB4Q0NGRkNDLFxuXHQweEZGRkY5OSxcblx0MHg5OUNDRkYsXG5cdDB4RkY5OUNDLFxuXHQweENDOTlGRixcblx0MHhGRkNDOTksXG5cblx0MHgzMzY2RkYsXG5cdDB4MzNDQ0NDLFxuXHQweDk5Q0MwMCxcblx0MHhGRkNDMDAsXG5cdDB4RkY5OTAwLFxuXHQweEZGNjYwMCxcblx0MHg2NjY2OTksXG5cdDB4OTY5Njk2LFxuXHQweDAwMzM2Nixcblx0MHgzMzk5NjYsXG5cdDB4MDAzMzAwLFxuXHQweDMzMzMwMCxcblx0MHg5OTMzMDAsXG5cdDB4OTkzMzY2LFxuXHQweDMzMzM5OSxcblx0MHgzMzMzMzMsXG5cblx0LyogT3RoZXIgZW50cmllcyB0byBhcHBlYXNlIEJJRkY4LzEyICovXG5cdDB4RkZGRkZGLCAvKiAweDQwIGljdkZvcmVncm91bmQgPz8gKi9cblx0MHgwMDAwMDAsIC8qIDB4NDEgaWN2QmFja2dyb3VuZCA/PyAqL1xuXHQweDAwMDAwMCwgLyogMHg0MiBpY3ZGcmFtZSA/PyAqL1xuXHQweDAwMDAwMCwgLyogMHg0MyBpY3YzRCA/PyAqL1xuXHQweDAwMDAwMCwgLyogMHg0NCBpY3YzRFRleHQgPz8gKi9cblx0MHgwMDAwMDAsIC8qIDB4NDUgaWN2M0RIaWxpdGUgPz8gKi9cblx0MHgwMDAwMDAsIC8qIDB4NDYgaWN2M0RTaGFkb3cgPz8gKi9cblx0MHgwMDAwMDAsIC8qIDB4NDcgaWN2SGlsaXRlID8/ICovXG5cdDB4MDAwMDAwLCAvKiAweDQ4IGljdkN0bFRleHQgPz8gKi9cblx0MHgwMDAwMDAsIC8qIDB4NDkgaWN2Q3RsU2NybCA/PyAqL1xuXHQweDAwMDAwMCwgLyogMHg0QSBpY3ZDdGxJbnYgPz8gKi9cblx0MHgwMDAwMDAsIC8qIDB4NEIgaWN2Q3RsQm9keSA/PyAqL1xuXHQweDAwMDAwMCwgLyogMHg0QyBpY3ZDdGxGcmFtZSA/PyAqL1xuXHQweDAwMDAwMCwgLyogMHg0RCBpY3ZDdGxGb3JlID8/ICovXG5cdDB4MDAwMDAwLCAvKiAweDRFIGljdkN0bEJhY2sgPz8gKi9cblx0MHgwMDAwMDAsIC8qIDB4NEYgaWN2Q3RsTmV1dHJhbCAqL1xuXHQweDAwMDAwMCwgLyogMHg1MCBpY3ZJbmZvQmsgPz8gKi9cblx0MHgwMDAwMDAgLyogMHg1MSBpY3ZJbmZvVGV4dCA/PyAqL1xuXSk7XG52YXIgWExTSWN2ID0gLyojX19QVVJFX18qL2R1cChfWExTSWN2KTtcblxuLyogW01TLVhMU0JdIDIuNS45Ny4yICovXG52YXIgQkVyciA9IHtcblx0Lyo6OlsqLzB4MDAvKjo6XSovOiBcIiNOVUxMIVwiLFxuXHQvKjo6WyovMHgwNy8qOjpdKi86IFwiI0RJVi8wIVwiLFxuXHQvKjo6WyovMHgwRi8qOjpdKi86IFwiI1ZBTFVFIVwiLFxuXHQvKjo6WyovMHgxNy8qOjpdKi86IFwiI1JFRiFcIixcblx0Lyo6OlsqLzB4MUQvKjo6XSovOiBcIiNOQU1FP1wiLFxuXHQvKjo6WyovMHgyNC8qOjpdKi86IFwiI05VTSFcIixcblx0Lyo6OlsqLzB4MkEvKjo6XSovOiBcIiNOL0FcIixcblx0Lyo6OlsqLzB4MkIvKjo6XSovOiBcIiNHRVRUSU5HX0RBVEFcIixcblx0Lyo6OlsqLzB4RkYvKjo6XSovOiBcIiNXVEY/XCJcbn07XG4vL3ZhciBSQkVyciA9IGV2ZXJ0X251bShCRXJyKTtcbnZhciBSQkVyciA9IHtcblx0XCIjTlVMTCFcIjogICAgICAgIDB4MDAsXG5cdFwiI0RJVi8wIVwiOiAgICAgICAweDA3LFxuXHRcIiNWQUxVRSFcIjogICAgICAgMHgwRixcblx0XCIjUkVGIVwiOiAgICAgICAgIDB4MTcsXG5cdFwiI05BTUU/XCI6ICAgICAgICAweDFELFxuXHRcIiNOVU0hXCI6ICAgICAgICAgMHgyNCxcblx0XCIjTi9BXCI6ICAgICAgICAgIDB4MkEsXG5cdFwiI0dFVFRJTkdfREFUQVwiOiAweDJCLFxuXHRcIiNXVEY/XCI6ICAgICAgICAgMHhGRlxufTtcblxuLyogUGFydHMgZW51bWVyYXRlZCBpbiBPUEMgc3BlYywgTVMtWExTQiBhbmQgTVMtWExTWCAqL1xuLyogMTIuMyBQYXJ0IFN1bW1hcnkgPFNwcmVhZHNoZWV0TUw+ICovXG4vKiAxNC4yIFBhcnQgU3VtbWFyeSA8RHJhd2luZ01MPiAqL1xuLyogW01TLVhMU1hdIDIuMSBQYXJ0IEVudW1lcmF0aW9ucyA7IFtNUy1YTFNCXSAyLjEuNyBQYXJ0IEVudW1lcmF0aW9uICovXG52YXIgY3QydHlwZS8qe1tzdHJpbmddOnN0cmluZ30qLyA9ICh7XG5cdC8qIFdvcmtib29rICovXG5cdFwiYXBwbGljYXRpb24vdm5kLm9wZW54bWxmb3JtYXRzLW9mZmljZWRvY3VtZW50LnNwcmVhZHNoZWV0bWwuc2hlZXQubWFpbit4bWxcIjogXCJ3b3JrYm9va3NcIixcblx0XCJhcHBsaWNhdGlvbi92bmQubXMtZXhjZWwuc2hlZXQubWFjcm9FbmFibGVkLm1haW4reG1sXCI6IFwid29ya2Jvb2tzXCIsXG5cdFwiYXBwbGljYXRpb24vdm5kLm1zLWV4Y2VsLnNoZWV0LmJpbmFyeS5tYWNyb0VuYWJsZWQubWFpblwiOiBcIndvcmtib29rc1wiLFxuXHRcImFwcGxpY2F0aW9uL3ZuZC5tcy1leGNlbC5hZGRpbi5tYWNyb0VuYWJsZWQubWFpbit4bWxcIjogXCJ3b3JrYm9va3NcIixcblx0XCJhcHBsaWNhdGlvbi92bmQub3BlbnhtbGZvcm1hdHMtb2ZmaWNlZG9jdW1lbnQuc3ByZWFkc2hlZXRtbC50ZW1wbGF0ZS5tYWluK3htbFwiOiBcIndvcmtib29rc1wiLFxuXG5cdC8qIFdvcmtzaGVldCAqL1xuXHRcImFwcGxpY2F0aW9uL3ZuZC5vcGVueG1sZm9ybWF0cy1vZmZpY2Vkb2N1bWVudC5zcHJlYWRzaGVldG1sLndvcmtzaGVldCt4bWxcIjogXCJzaGVldHNcIixcblx0XCJhcHBsaWNhdGlvbi92bmQubXMtZXhjZWwud29ya3NoZWV0XCI6IFwic2hlZXRzXCIsXG5cdFwiYXBwbGljYXRpb24vdm5kLm1zLWV4Y2VsLmJpbkluZGV4V3NcIjogXCJUT0RPXCIsIC8qIEJpbmFyeSBJbmRleCAqL1xuXG5cdC8qIENoYXJ0c2hlZXQgKi9cblx0XCJhcHBsaWNhdGlvbi92bmQub3BlbnhtbGZvcm1hdHMtb2ZmaWNlZG9jdW1lbnQuc3ByZWFkc2hlZXRtbC5jaGFydHNoZWV0K3htbFwiOiBcImNoYXJ0c1wiLFxuXHRcImFwcGxpY2F0aW9uL3ZuZC5tcy1leGNlbC5jaGFydHNoZWV0XCI6IFwiY2hhcnRzXCIsXG5cblx0LyogTWFjcm9zaGVldCAqL1xuXHRcImFwcGxpY2F0aW9uL3ZuZC5tcy1leGNlbC5tYWNyb3NoZWV0K3htbFwiOiBcIm1hY3Jvc1wiLFxuXHRcImFwcGxpY2F0aW9uL3ZuZC5tcy1leGNlbC5tYWNyb3NoZWV0XCI6IFwibWFjcm9zXCIsXG5cdFwiYXBwbGljYXRpb24vdm5kLm1zLWV4Y2VsLmludGxtYWNyb3NoZWV0XCI6IFwiVE9ET1wiLFxuXHRcImFwcGxpY2F0aW9uL3ZuZC5tcy1leGNlbC5iaW5JbmRleE1zXCI6IFwiVE9ET1wiLCAvKiBCaW5hcnkgSW5kZXggKi9cblxuXHQvKiBEaWFsb2dzaGVldCAqL1xuXHRcImFwcGxpY2F0aW9uL3ZuZC5vcGVueG1sZm9ybWF0cy1vZmZpY2Vkb2N1bWVudC5zcHJlYWRzaGVldG1sLmRpYWxvZ3NoZWV0K3htbFwiOiBcImRpYWxvZ3NcIixcblx0XCJhcHBsaWNhdGlvbi92bmQubXMtZXhjZWwuZGlhbG9nc2hlZXRcIjogXCJkaWFsb2dzXCIsXG5cblx0LyogU2hhcmVkIFN0cmluZ3MgKi9cblx0XCJhcHBsaWNhdGlvbi92bmQub3BlbnhtbGZvcm1hdHMtb2ZmaWNlZG9jdW1lbnQuc3ByZWFkc2hlZXRtbC5zaGFyZWRTdHJpbmdzK3htbFwiOiBcInN0cnNcIixcblx0XCJhcHBsaWNhdGlvbi92bmQubXMtZXhjZWwuc2hhcmVkU3RyaW5nc1wiOiBcInN0cnNcIixcblxuXHQvKiBTdHlsZXMgKi9cblx0XCJhcHBsaWNhdGlvbi92bmQub3BlbnhtbGZvcm1hdHMtb2ZmaWNlZG9jdW1lbnQuc3ByZWFkc2hlZXRtbC5zdHlsZXMreG1sXCI6IFwic3R5bGVzXCIsXG5cdFwiYXBwbGljYXRpb24vdm5kLm1zLWV4Y2VsLnN0eWxlc1wiOiBcInN0eWxlc1wiLFxuXG5cdC8qIEZpbGUgUHJvcGVydGllcyAqL1xuXHRcImFwcGxpY2F0aW9uL3ZuZC5vcGVueG1sZm9ybWF0cy1wYWNrYWdlLmNvcmUtcHJvcGVydGllcyt4bWxcIjogXCJjb3JlcHJvcHNcIixcblx0XCJhcHBsaWNhdGlvbi92bmQub3BlbnhtbGZvcm1hdHMtb2ZmaWNlZG9jdW1lbnQuY3VzdG9tLXByb3BlcnRpZXMreG1sXCI6IFwiY3VzdHByb3BzXCIsXG5cdFwiYXBwbGljYXRpb24vdm5kLm9wZW54bWxmb3JtYXRzLW9mZmljZWRvY3VtZW50LmV4dGVuZGVkLXByb3BlcnRpZXMreG1sXCI6IFwiZXh0cHJvcHNcIixcblxuXHQvKiBDdXN0b20gRGF0YSBQcm9wZXJ0aWVzICovXG5cdFwiYXBwbGljYXRpb24vdm5kLm9wZW54bWxmb3JtYXRzLW9mZmljZWRvY3VtZW50LmN1c3RvbVhtbFByb3BlcnRpZXMreG1sXCI6IFwiVE9ET1wiLFxuXHRcImFwcGxpY2F0aW9uL3ZuZC5vcGVueG1sZm9ybWF0cy1vZmZpY2Vkb2N1bWVudC5zcHJlYWRzaGVldG1sLmN1c3RvbVByb3BlcnR5XCI6IFwiVE9ET1wiLFxuXG5cdC8qIENvbW1lbnRzICovXG5cdFwiYXBwbGljYXRpb24vdm5kLm9wZW54bWxmb3JtYXRzLW9mZmljZWRvY3VtZW50LnNwcmVhZHNoZWV0bWwuY29tbWVudHMreG1sXCI6IFwiY29tbWVudHNcIixcblx0XCJhcHBsaWNhdGlvbi92bmQubXMtZXhjZWwuY29tbWVudHNcIjogXCJjb21tZW50c1wiLFxuXHRcImFwcGxpY2F0aW9uL3ZuZC5tcy1leGNlbC50aHJlYWRlZGNvbW1lbnRzK3htbFwiOiBcInRocmVhZGVkY29tbWVudHNcIixcblx0XCJhcHBsaWNhdGlvbi92bmQubXMtZXhjZWwucGVyc29uK3htbFwiOiBcInBlb3BsZVwiLFxuXG5cdC8qIE1ldGFkYXRhIChTdG9jay9HZW9ncmFwaHkgYW5kIER5bmFtaWMgQXJyYXkpICovXG5cdFwiYXBwbGljYXRpb24vdm5kLm9wZW54bWxmb3JtYXRzLW9mZmljZWRvY3VtZW50LnNwcmVhZHNoZWV0bWwuc2hlZXRNZXRhZGF0YSt4bWxcIjogXCJtZXRhZGF0YVwiLFxuXHRcImFwcGxpY2F0aW9uL3ZuZC5tcy1leGNlbC5zaGVldE1ldGFkYXRhXCI6IFwibWV0YWRhdGFcIixcblxuXHQvKiBQaXZvdFRhYmxlICovXG5cdFwiYXBwbGljYXRpb24vdm5kLm1zLWV4Y2VsLnBpdm90VGFibGVcIjogXCJUT0RPXCIsXG5cdFwiYXBwbGljYXRpb24vdm5kLm9wZW54bWxmb3JtYXRzLW9mZmljZWRvY3VtZW50LnNwcmVhZHNoZWV0bWwucGl2b3RUYWJsZSt4bWxcIjogXCJUT0RPXCIsXG5cblx0LyogQ2hhcnQgT2JqZWN0cyAqL1xuXHRcImFwcGxpY2F0aW9uL3ZuZC5vcGVueG1sZm9ybWF0cy1vZmZpY2Vkb2N1bWVudC5kcmF3aW5nbWwuY2hhcnQreG1sXCI6IFwiVE9ET1wiLFxuXG5cdC8qIENoYXJ0IENvbG9ycyAqL1xuXHRcImFwcGxpY2F0aW9uL3ZuZC5tcy1vZmZpY2UuY2hhcnRjb2xvcnN0eWxlK3htbFwiOiBcIlRPRE9cIixcblxuXHQvKiBDaGFydCBTdHlsZSAqL1xuXHRcImFwcGxpY2F0aW9uL3ZuZC5tcy1vZmZpY2UuY2hhcnRzdHlsZSt4bWxcIjogXCJUT0RPXCIsXG5cblx0LyogQ2hhcnQgQWR2YW5jZWQgKi9cblx0XCJhcHBsaWNhdGlvbi92bmQubXMtb2ZmaWNlLmNoYXJ0ZXgreG1sXCI6IFwiVE9ET1wiLFxuXG5cdC8qIENhbGN1bGF0aW9uIENoYWluICovXG5cdFwiYXBwbGljYXRpb24vdm5kLm1zLWV4Y2VsLmNhbGNDaGFpblwiOiBcImNhbGNjaGFpbnNcIixcblx0XCJhcHBsaWNhdGlvbi92bmQub3BlbnhtbGZvcm1hdHMtb2ZmaWNlZG9jdW1lbnQuc3ByZWFkc2hlZXRtbC5jYWxjQ2hhaW4reG1sXCI6IFwiY2FsY2NoYWluc1wiLFxuXG5cdC8qIFByaW50ZXIgU2V0dGluZ3MgKi9cblx0XCJhcHBsaWNhdGlvbi92bmQub3BlbnhtbGZvcm1hdHMtb2ZmaWNlZG9jdW1lbnQuc3ByZWFkc2hlZXRtbC5wcmludGVyU2V0dGluZ3NcIjogXCJUT0RPXCIsXG5cblx0LyogQWN0aXZlWCAqL1xuXHRcImFwcGxpY2F0aW9uL3ZuZC5tcy1vZmZpY2UuYWN0aXZlWFwiOiBcIlRPRE9cIixcblx0XCJhcHBsaWNhdGlvbi92bmQubXMtb2ZmaWNlLmFjdGl2ZVgreG1sXCI6IFwiVE9ET1wiLFxuXG5cdC8qIEN1c3RvbSBUb29sYmFycyAqL1xuXHRcImFwcGxpY2F0aW9uL3ZuZC5tcy1leGNlbC5hdHRhY2hlZFRvb2xiYXJzXCI6IFwiVE9ET1wiLFxuXG5cdC8qIEV4dGVybmFsIERhdGEgQ29ubmVjdGlvbnMgKi9cblx0XCJhcHBsaWNhdGlvbi92bmQubXMtZXhjZWwuY29ubmVjdGlvbnNcIjogXCJUT0RPXCIsXG5cdFwiYXBwbGljYXRpb24vdm5kLm9wZW54bWxmb3JtYXRzLW9mZmljZWRvY3VtZW50LnNwcmVhZHNoZWV0bWwuY29ubmVjdGlvbnMreG1sXCI6IFwiVE9ET1wiLFxuXG5cdC8qIEV4dGVybmFsIExpbmtzICovXG5cdFwiYXBwbGljYXRpb24vdm5kLm1zLWV4Y2VsLmV4dGVybmFsTGlua1wiOiBcImxpbmtzXCIsXG5cdFwiYXBwbGljYXRpb24vdm5kLm9wZW54bWxmb3JtYXRzLW9mZmljZWRvY3VtZW50LnNwcmVhZHNoZWV0bWwuZXh0ZXJuYWxMaW5rK3htbFwiOiBcImxpbmtzXCIsXG5cblx0LyogUGl2b3RDYWNoZSAqL1xuXHRcImFwcGxpY2F0aW9uL3ZuZC5tcy1leGNlbC5waXZvdENhY2hlRGVmaW5pdGlvblwiOiBcIlRPRE9cIixcblx0XCJhcHBsaWNhdGlvbi92bmQubXMtZXhjZWwucGl2b3RDYWNoZVJlY29yZHNcIjogXCJUT0RPXCIsXG5cdFwiYXBwbGljYXRpb24vdm5kLm9wZW54bWxmb3JtYXRzLW9mZmljZWRvY3VtZW50LnNwcmVhZHNoZWV0bWwucGl2b3RDYWNoZURlZmluaXRpb24reG1sXCI6IFwiVE9ET1wiLFxuXHRcImFwcGxpY2F0aW9uL3ZuZC5vcGVueG1sZm9ybWF0cy1vZmZpY2Vkb2N1bWVudC5zcHJlYWRzaGVldG1sLnBpdm90Q2FjaGVSZWNvcmRzK3htbFwiOiBcIlRPRE9cIixcblxuXHQvKiBRdWVyeSBUYWJsZSAqL1xuXHRcImFwcGxpY2F0aW9uL3ZuZC5tcy1leGNlbC5xdWVyeVRhYmxlXCI6IFwiVE9ET1wiLFxuXHRcImFwcGxpY2F0aW9uL3ZuZC5vcGVueG1sZm9ybWF0cy1vZmZpY2Vkb2N1bWVudC5zcHJlYWRzaGVldG1sLnF1ZXJ5VGFibGUreG1sXCI6IFwiVE9ET1wiLFxuXG5cdC8qIFNoYXJlZCBXb3JrYm9vayAqL1xuXHRcImFwcGxpY2F0aW9uL3ZuZC5tcy1leGNlbC51c2VyTmFtZXNcIjogXCJUT0RPXCIsXG5cdFwiYXBwbGljYXRpb24vdm5kLm1zLWV4Y2VsLnJldmlzaW9uSGVhZGVyc1wiOiBcIlRPRE9cIixcblx0XCJhcHBsaWNhdGlvbi92bmQubXMtZXhjZWwucmV2aXNpb25Mb2dcIjogXCJUT0RPXCIsXG5cdFwiYXBwbGljYXRpb24vdm5kLm9wZW54bWxmb3JtYXRzLW9mZmljZWRvY3VtZW50LnNwcmVhZHNoZWV0bWwucmV2aXNpb25IZWFkZXJzK3htbFwiOiBcIlRPRE9cIixcblx0XCJhcHBsaWNhdGlvbi92bmQub3BlbnhtbGZvcm1hdHMtb2ZmaWNlZG9jdW1lbnQuc3ByZWFkc2hlZXRtbC5yZXZpc2lvbkxvZyt4bWxcIjogXCJUT0RPXCIsXG5cdFwiYXBwbGljYXRpb24vdm5kLm9wZW54bWxmb3JtYXRzLW9mZmljZWRvY3VtZW50LnNwcmVhZHNoZWV0bWwudXNlck5hbWVzK3htbFwiOiBcIlRPRE9cIixcblxuXHQvKiBTaW5nbGUgQ2VsbCBUYWJsZSAqL1xuXHRcImFwcGxpY2F0aW9uL3ZuZC5tcy1leGNlbC50YWJsZVNpbmdsZUNlbGxzXCI6IFwiVE9ET1wiLFxuXHRcImFwcGxpY2F0aW9uL3ZuZC5vcGVueG1sZm9ybWF0cy1vZmZpY2Vkb2N1bWVudC5zcHJlYWRzaGVldG1sLnRhYmxlU2luZ2xlQ2VsbHMreG1sXCI6IFwiVE9ET1wiLFxuXG5cdC8qIFNsaWNlciAqL1xuXHRcImFwcGxpY2F0aW9uL3ZuZC5tcy1leGNlbC5zbGljZXJcIjogXCJUT0RPXCIsXG5cdFwiYXBwbGljYXRpb24vdm5kLm1zLWV4Y2VsLnNsaWNlckNhY2hlXCI6IFwiVE9ET1wiLFxuXHRcImFwcGxpY2F0aW9uL3ZuZC5tcy1leGNlbC5zbGljZXIreG1sXCI6IFwiVE9ET1wiLFxuXHRcImFwcGxpY2F0aW9uL3ZuZC5tcy1leGNlbC5zbGljZXJDYWNoZSt4bWxcIjogXCJUT0RPXCIsXG5cblx0LyogU29ydCBNYXAgKi9cblx0XCJhcHBsaWNhdGlvbi92bmQubXMtZXhjZWwud3NTb3J0TWFwXCI6IFwiVE9ET1wiLFxuXG5cdC8qIFRhYmxlICovXG5cdFwiYXBwbGljYXRpb24vdm5kLm1zLWV4Y2VsLnRhYmxlXCI6IFwiVE9ET1wiLFxuXHRcImFwcGxpY2F0aW9uL3ZuZC5vcGVueG1sZm9ybWF0cy1vZmZpY2Vkb2N1bWVudC5zcHJlYWRzaGVldG1sLnRhYmxlK3htbFwiOiBcIlRPRE9cIixcblxuXHQvKiBUaGVtZXMgKi9cblx0XCJhcHBsaWNhdGlvbi92bmQub3BlbnhtbGZvcm1hdHMtb2ZmaWNlZG9jdW1lbnQudGhlbWUreG1sXCI6IFwidGhlbWVzXCIsXG5cblx0LyogVGhlbWUgT3ZlcnJpZGUgKi9cblx0XCJhcHBsaWNhdGlvbi92bmQub3BlbnhtbGZvcm1hdHMtb2ZmaWNlZG9jdW1lbnQudGhlbWVPdmVycmlkZSt4bWxcIjogXCJUT0RPXCIsXG5cblx0LyogVGltZWxpbmUgKi9cblx0XCJhcHBsaWNhdGlvbi92bmQubXMtZXhjZWwuVGltZWxpbmUreG1sXCI6IFwiVE9ET1wiLCAvKiB2ZXJpZnkgKi9cblx0XCJhcHBsaWNhdGlvbi92bmQubXMtZXhjZWwuVGltZWxpbmVDYWNoZSt4bWxcIjogXCJUT0RPXCIsIC8qIHZlcmlmeSAqL1xuXG5cdC8qIFZCQSAqL1xuXHRcImFwcGxpY2F0aW9uL3ZuZC5tcy1vZmZpY2UudmJhUHJvamVjdFwiOiBcInZiYVwiLFxuXHRcImFwcGxpY2F0aW9uL3ZuZC5tcy1vZmZpY2UudmJhUHJvamVjdFNpZ25hdHVyZVwiOiBcIlRPRE9cIixcblxuXHQvKiBWb2xhdGlsZSBEZXBlbmRlbmNpZXMgKi9cblx0XCJhcHBsaWNhdGlvbi92bmQubXMtb2ZmaWNlLnZvbGF0aWxlRGVwZW5kZW5jaWVzXCI6IFwiVE9ET1wiLFxuXHRcImFwcGxpY2F0aW9uL3ZuZC5vcGVueG1sZm9ybWF0cy1vZmZpY2Vkb2N1bWVudC5zcHJlYWRzaGVldG1sLnZvbGF0aWxlRGVwZW5kZW5jaWVzK3htbFwiOiBcIlRPRE9cIixcblxuXHQvKiBDb250cm9sIFByb3BlcnRpZXMgKi9cblx0XCJhcHBsaWNhdGlvbi92bmQubXMtZXhjZWwuY29udHJvbHByb3BlcnRpZXMreG1sXCI6IFwiVE9ET1wiLFxuXG5cdC8qIERhdGEgTW9kZWwgKi9cblx0XCJhcHBsaWNhdGlvbi92bmQub3BlbnhtbGZvcm1hdHMtb2ZmaWNlZG9jdW1lbnQubW9kZWwrZGF0YVwiOiBcIlRPRE9cIixcblxuXHQvKiBTdXJ2ZXkgKi9cblx0XCJhcHBsaWNhdGlvbi92bmQubXMtZXhjZWwuU3VydmV5K3htbFwiOiBcIlRPRE9cIixcblxuXHQvKiBEcmF3aW5nICovXG5cdFwiYXBwbGljYXRpb24vdm5kLm9wZW54bWxmb3JtYXRzLW9mZmljZWRvY3VtZW50LmRyYXdpbmcreG1sXCI6IFwiZHJhd2luZ3NcIixcblx0XCJhcHBsaWNhdGlvbi92bmQub3BlbnhtbGZvcm1hdHMtb2ZmaWNlZG9jdW1lbnQuZHJhd2luZ21sLmNoYXJ0c2hhcGVzK3htbFwiOiBcIlRPRE9cIixcblx0XCJhcHBsaWNhdGlvbi92bmQub3BlbnhtbGZvcm1hdHMtb2ZmaWNlZG9jdW1lbnQuZHJhd2luZ21sLmRpYWdyYW1Db2xvcnMreG1sXCI6IFwiVE9ET1wiLFxuXHRcImFwcGxpY2F0aW9uL3ZuZC5vcGVueG1sZm9ybWF0cy1vZmZpY2Vkb2N1bWVudC5kcmF3aW5nbWwuZGlhZ3JhbURhdGEreG1sXCI6IFwiVE9ET1wiLFxuXHRcImFwcGxpY2F0aW9uL3ZuZC5vcGVueG1sZm9ybWF0cy1vZmZpY2Vkb2N1bWVudC5kcmF3aW5nbWwuZGlhZ3JhbUxheW91dCt4bWxcIjogXCJUT0RPXCIsXG5cdFwiYXBwbGljYXRpb24vdm5kLm9wZW54bWxmb3JtYXRzLW9mZmljZWRvY3VtZW50LmRyYXdpbmdtbC5kaWFncmFtU3R5bGUreG1sXCI6IFwiVE9ET1wiLFxuXG5cdC8qIFZNTCAqL1xuXHRcImFwcGxpY2F0aW9uL3ZuZC5vcGVueG1sZm9ybWF0cy1vZmZpY2Vkb2N1bWVudC52bWxEcmF3aW5nXCI6IFwiVE9ET1wiLFxuXG5cdFwiYXBwbGljYXRpb24vdm5kLm9wZW54bWxmb3JtYXRzLXBhY2thZ2UucmVsYXRpb25zaGlwcyt4bWxcIjogXCJyZWxzXCIsXG5cdFwiYXBwbGljYXRpb24vdm5kLm9wZW54bWxmb3JtYXRzLW9mZmljZWRvY3VtZW50Lm9sZU9iamVjdFwiOiBcIlRPRE9cIixcblxuXHQvKiBJbWFnZSAqL1xuXHRcImltYWdlL3BuZ1wiOiBcIlRPRE9cIixcblxuXHRcInNoZWV0XCI6IFwianNcIlxufS8qOmFueSovKTtcblxudmFyIENUX0xJU1QgPSB7XG5cdFx0d29ya2Jvb2tzOiB7XG5cdFx0XHR4bHN4OiBcImFwcGxpY2F0aW9uL3ZuZC5vcGVueG1sZm9ybWF0cy1vZmZpY2Vkb2N1bWVudC5zcHJlYWRzaGVldG1sLnNoZWV0Lm1haW4reG1sXCIsXG5cdFx0XHR4bHNtOiBcImFwcGxpY2F0aW9uL3ZuZC5tcy1leGNlbC5zaGVldC5tYWNyb0VuYWJsZWQubWFpbit4bWxcIixcblx0XHRcdHhsc2I6IFwiYXBwbGljYXRpb24vdm5kLm1zLWV4Y2VsLnNoZWV0LmJpbmFyeS5tYWNyb0VuYWJsZWQubWFpblwiLFxuXHRcdFx0eGxhbTogXCJhcHBsaWNhdGlvbi92bmQubXMtZXhjZWwuYWRkaW4ubWFjcm9FbmFibGVkLm1haW4reG1sXCIsXG5cdFx0XHR4bHR4OiBcImFwcGxpY2F0aW9uL3ZuZC5vcGVueG1sZm9ybWF0cy1vZmZpY2Vkb2N1bWVudC5zcHJlYWRzaGVldG1sLnRlbXBsYXRlLm1haW4reG1sXCJcblx0XHR9LFxuXHRcdHN0cnM6IHsgLyogU2hhcmVkIFN0cmluZ3MgKi9cblx0XHRcdHhsc3g6IFwiYXBwbGljYXRpb24vdm5kLm9wZW54bWxmb3JtYXRzLW9mZmljZWRvY3VtZW50LnNwcmVhZHNoZWV0bWwuc2hhcmVkU3RyaW5ncyt4bWxcIixcblx0XHRcdHhsc2I6IFwiYXBwbGljYXRpb24vdm5kLm1zLWV4Y2VsLnNoYXJlZFN0cmluZ3NcIlxuXHRcdH0sXG5cdFx0Y29tbWVudHM6IHsgLyogQ29tbWVudHMgKi9cblx0XHRcdHhsc3g6IFwiYXBwbGljYXRpb24vdm5kLm9wZW54bWxmb3JtYXRzLW9mZmljZWRvY3VtZW50LnNwcmVhZHNoZWV0bWwuY29tbWVudHMreG1sXCIsXG5cdFx0XHR4bHNiOiBcImFwcGxpY2F0aW9uL3ZuZC5tcy1leGNlbC5jb21tZW50c1wiXG5cdFx0fSxcblx0XHRzaGVldHM6IHsgLyogV29ya3NoZWV0ICovXG5cdFx0XHR4bHN4OiBcImFwcGxpY2F0aW9uL3ZuZC5vcGVueG1sZm9ybWF0cy1vZmZpY2Vkb2N1bWVudC5zcHJlYWRzaGVldG1sLndvcmtzaGVldCt4bWxcIixcblx0XHRcdHhsc2I6IFwiYXBwbGljYXRpb24vdm5kLm1zLWV4Y2VsLndvcmtzaGVldFwiXG5cdFx0fSxcblx0XHRjaGFydHM6IHsgLyogQ2hhcnRzaGVldCAqL1xuXHRcdFx0eGxzeDogXCJhcHBsaWNhdGlvbi92bmQub3BlbnhtbGZvcm1hdHMtb2ZmaWNlZG9jdW1lbnQuc3ByZWFkc2hlZXRtbC5jaGFydHNoZWV0K3htbFwiLFxuXHRcdFx0eGxzYjogXCJhcHBsaWNhdGlvbi92bmQubXMtZXhjZWwuY2hhcnRzaGVldFwiXG5cdFx0fSxcblx0XHRkaWFsb2dzOiB7IC8qIERpYWxvZ3NoZWV0ICovXG5cdFx0XHR4bHN4OiBcImFwcGxpY2F0aW9uL3ZuZC5vcGVueG1sZm9ybWF0cy1vZmZpY2Vkb2N1bWVudC5zcHJlYWRzaGVldG1sLmRpYWxvZ3NoZWV0K3htbFwiLFxuXHRcdFx0eGxzYjogXCJhcHBsaWNhdGlvbi92bmQubXMtZXhjZWwuZGlhbG9nc2hlZXRcIlxuXHRcdH0sXG5cdFx0bWFjcm9zOiB7IC8qIE1hY3Jvc2hlZXQgKEV4Y2VsIDQuMCBNYWNyb3MpICovXG5cdFx0XHR4bHN4OiBcImFwcGxpY2F0aW9uL3ZuZC5tcy1leGNlbC5tYWNyb3NoZWV0K3htbFwiLFxuXHRcdFx0eGxzYjogXCJhcHBsaWNhdGlvbi92bmQubXMtZXhjZWwubWFjcm9zaGVldFwiXG5cdFx0fSxcblx0XHRtZXRhZGF0YTogeyAvKiBNZXRhZGF0YSAoU3RvY2svR2VvZ3JhcGh5IGFuZCBEeW5hbWljIEFycmF5KSAqL1xuXHRcdFx0eGxzeDogXCJhcHBsaWNhdGlvbi92bmQub3BlbnhtbGZvcm1hdHMtb2ZmaWNlZG9jdW1lbnQuc3ByZWFkc2hlZXRtbC5zaGVldE1ldGFkYXRhK3htbFwiLFxuXHRcdFx0eGxzYjogXCJhcHBsaWNhdGlvbi92bmQubXMtZXhjZWwuc2hlZXRNZXRhZGF0YVwiXG5cdFx0fSxcblx0XHRzdHlsZXM6IHsgLyogU3R5bGVzICovXG5cdFx0XHR4bHN4OiBcImFwcGxpY2F0aW9uL3ZuZC5vcGVueG1sZm9ybWF0cy1vZmZpY2Vkb2N1bWVudC5zcHJlYWRzaGVldG1sLnN0eWxlcyt4bWxcIixcblx0XHRcdHhsc2I6IFwiYXBwbGljYXRpb24vdm5kLm1zLWV4Y2VsLnN0eWxlc1wiXG5cdFx0fVxufTtcblxuZnVuY3Rpb24gbmV3X2N0KCkvKjphbnkqLyB7XG5cdHJldHVybiAoe1xuXHRcdHdvcmtib29rczpbXSwgc2hlZXRzOltdLCBjaGFydHM6W10sIGRpYWxvZ3M6W10sIG1hY3JvczpbXSxcblx0XHRyZWxzOltdLCBzdHJzOltdLCBjb21tZW50czpbXSwgdGhyZWFkZWRjb21tZW50czpbXSwgbGlua3M6W10sXG5cdFx0Y29yZXByb3BzOltdLCBleHRwcm9wczpbXSwgY3VzdHByb3BzOltdLCB0aGVtZXM6W10sIHN0eWxlczpbXSxcblx0XHRjYWxjY2hhaW5zOltdLCB2YmE6IFtdLCBkcmF3aW5nczogW10sIG1ldGFkYXRhOiBbXSwgcGVvcGxlOltdLFxuXHRcdFRPRE86W10sIHhtbG5zOiBcIlwiIH0vKjphbnkqLyk7XG59XG5cbmZ1bmN0aW9uIHBhcnNlX2N0KGRhdGEvKjo/c3RyaW5nKi8pIHtcblx0dmFyIGN0ID0gbmV3X2N0KCk7XG5cdGlmKCFkYXRhIHx8ICFkYXRhLm1hdGNoKSByZXR1cm4gY3Q7XG5cdHZhciBjdGV4dCA9IHt9O1xuXHQoZGF0YS5tYXRjaCh0YWdyZWdleCl8fFtdKS5mb3JFYWNoKGZ1bmN0aW9uKHgpIHtcblx0XHR2YXIgeSA9IHBhcnNleG1sdGFnKHgpO1xuXHRcdHN3aXRjaCh5WzBdLnJlcGxhY2UobnNyZWdleCxcIjxcIikpIHtcblx0XHRcdGNhc2UgJzw/eG1sJzogYnJlYWs7XG5cdFx0XHRjYXNlICc8VHlwZXMnOiBjdC54bWxucyA9IHlbJ3htbG5zJyArICh5WzBdLm1hdGNoKC88KFxcdyspOi8pfHxbXCJcIixcIlwiXSlbMV0gXTsgYnJlYWs7XG5cdFx0XHRjYXNlICc8RGVmYXVsdCc6IGN0ZXh0W3kuRXh0ZW5zaW9uXSA9IHkuQ29udGVudFR5cGU7IGJyZWFrO1xuXHRcdFx0Y2FzZSAnPE92ZXJyaWRlJzpcblx0XHRcdFx0aWYoY3RbY3QydHlwZVt5LkNvbnRlbnRUeXBlXV0gIT09IHVuZGVmaW5lZCkgY3RbY3QydHlwZVt5LkNvbnRlbnRUeXBlXV0ucHVzaCh5LlBhcnROYW1lKTtcblx0XHRcdFx0YnJlYWs7XG5cdFx0fVxuXHR9KTtcblx0aWYoY3QueG1sbnMgIT09IFhNTE5TLkNUKSB0aHJvdyBuZXcgRXJyb3IoXCJVbmtub3duIE5hbWVzcGFjZTogXCIgKyBjdC54bWxucyk7XG5cdGN0LmNhbGNjaGFpbiA9IGN0LmNhbGNjaGFpbnMubGVuZ3RoID4gMCA/IGN0LmNhbGNjaGFpbnNbMF0gOiBcIlwiO1xuXHRjdC5zc3QgPSBjdC5zdHJzLmxlbmd0aCA+IDAgPyBjdC5zdHJzWzBdIDogXCJcIjtcblx0Y3Quc3R5bGUgPSBjdC5zdHlsZXMubGVuZ3RoID4gMCA/IGN0LnN0eWxlc1swXSA6IFwiXCI7XG5cdGN0LmRlZmF1bHRzID0gY3RleHQ7XG5cdGRlbGV0ZSBjdC5jYWxjY2hhaW5zO1xuXHRyZXR1cm4gY3Q7XG59XG5cbmZ1bmN0aW9uIHdyaXRlX2N0KGN0LCBvcHRzKS8qOnN0cmluZyovIHtcblx0dmFyIHR5cGUyY3QvKntbc3RyaW5nXTpBcnJheTxzdHJpbmc+fSovID0gZXZlcnRfYXJyKGN0MnR5cGUpO1xuXG5cdHZhciBvLyo6QXJyYXk8c3RyaW5nPiovID0gW10sIHY7XG5cdG9bby5sZW5ndGhdID0gKFhNTF9IRUFERVIpO1xuXHRvW28ubGVuZ3RoXSA9IHdyaXRleHRhZygnVHlwZXMnLCBudWxsLCB7XG5cdFx0J3htbG5zJzogWE1MTlMuQ1QsXG5cdFx0J3htbG5zOnhzZCc6IFhNTE5TLnhzZCxcblx0XHQneG1sbnM6eHNpJzogWE1MTlMueHNpXG5cdH0pO1xuXG5cdG8gPSBvLmNvbmNhdChbXG5cdFx0Wyd4bWwnLCAnYXBwbGljYXRpb24veG1sJ10sXG5cdFx0WydiaW4nLCAnYXBwbGljYXRpb24vdm5kLm1zLWV4Y2VsLnNoZWV0LmJpbmFyeS5tYWNyb0VuYWJsZWQubWFpbiddLFxuXHRcdFsndm1sJywgJ2FwcGxpY2F0aW9uL3ZuZC5vcGVueG1sZm9ybWF0cy1vZmZpY2Vkb2N1bWVudC52bWxEcmF3aW5nJ10sXG5cdFx0WydkYXRhJywgJ2FwcGxpY2F0aW9uL3ZuZC5vcGVueG1sZm9ybWF0cy1vZmZpY2Vkb2N1bWVudC5tb2RlbCtkYXRhJ10sXG5cdFx0LyogZnJvbSB0ZXN0IGZpbGVzICovXG5cdFx0WydibXAnLCAnaW1hZ2UvYm1wJ10sXG5cdFx0WydwbmcnLCAnaW1hZ2UvcG5nJ10sXG5cdFx0WydnaWYnLCAnaW1hZ2UvZ2lmJ10sXG5cdFx0WydlbWYnLCAnaW1hZ2UveC1lbWYnXSxcblx0XHRbJ3dtZicsICdpbWFnZS94LXdtZiddLFxuXHRcdFsnanBnJywgJ2ltYWdlL2pwZWcnXSwgWydqcGVnJywgJ2ltYWdlL2pwZWcnXSxcblx0XHRbJ3RpZicsICdpbWFnZS90aWZmJ10sIFsndGlmZicsICdpbWFnZS90aWZmJ10sXG5cdFx0WydwZGYnLCAnYXBwbGljYXRpb24vcGRmJ10sXG5cdFx0WydyZWxzJywgJ2FwcGxpY2F0aW9uL3ZuZC5vcGVueG1sZm9ybWF0cy1wYWNrYWdlLnJlbGF0aW9uc2hpcHMreG1sJ11cblx0XS5tYXAoZnVuY3Rpb24oeCkge1xuXHRcdHJldHVybiB3cml0ZXh0YWcoJ0RlZmF1bHQnLCBudWxsLCB7J0V4dGVuc2lvbic6eFswXSwgJ0NvbnRlbnRUeXBlJzogeFsxXX0pO1xuXHR9KSk7XG5cblx0Lyogb25seSB3cml0ZSBmaXJzdCBpbnN0YW5jZSAqL1xuXHR2YXIgZjEgPSBmdW5jdGlvbih3KSB7XG5cdFx0aWYoY3Rbd10gJiYgY3Rbd10ubGVuZ3RoID4gMCkge1xuXHRcdFx0diA9IGN0W3ddWzBdO1xuXHRcdFx0b1tvLmxlbmd0aF0gPSAod3JpdGV4dGFnKCdPdmVycmlkZScsIG51bGwsIHtcblx0XHRcdFx0J1BhcnROYW1lJzogKHZbMF0gPT0gJy8nID8gXCJcIjpcIi9cIikgKyB2LFxuXHRcdFx0XHQnQ29udGVudFR5cGUnOiBDVF9MSVNUW3ddW29wdHMuYm9va1R5cGVdIHx8IENUX0xJU1Rbd11bJ3hsc3gnXVxuXHRcdFx0fSkpO1xuXHRcdH1cblx0fTtcblxuXHQvKiBib29rIHR5cGUtc3BlY2lmaWMgKi9cblx0dmFyIGYyID0gZnVuY3Rpb24odykge1xuXHRcdChjdFt3XXx8W10pLmZvckVhY2goZnVuY3Rpb24odikge1xuXHRcdFx0b1tvLmxlbmd0aF0gPSAod3JpdGV4dGFnKCdPdmVycmlkZScsIG51bGwsIHtcblx0XHRcdFx0J1BhcnROYW1lJzogKHZbMF0gPT0gJy8nID8gXCJcIjpcIi9cIikgKyB2LFxuXHRcdFx0XHQnQ29udGVudFR5cGUnOiBDVF9MSVNUW3ddW29wdHMuYm9va1R5cGVdIHx8IENUX0xJU1Rbd11bJ3hsc3gnXVxuXHRcdFx0fSkpO1xuXHRcdH0pO1xuXHR9O1xuXG5cdC8qIHN0YW5kYXJkIHR5cGUgKi9cblx0dmFyIGYzID0gZnVuY3Rpb24odCkge1xuXHRcdChjdFt0XXx8W10pLmZvckVhY2goZnVuY3Rpb24odikge1xuXHRcdFx0b1tvLmxlbmd0aF0gPSAod3JpdGV4dGFnKCdPdmVycmlkZScsIG51bGwsIHtcblx0XHRcdFx0J1BhcnROYW1lJzogKHZbMF0gPT0gJy8nID8gXCJcIjpcIi9cIikgKyB2LFxuXHRcdFx0XHQnQ29udGVudFR5cGUnOiB0eXBlMmN0W3RdWzBdXG5cdFx0XHR9KSk7XG5cdFx0fSk7XG5cdH07XG5cblx0ZjEoJ3dvcmtib29rcycpO1xuXHRmMignc2hlZXRzJyk7XG5cdGYyKCdjaGFydHMnKTtcblx0ZjMoJ3RoZW1lcycpO1xuXHRbJ3N0cnMnLCAnc3R5bGVzJ10uZm9yRWFjaChmMSk7XG5cdFsnY29yZXByb3BzJywgJ2V4dHByb3BzJywgJ2N1c3Rwcm9wcyddLmZvckVhY2goZjMpO1xuXHRmMygndmJhJyk7XG5cdGYzKCdjb21tZW50cycpO1xuXHRmMygndGhyZWFkZWRjb21tZW50cycpO1xuXHRmMygnZHJhd2luZ3MnKTtcblx0ZjIoJ21ldGFkYXRhJyk7XG5cdGYzKCdwZW9wbGUnKTtcblx0aWYoby5sZW5ndGg+Mil7IG9bby5sZW5ndGhdID0gKCc8L1R5cGVzPicpOyBvWzFdPW9bMV0ucmVwbGFjZShcIi8+XCIsXCI+XCIpOyB9XG5cdHJldHVybiBvLmpvaW4oXCJcIik7XG59XG4vKiA5LjMgUmVsYXRpb25zaGlwcyAqL1xudmFyIFJFTFMgPSAoe1xuXHRXQjogXCJodHRwOi8vc2NoZW1hcy5vcGVueG1sZm9ybWF0cy5vcmcvb2ZmaWNlRG9jdW1lbnQvMjAwNi9yZWxhdGlvbnNoaXBzL29mZmljZURvY3VtZW50XCIsXG5cdFNIRUVUOiBcImh0dHA6Ly9zaGVldGpzLm9wZW54bWxmb3JtYXRzLm9yZy9vZmZpY2VEb2N1bWVudC8yMDA2L3JlbGF0aW9uc2hpcHMvb2ZmaWNlRG9jdW1lbnRcIixcblx0SExJTks6IFwiaHR0cDovL3NjaGVtYXMub3BlbnhtbGZvcm1hdHMub3JnL29mZmljZURvY3VtZW50LzIwMDYvcmVsYXRpb25zaGlwcy9oeXBlcmxpbmtcIixcblx0Vk1MOiBcImh0dHA6Ly9zY2hlbWFzLm9wZW54bWxmb3JtYXRzLm9yZy9vZmZpY2VEb2N1bWVudC8yMDA2L3JlbGF0aW9uc2hpcHMvdm1sRHJhd2luZ1wiLFxuXHRYUEFUSDogXCJodHRwOi8vc2NoZW1hcy5vcGVueG1sZm9ybWF0cy5vcmcvb2ZmaWNlRG9jdW1lbnQvMjAwNi9yZWxhdGlvbnNoaXBzL2V4dGVybmFsTGlua1BhdGhcIixcblx0WE1JU1M6IFwiaHR0cDovL3NjaGVtYXMubWljcm9zb2Z0LmNvbS9vZmZpY2UvMjAwNi9yZWxhdGlvbnNoaXBzL3hsRXh0ZXJuYWxMaW5rUGF0aC94bFBhdGhNaXNzaW5nXCIsXG5cdFhMSU5LOiBcImh0dHA6Ly9zY2hlbWFzLm9wZW54bWxmb3JtYXRzLm9yZy9vZmZpY2VEb2N1bWVudC8yMDA2L3JlbGF0aW9uc2hpcHMvZXh0ZXJuYWxMaW5rXCIsXG5cdENYTUw6IFwiaHR0cDovL3NjaGVtYXMub3BlbnhtbGZvcm1hdHMub3JnL29mZmljZURvY3VtZW50LzIwMDYvcmVsYXRpb25zaGlwcy9jdXN0b21YbWxcIixcblx0Q1hNTFA6IFwiaHR0cDovL3NjaGVtYXMub3BlbnhtbGZvcm1hdHMub3JnL29mZmljZURvY3VtZW50LzIwMDYvcmVsYXRpb25zaGlwcy9jdXN0b21YbWxQcm9wc1wiLFxuXHRDTU5UOiBcImh0dHA6Ly9zY2hlbWFzLm9wZW54bWxmb3JtYXRzLm9yZy9vZmZpY2VEb2N1bWVudC8yMDA2L3JlbGF0aW9uc2hpcHMvY29tbWVudHNcIixcblx0Q09SRV9QUk9QUzogXCJodHRwOi8vc2NoZW1hcy5vcGVueG1sZm9ybWF0cy5vcmcvcGFja2FnZS8yMDA2L3JlbGF0aW9uc2hpcHMvbWV0YWRhdGEvY29yZS1wcm9wZXJ0aWVzXCIsXG5cdEVYVF9QUk9QUzogJ2h0dHA6Ly9zY2hlbWFzLm9wZW54bWxmb3JtYXRzLm9yZy9vZmZpY2VEb2N1bWVudC8yMDA2L3JlbGF0aW9uc2hpcHMvZXh0ZW5kZWQtcHJvcGVydGllcycsXG5cdENVU1RfUFJPUFM6ICdodHRwOi8vc2NoZW1hcy5vcGVueG1sZm9ybWF0cy5vcmcvb2ZmaWNlRG9jdW1lbnQvMjAwNi9yZWxhdGlvbnNoaXBzL2N1c3RvbS1wcm9wZXJ0aWVzJyxcblx0U1NUOiBcImh0dHA6Ly9zY2hlbWFzLm9wZW54bWxmb3JtYXRzLm9yZy9vZmZpY2VEb2N1bWVudC8yMDA2L3JlbGF0aW9uc2hpcHMvc2hhcmVkU3RyaW5nc1wiLFxuXHRTVFk6IFwiaHR0cDovL3NjaGVtYXMub3BlbnhtbGZvcm1hdHMub3JnL29mZmljZURvY3VtZW50LzIwMDYvcmVsYXRpb25zaGlwcy9zdHlsZXNcIixcblx0VEhFTUU6IFwiaHR0cDovL3NjaGVtYXMub3BlbnhtbGZvcm1hdHMub3JnL29mZmljZURvY3VtZW50LzIwMDYvcmVsYXRpb25zaGlwcy90aGVtZVwiLFxuXHRDSEFSVDogXCJodHRwOi8vc2NoZW1hcy5vcGVueG1sZm9ybWF0cy5vcmcvb2ZmaWNlRG9jdW1lbnQvMjAwNi9yZWxhdGlvbnNoaXBzL2NoYXJ0XCIsXG5cdENIQVJURVg6IFwiaHR0cDovL3NjaGVtYXMubWljcm9zb2Z0LmNvbS9vZmZpY2UvMjAxNC9yZWxhdGlvbnNoaXBzL2NoYXJ0RXhcIixcblx0Q1M6IFwiaHR0cDovL3NjaGVtYXMub3BlbnhtbGZvcm1hdHMub3JnL29mZmljZURvY3VtZW50LzIwMDYvcmVsYXRpb25zaGlwcy9jaGFydHNoZWV0XCIsXG5cdFdTOiBbXG5cdFx0XCJodHRwOi8vc2NoZW1hcy5vcGVueG1sZm9ybWF0cy5vcmcvb2ZmaWNlRG9jdW1lbnQvMjAwNi9yZWxhdGlvbnNoaXBzL3dvcmtzaGVldFwiLFxuXHRcdFwiaHR0cDovL3B1cmwub2NsYy5vcmcvb294bWwvb2ZmaWNlRG9jdW1lbnQvcmVsYXRpb25zaGlwcy93b3Jrc2hlZXRcIlxuXHRdLFxuXHREUzogXCJodHRwOi8vc2NoZW1hcy5vcGVueG1sZm9ybWF0cy5vcmcvb2ZmaWNlRG9jdW1lbnQvMjAwNi9yZWxhdGlvbnNoaXBzL2RpYWxvZ3NoZWV0XCIsXG5cdE1TOiBcImh0dHA6Ly9zY2hlbWFzLm1pY3Jvc29mdC5jb20vb2ZmaWNlLzIwMDYvcmVsYXRpb25zaGlwcy94bE1hY3Jvc2hlZXRcIixcblx0SU1HOiBcImh0dHA6Ly9zY2hlbWFzLm9wZW54bWxmb3JtYXRzLm9yZy9vZmZpY2VEb2N1bWVudC8yMDA2L3JlbGF0aW9uc2hpcHMvaW1hZ2VcIixcblx0RFJBVzogXCJodHRwOi8vc2NoZW1hcy5vcGVueG1sZm9ybWF0cy5vcmcvb2ZmaWNlRG9jdW1lbnQvMjAwNi9yZWxhdGlvbnNoaXBzL2RyYXdpbmdcIixcblx0WExNRVRBOiBcImh0dHA6Ly9zY2hlbWFzLm9wZW54bWxmb3JtYXRzLm9yZy9vZmZpY2VEb2N1bWVudC8yMDA2L3JlbGF0aW9uc2hpcHMvc2hlZXRNZXRhZGF0YVwiLFxuXHRUQ01OVDogXCJodHRwOi8vc2NoZW1hcy5taWNyb3NvZnQuY29tL29mZmljZS8yMDE3LzEwL3JlbGF0aW9uc2hpcHMvdGhyZWFkZWRDb21tZW50XCIsXG5cdFBFT1BMRTogXCJodHRwOi8vc2NoZW1hcy5taWNyb3NvZnQuY29tL29mZmljZS8yMDE3LzEwL3JlbGF0aW9uc2hpcHMvcGVyc29uXCIsXG5cdFZCQTogXCJodHRwOi8vc2NoZW1hcy5taWNyb3NvZnQuY29tL29mZmljZS8yMDA2L3JlbGF0aW9uc2hpcHMvdmJhUHJvamVjdFwiXG59Lyo6YW55Ki8pO1xuXG5cbi8qIDkuMy4zIFJlcHJlc2VudGluZyBSZWxhdGlvbnNoaXBzICovXG5mdW5jdGlvbiBnZXRfcmVsc19wYXRoKGZpbGUvKjpzdHJpbmcqLykvKjpzdHJpbmcqLyB7XG5cdHZhciBuID0gZmlsZS5sYXN0SW5kZXhPZihcIi9cIik7XG5cdHJldHVybiBmaWxlLnNsaWNlKDAsbisxKSArICdfcmVscy8nICsgZmlsZS5zbGljZShuKzEpICsgXCIucmVsc1wiO1xufVxuXG5mdW5jdGlvbiBwYXJzZV9yZWxzKGRhdGEvKjo/c3RyaW5nKi8sIGN1cnJlbnRGaWxlUGF0aC8qOnN0cmluZyovKSB7XG5cdHZhciByZWxzID0ge1wiIWlkXCI6e319O1xuXHRpZiAoIWRhdGEpIHJldHVybiByZWxzO1xuXHRpZiAoY3VycmVudEZpbGVQYXRoLmNoYXJBdCgwKSAhPT0gJy8nKSB7XG5cdFx0Y3VycmVudEZpbGVQYXRoID0gJy8nK2N1cnJlbnRGaWxlUGF0aDtcblx0fVxuXHR2YXIgaGFzaCA9IHt9O1xuXG5cdChkYXRhLm1hdGNoKHRhZ3JlZ2V4KXx8W10pLmZvckVhY2goZnVuY3Rpb24oeCkge1xuXHRcdHZhciB5ID0gcGFyc2V4bWx0YWcoeCk7XG5cdFx0LyogOS4zLjIuMiBPUENfUmVsYXRpb25zaGlwcyAqL1xuXHRcdGlmICh5WzBdID09PSAnPFJlbGF0aW9uc2hpcCcpIHtcblx0XHRcdHZhciByZWwgPSB7fTsgcmVsLlR5cGUgPSB5LlR5cGU7IHJlbC5UYXJnZXQgPSB5LlRhcmdldDsgcmVsLklkID0geS5JZDsgaWYoeS5UYXJnZXRNb2RlKSByZWwuVGFyZ2V0TW9kZSA9IHkuVGFyZ2V0TW9kZTtcblx0XHRcdHZhciBjYW5vbmljdGFyZ2V0ID0geS5UYXJnZXRNb2RlID09PSAnRXh0ZXJuYWwnID8geS5UYXJnZXQgOiByZXNvbHZlX3BhdGgoeS5UYXJnZXQsIGN1cnJlbnRGaWxlUGF0aCk7XG5cdFx0XHRyZWxzW2Nhbm9uaWN0YXJnZXRdID0gcmVsO1xuXHRcdFx0aGFzaFt5LklkXSA9IHJlbDtcblx0XHR9XG5cdH0pO1xuXHRyZWxzW1wiIWlkXCJdID0gaGFzaDtcblx0cmV0dXJuIHJlbHM7XG59XG5cblxuLyogVE9ETyAqL1xuZnVuY3Rpb24gd3JpdGVfcmVscyhyZWxzKS8qOnN0cmluZyovIHtcblx0dmFyIG8gPSBbWE1MX0hFQURFUiwgd3JpdGV4dGFnKCdSZWxhdGlvbnNoaXBzJywgbnVsbCwge1xuXHRcdC8vJ3htbG5zOm5zMCc6IFhNTE5TLlJFTFMsXG5cdFx0J3htbG5zJzogWE1MTlMuUkVMU1xuXHR9KV07XG5cdGtleXMocmVsc1snIWlkJ10pLmZvckVhY2goZnVuY3Rpb24ocmlkKSB7XG5cdFx0b1tvLmxlbmd0aF0gPSAod3JpdGV4dGFnKCdSZWxhdGlvbnNoaXAnLCBudWxsLCByZWxzWychaWQnXVtyaWRdKSk7XG5cdH0pO1xuXHRpZihvLmxlbmd0aD4yKXsgb1tvLmxlbmd0aF0gPSAoJzwvUmVsYXRpb25zaGlwcz4nKTsgb1sxXT1vWzFdLnJlcGxhY2UoXCIvPlwiLFwiPlwiKTsgfVxuXHRyZXR1cm4gby5qb2luKFwiXCIpO1xufVxuXG5mdW5jdGlvbiBhZGRfcmVscyhyZWxzLCBySWQvKjpudW1iZXIqLywgZiwgdHlwZSwgcmVsb2JqLCB0YXJnZXRtb2RlLyo6P3N0cmluZyovKS8qOm51bWJlciovIHtcblx0aWYoIXJlbG9iaikgcmVsb2JqID0ge307XG5cdGlmKCFyZWxzWychaWQnXSkgcmVsc1snIWlkJ10gPSB7fTtcblx0aWYoIXJlbHNbJyFpZHgnXSkgcmVsc1snIWlkeCddID0gMTtcblx0aWYocklkIDwgMCkgZm9yKHJJZCA9IHJlbHNbJyFpZHgnXTsgcmVsc1snIWlkJ11bJ3JJZCcgKyBySWRdOyArK3JJZCl7LyogZW1wdHkgKi99XG5cdHJlbHNbJyFpZHgnXSA9IHJJZCArIDE7XG5cdHJlbG9iai5JZCA9ICdySWQnICsgcklkO1xuXHRyZWxvYmouVHlwZSA9IHR5cGU7XG5cdHJlbG9iai5UYXJnZXQgPSBmO1xuXHRpZih0YXJnZXRtb2RlKSByZWxvYmouVGFyZ2V0TW9kZSA9IHRhcmdldG1vZGU7XG5cdGVsc2UgaWYoW1JFTFMuSExJTkssIFJFTFMuWFBBVEgsIFJFTFMuWE1JU1NdLmluZGV4T2YocmVsb2JqLlR5cGUpID4gLTEpIHJlbG9iai5UYXJnZXRNb2RlID0gXCJFeHRlcm5hbFwiO1xuXHRpZihyZWxzWychaWQnXVtyZWxvYmouSWRdKSB0aHJvdyBuZXcgRXJyb3IoXCJDYW5ub3QgcmV3cml0ZSBySWQgXCIgKyBySWQpO1xuXHRyZWxzWychaWQnXVtyZWxvYmouSWRdID0gcmVsb2JqO1xuXHRyZWxzWygnLycgKyByZWxvYmouVGFyZ2V0KS5yZXBsYWNlKFwiLy9cIixcIi9cIildID0gcmVsb2JqO1xuXHRyZXR1cm4gcklkO1xufVxuLyogT3BlbiBEb2N1bWVudCBGb3JtYXQgZm9yIE9mZmljZSBBcHBsaWNhdGlvbnMgKE9wZW5Eb2N1bWVudCkgVmVyc2lvbiAxLjIgKi9cbi8qIFBhcnQgMyBTZWN0aW9uIDQgTWFuaWZlc3QgRmlsZSAqL1xudmFyIENUX09EUyA9IFwiYXBwbGljYXRpb24vdm5kLm9hc2lzLm9wZW5kb2N1bWVudC5zcHJlYWRzaGVldFwiO1xuZnVuY3Rpb24gcGFyc2VfbWFuaWZlc3QoZCwgb3B0cykge1xuXHR2YXIgc3RyID0geGxtbF9ub3JtYWxpemUoZCk7XG5cdHZhciBSbjtcblx0dmFyIEZFdGFnO1xuXHR3aGlsZSgoUm4gPSB4bG1scmVnZXguZXhlYyhzdHIpKSkgc3dpdGNoKFJuWzNdKSB7XG5cdFx0Y2FzZSAnbWFuaWZlc3QnOiBicmVhazsgLy8gNC4yIDxtYW5pZmVzdDptYW5pZmVzdD5cblx0XHRjYXNlICdmaWxlLWVudHJ5JzogLy8gNC4zIDxtYW5pZmVzdDpmaWxlLWVudHJ5PlxuXHRcdFx0RkV0YWcgPSBwYXJzZXhtbHRhZyhSblswXSwgZmFsc2UpO1xuXHRcdFx0aWYoRkV0YWcucGF0aCA9PSAnLycgJiYgRkV0YWcudHlwZSAhPT0gQ1RfT0RTKSB0aHJvdyBuZXcgRXJyb3IoXCJUaGlzIE9wZW5Eb2N1bWVudCBpcyBub3QgYSBzcHJlYWRzaGVldFwiKTtcblx0XHRcdGJyZWFrO1xuXHRcdGNhc2UgJ2VuY3J5cHRpb24tZGF0YSc6IC8vIDQuNCA8bWFuaWZlc3Q6ZW5jcnlwdGlvbi1kYXRhPlxuXHRcdGNhc2UgJ2FsZ29yaXRobSc6IC8vIDQuNSA8bWFuaWZlc3Q6YWxnb3JpdGhtPlxuXHRcdGNhc2UgJ3N0YXJ0LWtleS1nZW5lcmF0aW9uJzogLy8gNC42IDxtYW5pZmVzdDpzdGFydC1rZXktZ2VuZXJhdGlvbj5cblx0XHRjYXNlICdrZXktZGVyaXZhdGlvbic6IC8vIDQuNyA8bWFuaWZlc3Q6a2V5LWRlcml2YXRpb24+XG5cdFx0XHR0aHJvdyBuZXcgRXJyb3IoXCJVbnN1cHBvcnRlZCBPRFMgRW5jcnlwdGlvblwiKTtcblx0XHRkZWZhdWx0OiBpZihvcHRzICYmIG9wdHMuV1RGKSB0aHJvdyBSbjtcblx0fVxufVxuXG5mdW5jdGlvbiB3cml0ZV9tYW5pZmVzdChtYW5pZmVzdC8qOkFycmF5PEFycmF5PHN0cmluZz4gPiovKS8qOnN0cmluZyovIHtcblx0dmFyIG8gPSBbWE1MX0hFQURFUl07XG5cdG8ucHVzaCgnPG1hbmlmZXN0Om1hbmlmZXN0IHhtbG5zOm1hbmlmZXN0PVwidXJuOm9hc2lzOm5hbWVzOnRjOm9wZW5kb2N1bWVudDp4bWxuczptYW5pZmVzdDoxLjBcIiBtYW5pZmVzdDp2ZXJzaW9uPVwiMS4yXCI+XFxuJyk7XG5cdG8ucHVzaCgnICA8bWFuaWZlc3Q6ZmlsZS1lbnRyeSBtYW5pZmVzdDpmdWxsLXBhdGg9XCIvXCIgbWFuaWZlc3Q6dmVyc2lvbj1cIjEuMlwiIG1hbmlmZXN0Om1lZGlhLXR5cGU9XCJhcHBsaWNhdGlvbi92bmQub2FzaXMub3BlbmRvY3VtZW50LnNwcmVhZHNoZWV0XCIvPlxcbicpO1xuXHRmb3IodmFyIGkgPSAwOyBpIDwgbWFuaWZlc3QubGVuZ3RoOyArK2kpIG8ucHVzaCgnICA8bWFuaWZlc3Q6ZmlsZS1lbnRyeSBtYW5pZmVzdDpmdWxsLXBhdGg9XCInICsgbWFuaWZlc3RbaV1bMF0gKyAnXCIgbWFuaWZlc3Q6bWVkaWEtdHlwZT1cIicgKyBtYW5pZmVzdFtpXVsxXSArICdcIi8+XFxuJyk7XG5cdG8ucHVzaCgnPC9tYW5pZmVzdDptYW5pZmVzdD4nKTtcblx0cmV0dXJuIG8uam9pbihcIlwiKTtcbn1cblxuLyogUGFydCAzIFNlY3Rpb24gNiBNZXRhZGF0YSBNYW5pZmVzdCBGaWxlICovXG5mdW5jdGlvbiB3cml0ZV9yZGZfdHlwZShmaWxlLyo6c3RyaW5nKi8sIHJlcy8qOnN0cmluZyovLCB0YWcvKjo/c3RyaW5nKi8pIHtcblx0cmV0dXJuIFtcblx0XHQnICA8cmRmOkRlc2NyaXB0aW9uIHJkZjphYm91dD1cIicgKyBmaWxlICsgJ1wiPlxcbicsXG5cdFx0JyAgICA8cmRmOnR5cGUgcmRmOnJlc291cmNlPVwiaHR0cDovL2RvY3Mub2FzaXMtb3Blbi5vcmcvbnMvb2ZmaWNlLzEuMi9tZXRhLycgKyAodGFnIHx8IFwib2RmXCIpICsgJyMnICsgcmVzICsgJ1wiLz5cXG4nLFxuXHRcdCcgIDwvcmRmOkRlc2NyaXB0aW9uPlxcbidcblx0XS5qb2luKFwiXCIpO1xufVxuZnVuY3Rpb24gd3JpdGVfcmRmX2hhcyhiYXNlLyo6c3RyaW5nKi8sIGZpbGUvKjpzdHJpbmcqLykge1xuXHRyZXR1cm4gW1xuXHRcdCcgIDxyZGY6RGVzY3JpcHRpb24gcmRmOmFib3V0PVwiJyArIGJhc2UgKyAnXCI+XFxuJyxcblx0XHQnICAgIDxuczA6aGFzUGFydCB4bWxuczpuczA9XCJodHRwOi8vZG9jcy5vYXNpcy1vcGVuLm9yZy9ucy9vZmZpY2UvMS4yL21ldGEvcGtnI1wiIHJkZjpyZXNvdXJjZT1cIicgKyBmaWxlICsgJ1wiLz5cXG4nLFxuXHRcdCcgIDwvcmRmOkRlc2NyaXB0aW9uPlxcbidcblx0XS5qb2luKFwiXCIpO1xufVxuZnVuY3Rpb24gd3JpdGVfcmRmKHJkZikge1xuXHR2YXIgbyA9IFtYTUxfSEVBREVSXTtcblx0by5wdXNoKCc8cmRmOlJERiB4bWxuczpyZGY9XCJodHRwOi8vd3d3LnczLm9yZy8xOTk5LzAyLzIyLXJkZi1zeW50YXgtbnMjXCI+XFxuJyk7XG5cdGZvcih2YXIgaSA9IDA7IGkgIT0gcmRmLmxlbmd0aDsgKytpKSB7XG5cdFx0by5wdXNoKHdyaXRlX3JkZl90eXBlKHJkZltpXVswXSwgcmRmW2ldWzFdKSk7XG5cdFx0by5wdXNoKHdyaXRlX3JkZl9oYXMoXCJcIixyZGZbaV1bMF0pKTtcblx0fVxuXHRvLnB1c2god3JpdGVfcmRmX3R5cGUoXCJcIixcIkRvY3VtZW50XCIsIFwicGtnXCIpKTtcblx0by5wdXNoKCc8L3JkZjpSREY+Jyk7XG5cdHJldHVybiBvLmpvaW4oXCJcIik7XG59XG4vKiBUT0RPOiBwdWxsIHByb3BlcnRpZXMgKi9cbmZ1bmN0aW9uIHdyaXRlX21ldGFfb2RzKC8qOjogd2I6IFdvcmtib29rLCBvcHRzOiBhbnkqLykvKjpzdHJpbmcqLyB7XG5cdHJldHVybiAnPG9mZmljZTpkb2N1bWVudC1tZXRhIHhtbG5zOm9mZmljZT1cInVybjpvYXNpczpuYW1lczp0YzpvcGVuZG9jdW1lbnQ6eG1sbnM6b2ZmaWNlOjEuMFwiIHhtbG5zOm1ldGE9XCJ1cm46b2FzaXM6bmFtZXM6dGM6b3BlbmRvY3VtZW50OnhtbG5zOm1ldGE6MS4wXCIgeG1sbnM6ZGM9XCJodHRwOi8vcHVybC5vcmcvZGMvZWxlbWVudHMvMS4xL1wiIHhtbG5zOnhsaW5rPVwiaHR0cDovL3d3dy53My5vcmcvMTk5OS94bGlua1wiIG9mZmljZTp2ZXJzaW9uPVwiMS4yXCI+PG9mZmljZTptZXRhPjxtZXRhOmdlbmVyYXRvcj5TaGVldCcgKyAnSlMgJyArIFhMU1gudmVyc2lvbiArICc8L21ldGE6Z2VuZXJhdG9yPjwvb2ZmaWNlOm1ldGE+PC9vZmZpY2U6ZG9jdW1lbnQtbWV0YT4nO1xufVxuXG4vKiBFQ01BLTM3NiBQYXJ0IElJIDExLjEgQ29yZSBQcm9wZXJ0aWVzIFBhcnQgKi9cbi8qIFtNUy1PU0hBUkVEXSAyLjMuMy4yLlsxLTJdLjEgKFBJRFNJL1BJRERTSSkgKi9cbnZhciBDT1JFX1BST1BTLyo6QXJyYXk8QXJyYXk8c3RyaW5nPiA+Ki8gPSBbXG5cdFtcImNwOmNhdGVnb3J5XCIsIFwiQ2F0ZWdvcnlcIl0sXG5cdFtcImNwOmNvbnRlbnRTdGF0dXNcIiwgXCJDb250ZW50U3RhdHVzXCJdLFxuXHRbXCJjcDprZXl3b3Jkc1wiLCBcIktleXdvcmRzXCJdLFxuXHRbXCJjcDpsYXN0TW9kaWZpZWRCeVwiLCBcIkxhc3RBdXRob3JcIl0sXG5cdFtcImNwOmxhc3RQcmludGVkXCIsIFwiTGFzdFByaW50ZWRcIl0sXG5cdFtcImNwOnJldmlzaW9uXCIsIFwiUmV2TnVtYmVyXCJdLFxuXHRbXCJjcDp2ZXJzaW9uXCIsIFwiVmVyc2lvblwiXSxcblx0W1wiZGM6Y3JlYXRvclwiLCBcIkF1dGhvclwiXSxcblx0W1wiZGM6ZGVzY3JpcHRpb25cIiwgXCJDb21tZW50c1wiXSxcblx0W1wiZGM6aWRlbnRpZmllclwiLCBcIklkZW50aWZpZXJcIl0sXG5cdFtcImRjOmxhbmd1YWdlXCIsIFwiTGFuZ3VhZ2VcIl0sXG5cdFtcImRjOnN1YmplY3RcIiwgXCJTdWJqZWN0XCJdLFxuXHRbXCJkYzp0aXRsZVwiLCBcIlRpdGxlXCJdLFxuXHRbXCJkY3Rlcm1zOmNyZWF0ZWRcIiwgXCJDcmVhdGVkRGF0ZVwiLCAnZGF0ZSddLFxuXHRbXCJkY3Rlcm1zOm1vZGlmaWVkXCIsIFwiTW9kaWZpZWREYXRlXCIsICdkYXRlJ11cbl07XG5cbnZhciBDT1JFX1BST1BTX1JFR0VYLyo6QXJyYXk8UmVnRXhwPiovID0gLyojX19QVVJFX18qLyhmdW5jdGlvbigpIHtcblx0dmFyIHIgPSBuZXcgQXJyYXkoQ09SRV9QUk9QUy5sZW5ndGgpO1xuXHRmb3IodmFyIGkgPSAwOyBpIDwgQ09SRV9QUk9QUy5sZW5ndGg7ICsraSkge1xuXHRcdHZhciBmID0gQ09SRV9QUk9QU1tpXTtcblx0XHR2YXIgZyA9IFwiKD86XCIrIGZbMF0uc2xpY2UoMCxmWzBdLmluZGV4T2YoXCI6XCIpKSArXCI6KVwiKyBmWzBdLnNsaWNlKGZbMF0uaW5kZXhPZihcIjpcIikrMSk7XG5cdFx0cltpXSA9IG5ldyBSZWdFeHAoXCI8XCIgKyBnICsgXCJbXj5dKj4oW1xcXFxzXFxcXFNdKj8pPFxcL1wiICsgZyArIFwiPlwiKTtcblx0fVxuXHRyZXR1cm4gcjtcbn0pKCk7XG5cbmZ1bmN0aW9uIHBhcnNlX2NvcmVfcHJvcHMoZGF0YSkge1xuXHR2YXIgcCA9IHt9O1xuXHRkYXRhID0gdXRmOHJlYWQoZGF0YSk7XG5cblx0Zm9yKHZhciBpID0gMDsgaSA8IENPUkVfUFJPUFMubGVuZ3RoOyArK2kpIHtcblx0XHR2YXIgZiA9IENPUkVfUFJPUFNbaV0sIGN1ciA9IGRhdGEubWF0Y2goQ09SRV9QUk9QU19SRUdFWFtpXSk7XG5cdFx0aWYoY3VyICE9IG51bGwgJiYgY3VyLmxlbmd0aCA+IDApIHBbZlsxXV0gPSB1bmVzY2FwZXhtbChjdXJbMV0pO1xuXHRcdGlmKGZbMl0gPT09ICdkYXRlJyAmJiBwW2ZbMV1dKSBwW2ZbMV1dID0gcGFyc2VEYXRlKHBbZlsxXV0pO1xuXHR9XG5cblx0cmV0dXJuIHA7XG59XG5cbmZ1bmN0aW9uIGNwX2RvaXQoZiwgZywgaCwgbywgcCkge1xuXHRpZihwW2ZdICE9IG51bGwgfHwgZyA9PSBudWxsIHx8IGcgPT09IFwiXCIpIHJldHVybjtcblx0cFtmXSA9IGc7XG5cdGcgPSBlc2NhcGV4bWwoZyk7XG5cdG9bby5sZW5ndGhdID0gKGggPyB3cml0ZXh0YWcoZixnLGgpIDogd3JpdGV0YWcoZixnKSk7XG59XG5cbmZ1bmN0aW9uIHdyaXRlX2NvcmVfcHJvcHMoY3AsIF9vcHRzKSB7XG5cdHZhciBvcHRzID0gX29wdHMgfHwge307XG5cdHZhciBvID0gW1hNTF9IRUFERVIsIHdyaXRleHRhZygnY3A6Y29yZVByb3BlcnRpZXMnLCBudWxsLCB7XG5cdFx0Ly8neG1sbnMnOiBYTUxOUy5DT1JFX1BST1BTLFxuXHRcdCd4bWxuczpjcCc6IFhNTE5TLkNPUkVfUFJPUFMsXG5cdFx0J3htbG5zOmRjJzogWE1MTlMuZGMsXG5cdFx0J3htbG5zOmRjdGVybXMnOiBYTUxOUy5kY3Rlcm1zLFxuXHRcdCd4bWxuczpkY21pdHlwZSc6IFhNTE5TLmRjbWl0eXBlLFxuXHRcdCd4bWxuczp4c2knOiBYTUxOUy54c2lcblx0fSldLCBwID0ge307XG5cdGlmKCFjcCAmJiAhb3B0cy5Qcm9wcykgcmV0dXJuIG8uam9pbihcIlwiKTtcblxuXHRpZihjcCkge1xuXHRcdGlmKGNwLkNyZWF0ZWREYXRlICE9IG51bGwpIGNwX2RvaXQoXCJkY3Rlcm1zOmNyZWF0ZWRcIiwgdHlwZW9mIGNwLkNyZWF0ZWREYXRlID09PSBcInN0cmluZ1wiID8gY3AuQ3JlYXRlZERhdGUgOiB3cml0ZV93M2NkdGYoY3AuQ3JlYXRlZERhdGUsIG9wdHMuV1RGKSwge1wieHNpOnR5cGVcIjpcImRjdGVybXM6VzNDRFRGXCJ9LCBvLCBwKTtcblx0XHRpZihjcC5Nb2RpZmllZERhdGUgIT0gbnVsbCkgY3BfZG9pdChcImRjdGVybXM6bW9kaWZpZWRcIiwgdHlwZW9mIGNwLk1vZGlmaWVkRGF0ZSA9PT0gXCJzdHJpbmdcIiA/IGNwLk1vZGlmaWVkRGF0ZSA6IHdyaXRlX3czY2R0ZihjcC5Nb2RpZmllZERhdGUsIG9wdHMuV1RGKSwge1wieHNpOnR5cGVcIjpcImRjdGVybXM6VzNDRFRGXCJ9LCBvLCBwKTtcblx0fVxuXG5cdGZvcih2YXIgaSA9IDA7IGkgIT0gQ09SRV9QUk9QUy5sZW5ndGg7ICsraSkge1xuXHRcdHZhciBmID0gQ09SRV9QUk9QU1tpXTtcblx0XHR2YXIgdiA9IG9wdHMuUHJvcHMgJiYgb3B0cy5Qcm9wc1tmWzFdXSAhPSBudWxsID8gb3B0cy5Qcm9wc1tmWzFdXSA6IGNwID8gY3BbZlsxXV0gOiBudWxsO1xuXHRcdGlmKHYgPT09IHRydWUpIHYgPSBcIjFcIjtcblx0XHRlbHNlIGlmKHYgPT09IGZhbHNlKSB2ID0gXCIwXCI7XG5cdFx0ZWxzZSBpZih0eXBlb2YgdiA9PSBcIm51bWJlclwiKSB2ID0gU3RyaW5nKHYpO1xuXHRcdGlmKHYgIT0gbnVsbCkgY3BfZG9pdChmWzBdLCB2LCBudWxsLCBvLCBwKTtcblx0fVxuXHRpZihvLmxlbmd0aD4yKXsgb1tvLmxlbmd0aF0gPSAoJzwvY3A6Y29yZVByb3BlcnRpZXM+Jyk7IG9bMV09b1sxXS5yZXBsYWNlKFwiLz5cIixcIj5cIik7IH1cblx0cmV0dXJuIG8uam9pbihcIlwiKTtcbn1cbi8qIDE1LjIuMTIuMyBFeHRlbmRlZCBGaWxlIFByb3BlcnRpZXMgUGFydCAqL1xuLyogW01TLU9TSEFSRURdIDIuMy4zLjIuWzEtMl0uMSAoUElEU0kvUElERFNJKSAqL1xudmFyIEVYVF9QUk9QUy8qOkFycmF5PEFycmF5PHN0cmluZz4gPiovID0gW1xuXHRbXCJBcHBsaWNhdGlvblwiLCBcIkFwcGxpY2F0aW9uXCIsIFwic3RyaW5nXCJdLFxuXHRbXCJBcHBWZXJzaW9uXCIsIFwiQXBwVmVyc2lvblwiLCBcInN0cmluZ1wiXSxcblx0W1wiQ29tcGFueVwiLCBcIkNvbXBhbnlcIiwgXCJzdHJpbmdcIl0sXG5cdFtcIkRvY1NlY3VyaXR5XCIsIFwiRG9jU2VjdXJpdHlcIiwgXCJzdHJpbmdcIl0sXG5cdFtcIk1hbmFnZXJcIiwgXCJNYW5hZ2VyXCIsIFwic3RyaW5nXCJdLFxuXHRbXCJIeXBlcmxpbmtzQ2hhbmdlZFwiLCBcIkh5cGVybGlua3NDaGFuZ2VkXCIsIFwiYm9vbFwiXSxcblx0W1wiU2hhcmVkRG9jXCIsIFwiU2hhcmVkRG9jXCIsIFwiYm9vbFwiXSxcblx0W1wiTGlua3NVcFRvRGF0ZVwiLCBcIkxpbmtzVXBUb0RhdGVcIiwgXCJib29sXCJdLFxuXHRbXCJTY2FsZUNyb3BcIiwgXCJTY2FsZUNyb3BcIiwgXCJib29sXCJdLFxuXHRbXCJIZWFkaW5nUGFpcnNcIiwgXCJIZWFkaW5nUGFpcnNcIiwgXCJyYXdcIl0sXG5cdFtcIlRpdGxlc09mUGFydHNcIiwgXCJUaXRsZXNPZlBhcnRzXCIsIFwicmF3XCJdXG5dO1xuXG52YXIgUHNldWRvUHJvcHNQYWlycyA9IFtcblx0XCJXb3Jrc2hlZXRzXCIsICBcIlNoZWV0TmFtZXNcIixcblx0XCJOYW1lZFJhbmdlc1wiLCBcIkRlZmluZWROYW1lc1wiLFxuXHRcIkNoYXJ0c2hlZXRzXCIsIFwiQ2hhcnROYW1lc1wiXG5dO1xuZnVuY3Rpb24gbG9hZF9wcm9wc19wYWlycyhIUC8qOnN0cmluZ3xBcnJheTxBcnJheTxhbnk+PiovLCBUT1AsIHByb3BzLCBvcHRzKSB7XG5cdHZhciB2ID0gW107XG5cdGlmKHR5cGVvZiBIUCA9PSBcInN0cmluZ1wiKSB2ID0gcGFyc2VWZWN0b3IoSFAsIG9wdHMpO1xuXHRlbHNlIGZvcih2YXIgaiA9IDA7IGogPCBIUC5sZW5ndGg7ICsraikgdiA9IHYuY29uY2F0KEhQW2pdLm1hcChmdW5jdGlvbihocCkgeyByZXR1cm4ge3Y6aHB9OyB9KSk7XG5cdHZhciBwYXJ0cyA9ICh0eXBlb2YgVE9QID09IFwic3RyaW5nXCIpID8gcGFyc2VWZWN0b3IoVE9QLCBvcHRzKS5tYXAoZnVuY3Rpb24gKHgpIHsgcmV0dXJuIHgudjsgfSkgOiBUT1A7XG5cdHZhciBpZHggPSAwLCBsZW4gPSAwO1xuXHRpZihwYXJ0cy5sZW5ndGggPiAwKSBmb3IodmFyIGkgPSAwOyBpICE9PSB2Lmxlbmd0aDsgaSArPSAyKSB7XG5cdFx0bGVuID0gKyh2W2krMV0udik7XG5cdFx0c3dpdGNoKHZbaV0udikge1xuXHRcdFx0Y2FzZSBcIldvcmtzaGVldHNcIjpcblx0XHRcdGNhc2UgXCLlt6XkvZzooahcIjpcblx0XHRcdGNhc2UgXCLQm9C40YHRgtGLXCI6XG5cdFx0XHRjYXNlIFwi2KPZiNix2KfZgiDYp9mE2LnZhdmEXCI6XG5cdFx0XHRjYXNlIFwi44Ov44O844Kv44K344O844OIXCI6XG5cdFx0XHRjYXNlIFwi15LXnNeZ15XXoNeV16og16LXkdeV15PXlFwiOlxuXHRcdFx0Y2FzZSBcIkFyYmVpdHNibMOkdHRlclwiOlxuXHRcdFx0Y2FzZSBcIsOHYWzEscWfbWEgU2F5ZmFsYXLEsVwiOlxuXHRcdFx0Y2FzZSBcIkZldWlsbGVzIGRlIGNhbGN1bFwiOlxuXHRcdFx0Y2FzZSBcIkZvZ2xpIGRpIGxhdm9yb1wiOlxuXHRcdFx0Y2FzZSBcIkZvbGhhcyBkZSBjw6FsY3Vsb1wiOlxuXHRcdFx0Y2FzZSBcIlBsYW5pbGhhc1wiOlxuXHRcdFx0Y2FzZSBcIlJlZ25lYXJrXCI6XG5cdFx0XHRjYXNlIFwiSG9qYXMgZGUgY8OhbGN1bG9cIjpcblx0XHRcdGNhc2UgXCJXZXJrYmxhZGVuXCI6XG5cdFx0XHRcdHByb3BzLldvcmtzaGVldHMgPSBsZW47XG5cdFx0XHRcdHByb3BzLlNoZWV0TmFtZXMgPSBwYXJ0cy5zbGljZShpZHgsIGlkeCArIGxlbik7XG5cdFx0XHRcdGJyZWFrO1xuXG5cdFx0XHRjYXNlIFwiTmFtZWQgUmFuZ2VzXCI6XG5cdFx0XHRjYXNlIFwiUmFuZ29zIGNvbiBub21icmVcIjpcblx0XHRcdGNhc2UgXCLlkI3liY3ku5jjgY3kuIDopqdcIjpcblx0XHRcdGNhc2UgXCJCZW5hbm50ZSBCZXJlaWNoZVwiOlxuXHRcdFx0Y2FzZSBcIk5hdm5naXZuZSBvbXLDpWRlclwiOlxuXHRcdFx0XHRwcm9wcy5OYW1lZFJhbmdlcyA9IGxlbjtcblx0XHRcdFx0cHJvcHMuRGVmaW5lZE5hbWVzID0gcGFydHMuc2xpY2UoaWR4LCBpZHggKyBsZW4pO1xuXHRcdFx0XHRicmVhaztcblxuXHRcdFx0Y2FzZSBcIkNoYXJ0c1wiOlxuXHRcdFx0Y2FzZSBcIkRpYWdyYW1tZVwiOlxuXHRcdFx0XHRwcm9wcy5DaGFydHNoZWV0cyA9IGxlbjtcblx0XHRcdFx0cHJvcHMuQ2hhcnROYW1lcyA9IHBhcnRzLnNsaWNlKGlkeCwgaWR4ICsgbGVuKTtcblx0XHRcdFx0YnJlYWs7XG5cdFx0fVxuXHRcdGlkeCArPSBsZW47XG5cdH1cbn1cblxuZnVuY3Rpb24gcGFyc2VfZXh0X3Byb3BzKGRhdGEsIHAsIG9wdHMpIHtcblx0dmFyIHEgPSB7fTsgaWYoIXApIHAgPSB7fTtcblx0ZGF0YSA9IHV0ZjhyZWFkKGRhdGEpO1xuXG5cdEVYVF9QUk9QUy5mb3JFYWNoKGZ1bmN0aW9uKGYpIHtcblx0XHR2YXIgeG1sID0gKGRhdGEubWF0Y2gobWF0Y2h0YWcoZlswXSkpfHxbXSlbMV07XG5cdFx0c3dpdGNoKGZbMl0pIHtcblx0XHRcdGNhc2UgXCJzdHJpbmdcIjogaWYoeG1sKSBwW2ZbMV1dID0gdW5lc2NhcGV4bWwoeG1sKTsgYnJlYWs7XG5cdFx0XHRjYXNlIFwiYm9vbFwiOiBwW2ZbMV1dID0geG1sID09PSBcInRydWVcIjsgYnJlYWs7XG5cdFx0XHRjYXNlIFwicmF3XCI6XG5cdFx0XHRcdHZhciBjdXIgPSBkYXRhLm1hdGNoKG5ldyBSZWdFeHAoXCI8XCIgKyBmWzBdICsgXCJbXj5dKj4oW1xcXFxzXFxcXFNdKj8pPFxcL1wiICsgZlswXSArIFwiPlwiKSk7XG5cdFx0XHRcdGlmKGN1ciAmJiBjdXIubGVuZ3RoID4gMCkgcVtmWzFdXSA9IGN1clsxXTtcblx0XHRcdFx0YnJlYWs7XG5cdFx0fVxuXHR9KTtcblxuXHRpZihxLkhlYWRpbmdQYWlycyAmJiBxLlRpdGxlc09mUGFydHMpIGxvYWRfcHJvcHNfcGFpcnMocS5IZWFkaW5nUGFpcnMsIHEuVGl0bGVzT2ZQYXJ0cywgcCwgb3B0cyk7XG5cblx0cmV0dXJuIHA7XG59XG5cbmZ1bmN0aW9uIHdyaXRlX2V4dF9wcm9wcyhjcC8qOjosIG9wdHMqLykvKjpzdHJpbmcqLyB7XG5cdHZhciBvLyo6QXJyYXk8c3RyaW5nPiovID0gW10sIFcgPSB3cml0ZXh0YWc7XG5cdGlmKCFjcCkgY3AgPSB7fTtcblx0Y3AuQXBwbGljYXRpb24gPSBcIlNoZWV0SlNcIjtcblx0b1tvLmxlbmd0aF0gPSAoWE1MX0hFQURFUik7XG5cdG9bby5sZW5ndGhdID0gKHdyaXRleHRhZygnUHJvcGVydGllcycsIG51bGwsIHtcblx0XHQneG1sbnMnOiBYTUxOUy5FWFRfUFJPUFMsXG5cdFx0J3htbG5zOnZ0JzogWE1MTlMudnRcblx0fSkpO1xuXG5cdEVYVF9QUk9QUy5mb3JFYWNoKGZ1bmN0aW9uKGYpIHtcblx0XHRpZihjcFtmWzFdXSA9PT0gdW5kZWZpbmVkKSByZXR1cm47XG5cdFx0dmFyIHY7XG5cdFx0c3dpdGNoKGZbMl0pIHtcblx0XHRcdGNhc2UgJ3N0cmluZyc6IHYgPSBlc2NhcGV4bWwoU3RyaW5nKGNwW2ZbMV1dKSk7IGJyZWFrO1xuXHRcdFx0Y2FzZSAnYm9vbCc6IHYgPSBjcFtmWzFdXSA/ICd0cnVlJyA6ICdmYWxzZSc7IGJyZWFrO1xuXHRcdH1cblx0XHRpZih2ICE9PSB1bmRlZmluZWQpIG9bby5sZW5ndGhdID0gKFcoZlswXSwgdikpO1xuXHR9KTtcblxuXHQvKiBUT0RPOiBIZWFkaW5nUGFpcnMsIFRpdGxlc09mUGFydHMgKi9cblx0b1tvLmxlbmd0aF0gPSAoVygnSGVhZGluZ1BhaXJzJywgVygndnQ6dmVjdG9yJywgVygndnQ6dmFyaWFudCcsICc8dnQ6bHBzdHI+V29ya3NoZWV0czwvdnQ6bHBzdHI+JykrVygndnQ6dmFyaWFudCcsIFcoJ3Z0Omk0JywgU3RyaW5nKGNwLldvcmtzaGVldHMpKSksIHtzaXplOjIsIGJhc2VUeXBlOlwidmFyaWFudFwifSkpKTtcblx0b1tvLmxlbmd0aF0gPSAoVygnVGl0bGVzT2ZQYXJ0cycsIFcoJ3Z0OnZlY3RvcicsIGNwLlNoZWV0TmFtZXMubWFwKGZ1bmN0aW9uKHMpIHsgcmV0dXJuIFwiPHZ0Omxwc3RyPlwiICsgZXNjYXBleG1sKHMpICsgXCI8L3Z0Omxwc3RyPlwiOyB9KS5qb2luKFwiXCIpLCB7c2l6ZTogY3AuV29ya3NoZWV0cywgYmFzZVR5cGU6XCJscHN0clwifSkpKTtcblx0aWYoby5sZW5ndGg+Mil7IG9bby5sZW5ndGhdID0gKCc8L1Byb3BlcnRpZXM+Jyk7IG9bMV09b1sxXS5yZXBsYWNlKFwiLz5cIixcIj5cIik7IH1cblx0cmV0dXJuIG8uam9pbihcIlwiKTtcbn1cbi8qIDE1LjIuMTIuMiBDdXN0b20gRmlsZSBQcm9wZXJ0aWVzIFBhcnQgKi9cbnZhciBjdXN0cmVnZXggPSAvPFtePl0rPltePF0qL2c7XG5mdW5jdGlvbiBwYXJzZV9jdXN0X3Byb3BzKGRhdGEvKjpzdHJpbmcqLywgb3B0cykge1xuXHR2YXIgcCA9IHt9LCBuYW1lID0gXCJcIjtcblx0dmFyIG0gPSBkYXRhLm1hdGNoKGN1c3RyZWdleCk7XG5cdGlmKG0pIGZvcih2YXIgaSA9IDA7IGkgIT0gbS5sZW5ndGg7ICsraSkge1xuXHRcdHZhciB4ID0gbVtpXSwgeSA9IHBhcnNleG1sdGFnKHgpO1xuXHRcdHN3aXRjaCh5WzBdKSB7XG5cdFx0XHRjYXNlICc8P3htbCc6IGJyZWFrO1xuXHRcdFx0Y2FzZSAnPFByb3BlcnRpZXMnOiBicmVhaztcblx0XHRcdGNhc2UgJzxwcm9wZXJ0eSc6IG5hbWUgPSB1bmVzY2FwZXhtbCh5Lm5hbWUpOyBicmVhaztcblx0XHRcdGNhc2UgJzwvcHJvcGVydHk+JzogbmFtZSA9IG51bGw7IGJyZWFrO1xuXHRcdFx0ZGVmYXVsdDogaWYgKHguaW5kZXhPZignPHZ0OicpID09PSAwKSB7XG5cdFx0XHRcdHZhciB0b2tzID0geC5zcGxpdCgnPicpO1xuXHRcdFx0XHR2YXIgdHlwZSA9IHRva3NbMF0uc2xpY2UoNCksIHRleHQgPSB0b2tzWzFdO1xuXHRcdFx0XHQvKiAyMi40LjIuMzIgKENUX1ZhcmlhbnQpLiBPbWl0IHRoZSBiaW5hcnkgdHlwZXMgZnJvbSAyMi40IChWYXJpYW50IFR5cGVzKSAqL1xuXHRcdFx0XHRzd2l0Y2godHlwZSkge1xuXHRcdFx0XHRcdGNhc2UgJ2xwc3RyJzogY2FzZSAnYnN0cic6IGNhc2UgJ2xwd3N0cic6XG5cdFx0XHRcdFx0XHRwW25hbWVdID0gdW5lc2NhcGV4bWwodGV4dCk7XG5cdFx0XHRcdFx0XHRicmVhaztcblx0XHRcdFx0XHRjYXNlICdib29sJzpcblx0XHRcdFx0XHRcdHBbbmFtZV0gPSBwYXJzZXhtbGJvb2wodGV4dCk7XG5cdFx0XHRcdFx0XHRicmVhaztcblx0XHRcdFx0XHRjYXNlICdpMSc6IGNhc2UgJ2kyJzogY2FzZSAnaTQnOiBjYXNlICdpOCc6IGNhc2UgJ2ludCc6IGNhc2UgJ3VpbnQnOlxuXHRcdFx0XHRcdFx0cFtuYW1lXSA9IHBhcnNlSW50KHRleHQsIDEwKTtcblx0XHRcdFx0XHRcdGJyZWFrO1xuXHRcdFx0XHRcdGNhc2UgJ3I0JzogY2FzZSAncjgnOiBjYXNlICdkZWNpbWFsJzpcblx0XHRcdFx0XHRcdHBbbmFtZV0gPSBwYXJzZUZsb2F0KHRleHQpO1xuXHRcdFx0XHRcdFx0YnJlYWs7XG5cdFx0XHRcdFx0Y2FzZSAnZmlsZXRpbWUnOiBjYXNlICdkYXRlJzpcblx0XHRcdFx0XHRcdHBbbmFtZV0gPSBwYXJzZURhdGUodGV4dCk7XG5cdFx0XHRcdFx0XHRicmVhaztcblx0XHRcdFx0XHRjYXNlICdjeSc6IGNhc2UgJ2Vycm9yJzpcblx0XHRcdFx0XHRcdHBbbmFtZV0gPSB1bmVzY2FwZXhtbCh0ZXh0KTtcblx0XHRcdFx0XHRcdGJyZWFrO1xuXHRcdFx0XHRcdGRlZmF1bHQ6XG5cdFx0XHRcdFx0XHRpZih0eXBlLnNsaWNlKC0xKSA9PSAnLycpIGJyZWFrO1xuXHRcdFx0XHRcdFx0aWYob3B0cy5XVEYgJiYgdHlwZW9mIGNvbnNvbGUgIT09ICd1bmRlZmluZWQnKSBjb25zb2xlLndhcm4oJ1VuZXhwZWN0ZWQnLCB4LCB0eXBlLCB0b2tzKTtcblx0XHRcdFx0fVxuXHRcdFx0fSBlbHNlIGlmKHguc2xpY2UoMCwyKSA9PT0gXCI8L1wiKSB7LyogZW1wdHkgKi9cblx0XHRcdH0gZWxzZSBpZihvcHRzLldURikgdGhyb3cgbmV3IEVycm9yKHgpO1xuXHRcdH1cblx0fVxuXHRyZXR1cm4gcDtcbn1cblxuZnVuY3Rpb24gd3JpdGVfY3VzdF9wcm9wcyhjcC8qOjosIG9wdHMqLykvKjpzdHJpbmcqLyB7XG5cdHZhciBvID0gW1hNTF9IRUFERVIsIHdyaXRleHRhZygnUHJvcGVydGllcycsIG51bGwsIHtcblx0XHQneG1sbnMnOiBYTUxOUy5DVVNUX1BST1BTLFxuXHRcdCd4bWxuczp2dCc6IFhNTE5TLnZ0XG5cdH0pXTtcblx0aWYoIWNwKSByZXR1cm4gby5qb2luKFwiXCIpO1xuXHR2YXIgcGlkID0gMTtcblx0a2V5cyhjcCkuZm9yRWFjaChmdW5jdGlvbiBjdXN0cHJvcChrKSB7ICsrcGlkO1xuXHRcdG9bby5sZW5ndGhdID0gKHdyaXRleHRhZygncHJvcGVydHknLCB3cml0ZV92dChjcFtrXSwgdHJ1ZSksIHtcblx0XHRcdCdmbXRpZCc6ICd7RDVDREQ1MDUtMkU5Qy0xMDFCLTkzOTctMDgwMDJCMkNGOUFFfScsXG5cdFx0XHQncGlkJzogcGlkLFxuXHRcdFx0J25hbWUnOiBlc2NhcGV4bWwoaylcblx0XHR9KSk7XG5cdH0pO1xuXHRpZihvLmxlbmd0aD4yKXsgb1tvLmxlbmd0aF0gPSAnPC9Qcm9wZXJ0aWVzPic7IG9bMV09b1sxXS5yZXBsYWNlKFwiLz5cIixcIj5cIik7IH1cblx0cmV0dXJuIG8uam9pbihcIlwiKTtcbn1cbi8qIENvbW1vbiBOYW1lIC0+IFhMTUwgTmFtZSAqL1xudmFyIFhMTUxEb2NQcm9wc01hcCA9IHtcblx0VGl0bGU6ICdUaXRsZScsXG5cdFN1YmplY3Q6ICdTdWJqZWN0Jyxcblx0QXV0aG9yOiAnQXV0aG9yJyxcblx0S2V5d29yZHM6ICdLZXl3b3JkcycsXG5cdENvbW1lbnRzOiAnRGVzY3JpcHRpb24nLFxuXHRMYXN0QXV0aG9yOiAnTGFzdEF1dGhvcicsXG5cdFJldk51bWJlcjogJ1JldmlzaW9uJyxcblx0QXBwbGljYXRpb246ICdBcHBOYW1lJyxcblx0LyogVG90YWxUaW1lOiAnVG90YWxUaW1lJywgKi9cblx0TGFzdFByaW50ZWQ6ICdMYXN0UHJpbnRlZCcsXG5cdENyZWF0ZWREYXRlOiAnQ3JlYXRlZCcsXG5cdE1vZGlmaWVkRGF0ZTogJ0xhc3RTYXZlZCcsXG5cdC8qIFBhZ2VzICovXG5cdC8qIFdvcmRzICovXG5cdC8qIENoYXJhY3RlcnMgKi9cblx0Q2F0ZWdvcnk6ICdDYXRlZ29yeScsXG5cdC8qIFByZXNlbnRhdGlvbkZvcm1hdCAqL1xuXHRNYW5hZ2VyOiAnTWFuYWdlcicsXG5cdENvbXBhbnk6ICdDb21wYW55Jyxcblx0LyogR3VpZCAqL1xuXHQvKiBIeXBlcmxpbmtCYXNlICovXG5cdC8qIEJ5dGVzICovXG5cdC8qIExpbmVzICovXG5cdC8qIFBhcmFncmFwaHMgKi9cblx0LyogQ2hhcmFjdGVyc1dpdGhTcGFjZXMgKi9cblx0QXBwVmVyc2lvbjogJ1ZlcnNpb24nLFxuXG5cdENvbnRlbnRTdGF0dXM6ICdDb250ZW50U3RhdHVzJywgLyogTk9URTogbWlzc2luZyBmcm9tIHNjaGVtYSAqL1xuXHRJZGVudGlmaWVyOiAnSWRlbnRpZmllcicsIC8qIE5PVEU6IG1pc3NpbmcgZnJvbSBzY2hlbWEgKi9cblx0TGFuZ3VhZ2U6ICdMYW5ndWFnZScgLyogTk9URTogbWlzc2luZyBmcm9tIHNjaGVtYSAqL1xufTtcbnZhciBldmVydF9YTE1MRFBNO1xuXG5mdW5jdGlvbiB4bG1sX3NldF9wcm9wKFByb3BzLCB0YWcvKjpzdHJpbmcqLywgdmFsKSB7XG5cdGlmKCFldmVydF9YTE1MRFBNKSBldmVydF9YTE1MRFBNID0gZXZlcnQoWExNTERvY1Byb3BzTWFwKTtcblx0dGFnID0gZXZlcnRfWExNTERQTVt0YWddIHx8IHRhZztcblx0UHJvcHNbdGFnXSA9IHZhbDtcbn1cblxuZnVuY3Rpb24geGxtbF93cml0ZV9kb2Nwcm9wcyhQcm9wcywgb3B0cykge1xuXHR2YXIgby8qOkFycmF5PHN0cmluZz4qLyA9IFtdO1xuXHRrZXlzKFhMTUxEb2NQcm9wc01hcCkubWFwKGZ1bmN0aW9uKG0pIHtcblx0XHRmb3IodmFyIGkgPSAwOyBpIDwgQ09SRV9QUk9QUy5sZW5ndGg7ICsraSkgaWYoQ09SRV9QUk9QU1tpXVsxXSA9PSBtKSByZXR1cm4gQ09SRV9QUk9QU1tpXTtcblx0XHRmb3IoaSA9IDA7IGkgPCBFWFRfUFJPUFMubGVuZ3RoOyArK2kpIGlmKEVYVF9QUk9QU1tpXVsxXSA9PSBtKSByZXR1cm4gRVhUX1BST1BTW2ldO1xuXHRcdHRocm93IG07XG5cdH0pLmZvckVhY2goZnVuY3Rpb24ocCkge1xuXHRcdGlmKFByb3BzW3BbMV1dID09IG51bGwpIHJldHVybjtcblx0XHR2YXIgbSA9IG9wdHMgJiYgb3B0cy5Qcm9wcyAmJiBvcHRzLlByb3BzW3BbMV1dICE9IG51bGwgPyBvcHRzLlByb3BzW3BbMV1dIDogUHJvcHNbcFsxXV07XG5cdFx0c3dpdGNoKHBbMl0pIHtcblx0XHRcdGNhc2UgJ2RhdGUnOiBtID0gbmV3IERhdGUobSkudG9JU09TdHJpbmcoKS5yZXBsYWNlKC9cXC5cXGQqWi8sXCJaXCIpOyBicmVhaztcblx0XHR9XG5cdFx0aWYodHlwZW9mIG0gPT0gJ251bWJlcicpIG0gPSBTdHJpbmcobSk7XG5cdFx0ZWxzZSBpZihtID09PSB0cnVlIHx8IG0gPT09IGZhbHNlKSB7IG0gPSBtID8gXCIxXCIgOiBcIjBcIjsgfVxuXHRcdGVsc2UgaWYobSBpbnN0YW5jZW9mIERhdGUpIG0gPSBuZXcgRGF0ZShtKS50b0lTT1N0cmluZygpLnJlcGxhY2UoL1xcLlxcZCpaLyxcIlwiKTtcblx0XHRvLnB1c2god3JpdGV0YWcoWExNTERvY1Byb3BzTWFwW3BbMV1dIHx8IHBbMV0sIG0pKTtcblx0fSk7XG5cdHJldHVybiB3cml0ZXh0YWcoJ0RvY3VtZW50UHJvcGVydGllcycsIG8uam9pbihcIlwiKSwge3htbG5zOlhMTUxOUy5vIH0pO1xufVxuZnVuY3Rpb24geGxtbF93cml0ZV9jdXN0cHJvcHMoUHJvcHMsIEN1c3Rwcm9wcy8qOjosIG9wdHMqLykge1xuXHR2YXIgQkxBQ0tMSVNUID0gW1wiV29ya3NoZWV0c1wiLFwiU2hlZXROYW1lc1wiXTtcblx0dmFyIFQgPSAnQ3VzdG9tRG9jdW1lbnRQcm9wZXJ0aWVzJztcblx0dmFyIG8vKjpBcnJheTxzdHJpbmc+Ki8gPSBbXTtcblx0aWYoUHJvcHMpIGtleXMoUHJvcHMpLmZvckVhY2goZnVuY3Rpb24oaykge1xuXHRcdC8qOjogaWYoIVByb3BzKSByZXR1cm47ICovXG5cdFx0aWYoIU9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChQcm9wcywgaykpIHJldHVybjtcblx0XHRmb3IodmFyIGkgPSAwOyBpIDwgQ09SRV9QUk9QUy5sZW5ndGg7ICsraSkgaWYoayA9PSBDT1JFX1BST1BTW2ldWzFdKSByZXR1cm47XG5cdFx0Zm9yKGkgPSAwOyBpIDwgRVhUX1BST1BTLmxlbmd0aDsgKytpKSBpZihrID09IEVYVF9QUk9QU1tpXVsxXSkgcmV0dXJuO1xuXHRcdGZvcihpID0gMDsgaSA8IEJMQUNLTElTVC5sZW5ndGg7ICsraSkgaWYoayA9PSBCTEFDS0xJU1RbaV0pIHJldHVybjtcblxuXHRcdHZhciBtID0gUHJvcHNba107XG5cdFx0dmFyIHQgPSBcInN0cmluZ1wiO1xuXHRcdGlmKHR5cGVvZiBtID09ICdudW1iZXInKSB7IHQgPSBcImZsb2F0XCI7IG0gPSBTdHJpbmcobSk7IH1cblx0XHRlbHNlIGlmKG0gPT09IHRydWUgfHwgbSA9PT0gZmFsc2UpIHsgdCA9IFwiYm9vbGVhblwiOyBtID0gbSA/IFwiMVwiIDogXCIwXCI7IH1cblx0XHRlbHNlIG0gPSBTdHJpbmcobSk7XG5cdFx0by5wdXNoKHdyaXRleHRhZyhlc2NhcGV4bWx0YWcoayksIG0sIHtcImR0OmR0XCI6dH0pKTtcblx0fSk7XG5cdGlmKEN1c3Rwcm9wcykga2V5cyhDdXN0cHJvcHMpLmZvckVhY2goZnVuY3Rpb24oaykge1xuXHRcdC8qOjogaWYoIUN1c3Rwcm9wcykgcmV0dXJuOyAqL1xuXHRcdGlmKCFPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwoQ3VzdHByb3BzLCBrKSkgcmV0dXJuO1xuXHRcdGlmKFByb3BzICYmIE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChQcm9wcywgaykpIHJldHVybjtcblx0XHR2YXIgbSA9IEN1c3Rwcm9wc1trXTtcblx0XHR2YXIgdCA9IFwic3RyaW5nXCI7XG5cdFx0aWYodHlwZW9mIG0gPT0gJ251bWJlcicpIHsgdCA9IFwiZmxvYXRcIjsgbSA9IFN0cmluZyhtKTsgfVxuXHRcdGVsc2UgaWYobSA9PT0gdHJ1ZSB8fCBtID09PSBmYWxzZSkgeyB0ID0gXCJib29sZWFuXCI7IG0gPSBtID8gXCIxXCIgOiBcIjBcIjsgfVxuXHRcdGVsc2UgaWYobSBpbnN0YW5jZW9mIERhdGUpIHsgdCA9IFwiZGF0ZVRpbWUudHpcIjsgbSA9IG0udG9JU09TdHJpbmcoKTsgfVxuXHRcdGVsc2UgbSA9IFN0cmluZyhtKTtcblx0XHRvLnB1c2god3JpdGV4dGFnKGVzY2FwZXhtbHRhZyhrKSwgbSwge1wiZHQ6ZHRcIjp0fSkpO1xuXHR9KTtcblx0cmV0dXJuICc8JyArIFQgKyAnIHhtbG5zPVwiJyArIFhMTUxOUy5vICsgJ1wiPicgKyBvLmpvaW4oXCJcIikgKyAnPC8nICsgVCArICc+Jztcbn1cbi8qIFtNUy1EVFlQXSAyLjMuMyBGSUxFVElNRSAqL1xuLyogW01TLU9MRURTXSAyLjEuMyBGSUxFVElNRSAoUGFja2V0IFZlcnNpb24pICovXG4vKiBbTVMtT0xFUFNdIDIuOCBGSUxFVElNRSAoUGFja2V0IFZlcnNpb24pICovXG5mdW5jdGlvbiBwYXJzZV9GSUxFVElNRShibG9iKSB7XG5cdHZhciBkd0xvd0RhdGVUaW1lID0gYmxvYi5yZWFkX3NoaWZ0KDQpLCBkd0hpZ2hEYXRlVGltZSA9IGJsb2IucmVhZF9zaGlmdCg0KTtcblx0cmV0dXJuIG5ldyBEYXRlKCgoZHdIaWdoRGF0ZVRpbWUvMWU3Kk1hdGgucG93KDIsMzIpICsgZHdMb3dEYXRlVGltZS8xZTcpIC0gMTE2NDQ0NzM2MDApKjEwMDApLnRvSVNPU3RyaW5nKCkucmVwbGFjZSgvXFwuMDAwLyxcIlwiKTtcbn1cbmZ1bmN0aW9uIHdyaXRlX0ZJTEVUSU1FKHRpbWUvKjpzdHJpbmd8RGF0ZSovKSB7XG5cdHZhciBkYXRlID0gKHR5cGVvZiB0aW1lID09IFwic3RyaW5nXCIpID8gbmV3IERhdGUoRGF0ZS5wYXJzZSh0aW1lKSkgOiB0aW1lO1xuXHR2YXIgdCA9IGRhdGUuZ2V0VGltZSgpIC8gMTAwMCArIDExNjQ0NDczNjAwO1xuXHR2YXIgbCA9IHQgJSBNYXRoLnBvdygyLDMyKSwgaCA9ICh0IC0gbCkgLyBNYXRoLnBvdygyLDMyKTtcblx0bCAqPSAxZTc7IGggKj0gMWU3O1xuXHR2YXIgdyA9IChsIC8gTWF0aC5wb3coMiwzMikpIHwgMDtcblx0aWYodyA+IDApIHsgbCA9IGwgJSBNYXRoLnBvdygyLDMyKTsgaCArPSB3OyB9XG5cdHZhciBvID0gbmV3X2J1Zig4KTsgby53cml0ZV9zaGlmdCg0LCBsKTsgby53cml0ZV9zaGlmdCg0LCBoKTsgcmV0dXJuIG87XG59XG5cbi8qIFtNUy1PU0hBUkVEXSAyLjMuMy4xLjQgTHBzdHIgKi9cbmZ1bmN0aW9uIHBhcnNlX2xwc3RyKGJsb2IsIHR5cGUsIHBhZC8qOj9udW1iZXIqLykge1xuXHR2YXIgc3RhcnQgPSBibG9iLmw7XG5cdHZhciBzdHIgPSBibG9iLnJlYWRfc2hpZnQoMCwgJ2xwc3RyLWNwJyk7XG5cdGlmKHBhZCkgd2hpbGUoKGJsb2IubCAtIHN0YXJ0KSAmIDMpICsrYmxvYi5sO1xuXHRyZXR1cm4gc3RyO1xufVxuXG4vKiBbTVMtT1NIQVJFRF0gMi4zLjMuMS42IExwd3N0ciAqL1xuZnVuY3Rpb24gcGFyc2VfbHB3c3RyKGJsb2IsIHR5cGUsIHBhZCkge1xuXHR2YXIgc3RyID0gYmxvYi5yZWFkX3NoaWZ0KDAsICdscHdzdHInKTtcblx0aWYocGFkKSBibG9iLmwgKz0gKDQgLSAoKHN0ci5sZW5ndGgrMSkgJiAzKSkgJiAzO1xuXHRyZXR1cm4gc3RyO1xufVxuXG5cbi8qIFtNUy1PU0hBUkVEXSAyLjMuMy4xLjExIFZ0U3RyaW5nICovXG4vKiBbTVMtT1NIQVJFRF0gMi4zLjMuMS4xMiBWdFVuYWxpZ25lZFN0cmluZyAqL1xuZnVuY3Rpb24gcGFyc2VfVnRTdHJpbmdCYXNlKGJsb2IsIHN0cmluZ1R5cGUsIHBhZCkge1xuXHRpZihzdHJpbmdUeXBlID09PSAweDFGIC8qVlRfTFBXU1RSKi8pIHJldHVybiBwYXJzZV9scHdzdHIoYmxvYik7XG5cdHJldHVybiBwYXJzZV9scHN0cihibG9iLCBzdHJpbmdUeXBlLCBwYWQpO1xufVxuXG5mdW5jdGlvbiBwYXJzZV9WdFN0cmluZyhibG9iLCB0Lyo6bnVtYmVyKi8sIHBhZC8qOj9ib29sZWFuKi8pIHsgcmV0dXJuIHBhcnNlX1Z0U3RyaW5nQmFzZShibG9iLCB0LCBwYWQgPT09IGZhbHNlID8gMDogNCk7IH1cbmZ1bmN0aW9uIHBhcnNlX1Z0VW5hbGlnbmVkU3RyaW5nKGJsb2IsIHQvKjpudW1iZXIqLykgeyBpZighdCkgdGhyb3cgbmV3IEVycm9yKFwiVnRVbmFsaWduZWRTdHJpbmcgbXVzdCBoYXZlIHBvc2l0aXZlIGxlbmd0aFwiKTsgcmV0dXJuIHBhcnNlX1Z0U3RyaW5nQmFzZShibG9iLCB0LCAwKTsgfVxuXG4vKiBbTVMtT1NIQVJFRF0gMi4zLjMuMS43IFZ0VmVjTHB3c3RyVmFsdWUgKi9cbmZ1bmN0aW9uIHBhcnNlX1Z0VmVjTHB3c3RyVmFsdWUoYmxvYikvKjpBcnJheTxzdHJpbmc+Ki8ge1xuXHR2YXIgbGVuZ3RoID0gYmxvYi5yZWFkX3NoaWZ0KDQpO1xuXHR2YXIgcmV0Lyo6QXJyYXk8c3RyaW5nPiovID0gW107XG5cdGZvcih2YXIgaSA9IDA7IGkgIT0gbGVuZ3RoOyArK2kpIHtcblx0XHR2YXIgc3RhcnQgPSBibG9iLmw7XG5cdFx0cmV0W2ldID0gYmxvYi5yZWFkX3NoaWZ0KDAsICdscHdzdHInKS5yZXBsYWNlKGNocjAsJycpO1xuXHRcdGlmKChibG9iLmwgLSBzdGFydCkgJiAweDAyKSBibG9iLmwgKz0gMjtcblx0fVxuXHRyZXR1cm4gcmV0O1xufVxuXG4vKiBbTVMtT1NIQVJFRF0gMi4zLjMuMS45IFZ0VmVjVW5hbGlnbmVkTHBzdHJWYWx1ZSAqL1xuZnVuY3Rpb24gcGFyc2VfVnRWZWNVbmFsaWduZWRMcHN0clZhbHVlKGJsb2IpLyo6QXJyYXk8c3RyaW5nPiovIHtcblx0dmFyIGxlbmd0aCA9IGJsb2IucmVhZF9zaGlmdCg0KTtcblx0dmFyIHJldC8qOkFycmF5PHN0cmluZz4qLyA9IFtdO1xuXHRmb3IodmFyIGkgPSAwOyBpICE9IGxlbmd0aDsgKytpKSByZXRbaV0gPSBibG9iLnJlYWRfc2hpZnQoMCwgJ2xwc3RyLWNwJykucmVwbGFjZShjaHIwLCcnKTtcblx0cmV0dXJuIHJldDtcbn1cblxuXG4vKiBbTVMtT1NIQVJFRF0gMi4zLjMuMS4xMyBWdEhlYWRpbmdQYWlyICovXG5mdW5jdGlvbiBwYXJzZV9WdEhlYWRpbmdQYWlyKGJsb2IpIHtcblx0dmFyIHN0YXJ0ID0gYmxvYi5sO1xuXHR2YXIgaGVhZGluZ1N0cmluZyA9IHBhcnNlX1R5cGVkUHJvcGVydHlWYWx1ZShibG9iLCBWVF9VU1RSKTtcblx0aWYoYmxvYltibG9iLmxdID09IDB4MDAgJiYgYmxvYltibG9iLmwrMV0gPT0gMHgwMCAmJiAoKGJsb2IubCAtIHN0YXJ0KSAmIDB4MDIpKSBibG9iLmwgKz0gMjtcblx0dmFyIGhlYWRlclBhcnRzID0gcGFyc2VfVHlwZWRQcm9wZXJ0eVZhbHVlKGJsb2IsIFZUX0k0KTtcblx0cmV0dXJuIFtoZWFkaW5nU3RyaW5nLCBoZWFkZXJQYXJ0c107XG59XG5cbi8qIFtNUy1PU0hBUkVEXSAyLjMuMy4xLjE0IFZ0VmVjSGVhZGluZ1BhaXJWYWx1ZSAqL1xuZnVuY3Rpb24gcGFyc2VfVnRWZWNIZWFkaW5nUGFpclZhbHVlKGJsb2IpIHtcblx0dmFyIGNFbGVtZW50cyA9IGJsb2IucmVhZF9zaGlmdCg0KTtcblx0dmFyIG91dCA9IFtdO1xuXHRmb3IodmFyIGkgPSAwOyBpIDwgY0VsZW1lbnRzIC8gMjsgKytpKSBvdXQucHVzaChwYXJzZV9WdEhlYWRpbmdQYWlyKGJsb2IpKTtcblx0cmV0dXJuIG91dDtcbn1cblxuLyogW01TLU9MRVBTXSAyLjE4LjEgRGljdGlvbmFyeSAodXNlcyAyLjE3LCAyLjE2KSAqL1xuZnVuY3Rpb24gcGFyc2VfZGljdGlvbmFyeShibG9iLENvZGVQYWdlKSB7XG5cdHZhciBjbnQgPSBibG9iLnJlYWRfc2hpZnQoNCk7XG5cdHZhciBkaWN0Lyo6e1tudW1iZXJdOnN0cmluZ30qLyA9ICh7fS8qOmFueSovKTtcblx0Zm9yKHZhciBqID0gMDsgaiAhPSBjbnQ7ICsraikge1xuXHRcdHZhciBwaWQgPSBibG9iLnJlYWRfc2hpZnQoNCk7XG5cdFx0dmFyIGxlbiA9IGJsb2IucmVhZF9zaGlmdCg0KTtcblx0XHRkaWN0W3BpZF0gPSBibG9iLnJlYWRfc2hpZnQobGVuLCAoQ29kZVBhZ2UgPT09IDB4NEIwID8ndXRmMTZsZSc6J3V0ZjgnKSkucmVwbGFjZShjaHIwLCcnKS5yZXBsYWNlKGNocjEsJyEnKTtcblx0XHRpZihDb2RlUGFnZSA9PT0gMHg0QjAgJiYgKGxlbiAlIDIpKSBibG9iLmwgKz0gMjtcblx0fVxuXHRpZihibG9iLmwgJiAzKSBibG9iLmwgPSAoYmxvYi5sPj4yKzEpPDwyO1xuXHRyZXR1cm4gZGljdDtcbn1cblxuLyogW01TLU9MRVBTXSAyLjkgQkxPQiAqL1xuZnVuY3Rpb24gcGFyc2VfQkxPQihibG9iKSB7XG5cdHZhciBzaXplID0gYmxvYi5yZWFkX3NoaWZ0KDQpO1xuXHR2YXIgYnl0ZXMgPSBibG9iLnNsaWNlKGJsb2IubCxibG9iLmwrc2l6ZSk7XG5cdGJsb2IubCArPSBzaXplO1xuXHRpZigoc2l6ZSAmIDMpID4gMCkgYmxvYi5sICs9ICg0IC0gKHNpemUgJiAzKSkgJiAzO1xuXHRyZXR1cm4gYnl0ZXM7XG59XG5cbi8qIFtNUy1PTEVQU10gMi4xMSBDbGlwYm9hcmREYXRhICovXG5mdW5jdGlvbiBwYXJzZV9DbGlwYm9hcmREYXRhKGJsb2IpIHtcblx0Ly8gVE9ET1xuXHR2YXIgbyA9IHt9O1xuXHRvLlNpemUgPSBibG9iLnJlYWRfc2hpZnQoNCk7XG5cdC8vby5Gb3JtYXQgPSBibG9iLnJlYWRfc2hpZnQoNCk7XG5cdGJsb2IubCArPSBvLlNpemUgKyAzIC0gKG8uU2l6ZSAtIDEpICUgNDtcblx0cmV0dXJuIG87XG59XG5cbi8qIFtNUy1PTEVQU10gMi4xNSBUeXBlZFByb3BlcnR5VmFsdWUgKi9cbmZ1bmN0aW9uIHBhcnNlX1R5cGVkUHJvcGVydHlWYWx1ZShibG9iLCB0eXBlLyo6bnVtYmVyKi8sIF9vcHRzKS8qOmFueSovIHtcblx0dmFyIHQgPSBibG9iLnJlYWRfc2hpZnQoMiksIHJldCwgb3B0cyA9IF9vcHRzfHx7fTtcblx0YmxvYi5sICs9IDI7XG5cdGlmKHR5cGUgIT09IFZUX1ZBUklBTlQpXG5cdGlmKHQgIT09IHR5cGUgJiYgVlRfQ1VTVE9NLmluZGV4T2YodHlwZSk9PT0tMSAmJiAhKCh0eXBlICYgMHhGRkZFKSA9PSAweDEwMUUgJiYgKHQgJiAweEZGRkUpID09IDB4MTAxRSkpIHRocm93IG5ldyBFcnJvcignRXhwZWN0ZWQgdHlwZSAnICsgdHlwZSArICcgc2F3ICcgKyB0KTtcblx0c3dpdGNoKHR5cGUgPT09IFZUX1ZBUklBTlQgPyB0IDogdHlwZSkge1xuXHRcdGNhc2UgMHgwMiAvKlZUX0kyKi86IHJldCA9IGJsb2IucmVhZF9zaGlmdCgyLCAnaScpOyBpZighb3B0cy5yYXcpIGJsb2IubCArPSAyOyByZXR1cm4gcmV0O1xuXHRcdGNhc2UgMHgwMyAvKlZUX0k0Ki86IHJldCA9IGJsb2IucmVhZF9zaGlmdCg0LCAnaScpOyByZXR1cm4gcmV0O1xuXHRcdGNhc2UgMHgwQiAvKlZUX0JPT0wqLzogcmV0dXJuIGJsb2IucmVhZF9zaGlmdCg0KSAhPT0gMHgwO1xuXHRcdGNhc2UgMHgxMyAvKlZUX1VJNCovOiByZXQgPSBibG9iLnJlYWRfc2hpZnQoNCk7IHJldHVybiByZXQ7XG5cdFx0Y2FzZSAweDFFIC8qVlRfTFBTVFIqLzogcmV0dXJuIHBhcnNlX2xwc3RyKGJsb2IsIHQsIDQpLnJlcGxhY2UoY2hyMCwnJyk7XG5cdFx0Y2FzZSAweDFGIC8qVlRfTFBXU1RSKi86IHJldHVybiBwYXJzZV9scHdzdHIoYmxvYik7XG5cdFx0Y2FzZSAweDQwIC8qVlRfRklMRVRJTUUqLzogcmV0dXJuIHBhcnNlX0ZJTEVUSU1FKGJsb2IpO1xuXHRcdGNhc2UgMHg0MSAvKlZUX0JMT0IqLzogcmV0dXJuIHBhcnNlX0JMT0IoYmxvYik7XG5cdFx0Y2FzZSAweDQ3IC8qVlRfQ0YqLzogcmV0dXJuIHBhcnNlX0NsaXBib2FyZERhdGEoYmxvYik7XG5cdFx0Y2FzZSAweDUwIC8qVlRfU1RSSU5HKi86IHJldHVybiBwYXJzZV9WdFN0cmluZyhibG9iLCB0LCAhb3B0cy5yYXcpLnJlcGxhY2UoY2hyMCwnJyk7XG5cdFx0Y2FzZSAweDUxIC8qVlRfVVNUUiovOiByZXR1cm4gcGFyc2VfVnRVbmFsaWduZWRTdHJpbmcoYmxvYiwgdC8qLCA0Ki8pLnJlcGxhY2UoY2hyMCwnJyk7XG5cdFx0Y2FzZSAweDEwMEMgLypWVF9WRUNUT1J8VlRfVkFSSUFOVCovOiByZXR1cm4gcGFyc2VfVnRWZWNIZWFkaW5nUGFpclZhbHVlKGJsb2IpO1xuXHRcdGNhc2UgMHgxMDFFIC8qVlRfVkVDVE9SfFZUX0xQU1RSKi86XG5cdFx0Y2FzZSAweDEwMUYgLypWVF9WRUNUT1J8VlRfTFBXU1RSKi86XG5cdFx0XHRyZXR1cm4gdCA9PSAweDEwMUYgPyBwYXJzZV9WdFZlY0xwd3N0clZhbHVlKGJsb2IpIDogcGFyc2VfVnRWZWNVbmFsaWduZWRMcHN0clZhbHVlKGJsb2IpO1xuXHRcdGRlZmF1bHQ6IHRocm93IG5ldyBFcnJvcihcIlR5cGVkUHJvcGVydHlWYWx1ZSB1bnJlY29nbml6ZWQgdHlwZSBcIiArIHR5cGUgKyBcIiBcIiArIHQpO1xuXHR9XG59XG5mdW5jdGlvbiB3cml0ZV9UeXBlZFByb3BlcnR5VmFsdWUodHlwZS8qOm51bWJlciovLCB2YWx1ZSkge1xuXHR2YXIgbyA9IG5ld19idWYoNCksIHAgPSBuZXdfYnVmKDQpO1xuXHRvLndyaXRlX3NoaWZ0KDQsIHR5cGUgPT0gMHg1MCA/IDB4MUYgOiB0eXBlKTtcblx0c3dpdGNoKHR5cGUpIHtcblx0XHRjYXNlIDB4MDMgLypWVF9JNCovOiBwLndyaXRlX3NoaWZ0KC00LCB2YWx1ZSk7IGJyZWFrO1xuXHRcdGNhc2UgMHgwNSAvKlZUX0k0Ki86IHAgPSBuZXdfYnVmKDgpOyBwLndyaXRlX3NoaWZ0KDgsIHZhbHVlLCAnZicpOyBicmVhaztcblx0XHRjYXNlIDB4MEIgLypWVF9CT09MKi86IHAud3JpdGVfc2hpZnQoNCwgdmFsdWUgPyAweDAxIDogMHgwMCk7IGJyZWFrO1xuXHRcdGNhc2UgMHg0MCAvKlZUX0ZJTEVUSU1FKi86IC8qOjogaWYodHlwZW9mIHZhbHVlICE9PSBcInN0cmluZ1wiICYmICEodmFsdWUgaW5zdGFuY2VvZiBEYXRlKSkgdGhyb3cgXCJ1bnJlYWNoYWJsZVwiOyAqLyBwID0gd3JpdGVfRklMRVRJTUUodmFsdWUpOyBicmVhaztcblx0XHRjYXNlIDB4MUYgLypWVF9MUFdTVFIqLzpcblx0XHRjYXNlIDB4NTAgLypWVF9TVFJJTkcqLzpcblx0XHRcdC8qOjogaWYodHlwZW9mIHZhbHVlICE9PSBcInN0cmluZ1wiKSB0aHJvdyBcInVucmVhY2hhYmxlXCI7ICovXG5cdFx0XHRwID0gbmV3X2J1Zig0ICsgMiAqICh2YWx1ZS5sZW5ndGggKyAxKSArICh2YWx1ZS5sZW5ndGggJSAyID8gMCA6IDIpKTtcblx0XHRcdHAud3JpdGVfc2hpZnQoNCwgdmFsdWUubGVuZ3RoICsgMSk7XG5cdFx0XHRwLndyaXRlX3NoaWZ0KDAsIHZhbHVlLCBcImRiY3NcIik7XG5cdFx0XHR3aGlsZShwLmwgIT0gcC5sZW5ndGgpIHAud3JpdGVfc2hpZnQoMSwgMCk7XG5cdFx0XHRicmVhaztcblx0XHRkZWZhdWx0OiB0aHJvdyBuZXcgRXJyb3IoXCJUeXBlZFByb3BlcnR5VmFsdWUgdW5yZWNvZ25pemVkIHR5cGUgXCIgKyB0eXBlICsgXCIgXCIgKyB2YWx1ZSk7XG5cdH1cblx0cmV0dXJuIGJjb25jYXQoW28sIHBdKTtcbn1cblxuLyogW01TLU9MRVBTXSAyLjIwIFByb3BlcnR5U2V0ICovXG5mdW5jdGlvbiBwYXJzZV9Qcm9wZXJ0eVNldChibG9iLCBQSURTSSkge1xuXHR2YXIgc3RhcnRfYWRkciA9IGJsb2IubDtcblx0dmFyIHNpemUgPSBibG9iLnJlYWRfc2hpZnQoNCk7XG5cdHZhciBOdW1Qcm9wcyA9IGJsb2IucmVhZF9zaGlmdCg0KTtcblx0dmFyIFByb3BzID0gW10sIGkgPSAwO1xuXHR2YXIgQ29kZVBhZ2UgPSAwO1xuXHR2YXIgRGljdGlvbmFyeSA9IC0xLCBEaWN0T2JqLyo6e1tudW1iZXJdOnN0cmluZ30qLyA9ICh7fS8qOmFueSovKTtcblx0Zm9yKGkgPSAwOyBpICE9IE51bVByb3BzOyArK2kpIHtcblx0XHR2YXIgUHJvcElEID0gYmxvYi5yZWFkX3NoaWZ0KDQpO1xuXHRcdHZhciBPZmZzZXQgPSBibG9iLnJlYWRfc2hpZnQoNCk7XG5cdFx0UHJvcHNbaV0gPSBbUHJvcElELCBPZmZzZXQgKyBzdGFydF9hZGRyXTtcblx0fVxuXHRQcm9wcy5zb3J0KGZ1bmN0aW9uKHgseSkgeyByZXR1cm4geFsxXSAtIHlbMV07IH0pO1xuXHR2YXIgUHJvcEggPSB7fTtcblx0Zm9yKGkgPSAwOyBpICE9IE51bVByb3BzOyArK2kpIHtcblx0XHRpZihibG9iLmwgIT09IFByb3BzW2ldWzFdKSB7XG5cdFx0XHR2YXIgZmFpbCA9IHRydWU7XG5cdFx0XHRpZihpPjAgJiYgUElEU0kpIHN3aXRjaChQSURTSVtQcm9wc1tpLTFdWzBdXS50KSB7XG5cdFx0XHRcdGNhc2UgMHgwMiAvKlZUX0kyKi86IGlmKGJsb2IubCsyID09PSBQcm9wc1tpXVsxXSkgeyBibG9iLmwrPTI7IGZhaWwgPSBmYWxzZTsgfSBicmVhaztcblx0XHRcdFx0Y2FzZSAweDUwIC8qVlRfU1RSSU5HKi86IGlmKGJsb2IubCA8PSBQcm9wc1tpXVsxXSkgeyBibG9iLmw9UHJvcHNbaV1bMV07IGZhaWwgPSBmYWxzZTsgfSBicmVhaztcblx0XHRcdFx0Y2FzZSAweDEwMEMgLypWVF9WRUNUT1J8VlRfVkFSSUFOVCovOiBpZihibG9iLmwgPD0gUHJvcHNbaV1bMV0pIHsgYmxvYi5sPVByb3BzW2ldWzFdOyBmYWlsID0gZmFsc2U7IH0gYnJlYWs7XG5cdFx0XHR9XG5cdFx0XHRpZigoIVBJRFNJfHxpPT0wKSAmJiBibG9iLmwgPD0gUHJvcHNbaV1bMV0pIHsgZmFpbD1mYWxzZTsgYmxvYi5sID0gUHJvcHNbaV1bMV07IH1cblx0XHRcdGlmKGZhaWwpIHRocm93IG5ldyBFcnJvcihcIlJlYWQgRXJyb3I6IEV4cGVjdGVkIGFkZHJlc3MgXCIgKyBQcm9wc1tpXVsxXSArICcgYXQgJyArIGJsb2IubCArICcgOicgKyBpKTtcblx0XHR9XG5cdFx0aWYoUElEU0kpIHtcblx0XHRcdHZhciBwaWRkc2kgPSBQSURTSVtQcm9wc1tpXVswXV07XG5cdFx0XHRQcm9wSFtwaWRkc2kubl0gPSBwYXJzZV9UeXBlZFByb3BlcnR5VmFsdWUoYmxvYiwgcGlkZHNpLnQsIHtyYXc6dHJ1ZX0pO1xuXHRcdFx0aWYocGlkZHNpLnAgPT09ICd2ZXJzaW9uJykgUHJvcEhbcGlkZHNpLm5dID0gU3RyaW5nKFByb3BIW3BpZGRzaS5uXSA+PiAxNikgKyBcIi5cIiArIChcIjAwMDBcIiArIFN0cmluZyhQcm9wSFtwaWRkc2kubl0gJiAweEZGRkYpKS5zbGljZSgtNCk7XG5cdFx0XHRpZihwaWRkc2kubiA9PSBcIkNvZGVQYWdlXCIpIHN3aXRjaChQcm9wSFtwaWRkc2kubl0pIHtcblx0XHRcdFx0Y2FzZSAwOiBQcm9wSFtwaWRkc2kubl0gPSAxMjUyO1xuXHRcdFx0XHRcdC8qIGZhbGxzIHRocm91Z2ggKi9cblx0XHRcdFx0Y2FzZSA4NzQ6XG5cdFx0XHRcdGNhc2UgOTMyOlxuXHRcdFx0XHRjYXNlIDkzNjpcblx0XHRcdFx0Y2FzZSA5NDk6XG5cdFx0XHRcdGNhc2UgOTUwOlxuXHRcdFx0XHRjYXNlIDEyNTA6XG5cdFx0XHRcdGNhc2UgMTI1MTpcblx0XHRcdFx0Y2FzZSAxMjUzOlxuXHRcdFx0XHRjYXNlIDEyNTQ6XG5cdFx0XHRcdGNhc2UgMTI1NTpcblx0XHRcdFx0Y2FzZSAxMjU2OlxuXHRcdFx0XHRjYXNlIDEyNTc6XG5cdFx0XHRcdGNhc2UgMTI1ODpcblx0XHRcdFx0Y2FzZSAxMDAwMDpcblx0XHRcdFx0Y2FzZSAxMjAwOlxuXHRcdFx0XHRjYXNlIDEyMDE6XG5cdFx0XHRcdGNhc2UgMTI1Mjpcblx0XHRcdFx0Y2FzZSA2NTAwMDogY2FzZSAtNTM2OlxuXHRcdFx0XHRjYXNlIDY1MDAxOiBjYXNlIC01MzU6XG5cdFx0XHRcdFx0c2V0X2NwKENvZGVQYWdlID0gKFByb3BIW3BpZGRzaS5uXT4+PjApICYgMHhGRkZGKTsgYnJlYWs7XG5cdFx0XHRcdGRlZmF1bHQ6IHRocm93IG5ldyBFcnJvcihcIlVuc3VwcG9ydGVkIENvZGVQYWdlOiBcIiArIFByb3BIW3BpZGRzaS5uXSk7XG5cdFx0XHR9XG5cdFx0fSBlbHNlIHtcblx0XHRcdGlmKFByb3BzW2ldWzBdID09PSAweDEpIHtcblx0XHRcdFx0Q29kZVBhZ2UgPSBQcm9wSC5Db2RlUGFnZSA9IChwYXJzZV9UeXBlZFByb3BlcnR5VmFsdWUoYmxvYiwgVlRfSTIpLyo6bnVtYmVyKi8pO1xuXHRcdFx0XHRzZXRfY3AoQ29kZVBhZ2UpO1xuXHRcdFx0XHRpZihEaWN0aW9uYXJ5ICE9PSAtMSkge1xuXHRcdFx0XHRcdHZhciBvbGRwb3MgPSBibG9iLmw7XG5cdFx0XHRcdFx0YmxvYi5sID0gUHJvcHNbRGljdGlvbmFyeV1bMV07XG5cdFx0XHRcdFx0RGljdE9iaiA9IHBhcnNlX2RpY3Rpb25hcnkoYmxvYixDb2RlUGFnZSk7XG5cdFx0XHRcdFx0YmxvYi5sID0gb2xkcG9zO1xuXHRcdFx0XHR9XG5cdFx0XHR9IGVsc2UgaWYoUHJvcHNbaV1bMF0gPT09IDApIHtcblx0XHRcdFx0aWYoQ29kZVBhZ2UgPT09IDApIHsgRGljdGlvbmFyeSA9IGk7IGJsb2IubCA9IFByb3BzW2krMV1bMV07IGNvbnRpbnVlOyB9XG5cdFx0XHRcdERpY3RPYmogPSBwYXJzZV9kaWN0aW9uYXJ5KGJsb2IsQ29kZVBhZ2UpO1xuXHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0dmFyIG5hbWUgPSBEaWN0T2JqW1Byb3BzW2ldWzBdXTtcblx0XHRcdFx0dmFyIHZhbDtcblx0XHRcdFx0LyogW01TLU9TSEFSRURdIDIuMy4zLjIuMy4xLjIgKyBQUk9QVkFSSUFOVCAqL1xuXHRcdFx0XHRzd2l0Y2goYmxvYltibG9iLmxdKSB7XG5cdFx0XHRcdFx0Y2FzZSAweDQxIC8qVlRfQkxPQiovOiBibG9iLmwgKz0gNDsgdmFsID0gcGFyc2VfQkxPQihibG9iKTsgYnJlYWs7XG5cdFx0XHRcdFx0Y2FzZSAweDFFIC8qVlRfTFBTVFIqLzogYmxvYi5sICs9IDQ7IHZhbCA9IHBhcnNlX1Z0U3RyaW5nKGJsb2IsIGJsb2JbYmxvYi5sLTRdKS5yZXBsYWNlKC9cXHUwMDAwKyQvLFwiXCIpOyBicmVhaztcblx0XHRcdFx0XHRjYXNlIDB4MUYgLypWVF9MUFdTVFIqLzogYmxvYi5sICs9IDQ7IHZhbCA9IHBhcnNlX1Z0U3RyaW5nKGJsb2IsIGJsb2JbYmxvYi5sLTRdKS5yZXBsYWNlKC9cXHUwMDAwKyQvLFwiXCIpOyBicmVhaztcblx0XHRcdFx0XHRjYXNlIDB4MDMgLypWVF9JNCovOiBibG9iLmwgKz0gNDsgdmFsID0gYmxvYi5yZWFkX3NoaWZ0KDQsICdpJyk7IGJyZWFrO1xuXHRcdFx0XHRcdGNhc2UgMHgxMyAvKlZUX1VJNCovOiBibG9iLmwgKz0gNDsgdmFsID0gYmxvYi5yZWFkX3NoaWZ0KDQpOyBicmVhaztcblx0XHRcdFx0XHRjYXNlIDB4MDUgLypWVF9SOCovOiBibG9iLmwgKz0gNDsgdmFsID0gYmxvYi5yZWFkX3NoaWZ0KDgsICdmJyk7IGJyZWFrO1xuXHRcdFx0XHRcdGNhc2UgMHgwQiAvKlZUX0JPT0wqLzogYmxvYi5sICs9IDQ7IHZhbCA9IHBhcnNlYm9vbChibG9iLCA0KTsgYnJlYWs7XG5cdFx0XHRcdFx0Y2FzZSAweDQwIC8qVlRfRklMRVRJTUUqLzogYmxvYi5sICs9IDQ7IHZhbCA9IHBhcnNlRGF0ZShwYXJzZV9GSUxFVElNRShibG9iKSk7IGJyZWFrO1xuXHRcdFx0XHRcdGRlZmF1bHQ6IHRocm93IG5ldyBFcnJvcihcInVucGFyc2VkIHZhbHVlOiBcIiArIGJsb2JbYmxvYi5sXSk7XG5cdFx0XHRcdH1cblx0XHRcdFx0UHJvcEhbbmFtZV0gPSB2YWw7XG5cdFx0XHR9XG5cdFx0fVxuXHR9XG5cdGJsb2IubCA9IHN0YXJ0X2FkZHIgKyBzaXplOyAvKiBzdGVwIGFoZWFkIHRvIHNraXAgcGFkZGluZyAqL1xuXHRyZXR1cm4gUHJvcEg7XG59XG52YXIgWExTUFNTa2lwID0gWyBcIkNvZGVQYWdlXCIsIFwiVGh1bWJuYWlsXCIsIFwiX1BJRF9MSU5LQkFTRVwiLCBcIl9QSURfSExJTktTXCIsIFwiU3lzdGVtSWRlbnRpZmllclwiLCBcIkZNVElEXCIgXTsgLy8uY29uY2F0KFBzZXVkb1Byb3BzUGFpcnMpO1xuZnVuY3Rpb24gZ3Vlc3NfcHJvcGVydHlfdHlwZSh2YWwvKjphbnkqLykvKjpudW1iZXIqLyB7XG5cdHN3aXRjaCh0eXBlb2YgdmFsKSB7XG5cdFx0Y2FzZSBcImJvb2xlYW5cIjogcmV0dXJuIDB4MEI7XG5cdFx0Y2FzZSBcIm51bWJlclwiOiByZXR1cm4gKCh2YWx8MCk9PXZhbCkgPyAweDAzIDogMHgwNTtcblx0XHRjYXNlIFwic3RyaW5nXCI6IHJldHVybiAweDFGO1xuXHRcdGNhc2UgXCJvYmplY3RcIjogaWYodmFsIGluc3RhbmNlb2YgRGF0ZSkgcmV0dXJuIDB4NDA7IGJyZWFrO1xuXHR9XG5cdHJldHVybiAtMTtcbn1cbmZ1bmN0aW9uIHdyaXRlX1Byb3BlcnR5U2V0KGVudHJpZXMsIFJFLCBQSURTSSkge1xuXHR2YXIgaGRyID0gbmV3X2J1Zig4KSwgcGlhbyA9IFtdLCBwcm9wID0gW107XG5cdHZhciBzeiA9IDgsIGkgPSAwO1xuXG5cdHZhciBwciA9IG5ld19idWYoOCksIHBpbyA9IG5ld19idWYoOCk7XG5cdHByLndyaXRlX3NoaWZ0KDQsIDB4MDAwMik7XG5cdHByLndyaXRlX3NoaWZ0KDQsIDB4MDRCMCk7XG5cdHBpby53cml0ZV9zaGlmdCg0LCAweDAwMDEpO1xuXHRwcm9wLnB1c2gocHIpOyBwaWFvLnB1c2gocGlvKTtcblx0c3ogKz0gOCArIHByLmxlbmd0aDtcblxuXHRpZighUkUpIHtcblx0XHRwaW8gPSBuZXdfYnVmKDgpO1xuXHRcdHBpby53cml0ZV9zaGlmdCg0LCAwKTtcblx0XHRwaWFvLnVuc2hpZnQocGlvKTtcblxuXHRcdHZhciBidWZzID0gW25ld19idWYoNCldO1xuXHRcdGJ1ZnNbMF0ud3JpdGVfc2hpZnQoNCwgZW50cmllcy5sZW5ndGgpO1xuXHRcdGZvcihpID0gMDsgaSA8IGVudHJpZXMubGVuZ3RoOyArK2kpIHtcblx0XHRcdHZhciB2YWx1ZSA9IGVudHJpZXNbaV1bMF07XG5cdFx0XHRwciA9IG5ld19idWYoNCArIDQgKyAyICogKHZhbHVlLmxlbmd0aCArIDEpICsgKHZhbHVlLmxlbmd0aCAlIDIgPyAwIDogMikpO1xuXHRcdFx0cHIud3JpdGVfc2hpZnQoNCwgaSsyKTtcblx0XHRcdHByLndyaXRlX3NoaWZ0KDQsIHZhbHVlLmxlbmd0aCArIDEpO1xuXHRcdFx0cHIud3JpdGVfc2hpZnQoMCwgdmFsdWUsIFwiZGJjc1wiKTtcblx0XHRcdHdoaWxlKHByLmwgIT0gcHIubGVuZ3RoKSBwci53cml0ZV9zaGlmdCgxLCAwKTtcblx0XHRcdGJ1ZnMucHVzaChwcik7XG5cdFx0fVxuXHRcdHByID0gYmNvbmNhdChidWZzKTtcblx0XHRwcm9wLnVuc2hpZnQocHIpO1xuXHRcdHN6ICs9IDggKyBwci5sZW5ndGg7XG5cdH1cblxuXHRmb3IoaSA9IDA7IGkgPCBlbnRyaWVzLmxlbmd0aDsgKytpKSB7XG5cdFx0aWYoUkUgJiYgIVJFW2VudHJpZXNbaV1bMF1dKSBjb250aW51ZTtcblx0XHRpZihYTFNQU1NraXAuaW5kZXhPZihlbnRyaWVzW2ldWzBdKSA+IC0xIHx8IFBzZXVkb1Byb3BzUGFpcnMuaW5kZXhPZihlbnRyaWVzW2ldWzBdKSA+IC0xKSBjb250aW51ZTtcblx0XHRpZihlbnRyaWVzW2ldWzFdID09IG51bGwpIGNvbnRpbnVlO1xuXG5cdFx0dmFyIHZhbCA9IGVudHJpZXNbaV1bMV0sIGlkeCA9IDA7XG5cdFx0aWYoUkUpIHtcblx0XHRcdGlkeCA9ICtSRVtlbnRyaWVzW2ldWzBdXTtcblx0XHRcdHZhciBwaW5mbyA9IChQSURTSS8qOjogfHwge30qLylbaWR4XS8qOjogfHwge30gKi87XG5cdFx0XHRpZihwaW5mby5wID09IFwidmVyc2lvblwiICYmIHR5cGVvZiB2YWwgPT0gXCJzdHJpbmdcIikge1xuXHRcdFx0XHQvKjo6IGlmKHR5cGVvZiB2YWwgIT09IFwic3RyaW5nXCIpIHRocm93IFwidW5yZWFjaGFibGVcIjsgKi9cblx0XHRcdFx0dmFyIGFyciA9IHZhbC5zcGxpdChcIi5cIik7XG5cdFx0XHRcdHZhbCA9ICgoK2FyclswXSk8PDE2KSArICgoK2FyclsxXSl8fDApO1xuXHRcdFx0fVxuXHRcdFx0cHIgPSB3cml0ZV9UeXBlZFByb3BlcnR5VmFsdWUocGluZm8udCwgdmFsKTtcblx0XHR9IGVsc2Uge1xuXHRcdFx0dmFyIFQgPSBndWVzc19wcm9wZXJ0eV90eXBlKHZhbCk7XG5cdFx0XHRpZihUID09IC0xKSB7IFQgPSAweDFGOyB2YWwgPSBTdHJpbmcodmFsKTsgfVxuXHRcdFx0cHIgPSB3cml0ZV9UeXBlZFByb3BlcnR5VmFsdWUoVCwgdmFsKTtcblx0XHR9XG5cdFx0cHJvcC5wdXNoKHByKTtcblxuXHRcdHBpbyA9IG5ld19idWYoOCk7XG5cdFx0cGlvLndyaXRlX3NoaWZ0KDQsICFSRSA/IDIraSA6IGlkeCk7XG5cdFx0cGlhby5wdXNoKHBpbyk7XG5cblx0XHRzeiArPSA4ICsgcHIubGVuZ3RoO1xuXHR9XG5cblx0dmFyIHcgPSA4ICogKHByb3AubGVuZ3RoICsgMSk7XG5cdGZvcihpID0gMDsgaSA8IHByb3AubGVuZ3RoOyArK2kpIHsgcGlhb1tpXS53cml0ZV9zaGlmdCg0LCB3KTsgdyArPSBwcm9wW2ldLmxlbmd0aDsgfVxuXHRoZHIud3JpdGVfc2hpZnQoNCwgc3opO1xuXHRoZHIud3JpdGVfc2hpZnQoNCwgcHJvcC5sZW5ndGgpO1xuXHRyZXR1cm4gYmNvbmNhdChbaGRyXS5jb25jYXQocGlhbykuY29uY2F0KHByb3ApKTtcbn1cblxuLyogW01TLU9MRVBTXSAyLjIxIFByb3BlcnR5U2V0U3RyZWFtICovXG5mdW5jdGlvbiBwYXJzZV9Qcm9wZXJ0eVNldFN0cmVhbShmaWxlLCBQSURTSSwgY2xzaWQpIHtcblx0dmFyIGJsb2IgPSBmaWxlLmNvbnRlbnQ7XG5cdGlmKCFibG9iKSByZXR1cm4gKHt9Lyo6YW55Ki8pO1xuXHRwcmVwX2Jsb2IoYmxvYiwgMCk7XG5cblx0dmFyIE51bVNldHMsIEZNVElEMCwgRk1USUQxLCBPZmZzZXQwLCBPZmZzZXQxID0gMDtcblx0YmxvYi5jaGsoJ2ZlZmYnLCAnQnl0ZSBPcmRlcjogJyk7XG5cblx0Lyp2YXIgdmVycyA9ICovYmxvYi5yZWFkX3NoaWZ0KDIpOyAvLyBUT0RPOiBjaGVjayB2ZXJzaW9uXG5cdHZhciBTeXN0ZW1JZGVudGlmaWVyID0gYmxvYi5yZWFkX3NoaWZ0KDQpO1xuXHR2YXIgQ0xTSUQgPSBibG9iLnJlYWRfc2hpZnQoMTYpO1xuXHRpZihDTFNJRCAhPT0gQ0ZCLnV0aWxzLmNvbnN0cy5IRUFERVJfQ0xTSUQgJiYgQ0xTSUQgIT09IGNsc2lkKSB0aHJvdyBuZXcgRXJyb3IoXCJCYWQgUHJvcGVydHlTZXQgQ0xTSUQgXCIgKyBDTFNJRCk7XG5cdE51bVNldHMgPSBibG9iLnJlYWRfc2hpZnQoNCk7XG5cdGlmKE51bVNldHMgIT09IDEgJiYgTnVtU2V0cyAhPT0gMikgdGhyb3cgbmV3IEVycm9yKFwiVW5yZWNvZ25pemVkICNTZXRzOiBcIiArIE51bVNldHMpO1xuXHRGTVRJRDAgPSBibG9iLnJlYWRfc2hpZnQoMTYpOyBPZmZzZXQwID0gYmxvYi5yZWFkX3NoaWZ0KDQpO1xuXG5cdGlmKE51bVNldHMgPT09IDEgJiYgT2Zmc2V0MCAhPT0gYmxvYi5sKSB0aHJvdyBuZXcgRXJyb3IoXCJMZW5ndGggbWlzbWF0Y2g6IFwiICsgT2Zmc2V0MCArIFwiICE9PSBcIiArIGJsb2IubCk7XG5cdGVsc2UgaWYoTnVtU2V0cyA9PT0gMikgeyBGTVRJRDEgPSBibG9iLnJlYWRfc2hpZnQoMTYpOyBPZmZzZXQxID0gYmxvYi5yZWFkX3NoaWZ0KDQpOyB9XG5cdHZhciBQU2V0MCA9IHBhcnNlX1Byb3BlcnR5U2V0KGJsb2IsIFBJRFNJKTtcblxuXHR2YXIgcnZhbCA9ICh7IFN5c3RlbUlkZW50aWZpZXI6IFN5c3RlbUlkZW50aWZpZXIgfS8qOmFueSovKTtcblx0Zm9yKHZhciB5IGluIFBTZXQwKSBydmFsW3ldID0gUFNldDBbeV07XG5cdC8vcnZhbC5ibG9iID0gYmxvYjtcblx0cnZhbC5GTVRJRCA9IEZNVElEMDtcblx0Ly9ydmFsLlBTZXQwID0gUFNldDA7XG5cdGlmKE51bVNldHMgPT09IDEpIHJldHVybiBydmFsO1xuXHRpZihPZmZzZXQxIC0gYmxvYi5sID09IDIpIGJsb2IubCArPSAyO1xuXHRpZihibG9iLmwgIT09IE9mZnNldDEpIHRocm93IG5ldyBFcnJvcihcIkxlbmd0aCBtaXNtYXRjaCAyOiBcIiArIGJsb2IubCArIFwiICE9PSBcIiArIE9mZnNldDEpO1xuXHR2YXIgUFNldDE7XG5cdHRyeSB7IFBTZXQxID0gcGFyc2VfUHJvcGVydHlTZXQoYmxvYiwgbnVsbCk7IH0gY2F0Y2goZSkgey8qIGVtcHR5ICovfVxuXHRmb3IoeSBpbiBQU2V0MSkgcnZhbFt5XSA9IFBTZXQxW3ldO1xuXHRydmFsLkZNVElEID0gW0ZNVElEMCwgRk1USUQxXTsgLy8gVE9ETzogdmVyaWZ5IEZNVElEMC8xXG5cdHJldHVybiBydmFsO1xufVxuZnVuY3Rpb24gd3JpdGVfUHJvcGVydHlTZXRTdHJlYW0oZW50cmllcywgY2xzaWQsIFJFLCBQSURTSS8qOntba2V5OnN0cmluZ3xudW1iZXJdOmFueX0qLywgZW50cmllczIvKjo/YW55Ki8sIGNsc2lkMi8qOj9hbnkqLykge1xuXHR2YXIgaGRyID0gbmV3X2J1ZihlbnRyaWVzMiA/IDY4IDogNDgpO1xuXHR2YXIgYnVmcyA9IFtoZHJdO1xuXHRoZHIud3JpdGVfc2hpZnQoMiwgMHhGRkZFKTtcblx0aGRyLndyaXRlX3NoaWZ0KDIsIDB4MDAwMCk7IC8qIFRPRE86IHR5cGUgMSBwcm9wcyAqL1xuXHRoZHIud3JpdGVfc2hpZnQoNCwgMHgzMjM2MzIzNyk7XG5cdGhkci53cml0ZV9zaGlmdCgxNiwgQ0ZCLnV0aWxzLmNvbnN0cy5IRUFERVJfQ0xTSUQsIFwiaGV4XCIpO1xuXHRoZHIud3JpdGVfc2hpZnQoNCwgKGVudHJpZXMyID8gMiA6IDEpKTtcblx0aGRyLndyaXRlX3NoaWZ0KDE2LCBjbHNpZCwgXCJoZXhcIik7XG5cdGhkci53cml0ZV9zaGlmdCg0LCAoZW50cmllczIgPyA2OCA6IDQ4KSk7XG5cdHZhciBwczAgPSB3cml0ZV9Qcm9wZXJ0eVNldChlbnRyaWVzLCBSRSwgUElEU0kpO1xuXHRidWZzLnB1c2gocHMwKTtcblxuXHRpZihlbnRyaWVzMikge1xuXHRcdHZhciBwczEgPSB3cml0ZV9Qcm9wZXJ0eVNldChlbnRyaWVzMiwgbnVsbCwgbnVsbCk7XG5cdFx0aGRyLndyaXRlX3NoaWZ0KDE2LCBjbHNpZDIsIFwiaGV4XCIpO1xuXHRcdGhkci53cml0ZV9zaGlmdCg0LCA2OCArIHBzMC5sZW5ndGgpO1xuXHRcdGJ1ZnMucHVzaChwczEpO1xuXHR9XG5cdHJldHVybiBiY29uY2F0KGJ1ZnMpO1xufVxuXG5mdW5jdGlvbiBwYXJzZW5vb3AyKGJsb2IsIGxlbmd0aCkgeyBibG9iLnJlYWRfc2hpZnQobGVuZ3RoKTsgcmV0dXJuIG51bGw7IH1cbmZ1bmN0aW9uIHdyaXRlemVyb2VzKG4sIG8pIHsgaWYoIW8pIG89bmV3X2J1ZihuKTsgZm9yKHZhciBqPTA7IGo8bjsgKytqKSBvLndyaXRlX3NoaWZ0KDEsIDApOyByZXR1cm4gbzsgfVxuXG5mdW5jdGlvbiBwYXJzbHVycChibG9iLCBsZW5ndGgsIGNiKSB7XG5cdHZhciBhcnIgPSBbXSwgdGFyZ2V0ID0gYmxvYi5sICsgbGVuZ3RoO1xuXHR3aGlsZShibG9iLmwgPCB0YXJnZXQpIGFyci5wdXNoKGNiKGJsb2IsIHRhcmdldCAtIGJsb2IubCkpO1xuXHRpZih0YXJnZXQgIT09IGJsb2IubCkgdGhyb3cgbmV3IEVycm9yKFwiU2x1cnAgZXJyb3JcIik7XG5cdHJldHVybiBhcnI7XG59XG5cbmZ1bmN0aW9uIHBhcnNlYm9vbChibG9iLCBsZW5ndGgvKjpudW1iZXIqLykgeyByZXR1cm4gYmxvYi5yZWFkX3NoaWZ0KGxlbmd0aCkgPT09IDB4MTsgfVxuZnVuY3Rpb24gd3JpdGVib29sKHYvKjphbnkqLywgbykgeyBpZighbykgbz1uZXdfYnVmKDIpOyBvLndyaXRlX3NoaWZ0KDIsICshIXYpOyByZXR1cm4gbzsgfVxuXG5mdW5jdGlvbiBwYXJzZXVpbnQxNihibG9iLyo6OiwgbGVuZ3RoOj9udW1iZXIsIG9wdHM6P2FueSovKSB7IHJldHVybiBibG9iLnJlYWRfc2hpZnQoMiwgJ3UnKTsgfVxuZnVuY3Rpb24gd3JpdGV1aW50MTYodi8qOm51bWJlciovLCBvKSB7IGlmKCFvKSBvPW5ld19idWYoMik7IG8ud3JpdGVfc2hpZnQoMiwgdik7IHJldHVybiBvOyB9XG5mdW5jdGlvbiBwYXJzZXVpbnQxNmEoYmxvYiwgbGVuZ3RoLyo6OiA6P251bWJlciwgb3B0czo/YW55Ki8pIHsgcmV0dXJuIHBhcnNsdXJwKGJsb2IsbGVuZ3RoLHBhcnNldWludDE2KTt9XG5cbi8qIC0tLSAyLjUgU3RydWN0dXJlcyAtLS0gKi9cblxuLyogW01TLVhMU10gMi41LjEwIEJlcyAoYm9vbGVhbiBvciBlcnJvcikgKi9cbmZ1bmN0aW9uIHBhcnNlX0JlcyhibG9iLyo6OiwgbGVuZ3RoKi8pIHtcblx0dmFyIHYgPSBibG9iLnJlYWRfc2hpZnQoMSksIHQgPSBibG9iLnJlYWRfc2hpZnQoMSk7XG5cdHJldHVybiB0ID09PSAweDAxID8gdiA6IHYgPT09IDB4MDE7XG59XG5mdW5jdGlvbiB3cml0ZV9CZXModiwgdC8qOnN0cmluZyovLCBvKSB7XG5cdGlmKCFvKSBvID0gbmV3X2J1ZigyKTtcblx0by53cml0ZV9zaGlmdCgxLCAoKHQgPT0gJ2UnKSA/ICt2IDogKyEhdikpO1xuXHRvLndyaXRlX3NoaWZ0KDEsICgodCA9PSAnZScpID8gMSA6IDApKTtcblx0cmV0dXJuIG87XG59XG5cbi8qIFtNUy1YTFNdIDIuNS4yNDAgU2hvcnRYTFVuaWNvZGVTdHJpbmcgKi9cbmZ1bmN0aW9uIHBhcnNlX1Nob3J0WExVbmljb2RlU3RyaW5nKGJsb2IsIGxlbmd0aCwgb3B0cykge1xuXHR2YXIgY2NoID0gYmxvYi5yZWFkX3NoaWZ0KG9wdHMgJiYgb3B0cy5iaWZmID49IDEyID8gMiA6IDEpO1xuXHR2YXIgZW5jb2RpbmcgPSAnc2Jjcy1jb250Jztcblx0dmFyIGNwID0gY3VycmVudF9jb2RlcGFnZTtcblx0aWYob3B0cyAmJiBvcHRzLmJpZmYgPj0gOCkgY3VycmVudF9jb2RlcGFnZSA9IDEyMDA7XG5cdGlmKCFvcHRzIHx8IG9wdHMuYmlmZiA9PSA4ICkge1xuXHRcdHZhciBmSGlnaEJ5dGUgPSBibG9iLnJlYWRfc2hpZnQoMSk7XG5cdFx0aWYoZkhpZ2hCeXRlKSB7IGVuY29kaW5nID0gJ2RiY3MtY29udCc7IH1cblx0fSBlbHNlIGlmKG9wdHMuYmlmZiA9PSAxMikge1xuXHRcdGVuY29kaW5nID0gJ3dzdHInO1xuXHR9XG5cdGlmKG9wdHMuYmlmZiA+PSAyICYmIG9wdHMuYmlmZiA8PSA1KSBlbmNvZGluZyA9ICdjcHN0cic7XG5cdHZhciBvID0gY2NoID8gYmxvYi5yZWFkX3NoaWZ0KGNjaCwgZW5jb2RpbmcpIDogXCJcIjtcblx0Y3VycmVudF9jb2RlcGFnZSA9IGNwO1xuXHRyZXR1cm4gbztcbn1cblxuLyogMi41LjI5MyBYTFVuaWNvZGVSaWNoRXh0ZW5kZWRTdHJpbmcgKi9cbmZ1bmN0aW9uIHBhcnNlX1hMVW5pY29kZVJpY2hFeHRlbmRlZFN0cmluZyhibG9iKSB7XG5cdHZhciBjcCA9IGN1cnJlbnRfY29kZXBhZ2U7XG5cdGN1cnJlbnRfY29kZXBhZ2UgPSAxMjAwO1xuXHR2YXIgY2NoID0gYmxvYi5yZWFkX3NoaWZ0KDIpLCBmbGFncyA9IGJsb2IucmVhZF9zaGlmdCgxKTtcblx0dmFyIC8qZkhpZ2hCeXRlID0gZmxhZ3MgJiAweDEsKi8gZkV4dFN0ID0gZmxhZ3MgJiAweDQsIGZSaWNoU3QgPSBmbGFncyAmIDB4ODtcblx0dmFyIHdpZHRoID0gMSArIChmbGFncyAmIDB4MSk7IC8vIDB4MCAtPiB1dGY4LCAweDEgLT4gZGJjc1xuXHR2YXIgY1J1biA9IDAsIGNiRXh0UnN0O1xuXHR2YXIgeiA9IHt9O1xuXHRpZihmUmljaFN0KSBjUnVuID0gYmxvYi5yZWFkX3NoaWZ0KDIpO1xuXHRpZihmRXh0U3QpIGNiRXh0UnN0ID0gYmxvYi5yZWFkX3NoaWZ0KDQpO1xuXHR2YXIgZW5jb2RpbmcgPSB3aWR0aCA9PSAyID8gJ2RiY3MtY29udCcgOiAnc2Jjcy1jb250Jztcblx0dmFyIG1zZyA9IGNjaCA9PT0gMCA/IFwiXCIgOiBibG9iLnJlYWRfc2hpZnQoY2NoLCBlbmNvZGluZyk7XG5cdGlmKGZSaWNoU3QpIGJsb2IubCArPSA0ICogY1J1bjsgLy9UT0RPOiBwYXJzZSB0aGlzXG5cdGlmKGZFeHRTdCkgYmxvYi5sICs9IGNiRXh0UnN0OyAvL1RPRE86IHBhcnNlIHRoaXNcblx0ei50ID0gbXNnO1xuXHRpZighZlJpY2hTdCkgeyB6LnJhdyA9IFwiPHQ+XCIgKyB6LnQgKyBcIjwvdD5cIjsgei5yID0gei50OyB9XG5cdGN1cnJlbnRfY29kZXBhZ2UgPSBjcDtcblx0cmV0dXJuIHo7XG59XG5mdW5jdGlvbiB3cml0ZV9YTFVuaWNvZGVSaWNoRXh0ZW5kZWRTdHJpbmcoeGxzdHIvKjo6IDpYTFN0cmluZywgb3B0cyovKSB7XG5cdHZhciBzdHIgPSAoeGxzdHIudHx8XCJcIiksIG5mbXRzID0gMTtcblxuXHR2YXIgaGRyID0gbmV3X2J1ZigzICsgKG5mbXRzID4gMSA/IDIgOiAwKSk7XG5cdGhkci53cml0ZV9zaGlmdCgyLCBzdHIubGVuZ3RoKTtcblx0aGRyLndyaXRlX3NoaWZ0KDEsIChuZm10cyA+IDEgPyAweDA4IDogMHgwMCkgfCAweDAxKTtcblx0aWYobmZtdHMgPiAxKSBoZHIud3JpdGVfc2hpZnQoMiwgbmZtdHMpO1xuXG5cdHZhciBvdGV4dCA9IG5ld19idWYoMiAqIHN0ci5sZW5ndGgpO1xuXHRvdGV4dC53cml0ZV9zaGlmdCgyICogc3RyLmxlbmd0aCwgc3RyLCAndXRmMTZsZScpO1xuXG5cdHZhciBvdXQgPSBbaGRyLCBvdGV4dF07XG5cblx0cmV0dXJuIGJjb25jYXQob3V0KTtcbn1cblxuLyogMi41LjI5NiBYTFVuaWNvZGVTdHJpbmdOb0NjaCAqL1xuZnVuY3Rpb24gcGFyc2VfWExVbmljb2RlU3RyaW5nTm9DY2goYmxvYiwgY2NoLCBvcHRzKSB7XG5cdHZhciByZXR2YWw7XG5cdGlmKG9wdHMpIHtcblx0XHRpZihvcHRzLmJpZmYgPj0gMiAmJiBvcHRzLmJpZmYgPD0gNSkgcmV0dXJuIGJsb2IucmVhZF9zaGlmdChjY2gsICdjcHN0cicpO1xuXHRcdGlmKG9wdHMuYmlmZiA+PSAxMikgcmV0dXJuIGJsb2IucmVhZF9zaGlmdChjY2gsICdkYmNzLWNvbnQnKTtcblx0fVxuXHR2YXIgZkhpZ2hCeXRlID0gYmxvYi5yZWFkX3NoaWZ0KDEpO1xuXHRpZihmSGlnaEJ5dGU9PT0wKSB7IHJldHZhbCA9IGJsb2IucmVhZF9zaGlmdChjY2gsICdzYmNzLWNvbnQnKTsgfVxuXHRlbHNlIHsgcmV0dmFsID0gYmxvYi5yZWFkX3NoaWZ0KGNjaCwgJ2RiY3MtY29udCcpOyB9XG5cdHJldHVybiByZXR2YWw7XG59XG5cbi8qIDIuNS4yOTQgWExVbmljb2RlU3RyaW5nICovXG5mdW5jdGlvbiBwYXJzZV9YTFVuaWNvZGVTdHJpbmcoYmxvYiwgbGVuZ3RoLCBvcHRzKSB7XG5cdHZhciBjY2ggPSBibG9iLnJlYWRfc2hpZnQob3B0cyAmJiBvcHRzLmJpZmYgPT0gMiA/IDEgOiAyKTtcblx0aWYoY2NoID09PSAwKSB7IGJsb2IubCsrOyByZXR1cm4gXCJcIjsgfVxuXHRyZXR1cm4gcGFyc2VfWExVbmljb2RlU3RyaW5nTm9DY2goYmxvYiwgY2NoLCBvcHRzKTtcbn1cbi8qIEJJRkY1IG92ZXJyaWRlICovXG5mdW5jdGlvbiBwYXJzZV9YTFVuaWNvZGVTdHJpbmcyKGJsb2IsIGxlbmd0aCwgb3B0cykge1xuXHRpZihvcHRzLmJpZmYgPiA1KSByZXR1cm4gcGFyc2VfWExVbmljb2RlU3RyaW5nKGJsb2IsIGxlbmd0aCwgb3B0cyk7XG5cdHZhciBjY2ggPSBibG9iLnJlYWRfc2hpZnQoMSk7XG5cdGlmKGNjaCA9PT0gMCkgeyBibG9iLmwrKzsgcmV0dXJuIFwiXCI7IH1cblx0cmV0dXJuIGJsb2IucmVhZF9zaGlmdChjY2gsIChvcHRzLmJpZmYgPD0gNCB8fCAhYmxvYi5sZW5zICkgPyAnY3BzdHInIDogJ3NiY3MtY29udCcpO1xufVxuLyogVE9ETzogQklGRjUgYW5kIGxvd2VyLCBjb2RlcGFnZSBhd2FyZW5lc3MgKi9cbmZ1bmN0aW9uIHdyaXRlX1hMVW5pY29kZVN0cmluZyhzdHIsIG9wdHMsIG8pIHtcblx0aWYoIW8pIG8gPSBuZXdfYnVmKDMgKyAyICogc3RyLmxlbmd0aCk7XG5cdG8ud3JpdGVfc2hpZnQoMiwgc3RyLmxlbmd0aCk7XG5cdG8ud3JpdGVfc2hpZnQoMSwgMSk7XG5cdG8ud3JpdGVfc2hpZnQoMzEsIHN0ciwgJ3V0ZjE2bGUnKTtcblx0cmV0dXJuIG87XG59XG5cbi8qIFtNUy1YTFNdIDIuNS42MSBDb250cm9sSW5mbyAqL1xuZnVuY3Rpb24gcGFyc2VfQ29udHJvbEluZm8oYmxvYi8qOjosIGxlbmd0aCwgb3B0cyovKSB7XG5cdHZhciBmbGFncyA9IGJsb2IucmVhZF9zaGlmdCgxKTtcblx0YmxvYi5sKys7XG5cdHZhciBhY2NlbCA9IGJsb2IucmVhZF9zaGlmdCgyKTtcblx0YmxvYi5sICs9IDI7XG5cdHJldHVybiBbZmxhZ3MsIGFjY2VsXTtcbn1cblxuLyogW01TLU9TSEFSRURdIDIuMy43LjYgVVJMTW9uaWtlciBUT0RPOiBmbGFncyAqL1xuZnVuY3Rpb24gcGFyc2VfVVJMTW9uaWtlcihibG9iLyo6OiwgbGVuZ3RoLCBvcHRzKi8pIHtcblx0dmFyIGxlbiA9IGJsb2IucmVhZF9zaGlmdCg0KSwgc3RhcnQgPSBibG9iLmw7XG5cdHZhciBleHRyYSA9IGZhbHNlO1xuXHRpZihsZW4gPiAyNCkge1xuXHRcdC8qIGxvb2sgYWhlYWQgKi9cblx0XHRibG9iLmwgKz0gbGVuIC0gMjQ7XG5cdFx0aWYoYmxvYi5yZWFkX3NoaWZ0KDE2KSA9PT0gXCI3OTU4ODFmNDNiMWQ3ZjQ4YWYyYzgyNWRjNDg1Mjc2M1wiKSBleHRyYSA9IHRydWU7XG5cdFx0YmxvYi5sID0gc3RhcnQ7XG5cdH1cblx0dmFyIHVybCA9IGJsb2IucmVhZF9zaGlmdCgoZXh0cmE/bGVuLTI0Omxlbik+PjEsICd1dGYxNmxlJykucmVwbGFjZShjaHIwLFwiXCIpO1xuXHRpZihleHRyYSkgYmxvYi5sICs9IDI0O1xuXHRyZXR1cm4gdXJsO1xufVxuXG4vKiBbTVMtT1NIQVJFRF0gMi4zLjcuOCBGaWxlTW9uaWtlciBUT0RPOiBhbGwgZmllbGRzICovXG5mdW5jdGlvbiBwYXJzZV9GaWxlTW9uaWtlcihibG9iLyo6OiwgbGVuZ3RoKi8pIHtcblx0dmFyIGNBbnRpID0gYmxvYi5yZWFkX3NoaWZ0KDIpO1xuXHR2YXIgcHJlYW1ibGUgPSBcIlwiOyB3aGlsZShjQW50aS0tID4gMCkgcHJlYW1ibGUgKz0gXCIuLi9cIjtcblx0dmFyIGFuc2lQYXRoID0gYmxvYi5yZWFkX3NoaWZ0KDAsICdscHN0ci1hbnNpJyk7XG5cdGJsb2IubCArPSAyOyAvL3ZhciBlbmRTZXJ2ZXIgPSBibG9iLnJlYWRfc2hpZnQoMik7XG5cdGlmKGJsb2IucmVhZF9zaGlmdCgyKSAhPSAweERFQUQpIHRocm93IG5ldyBFcnJvcihcIkJhZCBGaWxlTW9uaWtlclwiKTtcblx0dmFyIHN6ID0gYmxvYi5yZWFkX3NoaWZ0KDQpO1xuXHRpZihzeiA9PT0gMCkgcmV0dXJuIHByZWFtYmxlICsgYW5zaVBhdGgucmVwbGFjZSgvXFxcXC9nLFwiL1wiKTtcblx0dmFyIGJ5dGVzID0gYmxvYi5yZWFkX3NoaWZ0KDQpO1xuXHRpZihibG9iLnJlYWRfc2hpZnQoMikgIT0gMykgdGhyb3cgbmV3IEVycm9yKFwiQmFkIEZpbGVNb25pa2VyXCIpO1xuXHR2YXIgdW5pY29kZVBhdGggPSBibG9iLnJlYWRfc2hpZnQoYnl0ZXM+PjEsICd1dGYxNmxlJykucmVwbGFjZShjaHIwLFwiXCIpO1xuXHRyZXR1cm4gcHJlYW1ibGUgKyB1bmljb2RlUGF0aDtcbn1cblxuLyogW01TLU9TSEFSRURdIDIuMy43LjIgSHlwZXJsaW5rTW9uaWtlciBUT0RPOiBhbGwgdGhlIG1vbmlrZXJzICovXG5mdW5jdGlvbiBwYXJzZV9IeXBlcmxpbmtNb25pa2VyKGJsb2IsIGxlbmd0aCkge1xuXHR2YXIgY2xzaWQgPSBibG9iLnJlYWRfc2hpZnQoMTYpOyBsZW5ndGggLT0gMTY7XG5cdHN3aXRjaChjbHNpZCkge1xuXHRcdGNhc2UgXCJlMGM5ZWE3OWY5YmFjZTExOGM4MjAwYWEwMDRiYTkwYlwiOiByZXR1cm4gcGFyc2VfVVJMTW9uaWtlcihibG9iLCBsZW5ndGgpO1xuXHRcdGNhc2UgXCIwMzAzMDAwMDAwMDAwMDAwYzAwMDAwMDAwMDAwMDA0NlwiOiByZXR1cm4gcGFyc2VfRmlsZU1vbmlrZXIoYmxvYiwgbGVuZ3RoKTtcblx0XHRkZWZhdWx0OiB0aHJvdyBuZXcgRXJyb3IoXCJVbnN1cHBvcnRlZCBNb25pa2VyIFwiICsgY2xzaWQpO1xuXHR9XG59XG5cbi8qIFtNUy1PU0hBUkVEXSAyLjMuNy45IEh5cGVybGlua1N0cmluZyAqL1xuZnVuY3Rpb24gcGFyc2VfSHlwZXJsaW5rU3RyaW5nKGJsb2IvKjo6LCBsZW5ndGgqLykge1xuXHR2YXIgbGVuID0gYmxvYi5yZWFkX3NoaWZ0KDQpO1xuXHR2YXIgbyA9IGxlbiA+IDAgPyBibG9iLnJlYWRfc2hpZnQobGVuLCAndXRmMTZsZScpLnJlcGxhY2UoY2hyMCwgXCJcIikgOiBcIlwiO1xuXHRyZXR1cm4gbztcbn1cbmZ1bmN0aW9uIHdyaXRlX0h5cGVybGlua1N0cmluZyhzdHIvKjpzdHJpbmcqLywgbykge1xuXHRpZighbykgbyA9IG5ld19idWYoNiArIHN0ci5sZW5ndGggKiAyKTtcblx0by53cml0ZV9zaGlmdCg0LCAxICsgc3RyLmxlbmd0aCk7XG5cdGZvcih2YXIgaSA9IDA7IGkgPCBzdHIubGVuZ3RoOyArK2kpIG8ud3JpdGVfc2hpZnQoMiwgc3RyLmNoYXJDb2RlQXQoaSkpO1xuXHRvLndyaXRlX3NoaWZ0KDIsIDApO1xuXHRyZXR1cm4gbztcbn1cblxuLyogW01TLU9TSEFSRURdIDIuMy43LjEgSHlwZXJsaW5rIE9iamVjdCAqL1xuZnVuY3Rpb24gcGFyc2VfSHlwZXJsaW5rKGJsb2IsIGxlbmd0aCkvKjpIeXBlcmxpbmsqLyB7XG5cdHZhciBlbmQgPSBibG9iLmwgKyBsZW5ndGg7XG5cdHZhciBzVmVyID0gYmxvYi5yZWFkX3NoaWZ0KDQpO1xuXHRpZihzVmVyICE9PSAyKSB0aHJvdyBuZXcgRXJyb3IoXCJVbnJlY29nbml6ZWQgc3RyZWFtVmVyc2lvbjogXCIgKyBzVmVyKTtcblx0dmFyIGZsYWdzID0gYmxvYi5yZWFkX3NoaWZ0KDIpO1xuXHRibG9iLmwgKz0gMjtcblx0dmFyIGRpc3BsYXlOYW1lLCB0YXJnZXRGcmFtZU5hbWUsIG1vbmlrZXIsIG9sZU1vbmlrZXIsIExvYz1cIlwiLCBndWlkLCBmaWxlVGltZTtcblx0aWYoZmxhZ3MgJiAweDAwMTApIGRpc3BsYXlOYW1lID0gcGFyc2VfSHlwZXJsaW5rU3RyaW5nKGJsb2IsIGVuZCAtIGJsb2IubCk7XG5cdGlmKGZsYWdzICYgMHgwMDgwKSB0YXJnZXRGcmFtZU5hbWUgPSBwYXJzZV9IeXBlcmxpbmtTdHJpbmcoYmxvYiwgZW5kIC0gYmxvYi5sKTtcblx0aWYoKGZsYWdzICYgMHgwMTAxKSA9PT0gMHgwMTAxKSBtb25pa2VyID0gcGFyc2VfSHlwZXJsaW5rU3RyaW5nKGJsb2IsIGVuZCAtIGJsb2IubCk7XG5cdGlmKChmbGFncyAmIDB4MDEwMSkgPT09IDB4MDAwMSkgb2xlTW9uaWtlciA9IHBhcnNlX0h5cGVybGlua01vbmlrZXIoYmxvYiwgZW5kIC0gYmxvYi5sKTtcblx0aWYoZmxhZ3MgJiAweDAwMDgpIExvYyA9IHBhcnNlX0h5cGVybGlua1N0cmluZyhibG9iLCBlbmQgLSBibG9iLmwpO1xuXHRpZihmbGFncyAmIDB4MDAyMCkgZ3VpZCA9IGJsb2IucmVhZF9zaGlmdCgxNik7XG5cdGlmKGZsYWdzICYgMHgwMDQwKSBmaWxlVGltZSA9IHBhcnNlX0ZJTEVUSU1FKGJsb2IvKiwgOCovKTtcblx0YmxvYi5sID0gZW5kO1xuXHR2YXIgdGFyZ2V0ID0gdGFyZ2V0RnJhbWVOYW1lfHxtb25pa2VyfHxvbGVNb25pa2VyfHxcIlwiO1xuXHRpZih0YXJnZXQgJiYgTG9jKSB0YXJnZXQrPVwiI1wiK0xvYztcblx0aWYoIXRhcmdldCkgdGFyZ2V0ID0gXCIjXCIgKyBMb2M7XG5cdGlmKChmbGFncyAmIDB4MDAwMikgJiYgdGFyZ2V0LmNoYXJBdCgwKSA9PSBcIi9cIiAmJiB0YXJnZXQuY2hhckF0KDEpICE9IFwiL1wiKSB0YXJnZXQgPSBcImZpbGU6Ly9cIiArIHRhcmdldDtcblx0dmFyIG91dCA9ICh7VGFyZ2V0OnRhcmdldH0vKjphbnkqLyk7XG5cdGlmKGd1aWQpIG91dC5ndWlkID0gZ3VpZDtcblx0aWYoZmlsZVRpbWUpIG91dC50aW1lID0gZmlsZVRpbWU7XG5cdGlmKGRpc3BsYXlOYW1lKSBvdXQuVG9vbHRpcCA9IGRpc3BsYXlOYW1lO1xuXHRyZXR1cm4gb3V0O1xufVxuZnVuY3Rpb24gd3JpdGVfSHlwZXJsaW5rKGhsKSB7XG5cdHZhciBvdXQgPSBuZXdfYnVmKDUxMiksIGkgPSAwO1xuXHR2YXIgVGFyZ2V0ID0gaGwuVGFyZ2V0O1xuXHRpZihUYXJnZXQuc2xpY2UoMCw3KSA9PSBcImZpbGU6Ly9cIikgVGFyZ2V0ID0gVGFyZ2V0LnNsaWNlKDcpO1xuXHR2YXIgaGFzaGlkeCA9IFRhcmdldC5pbmRleE9mKFwiI1wiKTtcblx0dmFyIEYgPSBoYXNoaWR4ID4gLTEgPyAweDFmIDogMHgxNztcblx0c3dpdGNoKFRhcmdldC5jaGFyQXQoMCkpIHsgY2FzZSBcIiNcIjogRj0weDFjOyBicmVhazsgY2FzZSBcIi5cIjogRiY9fjI7IGJyZWFrOyB9XG5cdG91dC53cml0ZV9zaGlmdCg0LDIpOyBvdXQud3JpdGVfc2hpZnQoNCwgRik7XG5cdHZhciBkYXRhID0gWzgsNjgxNTgyNyw2NjE5MjM3LDQ4NDk3ODAsODNdOyBmb3IoaSA9IDA7IGkgPCBkYXRhLmxlbmd0aDsgKytpKSBvdXQud3JpdGVfc2hpZnQoNCwgZGF0YVtpXSk7XG5cdGlmKEYgPT0gMHgxQykge1xuXHRcdFRhcmdldCA9IFRhcmdldC5zbGljZSgxKTtcblx0XHR3cml0ZV9IeXBlcmxpbmtTdHJpbmcoVGFyZ2V0LCBvdXQpO1xuXHR9IGVsc2UgaWYoRiAmIDB4MDIpIHtcblx0XHRkYXRhID0gXCJlMCBjOSBlYSA3OSBmOSBiYSBjZSAxMSA4YyA4MiAwMCBhYSAwMCA0YiBhOSAwYlwiLnNwbGl0KFwiIFwiKTtcblx0XHRmb3IoaSA9IDA7IGkgPCBkYXRhLmxlbmd0aDsgKytpKSBvdXQud3JpdGVfc2hpZnQoMSwgcGFyc2VJbnQoZGF0YVtpXSwgMTYpKTtcblx0XHR2YXIgUHJldGFyZ2V0ID0gaGFzaGlkeCA+IC0xID8gVGFyZ2V0LnNsaWNlKDAsIGhhc2hpZHgpIDogVGFyZ2V0O1xuXHRcdG91dC53cml0ZV9zaGlmdCg0LCAyKihQcmV0YXJnZXQubGVuZ3RoICsgMSkpO1xuXHRcdGZvcihpID0gMDsgaSA8IFByZXRhcmdldC5sZW5ndGg7ICsraSkgb3V0LndyaXRlX3NoaWZ0KDIsIFByZXRhcmdldC5jaGFyQ29kZUF0KGkpKTtcblx0XHRvdXQud3JpdGVfc2hpZnQoMiwgMCk7XG5cdFx0aWYoRiAmIDB4MDgpIHdyaXRlX0h5cGVybGlua1N0cmluZyhoYXNoaWR4ID4gLTEgPyBUYXJnZXQuc2xpY2UoaGFzaGlkeCsxKTogXCJcIiwgb3V0KTtcblx0fSBlbHNlIHtcblx0XHRkYXRhID0gXCIwMyAwMyAwMCAwMCAwMCAwMCAwMCAwMCBjMCAwMCAwMCAwMCAwMCAwMCAwMCA0NlwiLnNwbGl0KFwiIFwiKTtcblx0XHRmb3IoaSA9IDA7IGkgPCBkYXRhLmxlbmd0aDsgKytpKSBvdXQud3JpdGVfc2hpZnQoMSwgcGFyc2VJbnQoZGF0YVtpXSwgMTYpKTtcblx0XHR2YXIgUCA9IDA7XG5cdFx0d2hpbGUoVGFyZ2V0LnNsaWNlKFAqMyxQKjMrMyk9PVwiLi4vXCJ8fFRhcmdldC5zbGljZShQKjMsUCozKzMpPT1cIi4uXFxcXFwiKSArK1A7XG5cdFx0b3V0LndyaXRlX3NoaWZ0KDIsIFApO1xuXHRcdG91dC53cml0ZV9zaGlmdCg0LCBUYXJnZXQubGVuZ3RoIC0gMyAqIFAgKyAxKTtcblx0XHRmb3IoaSA9IDA7IGkgPCBUYXJnZXQubGVuZ3RoIC0gMyAqIFA7ICsraSkgb3V0LndyaXRlX3NoaWZ0KDEsIFRhcmdldC5jaGFyQ29kZUF0KGkgKyAzICogUCkgJiAweEZGKTtcblx0XHRvdXQud3JpdGVfc2hpZnQoMSwgMCk7XG5cdFx0b3V0LndyaXRlX3NoaWZ0KDIsIDB4RkZGRik7XG5cdFx0b3V0LndyaXRlX3NoaWZ0KDIsIDB4REVBRCk7XG5cdFx0Zm9yKGkgPSAwOyBpIDwgNjsgKytpKSBvdXQud3JpdGVfc2hpZnQoNCwgMCk7XG5cdH1cblx0cmV0dXJuIG91dC5zbGljZSgwLCBvdXQubCk7XG59XG5cbi8qIDIuNS4xNzggTG9uZ1JHQkEgKi9cbmZ1bmN0aW9uIHBhcnNlX0xvbmdSR0JBKGJsb2IvKjo6LCBsZW5ndGgqLykgeyB2YXIgciA9IGJsb2IucmVhZF9zaGlmdCgxKSwgZyA9IGJsb2IucmVhZF9zaGlmdCgxKSwgYiA9IGJsb2IucmVhZF9zaGlmdCgxKSwgYSA9IGJsb2IucmVhZF9zaGlmdCgxKTsgcmV0dXJuIFtyLGcsYixhXTsgfVxuXG4vKiAyLjUuMTc3IExvbmdSR0IgKi9cbmZ1bmN0aW9uIHBhcnNlX0xvbmdSR0IoYmxvYiwgbGVuZ3RoKSB7IHZhciB4ID0gcGFyc2VfTG9uZ1JHQkEoYmxvYiwgbGVuZ3RoKTsgeFszXSA9IDA7IHJldHVybiB4OyB9XG5cblxuLyogW01TLVhMU10gMi41LjE5ICovXG5mdW5jdGlvbiBwYXJzZV9YTFNDZWxsKGJsb2IvKjo6LCBsZW5ndGgqLykvKjpDZWxsKi8ge1xuXHR2YXIgcncgPSBibG9iLnJlYWRfc2hpZnQoMik7IC8vIDAtaW5kZXhlZFxuXHR2YXIgY29sID0gYmxvYi5yZWFkX3NoaWZ0KDIpO1xuXHR2YXIgaXhmZSA9IGJsb2IucmVhZF9zaGlmdCgyKTtcblx0cmV0dXJuICh7cjpydywgYzpjb2wsIGl4ZmU6aXhmZX0vKjphbnkqLyk7XG59XG5mdW5jdGlvbiB3cml0ZV9YTFNDZWxsKFIvKjpudW1iZXIqLywgQy8qOm51bWJlciovLCBpeGZlLyo6P251bWJlciovLCBvKSB7XG5cdGlmKCFvKSBvID0gbmV3X2J1Zig2KTtcblx0by53cml0ZV9zaGlmdCgyLCBSKTtcblx0by53cml0ZV9zaGlmdCgyLCBDKTtcblx0by53cml0ZV9zaGlmdCgyLCBpeGZlfHwwKTtcblx0cmV0dXJuIG87XG59XG5cbi8qIFtNUy1YTFNdIDIuNS4xMzQgKi9cbmZ1bmN0aW9uIHBhcnNlX2ZydEhlYWRlcihibG9iKSB7XG5cdHZhciBydCA9IGJsb2IucmVhZF9zaGlmdCgyKTtcblx0dmFyIGZsYWdzID0gYmxvYi5yZWFkX3NoaWZ0KDIpOyAvLyBUT0RPOiBwYXJzZSB0aGVzZSBmbGFnc1xuXHRibG9iLmwgKz0gODtcblx0cmV0dXJuIHt0eXBlOiBydCwgZmxhZ3M6IGZsYWdzfTtcbn1cblxuXG5cbmZ1bmN0aW9uIHBhcnNlX09wdFhMVW5pY29kZVN0cmluZyhibG9iLCBsZW5ndGgsIG9wdHMpIHsgcmV0dXJuIGxlbmd0aCA9PT0gMCA/IFwiXCIgOiBwYXJzZV9YTFVuaWNvZGVTdHJpbmcyKGJsb2IsIGxlbmd0aCwgb3B0cyk7IH1cblxuLyogW01TLVhMU10gMi41LjM0NCAqL1xuZnVuY3Rpb24gcGFyc2VfWFRJKGJsb2IsIGxlbmd0aCwgb3B0cykge1xuXHR2YXIgdyA9IG9wdHMuYmlmZiA+IDggPyA0IDogMjtcblx0dmFyIGlTdXBCb29rID0gYmxvYi5yZWFkX3NoaWZ0KHcpLCBpdGFiRmlyc3QgPSBibG9iLnJlYWRfc2hpZnQodywnaScpLCBpdGFiTGFzdCA9IGJsb2IucmVhZF9zaGlmdCh3LCdpJyk7XG5cdHJldHVybiBbaVN1cEJvb2ssIGl0YWJGaXJzdCwgaXRhYkxhc3RdO1xufVxuXG4vKiBbTVMtWExTXSAyLjUuMjE4ICovXG5mdW5jdGlvbiBwYXJzZV9Sa1JlYyhibG9iKSB7XG5cdHZhciBpeGZlID0gYmxvYi5yZWFkX3NoaWZ0KDIpO1xuXHR2YXIgUksgPSBwYXJzZV9Sa051bWJlcihibG9iKTtcblx0cmV0dXJuIFtpeGZlLCBSS107XG59XG5cbi8qIFtNUy1YTFNdIDIuNS4xICovXG5mdW5jdGlvbiBwYXJzZV9BZGRpblVkZihibG9iLCBsZW5ndGgsIG9wdHMpIHtcblx0YmxvYi5sICs9IDQ7IGxlbmd0aCAtPSA0O1xuXHR2YXIgbCA9IGJsb2IubCArIGxlbmd0aDtcblx0dmFyIHVkZk5hbWUgPSBwYXJzZV9TaG9ydFhMVW5pY29kZVN0cmluZyhibG9iLCBsZW5ndGgsIG9wdHMpO1xuXHR2YXIgY2IgPSBibG9iLnJlYWRfc2hpZnQoMik7XG5cdGwgLT0gYmxvYi5sO1xuXHRpZihjYiAhPT0gbCkgdGhyb3cgbmV3IEVycm9yKFwiTWFsZm9ybWVkIEFkZGluVWRmOiBwYWRkaW5nID0gXCIgKyBsICsgXCIgIT0gXCIgKyBjYik7XG5cdGJsb2IubCArPSBjYjtcblx0cmV0dXJuIHVkZk5hbWU7XG59XG5cbi8qIFtNUy1YTFNdIDIuNS4yMDkgVE9ETzogQ2hlY2sgc2l6ZXMgKi9cbmZ1bmN0aW9uIHBhcnNlX1JlZjhVKGJsb2IvKjo6LCBsZW5ndGgqLykge1xuXHR2YXIgcndGaXJzdCA9IGJsb2IucmVhZF9zaGlmdCgyKTtcblx0dmFyIHJ3TGFzdCA9IGJsb2IucmVhZF9zaGlmdCgyKTtcblx0dmFyIGNvbEZpcnN0ID0gYmxvYi5yZWFkX3NoaWZ0KDIpO1xuXHR2YXIgY29sTGFzdCA9IGJsb2IucmVhZF9zaGlmdCgyKTtcblx0cmV0dXJuIHtzOntjOmNvbEZpcnN0LCByOnJ3Rmlyc3R9LCBlOntjOmNvbExhc3Qscjpyd0xhc3R9fTtcbn1cbmZ1bmN0aW9uIHdyaXRlX1JlZjhVKHIvKjpSYW5nZSovLCBvKSB7XG5cdGlmKCFvKSBvID0gbmV3X2J1Zig4KTtcblx0by53cml0ZV9zaGlmdCgyLCByLnMucik7XG5cdG8ud3JpdGVfc2hpZnQoMiwgci5lLnIpO1xuXHRvLndyaXRlX3NoaWZ0KDIsIHIucy5jKTtcblx0by53cml0ZV9zaGlmdCgyLCByLmUuYyk7XG5cdHJldHVybiBvO1xufVxuXG4vKiBbTVMtWExTXSAyLjUuMjExICovXG5mdW5jdGlvbiBwYXJzZV9SZWZVKGJsb2IvKjo6LCBsZW5ndGgqLykge1xuXHR2YXIgcndGaXJzdCA9IGJsb2IucmVhZF9zaGlmdCgyKTtcblx0dmFyIHJ3TGFzdCA9IGJsb2IucmVhZF9zaGlmdCgyKTtcblx0dmFyIGNvbEZpcnN0ID0gYmxvYi5yZWFkX3NoaWZ0KDEpO1xuXHR2YXIgY29sTGFzdCA9IGJsb2IucmVhZF9zaGlmdCgxKTtcblx0cmV0dXJuIHtzOntjOmNvbEZpcnN0LCByOnJ3Rmlyc3R9LCBlOntjOmNvbExhc3Qscjpyd0xhc3R9fTtcbn1cblxuLyogW01TLVhMU10gMi41LjIwNyAqL1xudmFyIHBhcnNlX1JlZiA9IHBhcnNlX1JlZlU7XG5cbi8qIFtNUy1YTFNdIDIuNS4xNDMgKi9cbmZ1bmN0aW9uIHBhcnNlX0Z0Q21vKGJsb2IvKjo6LCBsZW5ndGgqLykge1xuXHRibG9iLmwgKz0gNDtcblx0dmFyIG90ID0gYmxvYi5yZWFkX3NoaWZ0KDIpO1xuXHR2YXIgaWQgPSBibG9iLnJlYWRfc2hpZnQoMik7XG5cdHZhciBmbGFncyA9IGJsb2IucmVhZF9zaGlmdCgyKTtcblx0YmxvYi5sKz0xMjtcblx0cmV0dXJuIFtpZCwgb3QsIGZsYWdzXTtcbn1cblxuLyogW01TLVhMU10gMi41LjE0OSAqL1xuZnVuY3Rpb24gcGFyc2VfRnROdHMoYmxvYikge1xuXHR2YXIgb3V0ID0ge307XG5cdGJsb2IubCArPSA0O1xuXHRibG9iLmwgKz0gMTY7IC8vIEdVSUQgVE9ET1xuXHRvdXQuZlNoYXJlZE5vdGUgPSBibG9iLnJlYWRfc2hpZnQoMik7XG5cdGJsb2IubCArPSA0O1xuXHRyZXR1cm4gb3V0O1xufVxuXG4vKiBbTVMtWExTXSAyLjUuMTQyICovXG5mdW5jdGlvbiBwYXJzZV9GdENmKGJsb2IpIHtcblx0dmFyIG91dCA9IHt9O1xuXHRibG9iLmwgKz0gNDtcblx0YmxvYi5jZiA9IGJsb2IucmVhZF9zaGlmdCgyKTtcblx0cmV0dXJuIG91dDtcbn1cblxuLyogW01TLVhMU10gMi41LjE0MCAtIDIuNS4xNTQgYW5kIGZyaWVuZHMgKi9cbmZ1bmN0aW9uIHBhcnNlX0Z0U2tpcChibG9iKSB7IGJsb2IubCArPSAyOyBibG9iLmwgKz0gYmxvYi5yZWFkX3NoaWZ0KDIpOyB9XG52YXIgRnRUYWIgPSB7XG5cdC8qOjpbKi8weDAwLyo6Ol0qLzogcGFyc2VfRnRTa2lwLCAgICAgIC8qIEZ0RW5kICovXG5cdC8qOjpbKi8weDA0Lyo6Ol0qLzogcGFyc2VfRnRTa2lwLCAgICAgIC8qIEZ0TWFjcm8gKi9cblx0Lyo6OlsqLzB4MDUvKjo6XSovOiBwYXJzZV9GdFNraXAsICAgICAgLyogRnRCdXR0b24gKi9cblx0Lyo6OlsqLzB4MDYvKjo6XSovOiBwYXJzZV9GdFNraXAsICAgICAgLyogRnRHbW8gKi9cblx0Lyo6OlsqLzB4MDcvKjo6XSovOiBwYXJzZV9GdENmLCAgICAgICAgLyogRnRDZiAqL1xuXHQvKjo6WyovMHgwOC8qOjpdKi86IHBhcnNlX0Z0U2tpcCwgICAgICAvKiBGdFBpb0dyYml0ICovXG5cdC8qOjpbKi8weDA5Lyo6Ol0qLzogcGFyc2VfRnRTa2lwLCAgICAgIC8qIEZ0UGljdEZtbGEgKi9cblx0Lyo6OlsqLzB4MEEvKjo6XSovOiBwYXJzZV9GdFNraXAsICAgICAgLyogRnRDYmxzICovXG5cdC8qOjpbKi8weDBCLyo6Ol0qLzogcGFyc2VfRnRTa2lwLCAgICAgIC8qIEZ0UmJvICovXG5cdC8qOjpbKi8weDBDLyo6Ol0qLzogcGFyc2VfRnRTa2lwLCAgICAgIC8qIEZ0U2JzICovXG5cdC8qOjpbKi8weDBELyo6Ol0qLzogcGFyc2VfRnROdHMsICAgICAgIC8qIEZ0TnRzICovXG5cdC8qOjpbKi8weDBFLyo6Ol0qLzogcGFyc2VfRnRTa2lwLCAgICAgIC8qIEZ0U2JzRm1sYSAqL1xuXHQvKjo6WyovMHgwRi8qOjpdKi86IHBhcnNlX0Z0U2tpcCwgICAgICAvKiBGdEdib0RhdGEgKi9cblx0Lyo6OlsqLzB4MTAvKjo6XSovOiBwYXJzZV9GdFNraXAsICAgICAgLyogRnRFZG9EYXRhICovXG5cdC8qOjpbKi8weDExLyo6Ol0qLzogcGFyc2VfRnRTa2lwLCAgICAgIC8qIEZ0UmJvRGF0YSAqL1xuXHQvKjo6WyovMHgxMi8qOjpdKi86IHBhcnNlX0Z0U2tpcCwgICAgICAvKiBGdENibHNEYXRhICovXG5cdC8qOjpbKi8weDEzLyo6Ol0qLzogcGFyc2VfRnRTa2lwLCAgICAgIC8qIEZ0TGJzRGF0YSAqL1xuXHQvKjo6WyovMHgxNC8qOjpdKi86IHBhcnNlX0Z0U2tpcCwgICAgICAvKiBGdENibHNGbWxhICovXG5cdC8qOjpbKi8weDE1Lyo6Ol0qLzogcGFyc2VfRnRDbW9cbn07XG5mdW5jdGlvbiBwYXJzZV9GdEFycmF5KGJsb2IsIGxlbmd0aC8qOjosIG90Ki8pIHtcblx0dmFyIHRndCA9IGJsb2IubCArIGxlbmd0aDtcblx0dmFyIGZ0cyA9IFtdO1xuXHR3aGlsZShibG9iLmwgPCB0Z3QpIHtcblx0XHR2YXIgZnQgPSBibG9iLnJlYWRfc2hpZnQoMik7XG5cdFx0YmxvYi5sLT0yO1xuXHRcdHRyeSB7XG5cdFx0XHRmdHMucHVzaChGdFRhYltmdF0oYmxvYiwgdGd0IC0gYmxvYi5sKSk7XG5cdFx0fSBjYXRjaChlKSB7IGJsb2IubCA9IHRndDsgcmV0dXJuIGZ0czsgfVxuXHR9XG5cdGlmKGJsb2IubCAhPSB0Z3QpIGJsb2IubCA9IHRndDsgLy90aHJvdyBuZXcgRXJyb3IoXCJiYWQgT2JqZWN0IEZ0LXNlcXVlbmNlXCIpO1xuXHRyZXR1cm4gZnRzO1xufVxuXG4vKiAtLS0gMi40IFJlY29yZHMgLS0tICovXG5cbi8qIFtNUy1YTFNdIDIuNC4yMSAqL1xuZnVuY3Rpb24gcGFyc2VfQk9GKGJsb2IsIGxlbmd0aCkge1xuXHR2YXIgbyA9IHtCSUZGVmVyOjAsIGR0OjB9O1xuXHRvLkJJRkZWZXIgPSBibG9iLnJlYWRfc2hpZnQoMik7IGxlbmd0aCAtPSAyO1xuXHRpZihsZW5ndGggPj0gMikgeyBvLmR0ID0gYmxvYi5yZWFkX3NoaWZ0KDIpOyBibG9iLmwgLT0gMjsgfVxuXHRzd2l0Y2goby5CSUZGVmVyKSB7XG5cdFx0Y2FzZSAweDA2MDA6IC8qIEJJRkY4ICovXG5cdFx0Y2FzZSAweDA1MDA6IC8qIEJJRkY1ICovXG5cdFx0Y2FzZSAweDA0MDA6IC8qIEJJRkY0ICovXG5cdFx0Y2FzZSAweDAzMDA6IC8qIEJJRkYzICovXG5cdFx0Y2FzZSAweDAyMDA6IC8qIEJJRkYyICovXG5cdFx0Y2FzZSAweDAwMDI6IGNhc2UgMHgwMDA3OiAvKiBCSUZGMiAqL1xuXHRcdFx0YnJlYWs7XG5cdFx0ZGVmYXVsdDogaWYobGVuZ3RoID4gNikgdGhyb3cgbmV3IEVycm9yKFwiVW5leHBlY3RlZCBCSUZGIFZlciBcIiArIG8uQklGRlZlcik7XG5cdH1cblxuXHRibG9iLnJlYWRfc2hpZnQobGVuZ3RoKTtcblx0cmV0dXJuIG87XG59XG5mdW5jdGlvbiB3cml0ZV9CT0Yod2IvKjpXb3JrYm9vayovLCB0Lyo6bnVtYmVyKi8sIG8pIHtcblx0dmFyIGggPSAweDA2MDAsIHcgPSAxNjtcblx0c3dpdGNoKG8uYm9va1R5cGUpIHtcblx0XHRjYXNlICdiaWZmOCc6IGJyZWFrO1xuXHRcdGNhc2UgJ2JpZmY1JzogaCA9IDB4MDUwMDsgdyA9IDg7IGJyZWFrO1xuXHRcdGNhc2UgJ2JpZmY0JzogaCA9IDB4MDAwNDsgdyA9IDY7IGJyZWFrO1xuXHRcdGNhc2UgJ2JpZmYzJzogaCA9IDB4MDAwMzsgdyA9IDY7IGJyZWFrO1xuXHRcdGNhc2UgJ2JpZmYyJzogaCA9IDB4MDAwMjsgdyA9IDQ7IGJyZWFrO1xuXHRcdGNhc2UgJ3hsYSc6IGJyZWFrO1xuXHRcdGRlZmF1bHQ6IHRocm93IG5ldyBFcnJvcihcInVuc3VwcG9ydGVkIEJJRkYgdmVyc2lvblwiKTtcblx0fVxuXHR2YXIgb3V0ID0gbmV3X2J1Zih3KTtcblx0b3V0LndyaXRlX3NoaWZ0KDIsIGgpO1xuXHRvdXQud3JpdGVfc2hpZnQoMiwgdCk7XG5cdGlmKHcgPiA0KSBvdXQud3JpdGVfc2hpZnQoMiwgMHg3MjYyKTtcblx0aWYodyA+IDYpIG91dC53cml0ZV9zaGlmdCgyLCAweDA3Q0QpO1xuXHRpZih3ID4gOCkge1xuXHRcdG91dC53cml0ZV9zaGlmdCgyLCAweEMwMDkpO1xuXHRcdG91dC53cml0ZV9zaGlmdCgyLCAweDAwMDEpO1xuXHRcdG91dC53cml0ZV9zaGlmdCgyLCAweDA3MDYpO1xuXHRcdG91dC53cml0ZV9zaGlmdCgyLCAweDAwMDApO1xuXHR9XG5cdHJldHVybiBvdXQ7XG59XG5cblxuLyogW01TLVhMU10gMi40LjE0NiAqL1xuZnVuY3Rpb24gcGFyc2VfSW50ZXJmYWNlSGRyKGJsb2IsIGxlbmd0aCkge1xuXHRpZihsZW5ndGggPT09IDApIHJldHVybiAweDA0YjA7XG5cdGlmKChibG9iLnJlYWRfc2hpZnQoMikpIT09MHgwNGIwKXsvKiBlbXB0eSAqL31cblx0cmV0dXJuIDB4MDRiMDtcbn1cblxuXG4vKiBbTVMtWExTXSAyLjQuMzQ5ICovXG5mdW5jdGlvbiBwYXJzZV9Xcml0ZUFjY2VzcyhibG9iLCBsZW5ndGgsIG9wdHMpIHtcblx0aWYob3B0cy5lbmMpIHsgYmxvYi5sICs9IGxlbmd0aDsgcmV0dXJuIFwiXCI7IH1cblx0dmFyIGwgPSBibG9iLmw7XG5cdC8vIFRPRE86IG1ha2Ugc3VyZSBYTFVuaWNvZGVTdHJpbmcgZG9lc250IG92ZXJydW5cblx0dmFyIFVzZXJOYW1lID0gcGFyc2VfWExVbmljb2RlU3RyaW5nMihibG9iLCAwLCBvcHRzKTtcblx0YmxvYi5yZWFkX3NoaWZ0KGxlbmd0aCArIGwgLSBibG9iLmwpO1xuXHRyZXR1cm4gVXNlck5hbWU7XG59XG5mdW5jdGlvbiB3cml0ZV9Xcml0ZUFjY2VzcyhzLyo6c3RyaW5nKi8sIG9wdHMpIHtcblx0dmFyIGI4ID0gIW9wdHMgfHwgb3B0cy5iaWZmID09IDg7XG5cdHZhciBvID0gbmV3X2J1ZihiOCA/IDExMiA6IDU0KTtcblx0by53cml0ZV9zaGlmdChvcHRzLmJpZmYgPT0gOCA/IDIgOiAxLCA3KTtcblx0aWYoYjgpIG8ud3JpdGVfc2hpZnQoMSwgMCk7XG5cdG8ud3JpdGVfc2hpZnQoNCwgMHgzMzMzNjg1Myk7XG5cdG8ud3JpdGVfc2hpZnQoNCwgKDB4MDA1MzRBNzQgfCAoYjggPyAwIDogMHgyMDAwMDAwMCkpKTtcblx0d2hpbGUoby5sIDwgby5sZW5ndGgpIG8ud3JpdGVfc2hpZnQoMSwgKGI4ID8gMCA6IDMyKSk7XG5cdHJldHVybiBvO1xufVxuXG4vKiBbTVMtWExTXSAyLjQuMzUxICovXG5mdW5jdGlvbiBwYXJzZV9Xc0Jvb2woYmxvYiwgbGVuZ3RoLCBvcHRzKSB7XG5cdHZhciBmbGFncyA9IG9wdHMgJiYgb3B0cy5iaWZmID09IDggfHwgbGVuZ3RoID09IDIgPyBibG9iLnJlYWRfc2hpZnQoMikgOiAoYmxvYi5sICs9IGxlbmd0aCwgMCk7XG5cdHJldHVybiB7IGZEaWFsb2c6IGZsYWdzICYgMHgxMCwgZkJlbG93OiBmbGFncyAmIDB4NDAsIGZSaWdodDogZmxhZ3MgJiAweDgwIH07XG59XG5cbi8qIFtNUy1YTFNdIDIuNC4yOCAqL1xuZnVuY3Rpb24gcGFyc2VfQm91bmRTaGVldDgoYmxvYiwgbGVuZ3RoLCBvcHRzKSB7XG5cdHZhciBwb3MgPSBibG9iLnJlYWRfc2hpZnQoNCk7XG5cdHZhciBoaWRkZW4gPSBibG9iLnJlYWRfc2hpZnQoMSkgJiAweDAzO1xuXHR2YXIgZHQgPSBibG9iLnJlYWRfc2hpZnQoMSk7XG5cdHN3aXRjaChkdCkge1xuXHRcdGNhc2UgMDogZHQgPSAnV29ya3NoZWV0JzsgYnJlYWs7XG5cdFx0Y2FzZSAxOiBkdCA9ICdNYWNyb3NoZWV0JzsgYnJlYWs7XG5cdFx0Y2FzZSAyOiBkdCA9ICdDaGFydHNoZWV0JzsgYnJlYWs7XG5cdFx0Y2FzZSA2OiBkdCA9ICdWQkFNb2R1bGUnOyBicmVhaztcblx0fVxuXHR2YXIgbmFtZSA9IHBhcnNlX1Nob3J0WExVbmljb2RlU3RyaW5nKGJsb2IsIDAsIG9wdHMpO1xuXHRpZihuYW1lLmxlbmd0aCA9PT0gMCkgbmFtZSA9IFwiU2hlZXQxXCI7XG5cdHJldHVybiB7IHBvczpwb3MsIGhzOmhpZGRlbiwgZHQ6ZHQsIG5hbWU6bmFtZSB9O1xufVxuZnVuY3Rpb24gd3JpdGVfQm91bmRTaGVldDgoZGF0YSwgb3B0cykge1xuXHR2YXIgdyA9ICghb3B0cyB8fCBvcHRzLmJpZmYgPj0gOCA/IDIgOiAxKTtcblx0dmFyIG8gPSBuZXdfYnVmKDggKyB3ICogZGF0YS5uYW1lLmxlbmd0aCk7XG5cdG8ud3JpdGVfc2hpZnQoNCwgZGF0YS5wb3MpO1xuXHRvLndyaXRlX3NoaWZ0KDEsIGRhdGEuaHMgfHwgMCk7XG5cdG8ud3JpdGVfc2hpZnQoMSwgZGF0YS5kdCk7XG5cdG8ud3JpdGVfc2hpZnQoMSwgZGF0YS5uYW1lLmxlbmd0aCk7XG5cdGlmKG9wdHMuYmlmZiA+PSA4KSBvLndyaXRlX3NoaWZ0KDEsIDEpO1xuXHRvLndyaXRlX3NoaWZ0KHcgKiBkYXRhLm5hbWUubGVuZ3RoLCBkYXRhLm5hbWUsIG9wdHMuYmlmZiA8IDggPyAnc2JjcycgOiAndXRmMTZsZScpO1xuXHR2YXIgb3V0ID0gby5zbGljZSgwLCBvLmwpO1xuXHRvdXQubCA9IG8ubDsgcmV0dXJuIG91dDtcbn1cblxuLyogW01TLVhMU10gMi40LjI2NSBUT0RPICovXG5mdW5jdGlvbiBwYXJzZV9TU1QoYmxvYiwgbGVuZ3RoKS8qOlNTVCovIHtcblx0dmFyIGVuZCA9IGJsb2IubCArIGxlbmd0aDtcblx0dmFyIGNudCA9IGJsb2IucmVhZF9zaGlmdCg0KTtcblx0dmFyIHVjbnQgPSBibG9iLnJlYWRfc2hpZnQoNCk7XG5cdHZhciBzdHJzLyo6U1NUKi8gPSAoW10vKjphbnkqLyk7XG5cdGZvcih2YXIgaSA9IDA7IGkgIT0gdWNudCAmJiBibG9iLmwgPCBlbmQ7ICsraSkge1xuXHRcdHN0cnMucHVzaChwYXJzZV9YTFVuaWNvZGVSaWNoRXh0ZW5kZWRTdHJpbmcoYmxvYikpO1xuXHR9XG5cdHN0cnMuQ291bnQgPSBjbnQ7IHN0cnMuVW5pcXVlID0gdWNudDtcblx0cmV0dXJuIHN0cnM7XG59XG5mdW5jdGlvbiB3cml0ZV9TU1Qoc3N0LCBvcHRzKSB7XG5cdHZhciBoZWFkZXIgPSBuZXdfYnVmKDgpO1xuXHRoZWFkZXIud3JpdGVfc2hpZnQoNCwgc3N0LkNvdW50KTtcblx0aGVhZGVyLndyaXRlX3NoaWZ0KDQsIHNzdC5VbmlxdWUpO1xuXHR2YXIgc3RycyA9IFtdO1xuXHRmb3IodmFyIGogPSAwOyBqIDwgc3N0Lmxlbmd0aDsgKytqKSBzdHJzW2pdID0gd3JpdGVfWExVbmljb2RlUmljaEV4dGVuZGVkU3RyaW5nKHNzdFtqXSwgb3B0cyk7XG5cdHZhciBvID0gYmNvbmNhdChbaGVhZGVyXS5jb25jYXQoc3RycykpO1xuXHQvKjo6KCovby8qOjogOmFueSkqLy5wYXJ0cyA9IFtoZWFkZXIubGVuZ3RoXS5jb25jYXQoc3Rycy5tYXAoZnVuY3Rpb24oc3RyKSB7IHJldHVybiBzdHIubGVuZ3RoOyB9KSk7XG5cdHJldHVybiBvO1xufVxuXG4vKiBbTVMtWExTXSAyLjQuMTA3ICovXG5mdW5jdGlvbiBwYXJzZV9FeHRTU1QoYmxvYiwgbGVuZ3RoKSB7XG5cdHZhciBleHRzc3QgPSB7fTtcblx0ZXh0c3N0LmRzc3QgPSBibG9iLnJlYWRfc2hpZnQoMik7XG5cdGJsb2IubCArPSBsZW5ndGgtMjtcblx0cmV0dXJuIGV4dHNzdDtcbn1cblxuXG4vKiBbTVMtWExTXSAyLjQuMjIxIFRPRE86IGNoZWNrIEJJRkYyLTQgKi9cbmZ1bmN0aW9uIHBhcnNlX1JvdyhibG9iKSB7XG5cdHZhciB6ID0gKHt9Lyo6YW55Ki8pO1xuXHR6LnIgPSBibG9iLnJlYWRfc2hpZnQoMik7XG5cdHouYyA9IGJsb2IucmVhZF9zaGlmdCgyKTtcblx0ei5jbnQgPSBibG9iLnJlYWRfc2hpZnQoMikgLSB6LmM7XG5cdHZhciBtaXlSdyA9IGJsb2IucmVhZF9zaGlmdCgyKTtcblx0YmxvYi5sICs9IDQ7IC8vIHJlc2VydmVkKDIpLCB1bnVzZWQoMilcblx0dmFyIGZsYWdzID0gYmxvYi5yZWFkX3NoaWZ0KDEpOyAvLyB2YXJpb3VzIGZsYWdzXG5cdGJsb2IubCArPSAzOyAvLyByZXNlcnZlZCg4KSwgaXhmZSgxMiksIGZsYWdzKDQpXG5cdGlmKGZsYWdzICYgMHgwNykgei5sZXZlbCA9IGZsYWdzICYgMHgwNztcblx0Ly8gY29sbGFwc2VkOiBmbGFncyAmIDB4MTBcblx0aWYoZmxhZ3MgJiAweDIwKSB6LmhpZGRlbiA9IHRydWU7XG5cdGlmKGZsYWdzICYgMHg0MCkgei5ocHQgPSBtaXlSdyAvIDIwO1xuXHRyZXR1cm4gejtcbn1cblxuXG4vKiBbTVMtWExTXSAyLjQuMTI1ICovXG5mdW5jdGlvbiBwYXJzZV9Gb3JjZUZ1bGxDYWxjdWxhdGlvbihibG9iKSB7XG5cdHZhciBoZWFkZXIgPSBwYXJzZV9mcnRIZWFkZXIoYmxvYik7XG5cdGlmKGhlYWRlci50eXBlICE9IDB4MDhBMykgdGhyb3cgbmV3IEVycm9yKFwiSW52YWxpZCBGdXR1cmUgUmVjb3JkIFwiICsgaGVhZGVyLnR5cGUpO1xuXHR2YXIgZnVsbGNhbGMgPSBibG9iLnJlYWRfc2hpZnQoNCk7XG5cdHJldHVybiBmdWxsY2FsYyAhPT0gMHgwO1xufVxuXG5cblxuXG5cbi8qIFtNUy1YTFNdIDIuNC4yMTUgcnQgKi9cbmZ1bmN0aW9uIHBhcnNlX1JlY2FsY0lkKGJsb2IpIHtcblx0YmxvYi5yZWFkX3NoaWZ0KDIpO1xuXHRyZXR1cm4gYmxvYi5yZWFkX3NoaWZ0KDQpO1xufVxuXG4vKiBbTVMtWExTXSAyLjQuODcgKi9cbmZ1bmN0aW9uIHBhcnNlX0RlZmF1bHRSb3dIZWlnaHQoYmxvYiwgbGVuZ3RoLCBvcHRzKSB7XG5cdHZhciBmID0gMDtcblx0aWYoIShvcHRzICYmIG9wdHMuYmlmZiA9PSAyKSkge1xuXHRcdGYgPSBibG9iLnJlYWRfc2hpZnQoMik7XG5cdH1cblx0dmFyIG1peVJ3ID0gYmxvYi5yZWFkX3NoaWZ0KDIpO1xuXHRpZigob3B0cyAmJiBvcHRzLmJpZmYgPT0gMikpIHtcblx0XHRmID0gMSAtIChtaXlSdyA+PiAxNSk7IG1peVJ3ICY9IDB4N2ZmZjtcblx0fVxuXHR2YXIgZmwgPSB7VW5zeW5jZWQ6ZiYxLER5WmVybzooZiYyKT4+MSxFeEFzYzooZiY0KT4+MixFeERzYzooZiY4KT4+M307XG5cdHJldHVybiBbZmwsIG1peVJ3XTtcbn1cblxuLyogW01TLVhMU10gMi40LjM0NSBUT0RPICovXG5mdW5jdGlvbiBwYXJzZV9XaW5kb3cxKGJsb2IpIHtcblx0dmFyIHhXbiA9IGJsb2IucmVhZF9zaGlmdCgyKSwgeVduID0gYmxvYi5yZWFkX3NoaWZ0KDIpLCBkeFduID0gYmxvYi5yZWFkX3NoaWZ0KDIpLCBkeVduID0gYmxvYi5yZWFkX3NoaWZ0KDIpO1xuXHR2YXIgZmxhZ3MgPSBibG9iLnJlYWRfc2hpZnQoMiksIGlUYWJDdXIgPSBibG9iLnJlYWRfc2hpZnQoMiksIGlUYWJGaXJzdCA9IGJsb2IucmVhZF9zaGlmdCgyKTtcblx0dmFyIGN0YWJTZWwgPSBibG9iLnJlYWRfc2hpZnQoMiksIHdUYWJSYXRpbyA9IGJsb2IucmVhZF9zaGlmdCgyKTtcblx0cmV0dXJuIHsgUG9zOiBbeFduLCB5V25dLCBEaW06IFtkeFduLCBkeVduXSwgRmxhZ3M6IGZsYWdzLCBDdXJUYWI6IGlUYWJDdXIsXG5cdFx0Rmlyc3RUYWI6IGlUYWJGaXJzdCwgU2VsZWN0ZWQ6IGN0YWJTZWwsIFRhYlJhdGlvOiB3VGFiUmF0aW8gfTtcbn1cbmZ1bmN0aW9uIHdyaXRlX1dpbmRvdzEoLyo6Om9wdHMqLykge1xuXHR2YXIgbyA9IG5ld19idWYoMTgpO1xuXHRvLndyaXRlX3NoaWZ0KDIsIDApO1xuXHRvLndyaXRlX3NoaWZ0KDIsIDApO1xuXHRvLndyaXRlX3NoaWZ0KDIsIDB4NzI2MCk7XG5cdG8ud3JpdGVfc2hpZnQoMiwgMHg0NGMwKTtcblx0by53cml0ZV9zaGlmdCgyLCAweDM4KTtcblx0by53cml0ZV9zaGlmdCgyLCAwKTtcblx0by53cml0ZV9zaGlmdCgyLCAwKTtcblx0by53cml0ZV9zaGlmdCgyLCAxKTtcblx0by53cml0ZV9zaGlmdCgyLCAweDAxZjQpO1xuXHRyZXR1cm4gbztcbn1cbi8qIFtNUy1YTFNdIDIuNC4zNDYgVE9ETyAqL1xuZnVuY3Rpb24gcGFyc2VfV2luZG93MihibG9iLCBsZW5ndGgsIG9wdHMpIHtcblx0aWYob3B0cyAmJiBvcHRzLmJpZmYgPj0gMiAmJiBvcHRzLmJpZmYgPCA1KSByZXR1cm4ge307XG5cdHZhciBmID0gYmxvYi5yZWFkX3NoaWZ0KDIpO1xuXHRyZXR1cm4geyBSVEw6IGYgJiAweDQwIH07XG59XG5mdW5jdGlvbiB3cml0ZV9XaW5kb3cyKHZpZXcpIHtcblx0dmFyIG8gPSBuZXdfYnVmKDE4KSwgZiA9IDB4NmI2O1xuXHRpZih2aWV3ICYmIHZpZXcuUlRMKSBmIHw9IDB4NDA7XG5cdG8ud3JpdGVfc2hpZnQoMiwgZik7XG5cdG8ud3JpdGVfc2hpZnQoNCwgMCk7XG5cdG8ud3JpdGVfc2hpZnQoNCwgNjQpO1xuXHRvLndyaXRlX3NoaWZ0KDQsIDApO1xuXHRvLndyaXRlX3NoaWZ0KDQsIDApO1xuXHRyZXR1cm4gbztcbn1cblxuLyogW01TLVhMU10gMi40LjE4OSBUT0RPICovXG5mdW5jdGlvbiBwYXJzZV9QYW5lKC8qYmxvYiwgbGVuZ3RoLCBvcHRzKi8pIHtcbn1cblxuLyogW01TLVhMU10gMi40LjEyMiBUT0RPICovXG5mdW5jdGlvbiBwYXJzZV9Gb250KGJsb2IsIGxlbmd0aCwgb3B0cykge1xuXHR2YXIgby8qOmFueSovID0ge1xuXHRcdGR5SGVpZ2h0OiBibG9iLnJlYWRfc2hpZnQoMiksXG5cdFx0Zmw6IGJsb2IucmVhZF9zaGlmdCgyKVxuXHR9O1xuXHRzd2l0Y2goKG9wdHMgJiYgb3B0cy5iaWZmKSB8fCA4KSB7XG5cdFx0Y2FzZSAyOiBicmVhaztcblx0XHRjYXNlIDM6IGNhc2UgNDogYmxvYi5sICs9IDI7IGJyZWFrO1xuXHRcdGRlZmF1bHQ6IGJsb2IubCArPSAxMDsgYnJlYWs7XG5cdH1cblx0by5uYW1lID0gcGFyc2VfU2hvcnRYTFVuaWNvZGVTdHJpbmcoYmxvYiwgMCwgb3B0cyk7XG5cdHJldHVybiBvO1xufVxuZnVuY3Rpb24gd3JpdGVfRm9udChkYXRhLCBvcHRzKSB7XG5cdHZhciBuYW1lID0gZGF0YS5uYW1lIHx8IFwiQXJpYWxcIjtcblx0dmFyIGI1ID0gKG9wdHMgJiYgKG9wdHMuYmlmZiA9PSA1KSksIHcgPSAoYjUgPyAoMTUgKyBuYW1lLmxlbmd0aCkgOiAoMTYgKyAyICogbmFtZS5sZW5ndGgpKTtcblx0dmFyIG8gPSBuZXdfYnVmKHcpO1xuXHRvLndyaXRlX3NoaWZ0KDIsIChkYXRhLnN6IHx8IDEyKSAqIDIwKTtcblx0by53cml0ZV9zaGlmdCg0LCAwKTtcblx0by53cml0ZV9zaGlmdCgyLCA0MDApO1xuXHRvLndyaXRlX3NoaWZ0KDQsIDApO1xuXHRvLndyaXRlX3NoaWZ0KDIsIDApO1xuXHRvLndyaXRlX3NoaWZ0KDEsIG5hbWUubGVuZ3RoKTtcblx0aWYoIWI1KSBvLndyaXRlX3NoaWZ0KDEsIDEpO1xuXHRvLndyaXRlX3NoaWZ0KChiNSA/IDEgOiAyKSAqIG5hbWUubGVuZ3RoLCBuYW1lLCAoYjUgPyBcInNiY3NcIiA6IFwidXRmMTZsZVwiKSk7XG5cdHJldHVybiBvO1xufVxuXG4vKiBbTVMtWExTXSAyLjQuMTQ5ICovXG5mdW5jdGlvbiBwYXJzZV9MYWJlbFNzdChibG9iKSB7XG5cdHZhciBjZWxsID0gcGFyc2VfWExTQ2VsbChibG9iKTtcblx0Y2VsbC5pc3N0ID0gYmxvYi5yZWFkX3NoaWZ0KDQpO1xuXHRyZXR1cm4gY2VsbDtcbn1cbmZ1bmN0aW9uIHdyaXRlX0xhYmVsU3N0KFIvKjpudW1iZXIqLywgQy8qOm51bWJlciovLCB2Lyo6bnVtYmVyKi8sIG9zLyo6bnVtYmVyKi8gLyo6Oiwgb3B0cyovKSB7XG5cdHZhciBvID0gbmV3X2J1ZigxMCk7XG5cdHdyaXRlX1hMU0NlbGwoUiwgQywgb3MsIG8pO1xuXHRvLndyaXRlX3NoaWZ0KDQsIHYpO1xuXHRyZXR1cm4gbztcbn1cblxuLyogW01TLVhMU10gMi40LjE0OCAqL1xuZnVuY3Rpb24gcGFyc2VfTGFiZWwoYmxvYiwgbGVuZ3RoLCBvcHRzKSB7XG5cdGlmKG9wdHMuYmlmZmd1ZXNzICYmIG9wdHMuYmlmZiA9PSAyKSBvcHRzLmJpZmYgPSA1O1xuXHR2YXIgdGFyZ2V0ID0gYmxvYi5sICsgbGVuZ3RoO1xuXHR2YXIgY2VsbCA9IHBhcnNlX1hMU0NlbGwoYmxvYiwgNik7XG5cdGlmKG9wdHMuYmlmZiA9PSAyKSBibG9iLmwrKztcblx0dmFyIHN0ciA9IHBhcnNlX1hMVW5pY29kZVN0cmluZyhibG9iLCB0YXJnZXQgLSBibG9iLmwsIG9wdHMpO1xuXHRjZWxsLnZhbCA9IHN0cjtcblx0cmV0dXJuIGNlbGw7XG59XG5mdW5jdGlvbiB3cml0ZV9MYWJlbChSLyo6bnVtYmVyKi8sIEMvKjpudW1iZXIqLywgdi8qOnN0cmluZyovLCBvcy8qOm51bWJlciovLCBvcHRzKSB7XG5cdHZhciBiOCA9ICFvcHRzIHx8IG9wdHMuYmlmZiA9PSA4O1xuXHR2YXIgbyA9IG5ld19idWYoNiArIDIgKyAoK2I4KSArICgxICsgYjgpICogdi5sZW5ndGgpO1xuXHR3cml0ZV9YTFNDZWxsKFIsIEMsIG9zLCBvKTtcblx0by53cml0ZV9zaGlmdCgyLCB2Lmxlbmd0aCk7XG5cdGlmKGI4KSBvLndyaXRlX3NoaWZ0KDEsIDEpO1xuXHRvLndyaXRlX3NoaWZ0KCgxICsgYjgpICogdi5sZW5ndGgsIHYsIGI4ID8gJ3V0ZjE2bGUnIDogJ3NiY3MnKTtcblx0cmV0dXJuIG87XG59XG5cblxuLyogW01TLVhMU10gMi40LjEyNiBOdW1iZXIgRm9ybWF0cyAqL1xuZnVuY3Rpb24gcGFyc2VfRm9ybWF0KGJsb2IsIGxlbmd0aCwgb3B0cykge1xuXHR2YXIgbnVtRm10SWQgPSBibG9iLnJlYWRfc2hpZnQoMik7XG5cdHZhciBmbXRzdHIgPSBwYXJzZV9YTFVuaWNvZGVTdHJpbmcyKGJsb2IsIDAsIG9wdHMpO1xuXHRyZXR1cm4gW251bUZtdElkLCBmbXRzdHJdO1xufVxuZnVuY3Rpb24gd3JpdGVfRm9ybWF0KGkvKjpudW1iZXIqLywgZi8qOnN0cmluZyovLCBvcHRzLCBvKSB7XG5cdHZhciBiNSA9IChvcHRzICYmIChvcHRzLmJpZmYgPT0gNSkpO1xuXHRpZighbykgbyA9IG5ld19idWYoYjUgPyAoMyArIGYubGVuZ3RoKSA6ICg1ICsgMiAqIGYubGVuZ3RoKSk7XG5cdG8ud3JpdGVfc2hpZnQoMiwgaSk7XG5cdG8ud3JpdGVfc2hpZnQoKGI1ID8gMSA6IDIpLCBmLmxlbmd0aCk7XG5cdGlmKCFiNSkgby53cml0ZV9zaGlmdCgxLCAxKTtcblx0by53cml0ZV9zaGlmdCgoYjUgPyAxIDogMikgKiBmLmxlbmd0aCwgZiwgKGI1ID8gJ3NiY3MnIDogJ3V0ZjE2bGUnKSk7XG5cdHZhciBvdXQgPSAoby5sZW5ndGggPiBvLmwpID8gby5zbGljZSgwLCBvLmwpIDogbztcblx0aWYob3V0LmwgPT0gbnVsbCkgb3V0LmwgPSBvdXQubGVuZ3RoO1xuXHRyZXR1cm4gb3V0O1xufVxudmFyIHBhcnNlX0JJRkYyRm9ybWF0ID0gcGFyc2VfWExVbmljb2RlU3RyaW5nMjtcblxuLyogW01TLVhMU10gMi40LjkwICovXG5mdW5jdGlvbiBwYXJzZV9EaW1lbnNpb25zKGJsb2IsIGxlbmd0aCwgb3B0cykge1xuXHR2YXIgZW5kID0gYmxvYi5sICsgbGVuZ3RoO1xuXHR2YXIgdyA9IG9wdHMuYmlmZiA9PSA4IHx8ICFvcHRzLmJpZmYgPyA0IDogMjtcblx0dmFyIHIgPSBibG9iLnJlYWRfc2hpZnQodyksIFIgPSBibG9iLnJlYWRfc2hpZnQodyk7XG5cdHZhciBjID0gYmxvYi5yZWFkX3NoaWZ0KDIpLCBDID0gYmxvYi5yZWFkX3NoaWZ0KDIpO1xuXHRibG9iLmwgPSBlbmQ7XG5cdHJldHVybiB7czoge3I6ciwgYzpjfSwgZToge3I6UiwgYzpDfX07XG59XG5mdW5jdGlvbiB3cml0ZV9EaW1lbnNpb25zKHJhbmdlLCBvcHRzKSB7XG5cdHZhciB3ID0gb3B0cy5iaWZmID09IDggfHwgIW9wdHMuYmlmZiA/IDQgOiAyO1xuXHR2YXIgbyA9IG5ld19idWYoMip3ICsgNik7XG5cdG8ud3JpdGVfc2hpZnQodywgcmFuZ2Uucy5yKTtcblx0by53cml0ZV9zaGlmdCh3LCByYW5nZS5lLnIgKyAxKTtcblx0by53cml0ZV9zaGlmdCgyLCByYW5nZS5zLmMpO1xuXHRvLndyaXRlX3NoaWZ0KDIsIHJhbmdlLmUuYyArIDEpO1xuXHRvLndyaXRlX3NoaWZ0KDIsIDApO1xuXHRyZXR1cm4gbztcbn1cblxuLyogW01TLVhMU10gMi40LjIyMCAqL1xuZnVuY3Rpb24gcGFyc2VfUksoYmxvYikge1xuXHR2YXIgcncgPSBibG9iLnJlYWRfc2hpZnQoMiksIGNvbCA9IGJsb2IucmVhZF9zaGlmdCgyKTtcblx0dmFyIHJrcmVjID0gcGFyc2VfUmtSZWMoYmxvYik7XG5cdHJldHVybiB7cjpydywgYzpjb2wsIGl4ZmU6cmtyZWNbMF0sIHJrbnVtOnJrcmVjWzFdfTtcbn1cblxuLyogW01TLVhMU10gMi40LjE3NSAqL1xuZnVuY3Rpb24gcGFyc2VfTXVsUmsoYmxvYiwgbGVuZ3RoKSB7XG5cdHZhciB0YXJnZXQgPSBibG9iLmwgKyBsZW5ndGggLSAyO1xuXHR2YXIgcncgPSBibG9iLnJlYWRfc2hpZnQoMiksIGNvbCA9IGJsb2IucmVhZF9zaGlmdCgyKTtcblx0dmFyIHJrcmVjcyA9IFtdO1xuXHR3aGlsZShibG9iLmwgPCB0YXJnZXQpIHJrcmVjcy5wdXNoKHBhcnNlX1JrUmVjKGJsb2IpKTtcblx0aWYoYmxvYi5sICE9PSB0YXJnZXQpIHRocm93IG5ldyBFcnJvcihcIk11bFJLIHJlYWQgZXJyb3JcIik7XG5cdHZhciBsYXN0Y29sID0gYmxvYi5yZWFkX3NoaWZ0KDIpO1xuXHRpZihya3JlY3MubGVuZ3RoICE9IGxhc3Rjb2wgLSBjb2wgKyAxKSB0aHJvdyBuZXcgRXJyb3IoXCJNdWxSSyBsZW5ndGggbWlzbWF0Y2hcIik7XG5cdHJldHVybiB7cjpydywgYzpjb2wsIEM6bGFzdGNvbCwgcmtyZWM6cmtyZWNzfTtcbn1cbi8qIFtNUy1YTFNdIDIuNC4xNzQgKi9cbmZ1bmN0aW9uIHBhcnNlX011bEJsYW5rKGJsb2IsIGxlbmd0aCkge1xuXHR2YXIgdGFyZ2V0ID0gYmxvYi5sICsgbGVuZ3RoIC0gMjtcblx0dmFyIHJ3ID0gYmxvYi5yZWFkX3NoaWZ0KDIpLCBjb2wgPSBibG9iLnJlYWRfc2hpZnQoMik7XG5cdHZhciBpeGZlcyA9IFtdO1xuXHR3aGlsZShibG9iLmwgPCB0YXJnZXQpIGl4ZmVzLnB1c2goYmxvYi5yZWFkX3NoaWZ0KDIpKTtcblx0aWYoYmxvYi5sICE9PSB0YXJnZXQpIHRocm93IG5ldyBFcnJvcihcIk11bEJsYW5rIHJlYWQgZXJyb3JcIik7XG5cdHZhciBsYXN0Y29sID0gYmxvYi5yZWFkX3NoaWZ0KDIpO1xuXHRpZihpeGZlcy5sZW5ndGggIT0gbGFzdGNvbCAtIGNvbCArIDEpIHRocm93IG5ldyBFcnJvcihcIk11bEJsYW5rIGxlbmd0aCBtaXNtYXRjaFwiKTtcblx0cmV0dXJuIHtyOnJ3LCBjOmNvbCwgQzpsYXN0Y29sLCBpeGZlOml4ZmVzfTtcbn1cblxuLyogW01TLVhMU10gMi41LjIwIDIuNS4yNDkgVE9ETzogaW50ZXJwcmV0IHZhbHVlcyBoZXJlICovXG5mdW5jdGlvbiBwYXJzZV9DZWxsU3R5bGVYRihibG9iLCBsZW5ndGgsIHN0eWxlLCBvcHRzKSB7XG5cdHZhciBvID0ge307XG5cdHZhciBhID0gYmxvYi5yZWFkX3NoaWZ0KDQpLCBiID0gYmxvYi5yZWFkX3NoaWZ0KDQpO1xuXHR2YXIgYyA9IGJsb2IucmVhZF9zaGlmdCg0KSwgZCA9IGJsb2IucmVhZF9zaGlmdCgyKTtcblx0by5wYXR0ZXJuVHlwZSA9IFhMU0ZpbGxQYXR0ZXJuW2MgPj4gMjZdO1xuXG5cdGlmKCFvcHRzLmNlbGxTdHlsZXMpIHJldHVybiBvO1xuXHRvLmFsYyA9IGEgJiAweDA3O1xuXHRvLmZXcmFwID0gKGEgPj4gMykgJiAweDAxO1xuXHRvLmFsY1YgPSAoYSA+PiA0KSAmIDB4MDc7XG5cdG8uZkp1c3RMYXN0ID0gKGEgPj4gNykgJiAweDAxO1xuXHRvLnRyb3QgPSAoYSA+PiA4KSAmIDB4RkY7XG5cdG8uY0luZGVudCA9IChhID4+IDE2KSAmIDB4MEY7XG5cdG8uZlNocmlua1RvRml0ID0gKGEgPj4gMjApICYgMHgwMTtcblx0by5pUmVhZE9yZGVyID0gKGEgPj4gMjIpICYgMHgwMjtcblx0by5mQXRyTnVtID0gKGEgPj4gMjYpICYgMHgwMTtcblx0by5mQXRyRm50ID0gKGEgPj4gMjcpICYgMHgwMTtcblx0by5mQXRyQWxjID0gKGEgPj4gMjgpICYgMHgwMTtcblx0by5mQXRyQmRyID0gKGEgPj4gMjkpICYgMHgwMTtcblx0by5mQXRyUGF0ID0gKGEgPj4gMzApICYgMHgwMTtcblx0by5mQXRyUHJvdCA9IChhID4+IDMxKSAmIDB4MDE7XG5cblx0by5kZ0xlZnQgPSBiICYgMHgwRjtcblx0by5kZ1JpZ2h0ID0gKGIgPj4gNCkgJiAweDBGO1xuXHRvLmRnVG9wID0gKGIgPj4gOCkgJiAweDBGO1xuXHRvLmRnQm90dG9tID0gKGIgPj4gMTIpICYgMHgwRjtcblx0by5pY3ZMZWZ0ID0gKGIgPj4gMTYpICYgMHg3Rjtcblx0by5pY3ZSaWdodCA9IChiID4+IDIzKSAmIDB4N0Y7XG5cdG8uZ3JiaXREaWFnID0gKGIgPj4gMzApICYgMHgwMztcblxuXHRvLmljdlRvcCA9IGMgJiAweDdGO1xuXHRvLmljdkJvdHRvbSA9IChjID4+IDcpICYgMHg3Rjtcblx0by5pY3ZEaWFnID0gKGMgPj4gMTQpICYgMHg3Rjtcblx0by5kZ0RpYWcgPSAoYyA+PiAyMSkgJiAweDBGO1xuXG5cdG8uaWN2Rm9yZSA9IGQgJiAweDdGO1xuXHRvLmljdkJhY2sgPSAoZCA+PiA3KSAmIDB4N0Y7XG5cdG8uZnN4QnV0dG9uID0gKGQgPj4gMTQpICYgMHgwMTtcblx0cmV0dXJuIG87XG59XG4vL2Z1bmN0aW9uIHBhcnNlX0NlbGxYRihibG9iLCBsZW5ndGgsIG9wdHMpIHtyZXR1cm4gcGFyc2VfQ2VsbFN0eWxlWEYoYmxvYixsZW5ndGgsMCwgb3B0cyk7fVxuLy9mdW5jdGlvbiBwYXJzZV9TdHlsZVhGKGJsb2IsIGxlbmd0aCwgb3B0cykge3JldHVybiBwYXJzZV9DZWxsU3R5bGVYRihibG9iLGxlbmd0aCwxLCBvcHRzKTt9XG5cbi8qIFtNUy1YTFNdIDIuNC4zNTMgVE9ETzogYWN0dWFsbHkgZG8gdGhpcyByaWdodCAqL1xuZnVuY3Rpb24gcGFyc2VfWEYoYmxvYiwgbGVuZ3RoLCBvcHRzKSB7XG5cdHZhciBvID0ge307XG5cdG8uaWZudCA9IGJsb2IucmVhZF9zaGlmdCgyKTsgby5udW1GbXRJZCA9IGJsb2IucmVhZF9zaGlmdCgyKTsgby5mbGFncyA9IGJsb2IucmVhZF9zaGlmdCgyKTtcblx0by5mU3R5bGUgPSAoby5mbGFncyA+PiAyKSAmIDB4MDE7XG5cdGxlbmd0aCAtPSA2O1xuXHRvLmRhdGEgPSBwYXJzZV9DZWxsU3R5bGVYRihibG9iLCBsZW5ndGgsIG8uZlN0eWxlLCBvcHRzKTtcblx0cmV0dXJuIG87XG59XG5mdW5jdGlvbiB3cml0ZV9YRihkYXRhLCBpeGZlUCwgb3B0cywgbykge1xuXHR2YXIgYjUgPSAob3B0cyAmJiAob3B0cy5iaWZmID09IDUpKTtcblx0aWYoIW8pIG8gPSBuZXdfYnVmKGI1ID8gMTYgOiAyMCk7XG5cdG8ud3JpdGVfc2hpZnQoMiwgMCk7XG5cdGlmKGRhdGEuc3R5bGUpIHtcblx0XHRvLndyaXRlX3NoaWZ0KDIsIChkYXRhLm51bUZtdElkfHwwKSk7XG5cdFx0by53cml0ZV9zaGlmdCgyLCAweEZGRjQpO1xuXHR9IGVsc2Uge1xuXHRcdG8ud3JpdGVfc2hpZnQoMiwgKGRhdGEubnVtRm10SWR8fDApKTtcblx0XHRvLndyaXRlX3NoaWZ0KDIsIChpeGZlUDw8NCkpO1xuXHR9XG5cdHZhciBmID0gMDtcblx0aWYoZGF0YS5udW1GbXRJZCA+IDAgJiYgYjUpIGYgfD0gMHgwNDAwO1xuXHRvLndyaXRlX3NoaWZ0KDQsIGYpO1xuXHRvLndyaXRlX3NoaWZ0KDQsIDApO1xuXHRpZighYjUpIG8ud3JpdGVfc2hpZnQoNCwgMCk7XG5cdG8ud3JpdGVfc2hpZnQoMiwgMCk7XG5cdHJldHVybiBvO1xufVxuXG4vKiBbTVMtWExTXSAyLjQuMTM0ICovXG5mdW5jdGlvbiBwYXJzZV9HdXRzKGJsb2IpIHtcblx0YmxvYi5sICs9IDQ7XG5cdHZhciBvdXQgPSBbYmxvYi5yZWFkX3NoaWZ0KDIpLCBibG9iLnJlYWRfc2hpZnQoMildO1xuXHRpZihvdXRbMF0gIT09IDApIG91dFswXS0tO1xuXHRpZihvdXRbMV0gIT09IDApIG91dFsxXS0tO1xuXHRpZihvdXRbMF0gPiA3IHx8IG91dFsxXSA+IDcpIHRocm93IG5ldyBFcnJvcihcIkJhZCBHdXR0ZXJzOiBcIiArIG91dC5qb2luKFwifFwiKSk7XG5cdHJldHVybiBvdXQ7XG59XG5mdW5jdGlvbiB3cml0ZV9HdXRzKGd1dHMvKjpBcnJheTxudW1iZXI+Ki8pIHtcblx0dmFyIG8gPSBuZXdfYnVmKDgpO1xuXHRvLndyaXRlX3NoaWZ0KDQsIDApO1xuXHRvLndyaXRlX3NoaWZ0KDIsIGd1dHNbMF0gPyBndXRzWzBdICsgMSA6IDApO1xuXHRvLndyaXRlX3NoaWZ0KDIsIGd1dHNbMV0gPyBndXRzWzFdICsgMSA6IDApO1xuXHRyZXR1cm4gbztcbn1cblxuLyogW01TLVhMU10gMi40LjI0ICovXG5mdW5jdGlvbiBwYXJzZV9Cb29sRXJyKGJsb2IsIGxlbmd0aCwgb3B0cykge1xuXHR2YXIgY2VsbCA9IHBhcnNlX1hMU0NlbGwoYmxvYiwgNik7XG5cdGlmKG9wdHMuYmlmZiA9PSAyIHx8IGxlbmd0aCA9PSA5KSArK2Jsb2IubDtcblx0dmFyIHZhbCA9IHBhcnNlX0JlcyhibG9iLCAyKTtcblx0Y2VsbC52YWwgPSB2YWw7XG5cdGNlbGwudCA9ICh2YWwgPT09IHRydWUgfHwgdmFsID09PSBmYWxzZSkgPyAnYicgOiAnZSc7XG5cdHJldHVybiBjZWxsO1xufVxuZnVuY3Rpb24gd3JpdGVfQm9vbEVycihSLyo6bnVtYmVyKi8sIEMvKjpudW1iZXIqLywgdiwgb3MvKjpudW1iZXIqLywgb3B0cywgdC8qOnN0cmluZyovKSB7XG5cdHZhciBvID0gbmV3X2J1Zig4KTtcblx0d3JpdGVfWExTQ2VsbChSLCBDLCBvcywgbyk7XG5cdHdyaXRlX0Jlcyh2LCB0LCBvKTtcblx0cmV0dXJuIG87XG59XG5cbi8qIFtNUy1YTFNdIDIuNC4xODAgTnVtYmVyICovXG5mdW5jdGlvbiBwYXJzZV9OdW1iZXIoYmxvYiwgbGVuZ3RoLCBvcHRzKSB7XG5cdGlmKG9wdHMuYmlmZmd1ZXNzICYmIG9wdHMuYmlmZiA9PSAyKSBvcHRzLmJpZmYgPSA1O1xuXHR2YXIgY2VsbCA9IHBhcnNlX1hMU0NlbGwoYmxvYiwgNik7XG5cdHZhciB4bnVtID0gcGFyc2VfWG51bShibG9iLCA4KTtcblx0Y2VsbC52YWwgPSB4bnVtO1xuXHRyZXR1cm4gY2VsbDtcbn1cbmZ1bmN0aW9uIHdyaXRlX051bWJlcihSLyo6bnVtYmVyKi8sIEMvKjpudW1iZXIqLywgdiwgb3MvKjo6IDpudW1iZXIsIG9wdHMqLykge1xuXHR2YXIgbyA9IG5ld19idWYoMTQpO1xuXHR3cml0ZV9YTFNDZWxsKFIsIEMsIG9zLCBvKTtcblx0d3JpdGVfWG51bSh2LCBvKTtcblx0cmV0dXJuIG87XG59XG5cbnZhciBwYXJzZV9YTEhlYWRlckZvb3RlciA9IHBhcnNlX09wdFhMVW5pY29kZVN0cmluZzsgLy8gVE9ETzogcGFyc2UgMi40LjEzNlxuXG4vKiBbTVMtWExTXSAyLjQuMjcxICovXG5mdW5jdGlvbiBwYXJzZV9TdXBCb29rKGJsb2IsIGxlbmd0aCwgb3B0cykge1xuXHR2YXIgZW5kID0gYmxvYi5sICsgbGVuZ3RoO1xuXHR2YXIgY3RhYiA9IGJsb2IucmVhZF9zaGlmdCgyKTtcblx0dmFyIGNjaCA9IGJsb2IucmVhZF9zaGlmdCgyKTtcblx0b3B0cy5zYmNjaCA9IGNjaDtcblx0aWYoY2NoID09IDB4MDQwMSB8fCBjY2ggPT0gMHgzQTAxKSByZXR1cm4gW2NjaCwgY3RhYl07XG5cdGlmKGNjaCA8IDB4MDEgfHwgY2NoID4weGZmKSB0aHJvdyBuZXcgRXJyb3IoXCJVbmV4cGVjdGVkIFN1cEJvb2sgdHlwZTogXCIrY2NoKTtcblx0dmFyIHZpcnRQYXRoID0gcGFyc2VfWExVbmljb2RlU3RyaW5nTm9DY2goYmxvYiwgY2NoKTtcblx0LyogVE9ETzogMi41LjI3NyBWaXJ0dWFsIFBhdGggKi9cblx0dmFyIHJnc3QgPSBbXTtcblx0d2hpbGUoZW5kID4gYmxvYi5sKSByZ3N0LnB1c2gocGFyc2VfWExVbmljb2RlU3RyaW5nKGJsb2IpKTtcblx0cmV0dXJuIFtjY2gsIGN0YWIsIHZpcnRQYXRoLCByZ3N0XTtcbn1cblxuLyogW01TLVhMU10gMi40LjEwNSBUT0RPICovXG5mdW5jdGlvbiBwYXJzZV9FeHRlcm5OYW1lKGJsb2IsIGxlbmd0aCwgb3B0cykge1xuXHR2YXIgZmxhZ3MgPSBibG9iLnJlYWRfc2hpZnQoMik7XG5cdHZhciBib2R5O1xuXHR2YXIgbyA9ICh7XG5cdFx0ZkJ1aWx0SW46IGZsYWdzICYgMHgwMSxcblx0XHRmV2FudEFkdmlzZTogKGZsYWdzID4+PiAxKSAmIDB4MDEsXG5cdFx0ZldhbnRQaWN0OiAoZmxhZ3MgPj4+IDIpICYgMHgwMSxcblx0XHRmT2xlOiAoZmxhZ3MgPj4+IDMpICYgMHgwMSxcblx0XHRmT2xlTGluazogKGZsYWdzID4+PiA0KSAmIDB4MDEsXG5cdFx0Y2Y6IChmbGFncyA+Pj4gNSkgJiAweDNGRixcblx0XHRmSWNvbjogZmxhZ3MgPj4+IDE1ICYgMHgwMVxuXHR9Lyo6YW55Ki8pO1xuXHRpZihvcHRzLnNiY2NoID09PSAweDNBMDEpIGJvZHkgPSBwYXJzZV9BZGRpblVkZihibG9iLCBsZW5ndGgtMiwgb3B0cyk7XG5cdC8vZWxzZSB0aHJvdyBuZXcgRXJyb3IoXCJ1bnN1cHBvcnRlZCBTdXBCb29rIGNjaDogXCIgKyBvcHRzLnNiY2NoKTtcblx0by5ib2R5ID0gYm9keSB8fCBibG9iLnJlYWRfc2hpZnQobGVuZ3RoLTIpO1xuXHRpZih0eXBlb2YgYm9keSA9PT0gXCJzdHJpbmdcIikgby5OYW1lID0gYm9keTtcblx0cmV0dXJuIG87XG59XG5cbi8qIFtNUy1YTFNdIDIuNC4xNTAgVE9ETyAqL1xudmFyIFhMU0xibEJ1aWx0SW4gPSBbXG5cdFwiX3hsbm0uQ29uc29saWRhdGVfQXJlYVwiLFxuXHRcIl94bG5tLkF1dG9fT3BlblwiLFxuXHRcIl94bG5tLkF1dG9fQ2xvc2VcIixcblx0XCJfeGxubS5FeHRyYWN0XCIsXG5cdFwiX3hsbm0uRGF0YWJhc2VcIixcblx0XCJfeGxubS5Dcml0ZXJpYVwiLFxuXHRcIl94bG5tLlByaW50X0FyZWFcIixcblx0XCJfeGxubS5QcmludF9UaXRsZXNcIixcblx0XCJfeGxubS5SZWNvcmRlclwiLFxuXHRcIl94bG5tLkRhdGFfRm9ybVwiLFxuXHRcIl94bG5tLkF1dG9fQWN0aXZhdGVcIixcblx0XCJfeGxubS5BdXRvX0RlYWN0aXZhdGVcIixcblx0XCJfeGxubS5TaGVldF9UaXRsZVwiLFxuXHRcIl94bG5tLl9GaWx0ZXJEYXRhYmFzZVwiXG5dO1xuZnVuY3Rpb24gcGFyc2VfTGJsKGJsb2IsIGxlbmd0aCwgb3B0cykge1xuXHR2YXIgdGFyZ2V0ID0gYmxvYi5sICsgbGVuZ3RoO1xuXHR2YXIgZmxhZ3MgPSBibG9iLnJlYWRfc2hpZnQoMik7XG5cdHZhciBjaEtleSA9IGJsb2IucmVhZF9zaGlmdCgxKTtcblx0dmFyIGNjaCA9IGJsb2IucmVhZF9zaGlmdCgxKTtcblx0dmFyIGNjZSA9IGJsb2IucmVhZF9zaGlmdChvcHRzICYmIG9wdHMuYmlmZiA9PSAyID8gMSA6IDIpO1xuXHR2YXIgaXRhYiA9IDA7XG5cdGlmKCFvcHRzIHx8IG9wdHMuYmlmZiA+PSA1KSB7XG5cdFx0aWYob3B0cy5iaWZmICE9IDUpIGJsb2IubCArPSAyO1xuXHRcdGl0YWIgPSBibG9iLnJlYWRfc2hpZnQoMik7XG5cdFx0aWYob3B0cy5iaWZmID09IDUpIGJsb2IubCArPSAyO1xuXHRcdGJsb2IubCArPSA0O1xuXHR9XG5cdHZhciBuYW1lID0gcGFyc2VfWExVbmljb2RlU3RyaW5nTm9DY2goYmxvYiwgY2NoLCBvcHRzKTtcblx0aWYoZmxhZ3MgJiAweDIwKSBuYW1lID0gWExTTGJsQnVpbHRJbltuYW1lLmNoYXJDb2RlQXQoMCldO1xuXHR2YXIgbnBmbGVuID0gdGFyZ2V0IC0gYmxvYi5sOyBpZihvcHRzICYmIG9wdHMuYmlmZiA9PSAyKSAtLW5wZmxlbjtcblx0Lypqc2hpbnQgLVcwMTggKi9cblx0dmFyIHJnY2UgPSAodGFyZ2V0ID09IGJsb2IubCB8fCBjY2UgPT09IDAgfHwgIShucGZsZW4gPiAwKSkgPyBbXSA6IHBhcnNlX05hbWVQYXJzZWRGb3JtdWxhKGJsb2IsIG5wZmxlbiwgb3B0cywgY2NlKTtcblx0Lypqc2hpbnQgK1cwMTggKi9cblx0cmV0dXJuIHtcblx0XHRjaEtleTogY2hLZXksXG5cdFx0TmFtZTogbmFtZSxcblx0XHRpdGFiOiBpdGFiLFxuXHRcdHJnY2U6IHJnY2Vcblx0fTtcbn1cblxuLyogW01TLVhMU10gMi40LjEwNiBUT0RPOiB2ZXJpZnkgZmlsZW5hbWUgZW5jb2RpbmcgKi9cbmZ1bmN0aW9uIHBhcnNlX0V4dGVyblNoZWV0KGJsb2IsIGxlbmd0aCwgb3B0cykge1xuXHRpZihvcHRzLmJpZmYgPCA4KSByZXR1cm4gcGFyc2VfQklGRjVFeHRlcm5TaGVldChibG9iLCBsZW5ndGgsIG9wdHMpO1xuXHR2YXIgbyA9IFtdLCB0YXJnZXQgPSBibG9iLmwgKyBsZW5ndGgsIGxlbiA9IGJsb2IucmVhZF9zaGlmdChvcHRzLmJpZmYgPiA4ID8gNCA6IDIpO1xuXHR3aGlsZShsZW4tLSAhPT0gMCkgby5wdXNoKHBhcnNlX1hUSShibG9iLCBvcHRzLmJpZmYgPiA4ID8gMTIgOiA2LCBvcHRzKSk7XG5cdFx0Ly8gW2lTdXBCb29rLCBpdGFiRmlyc3QsIGl0YWJMYXN0XTtcblx0aWYoYmxvYi5sICE9IHRhcmdldCkgdGhyb3cgbmV3IEVycm9yKFwiQmFkIEV4dGVyblNoZWV0OiBcIiArIGJsb2IubCArIFwiICE9IFwiICsgdGFyZ2V0KTtcblx0cmV0dXJuIG87XG59XG5mdW5jdGlvbiBwYXJzZV9CSUZGNUV4dGVyblNoZWV0KGJsb2IsIGxlbmd0aCwgb3B0cykge1xuXHRpZihibG9iW2Jsb2IubCArIDFdID09IDB4MDMpIGJsb2JbYmxvYi5sXSsrO1xuXHR2YXIgbyA9IHBhcnNlX1Nob3J0WExVbmljb2RlU3RyaW5nKGJsb2IsIGxlbmd0aCwgb3B0cyk7XG5cdHJldHVybiBvLmNoYXJDb2RlQXQoMCkgPT0gMHgwMyA/IG8uc2xpY2UoMSkgOiBvO1xufVxuXG4vKiBbTVMtWExTXSAyLjQuMTc2IFRPRE86IGNoZWNrIG9sZGVyIGJpZmYgKi9cbmZ1bmN0aW9uIHBhcnNlX05hbWVDbXQoYmxvYiwgbGVuZ3RoLCBvcHRzKSB7XG5cdGlmKG9wdHMuYmlmZiA8IDgpIHsgYmxvYi5sICs9IGxlbmd0aDsgcmV0dXJuOyB9XG5cdHZhciBjY2hOYW1lID0gYmxvYi5yZWFkX3NoaWZ0KDIpO1xuXHR2YXIgY2NoQ29tbWVudCA9IGJsb2IucmVhZF9zaGlmdCgyKTtcblx0dmFyIG5hbWUgPSBwYXJzZV9YTFVuaWNvZGVTdHJpbmdOb0NjaChibG9iLCBjY2hOYW1lLCBvcHRzKTtcblx0dmFyIGNvbW1lbnQgPSBwYXJzZV9YTFVuaWNvZGVTdHJpbmdOb0NjaChibG9iLCBjY2hDb21tZW50LCBvcHRzKTtcblx0cmV0dXJuIFtuYW1lLCBjb21tZW50XTtcbn1cblxuLyogW01TLVhMU10gMi40LjI2MCAqL1xuZnVuY3Rpb24gcGFyc2VfU2hyRm1sYShibG9iLCBsZW5ndGgsIG9wdHMpIHtcblx0dmFyIHJlZiA9IHBhcnNlX1JlZlUoYmxvYiwgNik7XG5cdGJsb2IubCsrO1xuXHR2YXIgY1VzZSA9IGJsb2IucmVhZF9zaGlmdCgxKTtcblx0bGVuZ3RoIC09IDg7XG5cdHJldHVybiBbcGFyc2VfU2hhcmVkUGFyc2VkRm9ybXVsYShibG9iLCBsZW5ndGgsIG9wdHMpLCBjVXNlLCByZWZdO1xufVxuXG4vKiBbTVMtWExTXSAyLjQuNCBUT0RPICovXG5mdW5jdGlvbiBwYXJzZV9BcnJheShibG9iLCBsZW5ndGgsIG9wdHMpIHtcblx0dmFyIHJlZiA9IHBhcnNlX1JlZihibG9iLCA2KTtcblx0LyogVE9ETzogZkFsd2F5c0NhbGMgKi9cblx0c3dpdGNoKG9wdHMuYmlmZikge1xuXHRcdGNhc2UgMjogYmxvYi5sICsrOyBsZW5ndGggLT0gNzsgYnJlYWs7XG5cdFx0Y2FzZSAzOiBjYXNlIDQ6IGJsb2IubCArPSAyOyBsZW5ndGggLT0gODsgYnJlYWs7XG5cdFx0ZGVmYXVsdDogYmxvYi5sICs9IDY7IGxlbmd0aCAtPSAxMjtcblx0fVxuXHRyZXR1cm4gW3JlZiwgcGFyc2VfQXJyYXlQYXJzZWRGb3JtdWxhKGJsb2IsIGxlbmd0aCwgb3B0cywgcmVmKV07XG59XG5cbi8qIFtNUy1YTFNdIDIuNC4xNzMgKi9cbmZ1bmN0aW9uIHBhcnNlX01UUlNldHRpbmdzKGJsb2IpIHtcblx0dmFyIGZNVFJFbmFibGVkID0gYmxvYi5yZWFkX3NoaWZ0KDQpICE9PSAweDAwO1xuXHR2YXIgZlVzZXJTZXRUaHJlYWRDb3VudCA9IGJsb2IucmVhZF9zaGlmdCg0KSAhPT0gMHgwMDtcblx0dmFyIGNVc2VyVGhyZWFkQ291bnQgPSBibG9iLnJlYWRfc2hpZnQoNCk7XG5cdHJldHVybiBbZk1UUkVuYWJsZWQsIGZVc2VyU2V0VGhyZWFkQ291bnQsIGNVc2VyVGhyZWFkQ291bnRdO1xufVxuXG4vKiBbTVMtWExTXSAyLjUuMTg2IFRPRE86IEJJRkY1ICovXG5mdW5jdGlvbiBwYXJzZV9Ob3RlU2goYmxvYiwgbGVuZ3RoLCBvcHRzKSB7XG5cdGlmKG9wdHMuYmlmZiA8IDgpIHJldHVybjtcblx0dmFyIHJvdyA9IGJsb2IucmVhZF9zaGlmdCgyKSwgY29sID0gYmxvYi5yZWFkX3NoaWZ0KDIpO1xuXHR2YXIgZmxhZ3MgPSBibG9iLnJlYWRfc2hpZnQoMiksIGlkT2JqID0gYmxvYi5yZWFkX3NoaWZ0KDIpO1xuXHR2YXIgc3RBdXRob3IgPSBwYXJzZV9YTFVuaWNvZGVTdHJpbmcyKGJsb2IsIDAsIG9wdHMpO1xuXHRpZihvcHRzLmJpZmYgPCA4KSBibG9iLnJlYWRfc2hpZnQoMSk7XG5cdHJldHVybiBbe3I6cm93LGM6Y29sfSwgc3RBdXRob3IsIGlkT2JqLCBmbGFnc107XG59XG5cbi8qIFtNUy1YTFNdIDIuNC4xNzkgKi9cbmZ1bmN0aW9uIHBhcnNlX05vdGUoYmxvYiwgbGVuZ3RoLCBvcHRzKSB7XG5cdC8qIFRPRE86IFN1cHBvcnQgcmV2aXNpb25zICovXG5cdHJldHVybiBwYXJzZV9Ob3RlU2goYmxvYiwgbGVuZ3RoLCBvcHRzKTtcbn1cblxuLyogW01TLVhMU10gMi40LjE2OCAqL1xuZnVuY3Rpb24gcGFyc2VfTWVyZ2VDZWxscyhibG9iLCBsZW5ndGgpLyo6QXJyYXk8UmFuZ2U+Ki8ge1xuXHR2YXIgbWVyZ2VzLyo6QXJyYXk8UmFuZ2U+Ki8gPSBbXTtcblx0dmFyIGNtY3MgPSBibG9iLnJlYWRfc2hpZnQoMik7XG5cdHdoaWxlIChjbWNzLS0pIG1lcmdlcy5wdXNoKHBhcnNlX1JlZjhVKGJsb2IsbGVuZ3RoKSk7XG5cdHJldHVybiBtZXJnZXM7XG59XG5mdW5jdGlvbiB3cml0ZV9NZXJnZUNlbGxzKG1lcmdlcy8qOkFycmF5PFJhbmdlPiovKSB7XG5cdHZhciBvID0gbmV3X2J1ZigyICsgbWVyZ2VzLmxlbmd0aCAqIDgpO1xuXHRvLndyaXRlX3NoaWZ0KDIsIG1lcmdlcy5sZW5ndGgpO1xuXHRmb3IodmFyIGkgPSAwOyBpIDwgbWVyZ2VzLmxlbmd0aDsgKytpKSB3cml0ZV9SZWY4VShtZXJnZXNbaV0sIG8pO1xuXHRyZXR1cm4gbztcbn1cblxuLyogW01TLVhMU10gMi40LjE4MSBUT0RPOiBwYXJzZSBhbGwgdGhlIHRoaW5ncyEgKi9cbmZ1bmN0aW9uIHBhcnNlX09iaihibG9iLCBsZW5ndGgsIG9wdHMpIHtcblx0aWYob3B0cyAmJiBvcHRzLmJpZmYgPCA4KSByZXR1cm4gcGFyc2VfQklGRjVPYmooYmxvYiwgbGVuZ3RoLCBvcHRzKTtcblx0dmFyIGNtbyA9IHBhcnNlX0Z0Q21vKGJsb2IsIDIyKTsgLy8gaWQsIG90LCBmbGFnc1xuXHR2YXIgZnRzID0gcGFyc2VfRnRBcnJheShibG9iLCBsZW5ndGgtMjIsIGNtb1sxXSk7XG5cdHJldHVybiB7IGNtbzogY21vLCBmdDpmdHMgfTtcbn1cbi8qIGZyb20gb2xkZXIgc3BlYyAqL1xudmFyIHBhcnNlX0JJRkY1T1QgPSB7XG4weDA4OiBmdW5jdGlvbihibG9iLCBsZW5ndGgpIHtcblx0dmFyIHRndCA9IGJsb2IubCArIGxlbmd0aDtcblx0YmxvYi5sICs9IDEwOyAvLyB0b2RvXG5cdHZhciBjZiA9IGJsb2IucmVhZF9zaGlmdCgyKTtcblx0YmxvYi5sICs9IDQ7XG5cdGJsb2IubCArPSAyOyAvL3ZhciBjYlBpY3RGbWxhID0gYmxvYi5yZWFkX3NoaWZ0KDIpO1xuXHRibG9iLmwgKz0gMjtcblx0YmxvYi5sICs9IDI7IC8vdmFyIGdyYml0ID0gYmxvYi5yZWFkX3NoaWZ0KDIpO1xuXHRibG9iLmwgKz0gNDtcblx0dmFyIGNjaE5hbWUgPSBibG9iLnJlYWRfc2hpZnQoMSk7XG5cdGJsb2IubCArPSBjY2hOYW1lOyAvLyBUT0RPOiBzdE5hbWVcblx0YmxvYi5sID0gdGd0OyAvLyBUT0RPOiBmbWxhXG5cdHJldHVybiB7IGZtdDpjZiB9O1xufVxufTtcblxuZnVuY3Rpb24gcGFyc2VfQklGRjVPYmooYmxvYiwgbGVuZ3RoLCBvcHRzKSB7XG5cdGJsb2IubCArPSA0OyAvL3ZhciBjbnQgPSBibG9iLnJlYWRfc2hpZnQoNCk7XG5cdHZhciBvdCA9IGJsb2IucmVhZF9zaGlmdCgyKTtcblx0dmFyIGlkID0gYmxvYi5yZWFkX3NoaWZ0KDIpO1xuXHR2YXIgZ3JiaXQgPSBibG9iLnJlYWRfc2hpZnQoMik7XG5cdGJsb2IubCArPSAyOyAvL3ZhciBjb2xMID0gYmxvYi5yZWFkX3NoaWZ0KDIpO1xuXHRibG9iLmwgKz0gMjsgLy92YXIgZHhMID0gYmxvYi5yZWFkX3NoaWZ0KDIpO1xuXHRibG9iLmwgKz0gMjsgLy92YXIgcndUID0gYmxvYi5yZWFkX3NoaWZ0KDIpO1xuXHRibG9iLmwgKz0gMjsgLy92YXIgZHlUID0gYmxvYi5yZWFkX3NoaWZ0KDIpO1xuXHRibG9iLmwgKz0gMjsgLy92YXIgY29sUiA9IGJsb2IucmVhZF9zaGlmdCgyKTtcblx0YmxvYi5sICs9IDI7IC8vdmFyIGR4UiA9IGJsb2IucmVhZF9zaGlmdCgyKTtcblx0YmxvYi5sICs9IDI7IC8vdmFyIHJ3QiA9IGJsb2IucmVhZF9zaGlmdCgyKTtcblx0YmxvYi5sICs9IDI7IC8vdmFyIGR5QiA9IGJsb2IucmVhZF9zaGlmdCgyKTtcblx0YmxvYi5sICs9IDI7IC8vdmFyIGNiTWFjcm8gPSBibG9iLnJlYWRfc2hpZnQoMik7XG5cdGJsb2IubCArPSA2O1xuXHRsZW5ndGggLT0gMzY7XG5cdHZhciBmdHMgPSBbXTtcblx0ZnRzLnB1c2goKHBhcnNlX0JJRkY1T1Rbb3RdfHxwYXJzZW5vb3ApKGJsb2IsIGxlbmd0aCwgb3B0cykpO1xuXHRyZXR1cm4geyBjbW86IFtpZCwgb3QsIGdyYml0XSwgZnQ6ZnRzIH07XG59XG5cbi8qIFtNUy1YTFNdIDIuNC4zMjkgVE9ETzogcGFyc2UgcHJvcGVybHkgKi9cbmZ1bmN0aW9uIHBhcnNlX1R4TyhibG9iLCBsZW5ndGgsIG9wdHMpIHtcblx0dmFyIHMgPSBibG9iLmw7XG5cdHZhciB0ZXh0cyA9IFwiXCI7XG50cnkge1xuXHRibG9iLmwgKz0gNDtcblx0dmFyIG90ID0gKG9wdHMubGFzdG9ianx8e2NtbzpbMCwwXX0pLmNtb1sxXTtcblx0dmFyIGNvbnRyb2xJbmZvOyAvLyBlc2xpbnQtZGlzYWJsZS1saW5lIG5vLXVudXNlZC12YXJzXG5cdGlmKFswLDUsNywxMSwxMiwxNF0uaW5kZXhPZihvdCkgPT0gLTEpIGJsb2IubCArPSA2O1xuXHRlbHNlIGNvbnRyb2xJbmZvID0gcGFyc2VfQ29udHJvbEluZm8oYmxvYiwgNiwgb3B0cyk7IC8vIGVzbGludC1kaXNhYmxlLWxpbmUgbm8tdW51c2VkLXZhcnNcblx0dmFyIGNjaFRleHQgPSBibG9iLnJlYWRfc2hpZnQoMik7XG5cdC8qdmFyIGNiUnVucyA9ICovYmxvYi5yZWFkX3NoaWZ0KDIpO1xuXHQvKnZhciBpZm50RW1wdHkgPSAqL3BhcnNldWludDE2KGJsb2IsIDIpO1xuXHR2YXIgbGVuID0gYmxvYi5yZWFkX3NoaWZ0KDIpO1xuXHRibG9iLmwgKz0gbGVuO1xuXHQvL3ZhciBmbWxhID0gcGFyc2VfT2JqRm1sYShibG9iLCBzICsgbGVuZ3RoIC0gYmxvYi5sKTtcblxuXHRmb3IodmFyIGkgPSAxOyBpIDwgYmxvYi5sZW5zLmxlbmd0aC0xOyArK2kpIHtcblx0XHRpZihibG9iLmwtcyAhPSBibG9iLmxlbnNbaV0pIHRocm93IG5ldyBFcnJvcihcIlR4TzogYmFkIGNvbnRpbnVlIHJlY29yZFwiKTtcblx0XHR2YXIgaGRyID0gYmxvYltibG9iLmxdO1xuXHRcdHZhciB0ID0gcGFyc2VfWExVbmljb2RlU3RyaW5nTm9DY2goYmxvYiwgYmxvYi5sZW5zW2krMV0tYmxvYi5sZW5zW2ldLTEpO1xuXHRcdHRleHRzICs9IHQ7XG5cdFx0aWYodGV4dHMubGVuZ3RoID49IChoZHIgPyBjY2hUZXh0IDogMipjY2hUZXh0KSkgYnJlYWs7XG5cdH1cblx0aWYodGV4dHMubGVuZ3RoICE9PSBjY2hUZXh0ICYmIHRleHRzLmxlbmd0aCAhPT0gY2NoVGV4dCoyKSB7XG5cdFx0dGhyb3cgbmV3IEVycm9yKFwiY2NoVGV4dDogXCIgKyBjY2hUZXh0ICsgXCIgIT0gXCIgKyB0ZXh0cy5sZW5ndGgpO1xuXHR9XG5cblx0YmxvYi5sID0gcyArIGxlbmd0aDtcblx0LyogW01TLVhMU10gMi41LjI3MiBUeE9SdW5zICovXG4vL1x0dmFyIHJnVHhvUnVucyA9IFtdO1xuLy9cdGZvcih2YXIgaiA9IDA7IGogIT0gY2JSdW5zLzgtMTsgKytqKSBibG9iLmwgKz0gODtcbi8vXHR2YXIgY2NoVGV4dDIgPSBibG9iLnJlYWRfc2hpZnQoMik7XG4vL1x0aWYoY2NoVGV4dDIgIT09IGNjaFRleHQpIHRocm93IG5ldyBFcnJvcihcIlR4T0xhc3RSdW4gbWlzbWF0Y2g6IFwiICsgY2NoVGV4dDIgKyBcIiBcIiArIGNjaFRleHQpO1xuLy9cdGJsb2IubCArPSA2O1xuLy9cdGlmKHMgKyBsZW5ndGggIT0gYmxvYi5sKSB0aHJvdyBuZXcgRXJyb3IoXCJUeE8gXCIgKyAocyArIGxlbmd0aCkgKyBcIiwgYXQgXCIgKyBibG9iLmwpO1xuXHRyZXR1cm4geyB0OiB0ZXh0cyB9O1xufSBjYXRjaChlKSB7IGJsb2IubCA9IHMgKyBsZW5ndGg7IHJldHVybiB7IHQ6IHRleHRzIH07IH1cbn1cblxuLyogW01TLVhMU10gMi40LjE0MCAqL1xuZnVuY3Rpb24gcGFyc2VfSExpbmsoYmxvYiwgbGVuZ3RoKSB7XG5cdHZhciByZWYgPSBwYXJzZV9SZWY4VShibG9iLCA4KTtcblx0YmxvYi5sICs9IDE2OyAvKiBDTFNJRCAqL1xuXHR2YXIgaGxpbmsgPSBwYXJzZV9IeXBlcmxpbmsoYmxvYiwgbGVuZ3RoLTI0KTtcblx0cmV0dXJuIFtyZWYsIGhsaW5rXTtcbn1cbmZ1bmN0aW9uIHdyaXRlX0hMaW5rKGhsKSB7XG5cdHZhciBPID0gbmV3X2J1ZigyNCk7XG5cdHZhciByZWYgPSBkZWNvZGVfY2VsbChobFswXSk7XG5cdE8ud3JpdGVfc2hpZnQoMiwgcmVmLnIpOyBPLndyaXRlX3NoaWZ0KDIsIHJlZi5yKTtcblx0Ty53cml0ZV9zaGlmdCgyLCByZWYuYyk7IE8ud3JpdGVfc2hpZnQoMiwgcmVmLmMpO1xuXHR2YXIgY2xzaWQgPSBcImQwIGM5IGVhIDc5IGY5IGJhIGNlIDExIDhjIDgyIDAwIGFhIDAwIDRiIGE5IDBiXCIuc3BsaXQoXCIgXCIpO1xuXHRmb3IodmFyIGkgPSAwOyBpIDwgMTY7ICsraSkgTy53cml0ZV9zaGlmdCgxLCBwYXJzZUludChjbHNpZFtpXSwgMTYpKTtcblx0cmV0dXJuIGJjb25jYXQoW08sIHdyaXRlX0h5cGVybGluayhobFsxXSldKTtcbn1cblxuXG4vKiBbTVMtWExTXSAyLjQuMTQxICovXG5mdW5jdGlvbiBwYXJzZV9ITGlua1Rvb2x0aXAoYmxvYiwgbGVuZ3RoKSB7XG5cdGJsb2IucmVhZF9zaGlmdCgyKTtcblx0dmFyIHJlZiA9IHBhcnNlX1JlZjhVKGJsb2IsIDgpO1xuXHR2YXIgd3pUb29sdGlwID0gYmxvYi5yZWFkX3NoaWZ0KChsZW5ndGgtMTApLzIsICdkYmNzLWNvbnQnKTtcblx0d3pUb29sdGlwID0gd3pUb29sdGlwLnJlcGxhY2UoY2hyMCxcIlwiKTtcblx0cmV0dXJuIFtyZWYsIHd6VG9vbHRpcF07XG59XG5mdW5jdGlvbiB3cml0ZV9ITGlua1Rvb2x0aXAoaGwpIHtcblx0dmFyIFRUID0gaGxbMV0uVG9vbHRpcDtcblx0dmFyIE8gPSBuZXdfYnVmKDEwICsgMiAqIChUVC5sZW5ndGggKyAxKSk7XG5cdE8ud3JpdGVfc2hpZnQoMiwgMHgwODAwKTtcblx0dmFyIHJlZiA9IGRlY29kZV9jZWxsKGhsWzBdKTtcblx0Ty53cml0ZV9zaGlmdCgyLCByZWYucik7IE8ud3JpdGVfc2hpZnQoMiwgcmVmLnIpO1xuXHRPLndyaXRlX3NoaWZ0KDIsIHJlZi5jKTsgTy53cml0ZV9zaGlmdCgyLCByZWYuYyk7XG5cdGZvcih2YXIgaSA9IDA7IGkgPCBUVC5sZW5ndGg7ICsraSkgTy53cml0ZV9zaGlmdCgyLCBUVC5jaGFyQ29kZUF0KGkpKTtcblx0Ty53cml0ZV9zaGlmdCgyLCAwKTtcblx0cmV0dXJuIE87XG59XG5cbi8qIFtNUy1YTFNdIDIuNC42MyAqL1xuZnVuY3Rpb24gcGFyc2VfQ291bnRyeShibG9iKS8qOltzdHJpbmd8bnVtYmVyLCBzdHJpbmd8bnVtYmVyXSovIHtcblx0dmFyIG8gPSBbMCwwXSwgZDtcblx0ZCA9IGJsb2IucmVhZF9zaGlmdCgyKTsgb1swXSA9IENvdW50cnlFbnVtW2RdIHx8IGQ7XG5cdGQgPSBibG9iLnJlYWRfc2hpZnQoMik7IG9bMV0gPSBDb3VudHJ5RW51bVtkXSB8fCBkO1xuXHRyZXR1cm4gbztcbn1cbmZ1bmN0aW9uIHdyaXRlX0NvdW50cnkobykge1xuXHRpZighbykgbyA9IG5ld19idWYoNCk7XG5cdG8ud3JpdGVfc2hpZnQoMiwgMHgwMSk7XG5cdG8ud3JpdGVfc2hpZnQoMiwgMHgwMSk7XG5cdHJldHVybiBvO1xufVxuXG4vKiBbTVMtWExTXSAyLjQuNTAgQ2xydENsaWVudCAqL1xuZnVuY3Rpb24gcGFyc2VfQ2xydENsaWVudChibG9iKSB7XG5cdHZhciBjY3YgPSBibG9iLnJlYWRfc2hpZnQoMik7XG5cdHZhciBvID0gW107XG5cdHdoaWxlKGNjdi0tPjApIG8ucHVzaChwYXJzZV9Mb25nUkdCKGJsb2IsIDgpKTtcblx0cmV0dXJuIG87XG59XG5cbi8qIFtNUy1YTFNdIDIuNC4xODggKi9cbmZ1bmN0aW9uIHBhcnNlX1BhbGV0dGUoYmxvYikge1xuXHR2YXIgY2N2ID0gYmxvYi5yZWFkX3NoaWZ0KDIpO1xuXHR2YXIgbyA9IFtdO1xuXHR3aGlsZShjY3YtLT4wKSBvLnB1c2gocGFyc2VfTG9uZ1JHQihibG9iLCA4KSk7XG5cdHJldHVybiBvO1xufVxuXG4vKiBbTVMtWExTXSAyLjQuMzU0ICovXG5mdW5jdGlvbiBwYXJzZV9YRkNSQyhibG9iKSB7XG5cdGJsb2IubCArPSAyO1xuXHR2YXIgbyA9IHtjeGZzOjAsIGNyYzowfTtcblx0by5jeGZzID0gYmxvYi5yZWFkX3NoaWZ0KDIpO1xuXHRvLmNyYyA9IGJsb2IucmVhZF9zaGlmdCg0KTtcblx0cmV0dXJuIG87XG59XG5cbi8qIFtNUy1YTFNdIDIuNC41MyBUT0RPOiBwYXJzZSBmbGFncyAqL1xuLyogW01TLVhMU0JdIDIuNC4zMjMgVE9ETzogcGFyc2UgZmxhZ3MgKi9cbmZ1bmN0aW9uIHBhcnNlX0NvbEluZm8oYmxvYiwgbGVuZ3RoLCBvcHRzKSB7XG5cdGlmKCFvcHRzLmNlbGxTdHlsZXMpIHJldHVybiBwYXJzZW5vb3AoYmxvYiwgbGVuZ3RoKTtcblx0dmFyIHcgPSBvcHRzICYmIG9wdHMuYmlmZiA+PSAxMiA/IDQgOiAyO1xuXHR2YXIgY29sRmlyc3QgPSBibG9iLnJlYWRfc2hpZnQodyk7XG5cdHZhciBjb2xMYXN0ID0gYmxvYi5yZWFkX3NoaWZ0KHcpO1xuXHR2YXIgY29sZHggPSBibG9iLnJlYWRfc2hpZnQodyk7XG5cdHZhciBpeGZlID0gYmxvYi5yZWFkX3NoaWZ0KHcpO1xuXHR2YXIgZmxhZ3MgPSBibG9iLnJlYWRfc2hpZnQoMik7XG5cdGlmKHcgPT0gMikgYmxvYi5sICs9IDI7XG5cdHZhciBvID0gKHtzOmNvbEZpcnN0LCBlOmNvbExhc3QsIHc6Y29sZHgsIGl4ZmU6aXhmZSwgZmxhZ3M6ZmxhZ3N9Lyo6YW55Ki8pO1xuXHRpZihvcHRzLmJpZmYgPj0gNSB8fCAhb3B0cy5iaWZmKSBvLmxldmVsID0gKGZsYWdzID4+IDgpICYgMHg3O1xuXHRyZXR1cm4gbztcbn1cbmZ1bmN0aW9uIHdyaXRlX0NvbEluZm8oY29sLCBpZHgpIHtcblx0dmFyIG8gPSBuZXdfYnVmKDEyKTtcblx0by53cml0ZV9zaGlmdCgyLCBpZHgpO1xuXHRvLndyaXRlX3NoaWZ0KDIsIGlkeCk7XG5cdG8ud3JpdGVfc2hpZnQoMiwgY29sLndpZHRoICogMjU2KTtcblx0by53cml0ZV9zaGlmdCgyLCAwKTtcblx0dmFyIGYgPSAwO1xuXHRpZihjb2wuaGlkZGVuKSBmIHw9IDE7XG5cdG8ud3JpdGVfc2hpZnQoMSwgZik7XG5cdGYgPSBjb2wubGV2ZWwgfHwgMDtcblx0by53cml0ZV9zaGlmdCgxLCBmKTtcblx0by53cml0ZV9zaGlmdCgyLCAwKTtcblx0cmV0dXJuIG87XG59XG5cbi8qIFtNUy1YTFNdIDIuNC4yNTcgKi9cbmZ1bmN0aW9uIHBhcnNlX1NldHVwKGJsb2IsIGxlbmd0aCkge1xuXHR2YXIgbyA9IHt9O1xuXHRpZihsZW5ndGggPCAzMikgcmV0dXJuIG87XG5cdGJsb2IubCArPSAxNjtcblx0by5oZWFkZXIgPSBwYXJzZV9YbnVtKGJsb2IsIDgpO1xuXHRvLmZvb3RlciA9IHBhcnNlX1hudW0oYmxvYiwgOCk7XG5cdGJsb2IubCArPSAyO1xuXHRyZXR1cm4gbztcbn1cblxuLyogW01TLVhMU10gMi40LjI2MSAqL1xuZnVuY3Rpb24gcGFyc2VfU2h0UHJvcHMoYmxvYiwgbGVuZ3RoLCBvcHRzKSB7XG5cdHZhciBkZWYgPSB7YXJlYTpmYWxzZX07XG5cdGlmKG9wdHMuYmlmZiAhPSA1KSB7IGJsb2IubCArPSBsZW5ndGg7IHJldHVybiBkZWY7IH1cblx0dmFyIGQgPSBibG9iLnJlYWRfc2hpZnQoMSk7IGJsb2IubCArPSAzO1xuXHRpZigoZCAmIDB4MTApKSBkZWYuYXJlYSA9IHRydWU7XG5cdHJldHVybiBkZWY7XG59XG5cbi8qIFtNUy1YTFNdIDIuNC4yNDEgKi9cbmZ1bmN0aW9uIHdyaXRlX1JSVGFiSWQobi8qOm51bWJlciovKSB7XG5cdHZhciBvdXQgPSBuZXdfYnVmKDIgKiBuKTtcblx0Zm9yKHZhciBpID0gMDsgaSA8IG47ICsraSkgb3V0LndyaXRlX3NoaWZ0KDIsIGkrMSk7XG5cdHJldHVybiBvdXQ7XG59XG5cbnZhciBwYXJzZV9CbGFuayA9IHBhcnNlX1hMU0NlbGw7IC8qIFtNUy1YTFNdIDIuNC4yMCBKdXN0IHRoZSBjZWxsICovXG52YXIgcGFyc2VfU2NsID0gcGFyc2V1aW50MTZhOyAvKiBbTVMtWExTXSAyLjQuMjQ3IG51bSwgZGVuICovXG52YXIgcGFyc2VfU3RyaW5nID0gcGFyc2VfWExVbmljb2RlU3RyaW5nOyAvKiBbTVMtWExTXSAyLjQuMjY4ICovXG5cbi8qIC0tLSBTcGVjaWZpYyB0byB2ZXJzaW9ucyBiZWZvcmUgQklGRjggLS0tICovXG5mdW5jdGlvbiBwYXJzZV9JbURhdGEoYmxvYikge1xuXHR2YXIgY2YgPSBibG9iLnJlYWRfc2hpZnQoMik7XG5cdHZhciBlbnYgPSBibG9iLnJlYWRfc2hpZnQoMik7XG5cdHZhciBsY2IgPSBibG9iLnJlYWRfc2hpZnQoNCk7XG5cdHZhciBvID0ge2ZtdDpjZiwgZW52OmVudiwgbGVuOmxjYiwgZGF0YTpibG9iLnNsaWNlKGJsb2IubCxibG9iLmwrbGNiKX07XG5cdGJsb2IubCArPSBsY2I7XG5cdHJldHVybiBvO1xufVxuXG4vKiBCSUZGMl8/Pz8gd2hlcmUgPz8/IGlzIHRoZSBuYW1lIGZyb20gW1hMU10gKi9cbmZ1bmN0aW9uIHBhcnNlX0JJRkYyU1RSKGJsb2IsIGxlbmd0aCwgb3B0cykge1xuXHRpZihvcHRzLmJpZmZndWVzcyAmJiBvcHRzLmJpZmYgPT0gNSkgb3B0cy5iaWZmID0gMjtcblx0dmFyIGNlbGwgPSBwYXJzZV9YTFNDZWxsKGJsb2IsIDYpO1xuXHQrK2Jsb2IubDtcblx0dmFyIHN0ciA9IHBhcnNlX1hMVW5pY29kZVN0cmluZzIoYmxvYiwgbGVuZ3RoLTcsIG9wdHMpO1xuXHRjZWxsLnQgPSAnc3RyJztcblx0Y2VsbC52YWwgPSBzdHI7XG5cdHJldHVybiBjZWxsO1xufVxuXG5mdW5jdGlvbiBwYXJzZV9CSUZGMk5VTShibG9iLyo6OiwgbGVuZ3RoKi8pIHtcblx0dmFyIGNlbGwgPSBwYXJzZV9YTFNDZWxsKGJsb2IsIDYpO1xuXHQrK2Jsb2IubDtcblx0dmFyIG51bSA9IHBhcnNlX1hudW0oYmxvYiwgOCk7XG5cdGNlbGwudCA9ICduJztcblx0Y2VsbC52YWwgPSBudW07XG5cdHJldHVybiBjZWxsO1xufVxuZnVuY3Rpb24gd3JpdGVfQklGRjJOVU0oci8qOm51bWJlciovLCBjLyo6bnVtYmVyKi8sIHZhbC8qOm51bWJlciovKSB7XG5cdHZhciBvdXQgPSBuZXdfYnVmKDE1KTtcblx0d3JpdGVfQklGRjJDZWxsKG91dCwgciwgYyk7XG5cdG91dC53cml0ZV9zaGlmdCg4LCB2YWwsICdmJyk7XG5cdHJldHVybiBvdXQ7XG59XG5cbmZ1bmN0aW9uIHBhcnNlX0JJRkYySU5UKGJsb2IpIHtcblx0dmFyIGNlbGwgPSBwYXJzZV9YTFNDZWxsKGJsb2IsIDYpO1xuXHQrK2Jsb2IubDtcblx0dmFyIG51bSA9IGJsb2IucmVhZF9zaGlmdCgyKTtcblx0Y2VsbC50ID0gJ24nO1xuXHRjZWxsLnZhbCA9IG51bTtcblx0cmV0dXJuIGNlbGw7XG59XG5mdW5jdGlvbiB3cml0ZV9CSUZGMklOVChyLyo6bnVtYmVyKi8sIGMvKjpudW1iZXIqLywgdmFsLyo6bnVtYmVyKi8pIHtcblx0dmFyIG91dCA9IG5ld19idWYoOSk7XG5cdHdyaXRlX0JJRkYyQ2VsbChvdXQsIHIsIGMpO1xuXHRvdXQud3JpdGVfc2hpZnQoMiwgdmFsKTtcblx0cmV0dXJuIG91dDtcbn1cblxuZnVuY3Rpb24gcGFyc2VfQklGRjJTVFJJTkcoYmxvYikge1xuXHR2YXIgY2NoID0gYmxvYi5yZWFkX3NoaWZ0KDEpO1xuXHRpZihjY2ggPT09IDApIHsgYmxvYi5sKys7IHJldHVybiBcIlwiOyB9XG5cdHJldHVybiBibG9iLnJlYWRfc2hpZnQoY2NoLCAnc2Jjcy1jb250Jyk7XG59XG5cbi8qIFRPRE86IGNvbnZlcnQgdG8gQklGRjggZm9udCBzdHJ1Y3QgKi9cbmZ1bmN0aW9uIHBhcnNlX0JJRkYyRk9OVFhUUkEoYmxvYiwgbGVuZ3RoKSB7XG5cdGJsb2IubCArPSA2OyAvLyB1bmtub3duXG5cdGJsb2IubCArPSAyOyAvLyBmb250IHdlaWdodCBcImJsc1wiXG5cdGJsb2IubCArPSAxOyAvLyBjaGFyc2V0XG5cdGJsb2IubCArPSAzOyAvLyB1bmtub3duXG5cdGJsb2IubCArPSAxOyAvLyBmb250IGZhbWlseVxuXHRibG9iLmwgKz0gbGVuZ3RoIC0gMTM7XG59XG5cbi8qIFRPRE86IHBhcnNlIHJpY2ggdGV4dCBydW5zICovXG5mdW5jdGlvbiBwYXJzZV9SU3RyaW5nKGJsb2IsIGxlbmd0aCwgb3B0cykge1xuXHR2YXIgZW5kID0gYmxvYi5sICsgbGVuZ3RoO1xuXHR2YXIgY2VsbCA9IHBhcnNlX1hMU0NlbGwoYmxvYiwgNik7XG5cdHZhciBjY2ggPSBibG9iLnJlYWRfc2hpZnQoMik7XG5cdHZhciBzdHIgPSBwYXJzZV9YTFVuaWNvZGVTdHJpbmdOb0NjaChibG9iLCBjY2gsIG9wdHMpO1xuXHRibG9iLmwgPSBlbmQ7XG5cdGNlbGwudCA9ICdzdHInO1xuXHRjZWxsLnZhbCA9IHN0cjtcblx0cmV0dXJuIGNlbGw7XG59XG4vKiBmcm9tIGpzLWhhcmIgKEMpIDIwMTQtcHJlc2VudCAgU2hlZXRKUyAqL1xudmFyIERCRl9TVVBQT1JURURfVkVSU0lPTlMgPSBbMHgwMiwgMHgwMywgMHgzMCwgMHgzMSwgMHg4MywgMHg4QiwgMHg4QywgMHhGNV07XG52YXIgREJGID0gLyojX19QVVJFX18qLyhmdW5jdGlvbigpIHtcbnZhciBkYmZfY29kZXBhZ2VfbWFwID0ge1xuXHQvKiBDb2RlIFBhZ2VzIFN1cHBvcnRlZCBieSBWaXN1YWwgRm94UHJvICovXG5cdC8qOjpbKi8weDAxLyo6Ol0qLzogICA0MzcsICAgICAgICAgICAvKjo6WyovMHgwMi8qOjpdKi86ICAgODUwLFxuXHQvKjo6WyovMHgwMy8qOjpdKi86ICAxMjUyLCAgICAgICAgICAgLyo6OlsqLzB4MDQvKjo6XSovOiAxMDAwMCxcblx0Lyo6OlsqLzB4NjQvKjo6XSovOiAgIDg1MiwgICAgICAgICAgIC8qOjpbKi8weDY1Lyo6Ol0qLzogICA4NjYsXG5cdC8qOjpbKi8weDY2Lyo6Ol0qLzogICA4NjUsICAgICAgICAgICAvKjo6WyovMHg2Ny8qOjpdKi86ICAgODYxLFxuXHQvKjo6WyovMHg2OC8qOjpdKi86ICAgODk1LCAgICAgICAgICAgLyo6OlsqLzB4NjkvKjo6XSovOiAgIDYyMCxcblx0Lyo6OlsqLzB4NkEvKjo6XSovOiAgIDczNywgICAgICAgICAgIC8qOjpbKi8weDZCLyo6Ol0qLzogICA4NTcsXG5cdC8qOjpbKi8weDc4Lyo6Ol0qLzogICA5NTAsICAgICAgICAgICAvKjo6WyovMHg3OS8qOjpdKi86ICAgOTQ5LFxuXHQvKjo6WyovMHg3QS8qOjpdKi86ICAgOTM2LCAgICAgICAgICAgLyo6OlsqLzB4N0IvKjo6XSovOiAgIDkzMixcblx0Lyo6OlsqLzB4N0MvKjo6XSovOiAgIDg3NCwgICAgICAgICAgIC8qOjpbKi8weDdELyo6Ol0qLzogIDEyNTUsXG5cdC8qOjpbKi8weDdFLyo6Ol0qLzogIDEyNTYsICAgICAgICAgICAvKjo6WyovMHg5Ni8qOjpdKi86IDEwMDA3LFxuXHQvKjo6WyovMHg5Ny8qOjpdKi86IDEwMDI5LCAgICAgICAgICAgLyo6OlsqLzB4OTgvKjo6XSovOiAxMDAwNixcblx0Lyo6OlsqLzB4QzgvKjo6XSovOiAgMTI1MCwgICAgICAgICAgIC8qOjpbKi8weEM5Lyo6Ol0qLzogIDEyNTEsXG5cdC8qOjpbKi8weENBLyo6Ol0qLzogIDEyNTQsICAgICAgICAgICAvKjo6WyovMHhDQi8qOjpdKi86ICAxMjUzLFxuXG5cdC8qIHNoYXBlZmlsZSBEQkYgZXh0ZW5zaW9uICovXG5cdC8qOjpbKi8weDAwLyo6Ol0qLzogMjAxMjcsICAgICAgICAgICAvKjo6WyovMHgwOC8qOjpdKi86ICAgODY1LFxuXHQvKjo6WyovMHgwOS8qOjpdKi86ICAgNDM3LCAgICAgICAgICAgLyo6OlsqLzB4MEEvKjo6XSovOiAgIDg1MCxcblx0Lyo6OlsqLzB4MEIvKjo6XSovOiAgIDQzNywgICAgICAgICAgIC8qOjpbKi8weDBELyo6Ol0qLzogICA0MzcsXG5cdC8qOjpbKi8weDBFLyo6Ol0qLzogICA4NTAsICAgICAgICAgICAvKjo6WyovMHgwRi8qOjpdKi86ICAgNDM3LFxuXHQvKjo6WyovMHgxMC8qOjpdKi86ICAgODUwLCAgICAgICAgICAgLyo6OlsqLzB4MTEvKjo6XSovOiAgIDQzNyxcblx0Lyo6OlsqLzB4MTIvKjo6XSovOiAgIDg1MCwgICAgICAgICAgIC8qOjpbKi8weDEzLyo6Ol0qLzogICA5MzIsXG5cdC8qOjpbKi8weDE0Lyo6Ol0qLzogICA4NTAsICAgICAgICAgICAvKjo6WyovMHgxNS8qOjpdKi86ICAgNDM3LFxuXHQvKjo6WyovMHgxNi8qOjpdKi86ICAgODUwLCAgICAgICAgICAgLyo6OlsqLzB4MTcvKjo6XSovOiAgIDg2NSxcblx0Lyo6OlsqLzB4MTgvKjo6XSovOiAgIDQzNywgICAgICAgICAgIC8qOjpbKi8weDE5Lyo6Ol0qLzogICA0MzcsXG5cdC8qOjpbKi8weDFBLyo6Ol0qLzogICA4NTAsICAgICAgICAgICAvKjo6WyovMHgxQi8qOjpdKi86ICAgNDM3LFxuXHQvKjo6WyovMHgxQy8qOjpdKi86ICAgODYzLCAgICAgICAgICAgLyo6OlsqLzB4MUQvKjo6XSovOiAgIDg1MCxcblx0Lyo6OlsqLzB4MUYvKjo6XSovOiAgIDg1MiwgICAgICAgICAgIC8qOjpbKi8weDIyLyo6Ol0qLzogICA4NTIsXG5cdC8qOjpbKi8weDIzLyo6Ol0qLzogICA4NTIsICAgICAgICAgICAvKjo6WyovMHgyNC8qOjpdKi86ICAgODYwLFxuXHQvKjo6WyovMHgyNS8qOjpdKi86ICAgODUwLCAgICAgICAgICAgLyo6OlsqLzB4MjYvKjo6XSovOiAgIDg2Nixcblx0Lyo6OlsqLzB4MzcvKjo6XSovOiAgIDg1MCwgICAgICAgICAgIC8qOjpbKi8weDQwLyo6Ol0qLzogICA4NTIsXG5cdC8qOjpbKi8weDRELyo6Ol0qLzogICA5MzYsICAgICAgICAgICAvKjo6WyovMHg0RS8qOjpdKi86ICAgOTQ5LFxuXHQvKjo6WyovMHg0Ri8qOjpdKi86ICAgOTUwLCAgICAgICAgICAgLyo6OlsqLzB4NTAvKjo6XSovOiAgIDg3NCxcblx0Lyo6OlsqLzB4NTcvKjo6XSovOiAgMTI1MiwgICAgICAgICAgIC8qOjpbKi8weDU4Lyo6Ol0qLzogIDEyNTIsXG5cdC8qOjpbKi8weDU5Lyo6Ol0qLzogIDEyNTIsICAgICAgICAgICAvKjo6WyovMHg2Qy8qOjpdKi86ICAgODYzLFxuXHQvKjo6WyovMHg4Ni8qOjpdKi86ICAgNzM3LCAgICAgICAgICAgLyo6OlsqLzB4ODcvKjo6XSovOiAgIDg1Mixcblx0Lyo6OlsqLzB4ODgvKjo6XSovOiAgIDg1NywgICAgICAgICAgIC8qOjpbKi8weENDLyo6Ol0qLzogIDEyNTcsXG5cblx0Lyo6OlsqLzB4RkYvKjo6XSovOiAxNjk2OVxufTtcbnZhciBkYmZfcmV2ZXJzZV9tYXAgPSBldmVydCh7XG5cdC8qOjpbKi8weDAxLyo6Ol0qLzogICA0MzcsICAgICAgICAgICAvKjo6WyovMHgwMi8qOjpdKi86ICAgODUwLFxuXHQvKjo6WyovMHgwMy8qOjpdKi86ICAxMjUyLCAgICAgICAgICAgLyo6OlsqLzB4MDQvKjo6XSovOiAxMDAwMCxcblx0Lyo6OlsqLzB4NjQvKjo6XSovOiAgIDg1MiwgICAgICAgICAgIC8qOjpbKi8weDY1Lyo6Ol0qLzogICA4NjYsXG5cdC8qOjpbKi8weDY2Lyo6Ol0qLzogICA4NjUsICAgICAgICAgICAvKjo6WyovMHg2Ny8qOjpdKi86ICAgODYxLFxuXHQvKjo6WyovMHg2OC8qOjpdKi86ICAgODk1LCAgICAgICAgICAgLyo6OlsqLzB4NjkvKjo6XSovOiAgIDYyMCxcblx0Lyo6OlsqLzB4NkEvKjo6XSovOiAgIDczNywgICAgICAgICAgIC8qOjpbKi8weDZCLyo6Ol0qLzogICA4NTcsXG5cdC8qOjpbKi8weDc4Lyo6Ol0qLzogICA5NTAsICAgICAgICAgICAvKjo6WyovMHg3OS8qOjpdKi86ICAgOTQ5LFxuXHQvKjo6WyovMHg3QS8qOjpdKi86ICAgOTM2LCAgICAgICAgICAgLyo6OlsqLzB4N0IvKjo6XSovOiAgIDkzMixcblx0Lyo6OlsqLzB4N0MvKjo6XSovOiAgIDg3NCwgICAgICAgICAgIC8qOjpbKi8weDdELyo6Ol0qLzogIDEyNTUsXG5cdC8qOjpbKi8weDdFLyo6Ol0qLzogIDEyNTYsICAgICAgICAgICAvKjo6WyovMHg5Ni8qOjpdKi86IDEwMDA3LFxuXHQvKjo6WyovMHg5Ny8qOjpdKi86IDEwMDI5LCAgICAgICAgICAgLyo6OlsqLzB4OTgvKjo6XSovOiAxMDAwNixcblx0Lyo6OlsqLzB4QzgvKjo6XSovOiAgMTI1MCwgICAgICAgICAgIC8qOjpbKi8weEM5Lyo6Ol0qLzogIDEyNTEsXG5cdC8qOjpbKi8weENBLyo6Ol0qLzogIDEyNTQsICAgICAgICAgICAvKjo6WyovMHhDQi8qOjpdKi86ICAxMjUzLFxuXHQvKjo6WyovMHgwMC8qOjpdKi86IDIwMTI3XG59KTtcbi8qIFRPRE86IGZpbmQgYW4gYWN0dWFsIHNwZWNpZmljYXRpb24gKi9cbmZ1bmN0aW9uIGRiZl90b19hb2EoYnVmLCBvcHRzKS8qOkFPQSovIHtcblx0dmFyIG91dC8qOkFPQSovID0gW107XG5cdHZhciBkLyo6QmxvY2sqLyA9IChuZXdfcmF3X2J1ZigxKS8qOmFueSovKTtcblx0c3dpdGNoKG9wdHMudHlwZSkge1xuXHRcdGNhc2UgJ2Jhc2U2NCc6IGQgPSBzMmEoQmFzZTY0X2RlY29kZShidWYpKTsgYnJlYWs7XG5cdFx0Y2FzZSAnYmluYXJ5JzogZCA9IHMyYShidWYpOyBicmVhaztcblx0XHRjYXNlICdidWZmZXInOlxuXHRcdGNhc2UgJ2FycmF5JzogZCA9IGJ1ZjsgYnJlYWs7XG5cdH1cblx0cHJlcF9ibG9iKGQsIDApO1xuXG5cdC8qIGhlYWRlciAqL1xuXHR2YXIgZnQgPSBkLnJlYWRfc2hpZnQoMSk7XG5cdHZhciBtZW1vID0gISEoZnQgJiAweDg4KTtcblx0dmFyIHZmcCA9IGZhbHNlLCBsNyA9IGZhbHNlO1xuXHRzd2l0Y2goZnQpIHtcblx0XHRjYXNlIDB4MDI6IGJyZWFrOyAvLyBkQkFTRSBJSVxuXHRcdGNhc2UgMHgwMzogYnJlYWs7IC8vIGRCQVNFIElJSVxuXHRcdGNhc2UgMHgzMDogdmZwID0gdHJ1ZTsgbWVtbyA9IHRydWU7IGJyZWFrOyAvLyBWRlBcblx0XHRjYXNlIDB4MzE6IHZmcCA9IHRydWU7IG1lbW8gPSB0cnVlOyBicmVhazsgLy8gVkZQIHdpdGggYXV0b2luY3JlbWVudFxuXHRcdC8vIDB4NDMgZEJBU0UgSVYgU1FMIHRhYmxlIGZpbGVzXG5cdFx0Ly8gMHg2MyBkQkFTRSBJViBTUUwgc3lzdGVtIGZpbGVzXG5cdFx0Y2FzZSAweDgzOiBicmVhazsgLy8gZEJBU0UgSUlJIHdpdGggbWVtb1xuXHRcdGNhc2UgMHg4QjogYnJlYWs7IC8vIGRCQVNFIElWIHdpdGggbWVtb1xuXHRcdGNhc2UgMHg4QzogbDcgPSB0cnVlOyBicmVhazsgLy8gZEJBU0UgTGV2ZWwgNyB3aXRoIG1lbW9cblx0XHQvLyBjYXNlIDB4Q0IgZEJBU0UgSVYgU1FMIHRhYmxlIGZpbGVzIHdpdGggbWVtb1xuXHRcdGNhc2UgMHhGNTogYnJlYWs7IC8vIEZveFBybyAyLnggd2l0aCBtZW1vXG5cdFx0Ly8gY2FzZSAweEZCIEZveEJBU0Vcblx0XHRkZWZhdWx0OiB0aHJvdyBuZXcgRXJyb3IoXCJEQkYgVW5zdXBwb3J0ZWQgVmVyc2lvbjogXCIgKyBmdC50b1N0cmluZygxNikpO1xuXHR9XG5cblx0dmFyIG5yb3cgPSAwLCBmcG9zID0gMHgwMjA5O1xuXHRpZihmdCA9PSAweDAyKSBucm93ID0gZC5yZWFkX3NoaWZ0KDIpO1xuXHRkLmwgKz0gMzsgLy8gZEJBU0UgSUkgc3RvcmVzIERETU1ZWSBkYXRlLCBvdGhlcnMgdXNlIFlZTU1ERFxuXHRpZihmdCAhPSAweDAyKSBucm93ID0gZC5yZWFkX3NoaWZ0KDQpO1xuXHRpZihucm93ID4gMTA0ODU3NikgbnJvdyA9IDFlNjtcblxuXHRpZihmdCAhPSAweDAyKSBmcG9zID0gZC5yZWFkX3NoaWZ0KDIpOyAvLyBoZWFkZXIgbGVuZ3RoXG5cdHZhciBybGVuID0gZC5yZWFkX3NoaWZ0KDIpOyAvLyByZWNvcmQgbGVuZ3RoXG5cblx0dmFyIC8qZmxhZ3MgPSAwLCovIGN1cnJlbnRfY3AgPSBvcHRzLmNvZGVwYWdlIHx8IDEyNTI7XG5cdGlmKGZ0ICE9IDB4MDIpIHsgLy8gMjAgcmVzZXJ2ZWQgYnl0ZXNcblx0XHRkLmwrPTE2O1xuXHRcdC8qZmxhZ3MgPSAqL2QucmVhZF9zaGlmdCgxKTtcblx0XHQvL2lmKG1lbW8gJiYgKChmbGFncyAmIDB4MDIpID09PSAwKSkgdGhyb3cgbmV3IEVycm9yKFwiREJGIEZsYWdzIFwiICsgZmxhZ3MudG9TdHJpbmcoMTYpICsgXCIgZnQgXCIgKyBmdC50b1N0cmluZygxNikpO1xuXG5cdFx0LyogY29kZXBhZ2UgcHJlc2VudCBpbiBGb3hQcm8gYW5kIGRCQVNFIExldmVsIDcgKi9cblx0XHRpZihkW2QubF0gIT09IDApIGN1cnJlbnRfY3AgPSBkYmZfY29kZXBhZ2VfbWFwW2RbZC5sXV07XG5cdFx0ZC5sKz0xO1xuXG5cdFx0ZC5sKz0yO1xuXHR9XG5cdGlmKGw3KSBkLmwgKz0gMzY7IC8vIExldmVsIDc6IDMyIGJ5dGUgXCJMYW5ndWFnZSBkcml2ZXIgbmFtZVwiLCA0IGJ5dGUgcmVzZXJ2ZWRcblxuLyo6OiB0eXBlIERCRkZpZWxkID0geyBuYW1lOnN0cmluZzsgbGVuOm51bWJlcjsgdHlwZTpzdHJpbmc7IH0gKi9cblx0dmFyIGZpZWxkcy8qOkFycmF5PERCRkZpZWxkPiovID0gW10sIGZpZWxkLyo6REJGRmllbGQqLyA9ICh7fS8qOmFueSovKTtcblx0dmFyIGhlbmQgPSBNYXRoLm1pbihkLmxlbmd0aCwgKGZ0ID09IDB4MDIgPyAweDIwOSA6IChmcG9zIC0gMTAgLSAodmZwID8gMjY0IDogMCkpKSk7XG5cdHZhciB3dyA9IGw3ID8gMzIgOiAxMTtcblx0d2hpbGUoZC5sIDwgaGVuZCAmJiBkW2QubF0gIT0gMHgwZCkge1xuXHRcdGZpZWxkID0gKHt9Lyo6YW55Ki8pO1xuXHRcdGZpZWxkLm5hbWUgPSAkY3B0YWJsZS51dGlscy5kZWNvZGUoY3VycmVudF9jcCwgZC5zbGljZShkLmwsIGQubCt3dykpLnJlcGxhY2UoL1tcXHUwMDAwXFxyXFxuXS4qJC9nLFwiXCIpO1xuXHRcdGQubCArPSB3dztcblx0XHRmaWVsZC50eXBlID0gU3RyaW5nLmZyb21DaGFyQ29kZShkLnJlYWRfc2hpZnQoMSkpO1xuXHRcdGlmKGZ0ICE9IDB4MDIgJiYgIWw3KSBmaWVsZC5vZmZzZXQgPSBkLnJlYWRfc2hpZnQoNCk7XG5cdFx0ZmllbGQubGVuID0gZC5yZWFkX3NoaWZ0KDEpO1xuXHRcdGlmKGZ0ID09IDB4MDIpIGZpZWxkLm9mZnNldCA9IGQucmVhZF9zaGlmdCgyKTtcblx0XHRmaWVsZC5kZWMgPSBkLnJlYWRfc2hpZnQoMSk7XG5cdFx0aWYoZmllbGQubmFtZS5sZW5ndGgpIGZpZWxkcy5wdXNoKGZpZWxkKTtcblx0XHRpZihmdCAhPSAweDAyKSBkLmwgKz0gbDcgPyAxMyA6IDE0O1xuXHRcdHN3aXRjaChmaWVsZC50eXBlKSB7XG5cdFx0XHRjYXNlICdCJzogLy8gRG91YmxlIChWRlApIC8gQmluYXJ5IChkQkFTRSBMNylcblx0XHRcdFx0aWYoKCF2ZnAgfHwgZmllbGQubGVuICE9IDgpICYmIG9wdHMuV1RGKSBjb25zb2xlLmxvZygnU2tpcHBpbmcgJyArIGZpZWxkLm5hbWUgKyAnOicgKyBmaWVsZC50eXBlKTtcblx0XHRcdFx0YnJlYWs7XG5cdFx0XHRjYXNlICdHJzogLy8gR2VuZXJhbCAoRm94UHJvIGFuZCBkQkFTRSBMNylcblx0XHRcdGNhc2UgJ1AnOiAvLyBQaWN0dXJlIChGb3hQcm8gYW5kIGRCQVNFIEw3KVxuXHRcdFx0XHRpZihvcHRzLldURikgY29uc29sZS5sb2coJ1NraXBwaW5nICcgKyBmaWVsZC5uYW1lICsgJzonICsgZmllbGQudHlwZSk7XG5cdFx0XHRcdGJyZWFrO1xuXHRcdFx0Y2FzZSAnKyc6IC8vIEF1dG9pbmNyZW1lbnQgKGRCQVNFIEw3IG9ubHkpXG5cdFx0XHRjYXNlICcwJzogLy8gX051bGxGbGFncyAoVkZQIG9ubHkpXG5cdFx0XHRjYXNlICdAJzogLy8gVGltZXN0YW1wIChkQkFTRSBMNyBvbmx5KVxuXHRcdFx0Y2FzZSAnQyc6IC8vIENoYXJhY3RlciAoZEJBU0UgSUkpXG5cdFx0XHRjYXNlICdEJzogLy8gRGF0ZSAoZEJBU0UgSUlJKVxuXHRcdFx0Y2FzZSAnRic6IC8vIEZsb2F0IChkQkFTRSBJVilcblx0XHRcdGNhc2UgJ0knOiAvLyBMb25nIChWRlAgYW5kIGRCQVNFIEw3KVxuXHRcdFx0Y2FzZSAnTCc6IC8vIExvZ2ljYWwgKGRCQVNFIElJKVxuXHRcdFx0Y2FzZSAnTSc6IC8vIE1lbW8gKGRCQVNFIElJSSlcblx0XHRcdGNhc2UgJ04nOiAvLyBOdW1iZXIgKGRCQVNFIElJKVxuXHRcdFx0Y2FzZSAnTyc6IC8vIERvdWJsZSAoZEJBU0UgTDcgb25seSlcblx0XHRcdGNhc2UgJ1QnOiAvLyBEYXRldGltZSAoVkZQIG9ubHkpXG5cdFx0XHRjYXNlICdZJzogLy8gQ3VycmVuY3kgKFZGUCBvbmx5KVxuXHRcdFx0XHRicmVhaztcblx0XHRcdGRlZmF1bHQ6IHRocm93IG5ldyBFcnJvcignVW5rbm93biBGaWVsZCBUeXBlOiAnICsgZmllbGQudHlwZSk7XG5cdFx0fVxuXHR9XG5cblx0aWYoZFtkLmxdICE9PSAweDBEKSBkLmwgPSBmcG9zLTE7XG5cdGlmKGQucmVhZF9zaGlmdCgxKSAhPT0gMHgwRCkgdGhyb3cgbmV3IEVycm9yKFwiREJGIFRlcm1pbmF0b3Igbm90IGZvdW5kIFwiICsgZC5sICsgXCIgXCIgKyBkW2QubF0pO1xuXHRkLmwgPSBmcG9zO1xuXG5cdC8qIGRhdGEgKi9cblx0dmFyIFIgPSAwLCBDID0gMDtcblx0b3V0WzBdID0gW107XG5cdGZvcihDID0gMDsgQyAhPSBmaWVsZHMubGVuZ3RoOyArK0MpIG91dFswXVtDXSA9IGZpZWxkc1tDXS5uYW1lO1xuXHR3aGlsZShucm93LS0gPiAwKSB7XG5cdFx0aWYoZFtkLmxdID09PSAweDJBKSB7XG5cdFx0XHQvLyBUT0RPOiByZWNvcmQgbWFya2VkIGFzIGRlbGV0ZWQgLS0gY3JlYXRlIGEgaGlkZGVuIHJvdz9cblx0XHRcdGQubCs9cmxlbjtcblx0XHRcdGNvbnRpbnVlO1xuXHRcdH1cblx0XHQrK2QubDtcblx0XHRvdXRbKytSXSA9IFtdOyBDID0gMDtcblx0XHRmb3IoQyA9IDA7IEMgIT0gZmllbGRzLmxlbmd0aDsgKytDKSB7XG5cdFx0XHR2YXIgZGQgPSBkLnNsaWNlKGQubCwgZC5sK2ZpZWxkc1tDXS5sZW4pOyBkLmwrPWZpZWxkc1tDXS5sZW47XG5cdFx0XHRwcmVwX2Jsb2IoZGQsIDApO1xuXHRcdFx0dmFyIHMgPSAkY3B0YWJsZS51dGlscy5kZWNvZGUoY3VycmVudF9jcCwgZGQpO1xuXHRcdFx0c3dpdGNoKGZpZWxkc1tDXS50eXBlKSB7XG5cdFx0XHRcdGNhc2UgJ0MnOlxuXHRcdFx0XHRcdC8vIE5PVEU6IGl0IGlzIGNvbnZlbnRpb25hbCB0byB3cml0ZSAnICAvICAvICAnIGZvciBlbXB0eSBkYXRlc1xuXHRcdFx0XHRcdGlmKHMudHJpbSgpLmxlbmd0aCkgb3V0W1JdW0NdID0gcy5yZXBsYWNlKC9cXHMrJC8sXCJcIik7XG5cdFx0XHRcdFx0YnJlYWs7XG5cdFx0XHRcdGNhc2UgJ0QnOlxuXHRcdFx0XHRcdGlmKHMubGVuZ3RoID09PSA4KSBvdXRbUl1bQ10gPSBuZXcgRGF0ZSgrcy5zbGljZSgwLDQpLCArcy5zbGljZSg0LDYpLTEsICtzLnNsaWNlKDYsOCkpO1xuXHRcdFx0XHRcdGVsc2Ugb3V0W1JdW0NdID0gcztcblx0XHRcdFx0XHRicmVhaztcblx0XHRcdFx0Y2FzZSAnRic6IG91dFtSXVtDXSA9IHBhcnNlRmxvYXQocy50cmltKCkpOyBicmVhaztcblx0XHRcdFx0Y2FzZSAnKyc6IGNhc2UgJ0knOiBvdXRbUl1bQ10gPSBsNyA/IGRkLnJlYWRfc2hpZnQoLTQsICdpJykgXiAweDgwMDAwMDAwIDogZGQucmVhZF9zaGlmdCg0LCAnaScpOyBicmVhaztcblx0XHRcdFx0Y2FzZSAnTCc6IHN3aXRjaChzLnRyaW0oKS50b1VwcGVyQ2FzZSgpKSB7XG5cdFx0XHRcdFx0Y2FzZSAnWSc6IGNhc2UgJ1QnOiBvdXRbUl1bQ10gPSB0cnVlOyBicmVhaztcblx0XHRcdFx0XHRjYXNlICdOJzogY2FzZSAnRic6IG91dFtSXVtDXSA9IGZhbHNlOyBicmVhaztcblx0XHRcdFx0XHRjYXNlICcnOiBjYXNlICc/JzogYnJlYWs7XG5cdFx0XHRcdFx0ZGVmYXVsdDogdGhyb3cgbmV3IEVycm9yKFwiREJGIFVucmVjb2duaXplZCBMOnxcIiArIHMgKyBcInxcIik7XG5cdFx0XHRcdFx0fSBicmVhaztcblx0XHRcdFx0Y2FzZSAnTSc6IC8qIFRPRE86IGhhbmRsZSBtZW1vIGZpbGVzICovXG5cdFx0XHRcdFx0aWYoIW1lbW8pIHRocm93IG5ldyBFcnJvcihcIkRCRiBVbmV4cGVjdGVkIE1FTU8gZm9yIHR5cGUgXCIgKyBmdC50b1N0cmluZygxNikpO1xuXHRcdFx0XHRcdG91dFtSXVtDXSA9IFwiIyNNRU1PIyNcIiArIChsNyA/IHBhcnNlSW50KHMudHJpbSgpLCAxMCk6IGRkLnJlYWRfc2hpZnQoNCkpO1xuXHRcdFx0XHRcdGJyZWFrO1xuXHRcdFx0XHRjYXNlICdOJzpcblx0XHRcdFx0XHRzID0gcy5yZXBsYWNlKC9cXHUwMDAwL2csXCJcIikudHJpbSgpO1xuXHRcdFx0XHRcdC8vIE5PVEU6IGRCQVNFIElJIGludGVycHJldHMgXCIgIC4gIFwiIGFzIDBcblx0XHRcdFx0XHRpZihzICYmIHMgIT0gXCIuXCIpIG91dFtSXVtDXSA9ICtzIHx8IDA7IGJyZWFrO1xuXHRcdFx0XHRjYXNlICdAJzpcblx0XHRcdFx0XHQvLyBOT1RFOiBkQkFTRSBzcGVjcyBhcHBlYXIgdG8gYmUgaW5jb3JyZWN0XG5cdFx0XHRcdFx0b3V0W1JdW0NdID0gbmV3IERhdGUoZGQucmVhZF9zaGlmdCgtOCwgJ2YnKSAtIDB4Mzg4MzE3NTMzNDAwKTtcblx0XHRcdFx0XHRicmVhaztcblx0XHRcdFx0Y2FzZSAnVCc6IG91dFtSXVtDXSA9IG5ldyBEYXRlKChkZC5yZWFkX3NoaWZ0KDQpIC0gMHgyNTNEOEMpICogMHg1MjY1QzAwICsgZGQucmVhZF9zaGlmdCg0KSk7IGJyZWFrO1xuXHRcdFx0XHRjYXNlICdZJzogb3V0W1JdW0NdID0gZGQucmVhZF9zaGlmdCg0LCdpJykvMWU0ICsgKGRkLnJlYWRfc2hpZnQoNCwgJ2knKS8xZTQpKk1hdGgucG93KDIsMzIpOyBicmVhaztcblx0XHRcdFx0Y2FzZSAnTyc6IG91dFtSXVtDXSA9IC1kZC5yZWFkX3NoaWZ0KC04LCAnZicpOyBicmVhaztcblx0XHRcdFx0Y2FzZSAnQic6IGlmKHZmcCAmJiBmaWVsZHNbQ10ubGVuID09IDgpIHsgb3V0W1JdW0NdID0gZGQucmVhZF9zaGlmdCg4LCdmJyk7IGJyZWFrOyB9XG5cdFx0XHRcdFx0LyogZmFsbHMgdGhyb3VnaCAqL1xuXHRcdFx0XHRjYXNlICdHJzogY2FzZSAnUCc6IGRkLmwgKz0gZmllbGRzW0NdLmxlbjsgYnJlYWs7XG5cdFx0XHRcdGNhc2UgJzAnOlxuXHRcdFx0XHRcdGlmKGZpZWxkc1tDXS5uYW1lID09PSAnX051bGxGbGFncycpIGJyZWFrO1xuXHRcdFx0XHRcdC8qIGZhbGxzIHRocm91Z2ggKi9cblx0XHRcdFx0ZGVmYXVsdDogdGhyb3cgbmV3IEVycm9yKFwiREJGIFVuc3VwcG9ydGVkIGRhdGEgdHlwZSBcIiArIGZpZWxkc1tDXS50eXBlKTtcblx0XHRcdH1cblx0XHR9XG5cdH1cblx0aWYoZnQgIT0gMHgwMikgaWYoZC5sIDwgZC5sZW5ndGggJiYgZFtkLmwrK10gIT0gMHgxQSkgdGhyb3cgbmV3IEVycm9yKFwiREJGIEVPRiBNYXJrZXIgbWlzc2luZyBcIiArIChkLmwtMSkgKyBcIiBvZiBcIiArIGQubGVuZ3RoICsgXCIgXCIgKyBkW2QubC0xXS50b1N0cmluZygxNikpO1xuXHRpZihvcHRzICYmIG9wdHMuc2hlZXRSb3dzKSBvdXQgPSBvdXQuc2xpY2UoMCwgb3B0cy5zaGVldFJvd3MpO1xuXHRvcHRzLkRCRiA9IGZpZWxkcztcblx0cmV0dXJuIG91dDtcbn1cblxuZnVuY3Rpb24gZGJmX3RvX3NoZWV0KGJ1Ziwgb3B0cykvKjpXb3Jrc2hlZXQqLyB7XG5cdHZhciBvID0gb3B0cyB8fCB7fTtcblx0aWYoIW8uZGF0ZU5GKSBvLmRhdGVORiA9IFwieXl5eW1tZGRcIjtcblx0dmFyIHdzID0gYW9hX3RvX3NoZWV0KGRiZl90b19hb2EoYnVmLCBvKSwgbyk7XG5cdHdzW1wiIWNvbHNcIl0gPSBvLkRCRi5tYXAoZnVuY3Rpb24oZmllbGQpIHsgcmV0dXJuIHtcblx0XHR3Y2g6IGZpZWxkLmxlbixcblx0XHREQkY6IGZpZWxkXG5cdH07fSk7XG5cdGRlbGV0ZSBvLkRCRjtcblx0cmV0dXJuIHdzO1xufVxuXG5mdW5jdGlvbiBkYmZfdG9fd29ya2Jvb2soYnVmLCBvcHRzKS8qOldvcmtib29rKi8ge1xuXHR0cnkgeyByZXR1cm4gc2hlZXRfdG9fd29ya2Jvb2soZGJmX3RvX3NoZWV0KGJ1Ziwgb3B0cyksIG9wdHMpOyB9XG5cdGNhdGNoKGUpIHsgaWYob3B0cyAmJiBvcHRzLldURikgdGhyb3cgZTsgfVxuXHRyZXR1cm4gKHtTaGVldE5hbWVzOltdLFNoZWV0czp7fX0pO1xufVxuXG52YXIgX1JMRU4gPSB7ICdCJzogOCwgJ0MnOiAyNTAsICdMJzogMSwgJ0QnOiA4LCAnPyc6IDAsICcnOiAwIH07XG5mdW5jdGlvbiBzaGVldF90b19kYmYod3MvKjpXb3Jrc2hlZXQqLywgb3B0cy8qOldyaXRlT3B0cyovKSB7XG5cdHZhciBvID0gb3B0cyB8fCB7fTtcblx0aWYoK28uY29kZXBhZ2UgPj0gMCkgc2V0X2NwKCtvLmNvZGVwYWdlKTtcblx0aWYoby50eXBlID09IFwic3RyaW5nXCIpIHRocm93IG5ldyBFcnJvcihcIkNhbm5vdCB3cml0ZSBEQkYgdG8gSlMgc3RyaW5nXCIpO1xuXHR2YXIgYmEgPSBidWZfYXJyYXkoKTtcblx0dmFyIGFvYS8qOkFPQSovID0gc2hlZXRfdG9fanNvbih3cywge2hlYWRlcjoxLCByYXc6dHJ1ZSwgY2VsbERhdGVzOnRydWV9KTtcblx0dmFyIGhlYWRlcnMgPSBhb2FbMF0sIGRhdGEgPSBhb2Euc2xpY2UoMSksIGNvbHMgPSB3c1tcIiFjb2xzXCJdIHx8IFtdO1xuXHR2YXIgaSA9IDAsIGogPSAwLCBoY250ID0gMCwgcmxlbiA9IDE7XG5cdGZvcihpID0gMDsgaSA8IGhlYWRlcnMubGVuZ3RoOyArK2kpIHtcblx0XHRpZigoKGNvbHNbaV18fHt9KS5EQkZ8fHt9KS5uYW1lKSB7IGhlYWRlcnNbaV0gPSBjb2xzW2ldLkRCRi5uYW1lOyArK2hjbnQ7IGNvbnRpbnVlOyB9XG5cdFx0aWYoaGVhZGVyc1tpXSA9PSBudWxsKSBjb250aW51ZTtcblx0XHQrK2hjbnQ7XG5cdFx0aWYodHlwZW9mIGhlYWRlcnNbaV0gPT09ICdudW1iZXInKSBoZWFkZXJzW2ldID0gaGVhZGVyc1tpXS50b1N0cmluZygxMCk7XG5cdFx0aWYodHlwZW9mIGhlYWRlcnNbaV0gIT09ICdzdHJpbmcnKSB0aHJvdyBuZXcgRXJyb3IoXCJEQkYgSW52YWxpZCBjb2x1bW4gbmFtZSBcIiArIGhlYWRlcnNbaV0gKyBcIiB8XCIgKyAodHlwZW9mIGhlYWRlcnNbaV0pICsgXCJ8XCIpO1xuXHRcdGlmKGhlYWRlcnMuaW5kZXhPZihoZWFkZXJzW2ldKSAhPT0gaSkgZm9yKGo9MDsgajwxMDI0Oysrailcblx0XHRcdGlmKGhlYWRlcnMuaW5kZXhPZihoZWFkZXJzW2ldICsgXCJfXCIgKyBqKSA9PSAtMSkgeyBoZWFkZXJzW2ldICs9IFwiX1wiICsgajsgYnJlYWs7IH1cblx0fVxuXHR2YXIgcmFuZ2UgPSBzYWZlX2RlY29kZV9yYW5nZSh3c1snIXJlZiddKTtcblx0dmFyIGNvbHR5cGVzLyo6QXJyYXk8c3RyaW5nPiovID0gW107XG5cdHZhciBjb2x3aWR0aHMvKjpBcnJheTxudW1iZXI+Ki8gPSBbXTtcblx0dmFyIGNvbGRlY2ltYWxzLyo6QXJyYXk8bnVtYmVyPiovID0gW107XG5cdGZvcihpID0gMDsgaSA8PSByYW5nZS5lLmMgLSByYW5nZS5zLmM7ICsraSkge1xuXHRcdHZhciBndWVzcyA9ICcnLCBfZ3Vlc3MgPSAnJywgbWF4bGVuID0gMDtcblx0XHR2YXIgY29sLyo6QXJyYXk8YW55PiovID0gW107XG5cdFx0Zm9yKGo9MDsgaiA8IGRhdGEubGVuZ3RoOyArK2opIHtcblx0XHRcdGlmKGRhdGFbal1baV0gIT0gbnVsbCkgY29sLnB1c2goZGF0YVtqXVtpXSk7XG5cdFx0fVxuXHRcdGlmKGNvbC5sZW5ndGggPT0gMCB8fCBoZWFkZXJzW2ldID09IG51bGwpIHsgY29sdHlwZXNbaV0gPSAnPyc7IGNvbnRpbnVlOyB9XG5cdFx0Zm9yKGogPSAwOyBqIDwgY29sLmxlbmd0aDsgKytqKSB7XG5cdFx0XHRzd2l0Y2godHlwZW9mIGNvbFtqXSkge1xuXHRcdFx0XHQvKiBUT0RPOiBjaGVjayBpZiBMMiBjb21wYXQgaXMgZGVzaXJlZCAqL1xuXHRcdFx0XHRjYXNlICdudW1iZXInOiBfZ3Vlc3MgPSAnQic7IGJyZWFrO1xuXHRcdFx0XHRjYXNlICdzdHJpbmcnOiBfZ3Vlc3MgPSAnQyc7IGJyZWFrO1xuXHRcdFx0XHRjYXNlICdib29sZWFuJzogX2d1ZXNzID0gJ0wnOyBicmVhaztcblx0XHRcdFx0Y2FzZSAnb2JqZWN0JzogX2d1ZXNzID0gY29sW2pdIGluc3RhbmNlb2YgRGF0ZSA/ICdEJyA6ICdDJzsgYnJlYWs7XG5cdFx0XHRcdGRlZmF1bHQ6IF9ndWVzcyA9ICdDJztcblx0XHRcdH1cblx0XHRcdG1heGxlbiA9IE1hdGgubWF4KG1heGxlbiwgU3RyaW5nKGNvbFtqXSkubGVuZ3RoKTtcblx0XHRcdGd1ZXNzID0gZ3Vlc3MgJiYgZ3Vlc3MgIT0gX2d1ZXNzID8gJ0MnIDogX2d1ZXNzO1xuXHRcdFx0Ly9pZihndWVzcyA9PSAnQycpIGJyZWFrO1xuXHRcdH1cblx0XHRpZihtYXhsZW4gPiAyNTApIG1heGxlbiA9IDI1MDtcblx0XHRfZ3Vlc3MgPSAoKGNvbHNbaV18fHt9KS5EQkZ8fHt9KS50eXBlO1xuXHRcdC8qIFRPRE86IG1vcmUgZmluZSBncmFpbmVkIGNvbnRyb2wgb3ZlciBEQkYgdHlwZSByZXNvbHV0aW9uICovXG5cdFx0aWYoX2d1ZXNzID09ICdDJykge1xuXHRcdFx0aWYoY29sc1tpXS5EQkYubGVuID4gbWF4bGVuKSBtYXhsZW4gPSBjb2xzW2ldLkRCRi5sZW47XG5cdFx0fVxuXHRcdGlmKGd1ZXNzID09ICdCJyAmJiBfZ3Vlc3MgPT0gJ04nKSB7XG5cdFx0XHRndWVzcyA9ICdOJztcblx0XHRcdGNvbGRlY2ltYWxzW2ldID0gY29sc1tpXS5EQkYuZGVjO1xuXHRcdFx0bWF4bGVuID0gY29sc1tpXS5EQkYubGVuO1xuXHRcdH1cblx0XHRjb2x3aWR0aHNbaV0gPSBndWVzcyA9PSAnQycgfHwgX2d1ZXNzID09ICdOJyA/IG1heGxlbiA6IChfUkxFTltndWVzc10gfHwgMCk7XG5cdFx0cmxlbiArPSBjb2x3aWR0aHNbaV07XG5cdFx0Y29sdHlwZXNbaV0gPSBndWVzcztcblx0fVxuXG5cdHZhciBoID0gYmEubmV4dCgzMik7XG5cdGgud3JpdGVfc2hpZnQoNCwgMHgxMzAyMTEzMCk7XG5cdGgud3JpdGVfc2hpZnQoNCwgZGF0YS5sZW5ndGgpO1xuXHRoLndyaXRlX3NoaWZ0KDIsIDI5NiArIDMyICogaGNudCk7XG5cdGgud3JpdGVfc2hpZnQoMiwgcmxlbik7XG5cdGZvcihpPTA7IGkgPCA0OyArK2kpIGgud3JpdGVfc2hpZnQoNCwgMCk7XG5cdGgud3JpdGVfc2hpZnQoNCwgMHgwMDAwMDAwMCB8ICgoK2RiZl9yZXZlcnNlX21hcFsvKjo6U3RyaW5nKCovY3VycmVudF9hbnNpLyo6OikqL10gfHwgMHgwMyk8PDgpKTtcblxuXHRmb3IoaSA9IDAsIGogPSAwOyBpIDwgaGVhZGVycy5sZW5ndGg7ICsraSkge1xuXHRcdGlmKGhlYWRlcnNbaV0gPT0gbnVsbCkgY29udGludWU7XG5cdFx0dmFyIGhmID0gYmEubmV4dCgzMik7XG5cdFx0dmFyIF9mID0gKGhlYWRlcnNbaV0uc2xpY2UoLTEwKSArIFwiXFx4MDBcXHgwMFxceDAwXFx4MDBcXHgwMFxceDAwXFx4MDBcXHgwMFxceDAwXFx4MDBcXHgwMFwiKS5zbGljZSgwLCAxMSk7XG5cdFx0aGYud3JpdGVfc2hpZnQoMSwgX2YsIFwic2Jjc1wiKTtcblx0XHRoZi53cml0ZV9zaGlmdCgxLCBjb2x0eXBlc1tpXSA9PSAnPycgPyAnQycgOiBjb2x0eXBlc1tpXSwgXCJzYmNzXCIpO1xuXHRcdGhmLndyaXRlX3NoaWZ0KDQsIGopO1xuXHRcdGhmLndyaXRlX3NoaWZ0KDEsIGNvbHdpZHRoc1tpXSB8fCBfUkxFTltjb2x0eXBlc1tpXV0gfHwgMCk7XG5cdFx0aGYud3JpdGVfc2hpZnQoMSwgY29sZGVjaW1hbHNbaV0gfHwgMCk7XG5cdFx0aGYud3JpdGVfc2hpZnQoMSwgMHgwMik7XG5cdFx0aGYud3JpdGVfc2hpZnQoNCwgMCk7XG5cdFx0aGYud3JpdGVfc2hpZnQoMSwgMCk7XG5cdFx0aGYud3JpdGVfc2hpZnQoNCwgMCk7XG5cdFx0aGYud3JpdGVfc2hpZnQoNCwgMCk7XG5cdFx0aiArPSAoY29sd2lkdGhzW2ldIHx8IF9STEVOW2NvbHR5cGVzW2ldXSB8fCAwKTtcblx0fVxuXG5cdHZhciBoYiA9IGJhLm5leHQoMjY0KTtcblx0aGIud3JpdGVfc2hpZnQoNCwgMHgwMDAwMDAwRCk7XG5cdGZvcihpPTA7IGkgPCA2NTsrK2kpIGhiLndyaXRlX3NoaWZ0KDQsIDB4MDAwMDAwMDApO1xuXHRmb3IoaT0wOyBpIDwgZGF0YS5sZW5ndGg7ICsraSkge1xuXHRcdHZhciByb3V0ID0gYmEubmV4dChybGVuKTtcblx0XHRyb3V0LndyaXRlX3NoaWZ0KDEsIDApO1xuXHRcdGZvcihqPTA7IGo8aGVhZGVycy5sZW5ndGg7ICsraikge1xuXHRcdFx0aWYoaGVhZGVyc1tqXSA9PSBudWxsKSBjb250aW51ZTtcblx0XHRcdHN3aXRjaChjb2x0eXBlc1tqXSkge1xuXHRcdFx0XHRjYXNlICdMJzogcm91dC53cml0ZV9zaGlmdCgxLCBkYXRhW2ldW2pdID09IG51bGwgPyAweDNGIDogZGF0YVtpXVtqXSA/IDB4NTQgOiAweDQ2KTsgYnJlYWs7XG5cdFx0XHRcdGNhc2UgJ0InOiByb3V0LndyaXRlX3NoaWZ0KDgsIGRhdGFbaV1bal18fDAsICdmJyk7IGJyZWFrO1xuXHRcdFx0XHRjYXNlICdOJzpcblx0XHRcdFx0XHR2YXIgX24gPSBcIjBcIjtcblx0XHRcdFx0XHRpZih0eXBlb2YgZGF0YVtpXVtqXSA9PSBcIm51bWJlclwiKSBfbiA9IGRhdGFbaV1bal0udG9GaXhlZChjb2xkZWNpbWFsc1tqXXx8MCk7XG5cdFx0XHRcdFx0Zm9yKGhjbnQ9MDsgaGNudCA8IGNvbHdpZHRoc1tqXS1fbi5sZW5ndGg7ICsraGNudCkgcm91dC53cml0ZV9zaGlmdCgxLCAweDIwKTtcblx0XHRcdFx0XHRyb3V0LndyaXRlX3NoaWZ0KDEsIF9uLCBcInNiY3NcIik7XG5cdFx0XHRcdFx0YnJlYWs7XG5cdFx0XHRcdGNhc2UgJ0QnOlxuXHRcdFx0XHRcdGlmKCFkYXRhW2ldW2pdKSByb3V0LndyaXRlX3NoaWZ0KDgsIFwiMDAwMDAwMDBcIiwgXCJzYmNzXCIpO1xuXHRcdFx0XHRcdGVsc2Uge1xuXHRcdFx0XHRcdFx0cm91dC53cml0ZV9zaGlmdCg0LCAoXCIwMDAwXCIrZGF0YVtpXVtqXS5nZXRGdWxsWWVhcigpKS5zbGljZSgtNCksIFwic2Jjc1wiKTtcblx0XHRcdFx0XHRcdHJvdXQud3JpdGVfc2hpZnQoMiwgKFwiMDBcIisoZGF0YVtpXVtqXS5nZXRNb250aCgpKzEpKS5zbGljZSgtMiksIFwic2Jjc1wiKTtcblx0XHRcdFx0XHRcdHJvdXQud3JpdGVfc2hpZnQoMiwgKFwiMDBcIitkYXRhW2ldW2pdLmdldERhdGUoKSkuc2xpY2UoLTIpLCBcInNiY3NcIik7XG5cdFx0XHRcdFx0fSBicmVhaztcblx0XHRcdFx0Y2FzZSAnQyc6XG5cdFx0XHRcdFx0dmFyIF9zID0gU3RyaW5nKGRhdGFbaV1bal0gIT0gbnVsbCA/IGRhdGFbaV1bal0gOiBcIlwiKS5zbGljZSgwLCBjb2x3aWR0aHNbal0pO1xuXHRcdFx0XHRcdHJvdXQud3JpdGVfc2hpZnQoMSwgX3MsIFwic2Jjc1wiKTtcblx0XHRcdFx0XHRmb3IoaGNudD0wOyBoY250IDwgY29sd2lkdGhzW2pdLV9zLmxlbmd0aDsgKytoY250KSByb3V0LndyaXRlX3NoaWZ0KDEsIDB4MjApOyBicmVhaztcblx0XHRcdH1cblx0XHR9XG5cdFx0Ly8gZGF0YVxuXHR9XG5cdGJhLm5leHQoMSkud3JpdGVfc2hpZnQoMSwgMHgxQSk7XG5cdHJldHVybiBiYS5lbmQoKTtcbn1cblx0cmV0dXJuIHtcblx0XHR0b193b3JrYm9vazogZGJmX3RvX3dvcmtib29rLFxuXHRcdHRvX3NoZWV0OiBkYmZfdG9fc2hlZXQsXG5cdFx0ZnJvbV9zaGVldDogc2hlZXRfdG9fZGJmXG5cdH07XG59KSgpO1xuXG52YXIgU1lMSyA9IC8qI19fUFVSRV9fKi8oZnVuY3Rpb24oKSB7XG5cdC8qIFRPRE86IHN0cmVzcyB0ZXN0IHNlcXVlbmNlcyAqL1xuXHR2YXIgc3lsa19lc2NhcGVzID0gKHtcblx0XHRBQTonw4AnLCBCQTonw4EnLCBDQTonw4InLCBEQToxOTUsIEhBOifDhCcsIEpBOjE5Nyxcblx0XHRBRTonw4gnLCBCRTonw4knLCBDRTonw4onLCAgICAgICAgIEhFOifDiycsXG5cdFx0QUk6J8OMJywgQkk6J8ONJywgQ0k6J8OOJywgICAgICAgICBISTonw48nLFxuXHRcdEFPOifDkicsIEJPOifDkycsIENPOifDlCcsIERPOjIxMywgSE86J8OWJyxcblx0XHRBVTonw5knLCBCVTonw5onLCBDVTonw5snLCAgICAgICAgIEhVOifDnCcsXG5cdFx0QWE6J8OgJywgQmE6J8OhJywgQ2E6J8OiJywgRGE6MjI3LCBIYTonw6QnLCBKYToyMjksXG5cdFx0QWU6J8OoJywgQmU6J8OpJywgQ2U6J8OqJywgICAgICAgICBIZTonw6snLFxuXHRcdEFpOifDrCcsIEJpOifDrScsIENpOifDricsICAgICAgICAgSGk6J8OvJyxcblx0XHRBbzonw7InLCBCbzonw7MnLCBDbzonw7QnLCBEbzoyNDUsIEhvOifDticsXG5cdFx0QXU6J8O5JywgQnU6J8O6JywgQ3U6J8O7JywgICAgICAgICBIdTonw7wnLFxuXHRcdEtDOifDhycsIEtjOifDpycsIHE6J8OmJywgIHo6J8WTJywgIGE6J8OGJywgIGo6J8WSJyxcblx0XHRETjoyMDksIERuOjI0MSwgSHk6MjU1LFxuXHRcdFM6MTY5LCAgYzoxNzAsICBSOjE3NCwgIFwiQiBcIjoxODAsXG5cdFx0Lyo6OlsqLzAvKjo6XSovOjE3NiwgICAgLyo6OlsqLzEvKjo6XSovOjE3NywgIC8qOjpbKi8yLyo6Ol0qLzoxNzgsXG5cdFx0Lyo6OlsqLzMvKjo6XSovOjE3OSwgICAgLyo6OlsqLzUvKjo6XSovOjE4MSwgIC8qOjpbKi82Lyo6Ol0qLzoxODIsXG5cdFx0Lyo6OlsqLzcvKjo6XSovOjE4MywgICAgUToxODUsICBrOjE4NiwgIGI6MjA4LCAgaToyMTYsICBsOjIyMiwgIHM6MjQwLCAgeToyNDgsXG5cdFx0XCIhXCI6MTYxLCAnXCInOjE2MiwgXCIjXCI6MTYzLCBcIihcIjoxNjQsIFwiJVwiOjE2NSwgXCInXCI6MTY3LCBcIkggXCI6MTY4LFxuXHRcdFwiK1wiOjE3MSwgXCI7XCI6MTg3LCBcIjxcIjoxODgsIFwiPVwiOjE4OSwgXCI+XCI6MTkwLCBcIj9cIjoxOTEsIFwie1wiOjIyM1xuXHR9Lyo6YW55Ki8pO1xuXHR2YXIgc3lsa19jaGFyX3JlZ2V4ID0gbmV3IFJlZ0V4cChcIlxcdTAwMUJOKFwiICsga2V5cyhzeWxrX2VzY2FwZXMpLmpvaW4oXCJ8XCIpLnJlcGxhY2UoL1xcfFxcfFxcfC8sIFwifFxcXFx8fFwiKS5yZXBsYWNlKC8oWz8oKStdKS9nLFwiXFxcXCQxXCIpICsgXCJ8XFxcXHwpXCIsIFwiZ21cIik7XG5cdHZhciBzeWxrX2NoYXJfZm4gPSBmdW5jdGlvbihfLCAkMSl7IHZhciBvID0gc3lsa19lc2NhcGVzWyQxXTsgcmV0dXJuIHR5cGVvZiBvID09IFwibnVtYmVyXCIgPyBfZ2V0YW5zaShvKSA6IG87IH07XG5cdHZhciBkZWNvZGVfc3lsa19jaGFyID0gZnVuY3Rpb24oJCQsICQxLCAkMikgeyB2YXIgbmV3Y2MgPSAoKCQxLmNoYXJDb2RlQXQoMCkgLSAweDIwKTw8NCkgfCAoJDIuY2hhckNvZGVBdCgwKSAtIDB4MzApOyByZXR1cm4gbmV3Y2MgPT0gNTkgPyAkJCA6IF9nZXRhbnNpKG5ld2NjKTsgfTtcblx0c3lsa19lc2NhcGVzW1wifFwiXSA9IDI1NDtcblx0LyogVE9ETzogZmluZCBhbiBhY3R1YWwgc3BlY2lmaWNhdGlvbiAqL1xuXHRmdW5jdGlvbiBzeWxrX3RvX2FvYShkLyo6UmF3RGF0YSovLCBvcHRzKS8qOltBT0EsIFdvcmtzaGVldF0qLyB7XG5cdFx0c3dpdGNoKG9wdHMudHlwZSkge1xuXHRcdFx0Y2FzZSAnYmFzZTY0JzogcmV0dXJuIHN5bGtfdG9fYW9hX3N0cihCYXNlNjRfZGVjb2RlKGQpLCBvcHRzKTtcblx0XHRcdGNhc2UgJ2JpbmFyeSc6IHJldHVybiBzeWxrX3RvX2FvYV9zdHIoZCwgb3B0cyk7XG5cdFx0XHRjYXNlICdidWZmZXInOiByZXR1cm4gc3lsa190b19hb2Ffc3RyKGhhc19idWYgJiYgQnVmZmVyLmlzQnVmZmVyKGQpID8gZC50b1N0cmluZygnYmluYXJ5JykgOiBhMnMoZCksIG9wdHMpO1xuXHRcdFx0Y2FzZSAnYXJyYXknOiByZXR1cm4gc3lsa190b19hb2Ffc3RyKGNjMnN0cihkKSwgb3B0cyk7XG5cdFx0fVxuXHRcdHRocm93IG5ldyBFcnJvcihcIlVucmVjb2duaXplZCB0eXBlIFwiICsgb3B0cy50eXBlKTtcblx0fVxuXHRmdW5jdGlvbiBzeWxrX3RvX2FvYV9zdHIoc3RyLyo6c3RyaW5nKi8sIG9wdHMpLyo6W0FPQSwgV29ya3NoZWV0XSovIHtcblx0XHR2YXIgcmVjb3JkcyA9IHN0ci5zcGxpdCgvW1xcblxccl0rLyksIFIgPSAtMSwgQyA9IC0xLCByaSA9IDAsIHJqID0gMCwgYXJyLyo6QU9BKi8gPSBbXTtcblx0XHR2YXIgZm9ybWF0cy8qOkFycmF5PHN0cmluZz4qLyA9IFtdO1xuXHRcdHZhciBuZXh0X2NlbGxfZm9ybWF0Lyo6c3RyaW5nfG51bGwqLyA9IG51bGw7XG5cdFx0dmFyIHNodCA9IHt9LCByb3dpbmZvLyo6QXJyYXk8Um93SW5mbz4qLyA9IFtdLCBjb2xpbmZvLyo6QXJyYXk8Q29sSW5mbz4qLyA9IFtdLCBjdy8qOkFycmF5PHN0cmluZz4qLyA9IFtdO1xuXHRcdHZhciBNdmFsID0gMCwgajtcblx0XHRpZigrb3B0cy5jb2RlcGFnZSA+PSAwKSBzZXRfY3AoK29wdHMuY29kZXBhZ2UpO1xuXHRcdGZvciAoOyByaSAhPT0gcmVjb3Jkcy5sZW5ndGg7ICsrcmkpIHtcblx0XHRcdE12YWwgPSAwO1xuXHRcdFx0dmFyIHJzdHI9cmVjb3Jkc1tyaV0udHJpbSgpLnJlcGxhY2UoL1xceDFCKFtcXHgyMC1cXHgyRl0pKFtcXHgzMC1cXHgzRl0pL2csIGRlY29kZV9zeWxrX2NoYXIpLnJlcGxhY2Uoc3lsa19jaGFyX3JlZ2V4LCBzeWxrX2NoYXJfZm4pO1xuXHRcdFx0dmFyIHJlY29yZD1yc3RyLnJlcGxhY2UoLzs7L2csIFwiXFx1MDAwMFwiKS5zcGxpdChcIjtcIikubWFwKGZ1bmN0aW9uKHgpIHsgcmV0dXJuIHgucmVwbGFjZSgvXFx1MDAwMC9nLCBcIjtcIik7IH0pO1xuXHRcdFx0dmFyIFJUPXJlY29yZFswXSwgdmFsO1xuXHRcdFx0aWYocnN0ci5sZW5ndGggPiAwKSBzd2l0Y2goUlQpIHtcblx0XHRcdGNhc2UgJ0lEJzogYnJlYWs7IC8qIGhlYWRlciAqL1xuXHRcdFx0Y2FzZSAnRSc6IGJyZWFrOyAvKiBFT0YgKi9cblx0XHRcdGNhc2UgJ0InOiBicmVhazsgLyogZGltZW5zaW9ucyAqL1xuXHRcdFx0Y2FzZSAnTyc6IGJyZWFrOyAvKiBvcHRpb25zPyAqL1xuXHRcdFx0Y2FzZSAnVyc6IGJyZWFrOyAvKiB3aW5kb3c/ICovXG5cdFx0XHRjYXNlICdQJzpcblx0XHRcdFx0aWYocmVjb3JkWzFdLmNoYXJBdCgwKSA9PSAnUCcpXG5cdFx0XHRcdFx0Zm9ybWF0cy5wdXNoKHJzdHIuc2xpY2UoMykucmVwbGFjZSgvOzsvZywgXCI7XCIpKTtcblx0XHRcdFx0YnJlYWs7XG5cdFx0XHRjYXNlICdDJzpcblx0XHRcdHZhciBDX3NlZW5fSyA9IGZhbHNlLCBDX3NlZW5fWCA9IGZhbHNlLCBDX3NlZW5fUyA9IGZhbHNlLCBDX3NlZW5fRSA9IGZhbHNlLCBfUiA9IC0xLCBfQyA9IC0xO1xuXHRcdFx0Zm9yKHJqPTE7IHJqPHJlY29yZC5sZW5ndGg7ICsrcmopIHN3aXRjaChyZWNvcmRbcmpdLmNoYXJBdCgwKSkge1xuXHRcdFx0XHRjYXNlICdBJzogYnJlYWs7IC8vIFRPRE86IGNvbW1lbnRcblx0XHRcdFx0Y2FzZSAnWCc6IEMgPSBwYXJzZUludChyZWNvcmRbcmpdLnNsaWNlKDEpKS0xOyBDX3NlZW5fWCA9IHRydWU7IGJyZWFrO1xuXHRcdFx0XHRjYXNlICdZJzpcblx0XHRcdFx0XHRSID0gcGFyc2VJbnQocmVjb3JkW3JqXS5zbGljZSgxKSktMTsgaWYoIUNfc2Vlbl9YKSBDID0gMDtcblx0XHRcdFx0XHRmb3IoaiA9IGFyci5sZW5ndGg7IGogPD0gUjsgKytqKSBhcnJbal0gPSBbXTtcblx0XHRcdFx0XHRicmVhaztcblx0XHRcdFx0Y2FzZSAnSyc6XG5cdFx0XHRcdFx0dmFsID0gcmVjb3JkW3JqXS5zbGljZSgxKTtcblx0XHRcdFx0XHRpZih2YWwuY2hhckF0KDApID09PSAnXCInKSB2YWwgPSB2YWwuc2xpY2UoMSx2YWwubGVuZ3RoIC0gMSk7XG5cdFx0XHRcdFx0ZWxzZSBpZih2YWwgPT09ICdUUlVFJykgdmFsID0gdHJ1ZTtcblx0XHRcdFx0XHRlbHNlIGlmKHZhbCA9PT0gJ0ZBTFNFJykgdmFsID0gZmFsc2U7XG5cdFx0XHRcdFx0ZWxzZSBpZighaXNOYU4oZnV6enludW0odmFsKSkpIHtcblx0XHRcdFx0XHRcdHZhbCA9IGZ1enp5bnVtKHZhbCk7XG5cdFx0XHRcdFx0XHRpZihuZXh0X2NlbGxfZm9ybWF0ICE9PSBudWxsICYmIGZtdF9pc19kYXRlKG5leHRfY2VsbF9mb3JtYXQpKSB2YWwgPSBudW1kYXRlKHZhbCk7XG5cdFx0XHRcdFx0fSBlbHNlIGlmKCFpc05hTihmdXp6eWRhdGUodmFsKS5nZXREYXRlKCkpKSB7XG5cdFx0XHRcdFx0XHR2YWwgPSBwYXJzZURhdGUodmFsKTtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0aWYodHlwZW9mICRjcHRhYmxlICE9PSAndW5kZWZpbmVkJyAmJiB0eXBlb2YgdmFsID09IFwic3RyaW5nXCIgJiYgKChvcHRzfHx7fSkudHlwZSAhPSBcInN0cmluZ1wiKSAmJiAob3B0c3x8e30pLmNvZGVwYWdlKSB2YWwgPSAkY3B0YWJsZS51dGlscy5kZWNvZGUob3B0cy5jb2RlcGFnZSwgdmFsKTtcblx0XHRcdFx0XHRDX3NlZW5fSyA9IHRydWU7XG5cdFx0XHRcdFx0YnJlYWs7XG5cdFx0XHRcdGNhc2UgJ0UnOlxuXHRcdFx0XHRcdENfc2Vlbl9FID0gdHJ1ZTtcblx0XHRcdFx0XHR2YXIgZm9ybXVsYSA9IHJjX3RvX2ExKHJlY29yZFtyal0uc2xpY2UoMSksIHtyOlIsYzpDfSk7XG5cdFx0XHRcdFx0YXJyW1JdW0NdID0gW2FycltSXVtDXSwgZm9ybXVsYV07XG5cdFx0XHRcdFx0YnJlYWs7XG5cdFx0XHRcdGNhc2UgJ1MnOlxuXHRcdFx0XHRcdENfc2Vlbl9TID0gdHJ1ZTtcblx0XHRcdFx0XHRhcnJbUl1bQ10gPSBbYXJyW1JdW0NdLCBcIlM1U1wiXTtcblx0XHRcdFx0XHRicmVhaztcblx0XHRcdFx0Y2FzZSAnRyc6IGJyZWFrOyAvLyB1bmtub3duXG5cdFx0XHRcdGNhc2UgJ1InOiBfUiA9IHBhcnNlSW50KHJlY29yZFtyal0uc2xpY2UoMSkpLTE7IGJyZWFrO1xuXHRcdFx0XHRjYXNlICdDJzogX0MgPSBwYXJzZUludChyZWNvcmRbcmpdLnNsaWNlKDEpKS0xOyBicmVhaztcblx0XHRcdFx0ZGVmYXVsdDogaWYob3B0cyAmJiBvcHRzLldURikgdGhyb3cgbmV3IEVycm9yKFwiU1lMSyBiYWQgcmVjb3JkIFwiICsgcnN0cik7XG5cdFx0XHR9XG5cdFx0XHRpZihDX3NlZW5fSykge1xuXHRcdFx0XHRpZihhcnJbUl1bQ10gJiYgYXJyW1JdW0NdLmxlbmd0aCA9PSAyKSBhcnJbUl1bQ11bMF0gPSB2YWw7XG5cdFx0XHRcdGVsc2UgYXJyW1JdW0NdID0gdmFsO1xuXHRcdFx0XHRuZXh0X2NlbGxfZm9ybWF0ID0gbnVsbDtcblx0XHRcdH1cblx0XHRcdGlmKENfc2Vlbl9TKSB7XG5cdFx0XHRcdGlmKENfc2Vlbl9FKSB0aHJvdyBuZXcgRXJyb3IoXCJTWUxLIHNoYXJlZCBmb3JtdWxhIGNhbm5vdCBoYXZlIG93biBmb3JtdWxhXCIpO1xuXHRcdFx0XHR2YXIgc2hyYmFzZSA9IF9SID4gLTEgJiYgYXJyW19SXVtfQ107XG5cdFx0XHRcdGlmKCFzaHJiYXNlIHx8ICFzaHJiYXNlWzFdKSB0aHJvdyBuZXcgRXJyb3IoXCJTWUxLIHNoYXJlZCBmb3JtdWxhIGNhbm5vdCBmaW5kIGJhc2VcIik7XG5cdFx0XHRcdGFycltSXVtDXVsxXSA9IHNoaWZ0X2Zvcm11bGFfc3RyKHNocmJhc2VbMV0sIHtyOiBSIC0gX1IsIGM6IEMgLSBfQ30pO1xuXHRcdFx0fVxuXHRcdFx0YnJlYWs7XG5cdFx0XHRjYXNlICdGJzpcblx0XHRcdHZhciBGX3NlZW4gPSAwO1xuXHRcdFx0Zm9yKHJqPTE7IHJqPHJlY29yZC5sZW5ndGg7ICsrcmopIHN3aXRjaChyZWNvcmRbcmpdLmNoYXJBdCgwKSkge1xuXHRcdFx0XHRjYXNlICdYJzogQyA9IHBhcnNlSW50KHJlY29yZFtyal0uc2xpY2UoMSkpLTE7ICsrRl9zZWVuOyBicmVhaztcblx0XHRcdFx0Y2FzZSAnWSc6XG5cdFx0XHRcdFx0UiA9IHBhcnNlSW50KHJlY29yZFtyal0uc2xpY2UoMSkpLTE7IC8qQyA9IDA7Ki9cblx0XHRcdFx0XHRmb3IoaiA9IGFyci5sZW5ndGg7IGogPD0gUjsgKytqKSBhcnJbal0gPSBbXTtcblx0XHRcdFx0XHRicmVhaztcblx0XHRcdFx0Y2FzZSAnTSc6IE12YWwgPSBwYXJzZUludChyZWNvcmRbcmpdLnNsaWNlKDEpKSAvIDIwOyBicmVhaztcblx0XHRcdFx0Y2FzZSAnRic6IGJyZWFrOyAvKiA/Pz8gKi9cblx0XHRcdFx0Y2FzZSAnRyc6IGJyZWFrOyAvKiBoaWRlIGdyaWQgKi9cblx0XHRcdFx0Y2FzZSAnUCc6XG5cdFx0XHRcdFx0bmV4dF9jZWxsX2Zvcm1hdCA9IGZvcm1hdHNbcGFyc2VJbnQocmVjb3JkW3JqXS5zbGljZSgxKSldO1xuXHRcdFx0XHRcdGJyZWFrO1xuXHRcdFx0XHRjYXNlICdTJzogYnJlYWs7IC8qIGNlbGwgc3R5bGUgKi9cblx0XHRcdFx0Y2FzZSAnRCc6IGJyZWFrOyAvKiBjb2x1bW4gKi9cblx0XHRcdFx0Y2FzZSAnTic6IGJyZWFrOyAvKiBmb250ICovXG5cdFx0XHRcdGNhc2UgJ1cnOlxuXHRcdFx0XHRcdGN3ID0gcmVjb3JkW3JqXS5zbGljZSgxKS5zcGxpdChcIiBcIik7XG5cdFx0XHRcdFx0Zm9yKGogPSBwYXJzZUludChjd1swXSwgMTApOyBqIDw9IHBhcnNlSW50KGN3WzFdLCAxMCk7ICsraikge1xuXHRcdFx0XHRcdFx0TXZhbCA9IHBhcnNlSW50KGN3WzJdLCAxMCk7XG5cdFx0XHRcdFx0XHRjb2xpbmZvW2otMV0gPSBNdmFsID09PSAwID8ge2hpZGRlbjp0cnVlfToge3djaDpNdmFsfTsgcHJvY2Vzc19jb2woY29saW5mb1tqLTFdKTtcblx0XHRcdFx0XHR9IGJyZWFrO1xuXHRcdFx0XHRjYXNlICdDJzogLyogZGVmYXVsdCBjb2x1bW4gZm9ybWF0ICovXG5cdFx0XHRcdFx0QyA9IHBhcnNlSW50KHJlY29yZFtyal0uc2xpY2UoMSkpLTE7XG5cdFx0XHRcdFx0aWYoIWNvbGluZm9bQ10pIGNvbGluZm9bQ10gPSB7fTtcblx0XHRcdFx0XHRicmVhaztcblx0XHRcdFx0Y2FzZSAnUic6IC8qIHJvdyBwcm9wZXJ0aWVzICovXG5cdFx0XHRcdFx0UiA9IHBhcnNlSW50KHJlY29yZFtyal0uc2xpY2UoMSkpLTE7XG5cdFx0XHRcdFx0aWYoIXJvd2luZm9bUl0pIHJvd2luZm9bUl0gPSB7fTtcblx0XHRcdFx0XHRpZihNdmFsID4gMCkgeyByb3dpbmZvW1JdLmhwdCA9IE12YWw7IHJvd2luZm9bUl0uaHB4ID0gcHQycHgoTXZhbCk7IH1cblx0XHRcdFx0XHRlbHNlIGlmKE12YWwgPT09IDApIHJvd2luZm9bUl0uaGlkZGVuID0gdHJ1ZTtcblx0XHRcdFx0XHRicmVhaztcblx0XHRcdFx0ZGVmYXVsdDogaWYob3B0cyAmJiBvcHRzLldURikgdGhyb3cgbmV3IEVycm9yKFwiU1lMSyBiYWQgcmVjb3JkIFwiICsgcnN0cik7XG5cdFx0XHR9XG5cdFx0XHRpZihGX3NlZW4gPCAxKSBuZXh0X2NlbGxfZm9ybWF0ID0gbnVsbDsgYnJlYWs7XG5cdFx0XHRkZWZhdWx0OiBpZihvcHRzICYmIG9wdHMuV1RGKSB0aHJvdyBuZXcgRXJyb3IoXCJTWUxLIGJhZCByZWNvcmQgXCIgKyByc3RyKTtcblx0XHRcdH1cblx0XHR9XG5cdFx0aWYocm93aW5mby5sZW5ndGggPiAwKSBzaHRbJyFyb3dzJ10gPSByb3dpbmZvO1xuXHRcdGlmKGNvbGluZm8ubGVuZ3RoID4gMCkgc2h0WychY29scyddID0gY29saW5mbztcblx0XHRpZihvcHRzICYmIG9wdHMuc2hlZXRSb3dzKSBhcnIgPSBhcnIuc2xpY2UoMCwgb3B0cy5zaGVldFJvd3MpO1xuXHRcdHJldHVybiBbYXJyLCBzaHRdO1xuXHR9XG5cblx0ZnVuY3Rpb24gc3lsa190b19zaGVldChkLyo6UmF3RGF0YSovLCBvcHRzKS8qOldvcmtzaGVldCovIHtcblx0XHR2YXIgYW9hc2h0ID0gc3lsa190b19hb2EoZCwgb3B0cyk7XG5cdFx0dmFyIGFvYSA9IGFvYXNodFswXSwgd3MgPSBhb2FzaHRbMV07XG5cdFx0dmFyIG8gPSBhb2FfdG9fc2hlZXQoYW9hLCBvcHRzKTtcblx0XHRrZXlzKHdzKS5mb3JFYWNoKGZ1bmN0aW9uKGspIHsgb1trXSA9IHdzW2tdOyB9KTtcblx0XHRyZXR1cm4gbztcblx0fVxuXG5cdGZ1bmN0aW9uIHN5bGtfdG9fd29ya2Jvb2soZC8qOlJhd0RhdGEqLywgb3B0cykvKjpXb3JrYm9vayovIHsgcmV0dXJuIHNoZWV0X3RvX3dvcmtib29rKHN5bGtfdG9fc2hlZXQoZCwgb3B0cyksIG9wdHMpOyB9XG5cblx0ZnVuY3Rpb24gd3JpdGVfd3NfY2VsbF9zeWxrKGNlbGwvKjpDZWxsKi8sIHdzLyo6V29ya3NoZWV0Ki8sIFIvKjpudW1iZXIqLywgQy8qOm51bWJlciovLyo6Oiwgb3B0cyovKS8qOnN0cmluZyovIHtcblx0XHR2YXIgbyA9IFwiQztZXCIgKyAoUisxKSArIFwiO1hcIiArIChDKzEpICsgXCI7S1wiO1xuXHRcdHN3aXRjaChjZWxsLnQpIHtcblx0XHRcdGNhc2UgJ24nOlxuXHRcdFx0XHRvICs9IChjZWxsLnZ8fDApO1xuXHRcdFx0XHRpZihjZWxsLmYgJiYgIWNlbGwuRikgbyArPSBcIjtFXCIgKyBhMV90b19yYyhjZWxsLmYsIHtyOlIsIGM6Q30pOyBicmVhaztcblx0XHRcdGNhc2UgJ2InOiBvICs9IGNlbGwudiA/IFwiVFJVRVwiIDogXCJGQUxTRVwiOyBicmVhaztcblx0XHRcdGNhc2UgJ2UnOiBvICs9IGNlbGwudyB8fCBjZWxsLnY7IGJyZWFrO1xuXHRcdFx0Y2FzZSAnZCc6IG8gKz0gJ1wiJyArIChjZWxsLncgfHwgY2VsbC52KSArICdcIic7IGJyZWFrO1xuXHRcdFx0Y2FzZSAncyc6IG8gKz0gJ1wiJyArIGNlbGwudi5yZXBsYWNlKC9cIi9nLFwiXCIpLnJlcGxhY2UoLzsvZywgXCI7O1wiKSArICdcIic7IGJyZWFrO1xuXHRcdH1cblx0XHRyZXR1cm4gbztcblx0fVxuXG5cdGZ1bmN0aW9uIHdyaXRlX3dzX2NvbHNfc3lsayhvdXQsIGNvbHMpIHtcblx0XHRjb2xzLmZvckVhY2goZnVuY3Rpb24oY29sLCBpKSB7XG5cdFx0XHR2YXIgcmVjID0gXCJGO1dcIiArIChpKzEpICsgXCIgXCIgKyAoaSsxKSArIFwiIFwiO1xuXHRcdFx0aWYoY29sLmhpZGRlbikgcmVjICs9IFwiMFwiO1xuXHRcdFx0ZWxzZSB7XG5cdFx0XHRcdGlmKHR5cGVvZiBjb2wud2lkdGggPT0gJ251bWJlcicgJiYgIWNvbC53cHgpIGNvbC53cHggPSB3aWR0aDJweChjb2wud2lkdGgpO1xuXHRcdFx0XHRpZih0eXBlb2YgY29sLndweCA9PSAnbnVtYmVyJyAmJiAhY29sLndjaCkgY29sLndjaCA9IHB4MmNoYXIoY29sLndweCk7XG5cdFx0XHRcdGlmKHR5cGVvZiBjb2wud2NoID09ICdudW1iZXInKSByZWMgKz0gTWF0aC5yb3VuZChjb2wud2NoKTtcblx0XHRcdH1cblx0XHRcdGlmKHJlYy5jaGFyQXQocmVjLmxlbmd0aCAtIDEpICE9IFwiIFwiKSBvdXQucHVzaChyZWMpO1xuXHRcdH0pO1xuXHR9XG5cblx0ZnVuY3Rpb24gd3JpdGVfd3Nfcm93c19zeWxrKG91dC8qOkFycmF5PHN0cmluZz4qLywgcm93cy8qOkFycmF5PFJvd0luZm8+Ki8pIHtcblx0XHRyb3dzLmZvckVhY2goZnVuY3Rpb24ocm93LCBpKSB7XG5cdFx0XHR2YXIgcmVjID0gXCJGO1wiO1xuXHRcdFx0aWYocm93LmhpZGRlbikgcmVjICs9IFwiTTA7XCI7XG5cdFx0XHRlbHNlIGlmKHJvdy5ocHQpIHJlYyArPSBcIk1cIiArIDIwICogcm93LmhwdCArIFwiO1wiO1xuXHRcdFx0ZWxzZSBpZihyb3cuaHB4KSByZWMgKz0gXCJNXCIgKyAyMCAqIHB4MnB0KHJvdy5ocHgpICsgXCI7XCI7XG5cdFx0XHRpZihyZWMubGVuZ3RoID4gMikgb3V0LnB1c2gocmVjICsgXCJSXCIgKyAoaSsxKSk7XG5cdFx0fSk7XG5cdH1cblxuXHRmdW5jdGlvbiBzaGVldF90b19zeWxrKHdzLyo6V29ya3NoZWV0Ki8sIG9wdHMvKjo/YW55Ki8pLyo6c3RyaW5nKi8ge1xuXHRcdHZhciBwcmVhbWJsZS8qOkFycmF5PHN0cmluZz4qLyA9IFtcIklEO1BXWEw7TjtFXCJdLCBvLyo6QXJyYXk8c3RyaW5nPiovID0gW107XG5cdFx0dmFyIHIgPSBzYWZlX2RlY29kZV9yYW5nZSh3c1snIXJlZiddKSwgY2VsbC8qOkNlbGwqLztcblx0XHR2YXIgZGVuc2UgPSBBcnJheS5pc0FycmF5KHdzKTtcblx0XHR2YXIgUlMgPSBcIlxcclxcblwiO1xuXG5cdFx0cHJlYW1ibGUucHVzaChcIlA7UEdlbmVyYWxcIik7XG5cdFx0cHJlYW1ibGUucHVzaChcIkY7UDA7REcwRzg7TTI1NVwiKTtcblx0XHRpZih3c1snIWNvbHMnXSkgd3JpdGVfd3NfY29sc19zeWxrKHByZWFtYmxlLCB3c1snIWNvbHMnXSk7XG5cdFx0aWYod3NbJyFyb3dzJ10pIHdyaXRlX3dzX3Jvd3Nfc3lsayhwcmVhbWJsZSwgd3NbJyFyb3dzJ10pO1xuXG5cdFx0cHJlYW1ibGUucHVzaChcIkI7WVwiICsgKHIuZS5yIC0gci5zLnIgKyAxKSArIFwiO1hcIiArIChyLmUuYyAtIHIucy5jICsgMSkgKyBcIjtEXCIgKyBbci5zLmMsci5zLnIsci5lLmMsci5lLnJdLmpvaW4oXCIgXCIpKTtcblx0XHRmb3IodmFyIFIgPSByLnMucjsgUiA8PSByLmUucjsgKytSKSB7XG5cdFx0XHRmb3IodmFyIEMgPSByLnMuYzsgQyA8PSByLmUuYzsgKytDKSB7XG5cdFx0XHRcdHZhciBjb29yZCA9IGVuY29kZV9jZWxsKHtyOlIsYzpDfSk7XG5cdFx0XHRcdGNlbGwgPSBkZW5zZSA/ICh3c1tSXXx8W10pW0NdOiB3c1tjb29yZF07XG5cdFx0XHRcdGlmKCFjZWxsIHx8IChjZWxsLnYgPT0gbnVsbCAmJiAoIWNlbGwuZiB8fCBjZWxsLkYpKSkgY29udGludWU7XG5cdFx0XHRcdG8ucHVzaCh3cml0ZV93c19jZWxsX3N5bGsoY2VsbCwgd3MsIFIsIEMsIG9wdHMpKTtcblx0XHRcdH1cblx0XHR9XG5cdFx0cmV0dXJuIHByZWFtYmxlLmpvaW4oUlMpICsgUlMgKyBvLmpvaW4oUlMpICsgUlMgKyBcIkVcIiArIFJTO1xuXHR9XG5cblx0cmV0dXJuIHtcblx0XHR0b193b3JrYm9vazogc3lsa190b193b3JrYm9vayxcblx0XHR0b19zaGVldDogc3lsa190b19zaGVldCxcblx0XHRmcm9tX3NoZWV0OiBzaGVldF90b19zeWxrXG5cdH07XG59KSgpO1xuXG52YXIgRElGID0gLyojX19QVVJFX18qLyhmdW5jdGlvbigpIHtcblx0ZnVuY3Rpb24gZGlmX3RvX2FvYShkLyo6UmF3RGF0YSovLCBvcHRzKS8qOkFPQSovIHtcblx0XHRzd2l0Y2gob3B0cy50eXBlKSB7XG5cdFx0XHRjYXNlICdiYXNlNjQnOiByZXR1cm4gZGlmX3RvX2FvYV9zdHIoQmFzZTY0X2RlY29kZShkKSwgb3B0cyk7XG5cdFx0XHRjYXNlICdiaW5hcnknOiByZXR1cm4gZGlmX3RvX2FvYV9zdHIoZCwgb3B0cyk7XG5cdFx0XHRjYXNlICdidWZmZXInOiByZXR1cm4gZGlmX3RvX2FvYV9zdHIoaGFzX2J1ZiAmJiBCdWZmZXIuaXNCdWZmZXIoZCkgPyBkLnRvU3RyaW5nKCdiaW5hcnknKSA6IGEycyhkKSwgb3B0cyk7XG5cdFx0XHRjYXNlICdhcnJheSc6IHJldHVybiBkaWZfdG9fYW9hX3N0cihjYzJzdHIoZCksIG9wdHMpO1xuXHRcdH1cblx0XHR0aHJvdyBuZXcgRXJyb3IoXCJVbnJlY29nbml6ZWQgdHlwZSBcIiArIG9wdHMudHlwZSk7XG5cdH1cblx0ZnVuY3Rpb24gZGlmX3RvX2FvYV9zdHIoc3RyLyo6c3RyaW5nKi8sIG9wdHMpLyo6QU9BKi8ge1xuXHRcdHZhciByZWNvcmRzID0gc3RyLnNwbGl0KCdcXG4nKSwgUiA9IC0xLCBDID0gLTEsIHJpID0gMCwgYXJyLyo6QU9BKi8gPSBbXTtcblx0XHRmb3IgKDsgcmkgIT09IHJlY29yZHMubGVuZ3RoOyArK3JpKSB7XG5cdFx0XHRpZiAocmVjb3Jkc1tyaV0udHJpbSgpID09PSAnQk9UJykgeyBhcnJbKytSXSA9IFtdOyBDID0gMDsgY29udGludWU7IH1cblx0XHRcdGlmIChSIDwgMCkgY29udGludWU7XG5cdFx0XHR2YXIgbWV0YWRhdGEgPSByZWNvcmRzW3JpXS50cmltKCkuc3BsaXQoXCIsXCIpO1xuXHRcdFx0dmFyIHR5cGUgPSBtZXRhZGF0YVswXSwgdmFsdWUgPSBtZXRhZGF0YVsxXTtcblx0XHRcdCsrcmk7XG5cdFx0XHR2YXIgZGF0YSA9IHJlY29yZHNbcmldIHx8IFwiXCI7XG5cdFx0XHR3aGlsZSgoKGRhdGEubWF0Y2goL1tcIl0vZyl8fFtdKS5sZW5ndGggJiAxKSAmJiByaSA8IHJlY29yZHMubGVuZ3RoIC0gMSkgZGF0YSArPSBcIlxcblwiICsgcmVjb3Jkc1srK3JpXTtcblx0XHRcdGRhdGEgPSBkYXRhLnRyaW0oKTtcblx0XHRcdHN3aXRjaCAoK3R5cGUpIHtcblx0XHRcdFx0Y2FzZSAtMTpcblx0XHRcdFx0XHRpZiAoZGF0YSA9PT0gJ0JPVCcpIHsgYXJyWysrUl0gPSBbXTsgQyA9IDA7IGNvbnRpbnVlOyB9XG5cdFx0XHRcdFx0ZWxzZSBpZiAoZGF0YSAhPT0gJ0VPRCcpIHRocm93IG5ldyBFcnJvcihcIlVucmVjb2duaXplZCBESUYgc3BlY2lhbCBjb21tYW5kIFwiICsgZGF0YSk7XG5cdFx0XHRcdFx0YnJlYWs7XG5cdFx0XHRcdGNhc2UgMDpcblx0XHRcdFx0XHRpZihkYXRhID09PSAnVFJVRScpIGFycltSXVtDXSA9IHRydWU7XG5cdFx0XHRcdFx0ZWxzZSBpZihkYXRhID09PSAnRkFMU0UnKSBhcnJbUl1bQ10gPSBmYWxzZTtcblx0XHRcdFx0XHRlbHNlIGlmKCFpc05hTihmdXp6eW51bSh2YWx1ZSkpKSBhcnJbUl1bQ10gPSBmdXp6eW51bSh2YWx1ZSk7XG5cdFx0XHRcdFx0ZWxzZSBpZighaXNOYU4oZnV6enlkYXRlKHZhbHVlKS5nZXREYXRlKCkpKSBhcnJbUl1bQ10gPSBwYXJzZURhdGUodmFsdWUpO1xuXHRcdFx0XHRcdGVsc2UgYXJyW1JdW0NdID0gdmFsdWU7XG5cdFx0XHRcdFx0KytDOyBicmVhaztcblx0XHRcdFx0Y2FzZSAxOlxuXHRcdFx0XHRcdGRhdGEgPSBkYXRhLnNsaWNlKDEsZGF0YS5sZW5ndGgtMSk7XG5cdFx0XHRcdFx0ZGF0YSA9IGRhdGEucmVwbGFjZSgvXCJcIi9nLCAnXCInKTtcblx0XHRcdFx0XHRpZihESUZfWEwgJiYgZGF0YSAmJiBkYXRhLm1hdGNoKC9ePVwiLipcIiQvKSkgZGF0YSA9IGRhdGEuc2xpY2UoMiwgLTEpO1xuXHRcdFx0XHRcdGFycltSXVtDKytdID0gZGF0YSAhPT0gJycgPyBkYXRhIDogbnVsbDtcblx0XHRcdFx0XHRicmVhaztcblx0XHRcdH1cblx0XHRcdGlmIChkYXRhID09PSAnRU9EJykgYnJlYWs7XG5cdFx0fVxuXHRcdGlmKG9wdHMgJiYgb3B0cy5zaGVldFJvd3MpIGFyciA9IGFyci5zbGljZSgwLCBvcHRzLnNoZWV0Um93cyk7XG5cdFx0cmV0dXJuIGFycjtcblx0fVxuXG5cdGZ1bmN0aW9uIGRpZl90b19zaGVldChzdHIvKjpzdHJpbmcqLywgb3B0cykvKjpXb3Jrc2hlZXQqLyB7IHJldHVybiBhb2FfdG9fc2hlZXQoZGlmX3RvX2FvYShzdHIsIG9wdHMpLCBvcHRzKTsgfVxuXHRmdW5jdGlvbiBkaWZfdG9fd29ya2Jvb2soc3RyLyo6c3RyaW5nKi8sIG9wdHMpLyo6V29ya2Jvb2sqLyB7IHJldHVybiBzaGVldF90b193b3JrYm9vayhkaWZfdG9fc2hlZXQoc3RyLCBvcHRzKSwgb3B0cyk7IH1cblxuXHR2YXIgc2hlZXRfdG9fZGlmID0gLyojX19QVVJFX18qLyhmdW5jdGlvbigpIHtcblx0XHR2YXIgcHVzaF9maWVsZCA9IGZ1bmN0aW9uIHBmKG8vKjpBcnJheTxzdHJpbmc+Ki8sIHRvcGljLyo6c3RyaW5nKi8sIHYvKjpudW1iZXIqLywgbi8qOm51bWJlciovLCBzLyo6c3RyaW5nKi8pIHtcblx0XHRcdG8ucHVzaCh0b3BpYyk7XG5cdFx0XHRvLnB1c2godiArIFwiLFwiICsgbik7XG5cdFx0XHRvLnB1c2goJ1wiJyArIHMucmVwbGFjZSgvXCIvZywnXCJcIicpICsgJ1wiJyk7XG5cdFx0fTtcblx0XHR2YXIgcHVzaF92YWx1ZSA9IGZ1bmN0aW9uIHBvKG8vKjpBcnJheTxzdHJpbmc+Ki8sIHR5cGUvKjpudW1iZXIqLywgdi8qOmFueSovLCBzLyo6c3RyaW5nKi8pIHtcblx0XHRcdG8ucHVzaCh0eXBlICsgXCIsXCIgKyB2KTtcblx0XHRcdG8ucHVzaCh0eXBlID09IDEgPyAnXCInICsgcy5yZXBsYWNlKC9cIi9nLCdcIlwiJykgKyAnXCInIDogcyk7XG5cdFx0fTtcblx0XHRyZXR1cm4gZnVuY3Rpb24gc2hlZXRfdG9fZGlmKHdzLyo6V29ya3NoZWV0Ki8vKjo6LCBvcHRzOj9hbnkqLykvKjpzdHJpbmcqLyB7XG5cdFx0XHR2YXIgby8qOkFycmF5PHN0cmluZz4qLyA9IFtdO1xuXHRcdFx0dmFyIHIgPSBzYWZlX2RlY29kZV9yYW5nZSh3c1snIXJlZiddKSwgY2VsbC8qOkNlbGwqLztcblx0XHRcdHZhciBkZW5zZSA9IEFycmF5LmlzQXJyYXkod3MpO1xuXHRcdFx0cHVzaF9maWVsZChvLCBcIlRBQkxFXCIsIDAsIDEsIFwic2hlZXRqc1wiKTtcblx0XHRcdHB1c2hfZmllbGQobywgXCJWRUNUT1JTXCIsIDAsIHIuZS5yIC0gci5zLnIgKyAxLFwiXCIpO1xuXHRcdFx0cHVzaF9maWVsZChvLCBcIlRVUExFU1wiLCAwLCByLmUuYyAtIHIucy5jICsgMSxcIlwiKTtcblx0XHRcdHB1c2hfZmllbGQobywgXCJEQVRBXCIsIDAsIDAsXCJcIik7XG5cdFx0XHRmb3IodmFyIFIgPSByLnMucjsgUiA8PSByLmUucjsgKytSKSB7XG5cdFx0XHRcdHB1c2hfdmFsdWUobywgLTEsIDAsIFwiQk9UXCIpO1xuXHRcdFx0XHRmb3IodmFyIEMgPSByLnMuYzsgQyA8PSByLmUuYzsgKytDKSB7XG5cdFx0XHRcdFx0dmFyIGNvb3JkID0gZW5jb2RlX2NlbGwoe3I6UixjOkN9KTtcblx0XHRcdFx0XHRjZWxsID0gZGVuc2UgPyAod3NbUl18fFtdKVtDXSA6IHdzW2Nvb3JkXTtcblx0XHRcdFx0XHRpZighY2VsbCkgeyBwdXNoX3ZhbHVlKG8sIDEsIDAsIFwiXCIpOyBjb250aW51ZTt9XG5cdFx0XHRcdFx0c3dpdGNoKGNlbGwudCkge1xuXHRcdFx0XHRcdFx0Y2FzZSAnbic6XG5cdFx0XHRcdFx0XHRcdHZhciB2YWwgPSBESUZfWEwgPyBjZWxsLncgOiBjZWxsLnY7XG5cdFx0XHRcdFx0XHRcdGlmKCF2YWwgJiYgY2VsbC52ICE9IG51bGwpIHZhbCA9IGNlbGwudjtcblx0XHRcdFx0XHRcdFx0aWYodmFsID09IG51bGwpIHtcblx0XHRcdFx0XHRcdFx0XHRpZihESUZfWEwgJiYgY2VsbC5mICYmICFjZWxsLkYpIHB1c2hfdmFsdWUobywgMSwgMCwgXCI9XCIgKyBjZWxsLmYpO1xuXHRcdFx0XHRcdFx0XHRcdGVsc2UgcHVzaF92YWx1ZShvLCAxLCAwLCBcIlwiKTtcblx0XHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdFx0XHRlbHNlIHB1c2hfdmFsdWUobywgMCwgdmFsLCBcIlZcIik7XG5cdFx0XHRcdFx0XHRcdGJyZWFrO1xuXHRcdFx0XHRcdFx0Y2FzZSAnYic6XG5cdFx0XHRcdFx0XHRcdHB1c2hfdmFsdWUobywgMCwgY2VsbC52ID8gMSA6IDAsIGNlbGwudiA/IFwiVFJVRVwiIDogXCJGQUxTRVwiKTtcblx0XHRcdFx0XHRcdFx0YnJlYWs7XG5cdFx0XHRcdFx0XHRjYXNlICdzJzpcblx0XHRcdFx0XHRcdFx0cHVzaF92YWx1ZShvLCAxLCAwLCAoIURJRl9YTCB8fCBpc05hTihjZWxsLnYpKSA/IGNlbGwudiA6ICc9XCInICsgY2VsbC52ICsgJ1wiJyk7XG5cdFx0XHRcdFx0XHRcdGJyZWFrO1xuXHRcdFx0XHRcdFx0Y2FzZSAnZCc6XG5cdFx0XHRcdFx0XHRcdGlmKCFjZWxsLncpIGNlbGwudyA9IFNTRl9mb3JtYXQoY2VsbC56IHx8IHRhYmxlX2ZtdFsxNF0sIGRhdGVudW0ocGFyc2VEYXRlKGNlbGwudikpKTtcblx0XHRcdFx0XHRcdFx0aWYoRElGX1hMKSBwdXNoX3ZhbHVlKG8sIDAsIGNlbGwudywgXCJWXCIpO1xuXHRcdFx0XHRcdFx0XHRlbHNlIHB1c2hfdmFsdWUobywgMSwgMCwgY2VsbC53KTtcblx0XHRcdFx0XHRcdFx0YnJlYWs7XG5cdFx0XHRcdFx0XHRkZWZhdWx0OiBwdXNoX3ZhbHVlKG8sIDEsIDAsIFwiXCIpO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdFx0cHVzaF92YWx1ZShvLCAtMSwgMCwgXCJFT0RcIik7XG5cdFx0XHR2YXIgUlMgPSBcIlxcclxcblwiO1xuXHRcdFx0dmFyIG9vID0gby5qb2luKFJTKTtcblx0XHRcdC8vd2hpbGUoKG9vLmxlbmd0aCAmIDB4N0YpICE9IDApIG9vICs9IFwiXFwwXCI7XG5cdFx0XHRyZXR1cm4gb287XG5cdFx0fTtcblx0fSkoKTtcblx0cmV0dXJuIHtcblx0XHR0b193b3JrYm9vazogZGlmX3RvX3dvcmtib29rLFxuXHRcdHRvX3NoZWV0OiBkaWZfdG9fc2hlZXQsXG5cdFx0ZnJvbV9zaGVldDogc2hlZXRfdG9fZGlmXG5cdH07XG59KSgpO1xuXG52YXIgRVRIID0gLyojX19QVVJFX18qLyhmdW5jdGlvbigpIHtcblx0ZnVuY3Rpb24gZGVjb2RlKHMvKjpzdHJpbmcqLykvKjpzdHJpbmcqLyB7IHJldHVybiBzLnJlcGxhY2UoL1xcXFxiL2csXCJcXFxcXCIpLnJlcGxhY2UoL1xcXFxjL2csXCI6XCIpLnJlcGxhY2UoL1xcXFxuL2csXCJcXG5cIik7IH1cblx0ZnVuY3Rpb24gZW5jb2RlKHMvKjpzdHJpbmcqLykvKjpzdHJpbmcqLyB7IHJldHVybiBzLnJlcGxhY2UoL1xcXFwvZywgXCJcXFxcYlwiKS5yZXBsYWNlKC86L2csIFwiXFxcXGNcIikucmVwbGFjZSgvXFxuL2csXCJcXFxcblwiKTsgfVxuXG5cdGZ1bmN0aW9uIGV0aF90b19hb2Eoc3RyLyo6c3RyaW5nKi8sIG9wdHMpLyo6QU9BKi8ge1xuXHRcdHZhciByZWNvcmRzID0gc3RyLnNwbGl0KCdcXG4nKSwgUiA9IC0xLCBDID0gLTEsIHJpID0gMCwgYXJyLyo6QU9BKi8gPSBbXTtcblx0XHRmb3IgKDsgcmkgIT09IHJlY29yZHMubGVuZ3RoOyArK3JpKSB7XG5cdFx0XHR2YXIgcmVjb3JkID0gcmVjb3Jkc1tyaV0udHJpbSgpLnNwbGl0KFwiOlwiKTtcblx0XHRcdGlmKHJlY29yZFswXSAhPT0gJ2NlbGwnKSBjb250aW51ZTtcblx0XHRcdHZhciBhZGRyID0gZGVjb2RlX2NlbGwocmVjb3JkWzFdKTtcblx0XHRcdGlmKGFyci5sZW5ndGggPD0gYWRkci5yKSBmb3IoUiA9IGFyci5sZW5ndGg7IFIgPD0gYWRkci5yOyArK1IpIGlmKCFhcnJbUl0pIGFycltSXSA9IFtdO1xuXHRcdFx0UiA9IGFkZHIucjsgQyA9IGFkZHIuYztcblx0XHRcdHN3aXRjaChyZWNvcmRbMl0pIHtcblx0XHRcdFx0Y2FzZSAndCc6IGFycltSXVtDXSA9IGRlY29kZShyZWNvcmRbM10pOyBicmVhaztcblx0XHRcdFx0Y2FzZSAndic6IGFycltSXVtDXSA9ICtyZWNvcmRbM107IGJyZWFrO1xuXHRcdFx0XHRjYXNlICd2dGYnOiB2YXIgX2YgPSByZWNvcmRbcmVjb3JkLmxlbmd0aCAtIDFdO1xuXHRcdFx0XHRcdC8qIGZhbGxzIHRocm91Z2ggKi9cblx0XHRcdFx0Y2FzZSAndnRjJzpcblx0XHRcdFx0XHRzd2l0Y2gocmVjb3JkWzNdKSB7XG5cdFx0XHRcdFx0XHRjYXNlICdubCc6IGFycltSXVtDXSA9ICtyZWNvcmRbNF0gPyB0cnVlIDogZmFsc2U7IGJyZWFrO1xuXHRcdFx0XHRcdFx0ZGVmYXVsdDogYXJyW1JdW0NdID0gK3JlY29yZFs0XTsgYnJlYWs7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHRcdGlmKHJlY29yZFsyXSA9PSAndnRmJykgYXJyW1JdW0NdID0gW2FycltSXVtDXSwgX2ZdO1xuXHRcdFx0fVxuXHRcdH1cblx0XHRpZihvcHRzICYmIG9wdHMuc2hlZXRSb3dzKSBhcnIgPSBhcnIuc2xpY2UoMCwgb3B0cy5zaGVldFJvd3MpO1xuXHRcdHJldHVybiBhcnI7XG5cdH1cblxuXHRmdW5jdGlvbiBldGhfdG9fc2hlZXQoZC8qOnN0cmluZyovLCBvcHRzKS8qOldvcmtzaGVldCovIHsgcmV0dXJuIGFvYV90b19zaGVldChldGhfdG9fYW9hKGQsIG9wdHMpLCBvcHRzKTsgfVxuXHRmdW5jdGlvbiBldGhfdG9fd29ya2Jvb2soZC8qOnN0cmluZyovLCBvcHRzKS8qOldvcmtib29rKi8geyByZXR1cm4gc2hlZXRfdG9fd29ya2Jvb2soZXRoX3RvX3NoZWV0KGQsIG9wdHMpLCBvcHRzKTsgfVxuXG5cdHZhciBoZWFkZXIgPSBbXG5cdFx0XCJzb2NpYWxjYWxjOnZlcnNpb246MS41XCIsXG5cdFx0XCJNSU1FLVZlcnNpb246IDEuMFwiLFxuXHRcdFwiQ29udGVudC1UeXBlOiBtdWx0aXBhcnQvbWl4ZWQ7IGJvdW5kYXJ5PVNvY2lhbENhbGNTcHJlYWRzaGVldENvbnRyb2xTYXZlXCJcblx0XS5qb2luKFwiXFxuXCIpO1xuXG5cdHZhciBzZXAgPSBbXG5cdFx0XCItLVNvY2lhbENhbGNTcHJlYWRzaGVldENvbnRyb2xTYXZlXCIsXG5cdFx0XCJDb250ZW50LXR5cGU6IHRleHQvcGxhaW47IGNoYXJzZXQ9VVRGLThcIlxuXHRdLmpvaW4oXCJcXG5cIikgKyBcIlxcblwiO1xuXG5cdC8qIFRPRE86IHRoZSBvdGhlciBwYXJ0cyAqL1xuXHR2YXIgbWV0YSA9IFtcblx0XHRcIiMgU29jaWFsQ2FsYyBTcHJlYWRzaGVldCBDb250cm9sIFNhdmVcIixcblx0XHRcInBhcnQ6c2hlZXRcIlxuXHRdLmpvaW4oXCJcXG5cIik7XG5cblx0dmFyIGVuZCA9IFwiLS1Tb2NpYWxDYWxjU3ByZWFkc2hlZXRDb250cm9sU2F2ZS0tXCI7XG5cblx0ZnVuY3Rpb24gc2hlZXRfdG9fZXRoX2RhdGEod3MvKjpXb3Jrc2hlZXQqLykvKjpzdHJpbmcqLyB7XG5cdFx0aWYoIXdzIHx8ICF3c1snIXJlZiddKSByZXR1cm4gXCJcIjtcblx0XHR2YXIgby8qOkFycmF5PHN0cmluZz4qLyA9IFtdLCBvby8qOkFycmF5PHN0cmluZz4qLyA9IFtdLCBjZWxsLCBjb29yZCA9IFwiXCI7XG5cdFx0dmFyIHIgPSBkZWNvZGVfcmFuZ2Uod3NbJyFyZWYnXSk7XG5cdFx0dmFyIGRlbnNlID0gQXJyYXkuaXNBcnJheSh3cyk7XG5cdFx0Zm9yKHZhciBSID0gci5zLnI7IFIgPD0gci5lLnI7ICsrUikge1xuXHRcdFx0Zm9yKHZhciBDID0gci5zLmM7IEMgPD0gci5lLmM7ICsrQykge1xuXHRcdFx0XHRjb29yZCA9IGVuY29kZV9jZWxsKHtyOlIsYzpDfSk7XG5cdFx0XHRcdGNlbGwgPSBkZW5zZSA/ICh3c1tSXXx8W10pW0NdIDogd3NbY29vcmRdO1xuXHRcdFx0XHRpZighY2VsbCB8fCBjZWxsLnYgPT0gbnVsbCB8fCBjZWxsLnQgPT09ICd6JykgY29udGludWU7XG5cdFx0XHRcdG9vID0gW1wiY2VsbFwiLCBjb29yZCwgJ3QnXTtcblx0XHRcdFx0c3dpdGNoKGNlbGwudCkge1xuXHRcdFx0XHRcdGNhc2UgJ3MnOiBjYXNlICdzdHInOiBvby5wdXNoKGVuY29kZShjZWxsLnYpKTsgYnJlYWs7XG5cdFx0XHRcdFx0Y2FzZSAnbic6XG5cdFx0XHRcdFx0XHRpZighY2VsbC5mKSB7IG9vWzJdPSd2Jzsgb29bM109Y2VsbC52OyB9XG5cdFx0XHRcdFx0XHRlbHNlIHsgb29bMl09J3Z0Zic7IG9vWzNdPSduJzsgb29bNF09Y2VsbC52OyBvb1s1XT1lbmNvZGUoY2VsbC5mKTsgfVxuXHRcdFx0XHRcdFx0YnJlYWs7XG5cdFx0XHRcdFx0Y2FzZSAnYic6XG5cdFx0XHRcdFx0XHRvb1syXSA9ICd2dCcrKGNlbGwuZj8nZic6J2MnKTsgb29bM109J25sJzsgb29bNF09Y2VsbC52P1wiMVwiOlwiMFwiO1xuXHRcdFx0XHRcdFx0b29bNV0gPSBlbmNvZGUoY2VsbC5mfHwoY2VsbC52PydUUlVFJzonRkFMU0UnKSk7XG5cdFx0XHRcdFx0XHRicmVhaztcblx0XHRcdFx0XHRjYXNlICdkJzpcblx0XHRcdFx0XHRcdHZhciB0ID0gZGF0ZW51bShwYXJzZURhdGUoY2VsbC52KSk7XG5cdFx0XHRcdFx0XHRvb1syXSA9ICd2dGMnOyBvb1szXSA9ICduZCc7IG9vWzRdID0gXCJcIit0O1xuXHRcdFx0XHRcdFx0b29bNV0gPSBjZWxsLncgfHwgU1NGX2Zvcm1hdChjZWxsLnogfHwgdGFibGVfZm10WzE0XSwgdCk7XG5cdFx0XHRcdFx0XHRicmVhaztcblx0XHRcdFx0XHRjYXNlICdlJzogY29udGludWU7XG5cdFx0XHRcdH1cblx0XHRcdFx0by5wdXNoKG9vLmpvaW4oXCI6XCIpKTtcblx0XHRcdH1cblx0XHR9XG5cdFx0by5wdXNoKFwic2hlZXQ6YzpcIiArIChyLmUuYy1yLnMuYysxKSArIFwiOnI6XCIgKyAoci5lLnItci5zLnIrMSkgKyBcIjp0dmY6MVwiKTtcblx0XHRvLnB1c2goXCJ2YWx1ZWZvcm1hdDoxOnRleHQtd2lraVwiKTtcblx0XHQvL28ucHVzaChcImNvcGllZGZyb206XCIgKyB3c1snIXJlZiddKTsgLy8gY2xpcGJvYXJkIG9ubHlcblx0XHRyZXR1cm4gby5qb2luKFwiXFxuXCIpO1xuXHR9XG5cblx0ZnVuY3Rpb24gc2hlZXRfdG9fZXRoKHdzLyo6V29ya3NoZWV0Ki8vKjo6LCBvcHRzOj9hbnkqLykvKjpzdHJpbmcqLyB7XG5cdFx0cmV0dXJuIFtoZWFkZXIsIHNlcCwgbWV0YSwgc2VwLCBzaGVldF90b19ldGhfZGF0YSh3cyksIGVuZF0uam9pbihcIlxcblwiKTtcblx0XHQvLyByZXR1cm4gW1widmVyc2lvbjoxLjVcIiwgc2hlZXRfdG9fZXRoX2RhdGEod3MpXS5qb2luKFwiXFxuXCIpOyAvLyBjbGlwYm9hcmQgZm9ybVxuXHR9XG5cblx0cmV0dXJuIHtcblx0XHR0b193b3JrYm9vazogZXRoX3RvX3dvcmtib29rLFxuXHRcdHRvX3NoZWV0OiBldGhfdG9fc2hlZXQsXG5cdFx0ZnJvbV9zaGVldDogc2hlZXRfdG9fZXRoXG5cdH07XG59KSgpO1xuXG52YXIgUFJOID0gLyojX19QVVJFX18qLyhmdW5jdGlvbigpIHtcblx0ZnVuY3Rpb24gc2V0X3RleHRfYXJyKGRhdGEvKjpzdHJpbmcqLywgYXJyLyo6QU9BKi8sIFIvKjpudW1iZXIqLywgQy8qOm51bWJlciovLCBvLyo6YW55Ki8pIHtcblx0XHRpZihvLnJhdykgYXJyW1JdW0NdID0gZGF0YTtcblx0XHRlbHNlIGlmKGRhdGEgPT09IFwiXCIpey8qIGVtcHR5ICovfVxuXHRcdGVsc2UgaWYoZGF0YSA9PT0gJ1RSVUUnKSBhcnJbUl1bQ10gPSB0cnVlO1xuXHRcdGVsc2UgaWYoZGF0YSA9PT0gJ0ZBTFNFJykgYXJyW1JdW0NdID0gZmFsc2U7XG5cdFx0ZWxzZSBpZighaXNOYU4oZnV6enludW0oZGF0YSkpKSBhcnJbUl1bQ10gPSBmdXp6eW51bShkYXRhKTtcblx0XHRlbHNlIGlmKCFpc05hTihmdXp6eWRhdGUoZGF0YSkuZ2V0RGF0ZSgpKSkgYXJyW1JdW0NdID0gcGFyc2VEYXRlKGRhdGEpO1xuXHRcdGVsc2UgYXJyW1JdW0NdID0gZGF0YTtcblx0fVxuXG5cdGZ1bmN0aW9uIHBybl90b19hb2Ffc3RyKGYvKjpzdHJpbmcqLywgb3B0cykvKjpBT0EqLyB7XG5cdFx0dmFyIG8gPSBvcHRzIHx8IHt9O1xuXHRcdHZhciBhcnIvKjpBT0EqLyA9IChbXS8qOmFueSovKTtcblx0XHRpZighZiB8fCBmLmxlbmd0aCA9PT0gMCkgcmV0dXJuIGFycjtcblx0XHR2YXIgbGluZXMgPSBmLnNwbGl0KC9bXFxyXFxuXS8pO1xuXHRcdHZhciBMID0gbGluZXMubGVuZ3RoIC0gMTtcblx0XHR3aGlsZShMID49IDAgJiYgbGluZXNbTF0ubGVuZ3RoID09PSAwKSAtLUw7XG5cdFx0dmFyIHN0YXJ0ID0gMTAsIGlkeCA9IDA7XG5cdFx0dmFyIFIgPSAwO1xuXHRcdGZvcig7IFIgPD0gTDsgKytSKSB7XG5cdFx0XHRpZHggPSBsaW5lc1tSXS5pbmRleE9mKFwiIFwiKTtcblx0XHRcdGlmKGlkeCA9PSAtMSkgaWR4ID0gbGluZXNbUl0ubGVuZ3RoOyBlbHNlIGlkeCsrO1xuXHRcdFx0c3RhcnQgPSBNYXRoLm1heChzdGFydCwgaWR4KTtcblx0XHR9XG5cdFx0Zm9yKFIgPSAwOyBSIDw9IEw7ICsrUikge1xuXHRcdFx0YXJyW1JdID0gW107XG5cdFx0XHQvKiBUT0RPOiBjb25maXJtIHRoYXQgd2lkdGhzIGFyZSBhbHdheXMgMTAgKi9cblx0XHRcdHZhciBDID0gMDtcblx0XHRcdHNldF90ZXh0X2FycihsaW5lc1tSXS5zbGljZSgwLCBzdGFydCkudHJpbSgpLCBhcnIsIFIsIEMsIG8pO1xuXHRcdFx0Zm9yKEMgPSAxOyBDIDw9IChsaW5lc1tSXS5sZW5ndGggLSBzdGFydCkvMTAgKyAxOyArK0MpXG5cdFx0XHRcdHNldF90ZXh0X2FycihsaW5lc1tSXS5zbGljZShzdGFydCsoQy0xKSoxMCxzdGFydCtDKjEwKS50cmltKCksYXJyLFIsQyxvKTtcblx0XHR9XG5cdFx0aWYoby5zaGVldFJvd3MpIGFyciA9IGFyci5zbGljZSgwLCBvLnNoZWV0Um93cyk7XG5cdFx0cmV0dXJuIGFycjtcblx0fVxuXG5cdC8vIExpc3Qgb2YgYWNjZXB0ZWQgQ1NWIHNlcGFyYXRvcnNcblx0dmFyIGd1ZXNzX3NlcHMgPSB7XG5cdFx0Lyo6OlsqLzB4MkMvKjo6XSovOiAnLCcsXG5cdFx0Lyo6OlsqLzB4MDkvKjo6XSovOiBcIlxcdFwiLFxuXHRcdC8qOjpbKi8weDNCLyo6Ol0qLzogJzsnLFxuXHRcdC8qOjpbKi8weDdDLyo6Ol0qLzogJ3wnXG5cdH07XG5cblx0Ly8gQ1NWIHNlcGFyYXRvciB3ZWlnaHRzIHRvIGJlIHVzZWQgaW4gY2FzZSBvZiBlcXVhbCBudW1iZXJzXG5cdHZhciBndWVzc19zZXBfd2VpZ2h0cyA9IHtcblx0XHQvKjo6WyovMHgyQy8qOjpdKi86IDMsXG5cdFx0Lyo6OlsqLzB4MDkvKjo6XSovOiAyLFxuXHRcdC8qOjpbKi8weDNCLyo6Ol0qLzogMSxcblx0XHQvKjo6WyovMHg3Qy8qOjpdKi86IDBcblx0fTtcblxuXHRmdW5jdGlvbiBndWVzc19zZXAoc3RyKSB7XG5cdFx0dmFyIGNudCA9IHt9LCBpbnN0ciA9IGZhbHNlLCBlbmQgPSAwLCBjYyA9IDA7XG5cdFx0Zm9yKDtlbmQgPCBzdHIubGVuZ3RoOysrZW5kKSB7XG5cdFx0XHRpZigoY2M9c3RyLmNoYXJDb2RlQXQoZW5kKSkgPT0gMHgyMikgaW5zdHIgPSAhaW5zdHI7XG5cdFx0XHRlbHNlIGlmKCFpbnN0ciAmJiBjYyBpbiBndWVzc19zZXBzKSBjbnRbY2NdID0gKGNudFtjY118fDApKzE7XG5cdFx0fVxuXG5cdFx0Y2MgPSBbXTtcblx0XHRmb3IoZW5kIGluIGNudCkgaWYgKCBPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwoY250LCBlbmQpICkge1xuXHRcdFx0Y2MucHVzaChbIGNudFtlbmRdLCBlbmQgXSk7XG5cdFx0fVxuXG5cdFx0aWYgKCAhY2MubGVuZ3RoICkge1xuXHRcdFx0Y250ID0gZ3Vlc3Nfc2VwX3dlaWdodHM7XG5cdFx0XHRmb3IoZW5kIGluIGNudCkgaWYgKCBPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwoY250LCBlbmQpICkge1xuXHRcdFx0XHRjYy5wdXNoKFsgY250W2VuZF0sIGVuZCBdKTtcblx0XHRcdH1cblx0XHR9XG5cblx0XHRjYy5zb3J0KGZ1bmN0aW9uKGEsIGIpIHsgcmV0dXJuIGFbMF0gLSBiWzBdIHx8IGd1ZXNzX3NlcF93ZWlnaHRzW2FbMV1dIC0gZ3Vlc3Nfc2VwX3dlaWdodHNbYlsxXV07IH0pO1xuXG5cdFx0cmV0dXJuIGd1ZXNzX3NlcHNbY2MucG9wKClbMV1dIHx8IDB4MkM7XG5cdH1cblxuXHRmdW5jdGlvbiBkc3ZfdG9fc2hlZXRfc3RyKHN0ci8qOnN0cmluZyovLCBvcHRzKS8qOldvcmtzaGVldCovIHtcblx0XHR2YXIgbyA9IG9wdHMgfHwge307XG5cdFx0dmFyIHNlcCA9IFwiXCI7XG5cdFx0aWYoREVOU0UgIT0gbnVsbCAmJiBvLmRlbnNlID09IG51bGwpIG8uZGVuc2UgPSBERU5TRTtcblx0XHR2YXIgd3MvKjpXb3Jrc2hlZXQqLyA9IG8uZGVuc2UgPyAoW10vKjphbnkqLykgOiAoe30vKjphbnkqLyk7XG5cdFx0dmFyIHJhbmdlLyo6UmFuZ2UqLyA9ICh7czoge2M6MCwgcjowfSwgZToge2M6MCwgcjowfX0vKjphbnkqLyk7XG5cblx0XHRpZihzdHIuc2xpY2UoMCw0KSA9PSBcInNlcD1cIikge1xuXHRcdFx0Ly8gSWYgdGhlIGxpbmUgZW5kcyBpbiBcXHJcXG5cblx0XHRcdGlmKHN0ci5jaGFyQ29kZUF0KDUpID09IDEzICYmIHN0ci5jaGFyQ29kZUF0KDYpID09IDEwICkge1xuXHRcdFx0XHRzZXAgPSBzdHIuY2hhckF0KDQpOyBzdHIgPSBzdHIuc2xpY2UoNyk7XG5cdFx0XHR9XG5cdFx0XHQvLyBJZiBsaW5lIGVuZHMgaW4gXFxyIE9SIFxcblxuXHRcdFx0ZWxzZSBpZihzdHIuY2hhckNvZGVBdCg1KSA9PSAxMyB8fCBzdHIuY2hhckNvZGVBdCg1KSA9PSAxMCApIHtcblx0XHRcdFx0c2VwID0gc3RyLmNoYXJBdCg0KTsgc3RyID0gc3RyLnNsaWNlKDYpO1xuXHRcdFx0fVxuXHRcdFx0ZWxzZSBzZXAgPSBndWVzc19zZXAoc3RyLnNsaWNlKDAsMTAyNCkpO1xuXHRcdH1cblx0XHRlbHNlIGlmKG8gJiYgby5GUykgc2VwID0gby5GUztcblx0XHRlbHNlIHNlcCA9IGd1ZXNzX3NlcChzdHIuc2xpY2UoMCwxMDI0KSk7XG5cdFx0dmFyIFIgPSAwLCBDID0gMCwgdiA9IDA7XG5cdFx0dmFyIHN0YXJ0ID0gMCwgZW5kID0gMCwgc2VwY2MgPSBzZXAuY2hhckNvZGVBdCgwKSwgaW5zdHIgPSBmYWxzZSwgY2M9MCwgc3RhcnRjYz1zdHIuY2hhckNvZGVBdCgwKTtcblx0XHRzdHIgPSBzdHIucmVwbGFjZSgvXFxyXFxuL21nLCBcIlxcblwiKTtcblx0XHR2YXIgX3JlLyo6P1JlZ0V4cCovID0gby5kYXRlTkYgIT0gbnVsbCA/IGRhdGVORl9yZWdleChvLmRhdGVORikgOiBudWxsO1xuXHRcdGZ1bmN0aW9uIGZpbmlzaF9jZWxsKCkge1xuXHRcdFx0dmFyIHMgPSBzdHIuc2xpY2Uoc3RhcnQsIGVuZCk7XG5cdFx0XHR2YXIgY2VsbCA9ICh7fS8qOmFueSovKTtcblx0XHRcdGlmKHMuY2hhckF0KDApID09ICdcIicgJiYgcy5jaGFyQXQocy5sZW5ndGggLSAxKSA9PSAnXCInKSBzID0gcy5zbGljZSgxLC0xKS5yZXBsYWNlKC9cIlwiL2csJ1wiJyk7XG5cdFx0XHRpZihzLmxlbmd0aCA9PT0gMCkgY2VsbC50ID0gJ3onO1xuXHRcdFx0ZWxzZSBpZihvLnJhdykgeyBjZWxsLnQgPSAncyc7IGNlbGwudiA9IHM7IH1cblx0XHRcdGVsc2UgaWYocy50cmltKCkubGVuZ3RoID09PSAwKSB7IGNlbGwudCA9ICdzJzsgY2VsbC52ID0gczsgfVxuXHRcdFx0ZWxzZSBpZihzLmNoYXJDb2RlQXQoMCkgPT0gMHgzRCkge1xuXHRcdFx0XHRpZihzLmNoYXJDb2RlQXQoMSkgPT0gMHgyMiAmJiBzLmNoYXJDb2RlQXQocy5sZW5ndGggLSAxKSA9PSAweDIyKSB7IGNlbGwudCA9ICdzJzsgY2VsbC52ID0gcy5zbGljZSgyLC0xKS5yZXBsYWNlKC9cIlwiL2csJ1wiJyk7IH1cblx0XHRcdFx0ZWxzZSBpZihmdXp6eWZtbGEocykpIHsgY2VsbC50ID0gJ24nOyBjZWxsLmYgPSBzLnNsaWNlKDEpOyB9XG5cdFx0XHRcdGVsc2UgeyBjZWxsLnQgPSAncyc7IGNlbGwudiA9IHM7IH0gfVxuXHRcdFx0ZWxzZSBpZihzID09IFwiVFJVRVwiKSB7IGNlbGwudCA9ICdiJzsgY2VsbC52ID0gdHJ1ZTsgfVxuXHRcdFx0ZWxzZSBpZihzID09IFwiRkFMU0VcIikgeyBjZWxsLnQgPSAnYic7IGNlbGwudiA9IGZhbHNlOyB9XG5cdFx0XHRlbHNlIGlmKCFpc05hTih2ID0gZnV6enludW0ocykpKSB7IGNlbGwudCA9ICduJzsgaWYoby5jZWxsVGV4dCAhPT0gZmFsc2UpIGNlbGwudyA9IHM7IGNlbGwudiA9IHY7IH1cblx0XHRcdGVsc2UgaWYoIWlzTmFOKGZ1enp5ZGF0ZShzKS5nZXREYXRlKCkpIHx8IF9yZSAmJiBzLm1hdGNoKF9yZSkpIHtcblx0XHRcdFx0Y2VsbC56ID0gby5kYXRlTkYgfHwgdGFibGVfZm10WzE0XTtcblx0XHRcdFx0dmFyIGsgPSAwO1xuXHRcdFx0XHRpZihfcmUgJiYgcy5tYXRjaChfcmUpKXsgcz1kYXRlTkZfZml4KHMsIG8uZGF0ZU5GLCAocy5tYXRjaChfcmUpfHxbXSkpOyBrPTE7IH1cblx0XHRcdFx0aWYoby5jZWxsRGF0ZXMpIHsgY2VsbC50ID0gJ2QnOyBjZWxsLnYgPSBwYXJzZURhdGUocywgayk7IH1cblx0XHRcdFx0ZWxzZSB7IGNlbGwudCA9ICduJzsgY2VsbC52ID0gZGF0ZW51bShwYXJzZURhdGUocywgaykpOyB9XG5cdFx0XHRcdGlmKG8uY2VsbFRleHQgIT09IGZhbHNlKSBjZWxsLncgPSBTU0ZfZm9ybWF0KGNlbGwueiwgY2VsbC52IGluc3RhbmNlb2YgRGF0ZSA/IGRhdGVudW0oY2VsbC52KTpjZWxsLnYpO1xuXHRcdFx0XHRpZighby5jZWxsTkYpIGRlbGV0ZSBjZWxsLno7XG5cdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRjZWxsLnQgPSAncyc7XG5cdFx0XHRcdGNlbGwudiA9IHM7XG5cdFx0XHR9XG5cdFx0XHRpZihjZWxsLnQgPT0gJ3onKXt9XG5cdFx0XHRlbHNlIGlmKG8uZGVuc2UpIHsgaWYoIXdzW1JdKSB3c1tSXSA9IFtdOyB3c1tSXVtDXSA9IGNlbGw7IH1cblx0XHRcdGVsc2Ugd3NbZW5jb2RlX2NlbGwoe2M6QyxyOlJ9KV0gPSBjZWxsO1xuXHRcdFx0c3RhcnQgPSBlbmQrMTsgc3RhcnRjYyA9IHN0ci5jaGFyQ29kZUF0KHN0YXJ0KTtcblx0XHRcdGlmKHJhbmdlLmUuYyA8IEMpIHJhbmdlLmUuYyA9IEM7XG5cdFx0XHRpZihyYW5nZS5lLnIgPCBSKSByYW5nZS5lLnIgPSBSO1xuXHRcdFx0aWYoY2MgPT0gc2VwY2MpICsrQzsgZWxzZSB7IEMgPSAwOyArK1I7IGlmKG8uc2hlZXRSb3dzICYmIG8uc2hlZXRSb3dzIDw9IFIpIHJldHVybiB0cnVlOyB9XG5cdFx0fVxuXHRcdG91dGVyOiBmb3IoO2VuZCA8IHN0ci5sZW5ndGg7KytlbmQpIHN3aXRjaCgoY2M9c3RyLmNoYXJDb2RlQXQoZW5kKSkpIHtcblx0XHRcdGNhc2UgMHgyMjogaWYoc3RhcnRjYyA9PT0gMHgyMikgaW5zdHIgPSAhaW5zdHI7IGJyZWFrO1xuXHRcdFx0Y2FzZSBzZXBjYzogY2FzZSAweDBhOiBjYXNlIDB4MGQ6IGlmKCFpbnN0ciAmJiBmaW5pc2hfY2VsbCgpKSBicmVhayBvdXRlcjsgYnJlYWs7XG5cdFx0XHRkZWZhdWx0OiBicmVhaztcblx0XHR9XG5cdFx0aWYoZW5kIC0gc3RhcnQgPiAwKSBmaW5pc2hfY2VsbCgpO1xuXG5cdFx0d3NbJyFyZWYnXSA9IGVuY29kZV9yYW5nZShyYW5nZSk7XG5cdFx0cmV0dXJuIHdzO1xuXHR9XG5cblx0ZnVuY3Rpb24gcHJuX3RvX3NoZWV0X3N0cihzdHIvKjpzdHJpbmcqLywgb3B0cykvKjpXb3Jrc2hlZXQqLyB7XG5cdFx0aWYoIShvcHRzICYmIG9wdHMuUFJOKSkgcmV0dXJuIGRzdl90b19zaGVldF9zdHIoc3RyLCBvcHRzKTtcblx0XHRpZihvcHRzLkZTKSByZXR1cm4gZHN2X3RvX3NoZWV0X3N0cihzdHIsIG9wdHMpO1xuXHRcdGlmKHN0ci5zbGljZSgwLDQpID09IFwic2VwPVwiKSByZXR1cm4gZHN2X3RvX3NoZWV0X3N0cihzdHIsIG9wdHMpO1xuXHRcdGlmKHN0ci5pbmRleE9mKFwiXFx0XCIpID49IDAgfHwgc3RyLmluZGV4T2YoXCIsXCIpID49IDAgfHwgc3RyLmluZGV4T2YoXCI7XCIpID49IDApIHJldHVybiBkc3ZfdG9fc2hlZXRfc3RyKHN0ciwgb3B0cyk7XG5cdFx0cmV0dXJuIGFvYV90b19zaGVldChwcm5fdG9fYW9hX3N0cihzdHIsIG9wdHMpLCBvcHRzKTtcblx0fVxuXG5cdGZ1bmN0aW9uIHBybl90b19zaGVldChkLyo6UmF3RGF0YSovLCBvcHRzKS8qOldvcmtzaGVldCovIHtcblx0XHR2YXIgc3RyID0gXCJcIiwgYnl0ZXMgPSBvcHRzLnR5cGUgPT0gJ3N0cmluZycgPyBbMCwwLDAsMF0gOiBmaXJzdGJ5dGUoZCwgb3B0cyk7XG5cdFx0c3dpdGNoKG9wdHMudHlwZSkge1xuXHRcdFx0Y2FzZSAnYmFzZTY0Jzogc3RyID0gQmFzZTY0X2RlY29kZShkKTsgYnJlYWs7XG5cdFx0XHRjYXNlICdiaW5hcnknOiBzdHIgPSBkOyBicmVhaztcblx0XHRcdGNhc2UgJ2J1ZmZlcic6XG5cdFx0XHRcdGlmKG9wdHMuY29kZXBhZ2UgPT0gNjUwMDEpIHN0ciA9IGQudG9TdHJpbmcoJ3V0ZjgnKTsgLy8gVE9ETzogdGVzdCBpZiBidWZcblx0XHRcdFx0ZWxzZSBpZihvcHRzLmNvZGVwYWdlICYmIHR5cGVvZiAkY3B0YWJsZSAhPT0gJ3VuZGVmaW5lZCcpIHN0ciA9ICRjcHRhYmxlLnV0aWxzLmRlY29kZShvcHRzLmNvZGVwYWdlLCBkKTtcblx0XHRcdFx0ZWxzZSBzdHIgPSBoYXNfYnVmICYmIEJ1ZmZlci5pc0J1ZmZlcihkKSA/IGQudG9TdHJpbmcoJ2JpbmFyeScpIDogYTJzKGQpO1xuXHRcdFx0XHRicmVhaztcblx0XHRcdGNhc2UgJ2FycmF5Jzogc3RyID0gY2Myc3RyKGQpOyBicmVhaztcblx0XHRcdGNhc2UgJ3N0cmluZyc6IHN0ciA9IGQ7IGJyZWFrO1xuXHRcdFx0ZGVmYXVsdDogdGhyb3cgbmV3IEVycm9yKFwiVW5yZWNvZ25pemVkIHR5cGUgXCIgKyBvcHRzLnR5cGUpO1xuXHRcdH1cblx0XHRpZihieXRlc1swXSA9PSAweEVGICYmIGJ5dGVzWzFdID09IDB4QkIgJiYgYnl0ZXNbMl0gPT0gMHhCRikgc3RyID0gdXRmOHJlYWQoc3RyLnNsaWNlKDMpKTtcblx0XHRlbHNlIGlmKG9wdHMudHlwZSAhPSAnc3RyaW5nJyAmJiBvcHRzLnR5cGUgIT0gJ2J1ZmZlcicgJiYgb3B0cy5jb2RlcGFnZSA9PSA2NTAwMSkgc3RyID0gdXRmOHJlYWQoc3RyKTtcblx0XHRlbHNlIGlmKChvcHRzLnR5cGUgPT0gJ2JpbmFyeScpICYmIHR5cGVvZiAkY3B0YWJsZSAhPT0gJ3VuZGVmaW5lZCcgJiYgb3B0cy5jb2RlcGFnZSkgIHN0ciA9ICRjcHRhYmxlLnV0aWxzLmRlY29kZShvcHRzLmNvZGVwYWdlLCAkY3B0YWJsZS51dGlscy5lbmNvZGUoMjg1OTEsc3RyKSk7XG5cdFx0aWYoc3RyLnNsaWNlKDAsMTkpID09IFwic29jaWFsY2FsYzp2ZXJzaW9uOlwiKSByZXR1cm4gRVRILnRvX3NoZWV0KG9wdHMudHlwZSA9PSAnc3RyaW5nJyA/IHN0ciA6IHV0ZjhyZWFkKHN0ciksIG9wdHMpO1xuXHRcdHJldHVybiBwcm5fdG9fc2hlZXRfc3RyKHN0ciwgb3B0cyk7XG5cdH1cblxuXHRmdW5jdGlvbiBwcm5fdG9fd29ya2Jvb2soZC8qOlJhd0RhdGEqLywgb3B0cykvKjpXb3JrYm9vayovIHsgcmV0dXJuIHNoZWV0X3RvX3dvcmtib29rKHBybl90b19zaGVldChkLCBvcHRzKSwgb3B0cyk7IH1cblxuXHRmdW5jdGlvbiBzaGVldF90b19wcm4od3MvKjpXb3Jrc2hlZXQqLy8qOjosIG9wdHM6P2FueSovKS8qOnN0cmluZyovIHtcblx0XHR2YXIgby8qOkFycmF5PHN0cmluZz4qLyA9IFtdO1xuXHRcdHZhciByID0gc2FmZV9kZWNvZGVfcmFuZ2Uod3NbJyFyZWYnXSksIGNlbGwvKjpDZWxsKi87XG5cdFx0dmFyIGRlbnNlID0gQXJyYXkuaXNBcnJheSh3cyk7XG5cdFx0Zm9yKHZhciBSID0gci5zLnI7IFIgPD0gci5lLnI7ICsrUikge1xuXHRcdFx0dmFyIG9vLyo6QXJyYXk8c3RyaW5nPiovID0gW107XG5cdFx0XHRmb3IodmFyIEMgPSByLnMuYzsgQyA8PSByLmUuYzsgKytDKSB7XG5cdFx0XHRcdHZhciBjb29yZCA9IGVuY29kZV9jZWxsKHtyOlIsYzpDfSk7XG5cdFx0XHRcdGNlbGwgPSBkZW5zZSA/ICh3c1tSXXx8W10pW0NdIDogd3NbY29vcmRdO1xuXHRcdFx0XHRpZighY2VsbCB8fCBjZWxsLnYgPT0gbnVsbCkgeyBvby5wdXNoKFwiICAgICAgICAgIFwiKTsgY29udGludWU7IH1cblx0XHRcdFx0dmFyIHcgPSAoY2VsbC53IHx8IChmb3JtYXRfY2VsbChjZWxsKSwgY2VsbC53KSB8fCBcIlwiKS5zbGljZSgwLDEwKTtcblx0XHRcdFx0d2hpbGUody5sZW5ndGggPCAxMCkgdyArPSBcIiBcIjtcblx0XHRcdFx0b28ucHVzaCh3ICsgKEMgPT09IDAgPyBcIiBcIiA6IFwiXCIpKTtcblx0XHRcdH1cblx0XHRcdG8ucHVzaChvby5qb2luKFwiXCIpKTtcblx0XHR9XG5cdFx0cmV0dXJuIG8uam9pbihcIlxcblwiKTtcblx0fVxuXG5cdHJldHVybiB7XG5cdFx0dG9fd29ya2Jvb2s6IHBybl90b193b3JrYm9vayxcblx0XHR0b19zaGVldDogcHJuX3RvX3NoZWV0LFxuXHRcdGZyb21fc2hlZXQ6IHNoZWV0X3RvX3ByblxuXHR9O1xufSkoKTtcblxuLyogRXhjZWwgZGVmYXVsdHMgdG8gU1lMSyBidXQgd2FybnMgaWYgZGF0YSBpcyBub3QgdmFsaWQgKi9cbmZ1bmN0aW9uIHJlYWRfd2JfSUQoZCwgb3B0cykge1xuXHR2YXIgbyA9IG9wdHMgfHwge30sIE9MRF9XVEYgPSAhIW8uV1RGOyBvLldURiA9IHRydWU7XG5cdHRyeSB7XG5cdFx0dmFyIG91dCA9IFNZTEsudG9fd29ya2Jvb2soZCwgbyk7XG5cdFx0by5XVEYgPSBPTERfV1RGO1xuXHRcdHJldHVybiBvdXQ7XG5cdH0gY2F0Y2goZSkge1xuXHRcdG8uV1RGID0gT0xEX1dURjtcblx0XHRpZighZS5tZXNzYWdlLm1hdGNoKC9TWUxLIGJhZCByZWNvcmQgSUQvKSAmJiBPTERfV1RGKSB0aHJvdyBlO1xuXHRcdHJldHVybiBQUk4udG9fd29ya2Jvb2soZCwgb3B0cyk7XG5cdH1cbn1cblxudmFyIFdLXyA9IC8qI19fUFVSRV9fKi8oZnVuY3Rpb24oKSB7XG5cdGZ1bmN0aW9uIGxvdHVzaG9wcGVyKGRhdGEsIGNiLyo6UmVjb3JkSG9wcGVyQ0IqLywgb3B0cy8qOmFueSovKSB7XG5cdFx0aWYoIWRhdGEpIHJldHVybjtcblx0XHRwcmVwX2Jsb2IoZGF0YSwgZGF0YS5sIHx8IDApO1xuXHRcdHZhciBFbnVtID0gb3B0cy5FbnVtIHx8IFdLMUVudW07XG5cdFx0d2hpbGUoZGF0YS5sIDwgZGF0YS5sZW5ndGgpIHtcblx0XHRcdHZhciBSVCA9IGRhdGEucmVhZF9zaGlmdCgyKTtcblx0XHRcdHZhciBSID0gRW51bVtSVF0gfHwgRW51bVsweEZGRkZdO1xuXHRcdFx0dmFyIGxlbmd0aCA9IGRhdGEucmVhZF9zaGlmdCgyKTtcblx0XHRcdHZhciB0Z3QgPSBkYXRhLmwgKyBsZW5ndGg7XG5cdFx0XHR2YXIgZCA9IFIuZiAmJiBSLmYoZGF0YSwgbGVuZ3RoLCBvcHRzKTtcblx0XHRcdGRhdGEubCA9IHRndDtcblx0XHRcdGlmKGNiKGQsIFIsIFJUKSkgcmV0dXJuO1xuXHRcdH1cblx0fVxuXG5cdGZ1bmN0aW9uIGxvdHVzX3RvX3dvcmtib29rKGQvKjpSYXdEYXRhKi8sIG9wdHMpIHtcblx0XHRzd2l0Y2gob3B0cy50eXBlKSB7XG5cdFx0XHRjYXNlICdiYXNlNjQnOiByZXR1cm4gbG90dXNfdG9fd29ya2Jvb2tfYnVmKHMyYShCYXNlNjRfZGVjb2RlKGQpKSwgb3B0cyk7XG5cdFx0XHRjYXNlICdiaW5hcnknOiByZXR1cm4gbG90dXNfdG9fd29ya2Jvb2tfYnVmKHMyYShkKSwgb3B0cyk7XG5cdFx0XHRjYXNlICdidWZmZXInOlxuXHRcdFx0Y2FzZSAnYXJyYXknOiByZXR1cm4gbG90dXNfdG9fd29ya2Jvb2tfYnVmKGQsIG9wdHMpO1xuXHRcdH1cblx0XHR0aHJvdyBcIlVuc3VwcG9ydGVkIHR5cGUgXCIgKyBvcHRzLnR5cGU7XG5cdH1cblxuXHRmdW5jdGlvbiBsb3R1c190b193b3JrYm9va19idWYoZCwgb3B0cykvKjpXb3JrYm9vayovIHtcblx0XHRpZighZCkgcmV0dXJuIGQ7XG5cdFx0dmFyIG8gPSBvcHRzIHx8IHt9O1xuXHRcdGlmKERFTlNFICE9IG51bGwgJiYgby5kZW5zZSA9PSBudWxsKSBvLmRlbnNlID0gREVOU0U7XG5cdFx0dmFyIHMvKjpXb3Jrc2hlZXQqLyA9ICgoby5kZW5zZSA/IFtdIDoge30pLyo6YW55Ki8pLCBuID0gXCJTaGVldDFcIiwgbmV4dF9uID0gXCJcIiwgc2lkeCA9IDA7XG5cdFx0dmFyIHNoZWV0cyA9IHt9LCBzbmFtZXMgPSBbXSwgcmVhbG5hbWVzID0gW107XG5cblx0XHR2YXIgcmVmZ3Vlc3MgPSB7czoge3I6MCwgYzowfSwgZToge3I6MCwgYzowfSB9O1xuXHRcdHZhciBzaGVldFJvd3MgPSBvLnNoZWV0Um93cyB8fCAwO1xuXG5cdFx0aWYoZFsyXSA9PSAweDAwKSB7XG5cdFx0XHRpZihkWzNdID09IDB4MDggfHwgZFszXSA9PSAweDA5KSB7XG5cdFx0XHRcdGlmKGQubGVuZ3RoID49IDE2ICYmIGRbMTRdID09IDB4MDUgJiYgZFsxNV0gPT09IDB4NmMpIHRocm93IG5ldyBFcnJvcihcIlVuc3VwcG9ydGVkIFdvcmtzIDMgZm9yIE1hYyBmaWxlXCIpO1xuXHRcdFx0fVxuXHRcdH1cblxuXHRcdGlmKGRbMl0gPT0gMHgwMikge1xuXHRcdFx0by5FbnVtID0gV0sxRW51bTtcblx0XHRcdGxvdHVzaG9wcGVyKGQsIGZ1bmN0aW9uKHZhbCwgUiwgUlQpIHsgc3dpdGNoKFJUKSB7XG5cdFx0XHRcdGNhc2UgMHgwMDogLyogQk9GICovXG5cdFx0XHRcdFx0by52ZXJzID0gdmFsO1xuXHRcdFx0XHRcdGlmKHZhbCA+PSAweDEwMDApIG8ucXBybyA9IHRydWU7XG5cdFx0XHRcdFx0YnJlYWs7XG5cdFx0XHRcdGNhc2UgMHgwNjogcmVmZ3Vlc3MgPSB2YWw7IGJyZWFrOyAvKiBSQU5HRSAqL1xuXHRcdFx0XHRjYXNlIDB4Q0M6IGlmKHZhbCkgbmV4dF9uID0gdmFsOyBicmVhazsgLyogU0hFRVROQU1FQ1MgKi9cblx0XHRcdFx0Y2FzZSAweERFOiBuZXh0X24gPSB2YWw7IGJyZWFrOyAvKiBTSEVFVE5BTUVMUCAqL1xuXHRcdFx0XHRjYXNlIDB4MEY6IC8qIExBQkVMICovXG5cdFx0XHRcdGNhc2UgMHgzMzogLyogU1RSSU5HICovXG5cdFx0XHRcdFx0aWYoIW8ucXBybykgdmFsWzFdLnYgPSB2YWxbMV0udi5zbGljZSgxKTtcblx0XHRcdFx0XHQvKiBmYWxscyB0aHJvdWdoICovXG5cdFx0XHRcdGNhc2UgMHgwRDogLyogSU5URUdFUiAqL1xuXHRcdFx0XHRjYXNlIDB4MEU6IC8qIE5VTUJFUiAqL1xuXHRcdFx0XHRjYXNlIDB4MTA6IC8qIEZPUk1VTEEgKi9cblx0XHRcdFx0XHQvKiBUT0RPOiBhY3R1YWwgdHJhbnNsYXRpb24gb2YgdGhlIGZvcm1hdCBjb2RlICovXG5cdFx0XHRcdFx0aWYoUlQgPT0gMHgwRSAmJiAodmFsWzJdICYgMHg3MCkgPT0gMHg3MCAmJiAodmFsWzJdICYgMHgwRikgPiAxICYmICh2YWxbMl0gJiAweDBGKSA8IDE1KSB7XG5cdFx0XHRcdFx0XHR2YWxbMV0ueiA9IG8uZGF0ZU5GIHx8IHRhYmxlX2ZtdFsxNF07XG5cdFx0XHRcdFx0XHRpZihvLmNlbGxEYXRlcykgeyB2YWxbMV0udCA9ICdkJzsgdmFsWzFdLnYgPSBudW1kYXRlKHZhbFsxXS52KTsgfVxuXHRcdFx0XHRcdH1cblxuXHRcdFx0XHRcdGlmKG8ucXBybykge1xuXHRcdFx0XHRcdFx0aWYodmFsWzNdID4gc2lkeCkge1xuXHRcdFx0XHRcdFx0XHRzW1wiIXJlZlwiXSA9IGVuY29kZV9yYW5nZShyZWZndWVzcyk7XG5cdFx0XHRcdFx0XHRcdHNoZWV0c1tuXSA9IHM7XG5cdFx0XHRcdFx0XHRcdHNuYW1lcy5wdXNoKG4pO1xuXHRcdFx0XHRcdFx0XHRzID0gKG8uZGVuc2UgPyBbXSA6IHt9KTtcblx0XHRcdFx0XHRcdFx0cmVmZ3Vlc3MgPSB7czoge3I6MCwgYzowfSwgZToge3I6MCwgYzowfSB9O1xuXHRcdFx0XHRcdFx0XHRzaWR4ID0gdmFsWzNdOyBuID0gbmV4dF9uIHx8IFwiU2hlZXRcIiArIChzaWR4ICsgMSk7IG5leHRfbiA9IFwiXCI7XG5cdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0fVxuXG5cdFx0XHRcdFx0dmFyIHRtcGNlbGwgPSBvLmRlbnNlID8gKHNbdmFsWzBdLnJdfHxbXSlbdmFsWzBdLmNdIDogc1tlbmNvZGVfY2VsbCh2YWxbMF0pXTtcblx0XHRcdFx0XHRpZih0bXBjZWxsKSB7XG5cdFx0XHRcdFx0XHR0bXBjZWxsLnQgPSB2YWxbMV0udDsgdG1wY2VsbC52ID0gdmFsWzFdLnY7XG5cdFx0XHRcdFx0XHRpZih2YWxbMV0ueiAhPSBudWxsKSB0bXBjZWxsLnogPSB2YWxbMV0uejtcblx0XHRcdFx0XHRcdGlmKHZhbFsxXS5mICE9IG51bGwpIHRtcGNlbGwuZiA9IHZhbFsxXS5mO1xuXHRcdFx0XHRcdFx0YnJlYWs7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHRcdGlmKG8uZGVuc2UpIHtcblx0XHRcdFx0XHRcdGlmKCFzW3ZhbFswXS5yXSkgc1t2YWxbMF0ucl0gPSBbXTtcblx0XHRcdFx0XHRcdHNbdmFsWzBdLnJdW3ZhbFswXS5jXSA9IHZhbFsxXTtcblx0XHRcdFx0XHR9IGVsc2Ugc1tlbmNvZGVfY2VsbCh2YWxbMF0pXSA9IHZhbFsxXTtcblx0XHRcdFx0XHRicmVhaztcblx0XHRcdFx0ZGVmYXVsdDpcblx0XHRcdH19LCBvKTtcblx0XHR9IGVsc2UgaWYoZFsyXSA9PSAweDFBIHx8IGRbMl0gPT0gMHgwRSkge1xuXHRcdFx0by5FbnVtID0gV0szRW51bTtcblx0XHRcdGlmKGRbMl0gPT0gMHgwRSkgeyBvLnFwcm8gPSB0cnVlOyBkLmwgPSAwOyB9XG5cdFx0XHRsb3R1c2hvcHBlcihkLCBmdW5jdGlvbih2YWwsIFIsIFJUKSB7IHN3aXRjaChSVCkge1xuXHRcdFx0XHRjYXNlIDB4Q0M6IG4gPSB2YWw7IGJyZWFrOyAvKiBTSEVFVE5BTUVDUyAqL1xuXHRcdFx0XHRjYXNlIDB4MTY6IC8qIExBQkVMMTYgKi9cblx0XHRcdFx0XHR2YWxbMV0udiA9IHZhbFsxXS52LnNsaWNlKDEpO1xuXHRcdFx0XHRcdC8qIGZhbGxzIHRocm91Z2ggKi9cblx0XHRcdFx0Y2FzZSAweDE3OiAvKiBOVU1CRVIxNyAqL1xuXHRcdFx0XHRjYXNlIDB4MTg6IC8qIE5VTUJFUjE4ICovXG5cdFx0XHRcdGNhc2UgMHgxOTogLyogRk9STVVMQTE5ICovXG5cdFx0XHRcdGNhc2UgMHgyNTogLyogTlVNQkVSMjUgKi9cblx0XHRcdFx0Y2FzZSAweDI3OiAvKiBOVU1CRVIyNyAqL1xuXHRcdFx0XHRjYXNlIDB4Mjg6IC8qIEZPUk1VTEEyOCAqL1xuXHRcdFx0XHRcdGlmKHZhbFszXSA+IHNpZHgpIHtcblx0XHRcdFx0XHRcdHNbXCIhcmVmXCJdID0gZW5jb2RlX3JhbmdlKHJlZmd1ZXNzKTtcblx0XHRcdFx0XHRcdHNoZWV0c1tuXSA9IHM7XG5cdFx0XHRcdFx0XHRzbmFtZXMucHVzaChuKTtcblx0XHRcdFx0XHRcdHMgPSAoby5kZW5zZSA/IFtdIDoge30pO1xuXHRcdFx0XHRcdFx0cmVmZ3Vlc3MgPSB7czoge3I6MCwgYzowfSwgZToge3I6MCwgYzowfSB9O1xuXHRcdFx0XHRcdFx0c2lkeCA9IHZhbFszXTsgbiA9IFwiU2hlZXRcIiArIChzaWR4ICsgMSk7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHRcdGlmKHNoZWV0Um93cyA+IDAgJiYgdmFsWzBdLnIgPj0gc2hlZXRSb3dzKSBicmVhaztcblx0XHRcdFx0XHRpZihvLmRlbnNlKSB7XG5cdFx0XHRcdFx0XHRpZighc1t2YWxbMF0ucl0pIHNbdmFsWzBdLnJdID0gW107XG5cdFx0XHRcdFx0XHRzW3ZhbFswXS5yXVt2YWxbMF0uY10gPSB2YWxbMV07XG5cdFx0XHRcdFx0fSBlbHNlIHNbZW5jb2RlX2NlbGwodmFsWzBdKV0gPSB2YWxbMV07XG5cdFx0XHRcdFx0aWYocmVmZ3Vlc3MuZS5jIDwgdmFsWzBdLmMpIHJlZmd1ZXNzLmUuYyA9IHZhbFswXS5jO1xuXHRcdFx0XHRcdGlmKHJlZmd1ZXNzLmUuciA8IHZhbFswXS5yKSByZWZndWVzcy5lLnIgPSB2YWxbMF0ucjtcblx0XHRcdFx0XHRicmVhaztcblx0XHRcdFx0Y2FzZSAweDFCOiAvKiBYRk9STUFUICovXG5cdFx0XHRcdFx0aWYodmFsWzB4MzZiMF0pIHJlYWxuYW1lc1t2YWxbMHgzNmIwXVswXV0gPSB2YWxbMHgzNmIwXVsxXTtcblx0XHRcdFx0XHRicmVhaztcblx0XHRcdFx0Y2FzZSAweDA2MDE6IC8qIFNIRUVUSU5GT1FQICovXG5cdFx0XHRcdFx0cmVhbG5hbWVzW3ZhbFswXV0gPSB2YWxbMV07IGlmKHZhbFswXSA9PSBzaWR4KSBuID0gdmFsWzFdOyBicmVhaztcblx0XHRcdFx0ZGVmYXVsdDogYnJlYWs7XG5cdFx0XHR9fSwgbyk7XG5cdFx0fSBlbHNlIHRocm93IG5ldyBFcnJvcihcIlVucmVjb2duaXplZCBMT1RVUyBCT0YgXCIgKyBkWzJdKTtcblx0XHRzW1wiIXJlZlwiXSA9IGVuY29kZV9yYW5nZShyZWZndWVzcyk7XG5cdFx0c2hlZXRzW25leHRfbiB8fCBuXSA9IHM7XG5cdFx0c25hbWVzLnB1c2gobmV4dF9uIHx8IG4pO1xuXHRcdGlmKCFyZWFsbmFtZXMubGVuZ3RoKSByZXR1cm4geyBTaGVldE5hbWVzOiBzbmFtZXMsIFNoZWV0czogc2hlZXRzIH07XG5cdFx0dmFyIG9zaGVldHMgPSB7fSwgcm5hbWVzID0gW107XG5cdFx0LyogVE9ETzogdmVyaWZ5IG5vIGNvbGxpc2lvbnMgKi9cblx0XHRmb3IodmFyIGkgPSAwOyBpIDwgcmVhbG5hbWVzLmxlbmd0aDsgKytpKSBpZihzaGVldHNbc25hbWVzW2ldXSkge1xuXHRcdFx0cm5hbWVzLnB1c2gocmVhbG5hbWVzW2ldIHx8IHNuYW1lc1tpXSk7XG5cdFx0XHRvc2hlZXRzW3JlYWxuYW1lc1tpXV0gPSBzaGVldHNbcmVhbG5hbWVzW2ldXSB8fCBzaGVldHNbc25hbWVzW2ldXTtcblx0XHR9IGVsc2Uge1xuXHRcdFx0cm5hbWVzLnB1c2gocmVhbG5hbWVzW2ldKTtcblx0XHRcdG9zaGVldHNbcmVhbG5hbWVzW2ldXSA9ICh7IFwiIXJlZlwiOiBcIkExXCIgfSk7XG5cdFx0fVxuXHRcdHJldHVybiB7IFNoZWV0TmFtZXM6IHJuYW1lcywgU2hlZXRzOiBvc2hlZXRzIH07XG5cdH1cblxuXHRmdW5jdGlvbiBzaGVldF90b193azEod3MvKjpXb3Jrc2hlZXQqLywgb3B0cy8qOldyaXRlT3B0cyovKSB7XG5cdFx0dmFyIG8gPSBvcHRzIHx8IHt9O1xuXHRcdGlmKCtvLmNvZGVwYWdlID49IDApIHNldF9jcCgrby5jb2RlcGFnZSk7XG5cdFx0aWYoby50eXBlID09IFwic3RyaW5nXCIpIHRocm93IG5ldyBFcnJvcihcIkNhbm5vdCB3cml0ZSBXSzEgdG8gSlMgc3RyaW5nXCIpO1xuXHRcdHZhciBiYSA9IGJ1Zl9hcnJheSgpO1xuXHRcdHZhciByYW5nZSA9IHNhZmVfZGVjb2RlX3JhbmdlKHdzW1wiIXJlZlwiXSk7XG5cdFx0dmFyIGRlbnNlID0gQXJyYXkuaXNBcnJheSh3cyk7XG5cdFx0dmFyIGNvbHMgPSBbXTtcblxuXHRcdHdyaXRlX2JpZmZfcmVjKGJhLCAweDAwLCB3cml0ZV9CT0ZfV0sxKDB4MDQwNikpO1xuXHRcdHdyaXRlX2JpZmZfcmVjKGJhLCAweDA2LCB3cml0ZV9SQU5HRShyYW5nZSkpO1xuXHRcdHZhciBtYXhfUiA9IE1hdGgubWluKHJhbmdlLmUuciwgODE5MSk7XG5cdFx0Zm9yKHZhciBSID0gcmFuZ2Uucy5yOyBSIDw9IG1heF9SOyArK1IpIHtcblx0XHRcdHZhciByciA9IGVuY29kZV9yb3coUik7XG5cdFx0XHRmb3IodmFyIEMgPSByYW5nZS5zLmM7IEMgPD0gcmFuZ2UuZS5jOyArK0MpIHtcblx0XHRcdFx0aWYoUiA9PT0gcmFuZ2Uucy5yKSBjb2xzW0NdID0gZW5jb2RlX2NvbChDKTtcblx0XHRcdFx0dmFyIHJlZiA9IGNvbHNbQ10gKyBycjtcblx0XHRcdFx0dmFyIGNlbGwgPSBkZW5zZSA/ICh3c1tSXXx8W10pW0NdIDogd3NbcmVmXTtcblx0XHRcdFx0aWYoIWNlbGwgfHwgY2VsbC50ID09IFwielwiKSBjb250aW51ZTtcblx0XHRcdFx0LyogVE9ETzogZm9ybXVsYSByZWNvcmRzICovXG5cdFx0XHRcdGlmKGNlbGwudCA9PSBcIm5cIikge1xuXHRcdFx0XHRcdGlmKChjZWxsLnZ8MCk9PWNlbGwudiAmJiBjZWxsLnYgPj0gLTMyNzY4ICYmIGNlbGwudiA8PSAzMjc2Nykgd3JpdGVfYmlmZl9yZWMoYmEsIDB4MGQsIHdyaXRlX0lOVEVHRVIoUiwgQywgY2VsbC52KSk7XG5cdFx0XHRcdFx0ZWxzZSB3cml0ZV9iaWZmX3JlYyhiYSwgMHgwZSwgd3JpdGVfTlVNQkVSKFIsIEMsIGNlbGwudikpO1xuXHRcdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRcdHZhciBzdHIgPSBmb3JtYXRfY2VsbChjZWxsKTtcblx0XHRcdFx0XHR3cml0ZV9iaWZmX3JlYyhiYSwgMHgwRiwgd3JpdGVfTEFCRUwoUiwgQywgc3RyLnNsaWNlKDAsIDIzOSkpKTtcblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdH1cblxuXHRcdHdyaXRlX2JpZmZfcmVjKGJhLCAweDAxKTtcblx0XHRyZXR1cm4gYmEuZW5kKCk7XG5cdH1cblxuXHRmdW5jdGlvbiBib29rX3RvX3drMyh3Yi8qOldvcmtib29rKi8sIG9wdHMvKjpXcml0ZU9wdHMqLykge1xuXHRcdHZhciBvID0gb3B0cyB8fCB7fTtcblx0XHRpZigrby5jb2RlcGFnZSA+PSAwKSBzZXRfY3AoK28uY29kZXBhZ2UpO1xuXHRcdGlmKG8udHlwZSA9PSBcInN0cmluZ1wiKSB0aHJvdyBuZXcgRXJyb3IoXCJDYW5ub3Qgd3JpdGUgV0szIHRvIEpTIHN0cmluZ1wiKTtcblx0XHR2YXIgYmEgPSBidWZfYXJyYXkoKTtcblxuXHRcdHdyaXRlX2JpZmZfcmVjKGJhLCAweDAwLCB3cml0ZV9CT0ZfV0szKHdiKSk7XG5cblx0XHRmb3IodmFyIGkgPSAwLCBjbnQgPSAwOyBpIDwgd2IuU2hlZXROYW1lcy5sZW5ndGg7ICsraSkgaWYoKHdiLlNoZWV0c1t3Yi5TaGVldE5hbWVzW2ldXSB8fCB7fSlbXCIhcmVmXCJdKSB3cml0ZV9iaWZmX3JlYyhiYSwgMHgxYiwgd3JpdGVfWEZPUk1BVF9TSEVFVE5BTUUod2IuU2hlZXROYW1lc1tpXSwgY250KyspKTtcblxuXHRcdHZhciB3c2lkeCA9IDA7XG5cdFx0Zm9yKGkgPSAwOyBpIDwgd2IuU2hlZXROYW1lcy5sZW5ndGg7ICsraSkge1xuXHRcdFx0dmFyIHdzID0gd2IuU2hlZXRzW3diLlNoZWV0TmFtZXNbaV1dO1xuXHRcdFx0aWYoIXdzIHx8ICF3c1tcIiFyZWZcIl0pIGNvbnRpbnVlO1xuXHRcdFx0dmFyIHJhbmdlID0gc2FmZV9kZWNvZGVfcmFuZ2Uod3NbXCIhcmVmXCJdKTtcblx0XHRcdHZhciBkZW5zZSA9IEFycmF5LmlzQXJyYXkod3MpO1xuXHRcdFx0dmFyIGNvbHMgPSBbXTtcblx0XHRcdHZhciBtYXhfUiA9IE1hdGgubWluKHJhbmdlLmUuciwgODE5MSk7XG5cdFx0XHRmb3IodmFyIFIgPSByYW5nZS5zLnI7IFIgPD0gbWF4X1I7ICsrUikge1xuXHRcdFx0XHR2YXIgcnIgPSBlbmNvZGVfcm93KFIpO1xuXHRcdFx0XHRmb3IodmFyIEMgPSByYW5nZS5zLmM7IEMgPD0gcmFuZ2UuZS5jOyArK0MpIHtcblx0XHRcdFx0XHRpZihSID09PSByYW5nZS5zLnIpIGNvbHNbQ10gPSBlbmNvZGVfY29sKEMpO1xuXHRcdFx0XHRcdHZhciByZWYgPSBjb2xzW0NdICsgcnI7XG5cdFx0XHRcdFx0dmFyIGNlbGwgPSBkZW5zZSA/ICh3c1tSXXx8W10pW0NdIDogd3NbcmVmXTtcblx0XHRcdFx0XHRpZighY2VsbCB8fCBjZWxsLnQgPT0gXCJ6XCIpIGNvbnRpbnVlO1xuXHRcdFx0XHRcdC8qIFRPRE86IEZPUk1VTEExOSBOVU1CRVIxOCByZWNvcmRzICovXG5cdFx0XHRcdFx0aWYoY2VsbC50ID09IFwiblwiKSB7XG5cdFx0XHRcdFx0XHR3cml0ZV9iaWZmX3JlYyhiYSwgMHgxNywgd3JpdGVfTlVNQkVSXzE3KFIsIEMsIHdzaWR4LCBjZWxsLnYpKTtcblx0XHRcdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRcdFx0dmFyIHN0ciA9IGZvcm1hdF9jZWxsKGNlbGwpO1xuXHRcdFx0XHRcdFx0LyogVE9ETzogbWF4IGxlbj8gKi9cblx0XHRcdFx0XHRcdHdyaXRlX2JpZmZfcmVjKGJhLCAweDE2LCB3cml0ZV9MQUJFTF8xNihSLCBDLCB3c2lkeCwgc3RyLnNsaWNlKDAsIDIzOSkpKTtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHRcdCsrd3NpZHg7XG5cdFx0fVxuXG5cdFx0d3JpdGVfYmlmZl9yZWMoYmEsIDB4MDEpO1xuXHRcdHJldHVybiBiYS5lbmQoKTtcblx0fVxuXG5cblx0ZnVuY3Rpb24gd3JpdGVfQk9GX1dLMSh2Lyo6bnVtYmVyKi8pIHtcblx0XHR2YXIgb3V0ID0gbmV3X2J1ZigyKTtcblx0XHRvdXQud3JpdGVfc2hpZnQoMiwgdik7XG5cdFx0cmV0dXJuIG91dDtcblx0fVxuXG5cdGZ1bmN0aW9uIHdyaXRlX0JPRl9XSzMod2IvKjpXb3JrYm9vayovKSB7XG5cdFx0dmFyIG91dCA9IG5ld19idWYoMjYpO1xuXHRcdG91dC53cml0ZV9zaGlmdCgyLCAweDEwMDApO1xuXHRcdG91dC53cml0ZV9zaGlmdCgyLCAweDAwMDQpO1xuXHRcdG91dC53cml0ZV9zaGlmdCg0LCAweDAwMDApO1xuXHRcdHZhciByb3dzID0gMCwgY29scyA9IDAsIHdzY250ID0gMDtcblx0XHRmb3IodmFyIGkgPSAwOyBpIDwgd2IuU2hlZXROYW1lcy5sZW5ndGg7ICsraSkge1xuXHRcdFx0dmFyIG5hbWUgPSB3Yi5TaGVldE5hbWVzW2ldO1xuXHRcdFx0dmFyIHdzID0gd2IuU2hlZXRzW25hbWVdO1xuXHRcdFx0aWYoIXdzIHx8ICF3c1tcIiFyZWZcIl0pIGNvbnRpbnVlO1xuXHRcdFx0Kyt3c2NudDtcblx0XHRcdHZhciByYW5nZSA9IGRlY29kZV9yYW5nZSh3c1tcIiFyZWZcIl0pO1xuXHRcdFx0aWYocm93cyA8IHJhbmdlLmUucikgcm93cyA9IHJhbmdlLmUucjtcblx0XHRcdGlmKGNvbHMgPCByYW5nZS5lLmMpIGNvbHMgPSByYW5nZS5lLmM7XG5cdFx0fVxuXHRcdGlmKHJvd3MgPiA4MTkxKSByb3dzID0gODE5MTtcblx0XHRvdXQud3JpdGVfc2hpZnQoMiwgcm93cyk7XG5cdFx0b3V0LndyaXRlX3NoaWZ0KDEsIHdzY250KTtcblx0XHRvdXQud3JpdGVfc2hpZnQoMSwgY29scyk7XG5cdFx0b3V0LndyaXRlX3NoaWZ0KDIsIDB4MDApO1xuXHRcdG91dC53cml0ZV9zaGlmdCgyLCAweDAwKTtcblx0XHRvdXQud3JpdGVfc2hpZnQoMSwgMHgwMSk7XG5cdFx0b3V0LndyaXRlX3NoaWZ0KDEsIDB4MDIpO1xuXHRcdG91dC53cml0ZV9zaGlmdCg0LCAwKTtcblx0XHRvdXQud3JpdGVfc2hpZnQoNCwgMCk7XG5cdFx0cmV0dXJuIG91dDtcblx0fVxuXG5cdGZ1bmN0aW9uIHBhcnNlX1JBTkdFKGJsb2IsIGxlbmd0aCwgb3B0cykge1xuXHRcdHZhciBvID0ge3M6e2M6MCxyOjB9LGU6e2M6MCxyOjB9fTtcblx0XHRpZihsZW5ndGggPT0gOCAmJiBvcHRzLnFwcm8pIHtcblx0XHRcdG8ucy5jID0gYmxvYi5yZWFkX3NoaWZ0KDEpO1xuXHRcdFx0YmxvYi5sKys7XG5cdFx0XHRvLnMuciA9IGJsb2IucmVhZF9zaGlmdCgyKTtcblx0XHRcdG8uZS5jID0gYmxvYi5yZWFkX3NoaWZ0KDEpO1xuXHRcdFx0YmxvYi5sKys7XG5cdFx0XHRvLmUuciA9IGJsb2IucmVhZF9zaGlmdCgyKTtcblx0XHRcdHJldHVybiBvO1xuXHRcdH1cblx0XHRvLnMuYyA9IGJsb2IucmVhZF9zaGlmdCgyKTtcblx0XHRvLnMuciA9IGJsb2IucmVhZF9zaGlmdCgyKTtcblx0XHRpZihsZW5ndGggPT0gMTIgJiYgb3B0cy5xcHJvKSBibG9iLmwgKz0gMjtcblx0XHRvLmUuYyA9IGJsb2IucmVhZF9zaGlmdCgyKTtcblx0XHRvLmUuciA9IGJsb2IucmVhZF9zaGlmdCgyKTtcblx0XHRpZihsZW5ndGggPT0gMTIgJiYgb3B0cy5xcHJvKSBibG9iLmwgKz0gMjtcblx0XHRpZihvLnMuYyA9PSAweEZGRkYpIG8ucy5jID0gby5lLmMgPSBvLnMuciA9IG8uZS5yID0gMDtcblx0XHRyZXR1cm4gbztcblx0fVxuXHRmdW5jdGlvbiB3cml0ZV9SQU5HRShyYW5nZSkge1xuXHRcdHZhciBvdXQgPSBuZXdfYnVmKDgpO1xuXHRcdG91dC53cml0ZV9zaGlmdCgyLCByYW5nZS5zLmMpO1xuXHRcdG91dC53cml0ZV9zaGlmdCgyLCByYW5nZS5zLnIpO1xuXHRcdG91dC53cml0ZV9zaGlmdCgyLCByYW5nZS5lLmMpO1xuXHRcdG91dC53cml0ZV9zaGlmdCgyLCByYW5nZS5lLnIpO1xuXHRcdHJldHVybiBvdXQ7XG5cdH1cblxuXHRmdW5jdGlvbiBwYXJzZV9jZWxsKGJsb2IsIGxlbmd0aCwgb3B0cykge1xuXHRcdHZhciBvID0gW3tjOjAscjowfSwge3Q6J24nLHY6MH0sIDAsIDBdO1xuXHRcdGlmKG9wdHMucXBybyAmJiBvcHRzLnZlcnMgIT0gMHg1MTIwKSB7XG5cdFx0XHRvWzBdLmMgPSBibG9iLnJlYWRfc2hpZnQoMSk7XG5cdFx0XHRvWzNdID0gYmxvYi5yZWFkX3NoaWZ0KDEpO1xuXHRcdFx0b1swXS5yID0gYmxvYi5yZWFkX3NoaWZ0KDIpO1xuXHRcdFx0YmxvYi5sKz0yO1xuXHRcdH0gZWxzZSB7XG5cdFx0XHRvWzJdID0gYmxvYi5yZWFkX3NoaWZ0KDEpO1xuXHRcdFx0b1swXS5jID0gYmxvYi5yZWFkX3NoaWZ0KDIpOyBvWzBdLnIgPSBibG9iLnJlYWRfc2hpZnQoMik7XG5cdFx0fVxuXHRcdHJldHVybiBvO1xuXHR9XG5cblx0ZnVuY3Rpb24gcGFyc2VfTEFCRUwoYmxvYiwgbGVuZ3RoLCBvcHRzKSB7XG5cdFx0dmFyIHRndCA9IGJsb2IubCArIGxlbmd0aDtcblx0XHR2YXIgbyA9IHBhcnNlX2NlbGwoYmxvYiwgbGVuZ3RoLCBvcHRzKTtcblx0XHRvWzFdLnQgPSAncyc7XG5cdFx0aWYob3B0cy52ZXJzID09IDB4NTEyMCkge1xuXHRcdFx0YmxvYi5sKys7XG5cdFx0XHR2YXIgbGVuID0gYmxvYi5yZWFkX3NoaWZ0KDEpO1xuXHRcdFx0b1sxXS52ID0gYmxvYi5yZWFkX3NoaWZ0KGxlbiwgJ3V0ZjgnKTtcblx0XHRcdHJldHVybiBvO1xuXHRcdH1cblx0XHRpZihvcHRzLnFwcm8pIGJsb2IubCsrO1xuXHRcdG9bMV0udiA9IGJsb2IucmVhZF9zaGlmdCh0Z3QgLSBibG9iLmwsICdjc3RyJyk7XG5cdFx0cmV0dXJuIG87XG5cdH1cblx0ZnVuY3Rpb24gd3JpdGVfTEFCRUwoUiwgQywgcykge1xuXHRcdC8qIFRPRE86IGVuY29kaW5nICovXG5cdFx0dmFyIG8gPSBuZXdfYnVmKDcgKyBzLmxlbmd0aCk7XG5cdFx0by53cml0ZV9zaGlmdCgxLCAweEZGKTtcblx0XHRvLndyaXRlX3NoaWZ0KDIsIEMpO1xuXHRcdG8ud3JpdGVfc2hpZnQoMiwgUik7XG5cdFx0by53cml0ZV9zaGlmdCgxLCAweDI3KTsgLy8gPz9cblx0XHRmb3IodmFyIGkgPSAwOyBpIDwgby5sZW5ndGg7ICsraSkge1xuXHRcdFx0dmFyIGNjID0gcy5jaGFyQ29kZUF0KGkpO1xuXHRcdFx0by53cml0ZV9zaGlmdCgxLCBjYyA+PSAweDgwID8gMHg1RiA6IGNjKTtcblx0XHR9XG5cdFx0by53cml0ZV9zaGlmdCgxLCAwKTtcblx0XHRyZXR1cm4gbztcblx0fVxuXG5cdGZ1bmN0aW9uIHBhcnNlX0lOVEVHRVIoYmxvYiwgbGVuZ3RoLCBvcHRzKSB7XG5cdFx0dmFyIG8gPSBwYXJzZV9jZWxsKGJsb2IsIGxlbmd0aCwgb3B0cyk7XG5cdFx0b1sxXS52ID0gYmxvYi5yZWFkX3NoaWZ0KDIsICdpJyk7XG5cdFx0cmV0dXJuIG87XG5cdH1cblx0ZnVuY3Rpb24gd3JpdGVfSU5URUdFUihSLCBDLCB2KSB7XG5cdFx0dmFyIG8gPSBuZXdfYnVmKDcpO1xuXHRcdG8ud3JpdGVfc2hpZnQoMSwgMHhGRik7XG5cdFx0by53cml0ZV9zaGlmdCgyLCBDKTtcblx0XHRvLndyaXRlX3NoaWZ0KDIsIFIpO1xuXHRcdG8ud3JpdGVfc2hpZnQoMiwgdiwgJ2knKTtcblx0XHRyZXR1cm4gbztcblx0fVxuXG5cdGZ1bmN0aW9uIHBhcnNlX05VTUJFUihibG9iLCBsZW5ndGgsIG9wdHMpIHtcblx0XHR2YXIgbyA9IHBhcnNlX2NlbGwoYmxvYiwgbGVuZ3RoLCBvcHRzKTtcblx0XHRvWzFdLnYgPSBibG9iLnJlYWRfc2hpZnQoOCwgJ2YnKTtcblx0XHRyZXR1cm4gbztcblx0fVxuXHRmdW5jdGlvbiB3cml0ZV9OVU1CRVIoUiwgQywgdikge1xuXHRcdHZhciBvID0gbmV3X2J1ZigxMyk7XG5cdFx0by53cml0ZV9zaGlmdCgxLCAweEZGKTtcblx0XHRvLndyaXRlX3NoaWZ0KDIsIEMpO1xuXHRcdG8ud3JpdGVfc2hpZnQoMiwgUik7XG5cdFx0by53cml0ZV9zaGlmdCg4LCB2LCAnZicpO1xuXHRcdHJldHVybiBvO1xuXHR9XG5cblx0ZnVuY3Rpb24gcGFyc2VfRk9STVVMQShibG9iLCBsZW5ndGgsIG9wdHMpIHtcblx0XHR2YXIgdGd0ID0gYmxvYi5sICsgbGVuZ3RoO1xuXHRcdHZhciBvID0gcGFyc2VfY2VsbChibG9iLCBsZW5ndGgsIG9wdHMpO1xuXHRcdC8qIFRPRE86IGZvcm11bGEgKi9cblx0XHRvWzFdLnYgPSBibG9iLnJlYWRfc2hpZnQoOCwgJ2YnKTtcblx0XHRpZihvcHRzLnFwcm8pIGJsb2IubCA9IHRndDtcblx0XHRlbHNlIHtcblx0XHRcdHZhciBmbGVuID0gYmxvYi5yZWFkX3NoaWZ0KDIpO1xuXHRcdFx0d2sxX2ZtbGFfdG9fY3NmKGJsb2Iuc2xpY2UoYmxvYi5sLCBibG9iLmwgKyBmbGVuKSwgbyk7XG5cdFx0XHRibG9iLmwgKz0gZmxlbjtcblx0XHR9XG5cdFx0cmV0dXJuIG87XG5cdH1cblxuXHRmdW5jdGlvbiB3azFfcGFyc2VfcmMoQiwgViwgY29sKSB7XG5cdFx0dmFyIHJlbCA9IFYgJiAweDgwMDA7XG5cdFx0ViAmPSB+MHg4MDAwO1xuXHRcdFYgPSAocmVsID8gQiA6IDApICsgKChWID49IDB4MjAwMCkgPyBWIC0gMHg0MDAwIDogVik7XG5cdFx0cmV0dXJuIChyZWwgPyBcIlwiIDogXCIkXCIpICsgKGNvbCA/IGVuY29kZV9jb2woVikgOiBlbmNvZGVfcm93KFYpKTtcblx0fVxuXHQvKiB2YXIgb3ByZWMgPSBbXG5cdFx0OCwgOCwgOCwgOCwgOCwgOCwgOCwgOCwgNiwgNCwgNCwgNSwgNSwgNywgMywgMyxcblx0XHQzLCAzLCAzLCAzLCAxLCAxLCAyLCA2LCA4LCA4LCA4LCA4LCA4LCA4LCA4LCA4XG5cdF07ICovXG5cdC8qIFRPRE86IGZsZXNoIG91dCAqL1xuXHR2YXIgRnVuY1RhYiA9IHtcblx0XHQweDMzOiBbXCJGQUxTRVwiLCAwXSxcblx0XHQweDM0OiBbXCJUUlVFXCIsIDBdLFxuXHRcdDB4NDY6IFtcIkxFTlwiLCAxXSxcblx0XHQweDUwOiBbXCJTVU1cIiwgNjldLFxuXHRcdDB4NTE6IFtcIkFWRVJBR0VBXCIsIDY5XSxcblx0XHQweDUyOiBbXCJDT1VOVEFcIiwgNjldLFxuXHRcdDB4NTM6IFtcIk1JTkFcIiwgNjldLFxuXHRcdDB4NTQ6IFtcIk1BWEFcIiwgNjldLFxuXHRcdDB4NkY6IFtcIlRcIiwgMV1cblx0fTtcblx0dmFyIEJpbk9wVGFiID0gW1xuXHRcdCAgXCJcIiwgICBcIlwiLCAgIFwiXCIsICAgXCJcIiwgICBcIlwiLCAgIFwiXCIsICAgXCJcIiwgICBcIlwiLCAvLyBlc2xpbnQtZGlzYWJsZS1saW5lIG5vLW1peGVkLXNwYWNlcy1hbmQtdGFic1xuXHRcdCAgXCJcIiwgIFwiK1wiLCAgXCItXCIsICBcIipcIiwgIFwiL1wiLCAgXCJeXCIsICBcIj1cIiwgXCI8PlwiLCAvLyBlc2xpbnQtZGlzYWJsZS1saW5lIG5vLW1peGVkLXNwYWNlcy1hbmQtdGFic1xuXHRcdFwiPD1cIiwgXCI+PVwiLCAgXCI8XCIsICBcIj5cIiwgICBcIlwiLCAgIFwiXCIsICAgXCJcIiwgICBcIlwiLCAvLyBlc2xpbnQtZGlzYWJsZS1saW5lIG5vLW1peGVkLXNwYWNlcy1hbmQtdGFic1xuXHRcdCBcIiZcIiwgICBcIlwiLCAgIFwiXCIsICAgXCJcIiwgICBcIlwiLCAgIFwiXCIsICAgXCJcIiwgICBcIlwiICAvLyBlc2xpbnQtZGlzYWJsZS1saW5lIG5vLW1peGVkLXNwYWNlcy1hbmQtdGFic1xuXHRdO1xuXG5cdGZ1bmN0aW9uIHdrMV9mbWxhX3RvX2NzZihibG9iLCBvKSB7XG5cdFx0cHJlcF9ibG9iKGJsb2IsIDApO1xuXHRcdHZhciBvdXQgPSBbXSwgYXJnYyA9IDAsIFIgPSBcIlwiLCBDID0gXCJcIiwgYXJnTCA9IFwiXCIsIGFyZ1IgPSBcIlwiO1xuXHRcdHdoaWxlKGJsb2IubCA8IGJsb2IubGVuZ3RoKSB7XG5cdFx0XHR2YXIgY2MgPSBibG9iW2Jsb2IubCsrXTtcblx0XHRcdHN3aXRjaChjYykge1xuXHRcdFx0XHRjYXNlIDB4MDA6IG91dC5wdXNoKGJsb2IucmVhZF9zaGlmdCg4LCAnZicpKTsgYnJlYWs7XG5cdFx0XHRcdGNhc2UgMHgwMToge1xuXHRcdFx0XHRcdEMgPSB3azFfcGFyc2VfcmMob1swXS5jLCBibG9iLnJlYWRfc2hpZnQoMiksIHRydWUpO1xuXHRcdFx0XHRcdFIgPSB3azFfcGFyc2VfcmMob1swXS5yLCBibG9iLnJlYWRfc2hpZnQoMiksIGZhbHNlKTtcblx0XHRcdFx0XHRvdXQucHVzaChDICsgUik7XG5cdFx0XHRcdH0gYnJlYWs7XG5cdFx0XHRcdGNhc2UgMHgwMjoge1xuXHRcdFx0XHRcdHZhciBjID0gd2sxX3BhcnNlX3JjKG9bMF0uYywgYmxvYi5yZWFkX3NoaWZ0KDIpLCB0cnVlKTtcblx0XHRcdFx0XHR2YXIgciA9IHdrMV9wYXJzZV9yYyhvWzBdLnIsIGJsb2IucmVhZF9zaGlmdCgyKSwgZmFsc2UpO1xuXHRcdFx0XHRcdEMgPSB3azFfcGFyc2VfcmMob1swXS5jLCBibG9iLnJlYWRfc2hpZnQoMiksIHRydWUpO1xuXHRcdFx0XHRcdFIgPSB3azFfcGFyc2VfcmMob1swXS5yLCBibG9iLnJlYWRfc2hpZnQoMiksIGZhbHNlKTtcblx0XHRcdFx0XHRvdXQucHVzaChjICsgciArIFwiOlwiICsgQyArIFIpO1xuXHRcdFx0XHR9IGJyZWFrO1xuXHRcdFx0XHRjYXNlIDB4MDM6XG5cdFx0XHRcdFx0aWYoYmxvYi5sIDwgYmxvYi5sZW5ndGgpIHsgY29uc29sZS5lcnJvcihcIldLMSBwcmVtYXR1cmUgZm9ybXVsYSBlbmRcIik7IHJldHVybjsgfVxuXHRcdFx0XHRcdGJyZWFrO1xuXHRcdFx0XHRjYXNlIDB4MDQ6IG91dC5wdXNoKFwiKFwiICsgb3V0LnBvcCgpICsgXCIpXCIpOyBicmVhaztcblx0XHRcdFx0Y2FzZSAweDA1OiBvdXQucHVzaChibG9iLnJlYWRfc2hpZnQoMikpOyBicmVhaztcblx0XHRcdFx0Y2FzZSAweDA2OiB7XG5cdFx0XHRcdFx0LyogVE9ETzogdGV4dCBlbmNvZGluZyAqL1xuXHRcdFx0XHRcdHZhciBaID0gXCJcIjsgd2hpbGUoKGNjID0gYmxvYltibG9iLmwrK10pKSBaICs9IFN0cmluZy5mcm9tQ2hhckNvZGUoY2MpO1xuXHRcdFx0XHRcdG91dC5wdXNoKCdcIicgKyBaLnJlcGxhY2UoL1wiL2csICdcIlwiJykgKyAnXCInKTtcblx0XHRcdFx0fSBicmVhaztcblxuXHRcdFx0XHRjYXNlIDB4MDg6IG91dC5wdXNoKFwiLVwiICsgb3V0LnBvcCgpKTsgYnJlYWs7XG5cdFx0XHRcdGNhc2UgMHgxNzogb3V0LnB1c2goXCIrXCIgKyBvdXQucG9wKCkpOyBicmVhaztcblx0XHRcdFx0Y2FzZSAweDE2OiBvdXQucHVzaChcIk5PVChcIiArIG91dC5wb3AoKSArIFwiKVwiKTsgYnJlYWs7XG5cblx0XHRcdFx0Y2FzZSAweDE0OiBjYXNlIDB4MTU6IHtcblx0XHRcdFx0XHRhcmdSID0gb3V0LnBvcCgpOyBhcmdMID0gb3V0LnBvcCgpO1xuXHRcdFx0XHRcdG91dC5wdXNoKFtcIkFORFwiLCBcIk9SXCJdW2NjIC0gMHgxNF0gKyBcIihcIiArIGFyZ0wgKyBcIixcIiArIGFyZ1IgKyBcIilcIik7XG5cdFx0XHRcdH0gYnJlYWs7XG5cblx0XHRcdFx0ZGVmYXVsdDpcblx0XHRcdFx0XHRpZihjYyA8IDB4MjAgJiYgQmluT3BUYWJbY2NdKSB7XG5cdFx0XHRcdFx0XHRhcmdSID0gb3V0LnBvcCgpOyBhcmdMID0gb3V0LnBvcCgpO1xuXHRcdFx0XHRcdFx0b3V0LnB1c2goYXJnTCArIEJpbk9wVGFiW2NjXSArIGFyZ1IpO1xuXHRcdFx0XHRcdH0gZWxzZSBpZihGdW5jVGFiW2NjXSkge1xuXHRcdFx0XHRcdFx0YXJnYyA9IEZ1bmNUYWJbY2NdWzFdO1xuXHRcdFx0XHRcdFx0aWYoYXJnYyA9PSA2OSkgYXJnYyA9IGJsb2JbYmxvYi5sKytdO1xuXHRcdFx0XHRcdFx0aWYoYXJnYyA+IG91dC5sZW5ndGgpIHsgY29uc29sZS5lcnJvcihcIldLMSBiYWQgZm9ybXVsYSBwYXJzZSAweFwiICsgY2MudG9TdHJpbmcoMTYpICsgXCI6fFwiICsgb3V0LmpvaW4oXCJ8XCIpICsgXCJ8XCIpOyByZXR1cm47IH1cblx0XHRcdFx0XHRcdHZhciBhcmdzID0gb3V0LnNsaWNlKC1hcmdjKTtcblx0XHRcdFx0XHRcdG91dC5sZW5ndGggLT0gYXJnYztcblx0XHRcdFx0XHRcdG91dC5wdXNoKEZ1bmNUYWJbY2NdWzBdICsgXCIoXCIgKyBhcmdzLmpvaW4oXCIsXCIpICsgXCIpXCIpO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0XHRlbHNlIGlmKGNjIDw9IDB4MDcpIHJldHVybiBjb25zb2xlLmVycm9yKFwiV0sxIGludmFsaWQgb3Bjb2RlIFwiICsgY2MudG9TdHJpbmcoMTYpKTtcblx0XHRcdFx0XHRlbHNlIGlmKGNjIDw9IDB4MTgpIHJldHVybiBjb25zb2xlLmVycm9yKFwiV0sxIHVuc3VwcG9ydGVkIG9wIFwiICsgY2MudG9TdHJpbmcoMTYpKTtcblx0XHRcdFx0XHRlbHNlIGlmKGNjIDw9IDB4MUUpIHJldHVybiBjb25zb2xlLmVycm9yKFwiV0sxIGludmFsaWQgb3Bjb2RlIFwiICsgY2MudG9TdHJpbmcoMTYpKTtcblx0XHRcdFx0XHRlbHNlIGlmKGNjIDw9IDB4NzMpIHJldHVybiBjb25zb2xlLmVycm9yKFwiV0sxIHVuc3VwcG9ydGVkIGZ1bmN0aW9uIG9wY29kZSBcIiArIGNjLnRvU3RyaW5nKDE2KSk7XG5cdFx0XHRcdFx0Ly8gcG9zc2libGUgZnV0dXJlIGZ1bmN0aW9ucyA/P1xuXHRcdFx0XHRcdGVsc2UgcmV0dXJuIGNvbnNvbGUuZXJyb3IoXCJXSzEgdW5yZWNvZ25pemVkIG9wY29kZSBcIiArIGNjLnRvU3RyaW5nKDE2KSk7XG5cdFx0XHR9XG5cdFx0fVxuXHRcdGlmKG91dC5sZW5ndGggPT0gMSkgb1sxXS5mID0gXCJcIiArIG91dFswXTtcblx0XHRlbHNlIGNvbnNvbGUuZXJyb3IoXCJXSzEgYmFkIGZvcm11bGEgcGFyc2UgfFwiICsgb3V0LmpvaW4oXCJ8XCIpICsgXCJ8XCIpO1xuXHR9XG5cblxuXHRmdW5jdGlvbiBwYXJzZV9jZWxsXzMoYmxvYi8qOjosIGxlbmd0aCovKSB7XG5cdFx0dmFyIG8gPSBbe2M6MCxyOjB9LCB7dDonbicsdjowfSwgMF07XG5cdFx0b1swXS5yID0gYmxvYi5yZWFkX3NoaWZ0KDIpOyBvWzNdID0gYmxvYltibG9iLmwrK107IG9bMF0uYyA9IGJsb2JbYmxvYi5sKytdO1xuXHRcdHJldHVybiBvO1xuXHR9XG5cblx0ZnVuY3Rpb24gcGFyc2VfTEFCRUxfMTYoYmxvYiwgbGVuZ3RoKSB7XG5cdFx0dmFyIG8gPSBwYXJzZV9jZWxsXzMoYmxvYiwgbGVuZ3RoKTtcblx0XHRvWzFdLnQgPSAncyc7XG5cdFx0b1sxXS52ID0gYmxvYi5yZWFkX3NoaWZ0KGxlbmd0aCAtIDQsICdjc3RyJyk7XG5cdFx0cmV0dXJuIG87XG5cdH1cblx0ZnVuY3Rpb24gd3JpdGVfTEFCRUxfMTYoUiwgQywgd3NpZHgsIHMpIHtcblx0XHQvKiBUT0RPOiBlbmNvZGluZyAqL1xuXHRcdHZhciBvID0gbmV3X2J1Zig2ICsgcy5sZW5ndGgpO1xuXHRcdG8ud3JpdGVfc2hpZnQoMiwgUik7XG5cdFx0by53cml0ZV9zaGlmdCgxLCB3c2lkeCk7XG5cdFx0by53cml0ZV9zaGlmdCgxLCBDKTtcblx0XHRvLndyaXRlX3NoaWZ0KDEsIDB4MjcpO1xuXHRcdGZvcih2YXIgaSA9IDA7IGkgPCBzLmxlbmd0aDsgKytpKSB7XG5cdFx0XHR2YXIgY2MgPSBzLmNoYXJDb2RlQXQoaSk7XG5cdFx0XHRvLndyaXRlX3NoaWZ0KDEsIGNjID49IDB4ODAgPyAweDVGIDogY2MpO1xuXHRcdH1cblx0XHRvLndyaXRlX3NoaWZ0KDEsIDApO1xuXHRcdHJldHVybiBvO1xuXHR9XG5cblx0ZnVuY3Rpb24gcGFyc2VfTlVNQkVSXzE4KGJsb2IsIGxlbmd0aCkge1xuXHRcdHZhciBvID0gcGFyc2VfY2VsbF8zKGJsb2IsIGxlbmd0aCk7XG5cdFx0b1sxXS52ID0gYmxvYi5yZWFkX3NoaWZ0KDIpO1xuXHRcdHZhciB2ID0gb1sxXS52ID4+IDE7XG5cdFx0aWYob1sxXS52ICYgMHgxKSB7XG5cdFx0XHRzd2l0Y2godiAmIDB4MDcpIHtcblx0XHRcdFx0Y2FzZSAwOiB2ID0gKHYgPj4gMykgKiA1MDAwOyBicmVhaztcblx0XHRcdFx0Y2FzZSAxOiB2ID0gKHYgPj4gMykgKiA1MDA7IGJyZWFrO1xuXHRcdFx0XHRjYXNlIDI6IHYgPSAodiA+PiAzKSAvIDIwOyBicmVhaztcblx0XHRcdFx0Y2FzZSAzOiB2ID0gKHYgPj4gMykgLyAyMDA7IGJyZWFrO1xuXHRcdFx0XHRjYXNlIDQ6IHYgPSAodiA+PiAzKSAvIDIwMDA7IGJyZWFrO1xuXHRcdFx0XHRjYXNlIDU6IHYgPSAodiA+PiAzKSAvIDIwMDAwOyBicmVhaztcblx0XHRcdFx0Y2FzZSA2OiB2ID0gKHYgPj4gMykgLyAxNjsgYnJlYWs7XG5cdFx0XHRcdGNhc2UgNzogdiA9ICh2ID4+IDMpIC8gNjQ7IGJyZWFrO1xuXHRcdFx0fVxuXHRcdH1cblx0XHRvWzFdLnYgPSB2O1xuXHRcdHJldHVybiBvO1xuXHR9XG5cblx0ZnVuY3Rpb24gcGFyc2VfTlVNQkVSXzE3KGJsb2IsIGxlbmd0aCkge1xuXHRcdHZhciBvID0gcGFyc2VfY2VsbF8zKGJsb2IsIGxlbmd0aCk7XG5cdFx0dmFyIHYxID0gYmxvYi5yZWFkX3NoaWZ0KDQpO1xuXHRcdHZhciB2MiA9IGJsb2IucmVhZF9zaGlmdCg0KTtcblx0XHR2YXIgZSA9IGJsb2IucmVhZF9zaGlmdCgyKTtcblx0XHRpZihlID09IDB4RkZGRikge1xuXHRcdFx0aWYodjEgPT09IDAgJiYgdjIgPT09IDB4QzAwMDAwMDApIHsgb1sxXS50ID0gXCJlXCI7IG9bMV0udiA9IDB4MEY7IH0gLy8gRVJSIC0+ICNWQUxVRSFcblx0XHRcdGVsc2UgaWYodjEgPT09IDAgJiYgdjIgPT09IDB4RDAwMDAwMDApIHsgb1sxXS50ID0gXCJlXCI7IG9bMV0udiA9IDB4MkE7IH0gLy8gTkEgLT4gI04vQVxuXHRcdFx0ZWxzZSBvWzFdLnYgPSAwO1xuXHRcdFx0cmV0dXJuIG87XG5cdFx0fVxuXHRcdHZhciBzID0gZSAmIDB4ODAwMDsgZSA9IChlJjB4N0ZGRikgLSAxNjQ0Njtcblx0XHRvWzFdLnYgPSAoMSAtIHMqMikgKiAodjIgKiBNYXRoLnBvdygyLCBlKzMyKSArIHYxICogTWF0aC5wb3coMiwgZSkpO1xuXHRcdHJldHVybiBvO1xuXHR9XG5cdGZ1bmN0aW9uIHdyaXRlX05VTUJFUl8xNyhSLCBDLCB3c2lkeCwgdikge1xuXHRcdHZhciBvID0gbmV3X2J1ZigxNCk7XG5cdFx0by53cml0ZV9zaGlmdCgyLCBSKTtcblx0XHRvLndyaXRlX3NoaWZ0KDEsIHdzaWR4KTtcblx0XHRvLndyaXRlX3NoaWZ0KDEsIEMpO1xuXHRcdGlmKHYgPT0gMCkge1xuXHRcdFx0by53cml0ZV9zaGlmdCg0LCAwKTtcblx0XHRcdG8ud3JpdGVfc2hpZnQoNCwgMCk7XG5cdFx0XHRvLndyaXRlX3NoaWZ0KDIsIDB4RkZGRik7XG5cdFx0XHRyZXR1cm4gbztcblx0XHR9XG5cdFx0dmFyIHMgPSAwLCBlID0gMCwgdjEgPSAwLCB2MiA9IDA7XG5cdFx0aWYodiA8IDApIHsgcyA9IDE7IHYgPSAtdjsgfVxuXHRcdGUgPSBNYXRoLmxvZzIodikgfCAwO1xuXHRcdHYgLz0gTWF0aC5wb3coMiwgZS0zMSk7XG5cdFx0djIgPSAodik+Pj4wO1xuXHRcdGlmKCh2MiYweDgwMDAwMDAwKSA9PSAwKSB7IHYvPTI7ICsrZTsgdjIgPSB2ID4+PiAwOyB9XG5cdFx0diAtPSB2Mjtcblx0XHR2MiB8PSAweDgwMDAwMDAwO1xuXHRcdHYyID4+Pj0gMDtcblx0XHR2ICo9IE1hdGgucG93KDIsIDMyKTtcblx0XHR2MSA9IHY+Pj4wO1xuXHRcdG8ud3JpdGVfc2hpZnQoNCwgdjEpO1xuXHRcdG8ud3JpdGVfc2hpZnQoNCwgdjIpO1xuXHRcdGUgKz0gMHgzRkZGICsgKHMgPyAweDgwMDAgOiAwKTtcblx0XHRvLndyaXRlX3NoaWZ0KDIsIGUpO1xuXHRcdHJldHVybiBvO1xuXHR9XG5cblx0ZnVuY3Rpb24gcGFyc2VfRk9STVVMQV8xOShibG9iLCBsZW5ndGgpIHtcblx0XHR2YXIgbyA9IHBhcnNlX05VTUJFUl8xNyhibG9iLCAxNCk7XG5cdFx0YmxvYi5sICs9IGxlbmd0aCAtIDE0OyAvKiBUT0RPOiBXSzMgZm9ybXVsYSAqL1xuXHRcdHJldHVybiBvO1xuXHR9XG5cblx0ZnVuY3Rpb24gcGFyc2VfTlVNQkVSXzI1KGJsb2IsIGxlbmd0aCkge1xuXHRcdHZhciBvID0gcGFyc2VfY2VsbF8zKGJsb2IsIGxlbmd0aCk7XG5cdFx0dmFyIHYxID0gYmxvYi5yZWFkX3NoaWZ0KDQpO1xuXHRcdG9bMV0udiA9IHYxID4+IDY7XG5cdFx0cmV0dXJuIG87XG5cdH1cblxuXHRmdW5jdGlvbiBwYXJzZV9OVU1CRVJfMjcoYmxvYiwgbGVuZ3RoKSB7XG5cdFx0dmFyIG8gPSBwYXJzZV9jZWxsXzMoYmxvYiwgbGVuZ3RoKTtcblx0XHR2YXIgdjEgPSBibG9iLnJlYWRfc2hpZnQoOCwnZicpO1xuXHRcdG9bMV0udiA9IHYxO1xuXHRcdHJldHVybiBvO1xuXHR9XG5cblx0ZnVuY3Rpb24gcGFyc2VfRk9STVVMQV8yOChibG9iLCBsZW5ndGgpIHtcblx0XHR2YXIgbyA9IHBhcnNlX05VTUJFUl8yNyhibG9iLCAxNCk7XG5cdFx0YmxvYi5sICs9IGxlbmd0aCAtIDEwOyAvKiBUT0RPOiBmb3JtdWxhICovXG5cdFx0cmV0dXJuIG87XG5cdH1cblxuXHRmdW5jdGlvbiBwYXJzZV9TSEVFVE5BTUVDUyhibG9iLCBsZW5ndGgpIHtcblx0XHRyZXR1cm4gYmxvYltibG9iLmwgKyBsZW5ndGggLSAxXSA9PSAwID8gYmxvYi5yZWFkX3NoaWZ0KGxlbmd0aCwgJ2NzdHInKSA6IFwiXCI7XG5cdH1cblxuXHRmdW5jdGlvbiBwYXJzZV9TSEVFVE5BTUVMUChibG9iLCBsZW5ndGgpIHtcblx0XHR2YXIgbGVuID0gYmxvYltibG9iLmwrK107XG5cdFx0aWYobGVuID4gbGVuZ3RoIC0gMSkgbGVuID0gbGVuZ3RoIC0gMTtcblx0XHR2YXIgbyA9IFwiXCI7IHdoaWxlKG8ubGVuZ3RoIDwgbGVuKSBvICs9IFN0cmluZy5mcm9tQ2hhckNvZGUoYmxvYltibG9iLmwrK10pO1xuXHRcdHJldHVybiBvO1xuXHR9XG5cblx0ZnVuY3Rpb24gcGFyc2VfU0hFRVRJTkZPUVAoYmxvYiwgbGVuZ3RoLCBvcHRzKSB7XG5cdFx0aWYoIW9wdHMucXBybyB8fCBsZW5ndGggPCAyMSkgcmV0dXJuO1xuXHRcdHZhciBpZCA9IGJsb2IucmVhZF9zaGlmdCgxKTtcblx0XHRibG9iLmwgKz0gMTc7XG5cdFx0YmxvYi5sICs9IDE7IC8vdmFyIGxlbiA9IGJsb2IucmVhZF9zaGlmdCgxKTtcblx0XHRibG9iLmwgKz0gMjtcblx0XHR2YXIgbm0gPSBibG9iLnJlYWRfc2hpZnQobGVuZ3RoIC0gMjEsICdjc3RyJyk7XG5cdFx0cmV0dXJuIFtpZCwgbm1dO1xuXHR9XG5cblx0ZnVuY3Rpb24gcGFyc2VfWEZPUk1BVChibG9iLCBsZW5ndGgpIHtcblx0XHR2YXIgbyA9IHt9LCB0Z3QgPSBibG9iLmwgKyBsZW5ndGg7XG5cdFx0d2hpbGUoYmxvYi5sIDwgdGd0KSB7XG5cdFx0XHR2YXIgZHQgPSBibG9iLnJlYWRfc2hpZnQoMik7XG5cdFx0XHRpZihkdCA9PSAweDM2YjApIHtcblx0XHRcdFx0b1tkdF0gPSBbMCwgXCJcIl07XG5cdFx0XHRcdG9bZHRdWzBdID0gYmxvYi5yZWFkX3NoaWZ0KDIpO1xuXHRcdFx0XHR3aGlsZShibG9iW2Jsb2IubF0pIHsgb1tkdF1bMV0gKz0gU3RyaW5nLmZyb21DaGFyQ29kZShibG9iW2Jsb2IubF0pOyBibG9iLmwrKzsgfSBibG9iLmwrKztcblx0XHRcdH1cblx0XHRcdC8vIFRPRE86IDB4M2E5OSA/P1xuXHRcdH1cblx0XHRyZXR1cm4gbztcblx0fVxuXHRmdW5jdGlvbiB3cml0ZV9YRk9STUFUX1NIRUVUTkFNRShuYW1lLCB3c2lkeCkge1xuXHRcdHZhciBvdXQgPSBuZXdfYnVmKDUgKyBuYW1lLmxlbmd0aCk7XG5cdFx0b3V0LndyaXRlX3NoaWZ0KDIsIDB4MzZiMCk7XG5cdFx0b3V0LndyaXRlX3NoaWZ0KDIsIHdzaWR4KTtcblx0XHRmb3IodmFyIGkgPSAwOyBpIDwgbmFtZS5sZW5ndGg7ICsraSkge1xuXHRcdFx0dmFyIGNjID0gbmFtZS5jaGFyQ29kZUF0KGkpO1xuXHRcdFx0b3V0W291dC5sKytdID0gY2MgPiAweDdGID8gMHg1RiA6IGNjO1xuXHRcdH1cblx0XHRvdXRbb3V0LmwrK10gPSAwO1xuXHRcdHJldHVybiBvdXQ7XG5cdH1cblxuXHR2YXIgV0sxRW51bSA9IHtcblx0XHQvKjo6WyovMHgwMDAwLyo6Ol0qLzogeyBuOlwiQk9GXCIsIGY6cGFyc2V1aW50MTYgfSxcblx0XHQvKjo6WyovMHgwMDAxLyo6Ol0qLzogeyBuOlwiRU9GXCIgfSxcblx0XHQvKjo6WyovMHgwMDAyLyo6Ol0qLzogeyBuOlwiQ0FMQ01PREVcIiB9LFxuXHRcdC8qOjpbKi8weDAwMDMvKjo6XSovOiB7IG46XCJDQUxDT1JERVJcIiB9LFxuXHRcdC8qOjpbKi8weDAwMDQvKjo6XSovOiB7IG46XCJTUExJVFwiIH0sXG5cdFx0Lyo6OlsqLzB4MDAwNS8qOjpdKi86IHsgbjpcIlNZTkNcIiB9LFxuXHRcdC8qOjpbKi8weDAwMDYvKjo6XSovOiB7IG46XCJSQU5HRVwiLCBmOnBhcnNlX1JBTkdFIH0sXG5cdFx0Lyo6OlsqLzB4MDAwNy8qOjpdKi86IHsgbjpcIldJTkRPVzFcIiB9LFxuXHRcdC8qOjpbKi8weDAwMDgvKjo6XSovOiB7IG46XCJDT0xXMVwiIH0sXG5cdFx0Lyo6OlsqLzB4MDAwOS8qOjpdKi86IHsgbjpcIldJTlRXT1wiIH0sXG5cdFx0Lyo6OlsqLzB4MDAwQS8qOjpdKi86IHsgbjpcIkNPTFcyXCIgfSxcblx0XHQvKjo6WyovMHgwMDBCLyo6Ol0qLzogeyBuOlwiTkFNRVwiIH0sXG5cdFx0Lyo6OlsqLzB4MDAwQy8qOjpdKi86IHsgbjpcIkJMQU5LXCIgfSxcblx0XHQvKjo6WyovMHgwMDBELyo6Ol0qLzogeyBuOlwiSU5URUdFUlwiLCBmOnBhcnNlX0lOVEVHRVIgfSxcblx0XHQvKjo6WyovMHgwMDBFLyo6Ol0qLzogeyBuOlwiTlVNQkVSXCIsIGY6cGFyc2VfTlVNQkVSIH0sXG5cdFx0Lyo6OlsqLzB4MDAwRi8qOjpdKi86IHsgbjpcIkxBQkVMXCIsIGY6cGFyc2VfTEFCRUwgfSxcblx0XHQvKjo6WyovMHgwMDEwLyo6Ol0qLzogeyBuOlwiRk9STVVMQVwiLCBmOnBhcnNlX0ZPUk1VTEEgfSxcblx0XHQvKjo6WyovMHgwMDE4Lyo6Ol0qLzogeyBuOlwiVEFCTEVcIiB9LFxuXHRcdC8qOjpbKi8weDAwMTkvKjo6XSovOiB7IG46XCJPUkFOR0VcIiB9LFxuXHRcdC8qOjpbKi8weDAwMUEvKjo6XSovOiB7IG46XCJQUkFOR0VcIiB9LFxuXHRcdC8qOjpbKi8weDAwMUIvKjo6XSovOiB7IG46XCJTUkFOR0VcIiB9LFxuXHRcdC8qOjpbKi8weDAwMUMvKjo6XSovOiB7IG46XCJGUkFOR0VcIiB9LFxuXHRcdC8qOjpbKi8weDAwMUQvKjo6XSovOiB7IG46XCJLUkFOR0UxXCIgfSxcblx0XHQvKjo6WyovMHgwMDIwLyo6Ol0qLzogeyBuOlwiSFJBTkdFXCIgfSxcblx0XHQvKjo6WyovMHgwMDIzLyo6Ol0qLzogeyBuOlwiS1JBTkdFMlwiIH0sXG5cdFx0Lyo6OlsqLzB4MDAyNC8qOjpdKi86IHsgbjpcIlBST1RFQ1wiIH0sXG5cdFx0Lyo6OlsqLzB4MDAyNS8qOjpdKi86IHsgbjpcIkZPT1RFUlwiIH0sXG5cdFx0Lyo6OlsqLzB4MDAyNi8qOjpdKi86IHsgbjpcIkhFQURFUlwiIH0sXG5cdFx0Lyo6OlsqLzB4MDAyNy8qOjpdKi86IHsgbjpcIlNFVFVQXCIgfSxcblx0XHQvKjo6WyovMHgwMDI4Lyo6Ol0qLzogeyBuOlwiTUFSR0lOU1wiIH0sXG5cdFx0Lyo6OlsqLzB4MDAyOS8qOjpdKi86IHsgbjpcIkxBQkVMRk1UXCIgfSxcblx0XHQvKjo6WyovMHgwMDJBLyo6Ol0qLzogeyBuOlwiVElUTEVTXCIgfSxcblx0XHQvKjo6WyovMHgwMDJCLyo6Ol0qLzogeyBuOlwiU0hFRVRKU1wiIH0sXG5cdFx0Lyo6OlsqLzB4MDAyRC8qOjpdKi86IHsgbjpcIkdSQVBIXCIgfSxcblx0XHQvKjo6WyovMHgwMDJFLyo6Ol0qLzogeyBuOlwiTkdSQVBIXCIgfSxcblx0XHQvKjo6WyovMHgwMDJGLyo6Ol0qLzogeyBuOlwiQ0FMQ0NPVU5UXCIgfSxcblx0XHQvKjo6WyovMHgwMDMwLyo6Ol0qLzogeyBuOlwiVU5GT1JNQVRURURcIiB9LFxuXHRcdC8qOjpbKi8weDAwMzEvKjo6XSovOiB7IG46XCJDVVJTT1JXMTJcIiB9LFxuXHRcdC8qOjpbKi8weDAwMzIvKjo6XSovOiB7IG46XCJXSU5ET1dcIiB9LFxuXHRcdC8qOjpbKi8weDAwMzMvKjo6XSovOiB7IG46XCJTVFJJTkdcIiwgZjpwYXJzZV9MQUJFTCB9LFxuXHRcdC8qOjpbKi8weDAwMzcvKjo6XSovOiB7IG46XCJQQVNTV09SRFwiIH0sXG5cdFx0Lyo6OlsqLzB4MDAzOC8qOjpdKi86IHsgbjpcIkxPQ0tFRFwiIH0sXG5cdFx0Lyo6OlsqLzB4MDAzQy8qOjpdKi86IHsgbjpcIlFVRVJZXCIgfSxcblx0XHQvKjo6WyovMHgwMDNELyo6Ol0qLzogeyBuOlwiUVVFUllOQU1FXCIgfSxcblx0XHQvKjo6WyovMHgwMDNFLyo6Ol0qLzogeyBuOlwiUFJJTlRcIiB9LFxuXHRcdC8qOjpbKi8weDAwM0YvKjo6XSovOiB7IG46XCJQUklOVE5BTUVcIiB9LFxuXHRcdC8qOjpbKi8weDAwNDAvKjo6XSovOiB7IG46XCJHUkFQSDJcIiB9LFxuXHRcdC8qOjpbKi8weDAwNDEvKjo6XSovOiB7IG46XCJHUkFQSE5BTUVcIiB9LFxuXHRcdC8qOjpbKi8weDAwNDIvKjo6XSovOiB7IG46XCJaT09NXCIgfSxcblx0XHQvKjo6WyovMHgwMDQzLyo6Ol0qLzogeyBuOlwiU1lNU1BMSVRcIiB9LFxuXHRcdC8qOjpbKi8weDAwNDQvKjo6XSovOiB7IG46XCJOU1JPV1NcIiB9LFxuXHRcdC8qOjpbKi8weDAwNDUvKjo6XSovOiB7IG46XCJOU0NPTFNcIiB9LFxuXHRcdC8qOjpbKi8weDAwNDYvKjo6XSovOiB7IG46XCJSVUxFUlwiIH0sXG5cdFx0Lyo6OlsqLzB4MDA0Ny8qOjpdKi86IHsgbjpcIk5OQU1FXCIgfSxcblx0XHQvKjo6WyovMHgwMDQ4Lyo6Ol0qLzogeyBuOlwiQUNPTU1cIiB9LFxuXHRcdC8qOjpbKi8weDAwNDkvKjo6XSovOiB7IG46XCJBTUFDUk9cIiB9LFxuXHRcdC8qOjpbKi8weDAwNEEvKjo6XSovOiB7IG46XCJQQVJTRVwiIH0sXG5cdFx0Lyo6OlsqLzB4MDA2Ni8qOjpdKi86IHsgbjpcIlBSQU5HRVM/P1wiIH0sXG5cdFx0Lyo6OlsqLzB4MDA2Ny8qOjpdKi86IHsgbjpcIlJSQU5HRVM/P1wiIH0sXG5cdFx0Lyo6OlsqLzB4MDA2OC8qOjpdKi86IHsgbjpcIkZOQU1FPz9cIiB9LFxuXHRcdC8qOjpbKi8weDAwNjkvKjo6XSovOiB7IG46XCJNUkFOR0VTPz9cIiB9LFxuXHRcdC8qOjpbKi8weDAwQ0MvKjo6XSovOiB7IG46XCJTSEVFVE5BTUVDU1wiLCBmOnBhcnNlX1NIRUVUTkFNRUNTIH0sXG5cdFx0Lyo6OlsqLzB4MDBERS8qOjpdKi86IHsgbjpcIlNIRUVUTkFNRUxQXCIsIGY6cGFyc2VfU0hFRVROQU1FTFAgfSxcblx0XHQvKjo6WyovMHhGRkZGLyo6Ol0qLzogeyBuOlwiXCIgfVxuXHR9O1xuXG5cdHZhciBXSzNFbnVtID0ge1xuXHRcdC8qOjpbKi8weDAwMDAvKjo6XSovOiB7IG46XCJCT0ZcIiB9LFxuXHRcdC8qOjpbKi8weDAwMDEvKjo6XSovOiB7IG46XCJFT0ZcIiB9LFxuXHRcdC8qOjpbKi8weDAwMDIvKjo6XSovOiB7IG46XCJQQVNTV09SRFwiIH0sXG5cdFx0Lyo6OlsqLzB4MDAwMy8qOjpdKi86IHsgbjpcIkNBTENTRVRcIiB9LFxuXHRcdC8qOjpbKi8weDAwMDQvKjo6XSovOiB7IG46XCJXSU5ET1dTRVRcIiB9LFxuXHRcdC8qOjpbKi8weDAwMDUvKjo6XSovOiB7IG46XCJTSEVFVENFTExQVFJcIiB9LFxuXHRcdC8qOjpbKi8weDAwMDYvKjo6XSovOiB7IG46XCJTSEVFVExBWU9VVFwiIH0sXG5cdFx0Lyo6OlsqLzB4MDAwNy8qOjpdKi86IHsgbjpcIkNPTFVNTldJRFRIXCIgfSxcblx0XHQvKjo6WyovMHgwMDA4Lyo6Ol0qLzogeyBuOlwiSElEREVOQ09MVU1OXCIgfSxcblx0XHQvKjo6WyovMHgwMDA5Lyo6Ol0qLzogeyBuOlwiVVNFUlJBTkdFXCIgfSxcblx0XHQvKjo6WyovMHgwMDBBLyo6Ol0qLzogeyBuOlwiU1lTVEVNUkFOR0VcIiB9LFxuXHRcdC8qOjpbKi8weDAwMEIvKjo6XSovOiB7IG46XCJaRVJPRk9SQ0VcIiB9LFxuXHRcdC8qOjpbKi8weDAwMEMvKjo6XSovOiB7IG46XCJTT1JUS0VZRElSXCIgfSxcblx0XHQvKjo6WyovMHgwMDBELyo6Ol0qLzogeyBuOlwiRklMRVNFQUxcIiB9LFxuXHRcdC8qOjpbKi8weDAwMEUvKjo6XSovOiB7IG46XCJEQVRBRklMTE5VTVNcIiB9LFxuXHRcdC8qOjpbKi8weDAwMEYvKjo6XSovOiB7IG46XCJQUklOVE1BSU5cIiB9LFxuXHRcdC8qOjpbKi8weDAwMTAvKjo6XSovOiB7IG46XCJQUklOVFNUUklOR1wiIH0sXG5cdFx0Lyo6OlsqLzB4MDAxMS8qOjpdKi86IHsgbjpcIkdSQVBITUFJTlwiIH0sXG5cdFx0Lyo6OlsqLzB4MDAxMi8qOjpdKi86IHsgbjpcIkdSQVBIU1RSSU5HXCIgfSxcblx0XHQvKjo6WyovMHgwMDEzLyo6Ol0qLzogeyBuOlwiPz9cIiB9LFxuXHRcdC8qOjpbKi8weDAwMTQvKjo6XSovOiB7IG46XCJFUlJDRUxMXCIgfSxcblx0XHQvKjo6WyovMHgwMDE1Lyo6Ol0qLzogeyBuOlwiTkFDRUxMXCIgfSxcblx0XHQvKjo6WyovMHgwMDE2Lyo6Ol0qLzogeyBuOlwiTEFCRUwxNlwiLCBmOnBhcnNlX0xBQkVMXzE2fSxcblx0XHQvKjo6WyovMHgwMDE3Lyo6Ol0qLzogeyBuOlwiTlVNQkVSMTdcIiwgZjpwYXJzZV9OVU1CRVJfMTcgfSxcblx0XHQvKjo6WyovMHgwMDE4Lyo6Ol0qLzogeyBuOlwiTlVNQkVSMThcIiwgZjpwYXJzZV9OVU1CRVJfMTggfSxcblx0XHQvKjo6WyovMHgwMDE5Lyo6Ol0qLzogeyBuOlwiRk9STVVMQTE5XCIsIGY6cGFyc2VfRk9STVVMQV8xOX0sXG5cdFx0Lyo6OlsqLzB4MDAxQS8qOjpdKi86IHsgbjpcIkZPUk1VTEExQVwiIH0sXG5cdFx0Lyo6OlsqLzB4MDAxQi8qOjpdKi86IHsgbjpcIlhGT1JNQVRcIiwgZjpwYXJzZV9YRk9STUFUIH0sXG5cdFx0Lyo6OlsqLzB4MDAxQy8qOjpdKi86IHsgbjpcIkRUTEFCRUxNSVNDXCIgfSxcblx0XHQvKjo6WyovMHgwMDFELyo6Ol0qLzogeyBuOlwiRFRMQUJFTENFTExcIiB9LFxuXHRcdC8qOjpbKi8weDAwMUUvKjo6XSovOiB7IG46XCJHUkFQSFdJTkRPV1wiIH0sXG5cdFx0Lyo6OlsqLzB4MDAxRi8qOjpdKi86IHsgbjpcIkNQQVwiIH0sXG5cdFx0Lyo6OlsqLzB4MDAyMC8qOjpdKi86IHsgbjpcIkxQTEFVVE9cIiB9LFxuXHRcdC8qOjpbKi8weDAwMjEvKjo6XSovOiB7IG46XCJRVUVSWVwiIH0sXG5cdFx0Lyo6OlsqLzB4MDAyMi8qOjpdKi86IHsgbjpcIkhJRERFTlNIRUVUXCIgfSxcblx0XHQvKjo6WyovMHgwMDIzLyo6Ol0qLzogeyBuOlwiPz9cIiB9LFxuXHRcdC8qOjpbKi8weDAwMjUvKjo6XSovOiB7IG46XCJOVU1CRVIyNVwiLCBmOnBhcnNlX05VTUJFUl8yNSB9LFxuXHRcdC8qOjpbKi8weDAwMjYvKjo6XSovOiB7IG46XCI/P1wiIH0sXG5cdFx0Lyo6OlsqLzB4MDAyNy8qOjpdKi86IHsgbjpcIk5VTUJFUjI3XCIsIGY6cGFyc2VfTlVNQkVSXzI3IH0sXG5cdFx0Lyo6OlsqLzB4MDAyOC8qOjpdKi86IHsgbjpcIkZPUk1VTEEyOFwiLCBmOnBhcnNlX0ZPUk1VTEFfMjggfSxcblx0XHQvKjo6WyovMHgwMDhFLyo6Ol0qLzogeyBuOlwiPz9cIiB9LFxuXHRcdC8qOjpbKi8weDAwOTMvKjo6XSovOiB7IG46XCI/P1wiIH0sXG5cdFx0Lyo6OlsqLzB4MDA5Ni8qOjpdKi86IHsgbjpcIj8/XCIgfSxcblx0XHQvKjo6WyovMHgwMDk3Lyo6Ol0qLzogeyBuOlwiPz9cIiB9LFxuXHRcdC8qOjpbKi8weDAwOTgvKjo6XSovOiB7IG46XCI/P1wiIH0sXG5cdFx0Lyo6OlsqLzB4MDA5OS8qOjpdKi86IHsgbjpcIj8/XCIgfSxcblx0XHQvKjo6WyovMHgwMDlBLyo6Ol0qLzogeyBuOlwiPz9cIiB9LFxuXHRcdC8qOjpbKi8weDAwOUIvKjo6XSovOiB7IG46XCI/P1wiIH0sXG5cdFx0Lyo6OlsqLzB4MDA5Qy8qOjpdKi86IHsgbjpcIj8/XCIgfSxcblx0XHQvKjo6WyovMHgwMEEzLyo6Ol0qLzogeyBuOlwiPz9cIiB9LFxuXHRcdC8qOjpbKi8weDAwQUUvKjo6XSovOiB7IG46XCI/P1wiIH0sXG5cdFx0Lyo6OlsqLzB4MDBBRi8qOjpdKi86IHsgbjpcIj8/XCIgfSxcblx0XHQvKjo6WyovMHgwMEIwLyo6Ol0qLzogeyBuOlwiPz9cIiB9LFxuXHRcdC8qOjpbKi8weDAwQjEvKjo6XSovOiB7IG46XCI/P1wiIH0sXG5cdFx0Lyo6OlsqLzB4MDBCOC8qOjpdKi86IHsgbjpcIj8/XCIgfSxcblx0XHQvKjo6WyovMHgwMEI5Lyo6Ol0qLzogeyBuOlwiPz9cIiB9LFxuXHRcdC8qOjpbKi8weDAwQkEvKjo6XSovOiB7IG46XCI/P1wiIH0sXG5cdFx0Lyo6OlsqLzB4MDBCQi8qOjpdKi86IHsgbjpcIj8/XCIgfSxcblx0XHQvKjo6WyovMHgwMEJDLyo6Ol0qLzogeyBuOlwiPz9cIiB9LFxuXHRcdC8qOjpbKi8weDAwQzMvKjo6XSovOiB7IG46XCI/P1wiIH0sXG5cdFx0Lyo6OlsqLzB4MDBDOS8qOjpdKi86IHsgbjpcIj8/XCIgfSxcblx0XHQvKjo6WyovMHgwMENDLyo6Ol0qLzogeyBuOlwiU0hFRVROQU1FQ1NcIiwgZjpwYXJzZV9TSEVFVE5BTUVDUyB9LFxuXHRcdC8qOjpbKi8weDAwQ0QvKjo6XSovOiB7IG46XCI/P1wiIH0sXG5cdFx0Lyo6OlsqLzB4MDBDRS8qOjpdKi86IHsgbjpcIj8/XCIgfSxcblx0XHQvKjo6WyovMHgwMENGLyo6Ol0qLzogeyBuOlwiPz9cIiB9LFxuXHRcdC8qOjpbKi8weDAwRDAvKjo6XSovOiB7IG46XCI/P1wiIH0sXG5cdFx0Lyo6OlsqLzB4MDEwMC8qOjpdKi86IHsgbjpcIj8/XCIgfSxcblx0XHQvKjo6WyovMHgwMTAzLyo6Ol0qLzogeyBuOlwiPz9cIiB9LFxuXHRcdC8qOjpbKi8weDAxMDQvKjo6XSovOiB7IG46XCI/P1wiIH0sXG5cdFx0Lyo6OlsqLzB4MDEwNS8qOjpdKi86IHsgbjpcIj8/XCIgfSxcblx0XHQvKjo6WyovMHgwMTA2Lyo6Ol0qLzogeyBuOlwiPz9cIiB9LFxuXHRcdC8qOjpbKi8weDAxMDcvKjo6XSovOiB7IG46XCI/P1wiIH0sXG5cdFx0Lyo6OlsqLzB4MDEwOS8qOjpdKi86IHsgbjpcIj8/XCIgfSxcblx0XHQvKjo6WyovMHgwMTBBLyo6Ol0qLzogeyBuOlwiPz9cIiB9LFxuXHRcdC8qOjpbKi8weDAxMEIvKjo6XSovOiB7IG46XCI/P1wiIH0sXG5cdFx0Lyo6OlsqLzB4MDEwQy8qOjpdKi86IHsgbjpcIj8/XCIgfSxcblx0XHQvKjo6WyovMHgwMTBFLyo6Ol0qLzogeyBuOlwiPz9cIiB9LFxuXHRcdC8qOjpbKi8weDAxMEYvKjo6XSovOiB7IG46XCI/P1wiIH0sXG5cdFx0Lyo6OlsqLzB4MDE4MC8qOjpdKi86IHsgbjpcIj8/XCIgfSxcblx0XHQvKjo6WyovMHgwMTg1Lyo6Ol0qLzogeyBuOlwiPz9cIiB9LFxuXHRcdC8qOjpbKi8weDAxODYvKjo6XSovOiB7IG46XCI/P1wiIH0sXG5cdFx0Lyo6OlsqLzB4MDE4OS8qOjpdKi86IHsgbjpcIj8/XCIgfSxcblx0XHQvKjo6WyovMHgwMThDLyo6Ol0qLzogeyBuOlwiPz9cIiB9LFxuXHRcdC8qOjpbKi8weDAyMDAvKjo6XSovOiB7IG46XCI/P1wiIH0sXG5cdFx0Lyo6OlsqLzB4MDIwMi8qOjpdKi86IHsgbjpcIj8/XCIgfSxcblx0XHQvKjo6WyovMHgwMjAxLyo6Ol0qLzogeyBuOlwiPz9cIiB9LFxuXHRcdC8qOjpbKi8weDAyMDQvKjo6XSovOiB7IG46XCI/P1wiIH0sXG5cdFx0Lyo6OlsqLzB4MDIwNS8qOjpdKi86IHsgbjpcIj8/XCIgfSxcblx0XHQvKjo6WyovMHgwMjgwLyo6Ol0qLzogeyBuOlwiPz9cIiB9LFxuXHRcdC8qOjpbKi8weDAyODEvKjo6XSovOiB7IG46XCI/P1wiIH0sXG5cdFx0Lyo6OlsqLzB4MDI4Mi8qOjpdKi86IHsgbjpcIj8/XCIgfSxcblx0XHQvKjo6WyovMHgwMjgzLyo6Ol0qLzogeyBuOlwiPz9cIiB9LFxuXHRcdC8qOjpbKi8weDAyODQvKjo6XSovOiB7IG46XCI/P1wiIH0sXG5cdFx0Lyo6OlsqLzB4MDI4NS8qOjpdKi86IHsgbjpcIj8/XCIgfSxcblx0XHQvKjo6WyovMHgwMjg2Lyo6Ol0qLzogeyBuOlwiPz9cIiB9LFxuXHRcdC8qOjpbKi8weDAyODcvKjo6XSovOiB7IG46XCI/P1wiIH0sXG5cdFx0Lyo6OlsqLzB4MDI4OC8qOjpdKi86IHsgbjpcIj8/XCIgfSxcblx0XHQvKjo6WyovMHgwMjkyLyo6Ol0qLzogeyBuOlwiPz9cIiB9LFxuXHRcdC8qOjpbKi8weDAyOTMvKjo6XSovOiB7IG46XCI/P1wiIH0sXG5cdFx0Lyo6OlsqLzB4MDI5NC8qOjpdKi86IHsgbjpcIj8/XCIgfSxcblx0XHQvKjo6WyovMHgwMjk1Lyo6Ol0qLzogeyBuOlwiPz9cIiB9LFxuXHRcdC8qOjpbKi8weDAyOTYvKjo6XSovOiB7IG46XCI/P1wiIH0sXG5cdFx0Lyo6OlsqLzB4MDI5OS8qOjpdKi86IHsgbjpcIj8/XCIgfSxcblx0XHQvKjo6WyovMHgwMjlBLyo6Ol0qLzogeyBuOlwiPz9cIiB9LFxuXHRcdC8qOjpbKi8weDAzMDAvKjo6XSovOiB7IG46XCI/P1wiIH0sXG5cdFx0Lyo6OlsqLzB4MDMwNC8qOjpdKi86IHsgbjpcIj8/XCIgfSxcblx0XHQvKjo6WyovMHgwNjAxLyo6Ol0qLzogeyBuOlwiU0hFRVRJTkZPUVBcIiwgZjpwYXJzZV9TSEVFVElORk9RUCB9LFxuXHRcdC8qOjpbKi8weDA2NDAvKjo6XSovOiB7IG46XCI/P1wiIH0sXG5cdFx0Lyo6OlsqLzB4MDY0Mi8qOjpdKi86IHsgbjpcIj8/XCIgfSxcblx0XHQvKjo6WyovMHgwNzAxLyo6Ol0qLzogeyBuOlwiPz9cIiB9LFxuXHRcdC8qOjpbKi8weDA3MDIvKjo6XSovOiB7IG46XCI/P1wiIH0sXG5cdFx0Lyo6OlsqLzB4MDcwMy8qOjpdKi86IHsgbjpcIj8/XCIgfSxcblx0XHQvKjo6WyovMHgwNzA0Lyo6Ol0qLzogeyBuOlwiPz9cIiB9LFxuXHRcdC8qOjpbKi8weDA3ODAvKjo6XSovOiB7IG46XCI/P1wiIH0sXG5cdFx0Lyo6OlsqLzB4MDgwMC8qOjpdKi86IHsgbjpcIj8/XCIgfSxcblx0XHQvKjo6WyovMHgwODAxLyo6Ol0qLzogeyBuOlwiPz9cIiB9LFxuXHRcdC8qOjpbKi8weDA4MDQvKjo6XSovOiB7IG46XCI/P1wiIH0sXG5cdFx0Lyo6OlsqLzB4MEE4MC8qOjpdKi86IHsgbjpcIj8/XCIgfSxcblx0XHQvKjo6WyovMHgyQUY2Lyo6Ol0qLzogeyBuOlwiPz9cIiB9LFxuXHRcdC8qOjpbKi8weDMyMzEvKjo6XSovOiB7IG46XCI/P1wiIH0sXG5cdFx0Lyo6OlsqLzB4NkU0OS8qOjpdKi86IHsgbjpcIj8/XCIgfSxcblx0XHQvKjo6WyovMHg2RjQ0Lyo6Ol0qLzogeyBuOlwiPz9cIiB9LFxuXHRcdC8qOjpbKi8weEZGRkYvKjo6XSovOiB7IG46XCJcIiB9XG5cdH07XG5cdHJldHVybiB7XG5cdFx0c2hlZXRfdG9fd2sxOiBzaGVldF90b193azEsXG5cdFx0Ym9va190b193azM6IGJvb2tfdG9fd2szLFxuXHRcdHRvX3dvcmtib29rOiBsb3R1c190b193b3JrYm9va1xuXHR9O1xufSkoKTtcbi8qIDE4LjQuNyByUHIgQ1RfUlByRWx0ICovXG5mdW5jdGlvbiBwYXJzZV9ycHIocnByKSB7XG5cdHZhciBmb250ID0ge30sIG0gPSBycHIubWF0Y2godGFncmVnZXgpLCBpID0gMDtcblx0dmFyIHBhc3MgPSBmYWxzZTtcblx0aWYobSkgZm9yKDtpIT1tLmxlbmd0aDsgKytpKSB7XG5cdFx0dmFyIHkgPSBwYXJzZXhtbHRhZyhtW2ldKTtcblx0XHRzd2l0Y2goeVswXS5yZXBsYWNlKC9cXHcqOi9nLFwiXCIpKSB7XG5cdFx0XHQvKiAxOC44LjEyIGNvbmRlbnNlIENUX0Jvb2xlYW5Qcm9wZXJ0eSAqL1xuXHRcdFx0LyogKiogbm90IHJlcXVpcmVkIC4gKi9cblx0XHRcdGNhc2UgJzxjb25kZW5zZSc6IGJyZWFrO1xuXHRcdFx0LyogMTguOC4xNyBleHRlbmQgQ1RfQm9vbGVhblByb3BlcnR5ICovXG5cdFx0XHQvKiAqKiBub3QgcmVxdWlyZWQgLiAqL1xuXHRcdFx0Y2FzZSAnPGV4dGVuZCc6IGJyZWFrO1xuXHRcdFx0LyogMTguOC4zNiBzaGFkb3cgQ1RfQm9vbGVhblByb3BlcnR5ICovXG5cdFx0XHQvKiAqKiBub3QgcmVxdWlyZWQgLiAqL1xuXHRcdFx0Y2FzZSAnPHNoYWRvdyc6XG5cdFx0XHRcdGlmKCF5LnZhbCkgYnJlYWs7XG5cdFx0XHRcdC8qIGZhbGxzIHRocm91Z2ggKi9cblx0XHRcdGNhc2UgJzxzaGFkb3c+Jzpcblx0XHRcdGNhc2UgJzxzaGFkb3cvPic6IGZvbnQuc2hhZG93ID0gMTsgYnJlYWs7XG5cdFx0XHRjYXNlICc8L3NoYWRvdz4nOiBicmVhaztcblxuXHRcdFx0LyogMTguNC4xIGNoYXJzZXQgQ1RfSW50UHJvcGVydHkgVE9ETyAqL1xuXHRcdFx0Y2FzZSAnPGNoYXJzZXQnOlxuXHRcdFx0XHRpZih5LnZhbCA9PSAnMScpIGJyZWFrO1xuXHRcdFx0XHRmb250LmNwID0gQ1MyQ1BbcGFyc2VJbnQoeS52YWwsIDEwKV07XG5cdFx0XHRcdGJyZWFrO1xuXG5cdFx0XHQvKiAxOC40LjIgb3V0bGluZSBDVF9Cb29sZWFuUHJvcGVydHkgVE9ETyAqL1xuXHRcdFx0Y2FzZSAnPG91dGxpbmUnOlxuXHRcdFx0XHRpZigheS52YWwpIGJyZWFrO1xuXHRcdFx0XHQvKiBmYWxscyB0aHJvdWdoICovXG5cdFx0XHRjYXNlICc8b3V0bGluZT4nOlxuXHRcdFx0Y2FzZSAnPG91dGxpbmUvPic6IGZvbnQub3V0bGluZSA9IDE7IGJyZWFrO1xuXHRcdFx0Y2FzZSAnPC9vdXRsaW5lPic6IGJyZWFrO1xuXG5cdFx0XHQvKiAxOC40LjUgckZvbnQgQ1RfRm9udE5hbWUgKi9cblx0XHRcdGNhc2UgJzxyRm9udCc6IGZvbnQubmFtZSA9IHkudmFsOyBicmVhaztcblxuXHRcdFx0LyogMTguNC4xMSBzeiBDVF9Gb250U2l6ZSAqL1xuXHRcdFx0Y2FzZSAnPHN6JzogZm9udC5zeiA9IHkudmFsOyBicmVhaztcblxuXHRcdFx0LyogMTguNC4xMCBzdHJpa2UgQ1RfQm9vbGVhblByb3BlcnR5ICovXG5cdFx0XHRjYXNlICc8c3RyaWtlJzpcblx0XHRcdFx0aWYoIXkudmFsKSBicmVhaztcblx0XHRcdFx0LyogZmFsbHMgdGhyb3VnaCAqL1xuXHRcdFx0Y2FzZSAnPHN0cmlrZT4nOlxuXHRcdFx0Y2FzZSAnPHN0cmlrZS8+JzogZm9udC5zdHJpa2UgPSAxOyBicmVhaztcblx0XHRcdGNhc2UgJzwvc3RyaWtlPic6IGJyZWFrO1xuXG5cdFx0XHQvKiAxOC40LjEzIHUgQ1RfVW5kZXJsaW5lUHJvcGVydHkgKi9cblx0XHRcdGNhc2UgJzx1Jzpcblx0XHRcdFx0aWYoIXkudmFsKSBicmVhaztcblx0XHRcdFx0c3dpdGNoKHkudmFsKSB7XG5cdFx0XHRcdFx0Y2FzZSAnZG91YmxlJzogZm9udC51dmFsID0gXCJkb3VibGVcIjsgYnJlYWs7XG5cdFx0XHRcdFx0Y2FzZSAnc2luZ2xlQWNjb3VudGluZyc6IGZvbnQudXZhbCA9IFwic2luZ2xlLWFjY291bnRpbmdcIjsgYnJlYWs7XG5cdFx0XHRcdFx0Y2FzZSAnZG91YmxlQWNjb3VudGluZyc6IGZvbnQudXZhbCA9IFwiZG91YmxlLWFjY291bnRpbmdcIjsgYnJlYWs7XG5cdFx0XHRcdH1cblx0XHRcdFx0LyogZmFsbHMgdGhyb3VnaCAqL1xuXHRcdFx0Y2FzZSAnPHU+Jzpcblx0XHRcdGNhc2UgJzx1Lz4nOiBmb250LnUgPSAxOyBicmVhaztcblx0XHRcdGNhc2UgJzwvdT4nOiBicmVhaztcblxuXHRcdFx0LyogMTguOC4yIGIgKi9cblx0XHRcdGNhc2UgJzxiJzpcblx0XHRcdFx0aWYoeS52YWwgPT0gJzAnKSBicmVhaztcblx0XHRcdFx0LyogZmFsbHMgdGhyb3VnaCAqL1xuXHRcdFx0Y2FzZSAnPGI+Jzpcblx0XHRcdGNhc2UgJzxiLz4nOiBmb250LmIgPSAxOyBicmVhaztcblx0XHRcdGNhc2UgJzwvYj4nOiBicmVhaztcblxuXHRcdFx0LyogMTguOC4yNiBpICovXG5cdFx0XHRjYXNlICc8aSc6XG5cdFx0XHRcdGlmKHkudmFsID09ICcwJykgYnJlYWs7XG5cdFx0XHRcdC8qIGZhbGxzIHRocm91Z2ggKi9cblx0XHRcdGNhc2UgJzxpPic6XG5cdFx0XHRjYXNlICc8aS8+JzogZm9udC5pID0gMTsgYnJlYWs7XG5cdFx0XHRjYXNlICc8L2k+JzogYnJlYWs7XG5cblx0XHRcdC8qIDE4LjMuMS4xNSBjb2xvciBDVF9Db2xvciBUT0RPOiB0aW50LCB0aGVtZSwgYXV0bywgaW5kZXhlZCAqL1xuXHRcdFx0Y2FzZSAnPGNvbG9yJzpcblx0XHRcdFx0aWYoeS5yZ2IpIGZvbnQuY29sb3IgPSB5LnJnYi5zbGljZSgyLDgpO1xuXHRcdFx0XHRicmVhaztcblx0XHRcdGNhc2UgJzxjb2xvcj4nOiBjYXNlICc8Y29sb3IvPic6IGNhc2UgJzwvY29sb3I+JzogYnJlYWs7XG5cblx0XHRcdC8qIDE4LjguMTggZmFtaWx5IFNUX0ZvbnRGYW1pbHkgKi9cblx0XHRcdGNhc2UgJzxmYW1pbHknOiBmb250LmZhbWlseSA9IHkudmFsOyBicmVhaztcblx0XHRcdGNhc2UgJzxmYW1pbHk+JzogY2FzZSAnPGZhbWlseS8+JzogY2FzZSAnPC9mYW1pbHk+JzogYnJlYWs7XG5cblx0XHRcdC8qIDE4LjQuMTQgdmVydEFsaWduIENUX1ZlcnRpY2FsQWxpZ25Gb250UHJvcGVydHkgVE9ETyAqL1xuXHRcdFx0Y2FzZSAnPHZlcnRBbGlnbic6IGZvbnQudmFsaWduID0geS52YWw7IGJyZWFrO1xuXHRcdFx0Y2FzZSAnPHZlcnRBbGlnbj4nOiBjYXNlICc8dmVydEFsaWduLz4nOiBjYXNlICc8L3ZlcnRBbGlnbj4nOiBicmVhaztcblxuXHRcdFx0LyogMTguOC4zNSBzY2hlbWUgQ1RfRm9udFNjaGVtZSBUT0RPICovXG5cdFx0XHRjYXNlICc8c2NoZW1lJzogYnJlYWs7XG5cdFx0XHRjYXNlICc8c2NoZW1lPic6IGNhc2UgJzxzY2hlbWUvPic6IGNhc2UgJzwvc2NoZW1lPic6IGJyZWFrO1xuXG5cdFx0XHQvKiAxOC4yLjEwIGV4dExzdCBDVF9FeHRlbnNpb25MaXN0ID8gKi9cblx0XHRcdGNhc2UgJzxleHRMc3QnOiBjYXNlICc8ZXh0THN0Pic6IGNhc2UgJzwvZXh0THN0Pic6IGJyZWFrO1xuXHRcdFx0Y2FzZSAnPGV4dCc6IHBhc3MgPSB0cnVlOyBicmVhaztcblx0XHRcdGNhc2UgJzwvZXh0Pic6IHBhc3MgPSBmYWxzZTsgYnJlYWs7XG5cdFx0XHRkZWZhdWx0OlxuXHRcdFx0XHRpZih5WzBdLmNoYXJDb2RlQXQoMSkgIT09IDQ3ICYmICFwYXNzKSB0aHJvdyBuZXcgRXJyb3IoJ1VucmVjb2duaXplZCByaWNoIGZvcm1hdCAnICsgeVswXSk7XG5cdFx0fVxuXHR9XG5cdHJldHVybiBmb250O1xufVxuXG52YXIgcGFyc2VfcnMgPSAvKiNfX1BVUkVfXyovKGZ1bmN0aW9uKCkge1xuXHR2YXIgdHJlZ2V4ID0gbWF0Y2h0YWcoXCJ0XCIpLCBycHJlZ2V4ID0gbWF0Y2h0YWcoXCJyUHJcIik7XG5cdC8qIDE4LjQuNCByIENUX1JFbHQgKi9cblx0ZnVuY3Rpb24gcGFyc2VfcihyKSB7XG5cdFx0LyogMTguNC4xMiB0IFNUX1hzdHJpbmcgKi9cblx0XHR2YXIgdCA9IHIubWF0Y2godHJlZ2V4KS8qLCBjcCA9IDY1MDAxKi87XG5cdFx0aWYoIXQpIHJldHVybiB7dDpcInNcIiwgdjpcIlwifTtcblxuXHRcdHZhciBvLyo6Q2VsbCovID0gKHt0OidzJywgdjp1bmVzY2FwZXhtbCh0WzFdKX0vKjphbnkqLyk7XG5cdFx0dmFyIHJwciA9IHIubWF0Y2gocnByZWdleCk7XG5cdFx0aWYocnByKSBvLnMgPSBwYXJzZV9ycHIocnByWzFdKTtcblx0XHRyZXR1cm4gbztcblx0fVxuXHR2YXIgcnJlZ2V4ID0gLzwoPzpcXHcrOik/cj4vZywgcmVuZCA9IC88XFwvKD86XFx3KzopP3I+Lztcblx0cmV0dXJuIGZ1bmN0aW9uIHBhcnNlX3JzKHJzKSB7XG5cdFx0cmV0dXJuIHJzLnJlcGxhY2UocnJlZ2V4LFwiXCIpLnNwbGl0KHJlbmQpLm1hcChwYXJzZV9yKS5maWx0ZXIoZnVuY3Rpb24ocikgeyByZXR1cm4gci52OyB9KTtcblx0fTtcbn0pKCk7XG5cblxuLyogUGFyc2UgYSBsaXN0IG9mIDxyPiB0YWdzICovXG52YXIgcnNfdG9faHRtbCA9IC8qI19fUFVSRV9fKi8oZnVuY3Rpb24gcGFyc2VfcnNfZmFjdG9yeSgpIHtcblx0dmFyIG5scmVnZXggPSAvKFxcclxcbnxcXG4pL2c7XG5cdGZ1bmN0aW9uIHBhcnNlX3JwcjIoZm9udCwgaW50cm8sIG91dHJvKSB7XG5cdFx0dmFyIHN0eWxlLyo6QXJyYXk8c3RyaW5nPiovID0gW107XG5cblx0XHRpZihmb250LnUpIHN0eWxlLnB1c2goXCJ0ZXh0LWRlY29yYXRpb246IHVuZGVybGluZTtcIik7XG5cdFx0aWYoZm9udC51dmFsKSBzdHlsZS5wdXNoKFwidGV4dC11bmRlcmxpbmUtc3R5bGU6XCIgKyBmb250LnV2YWwgKyBcIjtcIik7XG5cdFx0aWYoZm9udC5zeikgc3R5bGUucHVzaChcImZvbnQtc2l6ZTpcIiArIGZvbnQuc3ogKyBcInB0O1wiKTtcblx0XHRpZihmb250Lm91dGxpbmUpIHN0eWxlLnB1c2goXCJ0ZXh0LWVmZmVjdDogb3V0bGluZTtcIik7XG5cdFx0aWYoZm9udC5zaGFkb3cpIHN0eWxlLnB1c2goXCJ0ZXh0LXNoYWRvdzogYXV0bztcIik7XG5cdFx0aW50cm8ucHVzaCgnPHNwYW4gc3R5bGU9XCInICsgc3R5bGUuam9pbihcIlwiKSArICdcIj4nKTtcblxuXHRcdGlmKGZvbnQuYikgeyBpbnRyby5wdXNoKFwiPGI+XCIpOyBvdXRyby5wdXNoKFwiPC9iPlwiKTsgfVxuXHRcdGlmKGZvbnQuaSkgeyBpbnRyby5wdXNoKFwiPGk+XCIpOyBvdXRyby5wdXNoKFwiPC9pPlwiKTsgfVxuXHRcdGlmKGZvbnQuc3RyaWtlKSB7IGludHJvLnB1c2goXCI8cz5cIik7IG91dHJvLnB1c2goXCI8L3M+XCIpOyB9XG5cblx0XHR2YXIgYWxpZ24gPSBmb250LnZhbGlnbiB8fCBcIlwiO1xuXHRcdGlmKGFsaWduID09IFwic3VwZXJzY3JpcHRcIiB8fCBhbGlnbiA9PSBcInN1cGVyXCIpIGFsaWduID0gXCJzdXBcIjtcblx0XHRlbHNlIGlmKGFsaWduID09IFwic3Vic2NyaXB0XCIpIGFsaWduID0gXCJzdWJcIjtcblx0XHRpZihhbGlnbiAhPSBcIlwiKSB7IGludHJvLnB1c2goXCI8XCIgKyBhbGlnbiArIFwiPlwiKTsgb3V0cm8ucHVzaChcIjwvXCIgKyBhbGlnbiArIFwiPlwiKTsgfVxuXG5cdFx0b3V0cm8ucHVzaChcIjwvc3Bhbj5cIik7XG5cdFx0cmV0dXJuIGZvbnQ7XG5cdH1cblxuXHQvKiAxOC40LjQgciBDVF9SRWx0ICovXG5cdGZ1bmN0aW9uIHJfdG9faHRtbChyKSB7XG5cdFx0dmFyIHRlcm1zLyo6W0FycmF5PHN0cmluZz4sIHN0cmluZywgQXJyYXk8c3RyaW5nPl0qLyA9IFtbXSxyLnYsW11dO1xuXHRcdGlmKCFyLnYpIHJldHVybiBcIlwiO1xuXG5cdFx0aWYoci5zKSBwYXJzZV9ycHIyKHIucywgdGVybXNbMF0sIHRlcm1zWzJdKTtcblxuXHRcdHJldHVybiB0ZXJtc1swXS5qb2luKFwiXCIpICsgdGVybXNbMV0ucmVwbGFjZShubHJlZ2V4LCc8YnIvPicpICsgdGVybXNbMl0uam9pbihcIlwiKTtcblx0fVxuXG5cdHJldHVybiBmdW5jdGlvbiBwYXJzZV9ycyhycykge1xuXHRcdHJldHVybiBycy5tYXAocl90b19odG1sKS5qb2luKFwiXCIpO1xuXHR9O1xufSkoKTtcblxuLyogMTguNC44IHNpIENUX1JzdCAqL1xudmFyIHNpdHJlZ2V4ID0gLzwoPzpcXHcrOik/dFtePl0qPihbXjxdKik8XFwvKD86XFx3KzopP3Q+L2csIHNpcnJlZ2V4ID0gLzwoPzpcXHcrOik/cj4vO1xudmFyIHNpcnBocmVnZXggPSAvPCg/Olxcdys6KT9yUGguKj8+KFtcXHNcXFNdKj8pPFxcLyg/Olxcdys6KT9yUGg+L2c7XG5mdW5jdGlvbiBwYXJzZV9zaSh4LCBvcHRzKSB7XG5cdHZhciBodG1sID0gb3B0cyA/IG9wdHMuY2VsbEhUTUwgOiB0cnVlO1xuXHR2YXIgeiA9IHt9O1xuXHRpZigheCkgcmV0dXJuIHsgdDogXCJcIiB9O1xuXHQvL3ZhciB5O1xuXHQvKiAxOC40LjEyIHQgU1RfWHN0cmluZyAoUGxhaW50ZXh0IFN0cmluZykgKi9cblx0Ly8gVE9ETzogaXMgd2hpdGVzcGFjZSBhY3R1YWxseSB2YWxpZCBoZXJlP1xuXHRpZih4Lm1hdGNoKC9eXFxzKjwoPzpcXHcrOik/dFtePl0qPi8pKSB7XG5cdFx0ei50ID0gdW5lc2NhcGV4bWwodXRmOHJlYWQoeC5zbGljZSh4LmluZGV4T2YoXCI+XCIpKzEpLnNwbGl0KC88XFwvKD86XFx3KzopP3Q+LylbMF18fFwiXCIpKTtcblx0XHR6LnIgPSB1dGY4cmVhZCh4KTtcblx0XHRpZihodG1sKSB6LmggPSBlc2NhcGVodG1sKHoudCk7XG5cdH1cblx0LyogMTguNC40IHIgQ1RfUkVsdCAoUmljaCBUZXh0IFJ1bikgKi9cblx0ZWxzZSBpZigoLyp5ID0gKi94Lm1hdGNoKHNpcnJlZ2V4KSkpIHtcblx0XHR6LnIgPSB1dGY4cmVhZCh4KTtcblx0XHR6LnQgPSB1bmVzY2FwZXhtbCh1dGY4cmVhZCgoeC5yZXBsYWNlKHNpcnBocmVnZXgsICcnKS5tYXRjaChzaXRyZWdleCl8fFtdKS5qb2luKFwiXCIpLnJlcGxhY2UodGFncmVnZXgsXCJcIikpKTtcblx0XHRpZihodG1sKSB6LmggPSByc190b19odG1sKHBhcnNlX3JzKHoucikpO1xuXHR9XG5cdC8qIDE4LjQuMyBwaG9uZXRpY1ByIENUX1Bob25ldGljUHIgKFRPRE86IG5lZWRlZCBmb3IgQXNpYW4gc3VwcG9ydCkgKi9cblx0LyogMTguNC42IHJQaCBDVF9QaG9uZXRpY1J1biAoVE9ETzogbmVlZGVkIGZvciBBc2lhbiBzdXBwb3J0KSAqL1xuXHRyZXR1cm4gejtcbn1cblxuLyogMTguNCBTaGFyZWQgU3RyaW5nIFRhYmxlICovXG52YXIgc3N0cjAgPSAvPCg/Olxcdys6KT9zc3QoW14+XSopPihbXFxzXFxTXSopPFxcLyg/Olxcdys6KT9zc3Q+LztcbnZhciBzc3RyMSA9IC88KD86XFx3KzopPyg/OnNpfHNzdEl0ZW0pPi9nO1xudmFyIHNzdHIyID0gLzxcXC8oPzpcXHcrOik/KD86c2l8c3N0SXRlbSk+LztcbmZ1bmN0aW9uIHBhcnNlX3NzdF94bWwoZGF0YS8qOnN0cmluZyovLCBvcHRzKS8qOlNTVCovIHtcblx0dmFyIHMvKjpTU1QqLyA9IChbXS8qOmFueSovKSwgc3MgPSBcIlwiO1xuXHRpZighZGF0YSkgcmV0dXJuIHM7XG5cdC8qIDE4LjQuOSBzc3QgQ1RfU3N0ICovXG5cdHZhciBzc3QgPSBkYXRhLm1hdGNoKHNzdHIwKTtcblx0aWYoc3N0KSB7XG5cdFx0c3MgPSBzc3RbMl0ucmVwbGFjZShzc3RyMSxcIlwiKS5zcGxpdChzc3RyMik7XG5cdFx0Zm9yKHZhciBpID0gMDsgaSAhPSBzcy5sZW5ndGg7ICsraSkge1xuXHRcdFx0dmFyIG8gPSBwYXJzZV9zaShzc1tpXS50cmltKCksIG9wdHMpO1xuXHRcdFx0aWYobyAhPSBudWxsKSBzW3MubGVuZ3RoXSA9IG87XG5cdFx0fVxuXHRcdHNzdCA9IHBhcnNleG1sdGFnKHNzdFsxXSk7IHMuQ291bnQgPSBzc3QuY291bnQ7IHMuVW5pcXVlID0gc3N0LnVuaXF1ZUNvdW50O1xuXHR9XG5cdHJldHVybiBzO1xufVxuXG52YXIgc3RyYXl3c3JlZ2V4ID0gL15cXHN8XFxzJHxbXFx0XFxuXFxyXS87XG5mdW5jdGlvbiB3cml0ZV9zc3RfeG1sKHNzdC8qOlNTVCovLCBvcHRzKS8qOnN0cmluZyovIHtcblx0aWYoIW9wdHMuYm9va1NTVCkgcmV0dXJuIFwiXCI7XG5cdHZhciBvID0gW1hNTF9IRUFERVJdO1xuXHRvW28ubGVuZ3RoXSA9ICh3cml0ZXh0YWcoJ3NzdCcsIG51bGwsIHtcblx0XHR4bWxuczogWE1MTlNfbWFpblswXSxcblx0XHRjb3VudDogc3N0LkNvdW50LFxuXHRcdHVuaXF1ZUNvdW50OiBzc3QuVW5pcXVlXG5cdH0pKTtcblx0Zm9yKHZhciBpID0gMDsgaSAhPSBzc3QubGVuZ3RoOyArK2kpIHsgaWYoc3N0W2ldID09IG51bGwpIGNvbnRpbnVlO1xuXHRcdHZhciBzLyo6WExTdHJpbmcqLyA9IHNzdFtpXTtcblx0XHR2YXIgc2l0YWcgPSBcIjxzaT5cIjtcblx0XHRpZihzLnIpIHNpdGFnICs9IHMucjtcblx0XHRlbHNlIHtcblx0XHRcdHNpdGFnICs9IFwiPHRcIjtcblx0XHRcdGlmKCFzLnQpIHMudCA9IFwiXCI7XG5cdFx0XHRpZihzLnQubWF0Y2goc3RyYXl3c3JlZ2V4KSkgc2l0YWcgKz0gJyB4bWw6c3BhY2U9XCJwcmVzZXJ2ZVwiJztcblx0XHRcdHNpdGFnICs9IFwiPlwiICsgZXNjYXBleG1sKHMudCkgKyBcIjwvdD5cIjtcblx0XHR9XG5cdFx0c2l0YWcgKz0gXCI8L3NpPlwiO1xuXHRcdG9bby5sZW5ndGhdID0gKHNpdGFnKTtcblx0fVxuXHRpZihvLmxlbmd0aD4yKXsgb1tvLmxlbmd0aF0gPSAoJzwvc3N0PicpOyBvWzFdPW9bMV0ucmVwbGFjZShcIi8+XCIsXCI+XCIpOyB9XG5cdHJldHVybiBvLmpvaW4oXCJcIik7XG59XG4vKiBbTVMtWExTQl0gMi40LjIyMSBCcnRCZWdpblNzdCAqL1xuZnVuY3Rpb24gcGFyc2VfQnJ0QmVnaW5Tc3QoZGF0YSkge1xuXHRyZXR1cm4gW2RhdGEucmVhZF9zaGlmdCg0KSwgZGF0YS5yZWFkX3NoaWZ0KDQpXTtcbn1cblxuLyogW01TLVhMU0JdIDIuMS43LjQ1IFNoYXJlZCBTdHJpbmdzICovXG5mdW5jdGlvbiBwYXJzZV9zc3RfYmluKGRhdGEsIG9wdHMpLyo6U1NUKi8ge1xuXHR2YXIgcy8qOlNTVCovID0gKFtdLyo6YW55Ki8pO1xuXHR2YXIgcGFzcyA9IGZhbHNlO1xuXHRyZWNvcmRob3BwZXIoZGF0YSwgZnVuY3Rpb24gaG9wcGVyX3NzdCh2YWwsIFIsIFJUKSB7XG5cdFx0c3dpdGNoKFJUKSB7XG5cdFx0XHRjYXNlIDB4MDA5RjogLyogQnJ0QmVnaW5Tc3QgKi9cblx0XHRcdFx0cy5Db3VudCA9IHZhbFswXTsgcy5VbmlxdWUgPSB2YWxbMV07IGJyZWFrO1xuXHRcdFx0Y2FzZSAweDAwMTM6IC8qIEJydFNTVEl0ZW0gKi9cblx0XHRcdFx0cy5wdXNoKHZhbCk7IGJyZWFrO1xuXHRcdFx0Y2FzZSAweDAwQTA6IC8qIEJydEVuZFNzdCAqL1xuXHRcdFx0XHRyZXR1cm4gdHJ1ZTtcblxuXHRcdFx0Y2FzZSAweDAwMjM6IC8qIEJydEZSVEJlZ2luICovXG5cdFx0XHRcdHBhc3MgPSB0cnVlOyBicmVhaztcblx0XHRcdGNhc2UgMHgwMDI0OiAvKiBCcnRGUlRFbmQgKi9cblx0XHRcdFx0cGFzcyA9IGZhbHNlOyBicmVhaztcblxuXHRcdFx0ZGVmYXVsdDpcblx0XHRcdFx0aWYoUi5UKXt9XG5cdFx0XHRcdGlmKCFwYXNzIHx8IG9wdHMuV1RGKSB0aHJvdyBuZXcgRXJyb3IoXCJVbmV4cGVjdGVkIHJlY29yZCAweFwiICsgUlQudG9TdHJpbmcoMTYpKTtcblx0XHR9XG5cdH0pO1xuXHRyZXR1cm4gcztcbn1cblxuZnVuY3Rpb24gd3JpdGVfQnJ0QmVnaW5Tc3Qoc3N0LCBvKSB7XG5cdGlmKCFvKSBvID0gbmV3X2J1Zig4KTtcblx0by53cml0ZV9zaGlmdCg0LCBzc3QuQ291bnQpO1xuXHRvLndyaXRlX3NoaWZ0KDQsIHNzdC5VbmlxdWUpO1xuXHRyZXR1cm4gbztcbn1cblxudmFyIHdyaXRlX0JydFNTVEl0ZW0gPSB3cml0ZV9SaWNoU3RyO1xuXG5mdW5jdGlvbiB3cml0ZV9zc3RfYmluKHNzdC8qOjosIG9wdHMqLykge1xuXHR2YXIgYmEgPSBidWZfYXJyYXkoKTtcblx0d3JpdGVfcmVjb3JkKGJhLCAweDAwOUYgLyogQnJ0QmVnaW5Tc3QgKi8sIHdyaXRlX0JydEJlZ2luU3N0KHNzdCkpO1xuXHRmb3IodmFyIGkgPSAwOyBpIDwgc3N0Lmxlbmd0aDsgKytpKSB3cml0ZV9yZWNvcmQoYmEsIDB4MDAxMyAvKiBCcnRTU1RJdGVtICovLCB3cml0ZV9CcnRTU1RJdGVtKHNzdFtpXSkpO1xuXHQvKiBGUlRTU1QgKi9cblx0d3JpdGVfcmVjb3JkKGJhLCAweDAwQTAgLyogQnJ0RW5kU3N0ICovKTtcblx0cmV0dXJuIGJhLmVuZCgpO1xufVxuZnVuY3Rpb24gX0pTMkFOU0koc3RyLyo6c3RyaW5nKi8pLyo6QXJyYXk8bnVtYmVyPiovIHtcblx0aWYodHlwZW9mICRjcHRhYmxlICE9PSAndW5kZWZpbmVkJykgcmV0dXJuICRjcHRhYmxlLnV0aWxzLmVuY29kZShjdXJyZW50X2Fuc2ksIHN0cik7XG5cdHZhciBvLyo6QXJyYXk8bnVtYmVyPiovID0gW10sIG9vID0gc3RyLnNwbGl0KFwiXCIpO1xuXHRmb3IodmFyIGkgPSAwOyBpIDwgb28ubGVuZ3RoOyArK2kpIG9baV0gPSBvb1tpXS5jaGFyQ29kZUF0KDApO1xuXHRyZXR1cm4gbztcbn1cblxuLyogW01TLU9GRkNSWVBUT10gMi4xLjQgVmVyc2lvbiAqL1xuZnVuY3Rpb24gcGFyc2VfQ1JZUFRPVmVyc2lvbihibG9iLCBsZW5ndGgvKjo/bnVtYmVyKi8pIHtcblx0dmFyIG8vKjphbnkqLyA9IHt9O1xuXHRvLk1ham9yID0gYmxvYi5yZWFkX3NoaWZ0KDIpO1xuXHRvLk1pbm9yID0gYmxvYi5yZWFkX3NoaWZ0KDIpO1xuXHQvKjo6IGlmKGxlbmd0aCA9PSBudWxsKSByZXR1cm4gbzsgKi9cblx0aWYobGVuZ3RoID49IDQpIGJsb2IubCArPSBsZW5ndGggLSA0O1xuXHRyZXR1cm4gbztcbn1cblxuLyogW01TLU9GRkNSWVBUT10gMi4xLjUgRGF0YVNwYWNlVmVyc2lvbkluZm8gKi9cbmZ1bmN0aW9uIHBhcnNlX0RhdGFTcGFjZVZlcnNpb25JbmZvKGJsb2IpIHtcblx0dmFyIG8gPSB7fTtcblx0by5pZCA9IGJsb2IucmVhZF9zaGlmdCgwLCAnbHBwNCcpO1xuXHRvLlIgPSBwYXJzZV9DUllQVE9WZXJzaW9uKGJsb2IsIDQpO1xuXHRvLlUgPSBwYXJzZV9DUllQVE9WZXJzaW9uKGJsb2IsIDQpO1xuXHRvLlcgPSBwYXJzZV9DUllQVE9WZXJzaW9uKGJsb2IsIDQpO1xuXHRyZXR1cm4gbztcbn1cblxuLyogW01TLU9GRkNSWVBUT10gMi4xLjYuMSBEYXRhU3BhY2VNYXBFbnRyeSBTdHJ1Y3R1cmUgKi9cbmZ1bmN0aW9uIHBhcnNlX0RhdGFTcGFjZU1hcEVudHJ5KGJsb2IpIHtcblx0dmFyIGxlbiA9IGJsb2IucmVhZF9zaGlmdCg0KTtcblx0dmFyIGVuZCA9IGJsb2IubCArIGxlbiAtIDQ7XG5cdHZhciBvID0ge307XG5cdHZhciBjbnQgPSBibG9iLnJlYWRfc2hpZnQoNCk7XG5cdHZhciBjb21wcy8qOkFycmF5PHt0Om51bWJlciwgdjpzdHJpbmd9PiovID0gW107XG5cdC8qIFtNUy1PRkZDUllQVE9dIDIuMS42LjIgRGF0YVNwYWNlUmVmZXJlbmNlQ29tcG9uZW50IFN0cnVjdHVyZSAqL1xuXHR3aGlsZShjbnQtLSA+IDApIGNvbXBzLnB1c2goeyB0OiBibG9iLnJlYWRfc2hpZnQoNCksIHY6IGJsb2IucmVhZF9zaGlmdCgwLCAnbHBwNCcpIH0pO1xuXHRvLm5hbWUgPSBibG9iLnJlYWRfc2hpZnQoMCwgJ2xwcDQnKTtcblx0by5jb21wcyA9IGNvbXBzO1xuXHRpZihibG9iLmwgIT0gZW5kKSB0aHJvdyBuZXcgRXJyb3IoXCJCYWQgRGF0YVNwYWNlTWFwRW50cnk6IFwiICsgYmxvYi5sICsgXCIgIT0gXCIgKyBlbmQpO1xuXHRyZXR1cm4gbztcbn1cblxuLyogW01TLU9GRkNSWVBUT10gMi4xLjYgRGF0YVNwYWNlTWFwICovXG5mdW5jdGlvbiBwYXJzZV9EYXRhU3BhY2VNYXAoYmxvYikge1xuXHR2YXIgbyA9IFtdO1xuXHRibG9iLmwgKz0gNDsgLy8gbXVzdCBiZSAweDhcblx0dmFyIGNudCA9IGJsb2IucmVhZF9zaGlmdCg0KTtcblx0d2hpbGUoY250LS0gPiAwKSBvLnB1c2gocGFyc2VfRGF0YVNwYWNlTWFwRW50cnkoYmxvYikpO1xuXHRyZXR1cm4gbztcbn1cblxuLyogW01TLU9GRkNSWVBUT10gMi4xLjcgRGF0YVNwYWNlRGVmaW5pdGlvbiAqL1xuZnVuY3Rpb24gcGFyc2VfRGF0YVNwYWNlRGVmaW5pdGlvbihibG9iKS8qOkFycmF5PHN0cmluZz4qLyB7XG5cdHZhciBvLyo6QXJyYXk8c3RyaW5nPiovID0gW107XG5cdGJsb2IubCArPSA0OyAvLyBtdXN0IGJlIDB4OFxuXHR2YXIgY250ID0gYmxvYi5yZWFkX3NoaWZ0KDQpO1xuXHR3aGlsZShjbnQtLSA+IDApIG8ucHVzaChibG9iLnJlYWRfc2hpZnQoMCwgJ2xwcDQnKSk7XG5cdHJldHVybiBvO1xufVxuXG4vKiBbTVMtT0ZGQ1JZUFRPXSAyLjEuOCBEYXRhU3BhY2VEZWZpbml0aW9uICovXG5mdW5jdGlvbiBwYXJzZV9UcmFuc2Zvcm1JbmZvSGVhZGVyKGJsb2IpIHtcblx0dmFyIG8gPSB7fTtcblx0Lyp2YXIgbGVuID0gKi9ibG9iLnJlYWRfc2hpZnQoNCk7XG5cdGJsb2IubCArPSA0OyAvLyBtdXN0IGJlIDB4MVxuXHRvLmlkID0gYmxvYi5yZWFkX3NoaWZ0KDAsICdscHA0Jyk7XG5cdG8ubmFtZSA9IGJsb2IucmVhZF9zaGlmdCgwLCAnbHBwNCcpO1xuXHRvLlIgPSBwYXJzZV9DUllQVE9WZXJzaW9uKGJsb2IsIDQpO1xuXHRvLlUgPSBwYXJzZV9DUllQVE9WZXJzaW9uKGJsb2IsIDQpO1xuXHRvLlcgPSBwYXJzZV9DUllQVE9WZXJzaW9uKGJsb2IsIDQpO1xuXHRyZXR1cm4gbztcbn1cblxuZnVuY3Rpb24gcGFyc2VfUHJpbWFyeShibG9iKSB7XG5cdC8qIFtNUy1PRkZDUllQVE9dIDIuMi42IElSTURTVHJhbnNmb3JtSW5mbyAqL1xuXHR2YXIgaGRyID0gcGFyc2VfVHJhbnNmb3JtSW5mb0hlYWRlcihibG9iKTtcblx0LyogW01TLU9GRkNSWVBUT10gMi4xLjkgRW5jcnlwdGlvblRyYW5zZm9ybUluZm8gKi9cblx0aGRyLmVuYW1lID0gYmxvYi5yZWFkX3NoaWZ0KDAsICc4bHBwNCcpO1xuXHRoZHIuYmxrc3ogPSBibG9iLnJlYWRfc2hpZnQoNCk7XG5cdGhkci5jbW9kZSA9IGJsb2IucmVhZF9zaGlmdCg0KTtcblx0aWYoYmxvYi5yZWFkX3NoaWZ0KDQpICE9IDB4MDQpIHRocm93IG5ldyBFcnJvcihcIkJhZCAhUHJpbWFyeSByZWNvcmRcIik7XG5cdHJldHVybiBoZHI7XG59XG5cbi8qIFtNUy1PRkZDUllQVE9dIDIuMy4yIEVuY3J5cHRpb24gSGVhZGVyICovXG5mdW5jdGlvbiBwYXJzZV9FbmNyeXB0aW9uSGVhZGVyKGJsb2IsIGxlbmd0aC8qOm51bWJlciovKSB7XG5cdHZhciB0Z3QgPSBibG9iLmwgKyBsZW5ndGg7XG5cdHZhciBvID0ge307XG5cdG8uRmxhZ3MgPSAoYmxvYi5yZWFkX3NoaWZ0KDQpICYgMHgzRik7XG5cdGJsb2IubCArPSA0O1xuXHRvLkFsZ0lEID0gYmxvYi5yZWFkX3NoaWZ0KDQpO1xuXHR2YXIgdmFsaWQgPSBmYWxzZTtcblx0c3dpdGNoKG8uQWxnSUQpIHtcblx0XHRjYXNlIDB4NjYwRTogY2FzZSAweDY2MEY6IGNhc2UgMHg2NjEwOiB2YWxpZCA9IChvLkZsYWdzID09IDB4MjQpOyBicmVhaztcblx0XHRjYXNlIDB4NjgwMTogdmFsaWQgPSAoby5GbGFncyA9PSAweDA0KTsgYnJlYWs7XG5cdFx0Y2FzZSAwOiB2YWxpZCA9IChvLkZsYWdzID09IDB4MTAgfHwgby5GbGFncyA9PSAweDA0IHx8IG8uRmxhZ3MgPT0gMHgyNCk7IGJyZWFrO1xuXHRcdGRlZmF1bHQ6IHRocm93ICdVbnJlY29nbml6ZWQgZW5jcnlwdGlvbiBhbGdvcml0aG06ICcgKyBvLkFsZ0lEO1xuXHR9XG5cdGlmKCF2YWxpZCkgdGhyb3cgbmV3IEVycm9yKFwiRW5jcnlwdGlvbiBGbGFncy9BbGdJRCBtaXNtYXRjaFwiKTtcblx0by5BbGdJREhhc2ggPSBibG9iLnJlYWRfc2hpZnQoNCk7XG5cdG8uS2V5U2l6ZSA9IGJsb2IucmVhZF9zaGlmdCg0KTtcblx0by5Qcm92aWRlclR5cGUgPSBibG9iLnJlYWRfc2hpZnQoNCk7XG5cdGJsb2IubCArPSA4O1xuXHRvLkNTUE5hbWUgPSBibG9iLnJlYWRfc2hpZnQoKHRndC1ibG9iLmwpPj4xLCAndXRmMTZsZScpO1xuXHRibG9iLmwgPSB0Z3Q7XG5cdHJldHVybiBvO1xufVxuXG4vKiBbTVMtT0ZGQ1JZUFRPXSAyLjMuMyBFbmNyeXB0aW9uIFZlcmlmaWVyICovXG5mdW5jdGlvbiBwYXJzZV9FbmNyeXB0aW9uVmVyaWZpZXIoYmxvYiwgbGVuZ3RoLyo6bnVtYmVyKi8pIHtcblx0dmFyIG8gPSB7fSwgdGd0ID0gYmxvYi5sICsgbGVuZ3RoO1xuXHRibG9iLmwgKz0gNDsgLy8gU2FsdFNpemUgbXVzdCBiZSAweDEwXG5cdG8uU2FsdCA9IGJsb2Iuc2xpY2UoYmxvYi5sLCBibG9iLmwrMTYpOyBibG9iLmwgKz0gMTY7XG5cdG8uVmVyaWZpZXIgPSBibG9iLnNsaWNlKGJsb2IubCwgYmxvYi5sKzE2KTsgYmxvYi5sICs9IDE2O1xuXHQvKnZhciBzeiA9ICovYmxvYi5yZWFkX3NoaWZ0KDQpO1xuXHRvLlZlcmlmaWVySGFzaCA9IGJsb2Iuc2xpY2UoYmxvYi5sLCB0Z3QpOyBibG9iLmwgPSB0Z3Q7XG5cdHJldHVybiBvO1xufVxuXG4vKiBbTVMtT0ZGQ1JZUFRPXSAyLjMuNC4qIEVuY3J5cHRpb25JbmZvIFN0cmVhbSAqL1xuZnVuY3Rpb24gcGFyc2VfRW5jcnlwdGlvbkluZm8oYmxvYikge1xuXHR2YXIgdmVycyA9IHBhcnNlX0NSWVBUT1ZlcnNpb24oYmxvYik7XG5cdHN3aXRjaCh2ZXJzLk1pbm9yKSB7XG5cdFx0Y2FzZSAweDAyOiByZXR1cm4gW3ZlcnMuTWlub3IsIHBhcnNlX0VuY0luZm9TdGQoYmxvYiwgdmVycyldO1xuXHRcdGNhc2UgMHgwMzogcmV0dXJuIFt2ZXJzLk1pbm9yLCBwYXJzZV9FbmNJbmZvRXh0KGJsb2IsIHZlcnMpXTtcblx0XHRjYXNlIDB4MDQ6IHJldHVybiBbdmVycy5NaW5vciwgcGFyc2VfRW5jSW5mb0FnbChibG9iLCB2ZXJzKV07XG5cdH1cblx0dGhyb3cgbmV3IEVycm9yKFwiRUNNQS0zNzYgRW5jcnlwdGVkIGZpbGUgdW5yZWNvZ25pemVkIFZlcnNpb246IFwiICsgdmVycy5NaW5vcik7XG59XG5cbi8qIFtNUy1PRkZDUllQVE9dIDIuMy40LjUgIEVuY3J5cHRpb25JbmZvIFN0cmVhbSAoU3RhbmRhcmQgRW5jcnlwdGlvbikgKi9cbmZ1bmN0aW9uIHBhcnNlX0VuY0luZm9TdGQoYmxvYi8qOjosIHZlcnMqLykge1xuXHR2YXIgZmxhZ3MgPSBibG9iLnJlYWRfc2hpZnQoNCk7XG5cdGlmKChmbGFncyAmIDB4M0YpICE9IDB4MjQpIHRocm93IG5ldyBFcnJvcihcIkVuY3J5cHRpb25JbmZvIG1pc21hdGNoXCIpO1xuXHR2YXIgc3ogPSBibG9iLnJlYWRfc2hpZnQoNCk7XG5cdC8vdmFyIHRndCA9IGJsb2IubCArIHN6O1xuXHR2YXIgaGRyID0gcGFyc2VfRW5jcnlwdGlvbkhlYWRlcihibG9iLCBzeik7XG5cdHZhciB2ZXJpZmllciA9IHBhcnNlX0VuY3J5cHRpb25WZXJpZmllcihibG9iLCBibG9iLmxlbmd0aCAtIGJsb2IubCk7XG5cdHJldHVybiB7IHQ6XCJTdGRcIiwgaDpoZHIsIHY6dmVyaWZpZXIgfTtcbn1cbi8qIFtNUy1PRkZDUllQVE9dIDIuMy40LjYgIEVuY3J5cHRpb25JbmZvIFN0cmVhbSAoRXh0ZW5zaWJsZSBFbmNyeXB0aW9uKSAqL1xuZnVuY3Rpb24gcGFyc2VfRW5jSW5mb0V4dCgvKjo6YmxvYiwgdmVycyovKSB7IHRocm93IG5ldyBFcnJvcihcIkZpbGUgaXMgcGFzc3dvcmQtcHJvdGVjdGVkOiBFQ01BLTM3NiBFeHRlbnNpYmxlXCIpOyB9XG4vKiBbTVMtT0ZGQ1JZUFRPXSAyLjMuNC4xMCBFbmNyeXB0aW9uSW5mbyBTdHJlYW0gKEFnaWxlIEVuY3J5cHRpb24pICovXG5mdW5jdGlvbiBwYXJzZV9FbmNJbmZvQWdsKGJsb2IvKjo6LCB2ZXJzKi8pIHtcblx0dmFyIEtleURhdGEgPSBbXCJzYWx0U2l6ZVwiLFwiYmxvY2tTaXplXCIsXCJrZXlCaXRzXCIsXCJoYXNoU2l6ZVwiLFwiY2lwaGVyQWxnb3JpdGhtXCIsXCJjaXBoZXJDaGFpbmluZ1wiLFwiaGFzaEFsZ29yaXRobVwiLFwic2FsdFZhbHVlXCJdO1xuXHRibG9iLmwrPTQ7XG5cdHZhciB4bWwgPSBibG9iLnJlYWRfc2hpZnQoYmxvYi5sZW5ndGggLSBibG9iLmwsICd1dGY4Jyk7XG5cdHZhciBvID0ge307XG5cdHhtbC5yZXBsYWNlKHRhZ3JlZ2V4LCBmdW5jdGlvbiB4bWxfYWdpbGUoeCkge1xuXHRcdHZhciB5Lyo6YW55Ki8gPSBwYXJzZXhtbHRhZyh4KTtcblx0XHRzd2l0Y2goc3RyaXBfbnMoeVswXSkpIHtcblx0XHRcdGNhc2UgJzw/eG1sJzogYnJlYWs7XG5cdFx0XHRjYXNlICc8ZW5jcnlwdGlvbic6IGNhc2UgJzwvZW5jcnlwdGlvbj4nOiBicmVhaztcblx0XHRcdGNhc2UgJzxrZXlEYXRhJzogS2V5RGF0YS5mb3JFYWNoKGZ1bmN0aW9uKGspIHsgb1trXSA9IHlba107IH0pOyBicmVhaztcblx0XHRcdGNhc2UgJzxkYXRhSW50ZWdyaXR5Jzogby5lbmNyeXB0ZWRIbWFjS2V5ID0geS5lbmNyeXB0ZWRIbWFjS2V5OyBvLmVuY3J5cHRlZEhtYWNWYWx1ZSA9IHkuZW5jcnlwdGVkSG1hY1ZhbHVlOyBicmVhaztcblx0XHRcdGNhc2UgJzxrZXlFbmNyeXB0b3JzPic6IGNhc2UgJzxrZXlFbmNyeXB0b3JzJzogby5lbmNzID0gW107IGJyZWFrO1xuXHRcdFx0Y2FzZSAnPC9rZXlFbmNyeXB0b3JzPic6IGJyZWFrO1xuXG5cdFx0XHRjYXNlICc8a2V5RW5jcnlwdG9yJzogby51cmkgPSB5LnVyaTsgYnJlYWs7XG5cdFx0XHRjYXNlICc8L2tleUVuY3J5cHRvcj4nOiBicmVhaztcblx0XHRcdGNhc2UgJzxlbmNyeXB0ZWRLZXknOiBvLmVuY3MucHVzaCh5KTsgYnJlYWs7XG5cdFx0XHRkZWZhdWx0OiB0aHJvdyB5WzBdO1xuXHRcdH1cblx0fSk7XG5cdHJldHVybiBvO1xufVxuXG4vKiBbTVMtT0ZGQ1JZUFRPXSAyLjMuNS4xIFJDNCBDcnlwdG9BUEkgRW5jcnlwdGlvbiBIZWFkZXIgKi9cbmZ1bmN0aW9uIHBhcnNlX1JDNENyeXB0b0hlYWRlcihibG9iLCBsZW5ndGgvKjpudW1iZXIqLykge1xuXHR2YXIgbyA9IHt9O1xuXHR2YXIgdmVycyA9IG8uRW5jcnlwdGlvblZlcnNpb25JbmZvID0gcGFyc2VfQ1JZUFRPVmVyc2lvbihibG9iLCA0KTsgbGVuZ3RoIC09IDQ7XG5cdGlmKHZlcnMuTWlub3IgIT0gMikgdGhyb3cgbmV3IEVycm9yKCd1bnJlY29nbml6ZWQgbWlub3IgdmVyc2lvbiBjb2RlOiAnICsgdmVycy5NaW5vcik7XG5cdGlmKHZlcnMuTWFqb3IgPiA0IHx8IHZlcnMuTWFqb3IgPCAyKSB0aHJvdyBuZXcgRXJyb3IoJ3VucmVjb2duaXplZCBtYWpvciB2ZXJzaW9uIGNvZGU6ICcgKyB2ZXJzLk1ham9yKTtcblx0by5GbGFncyA9IGJsb2IucmVhZF9zaGlmdCg0KTsgbGVuZ3RoIC09IDQ7XG5cdHZhciBzeiA9IGJsb2IucmVhZF9zaGlmdCg0KTsgbGVuZ3RoIC09IDQ7XG5cdG8uRW5jcnlwdGlvbkhlYWRlciA9IHBhcnNlX0VuY3J5cHRpb25IZWFkZXIoYmxvYiwgc3opOyBsZW5ndGggLT0gc3o7XG5cdG8uRW5jcnlwdGlvblZlcmlmaWVyID0gcGFyc2VfRW5jcnlwdGlvblZlcmlmaWVyKGJsb2IsIGxlbmd0aCk7XG5cdHJldHVybiBvO1xufVxuLyogW01TLU9GRkNSWVBUT10gMi4zLjYuMSBSQzQgRW5jcnlwdGlvbiBIZWFkZXIgKi9cbmZ1bmN0aW9uIHBhcnNlX1JDNEhlYWRlcihibG9iLyo6OiwgbGVuZ3RoKi8pIHtcblx0dmFyIG8gPSB7fTtcblx0dmFyIHZlcnMgPSBvLkVuY3J5cHRpb25WZXJzaW9uSW5mbyA9IHBhcnNlX0NSWVBUT1ZlcnNpb24oYmxvYiwgNCk7XG5cdGlmKHZlcnMuTWFqb3IgIT0gMSB8fCB2ZXJzLk1pbm9yICE9IDEpIHRocm93ICd1bnJlY29nbml6ZWQgdmVyc2lvbiBjb2RlICcgKyB2ZXJzLk1ham9yICsgJyA6ICcgKyB2ZXJzLk1pbm9yO1xuXHRvLlNhbHQgPSBibG9iLnJlYWRfc2hpZnQoMTYpO1xuXHRvLkVuY3J5cHRlZFZlcmlmaWVyID0gYmxvYi5yZWFkX3NoaWZ0KDE2KTtcblx0by5FbmNyeXB0ZWRWZXJpZmllckhhc2ggPSBibG9iLnJlYWRfc2hpZnQoMTYpO1xuXHRyZXR1cm4gbztcbn1cblxuLyogW01TLU9GRkNSWVBUT10gMi4zLjcuMSBCaW5hcnkgRG9jdW1lbnQgUGFzc3dvcmQgVmVyaWZpZXIgRGVyaXZhdGlvbiAqL1xuZnVuY3Rpb24gY3J5cHRvX0NyZWF0ZVBhc3N3b3JkVmVyaWZpZXJfTWV0aG9kMShQYXNzd29yZC8qOnN0cmluZyovKSB7XG5cdHZhciBWZXJpZmllciA9IDB4MDAwMCwgUGFzc3dvcmRBcnJheTtcblx0dmFyIFBhc3N3b3JkRGVjb2RlZCA9IF9KUzJBTlNJKFBhc3N3b3JkKTtcblx0dmFyIGxlbiA9IFBhc3N3b3JkRGVjb2RlZC5sZW5ndGggKyAxLCBpLCBQYXNzd29yZEJ5dGU7XG5cdHZhciBJbnRlcm1lZGlhdGUxLCBJbnRlcm1lZGlhdGUyLCBJbnRlcm1lZGlhdGUzO1xuXHRQYXNzd29yZEFycmF5ID0gbmV3X3Jhd19idWYobGVuKTtcblx0UGFzc3dvcmRBcnJheVswXSA9IFBhc3N3b3JkRGVjb2RlZC5sZW5ndGg7XG5cdGZvcihpID0gMTsgaSAhPSBsZW47ICsraSkgUGFzc3dvcmRBcnJheVtpXSA9IFBhc3N3b3JkRGVjb2RlZFtpLTFdO1xuXHRmb3IoaSA9IGxlbi0xOyBpID49IDA7IC0taSkge1xuXHRcdFBhc3N3b3JkQnl0ZSA9IFBhc3N3b3JkQXJyYXlbaV07XG5cdFx0SW50ZXJtZWRpYXRlMSA9ICgoVmVyaWZpZXIgJiAweDQwMDApID09PSAweDAwMDApID8gMCA6IDE7XG5cdFx0SW50ZXJtZWRpYXRlMiA9IChWZXJpZmllciA8PCAxKSAmIDB4N0ZGRjtcblx0XHRJbnRlcm1lZGlhdGUzID0gSW50ZXJtZWRpYXRlMSB8IEludGVybWVkaWF0ZTI7XG5cdFx0VmVyaWZpZXIgPSBJbnRlcm1lZGlhdGUzIF4gUGFzc3dvcmRCeXRlO1xuXHR9XG5cdHJldHVybiBWZXJpZmllciBeIDB4Q0U0Qjtcbn1cblxuLyogW01TLU9GRkNSWVBUT10gMi4zLjcuMiBCaW5hcnkgRG9jdW1lbnQgWE9SIEFycmF5IEluaXRpYWxpemF0aW9uICovXG52YXIgY3J5cHRvX0NyZWF0ZVhvckFycmF5X01ldGhvZDEgPSAvKiNfX1BVUkVfXyovKGZ1bmN0aW9uKCkge1xuXHR2YXIgUGFkQXJyYXkgPSBbMHhCQiwgMHhGRiwgMHhGRiwgMHhCQSwgMHhGRiwgMHhGRiwgMHhCOSwgMHg4MCwgMHgwMCwgMHhCRSwgMHgwRiwgMHgwMCwgMHhCRiwgMHgwRiwgMHgwMF07XG5cdHZhciBJbml0aWFsQ29kZSA9IFsweEUxRjAsIDB4MUQwRiwgMHhDQzlDLCAweDg0QzAsIDB4MTEwQywgMHgwRTEwLCAweEYxQ0UsIDB4MzEzRSwgMHgxODcyLCAweEUxMzksIDB4RDQwRiwgMHg4NEY5LCAweDI4MEMsIDB4QTk2QSwgMHg0RUMzXTtcblx0dmFyIFhvck1hdHJpeCA9IFsweEFFRkMsIDB4NEREOSwgMHg5QkIyLCAweDI3NDUsIDB4NEU4QSwgMHg5RDE0LCAweDJBMDksIDB4N0I2MSwgMHhGNkMyLCAweEZEQTUsIDB4RUI2QiwgMHhDNkY3LCAweDlEQ0YsIDB4MkJCRiwgMHg0NTYzLCAweDhBQzYsIDB4MDVBRCwgMHgwQjVBLCAweDE2QjQsIDB4MkQ2OCwgMHg1QUQwLCAweDAzNzUsIDB4MDZFQSwgMHgwREQ0LCAweDFCQTgsIDB4Mzc1MCwgMHg2RUEwLCAweERENDAsIDB4RDg0OSwgMHhBMEIzLCAweDUxNDcsIDB4QTI4RSwgMHg1NTNELCAweEFBN0EsIDB4NDRENSwgMHg2RjQ1LCAweERFOEEsIDB4QUQzNSwgMHg0QTRCLCAweDk0OTYsIDB4MzkwRCwgMHg3MjFBLCAweEVCMjMsIDB4QzY2NywgMHg5Q0VGLCAweDI5RkYsIDB4NTNGRSwgMHhBN0ZDLCAweDVGRDksIDB4NDdEMywgMHg4RkE2LCAweDBGNkQsIDB4MUVEQSwgMHgzREI0LCAweDdCNjgsIDB4RjZEMCwgMHhCODYxLCAweDYwRTMsIDB4QzFDNiwgMHg5M0FELCAweDM3N0IsIDB4NkVGNiwgMHhEREVDLCAweDQ1QTAsIDB4OEI0MCwgMHgwNkExLCAweDBENDIsIDB4MUE4NCwgMHgzNTA4LCAweDZBMTAsIDB4QUE1MSwgMHg0NDgzLCAweDg5MDYsIDB4MDIyRCwgMHgwNDVBLCAweDA4QjQsIDB4MTE2OCwgMHg3NkI0LCAweEVENjgsIDB4Q0FGMSwgMHg4NUMzLCAweDFCQTcsIDB4Mzc0RSwgMHg2RTlDLCAweDM3MzAsIDB4NkU2MCwgMHhEQ0MwLCAweEE5QTEsIDB4NDM2MywgMHg4NkM2LCAweDFEQUQsIDB4MzMzMSwgMHg2NjYyLCAweENDQzQsIDB4ODlBOSwgMHgwMzczLCAweDA2RTYsIDB4MERDQywgMHgxMDIxLCAweDIwNDIsIDB4NDA4NCwgMHg4MTA4LCAweDEyMzEsIDB4MjQ2MiwgMHg0OEM0XTtcblx0dmFyIFJvciA9IGZ1bmN0aW9uKEJ5dGUpIHsgcmV0dXJuICgoQnl0ZS8yKSB8IChCeXRlKjEyOCkpICYgMHhGRjsgfTtcblx0dmFyIFhvclJvciA9IGZ1bmN0aW9uKGJ5dGUxLCBieXRlMikgeyByZXR1cm4gUm9yKGJ5dGUxIF4gYnl0ZTIpOyB9O1xuXHR2YXIgQ3JlYXRlWG9yS2V5X01ldGhvZDEgPSBmdW5jdGlvbihQYXNzd29yZCkge1xuXHRcdHZhciBYb3JLZXkgPSBJbml0aWFsQ29kZVtQYXNzd29yZC5sZW5ndGggLSAxXTtcblx0XHR2YXIgQ3VycmVudEVsZW1lbnQgPSAweDY4O1xuXHRcdGZvcih2YXIgaSA9IFBhc3N3b3JkLmxlbmd0aC0xOyBpID49IDA7IC0taSkge1xuXHRcdFx0dmFyIENoYXIgPSBQYXNzd29yZFtpXTtcblx0XHRcdGZvcih2YXIgaiA9IDA7IGogIT0gNzsgKytqKSB7XG5cdFx0XHRcdGlmKENoYXIgJiAweDQwKSBYb3JLZXkgXj0gWG9yTWF0cml4W0N1cnJlbnRFbGVtZW50XTtcblx0XHRcdFx0Q2hhciAqPSAyOyAtLUN1cnJlbnRFbGVtZW50O1xuXHRcdFx0fVxuXHRcdH1cblx0XHRyZXR1cm4gWG9yS2V5O1xuXHR9O1xuXHRyZXR1cm4gZnVuY3Rpb24ocGFzc3dvcmQvKjpzdHJpbmcqLykge1xuXHRcdHZhciBQYXNzd29yZCA9IF9KUzJBTlNJKHBhc3N3b3JkKTtcblx0XHR2YXIgWG9yS2V5ID0gQ3JlYXRlWG9yS2V5X01ldGhvZDEoUGFzc3dvcmQpO1xuXHRcdHZhciBJbmRleCA9IFBhc3N3b3JkLmxlbmd0aDtcblx0XHR2YXIgT2JmdXNjYXRpb25BcnJheSA9IG5ld19yYXdfYnVmKDE2KTtcblx0XHRmb3IodmFyIGkgPSAwOyBpICE9IDE2OyArK2kpIE9iZnVzY2F0aW9uQXJyYXlbaV0gPSAweDAwO1xuXHRcdHZhciBUZW1wLCBQYXNzd29yZExhc3RDaGFyLCBQYWRJbmRleDtcblx0XHRpZigoSW5kZXggJiAxKSA9PT0gMSkge1xuXHRcdFx0VGVtcCA9IFhvcktleSA+PiA4O1xuXHRcdFx0T2JmdXNjYXRpb25BcnJheVtJbmRleF0gPSBYb3JSb3IoUGFkQXJyYXlbMF0sIFRlbXApO1xuXHRcdFx0LS1JbmRleDtcblx0XHRcdFRlbXAgPSBYb3JLZXkgJiAweEZGO1xuXHRcdFx0UGFzc3dvcmRMYXN0Q2hhciA9IFBhc3N3b3JkW1Bhc3N3b3JkLmxlbmd0aCAtIDFdO1xuXHRcdFx0T2JmdXNjYXRpb25BcnJheVtJbmRleF0gPSBYb3JSb3IoUGFzc3dvcmRMYXN0Q2hhciwgVGVtcCk7XG5cdFx0fVxuXHRcdHdoaWxlKEluZGV4ID4gMCkge1xuXHRcdFx0LS1JbmRleDtcblx0XHRcdFRlbXAgPSBYb3JLZXkgPj4gODtcblx0XHRcdE9iZnVzY2F0aW9uQXJyYXlbSW5kZXhdID0gWG9yUm9yKFBhc3N3b3JkW0luZGV4XSwgVGVtcCk7XG5cdFx0XHQtLUluZGV4O1xuXHRcdFx0VGVtcCA9IFhvcktleSAmIDB4RkY7XG5cdFx0XHRPYmZ1c2NhdGlvbkFycmF5W0luZGV4XSA9IFhvclJvcihQYXNzd29yZFtJbmRleF0sIFRlbXApO1xuXHRcdH1cblx0XHRJbmRleCA9IDE1O1xuXHRcdFBhZEluZGV4ID0gMTUgLSBQYXNzd29yZC5sZW5ndGg7XG5cdFx0d2hpbGUoUGFkSW5kZXggPiAwKSB7XG5cdFx0XHRUZW1wID0gWG9yS2V5ID4+IDg7XG5cdFx0XHRPYmZ1c2NhdGlvbkFycmF5W0luZGV4XSA9IFhvclJvcihQYWRBcnJheVtQYWRJbmRleF0sIFRlbXApO1xuXHRcdFx0LS1JbmRleDtcblx0XHRcdC0tUGFkSW5kZXg7XG5cdFx0XHRUZW1wID0gWG9yS2V5ICYgMHhGRjtcblx0XHRcdE9iZnVzY2F0aW9uQXJyYXlbSW5kZXhdID0gWG9yUm9yKFBhc3N3b3JkW0luZGV4XSwgVGVtcCk7XG5cdFx0XHQtLUluZGV4O1xuXHRcdFx0LS1QYWRJbmRleDtcblx0XHR9XG5cdFx0cmV0dXJuIE9iZnVzY2F0aW9uQXJyYXk7XG5cdH07XG59KSgpO1xuXG4vKiBbTVMtT0ZGQ1JZUFRPXSAyLjMuNy4zIEJpbmFyeSBEb2N1bWVudCBYT1IgRGF0YSBUcmFuc2Zvcm1hdGlvbiBNZXRob2QgMSAqL1xudmFyIGNyeXB0b19EZWNyeXB0RGF0YV9NZXRob2QxID0gZnVuY3Rpb24ocGFzc3dvcmQvKjpzdHJpbmcqLywgRGF0YSwgWG9yQXJyYXlJbmRleCwgWG9yQXJyYXksIE8pIHtcblx0LyogSWYgWG9yQXJyYXkgaXMgc2V0LCB1c2UgaXQ7IGlmIE8gaXMgbm90IHNldCwgbWFrZSBjaGFuZ2VzIGluLXBsYWNlICovXG5cdGlmKCFPKSBPID0gRGF0YTtcblx0aWYoIVhvckFycmF5KSBYb3JBcnJheSA9IGNyeXB0b19DcmVhdGVYb3JBcnJheV9NZXRob2QxKHBhc3N3b3JkKTtcblx0dmFyIEluZGV4LCBWYWx1ZTtcblx0Zm9yKEluZGV4ID0gMDsgSW5kZXggIT0gRGF0YS5sZW5ndGg7ICsrSW5kZXgpIHtcblx0XHRWYWx1ZSA9IERhdGFbSW5kZXhdO1xuXHRcdFZhbHVlIF49IFhvckFycmF5W1hvckFycmF5SW5kZXhdO1xuXHRcdFZhbHVlID0gKChWYWx1ZT4+NSkgfCAoVmFsdWU8PDMpKSAmIDB4RkY7XG5cdFx0T1tJbmRleF0gPSBWYWx1ZTtcblx0XHQrK1hvckFycmF5SW5kZXg7XG5cdH1cblx0cmV0dXJuIFtPLCBYb3JBcnJheUluZGV4LCBYb3JBcnJheV07XG59O1xuXG52YXIgY3J5cHRvX01ha2VYb3JEZWNyeXB0b3IgPSBmdW5jdGlvbihwYXNzd29yZC8qOnN0cmluZyovKSB7XG5cdHZhciBYb3JBcnJheUluZGV4ID0gMCwgWG9yQXJyYXkgPSBjcnlwdG9fQ3JlYXRlWG9yQXJyYXlfTWV0aG9kMShwYXNzd29yZCk7XG5cdHJldHVybiBmdW5jdGlvbihEYXRhKSB7XG5cdFx0dmFyIE8gPSBjcnlwdG9fRGVjcnlwdERhdGFfTWV0aG9kMShcIlwiLCBEYXRhLCBYb3JBcnJheUluZGV4LCBYb3JBcnJheSk7XG5cdFx0WG9yQXJyYXlJbmRleCA9IE9bMV07XG5cdFx0cmV0dXJuIE9bMF07XG5cdH07XG59O1xuXG4vKiAyLjUuMzQzICovXG5mdW5jdGlvbiBwYXJzZV9YT1JPYmZ1c2NhdGlvbihibG9iLCBsZW5ndGgsIG9wdHMsIG91dCkge1xuXHR2YXIgbyA9ICh7IGtleTogcGFyc2V1aW50MTYoYmxvYiksIHZlcmlmaWNhdGlvbkJ5dGVzOiBwYXJzZXVpbnQxNihibG9iKSB9Lyo6YW55Ki8pO1xuXHRpZihvcHRzLnBhc3N3b3JkKSBvLnZlcmlmaWVyID0gY3J5cHRvX0NyZWF0ZVBhc3N3b3JkVmVyaWZpZXJfTWV0aG9kMShvcHRzLnBhc3N3b3JkKTtcblx0b3V0LnZhbGlkID0gby52ZXJpZmljYXRpb25CeXRlcyA9PT0gby52ZXJpZmllcjtcblx0aWYob3V0LnZhbGlkKSBvdXQuaW5zaXR1ID0gY3J5cHRvX01ha2VYb3JEZWNyeXB0b3Iob3B0cy5wYXNzd29yZCk7XG5cdHJldHVybiBvO1xufVxuXG4vKiAyLjQuMTE3ICovXG5mdW5jdGlvbiBwYXJzZV9GaWxlUGFzc0hlYWRlcihibG9iLCBsZW5ndGgvKjpudW1iZXIqLywgb28pIHtcblx0dmFyIG8gPSBvbyB8fCB7fTsgby5JbmZvID0gYmxvYi5yZWFkX3NoaWZ0KDIpOyBibG9iLmwgLT0gMjtcblx0aWYoby5JbmZvID09PSAxKSBvLkRhdGEgPSBwYXJzZV9SQzRIZWFkZXIoYmxvYiwgbGVuZ3RoKTtcblx0ZWxzZSBvLkRhdGEgPSBwYXJzZV9SQzRDcnlwdG9IZWFkZXIoYmxvYiwgbGVuZ3RoKTtcblx0cmV0dXJuIG87XG59XG5mdW5jdGlvbiBwYXJzZV9GaWxlUGFzcyhibG9iLCBsZW5ndGgvKjpudW1iZXIqLywgb3B0cykge1xuXHR2YXIgbyA9ICh7IFR5cGU6IG9wdHMuYmlmZiA+PSA4ID8gYmxvYi5yZWFkX3NoaWZ0KDIpIDogMCB9Lyo6YW55Ki8pOyAvKiB3RW5jcnlwdGlvblR5cGUgKi9cblx0aWYoby5UeXBlKSBwYXJzZV9GaWxlUGFzc0hlYWRlcihibG9iLCBsZW5ndGgtMiwgbyk7XG5cdGVsc2UgcGFyc2VfWE9ST2JmdXNjYXRpb24oYmxvYiwgb3B0cy5iaWZmID49IDggPyBsZW5ndGggOiBsZW5ndGggLSAyLCBvcHRzLCBvKTtcblx0cmV0dXJuIG87XG59XG5cblxudmFyIFJURiA9IC8qI19fUFVSRV9fKi8oZnVuY3Rpb24oKSB7XG5cdGZ1bmN0aW9uIHJ0Zl90b19zaGVldChkLyo6UmF3RGF0YSovLCBvcHRzKS8qOldvcmtzaGVldCovIHtcblx0XHRzd2l0Y2gob3B0cy50eXBlKSB7XG5cdFx0XHRjYXNlICdiYXNlNjQnOiByZXR1cm4gcnRmX3RvX3NoZWV0X3N0cihCYXNlNjRfZGVjb2RlKGQpLCBvcHRzKTtcblx0XHRcdGNhc2UgJ2JpbmFyeSc6IHJldHVybiBydGZfdG9fc2hlZXRfc3RyKGQsIG9wdHMpO1xuXHRcdFx0Y2FzZSAnYnVmZmVyJzogcmV0dXJuIHJ0Zl90b19zaGVldF9zdHIoaGFzX2J1ZiAmJiBCdWZmZXIuaXNCdWZmZXIoZCkgPyBkLnRvU3RyaW5nKCdiaW5hcnknKSA6IGEycyhkKSwgb3B0cyk7XG5cdFx0XHRjYXNlICdhcnJheSc6ICByZXR1cm4gcnRmX3RvX3NoZWV0X3N0cihjYzJzdHIoZCksIG9wdHMpO1xuXHRcdH1cblx0XHR0aHJvdyBuZXcgRXJyb3IoXCJVbnJlY29nbml6ZWQgdHlwZSBcIiArIG9wdHMudHlwZSk7XG5cdH1cblxuXHQvKiBUT0RPOiB0aGlzIGlzIGEgc3R1YiAqL1xuXHRmdW5jdGlvbiBydGZfdG9fc2hlZXRfc3RyKHN0ci8qOnN0cmluZyovLCBvcHRzKS8qOldvcmtzaGVldCovIHtcblx0XHR2YXIgbyA9IG9wdHMgfHwge307XG5cdFx0dmFyIHdzLyo6V29ya3NoZWV0Ki8gPSBvLmRlbnNlID8gKFtdLyo6YW55Ki8pIDogKHt9Lyo6YW55Ki8pO1xuXG5cdFx0dmFyIHJvd3MgPSBzdHIubWF0Y2goL1xcXFx0cm93ZC4qP1xcXFxyb3dcXGIvZyk7XG5cdFx0aWYoIXJvd3MubGVuZ3RoKSB0aHJvdyBuZXcgRXJyb3IoXCJSVEYgbWlzc2luZyB0YWJsZVwiKTtcblx0XHR2YXIgcmFuZ2UvKjpSYW5nZSovID0gKHtzOiB7YzowLCByOjB9LCBlOiB7YzowLCByOnJvd3MubGVuZ3RoIC0gMX19Lyo6YW55Ki8pO1xuXHRcdHJvd3MuZm9yRWFjaChmdW5jdGlvbihyb3d0ZiwgUikge1xuXHRcdFx0aWYoQXJyYXkuaXNBcnJheSh3cykpIHdzW1JdID0gW107XG5cdFx0XHR2YXIgcnRmcmUgPSAvXFxcXFxcdytcXGIvZztcblx0XHRcdHZhciBsYXN0X2luZGV4ID0gMDtcblx0XHRcdHZhciByZXM7XG5cdFx0XHR2YXIgQyA9IC0xO1xuXHRcdFx0d2hpbGUoKHJlcyA9IHJ0ZnJlLmV4ZWMocm93dGYpKSkge1xuXHRcdFx0XHRzd2l0Y2gocmVzWzBdKSB7XG5cdFx0XHRcdFx0Y2FzZSBcIlxcXFxjZWxsXCI6XG5cdFx0XHRcdFx0XHR2YXIgZGF0YSA9IHJvd3RmLnNsaWNlKGxhc3RfaW5kZXgsIHJ0ZnJlLmxhc3RJbmRleCAtIHJlc1swXS5sZW5ndGgpO1xuXHRcdFx0XHRcdFx0aWYoZGF0YVswXSA9PSBcIiBcIikgZGF0YSA9IGRhdGEuc2xpY2UoMSk7XG5cdFx0XHRcdFx0XHQrK0M7XG5cdFx0XHRcdFx0XHRpZihkYXRhLmxlbmd0aCkge1xuXHRcdFx0XHRcdFx0XHQvLyBUT0RPOiB2YWx1ZSBwYXJzaW5nLCBpbmNsdWRpbmcgY29kZXBhZ2UgYWRqdXN0bWVudHNcblx0XHRcdFx0XHRcdFx0dmFyIGNlbGwgPSB7djogZGF0YSwgdDpcInNcIn07XG5cdFx0XHRcdFx0XHRcdGlmKEFycmF5LmlzQXJyYXkod3MpKSB3c1tSXVtDXSA9IGNlbGw7XG5cdFx0XHRcdFx0XHRcdGVsc2Ugd3NbZW5jb2RlX2NlbGwoe3I6UiwgYzpDfSldID0gY2VsbDtcblx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHRcdGJyZWFrO1xuXHRcdFx0XHR9XG5cdFx0XHRcdGxhc3RfaW5kZXggPSBydGZyZS5sYXN0SW5kZXg7XG5cdFx0XHR9XG5cdFx0XHRpZihDID4gcmFuZ2UuZS5jKSByYW5nZS5lLmMgPSBDO1xuXHRcdH0pO1xuXHRcdHdzWychcmVmJ10gPSBlbmNvZGVfcmFuZ2UocmFuZ2UpO1xuXHRcdHJldHVybiB3cztcblx0fVxuXG5cdGZ1bmN0aW9uIHJ0Zl90b193b3JrYm9vayhkLyo6UmF3RGF0YSovLCBvcHRzKS8qOldvcmtib29rKi8geyByZXR1cm4gc2hlZXRfdG9fd29ya2Jvb2socnRmX3RvX3NoZWV0KGQsIG9wdHMpLCBvcHRzKTsgfVxuXG5cdC8qIFRPRE86IHRoaXMgaXMgYSBzdHViICovXG5cdGZ1bmN0aW9uIHNoZWV0X3RvX3J0Zih3cy8qOldvcmtzaGVldCovLyo6Oiwgb3B0cyovKS8qOnN0cmluZyovIHtcblx0XHR2YXIgbyA9IFtcIntcXFxccnRmMVxcXFxhbnNpXCJdO1xuXHRcdHZhciByID0gc2FmZV9kZWNvZGVfcmFuZ2Uod3NbJyFyZWYnXSksIGNlbGwvKjpDZWxsKi87XG5cdFx0dmFyIGRlbnNlID0gQXJyYXkuaXNBcnJheSh3cyk7XG5cdFx0Zm9yKHZhciBSID0gci5zLnI7IFIgPD0gci5lLnI7ICsrUikge1xuXHRcdFx0by5wdXNoKFwiXFxcXHRyb3dkXFxcXHRyYXV0b2ZpdDFcIik7XG5cdFx0XHRmb3IodmFyIEMgPSByLnMuYzsgQyA8PSByLmUuYzsgKytDKSBvLnB1c2goXCJcXFxcY2VsbHhcIiArIChDKzEpKTtcblx0XHRcdG8ucHVzaChcIlxcXFxwYXJkXFxcXGludGJsXCIpO1xuXHRcdFx0Zm9yKEMgPSByLnMuYzsgQyA8PSByLmUuYzsgKytDKSB7XG5cdFx0XHRcdHZhciBjb29yZCA9IGVuY29kZV9jZWxsKHtyOlIsYzpDfSk7XG5cdFx0XHRcdGNlbGwgPSBkZW5zZSA/ICh3c1tSXXx8W10pW0NdOiB3c1tjb29yZF07XG5cdFx0XHRcdGlmKCFjZWxsIHx8IGNlbGwudiA9PSBudWxsICYmICghY2VsbC5mIHx8IGNlbGwuRikpIGNvbnRpbnVlO1xuXHRcdFx0XHRvLnB1c2goXCIgXCIgKyAoY2VsbC53IHx8IChmb3JtYXRfY2VsbChjZWxsKSwgY2VsbC53KSkpO1xuXHRcdFx0XHRvLnB1c2goXCJcXFxcY2VsbFwiKTtcblx0XHRcdH1cblx0XHRcdG8ucHVzaChcIlxcXFxwYXJkXFxcXGludGJsXFxcXHJvd1wiKTtcblx0XHR9XG5cdFx0cmV0dXJuIG8uam9pbihcIlwiKSArIFwifVwiO1xuXHR9XG5cblx0cmV0dXJuIHtcblx0XHR0b193b3JrYm9vazogcnRmX3RvX3dvcmtib29rLFxuXHRcdHRvX3NoZWV0OiBydGZfdG9fc2hlZXQsXG5cdFx0ZnJvbV9zaGVldDogc2hlZXRfdG9fcnRmXG5cdH07XG59KSgpO1xuZnVuY3Rpb24gaGV4MlJHQihoKSB7XG5cdHZhciBvID0gaC5zbGljZShoWzBdPT09XCIjXCI/MTowKS5zbGljZSgwLDYpO1xuXHRyZXR1cm4gW3BhcnNlSW50KG8uc2xpY2UoMCwyKSwxNikscGFyc2VJbnQoby5zbGljZSgyLDQpLDE2KSxwYXJzZUludChvLnNsaWNlKDQsNiksMTYpXTtcbn1cbmZ1bmN0aW9uIHJnYjJIZXgocmdiKSB7XG5cdGZvcih2YXIgaT0wLG89MTsgaSE9MzsgKytpKSBvID0gbyoyNTYgKyAocmdiW2ldPjI1NT8yNTU6cmdiW2ldPDA/MDpyZ2JbaV0pO1xuXHRyZXR1cm4gby50b1N0cmluZygxNikudG9VcHBlckNhc2UoKS5zbGljZSgxKTtcbn1cblxuZnVuY3Rpb24gcmdiMkhTTChyZ2IpIHtcblx0dmFyIFIgPSByZ2JbMF0vMjU1LCBHID0gcmdiWzFdLzI1NSwgQj1yZ2JbMl0vMjU1O1xuXHR2YXIgTSA9IE1hdGgubWF4KFIsIEcsIEIpLCBtID0gTWF0aC5taW4oUiwgRywgQiksIEMgPSBNIC0gbTtcblx0aWYoQyA9PT0gMCkgcmV0dXJuIFswLCAwLCBSXTtcblxuXHR2YXIgSDYgPSAwLCBTID0gMCwgTDIgPSAoTSArIG0pO1xuXHRTID0gQyAvIChMMiA+IDEgPyAyIC0gTDIgOiBMMik7XG5cdHN3aXRjaChNKXtcblx0XHRjYXNlIFI6IEg2ID0gKChHIC0gQikgLyBDICsgNiklNjsgYnJlYWs7XG5cdFx0Y2FzZSBHOiBINiA9ICgoQiAtIFIpIC8gQyArIDIpOyBicmVhaztcblx0XHRjYXNlIEI6IEg2ID0gKChSIC0gRykgLyBDICsgNCk7IGJyZWFrO1xuXHR9XG5cdHJldHVybiBbSDYgLyA2LCBTLCBMMiAvIDJdO1xufVxuXG5mdW5jdGlvbiBoc2wyUkdCKGhzbCl7XG5cdHZhciBIID0gaHNsWzBdLCBTID0gaHNsWzFdLCBMID0gaHNsWzJdO1xuXHR2YXIgQyA9IFMgKiAyICogKEwgPCAwLjUgPyBMIDogMSAtIEwpLCBtID0gTCAtIEMvMjtcblx0dmFyIHJnYiA9IFttLG0sbV0sIGg2ID0gNipIO1xuXG5cdHZhciBYO1xuXHRpZihTICE9PSAwKSBzd2l0Y2goaDZ8MCkge1xuXHRcdGNhc2UgMDogY2FzZSA2OiBYID0gQyAqIGg2OyByZ2JbMF0gKz0gQzsgcmdiWzFdICs9IFg7IGJyZWFrO1xuXHRcdGNhc2UgMTogWCA9IEMgKiAoMiAtIGg2KTsgICByZ2JbMF0gKz0gWDsgcmdiWzFdICs9IEM7IGJyZWFrO1xuXHRcdGNhc2UgMjogWCA9IEMgKiAoaDYgLSAyKTsgICByZ2JbMV0gKz0gQzsgcmdiWzJdICs9IFg7IGJyZWFrO1xuXHRcdGNhc2UgMzogWCA9IEMgKiAoNCAtIGg2KTsgICByZ2JbMV0gKz0gWDsgcmdiWzJdICs9IEM7IGJyZWFrO1xuXHRcdGNhc2UgNDogWCA9IEMgKiAoaDYgLSA0KTsgICByZ2JbMl0gKz0gQzsgcmdiWzBdICs9IFg7IGJyZWFrO1xuXHRcdGNhc2UgNTogWCA9IEMgKiAoNiAtIGg2KTsgICByZ2JbMl0gKz0gWDsgcmdiWzBdICs9IEM7IGJyZWFrO1xuXHR9XG5cdGZvcih2YXIgaSA9IDA7IGkgIT0gMzsgKytpKSByZ2JbaV0gPSBNYXRoLnJvdW5kKHJnYltpXSoyNTUpO1xuXHRyZXR1cm4gcmdiO1xufVxuXG4vKiAxOC44LjMgYmdDb2xvciB0aW50IGFsZ29yaXRobSAqL1xuZnVuY3Rpb24gcmdiX3RpbnQoaGV4LCB0aW50KSB7XG5cdGlmKHRpbnQgPT09IDApIHJldHVybiBoZXg7XG5cdHZhciBoc2wgPSByZ2IySFNMKGhleDJSR0IoaGV4KSk7XG5cdGlmICh0aW50IDwgMCkgaHNsWzJdID0gaHNsWzJdICogKDEgKyB0aW50KTtcblx0ZWxzZSBoc2xbMl0gPSAxIC0gKDEgLSBoc2xbMl0pICogKDEgLSB0aW50KTtcblx0cmV0dXJuIHJnYjJIZXgoaHNsMlJHQihoc2wpKTtcbn1cblxuLyogMTguMy4xLjEzIHdpZHRoIGNhbGN1bGF0aW9ucyAqL1xuLyogW01TLU9JMjk1MDBdIDIuMS41OTUgQ29sdW1uIFdpZHRoICYgRm9ybWF0dGluZyAqL1xudmFyIERFRl9NRFcgPSA2LCBNQVhfTURXID0gMTUsIE1JTl9NRFcgPSAxLCBNRFcgPSBERUZfTURXO1xuZnVuY3Rpb24gd2lkdGgycHgod2lkdGgpIHsgcmV0dXJuIE1hdGguZmxvb3IoKCB3aWR0aCArIChNYXRoLnJvdW5kKDEyOC9NRFcpKS8yNTYgKSogTURXICk7IH1cbmZ1bmN0aW9uIHB4MmNoYXIocHgpIHsgcmV0dXJuIChNYXRoLmZsb29yKChweCAtIDUpL01EVyAqIDEwMCArIDAuNSkpLzEwMDsgfVxuZnVuY3Rpb24gY2hhcjJ3aWR0aChjaHIpIHsgcmV0dXJuIChNYXRoLnJvdW5kKChjaHIgKiBNRFcgKyA1KS9NRFcqMjU2KSkvMjU2OyB9XG4vL2Z1bmN0aW9uIHB4MmNoYXJfKHB4KSB7IHJldHVybiAoKChweCAtIDUpL01EVyAqIDEwMCArIDAuNSkpLzEwMDsgfVxuLy9mdW5jdGlvbiBjaGFyMndpZHRoXyhjaHIpIHsgcmV0dXJuICgoKGNociAqIE1EVyArIDUpL01EVyoyNTYpKS8yNTY7IH1cbmZ1bmN0aW9uIGN5Y2xlX3dpZHRoKGNvbGx3KSB7IHJldHVybiBjaGFyMndpZHRoKHB4MmNoYXIod2lkdGgycHgoY29sbHcpKSk7IH1cbi8qIFhMU1gvWExTQi9YTFMgc3BlY2lmeSB3aWR0aCBpbiB1bml0cyBvZiBNRFcgKi9cbmZ1bmN0aW9uIGZpbmRfbWR3X2NvbHcoY29sbHcpIHtcblx0dmFyIGRlbHRhID0gTWF0aC5hYnMoY29sbHcgLSBjeWNsZV93aWR0aChjb2xsdykpLCBfTURXID0gTURXO1xuXHRpZihkZWx0YSA+IDAuMDA1KSBmb3IoTURXPU1JTl9NRFc7IE1EVzxNQVhfTURXOyArK01EVykgaWYoTWF0aC5hYnMoY29sbHcgLSBjeWNsZV93aWR0aChjb2xsdykpIDw9IGRlbHRhKSB7IGRlbHRhID0gTWF0aC5hYnMoY29sbHcgLSBjeWNsZV93aWR0aChjb2xsdykpOyBfTURXID0gTURXOyB9XG5cdE1EVyA9IF9NRFc7XG59XG4vKiBYTE1MIHNwZWNpZmllcyB3aWR0aCBpbiB0ZXJtcyBvZiBwaXhlbHMgKi9cbi8qZnVuY3Rpb24gZmluZF9tZHdfd3B4KHdweCkge1xuXHR2YXIgZGVsdGEgPSBJbmZpbml0eSwgZ3Vlc3MgPSAwLCBfTURXID0gTUlOX01EVztcblx0Zm9yKE1EVz1NSU5fTURXOyBNRFc8TUFYX01EVzsgKytNRFcpIHtcblx0XHRndWVzcyA9IGNoYXIyd2lkdGhfKHB4MmNoYXJfKHdweCkpKjI1Njtcblx0XHRndWVzcyA9IChndWVzcykgJSAxO1xuXHRcdGlmKGd1ZXNzID4gMC41KSBndWVzcy0tO1xuXHRcdGlmKE1hdGguYWJzKGd1ZXNzKSA8IGRlbHRhKSB7IGRlbHRhID0gTWF0aC5hYnMoZ3Vlc3MpOyBfTURXID0gTURXOyB9XG5cdH1cblx0TURXID0gX01EVztcbn0qL1xuXG5mdW5jdGlvbiBwcm9jZXNzX2NvbChjb2xsLyo6Q29sSW5mbyovKSB7XG5cdGlmKGNvbGwud2lkdGgpIHtcblx0XHRjb2xsLndweCA9IHdpZHRoMnB4KGNvbGwud2lkdGgpO1xuXHRcdGNvbGwud2NoID0gcHgyY2hhcihjb2xsLndweCk7XG5cdFx0Y29sbC5NRFcgPSBNRFc7XG5cdH0gZWxzZSBpZihjb2xsLndweCkge1xuXHRcdGNvbGwud2NoID0gcHgyY2hhcihjb2xsLndweCk7XG5cdFx0Y29sbC53aWR0aCA9IGNoYXIyd2lkdGgoY29sbC53Y2gpO1xuXHRcdGNvbGwuTURXID0gTURXO1xuXHR9IGVsc2UgaWYodHlwZW9mIGNvbGwud2NoID09ICdudW1iZXInKSB7XG5cdFx0Y29sbC53aWR0aCA9IGNoYXIyd2lkdGgoY29sbC53Y2gpO1xuXHRcdGNvbGwud3B4ID0gd2lkdGgycHgoY29sbC53aWR0aCk7XG5cdFx0Y29sbC5NRFcgPSBNRFc7XG5cdH1cblx0aWYoY29sbC5jdXN0b21XaWR0aCkgZGVsZXRlIGNvbGwuY3VzdG9tV2lkdGg7XG59XG5cbnZhciBERUZfUFBJID0gOTYsIFBQSSA9IERFRl9QUEk7XG5mdW5jdGlvbiBweDJwdChweCkgeyByZXR1cm4gcHggKiA5NiAvIFBQSTsgfVxuZnVuY3Rpb24gcHQycHgocHQpIHsgcmV0dXJuIHB0ICogUFBJIC8gOTY7IH1cblxuLyogW01TLUVYU1BYTUwzXSAyLjQuNTQgU1RfZW5tUGF0dGVybiAqL1xudmFyIFhMTUxQYXR0ZXJuVHlwZU1hcCA9IHtcblx0XCJOb25lXCI6IFwibm9uZVwiLFxuXHRcIlNvbGlkXCI6IFwic29saWRcIixcblx0XCJHcmF5NTBcIjogXCJtZWRpdW1HcmF5XCIsXG5cdFwiR3JheTc1XCI6IFwiZGFya0dyYXlcIixcblx0XCJHcmF5MjVcIjogXCJsaWdodEdyYXlcIixcblx0XCJIb3J6U3RyaXBlXCI6IFwiZGFya0hvcml6b250YWxcIixcblx0XCJWZXJ0U3RyaXBlXCI6IFwiZGFya1ZlcnRpY2FsXCIsXG5cdFwiUmV2ZXJzZURpYWdTdHJpcGVcIjogXCJkYXJrRG93blwiLFxuXHRcIkRpYWdTdHJpcGVcIjogXCJkYXJrVXBcIixcblx0XCJEaWFnQ3Jvc3NcIjogXCJkYXJrR3JpZFwiLFxuXHRcIlRoaWNrRGlhZ0Nyb3NzXCI6IFwiZGFya1RyZWxsaXNcIixcblx0XCJUaGluSG9yelN0cmlwZVwiOiBcImxpZ2h0SG9yaXpvbnRhbFwiLFxuXHRcIlRoaW5WZXJ0U3RyaXBlXCI6IFwibGlnaHRWZXJ0aWNhbFwiLFxuXHRcIlRoaW5SZXZlcnNlRGlhZ1N0cmlwZVwiOiBcImxpZ2h0RG93blwiLFxuXHRcIlRoaW5Ib3J6Q3Jvc3NcIjogXCJsaWdodEdyaWRcIlxufTtcblxuLyogMTguOC41IGJvcmRlcnMgQ1RfQm9yZGVycyAqL1xuZnVuY3Rpb24gcGFyc2VfYm9yZGVycyh0LCBzdHlsZXMsIHRoZW1lcywgb3B0cykge1xuXHRzdHlsZXMuQm9yZGVycyA9IFtdO1xuXHR2YXIgYm9yZGVyID0ge307XG5cdHZhciBwYXNzID0gZmFsc2U7XG5cdCh0WzBdLm1hdGNoKHRhZ3JlZ2V4KXx8W10pLmZvckVhY2goZnVuY3Rpb24oeCkge1xuXHRcdHZhciB5ID0gcGFyc2V4bWx0YWcoeCk7XG5cdFx0c3dpdGNoKHN0cmlwX25zKHlbMF0pKSB7XG5cdFx0XHRjYXNlICc8Ym9yZGVycyc6IGNhc2UgJzxib3JkZXJzPic6IGNhc2UgJzwvYm9yZGVycz4nOiBicmVhaztcblxuXHRcdFx0LyogMTguOC40IGJvcmRlciBDVF9Cb3JkZXIgKi9cblx0XHRcdGNhc2UgJzxib3JkZXInOiBjYXNlICc8Ym9yZGVyPic6IGNhc2UgJzxib3JkZXIvPic6XG5cdFx0XHRcdGJvcmRlciA9IC8qOjooKi97fS8qOjogOmFueSkqLztcblx0XHRcdFx0aWYoeS5kaWFnb25hbFVwKSBib3JkZXIuZGlhZ29uYWxVcCA9IHBhcnNleG1sYm9vbCh5LmRpYWdvbmFsVXApO1xuXHRcdFx0XHRpZih5LmRpYWdvbmFsRG93bikgYm9yZGVyLmRpYWdvbmFsRG93biA9IHBhcnNleG1sYm9vbCh5LmRpYWdvbmFsRG93bik7XG5cdFx0XHRcdHN0eWxlcy5Cb3JkZXJzLnB1c2goYm9yZGVyKTtcblx0XHRcdFx0YnJlYWs7XG5cdFx0XHRjYXNlICc8L2JvcmRlcj4nOiBicmVhaztcblxuXHRcdFx0Lyogbm90ZTogbm90IGluIHNwZWMsIGFwcGVhcnMgdG8gYmUgQ1RfQm9yZGVyUHIgKi9cblx0XHRcdGNhc2UgJzxsZWZ0Lz4nOiBicmVhaztcblx0XHRcdGNhc2UgJzxsZWZ0JzogY2FzZSAnPGxlZnQ+JzogYnJlYWs7XG5cdFx0XHRjYXNlICc8L2xlZnQ+JzogYnJlYWs7XG5cblx0XHRcdC8qIG5vdGU6IG5vdCBpbiBzcGVjLCBhcHBlYXJzIHRvIGJlIENUX0JvcmRlclByICovXG5cdFx0XHRjYXNlICc8cmlnaHQvPic6IGJyZWFrO1xuXHRcdFx0Y2FzZSAnPHJpZ2h0JzogY2FzZSAnPHJpZ2h0Pic6IGJyZWFrO1xuXHRcdFx0Y2FzZSAnPC9yaWdodD4nOiBicmVhaztcblxuXHRcdFx0LyogMTguOC40MyB0b3AgQ1RfQm9yZGVyUHIgKi9cblx0XHRcdGNhc2UgJzx0b3AvPic6IGJyZWFrO1xuXHRcdFx0Y2FzZSAnPHRvcCc6IGNhc2UgJzx0b3A+JzogYnJlYWs7XG5cdFx0XHRjYXNlICc8L3RvcD4nOiBicmVhaztcblxuXHRcdFx0LyogMTguOC42IGJvdHRvbSBDVF9Cb3JkZXJQciAqL1xuXHRcdFx0Y2FzZSAnPGJvdHRvbS8+JzogYnJlYWs7XG5cdFx0XHRjYXNlICc8Ym90dG9tJzogY2FzZSAnPGJvdHRvbT4nOiBicmVhaztcblx0XHRcdGNhc2UgJzwvYm90dG9tPic6IGJyZWFrO1xuXG5cdFx0XHQvKiAxOC44LjEzIGRpYWdvbmFsIENUX0JvcmRlclByICovXG5cdFx0XHRjYXNlICc8ZGlhZ29uYWwnOiBjYXNlICc8ZGlhZ29uYWw+JzogY2FzZSAnPGRpYWdvbmFsLz4nOiBicmVhaztcblx0XHRcdGNhc2UgJzwvZGlhZ29uYWw+JzogYnJlYWs7XG5cblx0XHRcdC8qIDE4LjguMjUgaG9yaXpvbnRhbCBDVF9Cb3JkZXJQciAqL1xuXHRcdFx0Y2FzZSAnPGhvcml6b250YWwnOiBjYXNlICc8aG9yaXpvbnRhbD4nOiBjYXNlICc8aG9yaXpvbnRhbC8+JzogYnJlYWs7XG5cdFx0XHRjYXNlICc8L2hvcml6b250YWw+JzogYnJlYWs7XG5cblx0XHRcdC8qIDE4LjguNDQgdmVydGljYWwgQ1RfQm9yZGVyUHIgKi9cblx0XHRcdGNhc2UgJzx2ZXJ0aWNhbCc6IGNhc2UgJzx2ZXJ0aWNhbD4nOiBjYXNlICc8dmVydGljYWwvPic6IGJyZWFrO1xuXHRcdFx0Y2FzZSAnPC92ZXJ0aWNhbD4nOiBicmVhaztcblxuXHRcdFx0LyogMTguOC4zNyBzdGFydCBDVF9Cb3JkZXJQciAqL1xuXHRcdFx0Y2FzZSAnPHN0YXJ0JzogY2FzZSAnPHN0YXJ0Pic6IGNhc2UgJzxzdGFydC8+JzogYnJlYWs7XG5cdFx0XHRjYXNlICc8L3N0YXJ0Pic6IGJyZWFrO1xuXG5cdFx0XHQvKiAxOC44LjE2IGVuZCBDVF9Cb3JkZXJQciAqL1xuXHRcdFx0Y2FzZSAnPGVuZCc6IGNhc2UgJzxlbmQ+JzogY2FzZSAnPGVuZC8+JzogYnJlYWs7XG5cdFx0XHRjYXNlICc8L2VuZD4nOiBicmVhaztcblxuXHRcdFx0LyogMTguOC4/IGNvbG9yIENUX0NvbG9yICovXG5cdFx0XHRjYXNlICc8Y29sb3InOiBjYXNlICc8Y29sb3I+Jzpcblx0XHRcdFx0YnJlYWs7XG5cdFx0XHRjYXNlICc8Y29sb3IvPic6IGNhc2UgJzwvY29sb3I+JzogYnJlYWs7XG5cblx0XHRcdC8qIDE4LjIuMTAgZXh0THN0IENUX0V4dGVuc2lvbkxpc3QgPyAqL1xuXHRcdFx0Y2FzZSAnPGV4dExzdCc6IGNhc2UgJzxleHRMc3Q+JzogY2FzZSAnPC9leHRMc3Q+JzogYnJlYWs7XG5cdFx0XHRjYXNlICc8ZXh0JzogcGFzcyA9IHRydWU7IGJyZWFrO1xuXHRcdFx0Y2FzZSAnPC9leHQ+JzogcGFzcyA9IGZhbHNlOyBicmVhaztcblx0XHRcdGRlZmF1bHQ6IGlmKG9wdHMgJiYgb3B0cy5XVEYpIHtcblx0XHRcdFx0aWYoIXBhc3MpIHRocm93IG5ldyBFcnJvcigndW5yZWNvZ25pemVkICcgKyB5WzBdICsgJyBpbiBib3JkZXJzJyk7XG5cdFx0XHR9XG5cdFx0fVxuXHR9KTtcbn1cblxuLyogMTguOC4yMSBmaWxscyBDVF9GaWxscyAqL1xuZnVuY3Rpb24gcGFyc2VfZmlsbHModCwgc3R5bGVzLCB0aGVtZXMsIG9wdHMpIHtcblx0c3R5bGVzLkZpbGxzID0gW107XG5cdHZhciBmaWxsID0ge307XG5cdHZhciBwYXNzID0gZmFsc2U7XG5cdCh0WzBdLm1hdGNoKHRhZ3JlZ2V4KXx8W10pLmZvckVhY2goZnVuY3Rpb24oeCkge1xuXHRcdHZhciB5ID0gcGFyc2V4bWx0YWcoeCk7XG5cdFx0c3dpdGNoKHN0cmlwX25zKHlbMF0pKSB7XG5cdFx0XHRjYXNlICc8ZmlsbHMnOiBjYXNlICc8ZmlsbHM+JzogY2FzZSAnPC9maWxscz4nOiBicmVhaztcblxuXHRcdFx0LyogMTguOC4yMCBmaWxsIENUX0ZpbGwgKi9cblx0XHRcdGNhc2UgJzxmaWxsPic6IGNhc2UgJzxmaWxsJzogY2FzZSAnPGZpbGwvPic6XG5cdFx0XHRcdGZpbGwgPSB7fTsgc3R5bGVzLkZpbGxzLnB1c2goZmlsbCk7IGJyZWFrO1xuXHRcdFx0Y2FzZSAnPC9maWxsPic6IGJyZWFrO1xuXG5cdFx0XHQvKiAxOC44LjI0IGdyYWRpZW50RmlsbCBDVF9HcmFkaWVudEZpbGwgKi9cblx0XHRcdGNhc2UgJzxncmFkaWVudEZpbGw+JzogYnJlYWs7XG5cdFx0XHRjYXNlICc8Z3JhZGllbnRGaWxsJzpcblx0XHRcdGNhc2UgJzwvZ3JhZGllbnRGaWxsPic6IHN0eWxlcy5GaWxscy5wdXNoKGZpbGwpOyBmaWxsID0ge307IGJyZWFrO1xuXG5cdFx0XHQvKiAxOC44LjMyIHBhdHRlcm5GaWxsIENUX1BhdHRlcm5GaWxsICovXG5cdFx0XHRjYXNlICc8cGF0dGVybkZpbGwnOiBjYXNlICc8cGF0dGVybkZpbGw+Jzpcblx0XHRcdFx0aWYoeS5wYXR0ZXJuVHlwZSkgZmlsbC5wYXR0ZXJuVHlwZSA9IHkucGF0dGVyblR5cGU7XG5cdFx0XHRcdGJyZWFrO1xuXHRcdFx0Y2FzZSAnPHBhdHRlcm5GaWxsLz4nOiBjYXNlICc8L3BhdHRlcm5GaWxsPic6IGJyZWFrO1xuXG5cdFx0XHQvKiAxOC44LjMgYmdDb2xvciBDVF9Db2xvciAqL1xuXHRcdFx0Y2FzZSAnPGJnQ29sb3InOlxuXHRcdFx0XHRpZighZmlsbC5iZ0NvbG9yKSBmaWxsLmJnQ29sb3IgPSB7fTtcblx0XHRcdFx0aWYoeS5pbmRleGVkKSBmaWxsLmJnQ29sb3IuaW5kZXhlZCA9IHBhcnNlSW50KHkuaW5kZXhlZCwgMTApO1xuXHRcdFx0XHRpZih5LnRoZW1lKSBmaWxsLmJnQ29sb3IudGhlbWUgPSBwYXJzZUludCh5LnRoZW1lLCAxMCk7XG5cdFx0XHRcdGlmKHkudGludCkgZmlsbC5iZ0NvbG9yLnRpbnQgPSBwYXJzZUZsb2F0KHkudGludCk7XG5cdFx0XHRcdC8qIEV4Y2VsIHVzZXMgQVJHQiBzdHJpbmdzICovXG5cdFx0XHRcdGlmKHkucmdiKSBmaWxsLmJnQ29sb3IucmdiID0geS5yZ2Iuc2xpY2UoLTYpO1xuXHRcdFx0XHRicmVhaztcblx0XHRcdGNhc2UgJzxiZ0NvbG9yLz4nOiBjYXNlICc8L2JnQ29sb3I+JzogYnJlYWs7XG5cblx0XHRcdC8qIDE4LjguMTkgZmdDb2xvciBDVF9Db2xvciAqL1xuXHRcdFx0Y2FzZSAnPGZnQ29sb3InOlxuXHRcdFx0XHRpZighZmlsbC5mZ0NvbG9yKSBmaWxsLmZnQ29sb3IgPSB7fTtcblx0XHRcdFx0aWYoeS50aGVtZSkgZmlsbC5mZ0NvbG9yLnRoZW1lID0gcGFyc2VJbnQoeS50aGVtZSwgMTApO1xuXHRcdFx0XHRpZih5LnRpbnQpIGZpbGwuZmdDb2xvci50aW50ID0gcGFyc2VGbG9hdCh5LnRpbnQpO1xuXHRcdFx0XHQvKiBFeGNlbCB1c2VzIEFSR0Igc3RyaW5ncyAqL1xuXHRcdFx0XHRpZih5LnJnYiAhPSBudWxsKSBmaWxsLmZnQ29sb3IucmdiID0geS5yZ2Iuc2xpY2UoLTYpO1xuXHRcdFx0XHRicmVhaztcblx0XHRcdGNhc2UgJzxmZ0NvbG9yLz4nOiBjYXNlICc8L2ZnQ29sb3I+JzogYnJlYWs7XG5cblx0XHRcdC8qIDE4LjguMzggc3RvcCBDVF9HcmFkaWVudFN0b3AgKi9cblx0XHRcdGNhc2UgJzxzdG9wJzogY2FzZSAnPHN0b3AvPic6IGJyZWFrO1xuXHRcdFx0Y2FzZSAnPC9zdG9wPic6IGJyZWFrO1xuXG5cdFx0XHQvKiAxOC44Lj8gY29sb3IgQ1RfQ29sb3IgKi9cblx0XHRcdGNhc2UgJzxjb2xvcic6IGNhc2UgJzxjb2xvci8+JzogYnJlYWs7XG5cdFx0XHRjYXNlICc8L2NvbG9yPic6IGJyZWFrO1xuXG5cdFx0XHQvKiAxOC4yLjEwIGV4dExzdCBDVF9FeHRlbnNpb25MaXN0ID8gKi9cblx0XHRcdGNhc2UgJzxleHRMc3QnOiBjYXNlICc8ZXh0THN0Pic6IGNhc2UgJzwvZXh0THN0Pic6IGJyZWFrO1xuXHRcdFx0Y2FzZSAnPGV4dCc6IHBhc3MgPSB0cnVlOyBicmVhaztcblx0XHRcdGNhc2UgJzwvZXh0Pic6IHBhc3MgPSBmYWxzZTsgYnJlYWs7XG5cdFx0XHRkZWZhdWx0OiBpZihvcHRzICYmIG9wdHMuV1RGKSB7XG5cdFx0XHRcdGlmKCFwYXNzKSB0aHJvdyBuZXcgRXJyb3IoJ3VucmVjb2duaXplZCAnICsgeVswXSArICcgaW4gZmlsbHMnKTtcblx0XHRcdH1cblx0XHR9XG5cdH0pO1xufVxuXG4vKiAxOC44LjIzIGZvbnRzIENUX0ZvbnRzICovXG5mdW5jdGlvbiBwYXJzZV9mb250cyh0LCBzdHlsZXMsIHRoZW1lcywgb3B0cykge1xuXHRzdHlsZXMuRm9udHMgPSBbXTtcblx0dmFyIGZvbnQgPSB7fTtcblx0dmFyIHBhc3MgPSBmYWxzZTtcblx0KHRbMF0ubWF0Y2godGFncmVnZXgpfHxbXSkuZm9yRWFjaChmdW5jdGlvbih4KSB7XG5cdFx0dmFyIHkgPSBwYXJzZXhtbHRhZyh4KTtcblx0XHRzd2l0Y2goc3RyaXBfbnMoeVswXSkpIHtcblx0XHRcdGNhc2UgJzxmb250cyc6IGNhc2UgJzxmb250cz4nOiBjYXNlICc8L2ZvbnRzPic6IGJyZWFrO1xuXG5cdFx0XHQvKiAxOC44LjIyIGZvbnQgQ1RfRm9udCAqL1xuXHRcdFx0Y2FzZSAnPGZvbnQnOiBjYXNlICc8Zm9udD4nOiBicmVhaztcblx0XHRcdGNhc2UgJzwvZm9udD4nOiBjYXNlICc8Zm9udC8+Jzpcblx0XHRcdFx0c3R5bGVzLkZvbnRzLnB1c2goZm9udCk7XG5cdFx0XHRcdGZvbnQgPSB7fTtcblx0XHRcdFx0YnJlYWs7XG5cblx0XHRcdC8qIDE4LjguMjkgbmFtZSBDVF9Gb250TmFtZSAqL1xuXHRcdFx0Y2FzZSAnPG5hbWUnOiBpZih5LnZhbCkgZm9udC5uYW1lID0gdXRmOHJlYWQoeS52YWwpOyBicmVhaztcblx0XHRcdGNhc2UgJzxuYW1lLz4nOiBjYXNlICc8L25hbWU+JzogYnJlYWs7XG5cblx0XHRcdC8qIDE4LjguMiAgYiBDVF9Cb29sZWFuUHJvcGVydHkgKi9cblx0XHRcdGNhc2UgJzxiJzogZm9udC5ib2xkID0geS52YWwgPyBwYXJzZXhtbGJvb2woeS52YWwpIDogMTsgYnJlYWs7XG5cdFx0XHRjYXNlICc8Yi8+JzogZm9udC5ib2xkID0gMTsgYnJlYWs7XG5cblx0XHRcdC8qIDE4LjguMjYgaSBDVF9Cb29sZWFuUHJvcGVydHkgKi9cblx0XHRcdGNhc2UgJzxpJzogZm9udC5pdGFsaWMgPSB5LnZhbCA/IHBhcnNleG1sYm9vbCh5LnZhbCkgOiAxOyBicmVhaztcblx0XHRcdGNhc2UgJzxpLz4nOiBmb250Lml0YWxpYyA9IDE7IGJyZWFrO1xuXG5cdFx0XHQvKiAxOC40LjEzIHUgQ1RfVW5kZXJsaW5lUHJvcGVydHkgKi9cblx0XHRcdGNhc2UgJzx1Jzpcblx0XHRcdFx0c3dpdGNoKHkudmFsKSB7XG5cdFx0XHRcdFx0Y2FzZSBcIm5vbmVcIjogZm9udC51bmRlcmxpbmUgPSAweDAwOyBicmVhaztcblx0XHRcdFx0XHRjYXNlIFwic2luZ2xlXCI6IGZvbnQudW5kZXJsaW5lID0gMHgwMTsgYnJlYWs7XG5cdFx0XHRcdFx0Y2FzZSBcImRvdWJsZVwiOiBmb250LnVuZGVybGluZSA9IDB4MDI7IGJyZWFrO1xuXHRcdFx0XHRcdGNhc2UgXCJzaW5nbGVBY2NvdW50aW5nXCI6IGZvbnQudW5kZXJsaW5lID0gMHgyMTsgYnJlYWs7XG5cdFx0XHRcdFx0Y2FzZSBcImRvdWJsZUFjY291bnRpbmdcIjogZm9udC51bmRlcmxpbmUgPSAweDIyOyBicmVhaztcblx0XHRcdFx0fSBicmVhaztcblx0XHRcdGNhc2UgJzx1Lz4nOiBmb250LnVuZGVybGluZSA9IDE7IGJyZWFrO1xuXG5cdFx0XHQvKiAxOC40LjEwIHN0cmlrZSBDVF9Cb29sZWFuUHJvcGVydHkgKi9cblx0XHRcdGNhc2UgJzxzdHJpa2UnOiBmb250LnN0cmlrZSA9IHkudmFsID8gcGFyc2V4bWxib29sKHkudmFsKSA6IDE7IGJyZWFrO1xuXHRcdFx0Y2FzZSAnPHN0cmlrZS8+JzogZm9udC5zdHJpa2UgPSAxOyBicmVhaztcblxuXHRcdFx0LyogMTguNC4yICBvdXRsaW5lIENUX0Jvb2xlYW5Qcm9wZXJ0eSAqL1xuXHRcdFx0Y2FzZSAnPG91dGxpbmUnOiBmb250Lm91dGxpbmUgPSB5LnZhbCA/IHBhcnNleG1sYm9vbCh5LnZhbCkgOiAxOyBicmVhaztcblx0XHRcdGNhc2UgJzxvdXRsaW5lLz4nOiBmb250Lm91dGxpbmUgPSAxOyBicmVhaztcblxuXHRcdFx0LyogMTguOC4zNiBzaGFkb3cgQ1RfQm9vbGVhblByb3BlcnR5ICovXG5cdFx0XHRjYXNlICc8c2hhZG93JzogZm9udC5zaGFkb3cgPSB5LnZhbCA/IHBhcnNleG1sYm9vbCh5LnZhbCkgOiAxOyBicmVhaztcblx0XHRcdGNhc2UgJzxzaGFkb3cvPic6IGZvbnQuc2hhZG93ID0gMTsgYnJlYWs7XG5cblx0XHRcdC8qIDE4LjguMTIgY29uZGVuc2UgQ1RfQm9vbGVhblByb3BlcnR5ICovXG5cdFx0XHRjYXNlICc8Y29uZGVuc2UnOiBmb250LmNvbmRlbnNlID0geS52YWwgPyBwYXJzZXhtbGJvb2woeS52YWwpIDogMTsgYnJlYWs7XG5cdFx0XHRjYXNlICc8Y29uZGVuc2UvPic6IGZvbnQuY29uZGVuc2UgPSAxOyBicmVhaztcblxuXHRcdFx0LyogMTguOC4xNyBleHRlbmQgQ1RfQm9vbGVhblByb3BlcnR5ICovXG5cdFx0XHRjYXNlICc8ZXh0ZW5kJzogZm9udC5leHRlbmQgPSB5LnZhbCA/IHBhcnNleG1sYm9vbCh5LnZhbCkgOiAxOyBicmVhaztcblx0XHRcdGNhc2UgJzxleHRlbmQvPic6IGZvbnQuZXh0ZW5kID0gMTsgYnJlYWs7XG5cblx0XHRcdC8qIDE4LjQuMTEgc3ogQ1RfRm9udFNpemUgKi9cblx0XHRcdGNhc2UgJzxzeic6IGlmKHkudmFsKSBmb250LnN6ID0gK3kudmFsOyBicmVhaztcblx0XHRcdGNhc2UgJzxzei8+JzogY2FzZSAnPC9zej4nOiBicmVhaztcblxuXHRcdFx0LyogMTguNC4xNCB2ZXJ0QWxpZ24gQ1RfVmVydGljYWxBbGlnbkZvbnRQcm9wZXJ0eSAqL1xuXHRcdFx0Y2FzZSAnPHZlcnRBbGlnbic6IGlmKHkudmFsKSBmb250LnZlcnRBbGlnbiA9IHkudmFsOyBicmVhaztcblx0XHRcdGNhc2UgJzx2ZXJ0QWxpZ24vPic6IGNhc2UgJzwvdmVydEFsaWduPic6IGJyZWFrO1xuXG5cdFx0XHQvKiAxOC44LjE4IGZhbWlseSBDVF9Gb250RmFtaWx5ICovXG5cdFx0XHRjYXNlICc8ZmFtaWx5JzogaWYoeS52YWwpIGZvbnQuZmFtaWx5ID0gcGFyc2VJbnQoeS52YWwsMTApOyBicmVhaztcblx0XHRcdGNhc2UgJzxmYW1pbHkvPic6IGNhc2UgJzwvZmFtaWx5Pic6IGJyZWFrO1xuXG5cdFx0XHQvKiAxOC44LjM1IHNjaGVtZSBDVF9Gb250U2NoZW1lICovXG5cdFx0XHRjYXNlICc8c2NoZW1lJzogaWYoeS52YWwpIGZvbnQuc2NoZW1lID0geS52YWw7IGJyZWFrO1xuXHRcdFx0Y2FzZSAnPHNjaGVtZS8+JzogY2FzZSAnPC9zY2hlbWU+JzogYnJlYWs7XG5cblx0XHRcdC8qIDE4LjQuMSBjaGFyc2V0IENUX0ludFByb3BlcnR5ICovXG5cdFx0XHRjYXNlICc8Y2hhcnNldCc6XG5cdFx0XHRcdGlmKHkudmFsID09ICcxJykgYnJlYWs7XG5cdFx0XHRcdHkuY29kZXBhZ2UgPSBDUzJDUFtwYXJzZUludCh5LnZhbCwgMTApXTtcblx0XHRcdFx0YnJlYWs7XG5cblx0XHRcdC8qIDE4Lj8uPyBjb2xvciBDVF9Db2xvciAqL1xuXHRcdFx0Y2FzZSAnPGNvbG9yJzpcblx0XHRcdFx0aWYoIWZvbnQuY29sb3IpIGZvbnQuY29sb3IgPSB7fTtcblx0XHRcdFx0aWYoeS5hdXRvKSBmb250LmNvbG9yLmF1dG8gPSBwYXJzZXhtbGJvb2woeS5hdXRvKTtcblxuXHRcdFx0XHRpZih5LnJnYikgZm9udC5jb2xvci5yZ2IgPSB5LnJnYi5zbGljZSgtNik7XG5cdFx0XHRcdGVsc2UgaWYoeS5pbmRleGVkKSB7XG5cdFx0XHRcdFx0Zm9udC5jb2xvci5pbmRleCA9IHBhcnNlSW50KHkuaW5kZXhlZCwgMTApO1xuXHRcdFx0XHRcdHZhciBpY3YgPSBYTFNJY3ZbZm9udC5jb2xvci5pbmRleF07XG5cdFx0XHRcdFx0aWYoZm9udC5jb2xvci5pbmRleCA9PSA4MSkgaWN2ID0gWExTSWN2WzFdO1xuXHRcdFx0XHRcdGlmKCFpY3YpIGljdiA9IFhMU0ljdlsxXTsgLy90aHJvdyBuZXcgRXJyb3IoeCk7IC8vIG5vdGU6IDIwNiBpcyB2YWxpZFxuXHRcdFx0XHRcdGZvbnQuY29sb3IucmdiID0gaWN2WzBdLnRvU3RyaW5nKDE2KSArIGljdlsxXS50b1N0cmluZygxNikgKyBpY3ZbMl0udG9TdHJpbmcoMTYpO1xuXHRcdFx0XHR9IGVsc2UgaWYoeS50aGVtZSkge1xuXHRcdFx0XHRcdGZvbnQuY29sb3IudGhlbWUgPSBwYXJzZUludCh5LnRoZW1lLCAxMCk7XG5cdFx0XHRcdFx0aWYoeS50aW50KSBmb250LmNvbG9yLnRpbnQgPSBwYXJzZUZsb2F0KHkudGludCk7XG5cdFx0XHRcdFx0aWYoeS50aGVtZSAmJiB0aGVtZXMudGhlbWVFbGVtZW50cyAmJiB0aGVtZXMudGhlbWVFbGVtZW50cy5jbHJTY2hlbWUpIHtcblx0XHRcdFx0XHRcdGZvbnQuY29sb3IucmdiID0gcmdiX3RpbnQodGhlbWVzLnRoZW1lRWxlbWVudHMuY2xyU2NoZW1lW2ZvbnQuY29sb3IudGhlbWVdLnJnYiwgZm9udC5jb2xvci50aW50IHx8IDApO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0fVxuXG5cdFx0XHRcdGJyZWFrO1xuXHRcdFx0Y2FzZSAnPGNvbG9yLz4nOiBjYXNlICc8L2NvbG9yPic6IGJyZWFrO1xuXG5cdFx0XHQvKiBub3RlOiBzb21ldGltZXMgbWM6QWx0ZXJuYXRlQ29udGVudCBhcHBlYXJzIGJhcmUgKi9cblx0XHRcdGNhc2UgJzxBbHRlcm5hdGVDb250ZW50JzogcGFzcyA9IHRydWU7IGJyZWFrO1xuXHRcdFx0Y2FzZSAnPC9BbHRlcm5hdGVDb250ZW50Pic6IHBhc3MgPSBmYWxzZTsgYnJlYWs7XG5cblx0XHRcdC8qIDE4LjIuMTAgZXh0THN0IENUX0V4dGVuc2lvbkxpc3QgPyAqL1xuXHRcdFx0Y2FzZSAnPGV4dExzdCc6IGNhc2UgJzxleHRMc3Q+JzogY2FzZSAnPC9leHRMc3Q+JzogYnJlYWs7XG5cdFx0XHRjYXNlICc8ZXh0JzogcGFzcyA9IHRydWU7IGJyZWFrO1xuXHRcdFx0Y2FzZSAnPC9leHQ+JzogcGFzcyA9IGZhbHNlOyBicmVhaztcblx0XHRcdGRlZmF1bHQ6IGlmKG9wdHMgJiYgb3B0cy5XVEYpIHtcblx0XHRcdFx0aWYoIXBhc3MpIHRocm93IG5ldyBFcnJvcigndW5yZWNvZ25pemVkICcgKyB5WzBdICsgJyBpbiBmb250cycpO1xuXHRcdFx0fVxuXHRcdH1cblx0fSk7XG59XG5cbi8qIDE4LjguMzEgbnVtRm10cyBDVF9OdW1GbXRzICovXG5mdW5jdGlvbiBwYXJzZV9udW1GbXRzKHQsIHN0eWxlcywgb3B0cykge1xuXHRzdHlsZXMuTnVtYmVyRm10ID0gW107XG5cdHZhciBrLypBcnJheTxudW1iZXI+Ki8gPSAoa2V5cyh0YWJsZV9mbXQpLyo6YW55Ki8pO1xuXHRmb3IodmFyIGk9MDsgaSA8IGsubGVuZ3RoOyArK2kpIHN0eWxlcy5OdW1iZXJGbXRba1tpXV0gPSB0YWJsZV9mbXRba1tpXV07XG5cdHZhciBtID0gdFswXS5tYXRjaCh0YWdyZWdleCk7XG5cdGlmKCFtKSByZXR1cm47XG5cdGZvcihpPTA7IGkgPCBtLmxlbmd0aDsgKytpKSB7XG5cdFx0dmFyIHkgPSBwYXJzZXhtbHRhZyhtW2ldKTtcblx0XHRzd2l0Y2goc3RyaXBfbnMoeVswXSkpIHtcblx0XHRcdGNhc2UgJzxudW1GbXRzJzogY2FzZSAnPC9udW1GbXRzPic6IGNhc2UgJzxudW1GbXRzLz4nOiBjYXNlICc8bnVtRm10cz4nOiBicmVhaztcblx0XHRcdGNhc2UgJzxudW1GbXQnOiB7XG5cdFx0XHRcdHZhciBmPXVuZXNjYXBleG1sKHV0ZjhyZWFkKHkuZm9ybWF0Q29kZSkpLCBqPXBhcnNlSW50KHkubnVtRm10SWQsMTApO1xuXHRcdFx0XHRzdHlsZXMuTnVtYmVyRm10W2pdID0gZjtcblx0XHRcdFx0aWYoaj4wKSB7XG5cdFx0XHRcdFx0aWYoaiA+IDB4MTg4KSB7XG5cdFx0XHRcdFx0XHRmb3IoaiA9IDB4MTg4OyBqID4gMHgzYzsgLS1qKSBpZihzdHlsZXMuTnVtYmVyRm10W2pdID09IG51bGwpIGJyZWFrO1xuXHRcdFx0XHRcdFx0c3R5bGVzLk51bWJlckZtdFtqXSA9IGY7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHRcdFNTRl9sb2FkKGYsaik7XG5cdFx0XHRcdH1cblx0XHRcdH0gYnJlYWs7XG5cdFx0XHRjYXNlICc8L251bUZtdD4nOiBicmVhaztcblx0XHRcdGRlZmF1bHQ6IGlmKG9wdHMuV1RGKSB0aHJvdyBuZXcgRXJyb3IoJ3VucmVjb2duaXplZCAnICsgeVswXSArICcgaW4gbnVtRm10cycpO1xuXHRcdH1cblx0fVxufVxuXG5mdW5jdGlvbiB3cml0ZV9udW1GbXRzKE5GLyo6e1tuOm51bWJlcnxzdHJpbmddOnN0cmluZ30qLy8qOjosIG9wdHMqLykge1xuXHR2YXIgbyA9IFtcIjxudW1GbXRzPlwiXTtcblx0W1s1LDhdLFsyMywyNl0sWzQxLDQ0XSxbLyo2MyovNTAsLyo2Nl0sWzE2NCwqLzM5Ml1dLmZvckVhY2goZnVuY3Rpb24ocikge1xuXHRcdGZvcih2YXIgaSA9IHJbMF07IGkgPD0gclsxXTsgKytpKSBpZihORltpXSAhPSBudWxsKSBvW28ubGVuZ3RoXSA9ICh3cml0ZXh0YWcoJ251bUZtdCcsbnVsbCx7bnVtRm10SWQ6aSxmb3JtYXRDb2RlOmVzY2FwZXhtbChORltpXSl9KSk7XG5cdH0pO1xuXHRpZihvLmxlbmd0aCA9PT0gMSkgcmV0dXJuIFwiXCI7XG5cdG9bby5sZW5ndGhdID0gKFwiPC9udW1GbXRzPlwiKTtcblx0b1swXSA9IHdyaXRleHRhZygnbnVtRm10cycsIG51bGwsIHsgY291bnQ6by5sZW5ndGgtMiB9KS5yZXBsYWNlKFwiLz5cIiwgXCI+XCIpO1xuXHRyZXR1cm4gby5qb2luKFwiXCIpO1xufVxuXG4vKiAxOC44LjEwIGNlbGxYZnMgQ1RfQ2VsbFhmcyAqL1xudmFyIGNlbGxYRl91aW50ID0gWyBcIm51bUZtdElkXCIsIFwiZmlsbElkXCIsIFwiZm9udElkXCIsIFwiYm9yZGVySWRcIiwgXCJ4ZklkXCIgXTtcbnZhciBjZWxsWEZfYm9vbCA9IFsgXCJhcHBseUFsaWdubWVudFwiLCBcImFwcGx5Qm9yZGVyXCIsIFwiYXBwbHlGaWxsXCIsIFwiYXBwbHlGb250XCIsIFwiYXBwbHlOdW1iZXJGb3JtYXRcIiwgXCJhcHBseVByb3RlY3Rpb25cIiwgXCJwaXZvdEJ1dHRvblwiLCBcInF1b3RlUHJlZml4XCIgXTtcbmZ1bmN0aW9uIHBhcnNlX2NlbGxYZnModCwgc3R5bGVzLCBvcHRzKSB7XG5cdHN0eWxlcy5DZWxsWGYgPSBbXTtcblx0dmFyIHhmO1xuXHR2YXIgcGFzcyA9IGZhbHNlO1xuXHQodFswXS5tYXRjaCh0YWdyZWdleCl8fFtdKS5mb3JFYWNoKGZ1bmN0aW9uKHgpIHtcblx0XHR2YXIgeSA9IHBhcnNleG1sdGFnKHgpLCBpID0gMDtcblx0XHRzd2l0Y2goc3RyaXBfbnMoeVswXSkpIHtcblx0XHRcdGNhc2UgJzxjZWxsWGZzJzogY2FzZSAnPGNlbGxYZnM+JzogY2FzZSAnPGNlbGxYZnMvPic6IGNhc2UgJzwvY2VsbFhmcz4nOiBicmVhaztcblxuXHRcdFx0LyogMTguOC40NSB4ZiBDVF9YZiAqL1xuXHRcdFx0Y2FzZSAnPHhmJzogY2FzZSAnPHhmLz4nOlxuXHRcdFx0XHR4ZiA9IHk7XG5cdFx0XHRcdGRlbGV0ZSB4ZlswXTtcblx0XHRcdFx0Zm9yKGkgPSAwOyBpIDwgY2VsbFhGX3VpbnQubGVuZ3RoOyArK2kpIGlmKHhmW2NlbGxYRl91aW50W2ldXSlcblx0XHRcdFx0XHR4ZltjZWxsWEZfdWludFtpXV0gPSBwYXJzZUludCh4ZltjZWxsWEZfdWludFtpXV0sIDEwKTtcblx0XHRcdFx0Zm9yKGkgPSAwOyBpIDwgY2VsbFhGX2Jvb2wubGVuZ3RoOyArK2kpIGlmKHhmW2NlbGxYRl9ib29sW2ldXSlcblx0XHRcdFx0XHR4ZltjZWxsWEZfYm9vbFtpXV0gPSBwYXJzZXhtbGJvb2woeGZbY2VsbFhGX2Jvb2xbaV1dKTtcblx0XHRcdFx0aWYoc3R5bGVzLk51bWJlckZtdCAmJiB4Zi5udW1GbXRJZCA+IDB4MTg4KSB7XG5cdFx0XHRcdFx0Zm9yKGkgPSAweDE4ODsgaSA+IDB4M2M7IC0taSkgaWYoc3R5bGVzLk51bWJlckZtdFt4Zi5udW1GbXRJZF0gPT0gc3R5bGVzLk51bWJlckZtdFtpXSkgeyB4Zi5udW1GbXRJZCA9IGk7IGJyZWFrOyB9XG5cdFx0XHRcdH1cblx0XHRcdFx0c3R5bGVzLkNlbGxYZi5wdXNoKHhmKTsgYnJlYWs7XG5cdFx0XHRjYXNlICc8L3hmPic6IGJyZWFrO1xuXG5cdFx0XHQvKiAxOC44LjEgYWxpZ25tZW50IENUX0NlbGxBbGlnbm1lbnQgKi9cblx0XHRcdGNhc2UgJzxhbGlnbm1lbnQnOiBjYXNlICc8YWxpZ25tZW50Lz4nOlxuXHRcdFx0XHR2YXIgYWxpZ25tZW50ID0ge307XG5cdFx0XHRcdGlmKHkudmVydGljYWwpIGFsaWdubWVudC52ZXJ0aWNhbCA9IHkudmVydGljYWw7XG5cdFx0XHRcdGlmKHkuaG9yaXpvbnRhbCkgYWxpZ25tZW50Lmhvcml6b250YWwgPSB5Lmhvcml6b250YWw7XG5cdFx0XHRcdGlmKHkudGV4dFJvdGF0aW9uICE9IG51bGwpIGFsaWdubWVudC50ZXh0Um90YXRpb24gPSB5LnRleHRSb3RhdGlvbjtcblx0XHRcdFx0aWYoeS5pbmRlbnQpIGFsaWdubWVudC5pbmRlbnQgPSB5LmluZGVudDtcblx0XHRcdFx0aWYoeS53cmFwVGV4dCkgYWxpZ25tZW50LndyYXBUZXh0ID0gcGFyc2V4bWxib29sKHkud3JhcFRleHQpO1xuXHRcdFx0XHR4Zi5hbGlnbm1lbnQgPSBhbGlnbm1lbnQ7XG5cdFx0XHRcdGJyZWFrO1xuXHRcdFx0Y2FzZSAnPC9hbGlnbm1lbnQ+JzogYnJlYWs7XG5cblx0XHRcdC8qIDE4LjguMzMgcHJvdGVjdGlvbiBDVF9DZWxsUHJvdGVjdGlvbiAqL1xuXHRcdFx0Y2FzZSAnPHByb3RlY3Rpb24nOlxuXHRcdFx0XHRicmVhaztcblx0XHRcdGNhc2UgJzwvcHJvdGVjdGlvbj4nOiBjYXNlICc8cHJvdGVjdGlvbi8+JzogYnJlYWs7XG5cblx0XHRcdC8qIG5vdGU6IHNvbWV0aW1lcyBtYzpBbHRlcm5hdGVDb250ZW50IGFwcGVhcnMgYmFyZSAqL1xuXHRcdFx0Y2FzZSAnPEFsdGVybmF0ZUNvbnRlbnQnOiBwYXNzID0gdHJ1ZTsgYnJlYWs7XG5cdFx0XHRjYXNlICc8L0FsdGVybmF0ZUNvbnRlbnQ+JzogcGFzcyA9IGZhbHNlOyBicmVhaztcblxuXHRcdFx0LyogMTguMi4xMCBleHRMc3QgQ1RfRXh0ZW5zaW9uTGlzdCA/ICovXG5cdFx0XHRjYXNlICc8ZXh0THN0JzogY2FzZSAnPGV4dExzdD4nOiBjYXNlICc8L2V4dExzdD4nOiBicmVhaztcblx0XHRcdGNhc2UgJzxleHQnOiBwYXNzID0gdHJ1ZTsgYnJlYWs7XG5cdFx0XHRjYXNlICc8L2V4dD4nOiBwYXNzID0gZmFsc2U7IGJyZWFrO1xuXHRcdFx0ZGVmYXVsdDogaWYob3B0cyAmJiBvcHRzLldURikge1xuXHRcdFx0XHRpZighcGFzcykgdGhyb3cgbmV3IEVycm9yKCd1bnJlY29nbml6ZWQgJyArIHlbMF0gKyAnIGluIGNlbGxYZnMnKTtcblx0XHRcdH1cblx0XHR9XG5cdH0pO1xufVxuXG5mdW5jdGlvbiB3cml0ZV9jZWxsWGZzKGNlbGxYZnMpLyo6c3RyaW5nKi8ge1xuXHR2YXIgby8qOkFycmF5PHN0cmluZz4qLyA9IFtdO1xuXHRvW28ubGVuZ3RoXSA9ICh3cml0ZXh0YWcoJ2NlbGxYZnMnLG51bGwpKTtcblx0Y2VsbFhmcy5mb3JFYWNoKGZ1bmN0aW9uKGMpIHtcblx0XHRvW28ubGVuZ3RoXSA9ICh3cml0ZXh0YWcoJ3hmJywgbnVsbCwgYykpO1xuXHR9KTtcblx0b1tvLmxlbmd0aF0gPSAoXCI8L2NlbGxYZnM+XCIpO1xuXHRpZihvLmxlbmd0aCA9PT0gMikgcmV0dXJuIFwiXCI7XG5cdG9bMF0gPSB3cml0ZXh0YWcoJ2NlbGxYZnMnLG51bGwsIHtjb3VudDpvLmxlbmd0aC0yfSkucmVwbGFjZShcIi8+XCIsXCI+XCIpO1xuXHRyZXR1cm4gby5qb2luKFwiXCIpO1xufVxuXG4vKiAxOC44IFN0eWxlcyBDVF9TdHlsZXNoZWV0Ki9cbnZhciBwYXJzZV9zdHlfeG1sPSAvKiNfX1BVUkVfXyovKGZ1bmN0aW9uIG1ha2VfcHN0eXgoKSB7XG52YXIgbnVtRm10UmVnZXggPSAvPCg/Olxcdys6KT9udW1GbXRzKFtePl0qKT5bXFxTXFxzXSo/PFxcLyg/Olxcdys6KT9udW1GbXRzPi87XG52YXIgY2VsbFhmUmVnZXggPSAvPCg/Olxcdys6KT9jZWxsWGZzKFtePl0qKT5bXFxTXFxzXSo/PFxcLyg/Olxcdys6KT9jZWxsWGZzPi87XG52YXIgZmlsbHNSZWdleCA9IC88KD86XFx3KzopP2ZpbGxzKFtePl0qKT5bXFxTXFxzXSo/PFxcLyg/Olxcdys6KT9maWxscz4vO1xudmFyIGZvbnRzUmVnZXggPSAvPCg/Olxcdys6KT9mb250cyhbXj5dKik+W1xcU1xcc10qPzxcXC8oPzpcXHcrOik/Zm9udHM+LztcbnZhciBib3JkZXJzUmVnZXggPSAvPCg/Olxcdys6KT9ib3JkZXJzKFtePl0qKT5bXFxTXFxzXSo/PFxcLyg/Olxcdys6KT9ib3JkZXJzPi87XG5cbnJldHVybiBmdW5jdGlvbiBwYXJzZV9zdHlfeG1sKGRhdGEsIHRoZW1lcywgb3B0cykge1xuXHR2YXIgc3R5bGVzID0ge307XG5cdGlmKCFkYXRhKSByZXR1cm4gc3R5bGVzO1xuXHRkYXRhID0gZGF0YS5yZXBsYWNlKC88IS0tKFtcXHNcXFNdKj8pLS0+L21nLFwiXCIpLnJlcGxhY2UoLzwhRE9DVFlQRVteXFxbXSpcXFtbXlxcXV0qXFxdPi9nbSxcIlwiKTtcblx0LyogMTguOC4zOSBzdHlsZVNoZWV0IENUX1N0eWxlc2hlZXQgKi9cblx0dmFyIHQ7XG5cblx0LyogMTguOC4zMSBudW1GbXRzIENUX051bUZtdHMgPyAqL1xuXHRpZigodD1kYXRhLm1hdGNoKG51bUZtdFJlZ2V4KSkpIHBhcnNlX251bUZtdHModCwgc3R5bGVzLCBvcHRzKTtcblxuXHQvKiAxOC44LjIzIGZvbnRzIENUX0ZvbnRzID8gKi9cblx0aWYoKHQ9ZGF0YS5tYXRjaChmb250c1JlZ2V4KSkpIHBhcnNlX2ZvbnRzKHQsIHN0eWxlcywgdGhlbWVzLCBvcHRzKTtcblxuXHQvKiAxOC44LjIxIGZpbGxzIENUX0ZpbGxzID8gKi9cblx0aWYoKHQ9ZGF0YS5tYXRjaChmaWxsc1JlZ2V4KSkpIHBhcnNlX2ZpbGxzKHQsIHN0eWxlcywgdGhlbWVzLCBvcHRzKTtcblxuXHQvKiAxOC44LjUgIGJvcmRlcnMgQ1RfQm9yZGVycyA/ICovXG5cdGlmKCh0PWRhdGEubWF0Y2goYm9yZGVyc1JlZ2V4KSkpIHBhcnNlX2JvcmRlcnModCwgc3R5bGVzLCB0aGVtZXMsIG9wdHMpO1xuXG5cdC8qIDE4LjguOSAgY2VsbFN0eWxlWGZzIENUX0NlbGxTdHlsZVhmcyA/ICovXG5cdC8qIDE4LjguOCAgY2VsbFN0eWxlcyBDVF9DZWxsU3R5bGVzID8gKi9cblxuXHQvKiAxOC44LjEwIGNlbGxYZnMgQ1RfQ2VsbFhmcyA/ICovXG5cdGlmKCh0PWRhdGEubWF0Y2goY2VsbFhmUmVnZXgpKSkgcGFyc2VfY2VsbFhmcyh0LCBzdHlsZXMsIG9wdHMpO1xuXG5cdC8qIDE4LjguMTUgZHhmcyBDVF9EeGZzID8gKi9cblx0LyogMTguOC40MiB0YWJsZVN0eWxlcyBDVF9UYWJsZVN0eWxlcyA/ICovXG5cdC8qIDE4LjguMTEgY29sb3JzIENUX0NvbG9ycyA/ICovXG5cdC8qIDE4LjIuMTAgZXh0THN0IENUX0V4dGVuc2lvbkxpc3QgPyAqL1xuXG5cdHJldHVybiBzdHlsZXM7XG59O1xufSkoKTtcblxuZnVuY3Rpb24gd3JpdGVfc3R5X3htbCh3Yi8qOldvcmtib29rKi8sIG9wdHMpLyo6c3RyaW5nKi8ge1xuXHR2YXIgbyA9IFtYTUxfSEVBREVSLCB3cml0ZXh0YWcoJ3N0eWxlU2hlZXQnLCBudWxsLCB7XG5cdFx0J3htbG5zJzogWE1MTlNfbWFpblswXSxcblx0XHQneG1sbnM6dnQnOiBYTUxOUy52dFxuXHR9KV0sIHc7XG5cdGlmKHdiLlNTRiAmJiAodyA9IHdyaXRlX251bUZtdHMod2IuU1NGKSkgIT0gbnVsbCkgb1tvLmxlbmd0aF0gPSB3O1xuXHRvW28ubGVuZ3RoXSA9ICgnPGZvbnRzIGNvdW50PVwiMVwiPjxmb250PjxzeiB2YWw9XCIxMlwiLz48Y29sb3IgdGhlbWU9XCIxXCIvPjxuYW1lIHZhbD1cIkNhbGlicmlcIi8+PGZhbWlseSB2YWw9XCIyXCIvPjxzY2hlbWUgdmFsPVwibWlub3JcIi8+PC9mb250PjwvZm9udHM+Jyk7XG5cdG9bby5sZW5ndGhdID0gKCc8ZmlsbHMgY291bnQ9XCIyXCI+PGZpbGw+PHBhdHRlcm5GaWxsIHBhdHRlcm5UeXBlPVwibm9uZVwiLz48L2ZpbGw+PGZpbGw+PHBhdHRlcm5GaWxsIHBhdHRlcm5UeXBlPVwiZ3JheTEyNVwiLz48L2ZpbGw+PC9maWxscz4nKTtcblx0b1tvLmxlbmd0aF0gPSAoJzxib3JkZXJzIGNvdW50PVwiMVwiPjxib3JkZXI+PGxlZnQvPjxyaWdodC8+PHRvcC8+PGJvdHRvbS8+PGRpYWdvbmFsLz48L2JvcmRlcj48L2JvcmRlcnM+Jyk7XG5cdG9bby5sZW5ndGhdID0gKCc8Y2VsbFN0eWxlWGZzIGNvdW50PVwiMVwiPjx4ZiBudW1GbXRJZD1cIjBcIiBmb250SWQ9XCIwXCIgZmlsbElkPVwiMFwiIGJvcmRlcklkPVwiMFwiLz48L2NlbGxTdHlsZVhmcz4nKTtcblx0aWYoKHcgPSB3cml0ZV9jZWxsWGZzKG9wdHMuY2VsbFhmcykpKSBvW28ubGVuZ3RoXSA9ICh3KTtcblx0b1tvLmxlbmd0aF0gPSAoJzxjZWxsU3R5bGVzIGNvdW50PVwiMVwiPjxjZWxsU3R5bGUgbmFtZT1cIk5vcm1hbFwiIHhmSWQ9XCIwXCIgYnVpbHRpbklkPVwiMFwiLz48L2NlbGxTdHlsZXM+Jyk7XG5cdG9bby5sZW5ndGhdID0gKCc8ZHhmcyBjb3VudD1cIjBcIi8+Jyk7XG5cdG9bby5sZW5ndGhdID0gKCc8dGFibGVTdHlsZXMgY291bnQ9XCIwXCIgZGVmYXVsdFRhYmxlU3R5bGU9XCJUYWJsZVN0eWxlTWVkaXVtOVwiIGRlZmF1bHRQaXZvdFN0eWxlPVwiUGl2b3RTdHlsZU1lZGl1bTRcIi8+Jyk7XG5cblx0aWYoby5sZW5ndGg+Mil7IG9bby5sZW5ndGhdID0gKCc8L3N0eWxlU2hlZXQ+Jyk7IG9bMV09b1sxXS5yZXBsYWNlKFwiLz5cIixcIj5cIik7IH1cblx0cmV0dXJuIG8uam9pbihcIlwiKTtcbn1cbi8qIFtNUy1YTFNCXSAyLjQuNjU3IEJydEZtdCAqL1xuZnVuY3Rpb24gcGFyc2VfQnJ0Rm10KGRhdGEsIGxlbmd0aC8qOm51bWJlciovKSB7XG5cdHZhciBudW1GbXRJZCA9IGRhdGEucmVhZF9zaGlmdCgyKTtcblx0dmFyIHN0Rm10Q29kZSA9IHBhcnNlX1hMV2lkZVN0cmluZyhkYXRhLGxlbmd0aC0yKTtcblx0cmV0dXJuIFtudW1GbXRJZCwgc3RGbXRDb2RlXTtcbn1cbmZ1bmN0aW9uIHdyaXRlX0JydEZtdChpLyo6bnVtYmVyKi8sIGYvKjpzdHJpbmcqLywgbykge1xuXHRpZighbykgbyA9IG5ld19idWYoNiArIDQgKiBmLmxlbmd0aCk7XG5cdG8ud3JpdGVfc2hpZnQoMiwgaSk7XG5cdHdyaXRlX1hMV2lkZVN0cmluZyhmLCBvKTtcblx0dmFyIG91dCA9IChvLmxlbmd0aCA+IG8ubCkgPyBvLnNsaWNlKDAsIG8ubCkgOiBvO1xuXHRpZihvLmwgPT0gbnVsbCkgby5sID0gby5sZW5ndGg7XG5cdHJldHVybiBvdXQ7XG59XG5cbi8qIFtNUy1YTFNCXSAyLjQuNjU5IEJydEZvbnQgVE9ETyAqL1xuZnVuY3Rpb24gcGFyc2VfQnJ0Rm9udChkYXRhLCBsZW5ndGgvKjpudW1iZXIqLywgb3B0cykge1xuXHR2YXIgb3V0ID0gKHt9Lyo6YW55Ki8pO1xuXG5cdG91dC5zeiA9IGRhdGEucmVhZF9zaGlmdCgyKSAvIDIwO1xuXG5cdHZhciBncmJpdCA9IHBhcnNlX0ZvbnRGbGFncyhkYXRhLCAyLCBvcHRzKTtcblx0aWYoZ3JiaXQuZkl0YWxpYykgb3V0Lml0YWxpYyA9IDE7XG5cdGlmKGdyYml0LmZDb25kZW5zZSkgb3V0LmNvbmRlbnNlID0gMTtcblx0aWYoZ3JiaXQuZkV4dGVuZCkgb3V0LmV4dGVuZCA9IDE7XG5cdGlmKGdyYml0LmZTaGFkb3cpIG91dC5zaGFkb3cgPSAxO1xuXHRpZihncmJpdC5mT3V0bGluZSkgb3V0Lm91dGxpbmUgPSAxO1xuXHRpZihncmJpdC5mU3RyaWtlb3V0KSBvdXQuc3RyaWtlID0gMTtcblxuXHR2YXIgYmxzID0gZGF0YS5yZWFkX3NoaWZ0KDIpO1xuXHRpZihibHMgPT09IDB4MDJCQykgb3V0LmJvbGQgPSAxO1xuXG5cdHN3aXRjaChkYXRhLnJlYWRfc2hpZnQoMikpIHtcblx0XHQvKiBjYXNlIDA6IG91dC52ZXJ0QWxpZ24gPSBcImJhc2VsaW5lXCI7IGJyZWFrOyAqL1xuXHRcdGNhc2UgMTogb3V0LnZlcnRBbGlnbiA9IFwic3VwZXJzY3JpcHRcIjsgYnJlYWs7XG5cdFx0Y2FzZSAyOiBvdXQudmVydEFsaWduID0gXCJzdWJzY3JpcHRcIjsgYnJlYWs7XG5cdH1cblxuXHR2YXIgdW5kZXJsaW5lID0gZGF0YS5yZWFkX3NoaWZ0KDEpO1xuXHRpZih1bmRlcmxpbmUgIT0gMCkgb3V0LnVuZGVybGluZSA9IHVuZGVybGluZTtcblxuXHR2YXIgZmFtaWx5ID0gZGF0YS5yZWFkX3NoaWZ0KDEpO1xuXHRpZihmYW1pbHkgPiAwKSBvdXQuZmFtaWx5ID0gZmFtaWx5O1xuXG5cdHZhciBiQ2hhclNldCA9IGRhdGEucmVhZF9zaGlmdCgxKTtcblx0aWYoYkNoYXJTZXQgPiAwKSBvdXQuY2hhcnNldCA9IGJDaGFyU2V0O1xuXG5cdGRhdGEubCsrO1xuXHRvdXQuY29sb3IgPSBwYXJzZV9CcnRDb2xvcihkYXRhLCA4KTtcblxuXHRzd2l0Y2goZGF0YS5yZWFkX3NoaWZ0KDEpKSB7XG5cdFx0LyogY2FzZSAwOiBvdXQuc2NoZW1lID0gXCJub25lXCI6IGJyZWFrOyAqL1xuXHRcdGNhc2UgMTogb3V0LnNjaGVtZSA9IFwibWFqb3JcIjsgYnJlYWs7XG5cdFx0Y2FzZSAyOiBvdXQuc2NoZW1lID0gXCJtaW5vclwiOyBicmVhaztcblx0fVxuXG5cdG91dC5uYW1lID0gcGFyc2VfWExXaWRlU3RyaW5nKGRhdGEsIGxlbmd0aCAtIDIxKTtcblxuXHRyZXR1cm4gb3V0O1xufVxuZnVuY3Rpb24gd3JpdGVfQnJ0Rm9udChmb250Lyo6YW55Ki8sIG8pIHtcblx0aWYoIW8pIG8gPSBuZXdfYnVmKDI1KzQqMzIpO1xuXHRvLndyaXRlX3NoaWZ0KDIsIGZvbnQuc3ogKiAyMCk7XG5cdHdyaXRlX0ZvbnRGbGFncyhmb250LCBvKTtcblx0by53cml0ZV9zaGlmdCgyLCBmb250LmJvbGQgPyAweDAyQkMgOiAweDAxOTApO1xuXHR2YXIgc3NzID0gMDtcblx0aWYoZm9udC52ZXJ0QWxpZ24gPT0gXCJzdXBlcnNjcmlwdFwiKSBzc3MgPSAxO1xuXHRlbHNlIGlmKGZvbnQudmVydEFsaWduID09IFwic3Vic2NyaXB0XCIpIHNzcyA9IDI7XG5cdG8ud3JpdGVfc2hpZnQoMiwgc3NzKTtcblx0by53cml0ZV9zaGlmdCgxLCBmb250LnVuZGVybGluZSB8fCAwKTtcblx0by53cml0ZV9zaGlmdCgxLCBmb250LmZhbWlseSB8fCAwKTtcblx0by53cml0ZV9zaGlmdCgxLCBmb250LmNoYXJzZXQgfHwgMCk7XG5cdG8ud3JpdGVfc2hpZnQoMSwgMCk7XG5cdHdyaXRlX0JydENvbG9yKGZvbnQuY29sb3IsIG8pO1xuXHR2YXIgc2NoZW1lID0gMDtcblx0aWYoZm9udC5zY2hlbWUgPT0gXCJtYWpvclwiKSBzY2hlbWUgPSAxO1xuXHRpZihmb250LnNjaGVtZSA9PSBcIm1pbm9yXCIpIHNjaGVtZSA9IDI7XG5cdG8ud3JpdGVfc2hpZnQoMSwgc2NoZW1lKTtcblx0d3JpdGVfWExXaWRlU3RyaW5nKGZvbnQubmFtZSwgbyk7XG5cdHJldHVybiBvLmxlbmd0aCA+IG8ubCA/IG8uc2xpY2UoMCwgby5sKSA6IG87XG59XG5cbi8qIFtNUy1YTFNCXSAyLjQuNjUwIEJydEZpbGwgKi9cbnZhciBYTFNCRmlsbFBUTmFtZXMgPSBbXG5cdFwibm9uZVwiLFxuXHRcInNvbGlkXCIsXG5cdFwibWVkaXVtR3JheVwiLFxuXHRcImRhcmtHcmF5XCIsXG5cdFwibGlnaHRHcmF5XCIsXG5cdFwiZGFya0hvcml6b250YWxcIixcblx0XCJkYXJrVmVydGljYWxcIixcblx0XCJkYXJrRG93blwiLFxuXHRcImRhcmtVcFwiLFxuXHRcImRhcmtHcmlkXCIsXG5cdFwiZGFya1RyZWxsaXNcIixcblx0XCJsaWdodEhvcml6b250YWxcIixcblx0XCJsaWdodFZlcnRpY2FsXCIsXG5cdFwibGlnaHREb3duXCIsXG5cdFwibGlnaHRVcFwiLFxuXHRcImxpZ2h0R3JpZFwiLFxuXHRcImxpZ2h0VHJlbGxpc1wiLFxuXHRcImdyYXkxMjVcIixcblx0XCJncmF5MDYyNVwiXG5dO1xudmFyIHJldl9YTFNCRmlsbFBUTmFtZXMvKjpFdmVydE51bVR5cGUqLztcbi8qIFRPRE86IGdyYWRpZW50IGZpbGwgcmVwcmVzZW50YXRpb24gKi9cbnZhciBwYXJzZV9CcnRGaWxsID0gcGFyc2Vub29wO1xuZnVuY3Rpb24gd3JpdGVfQnJ0RmlsbChmaWxsLCBvKSB7XG5cdGlmKCFvKSBvID0gbmV3X2J1Zig0KjMgKyA4KjcgKyAxNioxKTtcblx0aWYoIXJldl9YTFNCRmlsbFBUTmFtZXMpIHJldl9YTFNCRmlsbFBUTmFtZXMgPSAoZXZlcnQoWExTQkZpbGxQVE5hbWVzKS8qOmFueSovKTtcblx0dmFyIGZscy8qOm51bWJlciovID0gcmV2X1hMU0JGaWxsUFROYW1lc1tmaWxsLnBhdHRlcm5UeXBlXTtcblx0aWYoZmxzID09IG51bGwpIGZscyA9IDB4Mjg7XG5cdG8ud3JpdGVfc2hpZnQoNCwgZmxzKTtcblx0dmFyIGogPSAwO1xuXHRpZihmbHMgIT0gMHgyOCkge1xuXHRcdC8qIFRPRE86IGN1c3RvbSBGRyBDb2xvciAqL1xuXHRcdHdyaXRlX0JydENvbG9yKHthdXRvOjF9LCBvKTtcblx0XHQvKiBUT0RPOiBjdXN0b20gQkcgQ29sb3IgKi9cblx0XHR3cml0ZV9CcnRDb2xvcih7YXV0bzoxfSwgbyk7XG5cblx0XHRmb3IoOyBqIDwgMTI7ICsraikgby53cml0ZV9zaGlmdCg0LCAwKTtcblx0fSBlbHNlIHtcblx0XHRmb3IoOyBqIDwgNDsgKytqKSBvLndyaXRlX3NoaWZ0KDQsIDApO1xuXG5cdFx0Zm9yKDsgaiA8IDEyOyArK2opIG8ud3JpdGVfc2hpZnQoNCwgMCk7IC8qIFRPRE8gKi9cblx0XHQvKiBpR3JhZGllbnRUeXBlICovXG5cdFx0LyogeG51bURlZ3JlZSAqL1xuXHRcdC8qIHhudW1GaWxsVG9MZWZ0ICovXG5cdFx0LyogeG51bUZpbGxUb1JpZ2h0ICovXG5cdFx0LyogeG51bUZpbGxUb1RvcCAqL1xuXHRcdC8qIHhudW1GaWxsVG9Cb3R0b20gKi9cblx0XHQvKiBjTnVtU3RvcCAqL1xuXHRcdC8qIHhmaWxsR3JhZGllbnRTdG9wICovXG5cdH1cblx0cmV0dXJuIG8ubGVuZ3RoID4gby5sID8gby5zbGljZSgwLCBvLmwpIDogbztcbn1cblxuLyogW01TLVhMU0JdIDIuNC44MjQgQnJ0WEYgKi9cbmZ1bmN0aW9uIHBhcnNlX0JydFhGKGRhdGEsIGxlbmd0aC8qOm51bWJlciovKSB7XG5cdHZhciB0Z3QgPSBkYXRhLmwgKyBsZW5ndGg7XG5cdHZhciBpeGZlUGFyZW50ID0gZGF0YS5yZWFkX3NoaWZ0KDIpO1xuXHR2YXIgaWZtdCA9IGRhdGEucmVhZF9zaGlmdCgyKTtcblx0ZGF0YS5sID0gdGd0O1xuXHRyZXR1cm4ge2l4ZmU6aXhmZVBhcmVudCwgbnVtRm10SWQ6aWZtdCB9O1xufVxuZnVuY3Rpb24gd3JpdGVfQnJ0WEYoZGF0YSwgaXhmZVAsIG8pIHtcblx0aWYoIW8pIG8gPSBuZXdfYnVmKDE2KTtcblx0by53cml0ZV9zaGlmdCgyLCBpeGZlUHx8MCk7XG5cdG8ud3JpdGVfc2hpZnQoMiwgZGF0YS5udW1GbXRJZHx8MCk7XG5cdG8ud3JpdGVfc2hpZnQoMiwgMCk7IC8qIGlGb250ICovXG5cdG8ud3JpdGVfc2hpZnQoMiwgMCk7IC8qIGlGaWxsICovXG5cdG8ud3JpdGVfc2hpZnQoMiwgMCk7IC8qIGl4Qm9yZGVyICovXG5cdG8ud3JpdGVfc2hpZnQoMSwgMCk7IC8qIHRyb3QgKi9cblx0by53cml0ZV9zaGlmdCgxLCAwKTsgLyogaW5kZW50ICovXG5cdHZhciBmbG93ID0gMDtcblx0by53cml0ZV9zaGlmdCgxLCBmbG93KTsgLyogZmxhZ3MgKi9cblx0by53cml0ZV9zaGlmdCgxLCAwKTsgLyogZmxhZ3MgKi9cblx0by53cml0ZV9zaGlmdCgxLCAwKTsgLyogeGZHcmJpdEF0ciAqL1xuXHRvLndyaXRlX3NoaWZ0KDEsIDApO1xuXHRyZXR1cm4gbztcbn1cblxuLyogW01TLVhMU0JdIDIuNS40IEJseGYgVE9ETyAqL1xuZnVuY3Rpb24gd3JpdGVfQmx4ZihkYXRhLCBvKSB7XG5cdGlmKCFvKSBvID0gbmV3X2J1ZigxMCk7XG5cdG8ud3JpdGVfc2hpZnQoMSwgMCk7IC8qIGRnICovXG5cdG8ud3JpdGVfc2hpZnQoMSwgMCk7XG5cdG8ud3JpdGVfc2hpZnQoNCwgMCk7IC8qIGNvbG9yICovXG5cdG8ud3JpdGVfc2hpZnQoNCwgMCk7IC8qIGNvbG9yICovXG5cdHJldHVybiBvO1xufVxuLyogW01TLVhMU0JdIDIuNC4zMDIgQnJ0Qm9yZGVyIFRPRE8gKi9cbnZhciBwYXJzZV9CcnRCb3JkZXIgPSBwYXJzZW5vb3A7XG5mdW5jdGlvbiB3cml0ZV9CcnRCb3JkZXIoYm9yZGVyLCBvKSB7XG5cdGlmKCFvKSBvID0gbmV3X2J1Zig1MSk7XG5cdG8ud3JpdGVfc2hpZnQoMSwgMCk7IC8qIGRpYWdvbmFsICovXG5cdHdyaXRlX0JseGYobnVsbCwgbyk7IC8qIHRvcCAqL1xuXHR3cml0ZV9CbHhmKG51bGwsIG8pOyAvKiBib3R0b20gKi9cblx0d3JpdGVfQmx4ZihudWxsLCBvKTsgLyogbGVmdCAqL1xuXHR3cml0ZV9CbHhmKG51bGwsIG8pOyAvKiByaWdodCAqL1xuXHR3cml0ZV9CbHhmKG51bGwsIG8pOyAvKiBkaWFnICovXG5cdHJldHVybiBvLmxlbmd0aCA+IG8ubCA/IG8uc2xpY2UoMCwgby5sKSA6IG87XG59XG5cbi8qIFtNUy1YTFNCXSAyLjQuNzYzIEJydFN0eWxlIFRPRE8gKi9cbmZ1bmN0aW9uIHdyaXRlX0JydFN0eWxlKHN0eWxlLCBvKSB7XG5cdGlmKCFvKSBvID0gbmV3X2J1ZigxMis0KjEwKTtcblx0by53cml0ZV9zaGlmdCg0LCBzdHlsZS54ZklkKTtcblx0by53cml0ZV9zaGlmdCgyLCAxKTtcblx0by53cml0ZV9zaGlmdCgxLCArc3R5bGUuYnVpbHRpbklkKTtcblx0by53cml0ZV9zaGlmdCgxLCAwKTsgLyogaUxldmVsICovXG5cdHdyaXRlX1hMTnVsbGFibGVXaWRlU3RyaW5nKHN0eWxlLm5hbWUgfHwgXCJcIiwgbyk7XG5cdHJldHVybiBvLmxlbmd0aCA+IG8ubCA/IG8uc2xpY2UoMCwgby5sKSA6IG87XG59XG5cbi8qIFtNUy1YTFNCXSAyLjQuMjcyIEJydEJlZ2luVGFibGVTdHlsZXMgKi9cbmZ1bmN0aW9uIHdyaXRlX0JydEJlZ2luVGFibGVTdHlsZXMoY250LCBkZWZUYWJsZVN0eWxlLCBkZWZQaXZvdFN0eWxlKSB7XG5cdHZhciBvID0gbmV3X2J1Zig0KzI1NioyKjQpO1xuXHRvLndyaXRlX3NoaWZ0KDQsIGNudCk7XG5cdHdyaXRlX1hMTnVsbGFibGVXaWRlU3RyaW5nKGRlZlRhYmxlU3R5bGUsIG8pO1xuXHR3cml0ZV9YTE51bGxhYmxlV2lkZVN0cmluZyhkZWZQaXZvdFN0eWxlLCBvKTtcblx0cmV0dXJuIG8ubGVuZ3RoID4gby5sID8gby5zbGljZSgwLCBvLmwpIDogbztcbn1cblxuLyogW01TLVhMU0JdIDIuMS43LjUwIFN0eWxlcyAqL1xuZnVuY3Rpb24gcGFyc2Vfc3R5X2JpbihkYXRhLCB0aGVtZXMsIG9wdHMpIHtcblx0dmFyIHN0eWxlcyA9IHt9O1xuXHRzdHlsZXMuTnVtYmVyRm10ID0gKFtdLyo6YW55Ki8pO1xuXHRmb3IodmFyIHkgaW4gdGFibGVfZm10KSBzdHlsZXMuTnVtYmVyRm10W3ldID0gdGFibGVfZm10W3ldO1xuXG5cdHN0eWxlcy5DZWxsWGYgPSBbXTtcblx0c3R5bGVzLkZvbnRzID0gW107XG5cdHZhciBzdGF0ZS8qOkFycmF5PHN0cmluZz4qLyA9IFtdO1xuXHR2YXIgcGFzcyA9IGZhbHNlO1xuXHRyZWNvcmRob3BwZXIoZGF0YSwgZnVuY3Rpb24gaG9wcGVyX3N0eSh2YWwsIFIsIFJUKSB7XG5cdFx0c3dpdGNoKFJUKSB7XG5cdFx0XHRjYXNlIDB4MDAyQzogLyogQnJ0Rm10ICovXG5cdFx0XHRcdHN0eWxlcy5OdW1iZXJGbXRbdmFsWzBdXSA9IHZhbFsxXTsgU1NGX2xvYWQodmFsWzFdLCB2YWxbMF0pO1xuXHRcdFx0XHRicmVhaztcblx0XHRcdGNhc2UgMHgwMDJCOiAvKiBCcnRGb250ICovXG5cdFx0XHRcdHN0eWxlcy5Gb250cy5wdXNoKHZhbCk7XG5cdFx0XHRcdGlmKHZhbC5jb2xvci50aGVtZSAhPSBudWxsICYmIHRoZW1lcyAmJiB0aGVtZXMudGhlbWVFbGVtZW50cyAmJiB0aGVtZXMudGhlbWVFbGVtZW50cy5jbHJTY2hlbWUpIHtcblx0XHRcdFx0XHR2YWwuY29sb3IucmdiID0gcmdiX3RpbnQodGhlbWVzLnRoZW1lRWxlbWVudHMuY2xyU2NoZW1lW3ZhbC5jb2xvci50aGVtZV0ucmdiLCB2YWwuY29sb3IudGludCB8fCAwKTtcblx0XHRcdFx0fVxuXHRcdFx0XHRicmVhaztcblx0XHRcdGNhc2UgMHgwNDAxOiAvKiBCcnRLbm93bkZvbnRzICovIGJyZWFrO1xuXHRcdFx0Y2FzZSAweDAwMkQ6IC8qIEJydEZpbGwgKi9cblx0XHRcdFx0YnJlYWs7XG5cdFx0XHRjYXNlIDB4MDAyRTogLyogQnJ0Qm9yZGVyICovXG5cdFx0XHRcdGJyZWFrO1xuXHRcdFx0Y2FzZSAweDAwMkY6IC8qIEJydFhGICovXG5cdFx0XHRcdGlmKHN0YXRlW3N0YXRlLmxlbmd0aCAtIDFdID09IDB4MDI2OSAvKiBCcnRCZWdpbkNlbGxYRnMgKi8pIHtcblx0XHRcdFx0XHRzdHlsZXMuQ2VsbFhmLnB1c2godmFsKTtcblx0XHRcdFx0fVxuXHRcdFx0XHRicmVhaztcblx0XHRcdGNhc2UgMHgwMDMwOiAvKiBCcnRTdHlsZSAqL1xuXHRcdFx0Y2FzZSAweDAxRkI6IC8qIEJydERYRiAqL1xuXHRcdFx0Y2FzZSAweDAyM0M6IC8qIEJydE1SVUNvbG9yICovXG5cdFx0XHRjYXNlIDB4MDFEQjogLyogQnJ0SW5kZXhlZENvbG9yICovXG5cdFx0XHRcdGJyZWFrO1xuXG5cdFx0XHRjYXNlIDB4MDQ5MzogLyogQnJ0RFhGMTQgKi9cblx0XHRcdGNhc2UgMHgwODM2OiAvKiBCcnREWEYxNSAqL1xuXHRcdFx0Y2FzZSAweDA0NkE6IC8qIEJydFNsaWNlclN0eWxlRWxlbWVudCAqL1xuXHRcdFx0Y2FzZSAweDAyMDA6IC8qIEJydFRhYmxlU3R5bGVFbGVtZW50ICovXG5cdFx0XHRjYXNlIDB4MDgyRjogLyogQnJ0VGltZWxpbmVTdHlsZUVsZW1lbnQgKi9cblx0XHRcdGNhc2UgMHgwQzAwOiAvKiBCcnRVaWQgKi9cblx0XHRcdFx0YnJlYWs7XG5cblx0XHRcdGNhc2UgMHgwMDIzOiAvKiBCcnRGUlRCZWdpbiAqL1xuXHRcdFx0XHRwYXNzID0gdHJ1ZTsgYnJlYWs7XG5cdFx0XHRjYXNlIDB4MDAyNDogLyogQnJ0RlJURW5kICovXG5cdFx0XHRcdHBhc3MgPSBmYWxzZTsgYnJlYWs7XG5cdFx0XHRjYXNlIDB4MDAyNTogLyogQnJ0QUNCZWdpbiAqL1xuXHRcdFx0XHRzdGF0ZS5wdXNoKFJUKTsgcGFzcyA9IHRydWU7IGJyZWFrO1xuXHRcdFx0Y2FzZSAweDAwMjY6IC8qIEJydEFDRW5kICovXG5cdFx0XHRcdHN0YXRlLnBvcCgpOyBwYXNzID0gZmFsc2U7IGJyZWFrO1xuXG5cdFx0XHRkZWZhdWx0OlxuXHRcdFx0XHRpZihSLlQgPiAwKSBzdGF0ZS5wdXNoKFJUKTtcblx0XHRcdFx0ZWxzZSBpZihSLlQgPCAwKSBzdGF0ZS5wb3AoKTtcblx0XHRcdFx0ZWxzZSBpZighcGFzcyB8fCAob3B0cy5XVEYgJiYgc3RhdGVbc3RhdGUubGVuZ3RoLTFdICE9IDB4MDAyNSAvKiBCcnRBQ0JlZ2luICovKSkgdGhyb3cgbmV3IEVycm9yKFwiVW5leHBlY3RlZCByZWNvcmQgMHhcIiArIFJULnRvU3RyaW5nKDE2KSk7XG5cdFx0fVxuXHR9KTtcblx0cmV0dXJuIHN0eWxlcztcbn1cblxuZnVuY3Rpb24gd3JpdGVfRk1UU19iaW4oYmEsIE5GLyo6P1NTRlRhYmxlKi8pIHtcblx0aWYoIU5GKSByZXR1cm47XG5cdHZhciBjbnQgPSAwO1xuXHRbWzUsOF0sWzIzLDI2XSxbNDEsNDRdLFsvKjYzKi81MCwvKjY2XSxbMTY0LCovMzkyXV0uZm9yRWFjaChmdW5jdGlvbihyKSB7XG5cdFx0Lyo6OiBpZighTkYpIHJldHVybjsgKi9cblx0XHRmb3IodmFyIGkgPSByWzBdOyBpIDw9IHJbMV07ICsraSkgaWYoTkZbaV0gIT0gbnVsbCkgKytjbnQ7XG5cdH0pO1xuXG5cdGlmKGNudCA9PSAwKSByZXR1cm47XG5cdHdyaXRlX3JlY29yZChiYSwgMHgwMjY3IC8qIEJydEJlZ2luRm10cyAqLywgd3JpdGVfVUludDMyTEUoY250KSk7XG5cdFtbNSw4XSxbMjMsMjZdLFs0MSw0NF0sWy8qNjMqLzUwLC8qNjZdLFsxNjQsKi8zOTJdXS5mb3JFYWNoKGZ1bmN0aW9uKHIpIHtcblx0XHQvKjo6IGlmKCFORikgcmV0dXJuOyAqL1xuXHRcdGZvcih2YXIgaSA9IHJbMF07IGkgPD0gclsxXTsgKytpKSBpZihORltpXSAhPSBudWxsKSB3cml0ZV9yZWNvcmQoYmEsIDB4MDAyQyAvKiBCcnRGbXQgKi8sIHdyaXRlX0JydEZtdChpLCBORltpXSkpO1xuXHR9KTtcblx0d3JpdGVfcmVjb3JkKGJhLCAweDAyNjggLyogQnJ0RW5kRm10cyAqLyk7XG59XG5cbmZ1bmN0aW9uIHdyaXRlX0ZPTlRTX2JpbihiYS8qOjosIGRhdGEqLykge1xuXHR2YXIgY250ID0gMTtcblxuXHRpZihjbnQgPT0gMCkgcmV0dXJuO1xuXHR3cml0ZV9yZWNvcmQoYmEsIDB4MDI2MyAvKiBCcnRCZWdpbkZvbnRzICovLCB3cml0ZV9VSW50MzJMRShjbnQpKTtcblx0d3JpdGVfcmVjb3JkKGJhLCAweDAwMkIgLyogQnJ0Rm9udCAqLywgd3JpdGVfQnJ0Rm9udCh7XG5cdFx0c3o6MTIsXG5cdFx0Y29sb3I6IHt0aGVtZToxfSxcblx0XHRuYW1lOiBcIkNhbGlicmlcIixcblx0XHRmYW1pbHk6IDIsXG5cdFx0c2NoZW1lOiBcIm1pbm9yXCJcblx0fSkpO1xuXHQvKiAxKjY1NDkxQnJ0Rm9udCBbQUNGT05UU10gKi9cblx0d3JpdGVfcmVjb3JkKGJhLCAweDAyNjQgLyogQnJ0RW5kRm9udHMgKi8pO1xufVxuXG5mdW5jdGlvbiB3cml0ZV9GSUxMU19iaW4oYmEvKjo6LCBkYXRhKi8pIHtcblx0dmFyIGNudCA9IDI7XG5cblx0aWYoY250ID09IDApIHJldHVybjtcblx0d3JpdGVfcmVjb3JkKGJhLCAweDAyNUIgLyogQnJ0QmVnaW5GaWxscyAqLywgd3JpdGVfVUludDMyTEUoY250KSk7XG5cdHdyaXRlX3JlY29yZChiYSwgMHgwMDJEIC8qIEJydEZpbGwgKi8sIHdyaXRlX0JydEZpbGwoe3BhdHRlcm5UeXBlOlwibm9uZVwifSkpO1xuXHR3cml0ZV9yZWNvcmQoYmEsIDB4MDAyRCAvKiBCcnRGaWxsICovLCB3cml0ZV9CcnRGaWxsKHtwYXR0ZXJuVHlwZTpcImdyYXkxMjVcIn0pKTtcblx0LyogMSo2NTQzMUJydEZpbGwgKi9cblx0d3JpdGVfcmVjb3JkKGJhLCAweDAyNUMgLyogQnJ0RW5kRmlsbHMgKi8pO1xufVxuXG5mdW5jdGlvbiB3cml0ZV9CT1JERVJTX2JpbihiYS8qOjosIGRhdGEqLykge1xuXHR2YXIgY250ID0gMTtcblxuXHRpZihjbnQgPT0gMCkgcmV0dXJuO1xuXHR3cml0ZV9yZWNvcmQoYmEsIDB4MDI2NSAvKiBCcnRCZWdpbkJvcmRlcnMgKi8sIHdyaXRlX1VJbnQzMkxFKGNudCkpO1xuXHR3cml0ZV9yZWNvcmQoYmEsIDB4MDAyRSAvKiBCcnRCb3JkZXIgKi8sIHdyaXRlX0JydEJvcmRlcih7fSkpO1xuXHQvKiAxKjY1NDMwQnJ0Qm9yZGVyICovXG5cdHdyaXRlX3JlY29yZChiYSwgMHgwMjY2IC8qIEJydEVuZEJvcmRlcnMgKi8pO1xufVxuXG5mdW5jdGlvbiB3cml0ZV9DRUxMU1RZTEVYRlNfYmluKGJhLyo6OiwgZGF0YSovKSB7XG5cdHZhciBjbnQgPSAxO1xuXHR3cml0ZV9yZWNvcmQoYmEsIDB4MDI3MiAvKiBCcnRCZWdpbkNlbGxTdHlsZVhGcyAqLywgd3JpdGVfVUludDMyTEUoY250KSk7XG5cdHdyaXRlX3JlY29yZChiYSwgMHgwMDJGIC8qIEJydFhGICovLCB3cml0ZV9CcnRYRih7XG5cdFx0bnVtRm10SWQ6IDAsXG5cdFx0Zm9udElkOiAgIDAsXG5cdFx0ZmlsbElkOiAgIDAsXG5cdFx0Ym9yZGVySWQ6IDBcblx0fSwgMHhGRkZGKSk7XG5cdC8qIDEqNjU0MzAoQnJ0WEYgKkZSVCkgKi9cblx0d3JpdGVfcmVjb3JkKGJhLCAweDAyNzMgLyogQnJ0RW5kQ2VsbFN0eWxlWEZzICovKTtcbn1cblxuZnVuY3Rpb24gd3JpdGVfQ0VMTFhGU19iaW4oYmEsIGRhdGEpIHtcblx0d3JpdGVfcmVjb3JkKGJhLCAweDAyNjkgLyogQnJ0QmVnaW5DZWxsWEZzICovLCB3cml0ZV9VSW50MzJMRShkYXRhLmxlbmd0aCkpO1xuXHRkYXRhLmZvckVhY2goZnVuY3Rpb24oYykgeyB3cml0ZV9yZWNvcmQoYmEsIDB4MDAyRiAvKiBCcnRYRiAqLywgd3JpdGVfQnJ0WEYoYywwKSk7IH0pO1xuXHQvKiAxKjY1NDMwKEJydFhGICpGUlQpICovXG5cdHdyaXRlX3JlY29yZChiYSwgMHgwMjZBIC8qIEJydEVuZENlbGxYRnMgKi8pO1xufVxuXG5mdW5jdGlvbiB3cml0ZV9TVFlMRVNfYmluKGJhLyo6OiwgZGF0YSovKSB7XG5cdHZhciBjbnQgPSAxO1xuXG5cdHdyaXRlX3JlY29yZChiYSwgMHgwMjZCIC8qIEJydEJlZ2luU3R5bGVzICovLCB3cml0ZV9VSW50MzJMRShjbnQpKTtcblx0d3JpdGVfcmVjb3JkKGJhLCAweDAwMzAgLyogQnJ0U3R5bGUgKi8sIHdyaXRlX0JydFN0eWxlKHtcblx0XHR4ZklkOjAsXG5cdFx0YnVpbHRpbklkOjAsXG5cdFx0bmFtZTpcIk5vcm1hbFwiXG5cdH0pKTtcblx0LyogMSo2NTQzMChCcnRTdHlsZSAqRlJUKSAqL1xuXHR3cml0ZV9yZWNvcmQoYmEsIDB4MDI2QyAvKiBCcnRFbmRTdHlsZXMgKi8pO1xufVxuXG5mdW5jdGlvbiB3cml0ZV9EWEZTX2JpbihiYS8qOjosIGRhdGEqLykge1xuXHR2YXIgY250ID0gMDtcblxuXHR3cml0ZV9yZWNvcmQoYmEsIDB4MDFGOSAvKiBCcnRCZWdpbkRYRnMgKi8sIHdyaXRlX1VJbnQzMkxFKGNudCkpO1xuXHQvKiAqMjE0NzQ4MzY0NyhCcnREWEYgKkZSVCkgKi9cblx0d3JpdGVfcmVjb3JkKGJhLCAweDAxRkEgLyogQnJ0RW5kRFhGcyAqLyk7XG59XG5cbmZ1bmN0aW9uIHdyaXRlX1RBQkxFU1RZTEVTX2JpbihiYS8qOjosIGRhdGEqLykge1xuXHR2YXIgY250ID0gMDtcblxuXHR3cml0ZV9yZWNvcmQoYmEsIDB4MDFGQyAvKiBCcnRCZWdpblRhYmxlU3R5bGVzICovLCB3cml0ZV9CcnRCZWdpblRhYmxlU3R5bGVzKGNudCwgXCJUYWJsZVN0eWxlTWVkaXVtOVwiLCBcIlBpdm90U3R5bGVNZWRpdW00XCIpKTtcblx0LyogKlRBQkxFU1RZTEUgKi9cblx0d3JpdGVfcmVjb3JkKGJhLCAweDAxRkQgLyogQnJ0RW5kVGFibGVTdHlsZXMgKi8pO1xufVxuXG5mdW5jdGlvbiB3cml0ZV9DT0xPUlBBTEVUVEVfYmluKC8qOjpiYSwgZGF0YSovKSB7XG5cdHJldHVybjtcblx0LyogQnJ0QmVnaW5Db2xvclBhbGV0dGUgW0lOREVYRURDT0xPUlNdIFtNUlVDT0xPUlNdIEJydEVuZENvbG9yUGFsZXR0ZSAqL1xufVxuXG4vKiBbTVMtWExTQl0gMi4xLjcuNTAgU3R5bGVzICovXG5mdW5jdGlvbiB3cml0ZV9zdHlfYmluKHdiLCBvcHRzKSB7XG5cdHZhciBiYSA9IGJ1Zl9hcnJheSgpO1xuXHR3cml0ZV9yZWNvcmQoYmEsIDB4MDExNiAvKiBCcnRCZWdpblN0eWxlU2hlZXQgKi8pO1xuXHR3cml0ZV9GTVRTX2JpbihiYSwgd2IuU1NGKTtcblx0d3JpdGVfRk9OVFNfYmluKGJhLCB3Yik7XG5cdHdyaXRlX0ZJTExTX2JpbihiYSwgd2IpO1xuXHR3cml0ZV9CT1JERVJTX2JpbihiYSwgd2IpO1xuXHR3cml0ZV9DRUxMU1RZTEVYRlNfYmluKGJhLCB3Yik7XG5cdHdyaXRlX0NFTExYRlNfYmluKGJhLCBvcHRzLmNlbGxYZnMpO1xuXHR3cml0ZV9TVFlMRVNfYmluKGJhLCB3Yik7XG5cdHdyaXRlX0RYRlNfYmluKGJhLCB3Yik7XG5cdHdyaXRlX1RBQkxFU1RZTEVTX2JpbihiYSwgd2IpO1xuXHR3cml0ZV9DT0xPUlBBTEVUVEVfYmluKGJhLCB3Yik7XG5cdC8qIEZSVFNUWUxFU0hFRVQqL1xuXHR3cml0ZV9yZWNvcmQoYmEsIDB4MDExNyAvKiBCcnRFbmRTdHlsZVNoZWV0ICovKTtcblx0cmV0dXJuIGJhLmVuZCgpO1xufVxuLyogRXZlbiB0aG91Z2ggdGhlbWUgbGF5b3V0IGlzIGRrMSBsdDEgZGsyIGx0MiwgdHJ1ZSBvcmRlciBpcyBsdDEgZGsxIGx0MiBkazIgKi9cbnZhciBYTFNYVGhlbWVDbHJTY2hlbWUgPSBbXG5cdCc8L2E6bHQxPicsICc8L2E6ZGsxPicsICc8L2E6bHQyPicsICc8L2E6ZGsyPicsXG5cdCc8L2E6YWNjZW50MT4nLCAnPC9hOmFjY2VudDI+JywgJzwvYTphY2NlbnQzPicsXG5cdCc8L2E6YWNjZW50ND4nLCAnPC9hOmFjY2VudDU+JywgJzwvYTphY2NlbnQ2PicsXG5cdCc8L2E6aGxpbms+JywgJzwvYTpmb2xIbGluaz4nXG5dO1xuLyogMjAuMS42LjIgY2xyU2NoZW1lIENUX0NvbG9yU2NoZW1lICovXG5mdW5jdGlvbiBwYXJzZV9jbHJTY2hlbWUodCwgdGhlbWVzLCBvcHRzKSB7XG5cdHRoZW1lcy50aGVtZUVsZW1lbnRzLmNsclNjaGVtZSA9IFtdO1xuXHR2YXIgY29sb3IgPSB7fTtcblx0KHRbMF0ubWF0Y2godGFncmVnZXgpfHxbXSkuZm9yRWFjaChmdW5jdGlvbih4KSB7XG5cdFx0dmFyIHkgPSBwYXJzZXhtbHRhZyh4KTtcblx0XHRzd2l0Y2goeVswXSkge1xuXHRcdFx0LyogMjAuMS42LjIgY2xyU2NoZW1lIChDb2xvciBTY2hlbWUpIENUX0NvbG9yU2NoZW1lICovXG5cdFx0XHRjYXNlICc8YTpjbHJTY2hlbWUnOiBjYXNlICc8L2E6Y2xyU2NoZW1lPic6IGJyZWFrO1xuXG5cdFx0XHQvKiAyMC4xLjIuMy4zMiBzcmdiQ2xyIENUX1NSZ2JDb2xvciAqL1xuXHRcdFx0Y2FzZSAnPGE6c3JnYkNscic6XG5cdFx0XHRcdGNvbG9yLnJnYiA9IHkudmFsOyBicmVhaztcblxuXHRcdFx0LyogMjAuMS4yLjMuMzMgc3lzQ2xyIENUX1N5c3RlbUNvbG9yICovXG5cdFx0XHRjYXNlICc8YTpzeXNDbHInOlxuXHRcdFx0XHRjb2xvci5yZ2IgPSB5Lmxhc3RDbHI7IGJyZWFrO1xuXG5cdFx0XHQvKiAyMC4xLjQuMS4xIGFjY2VudDEgKEFjY2VudCAxKSAqL1xuXHRcdFx0LyogMjAuMS40LjEuMiBhY2NlbnQyIChBY2NlbnQgMikgKi9cblx0XHRcdC8qIDIwLjEuNC4xLjMgYWNjZW50MyAoQWNjZW50IDMpICovXG5cdFx0XHQvKiAyMC4xLjQuMS40IGFjY2VudDQgKEFjY2VudCA0KSAqL1xuXHRcdFx0LyogMjAuMS40LjEuNSBhY2NlbnQ1IChBY2NlbnQgNSkgKi9cblx0XHRcdC8qIDIwLjEuNC4xLjYgYWNjZW50NiAoQWNjZW50IDYpICovXG5cdFx0XHQvKiAyMC4xLjQuMS45IGRrMSAoRGFyayAxKSAqL1xuXHRcdFx0LyogMjAuMS40LjEuMTAgZGsyIChEYXJrIDIpICovXG5cdFx0XHQvKiAyMC4xLjQuMS4xNSBmb2xIbGluayAoRm9sbG93ZWQgSHlwZXJsaW5rKSAqL1xuXHRcdFx0LyogMjAuMS40LjEuMTkgaGxpbmsgKEh5cGVybGluaykgKi9cblx0XHRcdC8qIDIwLjEuNC4xLjIyIGx0MSAoTGlnaHQgMSkgKi9cblx0XHRcdC8qIDIwLjEuNC4xLjIzIGx0MiAoTGlnaHQgMikgKi9cblx0XHRcdGNhc2UgJzxhOmRrMT4nOiBjYXNlICc8L2E6ZGsxPic6XG5cdFx0XHRjYXNlICc8YTpsdDE+JzogY2FzZSAnPC9hOmx0MT4nOlxuXHRcdFx0Y2FzZSAnPGE6ZGsyPic6IGNhc2UgJzwvYTpkazI+Jzpcblx0XHRcdGNhc2UgJzxhOmx0Mj4nOiBjYXNlICc8L2E6bHQyPic6XG5cdFx0XHRjYXNlICc8YTphY2NlbnQxPic6IGNhc2UgJzwvYTphY2NlbnQxPic6XG5cdFx0XHRjYXNlICc8YTphY2NlbnQyPic6IGNhc2UgJzwvYTphY2NlbnQyPic6XG5cdFx0XHRjYXNlICc8YTphY2NlbnQzPic6IGNhc2UgJzwvYTphY2NlbnQzPic6XG5cdFx0XHRjYXNlICc8YTphY2NlbnQ0Pic6IGNhc2UgJzwvYTphY2NlbnQ0Pic6XG5cdFx0XHRjYXNlICc8YTphY2NlbnQ1Pic6IGNhc2UgJzwvYTphY2NlbnQ1Pic6XG5cdFx0XHRjYXNlICc8YTphY2NlbnQ2Pic6IGNhc2UgJzwvYTphY2NlbnQ2Pic6XG5cdFx0XHRjYXNlICc8YTpobGluaz4nOiBjYXNlICc8L2E6aGxpbms+Jzpcblx0XHRcdGNhc2UgJzxhOmZvbEhsaW5rPic6IGNhc2UgJzwvYTpmb2xIbGluaz4nOlxuXHRcdFx0XHRpZiAoeVswXS5jaGFyQXQoMSkgPT09ICcvJykge1xuXHRcdFx0XHRcdHRoZW1lcy50aGVtZUVsZW1lbnRzLmNsclNjaGVtZVtYTFNYVGhlbWVDbHJTY2hlbWUuaW5kZXhPZih5WzBdKV0gPSBjb2xvcjtcblx0XHRcdFx0XHRjb2xvciA9IHt9O1xuXHRcdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRcdGNvbG9yLm5hbWUgPSB5WzBdLnNsaWNlKDMsIHlbMF0ubGVuZ3RoIC0gMSk7XG5cdFx0XHRcdH1cblx0XHRcdFx0YnJlYWs7XG5cblx0XHRcdGRlZmF1bHQ6IGlmKG9wdHMgJiYgb3B0cy5XVEYpIHRocm93IG5ldyBFcnJvcignVW5yZWNvZ25pemVkICcgKyB5WzBdICsgJyBpbiBjbHJTY2hlbWUnKTtcblx0XHR9XG5cdH0pO1xufVxuXG4vKiAyMC4xLjQuMS4xOCBmb250U2NoZW1lIENUX0ZvbnRTY2hlbWUgKi9cbmZ1bmN0aW9uIHBhcnNlX2ZvbnRTY2hlbWUoLyo6OnQsIHRoZW1lcywgb3B0cyovKSB7IH1cblxuLyogMjAuMS40LjEuMTUgZm10U2NoZW1lIENUX1N0eWxlTWF0cml4ICovXG5mdW5jdGlvbiBwYXJzZV9mbXRTY2hlbWUoLyo6OnQsIHRoZW1lcywgb3B0cyovKSB7IH1cblxudmFyIGNscnNyZWdleCA9IC88YTpjbHJTY2hlbWUoW14+XSopPltcXHNcXFNdKjxcXC9hOmNsclNjaGVtZT4vO1xudmFyIGZudHNyZWdleCA9IC88YTpmb250U2NoZW1lKFtePl0qKT5bXFxzXFxTXSo8XFwvYTpmb250U2NoZW1lPi87XG52YXIgZm10c3JlZ2V4ID0gLzxhOmZtdFNjaGVtZShbXj5dKik+W1xcc1xcU10qPFxcL2E6Zm10U2NoZW1lPi87XG5cbi8qIDIwLjEuNi4xMCB0aGVtZUVsZW1lbnRzIENUX0Jhc2VTdHlsZXMgKi9cbmZ1bmN0aW9uIHBhcnNlX3RoZW1lRWxlbWVudHMoZGF0YSwgdGhlbWVzLCBvcHRzKSB7XG5cdHRoZW1lcy50aGVtZUVsZW1lbnRzID0ge307XG5cblx0dmFyIHQ7XG5cblx0W1xuXHRcdC8qIGNsclNjaGVtZSBDVF9Db2xvclNjaGVtZSAqL1xuXHRcdFsnY2xyU2NoZW1lJywgY2xyc3JlZ2V4LCBwYXJzZV9jbHJTY2hlbWVdLFxuXHRcdC8qIGZvbnRTY2hlbWUgQ1RfRm9udFNjaGVtZSAqL1xuXHRcdFsnZm9udFNjaGVtZScsIGZudHNyZWdleCwgcGFyc2VfZm9udFNjaGVtZV0sXG5cdFx0LyogZm10U2NoZW1lIENUX1N0eWxlTWF0cml4ICovXG5cdFx0WydmbXRTY2hlbWUnLCBmbXRzcmVnZXgsIHBhcnNlX2ZtdFNjaGVtZV1cblx0XS5mb3JFYWNoKGZ1bmN0aW9uKG0pIHtcblx0XHRpZighKHQ9ZGF0YS5tYXRjaChtWzFdKSkpIHRocm93IG5ldyBFcnJvcihtWzBdICsgJyBub3QgZm91bmQgaW4gdGhlbWVFbGVtZW50cycpO1xuXHRcdG1bMl0odCwgdGhlbWVzLCBvcHRzKTtcblx0fSk7XG59XG5cbnZhciB0aGVtZWx0cmVnZXggPSAvPGE6dGhlbWVFbGVtZW50cyhbXj5dKik+W1xcc1xcU10qPFxcL2E6dGhlbWVFbGVtZW50cz4vO1xuXG4vKiAxNC4yLjcgVGhlbWUgUGFydCAqL1xuZnVuY3Rpb24gcGFyc2VfdGhlbWVfeG1sKGRhdGEvKjpzdHJpbmcqLywgb3B0cykge1xuXHQvKiAyMC4xLjYuOSB0aGVtZSBDVF9PZmZpY2VTdHlsZVNoZWV0ICovXG5cdGlmKCFkYXRhIHx8IGRhdGEubGVuZ3RoID09PSAwKSBkYXRhID0gd3JpdGVfdGhlbWUoKTtcblxuXHR2YXIgdDtcblx0dmFyIHRoZW1lcyA9IHt9O1xuXG5cdC8qIHRoZW1lRWxlbWVudHMgQ1RfQmFzZVN0eWxlcyAqL1xuXHRpZighKHQ9ZGF0YS5tYXRjaCh0aGVtZWx0cmVnZXgpKSkgdGhyb3cgbmV3IEVycm9yKCd0aGVtZUVsZW1lbnRzIG5vdCBmb3VuZCBpbiB0aGVtZScpO1xuXHRwYXJzZV90aGVtZUVsZW1lbnRzKHRbMF0sIHRoZW1lcywgb3B0cyk7XG5cdHRoZW1lcy5yYXcgPSBkYXRhO1xuXHRyZXR1cm4gdGhlbWVzO1xufVxuXG5mdW5jdGlvbiB3cml0ZV90aGVtZShUaGVtZXMsIG9wdHMpLyo6c3RyaW5nKi8ge1xuXHRpZihvcHRzICYmIG9wdHMudGhlbWVYTFNYKSByZXR1cm4gb3B0cy50aGVtZVhMU1g7XG5cdGlmKFRoZW1lcyAmJiB0eXBlb2YgVGhlbWVzLnJhdyA9PSBcInN0cmluZ1wiKSByZXR1cm4gVGhlbWVzLnJhdztcblx0dmFyIG8gPSBbWE1MX0hFQURFUl07XG5cdG9bby5sZW5ndGhdID0gJzxhOnRoZW1lIHhtbG5zOmE9XCJodHRwOi8vc2NoZW1hcy5vcGVueG1sZm9ybWF0cy5vcmcvZHJhd2luZ21sLzIwMDYvbWFpblwiIG5hbWU9XCJPZmZpY2UgVGhlbWVcIj4nO1xuXHRvW28ubGVuZ3RoXSA9ICAnPGE6dGhlbWVFbGVtZW50cz4nO1xuXG5cdG9bby5sZW5ndGhdID0gICAnPGE6Y2xyU2NoZW1lIG5hbWU9XCJPZmZpY2VcIj4nO1xuXHRvW28ubGVuZ3RoXSA9ICAgICc8YTpkazE+PGE6c3lzQ2xyIHZhbD1cIndpbmRvd1RleHRcIiBsYXN0Q2xyPVwiMDAwMDAwXCIvPjwvYTpkazE+Jztcblx0b1tvLmxlbmd0aF0gPSAgICAnPGE6bHQxPjxhOnN5c0NsciB2YWw9XCJ3aW5kb3dcIiBsYXN0Q2xyPVwiRkZGRkZGXCIvPjwvYTpsdDE+Jztcblx0b1tvLmxlbmd0aF0gPSAgICAnPGE6ZGsyPjxhOnNyZ2JDbHIgdmFsPVwiMUY0OTdEXCIvPjwvYTpkazI+Jztcblx0b1tvLmxlbmd0aF0gPSAgICAnPGE6bHQyPjxhOnNyZ2JDbHIgdmFsPVwiRUVFQ0UxXCIvPjwvYTpsdDI+Jztcblx0b1tvLmxlbmd0aF0gPSAgICAnPGE6YWNjZW50MT48YTpzcmdiQ2xyIHZhbD1cIjRGODFCRFwiLz48L2E6YWNjZW50MT4nO1xuXHRvW28ubGVuZ3RoXSA9ICAgICc8YTphY2NlbnQyPjxhOnNyZ2JDbHIgdmFsPVwiQzA1MDREXCIvPjwvYTphY2NlbnQyPic7XG5cdG9bby5sZW5ndGhdID0gICAgJzxhOmFjY2VudDM+PGE6c3JnYkNsciB2YWw9XCI5QkJCNTlcIi8+PC9hOmFjY2VudDM+Jztcblx0b1tvLmxlbmd0aF0gPSAgICAnPGE6YWNjZW50ND48YTpzcmdiQ2xyIHZhbD1cIjgwNjRBMlwiLz48L2E6YWNjZW50ND4nO1xuXHRvW28ubGVuZ3RoXSA9ICAgICc8YTphY2NlbnQ1PjxhOnNyZ2JDbHIgdmFsPVwiNEJBQ0M2XCIvPjwvYTphY2NlbnQ1Pic7XG5cdG9bby5sZW5ndGhdID0gICAgJzxhOmFjY2VudDY+PGE6c3JnYkNsciB2YWw9XCJGNzk2NDZcIi8+PC9hOmFjY2VudDY+Jztcblx0b1tvLmxlbmd0aF0gPSAgICAnPGE6aGxpbms+PGE6c3JnYkNsciB2YWw9XCIwMDAwRkZcIi8+PC9hOmhsaW5rPic7XG5cdG9bby5sZW5ndGhdID0gICAgJzxhOmZvbEhsaW5rPjxhOnNyZ2JDbHIgdmFsPVwiODAwMDgwXCIvPjwvYTpmb2xIbGluaz4nO1xuXHRvW28ubGVuZ3RoXSA9ICAgJzwvYTpjbHJTY2hlbWU+JztcblxuXHRvW28ubGVuZ3RoXSA9ICAgJzxhOmZvbnRTY2hlbWUgbmFtZT1cIk9mZmljZVwiPic7XG5cdG9bby5sZW5ndGhdID0gICAgJzxhOm1ham9yRm9udD4nO1xuXHRvW28ubGVuZ3RoXSA9ICAgICAnPGE6bGF0aW4gdHlwZWZhY2U9XCJDYW1icmlhXCIvPic7XG5cdG9bby5sZW5ndGhdID0gICAgICc8YTplYSB0eXBlZmFjZT1cIlwiLz4nO1xuXHRvW28ubGVuZ3RoXSA9ICAgICAnPGE6Y3MgdHlwZWZhY2U9XCJcIi8+Jztcblx0b1tvLmxlbmd0aF0gPSAgICAgJzxhOmZvbnQgc2NyaXB0PVwiSnBhblwiIHR5cGVmYWNlPVwi77yt77yzIO+8sOOCtOOCt+ODg+OCr1wiLz4nO1xuXHRvW28ubGVuZ3RoXSA9ICAgICAnPGE6Zm9udCBzY3JpcHQ9XCJIYW5nXCIgdHlwZWZhY2U9XCLrp5HsnYAg6rOg65SVXCIvPic7XG5cdG9bby5sZW5ndGhdID0gICAgICc8YTpmb250IHNjcmlwdD1cIkhhbnNcIiB0eXBlZmFjZT1cIuWui+S9k1wiLz4nO1xuXHRvW28ubGVuZ3RoXSA9ICAgICAnPGE6Zm9udCBzY3JpcHQ9XCJIYW50XCIgdHlwZWZhY2U9XCLmlrDntLDmmI7pq5RcIi8+Jztcblx0b1tvLmxlbmd0aF0gPSAgICAgJzxhOmZvbnQgc2NyaXB0PVwiQXJhYlwiIHR5cGVmYWNlPVwiVGltZXMgTmV3IFJvbWFuXCIvPic7XG5cdG9bby5sZW5ndGhdID0gICAgICc8YTpmb250IHNjcmlwdD1cIkhlYnJcIiB0eXBlZmFjZT1cIlRpbWVzIE5ldyBSb21hblwiLz4nO1xuXHRvW28ubGVuZ3RoXSA9ICAgICAnPGE6Zm9udCBzY3JpcHQ9XCJUaGFpXCIgdHlwZWZhY2U9XCJUYWhvbWFcIi8+Jztcblx0b1tvLmxlbmd0aF0gPSAgICAgJzxhOmZvbnQgc2NyaXB0PVwiRXRoaVwiIHR5cGVmYWNlPVwiTnlhbGFcIi8+Jztcblx0b1tvLmxlbmd0aF0gPSAgICAgJzxhOmZvbnQgc2NyaXB0PVwiQmVuZ1wiIHR5cGVmYWNlPVwiVnJpbmRhXCIvPic7XG5cdG9bby5sZW5ndGhdID0gICAgICc8YTpmb250IHNjcmlwdD1cIkd1anJcIiB0eXBlZmFjZT1cIlNocnV0aVwiLz4nO1xuXHRvW28ubGVuZ3RoXSA9ICAgICAnPGE6Zm9udCBzY3JpcHQ9XCJLaG1yXCIgdHlwZWZhY2U9XCJNb29sQm9yYW5cIi8+Jztcblx0b1tvLmxlbmd0aF0gPSAgICAgJzxhOmZvbnQgc2NyaXB0PVwiS25kYVwiIHR5cGVmYWNlPVwiVHVuZ2FcIi8+Jztcblx0b1tvLmxlbmd0aF0gPSAgICAgJzxhOmZvbnQgc2NyaXB0PVwiR3VydVwiIHR5cGVmYWNlPVwiUmFhdmlcIi8+Jztcblx0b1tvLmxlbmd0aF0gPSAgICAgJzxhOmZvbnQgc2NyaXB0PVwiQ2Fuc1wiIHR5cGVmYWNlPVwiRXVwaGVtaWFcIi8+Jztcblx0b1tvLmxlbmd0aF0gPSAgICAgJzxhOmZvbnQgc2NyaXB0PVwiQ2hlclwiIHR5cGVmYWNlPVwiUGxhbnRhZ2VuZXQgQ2hlcm9rZWVcIi8+Jztcblx0b1tvLmxlbmd0aF0gPSAgICAgJzxhOmZvbnQgc2NyaXB0PVwiWWlpaVwiIHR5cGVmYWNlPVwiTWljcm9zb2Z0IFlpIEJhaXRpXCIvPic7XG5cdG9bby5sZW5ndGhdID0gICAgICc8YTpmb250IHNjcmlwdD1cIlRpYnRcIiB0eXBlZmFjZT1cIk1pY3Jvc29mdCBIaW1hbGF5YVwiLz4nO1xuXHRvW28ubGVuZ3RoXSA9ICAgICAnPGE6Zm9udCBzY3JpcHQ9XCJUaGFhXCIgdHlwZWZhY2U9XCJNViBCb2xpXCIvPic7XG5cdG9bby5sZW5ndGhdID0gICAgICc8YTpmb250IHNjcmlwdD1cIkRldmFcIiB0eXBlZmFjZT1cIk1hbmdhbFwiLz4nO1xuXHRvW28ubGVuZ3RoXSA9ICAgICAnPGE6Zm9udCBzY3JpcHQ9XCJUZWx1XCIgdHlwZWZhY2U9XCJHYXV0YW1pXCIvPic7XG5cdG9bby5sZW5ndGhdID0gICAgICc8YTpmb250IHNjcmlwdD1cIlRhbWxcIiB0eXBlZmFjZT1cIkxhdGhhXCIvPic7XG5cdG9bby5sZW5ndGhdID0gICAgICc8YTpmb250IHNjcmlwdD1cIlN5cmNcIiB0eXBlZmFjZT1cIkVzdHJhbmdlbG8gRWRlc3NhXCIvPic7XG5cdG9bby5sZW5ndGhdID0gICAgICc8YTpmb250IHNjcmlwdD1cIk9yeWFcIiB0eXBlZmFjZT1cIkthbGluZ2FcIi8+Jztcblx0b1tvLmxlbmd0aF0gPSAgICAgJzxhOmZvbnQgc2NyaXB0PVwiTWx5bVwiIHR5cGVmYWNlPVwiS2FydGlrYVwiLz4nO1xuXHRvW28ubGVuZ3RoXSA9ICAgICAnPGE6Zm9udCBzY3JpcHQ9XCJMYW9vXCIgdHlwZWZhY2U9XCJEb2tDaGFtcGFcIi8+Jztcblx0b1tvLmxlbmd0aF0gPSAgICAgJzxhOmZvbnQgc2NyaXB0PVwiU2luaFwiIHR5cGVmYWNlPVwiSXNrb29sYSBQb3RhXCIvPic7XG5cdG9bby5sZW5ndGhdID0gICAgICc8YTpmb250IHNjcmlwdD1cIk1vbmdcIiB0eXBlZmFjZT1cIk1vbmdvbGlhbiBCYWl0aVwiLz4nO1xuXHRvW28ubGVuZ3RoXSA9ICAgICAnPGE6Zm9udCBzY3JpcHQ9XCJWaWV0XCIgdHlwZWZhY2U9XCJUaW1lcyBOZXcgUm9tYW5cIi8+Jztcblx0b1tvLmxlbmd0aF0gPSAgICAgJzxhOmZvbnQgc2NyaXB0PVwiVWlnaFwiIHR5cGVmYWNlPVwiTWljcm9zb2Z0IFVpZ2h1clwiLz4nO1xuXHRvW28ubGVuZ3RoXSA9ICAgICAnPGE6Zm9udCBzY3JpcHQ9XCJHZW9yXCIgdHlwZWZhY2U9XCJTeWxmYWVuXCIvPic7XG5cdG9bby5sZW5ndGhdID0gICAgJzwvYTptYWpvckZvbnQ+Jztcblx0b1tvLmxlbmd0aF0gPSAgICAnPGE6bWlub3JGb250Pic7XG5cdG9bby5sZW5ndGhdID0gICAgICc8YTpsYXRpbiB0eXBlZmFjZT1cIkNhbGlicmlcIi8+Jztcblx0b1tvLmxlbmd0aF0gPSAgICAgJzxhOmVhIHR5cGVmYWNlPVwiXCIvPic7XG5cdG9bby5sZW5ndGhdID0gICAgICc8YTpjcyB0eXBlZmFjZT1cIlwiLz4nO1xuXHRvW28ubGVuZ3RoXSA9ICAgICAnPGE6Zm9udCBzY3JpcHQ9XCJKcGFuXCIgdHlwZWZhY2U9XCLvvK3vvLMg77yw44K044K344OD44KvXCIvPic7XG5cdG9bby5sZW5ndGhdID0gICAgICc8YTpmb250IHNjcmlwdD1cIkhhbmdcIiB0eXBlZmFjZT1cIuunkeydgCDqs6DrlJVcIi8+Jztcblx0b1tvLmxlbmd0aF0gPSAgICAgJzxhOmZvbnQgc2NyaXB0PVwiSGFuc1wiIHR5cGVmYWNlPVwi5a6L5L2TXCIvPic7XG5cdG9bby5sZW5ndGhdID0gICAgICc8YTpmb250IHNjcmlwdD1cIkhhbnRcIiB0eXBlZmFjZT1cIuaWsOe0sOaYjumrlFwiLz4nO1xuXHRvW28ubGVuZ3RoXSA9ICAgICAnPGE6Zm9udCBzY3JpcHQ9XCJBcmFiXCIgdHlwZWZhY2U9XCJBcmlhbFwiLz4nO1xuXHRvW28ubGVuZ3RoXSA9ICAgICAnPGE6Zm9udCBzY3JpcHQ9XCJIZWJyXCIgdHlwZWZhY2U9XCJBcmlhbFwiLz4nO1xuXHRvW28ubGVuZ3RoXSA9ICAgICAnPGE6Zm9udCBzY3JpcHQ9XCJUaGFpXCIgdHlwZWZhY2U9XCJUYWhvbWFcIi8+Jztcblx0b1tvLmxlbmd0aF0gPSAgICAgJzxhOmZvbnQgc2NyaXB0PVwiRXRoaVwiIHR5cGVmYWNlPVwiTnlhbGFcIi8+Jztcblx0b1tvLmxlbmd0aF0gPSAgICAgJzxhOmZvbnQgc2NyaXB0PVwiQmVuZ1wiIHR5cGVmYWNlPVwiVnJpbmRhXCIvPic7XG5cdG9bby5sZW5ndGhdID0gICAgICc8YTpmb250IHNjcmlwdD1cIkd1anJcIiB0eXBlZmFjZT1cIlNocnV0aVwiLz4nO1xuXHRvW28ubGVuZ3RoXSA9ICAgICAnPGE6Zm9udCBzY3JpcHQ9XCJLaG1yXCIgdHlwZWZhY2U9XCJEYXVuUGVuaFwiLz4nO1xuXHRvW28ubGVuZ3RoXSA9ICAgICAnPGE6Zm9udCBzY3JpcHQ9XCJLbmRhXCIgdHlwZWZhY2U9XCJUdW5nYVwiLz4nO1xuXHRvW28ubGVuZ3RoXSA9ICAgICAnPGE6Zm9udCBzY3JpcHQ9XCJHdXJ1XCIgdHlwZWZhY2U9XCJSYWF2aVwiLz4nO1xuXHRvW28ubGVuZ3RoXSA9ICAgICAnPGE6Zm9udCBzY3JpcHQ9XCJDYW5zXCIgdHlwZWZhY2U9XCJFdXBoZW1pYVwiLz4nO1xuXHRvW28ubGVuZ3RoXSA9ICAgICAnPGE6Zm9udCBzY3JpcHQ9XCJDaGVyXCIgdHlwZWZhY2U9XCJQbGFudGFnZW5ldCBDaGVyb2tlZVwiLz4nO1xuXHRvW28ubGVuZ3RoXSA9ICAgICAnPGE6Zm9udCBzY3JpcHQ9XCJZaWlpXCIgdHlwZWZhY2U9XCJNaWNyb3NvZnQgWWkgQmFpdGlcIi8+Jztcblx0b1tvLmxlbmd0aF0gPSAgICAgJzxhOmZvbnQgc2NyaXB0PVwiVGlidFwiIHR5cGVmYWNlPVwiTWljcm9zb2Z0IEhpbWFsYXlhXCIvPic7XG5cdG9bby5sZW5ndGhdID0gICAgICc8YTpmb250IHNjcmlwdD1cIlRoYWFcIiB0eXBlZmFjZT1cIk1WIEJvbGlcIi8+Jztcblx0b1tvLmxlbmd0aF0gPSAgICAgJzxhOmZvbnQgc2NyaXB0PVwiRGV2YVwiIHR5cGVmYWNlPVwiTWFuZ2FsXCIvPic7XG5cdG9bby5sZW5ndGhdID0gICAgICc8YTpmb250IHNjcmlwdD1cIlRlbHVcIiB0eXBlZmFjZT1cIkdhdXRhbWlcIi8+Jztcblx0b1tvLmxlbmd0aF0gPSAgICAgJzxhOmZvbnQgc2NyaXB0PVwiVGFtbFwiIHR5cGVmYWNlPVwiTGF0aGFcIi8+Jztcblx0b1tvLmxlbmd0aF0gPSAgICAgJzxhOmZvbnQgc2NyaXB0PVwiU3lyY1wiIHR5cGVmYWNlPVwiRXN0cmFuZ2VsbyBFZGVzc2FcIi8+Jztcblx0b1tvLmxlbmd0aF0gPSAgICAgJzxhOmZvbnQgc2NyaXB0PVwiT3J5YVwiIHR5cGVmYWNlPVwiS2FsaW5nYVwiLz4nO1xuXHRvW28ubGVuZ3RoXSA9ICAgICAnPGE6Zm9udCBzY3JpcHQ9XCJNbHltXCIgdHlwZWZhY2U9XCJLYXJ0aWthXCIvPic7XG5cdG9bby5sZW5ndGhdID0gICAgICc8YTpmb250IHNjcmlwdD1cIkxhb29cIiB0eXBlZmFjZT1cIkRva0NoYW1wYVwiLz4nO1xuXHRvW28ubGVuZ3RoXSA9ICAgICAnPGE6Zm9udCBzY3JpcHQ9XCJTaW5oXCIgdHlwZWZhY2U9XCJJc2tvb2xhIFBvdGFcIi8+Jztcblx0b1tvLmxlbmd0aF0gPSAgICAgJzxhOmZvbnQgc2NyaXB0PVwiTW9uZ1wiIHR5cGVmYWNlPVwiTW9uZ29saWFuIEJhaXRpXCIvPic7XG5cdG9bby5sZW5ndGhdID0gICAgICc8YTpmb250IHNjcmlwdD1cIlZpZXRcIiB0eXBlZmFjZT1cIkFyaWFsXCIvPic7XG5cdG9bby5sZW5ndGhdID0gICAgICc8YTpmb250IHNjcmlwdD1cIlVpZ2hcIiB0eXBlZmFjZT1cIk1pY3Jvc29mdCBVaWdodXJcIi8+Jztcblx0b1tvLmxlbmd0aF0gPSAgICAgJzxhOmZvbnQgc2NyaXB0PVwiR2VvclwiIHR5cGVmYWNlPVwiU3lsZmFlblwiLz4nO1xuXHRvW28ubGVuZ3RoXSA9ICAgICc8L2E6bWlub3JGb250Pic7XG5cdG9bby5sZW5ndGhdID0gICAnPC9hOmZvbnRTY2hlbWU+JztcblxuXHRvW28ubGVuZ3RoXSA9ICAgJzxhOmZtdFNjaGVtZSBuYW1lPVwiT2ZmaWNlXCI+Jztcblx0b1tvLmxlbmd0aF0gPSAgICAnPGE6ZmlsbFN0eWxlTHN0Pic7XG5cdG9bby5sZW5ndGhdID0gICAgICc8YTpzb2xpZEZpbGw+PGE6c2NoZW1lQ2xyIHZhbD1cInBoQ2xyXCIvPjwvYTpzb2xpZEZpbGw+Jztcblx0b1tvLmxlbmd0aF0gPSAgICAgJzxhOmdyYWRGaWxsIHJvdFdpdGhTaGFwZT1cIjFcIj4nO1xuXHRvW28ubGVuZ3RoXSA9ICAgICAgJzxhOmdzTHN0Pic7XG5cdG9bby5sZW5ndGhdID0gICAgICAgJzxhOmdzIHBvcz1cIjBcIj48YTpzY2hlbWVDbHIgdmFsPVwicGhDbHJcIj48YTp0aW50IHZhbD1cIjUwMDAwXCIvPjxhOnNhdE1vZCB2YWw9XCIzMDAwMDBcIi8+PC9hOnNjaGVtZUNscj48L2E6Z3M+Jztcblx0b1tvLmxlbmd0aF0gPSAgICAgICAnPGE6Z3MgcG9zPVwiMzUwMDBcIj48YTpzY2hlbWVDbHIgdmFsPVwicGhDbHJcIj48YTp0aW50IHZhbD1cIjM3MDAwXCIvPjxhOnNhdE1vZCB2YWw9XCIzMDAwMDBcIi8+PC9hOnNjaGVtZUNscj48L2E6Z3M+Jztcblx0b1tvLmxlbmd0aF0gPSAgICAgICAnPGE6Z3MgcG9zPVwiMTAwMDAwXCI+PGE6c2NoZW1lQ2xyIHZhbD1cInBoQ2xyXCI+PGE6dGludCB2YWw9XCIxNTAwMFwiLz48YTpzYXRNb2QgdmFsPVwiMzUwMDAwXCIvPjwvYTpzY2hlbWVDbHI+PC9hOmdzPic7XG5cdG9bby5sZW5ndGhdID0gICAgICAnPC9hOmdzTHN0Pic7XG5cdG9bby5sZW5ndGhdID0gICAgICAnPGE6bGluIGFuZz1cIjE2MjAwMDAwXCIgc2NhbGVkPVwiMVwiLz4nO1xuXHRvW28ubGVuZ3RoXSA9ICAgICAnPC9hOmdyYWRGaWxsPic7XG5cdG9bby5sZW5ndGhdID0gICAgICc8YTpncmFkRmlsbCByb3RXaXRoU2hhcGU9XCIxXCI+Jztcblx0b1tvLmxlbmd0aF0gPSAgICAgICc8YTpnc0xzdD4nO1xuXHRvW28ubGVuZ3RoXSA9ICAgICAgICc8YTpncyBwb3M9XCIwXCI+PGE6c2NoZW1lQ2xyIHZhbD1cInBoQ2xyXCI+PGE6dGludCB2YWw9XCIxMDAwMDBcIi8+PGE6c2hhZGUgdmFsPVwiMTAwMDAwXCIvPjxhOnNhdE1vZCB2YWw9XCIxMzAwMDBcIi8+PC9hOnNjaGVtZUNscj48L2E6Z3M+Jztcblx0b1tvLmxlbmd0aF0gPSAgICAgICAnPGE6Z3MgcG9zPVwiMTAwMDAwXCI+PGE6c2NoZW1lQ2xyIHZhbD1cInBoQ2xyXCI+PGE6dGludCB2YWw9XCI1MDAwMFwiLz48YTpzaGFkZSB2YWw9XCIxMDAwMDBcIi8+PGE6c2F0TW9kIHZhbD1cIjM1MDAwMFwiLz48L2E6c2NoZW1lQ2xyPjwvYTpncz4nO1xuXHRvW28ubGVuZ3RoXSA9ICAgICAgJzwvYTpnc0xzdD4nO1xuXHRvW28ubGVuZ3RoXSA9ICAgICAgJzxhOmxpbiBhbmc9XCIxNjIwMDAwMFwiIHNjYWxlZD1cIjBcIi8+Jztcblx0b1tvLmxlbmd0aF0gPSAgICAgJzwvYTpncmFkRmlsbD4nO1xuXHRvW28ubGVuZ3RoXSA9ICAgICc8L2E6ZmlsbFN0eWxlTHN0Pic7XG5cdG9bby5sZW5ndGhdID0gICAgJzxhOmxuU3R5bGVMc3Q+Jztcblx0b1tvLmxlbmd0aF0gPSAgICAgJzxhOmxuIHc9XCI5NTI1XCIgY2FwPVwiZmxhdFwiIGNtcGQ9XCJzbmdcIiBhbGduPVwiY3RyXCI+PGE6c29saWRGaWxsPjxhOnNjaGVtZUNsciB2YWw9XCJwaENsclwiPjxhOnNoYWRlIHZhbD1cIjk1MDAwXCIvPjxhOnNhdE1vZCB2YWw9XCIxMDUwMDBcIi8+PC9hOnNjaGVtZUNscj48L2E6c29saWRGaWxsPjxhOnByc3REYXNoIHZhbD1cInNvbGlkXCIvPjwvYTpsbj4nO1xuXHRvW28ubGVuZ3RoXSA9ICAgICAnPGE6bG4gdz1cIjI1NDAwXCIgY2FwPVwiZmxhdFwiIGNtcGQ9XCJzbmdcIiBhbGduPVwiY3RyXCI+PGE6c29saWRGaWxsPjxhOnNjaGVtZUNsciB2YWw9XCJwaENsclwiLz48L2E6c29saWRGaWxsPjxhOnByc3REYXNoIHZhbD1cInNvbGlkXCIvPjwvYTpsbj4nO1xuXHRvW28ubGVuZ3RoXSA9ICAgICAnPGE6bG4gdz1cIjM4MTAwXCIgY2FwPVwiZmxhdFwiIGNtcGQ9XCJzbmdcIiBhbGduPVwiY3RyXCI+PGE6c29saWRGaWxsPjxhOnNjaGVtZUNsciB2YWw9XCJwaENsclwiLz48L2E6c29saWRGaWxsPjxhOnByc3REYXNoIHZhbD1cInNvbGlkXCIvPjwvYTpsbj4nO1xuXHRvW28ubGVuZ3RoXSA9ICAgICc8L2E6bG5TdHlsZUxzdD4nO1xuXHRvW28ubGVuZ3RoXSA9ICAgICc8YTplZmZlY3RTdHlsZUxzdD4nO1xuXHRvW28ubGVuZ3RoXSA9ICAgICAnPGE6ZWZmZWN0U3R5bGU+Jztcblx0b1tvLmxlbmd0aF0gPSAgICAgICc8YTplZmZlY3RMc3Q+Jztcblx0b1tvLmxlbmd0aF0gPSAgICAgICAnPGE6b3V0ZXJTaGR3IGJsdXJSYWQ9XCI0MDAwMFwiIGRpc3Q9XCIyMDAwMFwiIGRpcj1cIjU0MDAwMDBcIiByb3RXaXRoU2hhcGU9XCIwXCI+PGE6c3JnYkNsciB2YWw9XCIwMDAwMDBcIj48YTphbHBoYSB2YWw9XCIzODAwMFwiLz48L2E6c3JnYkNscj48L2E6b3V0ZXJTaGR3Pic7XG5cdG9bby5sZW5ndGhdID0gICAgICAnPC9hOmVmZmVjdExzdD4nO1xuXHRvW28ubGVuZ3RoXSA9ICAgICAnPC9hOmVmZmVjdFN0eWxlPic7XG5cdG9bby5sZW5ndGhdID0gICAgICc8YTplZmZlY3RTdHlsZT4nO1xuXHRvW28ubGVuZ3RoXSA9ICAgICAgJzxhOmVmZmVjdExzdD4nO1xuXHRvW28ubGVuZ3RoXSA9ICAgICAgICc8YTpvdXRlclNoZHcgYmx1clJhZD1cIjQwMDAwXCIgZGlzdD1cIjIzMDAwXCIgZGlyPVwiNTQwMDAwMFwiIHJvdFdpdGhTaGFwZT1cIjBcIj48YTpzcmdiQ2xyIHZhbD1cIjAwMDAwMFwiPjxhOmFscGhhIHZhbD1cIjM1MDAwXCIvPjwvYTpzcmdiQ2xyPjwvYTpvdXRlclNoZHc+Jztcblx0b1tvLmxlbmd0aF0gPSAgICAgICc8L2E6ZWZmZWN0THN0Pic7XG5cdG9bby5sZW5ndGhdID0gICAgICc8L2E6ZWZmZWN0U3R5bGU+Jztcblx0b1tvLmxlbmd0aF0gPSAgICAgJzxhOmVmZmVjdFN0eWxlPic7XG5cdG9bby5sZW5ndGhdID0gICAgICAnPGE6ZWZmZWN0THN0Pic7XG5cdG9bby5sZW5ndGhdID0gICAgICAgJzxhOm91dGVyU2hkdyBibHVyUmFkPVwiNDAwMDBcIiBkaXN0PVwiMjMwMDBcIiBkaXI9XCI1NDAwMDAwXCIgcm90V2l0aFNoYXBlPVwiMFwiPjxhOnNyZ2JDbHIgdmFsPVwiMDAwMDAwXCI+PGE6YWxwaGEgdmFsPVwiMzUwMDBcIi8+PC9hOnNyZ2JDbHI+PC9hOm91dGVyU2hkdz4nO1xuXHRvW28ubGVuZ3RoXSA9ICAgICAgJzwvYTplZmZlY3RMc3Q+Jztcblx0b1tvLmxlbmd0aF0gPSAgICAgICc8YTpzY2VuZTNkPjxhOmNhbWVyYSBwcnN0PVwib3J0aG9ncmFwaGljRnJvbnRcIj48YTpyb3QgbGF0PVwiMFwiIGxvbj1cIjBcIiByZXY9XCIwXCIvPjwvYTpjYW1lcmE+PGE6bGlnaHRSaWcgcmlnPVwidGhyZWVQdFwiIGRpcj1cInRcIj48YTpyb3QgbGF0PVwiMFwiIGxvbj1cIjBcIiByZXY9XCIxMjAwMDAwXCIvPjwvYTpsaWdodFJpZz48L2E6c2NlbmUzZD4nO1xuXHRvW28ubGVuZ3RoXSA9ICAgICAgJzxhOnNwM2Q+PGE6YmV2ZWxUIHc9XCI2MzUwMFwiIGg9XCIyNTQwMFwiLz48L2E6c3AzZD4nO1xuXHRvW28ubGVuZ3RoXSA9ICAgICAnPC9hOmVmZmVjdFN0eWxlPic7XG5cdG9bby5sZW5ndGhdID0gICAgJzwvYTplZmZlY3RTdHlsZUxzdD4nO1xuXHRvW28ubGVuZ3RoXSA9ICAgICc8YTpiZ0ZpbGxTdHlsZUxzdD4nO1xuXHRvW28ubGVuZ3RoXSA9ICAgICAnPGE6c29saWRGaWxsPjxhOnNjaGVtZUNsciB2YWw9XCJwaENsclwiLz48L2E6c29saWRGaWxsPic7XG5cdG9bby5sZW5ndGhdID0gICAgICc8YTpncmFkRmlsbCByb3RXaXRoU2hhcGU9XCIxXCI+Jztcblx0b1tvLmxlbmd0aF0gPSAgICAgICc8YTpnc0xzdD4nO1xuXHRvW28ubGVuZ3RoXSA9ICAgICAgICc8YTpncyBwb3M9XCIwXCI+PGE6c2NoZW1lQ2xyIHZhbD1cInBoQ2xyXCI+PGE6dGludCB2YWw9XCI0MDAwMFwiLz48YTpzYXRNb2QgdmFsPVwiMzUwMDAwXCIvPjwvYTpzY2hlbWVDbHI+PC9hOmdzPic7XG5cdG9bby5sZW5ndGhdID0gICAgICAgJzxhOmdzIHBvcz1cIjQwMDAwXCI+PGE6c2NoZW1lQ2xyIHZhbD1cInBoQ2xyXCI+PGE6dGludCB2YWw9XCI0NTAwMFwiLz48YTpzaGFkZSB2YWw9XCI5OTAwMFwiLz48YTpzYXRNb2QgdmFsPVwiMzUwMDAwXCIvPjwvYTpzY2hlbWVDbHI+PC9hOmdzPic7XG5cdG9bby5sZW5ndGhdID0gICAgICAgJzxhOmdzIHBvcz1cIjEwMDAwMFwiPjxhOnNjaGVtZUNsciB2YWw9XCJwaENsclwiPjxhOnNoYWRlIHZhbD1cIjIwMDAwXCIvPjxhOnNhdE1vZCB2YWw9XCIyNTUwMDBcIi8+PC9hOnNjaGVtZUNscj48L2E6Z3M+Jztcblx0b1tvLmxlbmd0aF0gPSAgICAgICc8L2E6Z3NMc3Q+Jztcblx0b1tvLmxlbmd0aF0gPSAgICAgICc8YTpwYXRoIHBhdGg9XCJjaXJjbGVcIj48YTpmaWxsVG9SZWN0IGw9XCI1MDAwMFwiIHQ9XCItODAwMDBcIiByPVwiNTAwMDBcIiBiPVwiMTgwMDAwXCIvPjwvYTpwYXRoPic7XG5cdG9bby5sZW5ndGhdID0gICAgICc8L2E6Z3JhZEZpbGw+Jztcblx0b1tvLmxlbmd0aF0gPSAgICAgJzxhOmdyYWRGaWxsIHJvdFdpdGhTaGFwZT1cIjFcIj4nO1xuXHRvW28ubGVuZ3RoXSA9ICAgICAgJzxhOmdzTHN0Pic7XG5cdG9bby5sZW5ndGhdID0gICAgICAgJzxhOmdzIHBvcz1cIjBcIj48YTpzY2hlbWVDbHIgdmFsPVwicGhDbHJcIj48YTp0aW50IHZhbD1cIjgwMDAwXCIvPjxhOnNhdE1vZCB2YWw9XCIzMDAwMDBcIi8+PC9hOnNjaGVtZUNscj48L2E6Z3M+Jztcblx0b1tvLmxlbmd0aF0gPSAgICAgICAnPGE6Z3MgcG9zPVwiMTAwMDAwXCI+PGE6c2NoZW1lQ2xyIHZhbD1cInBoQ2xyXCI+PGE6c2hhZGUgdmFsPVwiMzAwMDBcIi8+PGE6c2F0TW9kIHZhbD1cIjIwMDAwMFwiLz48L2E6c2NoZW1lQ2xyPjwvYTpncz4nO1xuXHRvW28ubGVuZ3RoXSA9ICAgICAgJzwvYTpnc0xzdD4nO1xuXHRvW28ubGVuZ3RoXSA9ICAgICAgJzxhOnBhdGggcGF0aD1cImNpcmNsZVwiPjxhOmZpbGxUb1JlY3QgbD1cIjUwMDAwXCIgdD1cIjUwMDAwXCIgcj1cIjUwMDAwXCIgYj1cIjUwMDAwXCIvPjwvYTpwYXRoPic7XG5cdG9bby5sZW5ndGhdID0gICAgICc8L2E6Z3JhZEZpbGw+Jztcblx0b1tvLmxlbmd0aF0gPSAgICAnPC9hOmJnRmlsbFN0eWxlTHN0Pic7XG5cdG9bby5sZW5ndGhdID0gICAnPC9hOmZtdFNjaGVtZT4nO1xuXHRvW28ubGVuZ3RoXSA9ICAnPC9hOnRoZW1lRWxlbWVudHM+JztcblxuXHRvW28ubGVuZ3RoXSA9ICAnPGE6b2JqZWN0RGVmYXVsdHM+Jztcblx0b1tvLmxlbmd0aF0gPSAgICc8YTpzcERlZj4nO1xuXHRvW28ubGVuZ3RoXSA9ICAgICc8YTpzcFByLz48YTpib2R5UHIvPjxhOmxzdFN0eWxlLz48YTpzdHlsZT48YTpsblJlZiBpZHg9XCIxXCI+PGE6c2NoZW1lQ2xyIHZhbD1cImFjY2VudDFcIi8+PC9hOmxuUmVmPjxhOmZpbGxSZWYgaWR4PVwiM1wiPjxhOnNjaGVtZUNsciB2YWw9XCJhY2NlbnQxXCIvPjwvYTpmaWxsUmVmPjxhOmVmZmVjdFJlZiBpZHg9XCIyXCI+PGE6c2NoZW1lQ2xyIHZhbD1cImFjY2VudDFcIi8+PC9hOmVmZmVjdFJlZj48YTpmb250UmVmIGlkeD1cIm1pbm9yXCI+PGE6c2NoZW1lQ2xyIHZhbD1cImx0MVwiLz48L2E6Zm9udFJlZj48L2E6c3R5bGU+Jztcblx0b1tvLmxlbmd0aF0gPSAgICc8L2E6c3BEZWY+Jztcblx0b1tvLmxlbmd0aF0gPSAgICc8YTpsbkRlZj4nO1xuXHRvW28ubGVuZ3RoXSA9ICAgICc8YTpzcFByLz48YTpib2R5UHIvPjxhOmxzdFN0eWxlLz48YTpzdHlsZT48YTpsblJlZiBpZHg9XCIyXCI+PGE6c2NoZW1lQ2xyIHZhbD1cImFjY2VudDFcIi8+PC9hOmxuUmVmPjxhOmZpbGxSZWYgaWR4PVwiMFwiPjxhOnNjaGVtZUNsciB2YWw9XCJhY2NlbnQxXCIvPjwvYTpmaWxsUmVmPjxhOmVmZmVjdFJlZiBpZHg9XCIxXCI+PGE6c2NoZW1lQ2xyIHZhbD1cImFjY2VudDFcIi8+PC9hOmVmZmVjdFJlZj48YTpmb250UmVmIGlkeD1cIm1pbm9yXCI+PGE6c2NoZW1lQ2xyIHZhbD1cInR4MVwiLz48L2E6Zm9udFJlZj48L2E6c3R5bGU+Jztcblx0b1tvLmxlbmd0aF0gPSAgICc8L2E6bG5EZWY+Jztcblx0b1tvLmxlbmd0aF0gPSAgJzwvYTpvYmplY3REZWZhdWx0cz4nO1xuXHRvW28ubGVuZ3RoXSA9ICAnPGE6ZXh0cmFDbHJTY2hlbWVMc3QvPic7XG5cdG9bby5sZW5ndGhdID0gJzwvYTp0aGVtZT4nO1xuXHRyZXR1cm4gby5qb2luKFwiXCIpO1xufVxuLyogW01TLVhMU10gMi40LjMyNiBUT0RPOiBwYXlsb2FkIGlzIGEgemlwIGZpbGUgKi9cbmZ1bmN0aW9uIHBhcnNlX1RoZW1lKGJsb2IsIGxlbmd0aCwgb3B0cykge1xuXHR2YXIgZW5kID0gYmxvYi5sICsgbGVuZ3RoO1xuXHR2YXIgZHdUaGVtZVZlcnNpb24gPSBibG9iLnJlYWRfc2hpZnQoNCk7XG5cdGlmKGR3VGhlbWVWZXJzaW9uID09PSAxMjQyMjYpIHJldHVybjtcblx0aWYoIW9wdHMuY2VsbFN0eWxlcykgeyBibG9iLmwgPSBlbmQ7IHJldHVybjsgfVxuXHR2YXIgZGF0YSA9IGJsb2Iuc2xpY2UoYmxvYi5sKTtcblx0YmxvYi5sID0gZW5kO1xuXHR2YXIgemlwOyB0cnkgeyB6aXAgPSB6aXBfcmVhZChkYXRhLCB7dHlwZTogXCJhcnJheVwifSk7IH0gY2F0Y2goZSkgeyByZXR1cm47IH1cblx0dmFyIHRoZW1lWE1MID0gZ2V0emlwc3RyKHppcCwgXCJ0aGVtZS90aGVtZS90aGVtZTEueG1sXCIsIHRydWUpO1xuXHRpZighdGhlbWVYTUwpIHJldHVybjtcblx0cmV0dXJuIHBhcnNlX3RoZW1lX3htbCh0aGVtZVhNTCwgb3B0cyk7XG59XG5cbi8qIDIuNS40OSAqL1xuZnVuY3Rpb24gcGFyc2VfQ29sb3JUaGVtZShibG9iLyo6OiwgbGVuZ3RoKi8pIHsgcmV0dXJuIGJsb2IucmVhZF9zaGlmdCg0KTsgfVxuXG4vKiAyLjUuMTU1ICovXG5mdW5jdGlvbiBwYXJzZV9GdWxsQ29sb3JFeHQoYmxvYi8qOjosIGxlbmd0aCovKSB7XG5cdHZhciBvID0ge307XG5cdG8ueGNsclR5cGUgPSBibG9iLnJlYWRfc2hpZnQoMik7XG5cdG8ublRpbnRTaGFkZSA9IGJsb2IucmVhZF9zaGlmdCgyKTtcblx0c3dpdGNoKG8ueGNsclR5cGUpIHtcblx0XHRjYXNlIDA6IGJsb2IubCArPSA0OyBicmVhaztcblx0XHRjYXNlIDE6IG8ueGNsclZhbHVlID0gcGFyc2VfSWN2WEYoYmxvYiwgNCk7IGJyZWFrO1xuXHRcdGNhc2UgMjogby54Y2xyVmFsdWUgPSBwYXJzZV9Mb25nUkdCQShibG9iLCA0KTsgYnJlYWs7XG5cdFx0Y2FzZSAzOiBvLnhjbHJWYWx1ZSA9IHBhcnNlX0NvbG9yVGhlbWUoYmxvYiwgNCk7IGJyZWFrO1xuXHRcdGNhc2UgNDogYmxvYi5sICs9IDQ7IGJyZWFrO1xuXHR9XG5cdGJsb2IubCArPSA4O1xuXHRyZXR1cm4gbztcbn1cblxuLyogMi41LjE2NCBUT0RPOiByZWFkIDcgYml0cyovXG5mdW5jdGlvbiBwYXJzZV9JY3ZYRihibG9iLCBsZW5ndGgpIHtcblx0cmV0dXJuIHBhcnNlbm9vcChibG9iLCBsZW5ndGgpO1xufVxuXG4vKiAyLjUuMjgwICovXG5mdW5jdGlvbiBwYXJzZV9YRkV4dEdyYWRpZW50KGJsb2IsIGxlbmd0aCkge1xuXHRyZXR1cm4gcGFyc2Vub29wKGJsb2IsIGxlbmd0aCk7XG59XG5cbi8qIFtNUy1YTFNdIDIuNS4xMDggKi9cbmZ1bmN0aW9uIHBhcnNlX0V4dFByb3AoYmxvYi8qOjosIGxlbmd0aCovKS8qOkFycmF5PGFueT4qLyB7XG5cdHZhciBleHRUeXBlID0gYmxvYi5yZWFkX3NoaWZ0KDIpO1xuXHR2YXIgY2IgPSBibG9iLnJlYWRfc2hpZnQoMikgLSA0O1xuXHR2YXIgbyA9IFtleHRUeXBlXTtcblx0c3dpdGNoKGV4dFR5cGUpIHtcblx0XHRjYXNlIDB4MDQ6IGNhc2UgMHgwNTogY2FzZSAweDA3OiBjYXNlIDB4MDg6XG5cdFx0Y2FzZSAweDA5OiBjYXNlIDB4MEE6IGNhc2UgMHgwQjogY2FzZSAweDBEOlxuXHRcdFx0b1sxXSA9IHBhcnNlX0Z1bGxDb2xvckV4dChibG9iLCBjYik7IGJyZWFrO1xuXHRcdGNhc2UgMHgwNjogb1sxXSA9IHBhcnNlX1hGRXh0R3JhZGllbnQoYmxvYiwgY2IpOyBicmVhaztcblx0XHRjYXNlIDB4MEU6IGNhc2UgMHgwRjogb1sxXSA9IGJsb2IucmVhZF9zaGlmdChjYiA9PT0gMSA/IDEgOiAyKTsgYnJlYWs7XG5cdFx0ZGVmYXVsdDogdGhyb3cgbmV3IEVycm9yKFwiVW5yZWNvZ25pemVkIEV4dFByb3AgdHlwZTogXCIgKyBleHRUeXBlICsgXCIgXCIgKyBjYik7XG5cdH1cblx0cmV0dXJuIG87XG59XG5cbi8qIDIuNC4zNTUgKi9cbmZ1bmN0aW9uIHBhcnNlX1hGRXh0KGJsb2IsIGxlbmd0aCkge1xuXHR2YXIgZW5kID0gYmxvYi5sICsgbGVuZ3RoO1xuXHRibG9iLmwgKz0gMjtcblx0dmFyIGl4ZmUgPSBibG9iLnJlYWRfc2hpZnQoMik7XG5cdGJsb2IubCArPSAyO1xuXHR2YXIgY2V4dHMgPSBibG9iLnJlYWRfc2hpZnQoMik7XG5cdHZhciBleHQvKjpBT0EqLyA9IFtdO1xuXHR3aGlsZShjZXh0cy0tID4gMCkgZXh0LnB1c2gocGFyc2VfRXh0UHJvcChibG9iLCBlbmQtYmxvYi5sKSk7XG5cdHJldHVybiB7aXhmZTppeGZlLCBleHQ6ZXh0fTtcbn1cblxuLyogeGYgaXMgYW4gWEYsIHNlZSBwYXJzZV9YRkV4dCBmb3IgeGZleHQgKi9cbmZ1bmN0aW9uIHVwZGF0ZV94ZmV4dCh4ZiwgeGZleHQpIHtcblx0eGZleHQuZm9yRWFjaChmdW5jdGlvbih4ZmUpIHtcblx0XHRzd2l0Y2goeGZlWzBdKSB7IC8qIDIuNS4xMDggZXh0UHJvcERhdGEgKi9cblx0XHRcdGNhc2UgMHgwNDogYnJlYWs7IC8qIGZvcmVncm91bmQgY29sb3IgKi9cblx0XHRcdGNhc2UgMHgwNTogYnJlYWs7IC8qIGJhY2tncm91bmQgY29sb3IgKi9cblx0XHRcdGNhc2UgMHgwNjogYnJlYWs7IC8qIGdyYWRpZW50IGZpbGwgKi9cblx0XHRcdGNhc2UgMHgwNzogYnJlYWs7IC8qIHRvcCBjZWxsIGJvcmRlciBjb2xvciAqL1xuXHRcdFx0Y2FzZSAweDA4OiBicmVhazsgLyogYm90dG9tIGNlbGwgYm9yZGVyIGNvbG9yICovXG5cdFx0XHRjYXNlIDB4MDk6IGJyZWFrOyAvKiBsZWZ0IGNlbGwgYm9yZGVyIGNvbG9yICovXG5cdFx0XHRjYXNlIDB4MGE6IGJyZWFrOyAvKiByaWdodCBjZWxsIGJvcmRlciBjb2xvciAqL1xuXHRcdFx0Y2FzZSAweDBiOiBicmVhazsgLyogZGlhZ29uYWwgY2VsbCBib3JkZXIgY29sb3IgKi9cblx0XHRcdGNhc2UgMHgwZDogLyogdGV4dCBjb2xvciAqL1xuXHRcdFx0XHRicmVhaztcblx0XHRcdGNhc2UgMHgwZTogYnJlYWs7IC8qIGZvbnQgc2NoZW1lICovXG5cdFx0XHRjYXNlIDB4MGY6IGJyZWFrOyAvKiBpbmRlbnRhdGlvbiBsZXZlbCAqL1xuXHRcdH1cblx0fSk7XG59XG5cbmZ1bmN0aW9uIHBhcnNlX0JydE1kdGluZm8oZGF0YSwgbGVuZ3RoKSB7XG4gIHJldHVybiB7XG4gICAgZmxhZ3M6IGRhdGEucmVhZF9zaGlmdCg0KSxcbiAgICB2ZXJzaW9uOiBkYXRhLnJlYWRfc2hpZnQoNCksXG4gICAgbmFtZTogcGFyc2VfWExXaWRlU3RyaW5nKGRhdGEsIGxlbmd0aCAtIDgpXG4gIH07XG59XG5mdW5jdGlvbiB3cml0ZV9CcnRNZHRpbmZvKGRhdGEpIHtcbiAgdmFyIG8gPSBuZXdfYnVmKDEyICsgMiAqIGRhdGEubmFtZS5sZW5ndGgpO1xuICBvLndyaXRlX3NoaWZ0KDQsIGRhdGEuZmxhZ3MpO1xuICBvLndyaXRlX3NoaWZ0KDQsIGRhdGEudmVyc2lvbik7XG4gIHdyaXRlX1hMV2lkZVN0cmluZyhkYXRhLm5hbWUsIG8pO1xuICByZXR1cm4gby5zbGljZSgwLCBvLmwpO1xufVxuZnVuY3Rpb24gcGFyc2VfQnJ0TWRiKGRhdGEpIHtcbiAgdmFyIG91dCA9IFtdO1xuICB2YXIgY250ID0gZGF0YS5yZWFkX3NoaWZ0KDQpO1xuICB3aGlsZSAoY250LS0gPiAwKVxuICAgIG91dC5wdXNoKFtkYXRhLnJlYWRfc2hpZnQoNCksIGRhdGEucmVhZF9zaGlmdCg0KV0pO1xuICByZXR1cm4gb3V0O1xufVxuZnVuY3Rpb24gd3JpdGVfQnJ0TWRiKG1kYikge1xuICB2YXIgbyA9IG5ld19idWYoNCArIDggKiBtZGIubGVuZ3RoKTtcbiAgby53cml0ZV9zaGlmdCg0LCBtZGIubGVuZ3RoKTtcbiAgZm9yICh2YXIgaSA9IDA7IGkgPCBtZGIubGVuZ3RoOyArK2kpIHtcbiAgICBvLndyaXRlX3NoaWZ0KDQsIG1kYltpXVswXSk7XG4gICAgby53cml0ZV9zaGlmdCg0LCBtZGJbaV1bMV0pO1xuICB9XG4gIHJldHVybiBvO1xufVxuZnVuY3Rpb24gd3JpdGVfQnJ0QmVnaW5Fc2ZtZChjbnQsIG5hbWUpIHtcbiAgdmFyIG8gPSBuZXdfYnVmKDggKyAyICogbmFtZS5sZW5ndGgpO1xuICBvLndyaXRlX3NoaWZ0KDQsIGNudCk7XG4gIHdyaXRlX1hMV2lkZVN0cmluZyhuYW1lLCBvKTtcbiAgcmV0dXJuIG8uc2xpY2UoMCwgby5sKTtcbn1cbmZ1bmN0aW9uIHBhcnNlX0JydEJlZ2luRXNtZGIoZGF0YSkge1xuICBkYXRhLmwgKz0gNDtcbiAgcmV0dXJuIGRhdGEucmVhZF9zaGlmdCg0KSAhPSAwO1xufVxuZnVuY3Rpb24gd3JpdGVfQnJ0QmVnaW5Fc21kYihjbnQsIGNtKSB7XG4gIHZhciBvID0gbmV3X2J1Zig4KTtcbiAgby53cml0ZV9zaGlmdCg0LCBjbnQpO1xuICBvLndyaXRlX3NoaWZ0KDQsIGNtID8gMSA6IDApO1xuICByZXR1cm4gbztcbn1cbmZ1bmN0aW9uIHBhcnNlX3hsbWV0YV9iaW4oZGF0YSwgbmFtZSwgX29wdHMpIHtcbiAgdmFyIG91dCA9IHsgVHlwZXM6IFtdLCBDZWxsOiBbXSwgVmFsdWU6IFtdIH07XG4gIHZhciBvcHRzID0gX29wdHMgfHwge307XG4gIHZhciBzdGF0ZSA9IFtdO1xuICB2YXIgcGFzcyA9IGZhbHNlO1xuICB2YXIgbWV0YXR5cGUgPSAyO1xuICByZWNvcmRob3BwZXIoZGF0YSwgZnVuY3Rpb24odmFsLCBSLCBSVCkge1xuICAgIHN3aXRjaCAoUlQpIHtcbiAgICAgIGNhc2UgMzM1OlxuICAgICAgICBvdXQuVHlwZXMucHVzaCh7IG5hbWU6IHZhbC5uYW1lIH0pO1xuICAgICAgICBicmVhaztcbiAgICAgIGNhc2UgNTE6XG4gICAgICAgIHZhbC5mb3JFYWNoKGZ1bmN0aW9uKHIpIHtcbiAgICAgICAgICBpZiAobWV0YXR5cGUgPT0gMSlcbiAgICAgICAgICAgIG91dC5DZWxsLnB1c2goeyB0eXBlOiBvdXQuVHlwZXNbclswXSAtIDFdLm5hbWUsIGluZGV4OiByWzFdIH0pO1xuICAgICAgICAgIGVsc2UgaWYgKG1ldGF0eXBlID09IDApXG4gICAgICAgICAgICBvdXQuVmFsdWUucHVzaCh7IHR5cGU6IG91dC5UeXBlc1tyWzBdIC0gMV0ubmFtZSwgaW5kZXg6IHJbMV0gfSk7XG4gICAgICAgIH0pO1xuICAgICAgICBicmVhaztcbiAgICAgIGNhc2UgMzM3OlxuICAgICAgICBtZXRhdHlwZSA9IHZhbCA/IDEgOiAwO1xuICAgICAgICBicmVhaztcbiAgICAgIGNhc2UgMzM4OlxuICAgICAgICBtZXRhdHlwZSA9IDI7XG4gICAgICAgIGJyZWFrO1xuICAgICAgY2FzZSAzNTpcbiAgICAgICAgc3RhdGUucHVzaChSVCk7XG4gICAgICAgIHBhc3MgPSB0cnVlO1xuICAgICAgICBicmVhaztcbiAgICAgIGNhc2UgMzY6XG4gICAgICAgIHN0YXRlLnBvcCgpO1xuICAgICAgICBwYXNzID0gZmFsc2U7XG4gICAgICAgIGJyZWFrO1xuICAgICAgZGVmYXVsdDpcbiAgICAgICAgaWYgKFIuVCkge1xuICAgICAgICB9IGVsc2UgaWYgKCFwYXNzIHx8IG9wdHMuV1RGICYmIHN0YXRlW3N0YXRlLmxlbmd0aCAtIDFdICE9IDM1KVxuICAgICAgICAgIHRocm93IG5ldyBFcnJvcihcIlVuZXhwZWN0ZWQgcmVjb3JkIDB4XCIgKyBSVC50b1N0cmluZygxNikpO1xuICAgIH1cbiAgfSk7XG4gIHJldHVybiBvdXQ7XG59XG5mdW5jdGlvbiB3cml0ZV94bG1ldGFfYmluKCkge1xuICB2YXIgYmEgPSBidWZfYXJyYXkoKTtcbiAgd3JpdGVfcmVjb3JkKGJhLCAzMzIpO1xuICB3cml0ZV9yZWNvcmQoYmEsIDMzNCwgd3JpdGVfVUludDMyTEUoMSkpO1xuICB3cml0ZV9yZWNvcmQoYmEsIDMzNSwgd3JpdGVfQnJ0TWR0aW5mbyh7XG4gICAgbmFtZTogXCJYTERBUFJcIixcbiAgICB2ZXJzaW9uOiAxMmU0LFxuICAgIGZsYWdzOiAzNDk2NjU3MDcyXG4gIH0pKTtcbiAgd3JpdGVfcmVjb3JkKGJhLCAzMzYpO1xuICB3cml0ZV9yZWNvcmQoYmEsIDMzOSwgd3JpdGVfQnJ0QmVnaW5Fc2ZtZCgxLCBcIlhMREFQUlwiKSk7XG4gIHdyaXRlX3JlY29yZChiYSwgNTIpO1xuICB3cml0ZV9yZWNvcmQoYmEsIDM1LCB3cml0ZV9VSW50MzJMRSg1MTQpKTtcbiAgd3JpdGVfcmVjb3JkKGJhLCA0MDk2LCB3cml0ZV9VSW50MzJMRSgwKSk7XG4gIHdyaXRlX3JlY29yZChiYSwgNDA5Nywgd3JpdGV1aW50MTYoMSkpO1xuICB3cml0ZV9yZWNvcmQoYmEsIDM2KTtcbiAgd3JpdGVfcmVjb3JkKGJhLCA1Myk7XG4gIHdyaXRlX3JlY29yZChiYSwgMzQwKTtcbiAgd3JpdGVfcmVjb3JkKGJhLCAzMzcsIHdyaXRlX0JydEJlZ2luRXNtZGIoMSwgdHJ1ZSkpO1xuICB3cml0ZV9yZWNvcmQoYmEsIDUxLCB3cml0ZV9CcnRNZGIoW1sxLCAwXV0pKTtcbiAgd3JpdGVfcmVjb3JkKGJhLCAzMzgpO1xuICB3cml0ZV9yZWNvcmQoYmEsIDMzMyk7XG4gIHJldHVybiBiYS5lbmQoKTtcbn1cbmZ1bmN0aW9uIHBhcnNlX3hsbWV0YV94bWwoZGF0YSwgbmFtZSwgb3B0cykge1xuICB2YXIgb3V0ID0geyBUeXBlczogW10sIENlbGw6IFtdLCBWYWx1ZTogW10gfTtcbiAgaWYgKCFkYXRhKVxuICAgIHJldHVybiBvdXQ7XG4gIHZhciBwYXNzID0gZmFsc2U7XG4gIHZhciBtZXRhdHlwZSA9IDI7XG4gIHZhciBsYXN0bWV0YTtcbiAgZGF0YS5yZXBsYWNlKHRhZ3JlZ2V4LCBmdW5jdGlvbih4KSB7XG4gICAgdmFyIHkgPSBwYXJzZXhtbHRhZyh4KTtcbiAgICBzd2l0Y2ggKHN0cmlwX25zKHlbMF0pKSB7XG4gICAgICBjYXNlIFwiPD94bWxcIjpcbiAgICAgICAgYnJlYWs7XG4gICAgICBjYXNlIFwiPG1ldGFkYXRhXCI6XG4gICAgICBjYXNlIFwiPC9tZXRhZGF0YT5cIjpcbiAgICAgICAgYnJlYWs7XG4gICAgICBjYXNlIFwiPG1ldGFkYXRhVHlwZXNcIjpcbiAgICAgIGNhc2UgXCI8L21ldGFkYXRhVHlwZXM+XCI6XG4gICAgICAgIGJyZWFrO1xuICAgICAgY2FzZSBcIjxtZXRhZGF0YVR5cGVcIjpcbiAgICAgICAgb3V0LlR5cGVzLnB1c2goeyBuYW1lOiB5Lm5hbWUgfSk7XG4gICAgICAgIGJyZWFrO1xuICAgICAgY2FzZSBcIjwvbWV0YWRhdGFUeXBlPlwiOlxuICAgICAgICBicmVhaztcbiAgICAgIGNhc2UgXCI8ZnV0dXJlTWV0YWRhdGFcIjpcbiAgICAgICAgZm9yICh2YXIgaiA9IDA7IGogPCBvdXQuVHlwZXMubGVuZ3RoOyArK2opXG4gICAgICAgICAgaWYgKG91dC5UeXBlc1tqXS5uYW1lID09IHkubmFtZSlcbiAgICAgICAgICAgIGxhc3RtZXRhID0gb3V0LlR5cGVzW2pdO1xuICAgICAgICBicmVhaztcbiAgICAgIGNhc2UgXCI8L2Z1dHVyZU1ldGFkYXRhPlwiOlxuICAgICAgICBicmVhaztcbiAgICAgIGNhc2UgXCI8Yms+XCI6XG4gICAgICAgIGJyZWFrO1xuICAgICAgY2FzZSBcIjwvYms+XCI6XG4gICAgICAgIGJyZWFrO1xuICAgICAgY2FzZSBcIjxyY1wiOlxuICAgICAgICBpZiAobWV0YXR5cGUgPT0gMSlcbiAgICAgICAgICBvdXQuQ2VsbC5wdXNoKHsgdHlwZTogb3V0LlR5cGVzW3kudCAtIDFdLm5hbWUsIGluZGV4OiAreS52IH0pO1xuICAgICAgICBlbHNlIGlmIChtZXRhdHlwZSA9PSAwKVxuICAgICAgICAgIG91dC5WYWx1ZS5wdXNoKHsgdHlwZTogb3V0LlR5cGVzW3kudCAtIDFdLm5hbWUsIGluZGV4OiAreS52IH0pO1xuICAgICAgICBicmVhaztcbiAgICAgIGNhc2UgXCI8L3JjPlwiOlxuICAgICAgICBicmVhaztcbiAgICAgIGNhc2UgXCI8Y2VsbE1ldGFkYXRhXCI6XG4gICAgICAgIG1ldGF0eXBlID0gMTtcbiAgICAgICAgYnJlYWs7XG4gICAgICBjYXNlIFwiPC9jZWxsTWV0YWRhdGE+XCI6XG4gICAgICAgIG1ldGF0eXBlID0gMjtcbiAgICAgICAgYnJlYWs7XG4gICAgICBjYXNlIFwiPHZhbHVlTWV0YWRhdGFcIjpcbiAgICAgICAgbWV0YXR5cGUgPSAwO1xuICAgICAgICBicmVhaztcbiAgICAgIGNhc2UgXCI8L3ZhbHVlTWV0YWRhdGE+XCI6XG4gICAgICAgIG1ldGF0eXBlID0gMjtcbiAgICAgICAgYnJlYWs7XG4gICAgICBjYXNlIFwiPGV4dExzdFwiOlxuICAgICAgY2FzZSBcIjxleHRMc3Q+XCI6XG4gICAgICBjYXNlIFwiPC9leHRMc3Q+XCI6XG4gICAgICBjYXNlIFwiPGV4dExzdC8+XCI6XG4gICAgICAgIGJyZWFrO1xuICAgICAgY2FzZSBcIjxleHRcIjpcbiAgICAgICAgcGFzcyA9IHRydWU7XG4gICAgICAgIGJyZWFrO1xuICAgICAgY2FzZSBcIjwvZXh0PlwiOlxuICAgICAgICBwYXNzID0gZmFsc2U7XG4gICAgICAgIGJyZWFrO1xuICAgICAgY2FzZSBcIjxydmJcIjpcbiAgICAgICAgaWYgKCFsYXN0bWV0YSlcbiAgICAgICAgICBicmVhaztcbiAgICAgICAgaWYgKCFsYXN0bWV0YS5vZmZzZXRzKVxuICAgICAgICAgIGxhc3RtZXRhLm9mZnNldHMgPSBbXTtcbiAgICAgICAgbGFzdG1ldGEub2Zmc2V0cy5wdXNoKCt5LmkpO1xuICAgICAgICBicmVhaztcbiAgICAgIGRlZmF1bHQ6XG4gICAgICAgIGlmICghcGFzcyAmJiBvcHRzLldURilcbiAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoXCJ1bnJlY29nbml6ZWQgXCIgKyB5WzBdICsgXCIgaW4gbWV0YWRhdGFcIik7XG4gICAgfVxuICAgIHJldHVybiB4O1xuICB9KTtcbiAgcmV0dXJuIG91dDtcbn1cbmZ1bmN0aW9uIHdyaXRlX3hsbWV0YV94bWwoKSB7XG4gIHZhciBvID0gW1hNTF9IRUFERVJdO1xuICBvLnB1c2goJzxtZXRhZGF0YSB4bWxucz1cImh0dHA6Ly9zY2hlbWFzLm9wZW54bWxmb3JtYXRzLm9yZy9zcHJlYWRzaGVldG1sLzIwMDYvbWFpblwiIHhtbG5zOnhscmQ9XCJodHRwOi8vc2NoZW1hcy5taWNyb3NvZnQuY29tL29mZmljZS9zcHJlYWRzaGVldG1sLzIwMTcvcmljaGRhdGFcIiB4bWxuczp4ZGE9XCJodHRwOi8vc2NoZW1hcy5taWNyb3NvZnQuY29tL29mZmljZS9zcHJlYWRzaGVldG1sLzIwMTcvZHluYW1pY2FycmF5XCI+XFxuICA8bWV0YWRhdGFUeXBlcyBjb3VudD1cIjFcIj5cXG4gICAgPG1ldGFkYXRhVHlwZSBuYW1lPVwiWExEQVBSXCIgbWluU3VwcG9ydGVkVmVyc2lvbj1cIjEyMDAwMFwiIGNvcHk9XCIxXCIgcGFzdGVBbGw9XCIxXCIgcGFzdGVWYWx1ZXM9XCIxXCIgbWVyZ2U9XCIxXCIgc3BsaXRGaXJzdD1cIjFcIiByb3dDb2xTaGlmdD1cIjFcIiBjbGVhckZvcm1hdHM9XCIxXCIgY2xlYXJDb21tZW50cz1cIjFcIiBhc3NpZ249XCIxXCIgY29lcmNlPVwiMVwiIGNlbGxNZXRhPVwiMVwiLz5cXG4gIDwvbWV0YWRhdGFUeXBlcz5cXG4gIDxmdXR1cmVNZXRhZGF0YSBuYW1lPVwiWExEQVBSXCIgY291bnQ9XCIxXCI+XFxuICAgIDxiaz5cXG4gICAgICA8ZXh0THN0PlxcbiAgICAgICAgPGV4dCB1cmk9XCJ7YmRiYjhjZGMtZmExZS00OTZlLWE4NTctM2MzZjMwYzAyOWMzfVwiPlxcbiAgICAgICAgICA8eGRhOmR5bmFtaWNBcnJheVByb3BlcnRpZXMgZkR5bmFtaWM9XCIxXCIgZkNvbGxhcHNlZD1cIjBcIi8+XFxuICAgICAgICA8L2V4dD5cXG4gICAgICA8L2V4dExzdD5cXG4gICAgPC9iaz5cXG4gIDwvZnV0dXJlTWV0YWRhdGE+XFxuICA8Y2VsbE1ldGFkYXRhIGNvdW50PVwiMVwiPlxcbiAgICA8Yms+XFxuICAgICAgPHJjIHQ9XCIxXCIgdj1cIjBcIi8+XFxuICAgIDwvYms+XFxuICA8L2NlbGxNZXRhZGF0YT5cXG48L21ldGFkYXRhPicpO1xuICByZXR1cm4gby5qb2luKFwiXCIpO1xufVxuLyogMTguNiBDYWxjdWxhdGlvbiBDaGFpbiAqL1xuZnVuY3Rpb24gcGFyc2VfY2NfeG1sKGRhdGEvKjo6LCBuYW1lLCBvcHRzKi8pLyo6QXJyYXk8YW55PiovIHtcblx0dmFyIGQgPSBbXTtcblx0aWYoIWRhdGEpIHJldHVybiBkO1xuXHR2YXIgaSA9IDE7XG5cdChkYXRhLm1hdGNoKHRhZ3JlZ2V4KXx8W10pLmZvckVhY2goZnVuY3Rpb24oeCkge1xuXHRcdHZhciB5ID0gcGFyc2V4bWx0YWcoeCk7XG5cdFx0c3dpdGNoKHlbMF0pIHtcblx0XHRcdGNhc2UgJzw/eG1sJzogYnJlYWs7XG5cdFx0XHQvKiAxOC42LjIgIGNhbGNDaGFpbiBDVF9DYWxjQ2hhaW4gMSAqL1xuXHRcdFx0Y2FzZSAnPGNhbGNDaGFpbic6IGNhc2UgJzxjYWxjQ2hhaW4+JzogY2FzZSAnPC9jYWxjQ2hhaW4+JzogYnJlYWs7XG5cdFx0XHQvKiAxOC42LjEgIGMgQ1RfQ2FsY0NlbGwgMSAqL1xuXHRcdFx0Y2FzZSAnPGMnOiBkZWxldGUgeVswXTsgaWYoeS5pKSBpID0geS5pOyBlbHNlIHkuaSA9IGk7IGQucHVzaCh5KTsgYnJlYWs7XG5cdFx0fVxuXHR9KTtcblx0cmV0dXJuIGQ7XG59XG5cbi8vZnVuY3Rpb24gd3JpdGVfY2NfeG1sKGRhdGEsIG9wdHMpIHsgfVxuXG4vKiBbTVMtWExTQl0gMi42LjQuMSAqL1xuZnVuY3Rpb24gcGFyc2VfQnJ0Q2FsY0NoYWluSXRlbSQoZGF0YSkge1xuXHR2YXIgb3V0ID0ge307XG5cdG91dC5pID0gZGF0YS5yZWFkX3NoaWZ0KDQpO1xuXHR2YXIgY2VsbCA9IHt9O1xuXHRjZWxsLnIgPSBkYXRhLnJlYWRfc2hpZnQoNCk7XG5cdGNlbGwuYyA9IGRhdGEucmVhZF9zaGlmdCg0KTtcblx0b3V0LnIgPSBlbmNvZGVfY2VsbChjZWxsKTtcblx0dmFyIGZsYWdzID0gZGF0YS5yZWFkX3NoaWZ0KDEpO1xuXHRpZihmbGFncyAmIDB4Mikgb3V0LmwgPSAnMSc7XG5cdGlmKGZsYWdzICYgMHg4KSBvdXQuYSA9ICcxJztcblx0cmV0dXJuIG91dDtcbn1cblxuLyogMTguNiBDYWxjdWxhdGlvbiBDaGFpbiAqL1xuZnVuY3Rpb24gcGFyc2VfY2NfYmluKGRhdGEsIG5hbWUsIG9wdHMpIHtcblx0dmFyIG91dCA9IFtdO1xuXHR2YXIgcGFzcyA9IGZhbHNlO1xuXHRyZWNvcmRob3BwZXIoZGF0YSwgZnVuY3Rpb24gaG9wcGVyX2NjKHZhbCwgUiwgUlQpIHtcblx0XHRzd2l0Y2goUlQpIHtcblx0XHRcdGNhc2UgMHgwMDNGOiAvKiAnQnJ0Q2FsY0NoYWluSXRlbSQnICovXG5cdFx0XHRcdG91dC5wdXNoKHZhbCk7IGJyZWFrO1xuXG5cdFx0XHRkZWZhdWx0OlxuXHRcdFx0XHRpZihSLlQpey8qIGVtcHR5ICovfVxuXHRcdFx0XHRlbHNlIGlmKCFwYXNzIHx8IG9wdHMuV1RGKSB0aHJvdyBuZXcgRXJyb3IoXCJVbmV4cGVjdGVkIHJlY29yZCAweFwiICsgUlQudG9TdHJpbmcoMTYpKTtcblx0XHR9XG5cdH0pO1xuXHRyZXR1cm4gb3V0O1xufVxuXG4vL2Z1bmN0aW9uIHdyaXRlX2NjX2JpbihkYXRhLCBvcHRzKSB7IH1cbi8qIDE4LjE0IFN1cHBsZW1lbnRhcnkgV29ya2Jvb2sgRGF0YSAqL1xuZnVuY3Rpb24gcGFyc2VfeGxpbmtfeG1sKC8qOjpkYXRhLCByZWwsIG5hbWU6c3RyaW5nLCBfb3B0cyovKSB7XG5cdC8vdmFyIG9wdHMgPSBfb3B0cyB8fCB7fTtcblx0Ly9pZihvcHRzLldURikgdGhyb3cgXCJYTFNYIEV4dGVybmFsIExpbmtcIjtcbn1cblxuLyogW01TLVhMU0JdIDIuMS43LjI1IEV4dGVybmFsIExpbmsgKi9cbmZ1bmN0aW9uIHBhcnNlX3hsaW5rX2JpbihkYXRhLCByZWwsIG5hbWUvKjpzdHJpbmcqLywgX29wdHMpIHtcblx0aWYoIWRhdGEpIHJldHVybiBkYXRhO1xuXHR2YXIgb3B0cyA9IF9vcHRzIHx8IHt9O1xuXG5cdHZhciBwYXNzID0gZmFsc2UsIGVuZCA9IGZhbHNlO1xuXG5cdHJlY29yZGhvcHBlcihkYXRhLCBmdW5jdGlvbiB4bGlua19wYXJzZSh2YWwsIFIsIFJUKSB7XG5cdFx0aWYoZW5kKSByZXR1cm47XG5cdFx0c3dpdGNoKFJUKSB7XG5cdFx0XHRjYXNlIDB4MDE2NzogLyogJ0JydFN1cFRhYnMnICovXG5cdFx0XHRjYXNlIDB4MDE2QjogLyogJ0JydEV4dGVyblRhYmxlU3RhcnQnICovXG5cdFx0XHRjYXNlIDB4MDE2QzogLyogJ0JydEV4dGVyblRhYmxlRW5kJyAqL1xuXHRcdFx0Y2FzZSAweDAxNkU6IC8qICdCcnRFeHRlcm5Sb3dIZHInICovXG5cdFx0XHRjYXNlIDB4MDE2RjogLyogJ0JydEV4dGVybkNlbGxCbGFuaycgKi9cblx0XHRcdGNhc2UgMHgwMTcwOiAvKiAnQnJ0RXh0ZXJuQ2VsbFJlYWwnICovXG5cdFx0XHRjYXNlIDB4MDE3MTogLyogJ0JydEV4dGVybkNlbGxCb29sJyAqL1xuXHRcdFx0Y2FzZSAweDAxNzI6IC8qICdCcnRFeHRlcm5DZWxsRXJyb3InICovXG5cdFx0XHRjYXNlIDB4MDE3MzogLyogJ0JydEV4dGVybkNlbGxTdHJpbmcnICovXG5cdFx0XHRjYXNlIDB4MDFEODogLyogJ0JydEV4dGVyblZhbHVlTWV0YScgKi9cblx0XHRcdGNhc2UgMHgwMjQxOiAvKiAnQnJ0U3VwTmFtZVN0YXJ0JyAqL1xuXHRcdFx0Y2FzZSAweDAyNDI6IC8qICdCcnRTdXBOYW1lVmFsdWVTdGFydCcgKi9cblx0XHRcdGNhc2UgMHgwMjQzOiAvKiAnQnJ0U3VwTmFtZVZhbHVlRW5kJyAqL1xuXHRcdFx0Y2FzZSAweDAyNDQ6IC8qICdCcnRTdXBOYW1lTnVtJyAqL1xuXHRcdFx0Y2FzZSAweDAyNDU6IC8qICdCcnRTdXBOYW1lRXJyJyAqL1xuXHRcdFx0Y2FzZSAweDAyNDY6IC8qICdCcnRTdXBOYW1lU3QnICovXG5cdFx0XHRjYXNlIDB4MDI0NzogLyogJ0JydFN1cE5hbWVOaWwnICovXG5cdFx0XHRjYXNlIDB4MDI0ODogLyogJ0JydFN1cE5hbWVCb29sJyAqL1xuXHRcdFx0Y2FzZSAweDAyNDk6IC8qICdCcnRTdXBOYW1lRm1sYScgKi9cblx0XHRcdGNhc2UgMHgwMjRBOiAvKiAnQnJ0U3VwTmFtZUJpdHMnICovXG5cdFx0XHRjYXNlIDB4MDI0QjogLyogJ0JydFN1cE5hbWVFbmQnICovXG5cdFx0XHRcdGJyZWFrO1xuXG5cdFx0XHRjYXNlIDB4MDAyMzogLyogJ0JydEZSVEJlZ2luJyAqL1xuXHRcdFx0XHRwYXNzID0gdHJ1ZTsgYnJlYWs7XG5cdFx0XHRjYXNlIDB4MDAyNDogLyogJ0JydEZSVEVuZCcgKi9cblx0XHRcdFx0cGFzcyA9IGZhbHNlOyBicmVhaztcblxuXHRcdFx0ZGVmYXVsdDpcblx0XHRcdFx0aWYoUi5UKXsvKiBlbXB0eSAqL31cblx0XHRcdFx0ZWxzZSBpZighcGFzcyB8fCBvcHRzLldURikgdGhyb3cgbmV3IEVycm9yKFwiVW5leHBlY3RlZCByZWNvcmQgMHhcIiArIFJULnRvU3RyaW5nKDE2KSk7XG5cdFx0fVxuXHR9LCBvcHRzKTtcbn1cbi8qIDIwLjUgRHJhd2luZ01MIC0gU3ByZWFkc2hlZXRNTCBEcmF3aW5nICovXG4vKiAyMC41LjIuMzUgd3NEciBDVF9EcmF3aW5nICovXG5mdW5jdGlvbiBwYXJzZV9kcmF3aW5nKGRhdGEsIHJlbHMvKjphbnkqLykge1xuXHRpZighZGF0YSkgcmV0dXJuIFwiPz9cIjtcblx0Lypcblx0ICBDaGFydHNoZWV0IERyYXdpbmc6XG5cdCAgIC0gMjAuNS4yLjM1IHdzRHIgQ1RfRHJhd2luZ1xuXHQgICAgLSAyMC41LjIuMSAgYWJzb2x1dGVBbmNob3IgQ1RfQWJzb2x1dGVBbmNob3Jcblx0ICAgICAtIDIwLjUuMi4xNiBncmFwaGljRnJhbWUgQ1RfR3JhcGhpY2FsT2JqZWN0RnJhbWVcblx0ICAgICAgLSAyMC4xLjIuMi4xNiBncmFwaGljIENUX0dyYXBoaWNhbE9iamVjdFxuXHQgICAgICAgLSAyMC4xLjIuMi4xNyBncmFwaGljRGF0YSBDVF9HcmFwaGljYWxPYmplY3REYXRhXG4gICAgICAgICAgLSBjaGFydCByZWZlcmVuY2Vcblx0ICAgdGhlIGFjdHVhbCB0eXBlIGlzIGJhc2VkIG9uIHRoZSBVUkkgb2YgdGhlIGdyYXBoaWNEYXRhXG5cdFx0VE9ETzogaGFuZGxlIGVtYmVkZGVkIGNoYXJ0cyBhbmQgb3RoZXIgdHlwZXMgb2YgZ3JhcGhpY3Ncblx0Ki9cblx0dmFyIGlkID0gKGRhdGEubWF0Y2goLzxjOmNoYXJ0IFtePl0qcjppZD1cIihbXlwiXSopXCIvKXx8W1wiXCIsXCJcIl0pWzFdO1xuXG5cdHJldHVybiByZWxzWychaWQnXVtpZF0uVGFyZ2V0O1xufVxuXG4vKiBMLjUuNS4yIFNwcmVhZHNoZWV0TUwgQ29tbWVudHMgKyBWTUwgU2NoZW1hICovXG52YXIgX3NoYXBlaWQgPSAxMDI0O1xuZnVuY3Rpb24gd3JpdGVfY29tbWVudHNfdm1sKHJJZC8qOm51bWJlciovLCBjb21tZW50cykge1xuXHR2YXIgY3NpemUgPSBbMjE2MDAsIDIxNjAwXTtcblx0LyogTC41LjIuMS4yIFBhdGggQXR0cmlidXRlICovXG5cdHZhciBiYm94ID0gW1wibTAsMGwwXCIsY3NpemVbMV0sY3NpemVbMF0sY3NpemVbMV0sY3NpemVbMF0sXCIweGVcIl0uam9pbihcIixcIik7XG5cdHZhciBvID0gW1xuXHRcdHdyaXRleHRhZyhcInhtbFwiLCBudWxsLCB7ICd4bWxuczp2JzogWExNTE5TLnYsICd4bWxuczpvJzogWExNTE5TLm8sICd4bWxuczp4JzogWExNTE5TLngsICd4bWxuczptdic6IFhMTUxOUy5tdiB9KS5yZXBsYWNlKC9cXC8+LyxcIj5cIiksXG5cdFx0d3JpdGV4dGFnKFwibzpzaGFwZWxheW91dFwiLCB3cml0ZXh0YWcoXCJvOmlkbWFwXCIsIG51bGwsIHsndjpleHQnOlwiZWRpdFwiLCAnZGF0YSc6cklkfSksIHsndjpleHQnOlwiZWRpdFwifSksXG5cdFx0d3JpdGV4dGFnKFwidjpzaGFwZXR5cGVcIiwgW1xuXHRcdFx0d3JpdGV4dGFnKFwidjpzdHJva2VcIiwgbnVsbCwge2pvaW5zdHlsZTpcIm1pdGVyXCJ9KSxcblx0XHRcdHdyaXRleHRhZyhcInY6cGF0aFwiLCBudWxsLCB7Z3JhZGllbnRzaGFwZW9rOlwidFwiLCAnbzpjb25uZWN0dHlwZSc6XCJyZWN0XCJ9KVxuXHRcdF0uam9pbihcIlwiKSwge2lkOlwiX3gwMDAwX3QyMDJcIiwgJ286c3B0JzoyMDIsIGNvb3Jkc2l6ZTpjc2l6ZS5qb2luKFwiLFwiKSxwYXRoOmJib3h9KVxuXHRdO1xuXHR3aGlsZShfc2hhcGVpZCA8IHJJZCAqIDEwMDApIF9zaGFwZWlkICs9IDEwMDA7XG5cblx0Y29tbWVudHMuZm9yRWFjaChmdW5jdGlvbih4KSB7XG5cdHZhciBjID0gZGVjb2RlX2NlbGwoeFswXSk7XG5cdHZhciBmaWxsb3B0cyA9IC8qOjooKi97J2NvbG9yMic6XCIjQkVGRjgyXCIsICd0eXBlJzpcImdyYWRpZW50XCJ9Lyo6OiA6YW55KSovO1xuXHRpZihmaWxsb3B0cy50eXBlID09IFwiZ3JhZGllbnRcIikgZmlsbG9wdHMuYW5nbGUgPSBcIi0xODBcIjtcblx0dmFyIGZpbGxwYXJtID0gZmlsbG9wdHMudHlwZSA9PSBcImdyYWRpZW50XCIgPyB3cml0ZXh0YWcoXCJvOmZpbGxcIiwgbnVsbCwge3R5cGU6XCJncmFkaWVudFVuc2NhbGVkXCIsICd2OmV4dCc6XCJ2aWV3XCJ9KSA6IG51bGw7XG5cdHZhciBmaWxseG1sID0gd3JpdGV4dGFnKCd2OmZpbGwnLCBmaWxscGFybSwgZmlsbG9wdHMpO1xuXG5cdHZhciBzaGFkYXRhID0gKHtvbjpcInRcIiwgJ29ic2N1cmVkJzpcInRcIn0vKjphbnkqLyk7XG5cdCsrX3NoYXBlaWQ7XG5cblx0byA9IG8uY29uY2F0KFtcblx0Jzx2OnNoYXBlJyArIHd4dF9oZWxwZXIoe1xuXHRcdGlkOidfeDAwMDBfcycgKyBfc2hhcGVpZCxcblx0XHR0eXBlOlwiI194MDAwMF90MjAyXCIsXG5cdFx0c3R5bGU6XCJwb3NpdGlvbjphYnNvbHV0ZTsgbWFyZ2luLWxlZnQ6ODBwdDttYXJnaW4tdG9wOjVwdDt3aWR0aDoxMDRwdDtoZWlnaHQ6NjRwdDt6LWluZGV4OjEwXCIgKyAoeFsxXS5oaWRkZW4gPyBcIjt2aXNpYmlsaXR5OmhpZGRlblwiIDogXCJcIikgLFxuXHRcdGZpbGxjb2xvcjpcIiNFQ0ZBRDRcIixcblx0XHRzdHJva2Vjb2xvcjpcIiNlZGVhYTFcIlxuXHR9KSArICc+Jyxcblx0XHRmaWxseG1sLFxuXHRcdHdyaXRleHRhZyhcInY6c2hhZG93XCIsIG51bGwsIHNoYWRhdGEpLFxuXHRcdHdyaXRleHRhZyhcInY6cGF0aFwiLCBudWxsLCB7J286Y29ubmVjdHR5cGUnOlwibm9uZVwifSksXG5cdFx0Jzx2OnRleHRib3g+PGRpdiBzdHlsZT1cInRleHQtYWxpZ246bGVmdFwiPjwvZGl2Pjwvdjp0ZXh0Ym94PicsXG5cdFx0Jzx4OkNsaWVudERhdGEgT2JqZWN0VHlwZT1cIk5vdGVcIj4nLFxuXHRcdFx0Jzx4Ok1vdmVXaXRoQ2VsbHMvPicsXG5cdFx0XHQnPHg6U2l6ZVdpdGhDZWxscy8+Jyxcblx0XHRcdC8qIFBhcnQgNCAxOS40LjIuMyBBbmNob3IgKEFuY2hvcikgKi9cblx0XHRcdHdyaXRldGFnKCd4OkFuY2hvcicsIFtjLmMrMSwgMCwgYy5yKzEsIDAsIGMuYyszLCAyMCwgYy5yKzUsIDIwXS5qb2luKFwiLFwiKSksXG5cdFx0XHR3cml0ZXRhZygneDpBdXRvRmlsbCcsIFwiRmFsc2VcIiksXG5cdFx0XHR3cml0ZXRhZygneDpSb3cnLCBTdHJpbmcoYy5yKSksXG5cdFx0XHR3cml0ZXRhZygneDpDb2x1bW4nLCBTdHJpbmcoYy5jKSksXG5cdFx0XHR4WzFdLmhpZGRlbiA/ICcnIDogJzx4OlZpc2libGUvPicsXG5cdFx0JzwveDpDbGllbnREYXRhPicsXG5cdCc8L3Y6c2hhcGU+J1xuXHRdKTsgfSk7XG5cdG8ucHVzaCgnPC94bWw+Jyk7XG5cdHJldHVybiBvLmpvaW4oXCJcIik7XG59XG5mdW5jdGlvbiBzaGVldF9pbnNlcnRfY29tbWVudHMoc2hlZXQsIGNvbW1lbnRzLyo6QXJyYXk8UmF3Q29tbWVudD4qLywgdGhyZWFkZWQvKjpib29sZWFuKi8sIHBlb3BsZS8qOj9BcnJheTxhbnk+Ki8pIHtcblx0dmFyIGRlbnNlID0gQXJyYXkuaXNBcnJheShzaGVldCk7XG5cdHZhciBjZWxsLyo6Q2VsbCovO1xuXHRjb21tZW50cy5mb3JFYWNoKGZ1bmN0aW9uKGNvbW1lbnQpIHtcblx0XHR2YXIgciA9IGRlY29kZV9jZWxsKGNvbW1lbnQucmVmKTtcblx0XHRpZihkZW5zZSkge1xuXHRcdFx0aWYoIXNoZWV0W3Iucl0pIHNoZWV0W3Iucl0gPSBbXTtcblx0XHRcdGNlbGwgPSBzaGVldFtyLnJdW3IuY107XG5cdFx0fSBlbHNlIGNlbGwgPSBzaGVldFtjb21tZW50LnJlZl07XG5cdFx0aWYgKCFjZWxsKSB7XG5cdFx0XHRjZWxsID0gKHt0OlwielwifS8qOmFueSovKTtcblx0XHRcdGlmKGRlbnNlKSBzaGVldFtyLnJdW3IuY10gPSBjZWxsO1xuXHRcdFx0ZWxzZSBzaGVldFtjb21tZW50LnJlZl0gPSBjZWxsO1xuXHRcdFx0dmFyIHJhbmdlID0gc2FmZV9kZWNvZGVfcmFuZ2Uoc2hlZXRbXCIhcmVmXCJdfHxcIkJEV0dPMTAwMDAwMTpBMVwiKTtcblx0XHRcdGlmKHJhbmdlLnMuciA+IHIucikgcmFuZ2Uucy5yID0gci5yO1xuXHRcdFx0aWYocmFuZ2UuZS5yIDwgci5yKSByYW5nZS5lLnIgPSByLnI7XG5cdFx0XHRpZihyYW5nZS5zLmMgPiByLmMpIHJhbmdlLnMuYyA9IHIuYztcblx0XHRcdGlmKHJhbmdlLmUuYyA8IHIuYykgcmFuZ2UuZS5jID0gci5jO1xuXHRcdFx0dmFyIGVuY29kZWQgPSBlbmNvZGVfcmFuZ2UocmFuZ2UpO1xuXHRcdFx0aWYgKGVuY29kZWQgIT09IHNoZWV0W1wiIXJlZlwiXSkgc2hlZXRbXCIhcmVmXCJdID0gZW5jb2RlZDtcblx0XHR9XG5cblx0XHRpZiAoIWNlbGwuYykgY2VsbC5jID0gW107XG5cdFx0dmFyIG8vKjpDb21tZW50Ki8gPSAoe2E6IGNvbW1lbnQuYXV0aG9yLCB0OiBjb21tZW50LnQsIHI6IGNvbW1lbnQuciwgVDogdGhyZWFkZWR9KTtcblx0XHRpZihjb21tZW50LmgpIG8uaCA9IGNvbW1lbnQuaDtcblxuXHRcdC8qIHRocmVhZGVkIGNvbW1lbnRzIGFsd2F5cyBvdmVycmlkZSAqL1xuXHRcdGZvcih2YXIgaSA9IGNlbGwuYy5sZW5ndGggLSAxOyBpID49IDA7IC0taSkge1xuXHRcdFx0aWYoIXRocmVhZGVkICYmIGNlbGwuY1tpXS5UKSByZXR1cm47XG5cdFx0XHRpZih0aHJlYWRlZCAmJiAhY2VsbC5jW2ldLlQpIGNlbGwuYy5zcGxpY2UoaSwgMSk7XG5cdFx0fVxuXHRcdGlmKHRocmVhZGVkICYmIHBlb3BsZSkgZm9yKGkgPSAwOyBpIDwgcGVvcGxlLmxlbmd0aDsgKytpKSB7XG5cdFx0XHRpZihvLmEgPT0gcGVvcGxlW2ldLmlkKSB7IG8uYSA9IHBlb3BsZVtpXS5uYW1lIHx8IG8uYTsgYnJlYWs7IH1cblx0XHR9XG5cdFx0Y2VsbC5jLnB1c2gobyk7XG5cdH0pO1xufVxuXG4vKiAxOC43IENvbW1lbnRzICovXG5mdW5jdGlvbiBwYXJzZV9jb21tZW50c194bWwoZGF0YS8qOnN0cmluZyovLCBvcHRzKS8qOkFycmF5PFJhd0NvbW1lbnQ+Ki8ge1xuXHQvKiAxOC43LjYgQ1RfQ29tbWVudHMgKi9cblx0aWYoZGF0YS5tYXRjaCgvPCg/Olxcdys6KT9jb21tZW50cyAqXFwvPi8pKSByZXR1cm4gW107XG5cdHZhciBhdXRob3JzLyo6QXJyYXk8c3RyaW5nPiovID0gW107XG5cdHZhciBjb21tZW50TGlzdC8qOkFycmF5PFJhd0NvbW1lbnQ+Ki8gPSBbXTtcblx0dmFyIGF1dGh0YWcgPSBkYXRhLm1hdGNoKC88KD86XFx3KzopP2F1dGhvcnM+KFtcXHNcXFNdKik8XFwvKD86XFx3KzopP2F1dGhvcnM+Lyk7XG5cdGlmKGF1dGh0YWcgJiYgYXV0aHRhZ1sxXSkgYXV0aHRhZ1sxXS5zcGxpdCgvPFxcL1xcdyo6P2F1dGhvcj4vKS5mb3JFYWNoKGZ1bmN0aW9uKHgpIHtcblx0XHRpZih4ID09PSBcIlwiIHx8IHgudHJpbSgpID09PSBcIlwiKSByZXR1cm47XG5cdFx0dmFyIGEgPSB4Lm1hdGNoKC88KD86XFx3KzopP2F1dGhvcltePl0qPiguKikvKTtcblx0XHRpZihhKSBhdXRob3JzLnB1c2goYVsxXSk7XG5cdH0pO1xuXHR2YXIgY21udHRhZyA9IGRhdGEubWF0Y2goLzwoPzpcXHcrOik/Y29tbWVudExpc3Q+KFtcXHNcXFNdKik8XFwvKD86XFx3KzopP2NvbW1lbnRMaXN0Pi8pO1xuXHRpZihjbW50dGFnICYmIGNtbnR0YWdbMV0pIGNtbnR0YWdbMV0uc3BsaXQoLzxcXC9cXHcqOj9jb21tZW50Pi8pLmZvckVhY2goZnVuY3Rpb24oeCkge1xuXHRcdGlmKHggPT09IFwiXCIgfHwgeC50cmltKCkgPT09IFwiXCIpIHJldHVybjtcblx0XHR2YXIgY20gPSB4Lm1hdGNoKC88KD86XFx3KzopP2NvbW1lbnRbXj5dKj4vKTtcblx0XHRpZighY20pIHJldHVybjtcblx0XHR2YXIgeSA9IHBhcnNleG1sdGFnKGNtWzBdKTtcblx0XHR2YXIgY29tbWVudC8qOlJhd0NvbW1lbnQqLyA9ICh7IGF1dGhvcjogeS5hdXRob3JJZCAmJiBhdXRob3JzW3kuYXV0aG9ySWRdIHx8IFwic2hlZXRqc2dob3N0XCIsIHJlZjogeS5yZWYsIGd1aWQ6IHkuZ3VpZCB9Lyo6YW55Ki8pO1xuXHRcdHZhciBjZWxsID0gZGVjb2RlX2NlbGwoeS5yZWYpO1xuXHRcdGlmKG9wdHMuc2hlZXRSb3dzICYmIG9wdHMuc2hlZXRSb3dzIDw9IGNlbGwucikgcmV0dXJuO1xuXHRcdHZhciB0ZXh0TWF0Y2ggPSB4Lm1hdGNoKC88KD86XFx3KzopP3RleHQ+KFtcXHNcXFNdKik8XFwvKD86XFx3KzopP3RleHQ+Lyk7XG5cdFx0dmFyIHJ0ID0gISF0ZXh0TWF0Y2ggJiYgISF0ZXh0TWF0Y2hbMV0gJiYgcGFyc2Vfc2kodGV4dE1hdGNoWzFdKSB8fCB7cjpcIlwiLHQ6XCJcIixoOlwiXCJ9O1xuXHRcdGNvbW1lbnQuciA9IHJ0LnI7XG5cdFx0aWYocnQuciA9PSBcIjx0PjwvdD5cIikgcnQudCA9IHJ0LmggPSBcIlwiO1xuXHRcdGNvbW1lbnQudCA9IChydC50fHxcIlwiKS5yZXBsYWNlKC9cXHJcXG4vZyxcIlxcblwiKS5yZXBsYWNlKC9cXHIvZyxcIlxcblwiKTtcblx0XHRpZihvcHRzLmNlbGxIVE1MKSBjb21tZW50LmggPSBydC5oO1xuXHRcdGNvbW1lbnRMaXN0LnB1c2goY29tbWVudCk7XG5cdH0pO1xuXHRyZXR1cm4gY29tbWVudExpc3Q7XG59XG5cbmZ1bmN0aW9uIHdyaXRlX2NvbW1lbnRzX3htbChkYXRhLyo6Oiwgb3B0cyovKSB7XG5cdHZhciBvID0gW1hNTF9IRUFERVIsIHdyaXRleHRhZygnY29tbWVudHMnLCBudWxsLCB7ICd4bWxucyc6IFhNTE5TX21haW5bMF0gfSldO1xuXG5cdHZhciBpYXV0aG9yLyo6QXJyYXk8c3RyaW5nPiovID0gW107XG5cdG8ucHVzaChcIjxhdXRob3JzPlwiKTtcblx0ZGF0YS5mb3JFYWNoKGZ1bmN0aW9uKHgpIHsgeFsxXS5mb3JFYWNoKGZ1bmN0aW9uKHcpIHsgdmFyIGEgPSBlc2NhcGV4bWwody5hKTtcblx0XHRpZihpYXV0aG9yLmluZGV4T2YoYSkgPT0gLTEpIHtcblx0XHRcdGlhdXRob3IucHVzaChhKTtcblx0XHRcdG8ucHVzaChcIjxhdXRob3I+XCIgKyBhICsgXCI8L2F1dGhvcj5cIik7XG5cdFx0fVxuXHRcdGlmKHcuVCAmJiB3LklEICYmIGlhdXRob3IuaW5kZXhPZihcInRjPVwiICsgdy5JRCkgPT0gLTEpIHtcblx0XHRcdGlhdXRob3IucHVzaChcInRjPVwiICsgdy5JRCk7XG5cdFx0XHRvLnB1c2goXCI8YXV0aG9yPlwiICsgXCJ0Yz1cIiArIHcuSUQgKyBcIjwvYXV0aG9yPlwiKTtcblx0XHR9XG5cdH0pOyB9KTtcblx0aWYoaWF1dGhvci5sZW5ndGggPT0gMCkgeyBpYXV0aG9yLnB1c2goXCJTaGVldEo1XCIpOyBvLnB1c2goXCI8YXV0aG9yPlNoZWV0SjU8L2F1dGhvcj5cIik7IH1cblx0by5wdXNoKFwiPC9hdXRob3JzPlwiKTtcblx0by5wdXNoKFwiPGNvbW1lbnRMaXN0PlwiKTtcblx0ZGF0YS5mb3JFYWNoKGZ1bmN0aW9uKGQpIHtcblx0XHQvKiAxOC43LjMgQ1RfQ29tbWVudCAqL1xuXHRcdHZhciBsYXN0YXV0aG9yID0gMCwgdHMgPSBbXTtcblx0XHRpZihkWzFdWzBdICYmIGRbMV1bMF0uVCAmJiBkWzFdWzBdLklEKSBsYXN0YXV0aG9yID0gaWF1dGhvci5pbmRleE9mKFwidGM9XCIgKyBkWzFdWzBdLklEKTtcblx0XHRlbHNlIGRbMV0uZm9yRWFjaChmdW5jdGlvbihjKSB7XG5cdFx0XHRpZihjLmEpIGxhc3RhdXRob3IgPSBpYXV0aG9yLmluZGV4T2YoZXNjYXBleG1sKGMuYSkpO1xuXHRcdFx0dHMucHVzaChjLnR8fFwiXCIpO1xuXHRcdH0pO1xuXHRcdG8ucHVzaCgnPGNvbW1lbnQgcmVmPVwiJyArIGRbMF0gKyAnXCIgYXV0aG9ySWQ9XCInICsgbGFzdGF1dGhvciArICdcIj48dGV4dD4nKTtcblx0XHRpZih0cy5sZW5ndGggPD0gMSkgby5wdXNoKHdyaXRldGFnKFwidFwiLCBlc2NhcGV4bWwodHNbMF18fFwiXCIpKSk7XG5cdFx0ZWxzZSB7XG5cdFx0XHQvKiBiYXNlZCBvbiBUaHJlYWRlZCBDb21tZW50cyAtPiBDb21tZW50cyBwcm9qZWN0aW9uICovXG5cdFx0XHR2YXIgdCA9IFwiQ29tbWVudDpcXG4gICAgXCIgKyAodHNbMF0pICsgXCJcXG5cIjtcblx0XHRcdGZvcih2YXIgaSA9IDE7IGkgPCB0cy5sZW5ndGg7ICsraSkgdCArPSBcIlJlcGx5OlxcbiAgICBcIiArIHRzW2ldICsgXCJcXG5cIjtcblx0XHRcdG8ucHVzaCh3cml0ZXRhZyhcInRcIiwgZXNjYXBleG1sKHQpKSk7XG5cdFx0fVxuXHRcdG8ucHVzaCgnPC90ZXh0PjwvY29tbWVudD4nKTtcblx0fSk7XG5cdG8ucHVzaChcIjwvY29tbWVudExpc3Q+XCIpO1xuXHRpZihvLmxlbmd0aD4yKSB7IG9bby5sZW5ndGhdID0gKCc8L2NvbW1lbnRzPicpOyBvWzFdPW9bMV0ucmVwbGFjZShcIi8+XCIsXCI+XCIpOyB9XG5cdHJldHVybiBvLmpvaW4oXCJcIik7XG59XG5cbi8qIFtNUy1YTFNYXSAyLjEuMTcgKi9cbmZ1bmN0aW9uIHBhcnNlX3RjbW50X3htbChkYXRhLyo6c3RyaW5nKi8sIG9wdHMpLyo6QXJyYXk8UmF3Q29tbWVudD4qLyB7XG5cdHZhciBvdXQgPSBbXTtcblx0dmFyIHBhc3MgPSBmYWxzZSwgY29tbWVudCA9IHt9LCB0aWR4ID0gMDtcblx0ZGF0YS5yZXBsYWNlKHRhZ3JlZ2V4LCBmdW5jdGlvbiB4bWxfdGNtbnQoeCwgaWR4KSB7XG5cdFx0dmFyIHkvKjphbnkqLyA9IHBhcnNleG1sdGFnKHgpO1xuXHRcdHN3aXRjaChzdHJpcF9ucyh5WzBdKSkge1xuXHRcdFx0Y2FzZSAnPD94bWwnOiBicmVhaztcblxuXHRcdFx0LyogMi42LjIwNyBUaHJlYWRlZENvbW1lbnRzIENUX1RocmVhZGVkQ29tbWVudHMgKi9cblx0XHRcdGNhc2UgJzxUaHJlYWRlZENvbW1lbnRzJzogYnJlYWs7XG5cdFx0XHRjYXNlICc8L1RocmVhZGVkQ29tbWVudHM+JzogYnJlYWs7XG5cblx0XHRcdC8qIDIuNi4yMDUgdGhyZWFkZWRDb21tZW50IENUX1RocmVhZGVkQ29tbWVudCAqL1xuXHRcdFx0Y2FzZSAnPHRocmVhZGVkQ29tbWVudCc6IGNvbW1lbnQgPSB7YXV0aG9yOiB5LnBlcnNvbklkLCBndWlkOiB5LmlkLCByZWY6IHkucmVmLCBUOiAxfTsgYnJlYWs7XG5cdFx0XHRjYXNlICc8L3RocmVhZGVkQ29tbWVudD4nOiBpZihjb21tZW50LnQgIT0gbnVsbCkgb3V0LnB1c2goY29tbWVudCk7IGJyZWFrO1xuXG5cdFx0XHRjYXNlICc8dGV4dD4nOiBjYXNlICc8dGV4dCc6IHRpZHggPSBpZHggKyB4Lmxlbmd0aDsgYnJlYWs7XG5cdFx0XHRjYXNlICc8L3RleHQ+JzogY29tbWVudC50ID0gZGF0YS5zbGljZSh0aWR4LCBpZHgpLnJlcGxhY2UoL1xcclxcbi9nLCBcIlxcblwiKS5yZXBsYWNlKC9cXHIvZywgXCJcXG5cIik7IGJyZWFrO1xuXG5cdFx0XHQvKiAyLjYuMjA2IG1lbnRpb25zIENUX1RocmVhZGVkQ29tbWVudE1lbnRpb25zIFRPRE8gKi9cblx0XHRcdGNhc2UgJzxtZW50aW9ucyc6IGNhc2UgJzxtZW50aW9ucz4nOiBwYXNzID0gdHJ1ZTsgYnJlYWs7XG5cdFx0XHRjYXNlICc8L21lbnRpb25zPic6IHBhc3MgPSBmYWxzZTsgYnJlYWs7XG5cblx0XHRcdC8qIDIuNi4yMDIgbWVudGlvbiBDVF9NZW50aW9uIFRPRE8gKi9cblxuXHRcdFx0LyogMTguMi4xMCBleHRMc3QgQ1RfRXh0ZW5zaW9uTGlzdCA/ICovXG5cdFx0XHRjYXNlICc8ZXh0THN0JzogY2FzZSAnPGV4dExzdD4nOiBjYXNlICc8L2V4dExzdD4nOiBjYXNlICc8ZXh0THN0Lz4nOiBicmVhaztcblx0XHRcdC8qIDE4LjIuNyAgZXh0IENUX0V4dGVuc2lvbiArICovXG5cdFx0XHRjYXNlICc8ZXh0JzogcGFzcz10cnVlOyBicmVhaztcblx0XHRcdGNhc2UgJzwvZXh0Pic6IHBhc3M9ZmFsc2U7IGJyZWFrO1xuXG5cdFx0XHRkZWZhdWx0OiBpZighcGFzcyAmJiBvcHRzLldURikgdGhyb3cgbmV3IEVycm9yKCd1bnJlY29nbml6ZWQgJyArIHlbMF0gKyAnIGluIHRocmVhZGVkIGNvbW1lbnRzJyk7XG5cdFx0fVxuXHRcdHJldHVybiB4O1xuXHR9KTtcblx0cmV0dXJuIG91dDtcbn1cblxuZnVuY3Rpb24gd3JpdGVfdGNtbnRfeG1sKGNvbW1lbnRzLCBwZW9wbGUsIG9wdHMpIHtcblx0dmFyIG8gPSBbWE1MX0hFQURFUiwgd3JpdGV4dGFnKCdUaHJlYWRlZENvbW1lbnRzJywgbnVsbCwgeyAneG1sbnMnOiBYTUxOUy5UQ01OVCB9KS5yZXBsYWNlKC9bXFwvXT4vLCBcIj5cIildO1xuXHRjb21tZW50cy5mb3JFYWNoKGZ1bmN0aW9uKGNhcnIpIHtcblx0XHR2YXIgcm9vdGlkID0gXCJcIjtcblx0XHQoY2FyclsxXSB8fCBbXSkuZm9yRWFjaChmdW5jdGlvbihjLCBpZHgpIHtcblx0XHRcdGlmKCFjLlQpIHsgZGVsZXRlIGMuSUQ7IHJldHVybjsgfVxuXHRcdFx0aWYoYy5hICYmIHBlb3BsZS5pbmRleE9mKGMuYSkgPT0gLTEpIHBlb3BsZS5wdXNoKGMuYSk7XG5cdFx0XHR2YXIgdGNvcHRzID0ge1xuXHRcdFx0XHRyZWY6IGNhcnJbMF0sXG5cdFx0XHRcdGlkOiBcIns1NEVFNzk1MS03MjYyLTQyMDAtNjk2OS1cIiArIChcIjAwMDAwMDAwMDAwMFwiICsgb3B0cy50Y2lkKyspLnNsaWNlKC0xMikgKyBcIn1cIlxuXHRcdFx0fTtcblx0XHRcdGlmKGlkeCA9PSAwKSByb290aWQgPSB0Y29wdHMuaWQ7XG5cdFx0XHRlbHNlIHRjb3B0cy5wYXJlbnRJZCA9IHJvb3RpZDtcblx0XHRcdGMuSUQgPSB0Y29wdHMuaWQ7XG5cdFx0XHRpZihjLmEpIHRjb3B0cy5wZXJzb25JZCA9IFwiezU0RUU3OTUwLTcyNjItNDIwMC02OTY5LVwiICsgKFwiMDAwMDAwMDAwMDAwXCIgKyBwZW9wbGUuaW5kZXhPZihjLmEpKS5zbGljZSgtMTIpICsgXCJ9XCI7XG5cdFx0XHRvLnB1c2god3JpdGV4dGFnKCd0aHJlYWRlZENvbW1lbnQnLCB3cml0ZXRhZygndGV4dCcsIGMudHx8XCJcIiksIHRjb3B0cykpO1xuXHRcdH0pO1xuXHR9KTtcblx0by5wdXNoKCc8L1RocmVhZGVkQ29tbWVudHM+Jyk7XG5cdHJldHVybiBvLmpvaW4oXCJcIik7XG59XG5cbi8qIFtNUy1YTFNYXSAyLjEuMTggKi9cbmZ1bmN0aW9uIHBhcnNlX3Blb3BsZV94bWwoZGF0YS8qOnN0cmluZyovLCBvcHRzKSB7XG5cdHZhciBvdXQgPSBbXTtcblx0dmFyIHBhc3MgPSBmYWxzZTtcblx0ZGF0YS5yZXBsYWNlKHRhZ3JlZ2V4LCBmdW5jdGlvbiB4bWxfdGNtbnQoeCkge1xuXHRcdHZhciB5Lyo6YW55Ki8gPSBwYXJzZXhtbHRhZyh4KTtcblx0XHRzd2l0Y2goc3RyaXBfbnMoeVswXSkpIHtcblx0XHRcdGNhc2UgJzw/eG1sJzogYnJlYWs7XG5cblx0XHRcdC8qIDIuNC44NSBwZXJzb25MaXN0IENUX1BlcnNvbkxpc3QgKi9cblx0XHRcdGNhc2UgJzxwZXJzb25MaXN0JzogYnJlYWs7XG5cdFx0XHRjYXNlICc8L3BlcnNvbkxpc3Q+JzogYnJlYWs7XG5cblx0XHRcdC8qIDIuNi4yMDMgcGVyc29uIENUX1BlcnNvbiBUT0RPOiBwcm92aWRlcnMgKi9cblx0XHRcdGNhc2UgJzxwZXJzb24nOiBvdXQucHVzaCh7bmFtZTogeS5kaXNwbGF5bmFtZSwgaWQ6IHkuaWQgfSk7IGJyZWFrO1xuXHRcdFx0Y2FzZSAnPC9wZXJzb24+JzogYnJlYWs7XG5cblx0XHRcdC8qIDE4LjIuMTAgZXh0THN0IENUX0V4dGVuc2lvbkxpc3QgPyAqL1xuXHRcdFx0Y2FzZSAnPGV4dExzdCc6IGNhc2UgJzxleHRMc3Q+JzogY2FzZSAnPC9leHRMc3Q+JzogY2FzZSAnPGV4dExzdC8+JzogYnJlYWs7XG5cdFx0XHQvKiAxOC4yLjcgIGV4dCBDVF9FeHRlbnNpb24gKyAqL1xuXHRcdFx0Y2FzZSAnPGV4dCc6IHBhc3M9dHJ1ZTsgYnJlYWs7XG5cdFx0XHRjYXNlICc8L2V4dD4nOiBwYXNzPWZhbHNlOyBicmVhaztcblxuXHRcdFx0ZGVmYXVsdDogaWYoIXBhc3MgJiYgb3B0cy5XVEYpIHRocm93IG5ldyBFcnJvcigndW5yZWNvZ25pemVkICcgKyB5WzBdICsgJyBpbiB0aHJlYWRlZCBjb21tZW50cycpO1xuXHRcdH1cblx0XHRyZXR1cm4geDtcblx0fSk7XG5cdHJldHVybiBvdXQ7XG59XG5mdW5jdGlvbiB3cml0ZV9wZW9wbGVfeG1sKHBlb3BsZS8qLCBvcHRzKi8pIHtcblx0dmFyIG8gPSBbWE1MX0hFQURFUiwgd3JpdGV4dGFnKCdwZXJzb25MaXN0JywgbnVsbCwge1xuXHRcdCd4bWxucyc6IFhNTE5TLlRDTU5ULFxuXHRcdCd4bWxuczp4JzogWE1MTlNfbWFpblswXVxuXHR9KS5yZXBsYWNlKC9bXFwvXT4vLCBcIj5cIildO1xuXHRwZW9wbGUuZm9yRWFjaChmdW5jdGlvbihwZXJzb24sIGlkeCkge1xuXHRcdG8ucHVzaCh3cml0ZXh0YWcoJ3BlcnNvbicsIG51bGwsIHtcblx0XHRcdGRpc3BsYXlOYW1lOiBwZXJzb24sXG5cdFx0XHRpZDogXCJ7NTRFRTc5NTAtNzI2Mi00MjAwLTY5NjktXCIgKyAoXCIwMDAwMDAwMDAwMDBcIiArIGlkeCkuc2xpY2UoLTEyKSArIFwifVwiLFxuXHRcdFx0dXNlcklkOiBwZXJzb24sXG5cdFx0XHRwcm92aWRlcklkOiBcIk5vbmVcIlxuXHRcdH0pKTtcblx0fSk7XG5cdG8ucHVzaChcIjwvcGVyc29uTGlzdD5cIik7XG5cdHJldHVybiBvLmpvaW4oXCJcIik7XG59XG4vKiBbTVMtWExTQl0gMi40LjI4IEJydEJlZ2luQ29tbWVudCAqL1xuZnVuY3Rpb24gcGFyc2VfQnJ0QmVnaW5Db21tZW50KGRhdGEpIHtcblx0dmFyIG91dCA9IHt9O1xuXHRvdXQuaWF1dGhvciA9IGRhdGEucmVhZF9zaGlmdCg0KTtcblx0dmFyIHJmeCA9IHBhcnNlX1VuY2hlY2tlZFJmWChkYXRhLCAxNik7XG5cdG91dC5yZnggPSByZngucztcblx0b3V0LnJlZiA9IGVuY29kZV9jZWxsKHJmeC5zKTtcblx0ZGF0YS5sICs9IDE2OyAvKnZhciBndWlkID0gcGFyc2VfR1VJRChkYXRhKTsgKi9cblx0cmV0dXJuIG91dDtcbn1cbmZ1bmN0aW9uIHdyaXRlX0JydEJlZ2luQ29tbWVudChkYXRhLCBvKSB7XG5cdGlmKG8gPT0gbnVsbCkgbyA9IG5ld19idWYoMzYpO1xuXHRvLndyaXRlX3NoaWZ0KDQsIGRhdGFbMV0uaWF1dGhvcik7XG5cdHdyaXRlX1VuY2hlY2tlZFJmWCgoZGF0YVswXS8qOmFueSovKSwgbyk7XG5cdG8ud3JpdGVfc2hpZnQoNCwgMCk7XG5cdG8ud3JpdGVfc2hpZnQoNCwgMCk7XG5cdG8ud3JpdGVfc2hpZnQoNCwgMCk7XG5cdG8ud3JpdGVfc2hpZnQoNCwgMCk7XG5cdHJldHVybiBvO1xufVxuXG4vKiBbTVMtWExTQl0gMi40LjMyNyBCcnRDb21tZW50QXV0aG9yICovXG52YXIgcGFyc2VfQnJ0Q29tbWVudEF1dGhvciA9IHBhcnNlX1hMV2lkZVN0cmluZztcbmZ1bmN0aW9uIHdyaXRlX0JydENvbW1lbnRBdXRob3IoZGF0YSkgeyByZXR1cm4gd3JpdGVfWExXaWRlU3RyaW5nKGRhdGEuc2xpY2UoMCwgNTQpKTsgfVxuXG4vKiBbTVMtWExTQl0gMi4xLjcuOCBDb21tZW50cyAqL1xuZnVuY3Rpb24gcGFyc2VfY29tbWVudHNfYmluKGRhdGEsIG9wdHMpLyo6QXJyYXk8UmF3Q29tbWVudD4qLyB7XG5cdHZhciBvdXQvKjpBcnJheTxSYXdDb21tZW50PiovID0gW107XG5cdHZhciBhdXRob3JzLyo6QXJyYXk8c3RyaW5nPiovID0gW107XG5cdHZhciBjID0ge307XG5cdHZhciBwYXNzID0gZmFsc2U7XG5cdHJlY29yZGhvcHBlcihkYXRhLCBmdW5jdGlvbiBob3BwZXJfY21udCh2YWwsIFIsIFJUKSB7XG5cdFx0c3dpdGNoKFJUKSB7XG5cdFx0XHRjYXNlIDB4MDI3ODogLyogJ0JydENvbW1lbnRBdXRob3InICovXG5cdFx0XHRcdGF1dGhvcnMucHVzaCh2YWwpOyBicmVhaztcblx0XHRcdGNhc2UgMHgwMjdCOiAvKiAnQnJ0QmVnaW5Db21tZW50JyAqL1xuXHRcdFx0XHRjID0gdmFsOyBicmVhaztcblx0XHRcdGNhc2UgMHgwMjdEOiAvKiAnQnJ0Q29tbWVudFRleHQnICovXG5cdFx0XHRcdGMudCA9IHZhbC50OyBjLmggPSB2YWwuaDsgYy5yID0gdmFsLnI7IGJyZWFrO1xuXHRcdFx0Y2FzZSAweDAyN0M6IC8qICdCcnRFbmRDb21tZW50JyAqL1xuXHRcdFx0XHRjLmF1dGhvciA9IGF1dGhvcnNbYy5pYXV0aG9yXTtcblx0XHRcdFx0ZGVsZXRlIChjLyo6YW55Ki8pLmlhdXRob3I7XG5cdFx0XHRcdGlmKG9wdHMuc2hlZXRSb3dzICYmIGMucmZ4ICYmIG9wdHMuc2hlZXRSb3dzIDw9IGMucmZ4LnIpIGJyZWFrO1xuXHRcdFx0XHRpZighYy50KSBjLnQgPSBcIlwiO1xuXHRcdFx0XHRkZWxldGUgYy5yZng7IG91dC5wdXNoKGMpOyBicmVhaztcblxuXHRcdFx0Y2FzZSAweDBDMDA6IC8qICdCcnRVaWQnICovXG5cdFx0XHRcdGJyZWFrO1xuXG5cdFx0XHRjYXNlIDB4MDAyMzogLyogJ0JydEZSVEJlZ2luJyAqL1xuXHRcdFx0XHRwYXNzID0gdHJ1ZTsgYnJlYWs7XG5cdFx0XHRjYXNlIDB4MDAyNDogLyogJ0JydEZSVEVuZCcgKi9cblx0XHRcdFx0cGFzcyA9IGZhbHNlOyBicmVhaztcblx0XHRcdGNhc2UgMHgwMDI1OiAvKiAnQnJ0QUNCZWdpbicgKi8gYnJlYWs7XG5cdFx0XHRjYXNlIDB4MDAyNjogLyogJ0JydEFDRW5kJyAqLyBicmVhaztcblxuXG5cdFx0XHRkZWZhdWx0OlxuXHRcdFx0XHRpZihSLlQpey8qIGVtcHR5ICovfVxuXHRcdFx0XHRlbHNlIGlmKCFwYXNzIHx8IG9wdHMuV1RGKSB0aHJvdyBuZXcgRXJyb3IoXCJVbmV4cGVjdGVkIHJlY29yZCAweFwiICsgUlQudG9TdHJpbmcoMTYpKTtcblx0XHR9XG5cdH0pO1xuXHRyZXR1cm4gb3V0O1xufVxuXG5mdW5jdGlvbiB3cml0ZV9jb21tZW50c19iaW4oZGF0YS8qOjosIG9wdHMqLykge1xuXHR2YXIgYmEgPSBidWZfYXJyYXkoKTtcblx0dmFyIGlhdXRob3IvKjpBcnJheTxzdHJpbmc+Ki8gPSBbXTtcblx0d3JpdGVfcmVjb3JkKGJhLCAweDAyNzQgLyogQnJ0QmVnaW5Db21tZW50cyAqLyk7XG5cblx0d3JpdGVfcmVjb3JkKGJhLCAweDAyNzYgLyogQnJ0QmVnaW5Db21tZW50QXV0aG9ycyAqLyk7XG5cdGRhdGEuZm9yRWFjaChmdW5jdGlvbihjb21tZW50KSB7XG5cdFx0Y29tbWVudFsxXS5mb3JFYWNoKGZ1bmN0aW9uKGMpIHtcblx0XHRcdGlmKGlhdXRob3IuaW5kZXhPZihjLmEpID4gLTEpIHJldHVybjtcblx0XHRcdGlhdXRob3IucHVzaChjLmEuc2xpY2UoMCw1NCkpO1xuXHRcdFx0d3JpdGVfcmVjb3JkKGJhLCAweDAyNzggLyogQnJ0Q29tbWVudEF1dGhvciAqLywgd3JpdGVfQnJ0Q29tbWVudEF1dGhvcihjLmEpKTtcblx0XHR9KTtcblx0fSk7XG5cdHdyaXRlX3JlY29yZChiYSwgMHgwMjc3IC8qIEJydEVuZENvbW1lbnRBdXRob3JzICovKTtcblxuXHR3cml0ZV9yZWNvcmQoYmEsIDB4MDI3OSAvKiBCcnRCZWdpbkNvbW1lbnRMaXN0ICovKTtcblx0ZGF0YS5mb3JFYWNoKGZ1bmN0aW9uKGNvbW1lbnQpIHtcblx0XHRjb21tZW50WzFdLmZvckVhY2goZnVuY3Rpb24oYykge1xuXHRcdFx0Yy5pYXV0aG9yID0gaWF1dGhvci5pbmRleE9mKGMuYSk7XG5cdFx0XHR2YXIgcmFuZ2UgPSB7czpkZWNvZGVfY2VsbChjb21tZW50WzBdKSxlOmRlY29kZV9jZWxsKGNvbW1lbnRbMF0pfTtcblx0XHRcdHdyaXRlX3JlY29yZChiYSwgMHgwMjdCIC8qIEJydEJlZ2luQ29tbWVudCAqLywgd3JpdGVfQnJ0QmVnaW5Db21tZW50KFtyYW5nZSwgY10pKTtcblx0XHRcdGlmKGMudCAmJiBjLnQubGVuZ3RoID4gMCkgd3JpdGVfcmVjb3JkKGJhLCAweDAyN0QgLyogQnJ0Q29tbWVudFRleHQgKi8sIHdyaXRlX0JydENvbW1lbnRUZXh0KGMpKTtcblx0XHRcdHdyaXRlX3JlY29yZChiYSwgMHgwMjdDIC8qIEJydEVuZENvbW1lbnQgKi8pO1xuXHRcdFx0ZGVsZXRlIGMuaWF1dGhvcjtcblx0XHR9KTtcblx0fSk7XG5cdHdyaXRlX3JlY29yZChiYSwgMHgwMjdBIC8qIEJydEVuZENvbW1lbnRMaXN0ICovKTtcblxuXHR3cml0ZV9yZWNvcmQoYmEsIDB4MDI3NSAvKiBCcnRFbmRDb21tZW50cyAqLyk7XG5cdHJldHVybiBiYS5lbmQoKTtcbn1cbnZhciBDVF9WQkEgPSBcImFwcGxpY2F0aW9uL3ZuZC5tcy1vZmZpY2UudmJhUHJvamVjdFwiO1xuZnVuY3Rpb24gbWFrZV92YmFfeGxzKGNmYikge1xuICB2YXIgbmV3Y2ZiID0gQ0ZCLnV0aWxzLmNmYl9uZXcoeyByb290OiBcIlJcIiB9KTtcbiAgY2ZiLkZ1bGxQYXRocy5mb3JFYWNoKGZ1bmN0aW9uKHAsIGkpIHtcbiAgICBpZiAocC5zbGljZSgtMSkgPT09IFwiL1wiIHx8ICFwLm1hdGNoKC9fVkJBX1BST0pFQ1RfQ1VSLykpXG4gICAgICByZXR1cm47XG4gICAgdmFyIG5ld3BhdGggPSBwLnJlcGxhY2UoL15bXlxcL10qLywgXCJSXCIpLnJlcGxhY2UoL1xcL19WQkFfUFJPSkVDVF9DVVJcXHUwMDAwKi8sIFwiXCIpO1xuICAgIENGQi51dGlscy5jZmJfYWRkKG5ld2NmYiwgbmV3cGF0aCwgY2ZiLkZpbGVJbmRleFtpXS5jb250ZW50KTtcbiAgfSk7XG4gIHJldHVybiBDRkIud3JpdGUobmV3Y2ZiKTtcbn1cbmZ1bmN0aW9uIGZpbGxfdmJhX3hscyhjZmIsIHZiYSkge1xuICB2YmEuRnVsbFBhdGhzLmZvckVhY2goZnVuY3Rpb24ocCwgaSkge1xuICAgIGlmIChpID09IDApXG4gICAgICByZXR1cm47XG4gICAgdmFyIG5ld3BhdGggPSBwLnJlcGxhY2UoL1teXFwvXSpbXFwvXS8sIFwiL19WQkFfUFJPSkVDVF9DVVIvXCIpO1xuICAgIGlmIChuZXdwYXRoLnNsaWNlKC0xKSAhPT0gXCIvXCIpXG4gICAgICBDRkIudXRpbHMuY2ZiX2FkZChjZmIsIG5ld3BhdGgsIHZiYS5GaWxlSW5kZXhbaV0uY29udGVudCk7XG4gIH0pO1xufVxudmFyIFZCQUZNVFMgPSBbXCJ4bHNiXCIsIFwieGxzbVwiLCBcInhsYW1cIiwgXCJiaWZmOFwiLCBcInhsYVwiXTtcbi8qIG1hY3JvIGFuZCBkaWFsb2cgc2hlZXQgc3R1YnMgKi9cbmZ1bmN0aW9uIHBhcnNlX2RzX2JpbigvKjo6ZGF0YTphbnksIG9wdHMsIGlkeDpudW1iZXIsIHJlbHMsIHdiLCB0aGVtZXMsIHN0eWxlcyovKS8qOldvcmtzaGVldCovIHsgcmV0dXJuIHsnIXR5cGUnOidkaWFsb2cnfTsgfVxuZnVuY3Rpb24gcGFyc2VfZHNfeG1sKC8qOjpkYXRhOmFueSwgb3B0cywgaWR4Om51bWJlciwgcmVscywgd2IsIHRoZW1lcywgc3R5bGVzKi8pLyo6V29ya3NoZWV0Ki8geyByZXR1cm4geychdHlwZSc6J2RpYWxvZyd9OyB9XG5mdW5jdGlvbiBwYXJzZV9tc19iaW4oLyo6OmRhdGE6YW55LCBvcHRzLCBpZHg6bnVtYmVyLCByZWxzLCB3YiwgdGhlbWVzLCBzdHlsZXMqLykvKjpXb3Jrc2hlZXQqLyB7IHJldHVybiB7JyF0eXBlJzonbWFjcm8nfTsgfVxuZnVuY3Rpb24gcGFyc2VfbXNfeG1sKC8qOjpkYXRhOmFueSwgb3B0cywgaWR4Om51bWJlciwgcmVscywgd2IsIHRoZW1lcywgc3R5bGVzKi8pLyo6V29ya3NoZWV0Ki8geyByZXR1cm4geychdHlwZSc6J21hY3JvJ307IH1cbi8qIFRPRE86IGl0IHdpbGwgYmUgdXNlZnVsIHRvIHBhcnNlIHRoZSBmdW5jdGlvbiBzdHIgKi9cbnZhciByY190b19hMSA9IC8qI19fUFVSRV9fKi8oZnVuY3Rpb24oKXtcblx0dmFyIHJjcmVnZXggPSAvKF58W15BLVphLXpfXSlSKFxcWz8tP1xcZCtcXF18WzEtOV1cXGQqfClDKFxcWz8tP1xcZCtcXF18WzEtOV1cXGQqfCkoPyFbQS1aYS16MC05X10pL2c7XG5cdHZhciByY2Jhc2UvKjpDZWxsKi8gPSAoe3I6MCxjOjB9Lyo6YW55Ki8pO1xuXHRmdW5jdGlvbiByY2Z1bmMoJCQsJDEsJDIsJDMpIHtcblx0XHR2YXIgY1JlbCA9IGZhbHNlLCByUmVsID0gZmFsc2U7XG5cblx0XHRpZigkMi5sZW5ndGggPT0gMCkgclJlbCA9IHRydWU7XG5cdFx0ZWxzZSBpZigkMi5jaGFyQXQoMCkgPT0gXCJbXCIpIHsgclJlbCA9IHRydWU7ICQyID0gJDIuc2xpY2UoMSwgLTEpOyB9XG5cblx0XHRpZigkMy5sZW5ndGggPT0gMCkgY1JlbCA9IHRydWU7XG5cdFx0ZWxzZSBpZigkMy5jaGFyQXQoMCkgPT0gXCJbXCIpIHsgY1JlbCA9IHRydWU7ICQzID0gJDMuc2xpY2UoMSwgLTEpOyB9XG5cblx0XHR2YXIgUiA9ICQyLmxlbmd0aD4wP3BhcnNlSW50KCQyLDEwKXwwOjAsIEMgPSAkMy5sZW5ndGg+MD9wYXJzZUludCgkMywxMCl8MDowO1xuXG5cdFx0aWYoY1JlbCkgQyArPSByY2Jhc2UuYzsgZWxzZSAtLUM7XG5cdFx0aWYoclJlbCkgUiArPSByY2Jhc2UucjsgZWxzZSAtLVI7XG5cdFx0cmV0dXJuICQxICsgKGNSZWwgPyBcIlwiIDogXCIkXCIpICsgZW5jb2RlX2NvbChDKSArIChyUmVsID8gXCJcIiA6IFwiJFwiKSArIGVuY29kZV9yb3coUik7XG5cdH1cblx0cmV0dXJuIGZ1bmN0aW9uIHJjX3RvX2ExKGZzdHIvKjpzdHJpbmcqLywgYmFzZS8qOkNlbGwqLykvKjpzdHJpbmcqLyB7XG5cdFx0cmNiYXNlID0gYmFzZTtcblx0XHRyZXR1cm4gZnN0ci5yZXBsYWNlKHJjcmVnZXgsIHJjZnVuYyk7XG5cdH07XG59KSgpO1xuXG52YXIgY3JlZnJlZ2V4ID0gLyhefFteLl9BLVowLTldKShbJF0/KShbQS1aXXsxLDJ9fFtBLVddW0EtWl17Mn18WFtBLUVdW0EtWl18WEZbQS1EXSkoWyRdPykoMTBbMC0zXVxcZHs0fXwxMDRbMC03XVxcZHszfXwxMDQ4WzAtNF1cXGR7Mn18MTA0ODVbMC02XVxcZHwxMDQ4NTdbMC02XXxbMS05XVxcZHswLDV9KSg/IVtfLlxcKEEtWmEtejAtOV0pL2c7XG52YXIgYTFfdG9fcmMgPSAvKiNfX1BVUkVfXyovKGZ1bmN0aW9uKCl7XG5cdHJldHVybiBmdW5jdGlvbiBhMV90b19yYyhmc3RyLyo6c3RyaW5nKi8sIGJhc2UvKjpDZWxsQWRkcmVzcyovKSB7XG5cdFx0cmV0dXJuIGZzdHIucmVwbGFjZShjcmVmcmVnZXgsIGZ1bmN0aW9uKCQwLCAkMSwgJDIsICQzLCAkNCwgJDUpIHtcblx0XHRcdHZhciBjID0gZGVjb2RlX2NvbCgkMykgLSAoJDIgPyAwIDogYmFzZS5jKTtcblx0XHRcdHZhciByID0gZGVjb2RlX3JvdygkNSkgLSAoJDQgPyAwIDogYmFzZS5yKTtcblx0XHRcdHZhciBSID0gKHIgPT0gMCA/IFwiXCIgOiAhJDQgPyBcIltcIiArIHIgKyBcIl1cIiA6IChyKzEpKTtcblx0XHRcdHZhciBDID0gKGMgPT0gMCA/IFwiXCIgOiAhJDIgPyBcIltcIiArIGMgKyBcIl1cIiA6IChjKzEpKTtcblx0XHRcdHJldHVybiAkMSArIFwiUlwiICsgUiArIFwiQ1wiICsgQztcblx0XHR9KTtcblx0fTtcbn0pKCk7XG5cbi8qIG5vIGRlZmluZWQgbmFtZSBjYW4gY29sbGlkZSB3aXRoIGEgdmFsaWQgY2VsbCBhZGRyZXNzIEExOlhGRDEwNDg1NzYgLi4uIGV4Y2VwdCBMT0cxMCEgKi9cbmZ1bmN0aW9uIHNoaWZ0X2Zvcm11bGFfc3RyKGYvKjpzdHJpbmcqLywgZGVsdGEvKjpDZWxsKi8pLyo6c3RyaW5nKi8ge1xuXHRyZXR1cm4gZi5yZXBsYWNlKGNyZWZyZWdleCwgZnVuY3Rpb24oJDAsICQxLCAkMiwgJDMsICQ0LCAkNSkge1xuXHRcdHJldHVybiAkMSsoJDI9PVwiJFwiID8gJDIrJDMgOiBlbmNvZGVfY29sKGRlY29kZV9jb2woJDMpK2RlbHRhLmMpKSsoJDQ9PVwiJFwiID8gJDQrJDUgOiBlbmNvZGVfcm93KGRlY29kZV9yb3coJDUpICsgZGVsdGEucikpO1xuXHR9KTtcbn1cblxuZnVuY3Rpb24gc2hpZnRfZm9ybXVsYV94bHN4KGYvKjpzdHJpbmcqLywgcmFuZ2UvKjpzdHJpbmcqLywgY2VsbC8qOnN0cmluZyovKS8qOnN0cmluZyovIHtcblx0dmFyIHIgPSBkZWNvZGVfcmFuZ2UocmFuZ2UpLCBzID0gci5zLCBjID0gZGVjb2RlX2NlbGwoY2VsbCk7XG5cdHZhciBkZWx0YSA9IHtyOmMuciAtIHMuciwgYzpjLmMgLSBzLmN9O1xuXHRyZXR1cm4gc2hpZnRfZm9ybXVsYV9zdHIoZiwgZGVsdGEpO1xufVxuXG4vKiBUT0RPOiBwYXJzZSBmb3JtdWxhICovXG5mdW5jdGlvbiBmdXp6eWZtbGEoZi8qOnN0cmluZyovKS8qOmJvb2xlYW4qLyB7XG5cdGlmKGYubGVuZ3RoID09IDEpIHJldHVybiBmYWxzZTtcblx0cmV0dXJuIHRydWU7XG59XG5cbmZ1bmN0aW9uIF94bGZuKGYvKjpzdHJpbmcqLykvKjpzdHJpbmcqLyB7XG5cdHJldHVybiBmLnJlcGxhY2UoL194bGZuXFwuL2csXCJcIik7XG59XG5mdW5jdGlvbiBwYXJzZXJlYWQxKGJsb2IpIHsgYmxvYi5sKz0xOyByZXR1cm47IH1cblxuLyogW01TLVhMU10gMi41LjUxICovXG5mdW5jdGlvbiBwYXJzZV9Db2xSZWxVKGJsb2IsIGxlbmd0aCkge1xuXHR2YXIgYyA9IGJsb2IucmVhZF9zaGlmdChsZW5ndGggPT0gMSA/IDEgOiAyKTtcblx0cmV0dXJuIFtjICYgMHgzRkZGLCAoYyA+PiAxNCkgJiAxLCAoYyA+PiAxNSkgJiAxXTtcbn1cblxuLyogW01TLVhMU10gMi41LjE5OC4xMDUgOyBbTVMtWExTQl0gMi41Ljk3Ljg5ICovXG5mdW5jdGlvbiBwYXJzZV9SZ2NlQXJlYShibG9iLCBsZW5ndGgsIG9wdHMpIHtcblx0dmFyIHcgPSAyO1xuXHRpZihvcHRzKSB7XG5cdFx0aWYob3B0cy5iaWZmID49IDIgJiYgb3B0cy5iaWZmIDw9IDUpIHJldHVybiBwYXJzZV9SZ2NlQXJlYV9CSUZGMihibG9iLCBsZW5ndGgsIG9wdHMpO1xuXHRcdGVsc2UgaWYob3B0cy5iaWZmID09IDEyKSB3ID0gNDtcblx0fVxuXHR2YXIgcj1ibG9iLnJlYWRfc2hpZnQodyksIFI9YmxvYi5yZWFkX3NoaWZ0KHcpO1xuXHR2YXIgYz1wYXJzZV9Db2xSZWxVKGJsb2IsIDIpO1xuXHR2YXIgQz1wYXJzZV9Db2xSZWxVKGJsb2IsIDIpO1xuXHRyZXR1cm4geyBzOntyOnIsIGM6Y1swXSwgY1JlbDpjWzFdLCByUmVsOmNbMl19LCBlOntyOlIsIGM6Q1swXSwgY1JlbDpDWzFdLCByUmVsOkNbMl19IH07XG59XG4vKiBCSUZGIDItNSBlbmNvZGVzIGZsYWdzIGluIHRoZSByb3cgZmllbGQgKi9cbmZ1bmN0aW9uIHBhcnNlX1JnY2VBcmVhX0JJRkYyKGJsb2IvKjo6LCBsZW5ndGgsIG9wdHMqLykge1xuXHR2YXIgcj1wYXJzZV9Db2xSZWxVKGJsb2IsIDIpLCBSPXBhcnNlX0NvbFJlbFUoYmxvYiwgMik7XG5cdHZhciBjPWJsb2IucmVhZF9zaGlmdCgxKTtcblx0dmFyIEM9YmxvYi5yZWFkX3NoaWZ0KDEpO1xuXHRyZXR1cm4geyBzOntyOnJbMF0sIGM6YywgY1JlbDpyWzFdLCByUmVsOnJbMl19LCBlOntyOlJbMF0sIGM6QywgY1JlbDpSWzFdLCByUmVsOlJbMl19IH07XG59XG5cbi8qIFtNUy1YTFNdIDIuNS4xOTguMTA1IDsgW01TLVhMU0JdIDIuNS45Ny45MCAqL1xuZnVuY3Rpb24gcGFyc2VfUmdjZUFyZWFSZWwoYmxvYiwgbGVuZ3RoLCBvcHRzKSB7XG5cdGlmKG9wdHMuYmlmZiA8IDgpIHJldHVybiBwYXJzZV9SZ2NlQXJlYV9CSUZGMihibG9iLCBsZW5ndGgsIG9wdHMpO1xuXHR2YXIgcj1ibG9iLnJlYWRfc2hpZnQob3B0cy5iaWZmID09IDEyID8gNCA6IDIpLCBSPWJsb2IucmVhZF9zaGlmdChvcHRzLmJpZmYgPT0gMTIgPyA0IDogMik7XG5cdHZhciBjPXBhcnNlX0NvbFJlbFUoYmxvYiwgMik7XG5cdHZhciBDPXBhcnNlX0NvbFJlbFUoYmxvYiwgMik7XG5cdHJldHVybiB7IHM6e3I6ciwgYzpjWzBdLCBjUmVsOmNbMV0sIHJSZWw6Y1syXX0sIGU6e3I6UiwgYzpDWzBdLCBjUmVsOkNbMV0sIHJSZWw6Q1syXX0gfTtcbn1cblxuLyogW01TLVhMU10gMi41LjE5OC4xMDkgOyBbTVMtWExTQl0gMi41Ljk3LjkxICovXG5mdW5jdGlvbiBwYXJzZV9SZ2NlTG9jKGJsb2IsIGxlbmd0aCwgb3B0cykge1xuXHRpZihvcHRzICYmIG9wdHMuYmlmZiA+PSAyICYmIG9wdHMuYmlmZiA8PSA1KSByZXR1cm4gcGFyc2VfUmdjZUxvY19CSUZGMihibG9iLCBsZW5ndGgsIG9wdHMpO1xuXHR2YXIgciA9IGJsb2IucmVhZF9zaGlmdChvcHRzICYmIG9wdHMuYmlmZiA9PSAxMiA/IDQgOiAyKTtcblx0dmFyIGMgPSBwYXJzZV9Db2xSZWxVKGJsb2IsIDIpO1xuXHRyZXR1cm4ge3I6ciwgYzpjWzBdLCBjUmVsOmNbMV0sIHJSZWw6Y1syXX07XG59XG5mdW5jdGlvbiBwYXJzZV9SZ2NlTG9jX0JJRkYyKGJsb2IvKjo6LCBsZW5ndGgsIG9wdHMqLykge1xuXHR2YXIgciA9IHBhcnNlX0NvbFJlbFUoYmxvYiwgMik7XG5cdHZhciBjID0gYmxvYi5yZWFkX3NoaWZ0KDEpO1xuXHRyZXR1cm4ge3I6clswXSwgYzpjLCBjUmVsOnJbMV0sIHJSZWw6clsyXX07XG59XG5cbi8qIFtNUy1YTFNdIDIuNS4xOTguMTA3LCAyLjUuNDcgKi9cbmZ1bmN0aW9uIHBhcnNlX1JnY2VFbGZMb2MoYmxvYi8qOjosIGxlbmd0aCwgb3B0cyovKSB7XG5cdHZhciByID0gYmxvYi5yZWFkX3NoaWZ0KDIpO1xuXHR2YXIgYyA9IGJsb2IucmVhZF9zaGlmdCgyKTtcblx0cmV0dXJuIHtyOnIsIGM6YyAmIDB4RkYsIGZRdW90ZWQ6ISEoYyAmIDB4NDAwMCksIGNSZWw6Yz4+MTUsIHJSZWw6Yz4+MTUgfTtcbn1cblxuLyogW01TLVhMU10gMi41LjE5OC4xMTEgOyBbTVMtWExTQl0gMi41Ljk3LjkyIFRPRE8gKi9cbmZ1bmN0aW9uIHBhcnNlX1JnY2VMb2NSZWwoYmxvYiwgbGVuZ3RoLCBvcHRzKSB7XG5cdHZhciBiaWZmID0gb3B0cyAmJiBvcHRzLmJpZmYgPyBvcHRzLmJpZmYgOiA4O1xuXHRpZihiaWZmID49IDIgJiYgYmlmZiA8PSA1KSByZXR1cm4gcGFyc2VfUmdjZUxvY1JlbF9CSUZGMihibG9iLCBsZW5ndGgsIG9wdHMpO1xuXHR2YXIgciA9IGJsb2IucmVhZF9zaGlmdChiaWZmID49IDEyID8gNCA6IDIpO1xuXHR2YXIgY2wgPSBibG9iLnJlYWRfc2hpZnQoMik7XG5cdHZhciBjUmVsID0gKGNsICYgMHg0MDAwKSA+PiAxNCwgclJlbCA9IChjbCAmIDB4ODAwMCkgPj4gMTU7XG5cdGNsICY9IDB4M0ZGRjtcblx0aWYoclJlbCA9PSAxKSB3aGlsZShyID4gMHg3RkZGRikgciAtPSAweDEwMDAwMDtcblx0aWYoY1JlbCA9PSAxKSB3aGlsZShjbCA+IDB4MUZGRikgY2wgPSBjbCAtIDB4NDAwMDtcblx0cmV0dXJuIHtyOnIsYzpjbCxjUmVsOmNSZWwsclJlbDpyUmVsfTtcbn1cbmZ1bmN0aW9uIHBhcnNlX1JnY2VMb2NSZWxfQklGRjIoYmxvYi8qOjosIGxlbmd0aDpudW1iZXIsIG9wdHMqLykge1xuXHR2YXIgcmwgPSBibG9iLnJlYWRfc2hpZnQoMik7XG5cdHZhciBjID0gYmxvYi5yZWFkX3NoaWZ0KDEpO1xuXHR2YXIgclJlbCA9IChybCAmIDB4ODAwMCkgPj4gMTUsIGNSZWwgPSAocmwgJiAweDQwMDApID4+IDE0O1xuXHRybCAmPSAweDNGRkY7XG5cdGlmKHJSZWwgPT0gMSAmJiBybCA+PSAweDIwMDApIHJsID0gcmwgLSAweDQwMDA7XG5cdGlmKGNSZWwgPT0gMSAmJiBjID49IDB4ODApIGMgPSBjIC0gMHgxMDA7XG5cdHJldHVybiB7cjpybCxjOmMsY1JlbDpjUmVsLHJSZWw6clJlbH07XG59XG5cbi8qIFtNUy1YTFNdIDIuNS4xOTguMjcgOyBbTVMtWExTQl0gMi41Ljk3LjE4ICovXG5mdW5jdGlvbiBwYXJzZV9QdGdBcmVhKGJsb2IsIGxlbmd0aCwgb3B0cykge1xuXHR2YXIgdHlwZSA9IChibG9iW2Jsb2IubCsrXSAmIDB4NjApID4+IDU7XG5cdHZhciBhcmVhID0gcGFyc2VfUmdjZUFyZWEoYmxvYiwgb3B0cy5iaWZmID49IDIgJiYgb3B0cy5iaWZmIDw9IDUgPyA2IDogOCwgb3B0cyk7XG5cdHJldHVybiBbdHlwZSwgYXJlYV07XG59XG5cbi8qIFtNUy1YTFNdIDIuNS4xOTguMjggOyBbTVMtWExTQl0gMi41Ljk3LjE5ICovXG5mdW5jdGlvbiBwYXJzZV9QdGdBcmVhM2QoYmxvYiwgbGVuZ3RoLCBvcHRzKSB7XG5cdHZhciB0eXBlID0gKGJsb2JbYmxvYi5sKytdICYgMHg2MCkgPj4gNTtcblx0dmFyIGl4dGkgPSBibG9iLnJlYWRfc2hpZnQoMiwgJ2knKTtcblx0dmFyIHcgPSA4O1xuXHRpZihvcHRzKSBzd2l0Y2gob3B0cy5iaWZmKSB7XG5cdFx0Y2FzZSA1OiBibG9iLmwgKz0gMTI7IHcgPSA2OyBicmVhaztcblx0XHRjYXNlIDEyOiB3ID0gMTI7IGJyZWFrO1xuXHR9XG5cdHZhciBhcmVhID0gcGFyc2VfUmdjZUFyZWEoYmxvYiwgdywgb3B0cyk7XG5cdHJldHVybiBbdHlwZSwgaXh0aSwgYXJlYV07XG59XG5cbi8qIFtNUy1YTFNdIDIuNS4xOTguMjkgOyBbTVMtWExTQl0gMi41Ljk3LjIwICovXG5mdW5jdGlvbiBwYXJzZV9QdGdBcmVhRXJyKGJsb2IsIGxlbmd0aCwgb3B0cykge1xuXHR2YXIgdHlwZSA9IChibG9iW2Jsb2IubCsrXSAmIDB4NjApID4+IDU7XG5cdGJsb2IubCArPSBvcHRzICYmIChvcHRzLmJpZmYgPiA4KSA/IDEyIDogKG9wdHMuYmlmZiA8IDggPyA2IDogOCk7XG5cdHJldHVybiBbdHlwZV07XG59XG4vKiBbTVMtWExTXSAyLjUuMTk4LjMwIDsgW01TLVhMU0JdIDIuNS45Ny4yMSAqL1xuZnVuY3Rpb24gcGFyc2VfUHRnQXJlYUVycjNkKGJsb2IsIGxlbmd0aCwgb3B0cykge1xuXHR2YXIgdHlwZSA9IChibG9iW2Jsb2IubCsrXSAmIDB4NjApID4+IDU7XG5cdHZhciBpeHRpID0gYmxvYi5yZWFkX3NoaWZ0KDIpO1xuXHR2YXIgdyA9IDg7XG5cdGlmKG9wdHMpIHN3aXRjaChvcHRzLmJpZmYpIHtcblx0XHRjYXNlIDU6IGJsb2IubCArPSAxMjsgdyA9IDY7IGJyZWFrO1xuXHRcdGNhc2UgMTI6IHcgPSAxMjsgYnJlYWs7XG5cdH1cblx0YmxvYi5sICs9IHc7XG5cdHJldHVybiBbdHlwZSwgaXh0aV07XG59XG5cbi8qIFtNUy1YTFNdIDIuNS4xOTguMzEgOyBbTVMtWExTQl0gMi41Ljk3LjIyICovXG5mdW5jdGlvbiBwYXJzZV9QdGdBcmVhTihibG9iLCBsZW5ndGgsIG9wdHMpIHtcblx0dmFyIHR5cGUgPSAoYmxvYltibG9iLmwrK10gJiAweDYwKSA+PiA1O1xuXHR2YXIgYXJlYSA9IHBhcnNlX1JnY2VBcmVhUmVsKGJsb2IsIGxlbmd0aCAtIDEsIG9wdHMpO1xuXHRyZXR1cm4gW3R5cGUsIGFyZWFdO1xufVxuXG4vKiBbTVMtWExTXSAyLjUuMTk4LjMyIDsgW01TLVhMU0JdIDIuNS45Ny4yMyAqL1xuZnVuY3Rpb24gcGFyc2VfUHRnQXJyYXkoYmxvYiwgbGVuZ3RoLCBvcHRzKSB7XG5cdHZhciB0eXBlID0gKGJsb2JbYmxvYi5sKytdICYgMHg2MCkgPj4gNTtcblx0YmxvYi5sICs9IG9wdHMuYmlmZiA9PSAyID8gNiA6IG9wdHMuYmlmZiA9PSAxMiA/IDE0IDogNztcblx0cmV0dXJuIFt0eXBlXTtcbn1cblxuLyogW01TLVhMU10gMi41LjE5OC4zMyA7IFtNUy1YTFNCXSAyLjUuOTcuMjQgKi9cbmZ1bmN0aW9uIHBhcnNlX1B0Z0F0dHJCYXhjZWwoYmxvYikge1xuXHR2YXIgYml0U2VtaSA9IGJsb2JbYmxvYi5sKzFdICYgMHgwMTsgLyogMSA9IHZvbGF0aWxlICovXG5cdHZhciBiaXRCYXhjZWwgPSAxO1xuXHRibG9iLmwgKz0gNDtcblx0cmV0dXJuIFtiaXRTZW1pLCBiaXRCYXhjZWxdO1xufVxuXG4vKiBbTVMtWExTXSAyLjUuMTk4LjM0IDsgW01TLVhMU0JdIDIuNS45Ny4yNSAqL1xuZnVuY3Rpb24gcGFyc2VfUHRnQXR0ckNob29zZShibG9iLCBsZW5ndGgsIG9wdHMpLyo6QXJyYXk8bnVtYmVyPiovIHtcblx0YmxvYi5sICs9Mjtcblx0dmFyIG9mZnNldCA9IGJsb2IucmVhZF9zaGlmdChvcHRzICYmIG9wdHMuYmlmZiA9PSAyID8gMSA6IDIpO1xuXHR2YXIgby8qOkFycmF5PG51bWJlcj4qLyA9IFtdO1xuXHQvKiBvZmZzZXQgaXMgMSBsZXNzIHRoYW4gdGhlIG51bWJlciBvZiBlbGVtZW50cyAqL1xuXHRmb3IodmFyIGkgPSAwOyBpIDw9IG9mZnNldDsgKytpKSBvLnB1c2goYmxvYi5yZWFkX3NoaWZ0KG9wdHMgJiYgb3B0cy5iaWZmID09IDIgPyAxIDogMikpO1xuXHRyZXR1cm4gbztcbn1cblxuLyogW01TLVhMU10gMi41LjE5OC4zNSA7IFtNUy1YTFNCXSAyLjUuOTcuMjYgKi9cbmZ1bmN0aW9uIHBhcnNlX1B0Z0F0dHJHb3RvKGJsb2IsIGxlbmd0aCwgb3B0cykge1xuXHR2YXIgYml0R290byA9IChibG9iW2Jsb2IubCsxXSAmIDB4RkYpID8gMSA6IDA7XG5cdGJsb2IubCArPSAyO1xuXHRyZXR1cm4gW2JpdEdvdG8sIGJsb2IucmVhZF9zaGlmdChvcHRzICYmIG9wdHMuYmlmZiA9PSAyID8gMSA6IDIpXTtcbn1cblxuLyogW01TLVhMU10gMi41LjE5OC4zNiA7IFtNUy1YTFNCXSAyLjUuOTcuMjcgKi9cbmZ1bmN0aW9uIHBhcnNlX1B0Z0F0dHJJZihibG9iLCBsZW5ndGgsIG9wdHMpIHtcblx0dmFyIGJpdElmID0gKGJsb2JbYmxvYi5sKzFdICYgMHhGRikgPyAxIDogMDtcblx0YmxvYi5sICs9IDI7XG5cdHJldHVybiBbYml0SWYsIGJsb2IucmVhZF9zaGlmdChvcHRzICYmIG9wdHMuYmlmZiA9PSAyID8gMSA6IDIpXTtcbn1cblxuLyogW01TLVhMU0JdIDIuNS45Ny4yOCAqL1xuZnVuY3Rpb24gcGFyc2VfUHRnQXR0cklmRXJyb3IoYmxvYikge1xuXHR2YXIgYml0SWYgPSAoYmxvYltibG9iLmwrMV0gJiAweEZGKSA/IDEgOiAwO1xuXHRibG9iLmwgKz0gMjtcblx0cmV0dXJuIFtiaXRJZiwgYmxvYi5yZWFkX3NoaWZ0KDIpXTtcbn1cblxuLyogW01TLVhMU10gMi41LjE5OC4zNyA7IFtNUy1YTFNCXSAyLjUuOTcuMjkgKi9cbmZ1bmN0aW9uIHBhcnNlX1B0Z0F0dHJTZW1pKGJsb2IsIGxlbmd0aCwgb3B0cykge1xuXHR2YXIgYml0U2VtaSA9IChibG9iW2Jsb2IubCsxXSAmIDB4RkYpID8gMSA6IDA7XG5cdGJsb2IubCArPSBvcHRzICYmIG9wdHMuYmlmZiA9PSAyID8gMyA6IDQ7XG5cdHJldHVybiBbYml0U2VtaV07XG59XG5cbi8qIFtNUy1YTFNdIDIuNS4xOTguNDAgOyBbTVMtWExTQl0gMi41Ljk3LjMyICovXG5mdW5jdGlvbiBwYXJzZV9QdGdBdHRyU3BhY2VUeXBlKGJsb2IvKjo6LCBsZW5ndGgqLykge1xuXHR2YXIgdHlwZSA9IGJsb2IucmVhZF9zaGlmdCgxKSwgY2NoID0gYmxvYi5yZWFkX3NoaWZ0KDEpO1xuXHRyZXR1cm4gW3R5cGUsIGNjaF07XG59XG5cbi8qIFtNUy1YTFNdIDIuNS4xOTguMzggOyBbTVMtWExTQl0gMi41Ljk3LjMwICovXG5mdW5jdGlvbiBwYXJzZV9QdGdBdHRyU3BhY2UoYmxvYikge1xuXHRibG9iLnJlYWRfc2hpZnQoMik7XG5cdHJldHVybiBwYXJzZV9QdGdBdHRyU3BhY2VUeXBlKGJsb2IsIDIpO1xufVxuXG4vKiBbTVMtWExTXSAyLjUuMTk4LjM5IDsgW01TLVhMU0JdIDIuNS45Ny4zMSAqL1xuZnVuY3Rpb24gcGFyc2VfUHRnQXR0clNwYWNlU2VtaShibG9iKSB7XG5cdGJsb2IucmVhZF9zaGlmdCgyKTtcblx0cmV0dXJuIHBhcnNlX1B0Z0F0dHJTcGFjZVR5cGUoYmxvYiwgMik7XG59XG5cbi8qIFtNUy1YTFNdIDIuNS4xOTguODQgOyBbTVMtWExTQl0gMi41Ljk3LjY4IFRPRE8gKi9cbmZ1bmN0aW9uIHBhcnNlX1B0Z1JlZihibG9iLCBsZW5ndGgsIG9wdHMpIHtcblx0Ly92YXIgcHRnID0gYmxvYltibG9iLmxdICYgMHgxRjtcblx0dmFyIHR5cGUgPSAoYmxvYltibG9iLmxdICYgMHg2MCk+PjU7XG5cdGJsb2IubCArPSAxO1xuXHR2YXIgbG9jID0gcGFyc2VfUmdjZUxvYyhibG9iLCAwLCBvcHRzKTtcblx0cmV0dXJuIFt0eXBlLCBsb2NdO1xufVxuXG4vKiBbTVMtWExTXSAyLjUuMTk4Ljg4IDsgW01TLVhMU0JdIDIuNS45Ny43MiBUT0RPICovXG5mdW5jdGlvbiBwYXJzZV9QdGdSZWZOKGJsb2IsIGxlbmd0aCwgb3B0cykge1xuXHR2YXIgdHlwZSA9IChibG9iW2Jsb2IubF0gJiAweDYwKT4+NTtcblx0YmxvYi5sICs9IDE7XG5cdHZhciBsb2MgPSBwYXJzZV9SZ2NlTG9jUmVsKGJsb2IsIDAsIG9wdHMpO1xuXHRyZXR1cm4gW3R5cGUsIGxvY107XG59XG5cbi8qIFtNUy1YTFNdIDIuNS4xOTguODUgOyBbTVMtWExTQl0gMi41Ljk3LjY5IFRPRE8gKi9cbmZ1bmN0aW9uIHBhcnNlX1B0Z1JlZjNkKGJsb2IsIGxlbmd0aCwgb3B0cykge1xuXHR2YXIgdHlwZSA9IChibG9iW2Jsb2IubF0gJiAweDYwKT4+NTtcblx0YmxvYi5sICs9IDE7XG5cdHZhciBpeHRpID0gYmxvYi5yZWFkX3NoaWZ0KDIpOyAvLyBYdGlJbmRleFxuXHRpZihvcHRzICYmIG9wdHMuYmlmZiA9PSA1KSBibG9iLmwgKz0gMTI7XG5cdHZhciBsb2MgPSBwYXJzZV9SZ2NlTG9jKGJsb2IsIDAsIG9wdHMpOyAvLyBUT0RPOiBvciBSZ2NlTG9jUmVsXG5cdHJldHVybiBbdHlwZSwgaXh0aSwgbG9jXTtcbn1cblxuXG4vKiBbTVMtWExTXSAyLjUuMTk4LjYyIDsgW01TLVhMU0JdIDIuNS45Ny40NSBUT0RPICovXG5mdW5jdGlvbiBwYXJzZV9QdGdGdW5jKGJsb2IsIGxlbmd0aCwgb3B0cykge1xuXHQvL3ZhciBwdGcgPSBibG9iW2Jsb2IubF0gJiAweDFGO1xuXHR2YXIgdHlwZSA9IChibG9iW2Jsb2IubF0gJiAweDYwKT4+NTtcblx0YmxvYi5sICs9IDE7XG5cdHZhciBpZnRhYiA9IGJsb2IucmVhZF9zaGlmdChvcHRzICYmIG9wdHMuYmlmZiA8PSAzID8gMSA6IDIpO1xuXHRyZXR1cm4gW0Z0YWJBcmdjW2lmdGFiXSwgRnRhYltpZnRhYl0sIHR5cGVdO1xufVxuLyogW01TLVhMU10gMi41LjE5OC42MyA7IFtNUy1YTFNCXSAyLjUuOTcuNDYgVE9ETyAqL1xuZnVuY3Rpb24gcGFyc2VfUHRnRnVuY1ZhcihibG9iLCBsZW5ndGgsIG9wdHMpIHtcblx0dmFyIHR5cGUgPSBibG9iW2Jsb2IubCsrXTtcblx0dmFyIGNwYXJhbXMgPSBibG9iLnJlYWRfc2hpZnQoMSksIHRhYiA9IG9wdHMgJiYgb3B0cy5iaWZmIDw9IDMgPyBbKHR5cGUgPT0gMHg1OCA/IC0xIDogMCksIGJsb2IucmVhZF9zaGlmdCgxKV06IHBhcnNldGFiKGJsb2IpO1xuXHRyZXR1cm4gW2NwYXJhbXMsICh0YWJbMF0gPT09IDAgPyBGdGFiIDogQ2V0YWIpW3RhYlsxXV1dO1xufVxuXG5mdW5jdGlvbiBwYXJzZXRhYihibG9iKSB7XG5cdHJldHVybiBbYmxvYltibG9iLmwrMV0+PjcsIGJsb2IucmVhZF9zaGlmdCgyKSAmIDB4N0ZGRl07XG59XG5cbi8qIFtNUy1YTFNdIDIuNS4xOTguNDEgOyBbTVMtWExTQl0gMi41Ljk3LjMzICovXG5mdW5jdGlvbiBwYXJzZV9QdGdBdHRyU3VtKGJsb2IsIGxlbmd0aCwgb3B0cykge1xuXHRibG9iLmwgKz0gb3B0cyAmJiBvcHRzLmJpZmYgPT0gMiA/IDMgOiA0OyByZXR1cm47XG59XG5cbi8qIFtNUy1YTFNdIDIuNS4xOTguNTggOyBbTVMtWExTQl0gMi41Ljk3LjQwICovXG5mdW5jdGlvbiBwYXJzZV9QdGdFeHAoYmxvYiwgbGVuZ3RoLCBvcHRzKSB7XG5cdGJsb2IubCsrO1xuXHRpZihvcHRzICYmIG9wdHMuYmlmZiA9PSAxMikgcmV0dXJuIFtibG9iLnJlYWRfc2hpZnQoNCwgJ2knKSwgMF07XG5cdHZhciByb3cgPSBibG9iLnJlYWRfc2hpZnQoMik7XG5cdHZhciBjb2wgPSBibG9iLnJlYWRfc2hpZnQob3B0cyAmJiBvcHRzLmJpZmYgPT0gMiA/IDEgOiAyKTtcblx0cmV0dXJuIFtyb3csIGNvbF07XG59XG5cbi8qIFtNUy1YTFNdIDIuNS4xOTguNTcgOyBbTVMtWExTQl0gMi41Ljk3LjM5ICovXG5mdW5jdGlvbiBwYXJzZV9QdGdFcnIoYmxvYikgeyBibG9iLmwrKzsgcmV0dXJuIEJFcnJbYmxvYi5yZWFkX3NoaWZ0KDEpXTsgfVxuXG4vKiBbTVMtWExTXSAyLjUuMTk4LjY2IDsgW01TLVhMU0JdIDIuNS45Ny40OSAqL1xuZnVuY3Rpb24gcGFyc2VfUHRnSW50KGJsb2IpIHsgYmxvYi5sKys7IHJldHVybiBibG9iLnJlYWRfc2hpZnQoMik7IH1cblxuLyogW01TLVhMU10gMi41LjE5OC40MiA7IFtNUy1YTFNCXSAyLjUuOTcuMzQgKi9cbmZ1bmN0aW9uIHBhcnNlX1B0Z0Jvb2woYmxvYikgeyBibG9iLmwrKzsgcmV0dXJuIGJsb2IucmVhZF9zaGlmdCgxKSE9PTA7fVxuXG4vKiBbTVMtWExTXSAyLjUuMTk4Ljc5IDsgW01TLVhMU0JdIDIuNS45Ny42MyAqL1xuZnVuY3Rpb24gcGFyc2VfUHRnTnVtKGJsb2IpIHsgYmxvYi5sKys7IHJldHVybiBwYXJzZV9YbnVtKGJsb2IsIDgpOyB9XG5cbi8qIFtNUy1YTFNdIDIuNS4xOTguODkgOyBbTVMtWExTQl0gMi41Ljk3Ljc0ICovXG5mdW5jdGlvbiBwYXJzZV9QdGdTdHIoYmxvYiwgbGVuZ3RoLCBvcHRzKSB7IGJsb2IubCsrOyByZXR1cm4gcGFyc2VfU2hvcnRYTFVuaWNvZGVTdHJpbmcoYmxvYiwgbGVuZ3RoLTEsIG9wdHMpOyB9XG5cbi8qIFtNUy1YTFNdIDIuNS4xOTIuMTEyICsgMi41LjE5Mi4xMXszLDQsNSw2LDd9ICovXG4vKiBbTVMtWExTQl0gMi41Ljk3LjkzICsgMi41Ljk3Ljl7NCw1LDYsN30gKi9cbmZ1bmN0aW9uIHBhcnNlX1NlckFyKGJsb2IsIGJpZmYvKjpudW1iZXIqLykge1xuXHR2YXIgdmFsID0gW2Jsb2IucmVhZF9zaGlmdCgxKV07XG5cdGlmKGJpZmYgPT0gMTIpIHN3aXRjaCh2YWxbMF0pIHtcblx0XHRjYXNlIDB4MDI6IHZhbFswXSA9IDB4MDQ7IGJyZWFrOyAvKiBTZXJCb29sICovXG5cdFx0Y2FzZSAweDA0OiB2YWxbMF0gPSAweDEwOyBicmVhazsgLyogU2VyRXJyICovXG5cdFx0Y2FzZSAweDAwOiB2YWxbMF0gPSAweDAxOyBicmVhazsgLyogU2VyTnVtICovXG5cdFx0Y2FzZSAweDAxOiB2YWxbMF0gPSAweDAyOyBicmVhazsgLyogU2VyU3RyICovXG5cdH1cblx0c3dpdGNoKHZhbFswXSkge1xuXHRcdGNhc2UgMHgwNDogLyogU2VyQm9vbCAtLSBib29sZWFuICovXG5cdFx0XHR2YWxbMV0gPSBwYXJzZWJvb2woYmxvYiwgMSkgPyAnVFJVRScgOiAnRkFMU0UnO1xuXHRcdFx0aWYoYmlmZiAhPSAxMikgYmxvYi5sICs9IDc7IGJyZWFrO1xuXHRcdGNhc2UgMHgyNTogLyogYXBwZWFycyB0byBiZSBhbiBhbGlhcyAqL1xuXHRcdGNhc2UgMHgxMDogLyogU2VyRXJyIC0tIGVycm9yICovXG5cdFx0XHR2YWxbMV0gPSBCRXJyW2Jsb2JbYmxvYi5sXV07XG5cdFx0XHRibG9iLmwgKz0gKChiaWZmID09IDEyKSA/IDQgOiA4KTsgYnJlYWs7XG5cdFx0Y2FzZSAweDAwOiAvKiBTZXJOaWwgLS0gaG9uZXN0bHksIEknbSBub3Qgc3VyZSBob3cgdG8gcmVwcm9kdWNlIHRoaXMgKi9cblx0XHRcdGJsb2IubCArPSA4OyBicmVhaztcblx0XHRjYXNlIDB4MDE6IC8qIFNlck51bSAtLSBYbnVtICovXG5cdFx0XHR2YWxbMV0gPSBwYXJzZV9YbnVtKGJsb2IsIDgpOyBicmVhaztcblx0XHRjYXNlIDB4MDI6IC8qIFNlclN0ciAtLSBYTFVuaWNvZGVTdHJpbmcgKDwyNTYgY2hhcnMpICovXG5cdFx0XHR2YWxbMV0gPSBwYXJzZV9YTFVuaWNvZGVTdHJpbmcyKGJsb2IsIDAsIHtiaWZmOmJpZmYgPiAwICYmIGJpZmYgPCA4ID8gMiA6IGJpZmZ9KTsgYnJlYWs7XG5cdFx0ZGVmYXVsdDogdGhyb3cgbmV3IEVycm9yKFwiQmFkIFNlckFyOiBcIiArIHZhbFswXSk7IC8qIFVucmVhY2hhYmxlICovXG5cdH1cblx0cmV0dXJuIHZhbDtcbn1cblxuLyogW01TLVhMU10gMi41LjE5OC42MSA7IFtNUy1YTFNCXSAyLjUuOTcuNDQgKi9cbmZ1bmN0aW9uIHBhcnNlX1B0Z0V4dHJhTWVtKGJsb2IsIGNjZSwgb3B0cykge1xuXHR2YXIgY291bnQgPSBibG9iLnJlYWRfc2hpZnQoKG9wdHMuYmlmZiA9PSAxMikgPyA0IDogMik7XG5cdHZhciBvdXQvKjpBcnJheTxSYW5nZT4qLyA9IFtdO1xuXHRmb3IodmFyIGkgPSAwOyBpICE9IGNvdW50OyArK2kpIG91dC5wdXNoKCgob3B0cy5iaWZmID09IDEyKSA/IHBhcnNlX1VuY2hlY2tlZFJmWCA6IHBhcnNlX1JlZjhVKShibG9iLCA4KSk7XG5cdHJldHVybiBvdXQ7XG59XG5cbi8qIFtNUy1YTFNdIDIuNS4xOTguNTkgOyBbTVMtWExTQl0gMi41Ljk3LjQxICovXG5mdW5jdGlvbiBwYXJzZV9QdGdFeHRyYUFycmF5KGJsb2IsIGxlbmd0aCwgb3B0cykge1xuXHR2YXIgcm93cyA9IDAsIGNvbHMgPSAwO1xuXHRpZihvcHRzLmJpZmYgPT0gMTIpIHtcblx0XHRyb3dzID0gYmxvYi5yZWFkX3NoaWZ0KDQpOyAvLyBEUndcblx0XHRjb2xzID0gYmxvYi5yZWFkX3NoaWZ0KDQpOyAvLyBEQ29sXG5cdH0gZWxzZSB7XG5cdFx0Y29scyA9IDEgKyBibG9iLnJlYWRfc2hpZnQoMSk7IC8vRENvbEJ5dGVVXG5cdFx0cm93cyA9IDEgKyBibG9iLnJlYWRfc2hpZnQoMik7IC8vRFJ3XG5cdH1cblx0aWYob3B0cy5iaWZmID49IDIgJiYgb3B0cy5iaWZmIDwgOCkgeyAtLXJvd3M7IGlmKC0tY29scyA9PSAwKSBjb2xzID0gMHgxMDA7IH1cblx0Ly8gJEZsb3dJZ25vcmVcblx0Zm9yKHZhciBpID0gMCwgby8qOkFycmF5PEFycmF5PGFueT4+Ki8gPSBbXTsgaSAhPSByb3dzICYmIChvW2ldID0gW10pOyArK2kpXG5cdFx0Zm9yKHZhciBqID0gMDsgaiAhPSBjb2xzOyArK2opIG9baV1bal0gPSBwYXJzZV9TZXJBcihibG9iLCBvcHRzLmJpZmYpO1xuXHRyZXR1cm4gbztcbn1cblxuLyogW01TLVhMU10gMi41LjE5OC43NiA7IFtNUy1YTFNCXSAyLjUuOTcuNjAgKi9cbmZ1bmN0aW9uIHBhcnNlX1B0Z05hbWUoYmxvYiwgbGVuZ3RoLCBvcHRzKSB7XG5cdHZhciB0eXBlID0gKGJsb2IucmVhZF9zaGlmdCgxKSA+Pj4gNSkgJiAweDAzO1xuXHR2YXIgdyA9ICghb3B0cyB8fCAob3B0cy5iaWZmID49IDgpKSA/IDQgOiAyO1xuXHR2YXIgbmFtZWluZGV4ID0gYmxvYi5yZWFkX3NoaWZ0KHcpO1xuXHRzd2l0Y2gob3B0cy5iaWZmKSB7XG5cdFx0Y2FzZSAyOiBibG9iLmwgKz0gNTsgYnJlYWs7XG5cdFx0Y2FzZSAzOiBjYXNlIDQ6IGJsb2IubCArPSA4OyBicmVhaztcblx0XHRjYXNlIDU6IGJsb2IubCArPSAxMjsgYnJlYWs7XG5cdH1cblx0cmV0dXJuIFt0eXBlLCAwLCBuYW1laW5kZXhdO1xufVxuXG4vKiBbTVMtWExTXSAyLjUuMTk4Ljc3IDsgW01TLVhMU0JdIDIuNS45Ny42MSAqL1xuZnVuY3Rpb24gcGFyc2VfUHRnTmFtZVgoYmxvYiwgbGVuZ3RoLCBvcHRzKSB7XG5cdGlmKG9wdHMuYmlmZiA9PSA1KSByZXR1cm4gcGFyc2VfUHRnTmFtZVhfQklGRjUoYmxvYiwgbGVuZ3RoLCBvcHRzKTtcblx0dmFyIHR5cGUgPSAoYmxvYi5yZWFkX3NoaWZ0KDEpID4+PiA1KSAmIDB4MDM7XG5cdHZhciBpeHRpID0gYmxvYi5yZWFkX3NoaWZ0KDIpOyAvLyBYdGlJbmRleFxuXHR2YXIgbmFtZWluZGV4ID0gYmxvYi5yZWFkX3NoaWZ0KDQpO1xuXHRyZXR1cm4gW3R5cGUsIGl4dGksIG5hbWVpbmRleF07XG59XG5mdW5jdGlvbiBwYXJzZV9QdGdOYW1lWF9CSUZGNShibG9iLyo6OiwgbGVuZ3RoLCBvcHRzKi8pIHtcblx0dmFyIHR5cGUgPSAoYmxvYi5yZWFkX3NoaWZ0KDEpID4+PiA1KSAmIDB4MDM7XG5cdHZhciBpeHRpID0gYmxvYi5yZWFkX3NoaWZ0KDIsICdpJyk7IC8vIFh0aUluZGV4XG5cdGJsb2IubCArPSA4O1xuXHR2YXIgbmFtZWluZGV4ID0gYmxvYi5yZWFkX3NoaWZ0KDIpO1xuXHRibG9iLmwgKz0gMTI7XG5cdHJldHVybiBbdHlwZSwgaXh0aSwgbmFtZWluZGV4XTtcbn1cblxuLyogW01TLVhMU10gMi41LjE5OC43MCA7IFtNUy1YTFNCXSAyLjUuOTcuNTQgKi9cbmZ1bmN0aW9uIHBhcnNlX1B0Z01lbUFyZWEoYmxvYiwgbGVuZ3RoLCBvcHRzKSB7XG5cdHZhciB0eXBlID0gKGJsb2IucmVhZF9zaGlmdCgxKSA+Pj4gNSkgJiAweDAzO1xuXHRibG9iLmwgKz0gKG9wdHMgJiYgb3B0cy5iaWZmID09IDIgPyAzIDogNCk7XG5cdHZhciBjY2UgPSBibG9iLnJlYWRfc2hpZnQob3B0cyAmJiBvcHRzLmJpZmYgPT0gMiA/IDEgOiAyKTtcblx0cmV0dXJuIFt0eXBlLCBjY2VdO1xufVxuXG4vKiBbTVMtWExTXSAyLjUuMTk4LjcyIDsgW01TLVhMU0JdIDIuNS45Ny41NiAqL1xuZnVuY3Rpb24gcGFyc2VfUHRnTWVtRnVuYyhibG9iLCBsZW5ndGgsIG9wdHMpIHtcblx0dmFyIHR5cGUgPSAoYmxvYi5yZWFkX3NoaWZ0KDEpID4+PiA1KSAmIDB4MDM7XG5cdHZhciBjY2UgPSBibG9iLnJlYWRfc2hpZnQob3B0cyAmJiBvcHRzLmJpZmYgPT0gMiA/IDEgOiAyKTtcblx0cmV0dXJuIFt0eXBlLCBjY2VdO1xufVxuXG5cbi8qIFtNUy1YTFNdIDIuNS4xOTguODYgOyBbTVMtWExTQl0gMi41Ljk3LjY5ICovXG5mdW5jdGlvbiBwYXJzZV9QdGdSZWZFcnIoYmxvYiwgbGVuZ3RoLCBvcHRzKSB7XG5cdHZhciB0eXBlID0gKGJsb2IucmVhZF9zaGlmdCgxKSA+Pj4gNSkgJiAweDAzO1xuXHRibG9iLmwgKz0gNDtcblx0aWYob3B0cy5iaWZmIDwgOCkgYmxvYi5sLS07XG5cdGlmKG9wdHMuYmlmZiA9PSAxMikgYmxvYi5sICs9IDI7XG5cdHJldHVybiBbdHlwZV07XG59XG5cbi8qIFtNUy1YTFNdIDIuNS4xOTguODcgOyBbTVMtWExTQl0gMi41Ljk3LjcxICovXG5mdW5jdGlvbiBwYXJzZV9QdGdSZWZFcnIzZChibG9iLCBsZW5ndGgsIG9wdHMpIHtcblx0dmFyIHR5cGUgPSAoYmxvYltibG9iLmwrK10gJiAweDYwKSA+PiA1O1xuXHR2YXIgaXh0aSA9IGJsb2IucmVhZF9zaGlmdCgyKTtcblx0dmFyIHcgPSA0O1xuXHRpZihvcHRzKSBzd2l0Y2gob3B0cy5iaWZmKSB7XG5cdFx0Y2FzZSA1OiB3ID0gMTU7IGJyZWFrO1xuXHRcdGNhc2UgMTI6IHcgPSA2OyBicmVhaztcblx0fVxuXHRibG9iLmwgKz0gdztcblx0cmV0dXJuIFt0eXBlLCBpeHRpXTtcbn1cblxuLyogW01TLVhMU10gMi41LjE5OC43MSA7IFtNUy1YTFNCXSAyLjUuOTcuNTUgKi9cbnZhciBwYXJzZV9QdGdNZW1FcnIgPSBwYXJzZW5vb3A7XG4vKiBbTVMtWExTXSAyLjUuMTk4LjczICA7IFtNUy1YTFNCXSAyLjUuOTcuNTcgKi9cbnZhciBwYXJzZV9QdGdNZW1Ob01lbSA9IHBhcnNlbm9vcDtcbi8qIFtNUy1YTFNdIDIuNS4xOTguOTIgKi9cbnZhciBwYXJzZV9QdGdUYmwgPSBwYXJzZW5vb3A7XG5cbmZ1bmN0aW9uIHBhcnNlX1B0Z0VsZkxvYyhibG9iLCBsZW5ndGgsIG9wdHMpIHtcblx0YmxvYi5sICs9IDI7XG5cdHJldHVybiBbcGFyc2VfUmdjZUVsZkxvYyhibG9iLCA0LCBvcHRzKV07XG59XG5mdW5jdGlvbiBwYXJzZV9QdGdFbGZOb29wKGJsb2IvKjo6LCBsZW5ndGgsIG9wdHMqLykge1xuXHRibG9iLmwgKz0gNjtcblx0cmV0dXJuIFtdO1xufVxuLyogW01TLVhMU10gMi41LjE5OC40NiAqL1xudmFyIHBhcnNlX1B0Z0VsZkNvbCA9IHBhcnNlX1B0Z0VsZkxvYztcbi8qIFtNUy1YTFNdIDIuNS4xOTguNDcgKi9cbnZhciBwYXJzZV9QdGdFbGZDb2xTID0gcGFyc2VfUHRnRWxmTm9vcDtcbi8qIFtNUy1YTFNdIDIuNS4xOTguNDggKi9cbnZhciBwYXJzZV9QdGdFbGZDb2xTViA9IHBhcnNlX1B0Z0VsZk5vb3A7XG4vKiBbTVMtWExTXSAyLjUuMTk4LjQ5ICovXG52YXIgcGFyc2VfUHRnRWxmQ29sViA9IHBhcnNlX1B0Z0VsZkxvYztcbi8qIFtNUy1YTFNdIDIuNS4xOTguNTAgKi9cbmZ1bmN0aW9uIHBhcnNlX1B0Z0VsZkxlbChibG9iLyo6OiwgbGVuZ3RoLCBvcHRzKi8pIHtcblx0YmxvYi5sICs9IDI7XG5cdHJldHVybiBbcGFyc2V1aW50MTYoYmxvYiksIGJsb2IucmVhZF9zaGlmdCgyKSAmIDB4MDFdO1xufVxuLyogW01TLVhMU10gMi41LjE5OC41MSAqL1xudmFyIHBhcnNlX1B0Z0VsZlJhZGljYWwgPSBwYXJzZV9QdGdFbGZMb2M7XG4vKiBbTVMtWExTXSAyLjUuMTk4LjUyICovXG52YXIgcGFyc2VfUHRnRWxmUmFkaWNhbExlbCA9IHBhcnNlX1B0Z0VsZkxlbDtcbi8qIFtNUy1YTFNdIDIuNS4xOTguNTMgKi9cbnZhciBwYXJzZV9QdGdFbGZSYWRpY2FsUyA9IHBhcnNlX1B0Z0VsZk5vb3A7XG4vKiBbTVMtWExTXSAyLjUuMTk4LjU0ICovXG52YXIgcGFyc2VfUHRnRWxmUncgPSBwYXJzZV9QdGdFbGZMb2M7XG4vKiBbTVMtWExTXSAyLjUuMTk4LjU1ICovXG52YXIgcGFyc2VfUHRnRWxmUndWID0gcGFyc2VfUHRnRWxmTG9jO1xuXG4vKiBbTVMtWExTQl0gMi41Ljk3LjUyIFRPRE8gKi9cbnZhciBQdGdMaXN0UlQgPSBbXG5cdFwiRGF0YVwiLFxuXHRcIkFsbFwiLFxuXHRcIkhlYWRlcnNcIixcblx0XCI/P1wiLFxuXHRcIj9EYXRhMlwiLFxuXHRcIj8/XCIsXG5cdFwiP0RhdGFIZWFkZXJzXCIsXG5cdFwiPz9cIixcblx0XCJUb3RhbHNcIixcblx0XCI/P1wiLFxuXHRcIj8/XCIsXG5cdFwiPz9cIixcblx0XCI/RGF0YVRvdGFsc1wiLFxuXHRcIj8/XCIsXG5cdFwiPz9cIixcblx0XCI/P1wiLFxuXHRcIj9DdXJyZW50XCJcbl07XG5mdW5jdGlvbiBwYXJzZV9QdGdMaXN0KGJsb2IvKjo6LCBsZW5ndGgsIG9wdHMqLykge1xuXHRibG9iLmwgKz0gMjtcblx0dmFyIGl4dGkgPSBibG9iLnJlYWRfc2hpZnQoMik7XG5cdHZhciBmbGFncyA9IGJsb2IucmVhZF9zaGlmdCgyKTtcblx0dmFyIGlkeCA9IGJsb2IucmVhZF9zaGlmdCg0KTtcblx0dmFyIGMgPSBibG9iLnJlYWRfc2hpZnQoMik7XG5cdHZhciBDID0gYmxvYi5yZWFkX3NoaWZ0KDIpO1xuXHR2YXIgcnQgPSBQdGdMaXN0UlRbKGZsYWdzID4+IDIpICYgMHgxRl07XG5cdHJldHVybiB7aXh0aTogaXh0aSwgY29sdHlwZTooZmxhZ3MmMHgzKSwgcnQ6cnQsIGlkeDppZHgsIGM6YywgQzpDfTtcbn1cbi8qIFtNUy1YTFNdIDIuNS4xOTguOTEgOyBbTVMtWExTQl0gMi41Ljk3Ljc2ICovXG5mdW5jdGlvbiBwYXJzZV9QdGdTeE5hbWUoYmxvYi8qOjosIGxlbmd0aCwgb3B0cyovKSB7XG5cdGJsb2IubCArPSAyO1xuXHRyZXR1cm4gW2Jsb2IucmVhZF9zaGlmdCg0KV07XG59XG5cbi8qIFtYTFNdIG9sZCBzcGVjICovXG5mdW5jdGlvbiBwYXJzZV9QdGdTaGVldChibG9iLCBsZW5ndGgsIG9wdHMpIHtcblx0YmxvYi5sICs9IDU7XG5cdGJsb2IubCArPSAyO1xuXHRibG9iLmwgKz0gKG9wdHMuYmlmZiA9PSAyID8gMSA6IDQpO1xuXHRyZXR1cm4gW1wiUFRHU0hFRVRcIl07XG59XG5mdW5jdGlvbiBwYXJzZV9QdGdFbmRTaGVldChibG9iLCBsZW5ndGgsIG9wdHMpIHtcblx0YmxvYi5sICs9IChvcHRzLmJpZmYgPT0gMiA/IDQgOiA1KTtcblx0cmV0dXJuIFtcIlBUR0VORFNIRUVUXCJdO1xufVxuZnVuY3Rpb24gcGFyc2VfUHRnTWVtQXJlYU4oYmxvYi8qOjosIGxlbmd0aCwgb3B0cyovKSB7XG5cdHZhciB0eXBlID0gKGJsb2IucmVhZF9zaGlmdCgxKSA+Pj4gNSkgJiAweDAzO1xuXHR2YXIgY2NlID0gYmxvYi5yZWFkX3NoaWZ0KDIpO1xuXHRyZXR1cm4gW3R5cGUsIGNjZV07XG59XG5mdW5jdGlvbiBwYXJzZV9QdGdNZW1Ob01lbU4oYmxvYi8qOjosIGxlbmd0aCwgb3B0cyovKSB7XG5cdHZhciB0eXBlID0gKGJsb2IucmVhZF9zaGlmdCgxKSA+Pj4gNSkgJiAweDAzO1xuXHR2YXIgY2NlID0gYmxvYi5yZWFkX3NoaWZ0KDIpO1xuXHRyZXR1cm4gW3R5cGUsIGNjZV07XG59XG5mdW5jdGlvbiBwYXJzZV9QdGdBdHRyTm9vcChibG9iLyo6OiwgbGVuZ3RoLCBvcHRzKi8pIHtcblx0YmxvYi5sICs9IDQ7XG5cdHJldHVybiBbMCwgMF07XG59XG5cbi8qIFtNUy1YTFNdIDIuNS4xOTguMjUgOyBbTVMtWExTQl0gMi41Ljk3LjE2ICovXG52YXIgUHRnVHlwZXMgPSB7XG5cdC8qOjpbKi8weDAxLyo6Ol0qLzogeyBuOidQdGdFeHAnLCBmOnBhcnNlX1B0Z0V4cCB9LFxuXHQvKjo6WyovMHgwMi8qOjpdKi86IHsgbjonUHRnVGJsJywgZjpwYXJzZV9QdGdUYmwgfSxcblx0Lyo6OlsqLzB4MDMvKjo6XSovOiB7IG46J1B0Z0FkZCcsIGY6cGFyc2VyZWFkMSB9LFxuXHQvKjo6WyovMHgwNC8qOjpdKi86IHsgbjonUHRnU3ViJywgZjpwYXJzZXJlYWQxIH0sXG5cdC8qOjpbKi8weDA1Lyo6Ol0qLzogeyBuOidQdGdNdWwnLCBmOnBhcnNlcmVhZDEgfSxcblx0Lyo6OlsqLzB4MDYvKjo6XSovOiB7IG46J1B0Z0RpdicsIGY6cGFyc2VyZWFkMSB9LFxuXHQvKjo6WyovMHgwNy8qOjpdKi86IHsgbjonUHRnUG93ZXInLCBmOnBhcnNlcmVhZDEgfSxcblx0Lyo6OlsqLzB4MDgvKjo6XSovOiB7IG46J1B0Z0NvbmNhdCcsIGY6cGFyc2VyZWFkMSB9LFxuXHQvKjo6WyovMHgwOS8qOjpdKi86IHsgbjonUHRnTHQnLCBmOnBhcnNlcmVhZDEgfSxcblx0Lyo6OlsqLzB4MEEvKjo6XSovOiB7IG46J1B0Z0xlJywgZjpwYXJzZXJlYWQxIH0sXG5cdC8qOjpbKi8weDBCLyo6Ol0qLzogeyBuOidQdGdFcScsIGY6cGFyc2VyZWFkMSB9LFxuXHQvKjo6WyovMHgwQy8qOjpdKi86IHsgbjonUHRnR2UnLCBmOnBhcnNlcmVhZDEgfSxcblx0Lyo6OlsqLzB4MEQvKjo6XSovOiB7IG46J1B0Z0d0JywgZjpwYXJzZXJlYWQxIH0sXG5cdC8qOjpbKi8weDBFLyo6Ol0qLzogeyBuOidQdGdOZScsIGY6cGFyc2VyZWFkMSB9LFxuXHQvKjo6WyovMHgwRi8qOjpdKi86IHsgbjonUHRnSXNlY3QnLCBmOnBhcnNlcmVhZDEgfSxcblx0Lyo6OlsqLzB4MTAvKjo6XSovOiB7IG46J1B0Z1VuaW9uJywgZjpwYXJzZXJlYWQxIH0sXG5cdC8qOjpbKi8weDExLyo6Ol0qLzogeyBuOidQdGdSYW5nZScsIGY6cGFyc2VyZWFkMSB9LFxuXHQvKjo6WyovMHgxMi8qOjpdKi86IHsgbjonUHRnVXBsdXMnLCBmOnBhcnNlcmVhZDEgfSxcblx0Lyo6OlsqLzB4MTMvKjo6XSovOiB7IG46J1B0Z1VtaW51cycsIGY6cGFyc2VyZWFkMSB9LFxuXHQvKjo6WyovMHgxNC8qOjpdKi86IHsgbjonUHRnUGVyY2VudCcsIGY6cGFyc2VyZWFkMSB9LFxuXHQvKjo6WyovMHgxNS8qOjpdKi86IHsgbjonUHRnUGFyZW4nLCBmOnBhcnNlcmVhZDEgfSxcblx0Lyo6OlsqLzB4MTYvKjo6XSovOiB7IG46J1B0Z01pc3NBcmcnLCBmOnBhcnNlcmVhZDEgfSxcblx0Lyo6OlsqLzB4MTcvKjo6XSovOiB7IG46J1B0Z1N0cicsIGY6cGFyc2VfUHRnU3RyIH0sXG5cdC8qOjpbKi8weDFBLyo6Ol0qLzogeyBuOidQdGdTaGVldCcsIGY6cGFyc2VfUHRnU2hlZXQgfSxcblx0Lyo6OlsqLzB4MUIvKjo6XSovOiB7IG46J1B0Z0VuZFNoZWV0JywgZjpwYXJzZV9QdGdFbmRTaGVldCB9LFxuXHQvKjo6WyovMHgxQy8qOjpdKi86IHsgbjonUHRnRXJyJywgZjpwYXJzZV9QdGdFcnIgfSxcblx0Lyo6OlsqLzB4MUQvKjo6XSovOiB7IG46J1B0Z0Jvb2wnLCBmOnBhcnNlX1B0Z0Jvb2wgfSxcblx0Lyo6OlsqLzB4MUUvKjo6XSovOiB7IG46J1B0Z0ludCcsIGY6cGFyc2VfUHRnSW50IH0sXG5cdC8qOjpbKi8weDFGLyo6Ol0qLzogeyBuOidQdGdOdW0nLCBmOnBhcnNlX1B0Z051bSB9LFxuXHQvKjo6WyovMHgyMC8qOjpdKi86IHsgbjonUHRnQXJyYXknLCBmOnBhcnNlX1B0Z0FycmF5IH0sXG5cdC8qOjpbKi8weDIxLyo6Ol0qLzogeyBuOidQdGdGdW5jJywgZjpwYXJzZV9QdGdGdW5jIH0sXG5cdC8qOjpbKi8weDIyLyo6Ol0qLzogeyBuOidQdGdGdW5jVmFyJywgZjpwYXJzZV9QdGdGdW5jVmFyIH0sXG5cdC8qOjpbKi8weDIzLyo6Ol0qLzogeyBuOidQdGdOYW1lJywgZjpwYXJzZV9QdGdOYW1lIH0sXG5cdC8qOjpbKi8weDI0Lyo6Ol0qLzogeyBuOidQdGdSZWYnLCBmOnBhcnNlX1B0Z1JlZiB9LFxuXHQvKjo6WyovMHgyNS8qOjpdKi86IHsgbjonUHRnQXJlYScsIGY6cGFyc2VfUHRnQXJlYSB9LFxuXHQvKjo6WyovMHgyNi8qOjpdKi86IHsgbjonUHRnTWVtQXJlYScsIGY6cGFyc2VfUHRnTWVtQXJlYSB9LFxuXHQvKjo6WyovMHgyNy8qOjpdKi86IHsgbjonUHRnTWVtRXJyJywgZjpwYXJzZV9QdGdNZW1FcnIgfSxcblx0Lyo6OlsqLzB4MjgvKjo6XSovOiB7IG46J1B0Z01lbU5vTWVtJywgZjpwYXJzZV9QdGdNZW1Ob01lbSB9LFxuXHQvKjo6WyovMHgyOS8qOjpdKi86IHsgbjonUHRnTWVtRnVuYycsIGY6cGFyc2VfUHRnTWVtRnVuYyB9LFxuXHQvKjo6WyovMHgyQS8qOjpdKi86IHsgbjonUHRnUmVmRXJyJywgZjpwYXJzZV9QdGdSZWZFcnIgfSxcblx0Lyo6OlsqLzB4MkIvKjo6XSovOiB7IG46J1B0Z0FyZWFFcnInLCBmOnBhcnNlX1B0Z0FyZWFFcnIgfSxcblx0Lyo6OlsqLzB4MkMvKjo6XSovOiB7IG46J1B0Z1JlZk4nLCBmOnBhcnNlX1B0Z1JlZk4gfSxcblx0Lyo6OlsqLzB4MkQvKjo6XSovOiB7IG46J1B0Z0FyZWFOJywgZjpwYXJzZV9QdGdBcmVhTiB9LFxuXHQvKjo6WyovMHgyRS8qOjpdKi86IHsgbjonUHRnTWVtQXJlYU4nLCBmOnBhcnNlX1B0Z01lbUFyZWFOIH0sXG5cdC8qOjpbKi8weDJGLyo6Ol0qLzogeyBuOidQdGdNZW1Ob01lbU4nLCBmOnBhcnNlX1B0Z01lbU5vTWVtTiB9LFxuXHQvKjo6WyovMHgzOS8qOjpdKi86IHsgbjonUHRnTmFtZVgnLCBmOnBhcnNlX1B0Z05hbWVYIH0sXG5cdC8qOjpbKi8weDNBLyo6Ol0qLzogeyBuOidQdGdSZWYzZCcsIGY6cGFyc2VfUHRnUmVmM2QgfSxcblx0Lyo6OlsqLzB4M0IvKjo6XSovOiB7IG46J1B0Z0FyZWEzZCcsIGY6cGFyc2VfUHRnQXJlYTNkIH0sXG5cdC8qOjpbKi8weDNDLyo6Ol0qLzogeyBuOidQdGdSZWZFcnIzZCcsIGY6cGFyc2VfUHRnUmVmRXJyM2QgfSxcblx0Lyo6OlsqLzB4M0QvKjo6XSovOiB7IG46J1B0Z0FyZWFFcnIzZCcsIGY6cGFyc2VfUHRnQXJlYUVycjNkIH0sXG5cdC8qOjpbKi8weEZGLyo6Ol0qLzoge31cbn07XG4vKiBUaGVzZSBhcmUgZHVwbGljYXRlZCBpbiB0aGUgUHRnVHlwZXMgdGFibGUgKi9cbnZhciBQdGdEdXBlcyA9IHtcblx0Lyo6OlsqLzB4NDAvKjo6XSovOiAweDIwLCAvKjo6WyovMHg2MC8qOjpdKi86IDB4MjAsXG5cdC8qOjpbKi8weDQxLyo6Ol0qLzogMHgyMSwgLyo6OlsqLzB4NjEvKjo6XSovOiAweDIxLFxuXHQvKjo6WyovMHg0Mi8qOjpdKi86IDB4MjIsIC8qOjpbKi8weDYyLyo6Ol0qLzogMHgyMixcblx0Lyo6OlsqLzB4NDMvKjo6XSovOiAweDIzLCAvKjo6WyovMHg2My8qOjpdKi86IDB4MjMsXG5cdC8qOjpbKi8weDQ0Lyo6Ol0qLzogMHgyNCwgLyo6OlsqLzB4NjQvKjo6XSovOiAweDI0LFxuXHQvKjo6WyovMHg0NS8qOjpdKi86IDB4MjUsIC8qOjpbKi8weDY1Lyo6Ol0qLzogMHgyNSxcblx0Lyo6OlsqLzB4NDYvKjo6XSovOiAweDI2LCAvKjo6WyovMHg2Ni8qOjpdKi86IDB4MjYsXG5cdC8qOjpbKi8weDQ3Lyo6Ol0qLzogMHgyNywgLyo6OlsqLzB4NjcvKjo6XSovOiAweDI3LFxuXHQvKjo6WyovMHg0OC8qOjpdKi86IDB4MjgsIC8qOjpbKi8weDY4Lyo6Ol0qLzogMHgyOCxcblx0Lyo6OlsqLzB4NDkvKjo6XSovOiAweDI5LCAvKjo6WyovMHg2OS8qOjpdKi86IDB4MjksXG5cdC8qOjpbKi8weDRBLyo6Ol0qLzogMHgyQSwgLyo6OlsqLzB4NkEvKjo6XSovOiAweDJBLFxuXHQvKjo6WyovMHg0Qi8qOjpdKi86IDB4MkIsIC8qOjpbKi8weDZCLyo6Ol0qLzogMHgyQixcblx0Lyo6OlsqLzB4NEMvKjo6XSovOiAweDJDLCAvKjo6WyovMHg2Qy8qOjpdKi86IDB4MkMsXG5cdC8qOjpbKi8weDRELyo6Ol0qLzogMHgyRCwgLyo6OlsqLzB4NkQvKjo6XSovOiAweDJELFxuXHQvKjo6WyovMHg0RS8qOjpdKi86IDB4MkUsIC8qOjpbKi8weDZFLyo6Ol0qLzogMHgyRSxcblx0Lyo6OlsqLzB4NEYvKjo6XSovOiAweDJGLCAvKjo6WyovMHg2Ri8qOjpdKi86IDB4MkYsXG5cdC8qOjpbKi8weDU4Lyo6Ol0qLzogMHgyMiwgLyo6OlsqLzB4NzgvKjo6XSovOiAweDIyLFxuXHQvKjo6WyovMHg1OS8qOjpdKi86IDB4MzksIC8qOjpbKi8weDc5Lyo6Ol0qLzogMHgzOSxcblx0Lyo6OlsqLzB4NUEvKjo6XSovOiAweDNBLCAvKjo6WyovMHg3QS8qOjpdKi86IDB4M0EsXG5cdC8qOjpbKi8weDVCLyo6Ol0qLzogMHgzQiwgLyo6OlsqLzB4N0IvKjo6XSovOiAweDNCLFxuXHQvKjo6WyovMHg1Qy8qOjpdKi86IDB4M0MsIC8qOjpbKi8weDdDLyo6Ol0qLzogMHgzQyxcblx0Lyo6OlsqLzB4NUQvKjo6XSovOiAweDNELCAvKjo6WyovMHg3RC8qOjpdKi86IDB4M0Rcbn07XG5cbnZhciBQdGcxOCA9IHtcblx0Lyo6OlsqLzB4MDEvKjo6XSovOiB7IG46J1B0Z0VsZkxlbCcsIGY6cGFyc2VfUHRnRWxmTGVsIH0sXG5cdC8qOjpbKi8weDAyLyo6Ol0qLzogeyBuOidQdGdFbGZSdycsIGY6cGFyc2VfUHRnRWxmUncgfSxcblx0Lyo6OlsqLzB4MDMvKjo6XSovOiB7IG46J1B0Z0VsZkNvbCcsIGY6cGFyc2VfUHRnRWxmQ29sIH0sXG5cdC8qOjpbKi8weDA2Lyo6Ol0qLzogeyBuOidQdGdFbGZSd1YnLCBmOnBhcnNlX1B0Z0VsZlJ3ViB9LFxuXHQvKjo6WyovMHgwNy8qOjpdKi86IHsgbjonUHRnRWxmQ29sVicsIGY6cGFyc2VfUHRnRWxmQ29sViB9LFxuXHQvKjo6WyovMHgwQS8qOjpdKi86IHsgbjonUHRnRWxmUmFkaWNhbCcsIGY6cGFyc2VfUHRnRWxmUmFkaWNhbCB9LFxuXHQvKjo6WyovMHgwQi8qOjpdKi86IHsgbjonUHRnRWxmUmFkaWNhbFMnLCBmOnBhcnNlX1B0Z0VsZlJhZGljYWxTIH0sXG5cdC8qOjpbKi8weDBELyo6Ol0qLzogeyBuOidQdGdFbGZDb2xTJywgZjpwYXJzZV9QdGdFbGZDb2xTIH0sXG5cdC8qOjpbKi8weDBGLyo6Ol0qLzogeyBuOidQdGdFbGZDb2xTVicsIGY6cGFyc2VfUHRnRWxmQ29sU1YgfSxcblx0Lyo6OlsqLzB4MTAvKjo6XSovOiB7IG46J1B0Z0VsZlJhZGljYWxMZWwnLCBmOnBhcnNlX1B0Z0VsZlJhZGljYWxMZWwgfSxcblx0Lyo6OlsqLzB4MTkvKjo6XSovOiB7IG46J1B0Z0xpc3QnLCBmOnBhcnNlX1B0Z0xpc3QgfSxcblx0Lyo6OlsqLzB4MUQvKjo6XSovOiB7IG46J1B0Z1N4TmFtZScsIGY6cGFyc2VfUHRnU3hOYW1lIH0sXG5cdC8qOjpbKi8weEZGLyo6Ol0qLzoge31cbn07XG52YXIgUHRnMTkgPSB7XG5cdC8qOjpbKi8weDAwLyo6Ol0qLzogeyBuOidQdGdBdHRyTm9vcCcsIGY6cGFyc2VfUHRnQXR0ck5vb3AgfSxcblx0Lyo6OlsqLzB4MDEvKjo6XSovOiB7IG46J1B0Z0F0dHJTZW1pJywgZjpwYXJzZV9QdGdBdHRyU2VtaSB9LFxuXHQvKjo6WyovMHgwMi8qOjpdKi86IHsgbjonUHRnQXR0cklmJywgZjpwYXJzZV9QdGdBdHRySWYgfSxcblx0Lyo6OlsqLzB4MDQvKjo6XSovOiB7IG46J1B0Z0F0dHJDaG9vc2UnLCBmOnBhcnNlX1B0Z0F0dHJDaG9vc2UgfSxcblx0Lyo6OlsqLzB4MDgvKjo6XSovOiB7IG46J1B0Z0F0dHJHb3RvJywgZjpwYXJzZV9QdGdBdHRyR290byB9LFxuXHQvKjo6WyovMHgxMC8qOjpdKi86IHsgbjonUHRnQXR0clN1bScsIGY6cGFyc2VfUHRnQXR0clN1bSB9LFxuXHQvKjo6WyovMHgyMC8qOjpdKi86IHsgbjonUHRnQXR0ckJheGNlbCcsIGY6cGFyc2VfUHRnQXR0ckJheGNlbCB9LFxuXHQvKjo6WyovMHgyMS8qOjpdKi86IHsgbjonUHRnQXR0ckJheGNlbCcsIGY6cGFyc2VfUHRnQXR0ckJheGNlbCB9LFxuXHQvKjo6WyovMHg0MC8qOjpdKi86IHsgbjonUHRnQXR0clNwYWNlJywgZjpwYXJzZV9QdGdBdHRyU3BhY2UgfSxcblx0Lyo6OlsqLzB4NDEvKjo6XSovOiB7IG46J1B0Z0F0dHJTcGFjZVNlbWknLCBmOnBhcnNlX1B0Z0F0dHJTcGFjZVNlbWkgfSxcblx0Lyo6OlsqLzB4ODAvKjo6XSovOiB7IG46J1B0Z0F0dHJJZkVycm9yJywgZjpwYXJzZV9QdGdBdHRySWZFcnJvciB9LFxuXHQvKjo6WyovMHhGRi8qOjpdKi86IHt9XG59O1xuXG4vKiBbTVMtWExTXSAyLjUuMTk4LjEwMyA7IFtNUy1YTFNCXSAyLjUuOTcuODcgKi9cbmZ1bmN0aW9uIHBhcnNlX1JnYkV4dHJhKGJsb2IsIGxlbmd0aCwgcmdjZSwgb3B0cykge1xuXHRpZihvcHRzLmJpZmYgPCA4KSByZXR1cm4gcGFyc2Vub29wKGJsb2IsIGxlbmd0aCk7XG5cdHZhciB0YXJnZXQgPSBibG9iLmwgKyBsZW5ndGg7XG5cdHZhciBvID0gW107XG5cdGZvcih2YXIgaSA9IDA7IGkgIT09IHJnY2UubGVuZ3RoOyArK2kpIHtcblx0XHRzd2l0Y2gocmdjZVtpXVswXSkge1xuXHRcdFx0Y2FzZSAnUHRnQXJyYXknOiAvKiBQdGdBcnJheSAtPiBQdGdFeHRyYUFycmF5ICovXG5cdFx0XHRcdHJnY2VbaV1bMV0gPSBwYXJzZV9QdGdFeHRyYUFycmF5KGJsb2IsIDAsIG9wdHMpO1xuXHRcdFx0XHRvLnB1c2gocmdjZVtpXVsxXSk7XG5cdFx0XHRcdGJyZWFrO1xuXHRcdFx0Y2FzZSAnUHRnTWVtQXJlYSc6IC8qIFB0Z01lbUFyZWEgLT4gUHRnRXh0cmFNZW0gKi9cblx0XHRcdFx0cmdjZVtpXVsyXSA9IHBhcnNlX1B0Z0V4dHJhTWVtKGJsb2IsIHJnY2VbaV1bMV0sIG9wdHMpO1xuXHRcdFx0XHRvLnB1c2gocmdjZVtpXVsyXSk7XG5cdFx0XHRcdGJyZWFrO1xuXHRcdFx0Y2FzZSAnUHRnRXhwJzogLyogUHRnRXhwIC0+IFB0Z0V4dHJhQ29sICovXG5cdFx0XHRcdGlmKG9wdHMgJiYgb3B0cy5iaWZmID09IDEyKSB7XG5cdFx0XHRcdFx0cmdjZVtpXVsxXVsxXSA9IGJsb2IucmVhZF9zaGlmdCg0KTtcblx0XHRcdFx0XHRvLnB1c2gocmdjZVtpXVsxXSk7XG5cdFx0XHRcdH0gYnJlYWs7XG5cdFx0XHRjYXNlICdQdGdMaXN0JzogLyogVE9ETzogUHRnTGlzdCAtPiBQdGdFeHRyYUxpc3QgKi9cblx0XHRcdGNhc2UgJ1B0Z0VsZlJhZGljYWxTJzogLyogVE9ETzogUHRnRWxmUmFkaWNhbFMgLT4gUHRnRXh0cmFFbGYgKi9cblx0XHRcdGNhc2UgJ1B0Z0VsZkNvbFMnOiAvKiBUT0RPOiBQdGdFbGZDb2xTIC0+IFB0Z0V4dHJhRWxmICovXG5cdFx0XHRjYXNlICdQdGdFbGZDb2xTVic6IC8qIFRPRE86IFB0Z0VsZkNvbFNWIC0+IFB0Z0V4dHJhRWxmICovXG5cdFx0XHRcdHRocm93IFwiVW5zdXBwb3J0ZWQgXCIgKyByZ2NlW2ldWzBdO1xuXHRcdFx0ZGVmYXVsdDogYnJlYWs7XG5cdFx0fVxuXHR9XG5cdGxlbmd0aCA9IHRhcmdldCAtIGJsb2IubDtcblx0Lyogbm90ZTogdGhpcyBpcyB0ZWNobmljYWxseSBhbiBlcnJvciBidXQgRXhjZWwgZGlzcmVnYXJkcyAqL1xuXHQvL2lmKHRhcmdldCAhPT0gYmxvYi5sICYmIGJsb2IubCAhPT0gdGFyZ2V0IC0gbGVuZ3RoKSB0aHJvdyBuZXcgRXJyb3IodGFyZ2V0ICsgXCIgIT0gXCIgKyBibG9iLmwpO1xuXHRpZihsZW5ndGggIT09IDApIG8ucHVzaChwYXJzZW5vb3AoYmxvYiwgbGVuZ3RoKSk7XG5cdHJldHVybiBvO1xufVxuXG4vKiBbTVMtWExTXSAyLjUuMTk4LjEwNCA7IFtNUy1YTFNCXSAyLjUuOTcuODggKi9cbmZ1bmN0aW9uIHBhcnNlX1JnY2UoYmxvYiwgbGVuZ3RoLCBvcHRzKSB7XG5cdHZhciB0YXJnZXQgPSBibG9iLmwgKyBsZW5ndGg7XG5cdHZhciBSLCBpZCwgcHRncyA9IFtdO1xuXHR3aGlsZSh0YXJnZXQgIT0gYmxvYi5sKSB7XG5cdFx0bGVuZ3RoID0gdGFyZ2V0IC0gYmxvYi5sO1xuXHRcdGlkID0gYmxvYltibG9iLmxdO1xuXHRcdFIgPSBQdGdUeXBlc1tpZF0gfHwgUHRnVHlwZXNbUHRnRHVwZXNbaWRdXTtcblx0XHRpZihpZCA9PT0gMHgxOCB8fCBpZCA9PT0gMHgxOSkgUiA9IChpZCA9PT0gMHgxOCA/IFB0ZzE4IDogUHRnMTkpW2Jsb2JbYmxvYi5sICsgMV1dO1xuXHRcdGlmKCFSIHx8ICFSLmYpIHsgLypwdGdzLnB1c2gqLyhwYXJzZW5vb3AoYmxvYiwgbGVuZ3RoKSk7IH1cblx0XHRlbHNlIHsgcHRncy5wdXNoKFtSLm4sIFIuZihibG9iLCBsZW5ndGgsIG9wdHMpXSk7IH1cblx0fVxuXHRyZXR1cm4gcHRncztcbn1cblxuZnVuY3Rpb24gc3RyaW5naWZ5X2FycmF5KGYvKjpBcnJheTxBcnJheTxzdHJpbmc+PiovKS8qOnN0cmluZyovIHtcblx0dmFyIG8vKjpBcnJheTxzdHJpbmc+Ki8gPSBbXTtcblx0Zm9yKHZhciBpID0gMDsgaSA8IGYubGVuZ3RoOyArK2kpIHtcblx0XHR2YXIgeCA9IGZbaV0sIHIvKjpBcnJheTxzdHJpbmc+Ki8gPSBbXTtcblx0XHRmb3IodmFyIGogPSAwOyBqIDwgeC5sZW5ndGg7ICsraikge1xuXHRcdFx0dmFyIHkgPSB4W2pdO1xuXHRcdFx0aWYoeSkgc3dpdGNoKHlbMF0pIHtcblx0XHRcdFx0Ly8gVE9ETzogaGFuZGxlIGVtYmVkZGVkIHF1b3Rlc1xuXHRcdFx0XHRjYXNlIDB4MDI6XG5cdFx0XHRcdFx0Lyo6OiBpZih0eXBlb2YgeVsxXSAhPSAnc3RyaW5nJykgdGhyb3cgXCJ1bnJlYWNoYWJsZVwiOyAqL1xuXHRcdFx0XHRcdHIucHVzaCgnXCInICsgeVsxXS5yZXBsYWNlKC9cIi9nLCdcIlwiJykgKyAnXCInKTsgYnJlYWs7XG5cdFx0XHRcdGRlZmF1bHQ6IHIucHVzaCh5WzFdKTtcblx0XHRcdH0gZWxzZSByLnB1c2goXCJcIik7XG5cdFx0fVxuXHRcdG8ucHVzaChyLmpvaW4oXCIsXCIpKTtcblx0fVxuXHRyZXR1cm4gby5qb2luKFwiO1wiKTtcbn1cblxuLyogW01TLVhMU10gMi4yLjIgOyBbTVMtWExTQl0gMi4yLjIgVE9ETyAqL1xudmFyIFB0Z0Jpbk9wID0ge1xuXHRQdGdBZGQ6IFwiK1wiLFxuXHRQdGdDb25jYXQ6IFwiJlwiLFxuXHRQdGdEaXY6IFwiL1wiLFxuXHRQdGdFcTogXCI9XCIsXG5cdFB0Z0dlOiBcIj49XCIsXG5cdFB0Z0d0OiBcIj5cIixcblx0UHRnTGU6IFwiPD1cIixcblx0UHRnTHQ6IFwiPFwiLFxuXHRQdGdNdWw6IFwiKlwiLFxuXHRQdGdOZTogXCI8PlwiLFxuXHRQdGdQb3dlcjogXCJeXCIsXG5cdFB0Z1N1YjogXCItXCJcbn07XG5cbi8vIExpc3Qgb2YgaW52YWxpZCBjaGFyYWN0ZXJzIG5lZWRzIHRvIGJlIHRlc3RlZCBmdXJ0aGVyXG5mdW5jdGlvbiBmb3JtdWxhX3F1b3RlX3NoZWV0X25hbWUoc25hbWUvKjpzdHJpbmcqLywgb3B0cykvKjpzdHJpbmcqLyB7XG5cdGlmKCFzbmFtZSAmJiAhKG9wdHMgJiYgb3B0cy5iaWZmIDw9IDUgJiYgb3B0cy5iaWZmID49IDIpKSB0aHJvdyBuZXcgRXJyb3IoXCJlbXB0eSBzaGVldCBuYW1lXCIpO1xuXHRpZiAoL1teXFx3XFx1NEUwMC1cXHU5RkZGXFx1MzA0MC1cXHUzMEZGXS8udGVzdChzbmFtZSkpIHJldHVybiBcIidcIiArIHNuYW1lICsgXCInXCI7XG5cdHJldHVybiBzbmFtZTtcbn1cbmZ1bmN0aW9uIGdldF9peHRpX3JhdyhzdXBib29rcywgaXh0aS8qOm51bWJlciovLCBvcHRzKS8qOnN0cmluZyovIHtcblx0aWYoIXN1cGJvb2tzKSByZXR1cm4gXCJTSDMzVEpTRVJSMFwiO1xuXHRpZihvcHRzLmJpZmYgPiA4ICYmICghc3VwYm9va3MuWFRJIHx8ICFzdXBib29rcy5YVElbaXh0aV0pKSByZXR1cm4gc3VwYm9va3MuU2hlZXROYW1lc1tpeHRpXTtcblx0aWYoIXN1cGJvb2tzLlhUSSkgcmV0dXJuIFwiU0gzM1RKU0VSUjZcIjtcblx0dmFyIFhUSSA9IHN1cGJvb2tzLlhUSVtpeHRpXTtcblx0aWYob3B0cy5iaWZmIDwgOCkge1xuXHRcdGlmKGl4dGkgPiAxMDAwMCkgaXh0aS09IDY1NTM2O1xuXHRcdGlmKGl4dGkgPCAwKSBpeHRpID0gLWl4dGk7XG5cdFx0cmV0dXJuIGl4dGkgPT0gMCA/IFwiXCIgOiBzdXBib29rcy5YVElbaXh0aSAtIDFdO1xuXHR9XG5cdGlmKCFYVEkpIHJldHVybiBcIlNIMzNUSlNFUlIxXCI7XG5cdHZhciBvID0gXCJcIjtcblx0aWYob3B0cy5iaWZmID4gOCkgc3dpdGNoKHN1cGJvb2tzW1hUSVswXV1bMF0pIHtcblx0XHRjYXNlIDB4MDE2NTogLyogJ0JydFN1cFNlbGYnICovXG5cdFx0XHRvID0gWFRJWzFdID09IC0xID8gXCIjUkVGXCIgOiBzdXBib29rcy5TaGVldE5hbWVzW1hUSVsxXV07XG5cdFx0XHRyZXR1cm4gWFRJWzFdID09IFhUSVsyXSA/IG8gOiBvICsgXCI6XCIgKyBzdXBib29rcy5TaGVldE5hbWVzW1hUSVsyXV07XG5cdFx0Y2FzZSAweDAxNjY6IC8qICdCcnRTdXBTYW1lJyAqL1xuXHRcdFx0aWYob3B0cy5TSUQgIT0gbnVsbCkgcmV0dXJuIHN1cGJvb2tzLlNoZWV0TmFtZXNbb3B0cy5TSURdO1xuXHRcdFx0cmV0dXJuIFwiU0gzM1RKU1NBTUVcIiArIHN1cGJvb2tzW1hUSVswXV1bMF07XG5cdFx0Y2FzZSAweDAxNjM6IC8qICdCcnRTdXBCb29rU3JjJyAqL1xuXHRcdFx0LyogZmFsbHMgdGhyb3VnaCAqL1xuXHRcdGRlZmF1bHQ6IHJldHVybiBcIlNIMzNUSlNTUkNcIiArIHN1cGJvb2tzW1hUSVswXV1bMF07XG5cdH1cblx0c3dpdGNoKHN1cGJvb2tzW1hUSVswXV1bMF1bMF0pIHtcblx0XHRjYXNlIDB4MDQwMTpcblx0XHRcdG8gPSBYVElbMV0gPT0gLTEgPyBcIiNSRUZcIiA6IChzdXBib29rcy5TaGVldE5hbWVzW1hUSVsxXV0gfHwgXCJTSDMzVEpTRVJSM1wiKTtcblx0XHRcdHJldHVybiBYVElbMV0gPT0gWFRJWzJdID8gbyA6IG8gKyBcIjpcIiArIHN1cGJvb2tzLlNoZWV0TmFtZXNbWFRJWzJdXTtcblx0XHRjYXNlIDB4M0EwMTogcmV0dXJuIHN1cGJvb2tzW1hUSVswXV0uc2xpY2UoMSkubWFwKGZ1bmN0aW9uKG5hbWUpIHsgcmV0dXJuIG5hbWUuTmFtZTsgfSkuam9pbihcIjs7XCIpOyAvL3JldHVybiBcIlNIMzNUSlNFUlI4XCI7XG5cdFx0ZGVmYXVsdDpcblx0XHRcdGlmKCFzdXBib29rc1tYVElbMF1dWzBdWzNdKSByZXR1cm4gXCJTSDMzVEpTRVJSMlwiO1xuXHRcdFx0byA9IFhUSVsxXSA9PSAtMSA/IFwiI1JFRlwiIDogKHN1cGJvb2tzW1hUSVswXV1bMF1bM11bWFRJWzFdXSB8fCBcIlNIMzNUSlNFUlI0XCIpO1xuXHRcdFx0cmV0dXJuIFhUSVsxXSA9PSBYVElbMl0gPyBvIDogbyArIFwiOlwiICsgc3VwYm9va3NbWFRJWzBdXVswXVszXVtYVElbMl1dO1xuXHR9XG59XG5mdW5jdGlvbiBnZXRfaXh0aShzdXBib29rcywgaXh0aS8qOm51bWJlciovLCBvcHRzKS8qOnN0cmluZyovIHtcblx0dmFyIGl4dGlyYXcgPSBnZXRfaXh0aV9yYXcoc3VwYm9va3MsIGl4dGksIG9wdHMpO1xuXHRyZXR1cm4gaXh0aXJhdyA9PSBcIiNSRUZcIiA/IGl4dGlyYXcgOiBmb3JtdWxhX3F1b3RlX3NoZWV0X25hbWUoaXh0aXJhdywgb3B0cyk7XG59XG5mdW5jdGlvbiBzdHJpbmdpZnlfZm9ybXVsYShmb3JtdWxhLypBcnJheTxhbnk+Ki8sIHJhbmdlLCBjZWxsLyo6YW55Ki8sIHN1cGJvb2tzLCBvcHRzKS8qOnN0cmluZyovIHtcblx0dmFyIGJpZmYgPSAob3B0cyAmJiBvcHRzLmJpZmYpIHx8IDg7XG5cdHZhciBfcmFuZ2UgPSAvKnJhbmdlICE9IG51bGwgPyByYW5nZSA6Ki8ge3M6e2M6MCwgcjowfSxlOntjOjAsIHI6MH19O1xuXHR2YXIgc3RhY2svKjpBcnJheTxzdHJpbmc+Ki8gPSBbXSwgZTEsIGUyLCAvKjo6dHlwZSwqLyBjLyo6Q2VsbEFkZHJlc3MqLywgaXh0aT0wLCBuYW1laWR4PTAsIHIsIHNuYW1lPVwiXCI7XG5cdGlmKCFmb3JtdWxhWzBdIHx8ICFmb3JtdWxhWzBdWzBdKSByZXR1cm4gXCJcIjtcblx0dmFyIGxhc3Rfc3AgPSAtMSwgc3AgPSBcIlwiO1xuXHRmb3IodmFyIGZmID0gMCwgZmZsZW4gPSBmb3JtdWxhWzBdLmxlbmd0aDsgZmYgPCBmZmxlbjsgKytmZikge1xuXHRcdHZhciBmID0gZm9ybXVsYVswXVtmZl07XG5cdFx0c3dpdGNoKGZbMF0pIHtcblx0XHRcdGNhc2UgJ1B0Z1VtaW51cyc6IC8qIFtNUy1YTFNdIDIuNS4xOTguOTMgKi9cblx0XHRcdFx0c3RhY2sucHVzaChcIi1cIiArIHN0YWNrLnBvcCgpKTsgYnJlYWs7XG5cdFx0XHRjYXNlICdQdGdVcGx1cyc6IC8qIFtNUy1YTFNdIDIuNS4xOTguOTUgKi9cblx0XHRcdFx0c3RhY2sucHVzaChcIitcIiArIHN0YWNrLnBvcCgpKTsgYnJlYWs7XG5cdFx0XHRjYXNlICdQdGdQZXJjZW50JzogLyogW01TLVhMU10gMi41LjE5OC44MSAqL1xuXHRcdFx0XHRzdGFjay5wdXNoKHN0YWNrLnBvcCgpICsgXCIlXCIpOyBicmVhaztcblxuXHRcdFx0Y2FzZSAnUHRnQWRkJzogICAgLyogW01TLVhMU10gMi41LjE5OC4yNiAqL1xuXHRcdFx0Y2FzZSAnUHRnQ29uY2F0JzogLyogW01TLVhMU10gMi41LjE5OC40MyAqL1xuXHRcdFx0Y2FzZSAnUHRnRGl2JzogICAgLyogW01TLVhMU10gMi41LjE5OC40NSAqL1xuXHRcdFx0Y2FzZSAnUHRnRXEnOiAgICAgLyogW01TLVhMU10gMi41LjE5OC41NiAqL1xuXHRcdFx0Y2FzZSAnUHRnR2UnOiAgICAgLyogW01TLVhMU10gMi41LjE5OC42NCAqL1xuXHRcdFx0Y2FzZSAnUHRnR3QnOiAgICAgLyogW01TLVhMU10gMi41LjE5OC42NSAqL1xuXHRcdFx0Y2FzZSAnUHRnTGUnOiAgICAgLyogW01TLVhMU10gMi41LjE5OC42OCAqL1xuXHRcdFx0Y2FzZSAnUHRnTHQnOiAgICAgLyogW01TLVhMU10gMi41LjE5OC42OSAqL1xuXHRcdFx0Y2FzZSAnUHRnTXVsJzogICAgLyogW01TLVhMU10gMi41LjE5OC43NSAqL1xuXHRcdFx0Y2FzZSAnUHRnTmUnOiAgICAgLyogW01TLVhMU10gMi41LjE5OC43OCAqL1xuXHRcdFx0Y2FzZSAnUHRnUG93ZXInOiAgLyogW01TLVhMU10gMi41LjE5OC44MiAqL1xuXHRcdFx0Y2FzZSAnUHRnU3ViJzogICAgLyogW01TLVhMU10gMi41LjE5OC45MCAqL1xuXHRcdFx0XHRlMSA9IHN0YWNrLnBvcCgpOyBlMiA9IHN0YWNrLnBvcCgpO1xuXHRcdFx0XHRpZihsYXN0X3NwID49IDApIHtcblx0XHRcdFx0XHRzd2l0Y2goZm9ybXVsYVswXVtsYXN0X3NwXVsxXVswXSkge1xuXHRcdFx0XHRcdFx0Y2FzZSAwOlxuXHRcdFx0XHRcdFx0XHQvLyAkRmxvd0lnbm9yZVxuXHRcdFx0XHRcdFx0XHRzcCA9IGZpbGwoXCIgXCIsIGZvcm11bGFbMF1bbGFzdF9zcF1bMV1bMV0pOyBicmVhaztcblx0XHRcdFx0XHRcdGNhc2UgMTpcblx0XHRcdFx0XHRcdFx0Ly8gJEZsb3dJZ25vcmVcblx0XHRcdFx0XHRcdFx0c3AgPSBmaWxsKFwiXFxyXCIsIGZvcm11bGFbMF1bbGFzdF9zcF1bMV1bMV0pOyBicmVhaztcblx0XHRcdFx0XHRcdGRlZmF1bHQ6XG5cdFx0XHRcdFx0XHRcdHNwID0gXCJcIjtcblx0XHRcdFx0XHRcdFx0Ly8gJEZsb3dJZ25vcmVcblx0XHRcdFx0XHRcdFx0aWYob3B0cy5XVEYpIHRocm93IG5ldyBFcnJvcihcIlVuZXhwZWN0ZWQgUHRnQXR0clNwYWNlVHlwZSBcIiArIGZvcm11bGFbMF1bbGFzdF9zcF1bMV1bMF0pO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0XHRlMiA9IGUyICsgc3A7XG5cdFx0XHRcdFx0bGFzdF9zcCA9IC0xO1xuXHRcdFx0XHR9XG5cdFx0XHRcdHN0YWNrLnB1c2goZTIrUHRnQmluT3BbZlswXV0rZTEpO1xuXHRcdFx0XHRicmVhaztcblxuXHRcdFx0Y2FzZSAnUHRnSXNlY3QnOiAvKiBbTVMtWExTXSAyLjUuMTk4LjY3ICovXG5cdFx0XHRcdGUxID0gc3RhY2sucG9wKCk7IGUyID0gc3RhY2sucG9wKCk7XG5cdFx0XHRcdHN0YWNrLnB1c2goZTIrXCIgXCIrZTEpO1xuXHRcdFx0XHRicmVhaztcblx0XHRcdGNhc2UgJ1B0Z1VuaW9uJzogLyogW01TLVhMU10gMi41LjE5OC45NCAqL1xuXHRcdFx0XHRlMSA9IHN0YWNrLnBvcCgpOyBlMiA9IHN0YWNrLnBvcCgpO1xuXHRcdFx0XHRzdGFjay5wdXNoKGUyK1wiLFwiK2UxKTtcblx0XHRcdFx0YnJlYWs7XG5cdFx0XHRjYXNlICdQdGdSYW5nZSc6IC8qIFtNUy1YTFNdIDIuNS4xOTguODMgKi9cblx0XHRcdFx0ZTEgPSBzdGFjay5wb3AoKTsgZTIgPSBzdGFjay5wb3AoKTtcblx0XHRcdFx0c3RhY2sucHVzaChlMitcIjpcIitlMSk7XG5cdFx0XHRcdGJyZWFrO1xuXG5cdFx0XHRjYXNlICdQdGdBdHRyQ2hvb3NlJzogLyogW01TLVhMU10gMi41LjE5OC4zNCAqL1xuXHRcdFx0XHRicmVhaztcblx0XHRcdGNhc2UgJ1B0Z0F0dHJHb3RvJzogLyogW01TLVhMU10gMi41LjE5OC4zNSAqL1xuXHRcdFx0XHRicmVhaztcblx0XHRcdGNhc2UgJ1B0Z0F0dHJJZic6IC8qIFtNUy1YTFNdIDIuNS4xOTguMzYgKi9cblx0XHRcdFx0YnJlYWs7XG5cdFx0XHRjYXNlICdQdGdBdHRySWZFcnJvcic6IC8qIFtNUy1YTFNCXSAyLjUuOTcuMjggKi9cblx0XHRcdFx0YnJlYWs7XG5cblxuXHRcdFx0Y2FzZSAnUHRnUmVmJzogLyogW01TLVhMU10gMi41LjE5OC44NCAqL1xuXHRcdFx0XHQvKjo6dHlwZSA9IGZbMV1bMF07ICovYyA9IHNoaWZ0X2NlbGxfeGxzKChmWzFdWzFdLyo6YW55Ki8pLCBfcmFuZ2UsIG9wdHMpO1xuXHRcdFx0XHRzdGFjay5wdXNoKGVuY29kZV9jZWxsX3hscyhjLCBiaWZmKSk7XG5cdFx0XHRcdGJyZWFrO1xuXHRcdFx0Y2FzZSAnUHRnUmVmTic6IC8qIFtNUy1YTFNdIDIuNS4xOTguODggKi9cblx0XHRcdFx0Lyo6OnR5cGUgPSBmWzFdWzBdOyAqL2MgPSBjZWxsID8gc2hpZnRfY2VsbF94bHMoKGZbMV1bMV0vKjphbnkqLyksIGNlbGwsIG9wdHMpIDogKGZbMV1bMV0vKjphbnkqLyk7XG5cdFx0XHRcdHN0YWNrLnB1c2goZW5jb2RlX2NlbGxfeGxzKGMsIGJpZmYpKTtcblx0XHRcdFx0YnJlYWs7XG5cdFx0XHRjYXNlICdQdGdSZWYzZCc6IC8qIFtNUy1YTFNdIDIuNS4xOTguODUgKi9cblx0XHRcdFx0Lyo6OnR5cGUgPSBmWzFdWzBdOyAqL2l4dGkgPSAvKjo6TnVtYmVyKCovZlsxXVsxXS8qOjopKi87IGMgPSBzaGlmdF9jZWxsX3hscygoZlsxXVsyXS8qOmFueSovKSwgX3JhbmdlLCBvcHRzKTtcblx0XHRcdFx0c25hbWUgPSBnZXRfaXh0aShzdXBib29rcywgaXh0aSwgb3B0cyk7XG5cdFx0XHRcdHZhciB3ID0gc25hbWU7IC8qIElFOSBmYWlscyBvbiBkZWZpbmVkIG5hbWVzICovIC8vIGVzbGludC1kaXNhYmxlLWxpbmUgbm8tdW51c2VkLXZhcnNcblx0XHRcdFx0c3RhY2sucHVzaChzbmFtZSArIFwiIVwiICsgZW5jb2RlX2NlbGxfeGxzKGMsIGJpZmYpKTtcblx0XHRcdFx0YnJlYWs7XG5cblx0XHRcdGNhc2UgJ1B0Z0Z1bmMnOiAvKiBbTVMtWExTXSAyLjUuMTk4LjYyICovXG5cdFx0XHRjYXNlICdQdGdGdW5jVmFyJzogLyogW01TLVhMU10gMi41LjE5OC42MyAqL1xuXHRcdFx0XHQvKiBmWzFdID0gW2FyZ2MsIGZ1bmMsIHR5cGVdICovXG5cdFx0XHRcdHZhciBhcmdjLyo6bnVtYmVyKi8gPSAoZlsxXVswXS8qOmFueSovKSwgZnVuYy8qOnN0cmluZyovID0gKGZbMV1bMV0vKjphbnkqLyk7XG5cdFx0XHRcdGlmKCFhcmdjKSBhcmdjID0gMDtcblx0XHRcdFx0YXJnYyAmPSAweDdGO1xuXHRcdFx0XHR2YXIgYXJncyA9IGFyZ2MgPT0gMCA/IFtdIDogc3RhY2suc2xpY2UoLWFyZ2MpO1xuXHRcdFx0XHRzdGFjay5sZW5ndGggLT0gYXJnYztcblx0XHRcdFx0aWYoZnVuYyA9PT0gJ1VzZXInKSBmdW5jID0gYXJncy5zaGlmdCgpO1xuXHRcdFx0XHRzdGFjay5wdXNoKGZ1bmMgKyBcIihcIiArIGFyZ3Muam9pbihcIixcIikgKyBcIilcIik7XG5cdFx0XHRcdGJyZWFrO1xuXG5cdFx0XHRjYXNlICdQdGdCb29sJzogLyogW01TLVhMU10gMi41LjE5OC40MiAqL1xuXHRcdFx0XHRzdGFjay5wdXNoKGZbMV0gPyBcIlRSVUVcIiA6IFwiRkFMU0VcIik7IGJyZWFrO1xuXHRcdFx0Y2FzZSAnUHRnSW50JzogLyogW01TLVhMU10gMi41LjE5OC42NiAqL1xuXHRcdFx0XHRzdGFjay5wdXNoKC8qOjpTdHJpbmcoKi9mWzFdLyo6OikqLyk7IGJyZWFrO1xuXHRcdFx0Y2FzZSAnUHRnTnVtJzogLyogW01TLVhMU10gMi41LjE5OC43OSBUT0RPOiBwcmVjaXNpb24/ICovXG5cdFx0XHRcdHN0YWNrLnB1c2goU3RyaW5nKGZbMV0pKTsgYnJlYWs7XG5cdFx0XHRjYXNlICdQdGdTdHInOiAvKiBbTVMtWExTXSAyLjUuMTk4Ljg5ICovXG5cdFx0XHRcdC8vICRGbG93SWdub3JlXG5cdFx0XHRcdHN0YWNrLnB1c2goJ1wiJyArIGZbMV0ucmVwbGFjZSgvXCIvZywgJ1wiXCInKSArICdcIicpOyBicmVhaztcblx0XHRcdGNhc2UgJ1B0Z0Vycic6IC8qIFtNUy1YTFNdIDIuNS4xOTguNTcgKi9cblx0XHRcdFx0c3RhY2sucHVzaCgvKjo6U3RyaW5nKCovZlsxXS8qOjopKi8pOyBicmVhaztcblx0XHRcdGNhc2UgJ1B0Z0FyZWFOJzogLyogW01TLVhMU10gMi41LjE5OC4zMSBUT0RPICovXG5cdFx0XHRcdC8qOjp0eXBlID0gZlsxXVswXTsgKi9yID0gc2hpZnRfcmFuZ2VfeGxzKGZbMV1bMV0sIGNlbGwgPyB7czpjZWxsfSA6IF9yYW5nZSwgb3B0cyk7XG5cdFx0XHRcdHN0YWNrLnB1c2goZW5jb2RlX3JhbmdlX3hscygoci8qOmFueSovKSwgb3B0cykpO1xuXHRcdFx0XHRicmVhaztcblx0XHRcdGNhc2UgJ1B0Z0FyZWEnOiAvKiBbTVMtWExTXSAyLjUuMTk4LjI3IFRPRE86IGZpeGVkIHBvaW50cyAqL1xuXHRcdFx0XHQvKjo6dHlwZSA9IGZbMV1bMF07ICovciA9IHNoaWZ0X3JhbmdlX3hscyhmWzFdWzFdLCBfcmFuZ2UsIG9wdHMpO1xuXHRcdFx0XHRzdGFjay5wdXNoKGVuY29kZV9yYW5nZV94bHMoKHIvKjphbnkqLyksIG9wdHMpKTtcblx0XHRcdFx0YnJlYWs7XG5cdFx0XHRjYXNlICdQdGdBcmVhM2QnOiAvKiBbTVMtWExTXSAyLjUuMTk4LjI4IFRPRE8gKi9cblx0XHRcdFx0Lyo6OnR5cGUgPSBmWzFdWzBdOyAqL2l4dGkgPSAvKjo6TnVtYmVyKCovZlsxXVsxXS8qOjopKi87IHIgPSBmWzFdWzJdO1xuXHRcdFx0XHRzbmFtZSA9IGdldF9peHRpKHN1cGJvb2tzLCBpeHRpLCBvcHRzKTtcblx0XHRcdFx0c3RhY2sucHVzaChzbmFtZSArIFwiIVwiICsgZW5jb2RlX3JhbmdlX3hscygoci8qOmFueSovKSwgb3B0cykpO1xuXHRcdFx0XHRicmVhaztcblx0XHRcdGNhc2UgJ1B0Z0F0dHJTdW0nOiAvKiBbTVMtWExTXSAyLjUuMTk4LjQxICovXG5cdFx0XHRcdHN0YWNrLnB1c2goXCJTVU0oXCIgKyBzdGFjay5wb3AoKSArIFwiKVwiKTtcblx0XHRcdFx0YnJlYWs7XG5cblx0XHRcdGNhc2UgJ1B0Z0F0dHJCYXhjZWwnOiAvKiBbTVMtWExTXSAyLjUuMTk4LjMzICovXG5cdFx0XHRjYXNlICdQdGdBdHRyU2VtaSc6IC8qIFtNUy1YTFNdIDIuNS4xOTguMzcgKi9cblx0XHRcdFx0YnJlYWs7XG5cblx0XHRcdGNhc2UgJ1B0Z05hbWUnOiAvKiBbTVMtWExTXSAyLjUuMTk4Ljc2IDsgW01TLVhMU0JdIDIuNS45Ny42MCBUT0RPOiByZXZpc2lvbnMgKi9cblx0XHRcdFx0LyogZlsxXSA9IHR5cGUsIDAsIG5hbWVpbmRleCAqL1xuXHRcdFx0XHRuYW1laWR4ID0gKGZbMV1bMl0vKjphbnkqLyk7XG5cdFx0XHRcdHZhciBsYmwgPSAoc3VwYm9va3MubmFtZXN8fFtdKVtuYW1laWR4LTFdIHx8IChzdXBib29rc1swXXx8W10pW25hbWVpZHhdO1xuXHRcdFx0XHR2YXIgbmFtZSA9IGxibCA/IGxibC5OYW1lIDogXCJTSDMzVEpTTkFNRVwiICsgU3RyaW5nKG5hbWVpZHgpO1xuXHRcdFx0XHQvKiBbTVMtWExTQl0gMi41Ljk3LjEwIEZ0YWIgLS0gbGFzdCB2ZXJpZmllZCAyMDIyMDIwNCAqL1xuXHRcdFx0XHRpZihuYW1lICYmIG5hbWUuc2xpY2UoMCw2KSA9PSBcIl94bGZuLlwiICYmICFvcHRzLnhsZm4pIG5hbWUgPSBuYW1lLnNsaWNlKDYpO1xuXHRcdFx0XHRzdGFjay5wdXNoKG5hbWUpO1xuXHRcdFx0XHRicmVhaztcblxuXHRcdFx0Y2FzZSAnUHRnTmFtZVgnOiAvKiBbTVMtWExTXSAyLjUuMTk4Ljc3IDsgW01TLVhMU0JdIDIuNS45Ny42MSBUT0RPOiByZXZpc2lvbnMgKi9cblx0XHRcdFx0LyogZlsxXSA9IHR5cGUsIGl4dGksIG5hbWVpbmRleCAqL1xuXHRcdFx0XHR2YXIgYm9va2lkeC8qOm51bWJlciovID0gKGZbMV1bMV0vKjphbnkqLyk7IG5hbWVpZHggPSAoZlsxXVsyXS8qOmFueSovKTsgdmFyIGV4dGVybmJvb2s7XG5cdFx0XHRcdC8qIFRPRE86IFByb3Blcmx5IGhhbmRsZSBtaXNzaW5nIHZhbHVlcyAtLSB0aGlzIHNob3VsZCBiZSB1c2luZyBnZXRfaXh0aV9yYXcgcHJpbWFyaWx5ICovXG5cdFx0XHRcdGlmKG9wdHMuYmlmZiA8PSA1KSB7XG5cdFx0XHRcdFx0aWYoYm9va2lkeCA8IDApIGJvb2tpZHggPSAtYm9va2lkeDtcblx0XHRcdFx0XHRpZihzdXBib29rc1tib29raWR4XSkgZXh0ZXJuYm9vayA9IHN1cGJvb2tzW2Jvb2tpZHhdW25hbWVpZHhdO1xuXHRcdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRcdHZhciBvID0gXCJcIjtcblx0XHRcdFx0XHRpZigoKHN1cGJvb2tzW2Jvb2tpZHhdfHxbXSlbMF18fFtdKVswXSA9PSAweDNBMDEpey8qIGVtcHR5ICovfVxuXHRcdFx0XHRcdGVsc2UgaWYoKChzdXBib29rc1tib29raWR4XXx8W10pWzBdfHxbXSlbMF0gPT0gMHgwNDAxKXtcblx0XHRcdFx0XHRcdGlmKHN1cGJvb2tzW2Jvb2tpZHhdW25hbWVpZHhdICYmIHN1cGJvb2tzW2Jvb2tpZHhdW25hbWVpZHhdLml0YWIgPiAwKSB7XG5cdFx0XHRcdFx0XHRcdG8gPSBzdXBib29rcy5TaGVldE5hbWVzW3N1cGJvb2tzW2Jvb2tpZHhdW25hbWVpZHhdLml0YWItMV0gKyBcIiFcIjtcblx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0ZWxzZSBvID0gc3VwYm9va3MuU2hlZXROYW1lc1tuYW1laWR4LTFdKyBcIiFcIjtcblx0XHRcdFx0XHRpZihzdXBib29rc1tib29raWR4XSAmJiBzdXBib29rc1tib29raWR4XVtuYW1laWR4XSkgbyArPSBzdXBib29rc1tib29raWR4XVtuYW1laWR4XS5OYW1lO1xuXHRcdFx0XHRcdGVsc2UgaWYoc3VwYm9va3NbMF0gJiYgc3VwYm9va3NbMF1bbmFtZWlkeF0pIG8gKz0gc3VwYm9va3NbMF1bbmFtZWlkeF0uTmFtZTtcblx0XHRcdFx0XHRlbHNlIHtcblx0XHRcdFx0XHRcdHZhciBpeHRpZGF0YSA9IChnZXRfaXh0aV9yYXcoc3VwYm9va3MsIGJvb2tpZHgsIG9wdHMpfHxcIlwiKS5zcGxpdChcIjs7XCIpO1xuXHRcdFx0XHRcdFx0aWYoaXh0aWRhdGFbbmFtZWlkeCAtIDFdKSBvID0gaXh0aWRhdGFbbmFtZWlkeCAtIDFdOyAvLyBUT0RPOiBjb25maXJtIHRoaXMgaXMgY29ycmVjdFxuXHRcdFx0XHRcdFx0ZWxzZSBvICs9IFwiU0gzM1RKU0VSUlhcIjtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0c3RhY2sucHVzaChvKTtcblx0XHRcdFx0XHRicmVhaztcblx0XHRcdFx0fVxuXHRcdFx0XHRpZighZXh0ZXJuYm9vaykgZXh0ZXJuYm9vayA9IHtOYW1lOiBcIlNIMzNUSlNFUlJZXCJ9O1xuXHRcdFx0XHRzdGFjay5wdXNoKGV4dGVybmJvb2suTmFtZSk7XG5cdFx0XHRcdGJyZWFrO1xuXG5cdFx0XHRjYXNlICdQdGdQYXJlbic6IC8qIFtNUy1YTFNdIDIuNS4xOTguODAgKi9cblx0XHRcdFx0dmFyIGxwID0gJygnLCBycCA9ICcpJztcblx0XHRcdFx0aWYobGFzdF9zcCA+PSAwKSB7XG5cdFx0XHRcdFx0c3AgPSBcIlwiO1xuXHRcdFx0XHRcdHN3aXRjaChmb3JtdWxhWzBdW2xhc3Rfc3BdWzFdWzBdKSB7XG5cdFx0XHRcdFx0XHQvLyAkRmxvd0lnbm9yZVxuXHRcdFx0XHRcdFx0Y2FzZSAyOiBscCA9IGZpbGwoXCIgXCIsIGZvcm11bGFbMF1bbGFzdF9zcF1bMV1bMV0pICsgbHA7IGJyZWFrO1xuXHRcdFx0XHRcdFx0Ly8gJEZsb3dJZ25vcmVcblx0XHRcdFx0XHRcdGNhc2UgMzogbHAgPSBmaWxsKFwiXFxyXCIsIGZvcm11bGFbMF1bbGFzdF9zcF1bMV1bMV0pICsgbHA7IGJyZWFrO1xuXHRcdFx0XHRcdFx0Ly8gJEZsb3dJZ25vcmVcblx0XHRcdFx0XHRcdGNhc2UgNDogcnAgPSBmaWxsKFwiIFwiLCBmb3JtdWxhWzBdW2xhc3Rfc3BdWzFdWzFdKSArIHJwOyBicmVhaztcblx0XHRcdFx0XHRcdC8vICRGbG93SWdub3JlXG5cdFx0XHRcdFx0XHRjYXNlIDU6IHJwID0gZmlsbChcIlxcclwiLCBmb3JtdWxhWzBdW2xhc3Rfc3BdWzFdWzFdKSArIHJwOyBicmVhaztcblx0XHRcdFx0XHRcdGRlZmF1bHQ6XG5cdFx0XHRcdFx0XHRcdC8vICRGbG93SWdub3JlXG5cdFx0XHRcdFx0XHRcdGlmKG9wdHMuV1RGKSB0aHJvdyBuZXcgRXJyb3IoXCJVbmV4cGVjdGVkIFB0Z0F0dHJTcGFjZVR5cGUgXCIgKyBmb3JtdWxhWzBdW2xhc3Rfc3BdWzFdWzBdKTtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0bGFzdF9zcCA9IC0xO1xuXHRcdFx0XHR9XG5cdFx0XHRcdHN0YWNrLnB1c2gobHAgKyBzdGFjay5wb3AoKSArIHJwKTsgYnJlYWs7XG5cblx0XHRcdGNhc2UgJ1B0Z1JlZkVycic6IC8qIFtNUy1YTFNdIDIuNS4xOTguODYgKi9cblx0XHRcdFx0c3RhY2sucHVzaCgnI1JFRiEnKTsgYnJlYWs7XG5cblx0XHRcdGNhc2UgJ1B0Z1JlZkVycjNkJzogLyogW01TLVhMU10gMi41LjE5OC44NyAqL1xuXHRcdFx0XHRzdGFjay5wdXNoKCcjUkVGIScpOyBicmVhaztcblxuXHRcdFx0Y2FzZSAnUHRnRXhwJzogLyogW01TLVhMU10gMi41LjE5OC41OCBUT0RPICovXG5cdFx0XHRcdGMgPSB7YzooZlsxXVsxXS8qOmFueSovKSxyOihmWzFdWzBdLyo6YW55Ki8pfTtcblx0XHRcdFx0dmFyIHEgPSAoe2M6IGNlbGwuYywgcjpjZWxsLnJ9Lyo6YW55Ki8pO1xuXHRcdFx0XHRpZihzdXBib29rcy5zaGFyZWRmW2VuY29kZV9jZWxsKGMpXSkge1xuXHRcdFx0XHRcdHZhciBwYXJzZWRmID0gKHN1cGJvb2tzLnNoYXJlZGZbZW5jb2RlX2NlbGwoYyldKTtcblx0XHRcdFx0XHRzdGFjay5wdXNoKHN0cmluZ2lmeV9mb3JtdWxhKHBhcnNlZGYsIF9yYW5nZSwgcSwgc3VwYm9va3MsIG9wdHMpKTtcblx0XHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0XHR2YXIgZm5kID0gZmFsc2U7XG5cdFx0XHRcdFx0Zm9yKGUxPTA7ZTEhPXN1cGJvb2tzLmFycmF5Zi5sZW5ndGg7ICsrZTEpIHtcblx0XHRcdFx0XHRcdC8qIFRPRE86IHNob3VsZCBiZSBzb21ldGhpbmcgbGlrZSByYW5nZV9oYXMgKi9cblx0XHRcdFx0XHRcdGUyID0gc3VwYm9va3MuYXJyYXlmW2UxXTtcblx0XHRcdFx0XHRcdGlmKGMuYyA8IGUyWzBdLnMuYyB8fCBjLmMgPiBlMlswXS5lLmMpIGNvbnRpbnVlO1xuXHRcdFx0XHRcdFx0aWYoYy5yIDwgZTJbMF0ucy5yIHx8IGMuciA+IGUyWzBdLmUucikgY29udGludWU7XG5cdFx0XHRcdFx0XHRzdGFjay5wdXNoKHN0cmluZ2lmeV9mb3JtdWxhKGUyWzFdLCBfcmFuZ2UsIHEsIHN1cGJvb2tzLCBvcHRzKSk7XG5cdFx0XHRcdFx0XHRmbmQgPSB0cnVlO1xuXHRcdFx0XHRcdFx0YnJlYWs7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHRcdGlmKCFmbmQpIHN0YWNrLnB1c2goLyo6OlN0cmluZygqL2ZbMV0vKjo6KSovKTtcblx0XHRcdFx0fVxuXHRcdFx0XHRicmVhaztcblxuXHRcdFx0Y2FzZSAnUHRnQXJyYXknOiAvKiBbTVMtWExTXSAyLjUuMTk4LjMyIFRPRE8gKi9cblx0XHRcdFx0c3RhY2sucHVzaChcIntcIiArIHN0cmluZ2lmeV9hcnJheSgvKjo6KCovZlsxXS8qOjogOmFueSkqLykgKyBcIn1cIik7XG5cdFx0XHRcdGJyZWFrO1xuXG5cdFx0XHRjYXNlICdQdGdNZW1BcmVhJzogLyogW01TLVhMU10gMi41LjE5OC43MCBUT0RPOiBjb25maXJtIHRoaXMgaXMgYSBub24tZGlzcGxheSAqL1xuXHRcdFx0XHQvL3N0YWNrLnB1c2goXCIoXCIgKyBmWzJdLm1hcChlbmNvZGVfcmFuZ2UpLmpvaW4oXCIsXCIpICsgXCIpXCIpO1xuXHRcdFx0XHRicmVhaztcblxuXHRcdFx0Y2FzZSAnUHRnQXR0clNwYWNlJzogLyogW01TLVhMU10gMi41LjE5OC4zOCAqL1xuXHRcdFx0Y2FzZSAnUHRnQXR0clNwYWNlU2VtaSc6IC8qIFtNUy1YTFNdIDIuNS4xOTguMzkgKi9cblx0XHRcdFx0bGFzdF9zcCA9IGZmO1xuXHRcdFx0XHRicmVhaztcblxuXHRcdFx0Y2FzZSAnUHRnVGJsJzogLyogW01TLVhMU10gMi41LjE5OC45MiBUT0RPICovXG5cdFx0XHRcdGJyZWFrO1xuXG5cdFx0XHRjYXNlICdQdGdNZW1FcnInOiAvKiBbTVMtWExTXSAyLjUuMTk4LjcxICovXG5cdFx0XHRcdGJyZWFrO1xuXG5cdFx0XHRjYXNlICdQdGdNaXNzQXJnJzogLyogW01TLVhMU10gMi41LjE5OC43NCAqL1xuXHRcdFx0XHRzdGFjay5wdXNoKFwiXCIpO1xuXHRcdFx0XHRicmVhaztcblxuXHRcdFx0Y2FzZSAnUHRnQXJlYUVycic6IC8qIFtNUy1YTFNdIDIuNS4xOTguMjkgKi9cblx0XHRcdFx0c3RhY2sucHVzaChcIiNSRUYhXCIpOyBicmVhaztcblxuXHRcdFx0Y2FzZSAnUHRnQXJlYUVycjNkJzogLyogW01TLVhMU10gMi41LjE5OC4zMCAqL1xuXHRcdFx0XHRzdGFjay5wdXNoKFwiI1JFRiFcIik7IGJyZWFrO1xuXG5cdFx0XHRjYXNlICdQdGdMaXN0JzogLyogW01TLVhMU0JdIDIuNS45Ny41MiAqL1xuXHRcdFx0XHQvLyAkRmxvd0lnbm9yZVxuXHRcdFx0XHRzdGFjay5wdXNoKFwiVGFibGVcIiArIGZbMV0uaWR4ICsgXCJbI1wiICsgZlsxXS5ydCArIFwiXVwiKTtcblx0XHRcdFx0YnJlYWs7XG5cblx0XHRcdGNhc2UgJ1B0Z01lbUFyZWFOJzpcblx0XHRcdGNhc2UgJ1B0Z01lbU5vTWVtTic6XG5cdFx0XHRjYXNlICdQdGdBdHRyTm9vcCc6XG5cdFx0XHRjYXNlICdQdGdTaGVldCc6XG5cdFx0XHRjYXNlICdQdGdFbmRTaGVldCc6XG5cdFx0XHRcdGJyZWFrO1xuXG5cdFx0XHRjYXNlICdQdGdNZW1GdW5jJzogLyogW01TLVhMU10gMi41LjE5OC43MiBUT0RPICovXG5cdFx0XHRcdGJyZWFrO1xuXHRcdFx0Y2FzZSAnUHRnTWVtTm9NZW0nOiAvKiBbTVMtWExTXSAyLjUuMTk4LjczIFRPRE8gKi9cblx0XHRcdFx0YnJlYWs7XG5cblx0XHRcdGNhc2UgJ1B0Z0VsZkNvbCc6IC8qIFtNUy1YTFNdIDIuNS4xOTguNDYgKi9cblx0XHRcdGNhc2UgJ1B0Z0VsZkNvbFMnOiAvKiBbTVMtWExTXSAyLjUuMTk4LjQ3ICovXG5cdFx0XHRjYXNlICdQdGdFbGZDb2xTVic6IC8qIFtNUy1YTFNdIDIuNS4xOTguNDggKi9cblx0XHRcdGNhc2UgJ1B0Z0VsZkNvbFYnOiAvKiBbTVMtWExTXSAyLjUuMTk4LjQ5ICovXG5cdFx0XHRjYXNlICdQdGdFbGZMZWwnOiAvKiBbTVMtWExTXSAyLjUuMTk4LjUwICovXG5cdFx0XHRjYXNlICdQdGdFbGZSYWRpY2FsJzogLyogW01TLVhMU10gMi41LjE5OC41MSAqL1xuXHRcdFx0Y2FzZSAnUHRnRWxmUmFkaWNhbExlbCc6IC8qIFtNUy1YTFNdIDIuNS4xOTguNTIgKi9cblx0XHRcdGNhc2UgJ1B0Z0VsZlJhZGljYWxTJzogLyogW01TLVhMU10gMi41LjE5OC41MyAqL1xuXHRcdFx0Y2FzZSAnUHRnRWxmUncnOiAvKiBbTVMtWExTXSAyLjUuMTk4LjU0ICovXG5cdFx0XHRjYXNlICdQdGdFbGZSd1YnOiAvKiBbTVMtWExTXSAyLjUuMTk4LjU1ICovXG5cdFx0XHRcdHRocm93IG5ldyBFcnJvcihcIlVuc3VwcG9ydGVkIEVMRnNcIik7XG5cblx0XHRcdGNhc2UgJ1B0Z1N4TmFtZSc6IC8qIFtNUy1YTFNdIDIuNS4xOTguOTEgVE9ETyAtLSBmaW5kIGEgdGVzdCBjYXNlICovXG5cdFx0XHRcdHRocm93IG5ldyBFcnJvcignVW5yZWNvZ25pemVkIEZvcm11bGEgVG9rZW46ICcgKyBTdHJpbmcoZikpO1xuXHRcdFx0ZGVmYXVsdDogdGhyb3cgbmV3IEVycm9yKCdVbnJlY29nbml6ZWQgRm9ybXVsYSBUb2tlbjogJyArIFN0cmluZyhmKSk7XG5cdFx0fVxuXHRcdHZhciBQdGdOb25EaXNwID0gWydQdGdBdHRyU3BhY2UnLCAnUHRnQXR0clNwYWNlU2VtaScsICdQdGdBdHRyR290byddO1xuXHRcdGlmKG9wdHMuYmlmZiAhPSAzKSBpZihsYXN0X3NwID49IDAgJiYgUHRnTm9uRGlzcC5pbmRleE9mKGZvcm11bGFbMF1bZmZdWzBdKSA9PSAtMSkge1xuXHRcdFx0ZiA9IGZvcm11bGFbMF1bbGFzdF9zcF07XG5cdFx0XHR2YXIgX2xlZnQgPSB0cnVlO1xuXHRcdFx0c3dpdGNoKGZbMV1bMF0pIHtcblx0XHRcdFx0Lyogbm90ZTogc29tZSBiYWQgWExTQiBmaWxlcyBvbWl0IHRoZSBQdGdQYXJlbiAqL1xuXHRcdFx0XHRjYXNlIDQ6IF9sZWZ0ID0gZmFsc2U7XG5cdFx0XHRcdC8qIGZhbGxzIHRocm91Z2ggKi9cblx0XHRcdFx0Y2FzZSAwOlxuXHRcdFx0XHRcdC8vICRGbG93SWdub3JlXG5cdFx0XHRcdFx0c3AgPSBmaWxsKFwiIFwiLCBmWzFdWzFdKTsgYnJlYWs7XG5cdFx0XHRcdGNhc2UgNTogX2xlZnQgPSBmYWxzZTtcblx0XHRcdFx0LyogZmFsbHMgdGhyb3VnaCAqL1xuXHRcdFx0XHRjYXNlIDE6XG5cdFx0XHRcdFx0Ly8gJEZsb3dJZ25vcmVcblx0XHRcdFx0XHRzcCA9IGZpbGwoXCJcXHJcIiwgZlsxXVsxXSk7IGJyZWFrO1xuXHRcdFx0XHRkZWZhdWx0OlxuXHRcdFx0XHRcdHNwID0gXCJcIjtcblx0XHRcdFx0XHQvLyAkRmxvd0lnbm9yZVxuXHRcdFx0XHRcdGlmKG9wdHMuV1RGKSB0aHJvdyBuZXcgRXJyb3IoXCJVbmV4cGVjdGVkIFB0Z0F0dHJTcGFjZVR5cGUgXCIgKyBmWzFdWzBdKTtcblx0XHRcdH1cblx0XHRcdHN0YWNrLnB1c2goKF9sZWZ0ID8gc3AgOiBcIlwiKSArIHN0YWNrLnBvcCgpICsgKF9sZWZ0ID8gXCJcIiA6IHNwKSk7XG5cdFx0XHRsYXN0X3NwID0gLTE7XG5cdFx0fVxuXHR9XG5cdGlmKHN0YWNrLmxlbmd0aCA+IDEgJiYgb3B0cy5XVEYpIHRocm93IG5ldyBFcnJvcihcImJhZCBmb3JtdWxhIHN0YWNrXCIpO1xuXHRyZXR1cm4gc3RhY2tbMF07XG59XG5cbi8qIFtNUy1YTFNdIDIuNS4xOTguMSBUT0RPICovXG5mdW5jdGlvbiBwYXJzZV9BcnJheVBhcnNlZEZvcm11bGEoYmxvYiwgbGVuZ3RoLCBvcHRzLyo6OiwgcmVmKi8pIHtcblx0dmFyIHRhcmdldCA9IGJsb2IubCArIGxlbmd0aCwgbGVuID0gb3B0cy5iaWZmID09IDIgPyAxIDogMjtcblx0dmFyIHJnY2IsIGNjZSA9IGJsb2IucmVhZF9zaGlmdChsZW4pOyAvLyBsZW5ndGggb2YgcmdjZVxuXHRpZihjY2UgPT0gMHhGRkZGKSByZXR1cm4gW1tdLHBhcnNlbm9vcChibG9iLCBsZW5ndGgtMildO1xuXHR2YXIgcmdjZSA9IHBhcnNlX1JnY2UoYmxvYiwgY2NlLCBvcHRzKTtcblx0aWYobGVuZ3RoICE9PSBjY2UgKyBsZW4pIHJnY2IgPSBwYXJzZV9SZ2JFeHRyYShibG9iLCBsZW5ndGggLSBjY2UgLSBsZW4sIHJnY2UsIG9wdHMpO1xuXHRibG9iLmwgPSB0YXJnZXQ7XG5cdHJldHVybiBbcmdjZSwgcmdjYl07XG59XG5cbi8qIFtNUy1YTFNdIDIuNS4xOTguMyBUT0RPICovXG5mdW5jdGlvbiBwYXJzZV9YTFNDZWxsUGFyc2VkRm9ybXVsYShibG9iLCBsZW5ndGgsIG9wdHMpIHtcblx0dmFyIHRhcmdldCA9IGJsb2IubCArIGxlbmd0aCwgbGVuID0gb3B0cy5iaWZmID09IDIgPyAxIDogMjtcblx0dmFyIHJnY2IsIGNjZSA9IGJsb2IucmVhZF9zaGlmdChsZW4pOyAvLyBsZW5ndGggb2YgcmdjZVxuXHRpZihjY2UgPT0gMHhGRkZGKSByZXR1cm4gW1tdLHBhcnNlbm9vcChibG9iLCBsZW5ndGgtMildO1xuXHR2YXIgcmdjZSA9IHBhcnNlX1JnY2UoYmxvYiwgY2NlLCBvcHRzKTtcblx0aWYobGVuZ3RoICE9PSBjY2UgKyBsZW4pIHJnY2IgPSBwYXJzZV9SZ2JFeHRyYShibG9iLCBsZW5ndGggLSBjY2UgLSBsZW4sIHJnY2UsIG9wdHMpO1xuXHRibG9iLmwgPSB0YXJnZXQ7XG5cdHJldHVybiBbcmdjZSwgcmdjYl07XG59XG5cbi8qIFtNUy1YTFNdIDIuNS4xOTguMjEgKi9cbmZ1bmN0aW9uIHBhcnNlX05hbWVQYXJzZWRGb3JtdWxhKGJsb2IsIGxlbmd0aCwgb3B0cywgY2NlKSB7XG5cdHZhciB0YXJnZXQgPSBibG9iLmwgKyBsZW5ndGg7XG5cdHZhciByZ2NlID0gcGFyc2VfUmdjZShibG9iLCBjY2UsIG9wdHMpO1xuXHR2YXIgcmdjYjtcblx0aWYodGFyZ2V0ICE9PSBibG9iLmwpIHJnY2IgPSBwYXJzZV9SZ2JFeHRyYShibG9iLCB0YXJnZXQgLSBibG9iLmwsIHJnY2UsIG9wdHMpO1xuXHRyZXR1cm4gW3JnY2UsIHJnY2JdO1xufVxuXG4vKiBbTVMtWExTXSAyLjUuMTk4LjExOCBUT0RPICovXG5mdW5jdGlvbiBwYXJzZV9TaGFyZWRQYXJzZWRGb3JtdWxhKGJsb2IsIGxlbmd0aCwgb3B0cykge1xuXHR2YXIgdGFyZ2V0ID0gYmxvYi5sICsgbGVuZ3RoO1xuXHR2YXIgcmdjYiwgY2NlID0gYmxvYi5yZWFkX3NoaWZ0KDIpOyAvLyBsZW5ndGggb2YgcmdjZVxuXHR2YXIgcmdjZSA9IHBhcnNlX1JnY2UoYmxvYiwgY2NlLCBvcHRzKTtcblx0aWYoY2NlID09IDB4RkZGRikgcmV0dXJuIFtbXSxwYXJzZW5vb3AoYmxvYiwgbGVuZ3RoLTIpXTtcblx0aWYobGVuZ3RoICE9PSBjY2UgKyAyKSByZ2NiID0gcGFyc2VfUmdiRXh0cmEoYmxvYiwgdGFyZ2V0IC0gY2NlIC0gMiwgcmdjZSwgb3B0cyk7XG5cdHJldHVybiBbcmdjZSwgcmdjYl07XG59XG5cbi8qIFtNUy1YTFNdIDIuNS4xMzMgVE9ETzogaG93IHRvIGVtaXQgZW1wdHkgc3RyaW5ncz8gKi9cbmZ1bmN0aW9uIHBhcnNlX0Zvcm11bGFWYWx1ZShibG9iLyo6OiwgbGVuZ3RoKi8pIHtcblx0dmFyIGI7XG5cdGlmKF9fcmVhZFVJbnQxNkxFKGJsb2IsYmxvYi5sICsgNikgIT09IDB4RkZGRikgcmV0dXJuIFtwYXJzZV9YbnVtKGJsb2IpLCduJ107XG5cdHN3aXRjaChibG9iW2Jsb2IubF0pIHtcblx0XHRjYXNlIDB4MDA6IGJsb2IubCArPSA4OyByZXR1cm4gW1wiU3RyaW5nXCIsICdzJ107XG5cdFx0Y2FzZSAweDAxOiBiID0gYmxvYltibG9iLmwrMl0gPT09IDB4MTsgYmxvYi5sICs9IDg7IHJldHVybiBbYiwnYiddO1xuXHRcdGNhc2UgMHgwMjogYiA9IGJsb2JbYmxvYi5sKzJdOyBibG9iLmwgKz0gODsgcmV0dXJuIFtiLCdlJ107XG5cdFx0Y2FzZSAweDAzOiBibG9iLmwgKz0gODsgcmV0dXJuIFtcIlwiLCdzJ107XG5cdH1cblx0cmV0dXJuIFtdO1xufVxuZnVuY3Rpb24gd3JpdGVfRm9ybXVsYVZhbHVlKHZhbHVlKSB7XG5cdGlmKHZhbHVlID09IG51bGwpIHtcblx0XHQvLyBCbGFuayBTdHJpbmcgVmFsdWVcblx0XHR2YXIgbyA9IG5ld19idWYoOCk7XG5cdFx0by53cml0ZV9zaGlmdCgxLCAweDAzKTtcblx0XHRvLndyaXRlX3NoaWZ0KDEsIDApO1xuXHRcdG8ud3JpdGVfc2hpZnQoMiwgMCk7XG5cdFx0by53cml0ZV9zaGlmdCgyLCAwKTtcblx0XHRvLndyaXRlX3NoaWZ0KDIsIDB4RkZGRik7XG5cdFx0cmV0dXJuIG87XG5cdH0gZWxzZSBpZih0eXBlb2YgdmFsdWUgPT0gXCJudW1iZXJcIikgcmV0dXJuIHdyaXRlX1hudW0odmFsdWUpO1xuXHRyZXR1cm4gd3JpdGVfWG51bSgwKTtcbn1cblxuLyogW01TLVhMU10gMi40LjEyNyBUT0RPICovXG5mdW5jdGlvbiBwYXJzZV9Gb3JtdWxhKGJsb2IsIGxlbmd0aCwgb3B0cykge1xuXHR2YXIgZW5kID0gYmxvYi5sICsgbGVuZ3RoO1xuXHR2YXIgY2VsbCA9IHBhcnNlX1hMU0NlbGwoYmxvYiwgNik7XG5cdGlmKG9wdHMuYmlmZiA9PSAyKSArK2Jsb2IubDtcblx0dmFyIHZhbCA9IHBhcnNlX0Zvcm11bGFWYWx1ZShibG9iLDgpO1xuXHR2YXIgZmxhZ3MgPSBibG9iLnJlYWRfc2hpZnQoMSk7XG5cdGlmKG9wdHMuYmlmZiAhPSAyKSB7XG5cdFx0YmxvYi5yZWFkX3NoaWZ0KDEpO1xuXHRcdGlmKG9wdHMuYmlmZiA+PSA1KSB7XG5cdFx0XHQvKnZhciBjaG4gPSAqL2Jsb2IucmVhZF9zaGlmdCg0KTtcblx0XHR9XG5cdH1cblx0dmFyIGNiZiA9IHBhcnNlX1hMU0NlbGxQYXJzZWRGb3JtdWxhKGJsb2IsIGVuZCAtIGJsb2IubCwgb3B0cyk7XG5cdHJldHVybiB7Y2VsbDpjZWxsLCB2YWw6dmFsWzBdLCBmb3JtdWxhOmNiZiwgc2hhcmVkOiAoZmxhZ3MgPj4gMykgJiAxLCB0dDp2YWxbMV19O1xufVxuZnVuY3Rpb24gd3JpdGVfRm9ybXVsYShjZWxsLyo6Q2VsbCovLCBSLyo6bnVtYmVyKi8sIEMvKjpudW1iZXIqLywgb3B0cywgb3MvKjpudW1iZXIqLykge1xuXHQvLyBDZWxsXG5cdHZhciBvMSA9IHdyaXRlX1hMU0NlbGwoUiwgQywgb3MpO1xuXG5cdC8vIEZvcm11bGFWYWx1ZVxuXHR2YXIgbzIgPSB3cml0ZV9Gb3JtdWxhVmFsdWUoY2VsbC52KTtcblxuXHQvLyBmbGFncyArIGNhY2hlXG5cdHZhciBvMyA9IG5ld19idWYoNik7XG5cdHZhciBmbGFncyA9IDB4MDEgfCAweDIwO1xuXHRvMy53cml0ZV9zaGlmdCgyLCBmbGFncyk7XG5cdG8zLndyaXRlX3NoaWZ0KDQsIDApO1xuXG5cdC8vIENlbGxQYXJzZWRGb3JtdWxhXG5cdHZhciBiZiA9IG5ld19idWYoY2VsbC5iZi5sZW5ndGgpO1xuXHRmb3IodmFyIGkgPSAwOyBpIDwgY2VsbC5iZi5sZW5ndGg7ICsraSkgYmZbaV0gPSBjZWxsLmJmW2ldO1xuXG5cdHZhciBvdXQgPSBiY29uY2F0KFtvMSwgbzIsIG8zLCBiZl0pO1xuXHRyZXR1cm4gb3V0O1xufVxuXG5cbi8qIFhMU0IgUGFyc2VkIEZvcm11bGEgcmVjb3JkcyBoYXZlIHRoZSBzYW1lIHNoYXBlICovXG5mdW5jdGlvbiBwYXJzZV9YTFNCUGFyc2VkRm9ybXVsYShkYXRhLCBsZW5ndGgsIG9wdHMpIHtcblx0dmFyIGNjZSA9IGRhdGEucmVhZF9zaGlmdCg0KTtcblx0dmFyIHJnY2UgPSBwYXJzZV9SZ2NlKGRhdGEsIGNjZSwgb3B0cyk7XG5cdHZhciBjYiA9IGRhdGEucmVhZF9zaGlmdCg0KTtcblx0dmFyIHJnY2IgPSBjYiA+IDAgPyBwYXJzZV9SZ2JFeHRyYShkYXRhLCBjYiwgcmdjZSwgb3B0cykgOiBudWxsO1xuXHRyZXR1cm4gW3JnY2UsIHJnY2JdO1xufVxuXG4vKiBbTVMtWExTQl0gMi41Ljk3LjEgQXJyYXlQYXJzZWRGb3JtdWxhICovXG52YXIgcGFyc2VfWExTQkFycmF5UGFyc2VkRm9ybXVsYSA9IHBhcnNlX1hMU0JQYXJzZWRGb3JtdWxhO1xuLyogW01TLVhMU0JdIDIuNS45Ny40IENlbGxQYXJzZWRGb3JtdWxhICovXG52YXIgcGFyc2VfWExTQkNlbGxQYXJzZWRGb3JtdWxhID0gcGFyc2VfWExTQlBhcnNlZEZvcm11bGE7XG4vKiBbTVMtWExTQl0gMi41Ljk3LjggRFZQYXJzZWRGb3JtdWxhICovXG4vL3ZhciBwYXJzZV9YTFNCRFZQYXJzZWRGb3JtdWxhID0gcGFyc2VfWExTQlBhcnNlZEZvcm11bGE7XG4vKiBbTVMtWExTQl0gMi41Ljk3LjkgRlJUUGFyc2VkRm9ybXVsYSAqL1xuLy92YXIgcGFyc2VfWExTQkZSVFBhcnNlZEZvcm11bGEgPSBwYXJzZV9YTFNCUGFyc2VkRm9ybXVsYTI7XG4vKiBbTVMtWExTQl0gMi41Ljk3LjEyIE5hbWVQYXJzZWRGb3JtdWxhICovXG52YXIgcGFyc2VfWExTQk5hbWVQYXJzZWRGb3JtdWxhID0gcGFyc2VfWExTQlBhcnNlZEZvcm11bGE7XG4vKiBbTVMtWExTQl0gMi41Ljk3Ljk4IFNoYXJlZFBhcnNlZEZvcm11bGEgKi9cbnZhciBwYXJzZV9YTFNCU2hhcmVkUGFyc2VkRm9ybXVsYSA9IHBhcnNlX1hMU0JQYXJzZWRGb3JtdWxhO1xudmFyIENldGFiID0ge1xuICAwOiBcIkJFRVBcIixcbiAgMTogXCJPUEVOXCIsXG4gIDI6IFwiT1BFTi5MSU5LU1wiLFxuICAzOiBcIkNMT1NFLkFMTFwiLFxuICA0OiBcIlNBVkVcIixcbiAgNTogXCJTQVZFLkFTXCIsXG4gIDY6IFwiRklMRS5ERUxFVEVcIixcbiAgNzogXCJQQUdFLlNFVFVQXCIsXG4gIDg6IFwiUFJJTlRcIixcbiAgOTogXCJQUklOVEVSLlNFVFVQXCIsXG4gIDEwOiBcIlFVSVRcIixcbiAgMTE6IFwiTkVXLldJTkRPV1wiLFxuICAxMjogXCJBUlJBTkdFLkFMTFwiLFxuICAxMzogXCJXSU5ET1cuU0laRVwiLFxuICAxNDogXCJXSU5ET1cuTU9WRVwiLFxuICAxNTogXCJGVUxMXCIsXG4gIDE2OiBcIkNMT1NFXCIsXG4gIDE3OiBcIlJVTlwiLFxuICAyMjogXCJTRVQuUFJJTlQuQVJFQVwiLFxuICAyMzogXCJTRVQuUFJJTlQuVElUTEVTXCIsXG4gIDI0OiBcIlNFVC5QQUdFLkJSRUFLXCIsXG4gIDI1OiBcIlJFTU9WRS5QQUdFLkJSRUFLXCIsXG4gIDI2OiBcIkZPTlRcIixcbiAgMjc6IFwiRElTUExBWVwiLFxuICAyODogXCJQUk9URUNULkRPQ1VNRU5UXCIsXG4gIDI5OiBcIlBSRUNJU0lPTlwiLFxuICAzMDogXCJBMS5SMUMxXCIsXG4gIDMxOiBcIkNBTENVTEFURS5OT1dcIixcbiAgMzI6IFwiQ0FMQ1VMQVRJT05cIixcbiAgMzQ6IFwiREFUQS5GSU5EXCIsXG4gIDM1OiBcIkVYVFJBQ1RcIixcbiAgMzY6IFwiREFUQS5ERUxFVEVcIixcbiAgMzc6IFwiU0VULkRBVEFCQVNFXCIsXG4gIDM4OiBcIlNFVC5DUklURVJJQVwiLFxuICAzOTogXCJTT1JUXCIsXG4gIDQwOiBcIkRBVEEuU0VSSUVTXCIsXG4gIDQxOiBcIlRBQkxFXCIsXG4gIDQyOiBcIkZPUk1BVC5OVU1CRVJcIixcbiAgNDM6IFwiQUxJR05NRU5UXCIsXG4gIDQ0OiBcIlNUWUxFXCIsXG4gIDQ1OiBcIkJPUkRFUlwiLFxuICA0NjogXCJDRUxMLlBST1RFQ1RJT05cIixcbiAgNDc6IFwiQ09MVU1OLldJRFRIXCIsXG4gIDQ4OiBcIlVORE9cIixcbiAgNDk6IFwiQ1VUXCIsXG4gIDUwOiBcIkNPUFlcIixcbiAgNTE6IFwiUEFTVEVcIixcbiAgNTI6IFwiQ0xFQVJcIixcbiAgNTM6IFwiUEFTVEUuU1BFQ0lBTFwiLFxuICA1NDogXCJFRElULkRFTEVURVwiLFxuICA1NTogXCJJTlNFUlRcIixcbiAgNTY6IFwiRklMTC5SSUdIVFwiLFxuICA1NzogXCJGSUxMLkRPV05cIixcbiAgNjE6IFwiREVGSU5FLk5BTUVcIixcbiAgNjI6IFwiQ1JFQVRFLk5BTUVTXCIsXG4gIDYzOiBcIkZPUk1VTEEuR09UT1wiLFxuICA2NDogXCJGT1JNVUxBLkZJTkRcIixcbiAgNjU6IFwiU0VMRUNULkxBU1QuQ0VMTFwiLFxuICA2NjogXCJTSE9XLkFDVElWRS5DRUxMXCIsXG4gIDY3OiBcIkdBTExFUlkuQVJFQVwiLFxuICA2ODogXCJHQUxMRVJZLkJBUlwiLFxuICA2OTogXCJHQUxMRVJZLkNPTFVNTlwiLFxuICA3MDogXCJHQUxMRVJZLkxJTkVcIixcbiAgNzE6IFwiR0FMTEVSWS5QSUVcIixcbiAgNzI6IFwiR0FMTEVSWS5TQ0FUVEVSXCIsXG4gIDczOiBcIkNPTUJJTkFUSU9OXCIsXG4gIDc0OiBcIlBSRUZFUlJFRFwiLFxuICA3NTogXCJBREQuT1ZFUkxBWVwiLFxuICA3NjogXCJHUklETElORVNcIixcbiAgNzc6IFwiU0VULlBSRUZFUlJFRFwiLFxuICA3ODogXCJBWEVTXCIsXG4gIDc5OiBcIkxFR0VORFwiLFxuICA4MDogXCJBVFRBQ0guVEVYVFwiLFxuICA4MTogXCJBREQuQVJST1dcIixcbiAgODI6IFwiU0VMRUNULkNIQVJUXCIsXG4gIDgzOiBcIlNFTEVDVC5QTE9ULkFSRUFcIixcbiAgODQ6IFwiUEFUVEVSTlNcIixcbiAgODU6IFwiTUFJTi5DSEFSVFwiLFxuICA4NjogXCJPVkVSTEFZXCIsXG4gIDg3OiBcIlNDQUxFXCIsXG4gIDg4OiBcIkZPUk1BVC5MRUdFTkRcIixcbiAgODk6IFwiRk9STUFULlRFWFRcIixcbiAgOTA6IFwiRURJVC5SRVBFQVRcIixcbiAgOTE6IFwiUEFSU0VcIixcbiAgOTI6IFwiSlVTVElGWVwiLFxuICA5MzogXCJISURFXCIsXG4gIDk0OiBcIlVOSElERVwiLFxuICA5NTogXCJXT1JLU1BBQ0VcIixcbiAgOTY6IFwiRk9STVVMQVwiLFxuICA5NzogXCJGT1JNVUxBLkZJTExcIixcbiAgOTg6IFwiRk9STVVMQS5BUlJBWVwiLFxuICA5OTogXCJEQVRBLkZJTkQuTkVYVFwiLFxuICAxMDA6IFwiREFUQS5GSU5ELlBSRVZcIixcbiAgMTAxOiBcIkZPUk1VTEEuRklORC5ORVhUXCIsXG4gIDEwMjogXCJGT1JNVUxBLkZJTkQuUFJFVlwiLFxuICAxMDM6IFwiQUNUSVZBVEVcIixcbiAgMTA0OiBcIkFDVElWQVRFLk5FWFRcIixcbiAgMTA1OiBcIkFDVElWQVRFLlBSRVZcIixcbiAgMTA2OiBcIlVOTE9DS0VELk5FWFRcIixcbiAgMTA3OiBcIlVOTE9DS0VELlBSRVZcIixcbiAgMTA4OiBcIkNPUFkuUElDVFVSRVwiLFxuICAxMDk6IFwiU0VMRUNUXCIsXG4gIDExMDogXCJERUxFVEUuTkFNRVwiLFxuICAxMTE6IFwiREVMRVRFLkZPUk1BVFwiLFxuICAxMTI6IFwiVkxJTkVcIixcbiAgMTEzOiBcIkhMSU5FXCIsXG4gIDExNDogXCJWUEFHRVwiLFxuICAxMTU6IFwiSFBBR0VcIixcbiAgMTE2OiBcIlZTQ1JPTExcIixcbiAgMTE3OiBcIkhTQ1JPTExcIixcbiAgMTE4OiBcIkFMRVJUXCIsXG4gIDExOTogXCJORVdcIixcbiAgMTIwOiBcIkNBTkNFTC5DT1BZXCIsXG4gIDEyMTogXCJTSE9XLkNMSVBCT0FSRFwiLFxuICAxMjI6IFwiTUVTU0FHRVwiLFxuICAxMjQ6IFwiUEFTVEUuTElOS1wiLFxuICAxMjU6IFwiQVBQLkFDVElWQVRFXCIsXG4gIDEyNjogXCJERUxFVEUuQVJST1dcIixcbiAgMTI3OiBcIlJPVy5IRUlHSFRcIixcbiAgMTI4OiBcIkZPUk1BVC5NT1ZFXCIsXG4gIDEyOTogXCJGT1JNQVQuU0laRVwiLFxuICAxMzA6IFwiRk9STVVMQS5SRVBMQUNFXCIsXG4gIDEzMTogXCJTRU5ELktFWVNcIixcbiAgMTMyOiBcIlNFTEVDVC5TUEVDSUFMXCIsXG4gIDEzMzogXCJBUFBMWS5OQU1FU1wiLFxuICAxMzQ6IFwiUkVQTEFDRS5GT05UXCIsXG4gIDEzNTogXCJGUkVFWkUuUEFORVNcIixcbiAgMTM2OiBcIlNIT1cuSU5GT1wiLFxuICAxMzc6IFwiU1BMSVRcIixcbiAgMTM4OiBcIk9OLldJTkRPV1wiLFxuICAxMzk6IFwiT04uREFUQVwiLFxuICAxNDA6IFwiRElTQUJMRS5JTlBVVFwiLFxuICAxNDI6IFwiT1VUTElORVwiLFxuICAxNDM6IFwiTElTVC5OQU1FU1wiLFxuICAxNDQ6IFwiRklMRS5DTE9TRVwiLFxuICAxNDU6IFwiU0FWRS5XT1JLQk9PS1wiLFxuICAxNDY6IFwiREFUQS5GT1JNXCIsXG4gIDE0NzogXCJDT1BZLkNIQVJUXCIsXG4gIDE0ODogXCJPTi5USU1FXCIsXG4gIDE0OTogXCJXQUlUXCIsXG4gIDE1MDogXCJGT1JNQVQuRk9OVFwiLFxuICAxNTE6IFwiRklMTC5VUFwiLFxuICAxNTI6IFwiRklMTC5MRUZUXCIsXG4gIDE1MzogXCJERUxFVEUuT1ZFUkxBWVwiLFxuICAxNTU6IFwiU0hPUlQuTUVOVVNcIixcbiAgMTU5OiBcIlNFVC5VUERBVEUuU1RBVFVTXCIsXG4gIDE2MTogXCJDT0xPUi5QQUxFVFRFXCIsXG4gIDE2MjogXCJERUxFVEUuU1RZTEVcIixcbiAgMTYzOiBcIldJTkRPVy5SRVNUT1JFXCIsXG4gIDE2NDogXCJXSU5ET1cuTUFYSU1JWkVcIixcbiAgMTY2OiBcIkNIQU5HRS5MSU5LXCIsXG4gIDE2NzogXCJDQUxDVUxBVEUuRE9DVU1FTlRcIixcbiAgMTY4OiBcIk9OLktFWVwiLFxuICAxNjk6IFwiQVBQLlJFU1RPUkVcIixcbiAgMTcwOiBcIkFQUC5NT1ZFXCIsXG4gIDE3MTogXCJBUFAuU0laRVwiLFxuICAxNzI6IFwiQVBQLk1JTklNSVpFXCIsXG4gIDE3MzogXCJBUFAuTUFYSU1JWkVcIixcbiAgMTc0OiBcIkJSSU5HLlRPLkZST05UXCIsXG4gIDE3NTogXCJTRU5ELlRPLkJBQ0tcIixcbiAgMTg1OiBcIk1BSU4uQ0hBUlQuVFlQRVwiLFxuICAxODY6IFwiT1ZFUkxBWS5DSEFSVC5UWVBFXCIsXG4gIDE4NzogXCJTRUxFQ1QuRU5EXCIsXG4gIDE4ODogXCJPUEVOLk1BSUxcIixcbiAgMTg5OiBcIlNFTkQuTUFJTFwiLFxuICAxOTA6IFwiU1RBTkRBUkQuRk9OVFwiLFxuICAxOTE6IFwiQ09OU09MSURBVEVcIixcbiAgMTkyOiBcIlNPUlQuU1BFQ0lBTFwiLFxuICAxOTM6IFwiR0FMTEVSWS4zRC5BUkVBXCIsXG4gIDE5NDogXCJHQUxMRVJZLjNELkNPTFVNTlwiLFxuICAxOTU6IFwiR0FMTEVSWS4zRC5MSU5FXCIsXG4gIDE5NjogXCJHQUxMRVJZLjNELlBJRVwiLFxuICAxOTc6IFwiVklFVy4zRFwiLFxuICAxOTg6IFwiR09BTC5TRUVLXCIsXG4gIDE5OTogXCJXT1JLR1JPVVBcIixcbiAgMjAwOiBcIkZJTEwuR1JPVVBcIixcbiAgMjAxOiBcIlVQREFURS5MSU5LXCIsXG4gIDIwMjogXCJQUk9NT1RFXCIsXG4gIDIwMzogXCJERU1PVEVcIixcbiAgMjA0OiBcIlNIT1cuREVUQUlMXCIsXG4gIDIwNjogXCJVTkdST1VQXCIsXG4gIDIwNzogXCJPQkpFQ1QuUFJPUEVSVElFU1wiLFxuICAyMDg6IFwiU0FWRS5ORVcuT0JKRUNUXCIsXG4gIDIwOTogXCJTSEFSRVwiLFxuICAyMTA6IFwiU0hBUkUuTkFNRVwiLFxuICAyMTE6IFwiRFVQTElDQVRFXCIsXG4gIDIxMjogXCJBUFBMWS5TVFlMRVwiLFxuICAyMTM6IFwiQVNTSUdOLlRPLk9CSkVDVFwiLFxuICAyMTQ6IFwiT0JKRUNULlBST1RFQ1RJT05cIixcbiAgMjE1OiBcIkhJREUuT0JKRUNUXCIsXG4gIDIxNjogXCJTRVQuRVhUUkFDVFwiLFxuICAyMTc6IFwiQ1JFQVRFLlBVQkxJU0hFUlwiLFxuICAyMTg6IFwiU1VCU0NSSUJFLlRPXCIsXG4gIDIxOTogXCJBVFRSSUJVVEVTXCIsXG4gIDIyMDogXCJTSE9XLlRPT0xCQVJcIixcbiAgMjIyOiBcIlBSSU5ULlBSRVZJRVdcIixcbiAgMjIzOiBcIkVESVQuQ09MT1JcIixcbiAgMjI0OiBcIlNIT1cuTEVWRUxTXCIsXG4gIDIyNTogXCJGT1JNQVQuTUFJTlwiLFxuICAyMjY6IFwiRk9STUFULk9WRVJMQVlcIixcbiAgMjI3OiBcIk9OLlJFQ0FMQ1wiLFxuICAyMjg6IFwiRURJVC5TRVJJRVNcIixcbiAgMjI5OiBcIkRFRklORS5TVFlMRVwiLFxuICAyNDA6IFwiTElORS5QUklOVFwiLFxuICAyNDM6IFwiRU5URVIuREFUQVwiLFxuICAyNDk6IFwiR0FMTEVSWS5SQURBUlwiLFxuICAyNTA6IFwiTUVSR0UuU1RZTEVTXCIsXG4gIDI1MTogXCJFRElUSU9OLk9QVElPTlNcIixcbiAgMjUyOiBcIlBBU1RFLlBJQ1RVUkVcIixcbiAgMjUzOiBcIlBBU1RFLlBJQ1RVUkUuTElOS1wiLFxuICAyNTQ6IFwiU1BFTExJTkdcIixcbiAgMjU2OiBcIlpPT01cIixcbiAgMjU5OiBcIklOU0VSVC5PQkpFQ1RcIixcbiAgMjYwOiBcIldJTkRPVy5NSU5JTUlaRVwiLFxuICAyNjU6IFwiU09VTkQuTk9URVwiLFxuICAyNjY6IFwiU09VTkQuUExBWVwiLFxuICAyNjc6IFwiRk9STUFULlNIQVBFXCIsXG4gIDI2ODogXCJFWFRFTkQuUE9MWUdPTlwiLFxuICAyNjk6IFwiRk9STUFULkFVVE9cIixcbiAgMjcyOiBcIkdBTExFUlkuM0QuQkFSXCIsXG4gIDI3MzogXCJHQUxMRVJZLjNELlNVUkZBQ0VcIixcbiAgMjc0OiBcIkZJTEwuQVVUT1wiLFxuICAyNzY6IFwiQ1VTVE9NSVpFLlRPT0xCQVJcIixcbiAgMjc3OiBcIkFERC5UT09MXCIsXG4gIDI3ODogXCJFRElULk9CSkVDVFwiLFxuICAyNzk6IFwiT04uRE9VQkxFQ0xJQ0tcIixcbiAgMjgwOiBcIk9OLkVOVFJZXCIsXG4gIDI4MTogXCJXT1JLQk9PSy5BRERcIixcbiAgMjgyOiBcIldPUktCT09LLk1PVkVcIixcbiAgMjgzOiBcIldPUktCT09LLkNPUFlcIixcbiAgMjg0OiBcIldPUktCT09LLk9QVElPTlNcIixcbiAgMjg1OiBcIlNBVkUuV09SS1NQQUNFXCIsXG4gIDI4ODogXCJDSEFSVC5XSVpBUkRcIixcbiAgMjg5OiBcIkRFTEVURS5UT09MXCIsXG4gIDI5MDogXCJNT1ZFLlRPT0xcIixcbiAgMjkxOiBcIldPUktCT09LLlNFTEVDVFwiLFxuICAyOTI6IFwiV09SS0JPT0suQUNUSVZBVEVcIixcbiAgMjkzOiBcIkFTU0lHTi5UTy5UT09MXCIsXG4gIDI5NTogXCJDT1BZLlRPT0xcIixcbiAgMjk2OiBcIlJFU0VULlRPT0xcIixcbiAgMjk3OiBcIkNPTlNUUkFJTi5OVU1FUklDXCIsXG4gIDI5ODogXCJQQVNURS5UT09MXCIsXG4gIDMwMjogXCJXT1JLQk9PSy5ORVdcIixcbiAgMzA1OiBcIlNDRU5BUklPLkNFTExTXCIsXG4gIDMwNjogXCJTQ0VOQVJJTy5ERUxFVEVcIixcbiAgMzA3OiBcIlNDRU5BUklPLkFERFwiLFxuICAzMDg6IFwiU0NFTkFSSU8uRURJVFwiLFxuICAzMDk6IFwiU0NFTkFSSU8uU0hPV1wiLFxuICAzMTA6IFwiU0NFTkFSSU8uU0hPVy5ORVhUXCIsXG4gIDMxMTogXCJTQ0VOQVJJTy5TVU1NQVJZXCIsXG4gIDMxMjogXCJQSVZPVC5UQUJMRS5XSVpBUkRcIixcbiAgMzEzOiBcIlBJVk9ULkZJRUxELlBST1BFUlRJRVNcIixcbiAgMzE0OiBcIlBJVk9ULkZJRUxEXCIsXG4gIDMxNTogXCJQSVZPVC5JVEVNXCIsXG4gIDMxNjogXCJQSVZPVC5BREQuRklFTERTXCIsXG4gIDMxODogXCJPUFRJT05TLkNBTENVTEFUSU9OXCIsXG4gIDMxOTogXCJPUFRJT05TLkVESVRcIixcbiAgMzIwOiBcIk9QVElPTlMuVklFV1wiLFxuICAzMjE6IFwiQURESU4uTUFOQUdFUlwiLFxuICAzMjI6IFwiTUVOVS5FRElUT1JcIixcbiAgMzIzOiBcIkFUVEFDSC5UT09MQkFSU1wiLFxuICAzMjQ6IFwiVkJBQWN0aXZhdGVcIixcbiAgMzI1OiBcIk9QVElPTlMuQ0hBUlRcIixcbiAgMzI4OiBcIlZCQS5JTlNFUlQuRklMRVwiLFxuICAzMzA6IFwiVkJBLlBST0NFRFVSRS5ERUZJTklUSU9OXCIsXG4gIDMzNjogXCJST1VUSU5HLlNMSVBcIixcbiAgMzM4OiBcIlJPVVRFLkRPQ1VNRU5UXCIsXG4gIDMzOTogXCJNQUlMLkxPR09OXCIsXG4gIDM0MjogXCJJTlNFUlQuUElDVFVSRVwiLFxuICAzNDM6IFwiRURJVC5UT09MXCIsXG4gIDM0NDogXCJHQUxMRVJZLkRPVUdITlVUXCIsXG4gIDM1MDogXCJDSEFSVC5UUkVORFwiLFxuICAzNTI6IFwiUElWT1QuSVRFTS5QUk9QRVJUSUVTXCIsXG4gIDM1NDogXCJXT1JLQk9PSy5JTlNFUlRcIixcbiAgMzU1OiBcIk9QVElPTlMuVFJBTlNJVElPTlwiLFxuICAzNTY6IFwiT1BUSU9OUy5HRU5FUkFMXCIsXG4gIDM3MDogXCJGSUxURVIuQURWQU5DRURcIixcbiAgMzczOiBcIk1BSUwuQURELk1BSUxFUlwiLFxuICAzNzQ6IFwiTUFJTC5ERUxFVEUuTUFJTEVSXCIsXG4gIDM3NTogXCJNQUlMLlJFUExZXCIsXG4gIDM3NjogXCJNQUlMLlJFUExZLkFMTFwiLFxuICAzNzc6IFwiTUFJTC5GT1JXQVJEXCIsXG4gIDM3ODogXCJNQUlMLk5FWFQuTEVUVEVSXCIsXG4gIDM3OTogXCJEQVRBLkxBQkVMXCIsXG4gIDM4MDogXCJJTlNFUlQuVElUTEVcIixcbiAgMzgxOiBcIkZPTlQuUFJPUEVSVElFU1wiLFxuICAzODI6IFwiTUFDUk8uT1BUSU9OU1wiLFxuICAzODM6IFwiV09SS0JPT0suSElERVwiLFxuICAzODQ6IFwiV09SS0JPT0suVU5ISURFXCIsXG4gIDM4NTogXCJXT1JLQk9PSy5ERUxFVEVcIixcbiAgMzg2OiBcIldPUktCT09LLk5BTUVcIixcbiAgMzg4OiBcIkdBTExFUlkuQ1VTVE9NXCIsXG4gIDM5MDogXCJBREQuQ0hBUlQuQVVUT0ZPUk1BVFwiLFxuICAzOTE6IFwiREVMRVRFLkNIQVJULkFVVE9GT1JNQVRcIixcbiAgMzkyOiBcIkNIQVJULkFERC5EQVRBXCIsXG4gIDM5MzogXCJBVVRPLk9VVExJTkVcIixcbiAgMzk0OiBcIlRBQi5PUkRFUlwiLFxuICAzOTU6IFwiU0hPVy5ESUFMT0dcIixcbiAgMzk2OiBcIlNFTEVDVC5BTExcIixcbiAgMzk3OiBcIlVOR1JPVVAuU0hFRVRTXCIsXG4gIDM5ODogXCJTVUJUT1RBTC5DUkVBVEVcIixcbiAgMzk5OiBcIlNVQlRPVEFMLlJFTU9WRVwiLFxuICA0MDA6IFwiUkVOQU1FLk9CSkVDVFwiLFxuICA0MTI6IFwiV09SS0JPT0suU0NST0xMXCIsXG4gIDQxMzogXCJXT1JLQk9PSy5ORVhUXCIsXG4gIDQxNDogXCJXT1JLQk9PSy5QUkVWXCIsXG4gIDQxNTogXCJXT1JLQk9PSy5UQUIuU1BMSVRcIixcbiAgNDE2OiBcIkZVTEwuU0NSRUVOXCIsXG4gIDQxNzogXCJXT1JLQk9PSy5QUk9URUNUXCIsXG4gIDQyMDogXCJTQ1JPTExCQVIuUFJPUEVSVElFU1wiLFxuICA0MjE6IFwiUElWT1QuU0hPVy5QQUdFU1wiLFxuICA0MjI6IFwiVEVYVC5UTy5DT0xVTU5TXCIsXG4gIDQyMzogXCJGT1JNQVQuQ0hBUlRUWVBFXCIsXG4gIDQyNDogXCJMSU5LLkZPUk1BVFwiLFxuICA0MjU6IFwiVFJBQ0VSLkRJU1BMQVlcIixcbiAgNDMwOiBcIlRSQUNFUi5OQVZJR0FURVwiLFxuICA0MzE6IFwiVFJBQ0VSLkNMRUFSXCIsXG4gIDQzMjogXCJUUkFDRVIuRVJST1JcIixcbiAgNDMzOiBcIlBJVk9ULkZJRUxELkdST1VQXCIsXG4gIDQzNDogXCJQSVZPVC5GSUVMRC5VTkdST1VQXCIsXG4gIDQzNTogXCJDSEVDS0JPWC5QUk9QRVJUSUVTXCIsXG4gIDQzNjogXCJMQUJFTC5QUk9QRVJUSUVTXCIsXG4gIDQzNzogXCJMSVNUQk9YLlBST1BFUlRJRVNcIixcbiAgNDM4OiBcIkVESVRCT1guUFJPUEVSVElFU1wiLFxuICA0Mzk6IFwiUElWT1QuUkVGUkVTSFwiLFxuICA0NDA6IFwiTElOSy5DT01CT1wiLFxuICA0NDE6IFwiT1BFTi5URVhUXCIsXG4gIDQ0MjogXCJISURFLkRJQUxPR1wiLFxuICA0NDM6IFwiU0VULkRJQUxPRy5GT0NVU1wiLFxuICA0NDQ6IFwiRU5BQkxFLk9CSkVDVFwiLFxuICA0NDU6IFwiUFVTSEJVVFRPTi5QUk9QRVJUSUVTXCIsXG4gIDQ0NjogXCJTRVQuRElBTE9HLkRFRkFVTFRcIixcbiAgNDQ3OiBcIkZJTFRFUlwiLFxuICA0NDg6IFwiRklMVEVSLlNIT1cuQUxMXCIsXG4gIDQ0OTogXCJDTEVBUi5PVVRMSU5FXCIsXG4gIDQ1MDogXCJGVU5DVElPTi5XSVpBUkRcIixcbiAgNDUxOiBcIkFERC5MSVNULklURU1cIixcbiAgNDUyOiBcIlNFVC5MSVNULklURU1cIixcbiAgNDUzOiBcIlJFTU9WRS5MSVNULklURU1cIixcbiAgNDU0OiBcIlNFTEVDVC5MSVNULklURU1cIixcbiAgNDU1OiBcIlNFVC5DT05UUk9MLlZBTFVFXCIsXG4gIDQ1NjogXCJTQVZFLkNPUFkuQVNcIixcbiAgNDU4OiBcIk9QVElPTlMuTElTVFMuQUREXCIsXG4gIDQ1OTogXCJPUFRJT05TLkxJU1RTLkRFTEVURVwiLFxuICA0NjA6IFwiU0VSSUVTLkFYRVNcIixcbiAgNDYxOiBcIlNFUklFUy5YXCIsXG4gIDQ2MjogXCJTRVJJRVMuWVwiLFxuICA0NjM6IFwiRVJST1JCQVIuWFwiLFxuICA0NjQ6IFwiRVJST1JCQVIuWVwiLFxuICA0NjU6IFwiRk9STUFULkNIQVJUXCIsXG4gIDQ2NjogXCJTRVJJRVMuT1JERVJcIixcbiAgNDY3OiBcIk1BSUwuTE9HT0ZGXCIsXG4gIDQ2ODogXCJDTEVBUi5ST1VUSU5HLlNMSVBcIixcbiAgNDY5OiBcIkFQUC5BQ1RJVkFURS5NSUNST1NPRlRcIixcbiAgNDcwOiBcIk1BSUwuRURJVC5NQUlMRVJcIixcbiAgNDcxOiBcIk9OLlNIRUVUXCIsXG4gIDQ3MjogXCJTVEFOREFSRC5XSURUSFwiLFxuICA0NzM6IFwiU0NFTkFSSU8uTUVSR0VcIixcbiAgNDc0OiBcIlNVTU1BUlkuSU5GT1wiLFxuICA0NzU6IFwiRklORC5GSUxFXCIsXG4gIDQ3NjogXCJBQ1RJVkUuQ0VMTC5GT05UXCIsXG4gIDQ3NzogXCJFTkFCTEUuVElQV0laQVJEXCIsXG4gIDQ3ODogXCJWQkEuTUFLRS5BRERJTlwiLFxuICA0ODA6IFwiSU5TRVJUREFUQVRBQkxFXCIsXG4gIDQ4MTogXCJXT1JLR1JPVVAuT1BUSU9OU1wiLFxuICA0ODI6IFwiTUFJTC5TRU5ELk1BSUxFUlwiLFxuICA0ODU6IFwiQVVUT0NPUlJFQ1RcIixcbiAgNDg5OiBcIlBPU1QuRE9DVU1FTlRcIixcbiAgNDkxOiBcIlBJQ0tMSVNUXCIsXG4gIDQ5MzogXCJWSUVXLlNIT1dcIixcbiAgNDk0OiBcIlZJRVcuREVGSU5FXCIsXG4gIDQ5NTogXCJWSUVXLkRFTEVURVwiLFxuICA1MDk6IFwiU0hFRVQuQkFDS0dST1VORFwiLFxuICA1MTA6IFwiSU5TRVJULk1BUC5PQkpFQ1RcIixcbiAgNTExOiBcIk9QVElPTlMuTUVOT05PXCIsXG4gIDUxNzogXCJNU09DSEVDS1NcIixcbiAgNTE4OiBcIk5PUk1BTFwiLFxuICA1MTk6IFwiTEFZT1VUXCIsXG4gIDUyMDogXCJSTS5QUklOVC5BUkVBXCIsXG4gIDUyMTogXCJDTEVBUi5QUklOVC5BUkVBXCIsXG4gIDUyMjogXCJBREQuUFJJTlQuQVJFQVwiLFxuICA1MjM6IFwiTU9WRS5CUktcIixcbiAgNTQ1OiBcIkhJREVDVVJSLk5PVEVcIixcbiAgNTQ2OiBcIkhJREVBTEwuTk9URVNcIixcbiAgNTQ3OiBcIkRFTEVURS5OT1RFXCIsXG4gIDU0ODogXCJUUkFWRVJTRS5OT1RFU1wiLFxuICA1NDk6IFwiQUNUSVZBVEUuTk9URVNcIixcbiAgNjIwOiBcIlBST1RFQ1QuUkVWSVNJT05TXCIsXG4gIDYyMTogXCJVTlBST1RFQ1QuUkVWSVNJT05TXCIsXG4gIDY0NzogXCJPUFRJT05TLk1FXCIsXG4gIDY1MzogXCJXRUIuUFVCTElTSFwiLFxuICA2Njc6IFwiTkVXV0VCUVVFUllcIixcbiAgNjczOiBcIlBJVk9ULlRBQkxFLkNIQVJUXCIsXG4gIDc1MzogXCJPUFRJT05TLlNBVkVcIixcbiAgNzU1OiBcIk9QVElPTlMuU1BFTExcIixcbiAgODA4OiBcIkhJREVBTEwuSU5LQU5OT1RTXCJcbn07XG52YXIgRnRhYiA9IHtcbiAgMDogXCJDT1VOVFwiLFxuICAxOiBcIklGXCIsXG4gIDI6IFwiSVNOQVwiLFxuICAzOiBcIklTRVJST1JcIixcbiAgNDogXCJTVU1cIixcbiAgNTogXCJBVkVSQUdFXCIsXG4gIDY6IFwiTUlOXCIsXG4gIDc6IFwiTUFYXCIsXG4gIDg6IFwiUk9XXCIsXG4gIDk6IFwiQ09MVU1OXCIsXG4gIDEwOiBcIk5BXCIsXG4gIDExOiBcIk5QVlwiLFxuICAxMjogXCJTVERFVlwiLFxuICAxMzogXCJET0xMQVJcIixcbiAgMTQ6IFwiRklYRURcIixcbiAgMTU6IFwiU0lOXCIsXG4gIDE2OiBcIkNPU1wiLFxuICAxNzogXCJUQU5cIixcbiAgMTg6IFwiQVRBTlwiLFxuICAxOTogXCJQSVwiLFxuICAyMDogXCJTUVJUXCIsXG4gIDIxOiBcIkVYUFwiLFxuICAyMjogXCJMTlwiLFxuICAyMzogXCJMT0cxMFwiLFxuICAyNDogXCJBQlNcIixcbiAgMjU6IFwiSU5UXCIsXG4gIDI2OiBcIlNJR05cIixcbiAgMjc6IFwiUk9VTkRcIixcbiAgMjg6IFwiTE9PS1VQXCIsXG4gIDI5OiBcIklOREVYXCIsXG4gIDMwOiBcIlJFUFRcIixcbiAgMzE6IFwiTUlEXCIsXG4gIDMyOiBcIkxFTlwiLFxuICAzMzogXCJWQUxVRVwiLFxuICAzNDogXCJUUlVFXCIsXG4gIDM1OiBcIkZBTFNFXCIsXG4gIDM2OiBcIkFORFwiLFxuICAzNzogXCJPUlwiLFxuICAzODogXCJOT1RcIixcbiAgMzk6IFwiTU9EXCIsXG4gIDQwOiBcIkRDT1VOVFwiLFxuICA0MTogXCJEU1VNXCIsXG4gIDQyOiBcIkRBVkVSQUdFXCIsXG4gIDQzOiBcIkRNSU5cIixcbiAgNDQ6IFwiRE1BWFwiLFxuICA0NTogXCJEU1RERVZcIixcbiAgNDY6IFwiVkFSXCIsXG4gIDQ3OiBcIkRWQVJcIixcbiAgNDg6IFwiVEVYVFwiLFxuICA0OTogXCJMSU5FU1RcIixcbiAgNTA6IFwiVFJFTkRcIixcbiAgNTE6IFwiTE9HRVNUXCIsXG4gIDUyOiBcIkdST1dUSFwiLFxuICA1MzogXCJHT1RPXCIsXG4gIDU0OiBcIkhBTFRcIixcbiAgNTU6IFwiUkVUVVJOXCIsXG4gIDU2OiBcIlBWXCIsXG4gIDU3OiBcIkZWXCIsXG4gIDU4OiBcIk5QRVJcIixcbiAgNTk6IFwiUE1UXCIsXG4gIDYwOiBcIlJBVEVcIixcbiAgNjE6IFwiTUlSUlwiLFxuICA2MjogXCJJUlJcIixcbiAgNjM6IFwiUkFORFwiLFxuICA2NDogXCJNQVRDSFwiLFxuICA2NTogXCJEQVRFXCIsXG4gIDY2OiBcIlRJTUVcIixcbiAgNjc6IFwiREFZXCIsXG4gIDY4OiBcIk1PTlRIXCIsXG4gIDY5OiBcIllFQVJcIixcbiAgNzA6IFwiV0VFS0RBWVwiLFxuICA3MTogXCJIT1VSXCIsXG4gIDcyOiBcIk1JTlVURVwiLFxuICA3MzogXCJTRUNPTkRcIixcbiAgNzQ6IFwiTk9XXCIsXG4gIDc1OiBcIkFSRUFTXCIsXG4gIDc2OiBcIlJPV1NcIixcbiAgNzc6IFwiQ09MVU1OU1wiLFxuICA3ODogXCJPRkZTRVRcIixcbiAgNzk6IFwiQUJTUkVGXCIsXG4gIDgwOiBcIlJFTFJFRlwiLFxuICA4MTogXCJBUkdVTUVOVFwiLFxuICA4MjogXCJTRUFSQ0hcIixcbiAgODM6IFwiVFJBTlNQT1NFXCIsXG4gIDg0OiBcIkVSUk9SXCIsXG4gIDg1OiBcIlNURVBcIixcbiAgODY6IFwiVFlQRVwiLFxuICA4NzogXCJFQ0hPXCIsXG4gIDg4OiBcIlNFVC5OQU1FXCIsXG4gIDg5OiBcIkNBTExFUlwiLFxuICA5MDogXCJERVJFRlwiLFxuICA5MTogXCJXSU5ET1dTXCIsXG4gIDkyOiBcIlNFUklFU1wiLFxuICA5MzogXCJET0NVTUVOVFNcIixcbiAgOTQ6IFwiQUNUSVZFLkNFTExcIixcbiAgOTU6IFwiU0VMRUNUSU9OXCIsXG4gIDk2OiBcIlJFU1VMVFwiLFxuICA5NzogXCJBVEFOMlwiLFxuICA5ODogXCJBU0lOXCIsXG4gIDk5OiBcIkFDT1NcIixcbiAgMTAwOiBcIkNIT09TRVwiLFxuICAxMDE6IFwiSExPT0tVUFwiLFxuICAxMDI6IFwiVkxPT0tVUFwiLFxuICAxMDM6IFwiTElOS1NcIixcbiAgMTA0OiBcIklOUFVUXCIsXG4gIDEwNTogXCJJU1JFRlwiLFxuICAxMDY6IFwiR0VULkZPUk1VTEFcIixcbiAgMTA3OiBcIkdFVC5OQU1FXCIsXG4gIDEwODogXCJTRVQuVkFMVUVcIixcbiAgMTA5OiBcIkxPR1wiLFxuICAxMTA6IFwiRVhFQ1wiLFxuICAxMTE6IFwiQ0hBUlwiLFxuICAxMTI6IFwiTE9XRVJcIixcbiAgMTEzOiBcIlVQUEVSXCIsXG4gIDExNDogXCJQUk9QRVJcIixcbiAgMTE1OiBcIkxFRlRcIixcbiAgMTE2OiBcIlJJR0hUXCIsXG4gIDExNzogXCJFWEFDVFwiLFxuICAxMTg6IFwiVFJJTVwiLFxuICAxMTk6IFwiUkVQTEFDRVwiLFxuICAxMjA6IFwiU1VCU1RJVFVURVwiLFxuICAxMjE6IFwiQ09ERVwiLFxuICAxMjI6IFwiTkFNRVNcIixcbiAgMTIzOiBcIkRJUkVDVE9SWVwiLFxuICAxMjQ6IFwiRklORFwiLFxuICAxMjU6IFwiQ0VMTFwiLFxuICAxMjY6IFwiSVNFUlJcIixcbiAgMTI3OiBcIklTVEVYVFwiLFxuICAxMjg6IFwiSVNOVU1CRVJcIixcbiAgMTI5OiBcIklTQkxBTktcIixcbiAgMTMwOiBcIlRcIixcbiAgMTMxOiBcIk5cIixcbiAgMTMyOiBcIkZPUEVOXCIsXG4gIDEzMzogXCJGQ0xPU0VcIixcbiAgMTM0OiBcIkZTSVpFXCIsXG4gIDEzNTogXCJGUkVBRExOXCIsXG4gIDEzNjogXCJGUkVBRFwiLFxuICAxMzc6IFwiRldSSVRFTE5cIixcbiAgMTM4OiBcIkZXUklURVwiLFxuICAxMzk6IFwiRlBPU1wiLFxuICAxNDA6IFwiREFURVZBTFVFXCIsXG4gIDE0MTogXCJUSU1FVkFMVUVcIixcbiAgMTQyOiBcIlNMTlwiLFxuICAxNDM6IFwiU1lEXCIsXG4gIDE0NDogXCJEREJcIixcbiAgMTQ1OiBcIkdFVC5ERUZcIixcbiAgMTQ2OiBcIlJFRlRFWFRcIixcbiAgMTQ3OiBcIlRFWFRSRUZcIixcbiAgMTQ4OiBcIklORElSRUNUXCIsXG4gIDE0OTogXCJSRUdJU1RFUlwiLFxuICAxNTA6IFwiQ0FMTFwiLFxuICAxNTE6IFwiQURELkJBUlwiLFxuICAxNTI6IFwiQURELk1FTlVcIixcbiAgMTUzOiBcIkFERC5DT01NQU5EXCIsXG4gIDE1NDogXCJFTkFCTEUuQ09NTUFORFwiLFxuICAxNTU6IFwiQ0hFQ0suQ09NTUFORFwiLFxuICAxNTY6IFwiUkVOQU1FLkNPTU1BTkRcIixcbiAgMTU3OiBcIlNIT1cuQkFSXCIsXG4gIDE1ODogXCJERUxFVEUuTUVOVVwiLFxuICAxNTk6IFwiREVMRVRFLkNPTU1BTkRcIixcbiAgMTYwOiBcIkdFVC5DSEFSVC5JVEVNXCIsXG4gIDE2MTogXCJESUFMT0cuQk9YXCIsXG4gIDE2MjogXCJDTEVBTlwiLFxuICAxNjM6IFwiTURFVEVSTVwiLFxuICAxNjQ6IFwiTUlOVkVSU0VcIixcbiAgMTY1OiBcIk1NVUxUXCIsXG4gIDE2NjogXCJGSUxFU1wiLFxuICAxNjc6IFwiSVBNVFwiLFxuICAxNjg6IFwiUFBNVFwiLFxuICAxNjk6IFwiQ09VTlRBXCIsXG4gIDE3MDogXCJDQU5DRUwuS0VZXCIsXG4gIDE3MTogXCJGT1JcIixcbiAgMTcyOiBcIldISUxFXCIsXG4gIDE3MzogXCJCUkVBS1wiLFxuICAxNzQ6IFwiTkVYVFwiLFxuICAxNzU6IFwiSU5JVElBVEVcIixcbiAgMTc2OiBcIlJFUVVFU1RcIixcbiAgMTc3OiBcIlBPS0VcIixcbiAgMTc4OiBcIkVYRUNVVEVcIixcbiAgMTc5OiBcIlRFUk1JTkFURVwiLFxuICAxODA6IFwiUkVTVEFSVFwiLFxuICAxODE6IFwiSEVMUFwiLFxuICAxODI6IFwiR0VULkJBUlwiLFxuICAxODM6IFwiUFJPRFVDVFwiLFxuICAxODQ6IFwiRkFDVFwiLFxuICAxODU6IFwiR0VULkNFTExcIixcbiAgMTg2OiBcIkdFVC5XT1JLU1BBQ0VcIixcbiAgMTg3OiBcIkdFVC5XSU5ET1dcIixcbiAgMTg4OiBcIkdFVC5ET0NVTUVOVFwiLFxuICAxODk6IFwiRFBST0RVQ1RcIixcbiAgMTkwOiBcIklTTk9OVEVYVFwiLFxuICAxOTE6IFwiR0VULk5PVEVcIixcbiAgMTkyOiBcIk5PVEVcIixcbiAgMTkzOiBcIlNUREVWUFwiLFxuICAxOTQ6IFwiVkFSUFwiLFxuICAxOTU6IFwiRFNUREVWUFwiLFxuICAxOTY6IFwiRFZBUlBcIixcbiAgMTk3OiBcIlRSVU5DXCIsXG4gIDE5ODogXCJJU0xPR0lDQUxcIixcbiAgMTk5OiBcIkRDT1VOVEFcIixcbiAgMjAwOiBcIkRFTEVURS5CQVJcIixcbiAgMjAxOiBcIlVOUkVHSVNURVJcIixcbiAgMjA0OiBcIlVTRE9MTEFSXCIsXG4gIDIwNTogXCJGSU5EQlwiLFxuICAyMDY6IFwiU0VBUkNIQlwiLFxuICAyMDc6IFwiUkVQTEFDRUJcIixcbiAgMjA4OiBcIkxFRlRCXCIsXG4gIDIwOTogXCJSSUdIVEJcIixcbiAgMjEwOiBcIk1JREJcIixcbiAgMjExOiBcIkxFTkJcIixcbiAgMjEyOiBcIlJPVU5EVVBcIixcbiAgMjEzOiBcIlJPVU5ERE9XTlwiLFxuICAyMTQ6IFwiQVNDXCIsXG4gIDIxNTogXCJEQkNTXCIsXG4gIDIxNjogXCJSQU5LXCIsXG4gIDIxOTogXCJBRERSRVNTXCIsXG4gIDIyMDogXCJEQVlTMzYwXCIsXG4gIDIyMTogXCJUT0RBWVwiLFxuICAyMjI6IFwiVkRCXCIsXG4gIDIyMzogXCJFTFNFXCIsXG4gIDIyNDogXCJFTFNFLklGXCIsXG4gIDIyNTogXCJFTkQuSUZcIixcbiAgMjI2OiBcIkZPUi5DRUxMXCIsXG4gIDIyNzogXCJNRURJQU5cIixcbiAgMjI4OiBcIlNVTVBST0RVQ1RcIixcbiAgMjI5OiBcIlNJTkhcIixcbiAgMjMwOiBcIkNPU0hcIixcbiAgMjMxOiBcIlRBTkhcIixcbiAgMjMyOiBcIkFTSU5IXCIsXG4gIDIzMzogXCJBQ09TSFwiLFxuICAyMzQ6IFwiQVRBTkhcIixcbiAgMjM1OiBcIkRHRVRcIixcbiAgMjM2OiBcIkNSRUFURS5PQkpFQ1RcIixcbiAgMjM3OiBcIlZPTEFUSUxFXCIsXG4gIDIzODogXCJMQVNULkVSUk9SXCIsXG4gIDIzOTogXCJDVVNUT00uVU5ET1wiLFxuICAyNDA6IFwiQ1VTVE9NLlJFUEVBVFwiLFxuICAyNDE6IFwiRk9STVVMQS5DT05WRVJUXCIsXG4gIDI0MjogXCJHRVQuTElOSy5JTkZPXCIsXG4gIDI0MzogXCJURVhULkJPWFwiLFxuICAyNDQ6IFwiSU5GT1wiLFxuICAyNDU6IFwiR1JPVVBcIixcbiAgMjQ2OiBcIkdFVC5PQkpFQ1RcIixcbiAgMjQ3OiBcIkRCXCIsXG4gIDI0ODogXCJQQVVTRVwiLFxuICAyNTE6IFwiUkVTVU1FXCIsXG4gIDI1MjogXCJGUkVRVUVOQ1lcIixcbiAgMjUzOiBcIkFERC5UT09MQkFSXCIsXG4gIDI1NDogXCJERUxFVEUuVE9PTEJBUlwiLFxuICAyNTU6IFwiVXNlclwiLFxuICAyNTY6IFwiUkVTRVQuVE9PTEJBUlwiLFxuICAyNTc6IFwiRVZBTFVBVEVcIixcbiAgMjU4OiBcIkdFVC5UT09MQkFSXCIsXG4gIDI1OTogXCJHRVQuVE9PTFwiLFxuICAyNjA6IFwiU1BFTExJTkcuQ0hFQ0tcIixcbiAgMjYxOiBcIkVSUk9SLlRZUEVcIixcbiAgMjYyOiBcIkFQUC5USVRMRVwiLFxuICAyNjM6IFwiV0lORE9XLlRJVExFXCIsXG4gIDI2NDogXCJTQVZFLlRPT0xCQVJcIixcbiAgMjY1OiBcIkVOQUJMRS5UT09MXCIsXG4gIDI2NjogXCJQUkVTUy5UT09MXCIsXG4gIDI2NzogXCJSRUdJU1RFUi5JRFwiLFxuICAyNjg6IFwiR0VULldPUktCT09LXCIsXG4gIDI2OTogXCJBVkVERVZcIixcbiAgMjcwOiBcIkJFVEFESVNUXCIsXG4gIDI3MTogXCJHQU1NQUxOXCIsXG4gIDI3MjogXCJCRVRBSU5WXCIsXG4gIDI3MzogXCJCSU5PTURJU1RcIixcbiAgMjc0OiBcIkNISURJU1RcIixcbiAgMjc1OiBcIkNISUlOVlwiLFxuICAyNzY6IFwiQ09NQklOXCIsXG4gIDI3NzogXCJDT05GSURFTkNFXCIsXG4gIDI3ODogXCJDUklUQklOT01cIixcbiAgMjc5OiBcIkVWRU5cIixcbiAgMjgwOiBcIkVYUE9ORElTVFwiLFxuICAyODE6IFwiRkRJU1RcIixcbiAgMjgyOiBcIkZJTlZcIixcbiAgMjgzOiBcIkZJU0hFUlwiLFxuICAyODQ6IFwiRklTSEVSSU5WXCIsXG4gIDI4NTogXCJGTE9PUlwiLFxuICAyODY6IFwiR0FNTUFESVNUXCIsXG4gIDI4NzogXCJHQU1NQUlOVlwiLFxuICAyODg6IFwiQ0VJTElOR1wiLFxuICAyODk6IFwiSFlQR0VPTURJU1RcIixcbiAgMjkwOiBcIkxPR05PUk1ESVNUXCIsXG4gIDI5MTogXCJMT0dJTlZcIixcbiAgMjkyOiBcIk5FR0JJTk9NRElTVFwiLFxuICAyOTM6IFwiTk9STURJU1RcIixcbiAgMjk0OiBcIk5PUk1TRElTVFwiLFxuICAyOTU6IFwiTk9STUlOVlwiLFxuICAyOTY6IFwiTk9STVNJTlZcIixcbiAgMjk3OiBcIlNUQU5EQVJESVpFXCIsXG4gIDI5ODogXCJPRERcIixcbiAgMjk5OiBcIlBFUk1VVFwiLFxuICAzMDA6IFwiUE9JU1NPTlwiLFxuICAzMDE6IFwiVERJU1RcIixcbiAgMzAyOiBcIldFSUJVTExcIixcbiAgMzAzOiBcIlNVTVhNWTJcIixcbiAgMzA0OiBcIlNVTVgyTVkyXCIsXG4gIDMwNTogXCJTVU1YMlBZMlwiLFxuICAzMDY6IFwiQ0hJVEVTVFwiLFxuICAzMDc6IFwiQ09SUkVMXCIsXG4gIDMwODogXCJDT1ZBUlwiLFxuICAzMDk6IFwiRk9SRUNBU1RcIixcbiAgMzEwOiBcIkZURVNUXCIsXG4gIDMxMTogXCJJTlRFUkNFUFRcIixcbiAgMzEyOiBcIlBFQVJTT05cIixcbiAgMzEzOiBcIlJTUVwiLFxuICAzMTQ6IFwiU1RFWVhcIixcbiAgMzE1OiBcIlNMT1BFXCIsXG4gIDMxNjogXCJUVEVTVFwiLFxuICAzMTc6IFwiUFJPQlwiLFxuICAzMTg6IFwiREVWU1FcIixcbiAgMzE5OiBcIkdFT01FQU5cIixcbiAgMzIwOiBcIkhBUk1FQU5cIixcbiAgMzIxOiBcIlNVTVNRXCIsXG4gIDMyMjogXCJLVVJUXCIsXG4gIDMyMzogXCJTS0VXXCIsXG4gIDMyNDogXCJaVEVTVFwiLFxuICAzMjU6IFwiTEFSR0VcIixcbiAgMzI2OiBcIlNNQUxMXCIsXG4gIDMyNzogXCJRVUFSVElMRVwiLFxuICAzMjg6IFwiUEVSQ0VOVElMRVwiLFxuICAzMjk6IFwiUEVSQ0VOVFJBTktcIixcbiAgMzMwOiBcIk1PREVcIixcbiAgMzMxOiBcIlRSSU1NRUFOXCIsXG4gIDMzMjogXCJUSU5WXCIsXG4gIDMzNDogXCJNT1ZJRS5DT01NQU5EXCIsXG4gIDMzNTogXCJHRVQuTU9WSUVcIixcbiAgMzM2OiBcIkNPTkNBVEVOQVRFXCIsXG4gIDMzNzogXCJQT1dFUlwiLFxuICAzMzg6IFwiUElWT1QuQURELkRBVEFcIixcbiAgMzM5OiBcIkdFVC5QSVZPVC5UQUJMRVwiLFxuICAzNDA6IFwiR0VULlBJVk9ULkZJRUxEXCIsXG4gIDM0MTogXCJHRVQuUElWT1QuSVRFTVwiLFxuICAzNDI6IFwiUkFESUFOU1wiLFxuICAzNDM6IFwiREVHUkVFU1wiLFxuICAzNDQ6IFwiU1VCVE9UQUxcIixcbiAgMzQ1OiBcIlNVTUlGXCIsXG4gIDM0NjogXCJDT1VOVElGXCIsXG4gIDM0NzogXCJDT1VOVEJMQU5LXCIsXG4gIDM0ODogXCJTQ0VOQVJJTy5HRVRcIixcbiAgMzQ5OiBcIk9QVElPTlMuTElTVFMuR0VUXCIsXG4gIDM1MDogXCJJU1BNVFwiLFxuICAzNTE6IFwiREFURURJRlwiLFxuICAzNTI6IFwiREFURVNUUklOR1wiLFxuICAzNTM6IFwiTlVNQkVSU1RSSU5HXCIsXG4gIDM1NDogXCJST01BTlwiLFxuICAzNTU6IFwiT1BFTi5ESUFMT0dcIixcbiAgMzU2OiBcIlNBVkUuRElBTE9HXCIsXG4gIDM1NzogXCJWSUVXLkdFVFwiLFxuICAzNTg6IFwiR0VUUElWT1REQVRBXCIsXG4gIDM1OTogXCJIWVBFUkxJTktcIixcbiAgMzYwOiBcIlBIT05FVElDXCIsXG4gIDM2MTogXCJBVkVSQUdFQVwiLFxuICAzNjI6IFwiTUFYQVwiLFxuICAzNjM6IFwiTUlOQVwiLFxuICAzNjQ6IFwiU1RERVZQQVwiLFxuICAzNjU6IFwiVkFSUEFcIixcbiAgMzY2OiBcIlNUREVWQVwiLFxuICAzNjc6IFwiVkFSQVwiLFxuICAzNjg6IFwiQkFIVFRFWFRcIixcbiAgMzY5OiBcIlRIQUlEQVlPRldFRUtcIixcbiAgMzcwOiBcIlRIQUlESUdJVFwiLFxuICAzNzE6IFwiVEhBSU1PTlRIT0ZZRUFSXCIsXG4gIDM3MjogXCJUSEFJTlVNU09VTkRcIixcbiAgMzczOiBcIlRIQUlOVU1TVFJJTkdcIixcbiAgMzc0OiBcIlRIQUlTVFJJTkdMRU5HVEhcIixcbiAgMzc1OiBcIklTVEhBSURJR0lUXCIsXG4gIDM3NjogXCJST1VOREJBSFRET1dOXCIsXG4gIDM3NzogXCJST1VOREJBSFRVUFwiLFxuICAzNzg6IFwiVEhBSVlFQVJcIixcbiAgMzc5OiBcIlJURFwiLFxuICAzODA6IFwiQ1VCRVZBTFVFXCIsXG4gIDM4MTogXCJDVUJFTUVNQkVSXCIsXG4gIDM4MjogXCJDVUJFTUVNQkVSUFJPUEVSVFlcIixcbiAgMzgzOiBcIkNVQkVSQU5LRURNRU1CRVJcIixcbiAgMzg0OiBcIkhFWDJCSU5cIixcbiAgMzg1OiBcIkhFWDJERUNcIixcbiAgMzg2OiBcIkhFWDJPQ1RcIixcbiAgMzg3OiBcIkRFQzJCSU5cIixcbiAgMzg4OiBcIkRFQzJIRVhcIixcbiAgMzg5OiBcIkRFQzJPQ1RcIixcbiAgMzkwOiBcIk9DVDJCSU5cIixcbiAgMzkxOiBcIk9DVDJIRVhcIixcbiAgMzkyOiBcIk9DVDJERUNcIixcbiAgMzkzOiBcIkJJTjJERUNcIixcbiAgMzk0OiBcIkJJTjJPQ1RcIixcbiAgMzk1OiBcIkJJTjJIRVhcIixcbiAgMzk2OiBcIklNU1VCXCIsXG4gIDM5NzogXCJJTURJVlwiLFxuICAzOTg6IFwiSU1QT1dFUlwiLFxuICAzOTk6IFwiSU1BQlNcIixcbiAgNDAwOiBcIklNU1FSVFwiLFxuICA0MDE6IFwiSU1MTlwiLFxuICA0MDI6IFwiSU1MT0cyXCIsXG4gIDQwMzogXCJJTUxPRzEwXCIsXG4gIDQwNDogXCJJTVNJTlwiLFxuICA0MDU6IFwiSU1DT1NcIixcbiAgNDA2OiBcIklNRVhQXCIsXG4gIDQwNzogXCJJTUFSR1VNRU5UXCIsXG4gIDQwODogXCJJTUNPTkpVR0FURVwiLFxuICA0MDk6IFwiSU1BR0lOQVJZXCIsXG4gIDQxMDogXCJJTVJFQUxcIixcbiAgNDExOiBcIkNPTVBMRVhcIixcbiAgNDEyOiBcIklNU1VNXCIsXG4gIDQxMzogXCJJTVBST0RVQ1RcIixcbiAgNDE0OiBcIlNFUklFU1NVTVwiLFxuICA0MTU6IFwiRkFDVERPVUJMRVwiLFxuICA0MTY6IFwiU1FSVFBJXCIsXG4gIDQxNzogXCJRVU9USUVOVFwiLFxuICA0MTg6IFwiREVMVEFcIixcbiAgNDE5OiBcIkdFU1RFUFwiLFxuICA0MjA6IFwiSVNFVkVOXCIsXG4gIDQyMTogXCJJU09ERFwiLFxuICA0MjI6IFwiTVJPVU5EXCIsXG4gIDQyMzogXCJFUkZcIixcbiAgNDI0OiBcIkVSRkNcIixcbiAgNDI1OiBcIkJFU1NFTEpcIixcbiAgNDI2OiBcIkJFU1NFTEtcIixcbiAgNDI3OiBcIkJFU1NFTFlcIixcbiAgNDI4OiBcIkJFU1NFTElcIixcbiAgNDI5OiBcIlhJUlJcIixcbiAgNDMwOiBcIlhOUFZcIixcbiAgNDMxOiBcIlBSSUNFTUFUXCIsXG4gIDQzMjogXCJZSUVMRE1BVFwiLFxuICA0MzM6IFwiSU5UUkFURVwiLFxuICA0MzQ6IFwiUkVDRUlWRURcIixcbiAgNDM1OiBcIkRJU0NcIixcbiAgNDM2OiBcIlBSSUNFRElTQ1wiLFxuICA0Mzc6IFwiWUlFTERESVNDXCIsXG4gIDQzODogXCJUQklMTEVRXCIsXG4gIDQzOTogXCJUQklMTFBSSUNFXCIsXG4gIDQ0MDogXCJUQklMTFlJRUxEXCIsXG4gIDQ0MTogXCJQUklDRVwiLFxuICA0NDI6IFwiWUlFTERcIixcbiAgNDQzOiBcIkRPTExBUkRFXCIsXG4gIDQ0NDogXCJET0xMQVJGUlwiLFxuICA0NDU6IFwiTk9NSU5BTFwiLFxuICA0NDY6IFwiRUZGRUNUXCIsXG4gIDQ0NzogXCJDVU1QUklOQ1wiLFxuICA0NDg6IFwiQ1VNSVBNVFwiLFxuICA0NDk6IFwiRURBVEVcIixcbiAgNDUwOiBcIkVPTU9OVEhcIixcbiAgNDUxOiBcIllFQVJGUkFDXCIsXG4gIDQ1MjogXCJDT1VQREFZQlNcIixcbiAgNDUzOiBcIkNPVVBEQVlTXCIsXG4gIDQ1NDogXCJDT1VQREFZU05DXCIsXG4gIDQ1NTogXCJDT1VQTkNEXCIsXG4gIDQ1NjogXCJDT1VQTlVNXCIsXG4gIDQ1NzogXCJDT1VQUENEXCIsXG4gIDQ1ODogXCJEVVJBVElPTlwiLFxuICA0NTk6IFwiTURVUkFUSU9OXCIsXG4gIDQ2MDogXCJPRERMUFJJQ0VcIixcbiAgNDYxOiBcIk9ERExZSUVMRFwiLFxuICA0NjI6IFwiT0RERlBSSUNFXCIsXG4gIDQ2MzogXCJPRERGWUlFTERcIixcbiAgNDY0OiBcIlJBTkRCRVRXRUVOXCIsXG4gIDQ2NTogXCJXRUVLTlVNXCIsXG4gIDQ2NjogXCJBTU9SREVHUkNcIixcbiAgNDY3OiBcIkFNT1JMSU5DXCIsXG4gIDQ2ODogXCJDT05WRVJUXCIsXG4gIDcyNDogXCJTSEVFVEpTXCIsXG4gIDQ2OTogXCJBQ0NSSU5UXCIsXG4gIDQ3MDogXCJBQ0NSSU5UTVwiLFxuICA0NzE6IFwiV09SS0RBWVwiLFxuICA0NzI6IFwiTkVUV09SS0RBWVNcIixcbiAgNDczOiBcIkdDRFwiLFxuICA0NzQ6IFwiTVVMVElOT01JQUxcIixcbiAgNDc1OiBcIkxDTVwiLFxuICA0NzY6IFwiRlZTQ0hFRFVMRVwiLFxuICA0Nzc6IFwiQ1VCRUtQSU1FTUJFUlwiLFxuICA0Nzg6IFwiQ1VCRVNFVFwiLFxuICA0Nzk6IFwiQ1VCRVNFVENPVU5UXCIsXG4gIDQ4MDogXCJJRkVSUk9SXCIsXG4gIDQ4MTogXCJDT1VOVElGU1wiLFxuICA0ODI6IFwiU1VNSUZTXCIsXG4gIDQ4MzogXCJBVkVSQUdFSUZcIixcbiAgNDg0OiBcIkFWRVJBR0VJRlNcIlxufTtcbnZhciBGdGFiQXJnYyA9IHtcbiAgMjogMSxcbiAgMzogMSxcbiAgMTA6IDAsXG4gIDE1OiAxLFxuICAxNjogMSxcbiAgMTc6IDEsXG4gIDE4OiAxLFxuICAxOTogMCxcbiAgMjA6IDEsXG4gIDIxOiAxLFxuICAyMjogMSxcbiAgMjM6IDEsXG4gIDI0OiAxLFxuICAyNTogMSxcbiAgMjY6IDEsXG4gIDI3OiAyLFxuICAzMDogMixcbiAgMzE6IDMsXG4gIDMyOiAxLFxuICAzMzogMSxcbiAgMzQ6IDAsXG4gIDM1OiAwLFxuICAzODogMSxcbiAgMzk6IDIsXG4gIDQwOiAzLFxuICA0MTogMyxcbiAgNDI6IDMsXG4gIDQzOiAzLFxuICA0NDogMyxcbiAgNDU6IDMsXG4gIDQ3OiAzLFxuICA0ODogMixcbiAgNTM6IDEsXG4gIDYxOiAzLFxuICA2MzogMCxcbiAgNjU6IDMsXG4gIDY2OiAzLFxuICA2NzogMSxcbiAgNjg6IDEsXG4gIDY5OiAxLFxuICA3MDogMSxcbiAgNzE6IDEsXG4gIDcyOiAxLFxuICA3MzogMSxcbiAgNzQ6IDAsXG4gIDc1OiAxLFxuICA3NjogMSxcbiAgNzc6IDEsXG4gIDc5OiAyLFxuICA4MDogMixcbiAgODM6IDEsXG4gIDg1OiAwLFxuICA4NjogMSxcbiAgODk6IDAsXG4gIDkwOiAxLFxuICA5NDogMCxcbiAgOTU6IDAsXG4gIDk3OiAyLFxuICA5ODogMSxcbiAgOTk6IDEsXG4gIDEwMTogMyxcbiAgMTAyOiAzLFxuICAxMDU6IDEsXG4gIDEwNjogMSxcbiAgMTA4OiAyLFxuICAxMTE6IDEsXG4gIDExMjogMSxcbiAgMTEzOiAxLFxuICAxMTQ6IDEsXG4gIDExNzogMixcbiAgMTE4OiAxLFxuICAxMTk6IDQsXG4gIDEyMTogMSxcbiAgMTI2OiAxLFxuICAxMjc6IDEsXG4gIDEyODogMSxcbiAgMTI5OiAxLFxuICAxMzA6IDEsXG4gIDEzMTogMSxcbiAgMTMzOiAxLFxuICAxMzQ6IDEsXG4gIDEzNTogMSxcbiAgMTM2OiAyLFxuICAxMzc6IDIsXG4gIDEzODogMixcbiAgMTQwOiAxLFxuICAxNDE6IDEsXG4gIDE0MjogMyxcbiAgMTQzOiA0LFxuICAxNDQ6IDQsXG4gIDE2MTogMSxcbiAgMTYyOiAxLFxuICAxNjM6IDEsXG4gIDE2NDogMSxcbiAgMTY1OiAyLFxuICAxNzI6IDEsXG4gIDE3NTogMixcbiAgMTc2OiAyLFxuICAxNzc6IDMsXG4gIDE3ODogMixcbiAgMTc5OiAxLFxuICAxODQ6IDEsXG4gIDE4NjogMSxcbiAgMTg5OiAzLFxuICAxOTA6IDEsXG4gIDE5NTogMyxcbiAgMTk2OiAzLFxuICAxOTc6IDEsXG4gIDE5ODogMSxcbiAgMTk5OiAzLFxuICAyMDE6IDEsXG4gIDIwNzogNCxcbiAgMjEwOiAzLFxuICAyMTE6IDEsXG4gIDIxMjogMixcbiAgMjEzOiAyLFxuICAyMTQ6IDEsXG4gIDIxNTogMSxcbiAgMjI1OiAwLFxuICAyMjk6IDEsXG4gIDIzMDogMSxcbiAgMjMxOiAxLFxuICAyMzI6IDEsXG4gIDIzMzogMSxcbiAgMjM0OiAxLFxuICAyMzU6IDMsXG4gIDI0NDogMSxcbiAgMjQ3OiA0LFxuICAyNTI6IDIsXG4gIDI1NzogMSxcbiAgMjYxOiAxLFxuICAyNzE6IDEsXG4gIDI3MzogNCxcbiAgMjc0OiAyLFxuICAyNzU6IDIsXG4gIDI3NjogMixcbiAgMjc3OiAzLFxuICAyNzg6IDMsXG4gIDI3OTogMSxcbiAgMjgwOiAzLFxuICAyODE6IDMsXG4gIDI4MjogMyxcbiAgMjgzOiAxLFxuICAyODQ6IDEsXG4gIDI4NTogMixcbiAgMjg2OiA0LFxuICAyODc6IDMsXG4gIDI4ODogMixcbiAgMjg5OiA0LFxuICAyOTA6IDMsXG4gIDI5MTogMyxcbiAgMjkyOiAzLFxuICAyOTM6IDQsXG4gIDI5NDogMSxcbiAgMjk1OiAzLFxuICAyOTY6IDEsXG4gIDI5NzogMyxcbiAgMjk4OiAxLFxuICAyOTk6IDIsXG4gIDMwMDogMyxcbiAgMzAxOiAzLFxuICAzMDI6IDQsXG4gIDMwMzogMixcbiAgMzA0OiAyLFxuICAzMDU6IDIsXG4gIDMwNjogMixcbiAgMzA3OiAyLFxuICAzMDg6IDIsXG4gIDMwOTogMyxcbiAgMzEwOiAyLFxuICAzMTE6IDIsXG4gIDMxMjogMixcbiAgMzEzOiAyLFxuICAzMTQ6IDIsXG4gIDMxNTogMixcbiAgMzE2OiA0LFxuICAzMjU6IDIsXG4gIDMyNjogMixcbiAgMzI3OiAyLFxuICAzMjg6IDIsXG4gIDMzMTogMixcbiAgMzMyOiAyLFxuICAzMzc6IDIsXG4gIDM0MjogMSxcbiAgMzQzOiAxLFxuICAzNDY6IDIsXG4gIDM0NzogMSxcbiAgMzUwOiA0LFxuICAzNTE6IDMsXG4gIDM1MjogMSxcbiAgMzUzOiAyLFxuICAzNjA6IDEsXG4gIDM2ODogMSxcbiAgMzY5OiAxLFxuICAzNzA6IDEsXG4gIDM3MTogMSxcbiAgMzcyOiAxLFxuICAzNzM6IDEsXG4gIDM3NDogMSxcbiAgMzc1OiAxLFxuICAzNzY6IDEsXG4gIDM3NzogMSxcbiAgMzc4OiAxLFxuICAzODI6IDMsXG4gIDM4NTogMSxcbiAgMzkyOiAxLFxuICAzOTM6IDEsXG4gIDM5NjogMixcbiAgMzk3OiAyLFxuICAzOTg6IDIsXG4gIDM5OTogMSxcbiAgNDAwOiAxLFxuICA0MDE6IDEsXG4gIDQwMjogMSxcbiAgNDAzOiAxLFxuICA0MDQ6IDEsXG4gIDQwNTogMSxcbiAgNDA2OiAxLFxuICA0MDc6IDEsXG4gIDQwODogMSxcbiAgNDA5OiAxLFxuICA0MTA6IDEsXG4gIDQxNDogNCxcbiAgNDE1OiAxLFxuICA0MTY6IDEsXG4gIDQxNzogMixcbiAgNDIwOiAxLFxuICA0MjE6IDEsXG4gIDQyMjogMixcbiAgNDI0OiAxLFxuICA0MjU6IDIsXG4gIDQyNjogMixcbiAgNDI3OiAyLFxuICA0Mjg6IDIsXG4gIDQzMDogMyxcbiAgNDM4OiAzLFxuICA0Mzk6IDMsXG4gIDQ0MDogMyxcbiAgNDQzOiAyLFxuICA0NDQ6IDIsXG4gIDQ0NTogMixcbiAgNDQ2OiAyLFxuICA0NDc6IDYsXG4gIDQ0ODogNixcbiAgNDQ5OiAyLFxuICA0NTA6IDIsXG4gIDQ2NDogMixcbiAgNDY4OiAzLFxuICA0NzY6IDIsXG4gIDQ3OTogMSxcbiAgNDgwOiAyLFxuICA2NTUzNTogMFxufTtcbi8qIFBhcnQgMyBUT0RPOiBhY3R1YWxseSBwYXJzZSBmb3JtdWxhZSAqL1xuZnVuY3Rpb24gb2RzX3RvX2NzZl9mb3JtdWxhKGYvKjpzdHJpbmcqLykvKjpzdHJpbmcqLyB7XG5cdGlmKGYuc2xpY2UoMCwzKSA9PSBcIm9mOlwiKSBmID0gZi5zbGljZSgzKTtcblx0LyogNS4yIEJhc2ljIEV4cHJlc3Npb25zICovXG5cdGlmKGYuY2hhckNvZGVBdCgwKSA9PSA2MSkge1xuXHRcdGYgPSBmLnNsaWNlKDEpO1xuXHRcdGlmKGYuY2hhckNvZGVBdCgwKSA9PSA2MSkgZiA9IGYuc2xpY2UoMSk7XG5cdH1cblx0ZiA9IGYucmVwbGFjZSgvQ09NXFwuTUlDUk9TT0ZUXFwuL2csIFwiXCIpO1xuXHQvKiBQYXJ0IDMgU2VjdGlvbiA1LjggUmVmZXJlbmNlcyAqL1xuXHRmID0gZi5yZXBsYWNlKC9cXFsoKD86XFwuW0EtWl0rWzAtOV0rKSg/OjpcXC5bQS1aXStbMC05XSspPylcXF0vZywgZnVuY3Rpb24oJCQsICQxKSB7IHJldHVybiAkMS5yZXBsYWNlKC9cXC4vZyxcIlwiKTsgfSk7XG5cdC8qIFRPRE86IHNvbWV0aGluZyBvdGhlciB0aGFuIHRoaXMgKi9cblx0ZiA9IGYucmVwbGFjZSgvXFxbLigjW0EtWl0qWz8hXSlcXF0vZywgXCIkMVwiKTtcblx0cmV0dXJuIGYucmVwbGFjZSgvWzt+XS9nLFwiLFwiKS5yZXBsYWNlKC9cXHwvZyxcIjtcIik7XG59XG5cbmZ1bmN0aW9uIGNzZl90b19vZHNfZm9ybXVsYShmLyo6c3RyaW5nKi8pLyo6c3RyaW5nKi8ge1xuXHR2YXIgbyA9IFwib2Y6PVwiICsgZi5yZXBsYWNlKGNyZWZyZWdleCwgXCIkMVsuJDIkMyQ0JDVdXCIpLnJlcGxhY2UoL1xcXTpcXFsvZyxcIjpcIik7XG5cdC8qIFRPRE86IHNvbWV0aGluZyBvdGhlciB0aGFuIHRoaXMgKi9cblx0cmV0dXJuIG8ucmVwbGFjZSgvOy9nLCBcInxcIikucmVwbGFjZSgvLC9nLFwiO1wiKTtcbn1cblxuZnVuY3Rpb24gb2RzX3RvX2NzZl8zRChyLyo6c3RyaW5nKi8pLyo6W3N0cmluZywgc3RyaW5nXSovIHtcblx0dmFyIGEgPSByLnNwbGl0KFwiOlwiKTtcblx0dmFyIHMgPSBhWzBdLnNwbGl0KFwiLlwiKVswXTtcblx0cmV0dXJuIFtzLCBhWzBdLnNwbGl0KFwiLlwiKVsxXSArIChhLmxlbmd0aCA+IDEgPyAoXCI6XCIgKyAoYVsxXS5zcGxpdChcIi5cIilbMV0gfHwgYVsxXS5zcGxpdChcIi5cIilbMF0pKSA6IFwiXCIpXTtcbn1cblxuZnVuY3Rpb24gY3NmX3RvX29kc18zRChyLyo6c3RyaW5nKi8pLyo6c3RyaW5nKi8ge1xuXHRyZXR1cm4gci5yZXBsYWNlKC9cXC4vLFwiIVwiKTtcbn1cblxudmFyIHN0cnMgPSB7fTsgLy8gc2hhcmVkIHN0cmluZ3NcbnZhciBfc3Nmb3B0cyA9IHt9OyAvLyBzcHJlYWRzaGVldCBmb3JtYXR0aW5nIG9wdGlvbnNcblxuXG4vKmdsb2JhbCBNYXAgKi9cbnZhciBicm93c2VyX2hhc19NYXAgPSB0eXBlb2YgTWFwICE9PSAndW5kZWZpbmVkJztcblxuZnVuY3Rpb24gZ2V0X3NzdF9pZChzc3QvKjpTU1QqLywgc3RyLyo6c3RyaW5nKi8sIHJldikvKjpudW1iZXIqLyB7XG5cdHZhciBpID0gMCwgbGVuID0gc3N0Lmxlbmd0aDtcblx0aWYocmV2KSB7XG5cdFx0aWYoYnJvd3Nlcl9oYXNfTWFwID8gcmV2LmhhcyhzdHIpIDogT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKHJldiwgc3RyKSkge1xuXHRcdFx0dmFyIHJldmFyciA9IGJyb3dzZXJfaGFzX01hcCA/IHJldi5nZXQoc3RyKSA6IHJldltzdHJdO1xuXHRcdFx0Zm9yKDsgaSA8IHJldmFyci5sZW5ndGg7ICsraSkge1xuXHRcdFx0XHRpZihzc3RbcmV2YXJyW2ldXS50ID09PSBzdHIpIHsgc3N0LkNvdW50ICsrOyByZXR1cm4gcmV2YXJyW2ldOyB9XG5cdFx0XHR9XG5cdFx0fVxuXHR9IGVsc2UgZm9yKDsgaSA8IGxlbjsgKytpKSB7XG5cdFx0aWYoc3N0W2ldLnQgPT09IHN0cikgeyBzc3QuQ291bnQgKys7IHJldHVybiBpOyB9XG5cdH1cblx0c3N0W2xlbl0gPSAoe3Q6c3RyfS8qOmFueSovKTsgc3N0LkNvdW50ICsrOyBzc3QuVW5pcXVlICsrO1xuXHRpZihyZXYpIHtcblx0XHRpZihicm93c2VyX2hhc19NYXApIHtcblx0XHRcdGlmKCFyZXYuaGFzKHN0cikpIHJldi5zZXQoc3RyLCBbXSk7XG5cdFx0XHRyZXYuZ2V0KHN0cikucHVzaChsZW4pO1xuXHRcdH0gZWxzZSB7XG5cdFx0XHRpZighT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKHJldiwgc3RyKSkgcmV2W3N0cl0gPSBbXTtcblx0XHRcdHJldltzdHJdLnB1c2gobGVuKTtcblx0XHR9XG5cdH1cblx0cmV0dXJuIGxlbjtcbn1cblxuZnVuY3Rpb24gY29sX29ial93KEMvKjpudW1iZXIqLywgY29sKSB7XG5cdHZhciBwID0gKHttaW46QysxLG1heDpDKzF9Lyo6YW55Ki8pO1xuXHQvKiB3Y2ggKGNoYXJzKSwgd3B4IChwaXhlbHMpICovXG5cdHZhciB3Y2ggPSAtMTtcblx0aWYoY29sLk1EVykgTURXID0gY29sLk1EVztcblx0aWYoY29sLndpZHRoICE9IG51bGwpIHAuY3VzdG9tV2lkdGggPSAxO1xuXHRlbHNlIGlmKGNvbC53cHggIT0gbnVsbCkgd2NoID0gcHgyY2hhcihjb2wud3B4KTtcblx0ZWxzZSBpZihjb2wud2NoICE9IG51bGwpIHdjaCA9IGNvbC53Y2g7XG5cdGlmKHdjaCA+IC0xKSB7IHAud2lkdGggPSBjaGFyMndpZHRoKHdjaCk7IHAuY3VzdG9tV2lkdGggPSAxOyB9XG5cdGVsc2UgaWYoY29sLndpZHRoICE9IG51bGwpIHAud2lkdGggPSBjb2wud2lkdGg7XG5cdGlmKGNvbC5oaWRkZW4pIHAuaGlkZGVuID0gdHJ1ZTtcblx0aWYoY29sLmxldmVsICE9IG51bGwpIHsgcC5vdXRsaW5lTGV2ZWwgPSBwLmxldmVsID0gY29sLmxldmVsOyB9XG5cdHJldHVybiBwO1xufVxuXG5mdW5jdGlvbiBkZWZhdWx0X21hcmdpbnMobWFyZ2lucy8qOk1hcmdpbnMqLywgbW9kZS8qOj9zdHJpbmcqLykge1xuXHRpZighbWFyZ2lucykgcmV0dXJuO1xuXHR2YXIgZGVmcyA9IFswLjcsIDAuNywgMC43NSwgMC43NSwgMC4zLCAwLjNdO1xuXHRpZihtb2RlID09ICd4bG1sJykgZGVmcyA9IFsxLCAxLCAxLCAxLCAwLjUsIDAuNV07XG5cdGlmKG1hcmdpbnMubGVmdCAgID09IG51bGwpIG1hcmdpbnMubGVmdCAgID0gZGVmc1swXTtcblx0aWYobWFyZ2lucy5yaWdodCAgPT0gbnVsbCkgbWFyZ2lucy5yaWdodCAgPSBkZWZzWzFdO1xuXHRpZihtYXJnaW5zLnRvcCAgICA9PSBudWxsKSBtYXJnaW5zLnRvcCAgICA9IGRlZnNbMl07XG5cdGlmKG1hcmdpbnMuYm90dG9tID09IG51bGwpIG1hcmdpbnMuYm90dG9tID0gZGVmc1szXTtcblx0aWYobWFyZ2lucy5oZWFkZXIgPT0gbnVsbCkgbWFyZ2lucy5oZWFkZXIgPSBkZWZzWzRdO1xuXHRpZihtYXJnaW5zLmZvb3RlciA9PSBudWxsKSBtYXJnaW5zLmZvb3RlciA9IGRlZnNbNV07XG59XG5cbmZ1bmN0aW9uIGdldF9jZWxsX3N0eWxlKHN0eWxlcy8qOkFycmF5PGFueT4qLywgY2VsbC8qOkNlbGwqLywgb3B0cykge1xuXHR2YXIgeiA9IG9wdHMucmV2c3NmW2NlbGwueiAhPSBudWxsID8gY2VsbC56IDogXCJHZW5lcmFsXCJdO1xuXHR2YXIgaSA9IDB4M2MsIGxlbiA9IHN0eWxlcy5sZW5ndGg7XG5cdGlmKHogPT0gbnVsbCAmJiBvcHRzLnNzZikge1xuXHRcdGZvcig7IGkgPCAweDE4ODsgKytpKSBpZihvcHRzLnNzZltpXSA9PSBudWxsKSB7XG5cdFx0XHRTU0ZfbG9hZChjZWxsLnosIGkpO1xuXHRcdFx0Ly8gJEZsb3dJZ25vcmVcblx0XHRcdG9wdHMuc3NmW2ldID0gY2VsbC56O1xuXHRcdFx0b3B0cy5yZXZzc2ZbY2VsbC56XSA9IHogPSBpO1xuXHRcdFx0YnJlYWs7XG5cdFx0fVxuXHR9XG5cdGZvcihpID0gMDsgaSAhPSBsZW47ICsraSkgaWYoc3R5bGVzW2ldLm51bUZtdElkID09PSB6KSByZXR1cm4gaTtcblx0c3R5bGVzW2xlbl0gPSB7XG5cdFx0bnVtRm10SWQ6eixcblx0XHRmb250SWQ6MCxcblx0XHRmaWxsSWQ6MCxcblx0XHRib3JkZXJJZDowLFxuXHRcdHhmSWQ6MCxcblx0XHRhcHBseU51bWJlckZvcm1hdDoxXG5cdH07XG5cdHJldHVybiBsZW47XG59XG5cbmZ1bmN0aW9uIHNhZmVfZm9ybWF0KHAvKjpDZWxsKi8sIGZtdGlkLyo6bnVtYmVyKi8sIGZpbGxpZC8qOj9udW1iZXIqLywgb3B0cywgdGhlbWVzLCBzdHlsZXMpIHtcblx0dHJ5IHtcblx0XHRpZihvcHRzLmNlbGxORikgcC56ID0gdGFibGVfZm10W2ZtdGlkXTtcblx0fSBjYXRjaChlKSB7IGlmKG9wdHMuV1RGKSB0aHJvdyBlOyB9XG5cdGlmKHAudCA9PT0gJ3onICYmICFvcHRzLmNlbGxTdHlsZXMpIHJldHVybjtcblx0aWYocC50ID09PSAnZCcgJiYgdHlwZW9mIHAudiA9PT0gJ3N0cmluZycpIHAudiA9IHBhcnNlRGF0ZShwLnYpO1xuXHRpZigoIW9wdHMgfHwgb3B0cy5jZWxsVGV4dCAhPT0gZmFsc2UpICYmIHAudCAhPT0gJ3onKSB0cnkge1xuXHRcdGlmKHRhYmxlX2ZtdFtmbXRpZF0gPT0gbnVsbCkgU1NGX2xvYWQoU1NGSW1wbGljaXRbZm10aWRdIHx8IFwiR2VuZXJhbFwiLCBmbXRpZCk7XG5cdFx0aWYocC50ID09PSAnZScpIHAudyA9IHAudyB8fCBCRXJyW3Audl07XG5cdFx0ZWxzZSBpZihmbXRpZCA9PT0gMCkge1xuXHRcdFx0aWYocC50ID09PSAnbicpIHtcblx0XHRcdFx0aWYoKHAudnwwKSA9PT0gcC52KSBwLncgPSBwLnYudG9TdHJpbmcoMTApO1xuXHRcdFx0XHRlbHNlIHAudyA9IFNTRl9nZW5lcmFsX251bShwLnYpO1xuXHRcdFx0fVxuXHRcdFx0ZWxzZSBpZihwLnQgPT09ICdkJykge1xuXHRcdFx0XHR2YXIgZGQgPSBkYXRlbnVtKHAudik7XG5cdFx0XHRcdGlmKChkZHwwKSA9PT0gZGQpIHAudyA9IGRkLnRvU3RyaW5nKDEwKTtcblx0XHRcdFx0ZWxzZSBwLncgPSBTU0ZfZ2VuZXJhbF9udW0oZGQpO1xuXHRcdFx0fVxuXHRcdFx0ZWxzZSBpZihwLnYgPT09IHVuZGVmaW5lZCkgcmV0dXJuIFwiXCI7XG5cdFx0XHRlbHNlIHAudyA9IFNTRl9nZW5lcmFsKHAudixfc3Nmb3B0cyk7XG5cdFx0fVxuXHRcdGVsc2UgaWYocC50ID09PSAnZCcpIHAudyA9IFNTRl9mb3JtYXQoZm10aWQsZGF0ZW51bShwLnYpLF9zc2ZvcHRzKTtcblx0XHRlbHNlIHAudyA9IFNTRl9mb3JtYXQoZm10aWQscC52LF9zc2ZvcHRzKTtcblx0fSBjYXRjaChlKSB7IGlmKG9wdHMuV1RGKSB0aHJvdyBlOyB9XG5cdGlmKCFvcHRzLmNlbGxTdHlsZXMpIHJldHVybjtcblx0aWYoZmlsbGlkICE9IG51bGwpIHRyeSB7XG5cdFx0cC5zID0gc3R5bGVzLkZpbGxzW2ZpbGxpZF07XG5cdFx0aWYgKHAucy5mZ0NvbG9yICYmIHAucy5mZ0NvbG9yLnRoZW1lICYmICFwLnMuZmdDb2xvci5yZ2IpIHtcblx0XHRcdHAucy5mZ0NvbG9yLnJnYiA9IHJnYl90aW50KHRoZW1lcy50aGVtZUVsZW1lbnRzLmNsclNjaGVtZVtwLnMuZmdDb2xvci50aGVtZV0ucmdiLCBwLnMuZmdDb2xvci50aW50IHx8IDApO1xuXHRcdFx0aWYob3B0cy5XVEYpIHAucy5mZ0NvbG9yLnJhd19yZ2IgPSB0aGVtZXMudGhlbWVFbGVtZW50cy5jbHJTY2hlbWVbcC5zLmZnQ29sb3IudGhlbWVdLnJnYjtcblx0XHR9XG5cdFx0aWYgKHAucy5iZ0NvbG9yICYmIHAucy5iZ0NvbG9yLnRoZW1lKSB7XG5cdFx0XHRwLnMuYmdDb2xvci5yZ2IgPSByZ2JfdGludCh0aGVtZXMudGhlbWVFbGVtZW50cy5jbHJTY2hlbWVbcC5zLmJnQ29sb3IudGhlbWVdLnJnYiwgcC5zLmJnQ29sb3IudGludCB8fCAwKTtcblx0XHRcdGlmKG9wdHMuV1RGKSBwLnMuYmdDb2xvci5yYXdfcmdiID0gdGhlbWVzLnRoZW1lRWxlbWVudHMuY2xyU2NoZW1lW3Aucy5iZ0NvbG9yLnRoZW1lXS5yZ2I7XG5cdFx0fVxuXHR9IGNhdGNoKGUpIHsgaWYob3B0cy5XVEYgJiYgc3R5bGVzLkZpbGxzKSB0aHJvdyBlOyB9XG59XG5cbmZ1bmN0aW9uIGNoZWNrX3dzKHdzLyo6V29ya3NoZWV0Ki8sIHNuYW1lLyo6c3RyaW5nKi8sIGkvKjpudW1iZXIqLykge1xuXHRpZih3cyAmJiB3c1snIXJlZiddKSB7XG5cdFx0dmFyIHJhbmdlID0gc2FmZV9kZWNvZGVfcmFuZ2Uod3NbJyFyZWYnXSk7XG5cdFx0aWYocmFuZ2UuZS5jIDwgcmFuZ2Uucy5jIHx8IHJhbmdlLmUuciA8IHJhbmdlLnMucikgdGhyb3cgbmV3IEVycm9yKFwiQmFkIHJhbmdlIChcIiArIGkgKyBcIik6IFwiICsgd3NbJyFyZWYnXSk7XG5cdH1cbn1cbmZ1bmN0aW9uIHBhcnNlX3dzX3htbF9kaW0od3MvKjpXb3Jrc2hlZXQqLywgcy8qOnN0cmluZyovKSB7XG5cdHZhciBkID0gc2FmZV9kZWNvZGVfcmFuZ2Uocyk7XG5cdGlmKGQucy5yPD1kLmUuciAmJiBkLnMuYzw9ZC5lLmMgJiYgZC5zLnI+PTAgJiYgZC5zLmM+PTApIHdzW1wiIXJlZlwiXSA9IGVuY29kZV9yYW5nZShkKTtcbn1cbnZhciBtZXJnZWNyZWdleCA9IC88KD86XFx3Oik/bWVyZ2VDZWxsIHJlZj1cIltBLVowLTk6XStcIlxccypbXFwvXT8+L2c7XG52YXIgc2hlZXRkYXRhcmVnZXggPSAvPCg/Olxcdys6KT9zaGVldERhdGFbXj5dKj4oW1xcc1xcU10qKTxcXC8oPzpcXHcrOik/c2hlZXREYXRhPi87XG52YXIgaGxpbmtyZWdleCA9IC88KD86XFx3Oik/aHlwZXJsaW5rIFtePl0qPi9tZztcbnZhciBkaW1yZWdleCA9IC9cIihcXHcqOlxcdyopXCIvO1xudmFyIGNvbHJlZ2V4ID0gLzwoPzpcXHc6KT9jb2xcXGJbXj5dKltcXC9dPz4vZztcbnZhciBhZnJlZ2V4ID0gLzwoPzpcXHc6KT9hdXRvRmlsdGVyW14+XSooW1xcL118PihbXFxzXFxTXSopPFxcLyg/OlxcdzopP2F1dG9GaWx0ZXIpPi9nO1xudmFyIG1hcmdpbnJlZ2V4PSAvPCg/OlxcdzopP3BhZ2VNYXJnaW5zW14+XSpcXC8+L2c7XG52YXIgc2hlZXRwcnJlZ2V4ID0gLzwoPzpcXHc6KT9zaGVldFByXFxiKD86W14+YS16XVtePl0qKT9cXC8+LztcbnZhciBzaGVldHBycmVnZXgyPSAvPCg/OlxcdzopP3NoZWV0UHJbXj5dKig/OltcXC9dfD4oW1xcc1xcU10qKTxcXC8oPzpcXHc6KT9zaGVldFByKT4vO1xudmFyIHN2c3JlZ2V4ID0gLzwoPzpcXHc6KT9zaGVldFZpZXdzW14+XSooPzpbXFwvXXw+KFtcXHNcXFNdKik8XFwvKD86XFx3Oik/c2hlZXRWaWV3cyk+LztcblxuLyogMTguMyBXb3Jrc2hlZXRzICovXG5mdW5jdGlvbiBwYXJzZV93c194bWwoZGF0YS8qOj9zdHJpbmcqLywgb3B0cywgaWR4Lyo6bnVtYmVyKi8sIHJlbHMsIHdiLyo6V0JXQlByb3BzKi8sIHRoZW1lcywgc3R5bGVzKS8qOldvcmtzaGVldCovIHtcblx0aWYoIWRhdGEpIHJldHVybiBkYXRhO1xuXHRpZighcmVscykgcmVscyA9IHsnIWlkJzp7fX07XG5cdGlmKERFTlNFICE9IG51bGwgJiYgb3B0cy5kZW5zZSA9PSBudWxsKSBvcHRzLmRlbnNlID0gREVOU0U7XG5cblx0LyogMTguMy4xLjk5IHdvcmtzaGVldCBDVF9Xb3Jrc2hlZXQgKi9cblx0dmFyIHMgPSBvcHRzLmRlbnNlID8gKFtdLyo6YW55Ki8pIDogKHt9Lyo6YW55Ki8pO1xuXHR2YXIgcmVmZ3Vlc3MvKjpSYW5nZSovID0gKHtzOiB7cjoyMDAwMDAwLCBjOjIwMDAwMDB9LCBlOiB7cjowLCBjOjB9IH0vKjphbnkqLyk7XG5cblx0dmFyIGRhdGExID0gXCJcIiwgZGF0YTIgPSBcIlwiO1xuXHR2YXIgbXRjaC8qOj9hbnkqLyA9IGRhdGEubWF0Y2goc2hlZXRkYXRhcmVnZXgpO1xuXHRpZihtdGNoKSB7XG5cdFx0ZGF0YTEgPSBkYXRhLnNsaWNlKDAsIG10Y2guaW5kZXgpO1xuXHRcdGRhdGEyID0gZGF0YS5zbGljZShtdGNoLmluZGV4ICsgbXRjaFswXS5sZW5ndGgpO1xuXHR9IGVsc2UgZGF0YTEgPSBkYXRhMiA9IGRhdGE7XG5cblx0LyogMTguMy4xLjgyIHNoZWV0UHIgQ1RfU2hlZXRQciAqL1xuXHR2YXIgc2hlZXRQciA9IGRhdGExLm1hdGNoKHNoZWV0cHJyZWdleCk7XG5cdGlmKHNoZWV0UHIpIHBhcnNlX3dzX3htbF9zaGVldHByKHNoZWV0UHJbMF0sIHMsIHdiLCBpZHgpO1xuXHRlbHNlIGlmKChzaGVldFByID0gZGF0YTEubWF0Y2goc2hlZXRwcnJlZ2V4MikpKSBwYXJzZV93c194bWxfc2hlZXRwcjIoc2hlZXRQclswXSwgc2hlZXRQclsxXXx8XCJcIiwgcywgd2IsIGlkeCwgc3R5bGVzLCB0aGVtZXMpO1xuXG5cdC8qIDE4LjMuMS4zNSBkaW1lbnNpb24gQ1RfU2hlZXREaW1lbnNpb24gKi9cblx0dmFyIHJpZHggPSAoZGF0YTEubWF0Y2goLzwoPzpcXHcqOik/ZGltZW5zaW9uLyl8fHtpbmRleDotMX0pLmluZGV4O1xuXHRpZihyaWR4ID4gMCkge1xuXHRcdHZhciByZWYgPSBkYXRhMS5zbGljZShyaWR4LHJpZHgrNTApLm1hdGNoKGRpbXJlZ2V4KTtcblx0XHRpZihyZWYpIHBhcnNlX3dzX3htbF9kaW0ocywgcmVmWzFdKTtcblx0fVxuXG5cdC8qIDE4LjMuMS44OCBzaGVldFZpZXdzIENUX1NoZWV0Vmlld3MgKi9cblx0dmFyIHN2cyA9IGRhdGExLm1hdGNoKHN2c3JlZ2V4KTtcblx0aWYoc3ZzICYmIHN2c1sxXSkgcGFyc2Vfd3NfeG1sX3NoZWV0dmlld3Moc3ZzWzFdLCB3Yik7XG5cblx0LyogMTguMy4xLjE3IGNvbHMgQ1RfQ29scyAqL1xuXHR2YXIgY29sdW1ucy8qOkFycmF5PENvbEluZm8+Ki8gPSBbXTtcblx0aWYob3B0cy5jZWxsU3R5bGVzKSB7XG5cdFx0LyogMTguMy4xLjEzIGNvbCBDVF9Db2wgKi9cblx0XHR2YXIgY29scyA9IGRhdGExLm1hdGNoKGNvbHJlZ2V4KTtcblx0XHRpZihjb2xzKSBwYXJzZV93c194bWxfY29scyhjb2x1bW5zLCBjb2xzKTtcblx0fVxuXG5cdC8qIDE4LjMuMS44MCBzaGVldERhdGEgQ1RfU2hlZXREYXRhID8gKi9cblx0aWYobXRjaCkgcGFyc2Vfd3NfeG1sX2RhdGEobXRjaFsxXSwgcywgb3B0cywgcmVmZ3Vlc3MsIHRoZW1lcywgc3R5bGVzKTtcblxuXHQvKiAxOC4zLjEuMiAgYXV0b0ZpbHRlciBDVF9BdXRvRmlsdGVyICovXG5cdHZhciBhZmlsdGVyID0gZGF0YTIubWF0Y2goYWZyZWdleCk7XG5cdGlmKGFmaWx0ZXIpIHNbJyFhdXRvZmlsdGVyJ10gPSBwYXJzZV93c194bWxfYXV0b2ZpbHRlcihhZmlsdGVyWzBdKTtcblxuXHQvKiAxOC4zLjEuNTUgbWVyZ2VDZWxscyBDVF9NZXJnZUNlbGxzICovXG5cdHZhciBtZXJnZXMvKjpBcnJheTxSYW5nZT4qLyA9IFtdO1xuXHR2YXIgX21lcmdlID0gZGF0YTIubWF0Y2gobWVyZ2VjcmVnZXgpO1xuXHRpZihfbWVyZ2UpIGZvcihyaWR4ID0gMDsgcmlkeCAhPSBfbWVyZ2UubGVuZ3RoOyArK3JpZHgpXG5cdFx0bWVyZ2VzW3JpZHhdID0gc2FmZV9kZWNvZGVfcmFuZ2UoX21lcmdlW3JpZHhdLnNsaWNlKF9tZXJnZVtyaWR4XS5pbmRleE9mKFwiXFxcIlwiKSsxKSk7XG5cblx0LyogMTguMy4xLjQ4IGh5cGVybGlua3MgQ1RfSHlwZXJsaW5rcyAqL1xuXHR2YXIgaGxpbmsgPSBkYXRhMi5tYXRjaChobGlua3JlZ2V4KTtcblx0aWYoaGxpbmspIHBhcnNlX3dzX3htbF9obGlua3MocywgaGxpbmssIHJlbHMpO1xuXG5cdC8qIDE4LjMuMS42MiBwYWdlTWFyZ2lucyBDVF9QYWdlTWFyZ2lucyAqL1xuXHR2YXIgbWFyZ2lucyA9IGRhdGEyLm1hdGNoKG1hcmdpbnJlZ2V4KTtcblx0aWYobWFyZ2lucykgc1snIW1hcmdpbnMnXSA9IHBhcnNlX3dzX3htbF9tYXJnaW5zKHBhcnNleG1sdGFnKG1hcmdpbnNbMF0pKTtcblxuXHRpZighc1tcIiFyZWZcIl0gJiYgcmVmZ3Vlc3MuZS5jID49IHJlZmd1ZXNzLnMuYyAmJiByZWZndWVzcy5lLnIgPj0gcmVmZ3Vlc3Mucy5yKSBzW1wiIXJlZlwiXSA9IGVuY29kZV9yYW5nZShyZWZndWVzcyk7XG5cdGlmKG9wdHMuc2hlZXRSb3dzID4gMCAmJiBzW1wiIXJlZlwiXSkge1xuXHRcdHZhciB0bXByZWYgPSBzYWZlX2RlY29kZV9yYW5nZShzW1wiIXJlZlwiXSk7XG5cdFx0aWYob3B0cy5zaGVldFJvd3MgPD0gK3RtcHJlZi5lLnIpIHtcblx0XHRcdHRtcHJlZi5lLnIgPSBvcHRzLnNoZWV0Um93cyAtIDE7XG5cdFx0XHRpZih0bXByZWYuZS5yID4gcmVmZ3Vlc3MuZS5yKSB0bXByZWYuZS5yID0gcmVmZ3Vlc3MuZS5yO1xuXHRcdFx0aWYodG1wcmVmLmUuciA8IHRtcHJlZi5zLnIpIHRtcHJlZi5zLnIgPSB0bXByZWYuZS5yO1xuXHRcdFx0aWYodG1wcmVmLmUuYyA+IHJlZmd1ZXNzLmUuYykgdG1wcmVmLmUuYyA9IHJlZmd1ZXNzLmUuYztcblx0XHRcdGlmKHRtcHJlZi5lLmMgPCB0bXByZWYucy5jKSB0bXByZWYucy5jID0gdG1wcmVmLmUuYztcblx0XHRcdHNbXCIhZnVsbHJlZlwiXSA9IHNbXCIhcmVmXCJdO1xuXHRcdFx0c1tcIiFyZWZcIl0gPSBlbmNvZGVfcmFuZ2UodG1wcmVmKTtcblx0XHR9XG5cdH1cblx0aWYoY29sdW1ucy5sZW5ndGggPiAwKSBzW1wiIWNvbHNcIl0gPSBjb2x1bW5zO1xuXHRpZihtZXJnZXMubGVuZ3RoID4gMCkgc1tcIiFtZXJnZXNcIl0gPSBtZXJnZXM7XG5cdHJldHVybiBzO1xufVxuXG5mdW5jdGlvbiB3cml0ZV93c194bWxfbWVyZ2VzKG1lcmdlcy8qOkFycmF5PFJhbmdlPiovKS8qOnN0cmluZyovIHtcblx0aWYobWVyZ2VzLmxlbmd0aCA9PT0gMCkgcmV0dXJuIFwiXCI7XG5cdHZhciBvID0gJzxtZXJnZUNlbGxzIGNvdW50PVwiJyArIG1lcmdlcy5sZW5ndGggKyAnXCI+Jztcblx0Zm9yKHZhciBpID0gMDsgaSAhPSBtZXJnZXMubGVuZ3RoOyArK2kpIG8gKz0gJzxtZXJnZUNlbGwgcmVmPVwiJyArIGVuY29kZV9yYW5nZShtZXJnZXNbaV0pICsgJ1wiLz4nO1xuXHRyZXR1cm4gbyArICc8L21lcmdlQ2VsbHM+Jztcbn1cblxuLyogMTguMy4xLjgyLTMgc2hlZXRQciBDVF9DaGFydHNoZWV0UHIgLyBDVF9TaGVldFByICovXG5mdW5jdGlvbiBwYXJzZV93c194bWxfc2hlZXRwcihzaGVldFByLyo6c3RyaW5nKi8sIHMsIHdiLyo6V0JXQlByb3BzKi8sIGlkeC8qOm51bWJlciovKSB7XG5cdHZhciBkYXRhID0gcGFyc2V4bWx0YWcoc2hlZXRQcik7XG5cdGlmKCF3Yi5TaGVldHNbaWR4XSkgd2IuU2hlZXRzW2lkeF0gPSB7fTtcblx0aWYoZGF0YS5jb2RlTmFtZSkgd2IuU2hlZXRzW2lkeF0uQ29kZU5hbWUgPSB1bmVzY2FwZXhtbCh1dGY4cmVhZChkYXRhLmNvZGVOYW1lKSk7XG59XG5mdW5jdGlvbiBwYXJzZV93c194bWxfc2hlZXRwcjIoc2hlZXRQci8qOnN0cmluZyovLCBib2R5Lyo6c3RyaW5nKi8sIHMsIHdiLyo6V0JXQlByb3BzKi8sIGlkeC8qOm51bWJlciovKSB7XG5cdHBhcnNlX3dzX3htbF9zaGVldHByKHNoZWV0UHIuc2xpY2UoMCwgc2hlZXRQci5pbmRleE9mKFwiPlwiKSksIHMsIHdiLCBpZHgpO1xufVxuZnVuY3Rpb24gd3JpdGVfd3NfeG1sX3NoZWV0cHIod3MsIHdiLCBpZHgsIG9wdHMsIG8pIHtcblx0dmFyIG5lZWRlZCA9IGZhbHNlO1xuXHR2YXIgcHJvcHMgPSB7fSwgcGF5bG9hZCA9IG51bGw7XG5cdGlmKG9wdHMuYm9va1R5cGUgIT09ICd4bHN4JyAmJiB3Yi52YmFyYXcpIHtcblx0XHR2YXIgY25hbWUgPSB3Yi5TaGVldE5hbWVzW2lkeF07XG5cdFx0dHJ5IHsgaWYod2IuV29ya2Jvb2spIGNuYW1lID0gd2IuV29ya2Jvb2suU2hlZXRzW2lkeF0uQ29kZU5hbWUgfHwgY25hbWU7IH0gY2F0Y2goZSkge31cblx0XHRuZWVkZWQgPSB0cnVlO1xuXHRcdHByb3BzLmNvZGVOYW1lID0gdXRmOHdyaXRlKGVzY2FwZXhtbChjbmFtZSkpO1xuXHR9XG5cblx0aWYod3MgJiYgd3NbXCIhb3V0bGluZVwiXSkge1xuXHRcdHZhciBvdXRsaW5lcHJvcHMgPSB7c3VtbWFyeUJlbG93OjEsIHN1bW1hcnlSaWdodDoxfTtcblx0XHRpZih3c1tcIiFvdXRsaW5lXCJdLmFib3ZlKSBvdXRsaW5lcHJvcHMuc3VtbWFyeUJlbG93ID0gMDtcblx0XHRpZih3c1tcIiFvdXRsaW5lXCJdLmxlZnQpIG91dGxpbmVwcm9wcy5zdW1tYXJ5UmlnaHQgPSAwO1xuXHRcdHBheWxvYWQgPSAocGF5bG9hZHx8XCJcIikgKyB3cml0ZXh0YWcoJ291dGxpbmVQcicsIG51bGwsIG91dGxpbmVwcm9wcyk7XG5cdH1cblxuXHRpZighbmVlZGVkICYmICFwYXlsb2FkKSByZXR1cm47XG5cdG9bby5sZW5ndGhdID0gKHdyaXRleHRhZygnc2hlZXRQcicsIHBheWxvYWQsIHByb3BzKSk7XG59XG5cbi8qIDE4LjMuMS44NSBzaGVldFByb3RlY3Rpb24gQ1RfU2hlZXRQcm90ZWN0aW9uICovXG52YXIgc2hlZXRwcm90X2RlZmZhbHNlID0gW1wib2JqZWN0c1wiLCBcInNjZW5hcmlvc1wiLCBcInNlbGVjdExvY2tlZENlbGxzXCIsIFwic2VsZWN0VW5sb2NrZWRDZWxsc1wiXTtcbnZhciBzaGVldHByb3RfZGVmdHJ1ZSA9IFtcblx0XCJmb3JtYXRDb2x1bW5zXCIsIFwiZm9ybWF0Um93c1wiLCBcImZvcm1hdENlbGxzXCIsXG5cdFwiaW5zZXJ0Q29sdW1uc1wiLCBcImluc2VydFJvd3NcIiwgXCJpbnNlcnRIeXBlcmxpbmtzXCIsXG5cdFwiZGVsZXRlQ29sdW1uc1wiLCBcImRlbGV0ZVJvd3NcIixcblx0XCJzb3J0XCIsIFwiYXV0b0ZpbHRlclwiLCBcInBpdm90VGFibGVzXCJcbl07XG5mdW5jdGlvbiB3cml0ZV93c194bWxfcHJvdGVjdGlvbihzcCkvKjpzdHJpbmcqLyB7XG5cdC8vIGFsZ29yaXRobU5hbWUsIGhhc2hWYWx1ZSwgc2FsdFZhbHVlLCBzcGluQ291bnRcblx0dmFyIG8gPSAoe3NoZWV0OjF9Lyo6YW55Ki8pO1xuXHRzaGVldHByb3RfZGVmZmFsc2UuZm9yRWFjaChmdW5jdGlvbihuKSB7IGlmKHNwW25dICE9IG51bGwgJiYgc3Bbbl0pIG9bbl0gPSBcIjFcIjsgfSk7XG5cdHNoZWV0cHJvdF9kZWZ0cnVlLmZvckVhY2goZnVuY3Rpb24obikgeyBpZihzcFtuXSAhPSBudWxsICYmICFzcFtuXSkgb1tuXSA9IFwiMFwiOyB9KTtcblx0LyogVE9ETzogYWxnb3JpdGhtICovXG5cdGlmKHNwLnBhc3N3b3JkKSBvLnBhc3N3b3JkID0gY3J5cHRvX0NyZWF0ZVBhc3N3b3JkVmVyaWZpZXJfTWV0aG9kMShzcC5wYXNzd29yZCkudG9TdHJpbmcoMTYpLnRvVXBwZXJDYXNlKCk7XG5cdHJldHVybiB3cml0ZXh0YWcoJ3NoZWV0UHJvdGVjdGlvbicsIG51bGwsIG8pO1xufVxuXG5mdW5jdGlvbiBwYXJzZV93c194bWxfaGxpbmtzKHMsIGRhdGEvKjpBcnJheTxzdHJpbmc+Ki8sIHJlbHMpIHtcblx0dmFyIGRlbnNlID0gQXJyYXkuaXNBcnJheShzKTtcblx0Zm9yKHZhciBpID0gMDsgaSAhPSBkYXRhLmxlbmd0aDsgKytpKSB7XG5cdFx0dmFyIHZhbCA9IHBhcnNleG1sdGFnKHV0ZjhyZWFkKGRhdGFbaV0pLCB0cnVlKTtcblx0XHRpZighdmFsLnJlZikgcmV0dXJuO1xuXHRcdHZhciByZWwgPSAoKHJlbHMgfHwge30pWychaWQnXXx8W10pW3ZhbC5pZF07XG5cdFx0aWYocmVsKSB7XG5cdFx0XHR2YWwuVGFyZ2V0ID0gcmVsLlRhcmdldDtcblx0XHRcdGlmKHZhbC5sb2NhdGlvbikgdmFsLlRhcmdldCArPSBcIiNcIit1bmVzY2FwZXhtbCh2YWwubG9jYXRpb24pO1xuXHRcdH0gZWxzZSB7XG5cdFx0XHR2YWwuVGFyZ2V0ID0gXCIjXCIgKyB1bmVzY2FwZXhtbCh2YWwubG9jYXRpb24pO1xuXHRcdFx0cmVsID0ge1RhcmdldDogdmFsLlRhcmdldCwgVGFyZ2V0TW9kZTogJ0ludGVybmFsJ307XG5cdFx0fVxuXHRcdHZhbC5SZWwgPSByZWw7XG5cdFx0aWYodmFsLnRvb2x0aXApIHsgdmFsLlRvb2x0aXAgPSB2YWwudG9vbHRpcDsgZGVsZXRlIHZhbC50b29sdGlwOyB9XG5cdFx0dmFyIHJuZyA9IHNhZmVfZGVjb2RlX3JhbmdlKHZhbC5yZWYpO1xuXHRcdGZvcih2YXIgUj1ybmcucy5yO1I8PXJuZy5lLnI7KytSKSBmb3IodmFyIEM9cm5nLnMuYztDPD1ybmcuZS5jOysrQykge1xuXHRcdFx0dmFyIGFkZHIgPSBlbmNvZGVfY2VsbCh7YzpDLHI6Un0pO1xuXHRcdFx0aWYoZGVuc2UpIHtcblx0XHRcdFx0aWYoIXNbUl0pIHNbUl0gPSBbXTtcblx0XHRcdFx0aWYoIXNbUl1bQ10pIHNbUl1bQ10gPSB7dDpcInpcIix2OnVuZGVmaW5lZH07XG5cdFx0XHRcdHNbUl1bQ10ubCA9IHZhbDtcblx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdGlmKCFzW2FkZHJdKSBzW2FkZHJdID0ge3Q6XCJ6XCIsdjp1bmRlZmluZWR9O1xuXHRcdFx0XHRzW2FkZHJdLmwgPSB2YWw7XG5cdFx0XHR9XG5cdFx0fVxuXHR9XG59XG5cbmZ1bmN0aW9uIHBhcnNlX3dzX3htbF9tYXJnaW5zKG1hcmdpbikge1xuXHR2YXIgbyA9IHt9O1xuXHRbXCJsZWZ0XCIsIFwicmlnaHRcIiwgXCJ0b3BcIiwgXCJib3R0b21cIiwgXCJoZWFkZXJcIiwgXCJmb290ZXJcIl0uZm9yRWFjaChmdW5jdGlvbihrKSB7XG5cdFx0aWYobWFyZ2luW2tdKSBvW2tdID0gcGFyc2VGbG9hdChtYXJnaW5ba10pO1xuXHR9KTtcblx0cmV0dXJuIG87XG59XG5mdW5jdGlvbiB3cml0ZV93c194bWxfbWFyZ2lucyhtYXJnaW4pLyo6c3RyaW5nKi8ge1xuXHRkZWZhdWx0X21hcmdpbnMobWFyZ2luKTtcblx0cmV0dXJuIHdyaXRleHRhZygncGFnZU1hcmdpbnMnLCBudWxsLCBtYXJnaW4pO1xufVxuXG5mdW5jdGlvbiBwYXJzZV93c194bWxfY29scyhjb2x1bW5zLCBjb2xzKSB7XG5cdHZhciBzZWVuY29sID0gZmFsc2U7XG5cdGZvcih2YXIgY29saSA9IDA7IGNvbGkgIT0gY29scy5sZW5ndGg7ICsrY29saSkge1xuXHRcdHZhciBjb2xsID0gcGFyc2V4bWx0YWcoY29sc1tjb2xpXSwgdHJ1ZSk7XG5cdFx0aWYoY29sbC5oaWRkZW4pIGNvbGwuaGlkZGVuID0gcGFyc2V4bWxib29sKGNvbGwuaGlkZGVuKTtcblx0XHR2YXIgY29sbT1wYXJzZUludChjb2xsLm1pbiwgMTApLTEsIGNvbE09cGFyc2VJbnQoY29sbC5tYXgsMTApLTE7XG5cdFx0aWYoY29sbC5vdXRsaW5lTGV2ZWwpIGNvbGwubGV2ZWwgPSAoK2NvbGwub3V0bGluZUxldmVsIHx8IDApO1xuXHRcdGRlbGV0ZSBjb2xsLm1pbjsgZGVsZXRlIGNvbGwubWF4OyBjb2xsLndpZHRoID0gK2NvbGwud2lkdGg7XG5cdFx0aWYoIXNlZW5jb2wgJiYgY29sbC53aWR0aCkgeyBzZWVuY29sID0gdHJ1ZTsgZmluZF9tZHdfY29sdyhjb2xsLndpZHRoKTsgfVxuXHRcdHByb2Nlc3NfY29sKGNvbGwpO1xuXHRcdHdoaWxlKGNvbG0gPD0gY29sTSkgY29sdW1uc1tjb2xtKytdID0gZHVwKGNvbGwpO1xuXHR9XG59XG5mdW5jdGlvbiB3cml0ZV93c194bWxfY29scyh3cywgY29scykvKjpzdHJpbmcqLyB7XG5cdHZhciBvID0gW1wiPGNvbHM+XCJdLCBjb2w7XG5cdGZvcih2YXIgaSA9IDA7IGkgIT0gY29scy5sZW5ndGg7ICsraSkge1xuXHRcdGlmKCEoY29sID0gY29sc1tpXSkpIGNvbnRpbnVlO1xuXHRcdG9bby5sZW5ndGhdID0gKHdyaXRleHRhZygnY29sJywgbnVsbCwgY29sX29ial93KGksIGNvbCkpKTtcblx0fVxuXHRvW28ubGVuZ3RoXSA9IFwiPC9jb2xzPlwiO1xuXHRyZXR1cm4gby5qb2luKFwiXCIpO1xufVxuXG5mdW5jdGlvbiBwYXJzZV93c194bWxfYXV0b2ZpbHRlcihkYXRhLyo6c3RyaW5nKi8pIHtcblx0dmFyIG8gPSB7IHJlZjogKGRhdGEubWF0Y2goL3JlZj1cIihbXlwiXSopXCIvKXx8W10pWzFdfTtcblx0cmV0dXJuIG87XG59XG5mdW5jdGlvbiB3cml0ZV93c194bWxfYXV0b2ZpbHRlcihkYXRhLCB3cywgd2IsIGlkeCkvKjpzdHJpbmcqLyB7XG5cdHZhciByZWYgPSB0eXBlb2YgZGF0YS5yZWYgPT0gXCJzdHJpbmdcIiA/IGRhdGEucmVmIDogZW5jb2RlX3JhbmdlKGRhdGEucmVmKTtcblx0aWYoIXdiLldvcmtib29rKSB3Yi5Xb3JrYm9vayA9ICh7U2hlZXRzOltdfS8qOmFueSovKTtcblx0aWYoIXdiLldvcmtib29rLk5hbWVzKSB3Yi5Xb3JrYm9vay5OYW1lcyA9IFtdO1xuXHR2YXIgbmFtZXMvKjogQXJyYXk8YW55PiAqLyA9IHdiLldvcmtib29rLk5hbWVzO1xuXHR2YXIgcmFuZ2UgPSBkZWNvZGVfcmFuZ2UocmVmKTtcblx0aWYocmFuZ2Uucy5yID09IHJhbmdlLmUucikgeyByYW5nZS5lLnIgPSBkZWNvZGVfcmFuZ2Uod3NbXCIhcmVmXCJdKS5lLnI7IHJlZiA9IGVuY29kZV9yYW5nZShyYW5nZSk7IH1cblx0Zm9yKHZhciBpID0gMDsgaSA8IG5hbWVzLmxlbmd0aDsgKytpKSB7XG5cdFx0dmFyIG5hbWUgPSBuYW1lc1tpXTtcblx0XHRpZihuYW1lLk5hbWUgIT0gJ194bG5tLl9GaWx0ZXJEYXRhYmFzZScpIGNvbnRpbnVlO1xuXHRcdGlmKG5hbWUuU2hlZXQgIT0gaWR4KSBjb250aW51ZTtcblx0XHRuYW1lLlJlZiA9IFwiJ1wiICsgd2IuU2hlZXROYW1lc1tpZHhdICsgXCInIVwiICsgcmVmOyBicmVhaztcblx0fVxuXHRpZihpID09IG5hbWVzLmxlbmd0aCkgbmFtZXMucHVzaCh7IE5hbWU6ICdfeGxubS5fRmlsdGVyRGF0YWJhc2UnLCBTaGVldDogaWR4LCBSZWY6IFwiJ1wiICsgd2IuU2hlZXROYW1lc1tpZHhdICsgXCInIVwiICsgcmVmICB9KTtcblx0cmV0dXJuIHdyaXRleHRhZyhcImF1dG9GaWx0ZXJcIiwgbnVsbCwge3JlZjpyZWZ9KTtcbn1cblxuLyogMTguMy4xLjg4IHNoZWV0Vmlld3MgQ1RfU2hlZXRWaWV3cyAqL1xuLyogMTguMy4xLjg3IHNoZWV0VmlldyBDVF9TaGVldFZpZXcgKi9cbnZhciBzdmlld3JlZ2V4ID0gLzwoPzpcXHc6KT9zaGVldFZpZXcoPzpbXj5hLXpdW14+XSopP1xcLz8+LztcbmZ1bmN0aW9uIHBhcnNlX3dzX3htbF9zaGVldHZpZXdzKGRhdGEsIHdiLyo6V0JXQlByb3BzKi8pIHtcblx0aWYoIXdiLlZpZXdzKSB3Yi5WaWV3cyA9IFt7fV07XG5cdChkYXRhLm1hdGNoKHN2aWV3cmVnZXgpfHxbXSkuZm9yRWFjaChmdW5jdGlvbihyLyo6c3RyaW5nKi8sIGkvKjpudW1iZXIqLykge1xuXHRcdHZhciB0YWcgPSBwYXJzZXhtbHRhZyhyKTtcblx0XHQvLyAkRmxvd0lnbm9yZVxuXHRcdGlmKCF3Yi5WaWV3c1tpXSkgd2IuVmlld3NbaV0gPSB7fTtcblx0XHQvLyAkRmxvd0lnbm9yZVxuXHRcdGlmKCt0YWcuem9vbVNjYWxlKSB3Yi5WaWV3c1tpXS56b29tID0gK3RhZy56b29tU2NhbGU7XG5cdFx0Ly8gJEZsb3dJZ25vcmVcblx0XHRpZihwYXJzZXhtbGJvb2wodGFnLnJpZ2h0VG9MZWZ0KSkgd2IuVmlld3NbaV0uUlRMID0gdHJ1ZTtcblx0fSk7XG59XG5mdW5jdGlvbiB3cml0ZV93c194bWxfc2hlZXR2aWV3cyh3cywgb3B0cywgaWR4LCB3YikvKjpzdHJpbmcqLyB7XG5cdHZhciBzdmlldyA9ICh7d29ya2Jvb2tWaWV3SWQ6XCIwXCJ9Lyo6YW55Ki8pO1xuXHQvLyAkRmxvd0lnbm9yZVxuXHRpZigoKCh3Ynx8e30pLldvcmtib29rfHx7fSkuVmlld3N8fFtdKVswXSkgc3ZpZXcucmlnaHRUb0xlZnQgPSB3Yi5Xb3JrYm9vay5WaWV3c1swXS5SVEwgPyBcIjFcIiA6IFwiMFwiO1xuXHRyZXR1cm4gd3JpdGV4dGFnKFwic2hlZXRWaWV3c1wiLCB3cml0ZXh0YWcoXCJzaGVldFZpZXdcIiwgbnVsbCwgc3ZpZXcpLCB7fSk7XG59XG5cbmZ1bmN0aW9uIHdyaXRlX3dzX3htbF9jZWxsKGNlbGwvKjpDZWxsKi8sIHJlZiwgd3MsIG9wdHMvKjo6LCBpZHgsIHdiKi8pLyo6c3RyaW5nKi8ge1xuXHRpZihjZWxsLmMpIHdzWychY29tbWVudHMnXS5wdXNoKFtyZWYsIGNlbGwuY10pO1xuXHRpZihjZWxsLnYgPT09IHVuZGVmaW5lZCAmJiB0eXBlb2YgY2VsbC5mICE9PSBcInN0cmluZ1wiIHx8IGNlbGwudCA9PT0gJ3onICYmICFjZWxsLmYpIHJldHVybiBcIlwiO1xuXHR2YXIgdnYgPSBcIlwiO1xuXHR2YXIgb2xkdCA9IGNlbGwudCwgb2xkdiA9IGNlbGwudjtcblx0aWYoY2VsbC50ICE9PSBcInpcIikgc3dpdGNoKGNlbGwudCkge1xuXHRcdGNhc2UgJ2InOiB2diA9IGNlbGwudiA/IFwiMVwiIDogXCIwXCI7IGJyZWFrO1xuXHRcdGNhc2UgJ24nOiB2diA9ICcnK2NlbGwudjsgYnJlYWs7XG5cdFx0Y2FzZSAnZSc6IHZ2ID0gQkVycltjZWxsLnZdOyBicmVhaztcblx0XHRjYXNlICdkJzpcblx0XHRcdGlmKG9wdHMgJiYgb3B0cy5jZWxsRGF0ZXMpIHZ2ID0gcGFyc2VEYXRlKGNlbGwudiwgLTEpLnRvSVNPU3RyaW5nKCk7XG5cdFx0XHRlbHNlIHtcblx0XHRcdFx0Y2VsbCA9IGR1cChjZWxsKTtcblx0XHRcdFx0Y2VsbC50ID0gJ24nO1xuXHRcdFx0XHR2diA9ICcnKyhjZWxsLnYgPSBkYXRlbnVtKHBhcnNlRGF0ZShjZWxsLnYpKSk7XG5cdFx0XHR9XG5cdFx0XHRpZih0eXBlb2YgY2VsbC56ID09PSAndW5kZWZpbmVkJykgY2VsbC56ID0gdGFibGVfZm10WzE0XTtcblx0XHRcdGJyZWFrO1xuXHRcdGRlZmF1bHQ6IHZ2ID0gY2VsbC52OyBicmVhaztcblx0fVxuXHR2YXIgdiA9IHdyaXRldGFnKCd2JywgZXNjYXBleG1sKHZ2KSksIG8gPSAoe3I6cmVmfS8qOmFueSovKTtcblx0LyogVE9ETzogY2VsbCBzdHlsZSAqL1xuXHR2YXIgb3MgPSBnZXRfY2VsbF9zdHlsZShvcHRzLmNlbGxYZnMsIGNlbGwsIG9wdHMpO1xuXHRpZihvcyAhPT0gMCkgby5zID0gb3M7XG5cdHN3aXRjaChjZWxsLnQpIHtcblx0XHRjYXNlICduJzogYnJlYWs7XG5cdFx0Y2FzZSAnZCc6IG8udCA9IFwiZFwiOyBicmVhaztcblx0XHRjYXNlICdiJzogby50ID0gXCJiXCI7IGJyZWFrO1xuXHRcdGNhc2UgJ2UnOiBvLnQgPSBcImVcIjsgYnJlYWs7XG5cdFx0Y2FzZSAneic6IGJyZWFrO1xuXHRcdGRlZmF1bHQ6IGlmKGNlbGwudiA9PSBudWxsKSB7IGRlbGV0ZSBjZWxsLnQ7IGJyZWFrOyB9XG5cdFx0XHRpZihjZWxsLnYubGVuZ3RoID4gMzI3NjcpIHRocm93IG5ldyBFcnJvcihcIlRleHQgbGVuZ3RoIG11c3Qgbm90IGV4Y2VlZCAzMjc2NyBjaGFyYWN0ZXJzXCIpO1xuXHRcdFx0aWYob3B0cyAmJiBvcHRzLmJvb2tTU1QpIHtcblx0XHRcdFx0diA9IHdyaXRldGFnKCd2JywgJycrZ2V0X3NzdF9pZChvcHRzLlN0cmluZ3MsIGNlbGwudiwgb3B0cy5yZXZTdHJpbmdzKSk7XG5cdFx0XHRcdG8udCA9IFwic1wiOyBicmVhaztcblx0XHRcdH1cblx0XHRcdG8udCA9IFwic3RyXCI7IGJyZWFrO1xuXHR9XG5cdGlmKGNlbGwudCAhPSBvbGR0KSB7IGNlbGwudCA9IG9sZHQ7IGNlbGwudiA9IG9sZHY7IH1cblx0aWYodHlwZW9mIGNlbGwuZiA9PSBcInN0cmluZ1wiICYmIGNlbGwuZikge1xuXHRcdHZhciBmZiA9IGNlbGwuRiAmJiBjZWxsLkYuc2xpY2UoMCwgcmVmLmxlbmd0aCkgPT0gcmVmID8ge3Q6XCJhcnJheVwiLCByZWY6Y2VsbC5GfSA6IG51bGw7XG5cdFx0diA9IHdyaXRleHRhZygnZicsIGVzY2FwZXhtbChjZWxsLmYpLCBmZikgKyAoY2VsbC52ICE9IG51bGwgPyB2IDogXCJcIik7XG5cdH1cblx0aWYoY2VsbC5sKSB3c1snIWxpbmtzJ10ucHVzaChbcmVmLCBjZWxsLmxdKTtcblx0aWYoY2VsbC5EKSBvLmNtID0gMTtcblx0cmV0dXJuIHdyaXRleHRhZygnYycsIHYsIG8pO1xufVxuXG52YXIgcGFyc2Vfd3NfeG1sX2RhdGEgPSAvKiNfX1BVUkVfXyovKGZ1bmN0aW9uKCkge1xuXHR2YXIgY2VsbHJlZ2V4ID0gLzwoPzpcXHcrOik/Y1sgXFwvPl0vLCByb3dyZWdleCA9IC88XFwvKD86XFx3KzopP3Jvdz4vO1xuXHR2YXIgcnJlZ2V4ID0gL3I9W1wiJ10oW15cIiddKilbXCInXS8sIGlzcmVnZXggPSAvPCg/Olxcdys6KT9pcz4oW1xcU1xcc10qPyk8XFwvKD86XFx3KzopP2lzPi87XG5cdHZhciByZWZyZWdleCA9IC9yZWY9W1wiJ10oW15cIiddKilbXCInXS87XG5cdHZhciBtYXRjaF92ID0gbWF0Y2h0YWcoXCJ2XCIpLCBtYXRjaF9mID0gbWF0Y2h0YWcoXCJmXCIpO1xuXG5yZXR1cm4gZnVuY3Rpb24gcGFyc2Vfd3NfeG1sX2RhdGEoc2RhdGEvKjpzdHJpbmcqLywgcywgb3B0cywgZ3Vlc3MvKjpSYW5nZSovLCB0aGVtZXMsIHN0eWxlcykge1xuXHR2YXIgcmkgPSAwLCB4ID0gXCJcIiwgY2VsbHMvKjpBcnJheTxzdHJpbmc+Ki8gPSBbXSwgY3JlZi8qOj9BcnJheTxzdHJpbmc+Ki8gPSBbXSwgaWR4PTAsIGk9MCwgY2M9MCwgZD1cIlwiLCBwLyo6YW55Ki87XG5cdHZhciB0YWcsIHRhZ3IgPSAwLCB0YWdjID0gMDtcblx0dmFyIHNzdHIsIGZ0YWc7XG5cdHZhciBmbXRpZCA9IDAsIGZpbGxpZCA9IDA7XG5cdHZhciBkb19mb3JtYXQgPSBBcnJheS5pc0FycmF5KHN0eWxlcy5DZWxsWGYpLCBjZjtcblx0dmFyIGFycmF5Zi8qOkFycmF5PFtSYW5nZSwgc3RyaW5nXT4qLyA9IFtdO1xuXHR2YXIgc2hhcmVkZiA9IFtdO1xuXHR2YXIgZGVuc2UgPSBBcnJheS5pc0FycmF5KHMpO1xuXHR2YXIgcm93cy8qOkFycmF5PFJvd0luZm8+Ki8gPSBbXSwgcm93b2JqID0ge30sIHJvd3JpdGUgPSBmYWxzZTtcblx0dmFyIHNoZWV0U3R1YnMgPSAhIW9wdHMuc2hlZXRTdHVicztcblx0Zm9yKHZhciBtYXJyID0gc2RhdGEuc3BsaXQocm93cmVnZXgpLCBtdCA9IDAsIG1hcnJsZW4gPSBtYXJyLmxlbmd0aDsgbXQgIT0gbWFycmxlbjsgKyttdCkge1xuXHRcdHggPSBtYXJyW210XS50cmltKCk7XG5cdFx0dmFyIHhsZW4gPSB4Lmxlbmd0aDtcblx0XHRpZih4bGVuID09PSAwKSBjb250aW51ZTtcblxuXHRcdC8qIDE4LjMuMS43MyByb3cgQ1RfUm93ICovXG5cdFx0dmFyIHJzdGFydGkgPSAwO1xuXHRcdG91dGE6IGZvcihyaSA9IDA7IHJpIDwgeGxlbjsgKytyaSkgc3dpdGNoKC8qeC5jaGFyQ29kZUF0KHJpKSoveFtyaV0pIHtcblx0XHRcdGNhc2UgXCI+XCIgLyo2MiovOlxuXHRcdFx0XHRpZigvKnguY2hhckNvZGVBdChyaS0xKSAhPSA0NyoveFtyaS0xXSAhPSBcIi9cIikgeyArK3JpOyBicmVhayBvdXRhOyB9XG5cdFx0XHRcdGlmKG9wdHMgJiYgb3B0cy5jZWxsU3R5bGVzKSB7XG5cdFx0XHRcdFx0Ly8gVE9ETzogYXZvaWQgZHVwbGljYXRpb25cblx0XHRcdFx0XHR0YWcgPSBwYXJzZXhtbHRhZyh4LnNsaWNlKHJzdGFydGkscmkpLCB0cnVlKTtcblx0XHRcdFx0XHR0YWdyID0gdGFnLnIgIT0gbnVsbCA/IHBhcnNlSW50KHRhZy5yLCAxMCkgOiB0YWdyKzE7IHRhZ2MgPSAtMTtcblx0XHRcdFx0XHRpZihvcHRzLnNoZWV0Um93cyAmJiBvcHRzLnNoZWV0Um93cyA8IHRhZ3IpIGNvbnRpbnVlO1xuXHRcdFx0XHRcdHJvd29iaiA9IHt9OyByb3dyaXRlID0gZmFsc2U7XG5cdFx0XHRcdFx0aWYodGFnLmh0KSB7IHJvd3JpdGUgPSB0cnVlOyByb3dvYmouaHB0ID0gcGFyc2VGbG9hdCh0YWcuaHQpOyByb3dvYmouaHB4ID0gcHQycHgocm93b2JqLmhwdCk7IH1cblx0XHRcdFx0XHRpZih0YWcuaGlkZGVuID09IFwiMVwiKSB7IHJvd3JpdGUgPSB0cnVlOyByb3dvYmouaGlkZGVuID0gdHJ1ZTsgfVxuXHRcdFx0XHRcdGlmKHRhZy5vdXRsaW5lTGV2ZWwgIT0gbnVsbCkgeyByb3dyaXRlID0gdHJ1ZTsgcm93b2JqLmxldmVsID0gK3RhZy5vdXRsaW5lTGV2ZWw7IH1cblx0XHRcdFx0XHRpZihyb3dyaXRlKSByb3dzW3RhZ3ItMV0gPSByb3dvYmo7XG5cdFx0XHRcdH1cblx0XHRcdFx0YnJlYWs7XG5cdFx0XHRjYXNlIFwiPFwiIC8qNjAqLzogcnN0YXJ0aSA9IHJpOyBicmVhaztcblx0XHR9XG5cdFx0aWYocnN0YXJ0aSA+PSByaSkgYnJlYWs7XG5cdFx0dGFnID0gcGFyc2V4bWx0YWcoeC5zbGljZShyc3RhcnRpLHJpKSwgdHJ1ZSk7XG5cdFx0dGFnciA9IHRhZy5yICE9IG51bGwgPyBwYXJzZUludCh0YWcuciwgMTApIDogdGFncisxOyB0YWdjID0gLTE7XG5cdFx0aWYob3B0cy5zaGVldFJvd3MgJiYgb3B0cy5zaGVldFJvd3MgPCB0YWdyKSBjb250aW51ZTtcblx0XHRpZihndWVzcy5zLnIgPiB0YWdyIC0gMSkgZ3Vlc3Mucy5yID0gdGFnciAtIDE7XG5cdFx0aWYoZ3Vlc3MuZS5yIDwgdGFnciAtIDEpIGd1ZXNzLmUuciA9IHRhZ3IgLSAxO1xuXG5cdFx0aWYob3B0cyAmJiBvcHRzLmNlbGxTdHlsZXMpIHtcblx0XHRcdHJvd29iaiA9IHt9OyByb3dyaXRlID0gZmFsc2U7XG5cdFx0XHRpZih0YWcuaHQpIHsgcm93cml0ZSA9IHRydWU7IHJvd29iai5ocHQgPSBwYXJzZUZsb2F0KHRhZy5odCk7IHJvd29iai5ocHggPSBwdDJweChyb3dvYmouaHB0KTsgfVxuXHRcdFx0aWYodGFnLmhpZGRlbiA9PSBcIjFcIikgeyByb3dyaXRlID0gdHJ1ZTsgcm93b2JqLmhpZGRlbiA9IHRydWU7IH1cblx0XHRcdGlmKHRhZy5vdXRsaW5lTGV2ZWwgIT0gbnVsbCkgeyByb3dyaXRlID0gdHJ1ZTsgcm93b2JqLmxldmVsID0gK3RhZy5vdXRsaW5lTGV2ZWw7IH1cblx0XHRcdGlmKHJvd3JpdGUpIHJvd3NbdGFnci0xXSA9IHJvd29iajtcblx0XHR9XG5cblx0XHQvKiAxOC4zLjEuNCBjIENUX0NlbGwgKi9cblx0XHRjZWxscyA9IHguc2xpY2UocmkpLnNwbGl0KGNlbGxyZWdleCk7XG5cdFx0Zm9yKHZhciByc2xpY2UgPSAwOyByc2xpY2UgIT0gY2VsbHMubGVuZ3RoOyArK3JzbGljZSkgaWYoY2VsbHNbcnNsaWNlXS50cmltKCkuY2hhckF0KDApICE9IFwiPFwiKSBicmVhaztcblx0XHRjZWxscyA9IGNlbGxzLnNsaWNlKHJzbGljZSk7XG5cdFx0Zm9yKHJpID0gMDsgcmkgIT0gY2VsbHMubGVuZ3RoOyArK3JpKSB7XG5cdFx0XHR4ID0gY2VsbHNbcmldLnRyaW0oKTtcblx0XHRcdGlmKHgubGVuZ3RoID09PSAwKSBjb250aW51ZTtcblx0XHRcdGNyZWYgPSB4Lm1hdGNoKHJyZWdleCk7IGlkeCA9IHJpOyBpPTA7IGNjPTA7XG5cdFx0XHR4ID0gXCI8YyBcIiArICh4LnNsaWNlKDAsMSk9PVwiPFwiP1wiPlwiOlwiXCIpICsgeDtcblx0XHRcdGlmKGNyZWYgIT0gbnVsbCAmJiBjcmVmLmxlbmd0aCA9PT0gMikge1xuXHRcdFx0XHRpZHggPSAwOyBkPWNyZWZbMV07XG5cdFx0XHRcdGZvcihpPTA7IGkgIT0gZC5sZW5ndGg7ICsraSkge1xuXHRcdFx0XHRcdGlmKChjYz1kLmNoYXJDb2RlQXQoaSktNjQpIDwgMSB8fCBjYyA+IDI2KSBicmVhaztcblx0XHRcdFx0XHRpZHggPSAyNippZHggKyBjYztcblx0XHRcdFx0fVxuXHRcdFx0XHQtLWlkeDtcblx0XHRcdFx0dGFnYyA9IGlkeDtcblx0XHRcdH0gZWxzZSArK3RhZ2M7XG5cdFx0XHRmb3IoaSA9IDA7IGkgIT0geC5sZW5ndGg7ICsraSkgaWYoeC5jaGFyQ29kZUF0KGkpID09PSA2MikgYnJlYWs7ICsraTtcblx0XHRcdHRhZyA9IHBhcnNleG1sdGFnKHguc2xpY2UoMCxpKSwgdHJ1ZSk7XG5cdFx0XHRpZighdGFnLnIpIHRhZy5yID0gZW5jb2RlX2NlbGwoe3I6dGFnci0xLCBjOnRhZ2N9KTtcblx0XHRcdGQgPSB4LnNsaWNlKGkpO1xuXHRcdFx0cCA9ICh7dDpcIlwifS8qOmFueSovKTtcblxuXHRcdFx0aWYoKGNyZWY9ZC5tYXRjaChtYXRjaF92KSkhPSBudWxsICYmIC8qOjpjcmVmICE9IG51bGwgJiYgKi9jcmVmWzFdICE9PSAnJykgcC52PXVuZXNjYXBleG1sKGNyZWZbMV0pO1xuXHRcdFx0aWYob3B0cy5jZWxsRm9ybXVsYSkge1xuXHRcdFx0XHRpZigoY3JlZj1kLm1hdGNoKG1hdGNoX2YpKSE9IG51bGwgJiYgLyo6OmNyZWYgIT0gbnVsbCAmJiAqL2NyZWZbMV0gIT09ICcnKSB7XG5cdFx0XHRcdFx0LyogVE9ETzogbWF0Y2ggYWdhaW5zdCBYTFNYRnV0dXJlRnVuY3Rpb25zICovXG5cdFx0XHRcdFx0cC5mPXVuZXNjYXBleG1sKHV0ZjhyZWFkKGNyZWZbMV0pKS5yZXBsYWNlKC9cXHJcXG4vZywgXCJcXG5cIik7XG5cdFx0XHRcdFx0aWYoIW9wdHMueGxmbikgcC5mID0gX3hsZm4ocC5mKTtcblx0XHRcdFx0XHRpZigvKjo6Y3JlZiAhPSBudWxsICYmIGNyZWZbMF0gIT0gbnVsbCAmJiAqL2NyZWZbMF0uaW5kZXhPZigndD1cImFycmF5XCInKSA+IC0xKSB7XG5cdFx0XHRcdFx0XHRwLkYgPSAoZC5tYXRjaChyZWZyZWdleCl8fFtdKVsxXTtcblx0XHRcdFx0XHRcdGlmKHAuRi5pbmRleE9mKFwiOlwiKSA+IC0xKSBhcnJheWYucHVzaChbc2FmZV9kZWNvZGVfcmFuZ2UocC5GKSwgcC5GXSk7XG5cdFx0XHRcdFx0fSBlbHNlIGlmKC8qOjpjcmVmICE9IG51bGwgJiYgY3JlZlswXSAhPSBudWxsICYmICovY3JlZlswXS5pbmRleE9mKCd0PVwic2hhcmVkXCInKSA+IC0xKSB7XG5cdFx0XHRcdFx0XHQvLyBUT0RPOiBwYXJzZSBmb3JtdWxhXG5cdFx0XHRcdFx0XHRmdGFnID0gcGFyc2V4bWx0YWcoY3JlZlswXSk7XG5cdFx0XHRcdFx0XHR2YXIgX19fZiA9IHVuZXNjYXBleG1sKHV0ZjhyZWFkKGNyZWZbMV0pKTtcblx0XHRcdFx0XHRcdGlmKCFvcHRzLnhsZm4pIF9fX2YgPSBfeGxmbihfX19mKTtcblx0XHRcdFx0XHRcdHNoYXJlZGZbcGFyc2VJbnQoZnRhZy5zaSwgMTApXSA9IFtmdGFnLCBfX19mLCB0YWcucl07XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9IGVsc2UgaWYoKGNyZWY9ZC5tYXRjaCgvPGZbXj5dKlxcLz4vKSkpIHtcblx0XHRcdFx0XHRmdGFnID0gcGFyc2V4bWx0YWcoY3JlZlswXSk7XG5cdFx0XHRcdFx0aWYoc2hhcmVkZltmdGFnLnNpXSkgcC5mID0gc2hpZnRfZm9ybXVsYV94bHN4KHNoYXJlZGZbZnRhZy5zaV1bMV0sIHNoYXJlZGZbZnRhZy5zaV1bMl0vKlswXS5yZWYqLywgdGFnLnIpO1xuXHRcdFx0XHR9XG5cdFx0XHRcdC8qIFRPRE86IGZhY3RvciBvdXQgY29udGFpbnMgbG9naWMgKi9cblx0XHRcdFx0dmFyIF90YWcgPSBkZWNvZGVfY2VsbCh0YWcucik7XG5cdFx0XHRcdGZvcihpID0gMDsgaSA8IGFycmF5Zi5sZW5ndGg7ICsraSlcblx0XHRcdFx0XHRpZihfdGFnLnIgPj0gYXJyYXlmW2ldWzBdLnMuciAmJiBfdGFnLnIgPD0gYXJyYXlmW2ldWzBdLmUucilcblx0XHRcdFx0XHRcdGlmKF90YWcuYyA+PSBhcnJheWZbaV1bMF0ucy5jICYmIF90YWcuYyA8PSBhcnJheWZbaV1bMF0uZS5jKVxuXHRcdFx0XHRcdFx0XHRwLkYgPSBhcnJheWZbaV1bMV07XG5cdFx0XHR9XG5cblx0XHRcdGlmKHRhZy50ID09IG51bGwgJiYgcC52ID09PSB1bmRlZmluZWQpIHtcblx0XHRcdFx0aWYocC5mIHx8IHAuRikge1xuXHRcdFx0XHRcdHAudiA9IDA7IHAudCA9IFwiblwiO1xuXHRcdFx0XHR9IGVsc2UgaWYoIXNoZWV0U3R1YnMpIGNvbnRpbnVlO1xuXHRcdFx0XHRlbHNlIHAudCA9IFwielwiO1xuXHRcdFx0fVxuXHRcdFx0ZWxzZSBwLnQgPSB0YWcudCB8fCBcIm5cIjtcblx0XHRcdGlmKGd1ZXNzLnMuYyA+IHRhZ2MpIGd1ZXNzLnMuYyA9IHRhZ2M7XG5cdFx0XHRpZihndWVzcy5lLmMgPCB0YWdjKSBndWVzcy5lLmMgPSB0YWdjO1xuXHRcdFx0LyogMTguMTguMTEgdCBTVF9DZWxsVHlwZSAqL1xuXHRcdFx0c3dpdGNoKHAudCkge1xuXHRcdFx0XHRjYXNlICduJzpcblx0XHRcdFx0XHRpZihwLnYgPT0gXCJcIiB8fCBwLnYgPT0gbnVsbCkge1xuXHRcdFx0XHRcdFx0aWYoIXNoZWV0U3R1YnMpIGNvbnRpbnVlO1xuXHRcdFx0XHRcdFx0cC50ID0gJ3onO1xuXHRcdFx0XHRcdH0gZWxzZSBwLnYgPSBwYXJzZUZsb2F0KHAudik7XG5cdFx0XHRcdFx0YnJlYWs7XG5cdFx0XHRcdGNhc2UgJ3MnOlxuXHRcdFx0XHRcdGlmKHR5cGVvZiBwLnYgPT0gJ3VuZGVmaW5lZCcpIHtcblx0XHRcdFx0XHRcdGlmKCFzaGVldFN0dWJzKSBjb250aW51ZTtcblx0XHRcdFx0XHRcdHAudCA9ICd6Jztcblx0XHRcdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRcdFx0c3N0ciA9IHN0cnNbcGFyc2VJbnQocC52LCAxMCldO1xuXHRcdFx0XHRcdFx0cC52ID0gc3N0ci50O1xuXHRcdFx0XHRcdFx0cC5yID0gc3N0ci5yO1xuXHRcdFx0XHRcdFx0aWYob3B0cy5jZWxsSFRNTCkgcC5oID0gc3N0ci5oO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0XHRicmVhaztcblx0XHRcdFx0Y2FzZSAnc3RyJzpcblx0XHRcdFx0XHRwLnQgPSBcInNcIjtcblx0XHRcdFx0XHRwLnYgPSAocC52IT1udWxsKSA/IHV0ZjhyZWFkKHAudikgOiAnJztcblx0XHRcdFx0XHRpZihvcHRzLmNlbGxIVE1MKSBwLmggPSBlc2NhcGVodG1sKHAudik7XG5cdFx0XHRcdFx0YnJlYWs7XG5cdFx0XHRcdGNhc2UgJ2lubGluZVN0cic6XG5cdFx0XHRcdFx0Y3JlZiA9IGQubWF0Y2goaXNyZWdleCk7XG5cdFx0XHRcdFx0cC50ID0gJ3MnO1xuXHRcdFx0XHRcdGlmKGNyZWYgIT0gbnVsbCAmJiAoc3N0ciA9IHBhcnNlX3NpKGNyZWZbMV0pKSkge1xuXHRcdFx0XHRcdFx0cC52ID0gc3N0ci50O1xuXHRcdFx0XHRcdFx0aWYob3B0cy5jZWxsSFRNTCkgcC5oID0gc3N0ci5oO1xuXHRcdFx0XHRcdH0gZWxzZSBwLnYgPSBcIlwiO1xuXHRcdFx0XHRcdGJyZWFrO1xuXHRcdFx0XHRjYXNlICdiJzogcC52ID0gcGFyc2V4bWxib29sKHAudik7IGJyZWFrO1xuXHRcdFx0XHRjYXNlICdkJzpcblx0XHRcdFx0XHRpZihvcHRzLmNlbGxEYXRlcykgcC52ID0gcGFyc2VEYXRlKHAudiwgMSk7XG5cdFx0XHRcdFx0ZWxzZSB7IHAudiA9IGRhdGVudW0ocGFyc2VEYXRlKHAudiwgMSkpOyBwLnQgPSAnbic7IH1cblx0XHRcdFx0XHRicmVhaztcblx0XHRcdFx0LyogZXJyb3Igc3RyaW5nIGluIC53LCBudW1iZXIgaW4gLnYgKi9cblx0XHRcdFx0Y2FzZSAnZSc6XG5cdFx0XHRcdFx0aWYoIW9wdHMgfHwgb3B0cy5jZWxsVGV4dCAhPT0gZmFsc2UpIHAudyA9IHAudjtcblx0XHRcdFx0XHRwLnYgPSBSQkVycltwLnZdOyBicmVhaztcblx0XHRcdH1cblx0XHRcdC8qIGZvcm1hdHRpbmcgKi9cblx0XHRcdGZtdGlkID0gZmlsbGlkID0gMDtcblx0XHRcdGNmID0gbnVsbDtcblx0XHRcdGlmKGRvX2Zvcm1hdCAmJiB0YWcucyAhPT0gdW5kZWZpbmVkKSB7XG5cdFx0XHRcdGNmID0gc3R5bGVzLkNlbGxYZlt0YWcuc107XG5cdFx0XHRcdGlmKGNmICE9IG51bGwpIHtcblx0XHRcdFx0XHRpZihjZi5udW1GbXRJZCAhPSBudWxsKSBmbXRpZCA9IGNmLm51bUZtdElkO1xuXHRcdFx0XHRcdGlmKG9wdHMuY2VsbFN0eWxlcykge1xuXHRcdFx0XHRcdFx0aWYoY2YuZmlsbElkICE9IG51bGwpIGZpbGxpZCA9IGNmLmZpbGxJZDtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHRcdHNhZmVfZm9ybWF0KHAsIGZtdGlkLCBmaWxsaWQsIG9wdHMsIHRoZW1lcywgc3R5bGVzKTtcblx0XHRcdGlmKG9wdHMuY2VsbERhdGVzICYmIGRvX2Zvcm1hdCAmJiBwLnQgPT0gJ24nICYmIGZtdF9pc19kYXRlKHRhYmxlX2ZtdFtmbXRpZF0pKSB7IHAudCA9ICdkJzsgcC52ID0gbnVtZGF0ZShwLnYpOyB9XG5cdFx0XHRpZih0YWcuY20gJiYgb3B0cy54bG1ldGEpIHtcblx0XHRcdFx0dmFyIGNtID0gKG9wdHMueGxtZXRhLkNlbGx8fFtdKVsrdGFnLmNtLTFdO1xuXHRcdFx0XHRpZihjbSAmJiBjbS50eXBlID09ICdYTERBUFInKSBwLkQgPSB0cnVlO1xuXHRcdFx0fVxuXHRcdFx0aWYoZGVuc2UpIHtcblx0XHRcdFx0dmFyIF9yID0gZGVjb2RlX2NlbGwodGFnLnIpO1xuXHRcdFx0XHRpZighc1tfci5yXSkgc1tfci5yXSA9IFtdO1xuXHRcdFx0XHRzW19yLnJdW19yLmNdID0gcDtcblx0XHRcdH0gZWxzZSBzW3RhZy5yXSA9IHA7XG5cdFx0fVxuXHR9XG5cdGlmKHJvd3MubGVuZ3RoID4gMCkgc1snIXJvd3MnXSA9IHJvd3M7XG59OyB9KSgpO1xuXG5mdW5jdGlvbiB3cml0ZV93c194bWxfZGF0YSh3cy8qOldvcmtzaGVldCovLCBvcHRzLCBpZHgvKjpudW1iZXIqLywgd2IvKjpXb3JrYm9vayovLyo6OiwgcmVscyovKS8qOnN0cmluZyovIHtcblx0dmFyIG8vKjpBcnJheTxzdHJpbmc+Ki8gPSBbXSwgci8qOkFycmF5PHN0cmluZz4qLyA9IFtdLCByYW5nZSA9IHNhZmVfZGVjb2RlX3JhbmdlKHdzWychcmVmJ10pLCBjZWxsPVwiXCIsIHJlZiwgcnIgPSBcIlwiLCBjb2xzLyo6QXJyYXk8c3RyaW5nPiovID0gW10sIFI9MCwgQz0wLCByb3dzID0gd3NbJyFyb3dzJ107XG5cdHZhciBkZW5zZSA9IEFycmF5LmlzQXJyYXkod3MpO1xuXHR2YXIgcGFyYW1zID0gKHtyOnJyfS8qOmFueSovKSwgcm93Lyo6Um93SW5mbyovLCBoZWlnaHQgPSAtMTtcblx0Zm9yKEMgPSByYW5nZS5zLmM7IEMgPD0gcmFuZ2UuZS5jOyArK0MpIGNvbHNbQ10gPSBlbmNvZGVfY29sKEMpO1xuXHRmb3IoUiA9IHJhbmdlLnMucjsgUiA8PSByYW5nZS5lLnI7ICsrUikge1xuXHRcdHIgPSBbXTtcblx0XHRyciA9IGVuY29kZV9yb3coUik7XG5cdFx0Zm9yKEMgPSByYW5nZS5zLmM7IEMgPD0gcmFuZ2UuZS5jOyArK0MpIHtcblx0XHRcdHJlZiA9IGNvbHNbQ10gKyBycjtcblx0XHRcdHZhciBfY2VsbCA9IGRlbnNlID8gKHdzW1JdfHxbXSlbQ106IHdzW3JlZl07XG5cdFx0XHRpZihfY2VsbCA9PT0gdW5kZWZpbmVkKSBjb250aW51ZTtcblx0XHRcdGlmKChjZWxsID0gd3JpdGVfd3NfeG1sX2NlbGwoX2NlbGwsIHJlZiwgd3MsIG9wdHMsIGlkeCwgd2IpKSAhPSBudWxsKSByLnB1c2goY2VsbCk7XG5cdFx0fVxuXHRcdGlmKHIubGVuZ3RoID4gMCB8fCAocm93cyAmJiByb3dzW1JdKSkge1xuXHRcdFx0cGFyYW1zID0gKHtyOnJyfS8qOmFueSovKTtcblx0XHRcdGlmKHJvd3MgJiYgcm93c1tSXSkge1xuXHRcdFx0XHRyb3cgPSByb3dzW1JdO1xuXHRcdFx0XHRpZihyb3cuaGlkZGVuKSBwYXJhbXMuaGlkZGVuID0gMTtcblx0XHRcdFx0aGVpZ2h0ID0gLTE7XG5cdFx0XHRcdGlmKHJvdy5ocHgpIGhlaWdodCA9IHB4MnB0KHJvdy5ocHgpO1xuXHRcdFx0XHRlbHNlIGlmKHJvdy5ocHQpIGhlaWdodCA9IHJvdy5ocHQ7XG5cdFx0XHRcdGlmKGhlaWdodCA+IC0xKSB7IHBhcmFtcy5odCA9IGhlaWdodDsgcGFyYW1zLmN1c3RvbUhlaWdodCA9IDE7IH1cblx0XHRcdFx0aWYocm93LmxldmVsKSB7IHBhcmFtcy5vdXRsaW5lTGV2ZWwgPSByb3cubGV2ZWw7IH1cblx0XHRcdH1cblx0XHRcdG9bby5sZW5ndGhdID0gKHdyaXRleHRhZygncm93Jywgci5qb2luKFwiXCIpLCBwYXJhbXMpKTtcblx0XHR9XG5cdH1cblx0aWYocm93cykgZm9yKDsgUiA8IHJvd3MubGVuZ3RoOyArK1IpIHtcblx0XHRpZihyb3dzICYmIHJvd3NbUl0pIHtcblx0XHRcdHBhcmFtcyA9ICh7cjpSKzF9Lyo6YW55Ki8pO1xuXHRcdFx0cm93ID0gcm93c1tSXTtcblx0XHRcdGlmKHJvdy5oaWRkZW4pIHBhcmFtcy5oaWRkZW4gPSAxO1xuXHRcdFx0aGVpZ2h0ID0gLTE7XG5cdFx0XHRpZiAocm93LmhweCkgaGVpZ2h0ID0gcHgycHQocm93LmhweCk7XG5cdFx0XHRlbHNlIGlmIChyb3cuaHB0KSBoZWlnaHQgPSByb3cuaHB0O1xuXHRcdFx0aWYgKGhlaWdodCA+IC0xKSB7IHBhcmFtcy5odCA9IGhlaWdodDsgcGFyYW1zLmN1c3RvbUhlaWdodCA9IDE7IH1cblx0XHRcdGlmIChyb3cubGV2ZWwpIHsgcGFyYW1zLm91dGxpbmVMZXZlbCA9IHJvdy5sZXZlbDsgfVxuXHRcdFx0b1tvLmxlbmd0aF0gPSAod3JpdGV4dGFnKCdyb3cnLCBcIlwiLCBwYXJhbXMpKTtcblx0XHR9XG5cdH1cblx0cmV0dXJuIG8uam9pbihcIlwiKTtcbn1cblxuZnVuY3Rpb24gd3JpdGVfd3NfeG1sKGlkeC8qOm51bWJlciovLCBvcHRzLCB3Yi8qOldvcmtib29rKi8sIHJlbHMpLyo6c3RyaW5nKi8ge1xuXHR2YXIgbyA9IFtYTUxfSEVBREVSLCB3cml0ZXh0YWcoJ3dvcmtzaGVldCcsIG51bGwsIHtcblx0XHQneG1sbnMnOiBYTUxOU19tYWluWzBdLFxuXHRcdCd4bWxuczpyJzogWE1MTlMuclxuXHR9KV07XG5cdHZhciBzID0gd2IuU2hlZXROYW1lc1tpZHhdLCBzaWR4ID0gMCwgcmRhdGEgPSBcIlwiO1xuXHR2YXIgd3MgPSB3Yi5TaGVldHNbc107XG5cdGlmKHdzID09IG51bGwpIHdzID0ge307XG5cdHZhciByZWYgPSB3c1snIXJlZiddIHx8ICdBMSc7XG5cdHZhciByYW5nZSA9IHNhZmVfZGVjb2RlX3JhbmdlKHJlZik7XG5cdGlmKHJhbmdlLmUuYyA+IDB4M0ZGRiB8fCByYW5nZS5lLnIgPiAweEZGRkZGKSB7XG5cdFx0aWYob3B0cy5XVEYpIHRocm93IG5ldyBFcnJvcihcIlJhbmdlIFwiICsgcmVmICsgXCIgZXhjZWVkcyBmb3JtYXQgbGltaXQgQTE6WEZEMTA0ODU3NlwiKTtcblx0XHRyYW5nZS5lLmMgPSBNYXRoLm1pbihyYW5nZS5lLmMsIDB4M0ZGRik7XG5cdFx0cmFuZ2UuZS5yID0gTWF0aC5taW4ocmFuZ2UuZS5jLCAweEZGRkZGKTtcblx0XHRyZWYgPSBlbmNvZGVfcmFuZ2UocmFuZ2UpO1xuXHR9XG5cdGlmKCFyZWxzKSByZWxzID0ge307XG5cdHdzWychY29tbWVudHMnXSA9IFtdO1xuXHR2YXIgX2RyYXdpbmcgPSBbXTtcblxuXHR3cml0ZV93c194bWxfc2hlZXRwcih3cywgd2IsIGlkeCwgb3B0cywgbyk7XG5cblx0b1tvLmxlbmd0aF0gPSAod3JpdGV4dGFnKCdkaW1lbnNpb24nLCBudWxsLCB7J3JlZic6IHJlZn0pKTtcblxuXHRvW28ubGVuZ3RoXSA9IHdyaXRlX3dzX3htbF9zaGVldHZpZXdzKHdzLCBvcHRzLCBpZHgsIHdiKTtcblxuXHQvKiBUT0RPOiBzdG9yZSBpbiBXQiwgcHJvY2VzcyBzdHlsZXMgKi9cblx0aWYob3B0cy5zaGVldEZvcm1hdCkgb1tvLmxlbmd0aF0gPSAod3JpdGV4dGFnKCdzaGVldEZvcm1hdFByJywgbnVsbCwge1xuXHRcdGRlZmF1bHRSb3dIZWlnaHQ6b3B0cy5zaGVldEZvcm1hdC5kZWZhdWx0Um93SGVpZ2h0fHwnMTYnLFxuXHRcdGJhc2VDb2xXaWR0aDpvcHRzLnNoZWV0Rm9ybWF0LmJhc2VDb2xXaWR0aHx8JzEwJyxcblx0XHRvdXRsaW5lTGV2ZWxSb3c6b3B0cy5zaGVldEZvcm1hdC5vdXRsaW5lTGV2ZWxSb3d8fCc3J1xuXHR9KSk7XG5cblx0aWYod3NbJyFjb2xzJ10gIT0gbnVsbCAmJiB3c1snIWNvbHMnXS5sZW5ndGggPiAwKSBvW28ubGVuZ3RoXSA9ICh3cml0ZV93c194bWxfY29scyh3cywgd3NbJyFjb2xzJ10pKTtcblxuXHRvW3NpZHggPSBvLmxlbmd0aF0gPSAnPHNoZWV0RGF0YS8+Jztcblx0d3NbJyFsaW5rcyddID0gW107XG5cdGlmKHdzWychcmVmJ10gIT0gbnVsbCkge1xuXHRcdHJkYXRhID0gd3JpdGVfd3NfeG1sX2RhdGEod3MsIG9wdHMsIGlkeCwgd2IsIHJlbHMpO1xuXHRcdGlmKHJkYXRhLmxlbmd0aCA+IDApIG9bby5sZW5ndGhdID0gKHJkYXRhKTtcblx0fVxuXHRpZihvLmxlbmd0aD5zaWR4KzEpIHsgb1tvLmxlbmd0aF0gPSAoJzwvc2hlZXREYXRhPicpOyBvW3NpZHhdPW9bc2lkeF0ucmVwbGFjZShcIi8+XCIsXCI+XCIpOyB9XG5cblx0Lyogc2hlZXRDYWxjUHIgKi9cblxuXHRpZih3c1snIXByb3RlY3QnXSkgb1tvLmxlbmd0aF0gPSB3cml0ZV93c194bWxfcHJvdGVjdGlvbih3c1snIXByb3RlY3QnXSk7XG5cblx0LyogcHJvdGVjdGVkUmFuZ2VzICovXG5cdC8qIHNjZW5hcmlvcyAqL1xuXG5cdGlmKHdzWychYXV0b2ZpbHRlciddICE9IG51bGwpIG9bby5sZW5ndGhdID0gd3JpdGVfd3NfeG1sX2F1dG9maWx0ZXIod3NbJyFhdXRvZmlsdGVyJ10sIHdzLCB3YiwgaWR4KTtcblxuXHQvKiBzb3J0U3RhdGUgKi9cblx0LyogZGF0YUNvbnNvbGlkYXRlICovXG5cdC8qIGN1c3RvbVNoZWV0Vmlld3MgKi9cblxuXHRpZih3c1snIW1lcmdlcyddICE9IG51bGwgJiYgd3NbJyFtZXJnZXMnXS5sZW5ndGggPiAwKSBvW28ubGVuZ3RoXSA9ICh3cml0ZV93c194bWxfbWVyZ2VzKHdzWychbWVyZ2VzJ10pKTtcblxuXHQvKiBwaG9uZXRpY1ByICovXG5cdC8qIGNvbmRpdGlvbmFsRm9ybWF0dGluZyAqL1xuXHQvKiBkYXRhVmFsaWRhdGlvbnMgKi9cblxuXHR2YXIgcmVsYyA9IC0xLCByZWwsIHJJZCA9IC0xO1xuXHRpZigvKjo6KCovd3NbJyFsaW5rcyddLyo6Onx8W10pKi8ubGVuZ3RoID4gMCkge1xuXHRcdG9bby5sZW5ndGhdID0gXCI8aHlwZXJsaW5rcz5cIjtcblx0XHQvKjo6KCovd3NbJyFsaW5rcyddLyo6Onx8W10pKi8uZm9yRWFjaChmdW5jdGlvbihsKSB7XG5cdFx0XHRpZighbFsxXS5UYXJnZXQpIHJldHVybjtcblx0XHRcdHJlbCA9ICh7XCJyZWZcIjpsWzBdfS8qOmFueSovKTtcblx0XHRcdGlmKGxbMV0uVGFyZ2V0LmNoYXJBdCgwKSAhPSBcIiNcIikge1xuXHRcdFx0XHRySWQgPSBhZGRfcmVscyhyZWxzLCAtMSwgZXNjYXBleG1sKGxbMV0uVGFyZ2V0KS5yZXBsYWNlKC8jLiokLywgXCJcIiksIFJFTFMuSExJTkspO1xuXHRcdFx0XHRyZWxbXCJyOmlkXCJdID0gXCJySWRcIitySWQ7XG5cdFx0XHR9XG5cdFx0XHRpZigocmVsYyA9IGxbMV0uVGFyZ2V0LmluZGV4T2YoXCIjXCIpKSA+IC0xKSByZWwubG9jYXRpb24gPSBlc2NhcGV4bWwobFsxXS5UYXJnZXQuc2xpY2UocmVsYysxKSk7XG5cdFx0XHRpZihsWzFdLlRvb2x0aXApIHJlbC50b29sdGlwID0gZXNjYXBleG1sKGxbMV0uVG9vbHRpcCk7XG5cdFx0XHRvW28ubGVuZ3RoXSA9IHdyaXRleHRhZyhcImh5cGVybGlua1wiLG51bGwscmVsKTtcblx0XHR9KTtcblx0XHRvW28ubGVuZ3RoXSA9IFwiPC9oeXBlcmxpbmtzPlwiO1xuXHR9XG5cdGRlbGV0ZSB3c1snIWxpbmtzJ107XG5cblx0LyogcHJpbnRPcHRpb25zICovXG5cblx0aWYod3NbJyFtYXJnaW5zJ10gIT0gbnVsbCkgb1tvLmxlbmd0aF0gPSAgd3JpdGVfd3NfeG1sX21hcmdpbnMod3NbJyFtYXJnaW5zJ10pO1xuXG5cdC8qIHBhZ2VTZXR1cCAqL1xuXHQvKiBoZWFkZXJGb290ZXIgKi9cblx0Lyogcm93QnJlYWtzICovXG5cdC8qIGNvbEJyZWFrcyAqL1xuXHQvKiBjdXN0b21Qcm9wZXJ0aWVzICovXG5cdC8qIGNlbGxXYXRjaGVzICovXG5cblx0aWYoIW9wdHMgfHwgb3B0cy5pZ25vcmVFQyB8fCAob3B0cy5pZ25vcmVFQyA9PSAodm9pZCAwKSkpIG9bby5sZW5ndGhdID0gd3JpdGV0YWcoXCJpZ25vcmVkRXJyb3JzXCIsIHdyaXRleHRhZyhcImlnbm9yZWRFcnJvclwiLCBudWxsLCB7bnVtYmVyU3RvcmVkQXNUZXh0OjEsIHNxcmVmOnJlZn0pKTtcblxuXHQvKiBzbWFydFRhZ3MgKi9cblxuXHRpZihfZHJhd2luZy5sZW5ndGggPiAwKSB7XG5cdFx0cklkID0gYWRkX3JlbHMocmVscywgLTEsIFwiLi4vZHJhd2luZ3MvZHJhd2luZ1wiICsgKGlkeCsxKSArIFwiLnhtbFwiLCBSRUxTLkRSQVcpO1xuXHRcdG9bby5sZW5ndGhdID0gd3JpdGV4dGFnKFwiZHJhd2luZ1wiLCBudWxsLCB7XCJyOmlkXCI6XCJySWRcIiArIHJJZH0pO1xuXHRcdHdzWychZHJhd2luZyddID0gX2RyYXdpbmc7XG5cdH1cblxuXHRpZih3c1snIWNvbW1lbnRzJ10ubGVuZ3RoID4gMCkge1xuXHRcdHJJZCA9IGFkZF9yZWxzKHJlbHMsIC0xLCBcIi4uL2RyYXdpbmdzL3ZtbERyYXdpbmdcIiArIChpZHgrMSkgKyBcIi52bWxcIiwgUkVMUy5WTUwpO1xuXHRcdG9bby5sZW5ndGhdID0gd3JpdGV4dGFnKFwibGVnYWN5RHJhd2luZ1wiLCBudWxsLCB7XCJyOmlkXCI6XCJySWRcIiArIHJJZH0pO1xuXHRcdHdzWychbGVnYWN5J10gPSBySWQ7XG5cdH1cblxuXHQvKiBsZWdhY3lEcmF3aW5nSEYgKi9cblx0LyogcGljdHVyZSAqL1xuXHQvKiBvbGVPYmplY3RzICovXG5cdC8qIGNvbnRyb2xzICovXG5cdC8qIHdlYlB1Ymxpc2hJdGVtcyAqL1xuXHQvKiB0YWJsZVBhcnRzICovXG5cdC8qIGV4dExzdCAqL1xuXG5cdGlmKG8ubGVuZ3RoPjEpIHsgb1tvLmxlbmd0aF0gPSAoJzwvd29ya3NoZWV0PicpOyBvWzFdPW9bMV0ucmVwbGFjZShcIi8+XCIsXCI+XCIpOyB9XG5cdHJldHVybiBvLmpvaW4oXCJcIik7XG59XG5cbi8qIFtNUy1YTFNCXSAyLjQuNzI2IEJydFJvd0hkciAqL1xuZnVuY3Rpb24gcGFyc2VfQnJ0Um93SGRyKGRhdGEsIGxlbmd0aCkge1xuXHR2YXIgeiA9ICh7fS8qOmFueSovKTtcblx0dmFyIHRndCA9IGRhdGEubCArIGxlbmd0aDtcblx0ei5yID0gZGF0YS5yZWFkX3NoaWZ0KDQpO1xuXHRkYXRhLmwgKz0gNDsgLy8gVE9ETzogaXhmZVxuXHR2YXIgbWl5UncgPSBkYXRhLnJlYWRfc2hpZnQoMik7XG5cdGRhdGEubCArPSAxOyAvLyBUT0RPOiB0b3AvYm90IHBhZGRpbmdcblx0dmFyIGZsYWdzID0gZGF0YS5yZWFkX3NoaWZ0KDEpO1xuXHRkYXRhLmwgPSB0Z3Q7XG5cdGlmKGZsYWdzICYgMHgwNykgei5sZXZlbCA9IGZsYWdzICYgMHgwNztcblx0aWYoZmxhZ3MgJiAweDEwKSB6LmhpZGRlbiA9IHRydWU7XG5cdGlmKGZsYWdzICYgMHgyMCkgei5ocHQgPSBtaXlSdyAvIDIwO1xuXHRyZXR1cm4gejtcbn1cbmZ1bmN0aW9uIHdyaXRlX0JydFJvd0hkcihSLyo6bnVtYmVyKi8sIHJhbmdlLCB3cykge1xuXHR2YXIgbyA9IG5ld19idWYoMTcrOCoxNik7XG5cdHZhciByb3cgPSAod3NbJyFyb3dzJ118fFtdKVtSXXx8e307XG5cdG8ud3JpdGVfc2hpZnQoNCwgUik7XG5cblx0by53cml0ZV9zaGlmdCg0LCAwKTsgLyogVE9ETzogaXhmZSAqL1xuXG5cdHZhciBtaXlSdyA9IDB4MDE0MDtcblx0aWYocm93LmhweCkgbWl5UncgPSBweDJwdChyb3cuaHB4KSAqIDIwO1xuXHRlbHNlIGlmKHJvdy5ocHQpIG1peVJ3ID0gcm93LmhwdCAqIDIwO1xuXHRvLndyaXRlX3NoaWZ0KDIsIG1peVJ3KTtcblxuXHRvLndyaXRlX3NoaWZ0KDEsIDApOyAvKiB0b3AvYm90IHBhZGRpbmcgKi9cblxuXHR2YXIgZmxhZ3MgPSAweDA7XG5cdGlmKHJvdy5sZXZlbCkgZmxhZ3MgfD0gcm93LmxldmVsO1xuXHRpZihyb3cuaGlkZGVuKSBmbGFncyB8PSAweDEwO1xuXHRpZihyb3cuaHB4IHx8IHJvdy5ocHQpIGZsYWdzIHw9IDB4MjA7XG5cdG8ud3JpdGVfc2hpZnQoMSwgZmxhZ3MpO1xuXG5cdG8ud3JpdGVfc2hpZnQoMSwgMCk7IC8qIHBob25ldGljIGd1aWRlICovXG5cblx0LyogW01TLVhMU0JdIDIuNS44IEJydENvbFNwYW4gZXhwbGFpbnMgdGhlIG1lY2hhbmlzbSAqL1xuXHR2YXIgbmNvbHNwYW4gPSAwLCBsY3MgPSBvLmw7XG5cdG8ubCArPSA0O1xuXG5cdHZhciBjYWRkciA9IHtyOlIsIGM6MH07XG5cdGZvcih2YXIgaSA9IDA7IGkgPCAxNjsgKytpKSB7XG5cdFx0aWYoKHJhbmdlLnMuYyA+ICgoaSsxKSA8PCAxMCkpIHx8IChyYW5nZS5lLmMgPCAoaSA8PCAxMCkpKSBjb250aW51ZTtcblx0XHR2YXIgZmlyc3QgPSAtMSwgbGFzdCA9IC0xO1xuXHRcdGZvcih2YXIgaiA9IChpPDwxMCk7IGogPCAoKGkrMSk8PDEwKTsgKytqKSB7XG5cdFx0XHRjYWRkci5jID0gajtcblx0XHRcdHZhciBjZWxsID0gQXJyYXkuaXNBcnJheSh3cykgPyAod3NbY2FkZHIucl18fFtdKVtjYWRkci5jXSA6IHdzW2VuY29kZV9jZWxsKGNhZGRyKV07XG5cdFx0XHRpZihjZWxsKSB7IGlmKGZpcnN0IDwgMCkgZmlyc3QgPSBqOyBsYXN0ID0gajsgfVxuXHRcdH1cblx0XHRpZihmaXJzdCA8IDApIGNvbnRpbnVlO1xuXHRcdCsrbmNvbHNwYW47XG5cdFx0by53cml0ZV9zaGlmdCg0LCBmaXJzdCk7XG5cdFx0by53cml0ZV9zaGlmdCg0LCBsYXN0KTtcblx0fVxuXG5cdHZhciBsID0gby5sO1xuXHRvLmwgPSBsY3M7XG5cdG8ud3JpdGVfc2hpZnQoNCwgbmNvbHNwYW4pO1xuXHRvLmwgPSBsO1xuXG5cdHJldHVybiBvLmxlbmd0aCA+IG8ubCA/IG8uc2xpY2UoMCwgby5sKSA6IG87XG59XG5mdW5jdGlvbiB3cml0ZV9yb3dfaGVhZGVyKGJhLCB3cywgcmFuZ2UsIFIpIHtcblx0dmFyIG8gPSB3cml0ZV9CcnRSb3dIZHIoUiwgcmFuZ2UsIHdzKTtcblx0aWYoKG8ubGVuZ3RoID4gMTcpIHx8ICh3c1snIXJvd3MnXXx8W10pW1JdKSB3cml0ZV9yZWNvcmQoYmEsIDB4MDAwMCAvKiBCcnRSb3dIZHIgKi8sIG8pO1xufVxuXG4vKiBbTVMtWExTQl0gMi40LjgyMCBCcnRXc0RpbSAqL1xudmFyIHBhcnNlX0JydFdzRGltID0gcGFyc2VfVW5jaGVja2VkUmZYO1xudmFyIHdyaXRlX0JydFdzRGltID0gd3JpdGVfVW5jaGVja2VkUmZYO1xuXG4vKiBbTVMtWExTQl0gMi40LjgyMSBCcnRXc0ZtdEluZm8gKi9cbmZ1bmN0aW9uIHBhcnNlX0JydFdzRm10SW5mbygvKjo6ZGF0YSwgbGVuZ3RoKi8pIHtcbn1cbi8vZnVuY3Rpb24gd3JpdGVfQnJ0V3NGbXRJbmZvKHdzLCBvKSB7IH1cblxuLyogW01TLVhMU0JdIDIuNC44MjMgQnJ0V3NQcm9wICovXG5mdW5jdGlvbiBwYXJzZV9CcnRXc1Byb3AoZGF0YSwgbGVuZ3RoKSB7XG5cdHZhciB6ID0ge307XG5cdHZhciBmID0gZGF0YVtkYXRhLmxdOyArK2RhdGEubDtcblx0ei5hYm92ZSA9ICEoZiAmIDB4NDApO1xuXHR6LmxlZnQgID0gIShmICYgMHg4MCk7XG5cdC8qIFRPRE86IHB1bGwgZmxhZ3MgKi9cblx0ZGF0YS5sICs9IDE4O1xuXHR6Lm5hbWUgPSBwYXJzZV9YTFNCQ29kZU5hbWUoZGF0YSwgbGVuZ3RoIC0gMTkpO1xuXHRyZXR1cm4gejtcbn1cbmZ1bmN0aW9uIHdyaXRlX0JydFdzUHJvcChzdHIsIG91dGwsIG8pIHtcblx0aWYobyA9PSBudWxsKSBvID0gbmV3X2J1Zig4NCs0KnN0ci5sZW5ndGgpO1xuXHR2YXIgZiA9IDB4QzA7XG5cdGlmKG91dGwpIHtcblx0XHRpZihvdXRsLmFib3ZlKSBmICY9IH4weDQwO1xuXHRcdGlmKG91dGwubGVmdCkgIGYgJj0gfjB4ODA7XG5cdH1cblx0by53cml0ZV9zaGlmdCgxLCBmKTtcblx0Zm9yKHZhciBpID0gMTsgaSA8IDM7ICsraSkgby53cml0ZV9zaGlmdCgxLDApO1xuXHR3cml0ZV9CcnRDb2xvcih7YXV0bzoxfSwgbyk7XG5cdG8ud3JpdGVfc2hpZnQoLTQsLTEpO1xuXHRvLndyaXRlX3NoaWZ0KC00LC0xKTtcblx0d3JpdGVfWExTQkNvZGVOYW1lKHN0ciwgbyk7XG5cdHJldHVybiBvLnNsaWNlKDAsIG8ubCk7XG59XG5cbi8qIFtNUy1YTFNCXSAyLjQuMzA2IEJydENlbGxCbGFuayAqL1xuZnVuY3Rpb24gcGFyc2VfQnJ0Q2VsbEJsYW5rKGRhdGEpIHtcblx0dmFyIGNlbGwgPSBwYXJzZV9YTFNCQ2VsbChkYXRhKTtcblx0cmV0dXJuIFtjZWxsXTtcbn1cbmZ1bmN0aW9uIHdyaXRlX0JydENlbGxCbGFuayhjZWxsLCBuY2VsbCwgbykge1xuXHRpZihvID09IG51bGwpIG8gPSBuZXdfYnVmKDgpO1xuXHRyZXR1cm4gd3JpdGVfWExTQkNlbGwobmNlbGwsIG8pO1xufVxuZnVuY3Rpb24gcGFyc2VfQnJ0U2hvcnRCbGFuayhkYXRhKSB7XG5cdHZhciBjZWxsID0gcGFyc2VfWExTQlNob3J0Q2VsbChkYXRhKTtcblx0cmV0dXJuIFtjZWxsXTtcbn1cbmZ1bmN0aW9uIHdyaXRlX0JydFNob3J0QmxhbmsoY2VsbCwgbmNlbGwsIG8pIHtcblx0aWYobyA9PSBudWxsKSBvID0gbmV3X2J1Zig0KTtcblx0cmV0dXJuIHdyaXRlX1hMU0JTaG9ydENlbGwobmNlbGwsIG8pO1xufVxuXG4vKiBbTVMtWExTQl0gMi40LjMwNyBCcnRDZWxsQm9vbCAqL1xuZnVuY3Rpb24gcGFyc2VfQnJ0Q2VsbEJvb2woZGF0YSkge1xuXHR2YXIgY2VsbCA9IHBhcnNlX1hMU0JDZWxsKGRhdGEpO1xuXHR2YXIgZkJvb2wgPSBkYXRhLnJlYWRfc2hpZnQoMSk7XG5cdHJldHVybiBbY2VsbCwgZkJvb2wsICdiJ107XG59XG5mdW5jdGlvbiB3cml0ZV9CcnRDZWxsQm9vbChjZWxsLCBuY2VsbCwgbykge1xuXHRpZihvID09IG51bGwpIG8gPSBuZXdfYnVmKDkpO1xuXHR3cml0ZV9YTFNCQ2VsbChuY2VsbCwgbyk7XG5cdG8ud3JpdGVfc2hpZnQoMSwgY2VsbC52ID8gMSA6IDApO1xuXHRyZXR1cm4gbztcbn1cbmZ1bmN0aW9uIHBhcnNlX0JydFNob3J0Qm9vbChkYXRhKSB7XG5cdHZhciBjZWxsID0gcGFyc2VfWExTQlNob3J0Q2VsbChkYXRhKTtcblx0dmFyIGZCb29sID0gZGF0YS5yZWFkX3NoaWZ0KDEpO1xuXHRyZXR1cm4gW2NlbGwsIGZCb29sLCAnYiddO1xufVxuZnVuY3Rpb24gd3JpdGVfQnJ0U2hvcnRCb29sKGNlbGwsIG5jZWxsLCBvKSB7XG5cdGlmKG8gPT0gbnVsbCkgbyA9IG5ld19idWYoNSk7XG5cdHdyaXRlX1hMU0JTaG9ydENlbGwobmNlbGwsIG8pO1xuXHRvLndyaXRlX3NoaWZ0KDEsIGNlbGwudiA/IDEgOiAwKTtcblx0cmV0dXJuIG87XG59XG5cbi8qIFtNUy1YTFNCXSAyLjQuMzA4IEJydENlbGxFcnJvciAqL1xuZnVuY3Rpb24gcGFyc2VfQnJ0Q2VsbEVycm9yKGRhdGEpIHtcblx0dmFyIGNlbGwgPSBwYXJzZV9YTFNCQ2VsbChkYXRhKTtcblx0dmFyIGJFcnJvciA9IGRhdGEucmVhZF9zaGlmdCgxKTtcblx0cmV0dXJuIFtjZWxsLCBiRXJyb3IsICdlJ107XG59XG5mdW5jdGlvbiB3cml0ZV9CcnRDZWxsRXJyb3IoY2VsbCwgbmNlbGwsIG8pIHtcblx0aWYobyA9PSBudWxsKSBvID0gbmV3X2J1Zig5KTtcblx0d3JpdGVfWExTQkNlbGwobmNlbGwsIG8pO1xuXHRvLndyaXRlX3NoaWZ0KDEsIGNlbGwudik7XG5cdHJldHVybiBvO1xufVxuZnVuY3Rpb24gcGFyc2VfQnJ0U2hvcnRFcnJvcihkYXRhKSB7XG5cdHZhciBjZWxsID0gcGFyc2VfWExTQlNob3J0Q2VsbChkYXRhKTtcblx0dmFyIGJFcnJvciA9IGRhdGEucmVhZF9zaGlmdCgxKTtcblx0cmV0dXJuIFtjZWxsLCBiRXJyb3IsICdlJ107XG59XG5mdW5jdGlvbiB3cml0ZV9CcnRTaG9ydEVycm9yKGNlbGwsIG5jZWxsLCBvKSB7XG5cdGlmKG8gPT0gbnVsbCkgbyA9IG5ld19idWYoOCk7XG5cdHdyaXRlX1hMU0JTaG9ydENlbGwobmNlbGwsIG8pO1xuXHRvLndyaXRlX3NoaWZ0KDEsIGNlbGwudik7XG5cdG8ud3JpdGVfc2hpZnQoMiwgMCk7XG5cdG8ud3JpdGVfc2hpZnQoMSwgMCk7XG5cdHJldHVybiBvO1xufVxuXG5cbi8qIFtNUy1YTFNCXSAyLjQuMzExIEJydENlbGxJc3N0ICovXG5mdW5jdGlvbiBwYXJzZV9CcnRDZWxsSXNzdChkYXRhKSB7XG5cdHZhciBjZWxsID0gcGFyc2VfWExTQkNlbGwoZGF0YSk7XG5cdHZhciBpc3N0ID0gZGF0YS5yZWFkX3NoaWZ0KDQpO1xuXHRyZXR1cm4gW2NlbGwsIGlzc3QsICdzJ107XG59XG5mdW5jdGlvbiB3cml0ZV9CcnRDZWxsSXNzdChjZWxsLCBuY2VsbCwgbykge1xuXHRpZihvID09IG51bGwpIG8gPSBuZXdfYnVmKDEyKTtcblx0d3JpdGVfWExTQkNlbGwobmNlbGwsIG8pO1xuXHRvLndyaXRlX3NoaWZ0KDQsIG5jZWxsLnYpO1xuXHRyZXR1cm4gbztcbn1cbmZ1bmN0aW9uIHBhcnNlX0JydFNob3J0SXNzdChkYXRhKSB7XG5cdHZhciBjZWxsID0gcGFyc2VfWExTQlNob3J0Q2VsbChkYXRhKTtcblx0dmFyIGlzc3QgPSBkYXRhLnJlYWRfc2hpZnQoNCk7XG5cdHJldHVybiBbY2VsbCwgaXNzdCwgJ3MnXTtcbn1cbmZ1bmN0aW9uIHdyaXRlX0JydFNob3J0SXNzdChjZWxsLCBuY2VsbCwgbykge1xuXHRpZihvID09IG51bGwpIG8gPSBuZXdfYnVmKDgpO1xuXHR3cml0ZV9YTFNCU2hvcnRDZWxsKG5jZWxsLCBvKTtcblx0by53cml0ZV9zaGlmdCg0LCBuY2VsbC52KTtcblx0cmV0dXJuIG87XG59XG5cbi8qIFtNUy1YTFNCXSAyLjQuMzEzIEJydENlbGxSZWFsICovXG5mdW5jdGlvbiBwYXJzZV9CcnRDZWxsUmVhbChkYXRhKSB7XG5cdHZhciBjZWxsID0gcGFyc2VfWExTQkNlbGwoZGF0YSk7XG5cdHZhciB2YWx1ZSA9IHBhcnNlX1hudW0oZGF0YSk7XG5cdHJldHVybiBbY2VsbCwgdmFsdWUsICduJ107XG59XG5mdW5jdGlvbiB3cml0ZV9CcnRDZWxsUmVhbChjZWxsLCBuY2VsbCwgbykge1xuXHRpZihvID09IG51bGwpIG8gPSBuZXdfYnVmKDE2KTtcblx0d3JpdGVfWExTQkNlbGwobmNlbGwsIG8pO1xuXHR3cml0ZV9YbnVtKGNlbGwudiwgbyk7XG5cdHJldHVybiBvO1xufVxuZnVuY3Rpb24gcGFyc2VfQnJ0U2hvcnRSZWFsKGRhdGEpIHtcblx0dmFyIGNlbGwgPSBwYXJzZV9YTFNCU2hvcnRDZWxsKGRhdGEpO1xuXHR2YXIgdmFsdWUgPSBwYXJzZV9YbnVtKGRhdGEpO1xuXHRyZXR1cm4gW2NlbGwsIHZhbHVlLCAnbiddO1xufVxuZnVuY3Rpb24gd3JpdGVfQnJ0U2hvcnRSZWFsKGNlbGwsIG5jZWxsLCBvKSB7XG5cdGlmKG8gPT0gbnVsbCkgbyA9IG5ld19idWYoMTIpO1xuXHR3cml0ZV9YTFNCU2hvcnRDZWxsKG5jZWxsLCBvKTtcblx0d3JpdGVfWG51bShjZWxsLnYsIG8pO1xuXHRyZXR1cm4gbztcbn1cblxuLyogW01TLVhMU0JdIDIuNC4zMTQgQnJ0Q2VsbFJrICovXG5mdW5jdGlvbiBwYXJzZV9CcnRDZWxsUmsoZGF0YSkge1xuXHR2YXIgY2VsbCA9IHBhcnNlX1hMU0JDZWxsKGRhdGEpO1xuXHR2YXIgdmFsdWUgPSBwYXJzZV9Sa051bWJlcihkYXRhKTtcblx0cmV0dXJuIFtjZWxsLCB2YWx1ZSwgJ24nXTtcbn1cbmZ1bmN0aW9uIHdyaXRlX0JydENlbGxSayhjZWxsLCBuY2VsbCwgbykge1xuXHRpZihvID09IG51bGwpIG8gPSBuZXdfYnVmKDEyKTtcblx0d3JpdGVfWExTQkNlbGwobmNlbGwsIG8pO1xuXHR3cml0ZV9Sa051bWJlcihjZWxsLnYsIG8pO1xuXHRyZXR1cm4gbztcbn1cbmZ1bmN0aW9uIHBhcnNlX0JydFNob3J0UmsoZGF0YSkge1xuXHR2YXIgY2VsbCA9IHBhcnNlX1hMU0JTaG9ydENlbGwoZGF0YSk7XG5cdHZhciB2YWx1ZSA9IHBhcnNlX1JrTnVtYmVyKGRhdGEpO1xuXHRyZXR1cm4gW2NlbGwsIHZhbHVlLCAnbiddO1xufVxuZnVuY3Rpb24gd3JpdGVfQnJ0U2hvcnRSayhjZWxsLCBuY2VsbCwgbykge1xuXHRpZihvID09IG51bGwpIG8gPSBuZXdfYnVmKDgpO1xuXHR3cml0ZV9YTFNCU2hvcnRDZWxsKG5jZWxsLCBvKTtcblx0d3JpdGVfUmtOdW1iZXIoY2VsbC52LCBvKTtcblx0cmV0dXJuIG87XG59XG5cbi8qIFtNUy1YTFNCXSAyLjQuMzIzIEJydENlbGxSU3RyaW5nICovXG5mdW5jdGlvbiBwYXJzZV9CcnRDZWxsUlN0cmluZyhkYXRhKSB7XG5cdHZhciBjZWxsID0gcGFyc2VfWExTQkNlbGwoZGF0YSk7XG5cdHZhciB2YWx1ZSA9IHBhcnNlX1JpY2hTdHIoZGF0YSk7XG5cdHJldHVybiBbY2VsbCwgdmFsdWUsICdpcyddO1xufVxuXG4vKiBbTVMtWExTQl0gMi40LjMxNyBCcnRDZWxsU3QgKi9cbmZ1bmN0aW9uIHBhcnNlX0JydENlbGxTdChkYXRhKSB7XG5cdHZhciBjZWxsID0gcGFyc2VfWExTQkNlbGwoZGF0YSk7XG5cdHZhciB2YWx1ZSA9IHBhcnNlX1hMV2lkZVN0cmluZyhkYXRhKTtcblx0cmV0dXJuIFtjZWxsLCB2YWx1ZSwgJ3N0ciddO1xufVxuZnVuY3Rpb24gd3JpdGVfQnJ0Q2VsbFN0KGNlbGwsIG5jZWxsLCBvKSB7XG5cdGlmKG8gPT0gbnVsbCkgbyA9IG5ld19idWYoMTIgKyA0ICogY2VsbC52Lmxlbmd0aCk7XG5cdHdyaXRlX1hMU0JDZWxsKG5jZWxsLCBvKTtcblx0d3JpdGVfWExXaWRlU3RyaW5nKGNlbGwudiwgbyk7XG5cdHJldHVybiBvLmxlbmd0aCA+IG8ubCA/IG8uc2xpY2UoMCwgby5sKSA6IG87XG59XG5mdW5jdGlvbiBwYXJzZV9CcnRTaG9ydFN0KGRhdGEpIHtcblx0dmFyIGNlbGwgPSBwYXJzZV9YTFNCU2hvcnRDZWxsKGRhdGEpO1xuXHR2YXIgdmFsdWUgPSBwYXJzZV9YTFdpZGVTdHJpbmcoZGF0YSk7XG5cdHJldHVybiBbY2VsbCwgdmFsdWUsICdzdHInXTtcbn1cbmZ1bmN0aW9uIHdyaXRlX0JydFNob3J0U3QoY2VsbCwgbmNlbGwsIG8pIHtcblx0aWYobyA9PSBudWxsKSBvID0gbmV3X2J1Zig4ICsgNCAqIGNlbGwudi5sZW5ndGgpO1xuXHR3cml0ZV9YTFNCU2hvcnRDZWxsKG5jZWxsLCBvKTtcblx0d3JpdGVfWExXaWRlU3RyaW5nKGNlbGwudiwgbyk7XG5cdHJldHVybiBvLmxlbmd0aCA+IG8ubCA/IG8uc2xpY2UoMCwgby5sKSA6IG87XG59XG5cbi8qIFtNUy1YTFNCXSAyLjQuNjUzIEJydEZtbGFCb29sICovXG5mdW5jdGlvbiBwYXJzZV9CcnRGbWxhQm9vbChkYXRhLCBsZW5ndGgsIG9wdHMpIHtcblx0dmFyIGVuZCA9IGRhdGEubCArIGxlbmd0aDtcblx0dmFyIGNlbGwgPSBwYXJzZV9YTFNCQ2VsbChkYXRhKTtcblx0Y2VsbC5yID0gb3B0c1snIXJvdyddO1xuXHR2YXIgdmFsdWUgPSBkYXRhLnJlYWRfc2hpZnQoMSk7XG5cdHZhciBvID0gW2NlbGwsIHZhbHVlLCAnYiddO1xuXHRpZihvcHRzLmNlbGxGb3JtdWxhKSB7XG5cdFx0ZGF0YS5sICs9IDI7XG5cdFx0dmFyIGZvcm11bGEgPSBwYXJzZV9YTFNCQ2VsbFBhcnNlZEZvcm11bGEoZGF0YSwgZW5kIC0gZGF0YS5sLCBvcHRzKTtcblx0XHRvWzNdID0gc3RyaW5naWZ5X2Zvcm11bGEoZm9ybXVsYSwgbnVsbC8qcmFuZ2UqLywgY2VsbCwgb3B0cy5zdXBib29rcywgb3B0cyk7LyogVE9ETyAqL1xuXHR9XG5cdGVsc2UgZGF0YS5sID0gZW5kO1xuXHRyZXR1cm4gbztcbn1cblxuLyogW01TLVhMU0JdIDIuNC42NTQgQnJ0Rm1sYUVycm9yICovXG5mdW5jdGlvbiBwYXJzZV9CcnRGbWxhRXJyb3IoZGF0YSwgbGVuZ3RoLCBvcHRzKSB7XG5cdHZhciBlbmQgPSBkYXRhLmwgKyBsZW5ndGg7XG5cdHZhciBjZWxsID0gcGFyc2VfWExTQkNlbGwoZGF0YSk7XG5cdGNlbGwuciA9IG9wdHNbJyFyb3cnXTtcblx0dmFyIHZhbHVlID0gZGF0YS5yZWFkX3NoaWZ0KDEpO1xuXHR2YXIgbyA9IFtjZWxsLCB2YWx1ZSwgJ2UnXTtcblx0aWYob3B0cy5jZWxsRm9ybXVsYSkge1xuXHRcdGRhdGEubCArPSAyO1xuXHRcdHZhciBmb3JtdWxhID0gcGFyc2VfWExTQkNlbGxQYXJzZWRGb3JtdWxhKGRhdGEsIGVuZCAtIGRhdGEubCwgb3B0cyk7XG5cdFx0b1szXSA9IHN0cmluZ2lmeV9mb3JtdWxhKGZvcm11bGEsIG51bGwvKnJhbmdlKi8sIGNlbGwsIG9wdHMuc3VwYm9va3MsIG9wdHMpOy8qIFRPRE8gKi9cblx0fVxuXHRlbHNlIGRhdGEubCA9IGVuZDtcblx0cmV0dXJuIG87XG59XG5cbi8qIFtNUy1YTFNCXSAyLjQuNjU1IEJydEZtbGFOdW0gKi9cbmZ1bmN0aW9uIHBhcnNlX0JydEZtbGFOdW0oZGF0YSwgbGVuZ3RoLCBvcHRzKSB7XG5cdHZhciBlbmQgPSBkYXRhLmwgKyBsZW5ndGg7XG5cdHZhciBjZWxsID0gcGFyc2VfWExTQkNlbGwoZGF0YSk7XG5cdGNlbGwuciA9IG9wdHNbJyFyb3cnXTtcblx0dmFyIHZhbHVlID0gcGFyc2VfWG51bShkYXRhKTtcblx0dmFyIG8gPSBbY2VsbCwgdmFsdWUsICduJ107XG5cdGlmKG9wdHMuY2VsbEZvcm11bGEpIHtcblx0XHRkYXRhLmwgKz0gMjtcblx0XHR2YXIgZm9ybXVsYSA9IHBhcnNlX1hMU0JDZWxsUGFyc2VkRm9ybXVsYShkYXRhLCBlbmQgLSBkYXRhLmwsIG9wdHMpO1xuXHRcdG9bM10gPSBzdHJpbmdpZnlfZm9ybXVsYShmb3JtdWxhLCBudWxsLypyYW5nZSovLCBjZWxsLCBvcHRzLnN1cGJvb2tzLCBvcHRzKTsvKiBUT0RPICovXG5cdH1cblx0ZWxzZSBkYXRhLmwgPSBlbmQ7XG5cdHJldHVybiBvO1xufVxuXG4vKiBbTVMtWExTQl0gMi40LjY1NiBCcnRGbWxhU3RyaW5nICovXG5mdW5jdGlvbiBwYXJzZV9CcnRGbWxhU3RyaW5nKGRhdGEsIGxlbmd0aCwgb3B0cykge1xuXHR2YXIgZW5kID0gZGF0YS5sICsgbGVuZ3RoO1xuXHR2YXIgY2VsbCA9IHBhcnNlX1hMU0JDZWxsKGRhdGEpO1xuXHRjZWxsLnIgPSBvcHRzWychcm93J107XG5cdHZhciB2YWx1ZSA9IHBhcnNlX1hMV2lkZVN0cmluZyhkYXRhKTtcblx0dmFyIG8gPSBbY2VsbCwgdmFsdWUsICdzdHInXTtcblx0aWYob3B0cy5jZWxsRm9ybXVsYSkge1xuXHRcdGRhdGEubCArPSAyO1xuXHRcdHZhciBmb3JtdWxhID0gcGFyc2VfWExTQkNlbGxQYXJzZWRGb3JtdWxhKGRhdGEsIGVuZCAtIGRhdGEubCwgb3B0cyk7XG5cdFx0b1szXSA9IHN0cmluZ2lmeV9mb3JtdWxhKGZvcm11bGEsIG51bGwvKnJhbmdlKi8sIGNlbGwsIG9wdHMuc3VwYm9va3MsIG9wdHMpOy8qIFRPRE8gKi9cblx0fVxuXHRlbHNlIGRhdGEubCA9IGVuZDtcblx0cmV0dXJuIG87XG59XG5cbi8qIFtNUy1YTFNCXSAyLjQuNjgyIEJydE1lcmdlQ2VsbCAqL1xudmFyIHBhcnNlX0JydE1lcmdlQ2VsbCA9IHBhcnNlX1VuY2hlY2tlZFJmWDtcbnZhciB3cml0ZV9CcnRNZXJnZUNlbGwgPSB3cml0ZV9VbmNoZWNrZWRSZlg7XG4vKiBbTVMtWExTQl0gMi40LjEwNyBCcnRCZWdpbk1lcmdlQ2VsbHMgKi9cbmZ1bmN0aW9uIHdyaXRlX0JydEJlZ2luTWVyZ2VDZWxscyhjbnQsIG8pIHtcblx0aWYobyA9PSBudWxsKSBvID0gbmV3X2J1Zig0KTtcblx0by53cml0ZV9zaGlmdCg0LCBjbnQpO1xuXHRyZXR1cm4gbztcbn1cblxuLyogW01TLVhMU0JdIDIuNC42NjIgQnJ0SExpbmsgKi9cbmZ1bmN0aW9uIHBhcnNlX0JydEhMaW5rKGRhdGEsIGxlbmd0aC8qOjosIG9wdHMqLykge1xuXHR2YXIgZW5kID0gZGF0YS5sICsgbGVuZ3RoO1xuXHR2YXIgcmZ4ID0gcGFyc2VfVW5jaGVja2VkUmZYKGRhdGEsIDE2KTtcblx0dmFyIHJlbElkID0gcGFyc2VfWExOdWxsYWJsZVdpZGVTdHJpbmcoZGF0YSk7XG5cdHZhciBsb2MgPSBwYXJzZV9YTFdpZGVTdHJpbmcoZGF0YSk7XG5cdHZhciB0b29sdGlwID0gcGFyc2VfWExXaWRlU3RyaW5nKGRhdGEpO1xuXHR2YXIgZGlzcGxheSA9IHBhcnNlX1hMV2lkZVN0cmluZyhkYXRhKTtcblx0ZGF0YS5sID0gZW5kO1xuXHR2YXIgbyA9ICh7cmZ4OnJmeCwgcmVsSWQ6cmVsSWQsIGxvYzpsb2MsIGRpc3BsYXk6ZGlzcGxheX0vKjphbnkqLyk7XG5cdGlmKHRvb2x0aXApIG8uVG9vbHRpcCA9IHRvb2x0aXA7XG5cdHJldHVybiBvO1xufVxuZnVuY3Rpb24gd3JpdGVfQnJ0SExpbmsobCwgcklkKSB7XG5cdHZhciBvID0gbmV3X2J1Zig1MCs0KihsWzFdLlRhcmdldC5sZW5ndGggKyAobFsxXS5Ub29sdGlwIHx8IFwiXCIpLmxlbmd0aCkpO1xuXHR3cml0ZV9VbmNoZWNrZWRSZlgoe3M6ZGVjb2RlX2NlbGwobFswXSksIGU6ZGVjb2RlX2NlbGwobFswXSl9LCBvKTtcblx0d3JpdGVfUmVsSUQoXCJySWRcIiArIHJJZCwgbyk7XG5cdHZhciBsb2NpZHggPSBsWzFdLlRhcmdldC5pbmRleE9mKFwiI1wiKTtcblx0dmFyIGxvYyA9IGxvY2lkeCA9PSAtMSA/IFwiXCIgOiBsWzFdLlRhcmdldC5zbGljZShsb2NpZHgrMSk7XG5cdHdyaXRlX1hMV2lkZVN0cmluZyhsb2MgfHwgXCJcIiwgbyk7XG5cdHdyaXRlX1hMV2lkZVN0cmluZyhsWzFdLlRvb2x0aXAgfHwgXCJcIiwgbyk7XG5cdHdyaXRlX1hMV2lkZVN0cmluZyhcIlwiLCBvKTtcblx0cmV0dXJuIG8uc2xpY2UoMCwgby5sKTtcbn1cblxuLyogW01TLVhMU0JdIDIuNC42OTIgQnJ0UGFuZSAqL1xuZnVuY3Rpb24gcGFyc2VfQnJ0UGFuZSgvKmRhdGEsIGxlbmd0aCwgb3B0cyovKSB7XG59XG5cbi8qIFtNUy1YTFNCXSAyLjQuNiBCcnRBcnJGbWxhICovXG5mdW5jdGlvbiBwYXJzZV9CcnRBcnJGbWxhKGRhdGEsIGxlbmd0aCwgb3B0cykge1xuXHR2YXIgZW5kID0gZGF0YS5sICsgbGVuZ3RoO1xuXHR2YXIgcmZ4ID0gcGFyc2VfUmZYKGRhdGEsIDE2KTtcblx0dmFyIGZBbHdheXNDYWxjID0gZGF0YS5yZWFkX3NoaWZ0KDEpO1xuXHR2YXIgbyA9IFtyZnhdOyBvWzJdID0gZkFsd2F5c0NhbGM7XG5cdGlmKG9wdHMuY2VsbEZvcm11bGEpIHtcblx0XHR2YXIgZm9ybXVsYSA9IHBhcnNlX1hMU0JBcnJheVBhcnNlZEZvcm11bGEoZGF0YSwgZW5kIC0gZGF0YS5sLCBvcHRzKTtcblx0XHRvWzFdID0gZm9ybXVsYTtcblx0fSBlbHNlIGRhdGEubCA9IGVuZDtcblx0cmV0dXJuIG87XG59XG5cbi8qIFtNUy1YTFNCXSAyLjQuNzUwIEJydFNockZtbGEgKi9cbmZ1bmN0aW9uIHBhcnNlX0JydFNockZtbGEoZGF0YSwgbGVuZ3RoLCBvcHRzKSB7XG5cdHZhciBlbmQgPSBkYXRhLmwgKyBsZW5ndGg7XG5cdHZhciByZnggPSBwYXJzZV9VbmNoZWNrZWRSZlgoZGF0YSwgMTYpO1xuXHR2YXIgbyA9IFtyZnhdO1xuXHRpZihvcHRzLmNlbGxGb3JtdWxhKSB7XG5cdFx0dmFyIGZvcm11bGEgPSBwYXJzZV9YTFNCU2hhcmVkUGFyc2VkRm9ybXVsYShkYXRhLCBlbmQgLSBkYXRhLmwsIG9wdHMpO1xuXHRcdG9bMV0gPSBmb3JtdWxhO1xuXHRcdGRhdGEubCA9IGVuZDtcblx0fSBlbHNlIGRhdGEubCA9IGVuZDtcblx0cmV0dXJuIG87XG59XG5cbi8qIFtNUy1YTFNCXSAyLjQuMzIzIEJydENvbEluZm8gKi9cbi8qIFRPRE86IG9uY2UgWExTIENvbEluZm8gaXMgc2V0LCBjb21iaW5lIHRoZSBmdW5jdGlvbnMgKi9cbmZ1bmN0aW9uIHdyaXRlX0JydENvbEluZm8oQy8qOm51bWJlciovLCBjb2wsIG8pIHtcblx0aWYobyA9PSBudWxsKSBvID0gbmV3X2J1ZigxOCk7XG5cdHZhciBwID0gY29sX29ial93KEMsIGNvbCk7XG5cdG8ud3JpdGVfc2hpZnQoLTQsIEMpO1xuXHRvLndyaXRlX3NoaWZ0KC00LCBDKTtcblx0by53cml0ZV9zaGlmdCg0LCAocC53aWR0aCB8fCAxMCkgKiAyNTYpO1xuXHRvLndyaXRlX3NoaWZ0KDQsIDAvKml4ZmUqLyk7IC8vIHN0eWxlXG5cdHZhciBmbGFncyA9IDA7XG5cdGlmKGNvbC5oaWRkZW4pIGZsYWdzIHw9IDB4MDE7XG5cdGlmKHR5cGVvZiBwLndpZHRoID09ICdudW1iZXInKSBmbGFncyB8PSAweDAyO1xuXHRpZihjb2wubGV2ZWwpIGZsYWdzIHw9IChjb2wubGV2ZWwgPDwgOCk7XG5cdG8ud3JpdGVfc2hpZnQoMiwgZmxhZ3MpOyAvLyBiaXQgZmxhZ1xuXHRyZXR1cm4gbztcbn1cblxuLyogW01TLVhMU0JdIDIuNC42NzggQnJ0TWFyZ2lucyAqL1xudmFyIEJydE1hcmdpbktleXMgPSBbXCJsZWZ0XCIsXCJyaWdodFwiLFwidG9wXCIsXCJib3R0b21cIixcImhlYWRlclwiLFwiZm9vdGVyXCJdO1xuZnVuY3Rpb24gcGFyc2VfQnJ0TWFyZ2lucyhkYXRhLyo6OiwgbGVuZ3RoLCBvcHRzKi8pLyo6TWFyZ2lucyovIHtcblx0dmFyIG1hcmdpbnMgPSAoe30vKjphbnkqLyk7XG5cdEJydE1hcmdpbktleXMuZm9yRWFjaChmdW5jdGlvbihrKSB7IG1hcmdpbnNba10gPSBwYXJzZV9YbnVtKGRhdGEsIDgpOyB9KTtcblx0cmV0dXJuIG1hcmdpbnM7XG59XG5mdW5jdGlvbiB3cml0ZV9CcnRNYXJnaW5zKG1hcmdpbnMvKjpNYXJnaW5zKi8sIG8pIHtcblx0aWYobyA9PSBudWxsKSBvID0gbmV3X2J1Zig2KjgpO1xuXHRkZWZhdWx0X21hcmdpbnMobWFyZ2lucyk7XG5cdEJydE1hcmdpbktleXMuZm9yRWFjaChmdW5jdGlvbihrKSB7IHdyaXRlX1hudW0oKG1hcmdpbnMvKjphbnkqLylba10sIG8pOyB9KTtcblx0cmV0dXJuIG87XG59XG5cbi8qIFtNUy1YTFNCXSAyLjQuMjk5IEJydEJlZ2luV3NWaWV3ICovXG5mdW5jdGlvbiBwYXJzZV9CcnRCZWdpbldzVmlldyhkYXRhLyo6OiwgbGVuZ3RoLCBvcHRzKi8pIHtcblx0dmFyIGYgPSBkYXRhLnJlYWRfc2hpZnQoMik7XG5cdGRhdGEubCArPSAyODtcblx0cmV0dXJuIHsgUlRMOiBmICYgMHgyMCB9O1xufVxuZnVuY3Rpb24gd3JpdGVfQnJ0QmVnaW5Xc1ZpZXcod3MsIFdvcmtib29rLCBvKSB7XG5cdGlmKG8gPT0gbnVsbCkgbyA9IG5ld19idWYoMzApO1xuXHR2YXIgZiA9IDB4MzljO1xuXHRpZigoKChXb3JrYm9va3x8e30pLlZpZXdzfHxbXSlbMF18fHt9KS5SVEwpIGYgfD0gMHgyMDtcblx0by53cml0ZV9zaGlmdCgyLCBmKTsgLy8gYml0IGZsYWdcblx0by53cml0ZV9zaGlmdCg0LCAwKTtcblx0by53cml0ZV9zaGlmdCg0LCAwKTsgLy8gdmlldyBmaXJzdCByb3dcblx0by53cml0ZV9zaGlmdCg0LCAwKTsgLy8gdmlldyBmaXJzdCBjb2xcblx0by53cml0ZV9zaGlmdCgxLCAwKTsgLy8gZ3JpZGxpbmUgY29sb3IgSUNWXG5cdG8ud3JpdGVfc2hpZnQoMSwgMCk7XG5cdG8ud3JpdGVfc2hpZnQoMiwgMCk7XG5cdG8ud3JpdGVfc2hpZnQoMiwgMTAwKTsgLy8gem9vbSBzY2FsZVxuXHRvLndyaXRlX3NoaWZ0KDIsIDApO1xuXHRvLndyaXRlX3NoaWZ0KDIsIDApO1xuXHRvLndyaXRlX3NoaWZ0KDIsIDApO1xuXHRvLndyaXRlX3NoaWZ0KDQsIDApOyAvLyB3b3JrYm9vayB2aWV3IGlkXG5cdHJldHVybiBvO1xufVxuXG4vKiBbTVMtWExTQl0gMi40LjMwOSBCcnRDZWxsSWdub3JlRUMgKi9cbmZ1bmN0aW9uIHdyaXRlX0JydENlbGxJZ25vcmVFQyhyZWYpIHtcblx0dmFyIG8gPSBuZXdfYnVmKDI0KTtcblx0by53cml0ZV9zaGlmdCg0LCA0KTtcblx0by53cml0ZV9zaGlmdCg0LCAxKTtcblx0d3JpdGVfVW5jaGVja2VkUmZYKHJlZiwgbyk7XG5cdHJldHVybiBvO1xufVxuXG4vKiBbTVMtWExTQl0gMi40Ljc0OCBCcnRTaGVldFByb3RlY3Rpb24gKi9cbmZ1bmN0aW9uIHdyaXRlX0JydFNoZWV0UHJvdGVjdGlvbihzcCwgbykge1xuXHRpZihvID09IG51bGwpIG8gPSBuZXdfYnVmKDE2KjQrMik7XG5cdG8ud3JpdGVfc2hpZnQoMiwgc3AucGFzc3dvcmQgPyBjcnlwdG9fQ3JlYXRlUGFzc3dvcmRWZXJpZmllcl9NZXRob2QxKHNwLnBhc3N3b3JkKSA6IDApO1xuXHRvLndyaXRlX3NoaWZ0KDQsIDEpOyAvLyB0aGlzIHJlY29yZCBzaG91bGQgbm90IGJlIHdyaXR0ZW4gaWYgbm8gcHJvdGVjdGlvblxuXHRbXG5cdFx0W1wib2JqZWN0c1wiLCAgICAgICAgICAgICBmYWxzZV0sIC8vIGZPYmplY3RzXG5cdFx0W1wic2NlbmFyaW9zXCIsICAgICAgICAgICBmYWxzZV0sIC8vIGZTY2VuYXJpb3Ncblx0XHRbXCJmb3JtYXRDZWxsc1wiLCAgICAgICAgICB0cnVlXSwgLy8gZkZvcm1hdENlbGxzXG5cdFx0W1wiZm9ybWF0Q29sdW1uc1wiLCAgICAgICAgdHJ1ZV0sIC8vIGZGb3JtYXRDb2x1bW5zXG5cdFx0W1wiZm9ybWF0Um93c1wiLCAgICAgICAgICAgdHJ1ZV0sIC8vIGZGb3JtYXRSb3dzXG5cdFx0W1wiaW5zZXJ0Q29sdW1uc1wiLCAgICAgICAgdHJ1ZV0sIC8vIGZJbnNlcnRDb2x1bW5zXG5cdFx0W1wiaW5zZXJ0Um93c1wiLCAgICAgICAgICAgdHJ1ZV0sIC8vIGZJbnNlcnRSb3dzXG5cdFx0W1wiaW5zZXJ0SHlwZXJsaW5rc1wiLCAgICAgdHJ1ZV0sIC8vIGZJbnNlcnRIeXBlcmxpbmtzXG5cdFx0W1wiZGVsZXRlQ29sdW1uc1wiLCAgICAgICAgdHJ1ZV0sIC8vIGZEZWxldGVDb2x1bW5zXG5cdFx0W1wiZGVsZXRlUm93c1wiLCAgICAgICAgICAgdHJ1ZV0sIC8vIGZEZWxldGVSb3dzXG5cdFx0W1wic2VsZWN0TG9ja2VkQ2VsbHNcIiwgICBmYWxzZV0sIC8vIGZTZWxMb2NrZWRDZWxsc1xuXHRcdFtcInNvcnRcIiwgICAgICAgICAgICAgICAgIHRydWVdLCAvLyBmU29ydFxuXHRcdFtcImF1dG9GaWx0ZXJcIiwgICAgICAgICAgIHRydWVdLCAvLyBmQXV0b0ZpbHRlclxuXHRcdFtcInBpdm90VGFibGVzXCIsICAgICAgICAgIHRydWVdLCAvLyBmUGl2b3RUYWJsZXNcblx0XHRbXCJzZWxlY3RVbmxvY2tlZENlbGxzXCIsIGZhbHNlXSAgLy8gZlNlbFVubG9ja2VkQ2VsbHNcblx0XS5mb3JFYWNoKGZ1bmN0aW9uKG4pIHtcblx0XHQvKjo6IGlmKG8gPT0gbnVsbCkgdGhyb3cgXCJ1bnJlYWNoYWJsZVwiOyAqL1xuXHRcdGlmKG5bMV0pIG8ud3JpdGVfc2hpZnQoNCwgc3BbblswXV0gIT0gbnVsbCAmJiAhc3BbblswXV0gPyAxIDogMCk7XG5cdFx0ZWxzZSAgICAgIG8ud3JpdGVfc2hpZnQoNCwgc3BbblswXV0gIT0gbnVsbCAmJiBzcFtuWzBdXSA/IDAgOiAxKTtcblx0fSk7XG5cdHJldHVybiBvO1xufVxuXG5mdW5jdGlvbiBwYXJzZV9CcnREVmFsKC8qZGF0YSwgbGVuZ3RoLCBvcHRzKi8pIHtcbn1cbmZ1bmN0aW9uIHBhcnNlX0JydERWYWwxNCgvKmRhdGEsIGxlbmd0aCwgb3B0cyovKSB7XG59XG4vKiBbTVMtWExTQl0gMi4xLjcuNjEgV29ya3NoZWV0ICovXG5mdW5jdGlvbiBwYXJzZV93c19iaW4oZGF0YSwgX29wdHMsIGlkeCwgcmVscywgd2IvKjpXQldCUHJvcHMqLywgdGhlbWVzLCBzdHlsZXMpLyo6V29ya3NoZWV0Ki8ge1xuXHRpZighZGF0YSkgcmV0dXJuIGRhdGE7XG5cdHZhciBvcHRzID0gX29wdHMgfHwge307XG5cdGlmKCFyZWxzKSByZWxzID0geychaWQnOnt9fTtcblx0aWYoREVOU0UgIT0gbnVsbCAmJiBvcHRzLmRlbnNlID09IG51bGwpIG9wdHMuZGVuc2UgPSBERU5TRTtcblx0dmFyIHMvKjpXb3Jrc2hlZXQqLyA9IChvcHRzLmRlbnNlID8gW10gOiB7fSk7XG5cblx0dmFyIHJlZjtcblx0dmFyIHJlZmd1ZXNzID0ge3M6IHtyOjIwMDAwMDAsIGM6MjAwMDAwMH0sIGU6IHtyOjAsIGM6MH0gfTtcblxuXHR2YXIgc3RhdGUvKjpBcnJheTxzdHJpbmc+Ki8gPSBbXTtcblx0dmFyIHBhc3MgPSBmYWxzZSwgZW5kID0gZmFsc2U7XG5cdHZhciByb3csIHAsIGNmLCBSLCBDLCBhZGRyLCBzc3RyLCByciwgY2VsbC8qOkNlbGwqLztcblx0dmFyIG1lcmdlcy8qOkFycmF5PFJhbmdlPiovID0gW107XG5cdG9wdHMuYmlmZiA9IDEyO1xuXHRvcHRzWychcm93J10gPSAwO1xuXG5cdHZhciBhaSA9IDAsIGFmID0gZmFsc2U7XG5cblx0dmFyIGFycmF5Zi8qOkFycmF5PFtSYW5nZSwgc3RyaW5nXT4qLyA9IFtdO1xuXHR2YXIgc2hhcmVkZiA9IHt9O1xuXHR2YXIgc3VwYm9va3MgPSBvcHRzLnN1cGJvb2tzIHx8IC8qOjooKi93Yi8qOjogOmFueSkqLy5zdXBib29rcyB8fCAoW1tdXS8qOmFueSovKTtcblx0c3VwYm9va3Muc2hhcmVkZiA9IHNoYXJlZGY7XG5cdHN1cGJvb2tzLmFycmF5ZiA9IGFycmF5Zjtcblx0c3VwYm9va3MuU2hlZXROYW1lcyA9IHdiLlNoZWV0TmFtZXMgfHwgd2IuU2hlZXRzLm1hcChmdW5jdGlvbih4KSB7IHJldHVybiB4Lm5hbWU7IH0pO1xuXHRpZighb3B0cy5zdXBib29rcykge1xuXHRcdG9wdHMuc3VwYm9va3MgPSBzdXBib29rcztcblx0XHRpZih3Yi5OYW1lcykgZm9yKHZhciBpID0gMDsgaSA8IHdiLk5hbWVzLmxlbmd0aDsgKytpKSBzdXBib29rc1swXVtpKzFdID0gd2IuTmFtZXNbaV07XG5cdH1cblxuXHR2YXIgY29saW5mby8qOkFycmF5PENvbEluZm8+Ki8gPSBbXSwgcm93aW5mby8qOkFycmF5PFJvd0luZm8+Ki8gPSBbXTtcblx0dmFyIHNlZW5jb2wgPSBmYWxzZTtcblxuXHRYTFNCUmVjb3JkRW51bVsweDAwMTBdID0geyBuOlwiQnJ0U2hvcnRSZWFsXCIsIGY6cGFyc2VfQnJ0U2hvcnRSZWFsIH07XG5cblx0dmFyIGNtLCB2bTtcblxuXHRyZWNvcmRob3BwZXIoZGF0YSwgZnVuY3Rpb24gd3NfcGFyc2UodmFsLCBSUiwgUlQpIHtcblx0XHRpZihlbmQpIHJldHVybjtcblx0XHRzd2l0Y2goUlQpIHtcblx0XHRcdGNhc2UgMHgwMDk0OiAvKiAnQnJ0V3NEaW0nICovXG5cdFx0XHRcdHJlZiA9IHZhbDsgYnJlYWs7XG5cdFx0XHRjYXNlIDB4MDAwMDogLyogJ0JydFJvd0hkcicgKi9cblx0XHRcdFx0cm93ID0gdmFsO1xuXHRcdFx0XHRpZihvcHRzLnNoZWV0Um93cyAmJiBvcHRzLnNoZWV0Um93cyA8PSByb3cucikgZW5kPXRydWU7XG5cdFx0XHRcdHJyID0gZW5jb2RlX3JvdyhSID0gcm93LnIpO1xuXHRcdFx0XHRvcHRzWychcm93J10gPSByb3cucjtcblx0XHRcdFx0aWYodmFsLmhpZGRlbiB8fCB2YWwuaHB0IHx8IHZhbC5sZXZlbCAhPSBudWxsKSB7XG5cdFx0XHRcdFx0aWYodmFsLmhwdCkgdmFsLmhweCA9IHB0MnB4KHZhbC5ocHQpO1xuXHRcdFx0XHRcdHJvd2luZm9bdmFsLnJdID0gdmFsO1xuXHRcdFx0XHR9XG5cdFx0XHRcdGJyZWFrO1xuXG5cdFx0XHRjYXNlIDB4MDAwMjogLyogJ0JydENlbGxSaycgKi9cblx0XHRcdGNhc2UgMHgwMDAzOiAvKiAnQnJ0Q2VsbEVycm9yJyAqL1xuXHRcdFx0Y2FzZSAweDAwMDQ6IC8qICdCcnRDZWxsQm9vbCcgKi9cblx0XHRcdGNhc2UgMHgwMDA1OiAvKiAnQnJ0Q2VsbFJlYWwnICovXG5cdFx0XHRjYXNlIDB4MDAwNjogLyogJ0JydENlbGxTdCcgKi9cblx0XHRcdGNhc2UgMHgwMDA3OiAvKiAnQnJ0Q2VsbElzc3QnICovXG5cdFx0XHRjYXNlIDB4MDAwODogLyogJ0JydEZtbGFTdHJpbmcnICovXG5cdFx0XHRjYXNlIDB4MDAwOTogLyogJ0JydEZtbGFOdW0nICovXG5cdFx0XHRjYXNlIDB4MDAwQTogLyogJ0JydEZtbGFCb29sJyAqL1xuXHRcdFx0Y2FzZSAweDAwMEI6IC8qICdCcnRGbWxhRXJyb3InICovXG5cdFx0XHRjYXNlIDB4MDAwRDogLyogJ0JydFNob3J0UmsnICovXG5cdFx0XHRjYXNlIDB4MDAwRTogLyogJ0JydFNob3J0RXJyb3InICovXG5cdFx0XHRjYXNlIDB4MDAwRjogLyogJ0JydFNob3J0Qm9vbCcgKi9cblx0XHRcdGNhc2UgMHgwMDEwOiAvKiAnQnJ0U2hvcnRSZWFsJyAqL1xuXHRcdFx0Y2FzZSAweDAwMTE6IC8qICdCcnRTaG9ydFN0JyAqL1xuXHRcdFx0Y2FzZSAweDAwMTI6IC8qICdCcnRTaG9ydElzc3QnICovXG5cdFx0XHRjYXNlIDB4MDAzRTogLyogJ0JydENlbGxSU3RyaW5nJyAqL1xuXHRcdFx0XHRwID0gKHt0OnZhbFsyXX0vKjphbnkqLyk7XG5cdFx0XHRcdHN3aXRjaCh2YWxbMl0pIHtcblx0XHRcdFx0XHRjYXNlICduJzogcC52ID0gdmFsWzFdOyBicmVhaztcblx0XHRcdFx0XHRjYXNlICdzJzogc3N0ciA9IHN0cnNbdmFsWzFdXTsgcC52ID0gc3N0ci50OyBwLnIgPSBzc3RyLnI7IGJyZWFrO1xuXHRcdFx0XHRcdGNhc2UgJ2InOiBwLnYgPSB2YWxbMV0gPyB0cnVlIDogZmFsc2U7IGJyZWFrO1xuXHRcdFx0XHRcdGNhc2UgJ2UnOiBwLnYgPSB2YWxbMV07IGlmKG9wdHMuY2VsbFRleHQgIT09IGZhbHNlKSBwLncgPSBCRXJyW3Audl07IGJyZWFrO1xuXHRcdFx0XHRcdGNhc2UgJ3N0cic6IHAudCA9ICdzJzsgcC52ID0gdmFsWzFdOyBicmVhaztcblx0XHRcdFx0XHRjYXNlICdpcyc6IHAudCA9ICdzJzsgcC52ID0gdmFsWzFdLnQ7IGJyZWFrO1xuXHRcdFx0XHR9XG5cdFx0XHRcdGlmKChjZiA9IHN0eWxlcy5DZWxsWGZbdmFsWzBdLmlTdHlsZVJlZl0pKSBzYWZlX2Zvcm1hdChwLGNmLm51bUZtdElkLG51bGwsb3B0cywgdGhlbWVzLCBzdHlsZXMpO1xuXHRcdFx0XHRDID0gdmFsWzBdLmMgPT0gLTEgPyBDICsgMSA6IHZhbFswXS5jO1xuXHRcdFx0XHRpZihvcHRzLmRlbnNlKSB7IGlmKCFzW1JdKSBzW1JdID0gW107IHNbUl1bQ10gPSBwOyB9XG5cdFx0XHRcdGVsc2Ugc1tlbmNvZGVfY29sKEMpICsgcnJdID0gcDtcblx0XHRcdFx0aWYob3B0cy5jZWxsRm9ybXVsYSkge1xuXHRcdFx0XHRcdGFmID0gZmFsc2U7XG5cdFx0XHRcdFx0Zm9yKGFpID0gMDsgYWkgPCBhcnJheWYubGVuZ3RoOyArK2FpKSB7XG5cdFx0XHRcdFx0XHR2YXIgYWlpID0gYXJyYXlmW2FpXTtcblx0XHRcdFx0XHRcdGlmKHJvdy5yID49IGFpaVswXS5zLnIgJiYgcm93LnIgPD0gYWlpWzBdLmUucilcblx0XHRcdFx0XHRcdFx0aWYoQyA+PSBhaWlbMF0ucy5jICYmIEMgPD0gYWlpWzBdLmUuYykge1xuXHRcdFx0XHRcdFx0XHRcdHAuRiA9IGVuY29kZV9yYW5nZShhaWlbMF0pOyBhZiA9IHRydWU7XG5cdFx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0aWYoIWFmICYmIHZhbC5sZW5ndGggPiAzKSBwLmYgPSB2YWxbM107XG5cdFx0XHRcdH1cblxuXHRcdFx0XHRpZihyZWZndWVzcy5zLnIgPiByb3cucikgcmVmZ3Vlc3Mucy5yID0gcm93LnI7XG5cdFx0XHRcdGlmKHJlZmd1ZXNzLnMuYyA+IEMpIHJlZmd1ZXNzLnMuYyA9IEM7XG5cdFx0XHRcdGlmKHJlZmd1ZXNzLmUuciA8IHJvdy5yKSByZWZndWVzcy5lLnIgPSByb3cucjtcblx0XHRcdFx0aWYocmVmZ3Vlc3MuZS5jIDwgQykgcmVmZ3Vlc3MuZS5jID0gQztcblx0XHRcdFx0aWYob3B0cy5jZWxsRGF0ZXMgJiYgY2YgJiYgcC50ID09ICduJyAmJiBmbXRfaXNfZGF0ZSh0YWJsZV9mbXRbY2YubnVtRm10SWRdKSkge1xuXHRcdFx0XHRcdHZhciBfZCA9IFNTRl9wYXJzZV9kYXRlX2NvZGUocC52KTsgaWYoX2QpIHsgcC50ID0gJ2QnOyBwLnYgPSBuZXcgRGF0ZShfZC55LCBfZC5tLTEsX2QuZCxfZC5ILF9kLk0sX2QuUyxfZC51KTsgfVxuXHRcdFx0XHR9XG5cdFx0XHRcdGlmKGNtKSB7XG5cdFx0XHRcdFx0aWYoY20udHlwZSA9PSAnWExEQVBSJykgcC5EID0gdHJ1ZTtcblx0XHRcdFx0XHRjbSA9IHZvaWQgMDtcblx0XHRcdFx0fVxuXHRcdFx0XHRpZih2bSkgdm0gPSB2b2lkIDA7XG5cdFx0XHRcdGJyZWFrO1xuXG5cdFx0XHRjYXNlIDB4MDAwMTogLyogJ0JydENlbGxCbGFuaycgKi9cblx0XHRcdGNhc2UgMHgwMDBDOiAvKiAnQnJ0U2hvcnRCbGFuaycgKi9cblx0XHRcdFx0aWYoIW9wdHMuc2hlZXRTdHVicyB8fCBwYXNzKSBicmVhaztcblx0XHRcdFx0cCA9ICh7dDoneicsdjp2b2lkIDB9Lyo6YW55Ki8pO1xuXHRcdFx0XHRDID0gdmFsWzBdLmMgPT0gLTEgPyBDICsgMSA6IHZhbFswXS5jO1xuXHRcdFx0XHRpZihvcHRzLmRlbnNlKSB7IGlmKCFzW1JdKSBzW1JdID0gW107IHNbUl1bQ10gPSBwOyB9XG5cdFx0XHRcdGVsc2Ugc1tlbmNvZGVfY29sKEMpICsgcnJdID0gcDtcblx0XHRcdFx0aWYocmVmZ3Vlc3Mucy5yID4gcm93LnIpIHJlZmd1ZXNzLnMuciA9IHJvdy5yO1xuXHRcdFx0XHRpZihyZWZndWVzcy5zLmMgPiBDKSByZWZndWVzcy5zLmMgPSBDO1xuXHRcdFx0XHRpZihyZWZndWVzcy5lLnIgPCByb3cucikgcmVmZ3Vlc3MuZS5yID0gcm93LnI7XG5cdFx0XHRcdGlmKHJlZmd1ZXNzLmUuYyA8IEMpIHJlZmd1ZXNzLmUuYyA9IEM7XG5cdFx0XHRcdGlmKGNtKSB7XG5cdFx0XHRcdFx0aWYoY20udHlwZSA9PSAnWExEQVBSJykgcC5EID0gdHJ1ZTtcblx0XHRcdFx0XHRjbSA9IHZvaWQgMDtcblx0XHRcdFx0fVxuXHRcdFx0XHRpZih2bSkgdm0gPSB2b2lkIDA7XG5cdFx0XHRcdGJyZWFrO1xuXG5cdFx0XHRjYXNlIDB4MDBCMDogLyogJ0JydE1lcmdlQ2VsbCcgKi9cblx0XHRcdFx0bWVyZ2VzLnB1c2godmFsKTsgYnJlYWs7XG5cblx0XHRcdGNhc2UgMHgwMDMxOiB7IC8qICdCcnRDZWxsTWV0YScgKi9cblx0XHRcdFx0Y20gPSAoKG9wdHMueGxtZXRhfHx7fSkuQ2VsbHx8W10pW3ZhbC0xXTtcblx0XHRcdH0gYnJlYWs7XG5cblx0XHRcdGNhc2UgMHgwMUVFOiAvKiAnQnJ0SExpbmsnICovXG5cdFx0XHRcdHZhciByZWwgPSByZWxzWychaWQnXVt2YWwucmVsSWRdO1xuXHRcdFx0XHRpZihyZWwpIHtcblx0XHRcdFx0XHR2YWwuVGFyZ2V0ID0gcmVsLlRhcmdldDtcblx0XHRcdFx0XHRpZih2YWwubG9jKSB2YWwuVGFyZ2V0ICs9IFwiI1wiK3ZhbC5sb2M7XG5cdFx0XHRcdFx0dmFsLlJlbCA9IHJlbDtcblx0XHRcdFx0fSBlbHNlIGlmKHZhbC5yZWxJZCA9PSAnJykge1xuXHRcdFx0XHRcdHZhbC5UYXJnZXQgPSBcIiNcIiArIHZhbC5sb2M7XG5cdFx0XHRcdH1cblx0XHRcdFx0Zm9yKFI9dmFsLnJmeC5zLnI7Ujw9dmFsLnJmeC5lLnI7KytSKSBmb3IoQz12YWwucmZ4LnMuYztDPD12YWwucmZ4LmUuYzsrK0MpIHtcblx0XHRcdFx0XHRpZihvcHRzLmRlbnNlKSB7XG5cdFx0XHRcdFx0XHRpZighc1tSXSkgc1tSXSA9IFtdO1xuXHRcdFx0XHRcdFx0aWYoIXNbUl1bQ10pIHNbUl1bQ10gPSB7dDoneicsdjp1bmRlZmluZWR9O1xuXHRcdFx0XHRcdFx0c1tSXVtDXS5sID0gdmFsO1xuXHRcdFx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdFx0XHRhZGRyID0gZW5jb2RlX2NlbGwoe2M6QyxyOlJ9KTtcblx0XHRcdFx0XHRcdGlmKCFzW2FkZHJdKSBzW2FkZHJdID0ge3Q6J3onLHY6dW5kZWZpbmVkfTtcblx0XHRcdFx0XHRcdHNbYWRkcl0ubCA9IHZhbDtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdH1cblx0XHRcdFx0YnJlYWs7XG5cblx0XHRcdGNhc2UgMHgwMUFBOiAvKiAnQnJ0QXJyRm1sYScgKi9cblx0XHRcdFx0aWYoIW9wdHMuY2VsbEZvcm11bGEpIGJyZWFrO1xuXHRcdFx0XHRhcnJheWYucHVzaCh2YWwpO1xuXHRcdFx0XHRjZWxsID0gKChvcHRzLmRlbnNlID8gc1tSXVtDXSA6IHNbZW5jb2RlX2NvbChDKSArIHJyXSkvKjphbnkqLyk7XG5cdFx0XHRcdGNlbGwuZiA9IHN0cmluZ2lmeV9mb3JtdWxhKHZhbFsxXSwgcmVmZ3Vlc3MsIHtyOnJvdy5yLCBjOkN9LCBzdXBib29rcywgb3B0cyk7XG5cdFx0XHRcdGNlbGwuRiA9IGVuY29kZV9yYW5nZSh2YWxbMF0pO1xuXHRcdFx0XHRicmVhaztcblx0XHRcdGNhc2UgMHgwMUFCOiAvKiAnQnJ0U2hyRm1sYScgKi9cblx0XHRcdFx0aWYoIW9wdHMuY2VsbEZvcm11bGEpIGJyZWFrO1xuXHRcdFx0XHRzaGFyZWRmW2VuY29kZV9jZWxsKHZhbFswXS5zKV0gPSB2YWxbMV07XG5cdFx0XHRcdGNlbGwgPSAob3B0cy5kZW5zZSA/IHNbUl1bQ10gOiBzW2VuY29kZV9jb2woQykgKyBycl0pO1xuXHRcdFx0XHRjZWxsLmYgPSBzdHJpbmdpZnlfZm9ybXVsYSh2YWxbMV0sIHJlZmd1ZXNzLCB7cjpyb3cuciwgYzpDfSwgc3VwYm9va3MsIG9wdHMpO1xuXHRcdFx0XHRicmVhaztcblxuXHRcdFx0LyogaWRlbnRpY2FsIHRvICdDb2xJbmZvJyBpbiBYTFMgKi9cblx0XHRcdGNhc2UgMHgwMDNDOiAvKiAnQnJ0Q29sSW5mbycgKi9cblx0XHRcdFx0aWYoIW9wdHMuY2VsbFN0eWxlcykgYnJlYWs7XG5cdFx0XHRcdHdoaWxlKHZhbC5lID49IHZhbC5zKSB7XG5cdFx0XHRcdFx0Y29saW5mb1t2YWwuZS0tXSA9IHsgd2lkdGg6IHZhbC53LzI1NiwgaGlkZGVuOiAhISh2YWwuZmxhZ3MgJiAweDAxKSwgbGV2ZWw6IHZhbC5sZXZlbCB9O1xuXHRcdFx0XHRcdGlmKCFzZWVuY29sKSB7IHNlZW5jb2wgPSB0cnVlOyBmaW5kX21kd19jb2x3KHZhbC53LzI1Nik7IH1cblx0XHRcdFx0XHRwcm9jZXNzX2NvbChjb2xpbmZvW3ZhbC5lKzFdKTtcblx0XHRcdFx0fVxuXHRcdFx0XHRicmVhaztcblxuXHRcdFx0Y2FzZSAweDAwQTE6IC8qICdCcnRCZWdpbkFGaWx0ZXInICovXG5cdFx0XHRcdHNbJyFhdXRvZmlsdGVyJ10gPSB7IHJlZjplbmNvZGVfcmFuZ2UodmFsKSB9O1xuXHRcdFx0XHRicmVhaztcblxuXHRcdFx0Y2FzZSAweDAxREM6IC8qICdCcnRNYXJnaW5zJyAqL1xuXHRcdFx0XHRzWychbWFyZ2lucyddID0gdmFsO1xuXHRcdFx0XHRicmVhaztcblxuXHRcdFx0Y2FzZSAweDAwOTM6IC8qICdCcnRXc1Byb3AnICovXG5cdFx0XHRcdGlmKCF3Yi5TaGVldHNbaWR4XSkgd2IuU2hlZXRzW2lkeF0gPSB7fTtcblx0XHRcdFx0aWYodmFsLm5hbWUpIHdiLlNoZWV0c1tpZHhdLkNvZGVOYW1lID0gdmFsLm5hbWU7XG5cdFx0XHRcdGlmKHZhbC5hYm92ZSB8fCB2YWwubGVmdCkgc1snIW91dGxpbmUnXSA9IHsgYWJvdmU6IHZhbC5hYm92ZSwgbGVmdDogdmFsLmxlZnQgfTtcblx0XHRcdFx0YnJlYWs7XG5cblx0XHRcdGNhc2UgMHgwMDg5OiAvKiAnQnJ0QmVnaW5Xc1ZpZXcnICovXG5cdFx0XHRcdGlmKCF3Yi5WaWV3cykgd2IuVmlld3MgPSBbe31dO1xuXHRcdFx0XHRpZighd2IuVmlld3NbMF0pIHdiLlZpZXdzWzBdID0ge307XG5cdFx0XHRcdGlmKHZhbC5SVEwpIHdiLlZpZXdzWzBdLlJUTCA9IHRydWU7XG5cdFx0XHRcdGJyZWFrO1xuXG5cdFx0XHRjYXNlIDB4MDFFNTogLyogJ0JydFdzRm10SW5mbycgKi9cblx0XHRcdFx0YnJlYWs7XG5cblx0XHRcdGNhc2UgMHgwMDQwOiAvKiAnQnJ0RFZhbCcgKi9cblx0XHRcdGNhc2UgMHgwNDFEOiAvKiAnQnJ0RFZhbDE0JyAqL1xuXHRcdFx0XHRicmVhaztcblxuXHRcdFx0Y2FzZSAweDAwOTc6IC8qICdCcnRQYW5lJyAqL1xuXHRcdFx0XHRicmVhaztcblx0XHRcdGNhc2UgMHgwMDk4OiAvKiAnQnJ0U2VsJyAqL1xuXHRcdFx0Y2FzZSAweDAwQUY6IC8qICdCcnRBRmlsdGVyRGF0ZUdyb3VwSXRlbScgKi9cblx0XHRcdGNhc2UgMHgwMjg0OiAvKiAnQnJ0QWN0aXZlWCcgKi9cblx0XHRcdGNhc2UgMHgwMjcxOiAvKiAnQnJ0QmlnTmFtZScgKi9cblx0XHRcdGNhc2UgMHgwMjMyOiAvKiAnQnJ0QmtIaW0nICovXG5cdFx0XHRjYXNlIDB4MDE4QzogLyogJ0JydEJyaycgKi9cblx0XHRcdGNhc2UgMHgwNDU4OiAvKiAnQnJ0Q0ZJY29uJyAqL1xuXHRcdFx0Y2FzZSAweDA0N0E6IC8qICdCcnRDRlJ1bGVFeHQnICovXG5cdFx0XHRjYXNlIDB4MDFENzogLyogJ0JydENGVk8nICovXG5cdFx0XHRjYXNlIDB4MDQxQTogLyogJ0JydENGVk8xNCcgKi9cblx0XHRcdGNhc2UgMHgwMjg5OiAvKiAnQnJ0Q2VsbElnbm9yZUVDJyAqL1xuXHRcdFx0Y2FzZSAweDA0NTE6IC8qICdCcnRDZWxsSWdub3JlRUMxNCcgKi9cblx0XHRcdGNhc2UgMHgwMjREOiAvKiAnQnJ0Q2VsbFNtYXJ0VGFnUHJvcGVydHknICovXG5cdFx0XHRjYXNlIDB4MDI1RjogLyogJ0JydENlbGxXYXRjaCcgKi9cblx0XHRcdGNhc2UgMHgwMjM0OiAvKiAnQnJ0Q29sb3InICovXG5cdFx0XHRjYXNlIDB4MDQxRjogLyogJ0JydENvbG9yMTQnICovXG5cdFx0XHRjYXNlIDB4MDBBODogLyogJ0JydENvbG9yRmlsdGVyJyAqL1xuXHRcdFx0Y2FzZSAweDAwQUU6IC8qICdCcnRDdXN0b21GaWx0ZXInICovXG5cdFx0XHRjYXNlIDB4MDQ5QzogLyogJ0JydEN1c3RvbUZpbHRlcjE0JyAqL1xuXHRcdFx0Y2FzZSAweDAxRjM6IC8qICdCcnREUmVmJyAqL1xuXHRcdFx0Y2FzZSAweDAxRkI6IC8qICdCcnREWEYnICovXG5cdFx0XHRjYXNlIDB4MDIyNjogLyogJ0JydERyYXdpbmcnICovXG5cdFx0XHRjYXNlIDB4MDBBQjogLyogJ0JydER5bmFtaWNGaWx0ZXInICovXG5cdFx0XHRjYXNlIDB4MDBBNzogLyogJ0JydEZpbHRlcicgKi9cblx0XHRcdGNhc2UgMHgwNDk5OiAvKiAnQnJ0RmlsdGVyMTQnICovXG5cdFx0XHRjYXNlIDB4MDBBOTogLyogJ0JydEljb25GaWx0ZXInICovXG5cdFx0XHRjYXNlIDB4MDQ5RDogLyogJ0JydEljb25GaWx0ZXIxNCcgKi9cblx0XHRcdGNhc2UgMHgwMjI3OiAvKiAnQnJ0TGVnYWN5RHJhd2luZycgKi9cblx0XHRcdGNhc2UgMHgwMjI4OiAvKiAnQnJ0TGVnYWN5RHJhd2luZ0hGJyAqL1xuXHRcdFx0Y2FzZSAweDAyOTU6IC8qICdCcnRMaXN0UGFydCcgKi9cblx0XHRcdGNhc2UgMHgwMjdGOiAvKiAnQnJ0T2xlT2JqZWN0JyAqL1xuXHRcdFx0Y2FzZSAweDAxREU6IC8qICdCcnRQYWdlU2V0dXAnICovXG5cdFx0XHRjYXNlIDB4MDIxOTogLyogJ0JydFBob25ldGljSW5mbycgKi9cblx0XHRcdGNhc2UgMHgwMUREOiAvKiAnQnJ0UHJpbnRPcHRpb25zJyAqL1xuXHRcdFx0Y2FzZSAweDAyMTg6IC8qICdCcnRSYW5nZVByb3RlY3Rpb24nICovXG5cdFx0XHRjYXNlIDB4MDQ0RjogLyogJ0JydFJhbmdlUHJvdGVjdGlvbjE0JyAqL1xuXHRcdFx0Y2FzZSAweDAyQTg6IC8qICdCcnRSYW5nZVByb3RlY3Rpb25Jc28nICovXG5cdFx0XHRjYXNlIDB4MDQ1MDogLyogJ0JydFJhbmdlUHJvdGVjdGlvbklzbzE0JyAqL1xuXHRcdFx0Y2FzZSAweDA0MDA6IC8qICdCcnRSd0Rlc2NlbnQnICovXG5cdFx0XHRjYXNlIDB4MDI5NzogLyogJ0JydFNoZWV0Q2FsY1Byb3AnICovXG5cdFx0XHRjYXNlIDB4MDIxNzogLyogJ0JydFNoZWV0UHJvdGVjdGlvbicgKi9cblx0XHRcdGNhc2UgMHgwMkE2OiAvKiAnQnJ0U2hlZXRQcm90ZWN0aW9uSXNvJyAqL1xuXHRcdFx0Y2FzZSAweDAxRjg6IC8qICdCcnRTbGMnICovXG5cdFx0XHRjYXNlIDB4MDQxMzogLyogJ0JydFNwYXJrbGluZScgKi9cblx0XHRcdGNhc2UgMHgwMUFDOiAvKiAnQnJ0VGFibGUnICovXG5cdFx0XHRjYXNlIDB4MDBBQTogLyogJ0JydFRvcDEwRmlsdGVyJyAqL1xuXHRcdFx0Y2FzZSAweDBDMDA6IC8qICdCcnRVaWQnICovXG5cdFx0XHRjYXNlIDB4MDAzMjogLyogJ0JydFZhbHVlTWV0YScgKi9cblx0XHRcdGNhc2UgMHgwODE2OiAvKiAnQnJ0V2ViRXh0ZW5zaW9uJyAqL1xuXHRcdFx0Y2FzZSAweDA0MTU6IC8qICdCcnRXc0ZtdEluZm9FeDE0JyAqL1xuXHRcdFx0XHRicmVhaztcblxuXHRcdFx0Y2FzZSAweDAwMjM6IC8qICdCcnRGUlRCZWdpbicgKi9cblx0XHRcdFx0cGFzcyA9IHRydWU7IGJyZWFrO1xuXHRcdFx0Y2FzZSAweDAwMjQ6IC8qICdCcnRGUlRFbmQnICovXG5cdFx0XHRcdHBhc3MgPSBmYWxzZTsgYnJlYWs7XG5cdFx0XHRjYXNlIDB4MDAyNTogLyogJ0JydEFDQmVnaW4nICovXG5cdFx0XHRcdHN0YXRlLnB1c2goUlQpOyBwYXNzID0gdHJ1ZTsgYnJlYWs7XG5cdFx0XHRjYXNlIDB4MDAyNjogLyogJ0JydEFDRW5kJyAqL1xuXHRcdFx0XHRzdGF0ZS5wb3AoKTsgcGFzcyA9IGZhbHNlOyBicmVhaztcblxuXHRcdFx0ZGVmYXVsdDpcblx0XHRcdFx0aWYoUlIuVCl7LyogZW1wdHkgKi99XG5cdFx0XHRcdGVsc2UgaWYoIXBhc3MgfHwgb3B0cy5XVEYpIHRocm93IG5ldyBFcnJvcihcIlVuZXhwZWN0ZWQgcmVjb3JkIDB4XCIgKyBSVC50b1N0cmluZygxNikpO1xuXHRcdH1cblx0fSwgb3B0cyk7XG5cblx0ZGVsZXRlIG9wdHMuc3VwYm9va3M7XG5cdGRlbGV0ZSBvcHRzWychcm93J107XG5cblx0aWYoIXNbXCIhcmVmXCJdICYmIChyZWZndWVzcy5zLnIgPCAyMDAwMDAwIHx8IHJlZiAmJiAocmVmLmUuciA+IDAgfHwgcmVmLmUuYyA+IDAgfHwgcmVmLnMuciA+IDAgfHwgcmVmLnMuYyA+IDApKSkgc1tcIiFyZWZcIl0gPSBlbmNvZGVfcmFuZ2UocmVmIHx8IHJlZmd1ZXNzKTtcblx0aWYob3B0cy5zaGVldFJvd3MgJiYgc1tcIiFyZWZcIl0pIHtcblx0XHR2YXIgdG1wcmVmID0gc2FmZV9kZWNvZGVfcmFuZ2Uoc1tcIiFyZWZcIl0pO1xuXHRcdGlmKG9wdHMuc2hlZXRSb3dzIDw9ICt0bXByZWYuZS5yKSB7XG5cdFx0XHR0bXByZWYuZS5yID0gb3B0cy5zaGVldFJvd3MgLSAxO1xuXHRcdFx0aWYodG1wcmVmLmUuciA+IHJlZmd1ZXNzLmUucikgdG1wcmVmLmUuciA9IHJlZmd1ZXNzLmUucjtcblx0XHRcdGlmKHRtcHJlZi5lLnIgPCB0bXByZWYucy5yKSB0bXByZWYucy5yID0gdG1wcmVmLmUucjtcblx0XHRcdGlmKHRtcHJlZi5lLmMgPiByZWZndWVzcy5lLmMpIHRtcHJlZi5lLmMgPSByZWZndWVzcy5lLmM7XG5cdFx0XHRpZih0bXByZWYuZS5jIDwgdG1wcmVmLnMuYykgdG1wcmVmLnMuYyA9IHRtcHJlZi5lLmM7XG5cdFx0XHRzW1wiIWZ1bGxyZWZcIl0gPSBzW1wiIXJlZlwiXTtcblx0XHRcdHNbXCIhcmVmXCJdID0gZW5jb2RlX3JhbmdlKHRtcHJlZik7XG5cdFx0fVxuXHR9XG5cdGlmKG1lcmdlcy5sZW5ndGggPiAwKSBzW1wiIW1lcmdlc1wiXSA9IG1lcmdlcztcblx0aWYoY29saW5mby5sZW5ndGggPiAwKSBzW1wiIWNvbHNcIl0gPSBjb2xpbmZvO1xuXHRpZihyb3dpbmZvLmxlbmd0aCA+IDApIHNbXCIhcm93c1wiXSA9IHJvd2luZm87XG5cdHJldHVybiBzO1xufVxuXG4vKiBUT0RPOiBzb21ldGhpbmcgdXNlZnVsIC0tIHRoaXMgaXMgYSBzdHViICovXG5mdW5jdGlvbiB3cml0ZV93c19iaW5fY2VsbChiYS8qOkJ1ZkFycmF5Ki8sIGNlbGwvKjpDZWxsKi8sIFIvKjpudW1iZXIqLywgQy8qOm51bWJlciovLCBvcHRzLCB3cy8qOldvcmtzaGVldCovLCBsYXN0X3NlZW4vKjpib29sZWFuKi8pLyo6Ym9vbGVhbiovIHtcblx0aWYoY2VsbC52ID09PSB1bmRlZmluZWQpIHJldHVybiBmYWxzZTtcblx0dmFyIHZ2ID0gXCJcIjtcblx0c3dpdGNoKGNlbGwudCkge1xuXHRcdGNhc2UgJ2InOiB2diA9IGNlbGwudiA/IFwiMVwiIDogXCIwXCI7IGJyZWFrO1xuXHRcdGNhc2UgJ2QnOiAvLyBubyBCcnRDZWxsRGF0ZSA6KFxuXHRcdFx0Y2VsbCA9IGR1cChjZWxsKTtcblx0XHRcdGNlbGwueiA9IGNlbGwueiB8fCB0YWJsZV9mbXRbMTRdO1xuXHRcdFx0Y2VsbC52ID0gZGF0ZW51bShwYXJzZURhdGUoY2VsbC52KSk7IGNlbGwudCA9ICduJztcblx0XHRcdGJyZWFrO1xuXHRcdC8qIGZhbGxzIHRocm91Z2ggKi9cblx0XHRjYXNlICduJzogY2FzZSAnZSc6IHZ2ID0gJycrY2VsbC52OyBicmVhaztcblx0XHRkZWZhdWx0OiB2diA9IGNlbGwudjsgYnJlYWs7XG5cdH1cblx0dmFyIG8vKjphbnkqLyA9ICh7cjpSLCBjOkN9Lyo6YW55Ki8pO1xuXHQvKiBUT0RPOiBjZWxsIHN0eWxlICovXG5cdG8ucyA9IGdldF9jZWxsX3N0eWxlKG9wdHMuY2VsbFhmcywgY2VsbCwgb3B0cyk7XG5cdGlmKGNlbGwubCkgd3NbJyFsaW5rcyddLnB1c2goW2VuY29kZV9jZWxsKG8pLCBjZWxsLmxdKTtcblx0aWYoY2VsbC5jKSB3c1snIWNvbW1lbnRzJ10ucHVzaChbZW5jb2RlX2NlbGwobyksIGNlbGwuY10pO1xuXHRzd2l0Y2goY2VsbC50KSB7XG5cdFx0Y2FzZSAncyc6IGNhc2UgJ3N0cic6XG5cdFx0XHRpZihvcHRzLmJvb2tTU1QpIHtcblx0XHRcdFx0dnYgPSBnZXRfc3N0X2lkKG9wdHMuU3RyaW5ncywgKGNlbGwudi8qOmFueSovKSwgb3B0cy5yZXZTdHJpbmdzKTtcblx0XHRcdFx0by50ID0gXCJzXCI7IG8udiA9IHZ2O1xuXHRcdFx0XHRpZihsYXN0X3NlZW4pIHdyaXRlX3JlY29yZChiYSwgMHgwMDEyIC8qIEJydFNob3J0SXNzdCAqLywgd3JpdGVfQnJ0U2hvcnRJc3N0KGNlbGwsIG8pKTtcblx0XHRcdFx0ZWxzZSB3cml0ZV9yZWNvcmQoYmEsIDB4MDAwNyAvKiBCcnRDZWxsSXNzdCAqLywgd3JpdGVfQnJ0Q2VsbElzc3QoY2VsbCwgbykpO1xuXHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0by50ID0gXCJzdHJcIjtcblx0XHRcdFx0aWYobGFzdF9zZWVuKSB3cml0ZV9yZWNvcmQoYmEsIDB4MDAxMSAvKiBCcnRTaG9ydFN0ICovLCB3cml0ZV9CcnRTaG9ydFN0KGNlbGwsIG8pKTtcblx0XHRcdFx0ZWxzZSB3cml0ZV9yZWNvcmQoYmEsIDB4MDAwNiAvKiBCcnRDZWxsU3QgKi8sIHdyaXRlX0JydENlbGxTdChjZWxsLCBvKSk7XG5cdFx0XHR9XG5cdFx0XHRyZXR1cm4gdHJ1ZTtcblx0XHRjYXNlICduJzpcblx0XHRcdC8qIFRPRE86IGRldGVybWluZSB0aHJlc2hvbGQgZm9yIFJlYWwgdnMgUksgKi9cblx0XHRcdGlmKGNlbGwudiA9PSAoY2VsbC52IHwgMCkgJiYgY2VsbC52ID4gLTEwMDAgJiYgY2VsbC52IDwgMTAwMCkge1xuXHRcdFx0XHRpZihsYXN0X3NlZW4pIHdyaXRlX3JlY29yZChiYSwgMHgwMDBEIC8qIEJydFNob3J0UmsgKi8sIHdyaXRlX0JydFNob3J0UmsoY2VsbCwgbykpO1xuXHRcdFx0XHRlbHNlIHdyaXRlX3JlY29yZChiYSwgMHgwMDAyIC8qIEJydENlbGxSayAqLywgd3JpdGVfQnJ0Q2VsbFJrKGNlbGwsIG8pKTtcblx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdGlmKGxhc3Rfc2Vlbikgd3JpdGVfcmVjb3JkKGJhLCAweDAwMTAgLyogQnJ0U2hvcnRSZWFsICovLCB3cml0ZV9CcnRTaG9ydFJlYWwoY2VsbCwgbykpO1xuXHRcdFx0XHRlbHNlIHdyaXRlX3JlY29yZChiYSwgMHgwMDA1IC8qIEJydENlbGxSZWFsICovLCB3cml0ZV9CcnRDZWxsUmVhbChjZWxsLCBvKSk7XG5cdFx0XHR9IHJldHVybiB0cnVlO1xuXHRcdGNhc2UgJ2InOlxuXHRcdFx0by50ID0gXCJiXCI7XG5cdFx0XHRpZihsYXN0X3NlZW4pIHdyaXRlX3JlY29yZChiYSwgMHgwMDBGIC8qIEJydFNob3J0Qm9vbCAqLywgd3JpdGVfQnJ0U2hvcnRCb29sKGNlbGwsIG8pKTtcblx0XHRcdGVsc2Ugd3JpdGVfcmVjb3JkKGJhLCAweDAwMDQgLyogQnJ0Q2VsbEJvb2wgKi8sIHdyaXRlX0JydENlbGxCb29sKGNlbGwsIG8pKTtcblx0XHRcdHJldHVybiB0cnVlO1xuXHRcdGNhc2UgJ2UnOlxuXHRcdFx0by50ID0gXCJlXCI7XG5cdFx0XHRpZihsYXN0X3NlZW4pIHdyaXRlX3JlY29yZChiYSwgMHgwMDBFIC8qIEJydFNob3J0RXJyb3IgKi8sIHdyaXRlX0JydFNob3J0RXJyb3IoY2VsbCwgbykpO1xuXHRcdFx0ZWxzZSB3cml0ZV9yZWNvcmQoYmEsIDB4MDAwMyAvKiBCcnRDZWxsRXJyb3IgKi8sIHdyaXRlX0JydENlbGxFcnJvcihjZWxsLCBvKSk7XG5cdFx0XHRyZXR1cm4gdHJ1ZTtcblx0fVxuXHRpZihsYXN0X3NlZW4pIHdyaXRlX3JlY29yZChiYSwgMHgwMDBDIC8qIEJydFNob3J0QmxhbmsgKi8sIHdyaXRlX0JydFNob3J0QmxhbmsoY2VsbCwgbykpO1xuXHRlbHNlIHdyaXRlX3JlY29yZChiYSwgMHgwMDAxIC8qIEJydENlbGxCbGFuayAqLywgd3JpdGVfQnJ0Q2VsbEJsYW5rKGNlbGwsIG8pKTtcblx0cmV0dXJuIHRydWU7XG59XG5cbmZ1bmN0aW9uIHdyaXRlX0NFTExUQUJMRShiYSwgd3MvKjpXb3Jrc2hlZXQqLywgaWR4Lyo6bnVtYmVyKi8sIG9wdHMvKjo6LCB3YjpXb3JrYm9vayovKSB7XG5cdHZhciByYW5nZSA9IHNhZmVfZGVjb2RlX3JhbmdlKHdzWychcmVmJ10gfHwgXCJBMVwiKSwgcmVmLCByciA9IFwiXCIsIGNvbHMvKjpBcnJheTxzdHJpbmc+Ki8gPSBbXTtcblx0d3JpdGVfcmVjb3JkKGJhLCAweDAwOTEgLyogQnJ0QmVnaW5TaGVldERhdGEgKi8pO1xuXHR2YXIgZGVuc2UgPSBBcnJheS5pc0FycmF5KHdzKTtcblx0dmFyIGNhcCA9IHJhbmdlLmUucjtcblx0aWYod3NbJyFyb3dzJ10pIGNhcCA9IE1hdGgubWF4KHJhbmdlLmUuciwgd3NbJyFyb3dzJ10ubGVuZ3RoIC0gMSk7XG5cdGZvcih2YXIgUiA9IHJhbmdlLnMucjsgUiA8PSBjYXA7ICsrUikge1xuXHRcdHJyID0gZW5jb2RlX3JvdyhSKTtcblx0XHQvKiBbQUNDRUxMVEFCTEVdICovXG5cdFx0LyogQnJ0Um93SGRyICovXG5cdFx0d3JpdGVfcm93X2hlYWRlcihiYSwgd3MsIHJhbmdlLCBSKTtcblx0XHR2YXIgbGFzdF9zZWVuID0gZmFsc2U7XG5cdFx0aWYoUiA8PSByYW5nZS5lLnIpIGZvcih2YXIgQyA9IHJhbmdlLnMuYzsgQyA8PSByYW5nZS5lLmM7ICsrQykge1xuXHRcdFx0LyogKjE2Mzg0Q0VMTCAqL1xuXHRcdFx0aWYoUiA9PT0gcmFuZ2Uucy5yKSBjb2xzW0NdID0gZW5jb2RlX2NvbChDKTtcblx0XHRcdHJlZiA9IGNvbHNbQ10gKyBycjtcblx0XHRcdHZhciBjZWxsID0gZGVuc2UgPyAod3NbUl18fFtdKVtDXSA6IHdzW3JlZl07XG5cdFx0XHRpZighY2VsbCkgeyBsYXN0X3NlZW4gPSBmYWxzZTsgY29udGludWU7IH1cblx0XHRcdC8qIHdyaXRlIGNlbGwgKi9cblx0XHRcdGxhc3Rfc2VlbiA9IHdyaXRlX3dzX2Jpbl9jZWxsKGJhLCBjZWxsLCBSLCBDLCBvcHRzLCB3cywgbGFzdF9zZWVuKTtcblx0XHR9XG5cdH1cblx0d3JpdGVfcmVjb3JkKGJhLCAweDAwOTIgLyogQnJ0RW5kU2hlZXREYXRhICovKTtcbn1cblxuZnVuY3Rpb24gd3JpdGVfTUVSR0VDRUxMUyhiYSwgd3MvKjpXb3Jrc2hlZXQqLykge1xuXHRpZighd3MgfHwgIXdzWychbWVyZ2VzJ10pIHJldHVybjtcblx0d3JpdGVfcmVjb3JkKGJhLCAweDAwQjEgLyogQnJ0QmVnaW5NZXJnZUNlbGxzICovLCB3cml0ZV9CcnRCZWdpbk1lcmdlQ2VsbHMod3NbJyFtZXJnZXMnXS5sZW5ndGgpKTtcblx0d3NbJyFtZXJnZXMnXS5mb3JFYWNoKGZ1bmN0aW9uKG0pIHsgd3JpdGVfcmVjb3JkKGJhLCAweDAwQjAgLyogQnJ0TWVyZ2VDZWxsICovLCB3cml0ZV9CcnRNZXJnZUNlbGwobSkpOyB9KTtcblx0d3JpdGVfcmVjb3JkKGJhLCAweDAwQjIgLyogQnJ0RW5kTWVyZ2VDZWxscyAqLyk7XG59XG5cbmZ1bmN0aW9uIHdyaXRlX0NPTElORk9TKGJhLCB3cy8qOldvcmtzaGVldCovLyo6OiwgaWR4Om51bWJlciwgb3B0cywgd2I6V29ya2Jvb2sqLykge1xuXHRpZighd3MgfHwgIXdzWychY29scyddKSByZXR1cm47XG5cdHdyaXRlX3JlY29yZChiYSwgMHgwMTg2IC8qIEJydEJlZ2luQ29sSW5mb3MgKi8pO1xuXHR3c1snIWNvbHMnXS5mb3JFYWNoKGZ1bmN0aW9uKG0sIGkpIHsgaWYobSkgd3JpdGVfcmVjb3JkKGJhLCAweDAwM0MgLyogJ0JydENvbEluZm8nICovLCB3cml0ZV9CcnRDb2xJbmZvKGksIG0pKTsgfSk7XG5cdHdyaXRlX3JlY29yZChiYSwgMHgwMTg3IC8qIEJydEVuZENvbEluZm9zICovKTtcbn1cblxuZnVuY3Rpb24gd3JpdGVfSUdOT1JFRUNTKGJhLCB3cy8qOldvcmtzaGVldCovKSB7XG5cdGlmKCF3cyB8fCAhd3NbJyFyZWYnXSkgcmV0dXJuO1xuXHR3cml0ZV9yZWNvcmQoYmEsIDB4MDI4OCAvKiBCcnRCZWdpbkNlbGxJZ25vcmVFQ3MgKi8pO1xuXHR3cml0ZV9yZWNvcmQoYmEsIDB4MDI4OSAvKiBCcnRDZWxsSWdub3JlRUMgKi8sIHdyaXRlX0JydENlbGxJZ25vcmVFQyhzYWZlX2RlY29kZV9yYW5nZSh3c1snIXJlZiddKSkpO1xuXHR3cml0ZV9yZWNvcmQoYmEsIDB4MDI4QSAvKiBCcnRFbmRDZWxsSWdub3JlRUNzICovKTtcbn1cblxuZnVuY3Rpb24gd3JpdGVfSExJTktTKGJhLCB3cy8qOldvcmtzaGVldCovLCByZWxzKSB7XG5cdC8qICpCcnRITGluayAqL1xuXHR3c1snIWxpbmtzJ10uZm9yRWFjaChmdW5jdGlvbihsKSB7XG5cdFx0aWYoIWxbMV0uVGFyZ2V0KSByZXR1cm47XG5cdFx0dmFyIHJJZCA9IGFkZF9yZWxzKHJlbHMsIC0xLCBsWzFdLlRhcmdldC5yZXBsYWNlKC8jLiokLywgXCJcIiksIFJFTFMuSExJTkspO1xuXHRcdHdyaXRlX3JlY29yZChiYSwgMHgwMUVFIC8qIEJydEhMaW5rICovLCB3cml0ZV9CcnRITGluayhsLCBySWQpKTtcblx0fSk7XG5cdGRlbGV0ZSB3c1snIWxpbmtzJ107XG59XG5mdW5jdGlvbiB3cml0ZV9MRUdBQ1lEUkFXSU5HKGJhLCB3cy8qOldvcmtzaGVldCovLCBpZHgvKjpudW1iZXIqLywgcmVscykge1xuXHQvKiBbQnJ0TGVnYWN5RHJhd2luZ10gKi9cblx0aWYod3NbJyFjb21tZW50cyddLmxlbmd0aCA+IDApIHtcblx0XHR2YXIgcklkID0gYWRkX3JlbHMocmVscywgLTEsIFwiLi4vZHJhd2luZ3Mvdm1sRHJhd2luZ1wiICsgKGlkeCsxKSArIFwiLnZtbFwiLCBSRUxTLlZNTCk7XG5cdFx0d3JpdGVfcmVjb3JkKGJhLCAweDAyMjcgLyogQnJ0TGVnYWN5RHJhd2luZyAqLywgd3JpdGVfUmVsSUQoXCJySWRcIiArIHJJZCkpO1xuXHRcdHdzWychbGVnYWN5J10gPSBySWQ7XG5cdH1cbn1cblxuZnVuY3Rpb24gd3JpdGVfQVVUT0ZJTFRFUihiYSwgd3MsIHdiLCBpZHgpIHtcblx0aWYoIXdzWychYXV0b2ZpbHRlciddKSByZXR1cm47XG5cdHZhciBkYXRhID0gd3NbJyFhdXRvZmlsdGVyJ107XG5cdHZhciByZWYgPSB0eXBlb2YgZGF0YS5yZWYgPT09IFwic3RyaW5nXCIgPyBkYXRhLnJlZiA6IGVuY29kZV9yYW5nZShkYXRhLnJlZik7XG5cblx0LyogVXBkYXRlIEZpbHRlckRhdGFiYXNlIGRlZmluZWQgbmFtZSBmb3IgdGhlIHdvcmtzaGVldCAqL1xuXHRpZighd2IuV29ya2Jvb2spIHdiLldvcmtib29rID0gKHtTaGVldHM6W119Lyo6YW55Ki8pO1xuXHRpZighd2IuV29ya2Jvb2suTmFtZXMpIHdiLldvcmtib29rLk5hbWVzID0gW107XG5cdHZhciBuYW1lcy8qOiBBcnJheTxhbnk+ICovID0gd2IuV29ya2Jvb2suTmFtZXM7XG5cdHZhciByYW5nZSA9IGRlY29kZV9yYW5nZShyZWYpO1xuXHRpZihyYW5nZS5zLnIgPT0gcmFuZ2UuZS5yKSB7IHJhbmdlLmUuciA9IGRlY29kZV9yYW5nZSh3c1tcIiFyZWZcIl0pLmUucjsgcmVmID0gZW5jb2RlX3JhbmdlKHJhbmdlKTsgfVxuXHRmb3IodmFyIGkgPSAwOyBpIDwgbmFtZXMubGVuZ3RoOyArK2kpIHtcblx0XHR2YXIgbmFtZSA9IG5hbWVzW2ldO1xuXHRcdGlmKG5hbWUuTmFtZSAhPSAnX3hsbm0uX0ZpbHRlckRhdGFiYXNlJykgY29udGludWU7XG5cdFx0aWYobmFtZS5TaGVldCAhPSBpZHgpIGNvbnRpbnVlO1xuXHRcdG5hbWUuUmVmID0gXCInXCIgKyB3Yi5TaGVldE5hbWVzW2lkeF0gKyBcIichXCIgKyByZWY7IGJyZWFrO1xuXHR9XG5cdGlmKGkgPT0gbmFtZXMubGVuZ3RoKSBuYW1lcy5wdXNoKHsgTmFtZTogJ194bG5tLl9GaWx0ZXJEYXRhYmFzZScsIFNoZWV0OiBpZHgsIFJlZjogXCInXCIgKyB3Yi5TaGVldE5hbWVzW2lkeF0gKyBcIichXCIgKyByZWYgIH0pO1xuXG5cdHdyaXRlX3JlY29yZChiYSwgMHgwMEExIC8qIEJydEJlZ2luQUZpbHRlciAqLywgd3JpdGVfVW5jaGVja2VkUmZYKHNhZmVfZGVjb2RlX3JhbmdlKHJlZikpKTtcblx0LyogKkZJTFRFUkNPTFVNTiAqL1xuXHQvKiBbU09SVFNUQVRFXSAqL1xuXHQvKiBCcnRFbmRBRmlsdGVyICovXG5cdHdyaXRlX3JlY29yZChiYSwgMHgwMEEyIC8qIEJydEVuZEFGaWx0ZXIgKi8pO1xufVxuXG5mdW5jdGlvbiB3cml0ZV9XU1ZJRVdTMihiYSwgd3MsIFdvcmtib29rKSB7XG5cdHdyaXRlX3JlY29yZChiYSwgMHgwMDg1IC8qIEJydEJlZ2luV3NWaWV3cyAqLyk7XG5cdHsgLyogMSpXU1ZJRVcyICovXG5cdFx0LyogW0FDVUlEXSAqL1xuXHRcdHdyaXRlX3JlY29yZChiYSwgMHgwMDg5IC8qIEJydEJlZ2luV3NWaWV3ICovLCB3cml0ZV9CcnRCZWdpbldzVmlldyh3cywgV29ya2Jvb2spKTtcblx0XHQvKiBbQnJ0UGFuZV0gKi9cblx0XHQvKiAqNEJydFNlbCAqL1xuXHRcdC8qICo0U1hTRUxFQ1QgKi9cblx0XHQvKiAqRlJUICovXG5cdFx0d3JpdGVfcmVjb3JkKGJhLCAweDAwOEEgLyogQnJ0RW5kV3NWaWV3ICovKTtcblx0fVxuXHQvKiAqRlJUICovXG5cdHdyaXRlX3JlY29yZChiYSwgMHgwMDg2IC8qIEJydEVuZFdzVmlld3MgKi8pO1xufVxuXG5mdW5jdGlvbiB3cml0ZV9XU0ZNVElORk8oLyo6OmJhLCB3cyovKSB7XG5cdC8qIFtBQ1dTRk1USU5GT10gKi9cblx0Ly8gd3JpdGVfcmVjb3JkKGJhLCAweDAxRTUgLyogQnJ0V3NGbXRJbmZvICovLCB3cml0ZV9CcnRXc0ZtdEluZm8od3MpKTtcbn1cblxuZnVuY3Rpb24gd3JpdGVfU0hFRVRQUk9URUNUKGJhLCB3cykge1xuXHRpZighd3NbJyFwcm90ZWN0J10pIHJldHVybjtcblx0LyogW0JydFNoZWV0UHJvdGVjdGlvbklzb10gKi9cblx0d3JpdGVfcmVjb3JkKGJhLCAweDAyMTcgLyogQnJ0U2hlZXRQcm90ZWN0aW9uICovLCB3cml0ZV9CcnRTaGVldFByb3RlY3Rpb24od3NbJyFwcm90ZWN0J10pKTtcbn1cblxuZnVuY3Rpb24gd3JpdGVfd3NfYmluKGlkeC8qOm51bWJlciovLCBvcHRzLCB3Yi8qOldvcmtib29rKi8sIHJlbHMpIHtcblx0dmFyIGJhID0gYnVmX2FycmF5KCk7XG5cdHZhciBzID0gd2IuU2hlZXROYW1lc1tpZHhdLCB3cyA9IHdiLlNoZWV0c1tzXSB8fCB7fTtcblx0dmFyIGMvKjpzdHJpbmcqLyA9IHM7IHRyeSB7IGlmKHdiICYmIHdiLldvcmtib29rKSBjID0gd2IuV29ya2Jvb2suU2hlZXRzW2lkeF0uQ29kZU5hbWUgfHwgYzsgfSBjYXRjaChlKSB7fVxuXHR2YXIgciA9IHNhZmVfZGVjb2RlX3JhbmdlKHdzWychcmVmJ10gfHwgXCJBMVwiKTtcblx0aWYoci5lLmMgPiAweDNGRkYgfHwgci5lLnIgPiAweEZGRkZGKSB7XG5cdFx0aWYob3B0cy5XVEYpIHRocm93IG5ldyBFcnJvcihcIlJhbmdlIFwiICsgKHdzWychcmVmJ10gfHwgXCJBMVwiKSArIFwiIGV4Y2VlZHMgZm9ybWF0IGxpbWl0IEExOlhGRDEwNDg1NzZcIik7XG5cdFx0ci5lLmMgPSBNYXRoLm1pbihyLmUuYywgMHgzRkZGKTtcblx0XHRyLmUuciA9IE1hdGgubWluKHIuZS5jLCAweEZGRkZGKTtcblx0fVxuXHR3c1snIWxpbmtzJ10gPSBbXTtcblx0LyogcGFzc2VkIGJhY2sgdG8gd3JpdGVfemlwIGFuZCByZW1vdmVkIHRoZXJlICovXG5cdHdzWychY29tbWVudHMnXSA9IFtdO1xuXHR3cml0ZV9yZWNvcmQoYmEsIDB4MDA4MSAvKiBCcnRCZWdpblNoZWV0ICovKTtcblx0aWYod2IudmJhcmF3IHx8IHdzWychb3V0bGluZSddKSB3cml0ZV9yZWNvcmQoYmEsIDB4MDA5MyAvKiBCcnRXc1Byb3AgKi8sIHdyaXRlX0JydFdzUHJvcChjLCB3c1snIW91dGxpbmUnXSkpO1xuXHR3cml0ZV9yZWNvcmQoYmEsIDB4MDA5NCAvKiBCcnRXc0RpbSAqLywgd3JpdGVfQnJ0V3NEaW0ocikpO1xuXHR3cml0ZV9XU1ZJRVdTMihiYSwgd3MsIHdiLldvcmtib29rKTtcblx0d3JpdGVfV1NGTVRJTkZPKGJhLCB3cyk7XG5cdHdyaXRlX0NPTElORk9TKGJhLCB3cywgaWR4LCBvcHRzLCB3Yik7XG5cdHdyaXRlX0NFTExUQUJMRShiYSwgd3MsIGlkeCwgb3B0cywgd2IpO1xuXHQvKiBbQnJ0U2hlZXRDYWxjUHJvcF0gKi9cblx0d3JpdGVfU0hFRVRQUk9URUNUKGJhLCB3cyk7XG5cdC8qICooW0JydFJhbmdlUHJvdGVjdGlvbklzb10gQnJ0UmFuZ2VQcm90ZWN0aW9uKSAqL1xuXHQvKiBbU0NFTk1BTl0gKi9cblx0d3JpdGVfQVVUT0ZJTFRFUihiYSwgd3MsIHdiLCBpZHgpO1xuXHQvKiBbU09SVFNUQVRFXSAqL1xuXHQvKiBbRENPTl0gKi9cblx0LyogW1VTRVJTSFZJRVdTXSAqL1xuXHR3cml0ZV9NRVJHRUNFTExTKGJhLCB3cyk7XG5cdC8qIFtCcnRQaG9uZXRpY0luZm9dICovXG5cdC8qICpDT05ESVRJT05BTEZPUk1BVFRJTkcgKi9cblx0LyogW0RWQUxTXSAqL1xuXHR3cml0ZV9ITElOS1MoYmEsIHdzLCByZWxzKTtcblx0LyogW0JydFByaW50T3B0aW9uc10gKi9cblx0aWYod3NbJyFtYXJnaW5zJ10pIHdyaXRlX3JlY29yZChiYSwgMHgwMURDIC8qIEJydE1hcmdpbnMgKi8sIHdyaXRlX0JydE1hcmdpbnMod3NbJyFtYXJnaW5zJ10pKTtcblx0LyogW0JydFBhZ2VTZXR1cF0gKi9cblx0LyogW0hFQURFUkZPT1RFUl0gKi9cblx0LyogW1JXQlJLXSAqL1xuXHQvKiBbQ09MQlJLXSAqL1xuXHQvKiAqQnJ0QmlnTmFtZSAqL1xuXHQvKiBbQ0VMTFdBVENIRVNdICovXG5cdGlmKCFvcHRzIHx8IG9wdHMuaWdub3JlRUMgfHwgKG9wdHMuaWdub3JlRUMgPT0gKHZvaWQgMCkpKSB3cml0ZV9JR05PUkVFQ1MoYmEsIHdzKTtcblx0LyogW1NNQVJUVEFHU10gKi9cblx0LyogW0JydERyYXdpbmddICovXG5cdHdyaXRlX0xFR0FDWURSQVdJTkcoYmEsIHdzLCBpZHgsIHJlbHMpO1xuXHQvKiBbQnJ0TGVnYWN5RHJhd2luZ0hGXSAqL1xuXHQvKiBbQnJ0QmtIaW1dICovXG5cdC8qIFtPTEVPQkpFQ1RTXSAqL1xuXHQvKiBbQUNUSVZFWENPTlRST0xTXSAqL1xuXHQvKiBbV0VCUFVCSVRFTVNdICovXG5cdC8qIFtMSVNUUEFSVFNdICovXG5cdC8qIEZSVFdPUktTSEVFVCAqL1xuXHR3cml0ZV9yZWNvcmQoYmEsIDB4MDA4MiAvKiBCcnRFbmRTaGVldCAqLyk7XG5cdHJldHVybiBiYS5lbmQoKTtcbn1cbmZ1bmN0aW9uIHBhcnNlX0NhY2hlKGRhdGEvKjpzdHJpbmcqLykvKjpbQXJyYXk8bnVtYmVyfHN0cmluZz4sIHN0cmluZywgP3N0cmluZ10qLyB7XG5cdHZhciBjb2wvKjpBcnJheTxudW1iZXJ8c3RyaW5nPiovID0gW107XG5cdHZhciBudW0gPSBkYXRhLm1hdGNoKC9ePGM6bnVtQ2FjaGU+Lyk7XG5cdHZhciBmO1xuXG5cdC8qIDIxLjIuMi4xNTAgcHQgQ1RfTnVtVmFsICovXG5cdChkYXRhLm1hdGNoKC88YzpwdCBpZHg9XCIoXFxkKilcIj4oLio/KTxcXC9jOnB0Pi9tZyl8fFtdKS5mb3JFYWNoKGZ1bmN0aW9uKHB0KSB7XG5cdFx0dmFyIHEgPSBwdC5tYXRjaCgvPGM6cHQgaWR4PVwiKFxcZCo/KVwiPjxjOnY+KC4qKTxcXC9jOnY+PFxcL2M6cHQ+Lyk7XG5cdFx0aWYoIXEpIHJldHVybjtcblx0XHRjb2xbK3FbMV1dID0gbnVtID8gK3FbMl0gOiBxWzJdO1xuXHR9KTtcblxuXHQvKiAyMS4yLjIuNzEgZm9ybWF0Q29kZSBDVF9Yc3RyaW5nICovXG5cdHZhciBuZiA9IHVuZXNjYXBleG1sKChkYXRhLm1hdGNoKC88Yzpmb3JtYXRDb2RlPihbXFxzXFxTXSo/KTxcXC9jOmZvcm1hdENvZGU+LykgfHwgW1wiXCIsXCJHZW5lcmFsXCJdKVsxXSk7XG5cblx0KGRhdGEubWF0Y2goLzxjOmY+KC4qPyk8XFwvYzpmPi9tZyl8fFtdKS5mb3JFYWNoKGZ1bmN0aW9uKEYpIHsgZiA9IEYucmVwbGFjZSgvPC4qPz4vZyxcIlwiKTsgfSk7XG5cblx0cmV0dXJuIFtjb2wsIG5mLCBmXTtcbn1cblxuLyogMjEuMiBEcmF3aW5nTUwgLSBDaGFydHMgKi9cbmZ1bmN0aW9uIHBhcnNlX2NoYXJ0KGRhdGEvKjo/c3RyaW5nKi8sIG5hbWUvKjpzdHJpbmcqLywgb3B0cywgcmVscywgd2IsIGNzaGVldCkge1xuXHR2YXIgY3MvKjpXb3Jrc2hlZXQqLyA9ICgoY3NoZWV0IHx8IHtcIiF0eXBlXCI6XCJjaGFydFwifSkvKjphbnkqLyk7XG5cdGlmKCFkYXRhKSByZXR1cm4gY3NoZWV0O1xuXHQvKiAyMS4yLjIuMjcgY2hhcnQgQ1RfQ2hhcnQgKi9cblxuXHR2YXIgQyA9IDAsIFIgPSAwLCBjb2wgPSBcIkFcIjtcblx0dmFyIHJlZmd1ZXNzID0ge3M6IHtyOjIwMDAwMDAsIGM6MjAwMDAwMH0sIGU6IHtyOjAsIGM6MH0gfTtcblxuXHQvKiAyMS4yLjIuMTIwIG51bUNhY2hlIENUX051bURhdGEgKi9cblx0KGRhdGEubWF0Y2goLzxjOm51bUNhY2hlPltcXHNcXFNdKj88XFwvYzpudW1DYWNoZT4vZ20pfHxbXSkuZm9yRWFjaChmdW5jdGlvbihuYykge1xuXHRcdHZhciBjYWNoZSA9IHBhcnNlX0NhY2hlKG5jKTtcblx0XHRyZWZndWVzcy5zLnIgPSByZWZndWVzcy5zLmMgPSAwO1xuXHRcdHJlZmd1ZXNzLmUuYyA9IEM7XG5cdFx0Y29sID0gZW5jb2RlX2NvbChDKTtcblx0XHRjYWNoZVswXS5mb3JFYWNoKGZ1bmN0aW9uKG4saSkge1xuXHRcdFx0Y3NbY29sICsgZW5jb2RlX3JvdyhpKV0gPSB7dDonbicsIHY6biwgejpjYWNoZVsxXSB9O1xuXHRcdFx0UiA9IGk7XG5cdFx0fSk7XG5cdFx0aWYocmVmZ3Vlc3MuZS5yIDwgUikgcmVmZ3Vlc3MuZS5yID0gUjtcblx0XHQrK0M7XG5cdH0pO1xuXHRpZihDID4gMCkgY3NbXCIhcmVmXCJdID0gZW5jb2RlX3JhbmdlKHJlZmd1ZXNzKTtcblx0cmV0dXJuIGNzO1xufVxuLyogMTguMyBXb3Jrc2hlZXRzIGFsc28gY292ZXJzIENoYXJ0c2hlZXRzICovXG5mdW5jdGlvbiBwYXJzZV9jc194bWwoZGF0YS8qOj9zdHJpbmcqLywgb3B0cywgaWR4Lyo6bnVtYmVyKi8sIHJlbHMsIHdiLyo6OiwgdGhlbWVzLCBzdHlsZXMqLykvKjpXb3Jrc2hlZXQqLyB7XG5cdGlmKCFkYXRhKSByZXR1cm4gZGF0YTtcblx0LyogMTguMy4xLjEyIGNoYXJ0c2hlZXQgQ1RfQ2hhcnRTaGVldCAqL1xuXHRpZighcmVscykgcmVscyA9IHsnIWlkJzp7fX07XG5cdHZhciBzID0gKHsnIXR5cGUnOlwiY2hhcnRcIiwgJyFkcmF3ZWwnOm51bGwsICchcmVsJzpcIlwifS8qOmFueSovKTtcblx0dmFyIG07XG5cblx0LyogMTguMy4xLjgzIHNoZWV0UHIgQ1RfQ2hhcnRzaGVldFByICovXG5cdHZhciBzaGVldFByID0gZGF0YS5tYXRjaChzaGVldHBycmVnZXgpO1xuXHRpZihzaGVldFByKSBwYXJzZV93c194bWxfc2hlZXRwcihzaGVldFByWzBdLCBzLCB3YiwgaWR4KTtcblxuXHQvKiAxOC4zLjEuMzYgZHJhd2luZyBDVF9EcmF3aW5nICovXG5cdGlmKChtID0gZGF0YS5tYXRjaCgvZHJhd2luZyByOmlkPVwiKC4qPylcIi8pKSkgc1snIXJlbCddID0gbVsxXTtcblxuXHRpZihyZWxzWychaWQnXVtzWychcmVsJ11dKSBzWychZHJhd2VsJ10gPSByZWxzWychaWQnXVtzWychcmVsJ11dO1xuXHRyZXR1cm4gcztcbn1cbmZ1bmN0aW9uIHdyaXRlX2NzX3htbChpZHgvKjpudW1iZXIqLywgb3B0cywgd2IvKjpXb3JrYm9vayovLCByZWxzKS8qOnN0cmluZyovIHtcblx0dmFyIG8gPSBbWE1MX0hFQURFUiwgd3JpdGV4dGFnKCdjaGFydHNoZWV0JywgbnVsbCwge1xuXHRcdCd4bWxucyc6IFhNTE5TX21haW5bMF0sXG5cdFx0J3htbG5zOnInOiBYTUxOUy5yXG5cdH0pXTtcblx0b1tvLmxlbmd0aF0gPSB3cml0ZXh0YWcoXCJkcmF3aW5nXCIsIG51bGwsIHtcInI6aWRcIjogXCJySWQxXCJ9KTtcblx0YWRkX3JlbHMocmVscywgLTEsIFwiLi4vZHJhd2luZ3MvZHJhd2luZ1wiICsgKGlkeCsxKSArIFwiLnhtbFwiLCBSRUxTLkRSQVcpO1xuXHRpZihvLmxlbmd0aD4yKSB7IG9bby5sZW5ndGhdID0gKCc8L2NoYXJ0c2hlZXQ+Jyk7IG9bMV09b1sxXS5yZXBsYWNlKFwiLz5cIixcIj5cIik7IH1cblx0cmV0dXJuIG8uam9pbihcIlwiKTtcbn1cblxuLyogW01TLVhMU0JdIDIuNC4zMzEgQnJ0Q3NQcm9wICovXG5mdW5jdGlvbiBwYXJzZV9CcnRDc1Byb3AoZGF0YSwgbGVuZ3RoLyo6bnVtYmVyKi8pIHtcblx0ZGF0YS5sICs9IDEwO1xuXHR2YXIgbmFtZSA9IHBhcnNlX1hMV2lkZVN0cmluZyhkYXRhLCBsZW5ndGggLSAxMCk7XG5cdHJldHVybiB7IG5hbWU6IG5hbWUgfTtcbn1cblxuLyogW01TLVhMU0JdIDIuMS43LjcgQ2hhcnQgU2hlZXQgKi9cbmZ1bmN0aW9uIHBhcnNlX2NzX2JpbihkYXRhLCBvcHRzLCBpZHgvKjpudW1iZXIqLywgcmVscywgd2IvKjo6LCB0aGVtZXMsIHN0eWxlcyovKS8qOldvcmtzaGVldCovIHtcblx0aWYoIWRhdGEpIHJldHVybiBkYXRhO1xuXHRpZighcmVscykgcmVscyA9IHsnIWlkJzp7fX07XG5cdHZhciBzID0geychdHlwZSc6XCJjaGFydFwiLCAnIWRyYXdlbCc6bnVsbCwgJyFyZWwnOlwiXCJ9O1xuXHR2YXIgc3RhdGUvKjpBcnJheTxzdHJpbmc+Ki8gPSBbXTtcblx0dmFyIHBhc3MgPSBmYWxzZTtcblx0cmVjb3JkaG9wcGVyKGRhdGEsIGZ1bmN0aW9uIGNzX3BhcnNlKHZhbCwgUiwgUlQpIHtcblx0XHRzd2l0Y2goUlQpIHtcblxuXHRcdFx0Y2FzZSAweDAyMjY6IC8qICdCcnREcmF3aW5nJyAqL1xuXHRcdFx0XHRzWychcmVsJ10gPSB2YWw7IGJyZWFrO1xuXG5cdFx0XHRjYXNlIDB4MDI4QjogLyogJ0JydENzUHJvcCcgKi9cblx0XHRcdFx0aWYoIXdiLlNoZWV0c1tpZHhdKSB3Yi5TaGVldHNbaWR4XSA9IHt9O1xuXHRcdFx0XHRpZih2YWwubmFtZSkgd2IuU2hlZXRzW2lkeF0uQ29kZU5hbWUgPSB2YWwubmFtZTtcblx0XHRcdFx0YnJlYWs7XG5cblx0XHRcdGNhc2UgMHgwMjMyOiAvKiAnQnJ0QmtIaW0nICovXG5cdFx0XHRjYXNlIDB4MDI4QzogLyogJ0JydENzUGFnZVNldHVwJyAqL1xuXHRcdFx0Y2FzZSAweDAyOUQ6IC8qICdCcnRDc1Byb3RlY3Rpb24nICovXG5cdFx0XHRjYXNlIDB4MDJBNzogLyogJ0JydENzUHJvdGVjdGlvbklzbycgKi9cblx0XHRcdGNhc2UgMHgwMjI3OiAvKiAnQnJ0TGVnYWN5RHJhd2luZycgKi9cblx0XHRcdGNhc2UgMHgwMjI4OiAvKiAnQnJ0TGVnYWN5RHJhd2luZ0hGJyAqL1xuXHRcdFx0Y2FzZSAweDAxREM6IC8qICdCcnRNYXJnaW5zJyAqL1xuXHRcdFx0Y2FzZSAweDBDMDA6IC8qICdCcnRVaWQnICovXG5cdFx0XHRcdGJyZWFrO1xuXG5cdFx0XHRjYXNlIDB4MDAyMzogLyogJ0JydEZSVEJlZ2luJyAqL1xuXHRcdFx0XHRwYXNzID0gdHJ1ZTsgYnJlYWs7XG5cdFx0XHRjYXNlIDB4MDAyNDogLyogJ0JydEZSVEVuZCcgKi9cblx0XHRcdFx0cGFzcyA9IGZhbHNlOyBicmVhaztcblx0XHRcdGNhc2UgMHgwMDI1OiAvKiAnQnJ0QUNCZWdpbicgKi9cblx0XHRcdFx0c3RhdGUucHVzaChSVCk7IGJyZWFrO1xuXHRcdFx0Y2FzZSAweDAwMjY6IC8qICdCcnRBQ0VuZCcgKi9cblx0XHRcdFx0c3RhdGUucG9wKCk7IGJyZWFrO1xuXG5cdFx0XHRkZWZhdWx0OlxuXHRcdFx0XHRpZihSLlQgPiAwKSBzdGF0ZS5wdXNoKFJUKTtcblx0XHRcdFx0ZWxzZSBpZihSLlQgPCAwKSBzdGF0ZS5wb3AoKTtcblx0XHRcdFx0ZWxzZSBpZighcGFzcyB8fCBvcHRzLldURikgdGhyb3cgbmV3IEVycm9yKFwiVW5leHBlY3RlZCByZWNvcmQgMHhcIiArIFJULnRvU3RyaW5nKDE2KSk7XG5cdFx0fVxuXHR9LCBvcHRzKTtcblxuXHRpZihyZWxzWychaWQnXVtzWychcmVsJ11dKSBzWychZHJhd2VsJ10gPSByZWxzWychaWQnXVtzWychcmVsJ11dO1xuXHRyZXR1cm4gcztcbn1cbmZ1bmN0aW9uIHdyaXRlX2NzX2JpbigvKjo6aWR4Om51bWJlciwgb3B0cywgd2I6V29ya2Jvb2ssIHJlbHMqLykge1xuXHR2YXIgYmEgPSBidWZfYXJyYXkoKTtcblx0d3JpdGVfcmVjb3JkKGJhLCAweDAwODEgLyogQnJ0QmVnaW5TaGVldCAqLyk7XG5cdC8qIFtCcnRDc1Byb3BdICovXG5cdC8qIENTVklFV1MgKi9cblx0LyogW1tCcnRDc1Byb3RlY3Rpb25Jc29dIEJydENzUHJvdGVjdGlvbl0gKi9cblx0LyogW1VTRVJDU1ZJRVdTXSAqL1xuXHQvKiBbQnJ0TWFyZ2luc10gKi9cblx0LyogW0JydENzUGFnZVNldHVwXSAqL1xuXHQvKiBbSEVBREVSRk9PVEVSXSAqL1xuXHQvKiBCcnREcmF3aW5nICovXG5cdC8qIFtCcnRMZWdhY3lEcmF3aW5nXSAqL1xuXHQvKiBbQnJ0TGVnYWN5RHJhd2luZ0hGXSAqL1xuXHQvKiBbQnJ0QmtIaW1dICovXG5cdC8qIFtXRUJQVUJJVEVNU10gKi9cblx0LyogRlJUQ0hBUlRTSEVFVCAqL1xuXHR3cml0ZV9yZWNvcmQoYmEsIDB4MDA4MiAvKiBCcnRFbmRTaGVldCAqLyk7XG5cdHJldHVybiBiYS5lbmQoKTtcbn1cbi8qIDE4LjIuMjggKENUX1dvcmtib29rUHJvdGVjdGlvbikgRGVmYXVsdHMgKi9cbnZhciBXQlByb3BzRGVmID0gW1xuXHRbJ2FsbG93UmVmcmVzaFF1ZXJ5JywgICAgICAgICAgIGZhbHNlLCBcImJvb2xcIl0sXG5cdFsnYXV0b0NvbXByZXNzUGljdHVyZXMnLCAgICAgICAgdHJ1ZSwgIFwiYm9vbFwiXSxcblx0WydiYWNrdXBGaWxlJywgICAgICAgICAgICAgICAgICBmYWxzZSwgXCJib29sXCJdLFxuXHRbJ2NoZWNrQ29tcGF0aWJpbGl0eScsICAgICAgICAgIGZhbHNlLCBcImJvb2xcIl0sXG5cdFsnQ29kZU5hbWUnLCAgICAgICAgICAgICAgICAgICAgJyddLFxuXHRbJ2RhdGUxOTA0JywgICAgICAgICAgICAgICAgICAgIGZhbHNlLCBcImJvb2xcIl0sXG5cdFsnZGVmYXVsdFRoZW1lVmVyc2lvbicsICAgICAgICAgMCwgICAgICBcImludFwiXSxcblx0WydmaWx0ZXJQcml2YWN5JywgICAgICAgICAgICAgICBmYWxzZSwgXCJib29sXCJdLFxuXHRbJ2hpZGVQaXZvdEZpZWxkTGlzdCcsICAgICAgICAgIGZhbHNlLCBcImJvb2xcIl0sXG5cdFsncHJvbXB0ZWRTb2x1dGlvbnMnLCAgICAgICAgICAgZmFsc2UsIFwiYm9vbFwiXSxcblx0WydwdWJsaXNoSXRlbXMnLCAgICAgICAgICAgICAgICBmYWxzZSwgXCJib29sXCJdLFxuXHRbJ3JlZnJlc2hBbGxDb25uZWN0aW9ucycsICAgICAgIGZhbHNlLCBcImJvb2xcIl0sXG5cdFsnc2F2ZUV4dGVybmFsTGlua1ZhbHVlcycsICAgICAgdHJ1ZSwgIFwiYm9vbFwiXSxcblx0WydzaG93Qm9yZGVyVW5zZWxlY3RlZFRhYmxlcycsICB0cnVlLCAgXCJib29sXCJdLFxuXHRbJ3Nob3dJbmtBbm5vdGF0aW9uJywgICAgICAgICAgIHRydWUsICBcImJvb2xcIl0sXG5cdFsnc2hvd09iamVjdHMnLCAgICAgICAgICAgICAgICAgJ2FsbCddLFxuXHRbJ3Nob3dQaXZvdENoYXJ0RmlsdGVyJywgICAgICAgIGZhbHNlLCBcImJvb2xcIl0sXG5cdFsndXBkYXRlTGlua3MnLCAndXNlclNldCddXG5dO1xuXG4vKiAxOC4yLjMwIChDVF9Cb29rVmlldykgRGVmYXVsdHMgKi9cbnZhciBXQlZpZXdEZWYgPSBbXG5cdFsnYWN0aXZlVGFiJywgICAgICAgICAgICAgICAgICAgMCwgICAgICBcImludFwiXSxcblx0WydhdXRvRmlsdGVyRGF0ZUdyb3VwaW5nJywgICAgICB0cnVlLCAgXCJib29sXCJdLFxuXHRbJ2ZpcnN0U2hlZXQnLCAgICAgICAgICAgICAgICAgIDAsICAgICAgXCJpbnRcIl0sXG5cdFsnbWluaW1pemVkJywgICAgICAgICAgICAgICAgICAgZmFsc2UsIFwiYm9vbFwiXSxcblx0WydzaG93SG9yaXpvbnRhbFNjcm9sbCcsICAgICAgICB0cnVlLCAgXCJib29sXCJdLFxuXHRbJ3Nob3dTaGVldFRhYnMnLCAgICAgICAgICAgICAgIHRydWUsICBcImJvb2xcIl0sXG5cdFsnc2hvd1ZlcnRpY2FsU2Nyb2xsJywgICAgICAgICAgdHJ1ZSwgIFwiYm9vbFwiXSxcblx0Wyd0YWJSYXRpbycsICAgICAgICAgICAgICAgICAgICA2MDAsICAgIFwiaW50XCJdLFxuXHRbJ3Zpc2liaWxpdHknLCAgICAgICAgICAgICAgICAgICd2aXNpYmxlJ11cblx0Ly93aW5kb3d7SGVpZ2h0LFdpZHRofSwge3gseX1XaW5kb3dcbl07XG5cbi8qIDE4LjIuMTkgKENUX1NoZWV0KSBEZWZhdWx0cyAqL1xudmFyIFNoZWV0RGVmID0gW1xuXHQvL1snc3RhdGUnLCAndmlzaWJsZSddXG5dO1xuXG4vKiAxOC4yLjIgIChDVF9DYWxjUHIpIERlZmF1bHRzICovXG52YXIgQ2FsY1ByRGVmID0gW1xuXHRbJ2NhbGNDb21wbGV0ZWQnLCAndHJ1ZSddLFxuXHRbJ2NhbGNNb2RlJywgJ2F1dG8nXSxcblx0WydjYWxjT25TYXZlJywgJ3RydWUnXSxcblx0Wydjb25jdXJyZW50Q2FsYycsICd0cnVlJ10sXG5cdFsnZnVsbENhbGNPbkxvYWQnLCAnZmFsc2UnXSxcblx0WydmdWxsUHJlY2lzaW9uJywgJ3RydWUnXSxcblx0WydpdGVyYXRlJywgJ2ZhbHNlJ10sXG5cdFsnaXRlcmF0ZUNvdW50JywgJzEwMCddLFxuXHRbJ2l0ZXJhdGVEZWx0YScsICcwLjAwMSddLFxuXHRbJ3JlZk1vZGUnLCAnQTEnXVxuXTtcblxuLyogMTguMi4zIChDVF9DdXN0b21Xb3JrYm9va1ZpZXcpIERlZmF1bHRzICovXG4vKnZhciBDdXN0b21XQlZpZXdEZWYgPSBbXG5cdFsnYXV0b1VwZGF0ZScsICdmYWxzZSddLFxuXHRbJ2NoYW5nZXNTYXZlZFdpbicsICdmYWxzZSddLFxuXHRbJ2luY2x1ZGVIaWRkZW5Sb3dDb2wnLCAndHJ1ZSddLFxuXHRbJ2luY2x1ZGVQcmludFNldHRpbmdzJywgJ3RydWUnXSxcblx0WydtYXhpbWl6ZWQnLCAnZmFsc2UnXSxcblx0WydtaW5pbWl6ZWQnLCAnZmFsc2UnXSxcblx0Wydvbmx5U3luYycsICdmYWxzZSddLFxuXHRbJ3BlcnNvbmFsVmlldycsICdmYWxzZSddLFxuXHRbJ3Nob3dDb21tZW50cycsICdjb21tSW5kaWNhdG9yJ10sXG5cdFsnc2hvd0Zvcm11bGFCYXInLCAndHJ1ZSddLFxuXHRbJ3Nob3dIb3Jpem9udGFsU2Nyb2xsJywgJ3RydWUnXSxcblx0WydzaG93T2JqZWN0cycsICdhbGwnXSxcblx0WydzaG93U2hlZXRUYWJzJywgJ3RydWUnXSxcblx0WydzaG93U3RhdHVzYmFyJywgJ3RydWUnXSxcblx0WydzaG93VmVydGljYWxTY3JvbGwnLCAndHJ1ZSddLFxuXHRbJ3RhYlJhdGlvJywgJzYwMCddLFxuXHRbJ3hXaW5kb3cnLCAnMCddLFxuXHRbJ3lXaW5kb3cnLCAnMCddXG5dOyovXG5cbmZ1bmN0aW9uIHB1c2hfZGVmYXVsdHNfYXJyYXkodGFyZ2V0LCBkZWZhdWx0cykge1xuXHRmb3IodmFyIGogPSAwOyBqICE9IHRhcmdldC5sZW5ndGg7ICsraikgeyB2YXIgdyA9IHRhcmdldFtqXTtcblx0XHRmb3IodmFyIGk9MDsgaSAhPSBkZWZhdWx0cy5sZW5ndGg7ICsraSkgeyB2YXIgeiA9IGRlZmF1bHRzW2ldO1xuXHRcdFx0aWYod1t6WzBdXSA9PSBudWxsKSB3W3pbMF1dID0gelsxXTtcblx0XHRcdGVsc2Ugc3dpdGNoKHpbMl0pIHtcblx0XHRcdGNhc2UgXCJib29sXCI6IGlmKHR5cGVvZiB3W3pbMF1dID09IFwic3RyaW5nXCIpIHdbelswXV0gPSBwYXJzZXhtbGJvb2wod1t6WzBdXSk7IGJyZWFrO1xuXHRcdFx0Y2FzZSBcImludFwiOiBpZih0eXBlb2Ygd1t6WzBdXSA9PSBcInN0cmluZ1wiKSB3W3pbMF1dID0gcGFyc2VJbnQod1t6WzBdXSwgMTApOyBicmVhaztcblx0XHRcdH1cblx0XHR9XG5cdH1cbn1cbmZ1bmN0aW9uIHB1c2hfZGVmYXVsdHModGFyZ2V0LCBkZWZhdWx0cykge1xuXHRmb3IodmFyIGkgPSAwOyBpICE9IGRlZmF1bHRzLmxlbmd0aDsgKytpKSB7IHZhciB6ID0gZGVmYXVsdHNbaV07XG5cdFx0aWYodGFyZ2V0W3pbMF1dID09IG51bGwpIHRhcmdldFt6WzBdXSA9IHpbMV07XG5cdFx0ZWxzZSBzd2l0Y2goelsyXSkge1xuXHRcdFx0Y2FzZSBcImJvb2xcIjogaWYodHlwZW9mIHRhcmdldFt6WzBdXSA9PSBcInN0cmluZ1wiKSB0YXJnZXRbelswXV0gPSBwYXJzZXhtbGJvb2wodGFyZ2V0W3pbMF1dKTsgYnJlYWs7XG5cdFx0XHRjYXNlIFwiaW50XCI6IGlmKHR5cGVvZiB0YXJnZXRbelswXV0gPT0gXCJzdHJpbmdcIikgdGFyZ2V0W3pbMF1dID0gcGFyc2VJbnQodGFyZ2V0W3pbMF1dLCAxMCk7IGJyZWFrO1xuXHRcdH1cblx0fVxufVxuXG5mdW5jdGlvbiBwYXJzZV93Yl9kZWZhdWx0cyh3Yikge1xuXHRwdXNoX2RlZmF1bHRzKHdiLldCUHJvcHMsIFdCUHJvcHNEZWYpO1xuXHRwdXNoX2RlZmF1bHRzKHdiLkNhbGNQciwgQ2FsY1ByRGVmKTtcblxuXHRwdXNoX2RlZmF1bHRzX2FycmF5KHdiLldCVmlldywgV0JWaWV3RGVmKTtcblx0cHVzaF9kZWZhdWx0c19hcnJheSh3Yi5TaGVldHMsIFNoZWV0RGVmKTtcblxuXHRfc3Nmb3B0cy5kYXRlMTkwNCA9IHBhcnNleG1sYm9vbCh3Yi5XQlByb3BzLmRhdGUxOTA0KTtcbn1cblxuZnVuY3Rpb24gc2FmZTE5MDQod2IvKjpXb3JrYm9vayovKS8qOnN0cmluZyovIHtcblx0LyogVE9ETzogc3RvcmUgZGF0ZTE5MDQgc29tZXdoZXJlIGVsc2UgKi9cblx0aWYoIXdiLldvcmtib29rKSByZXR1cm4gXCJmYWxzZVwiO1xuXHRpZighd2IuV29ya2Jvb2suV0JQcm9wcykgcmV0dXJuIFwiZmFsc2VcIjtcblx0cmV0dXJuIHBhcnNleG1sYm9vbCh3Yi5Xb3JrYm9vay5XQlByb3BzLmRhdGUxOTA0KSA/IFwidHJ1ZVwiIDogXCJmYWxzZVwiO1xufVxuXG52YXIgYmFkY2hhcnMgPSAvKiNfX1BVUkVfXyovXCJdWyo/XFwvXFxcXFwiLnNwbGl0KFwiXCIpO1xuZnVuY3Rpb24gY2hlY2tfd3NfbmFtZShuLyo6c3RyaW5nKi8sIHNhZmUvKjo/Ym9vbGVhbiovKS8qOmJvb2xlYW4qLyB7XG5cdGlmKG4ubGVuZ3RoID4gMzEpIHsgaWYoc2FmZSkgcmV0dXJuIGZhbHNlOyB0aHJvdyBuZXcgRXJyb3IoXCJTaGVldCBuYW1lcyBjYW5ub3QgZXhjZWVkIDMxIGNoYXJzXCIpOyB9XG5cdHZhciBfZ29vZCA9IHRydWU7XG5cdGJhZGNoYXJzLmZvckVhY2goZnVuY3Rpb24oYykge1xuXHRcdGlmKG4uaW5kZXhPZihjKSA9PSAtMSkgcmV0dXJuO1xuXHRcdGlmKCFzYWZlKSB0aHJvdyBuZXcgRXJyb3IoXCJTaGVldCBuYW1lIGNhbm5vdCBjb250YWluIDogXFxcXCAvID8gKiBbIF1cIik7XG5cdFx0X2dvb2QgPSBmYWxzZTtcblx0fSk7XG5cdHJldHVybiBfZ29vZDtcbn1cbmZ1bmN0aW9uIGNoZWNrX3diX25hbWVzKE4sIFMsIGNvZGVzKSB7XG5cdE4uZm9yRWFjaChmdW5jdGlvbihuLGkpIHtcblx0XHRjaGVja193c19uYW1lKG4pO1xuXHRcdGZvcih2YXIgaiA9IDA7IGogPCBpOyArK2opIGlmKG4gPT0gTltqXSkgdGhyb3cgbmV3IEVycm9yKFwiRHVwbGljYXRlIFNoZWV0IE5hbWU6IFwiICsgbik7XG5cdFx0aWYoY29kZXMpIHtcblx0XHRcdHZhciBjbiA9IChTICYmIFNbaV0gJiYgU1tpXS5Db2RlTmFtZSkgfHwgbjtcblx0XHRcdGlmKGNuLmNoYXJDb2RlQXQoMCkgPT0gOTUgJiYgY24ubGVuZ3RoID4gMjIpIHRocm93IG5ldyBFcnJvcihcIkJhZCBDb2RlIE5hbWU6IFdvcmtzaGVldFwiICsgY24pO1xuXHRcdH1cblx0fSk7XG59XG5mdW5jdGlvbiBjaGVja193Yih3Yikge1xuXHRpZighd2IgfHwgIXdiLlNoZWV0TmFtZXMgfHwgIXdiLlNoZWV0cykgdGhyb3cgbmV3IEVycm9yKFwiSW52YWxpZCBXb3JrYm9va1wiKTtcblx0aWYoIXdiLlNoZWV0TmFtZXMubGVuZ3RoKSB0aHJvdyBuZXcgRXJyb3IoXCJXb3JrYm9vayBpcyBlbXB0eVwiKTtcblx0dmFyIFNoZWV0cyA9ICh3Yi5Xb3JrYm9vayAmJiB3Yi5Xb3JrYm9vay5TaGVldHMpIHx8IFtdO1xuXHRjaGVja193Yl9uYW1lcyh3Yi5TaGVldE5hbWVzLCBTaGVldHMsICEhd2IudmJhcmF3KTtcblx0Zm9yKHZhciBpID0gMDsgaSA8IHdiLlNoZWV0TmFtZXMubGVuZ3RoOyArK2kpIGNoZWNrX3dzKHdiLlNoZWV0c1t3Yi5TaGVldE5hbWVzW2ldXSwgd2IuU2hlZXROYW1lc1tpXSwgaSk7XG5cdC8qIFRPRE86IHZhbGlkYXRlIHdvcmtib29rICovXG59XG4vKiAxOC4yIFdvcmtib29rICovXG52YXIgd2Juc3JlZ2V4ID0gLzxcXHcrOndvcmtib29rLztcbmZ1bmN0aW9uIHBhcnNlX3diX3htbChkYXRhLCBvcHRzKS8qOldvcmtib29rRmlsZSovIHtcblx0aWYoIWRhdGEpIHRocm93IG5ldyBFcnJvcihcIkNvdWxkIG5vdCBmaW5kIGZpbGVcIik7XG5cdHZhciB3YiA9IC8qOjooKi97IEFwcFZlcnNpb246e30sIFdCUHJvcHM6e30sIFdCVmlldzpbXSwgU2hlZXRzOltdLCBDYWxjUHI6e30sIE5hbWVzOltdLCB4bWxuczogXCJcIiB9Lyo6OikqLztcblx0dmFyIHBhc3MgPSBmYWxzZSwgeG1sbnMgPSBcInhtbG5zXCI7XG5cdHZhciBkbmFtZSA9IHt9LCBkbnN0YXJ0ID0gMDtcblx0ZGF0YS5yZXBsYWNlKHRhZ3JlZ2V4LCBmdW5jdGlvbiB4bWxfd2IoeCwgaWR4KSB7XG5cdFx0dmFyIHkvKjphbnkqLyA9IHBhcnNleG1sdGFnKHgpO1xuXHRcdHN3aXRjaChzdHJpcF9ucyh5WzBdKSkge1xuXHRcdFx0Y2FzZSAnPD94bWwnOiBicmVhaztcblxuXHRcdFx0LyogMTguMi4yNyB3b3JrYm9vayBDVF9Xb3JrYm9vayAxICovXG5cdFx0XHRjYXNlICc8d29ya2Jvb2snOlxuXHRcdFx0XHRpZih4Lm1hdGNoKHdibnNyZWdleCkpIHhtbG5zID0gXCJ4bWxuc1wiICsgeC5tYXRjaCgvPChcXHcrKTovKVsxXTtcblx0XHRcdFx0d2IueG1sbnMgPSB5W3htbG5zXTtcblx0XHRcdFx0YnJlYWs7XG5cdFx0XHRjYXNlICc8L3dvcmtib29rPic6IGJyZWFrO1xuXG5cdFx0XHQvKiAxOC4yLjEzIGZpbGVWZXJzaW9uIENUX0ZpbGVWZXJzaW9uID8gKi9cblx0XHRcdGNhc2UgJzxmaWxlVmVyc2lvbic6IGRlbGV0ZSB5WzBdOyB3Yi5BcHBWZXJzaW9uID0geTsgYnJlYWs7XG5cdFx0XHRjYXNlICc8ZmlsZVZlcnNpb24vPic6IGNhc2UgJzwvZmlsZVZlcnNpb24+JzogYnJlYWs7XG5cblx0XHRcdC8qIDE4LjIuMTIgZmlsZVNoYXJpbmcgQ1RfRmlsZVNoYXJpbmcgPyAqL1xuXHRcdFx0Y2FzZSAnPGZpbGVTaGFyaW5nJzpcblx0XHRcdFx0YnJlYWs7XG5cdFx0XHRjYXNlICc8ZmlsZVNoYXJpbmcvPic6IGJyZWFrO1xuXG5cdFx0XHQvKiAxOC4yLjI4IHdvcmtib29rUHIgQ1RfV29ya2Jvb2tQciA/ICovXG5cdFx0XHRjYXNlICc8d29ya2Jvb2tQcic6XG5cdFx0XHRjYXNlICc8d29ya2Jvb2tQci8+Jzpcblx0XHRcdFx0V0JQcm9wc0RlZi5mb3JFYWNoKGZ1bmN0aW9uKHcpIHtcblx0XHRcdFx0XHRpZih5W3dbMF1dID09IG51bGwpIHJldHVybjtcblx0XHRcdFx0XHRzd2l0Y2god1syXSkge1xuXHRcdFx0XHRcdFx0Y2FzZSBcImJvb2xcIjogd2IuV0JQcm9wc1t3WzBdXSA9IHBhcnNleG1sYm9vbCh5W3dbMF1dKTsgYnJlYWs7XG5cdFx0XHRcdFx0XHRjYXNlIFwiaW50XCI6IHdiLldCUHJvcHNbd1swXV0gPSBwYXJzZUludCh5W3dbMF1dLCAxMCk7IGJyZWFrO1xuXHRcdFx0XHRcdFx0ZGVmYXVsdDogd2IuV0JQcm9wc1t3WzBdXSA9IHlbd1swXV07XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9KTtcblx0XHRcdFx0aWYoeS5jb2RlTmFtZSkgd2IuV0JQcm9wcy5Db2RlTmFtZSA9IHV0ZjhyZWFkKHkuY29kZU5hbWUpO1xuXHRcdFx0XHRicmVhaztcblx0XHRcdGNhc2UgJzwvd29ya2Jvb2tQcj4nOiBicmVhaztcblxuXHRcdFx0LyogMTguMi4yOSB3b3JrYm9va1Byb3RlY3Rpb24gQ1RfV29ya2Jvb2tQcm90ZWN0aW9uID8gKi9cblx0XHRcdGNhc2UgJzx3b3JrYm9va1Byb3RlY3Rpb24nOlxuXHRcdFx0XHRicmVhaztcblx0XHRcdGNhc2UgJzx3b3JrYm9va1Byb3RlY3Rpb24vPic6IGJyZWFrO1xuXG5cdFx0XHQvKiAxOC4yLjEgIGJvb2tWaWV3cyBDVF9Cb29rVmlld3MgPyAqL1xuXHRcdFx0Y2FzZSAnPGJvb2tWaWV3cyc6IGNhc2UgJzxib29rVmlld3M+JzogY2FzZSAnPC9ib29rVmlld3M+JzogYnJlYWs7XG5cdFx0XHQvKiAxOC4yLjMwICAgd29ya2Jvb2tWaWV3IENUX0Jvb2tWaWV3ICsgKi9cblx0XHRcdGNhc2UgJzx3b3JrYm9va1ZpZXcnOiBjYXNlICc8d29ya2Jvb2tWaWV3Lz4nOiBkZWxldGUgeVswXTsgd2IuV0JWaWV3LnB1c2goeSk7IGJyZWFrO1xuXHRcdFx0Y2FzZSAnPC93b3JrYm9va1ZpZXc+JzogYnJlYWs7XG5cblx0XHRcdC8qIDE4LjIuMjAgc2hlZXRzIENUX1NoZWV0cyAxICovXG5cdFx0XHRjYXNlICc8c2hlZXRzJzogY2FzZSAnPHNoZWV0cz4nOiBjYXNlICc8L3NoZWV0cz4nOiBicmVhazsgLy8gYWdncmVnYXRlIHNoZWV0XG5cdFx0XHQvKiAxOC4yLjE5ICAgc2hlZXQgQ1RfU2hlZXQgKyAqL1xuXHRcdFx0Y2FzZSAnPHNoZWV0Jzpcblx0XHRcdFx0c3dpdGNoKHkuc3RhdGUpIHtcblx0XHRcdFx0XHRjYXNlIFwiaGlkZGVuXCI6IHkuSGlkZGVuID0gMTsgYnJlYWs7XG5cdFx0XHRcdFx0Y2FzZSBcInZlcnlIaWRkZW5cIjogeS5IaWRkZW4gPSAyOyBicmVhaztcblx0XHRcdFx0XHRkZWZhdWx0OiB5LkhpZGRlbiA9IDA7XG5cdFx0XHRcdH1cblx0XHRcdFx0ZGVsZXRlIHkuc3RhdGU7XG5cdFx0XHRcdHkubmFtZSA9IHVuZXNjYXBleG1sKHV0ZjhyZWFkKHkubmFtZSkpO1xuXHRcdFx0XHRkZWxldGUgeVswXTsgd2IuU2hlZXRzLnB1c2goeSk7IGJyZWFrO1xuXHRcdFx0Y2FzZSAnPC9zaGVldD4nOiBicmVhaztcblxuXHRcdFx0LyogMTguMi4xNSBmdW5jdGlvbkdyb3VwcyBDVF9GdW5jdGlvbkdyb3VwcyA/ICovXG5cdFx0XHRjYXNlICc8ZnVuY3Rpb25Hcm91cHMnOiBjYXNlICc8ZnVuY3Rpb25Hcm91cHMvPic6IGJyZWFrO1xuXHRcdFx0LyogMTguMi4xNCAgIGZ1bmN0aW9uR3JvdXAgQ1RfRnVuY3Rpb25Hcm91cCArICovXG5cdFx0XHRjYXNlICc8ZnVuY3Rpb25Hcm91cCc6IGJyZWFrO1xuXG5cdFx0XHQvKiAxOC4yLjkgIGV4dGVybmFsUmVmZXJlbmNlcyBDVF9FeHRlcm5hbFJlZmVyZW5jZXMgPyAqL1xuXHRcdFx0Y2FzZSAnPGV4dGVybmFsUmVmZXJlbmNlcyc6IGNhc2UgJzwvZXh0ZXJuYWxSZWZlcmVuY2VzPic6IGNhc2UgJzxleHRlcm5hbFJlZmVyZW5jZXM+JzogYnJlYWs7XG5cdFx0XHQvKiAxOC4yLjggICAgZXh0ZXJuYWxSZWZlcmVuY2UgQ1RfRXh0ZXJuYWxSZWZlcmVuY2UgKyAqL1xuXHRcdFx0Y2FzZSAnPGV4dGVybmFsUmVmZXJlbmNlJzogYnJlYWs7XG5cblx0XHRcdC8qIDE4LjIuNiAgZGVmaW5lZE5hbWVzIENUX0RlZmluZWROYW1lcyA/ICovXG5cdFx0XHRjYXNlICc8ZGVmaW5lZE5hbWVzLz4nOiBicmVhaztcblx0XHRcdGNhc2UgJzxkZWZpbmVkTmFtZXM+JzogY2FzZSAnPGRlZmluZWROYW1lcyc6IHBhc3M9dHJ1ZTsgYnJlYWs7XG5cdFx0XHRjYXNlICc8L2RlZmluZWROYW1lcz4nOiBwYXNzPWZhbHNlOyBicmVhaztcblx0XHRcdC8qIDE4LjIuNSAgICBkZWZpbmVkTmFtZSBDVF9EZWZpbmVkTmFtZSArICovXG5cdFx0XHRjYXNlICc8ZGVmaW5lZE5hbWUnOiB7XG5cdFx0XHRcdGRuYW1lID0ge307XG5cdFx0XHRcdGRuYW1lLk5hbWUgPSB1dGY4cmVhZCh5Lm5hbWUpO1xuXHRcdFx0XHRpZih5LmNvbW1lbnQpIGRuYW1lLkNvbW1lbnQgPSB5LmNvbW1lbnQ7XG5cdFx0XHRcdGlmKHkubG9jYWxTaGVldElkKSBkbmFtZS5TaGVldCA9ICt5LmxvY2FsU2hlZXRJZDtcblx0XHRcdFx0aWYocGFyc2V4bWxib29sKHkuaGlkZGVufHxcIjBcIikpIGRuYW1lLkhpZGRlbiA9IHRydWU7XG5cdFx0XHRcdGRuc3RhcnQgPSBpZHggKyB4Lmxlbmd0aDtcblx0XHRcdH1cdGJyZWFrO1xuXHRcdFx0Y2FzZSAnPC9kZWZpbmVkTmFtZT4nOiB7XG5cdFx0XHRcdGRuYW1lLlJlZiA9IHVuZXNjYXBleG1sKHV0ZjhyZWFkKGRhdGEuc2xpY2UoZG5zdGFydCwgaWR4KSkpO1xuXHRcdFx0XHR3Yi5OYW1lcy5wdXNoKGRuYW1lKTtcblx0XHRcdH0gYnJlYWs7XG5cdFx0XHRjYXNlICc8ZGVmaW5lZE5hbWUvPic6IGJyZWFrO1xuXG5cdFx0XHQvKiAxOC4yLjIgIGNhbGNQciBDVF9DYWxjUHIgPyAqL1xuXHRcdFx0Y2FzZSAnPGNhbGNQcic6IGRlbGV0ZSB5WzBdOyB3Yi5DYWxjUHIgPSB5OyBicmVhaztcblx0XHRcdGNhc2UgJzxjYWxjUHIvPic6IGRlbGV0ZSB5WzBdOyB3Yi5DYWxjUHIgPSB5OyBicmVhaztcblx0XHRcdGNhc2UgJzwvY2FsY1ByPic6IGJyZWFrO1xuXG5cdFx0XHQvKiAxOC4yLjE2IG9sZVNpemUgQ1RfT2xlU2l6ZSA/IChyZWYgcmVxdWlyZWQpICovXG5cdFx0XHRjYXNlICc8b2xlU2l6ZSc6IGJyZWFrO1xuXG5cdFx0XHQvKiAxOC4yLjQgIGN1c3RvbVdvcmtib29rVmlld3MgQ1RfQ3VzdG9tV29ya2Jvb2tWaWV3cyA/ICovXG5cdFx0XHRjYXNlICc8Y3VzdG9tV29ya2Jvb2tWaWV3cz4nOiBjYXNlICc8L2N1c3RvbVdvcmtib29rVmlld3M+JzogY2FzZSAnPGN1c3RvbVdvcmtib29rVmlld3MnOiBicmVhaztcblx0XHRcdC8qIDE4LjIuMyAgY3VzdG9tV29ya2Jvb2tWaWV3IENUX0N1c3RvbVdvcmtib29rVmlldyArICovXG5cdFx0XHRjYXNlICc8Y3VzdG9tV29ya2Jvb2tWaWV3JzogY2FzZSAnPC9jdXN0b21Xb3JrYm9va1ZpZXc+JzogYnJlYWs7XG5cblx0XHRcdC8qIDE4LjIuMTggcGl2b3RDYWNoZXMgQ1RfUGl2b3RDYWNoZXMgPyAqL1xuXHRcdFx0Y2FzZSAnPHBpdm90Q2FjaGVzPic6IGNhc2UgJzwvcGl2b3RDYWNoZXM+JzogY2FzZSAnPHBpdm90Q2FjaGVzJzogYnJlYWs7XG5cdFx0XHQvKiAxOC4yLjE3IHBpdm90Q2FjaGUgQ1RfUGl2b3RDYWNoZSA/ICovXG5cdFx0XHRjYXNlICc8cGl2b3RDYWNoZSc6IGJyZWFrO1xuXG5cdFx0XHQvKiAxOC4yLjIxIHNtYXJ0VGFnUHIgQ1RfU21hcnRUYWdQciA/ICovXG5cdFx0XHRjYXNlICc8c21hcnRUYWdQcic6IGNhc2UgJzxzbWFydFRhZ1ByLz4nOiBicmVhaztcblxuXHRcdFx0LyogMTguMi4yMyBzbWFydFRhZ1R5cGVzIENUX1NtYXJ0VGFnVHlwZXMgPyAqL1xuXHRcdFx0Y2FzZSAnPHNtYXJ0VGFnVHlwZXMnOiBjYXNlICc8c21hcnRUYWdUeXBlcz4nOiBjYXNlICc8L3NtYXJ0VGFnVHlwZXM+JzogYnJlYWs7XG5cdFx0XHQvKiAxOC4yLjIyIHNtYXJ0VGFnVHlwZSBDVF9TbWFydFRhZ1R5cGUgPyAqL1xuXHRcdFx0Y2FzZSAnPHNtYXJ0VGFnVHlwZSc6IGJyZWFrO1xuXG5cdFx0XHQvKiAxOC4yLjI0IHdlYlB1Ymxpc2hpbmcgQ1RfV2ViUHVibGlzaGluZyA/ICovXG5cdFx0XHRjYXNlICc8d2ViUHVibGlzaGluZyc6IGNhc2UgJzx3ZWJQdWJsaXNoaW5nLz4nOiBicmVhaztcblxuXHRcdFx0LyogMTguMi4xMSBmaWxlUmVjb3ZlcnlQciBDVF9GaWxlUmVjb3ZlcnlQciA/ICovXG5cdFx0XHRjYXNlICc8ZmlsZVJlY292ZXJ5UHInOiBjYXNlICc8ZmlsZVJlY292ZXJ5UHIvPic6IGJyZWFrO1xuXG5cdFx0XHQvKiAxOC4yLjI2IHdlYlB1Ymxpc2hPYmplY3RzIENUX1dlYlB1Ymxpc2hPYmplY3RzID8gKi9cblx0XHRcdGNhc2UgJzx3ZWJQdWJsaXNoT2JqZWN0cz4nOiBjYXNlICc8d2ViUHVibGlzaE9iamVjdHMnOiBjYXNlICc8L3dlYlB1Ymxpc2hPYmplY3RzPic6IGJyZWFrO1xuXHRcdFx0LyogMTguMi4yNSB3ZWJQdWJsaXNoT2JqZWN0IENUX1dlYlB1Ymxpc2hPYmplY3QgPyAqL1xuXHRcdFx0Y2FzZSAnPHdlYlB1Ymxpc2hPYmplY3QnOiBicmVhaztcblxuXHRcdFx0LyogMTguMi4xMCBleHRMc3QgQ1RfRXh0ZW5zaW9uTGlzdCA/ICovXG5cdFx0XHRjYXNlICc8ZXh0THN0JzogY2FzZSAnPGV4dExzdD4nOiBjYXNlICc8L2V4dExzdD4nOiBjYXNlICc8ZXh0THN0Lz4nOiBicmVhaztcblx0XHRcdC8qIDE4LjIuNyAgZXh0IENUX0V4dGVuc2lvbiArICovXG5cdFx0XHRjYXNlICc8ZXh0JzogcGFzcz10cnVlOyBicmVhazsgLy9UT0RPOiBjaGVjayB3aXRoIHZlcnNpb25zIG9mIGV4Y2VsXG5cdFx0XHRjYXNlICc8L2V4dD4nOiBwYXNzPWZhbHNlOyBicmVhaztcblxuXHRcdFx0LyogT3RoZXJzICovXG5cdFx0XHRjYXNlICc8QXJjaElEJzogYnJlYWs7XG5cdFx0XHRjYXNlICc8QWx0ZXJuYXRlQ29udGVudCc6XG5cdFx0XHRjYXNlICc8QWx0ZXJuYXRlQ29udGVudD4nOiBwYXNzPXRydWU7IGJyZWFrO1xuXHRcdFx0Y2FzZSAnPC9BbHRlcm5hdGVDb250ZW50Pic6IHBhc3M9ZmFsc2U7IGJyZWFrO1xuXG5cdFx0XHQvKiBUT0RPICovXG5cdFx0XHRjYXNlICc8cmV2aXNpb25QdHInOiBicmVhaztcblxuXHRcdFx0ZGVmYXVsdDogaWYoIXBhc3MgJiYgb3B0cy5XVEYpIHRocm93IG5ldyBFcnJvcigndW5yZWNvZ25pemVkICcgKyB5WzBdICsgJyBpbiB3b3JrYm9vaycpO1xuXHRcdH1cblx0XHRyZXR1cm4geDtcblx0fSk7XG5cdGlmKFhNTE5TX21haW4uaW5kZXhPZih3Yi54bWxucykgPT09IC0xKSB0aHJvdyBuZXcgRXJyb3IoXCJVbmtub3duIE5hbWVzcGFjZTogXCIgKyB3Yi54bWxucyk7XG5cblx0cGFyc2Vfd2JfZGVmYXVsdHMod2IpO1xuXG5cdHJldHVybiB3Yjtcbn1cblxuZnVuY3Rpb24gd3JpdGVfd2JfeG1sKHdiLyo6V29ya2Jvb2sqLy8qOjosIG9wdHM6P1dyaXRlT3B0cyovKS8qOnN0cmluZyovIHtcblx0dmFyIG8gPSBbWE1MX0hFQURFUl07XG5cdG9bby5sZW5ndGhdID0gd3JpdGV4dGFnKCd3b3JrYm9vaycsIG51bGwsIHtcblx0XHQneG1sbnMnOiBYTUxOU19tYWluWzBdLFxuXHRcdC8vJ3htbG5zOm14JzogWE1MTlMubXgsXG5cdFx0Ly8neG1sbnM6cyc6IFhNTE5TX21haW5bMF0sXG5cdFx0J3htbG5zOnInOiBYTUxOUy5yXG5cdH0pO1xuXG5cdHZhciB3cml0ZV9uYW1lcyA9ICh3Yi5Xb3JrYm9vayAmJiAod2IuV29ya2Jvb2suTmFtZXN8fFtdKS5sZW5ndGggPiAwKTtcblxuXHQvKiBmaWxlVmVyc2lvbiAqL1xuXHQvKiBmaWxlU2hhcmluZyAqL1xuXG5cdHZhciB3b3JrYm9va1ByLyo6YW55Ki8gPSAoe2NvZGVOYW1lOlwiVGhpc1dvcmtib29rXCJ9Lyo6YW55Ki8pO1xuXHRpZih3Yi5Xb3JrYm9vayAmJiB3Yi5Xb3JrYm9vay5XQlByb3BzKSB7XG5cdFx0V0JQcm9wc0RlZi5mb3JFYWNoKGZ1bmN0aW9uKHgpIHtcblx0XHRcdC8qOjogaWYoIXdiLldvcmtib29rIHx8ICF3Yi5Xb3JrYm9vay5XQlByb3BzKSB0aHJvdyBcInVucmVhY2hhYmxlXCI7ICovXG5cdFx0XHRpZigod2IuV29ya2Jvb2suV0JQcm9wc1t4WzBdXS8qOmFueSovKSA9PSBudWxsKSByZXR1cm47XG5cdFx0XHRpZigod2IuV29ya2Jvb2suV0JQcm9wc1t4WzBdXS8qOmFueSovKSA9PSB4WzFdKSByZXR1cm47XG5cdFx0XHR3b3JrYm9va1ByW3hbMF1dID0gKHdiLldvcmtib29rLldCUHJvcHNbeFswXV0vKjphbnkqLyk7XG5cdFx0fSk7XG5cdFx0Lyo6OiBpZighd2IuV29ya2Jvb2sgfHwgIXdiLldvcmtib29rLldCUHJvcHMpIHRocm93IFwidW5yZWFjaGFibGVcIjsgKi9cblx0XHRpZih3Yi5Xb3JrYm9vay5XQlByb3BzLkNvZGVOYW1lKSB7IHdvcmtib29rUHIuY29kZU5hbWUgPSB3Yi5Xb3JrYm9vay5XQlByb3BzLkNvZGVOYW1lOyBkZWxldGUgd29ya2Jvb2tQci5Db2RlTmFtZTsgfVxuXHR9XG5cdG9bby5sZW5ndGhdID0gKHdyaXRleHRhZygnd29ya2Jvb2tQcicsIG51bGwsIHdvcmtib29rUHIpKTtcblxuXHQvKiB3b3JrYm9va1Byb3RlY3Rpb24gKi9cblxuXHR2YXIgc2hlZXRzID0gd2IuV29ya2Jvb2sgJiYgd2IuV29ya2Jvb2suU2hlZXRzIHx8IFtdO1xuXHR2YXIgaSA9IDA7XG5cblx0LyogYm9va1ZpZXdzIG9ubHkgd3JpdHRlbiBpZiBmaXJzdCB3b3Jrc2hlZXQgaXMgaGlkZGVuICovXG5cdGlmKHNoZWV0cyAmJiBzaGVldHNbMF0gJiYgISFzaGVldHNbMF0uSGlkZGVuKSB7XG5cdFx0b1tvLmxlbmd0aF0gPSBcIjxib29rVmlld3M+XCI7XG5cdFx0Zm9yKGkgPSAwOyBpICE9IHdiLlNoZWV0TmFtZXMubGVuZ3RoOyArK2kpIHtcblx0XHRcdGlmKCFzaGVldHNbaV0pIGJyZWFrO1xuXHRcdFx0aWYoIXNoZWV0c1tpXS5IaWRkZW4pIGJyZWFrO1xuXHRcdH1cblx0XHRpZihpID09IHdiLlNoZWV0TmFtZXMubGVuZ3RoKSBpID0gMDtcblx0XHRvW28ubGVuZ3RoXSA9ICc8d29ya2Jvb2tWaWV3IGZpcnN0U2hlZXQ9XCInICsgaSArICdcIiBhY3RpdmVUYWI9XCInICsgaSArICdcIi8+Jztcblx0XHRvW28ubGVuZ3RoXSA9IFwiPC9ib29rVmlld3M+XCI7XG5cdH1cblxuXHRvW28ubGVuZ3RoXSA9IFwiPHNoZWV0cz5cIjtcblx0Zm9yKGkgPSAwOyBpICE9IHdiLlNoZWV0TmFtZXMubGVuZ3RoOyArK2kpIHtcblx0XHR2YXIgc2h0ID0gKHtuYW1lOmVzY2FwZXhtbCh3Yi5TaGVldE5hbWVzW2ldLnNsaWNlKDAsMzEpKX0vKjphbnkqLyk7XG5cdFx0c2h0LnNoZWV0SWQgPSBcIlwiKyhpKzEpO1xuXHRcdHNodFtcInI6aWRcIl0gPSBcInJJZFwiKyhpKzEpO1xuXHRcdGlmKHNoZWV0c1tpXSkgc3dpdGNoKHNoZWV0c1tpXS5IaWRkZW4pIHtcblx0XHRcdGNhc2UgMTogc2h0LnN0YXRlID0gXCJoaWRkZW5cIjsgYnJlYWs7XG5cdFx0XHRjYXNlIDI6IHNodC5zdGF0ZSA9IFwidmVyeUhpZGRlblwiOyBicmVhaztcblx0XHR9XG5cdFx0b1tvLmxlbmd0aF0gPSAod3JpdGV4dGFnKCdzaGVldCcsbnVsbCxzaHQpKTtcblx0fVxuXHRvW28ubGVuZ3RoXSA9IFwiPC9zaGVldHM+XCI7XG5cblx0LyogZnVuY3Rpb25Hcm91cHMgKi9cblx0LyogZXh0ZXJuYWxSZWZlcmVuY2VzICovXG5cblx0aWYod3JpdGVfbmFtZXMpIHtcblx0XHRvW28ubGVuZ3RoXSA9IFwiPGRlZmluZWROYW1lcz5cIjtcblx0XHRpZih3Yi5Xb3JrYm9vayAmJiB3Yi5Xb3JrYm9vay5OYW1lcykgd2IuV29ya2Jvb2suTmFtZXMuZm9yRWFjaChmdW5jdGlvbihuKSB7XG5cdFx0XHR2YXIgZC8qOmFueSovID0ge25hbWU6bi5OYW1lfTtcblx0XHRcdGlmKG4uQ29tbWVudCkgZC5jb21tZW50ID0gbi5Db21tZW50O1xuXHRcdFx0aWYobi5TaGVldCAhPSBudWxsKSBkLmxvY2FsU2hlZXRJZCA9IFwiXCIrbi5TaGVldDtcblx0XHRcdGlmKG4uSGlkZGVuKSBkLmhpZGRlbiA9IFwiMVwiO1xuXHRcdFx0aWYoIW4uUmVmKSByZXR1cm47XG5cdFx0XHRvW28ubGVuZ3RoXSA9IHdyaXRleHRhZygnZGVmaW5lZE5hbWUnLCBlc2NhcGV4bWwobi5SZWYpLCBkKTtcblx0XHR9KTtcblx0XHRvW28ubGVuZ3RoXSA9IFwiPC9kZWZpbmVkTmFtZXM+XCI7XG5cdH1cblxuXHQvKiBjYWxjUHIgKi9cblx0Lyogb2xlU2l6ZSAqL1xuXHQvKiBjdXN0b21Xb3JrYm9va1ZpZXdzICovXG5cdC8qIHBpdm90Q2FjaGVzICovXG5cdC8qIHNtYXJ0VGFnUHIgKi9cblx0Lyogc21hcnRUYWdUeXBlcyAqL1xuXHQvKiB3ZWJQdWJsaXNoaW5nICovXG5cdC8qIGZpbGVSZWNvdmVyeVByICovXG5cdC8qIHdlYlB1Ymxpc2hPYmplY3RzICovXG5cdC8qIGV4dExzdCAqL1xuXG5cdGlmKG8ubGVuZ3RoPjIpeyBvW28ubGVuZ3RoXSA9ICc8L3dvcmtib29rPic7IG9bMV09b1sxXS5yZXBsYWNlKFwiLz5cIixcIj5cIik7IH1cblx0cmV0dXJuIG8uam9pbihcIlwiKTtcbn1cbi8qIFtNUy1YTFNCXSAyLjQuMzA0IEJydEJ1bmRsZVNoICovXG5mdW5jdGlvbiBwYXJzZV9CcnRCdW5kbGVTaChkYXRhLCBsZW5ndGgvKjpudW1iZXIqLykge1xuXHR2YXIgeiA9IHt9O1xuXHR6LkhpZGRlbiA9IGRhdGEucmVhZF9zaGlmdCg0KTsgLy9oc1N0YXRlIFNUX1NoZWV0U3RhdGVcblx0ei5pVGFiSUQgPSBkYXRhLnJlYWRfc2hpZnQoNCk7XG5cdHouc3RyUmVsSUQgPSBwYXJzZV9SZWxJRChkYXRhLGxlbmd0aC04KTtcblx0ei5uYW1lID0gcGFyc2VfWExXaWRlU3RyaW5nKGRhdGEpO1xuXHRyZXR1cm4gejtcbn1cbmZ1bmN0aW9uIHdyaXRlX0JydEJ1bmRsZVNoKGRhdGEsIG8pIHtcblx0aWYoIW8pIG8gPSBuZXdfYnVmKDEyNyk7XG5cdG8ud3JpdGVfc2hpZnQoNCwgZGF0YS5IaWRkZW4pO1xuXHRvLndyaXRlX3NoaWZ0KDQsIGRhdGEuaVRhYklEKTtcblx0d3JpdGVfUmVsSUQoZGF0YS5zdHJSZWxJRCwgbyk7XG5cdHdyaXRlX1hMV2lkZVN0cmluZyhkYXRhLm5hbWUuc2xpY2UoMCwzMSksIG8pO1xuXHRyZXR1cm4gby5sZW5ndGggPiBvLmwgPyBvLnNsaWNlKDAsIG8ubCkgOiBvO1xufVxuXG4vKiBbTVMtWExTQl0gMi40LjgxNSBCcnRXYlByb3AgKi9cbmZ1bmN0aW9uIHBhcnNlX0JydFdiUHJvcChkYXRhLCBsZW5ndGgpLyo6V0JQcm9wcyovIHtcblx0dmFyIG8vKjpXQlByb3BzKi8gPSAoe30vKjphbnkqLyk7XG5cdHZhciBmbGFncyA9IGRhdGEucmVhZF9zaGlmdCg0KTtcblx0by5kZWZhdWx0VGhlbWVWZXJzaW9uID0gZGF0YS5yZWFkX3NoaWZ0KDQpO1xuXHR2YXIgc3RyTmFtZSA9IChsZW5ndGggPiA4KSA/IHBhcnNlX1hMV2lkZVN0cmluZyhkYXRhKSA6IFwiXCI7XG5cdGlmKHN0ck5hbWUubGVuZ3RoID4gMCkgby5Db2RlTmFtZSA9IHN0ck5hbWU7XG5cdG8uYXV0b0NvbXByZXNzUGljdHVyZXMgPSAhIShmbGFncyAmIDB4MTAwMDApO1xuXHRvLmJhY2t1cEZpbGUgPSAhIShmbGFncyAmIDB4NDApO1xuXHRvLmNoZWNrQ29tcGF0aWJpbGl0eSA9ICEhKGZsYWdzICYgMHgxMDAwKTtcblx0by5kYXRlMTkwNCA9ICEhKGZsYWdzICYgMHgwMSk7XG5cdG8uZmlsdGVyUHJpdmFjeSA9ICEhKGZsYWdzICYgMHgwOCk7XG5cdG8uaGlkZVBpdm90RmllbGRMaXN0ID0gISEoZmxhZ3MgJiAweDQwMCk7XG5cdG8ucHJvbXB0ZWRTb2x1dGlvbnMgPSAhIShmbGFncyAmIDB4MTApO1xuXHRvLnB1Ymxpc2hJdGVtcyA9ICEhKGZsYWdzICYgMHg4MDApO1xuXHRvLnJlZnJlc2hBbGxDb25uZWN0aW9ucyA9ICEhKGZsYWdzICYgMHg0MDAwMCk7XG5cdG8uc2F2ZUV4dGVybmFsTGlua1ZhbHVlcyA9ICEhKGZsYWdzICYgMHg4MCk7XG5cdG8uc2hvd0JvcmRlclVuc2VsZWN0ZWRUYWJsZXMgPSAhIShmbGFncyAmIDB4MDQpO1xuXHRvLnNob3dJbmtBbm5vdGF0aW9uID0gISEoZmxhZ3MgJiAweDIwKTtcblx0by5zaG93T2JqZWN0cyA9IFtcImFsbFwiLCBcInBsYWNlaG9sZGVyc1wiLCBcIm5vbmVcIl1bKGZsYWdzID4+IDEzKSAmIDB4MDNdO1xuXHRvLnNob3dQaXZvdENoYXJ0RmlsdGVyID0gISEoZmxhZ3MgJiAweDgwMDApO1xuXHRvLnVwZGF0ZUxpbmtzID0gW1widXNlclNldFwiLCBcIm5ldmVyXCIsIFwiYWx3YXlzXCJdWyhmbGFncyA+PiA4KSAmIDB4MDNdO1xuXHRyZXR1cm4gbztcbn1cbmZ1bmN0aW9uIHdyaXRlX0JydFdiUHJvcChkYXRhLyo6P1dCUHJvcHMqLywgbykge1xuXHRpZighbykgbyA9IG5ld19idWYoNzIpO1xuXHR2YXIgZmxhZ3MgPSAwO1xuXHRpZihkYXRhKSB7XG5cdFx0LyogVE9ETzogbWlycm9yIHBhcnNlX0JydFdiUHJvcCBmaWVsZHMgKi9cblx0XHRpZihkYXRhLmZpbHRlclByaXZhY3kpIGZsYWdzIHw9IDB4MDg7XG5cdH1cblx0by53cml0ZV9zaGlmdCg0LCBmbGFncyk7XG5cdG8ud3JpdGVfc2hpZnQoNCwgMCk7XG5cdHdyaXRlX1hMU0JDb2RlTmFtZShkYXRhICYmIGRhdGEuQ29kZU5hbWUgfHwgXCJUaGlzV29ya2Jvb2tcIiwgbyk7XG5cdHJldHVybiBvLnNsaWNlKDAsIG8ubCk7XG59XG5cbmZ1bmN0aW9uIHBhcnNlX0JydEZSVEFyY2hJRCQoZGF0YSwgbGVuZ3RoKSB7XG5cdHZhciBvID0ge307XG5cdGRhdGEucmVhZF9zaGlmdCg0KTtcblx0by5BcmNoSUQgPSBkYXRhLnJlYWRfc2hpZnQoNCk7XG5cdGRhdGEubCArPSBsZW5ndGggLSA4O1xuXHRyZXR1cm4gbztcbn1cblxuLyogW01TLVhMU0JdIDIuNC42ODcgQnJ0TmFtZSAqL1xuZnVuY3Rpb24gcGFyc2VfQnJ0TmFtZShkYXRhLCBsZW5ndGgsIG9wdHMpIHtcblx0dmFyIGVuZCA9IGRhdGEubCArIGxlbmd0aDtcblx0ZGF0YS5sICs9IDQ7IC8vdmFyIGZsYWdzID0gZGF0YS5yZWFkX3NoaWZ0KDQpO1xuXHRkYXRhLmwgKz0gMTsgLy92YXIgY2hLZXkgPSBkYXRhLnJlYWRfc2hpZnQoMSk7XG5cdHZhciBpdGFiID0gZGF0YS5yZWFkX3NoaWZ0KDQpO1xuXHR2YXIgbmFtZSA9IHBhcnNlX1hMTmFtZVdpZGVTdHJpbmcoZGF0YSk7XG5cdHZhciBmb3JtdWxhID0gcGFyc2VfWExTQk5hbWVQYXJzZWRGb3JtdWxhKGRhdGEsIDAsIG9wdHMpO1xuXHR2YXIgY29tbWVudCA9IHBhcnNlX1hMTnVsbGFibGVXaWRlU3RyaW5nKGRhdGEpO1xuXHQvL2lmKDAgLyogZlByb2MgKi8pIHtcblx0XHQvLyB1bnVzZWRzdHJpbmcxOiBYTE51bGxhYmxlV2lkZVN0cmluZ1xuXHRcdC8vIGRlc2NyaXB0aW9uOiBYTE51bGxhYmxlV2lkZVN0cmluZ1xuXHRcdC8vIGhlbHBUb3BpYzogWExOdWxsYWJsZVdpZGVTdHJpbmdcblx0XHQvLyB1bnVzZWRzdHJpbmcyOiBYTE51bGxhYmxlV2lkZVN0cmluZ1xuXHQvL31cblx0ZGF0YS5sID0gZW5kO1xuXHR2YXIgb3V0ID0gKHtOYW1lOm5hbWUsIFB0Zzpmb3JtdWxhfS8qOmFueSovKTtcblx0aWYoaXRhYiA8IDB4RkZGRkZGRikgb3V0LlNoZWV0ID0gaXRhYjtcblx0aWYoY29tbWVudCkgb3V0LkNvbW1lbnQgPSBjb21tZW50O1xuXHRyZXR1cm4gb3V0O1xufVxuXG4vKiBbTVMtWExTQl0gMi4xLjcuNjEgV29ya2Jvb2sgKi9cbmZ1bmN0aW9uIHBhcnNlX3diX2JpbihkYXRhLCBvcHRzKS8qOldvcmtib29rRmlsZSovIHtcblx0dmFyIHdiID0geyBBcHBWZXJzaW9uOnt9LCBXQlByb3BzOnt9LCBXQlZpZXc6W10sIFNoZWV0czpbXSwgQ2FsY1ByOnt9LCB4bWxuczogXCJcIiB9O1xuXHR2YXIgc3RhdGUvKjpBcnJheTxzdHJpbmc+Ki8gPSBbXTtcblx0dmFyIHBhc3MgPSBmYWxzZTtcblxuXHRpZighb3B0cykgb3B0cyA9IHt9O1xuXHRvcHRzLmJpZmYgPSAxMjtcblxuXHR2YXIgTmFtZXMgPSBbXTtcblx0dmFyIHN1cGJvb2tzID0gKFtbXV0vKjphbnkqLyk7XG5cdHN1cGJvb2tzLlNoZWV0TmFtZXMgPSBbXTtcblx0c3VwYm9va3MuWFRJID0gW107XG5cblx0WExTQlJlY29yZEVudW1bMHgwMDEwXSA9IHsgbjpcIkJydEZSVEFyY2hJRCRcIiwgZjpwYXJzZV9CcnRGUlRBcmNoSUQkIH07XG5cblx0cmVjb3JkaG9wcGVyKGRhdGEsIGZ1bmN0aW9uIGhvcHBlcl93Yih2YWwsIFIsIFJUKSB7XG5cdFx0c3dpdGNoKFJUKSB7XG5cdFx0XHRjYXNlIDB4MDA5QzogLyogJ0JydEJ1bmRsZVNoJyAqL1xuXHRcdFx0XHRzdXBib29rcy5TaGVldE5hbWVzLnB1c2godmFsLm5hbWUpO1xuXHRcdFx0XHR3Yi5TaGVldHMucHVzaCh2YWwpOyBicmVhaztcblxuXHRcdFx0Y2FzZSAweDAwOTk6IC8qICdCcnRXYlByb3AnICovXG5cdFx0XHRcdHdiLldCUHJvcHMgPSB2YWw7IGJyZWFrO1xuXG5cdFx0XHRjYXNlIDB4MDAyNzogLyogJ0JydE5hbWUnICovXG5cdFx0XHRcdGlmKHZhbC5TaGVldCAhPSBudWxsKSBvcHRzLlNJRCA9IHZhbC5TaGVldDtcblx0XHRcdFx0dmFsLlJlZiA9IHN0cmluZ2lmeV9mb3JtdWxhKHZhbC5QdGcsIG51bGwsIG51bGwsIHN1cGJvb2tzLCBvcHRzKTtcblx0XHRcdFx0ZGVsZXRlIG9wdHMuU0lEO1xuXHRcdFx0XHRkZWxldGUgdmFsLlB0Zztcblx0XHRcdFx0TmFtZXMucHVzaCh2YWwpO1xuXHRcdFx0XHRicmVhaztcblx0XHRcdGNhc2UgMHgwNDBDOiAvKiAnQnJ0TmFtZUV4dCcgKi8gYnJlYWs7XG5cblx0XHRcdGNhc2UgMHgwMTY1OiAvKiAnQnJ0U3VwU2VsZicgKi9cblx0XHRcdGNhc2UgMHgwMTY2OiAvKiAnQnJ0U3VwU2FtZScgKi9cblx0XHRcdGNhc2UgMHgwMTYzOiAvKiAnQnJ0U3VwQm9va1NyYycgKi9cblx0XHRcdGNhc2UgMHgwMjlCOiAvKiAnQnJ0U3VwQWRkaW4nICovXG5cdFx0XHRcdGlmKCFzdXBib29rc1swXS5sZW5ndGgpIHN1cGJvb2tzWzBdID0gW1JULCB2YWxdO1xuXHRcdFx0XHRlbHNlIHN1cGJvb2tzLnB1c2goW1JULCB2YWxdKTtcblx0XHRcdFx0c3VwYm9va3Nbc3VwYm9va3MubGVuZ3RoIC0gMV0uWFRJID0gW107XG5cdFx0XHRcdGJyZWFrO1xuXHRcdFx0Y2FzZSAweDAxNkE6IC8qICdCcnRFeHRlcm5TaGVldCcgKi9cblx0XHRcdFx0aWYoc3VwYm9va3MubGVuZ3RoID09PSAwKSB7IHN1cGJvb2tzWzBdID0gW107IHN1cGJvb2tzWzBdLlhUSSA9IFtdOyB9XG5cdFx0XHRcdHN1cGJvb2tzW3N1cGJvb2tzLmxlbmd0aCAtIDFdLlhUSSA9IHN1cGJvb2tzW3N1cGJvb2tzLmxlbmd0aCAtIDFdLlhUSS5jb25jYXQodmFsKTtcblx0XHRcdFx0c3VwYm9va3MuWFRJID0gc3VwYm9va3MuWFRJLmNvbmNhdCh2YWwpO1xuXHRcdFx0XHRicmVhaztcblx0XHRcdGNhc2UgMHgwMTY5OiAvKiAnQnJ0UGxhY2Vob2xkZXJOYW1lJyAqL1xuXHRcdFx0XHRicmVhaztcblxuXHRcdFx0Y2FzZSAweDA4MTc6IC8qICdCcnRBYnNQYXRoMTUnICovXG5cdFx0XHRjYXNlIDB4MDA5RTogLyogJ0JydEJvb2tWaWV3JyAqL1xuXHRcdFx0Y2FzZSAweDAwOEY6IC8qICdCcnRCZWdpbkJ1bmRsZVNocycgKi9cblx0XHRcdGNhc2UgMHgwMjk4OiAvKiAnQnJ0QmVnaW5Gbkdyb3VwJyAqL1xuXHRcdFx0Y2FzZSAweDAxNjE6IC8qICdCcnRCZWdpbkV4dGVybmFscycgKi9cblx0XHRcdFx0YnJlYWs7XG5cblx0XHRcdC8qIGNhc2UgJ0JydE1vZGVsVGltZUdyb3VwaW5nQ2FsY0NvbCcgKi9cblx0XHRcdGNhc2UgMHgwQzAwOiAvKiAnQnJ0VWlkJyAqL1xuXHRcdFx0Y2FzZSAweDBDMDE6IC8qICdCcnRSZXZpc2lvblB0cicgKi9cblx0XHRcdGNhc2UgMHgwMjE2OiAvKiAnQnJ0Qm9va1Byb3RlY3Rpb24nICovXG5cdFx0XHRjYXNlIDB4MDJBNTogLyogJ0JydEJvb2tQcm90ZWN0aW9uSXNvJyAqL1xuXHRcdFx0Y2FzZSAweDAwOUQ6IC8qICdCcnRDYWxjUHJvcCcgKi9cblx0XHRcdGNhc2UgMHgwMjYyOiAvKiAnQnJ0Q3Jhc2hSZWNFcnInICovXG5cdFx0XHRjYXNlIDB4MDgwMjogLyogJ0JydERlY291cGxlZFBpdm90Q2FjaGVJRCcgKi9cblx0XHRcdGNhc2UgMHgwMDlCOiAvKiAnQnJ0RmlsZVJlY292ZXInICovXG5cdFx0XHRjYXNlIDB4MDIyNDogLyogJ0JydEZpbGVTaGFyaW5nJyAqL1xuXHRcdFx0Y2FzZSAweDAyQTQ6IC8qICdCcnRGaWxlU2hhcmluZ0lzbycgKi9cblx0XHRcdGNhc2UgMHgwMDgwOiAvKiAnQnJ0RmlsZVZlcnNpb24nICovXG5cdFx0XHRjYXNlIDB4MDI5OTogLyogJ0JydEZuR3JvdXAnICovXG5cdFx0XHRjYXNlIDB4MDg1MDogLyogJ0JydE1vZGVsUmVsYXRpb25zaGlwJyAqL1xuXHRcdFx0Y2FzZSAweDA4NEQ6IC8qICdCcnRNb2RlbFRhYmxlJyAqL1xuXHRcdFx0Y2FzZSAweDAyMjU6IC8qICdCcnRPbGVTaXplJyAqL1xuXHRcdFx0Y2FzZSAweDA4MDU6IC8qICdCcnRQaXZvdFRhYmxlUmVmJyAqL1xuXHRcdFx0Y2FzZSAweDAyNTQ6IC8qICdCcnRTbWFydFRhZ1R5cGUnICovXG5cdFx0XHRjYXNlIDB4MDgxQzogLyogJ0JydFRhYmxlU2xpY2VyQ2FjaGVJRCcgKi9cblx0XHRcdGNhc2UgMHgwODFCOiAvKiAnQnJ0VGFibGVTbGljZXJDYWNoZUlEcycgKi9cblx0XHRcdGNhc2UgMHgwODIyOiAvKiAnQnJ0VGltZWxpbmVDYWNoZVBpdm90Q2FjaGVJRCcgKi9cblx0XHRcdGNhc2UgMHgwMThEOiAvKiAnQnJ0VXNlckJvb2tWaWV3JyAqL1xuXHRcdFx0Y2FzZSAweDAwOUE6IC8qICdCcnRXYkZhY3RvaWQnICovXG5cdFx0XHRjYXNlIDB4MDQ1RDogLyogJ0JydFdiUHJvcDE0JyAqL1xuXHRcdFx0Y2FzZSAweDAyMjk6IC8qICdCcnRXZWJPcHQnICovXG5cdFx0XHRjYXNlIDB4MDgyQjogLyogJ0JydFdvcmtCb29rUHIxNScgKi9cblx0XHRcdFx0YnJlYWs7XG5cblx0XHRcdGNhc2UgMHgwMDIzOiAvKiAnQnJ0RlJUQmVnaW4nICovXG5cdFx0XHRcdHN0YXRlLnB1c2goUlQpOyBwYXNzID0gdHJ1ZTsgYnJlYWs7XG5cdFx0XHRjYXNlIDB4MDAyNDogLyogJ0JydEZSVEVuZCcgKi9cblx0XHRcdFx0c3RhdGUucG9wKCk7IHBhc3MgPSBmYWxzZTsgYnJlYWs7XG5cdFx0XHRjYXNlIDB4MDAyNTogLyogJ0JydEFDQmVnaW4nICovXG5cdFx0XHRcdHN0YXRlLnB1c2goUlQpOyBwYXNzID0gdHJ1ZTsgYnJlYWs7XG5cdFx0XHRjYXNlIDB4MDAyNjogLyogJ0JydEFDRW5kJyAqL1xuXHRcdFx0XHRzdGF0ZS5wb3AoKTsgcGFzcyA9IGZhbHNlOyBicmVhaztcblxuXHRcdFx0Y2FzZSAweDAwMTA6IC8qICdCcnRGUlRBcmNoSUQkJyAqLyBicmVhaztcblxuXHRcdFx0ZGVmYXVsdDpcblx0XHRcdFx0aWYoUi5UKXsvKiBlbXB0eSAqL31cblx0XHRcdFx0ZWxzZSBpZighcGFzcyB8fCAob3B0cy5XVEYgJiYgc3RhdGVbc3RhdGUubGVuZ3RoLTFdICE9IDB4MDAyNSAvKiBCcnRBQ0JlZ2luICovICYmIHN0YXRlW3N0YXRlLmxlbmd0aC0xXSAhPSAweDAwMjMgLyogQnJ0RlJUQmVnaW4gKi8pKSB0aHJvdyBuZXcgRXJyb3IoXCJVbmV4cGVjdGVkIHJlY29yZCAweFwiICsgUlQudG9TdHJpbmcoMTYpKTtcblx0XHR9XG5cdH0sIG9wdHMpO1xuXG5cdHBhcnNlX3diX2RlZmF1bHRzKHdiKTtcblxuXHQvLyAkRmxvd0lnbm9yZVxuXHR3Yi5OYW1lcyA9IE5hbWVzO1xuXG5cdCh3Yi8qOmFueSovKS5zdXBib29rcyA9IHN1cGJvb2tzO1xuXHRyZXR1cm4gd2I7XG59XG5cbmZ1bmN0aW9uIHdyaXRlX0JVTkRMRVNIUyhiYSwgd2IvKjo6LCBvcHRzKi8pIHtcblx0d3JpdGVfcmVjb3JkKGJhLCAweDAwOEYgLyogQnJ0QmVnaW5CdW5kbGVTaHMgKi8pO1xuXHRmb3IodmFyIGlkeCA9IDA7IGlkeCAhPSB3Yi5TaGVldE5hbWVzLmxlbmd0aDsgKytpZHgpIHtcblx0XHR2YXIgdml6ID0gd2IuV29ya2Jvb2sgJiYgd2IuV29ya2Jvb2suU2hlZXRzICYmIHdiLldvcmtib29rLlNoZWV0c1tpZHhdICYmIHdiLldvcmtib29rLlNoZWV0c1tpZHhdLkhpZGRlbiB8fCAwO1xuXHRcdHZhciBkID0geyBIaWRkZW46IHZpeiwgaVRhYklEOiBpZHgrMSwgc3RyUmVsSUQ6ICdySWQnICsgKGlkeCsxKSwgbmFtZTogd2IuU2hlZXROYW1lc1tpZHhdIH07XG5cdFx0d3JpdGVfcmVjb3JkKGJhLCAweDAwOUMgLyogQnJ0QnVuZGxlU2ggKi8sIHdyaXRlX0JydEJ1bmRsZVNoKGQpKTtcblx0fVxuXHR3cml0ZV9yZWNvcmQoYmEsIDB4MDA5MCAvKiBCcnRFbmRCdW5kbGVTaHMgKi8pO1xufVxuXG4vKiBbTVMtWExTQl0gMi40LjY0OSBCcnRGaWxlVmVyc2lvbiAqL1xuZnVuY3Rpb24gd3JpdGVfQnJ0RmlsZVZlcnNpb24oZGF0YSwgbykge1xuXHRpZighbykgbyA9IG5ld19idWYoMTI3KTtcblx0Zm9yKHZhciBpID0gMDsgaSAhPSA0OyArK2kpIG8ud3JpdGVfc2hpZnQoNCwgMCk7XG5cdHdyaXRlX1hMV2lkZVN0cmluZyhcIlNoZWV0SlNcIiwgbyk7XG5cdHdyaXRlX1hMV2lkZVN0cmluZyhYTFNYLnZlcnNpb24sIG8pO1xuXHR3cml0ZV9YTFdpZGVTdHJpbmcoWExTWC52ZXJzaW9uLCBvKTtcblx0d3JpdGVfWExXaWRlU3RyaW5nKFwiNzI2MlwiLCBvKTtcblx0cmV0dXJuIG8ubGVuZ3RoID4gby5sID8gby5zbGljZSgwLCBvLmwpIDogbztcbn1cblxuLyogW01TLVhMU0JdIDIuNC4zMDEgQnJ0Qm9va1ZpZXcgKi9cbmZ1bmN0aW9uIHdyaXRlX0JydEJvb2tWaWV3KGlkeCwgbykge1xuXHRpZighbykgbyA9IG5ld19idWYoMjkpO1xuXHRvLndyaXRlX3NoaWZ0KC00LCAwKTtcblx0by53cml0ZV9zaGlmdCgtNCwgNDYwKTtcblx0by53cml0ZV9zaGlmdCg0LCAgMjg4MDApO1xuXHRvLndyaXRlX3NoaWZ0KDQsICAxNzYwMCk7XG5cdG8ud3JpdGVfc2hpZnQoNCwgIDUwMCk7XG5cdG8ud3JpdGVfc2hpZnQoNCwgIGlkeCk7XG5cdG8ud3JpdGVfc2hpZnQoNCwgIGlkeCk7XG5cdHZhciBmbGFncyA9IDB4Nzg7XG5cdG8ud3JpdGVfc2hpZnQoMSwgIGZsYWdzKTtcblx0cmV0dXJuIG8ubGVuZ3RoID4gby5sID8gby5zbGljZSgwLCBvLmwpIDogbztcbn1cblxuZnVuY3Rpb24gd3JpdGVfQk9PS1ZJRVdTKGJhLCB3Yi8qOjosIG9wdHMqLykge1xuXHQvKiByZXF1aXJlZCBpZiBoaWRkZW4gdGFiIGFwcGVhcnMgYmVmb3JlIHZpc2libGUgdGFiICovXG5cdGlmKCF3Yi5Xb3JrYm9vayB8fCAhd2IuV29ya2Jvb2suU2hlZXRzKSByZXR1cm47XG5cdHZhciBzaGVldHMgPSB3Yi5Xb3JrYm9vay5TaGVldHM7XG5cdHZhciBpID0gMCwgdmlzdGFiID0gLTEsIGhpZGRlbiA9IC0xO1xuXHRmb3IoOyBpIDwgc2hlZXRzLmxlbmd0aDsgKytpKSB7XG5cdFx0aWYoIXNoZWV0c1tpXSB8fCAhc2hlZXRzW2ldLkhpZGRlbiAmJiB2aXN0YWIgPT0gLTEpIHZpc3RhYiA9IGk7XG5cdFx0ZWxzZSBpZihzaGVldHNbaV0uSGlkZGVuID09IDEgJiYgaGlkZGVuID09IC0xKSBoaWRkZW4gPSBpO1xuXHR9XG5cdGlmKGhpZGRlbiA+IHZpc3RhYikgcmV0dXJuO1xuXHR3cml0ZV9yZWNvcmQoYmEsIDB4MDA4NyAvKiBCcnRCZWdpbkJvb2tWaWV3cyAqLyk7XG5cdHdyaXRlX3JlY29yZChiYSwgMHgwMDlFIC8qIEJydEJvb2tWaWV3ICovLCB3cml0ZV9CcnRCb29rVmlldyh2aXN0YWIpKTtcblx0LyogMSooQnJ0Qm9va1ZpZXcgKkZSVCkgKi9cblx0d3JpdGVfcmVjb3JkKGJhLCAweDAwODggLyogQnJ0RW5kQm9va1ZpZXdzICovKTtcbn1cblxuLyogW01TLVhMU0JdIDIuNC4zMDUgQnJ0Q2FsY1Byb3AgKi9cbi8qZnVuY3Rpb24gd3JpdGVfQnJ0Q2FsY1Byb3AoZGF0YSwgbykge1xuXHRpZighbykgbyA9IG5ld19idWYoMjYpO1xuXHRvLndyaXRlX3NoaWZ0KDQsMCk7IC8vIGZvcmNlIHJlY2FsY1xuXHRvLndyaXRlX3NoaWZ0KDQsMSk7XG5cdG8ud3JpdGVfc2hpZnQoNCwwKTtcblx0d3JpdGVfWG51bSgwLCBvKTtcblx0by53cml0ZV9zaGlmdCgtNCwgMTAyMyk7XG5cdG8ud3JpdGVfc2hpZnQoMSwgMHgzMyk7XG5cdG8ud3JpdGVfc2hpZnQoMSwgMHgwMCk7XG5cdHJldHVybiBvO1xufSovXG5cbi8qIFtNUy1YTFNCXSAyLjQuNjQ2IEJydEZpbGVSZWNvdmVyICovXG4vKmZ1bmN0aW9uIHdyaXRlX0JydEZpbGVSZWNvdmVyKGRhdGEsIG8pIHtcblx0aWYoIW8pIG8gPSBuZXdfYnVmKDEpO1xuXHRvLndyaXRlX3NoaWZ0KDEsMCk7XG5cdHJldHVybiBvO1xufSovXG5cbi8qIFtNUy1YTFNCXSAyLjEuNy42MSBXb3JrYm9vayAqL1xuZnVuY3Rpb24gd3JpdGVfd2JfYmluKHdiLCBvcHRzKSB7XG5cdHZhciBiYSA9IGJ1Zl9hcnJheSgpO1xuXHR3cml0ZV9yZWNvcmQoYmEsIDB4MDA4MyAvKiBCcnRCZWdpbkJvb2sgKi8pO1xuXHR3cml0ZV9yZWNvcmQoYmEsIDB4MDA4MCAvKiBCcnRGaWxlVmVyc2lvbiAqLywgd3JpdGVfQnJ0RmlsZVZlcnNpb24oKSk7XG5cdC8qIFtbQnJ0RmlsZVNoYXJpbmdJc29dIEJydEZpbGVTaGFyaW5nXSAqL1xuXHR3cml0ZV9yZWNvcmQoYmEsIDB4MDA5OSAvKiBCcnRXYlByb3AgKi8sIHdyaXRlX0JydFdiUHJvcCh3Yi5Xb3JrYm9vayAmJiB3Yi5Xb3JrYm9vay5XQlByb3BzIHx8IG51bGwpKTtcblx0LyogW0FDQUJTUEFUSF0gKi9cblx0LyogW1tCcnRCb29rUHJvdGVjdGlvbklzb10gQnJ0Qm9va1Byb3RlY3Rpb25dICovXG5cdHdyaXRlX0JPT0tWSUVXUyhiYSwgd2IsIG9wdHMpO1xuXHR3cml0ZV9CVU5ETEVTSFMoYmEsIHdiLCBvcHRzKTtcblx0LyogW0ZOR1JPVVBdICovXG5cdC8qIFtFWFRFUk5BTFNdICovXG5cdC8qICpCcnROYW1lICovXG5cdC8qIHdyaXRlX3JlY29yZChiYSwgMHgwMDlEIEJydENhbGNQcm9wLCB3cml0ZV9CcnRDYWxjUHJvcCgpKTsgKi9cblx0LyogW0JydE9sZVNpemVdICovXG5cdC8qICooQnJ0VXNlckJvb2tWaWV3ICpGUlQpICovXG5cdC8qIFtQSVZPVENBQ0hFSURTXSAqL1xuXHQvKiBbQnJ0V2JGYWN0b2lkXSAqL1xuXHQvKiBbU01BUlRUQUdUWVBFU10gKi9cblx0LyogW0JydFdlYk9wdF0gKi9cblx0Lyogd3JpdGVfcmVjb3JkKGJhLCAweDAwOUIgQnJ0RmlsZVJlY292ZXIsIHdyaXRlX0JydEZpbGVSZWNvdmVyKCkpOyAqL1xuXHQvKiBbV0VCUFVCSVRFTVNdICovXG5cdC8qIFtDUkVSUlNdICovXG5cdC8qIEZSVFdPUktCT09LICovXG5cdHdyaXRlX3JlY29yZChiYSwgMHgwMDg0IC8qIEJydEVuZEJvb2sgKi8pO1xuXG5cdHJldHVybiBiYS5lbmQoKTtcbn1cbmZ1bmN0aW9uIHBhcnNlX3diKGRhdGEsIG5hbWUvKjpzdHJpbmcqLywgb3B0cykvKjpXb3JrYm9va0ZpbGUqLyB7XG5cdGlmKG5hbWUuc2xpY2UoLTQpPT09XCIuYmluXCIpIHJldHVybiBwYXJzZV93Yl9iaW4oKGRhdGEvKjphbnkqLyksIG9wdHMpO1xuXHRyZXR1cm4gcGFyc2Vfd2JfeG1sKChkYXRhLyo6YW55Ki8pLCBvcHRzKTtcbn1cblxuZnVuY3Rpb24gcGFyc2Vfd3MoZGF0YSwgbmFtZS8qOnN0cmluZyovLCBpZHgvKjpudW1iZXIqLywgb3B0cywgcmVscywgd2IsIHRoZW1lcywgc3R5bGVzKS8qOldvcmtzaGVldCovIHtcblx0aWYobmFtZS5zbGljZSgtNCk9PT1cIi5iaW5cIikgcmV0dXJuIHBhcnNlX3dzX2JpbigoZGF0YS8qOmFueSovKSwgb3B0cywgaWR4LCByZWxzLCB3YiwgdGhlbWVzLCBzdHlsZXMpO1xuXHRyZXR1cm4gcGFyc2Vfd3NfeG1sKChkYXRhLyo6YW55Ki8pLCBvcHRzLCBpZHgsIHJlbHMsIHdiLCB0aGVtZXMsIHN0eWxlcyk7XG59XG5cbmZ1bmN0aW9uIHBhcnNlX2NzKGRhdGEsIG5hbWUvKjpzdHJpbmcqLywgaWR4Lyo6bnVtYmVyKi8sIG9wdHMsIHJlbHMsIHdiLCB0aGVtZXMsIHN0eWxlcykvKjpXb3Jrc2hlZXQqLyB7XG5cdGlmKG5hbWUuc2xpY2UoLTQpPT09XCIuYmluXCIpIHJldHVybiBwYXJzZV9jc19iaW4oKGRhdGEvKjphbnkqLyksIG9wdHMsIGlkeCwgcmVscywgd2IsIHRoZW1lcywgc3R5bGVzKTtcblx0cmV0dXJuIHBhcnNlX2NzX3htbCgoZGF0YS8qOmFueSovKSwgb3B0cywgaWR4LCByZWxzLCB3YiwgdGhlbWVzLCBzdHlsZXMpO1xufVxuXG5mdW5jdGlvbiBwYXJzZV9tcyhkYXRhLCBuYW1lLyo6c3RyaW5nKi8sIGlkeC8qOm51bWJlciovLCBvcHRzLCByZWxzLCB3YiwgdGhlbWVzLCBzdHlsZXMpLyo6V29ya3NoZWV0Ki8ge1xuXHRpZihuYW1lLnNsaWNlKC00KT09PVwiLmJpblwiKSByZXR1cm4gcGFyc2VfbXNfYmluKChkYXRhLyo6YW55Ki8pLCBvcHRzLCBpZHgsIHJlbHMsIHdiLCB0aGVtZXMsIHN0eWxlcyk7XG5cdHJldHVybiBwYXJzZV9tc194bWwoKGRhdGEvKjphbnkqLyksIG9wdHMsIGlkeCwgcmVscywgd2IsIHRoZW1lcywgc3R5bGVzKTtcbn1cblxuZnVuY3Rpb24gcGFyc2VfZHMoZGF0YSwgbmFtZS8qOnN0cmluZyovLCBpZHgvKjpudW1iZXIqLywgb3B0cywgcmVscywgd2IsIHRoZW1lcywgc3R5bGVzKS8qOldvcmtzaGVldCovIHtcblx0aWYobmFtZS5zbGljZSgtNCk9PT1cIi5iaW5cIikgcmV0dXJuIHBhcnNlX2RzX2JpbigoZGF0YS8qOmFueSovKSwgb3B0cywgaWR4LCByZWxzLCB3YiwgdGhlbWVzLCBzdHlsZXMpO1xuXHRyZXR1cm4gcGFyc2VfZHNfeG1sKChkYXRhLyo6YW55Ki8pLCBvcHRzLCBpZHgsIHJlbHMsIHdiLCB0aGVtZXMsIHN0eWxlcyk7XG59XG5cbmZ1bmN0aW9uIHBhcnNlX3N0eShkYXRhLCBuYW1lLyo6c3RyaW5nKi8sIHRoZW1lcywgb3B0cykge1xuXHRpZihuYW1lLnNsaWNlKC00KT09PVwiLmJpblwiKSByZXR1cm4gcGFyc2Vfc3R5X2JpbigoZGF0YS8qOmFueSovKSwgdGhlbWVzLCBvcHRzKTtcblx0cmV0dXJuIHBhcnNlX3N0eV94bWwoKGRhdGEvKjphbnkqLyksIHRoZW1lcywgb3B0cyk7XG59XG5cbmZ1bmN0aW9uIHBhcnNlX3RoZW1lKGRhdGEvKjpzdHJpbmcqLywgbmFtZS8qOnN0cmluZyovLCBvcHRzKSB7XG5cdHJldHVybiBwYXJzZV90aGVtZV94bWwoZGF0YSwgb3B0cyk7XG59XG5cbmZ1bmN0aW9uIHBhcnNlX3NzdChkYXRhLCBuYW1lLyo6c3RyaW5nKi8sIG9wdHMpLyo6U1NUKi8ge1xuXHRpZihuYW1lLnNsaWNlKC00KT09PVwiLmJpblwiKSByZXR1cm4gcGFyc2Vfc3N0X2JpbigoZGF0YS8qOmFueSovKSwgb3B0cyk7XG5cdHJldHVybiBwYXJzZV9zc3RfeG1sKChkYXRhLyo6YW55Ki8pLCBvcHRzKTtcbn1cblxuZnVuY3Rpb24gcGFyc2VfY21udChkYXRhLCBuYW1lLyo6c3RyaW5nKi8sIG9wdHMpLyo6QXJyYXk8UmF3Q29tbWVudD4qLyB7XG5cdGlmKG5hbWUuc2xpY2UoLTQpPT09XCIuYmluXCIpIHJldHVybiBwYXJzZV9jb21tZW50c19iaW4oKGRhdGEvKjphbnkqLyksIG9wdHMpO1xuXHRyZXR1cm4gcGFyc2VfY29tbWVudHNfeG1sKChkYXRhLyo6YW55Ki8pLCBvcHRzKTtcbn1cblxuZnVuY3Rpb24gcGFyc2VfY2MoZGF0YSwgbmFtZS8qOnN0cmluZyovLCBvcHRzKSB7XG5cdGlmKG5hbWUuc2xpY2UoLTQpPT09XCIuYmluXCIpIHJldHVybiBwYXJzZV9jY19iaW4oKGRhdGEvKjphbnkqLyksIG5hbWUsIG9wdHMpO1xuXHRyZXR1cm4gcGFyc2VfY2NfeG1sKChkYXRhLyo6YW55Ki8pLCBuYW1lLCBvcHRzKTtcbn1cblxuZnVuY3Rpb24gcGFyc2VfeGxpbmsoZGF0YSwgcmVsLCBuYW1lLyo6c3RyaW5nKi8sIG9wdHMpIHtcblx0aWYobmFtZS5zbGljZSgtNCk9PT1cIi5iaW5cIikgcmV0dXJuIHBhcnNlX3hsaW5rX2JpbigoZGF0YS8qOmFueSovKSwgcmVsLCBuYW1lLCBvcHRzKTtcblx0cmV0dXJuIHBhcnNlX3hsaW5rX3htbCgoZGF0YS8qOmFueSovKSwgcmVsLCBuYW1lLCBvcHRzKTtcbn1cblxuZnVuY3Rpb24gcGFyc2VfeGxtZXRhKGRhdGEsIG5hbWUvKjpzdHJpbmcqLywgb3B0cykge1xuXHRpZihuYW1lLnNsaWNlKC00KT09PVwiLmJpblwiKSByZXR1cm4gcGFyc2VfeGxtZXRhX2JpbigoZGF0YS8qOmFueSovKSwgbmFtZSwgb3B0cyk7XG5cdHJldHVybiBwYXJzZV94bG1ldGFfeG1sKChkYXRhLyo6YW55Ki8pLCBuYW1lLCBvcHRzKTtcbn1cblxuZnVuY3Rpb24gd3JpdGVfd2Iod2IsIG5hbWUvKjpzdHJpbmcqLywgb3B0cykge1xuXHRyZXR1cm4gKG5hbWUuc2xpY2UoLTQpPT09XCIuYmluXCIgPyB3cml0ZV93Yl9iaW4gOiB3cml0ZV93Yl94bWwpKHdiLCBvcHRzKTtcbn1cblxuZnVuY3Rpb24gd3JpdGVfd3MoZGF0YS8qOm51bWJlciovLCBuYW1lLyo6c3RyaW5nKi8sIG9wdHMsIHdiLyo6V29ya2Jvb2sqLywgcmVscykge1xuXHRyZXR1cm4gKG5hbWUuc2xpY2UoLTQpPT09XCIuYmluXCIgPyB3cml0ZV93c19iaW4gOiB3cml0ZV93c194bWwpKGRhdGEsIG9wdHMsIHdiLCByZWxzKTtcbn1cblxuLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLXVudXNlZC12YXJzXG5mdW5jdGlvbiB3cml0ZV9jcyhkYXRhLyo6bnVtYmVyKi8sIG5hbWUvKjpzdHJpbmcqLywgb3B0cywgd2IvKjpXb3JrYm9vayovLCByZWxzKSB7XG5cdHJldHVybiAobmFtZS5zbGljZSgtNCk9PT1cIi5iaW5cIiA/IHdyaXRlX2NzX2JpbiA6IHdyaXRlX2NzX3htbCkoZGF0YSwgb3B0cywgd2IsIHJlbHMpO1xufVxuXG5mdW5jdGlvbiB3cml0ZV9zdHkoZGF0YSwgbmFtZS8qOnN0cmluZyovLCBvcHRzKSB7XG5cdHJldHVybiAobmFtZS5zbGljZSgtNCk9PT1cIi5iaW5cIiA/IHdyaXRlX3N0eV9iaW4gOiB3cml0ZV9zdHlfeG1sKShkYXRhLCBvcHRzKTtcbn1cblxuZnVuY3Rpb24gd3JpdGVfc3N0KGRhdGEvKjpTU1QqLywgbmFtZS8qOnN0cmluZyovLCBvcHRzKSB7XG5cdHJldHVybiAobmFtZS5zbGljZSgtNCk9PT1cIi5iaW5cIiA/IHdyaXRlX3NzdF9iaW4gOiB3cml0ZV9zc3RfeG1sKShkYXRhLCBvcHRzKTtcbn1cblxuZnVuY3Rpb24gd3JpdGVfY21udChkYXRhLyo6QXJyYXk8YW55PiovLCBuYW1lLyo6c3RyaW5nKi8sIG9wdHMpIHtcblx0cmV0dXJuIChuYW1lLnNsaWNlKC00KT09PVwiLmJpblwiID8gd3JpdGVfY29tbWVudHNfYmluIDogd3JpdGVfY29tbWVudHNfeG1sKShkYXRhLCBvcHRzKTtcbn1cbi8qXG5mdW5jdGlvbiB3cml0ZV9jYyhkYXRhLCBuYW1lOnN0cmluZywgb3B0cykge1xuXHRyZXR1cm4gKG5hbWUuc2xpY2UoLTQpPT09XCIuYmluXCIgPyB3cml0ZV9jY19iaW4gOiB3cml0ZV9jY194bWwpKGRhdGEsIG9wdHMpO1xufVxuKi9cblxuZnVuY3Rpb24gd3JpdGVfeGxtZXRhKG5hbWUvKjpzdHJpbmcqLykge1xuXHRyZXR1cm4gKG5hbWUuc2xpY2UoLTQpPT09XCIuYmluXCIgPyB3cml0ZV94bG1ldGFfYmluIDogd3JpdGVfeGxtZXRhX3htbCkoKTtcbn1cbnZhciBhdHRyZWdleGcyPS8oW1xcdzpdKyk9KCg/OlwiKShbXlwiXSopKD86XCIpfCg/OicpKFteJ10qKSg/OicpKS9nO1xudmFyIGF0dHJlZ2V4Mj0vKFtcXHc6XSspPSgoPzpcIikoPzpbXlwiXSopKD86XCIpfCg/OicpKD86W14nXSopKD86JykpLztcbmZ1bmN0aW9uIHhsbWxfcGFyc2V4bWx0YWcodGFnLyo6c3RyaW5nKi8sIHNraXBfcm9vdC8qOj9ib29sZWFuKi8pIHtcblx0dmFyIHdvcmRzID0gdGFnLnNwbGl0KC9cXHMrLyk7XG5cdHZhciB6Lyo6YW55Ki8gPSAoW10vKjphbnkqLyk7IGlmKCFza2lwX3Jvb3QpIHpbMF0gPSB3b3Jkc1swXTtcblx0aWYod29yZHMubGVuZ3RoID09PSAxKSByZXR1cm4gejtcblx0dmFyIG0gPSB0YWcubWF0Y2goYXR0cmVnZXhnMiksIHksIGosIHcsIGk7XG5cdGlmKG0pIGZvcihpID0gMDsgaSAhPSBtLmxlbmd0aDsgKytpKSB7XG5cdFx0eSA9IG1baV0ubWF0Y2goYXR0cmVnZXgyKTtcbi8qOjogaWYoIXkgfHwgIXlbMl0pIGNvbnRpbnVlOyAqL1xuXHRcdGlmKChqPXlbMV0uaW5kZXhPZihcIjpcIikpID09PSAtMSkgelt5WzFdXSA9IHlbMl0uc2xpY2UoMSx5WzJdLmxlbmd0aC0xKTtcblx0XHRlbHNlIHtcblx0XHRcdGlmKHlbMV0uc2xpY2UoMCw2KSA9PT0gXCJ4bWxuczpcIikgdyA9IFwieG1sbnNcIit5WzFdLnNsaWNlKDYpO1xuXHRcdFx0ZWxzZSB3ID0geVsxXS5zbGljZShqKzEpO1xuXHRcdFx0elt3XSA9IHlbMl0uc2xpY2UoMSx5WzJdLmxlbmd0aC0xKTtcblx0XHR9XG5cdH1cblx0cmV0dXJuIHo7XG59XG5mdW5jdGlvbiB4bG1sX3BhcnNleG1sdGFnb2JqKHRhZy8qOnN0cmluZyovKSB7XG5cdHZhciB3b3JkcyA9IHRhZy5zcGxpdCgvXFxzKy8pO1xuXHR2YXIgeiA9IHt9O1xuXHRpZih3b3Jkcy5sZW5ndGggPT09IDEpIHJldHVybiB6O1xuXHR2YXIgbSA9IHRhZy5tYXRjaChhdHRyZWdleGcyKSwgeSwgaiwgdywgaTtcblx0aWYobSkgZm9yKGkgPSAwOyBpICE9IG0ubGVuZ3RoOyArK2kpIHtcblx0XHR5ID0gbVtpXS5tYXRjaChhdHRyZWdleDIpO1xuLyo6OiBpZigheSB8fCAheVsyXSkgY29udGludWU7ICovXG5cdFx0aWYoKGo9eVsxXS5pbmRleE9mKFwiOlwiKSkgPT09IC0xKSB6W3lbMV1dID0geVsyXS5zbGljZSgxLHlbMl0ubGVuZ3RoLTEpO1xuXHRcdGVsc2Uge1xuXHRcdFx0aWYoeVsxXS5zbGljZSgwLDYpID09PSBcInhtbG5zOlwiKSB3ID0gXCJ4bWxuc1wiK3lbMV0uc2xpY2UoNik7XG5cdFx0XHRlbHNlIHcgPSB5WzFdLnNsaWNlKGorMSk7XG5cdFx0XHR6W3ddID0geVsyXS5zbGljZSgxLHlbMl0ubGVuZ3RoLTEpO1xuXHRcdH1cblx0fVxuXHRyZXR1cm4gejtcbn1cblxuLy8gLS0tLVxuXG4vKiBtYXAgZnJvbSB4bG1sIG5hbWVkIGZvcm1hdHMgdG8gU1NGIFRPRE86IGxvY2FsaXplICovXG52YXIgWExNTEZvcm1hdE1hcC8qOiB7W3N0cmluZ106c3RyaW5nfSovO1xuXG5mdW5jdGlvbiB4bG1sX2Zvcm1hdChmb3JtYXQsIHZhbHVlKS8qOnN0cmluZyovIHtcblx0dmFyIGZtdCA9IFhMTUxGb3JtYXRNYXBbZm9ybWF0XSB8fCB1bmVzY2FwZXhtbChmb3JtYXQpO1xuXHRpZihmbXQgPT09IFwiR2VuZXJhbFwiKSByZXR1cm4gU1NGX2dlbmVyYWwodmFsdWUpO1xuXHRyZXR1cm4gU1NGX2Zvcm1hdChmbXQsIHZhbHVlKTtcbn1cblxuZnVuY3Rpb24geGxtbF9zZXRfY3VzdHByb3AoQ3VzdHByb3BzLCBrZXksIGNwLCB2YWwvKjpzdHJpbmcqLykge1xuXHR2YXIgb3ZhbC8qOmFueSovID0gdmFsO1xuXHRzd2l0Y2goKGNwWzBdLm1hdGNoKC9kdDpkdD1cIihbXFx3Ll0rKVwiLyl8fFtcIlwiLFwiXCJdKVsxXSkge1xuXHRcdGNhc2UgXCJib29sZWFuXCI6IG92YWwgPSBwYXJzZXhtbGJvb2wodmFsKTsgYnJlYWs7XG5cdFx0Y2FzZSBcImkyXCI6IGNhc2UgXCJpbnRcIjogb3ZhbCA9IHBhcnNlSW50KHZhbCwgMTApOyBicmVhaztcblx0XHRjYXNlIFwicjRcIjogY2FzZSBcImZsb2F0XCI6IG92YWwgPSBwYXJzZUZsb2F0KHZhbCk7IGJyZWFrO1xuXHRcdGNhc2UgXCJkYXRlXCI6IGNhc2UgXCJkYXRlVGltZS50elwiOiBvdmFsID0gcGFyc2VEYXRlKHZhbCk7IGJyZWFrO1xuXHRcdGNhc2UgXCJpOFwiOiBjYXNlIFwic3RyaW5nXCI6IGNhc2UgXCJmaXhlZFwiOiBjYXNlIFwidXVpZFwiOiBjYXNlIFwiYmluLmJhc2U2NFwiOiBicmVhaztcblx0XHRkZWZhdWx0OiB0aHJvdyBuZXcgRXJyb3IoXCJiYWQgY3VzdHByb3A6XCIgKyBjcFswXSk7XG5cdH1cblx0Q3VzdHByb3BzW3VuZXNjYXBleG1sKGtleSldID0gb3ZhbDtcbn1cblxuZnVuY3Rpb24gc2FmZV9mb3JtYXRfeGxtbChjZWxsLyo6Q2VsbCovLCBuZiwgbykge1xuXHRpZihjZWxsLnQgPT09ICd6JykgcmV0dXJuO1xuXHRpZighbyB8fCBvLmNlbGxUZXh0ICE9PSBmYWxzZSkgdHJ5IHtcblx0XHRpZihjZWxsLnQgPT09ICdlJykgeyBjZWxsLncgPSBjZWxsLncgfHwgQkVycltjZWxsLnZdOyB9XG5cdFx0ZWxzZSBpZihuZiA9PT0gXCJHZW5lcmFsXCIpIHtcblx0XHRcdGlmKGNlbGwudCA9PT0gJ24nKSB7XG5cdFx0XHRcdGlmKChjZWxsLnZ8MCkgPT09IGNlbGwudikgY2VsbC53ID0gY2VsbC52LnRvU3RyaW5nKDEwKTtcblx0XHRcdFx0ZWxzZSBjZWxsLncgPSBTU0ZfZ2VuZXJhbF9udW0oY2VsbC52KTtcblx0XHRcdH1cblx0XHRcdGVsc2UgY2VsbC53ID0gU1NGX2dlbmVyYWwoY2VsbC52KTtcblx0XHR9XG5cdFx0ZWxzZSBjZWxsLncgPSB4bG1sX2Zvcm1hdChuZnx8XCJHZW5lcmFsXCIsIGNlbGwudik7XG5cdH0gY2F0Y2goZSkgeyBpZihvLldURikgdGhyb3cgZTsgfVxuXHR0cnkge1xuXHRcdHZhciB6ID0gWExNTEZvcm1hdE1hcFtuZl18fG5mfHxcIkdlbmVyYWxcIjtcblx0XHRpZihvLmNlbGxORikgY2VsbC56ID0gejtcblx0XHRpZihvLmNlbGxEYXRlcyAmJiBjZWxsLnQgPT0gJ24nICYmIGZtdF9pc19kYXRlKHopKSB7XG5cdFx0XHR2YXIgX2QgPSBTU0ZfcGFyc2VfZGF0ZV9jb2RlKGNlbGwudik7IGlmKF9kKSB7IGNlbGwudCA9ICdkJzsgY2VsbC52ID0gbmV3IERhdGUoX2QueSwgX2QubS0xLF9kLmQsX2QuSCxfZC5NLF9kLlMsX2QudSk7IH1cblx0XHR9XG5cdH0gY2F0Y2goZSkgeyBpZihvLldURikgdGhyb3cgZTsgfVxufVxuXG5mdW5jdGlvbiBwcm9jZXNzX3N0eWxlX3hsbWwoc3R5bGVzLCBzdGFnLCBvcHRzKSB7XG5cdGlmKG9wdHMuY2VsbFN0eWxlcykge1xuXHRcdGlmKHN0YWcuSW50ZXJpb3IpIHtcblx0XHRcdHZhciBJID0gc3RhZy5JbnRlcmlvcjtcblx0XHRcdGlmKEkuUGF0dGVybikgSS5wYXR0ZXJuVHlwZSA9IFhMTUxQYXR0ZXJuVHlwZU1hcFtJLlBhdHRlcm5dIHx8IEkuUGF0dGVybjtcblx0XHR9XG5cdH1cblx0c3R5bGVzW3N0YWcuSURdID0gc3RhZztcbn1cblxuLyogVE9ETzogdGhlcmUgbXVzdCBleGlzdCBzb21lIGZvcm0gb2YgT1NQLWJsZXNzZWQgc3BlYyAqL1xuZnVuY3Rpb24gcGFyc2VfeGxtbF9kYXRhKHhtbCwgc3MsIGRhdGEsIGNlbGwvKjphbnkqLywgYmFzZSwgc3R5bGVzLCBjc3R5LCByb3csIGFycmF5Ziwgbykge1xuXHR2YXIgbmYgPSBcIkdlbmVyYWxcIiwgc2lkID0gY2VsbC5TdHlsZUlELCBTID0ge307IG8gPSBvIHx8IHt9O1xuXHR2YXIgaW50ZXJpb3JzID0gW107XG5cdHZhciBpID0gMDtcblx0aWYoc2lkID09PSB1bmRlZmluZWQgJiYgcm93KSBzaWQgPSByb3cuU3R5bGVJRDtcblx0aWYoc2lkID09PSB1bmRlZmluZWQgJiYgY3N0eSkgc2lkID0gY3N0eS5TdHlsZUlEO1xuXHR3aGlsZShzdHlsZXNbc2lkXSAhPT0gdW5kZWZpbmVkKSB7XG5cdFx0aWYoc3R5bGVzW3NpZF0ubmYpIG5mID0gc3R5bGVzW3NpZF0ubmY7XG5cdFx0aWYoc3R5bGVzW3NpZF0uSW50ZXJpb3IpIGludGVyaW9ycy5wdXNoKHN0eWxlc1tzaWRdLkludGVyaW9yKTtcblx0XHRpZighc3R5bGVzW3NpZF0uUGFyZW50KSBicmVhaztcblx0XHRzaWQgPSBzdHlsZXNbc2lkXS5QYXJlbnQ7XG5cdH1cblx0c3dpdGNoKGRhdGEuVHlwZSkge1xuXHRcdGNhc2UgJ0Jvb2xlYW4nOlxuXHRcdFx0Y2VsbC50ID0gJ2InO1xuXHRcdFx0Y2VsbC52ID0gcGFyc2V4bWxib29sKHhtbCk7XG5cdFx0XHRicmVhaztcblx0XHRjYXNlICdTdHJpbmcnOlxuXHRcdFx0Y2VsbC50ID0gJ3MnOyBjZWxsLnIgPSB4bG1sX2ZpeHN0cih1bmVzY2FwZXhtbCh4bWwpKTtcblx0XHRcdGNlbGwudiA9ICh4bWwuaW5kZXhPZihcIjxcIikgPiAtMSA/IHVuZXNjYXBleG1sKHNzfHx4bWwpLnJlcGxhY2UoLzwuKj8+L2csIFwiXCIpIDogY2VsbC5yKTsgLy8gdG9kbzogQlIgZXRjXG5cdFx0XHRicmVhaztcblx0XHRjYXNlICdEYXRlVGltZSc6XG5cdFx0XHRpZih4bWwuc2xpY2UoLTEpICE9IFwiWlwiKSB4bWwgKz0gXCJaXCI7XG5cdFx0XHRjZWxsLnYgPSAocGFyc2VEYXRlKHhtbCkgLSBuZXcgRGF0ZShEYXRlLlVUQygxODk5LCAxMSwgMzApKSkgLyAoMjQgKiA2MCAqIDYwICogMTAwMCk7XG5cdFx0XHRpZihjZWxsLnYgIT09IGNlbGwudikgY2VsbC52ID0gdW5lc2NhcGV4bWwoeG1sKTtcblx0XHRcdGVsc2UgaWYoY2VsbC52PDYwKSBjZWxsLnYgPSBjZWxsLnYgLTE7XG5cdFx0XHRpZighbmYgfHwgbmYgPT0gXCJHZW5lcmFsXCIpIG5mID0gXCJ5eXl5LW1tLWRkXCI7XG5cdFx0XHQvKiBmYWxscyB0aHJvdWdoICovXG5cdFx0Y2FzZSAnTnVtYmVyJzpcblx0XHRcdGlmKGNlbGwudiA9PT0gdW5kZWZpbmVkKSBjZWxsLnY9K3htbDtcblx0XHRcdGlmKCFjZWxsLnQpIGNlbGwudCA9ICduJztcblx0XHRcdGJyZWFrO1xuXHRcdGNhc2UgJ0Vycm9yJzogY2VsbC50ID0gJ2UnOyBjZWxsLnYgPSBSQkVyclt4bWxdOyBpZihvLmNlbGxUZXh0ICE9PSBmYWxzZSkgY2VsbC53ID0geG1sOyBicmVhaztcblx0XHRkZWZhdWx0OlxuXHRcdFx0aWYoeG1sID09IFwiXCIgJiYgc3MgPT0gXCJcIikgeyBjZWxsLnQgPSAneic7IH1cblx0XHRcdGVsc2UgeyBjZWxsLnQgPSAncyc7IGNlbGwudiA9IHhsbWxfZml4c3RyKHNzfHx4bWwpOyB9XG5cdFx0XHRicmVhaztcblx0fVxuXHRzYWZlX2Zvcm1hdF94bG1sKGNlbGwsIG5mLCBvKTtcblx0aWYoby5jZWxsRm9ybXVsYSAhPT0gZmFsc2UpIHtcblx0XHRpZihjZWxsLkZvcm11bGEpIHtcblx0XHRcdHZhciBmc3RyID0gdW5lc2NhcGV4bWwoY2VsbC5Gb3JtdWxhKTtcblx0XHRcdC8qIHN0cmljdGx5IHNwZWFraW5nLCB0aGUgbGVhZGluZyA9IGlzIHJlcXVpcmVkIGJ1dCBzb21lIHdyaXRlcnMgb21pdCAqL1xuXHRcdFx0aWYoZnN0ci5jaGFyQ29kZUF0KDApID09IDYxIC8qID0gKi8pIGZzdHIgPSBmc3RyLnNsaWNlKDEpO1xuXHRcdFx0Y2VsbC5mID0gcmNfdG9fYTEoZnN0ciwgYmFzZSk7XG5cdFx0XHRkZWxldGUgY2VsbC5Gb3JtdWxhO1xuXHRcdFx0aWYoY2VsbC5BcnJheVJhbmdlID09IFwiUkNcIikgY2VsbC5GID0gcmNfdG9fYTEoXCJSQzpSQ1wiLCBiYXNlKTtcblx0XHRcdGVsc2UgaWYoY2VsbC5BcnJheVJhbmdlKSB7XG5cdFx0XHRcdGNlbGwuRiA9IHJjX3RvX2ExKGNlbGwuQXJyYXlSYW5nZSwgYmFzZSk7XG5cdFx0XHRcdGFycmF5Zi5wdXNoKFtzYWZlX2RlY29kZV9yYW5nZShjZWxsLkYpLCBjZWxsLkZdKTtcblx0XHRcdH1cblx0XHR9IGVsc2Uge1xuXHRcdFx0Zm9yKGkgPSAwOyBpIDwgYXJyYXlmLmxlbmd0aDsgKytpKVxuXHRcdFx0XHRpZihiYXNlLnIgPj0gYXJyYXlmW2ldWzBdLnMuciAmJiBiYXNlLnIgPD0gYXJyYXlmW2ldWzBdLmUucilcblx0XHRcdFx0XHRpZihiYXNlLmMgPj0gYXJyYXlmW2ldWzBdLnMuYyAmJiBiYXNlLmMgPD0gYXJyYXlmW2ldWzBdLmUuYylcblx0XHRcdFx0XHRcdGNlbGwuRiA9IGFycmF5ZltpXVsxXTtcblx0XHR9XG5cdH1cblx0aWYoby5jZWxsU3R5bGVzKSB7XG5cdFx0aW50ZXJpb3JzLmZvckVhY2goZnVuY3Rpb24oeCkge1xuXHRcdFx0aWYoIVMucGF0dGVyblR5cGUgJiYgeC5wYXR0ZXJuVHlwZSkgUy5wYXR0ZXJuVHlwZSA9IHgucGF0dGVyblR5cGU7XG5cdFx0fSk7XG5cdFx0Y2VsbC5zID0gUztcblx0fVxuXHRpZihjZWxsLlN0eWxlSUQgIT09IHVuZGVmaW5lZCkgY2VsbC5peGZlID0gY2VsbC5TdHlsZUlEO1xufVxuXG5mdW5jdGlvbiB4bG1sX2NsZWFuX2NvbW1lbnQoY29tbWVudC8qOmFueSovKSB7XG5cdGNvbW1lbnQudCA9IGNvbW1lbnQudiB8fCBcIlwiO1xuXHRjb21tZW50LnQgPSBjb21tZW50LnQucmVwbGFjZSgvXFxyXFxuL2csXCJcXG5cIikucmVwbGFjZSgvXFxyL2csXCJcXG5cIik7XG5cdGNvbW1lbnQudiA9IGNvbW1lbnQudyA9IGNvbW1lbnQuaXhmZSA9IHVuZGVmaW5lZDtcbn1cblxuLyogVE9ETzogRXZlcnl0aGluZyAqL1xuZnVuY3Rpb24gcGFyc2VfeGxtbF94bWwoZCwgX29wdHMpLyo6V29ya2Jvb2sqLyB7XG5cdHZhciBvcHRzID0gX29wdHMgfHwge307XG5cdG1ha2Vfc3NmKCk7XG5cdHZhciBzdHIgPSBkZWJvbSh4bG1sX25vcm1hbGl6ZShkKSk7XG5cdGlmKG9wdHMudHlwZSA9PSAnYmluYXJ5JyB8fCBvcHRzLnR5cGUgPT0gJ2FycmF5JyB8fCBvcHRzLnR5cGUgPT0gJ2Jhc2U2NCcpIHtcblx0XHRpZih0eXBlb2YgJGNwdGFibGUgIT09ICd1bmRlZmluZWQnKSBzdHIgPSAkY3B0YWJsZS51dGlscy5kZWNvZGUoNjUwMDEsIGNoYXJfY29kZXMoc3RyKSk7XG5cdFx0ZWxzZSBzdHIgPSB1dGY4cmVhZChzdHIpO1xuXHR9XG5cdHZhciBvcGVuaW5nID0gc3RyLnNsaWNlKDAsIDEwMjQpLnRvTG93ZXJDYXNlKCksIGlzaHRtbCA9IGZhbHNlO1xuXHRvcGVuaW5nID0gb3BlbmluZy5yZXBsYWNlKC9cIi4qP1wiL2csIFwiXCIpO1xuXHRpZigob3BlbmluZy5pbmRleE9mKFwiPlwiKSAmIDEwMjMpID4gTWF0aC5taW4oKG9wZW5pbmcuaW5kZXhPZihcIixcIikgJiAxMDIzKSwgKG9wZW5pbmcuaW5kZXhPZihcIjtcIikmMTAyMykpKSB7IHZhciBfbyA9IGR1cChvcHRzKTsgX28udHlwZSA9IFwic3RyaW5nXCI7IHJldHVybiBQUk4udG9fd29ya2Jvb2soc3RyLCBfbyk7IH1cblx0aWYob3BlbmluZy5pbmRleE9mKFwiPD94bWxcIikgPT0gLTEpIFtcImh0bWxcIiwgXCJ0YWJsZVwiLCBcImhlYWRcIiwgXCJtZXRhXCIsIFwic2NyaXB0XCIsIFwic3R5bGVcIiwgXCJkaXZcIl0uZm9yRWFjaChmdW5jdGlvbih0YWcpIHsgaWYob3BlbmluZy5pbmRleE9mKFwiPFwiICsgdGFnKSA+PSAwKSBpc2h0bWwgPSB0cnVlOyB9KTtcblx0aWYoaXNodG1sKSByZXR1cm4gaHRtbF90b193b3JrYm9vayhzdHIsIG9wdHMpO1xuXG5cdFhMTUxGb3JtYXRNYXAgPSAoe1xuXHRcdFwiR2VuZXJhbCBOdW1iZXJcIjogXCJHZW5lcmFsXCIsXG5cdFx0XCJHZW5lcmFsIERhdGVcIjogdGFibGVfZm10WzIyXSxcblx0XHRcIkxvbmcgRGF0ZVwiOiBcImRkZGQsIG1tbW0gZGQsIHl5eXlcIixcblx0XHRcIk1lZGl1bSBEYXRlXCI6IHRhYmxlX2ZtdFsxNV0sXG5cdFx0XCJTaG9ydCBEYXRlXCI6IHRhYmxlX2ZtdFsxNF0sXG5cdFx0XCJMb25nIFRpbWVcIjogdGFibGVfZm10WzE5XSxcblx0XHRcIk1lZGl1bSBUaW1lXCI6IHRhYmxlX2ZtdFsxOF0sXG5cdFx0XCJTaG9ydCBUaW1lXCI6IHRhYmxlX2ZtdFsyMF0sXG5cdFx0XCJDdXJyZW5jeVwiOiAnXCIkXCIjLCMjMC4wMF8pO1tSZWRdXFxcXChcIiRcIiMsIyMwLjAwXFxcXCknLFxuXHRcdFwiRml4ZWRcIjogdGFibGVfZm10WzJdLFxuXHRcdFwiU3RhbmRhcmRcIjogdGFibGVfZm10WzRdLFxuXHRcdFwiUGVyY2VudFwiOiB0YWJsZV9mbXRbMTBdLFxuXHRcdFwiU2NpZW50aWZpY1wiOiB0YWJsZV9mbXRbMTFdLFxuXHRcdFwiWWVzL05vXCI6ICdcIlllc1wiO1wiWWVzXCI7XCJOb1wiO0AnLFxuXHRcdFwiVHJ1ZS9GYWxzZVwiOiAnXCJUcnVlXCI7XCJUcnVlXCI7XCJGYWxzZVwiO0AnLFxuXHRcdFwiT24vT2ZmXCI6ICdcIlllc1wiO1wiWWVzXCI7XCJOb1wiO0AnXG5cdH0vKjphbnkqLyk7XG5cblxuXHR2YXIgUm47XG5cdHZhciBzdGF0ZSA9IFtdLCB0bXA7XG5cdGlmKERFTlNFICE9IG51bGwgJiYgb3B0cy5kZW5zZSA9PSBudWxsKSBvcHRzLmRlbnNlID0gREVOU0U7XG5cdHZhciBzaGVldHMgPSB7fSwgc2hlZXRuYW1lcy8qOkFycmF5PHN0cmluZz4qLyA9IFtdLCBjdXJzaGVldC8qOldvcmtzaGVldCovID0gKG9wdHMuZGVuc2UgPyBbXSA6IHt9KSwgc2hlZXRuYW1lID0gXCJcIjtcblx0dmFyIGNlbGwgPSAoe30vKjphbnkqLyksIHJvdyA9IHt9Oy8vIGVzbGludC1kaXNhYmxlLWxpbmUgbm8tdW51c2VkLXZhcnNcblx0dmFyIGR0YWcgPSB4bG1sX3BhcnNleG1sdGFnKCc8RGF0YSBzczpUeXBlPVwiU3RyaW5nXCI+JyksIGRpZHggPSAwO1xuXHR2YXIgYyA9IDAsIHIgPSAwO1xuXHR2YXIgcmVmZ3Vlc3MvKjpSYW5nZSovID0ge3M6IHtyOjIwMDAwMDAsIGM6MjAwMDAwMH0sIGU6IHtyOjAsIGM6MH0gfTtcblx0dmFyIHN0eWxlcyA9IHt9LCBzdGFnID0ge307XG5cdHZhciBzcyA9IFwiXCIsIGZpZHggPSAwO1xuXHR2YXIgbWVyZ2VzLyo6QXJyYXk8UmFuZ2U+Ki8gPSBbXTtcblx0dmFyIFByb3BzID0ge30sIEN1c3Rwcm9wcyA9IHt9LCBwaWR4ID0gMCwgY3AgPSBbXTtcblx0dmFyIGNvbW1lbnRzLyo6QXJyYXk8Q29tbWVudD4qLyA9IFtdLCBjb21tZW50Lyo6Q29tbWVudCovID0gKHt9Lyo6YW55Ki8pO1xuXHR2YXIgY3N0eXMgPSBbXSwgY3N0eSwgc2VlbmNvbCA9IGZhbHNlO1xuXHR2YXIgYXJyYXlmLyo6QXJyYXk8W1JhbmdlLCBzdHJpbmddPiovID0gW107XG5cdHZhciByb3dpbmZvLyo6QXJyYXk8Um93SW5mbz4qLyA9IFtdLCByb3dvYmogPSB7fSwgY2MgPSAwLCByciA9IDA7XG5cdHZhciBXb3JrYm9vay8qOldCV0JQcm9wcyovID0gKHsgU2hlZXRzOltdLCBXQlByb3BzOntkYXRlMTkwNDpmYWxzZX0gfS8qOmFueSovKSwgd3Nwcm9wcyA9IHt9O1xuXHR4bG1scmVnZXgubGFzdEluZGV4ID0gMDtcblx0c3RyID0gc3RyLnJlcGxhY2UoLzwhLS0oW1xcc1xcU10qPyktLT4vbWcsXCJcIik7XG5cdHZhciByYXdfUm4zID0gXCJcIjtcblx0d2hpbGUoKFJuID0geGxtbHJlZ2V4LmV4ZWMoc3RyKSkpIHN3aXRjaCgoUm5bM10gPSAocmF3X1JuMyA9IFJuWzNdKS50b0xvd2VyQ2FzZSgpKSkge1xuXHRcdGNhc2UgJ2RhdGEnIC8qY2FzZSAnRGF0YScqLzpcblx0XHRcdGlmKHJhd19SbjMgPT0gXCJkYXRhXCIpIHtcblx0XHRcdFx0aWYoUm5bMV09PT0nLycpe2lmKCh0bXA9c3RhdGUucG9wKCkpWzBdIT09Um5bM10pIHRocm93IG5ldyBFcnJvcihcIkJhZCBzdGF0ZTogXCIrdG1wLmpvaW4oXCJ8XCIpKTt9XG5cdFx0XHRcdGVsc2UgaWYoUm5bMF0uY2hhckF0KFJuWzBdLmxlbmd0aC0yKSAhPT0gJy8nKSBzdGF0ZS5wdXNoKFtSblszXSwgdHJ1ZV0pO1xuXHRcdFx0XHRicmVhaztcblx0XHRcdH1cblx0XHRcdGlmKHN0YXRlW3N0YXRlLmxlbmd0aC0xXVsxXSkgYnJlYWs7XG5cdFx0XHRpZihSblsxXT09PScvJykgcGFyc2VfeGxtbF9kYXRhKHN0ci5zbGljZShkaWR4LCBSbi5pbmRleCksIHNzLCBkdGFnLCBzdGF0ZVtzdGF0ZS5sZW5ndGgtMV1bMF09PS8qXCJDb21tZW50XCIqL1wiY29tbWVudFwiP2NvbW1lbnQ6Y2VsbCwge2M6YyxyOnJ9LCBzdHlsZXMsIGNzdHlzW2NdLCByb3csIGFycmF5Ziwgb3B0cyk7XG5cdFx0XHRlbHNlIHsgc3MgPSBcIlwiOyBkdGFnID0geGxtbF9wYXJzZXhtbHRhZyhSblswXSk7IGRpZHggPSBSbi5pbmRleCArIFJuWzBdLmxlbmd0aDsgfVxuXHRcdFx0YnJlYWs7XG5cdFx0Y2FzZSAnY2VsbCcgLypjYXNlICdDZWxsJyovOlxuXHRcdFx0aWYoUm5bMV09PT0nLycpe1xuXHRcdFx0XHRpZihjb21tZW50cy5sZW5ndGggPiAwKSBjZWxsLmMgPSBjb21tZW50cztcblx0XHRcdFx0aWYoKCFvcHRzLnNoZWV0Um93cyB8fCBvcHRzLnNoZWV0Um93cyA+IHIpICYmIGNlbGwudiAhPT0gdW5kZWZpbmVkKSB7XG5cdFx0XHRcdFx0aWYob3B0cy5kZW5zZSkge1xuXHRcdFx0XHRcdFx0aWYoIWN1cnNoZWV0W3JdKSBjdXJzaGVldFtyXSA9IFtdO1xuXHRcdFx0XHRcdFx0Y3Vyc2hlZXRbcl1bY10gPSBjZWxsO1xuXHRcdFx0XHRcdH0gZWxzZSBjdXJzaGVldFtlbmNvZGVfY29sKGMpICsgZW5jb2RlX3JvdyhyKV0gPSBjZWxsO1xuXHRcdFx0XHR9XG5cdFx0XHRcdGlmKGNlbGwuSFJlZikge1xuXHRcdFx0XHRcdGNlbGwubCA9ICh7VGFyZ2V0OnVuZXNjYXBleG1sKGNlbGwuSFJlZil9Lyo6YW55Ki8pO1xuXHRcdFx0XHRcdGlmKGNlbGwuSFJlZlNjcmVlblRpcCkgY2VsbC5sLlRvb2x0aXAgPSBjZWxsLkhSZWZTY3JlZW5UaXA7XG5cdFx0XHRcdFx0ZGVsZXRlIGNlbGwuSFJlZjsgZGVsZXRlIGNlbGwuSFJlZlNjcmVlblRpcDtcblx0XHRcdFx0fVxuXHRcdFx0XHRpZihjZWxsLk1lcmdlQWNyb3NzIHx8IGNlbGwuTWVyZ2VEb3duKSB7XG5cdFx0XHRcdFx0Y2MgPSBjICsgKHBhcnNlSW50KGNlbGwuTWVyZ2VBY3Jvc3MsMTApfDApO1xuXHRcdFx0XHRcdHJyID0gciArIChwYXJzZUludChjZWxsLk1lcmdlRG93biwxMCl8MCk7XG5cdFx0XHRcdFx0bWVyZ2VzLnB1c2goe3M6e2M6YyxyOnJ9LGU6e2M6Y2Mscjpycn19KTtcblx0XHRcdFx0fVxuXHRcdFx0XHRpZighb3B0cy5zaGVldFN0dWJzKSB7IGlmKGNlbGwuTWVyZ2VBY3Jvc3MpIGMgPSBjYyArIDE7IGVsc2UgKytjOyB9XG5cdFx0XHRcdGVsc2UgaWYoY2VsbC5NZXJnZUFjcm9zcyB8fCBjZWxsLk1lcmdlRG93bikge1xuXHRcdFx0XHRcdC8qOjogaWYoIWNjKSBjYyA9IDA7IGlmKCFycikgcnIgPSAwOyAqL1xuXHRcdFx0XHRcdGZvcih2YXIgY21hID0gYzsgY21hIDw9IGNjOyArK2NtYSkge1xuXHRcdFx0XHRcdFx0Zm9yKHZhciBjbWQgPSByOyBjbWQgPD0gcnI7ICsrY21kKSB7XG5cdFx0XHRcdFx0XHRcdGlmKGNtYSA+IGMgfHwgY21kID4gcikge1xuXHRcdFx0XHRcdFx0XHRcdGlmKG9wdHMuZGVuc2UpIHtcblx0XHRcdFx0XHRcdFx0XHRcdGlmKCFjdXJzaGVldFtjbWRdKSBjdXJzaGVldFtjbWRdID0gW107XG5cdFx0XHRcdFx0XHRcdFx0XHRjdXJzaGVldFtjbWRdW2NtYV0gPSB7dDoneid9O1xuXHRcdFx0XHRcdFx0XHRcdH0gZWxzZSBjdXJzaGVldFtlbmNvZGVfY29sKGNtYSkgKyBlbmNvZGVfcm93KGNtZCldID0ge3Q6J3onfTtcblx0XHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdH1cblx0XHRcdFx0XHRjID0gY2MgKyAxO1xuXHRcdFx0XHR9XG5cdFx0XHRcdGVsc2UgKytjO1xuXHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0Y2VsbCA9IHhsbWxfcGFyc2V4bWx0YWdvYmooUm5bMF0pO1xuXHRcdFx0XHRpZihjZWxsLkluZGV4KSBjID0gK2NlbGwuSW5kZXggLSAxO1xuXHRcdFx0XHRpZihjIDwgcmVmZ3Vlc3Mucy5jKSByZWZndWVzcy5zLmMgPSBjO1xuXHRcdFx0XHRpZihjID4gcmVmZ3Vlc3MuZS5jKSByZWZndWVzcy5lLmMgPSBjO1xuXHRcdFx0XHRpZihSblswXS5zbGljZSgtMikgPT09IFwiLz5cIikgKytjO1xuXHRcdFx0XHRjb21tZW50cyA9IFtdO1xuXHRcdFx0fVxuXHRcdFx0YnJlYWs7XG5cdFx0Y2FzZSAncm93JyAvKmNhc2UgJ1JvdycqLzpcblx0XHRcdGlmKFJuWzFdPT09Jy8nIHx8IFJuWzBdLnNsaWNlKC0yKSA9PT0gXCIvPlwiKSB7XG5cdFx0XHRcdGlmKHIgPCByZWZndWVzcy5zLnIpIHJlZmd1ZXNzLnMuciA9IHI7XG5cdFx0XHRcdGlmKHIgPiByZWZndWVzcy5lLnIpIHJlZmd1ZXNzLmUuciA9IHI7XG5cdFx0XHRcdGlmKFJuWzBdLnNsaWNlKC0yKSA9PT0gXCIvPlwiKSB7XG5cdFx0XHRcdFx0cm93ID0geGxtbF9wYXJzZXhtbHRhZyhSblswXSk7XG5cdFx0XHRcdFx0aWYocm93LkluZGV4KSByID0gK3Jvdy5JbmRleCAtIDE7XG5cdFx0XHRcdH1cblx0XHRcdFx0YyA9IDA7ICsrcjtcblx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdHJvdyA9IHhsbWxfcGFyc2V4bWx0YWcoUm5bMF0pO1xuXHRcdFx0XHRpZihyb3cuSW5kZXgpIHIgPSArcm93LkluZGV4IC0gMTtcblx0XHRcdFx0cm93b2JqID0ge307XG5cdFx0XHRcdGlmKHJvdy5BdXRvRml0SGVpZ2h0ID09IFwiMFwiIHx8IHJvdy5IZWlnaHQpIHtcblx0XHRcdFx0XHRyb3dvYmouaHB4ID0gcGFyc2VJbnQocm93LkhlaWdodCwgMTApOyByb3dvYmouaHB0ID0gcHgycHQocm93b2JqLmhweCk7XG5cdFx0XHRcdFx0cm93aW5mb1tyXSA9IHJvd29iajtcblx0XHRcdFx0fVxuXHRcdFx0XHRpZihyb3cuSGlkZGVuID09IFwiMVwiKSB7IHJvd29iai5oaWRkZW4gPSB0cnVlOyByb3dpbmZvW3JdID0gcm93b2JqOyB9XG5cdFx0XHR9XG5cdFx0XHRicmVhaztcblx0XHRjYXNlICd3b3Jrc2hlZXQnIC8qY2FzZSAnV29ya3NoZWV0JyovOiAvKiBUT0RPOiByZWFkIHJhbmdlIGZyb20gRnVsbFJvd3MvRnVsbENvbHVtbnMgKi9cblx0XHRcdGlmKFJuWzFdPT09Jy8nKXtcblx0XHRcdFx0aWYoKHRtcD1zdGF0ZS5wb3AoKSlbMF0hPT1SblszXSkgdGhyb3cgbmV3IEVycm9yKFwiQmFkIHN0YXRlOiBcIit0bXAuam9pbihcInxcIikpO1xuXHRcdFx0XHRzaGVldG5hbWVzLnB1c2goc2hlZXRuYW1lKTtcblx0XHRcdFx0aWYocmVmZ3Vlc3Mucy5yIDw9IHJlZmd1ZXNzLmUuciAmJiByZWZndWVzcy5zLmMgPD0gcmVmZ3Vlc3MuZS5jKSB7XG5cdFx0XHRcdFx0Y3Vyc2hlZXRbXCIhcmVmXCJdID0gZW5jb2RlX3JhbmdlKHJlZmd1ZXNzKTtcblx0XHRcdFx0XHRpZihvcHRzLnNoZWV0Um93cyAmJiBvcHRzLnNoZWV0Um93cyA8PSByZWZndWVzcy5lLnIpIHtcblx0XHRcdFx0XHRcdGN1cnNoZWV0W1wiIWZ1bGxyZWZcIl0gPSBjdXJzaGVldFtcIiFyZWZcIl07XG5cdFx0XHRcdFx0XHRyZWZndWVzcy5lLnIgPSBvcHRzLnNoZWV0Um93cyAtIDE7XG5cdFx0XHRcdFx0XHRjdXJzaGVldFtcIiFyZWZcIl0gPSBlbmNvZGVfcmFuZ2UocmVmZ3Vlc3MpO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0fVxuXHRcdFx0XHRpZihtZXJnZXMubGVuZ3RoKSBjdXJzaGVldFtcIiFtZXJnZXNcIl0gPSBtZXJnZXM7XG5cdFx0XHRcdGlmKGNzdHlzLmxlbmd0aCA+IDApIGN1cnNoZWV0W1wiIWNvbHNcIl0gPSBjc3R5cztcblx0XHRcdFx0aWYocm93aW5mby5sZW5ndGggPiAwKSBjdXJzaGVldFtcIiFyb3dzXCJdID0gcm93aW5mbztcblx0XHRcdFx0c2hlZXRzW3NoZWV0bmFtZV0gPSBjdXJzaGVldDtcblx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdHJlZmd1ZXNzID0ge3M6IHtyOjIwMDAwMDAsIGM6MjAwMDAwMH0sIGU6IHtyOjAsIGM6MH0gfTtcblx0XHRcdFx0ciA9IGMgPSAwO1xuXHRcdFx0XHRzdGF0ZS5wdXNoKFtSblszXSwgZmFsc2VdKTtcblx0XHRcdFx0dG1wID0geGxtbF9wYXJzZXhtbHRhZyhSblswXSk7XG5cdFx0XHRcdHNoZWV0bmFtZSA9IHVuZXNjYXBleG1sKHRtcC5OYW1lKTtcblx0XHRcdFx0Y3Vyc2hlZXQgPSAob3B0cy5kZW5zZSA/IFtdIDoge30pO1xuXHRcdFx0XHRtZXJnZXMgPSBbXTtcblx0XHRcdFx0YXJyYXlmID0gW107XG5cdFx0XHRcdHJvd2luZm8gPSBbXTtcblx0XHRcdFx0d3Nwcm9wcyA9IHtuYW1lOnNoZWV0bmFtZSwgSGlkZGVuOjB9O1xuXHRcdFx0XHRXb3JrYm9vay5TaGVldHMucHVzaCh3c3Byb3BzKTtcblx0XHRcdH1cblx0XHRcdGJyZWFrO1xuXHRcdGNhc2UgJ3RhYmxlJyAvKmNhc2UgJ1RhYmxlJyovOlxuXHRcdFx0aWYoUm5bMV09PT0nLycpe2lmKCh0bXA9c3RhdGUucG9wKCkpWzBdIT09Um5bM10pIHRocm93IG5ldyBFcnJvcihcIkJhZCBzdGF0ZTogXCIrdG1wLmpvaW4oXCJ8XCIpKTt9XG5cdFx0XHRlbHNlIGlmKFJuWzBdLnNsaWNlKC0yKSA9PSBcIi8+XCIpIGJyZWFrO1xuXHRcdFx0ZWxzZSB7XG5cdFx0XHRcdHN0YXRlLnB1c2goW1JuWzNdLCBmYWxzZV0pO1xuXHRcdFx0XHRjc3R5cyA9IFtdOyBzZWVuY29sID0gZmFsc2U7XG5cdFx0XHR9XG5cdFx0XHRicmVhaztcblxuXHRcdGNhc2UgJ3N0eWxlJyAvKmNhc2UgJ1N0eWxlJyovOlxuXHRcdFx0aWYoUm5bMV09PT0nLycpIHByb2Nlc3Nfc3R5bGVfeGxtbChzdHlsZXMsIHN0YWcsIG9wdHMpO1xuXHRcdFx0ZWxzZSBzdGFnID0geGxtbF9wYXJzZXhtbHRhZyhSblswXSk7XG5cdFx0XHRicmVhaztcblxuXHRcdGNhc2UgJ251bWJlcmZvcm1hdCcgLypjYXNlICdOdW1iZXJGb3JtYXQnKi86XG5cdFx0XHRzdGFnLm5mID0gdW5lc2NhcGV4bWwoeGxtbF9wYXJzZXhtbHRhZyhSblswXSkuRm9ybWF0IHx8IFwiR2VuZXJhbFwiKTtcblx0XHRcdGlmKFhMTUxGb3JtYXRNYXBbc3RhZy5uZl0pIHN0YWcubmYgPSBYTE1MRm9ybWF0TWFwW3N0YWcubmZdO1xuXHRcdFx0Zm9yKHZhciBzc2ZpZHggPSAwOyBzc2ZpZHggIT0gMHgxODg7ICsrc3NmaWR4KSBpZih0YWJsZV9mbXRbc3NmaWR4XSA9PSBzdGFnLm5mKSBicmVhaztcblx0XHRcdGlmKHNzZmlkeCA9PSAweDE4OCkgZm9yKHNzZmlkeCA9IDB4Mzk7IHNzZmlkeCAhPSAweDE4ODsgKytzc2ZpZHgpIGlmKHRhYmxlX2ZtdFtzc2ZpZHhdID09IG51bGwpIHsgU1NGX2xvYWQoc3RhZy5uZiwgc3NmaWR4KTsgYnJlYWs7IH1cblx0XHRcdGJyZWFrO1xuXG5cdFx0Y2FzZSAnY29sdW1uJyAvKmNhc2UgJ0NvbHVtbicqLzpcblx0XHRcdGlmKHN0YXRlW3N0YXRlLmxlbmd0aC0xXVswXSAhPT0gLyonVGFibGUnKi8ndGFibGUnKSBicmVhaztcblx0XHRcdGNzdHkgPSB4bG1sX3BhcnNleG1sdGFnKFJuWzBdKTtcblx0XHRcdGlmKGNzdHkuSGlkZGVuKSB7IGNzdHkuaGlkZGVuID0gdHJ1ZTsgZGVsZXRlIGNzdHkuSGlkZGVuOyB9XG5cdFx0XHRpZihjc3R5LldpZHRoKSBjc3R5LndweCA9IHBhcnNlSW50KGNzdHkuV2lkdGgsIDEwKTtcblx0XHRcdGlmKCFzZWVuY29sICYmIGNzdHkud3B4ID4gMTApIHtcblx0XHRcdFx0c2VlbmNvbCA9IHRydWU7IE1EVyA9IERFRl9NRFc7IC8vZmluZF9tZHdfd3B4KGNzdHkud3B4KTtcblx0XHRcdFx0Zm9yKHZhciBfY29sID0gMDsgX2NvbCA8IGNzdHlzLmxlbmd0aDsgKytfY29sKSBpZihjc3R5c1tfY29sXSkgcHJvY2Vzc19jb2woY3N0eXNbX2NvbF0pO1xuXHRcdFx0fVxuXHRcdFx0aWYoc2VlbmNvbCkgcHJvY2Vzc19jb2woY3N0eSk7XG5cdFx0XHRjc3R5c1soY3N0eS5JbmRleC0xfHxjc3R5cy5sZW5ndGgpXSA9IGNzdHk7XG5cdFx0XHRmb3IodmFyIGkgPSAwOyBpIDwgK2NzdHkuU3BhbjsgKytpKSBjc3R5c1tjc3R5cy5sZW5ndGhdID0gZHVwKGNzdHkpO1xuXHRcdFx0YnJlYWs7XG5cblx0XHRjYXNlICduYW1lZHJhbmdlJyAvKmNhc2UgJ05hbWVkUmFuZ2UnKi86XG5cdFx0XHRpZihSblsxXT09PScvJykgYnJlYWs7XG5cdFx0XHRpZighV29ya2Jvb2suTmFtZXMpIFdvcmtib29rLk5hbWVzID0gW107XG5cdFx0XHR2YXIgX05hbWVkUmFuZ2UgPSBwYXJzZXhtbHRhZyhSblswXSk7XG5cdFx0XHR2YXIgX0RlZmluZWROYW1lLyo6RGVmaW5lZE5hbWUqLyA9ICh7XG5cdFx0XHRcdE5hbWU6IF9OYW1lZFJhbmdlLk5hbWUsXG5cdFx0XHRcdFJlZjogcmNfdG9fYTEoX05hbWVkUmFuZ2UuUmVmZXJzVG8uc2xpY2UoMSksIHtyOjAsIGM6MH0pXG5cdFx0XHR9Lyo6YW55Ki8pO1xuXHRcdFx0aWYoV29ya2Jvb2suU2hlZXRzLmxlbmd0aD4wKSBfRGVmaW5lZE5hbWUuU2hlZXQ9V29ya2Jvb2suU2hlZXRzLmxlbmd0aC0xO1xuXHRcdFx0Lyo6OiBpZihXb3JrYm9vay5OYW1lcykgKi9Xb3JrYm9vay5OYW1lcy5wdXNoKF9EZWZpbmVkTmFtZSk7XG5cdFx0XHRicmVhaztcblxuXHRcdGNhc2UgJ25hbWVkY2VsbCcgLypjYXNlICdOYW1lZENlbGwnKi86IGJyZWFrO1xuXHRcdGNhc2UgJ2InIC8qY2FzZSAnQicqLzogYnJlYWs7XG5cdFx0Y2FzZSAnaScgLypjYXNlICdJJyovOiBicmVhaztcblx0XHRjYXNlICd1JyAvKmNhc2UgJ1UnKi86IGJyZWFrO1xuXHRcdGNhc2UgJ3MnIC8qY2FzZSAnUycqLzogYnJlYWs7XG5cdFx0Y2FzZSAnZW0nIC8qY2FzZSAnRU0nKi86IGJyZWFrO1xuXHRcdGNhc2UgJ2gyJyAvKmNhc2UgJ0gyJyovOiBicmVhaztcblx0XHRjYXNlICdoMycgLypjYXNlICdIMycqLzogYnJlYWs7XG5cdFx0Y2FzZSAnc3ViJyAvKmNhc2UgJ1N1YicqLzogYnJlYWs7XG5cdFx0Y2FzZSAnc3VwJyAvKmNhc2UgJ1N1cCcqLzogYnJlYWs7XG5cdFx0Y2FzZSAnc3BhbicgLypjYXNlICdTcGFuJyovOiBicmVhaztcblx0XHRjYXNlICdhbGlnbm1lbnQnIC8qY2FzZSAnQWxpZ25tZW50JyovOlxuXHRcdFx0YnJlYWs7XG5cdFx0Y2FzZSAnYm9yZGVycycgLypjYXNlICdCb3JkZXJzJyovOiBicmVhaztcblx0XHRjYXNlICdib3JkZXInIC8qY2FzZSAnQm9yZGVyJyovOiBicmVhaztcblx0XHRjYXNlICdmb250JyAvKmNhc2UgJ0ZvbnQnKi86XG5cdFx0XHRpZihSblswXS5zbGljZSgtMikgPT09IFwiLz5cIikgYnJlYWs7XG5cdFx0XHRlbHNlIGlmKFJuWzFdPT09XCIvXCIpIHNzICs9IHN0ci5zbGljZShmaWR4LCBSbi5pbmRleCk7XG5cdFx0XHRlbHNlIGZpZHggPSBSbi5pbmRleCArIFJuWzBdLmxlbmd0aDtcblx0XHRcdGJyZWFrO1xuXHRcdGNhc2UgJ2ludGVyaW9yJyAvKmNhc2UgJ0ludGVyaW9yJyovOlxuXHRcdFx0aWYoIW9wdHMuY2VsbFN0eWxlcykgYnJlYWs7XG5cdFx0XHRzdGFnLkludGVyaW9yID0geGxtbF9wYXJzZXhtbHRhZyhSblswXSk7XG5cdFx0XHRicmVhaztcblx0XHRjYXNlICdwcm90ZWN0aW9uJyAvKmNhc2UgJ1Byb3RlY3Rpb24nKi86IGJyZWFrO1xuXG5cdFx0Y2FzZSAnYXV0aG9yJyAvKmNhc2UgJ0F1dGhvcicqLzpcblx0XHRjYXNlICd0aXRsZScgLypjYXNlICdUaXRsZScqLzpcblx0XHRjYXNlICdkZXNjcmlwdGlvbicgLypjYXNlICdEZXNjcmlwdGlvbicqLzpcblx0XHRjYXNlICdjcmVhdGVkJyAvKmNhc2UgJ0NyZWF0ZWQnKi86XG5cdFx0Y2FzZSAna2V5d29yZHMnIC8qY2FzZSAnS2V5d29yZHMnKi86XG5cdFx0Y2FzZSAnc3ViamVjdCcgLypjYXNlICdTdWJqZWN0JyovOlxuXHRcdGNhc2UgJ2NhdGVnb3J5JyAvKmNhc2UgJ0NhdGVnb3J5JyovOlxuXHRcdGNhc2UgJ2NvbXBhbnknIC8qY2FzZSAnQ29tcGFueScqLzpcblx0XHRjYXNlICdsYXN0YXV0aG9yJyAvKmNhc2UgJ0xhc3RBdXRob3InKi86XG5cdFx0Y2FzZSAnbGFzdHNhdmVkJyAvKmNhc2UgJ0xhc3RTYXZlZCcqLzpcblx0XHRjYXNlICdsYXN0cHJpbnRlZCcgLypjYXNlICdMYXN0UHJpbnRlZCcqLzpcblx0XHRjYXNlICd2ZXJzaW9uJyAvKmNhc2UgJ1ZlcnNpb24nKi86XG5cdFx0Y2FzZSAncmV2aXNpb24nIC8qY2FzZSAnUmV2aXNpb24nKi86XG5cdFx0Y2FzZSAndG90YWx0aW1lJyAvKmNhc2UgJ1RvdGFsVGltZScqLzpcblx0XHRjYXNlICdoeXBlcmxpbmtiYXNlJyAvKmNhc2UgJ0h5cGVybGlua0Jhc2UnKi86XG5cdFx0Y2FzZSAnbWFuYWdlcicgLypjYXNlICdNYW5hZ2VyJyovOlxuXHRcdGNhc2UgJ2NvbnRlbnRzdGF0dXMnIC8qY2FzZSAnQ29udGVudFN0YXR1cycqLzpcblx0XHRjYXNlICdpZGVudGlmaWVyJyAvKmNhc2UgJ0lkZW50aWZpZXInKi86XG5cdFx0Y2FzZSAnbGFuZ3VhZ2UnIC8qY2FzZSAnTGFuZ3VhZ2UnKi86XG5cdFx0Y2FzZSAnYXBwbmFtZScgLypjYXNlICdBcHBOYW1lJyovOlxuXHRcdFx0aWYoUm5bMF0uc2xpY2UoLTIpID09PSBcIi8+XCIpIGJyZWFrO1xuXHRcdFx0ZWxzZSBpZihSblsxXT09PVwiL1wiKSB4bG1sX3NldF9wcm9wKFByb3BzLCByYXdfUm4zLCBzdHIuc2xpY2UocGlkeCwgUm4uaW5kZXgpKTtcblx0XHRcdGVsc2UgcGlkeCA9IFJuLmluZGV4ICsgUm5bMF0ubGVuZ3RoO1xuXHRcdFx0YnJlYWs7XG5cdFx0Y2FzZSAncGFyYWdyYXBocycgLypjYXNlICdQYXJhZ3JhcGhzJyovOiBicmVhaztcblxuXHRcdGNhc2UgJ3N0eWxlcycgLypjYXNlICdTdHlsZXMnKi86XG5cdFx0Y2FzZSAnd29ya2Jvb2snIC8qY2FzZSAnV29ya2Jvb2snKi86XG5cdFx0XHRpZihSblsxXT09PScvJyl7aWYoKHRtcD1zdGF0ZS5wb3AoKSlbMF0hPT1SblszXSkgdGhyb3cgbmV3IEVycm9yKFwiQmFkIHN0YXRlOiBcIit0bXAuam9pbihcInxcIikpO31cblx0XHRcdGVsc2Ugc3RhdGUucHVzaChbUm5bM10sIGZhbHNlXSk7XG5cdFx0XHRicmVhaztcblxuXHRcdGNhc2UgJ2NvbW1lbnQnIC8qY2FzZSAnQ29tbWVudCcqLzpcblx0XHRcdGlmKFJuWzFdPT09Jy8nKXtcblx0XHRcdFx0aWYoKHRtcD1zdGF0ZS5wb3AoKSlbMF0hPT1SblszXSkgdGhyb3cgbmV3IEVycm9yKFwiQmFkIHN0YXRlOiBcIit0bXAuam9pbihcInxcIikpO1xuXHRcdFx0XHR4bG1sX2NsZWFuX2NvbW1lbnQoY29tbWVudCk7XG5cdFx0XHRcdGNvbW1lbnRzLnB1c2goY29tbWVudCk7XG5cdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRzdGF0ZS5wdXNoKFtSblszXSwgZmFsc2VdKTtcblx0XHRcdFx0dG1wID0geGxtbF9wYXJzZXhtbHRhZyhSblswXSk7XG5cdFx0XHRcdGNvbW1lbnQgPSAoe2E6dG1wLkF1dGhvcn0vKjphbnkqLyk7XG5cdFx0XHR9XG5cdFx0XHRicmVhaztcblxuXHRcdGNhc2UgJ2F1dG9maWx0ZXInIC8qY2FzZSAnQXV0b0ZpbHRlcicqLzpcblx0XHRcdGlmKFJuWzFdPT09Jy8nKXtpZigodG1wPXN0YXRlLnBvcCgpKVswXSE9PVJuWzNdKSB0aHJvdyBuZXcgRXJyb3IoXCJCYWQgc3RhdGU6IFwiK3RtcC5qb2luKFwifFwiKSk7fVxuXHRcdFx0ZWxzZSBpZihSblswXS5jaGFyQXQoUm5bMF0ubGVuZ3RoLTIpICE9PSAnLycpIHtcblx0XHRcdFx0dmFyIEF1dG9GaWx0ZXIgPSB4bG1sX3BhcnNleG1sdGFnKFJuWzBdKTtcblx0XHRcdFx0Y3Vyc2hlZXRbJyFhdXRvZmlsdGVyJ10gPSB7IHJlZjpyY190b19hMShBdXRvRmlsdGVyLlJhbmdlKS5yZXBsYWNlKC9cXCQvZyxcIlwiKSB9O1xuXHRcdFx0XHRzdGF0ZS5wdXNoKFtSblszXSwgdHJ1ZV0pO1xuXHRcdFx0fVxuXHRcdFx0YnJlYWs7XG5cblx0XHRjYXNlICduYW1lJyAvKmNhc2UgJ05hbWUnKi86IGJyZWFrO1xuXG5cdFx0Y2FzZSAnZGF0YXZhbGlkYXRpb24nIC8qY2FzZSAnRGF0YVZhbGlkYXRpb24nKi86XG5cdFx0XHRpZihSblsxXT09PScvJyl7XG5cdFx0XHRcdGlmKCh0bXA9c3RhdGUucG9wKCkpWzBdIT09Um5bM10pIHRocm93IG5ldyBFcnJvcihcIkJhZCBzdGF0ZTogXCIrdG1wLmpvaW4oXCJ8XCIpKTtcblx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdGlmKFJuWzBdLmNoYXJBdChSblswXS5sZW5ndGgtMikgIT09ICcvJykgc3RhdGUucHVzaChbUm5bM10sIHRydWVdKTtcblx0XHRcdH1cblx0XHRcdGJyZWFrO1xuXG5cdFx0Y2FzZSAncGl4ZWxzcGVyaW5jaCcgLypjYXNlICdQaXhlbHNQZXJJbmNoJyovOlxuXHRcdFx0YnJlYWs7XG5cdFx0Y2FzZSAnY29tcG9uZW50b3B0aW9ucycgLypjYXNlICdDb21wb25lbnRPcHRpb25zJyovOlxuXHRcdGNhc2UgJ2RvY3VtZW50cHJvcGVydGllcycgLypjYXNlICdEb2N1bWVudFByb3BlcnRpZXMnKi86XG5cdFx0Y2FzZSAnY3VzdG9tZG9jdW1lbnRwcm9wZXJ0aWVzJyAvKmNhc2UgJ0N1c3RvbURvY3VtZW50UHJvcGVydGllcycqLzpcblx0XHRjYXNlICdvZmZpY2Vkb2N1bWVudHNldHRpbmdzJyAvKmNhc2UgJ09mZmljZURvY3VtZW50U2V0dGluZ3MnKi86XG5cdFx0Y2FzZSAncGl2b3R0YWJsZScgLypjYXNlICdQaXZvdFRhYmxlJyovOlxuXHRcdGNhc2UgJ3Bpdm90Y2FjaGUnIC8qY2FzZSAnUGl2b3RDYWNoZScqLzpcblx0XHRjYXNlICduYW1lcycgLypjYXNlICdOYW1lcycqLzpcblx0XHRjYXNlICdtYXBpbmZvJyAvKmNhc2UgJ01hcEluZm8nKi86XG5cdFx0Y2FzZSAncGFnZWJyZWFrcycgLypjYXNlICdQYWdlQnJlYWtzJyovOlxuXHRcdGNhc2UgJ3F1ZXJ5dGFibGUnIC8qY2FzZSAnUXVlcnlUYWJsZScqLzpcblx0XHRjYXNlICdzb3J0aW5nJyAvKmNhc2UgJ1NvcnRpbmcnKi86XG5cdFx0Y2FzZSAnc2NoZW1hJyAvKmNhc2UgJ1NjaGVtYScqLzogLy9jYXNlICdkYXRhJyAvKmNhc2UgJ2RhdGEnKi86XG5cdFx0Y2FzZSAnY29uZGl0aW9uYWxmb3JtYXR0aW5nJyAvKmNhc2UgJ0NvbmRpdGlvbmFsRm9ybWF0dGluZycqLzpcblx0XHRjYXNlICdzbWFydHRhZ3R5cGUnIC8qY2FzZSAnU21hcnRUYWdUeXBlJyovOlxuXHRcdGNhc2UgJ3NtYXJ0dGFncycgLypjYXNlICdTbWFydFRhZ3MnKi86XG5cdFx0Y2FzZSAnZXhjZWx3b3JrYm9vaycgLypjYXNlICdFeGNlbFdvcmtib29rJyovOlxuXHRcdGNhc2UgJ3dvcmtib29rb3B0aW9ucycgLypjYXNlICdXb3JrYm9va09wdGlvbnMnKi86XG5cdFx0Y2FzZSAnd29ya3NoZWV0b3B0aW9ucycgLypjYXNlICdXb3Jrc2hlZXRPcHRpb25zJyovOlxuXHRcdFx0aWYoUm5bMV09PT0nLycpe2lmKCh0bXA9c3RhdGUucG9wKCkpWzBdIT09Um5bM10pIHRocm93IG5ldyBFcnJvcihcIkJhZCBzdGF0ZTogXCIrdG1wLmpvaW4oXCJ8XCIpKTt9XG5cdFx0XHRlbHNlIGlmKFJuWzBdLmNoYXJBdChSblswXS5sZW5ndGgtMikgIT09ICcvJykgc3RhdGUucHVzaChbUm5bM10sIHRydWVdKTtcblx0XHRcdGJyZWFrO1xuXG5cdFx0Y2FzZSAnbnVsbCcgLypjYXNlICdOdWxsJyovOiBicmVhaztcblxuXHRcdGRlZmF1bHQ6XG5cdFx0XHQvKiBGT0RTIGZpbGUgcm9vdCBpcyA8b2ZmaWNlOmRvY3VtZW50PiAqL1xuXHRcdFx0aWYoc3RhdGUubGVuZ3RoID09IDAgJiYgUm5bM10gPT0gXCJkb2N1bWVudFwiKSByZXR1cm4gcGFyc2VfZm9kcyhzdHIsIG9wdHMpO1xuXHRcdFx0LyogVU9TIGZpbGUgcm9vdCBpcyA8dW9mOlVPRj4gKi9cblx0XHRcdGlmKHN0YXRlLmxlbmd0aCA9PSAwICYmIFJuWzNdID09IFwidW9mXCIvKlwiVU9GXCIqLykgcmV0dXJuIHBhcnNlX2ZvZHMoc3RyLCBvcHRzKTtcblxuXHRcdFx0dmFyIHNlZW4gPSB0cnVlO1xuXHRcdFx0c3dpdGNoKHN0YXRlW3N0YXRlLmxlbmd0aC0xXVswXSkge1xuXHRcdFx0XHQvKiBPZmZpY2VEb2N1bWVudFNldHRpbmdzICovXG5cdFx0XHRcdGNhc2UgJ29mZmljZWRvY3VtZW50c2V0dGluZ3MnIC8qY2FzZSAnT2ZmaWNlRG9jdW1lbnRTZXR0aW5ncycqLzogc3dpdGNoKFJuWzNdKSB7XG5cdFx0XHRcdFx0Y2FzZSAnYWxsb3dwbmcnIC8qY2FzZSAnQWxsb3dQTkcnKi86IGJyZWFrO1xuXHRcdFx0XHRcdGNhc2UgJ3JlbW92ZXBlcnNvbmFsaW5mb3JtYXRpb24nIC8qY2FzZSAnUmVtb3ZlUGVyc29uYWxJbmZvcm1hdGlvbicqLzogYnJlYWs7XG5cdFx0XHRcdFx0Y2FzZSAnZG93bmxvYWRjb21wb25lbnRzJyAvKmNhc2UgJ0Rvd25sb2FkQ29tcG9uZW50cycqLzogYnJlYWs7XG5cdFx0XHRcdFx0Y2FzZSAnbG9jYXRpb25vZmNvbXBvbmVudHMnIC8qY2FzZSAnTG9jYXRpb25PZkNvbXBvbmVudHMnKi86IGJyZWFrO1xuXHRcdFx0XHRcdGNhc2UgJ2NvbG9ycycgLypjYXNlICdDb2xvcnMnKi86IGJyZWFrO1xuXHRcdFx0XHRcdGNhc2UgJ2NvbG9yJyAvKmNhc2UgJ0NvbG9yJyovOiBicmVhaztcblx0XHRcdFx0XHRjYXNlICdpbmRleCcgLypjYXNlICdJbmRleCcqLzogYnJlYWs7XG5cdFx0XHRcdFx0Y2FzZSAncmdiJyAvKmNhc2UgJ1JHQicqLzogYnJlYWs7XG5cdFx0XHRcdFx0Y2FzZSAndGFyZ2V0c2NyZWVuc2l6ZScgLypjYXNlICdUYXJnZXRTY3JlZW5TaXplJyovOiBicmVhaztcblx0XHRcdFx0XHRjYXNlICdyZWFkb25seXJlY29tbWVuZGVkJyAvKmNhc2UgJ1JlYWRPbmx5UmVjb21tZW5kZWQnKi86IGJyZWFrO1xuXHRcdFx0XHRcdGRlZmF1bHQ6IHNlZW4gPSBmYWxzZTtcblx0XHRcdFx0fSBicmVhaztcblxuXHRcdFx0XHQvKiBDb21wb25lbnRPcHRpb25zICovXG5cdFx0XHRcdGNhc2UgJ2NvbXBvbmVudG9wdGlvbnMnIC8qY2FzZSAnQ29tcG9uZW50T3B0aW9ucycqLzogc3dpdGNoKFJuWzNdKSB7XG5cdFx0XHRcdFx0Y2FzZSAndG9vbGJhcicgLypjYXNlICdUb29sYmFyJyovOiBicmVhaztcblx0XHRcdFx0XHRjYXNlICdoaWRlb2ZmaWNlbG9nbycgLypjYXNlICdIaWRlT2ZmaWNlTG9nbycqLzogYnJlYWs7XG5cdFx0XHRcdFx0Y2FzZSAnc3ByZWFkc2hlZXRhdXRvZml0JyAvKmNhc2UgJ1NwcmVhZHNoZWV0QXV0b0ZpdCcqLzogYnJlYWs7XG5cdFx0XHRcdFx0Y2FzZSAnbGFiZWwnIC8qY2FzZSAnTGFiZWwnKi86IGJyZWFrO1xuXHRcdFx0XHRcdGNhc2UgJ2NhcHRpb24nIC8qY2FzZSAnQ2FwdGlvbicqLzogYnJlYWs7XG5cdFx0XHRcdFx0Y2FzZSAnbWF4aGVpZ2h0JyAvKmNhc2UgJ01heEhlaWdodCcqLzogYnJlYWs7XG5cdFx0XHRcdFx0Y2FzZSAnbWF4d2lkdGgnIC8qY2FzZSAnTWF4V2lkdGgnKi86IGJyZWFrO1xuXHRcdFx0XHRcdGNhc2UgJ25leHRzaGVldG51bWJlcicgLypjYXNlICdOZXh0U2hlZXROdW1iZXInKi86IGJyZWFrO1xuXHRcdFx0XHRcdGRlZmF1bHQ6IHNlZW4gPSBmYWxzZTtcblx0XHRcdFx0fSBicmVhaztcblxuXHRcdFx0XHQvKiBFeGNlbFdvcmtib29rICovXG5cdFx0XHRcdGNhc2UgJ2V4Y2Vsd29ya2Jvb2snIC8qY2FzZSAnRXhjZWxXb3JrYm9vaycqLzogc3dpdGNoKFJuWzNdKSB7XG5cdFx0XHRcdFx0Y2FzZSAnZGF0ZTE5MDQnIC8qY2FzZSAnRGF0ZTE5MDQnKi86XG5cdFx0XHRcdFx0XHQvKjo6IGlmKCFXb3JrYm9vay5XQlByb3BzKSBXb3JrYm9vay5XQlByb3BzID0ge307ICovXG5cdFx0XHRcdFx0XHRXb3JrYm9vay5XQlByb3BzLmRhdGUxOTA0ID0gdHJ1ZTtcblx0XHRcdFx0XHRcdGJyZWFrO1xuXHRcdFx0XHRcdGNhc2UgJ3dpbmRvd2hlaWdodCcgLypjYXNlICdXaW5kb3dIZWlnaHQnKi86IGJyZWFrO1xuXHRcdFx0XHRcdGNhc2UgJ3dpbmRvd3dpZHRoJyAvKmNhc2UgJ1dpbmRvd1dpZHRoJyovOiBicmVhaztcblx0XHRcdFx0XHRjYXNlICd3aW5kb3d0b3B4JyAvKmNhc2UgJ1dpbmRvd1RvcFgnKi86IGJyZWFrO1xuXHRcdFx0XHRcdGNhc2UgJ3dpbmRvd3RvcHknIC8qY2FzZSAnV2luZG93VG9wWScqLzogYnJlYWs7XG5cdFx0XHRcdFx0Y2FzZSAndGFicmF0aW8nIC8qY2FzZSAnVGFiUmF0aW8nKi86IGJyZWFrO1xuXHRcdFx0XHRcdGNhc2UgJ3Byb3RlY3RzdHJ1Y3R1cmUnIC8qY2FzZSAnUHJvdGVjdFN0cnVjdHVyZScqLzogYnJlYWs7XG5cdFx0XHRcdFx0Y2FzZSAncHJvdGVjdHdpbmRvdycgLypjYXNlICdQcm90ZWN0V2luZG93JyovOiBicmVhaztcblx0XHRcdFx0XHRjYXNlICdwcm90ZWN0d2luZG93cycgLypjYXNlICdQcm90ZWN0V2luZG93cycqLzogYnJlYWs7XG5cdFx0XHRcdFx0Y2FzZSAnYWN0aXZlc2hlZXQnIC8qY2FzZSAnQWN0aXZlU2hlZXQnKi86IGJyZWFrO1xuXHRcdFx0XHRcdGNhc2UgJ2Rpc3BsYXlpbmtub3RlcycgLypjYXNlICdEaXNwbGF5SW5rTm90ZXMnKi86IGJyZWFrO1xuXHRcdFx0XHRcdGNhc2UgJ2ZpcnN0dmlzaWJsZXNoZWV0JyAvKmNhc2UgJ0ZpcnN0VmlzaWJsZVNoZWV0JyovOiBicmVhaztcblx0XHRcdFx0XHRjYXNlICdzdXBib29rJyAvKmNhc2UgJ1N1cEJvb2snKi86IGJyZWFrO1xuXHRcdFx0XHRcdGNhc2UgJ3NoZWV0bmFtZScgLypjYXNlICdTaGVldE5hbWUnKi86IGJyZWFrO1xuXHRcdFx0XHRcdGNhc2UgJ3NoZWV0aW5kZXgnIC8qY2FzZSAnU2hlZXRJbmRleCcqLzogYnJlYWs7XG5cdFx0XHRcdFx0Y2FzZSAnc2hlZXRpbmRleGZpcnN0JyAvKmNhc2UgJ1NoZWV0SW5kZXhGaXJzdCcqLzogYnJlYWs7XG5cdFx0XHRcdFx0Y2FzZSAnc2hlZXRpbmRleGxhc3QnIC8qY2FzZSAnU2hlZXRJbmRleExhc3QnKi86IGJyZWFrO1xuXHRcdFx0XHRcdGNhc2UgJ2RsbCcgLypjYXNlICdEbGwnKi86IGJyZWFrO1xuXHRcdFx0XHRcdGNhc2UgJ2FjY2VwdGxhYmVsc2luZm9ybXVsYXMnIC8qY2FzZSAnQWNjZXB0TGFiZWxzSW5Gb3JtdWxhcycqLzogYnJlYWs7XG5cdFx0XHRcdFx0Y2FzZSAnZG9ub3RzYXZlbGlua3ZhbHVlcycgLypjYXNlICdEb05vdFNhdmVMaW5rVmFsdWVzJyovOiBicmVhaztcblx0XHRcdFx0XHRjYXNlICdpdGVyYXRpb24nIC8qY2FzZSAnSXRlcmF0aW9uJyovOiBicmVhaztcblx0XHRcdFx0XHRjYXNlICdtYXhpdGVyYXRpb25zJyAvKmNhc2UgJ01heEl0ZXJhdGlvbnMnKi86IGJyZWFrO1xuXHRcdFx0XHRcdGNhc2UgJ21heGNoYW5nZScgLypjYXNlICdNYXhDaGFuZ2UnKi86IGJyZWFrO1xuXHRcdFx0XHRcdGNhc2UgJ3BhdGgnIC8qY2FzZSAnUGF0aCcqLzogYnJlYWs7XG5cdFx0XHRcdFx0Y2FzZSAneGN0JyAvKmNhc2UgJ1hjdCcqLzogYnJlYWs7XG5cdFx0XHRcdFx0Y2FzZSAnY291bnQnIC8qY2FzZSAnQ291bnQnKi86IGJyZWFrO1xuXHRcdFx0XHRcdGNhc2UgJ3NlbGVjdGVkc2hlZXRzJyAvKmNhc2UgJ1NlbGVjdGVkU2hlZXRzJyovOiBicmVhaztcblx0XHRcdFx0XHRjYXNlICdjYWxjdWxhdGlvbicgLypjYXNlICdDYWxjdWxhdGlvbicqLzogYnJlYWs7XG5cdFx0XHRcdFx0Y2FzZSAndW5jYWxjZWQnIC8qY2FzZSAnVW5jYWxjZWQnKi86IGJyZWFrO1xuXHRcdFx0XHRcdGNhc2UgJ3N0YXJ0dXBwcm9tcHQnIC8qY2FzZSAnU3RhcnR1cFByb21wdCcqLzogYnJlYWs7XG5cdFx0XHRcdFx0Y2FzZSAnY3JuJyAvKmNhc2UgJ0NybicqLzogYnJlYWs7XG5cdFx0XHRcdFx0Y2FzZSAnZXh0ZXJubmFtZScgLypjYXNlICdFeHRlcm5OYW1lJyovOiBicmVhaztcblx0XHRcdFx0XHRjYXNlICdmb3JtdWxhJyAvKmNhc2UgJ0Zvcm11bGEnKi86IGJyZWFrO1xuXHRcdFx0XHRcdGNhc2UgJ2NvbGZpcnN0JyAvKmNhc2UgJ0NvbEZpcnN0JyovOiBicmVhaztcblx0XHRcdFx0XHRjYXNlICdjb2xsYXN0JyAvKmNhc2UgJ0NvbExhc3QnKi86IGJyZWFrO1xuXHRcdFx0XHRcdGNhc2UgJ3dhbnRhZHZpc2UnIC8qY2FzZSAnV2FudEFkdmlzZScqLzogYnJlYWs7XG5cdFx0XHRcdFx0Y2FzZSAnYm9vbGVhbicgLypjYXNlICdCb29sZWFuJyovOiBicmVhaztcblx0XHRcdFx0XHRjYXNlICdlcnJvcicgLypjYXNlICdFcnJvcicqLzogYnJlYWs7XG5cdFx0XHRcdFx0Y2FzZSAndGV4dCcgLypjYXNlICdUZXh0JyovOiBicmVhaztcblx0XHRcdFx0XHRjYXNlICdvbGUnIC8qY2FzZSAnT0xFJyovOiBicmVhaztcblx0XHRcdFx0XHRjYXNlICdub2F1dG9yZWNvdmVyJyAvKmNhc2UgJ05vQXV0b1JlY292ZXInKi86IGJyZWFrO1xuXHRcdFx0XHRcdGNhc2UgJ3B1Ymxpc2hvYmplY3RzJyAvKmNhc2UgJ1B1Ymxpc2hPYmplY3RzJyovOiBicmVhaztcblx0XHRcdFx0XHRjYXNlICdkb25vdGNhbGN1bGF0ZWJlZm9yZXNhdmUnIC8qY2FzZSAnRG9Ob3RDYWxjdWxhdGVCZWZvcmVTYXZlJyovOiBicmVhaztcblx0XHRcdFx0XHRjYXNlICdudW1iZXInIC8qY2FzZSAnTnVtYmVyJyovOiBicmVhaztcblx0XHRcdFx0XHRjYXNlICdyZWZtb2RlcjFjMScgLypjYXNlICdSZWZNb2RlUjFDMScqLzogYnJlYWs7XG5cdFx0XHRcdFx0Y2FzZSAnZW1iZWRzYXZlc21hcnR0YWdzJyAvKmNhc2UgJ0VtYmVkU2F2ZVNtYXJ0VGFncycqLzogYnJlYWs7XG5cdFx0XHRcdFx0ZGVmYXVsdDogc2VlbiA9IGZhbHNlO1xuXHRcdFx0XHR9IGJyZWFrO1xuXG5cdFx0XHRcdC8qIFdvcmtib29rT3B0aW9ucyAqL1xuXHRcdFx0XHRjYXNlICd3b3JrYm9va29wdGlvbnMnIC8qY2FzZSAnV29ya2Jvb2tPcHRpb25zJyovOiBzd2l0Y2goUm5bM10pIHtcblx0XHRcdFx0XHRjYXNlICdvd2N2ZXJzaW9uJyAvKmNhc2UgJ09XQ1ZlcnNpb24nKi86IGJyZWFrO1xuXHRcdFx0XHRcdGNhc2UgJ2hlaWdodCcgLypjYXNlICdIZWlnaHQnKi86IGJyZWFrO1xuXHRcdFx0XHRcdGNhc2UgJ3dpZHRoJyAvKmNhc2UgJ1dpZHRoJyovOiBicmVhaztcblx0XHRcdFx0XHRkZWZhdWx0OiBzZWVuID0gZmFsc2U7XG5cdFx0XHRcdH0gYnJlYWs7XG5cblx0XHRcdFx0LyogV29ya3NoZWV0T3B0aW9ucyAqL1xuXHRcdFx0XHRjYXNlICd3b3Jrc2hlZXRvcHRpb25zJyAvKmNhc2UgJ1dvcmtzaGVldE9wdGlvbnMnKi86IHN3aXRjaChSblszXSkge1xuXHRcdFx0XHRcdGNhc2UgJ3Zpc2libGUnIC8qY2FzZSAnVmlzaWJsZScqLzpcblx0XHRcdFx0XHRcdGlmKFJuWzBdLnNsaWNlKC0yKSA9PT0gXCIvPlwiKXsvKiBlbXB0eSAqL31cblx0XHRcdFx0XHRcdGVsc2UgaWYoUm5bMV09PT1cIi9cIikgc3dpdGNoKHN0ci5zbGljZShwaWR4LCBSbi5pbmRleCkpIHtcblx0XHRcdFx0XHRcdFx0Y2FzZSBcIlNoZWV0SGlkZGVuXCI6IHdzcHJvcHMuSGlkZGVuID0gMTsgYnJlYWs7XG5cdFx0XHRcdFx0XHRcdGNhc2UgXCJTaGVldFZlcnlIaWRkZW5cIjogd3Nwcm9wcy5IaWRkZW4gPSAyOyBicmVhaztcblx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHRcdGVsc2UgcGlkeCA9IFJuLmluZGV4ICsgUm5bMF0ubGVuZ3RoO1xuXHRcdFx0XHRcdFx0YnJlYWs7XG5cdFx0XHRcdFx0Y2FzZSAnaGVhZGVyJyAvKmNhc2UgJ0hlYWRlcicqLzpcblx0XHRcdFx0XHRcdGlmKCFjdXJzaGVldFsnIW1hcmdpbnMnXSkgZGVmYXVsdF9tYXJnaW5zKGN1cnNoZWV0WychbWFyZ2lucyddPXt9LCAneGxtbCcpO1xuXHRcdFx0XHRcdFx0aWYoIWlzTmFOKCtwYXJzZXhtbHRhZyhSblswXSkuTWFyZ2luKSkgY3Vyc2hlZXRbJyFtYXJnaW5zJ10uaGVhZGVyID0gK3BhcnNleG1sdGFnKFJuWzBdKS5NYXJnaW47XG5cdFx0XHRcdFx0XHRicmVhaztcblx0XHRcdFx0XHRjYXNlICdmb290ZXInIC8qY2FzZSAnRm9vdGVyJyovOlxuXHRcdFx0XHRcdFx0aWYoIWN1cnNoZWV0WychbWFyZ2lucyddKSBkZWZhdWx0X21hcmdpbnMoY3Vyc2hlZXRbJyFtYXJnaW5zJ109e30sICd4bG1sJyk7XG5cdFx0XHRcdFx0XHRpZighaXNOYU4oK3BhcnNleG1sdGFnKFJuWzBdKS5NYXJnaW4pKSBjdXJzaGVldFsnIW1hcmdpbnMnXS5mb290ZXIgPSArcGFyc2V4bWx0YWcoUm5bMF0pLk1hcmdpbjtcblx0XHRcdFx0XHRcdGJyZWFrO1xuXHRcdFx0XHRcdGNhc2UgJ3BhZ2VtYXJnaW5zJyAvKmNhc2UgJ1BhZ2VNYXJnaW5zJyovOlxuXHRcdFx0XHRcdFx0dmFyIHBhZ2VtYXJnaW5zID0gcGFyc2V4bWx0YWcoUm5bMF0pO1xuXHRcdFx0XHRcdFx0aWYoIWN1cnNoZWV0WychbWFyZ2lucyddKSBkZWZhdWx0X21hcmdpbnMoY3Vyc2hlZXRbJyFtYXJnaW5zJ109e30sJ3hsbWwnKTtcblx0XHRcdFx0XHRcdGlmKCFpc05hTigrcGFnZW1hcmdpbnMuVG9wKSkgY3Vyc2hlZXRbJyFtYXJnaW5zJ10udG9wID0gK3BhZ2VtYXJnaW5zLlRvcDtcblx0XHRcdFx0XHRcdGlmKCFpc05hTigrcGFnZW1hcmdpbnMuTGVmdCkpIGN1cnNoZWV0WychbWFyZ2lucyddLmxlZnQgPSArcGFnZW1hcmdpbnMuTGVmdDtcblx0XHRcdFx0XHRcdGlmKCFpc05hTigrcGFnZW1hcmdpbnMuUmlnaHQpKSBjdXJzaGVldFsnIW1hcmdpbnMnXS5yaWdodCA9ICtwYWdlbWFyZ2lucy5SaWdodDtcblx0XHRcdFx0XHRcdGlmKCFpc05hTigrcGFnZW1hcmdpbnMuQm90dG9tKSkgY3Vyc2hlZXRbJyFtYXJnaW5zJ10uYm90dG9tID0gK3BhZ2VtYXJnaW5zLkJvdHRvbTtcblx0XHRcdFx0XHRcdGJyZWFrO1xuXHRcdFx0XHRcdGNhc2UgJ2Rpc3BsYXlyaWdodHRvbGVmdCcgLypjYXNlICdEaXNwbGF5UmlnaHRUb0xlZnQnKi86XG5cdFx0XHRcdFx0XHRpZighV29ya2Jvb2suVmlld3MpIFdvcmtib29rLlZpZXdzID0gW107XG5cdFx0XHRcdFx0XHRpZighV29ya2Jvb2suVmlld3NbMF0pIFdvcmtib29rLlZpZXdzWzBdID0ge307XG5cdFx0XHRcdFx0XHRXb3JrYm9vay5WaWV3c1swXS5SVEwgPSB0cnVlO1xuXHRcdFx0XHRcdFx0YnJlYWs7XG5cblx0XHRcdFx0XHRjYXNlICdmcmVlemVwYW5lcycgLypjYXNlICdGcmVlemVQYW5lcycqLzogYnJlYWs7XG5cdFx0XHRcdFx0Y2FzZSAnZnJvemVubm9zcGxpdCcgLypjYXNlICdGcm96ZW5Ob1NwbGl0JyovOiBicmVhaztcblxuXHRcdFx0XHRcdGNhc2UgJ3NwbGl0aG9yaXpvbnRhbCcgLypjYXNlICdTcGxpdEhvcml6b250YWwnKi86XG5cdFx0XHRcdFx0Y2FzZSAnc3BsaXR2ZXJ0aWNhbCcgLypjYXNlICdTcGxpdFZlcnRpY2FsJyovOlxuXHRcdFx0XHRcdFx0YnJlYWs7XG5cblx0XHRcdFx0XHRjYXNlICdkb25vdGRpc3BsYXlncmlkbGluZXMnIC8qY2FzZSAnRG9Ob3REaXNwbGF5R3JpZGxpbmVzJyovOlxuXHRcdFx0XHRcdFx0YnJlYWs7XG5cblx0XHRcdFx0XHRjYXNlICdhY3RpdmVyb3cnIC8qY2FzZSAnQWN0aXZlUm93JyovOiBicmVhaztcblx0XHRcdFx0XHRjYXNlICdhY3RpdmVjb2wnIC8qY2FzZSAnQWN0aXZlQ29sJyovOiBicmVhaztcblx0XHRcdFx0XHRjYXNlICd0b3Byb3dib3R0b21wYW5lJyAvKmNhc2UgJ1RvcFJvd0JvdHRvbVBhbmUnKi86IGJyZWFrO1xuXHRcdFx0XHRcdGNhc2UgJ2xlZnRjb2x1bW5yaWdodHBhbmUnIC8qY2FzZSAnTGVmdENvbHVtblJpZ2h0UGFuZScqLzogYnJlYWs7XG5cblx0XHRcdFx0XHRjYXNlICd1bnN5bmNlZCcgLypjYXNlICdVbnN5bmNlZCcqLzogYnJlYWs7XG5cdFx0XHRcdFx0Y2FzZSAncHJpbnQnIC8qY2FzZSAnUHJpbnQnKi86IGJyZWFrO1xuXHRcdFx0XHRcdGNhc2UgJ3ByaW50ZXJyb3JzJyAvKmNhc2UgJ1ByaW50RXJyb3JzJyovOiBicmVhaztcblx0XHRcdFx0XHRjYXNlICdwYW5lcycgLypjYXNlICdQYW5lcycqLzogYnJlYWs7XG5cdFx0XHRcdFx0Y2FzZSAnc2NhbGUnIC8qY2FzZSAnU2NhbGUnKi86IGJyZWFrO1xuXHRcdFx0XHRcdGNhc2UgJ3BhbmUnIC8qY2FzZSAnUGFuZScqLzogYnJlYWs7XG5cdFx0XHRcdFx0Y2FzZSAnbnVtYmVyJyAvKmNhc2UgJ051bWJlcicqLzogYnJlYWs7XG5cdFx0XHRcdFx0Y2FzZSAnbGF5b3V0JyAvKmNhc2UgJ0xheW91dCcqLzogYnJlYWs7XG5cdFx0XHRcdFx0Y2FzZSAncGFnZXNldHVwJyAvKmNhc2UgJ1BhZ2VTZXR1cCcqLzogYnJlYWs7XG5cdFx0XHRcdFx0Y2FzZSAnc2VsZWN0ZWQnIC8qY2FzZSAnU2VsZWN0ZWQnKi86IGJyZWFrO1xuXHRcdFx0XHRcdGNhc2UgJ3Byb3RlY3RvYmplY3RzJyAvKmNhc2UgJ1Byb3RlY3RPYmplY3RzJyovOiBicmVhaztcblx0XHRcdFx0XHRjYXNlICdlbmFibGVzZWxlY3Rpb24nIC8qY2FzZSAnRW5hYmxlU2VsZWN0aW9uJyovOiBicmVhaztcblx0XHRcdFx0XHRjYXNlICdwcm90ZWN0c2NlbmFyaW9zJyAvKmNhc2UgJ1Byb3RlY3RTY2VuYXJpb3MnKi86IGJyZWFrO1xuXHRcdFx0XHRcdGNhc2UgJ3ZhbGlkcHJpbnRlcmluZm8nIC8qY2FzZSAnVmFsaWRQcmludGVySW5mbycqLzogYnJlYWs7XG5cdFx0XHRcdFx0Y2FzZSAnaG9yaXpvbnRhbHJlc29sdXRpb24nIC8qY2FzZSAnSG9yaXpvbnRhbFJlc29sdXRpb24nKi86IGJyZWFrO1xuXHRcdFx0XHRcdGNhc2UgJ3ZlcnRpY2FscmVzb2x1dGlvbicgLypjYXNlICdWZXJ0aWNhbFJlc29sdXRpb24nKi86IGJyZWFrO1xuXHRcdFx0XHRcdGNhc2UgJ251bWJlcm9mY29waWVzJyAvKmNhc2UgJ051bWJlcm9mQ29waWVzJyovOiBicmVhaztcblx0XHRcdFx0XHRjYXNlICdhY3RpdmVwYW5lJyAvKmNhc2UgJ0FjdGl2ZVBhbmUnKi86IGJyZWFrO1xuXHRcdFx0XHRcdGNhc2UgJ3RvcHJvd3Zpc2libGUnIC8qY2FzZSAnVG9wUm93VmlzaWJsZScqLzogYnJlYWs7XG5cdFx0XHRcdFx0Y2FzZSAnbGVmdGNvbHVtbnZpc2libGUnIC8qY2FzZSAnTGVmdENvbHVtblZpc2libGUnKi86IGJyZWFrO1xuXHRcdFx0XHRcdGNhc2UgJ2ZpdHRvcGFnZScgLypjYXNlICdGaXRUb1BhZ2UnKi86IGJyZWFrO1xuXHRcdFx0XHRcdGNhc2UgJ3Jhbmdlc2VsZWN0aW9uJyAvKmNhc2UgJ1JhbmdlU2VsZWN0aW9uJyovOiBicmVhaztcblx0XHRcdFx0XHRjYXNlICdwYXBlcnNpemVpbmRleCcgLypjYXNlICdQYXBlclNpemVJbmRleCcqLzogYnJlYWs7XG5cdFx0XHRcdFx0Y2FzZSAncGFnZWxheW91dHpvb20nIC8qY2FzZSAnUGFnZUxheW91dFpvb20nKi86IGJyZWFrO1xuXHRcdFx0XHRcdGNhc2UgJ3BhZ2VicmVha3pvb20nIC8qY2FzZSAnUGFnZUJyZWFrWm9vbScqLzogYnJlYWs7XG5cdFx0XHRcdFx0Y2FzZSAnZmlsdGVyb24nIC8qY2FzZSAnRmlsdGVyT24nKi86IGJyZWFrO1xuXHRcdFx0XHRcdGNhc2UgJ2ZpdHdpZHRoJyAvKmNhc2UgJ0ZpdFdpZHRoJyovOiBicmVhaztcblx0XHRcdFx0XHRjYXNlICdmaXRoZWlnaHQnIC8qY2FzZSAnRml0SGVpZ2h0JyovOiBicmVhaztcblx0XHRcdFx0XHRjYXNlICdjb21tZW50c2xheW91dCcgLypjYXNlICdDb21tZW50c0xheW91dCcqLzogYnJlYWs7XG5cdFx0XHRcdFx0Y2FzZSAnem9vbScgLypjYXNlICdab29tJyovOiBicmVhaztcblx0XHRcdFx0XHRjYXNlICdsZWZ0dG9yaWdodCcgLypjYXNlICdMZWZ0VG9SaWdodCcqLzogYnJlYWs7XG5cdFx0XHRcdFx0Y2FzZSAnZ3JpZGxpbmVzJyAvKmNhc2UgJ0dyaWRsaW5lcycqLzogYnJlYWs7XG5cdFx0XHRcdFx0Y2FzZSAnYWxsb3dzb3J0JyAvKmNhc2UgJ0FsbG93U29ydCcqLzogYnJlYWs7XG5cdFx0XHRcdFx0Y2FzZSAnYWxsb3dmaWx0ZXInIC8qY2FzZSAnQWxsb3dGaWx0ZXInKi86IGJyZWFrO1xuXHRcdFx0XHRcdGNhc2UgJ2FsbG93aW5zZXJ0cm93cycgLypjYXNlICdBbGxvd0luc2VydFJvd3MnKi86IGJyZWFrO1xuXHRcdFx0XHRcdGNhc2UgJ2FsbG93ZGVsZXRlcm93cycgLypjYXNlICdBbGxvd0RlbGV0ZVJvd3MnKi86IGJyZWFrO1xuXHRcdFx0XHRcdGNhc2UgJ2FsbG93aW5zZXJ0Y29scycgLypjYXNlICdBbGxvd0luc2VydENvbHMnKi86IGJyZWFrO1xuXHRcdFx0XHRcdGNhc2UgJ2FsbG93ZGVsZXRlY29scycgLypjYXNlICdBbGxvd0RlbGV0ZUNvbHMnKi86IGJyZWFrO1xuXHRcdFx0XHRcdGNhc2UgJ2FsbG93aW5zZXJ0aHlwZXJsaW5rcycgLypjYXNlICdBbGxvd0luc2VydEh5cGVybGlua3MnKi86IGJyZWFrO1xuXHRcdFx0XHRcdGNhc2UgJ2FsbG93Zm9ybWF0Y2VsbHMnIC8qY2FzZSAnQWxsb3dGb3JtYXRDZWxscycqLzogYnJlYWs7XG5cdFx0XHRcdFx0Y2FzZSAnYWxsb3dzaXplY29scycgLypjYXNlICdBbGxvd1NpemVDb2xzJyovOiBicmVhaztcblx0XHRcdFx0XHRjYXNlICdhbGxvd3NpemVyb3dzJyAvKmNhc2UgJ0FsbG93U2l6ZVJvd3MnKi86IGJyZWFrO1xuXHRcdFx0XHRcdGNhc2UgJ25vc3VtbWFyeXJvd3NiZWxvd2RldGFpbCcgLypjYXNlICdOb1N1bW1hcnlSb3dzQmVsb3dEZXRhaWwnKi86XG5cdFx0XHRcdFx0XHRpZighY3Vyc2hlZXRbXCIhb3V0bGluZVwiXSkgY3Vyc2hlZXRbXCIhb3V0bGluZVwiXSA9IHt9O1xuXHRcdFx0XHRcdFx0Y3Vyc2hlZXRbXCIhb3V0bGluZVwiXS5hYm92ZSA9IHRydWU7XG5cdFx0XHRcdFx0XHRicmVhaztcblx0XHRcdFx0XHRjYXNlICd0YWJjb2xvcmluZGV4JyAvKmNhc2UgJ1RhYkNvbG9ySW5kZXgnKi86IGJyZWFrO1xuXHRcdFx0XHRcdGNhc2UgJ2Rvbm90ZGlzcGxheWhlYWRpbmdzJyAvKmNhc2UgJ0RvTm90RGlzcGxheUhlYWRpbmdzJyovOiBicmVhaztcblx0XHRcdFx0XHRjYXNlICdzaG93cGFnZWxheW91dHpvb20nIC8qY2FzZSAnU2hvd1BhZ2VMYXlvdXRab29tJyovOiBicmVhaztcblx0XHRcdFx0XHRjYXNlICdub3N1bW1hcnljb2x1bW5zcmlnaHRkZXRhaWwnIC8qY2FzZSAnTm9TdW1tYXJ5Q29sdW1uc1JpZ2h0RGV0YWlsJyovOlxuXHRcdFx0XHRcdFx0aWYoIWN1cnNoZWV0W1wiIW91dGxpbmVcIl0pIGN1cnNoZWV0W1wiIW91dGxpbmVcIl0gPSB7fTtcblx0XHRcdFx0XHRcdGN1cnNoZWV0W1wiIW91dGxpbmVcIl0ubGVmdCA9IHRydWU7XG5cdFx0XHRcdFx0XHRicmVhaztcblx0XHRcdFx0XHRjYXNlICdibGFja2FuZHdoaXRlJyAvKmNhc2UgJ0JsYWNrQW5kV2hpdGUnKi86IGJyZWFrO1xuXHRcdFx0XHRcdGNhc2UgJ2Rvbm90ZGlzcGxheXplcm9zJyAvKmNhc2UgJ0RvTm90RGlzcGxheVplcm9zJyovOiBicmVhaztcblx0XHRcdFx0XHRjYXNlICdkaXNwbGF5cGFnZWJyZWFrJyAvKmNhc2UgJ0Rpc3BsYXlQYWdlQnJlYWsnKi86IGJyZWFrO1xuXHRcdFx0XHRcdGNhc2UgJ3Jvd2NvbGhlYWRpbmdzJyAvKmNhc2UgJ1Jvd0NvbEhlYWRpbmdzJyovOiBicmVhaztcblx0XHRcdFx0XHRjYXNlICdkb25vdGRpc3BsYXlvdXRsaW5lJyAvKmNhc2UgJ0RvTm90RGlzcGxheU91dGxpbmUnKi86IGJyZWFrO1xuXHRcdFx0XHRcdGNhc2UgJ25vb3JpZW50YXRpb24nIC8qY2FzZSAnTm9PcmllbnRhdGlvbicqLzogYnJlYWs7XG5cdFx0XHRcdFx0Y2FzZSAnYWxsb3d1c2VwaXZvdHRhYmxlcycgLypjYXNlICdBbGxvd1VzZVBpdm90VGFibGVzJyovOiBicmVhaztcblx0XHRcdFx0XHRjYXNlICd6ZXJvaGVpZ2h0JyAvKmNhc2UgJ1plcm9IZWlnaHQnKi86IGJyZWFrO1xuXHRcdFx0XHRcdGNhc2UgJ3ZpZXdhYmxlcmFuZ2UnIC8qY2FzZSAnVmlld2FibGVSYW5nZScqLzogYnJlYWs7XG5cdFx0XHRcdFx0Y2FzZSAnc2VsZWN0aW9uJyAvKmNhc2UgJ1NlbGVjdGlvbicqLzogYnJlYWs7XG5cdFx0XHRcdFx0Y2FzZSAncHJvdGVjdGNvbnRlbnRzJyAvKmNhc2UgJ1Byb3RlY3RDb250ZW50cycqLzogYnJlYWs7XG5cdFx0XHRcdFx0ZGVmYXVsdDogc2VlbiA9IGZhbHNlO1xuXHRcdFx0XHR9IGJyZWFrO1xuXG5cdFx0XHRcdC8qIFBpdm90VGFibGUgKi9cblx0XHRcdFx0Y2FzZSAncGl2b3R0YWJsZScgLypjYXNlICdQaXZvdFRhYmxlJyovOiBjYXNlICdwaXZvdGNhY2hlJyAvKmNhc2UgJ1Bpdm90Q2FjaGUnKi86IHN3aXRjaChSblszXSkge1xuXHRcdFx0XHRcdGNhc2UgJ2ltbWVkaWF0ZWl0ZW1zb25kcm9wJyAvKmNhc2UgJ0ltbWVkaWF0ZUl0ZW1zT25Ecm9wJyovOiBicmVhaztcblx0XHRcdFx0XHRjYXNlICdzaG93cGFnZW11bHRpcGxlaXRlbWxhYmVsJyAvKmNhc2UgJ1Nob3dQYWdlTXVsdGlwbGVJdGVtTGFiZWwnKi86IGJyZWFrO1xuXHRcdFx0XHRcdGNhc2UgJ2NvbXBhY3Ryb3dpbmRlbnQnIC8qY2FzZSAnQ29tcGFjdFJvd0luZGVudCcqLzogYnJlYWs7XG5cdFx0XHRcdFx0Y2FzZSAnbG9jYXRpb24nIC8qY2FzZSAnTG9jYXRpb24nKi86IGJyZWFrO1xuXHRcdFx0XHRcdGNhc2UgJ3Bpdm90ZmllbGQnIC8qY2FzZSAnUGl2b3RGaWVsZCcqLzogYnJlYWs7XG5cdFx0XHRcdFx0Y2FzZSAnb3JpZW50YXRpb24nIC8qY2FzZSAnT3JpZW50YXRpb24nKi86IGJyZWFrO1xuXHRcdFx0XHRcdGNhc2UgJ2xheW91dGZvcm0nIC8qY2FzZSAnTGF5b3V0Rm9ybScqLzogYnJlYWs7XG5cdFx0XHRcdFx0Y2FzZSAnbGF5b3V0c3VidG90YWxsb2NhdGlvbicgLypjYXNlICdMYXlvdXRTdWJ0b3RhbExvY2F0aW9uJyovOiBicmVhaztcblx0XHRcdFx0XHRjYXNlICdsYXlvdXRjb21wYWN0cm93JyAvKmNhc2UgJ0xheW91dENvbXBhY3RSb3cnKi86IGJyZWFrO1xuXHRcdFx0XHRcdGNhc2UgJ3Bvc2l0aW9uJyAvKmNhc2UgJ1Bvc2l0aW9uJyovOiBicmVhaztcblx0XHRcdFx0XHRjYXNlICdwaXZvdGl0ZW0nIC8qY2FzZSAnUGl2b3RJdGVtJyovOiBicmVhaztcblx0XHRcdFx0XHRjYXNlICdkYXRhdHlwZScgLypjYXNlICdEYXRhVHlwZScqLzogYnJlYWs7XG5cdFx0XHRcdFx0Y2FzZSAnZGF0YWZpZWxkJyAvKmNhc2UgJ0RhdGFGaWVsZCcqLzogYnJlYWs7XG5cdFx0XHRcdFx0Y2FzZSAnc291cmNlbmFtZScgLypjYXNlICdTb3VyY2VOYW1lJyovOiBicmVhaztcblx0XHRcdFx0XHRjYXNlICdwYXJlbnRmaWVsZCcgLypjYXNlICdQYXJlbnRGaWVsZCcqLzogYnJlYWs7XG5cdFx0XHRcdFx0Y2FzZSAncHRsaW5laXRlbXMnIC8qY2FzZSAnUFRMaW5lSXRlbXMnKi86IGJyZWFrO1xuXHRcdFx0XHRcdGNhc2UgJ3B0bGluZWl0ZW0nIC8qY2FzZSAnUFRMaW5lSXRlbScqLzogYnJlYWs7XG5cdFx0XHRcdFx0Y2FzZSAnY291bnRvZnNhbWVpdGVtcycgLypjYXNlICdDb3VudE9mU2FtZUl0ZW1zJyovOiBicmVhaztcblx0XHRcdFx0XHRjYXNlICdpdGVtJyAvKmNhc2UgJ0l0ZW0nKi86IGJyZWFrO1xuXHRcdFx0XHRcdGNhc2UgJ2l0ZW10eXBlJyAvKmNhc2UgJ0l0ZW1UeXBlJyovOiBicmVhaztcblx0XHRcdFx0XHRjYXNlICdwdHNvdXJjZScgLypjYXNlICdQVFNvdXJjZScqLzogYnJlYWs7XG5cdFx0XHRcdFx0Y2FzZSAnY2FjaGVpbmRleCcgLypjYXNlICdDYWNoZUluZGV4JyovOiBicmVhaztcblx0XHRcdFx0XHRjYXNlICdjb25zb2xpZGF0aW9ucmVmZXJlbmNlJyAvKmNhc2UgJ0NvbnNvbGlkYXRpb25SZWZlcmVuY2UnKi86IGJyZWFrO1xuXHRcdFx0XHRcdGNhc2UgJ2ZpbGVuYW1lJyAvKmNhc2UgJ0ZpbGVOYW1lJyovOiBicmVhaztcblx0XHRcdFx0XHRjYXNlICdyZWZlcmVuY2UnIC8qY2FzZSAnUmVmZXJlbmNlJyovOiBicmVhaztcblx0XHRcdFx0XHRjYXNlICdub2NvbHVtbmdyYW5kJyAvKmNhc2UgJ05vQ29sdW1uR3JhbmQnKi86IGJyZWFrO1xuXHRcdFx0XHRcdGNhc2UgJ25vcm93Z3JhbmQnIC8qY2FzZSAnTm9Sb3dHcmFuZCcqLzogYnJlYWs7XG5cdFx0XHRcdFx0Y2FzZSAnYmxhbmtsaW5lYWZ0ZXJpdGVtcycgLypjYXNlICdCbGFua0xpbmVBZnRlckl0ZW1zJyovOiBicmVhaztcblx0XHRcdFx0XHRjYXNlICdoaWRkZW4nIC8qY2FzZSAnSGlkZGVuJyovOiBicmVhaztcblx0XHRcdFx0XHRjYXNlICdzdWJ0b3RhbCcgLypjYXNlICdTdWJ0b3RhbCcqLzogYnJlYWs7XG5cdFx0XHRcdFx0Y2FzZSAnYmFzZWZpZWxkJyAvKmNhc2UgJ0Jhc2VGaWVsZCcqLzogYnJlYWs7XG5cdFx0XHRcdFx0Y2FzZSAnbWFwY2hpbGRpdGVtcycgLypjYXNlICdNYXBDaGlsZEl0ZW1zJyovOiBicmVhaztcblx0XHRcdFx0XHRjYXNlICdmdW5jdGlvbicgLypjYXNlICdGdW5jdGlvbicqLzogYnJlYWs7XG5cdFx0XHRcdFx0Y2FzZSAncmVmcmVzaG9uZmlsZW9wZW4nIC8qY2FzZSAnUmVmcmVzaE9uRmlsZU9wZW4nKi86IGJyZWFrO1xuXHRcdFx0XHRcdGNhc2UgJ3ByaW50c2V0dGl0bGVzJyAvKmNhc2UgJ1ByaW50U2V0VGl0bGVzJyovOiBicmVhaztcblx0XHRcdFx0XHRjYXNlICdtZXJnZWxhYmVscycgLypjYXNlICdNZXJnZUxhYmVscycqLzogYnJlYWs7XG5cdFx0XHRcdFx0Y2FzZSAnZGVmYXVsdHZlcnNpb24nIC8qY2FzZSAnRGVmYXVsdFZlcnNpb24nKi86IGJyZWFrO1xuXHRcdFx0XHRcdGNhc2UgJ3JlZnJlc2huYW1lJyAvKmNhc2UgJ1JlZnJlc2hOYW1lJyovOiBicmVhaztcblx0XHRcdFx0XHRjYXNlICdyZWZyZXNoZGF0ZScgLypjYXNlICdSZWZyZXNoRGF0ZScqLzogYnJlYWs7XG5cdFx0XHRcdFx0Y2FzZSAncmVmcmVzaGRhdGVjb3B5JyAvKmNhc2UgJ1JlZnJlc2hEYXRlQ29weScqLzogYnJlYWs7XG5cdFx0XHRcdFx0Y2FzZSAndmVyc2lvbmxhc3RyZWZyZXNoJyAvKmNhc2UgJ1ZlcnNpb25MYXN0UmVmcmVzaCcqLzogYnJlYWs7XG5cdFx0XHRcdFx0Y2FzZSAndmVyc2lvbmxhc3R1cGRhdGUnIC8qY2FzZSAnVmVyc2lvbkxhc3RVcGRhdGUnKi86IGJyZWFrO1xuXHRcdFx0XHRcdGNhc2UgJ3ZlcnNpb251cGRhdGVhYmxlbWluJyAvKmNhc2UgJ1ZlcnNpb25VcGRhdGVhYmxlTWluJyovOiBicmVhaztcblx0XHRcdFx0XHRjYXNlICd2ZXJzaW9ucmVmcmVzaGFibGVtaW4nIC8qY2FzZSAnVmVyc2lvblJlZnJlc2hhYmxlTWluJyovOiBicmVhaztcblx0XHRcdFx0XHRjYXNlICdjYWxjdWxhdGlvbicgLypjYXNlICdDYWxjdWxhdGlvbicqLzogYnJlYWs7XG5cdFx0XHRcdFx0ZGVmYXVsdDogc2VlbiA9IGZhbHNlO1xuXHRcdFx0XHR9IGJyZWFrO1xuXG5cdFx0XHRcdC8qIFBhZ2VCcmVha3MgKi9cblx0XHRcdFx0Y2FzZSAncGFnZWJyZWFrcycgLypjYXNlICdQYWdlQnJlYWtzJyovOiBzd2l0Y2goUm5bM10pIHtcblx0XHRcdFx0XHRjYXNlICdjb2xicmVha3MnIC8qY2FzZSAnQ29sQnJlYWtzJyovOiBicmVhaztcblx0XHRcdFx0XHRjYXNlICdjb2xicmVhaycgLypjYXNlICdDb2xCcmVhaycqLzogYnJlYWs7XG5cdFx0XHRcdFx0Y2FzZSAncm93YnJlYWtzJyAvKmNhc2UgJ1Jvd0JyZWFrcycqLzogYnJlYWs7XG5cdFx0XHRcdFx0Y2FzZSAncm93YnJlYWsnIC8qY2FzZSAnUm93QnJlYWsnKi86IGJyZWFrO1xuXHRcdFx0XHRcdGNhc2UgJ2NvbHN0YXJ0JyAvKmNhc2UgJ0NvbFN0YXJ0JyovOiBicmVhaztcblx0XHRcdFx0XHRjYXNlICdjb2xlbmQnIC8qY2FzZSAnQ29sRW5kJyovOiBicmVhaztcblx0XHRcdFx0XHRjYXNlICdyb3dlbmQnIC8qY2FzZSAnUm93RW5kJyovOiBicmVhaztcblx0XHRcdFx0XHRkZWZhdWx0OiBzZWVuID0gZmFsc2U7XG5cdFx0XHRcdH0gYnJlYWs7XG5cblx0XHRcdFx0LyogQXV0b0ZpbHRlciAqL1xuXHRcdFx0XHRjYXNlICdhdXRvZmlsdGVyJyAvKmNhc2UgJ0F1dG9GaWx0ZXInKi86IHN3aXRjaChSblszXSkge1xuXHRcdFx0XHRcdGNhc2UgJ2F1dG9maWx0ZXJjb2x1bW4nIC8qY2FzZSAnQXV0b0ZpbHRlckNvbHVtbicqLzogYnJlYWs7XG5cdFx0XHRcdFx0Y2FzZSAnYXV0b2ZpbHRlcmNvbmRpdGlvbicgLypjYXNlICdBdXRvRmlsdGVyQ29uZGl0aW9uJyovOiBicmVhaztcblx0XHRcdFx0XHRjYXNlICdhdXRvZmlsdGVyYW5kJyAvKmNhc2UgJ0F1dG9GaWx0ZXJBbmQnKi86IGJyZWFrO1xuXHRcdFx0XHRcdGNhc2UgJ2F1dG9maWx0ZXJvcicgLypjYXNlICdBdXRvRmlsdGVyT3InKi86IGJyZWFrO1xuXHRcdFx0XHRcdGRlZmF1bHQ6IHNlZW4gPSBmYWxzZTtcblx0XHRcdFx0fSBicmVhaztcblxuXHRcdFx0XHQvKiBRdWVyeVRhYmxlICovXG5cdFx0XHRcdGNhc2UgJ3F1ZXJ5dGFibGUnIC8qY2FzZSAnUXVlcnlUYWJsZScqLzogc3dpdGNoKFJuWzNdKSB7XG5cdFx0XHRcdFx0Y2FzZSAnaWQnIC8qY2FzZSAnSWQnKi86IGJyZWFrO1xuXHRcdFx0XHRcdGNhc2UgJ2F1dG9mb3JtYXRmb250JyAvKmNhc2UgJ0F1dG9Gb3JtYXRGb250JyovOiBicmVhaztcblx0XHRcdFx0XHRjYXNlICdhdXRvZm9ybWF0cGF0dGVybicgLypjYXNlICdBdXRvRm9ybWF0UGF0dGVybicqLzogYnJlYWs7XG5cdFx0XHRcdFx0Y2FzZSAncXVlcnlzb3VyY2UnIC8qY2FzZSAnUXVlcnlTb3VyY2UnKi86IGJyZWFrO1xuXHRcdFx0XHRcdGNhc2UgJ3F1ZXJ5dHlwZScgLypjYXNlICdRdWVyeVR5cGUnKi86IGJyZWFrO1xuXHRcdFx0XHRcdGNhc2UgJ2VuYWJsZXJlZGlyZWN0aW9ucycgLypjYXNlICdFbmFibGVSZWRpcmVjdGlvbnMnKi86IGJyZWFrO1xuXHRcdFx0XHRcdGNhc2UgJ3JlZnJlc2hlZGlueGw5JyAvKmNhc2UgJ1JlZnJlc2hlZEluWGw5JyovOiBicmVhaztcblx0XHRcdFx0XHRjYXNlICd1cmxzdHJpbmcnIC8qY2FzZSAnVVJMU3RyaW5nJyovOiBicmVhaztcblx0XHRcdFx0XHRjYXNlICdodG1sdGFibGVzJyAvKmNhc2UgJ0hUTUxUYWJsZXMnKi86IGJyZWFrO1xuXHRcdFx0XHRcdGNhc2UgJ2Nvbm5lY3Rpb24nIC8qY2FzZSAnQ29ubmVjdGlvbicqLzogYnJlYWs7XG5cdFx0XHRcdFx0Y2FzZSAnY29tbWFuZHRleHQnIC8qY2FzZSAnQ29tbWFuZFRleHQnKi86IGJyZWFrO1xuXHRcdFx0XHRcdGNhc2UgJ3JlZnJlc2hpbmZvJyAvKmNhc2UgJ1JlZnJlc2hJbmZvJyovOiBicmVhaztcblx0XHRcdFx0XHRjYXNlICdub3RpdGxlcycgLypjYXNlICdOb1RpdGxlcycqLzogYnJlYWs7XG5cdFx0XHRcdFx0Y2FzZSAnbmV4dGlkJyAvKmNhc2UgJ05leHRJZCcqLzogYnJlYWs7XG5cdFx0XHRcdFx0Y2FzZSAnY29sdW1uaW5mbycgLypjYXNlICdDb2x1bW5JbmZvJyovOiBicmVhaztcblx0XHRcdFx0XHRjYXNlICdvdmVyd3JpdGVjZWxscycgLypjYXNlICdPdmVyd3JpdGVDZWxscycqLzogYnJlYWs7XG5cdFx0XHRcdFx0Y2FzZSAnZG9ub3Rwcm9tcHRmb3JmaWxlJyAvKmNhc2UgJ0RvTm90UHJvbXB0Rm9yRmlsZScqLzogYnJlYWs7XG5cdFx0XHRcdFx0Y2FzZSAndGV4dHdpemFyZHNldHRpbmdzJyAvKmNhc2UgJ1RleHRXaXphcmRTZXR0aW5ncycqLzogYnJlYWs7XG5cdFx0XHRcdFx0Y2FzZSAnc291cmNlJyAvKmNhc2UgJ1NvdXJjZScqLzogYnJlYWs7XG5cdFx0XHRcdFx0Y2FzZSAnbnVtYmVyJyAvKmNhc2UgJ051bWJlcicqLzogYnJlYWs7XG5cdFx0XHRcdFx0Y2FzZSAnZGVjaW1hbCcgLypjYXNlICdEZWNpbWFsJyovOiBicmVhaztcblx0XHRcdFx0XHRjYXNlICd0aG91c2FuZHNlcGFyYXRvcicgLypjYXNlICdUaG91c2FuZFNlcGFyYXRvcicqLzogYnJlYWs7XG5cdFx0XHRcdFx0Y2FzZSAndHJhaWxpbmdtaW51c251bWJlcnMnIC8qY2FzZSAnVHJhaWxpbmdNaW51c051bWJlcnMnKi86IGJyZWFrO1xuXHRcdFx0XHRcdGNhc2UgJ2Zvcm1hdHNldHRpbmdzJyAvKmNhc2UgJ0Zvcm1hdFNldHRpbmdzJyovOiBicmVhaztcblx0XHRcdFx0XHRjYXNlICdmaWVsZHR5cGUnIC8qY2FzZSAnRmllbGRUeXBlJyovOiBicmVhaztcblx0XHRcdFx0XHRjYXNlICdkZWxpbWl0ZXJzJyAvKmNhc2UgJ0RlbGltaXRlcnMnKi86IGJyZWFrO1xuXHRcdFx0XHRcdGNhc2UgJ3RhYicgLypjYXNlICdUYWInKi86IGJyZWFrO1xuXHRcdFx0XHRcdGNhc2UgJ2NvbW1hJyAvKmNhc2UgJ0NvbW1hJyovOiBicmVhaztcblx0XHRcdFx0XHRjYXNlICdhdXRvZm9ybWF0bmFtZScgLypjYXNlICdBdXRvRm9ybWF0TmFtZScqLzogYnJlYWs7XG5cdFx0XHRcdFx0Y2FzZSAndmVyc2lvbmxhc3RlZGl0JyAvKmNhc2UgJ1ZlcnNpb25MYXN0RWRpdCcqLzogYnJlYWs7XG5cdFx0XHRcdFx0Y2FzZSAndmVyc2lvbmxhc3RyZWZyZXNoJyAvKmNhc2UgJ1ZlcnNpb25MYXN0UmVmcmVzaCcqLzogYnJlYWs7XG5cdFx0XHRcdFx0ZGVmYXVsdDogc2VlbiA9IGZhbHNlO1xuXHRcdFx0XHR9IGJyZWFrO1xuXG5cdFx0XHRcdGNhc2UgJ2RhdGF2YWxpZGF0aW9uJyAvKmNhc2UgJ0RhdGFWYWxpZGF0aW9uJyovOlxuXHRcdFx0XHRzd2l0Y2goUm5bM10pIHtcblx0XHRcdFx0XHRjYXNlICdyYW5nZScgLypjYXNlICdSYW5nZScqLzogYnJlYWs7XG5cblx0XHRcdFx0XHRjYXNlICd0eXBlJyAvKmNhc2UgJ1R5cGUnKi86IGJyZWFrO1xuXHRcdFx0XHRcdGNhc2UgJ21pbicgLypjYXNlICdNaW4nKi86IGJyZWFrO1xuXHRcdFx0XHRcdGNhc2UgJ21heCcgLypjYXNlICdNYXgnKi86IGJyZWFrO1xuXHRcdFx0XHRcdGNhc2UgJ3NvcnQnIC8qY2FzZSAnU29ydCcqLzogYnJlYWs7XG5cdFx0XHRcdFx0Y2FzZSAnZGVzY2VuZGluZycgLypjYXNlICdEZXNjZW5kaW5nJyovOiBicmVhaztcblx0XHRcdFx0XHRjYXNlICdvcmRlcicgLypjYXNlICdPcmRlcicqLzogYnJlYWs7XG5cdFx0XHRcdFx0Y2FzZSAnY2FzZXNlbnNpdGl2ZScgLypjYXNlICdDYXNlU2Vuc2l0aXZlJyovOiBicmVhaztcblx0XHRcdFx0XHRjYXNlICd2YWx1ZScgLypjYXNlICdWYWx1ZScqLzogYnJlYWs7XG5cdFx0XHRcdFx0Y2FzZSAnZXJyb3JzdHlsZScgLypjYXNlICdFcnJvclN0eWxlJyovOiBicmVhaztcblx0XHRcdFx0XHRjYXNlICdlcnJvcm1lc3NhZ2UnIC8qY2FzZSAnRXJyb3JNZXNzYWdlJyovOiBicmVhaztcblx0XHRcdFx0XHRjYXNlICdlcnJvcnRpdGxlJyAvKmNhc2UgJ0Vycm9yVGl0bGUnKi86IGJyZWFrO1xuXHRcdFx0XHRcdGNhc2UgJ2lucHV0bWVzc2FnZScgLypjYXNlICdJbnB1dE1lc3NhZ2UnKi86IGJyZWFrO1xuXHRcdFx0XHRcdGNhc2UgJ2lucHV0dGl0bGUnIC8qY2FzZSAnSW5wdXRUaXRsZScqLzogYnJlYWs7XG5cdFx0XHRcdFx0Y2FzZSAnY29tYm9oaWRlJyAvKmNhc2UgJ0NvbWJvSGlkZScqLzogYnJlYWs7XG5cdFx0XHRcdFx0Y2FzZSAnaW5wdXRoaWRlJyAvKmNhc2UgJ0lucHV0SGlkZScqLzogYnJlYWs7XG5cdFx0XHRcdFx0Y2FzZSAnY29uZGl0aW9uJyAvKmNhc2UgJ0NvbmRpdGlvbicqLzogYnJlYWs7XG5cdFx0XHRcdFx0Y2FzZSAncXVhbGlmaWVyJyAvKmNhc2UgJ1F1YWxpZmllcicqLzogYnJlYWs7XG5cdFx0XHRcdFx0Y2FzZSAndXNlYmxhbmsnIC8qY2FzZSAnVXNlQmxhbmsnKi86IGJyZWFrO1xuXHRcdFx0XHRcdGNhc2UgJ3ZhbHVlMScgLypjYXNlICdWYWx1ZTEnKi86IGJyZWFrO1xuXHRcdFx0XHRcdGNhc2UgJ3ZhbHVlMicgLypjYXNlICdWYWx1ZTInKi86IGJyZWFrO1xuXHRcdFx0XHRcdGNhc2UgJ2Zvcm1hdCcgLypjYXNlICdGb3JtYXQnKi86IGJyZWFrO1xuXG5cdFx0XHRcdFx0Y2FzZSAnY2VsbHJhbmdlbGlzdCcgLypjYXNlICdDZWxsUmFuZ2VMaXN0JyovOiBicmVhaztcblx0XHRcdFx0XHRkZWZhdWx0OiBzZWVuID0gZmFsc2U7XG5cdFx0XHRcdH0gYnJlYWs7XG5cblx0XHRcdFx0Y2FzZSAnc29ydGluZycgLypjYXNlICdTb3J0aW5nJyovOlxuXHRcdFx0XHRjYXNlICdjb25kaXRpb25hbGZvcm1hdHRpbmcnIC8qY2FzZSAnQ29uZGl0aW9uYWxGb3JtYXR0aW5nJyovOlxuXHRcdFx0XHRzd2l0Y2goUm5bM10pIHtcblx0XHRcdFx0XHRjYXNlICdyYW5nZScgLypjYXNlICdSYW5nZScqLzogYnJlYWs7XG5cdFx0XHRcdFx0Y2FzZSAndHlwZScgLypjYXNlICdUeXBlJyovOiBicmVhaztcblx0XHRcdFx0XHRjYXNlICdtaW4nIC8qY2FzZSAnTWluJyovOiBicmVhaztcblx0XHRcdFx0XHRjYXNlICdtYXgnIC8qY2FzZSAnTWF4JyovOiBicmVhaztcblx0XHRcdFx0XHRjYXNlICdzb3J0JyAvKmNhc2UgJ1NvcnQnKi86IGJyZWFrO1xuXHRcdFx0XHRcdGNhc2UgJ2Rlc2NlbmRpbmcnIC8qY2FzZSAnRGVzY2VuZGluZycqLzogYnJlYWs7XG5cdFx0XHRcdFx0Y2FzZSAnb3JkZXInIC8qY2FzZSAnT3JkZXInKi86IGJyZWFrO1xuXHRcdFx0XHRcdGNhc2UgJ2Nhc2VzZW5zaXRpdmUnIC8qY2FzZSAnQ2FzZVNlbnNpdGl2ZScqLzogYnJlYWs7XG5cdFx0XHRcdFx0Y2FzZSAndmFsdWUnIC8qY2FzZSAnVmFsdWUnKi86IGJyZWFrO1xuXHRcdFx0XHRcdGNhc2UgJ2Vycm9yc3R5bGUnIC8qY2FzZSAnRXJyb3JTdHlsZScqLzogYnJlYWs7XG5cdFx0XHRcdFx0Y2FzZSAnZXJyb3JtZXNzYWdlJyAvKmNhc2UgJ0Vycm9yTWVzc2FnZScqLzogYnJlYWs7XG5cdFx0XHRcdFx0Y2FzZSAnZXJyb3J0aXRsZScgLypjYXNlICdFcnJvclRpdGxlJyovOiBicmVhaztcblx0XHRcdFx0XHRjYXNlICdjZWxscmFuZ2VsaXN0JyAvKmNhc2UgJ0NlbGxSYW5nZUxpc3QnKi86IGJyZWFrO1xuXHRcdFx0XHRcdGNhc2UgJ2lucHV0bWVzc2FnZScgLypjYXNlICdJbnB1dE1lc3NhZ2UnKi86IGJyZWFrO1xuXHRcdFx0XHRcdGNhc2UgJ2lucHV0dGl0bGUnIC8qY2FzZSAnSW5wdXRUaXRsZScqLzogYnJlYWs7XG5cdFx0XHRcdFx0Y2FzZSAnY29tYm9oaWRlJyAvKmNhc2UgJ0NvbWJvSGlkZScqLzogYnJlYWs7XG5cdFx0XHRcdFx0Y2FzZSAnaW5wdXRoaWRlJyAvKmNhc2UgJ0lucHV0SGlkZScqLzogYnJlYWs7XG5cdFx0XHRcdFx0Y2FzZSAnY29uZGl0aW9uJyAvKmNhc2UgJ0NvbmRpdGlvbicqLzogYnJlYWs7XG5cdFx0XHRcdFx0Y2FzZSAncXVhbGlmaWVyJyAvKmNhc2UgJ1F1YWxpZmllcicqLzogYnJlYWs7XG5cdFx0XHRcdFx0Y2FzZSAndXNlYmxhbmsnIC8qY2FzZSAnVXNlQmxhbmsnKi86IGJyZWFrO1xuXHRcdFx0XHRcdGNhc2UgJ3ZhbHVlMScgLypjYXNlICdWYWx1ZTEnKi86IGJyZWFrO1xuXHRcdFx0XHRcdGNhc2UgJ3ZhbHVlMicgLypjYXNlICdWYWx1ZTInKi86IGJyZWFrO1xuXHRcdFx0XHRcdGNhc2UgJ2Zvcm1hdCcgLypjYXNlICdGb3JtYXQnKi86IGJyZWFrO1xuXHRcdFx0XHRcdGRlZmF1bHQ6IHNlZW4gPSBmYWxzZTtcblx0XHRcdFx0fSBicmVhaztcblxuXHRcdFx0XHQvKiBNYXBJbmZvIChzY2hlbWEpICovXG5cdFx0XHRcdGNhc2UgJ21hcGluZm8nIC8qY2FzZSAnTWFwSW5mbycqLzogY2FzZSAnc2NoZW1hJyAvKmNhc2UgJ1NjaGVtYScqLzogY2FzZSAnZGF0YScgLypjYXNlICdkYXRhJyovOiBzd2l0Y2goUm5bM10pIHtcblx0XHRcdFx0XHRjYXNlICdtYXAnIC8qY2FzZSAnTWFwJyovOiBicmVhaztcblx0XHRcdFx0XHRjYXNlICdlbnRyeScgLypjYXNlICdFbnRyeScqLzogYnJlYWs7XG5cdFx0XHRcdFx0Y2FzZSAncmFuZ2UnIC8qY2FzZSAnUmFuZ2UnKi86IGJyZWFrO1xuXHRcdFx0XHRcdGNhc2UgJ3hwYXRoJyAvKmNhc2UgJ1hQYXRoJyovOiBicmVhaztcblx0XHRcdFx0XHRjYXNlICdmaWVsZCcgLypjYXNlICdGaWVsZCcqLzogYnJlYWs7XG5cdFx0XHRcdFx0Y2FzZSAneHNkdHlwZScgLypjYXNlICdYU0RUeXBlJyovOiBicmVhaztcblx0XHRcdFx0XHRjYXNlICdmaWx0ZXJvbicgLypjYXNlICdGaWx0ZXJPbicqLzogYnJlYWs7XG5cdFx0XHRcdFx0Y2FzZSAnYWdncmVnYXRlJyAvKmNhc2UgJ0FnZ3JlZ2F0ZScqLzogYnJlYWs7XG5cdFx0XHRcdFx0Y2FzZSAnZWxlbWVudHR5cGUnIC8qY2FzZSAnRWxlbWVudFR5cGUnKi86IGJyZWFrO1xuXHRcdFx0XHRcdGNhc2UgJ2F0dHJpYnV0ZXR5cGUnIC8qY2FzZSAnQXR0cmlidXRlVHlwZScqLzogYnJlYWs7XG5cdFx0XHRcdC8qIFRoZXNlIGFyZSBmcm9tIHhzZCAoWE1MIFNjaGVtYSBEZWZpbml0aW9uKSAqL1xuXHRcdFx0XHRcdGNhc2UgJ3NjaGVtYScgLypjYXNlICdzY2hlbWEnKi86XG5cdFx0XHRcdFx0Y2FzZSAnZWxlbWVudCcgLypjYXNlICdlbGVtZW50JyovOlxuXHRcdFx0XHRcdGNhc2UgJ2NvbXBsZXh0eXBlJyAvKmNhc2UgJ2NvbXBsZXhUeXBlJyovOlxuXHRcdFx0XHRcdGNhc2UgJ2RhdGF0eXBlJyAvKmNhc2UgJ2RhdGF0eXBlJyovOlxuXHRcdFx0XHRcdGNhc2UgJ2FsbCcgLypjYXNlICdhbGwnKi86XG5cdFx0XHRcdFx0Y2FzZSAnYXR0cmlidXRlJyAvKmNhc2UgJ2F0dHJpYnV0ZScqLzpcblx0XHRcdFx0XHRjYXNlICdleHRlbmRzJyAvKmNhc2UgJ2V4dGVuZHMnKi86IGJyZWFrO1xuXG5cdFx0XHRcdFx0Y2FzZSAncm93JyAvKmNhc2UgJ3JvdycqLzogYnJlYWs7XG5cdFx0XHRcdFx0ZGVmYXVsdDogc2VlbiA9IGZhbHNlO1xuXHRcdFx0XHR9IGJyZWFrO1xuXG5cdFx0XHRcdC8qIFNtYXJ0VGFncyAoY2FuIGJlIGFueXRoaW5nKSAqL1xuXHRcdFx0XHRjYXNlICdzbWFydHRhZ3MnIC8qY2FzZSAnU21hcnRUYWdzJyovOiBicmVhaztcblxuXHRcdFx0XHRkZWZhdWx0OiBzZWVuID0gZmFsc2U7IGJyZWFrO1xuXHRcdFx0fVxuXHRcdFx0aWYoc2VlbikgYnJlYWs7XG5cdFx0XHQvKiBDdXN0b21Eb2N1bWVudFByb3BlcnRpZXMgKi9cblx0XHRcdGlmKFJuWzNdLm1hdGNoKC8hXFxbQ0RBVEEvKSkgYnJlYWs7XG5cdFx0XHRpZighc3RhdGVbc3RhdGUubGVuZ3RoLTFdWzFdKSB0aHJvdyAnVW5yZWNvZ25pemVkIHRhZzogJyArIFJuWzNdICsgXCJ8XCIgKyBzdGF0ZS5qb2luKFwifFwiKTtcblx0XHRcdGlmKHN0YXRlW3N0YXRlLmxlbmd0aC0xXVswXT09PS8qJ0N1c3RvbURvY3VtZW50UHJvcGVydGllcycqLydjdXN0b21kb2N1bWVudHByb3BlcnRpZXMnKSB7XG5cdFx0XHRcdGlmKFJuWzBdLnNsaWNlKC0yKSA9PT0gXCIvPlwiKSBicmVhaztcblx0XHRcdFx0ZWxzZSBpZihSblsxXT09PVwiL1wiKSB4bG1sX3NldF9jdXN0cHJvcChDdXN0cHJvcHMsIHJhd19SbjMsIGNwLCBzdHIuc2xpY2UocGlkeCwgUm4uaW5kZXgpKTtcblx0XHRcdFx0ZWxzZSB7IGNwID0gUm47IHBpZHggPSBSbi5pbmRleCArIFJuWzBdLmxlbmd0aDsgfVxuXHRcdFx0XHRicmVhaztcblx0XHRcdH1cblx0XHRcdGlmKG9wdHMuV1RGKSB0aHJvdyAnVW5yZWNvZ25pemVkIHRhZzogJyArIFJuWzNdICsgXCJ8XCIgKyBzdGF0ZS5qb2luKFwifFwiKTtcblx0fVxuXHR2YXIgb3V0ID0gKHt9Lyo6YW55Ki8pO1xuXHRpZighb3B0cy5ib29rU2hlZXRzICYmICFvcHRzLmJvb2tQcm9wcykgb3V0LlNoZWV0cyA9IHNoZWV0cztcblx0b3V0LlNoZWV0TmFtZXMgPSBzaGVldG5hbWVzO1xuXHRvdXQuV29ya2Jvb2sgPSBXb3JrYm9vaztcblx0b3V0LlNTRiA9IGR1cCh0YWJsZV9mbXQpO1xuXHRvdXQuUHJvcHMgPSBQcm9wcztcblx0b3V0LkN1c3Rwcm9wcyA9IEN1c3Rwcm9wcztcblx0cmV0dXJuIG91dDtcbn1cblxuZnVuY3Rpb24gcGFyc2VfeGxtbChkYXRhLyo6UmF3Qnl0ZXN8c3RyaW5nKi8sIG9wdHMpLyo6V29ya2Jvb2sqLyB7XG5cdGZpeF9yZWFkX29wdHMob3B0cz1vcHRzfHx7fSk7XG5cdHN3aXRjaChvcHRzLnR5cGV8fFwiYmFzZTY0XCIpIHtcblx0XHRjYXNlIFwiYmFzZTY0XCI6IHJldHVybiBwYXJzZV94bG1sX3htbChCYXNlNjRfZGVjb2RlKGRhdGEpLCBvcHRzKTtcblx0XHRjYXNlIFwiYmluYXJ5XCI6IGNhc2UgXCJidWZmZXJcIjogY2FzZSBcImZpbGVcIjogcmV0dXJuIHBhcnNlX3hsbWxfeG1sKGRhdGEsIG9wdHMpO1xuXHRcdGNhc2UgXCJhcnJheVwiOiByZXR1cm4gcGFyc2VfeGxtbF94bWwoYTJzKGRhdGEpLCBvcHRzKTtcblx0fVxuXHQvKjo6IHRocm93IG5ldyBFcnJvcihcInVuc3VwcG9ydGVkIHR5cGUgXCIgKyBvcHRzLnR5cGUpOyAqL1xufVxuXG4vKiBUT0RPICovXG5mdW5jdGlvbiB3cml0ZV9wcm9wc194bG1sKHdiLyo6V29ya2Jvb2sqLywgb3B0cykvKjpzdHJpbmcqLyB7XG5cdHZhciBvLyo6QXJyYXk8c3RyaW5nPiovID0gW107XG5cdC8qIERvY3VtZW50UHJvcGVydGllcyAqL1xuXHRpZih3Yi5Qcm9wcykgby5wdXNoKHhsbWxfd3JpdGVfZG9jcHJvcHMod2IuUHJvcHMsIG9wdHMpKTtcblx0LyogQ3VzdG9tRG9jdW1lbnRQcm9wZXJ0aWVzICovXG5cdGlmKHdiLkN1c3Rwcm9wcykgby5wdXNoKHhsbWxfd3JpdGVfY3VzdHByb3BzKHdiLlByb3BzLCB3Yi5DdXN0cHJvcHMsIG9wdHMpKTtcblx0cmV0dXJuIG8uam9pbihcIlwiKTtcbn1cbi8qIFRPRE8gKi9cbmZ1bmN0aW9uIHdyaXRlX3diX3hsbWwoLyo6OndiLCBvcHRzKi8pLyo6c3RyaW5nKi8ge1xuXHQvKiBPZmZpY2VEb2N1bWVudFNldHRpbmdzICovXG5cdC8qIEV4Y2VsV29ya2Jvb2sgKi9cblx0cmV0dXJuIFwiXCI7XG59XG4vKiBUT0RPICovXG5mdW5jdGlvbiB3cml0ZV9zdHlfeGxtbCh3Yiwgb3B0cykvKjpzdHJpbmcqLyB7XG5cdC8qIFN0eWxlcyAqL1xuXHR2YXIgc3R5bGVzLyo6QXJyYXk8c3RyaW5nPiovID0gWyc8U3R5bGUgc3M6SUQ9XCJEZWZhdWx0XCIgc3M6TmFtZT1cIk5vcm1hbFwiPjxOdW1iZXJGb3JtYXQvPjwvU3R5bGU+J107XG5cdG9wdHMuY2VsbFhmcy5mb3JFYWNoKGZ1bmN0aW9uKHhmLCBpZCkge1xuXHRcdHZhciBwYXlsb2FkLyo6QXJyYXk8c3RyaW5nPiovID0gW107XG5cdFx0cGF5bG9hZC5wdXNoKHdyaXRleHRhZygnTnVtYmVyRm9ybWF0JywgbnVsbCwge1wic3M6Rm9ybWF0XCI6IGVzY2FwZXhtbCh0YWJsZV9mbXRbeGYubnVtRm10SWRdKX0pKTtcblxuXHRcdHZhciBvID0gLyo6OigqL3tcInNzOklEXCI6IFwic1wiICsgKDIxK2lkKX0vKjo6IDphbnkpKi87XG5cdFx0c3R5bGVzLnB1c2god3JpdGV4dGFnKCdTdHlsZScsIHBheWxvYWQuam9pbihcIlwiKSwgbykpO1xuXHR9KTtcblx0cmV0dXJuIHdyaXRleHRhZyhcIlN0eWxlc1wiLCBzdHlsZXMuam9pbihcIlwiKSk7XG59XG5mdW5jdGlvbiB3cml0ZV9uYW1lX3hsbWwobikgeyByZXR1cm4gd3JpdGV4dGFnKFwiTmFtZWRSYW5nZVwiLCBudWxsLCB7XCJzczpOYW1lXCI6IG4uTmFtZSwgXCJzczpSZWZlcnNUb1wiOlwiPVwiICsgYTFfdG9fcmMobi5SZWYsIHtyOjAsYzowfSl9KTsgfVxuZnVuY3Rpb24gd3JpdGVfbmFtZXNfeGxtbCh3Yi8qOjosIG9wdHMqLykvKjpzdHJpbmcqLyB7XG5cdGlmKCEoKHdifHx7fSkuV29ya2Jvb2t8fHt9KS5OYW1lcykgcmV0dXJuIFwiXCI7XG5cdC8qOjogaWYoIXdiIHx8ICF3Yi5Xb3JrYm9vayB8fCAhd2IuV29ya2Jvb2suTmFtZXMpIHRocm93IG5ldyBFcnJvcihcInVucmVhY2hhYmxlXCIpOyAqL1xuXHR2YXIgbmFtZXMvKjpBcnJheTxhbnk+Ki8gPSB3Yi5Xb3JrYm9vay5OYW1lcztcblx0dmFyIG91dC8qOkFycmF5PHN0cmluZz4qLyA9IFtdO1xuXHRmb3IodmFyIGkgPSAwOyBpIDwgbmFtZXMubGVuZ3RoOyArK2kpIHtcblx0XHR2YXIgbiA9IG5hbWVzW2ldO1xuXHRcdGlmKG4uU2hlZXQgIT0gbnVsbCkgY29udGludWU7XG5cdFx0aWYobi5OYW1lLm1hdGNoKC9eX3hsZm5cXC4vKSkgY29udGludWU7XG5cdFx0b3V0LnB1c2god3JpdGVfbmFtZV94bG1sKG4pKTtcblx0fVxuXHRyZXR1cm4gd3JpdGV4dGFnKFwiTmFtZXNcIiwgb3V0LmpvaW4oXCJcIikpO1xufVxuZnVuY3Rpb24gd3JpdGVfd3NfeGxtbF9uYW1lcyh3cy8qOldvcmtzaGVldCovLCBvcHRzLCBpZHgvKjpudW1iZXIqLywgd2IvKjpXb3JrYm9vayovKS8qOnN0cmluZyovIHtcblx0aWYoIXdzKSByZXR1cm4gXCJcIjtcblx0aWYoISgod2J8fHt9KS5Xb3JrYm9va3x8e30pLk5hbWVzKSByZXR1cm4gXCJcIjtcblx0Lyo6OiBpZighd2IgfHwgIXdiLldvcmtib29rIHx8ICF3Yi5Xb3JrYm9vay5OYW1lcykgdGhyb3cgbmV3IEVycm9yKFwidW5yZWFjaGFibGVcIik7ICovXG5cdHZhciBuYW1lcy8qOkFycmF5PGFueT4qLyA9IHdiLldvcmtib29rLk5hbWVzO1xuXHR2YXIgb3V0Lyo6QXJyYXk8c3RyaW5nPiovID0gW107XG5cdGZvcih2YXIgaSA9IDA7IGkgPCBuYW1lcy5sZW5ndGg7ICsraSkge1xuXHRcdHZhciBuID0gbmFtZXNbaV07XG5cdFx0aWYobi5TaGVldCAhPSBpZHgpIGNvbnRpbnVlO1xuXHRcdC8qc3dpdGNoKG4uTmFtZSkge1xuXHRcdFx0Y2FzZSBcIl9cIjogY29udGludWU7XG5cdFx0fSovXG5cdFx0aWYobi5OYW1lLm1hdGNoKC9eX3hsZm5cXC4vKSkgY29udGludWU7XG5cdFx0b3V0LnB1c2god3JpdGVfbmFtZV94bG1sKG4pKTtcblx0fVxuXHRyZXR1cm4gb3V0LmpvaW4oXCJcIik7XG59XG4vKiBXb3Jrc2hlZXRPcHRpb25zICovXG5mdW5jdGlvbiB3cml0ZV93c194bG1sX3dzb3B0cyh3cy8qOldvcmtzaGVldCovLCBvcHRzLCBpZHgvKjpudW1iZXIqLywgd2IvKjpXb3JrYm9vayovKS8qOnN0cmluZyovIHtcblx0aWYoIXdzKSByZXR1cm4gXCJcIjtcblx0dmFyIG8vKjpBcnJheTxzdHJpbmc+Ki8gPSBbXTtcblx0LyogTk9URTogc3BlYyB0ZWNobmljYWxseSBhbGxvd3MgYW55IG9yZGVyLCBidXQgc3RpY2sgd2l0aCBpbXBsaWVkIG9yZGVyICovXG5cblx0LyogRml0VG9QYWdlICovXG5cdC8qIERvTm90RGlzcGxheUNvbEhlYWRlcnMgKi9cblx0LyogRG9Ob3REaXNwbGF5Um93SGVhZGVycyAqL1xuXHQvKiBWaWV3YWJsZVJhbmdlICovXG5cdC8qIFNlbGVjdGlvbiAqL1xuXHQvKiBHcmlkbGluZUNvbG9yICovXG5cdC8qIE5hbWUgKi9cblx0LyogRXhjZWxXb3Jrc2hlZXRUeXBlICovXG5cdC8qIEludGxNYWNybyAqL1xuXHQvKiBVbnN5bmNlZCAqL1xuXHQvKiBTZWxlY3RlZCAqL1xuXHQvKiBDb2RlTmFtZSAqL1xuXG5cdGlmKHdzWychbWFyZ2lucyddKSB7XG5cdFx0by5wdXNoKFwiPFBhZ2VTZXR1cD5cIik7XG5cdFx0aWYod3NbJyFtYXJnaW5zJ10uaGVhZGVyKSBvLnB1c2god3JpdGV4dGFnKFwiSGVhZGVyXCIsIG51bGwsIHsneDpNYXJnaW4nOndzWychbWFyZ2lucyddLmhlYWRlcn0pKTtcblx0XHRpZih3c1snIW1hcmdpbnMnXS5mb290ZXIpIG8ucHVzaCh3cml0ZXh0YWcoXCJGb290ZXJcIiwgbnVsbCwgeyd4Ok1hcmdpbic6d3NbJyFtYXJnaW5zJ10uZm9vdGVyfSkpO1xuXHRcdG8ucHVzaCh3cml0ZXh0YWcoXCJQYWdlTWFyZ2luc1wiLCBudWxsLCB7XG5cdFx0XHQneDpCb3R0b20nOiB3c1snIW1hcmdpbnMnXS5ib3R0b20gfHwgXCIwLjc1XCIsXG5cdFx0XHQneDpMZWZ0Jzogd3NbJyFtYXJnaW5zJ10ubGVmdCB8fCBcIjAuN1wiLFxuXHRcdFx0J3g6UmlnaHQnOiB3c1snIW1hcmdpbnMnXS5yaWdodCB8fCBcIjAuN1wiLFxuXHRcdFx0J3g6VG9wJzogd3NbJyFtYXJnaW5zJ10udG9wIHx8IFwiMC43NVwiXG5cdFx0fSkpO1xuXHRcdG8ucHVzaChcIjwvUGFnZVNldHVwPlwiKTtcblx0fVxuXG5cdC8qIFBhZ2VTZXR1cCAqL1xuXHQvKiBEaXNwbGF5UGFnZUJyZWFrICovXG5cdC8qIFRyYW5zaXRpb25FeHByZXNzaW9uRXZhbHVhdGlvbiAqL1xuXHQvKiBUcmFuc2l0aW9uRm9ybXVsYUVudHJ5ICovXG5cdC8qIFByaW50ICovXG5cdC8qIFpvb20gKi9cblx0LyogUGFnZUxheW91dFpvb20gKi9cblx0LyogUGFnZUJyZWFrWm9vbSAqL1xuXHQvKiBTaG93UGFnZUJyZWFrWm9vbSAqL1xuXHQvKiBEZWZhdWx0Um93SGVpZ2h0ICovXG5cdC8qIERlZmF1bHRDb2x1bW5XaWR0aCAqL1xuXHQvKiBTdGFuZGFyZFdpZHRoICovXG5cblx0aWYod2IgJiYgd2IuV29ya2Jvb2sgJiYgd2IuV29ya2Jvb2suU2hlZXRzICYmIHdiLldvcmtib29rLlNoZWV0c1tpZHhdKSB7XG5cdFx0LyogVmlzaWJsZSAqL1xuXHRcdGlmKHdiLldvcmtib29rLlNoZWV0c1tpZHhdLkhpZGRlbikgby5wdXNoKHdyaXRleHRhZyhcIlZpc2libGVcIiwgKHdiLldvcmtib29rLlNoZWV0c1tpZHhdLkhpZGRlbiA9PSAxID8gXCJTaGVldEhpZGRlblwiIDogXCJTaGVldFZlcnlIaWRkZW5cIiksIHt9KSk7XG5cdFx0ZWxzZSB7XG5cdFx0XHQvKiBTZWxlY3RlZCAqL1xuXHRcdFx0Zm9yKHZhciBpID0gMDsgaSA8IGlkeDsgKytpKSBpZih3Yi5Xb3JrYm9vay5TaGVldHNbaV0gJiYgIXdiLldvcmtib29rLlNoZWV0c1tpXS5IaWRkZW4pIGJyZWFrO1xuXHRcdFx0aWYoaSA9PSBpZHgpIG8ucHVzaChcIjxTZWxlY3RlZC8+XCIpO1xuXHRcdH1cblx0fVxuXG5cdC8qIExlZnRDb2x1bW5WaXNpYmxlICovXG5cblx0aWYoKCgoKHdifHx7fSkuV29ya2Jvb2t8fHt9KS5WaWV3c3x8W10pWzBdfHx7fSkuUlRMKSBvLnB1c2goXCI8RGlzcGxheVJpZ2h0VG9MZWZ0Lz5cIik7XG5cblx0LyogR3JpZGxpbmVDb2xvckluZGV4ICovXG5cdC8qIERpc3BsYXlGb3JtdWxhcyAqL1xuXHQvKiBEb05vdERpc3BsYXlHcmlkbGluZXMgKi9cblx0LyogRG9Ob3REaXNwbGF5SGVhZGluZ3MgKi9cblx0LyogRG9Ob3REaXNwbGF5T3V0bGluZSAqL1xuXHQvKiBBcHBseUF1dG9tYXRpY091dGxpbmVTdHlsZXMgKi9cblx0LyogTm9TdW1tYXJ5Um93c0JlbG93RGV0YWlsICovXG5cdC8qIE5vU3VtbWFyeUNvbHVtbnNSaWdodERldGFpbCAqL1xuXHQvKiBEb05vdERpc3BsYXlaZXJvcyAqL1xuXHQvKiBBY3RpdmVSb3cgKi9cblx0LyogQWN0aXZlQ29sdW1uICovXG5cdC8qIEZpbHRlck9uICovXG5cdC8qIFJhbmdlU2VsZWN0aW9uICovXG5cdC8qIFRvcFJvd1Zpc2libGUgKi9cblx0LyogVG9wUm93Qm90dG9tUGFuZSAqL1xuXHQvKiBMZWZ0Q29sdW1uUmlnaHRQYW5lICovXG5cdC8qIEFjdGl2ZVBhbmUgKi9cblx0LyogU3BsaXRIb3Jpem9udGFsICovXG5cdC8qIFNwbGl0VmVydGljYWwgKi9cblx0LyogRnJlZXplUGFuZXMgKi9cblx0LyogRnJvemVuTm9TcGxpdCAqL1xuXHQvKiBUYWJDb2xvckluZGV4ICovXG5cdC8qIFBhbmVzICovXG5cblx0LyogTk9URTogUGFzc3dvcmQgbm90IHN1cHBvcnRlZCBpbiBYTE1MIEZvcm1hdCAqL1xuXHRpZih3c1snIXByb3RlY3QnXSkge1xuXHRcdG8ucHVzaCh3cml0ZXRhZyhcIlByb3RlY3RDb250ZW50c1wiLCBcIlRydWVcIikpO1xuXHRcdGlmKHdzWychcHJvdGVjdCddLm9iamVjdHMpIG8ucHVzaCh3cml0ZXRhZyhcIlByb3RlY3RPYmplY3RzXCIsIFwiVHJ1ZVwiKSk7XG5cdFx0aWYod3NbJyFwcm90ZWN0J10uc2NlbmFyaW9zKSBvLnB1c2god3JpdGV0YWcoXCJQcm90ZWN0U2NlbmFyaW9zXCIsIFwiVHJ1ZVwiKSk7XG5cdFx0aWYod3NbJyFwcm90ZWN0J10uc2VsZWN0TG9ja2VkQ2VsbHMgIT0gbnVsbCAmJiAhd3NbJyFwcm90ZWN0J10uc2VsZWN0TG9ja2VkQ2VsbHMpIG8ucHVzaCh3cml0ZXRhZyhcIkVuYWJsZVNlbGVjdGlvblwiLCBcIk5vU2VsZWN0aW9uXCIpKTtcblx0XHRlbHNlIGlmKHdzWychcHJvdGVjdCddLnNlbGVjdFVubG9ja2VkQ2VsbHMgIT0gbnVsbCAmJiAhd3NbJyFwcm90ZWN0J10uc2VsZWN0VW5sb2NrZWRDZWxscykgby5wdXNoKHdyaXRldGFnKFwiRW5hYmxlU2VsZWN0aW9uXCIsIFwiVW5sb2NrZWRDZWxsc1wiKSk7XG5cdFtcblx0XHRbIFwiZm9ybWF0Q2VsbHNcIiwgXCJBbGxvd0Zvcm1hdENlbGxzXCIgXSxcblx0XHRbIFwiZm9ybWF0Q29sdW1uc1wiLCBcIkFsbG93U2l6ZUNvbHNcIiBdLFxuXHRcdFsgXCJmb3JtYXRSb3dzXCIsIFwiQWxsb3dTaXplUm93c1wiIF0sXG5cdFx0WyBcImluc2VydENvbHVtbnNcIiwgXCJBbGxvd0luc2VydENvbHNcIiBdLFxuXHRcdFsgXCJpbnNlcnRSb3dzXCIsIFwiQWxsb3dJbnNlcnRSb3dzXCIgXSxcblx0XHRbIFwiaW5zZXJ0SHlwZXJsaW5rc1wiLCBcIkFsbG93SW5zZXJ0SHlwZXJsaW5rc1wiIF0sXG5cdFx0WyBcImRlbGV0ZUNvbHVtbnNcIiwgXCJBbGxvd0RlbGV0ZUNvbHNcIiBdLFxuXHRcdFsgXCJkZWxldGVSb3dzXCIsIFwiQWxsb3dEZWxldGVSb3dzXCIgXSxcblx0XHRbIFwic29ydFwiLCBcIkFsbG93U29ydFwiIF0sXG5cdFx0WyBcImF1dG9GaWx0ZXJcIiwgXCJBbGxvd0ZpbHRlclwiIF0sXG5cdFx0WyBcInBpdm90VGFibGVzXCIsIFwiQWxsb3dVc2VQaXZvdFRhYmxlc1wiIF1cblx0XS5mb3JFYWNoKGZ1bmN0aW9uKHgpIHsgaWYod3NbJyFwcm90ZWN0J11beFswXV0pIG8ucHVzaChcIjxcIit4WzFdK1wiLz5cIik7IH0pO1xuXHR9XG5cblx0aWYoby5sZW5ndGggPT0gMCkgcmV0dXJuIFwiXCI7XG5cdHJldHVybiB3cml0ZXh0YWcoXCJXb3Jrc2hlZXRPcHRpb25zXCIsIG8uam9pbihcIlwiKSwge3htbG5zOlhMTUxOUy54fSk7XG59XG5mdW5jdGlvbiB3cml0ZV93c194bG1sX2NvbW1lbnQoY29tbWVudHMvKjpBcnJheTxhbnk+Ki8pLyo6c3RyaW5nKi8ge1xuXHRyZXR1cm4gY29tbWVudHMubWFwKGZ1bmN0aW9uKGMpIHtcblx0XHQvLyBUT0RPOiBmb3JtYXR0ZWQgdGV4dFxuXHRcdHZhciB0ID0geGxtbF91bmZpeHN0cihjLnR8fFwiXCIpO1xuXHRcdHZhciBkID13cml0ZXh0YWcoXCJzczpEYXRhXCIsIHQsIHtcInhtbG5zXCI6XCJodHRwOi8vd3d3LnczLm9yZy9UUi9SRUMtaHRtbDQwXCJ9KTtcblx0XHRyZXR1cm4gd3JpdGV4dGFnKFwiQ29tbWVudFwiLCBkLCB7XCJzczpBdXRob3JcIjpjLmF9KTtcblx0fSkuam9pbihcIlwiKTtcbn1cbmZ1bmN0aW9uIHdyaXRlX3dzX3hsbWxfY2VsbChjZWxsLCByZWYvKjpzdHJpbmcqLywgd3MsIG9wdHMsIGlkeC8qOm51bWJlciovLCB3YiwgYWRkcikvKjpzdHJpbmcqL3tcblx0aWYoIWNlbGwgfHwgKGNlbGwudiA9PSB1bmRlZmluZWQgJiYgY2VsbC5mID09IHVuZGVmaW5lZCkpIHJldHVybiBcIlwiO1xuXG5cdHZhciBhdHRyID0ge307XG5cdGlmKGNlbGwuZikgYXR0cltcInNzOkZvcm11bGFcIl0gPSBcIj1cIiArIGVzY2FwZXhtbChhMV90b19yYyhjZWxsLmYsIGFkZHIpKTtcblx0aWYoY2VsbC5GICYmIGNlbGwuRi5zbGljZSgwLCByZWYubGVuZ3RoKSA9PSByZWYpIHtcblx0XHR2YXIgZW5kID0gZGVjb2RlX2NlbGwoY2VsbC5GLnNsaWNlKHJlZi5sZW5ndGggKyAxKSk7XG5cdFx0YXR0cltcInNzOkFycmF5UmFuZ2VcIl0gPSBcIlJDOlJcIiArIChlbmQuciA9PSBhZGRyLnIgPyBcIlwiIDogXCJbXCIgKyAoZW5kLnIgLSBhZGRyLnIpICsgXCJdXCIpICsgXCJDXCIgKyAoZW5kLmMgPT0gYWRkci5jID8gXCJcIiA6IFwiW1wiICsgKGVuZC5jIC0gYWRkci5jKSArIFwiXVwiKTtcblx0fVxuXG5cdGlmKGNlbGwubCAmJiBjZWxsLmwuVGFyZ2V0KSB7XG5cdFx0YXR0cltcInNzOkhSZWZcIl0gPSBlc2NhcGV4bWwoY2VsbC5sLlRhcmdldCk7XG5cdFx0aWYoY2VsbC5sLlRvb2x0aXApIGF0dHJbXCJ4OkhSZWZTY3JlZW5UaXBcIl0gPSBlc2NhcGV4bWwoY2VsbC5sLlRvb2x0aXApO1xuXHR9XG5cblx0aWYod3NbJyFtZXJnZXMnXSkge1xuXHRcdHZhciBtYXJyID0gd3NbJyFtZXJnZXMnXTtcblx0XHRmb3IodmFyIG1pID0gMDsgbWkgIT0gbWFyci5sZW5ndGg7ICsrbWkpIHtcblx0XHRcdGlmKG1hcnJbbWldLnMuYyAhPSBhZGRyLmMgfHwgbWFyclttaV0ucy5yICE9IGFkZHIucikgY29udGludWU7XG5cdFx0XHRpZihtYXJyW21pXS5lLmMgPiBtYXJyW21pXS5zLmMpIGF0dHJbJ3NzOk1lcmdlQWNyb3NzJ10gPSBtYXJyW21pXS5lLmMgLSBtYXJyW21pXS5zLmM7XG5cdFx0XHRpZihtYXJyW21pXS5lLnIgPiBtYXJyW21pXS5zLnIpIGF0dHJbJ3NzOk1lcmdlRG93biddID0gbWFyclttaV0uZS5yIC0gbWFyclttaV0ucy5yO1xuXHRcdH1cblx0fVxuXG5cdHZhciB0ID0gXCJcIiwgcCA9IFwiXCI7XG5cdHN3aXRjaChjZWxsLnQpIHtcblx0XHRjYXNlICd6JzogaWYoIW9wdHMuc2hlZXRTdHVicykgcmV0dXJuIFwiXCI7IGJyZWFrO1xuXHRcdGNhc2UgJ24nOiB0ID0gJ051bWJlcic7IHAgPSBTdHJpbmcoY2VsbC52KTsgYnJlYWs7XG5cdFx0Y2FzZSAnYic6IHQgPSAnQm9vbGVhbic7IHAgPSAoY2VsbC52ID8gXCIxXCIgOiBcIjBcIik7IGJyZWFrO1xuXHRcdGNhc2UgJ2UnOiB0ID0gJ0Vycm9yJzsgcCA9IEJFcnJbY2VsbC52XTsgYnJlYWs7XG5cdFx0Y2FzZSAnZCc6IHQgPSAnRGF0ZVRpbWUnOyBwID0gbmV3IERhdGUoY2VsbC52KS50b0lTT1N0cmluZygpOyBpZihjZWxsLnogPT0gbnVsbCkgY2VsbC56ID0gY2VsbC56IHx8IHRhYmxlX2ZtdFsxNF07IGJyZWFrO1xuXHRcdGNhc2UgJ3MnOiB0ID0gJ1N0cmluZyc7IHAgPSBlc2NhcGV4bG1sKGNlbGwudnx8XCJcIik7IGJyZWFrO1xuXHR9XG5cdC8qIFRPRE86IGNlbGwgc3R5bGUgKi9cblx0dmFyIG9zID0gZ2V0X2NlbGxfc3R5bGUob3B0cy5jZWxsWGZzLCBjZWxsLCBvcHRzKTtcblx0YXR0cltcInNzOlN0eWxlSURcIl0gPSBcInNcIiArICgyMStvcyk7XG5cdGF0dHJbXCJzczpJbmRleFwiXSA9IGFkZHIuYyArIDE7XG5cdHZhciBfdiA9IChjZWxsLnYgIT0gbnVsbCA/IHAgOiBcIlwiKTtcblx0dmFyIG0gPSBjZWxsLnQgPT0gJ3onID8gXCJcIiA6ICgnPERhdGEgc3M6VHlwZT1cIicgKyB0ICsgJ1wiPicgKyBfdiArICc8L0RhdGE+Jyk7XG5cblx0aWYoKGNlbGwuY3x8W10pLmxlbmd0aCA+IDApIG0gKz0gd3JpdGVfd3NfeGxtbF9jb21tZW50KGNlbGwuYyk7XG5cblx0cmV0dXJuIHdyaXRleHRhZyhcIkNlbGxcIiwgbSwgYXR0cik7XG59XG5mdW5jdGlvbiB3cml0ZV93c194bG1sX3JvdyhSLyo6bnVtYmVyKi8sIHJvdykvKjpzdHJpbmcqLyB7XG5cdHZhciBvID0gJzxSb3cgc3M6SW5kZXg9XCInICsgKFIrMSkgKyAnXCInO1xuXHRpZihyb3cpIHtcblx0XHRpZihyb3cuaHB0ICYmICFyb3cuaHB4KSByb3cuaHB4ID0gcHQycHgocm93LmhwdCk7XG5cdFx0aWYocm93LmhweCkgbyArPSAnIHNzOkF1dG9GaXRIZWlnaHQ9XCIwXCIgc3M6SGVpZ2h0PVwiJyArIHJvdy5ocHggKyAnXCInO1xuXHRcdGlmKHJvdy5oaWRkZW4pIG8gKz0gJyBzczpIaWRkZW49XCIxXCInO1xuXHR9XG5cdHJldHVybiBvICsgJz4nO1xufVxuLyogVE9ETyAqL1xuZnVuY3Rpb24gd3JpdGVfd3NfeGxtbF90YWJsZSh3cy8qOldvcmtzaGVldCovLCBvcHRzLCBpZHgvKjpudW1iZXIqLywgd2IvKjpXb3JrYm9vayovKS8qOnN0cmluZyovIHtcblx0aWYoIXdzWychcmVmJ10pIHJldHVybiBcIlwiO1xuXHR2YXIgcmFuZ2UvKjpSYW5nZSovID0gc2FmZV9kZWNvZGVfcmFuZ2Uod3NbJyFyZWYnXSk7XG5cdHZhciBtYXJyLyo6QXJyYXk8UmFuZ2U+Ki8gPSB3c1snIW1lcmdlcyddIHx8IFtdLCBtaSA9IDA7XG5cdHZhciBvLyo6QXJyYXk8c3RyaW5nPiovID0gW107XG5cdGlmKHdzWychY29scyddKSB3c1snIWNvbHMnXS5mb3JFYWNoKGZ1bmN0aW9uKG4sIGkpIHtcblx0XHRwcm9jZXNzX2NvbChuKTtcblx0XHR2YXIgdyA9ICEhbi53aWR0aDtcblx0XHR2YXIgcCA9IGNvbF9vYmpfdyhpLCBuKTtcblx0XHR2YXIgay8qOmFueSovID0ge1wic3M6SW5kZXhcIjppKzF9O1xuXHRcdGlmKHcpIGtbJ3NzOldpZHRoJ10gPSB3aWR0aDJweChwLndpZHRoKTtcblx0XHRpZihuLmhpZGRlbikga1snc3M6SGlkZGVuJ109XCIxXCI7XG5cdFx0by5wdXNoKHdyaXRleHRhZyhcIkNvbHVtblwiLG51bGwsaykpO1xuXHR9KTtcblx0dmFyIGRlbnNlID0gQXJyYXkuaXNBcnJheSh3cyk7XG5cdGZvcih2YXIgUiA9IHJhbmdlLnMucjsgUiA8PSByYW5nZS5lLnI7ICsrUikge1xuXHRcdHZhciByb3cgPSBbd3JpdGVfd3NfeGxtbF9yb3coUiwgKHdzWychcm93cyddfHxbXSlbUl0pXTtcblx0XHRmb3IodmFyIEMgPSByYW5nZS5zLmM7IEMgPD0gcmFuZ2UuZS5jOyArK0MpIHtcblx0XHRcdHZhciBza2lwID0gZmFsc2U7XG5cdFx0XHRmb3IobWkgPSAwOyBtaSAhPSBtYXJyLmxlbmd0aDsgKyttaSkge1xuXHRcdFx0XHRpZihtYXJyW21pXS5zLmMgPiBDKSBjb250aW51ZTtcblx0XHRcdFx0aWYobWFyclttaV0ucy5yID4gUikgY29udGludWU7XG5cdFx0XHRcdGlmKG1hcnJbbWldLmUuYyA8IEMpIGNvbnRpbnVlO1xuXHRcdFx0XHRpZihtYXJyW21pXS5lLnIgPCBSKSBjb250aW51ZTtcblx0XHRcdFx0aWYobWFyclttaV0ucy5jICE9IEMgfHwgbWFyclttaV0ucy5yICE9IFIpIHNraXAgPSB0cnVlO1xuXHRcdFx0XHRicmVhaztcblx0XHRcdH1cblx0XHRcdGlmKHNraXApIGNvbnRpbnVlO1xuXHRcdFx0dmFyIGFkZHIgPSB7cjpSLGM6Q307XG5cdFx0XHR2YXIgcmVmID0gZW5jb2RlX2NlbGwoYWRkciksIGNlbGwgPSBkZW5zZSA/ICh3c1tSXXx8W10pW0NdIDogd3NbcmVmXTtcblx0XHRcdHJvdy5wdXNoKHdyaXRlX3dzX3hsbWxfY2VsbChjZWxsLCByZWYsIHdzLCBvcHRzLCBpZHgsIHdiLCBhZGRyKSk7XG5cdFx0fVxuXHRcdHJvdy5wdXNoKFwiPC9Sb3c+XCIpO1xuXHRcdGlmKHJvdy5sZW5ndGggPiAyKSBvLnB1c2gocm93LmpvaW4oXCJcIikpO1xuXHR9XG5cdHJldHVybiBvLmpvaW4oXCJcIik7XG59XG5mdW5jdGlvbiB3cml0ZV93c194bG1sKGlkeC8qOm51bWJlciovLCBvcHRzLCB3Yi8qOldvcmtib29rKi8pLyo6c3RyaW5nKi8ge1xuXHR2YXIgby8qOkFycmF5PHN0cmluZz4qLyA9IFtdO1xuXHR2YXIgcyA9IHdiLlNoZWV0TmFtZXNbaWR4XTtcblx0dmFyIHdzID0gd2IuU2hlZXRzW3NdO1xuXG5cdHZhciB0Lyo6c3RyaW5nKi8gPSB3cyA/IHdyaXRlX3dzX3hsbWxfbmFtZXMod3MsIG9wdHMsIGlkeCwgd2IpIDogXCJcIjtcblx0aWYodC5sZW5ndGggPiAwKSBvLnB1c2goXCI8TmFtZXM+XCIgKyB0ICsgXCI8L05hbWVzPlwiKTtcblxuXHQvKiBUYWJsZSAqL1xuXHR0ID0gd3MgPyB3cml0ZV93c194bG1sX3RhYmxlKHdzLCBvcHRzLCBpZHgsIHdiKSA6IFwiXCI7XG5cdGlmKHQubGVuZ3RoID4gMCkgby5wdXNoKFwiPFRhYmxlPlwiICsgdCArIFwiPC9UYWJsZT5cIik7XG5cblx0LyogV29ya3NoZWV0T3B0aW9ucyAqL1xuXHRvLnB1c2god3JpdGVfd3NfeGxtbF93c29wdHMod3MsIG9wdHMsIGlkeCwgd2IpKTtcblxuXHRyZXR1cm4gby5qb2luKFwiXCIpO1xufVxuZnVuY3Rpb24gd3JpdGVfeGxtbCh3Yiwgb3B0cykvKjpzdHJpbmcqLyB7XG5cdGlmKCFvcHRzKSBvcHRzID0ge307XG5cdGlmKCF3Yi5TU0YpIHdiLlNTRiA9IGR1cCh0YWJsZV9mbXQpO1xuXHRpZih3Yi5TU0YpIHtcblx0XHRtYWtlX3NzZigpOyBTU0ZfbG9hZF90YWJsZSh3Yi5TU0YpO1xuXHRcdC8vICRGbG93SWdub3JlXG5cdFx0b3B0cy5yZXZzc2YgPSBldmVydF9udW0od2IuU1NGKTsgb3B0cy5yZXZzc2Zbd2IuU1NGWzY1NTM1XV0gPSAwO1xuXHRcdG9wdHMuc3NmID0gd2IuU1NGO1xuXHRcdG9wdHMuY2VsbFhmcyA9IFtdO1xuXHRcdGdldF9jZWxsX3N0eWxlKG9wdHMuY2VsbFhmcywge30sIHtyZXZzc2Y6e1wiR2VuZXJhbFwiOjB9fSk7XG5cdH1cblx0dmFyIGQvKjpBcnJheTxzdHJpbmc+Ki8gPSBbXTtcblx0ZC5wdXNoKHdyaXRlX3Byb3BzX3hsbWwod2IsIG9wdHMpKTtcblx0ZC5wdXNoKHdyaXRlX3diX3hsbWwod2IsIG9wdHMpKTtcblx0ZC5wdXNoKFwiXCIpO1xuXHRkLnB1c2goXCJcIik7XG5cdGZvcih2YXIgaSA9IDA7IGkgPCB3Yi5TaGVldE5hbWVzLmxlbmd0aDsgKytpKVxuXHRcdGQucHVzaCh3cml0ZXh0YWcoXCJXb3Jrc2hlZXRcIiwgd3JpdGVfd3NfeGxtbChpLCBvcHRzLCB3YiksIHtcInNzOk5hbWVcIjplc2NhcGV4bWwod2IuU2hlZXROYW1lc1tpXSl9KSk7XG5cdGRbMl0gPSB3cml0ZV9zdHlfeGxtbCh3Yiwgb3B0cyk7XG5cdGRbM10gPSB3cml0ZV9uYW1lc194bG1sKHdiLCBvcHRzKTtcblx0cmV0dXJuIFhNTF9IRUFERVIgKyB3cml0ZXh0YWcoXCJXb3JrYm9va1wiLCBkLmpvaW4oXCJcIiksIHtcblx0XHQneG1sbnMnOiAgICAgIFhMTUxOUy5zcyxcblx0XHQneG1sbnM6byc6ICAgIFhMTUxOUy5vLFxuXHRcdCd4bWxuczp4JzogICAgWExNTE5TLngsXG5cdFx0J3htbG5zOnNzJzogICBYTE1MTlMuc3MsXG5cdFx0J3htbG5zOmR0JzogICBYTE1MTlMuZHQsXG5cdFx0J3htbG5zOmh0bWwnOiBYTE1MTlMuaHRtbFxuXHR9KTtcbn1cbi8qIFtNUy1PTEVEU10gMi4zLjggQ29tcE9ialN0cmVhbSAqL1xuZnVuY3Rpb24gcGFyc2VfY29tcG9iaihvYmovKjpDRkJFbnRyeSovKSB7XG5cdHZhciB2ID0ge307XG5cdHZhciBvID0gb2JqLmNvbnRlbnQ7XG5cdC8qOjogaWYobyA9PSBudWxsKSByZXR1cm47ICovXG5cblx0LyogW01TLU9MRURTXSAyLjMuNyBDb21wT2JqSGVhZGVyIC0tIEFsbCBmaWVsZHMgTVVTVCBiZSBpZ25vcmVkICovXG5cdG8ubCA9IDI4O1xuXG5cdHYuQW5zaVVzZXJUeXBlID0gby5yZWFkX3NoaWZ0KDAsIFwibHBzdHItYW5zaVwiKTtcblx0di5BbnNpQ2xpcGJvYXJkRm9ybWF0ID0gcGFyc2VfQ2xpcGJvYXJkRm9ybWF0T3JBbnNpU3RyaW5nKG8pO1xuXG5cdGlmKG8ubGVuZ3RoIC0gby5sIDw9IDQpIHJldHVybiB2O1xuXG5cdHZhciBtLyo6bnVtYmVyKi8gPSBvLnJlYWRfc2hpZnQoNCk7XG5cdGlmKG0gPT0gMCB8fCBtID4gNDApIHJldHVybiB2O1xuXHRvLmwtPTQ7IHYuUmVzZXJ2ZWQxID0gby5yZWFkX3NoaWZ0KDAsIFwibHBzdHItYW5zaVwiKTtcblxuXHRpZihvLmxlbmd0aCAtIG8ubCA8PSA0KSByZXR1cm4gdjtcblx0bSA9IG8ucmVhZF9zaGlmdCg0KTtcblx0aWYobSAhPT0gMHg3MWIyMzlmNCkgcmV0dXJuIHY7XG5cdHYuVW5pY29kZUNsaXBib2FyZEZvcm1hdCA9IHBhcnNlX0NsaXBib2FyZEZvcm1hdE9yVW5pY29kZVN0cmluZyhvKTtcblxuXHRtID0gby5yZWFkX3NoaWZ0KDQpO1xuXHRpZihtID09IDAgfHwgbSA+IDQwKSByZXR1cm4gdjtcblx0by5sLT00OyB2LlJlc2VydmVkMiA9IG8ucmVhZF9zaGlmdCgwLCBcImxwd3N0clwiKTtcbn1cblxuLypcblx0Q29udGludWUgbG9naWMgZm9yOlxuXHQtIDIuNC41OCBDb250aW51ZSAgICAgICAgICAweDAwM2Ncblx0LSAyLjQuNTkgQ29udGludWVCaWdOYW1lICAgMHgwNDNjXG5cdC0gMi40LjYwIENvbnRpbnVlRnJ0ICAgICAgIDB4MDgxMlxuXHQtIDIuNC42MSBDb250aW51ZUZydDExICAgICAweDA4NzVcblx0LSAyLjQuNjIgQ29udGludWVGcnQxMiAgICAgMHgwODdmXG4qL1xudmFyIENPTlRJTlVFX1JUID0gWyAweDAwM2MsIDB4MDQzYywgMHgwODEyLCAweDA4NzUsIDB4MDg3ZiBdO1xuZnVuY3Rpb24gc2x1cnAoUmVjb3JkVHlwZSwgUiwgYmxvYiwgbGVuZ3RoLyo6bnVtYmVyKi8sIG9wdHMpLyo6YW55Ki8ge1xuXHR2YXIgbCA9IGxlbmd0aDtcblx0dmFyIGJ1ZnMgPSBbXTtcblx0dmFyIGQgPSBibG9iLnNsaWNlKGJsb2IubCxibG9iLmwrbCk7XG5cdGlmKG9wdHMgJiYgb3B0cy5lbmMgJiYgb3B0cy5lbmMuaW5zaXR1ICYmIGQubGVuZ3RoID4gMCkgc3dpdGNoKFJlY29yZFR5cGUpIHtcblx0Y2FzZSAweDAwMDk6IGNhc2UgMHgwMjA5OiBjYXNlIDB4MDQwOTogY2FzZSAweDA4MDkvKiBCT0YgKi86IGNhc2UgMHgwMDJmIC8qIEZpbGVQYXNzICovOiBjYXNlIDB4MDE5NSAvKiBGaWxlTG9jayAqLzogY2FzZSAweDAwZTEgLyogSW50ZXJmYWNlSGRyICovOiBjYXNlIDB4MDE5NiAvKiBSUkRJbmZvICovOiBjYXNlIDB4MDEzOCAvKiBSUkRIZWFkICovOiBjYXNlIDB4MDE5NCAvKiBVc3JFeGNsICovOiBjYXNlIDB4MDAwYSAvKiBFT0YgKi86XG5cdFx0YnJlYWs7XG5cdGNhc2UgMHgwMDg1IC8qIEJvdW5kU2hlZXQ4ICovOlxuXHRcdGJyZWFrO1xuXHRkZWZhdWx0OlxuXHRcdG9wdHMuZW5jLmluc2l0dShkKTtcblx0fVxuXHRidWZzLnB1c2goZCk7XG5cdGJsb2IubCArPSBsO1xuXHR2YXIgbmV4dHJ0ID0gX19yZWFkVUludDE2TEUoYmxvYixibG9iLmwpLCBuZXh0ID0gWExTUmVjb3JkRW51bVtuZXh0cnRdO1xuXHR2YXIgc3RhcnQgPSAwO1xuXHR3aGlsZShuZXh0ICE9IG51bGwgJiYgQ09OVElOVUVfUlQuaW5kZXhPZihuZXh0cnQpID4gLTEpIHtcblx0XHRsID0gX19yZWFkVUludDE2TEUoYmxvYixibG9iLmwrMik7XG5cdFx0c3RhcnQgPSBibG9iLmwgKyA0O1xuXHRcdGlmKG5leHRydCA9PSAweDA4MTIgLyogQ29udGludWVGcnQgKi8pIHN0YXJ0ICs9IDQ7XG5cdFx0ZWxzZSBpZihuZXh0cnQgPT0gMHgwODc1IHx8IG5leHRydCA9PSAweDA4N2YpIHtcblx0XHRcdHN0YXJ0ICs9IDEyO1xuXHRcdH1cblx0XHRkID0gYmxvYi5zbGljZShzdGFydCxibG9iLmwrNCtsKTtcblx0XHRidWZzLnB1c2goZCk7XG5cdFx0YmxvYi5sICs9IDQrbDtcblx0XHRuZXh0ID0gKFhMU1JlY29yZEVudW1bbmV4dHJ0ID0gX19yZWFkVUludDE2TEUoYmxvYiwgYmxvYi5sKV0pO1xuXHR9XG5cdHZhciBiID0gKGJjb25jYXQoYnVmcykvKjphbnkqLyk7XG5cdHByZXBfYmxvYihiLCAwKTtcblx0dmFyIGxsID0gMDsgYi5sZW5zID0gW107XG5cdGZvcih2YXIgaiA9IDA7IGogPCBidWZzLmxlbmd0aDsgKytqKSB7IGIubGVucy5wdXNoKGxsKTsgbGwgKz0gYnVmc1tqXS5sZW5ndGg7IH1cblx0aWYoYi5sZW5ndGggPCBsZW5ndGgpIHRocm93IFwiWExTIFJlY29yZCAweFwiICsgUmVjb3JkVHlwZS50b1N0cmluZygxNikgKyBcIiBUcnVuY2F0ZWQ6IFwiICsgYi5sZW5ndGggKyBcIiA8IFwiICsgbGVuZ3RoO1xuXHRyZXR1cm4gUi5mKGIsIGIubGVuZ3RoLCBvcHRzKTtcbn1cblxuZnVuY3Rpb24gc2FmZV9mb3JtYXRfeGYocC8qOmFueSovLCBvcHRzLyo6UGFyc2VPcHRzKi8sIGRhdGUxOTA0Lyo6P2Jvb2xlYW4qLykge1xuXHRpZihwLnQgPT09ICd6JykgcmV0dXJuO1xuXHRpZighcC5YRikgcmV0dXJuO1xuXHR2YXIgZm10aWQgPSAwO1xuXHR0cnkge1xuXHRcdGZtdGlkID0gcC56IHx8IHAuWEYubnVtRm10SWQgfHwgMDtcblx0XHRpZihvcHRzLmNlbGxORikgcC56ID0gdGFibGVfZm10W2ZtdGlkXTtcblx0fSBjYXRjaChlKSB7IGlmKG9wdHMuV1RGKSB0aHJvdyBlOyB9XG5cdGlmKCFvcHRzIHx8IG9wdHMuY2VsbFRleHQgIT09IGZhbHNlKSB0cnkge1xuXHRcdGlmKHAudCA9PT0gJ2UnKSB7IHAudyA9IHAudyB8fCBCRXJyW3Audl07IH1cblx0XHRlbHNlIGlmKGZtdGlkID09PSAwIHx8IGZtdGlkID09IFwiR2VuZXJhbFwiKSB7XG5cdFx0XHRpZihwLnQgPT09ICduJykge1xuXHRcdFx0XHRpZigocC52fDApID09PSBwLnYpIHAudyA9IHAudi50b1N0cmluZygxMCk7XG5cdFx0XHRcdGVsc2UgcC53ID0gU1NGX2dlbmVyYWxfbnVtKHAudik7XG5cdFx0XHR9XG5cdFx0XHRlbHNlIHAudyA9IFNTRl9nZW5lcmFsKHAudik7XG5cdFx0fVxuXHRcdGVsc2UgcC53ID0gU1NGX2Zvcm1hdChmbXRpZCxwLnYsIHtkYXRlMTkwNDohIWRhdGUxOTA0LCBkYXRlTkY6IG9wdHMgJiYgb3B0cy5kYXRlTkZ9KTtcblx0fSBjYXRjaChlKSB7IGlmKG9wdHMuV1RGKSB0aHJvdyBlOyB9XG5cdGlmKG9wdHMuY2VsbERhdGVzICYmIGZtdGlkICYmIHAudCA9PSAnbicgJiYgZm10X2lzX2RhdGUodGFibGVfZm10W2ZtdGlkXSB8fCBTdHJpbmcoZm10aWQpKSkge1xuXHRcdHZhciBfZCA9IFNTRl9wYXJzZV9kYXRlX2NvZGUocC52KTsgaWYoX2QpIHsgcC50ID0gJ2QnOyBwLnYgPSBuZXcgRGF0ZShfZC55LCBfZC5tLTEsX2QuZCxfZC5ILF9kLk0sX2QuUyxfZC51KTsgfVxuXHR9XG59XG5cbmZ1bmN0aW9uIG1ha2VfY2VsbCh2YWwsIGl4ZmUsIHQpLyo6Q2VsbCovIHtcblx0cmV0dXJuICh7djp2YWwsIGl4ZmU6aXhmZSwgdDp0fS8qOmFueSovKTtcbn1cblxuLy8gMi4zLjJcbmZ1bmN0aW9uIHBhcnNlX3dvcmtib29rKGJsb2IsIG9wdGlvbnMvKjpQYXJzZU9wdHMqLykvKjpXb3JrYm9vayovIHtcblx0dmFyIHdiID0gKHtvcHRzOnt9fS8qOmFueSovKTtcblx0dmFyIFNoZWV0cyA9IHt9O1xuXHRpZihERU5TRSAhPSBudWxsICYmIG9wdGlvbnMuZGVuc2UgPT0gbnVsbCkgb3B0aW9ucy5kZW5zZSA9IERFTlNFO1xuXHR2YXIgb3V0Lyo6V29ya3NoZWV0Ki8gPSAoKG9wdGlvbnMuZGVuc2UgPyBbXSA6IHt9KS8qOmFueSovKTtcblx0dmFyIERpcmVjdG9yeSA9IHt9O1xuXHR2YXIgcmFuZ2UvKjpSYW5nZSovID0gKHt9Lyo6YW55Ki8pO1xuXHR2YXIgbGFzdF9mb3JtdWxhID0gbnVsbDtcblx0dmFyIHNzdC8qOlNTVCovID0gKFtdLyo6YW55Ki8pO1xuXHR2YXIgY3VyX3NoZWV0ID0gXCJcIjtcblx0dmFyIFByZWFtYmxlID0ge307XG5cdHZhciBsYXN0Y2VsbCwgbGFzdF9jZWxsID0gXCJcIiwgY2MvKjpDZWxsKi8sIGNtbnQsIHJuZ0MsIHJuZ1I7XG5cdHZhciBzaGFyZWRmID0ge307XG5cdHZhciBhcnJheWYvKjpBcnJheTxbUmFuZ2UsIHN0cmluZ10+Ki8gPSBbXTtcblx0dmFyIHRlbXBfdmFsLyo6Q2VsbCovO1xuXHR2YXIgY291bnRyeTtcblx0dmFyIFhGcyA9IFtdOyAvKiBYRiByZWNvcmRzICovXG5cdHZhciBwYWxldHRlLyo6QXJyYXk8W251bWJlciwgbnVtYmVyLCBudW1iZXJdPiovID0gW107XG5cdHZhciBXb3JrYm9vay8qOldCV0JQcm9wcyovID0gKHsgU2hlZXRzOltdLCBXQlByb3BzOntkYXRlMTkwNDpmYWxzZX0sIFZpZXdzOlt7fV0gfS8qOmFueSovKSwgd3Nwcm9wcyA9IHt9O1xuXHR2YXIgZ2V0X3JnYiA9IGZ1bmN0aW9uIGdldHJnYihpY3YvKjpudW1iZXIqLykvKjpbbnVtYmVyLCBudW1iZXIsIG51bWJlcl0qLyB7XG5cdFx0aWYoaWN2IDwgOCkgcmV0dXJuIFhMU0ljdltpY3ZdO1xuXHRcdGlmKGljdiA8IDY0KSByZXR1cm4gcGFsZXR0ZVtpY3YtOF0gfHwgWExTSWN2W2ljdl07XG5cdFx0cmV0dXJuIFhMU0ljdltpY3ZdO1xuXHR9O1xuXHR2YXIgcHJvY2Vzc19jZWxsX3N0eWxlID0gZnVuY3Rpb24gcGNzKGNlbGwsIGxpbmUvKjphbnkqLywgb3B0aW9ucykge1xuXHRcdHZhciB4ZmQgPSBsaW5lLlhGLmRhdGE7XG5cdFx0aWYoIXhmZCB8fCAheGZkLnBhdHRlcm5UeXBlIHx8ICFvcHRpb25zIHx8ICFvcHRpb25zLmNlbGxTdHlsZXMpIHJldHVybjtcblx0XHRsaW5lLnMgPSAoe30vKjphbnkqLyk7XG5cdFx0bGluZS5zLnBhdHRlcm5UeXBlID0geGZkLnBhdHRlcm5UeXBlO1xuXHRcdHZhciB0O1xuXHRcdGlmKCh0ID0gcmdiMkhleChnZXRfcmdiKHhmZC5pY3ZGb3JlKSkpKSB7IGxpbmUucy5mZ0NvbG9yID0ge3JnYjp0fTsgfVxuXHRcdGlmKCh0ID0gcmdiMkhleChnZXRfcmdiKHhmZC5pY3ZCYWNrKSkpKSB7IGxpbmUucy5iZ0NvbG9yID0ge3JnYjp0fTsgfVxuXHR9O1xuXHR2YXIgYWRkY2VsbCA9IGZ1bmN0aW9uIGFkZGNlbGwoY2VsbC8qOmFueSovLCBsaW5lLyo6YW55Ki8sIG9wdGlvbnMvKjphbnkqLykge1xuXHRcdGlmKGZpbGVfZGVwdGggPiAxKSByZXR1cm47XG5cdFx0aWYob3B0aW9ucy5zaGVldFJvd3MgJiYgY2VsbC5yID49IG9wdGlvbnMuc2hlZXRSb3dzKSByZXR1cm47XG5cdFx0aWYob3B0aW9ucy5jZWxsU3R5bGVzICYmIGxpbmUuWEYgJiYgbGluZS5YRi5kYXRhKSBwcm9jZXNzX2NlbGxfc3R5bGUoY2VsbCwgbGluZSwgb3B0aW9ucyk7XG5cdFx0ZGVsZXRlIGxpbmUuaXhmZTsgZGVsZXRlIGxpbmUuWEY7XG5cdFx0bGFzdGNlbGwgPSBjZWxsO1xuXHRcdGxhc3RfY2VsbCA9IGVuY29kZV9jZWxsKGNlbGwpO1xuXHRcdGlmKCFyYW5nZSB8fCAhcmFuZ2UucyB8fCAhcmFuZ2UuZSkgcmFuZ2UgPSB7czp7cjowLGM6MH0sZTp7cjowLGM6MH19O1xuXHRcdGlmKGNlbGwuciA8IHJhbmdlLnMucikgcmFuZ2Uucy5yID0gY2VsbC5yO1xuXHRcdGlmKGNlbGwuYyA8IHJhbmdlLnMuYykgcmFuZ2Uucy5jID0gY2VsbC5jO1xuXHRcdGlmKGNlbGwuciArIDEgPiByYW5nZS5lLnIpIHJhbmdlLmUuciA9IGNlbGwuciArIDE7XG5cdFx0aWYoY2VsbC5jICsgMSA+IHJhbmdlLmUuYykgcmFuZ2UuZS5jID0gY2VsbC5jICsgMTtcblx0XHRpZihvcHRpb25zLmNlbGxGb3JtdWxhICYmIGxpbmUuZikge1xuXHRcdFx0Zm9yKHZhciBhZmkgPSAwOyBhZmkgPCBhcnJheWYubGVuZ3RoOyArK2FmaSkge1xuXHRcdFx0XHRpZihhcnJheWZbYWZpXVswXS5zLmMgPiBjZWxsLmMgfHwgYXJyYXlmW2FmaV1bMF0ucy5yID4gY2VsbC5yKSBjb250aW51ZTtcblx0XHRcdFx0aWYoYXJyYXlmW2FmaV1bMF0uZS5jIDwgY2VsbC5jIHx8IGFycmF5ZlthZmldWzBdLmUuciA8IGNlbGwucikgY29udGludWU7XG5cdFx0XHRcdGxpbmUuRiA9IGVuY29kZV9yYW5nZShhcnJheWZbYWZpXVswXSk7XG5cdFx0XHRcdGlmKGFycmF5ZlthZmldWzBdLnMuYyAhPSBjZWxsLmMgfHwgYXJyYXlmW2FmaV1bMF0ucy5yICE9IGNlbGwucikgZGVsZXRlIGxpbmUuZjtcblx0XHRcdFx0aWYobGluZS5mKSBsaW5lLmYgPSBcIlwiICsgc3RyaW5naWZ5X2Zvcm11bGEoYXJyYXlmW2FmaV1bMV0sIHJhbmdlLCBjZWxsLCBzdXBib29rcywgb3B0cyk7XG5cdFx0XHRcdGJyZWFrO1xuXHRcdFx0fVxuXHRcdH1cblx0XHR7XG5cdFx0XHRpZihvcHRpb25zLmRlbnNlKSB7XG5cdFx0XHRcdGlmKCFvdXRbY2VsbC5yXSkgb3V0W2NlbGwucl0gPSBbXTtcblx0XHRcdFx0b3V0W2NlbGwucl1bY2VsbC5jXSA9IGxpbmU7XG5cdFx0XHR9IGVsc2Ugb3V0W2xhc3RfY2VsbF0gPSBsaW5lO1xuXHRcdH1cblx0fTtcblx0dmFyIG9wdHMgPSAoe1xuXHRcdGVuYzogZmFsc2UsIC8vIGVuY3J5cHRlZFxuXHRcdHNiY2NoOiAwLCAvLyBjY2ggaW4gdGhlIHByZWNlZGluZyBTdXBCb29rXG5cdFx0c25hbWVzOiBbXSwgLy8gc2hlZXRuYW1lc1xuXHRcdHNoYXJlZGY6IHNoYXJlZGYsIC8vIHNoYXJlZCBmb3JtdWxhZSBieSBhZGRyZXNzXG5cdFx0YXJyYXlmOiBhcnJheWYsIC8vIGFycmF5IGZvcm11bGFlIGFycmF5XG5cdFx0cnJ0YWJpZDogW10sIC8vIFJSVGFiSWRcblx0XHRsYXN0dXNlcjogXCJcIiwgLy8gTGFzdCBVc2VyIGZyb20gV3JpdGVBY2Nlc3Ncblx0XHRiaWZmOiA4LCAvLyBCSUZGIHZlcnNpb25cblx0XHRjb2RlcGFnZTogMCwgLy8gQ1AgZnJvbSBDb2RlUGFnZSByZWNvcmRcblx0XHR3aW5sb2NrZWQ6IDAsIC8vIGZMb2NrV24gZnJvbSBXaW5Qcm90ZWN0XG5cdFx0Y2VsbFN0eWxlczogISFvcHRpb25zICYmICEhb3B0aW9ucy5jZWxsU3R5bGVzLFxuXHRcdFdURjogISFvcHRpb25zICYmICEhb3B0aW9ucy53dGZcblx0fS8qOmFueSovKTtcblx0aWYob3B0aW9ucy5wYXNzd29yZCkgb3B0cy5wYXNzd29yZCA9IG9wdGlvbnMucGFzc3dvcmQ7XG5cdHZhciB0aGVtZXM7XG5cdHZhciBtZXJnZXMvKjpBcnJheTxSYW5nZT4qLyA9IFtdO1xuXHR2YXIgb2JqZWN0cyA9IFtdO1xuXHR2YXIgY29saW5mby8qOkFycmF5PENvbEluZm8+Ki8gPSBbXSwgcm93aW5mby8qOkFycmF5PFJvd0luZm8+Ki8gPSBbXTtcblx0dmFyIHNlZW5jb2wgPSBmYWxzZTtcblx0dmFyIHN1cGJvb2tzID0gKFtdLyo6YW55Ki8pOyAvLyAxLWluZGV4ZWQsIHdpbGwgaG9sZCBleHRlcm4gbmFtZXNcblx0c3VwYm9va3MuU2hlZXROYW1lcyA9IG9wdHMuc25hbWVzO1xuXHRzdXBib29rcy5zaGFyZWRmID0gb3B0cy5zaGFyZWRmO1xuXHRzdXBib29rcy5hcnJheWYgPSBvcHRzLmFycmF5Zjtcblx0c3VwYm9va3MubmFtZXMgPSBbXTtcblx0c3VwYm9va3MuWFRJID0gW107XG5cdHZhciBsYXN0X1JUID0gMDtcblx0dmFyIGZpbGVfZGVwdGggPSAwOyAvKiBUT0RPOiBtYWtlIGEgcmVhbCBzdGFjayAqL1xuXHR2YXIgQklGRjJGbXQgPSAwLCBCSUZGMkZtdFRhYmxlLyo6QXJyYXk8c3RyaW5nPiovID0gW107XG5cdHZhciBGaWx0ZXJEYXRhYmFzZXMgPSBbXTsgLyogVE9ETzogc29ydCBvdXQgc3VwYm9va3MgYW5kIHByb2Nlc3MgZWxzZXdoZXJlICovXG5cdHZhciBsYXN0X2xibC8qOj9EZWZpbmVkTmFtZSovO1xuXG5cdC8qIGV4cGxpY2l0IG92ZXJyaWRlIGZvciBzb21lIGJyb2tlbiB3cml0ZXJzICovXG5cdG9wdHMuY29kZXBhZ2UgPSAxMjAwO1xuXHRzZXRfY3AoMTIwMCk7XG5cdHZhciBzZWVuX2NvZGVwYWdlID0gZmFsc2U7XG5cdHdoaWxlKGJsb2IubCA8IGJsb2IubGVuZ3RoIC0gMSkge1xuXHRcdHZhciBzID0gYmxvYi5sO1xuXHRcdHZhciBSZWNvcmRUeXBlID0gYmxvYi5yZWFkX3NoaWZ0KDIpO1xuXHRcdGlmKFJlY29yZFR5cGUgPT09IDAgJiYgbGFzdF9SVCA9PT0gMHgwMDBhIC8qIEVPRiAqLykgYnJlYWs7XG5cdFx0dmFyIGxlbmd0aCA9IChibG9iLmwgPT09IGJsb2IubGVuZ3RoID8gMCA6IGJsb2IucmVhZF9zaGlmdCgyKSk7XG5cdFx0dmFyIFIgPSBYTFNSZWNvcmRFbnVtW1JlY29yZFR5cGVdO1xuXHRcdC8vY29uc29sZS5sb2coUmVjb3JkVHlwZS50b1N0cmluZygxNiksIFJlY29yZFR5cGUsIFIsIGJsb2IubCwgbGVuZ3RoLCBibG9iLmxlbmd0aCk7XG5cdFx0Ly9pZighUikgY29uc29sZS5sb2coYmxvYi5zbGljZShibG9iLmwsIGJsb2IubCArIGxlbmd0aCkpO1xuXHRcdGlmKFIgJiYgUi5mKSB7XG5cdFx0XHRpZihvcHRpb25zLmJvb2tTaGVldHMpIHtcblx0XHRcdFx0aWYobGFzdF9SVCA9PT0gMHgwMDg1IC8qIEJvdW5kU2hlZXQ4ICovICYmIFJlY29yZFR5cGUgIT09IDB4MDA4NSAvKiBSLm4gIT09ICdCb3VuZFNoZWV0OCcgKi8pIGJyZWFrO1xuXHRcdFx0fVxuXHRcdFx0bGFzdF9SVCA9IFJlY29yZFR5cGU7XG5cdFx0XHRpZihSLnIgPT09IDIgfHwgUi5yID09IDEyKSB7XG5cdFx0XHRcdHZhciBydCA9IGJsb2IucmVhZF9zaGlmdCgyKTsgbGVuZ3RoIC09IDI7XG5cdFx0XHRcdGlmKCFvcHRzLmVuYyAmJiBydCAhPT0gUmVjb3JkVHlwZSAmJiAoKChydCYweEZGKTw8OCl8KHJ0Pj44KSkgIT09IFJlY29yZFR5cGUpIHRocm93IG5ldyBFcnJvcihcInJ0IG1pc21hdGNoOiBcIiArIHJ0ICsgXCIhPVwiICsgUmVjb3JkVHlwZSk7XG5cdFx0XHRcdGlmKFIuciA9PSAxMil7XG5cdFx0XHRcdFx0YmxvYi5sICs9IDEwOyBsZW5ndGggLT0gMTA7XG5cdFx0XHRcdH0gLy8gc2tpcCBGUlRcblx0XHRcdH1cblx0XHRcdC8vY29uc29sZS5lcnJvcihSLGJsb2IubCxsZW5ndGgsYmxvYi5sZW5ndGgpO1xuXHRcdFx0dmFyIHZhbC8qOmFueSovID0gKHt9Lyo6YW55Ki8pO1xuXHRcdFx0aWYoUmVjb3JkVHlwZSA9PT0gMHgwMDBhIC8qIEVPRiAqLykgdmFsID0gLyo6OigqL1IuZihibG9iLCBsZW5ndGgsIG9wdHMpLyo6OiA6YW55KSovO1xuXHRcdFx0ZWxzZSB2YWwgPSAvKjo6KCovc2x1cnAoUmVjb3JkVHlwZSwgUiwgYmxvYiwgbGVuZ3RoLCBvcHRzKS8qOjogOmFueSkqLztcblx0XHRcdC8qOjogdmFsID0gKHZhbDphbnkpOyAqL1xuXHRcdFx0aWYoZmlsZV9kZXB0aCA9PSAwICYmIFsweDAwMDksIDB4MDIwOSwgMHgwNDA5LCAweDA4MDldLmluZGV4T2YobGFzdF9SVCkgPT09IC0xIC8qICdCT0YnICovKSBjb250aW51ZTtcblx0XHRcdHN3aXRjaChSZWNvcmRUeXBlKSB7XG5cdFx0XHRcdGNhc2UgMHgwMDIyIC8qIERhdGUxOTA0ICovOlxuXHRcdFx0XHRcdC8qOjogaWYoIVdvcmtib29rLldCUHJvcHMpIFdvcmtib29rLldCUHJvcHMgPSB7fTsgKi9cblx0XHRcdFx0XHR3Yi5vcHRzLkRhdGUxOTA0ID0gV29ya2Jvb2suV0JQcm9wcy5kYXRlMTkwNCA9IHZhbDsgYnJlYWs7XG5cdFx0XHRcdGNhc2UgMHgwMDg2IC8qIFdyaXRlUHJvdGVjdCAqLzogd2Iub3B0cy5Xcml0ZVByb3RlY3QgPSB0cnVlOyBicmVhaztcblx0XHRcdFx0Y2FzZSAweDAwMmYgLyogRmlsZVBhc3MgKi86XG5cdFx0XHRcdFx0aWYoIW9wdHMuZW5jKSBibG9iLmwgPSAwO1xuXHRcdFx0XHRcdG9wdHMuZW5jID0gdmFsO1xuXHRcdFx0XHRcdGlmKCFvcHRpb25zLnBhc3N3b3JkKSB0aHJvdyBuZXcgRXJyb3IoXCJGaWxlIGlzIHBhc3N3b3JkLXByb3RlY3RlZFwiKTtcblx0XHRcdFx0XHRpZih2YWwudmFsaWQgPT0gbnVsbCkgdGhyb3cgbmV3IEVycm9yKFwiRW5jcnlwdGlvbiBzY2hlbWUgdW5zdXBwb3J0ZWRcIik7XG5cdFx0XHRcdFx0aWYoIXZhbC52YWxpZCkgdGhyb3cgbmV3IEVycm9yKFwiUGFzc3dvcmQgaXMgaW5jb3JyZWN0XCIpO1xuXHRcdFx0XHRcdGJyZWFrO1xuXHRcdFx0XHRjYXNlIDB4MDA1YyAvKiBXcml0ZUFjY2VzcyAqLzogb3B0cy5sYXN0dXNlciA9IHZhbDsgYnJlYWs7XG5cdFx0XHRcdGNhc2UgMHgwMDQyIC8qIENvZGVQYWdlICovOlxuXHRcdFx0XHRcdHZhciBjcHZhbCA9IE51bWJlcih2YWwpO1xuXHRcdFx0XHRcdC8qIG92ZXJyaWRlcyBiYXNlZCBvbiB0ZXN0IGNhc2VzICovXG5cdFx0XHRcdFx0c3dpdGNoKGNwdmFsKSB7XG5cdFx0XHRcdFx0XHRjYXNlIDB4NTIxMjogY3B2YWwgPSAgMTIwMDsgYnJlYWs7XG5cdFx0XHRcdFx0XHRjYXNlIDB4ODAwMDogY3B2YWwgPSAxMDAwMDsgYnJlYWs7XG5cdFx0XHRcdFx0XHRjYXNlIDB4ODAwMTogY3B2YWwgPSAgMTI1MjsgYnJlYWs7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHRcdHNldF9jcChvcHRzLmNvZGVwYWdlID0gY3B2YWwpO1xuXHRcdFx0XHRcdHNlZW5fY29kZXBhZ2UgPSB0cnVlO1xuXHRcdFx0XHRcdGJyZWFrO1xuXHRcdFx0XHRjYXNlIDB4MDEzZCAvKiBSUlRhYklkICovOiBvcHRzLnJydGFiaWQgPSB2YWw7IGJyZWFrO1xuXHRcdFx0XHRjYXNlIDB4MDAxOSAvKiBXaW5Qcm90ZWN0ICovOiBvcHRzLndpbmxvY2tlZCA9IHZhbDsgYnJlYWs7XG5cdFx0XHRcdGNhc2UgMHgwMWI3IC8qIFJlZnJlc2hBbGwgKi86IHdiLm9wdHNbXCJSZWZyZXNoQWxsXCJdID0gdmFsOyBicmVhaztcblx0XHRcdFx0Y2FzZSAweDAwMGMgLyogQ2FsY0NvdW50ICovOiB3Yi5vcHRzW1wiQ2FsY0NvdW50XCJdID0gdmFsOyBicmVhaztcblx0XHRcdFx0Y2FzZSAweDAwMTAgLyogQ2FsY0RlbHRhICovOiB3Yi5vcHRzW1wiQ2FsY0RlbHRhXCJdID0gdmFsOyBicmVhaztcblx0XHRcdFx0Y2FzZSAweDAwMTEgLyogQ2FsY0l0ZXIgKi86IHdiLm9wdHNbXCJDYWxjSXRlclwiXSA9IHZhbDsgYnJlYWs7XG5cdFx0XHRcdGNhc2UgMHgwMDBkIC8qIENhbGNNb2RlICovOiB3Yi5vcHRzW1wiQ2FsY01vZGVcIl0gPSB2YWw7IGJyZWFrO1xuXHRcdFx0XHRjYXNlIDB4MDAwZSAvKiBDYWxjUHJlY2lzaW9uICovOiB3Yi5vcHRzW1wiQ2FsY1ByZWNpc2lvblwiXSA9IHZhbDsgYnJlYWs7XG5cdFx0XHRcdGNhc2UgMHgwMDVmIC8qIENhbGNTYXZlUmVjYWxjICovOiB3Yi5vcHRzW1wiQ2FsY1NhdmVSZWNhbGNcIl0gPSB2YWw7IGJyZWFrO1xuXHRcdFx0XHRjYXNlIDB4MDAwZiAvKiBDYWxjUmVmTW9kZSAqLzogb3B0cy5DYWxjUmVmTW9kZSA9IHZhbDsgYnJlYWs7IC8vIFRPRE86IGltcGxlbWVudCBSMUMxXG5cdFx0XHRcdGNhc2UgMHgwOGEzIC8qIEZvcmNlRnVsbENhbGN1bGF0aW9uICovOiB3Yi5vcHRzLkZ1bGxDYWxjID0gdmFsOyBicmVhaztcblx0XHRcdFx0Y2FzZSAweDAwODEgLyogV3NCb29sICovOlxuXHRcdFx0XHRcdGlmKHZhbC5mRGlhbG9nKSBvdXRbXCIhdHlwZVwiXSA9IFwiZGlhbG9nXCI7XG5cdFx0XHRcdFx0aWYoIXZhbC5mQmVsb3cpIChvdXRbXCIhb3V0bGluZVwiXSB8fCAob3V0W1wiIW91dGxpbmVcIl0gPSB7fSkpLmFib3ZlID0gdHJ1ZTtcblx0XHRcdFx0XHRpZighdmFsLmZSaWdodCkgKG91dFtcIiFvdXRsaW5lXCJdIHx8IChvdXRbXCIhb3V0bGluZVwiXSA9IHt9KSkubGVmdCA9IHRydWU7XG5cdFx0XHRcdFx0YnJlYWs7IC8vIFRPRE9cblx0XHRcdFx0Y2FzZSAweDAwZTAgLyogWEYgKi86XG5cdFx0XHRcdFx0WEZzLnB1c2godmFsKTsgYnJlYWs7XG5cdFx0XHRcdGNhc2UgMHgwMWFlIC8qIFN1cEJvb2sgKi86XG5cdFx0XHRcdFx0c3VwYm9va3MucHVzaChbdmFsXSk7XG5cdFx0XHRcdFx0c3VwYm9va3Nbc3VwYm9va3MubGVuZ3RoLTFdLlhUSSA9IFtdO1xuXHRcdFx0XHRcdGJyZWFrO1xuXHRcdFx0XHRjYXNlIDB4MDAyMzogY2FzZSAweDAyMjMgLyogRXh0ZXJuTmFtZSAqLzpcblx0XHRcdFx0XHRzdXBib29rc1tzdXBib29rcy5sZW5ndGgtMV0ucHVzaCh2YWwpO1xuXHRcdFx0XHRcdGJyZWFrO1xuXHRcdFx0XHRjYXNlIDB4MDAxODogY2FzZSAweDAyMTggLyogTGJsICovOlxuXHRcdFx0XHRcdGxhc3RfbGJsID0gKHtcblx0XHRcdFx0XHRcdE5hbWU6IHZhbC5OYW1lLFxuXHRcdFx0XHRcdFx0UmVmOiBzdHJpbmdpZnlfZm9ybXVsYSh2YWwucmdjZSxyYW5nZSxudWxsLHN1cGJvb2tzLG9wdHMpXG5cdFx0XHRcdFx0fS8qOkRlZmluZWROYW1lKi8pO1xuXHRcdFx0XHRcdGlmKHZhbC5pdGFiID4gMCkgbGFzdF9sYmwuU2hlZXQgPSB2YWwuaXRhYiAtIDE7XG5cdFx0XHRcdFx0c3VwYm9va3MubmFtZXMucHVzaChsYXN0X2xibCk7XG5cdFx0XHRcdFx0aWYoIXN1cGJvb2tzWzBdKSB7IHN1cGJvb2tzWzBdID0gW107IHN1cGJvb2tzWzBdLlhUSSA9IFtdOyB9XG5cdFx0XHRcdFx0c3VwYm9va3Nbc3VwYm9va3MubGVuZ3RoLTFdLnB1c2godmFsKTtcblx0XHRcdFx0XHRpZih2YWwuTmFtZSA9PSBcIl94bG5tLl9GaWx0ZXJEYXRhYmFzZVwiICYmIHZhbC5pdGFiID4gMClcblx0XHRcdFx0XHRcdGlmKHZhbC5yZ2NlICYmIHZhbC5yZ2NlWzBdICYmIHZhbC5yZ2NlWzBdWzBdICYmIHZhbC5yZ2NlWzBdWzBdWzBdID09ICdQdGdBcmVhM2QnKVxuXHRcdFx0XHRcdFx0XHRGaWx0ZXJEYXRhYmFzZXNbdmFsLml0YWIgLSAxXSA9IHsgcmVmOiBlbmNvZGVfcmFuZ2UodmFsLnJnY2VbMF1bMF1bMV1bMl0pIH07XG5cdFx0XHRcdFx0YnJlYWs7XG5cdFx0XHRcdGNhc2UgMHgwMDE2IC8qIEV4dGVybkNvdW50ICovOiBvcHRzLkV4dGVybkNvdW50ID0gdmFsOyBicmVhaztcblx0XHRcdFx0Y2FzZSAweDAwMTcgLyogRXh0ZXJuU2hlZXQgKi86XG5cdFx0XHRcdFx0aWYoc3VwYm9va3MubGVuZ3RoID09IDApIHsgc3VwYm9va3NbMF0gPSBbXTsgc3VwYm9va3NbMF0uWFRJID0gW107IH1cblx0XHRcdFx0XHRzdXBib29rc1tzdXBib29rcy5sZW5ndGggLSAxXS5YVEkgPSBzdXBib29rc1tzdXBib29rcy5sZW5ndGggLSAxXS5YVEkuY29uY2F0KHZhbCk7IHN1cGJvb2tzLlhUSSA9IHN1cGJvb2tzLlhUSS5jb25jYXQodmFsKTsgYnJlYWs7XG5cdFx0XHRcdGNhc2UgMHgwODk0IC8qIE5hbWVDbXQgKi86XG5cdFx0XHRcdFx0LyogVE9ETzogc2VhcmNoIGZvciBjb3JyZWN0IG5hbWUgKi9cblx0XHRcdFx0XHRpZihvcHRzLmJpZmYgPCA4KSBicmVhaztcblx0XHRcdFx0XHRpZihsYXN0X2xibCAhPSBudWxsKSBsYXN0X2xibC5Db21tZW50ID0gdmFsWzFdO1xuXHRcdFx0XHRcdGJyZWFrO1xuXHRcdFx0XHRjYXNlIDB4MDAxMiAvKiBQcm90ZWN0ICovOiBvdXRbXCIhcHJvdGVjdFwiXSA9IHZhbDsgYnJlYWs7IC8qIGZvciBzaGVldCBvciBib29rICovXG5cdFx0XHRcdGNhc2UgMHgwMDEzIC8qIFBhc3N3b3JkICovOiBpZih2YWwgIT09IDAgJiYgb3B0cy5XVEYpIGNvbnNvbGUuZXJyb3IoXCJQYXNzd29yZCB2ZXJpZmllcjogXCIgKyB2YWwpOyBicmVhaztcblx0XHRcdFx0Y2FzZSAweDAwODUgLyogQm91bmRTaGVldDggKi86IHtcblx0XHRcdFx0XHREaXJlY3RvcnlbdmFsLnBvc10gPSB2YWw7XG5cdFx0XHRcdFx0b3B0cy5zbmFtZXMucHVzaCh2YWwubmFtZSk7XG5cdFx0XHRcdH0gYnJlYWs7XG5cdFx0XHRcdGNhc2UgMHgwMDBhIC8qIEVPRiAqLzoge1xuXHRcdFx0XHRcdGlmKC0tZmlsZV9kZXB0aCkgYnJlYWs7XG5cdFx0XHRcdFx0aWYocmFuZ2UuZSkge1xuXHRcdFx0XHRcdFx0aWYocmFuZ2UuZS5yID4gMCAmJiByYW5nZS5lLmMgPiAwKSB7XG5cdFx0XHRcdFx0XHRcdHJhbmdlLmUuci0tOyByYW5nZS5lLmMtLTtcblx0XHRcdFx0XHRcdFx0b3V0W1wiIXJlZlwiXSA9IGVuY29kZV9yYW5nZShyYW5nZSk7XG5cdFx0XHRcdFx0XHRcdGlmKG9wdGlvbnMuc2hlZXRSb3dzICYmIG9wdGlvbnMuc2hlZXRSb3dzIDw9IHJhbmdlLmUucikge1xuXHRcdFx0XHRcdFx0XHRcdHZhciB0bXByaSA9IHJhbmdlLmUucjtcblx0XHRcdFx0XHRcdFx0XHRyYW5nZS5lLnIgPSBvcHRpb25zLnNoZWV0Um93cyAtIDE7XG5cdFx0XHRcdFx0XHRcdFx0b3V0W1wiIWZ1bGxyZWZcIl0gPSBvdXRbXCIhcmVmXCJdO1xuXHRcdFx0XHRcdFx0XHRcdG91dFtcIiFyZWZcIl0gPSBlbmNvZGVfcmFuZ2UocmFuZ2UpO1xuXHRcdFx0XHRcdFx0XHRcdHJhbmdlLmUuciA9IHRtcHJpO1xuXHRcdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0XHRcdHJhbmdlLmUucisrOyByYW5nZS5lLmMrKztcblx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHRcdGlmKG1lcmdlcy5sZW5ndGggPiAwKSBvdXRbXCIhbWVyZ2VzXCJdID0gbWVyZ2VzO1xuXHRcdFx0XHRcdFx0aWYob2JqZWN0cy5sZW5ndGggPiAwKSBvdXRbXCIhb2JqZWN0c1wiXSA9IG9iamVjdHM7XG5cdFx0XHRcdFx0XHRpZihjb2xpbmZvLmxlbmd0aCA+IDApIG91dFtcIiFjb2xzXCJdID0gY29saW5mbztcblx0XHRcdFx0XHRcdGlmKHJvd2luZm8ubGVuZ3RoID4gMCkgb3V0W1wiIXJvd3NcIl0gPSByb3dpbmZvO1xuXHRcdFx0XHRcdFx0V29ya2Jvb2suU2hlZXRzLnB1c2god3Nwcm9wcyk7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHRcdGlmKGN1cl9zaGVldCA9PT0gXCJcIikgUHJlYW1ibGUgPSBvdXQ7IGVsc2UgU2hlZXRzW2N1cl9zaGVldF0gPSBvdXQ7XG5cdFx0XHRcdFx0b3V0ID0gKChvcHRpb25zLmRlbnNlID8gW10gOiB7fSkvKjphbnkqLyk7XG5cdFx0XHRcdH0gYnJlYWs7XG5cdFx0XHRcdGNhc2UgMHgwMDA5OiBjYXNlIDB4MDIwOTogY2FzZSAweDA0MDk6IGNhc2UgMHgwODA5IC8qIEJPRiAqLzoge1xuXHRcdFx0XHRcdGlmKG9wdHMuYmlmZiA9PT0gOCkgb3B0cy5iaWZmID0ge1xuXHRcdFx0XHRcdFx0Lyo6OlsqLzB4MDAwOS8qOjpdKi86Mixcblx0XHRcdFx0XHRcdC8qOjpbKi8weDAyMDkvKjo6XSovOjMsXG5cdFx0XHRcdFx0XHQvKjo6WyovMHgwNDA5Lyo6Ol0qLzo0XG5cdFx0XHRcdFx0fVtSZWNvcmRUeXBlXSB8fCB7XG5cdFx0XHRcdFx0XHQvKjo6WyovMHgwMjAwLyo6Ol0qLzoyLFxuXHRcdFx0XHRcdFx0Lyo6OlsqLzB4MDMwMC8qOjpdKi86Myxcblx0XHRcdFx0XHRcdC8qOjpbKi8weDA0MDAvKjo6XSovOjQsXG5cdFx0XHRcdFx0XHQvKjo6WyovMHgwNTAwLyo6Ol0qLzo1LFxuXHRcdFx0XHRcdFx0Lyo6OlsqLzB4MDYwMC8qOjpdKi86OCxcblx0XHRcdFx0XHRcdC8qOjpbKi8weDAwMDIvKjo6XSovOjIsXG5cdFx0XHRcdFx0XHQvKjo6WyovMHgwMDA3Lyo6Ol0qLzoyXG5cdFx0XHRcdFx0fVt2YWwuQklGRlZlcl0gfHwgODtcblx0XHRcdFx0XHRvcHRzLmJpZmZndWVzcyA9IHZhbC5CSUZGVmVyID09IDA7XG5cdFx0XHRcdFx0aWYodmFsLkJJRkZWZXIgPT0gMCAmJiB2YWwuZHQgPT0gMHgxMDAwKSB7IG9wdHMuYmlmZiA9IDU7IHNlZW5fY29kZXBhZ2UgPSB0cnVlOyBzZXRfY3Aob3B0cy5jb2RlcGFnZSA9IDI4NTkxKTsgfVxuXHRcdFx0XHRcdGlmKG9wdHMuYmlmZiA9PSA4ICYmIHZhbC5CSUZGVmVyID09IDAgJiYgdmFsLmR0ID09IDE2KSBvcHRzLmJpZmYgPSAyO1xuXHRcdFx0XHRcdGlmKGZpbGVfZGVwdGgrKykgYnJlYWs7XG5cdFx0XHRcdFx0b3V0ID0gKChvcHRpb25zLmRlbnNlID8gW10gOiB7fSkvKjphbnkqLyk7XG5cblx0XHRcdFx0XHRpZihvcHRzLmJpZmYgPCA4ICYmICFzZWVuX2NvZGVwYWdlKSB7IHNlZW5fY29kZXBhZ2UgPSB0cnVlOyBzZXRfY3Aob3B0cy5jb2RlcGFnZSA9IG9wdGlvbnMuY29kZXBhZ2UgfHwgMTI1Mik7IH1cblxuXHRcdFx0XHRcdGlmKG9wdHMuYmlmZiA8IDUgfHwgdmFsLkJJRkZWZXIgPT0gMCAmJiB2YWwuZHQgPT0gMHgxMDAwKSB7XG5cdFx0XHRcdFx0XHRpZihjdXJfc2hlZXQgPT09IFwiXCIpIGN1cl9zaGVldCA9IFwiU2hlZXQxXCI7XG5cdFx0XHRcdFx0XHRyYW5nZSA9IHtzOntyOjAsYzowfSxlOntyOjAsYzowfX07XG5cdFx0XHRcdFx0XHQvKiBmYWtlIEJvdW5kU2hlZXQ4ICovXG5cdFx0XHRcdFx0XHR2YXIgZmFrZWJzOCA9IHtwb3M6IGJsb2IubCAtIGxlbmd0aCwgbmFtZTpjdXJfc2hlZXR9O1xuXHRcdFx0XHRcdFx0RGlyZWN0b3J5W2Zha2ViczgucG9zXSA9IGZha2Viczg7XG5cdFx0XHRcdFx0XHRvcHRzLnNuYW1lcy5wdXNoKGN1cl9zaGVldCk7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHRcdGVsc2UgY3VyX3NoZWV0ID0gKERpcmVjdG9yeVtzXSB8fCB7bmFtZTpcIlwifSkubmFtZTtcblx0XHRcdFx0XHRpZih2YWwuZHQgPT0gMHgyMCkgb3V0W1wiIXR5cGVcIl0gPSBcImNoYXJ0XCI7XG5cdFx0XHRcdFx0aWYodmFsLmR0ID09IDB4NDApIG91dFtcIiF0eXBlXCJdID0gXCJtYWNyb1wiO1xuXHRcdFx0XHRcdG1lcmdlcyA9IFtdO1xuXHRcdFx0XHRcdG9iamVjdHMgPSBbXTtcblx0XHRcdFx0XHRvcHRzLmFycmF5ZiA9IGFycmF5ZiA9IFtdO1xuXHRcdFx0XHRcdGNvbGluZm8gPSBbXTsgcm93aW5mbyA9IFtdO1xuXHRcdFx0XHRcdHNlZW5jb2wgPSBmYWxzZTtcblx0XHRcdFx0XHR3c3Byb3BzID0ge0hpZGRlbjooRGlyZWN0b3J5W3NdfHx7aHM6MH0pLmhzLCBuYW1lOmN1cl9zaGVldCB9O1xuXHRcdFx0XHR9IGJyZWFrO1xuXHRcdFx0XHRjYXNlIDB4MDIwMyAvKiBOdW1iZXIgKi86IGNhc2UgMHgwMDAzIC8qIEJJRkYyTlVNICovOiBjYXNlIDB4MDAwMiAvKiBCSUZGMklOVCAqLzoge1xuXHRcdFx0XHRcdGlmKG91dFtcIiF0eXBlXCJdID09IFwiY2hhcnRcIikgaWYob3B0aW9ucy5kZW5zZSA/IChvdXRbdmFsLnJdfHxbXSlbdmFsLmNdOiBvdXRbZW5jb2RlX2NlbGwoe2M6dmFsLmMsIHI6dmFsLnJ9KV0pICsrdmFsLmM7XG5cdFx0XHRcdFx0dGVtcF92YWwgPSAoe2l4ZmU6IHZhbC5peGZlLCBYRjogWEZzW3ZhbC5peGZlXXx8e30sIHY6dmFsLnZhbCwgdDonbid9Lyo6YW55Ki8pO1xuXHRcdFx0XHRcdGlmKEJJRkYyRm10ID4gMCkgdGVtcF92YWwueiA9IEJJRkYyRm10VGFibGVbKHRlbXBfdmFsLml4ZmU+PjgpICYgMHgzRl07XG5cdFx0XHRcdFx0c2FmZV9mb3JtYXRfeGYodGVtcF92YWwsIG9wdGlvbnMsIHdiLm9wdHMuRGF0ZTE5MDQpO1xuXHRcdFx0XHRcdGFkZGNlbGwoe2M6dmFsLmMsIHI6dmFsLnJ9LCB0ZW1wX3ZhbCwgb3B0aW9ucyk7XG5cdFx0XHRcdH0gYnJlYWs7XG5cdFx0XHRcdGNhc2UgMHgwMDA1OiBjYXNlIDB4MDIwNSAvKiBCb29sRXJyICovOiB7XG5cdFx0XHRcdFx0dGVtcF92YWwgPSAoe2l4ZmU6IHZhbC5peGZlLCBYRjogWEZzW3ZhbC5peGZlXSwgdjp2YWwudmFsLCB0OnZhbC50fS8qOmFueSovKTtcblx0XHRcdFx0XHRpZihCSUZGMkZtdCA+IDApIHRlbXBfdmFsLnogPSBCSUZGMkZtdFRhYmxlWyh0ZW1wX3ZhbC5peGZlPj44KSAmIDB4M0ZdO1xuXHRcdFx0XHRcdHNhZmVfZm9ybWF0X3hmKHRlbXBfdmFsLCBvcHRpb25zLCB3Yi5vcHRzLkRhdGUxOTA0KTtcblx0XHRcdFx0XHRhZGRjZWxsKHtjOnZhbC5jLCByOnZhbC5yfSwgdGVtcF92YWwsIG9wdGlvbnMpO1xuXHRcdFx0XHR9IGJyZWFrO1xuXHRcdFx0XHRjYXNlIDB4MDI3ZSAvKiBSSyAqLzoge1xuXHRcdFx0XHRcdHRlbXBfdmFsID0gKHtpeGZlOiB2YWwuaXhmZSwgWEY6IFhGc1t2YWwuaXhmZV0sIHY6dmFsLnJrbnVtLCB0OiduJ30vKjphbnkqLyk7XG5cdFx0XHRcdFx0aWYoQklGRjJGbXQgPiAwKSB0ZW1wX3ZhbC56ID0gQklGRjJGbXRUYWJsZVsodGVtcF92YWwuaXhmZT4+OCkgJiAweDNGXTtcblx0XHRcdFx0XHRzYWZlX2Zvcm1hdF94Zih0ZW1wX3ZhbCwgb3B0aW9ucywgd2Iub3B0cy5EYXRlMTkwNCk7XG5cdFx0XHRcdFx0YWRkY2VsbCh7Yzp2YWwuYywgcjp2YWwucn0sIHRlbXBfdmFsLCBvcHRpb25zKTtcblx0XHRcdFx0fSBicmVhaztcblx0XHRcdFx0Y2FzZSAweDAwYmQgLyogTXVsUmsgKi86IHtcblx0XHRcdFx0XHRmb3IodmFyIGogPSB2YWwuYzsgaiA8PSB2YWwuQzsgKytqKSB7XG5cdFx0XHRcdFx0XHR2YXIgaXhmZSA9IHZhbC5ya3JlY1tqLXZhbC5jXVswXTtcblx0XHRcdFx0XHRcdHRlbXBfdmFsPSAoe2l4ZmU6aXhmZSwgWEY6WEZzW2l4ZmVdLCB2OnZhbC5ya3JlY1tqLXZhbC5jXVsxXSwgdDonbid9Lyo6YW55Ki8pO1xuXHRcdFx0XHRcdFx0aWYoQklGRjJGbXQgPiAwKSB0ZW1wX3ZhbC56ID0gQklGRjJGbXRUYWJsZVsodGVtcF92YWwuaXhmZT4+OCkgJiAweDNGXTtcblx0XHRcdFx0XHRcdHNhZmVfZm9ybWF0X3hmKHRlbXBfdmFsLCBvcHRpb25zLCB3Yi5vcHRzLkRhdGUxOTA0KTtcblx0XHRcdFx0XHRcdGFkZGNlbGwoe2M6aiwgcjp2YWwucn0sIHRlbXBfdmFsLCBvcHRpb25zKTtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdH0gYnJlYWs7XG5cdFx0XHRcdGNhc2UgMHgwMDA2OiBjYXNlIDB4MDIwNjogY2FzZSAweDA0MDYgLyogRm9ybXVsYSAqLzoge1xuXHRcdFx0XHRcdGlmKHZhbC52YWwgPT0gJ1N0cmluZycpIHsgbGFzdF9mb3JtdWxhID0gdmFsOyBicmVhazsgfVxuXHRcdFx0XHRcdHRlbXBfdmFsID0gbWFrZV9jZWxsKHZhbC52YWwsIHZhbC5jZWxsLml4ZmUsIHZhbC50dCk7XG5cdFx0XHRcdFx0dGVtcF92YWwuWEYgPSBYRnNbdGVtcF92YWwuaXhmZV07XG5cdFx0XHRcdFx0aWYob3B0aW9ucy5jZWxsRm9ybXVsYSkge1xuXHRcdFx0XHRcdFx0dmFyIF9mID0gdmFsLmZvcm11bGE7XG5cdFx0XHRcdFx0XHRpZihfZiAmJiBfZlswXSAmJiBfZlswXVswXSAmJiBfZlswXVswXVswXSA9PSAnUHRnRXhwJykge1xuXHRcdFx0XHRcdFx0XHR2YXIgX2ZyID0gX2ZbMF1bMF1bMV1bMF0sIF9mYyA9IF9mWzBdWzBdWzFdWzFdO1xuXHRcdFx0XHRcdFx0XHR2YXIgX2ZlID0gZW5jb2RlX2NlbGwoe3I6X2ZyLCBjOl9mY30pO1xuXHRcdFx0XHRcdFx0XHRpZihzaGFyZWRmW19mZV0pIHRlbXBfdmFsLmYgPSBcIlwiK3N0cmluZ2lmeV9mb3JtdWxhKHZhbC5mb3JtdWxhLHJhbmdlLHZhbC5jZWxsLHN1cGJvb2tzLCBvcHRzKTtcblx0XHRcdFx0XHRcdFx0ZWxzZSB0ZW1wX3ZhbC5GID0gKChvcHRpb25zLmRlbnNlID8gKG91dFtfZnJdfHxbXSlbX2ZjXTogb3V0W19mZV0pIHx8IHt9KS5GO1xuXHRcdFx0XHRcdFx0fSBlbHNlIHRlbXBfdmFsLmYgPSBcIlwiK3N0cmluZ2lmeV9mb3JtdWxhKHZhbC5mb3JtdWxhLHJhbmdlLHZhbC5jZWxsLHN1cGJvb2tzLCBvcHRzKTtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0aWYoQklGRjJGbXQgPiAwKSB0ZW1wX3ZhbC56ID0gQklGRjJGbXRUYWJsZVsodGVtcF92YWwuaXhmZT4+OCkgJiAweDNGXTtcblx0XHRcdFx0XHRzYWZlX2Zvcm1hdF94Zih0ZW1wX3ZhbCwgb3B0aW9ucywgd2Iub3B0cy5EYXRlMTkwNCk7XG5cdFx0XHRcdFx0YWRkY2VsbCh2YWwuY2VsbCwgdGVtcF92YWwsIG9wdGlvbnMpO1xuXHRcdFx0XHRcdGxhc3RfZm9ybXVsYSA9IHZhbDtcblx0XHRcdFx0fSBicmVhaztcblx0XHRcdFx0Y2FzZSAweDAwMDc6IGNhc2UgMHgwMjA3IC8qIFN0cmluZyAqLzoge1xuXHRcdFx0XHRcdGlmKGxhc3RfZm9ybXVsYSkgeyAvKiB0ZWNobmljYWxseSBhbHdheXMgdHJ1ZSAqL1xuXHRcdFx0XHRcdFx0bGFzdF9mb3JtdWxhLnZhbCA9IHZhbDtcblx0XHRcdFx0XHRcdHRlbXBfdmFsID0gbWFrZV9jZWxsKHZhbCwgbGFzdF9mb3JtdWxhLmNlbGwuaXhmZSwgJ3MnKTtcblx0XHRcdFx0XHRcdHRlbXBfdmFsLlhGID0gWEZzW3RlbXBfdmFsLml4ZmVdO1xuXHRcdFx0XHRcdFx0aWYob3B0aW9ucy5jZWxsRm9ybXVsYSkge1xuXHRcdFx0XHRcdFx0XHR0ZW1wX3ZhbC5mID0gXCJcIitzdHJpbmdpZnlfZm9ybXVsYShsYXN0X2Zvcm11bGEuZm9ybXVsYSwgcmFuZ2UsIGxhc3RfZm9ybXVsYS5jZWxsLCBzdXBib29rcywgb3B0cyk7XG5cdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0XHRpZihCSUZGMkZtdCA+IDApIHRlbXBfdmFsLnogPSBCSUZGMkZtdFRhYmxlWyh0ZW1wX3ZhbC5peGZlPj44KSAmIDB4M0ZdO1xuXHRcdFx0XHRcdFx0c2FmZV9mb3JtYXRfeGYodGVtcF92YWwsIG9wdGlvbnMsIHdiLm9wdHMuRGF0ZTE5MDQpO1xuXHRcdFx0XHRcdFx0YWRkY2VsbChsYXN0X2Zvcm11bGEuY2VsbCwgdGVtcF92YWwsIG9wdGlvbnMpO1xuXHRcdFx0XHRcdFx0bGFzdF9mb3JtdWxhID0gbnVsbDtcblx0XHRcdFx0XHR9IGVsc2UgdGhyb3cgbmV3IEVycm9yKFwiU3RyaW5nIHJlY29yZCBleHBlY3RzIEZvcm11bGFcIik7XG5cdFx0XHRcdH0gYnJlYWs7XG5cdFx0XHRcdGNhc2UgMHgwMDIxOiBjYXNlIDB4MDIyMSAvKiBBcnJheSAqLzoge1xuXHRcdFx0XHRcdGFycmF5Zi5wdXNoKHZhbCk7XG5cdFx0XHRcdFx0dmFyIF9hcnJheXN0YXJ0ID0gZW5jb2RlX2NlbGwodmFsWzBdLnMpO1xuXHRcdFx0XHRcdGNjID0gb3B0aW9ucy5kZW5zZSA/IChvdXRbdmFsWzBdLnMucl18fFtdKVt2YWxbMF0ucy5jXSA6IG91dFtfYXJyYXlzdGFydF07XG5cdFx0XHRcdFx0aWYob3B0aW9ucy5jZWxsRm9ybXVsYSAmJiBjYykge1xuXHRcdFx0XHRcdFx0aWYoIWxhc3RfZm9ybXVsYSkgYnJlYWs7IC8qIHRlY2huaWNhbGx5IHVucmVhY2hhYmxlICovXG5cdFx0XHRcdFx0XHRpZighX2FycmF5c3RhcnQgfHwgIWNjKSBicmVhaztcblx0XHRcdFx0XHRcdGNjLmYgPSBcIlwiK3N0cmluZ2lmeV9mb3JtdWxhKHZhbFsxXSwgcmFuZ2UsIHZhbFswXSwgc3VwYm9va3MsIG9wdHMpO1xuXHRcdFx0XHRcdFx0Y2MuRiA9IGVuY29kZV9yYW5nZSh2YWxbMF0pO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0fSBicmVhaztcblx0XHRcdFx0Y2FzZSAweDA0YmMgLyogU2hyRm1sYSAqLzoge1xuXHRcdFx0XHRcdGlmKCFvcHRpb25zLmNlbGxGb3JtdWxhKSBicmVhaztcblx0XHRcdFx0XHRpZihsYXN0X2NlbGwpIHtcblx0XHRcdFx0XHRcdC8qIFRPRE86IGNhcHR1cmUgcmFuZ2UgKi9cblx0XHRcdFx0XHRcdGlmKCFsYXN0X2Zvcm11bGEpIGJyZWFrOyAvKiB0ZWNobmljYWxseSB1bnJlYWNoYWJsZSAqL1xuXHRcdFx0XHRcdFx0c2hhcmVkZltlbmNvZGVfY2VsbChsYXN0X2Zvcm11bGEuY2VsbCldPSB2YWxbMF07XG5cdFx0XHRcdFx0XHRjYyA9IG9wdGlvbnMuZGVuc2UgPyAob3V0W2xhc3RfZm9ybXVsYS5jZWxsLnJdfHxbXSlbbGFzdF9mb3JtdWxhLmNlbGwuY10gOiBvdXRbZW5jb2RlX2NlbGwobGFzdF9mb3JtdWxhLmNlbGwpXTtcblx0XHRcdFx0XHRcdChjY3x8e30pLmYgPSBcIlwiK3N0cmluZ2lmeV9mb3JtdWxhKHZhbFswXSwgcmFuZ2UsIGxhc3RjZWxsLCBzdXBib29rcywgb3B0cyk7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9IGJyZWFrO1xuXHRcdFx0XHRjYXNlIDB4MDBmZCAvKiBMYWJlbFNzdCAqLzpcblx0XHRcdFx0XHR0ZW1wX3ZhbD1tYWtlX2NlbGwoc3N0W3ZhbC5pc3N0XS50LCB2YWwuaXhmZSwgJ3MnKTtcblx0XHRcdFx0XHRpZihzc3RbdmFsLmlzc3RdLmgpIHRlbXBfdmFsLmggPSBzc3RbdmFsLmlzc3RdLmg7XG5cdFx0XHRcdFx0dGVtcF92YWwuWEYgPSBYRnNbdGVtcF92YWwuaXhmZV07XG5cdFx0XHRcdFx0aWYoQklGRjJGbXQgPiAwKSB0ZW1wX3ZhbC56ID0gQklGRjJGbXRUYWJsZVsodGVtcF92YWwuaXhmZT4+OCkgJiAweDNGXTtcblx0XHRcdFx0XHRzYWZlX2Zvcm1hdF94Zih0ZW1wX3ZhbCwgb3B0aW9ucywgd2Iub3B0cy5EYXRlMTkwNCk7XG5cdFx0XHRcdFx0YWRkY2VsbCh7Yzp2YWwuYywgcjp2YWwucn0sIHRlbXBfdmFsLCBvcHRpb25zKTtcblx0XHRcdFx0XHRicmVhaztcblx0XHRcdFx0Y2FzZSAweDAyMDEgLyogQmxhbmsgKi86IGlmKG9wdGlvbnMuc2hlZXRTdHVicykge1xuXHRcdFx0XHRcdHRlbXBfdmFsID0gKHtpeGZlOiB2YWwuaXhmZSwgWEY6IFhGc1t2YWwuaXhmZV0sIHQ6J3onfS8qOmFueSovKTtcblx0XHRcdFx0XHRpZihCSUZGMkZtdCA+IDApIHRlbXBfdmFsLnogPSBCSUZGMkZtdFRhYmxlWyh0ZW1wX3ZhbC5peGZlPj44KSAmIDB4M0ZdO1xuXHRcdFx0XHRcdHNhZmVfZm9ybWF0X3hmKHRlbXBfdmFsLCBvcHRpb25zLCB3Yi5vcHRzLkRhdGUxOTA0KTtcblx0XHRcdFx0XHRhZGRjZWxsKHtjOnZhbC5jLCByOnZhbC5yfSwgdGVtcF92YWwsIG9wdGlvbnMpO1xuXHRcdFx0XHR9IGJyZWFrO1xuXHRcdFx0XHRjYXNlIDB4MDBiZSAvKiBNdWxCbGFuayAqLzogaWYob3B0aW9ucy5zaGVldFN0dWJzKSB7XG5cdFx0XHRcdFx0Zm9yKHZhciBfaiA9IHZhbC5jOyBfaiA8PSB2YWwuQzsgKytfaikge1xuXHRcdFx0XHRcdFx0dmFyIF9peGZlID0gdmFsLml4ZmVbX2otdmFsLmNdO1xuXHRcdFx0XHRcdFx0dGVtcF92YWw9ICh7aXhmZTpfaXhmZSwgWEY6WEZzW19peGZlXSwgdDoneid9Lyo6YW55Ki8pO1xuXHRcdFx0XHRcdFx0aWYoQklGRjJGbXQgPiAwKSB0ZW1wX3ZhbC56ID0gQklGRjJGbXRUYWJsZVsodGVtcF92YWwuaXhmZT4+OCkgJiAweDNGXTtcblx0XHRcdFx0XHRcdHNhZmVfZm9ybWF0X3hmKHRlbXBfdmFsLCBvcHRpb25zLCB3Yi5vcHRzLkRhdGUxOTA0KTtcblx0XHRcdFx0XHRcdGFkZGNlbGwoe2M6X2osIHI6dmFsLnJ9LCB0ZW1wX3ZhbCwgb3B0aW9ucyk7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9IGJyZWFrO1xuXHRcdFx0XHRjYXNlIDB4MDBkNiAvKiBSU3RyaW5nICovOlxuXHRcdFx0XHRjYXNlIDB4MDIwNCAvKiBMYWJlbCAqLzogY2FzZSAweDAwMDQgLyogQklGRjJTVFIgKi86XG5cdFx0XHRcdFx0dGVtcF92YWw9bWFrZV9jZWxsKHZhbC52YWwsIHZhbC5peGZlLCAncycpO1xuXHRcdFx0XHRcdHRlbXBfdmFsLlhGID0gWEZzW3RlbXBfdmFsLml4ZmVdO1xuXHRcdFx0XHRcdGlmKEJJRkYyRm10ID4gMCkgdGVtcF92YWwueiA9IEJJRkYyRm10VGFibGVbKHRlbXBfdmFsLml4ZmU+PjgpICYgMHgzRl07XG5cdFx0XHRcdFx0c2FmZV9mb3JtYXRfeGYodGVtcF92YWwsIG9wdGlvbnMsIHdiLm9wdHMuRGF0ZTE5MDQpO1xuXHRcdFx0XHRcdGFkZGNlbGwoe2M6dmFsLmMsIHI6dmFsLnJ9LCB0ZW1wX3ZhbCwgb3B0aW9ucyk7XG5cdFx0XHRcdFx0YnJlYWs7XG5cblx0XHRcdFx0Y2FzZSAweDAwMDA6IGNhc2UgMHgwMjAwIC8qIERpbWVuc2lvbnMgKi86IHtcblx0XHRcdFx0XHRpZihmaWxlX2RlcHRoID09PSAxKSByYW5nZSA9IHZhbDsgLyogVE9ETzogc3RhY2sgKi9cblx0XHRcdFx0fSBicmVhaztcblx0XHRcdFx0Y2FzZSAweDAwZmMgLyogU1NUICovOiB7XG5cdFx0XHRcdFx0c3N0ID0gdmFsO1xuXHRcdFx0XHR9IGJyZWFrO1xuXHRcdFx0XHRjYXNlIDB4MDQxZSAvKiBGb3JtYXQgKi86IHsgLyogdmFsID0gW2lkLCBmbXRdICovXG5cdFx0XHRcdFx0aWYob3B0cy5iaWZmID09IDQpIHtcblx0XHRcdFx0XHRcdEJJRkYyRm10VGFibGVbQklGRjJGbXQrK10gPSB2YWxbMV07XG5cdFx0XHRcdFx0XHRmb3IodmFyIGI0aWR4ID0gMDsgYjRpZHggPCBCSUZGMkZtdCArIDE2MzsgKytiNGlkeCkgaWYodGFibGVfZm10W2I0aWR4XSA9PSB2YWxbMV0pIGJyZWFrO1xuXHRcdFx0XHRcdFx0aWYoYjRpZHggPj0gMTYzKSBTU0ZfbG9hZCh2YWxbMV0sIEJJRkYyRm10ICsgMTYzKTtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0ZWxzZSBTU0ZfbG9hZCh2YWxbMV0sIHZhbFswXSk7XG5cdFx0XHRcdH0gYnJlYWs7XG5cdFx0XHRcdGNhc2UgMHgwMDFlIC8qIEJJRkYyRk9STUFUICovOiB7XG5cdFx0XHRcdFx0QklGRjJGbXRUYWJsZVtCSUZGMkZtdCsrXSA9IHZhbDtcblx0XHRcdFx0XHRmb3IodmFyIGIyaWR4ID0gMDsgYjJpZHggPCBCSUZGMkZtdCArIDE2MzsgKytiMmlkeCkgaWYodGFibGVfZm10W2IyaWR4XSA9PSB2YWwpIGJyZWFrO1xuXHRcdFx0XHRcdGlmKGIyaWR4ID49IDE2MykgU1NGX2xvYWQodmFsLCBCSUZGMkZtdCArIDE2Myk7XG5cdFx0XHRcdH0gYnJlYWs7XG5cblx0XHRcdFx0Y2FzZSAweDAwZTUgLyogTWVyZ2VDZWxscyAqLzogbWVyZ2VzID0gbWVyZ2VzLmNvbmNhdCh2YWwpOyBicmVhaztcblxuXHRcdFx0XHRjYXNlIDB4MDA1ZCAvKiBPYmogKi86IG9iamVjdHNbdmFsLmNtb1swXV0gPSBvcHRzLmxhc3RvYmogPSB2YWw7IGJyZWFrO1xuXHRcdFx0XHRjYXNlIDB4MDFiNiAvKiBUeE8gKi86IG9wdHMubGFzdG9iai5UeE8gPSB2YWw7IGJyZWFrO1xuXHRcdFx0XHRjYXNlIDB4MDA3ZiAvKiBJbURhdGEgKi86IG9wdHMubGFzdG9iai5JbURhdGEgPSB2YWw7IGJyZWFrO1xuXG5cdFx0XHRcdGNhc2UgMHgwMWI4IC8qIEhMaW5rICovOiB7XG5cdFx0XHRcdFx0Zm9yKHJuZ1IgPSB2YWxbMF0ucy5yOyBybmdSIDw9IHZhbFswXS5lLnI7ICsrcm5nUilcblx0XHRcdFx0XHRcdGZvcihybmdDID0gdmFsWzBdLnMuYzsgcm5nQyA8PSB2YWxbMF0uZS5jOyArK3JuZ0MpIHtcblx0XHRcdFx0XHRcdFx0Y2MgPSBvcHRpb25zLmRlbnNlID8gKG91dFtybmdSXXx8W10pW3JuZ0NdIDogb3V0W2VuY29kZV9jZWxsKHtjOnJuZ0MscjpybmdSfSldO1xuXHRcdFx0XHRcdFx0XHRpZihjYykgY2MubCA9IHZhbFsxXTtcblx0XHRcdFx0XHRcdH1cblx0XHRcdFx0fSBicmVhaztcblx0XHRcdFx0Y2FzZSAweDA4MDAgLyogSExpbmtUb29sdGlwICovOiB7XG5cdFx0XHRcdFx0Zm9yKHJuZ1IgPSB2YWxbMF0ucy5yOyBybmdSIDw9IHZhbFswXS5lLnI7ICsrcm5nUilcblx0XHRcdFx0XHRcdGZvcihybmdDID0gdmFsWzBdLnMuYzsgcm5nQyA8PSB2YWxbMF0uZS5jOyArK3JuZ0MpIHtcblx0XHRcdFx0XHRcdFx0Y2MgPSBvcHRpb25zLmRlbnNlID8gKG91dFtybmdSXXx8W10pW3JuZ0NdIDogb3V0W2VuY29kZV9jZWxsKHtjOnJuZ0MscjpybmdSfSldO1xuXHRcdFx0XHRcdFx0XHRpZihjYyAmJiBjYy5sKSBjYy5sLlRvb2x0aXAgPSB2YWxbMV07XG5cdFx0XHRcdFx0XHRcdH1cblx0XHRcdFx0fSBicmVhaztcblx0XHRcdFx0Y2FzZSAweDAwMWMgLyogTm90ZSAqLzoge1xuXHRcdFx0XHRcdGlmKG9wdHMuYmlmZiA8PSA1ICYmIG9wdHMuYmlmZiA+PSAyKSBicmVhazsgLyogVE9ETzogQklGRjUgKi9cblx0XHRcdFx0XHRjYyA9IG9wdGlvbnMuZGVuc2UgPyAob3V0W3ZhbFswXS5yXXx8W10pW3ZhbFswXS5jXSA6IG91dFtlbmNvZGVfY2VsbCh2YWxbMF0pXTtcblx0XHRcdFx0XHR2YXIgbm90ZW9iaiA9IG9iamVjdHNbdmFsWzJdXTtcblx0XHRcdFx0XHRpZighY2MpIHtcblx0XHRcdFx0XHRcdGlmKG9wdGlvbnMuZGVuc2UpIHtcblx0XHRcdFx0XHRcdFx0aWYoIW91dFt2YWxbMF0ucl0pIG91dFt2YWxbMF0ucl0gPSBbXTtcblx0XHRcdFx0XHRcdFx0Y2MgPSBvdXRbdmFsWzBdLnJdW3ZhbFswXS5jXSA9ICh7dDpcInpcIn0vKjphbnkqLyk7XG5cdFx0XHRcdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRcdFx0XHRjYyA9IG91dFtlbmNvZGVfY2VsbCh2YWxbMF0pXSA9ICh7dDpcInpcIn0vKjphbnkqLyk7XG5cdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0XHRyYW5nZS5lLnIgPSBNYXRoLm1heChyYW5nZS5lLnIsIHZhbFswXS5yKTtcblx0XHRcdFx0XHRcdHJhbmdlLnMuciA9IE1hdGgubWluKHJhbmdlLnMuciwgdmFsWzBdLnIpO1xuXHRcdFx0XHRcdFx0cmFuZ2UuZS5jID0gTWF0aC5tYXgocmFuZ2UuZS5jLCB2YWxbMF0uYyk7XG5cdFx0XHRcdFx0XHRyYW5nZS5zLmMgPSBNYXRoLm1pbihyYW5nZS5zLmMsIHZhbFswXS5jKTtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0aWYoIWNjLmMpIGNjLmMgPSBbXTtcblx0XHRcdFx0XHRjbW50ID0ge2E6dmFsWzFdLHQ6bm90ZW9iai5UeE8udH07XG5cdFx0XHRcdFx0Y2MuYy5wdXNoKGNtbnQpO1xuXHRcdFx0XHR9IGJyZWFrO1xuXHRcdFx0XHRjYXNlIDB4MDg3ZCAvKiBYRkV4dCAqLzogdXBkYXRlX3hmZXh0KFhGc1t2YWwuaXhmZV0sIHZhbC5leHQpOyBicmVhaztcblx0XHRcdFx0Y2FzZSAweDAwN2QgLyogQ29sSW5mbyAqLzoge1xuXHRcdFx0XHRcdGlmKCFvcHRzLmNlbGxTdHlsZXMpIGJyZWFrO1xuXHRcdFx0XHRcdHdoaWxlKHZhbC5lID49IHZhbC5zKSB7XG5cdFx0XHRcdFx0XHRjb2xpbmZvW3ZhbC5lLS1dID0geyB3aWR0aDogdmFsLncvMjU2LCBsZXZlbDogKHZhbC5sZXZlbCB8fCAwKSwgaGlkZGVuOiAhISh2YWwuZmxhZ3MgJiAxKSB9O1xuXHRcdFx0XHRcdFx0aWYoIXNlZW5jb2wpIHsgc2VlbmNvbCA9IHRydWU7IGZpbmRfbWR3X2NvbHcodmFsLncvMjU2KTsgfVxuXHRcdFx0XHRcdFx0cHJvY2Vzc19jb2woY29saW5mb1t2YWwuZSsxXSk7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9IGJyZWFrO1xuXHRcdFx0XHRjYXNlIDB4MDIwOCAvKiBSb3cgKi86IHtcblx0XHRcdFx0XHR2YXIgcm93b2JqID0ge307XG5cdFx0XHRcdFx0aWYodmFsLmxldmVsICE9IG51bGwpIHsgcm93aW5mb1t2YWwucl0gPSByb3dvYmo7IHJvd29iai5sZXZlbCA9IHZhbC5sZXZlbDsgfVxuXHRcdFx0XHRcdGlmKHZhbC5oaWRkZW4pIHsgcm93aW5mb1t2YWwucl0gPSByb3dvYmo7IHJvd29iai5oaWRkZW4gPSB0cnVlOyB9XG5cdFx0XHRcdFx0aWYodmFsLmhwdCkge1xuXHRcdFx0XHRcdFx0cm93aW5mb1t2YWwucl0gPSByb3dvYmo7XG5cdFx0XHRcdFx0XHRyb3dvYmouaHB0ID0gdmFsLmhwdDsgcm93b2JqLmhweCA9IHB0MnB4KHZhbC5ocHQpO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0fSBicmVhaztcblx0XHRcdFx0Y2FzZSAweDAwMjYgLyogTGVmdE1hcmdpbiAqLzpcblx0XHRcdFx0Y2FzZSAweDAwMjcgLyogUmlnaHRNYXJnaW4gKi86XG5cdFx0XHRcdGNhc2UgMHgwMDI4IC8qIFRvcE1hcmdpbiAqLzpcblx0XHRcdFx0Y2FzZSAweDAwMjkgLyogQm90dG9tTWFyZ2luICovOlxuXHRcdFx0XHRcdGlmKCFvdXRbJyFtYXJnaW5zJ10pIGRlZmF1bHRfbWFyZ2lucyhvdXRbJyFtYXJnaW5zJ10gPSB7fSk7XG5cdFx0XHRcdFx0b3V0WychbWFyZ2lucyddWyh7MHgyNjogXCJsZWZ0XCIsIDB4Mjc6XCJyaWdodFwiLCAweDI4OlwidG9wXCIsIDB4Mjk6XCJib3R0b21cIn0pW1JlY29yZFR5cGVdXSA9IHZhbDtcblx0XHRcdFx0XHRicmVhaztcblx0XHRcdFx0Y2FzZSAweDAwYTEgLyogU2V0dXAgKi86IC8vIFRPRE9cblx0XHRcdFx0XHRpZighb3V0WychbWFyZ2lucyddKSBkZWZhdWx0X21hcmdpbnMob3V0WychbWFyZ2lucyddID0ge30pO1xuXHRcdFx0XHRcdG91dFsnIW1hcmdpbnMnXS5oZWFkZXIgPSB2YWwuaGVhZGVyO1xuXHRcdFx0XHRcdG91dFsnIW1hcmdpbnMnXS5mb290ZXIgPSB2YWwuZm9vdGVyO1xuXHRcdFx0XHRcdGJyZWFrO1xuXHRcdFx0XHRjYXNlIDB4MDIzZSAvKiBXaW5kb3cyICovOiAvLyBUT0RPXG5cdFx0XHRcdFx0Ly8gJEZsb3dJZ25vcmVcblx0XHRcdFx0XHRpZih2YWwuUlRMKSBXb3JrYm9vay5WaWV3c1swXS5SVEwgPSB0cnVlO1xuXHRcdFx0XHRcdGJyZWFrO1xuXHRcdFx0XHRjYXNlIDB4MDA5MiAvKiBQYWxldHRlICovOiBwYWxldHRlID0gdmFsOyBicmVhaztcblx0XHRcdFx0Y2FzZSAweDA4OTYgLyogVGhlbWUgKi86IHRoZW1lcyA9IHZhbDsgYnJlYWs7XG5cdFx0XHRcdGNhc2UgMHgwMDhjIC8qIENvdW50cnkgKi86IGNvdW50cnkgPSB2YWw7IGJyZWFrO1xuXHRcdFx0XHRjYXNlIDB4MDFiYSAvKiBDb2RlTmFtZSAqLzoge1xuXHRcdFx0XHRcdC8qOjogaWYoIVdvcmtib29rLldCUHJvcHMpIFdvcmtib29rLldCUHJvcHMgPSB7fTsgKi9cblx0XHRcdFx0XHRpZighY3VyX3NoZWV0KSBXb3JrYm9vay5XQlByb3BzLkNvZGVOYW1lID0gdmFsIHx8IFwiVGhpc1dvcmtib29rXCI7XG5cdFx0XHRcdFx0ZWxzZSB3c3Byb3BzLkNvZGVOYW1lID0gdmFsIHx8IHdzcHJvcHMubmFtZTtcblx0XHRcdFx0fSBicmVhaztcblx0XHRcdH1cblx0XHR9IGVsc2Uge1xuXHRcdFx0aWYoIVIpIGNvbnNvbGUuZXJyb3IoXCJNaXNzaW5nIEluZm8gZm9yIFhMUyBSZWNvcmQgMHhcIiArIFJlY29yZFR5cGUudG9TdHJpbmcoMTYpKTtcblx0XHRcdGJsb2IubCArPSBsZW5ndGg7XG5cdFx0fVxuXHR9XG5cdHdiLlNoZWV0TmFtZXM9a2V5cyhEaXJlY3RvcnkpLnNvcnQoZnVuY3Rpb24oYSxiKSB7IHJldHVybiBOdW1iZXIoYSkgLSBOdW1iZXIoYik7IH0pLm1hcChmdW5jdGlvbih4KXtyZXR1cm4gRGlyZWN0b3J5W3hdLm5hbWU7fSk7XG5cdGlmKCFvcHRpb25zLmJvb2tTaGVldHMpIHdiLlNoZWV0cz1TaGVldHM7XG5cdGlmKCF3Yi5TaGVldE5hbWVzLmxlbmd0aCAmJiBQcmVhbWJsZVtcIiFyZWZcIl0pIHtcblx0XHR3Yi5TaGVldE5hbWVzLnB1c2goXCJTaGVldDFcIik7XG5cdFx0Lypqc2hpbnQgLVcwNjkgKi9cblx0XHRpZih3Yi5TaGVldHMpIHdiLlNoZWV0c1tcIlNoZWV0MVwiXSA9IFByZWFtYmxlO1xuXHRcdC8qanNoaW50ICtXMDY5ICovXG5cdH0gZWxzZSB3Yi5QcmVhbWJsZT1QcmVhbWJsZTtcblx0aWYod2IuU2hlZXRzKSBGaWx0ZXJEYXRhYmFzZXMuZm9yRWFjaChmdW5jdGlvbihyLGkpIHsgd2IuU2hlZXRzW3diLlNoZWV0TmFtZXNbaV1dWychYXV0b2ZpbHRlciddID0gcjsgfSk7XG5cdHdiLlN0cmluZ3MgPSBzc3Q7XG5cdHdiLlNTRiA9IGR1cCh0YWJsZV9mbXQpO1xuXHRpZihvcHRzLmVuYykgd2IuRW5jcnlwdGlvbiA9IG9wdHMuZW5jO1xuXHRpZih0aGVtZXMpIHdiLlRoZW1lcyA9IHRoZW1lcztcblx0d2IuTWV0YWRhdGEgPSB7fTtcblx0aWYoY291bnRyeSAhPT0gdW5kZWZpbmVkKSB3Yi5NZXRhZGF0YS5Db3VudHJ5ID0gY291bnRyeTtcblx0aWYoc3VwYm9va3MubmFtZXMubGVuZ3RoID4gMCkgV29ya2Jvb2suTmFtZXMgPSBzdXBib29rcy5uYW1lcztcblx0d2IuV29ya2Jvb2sgPSBXb3JrYm9vaztcblx0cmV0dXJuIHdiO1xufVxuXG4vKiBUT0RPOiBzcGxpdCBwcm9wcyovXG52YXIgUFNDTFNJRCA9IHtcblx0U0k6IFwiZTA4NTlmZjJmOTRmNjgxMGFiOTEwODAwMmIyN2IzZDlcIixcblx0RFNJOiBcIjAyZDVjZGQ1OWMyZTFiMTA5Mzk3MDgwMDJiMmNmOWFlXCIsXG5cdFVESTogXCIwNWQ1Y2RkNTljMmUxYjEwOTM5NzA4MDAyYjJjZjlhZVwiXG59O1xuZnVuY3Rpb24gcGFyc2VfeGxzX3Byb3BzKGNmYi8qOkNGQkNvbnRhaW5lciovLCBwcm9wcywgbykge1xuXHQvKiBbTVMtT1NIQVJFRF0gMi4zLjMuMi4yIERvY3VtZW50IFN1bW1hcnkgSW5mb3JtYXRpb24gUHJvcGVydHkgU2V0ICovXG5cdHZhciBEU0kgPSBDRkIuZmluZChjZmIsICcvIURvY3VtZW50U3VtbWFyeUluZm9ybWF0aW9uJyk7XG5cdGlmKERTSSAmJiBEU0kuc2l6ZSA+IDApIHRyeSB7XG5cdFx0dmFyIERvY1N1bW1hcnkgPSBwYXJzZV9Qcm9wZXJ0eVNldFN0cmVhbShEU0ksIERvY1N1bW1hcnlQSUREU0ksIFBTQ0xTSUQuRFNJKTtcblx0XHRmb3IodmFyIGQgaW4gRG9jU3VtbWFyeSkgcHJvcHNbZF0gPSBEb2NTdW1tYXJ5W2RdO1xuXHR9IGNhdGNoKGUpIHtpZihvLldURikgdGhyb3cgZTsvKiBlbXB0eSAqL31cblxuXHQvKiBbTVMtT1NIQVJFRF0gMi4zLjMuMi4xIFN1bW1hcnkgSW5mb3JtYXRpb24gUHJvcGVydHkgU2V0Ki9cblx0dmFyIFNJID0gQ0ZCLmZpbmQoY2ZiLCAnLyFTdW1tYXJ5SW5mb3JtYXRpb24nKTtcblx0aWYoU0kgJiYgU0kuc2l6ZSA+IDApIHRyeSB7XG5cdFx0dmFyIFN1bW1hcnkgPSBwYXJzZV9Qcm9wZXJ0eVNldFN0cmVhbShTSSwgU3VtbWFyeVBJRFNJLCBQU0NMU0lELlNJKTtcblx0XHRmb3IodmFyIHMgaW4gU3VtbWFyeSkgaWYocHJvcHNbc10gPT0gbnVsbCkgcHJvcHNbc10gPSBTdW1tYXJ5W3NdO1xuXHR9IGNhdGNoKGUpIHtpZihvLldURikgdGhyb3cgZTsvKiBlbXB0eSAqL31cblxuXHRpZihwcm9wcy5IZWFkaW5nUGFpcnMgJiYgcHJvcHMuVGl0bGVzT2ZQYXJ0cykge1xuXHRcdGxvYWRfcHJvcHNfcGFpcnMocHJvcHMuSGVhZGluZ1BhaXJzLCBwcm9wcy5UaXRsZXNPZlBhcnRzLCBwcm9wcywgbyk7XG5cdFx0ZGVsZXRlIHByb3BzLkhlYWRpbmdQYWlyczsgZGVsZXRlIHByb3BzLlRpdGxlc09mUGFydHM7XG5cdH1cbn1cbmZ1bmN0aW9uIHdyaXRlX3hsc19wcm9wcyh3Yi8qOldvcmtib29rKi8sIGNmYi8qOkNGQkNvbnRhaW5lciovKSB7XG5cdHZhciBEU0VudHJpZXMgPSBbXSwgU0VudHJpZXMgPSBbXSwgQ0VudHJpZXMgPSBbXTtcblx0dmFyIGkgPSAwLCBLZXlzO1xuXHR2YXIgRG9jU3VtbWFyeVJFLyo6e1trZXk6c3RyaW5nXTpzdHJpbmd9Ki8gPSBldmVydF9rZXkoRG9jU3VtbWFyeVBJRERTSSwgXCJuXCIpO1xuXHR2YXIgU3VtbWFyeVJFLyo6e1trZXk6c3RyaW5nXTpzdHJpbmd9Ki8gPSBldmVydF9rZXkoU3VtbWFyeVBJRFNJLCBcIm5cIik7XG5cdGlmKHdiLlByb3BzKSB7XG5cdFx0S2V5cyA9IGtleXMod2IuUHJvcHMpO1xuXHRcdC8vICRGbG93SWdub3JlXG5cdFx0Zm9yKGkgPSAwOyBpIDwgS2V5cy5sZW5ndGg7ICsraSkgKE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChEb2NTdW1tYXJ5UkUsIEtleXNbaV0pID8gRFNFbnRyaWVzIDogT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKFN1bW1hcnlSRSwgS2V5c1tpXSkgPyBTRW50cmllcyA6IENFbnRyaWVzKS5wdXNoKFtLZXlzW2ldLCB3Yi5Qcm9wc1tLZXlzW2ldXV0pO1xuXHR9XG5cdGlmKHdiLkN1c3Rwcm9wcykge1xuXHRcdEtleXMgPSBrZXlzKHdiLkN1c3Rwcm9wcyk7XG5cdFx0Ly8gJEZsb3dJZ25vcmVcblx0XHRmb3IoaSA9IDA7IGkgPCBLZXlzLmxlbmd0aDsgKytpKSBpZighT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKCh3Yi5Qcm9wc3x8e30pLCBLZXlzW2ldKSkgKE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChEb2NTdW1tYXJ5UkUsIEtleXNbaV0pID8gRFNFbnRyaWVzIDogT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKFN1bW1hcnlSRSwgS2V5c1tpXSkgPyBTRW50cmllcyA6IENFbnRyaWVzKS5wdXNoKFtLZXlzW2ldLCB3Yi5DdXN0cHJvcHNbS2V5c1tpXV1dKTtcblx0fVxuXHR2YXIgQ0VudHJpZXMyID0gW107XG5cdGZvcihpID0gMDsgaSA8IENFbnRyaWVzLmxlbmd0aDsgKytpKSB7XG5cdFx0aWYoWExTUFNTa2lwLmluZGV4T2YoQ0VudHJpZXNbaV1bMF0pID4gLTEgfHwgUHNldWRvUHJvcHNQYWlycy5pbmRleE9mKENFbnRyaWVzW2ldWzBdKSA+IC0xKSBjb250aW51ZTtcblx0XHRpZihDRW50cmllc1tpXVsxXSA9PSBudWxsKSBjb250aW51ZTtcblx0XHRDRW50cmllczIucHVzaChDRW50cmllc1tpXSk7XG5cdH1cblx0aWYoU0VudHJpZXMubGVuZ3RoKSBDRkIudXRpbHMuY2ZiX2FkZChjZmIsIFwiL1xcdTAwMDVTdW1tYXJ5SW5mb3JtYXRpb25cIiwgd3JpdGVfUHJvcGVydHlTZXRTdHJlYW0oU0VudHJpZXMsIFBTQ0xTSUQuU0ksIFN1bW1hcnlSRSwgU3VtbWFyeVBJRFNJKSk7XG5cdGlmKERTRW50cmllcy5sZW5ndGggfHwgQ0VudHJpZXMyLmxlbmd0aCkgQ0ZCLnV0aWxzLmNmYl9hZGQoY2ZiLCBcIi9cXHUwMDA1RG9jdW1lbnRTdW1tYXJ5SW5mb3JtYXRpb25cIiwgd3JpdGVfUHJvcGVydHlTZXRTdHJlYW0oRFNFbnRyaWVzLCBQU0NMU0lELkRTSSwgRG9jU3VtbWFyeVJFLCBEb2NTdW1tYXJ5UElERFNJLCBDRW50cmllczIubGVuZ3RoID8gQ0VudHJpZXMyIDogbnVsbCwgUFNDTFNJRC5VREkpKTtcbn1cblxuZnVuY3Rpb24gcGFyc2VfeGxzY2ZiKGNmYi8qOmFueSovLCBvcHRpb25zLyo6P1BhcnNlT3B0cyovKS8qOldvcmtib29rKi8ge1xuaWYoIW9wdGlvbnMpIG9wdGlvbnMgPSB7fTtcbmZpeF9yZWFkX29wdHMob3B0aW9ucyk7XG5yZXNldF9jcCgpO1xuaWYob3B0aW9ucy5jb2RlcGFnZSkgc2V0X2Fuc2kob3B0aW9ucy5jb2RlcGFnZSk7XG52YXIgQ29tcE9iai8qOj9DRkJFbnRyeSovLCBXQi8qOj9hbnkqLztcbmlmKGNmYi5GdWxsUGF0aHMpIHtcblx0aWYoQ0ZCLmZpbmQoY2ZiLCAnL2VuY3J5cHRpb24nKSkgdGhyb3cgbmV3IEVycm9yKFwiRmlsZSBpcyBwYXNzd29yZC1wcm90ZWN0ZWRcIik7XG5cdENvbXBPYmogPSBDRkIuZmluZChjZmIsICchQ29tcE9iaicpO1xuXHRXQiA9IENGQi5maW5kKGNmYiwgJy9Xb3JrYm9vaycpIHx8IENGQi5maW5kKGNmYiwgJy9Cb29rJyk7XG59IGVsc2Uge1xuXHRzd2l0Y2gob3B0aW9ucy50eXBlKSB7XG5cdFx0Y2FzZSAnYmFzZTY0JzogY2ZiID0gczJhKEJhc2U2NF9kZWNvZGUoY2ZiKSk7IGJyZWFrO1xuXHRcdGNhc2UgJ2JpbmFyeSc6IGNmYiA9IHMyYShjZmIpOyBicmVhaztcblx0XHRjYXNlICdidWZmZXInOiBicmVhaztcblx0XHRjYXNlICdhcnJheSc6IGlmKCFBcnJheS5pc0FycmF5KGNmYikpIGNmYiA9IEFycmF5LnByb3RvdHlwZS5zbGljZS5jYWxsKGNmYik7IGJyZWFrO1xuXHR9XG5cdHByZXBfYmxvYihjZmIsIDApO1xuXHRXQiA9ICh7Y29udGVudDogY2ZifS8qOmFueSovKTtcbn1cbnZhciAvKjo6Q29tcE9ialAsICovV29ya2Jvb2tQLyo6OiA6V29ya2Jvb2sgPSBYTFNYLnV0aWxzLmJvb2tfbmV3KCk7ICovO1xuXG52YXIgX2RhdGEvKjo/YW55Ki87XG5pZihDb21wT2JqKSAvKjo6Q29tcE9ialAgPSAqL3BhcnNlX2NvbXBvYmooQ29tcE9iaik7XG5pZihvcHRpb25zLmJvb2tQcm9wcyAmJiAhb3B0aW9ucy5ib29rU2hlZXRzKSBXb3JrYm9va1AgPSAoe30vKjphbnkqLyk7XG5lbHNlLyo6OiBpZihjZmIgaW5zdGFuY2VvZiBDRkJDb250YWluZXIpICovIHtcblx0dmFyIFQgPSBoYXNfYnVmID8gJ2J1ZmZlcicgOiAnYXJyYXknO1xuXHRpZihXQiAmJiBXQi5jb250ZW50KSBXb3JrYm9va1AgPSBwYXJzZV93b3JrYm9vayhXQi5jb250ZW50LCBvcHRpb25zKTtcblx0LyogUXVhdHRybyBQcm8gNy04ICovXG5cdGVsc2UgaWYoKF9kYXRhPUNGQi5maW5kKGNmYiwgJ1BlcmZlY3RPZmZpY2VfTUFJTicpKSAmJiBfZGF0YS5jb250ZW50KSBXb3JrYm9va1AgPSBXS18udG9fd29ya2Jvb2soX2RhdGEuY29udGVudCwgKG9wdGlvbnMudHlwZSA9IFQsIG9wdGlvbnMpKTtcblx0LyogUXVhdHRybyBQcm8gOSAqL1xuXHRlbHNlIGlmKChfZGF0YT1DRkIuZmluZChjZmIsICdOYXRpdmVDb250ZW50X01BSU4nKSkgJiYgX2RhdGEuY29udGVudCkgV29ya2Jvb2tQID0gV0tfLnRvX3dvcmtib29rKF9kYXRhLmNvbnRlbnQsIChvcHRpb25zLnR5cGUgPSBULCBvcHRpb25zKSk7XG5cdC8qIFdvcmtzIDQgZm9yIE1hYyAqL1xuXHRlbHNlIGlmKChfZGF0YT1DRkIuZmluZChjZmIsICdNTjAnKSkgJiYgX2RhdGEuY29udGVudCkgdGhyb3cgbmV3IEVycm9yKFwiVW5zdXBwb3J0ZWQgV29ya3MgNCBmb3IgTWFjIGZpbGVcIik7XG5cdGVsc2UgdGhyb3cgbmV3IEVycm9yKFwiQ2Fubm90IGZpbmQgV29ya2Jvb2sgc3RyZWFtXCIpO1xuXHRpZihvcHRpb25zLmJvb2tWQkEgJiYgY2ZiLkZ1bGxQYXRocyAmJiBDRkIuZmluZChjZmIsICcvX1ZCQV9QUk9KRUNUX0NVUi9WQkEvZGlyJykpIFdvcmtib29rUC52YmFyYXcgPSBtYWtlX3ZiYV94bHMoY2ZiKTtcbn1cblxudmFyIHByb3BzID0ge307XG5pZihjZmIuRnVsbFBhdGhzKSBwYXJzZV94bHNfcHJvcHMoLyo6OigoKi9jZmIvKjo6IDphbnkpOkNGQkNvbnRhaW5lcikqLywgcHJvcHMsIG9wdGlvbnMpO1xuXG5Xb3JrYm9va1AuUHJvcHMgPSBXb3JrYm9va1AuQ3VzdHByb3BzID0gcHJvcHM7IC8qIFRPRE86IHNwbGl0IHVwIHByb3BlcnRpZXMgKi9cbmlmKG9wdGlvbnMuYm9va0ZpbGVzKSBXb3JrYm9va1AuY2ZiID0gY2ZiO1xuLypXb3JrYm9va1AuQ29tcE9ialAgPSBDb21wT2JqUDsgLy8gVE9ETzogc3RvcmFnZT8gKi9cbnJldHVybiBXb3JrYm9va1A7XG59XG5cblxuZnVuY3Rpb24gd3JpdGVfeGxzY2ZiKHdiLyo6V29ya2Jvb2sqLywgb3B0cy8qOldyaXRlT3B0cyovKS8qOkNGQkNvbnRhaW5lciovIHtcblx0dmFyIG8gPSBvcHRzIHx8IHt9O1xuXHR2YXIgY2ZiID0gQ0ZCLnV0aWxzLmNmYl9uZXcoe3Jvb3Q6XCJSXCJ9KTtcblx0dmFyIHdicGF0aCA9IFwiL1dvcmtib29rXCI7XG5cdHN3aXRjaChvLmJvb2tUeXBlIHx8IFwieGxzXCIpIHtcblx0XHRjYXNlIFwieGxzXCI6IG8uYm9va1R5cGUgPSBcImJpZmY4XCI7XG5cdFx0LyogZmFsbHMgdGhyb3VnaCAqL1xuXHRcdGNhc2UgXCJ4bGFcIjogaWYoIW8uYm9va1R5cGUpIG8uYm9va1R5cGUgPSBcInhsYVwiO1xuXHRcdC8qIGZhbGxzIHRocm91Z2ggKi9cblx0XHRjYXNlIFwiYmlmZjhcIjogd2JwYXRoID0gXCIvV29ya2Jvb2tcIjsgby5iaWZmID0gODsgYnJlYWs7XG5cdFx0Y2FzZSBcImJpZmY1XCI6IHdicGF0aCA9IFwiL0Jvb2tcIjsgby5iaWZmID0gNTsgYnJlYWs7XG5cdFx0ZGVmYXVsdDogdGhyb3cgbmV3IEVycm9yKFwiaW52YWxpZCB0eXBlIFwiICsgby5ib29rVHlwZSArIFwiIGZvciBYTFMgQ0ZCXCIpO1xuXHR9XG5cdENGQi51dGlscy5jZmJfYWRkKGNmYiwgd2JwYXRoLCB3cml0ZV9iaWZmX2J1Zih3YiwgbykpO1xuXHRpZihvLmJpZmYgPT0gOCAmJiAod2IuUHJvcHMgfHwgd2IuQ3VzdHByb3BzKSkgd3JpdGVfeGxzX3Byb3BzKHdiLCBjZmIpO1xuXHQvLyBUT0RPOiBTSSwgRFNJLCBDT1xuXHRpZihvLmJpZmYgPT0gOCAmJiB3Yi52YmFyYXcpIGZpbGxfdmJhX3hscyhjZmIsIENGQi5yZWFkKHdiLnZiYXJhdywge3R5cGU6IHR5cGVvZiB3Yi52YmFyYXcgPT0gXCJzdHJpbmdcIiA/IFwiYmluYXJ5XCIgOiBcImJ1ZmZlclwifSkpO1xuXHRyZXR1cm4gY2ZiO1xufVxuLyogW01TLVhMU0JdIDIuMyBSZWNvcmQgRW51bWVyYXRpb24gKi9cbnZhciBYTFNCUmVjb3JkRW51bSA9IHtcblx0Lyo6OlsqLzB4MDAwMC8qOjpdKi86IHsgLyogbjpcIkJydFJvd0hkclwiLCAqLyBmOnBhcnNlX0JydFJvd0hkciB9LFxuXHQvKjo6WyovMHgwMDAxLyo6Ol0qLzogeyAvKiBuOlwiQnJ0Q2VsbEJsYW5rXCIsICovIGY6cGFyc2VfQnJ0Q2VsbEJsYW5rIH0sXG5cdC8qOjpbKi8weDAwMDIvKjo6XSovOiB7IC8qIG46XCJCcnRDZWxsUmtcIiwgKi8gZjpwYXJzZV9CcnRDZWxsUmsgfSxcblx0Lyo6OlsqLzB4MDAwMy8qOjpdKi86IHsgLyogbjpcIkJydENlbGxFcnJvclwiLCAqLyBmOnBhcnNlX0JydENlbGxFcnJvciB9LFxuXHQvKjo6WyovMHgwMDA0Lyo6Ol0qLzogeyAvKiBuOlwiQnJ0Q2VsbEJvb2xcIiwgKi8gZjpwYXJzZV9CcnRDZWxsQm9vbCB9LFxuXHQvKjo6WyovMHgwMDA1Lyo6Ol0qLzogeyAvKiBuOlwiQnJ0Q2VsbFJlYWxcIiwgKi8gZjpwYXJzZV9CcnRDZWxsUmVhbCB9LFxuXHQvKjo6WyovMHgwMDA2Lyo6Ol0qLzogeyAvKiBuOlwiQnJ0Q2VsbFN0XCIsICovIGY6cGFyc2VfQnJ0Q2VsbFN0IH0sXG5cdC8qOjpbKi8weDAwMDcvKjo6XSovOiB7IC8qIG46XCJCcnRDZWxsSXNzdFwiLCAqLyBmOnBhcnNlX0JydENlbGxJc3N0IH0sXG5cdC8qOjpbKi8weDAwMDgvKjo6XSovOiB7IC8qIG46XCJCcnRGbWxhU3RyaW5nXCIsICovIGY6cGFyc2VfQnJ0Rm1sYVN0cmluZyB9LFxuXHQvKjo6WyovMHgwMDA5Lyo6Ol0qLzogeyAvKiBuOlwiQnJ0Rm1sYU51bVwiLCAqLyBmOnBhcnNlX0JydEZtbGFOdW0gfSxcblx0Lyo6OlsqLzB4MDAwQS8qOjpdKi86IHsgLyogbjpcIkJydEZtbGFCb29sXCIsICovIGY6cGFyc2VfQnJ0Rm1sYUJvb2wgfSxcblx0Lyo6OlsqLzB4MDAwQi8qOjpdKi86IHsgLyogbjpcIkJydEZtbGFFcnJvclwiLCAqLyBmOnBhcnNlX0JydEZtbGFFcnJvciB9LFxuXHQvKjo6WyovMHgwMDBDLyo6Ol0qLzogeyAvKiBuOlwiQnJ0U2hvcnRCbGFua1wiLCAqLyBmOnBhcnNlX0JydFNob3J0QmxhbmsgfSxcblx0Lyo6OlsqLzB4MDAwRC8qOjpdKi86IHsgLyogbjpcIkJydFNob3J0UmtcIiwgKi8gZjpwYXJzZV9CcnRTaG9ydFJrIH0sXG5cdC8qOjpbKi8weDAwMEUvKjo6XSovOiB7IC8qIG46XCJCcnRTaG9ydEVycm9yXCIsICovIGY6cGFyc2VfQnJ0U2hvcnRFcnJvciB9LFxuXHQvKjo6WyovMHgwMDBGLyo6Ol0qLzogeyAvKiBuOlwiQnJ0U2hvcnRCb29sXCIsICovIGY6cGFyc2VfQnJ0U2hvcnRCb29sIH0sXG5cdC8qOjpbKi8weDAwMTAvKjo6XSovOiB7IC8qIG46XCJCcnRTaG9ydFJlYWxcIiwgKi8gZjpwYXJzZV9CcnRTaG9ydFJlYWwgfSxcblx0Lyo6OlsqLzB4MDAxMS8qOjpdKi86IHsgLyogbjpcIkJydFNob3J0U3RcIiwgKi8gZjpwYXJzZV9CcnRTaG9ydFN0IH0sXG5cdC8qOjpbKi8weDAwMTIvKjo6XSovOiB7IC8qIG46XCJCcnRTaG9ydElzc3RcIiwgKi8gZjpwYXJzZV9CcnRTaG9ydElzc3QgfSxcblx0Lyo6OlsqLzB4MDAxMy8qOjpdKi86IHsgLyogbjpcIkJydFNTVEl0ZW1cIiwgKi8gZjpwYXJzZV9SaWNoU3RyIH0sXG5cdC8qOjpbKi8weDAwMTQvKjo6XSovOiB7IC8qIG46XCJCcnRQQ0RJTWlzc2luZ1wiICovIH0sXG5cdC8qOjpbKi8weDAwMTUvKjo6XSovOiB7IC8qIG46XCJCcnRQQ0RJTnVtYmVyXCIgKi8gfSxcblx0Lyo6OlsqLzB4MDAxNi8qOjpdKi86IHsgLyogbjpcIkJydFBDRElCb29sZWFuXCIgKi8gfSxcblx0Lyo6OlsqLzB4MDAxNy8qOjpdKi86IHsgLyogbjpcIkJydFBDRElFcnJvclwiICovIH0sXG5cdC8qOjpbKi8weDAwMTgvKjo6XSovOiB7IC8qIG46XCJCcnRQQ0RJU3RyaW5nXCIgKi8gfSxcblx0Lyo6OlsqLzB4MDAxOS8qOjpdKi86IHsgLyogbjpcIkJydFBDRElEYXRldGltZVwiICovIH0sXG5cdC8qOjpbKi8weDAwMUEvKjo6XSovOiB7IC8qIG46XCJCcnRQQ0RJSW5kZXhcIiAqLyB9LFxuXHQvKjo6WyovMHgwMDFCLyo6Ol0qLzogeyAvKiBuOlwiQnJ0UENESUFNaXNzaW5nXCIgKi8gfSxcblx0Lyo6OlsqLzB4MDAxQy8qOjpdKi86IHsgLyogbjpcIkJydFBDRElBTnVtYmVyXCIgKi8gfSxcblx0Lyo6OlsqLzB4MDAxRC8qOjpdKi86IHsgLyogbjpcIkJydFBDRElBQm9vbGVhblwiICovIH0sXG5cdC8qOjpbKi8weDAwMUUvKjo6XSovOiB7IC8qIG46XCJCcnRQQ0RJQUVycm9yXCIgKi8gfSxcblx0Lyo6OlsqLzB4MDAxRi8qOjpdKi86IHsgLyogbjpcIkJydFBDRElBU3RyaW5nXCIgKi8gfSxcblx0Lyo6OlsqLzB4MDAyMC8qOjpdKi86IHsgLyogbjpcIkJydFBDRElBRGF0ZXRpbWVcIiAqLyB9LFxuXHQvKjo6WyovMHgwMDIxLyo6Ol0qLzogeyAvKiBuOlwiQnJ0UENSUmVjb3JkXCIgKi8gfSxcblx0Lyo6OlsqLzB4MDAyMi8qOjpdKi86IHsgLyogbjpcIkJydFBDUlJlY29yZER0XCIgKi8gfSxcblx0Lyo6OlsqLzB4MDAyMy8qOjpdKi86IHsgLyogbjpcIkJydEZSVEJlZ2luXCIsICovIFQ6MSB9LFxuXHQvKjo6WyovMHgwMDI0Lyo6Ol0qLzogeyAvKiBuOlwiQnJ0RlJURW5kXCIsICovIFQ6LTEgfSxcblx0Lyo6OlsqLzB4MDAyNS8qOjpdKi86IHsgLyogbjpcIkJydEFDQmVnaW5cIiwgKi8gVDoxIH0sXG5cdC8qOjpbKi8weDAwMjYvKjo6XSovOiB7IC8qIG46XCJCcnRBQ0VuZFwiLCAqLyBUOi0xIH0sXG5cdC8qOjpbKi8weDAwMjcvKjo6XSovOiB7IC8qIG46XCJCcnROYW1lXCIsICovIGY6cGFyc2VfQnJ0TmFtZSB9LFxuXHQvKjo6WyovMHgwMDI4Lyo6Ol0qLzogeyAvKiBuOlwiQnJ0SW5kZXhSb3dCbG9ja1wiICovIH0sXG5cdC8qOjpbKi8weDAwMkEvKjo6XSovOiB7IC8qIG46XCJCcnRJbmRleEJsb2NrXCIgKi8gfSxcblx0Lyo6OlsqLzB4MDAyQi8qOjpdKi86IHsgLyogbjpcIkJydEZvbnRcIiwgKi8gZjpwYXJzZV9CcnRGb250IH0sXG5cdC8qOjpbKi8weDAwMkMvKjo6XSovOiB7IC8qIG46XCJCcnRGbXRcIiwgKi8gZjpwYXJzZV9CcnRGbXQgfSxcblx0Lyo6OlsqLzB4MDAyRC8qOjpdKi86IHsgLyogbjpcIkJydEZpbGxcIiwgKi8gZjpwYXJzZV9CcnRGaWxsIH0sXG5cdC8qOjpbKi8weDAwMkUvKjo6XSovOiB7IC8qIG46XCJCcnRCb3JkZXJcIiwgKi8gZjpwYXJzZV9CcnRCb3JkZXIgfSxcblx0Lyo6OlsqLzB4MDAyRi8qOjpdKi86IHsgLyogbjpcIkJydFhGXCIsICovIGY6cGFyc2VfQnJ0WEYgfSxcblx0Lyo6OlsqLzB4MDAzMC8qOjpdKi86IHsgLyogbjpcIkJydFN0eWxlXCIgKi8gfSxcblx0Lyo6OlsqLzB4MDAzMS8qOjpdKi86IHsgLyogbjpcIkJydENlbGxNZXRhXCIsICovIGY6cGFyc2VfSW50MzJMRSB9LFxuXHQvKjo6WyovMHgwMDMyLyo6Ol0qLzogeyAvKiBuOlwiQnJ0VmFsdWVNZXRhXCIgKi8gfSxcblx0Lyo6OlsqLzB4MDAzMy8qOjpdKi86IHsgLyogbjpcIkJydE1kYlwiICovIGY6cGFyc2VfQnJ0TWRiIH0sXG5cdC8qOjpbKi8weDAwMzQvKjo6XSovOiB7IC8qIG46XCJCcnRCZWdpbkZtZFwiLCAqLyBUOjEgfSxcblx0Lyo6OlsqLzB4MDAzNS8qOjpdKi86IHsgLyogbjpcIkJydEVuZEZtZFwiLCAqLyBUOi0xIH0sXG5cdC8qOjpbKi8weDAwMzYvKjo6XSovOiB7IC8qIG46XCJCcnRCZWdpbk1keFwiLCAqLyBUOjEgfSxcblx0Lyo6OlsqLzB4MDAzNy8qOjpdKi86IHsgLyogbjpcIkJydEVuZE1keFwiLCAqLyBUOi0xIH0sXG5cdC8qOjpbKi8weDAwMzgvKjo6XSovOiB7IC8qIG46XCJCcnRCZWdpbk1keFR1cGxlXCIsICovIFQ6MSB9LFxuXHQvKjo6WyovMHgwMDM5Lyo6Ol0qLzogeyAvKiBuOlwiQnJ0RW5kTWR4VHVwbGVcIiwgKi8gVDotMSB9LFxuXHQvKjo6WyovMHgwMDNBLyo6Ol0qLzogeyAvKiBuOlwiQnJ0TWR4TWJySXN0clwiICovIH0sXG5cdC8qOjpbKi8weDAwM0IvKjo6XSovOiB7IC8qIG46XCJCcnRTdHJcIiAqLyB9LFxuXHQvKjo6WyovMHgwMDNDLyo6Ol0qLzogeyAvKiBuOlwiQnJ0Q29sSW5mb1wiLCAqLyBmOnBhcnNlX0NvbEluZm8gfSxcblx0Lyo6OlsqLzB4MDAzRS8qOjpdKi86IHsgLyogbjpcIkJydENlbGxSU3RyaW5nXCIsICovIGY6cGFyc2VfQnJ0Q2VsbFJTdHJpbmcgfSxcblx0Lyo6OlsqLzB4MDAzRi8qOjpdKi86IHsgLyogbjpcIkJydENhbGNDaGFpbkl0ZW0kXCIsICovIGY6cGFyc2VfQnJ0Q2FsY0NoYWluSXRlbSQgfSxcblx0Lyo6OlsqLzB4MDA0MC8qOjpdKi86IHsgLyogbjpcIkJydERWYWxcIiwgKi8gZjpwYXJzZV9CcnREVmFsIH0sXG5cdC8qOjpbKi8weDAwNDEvKjo6XSovOiB7IC8qIG46XCJCcnRTeHZjZWxsTnVtXCIgKi8gfSxcblx0Lyo6OlsqLzB4MDA0Mi8qOjpdKi86IHsgLyogbjpcIkJydFN4dmNlbGxTdHJcIiAqLyB9LFxuXHQvKjo6WyovMHgwMDQzLyo6Ol0qLzogeyAvKiBuOlwiQnJ0U3h2Y2VsbEJvb2xcIiAqLyB9LFxuXHQvKjo6WyovMHgwMDQ0Lyo6Ol0qLzogeyAvKiBuOlwiQnJ0U3h2Y2VsbEVyclwiICovIH0sXG5cdC8qOjpbKi8weDAwNDUvKjo6XSovOiB7IC8qIG46XCJCcnRTeHZjZWxsRGF0ZVwiICovIH0sXG5cdC8qOjpbKi8weDAwNDYvKjo6XSovOiB7IC8qIG46XCJCcnRTeHZjZWxsTmlsXCIgKi8gfSxcblx0Lyo6OlsqLzB4MDA4MC8qOjpdKi86IHsgLyogbjpcIkJydEZpbGVWZXJzaW9uXCIgKi8gfSxcblx0Lyo6OlsqLzB4MDA4MS8qOjpdKi86IHsgLyogbjpcIkJydEJlZ2luU2hlZXRcIiwgKi8gVDoxIH0sXG5cdC8qOjpbKi8weDAwODIvKjo6XSovOiB7IC8qIG46XCJCcnRFbmRTaGVldFwiLCAqLyBUOi0xIH0sXG5cdC8qOjpbKi8weDAwODMvKjo6XSovOiB7IC8qIG46XCJCcnRCZWdpbkJvb2tcIiwgKi8gVDoxLCBmOnBhcnNlbm9vcCwgcDowIH0sXG5cdC8qOjpbKi8weDAwODQvKjo6XSovOiB7IC8qIG46XCJCcnRFbmRCb29rXCIsICovIFQ6LTEgfSxcblx0Lyo6OlsqLzB4MDA4NS8qOjpdKi86IHsgLyogbjpcIkJydEJlZ2luV3NWaWV3c1wiLCAqLyBUOjEgfSxcblx0Lyo6OlsqLzB4MDA4Ni8qOjpdKi86IHsgLyogbjpcIkJydEVuZFdzVmlld3NcIiwgKi8gVDotMSB9LFxuXHQvKjo6WyovMHgwMDg3Lyo6Ol0qLzogeyAvKiBuOlwiQnJ0QmVnaW5Cb29rVmlld3NcIiwgKi8gVDoxIH0sXG5cdC8qOjpbKi8weDAwODgvKjo6XSovOiB7IC8qIG46XCJCcnRFbmRCb29rVmlld3NcIiwgKi8gVDotMSB9LFxuXHQvKjo6WyovMHgwMDg5Lyo6Ol0qLzogeyAvKiBuOlwiQnJ0QmVnaW5Xc1ZpZXdcIiwgKi8gVDoxLCBmOnBhcnNlX0JydEJlZ2luV3NWaWV3IH0sXG5cdC8qOjpbKi8weDAwOEEvKjo6XSovOiB7IC8qIG46XCJCcnRFbmRXc1ZpZXdcIiwgKi8gVDotMSB9LFxuXHQvKjo6WyovMHgwMDhCLyo6Ol0qLzogeyAvKiBuOlwiQnJ0QmVnaW5Dc1ZpZXdzXCIsICovIFQ6MSB9LFxuXHQvKjo6WyovMHgwMDhDLyo6Ol0qLzogeyAvKiBuOlwiQnJ0RW5kQ3NWaWV3c1wiLCAqLyBUOi0xIH0sXG5cdC8qOjpbKi8weDAwOEQvKjo6XSovOiB7IC8qIG46XCJCcnRCZWdpbkNzVmlld1wiLCAqLyBUOjEgfSxcblx0Lyo6OlsqLzB4MDA4RS8qOjpdKi86IHsgLyogbjpcIkJydEVuZENzVmlld1wiLCAqLyBUOi0xIH0sXG5cdC8qOjpbKi8weDAwOEYvKjo6XSovOiB7IC8qIG46XCJCcnRCZWdpbkJ1bmRsZVNoc1wiLCAqLyBUOjEgfSxcblx0Lyo6OlsqLzB4MDA5MC8qOjpdKi86IHsgLyogbjpcIkJydEVuZEJ1bmRsZVNoc1wiLCAqLyBUOi0xIH0sXG5cdC8qOjpbKi8weDAwOTEvKjo6XSovOiB7IC8qIG46XCJCcnRCZWdpblNoZWV0RGF0YVwiLCAqLyBUOjEgfSxcblx0Lyo6OlsqLzB4MDA5Mi8qOjpdKi86IHsgLyogbjpcIkJydEVuZFNoZWV0RGF0YVwiLCAqLyBUOi0xIH0sXG5cdC8qOjpbKi8weDAwOTMvKjo6XSovOiB7IC8qIG46XCJCcnRXc1Byb3BcIiwgKi8gZjpwYXJzZV9CcnRXc1Byb3AgfSxcblx0Lyo6OlsqLzB4MDA5NC8qOjpdKi86IHsgLyogbjpcIkJydFdzRGltXCIsICovIGY6cGFyc2VfQnJ0V3NEaW0sIHA6MTYgfSxcblx0Lyo6OlsqLzB4MDA5Ny8qOjpdKi86IHsgLyogbjpcIkJydFBhbmVcIiwgKi8gZjpwYXJzZV9CcnRQYW5lIH0sXG5cdC8qOjpbKi8weDAwOTgvKjo6XSovOiB7IC8qIG46XCJCcnRTZWxcIiAqLyB9LFxuXHQvKjo6WyovMHgwMDk5Lyo6Ol0qLzogeyAvKiBuOlwiQnJ0V2JQcm9wXCIsICovIGY6cGFyc2VfQnJ0V2JQcm9wIH0sXG5cdC8qOjpbKi8weDAwOUEvKjo6XSovOiB7IC8qIG46XCJCcnRXYkZhY3RvaWRcIiAqLyB9LFxuXHQvKjo6WyovMHgwMDlCLyo6Ol0qLzogeyAvKiBuOlwiQnJ0RmlsZVJlY292ZXJcIiAqLyB9LFxuXHQvKjo6WyovMHgwMDlDLyo6Ol0qLzogeyAvKiBuOlwiQnJ0QnVuZGxlU2hcIiwgKi8gZjpwYXJzZV9CcnRCdW5kbGVTaCB9LFxuXHQvKjo6WyovMHgwMDlELyo6Ol0qLzogeyAvKiBuOlwiQnJ0Q2FsY1Byb3BcIiAqLyB9LFxuXHQvKjo6WyovMHgwMDlFLyo6Ol0qLzogeyAvKiBuOlwiQnJ0Qm9va1ZpZXdcIiAqLyB9LFxuXHQvKjo6WyovMHgwMDlGLyo6Ol0qLzogeyAvKiBuOlwiQnJ0QmVnaW5Tc3RcIiwgKi8gVDoxLCBmOnBhcnNlX0JydEJlZ2luU3N0IH0sXG5cdC8qOjpbKi8weDAwQTAvKjo6XSovOiB7IC8qIG46XCJCcnRFbmRTc3RcIiwgKi8gVDotMSB9LFxuXHQvKjo6WyovMHgwMEExLyo6Ol0qLzogeyAvKiBuOlwiQnJ0QmVnaW5BRmlsdGVyXCIsICovIFQ6MSwgZjpwYXJzZV9VbmNoZWNrZWRSZlggfSxcblx0Lyo6OlsqLzB4MDBBMi8qOjpdKi86IHsgLyogbjpcIkJydEVuZEFGaWx0ZXJcIiwgKi8gVDotMSB9LFxuXHQvKjo6WyovMHgwMEEzLyo6Ol0qLzogeyAvKiBuOlwiQnJ0QmVnaW5GaWx0ZXJDb2x1bW5cIiwgKi8gVDoxIH0sXG5cdC8qOjpbKi8weDAwQTQvKjo6XSovOiB7IC8qIG46XCJCcnRFbmRGaWx0ZXJDb2x1bW5cIiwgKi8gVDotMSB9LFxuXHQvKjo6WyovMHgwMEE1Lyo6Ol0qLzogeyAvKiBuOlwiQnJ0QmVnaW5GaWx0ZXJzXCIsICovIFQ6MSB9LFxuXHQvKjo6WyovMHgwMEE2Lyo6Ol0qLzogeyAvKiBuOlwiQnJ0RW5kRmlsdGVyc1wiLCAqLyBUOi0xIH0sXG5cdC8qOjpbKi8weDAwQTcvKjo6XSovOiB7IC8qIG46XCJCcnRGaWx0ZXJcIiAqLyB9LFxuXHQvKjo6WyovMHgwMEE4Lyo6Ol0qLzogeyAvKiBuOlwiQnJ0Q29sb3JGaWx0ZXJcIiAqLyB9LFxuXHQvKjo6WyovMHgwMEE5Lyo6Ol0qLzogeyAvKiBuOlwiQnJ0SWNvbkZpbHRlclwiICovIH0sXG5cdC8qOjpbKi8weDAwQUEvKjo6XSovOiB7IC8qIG46XCJCcnRUb3AxMEZpbHRlclwiICovIH0sXG5cdC8qOjpbKi8weDAwQUIvKjo6XSovOiB7IC8qIG46XCJCcnREeW5hbWljRmlsdGVyXCIgKi8gfSxcblx0Lyo6OlsqLzB4MDBBQy8qOjpdKi86IHsgLyogbjpcIkJydEJlZ2luQ3VzdG9tRmlsdGVyc1wiLCAqLyBUOjEgfSxcblx0Lyo6OlsqLzB4MDBBRC8qOjpdKi86IHsgLyogbjpcIkJydEVuZEN1c3RvbUZpbHRlcnNcIiwgKi8gVDotMSB9LFxuXHQvKjo6WyovMHgwMEFFLyo6Ol0qLzogeyAvKiBuOlwiQnJ0Q3VzdG9tRmlsdGVyXCIgKi8gfSxcblx0Lyo6OlsqLzB4MDBBRi8qOjpdKi86IHsgLyogbjpcIkJydEFGaWx0ZXJEYXRlR3JvdXBJdGVtXCIgKi8gfSxcblx0Lyo6OlsqLzB4MDBCMC8qOjpdKi86IHsgLyogbjpcIkJydE1lcmdlQ2VsbFwiLCAqLyBmOnBhcnNlX0JydE1lcmdlQ2VsbCB9LFxuXHQvKjo6WyovMHgwMEIxLyo6Ol0qLzogeyAvKiBuOlwiQnJ0QmVnaW5NZXJnZUNlbGxzXCIsICovIFQ6MSB9LFxuXHQvKjo6WyovMHgwMEIyLyo6Ol0qLzogeyAvKiBuOlwiQnJ0RW5kTWVyZ2VDZWxsc1wiLCAqLyBUOi0xIH0sXG5cdC8qOjpbKi8weDAwQjMvKjo6XSovOiB7IC8qIG46XCJCcnRCZWdpblBpdm90Q2FjaGVEZWZcIiwgKi8gVDoxIH0sXG5cdC8qOjpbKi8weDAwQjQvKjo6XSovOiB7IC8qIG46XCJCcnRFbmRQaXZvdENhY2hlRGVmXCIsICovIFQ6LTEgfSxcblx0Lyo6OlsqLzB4MDBCNS8qOjpdKi86IHsgLyogbjpcIkJydEJlZ2luUENERmllbGRzXCIsICovIFQ6MSB9LFxuXHQvKjo6WyovMHgwMEI2Lyo6Ol0qLzogeyAvKiBuOlwiQnJ0RW5kUENERmllbGRzXCIsICovIFQ6LTEgfSxcblx0Lyo6OlsqLzB4MDBCNy8qOjpdKi86IHsgLyogbjpcIkJydEJlZ2luUENERmllbGRcIiwgKi8gVDoxIH0sXG5cdC8qOjpbKi8weDAwQjgvKjo6XSovOiB7IC8qIG46XCJCcnRFbmRQQ0RGaWVsZFwiLCAqLyBUOi0xIH0sXG5cdC8qOjpbKi8weDAwQjkvKjo6XSovOiB7IC8qIG46XCJCcnRCZWdpblBDRFNvdXJjZVwiLCAqLyBUOjEgfSxcblx0Lyo6OlsqLzB4MDBCQS8qOjpdKi86IHsgLyogbjpcIkJydEVuZFBDRFNvdXJjZVwiLCAqLyBUOi0xIH0sXG5cdC8qOjpbKi8weDAwQkIvKjo6XSovOiB7IC8qIG46XCJCcnRCZWdpblBDRFNSYW5nZVwiLCAqLyBUOjEgfSxcblx0Lyo6OlsqLzB4MDBCQy8qOjpdKi86IHsgLyogbjpcIkJydEVuZFBDRFNSYW5nZVwiLCAqLyBUOi0xIH0sXG5cdC8qOjpbKi8weDAwQkQvKjo6XSovOiB7IC8qIG46XCJCcnRCZWdpblBDREZBdGJsXCIsICovIFQ6MSB9LFxuXHQvKjo6WyovMHgwMEJFLyo6Ol0qLzogeyAvKiBuOlwiQnJ0RW5kUENERkF0YmxcIiwgKi8gVDotMSB9LFxuXHQvKjo6WyovMHgwMEJGLyo6Ol0qLzogeyAvKiBuOlwiQnJ0QmVnaW5QQ0RJUnVuXCIsICovIFQ6MSB9LFxuXHQvKjo6WyovMHgwMEMwLyo6Ol0qLzogeyAvKiBuOlwiQnJ0RW5kUENESVJ1blwiLCAqLyBUOi0xIH0sXG5cdC8qOjpbKi8weDAwQzEvKjo6XSovOiB7IC8qIG46XCJCcnRCZWdpblBpdm90Q2FjaGVSZWNvcmRzXCIsICovIFQ6MSB9LFxuXHQvKjo6WyovMHgwMEMyLyo6Ol0qLzogeyAvKiBuOlwiQnJ0RW5kUGl2b3RDYWNoZVJlY29yZHNcIiwgKi8gVDotMSB9LFxuXHQvKjo6WyovMHgwMEMzLyo6Ol0qLzogeyAvKiBuOlwiQnJ0QmVnaW5QQ0RIaWVyYXJjaGllc1wiLCAqLyBUOjEgfSxcblx0Lyo6OlsqLzB4MDBDNC8qOjpdKi86IHsgLyogbjpcIkJydEVuZFBDREhpZXJhcmNoaWVzXCIsICovIFQ6LTEgfSxcblx0Lyo6OlsqLzB4MDBDNS8qOjpdKi86IHsgLyogbjpcIkJydEJlZ2luUENESGllcmFyY2h5XCIsICovIFQ6MSB9LFxuXHQvKjo6WyovMHgwMEM2Lyo6Ol0qLzogeyAvKiBuOlwiQnJ0RW5kUENESGllcmFyY2h5XCIsICovIFQ6LTEgfSxcblx0Lyo6OlsqLzB4MDBDNy8qOjpdKi86IHsgLyogbjpcIkJydEJlZ2luUENESEZpZWxkc1VzYWdlXCIsICovIFQ6MSB9LFxuXHQvKjo6WyovMHgwMEM4Lyo6Ol0qLzogeyAvKiBuOlwiQnJ0RW5kUENESEZpZWxkc1VzYWdlXCIsICovIFQ6LTEgfSxcblx0Lyo6OlsqLzB4MDBDOS8qOjpdKi86IHsgLyogbjpcIkJydEJlZ2luRXh0Q29ubmVjdGlvblwiLCAqLyBUOjEgfSxcblx0Lyo6OlsqLzB4MDBDQS8qOjpdKi86IHsgLyogbjpcIkJydEVuZEV4dENvbm5lY3Rpb25cIiwgKi8gVDotMSB9LFxuXHQvKjo6WyovMHgwMENCLyo6Ol0qLzogeyAvKiBuOlwiQnJ0QmVnaW5FQ0RiUHJvcHNcIiwgKi8gVDoxIH0sXG5cdC8qOjpbKi8weDAwQ0MvKjo6XSovOiB7IC8qIG46XCJCcnRFbmRFQ0RiUHJvcHNcIiwgKi8gVDotMSB9LFxuXHQvKjo6WyovMHgwMENELyo6Ol0qLzogeyAvKiBuOlwiQnJ0QmVnaW5FQ09sYXBQcm9wc1wiLCAqLyBUOjEgfSxcblx0Lyo6OlsqLzB4MDBDRS8qOjpdKi86IHsgLyogbjpcIkJydEVuZEVDT2xhcFByb3BzXCIsICovIFQ6LTEgfSxcblx0Lyo6OlsqLzB4MDBDRi8qOjpdKi86IHsgLyogbjpcIkJydEJlZ2luUENEU0NvbnNvbFwiLCAqLyBUOjEgfSxcblx0Lyo6OlsqLzB4MDBEMC8qOjpdKi86IHsgLyogbjpcIkJydEVuZFBDRFNDb25zb2xcIiwgKi8gVDotMSB9LFxuXHQvKjo6WyovMHgwMEQxLyo6Ol0qLzogeyAvKiBuOlwiQnJ0QmVnaW5QQ0RTQ1BhZ2VzXCIsICovIFQ6MSB9LFxuXHQvKjo6WyovMHgwMEQyLyo6Ol0qLzogeyAvKiBuOlwiQnJ0RW5kUENEU0NQYWdlc1wiLCAqLyBUOi0xIH0sXG5cdC8qOjpbKi8weDAwRDMvKjo6XSovOiB7IC8qIG46XCJCcnRCZWdpblBDRFNDUGFnZVwiLCAqLyBUOjEgfSxcblx0Lyo6OlsqLzB4MDBENC8qOjpdKi86IHsgLyogbjpcIkJydEVuZFBDRFNDUGFnZVwiLCAqLyBUOi0xIH0sXG5cdC8qOjpbKi8weDAwRDUvKjo6XSovOiB7IC8qIG46XCJCcnRCZWdpblBDRFNDUEl0ZW1cIiwgKi8gVDoxIH0sXG5cdC8qOjpbKi8weDAwRDYvKjo6XSovOiB7IC8qIG46XCJCcnRFbmRQQ0RTQ1BJdGVtXCIsICovIFQ6LTEgfSxcblx0Lyo6OlsqLzB4MDBENy8qOjpdKi86IHsgLyogbjpcIkJydEJlZ2luUENEU0NTZXRzXCIsICovIFQ6MSB9LFxuXHQvKjo6WyovMHgwMEQ4Lyo6Ol0qLzogeyAvKiBuOlwiQnJ0RW5kUENEU0NTZXRzXCIsICovIFQ6LTEgfSxcblx0Lyo6OlsqLzB4MDBEOS8qOjpdKi86IHsgLyogbjpcIkJydEJlZ2luUENEU0NTZXRcIiwgKi8gVDoxIH0sXG5cdC8qOjpbKi8weDAwREEvKjo6XSovOiB7IC8qIG46XCJCcnRFbmRQQ0RTQ1NldFwiLCAqLyBUOi0xIH0sXG5cdC8qOjpbKi8weDAwREIvKjo6XSovOiB7IC8qIG46XCJCcnRCZWdpblBDREZHcm91cFwiLCAqLyBUOjEgfSxcblx0Lyo6OlsqLzB4MDBEQy8qOjpdKi86IHsgLyogbjpcIkJydEVuZFBDREZHcm91cFwiLCAqLyBUOi0xIH0sXG5cdC8qOjpbKi8weDAwREQvKjo6XSovOiB7IC8qIG46XCJCcnRCZWdpblBDREZHSXRlbXNcIiwgKi8gVDoxIH0sXG5cdC8qOjpbKi8weDAwREUvKjo6XSovOiB7IC8qIG46XCJCcnRFbmRQQ0RGR0l0ZW1zXCIsICovIFQ6LTEgfSxcblx0Lyo6OlsqLzB4MDBERi8qOjpdKi86IHsgLyogbjpcIkJydEJlZ2luUENERkdSYW5nZVwiLCAqLyBUOjEgfSxcblx0Lyo6OlsqLzB4MDBFMC8qOjpdKi86IHsgLyogbjpcIkJydEVuZFBDREZHUmFuZ2VcIiwgKi8gVDotMSB9LFxuXHQvKjo6WyovMHgwMEUxLyo6Ol0qLzogeyAvKiBuOlwiQnJ0QmVnaW5QQ0RGR0Rpc2NyZXRlXCIsICovIFQ6MSB9LFxuXHQvKjo6WyovMHgwMEUyLyo6Ol0qLzogeyAvKiBuOlwiQnJ0RW5kUENERkdEaXNjcmV0ZVwiLCAqLyBUOi0xIH0sXG5cdC8qOjpbKi8weDAwRTMvKjo6XSovOiB7IC8qIG46XCJCcnRCZWdpblBDRFNEVHVwbGVDYWNoZVwiLCAqLyBUOjEgfSxcblx0Lyo6OlsqLzB4MDBFNC8qOjpdKi86IHsgLyogbjpcIkJydEVuZFBDRFNEVHVwbGVDYWNoZVwiLCAqLyBUOi0xIH0sXG5cdC8qOjpbKi8weDAwRTUvKjo6XSovOiB7IC8qIG46XCJCcnRCZWdpblBDRFNEVENFbnRyaWVzXCIsICovIFQ6MSB9LFxuXHQvKjo6WyovMHgwMEU2Lyo6Ol0qLzogeyAvKiBuOlwiQnJ0RW5kUENEU0RUQ0VudHJpZXNcIiwgKi8gVDotMSB9LFxuXHQvKjo6WyovMHgwMEU3Lyo6Ol0qLzogeyAvKiBuOlwiQnJ0QmVnaW5QQ0RTRFRDRU1lbWJlcnNcIiwgKi8gVDoxIH0sXG5cdC8qOjpbKi8weDAwRTgvKjo6XSovOiB7IC8qIG46XCJCcnRFbmRQQ0RTRFRDRU1lbWJlcnNcIiwgKi8gVDotMSB9LFxuXHQvKjo6WyovMHgwMEU5Lyo6Ol0qLzogeyAvKiBuOlwiQnJ0QmVnaW5QQ0RTRFRDRU1lbWJlclwiLCAqLyBUOjEgfSxcblx0Lyo6OlsqLzB4MDBFQS8qOjpdKi86IHsgLyogbjpcIkJydEVuZFBDRFNEVENFTWVtYmVyXCIsICovIFQ6LTEgfSxcblx0Lyo6OlsqLzB4MDBFQi8qOjpdKi86IHsgLyogbjpcIkJydEJlZ2luUENEU0RUQ1F1ZXJpZXNcIiwgKi8gVDoxIH0sXG5cdC8qOjpbKi8weDAwRUMvKjo6XSovOiB7IC8qIG46XCJCcnRFbmRQQ0RTRFRDUXVlcmllc1wiLCAqLyBUOi0xIH0sXG5cdC8qOjpbKi8weDAwRUQvKjo6XSovOiB7IC8qIG46XCJCcnRCZWdpblBDRFNEVENRdWVyeVwiLCAqLyBUOjEgfSxcblx0Lyo6OlsqLzB4MDBFRS8qOjpdKi86IHsgLyogbjpcIkJydEVuZFBDRFNEVENRdWVyeVwiLCAqLyBUOi0xIH0sXG5cdC8qOjpbKi8weDAwRUYvKjo6XSovOiB7IC8qIG46XCJCcnRCZWdpblBDRFNEVENTZXRzXCIsICovIFQ6MSB9LFxuXHQvKjo6WyovMHgwMEYwLyo6Ol0qLzogeyAvKiBuOlwiQnJ0RW5kUENEU0RUQ1NldHNcIiwgKi8gVDotMSB9LFxuXHQvKjo6WyovMHgwMEYxLyo6Ol0qLzogeyAvKiBuOlwiQnJ0QmVnaW5QQ0RTRFRDU2V0XCIsICovIFQ6MSB9LFxuXHQvKjo6WyovMHgwMEYyLyo6Ol0qLzogeyAvKiBuOlwiQnJ0RW5kUENEU0RUQ1NldFwiLCAqLyBUOi0xIH0sXG5cdC8qOjpbKi8weDAwRjMvKjo6XSovOiB7IC8qIG46XCJCcnRCZWdpblBDRENhbGNJdGVtc1wiLCAqLyBUOjEgfSxcblx0Lyo6OlsqLzB4MDBGNC8qOjpdKi86IHsgLyogbjpcIkJydEVuZFBDRENhbGNJdGVtc1wiLCAqLyBUOi0xIH0sXG5cdC8qOjpbKi8weDAwRjUvKjo6XSovOiB7IC8qIG46XCJCcnRCZWdpblBDRENhbGNJdGVtXCIsICovIFQ6MSB9LFxuXHQvKjo6WyovMHgwMEY2Lyo6Ol0qLzogeyAvKiBuOlwiQnJ0RW5kUENEQ2FsY0l0ZW1cIiwgKi8gVDotMSB9LFxuXHQvKjo6WyovMHgwMEY3Lyo6Ol0qLzogeyAvKiBuOlwiQnJ0QmVnaW5QUnVsZVwiLCAqLyBUOjEgfSxcblx0Lyo6OlsqLzB4MDBGOC8qOjpdKi86IHsgLyogbjpcIkJydEVuZFBSdWxlXCIsICovIFQ6LTEgfSxcblx0Lyo6OlsqLzB4MDBGOS8qOjpdKi86IHsgLyogbjpcIkJydEJlZ2luUFJGaWx0ZXJzXCIsICovIFQ6MSB9LFxuXHQvKjo6WyovMHgwMEZBLyo6Ol0qLzogeyAvKiBuOlwiQnJ0RW5kUFJGaWx0ZXJzXCIsICovIFQ6LTEgfSxcblx0Lyo6OlsqLzB4MDBGQi8qOjpdKi86IHsgLyogbjpcIkJydEJlZ2luUFJGaWx0ZXJcIiwgKi8gVDoxIH0sXG5cdC8qOjpbKi8weDAwRkMvKjo6XSovOiB7IC8qIG46XCJCcnRFbmRQUkZpbHRlclwiLCAqLyBUOi0xIH0sXG5cdC8qOjpbKi8weDAwRkQvKjo6XSovOiB7IC8qIG46XCJCcnRCZWdpblBOYW1lc1wiLCAqLyBUOjEgfSxcblx0Lyo6OlsqLzB4MDBGRS8qOjpdKi86IHsgLyogbjpcIkJydEVuZFBOYW1lc1wiLCAqLyBUOi0xIH0sXG5cdC8qOjpbKi8weDAwRkYvKjo6XSovOiB7IC8qIG46XCJCcnRCZWdpblBOYW1lXCIsICovIFQ6MSB9LFxuXHQvKjo6WyovMHgwMTAwLyo6Ol0qLzogeyAvKiBuOlwiQnJ0RW5kUE5hbWVcIiwgKi8gVDotMSB9LFxuXHQvKjo6WyovMHgwMTAxLyo6Ol0qLzogeyAvKiBuOlwiQnJ0QmVnaW5QTlBhaXJzXCIsICovIFQ6MSB9LFxuXHQvKjo6WyovMHgwMTAyLyo6Ol0qLzogeyAvKiBuOlwiQnJ0RW5kUE5QYWlyc1wiLCAqLyBUOi0xIH0sXG5cdC8qOjpbKi8weDAxMDMvKjo6XSovOiB7IC8qIG46XCJCcnRCZWdpblBOUGFpclwiLCAqLyBUOjEgfSxcblx0Lyo6OlsqLzB4MDEwNC8qOjpdKi86IHsgLyogbjpcIkJydEVuZFBOUGFpclwiLCAqLyBUOi0xIH0sXG5cdC8qOjpbKi8weDAxMDUvKjo6XSovOiB7IC8qIG46XCJCcnRCZWdpbkVDV2ViUHJvcHNcIiwgKi8gVDoxIH0sXG5cdC8qOjpbKi8weDAxMDYvKjo6XSovOiB7IC8qIG46XCJCcnRFbmRFQ1dlYlByb3BzXCIsICovIFQ6LTEgfSxcblx0Lyo6OlsqLzB4MDEwNy8qOjpdKi86IHsgLyogbjpcIkJydEJlZ2luRWNXcFRhYmxlc1wiLCAqLyBUOjEgfSxcblx0Lyo6OlsqLzB4MDEwOC8qOjpdKi86IHsgLyogbjpcIkJydEVuZEVDV1BUYWJsZXNcIiwgKi8gVDotMSB9LFxuXHQvKjo6WyovMHgwMTA5Lyo6Ol0qLzogeyAvKiBuOlwiQnJ0QmVnaW5FQ1BhcmFtc1wiLCAqLyBUOjEgfSxcblx0Lyo6OlsqLzB4MDEwQS8qOjpdKi86IHsgLyogbjpcIkJydEVuZEVDUGFyYW1zXCIsICovIFQ6LTEgfSxcblx0Lyo6OlsqLzB4MDEwQi8qOjpdKi86IHsgLyogbjpcIkJydEJlZ2luRUNQYXJhbVwiLCAqLyBUOjEgfSxcblx0Lyo6OlsqLzB4MDEwQy8qOjpdKi86IHsgLyogbjpcIkJydEVuZEVDUGFyYW1cIiwgKi8gVDotMSB9LFxuXHQvKjo6WyovMHgwMTBELyo6Ol0qLzogeyAvKiBuOlwiQnJ0QmVnaW5QQ0RLUElzXCIsICovIFQ6MSB9LFxuXHQvKjo6WyovMHgwMTBFLyo6Ol0qLzogeyAvKiBuOlwiQnJ0RW5kUENES1BJc1wiLCAqLyBUOi0xIH0sXG5cdC8qOjpbKi8weDAxMEYvKjo6XSovOiB7IC8qIG46XCJCcnRCZWdpblBDREtQSVwiLCAqLyBUOjEgfSxcblx0Lyo6OlsqLzB4MDExMC8qOjpdKi86IHsgLyogbjpcIkJydEVuZFBDREtQSVwiLCAqLyBUOi0xIH0sXG5cdC8qOjpbKi8weDAxMTEvKjo6XSovOiB7IC8qIG46XCJCcnRCZWdpbkRpbXNcIiwgKi8gVDoxIH0sXG5cdC8qOjpbKi8weDAxMTIvKjo6XSovOiB7IC8qIG46XCJCcnRFbmREaW1zXCIsICovIFQ6LTEgfSxcblx0Lyo6OlsqLzB4MDExMy8qOjpdKi86IHsgLyogbjpcIkJydEJlZ2luRGltXCIsICovIFQ6MSB9LFxuXHQvKjo6WyovMHgwMTE0Lyo6Ol0qLzogeyAvKiBuOlwiQnJ0RW5kRGltXCIsICovIFQ6LTEgfSxcblx0Lyo6OlsqLzB4MDExNS8qOjpdKi86IHsgLyogbjpcIkJydEluZGV4UGFydEVuZFwiICovIH0sXG5cdC8qOjpbKi8weDAxMTYvKjo6XSovOiB7IC8qIG46XCJCcnRCZWdpblN0eWxlU2hlZXRcIiwgKi8gVDoxIH0sXG5cdC8qOjpbKi8weDAxMTcvKjo6XSovOiB7IC8qIG46XCJCcnRFbmRTdHlsZVNoZWV0XCIsICovIFQ6LTEgfSxcblx0Lyo6OlsqLzB4MDExOC8qOjpdKi86IHsgLyogbjpcIkJydEJlZ2luU1hWaWV3XCIsICovIFQ6MSB9LFxuXHQvKjo6WyovMHgwMTE5Lyo6Ol0qLzogeyAvKiBuOlwiQnJ0RW5kU1hWSVwiLCAqLyBUOi0xIH0sXG5cdC8qOjpbKi8weDAxMUEvKjo6XSovOiB7IC8qIG46XCJCcnRCZWdpblNYVklcIiwgKi8gVDoxIH0sXG5cdC8qOjpbKi8weDAxMUIvKjo6XSovOiB7IC8qIG46XCJCcnRCZWdpblNYVklzXCIsICovIFQ6MSB9LFxuXHQvKjo6WyovMHgwMTFDLyo6Ol0qLzogeyAvKiBuOlwiQnJ0RW5kU1hWSXNcIiwgKi8gVDotMSB9LFxuXHQvKjo6WyovMHgwMTFELyo6Ol0qLzogeyAvKiBuOlwiQnJ0QmVnaW5TWFZEXCIsICovIFQ6MSB9LFxuXHQvKjo6WyovMHgwMTFFLyo6Ol0qLzogeyAvKiBuOlwiQnJ0RW5kU1hWRFwiLCAqLyBUOi0xIH0sXG5cdC8qOjpbKi8weDAxMUYvKjo6XSovOiB7IC8qIG46XCJCcnRCZWdpblNYVkRzXCIsICovIFQ6MSB9LFxuXHQvKjo6WyovMHgwMTIwLyo6Ol0qLzogeyAvKiBuOlwiQnJ0RW5kU1hWRHNcIiwgKi8gVDotMSB9LFxuXHQvKjo6WyovMHgwMTIxLyo6Ol0qLzogeyAvKiBuOlwiQnJ0QmVnaW5TWFBJXCIsICovIFQ6MSB9LFxuXHQvKjo6WyovMHgwMTIyLyo6Ol0qLzogeyAvKiBuOlwiQnJ0RW5kU1hQSVwiLCAqLyBUOi0xIH0sXG5cdC8qOjpbKi8weDAxMjMvKjo6XSovOiB7IC8qIG46XCJCcnRCZWdpblNYUElzXCIsICovIFQ6MSB9LFxuXHQvKjo6WyovMHgwMTI0Lyo6Ol0qLzogeyAvKiBuOlwiQnJ0RW5kU1hQSXNcIiwgKi8gVDotMSB9LFxuXHQvKjo6WyovMHgwMTI1Lyo6Ol0qLzogeyAvKiBuOlwiQnJ0QmVnaW5TWERJXCIsICovIFQ6MSB9LFxuXHQvKjo6WyovMHgwMTI2Lyo6Ol0qLzogeyAvKiBuOlwiQnJ0RW5kU1hESVwiLCAqLyBUOi0xIH0sXG5cdC8qOjpbKi8weDAxMjcvKjo6XSovOiB7IC8qIG46XCJCcnRCZWdpblNYRElzXCIsICovIFQ6MSB9LFxuXHQvKjo6WyovMHgwMTI4Lyo6Ol0qLzogeyAvKiBuOlwiQnJ0RW5kU1hESXNcIiwgKi8gVDotMSB9LFxuXHQvKjo6WyovMHgwMTI5Lyo6Ol0qLzogeyAvKiBuOlwiQnJ0QmVnaW5TWExJXCIsICovIFQ6MSB9LFxuXHQvKjo6WyovMHgwMTJBLyo6Ol0qLzogeyAvKiBuOlwiQnJ0RW5kU1hMSVwiLCAqLyBUOi0xIH0sXG5cdC8qOjpbKi8weDAxMkIvKjo6XSovOiB7IC8qIG46XCJCcnRCZWdpblNYTElSd3NcIiwgKi8gVDoxIH0sXG5cdC8qOjpbKi8weDAxMkMvKjo6XSovOiB7IC8qIG46XCJCcnRFbmRTWExJUndzXCIsICovIFQ6LTEgfSxcblx0Lyo6OlsqLzB4MDEyRC8qOjpdKi86IHsgLyogbjpcIkJydEJlZ2luU1hMSUNvbHNcIiwgKi8gVDoxIH0sXG5cdC8qOjpbKi8weDAxMkUvKjo6XSovOiB7IC8qIG46XCJCcnRFbmRTWExJQ29sc1wiLCAqLyBUOi0xIH0sXG5cdC8qOjpbKi8weDAxMkYvKjo6XSovOiB7IC8qIG46XCJCcnRCZWdpblNYRm9ybWF0XCIsICovIFQ6MSB9LFxuXHQvKjo6WyovMHgwMTMwLyo6Ol0qLzogeyAvKiBuOlwiQnJ0RW5kU1hGb3JtYXRcIiwgKi8gVDotMSB9LFxuXHQvKjo6WyovMHgwMTMxLyo6Ol0qLzogeyAvKiBuOlwiQnJ0QmVnaW5TWEZvcm1hdHNcIiwgKi8gVDoxIH0sXG5cdC8qOjpbKi8weDAxMzIvKjo6XSovOiB7IC8qIG46XCJCcnRFbmRTeEZvcm1hdHNcIiwgKi8gVDotMSB9LFxuXHQvKjo6WyovMHgwMTMzLyo6Ol0qLzogeyAvKiBuOlwiQnJ0QmVnaW5TeFNlbGVjdFwiLCAqLyBUOjEgfSxcblx0Lyo6OlsqLzB4MDEzNC8qOjpdKi86IHsgLyogbjpcIkJydEVuZFN4U2VsZWN0XCIsICovIFQ6LTEgfSxcblx0Lyo6OlsqLzB4MDEzNS8qOjpdKi86IHsgLyogbjpcIkJydEJlZ2luSVNYVkRSd3NcIiwgKi8gVDoxIH0sXG5cdC8qOjpbKi8weDAxMzYvKjo6XSovOiB7IC8qIG46XCJCcnRFbmRJU1hWRFJ3c1wiLCAqLyBUOi0xIH0sXG5cdC8qOjpbKi8weDAxMzcvKjo6XSovOiB7IC8qIG46XCJCcnRCZWdpbklTWFZEQ29sc1wiLCAqLyBUOjEgfSxcblx0Lyo6OlsqLzB4MDEzOC8qOjpdKi86IHsgLyogbjpcIkJydEVuZElTWFZEQ29sc1wiLCAqLyBUOi0xIH0sXG5cdC8qOjpbKi8weDAxMzkvKjo6XSovOiB7IC8qIG46XCJCcnRFbmRTWExvY2F0aW9uXCIsICovIFQ6LTEgfSxcblx0Lyo6OlsqLzB4MDEzQS8qOjpdKi86IHsgLyogbjpcIkJydEJlZ2luU1hMb2NhdGlvblwiLCAqLyBUOjEgfSxcblx0Lyo6OlsqLzB4MDEzQi8qOjpdKi86IHsgLyogbjpcIkJydEVuZFNYVmlld1wiLCAqLyBUOi0xIH0sXG5cdC8qOjpbKi8weDAxM0MvKjo6XSovOiB7IC8qIG46XCJCcnRCZWdpblNYVEhzXCIsICovIFQ6MSB9LFxuXHQvKjo6WyovMHgwMTNELyo6Ol0qLzogeyAvKiBuOlwiQnJ0RW5kU1hUSHNcIiwgKi8gVDotMSB9LFxuXHQvKjo6WyovMHgwMTNFLyo6Ol0qLzogeyAvKiBuOlwiQnJ0QmVnaW5TWFRIXCIsICovIFQ6MSB9LFxuXHQvKjo6WyovMHgwMTNGLyo6Ol0qLzogeyAvKiBuOlwiQnJ0RW5kU1hUSFwiLCAqLyBUOi0xIH0sXG5cdC8qOjpbKi8weDAxNDAvKjo6XSovOiB7IC8qIG46XCJCcnRCZWdpbklTWFRIUndzXCIsICovIFQ6MSB9LFxuXHQvKjo6WyovMHgwMTQxLyo6Ol0qLzogeyAvKiBuOlwiQnJ0RW5kSVNYVEhSd3NcIiwgKi8gVDotMSB9LFxuXHQvKjo6WyovMHgwMTQyLyo6Ol0qLzogeyAvKiBuOlwiQnJ0QmVnaW5JU1hUSENvbHNcIiwgKi8gVDoxIH0sXG5cdC8qOjpbKi8weDAxNDMvKjo6XSovOiB7IC8qIG46XCJCcnRFbmRJU1hUSENvbHNcIiwgKi8gVDotMSB9LFxuXHQvKjo6WyovMHgwMTQ0Lyo6Ol0qLzogeyAvKiBuOlwiQnJ0QmVnaW5TWFRETVBTXCIsICovIFQ6MSB9LFxuXHQvKjo6WyovMHgwMTQ1Lyo6Ol0qLzogeyAvKiBuOlwiQnJ0RW5kU1hURE1Qc1wiLCAqLyBUOi0xIH0sXG5cdC8qOjpbKi8weDAxNDYvKjo6XSovOiB7IC8qIG46XCJCcnRCZWdpblNYVERNUFwiLCAqLyBUOjEgfSxcblx0Lyo6OlsqLzB4MDE0Ny8qOjpdKi86IHsgLyogbjpcIkJydEVuZFNYVERNUFwiLCAqLyBUOi0xIH0sXG5cdC8qOjpbKi8weDAxNDgvKjo6XSovOiB7IC8qIG46XCJCcnRCZWdpblNYVEhJdGVtc1wiLCAqLyBUOjEgfSxcblx0Lyo6OlsqLzB4MDE0OS8qOjpdKi86IHsgLyogbjpcIkJydEVuZFNYVEhJdGVtc1wiLCAqLyBUOi0xIH0sXG5cdC8qOjpbKi8weDAxNEEvKjo6XSovOiB7IC8qIG46XCJCcnRCZWdpblNYVEhJdGVtXCIsICovIFQ6MSB9LFxuXHQvKjo6WyovMHgwMTRCLyo6Ol0qLzogeyAvKiBuOlwiQnJ0RW5kU1hUSEl0ZW1cIiwgKi8gVDotMSB9LFxuXHQvKjo6WyovMHgwMTRDLyo6Ol0qLzogeyAvKiBuOlwiQnJ0QmVnaW5NZXRhZGF0YVwiLCAqLyBUOjEgfSxcblx0Lyo6OlsqLzB4MDE0RC8qOjpdKi86IHsgLyogbjpcIkJydEVuZE1ldGFkYXRhXCIsICovIFQ6LTEgfSxcblx0Lyo6OlsqLzB4MDE0RS8qOjpdKi86IHsgLyogbjpcIkJydEJlZ2luRXNtZHRpbmZvXCIsICovIFQ6MSB9LFxuXHQvKjo6WyovMHgwMTRGLyo6Ol0qLzogeyAvKiBuOlwiQnJ0TWR0aW5mb1wiLCAqLyBmOnBhcnNlX0JydE1kdGluZm8gfSxcblx0Lyo6OlsqLzB4MDE1MC8qOjpdKi86IHsgLyogbjpcIkJydEVuZEVzbWR0aW5mb1wiLCAqLyBUOi0xIH0sXG5cdC8qOjpbKi8weDAxNTEvKjo6XSovOiB7IC8qIG46XCJCcnRCZWdpbkVzbWRiXCIsICovIGY6cGFyc2VfQnJ0QmVnaW5Fc21kYiwgVDoxIH0sXG5cdC8qOjpbKi8weDAxNTIvKjo6XSovOiB7IC8qIG46XCJCcnRFbmRFc21kYlwiLCAqLyBUOi0xIH0sXG5cdC8qOjpbKi8weDAxNTMvKjo6XSovOiB7IC8qIG46XCJCcnRCZWdpbkVzZm1kXCIsICovIFQ6MSB9LFxuXHQvKjo6WyovMHgwMTU0Lyo6Ol0qLzogeyAvKiBuOlwiQnJ0RW5kRXNmbWRcIiwgKi8gVDotMSB9LFxuXHQvKjo6WyovMHgwMTU1Lyo6Ol0qLzogeyAvKiBuOlwiQnJ0QmVnaW5TaW5nbGVDZWxsc1wiLCAqLyBUOjEgfSxcblx0Lyo6OlsqLzB4MDE1Ni8qOjpdKi86IHsgLyogbjpcIkJydEVuZFNpbmdsZUNlbGxzXCIsICovIFQ6LTEgfSxcblx0Lyo6OlsqLzB4MDE1Ny8qOjpdKi86IHsgLyogbjpcIkJydEJlZ2luTGlzdFwiLCAqLyBUOjEgfSxcblx0Lyo6OlsqLzB4MDE1OC8qOjpdKi86IHsgLyogbjpcIkJydEVuZExpc3RcIiwgKi8gVDotMSB9LFxuXHQvKjo6WyovMHgwMTU5Lyo6Ol0qLzogeyAvKiBuOlwiQnJ0QmVnaW5MaXN0Q29sc1wiLCAqLyBUOjEgfSxcblx0Lyo6OlsqLzB4MDE1QS8qOjpdKi86IHsgLyogbjpcIkJydEVuZExpc3RDb2xzXCIsICovIFQ6LTEgfSxcblx0Lyo6OlsqLzB4MDE1Qi8qOjpdKi86IHsgLyogbjpcIkJydEJlZ2luTGlzdENvbFwiLCAqLyBUOjEgfSxcblx0Lyo6OlsqLzB4MDE1Qy8qOjpdKi86IHsgLyogbjpcIkJydEVuZExpc3RDb2xcIiwgKi8gVDotMSB9LFxuXHQvKjo6WyovMHgwMTVELyo6Ol0qLzogeyAvKiBuOlwiQnJ0QmVnaW5MaXN0WG1sQ1ByXCIsICovIFQ6MSB9LFxuXHQvKjo6WyovMHgwMTVFLyo6Ol0qLzogeyAvKiBuOlwiQnJ0RW5kTGlzdFhtbENQclwiLCAqLyBUOi0xIH0sXG5cdC8qOjpbKi8weDAxNUYvKjo6XSovOiB7IC8qIG46XCJCcnRMaXN0Q0NGbWxhXCIgKi8gfSxcblx0Lyo6OlsqLzB4MDE2MC8qOjpdKi86IHsgLyogbjpcIkJydExpc3RUckZtbGFcIiAqLyB9LFxuXHQvKjo6WyovMHgwMTYxLyo6Ol0qLzogeyAvKiBuOlwiQnJ0QmVnaW5FeHRlcm5hbHNcIiwgKi8gVDoxIH0sXG5cdC8qOjpbKi8weDAxNjIvKjo6XSovOiB7IC8qIG46XCJCcnRFbmRFeHRlcm5hbHNcIiwgKi8gVDotMSB9LFxuXHQvKjo6WyovMHgwMTYzLyo6Ol0qLzogeyAvKiBuOlwiQnJ0U3VwQm9va1NyY1wiLCAqLyBmOnBhcnNlX1JlbElEfSxcblx0Lyo6OlsqLzB4MDE2NS8qOjpdKi86IHsgLyogbjpcIkJydFN1cFNlbGZcIiAqLyB9LFxuXHQvKjo6WyovMHgwMTY2Lyo6Ol0qLzogeyAvKiBuOlwiQnJ0U3VwU2FtZVwiICovIH0sXG5cdC8qOjpbKi8weDAxNjcvKjo6XSovOiB7IC8qIG46XCJCcnRTdXBUYWJzXCIgKi8gfSxcblx0Lyo6OlsqLzB4MDE2OC8qOjpdKi86IHsgLyogbjpcIkJydEJlZ2luU3VwQm9va1wiLCAqLyBUOjEgfSxcblx0Lyo6OlsqLzB4MDE2OS8qOjpdKi86IHsgLyogbjpcIkJydFBsYWNlaG9sZGVyTmFtZVwiICovIH0sXG5cdC8qOjpbKi8weDAxNkEvKjo6XSovOiB7IC8qIG46XCJCcnRFeHRlcm5TaGVldFwiLCAqLyBmOnBhcnNlX0V4dGVyblNoZWV0IH0sXG5cdC8qOjpbKi8weDAxNkIvKjo6XSovOiB7IC8qIG46XCJCcnRFeHRlcm5UYWJsZVN0YXJ0XCIgKi8gfSxcblx0Lyo6OlsqLzB4MDE2Qy8qOjpdKi86IHsgLyogbjpcIkJydEV4dGVyblRhYmxlRW5kXCIgKi8gfSxcblx0Lyo6OlsqLzB4MDE2RS8qOjpdKi86IHsgLyogbjpcIkJydEV4dGVyblJvd0hkclwiICovIH0sXG5cdC8qOjpbKi8weDAxNkYvKjo6XSovOiB7IC8qIG46XCJCcnRFeHRlcm5DZWxsQmxhbmtcIiAqLyB9LFxuXHQvKjo6WyovMHgwMTcwLyo6Ol0qLzogeyAvKiBuOlwiQnJ0RXh0ZXJuQ2VsbFJlYWxcIiAqLyB9LFxuXHQvKjo6WyovMHgwMTcxLyo6Ol0qLzogeyAvKiBuOlwiQnJ0RXh0ZXJuQ2VsbEJvb2xcIiAqLyB9LFxuXHQvKjo6WyovMHgwMTcyLyo6Ol0qLzogeyAvKiBuOlwiQnJ0RXh0ZXJuQ2VsbEVycm9yXCIgKi8gfSxcblx0Lyo6OlsqLzB4MDE3My8qOjpdKi86IHsgLyogbjpcIkJydEV4dGVybkNlbGxTdHJpbmdcIiAqLyB9LFxuXHQvKjo6WyovMHgwMTc0Lyo6Ol0qLzogeyAvKiBuOlwiQnJ0QmVnaW5Fc21keFwiLCAqLyBUOjEgfSxcblx0Lyo6OlsqLzB4MDE3NS8qOjpdKi86IHsgLyogbjpcIkJydEVuZEVzbWR4XCIsICovIFQ6LTEgfSxcblx0Lyo6OlsqLzB4MDE3Ni8qOjpdKi86IHsgLyogbjpcIkJydEJlZ2luTWR4U2V0XCIsICovIFQ6MSB9LFxuXHQvKjo6WyovMHgwMTc3Lyo6Ol0qLzogeyAvKiBuOlwiQnJ0RW5kTWR4U2V0XCIsICovIFQ6LTEgfSxcblx0Lyo6OlsqLzB4MDE3OC8qOjpdKi86IHsgLyogbjpcIkJydEJlZ2luTWR4TWJyUHJvcFwiLCAqLyBUOjEgfSxcblx0Lyo6OlsqLzB4MDE3OS8qOjpdKi86IHsgLyogbjpcIkJydEVuZE1keE1iclByb3BcIiwgKi8gVDotMSB9LFxuXHQvKjo6WyovMHgwMTdBLyo6Ol0qLzogeyAvKiBuOlwiQnJ0QmVnaW5NZHhLUElcIiwgKi8gVDoxIH0sXG5cdC8qOjpbKi8weDAxN0IvKjo6XSovOiB7IC8qIG46XCJCcnRFbmRNZHhLUElcIiwgKi8gVDotMSB9LFxuXHQvKjo6WyovMHgwMTdDLyo6Ol0qLzogeyAvKiBuOlwiQnJ0QmVnaW5Fc3N0clwiLCAqLyBUOjEgfSxcblx0Lyo6OlsqLzB4MDE3RC8qOjpdKi86IHsgLyogbjpcIkJydEVuZEVzc3RyXCIsICovIFQ6LTEgfSxcblx0Lyo6OlsqLzB4MDE3RS8qOjpdKi86IHsgLyogbjpcIkJydEJlZ2luUFJGSXRlbVwiLCAqLyBUOjEgfSxcblx0Lyo6OlsqLzB4MDE3Ri8qOjpdKi86IHsgLyogbjpcIkJydEVuZFBSRkl0ZW1cIiwgKi8gVDotMSB9LFxuXHQvKjo6WyovMHgwMTgwLyo6Ol0qLzogeyAvKiBuOlwiQnJ0QmVnaW5QaXZvdENhY2hlSURzXCIsICovIFQ6MSB9LFxuXHQvKjo6WyovMHgwMTgxLyo6Ol0qLzogeyAvKiBuOlwiQnJ0RW5kUGl2b3RDYWNoZUlEc1wiLCAqLyBUOi0xIH0sXG5cdC8qOjpbKi8weDAxODIvKjo6XSovOiB7IC8qIG46XCJCcnRCZWdpblBpdm90Q2FjaGVJRFwiLCAqLyBUOjEgfSxcblx0Lyo6OlsqLzB4MDE4My8qOjpdKi86IHsgLyogbjpcIkJydEVuZFBpdm90Q2FjaGVJRFwiLCAqLyBUOi0xIH0sXG5cdC8qOjpbKi8weDAxODQvKjo6XSovOiB7IC8qIG46XCJCcnRCZWdpbklTWFZJc1wiLCAqLyBUOjEgfSxcblx0Lyo6OlsqLzB4MDE4NS8qOjpdKi86IHsgLyogbjpcIkJydEVuZElTWFZJc1wiLCAqLyBUOi0xIH0sXG5cdC8qOjpbKi8weDAxODYvKjo6XSovOiB7IC8qIG46XCJCcnRCZWdpbkNvbEluZm9zXCIsICovIFQ6MSB9LFxuXHQvKjo6WyovMHgwMTg3Lyo6Ol0qLzogeyAvKiBuOlwiQnJ0RW5kQ29sSW5mb3NcIiwgKi8gVDotMSB9LFxuXHQvKjo6WyovMHgwMTg4Lyo6Ol0qLzogeyAvKiBuOlwiQnJ0QmVnaW5Sd0Jya1wiLCAqLyBUOjEgfSxcblx0Lyo6OlsqLzB4MDE4OS8qOjpdKi86IHsgLyogbjpcIkJydEVuZFJ3QnJrXCIsICovIFQ6LTEgfSxcblx0Lyo6OlsqLzB4MDE4QS8qOjpdKi86IHsgLyogbjpcIkJydEJlZ2luQ29sQnJrXCIsICovIFQ6MSB9LFxuXHQvKjo6WyovMHgwMThCLyo6Ol0qLzogeyAvKiBuOlwiQnJ0RW5kQ29sQnJrXCIsICovIFQ6LTEgfSxcblx0Lyo6OlsqLzB4MDE4Qy8qOjpdKi86IHsgLyogbjpcIkJydEJya1wiICovIH0sXG5cdC8qOjpbKi8weDAxOEQvKjo6XSovOiB7IC8qIG46XCJCcnRVc2VyQm9va1ZpZXdcIiAqLyB9LFxuXHQvKjo6WyovMHgwMThFLyo6Ol0qLzogeyAvKiBuOlwiQnJ0SW5mb1wiICovIH0sXG5cdC8qOjpbKi8weDAxOEYvKjo6XSovOiB7IC8qIG46XCJCcnRDVXNyXCIgKi8gfSxcblx0Lyo6OlsqLzB4MDE5MC8qOjpdKi86IHsgLyogbjpcIkJydFVzclwiICovIH0sXG5cdC8qOjpbKi8weDAxOTEvKjo6XSovOiB7IC8qIG46XCJCcnRCZWdpblVzZXJzXCIsICovIFQ6MSB9LFxuXHQvKjo6WyovMHgwMTkzLyo6Ol0qLzogeyAvKiBuOlwiQnJ0RU9GXCIgKi8gfSxcblx0Lyo6OlsqLzB4MDE5NC8qOjpdKi86IHsgLyogbjpcIkJydFVDUlwiICovIH0sXG5cdC8qOjpbKi8weDAxOTUvKjo6XSovOiB7IC8qIG46XCJCcnRSUkluc0RlbFwiICovIH0sXG5cdC8qOjpbKi8weDAxOTYvKjo6XSovOiB7IC8qIG46XCJCcnRSUkVuZEluc0RlbFwiICovIH0sXG5cdC8qOjpbKi8weDAxOTcvKjo6XSovOiB7IC8qIG46XCJCcnRSUk1vdmVcIiAqLyB9LFxuXHQvKjo6WyovMHgwMTk4Lyo6Ol0qLzogeyAvKiBuOlwiQnJ0UlJFbmRNb3ZlXCIgKi8gfSxcblx0Lyo6OlsqLzB4MDE5OS8qOjpdKi86IHsgLyogbjpcIkJydFJSQ2hnQ2VsbFwiICovIH0sXG5cdC8qOjpbKi8weDAxOUEvKjo6XSovOiB7IC8qIG46XCJCcnRSUkVuZENoZ0NlbGxcIiAqLyB9LFxuXHQvKjo6WyovMHgwMTlCLyo6Ol0qLzogeyAvKiBuOlwiQnJ0UlJIZWFkZXJcIiAqLyB9LFxuXHQvKjo6WyovMHgwMTlDLyo6Ol0qLzogeyAvKiBuOlwiQnJ0UlJVc2VyVmlld1wiICovIH0sXG5cdC8qOjpbKi8weDAxOUQvKjo6XSovOiB7IC8qIG46XCJCcnRSUlJlblNoZWV0XCIgKi8gfSxcblx0Lyo6OlsqLzB4MDE5RS8qOjpdKi86IHsgLyogbjpcIkJydFJSSW5zZXJ0U2hcIiAqLyB9LFxuXHQvKjo6WyovMHgwMTlGLyo6Ol0qLzogeyAvKiBuOlwiQnJ0UlJEZWZOYW1lXCIgKi8gfSxcblx0Lyo6OlsqLzB4MDFBMC8qOjpdKi86IHsgLyogbjpcIkJydFJSTm90ZVwiICovIH0sXG5cdC8qOjpbKi8weDAxQTEvKjo6XSovOiB7IC8qIG46XCJCcnRSUkNvbmZsaWN0XCIgKi8gfSxcblx0Lyo6OlsqLzB4MDFBMi8qOjpdKi86IHsgLyogbjpcIkJydFJSVFFTSUZcIiAqLyB9LFxuXHQvKjo6WyovMHgwMUEzLyo6Ol0qLzogeyAvKiBuOlwiQnJ0UlJGb3JtYXRcIiAqLyB9LFxuXHQvKjo6WyovMHgwMUE0Lyo6Ol0qLzogeyAvKiBuOlwiQnJ0UlJFbmRGb3JtYXRcIiAqLyB9LFxuXHQvKjo6WyovMHgwMUE1Lyo6Ol0qLzogeyAvKiBuOlwiQnJ0UlJBdXRvRm10XCIgKi8gfSxcblx0Lyo6OlsqLzB4MDFBNi8qOjpdKi86IHsgLyogbjpcIkJydEJlZ2luVXNlclNoVmlld3NcIiwgKi8gVDoxIH0sXG5cdC8qOjpbKi8weDAxQTcvKjo6XSovOiB7IC8qIG46XCJCcnRCZWdpblVzZXJTaFZpZXdcIiwgKi8gVDoxIH0sXG5cdC8qOjpbKi8weDAxQTgvKjo6XSovOiB7IC8qIG46XCJCcnRFbmRVc2VyU2hWaWV3XCIsICovIFQ6LTEgfSxcblx0Lyo6OlsqLzB4MDFBOS8qOjpdKi86IHsgLyogbjpcIkJydEVuZFVzZXJTaFZpZXdzXCIsICovIFQ6LTEgfSxcblx0Lyo6OlsqLzB4MDFBQS8qOjpdKi86IHsgLyogbjpcIkJydEFyckZtbGFcIiwgKi8gZjpwYXJzZV9CcnRBcnJGbWxhIH0sXG5cdC8qOjpbKi8weDAxQUIvKjo6XSovOiB7IC8qIG46XCJCcnRTaHJGbWxhXCIsICovIGY6cGFyc2VfQnJ0U2hyRm1sYSB9LFxuXHQvKjo6WyovMHgwMUFDLyo6Ol0qLzogeyAvKiBuOlwiQnJ0VGFibGVcIiAqLyB9LFxuXHQvKjo6WyovMHgwMUFELyo6Ol0qLzogeyAvKiBuOlwiQnJ0QmVnaW5FeHRDb25uZWN0aW9uc1wiLCAqLyBUOjEgfSxcblx0Lyo6OlsqLzB4MDFBRS8qOjpdKi86IHsgLyogbjpcIkJydEVuZEV4dENvbm5lY3Rpb25zXCIsICovIFQ6LTEgfSxcblx0Lyo6OlsqLzB4MDFBRi8qOjpdKi86IHsgLyogbjpcIkJydEJlZ2luUENEQ2FsY01lbXNcIiwgKi8gVDoxIH0sXG5cdC8qOjpbKi8weDAxQjAvKjo6XSovOiB7IC8qIG46XCJCcnRFbmRQQ0RDYWxjTWVtc1wiLCAqLyBUOi0xIH0sXG5cdC8qOjpbKi8weDAxQjEvKjo6XSovOiB7IC8qIG46XCJCcnRCZWdpblBDRENhbGNNZW1cIiwgKi8gVDoxIH0sXG5cdC8qOjpbKi8weDAxQjIvKjo6XSovOiB7IC8qIG46XCJCcnRFbmRQQ0RDYWxjTWVtXCIsICovIFQ6LTEgfSxcblx0Lyo6OlsqLzB4MDFCMy8qOjpdKi86IHsgLyogbjpcIkJydEJlZ2luUENESEdMZXZlbHNcIiwgKi8gVDoxIH0sXG5cdC8qOjpbKi8weDAxQjQvKjo6XSovOiB7IC8qIG46XCJCcnRFbmRQQ0RIR0xldmVsc1wiLCAqLyBUOi0xIH0sXG5cdC8qOjpbKi8weDAxQjUvKjo6XSovOiB7IC8qIG46XCJCcnRCZWdpblBDREhHTGV2ZWxcIiwgKi8gVDoxIH0sXG5cdC8qOjpbKi8weDAxQjYvKjo6XSovOiB7IC8qIG46XCJCcnRFbmRQQ0RIR0xldmVsXCIsICovIFQ6LTEgfSxcblx0Lyo6OlsqLzB4MDFCNy8qOjpdKi86IHsgLyogbjpcIkJydEJlZ2luUENESEdMR3JvdXBzXCIsICovIFQ6MSB9LFxuXHQvKjo6WyovMHgwMUI4Lyo6Ol0qLzogeyAvKiBuOlwiQnJ0RW5kUENESEdMR3JvdXBzXCIsICovIFQ6LTEgfSxcblx0Lyo6OlsqLzB4MDFCOS8qOjpdKi86IHsgLyogbjpcIkJydEJlZ2luUENESEdMR3JvdXBcIiwgKi8gVDoxIH0sXG5cdC8qOjpbKi8weDAxQkEvKjo6XSovOiB7IC8qIG46XCJCcnRFbmRQQ0RIR0xHcm91cFwiLCAqLyBUOi0xIH0sXG5cdC8qOjpbKi8weDAxQkIvKjo6XSovOiB7IC8qIG46XCJCcnRCZWdpblBDREhHTEdNZW1iZXJzXCIsICovIFQ6MSB9LFxuXHQvKjo6WyovMHgwMUJDLyo6Ol0qLzogeyAvKiBuOlwiQnJ0RW5kUENESEdMR01lbWJlcnNcIiwgKi8gVDotMSB9LFxuXHQvKjo6WyovMHgwMUJELyo6Ol0qLzogeyAvKiBuOlwiQnJ0QmVnaW5QQ0RIR0xHTWVtYmVyXCIsICovIFQ6MSB9LFxuXHQvKjo6WyovMHgwMUJFLyo6Ol0qLzogeyAvKiBuOlwiQnJ0RW5kUENESEdMR01lbWJlclwiLCAqLyBUOi0xIH0sXG5cdC8qOjpbKi8weDAxQkYvKjo6XSovOiB7IC8qIG46XCJCcnRCZWdpblFTSVwiLCAqLyBUOjEgfSxcblx0Lyo6OlsqLzB4MDFDMC8qOjpdKi86IHsgLyogbjpcIkJydEVuZFFTSVwiLCAqLyBUOi0xIH0sXG5cdC8qOjpbKi8weDAxQzEvKjo6XSovOiB7IC8qIG46XCJCcnRCZWdpblFTSVJcIiwgKi8gVDoxIH0sXG5cdC8qOjpbKi8weDAxQzIvKjo6XSovOiB7IC8qIG46XCJCcnRFbmRRU0lSXCIsICovIFQ6LTEgfSxcblx0Lyo6OlsqLzB4MDFDMy8qOjpdKi86IHsgLyogbjpcIkJydEJlZ2luRGVsZXRlZE5hbWVzXCIsICovIFQ6MSB9LFxuXHQvKjo6WyovMHgwMUM0Lyo6Ol0qLzogeyAvKiBuOlwiQnJ0RW5kRGVsZXRlZE5hbWVzXCIsICovIFQ6LTEgfSxcblx0Lyo6OlsqLzB4MDFDNS8qOjpdKi86IHsgLyogbjpcIkJydEJlZ2luRGVsZXRlZE5hbWVcIiwgKi8gVDoxIH0sXG5cdC8qOjpbKi8weDAxQzYvKjo6XSovOiB7IC8qIG46XCJCcnRFbmREZWxldGVkTmFtZVwiLCAqLyBUOi0xIH0sXG5cdC8qOjpbKi8weDAxQzcvKjo6XSovOiB7IC8qIG46XCJCcnRCZWdpblFTSUZzXCIsICovIFQ6MSB9LFxuXHQvKjo6WyovMHgwMUM4Lyo6Ol0qLzogeyAvKiBuOlwiQnJ0RW5kUVNJRnNcIiwgKi8gVDotMSB9LFxuXHQvKjo6WyovMHgwMUM5Lyo6Ol0qLzogeyAvKiBuOlwiQnJ0QmVnaW5RU0lGXCIsICovIFQ6MSB9LFxuXHQvKjo6WyovMHgwMUNBLyo6Ol0qLzogeyAvKiBuOlwiQnJ0RW5kUVNJRlwiLCAqLyBUOi0xIH0sXG5cdC8qOjpbKi8weDAxQ0IvKjo6XSovOiB7IC8qIG46XCJCcnRCZWdpbkF1dG9Tb3J0U2NvcGVcIiwgKi8gVDoxIH0sXG5cdC8qOjpbKi8weDAxQ0MvKjo6XSovOiB7IC8qIG46XCJCcnRFbmRBdXRvU29ydFNjb3BlXCIsICovIFQ6LTEgfSxcblx0Lyo6OlsqLzB4MDFDRC8qOjpdKi86IHsgLyogbjpcIkJydEJlZ2luQ29uZGl0aW9uYWxGb3JtYXR0aW5nXCIsICovIFQ6MSB9LFxuXHQvKjo6WyovMHgwMUNFLyo6Ol0qLzogeyAvKiBuOlwiQnJ0RW5kQ29uZGl0aW9uYWxGb3JtYXR0aW5nXCIsICovIFQ6LTEgfSxcblx0Lyo6OlsqLzB4MDFDRi8qOjpdKi86IHsgLyogbjpcIkJydEJlZ2luQ0ZSdWxlXCIsICovIFQ6MSB9LFxuXHQvKjo6WyovMHgwMUQwLyo6Ol0qLzogeyAvKiBuOlwiQnJ0RW5kQ0ZSdWxlXCIsICovIFQ6LTEgfSxcblx0Lyo6OlsqLzB4MDFEMS8qOjpdKi86IHsgLyogbjpcIkJydEJlZ2luSWNvblNldFwiLCAqLyBUOjEgfSxcblx0Lyo6OlsqLzB4MDFEMi8qOjpdKi86IHsgLyogbjpcIkJydEVuZEljb25TZXRcIiwgKi8gVDotMSB9LFxuXHQvKjo6WyovMHgwMUQzLyo6Ol0qLzogeyAvKiBuOlwiQnJ0QmVnaW5EYXRhYmFyXCIsICovIFQ6MSB9LFxuXHQvKjo6WyovMHgwMUQ0Lyo6Ol0qLzogeyAvKiBuOlwiQnJ0RW5kRGF0YWJhclwiLCAqLyBUOi0xIH0sXG5cdC8qOjpbKi8weDAxRDUvKjo6XSovOiB7IC8qIG46XCJCcnRCZWdpbkNvbG9yU2NhbGVcIiwgKi8gVDoxIH0sXG5cdC8qOjpbKi8weDAxRDYvKjo6XSovOiB7IC8qIG46XCJCcnRFbmRDb2xvclNjYWxlXCIsICovIFQ6LTEgfSxcblx0Lyo6OlsqLzB4MDFENy8qOjpdKi86IHsgLyogbjpcIkJydENGVk9cIiAqLyB9LFxuXHQvKjo6WyovMHgwMUQ4Lyo6Ol0qLzogeyAvKiBuOlwiQnJ0RXh0ZXJuVmFsdWVNZXRhXCIgKi8gfSxcblx0Lyo6OlsqLzB4MDFEOS8qOjpdKi86IHsgLyogbjpcIkJydEJlZ2luQ29sb3JQYWxldHRlXCIsICovIFQ6MSB9LFxuXHQvKjo6WyovMHgwMURBLyo6Ol0qLzogeyAvKiBuOlwiQnJ0RW5kQ29sb3JQYWxldHRlXCIsICovIFQ6LTEgfSxcblx0Lyo6OlsqLzB4MDFEQi8qOjpdKi86IHsgLyogbjpcIkJydEluZGV4ZWRDb2xvclwiICovIH0sXG5cdC8qOjpbKi8weDAxREMvKjo6XSovOiB7IC8qIG46XCJCcnRNYXJnaW5zXCIsICovIGY6cGFyc2VfQnJ0TWFyZ2lucyB9LFxuXHQvKjo6WyovMHgwMURELyo6Ol0qLzogeyAvKiBuOlwiQnJ0UHJpbnRPcHRpb25zXCIgKi8gfSxcblx0Lyo6OlsqLzB4MDFERS8qOjpdKi86IHsgLyogbjpcIkJydFBhZ2VTZXR1cFwiICovIH0sXG5cdC8qOjpbKi8weDAxREYvKjo6XSovOiB7IC8qIG46XCJCcnRCZWdpbkhlYWRlckZvb3RlclwiLCAqLyBUOjEgfSxcblx0Lyo6OlsqLzB4MDFFMC8qOjpdKi86IHsgLyogbjpcIkJydEVuZEhlYWRlckZvb3RlclwiLCAqLyBUOi0xIH0sXG5cdC8qOjpbKi8weDAxRTEvKjo6XSovOiB7IC8qIG46XCJCcnRCZWdpblNYQ3J0Rm9ybWF0XCIsICovIFQ6MSB9LFxuXHQvKjo6WyovMHgwMUUyLyo6Ol0qLzogeyAvKiBuOlwiQnJ0RW5kU1hDcnRGb3JtYXRcIiwgKi8gVDotMSB9LFxuXHQvKjo6WyovMHgwMUUzLyo6Ol0qLzogeyAvKiBuOlwiQnJ0QmVnaW5TWENydEZvcm1hdHNcIiwgKi8gVDoxIH0sXG5cdC8qOjpbKi8weDAxRTQvKjo6XSovOiB7IC8qIG46XCJCcnRFbmRTWENydEZvcm1hdHNcIiwgKi8gVDotMSB9LFxuXHQvKjo6WyovMHgwMUU1Lyo6Ol0qLzogeyAvKiBuOlwiQnJ0V3NGbXRJbmZvXCIsICovIGY6cGFyc2VfQnJ0V3NGbXRJbmZvIH0sXG5cdC8qOjpbKi8weDAxRTYvKjo6XSovOiB7IC8qIG46XCJCcnRCZWdpbk1nc1wiLCAqLyBUOjEgfSxcblx0Lyo6OlsqLzB4MDFFNy8qOjpdKi86IHsgLyogbjpcIkJydEVuZE1Hc1wiLCAqLyBUOi0xIH0sXG5cdC8qOjpbKi8weDAxRTgvKjo6XSovOiB7IC8qIG46XCJCcnRCZWdpbk1HTWFwc1wiLCAqLyBUOjEgfSxcblx0Lyo6OlsqLzB4MDFFOS8qOjpdKi86IHsgLyogbjpcIkJydEVuZE1HTWFwc1wiLCAqLyBUOi0xIH0sXG5cdC8qOjpbKi8weDAxRUEvKjo6XSovOiB7IC8qIG46XCJCcnRCZWdpbk1HXCIsICovIFQ6MSB9LFxuXHQvKjo6WyovMHgwMUVCLyo6Ol0qLzogeyAvKiBuOlwiQnJ0RW5kTUdcIiwgKi8gVDotMSB9LFxuXHQvKjo6WyovMHgwMUVDLyo6Ol0qLzogeyAvKiBuOlwiQnJ0QmVnaW5NYXBcIiwgKi8gVDoxIH0sXG5cdC8qOjpbKi8weDAxRUQvKjo6XSovOiB7IC8qIG46XCJCcnRFbmRNYXBcIiwgKi8gVDotMSB9LFxuXHQvKjo6WyovMHgwMUVFLyo6Ol0qLzogeyAvKiBuOlwiQnJ0SExpbmtcIiwgKi8gZjpwYXJzZV9CcnRITGluayB9LFxuXHQvKjo6WyovMHgwMUVGLyo6Ol0qLzogeyAvKiBuOlwiQnJ0QmVnaW5EQ29uXCIsICovIFQ6MSB9LFxuXHQvKjo6WyovMHgwMUYwLyo6Ol0qLzogeyAvKiBuOlwiQnJ0RW5kRENvblwiLCAqLyBUOi0xIH0sXG5cdC8qOjpbKi8weDAxRjEvKjo6XSovOiB7IC8qIG46XCJCcnRCZWdpbkRSZWZzXCIsICovIFQ6MSB9LFxuXHQvKjo6WyovMHgwMUYyLyo6Ol0qLzogeyAvKiBuOlwiQnJ0RW5kRFJlZnNcIiwgKi8gVDotMSB9LFxuXHQvKjo6WyovMHgwMUYzLyo6Ol0qLzogeyAvKiBuOlwiQnJ0RFJlZlwiICovIH0sXG5cdC8qOjpbKi8weDAxRjQvKjo6XSovOiB7IC8qIG46XCJCcnRCZWdpblNjZW5NYW5cIiwgKi8gVDoxIH0sXG5cdC8qOjpbKi8weDAxRjUvKjo6XSovOiB7IC8qIG46XCJCcnRFbmRTY2VuTWFuXCIsICovIFQ6LTEgfSxcblx0Lyo6OlsqLzB4MDFGNi8qOjpdKi86IHsgLyogbjpcIkJydEJlZ2luU2N0XCIsICovIFQ6MSB9LFxuXHQvKjo6WyovMHgwMUY3Lyo6Ol0qLzogeyAvKiBuOlwiQnJ0RW5kU2N0XCIsICovIFQ6LTEgfSxcblx0Lyo6OlsqLzB4MDFGOC8qOjpdKi86IHsgLyogbjpcIkJydFNsY1wiICovIH0sXG5cdC8qOjpbKi8weDAxRjkvKjo6XSovOiB7IC8qIG46XCJCcnRCZWdpbkRYRnNcIiwgKi8gVDoxIH0sXG5cdC8qOjpbKi8weDAxRkEvKjo6XSovOiB7IC8qIG46XCJCcnRFbmREWEZzXCIsICovIFQ6LTEgfSxcblx0Lyo6OlsqLzB4MDFGQi8qOjpdKi86IHsgLyogbjpcIkJydERYRlwiICovIH0sXG5cdC8qOjpbKi8weDAxRkMvKjo6XSovOiB7IC8qIG46XCJCcnRCZWdpblRhYmxlU3R5bGVzXCIsICovIFQ6MSB9LFxuXHQvKjo6WyovMHgwMUZELyo6Ol0qLzogeyAvKiBuOlwiQnJ0RW5kVGFibGVTdHlsZXNcIiwgKi8gVDotMSB9LFxuXHQvKjo6WyovMHgwMUZFLyo6Ol0qLzogeyAvKiBuOlwiQnJ0QmVnaW5UYWJsZVN0eWxlXCIsICovIFQ6MSB9LFxuXHQvKjo6WyovMHgwMUZGLyo6Ol0qLzogeyAvKiBuOlwiQnJ0RW5kVGFibGVTdHlsZVwiLCAqLyBUOi0xIH0sXG5cdC8qOjpbKi8weDAyMDAvKjo6XSovOiB7IC8qIG46XCJCcnRUYWJsZVN0eWxlRWxlbWVudFwiICovIH0sXG5cdC8qOjpbKi8weDAyMDEvKjo6XSovOiB7IC8qIG46XCJCcnRUYWJsZVN0eWxlQ2xpZW50XCIgKi8gfSxcblx0Lyo6OlsqLzB4MDIwMi8qOjpdKi86IHsgLyogbjpcIkJydEJlZ2luVm9sRGVwc1wiLCAqLyBUOjEgfSxcblx0Lyo6OlsqLzB4MDIwMy8qOjpdKi86IHsgLyogbjpcIkJydEVuZFZvbERlcHNcIiwgKi8gVDotMSB9LFxuXHQvKjo6WyovMHgwMjA0Lyo6Ol0qLzogeyAvKiBuOlwiQnJ0QmVnaW5Wb2xUeXBlXCIsICovIFQ6MSB9LFxuXHQvKjo6WyovMHgwMjA1Lyo6Ol0qLzogeyAvKiBuOlwiQnJ0RW5kVm9sVHlwZVwiLCAqLyBUOi0xIH0sXG5cdC8qOjpbKi8weDAyMDYvKjo6XSovOiB7IC8qIG46XCJCcnRCZWdpblZvbE1haW5cIiwgKi8gVDoxIH0sXG5cdC8qOjpbKi8weDAyMDcvKjo6XSovOiB7IC8qIG46XCJCcnRFbmRWb2xNYWluXCIsICovIFQ6LTEgfSxcblx0Lyo6OlsqLzB4MDIwOC8qOjpdKi86IHsgLyogbjpcIkJydEJlZ2luVm9sVG9waWNcIiwgKi8gVDoxIH0sXG5cdC8qOjpbKi8weDAyMDkvKjo6XSovOiB7IC8qIG46XCJCcnRFbmRWb2xUb3BpY1wiLCAqLyBUOi0xIH0sXG5cdC8qOjpbKi8weDAyMEEvKjo6XSovOiB7IC8qIG46XCJCcnRWb2xTdWJ0b3BpY1wiICovIH0sXG5cdC8qOjpbKi8weDAyMEIvKjo6XSovOiB7IC8qIG46XCJCcnRWb2xSZWZcIiAqLyB9LFxuXHQvKjo6WyovMHgwMjBDLyo6Ol0qLzogeyAvKiBuOlwiQnJ0Vm9sTnVtXCIgKi8gfSxcblx0Lyo6OlsqLzB4MDIwRC8qOjpdKi86IHsgLyogbjpcIkJydFZvbEVyclwiICovIH0sXG5cdC8qOjpbKi8weDAyMEUvKjo6XSovOiB7IC8qIG46XCJCcnRWb2xTdHJcIiAqLyB9LFxuXHQvKjo6WyovMHgwMjBGLyo6Ol0qLzogeyAvKiBuOlwiQnJ0Vm9sQm9vbFwiICovIH0sXG5cdC8qOjpbKi8weDAyMTAvKjo6XSovOiB7IC8qIG46XCJCcnRCZWdpbkNhbGNDaGFpbiRcIiwgKi8gVDoxIH0sXG5cdC8qOjpbKi8weDAyMTEvKjo6XSovOiB7IC8qIG46XCJCcnRFbmRDYWxjQ2hhaW4kXCIsICovIFQ6LTEgfSxcblx0Lyo6OlsqLzB4MDIxMi8qOjpdKi86IHsgLyogbjpcIkJydEJlZ2luU29ydFN0YXRlXCIsICovIFQ6MSB9LFxuXHQvKjo6WyovMHgwMjEzLyo6Ol0qLzogeyAvKiBuOlwiQnJ0RW5kU29ydFN0YXRlXCIsICovIFQ6LTEgfSxcblx0Lyo6OlsqLzB4MDIxNC8qOjpdKi86IHsgLyogbjpcIkJydEJlZ2luU29ydENvbmRcIiwgKi8gVDoxIH0sXG5cdC8qOjpbKi8weDAyMTUvKjo6XSovOiB7IC8qIG46XCJCcnRFbmRTb3J0Q29uZFwiLCAqLyBUOi0xIH0sXG5cdC8qOjpbKi8weDAyMTYvKjo6XSovOiB7IC8qIG46XCJCcnRCb29rUHJvdGVjdGlvblwiICovIH0sXG5cdC8qOjpbKi8weDAyMTcvKjo6XSovOiB7IC8qIG46XCJCcnRTaGVldFByb3RlY3Rpb25cIiAqLyB9LFxuXHQvKjo6WyovMHgwMjE4Lyo6Ol0qLzogeyAvKiBuOlwiQnJ0UmFuZ2VQcm90ZWN0aW9uXCIgKi8gfSxcblx0Lyo6OlsqLzB4MDIxOS8qOjpdKi86IHsgLyogbjpcIkJydFBob25ldGljSW5mb1wiICovIH0sXG5cdC8qOjpbKi8weDAyMUEvKjo6XSovOiB7IC8qIG46XCJCcnRCZWdpbkVDVHh0V2l6XCIsICovIFQ6MSB9LFxuXHQvKjo6WyovMHgwMjFCLyo6Ol0qLzogeyAvKiBuOlwiQnJ0RW5kRUNUeHRXaXpcIiwgKi8gVDotMSB9LFxuXHQvKjo6WyovMHgwMjFDLyo6Ol0qLzogeyAvKiBuOlwiQnJ0QmVnaW5FQ1RXRmxkSW5mb0xzdFwiLCAqLyBUOjEgfSxcblx0Lyo6OlsqLzB4MDIxRC8qOjpdKi86IHsgLyogbjpcIkJydEVuZEVDVFdGbGRJbmZvTHN0XCIsICovIFQ6LTEgfSxcblx0Lyo6OlsqLzB4MDIxRS8qOjpdKi86IHsgLyogbjpcIkJydEJlZ2luRUNUd0ZsZEluZm9cIiwgKi8gVDoxIH0sXG5cdC8qOjpbKi8weDAyMjQvKjo6XSovOiB7IC8qIG46XCJCcnRGaWxlU2hhcmluZ1wiICovIH0sXG5cdC8qOjpbKi8weDAyMjUvKjo6XSovOiB7IC8qIG46XCJCcnRPbGVTaXplXCIgKi8gfSxcblx0Lyo6OlsqLzB4MDIyNi8qOjpdKi86IHsgLyogbjpcIkJydERyYXdpbmdcIiwgKi8gZjpwYXJzZV9SZWxJRCB9LFxuXHQvKjo6WyovMHgwMjI3Lyo6Ol0qLzogeyAvKiBuOlwiQnJ0TGVnYWN5RHJhd2luZ1wiICovIH0sXG5cdC8qOjpbKi8weDAyMjgvKjo6XSovOiB7IC8qIG46XCJCcnRMZWdhY3lEcmF3aW5nSEZcIiAqLyB9LFxuXHQvKjo6WyovMHgwMjI5Lyo6Ol0qLzogeyAvKiBuOlwiQnJ0V2ViT3B0XCIgKi8gfSxcblx0Lyo6OlsqLzB4MDIyQS8qOjpdKi86IHsgLyogbjpcIkJydEJlZ2luV2ViUHViSXRlbXNcIiwgKi8gVDoxIH0sXG5cdC8qOjpbKi8weDAyMkIvKjo6XSovOiB7IC8qIG46XCJCcnRFbmRXZWJQdWJJdGVtc1wiLCAqLyBUOi0xIH0sXG5cdC8qOjpbKi8weDAyMkMvKjo6XSovOiB7IC8qIG46XCJCcnRCZWdpbldlYlB1Ykl0ZW1cIiwgKi8gVDoxIH0sXG5cdC8qOjpbKi8weDAyMkQvKjo6XSovOiB7IC8qIG46XCJCcnRFbmRXZWJQdWJJdGVtXCIsICovIFQ6LTEgfSxcblx0Lyo6OlsqLzB4MDIyRS8qOjpdKi86IHsgLyogbjpcIkJydEJlZ2luU1hDb25kRm10XCIsICovIFQ6MSB9LFxuXHQvKjo6WyovMHgwMjJGLyo6Ol0qLzogeyAvKiBuOlwiQnJ0RW5kU1hDb25kRm10XCIsICovIFQ6LTEgfSxcblx0Lyo6OlsqLzB4MDIzMC8qOjpdKi86IHsgLyogbjpcIkJydEJlZ2luU1hDb25kRm10c1wiLCAqLyBUOjEgfSxcblx0Lyo6OlsqLzB4MDIzMS8qOjpdKi86IHsgLyogbjpcIkJydEVuZFNYQ29uZEZtdHNcIiwgKi8gVDotMSB9LFxuXHQvKjo6WyovMHgwMjMyLyo6Ol0qLzogeyAvKiBuOlwiQnJ0QmtIaW1cIiAqLyB9LFxuXHQvKjo6WyovMHgwMjM0Lyo6Ol0qLzogeyAvKiBuOlwiQnJ0Q29sb3JcIiAqLyB9LFxuXHQvKjo6WyovMHgwMjM1Lyo6Ol0qLzogeyAvKiBuOlwiQnJ0QmVnaW5JbmRleGVkQ29sb3JzXCIsICovIFQ6MSB9LFxuXHQvKjo6WyovMHgwMjM2Lyo6Ol0qLzogeyAvKiBuOlwiQnJ0RW5kSW5kZXhlZENvbG9yc1wiLCAqLyBUOi0xIH0sXG5cdC8qOjpbKi8weDAyMzkvKjo6XSovOiB7IC8qIG46XCJCcnRCZWdpbk1SVUNvbG9yc1wiLCAqLyBUOjEgfSxcblx0Lyo6OlsqLzB4MDIzQS8qOjpdKi86IHsgLyogbjpcIkJydEVuZE1SVUNvbG9yc1wiLCAqLyBUOi0xIH0sXG5cdC8qOjpbKi8weDAyM0MvKjo6XSovOiB7IC8qIG46XCJCcnRNUlVDb2xvclwiICovIH0sXG5cdC8qOjpbKi8weDAyM0QvKjo6XSovOiB7IC8qIG46XCJCcnRCZWdpbkRWYWxzXCIsICovIFQ6MSB9LFxuXHQvKjo6WyovMHgwMjNFLyo6Ol0qLzogeyAvKiBuOlwiQnJ0RW5kRFZhbHNcIiwgKi8gVDotMSB9LFxuXHQvKjo6WyovMHgwMjQxLyo6Ol0qLzogeyAvKiBuOlwiQnJ0U3VwTmFtZVN0YXJ0XCIgKi8gfSxcblx0Lyo6OlsqLzB4MDI0Mi8qOjpdKi86IHsgLyogbjpcIkJydFN1cE5hbWVWYWx1ZVN0YXJ0XCIgKi8gfSxcblx0Lyo6OlsqLzB4MDI0My8qOjpdKi86IHsgLyogbjpcIkJydFN1cE5hbWVWYWx1ZUVuZFwiICovIH0sXG5cdC8qOjpbKi8weDAyNDQvKjo6XSovOiB7IC8qIG46XCJCcnRTdXBOYW1lTnVtXCIgKi8gfSxcblx0Lyo6OlsqLzB4MDI0NS8qOjpdKi86IHsgLyogbjpcIkJydFN1cE5hbWVFcnJcIiAqLyB9LFxuXHQvKjo6WyovMHgwMjQ2Lyo6Ol0qLzogeyAvKiBuOlwiQnJ0U3VwTmFtZVN0XCIgKi8gfSxcblx0Lyo6OlsqLzB4MDI0Ny8qOjpdKi86IHsgLyogbjpcIkJydFN1cE5hbWVOaWxcIiAqLyB9LFxuXHQvKjo6WyovMHgwMjQ4Lyo6Ol0qLzogeyAvKiBuOlwiQnJ0U3VwTmFtZUJvb2xcIiAqLyB9LFxuXHQvKjo6WyovMHgwMjQ5Lyo6Ol0qLzogeyAvKiBuOlwiQnJ0U3VwTmFtZUZtbGFcIiAqLyB9LFxuXHQvKjo6WyovMHgwMjRBLyo6Ol0qLzogeyAvKiBuOlwiQnJ0U3VwTmFtZUJpdHNcIiAqLyB9LFxuXHQvKjo6WyovMHgwMjRCLyo6Ol0qLzogeyAvKiBuOlwiQnJ0U3VwTmFtZUVuZFwiICovIH0sXG5cdC8qOjpbKi8weDAyNEMvKjo6XSovOiB7IC8qIG46XCJCcnRFbmRTdXBCb29rXCIsICovIFQ6LTEgfSxcblx0Lyo6OlsqLzB4MDI0RC8qOjpdKi86IHsgLyogbjpcIkJydENlbGxTbWFydFRhZ1Byb3BlcnR5XCIgKi8gfSxcblx0Lyo6OlsqLzB4MDI0RS8qOjpdKi86IHsgLyogbjpcIkJydEJlZ2luQ2VsbFNtYXJ0VGFnXCIsICovIFQ6MSB9LFxuXHQvKjo6WyovMHgwMjRGLyo6Ol0qLzogeyAvKiBuOlwiQnJ0RW5kQ2VsbFNtYXJ0VGFnXCIsICovIFQ6LTEgfSxcblx0Lyo6OlsqLzB4MDI1MC8qOjpdKi86IHsgLyogbjpcIkJydEJlZ2luQ2VsbFNtYXJ0VGFnc1wiLCAqLyBUOjEgfSxcblx0Lyo6OlsqLzB4MDI1MS8qOjpdKi86IHsgLyogbjpcIkJydEVuZENlbGxTbWFydFRhZ3NcIiwgKi8gVDotMSB9LFxuXHQvKjo6WyovMHgwMjUyLyo6Ol0qLzogeyAvKiBuOlwiQnJ0QmVnaW5TbWFydFRhZ3NcIiwgKi8gVDoxIH0sXG5cdC8qOjpbKi8weDAyNTMvKjo6XSovOiB7IC8qIG46XCJCcnRFbmRTbWFydFRhZ3NcIiwgKi8gVDotMSB9LFxuXHQvKjo6WyovMHgwMjU0Lyo6Ol0qLzogeyAvKiBuOlwiQnJ0U21hcnRUYWdUeXBlXCIgKi8gfSxcblx0Lyo6OlsqLzB4MDI1NS8qOjpdKi86IHsgLyogbjpcIkJydEJlZ2luU21hcnRUYWdUeXBlc1wiLCAqLyBUOjEgfSxcblx0Lyo6OlsqLzB4MDI1Ni8qOjpdKi86IHsgLyogbjpcIkJydEVuZFNtYXJ0VGFnVHlwZXNcIiwgKi8gVDotMSB9LFxuXHQvKjo6WyovMHgwMjU3Lyo6Ol0qLzogeyAvKiBuOlwiQnJ0QmVnaW5TWEZpbHRlcnNcIiwgKi8gVDoxIH0sXG5cdC8qOjpbKi8weDAyNTgvKjo6XSovOiB7IC8qIG46XCJCcnRFbmRTWEZpbHRlcnNcIiwgKi8gVDotMSB9LFxuXHQvKjo6WyovMHgwMjU5Lyo6Ol0qLzogeyAvKiBuOlwiQnJ0QmVnaW5TWEZJTFRFUlwiLCAqLyBUOjEgfSxcblx0Lyo6OlsqLzB4MDI1QS8qOjpdKi86IHsgLyogbjpcIkJydEVuZFNYRmlsdGVyXCIsICovIFQ6LTEgfSxcblx0Lyo6OlsqLzB4MDI1Qi8qOjpdKi86IHsgLyogbjpcIkJydEJlZ2luRmlsbHNcIiwgKi8gVDoxIH0sXG5cdC8qOjpbKi8weDAyNUMvKjo6XSovOiB7IC8qIG46XCJCcnRFbmRGaWxsc1wiLCAqLyBUOi0xIH0sXG5cdC8qOjpbKi8weDAyNUQvKjo6XSovOiB7IC8qIG46XCJCcnRCZWdpbkNlbGxXYXRjaGVzXCIsICovIFQ6MSB9LFxuXHQvKjo6WyovMHgwMjVFLyo6Ol0qLzogeyAvKiBuOlwiQnJ0RW5kQ2VsbFdhdGNoZXNcIiwgKi8gVDotMSB9LFxuXHQvKjo6WyovMHgwMjVGLyo6Ol0qLzogeyAvKiBuOlwiQnJ0Q2VsbFdhdGNoXCIgKi8gfSxcblx0Lyo6OlsqLzB4MDI2MC8qOjpdKi86IHsgLyogbjpcIkJydEJlZ2luQ1JFcnJzXCIsICovIFQ6MSB9LFxuXHQvKjo6WyovMHgwMjYxLyo6Ol0qLzogeyAvKiBuOlwiQnJ0RW5kQ1JFcnJzXCIsICovIFQ6LTEgfSxcblx0Lyo6OlsqLzB4MDI2Mi8qOjpdKi86IHsgLyogbjpcIkJydENyYXNoUmVjRXJyXCIgKi8gfSxcblx0Lyo6OlsqLzB4MDI2My8qOjpdKi86IHsgLyogbjpcIkJydEJlZ2luRm9udHNcIiwgKi8gVDoxIH0sXG5cdC8qOjpbKi8weDAyNjQvKjo6XSovOiB7IC8qIG46XCJCcnRFbmRGb250c1wiLCAqLyBUOi0xIH0sXG5cdC8qOjpbKi8weDAyNjUvKjo6XSovOiB7IC8qIG46XCJCcnRCZWdpbkJvcmRlcnNcIiwgKi8gVDoxIH0sXG5cdC8qOjpbKi8weDAyNjYvKjo6XSovOiB7IC8qIG46XCJCcnRFbmRCb3JkZXJzXCIsICovIFQ6LTEgfSxcblx0Lyo6OlsqLzB4MDI2Ny8qOjpdKi86IHsgLyogbjpcIkJydEJlZ2luRm10c1wiLCAqLyBUOjEgfSxcblx0Lyo6OlsqLzB4MDI2OC8qOjpdKi86IHsgLyogbjpcIkJydEVuZEZtdHNcIiwgKi8gVDotMSB9LFxuXHQvKjo6WyovMHgwMjY5Lyo6Ol0qLzogeyAvKiBuOlwiQnJ0QmVnaW5DZWxsWEZzXCIsICovIFQ6MSB9LFxuXHQvKjo6WyovMHgwMjZBLyo6Ol0qLzogeyAvKiBuOlwiQnJ0RW5kQ2VsbFhGc1wiLCAqLyBUOi0xIH0sXG5cdC8qOjpbKi8weDAyNkIvKjo6XSovOiB7IC8qIG46XCJCcnRCZWdpblN0eWxlc1wiLCAqLyBUOjEgfSxcblx0Lyo6OlsqLzB4MDI2Qy8qOjpdKi86IHsgLyogbjpcIkJydEVuZFN0eWxlc1wiLCAqLyBUOi0xIH0sXG5cdC8qOjpbKi8weDAyNzEvKjo6XSovOiB7IC8qIG46XCJCcnRCaWdOYW1lXCIgKi8gfSxcblx0Lyo6OlsqLzB4MDI3Mi8qOjpdKi86IHsgLyogbjpcIkJydEJlZ2luQ2VsbFN0eWxlWEZzXCIsICovIFQ6MSB9LFxuXHQvKjo6WyovMHgwMjczLyo6Ol0qLzogeyAvKiBuOlwiQnJ0RW5kQ2VsbFN0eWxlWEZzXCIsICovIFQ6LTEgfSxcblx0Lyo6OlsqLzB4MDI3NC8qOjpdKi86IHsgLyogbjpcIkJydEJlZ2luQ29tbWVudHNcIiwgKi8gVDoxIH0sXG5cdC8qOjpbKi8weDAyNzUvKjo6XSovOiB7IC8qIG46XCJCcnRFbmRDb21tZW50c1wiLCAqLyBUOi0xIH0sXG5cdC8qOjpbKi8weDAyNzYvKjo6XSovOiB7IC8qIG46XCJCcnRCZWdpbkNvbW1lbnRBdXRob3JzXCIsICovIFQ6MSB9LFxuXHQvKjo6WyovMHgwMjc3Lyo6Ol0qLzogeyAvKiBuOlwiQnJ0RW5kQ29tbWVudEF1dGhvcnNcIiwgKi8gVDotMSB9LFxuXHQvKjo6WyovMHgwMjc4Lyo6Ol0qLzogeyAvKiBuOlwiQnJ0Q29tbWVudEF1dGhvclwiLCAqLyBmOnBhcnNlX0JydENvbW1lbnRBdXRob3IgfSxcblx0Lyo6OlsqLzB4MDI3OS8qOjpdKi86IHsgLyogbjpcIkJydEJlZ2luQ29tbWVudExpc3RcIiwgKi8gVDoxIH0sXG5cdC8qOjpbKi8weDAyN0EvKjo6XSovOiB7IC8qIG46XCJCcnRFbmRDb21tZW50TGlzdFwiLCAqLyBUOi0xIH0sXG5cdC8qOjpbKi8weDAyN0IvKjo6XSovOiB7IC8qIG46XCJCcnRCZWdpbkNvbW1lbnRcIiwgKi8gVDoxLCBmOnBhcnNlX0JydEJlZ2luQ29tbWVudH0sXG5cdC8qOjpbKi8weDAyN0MvKjo6XSovOiB7IC8qIG46XCJCcnRFbmRDb21tZW50XCIsICovIFQ6LTEgfSxcblx0Lyo6OlsqLzB4MDI3RC8qOjpdKi86IHsgLyogbjpcIkJydENvbW1lbnRUZXh0XCIsICovIGY6cGFyc2VfQnJ0Q29tbWVudFRleHQgfSxcblx0Lyo6OlsqLzB4MDI3RS8qOjpdKi86IHsgLyogbjpcIkJydEJlZ2luT2xlT2JqZWN0c1wiLCAqLyBUOjEgfSxcblx0Lyo6OlsqLzB4MDI3Ri8qOjpdKi86IHsgLyogbjpcIkJydE9sZU9iamVjdFwiICovIH0sXG5cdC8qOjpbKi8weDAyODAvKjo6XSovOiB7IC8qIG46XCJCcnRFbmRPbGVPYmplY3RzXCIsICovIFQ6LTEgfSxcblx0Lyo6OlsqLzB4MDI4MS8qOjpdKi86IHsgLyogbjpcIkJydEJlZ2luU3hydWxlc1wiLCAqLyBUOjEgfSxcblx0Lyo6OlsqLzB4MDI4Mi8qOjpdKi86IHsgLyogbjpcIkJydEVuZFN4UnVsZXNcIiwgKi8gVDotMSB9LFxuXHQvKjo6WyovMHgwMjgzLyo6Ol0qLzogeyAvKiBuOlwiQnJ0QmVnaW5BY3RpdmVYQ29udHJvbHNcIiwgKi8gVDoxIH0sXG5cdC8qOjpbKi8weDAyODQvKjo6XSovOiB7IC8qIG46XCJCcnRBY3RpdmVYXCIgKi8gfSxcblx0Lyo6OlsqLzB4MDI4NS8qOjpdKi86IHsgLyogbjpcIkJydEVuZEFjdGl2ZVhDb250cm9sc1wiLCAqLyBUOi0xIH0sXG5cdC8qOjpbKi8weDAyODYvKjo6XSovOiB7IC8qIG46XCJCcnRCZWdpblBDRFNEVENFTWVtYmVyc1NvcnRCeVwiLCAqLyBUOjEgfSxcblx0Lyo6OlsqLzB4MDI4OC8qOjpdKi86IHsgLyogbjpcIkJydEJlZ2luQ2VsbElnbm9yZUVDc1wiLCAqLyBUOjEgfSxcblx0Lyo6OlsqLzB4MDI4OS8qOjpdKi86IHsgLyogbjpcIkJydENlbGxJZ25vcmVFQ1wiICovIH0sXG5cdC8qOjpbKi8weDAyOEEvKjo6XSovOiB7IC8qIG46XCJCcnRFbmRDZWxsSWdub3JlRUNzXCIsICovIFQ6LTEgfSxcblx0Lyo6OlsqLzB4MDI4Qi8qOjpdKi86IHsgLyogbjpcIkJydENzUHJvcFwiLCAqLyBmOnBhcnNlX0JydENzUHJvcCB9LFxuXHQvKjo6WyovMHgwMjhDLyo6Ol0qLzogeyAvKiBuOlwiQnJ0Q3NQYWdlU2V0dXBcIiAqLyB9LFxuXHQvKjo6WyovMHgwMjhELyo6Ol0qLzogeyAvKiBuOlwiQnJ0QmVnaW5Vc2VyQ3NWaWV3c1wiLCAqLyBUOjEgfSxcblx0Lyo6OlsqLzB4MDI4RS8qOjpdKi86IHsgLyogbjpcIkJydEVuZFVzZXJDc1ZpZXdzXCIsICovIFQ6LTEgfSxcblx0Lyo6OlsqLzB4MDI4Ri8qOjpdKi86IHsgLyogbjpcIkJydEJlZ2luVXNlckNzVmlld1wiLCAqLyBUOjEgfSxcblx0Lyo6OlsqLzB4MDI5MC8qOjpdKi86IHsgLyogbjpcIkJydEVuZFVzZXJDc1ZpZXdcIiwgKi8gVDotMSB9LFxuXHQvKjo6WyovMHgwMjkxLyo6Ol0qLzogeyAvKiBuOlwiQnJ0QmVnaW5QY2RTRkNJRW50cmllc1wiLCAqLyBUOjEgfSxcblx0Lyo6OlsqLzB4MDI5Mi8qOjpdKi86IHsgLyogbjpcIkJydEVuZFBDRFNGQ0lFbnRyaWVzXCIsICovIFQ6LTEgfSxcblx0Lyo6OlsqLzB4MDI5My8qOjpdKi86IHsgLyogbjpcIkJydFBDRFNGQ0lFbnRyeVwiICovIH0sXG5cdC8qOjpbKi8weDAyOTQvKjo6XSovOiB7IC8qIG46XCJCcnRCZWdpbkxpc3RQYXJ0c1wiLCAqLyBUOjEgfSxcblx0Lyo6OlsqLzB4MDI5NS8qOjpdKi86IHsgLyogbjpcIkJydExpc3RQYXJ0XCIgKi8gfSxcblx0Lyo6OlsqLzB4MDI5Ni8qOjpdKi86IHsgLyogbjpcIkJydEVuZExpc3RQYXJ0c1wiLCAqLyBUOi0xIH0sXG5cdC8qOjpbKi8weDAyOTcvKjo6XSovOiB7IC8qIG46XCJCcnRTaGVldENhbGNQcm9wXCIgKi8gfSxcblx0Lyo6OlsqLzB4MDI5OC8qOjpdKi86IHsgLyogbjpcIkJydEJlZ2luRm5Hcm91cFwiLCAqLyBUOjEgfSxcblx0Lyo6OlsqLzB4MDI5OS8qOjpdKi86IHsgLyogbjpcIkJydEZuR3JvdXBcIiAqLyB9LFxuXHQvKjo6WyovMHgwMjlBLyo6Ol0qLzogeyAvKiBuOlwiQnJ0RW5kRm5Hcm91cFwiLCAqLyBUOi0xIH0sXG5cdC8qOjpbKi8weDAyOUIvKjo6XSovOiB7IC8qIG46XCJCcnRTdXBBZGRpblwiICovIH0sXG5cdC8qOjpbKi8weDAyOUMvKjo6XSovOiB7IC8qIG46XCJCcnRTWFRETVBPcmRlclwiICovIH0sXG5cdC8qOjpbKi8weDAyOUQvKjo6XSovOiB7IC8qIG46XCJCcnRDc1Byb3RlY3Rpb25cIiAqLyB9LFxuXHQvKjo6WyovMHgwMjlGLyo6Ol0qLzogeyAvKiBuOlwiQnJ0QmVnaW5Xc1NvcnRNYXBcIiwgKi8gVDoxIH0sXG5cdC8qOjpbKi8weDAyQTAvKjo6XSovOiB7IC8qIG46XCJCcnRFbmRXc1NvcnRNYXBcIiwgKi8gVDotMSB9LFxuXHQvKjo6WyovMHgwMkExLyo6Ol0qLzogeyAvKiBuOlwiQnJ0QmVnaW5SUlNvcnRcIiwgKi8gVDoxIH0sXG5cdC8qOjpbKi8weDAyQTIvKjo6XSovOiB7IC8qIG46XCJCcnRFbmRSUlNvcnRcIiwgKi8gVDotMSB9LFxuXHQvKjo6WyovMHgwMkEzLyo6Ol0qLzogeyAvKiBuOlwiQnJ0UlJTb3J0SXRlbVwiICovIH0sXG5cdC8qOjpbKi8weDAyQTQvKjo6XSovOiB7IC8qIG46XCJCcnRGaWxlU2hhcmluZ0lzb1wiICovIH0sXG5cdC8qOjpbKi8weDAyQTUvKjo6XSovOiB7IC8qIG46XCJCcnRCb29rUHJvdGVjdGlvbklzb1wiICovIH0sXG5cdC8qOjpbKi8weDAyQTYvKjo6XSovOiB7IC8qIG46XCJCcnRTaGVldFByb3RlY3Rpb25Jc29cIiAqLyB9LFxuXHQvKjo6WyovMHgwMkE3Lyo6Ol0qLzogeyAvKiBuOlwiQnJ0Q3NQcm90ZWN0aW9uSXNvXCIgKi8gfSxcblx0Lyo6OlsqLzB4MDJBOC8qOjpdKi86IHsgLyogbjpcIkJydFJhbmdlUHJvdGVjdGlvbklzb1wiICovIH0sXG5cdC8qOjpbKi8weDAyQTkvKjo6XSovOiB7IC8qIG46XCJCcnREVmFsTGlzdFwiICovIH0sXG5cdC8qOjpbKi8weDA0MDAvKjo6XSovOiB7IC8qIG46XCJCcnRSd0Rlc2NlbnRcIiAqLyB9LFxuXHQvKjo6WyovMHgwNDAxLyo6Ol0qLzogeyAvKiBuOlwiQnJ0S25vd25Gb250c1wiICovIH0sXG5cdC8qOjpbKi8weDA0MDIvKjo6XSovOiB7IC8qIG46XCJCcnRCZWdpblNYVHVwbGVTZXRcIiwgKi8gVDoxIH0sXG5cdC8qOjpbKi8weDA0MDMvKjo6XSovOiB7IC8qIG46XCJCcnRFbmRTWFR1cGxlU2V0XCIsICovIFQ6LTEgfSxcblx0Lyo6OlsqLzB4MDQwNC8qOjpdKi86IHsgLyogbjpcIkJydEJlZ2luU1hUdXBsZVNldEhlYWRlclwiLCAqLyBUOjEgfSxcblx0Lyo6OlsqLzB4MDQwNS8qOjpdKi86IHsgLyogbjpcIkJydEVuZFNYVHVwbGVTZXRIZWFkZXJcIiwgKi8gVDotMSB9LFxuXHQvKjo6WyovMHgwNDA2Lyo6Ol0qLzogeyAvKiBuOlwiQnJ0U1hUdXBsZVNldEhlYWRlckl0ZW1cIiAqLyB9LFxuXHQvKjo6WyovMHgwNDA3Lyo6Ol0qLzogeyAvKiBuOlwiQnJ0QmVnaW5TWFR1cGxlU2V0RGF0YVwiLCAqLyBUOjEgfSxcblx0Lyo6OlsqLzB4MDQwOC8qOjpdKi86IHsgLyogbjpcIkJydEVuZFNYVHVwbGVTZXREYXRhXCIsICovIFQ6LTEgfSxcblx0Lyo6OlsqLzB4MDQwOS8qOjpdKi86IHsgLyogbjpcIkJydEJlZ2luU1hUdXBsZVNldFJvd1wiLCAqLyBUOjEgfSxcblx0Lyo6OlsqLzB4MDQwQS8qOjpdKi86IHsgLyogbjpcIkJydEVuZFNYVHVwbGVTZXRSb3dcIiwgKi8gVDotMSB9LFxuXHQvKjo6WyovMHgwNDBCLyo6Ol0qLzogeyAvKiBuOlwiQnJ0U1hUdXBsZVNldFJvd0l0ZW1cIiAqLyB9LFxuXHQvKjo6WyovMHgwNDBDLyo6Ol0qLzogeyAvKiBuOlwiQnJ0TmFtZUV4dFwiICovIH0sXG5cdC8qOjpbKi8weDA0MEQvKjo6XSovOiB7IC8qIG46XCJCcnRQQ0RIMTRcIiAqLyB9LFxuXHQvKjo6WyovMHgwNDBFLyo6Ol0qLzogeyAvKiBuOlwiQnJ0QmVnaW5QQ0RDYWxjTWVtMTRcIiwgKi8gVDoxIH0sXG5cdC8qOjpbKi8weDA0MEYvKjo6XSovOiB7IC8qIG46XCJCcnRFbmRQQ0RDYWxjTWVtMTRcIiwgKi8gVDotMSB9LFxuXHQvKjo6WyovMHgwNDEwLyo6Ol0qLzogeyAvKiBuOlwiQnJ0U1hUSDE0XCIgKi8gfSxcblx0Lyo6OlsqLzB4MDQxMS8qOjpdKi86IHsgLyogbjpcIkJydEJlZ2luU3BhcmtsaW5lR3JvdXBcIiwgKi8gVDoxIH0sXG5cdC8qOjpbKi8weDA0MTIvKjo6XSovOiB7IC8qIG46XCJCcnRFbmRTcGFya2xpbmVHcm91cFwiLCAqLyBUOi0xIH0sXG5cdC8qOjpbKi8weDA0MTMvKjo6XSovOiB7IC8qIG46XCJCcnRTcGFya2xpbmVcIiAqLyB9LFxuXHQvKjo6WyovMHgwNDE0Lyo6Ol0qLzogeyAvKiBuOlwiQnJ0U1hESTE0XCIgKi8gfSxcblx0Lyo6OlsqLzB4MDQxNS8qOjpdKi86IHsgLyogbjpcIkJydFdzRm10SW5mb0V4MTRcIiAqLyB9LFxuXHQvKjo6WyovMHgwNDE2Lyo6Ol0qLzogeyAvKiBuOlwiQnJ0QmVnaW5Db25kaXRpb25hbEZvcm1hdHRpbmcxNFwiLCAqLyBUOjEgfSxcblx0Lyo6OlsqLzB4MDQxNy8qOjpdKi86IHsgLyogbjpcIkJydEVuZENvbmRpdGlvbmFsRm9ybWF0dGluZzE0XCIsICovIFQ6LTEgfSxcblx0Lyo6OlsqLzB4MDQxOC8qOjpdKi86IHsgLyogbjpcIkJydEJlZ2luQ0ZSdWxlMTRcIiwgKi8gVDoxIH0sXG5cdC8qOjpbKi8weDA0MTkvKjo6XSovOiB7IC8qIG46XCJCcnRFbmRDRlJ1bGUxNFwiLCAqLyBUOi0xIH0sXG5cdC8qOjpbKi8weDA0MUEvKjo6XSovOiB7IC8qIG46XCJCcnRDRlZPMTRcIiAqLyB9LFxuXHQvKjo6WyovMHgwNDFCLyo6Ol0qLzogeyAvKiBuOlwiQnJ0QmVnaW5EYXRhYmFyMTRcIiwgKi8gVDoxIH0sXG5cdC8qOjpbKi8weDA0MUMvKjo6XSovOiB7IC8qIG46XCJCcnRCZWdpbkljb25TZXQxNFwiLCAqLyBUOjEgfSxcblx0Lyo6OlsqLzB4MDQxRC8qOjpdKi86IHsgLyogbjpcIkJydERWYWwxNFwiLCAqLyBmOiBwYXJzZV9CcnREVmFsMTQgfSxcblx0Lyo6OlsqLzB4MDQxRS8qOjpdKi86IHsgLyogbjpcIkJydEJlZ2luRFZhbHMxNFwiLCAqLyBUOjEgfSxcblx0Lyo6OlsqLzB4MDQxRi8qOjpdKi86IHsgLyogbjpcIkJydENvbG9yMTRcIiAqLyB9LFxuXHQvKjo6WyovMHgwNDIwLyo6Ol0qLzogeyAvKiBuOlwiQnJ0QmVnaW5TcGFya2xpbmVzXCIsICovIFQ6MSB9LFxuXHQvKjo6WyovMHgwNDIxLyo6Ol0qLzogeyAvKiBuOlwiQnJ0RW5kU3BhcmtsaW5lc1wiLCAqLyBUOi0xIH0sXG5cdC8qOjpbKi8weDA0MjIvKjo6XSovOiB7IC8qIG46XCJCcnRCZWdpblNwYXJrbGluZUdyb3Vwc1wiLCAqLyBUOjEgfSxcblx0Lyo6OlsqLzB4MDQyMy8qOjpdKi86IHsgLyogbjpcIkJydEVuZFNwYXJrbGluZUdyb3Vwc1wiLCAqLyBUOi0xIH0sXG5cdC8qOjpbKi8weDA0MjUvKjo6XSovOiB7IC8qIG46XCJCcnRTWFZEMTRcIiAqLyB9LFxuXHQvKjo6WyovMHgwNDI2Lyo6Ol0qLzogeyAvKiBuOlwiQnJ0QmVnaW5TWFZpZXcxNFwiLCAqLyBUOjEgfSxcblx0Lyo6OlsqLzB4MDQyNy8qOjpdKi86IHsgLyogbjpcIkJydEVuZFNYVmlldzE0XCIsICovIFQ6LTEgfSxcblx0Lyo6OlsqLzB4MDQyOC8qOjpdKi86IHsgLyogbjpcIkJydEJlZ2luU1hWaWV3MTZcIiwgKi8gVDoxIH0sXG5cdC8qOjpbKi8weDA0MjkvKjo6XSovOiB7IC8qIG46XCJCcnRFbmRTWFZpZXcxNlwiLCAqLyBUOi0xIH0sXG5cdC8qOjpbKi8weDA0MkEvKjo6XSovOiB7IC8qIG46XCJCcnRCZWdpblBDRDE0XCIsICovIFQ6MSB9LFxuXHQvKjo6WyovMHgwNDJCLyo6Ol0qLzogeyAvKiBuOlwiQnJ0RW5kUENEMTRcIiwgKi8gVDotMSB9LFxuXHQvKjo6WyovMHgwNDJDLyo6Ol0qLzogeyAvKiBuOlwiQnJ0QmVnaW5FeHRDb25uMTRcIiwgKi8gVDoxIH0sXG5cdC8qOjpbKi8weDA0MkQvKjo6XSovOiB7IC8qIG46XCJCcnRFbmRFeHRDb25uMTRcIiwgKi8gVDotMSB9LFxuXHQvKjo6WyovMHgwNDJFLyo6Ol0qLzogeyAvKiBuOlwiQnJ0QmVnaW5TbGljZXJDYWNoZUlEc1wiLCAqLyBUOjEgfSxcblx0Lyo6OlsqLzB4MDQyRi8qOjpdKi86IHsgLyogbjpcIkJydEVuZFNsaWNlckNhY2hlSURzXCIsICovIFQ6LTEgfSxcblx0Lyo6OlsqLzB4MDQzMC8qOjpdKi86IHsgLyogbjpcIkJydEJlZ2luU2xpY2VyQ2FjaGVJRFwiLCAqLyBUOjEgfSxcblx0Lyo6OlsqLzB4MDQzMS8qOjpdKi86IHsgLyogbjpcIkJydEVuZFNsaWNlckNhY2hlSURcIiwgKi8gVDotMSB9LFxuXHQvKjo6WyovMHgwNDMzLyo6Ol0qLzogeyAvKiBuOlwiQnJ0QmVnaW5TbGljZXJDYWNoZVwiLCAqLyBUOjEgfSxcblx0Lyo6OlsqLzB4MDQzNC8qOjpdKi86IHsgLyogbjpcIkJydEVuZFNsaWNlckNhY2hlXCIsICovIFQ6LTEgfSxcblx0Lyo6OlsqLzB4MDQzNS8qOjpdKi86IHsgLyogbjpcIkJydEJlZ2luU2xpY2VyQ2FjaGVEZWZcIiwgKi8gVDoxIH0sXG5cdC8qOjpbKi8weDA0MzYvKjo6XSovOiB7IC8qIG46XCJCcnRFbmRTbGljZXJDYWNoZURlZlwiLCAqLyBUOi0xIH0sXG5cdC8qOjpbKi8weDA0MzcvKjo6XSovOiB7IC8qIG46XCJCcnRCZWdpblNsaWNlcnNFeFwiLCAqLyBUOjEgfSxcblx0Lyo6OlsqLzB4MDQzOC8qOjpdKi86IHsgLyogbjpcIkJydEVuZFNsaWNlcnNFeFwiLCAqLyBUOi0xIH0sXG5cdC8qOjpbKi8weDA0MzkvKjo6XSovOiB7IC8qIG46XCJCcnRCZWdpblNsaWNlckV4XCIsICovIFQ6MSB9LFxuXHQvKjo6WyovMHgwNDNBLyo6Ol0qLzogeyAvKiBuOlwiQnJ0RW5kU2xpY2VyRXhcIiwgKi8gVDotMSB9LFxuXHQvKjo6WyovMHgwNDNCLyo6Ol0qLzogeyAvKiBuOlwiQnJ0QmVnaW5TbGljZXJcIiwgKi8gVDoxIH0sXG5cdC8qOjpbKi8weDA0M0MvKjo6XSovOiB7IC8qIG46XCJCcnRFbmRTbGljZXJcIiwgKi8gVDotMSB9LFxuXHQvKjo6WyovMHgwNDNELyo6Ol0qLzogeyAvKiBuOlwiQnJ0U2xpY2VyQ2FjaGVQaXZvdFRhYmxlc1wiICovIH0sXG5cdC8qOjpbKi8weDA0M0UvKjo6XSovOiB7IC8qIG46XCJCcnRCZWdpblNsaWNlckNhY2hlT2xhcEltcGxcIiwgKi8gVDoxIH0sXG5cdC8qOjpbKi8weDA0M0YvKjo6XSovOiB7IC8qIG46XCJCcnRFbmRTbGljZXJDYWNoZU9sYXBJbXBsXCIsICovIFQ6LTEgfSxcblx0Lyo6OlsqLzB4MDQ0MC8qOjpdKi86IHsgLyogbjpcIkJydEJlZ2luU2xpY2VyQ2FjaGVMZXZlbHNEYXRhXCIsICovIFQ6MSB9LFxuXHQvKjo6WyovMHgwNDQxLyo6Ol0qLzogeyAvKiBuOlwiQnJ0RW5kU2xpY2VyQ2FjaGVMZXZlbHNEYXRhXCIsICovIFQ6LTEgfSxcblx0Lyo6OlsqLzB4MDQ0Mi8qOjpdKi86IHsgLyogbjpcIkJydEJlZ2luU2xpY2VyQ2FjaGVMZXZlbERhdGFcIiwgKi8gVDoxIH0sXG5cdC8qOjpbKi8weDA0NDMvKjo6XSovOiB7IC8qIG46XCJCcnRFbmRTbGljZXJDYWNoZUxldmVsRGF0YVwiLCAqLyBUOi0xIH0sXG5cdC8qOjpbKi8weDA0NDQvKjo6XSovOiB7IC8qIG46XCJCcnRCZWdpblNsaWNlckNhY2hlU2lSYW5nZXNcIiwgKi8gVDoxIH0sXG5cdC8qOjpbKi8weDA0NDUvKjo6XSovOiB7IC8qIG46XCJCcnRFbmRTbGljZXJDYWNoZVNpUmFuZ2VzXCIsICovIFQ6LTEgfSxcblx0Lyo6OlsqLzB4MDQ0Ni8qOjpdKi86IHsgLyogbjpcIkJydEJlZ2luU2xpY2VyQ2FjaGVTaVJhbmdlXCIsICovIFQ6MSB9LFxuXHQvKjo6WyovMHgwNDQ3Lyo6Ol0qLzogeyAvKiBuOlwiQnJ0RW5kU2xpY2VyQ2FjaGVTaVJhbmdlXCIsICovIFQ6LTEgfSxcblx0Lyo6OlsqLzB4MDQ0OC8qOjpdKi86IHsgLyogbjpcIkJydFNsaWNlckNhY2hlT2xhcEl0ZW1cIiAqLyB9LFxuXHQvKjo6WyovMHgwNDQ5Lyo6Ol0qLzogeyAvKiBuOlwiQnJ0QmVnaW5TbGljZXJDYWNoZVNlbGVjdGlvbnNcIiwgKi8gVDoxIH0sXG5cdC8qOjpbKi8weDA0NEEvKjo6XSovOiB7IC8qIG46XCJCcnRTbGljZXJDYWNoZVNlbGVjdGlvblwiICovIH0sXG5cdC8qOjpbKi8weDA0NEIvKjo6XSovOiB7IC8qIG46XCJCcnRFbmRTbGljZXJDYWNoZVNlbGVjdGlvbnNcIiwgKi8gVDotMSB9LFxuXHQvKjo6WyovMHgwNDRDLyo6Ol0qLzogeyAvKiBuOlwiQnJ0QmVnaW5TbGljZXJDYWNoZU5hdGl2ZVwiLCAqLyBUOjEgfSxcblx0Lyo6OlsqLzB4MDQ0RC8qOjpdKi86IHsgLyogbjpcIkJydEVuZFNsaWNlckNhY2hlTmF0aXZlXCIsICovIFQ6LTEgfSxcblx0Lyo6OlsqLzB4MDQ0RS8qOjpdKi86IHsgLyogbjpcIkJydFNsaWNlckNhY2hlTmF0aXZlSXRlbVwiICovIH0sXG5cdC8qOjpbKi8weDA0NEYvKjo6XSovOiB7IC8qIG46XCJCcnRSYW5nZVByb3RlY3Rpb24xNFwiICovIH0sXG5cdC8qOjpbKi8weDA0NTAvKjo6XSovOiB7IC8qIG46XCJCcnRSYW5nZVByb3RlY3Rpb25Jc28xNFwiICovIH0sXG5cdC8qOjpbKi8weDA0NTEvKjo6XSovOiB7IC8qIG46XCJCcnRDZWxsSWdub3JlRUMxNFwiICovIH0sXG5cdC8qOjpbKi8weDA0NTcvKjo6XSovOiB7IC8qIG46XCJCcnRMaXN0MTRcIiAqLyB9LFxuXHQvKjo6WyovMHgwNDU4Lyo6Ol0qLzogeyAvKiBuOlwiQnJ0Q0ZJY29uXCIgKi8gfSxcblx0Lyo6OlsqLzB4MDQ1OS8qOjpdKi86IHsgLyogbjpcIkJydEJlZ2luU2xpY2VyQ2FjaGVzUGl2b3RDYWNoZUlEc1wiLCAqLyBUOjEgfSxcblx0Lyo6OlsqLzB4MDQ1QS8qOjpdKi86IHsgLyogbjpcIkJydEVuZFNsaWNlckNhY2hlc1Bpdm90Q2FjaGVJRHNcIiwgKi8gVDotMSB9LFxuXHQvKjo6WyovMHgwNDVCLyo6Ol0qLzogeyAvKiBuOlwiQnJ0QmVnaW5TbGljZXJzXCIsICovIFQ6MSB9LFxuXHQvKjo6WyovMHgwNDVDLyo6Ol0qLzogeyAvKiBuOlwiQnJ0RW5kU2xpY2Vyc1wiLCAqLyBUOi0xIH0sXG5cdC8qOjpbKi8weDA0NUQvKjo6XSovOiB7IC8qIG46XCJCcnRXYlByb3AxNFwiICovIH0sXG5cdC8qOjpbKi8weDA0NUUvKjo6XSovOiB7IC8qIG46XCJCcnRCZWdpblNYRWRpdFwiLCAqLyBUOjEgfSxcblx0Lyo6OlsqLzB4MDQ1Ri8qOjpdKi86IHsgLyogbjpcIkJydEVuZFNYRWRpdFwiLCAqLyBUOi0xIH0sXG5cdC8qOjpbKi8weDA0NjAvKjo6XSovOiB7IC8qIG46XCJCcnRCZWdpblNYRWRpdHNcIiwgKi8gVDoxIH0sXG5cdC8qOjpbKi8weDA0NjEvKjo6XSovOiB7IC8qIG46XCJCcnRFbmRTWEVkaXRzXCIsICovIFQ6LTEgfSxcblx0Lyo6OlsqLzB4MDQ2Mi8qOjpdKi86IHsgLyogbjpcIkJydEJlZ2luU1hDaGFuZ2VcIiwgKi8gVDoxIH0sXG5cdC8qOjpbKi8weDA0NjMvKjo6XSovOiB7IC8qIG46XCJCcnRFbmRTWENoYW5nZVwiLCAqLyBUOi0xIH0sXG5cdC8qOjpbKi8weDA0NjQvKjo6XSovOiB7IC8qIG46XCJCcnRCZWdpblNYQ2hhbmdlc1wiLCAqLyBUOjEgfSxcblx0Lyo6OlsqLzB4MDQ2NS8qOjpdKi86IHsgLyogbjpcIkJydEVuZFNYQ2hhbmdlc1wiLCAqLyBUOi0xIH0sXG5cdC8qOjpbKi8weDA0NjYvKjo6XSovOiB7IC8qIG46XCJCcnRTWFR1cGxlSXRlbXNcIiAqLyB9LFxuXHQvKjo6WyovMHgwNDY4Lyo6Ol0qLzogeyAvKiBuOlwiQnJ0QmVnaW5TbGljZXJTdHlsZVwiLCAqLyBUOjEgfSxcblx0Lyo6OlsqLzB4MDQ2OS8qOjpdKi86IHsgLyogbjpcIkJydEVuZFNsaWNlclN0eWxlXCIsICovIFQ6LTEgfSxcblx0Lyo6OlsqLzB4MDQ2QS8qOjpdKi86IHsgLyogbjpcIkJydFNsaWNlclN0eWxlRWxlbWVudFwiICovIH0sXG5cdC8qOjpbKi8weDA0NkIvKjo6XSovOiB7IC8qIG46XCJCcnRCZWdpblN0eWxlU2hlZXRFeHQxNFwiLCAqLyBUOjEgfSxcblx0Lyo6OlsqLzB4MDQ2Qy8qOjpdKi86IHsgLyogbjpcIkJydEVuZFN0eWxlU2hlZXRFeHQxNFwiLCAqLyBUOi0xIH0sXG5cdC8qOjpbKi8weDA0NkQvKjo6XSovOiB7IC8qIG46XCJCcnRCZWdpblNsaWNlckNhY2hlc1Bpdm90Q2FjaGVJRFwiLCAqLyBUOjEgfSxcblx0Lyo6OlsqLzB4MDQ2RS8qOjpdKi86IHsgLyogbjpcIkJydEVuZFNsaWNlckNhY2hlc1Bpdm90Q2FjaGVJRFwiLCAqLyBUOi0xIH0sXG5cdC8qOjpbKi8weDA0NkYvKjo6XSovOiB7IC8qIG46XCJCcnRCZWdpbkNvbmRpdGlvbmFsRm9ybWF0dGluZ3NcIiwgKi8gVDoxIH0sXG5cdC8qOjpbKi8weDA0NzAvKjo6XSovOiB7IC8qIG46XCJCcnRFbmRDb25kaXRpb25hbEZvcm1hdHRpbmdzXCIsICovIFQ6LTEgfSxcblx0Lyo6OlsqLzB4MDQ3MS8qOjpdKi86IHsgLyogbjpcIkJydEJlZ2luUENEQ2FsY01lbUV4dFwiLCAqLyBUOjEgfSxcblx0Lyo6OlsqLzB4MDQ3Mi8qOjpdKi86IHsgLyogbjpcIkJydEVuZFBDRENhbGNNZW1FeHRcIiwgKi8gVDotMSB9LFxuXHQvKjo6WyovMHgwNDczLyo6Ol0qLzogeyAvKiBuOlwiQnJ0QmVnaW5QQ0RDYWxjTWVtc0V4dFwiLCAqLyBUOjEgfSxcblx0Lyo6OlsqLzB4MDQ3NC8qOjpdKi86IHsgLyogbjpcIkJydEVuZFBDRENhbGNNZW1zRXh0XCIsICovIFQ6LTEgfSxcblx0Lyo6OlsqLzB4MDQ3NS8qOjpdKi86IHsgLyogbjpcIkJydFBDREZpZWxkMTRcIiAqLyB9LFxuXHQvKjo6WyovMHgwNDc2Lyo6Ol0qLzogeyAvKiBuOlwiQnJ0QmVnaW5TbGljZXJTdHlsZXNcIiwgKi8gVDoxIH0sXG5cdC8qOjpbKi8weDA0NzcvKjo6XSovOiB7IC8qIG46XCJCcnRFbmRTbGljZXJTdHlsZXNcIiwgKi8gVDotMSB9LFxuXHQvKjo6WyovMHgwNDc4Lyo6Ol0qLzogeyAvKiBuOlwiQnJ0QmVnaW5TbGljZXJTdHlsZUVsZW1lbnRzXCIsICovIFQ6MSB9LFxuXHQvKjo6WyovMHgwNDc5Lyo6Ol0qLzogeyAvKiBuOlwiQnJ0RW5kU2xpY2VyU3R5bGVFbGVtZW50c1wiLCAqLyBUOi0xIH0sXG5cdC8qOjpbKi8weDA0N0EvKjo6XSovOiB7IC8qIG46XCJCcnRDRlJ1bGVFeHRcIiAqLyB9LFxuXHQvKjo6WyovMHgwNDdCLyo6Ol0qLzogeyAvKiBuOlwiQnJ0QmVnaW5TWENvbmRGbXQxNFwiLCAqLyBUOjEgfSxcblx0Lyo6OlsqLzB4MDQ3Qy8qOjpdKi86IHsgLyogbjpcIkJydEVuZFNYQ29uZEZtdDE0XCIsICovIFQ6LTEgfSxcblx0Lyo6OlsqLzB4MDQ3RC8qOjpdKi86IHsgLyogbjpcIkJydEJlZ2luU1hDb25kRm10czE0XCIsICovIFQ6MSB9LFxuXHQvKjo6WyovMHgwNDdFLyo6Ol0qLzogeyAvKiBuOlwiQnJ0RW5kU1hDb25kRm10czE0XCIsICovIFQ6LTEgfSxcblx0Lyo6OlsqLzB4MDQ4MC8qOjpdKi86IHsgLyogbjpcIkJydEJlZ2luU29ydENvbmQxNFwiLCAqLyBUOjEgfSxcblx0Lyo6OlsqLzB4MDQ4MS8qOjpdKi86IHsgLyogbjpcIkJydEVuZFNvcnRDb25kMTRcIiwgKi8gVDotMSB9LFxuXHQvKjo6WyovMHgwNDgyLyo6Ol0qLzogeyAvKiBuOlwiQnJ0RW5kRFZhbHMxNFwiLCAqLyBUOi0xIH0sXG5cdC8qOjpbKi8weDA0ODMvKjo6XSovOiB7IC8qIG46XCJCcnRFbmRJY29uU2V0MTRcIiwgKi8gVDotMSB9LFxuXHQvKjo6WyovMHgwNDg0Lyo6Ol0qLzogeyAvKiBuOlwiQnJ0RW5kRGF0YWJhcjE0XCIsICovIFQ6LTEgfSxcblx0Lyo6OlsqLzB4MDQ4NS8qOjpdKi86IHsgLyogbjpcIkJydEJlZ2luQ29sb3JTY2FsZTE0XCIsICovIFQ6MSB9LFxuXHQvKjo6WyovMHgwNDg2Lyo6Ol0qLzogeyAvKiBuOlwiQnJ0RW5kQ29sb3JTY2FsZTE0XCIsICovIFQ6LTEgfSxcblx0Lyo6OlsqLzB4MDQ4Ny8qOjpdKi86IHsgLyogbjpcIkJydEJlZ2luU3hydWxlczE0XCIsICovIFQ6MSB9LFxuXHQvKjo6WyovMHgwNDg4Lyo6Ol0qLzogeyAvKiBuOlwiQnJ0RW5kU3hydWxlczE0XCIsICovIFQ6LTEgfSxcblx0Lyo6OlsqLzB4MDQ4OS8qOjpdKi86IHsgLyogbjpcIkJydEJlZ2luUFJ1bGUxNFwiLCAqLyBUOjEgfSxcblx0Lyo6OlsqLzB4MDQ4QS8qOjpdKi86IHsgLyogbjpcIkJydEVuZFBSdWxlMTRcIiwgKi8gVDotMSB9LFxuXHQvKjo6WyovMHgwNDhCLyo6Ol0qLzogeyAvKiBuOlwiQnJ0QmVnaW5QUkZpbHRlcnMxNFwiLCAqLyBUOjEgfSxcblx0Lyo6OlsqLzB4MDQ4Qy8qOjpdKi86IHsgLyogbjpcIkJydEVuZFBSRmlsdGVyczE0XCIsICovIFQ6LTEgfSxcblx0Lyo6OlsqLzB4MDQ4RC8qOjpdKi86IHsgLyogbjpcIkJydEJlZ2luUFJGaWx0ZXIxNFwiLCAqLyBUOjEgfSxcblx0Lyo6OlsqLzB4MDQ4RS8qOjpdKi86IHsgLyogbjpcIkJydEVuZFBSRmlsdGVyMTRcIiwgKi8gVDotMSB9LFxuXHQvKjo6WyovMHgwNDhGLyo6Ol0qLzogeyAvKiBuOlwiQnJ0QmVnaW5QUkZJdGVtMTRcIiwgKi8gVDoxIH0sXG5cdC8qOjpbKi8weDA0OTAvKjo6XSovOiB7IC8qIG46XCJCcnRFbmRQUkZJdGVtMTRcIiwgKi8gVDotMSB9LFxuXHQvKjo6WyovMHgwNDkxLyo6Ol0qLzogeyAvKiBuOlwiQnJ0QmVnaW5DZWxsSWdub3JlRUNzMTRcIiwgKi8gVDoxIH0sXG5cdC8qOjpbKi8weDA0OTIvKjo6XSovOiB7IC8qIG46XCJCcnRFbmRDZWxsSWdub3JlRUNzMTRcIiwgKi8gVDotMSB9LFxuXHQvKjo6WyovMHgwNDkzLyo6Ol0qLzogeyAvKiBuOlwiQnJ0RHhmMTRcIiAqLyB9LFxuXHQvKjo6WyovMHgwNDk0Lyo6Ol0qLzogeyAvKiBuOlwiQnJ0QmVnaW5EeEYxNHNcIiwgKi8gVDoxIH0sXG5cdC8qOjpbKi8weDA0OTUvKjo6XSovOiB7IC8qIG46XCJCcnRFbmREeGYxNHNcIiwgKi8gVDotMSB9LFxuXHQvKjo6WyovMHgwNDk5Lyo6Ol0qLzogeyAvKiBuOlwiQnJ0RmlsdGVyMTRcIiAqLyB9LFxuXHQvKjo6WyovMHgwNDlBLyo6Ol0qLzogeyAvKiBuOlwiQnJ0QmVnaW5DdXN0b21GaWx0ZXJzMTRcIiwgKi8gVDoxIH0sXG5cdC8qOjpbKi8weDA0OUMvKjo6XSovOiB7IC8qIG46XCJCcnRDdXN0b21GaWx0ZXIxNFwiICovIH0sXG5cdC8qOjpbKi8weDA0OUQvKjo6XSovOiB7IC8qIG46XCJCcnRJY29uRmlsdGVyMTRcIiAqLyB9LFxuXHQvKjo6WyovMHgwNDlFLyo6Ol0qLzogeyAvKiBuOlwiQnJ0UGl2b3RDYWNoZUNvbm5lY3Rpb25OYW1lXCIgKi8gfSxcblx0Lyo6OlsqLzB4MDgwMC8qOjpdKi86IHsgLyogbjpcIkJydEJlZ2luRGVjb3VwbGVkUGl2b3RDYWNoZUlEc1wiLCAqLyBUOjEgfSxcblx0Lyo6OlsqLzB4MDgwMS8qOjpdKi86IHsgLyogbjpcIkJydEVuZERlY291cGxlZFBpdm90Q2FjaGVJRHNcIiwgKi8gVDotMSB9LFxuXHQvKjo6WyovMHgwODAyLyo6Ol0qLzogeyAvKiBuOlwiQnJ0RGVjb3VwbGVkUGl2b3RDYWNoZUlEXCIgKi8gfSxcblx0Lyo6OlsqLzB4MDgwMy8qOjpdKi86IHsgLyogbjpcIkJydEJlZ2luUGl2b3RUYWJsZVJlZnNcIiwgKi8gVDoxIH0sXG5cdC8qOjpbKi8weDA4MDQvKjo6XSovOiB7IC8qIG46XCJCcnRFbmRQaXZvdFRhYmxlUmVmc1wiLCAqLyBUOi0xIH0sXG5cdC8qOjpbKi8weDA4MDUvKjo6XSovOiB7IC8qIG46XCJCcnRQaXZvdFRhYmxlUmVmXCIgKi8gfSxcblx0Lyo6OlsqLzB4MDgwNi8qOjpdKi86IHsgLyogbjpcIkJydFNsaWNlckNhY2hlQm9va1Bpdm90VGFibGVzXCIgKi8gfSxcblx0Lyo6OlsqLzB4MDgwNy8qOjpdKi86IHsgLyogbjpcIkJydEJlZ2luU3h2Y2VsbHNcIiwgKi8gVDoxIH0sXG5cdC8qOjpbKi8weDA4MDgvKjo6XSovOiB7IC8qIG46XCJCcnRFbmRTeHZjZWxsc1wiLCAqLyBUOi0xIH0sXG5cdC8qOjpbKi8weDA4MDkvKjo6XSovOiB7IC8qIG46XCJCcnRCZWdpblN4Um93XCIsICovIFQ6MSB9LFxuXHQvKjo6WyovMHgwODBBLyo6Ol0qLzogeyAvKiBuOlwiQnJ0RW5kU3hSb3dcIiwgKi8gVDotMSB9LFxuXHQvKjo6WyovMHgwODBDLyo6Ol0qLzogeyAvKiBuOlwiQnJ0UGNkQ2FsY01lbTE1XCIgKi8gfSxcblx0Lyo6OlsqLzB4MDgxMy8qOjpdKi86IHsgLyogbjpcIkJydFFzaTE1XCIgKi8gfSxcblx0Lyo6OlsqLzB4MDgxNC8qOjpdKi86IHsgLyogbjpcIkJydEJlZ2luV2ViRXh0ZW5zaW9uc1wiLCAqLyBUOjEgfSxcblx0Lyo6OlsqLzB4MDgxNS8qOjpdKi86IHsgLyogbjpcIkJydEVuZFdlYkV4dGVuc2lvbnNcIiwgKi8gVDotMSB9LFxuXHQvKjo6WyovMHgwODE2Lyo6Ol0qLzogeyAvKiBuOlwiQnJ0V2ViRXh0ZW5zaW9uXCIgKi8gfSxcblx0Lyo6OlsqLzB4MDgxNy8qOjpdKi86IHsgLyogbjpcIkJydEFic1BhdGgxNVwiICovIH0sXG5cdC8qOjpbKi8weDA4MTgvKjo6XSovOiB7IC8qIG46XCJCcnRCZWdpblBpdm90VGFibGVVSVNldHRpbmdzXCIsICovIFQ6MSB9LFxuXHQvKjo6WyovMHgwODE5Lyo6Ol0qLzogeyAvKiBuOlwiQnJ0RW5kUGl2b3RUYWJsZVVJU2V0dGluZ3NcIiwgKi8gVDotMSB9LFxuXHQvKjo6WyovMHgwODFCLyo6Ol0qLzogeyAvKiBuOlwiQnJ0VGFibGVTbGljZXJDYWNoZUlEc1wiICovIH0sXG5cdC8qOjpbKi8weDA4MUMvKjo6XSovOiB7IC8qIG46XCJCcnRUYWJsZVNsaWNlckNhY2hlSURcIiAqLyB9LFxuXHQvKjo6WyovMHgwODFELyo6Ol0qLzogeyAvKiBuOlwiQnJ0QmVnaW5UYWJsZVNsaWNlckNhY2hlXCIsICovIFQ6MSB9LFxuXHQvKjo6WyovMHgwODFFLyo6Ol0qLzogeyAvKiBuOlwiQnJ0RW5kVGFibGVTbGljZXJDYWNoZVwiLCAqLyBUOi0xIH0sXG5cdC8qOjpbKi8weDA4MUYvKjo6XSovOiB7IC8qIG46XCJCcnRTeEZpbHRlcjE1XCIgKi8gfSxcblx0Lyo6OlsqLzB4MDgyMC8qOjpdKi86IHsgLyogbjpcIkJydEJlZ2luVGltZWxpbmVDYWNoZVBpdm90Q2FjaGVJRHNcIiwgKi8gVDoxIH0sXG5cdC8qOjpbKi8weDA4MjEvKjo6XSovOiB7IC8qIG46XCJCcnRFbmRUaW1lbGluZUNhY2hlUGl2b3RDYWNoZUlEc1wiLCAqLyBUOi0xIH0sXG5cdC8qOjpbKi8weDA4MjIvKjo6XSovOiB7IC8qIG46XCJCcnRUaW1lbGluZUNhY2hlUGl2b3RDYWNoZUlEXCIgKi8gfSxcblx0Lyo6OlsqLzB4MDgyMy8qOjpdKi86IHsgLyogbjpcIkJydEJlZ2luVGltZWxpbmVDYWNoZUlEc1wiLCAqLyBUOjEgfSxcblx0Lyo6OlsqLzB4MDgyNC8qOjpdKi86IHsgLyogbjpcIkJydEVuZFRpbWVsaW5lQ2FjaGVJRHNcIiwgKi8gVDotMSB9LFxuXHQvKjo6WyovMHgwODI1Lyo6Ol0qLzogeyAvKiBuOlwiQnJ0QmVnaW5UaW1lbGluZUNhY2hlSURcIiwgKi8gVDoxIH0sXG5cdC8qOjpbKi8weDA4MjYvKjo6XSovOiB7IC8qIG46XCJCcnRFbmRUaW1lbGluZUNhY2hlSURcIiwgKi8gVDotMSB9LFxuXHQvKjo6WyovMHgwODI3Lyo6Ol0qLzogeyAvKiBuOlwiQnJ0QmVnaW5UaW1lbGluZXNFeFwiLCAqLyBUOjEgfSxcblx0Lyo6OlsqLzB4MDgyOC8qOjpdKi86IHsgLyogbjpcIkJydEVuZFRpbWVsaW5lc0V4XCIsICovIFQ6LTEgfSxcblx0Lyo6OlsqLzB4MDgyOS8qOjpdKi86IHsgLyogbjpcIkJydEJlZ2luVGltZWxpbmVFeFwiLCAqLyBUOjEgfSxcblx0Lyo6OlsqLzB4MDgyQS8qOjpdKi86IHsgLyogbjpcIkJydEVuZFRpbWVsaW5lRXhcIiwgKi8gVDotMSB9LFxuXHQvKjo6WyovMHgwODJCLyo6Ol0qLzogeyAvKiBuOlwiQnJ0V29ya0Jvb2tQcjE1XCIgKi8gfSxcblx0Lyo6OlsqLzB4MDgyQy8qOjpdKi86IHsgLyogbjpcIkJydFBDREgxNVwiICovIH0sXG5cdC8qOjpbKi8weDA4MkQvKjo6XSovOiB7IC8qIG46XCJCcnRCZWdpblRpbWVsaW5lU3R5bGVcIiwgKi8gVDoxIH0sXG5cdC8qOjpbKi8weDA4MkUvKjo6XSovOiB7IC8qIG46XCJCcnRFbmRUaW1lbGluZVN0eWxlXCIsICovIFQ6LTEgfSxcblx0Lyo6OlsqLzB4MDgyRi8qOjpdKi86IHsgLyogbjpcIkJydFRpbWVsaW5lU3R5bGVFbGVtZW50XCIgKi8gfSxcblx0Lyo6OlsqLzB4MDgzMC8qOjpdKi86IHsgLyogbjpcIkJydEJlZ2luVGltZWxpbmVTdHlsZXNoZWV0RXh0MTVcIiwgKi8gVDoxIH0sXG5cdC8qOjpbKi8weDA4MzEvKjo6XSovOiB7IC8qIG46XCJCcnRFbmRUaW1lbGluZVN0eWxlc2hlZXRFeHQxNVwiLCAqLyBUOi0xIH0sXG5cdC8qOjpbKi8weDA4MzIvKjo6XSovOiB7IC8qIG46XCJCcnRCZWdpblRpbWVsaW5lU3R5bGVzXCIsICovIFQ6MSB9LFxuXHQvKjo6WyovMHgwODMzLyo6Ol0qLzogeyAvKiBuOlwiQnJ0RW5kVGltZWxpbmVTdHlsZXNcIiwgKi8gVDotMSB9LFxuXHQvKjo6WyovMHgwODM0Lyo6Ol0qLzogeyAvKiBuOlwiQnJ0QmVnaW5UaW1lbGluZVN0eWxlRWxlbWVudHNcIiwgKi8gVDoxIH0sXG5cdC8qOjpbKi8weDA4MzUvKjo6XSovOiB7IC8qIG46XCJCcnRFbmRUaW1lbGluZVN0eWxlRWxlbWVudHNcIiwgKi8gVDotMSB9LFxuXHQvKjo6WyovMHgwODM2Lyo6Ol0qLzogeyAvKiBuOlwiQnJ0RHhmMTVcIiAqLyB9LFxuXHQvKjo6WyovMHgwODM3Lyo6Ol0qLzogeyAvKiBuOlwiQnJ0QmVnaW5EeGZzMTVcIiwgKi8gVDoxIH0sXG5cdC8qOjpbKi8weDA4MzgvKjo6XSovOiB7IC8qIG46XCJCcnRFbmREeGZzMTVcIiwgKi8gVDotMSB9LFxuXHQvKjo6WyovMHgwODM5Lyo6Ol0qLzogeyAvKiBuOlwiQnJ0U2xpY2VyQ2FjaGVIaWRlSXRlbXNXaXRoTm9EYXRhXCIgKi8gfSxcblx0Lyo6OlsqLzB4MDgzQS8qOjpdKi86IHsgLyogbjpcIkJydEJlZ2luSXRlbVVuaXF1ZU5hbWVzXCIsICovIFQ6MSB9LFxuXHQvKjo6WyovMHgwODNCLyo6Ol0qLzogeyAvKiBuOlwiQnJ0RW5kSXRlbVVuaXF1ZU5hbWVzXCIsICovIFQ6LTEgfSxcblx0Lyo6OlsqLzB4MDgzQy8qOjpdKi86IHsgLyogbjpcIkJydEl0ZW1VbmlxdWVOYW1lXCIgKi8gfSxcblx0Lyo6OlsqLzB4MDgzRC8qOjpdKi86IHsgLyogbjpcIkJydEJlZ2luRXh0Q29ubjE1XCIsICovIFQ6MSB9LFxuXHQvKjo6WyovMHgwODNFLyo6Ol0qLzogeyAvKiBuOlwiQnJ0RW5kRXh0Q29ubjE1XCIsICovIFQ6LTEgfSxcblx0Lyo6OlsqLzB4MDgzRi8qOjpdKi86IHsgLyogbjpcIkJydEJlZ2luT2xlZGJQcjE1XCIsICovIFQ6MSB9LFxuXHQvKjo6WyovMHgwODQwLyo6Ol0qLzogeyAvKiBuOlwiQnJ0RW5kT2xlZGJQcjE1XCIsICovIFQ6LTEgfSxcblx0Lyo6OlsqLzB4MDg0MS8qOjpdKi86IHsgLyogbjpcIkJydEJlZ2luRGF0YUZlZWRQcjE1XCIsICovIFQ6MSB9LFxuXHQvKjo6WyovMHgwODQyLyo6Ol0qLzogeyAvKiBuOlwiQnJ0RW5kRGF0YUZlZWRQcjE1XCIsICovIFQ6LTEgfSxcblx0Lyo6OlsqLzB4MDg0My8qOjpdKi86IHsgLyogbjpcIkJydFRleHRQcjE1XCIgKi8gfSxcblx0Lyo6OlsqLzB4MDg0NC8qOjpdKi86IHsgLyogbjpcIkJydFJhbmdlUHIxNVwiICovIH0sXG5cdC8qOjpbKi8weDA4NDUvKjo6XSovOiB7IC8qIG46XCJCcnREYkNvbW1hbmQxNVwiICovIH0sXG5cdC8qOjpbKi8weDA4NDYvKjo6XSovOiB7IC8qIG46XCJCcnRCZWdpbkRiVGFibGVzMTVcIiwgKi8gVDoxIH0sXG5cdC8qOjpbKi8weDA4NDcvKjo6XSovOiB7IC8qIG46XCJCcnRFbmREYlRhYmxlczE1XCIsICovIFQ6LTEgfSxcblx0Lyo6OlsqLzB4MDg0OC8qOjpdKi86IHsgLyogbjpcIkJydERiVGFibGUxNVwiICovIH0sXG5cdC8qOjpbKi8weDA4NDkvKjo6XSovOiB7IC8qIG46XCJCcnRCZWdpbkRhdGFNb2RlbFwiLCAqLyBUOjEgfSxcblx0Lyo6OlsqLzB4MDg0QS8qOjpdKi86IHsgLyogbjpcIkJydEVuZERhdGFNb2RlbFwiLCAqLyBUOi0xIH0sXG5cdC8qOjpbKi8weDA4NEIvKjo6XSovOiB7IC8qIG46XCJCcnRCZWdpbk1vZGVsVGFibGVzXCIsICovIFQ6MSB9LFxuXHQvKjo6WyovMHgwODRDLyo6Ol0qLzogeyAvKiBuOlwiQnJ0RW5kTW9kZWxUYWJsZXNcIiwgKi8gVDotMSB9LFxuXHQvKjo6WyovMHgwODRELyo6Ol0qLzogeyAvKiBuOlwiQnJ0TW9kZWxUYWJsZVwiICovIH0sXG5cdC8qOjpbKi8weDA4NEUvKjo6XSovOiB7IC8qIG46XCJCcnRCZWdpbk1vZGVsUmVsYXRpb25zaGlwc1wiLCAqLyBUOjEgfSxcblx0Lyo6OlsqLzB4MDg0Ri8qOjpdKi86IHsgLyogbjpcIkJydEVuZE1vZGVsUmVsYXRpb25zaGlwc1wiLCAqLyBUOi0xIH0sXG5cdC8qOjpbKi8weDA4NTAvKjo6XSovOiB7IC8qIG46XCJCcnRNb2RlbFJlbGF0aW9uc2hpcFwiICovIH0sXG5cdC8qOjpbKi8weDA4NTEvKjo6XSovOiB7IC8qIG46XCJCcnRCZWdpbkVDVHh0V2l6MTVcIiwgKi8gVDoxIH0sXG5cdC8qOjpbKi8weDA4NTIvKjo6XSovOiB7IC8qIG46XCJCcnRFbmRFQ1R4dFdpejE1XCIsICovIFQ6LTEgfSxcblx0Lyo6OlsqLzB4MDg1My8qOjpdKi86IHsgLyogbjpcIkJydEJlZ2luRUNUV0ZsZEluZm9Mc3QxNVwiLCAqLyBUOjEgfSxcblx0Lyo6OlsqLzB4MDg1NC8qOjpdKi86IHsgLyogbjpcIkJydEVuZEVDVFdGbGRJbmZvTHN0MTVcIiwgKi8gVDotMSB9LFxuXHQvKjo6WyovMHgwODU1Lyo6Ol0qLzogeyAvKiBuOlwiQnJ0QmVnaW5FQ1RXRmxkSW5mbzE1XCIsICovIFQ6MSB9LFxuXHQvKjo6WyovMHgwODU2Lyo6Ol0qLzogeyAvKiBuOlwiQnJ0RmllbGRMaXN0QWN0aXZlSXRlbVwiICovIH0sXG5cdC8qOjpbKi8weDA4NTcvKjo6XSovOiB7IC8qIG46XCJCcnRQaXZvdENhY2hlSWRWZXJzaW9uXCIgKi8gfSxcblx0Lyo6OlsqLzB4MDg1OC8qOjpdKi86IHsgLyogbjpcIkJydFNYREkxNVwiICovIH0sXG5cdC8qOjpbKi8weDA4NTkvKjo6XSovOiB7IC8qIG46XCJCcnRCZWdpbk1vZGVsVGltZUdyb3VwaW5nc1wiLCAqLyBUOjEgfSxcblx0Lyo6OlsqLzB4MDg1QS8qOjpdKi86IHsgLyogbjpcIkJydEVuZE1vZGVsVGltZUdyb3VwaW5nc1wiLCAqLyBUOi0xIH0sXG5cdC8qOjpbKi8weDA4NUIvKjo6XSovOiB7IC8qIG46XCJCcnRCZWdpbk1vZGVsVGltZUdyb3VwaW5nXCIsICovIFQ6MSB9LFxuXHQvKjo6WyovMHgwODVDLyo6Ol0qLzogeyAvKiBuOlwiQnJ0RW5kTW9kZWxUaW1lR3JvdXBpbmdcIiwgKi8gVDotMSB9LFxuXHQvKjo6WyovMHgwODVELyo6Ol0qLzogeyAvKiBuOlwiQnJ0TW9kZWxUaW1lR3JvdXBpbmdDYWxjQ29sXCIgKi8gfSxcblx0Lyo6OlsqLzB4MEMwMC8qOjpdKi86IHsgLyogbjpcIkJydFVpZFwiICovIH0sXG5cdC8qOjpbKi8weDBDMDEvKjo6XSovOiB7IC8qIG46XCJCcnRSZXZpc2lvblB0clwiICovIH0sXG5cdC8qOjpbKi8weDEwMDAvKjo6XSovOiB7IC8qIG46XCJCcnRCZWdpbkR5bmFtaWNBcnJheVByXCIsICovIFQ6MSB9LFxuXHQvKjo6WyovMHgxMDAxLyo6Ol0qLzogeyAvKiBuOlwiQnJ0RW5kRHluYW1pY0FycmF5UHJcIiwgKi8gVDotMSB9LFxuXHQvKjo6WyovMHgxMzhBLyo6Ol0qLzogeyAvKiBuOlwiQnJ0QmVnaW5SaWNoVmFsdWVCbG9ja1wiLCAqLyBUOjEgfSxcblx0Lyo6OlsqLzB4MTM4Qi8qOjpdKi86IHsgLyogbjpcIkJydEVuZFJpY2hWYWx1ZUJsb2NrXCIsICovIFQ6LTEgfSxcblx0Lyo6OlsqLzB4MTNEOS8qOjpdKi86IHsgLyogbjpcIkJydEJlZ2luUmljaEZpbHRlcnNcIiwgKi8gVDoxIH0sXG5cdC8qOjpbKi8weDEzREEvKjo6XSovOiB7IC8qIG46XCJCcnRFbmRSaWNoRmlsdGVyc1wiLCAqLyBUOi0xIH0sXG5cdC8qOjpbKi8weDEzREIvKjo6XSovOiB7IC8qIG46XCJCcnRSaWNoRmlsdGVyXCIgKi8gfSxcblx0Lyo6OlsqLzB4MTNEQy8qOjpdKi86IHsgLyogbjpcIkJydEJlZ2luUmljaEZpbHRlckNvbHVtblwiLCAqLyBUOjEgfSxcblx0Lyo6OlsqLzB4MTNERC8qOjpdKi86IHsgLyogbjpcIkJydEVuZFJpY2hGaWx0ZXJDb2x1bW5cIiwgKi8gVDotMSB9LFxuXHQvKjo6WyovMHgxM0RFLyo6Ol0qLzogeyAvKiBuOlwiQnJ0QmVnaW5DdXN0b21SaWNoRmlsdGVyc1wiLCAqLyBUOjEgfSxcblx0Lyo6OlsqLzB4MTNERi8qOjpdKi86IHsgLyogbjpcIkJydEVuZEN1c3RvbVJpY2hGaWx0ZXJzXCIsICovIFQ6LTEgfSxcblx0Lyo6OlsqLzB4MTNFMC8qOjpdKi86IHsgLyogbjpcIkJydEN1c3RvbVJpY2hGaWx0ZXJcIiAqLyB9LFxuXHQvKjo6WyovMHgxM0UxLyo6Ol0qLzogeyAvKiBuOlwiQnJ0VG9wMTBSaWNoRmlsdGVyXCIgKi8gfSxcblx0Lyo6OlsqLzB4MTNFMi8qOjpdKi86IHsgLyogbjpcIkJydER5bmFtaWNSaWNoRmlsdGVyXCIgKi8gfSxcblx0Lyo6OlsqLzB4MTNFNC8qOjpdKi86IHsgLyogbjpcIkJydEJlZ2luUmljaFNvcnRDb25kaXRpb25cIiwgKi8gVDoxIH0sXG5cdC8qOjpbKi8weDEzRTUvKjo6XSovOiB7IC8qIG46XCJCcnRFbmRSaWNoU29ydENvbmRpdGlvblwiLCAqLyBUOi0xIH0sXG5cdC8qOjpbKi8weDEzRTYvKjo6XSovOiB7IC8qIG46XCJCcnRSaWNoRmlsdGVyRGF0ZUdyb3VwSXRlbVwiICovIH0sXG5cdC8qOjpbKi8weDEzRTcvKjo6XSovOiB7IC8qIG46XCJCcnRCZWdpbkNhbGNGZWF0dXJlc1wiLCAqLyBUOjEgfSxcblx0Lyo6OlsqLzB4MTNFOC8qOjpdKi86IHsgLyogbjpcIkJydEVuZENhbGNGZWF0dXJlc1wiLCAqLyBUOi0xIH0sXG5cdC8qOjpbKi8weDEzRTkvKjo6XSovOiB7IC8qIG46XCJCcnRDYWxjRmVhdHVyZVwiICovIH0sXG5cdC8qOjpbKi8weDEzRUIvKjo6XSovOiB7IC8qIG46XCJCcnRFeHRlcm5hbExpbmtzUHJcIiAqLyB9LFxuXHQvKjo6WyovMHhGRkZGLyo6Ol0qLzogeyBuOlwiXCIgfVxufTtcblxuLyogW01TLVhMU10gMi4zIFJlY29yZCBFbnVtZXJhdGlvbiAoYW5kIG90aGVyIHNvdXJjZXMpICovXG52YXIgWExTUmVjb3JkRW51bSA9IHtcblx0LyogW01TLVhMU10gMi4zIFJlY29yZCBFbnVtZXJhdGlvbiAyMDIxLTA4LTE3ICovXG5cdC8qOjpbKi8weDAwMDYvKjo6XSovOiB7IC8qIG46XCJGb3JtdWxhXCIsICovIGY6cGFyc2VfRm9ybXVsYSB9LFxuXHQvKjo6WyovMHgwMDBhLyo6Ol0qLzogeyAvKiBuOlwiRU9GXCIsICovIGY6cGFyc2Vub29wMiB9LFxuXHQvKjo6WyovMHgwMDBjLyo6Ol0qLzogeyAvKiBuOlwiQ2FsY0NvdW50XCIsICovIGY6cGFyc2V1aW50MTYgfSwgLy9cblx0Lyo6OlsqLzB4MDAwZC8qOjpdKi86IHsgLyogbjpcIkNhbGNNb2RlXCIsICovIGY6cGFyc2V1aW50MTYgfSwgLy9cblx0Lyo6OlsqLzB4MDAwZS8qOjpdKi86IHsgLyogbjpcIkNhbGNQcmVjaXNpb25cIiwgKi8gZjpwYXJzZWJvb2wgfSwgLy9cblx0Lyo6OlsqLzB4MDAwZi8qOjpdKi86IHsgLyogbjpcIkNhbGNSZWZNb2RlXCIsICovIGY6cGFyc2Vib29sIH0sIC8vXG5cdC8qOjpbKi8weDAwMTAvKjo6XSovOiB7IC8qIG46XCJDYWxjRGVsdGFcIiwgKi8gZjpwYXJzZV9YbnVtIH0sIC8vXG5cdC8qOjpbKi8weDAwMTEvKjo6XSovOiB7IC8qIG46XCJDYWxjSXRlclwiLCAqLyBmOnBhcnNlYm9vbCB9LCAvL1xuXHQvKjo6WyovMHgwMDEyLyo6Ol0qLzogeyAvKiBuOlwiUHJvdGVjdFwiLCAqLyBmOnBhcnNlYm9vbCB9LFxuXHQvKjo6WyovMHgwMDEzLyo6Ol0qLzogeyAvKiBuOlwiUGFzc3dvcmRcIiwgKi8gZjpwYXJzZXVpbnQxNiB9LFxuXHQvKjo6WyovMHgwMDE0Lyo6Ol0qLzogeyAvKiBuOlwiSGVhZGVyXCIsICovIGY6cGFyc2VfWExIZWFkZXJGb290ZXIgfSxcblx0Lyo6OlsqLzB4MDAxNS8qOjpdKi86IHsgLyogbjpcIkZvb3RlclwiLCAqLyBmOnBhcnNlX1hMSGVhZGVyRm9vdGVyIH0sXG5cdC8qOjpbKi8weDAwMTcvKjo6XSovOiB7IC8qIG46XCJFeHRlcm5TaGVldFwiLCAqLyBmOnBhcnNlX0V4dGVyblNoZWV0IH0sXG5cdC8qOjpbKi8weDAwMTgvKjo6XSovOiB7IC8qIG46XCJMYmxcIiwgKi8gZjpwYXJzZV9MYmwgfSxcblx0Lyo6OlsqLzB4MDAxOS8qOjpdKi86IHsgLyogbjpcIldpblByb3RlY3RcIiwgKi8gZjpwYXJzZWJvb2wgfSxcblx0Lyo6OlsqLzB4MDAxYS8qOjpdKi86IHsgLyogbjpcIlZlcnRpY2FsUGFnZUJyZWFrc1wiLCAqLyB9LFxuXHQvKjo6WyovMHgwMDFiLyo6Ol0qLzogeyAvKiBuOlwiSG9yaXpvbnRhbFBhZ2VCcmVha3NcIiwgKi8gfSxcblx0Lyo6OlsqLzB4MDAxYy8qOjpdKi86IHsgLyogbjpcIk5vdGVcIiwgKi8gZjpwYXJzZV9Ob3RlIH0sXG5cdC8qOjpbKi8weDAwMWQvKjo6XSovOiB7IC8qIG46XCJTZWxlY3Rpb25cIiwgKi8gfSxcblx0Lyo6OlsqLzB4MDAyMi8qOjpdKi86IHsgLyogbjpcIkRhdGUxOTA0XCIsICovIGY6cGFyc2Vib29sIH0sXG5cdC8qOjpbKi8weDAwMjMvKjo6XSovOiB7IC8qIG46XCJFeHRlcm5OYW1lXCIsICovIGY6cGFyc2VfRXh0ZXJuTmFtZSB9LFxuXHQvKjo6WyovMHgwMDI2Lyo6Ol0qLzogeyAvKiBuOlwiTGVmdE1hcmdpblwiLCAqLyBmOnBhcnNlX1hudW0gfSwgLy8gKlxuXHQvKjo6WyovMHgwMDI3Lyo6Ol0qLzogeyAvKiBuOlwiUmlnaHRNYXJnaW5cIiwgKi8gZjpwYXJzZV9YbnVtIH0sIC8vICpcblx0Lyo6OlsqLzB4MDAyOC8qOjpdKi86IHsgLyogbjpcIlRvcE1hcmdpblwiLCAqLyBmOnBhcnNlX1hudW0gfSwgLy8gKlxuXHQvKjo6WyovMHgwMDI5Lyo6Ol0qLzogeyAvKiBuOlwiQm90dG9tTWFyZ2luXCIsICovIGY6cGFyc2VfWG51bSB9LCAvLyAqXG5cdC8qOjpbKi8weDAwMmEvKjo6XSovOiB7IC8qIG46XCJQcmludFJvd0NvbFwiLCAqLyBmOnBhcnNlYm9vbCB9LFxuXHQvKjo6WyovMHgwMDJiLyo6Ol0qLzogeyAvKiBuOlwiUHJpbnRHcmlkXCIsICovIGY6cGFyc2Vib29sIH0sXG5cdC8qOjpbKi8weDAwMmYvKjo6XSovOiB7IC8qIG46XCJGaWxlUGFzc1wiLCAqLyBmOnBhcnNlX0ZpbGVQYXNzIH0sXG5cdC8qOjpbKi8weDAwMzEvKjo6XSovOiB7IC8qIG46XCJGb250XCIsICovIGY6cGFyc2VfRm9udCB9LFxuXHQvKjo6WyovMHgwMDMzLyo6Ol0qLzogeyAvKiBuOlwiUHJpbnRTaXplXCIsICovIGY6cGFyc2V1aW50MTYgfSxcblx0Lyo6OlsqLzB4MDAzYy8qOjpdKi86IHsgLyogbjpcIkNvbnRpbnVlXCIsICovIH0sXG5cdC8qOjpbKi8weDAwM2QvKjo6XSovOiB7IC8qIG46XCJXaW5kb3cxXCIsICovIGY6cGFyc2VfV2luZG93MSB9LFxuXHQvKjo6WyovMHgwMDQwLyo6Ol0qLzogeyAvKiBuOlwiQmFja3VwXCIsICovIGY6cGFyc2Vib29sIH0sXG5cdC8qOjpbKi8weDAwNDEvKjo6XSovOiB7IC8qIG46XCJQYW5lXCIsICovIGY6cGFyc2VfUGFuZSB9LFxuXHQvKjo6WyovMHgwMDQyLyo6Ol0qLzogeyAvKiBuOlwiQ29kZVBhZ2VcIiwgKi8gZjpwYXJzZXVpbnQxNiB9LFxuXHQvKjo6WyovMHgwMDRkLyo6Ol0qLzogeyAvKiBuOlwiUGxzXCIsICovIH0sXG5cdC8qOjpbKi8weDAwNTAvKjo6XSovOiB7IC8qIG46XCJEQ29uXCIsICovIH0sXG5cdC8qOjpbKi8weDAwNTEvKjo6XSovOiB7IC8qIG46XCJEQ29uUmVmXCIsICovIH0sXG5cdC8qOjpbKi8weDAwNTIvKjo6XSovOiB7IC8qIG46XCJEQ29uTmFtZVwiLCAqLyB9LFxuXHQvKjo6WyovMHgwMDU1Lyo6Ol0qLzogeyAvKiBuOlwiRGVmQ29sV2lkdGhcIiwgKi8gZjpwYXJzZXVpbnQxNiB9LFxuXHQvKjo6WyovMHgwMDU5Lyo6Ol0qLzogeyAvKiBuOlwiWENUXCIsICovIH0sXG5cdC8qOjpbKi8weDAwNWEvKjo6XSovOiB7IC8qIG46XCJDUk5cIiwgKi8gfSxcblx0Lyo6OlsqLzB4MDA1Yi8qOjpdKi86IHsgLyogbjpcIkZpbGVTaGFyaW5nXCIsICovIH0sXG5cdC8qOjpbKi8weDAwNWMvKjo6XSovOiB7IC8qIG46XCJXcml0ZUFjY2Vzc1wiLCAqLyBmOnBhcnNlX1dyaXRlQWNjZXNzIH0sXG5cdC8qOjpbKi8weDAwNWQvKjo6XSovOiB7IC8qIG46XCJPYmpcIiwgKi8gZjpwYXJzZV9PYmogfSxcblx0Lyo6OlsqLzB4MDA1ZS8qOjpdKi86IHsgLyogbjpcIlVuY2FsY2VkXCIsICovIH0sXG5cdC8qOjpbKi8weDAwNWYvKjo6XSovOiB7IC8qIG46XCJDYWxjU2F2ZVJlY2FsY1wiLCAqLyBmOnBhcnNlYm9vbCB9LCAvL1xuXHQvKjo6WyovMHgwMDYwLyo6Ol0qLzogeyAvKiBuOlwiVGVtcGxhdGVcIiwgKi8gfSxcblx0Lyo6OlsqLzB4MDA2MS8qOjpdKi86IHsgLyogbjpcIkludGxcIiwgKi8gfSxcblx0Lyo6OlsqLzB4MDA2My8qOjpdKi86IHsgLyogbjpcIk9ialByb3RlY3RcIiwgKi8gZjpwYXJzZWJvb2wgfSxcblx0Lyo6OlsqLzB4MDA3ZC8qOjpdKi86IHsgLyogbjpcIkNvbEluZm9cIiwgKi8gZjpwYXJzZV9Db2xJbmZvIH0sXG5cdC8qOjpbKi8weDAwODAvKjo6XSovOiB7IC8qIG46XCJHdXRzXCIsICovIGY6cGFyc2VfR3V0cyB9LFxuXHQvKjo6WyovMHgwMDgxLyo6Ol0qLzogeyAvKiBuOlwiV3NCb29sXCIsICovIGY6cGFyc2VfV3NCb29sIH0sXG5cdC8qOjpbKi8weDAwODIvKjo6XSovOiB7IC8qIG46XCJHcmlkU2V0XCIsICovIGY6cGFyc2V1aW50MTYgfSxcblx0Lyo6OlsqLzB4MDA4My8qOjpdKi86IHsgLyogbjpcIkhDZW50ZXJcIiwgKi8gZjpwYXJzZWJvb2wgfSxcblx0Lyo6OlsqLzB4MDA4NC8qOjpdKi86IHsgLyogbjpcIlZDZW50ZXJcIiwgKi8gZjpwYXJzZWJvb2wgfSxcblx0Lyo6OlsqLzB4MDA4NS8qOjpdKi86IHsgLyogbjpcIkJvdW5kU2hlZXQ4XCIsICovIGY6cGFyc2VfQm91bmRTaGVldDggfSxcblx0Lyo6OlsqLzB4MDA4Ni8qOjpdKi86IHsgLyogbjpcIldyaXRlUHJvdGVjdFwiLCAqLyB9LFxuXHQvKjo6WyovMHgwMDhjLyo6Ol0qLzogeyAvKiBuOlwiQ291bnRyeVwiLCAqLyBmOnBhcnNlX0NvdW50cnkgfSxcblx0Lyo6OlsqLzB4MDA4ZC8qOjpdKi86IHsgLyogbjpcIkhpZGVPYmpcIiwgKi8gZjpwYXJzZXVpbnQxNiB9LFxuXHQvKjo6WyovMHgwMDkwLyo6Ol0qLzogeyAvKiBuOlwiU29ydFwiLCAqLyB9LFxuXHQvKjo6WyovMHgwMDkyLyo6Ol0qLzogeyAvKiBuOlwiUGFsZXR0ZVwiLCAqLyBmOnBhcnNlX1BhbGV0dGUgfSxcblx0Lyo6OlsqLzB4MDA5Ny8qOjpdKi86IHsgLyogbjpcIlN5bmNcIiwgKi8gfSxcblx0Lyo6OlsqLzB4MDA5OC8qOjpdKi86IHsgLyogbjpcIkxQclwiLCAqLyB9LFxuXHQvKjo6WyovMHgwMDk5Lyo6Ol0qLzogeyAvKiBuOlwiRHhHQ29sXCIsICovIH0sXG5cdC8qOjpbKi8weDAwOWEvKjo6XSovOiB7IC8qIG46XCJGbkdyb3VwTmFtZVwiLCAqLyB9LFxuXHQvKjo6WyovMHgwMDliLyo6Ol0qLzogeyAvKiBuOlwiRmlsdGVyTW9kZVwiLCAqLyB9LFxuXHQvKjo6WyovMHgwMDljLyo6Ol0qLzogeyAvKiBuOlwiQnVpbHRJbkZuR3JvdXBDb3VudFwiLCAqLyBmOnBhcnNldWludDE2IH0sXG5cdC8qOjpbKi8weDAwOWQvKjo6XSovOiB7IC8qIG46XCJBdXRvRmlsdGVySW5mb1wiLCAqLyB9LFxuXHQvKjo6WyovMHgwMDllLyo6Ol0qLzogeyAvKiBuOlwiQXV0b0ZpbHRlclwiLCAqLyB9LFxuXHQvKjo6WyovMHgwMGEwLyo6Ol0qLzogeyAvKiBuOlwiU2NsXCIsICovIGY6cGFyc2VfU2NsIH0sXG5cdC8qOjpbKi8weDAwYTEvKjo6XSovOiB7IC8qIG46XCJTZXR1cFwiLCAqLyBmOnBhcnNlX1NldHVwIH0sXG5cdC8qOjpbKi8weDAwYWUvKjo6XSovOiB7IC8qIG46XCJTY2VuTWFuXCIsICovIH0sXG5cdC8qOjpbKi8weDAwYWYvKjo6XSovOiB7IC8qIG46XCJTQ0VOQVJJT1wiLCAqLyB9LFxuXHQvKjo6WyovMHgwMGIwLyo6Ol0qLzogeyAvKiBuOlwiU3hWaWV3XCIsICovIH0sXG5cdC8qOjpbKi8weDAwYjEvKjo6XSovOiB7IC8qIG46XCJTeHZkXCIsICovIH0sXG5cdC8qOjpbKi8weDAwYjIvKjo6XSovOiB7IC8qIG46XCJTWFZJXCIsICovIH0sXG5cdC8qOjpbKi8weDAwYjQvKjo6XSovOiB7IC8qIG46XCJTeEl2ZFwiLCAqLyB9LFxuXHQvKjo6WyovMHgwMGI1Lyo6Ol0qLzogeyAvKiBuOlwiU1hMSVwiLCAqLyB9LFxuXHQvKjo6WyovMHgwMGI2Lyo6Ol0qLzogeyAvKiBuOlwiU1hQSVwiLCAqLyB9LFxuXHQvKjo6WyovMHgwMGI4Lyo6Ol0qLzogeyAvKiBuOlwiRG9jUm91dGVcIiwgKi8gfSxcblx0Lyo6OlsqLzB4MDBiOS8qOjpdKi86IHsgLyogbjpcIlJlY2lwTmFtZVwiLCAqLyB9LFxuXHQvKjo6WyovMHgwMGJkLyo6Ol0qLzogeyAvKiBuOlwiTXVsUmtcIiwgKi8gZjpwYXJzZV9NdWxSayB9LFxuXHQvKjo6WyovMHgwMGJlLyo6Ol0qLzogeyAvKiBuOlwiTXVsQmxhbmtcIiwgKi8gZjpwYXJzZV9NdWxCbGFuayB9LFxuXHQvKjo6WyovMHgwMGMxLyo6Ol0qLzogeyAvKiBuOlwiTW1zXCIsICovIGY6cGFyc2Vub29wMiB9LFxuXHQvKjo6WyovMHgwMGM1Lyo6Ol0qLzogeyAvKiBuOlwiU1hESVwiLCAqLyB9LFxuXHQvKjo6WyovMHgwMGM2Lyo6Ol0qLzogeyAvKiBuOlwiU1hEQlwiLCAqLyB9LFxuXHQvKjo6WyovMHgwMGM3Lyo6Ol0qLzogeyAvKiBuOlwiU1hGREJcIiwgKi8gfSxcblx0Lyo6OlsqLzB4MDBjOC8qOjpdKi86IHsgLyogbjpcIlNYREJCXCIsICovIH0sXG5cdC8qOjpbKi8weDAwYzkvKjo6XSovOiB7IC8qIG46XCJTWE51bVwiLCAqLyB9LFxuXHQvKjo6WyovMHgwMGNhLyo6Ol0qLzogeyAvKiBuOlwiU3hCb29sXCIsICovIGY6cGFyc2Vib29sIH0sXG5cdC8qOjpbKi8weDAwY2IvKjo6XSovOiB7IC8qIG46XCJTeEVyclwiLCAqLyB9LFxuXHQvKjo6WyovMHgwMGNjLyo6Ol0qLzogeyAvKiBuOlwiU1hJbnRcIiwgKi8gfSxcblx0Lyo6OlsqLzB4MDBjZC8qOjpdKi86IHsgLyogbjpcIlNYU3RyaW5nXCIsICovIH0sXG5cdC8qOjpbKi8weDAwY2UvKjo6XSovOiB7IC8qIG46XCJTWER0clwiLCAqLyB9LFxuXHQvKjo6WyovMHgwMGNmLyo6Ol0qLzogeyAvKiBuOlwiU3hOaWxcIiwgKi8gfSxcblx0Lyo6OlsqLzB4MDBkMC8qOjpdKi86IHsgLyogbjpcIlNYVGJsXCIsICovIH0sXG5cdC8qOjpbKi8weDAwZDEvKjo6XSovOiB7IC8qIG46XCJTWFRCUkdJSVRNXCIsICovIH0sXG5cdC8qOjpbKi8weDAwZDIvKjo6XSovOiB7IC8qIG46XCJTeFRicGdcIiwgKi8gfSxcblx0Lyo6OlsqLzB4MDBkMy8qOjpdKi86IHsgLyogbjpcIk9iUHJvalwiLCAqLyB9LFxuXHQvKjo6WyovMHgwMGQ1Lyo6Ol0qLzogeyAvKiBuOlwiU1hTdHJlYW1JRFwiLCAqLyB9LFxuXHQvKjo6WyovMHgwMGQ3Lyo6Ol0qLzogeyAvKiBuOlwiREJDZWxsXCIsICovIH0sXG5cdC8qOjpbKi8weDAwZDgvKjo6XSovOiB7IC8qIG46XCJTWFJuZ1wiLCAqLyB9LFxuXHQvKjo6WyovMHgwMGQ5Lyo6Ol0qLzogeyAvKiBuOlwiU3hJc3hvcGVyXCIsICovIH0sXG5cdC8qOjpbKi8weDAwZGEvKjo6XSovOiB7IC8qIG46XCJCb29rQm9vbFwiLCAqLyBmOnBhcnNldWludDE2IH0sXG5cdC8qOjpbKi8weDAwZGMvKjo6XSovOiB7IC8qIG46XCJEYk9yUGFyYW1RcnlcIiwgKi8gfSxcblx0Lyo6OlsqLzB4MDBkZC8qOjpdKi86IHsgLyogbjpcIlNjZW5hcmlvUHJvdGVjdFwiLCAqLyBmOnBhcnNlYm9vbCB9LFxuXHQvKjo6WyovMHgwMGRlLyo6Ol0qLzogeyAvKiBuOlwiT2xlT2JqZWN0U2l6ZVwiLCAqLyB9LFxuXHQvKjo6WyovMHgwMGUwLyo6Ol0qLzogeyAvKiBuOlwiWEZcIiwgKi8gZjpwYXJzZV9YRiB9LFxuXHQvKjo6WyovMHgwMGUxLyo6Ol0qLzogeyAvKiBuOlwiSW50ZXJmYWNlSGRyXCIsICovIGY6cGFyc2VfSW50ZXJmYWNlSGRyIH0sXG5cdC8qOjpbKi8weDAwZTIvKjo6XSovOiB7IC8qIG46XCJJbnRlcmZhY2VFbmRcIiwgKi8gZjpwYXJzZW5vb3AyIH0sXG5cdC8qOjpbKi8weDAwZTMvKjo6XSovOiB7IC8qIG46XCJTWFZTXCIsICovIH0sXG5cdC8qOjpbKi8weDAwZTUvKjo6XSovOiB7IC8qIG46XCJNZXJnZUNlbGxzXCIsICovIGY6cGFyc2VfTWVyZ2VDZWxscyB9LFxuXHQvKjo6WyovMHgwMGU5Lyo6Ol0qLzogeyAvKiBuOlwiQmtIaW1cIiwgKi8gfSxcblx0Lyo6OlsqLzB4MDBlYi8qOjpdKi86IHsgLyogbjpcIk1zb0RyYXdpbmdHcm91cFwiLCAqLyB9LFxuXHQvKjo6WyovMHgwMGVjLyo6Ol0qLzogeyAvKiBuOlwiTXNvRHJhd2luZ1wiLCAqLyB9LFxuXHQvKjo6WyovMHgwMGVkLyo6Ol0qLzogeyAvKiBuOlwiTXNvRHJhd2luZ1NlbGVjdGlvblwiLCAqLyB9LFxuXHQvKjo6WyovMHgwMGVmLyo6Ol0qLzogeyAvKiBuOlwiUGhvbmV0aWNJbmZvXCIsICovIH0sXG5cdC8qOjpbKi8weDAwZjAvKjo6XSovOiB7IC8qIG46XCJTeFJ1bGVcIiwgKi8gfSxcblx0Lyo6OlsqLzB4MDBmMS8qOjpdKi86IHsgLyogbjpcIlNYRXhcIiwgKi8gfSxcblx0Lyo6OlsqLzB4MDBmMi8qOjpdKi86IHsgLyogbjpcIlN4RmlsdFwiLCAqLyB9LFxuXHQvKjo6WyovMHgwMGY0Lyo6Ol0qLzogeyAvKiBuOlwiU3hEWEZcIiwgKi8gfSxcblx0Lyo6OlsqLzB4MDBmNS8qOjpdKi86IHsgLyogbjpcIlN4SXRtXCIsICovIH0sXG5cdC8qOjpbKi8weDAwZjYvKjo6XSovOiB7IC8qIG46XCJTeE5hbWVcIiwgKi8gfSxcblx0Lyo6OlsqLzB4MDBmNy8qOjpdKi86IHsgLyogbjpcIlN4U2VsZWN0XCIsICovIH0sXG5cdC8qOjpbKi8weDAwZjgvKjo6XSovOiB7IC8qIG46XCJTWFBhaXJcIiwgKi8gfSxcblx0Lyo6OlsqLzB4MDBmOS8qOjpdKi86IHsgLyogbjpcIlN4Rm1sYVwiLCAqLyB9LFxuXHQvKjo6WyovMHgwMGZiLyo6Ol0qLzogeyAvKiBuOlwiU3hGb3JtYXRcIiwgKi8gfSxcblx0Lyo6OlsqLzB4MDBmYy8qOjpdKi86IHsgLyogbjpcIlNTVFwiLCAqLyBmOnBhcnNlX1NTVCB9LFxuXHQvKjo6WyovMHgwMGZkLyo6Ol0qLzogeyAvKiBuOlwiTGFiZWxTc3RcIiwgKi8gZjpwYXJzZV9MYWJlbFNzdCB9LFxuXHQvKjo6WyovMHgwMGZmLyo6Ol0qLzogeyAvKiBuOlwiRXh0U1NUXCIsICovIGY6cGFyc2VfRXh0U1NUIH0sXG5cdC8qOjpbKi8weDAxMDAvKjo6XSovOiB7IC8qIG46XCJTWFZERXhcIiwgKi8gfSxcblx0Lyo6OlsqLzB4MDEwMy8qOjpdKi86IHsgLyogbjpcIlNYRm9ybXVsYVwiLCAqLyB9LFxuXHQvKjo6WyovMHgwMTIyLyo6Ol0qLzogeyAvKiBuOlwiU1hEQkV4XCIsICovIH0sXG5cdC8qOjpbKi8weDAxMzcvKjo6XSovOiB7IC8qIG46XCJSUkRJbnNEZWxcIiwgKi8gfSxcblx0Lyo6OlsqLzB4MDEzOC8qOjpdKi86IHsgLyogbjpcIlJSREhlYWRcIiwgKi8gfSxcblx0Lyo6OlsqLzB4MDEzYi8qOjpdKi86IHsgLyogbjpcIlJSRENoZ0NlbGxcIiwgKi8gfSxcblx0Lyo6OlsqLzB4MDEzZC8qOjpdKi86IHsgLyogbjpcIlJSVGFiSWRcIiwgKi8gZjpwYXJzZXVpbnQxNmEgfSxcblx0Lyo6OlsqLzB4MDEzZS8qOjpdKi86IHsgLyogbjpcIlJSRFJlblNoZWV0XCIsICovIH0sXG5cdC8qOjpbKi8weDAxM2YvKjo6XSovOiB7IC8qIG46XCJSUlNvcnRcIiwgKi8gfSxcblx0Lyo6OlsqLzB4MDE0MC8qOjpdKi86IHsgLyogbjpcIlJSRE1vdmVcIiwgKi8gfSxcblx0Lyo6OlsqLzB4MDE0YS8qOjpdKi86IHsgLyogbjpcIlJSRm9ybWF0XCIsICovIH0sXG5cdC8qOjpbKi8weDAxNGIvKjo6XSovOiB7IC8qIG46XCJSUkF1dG9GbXRcIiwgKi8gfSxcblx0Lyo6OlsqLzB4MDE0ZC8qOjpdKi86IHsgLyogbjpcIlJSSW5zZXJ0U2hcIiwgKi8gfSxcblx0Lyo6OlsqLzB4MDE0ZS8qOjpdKi86IHsgLyogbjpcIlJSRE1vdmVCZWdpblwiLCAqLyB9LFxuXHQvKjo6WyovMHgwMTRmLyo6Ol0qLzogeyAvKiBuOlwiUlJETW92ZUVuZFwiLCAqLyB9LFxuXHQvKjo6WyovMHgwMTUwLyo6Ol0qLzogeyAvKiBuOlwiUlJESW5zRGVsQmVnaW5cIiwgKi8gfSxcblx0Lyo6OlsqLzB4MDE1MS8qOjpdKi86IHsgLyogbjpcIlJSREluc0RlbEVuZFwiLCAqLyB9LFxuXHQvKjo6WyovMHgwMTUyLyo6Ol0qLzogeyAvKiBuOlwiUlJEQ29uZmxpY3RcIiwgKi8gfSxcblx0Lyo6OlsqLzB4MDE1My8qOjpdKi86IHsgLyogbjpcIlJSRERlZk5hbWVcIiwgKi8gfSxcblx0Lyo6OlsqLzB4MDE1NC8qOjpdKi86IHsgLyogbjpcIlJSRFJzdEV0eHBcIiwgKi8gfSxcblx0Lyo6OlsqLzB4MDE1Zi8qOjpdKi86IHsgLyogbjpcIkxSbmdcIiwgKi8gfSxcblx0Lyo6OlsqLzB4MDE2MC8qOjpdKi86IHsgLyogbjpcIlVzZXNFTEZzXCIsICovIGY6cGFyc2Vib29sIH0sXG5cdC8qOjpbKi8weDAxNjEvKjo6XSovOiB7IC8qIG46XCJEU0ZcIiwgKi8gZjpwYXJzZW5vb3AyIH0sXG5cdC8qOjpbKi8weDAxOTEvKjo6XSovOiB7IC8qIG46XCJDVXNyXCIsICovIH0sXG5cdC8qOjpbKi8weDAxOTIvKjo6XSovOiB7IC8qIG46XCJDYlVzclwiLCAqLyB9LFxuXHQvKjo6WyovMHgwMTkzLyo6Ol0qLzogeyAvKiBuOlwiVXNySW5mb1wiLCAqLyB9LFxuXHQvKjo6WyovMHgwMTk0Lyo6Ol0qLzogeyAvKiBuOlwiVXNyRXhjbFwiLCAqLyB9LFxuXHQvKjo6WyovMHgwMTk1Lyo6Ol0qLzogeyAvKiBuOlwiRmlsZUxvY2tcIiwgKi8gfSxcblx0Lyo6OlsqLzB4MDE5Ni8qOjpdKi86IHsgLyogbjpcIlJSREluZm9cIiwgKi8gfSxcblx0Lyo6OlsqLzB4MDE5Ny8qOjpdKi86IHsgLyogbjpcIkJDVXNyc1wiLCAqLyB9LFxuXHQvKjo6WyovMHgwMTk4Lyo6Ol0qLzogeyAvKiBuOlwiVXNyQ2hrXCIsICovIH0sXG5cdC8qOjpbKi8weDAxYTkvKjo6XSovOiB7IC8qIG46XCJVc2VyQlZpZXdcIiwgKi8gfSxcblx0Lyo6OlsqLzB4MDFhYS8qOjpdKi86IHsgLyogbjpcIlVzZXJTVmlld0JlZ2luXCIsICovIH0sXG5cdC8qOjpbKi8weDAxYWIvKjo6XSovOiB7IC8qIG46XCJVc2VyU1ZpZXdFbmRcIiwgKi8gfSxcblx0Lyo6OlsqLzB4MDFhYy8qOjpdKi86IHsgLyogbjpcIlJSRFVzZXJWaWV3XCIsICovIH0sXG5cdC8qOjpbKi8weDAxYWQvKjo6XSovOiB7IC8qIG46XCJRc2lcIiwgKi8gfSxcblx0Lyo6OlsqLzB4MDFhZS8qOjpdKi86IHsgLyogbjpcIlN1cEJvb2tcIiwgKi8gZjpwYXJzZV9TdXBCb29rIH0sXG5cdC8qOjpbKi8weDAxYWYvKjo6XSovOiB7IC8qIG46XCJQcm90NFJldlwiLCAqLyBmOnBhcnNlYm9vbCB9LFxuXHQvKjo6WyovMHgwMWIwLyo6Ol0qLzogeyAvKiBuOlwiQ29uZEZtdFwiLCAqLyB9LFxuXHQvKjo6WyovMHgwMWIxLyo6Ol0qLzogeyAvKiBuOlwiQ0ZcIiwgKi8gfSxcblx0Lyo6OlsqLzB4MDFiMi8qOjpdKi86IHsgLyogbjpcIkRWYWxcIiwgKi8gfSxcblx0Lyo6OlsqLzB4MDFiNS8qOjpdKi86IHsgLyogbjpcIkRDb25CaW5cIiwgKi8gfSxcblx0Lyo6OlsqLzB4MDFiNi8qOjpdKi86IHsgLyogbjpcIlR4T1wiLCAqLyBmOnBhcnNlX1R4TyB9LFxuXHQvKjo6WyovMHgwMWI3Lyo6Ol0qLzogeyAvKiBuOlwiUmVmcmVzaEFsbFwiLCAqLyBmOnBhcnNlYm9vbCB9LCAvL1xuXHQvKjo6WyovMHgwMWI4Lyo6Ol0qLzogeyAvKiBuOlwiSExpbmtcIiwgKi8gZjpwYXJzZV9ITGluayB9LFxuXHQvKjo6WyovMHgwMWI5Lyo6Ol0qLzogeyAvKiBuOlwiTGVsXCIsICovIH0sXG5cdC8qOjpbKi8weDAxYmEvKjo6XSovOiB7IC8qIG46XCJDb2RlTmFtZVwiLCAqLyBmOnBhcnNlX1hMVW5pY29kZVN0cmluZyB9LFxuXHQvKjo6WyovMHgwMWJiLyo6Ol0qLzogeyAvKiBuOlwiU1hGREJUeXBlXCIsICovIH0sXG5cdC8qOjpbKi8weDAxYmMvKjo6XSovOiB7IC8qIG46XCJQcm90NFJldlBhc3NcIiwgKi8gZjpwYXJzZXVpbnQxNiB9LFxuXHQvKjo6WyovMHgwMWJkLyo6Ol0qLzogeyAvKiBuOlwiT2JOb01hY3Jvc1wiLCAqLyB9LFxuXHQvKjo6WyovMHgwMWJlLyo6Ol0qLzogeyAvKiBuOlwiRHZcIiwgKi8gfSxcblx0Lyo6OlsqLzB4MDFjMC8qOjpdKi86IHsgLyogbjpcIkV4Y2VsOUZpbGVcIiwgKi8gZjpwYXJzZW5vb3AyIH0sXG5cdC8qOjpbKi8weDAxYzEvKjo6XSovOiB7IC8qIG46XCJSZWNhbGNJZFwiLCAqLyBmOnBhcnNlX1JlY2FsY0lkLCByOjJ9LFxuXHQvKjo6WyovMHgwMWMyLyo6Ol0qLzogeyAvKiBuOlwiRW50RXhVMlwiLCAqLyBmOnBhcnNlbm9vcDIgfSxcblx0Lyo6OlsqLzB4MDIwMC8qOjpdKi86IHsgLyogbjpcIkRpbWVuc2lvbnNcIiwgKi8gZjpwYXJzZV9EaW1lbnNpb25zIH0sXG5cdC8qOjpbKi8weDAyMDEvKjo6XSovOiB7IC8qIG46XCJCbGFua1wiLCAqLyBmOnBhcnNlX0JsYW5rIH0sXG5cdC8qOjpbKi8weDAyMDMvKjo6XSovOiB7IC8qIG46XCJOdW1iZXJcIiwgKi8gZjpwYXJzZV9OdW1iZXIgfSxcblx0Lyo6OlsqLzB4MDIwNC8qOjpdKi86IHsgLyogbjpcIkxhYmVsXCIsICovIGY6cGFyc2VfTGFiZWwgfSxcblx0Lyo6OlsqLzB4MDIwNS8qOjpdKi86IHsgLyogbjpcIkJvb2xFcnJcIiwgKi8gZjpwYXJzZV9Cb29sRXJyIH0sXG5cdC8qOjpbKi8weDAyMDcvKjo6XSovOiB7IC8qIG46XCJTdHJpbmdcIiwgKi8gZjpwYXJzZV9TdHJpbmcgfSxcblx0Lyo6OlsqLzB4MDIwOC8qOjpdKi86IHsgLyogbjpcIlJvd1wiLCAqLyBmOnBhcnNlX1JvdyB9LFxuXHQvKjo6WyovMHgwMjBiLyo6Ol0qLzogeyAvKiBuOlwiSW5kZXhcIiwgKi8gfSxcblx0Lyo6OlsqLzB4MDIyMS8qOjpdKi86IHsgLyogbjpcIkFycmF5XCIsICovIGY6cGFyc2VfQXJyYXkgfSxcblx0Lyo6OlsqLzB4MDIyNS8qOjpdKi86IHsgLyogbjpcIkRlZmF1bHRSb3dIZWlnaHRcIiwgKi8gZjpwYXJzZV9EZWZhdWx0Um93SGVpZ2h0IH0sXG5cdC8qOjpbKi8weDAyMzYvKjo6XSovOiB7IC8qIG46XCJUYWJsZVwiLCAqLyB9LFxuXHQvKjo6WyovMHgwMjNlLyo6Ol0qLzogeyAvKiBuOlwiV2luZG93MlwiLCAqLyBmOnBhcnNlX1dpbmRvdzIgfSxcblx0Lyo6OlsqLzB4MDI3ZS8qOjpdKi86IHsgLyogbjpcIlJLXCIsICovIGY6cGFyc2VfUksgfSxcblx0Lyo6OlsqLzB4MDI5My8qOjpdKi86IHsgLyogbjpcIlN0eWxlXCIsICovIH0sXG5cdC8qOjpbKi8weDA0MTgvKjo6XSovOiB7IC8qIG46XCJCaWdOYW1lXCIsICovIH0sXG5cdC8qOjpbKi8weDA0MWUvKjo6XSovOiB7IC8qIG46XCJGb3JtYXRcIiwgKi8gZjpwYXJzZV9Gb3JtYXQgfSxcblx0Lyo6OlsqLzB4MDQzYy8qOjpdKi86IHsgLyogbjpcIkNvbnRpbnVlQmlnTmFtZVwiLCAqLyB9LFxuXHQvKjo6WyovMHgwNGJjLyo6Ol0qLzogeyAvKiBuOlwiU2hyRm1sYVwiLCAqLyBmOnBhcnNlX1NockZtbGEgfSxcblx0Lyo6OlsqLzB4MDgwMC8qOjpdKi86IHsgLyogbjpcIkhMaW5rVG9vbHRpcFwiLCAqLyBmOnBhcnNlX0hMaW5rVG9vbHRpcCB9LFxuXHQvKjo6WyovMHgwODAxLyo6Ol0qLzogeyAvKiBuOlwiV2ViUHViXCIsICovIH0sXG5cdC8qOjpbKi8weDA4MDIvKjo6XSovOiB7IC8qIG46XCJRc2lTWFRhZ1wiLCAqLyB9LFxuXHQvKjo6WyovMHgwODAzLyo6Ol0qLzogeyAvKiBuOlwiREJRdWVyeUV4dFwiLCAqLyB9LFxuXHQvKjo6WyovMHgwODA0Lyo6Ol0qLzogeyAvKiBuOlwiRXh0U3RyaW5nXCIsICovIH0sXG5cdC8qOjpbKi8weDA4MDUvKjo6XSovOiB7IC8qIG46XCJUeHRRcnlcIiwgKi8gfSxcblx0Lyo6OlsqLzB4MDgwNi8qOjpdKi86IHsgLyogbjpcIlFzaXJcIiwgKi8gfSxcblx0Lyo6OlsqLzB4MDgwNy8qOjpdKi86IHsgLyogbjpcIlFzaWZcIiwgKi8gfSxcblx0Lyo6OlsqLzB4MDgwOC8qOjpdKi86IHsgLyogbjpcIlJSRFRRU0lGXCIsICovIH0sXG5cdC8qOjpbKi8weDA4MDkvKjo6XSovOiB7IC8qIG46XCJCT0ZcIiwgKi8gZjpwYXJzZV9CT0YgfSxcblx0Lyo6OlsqLzB4MDgwYS8qOjpdKi86IHsgLyogbjpcIk9sZURiQ29ublwiLCAqLyB9LFxuXHQvKjo6WyovMHgwODBiLyo6Ol0qLzogeyAvKiBuOlwiV09wdFwiLCAqLyB9LFxuXHQvKjo6WyovMHgwODBjLyo6Ol0qLzogeyAvKiBuOlwiU1hWaWV3RXhcIiwgKi8gfSxcblx0Lyo6OlsqLzB4MDgwZC8qOjpdKi86IHsgLyogbjpcIlNYVEhcIiwgKi8gfSxcblx0Lyo6OlsqLzB4MDgwZS8qOjpdKi86IHsgLyogbjpcIlNYUElFeFwiLCAqLyB9LFxuXHQvKjo6WyovMHgwODBmLyo6Ol0qLzogeyAvKiBuOlwiU1hWRFRFeFwiLCAqLyB9LFxuXHQvKjo6WyovMHgwODEwLyo6Ol0qLzogeyAvKiBuOlwiU1hWaWV3RXg5XCIsICovIH0sXG5cdC8qOjpbKi8weDA4MTIvKjo6XSovOiB7IC8qIG46XCJDb250aW51ZUZydFwiLCAqLyB9LFxuXHQvKjo6WyovMHgwODEzLyo6Ol0qLzogeyAvKiBuOlwiUmVhbFRpbWVEYXRhXCIsICovIH0sXG5cdC8qOjpbKi8weDA4NTAvKjo6XSovOiB7IC8qIG46XCJDaGFydEZydEluZm9cIiwgKi8gfSxcblx0Lyo6OlsqLzB4MDg1MS8qOjpdKi86IHsgLyogbjpcIkZydFdyYXBwZXJcIiwgKi8gfSxcblx0Lyo6OlsqLzB4MDg1Mi8qOjpdKi86IHsgLyogbjpcIlN0YXJ0QmxvY2tcIiwgKi8gfSxcblx0Lyo6OlsqLzB4MDg1My8qOjpdKi86IHsgLyogbjpcIkVuZEJsb2NrXCIsICovIH0sXG5cdC8qOjpbKi8weDA4NTQvKjo6XSovOiB7IC8qIG46XCJTdGFydE9iamVjdFwiLCAqLyB9LFxuXHQvKjo6WyovMHgwODU1Lyo6Ol0qLzogeyAvKiBuOlwiRW5kT2JqZWN0XCIsICovIH0sXG5cdC8qOjpbKi8weDA4NTYvKjo6XSovOiB7IC8qIG46XCJDYXRMYWJcIiwgKi8gfSxcblx0Lyo6OlsqLzB4MDg1Ny8qOjpdKi86IHsgLyogbjpcIllNdWx0XCIsICovIH0sXG5cdC8qOjpbKi8weDA4NTgvKjo6XSovOiB7IC8qIG46XCJTWFZpZXdMaW5rXCIsICovIH0sXG5cdC8qOjpbKi8weDA4NTkvKjo6XSovOiB7IC8qIG46XCJQaXZvdENoYXJ0Qml0c1wiLCAqLyB9LFxuXHQvKjo6WyovMHgwODVhLyo6Ol0qLzogeyAvKiBuOlwiRnJ0Rm9udExpc3RcIiwgKi8gfSxcblx0Lyo6OlsqLzB4MDg2Mi8qOjpdKi86IHsgLyogbjpcIlNoZWV0RXh0XCIsICovIH0sXG5cdC8qOjpbKi8weDA4NjMvKjo6XSovOiB7IC8qIG46XCJCb29rRXh0XCIsICovIHI6MTJ9LFxuXHQvKjo6WyovMHgwODY0Lyo6Ol0qLzogeyAvKiBuOlwiU1hBZGRsXCIsICovIH0sXG5cdC8qOjpbKi8weDA4NjUvKjo6XSovOiB7IC8qIG46XCJDckVyclwiLCAqLyB9LFxuXHQvKjo6WyovMHgwODY2Lyo6Ol0qLzogeyAvKiBuOlwiSEZQaWN0dXJlXCIsICovIH0sXG5cdC8qOjpbKi8weDA4NjcvKjo6XSovOiB7IC8qIG46XCJGZWF0SGRyXCIsICovIGY6cGFyc2Vub29wMiB9LFxuXHQvKjo6WyovMHgwODY4Lyo6Ol0qLzogeyAvKiBuOlwiRmVhdFwiLCAqLyB9LFxuXHQvKjo6WyovMHgwODZhLyo6Ol0qLzogeyAvKiBuOlwiRGF0YUxhYkV4dFwiLCAqLyB9LFxuXHQvKjo6WyovMHgwODZiLyo6Ol0qLzogeyAvKiBuOlwiRGF0YUxhYkV4dENvbnRlbnRzXCIsICovIH0sXG5cdC8qOjpbKi8weDA4NmMvKjo6XSovOiB7IC8qIG46XCJDZWxsV2F0Y2hcIiwgKi8gfSxcblx0Lyo6OlsqLzB4MDg3MS8qOjpdKi86IHsgLyogbjpcIkZlYXRIZHIxMVwiLCAqLyB9LFxuXHQvKjo6WyovMHgwODcyLyo6Ol0qLzogeyAvKiBuOlwiRmVhdHVyZTExXCIsICovIH0sXG5cdC8qOjpbKi8weDA4NzQvKjo6XSovOiB7IC8qIG46XCJEcm9wRG93bk9iaklkc1wiLCAqLyB9LFxuXHQvKjo6WyovMHgwODc1Lyo6Ol0qLzogeyAvKiBuOlwiQ29udGludWVGcnQxMVwiLCAqLyB9LFxuXHQvKjo6WyovMHgwODc2Lyo6Ol0qLzogeyAvKiBuOlwiRENvbm5cIiwgKi8gfSxcblx0Lyo6OlsqLzB4MDg3Ny8qOjpdKi86IHsgLyogbjpcIkxpc3QxMlwiLCAqLyB9LFxuXHQvKjo6WyovMHgwODc4Lyo6Ol0qLzogeyAvKiBuOlwiRmVhdHVyZTEyXCIsICovIH0sXG5cdC8qOjpbKi8weDA4NzkvKjo6XSovOiB7IC8qIG46XCJDb25kRm10MTJcIiwgKi8gfSxcblx0Lyo6OlsqLzB4MDg3YS8qOjpdKi86IHsgLyogbjpcIkNGMTJcIiwgKi8gfSxcblx0Lyo6OlsqLzB4MDg3Yi8qOjpdKi86IHsgLyogbjpcIkNGRXhcIiwgKi8gfSxcblx0Lyo6OlsqLzB4MDg3Yy8qOjpdKi86IHsgLyogbjpcIlhGQ1JDXCIsICovIGY6cGFyc2VfWEZDUkMsIHI6MTIgfSxcblx0Lyo6OlsqLzB4MDg3ZC8qOjpdKi86IHsgLyogbjpcIlhGRXh0XCIsICovIGY6cGFyc2VfWEZFeHQsIHI6MTIgfSxcblx0Lyo6OlsqLzB4MDg3ZS8qOjpdKi86IHsgLyogbjpcIkF1dG9GaWx0ZXIxMlwiLCAqLyB9LFxuXHQvKjo6WyovMHgwODdmLyo6Ol0qLzogeyAvKiBuOlwiQ29udGludWVGcnQxMlwiLCAqLyB9LFxuXHQvKjo6WyovMHgwODg0Lyo6Ol0qLzogeyAvKiBuOlwiTURUSW5mb1wiLCAqLyB9LFxuXHQvKjo6WyovMHgwODg1Lyo6Ol0qLzogeyAvKiBuOlwiTURYU3RyXCIsICovIH0sXG5cdC8qOjpbKi8weDA4ODYvKjo6XSovOiB7IC8qIG46XCJNRFhUdXBsZVwiLCAqLyB9LFxuXHQvKjo6WyovMHgwODg3Lyo6Ol0qLzogeyAvKiBuOlwiTURYU2V0XCIsICovIH0sXG5cdC8qOjpbKi8weDA4ODgvKjo6XSovOiB7IC8qIG46XCJNRFhQcm9wXCIsICovIH0sXG5cdC8qOjpbKi8weDA4ODkvKjo6XSovOiB7IC8qIG46XCJNRFhLUElcIiwgKi8gfSxcblx0Lyo6OlsqLzB4MDg4YS8qOjpdKi86IHsgLyogbjpcIk1EQlwiLCAqLyB9LFxuXHQvKjo6WyovMHgwODhiLyo6Ol0qLzogeyAvKiBuOlwiUExWXCIsICovIH0sXG5cdC8qOjpbKi8weDA4OGMvKjo6XSovOiB7IC8qIG46XCJDb21wYXQxMlwiLCAqLyBmOnBhcnNlYm9vbCwgcjoxMiB9LFxuXHQvKjo6WyovMHgwODhkLyo6Ol0qLzogeyAvKiBuOlwiRFhGXCIsICovIH0sXG5cdC8qOjpbKi8weDA4OGUvKjo6XSovOiB7IC8qIG46XCJUYWJsZVN0eWxlc1wiLCAqLyByOjEyIH0sXG5cdC8qOjpbKi8weDA4OGYvKjo6XSovOiB7IC8qIG46XCJUYWJsZVN0eWxlXCIsICovIH0sXG5cdC8qOjpbKi8weDA4OTAvKjo6XSovOiB7IC8qIG46XCJUYWJsZVN0eWxlRWxlbWVudFwiLCAqLyB9LFxuXHQvKjo6WyovMHgwODkyLyo6Ol0qLzogeyAvKiBuOlwiU3R5bGVFeHRcIiwgKi8gfSxcblx0Lyo6OlsqLzB4MDg5My8qOjpdKi86IHsgLyogbjpcIk5hbWVQdWJsaXNoXCIsICovIH0sXG5cdC8qOjpbKi8weDA4OTQvKjo6XSovOiB7IC8qIG46XCJOYW1lQ210XCIsICovIGY6cGFyc2VfTmFtZUNtdCwgcjoxMiB9LFxuXHQvKjo6WyovMHgwODk1Lyo6Ol0qLzogeyAvKiBuOlwiU29ydERhdGFcIiwgKi8gfSxcblx0Lyo6OlsqLzB4MDg5Ni8qOjpdKi86IHsgLyogbjpcIlRoZW1lXCIsICovIGY6cGFyc2VfVGhlbWUsIHI6MTIgfSxcblx0Lyo6OlsqLzB4MDg5Ny8qOjpdKi86IHsgLyogbjpcIkdVSURUeXBlTGliXCIsICovIH0sXG5cdC8qOjpbKi8weDA4OTgvKjo6XSovOiB7IC8qIG46XCJGbkdycDEyXCIsICovIH0sXG5cdC8qOjpbKi8weDA4OTkvKjo6XSovOiB7IC8qIG46XCJOYW1lRm5HcnAxMlwiLCAqLyB9LFxuXHQvKjo6WyovMHgwODlhLyo6Ol0qLzogeyAvKiBuOlwiTVRSU2V0dGluZ3NcIiwgKi8gZjpwYXJzZV9NVFJTZXR0aW5ncywgcjoxMiB9LFxuXHQvKjo6WyovMHgwODliLyo6Ol0qLzogeyAvKiBuOlwiQ29tcHJlc3NQaWN0dXJlc1wiLCAqLyBmOnBhcnNlbm9vcDIgfSxcblx0Lyo6OlsqLzB4MDg5Yy8qOjpdKi86IHsgLyogbjpcIkhlYWRlckZvb3RlclwiLCAqLyB9LFxuXHQvKjo6WyovMHgwODlkLyo6Ol0qLzogeyAvKiBuOlwiQ3J0TGF5b3V0MTJcIiwgKi8gfSxcblx0Lyo6OlsqLzB4MDg5ZS8qOjpdKi86IHsgLyogbjpcIkNydE1sRnJ0XCIsICovIH0sXG5cdC8qOjpbKi8weDA4OWYvKjo6XSovOiB7IC8qIG46XCJDcnRNbEZydENvbnRpbnVlXCIsICovIH0sXG5cdC8qOjpbKi8weDA4YTMvKjo6XSovOiB7IC8qIG46XCJGb3JjZUZ1bGxDYWxjdWxhdGlvblwiLCAqLyBmOnBhcnNlX0ZvcmNlRnVsbENhbGN1bGF0aW9uIH0sXG5cdC8qOjpbKi8weDA4YTQvKjo6XSovOiB7IC8qIG46XCJTaGFwZVByb3BzU3RyZWFtXCIsICovIH0sXG5cdC8qOjpbKi8weDA4YTUvKjo6XSovOiB7IC8qIG46XCJUZXh0UHJvcHNTdHJlYW1cIiwgKi8gfSxcblx0Lyo6OlsqLzB4MDhhNi8qOjpdKi86IHsgLyogbjpcIlJpY2hUZXh0U3RyZWFtXCIsICovIH0sXG5cdC8qOjpbKi8weDA4YTcvKjo6XSovOiB7IC8qIG46XCJDcnRMYXlvdXQxMkFcIiwgKi8gfSxcblx0Lyo6OlsqLzB4MTAwMS8qOjpdKi86IHsgLyogbjpcIlVuaXRzXCIsICovIH0sXG5cdC8qOjpbKi8weDEwMDIvKjo6XSovOiB7IC8qIG46XCJDaGFydFwiLCAqLyB9LFxuXHQvKjo6WyovMHgxMDAzLyo6Ol0qLzogeyAvKiBuOlwiU2VyaWVzXCIsICovIH0sXG5cdC8qOjpbKi8weDEwMDYvKjo6XSovOiB7IC8qIG46XCJEYXRhRm9ybWF0XCIsICovIH0sXG5cdC8qOjpbKi8weDEwMDcvKjo6XSovOiB7IC8qIG46XCJMaW5lRm9ybWF0XCIsICovIH0sXG5cdC8qOjpbKi8weDEwMDkvKjo6XSovOiB7IC8qIG46XCJNYXJrZXJGb3JtYXRcIiwgKi8gfSxcblx0Lyo6OlsqLzB4MTAwYS8qOjpdKi86IHsgLyogbjpcIkFyZWFGb3JtYXRcIiwgKi8gfSxcblx0Lyo6OlsqLzB4MTAwYi8qOjpdKi86IHsgLyogbjpcIlBpZUZvcm1hdFwiLCAqLyB9LFxuXHQvKjo6WyovMHgxMDBjLyo6Ol0qLzogeyAvKiBuOlwiQXR0YWNoZWRMYWJlbFwiLCAqLyB9LFxuXHQvKjo6WyovMHgxMDBkLyo6Ol0qLzogeyAvKiBuOlwiU2VyaWVzVGV4dFwiLCAqLyB9LFxuXHQvKjo6WyovMHgxMDE0Lyo6Ol0qLzogeyAvKiBuOlwiQ2hhcnRGb3JtYXRcIiwgKi8gfSxcblx0Lyo6OlsqLzB4MTAxNS8qOjpdKi86IHsgLyogbjpcIkxlZ2VuZFwiLCAqLyB9LFxuXHQvKjo6WyovMHgxMDE2Lyo6Ol0qLzogeyAvKiBuOlwiU2VyaWVzTGlzdFwiLCAqLyB9LFxuXHQvKjo6WyovMHgxMDE3Lyo6Ol0qLzogeyAvKiBuOlwiQmFyXCIsICovIH0sXG5cdC8qOjpbKi8weDEwMTgvKjo6XSovOiB7IC8qIG46XCJMaW5lXCIsICovIH0sXG5cdC8qOjpbKi8weDEwMTkvKjo6XSovOiB7IC8qIG46XCJQaWVcIiwgKi8gfSxcblx0Lyo6OlsqLzB4MTAxYS8qOjpdKi86IHsgLyogbjpcIkFyZWFcIiwgKi8gfSxcblx0Lyo6OlsqLzB4MTAxYi8qOjpdKi86IHsgLyogbjpcIlNjYXR0ZXJcIiwgKi8gfSxcblx0Lyo6OlsqLzB4MTAxYy8qOjpdKi86IHsgLyogbjpcIkNydExpbmVcIiwgKi8gfSxcblx0Lyo6OlsqLzB4MTAxZC8qOjpdKi86IHsgLyogbjpcIkF4aXNcIiwgKi8gfSxcblx0Lyo6OlsqLzB4MTAxZS8qOjpdKi86IHsgLyogbjpcIlRpY2tcIiwgKi8gfSxcblx0Lyo6OlsqLzB4MTAxZi8qOjpdKi86IHsgLyogbjpcIlZhbHVlUmFuZ2VcIiwgKi8gfSxcblx0Lyo6OlsqLzB4MTAyMC8qOjpdKi86IHsgLyogbjpcIkNhdFNlclJhbmdlXCIsICovIH0sXG5cdC8qOjpbKi8weDEwMjEvKjo6XSovOiB7IC8qIG46XCJBeGlzTGluZVwiLCAqLyB9LFxuXHQvKjo6WyovMHgxMDIyLyo6Ol0qLzogeyAvKiBuOlwiQ3J0TGlua1wiLCAqLyB9LFxuXHQvKjo6WyovMHgxMDI0Lyo6Ol0qLzogeyAvKiBuOlwiRGVmYXVsdFRleHRcIiwgKi8gfSxcblx0Lyo6OlsqLzB4MTAyNS8qOjpdKi86IHsgLyogbjpcIlRleHRcIiwgKi8gfSxcblx0Lyo6OlsqLzB4MTAyNi8qOjpdKi86IHsgLyogbjpcIkZvbnRYXCIsICovIGY6cGFyc2V1aW50MTYgfSxcblx0Lyo6OlsqLzB4MTAyNy8qOjpdKi86IHsgLyogbjpcIk9iamVjdExpbmtcIiwgKi8gfSxcblx0Lyo6OlsqLzB4MTAzMi8qOjpdKi86IHsgLyogbjpcIkZyYW1lXCIsICovIH0sXG5cdC8qOjpbKi8weDEwMzMvKjo6XSovOiB7IC8qIG46XCJCZWdpblwiLCAqLyB9LFxuXHQvKjo6WyovMHgxMDM0Lyo6Ol0qLzogeyAvKiBuOlwiRW5kXCIsICovIH0sXG5cdC8qOjpbKi8weDEwMzUvKjo6XSovOiB7IC8qIG46XCJQbG90QXJlYVwiLCAqLyB9LFxuXHQvKjo6WyovMHgxMDNhLyo6Ol0qLzogeyAvKiBuOlwiQ2hhcnQzZFwiLCAqLyB9LFxuXHQvKjo6WyovMHgxMDNjLyo6Ol0qLzogeyAvKiBuOlwiUGljRlwiLCAqLyB9LFxuXHQvKjo6WyovMHgxMDNkLyo6Ol0qLzogeyAvKiBuOlwiRHJvcEJhclwiLCAqLyB9LFxuXHQvKjo6WyovMHgxMDNlLyo6Ol0qLzogeyAvKiBuOlwiUmFkYXJcIiwgKi8gfSxcblx0Lyo6OlsqLzB4MTAzZi8qOjpdKi86IHsgLyogbjpcIlN1cmZcIiwgKi8gfSxcblx0Lyo6OlsqLzB4MTA0MC8qOjpdKi86IHsgLyogbjpcIlJhZGFyQXJlYVwiLCAqLyB9LFxuXHQvKjo6WyovMHgxMDQxLyo6Ol0qLzogeyAvKiBuOlwiQXhpc1BhcmVudFwiLCAqLyB9LFxuXHQvKjo6WyovMHgxMDQzLyo6Ol0qLzogeyAvKiBuOlwiTGVnZW5kRXhjZXB0aW9uXCIsICovIH0sXG5cdC8qOjpbKi8weDEwNDQvKjo6XSovOiB7IC8qIG46XCJTaHRQcm9wc1wiLCAqLyBmOnBhcnNlX1NodFByb3BzIH0sXG5cdC8qOjpbKi8weDEwNDUvKjo6XSovOiB7IC8qIG46XCJTZXJUb0NydFwiLCAqLyB9LFxuXHQvKjo6WyovMHgxMDQ2Lyo6Ol0qLzogeyAvKiBuOlwiQXhlc1VzZWRcIiwgKi8gfSxcblx0Lyo6OlsqLzB4MTA0OC8qOjpdKi86IHsgLyogbjpcIlNCYXNlUmVmXCIsICovIH0sXG5cdC8qOjpbKi8weDEwNGEvKjo6XSovOiB7IC8qIG46XCJTZXJQYXJlbnRcIiwgKi8gfSxcblx0Lyo6OlsqLzB4MTA0Yi8qOjpdKi86IHsgLyogbjpcIlNlckF1eFRyZW5kXCIsICovIH0sXG5cdC8qOjpbKi8weDEwNGUvKjo6XSovOiB7IC8qIG46XCJJRm10UmVjb3JkXCIsICovIH0sXG5cdC8qOjpbKi8weDEwNGYvKjo6XSovOiB7IC8qIG46XCJQb3NcIiwgKi8gfSxcblx0Lyo6OlsqLzB4MTA1MC8qOjpdKi86IHsgLyogbjpcIkFsUnVuc1wiLCAqLyB9LFxuXHQvKjo6WyovMHgxMDUxLyo6Ol0qLzogeyAvKiBuOlwiQlJBSVwiLCAqLyB9LFxuXHQvKjo6WyovMHgxMDViLyo6Ol0qLzogeyAvKiBuOlwiU2VyQXV4RXJyQmFyXCIsICovIH0sXG5cdC8qOjpbKi8weDEwNWMvKjo6XSovOiB7IC8qIG46XCJDbHJ0Q2xpZW50XCIsICovIGY6cGFyc2VfQ2xydENsaWVudCB9LFxuXHQvKjo6WyovMHgxMDVkLyo6Ol0qLzogeyAvKiBuOlwiU2VyRm10XCIsICovIH0sXG5cdC8qOjpbKi8weDEwNWYvKjo6XSovOiB7IC8qIG46XCJDaGFydDNEQmFyU2hhcGVcIiwgKi8gfSxcblx0Lyo6OlsqLzB4MTA2MC8qOjpdKi86IHsgLyogbjpcIkZiaVwiLCAqLyB9LFxuXHQvKjo6WyovMHgxMDYxLyo6Ol0qLzogeyAvKiBuOlwiQm9wUG9wXCIsICovIH0sXG5cdC8qOjpbKi8weDEwNjIvKjo6XSovOiB7IC8qIG46XCJBeGNFeHRcIiwgKi8gfSxcblx0Lyo6OlsqLzB4MTA2My8qOjpdKi86IHsgLyogbjpcIkRhdFwiLCAqLyB9LFxuXHQvKjo6WyovMHgxMDY0Lyo6Ol0qLzogeyAvKiBuOlwiUGxvdEdyb3d0aFwiLCAqLyB9LFxuXHQvKjo6WyovMHgxMDY1Lyo6Ol0qLzogeyAvKiBuOlwiU0lJbmRleFwiLCAqLyB9LFxuXHQvKjo6WyovMHgxMDY2Lyo6Ol0qLzogeyAvKiBuOlwiR2VsRnJhbWVcIiwgKi8gfSxcblx0Lyo6OlsqLzB4MTA2Ny8qOjpdKi86IHsgLyogbjpcIkJvcFBvcEN1c3RvbVwiLCAqLyB9LFxuXHQvKjo6WyovMHgxMDY4Lyo6Ol0qLzogeyAvKiBuOlwiRmJpMlwiLCAqLyB9LFxuXG5cdC8qOjpbKi8weDAwMDAvKjo6XSovOiB7IC8qIG46XCJEaW1lbnNpb25zXCIsICovIGY6cGFyc2VfRGltZW5zaW9ucyB9LFxuXHQvKjo6WyovMHgwMDAxLyo6Ol0qLzogeyAvKiBuOlwiQklGRjJCTEFOS1wiLCAqLyB9LFxuXHQvKjo6WyovMHgwMDAyLyo6Ol0qLzogeyAvKiBuOlwiQklGRjJJTlRcIiwgKi8gZjpwYXJzZV9CSUZGMklOVCB9LFxuXHQvKjo6WyovMHgwMDAzLyo6Ol0qLzogeyAvKiBuOlwiQklGRjJOVU1cIiwgKi8gZjpwYXJzZV9CSUZGMk5VTSB9LFxuXHQvKjo6WyovMHgwMDA0Lyo6Ol0qLzogeyAvKiBuOlwiQklGRjJTVFJcIiwgKi8gZjpwYXJzZV9CSUZGMlNUUiB9LFxuXHQvKjo6WyovMHgwMDA1Lyo6Ol0qLzogeyAvKiBuOlwiQm9vbEVyclwiLCAqLyBmOnBhcnNlX0Jvb2xFcnIgfSxcblx0Lyo6OlsqLzB4MDAwNy8qOjpdKi86IHsgLyogbjpcIlN0cmluZ1wiLCAqLyBmOnBhcnNlX0JJRkYyU1RSSU5HIH0sXG5cdC8qOjpbKi8weDAwMDgvKjo6XSovOiB7IC8qIG46XCJCSUZGMlJPV1wiLCAqLyB9LFxuXHQvKjo6WyovMHgwMDA5Lyo6Ol0qLzogeyAvKiBuOlwiQk9GXCIsICovIGY6cGFyc2VfQk9GIH0sXG5cdC8qOjpbKi8weDAwMGIvKjo6XSovOiB7IC8qIG46XCJJbmRleFwiLCAqLyB9LFxuXHQvKjo6WyovMHgwMDE2Lyo6Ol0qLzogeyAvKiBuOlwiRXh0ZXJuQ291bnRcIiwgKi8gZjpwYXJzZXVpbnQxNiB9LFxuXHQvKjo6WyovMHgwMDFlLyo6Ol0qLzogeyAvKiBuOlwiQklGRjJGT1JNQVRcIiwgKi8gZjpwYXJzZV9CSUZGMkZvcm1hdCB9LFxuXHQvKjo6WyovMHgwMDFmLyo6Ol0qLzogeyAvKiBuOlwiQklGRjJGTVRDTlRcIiwgKi8gfSwgLyogMTYtYml0IGNudCBvZiBCSUZGMkZPUk1BVCByZWNvcmRzICovXG5cdC8qOjpbKi8weDAwMjAvKjo6XSovOiB7IC8qIG46XCJCSUZGMkNPTElORk9cIiwgKi8gfSxcblx0Lyo6OlsqLzB4MDAyMS8qOjpdKi86IHsgLyogbjpcIkFycmF5XCIsICovIGY6cGFyc2VfQXJyYXkgfSxcblx0Lyo6OlsqLzB4MDAyNC8qOjpdKi86IHsgLyogbjpcIkNPTFdJRFRIXCIsICovIH0sXG5cdC8qOjpbKi8weDAwMjUvKjo6XSovOiB7IC8qIG46XCJEZWZhdWx0Um93SGVpZ2h0XCIsICovIGY6cGFyc2VfRGVmYXVsdFJvd0hlaWdodCB9LFxuXHQvLyAweDJjID8/XG5cdC8vIDB4MmQgPz9cblx0Ly8gMHgyZSA/P1xuXHQvLyAweDMwIEZPTlRDT1VOVDogbnVtYmVyIG9mIGZvbnRzXG5cdC8qOjpbKi8weDAwMzIvKjo6XSovOiB7IC8qIG46XCJCSUZGMkZPTlRYVFJBXCIsICovIGY6cGFyc2VfQklGRjJGT05UWFRSQSB9LFxuXHQvLyAweDM1OiBJTkZPT1BUU1xuXHQvLyAweDM2OiBUQUJMRSAoQklGRjIgb25seSlcblx0Ly8gMHgzNzogVEFCTEUyIChCSUZGMiBvbmx5KVxuXHQvLyAweDM4OiBXTkRFU0tcblx0Ly8gMHgzOSA/P1xuXHQvLyAweDNhOiBCRUdJTlBSRUZcblx0Ly8gMHgzYjogRU5EUFJFRlxuXHQvKjo6WyovMHgwMDNlLyo6Ol0qLzogeyAvKiBuOlwiQklGRjJXSU5ET1cyXCIsICovIH0sXG5cdC8vIDB4M2YgPz9cblx0Ly8gMHg0NjogU0hPV1NDUk9MTFxuXHQvLyAweDQ3OiBTSE9XRk9STVVMQVxuXHQvLyAweDQ4OiBTVEFUVVNCQVJcblx0Ly8gMHg0OTogU0hPUlRNRU5VU1xuXHQvLyAweDRBOlxuXHQvLyAweDRCOlxuXHQvLyAweDRDOlxuXHQvLyAweDRFOlxuXHQvLyAweDRGOlxuXHQvLyAweDU4OiBUT09MQkFSIChCSUZGMylcblxuXHQvKiAtIC0gLSAqL1xuXHQvKjo6WyovMHgwMDM0Lyo6Ol0qLzogeyAvKiBuOlwiRERFT2JqTmFtZVwiLCAqLyB9LFxuXHQvKjo6WyovMHgwMDQzLyo6Ol0qLzogeyAvKiBuOlwiQklGRjJYRlwiLCAqLyB9LFxuXHQvKjo6WyovMHgwMDQ0Lyo6Ol0qLzogeyAvKiBuOlwiQklGRjJYRklOREVYXCIsICovIGY6cGFyc2V1aW50MTYgfSxcblx0Lyo6OlsqLzB4MDA0NS8qOjpdKi86IHsgLyogbjpcIkJJRkYyRk9OVENMUlwiLCAqLyB9LFxuXHQvKjo6WyovMHgwMDU2Lyo6Ol0qLzogeyAvKiBuOlwiQklGRjRGTVRDTlRcIiwgKi8gfSwgLyogMTYtYml0IGNudCwgc2ltaWxhciB0byBCSUZGMiAqL1xuXHQvKjo6WyovMHgwMDdlLyo6Ol0qLzogeyAvKiBuOlwiUktcIiwgKi8gfSwgLyogTm90IG5lY2Vzc2FyaWx5IHNhbWUgYXMgMHgwMjdlICovXG5cdC8qOjpbKi8weDAwN2YvKjo6XSovOiB7IC8qIG46XCJJbURhdGFcIiwgKi8gZjpwYXJzZV9JbURhdGEgfSxcblx0Lyo6OlsqLzB4MDA4Ny8qOjpdKi86IHsgLyogbjpcIkFkZGluXCIsICovIH0sXG5cdC8qOjpbKi8weDAwODgvKjo6XSovOiB7IC8qIG46XCJFZGdcIiwgKi8gfSxcblx0Lyo6OlsqLzB4MDA4OS8qOjpdKi86IHsgLyogbjpcIlB1YlwiLCAqLyB9LFxuXHQvLyAweDhBXG5cdC8vIDB4OEIgTEg6IGFsdGVybmF0ZSBtZW51IGtleSBmbGFnIChCSUZGMy80KVxuXHQvLyAweDhFXG5cdC8vIDB4OEZcblx0Lyo6OlsqLzB4MDA5MS8qOjpdKi86IHsgLyogbjpcIlN1YlwiLCAqLyB9LFxuXHQvLyAweDkzIFNUWUxFXG5cdC8qOjpbKi8weDAwOTQvKjo6XSovOiB7IC8qIG46XCJMSFJlY29yZFwiLCAqLyB9LFxuXHQvKjo6WyovMHgwMDk1Lyo6Ol0qLzogeyAvKiBuOlwiTEhOR3JhcGhcIiwgKi8gfSxcblx0Lyo6OlsqLzB4MDA5Ni8qOjpdKi86IHsgLyogbjpcIlNvdW5kXCIsICovIH0sXG5cdC8vIDB4QTIgRk5QUk9UTzogZnVuY3Rpb24gcHJvdG90eXBlcyAoQklGRjQpXG5cdC8vIDB4QTNcblx0Ly8gMHhBOFxuXHQvKjo6WyovMHgwMGE5Lyo6Ol0qLzogeyAvKiBuOlwiQ29vcmRMaXN0XCIsICovIH0sXG5cdC8qOjpbKi8weDAwYWIvKjo6XSovOiB7IC8qIG46XCJHQ1dcIiwgKi8gfSxcblx0Lyo6OlsqLzB4MDBiYy8qOjpdKi86IHsgLyogbjpcIlNockZtbGFcIiwgKi8gfSwgLyogTm90IG5lY2Vzc2FyaWx5IHNhbWUgYXMgMHgwNGJjICovXG5cdC8qOjpbKi8weDAwYmYvKjo6XSovOiB7IC8qIG46XCJUb29sYmFySGRyXCIsICovIH0sXG5cdC8qOjpbKi8weDAwYzAvKjo6XSovOiB7IC8qIG46XCJUb29sYmFyRW5kXCIsICovIH0sXG5cdC8qOjpbKi8weDAwYzIvKjo6XSovOiB7IC8qIG46XCJBZGRNZW51XCIsICovIH0sXG5cdC8qOjpbKi8weDAwYzMvKjo6XSovOiB7IC8qIG46XCJEZWxNZW51XCIsICovIH0sXG5cdC8qOjpbKi8weDAwZDYvKjo6XSovOiB7IC8qIG46XCJSU3RyaW5nXCIsICovIGY6cGFyc2VfUlN0cmluZyB9LFxuXHQvKjo6WyovMHgwMGRmLyo6Ol0qLzogeyAvKiBuOlwiVUREZXNjXCIsICovIH0sXG5cdC8qOjpbKi8weDAwZWEvKjo6XSovOiB7IC8qIG46XCJUYWJJZENvbmZcIiwgKi8gfSxcblx0Lyo6OlsqLzB4MDE2Mi8qOjpdKi86IHsgLyogbjpcIlhMNU1vZGlmeVwiLCAqLyB9LFxuXHQvKjo6WyovMHgwMWE1Lyo6Ol0qLzogeyAvKiBuOlwiRmlsZVNoYXJpbmcyXCIsICovIH0sXG5cdC8qOjpbKi8weDAyMDYvKjo6XSovOiB7IC8qIG46XCJGb3JtdWxhXCIsICovIGY6cGFyc2VfRm9ybXVsYSB9LFxuXHQvKjo6WyovMHgwMjA5Lyo6Ol0qLzogeyAvKiBuOlwiQk9GXCIsICovIGY6cGFyc2VfQk9GIH0sXG5cdC8qOjpbKi8weDAyMTgvKjo6XSovOiB7IC8qIG46XCJMYmxcIiwgKi8gZjpwYXJzZV9MYmwgfSxcblx0Lyo6OlsqLzB4MDIyMy8qOjpdKi86IHsgLyogbjpcIkV4dGVybk5hbWVcIiwgKi8gZjpwYXJzZV9FeHRlcm5OYW1lIH0sXG5cdC8qOjpbKi8weDAyMzEvKjo6XSovOiB7IC8qIG46XCJGb250XCIsICovIH0sXG5cdC8qOjpbKi8weDAyNDMvKjo6XSovOiB7IC8qIG46XCJCSUZGM1hGXCIsICovIH0sXG5cdC8qOjpbKi8weDA0MDYvKjo6XSovOiB7IC8qIG46XCJGb3JtdWxhXCIsICovIGY6cGFyc2VfRm9ybXVsYSB9LFxuXHQvKjo6WyovMHgwNDA5Lyo6Ol0qLzogeyAvKiBuOlwiQk9GXCIsICovIGY6cGFyc2VfQk9GIH0sXG5cdC8qOjpbKi8weDA0NDMvKjo6XSovOiB7IC8qIG46XCJCSUZGNFhGXCIsICovIH0sXG5cdC8qOjpbKi8weDA4NmQvKjo6XSovOiB7IC8qIG46XCJGZWF0SW5mb1wiLCAqLyB9LFxuXHQvKjo6WyovMHgwODczLyo6Ol0qLzogeyAvKiBuOlwiRmVhdEluZm8xMVwiLCAqLyB9LFxuXHQvKjo6WyovMHgwODgxLyo6Ol0qLzogeyAvKiBuOlwiU1hBZGRsMTJcIiwgKi8gfSxcblx0Lyo6OlsqLzB4MDhjMC8qOjpdKi86IHsgLyogbjpcIkF1dG9XZWJQdWJcIiwgKi8gfSxcblx0Lyo6OlsqLzB4MDhjMS8qOjpdKi86IHsgLyogbjpcIkxpc3RPYmpcIiwgKi8gfSxcblx0Lyo6OlsqLzB4MDhjMi8qOjpdKi86IHsgLyogbjpcIkxpc3RGaWVsZFwiLCAqLyB9LFxuXHQvKjo6WyovMHgwOGMzLyo6Ol0qLzogeyAvKiBuOlwiTGlzdERWXCIsICovIH0sXG5cdC8qOjpbKi8weDA4YzQvKjo6XSovOiB7IC8qIG46XCJMaXN0Q29uZEZtdFwiLCAqLyB9LFxuXHQvKjo6WyovMHgwOGM1Lyo6Ol0qLzogeyAvKiBuOlwiTGlzdENGXCIsICovIH0sXG5cdC8qOjpbKi8weDA4YzYvKjo6XSovOiB7IC8qIG46XCJGTVFyeVwiLCAqLyB9LFxuXHQvKjo6WyovMHgwOGM3Lyo6Ol0qLzogeyAvKiBuOlwiRk1TUXJ5XCIsICovIH0sXG5cdC8qOjpbKi8weDA4YzgvKjo6XSovOiB7IC8qIG46XCJQTFZcIiwgKi8gfSxcblx0Lyo6OlsqLzB4MDhjOS8qOjpdKi86IHsgLyogbjpcIkxuRXh0XCIsICovIH0sXG5cdC8qOjpbKi8weDA4Y2EvKjo6XSovOiB7IC8qIG46XCJNa3JFeHRcIiwgKi8gfSxcblx0Lyo6OlsqLzB4MDhjYi8qOjpdKi86IHsgLyogbjpcIkNydENvb3B0XCIsICovIH0sXG5cdC8qOjpbKi8weDA4ZDYvKjo6XSovOiB7IC8qIG46XCJGUlRBcmNoSWQkXCIsICovIHI6MTIgfSxcblxuXHQvKjo6WyovMHg3MjYyLyo6Ol0qLzoge31cbn07XG5cbmZ1bmN0aW9uIHdyaXRlX2JpZmZfcmVjKGJhLyo6QnVmQXJyYXkqLywgdHlwZS8qOm51bWJlciovLCBwYXlsb2FkLCBsZW5ndGgvKjo/bnVtYmVyKi8pLyo6dm9pZCovIHtcblx0dmFyIHQvKjpudW1iZXIqLyA9IHR5cGU7XG5cdGlmKGlzTmFOKHQpKSByZXR1cm47XG5cdHZhciBsZW4gPSBsZW5ndGggfHwgKHBheWxvYWR8fFtdKS5sZW5ndGggfHwgMDtcblx0dmFyIG8gPSBiYS5uZXh0KDQpO1xuXHRvLndyaXRlX3NoaWZ0KDIsIHQpO1xuXHRvLndyaXRlX3NoaWZ0KDIsIGxlbik7XG5cdGlmKC8qOjogbGVuICE9IG51bGwgJiYqL2xlbiA+IDAgJiYgaXNfYnVmKHBheWxvYWQpKSBiYS5wdXNoKHBheWxvYWQpO1xufVxuXG5mdW5jdGlvbiB3cml0ZV9iaWZmX2NvbnRpbnVlKGJhLyo6QnVmQXJyYXkqLywgdHlwZS8qOm51bWJlciovLCBwYXlsb2FkLCBsZW5ndGgvKjo/bnVtYmVyKi8pLyo6dm9pZCovIHtcblx0dmFyIGxlbiA9IGxlbmd0aCB8fCAocGF5bG9hZHx8W10pLmxlbmd0aCB8fCAwO1xuXHRpZihsZW4gPD0gODIyNCkgcmV0dXJuIHdyaXRlX2JpZmZfcmVjKGJhLCB0eXBlLCBwYXlsb2FkLCBsZW4pO1xuXHR2YXIgdCA9IHR5cGU7XG5cdGlmKGlzTmFOKHQpKSByZXR1cm47XG5cdHZhciBwYXJ0cyA9IHBheWxvYWQucGFydHMgfHwgW10sIHNpZHggPSAwO1xuXHR2YXIgaSA9IDAsIHcgPSAwO1xuXHR3aGlsZSh3ICsgKHBhcnRzW3NpZHhdIHx8IDgyMjQpIDw9IDgyMjQpIHsgdys9IChwYXJ0c1tzaWR4XSB8fCA4MjI0KTsgc2lkeCsrOyB9XG5cdHZhciBvID0gYmEubmV4dCg0KTtcblx0by53cml0ZV9zaGlmdCgyLCB0KTtcblx0by53cml0ZV9zaGlmdCgyLCB3KTtcblx0YmEucHVzaChwYXlsb2FkLnNsaWNlKGksIGkgKyB3KSk7XG5cdGkgKz0gdztcblx0d2hpbGUoaSA8IGxlbikge1xuXHRcdG8gPSBiYS5uZXh0KDQpO1xuXHRcdG8ud3JpdGVfc2hpZnQoMiwgMHgzYyk7IC8vIFRPRE86IGZpZ3VyZSBvdXQgY29ycmVjdCBjb250aW51ZSB0eXBlXG5cdFx0dyA9IDA7XG5cdFx0d2hpbGUodyArIChwYXJ0c1tzaWR4XSB8fCA4MjI0KSA8PSA4MjI0KSB7IHcrPSAocGFydHNbc2lkeF0gfHwgODIyNCk7IHNpZHgrKzsgfVxuXHRcdG8ud3JpdGVfc2hpZnQoMiwgdyk7XG5cdFx0YmEucHVzaChwYXlsb2FkLnNsaWNlKGksIGkrdykpOyBpKz0gdztcblx0fVxufVxuXG5mdW5jdGlvbiB3cml0ZV9CSUZGMkNlbGwob3V0LCByLyo6bnVtYmVyKi8sIGMvKjpudW1iZXIqLykge1xuXHRpZighb3V0KSBvdXQgPSBuZXdfYnVmKDcpO1xuXHRvdXQud3JpdGVfc2hpZnQoMiwgcik7XG5cdG91dC53cml0ZV9zaGlmdCgyLCBjKTtcblx0b3V0LndyaXRlX3NoaWZ0KDIsIDApO1xuXHRvdXQud3JpdGVfc2hpZnQoMSwgMCk7XG5cdHJldHVybiBvdXQ7XG59XG5cbmZ1bmN0aW9uIHdyaXRlX0JJRkYyQkVSUihyLyo6bnVtYmVyKi8sIGMvKjpudW1iZXIqLywgdmFsLCB0Lyo6P3N0cmluZyovKSB7XG5cdHZhciBvdXQgPSBuZXdfYnVmKDkpO1xuXHR3cml0ZV9CSUZGMkNlbGwob3V0LCByLCBjKTtcblx0d3JpdGVfQmVzKHZhbCwgdCB8fCAnYicsIG91dCk7XG5cdHJldHVybiBvdXQ7XG59XG5cbi8qIFRPRE86IGNvZGVwYWdlLCBsYXJnZSBzdHJpbmdzICovXG5mdW5jdGlvbiB3cml0ZV9CSUZGMkxBQkVMKHIvKjpudW1iZXIqLywgYy8qOm51bWJlciovLCB2YWwpIHtcblx0dmFyIG91dCA9IG5ld19idWYoOCArIDIqdmFsLmxlbmd0aCk7XG5cdHdyaXRlX0JJRkYyQ2VsbChvdXQsIHIsIGMpO1xuXHRvdXQud3JpdGVfc2hpZnQoMSwgdmFsLmxlbmd0aCk7XG5cdG91dC53cml0ZV9zaGlmdCh2YWwubGVuZ3RoLCB2YWwsICdzYmNzJyk7XG5cdHJldHVybiBvdXQubCA8IG91dC5sZW5ndGggPyBvdXQuc2xpY2UoMCwgb3V0LmwpIDogb3V0O1xufVxuXG5mdW5jdGlvbiB3cml0ZV93c19iaWZmMl9jZWxsKGJhLyo6QnVmQXJyYXkqLywgY2VsbC8qOkNlbGwqLywgUi8qOm51bWJlciovLCBDLyo6bnVtYmVyKi8vKjo6LCBvcHRzKi8pIHtcblx0aWYoY2VsbC52ICE9IG51bGwpIHN3aXRjaChjZWxsLnQpIHtcblx0XHRjYXNlICdkJzogY2FzZSAnbic6XG5cdFx0XHR2YXIgdiA9IGNlbGwudCA9PSAnZCcgPyBkYXRlbnVtKHBhcnNlRGF0ZShjZWxsLnYpKSA6IGNlbGwudjtcblx0XHRcdGlmKCh2ID09ICh2fDApKSAmJiAodiA+PSAwKSAmJiAodiA8IDY1NTM2KSlcblx0XHRcdFx0d3JpdGVfYmlmZl9yZWMoYmEsIDB4MDAwMiwgd3JpdGVfQklGRjJJTlQoUiwgQywgdikpO1xuXHRcdFx0ZWxzZVxuXHRcdFx0XHR3cml0ZV9iaWZmX3JlYyhiYSwgMHgwMDAzLCB3cml0ZV9CSUZGMk5VTShSLEMsIHYpKTtcblx0XHRcdHJldHVybjtcblx0XHRjYXNlICdiJzogY2FzZSAnZSc6IHdyaXRlX2JpZmZfcmVjKGJhLCAweDAwMDUsIHdyaXRlX0JJRkYyQkVSUihSLCBDLCBjZWxsLnYsIGNlbGwudCkpOyByZXR1cm47XG5cdFx0LyogVE9ETzogY29kZXBhZ2UsIHNzdCAqL1xuXHRcdGNhc2UgJ3MnOiBjYXNlICdzdHInOlxuXHRcdFx0d3JpdGVfYmlmZl9yZWMoYmEsIDB4MDAwNCwgd3JpdGVfQklGRjJMQUJFTChSLCBDLCAoY2VsbC52fHxcIlwiKS5zbGljZSgwLDI1NSkpKTtcblx0XHRcdHJldHVybjtcblx0fVxuXHR3cml0ZV9iaWZmX3JlYyhiYSwgMHgwMDAxLCB3cml0ZV9CSUZGMkNlbGwobnVsbCwgUiwgQykpO1xufVxuXG5mdW5jdGlvbiB3cml0ZV93c19iaWZmMihiYS8qOkJ1ZkFycmF5Ki8sIHdzLyo6V29ya3NoZWV0Ki8sIGlkeC8qOm51bWJlciovLCBvcHRzLyo6Oiwgd2I6V29ya2Jvb2sqLykge1xuXHR2YXIgZGVuc2UgPSBBcnJheS5pc0FycmF5KHdzKTtcblx0dmFyIHJhbmdlID0gc2FmZV9kZWNvZGVfcmFuZ2Uod3NbJyFyZWYnXSB8fCBcIkExXCIpLCByZWYvKjpzdHJpbmcqLywgcnIgPSBcIlwiLCBjb2xzLyo6QXJyYXk8c3RyaW5nPiovID0gW107XG5cdGlmKHJhbmdlLmUuYyA+IDB4RkYgfHwgcmFuZ2UuZS5yID4gMHgzRkZGKSB7XG5cdFx0aWYob3B0cy5XVEYpIHRocm93IG5ldyBFcnJvcihcIlJhbmdlIFwiICsgKHdzWychcmVmJ10gfHwgXCJBMVwiKSArIFwiIGV4Y2VlZHMgZm9ybWF0IGxpbWl0IEExOklWMTYzODRcIik7XG5cdFx0cmFuZ2UuZS5jID0gTWF0aC5taW4ocmFuZ2UuZS5jLCAweEZGKTtcblx0XHRyYW5nZS5lLnIgPSBNYXRoLm1pbihyYW5nZS5lLmMsIDB4M0ZGRik7XG5cdFx0cmVmID0gZW5jb2RlX3JhbmdlKHJhbmdlKTtcblx0fVxuXHRmb3IodmFyIFIgPSByYW5nZS5zLnI7IFIgPD0gcmFuZ2UuZS5yOyArK1IpIHtcblx0XHRyciA9IGVuY29kZV9yb3coUik7XG5cdFx0Zm9yKHZhciBDID0gcmFuZ2Uucy5jOyBDIDw9IHJhbmdlLmUuYzsgKytDKSB7XG5cdFx0XHRpZihSID09PSByYW5nZS5zLnIpIGNvbHNbQ10gPSBlbmNvZGVfY29sKEMpO1xuXHRcdFx0cmVmID0gY29sc1tDXSArIHJyO1xuXHRcdFx0dmFyIGNlbGwgPSBkZW5zZSA/ICh3c1tSXXx8W10pW0NdIDogd3NbcmVmXTtcblx0XHRcdGlmKCFjZWxsKSBjb250aW51ZTtcblx0XHRcdC8qIHdyaXRlIGNlbGwgKi9cblx0XHRcdHdyaXRlX3dzX2JpZmYyX2NlbGwoYmEsIGNlbGwsIFIsIEMsIG9wdHMpO1xuXHRcdH1cblx0fVxufVxuXG4vKiBCYXNlZCBvbiB0ZXN0IGZpbGVzICovXG5mdW5jdGlvbiB3cml0ZV9iaWZmMl9idWYod2IvKjpXb3JrYm9vayovLCBvcHRzLyo6V3JpdGVPcHRzKi8pIHtcblx0dmFyIG8gPSBvcHRzIHx8IHt9O1xuXHRpZihERU5TRSAhPSBudWxsICYmIG8uZGVuc2UgPT0gbnVsbCkgby5kZW5zZSA9IERFTlNFO1xuXHR2YXIgYmEgPSBidWZfYXJyYXkoKTtcblx0dmFyIGlkeCA9IDA7XG5cdGZvcih2YXIgaT0wO2k8d2IuU2hlZXROYW1lcy5sZW5ndGg7KytpKSBpZih3Yi5TaGVldE5hbWVzW2ldID09IG8uc2hlZXQpIGlkeD1pO1xuXHRpZihpZHggPT0gMCAmJiAhIW8uc2hlZXQgJiYgd2IuU2hlZXROYW1lc1swXSAhPSBvLnNoZWV0KSB0aHJvdyBuZXcgRXJyb3IoXCJTaGVldCBub3QgZm91bmQ6IFwiICsgby5zaGVldCk7XG5cdHdyaXRlX2JpZmZfcmVjKGJhLCAoby5iaWZmID09IDQgPyAweDA0MDkgOiAoby5iaWZmID09IDMgPyAweDAyMDkgOiAweDAwMDkpKSwgd3JpdGVfQk9GKHdiLCAweDEwLCBvKSk7XG5cdC8qIC4uLiAqL1xuXHR3cml0ZV93c19iaWZmMihiYSwgd2IuU2hlZXRzW3diLlNoZWV0TmFtZXNbaWR4XV0sIGlkeCwgbywgd2IpO1xuXHQvKiAuLi4gKi9cblx0d3JpdGVfYmlmZl9yZWMoYmEsIDB4MDAwQSk7XG5cdHJldHVybiBiYS5lbmQoKTtcbn1cblxuZnVuY3Rpb24gd3JpdGVfRk9OVFNfYmlmZjgoYmEsIGRhdGEsIG9wdHMpIHtcblx0d3JpdGVfYmlmZl9yZWMoYmEsIDB4MDAzMSAvKiBGb250ICovLCB3cml0ZV9Gb250KHtcblx0XHRzejoxMixcblx0XHRjb2xvcjoge3RoZW1lOjF9LFxuXHRcdG5hbWU6IFwiQXJpYWxcIixcblx0XHRmYW1pbHk6IDIsXG5cdFx0c2NoZW1lOiBcIm1pbm9yXCJcblx0fSwgb3B0cykpO1xufVxuXG5cbmZ1bmN0aW9uIHdyaXRlX0ZNVFNfYmlmZjgoYmEsIE5GLyo6P1NTRlRhYmxlKi8sIG9wdHMpIHtcblx0aWYoIU5GKSByZXR1cm47XG5cdFtbNSw4XSxbMjMsMjZdLFs0MSw0NF0sWy8qNjMqLzUwLC8qNjZdLFsxNjQsKi8zOTJdXS5mb3JFYWNoKGZ1bmN0aW9uKHIpIHtcblx0XHQvKjo6IGlmKCFORikgcmV0dXJuOyAqL1xuXHRcdGZvcih2YXIgaSA9IHJbMF07IGkgPD0gclsxXTsgKytpKSBpZihORltpXSAhPSBudWxsKSB3cml0ZV9iaWZmX3JlYyhiYSwgMHgwNDFFIC8qIEZvcm1hdCAqLywgd3JpdGVfRm9ybWF0KGksIE5GW2ldLCBvcHRzKSk7XG5cdH0pO1xufVxuXG5mdW5jdGlvbiB3cml0ZV9GRUFUKGJhLCB3cykge1xuXHQvKiBbTVMtWExTXSAyLjQuMTEyICovXG5cdHZhciBvID0gbmV3X2J1ZigxOSk7XG5cdG8ud3JpdGVfc2hpZnQoNCwgMHg4NjcpOyBvLndyaXRlX3NoaWZ0KDQsIDApOyBvLndyaXRlX3NoaWZ0KDQsIDApO1xuXHRvLndyaXRlX3NoaWZ0KDIsIDMpOyBvLndyaXRlX3NoaWZ0KDEsIDEpOyBvLndyaXRlX3NoaWZ0KDQsIDApO1xuXHR3cml0ZV9iaWZmX3JlYyhiYSwgMHgwODY3IC8qIEZlYXRIZHIgKi8sIG8pO1xuXHQvKiBbTVMtWExTXSAyLjQuMTExICovXG5cdG8gPSBuZXdfYnVmKDM5KTtcblx0by53cml0ZV9zaGlmdCg0LCAweDg2OCk7IG8ud3JpdGVfc2hpZnQoNCwgMCk7IG8ud3JpdGVfc2hpZnQoNCwgMCk7XG5cdG8ud3JpdGVfc2hpZnQoMiwgMyk7IG8ud3JpdGVfc2hpZnQoMSwgMCk7IG8ud3JpdGVfc2hpZnQoNCwgMCk7XG5cdG8ud3JpdGVfc2hpZnQoMiwgMSk7IG8ud3JpdGVfc2hpZnQoNCwgNCk7IG8ud3JpdGVfc2hpZnQoMiwgMCk7XG5cdHdyaXRlX1JlZjhVKHNhZmVfZGVjb2RlX3JhbmdlKHdzWychcmVmJ118fFwiQTFcIiksIG8pO1xuXHRvLndyaXRlX3NoaWZ0KDQsIDQpO1xuXHR3cml0ZV9iaWZmX3JlYyhiYSwgMHgwODY4IC8qIEZlYXQgKi8sIG8pO1xufVxuXG5mdW5jdGlvbiB3cml0ZV9DRUxMWEZTX2JpZmY4KGJhLCBvcHRzKSB7XG5cdGZvcih2YXIgaSA9IDA7IGkgPCAxNjsgKytpKSB3cml0ZV9iaWZmX3JlYyhiYSwgMHgwMGUwIC8qIFhGICovLCB3cml0ZV9YRih7bnVtRm10SWQ6MCwgc3R5bGU6dHJ1ZX0sIDAsIG9wdHMpKTtcblx0b3B0cy5jZWxsWGZzLmZvckVhY2goZnVuY3Rpb24oYykge1xuXHRcdHdyaXRlX2JpZmZfcmVjKGJhLCAweDAwZTAgLyogWEYgKi8sIHdyaXRlX1hGKGMsIDAsIG9wdHMpKTtcblx0fSk7XG59XG5cbmZ1bmN0aW9uIHdyaXRlX3dzX2JpZmY4X2hsaW5rcyhiYS8qOkJ1ZkFycmF5Ki8sIHdzKSB7XG5cdGZvcih2YXIgUj0wOyBSPHdzWychbGlua3MnXS5sZW5ndGg7ICsrUikge1xuXHRcdHZhciBITCA9IHdzWychbGlua3MnXVtSXTtcblx0XHR3cml0ZV9iaWZmX3JlYyhiYSwgMHgwMWI4IC8qIEhMaW5rICovLCB3cml0ZV9ITGluayhITCkpO1xuXHRcdGlmKEhMWzFdLlRvb2x0aXApIHdyaXRlX2JpZmZfcmVjKGJhLCAweDA4MDAgLyogSExpbmtUb29sdGlwICovLCB3cml0ZV9ITGlua1Rvb2x0aXAoSEwpKTtcblx0fVxuXHRkZWxldGUgd3NbJyFsaW5rcyddO1xufVxuXG5mdW5jdGlvbiB3cml0ZV93c19jb2xzX2JpZmY4KGJhLCBjb2xzKSB7XG5cdGlmKCFjb2xzKSByZXR1cm47XG5cdHZhciBjbnQgPSAwO1xuXHRjb2xzLmZvckVhY2goZnVuY3Rpb24oY29sLCBpZHgpIHtcblx0XHRpZigrK2NudCA8PSAyNTYgJiYgY29sKSB7XG5cdFx0XHR3cml0ZV9iaWZmX3JlYyhiYSwgMHgwMDdkIC8qIENvbEluZm8gKi8sIHdyaXRlX0NvbEluZm8oY29sX29ial93KGlkeCwgY29sKSwgaWR4KSk7XG5cdFx0fVxuXHR9KTtcbn1cblxuZnVuY3Rpb24gd3JpdGVfd3NfYmlmZjhfY2VsbChiYS8qOkJ1ZkFycmF5Ki8sIGNlbGwvKjpDZWxsKi8sIFIvKjpudW1iZXIqLywgQy8qOm51bWJlciovLCBvcHRzKSB7XG5cdHZhciBvcyA9IDE2ICsgZ2V0X2NlbGxfc3R5bGUob3B0cy5jZWxsWGZzLCBjZWxsLCBvcHRzKTtcblx0aWYoY2VsbC52ID09IG51bGwgJiYgIWNlbGwuYmYpIHtcblx0XHR3cml0ZV9iaWZmX3JlYyhiYSwgMHgwMjAxIC8qIEJsYW5rICovLCB3cml0ZV9YTFNDZWxsKFIsIEMsIG9zKSk7XG5cdFx0cmV0dXJuO1xuXHR9XG5cdGlmKGNlbGwuYmYpIHdyaXRlX2JpZmZfcmVjKGJhLCAweDAwMDYgLyogRm9ybXVsYSAqLywgd3JpdGVfRm9ybXVsYShjZWxsLCBSLCBDLCBvcHRzLCBvcykpO1xuXHRlbHNlIHN3aXRjaChjZWxsLnQpIHtcblx0XHRjYXNlICdkJzogY2FzZSAnbic6XG5cdFx0XHR2YXIgdiA9IGNlbGwudCA9PSAnZCcgPyBkYXRlbnVtKHBhcnNlRGF0ZShjZWxsLnYpKSA6IGNlbGwudjtcblx0XHRcdC8qIFRPRE86IGVtaXQgUksgYXMgYXBwcm9wcmlhdGUgKi9cblx0XHRcdHdyaXRlX2JpZmZfcmVjKGJhLCAweDAyMDMgLyogTnVtYmVyICovLCB3cml0ZV9OdW1iZXIoUiwgQywgdiwgb3MsIG9wdHMpKTtcblx0XHRcdGJyZWFrO1xuXHRcdGNhc2UgJ2InOiBjYXNlICdlJzpcblx0XHRcdHdyaXRlX2JpZmZfcmVjKGJhLCAweDAyMDUgLyogQm9vbEVyciAqLywgd3JpdGVfQm9vbEVycihSLCBDLCBjZWxsLnYsIG9zLCBvcHRzLCBjZWxsLnQpKTtcblx0XHRcdGJyZWFrO1xuXHRcdC8qIFRPRE86IGNvZGVwYWdlLCBzc3QgKi9cblx0XHRjYXNlICdzJzogY2FzZSAnc3RyJzpcblx0XHRcdGlmKG9wdHMuYm9va1NTVCkge1xuXHRcdFx0XHR2YXIgaXNzdCA9IGdldF9zc3RfaWQob3B0cy5TdHJpbmdzLCBjZWxsLnYsIG9wdHMucmV2U3RyaW5ncyk7XG5cdFx0XHRcdHdyaXRlX2JpZmZfcmVjKGJhLCAweDAwZmQgLyogTGFiZWxTc3QgKi8sIHdyaXRlX0xhYmVsU3N0KFIsIEMsIGlzc3QsIG9zLCBvcHRzKSk7XG5cdFx0XHR9IGVsc2Ugd3JpdGVfYmlmZl9yZWMoYmEsIDB4MDIwNCAvKiBMYWJlbCAqLywgd3JpdGVfTGFiZWwoUiwgQywgKGNlbGwudnx8XCJcIikuc2xpY2UoMCwyNTUpLCBvcywgb3B0cykpO1xuXHRcdFx0YnJlYWs7XG5cdFx0ZGVmYXVsdDpcblx0XHRcdHdyaXRlX2JpZmZfcmVjKGJhLCAweDAyMDEgLyogQmxhbmsgKi8sIHdyaXRlX1hMU0NlbGwoUiwgQywgb3MpKTtcblx0fVxufVxuXG4vKiBbTVMtWExTXSAyLjEuNy4yMC41ICovXG5mdW5jdGlvbiB3cml0ZV93c19iaWZmOChpZHgvKjpudW1iZXIqLywgb3B0cywgd2IvKjpXb3JrYm9vayovKSB7XG5cdHZhciBiYSA9IGJ1Zl9hcnJheSgpO1xuXHR2YXIgcyA9IHdiLlNoZWV0TmFtZXNbaWR4XSwgd3MgPSB3Yi5TaGVldHNbc10gfHwge307XG5cdHZhciBfV0IvKjpXQldCUHJvcHMqLyA9ICgod2J8fHt9KS5Xb3JrYm9va3x8e30vKjphbnkqLyk7XG5cdHZhciBfc2hlZXQvKjpXQldTUHJvcCovID0gKChfV0IuU2hlZXRzfHxbXSlbaWR4XXx8e30vKjphbnkqLyk7XG5cdHZhciBkZW5zZSA9IEFycmF5LmlzQXJyYXkod3MpO1xuXHR2YXIgYjggPSBvcHRzLmJpZmYgPT0gODtcblx0dmFyIHJlZi8qOnN0cmluZyovLCByciA9IFwiXCIsIGNvbHMvKjpBcnJheTxzdHJpbmc+Ki8gPSBbXTtcblx0dmFyIHJhbmdlID0gc2FmZV9kZWNvZGVfcmFuZ2Uod3NbJyFyZWYnXSB8fCBcIkExXCIpO1xuXHR2YXIgTUFYX1JPV1MgPSBiOCA/IDY1NTM2IDogMTYzODQ7XG5cdGlmKHJhbmdlLmUuYyA+IDB4RkYgfHwgcmFuZ2UuZS5yID49IE1BWF9ST1dTKSB7XG5cdFx0aWYob3B0cy5XVEYpIHRocm93IG5ldyBFcnJvcihcIlJhbmdlIFwiICsgKHdzWychcmVmJ10gfHwgXCJBMVwiKSArIFwiIGV4Y2VlZHMgZm9ybWF0IGxpbWl0IEExOklWMTYzODRcIik7XG5cdFx0cmFuZ2UuZS5jID0gTWF0aC5taW4ocmFuZ2UuZS5jLCAweEZGKTtcblx0XHRyYW5nZS5lLnIgPSBNYXRoLm1pbihyYW5nZS5lLmMsIE1BWF9ST1dTLTEpO1xuXHR9XG5cblx0d3JpdGVfYmlmZl9yZWMoYmEsIDB4MDgwOSwgd3JpdGVfQk9GKHdiLCAweDEwLCBvcHRzKSk7XG5cdC8qIFtVbmNhbGNlZF0gSW5kZXggKi9cblx0d3JpdGVfYmlmZl9yZWMoYmEsIDB4MDAwZCAvKiBDYWxjTW9kZSAqLywgd3JpdGV1aW50MTYoMSkpO1xuXHR3cml0ZV9iaWZmX3JlYyhiYSwgMHgwMDBjIC8qIENhbGNDb3VudCAqLywgd3JpdGV1aW50MTYoMTAwKSk7XG5cdHdyaXRlX2JpZmZfcmVjKGJhLCAweDAwMGYgLyogQ2FsY1JlZk1vZGUgKi8sIHdyaXRlYm9vbCh0cnVlKSk7XG5cdHdyaXRlX2JpZmZfcmVjKGJhLCAweDAwMTEgLyogQ2FsY0l0ZXIgKi8sIHdyaXRlYm9vbChmYWxzZSkpO1xuXHR3cml0ZV9iaWZmX3JlYyhiYSwgMHgwMDEwIC8qIENhbGNEZWx0YSAqLywgd3JpdGVfWG51bSgwLjAwMSkpO1xuXHR3cml0ZV9iaWZmX3JlYyhiYSwgMHgwMDVmIC8qIENhbGNTYXZlUmVjYWxjICovLCB3cml0ZWJvb2wodHJ1ZSkpO1xuXHR3cml0ZV9iaWZmX3JlYyhiYSwgMHgwMDJhIC8qIFByaW50Um93Q29sICovLCB3cml0ZWJvb2woZmFsc2UpKTtcblx0d3JpdGVfYmlmZl9yZWMoYmEsIDB4MDAyYiAvKiBQcmludEdyaWQgKi8sIHdyaXRlYm9vbChmYWxzZSkpO1xuXHR3cml0ZV9iaWZmX3JlYyhiYSwgMHgwMDgyIC8qIEdyaWRTZXQgKi8sIHdyaXRldWludDE2KDEpKTtcblx0d3JpdGVfYmlmZl9yZWMoYmEsIDB4MDA4MCAvKiBHdXRzICovLCB3cml0ZV9HdXRzKFswLDBdKSk7XG5cdC8qIERlZmF1bHRSb3dIZWlnaHQgV3NCb29sIFtTeW5jXSBbTFByXSBbSG9yaXpvbnRhbFBhZ2VCcmVha3NdIFtWZXJ0aWNhbFBhZ2VCcmVha3NdICovXG5cdC8qIEhlYWRlciAoc3RyaW5nKSAqL1xuXHQvKiBGb290ZXIgKHN0cmluZykgKi9cblx0d3JpdGVfYmlmZl9yZWMoYmEsIDB4MDA4MyAvKiBIQ2VudGVyICovLCB3cml0ZWJvb2woZmFsc2UpKTtcblx0d3JpdGVfYmlmZl9yZWMoYmEsIDB4MDA4NCAvKiBWQ2VudGVyICovLCB3cml0ZWJvb2woZmFsc2UpKTtcblx0LyogLi4uICovXG5cdGlmKGI4KSB3cml0ZV93c19jb2xzX2JpZmY4KGJhLCB3c1tcIiFjb2xzXCJdKTtcblx0LyogLi4uICovXG5cdHdyaXRlX2JpZmZfcmVjKGJhLCAweDIwMCwgd3JpdGVfRGltZW5zaW9ucyhyYW5nZSwgb3B0cykpO1xuXHQvKiAuLi4gKi9cblxuXHRpZihiOCkgd3NbJyFsaW5rcyddID0gW107XG5cdGZvcih2YXIgUiA9IHJhbmdlLnMucjsgUiA8PSByYW5nZS5lLnI7ICsrUikge1xuXHRcdHJyID0gZW5jb2RlX3JvdyhSKTtcblx0XHRmb3IodmFyIEMgPSByYW5nZS5zLmM7IEMgPD0gcmFuZ2UuZS5jOyArK0MpIHtcblx0XHRcdGlmKFIgPT09IHJhbmdlLnMucikgY29sc1tDXSA9IGVuY29kZV9jb2woQyk7XG5cdFx0XHRyZWYgPSBjb2xzW0NdICsgcnI7XG5cdFx0XHR2YXIgY2VsbCA9IGRlbnNlID8gKHdzW1JdfHxbXSlbQ10gOiB3c1tyZWZdO1xuXHRcdFx0aWYoIWNlbGwpIGNvbnRpbnVlO1xuXHRcdFx0Lyogd3JpdGUgY2VsbCAqL1xuXHRcdFx0d3JpdGVfd3NfYmlmZjhfY2VsbChiYSwgY2VsbCwgUiwgQywgb3B0cyk7XG5cdFx0XHRpZihiOCAmJiBjZWxsLmwpIHdzWychbGlua3MnXS5wdXNoKFtyZWYsIGNlbGwubF0pO1xuXHRcdH1cblx0fVxuXHR2YXIgY25hbWUvKjpzdHJpbmcqLyA9IF9zaGVldC5Db2RlTmFtZSB8fCBfc2hlZXQubmFtZSB8fCBzO1xuXHQvKiAuLi4gKi9cblx0aWYoYjgpIHdyaXRlX2JpZmZfcmVjKGJhLCAweDAyM2UgLyogV2luZG93MiAqLywgd3JpdGVfV2luZG93MigoX1dCLlZpZXdzfHxbXSlbMF0pKTtcblx0LyogLi4uICovXG5cdGlmKGI4ICYmICh3c1snIW1lcmdlcyddfHxbXSkubGVuZ3RoKSB3cml0ZV9iaWZmX3JlYyhiYSwgMHgwMGU1IC8qIE1lcmdlQ2VsbHMgKi8sIHdyaXRlX01lcmdlQ2VsbHMod3NbJyFtZXJnZXMnXSkpO1xuXHQvKiBbTFJuZ10gKlFVRVJZVEFCTEUgW1BIT05FVElDSU5GT10gQ09OREZNVFMgKi9cblx0aWYoYjgpIHdyaXRlX3dzX2JpZmY4X2hsaW5rcyhiYSwgd3MpO1xuXHQvKiBbRFZBTF0gKi9cblx0d3JpdGVfYmlmZl9yZWMoYmEsIDB4MDFiYSAvKiBDb2RlTmFtZSAqLywgd3JpdGVfWExVbmljb2RlU3RyaW5nKGNuYW1lLCBvcHRzKSk7XG5cdC8qICpXZWJQdWIgKkNlbGxXYXRjaCBbU2hlZXRFeHRdICovXG5cdGlmKGI4KSB3cml0ZV9GRUFUKGJhLCB3cyk7XG5cdC8qICpGRUFUMTEgKlJFQ09SRDEyICovXG5cdHdyaXRlX2JpZmZfcmVjKGJhLCAweDAwMGEgLyogRU9GICovKTtcblx0cmV0dXJuIGJhLmVuZCgpO1xufVxuXG4vKiBbTVMtWExTXSAyLjEuNy4yMC4zICovXG5mdW5jdGlvbiB3cml0ZV9iaWZmOF9nbG9iYWwod2IvKjpXb3JrYm9vayovLCBidWZzLCBvcHRzLyo6V3JpdGVPcHRzKi8pIHtcblx0dmFyIEEgPSBidWZfYXJyYXkoKTtcblx0dmFyIF9XQi8qOldCV0JQcm9wcyovID0gKCh3Ynx8e30pLldvcmtib29rfHx7fS8qOmFueSovKTtcblx0dmFyIF9zaGVldHMvKjpBcnJheTxXQldTUHJvcD4qLyA9IChfV0IuU2hlZXRzfHxbXSk7XG5cdHZhciBfd2IvKjpXQlByb3BzKi8gPSAvKjo6KCgqL19XQi5XQlByb3BzfHx7Lyo6OkNvZGVOYW1lOlwiVGhpc1dvcmtib29rXCIqL30vKjo6ICk6YW55KSovO1xuXHR2YXIgYjggPSBvcHRzLmJpZmYgPT0gOCwgYjUgPSBvcHRzLmJpZmYgPT0gNTtcblx0d3JpdGVfYmlmZl9yZWMoQSwgMHgwODA5LCB3cml0ZV9CT0Yod2IsIDB4MDUsIG9wdHMpKTtcblx0aWYob3B0cy5ib29rVHlwZSA9PSBcInhsYVwiKSB3cml0ZV9iaWZmX3JlYyhBLCAweDAwODcgLyogQWRkaW4gKi8pO1xuXHR3cml0ZV9iaWZmX3JlYyhBLCAweDAwZTEgLyogSW50ZXJmYWNlSGRyICovLCBiOCA/IHdyaXRldWludDE2KDB4MDRiMCkgOiBudWxsKTtcblx0d3JpdGVfYmlmZl9yZWMoQSwgMHgwMGMxIC8qIE1tcyAqLywgd3JpdGV6ZXJvZXMoMikpO1xuXHRpZihiNSkgd3JpdGVfYmlmZl9yZWMoQSwgMHgwMGJmIC8qIFRvb2xiYXJIZHIgKi8pO1xuXHRpZihiNSkgd3JpdGVfYmlmZl9yZWMoQSwgMHgwMGMwIC8qIFRvb2xiYXJFbmQgKi8pO1xuXHR3cml0ZV9iaWZmX3JlYyhBLCAweDAwZTIgLyogSW50ZXJmYWNlRW5kICovKTtcblx0d3JpdGVfYmlmZl9yZWMoQSwgMHgwMDVjIC8qIFdyaXRlQWNjZXNzICovLCB3cml0ZV9Xcml0ZUFjY2VzcyhcIlNoZWV0SlNcIiwgb3B0cykpO1xuXHQvKiBbRmlsZVNoYXJpbmddICovXG5cdHdyaXRlX2JpZmZfcmVjKEEsIDB4MDA0MiAvKiBDb2RlUGFnZSAqLywgd3JpdGV1aW50MTYoYjggPyAweDA0YjAgOiAweDA0RTQpKTtcblx0LyogKjIwNDcgTGVsICovXG5cdGlmKGI4KSB3cml0ZV9iaWZmX3JlYyhBLCAweDAxNjEgLyogRFNGICovLCB3cml0ZXVpbnQxNigwKSk7XG5cdGlmKGI4KSB3cml0ZV9iaWZmX3JlYyhBLCAweDAxYzAgLyogRXhjZWw5RmlsZSAqLyk7XG5cdHdyaXRlX2JpZmZfcmVjKEEsIDB4MDEzZCAvKiBSUlRhYklkICovLCB3cml0ZV9SUlRhYklkKHdiLlNoZWV0TmFtZXMubGVuZ3RoKSk7XG5cdGlmKGI4ICYmIHdiLnZiYXJhdykgd3JpdGVfYmlmZl9yZWMoQSwgMHgwMGQzIC8qIE9iUHJvaiAqLyk7XG5cdC8qIFtPYk5vTWFjcm9zXSAqL1xuXHRpZihiOCAmJiB3Yi52YmFyYXcpIHtcblx0XHR2YXIgY25hbWUvKjpzdHJpbmcqLyA9IF93Yi5Db2RlTmFtZSB8fCBcIlRoaXNXb3JrYm9va1wiO1xuXHRcdHdyaXRlX2JpZmZfcmVjKEEsIDB4MDFiYSAvKiBDb2RlTmFtZSAqLywgd3JpdGVfWExVbmljb2RlU3RyaW5nKGNuYW1lLCBvcHRzKSk7XG5cdH1cblx0d3JpdGVfYmlmZl9yZWMoQSwgMHgwMDljIC8qIEJ1aWx0SW5Gbkdyb3VwQ291bnQgKi8sIHdyaXRldWludDE2KDB4MTEpKTtcblx0LyogKkZuR3JvdXBOYW1lICpGbkdycDEyICovXG5cdC8qICpMYmwgKi9cblx0LyogW09sZU9iamVjdFNpemVdICovXG5cdHdyaXRlX2JpZmZfcmVjKEEsIDB4MDAxOSAvKiBXaW5Qcm90ZWN0ICovLCB3cml0ZWJvb2woZmFsc2UpKTtcblx0d3JpdGVfYmlmZl9yZWMoQSwgMHgwMDEyIC8qIFByb3RlY3QgKi8sIHdyaXRlYm9vbChmYWxzZSkpO1xuXHR3cml0ZV9iaWZmX3JlYyhBLCAweDAwMTMgLyogUGFzc3dvcmQgKi8sIHdyaXRldWludDE2KDApKTtcblx0aWYoYjgpIHdyaXRlX2JpZmZfcmVjKEEsIDB4MDFhZiAvKiBQcm90NFJldiAqLywgd3JpdGVib29sKGZhbHNlKSk7XG5cdGlmKGI4KSB3cml0ZV9iaWZmX3JlYyhBLCAweDAxYmMgLyogUHJvdDRSZXZQYXNzICovLCB3cml0ZXVpbnQxNigwKSk7XG5cdHdyaXRlX2JpZmZfcmVjKEEsIDB4MDAzZCAvKiBXaW5kb3cxICovLCB3cml0ZV9XaW5kb3cxKG9wdHMpKTtcblx0d3JpdGVfYmlmZl9yZWMoQSwgMHgwMDQwIC8qIEJhY2t1cCAqLywgd3JpdGVib29sKGZhbHNlKSk7XG5cdHdyaXRlX2JpZmZfcmVjKEEsIDB4MDA4ZCAvKiBIaWRlT2JqICovLCB3cml0ZXVpbnQxNigwKSk7XG5cdHdyaXRlX2JpZmZfcmVjKEEsIDB4MDAyMiAvKiBEYXRlMTkwNCAqLywgd3JpdGVib29sKHNhZmUxOTA0KHdiKT09XCJ0cnVlXCIpKTtcblx0d3JpdGVfYmlmZl9yZWMoQSwgMHgwMDBlIC8qIENhbGNQcmVjaXNpb24gKi8sIHdyaXRlYm9vbCh0cnVlKSk7XG5cdGlmKGI4KSB3cml0ZV9iaWZmX3JlYyhBLCAweDAxYjcgLyogUmVmcmVzaEFsbCAqLywgd3JpdGVib29sKGZhbHNlKSk7XG5cdHdyaXRlX2JpZmZfcmVjKEEsIDB4MDBEQSAvKiBCb29rQm9vbCAqLywgd3JpdGV1aW50MTYoMCkpO1xuXHQvKiAuLi4gKi9cblx0d3JpdGVfRk9OVFNfYmlmZjgoQSwgd2IsIG9wdHMpO1xuXHR3cml0ZV9GTVRTX2JpZmY4KEEsIHdiLlNTRiwgb3B0cyk7XG5cdHdyaXRlX0NFTExYRlNfYmlmZjgoQSwgb3B0cyk7XG5cdC8qIC4uLiAqL1xuXHRpZihiOCkgd3JpdGVfYmlmZl9yZWMoQSwgMHgwMTYwIC8qIFVzZXNFTEZzICovLCB3cml0ZWJvb2woZmFsc2UpKTtcblx0dmFyIGEgPSBBLmVuZCgpO1xuXG5cdHZhciBDID0gYnVmX2FycmF5KCk7XG5cdC8qIE1FVEFEQVRBIFtNVFJTZXR0aW5nc10gW0ZvcmNlRnVsbENhbGN1bGF0aW9uXSAqL1xuXHRpZihiOCkgd3JpdGVfYmlmZl9yZWMoQywgMHgwMDhDLCB3cml0ZV9Db3VudHJ5KCkpO1xuXHQvKiAqU1VQQk9PSyAqTEJMICpSVEQgW1JlY2FsY0lkXSAqSEZQaWN0dXJlICpNU09EUkFXSU5HR1JPVVAgKi9cblxuXHQvKiBCSUZGODogW1NTVCAqQ29udGludWVdIEV4dFNTVCAqL1xuXHRpZihiOCAmJiBvcHRzLlN0cmluZ3MpIHdyaXRlX2JpZmZfY29udGludWUoQywgMHgwMEZDLCB3cml0ZV9TU1Qob3B0cy5TdHJpbmdzLCBvcHRzKSk7XG5cblx0LyogKldlYlB1YiBbV09wdF0gW0NyRXJyXSBbQm9va0V4dF0gKkZlYXRIZHIgKkRDb25uIFtUSEVNRV0gW0NvbXByZXNzUGljdHVyZXNdIFtDb21wYXQxMl0gW0dVSURUeXBlTGliXSAqL1xuXHR3cml0ZV9iaWZmX3JlYyhDLCAweDAwMEEgLyogRU9GICovKTtcblx0dmFyIGMgPSBDLmVuZCgpO1xuXG5cdHZhciBCID0gYnVmX2FycmF5KCk7XG5cdHZhciBibGVuID0gMCwgaiA9IDA7XG5cdGZvcihqID0gMDsgaiA8IHdiLlNoZWV0TmFtZXMubGVuZ3RoOyArK2opIGJsZW4gKz0gKGI4ID8gMTIgOiAxMSkgKyAoYjggPyAyIDogMSkgKiB3Yi5TaGVldE5hbWVzW2pdLmxlbmd0aDtcblx0dmFyIHN0YXJ0ID0gYS5sZW5ndGggKyBibGVuICsgYy5sZW5ndGg7XG5cdGZvcihqID0gMDsgaiA8IHdiLlNoZWV0TmFtZXMubGVuZ3RoOyArK2opIHtcblx0XHR2YXIgX3NoZWV0Lyo6V0JXU1Byb3AqLyA9IF9zaGVldHNbal0gfHwgKHt9Lyo6YW55Ki8pO1xuXHRcdHdyaXRlX2JpZmZfcmVjKEIsIDB4MDA4NSAvKiBCb3VuZFNoZWV0OCAqLywgd3JpdGVfQm91bmRTaGVldDgoe3BvczpzdGFydCwgaHM6X3NoZWV0LkhpZGRlbnx8MCwgZHQ6MCwgbmFtZTp3Yi5TaGVldE5hbWVzW2pdfSwgb3B0cykpO1xuXHRcdHN0YXJ0ICs9IGJ1ZnNbal0ubGVuZ3RoO1xuXHR9XG5cdC8qIDEqQm91bmRTaGVldDggKi9cblx0dmFyIGIgPSBCLmVuZCgpO1xuXHRpZihibGVuICE9IGIubGVuZ3RoKSB0aHJvdyBuZXcgRXJyb3IoXCJCUzggXCIgKyBibGVuICsgXCIgIT0gXCIgKyBiLmxlbmd0aCk7XG5cblx0dmFyIG91dCA9IFtdO1xuXHRpZihhLmxlbmd0aCkgb3V0LnB1c2goYSk7XG5cdGlmKGIubGVuZ3RoKSBvdXQucHVzaChiKTtcblx0aWYoYy5sZW5ndGgpIG91dC5wdXNoKGMpO1xuXHRyZXR1cm4gYmNvbmNhdChvdXQpO1xufVxuXG4vKiBbTVMtWExTXSAyLjEuNy4yMCBXb3JrYm9vayBTdHJlYW0gKi9cbmZ1bmN0aW9uIHdyaXRlX2JpZmY4X2J1Zih3Yi8qOldvcmtib29rKi8sIG9wdHMvKjpXcml0ZU9wdHMqLykge1xuXHR2YXIgbyA9IG9wdHMgfHwge307XG5cdHZhciBidWZzID0gW107XG5cblx0aWYod2IgJiYgIXdiLlNTRikge1xuXHRcdHdiLlNTRiA9IGR1cCh0YWJsZV9mbXQpO1xuXHR9XG5cdGlmKHdiICYmIHdiLlNTRikge1xuXHRcdG1ha2Vfc3NmKCk7IFNTRl9sb2FkX3RhYmxlKHdiLlNTRik7XG5cdFx0Ly8gJEZsb3dJZ25vcmVcblx0XHRvLnJldnNzZiA9IGV2ZXJ0X251bSh3Yi5TU0YpOyBvLnJldnNzZlt3Yi5TU0ZbNjU1MzVdXSA9IDA7XG5cdFx0by5zc2YgPSB3Yi5TU0Y7XG5cdH1cblxuXHRvLlN0cmluZ3MgPSAvKjo6KCgqL1tdLyo6OiA6YW55KTpTU1QpKi87IG8uU3RyaW5ncy5Db3VudCA9IDA7IG8uU3RyaW5ncy5VbmlxdWUgPSAwO1xuXHRmaXhfd3JpdGVfb3B0cyhvKTtcblxuXHRvLmNlbGxYZnMgPSBbXTtcblx0Z2V0X2NlbGxfc3R5bGUoby5jZWxsWGZzLCB7fSwge3JldnNzZjp7XCJHZW5lcmFsXCI6MH19KTtcblxuXHRpZighd2IuUHJvcHMpIHdiLlByb3BzID0ge307XG5cblx0Zm9yKHZhciBpID0gMDsgaSA8IHdiLlNoZWV0TmFtZXMubGVuZ3RoOyArK2kpIGJ1ZnNbYnVmcy5sZW5ndGhdID0gd3JpdGVfd3NfYmlmZjgoaSwgbywgd2IpO1xuXHRidWZzLnVuc2hpZnQod3JpdGVfYmlmZjhfZ2xvYmFsKHdiLCBidWZzLCBvKSk7XG5cdHJldHVybiBiY29uY2F0KGJ1ZnMpO1xufVxuXG5mdW5jdGlvbiB3cml0ZV9iaWZmX2J1Zih3Yi8qOldvcmtib29rKi8sIG9wdHMvKjpXcml0ZU9wdHMqLykge1xuXHRmb3IodmFyIGkgPSAwOyBpIDw9IHdiLlNoZWV0TmFtZXMubGVuZ3RoOyArK2kpIHtcblx0XHR2YXIgd3MgPSB3Yi5TaGVldHNbd2IuU2hlZXROYW1lc1tpXV07XG5cdFx0aWYoIXdzIHx8ICF3c1tcIiFyZWZcIl0pIGNvbnRpbnVlO1xuXHRcdHZhciByYW5nZSA9IGRlY29kZV9yYW5nZSh3c1tcIiFyZWZcIl0pO1xuXHRcdGlmKHJhbmdlLmUuYyA+IDI1NSkgeyAvLyBub3RlOiAyNTUgaXMgSVZcblx0XHRpZih0eXBlb2YgY29uc29sZSAhPSBcInVuZGVmaW5lZFwiICYmIGNvbnNvbGUuZXJyb3IpIGNvbnNvbGUuZXJyb3IoXCJXb3Jrc2hlZXQgJ1wiICsgd2IuU2hlZXROYW1lc1tpXSArIFwiJyBleHRlbmRzIGJleW9uZCBjb2x1bW4gSVYgKDI1NSkuICBEYXRhIG1heSBiZSBsb3N0LlwiKTtcblx0XHR9XG5cdH1cblxuXHR2YXIgbyA9IG9wdHMgfHwge307XG5cdHN3aXRjaChvLmJpZmYgfHwgMikge1xuXHRcdGNhc2UgODogY2FzZSA1OiByZXR1cm4gd3JpdGVfYmlmZjhfYnVmKHdiLCBvcHRzKTtcblx0XHRjYXNlIDQ6IGNhc2UgMzogY2FzZSAyOiByZXR1cm4gd3JpdGVfYmlmZjJfYnVmKHdiLCBvcHRzKTtcblx0fVxuXHR0aHJvdyBuZXcgRXJyb3IoXCJpbnZhbGlkIHR5cGUgXCIgKyBvLmJvb2tUeXBlICsgXCIgZm9yIEJJRkZcIik7XG59XG4vKiBub3RlOiBicm93c2VyIERPTSBlbGVtZW50IGNhbm5vdCBzZWUgbXNvLSBzdHlsZSBhdHRycywgbXVzdCBwYXJzZSAqL1xuZnVuY3Rpb24gaHRtbF90b19zaGVldChzdHIvKjpzdHJpbmcqLywgX29wdHMpLyo6V29ya2Jvb2sqLyB7XG5cdHZhciBvcHRzID0gX29wdHMgfHwge307XG5cdGlmKERFTlNFICE9IG51bGwgJiYgb3B0cy5kZW5zZSA9PSBudWxsKSBvcHRzLmRlbnNlID0gREVOU0U7XG5cdHZhciB3cy8qOldvcmtzaGVldCovID0gb3B0cy5kZW5zZSA/IChbXS8qOmFueSovKSA6ICh7fS8qOmFueSovKTtcblx0c3RyID0gc3RyLnJlcGxhY2UoLzwhLS0uKj8tLT4vZywgXCJcIik7XG5cdHZhciBtdGNoLyo6YW55Ki8gPSBzdHIubWF0Y2goLzx0YWJsZS9pKTtcblx0aWYoIW10Y2gpIHRocm93IG5ldyBFcnJvcihcIkludmFsaWQgSFRNTDogY291bGQgbm90IGZpbmQgPHRhYmxlPlwiKTtcblx0dmFyIG10Y2gyLyo6YW55Ki8gPSBzdHIubWF0Y2goLzxcXC90YWJsZS9pKTtcblx0dmFyIGkvKjpudW1iZXIqLyA9IG10Y2guaW5kZXgsIGovKjpudW1iZXIqLyA9IG10Y2gyICYmIG10Y2gyLmluZGV4IHx8IHN0ci5sZW5ndGg7XG5cdHZhciByb3dzID0gc3BsaXRfcmVnZXgoc3RyLnNsaWNlKGksIGopLCAvKDo/PHRyW14+XSo+KS9pLCBcIjx0cj5cIik7XG5cdHZhciBSID0gLTEsIEMgPSAwLCBSUyA9IDAsIENTID0gMDtcblx0dmFyIHJhbmdlLyo6UmFuZ2UqLyA9IHtzOntyOjEwMDAwMDAwLCBjOjEwMDAwMDAwfSxlOntyOjAsYzowfX07XG5cdHZhciBtZXJnZXMvKjpBcnJheTxSYW5nZT4qLyA9IFtdO1xuXHRmb3IoaSA9IDA7IGkgPCByb3dzLmxlbmd0aDsgKytpKSB7XG5cdFx0dmFyIHJvdyA9IHJvd3NbaV0udHJpbSgpO1xuXHRcdHZhciBoZCA9IHJvdy5zbGljZSgwLDMpLnRvTG93ZXJDYXNlKCk7XG5cdFx0aWYoaGQgPT0gXCI8dHJcIikgeyArK1I7IGlmKG9wdHMuc2hlZXRSb3dzICYmIG9wdHMuc2hlZXRSb3dzIDw9IFIpIHsgLS1SOyBicmVhazsgfSBDID0gMDsgY29udGludWU7IH1cblx0XHRpZihoZCAhPSBcIjx0ZFwiICYmIGhkICE9IFwiPHRoXCIpIGNvbnRpbnVlO1xuXHRcdHZhciBjZWxscyA9IHJvdy5zcGxpdCgvPFxcL3RbZGhdPi9pKTtcblx0XHRmb3IoaiA9IDA7IGogPCBjZWxscy5sZW5ndGg7ICsraikge1xuXHRcdFx0dmFyIGNlbGwgPSBjZWxsc1tqXS50cmltKCk7XG5cdFx0XHRpZighY2VsbC5tYXRjaCgvPHRbZGhdL2kpKSBjb250aW51ZTtcblx0XHRcdHZhciBtID0gY2VsbCwgY2MgPSAwO1xuXHRcdFx0LyogVE9ETzogcGFyc2Ugc3R5bGVzIGV0YyAqL1xuXHRcdFx0d2hpbGUobS5jaGFyQXQoMCkgPT0gXCI8XCIgJiYgKGNjID0gbS5pbmRleE9mKFwiPlwiKSkgPiAtMSkgbSA9IG0uc2xpY2UoY2MrMSk7XG5cdFx0XHRmb3IodmFyIG1pZHggPSAwOyBtaWR4IDwgbWVyZ2VzLmxlbmd0aDsgKyttaWR4KSB7XG5cdFx0XHRcdHZhciBfbWVyZ2UvKjpSYW5nZSovID0gbWVyZ2VzW21pZHhdO1xuXHRcdFx0XHRpZihfbWVyZ2Uucy5jID09IEMgJiYgX21lcmdlLnMuciA8IFIgJiYgUiA8PSBfbWVyZ2UuZS5yKSB7IEMgPSBfbWVyZ2UuZS5jICsgMTsgbWlkeCA9IC0xOyB9XG5cdFx0XHR9XG5cdFx0XHR2YXIgdGFnID0gcGFyc2V4bWx0YWcoY2VsbC5zbGljZSgwLCBjZWxsLmluZGV4T2YoXCI+XCIpKSk7XG5cdFx0XHRDUyA9IHRhZy5jb2xzcGFuID8gK3RhZy5jb2xzcGFuIDogMTtcblx0XHRcdGlmKChSUyA9ICt0YWcucm93c3Bhbik+MSB8fCBDUz4xKSBtZXJnZXMucHVzaCh7czp7cjpSLGM6Q30sZTp7cjpSICsgKFJTfHwxKSAtIDEsIGM6QyArIENTIC0gMX19KTtcblx0XHRcdHZhciBfdC8qOnN0cmluZyovID0gdGFnLnQgfHwgdGFnW1wiZGF0YS10XCJdIHx8IFwiXCI7XG5cdFx0XHQvKiBUT0RPOiBnZW5lcmF0ZSBzdHViIGNlbGxzICovXG5cdFx0XHRpZighbS5sZW5ndGgpIHsgQyArPSBDUzsgY29udGludWU7IH1cblx0XHRcdG0gPSBodG1sZGVjb2RlKG0pO1xuXHRcdFx0aWYocmFuZ2Uucy5yID4gUikgcmFuZ2Uucy5yID0gUjsgaWYocmFuZ2UuZS5yIDwgUikgcmFuZ2UuZS5yID0gUjtcblx0XHRcdGlmKHJhbmdlLnMuYyA+IEMpIHJhbmdlLnMuYyA9IEM7IGlmKHJhbmdlLmUuYyA8IEMpIHJhbmdlLmUuYyA9IEM7XG5cdFx0XHRpZighbS5sZW5ndGgpIHsgQyArPSBDUzsgY29udGludWU7IH1cblx0XHRcdHZhciBvLyo6Q2VsbCovID0ge3Q6J3MnLCB2Om19O1xuXHRcdFx0aWYob3B0cy5yYXcgfHwgIW0udHJpbSgpLmxlbmd0aCB8fCBfdCA9PSAncycpe31cblx0XHRcdGVsc2UgaWYobSA9PT0gJ1RSVUUnKSBvID0ge3Q6J2InLCB2OnRydWV9O1xuXHRcdFx0ZWxzZSBpZihtID09PSAnRkFMU0UnKSBvID0ge3Q6J2InLCB2OmZhbHNlfTtcblx0XHRcdGVsc2UgaWYoIWlzTmFOKGZ1enp5bnVtKG0pKSkgbyA9IHt0OiduJywgdjpmdXp6eW51bShtKX07XG5cdFx0XHRlbHNlIGlmKCFpc05hTihmdXp6eWRhdGUobSkuZ2V0RGF0ZSgpKSkge1xuXHRcdFx0XHRvID0gKHt0OidkJywgdjpwYXJzZURhdGUobSl9Lyo6YW55Ki8pO1xuXHRcdFx0XHRpZighb3B0cy5jZWxsRGF0ZXMpIG8gPSAoe3Q6J24nLCB2OmRhdGVudW0oby52KX0vKjphbnkqLyk7XG5cdFx0XHRcdG8ueiA9IG9wdHMuZGF0ZU5GIHx8IHRhYmxlX2ZtdFsxNF07XG5cdFx0XHR9XG5cdFx0XHRpZihvcHRzLmRlbnNlKSB7IGlmKCF3c1tSXSkgd3NbUl0gPSBbXTsgd3NbUl1bQ10gPSBvOyB9XG5cdFx0XHRlbHNlIHdzW2VuY29kZV9jZWxsKHtyOlIsIGM6Q30pXSA9IG87XG5cdFx0XHRDICs9IENTO1xuXHRcdH1cblx0fVxuXHR3c1snIXJlZiddID0gZW5jb2RlX3JhbmdlKHJhbmdlKTtcblx0aWYobWVyZ2VzLmxlbmd0aCkgd3NbXCIhbWVyZ2VzXCJdID0gbWVyZ2VzO1xuXHRyZXR1cm4gd3M7XG59XG5mdW5jdGlvbiBtYWtlX2h0bWxfcm93KHdzLyo6V29ya3NoZWV0Ki8sIHIvKjpSYW5nZSovLCBSLyo6bnVtYmVyKi8sIG8vKjpTaGVldDJIVE1MT3B0cyovKS8qOnN0cmluZyovIHtcblx0dmFyIE0vKjpBcnJheTxSYW5nZT4qLyA9ICh3c1snIW1lcmdlcyddIHx8W10pO1xuXHR2YXIgb28vKjpBcnJheTxzdHJpbmc+Ki8gPSBbXTtcblx0Zm9yKHZhciBDID0gci5zLmM7IEMgPD0gci5lLmM7ICsrQykge1xuXHRcdHZhciBSUyA9IDAsIENTID0gMDtcblx0XHRmb3IodmFyIGogPSAwOyBqIDwgTS5sZW5ndGg7ICsraikge1xuXHRcdFx0aWYoTVtqXS5zLnIgPiBSIHx8IE1bal0ucy5jID4gQykgY29udGludWU7XG5cdFx0XHRpZihNW2pdLmUuciA8IFIgfHwgTVtqXS5lLmMgPCBDKSBjb250aW51ZTtcblx0XHRcdGlmKE1bal0ucy5yIDwgUiB8fCBNW2pdLnMuYyA8IEMpIHsgUlMgPSAtMTsgYnJlYWs7IH1cblx0XHRcdFJTID0gTVtqXS5lLnIgLSBNW2pdLnMuciArIDE7IENTID0gTVtqXS5lLmMgLSBNW2pdLnMuYyArIDE7IGJyZWFrO1xuXHRcdH1cblx0XHRpZihSUyA8IDApIGNvbnRpbnVlO1xuXHRcdHZhciBjb29yZCA9IGVuY29kZV9jZWxsKHtyOlIsYzpDfSk7XG5cdFx0dmFyIGNlbGwgPSBvLmRlbnNlID8gKHdzW1JdfHxbXSlbQ10gOiB3c1tjb29yZF07XG5cdFx0LyogVE9ETzogaHRtbCBlbnRpdGllcyAqL1xuXHRcdHZhciB3ID0gKGNlbGwgJiYgY2VsbC52ICE9IG51bGwpICYmIChjZWxsLmggfHwgZXNjYXBlaHRtbChjZWxsLncgfHwgKGZvcm1hdF9jZWxsKGNlbGwpLCBjZWxsLncpIHx8IFwiXCIpKSB8fCBcIlwiO1xuXHRcdHZhciBzcCA9ICh7fS8qOmFueSovKTtcblx0XHRpZihSUyA+IDEpIHNwLnJvd3NwYW4gPSBSUztcblx0XHRpZihDUyA+IDEpIHNwLmNvbHNwYW4gPSBDUztcblx0XHRpZihvLmVkaXRhYmxlKSB3ID0gJzxzcGFuIGNvbnRlbnRlZGl0YWJsZT1cInRydWVcIj4nICsgdyArICc8L3NwYW4+Jztcblx0XHRlbHNlIGlmKGNlbGwpIHtcblx0XHRcdHNwW1wiZGF0YS10XCJdID0gY2VsbCAmJiBjZWxsLnQgfHwgJ3onO1xuXHRcdFx0aWYoY2VsbC52ICE9IG51bGwpIHNwW1wiZGF0YS12XCJdID0gY2VsbC52O1xuXHRcdFx0aWYoY2VsbC56ICE9IG51bGwpIHNwW1wiZGF0YS16XCJdID0gY2VsbC56O1xuXHRcdFx0aWYoY2VsbC5sICYmIChjZWxsLmwuVGFyZ2V0IHx8IFwiI1wiKS5jaGFyQXQoMCkgIT0gXCIjXCIpIHcgPSAnPGEgaHJlZj1cIicgKyBjZWxsLmwuVGFyZ2V0ICsnXCI+JyArIHcgKyAnPC9hPic7XG5cdFx0fVxuXHRcdHNwLmlkID0gKG8uaWQgfHwgXCJzanNcIikgKyBcIi1cIiArIGNvb3JkO1xuXHRcdG9vLnB1c2god3JpdGV4dGFnKCd0ZCcsIHcsIHNwKSk7XG5cdH1cblx0dmFyIHByZWFtYmxlID0gXCI8dHI+XCI7XG5cdHJldHVybiBwcmVhbWJsZSArIG9vLmpvaW4oXCJcIikgKyBcIjwvdHI+XCI7XG59XG5cbnZhciBIVE1MX0JFR0lOID0gJzxodG1sPjxoZWFkPjxtZXRhIGNoYXJzZXQ9XCJ1dGYtOFwiLz48dGl0bGU+U2hlZXRKUyBUYWJsZSBFeHBvcnQ8L3RpdGxlPjwvaGVhZD48Ym9keT4nO1xudmFyIEhUTUxfRU5EID0gJzwvYm9keT48L2h0bWw+JztcblxuZnVuY3Rpb24gaHRtbF90b193b3JrYm9vayhzdHIvKjpzdHJpbmcqLywgb3B0cykvKjpXb3JrYm9vayovIHtcblx0dmFyIG10Y2ggPSBzdHIubWF0Y2goLzx0YWJsZVtcXHNcXFNdKj8+W1xcc1xcU10qPzxcXC90YWJsZT4vZ2kpO1xuXHRpZighbXRjaCB8fCBtdGNoLmxlbmd0aCA9PSAwKSB0aHJvdyBuZXcgRXJyb3IoXCJJbnZhbGlkIEhUTUw6IGNvdWxkIG5vdCBmaW5kIDx0YWJsZT5cIik7XG5cdGlmKG10Y2gubGVuZ3RoID09IDEpIHJldHVybiBzaGVldF90b193b3JrYm9vayhodG1sX3RvX3NoZWV0KG10Y2hbMF0sIG9wdHMpLCBvcHRzKTtcblx0dmFyIHdiID0gYm9va19uZXcoKTtcblx0bXRjaC5mb3JFYWNoKGZ1bmN0aW9uKHMsIGlkeCkgeyBib29rX2FwcGVuZF9zaGVldCh3YiwgaHRtbF90b19zaGVldChzLCBvcHRzKSwgXCJTaGVldFwiICsgKGlkeCsxKSk7IH0pO1xuXHRyZXR1cm4gd2I7XG59XG5cbmZ1bmN0aW9uIG1ha2VfaHRtbF9wcmVhbWJsZSh3cy8qOldvcmtzaGVldCovLCBSLyo6UmFuZ2UqLywgby8qOlNoZWV0MkhUTUxPcHRzKi8pLyo6c3RyaW5nKi8ge1xuXHR2YXIgb3V0Lyo6QXJyYXk8c3RyaW5nPiovID0gW107XG5cdHJldHVybiBvdXQuam9pbihcIlwiKSArICc8dGFibGUnICsgKG8gJiYgby5pZCA/ICcgaWQ9XCInICsgby5pZCArICdcIicgOiBcIlwiKSArICc+Jztcbn1cblxuZnVuY3Rpb24gc2hlZXRfdG9faHRtbCh3cy8qOldvcmtzaGVldCovLCBvcHRzLyo6P1NoZWV0MkhUTUxPcHRzKi8vKiwgd2I6P1dvcmtib29rKi8pLyo6c3RyaW5nKi8ge1xuXHR2YXIgbyA9IG9wdHMgfHwge307XG5cdHZhciBoZWFkZXIgPSBvLmhlYWRlciAhPSBudWxsID8gby5oZWFkZXIgOiBIVE1MX0JFR0lOO1xuXHR2YXIgZm9vdGVyID0gby5mb290ZXIgIT0gbnVsbCA/IG8uZm9vdGVyIDogSFRNTF9FTkQ7XG5cdHZhciBvdXQvKjpBcnJheTxzdHJpbmc+Ki8gPSBbaGVhZGVyXTtcblx0dmFyIHIgPSBkZWNvZGVfcmFuZ2Uod3NbJyFyZWYnXSk7XG5cdG8uZGVuc2UgPSBBcnJheS5pc0FycmF5KHdzKTtcblx0b3V0LnB1c2gobWFrZV9odG1sX3ByZWFtYmxlKHdzLCByLCBvKSk7XG5cdGZvcih2YXIgUiA9IHIucy5yOyBSIDw9IHIuZS5yOyArK1IpIG91dC5wdXNoKG1ha2VfaHRtbF9yb3cod3MsIHIsIFIsIG8pKTtcblx0b3V0LnB1c2goXCI8L3RhYmxlPlwiICsgZm9vdGVyKTtcblx0cmV0dXJuIG91dC5qb2luKFwiXCIpO1xufVxuXG5mdW5jdGlvbiBzaGVldF9hZGRfZG9tKHdzLyo6V29ya3NoZWV0Ki8sIHRhYmxlLyo6SFRNTEVsZW1lbnQqLywgX29wdHMvKjo/YW55Ki8pLyo6V29ya3NoZWV0Ki8ge1xuXHR2YXIgb3B0cyA9IF9vcHRzIHx8IHt9O1xuXHRpZihERU5TRSAhPSBudWxsKSBvcHRzLmRlbnNlID0gREVOU0U7XG5cdHZhciBvcl9SID0gMCwgb3JfQyA9IDA7XG5cdGlmKG9wdHMub3JpZ2luICE9IG51bGwpIHtcblx0XHRpZih0eXBlb2Ygb3B0cy5vcmlnaW4gPT0gJ251bWJlcicpIG9yX1IgPSBvcHRzLm9yaWdpbjtcblx0XHRlbHNlIHtcblx0XHRcdHZhciBfb3JpZ2luLyo6Q2VsbEFkZHJlc3MqLyA9IHR5cGVvZiBvcHRzLm9yaWdpbiA9PSBcInN0cmluZ1wiID8gZGVjb2RlX2NlbGwob3B0cy5vcmlnaW4pIDogb3B0cy5vcmlnaW47XG5cdFx0XHRvcl9SID0gX29yaWdpbi5yOyBvcl9DID0gX29yaWdpbi5jO1xuXHRcdH1cblx0fVxuXG5cdHZhciByb3dzLyo6SFRNTENvbGxlY3Rpb248SFRNTFRhYmxlUm93RWxlbWVudD4qLyA9IHRhYmxlLmdldEVsZW1lbnRzQnlUYWdOYW1lKCd0cicpO1xuXHR2YXIgc2hlZXRSb3dzID0gTWF0aC5taW4ob3B0cy5zaGVldFJvd3N8fDEwMDAwMDAwLCByb3dzLmxlbmd0aCk7XG5cdHZhciByYW5nZS8qOlJhbmdlKi8gPSB7czp7cjowLGM6MH0sZTp7cjpvcl9SLGM6b3JfQ319O1xuXHRpZih3c1tcIiFyZWZcIl0pIHtcblx0XHR2YXIgX3JhbmdlLyo6UmFuZ2UqLyA9IGRlY29kZV9yYW5nZSh3c1tcIiFyZWZcIl0pO1xuXHRcdHJhbmdlLnMuciA9IE1hdGgubWluKHJhbmdlLnMuciwgX3JhbmdlLnMucik7XG5cdFx0cmFuZ2Uucy5jID0gTWF0aC5taW4ocmFuZ2Uucy5jLCBfcmFuZ2Uucy5jKTtcblx0XHRyYW5nZS5lLnIgPSBNYXRoLm1heChyYW5nZS5lLnIsIF9yYW5nZS5lLnIpO1xuXHRcdHJhbmdlLmUuYyA9IE1hdGgubWF4KHJhbmdlLmUuYywgX3JhbmdlLmUuYyk7XG5cdFx0aWYob3JfUiA9PSAtMSkgcmFuZ2UuZS5yID0gb3JfUiA9IF9yYW5nZS5lLnIgKyAxO1xuXHR9XG5cdHZhciBtZXJnZXMvKjpBcnJheTxSYW5nZT4qLyA9IFtdLCBtaWR4ID0gMDtcblx0dmFyIHJvd2luZm8vKjpBcnJheTxSb3dJbmZvPiovID0gd3NbXCIhcm93c1wiXSB8fCAod3NbXCIhcm93c1wiXSA9IFtdKTtcblx0dmFyIF9SID0gMCwgUiA9IDAsIF9DID0gMCwgQyA9IDAsIFJTID0gMCwgQ1MgPSAwO1xuXHRpZighd3NbXCIhY29sc1wiXSkgd3NbJyFjb2xzJ10gPSBbXTtcblx0Zm9yKDsgX1IgPCByb3dzLmxlbmd0aCAmJiBSIDwgc2hlZXRSb3dzOyArK19SKSB7XG5cdFx0dmFyIHJvdy8qOkhUTUxUYWJsZVJvd0VsZW1lbnQqLyA9IHJvd3NbX1JdO1xuXHRcdGlmIChpc19kb21fZWxlbWVudF9oaWRkZW4ocm93KSkge1xuXHRcdFx0aWYgKG9wdHMuZGlzcGxheSkgY29udGludWU7XG5cdFx0XHRyb3dpbmZvW1JdID0ge2hpZGRlbjogdHJ1ZX07XG5cdFx0fVxuXHRcdHZhciBlbHRzLyo6SFRNTENvbGxlY3Rpb248SFRNTFRhYmxlQ2VsbEVsZW1lbnQ+Ki8gPSAocm93LmNoaWxkcmVuLyo6YW55Ki8pO1xuXHRcdGZvcihfQyA9IEMgPSAwOyBfQyA8IGVsdHMubGVuZ3RoOyArK19DKSB7XG5cdFx0XHR2YXIgZWx0Lyo6SFRNTFRhYmxlQ2VsbEVsZW1lbnQqLyA9IGVsdHNbX0NdO1xuXHRcdFx0aWYgKG9wdHMuZGlzcGxheSAmJiBpc19kb21fZWxlbWVudF9oaWRkZW4oZWx0KSkgY29udGludWU7XG5cdFx0XHR2YXIgdi8qOj9zdHJpbmcqLyA9IGVsdC5oYXNBdHRyaWJ1dGUoJ2RhdGEtdicpID8gZWx0LmdldEF0dHJpYnV0ZSgnZGF0YS12JykgOiBlbHQuaGFzQXR0cmlidXRlKCd2JykgPyBlbHQuZ2V0QXR0cmlidXRlKCd2JykgOiBodG1sZGVjb2RlKGVsdC5pbm5lckhUTUwpO1xuXHRcdFx0dmFyIHovKjo/c3RyaW5nKi8gPSBlbHQuZ2V0QXR0cmlidXRlKCdkYXRhLXonKSB8fCBlbHQuZ2V0QXR0cmlidXRlKCd6Jyk7XG5cdFx0XHRmb3IobWlkeCA9IDA7IG1pZHggPCBtZXJnZXMubGVuZ3RoOyArK21pZHgpIHtcblx0XHRcdFx0dmFyIG0vKjpSYW5nZSovID0gbWVyZ2VzW21pZHhdO1xuXHRcdFx0XHRpZihtLnMuYyA9PSBDICsgb3JfQyAmJiBtLnMuciA8IFIgKyBvcl9SICYmIFIgKyBvcl9SIDw9IG0uZS5yKSB7IEMgPSBtLmUuYysxIC0gb3JfQzsgbWlkeCA9IC0xOyB9XG5cdFx0XHR9XG5cdFx0XHQvKiBUT0RPOiBmaWd1cmUgb3V0IGhvdyB0byBleHRyYWN0IG5vbnN0YW5kYXJkIG1zby0gc3R5bGUgKi9cblx0XHRcdENTID0gK2VsdC5nZXRBdHRyaWJ1dGUoXCJjb2xzcGFuXCIpIHx8IDE7XG5cdFx0XHRpZiggKChSUyA9ICgrZWx0LmdldEF0dHJpYnV0ZShcInJvd3NwYW5cIikgfHwgMSkpKT4xIHx8IENTPjEpIG1lcmdlcy5wdXNoKHtzOntyOlIgKyBvcl9SLGM6QyArIG9yX0N9LGU6e3I6UiArIG9yX1IgKyAoUlN8fDEpIC0gMSwgYzpDICsgb3JfQyArIChDU3x8MSkgLSAxfX0pO1xuXHRcdFx0dmFyIG8vKjpDZWxsKi8gPSB7dDoncycsIHY6dn07XG5cdFx0XHR2YXIgX3QvKjpzdHJpbmcqLyA9IGVsdC5nZXRBdHRyaWJ1dGUoXCJkYXRhLXRcIikgfHwgZWx0LmdldEF0dHJpYnV0ZShcInRcIikgfHwgXCJcIjtcblx0XHRcdGlmKHYgIT0gbnVsbCkge1xuXHRcdFx0XHRpZih2Lmxlbmd0aCA9PSAwKSBvLnQgPSBfdCB8fCAneic7XG5cdFx0XHRcdGVsc2UgaWYob3B0cy5yYXcgfHwgdi50cmltKCkubGVuZ3RoID09IDAgfHwgX3QgPT0gXCJzXCIpe31cblx0XHRcdFx0ZWxzZSBpZih2ID09PSAnVFJVRScpIG8gPSB7dDonYicsIHY6dHJ1ZX07XG5cdFx0XHRcdGVsc2UgaWYodiA9PT0gJ0ZBTFNFJykgbyA9IHt0OidiJywgdjpmYWxzZX07XG5cdFx0XHRcdGVsc2UgaWYoIWlzTmFOKGZ1enp5bnVtKHYpKSkgbyA9IHt0OiduJywgdjpmdXp6eW51bSh2KX07XG5cdFx0XHRcdGVsc2UgaWYoIWlzTmFOKGZ1enp5ZGF0ZSh2KS5nZXREYXRlKCkpKSB7XG5cdFx0XHRcdFx0byA9ICh7dDonZCcsIHY6cGFyc2VEYXRlKHYpfS8qOmFueSovKTtcblx0XHRcdFx0XHRpZighb3B0cy5jZWxsRGF0ZXMpIG8gPSAoe3Q6J24nLCB2OmRhdGVudW0oby52KX0vKjphbnkqLyk7XG5cdFx0XHRcdFx0by56ID0gb3B0cy5kYXRlTkYgfHwgdGFibGVfZm10WzE0XTtcblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdFx0aWYoby56ID09PSB1bmRlZmluZWQgJiYgeiAhPSBudWxsKSBvLnogPSB6O1xuXHRcdFx0LyogVGhlIGZpcnN0IGxpbmsgaXMgdXNlZC4gIExpbmtzIGFyZSBhc3N1bWVkIHRvIGJlIGZ1bGx5IHNwZWNpZmllZC5cblx0XHRcdCAqIFRPRE86IFRoZSByaWdodCB3YXkgdG8gcHJvY2VzcyByZWxhdGl2ZSBsaW5rcyBpcyB0byBtYWtlIGEgbmV3IDxhPiAqL1xuXHRcdFx0dmFyIGwgPSBcIlwiLCBBZWx0cyA9IGVsdC5nZXRFbGVtZW50c0J5VGFnTmFtZShcIkFcIik7XG5cdFx0XHRpZihBZWx0cyAmJiBBZWx0cy5sZW5ndGgpIGZvcih2YXIgQWVsdGkgPSAwOyBBZWx0aSA8IEFlbHRzLmxlbmd0aDsgKytBZWx0aSlcdGlmKEFlbHRzW0FlbHRpXS5oYXNBdHRyaWJ1dGUoXCJocmVmXCIpKSB7XG5cdFx0XHRcdGwgPSBBZWx0c1tBZWx0aV0uZ2V0QXR0cmlidXRlKFwiaHJlZlwiKTsgaWYobC5jaGFyQXQoMCkgIT0gXCIjXCIpIGJyZWFrO1xuXHRcdFx0fVxuXHRcdFx0aWYobCAmJiBsLmNoYXJBdCgwKSAhPSBcIiNcIikgby5sID0gKHsgVGFyZ2V0OiBsIH0pO1xuXHRcdFx0aWYob3B0cy5kZW5zZSkgeyBpZighd3NbUiArIG9yX1JdKSB3c1tSICsgb3JfUl0gPSBbXTsgd3NbUiArIG9yX1JdW0MgKyBvcl9DXSA9IG87IH1cblx0XHRcdGVsc2Ugd3NbZW5jb2RlX2NlbGwoe2M6QyArIG9yX0MsIHI6UiArIG9yX1J9KV0gPSBvO1xuXHRcdFx0aWYocmFuZ2UuZS5jIDwgQyArIG9yX0MpIHJhbmdlLmUuYyA9IEMgKyBvcl9DO1xuXHRcdFx0QyArPSBDUztcblx0XHR9XG5cdFx0KytSO1xuXHR9XG5cdGlmKG1lcmdlcy5sZW5ndGgpIHdzWychbWVyZ2VzJ10gPSAod3NbXCIhbWVyZ2VzXCJdIHx8IFtdKS5jb25jYXQobWVyZ2VzKTtcblx0cmFuZ2UuZS5yID0gTWF0aC5tYXgocmFuZ2UuZS5yLCBSIC0gMSArIG9yX1IpO1xuXHR3c1snIXJlZiddID0gZW5jb2RlX3JhbmdlKHJhbmdlKTtcblx0aWYoUiA+PSBzaGVldFJvd3MpIHdzWychZnVsbHJlZiddID0gZW5jb2RlX3JhbmdlKChyYW5nZS5lLnIgPSByb3dzLmxlbmd0aC1fUitSLTEgKyBvcl9SLHJhbmdlKSk7IC8vIFdlIGNhbiBjb3VudCB0aGUgcmVhbCBudW1iZXIgb2Ygcm93cyB0byBwYXJzZSBidXQgd2UgZG9uJ3QgdG8gaW1wcm92ZSB0aGUgcGVyZm9ybWFuY2Vcblx0cmV0dXJuIHdzO1xufVxuXG5mdW5jdGlvbiBwYXJzZV9kb21fdGFibGUodGFibGUvKjpIVE1MRWxlbWVudCovLCBfb3B0cy8qOj9hbnkqLykvKjpXb3Jrc2hlZXQqLyB7XG5cdHZhciBvcHRzID0gX29wdHMgfHwge307XG5cdHZhciB3cy8qOldvcmtzaGVldCovID0gb3B0cy5kZW5zZSA/IChbXS8qOmFueSovKSA6ICh7fS8qOmFueSovKTtcblx0cmV0dXJuIHNoZWV0X2FkZF9kb20od3MsIHRhYmxlLCBfb3B0cyk7XG59XG5cbmZ1bmN0aW9uIHRhYmxlX3RvX2Jvb2sodGFibGUvKjpIVE1MRWxlbWVudCovLCBvcHRzLyo6P2FueSovKS8qOldvcmtib29rKi8ge1xuXHRyZXR1cm4gc2hlZXRfdG9fd29ya2Jvb2socGFyc2VfZG9tX3RhYmxlKHRhYmxlLCBvcHRzKSwgb3B0cyk7XG59XG5cbmZ1bmN0aW9uIGlzX2RvbV9lbGVtZW50X2hpZGRlbihlbGVtZW50Lyo6SFRNTEVsZW1lbnQqLykvKjpib29sZWFuKi8ge1xuXHR2YXIgZGlzcGxheS8qOnN0cmluZyovID0gJyc7XG5cdHZhciBnZXRfY29tcHV0ZWRfc3R5bGUvKjo/ZnVuY3Rpb24qLyA9IGdldF9nZXRfY29tcHV0ZWRfc3R5bGVfZnVuY3Rpb24oZWxlbWVudCk7XG5cdGlmKGdldF9jb21wdXRlZF9zdHlsZSkgZGlzcGxheSA9IGdldF9jb21wdXRlZF9zdHlsZShlbGVtZW50KS5nZXRQcm9wZXJ0eVZhbHVlKCdkaXNwbGF5Jyk7XG5cdGlmKCFkaXNwbGF5KSBkaXNwbGF5ID0gZWxlbWVudC5zdHlsZSAmJiBlbGVtZW50LnN0eWxlLmRpc3BsYXk7XG5cdHJldHVybiBkaXNwbGF5ID09PSAnbm9uZSc7XG59XG5cbi8qIGdsb2JhbCBnZXRDb21wdXRlZFN0eWxlICovXG5mdW5jdGlvbiBnZXRfZ2V0X2NvbXB1dGVkX3N0eWxlX2Z1bmN0aW9uKGVsZW1lbnQvKjpIVE1MRWxlbWVudCovKS8qOj9mdW5jdGlvbiovIHtcblx0Ly8gVGhlIHByb3BlciBnZXRDb21wdXRlZFN0eWxlIGltcGxlbWVudGF0aW9uIGlzIHRoZSBvbmUgZGVmaW5lZCBpbiB0aGUgZWxlbWVudCB3aW5kb3dcblx0aWYoZWxlbWVudC5vd25lckRvY3VtZW50LmRlZmF1bHRWaWV3ICYmIHR5cGVvZiBlbGVtZW50Lm93bmVyRG9jdW1lbnQuZGVmYXVsdFZpZXcuZ2V0Q29tcHV0ZWRTdHlsZSA9PT0gJ2Z1bmN0aW9uJykgcmV0dXJuIGVsZW1lbnQub3duZXJEb2N1bWVudC5kZWZhdWx0Vmlldy5nZXRDb21wdXRlZFN0eWxlO1xuXHQvLyBJZiBpdCBpcyBub3QgYXZhaWxhYmxlLCB0cnkgdG8gZ2V0IG9uZSBmcm9tIHRoZSBnbG9iYWwgbmFtZXNwYWNlXG5cdGlmKHR5cGVvZiBnZXRDb21wdXRlZFN0eWxlID09PSAnZnVuY3Rpb24nKSByZXR1cm4gZ2V0Q29tcHV0ZWRTdHlsZTtcblx0cmV0dXJuIG51bGw7XG59XG4vKiBPcGVuRG9jdW1lbnQgKi9cbmZ1bmN0aW9uIHBhcnNlX3RleHRfcCh0ZXh0Lyo6c3RyaW5nKi8vKjo6LCB0YWcqLykvKjpBcnJheTxhbnk+Ki8ge1xuXHQvKiA2LjEuMiBXaGl0ZSBTcGFjZSBDaGFyYWN0ZXJzICovXG5cdHZhciBmaXhlZCA9IHRleHRcblx0XHQucmVwbGFjZSgvW1xcdFxcclxcbl0vZywgXCIgXCIpLnRyaW0oKS5yZXBsYWNlKC8gKy9nLCBcIiBcIilcblx0XHQucmVwbGFjZSgvPHRleHQ6c1xcLz4vZyxcIiBcIilcblx0XHQucmVwbGFjZSgvPHRleHQ6cyB0ZXh0OmM9XCIoXFxkKylcIlxcLz4vZywgZnVuY3Rpb24oJCQsJDEpIHsgcmV0dXJuIEFycmF5KHBhcnNlSW50KCQxLDEwKSsxKS5qb2luKFwiIFwiKTsgfSlcblx0XHQucmVwbGFjZSgvPHRleHQ6dGFiW14+XSpcXC8+L2csXCJcXHRcIilcblx0XHQucmVwbGFjZSgvPHRleHQ6bGluZS1icmVha1xcLz4vZyxcIlxcblwiKTtcblx0dmFyIHYgPSB1bmVzY2FwZXhtbChmaXhlZC5yZXBsYWNlKC88W14+XSo+L2csXCJcIikpO1xuXG5cdHJldHVybiBbdl07XG59XG5cbnZhciBudW1iZXJfZm9ybWF0c19vZHMgPSB7XG5cdC8qIG9kcyBuYW1lOiBbc2hvcnQgc3NmIGZtdCwgbG9uZyBzc2YgZm10XSAqL1xuXHRkYXk6ICAgICAgICAgICBbXCJkXCIsICAgXCJkZFwiXSxcblx0bW9udGg6ICAgICAgICAgW1wibVwiLCAgIFwibW1cIl0sXG5cdHllYXI6ICAgICAgICAgIFtcInlcIiwgICBcInl5XCJdLFxuXHRob3VyczogICAgICAgICBbXCJoXCIsICAgXCJoaFwiXSxcblx0bWludXRlczogICAgICAgW1wibVwiLCAgIFwibW1cIl0sXG5cdHNlY29uZHM6ICAgICAgIFtcInNcIiwgICBcInNzXCJdLFxuXHRcImFtLXBtXCI6ICAgICAgIFtcIkEvUFwiLCBcIkFNL1BNXCJdLFxuXHRcImRheS1vZi13ZWVrXCI6IFtcImRkZFwiLCBcImRkZGRcIl0sXG5cdGVyYTogICAgICAgICAgIFtcImVcIiwgICBcImVlXCJdLFxuXHQvKiB0aGVyZSBpcyBubyBuYXRpdmUgcmVwcmVzZW50YXRpb24gb2YgTE8gXCJRXCIgZm9ybWF0ICovXG5cdHF1YXJ0ZXI6ICAgICAgIFtcIlxcXFxRbVwiLCBcIm1cXFxcXFxcInRoIHF1YXJ0ZXJcXFwiXCJdXG59O1xuXG5cbmZ1bmN0aW9uIHBhcnNlX2NvbnRlbnRfeG1sKGQvKjpzdHJpbmcqLywgX29wdHMpLyo6V29ya2Jvb2sqLyB7XG5cdFx0dmFyIG9wdHMgPSBfb3B0cyB8fCB7fTtcblx0XHRpZihERU5TRSAhPSBudWxsICYmIG9wdHMuZGVuc2UgPT0gbnVsbCkgb3B0cy5kZW5zZSA9IERFTlNFO1xuXHRcdHZhciBzdHIgPSB4bG1sX25vcm1hbGl6ZShkKTtcblx0XHR2YXIgc3RhdGUvKjpBcnJheTxhbnk+Ki8gPSBbXSwgdG1wO1xuXHRcdHZhciB0YWcvKjo6ID0ge30qLztcblx0XHR2YXIgTkZ0YWcgPSB7bmFtZTpcIlwifSwgTkYgPSBcIlwiLCBwaWR4ID0gMDtcblx0XHR2YXIgc2hlZXRhZy8qOjogPSB7bmFtZTpcIlwiLCAn5ZCN56ewJzpcIlwifSovO1xuXHRcdHZhciByb3d0YWcvKjo6ID0geyfooYzlj7cnOlwiXCJ9Ki87XG5cdFx0dmFyIFNoZWV0cyA9IHt9LCBTaGVldE5hbWVzLyo6QXJyYXk8c3RyaW5nPiovID0gW107XG5cdFx0dmFyIHdzID0gb3B0cy5kZW5zZSA/IChbXS8qOmFueSovKSA6ICh7fS8qOmFueSovKTtcblx0XHR2YXIgUm4sIHEvKjo6IDphbnkgPSAoe3Q6XCJcIiwgdjpudWxsLCB6Om51bGwsIHc6XCJcIixjOltdLH06YW55KSovO1xuXHRcdHZhciBjdGFnID0gKHt2YWx1ZTpcIlwifS8qOmFueSovKTtcblx0XHR2YXIgdGV4dHAgPSBcIlwiLCB0ZXh0cGlkeCA9IDAsIHRleHRwdGFnLyo6OiA9IHt9Ki87XG5cdFx0dmFyIHRleHRSID0gW107XG5cdFx0dmFyIFIgPSAtMSwgQyA9IC0xLCByYW5nZSA9IHtzOiB7cjoxMDAwMDAwLGM6MTAwMDAwMDB9LCBlOiB7cjowLCBjOjB9fTtcblx0XHR2YXIgcm93X29sID0gMDtcblx0XHR2YXIgbnVtYmVyX2Zvcm1hdF9tYXAgPSB7fTtcblx0XHR2YXIgbWVyZ2VzLyo6QXJyYXk8UmFuZ2U+Ki8gPSBbXSwgbXJhbmdlID0ge30sIG1SID0gMCwgbUMgPSAwO1xuXHRcdHZhciByb3dpbmZvLyo6QXJyYXk8Um93SW5mbz4qLyA9IFtdLCByb3dwZWF0ID0gMSwgY29scGVhdCA9IDE7XG5cdFx0dmFyIGFycmF5Zi8qOkFycmF5PFtSYW5nZSwgc3RyaW5nXT4qLyA9IFtdO1xuXHRcdHZhciBXQiA9IHtOYW1lczpbXX07XG5cdFx0dmFyIGF0YWcgPSAoe30vKjphbnkqLyk7XG5cdFx0dmFyIF9SZWYvKjpbc3RyaW5nLCBzdHJpbmddKi8gPSBbXCJcIiwgXCJcIl07XG5cdFx0dmFyIGNvbW1lbnRzLyo6QXJyYXk8Q29tbWVudD4qLyA9IFtdLCBjb21tZW50Lyo6Q29tbWVudCovID0gKHt9Lyo6YW55Ki8pO1xuXHRcdHZhciBjcmVhdG9yID0gXCJcIiwgY3JlYXRvcmlkeCA9IDA7XG5cdFx0dmFyIGlzc3R1YiA9IGZhbHNlLCBpbnRhYmxlID0gZmFsc2U7XG5cdFx0dmFyIGkgPSAwO1xuXHRcdHhsbWxyZWdleC5sYXN0SW5kZXggPSAwO1xuXHRcdHN0ciA9IHN0ci5yZXBsYWNlKC88IS0tKFtcXHNcXFNdKj8pLS0+L21nLFwiXCIpLnJlcGxhY2UoLzwhRE9DVFlQRVteXFxbXSpcXFtbXlxcXV0qXFxdPi9nbSxcIlwiKTtcblx0XHR3aGlsZSgoUm4gPSB4bG1scmVnZXguZXhlYyhzdHIpKSkgc3dpdGNoKChSblszXT1SblszXS5yZXBsYWNlKC9fLiokLyxcIlwiKSkpIHtcblxuXHRcdFx0Y2FzZSAndGFibGUnOiBjYXNlICflt6XkvZzooagnOiAvLyA5LjEuMiA8dGFibGU6dGFibGU+XG5cdFx0XHRcdGlmKFJuWzFdPT09Jy8nKSB7XG5cdFx0XHRcdFx0aWYocmFuZ2UuZS5jID49IHJhbmdlLnMuYyAmJiByYW5nZS5lLnIgPj0gcmFuZ2Uucy5yKSB3c1snIXJlZiddID0gZW5jb2RlX3JhbmdlKHJhbmdlKTtcblx0XHRcdFx0XHRlbHNlIHdzWychcmVmJ10gPSBcIkExOkExXCI7XG5cdFx0XHRcdFx0aWYob3B0cy5zaGVldFJvd3MgPiAwICYmIG9wdHMuc2hlZXRSb3dzIDw9IHJhbmdlLmUucikge1xuXHRcdFx0XHRcdFx0d3NbJyFmdWxscmVmJ10gPSB3c1snIXJlZiddO1xuXHRcdFx0XHRcdFx0cmFuZ2UuZS5yID0gb3B0cy5zaGVldFJvd3MgLSAxO1xuXHRcdFx0XHRcdFx0d3NbJyFyZWYnXSA9IGVuY29kZV9yYW5nZShyYW5nZSk7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHRcdGlmKG1lcmdlcy5sZW5ndGgpIHdzWychbWVyZ2VzJ10gPSBtZXJnZXM7XG5cdFx0XHRcdFx0aWYocm93aW5mby5sZW5ndGgpIHdzW1wiIXJvd3NcIl0gPSByb3dpbmZvO1xuXHRcdFx0XHRcdHNoZWV0YWcubmFtZSA9IHNoZWV0YWdbJ+WQjeensCddIHx8IHNoZWV0YWcubmFtZTtcblx0XHRcdFx0XHRpZih0eXBlb2YgSlNPTiAhPT0gJ3VuZGVmaW5lZCcpIEpTT04uc3RyaW5naWZ5KHNoZWV0YWcpO1xuXHRcdFx0XHRcdFNoZWV0TmFtZXMucHVzaChzaGVldGFnLm5hbWUpO1xuXHRcdFx0XHRcdFNoZWV0c1tzaGVldGFnLm5hbWVdID0gd3M7XG5cdFx0XHRcdFx0aW50YWJsZSA9IGZhbHNlO1xuXHRcdFx0XHR9XG5cdFx0XHRcdGVsc2UgaWYoUm5bMF0uY2hhckF0KFJuWzBdLmxlbmd0aC0yKSAhPT0gJy8nKSB7XG5cdFx0XHRcdFx0c2hlZXRhZyA9IHBhcnNleG1sdGFnKFJuWzBdLCBmYWxzZSk7XG5cdFx0XHRcdFx0UiA9IEMgPSAtMTtcblx0XHRcdFx0XHRyYW5nZS5zLnIgPSByYW5nZS5zLmMgPSAxMDAwMDAwMDsgcmFuZ2UuZS5yID0gcmFuZ2UuZS5jID0gMDtcblx0XHRcdFx0XHR3cyA9IG9wdHMuZGVuc2UgPyAoW10vKjphbnkqLykgOiAoe30vKjphbnkqLyk7IG1lcmdlcyA9IFtdO1xuXHRcdFx0XHRcdHJvd2luZm8gPSBbXTtcblx0XHRcdFx0XHRpbnRhYmxlID0gdHJ1ZTtcblx0XHRcdFx0fVxuXHRcdFx0XHRicmVhaztcblxuXHRcdFx0Y2FzZSAndGFibGUtcm93LWdyb3VwJzogLy8gOS4xLjkgPHRhYmxlOnRhYmxlLXJvdy1ncm91cD5cblx0XHRcdFx0aWYoUm5bMV0gPT09IFwiL1wiKSAtLXJvd19vbDsgZWxzZSArK3Jvd19vbDtcblx0XHRcdFx0YnJlYWs7XG5cdFx0XHRjYXNlICd0YWJsZS1yb3cnOiBjYXNlICfooYwnOiAvLyA5LjEuMyA8dGFibGU6dGFibGUtcm93PlxuXHRcdFx0XHRpZihSblsxXSA9PT0gJy8nKSB7IFIrPXJvd3BlYXQ7IHJvd3BlYXQgPSAxOyBicmVhazsgfVxuXHRcdFx0XHRyb3d0YWcgPSBwYXJzZXhtbHRhZyhSblswXSwgZmFsc2UpO1xuXHRcdFx0XHRpZihyb3d0YWdbJ+ihjOWPtyddKSBSID0gcm93dGFnWyfooYzlj7cnXSAtIDE7IGVsc2UgaWYoUiA9PSAtMSkgUiA9IDA7XG5cdFx0XHRcdHJvd3BlYXQgPSArcm93dGFnWydudW1iZXItcm93cy1yZXBlYXRlZCddIHx8IDE7XG5cdFx0XHRcdC8qIFRPRE86IHJlbW92ZSBtYWdpYyAqL1xuXHRcdFx0XHRpZihyb3dwZWF0IDwgMTApIGZvcihpID0gMDsgaSA8IHJvd3BlYXQ7ICsraSkgaWYocm93X29sID4gMCkgcm93aW5mb1tSICsgaV0gPSB7bGV2ZWw6IHJvd19vbH07XG5cdFx0XHRcdEMgPSAtMTsgYnJlYWs7XG5cdFx0XHRjYXNlICdjb3ZlcmVkLXRhYmxlLWNlbGwnOiAvLyA5LjEuNSA8dGFibGU6Y292ZXJlZC10YWJsZS1jZWxsPlxuXHRcdFx0XHRpZihSblsxXSAhPT0gJy8nKSArK0M7XG5cdFx0XHRcdGlmKG9wdHMuc2hlZXRTdHVicykge1xuXHRcdFx0XHRcdGlmKG9wdHMuZGVuc2UpIHsgaWYoIXdzW1JdKSB3c1tSXSA9IFtdOyB3c1tSXVtDXSA9IHt0Oid6J307IH1cblx0XHRcdFx0XHRlbHNlIHdzW2VuY29kZV9jZWxsKHtyOlIsYzpDfSldID0ge3Q6J3onfTtcblx0XHRcdFx0fVxuXHRcdFx0XHR0ZXh0cCA9IFwiXCI7IHRleHRSID0gW107XG5cdFx0XHRcdGJyZWFrOyAvKiBzdHViICovXG5cdFx0XHRjYXNlICd0YWJsZS1jZWxsJzogY2FzZSAn5pWw5o2uJzpcblx0XHRcdFx0aWYoUm5bMF0uY2hhckF0KFJuWzBdLmxlbmd0aC0yKSA9PT0gJy8nKSB7XG5cdFx0XHRcdFx0KytDO1xuXHRcdFx0XHRcdGN0YWcgPSBwYXJzZXhtbHRhZyhSblswXSwgZmFsc2UpO1xuXHRcdFx0XHRcdGNvbHBlYXQgPSBwYXJzZUludChjdGFnWydudW1iZXItY29sdW1ucy1yZXBlYXRlZCddfHxcIjFcIiwgMTApO1xuXHRcdFx0XHRcdHEgPSAoe3Q6J3onLCB2Om51bGwvKjo6ICwgejpudWxsLCB3OlwiXCIsYzpbXSovfS8qOmFueSovKTtcblx0XHRcdFx0XHRpZihjdGFnLmZvcm11bGEgJiYgb3B0cy5jZWxsRm9ybXVsYSAhPSBmYWxzZSkgcS5mID0gb2RzX3RvX2NzZl9mb3JtdWxhKHVuZXNjYXBleG1sKGN0YWcuZm9ybXVsYSkpO1xuXHRcdFx0XHRcdGlmKChjdGFnWyfmlbDmja7nsbvlnosnXSB8fCBjdGFnWyd2YWx1ZS10eXBlJ10pID09IFwic3RyaW5nXCIpIHtcblx0XHRcdFx0XHRcdHEudCA9IFwic1wiOyBxLnYgPSB1bmVzY2FwZXhtbChjdGFnWydzdHJpbmctdmFsdWUnXSB8fCBcIlwiKTtcblx0XHRcdFx0XHRcdGlmKG9wdHMuZGVuc2UpIHtcblx0XHRcdFx0XHRcdFx0aWYoIXdzW1JdKSB3c1tSXSA9IFtdO1xuXHRcdFx0XHRcdFx0XHR3c1tSXVtDXSA9IHE7XG5cdFx0XHRcdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRcdFx0XHR3c1tlbmNvZGVfY2VsbCh7cjpSLGM6Q30pXSA9IHE7XG5cdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHRcdEMrPSBjb2xwZWF0LTE7XG5cdFx0XHRcdH0gZWxzZSBpZihSblsxXSE9PScvJykge1xuXHRcdFx0XHRcdCsrQztcblx0XHRcdFx0XHR0ZXh0cCA9IFwiXCI7IHRleHRwaWR4ID0gMDsgdGV4dFIgPSBbXTtcblx0XHRcdFx0XHRjb2xwZWF0ID0gMTtcblx0XHRcdFx0XHR2YXIgcnB0UiA9IHJvd3BlYXQgPyBSICsgcm93cGVhdCAtIDEgOiBSO1xuXHRcdFx0XHRcdGlmKEMgPiByYW5nZS5lLmMpIHJhbmdlLmUuYyA9IEM7XG5cdFx0XHRcdFx0aWYoQyA8IHJhbmdlLnMuYykgcmFuZ2Uucy5jID0gQztcblx0XHRcdFx0XHRpZihSIDwgcmFuZ2Uucy5yKSByYW5nZS5zLnIgPSBSO1xuXHRcdFx0XHRcdGlmKHJwdFIgPiByYW5nZS5lLnIpIHJhbmdlLmUuciA9IHJwdFI7XG5cdFx0XHRcdFx0Y3RhZyA9IHBhcnNleG1sdGFnKFJuWzBdLCBmYWxzZSk7XG5cdFx0XHRcdFx0Y29tbWVudHMgPSBbXTsgY29tbWVudCA9ICh7fS8qOmFueSovKTtcblx0XHRcdFx0XHRxID0gKHt0OmN0YWdbJ+aVsOaNruexu+WeiyddIHx8IGN0YWdbJ3ZhbHVlLXR5cGUnXSwgdjpudWxsLyo6OiAsIHo6bnVsbCwgdzpcIlwiLGM6W10qL30vKjphbnkqLyk7XG5cdFx0XHRcdFx0aWYob3B0cy5jZWxsRm9ybXVsYSkge1xuXHRcdFx0XHRcdFx0aWYoY3RhZy5mb3JtdWxhKSBjdGFnLmZvcm11bGEgPSB1bmVzY2FwZXhtbChjdGFnLmZvcm11bGEpO1xuXHRcdFx0XHRcdFx0aWYoY3RhZ1snbnVtYmVyLW1hdHJpeC1jb2x1bW5zLXNwYW5uZWQnXSAmJiBjdGFnWydudW1iZXItbWF0cml4LXJvd3Mtc3Bhbm5lZCddKSB7XG5cdFx0XHRcdFx0XHRcdG1SID0gcGFyc2VJbnQoY3RhZ1snbnVtYmVyLW1hdHJpeC1yb3dzLXNwYW5uZWQnXSwxMCkgfHwgMDtcblx0XHRcdFx0XHRcdFx0bUMgPSBwYXJzZUludChjdGFnWydudW1iZXItbWF0cml4LWNvbHVtbnMtc3Bhbm5lZCddLDEwKSB8fCAwO1xuXHRcdFx0XHRcdFx0XHRtcmFuZ2UgPSB7czoge3I6UixjOkN9LCBlOntyOlIgKyBtUi0xLGM6QyArIG1DLTF9fTtcblx0XHRcdFx0XHRcdFx0cS5GID0gZW5jb2RlX3JhbmdlKG1yYW5nZSk7XG5cdFx0XHRcdFx0XHRcdGFycmF5Zi5wdXNoKFttcmFuZ2UsIHEuRl0pO1xuXHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdFx0aWYoY3RhZy5mb3JtdWxhKSBxLmYgPSBvZHNfdG9fY3NmX2Zvcm11bGEoY3RhZy5mb3JtdWxhKTtcblx0XHRcdFx0XHRcdGVsc2UgZm9yKGkgPSAwOyBpIDwgYXJyYXlmLmxlbmd0aDsgKytpKVxuXHRcdFx0XHRcdFx0XHRpZihSID49IGFycmF5ZltpXVswXS5zLnIgJiYgUiA8PSBhcnJheWZbaV1bMF0uZS5yKVxuXHRcdFx0XHRcdFx0XHRcdGlmKEMgPj0gYXJyYXlmW2ldWzBdLnMuYyAmJiBDIDw9IGFycmF5ZltpXVswXS5lLmMpXG5cdFx0XHRcdFx0XHRcdFx0XHRxLkYgPSBhcnJheWZbaV1bMV07XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHRcdGlmKGN0YWdbJ251bWJlci1jb2x1bW5zLXNwYW5uZWQnXSB8fCBjdGFnWydudW1iZXItcm93cy1zcGFubmVkJ10pIHtcblx0XHRcdFx0XHRcdG1SID0gcGFyc2VJbnQoY3RhZ1snbnVtYmVyLXJvd3Mtc3Bhbm5lZCddLDEwKSB8fCAwO1xuXHRcdFx0XHRcdFx0bUMgPSBwYXJzZUludChjdGFnWydudW1iZXItY29sdW1ucy1zcGFubmVkJ10sMTApIHx8IDA7XG5cdFx0XHRcdFx0XHRtcmFuZ2UgPSB7czoge3I6UixjOkN9LCBlOntyOlIgKyBtUi0xLGM6QyArIG1DLTF9fTtcblx0XHRcdFx0XHRcdG1lcmdlcy5wdXNoKG1yYW5nZSk7XG5cdFx0XHRcdFx0fVxuXG5cdFx0XHRcdFx0LyogMTkuNjc1LjIgdGFibGU6bnVtYmVyLWNvbHVtbnMtcmVwZWF0ZWQgKi9cblx0XHRcdFx0XHRpZihjdGFnWydudW1iZXItY29sdW1ucy1yZXBlYXRlZCddKSBjb2xwZWF0ID0gcGFyc2VJbnQoY3RhZ1snbnVtYmVyLWNvbHVtbnMtcmVwZWF0ZWQnXSwgMTApO1xuXG5cdFx0XHRcdFx0LyogMTkuMzg1IG9mZmljZTp2YWx1ZS10eXBlICovXG5cdFx0XHRcdFx0c3dpdGNoKHEudCkge1xuXHRcdFx0XHRcdFx0Y2FzZSAnYm9vbGVhbic6IHEudCA9ICdiJzsgcS52ID0gcGFyc2V4bWxib29sKGN0YWdbJ2Jvb2xlYW4tdmFsdWUnXSk7IGJyZWFrO1xuXHRcdFx0XHRcdFx0Y2FzZSAnZmxvYXQnOiBxLnQgPSAnbic7IHEudiA9IHBhcnNlRmxvYXQoY3RhZy52YWx1ZSk7IGJyZWFrO1xuXHRcdFx0XHRcdFx0Y2FzZSAncGVyY2VudGFnZSc6IHEudCA9ICduJzsgcS52ID0gcGFyc2VGbG9hdChjdGFnLnZhbHVlKTsgYnJlYWs7XG5cdFx0XHRcdFx0XHRjYXNlICdjdXJyZW5jeSc6IHEudCA9ICduJzsgcS52ID0gcGFyc2VGbG9hdChjdGFnLnZhbHVlKTsgYnJlYWs7XG5cdFx0XHRcdFx0XHRjYXNlICdkYXRlJzogcS50ID0gJ2QnOyBxLnYgPSBwYXJzZURhdGUoY3RhZ1snZGF0ZS12YWx1ZSddKTtcblx0XHRcdFx0XHRcdFx0aWYoIW9wdHMuY2VsbERhdGVzKSB7IHEudCA9ICduJzsgcS52ID0gZGF0ZW51bShxLnYpOyB9XG5cdFx0XHRcdFx0XHRcdHEueiA9ICdtL2QveXknOyBicmVhaztcblx0XHRcdFx0XHRcdGNhc2UgJ3RpbWUnOiBxLnQgPSAnbic7IHEudiA9IHBhcnNlX2lzb2R1cihjdGFnWyd0aW1lLXZhbHVlJ10pLzg2NDAwO1xuXHRcdFx0XHRcdFx0XHRpZihvcHRzLmNlbGxEYXRlcykgeyBxLnQgPSAnZCc7IHEudiA9IG51bWRhdGUocS52KTsgfVxuXHRcdFx0XHRcdFx0XHRxLnogPSAnSEg6TU06U1MnOyBicmVhaztcblx0XHRcdFx0XHRcdGNhc2UgJ251bWJlcic6IHEudCA9ICduJzsgcS52ID0gcGFyc2VGbG9hdChjdGFnWyfmlbDmja7mlbDlgLwnXSk7IGJyZWFrO1xuXHRcdFx0XHRcdFx0ZGVmYXVsdDpcblx0XHRcdFx0XHRcdFx0aWYocS50ID09PSAnc3RyaW5nJyB8fCBxLnQgPT09ICd0ZXh0JyB8fCAhcS50KSB7XG5cdFx0XHRcdFx0XHRcdFx0cS50ID0gJ3MnO1xuXHRcdFx0XHRcdFx0XHRcdGlmKGN0YWdbJ3N0cmluZy12YWx1ZSddICE9IG51bGwpIHsgdGV4dHAgPSB1bmVzY2FwZXhtbChjdGFnWydzdHJpbmctdmFsdWUnXSk7IHRleHRSID0gW107IH1cblx0XHRcdFx0XHRcdFx0fSBlbHNlIHRocm93IG5ldyBFcnJvcignVW5zdXBwb3J0ZWQgdmFsdWUgdHlwZSAnICsgcS50KTtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdFx0aXNzdHViID0gZmFsc2U7XG5cdFx0XHRcdFx0aWYocS50ID09PSAncycpIHtcblx0XHRcdFx0XHRcdHEudiA9IHRleHRwIHx8ICcnO1xuXHRcdFx0XHRcdFx0aWYodGV4dFIubGVuZ3RoKSBxLlIgPSB0ZXh0Ujtcblx0XHRcdFx0XHRcdGlzc3R1YiA9IHRleHRwaWR4ID09IDA7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHRcdGlmKGF0YWcuVGFyZ2V0KSBxLmwgPSBhdGFnO1xuXHRcdFx0XHRcdGlmKGNvbW1lbnRzLmxlbmd0aCA+IDApIHsgcS5jID0gY29tbWVudHM7IGNvbW1lbnRzID0gW107IH1cblx0XHRcdFx0XHRpZih0ZXh0cCAmJiBvcHRzLmNlbGxUZXh0ICE9PSBmYWxzZSkgcS53ID0gdGV4dHA7XG5cdFx0XHRcdFx0aWYoaXNzdHViKSB7IHEudCA9IFwielwiOyBkZWxldGUgcS52OyB9XG5cdFx0XHRcdFx0aWYoIWlzc3R1YiB8fCBvcHRzLnNoZWV0U3R1YnMpIHtcblx0XHRcdFx0XHRcdGlmKCEob3B0cy5zaGVldFJvd3MgJiYgb3B0cy5zaGVldFJvd3MgPD0gUikpIHtcblx0XHRcdFx0XHRcdFx0Zm9yKHZhciBycHQgPSAwOyBycHQgPCByb3dwZWF0OyArK3JwdCkge1xuXHRcdFx0XHRcdFx0XHRcdGNvbHBlYXQgPSBwYXJzZUludChjdGFnWydudW1iZXItY29sdW1ucy1yZXBlYXRlZCddfHxcIjFcIiwgMTApO1xuXHRcdFx0XHRcdFx0XHRcdGlmKG9wdHMuZGVuc2UpIHtcblx0XHRcdFx0XHRcdFx0XHRcdGlmKCF3c1tSICsgcnB0XSkgd3NbUiArIHJwdF0gPSBbXTtcblx0XHRcdFx0XHRcdFx0XHRcdHdzW1IgKyBycHRdW0NdID0gcnB0ID09IDAgPyBxIDogZHVwKHEpO1xuXHRcdFx0XHRcdFx0XHRcdFx0d2hpbGUoLS1jb2xwZWF0ID4gMCkgd3NbUiArIHJwdF1bQyArIGNvbHBlYXRdID0gZHVwKHEpO1xuXHRcdFx0XHRcdFx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdFx0XHRcdFx0XHR3c1tlbmNvZGVfY2VsbCh7cjpSICsgcnB0LGM6Q30pXSA9IHE7XG5cdFx0XHRcdFx0XHRcdFx0XHR3aGlsZSgtLWNvbHBlYXQgPiAwKSB3c1tlbmNvZGVfY2VsbCh7cjpSICsgcnB0LGM6QyArIGNvbHBlYXR9KV0gPSBkdXAocSk7XG5cdFx0XHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdFx0XHRcdGlmKHJhbmdlLmUuYyA8PSBDKSByYW5nZS5lLmMgPSBDO1xuXHRcdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHRcdGNvbHBlYXQgPSBwYXJzZUludChjdGFnWydudW1iZXItY29sdW1ucy1yZXBlYXRlZCddfHxcIjFcIiwgMTApO1xuXHRcdFx0XHRcdEMgKz0gY29scGVhdC0xOyBjb2xwZWF0ID0gMDtcblx0XHRcdFx0XHRxID0gey8qOjogdDpcIlwiLCB2Om51bGwsIHo6bnVsbCwgdzpcIlwiLGM6W10qL307XG5cdFx0XHRcdFx0dGV4dHAgPSBcIlwiOyB0ZXh0UiA9IFtdO1xuXHRcdFx0XHR9XG5cdFx0XHRcdGF0YWcgPSAoe30vKjphbnkqLyk7XG5cdFx0XHRcdGJyZWFrOyAvLyA5LjEuNCA8dGFibGU6dGFibGUtY2VsbD5cblxuXHRcdFx0LyogcHVyZSBzdGF0ZSAqL1xuXHRcdFx0Y2FzZSAnZG9jdW1lbnQnOiAvLyBUT0RPOiA8b2ZmaWNlOmRvY3VtZW50PiBpcyB0aGUgcm9vdCBmb3IgRk9EU1xuXHRcdFx0Y2FzZSAnZG9jdW1lbnQtY29udGVudCc6IGNhc2UgJ+eUteWtkOihqOagvOaWh+ahoyc6IC8vIDMuMS4zLjIgPG9mZmljZTpkb2N1bWVudC1jb250ZW50PlxuXHRcdFx0Y2FzZSAnc3ByZWFkc2hlZXQnOiBjYXNlICfkuLvkvZMnOiAvLyAzLjcgPG9mZmljZTpzcHJlYWRzaGVldD5cblx0XHRcdGNhc2UgJ3NjcmlwdHMnOiAvLyAzLjEyIDxvZmZpY2U6c2NyaXB0cz5cblx0XHRcdGNhc2UgJ3N0eWxlcyc6IC8vIFRPRE8gPG9mZmljZTpzdHlsZXM+XG5cdFx0XHRjYXNlICdmb250LWZhY2UtZGVjbHMnOiAvLyAzLjE0IDxvZmZpY2U6Zm9udC1mYWNlLWRlY2xzPlxuXHRcdFx0Y2FzZSAnbWFzdGVyLXN0eWxlcyc6IC8vIDMuMTUuNCA8b2ZmaWNlOm1hc3Rlci1zdHlsZXM+IC0tIHJlbGV2YW50IGZvciBGT0RTXG5cdFx0XHRcdGlmKFJuWzFdPT09Jy8nKXtpZigodG1wPXN0YXRlLnBvcCgpKVswXSE9PVJuWzNdKSB0aHJvdyBcIkJhZCBzdGF0ZTogXCIrdG1wO31cblx0XHRcdFx0ZWxzZSBpZihSblswXS5jaGFyQXQoUm5bMF0ubGVuZ3RoLTIpICE9PSAnLycpIHN0YXRlLnB1c2goW1JuWzNdLCB0cnVlXSk7XG5cdFx0XHRcdGJyZWFrO1xuXG5cdFx0XHRjYXNlICdhbm5vdGF0aW9uJzogLy8gMTQuMSA8b2ZmaWNlOmFubm90YXRpb24+XG5cdFx0XHRcdGlmKFJuWzFdPT09Jy8nKXtcblx0XHRcdFx0XHRpZigodG1wPXN0YXRlLnBvcCgpKVswXSE9PVJuWzNdKSB0aHJvdyBcIkJhZCBzdGF0ZTogXCIrdG1wO1xuXHRcdFx0XHRcdGNvbW1lbnQudCA9IHRleHRwO1xuXHRcdFx0XHRcdGlmKHRleHRSLmxlbmd0aCkgLyo6OigqL2NvbW1lbnQvKjo6IDphbnkpKi8uUiA9IHRleHRSO1xuXHRcdFx0XHRcdGNvbW1lbnQuYSA9IGNyZWF0b3I7XG5cdFx0XHRcdFx0Y29tbWVudHMucHVzaChjb21tZW50KTtcblx0XHRcdFx0fVxuXHRcdFx0XHRlbHNlIGlmKFJuWzBdLmNoYXJBdChSblswXS5sZW5ndGgtMikgIT09ICcvJykge3N0YXRlLnB1c2goW1JuWzNdLCBmYWxzZV0pO31cblx0XHRcdFx0Y3JlYXRvciA9IFwiXCI7IGNyZWF0b3JpZHggPSAwO1xuXHRcdFx0XHR0ZXh0cCA9IFwiXCI7IHRleHRwaWR4ID0gMDsgdGV4dFIgPSBbXTtcblx0XHRcdFx0YnJlYWs7XG5cblx0XHRcdGNhc2UgJ2NyZWF0b3InOiAvLyA0LjMuMi43IDxkYzpjcmVhdG9yPlxuXHRcdFx0XHRpZihSblsxXT09PScvJykgeyBjcmVhdG9yID0gc3RyLnNsaWNlKGNyZWF0b3JpZHgsUm4uaW5kZXgpOyB9XG5cdFx0XHRcdGVsc2UgY3JlYXRvcmlkeCA9IFJuLmluZGV4ICsgUm5bMF0ubGVuZ3RoO1xuXHRcdFx0XHRicmVhaztcblxuXHRcdFx0LyogaWdub3JlIHN0YXRlICovXG5cdFx0XHRjYXNlICdtZXRhJzogY2FzZSAn5YWD5pWw5o2uJzogLy8gVE9ETzogPG9mZmljZTptZXRhPiA8dW9mOuWFg+aVsOaNrj4gRk9EUy9VT0Zcblx0XHRcdGNhc2UgJ3NldHRpbmdzJzogLy8gVE9ETzogPG9mZmljZTpzZXR0aW5ncz5cblx0XHRcdGNhc2UgJ2NvbmZpZy1pdGVtLXNldCc6IC8vIFRPRE86IDxvZmZpY2U6Y29uZmlnLWl0ZW0tc2V0PlxuXHRcdFx0Y2FzZSAnY29uZmlnLWl0ZW0tbWFwLWluZGV4ZWQnOiAvLyBUT0RPOiA8b2ZmaWNlOmNvbmZpZy1pdGVtLW1hcC1pbmRleGVkPlxuXHRcdFx0Y2FzZSAnY29uZmlnLWl0ZW0tbWFwLWVudHJ5JzogLy8gVE9ETzogPG9mZmljZTpjb25maWctaXRlbS1tYXAtZW50cnk+XG5cdFx0XHRjYXNlICdjb25maWctaXRlbS1tYXAtbmFtZWQnOiAvLyBUT0RPOiA8b2ZmaWNlOmNvbmZpZy1pdGVtLW1hcC1lbnRyeT5cblx0XHRcdGNhc2UgJ3NoYXBlcyc6IC8vIDkuMi44IDx0YWJsZTpzaGFwZXM+XG5cdFx0XHRjYXNlICdmcmFtZSc6IC8vIDEwLjQuMiA8ZHJhdzpmcmFtZT5cblx0XHRcdGNhc2UgJ3RleHQtYm94JzogLy8gMTAuNC4zIDxkcmF3OnRleHQtYm94PlxuXHRcdFx0Y2FzZSAnaW1hZ2UnOiAvLyAxMC40LjQgPGRyYXc6aW1hZ2U+XG5cdFx0XHRjYXNlICdkYXRhLXBpbG90LXRhYmxlcyc6IC8vIDkuNi4yIDx0YWJsZTpkYXRhLXBpbG90LXRhYmxlcz5cblx0XHRcdGNhc2UgJ2xpc3Qtc3R5bGUnOiAvLyAxNi4zMCA8dGV4dDpsaXN0LXN0eWxlPlxuXHRcdFx0Y2FzZSAnZm9ybSc6IC8vIDEzLjEzIDxmb3JtOmZvcm0+XG5cdFx0XHRjYXNlICdkZGUtbGlua3MnOiAvLyA5LjggPHRhYmxlOmRkZS1saW5rcz5cblx0XHRcdGNhc2UgJ2V2ZW50LWxpc3RlbmVycyc6IC8vIFRPRE9cblx0XHRcdGNhc2UgJ2NoYXJ0JzogLy8gVE9ET1xuXHRcdFx0XHRpZihSblsxXT09PScvJyl7aWYoKHRtcD1zdGF0ZS5wb3AoKSlbMF0hPT1SblszXSkgdGhyb3cgXCJCYWQgc3RhdGU6IFwiK3RtcDt9XG5cdFx0XHRcdGVsc2UgaWYoUm5bMF0uY2hhckF0KFJuWzBdLmxlbmd0aC0yKSAhPT0gJy8nKSBzdGF0ZS5wdXNoKFtSblszXSwgZmFsc2VdKTtcblx0XHRcdFx0dGV4dHAgPSBcIlwiOyB0ZXh0cGlkeCA9IDA7IHRleHRSID0gW107XG5cdFx0XHRcdGJyZWFrO1xuXG5cdFx0XHRjYXNlICdzY2llbnRpZmljLW51bWJlcic6IC8vIFRPRE86IDxudW1iZXI6c2NpZW50aWZpYy1udW1iZXI+XG5cdFx0XHRcdGJyZWFrO1xuXHRcdFx0Y2FzZSAnY3VycmVuY3ktc3ltYm9sJzogLy8gVE9ETzogPG51bWJlcjpjdXJyZW5jeS1zeW1ib2w+XG5cdFx0XHRcdGJyZWFrO1xuXHRcdFx0Y2FzZSAnY3VycmVuY3ktc3R5bGUnOiAvLyBUT0RPOiA8bnVtYmVyOmN1cnJlbmN5LXN0eWxlPlxuXHRcdFx0XHRicmVhaztcblx0XHRcdGNhc2UgJ251bWJlci1zdHlsZSc6IC8vIDE2LjI3LjIgPG51bWJlcjpudW1iZXItc3R5bGU+XG5cdFx0XHRjYXNlICdwZXJjZW50YWdlLXN0eWxlJzogLy8gMTYuMjcuOSA8bnVtYmVyOnBlcmNlbnRhZ2Utc3R5bGU+XG5cdFx0XHRjYXNlICdkYXRlLXN0eWxlJzogLy8gMTYuMjcuMTAgPG51bWJlcjpkYXRlLXN0eWxlPlxuXHRcdFx0Y2FzZSAndGltZS1zdHlsZSc6IC8vIDE2LjI3LjE4IDxudW1iZXI6dGltZS1zdHlsZT5cblx0XHRcdFx0aWYoUm5bMV09PT0nLycpe1xuXHRcdFx0XHRcdG51bWJlcl9mb3JtYXRfbWFwW05GdGFnLm5hbWVdID0gTkY7XG5cdFx0XHRcdFx0aWYoKHRtcD1zdGF0ZS5wb3AoKSlbMF0hPT1SblszXSkgdGhyb3cgXCJCYWQgc3RhdGU6IFwiK3RtcDtcblx0XHRcdFx0fSBlbHNlIGlmKFJuWzBdLmNoYXJBdChSblswXS5sZW5ndGgtMikgIT09ICcvJykge1xuXHRcdFx0XHRcdE5GID0gXCJcIjtcblx0XHRcdFx0XHRORnRhZyA9IHBhcnNleG1sdGFnKFJuWzBdLCBmYWxzZSk7XG5cdFx0XHRcdFx0c3RhdGUucHVzaChbUm5bM10sIHRydWVdKTtcblx0XHRcdFx0fSBicmVhaztcblxuXHRcdFx0Y2FzZSAnc2NyaXB0JzogYnJlYWs7IC8vIDMuMTMgPG9mZmljZTpzY3JpcHQ+XG5cdFx0XHRjYXNlICdsaWJyYXJpZXMnOiBicmVhazsgLy8gVE9ETzogPG9vbzpsaWJyYXJpZXM+XG5cdFx0XHRjYXNlICdhdXRvbWF0aWMtc3R5bGVzJzogYnJlYWs7IC8vIDMuMTUuMyA8b2ZmaWNlOmF1dG9tYXRpYy1zdHlsZXM+XG5cblx0XHRcdGNhc2UgJ2RlZmF1bHQtc3R5bGUnOiAvLyBUT0RPOiA8c3R5bGU6ZGVmYXVsdC1zdHlsZT5cblx0XHRcdGNhc2UgJ3BhZ2UtbGF5b3V0JzogYnJlYWs7IC8vIFRPRE86IDxzdHlsZTpwYWdlLWxheW91dD5cblx0XHRcdGNhc2UgJ3N0eWxlJzogLy8gMTYuMiA8c3R5bGU6c3R5bGU+XG5cdFx0XHRcdGJyZWFrO1xuXHRcdFx0Y2FzZSAnbWFwJzogYnJlYWs7IC8vIDE2LjMgPHN0eWxlOm1hcD5cblx0XHRcdGNhc2UgJ2ZvbnQtZmFjZSc6IGJyZWFrOyAvLyAxNi4yMSA8c3R5bGU6Zm9udC1mYWNlPlxuXG5cdFx0XHRjYXNlICdwYXJhZ3JhcGgtcHJvcGVydGllcyc6IGJyZWFrOyAvLyAxNy42IDxzdHlsZTpwYXJhZ3JhcGgtcHJvcGVydGllcz5cblx0XHRcdGNhc2UgJ3RhYmxlLXByb3BlcnRpZXMnOiBicmVhazsgLy8gMTcuMTUgPHN0eWxlOnRhYmxlLXByb3BlcnRpZXM+XG5cdFx0XHRjYXNlICd0YWJsZS1jb2x1bW4tcHJvcGVydGllcyc6IGJyZWFrOyAvLyAxNy4xNiA8c3R5bGU6dGFibGUtY29sdW1uLXByb3BlcnRpZXM+XG5cdFx0XHRjYXNlICd0YWJsZS1yb3ctcHJvcGVydGllcyc6IGJyZWFrOyAvLyAxNy4xNyA8c3R5bGU6dGFibGUtcm93LXByb3BlcnRpZXM+XG5cdFx0XHRjYXNlICd0YWJsZS1jZWxsLXByb3BlcnRpZXMnOiBicmVhazsgLy8gMTcuMTggPHN0eWxlOnRhYmxlLWNlbGwtcHJvcGVydGllcz5cblxuXHRcdFx0Y2FzZSAnbnVtYmVyJzogLy8gMTYuMjcuMyA8bnVtYmVyOm51bWJlcj5cblx0XHRcdFx0c3dpdGNoKHN0YXRlW3N0YXRlLmxlbmd0aC0xXVswXSkge1xuXHRcdFx0XHRcdGNhc2UgJ3RpbWUtc3R5bGUnOlxuXHRcdFx0XHRcdGNhc2UgJ2RhdGUtc3R5bGUnOlxuXHRcdFx0XHRcdFx0dGFnID0gcGFyc2V4bWx0YWcoUm5bMF0sIGZhbHNlKTtcblx0XHRcdFx0XHRcdE5GICs9IG51bWJlcl9mb3JtYXRzX29kc1tSblszXV1bdGFnLnN0eWxlPT09J2xvbmcnPzE6MF07IGJyZWFrO1xuXHRcdFx0XHR9IGJyZWFrO1xuXG5cdFx0XHRjYXNlICdmcmFjdGlvbic6IGJyZWFrOyAvLyBUT0RPIDE2LjI3LjYgPG51bWJlcjpmcmFjdGlvbj5cblxuXHRcdFx0Y2FzZSAnZGF5JzogLy8gMTYuMjcuMTEgPG51bWJlcjpkYXk+XG5cdFx0XHRjYXNlICdtb250aCc6IC8vIDE2LjI3LjEyIDxudW1iZXI6bW9udGg+XG5cdFx0XHRjYXNlICd5ZWFyJzogLy8gMTYuMjcuMTMgPG51bWJlcjp5ZWFyPlxuXHRcdFx0Y2FzZSAnZXJhJzogLy8gMTYuMjcuMTQgPG51bWJlcjplcmE+XG5cdFx0XHRjYXNlICdkYXktb2Ytd2Vlayc6IC8vIDE2LjI3LjE1IDxudW1iZXI6ZGF5LW9mLXdlZWs+XG5cdFx0XHRjYXNlICd3ZWVrLW9mLXllYXInOiAvLyAxNi4yNy4xNiA8bnVtYmVyOndlZWstb2YteWVhcj5cblx0XHRcdGNhc2UgJ3F1YXJ0ZXInOiAvLyAxNi4yNy4xNyA8bnVtYmVyOnF1YXJ0ZXI+XG5cdFx0XHRjYXNlICdob3Vycyc6IC8vIDE2LjI3LjE5IDxudW1iZXI6aG91cnM+XG5cdFx0XHRjYXNlICdtaW51dGVzJzogLy8gMTYuMjcuMjAgPG51bWJlcjptaW51dGVzPlxuXHRcdFx0Y2FzZSAnc2Vjb25kcyc6IC8vIDE2LjI3LjIxIDxudW1iZXI6c2Vjb25kcz5cblx0XHRcdGNhc2UgJ2FtLXBtJzogLy8gMTYuMjcuMjIgPG51bWJlcjphbS1wbT5cblx0XHRcdFx0c3dpdGNoKHN0YXRlW3N0YXRlLmxlbmd0aC0xXVswXSkge1xuXHRcdFx0XHRcdGNhc2UgJ3RpbWUtc3R5bGUnOlxuXHRcdFx0XHRcdGNhc2UgJ2RhdGUtc3R5bGUnOlxuXHRcdFx0XHRcdFx0dGFnID0gcGFyc2V4bWx0YWcoUm5bMF0sIGZhbHNlKTtcblx0XHRcdFx0XHRcdE5GICs9IG51bWJlcl9mb3JtYXRzX29kc1tSblszXV1bdGFnLnN0eWxlPT09J2xvbmcnPzE6MF07IGJyZWFrO1xuXHRcdFx0XHR9IGJyZWFrO1xuXG5cdFx0XHRjYXNlICdib29sZWFuLXN0eWxlJzogYnJlYWs7IC8vIDE2LjI3LjIzIDxudW1iZXI6Ym9vbGVhbi1zdHlsZT5cblx0XHRcdGNhc2UgJ2Jvb2xlYW4nOiBicmVhazsgLy8gMTYuMjcuMjQgPG51bWJlcjpib29sZWFuPlxuXHRcdFx0Y2FzZSAndGV4dC1zdHlsZSc6IGJyZWFrOyAvLyAxNi4yNy4yNSA8bnVtYmVyOnRleHQtc3R5bGU+XG5cdFx0XHRjYXNlICd0ZXh0JzogLy8gMTYuMjcuMjYgPG51bWJlcjp0ZXh0PlxuXHRcdFx0XHRpZihSblswXS5zbGljZSgtMikgPT09IFwiLz5cIikgYnJlYWs7XG5cdFx0XHRcdGVsc2UgaWYoUm5bMV09PT1cIi9cIikgc3dpdGNoKHN0YXRlW3N0YXRlLmxlbmd0aC0xXVswXSkge1xuXHRcdFx0XHRcdGNhc2UgJ251bWJlci1zdHlsZSc6XG5cdFx0XHRcdFx0Y2FzZSAnZGF0ZS1zdHlsZSc6XG5cdFx0XHRcdFx0Y2FzZSAndGltZS1zdHlsZSc6XG5cdFx0XHRcdFx0XHRORiArPSBzdHIuc2xpY2UocGlkeCwgUm4uaW5kZXgpO1xuXHRcdFx0XHRcdFx0YnJlYWs7XG5cdFx0XHRcdH1cblx0XHRcdFx0ZWxzZSBwaWR4ID0gUm4uaW5kZXggKyBSblswXS5sZW5ndGg7XG5cdFx0XHRcdGJyZWFrO1xuXG5cdFx0XHRjYXNlICduYW1lZC1yYW5nZSc6IC8vIDkuNC4xMiA8dGFibGU6bmFtZWQtcmFuZ2U+XG5cdFx0XHRcdHRhZyA9IHBhcnNleG1sdGFnKFJuWzBdLCBmYWxzZSk7XG5cdFx0XHRcdF9SZWYgPSBvZHNfdG9fY3NmXzNEKHRhZ1snY2VsbC1yYW5nZS1hZGRyZXNzJ10pO1xuXHRcdFx0XHR2YXIgbnJhbmdlID0gKHtOYW1lOnRhZy5uYW1lLCBSZWY6X1JlZlswXSArICchJyArIF9SZWZbMV19Lyo6YW55Ki8pO1xuXHRcdFx0XHRpZihpbnRhYmxlKSBucmFuZ2UuU2hlZXQgPSBTaGVldE5hbWVzLmxlbmd0aDtcblx0XHRcdFx0V0IuTmFtZXMucHVzaChucmFuZ2UpO1xuXHRcdFx0XHRicmVhaztcblxuXHRcdFx0Y2FzZSAndGV4dC1jb250ZW50JzogYnJlYWs7IC8vIDE2LjI3LjI3IDxudW1iZXI6dGV4dC1jb250ZW50PlxuXHRcdFx0Y2FzZSAndGV4dC1wcm9wZXJ0aWVzJzogYnJlYWs7IC8vIDE2LjI3LjI3IDxzdHlsZTp0ZXh0LXByb3BlcnRpZXM+XG5cdFx0XHRjYXNlICdlbWJlZGRlZC10ZXh0JzogYnJlYWs7IC8vIDE2LjI3LjQgPG51bWJlcjplbWJlZGRlZC10ZXh0PlxuXG5cdFx0XHRjYXNlICdib2R5JzogY2FzZSAn55S15a2Q6KGo5qC8JzogYnJlYWs7IC8vIDMuMyAxNi45LjYgMTkuNzI2LjNcblxuXHRcdFx0Y2FzZSAnZm9ybXMnOiBicmVhazsgLy8gMTIuMjUuMiAxMy4yXG5cdFx0XHRjYXNlICd0YWJsZS1jb2x1bW4nOiBicmVhazsgLy8gOS4xLjYgPHRhYmxlOnRhYmxlLWNvbHVtbj5cblx0XHRcdGNhc2UgJ3RhYmxlLWhlYWRlci1yb3dzJzogYnJlYWs7IC8vIDkuMS43IDx0YWJsZTp0YWJsZS1oZWFkZXItcm93cz5cblx0XHRcdGNhc2UgJ3RhYmxlLXJvd3MnOiBicmVhazsgLy8gOS4xLjEyIDx0YWJsZTp0YWJsZS1yb3dzPlxuXHRcdFx0LyogVE9ETzogb3V0bGluZSBsZXZlbHMgKi9cblx0XHRcdGNhc2UgJ3RhYmxlLWNvbHVtbi1ncm91cCc6IGJyZWFrOyAvLyA5LjEuMTAgPHRhYmxlOnRhYmxlLWNvbHVtbi1ncm91cD5cblx0XHRcdGNhc2UgJ3RhYmxlLWhlYWRlci1jb2x1bW5zJzogYnJlYWs7IC8vIDkuMS4xMSA8dGFibGU6dGFibGUtaGVhZGVyLWNvbHVtbnM+XG5cdFx0XHRjYXNlICd0YWJsZS1jb2x1bW5zJzogYnJlYWs7IC8vIDkuMS4xMiA8dGFibGU6dGFibGUtY29sdW1ucz5cblxuXHRcdFx0Y2FzZSAnbnVsbC1kYXRlJzogYnJlYWs7IC8vIDkuNC4yIDx0YWJsZTpudWxsLWRhdGU+IFRPRE86IGRhdGUxOTA0XG5cblx0XHRcdGNhc2UgJ2dyYXBoaWMtcHJvcGVydGllcyc6IGJyZWFrOyAvLyAxNy4yMSA8c3R5bGU6Z3JhcGhpYy1wcm9wZXJ0aWVzPlxuXHRcdFx0Y2FzZSAnY2FsY3VsYXRpb24tc2V0dGluZ3MnOiBicmVhazsgLy8gOS40LjEgPHRhYmxlOmNhbGN1bGF0aW9uLXNldHRpbmdzPlxuXHRcdFx0Y2FzZSAnbmFtZWQtZXhwcmVzc2lvbnMnOiBicmVhazsgLy8gOS40LjExIDx0YWJsZTpuYW1lZC1leHByZXNzaW9ucz5cblx0XHRcdGNhc2UgJ2xhYmVsLXJhbmdlJzogYnJlYWs7IC8vIDkuNC45IDx0YWJsZTpsYWJlbC1yYW5nZT5cblx0XHRcdGNhc2UgJ2xhYmVsLXJhbmdlcyc6IGJyZWFrOyAvLyA5LjQuMTAgPHRhYmxlOmxhYmVsLXJhbmdlcz5cblx0XHRcdGNhc2UgJ25hbWVkLWV4cHJlc3Npb24nOiBicmVhazsgLy8gOS40LjEzIDx0YWJsZTpuYW1lZC1leHByZXNzaW9uPlxuXHRcdFx0Y2FzZSAnc29ydCc6IGJyZWFrOyAvLyA5LjQuMTkgPHRhYmxlOnNvcnQ+XG5cdFx0XHRjYXNlICdzb3J0LWJ5JzogYnJlYWs7IC8vIDkuNC4yMCA8dGFibGU6c29ydC1ieT5cblx0XHRcdGNhc2UgJ3NvcnQtZ3JvdXBzJzogYnJlYWs7IC8vIDkuNC4yMiA8dGFibGU6c29ydC1ncm91cHM+XG5cblx0XHRcdGNhc2UgJ3RhYic6IGJyZWFrOyAvLyA2LjEuNCA8dGV4dDp0YWI+XG5cdFx0XHRjYXNlICdsaW5lLWJyZWFrJzogYnJlYWs7IC8vIDYuMS41IDx0ZXh0OmxpbmUtYnJlYWs+XG5cdFx0XHRjYXNlICdzcGFuJzogYnJlYWs7IC8vIDYuMS43IDx0ZXh0OnNwYW4+XG5cdFx0XHRjYXNlICdwJzogY2FzZSAn5paH5pys5LiyJzogLy8gNS4xLjMgPHRleHQ6cD5cblx0XHRcdFx0aWYoWydtYXN0ZXItc3R5bGVzJ10uaW5kZXhPZihzdGF0ZVtzdGF0ZS5sZW5ndGgtMV1bMF0pID4gLTEpIGJyZWFrO1xuXHRcdFx0XHRpZihSblsxXT09PScvJyAmJiAoIWN0YWcgfHwgIWN0YWdbJ3N0cmluZy12YWx1ZSddKSkge1xuXHRcdFx0XHRcdHZhciBwdHAgPSBwYXJzZV90ZXh0X3Aoc3RyLnNsaWNlKHRleHRwaWR4LFJuLmluZGV4KSwgdGV4dHB0YWcpO1xuXHRcdFx0XHRcdHRleHRwID0gKHRleHRwLmxlbmd0aCA+IDAgPyB0ZXh0cCArIFwiXFxuXCIgOiBcIlwiKSArIHB0cFswXTtcblx0XHRcdFx0fSBlbHNlIHsgdGV4dHB0YWcgPSBwYXJzZXhtbHRhZyhSblswXSwgZmFsc2UpOyB0ZXh0cGlkeCA9IFJuLmluZGV4ICsgUm5bMF0ubGVuZ3RoOyB9XG5cdFx0XHRcdGJyZWFrOyAvLyA8dGV4dDpwPlxuXHRcdFx0Y2FzZSAncyc6IGJyZWFrOyAvLyA8dGV4dDpzPlxuXG5cdFx0XHRjYXNlICdkYXRhYmFzZS1yYW5nZSc6IC8vIDkuNC4xNSA8dGFibGU6ZGF0YWJhc2UtcmFuZ2U+XG5cdFx0XHRcdGlmKFJuWzFdPT09Jy8nKSBicmVhaztcblx0XHRcdFx0dHJ5IHtcblx0XHRcdFx0XHRfUmVmID0gb2RzX3RvX2NzZl8zRChwYXJzZXhtbHRhZyhSblswXSlbJ3RhcmdldC1yYW5nZS1hZGRyZXNzJ10pO1xuXHRcdFx0XHRcdFNoZWV0c1tfUmVmWzBdXVsnIWF1dG9maWx0ZXInXSA9IHsgcmVmOl9SZWZbMV0gfTtcblx0XHRcdFx0fSBjYXRjaChlKSB7LyogZW1wdHkgKi99XG5cdFx0XHRcdGJyZWFrO1xuXG5cdFx0XHRjYXNlICdkYXRlJzogYnJlYWs7IC8vIDwqOmRhdGU+XG5cblx0XHRcdGNhc2UgJ29iamVjdCc6IGJyZWFrOyAvLyAxMC40LjYuMiA8ZHJhdzpvYmplY3Q+XG5cdFx0XHRjYXNlICd0aXRsZSc6IGNhc2UgJ+agh+mimCc6IGJyZWFrOyAvLyA8Kjp0aXRsZT4gT1IgPHVvZjrmoIfpopg+XG5cdFx0XHRjYXNlICdkZXNjJzogYnJlYWs7IC8vIDwqOmRlc2M+XG5cdFx0XHRjYXNlICdiaW5hcnktZGF0YSc6IGJyZWFrOyAvLyAxMC40LjUgVE9ETzogYjY0IGJsb2JcblxuXHRcdFx0LyogOS4yIEFkdmFuY2VkIFRhYmxlcyAqL1xuXHRcdFx0Y2FzZSAndGFibGUtc291cmNlJzogYnJlYWs7IC8vIDkuMi42XG5cdFx0XHRjYXNlICdzY2VuYXJpbyc6IGJyZWFrOyAvLyA5LjIuNlxuXG5cdFx0XHRjYXNlICdpdGVyYXRpb24nOiBicmVhazsgLy8gOS40LjMgPHRhYmxlOml0ZXJhdGlvbj5cblx0XHRcdGNhc2UgJ2NvbnRlbnQtdmFsaWRhdGlvbnMnOiBicmVhazsgLy8gOS40LjQgPHRhYmxlOlxuXHRcdFx0Y2FzZSAnY29udGVudC12YWxpZGF0aW9uJzogYnJlYWs7IC8vIDkuNC41IDx0YWJsZTpcblx0XHRcdGNhc2UgJ2hlbHAtbWVzc2FnZSc6IGJyZWFrOyAvLyA5LjQuNiA8dGFibGU6XG5cdFx0XHRjYXNlICdlcnJvci1tZXNzYWdlJzogYnJlYWs7IC8vIDkuNC43IDx0YWJsZTpcblx0XHRcdGNhc2UgJ2RhdGFiYXNlLXJhbmdlcyc6IGJyZWFrOyAvLyA5LjQuMTQgPHRhYmxlOmRhdGFiYXNlLXJhbmdlcz5cblx0XHRcdGNhc2UgJ2ZpbHRlcic6IGJyZWFrOyAvLyA5LjUuMiA8dGFibGU6ZmlsdGVyPlxuXHRcdFx0Y2FzZSAnZmlsdGVyLWFuZCc6IGJyZWFrOyAvLyA5LjUuMyA8dGFibGU6ZmlsdGVyLWFuZD5cblx0XHRcdGNhc2UgJ2ZpbHRlci1vcic6IGJyZWFrOyAvLyA5LjUuNCA8dGFibGU6ZmlsdGVyLW9yPlxuXHRcdFx0Y2FzZSAnZmlsdGVyLWNvbmRpdGlvbic6IGJyZWFrOyAvLyA5LjUuNSA8dGFibGU6ZmlsdGVyLWNvbmRpdGlvbj5cblxuXHRcdFx0Y2FzZSAnbGlzdC1sZXZlbC1zdHlsZS1idWxsZXQnOiBicmVhazsgLy8gMTYuMzEgPHRleHQ6XG5cdFx0XHRjYXNlICdsaXN0LWxldmVsLXN0eWxlLW51bWJlcic6IGJyZWFrOyAvLyAxNi4zMiA8dGV4dDpcblx0XHRcdGNhc2UgJ2xpc3QtbGV2ZWwtcHJvcGVydGllcyc6IGJyZWFrOyAvLyAxNy4xOSA8c3R5bGU6XG5cblx0XHRcdC8qIDcuMyBEb2N1bWVudCBGaWVsZHMgKi9cblx0XHRcdGNhc2UgJ3NlbmRlci1maXJzdG5hbWUnOiAvLyA3LjMuNi4yXG5cdFx0XHRjYXNlICdzZW5kZXItbGFzdG5hbWUnOiAvLyA3LjMuNi4zXG5cdFx0XHRjYXNlICdzZW5kZXItaW5pdGlhbHMnOiAvLyA3LjMuNi40XG5cdFx0XHRjYXNlICdzZW5kZXItdGl0bGUnOiAvLyA3LjMuNi41XG5cdFx0XHRjYXNlICdzZW5kZXItcG9zaXRpb24nOiAvLyA3LjMuNi42XG5cdFx0XHRjYXNlICdzZW5kZXItZW1haWwnOiAvLyA3LjMuNi43XG5cdFx0XHRjYXNlICdzZW5kZXItcGhvbmUtcHJpdmF0ZSc6IC8vIDcuMy42Ljhcblx0XHRcdGNhc2UgJ3NlbmRlci1mYXgnOiAvLyA3LjMuNi45XG5cdFx0XHRjYXNlICdzZW5kZXItY29tcGFueSc6IC8vIDcuMy42LjEwXG5cdFx0XHRjYXNlICdzZW5kZXItcGhvbmUtd29yayc6IC8vIDcuMy42LjExXG5cdFx0XHRjYXNlICdzZW5kZXItc3RyZWV0JzogLy8gNy4zLjYuMTJcblx0XHRcdGNhc2UgJ3NlbmRlci1jaXR5JzogLy8gNy4zLjYuMTNcblx0XHRcdGNhc2UgJ3NlbmRlci1wb3N0YWwtY29kZSc6IC8vIDcuMy42LjE0XG5cdFx0XHRjYXNlICdzZW5kZXItY291bnRyeSc6IC8vIDcuMy42LjE1XG5cdFx0XHRjYXNlICdzZW5kZXItc3RhdGUtb3ItcHJvdmluY2UnOiAvLyA3LjMuNi4xNlxuXHRcdFx0Y2FzZSAnYXV0aG9yLW5hbWUnOiAvLyA3LjMuNy4xXG5cdFx0XHRjYXNlICdhdXRob3ItaW5pdGlhbHMnOiAvLyA3LjMuNy4yXG5cdFx0XHRjYXNlICdjaGFwdGVyJzogLy8gNy4zLjhcblx0XHRcdGNhc2UgJ2ZpbGUtbmFtZSc6IC8vIDcuMy45XG5cdFx0XHRjYXNlICd0ZW1wbGF0ZS1uYW1lJzogLy8gNy4zLjlcblx0XHRcdGNhc2UgJ3NoZWV0LW5hbWUnOiAvLyA3LjMuOVxuXHRcdFx0XHRicmVhaztcblxuXHRcdFx0Y2FzZSAnZXZlbnQtbGlzdGVuZXInOlxuXHRcdFx0XHRicmVhaztcblx0XHRcdC8qIFRPRE86IEZPRFMgUHJvcGVydGllcyAqL1xuXHRcdFx0Y2FzZSAnaW5pdGlhbC1jcmVhdG9yJzpcblx0XHRcdGNhc2UgJ2NyZWF0aW9uLWRhdGUnOlxuXHRcdFx0Y2FzZSAncHJpbnQtZGF0ZSc6XG5cdFx0XHRjYXNlICdnZW5lcmF0b3InOlxuXHRcdFx0Y2FzZSAnZG9jdW1lbnQtc3RhdGlzdGljJzpcblx0XHRcdGNhc2UgJ3VzZXItZGVmaW5lZCc6XG5cdFx0XHRjYXNlICdlZGl0aW5nLWR1cmF0aW9uJzpcblx0XHRcdGNhc2UgJ2VkaXRpbmctY3ljbGVzJzpcblx0XHRcdFx0YnJlYWs7XG5cblx0XHRcdC8qIFRPRE86IEZPRFMgQ29uZmlnICovXG5cdFx0XHRjYXNlICdjb25maWctaXRlbSc6XG5cdFx0XHRcdGJyZWFrO1xuXG5cdFx0XHQvKiBUT0RPOiBzdHlsZSB0b2tlbnMgKi9cblx0XHRcdGNhc2UgJ3BhZ2UtbnVtYmVyJzogYnJlYWs7IC8vIFRPRE8gPHRleHQ6cGFnZS1udW1iZXI+XG5cdFx0XHRjYXNlICdwYWdlLWNvdW50JzogYnJlYWs7IC8vIFRPRE8gPHRleHQ6cGFnZS1jb3VudD5cblx0XHRcdGNhc2UgJ3RpbWUnOiBicmVhazsgLy8gVE9ETyA8dGV4dDp0aW1lPlxuXG5cdFx0XHQvKiA5LjMgQWR2YW5jZWQgVGFibGUgQ2VsbHMgKi9cblx0XHRcdGNhc2UgJ2NlbGwtcmFuZ2Utc291cmNlJzogYnJlYWs7IC8vIDkuMy4xIDx0YWJsZTpcblx0XHRcdGNhc2UgJ2RldGVjdGl2ZSc6IGJyZWFrOyAvLyA5LjMuMiA8dGFibGU6XG5cdFx0XHRjYXNlICdvcGVyYXRpb24nOiBicmVhazsgLy8gOS4zLjMgPHRhYmxlOlxuXHRcdFx0Y2FzZSAnaGlnaGxpZ2h0ZWQtcmFuZ2UnOiBicmVhazsgLy8gOS4zLjQgPHRhYmxlOlxuXG5cdFx0XHQvKiA5LjYgRGF0YSBQaWxvdCBUYWJsZXMgPHRhYmxlOiAqL1xuXHRcdFx0Y2FzZSAnZGF0YS1waWxvdC10YWJsZSc6IC8vIDkuNi4zXG5cdFx0XHRjYXNlICdzb3VyY2UtY2VsbC1yYW5nZSc6IC8vIDkuNi41XG5cdFx0XHRjYXNlICdzb3VyY2Utc2VydmljZSc6IC8vIDkuNi42XG5cdFx0XHRjYXNlICdkYXRhLXBpbG90LWZpZWxkJzogLy8gOS42Ljdcblx0XHRcdGNhc2UgJ2RhdGEtcGlsb3QtbGV2ZWwnOiAvLyA5LjYuOFxuXHRcdFx0Y2FzZSAnZGF0YS1waWxvdC1zdWJ0b3RhbHMnOiAvLyA5LjYuOVxuXHRcdFx0Y2FzZSAnZGF0YS1waWxvdC1zdWJ0b3RhbCc6IC8vIDkuNi4xMFxuXHRcdFx0Y2FzZSAnZGF0YS1waWxvdC1tZW1iZXJzJzogLy8gOS42LjExXG5cdFx0XHRjYXNlICdkYXRhLXBpbG90LW1lbWJlcic6IC8vIDkuNi4xMlxuXHRcdFx0Y2FzZSAnZGF0YS1waWxvdC1kaXNwbGF5LWluZm8nOiAvLyA5LjYuMTNcblx0XHRcdGNhc2UgJ2RhdGEtcGlsb3Qtc29ydC1pbmZvJzogLy8gOS42LjE0XG5cdFx0XHRjYXNlICdkYXRhLXBpbG90LWxheW91dC1pbmZvJzogLy8gOS42LjE1XG5cdFx0XHRjYXNlICdkYXRhLXBpbG90LWZpZWxkLXJlZmVyZW5jZSc6IC8vIDkuNi4xNlxuXHRcdFx0Y2FzZSAnZGF0YS1waWxvdC1ncm91cHMnOiAvLyA5LjYuMTdcblx0XHRcdGNhc2UgJ2RhdGEtcGlsb3QtZ3JvdXAnOiAvLyA5LjYuMThcblx0XHRcdGNhc2UgJ2RhdGEtcGlsb3QtZ3JvdXAtbWVtYmVyJzogLy8gOS42LjE5XG5cdFx0XHRcdGJyZWFrO1xuXG5cdFx0XHQvKiAxMC4zIERyYXdpbmcgU2hhcGVzICovXG5cdFx0XHRjYXNlICdyZWN0JzogLy8gMTAuMy4yXG5cdFx0XHRcdGJyZWFrO1xuXG5cdFx0XHQvKiAxNC42IERERSBDb25uZWN0aW9ucyAqL1xuXHRcdFx0Y2FzZSAnZGRlLWNvbm5lY3Rpb24tZGVjbHMnOiAvLyAxNC42LjIgPHRleHQ6XG5cdFx0XHRjYXNlICdkZGUtY29ubmVjdGlvbi1kZWNsJzogLy8gMTQuNi4zIDx0ZXh0OlxuXHRcdFx0Y2FzZSAnZGRlLWxpbmsnOiAvLyAxNC42LjQgPHRhYmxlOlxuXHRcdFx0Y2FzZSAnZGRlLXNvdXJjZSc6IC8vIDE0LjYuNSA8b2ZmaWNlOlxuXHRcdFx0XHRicmVhaztcblxuXHRcdFx0Y2FzZSAncHJvcGVydGllcyc6IGJyZWFrOyAvLyAxMy43IDxmb3JtOnByb3BlcnRpZXM+XG5cdFx0XHRjYXNlICdwcm9wZXJ0eSc6IGJyZWFrOyAvLyAxMy44IDxmb3JtOnByb3BlcnR5PlxuXG5cdFx0XHRjYXNlICdhJzogLy8gNi4xLjggaHlwZXJsaW5rXG5cdFx0XHRcdGlmKFJuWzFdIT09ICcvJykge1xuXHRcdFx0XHRcdGF0YWcgPSBwYXJzZXhtbHRhZyhSblswXSwgZmFsc2UpO1xuXHRcdFx0XHRcdGlmKCFhdGFnLmhyZWYpIGJyZWFrO1xuXHRcdFx0XHRcdGF0YWcuVGFyZ2V0ID0gdW5lc2NhcGV4bWwoYXRhZy5ocmVmKTsgZGVsZXRlIGF0YWcuaHJlZjtcblx0XHRcdFx0XHRpZihhdGFnLlRhcmdldC5jaGFyQXQoMCkgPT0gXCIjXCIgJiYgYXRhZy5UYXJnZXQuaW5kZXhPZihcIi5cIikgPiAtMSkge1xuXHRcdFx0XHRcdFx0X1JlZiA9IG9kc190b19jc2ZfM0QoYXRhZy5UYXJnZXQuc2xpY2UoMSkpO1xuXHRcdFx0XHRcdFx0YXRhZy5UYXJnZXQgPSBcIiNcIiArIF9SZWZbMF0gKyBcIiFcIiArIF9SZWZbMV07XG5cdFx0XHRcdFx0fSBlbHNlIGlmKGF0YWcuVGFyZ2V0Lm1hdGNoKC9eXFwuXFwuW1xcXFxcXC9dLykpIGF0YWcuVGFyZ2V0ID0gYXRhZy5UYXJnZXQuc2xpY2UoMyk7XG5cdFx0XHRcdH1cblx0XHRcdFx0YnJlYWs7XG5cblx0XHRcdC8qIG5vbi1zdGFuZGFyZCAqL1xuXHRcdFx0Y2FzZSAndGFibGUtcHJvdGVjdGlvbic6IGJyZWFrO1xuXHRcdFx0Y2FzZSAnZGF0YS1waWxvdC1ncmFuZC10b3RhbCc6IGJyZWFrOyAvLyA8dGFibGU6XG5cdFx0XHRjYXNlICdvZmZpY2UtZG9jdW1lbnQtY29tbW9uLWF0dHJzJzogYnJlYWs7IC8vIGJhcmVcblx0XHRcdGRlZmF1bHQ6IHN3aXRjaChSblsyXSkge1xuXHRcdFx0XHRjYXNlICdkYzonOiAgICAgICAvLyBUT0RPOiBwcm9wZXJ0aWVzXG5cdFx0XHRcdGNhc2UgJ2NhbGNleHQ6JzogIC8vIGlnbm9yZSB1bmRvY3VtZW50ZWQgZXh0ZW5zaW9uc1xuXHRcdFx0XHRjYXNlICdsb2V4dDonOiAgICAvLyBpZ25vcmUgdW5kb2N1bWVudGVkIGV4dGVuc2lvbnNcblx0XHRcdFx0Y2FzZSAnb29vOic6ICAgICAgLy8gaWdub3JlIHVuZG9jdW1lbnRlZCBleHRlbnNpb25zXG5cdFx0XHRcdGNhc2UgJ2NoYXJ0b29vOic6IC8vIGlnbm9yZSB1bmRvY3VtZW50ZWQgZXh0ZW5zaW9uc1xuXHRcdFx0XHRjYXNlICdkcmF3Oic6ICAgICAvLyBUT0RPOiBkcmF3aW5nXG5cdFx0XHRcdGNhc2UgJ3N0eWxlOic6ICAgIC8vIFRPRE86IHN0eWxlc1xuXHRcdFx0XHRjYXNlICdjaGFydDonOiAgICAvLyBUT0RPOiBjaGFydHNcblx0XHRcdFx0Y2FzZSAnZm9ybTonOiAgICAgLy8gVE9ETzogZm9ybXNcblx0XHRcdFx0Y2FzZSAndW9mOic6ICAgICAgLy8gVE9ETzogdW9mXG5cdFx0XHRcdGNhc2UgJ+ihqDonOiAgICAgICAvLyBUT0RPOiB1b2Zcblx0XHRcdFx0Y2FzZSAn5a2XOic6ICAgICAgIC8vIFRPRE86IHVvZlxuXHRcdFx0XHRcdGJyZWFrO1xuXHRcdFx0XHRkZWZhdWx0OiBpZihvcHRzLldURikgdGhyb3cgbmV3IEVycm9yKFJuKTtcblx0XHRcdH1cblx0XHR9XG5cdFx0dmFyIG91dC8qOldvcmtib29rKi8gPSAoe1xuXHRcdFx0U2hlZXRzOiBTaGVldHMsXG5cdFx0XHRTaGVldE5hbWVzOiBTaGVldE5hbWVzLFxuXHRcdFx0V29ya2Jvb2s6IFdCXG5cdFx0fS8qOmFueSovKTtcblx0XHRpZihvcHRzLmJvb2tTaGVldHMpIGRlbGV0ZSAvKjo6KCovb3V0Lyo6OiA6YW55KSovLlNoZWV0cztcblx0XHRyZXR1cm4gb3V0O1xufVxuXG5mdW5jdGlvbiBwYXJzZV9vZHMoemlwLyo6WklQRmlsZSovLCBvcHRzLyo6P1BhcnNlT3B0cyovKS8qOldvcmtib29rKi8ge1xuXHRvcHRzID0gb3B0cyB8fCAoe30vKjphbnkqLyk7XG5cdGlmKHNhZmVnZXR6aXBmaWxlKHppcCwgJ01FVEEtSU5GL21hbmlmZXN0LnhtbCcpKSBwYXJzZV9tYW5pZmVzdChnZXR6aXBkYXRhKHppcCwgJ01FVEEtSU5GL21hbmlmZXN0LnhtbCcpLCBvcHRzKTtcblx0dmFyIGNvbnRlbnQgPSBnZXR6aXBzdHIoemlwLCAnY29udGVudC54bWwnKTtcblx0aWYoIWNvbnRlbnQpIHRocm93IG5ldyBFcnJvcihcIk1pc3NpbmcgY29udGVudC54bWwgaW4gT0RTIC8gVU9GIGZpbGVcIik7XG5cdHZhciB3YiA9IHBhcnNlX2NvbnRlbnRfeG1sKHV0ZjhyZWFkKGNvbnRlbnQpLCBvcHRzKTtcblx0aWYoc2FmZWdldHppcGZpbGUoemlwLCAnbWV0YS54bWwnKSkgd2IuUHJvcHMgPSBwYXJzZV9jb3JlX3Byb3BzKGdldHppcGRhdGEoemlwLCAnbWV0YS54bWwnKSk7XG5cdHJldHVybiB3Yjtcbn1cbmZ1bmN0aW9uIHBhcnNlX2ZvZHMoZGF0YS8qOnN0cmluZyovLCBvcHRzLyo6P1BhcnNlT3B0cyovKS8qOldvcmtib29rKi8ge1xuXHRyZXR1cm4gcGFyc2VfY29udGVudF94bWwoZGF0YSwgb3B0cyk7XG59XG5cbi8qIE9wZW5Eb2N1bWVudCAqL1xudmFyIHdyaXRlX3N0eWxlc19vZHMvKjp7KHdiOmFueSwgb3B0czphbnkpOnN0cmluZ30qLyA9IC8qIEBfX1BVUkVfXyAqLyhmdW5jdGlvbigpIHtcblx0dmFyIG1hc3Rlcl9zdHlsZXMgPSBbXG5cdFx0JzxvZmZpY2U6bWFzdGVyLXN0eWxlcz4nLFxuXHRcdFx0JzxzdHlsZTptYXN0ZXItcGFnZSBzdHlsZTpuYW1lPVwibXAxXCIgc3R5bGU6cGFnZS1sYXlvdXQtbmFtZT1cIm1wMVwiPicsXG5cdFx0XHRcdCc8c3R5bGU6aGVhZGVyLz4nLFxuXHRcdFx0XHQnPHN0eWxlOmhlYWRlci1sZWZ0IHN0eWxlOmRpc3BsYXk9XCJmYWxzZVwiLz4nLFxuXHRcdFx0XHQnPHN0eWxlOmZvb3Rlci8+Jyxcblx0XHRcdFx0JzxzdHlsZTpmb290ZXItbGVmdCBzdHlsZTpkaXNwbGF5PVwiZmFsc2VcIi8+Jyxcblx0XHRcdCc8L3N0eWxlOm1hc3Rlci1wYWdlPicsXG5cdFx0Jzwvb2ZmaWNlOm1hc3Rlci1zdHlsZXM+J1xuXHRdLmpvaW4oXCJcIik7XG5cblx0dmFyIHBheWxvYWQgPSAnPG9mZmljZTpkb2N1bWVudC1zdHlsZXMgJyArIHd4dF9oZWxwZXIoe1xuXHRcdCd4bWxuczpvZmZpY2UnOiAgIFwidXJuOm9hc2lzOm5hbWVzOnRjOm9wZW5kb2N1bWVudDp4bWxuczpvZmZpY2U6MS4wXCIsXG5cdFx0J3htbG5zOnRhYmxlJzogICAgXCJ1cm46b2FzaXM6bmFtZXM6dGM6b3BlbmRvY3VtZW50OnhtbG5zOnRhYmxlOjEuMFwiLFxuXHRcdCd4bWxuczpzdHlsZSc6ICAgIFwidXJuOm9hc2lzOm5hbWVzOnRjOm9wZW5kb2N1bWVudDp4bWxuczpzdHlsZToxLjBcIixcblx0XHQneG1sbnM6dGV4dCc6ICAgICBcInVybjpvYXNpczpuYW1lczp0YzpvcGVuZG9jdW1lbnQ6eG1sbnM6dGV4dDoxLjBcIixcblx0XHQneG1sbnM6ZHJhdyc6ICAgICBcInVybjpvYXNpczpuYW1lczp0YzpvcGVuZG9jdW1lbnQ6eG1sbnM6ZHJhd2luZzoxLjBcIixcblx0XHQneG1sbnM6Zm8nOiAgICAgICBcInVybjpvYXNpczpuYW1lczp0YzpvcGVuZG9jdW1lbnQ6eG1sbnM6eHNsLWZvLWNvbXBhdGlibGU6MS4wXCIsXG5cdFx0J3htbG5zOnhsaW5rJzogICAgXCJodHRwOi8vd3d3LnczLm9yZy8xOTk5L3hsaW5rXCIsXG5cdFx0J3htbG5zOmRjJzogICAgICAgXCJodHRwOi8vcHVybC5vcmcvZGMvZWxlbWVudHMvMS4xL1wiLFxuXHRcdCd4bWxuczpudW1iZXInOiAgIFwidXJuOm9hc2lzOm5hbWVzOnRjOm9wZW5kb2N1bWVudDp4bWxuczpkYXRhc3R5bGU6MS4wXCIsXG5cdFx0J3htbG5zOnN2Zyc6ICAgICAgXCJ1cm46b2FzaXM6bmFtZXM6dGM6b3BlbmRvY3VtZW50OnhtbG5zOnN2Zy1jb21wYXRpYmxlOjEuMFwiLFxuXHRcdCd4bWxuczpvZic6ICAgICAgIFwidXJuOm9hc2lzOm5hbWVzOnRjOm9wZW5kb2N1bWVudDp4bWxuczpvZjoxLjJcIixcblx0XHQnb2ZmaWNlOnZlcnNpb24nOiBcIjEuMlwiXG5cdH0pICsgJz4nICsgbWFzdGVyX3N0eWxlcyArICc8L29mZmljZTpkb2N1bWVudC1zdHlsZXM+JztcblxuXHRyZXR1cm4gZnVuY3Rpb24gd3NvKC8qOjp3Yiwgb3B0cyovKSB7XG5cdFx0cmV0dXJuIFhNTF9IRUFERVIgKyBwYXlsb2FkO1xuXHR9O1xufSkoKTtcbnZhciB3cml0ZV9jb250ZW50X29kcy8qOnsod2I6YW55LCBvcHRzOmFueSk6c3RyaW5nfSovID0gLyogQF9fUFVSRV9fICovKGZ1bmN0aW9uKCkge1xuXHQvKiA2LjEuMiBXaGl0ZSBTcGFjZSBDaGFyYWN0ZXJzICovXG5cdHZhciB3cml0ZV90ZXh0X3AgPSBmdW5jdGlvbih0ZXh0Lyo6c3RyaW5nKi8pLyo6c3RyaW5nKi8ge1xuXHRcdHJldHVybiBlc2NhcGV4bWwodGV4dClcblx0XHRcdC5yZXBsYWNlKC8gICsvZywgZnVuY3Rpb24oJCQpe3JldHVybiAnPHRleHQ6cyB0ZXh0OmM9XCInKyQkLmxlbmd0aCsnXCIvPic7fSlcblx0XHRcdC5yZXBsYWNlKC9cXHQvZywgXCI8dGV4dDp0YWIvPlwiKVxuXHRcdFx0LnJlcGxhY2UoL1xcbi9nLCBcIjwvdGV4dDpwPjx0ZXh0OnA+XCIpXG5cdFx0XHQucmVwbGFjZSgvXiAvLCBcIjx0ZXh0OnMvPlwiKS5yZXBsYWNlKC8gJC8sIFwiPHRleHQ6cy8+XCIpO1xuXHR9O1xuXG5cdHZhciBudWxsX2NlbGxfeG1sID0gJyAgICAgICAgICA8dGFibGU6dGFibGUtY2VsbCAvPlxcbic7XG5cdHZhciBjb3ZlcmVkX2NlbGxfeG1sID0gJyAgICAgICAgICA8dGFibGU6Y292ZXJlZC10YWJsZS1jZWxsLz5cXG4nO1xuXHR2YXIgd3JpdGVfd3MgPSBmdW5jdGlvbih3cywgd2IvKjpXb3JrYm9vayovLCBpLyo6bnVtYmVyKi8vKjo6LCBvcHRzKi8pLyo6c3RyaW5nKi8ge1xuXHRcdC8qIFNlY3Rpb24gOSBUYWJsZXMgKi9cblx0XHR2YXIgby8qOkFycmF5PHN0cmluZz4qLyA9IFtdO1xuXHRcdG8ucHVzaCgnICAgICAgPHRhYmxlOnRhYmxlIHRhYmxlOm5hbWU9XCInICsgZXNjYXBleG1sKHdiLlNoZWV0TmFtZXNbaV0pICsgJ1wiIHRhYmxlOnN0eWxlLW5hbWU9XCJ0YTFcIj5cXG4nKTtcblx0XHR2YXIgUj0wLEM9MCwgcmFuZ2UgPSBkZWNvZGVfcmFuZ2Uod3NbJyFyZWYnXXx8XCJBMVwiKTtcblx0XHR2YXIgbWFyci8qOkFycmF5PFJhbmdlPiovID0gd3NbJyFtZXJnZXMnXSB8fCBbXSwgbWkgPSAwO1xuXHRcdHZhciBkZW5zZSA9IEFycmF5LmlzQXJyYXkod3MpO1xuXHRcdGlmKHdzW1wiIWNvbHNcIl0pIHtcblx0XHRcdGZvcihDID0gMDsgQyA8PSByYW5nZS5lLmM7ICsrQykgby5wdXNoKCcgICAgICAgIDx0YWJsZTp0YWJsZS1jb2x1bW4nICsgKHdzW1wiIWNvbHNcIl1bQ10gPyAnIHRhYmxlOnN0eWxlLW5hbWU9XCJjbycgKyB3c1tcIiFjb2xzXCJdW0NdLm9kcyArICdcIicgOiAnJykgKyAnPjwvdGFibGU6dGFibGUtY29sdW1uPlxcbicpO1xuXHRcdH1cblx0XHR2YXIgSCA9IFwiXCIsIFJPV1MgPSB3c1tcIiFyb3dzXCJdfHxbXTtcblx0XHRmb3IoUiA9IDA7IFIgPCByYW5nZS5zLnI7ICsrUikge1xuXHRcdFx0SCA9IFJPV1NbUl0gPyAnIHRhYmxlOnN0eWxlLW5hbWU9XCJybycgKyBST1dTW1JdLm9kcyArICdcIicgOiBcIlwiO1xuXHRcdFx0by5wdXNoKCcgICAgICAgIDx0YWJsZTp0YWJsZS1yb3cnICsgSCArICc+PC90YWJsZTp0YWJsZS1yb3c+XFxuJyk7XG5cdFx0fVxuXHRcdGZvcig7IFIgPD0gcmFuZ2UuZS5yOyArK1IpIHtcblx0XHRcdEggPSBST1dTW1JdID8gJyB0YWJsZTpzdHlsZS1uYW1lPVwicm8nICsgUk9XU1tSXS5vZHMgKyAnXCInIDogXCJcIjtcblx0XHRcdG8ucHVzaCgnICAgICAgICA8dGFibGU6dGFibGUtcm93JyArIEggKyAnPlxcbicpO1xuXHRcdFx0Zm9yKEM9MDsgQyA8IHJhbmdlLnMuYzsgKytDKSBvLnB1c2gobnVsbF9jZWxsX3htbCk7XG5cdFx0XHRmb3IoOyBDIDw9IHJhbmdlLmUuYzsgKytDKSB7XG5cdFx0XHRcdHZhciBza2lwID0gZmFsc2UsIGN0ID0ge30sIHRleHRwID0gXCJcIjtcblx0XHRcdFx0Zm9yKG1pID0gMDsgbWkgIT0gbWFyci5sZW5ndGg7ICsrbWkpIHtcblx0XHRcdFx0XHRpZihtYXJyW21pXS5zLmMgPiBDKSBjb250aW51ZTtcblx0XHRcdFx0XHRpZihtYXJyW21pXS5zLnIgPiBSKSBjb250aW51ZTtcblx0XHRcdFx0XHRpZihtYXJyW21pXS5lLmMgPCBDKSBjb250aW51ZTtcblx0XHRcdFx0XHRpZihtYXJyW21pXS5lLnIgPCBSKSBjb250aW51ZTtcblx0XHRcdFx0XHRpZihtYXJyW21pXS5zLmMgIT0gQyB8fCBtYXJyW21pXS5zLnIgIT0gUikgc2tpcCA9IHRydWU7XG5cdFx0XHRcdFx0Y3RbJ3RhYmxlOm51bWJlci1jb2x1bW5zLXNwYW5uZWQnXSA9IChtYXJyW21pXS5lLmMgLSBtYXJyW21pXS5zLmMgKyAxKTtcblx0XHRcdFx0XHRjdFsndGFibGU6bnVtYmVyLXJvd3Mtc3Bhbm5lZCddID0gICAgKG1hcnJbbWldLmUuciAtIG1hcnJbbWldLnMuciArIDEpO1xuXHRcdFx0XHRcdGJyZWFrO1xuXHRcdFx0XHR9XG5cdFx0XHRcdGlmKHNraXApIHsgby5wdXNoKGNvdmVyZWRfY2VsbF94bWwpOyBjb250aW51ZTsgfVxuXHRcdFx0XHR2YXIgcmVmID0gZW5jb2RlX2NlbGwoe3I6UiwgYzpDfSksIGNlbGwgPSBkZW5zZSA/ICh3c1tSXXx8W10pW0NdOiB3c1tyZWZdO1xuXHRcdFx0XHRpZihjZWxsICYmIGNlbGwuZikge1xuXHRcdFx0XHRcdGN0Wyd0YWJsZTpmb3JtdWxhJ10gPSBlc2NhcGV4bWwoY3NmX3RvX29kc19mb3JtdWxhKGNlbGwuZikpO1xuXHRcdFx0XHRcdGlmKGNlbGwuRikge1xuXHRcdFx0XHRcdFx0aWYoY2VsbC5GLnNsaWNlKDAsIHJlZi5sZW5ndGgpID09IHJlZikge1xuXHRcdFx0XHRcdFx0XHR2YXIgX0ZyZWYgPSBkZWNvZGVfcmFuZ2UoY2VsbC5GKTtcblx0XHRcdFx0XHRcdFx0Y3RbJ3RhYmxlOm51bWJlci1tYXRyaXgtY29sdW1ucy1zcGFubmVkJ10gPSAoX0ZyZWYuZS5jIC0gX0ZyZWYucy5jICsgMSk7XG5cdFx0XHRcdFx0XHRcdGN0Wyd0YWJsZTpudW1iZXItbWF0cml4LXJvd3Mtc3Bhbm5lZCddID0gICAgKF9GcmVmLmUuciAtIF9GcmVmLnMuciArIDEpO1xuXHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdH1cblx0XHRcdFx0fVxuXHRcdFx0XHRpZighY2VsbCkgeyBvLnB1c2gobnVsbF9jZWxsX3htbCk7IGNvbnRpbnVlOyB9XG5cdFx0XHRcdHN3aXRjaChjZWxsLnQpIHtcblx0XHRcdFx0XHRjYXNlICdiJzpcblx0XHRcdFx0XHRcdHRleHRwID0gKGNlbGwudiA/ICdUUlVFJyA6ICdGQUxTRScpO1xuXHRcdFx0XHRcdFx0Y3RbJ29mZmljZTp2YWx1ZS10eXBlJ10gPSBcImJvb2xlYW5cIjtcblx0XHRcdFx0XHRcdGN0WydvZmZpY2U6Ym9vbGVhbi12YWx1ZSddID0gKGNlbGwudiA/ICd0cnVlJyA6ICdmYWxzZScpO1xuXHRcdFx0XHRcdFx0YnJlYWs7XG5cdFx0XHRcdFx0Y2FzZSAnbic6XG5cdFx0XHRcdFx0XHR0ZXh0cCA9IChjZWxsLnd8fFN0cmluZyhjZWxsLnZ8fDApKTtcblx0XHRcdFx0XHRcdGN0WydvZmZpY2U6dmFsdWUtdHlwZSddID0gXCJmbG9hdFwiO1xuXHRcdFx0XHRcdFx0Y3RbJ29mZmljZTp2YWx1ZSddID0gKGNlbGwudnx8MCk7XG5cdFx0XHRcdFx0XHRicmVhaztcblx0XHRcdFx0XHRjYXNlICdzJzogY2FzZSAnc3RyJzpcblx0XHRcdFx0XHRcdHRleHRwID0gY2VsbC52ID09IG51bGwgPyBcIlwiIDogY2VsbC52O1xuXHRcdFx0XHRcdFx0Y3RbJ29mZmljZTp2YWx1ZS10eXBlJ10gPSBcInN0cmluZ1wiO1xuXHRcdFx0XHRcdFx0YnJlYWs7XG5cdFx0XHRcdFx0Y2FzZSAnZCc6XG5cdFx0XHRcdFx0XHR0ZXh0cCA9IChjZWxsLnd8fChwYXJzZURhdGUoY2VsbC52KS50b0lTT1N0cmluZygpKSk7XG5cdFx0XHRcdFx0XHRjdFsnb2ZmaWNlOnZhbHVlLXR5cGUnXSA9IFwiZGF0ZVwiO1xuXHRcdFx0XHRcdFx0Y3RbJ29mZmljZTpkYXRlLXZhbHVlJ10gPSAocGFyc2VEYXRlKGNlbGwudikudG9JU09TdHJpbmcoKSk7XG5cdFx0XHRcdFx0XHRjdFsndGFibGU6c3R5bGUtbmFtZSddID0gXCJjZTFcIjtcblx0XHRcdFx0XHRcdGJyZWFrO1xuXHRcdFx0XHRcdC8vY2FzZSAnZSc6XG5cdFx0XHRcdFx0ZGVmYXVsdDogby5wdXNoKG51bGxfY2VsbF94bWwpOyBjb250aW51ZTtcblx0XHRcdFx0fVxuXHRcdFx0XHR2YXIgdGV4dF9wID0gd3JpdGVfdGV4dF9wKHRleHRwKTtcblx0XHRcdFx0aWYoY2VsbC5sICYmIGNlbGwubC5UYXJnZXQpIHtcblx0XHRcdFx0XHR2YXIgX3RndCA9IGNlbGwubC5UYXJnZXQ7XG5cdFx0XHRcdFx0X3RndCA9IF90Z3QuY2hhckF0KDApID09IFwiI1wiID8gXCIjXCIgKyBjc2ZfdG9fb2RzXzNEKF90Z3Quc2xpY2UoMSkpIDogX3RndDtcblx0XHRcdFx0XHQvLyBUT0RPOiBjaG9vc2UgY29ycmVjdCBwYXJlbnQgcGF0aCBmb3JtYXQgYmFzZWQgb24gbGluayBkZWxpbWl0ZXJzXG5cdFx0XHRcdFx0aWYoX3RndC5jaGFyQXQoMCkgIT0gXCIjXCIgJiYgIV90Z3QubWF0Y2goL15cXHcrOi8pKSBfdGd0ID0gJy4uLycgKyBfdGd0O1xuXHRcdFx0XHRcdHRleHRfcCA9IHdyaXRleHRhZygndGV4dDphJywgdGV4dF9wLCB7J3hsaW5rOmhyZWYnOiBfdGd0LnJlcGxhY2UoLyYvZywgXCImYW1wO1wiKX0pO1xuXHRcdFx0XHR9XG5cdFx0XHRcdG8ucHVzaCgnICAgICAgICAgICcgKyB3cml0ZXh0YWcoJ3RhYmxlOnRhYmxlLWNlbGwnLCB3cml0ZXh0YWcoJ3RleHQ6cCcsIHRleHRfcCwge30pLCBjdCkgKyAnXFxuJyk7XG5cdFx0XHR9XG5cdFx0XHRvLnB1c2goJyAgICAgICAgPC90YWJsZTp0YWJsZS1yb3c+XFxuJyk7XG5cdFx0fVxuXHRcdG8ucHVzaCgnICAgICAgPC90YWJsZTp0YWJsZT5cXG4nKTtcblx0XHRyZXR1cm4gby5qb2luKFwiXCIpO1xuXHR9O1xuXG5cdHZhciB3cml0ZV9hdXRvbWF0aWNfc3R5bGVzX29kcyA9IGZ1bmN0aW9uKG8vKjpBcnJheTxzdHJpbmc+Ki8sIHdiKSB7XG5cdFx0by5wdXNoKCcgPG9mZmljZTphdXRvbWF0aWMtc3R5bGVzPlxcbicpO1xuXG5cdFx0by5wdXNoKCcgIDxudW1iZXI6ZGF0ZS1zdHlsZSBzdHlsZTpuYW1lPVwiTjM3XCIgbnVtYmVyOmF1dG9tYXRpYy1vcmRlcj1cInRydWVcIj5cXG4nKTtcblx0XHRvLnB1c2goJyAgIDxudW1iZXI6bW9udGggbnVtYmVyOnN0eWxlPVwibG9uZ1wiLz5cXG4nKTtcblx0XHRvLnB1c2goJyAgIDxudW1iZXI6dGV4dD4vPC9udW1iZXI6dGV4dD5cXG4nKTtcblx0XHRvLnB1c2goJyAgIDxudW1iZXI6ZGF5IG51bWJlcjpzdHlsZT1cImxvbmdcIi8+XFxuJyk7XG5cdFx0by5wdXNoKCcgICA8bnVtYmVyOnRleHQ+LzwvbnVtYmVyOnRleHQ+XFxuJyk7XG5cdFx0by5wdXNoKCcgICA8bnVtYmVyOnllYXIvPlxcbicpO1xuXHRcdG8ucHVzaCgnICA8L251bWJlcjpkYXRlLXN0eWxlPlxcbicpO1xuXG5cdFx0LyogY29sdW1uIHN0eWxlcyAqL1xuXHRcdHZhciBjaWR4ID0gMDtcblx0XHR3Yi5TaGVldE5hbWVzLm1hcChmdW5jdGlvbihuKSB7IHJldHVybiB3Yi5TaGVldHNbbl07IH0pLmZvckVhY2goZnVuY3Rpb24od3MpIHtcblx0XHRcdGlmKCF3cykgcmV0dXJuO1xuXHRcdFx0aWYod3NbXCIhY29sc1wiXSkge1xuXHRcdFx0XHRmb3IodmFyIEMgPSAwOyBDIDwgd3NbXCIhY29sc1wiXS5sZW5ndGg7ICsrQykgaWYod3NbXCIhY29sc1wiXVtDXSkge1xuXHRcdFx0XHRcdHZhciBjb2xvYmogPSB3c1tcIiFjb2xzXCJdW0NdO1xuXHRcdFx0XHRcdGlmKGNvbG9iai53aWR0aCA9PSBudWxsICYmIGNvbG9iai53cHggPT0gbnVsbCAmJiBjb2xvYmoud2NoID09IG51bGwpIGNvbnRpbnVlO1xuXHRcdFx0XHRcdHByb2Nlc3NfY29sKGNvbG9iaik7XG5cdFx0XHRcdFx0Y29sb2JqLm9kcyA9IGNpZHg7XG5cdFx0XHRcdFx0dmFyIHcgPSB3c1tcIiFjb2xzXCJdW0NdLndweCArIFwicHhcIjtcblx0XHRcdFx0XHRvLnB1c2goJyAgPHN0eWxlOnN0eWxlIHN0eWxlOm5hbWU9XCJjbycgKyBjaWR4ICsgJ1wiIHN0eWxlOmZhbWlseT1cInRhYmxlLWNvbHVtblwiPlxcbicpO1xuXHRcdFx0XHRcdG8ucHVzaCgnICAgPHN0eWxlOnRhYmxlLWNvbHVtbi1wcm9wZXJ0aWVzIGZvOmJyZWFrLWJlZm9yZT1cImF1dG9cIiBzdHlsZTpjb2x1bW4td2lkdGg9XCInICsgdyArICdcIi8+XFxuJyk7XG5cdFx0XHRcdFx0by5wdXNoKCcgIDwvc3R5bGU6c3R5bGU+XFxuJyk7XG5cdFx0XHRcdFx0KytjaWR4O1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0fSk7XG5cblx0XHQvKiByb3cgc3R5bGVzICovXG5cdFx0dmFyIHJpZHggPSAwO1xuXHRcdHdiLlNoZWV0TmFtZXMubWFwKGZ1bmN0aW9uKG4pIHsgcmV0dXJuIHdiLlNoZWV0c1tuXTsgfSkuZm9yRWFjaChmdW5jdGlvbih3cykge1xuXHRcdFx0aWYoIXdzKSByZXR1cm47XG5cdFx0XHRpZih3c1tcIiFyb3dzXCJdKSB7XG5cdFx0XHRcdGZvcih2YXIgUiA9IDA7IFIgPCB3c1tcIiFyb3dzXCJdLmxlbmd0aDsgKytSKSBpZih3c1tcIiFyb3dzXCJdW1JdKSB7XG5cdFx0XHRcdFx0d3NbXCIhcm93c1wiXVtSXS5vZHMgPSByaWR4O1xuXHRcdFx0XHRcdHZhciBoID0gd3NbXCIhcm93c1wiXVtSXS5ocHggKyBcInB4XCI7XG5cdFx0XHRcdFx0by5wdXNoKCcgIDxzdHlsZTpzdHlsZSBzdHlsZTpuYW1lPVwicm8nICsgcmlkeCArICdcIiBzdHlsZTpmYW1pbHk9XCJ0YWJsZS1yb3dcIj5cXG4nKTtcblx0XHRcdFx0XHRvLnB1c2goJyAgIDxzdHlsZTp0YWJsZS1yb3ctcHJvcGVydGllcyBmbzpicmVhay1iZWZvcmU9XCJhdXRvXCIgc3R5bGU6cm93LWhlaWdodD1cIicgKyBoICsgJ1wiLz5cXG4nKTtcblx0XHRcdFx0XHRvLnB1c2goJyAgPC9zdHlsZTpzdHlsZT5cXG4nKTtcblx0XHRcdFx0XHQrK3JpZHg7XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHR9KTtcblxuXHRcdC8qIHRhYmxlICovXG5cdFx0by5wdXNoKCcgIDxzdHlsZTpzdHlsZSBzdHlsZTpuYW1lPVwidGExXCIgc3R5bGU6ZmFtaWx5PVwidGFibGVcIiBzdHlsZTptYXN0ZXItcGFnZS1uYW1lPVwibXAxXCI+XFxuJyk7XG5cdFx0by5wdXNoKCcgICA8c3R5bGU6dGFibGUtcHJvcGVydGllcyB0YWJsZTpkaXNwbGF5PVwidHJ1ZVwiIHN0eWxlOndyaXRpbmctbW9kZT1cImxyLXRiXCIvPlxcbicpO1xuXHRcdG8ucHVzaCgnICA8L3N0eWxlOnN0eWxlPlxcbicpO1xuXG5cdFx0LyogdGFibGUgY2VsbHMsIHRleHQgKi9cblx0XHRvLnB1c2goJyAgPHN0eWxlOnN0eWxlIHN0eWxlOm5hbWU9XCJjZTFcIiBzdHlsZTpmYW1pbHk9XCJ0YWJsZS1jZWxsXCIgc3R5bGU6cGFyZW50LXN0eWxlLW5hbWU9XCJEZWZhdWx0XCIgc3R5bGU6ZGF0YS1zdHlsZS1uYW1lPVwiTjM3XCIvPlxcbicpO1xuXG5cdFx0LyogcGFnZS1sYXlvdXQgKi9cblxuXHRcdG8ucHVzaCgnIDwvb2ZmaWNlOmF1dG9tYXRpYy1zdHlsZXM+XFxuJyk7XG5cdH07XG5cblx0cmV0dXJuIGZ1bmN0aW9uIHdjeCh3Yiwgb3B0cykge1xuXHRcdHZhciBvID0gW1hNTF9IRUFERVJdO1xuXHRcdC8qIDMuMS4zLjIgKi9cblx0XHR2YXIgYXR0ciA9IHd4dF9oZWxwZXIoe1xuXHRcdFx0J3htbG5zOm9mZmljZSc6ICAgICAgIFwidXJuOm9hc2lzOm5hbWVzOnRjOm9wZW5kb2N1bWVudDp4bWxuczpvZmZpY2U6MS4wXCIsXG5cdFx0XHQneG1sbnM6dGFibGUnOiAgICAgICAgXCJ1cm46b2FzaXM6bmFtZXM6dGM6b3BlbmRvY3VtZW50OnhtbG5zOnRhYmxlOjEuMFwiLFxuXHRcdFx0J3htbG5zOnN0eWxlJzogICAgICAgIFwidXJuOm9hc2lzOm5hbWVzOnRjOm9wZW5kb2N1bWVudDp4bWxuczpzdHlsZToxLjBcIixcblx0XHRcdCd4bWxuczp0ZXh0JzogICAgICAgICBcInVybjpvYXNpczpuYW1lczp0YzpvcGVuZG9jdW1lbnQ6eG1sbnM6dGV4dDoxLjBcIixcblx0XHRcdCd4bWxuczpkcmF3JzogICAgICAgICBcInVybjpvYXNpczpuYW1lczp0YzpvcGVuZG9jdW1lbnQ6eG1sbnM6ZHJhd2luZzoxLjBcIixcblx0XHRcdCd4bWxuczpmbyc6ICAgICAgICAgICBcInVybjpvYXNpczpuYW1lczp0YzpvcGVuZG9jdW1lbnQ6eG1sbnM6eHNsLWZvLWNvbXBhdGlibGU6MS4wXCIsXG5cdFx0XHQneG1sbnM6eGxpbmsnOiAgICAgICAgXCJodHRwOi8vd3d3LnczLm9yZy8xOTk5L3hsaW5rXCIsXG5cdFx0XHQneG1sbnM6ZGMnOiAgICAgICAgICAgXCJodHRwOi8vcHVybC5vcmcvZGMvZWxlbWVudHMvMS4xL1wiLFxuXHRcdFx0J3htbG5zOm1ldGEnOiAgICAgICAgIFwidXJuOm9hc2lzOm5hbWVzOnRjOm9wZW5kb2N1bWVudDp4bWxuczptZXRhOjEuMFwiLFxuXHRcdFx0J3htbG5zOm51bWJlcic6ICAgICAgIFwidXJuOm9hc2lzOm5hbWVzOnRjOm9wZW5kb2N1bWVudDp4bWxuczpkYXRhc3R5bGU6MS4wXCIsXG5cdFx0XHQneG1sbnM6cHJlc2VudGF0aW9uJzogXCJ1cm46b2FzaXM6bmFtZXM6dGM6b3BlbmRvY3VtZW50OnhtbG5zOnByZXNlbnRhdGlvbjoxLjBcIixcblx0XHRcdCd4bWxuczpzdmcnOiAgICAgICAgICBcInVybjpvYXNpczpuYW1lczp0YzpvcGVuZG9jdW1lbnQ6eG1sbnM6c3ZnLWNvbXBhdGlibGU6MS4wXCIsXG5cdFx0XHQneG1sbnM6Y2hhcnQnOiAgICAgICAgXCJ1cm46b2FzaXM6bmFtZXM6dGM6b3BlbmRvY3VtZW50OnhtbG5zOmNoYXJ0OjEuMFwiLFxuXHRcdFx0J3htbG5zOmRyM2QnOiAgICAgICAgIFwidXJuOm9hc2lzOm5hbWVzOnRjOm9wZW5kb2N1bWVudDp4bWxuczpkcjNkOjEuMFwiLFxuXHRcdFx0J3htbG5zOm1hdGgnOiAgICAgICAgIFwiaHR0cDovL3d3dy53My5vcmcvMTk5OC9NYXRoL01hdGhNTFwiLFxuXHRcdFx0J3htbG5zOmZvcm0nOiAgICAgICAgIFwidXJuOm9hc2lzOm5hbWVzOnRjOm9wZW5kb2N1bWVudDp4bWxuczpmb3JtOjEuMFwiLFxuXHRcdFx0J3htbG5zOnNjcmlwdCc6ICAgICAgIFwidXJuOm9hc2lzOm5hbWVzOnRjOm9wZW5kb2N1bWVudDp4bWxuczpzY3JpcHQ6MS4wXCIsXG5cdFx0XHQneG1sbnM6b29vJzogICAgICAgICAgXCJodHRwOi8vb3Blbm9mZmljZS5vcmcvMjAwNC9vZmZpY2VcIixcblx0XHRcdCd4bWxuczpvb293JzogICAgICAgICBcImh0dHA6Ly9vcGVub2ZmaWNlLm9yZy8yMDA0L3dyaXRlclwiLFxuXHRcdFx0J3htbG5zOm9vb2MnOiAgICAgICAgIFwiaHR0cDovL29wZW5vZmZpY2Uub3JnLzIwMDQvY2FsY1wiLFxuXHRcdFx0J3htbG5zOmRvbSc6ICAgICAgICAgIFwiaHR0cDovL3d3dy53My5vcmcvMjAwMS94bWwtZXZlbnRzXCIsXG5cdFx0XHQneG1sbnM6eGZvcm1zJzogICAgICAgXCJodHRwOi8vd3d3LnczLm9yZy8yMDAyL3hmb3Jtc1wiLFxuXHRcdFx0J3htbG5zOnhzZCc6ICAgICAgICAgIFwiaHR0cDovL3d3dy53My5vcmcvMjAwMS9YTUxTY2hlbWFcIixcblx0XHRcdCd4bWxuczp4c2knOiAgICAgICAgICBcImh0dHA6Ly93d3cudzMub3JnLzIwMDEvWE1MU2NoZW1hLWluc3RhbmNlXCIsXG5cdFx0XHQneG1sbnM6c2hlZXQnOiAgICAgICAgXCJ1cm46b2FzaXM6bmFtZXM6dGM6b3BlbmRvY3VtZW50OnNoMzN0anM6MS4wXCIsXG5cdFx0XHQneG1sbnM6cnB0JzogICAgICAgICAgXCJodHRwOi8vb3Blbm9mZmljZS5vcmcvMjAwNS9yZXBvcnRcIixcblx0XHRcdCd4bWxuczpvZic6ICAgICAgICAgICBcInVybjpvYXNpczpuYW1lczp0YzpvcGVuZG9jdW1lbnQ6eG1sbnM6b2Y6MS4yXCIsXG5cdFx0XHQneG1sbnM6eGh0bWwnOiAgICAgICAgXCJodHRwOi8vd3d3LnczLm9yZy8xOTk5L3hodG1sXCIsXG5cdFx0XHQneG1sbnM6Z3JkZGwnOiAgICAgICAgXCJodHRwOi8vd3d3LnczLm9yZy8yMDAzL2cvZGF0YS12aWV3I1wiLFxuXHRcdFx0J3htbG5zOnRhYmxlb29vJzogICAgIFwiaHR0cDovL29wZW5vZmZpY2Uub3JnLzIwMDkvdGFibGVcIixcblx0XHRcdCd4bWxuczpkcmF3b29vJzogICAgICBcImh0dHA6Ly9vcGVub2ZmaWNlLm9yZy8yMDEwL2RyYXdcIixcblx0XHRcdCd4bWxuczpjYWxjZXh0JzogICAgICBcInVybjpvcmc6ZG9jdW1lbnRmb3VuZGF0aW9uOm5hbWVzOmV4cGVyaW1lbnRhbDpjYWxjOnhtbG5zOmNhbGNleHQ6MS4wXCIsXG5cdFx0XHQneG1sbnM6bG9leHQnOiAgICAgICAgXCJ1cm46b3JnOmRvY3VtZW50Zm91bmRhdGlvbjpuYW1lczpleHBlcmltZW50YWw6b2ZmaWNlOnhtbG5zOmxvZXh0OjEuMFwiLFxuXHRcdFx0J3htbG5zOmZpZWxkJzogICAgICAgIFwidXJuOm9wZW5vZmZpY2U6bmFtZXM6ZXhwZXJpbWVudGFsOm9vby1tcy1pbnRlcm9wOnhtbG5zOmZpZWxkOjEuMFwiLFxuXHRcdFx0J3htbG5zOmZvcm14JzogICAgICAgIFwidXJuOm9wZW5vZmZpY2U6bmFtZXM6ZXhwZXJpbWVudGFsOm9veG1sLW9kZi1pbnRlcm9wOnhtbG5zOmZvcm06MS4wXCIsXG5cdFx0XHQneG1sbnM6Y3NzM3QnOiAgICAgICAgXCJodHRwOi8vd3d3LnczLm9yZy9UUi9jc3MzLXRleHQvXCIsXG5cdFx0XHQnb2ZmaWNlOnZlcnNpb24nOiAgICAgXCIxLjJcIlxuXHRcdH0pO1xuXG5cdFx0dmFyIGZvZHMgPSB3eHRfaGVscGVyKHtcblx0XHRcdCd4bWxuczpjb25maWcnOiAgICBcInVybjpvYXNpczpuYW1lczp0YzpvcGVuZG9jdW1lbnQ6eG1sbnM6Y29uZmlnOjEuMFwiLFxuXHRcdFx0J29mZmljZTptaW1ldHlwZSc6IFwiYXBwbGljYXRpb24vdm5kLm9hc2lzLm9wZW5kb2N1bWVudC5zcHJlYWRzaGVldFwiXG5cdFx0fSk7XG5cblx0XHRpZihvcHRzLmJvb2tUeXBlID09IFwiZm9kc1wiKSB7XG5cdFx0XHRvLnB1c2goJzxvZmZpY2U6ZG9jdW1lbnQnICsgYXR0ciArIGZvZHMgKyAnPlxcbicpO1xuXHRcdFx0by5wdXNoKHdyaXRlX21ldGFfb2RzKCkucmVwbGFjZSgvb2ZmaWNlOmRvY3VtZW50LW1ldGEvZywgXCJvZmZpY2U6bWV0YVwiKSk7XG5cdFx0XHQvLyBUT0RPOiBzZXR0aW5ncyAoZXF1aXYgb2Ygc2V0dGluZ3MueG1sIGZvciBPRFMpXG5cdFx0fSBlbHNlIG8ucHVzaCgnPG9mZmljZTpkb2N1bWVudC1jb250ZW50JyArIGF0dHIgICsgJz5cXG4nKTtcblx0XHQvLyBvLnB1c2goJyAgPG9mZmljZTpzY3JpcHRzLz5cXG4nKTtcblx0XHR3cml0ZV9hdXRvbWF0aWNfc3R5bGVzX29kcyhvLCB3Yik7XG5cdFx0by5wdXNoKCcgIDxvZmZpY2U6Ym9keT5cXG4nKTtcblx0XHRvLnB1c2goJyAgICA8b2ZmaWNlOnNwcmVhZHNoZWV0PlxcbicpO1xuXHRcdGZvcih2YXIgaSA9IDA7IGkgIT0gd2IuU2hlZXROYW1lcy5sZW5ndGg7ICsraSkgby5wdXNoKHdyaXRlX3dzKHdiLlNoZWV0c1t3Yi5TaGVldE5hbWVzW2ldXSwgd2IsIGksIG9wdHMpKTtcblx0XHRvLnB1c2goJyAgICA8L29mZmljZTpzcHJlYWRzaGVldD5cXG4nKTtcblx0XHRvLnB1c2goJyAgPC9vZmZpY2U6Ym9keT5cXG4nKTtcblx0XHRpZihvcHRzLmJvb2tUeXBlID09IFwiZm9kc1wiKSBvLnB1c2goJzwvb2ZmaWNlOmRvY3VtZW50PicpO1xuXHRcdGVsc2Ugby5wdXNoKCc8L29mZmljZTpkb2N1bWVudC1jb250ZW50PicpO1xuXHRcdHJldHVybiBvLmpvaW4oXCJcIik7XG5cdH07XG59KSgpO1xuXG5mdW5jdGlvbiB3cml0ZV9vZHMod2IvKjphbnkqLywgb3B0cy8qOmFueSovKSB7XG5cdGlmKG9wdHMuYm9va1R5cGUgPT0gXCJmb2RzXCIpIHJldHVybiB3cml0ZV9jb250ZW50X29kcyh3Yiwgb3B0cyk7XG5cblx0dmFyIHppcCA9IHppcF9uZXcoKTtcblx0dmFyIGYgPSBcIlwiO1xuXG5cdHZhciBtYW5pZmVzdC8qOkFycmF5PEFycmF5PHN0cmluZz4gPiovID0gW107XG5cdHZhciByZGYvKjpBcnJheTxbc3RyaW5nLCBzdHJpbmddPiovID0gW107XG5cblx0LyogUGFydCAzIFNlY3Rpb24gMy4zIE1JTUUgTWVkaWEgVHlwZSAqL1xuXHRmID0gXCJtaW1ldHlwZVwiO1xuXHR6aXBfYWRkX2ZpbGUoemlwLCBmLCBcImFwcGxpY2F0aW9uL3ZuZC5vYXNpcy5vcGVuZG9jdW1lbnQuc3ByZWFkc2hlZXRcIik7XG5cblx0LyogUGFydCAxIFNlY3Rpb24gMi4yIERvY3VtZW50cyAqL1xuXHRmID0gXCJjb250ZW50LnhtbFwiO1xuXHR6aXBfYWRkX2ZpbGUoemlwLCBmLCB3cml0ZV9jb250ZW50X29kcyh3Yiwgb3B0cykpO1xuXHRtYW5pZmVzdC5wdXNoKFtmLCBcInRleHQveG1sXCJdKTtcblx0cmRmLnB1c2goW2YsIFwiQ29udGVudEZpbGVcIl0pO1xuXG5cdC8qIFRPRE86IHRoZXNlIGFyZSBoYXJkLWNvZGVkIHN0eWxlcyB0byBzYXRpYXRlIGV4Y2VsICovXG5cdGYgPSBcInN0eWxlcy54bWxcIjtcblx0emlwX2FkZF9maWxlKHppcCwgZiwgd3JpdGVfc3R5bGVzX29kcyh3Yiwgb3B0cykpO1xuXHRtYW5pZmVzdC5wdXNoKFtmLCBcInRleHQveG1sXCJdKTtcblx0cmRmLnB1c2goW2YsIFwiU3R5bGVzRmlsZVwiXSk7XG5cblx0LyogVE9ETzogdGhpcyBpcyBoYXJkLWNvZGVkIHRvIHNhdGlhdGUgZXhjZWwgKi9cblx0ZiA9IFwibWV0YS54bWxcIjtcblx0emlwX2FkZF9maWxlKHppcCwgZiwgWE1MX0hFQURFUiArIHdyaXRlX21ldGFfb2RzKC8qOjp3Yiwgb3B0cyovKSk7XG5cdG1hbmlmZXN0LnB1c2goW2YsIFwidGV4dC94bWxcIl0pO1xuXHRyZGYucHVzaChbZiwgXCJNZXRhZGF0YUZpbGVcIl0pO1xuXG5cdC8qIFBhcnQgMyBTZWN0aW9uIDYgTWV0YWRhdGEgTWFuaWZlc3QgRmlsZSAqL1xuXHRmID0gXCJtYW5pZmVzdC5yZGZcIjtcblx0emlwX2FkZF9maWxlKHppcCwgZiwgd3JpdGVfcmRmKHJkZi8qLCBvcHRzKi8pKTtcblx0bWFuaWZlc3QucHVzaChbZiwgXCJhcHBsaWNhdGlvbi9yZGYreG1sXCJdKTtcblxuXHQvKiBQYXJ0IDMgU2VjdGlvbiA0IE1hbmlmZXN0IEZpbGUgKi9cblx0ZiA9IFwiTUVUQS1JTkYvbWFuaWZlc3QueG1sXCI7XG5cdHppcF9hZGRfZmlsZSh6aXAsIGYsIHdyaXRlX21hbmlmZXN0KG1hbmlmZXN0LyosIG9wdHMqLykpO1xuXG5cdHJldHVybiB6aXA7XG59XG5cbi8qISBzaGVldGpzIChDKSAyMDEzLXByZXNlbnQgU2hlZXRKUyAtLSBodHRwOi8vc2hlZXRqcy5jb20gKi9cbmZ1bmN0aW9uIHU4X3RvX2RhdGF2aWV3KGFycmF5KSB7XG4gIHJldHVybiBuZXcgRGF0YVZpZXcoYXJyYXkuYnVmZmVyLCBhcnJheS5ieXRlT2Zmc2V0LCBhcnJheS5ieXRlTGVuZ3RoKTtcbn1cbmZ1bmN0aW9uIHU4c3RyKHU4KSB7XG4gIHJldHVybiB0eXBlb2YgVGV4dERlY29kZXIgIT0gXCJ1bmRlZmluZWRcIiA/IG5ldyBUZXh0RGVjb2RlcigpLmRlY29kZSh1OCkgOiB1dGY4cmVhZChhMnModTgpKTtcbn1cbmZ1bmN0aW9uIHN0cnU4KHN0cikge1xuICByZXR1cm4gdHlwZW9mIFRleHRFbmNvZGVyICE9IFwidW5kZWZpbmVkXCIgPyBuZXcgVGV4dEVuY29kZXIoKS5lbmNvZGUoc3RyKSA6IHMyYSh1dGY4d3JpdGUoc3RyKSk7XG59XG5mdW5jdGlvbiB1OGNvbnRhaW5zKGJvZHksIHNlYXJjaCkge1xuICBvdXRlcjpcbiAgICBmb3IgKHZhciBMID0gMDsgTCA8PSBib2R5Lmxlbmd0aCAtIHNlYXJjaC5sZW5ndGg7ICsrTCkge1xuICAgICAgZm9yICh2YXIgaiA9IDA7IGogPCBzZWFyY2gubGVuZ3RoOyArK2opXG4gICAgICAgIGlmIChib2R5W0wgKyBqXSAhPSBzZWFyY2hbal0pXG4gICAgICAgICAgY29udGludWUgb3V0ZXI7XG4gICAgICByZXR1cm4gdHJ1ZTtcbiAgICB9XG4gIHJldHVybiBmYWxzZTtcbn1cbmZ1bmN0aW9uIHU4Y29uY2F0KHU4YSkge1xuICB2YXIgbGVuID0gdThhLnJlZHVjZShmdW5jdGlvbihhY2MsIHgpIHtcbiAgICByZXR1cm4gYWNjICsgeC5sZW5ndGg7XG4gIH0sIDApO1xuICB2YXIgb3V0ID0gbmV3IFVpbnQ4QXJyYXkobGVuKTtcbiAgdmFyIG9mZiA9IDA7XG4gIHU4YS5mb3JFYWNoKGZ1bmN0aW9uKHU4KSB7XG4gICAgb3V0LnNldCh1OCwgb2ZmKTtcbiAgICBvZmYgKz0gdTgubGVuZ3RoO1xuICB9KTtcbiAgcmV0dXJuIG91dDtcbn1cbmZ1bmN0aW9uIHBvcGNudCh4KSB7XG4gIHggLT0geCA+PiAxICYgMTQzMTY1NTc2NTtcbiAgeCA9ICh4ICYgODU4OTkzNDU5KSArICh4ID4+IDIgJiA4NTg5OTM0NTkpO1xuICByZXR1cm4gKHggKyAoeCA+PiA0KSAmIDI1MjY0NTEzNSkgKiAxNjg0MzAwOSA+Pj4gMjQ7XG59XG5mdW5jdGlvbiByZWFkRGVjaW1hbDEyOExFKGJ1Ziwgb2Zmc2V0KSB7XG4gIHZhciBleHAgPSAoYnVmW29mZnNldCArIDE1XSAmIDEyNykgPDwgNyB8IGJ1ZltvZmZzZXQgKyAxNF0gPj4gMTtcbiAgdmFyIG1hbnRpc3NhID0gYnVmW29mZnNldCArIDE0XSAmIDE7XG4gIGZvciAodmFyIGogPSBvZmZzZXQgKyAxMzsgaiA+PSBvZmZzZXQ7IC0tailcbiAgICBtYW50aXNzYSA9IG1hbnRpc3NhICogMjU2ICsgYnVmW2pdO1xuICByZXR1cm4gKGJ1ZltvZmZzZXQgKyAxNV0gJiAxMjggPyAtbWFudGlzc2EgOiBtYW50aXNzYSkgKiBNYXRoLnBvdygxMCwgZXhwIC0gNjE3Nik7XG59XG5mdW5jdGlvbiB3cml0ZURlY2ltYWwxMjhMRShidWYsIG9mZnNldCwgdmFsdWUpIHtcbiAgdmFyIGV4cCA9IE1hdGguZmxvb3IodmFsdWUgPT0gMCA/IDAgOiBNYXRoLkxPRzEwRSAqIE1hdGgubG9nKE1hdGguYWJzKHZhbHVlKSkpICsgNjE3NiAtIDIwO1xuICB2YXIgbWFudGlzc2EgPSB2YWx1ZSAvIE1hdGgucG93KDEwLCBleHAgLSA2MTc2KTtcbiAgYnVmW29mZnNldCArIDE1XSB8PSBleHAgPj4gNztcbiAgYnVmW29mZnNldCArIDE0XSB8PSAoZXhwICYgMTI3KSA8PCAxO1xuICBmb3IgKHZhciBpID0gMDsgbWFudGlzc2EgPj0gMTsgKytpLCBtYW50aXNzYSAvPSAyNTYpXG4gICAgYnVmW29mZnNldCArIGldID0gbWFudGlzc2EgJiAyNTU7XG4gIGJ1ZltvZmZzZXQgKyAxNV0gfD0gdmFsdWUgPj0gMCA/IDAgOiAxMjg7XG59XG5mdW5jdGlvbiBwYXJzZV92YXJpbnQ0OShidWYsIHB0cikge1xuICB2YXIgbCA9IHB0ciA/IHB0clswXSA6IDA7XG4gIHZhciB1c3ogPSBidWZbbF0gJiAxMjc7XG4gIHZhcmludDpcbiAgICBpZiAoYnVmW2wrK10gPj0gMTI4KSB7XG4gICAgICB1c3ogfD0gKGJ1ZltsXSAmIDEyNykgPDwgNztcbiAgICAgIGlmIChidWZbbCsrXSA8IDEyOClcbiAgICAgICAgYnJlYWsgdmFyaW50O1xuICAgICAgdXN6IHw9IChidWZbbF0gJiAxMjcpIDw8IDE0O1xuICAgICAgaWYgKGJ1ZltsKytdIDwgMTI4KVxuICAgICAgICBicmVhayB2YXJpbnQ7XG4gICAgICB1c3ogfD0gKGJ1ZltsXSAmIDEyNykgPDwgMjE7XG4gICAgICBpZiAoYnVmW2wrK10gPCAxMjgpXG4gICAgICAgIGJyZWFrIHZhcmludDtcbiAgICAgIHVzeiArPSAoYnVmW2xdICYgMTI3KSAqIE1hdGgucG93KDIsIDI4KTtcbiAgICAgICsrbDtcbiAgICAgIGlmIChidWZbbCsrXSA8IDEyOClcbiAgICAgICAgYnJlYWsgdmFyaW50O1xuICAgICAgdXN6ICs9IChidWZbbF0gJiAxMjcpICogTWF0aC5wb3coMiwgMzUpO1xuICAgICAgKytsO1xuICAgICAgaWYgKGJ1ZltsKytdIDwgMTI4KVxuICAgICAgICBicmVhayB2YXJpbnQ7XG4gICAgICB1c3ogKz0gKGJ1ZltsXSAmIDEyNykgKiBNYXRoLnBvdygyLCA0Mik7XG4gICAgICArK2w7XG4gICAgICBpZiAoYnVmW2wrK10gPCAxMjgpXG4gICAgICAgIGJyZWFrIHZhcmludDtcbiAgICB9XG4gIGlmIChwdHIpXG4gICAgcHRyWzBdID0gbDtcbiAgcmV0dXJuIHVzejtcbn1cbmZ1bmN0aW9uIHdyaXRlX3ZhcmludDQ5KHYpIHtcbiAgdmFyIHVzeiA9IG5ldyBVaW50OEFycmF5KDcpO1xuICB1c3pbMF0gPSB2ICYgMTI3O1xuICB2YXIgTCA9IDE7XG4gIHN6OlxuICAgIGlmICh2ID4gMTI3KSB7XG4gICAgICB1c3pbTCAtIDFdIHw9IDEyODtcbiAgICAgIHVzeltMXSA9IHYgPj4gNyAmIDEyNztcbiAgICAgICsrTDtcbiAgICAgIGlmICh2IDw9IDE2MzgzKVxuICAgICAgICBicmVhayBzejtcbiAgICAgIHVzeltMIC0gMV0gfD0gMTI4O1xuICAgICAgdXN6W0xdID0gdiA+PiAxNCAmIDEyNztcbiAgICAgICsrTDtcbiAgICAgIGlmICh2IDw9IDIwOTcxNTEpXG4gICAgICAgIGJyZWFrIHN6O1xuICAgICAgdXN6W0wgLSAxXSB8PSAxMjg7XG4gICAgICB1c3pbTF0gPSB2ID4+IDIxICYgMTI3O1xuICAgICAgKytMO1xuICAgICAgaWYgKHYgPD0gMjY4NDM1NDU1KVxuICAgICAgICBicmVhayBzejtcbiAgICAgIHVzeltMIC0gMV0gfD0gMTI4O1xuICAgICAgdXN6W0xdID0gdiAvIDI1NiA+Pj4gMjEgJiAxMjc7XG4gICAgICArK0w7XG4gICAgICBpZiAodiA8PSAzNDM1OTczODM2NylcbiAgICAgICAgYnJlYWsgc3o7XG4gICAgICB1c3pbTCAtIDFdIHw9IDEyODtcbiAgICAgIHVzeltMXSA9IHYgLyA2NTUzNiA+Pj4gMjEgJiAxMjc7XG4gICAgICArK0w7XG4gICAgICBpZiAodiA8PSA0Mzk4MDQ2NTExMTAzKVxuICAgICAgICBicmVhayBzejtcbiAgICAgIHVzeltMIC0gMV0gfD0gMTI4O1xuICAgICAgdXN6W0xdID0gdiAvIDE2Nzc3MjE2ID4+PiAyMSAmIDEyNztcbiAgICAgICsrTDtcbiAgICB9XG4gIHJldHVybiB1c3ouc2xpY2UoMCwgTCk7XG59XG5mdW5jdGlvbiB2YXJpbnRfdG9faTMyKGJ1Zikge1xuICB2YXIgbCA9IDAsIGkzMiA9IGJ1ZltsXSAmIDEyNztcbiAgdmFyaW50OlxuICAgIGlmIChidWZbbCsrXSA+PSAxMjgpIHtcbiAgICAgIGkzMiB8PSAoYnVmW2xdICYgMTI3KSA8PCA3O1xuICAgICAgaWYgKGJ1ZltsKytdIDwgMTI4KVxuICAgICAgICBicmVhayB2YXJpbnQ7XG4gICAgICBpMzIgfD0gKGJ1ZltsXSAmIDEyNykgPDwgMTQ7XG4gICAgICBpZiAoYnVmW2wrK10gPCAxMjgpXG4gICAgICAgIGJyZWFrIHZhcmludDtcbiAgICAgIGkzMiB8PSAoYnVmW2xdICYgMTI3KSA8PCAyMTtcbiAgICAgIGlmIChidWZbbCsrXSA8IDEyOClcbiAgICAgICAgYnJlYWsgdmFyaW50O1xuICAgICAgaTMyIHw9IChidWZbbF0gJiAxMjcpIDw8IDI4O1xuICAgIH1cbiAgcmV0dXJuIGkzMjtcbn1cbmZ1bmN0aW9uIHBhcnNlX3NoYWxsb3coYnVmKSB7XG4gIHZhciBvdXQgPSBbXSwgcHRyID0gWzBdO1xuICB3aGlsZSAocHRyWzBdIDwgYnVmLmxlbmd0aCkge1xuICAgIHZhciBvZmYgPSBwdHJbMF07XG4gICAgdmFyIG51bSA9IHBhcnNlX3ZhcmludDQ5KGJ1ZiwgcHRyKTtcbiAgICB2YXIgdHlwZSA9IG51bSAmIDc7XG4gICAgbnVtID0gTWF0aC5mbG9vcihudW0gLyA4KTtcbiAgICB2YXIgbGVuID0gMDtcbiAgICB2YXIgcmVzO1xuICAgIGlmIChudW0gPT0gMClcbiAgICAgIGJyZWFrO1xuICAgIHN3aXRjaCAodHlwZSkge1xuICAgICAgY2FzZSAwOlxuICAgICAgICB7XG4gICAgICAgICAgdmFyIGwgPSBwdHJbMF07XG4gICAgICAgICAgd2hpbGUgKGJ1ZltwdHJbMF0rK10gPj0gMTI4KVxuICAgICAgICAgICAgO1xuICAgICAgICAgIHJlcyA9IGJ1Zi5zbGljZShsLCBwdHJbMF0pO1xuICAgICAgICB9XG4gICAgICAgIGJyZWFrO1xuICAgICAgY2FzZSA1OlxuICAgICAgICBsZW4gPSA0O1xuICAgICAgICByZXMgPSBidWYuc2xpY2UocHRyWzBdLCBwdHJbMF0gKyBsZW4pO1xuICAgICAgICBwdHJbMF0gKz0gbGVuO1xuICAgICAgICBicmVhaztcbiAgICAgIGNhc2UgMTpcbiAgICAgICAgbGVuID0gODtcbiAgICAgICAgcmVzID0gYnVmLnNsaWNlKHB0clswXSwgcHRyWzBdICsgbGVuKTtcbiAgICAgICAgcHRyWzBdICs9IGxlbjtcbiAgICAgICAgYnJlYWs7XG4gICAgICBjYXNlIDI6XG4gICAgICAgIGxlbiA9IHBhcnNlX3ZhcmludDQ5KGJ1ZiwgcHRyKTtcbiAgICAgICAgcmVzID0gYnVmLnNsaWNlKHB0clswXSwgcHRyWzBdICsgbGVuKTtcbiAgICAgICAgcHRyWzBdICs9IGxlbjtcbiAgICAgICAgYnJlYWs7XG4gICAgICBjYXNlIDM6XG4gICAgICBjYXNlIDQ6XG4gICAgICBkZWZhdWx0OlxuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoXCJQQiBUeXBlIFwiLmNvbmNhdCh0eXBlLCBcIiBmb3IgRmllbGQgXCIpLmNvbmNhdChudW0sIFwiIGF0IG9mZnNldCBcIikuY29uY2F0KG9mZikpO1xuICAgIH1cbiAgICB2YXIgdiA9IHsgZGF0YTogcmVzLCB0eXBlOiB0eXBlIH07XG4gICAgaWYgKG91dFtudW1dID09IG51bGwpXG4gICAgICBvdXRbbnVtXSA9IFt2XTtcbiAgICBlbHNlXG4gICAgICBvdXRbbnVtXS5wdXNoKHYpO1xuICB9XG4gIHJldHVybiBvdXQ7XG59XG5mdW5jdGlvbiB3cml0ZV9zaGFsbG93KHByb3RvKSB7XG4gIHZhciBvdXQgPSBbXTtcbiAgcHJvdG8uZm9yRWFjaChmdW5jdGlvbihmaWVsZCwgaWR4KSB7XG4gICAgZmllbGQuZm9yRWFjaChmdW5jdGlvbihpdGVtKSB7XG4gICAgICBpZiAoIWl0ZW0uZGF0YSlcbiAgICAgICAgcmV0dXJuO1xuICAgICAgb3V0LnB1c2god3JpdGVfdmFyaW50NDkoaWR4ICogOCArIGl0ZW0udHlwZSkpO1xuICAgICAgaWYgKGl0ZW0udHlwZSA9PSAyKVxuICAgICAgICBvdXQucHVzaCh3cml0ZV92YXJpbnQ0OShpdGVtLmRhdGEubGVuZ3RoKSk7XG4gICAgICBvdXQucHVzaChpdGVtLmRhdGEpO1xuICAgIH0pO1xuICB9KTtcbiAgcmV0dXJuIHU4Y29uY2F0KG91dCk7XG59XG5mdW5jdGlvbiBtYXBwYShkYXRhLCBjYikge1xuICByZXR1cm4gKGRhdGEgPT0gbnVsbCA/IHZvaWQgMCA6IGRhdGEubWFwKGZ1bmN0aW9uKGQpIHtcbiAgICByZXR1cm4gY2IoZC5kYXRhKTtcbiAgfSkpIHx8IFtdO1xufVxuZnVuY3Rpb24gcGFyc2VfaXdhX2ZpbGUoYnVmKSB7XG4gIHZhciBfYTtcbiAgdmFyIG91dCA9IFtdLCBwdHIgPSBbMF07XG4gIHdoaWxlIChwdHJbMF0gPCBidWYubGVuZ3RoKSB7XG4gICAgdmFyIGxlbiA9IHBhcnNlX3ZhcmludDQ5KGJ1ZiwgcHRyKTtcbiAgICB2YXIgYWkgPSBwYXJzZV9zaGFsbG93KGJ1Zi5zbGljZShwdHJbMF0sIHB0clswXSArIGxlbikpO1xuICAgIHB0clswXSArPSBsZW47XG4gICAgdmFyIHJlcyA9IHtcbiAgICAgIGlkOiB2YXJpbnRfdG9faTMyKGFpWzFdWzBdLmRhdGEpLFxuICAgICAgbWVzc2FnZXM6IFtdXG4gICAgfTtcbiAgICBhaVsyXS5mb3JFYWNoKGZ1bmN0aW9uKGIpIHtcbiAgICAgIHZhciBtaSA9IHBhcnNlX3NoYWxsb3coYi5kYXRhKTtcbiAgICAgIHZhciBmbCA9IHZhcmludF90b19pMzIobWlbM11bMF0uZGF0YSk7XG4gICAgICByZXMubWVzc2FnZXMucHVzaCh7XG4gICAgICAgIG1ldGE6IG1pLFxuICAgICAgICBkYXRhOiBidWYuc2xpY2UocHRyWzBdLCBwdHJbMF0gKyBmbClcbiAgICAgIH0pO1xuICAgICAgcHRyWzBdICs9IGZsO1xuICAgIH0pO1xuICAgIGlmICgoX2EgPSBhaVszXSkgPT0gbnVsbCA/IHZvaWQgMCA6IF9hWzBdKVxuICAgICAgcmVzLm1lcmdlID0gdmFyaW50X3RvX2kzMihhaVszXVswXS5kYXRhKSA+Pj4gMCA+IDA7XG4gICAgb3V0LnB1c2gocmVzKTtcbiAgfVxuICByZXR1cm4gb3V0O1xufVxuZnVuY3Rpb24gd3JpdGVfaXdhX2ZpbGUoaWFzKSB7XG4gIHZhciBidWZzID0gW107XG4gIGlhcy5mb3JFYWNoKGZ1bmN0aW9uKGlhKSB7XG4gICAgdmFyIGFpID0gW107XG4gICAgYWlbMV0gPSBbeyBkYXRhOiB3cml0ZV92YXJpbnQ0OShpYS5pZCksIHR5cGU6IDAgfV07XG4gICAgYWlbMl0gPSBbXTtcbiAgICBpZiAoaWEubWVyZ2UgIT0gbnVsbClcbiAgICAgIGFpWzNdID0gW3sgZGF0YTogd3JpdGVfdmFyaW50NDkoKyEhaWEubWVyZ2UpLCB0eXBlOiAwIH1dO1xuICAgIHZhciBtaWRhdGEgPSBbXTtcbiAgICBpYS5tZXNzYWdlcy5mb3JFYWNoKGZ1bmN0aW9uKG1pKSB7XG4gICAgICBtaWRhdGEucHVzaChtaS5kYXRhKTtcbiAgICAgIG1pLm1ldGFbM10gPSBbeyB0eXBlOiAwLCBkYXRhOiB3cml0ZV92YXJpbnQ0OShtaS5kYXRhLmxlbmd0aCkgfV07XG4gICAgICBhaVsyXS5wdXNoKHsgZGF0YTogd3JpdGVfc2hhbGxvdyhtaS5tZXRhKSwgdHlwZTogMiB9KTtcbiAgICB9KTtcbiAgICB2YXIgYWlwYXlsb2FkID0gd3JpdGVfc2hhbGxvdyhhaSk7XG4gICAgYnVmcy5wdXNoKHdyaXRlX3ZhcmludDQ5KGFpcGF5bG9hZC5sZW5ndGgpKTtcbiAgICBidWZzLnB1c2goYWlwYXlsb2FkKTtcbiAgICBtaWRhdGEuZm9yRWFjaChmdW5jdGlvbihtaWQpIHtcbiAgICAgIHJldHVybiBidWZzLnB1c2gobWlkKTtcbiAgICB9KTtcbiAgfSk7XG4gIHJldHVybiB1OGNvbmNhdChidWZzKTtcbn1cbmZ1bmN0aW9uIHBhcnNlX3NuYXBweV9jaHVuayh0eXBlLCBidWYpIHtcbiAgaWYgKHR5cGUgIT0gMClcbiAgICB0aHJvdyBuZXcgRXJyb3IoXCJVbmV4cGVjdGVkIFNuYXBweSBjaHVuayB0eXBlIFwiLmNvbmNhdCh0eXBlKSk7XG4gIHZhciBwdHIgPSBbMF07XG4gIHZhciB1c3ogPSBwYXJzZV92YXJpbnQ0OShidWYsIHB0cik7XG4gIHZhciBjaHVua3MgPSBbXTtcbiAgd2hpbGUgKHB0clswXSA8IGJ1Zi5sZW5ndGgpIHtcbiAgICB2YXIgdGFnID0gYnVmW3B0clswXV0gJiAzO1xuICAgIGlmICh0YWcgPT0gMCkge1xuICAgICAgdmFyIGxlbiA9IGJ1ZltwdHJbMF0rK10gPj4gMjtcbiAgICAgIGlmIChsZW4gPCA2MClcbiAgICAgICAgKytsZW47XG4gICAgICBlbHNlIHtcbiAgICAgICAgdmFyIGMgPSBsZW4gLSA1OTtcbiAgICAgICAgbGVuID0gYnVmW3B0clswXV07XG4gICAgICAgIGlmIChjID4gMSlcbiAgICAgICAgICBsZW4gfD0gYnVmW3B0clswXSArIDFdIDw8IDg7XG4gICAgICAgIGlmIChjID4gMilcbiAgICAgICAgICBsZW4gfD0gYnVmW3B0clswXSArIDJdIDw8IDE2O1xuICAgICAgICBpZiAoYyA+IDMpXG4gICAgICAgICAgbGVuIHw9IGJ1ZltwdHJbMF0gKyAzXSA8PCAyNDtcbiAgICAgICAgbGVuID4+Pj0gMDtcbiAgICAgICAgbGVuKys7XG4gICAgICAgIHB0clswXSArPSBjO1xuICAgICAgfVxuICAgICAgY2h1bmtzLnB1c2goYnVmLnNsaWNlKHB0clswXSwgcHRyWzBdICsgbGVuKSk7XG4gICAgICBwdHJbMF0gKz0gbGVuO1xuICAgICAgY29udGludWU7XG4gICAgfSBlbHNlIHtcbiAgICAgIHZhciBvZmZzZXQgPSAwLCBsZW5ndGggPSAwO1xuICAgICAgaWYgKHRhZyA9PSAxKSB7XG4gICAgICAgIGxlbmd0aCA9IChidWZbcHRyWzBdXSA+PiAyICYgNykgKyA0O1xuICAgICAgICBvZmZzZXQgPSAoYnVmW3B0clswXSsrXSAmIDIyNCkgPDwgMztcbiAgICAgICAgb2Zmc2V0IHw9IGJ1ZltwdHJbMF0rK107XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBsZW5ndGggPSAoYnVmW3B0clswXSsrXSA+PiAyKSArIDE7XG4gICAgICAgIGlmICh0YWcgPT0gMikge1xuICAgICAgICAgIG9mZnNldCA9IGJ1ZltwdHJbMF1dIHwgYnVmW3B0clswXSArIDFdIDw8IDg7XG4gICAgICAgICAgcHRyWzBdICs9IDI7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgb2Zmc2V0ID0gKGJ1ZltwdHJbMF1dIHwgYnVmW3B0clswXSArIDFdIDw8IDggfCBidWZbcHRyWzBdICsgMl0gPDwgMTYgfCBidWZbcHRyWzBdICsgM10gPDwgMjQpID4+PiAwO1xuICAgICAgICAgIHB0clswXSArPSA0O1xuICAgICAgICB9XG4gICAgICB9XG4gICAgICBjaHVua3MgPSBbdThjb25jYXQoY2h1bmtzKV07XG4gICAgICBpZiAob2Zmc2V0ID09IDApXG4gICAgICAgIHRocm93IG5ldyBFcnJvcihcIkludmFsaWQgb2Zmc2V0IDBcIik7XG4gICAgICBpZiAob2Zmc2V0ID4gY2h1bmtzWzBdLmxlbmd0aClcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKFwiSW52YWxpZCBvZmZzZXQgYmV5b25kIGxlbmd0aFwiKTtcbiAgICAgIGlmIChsZW5ndGggPj0gb2Zmc2V0KSB7XG4gICAgICAgIGNodW5rcy5wdXNoKGNodW5rc1swXS5zbGljZSgtb2Zmc2V0KSk7XG4gICAgICAgIGxlbmd0aCAtPSBvZmZzZXQ7XG4gICAgICAgIHdoaWxlIChsZW5ndGggPj0gY2h1bmtzW2NodW5rcy5sZW5ndGggLSAxXS5sZW5ndGgpIHtcbiAgICAgICAgICBjaHVua3MucHVzaChjaHVua3NbY2h1bmtzLmxlbmd0aCAtIDFdKTtcbiAgICAgICAgICBsZW5ndGggLT0gY2h1bmtzW2NodW5rcy5sZW5ndGggLSAxXS5sZW5ndGg7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIGNodW5rcy5wdXNoKGNodW5rc1swXS5zbGljZSgtb2Zmc2V0LCAtb2Zmc2V0ICsgbGVuZ3RoKSk7XG4gICAgfVxuICB9XG4gIHZhciBvID0gdThjb25jYXQoY2h1bmtzKTtcbiAgaWYgKG8ubGVuZ3RoICE9IHVzeilcbiAgICB0aHJvdyBuZXcgRXJyb3IoXCJVbmV4cGVjdGVkIGxlbmd0aDogXCIuY29uY2F0KG8ubGVuZ3RoLCBcIiAhPSBcIikuY29uY2F0KHVzeikpO1xuICByZXR1cm4gbztcbn1cbmZ1bmN0aW9uIGRlY29tcHJlc3NfaXdhX2ZpbGUoYnVmKSB7XG4gIHZhciBvdXQgPSBbXTtcbiAgdmFyIGwgPSAwO1xuICB3aGlsZSAobCA8IGJ1Zi5sZW5ndGgpIHtcbiAgICB2YXIgdCA9IGJ1ZltsKytdO1xuICAgIHZhciBsZW4gPSBidWZbbF0gfCBidWZbbCArIDFdIDw8IDggfCBidWZbbCArIDJdIDw8IDE2O1xuICAgIGwgKz0gMztcbiAgICBvdXQucHVzaChwYXJzZV9zbmFwcHlfY2h1bmsodCwgYnVmLnNsaWNlKGwsIGwgKyBsZW4pKSk7XG4gICAgbCArPSBsZW47XG4gIH1cbiAgaWYgKGwgIT09IGJ1Zi5sZW5ndGgpXG4gICAgdGhyb3cgbmV3IEVycm9yKFwiZGF0YSBpcyBub3QgYSB2YWxpZCBmcmFtZWQgc3RyZWFtIVwiKTtcbiAgcmV0dXJuIHU4Y29uY2F0KG91dCk7XG59XG5mdW5jdGlvbiBjb21wcmVzc19pd2FfZmlsZShidWYpIHtcbiAgdmFyIG91dCA9IFtdO1xuICB2YXIgbCA9IDA7XG4gIHdoaWxlIChsIDwgYnVmLmxlbmd0aCkge1xuICAgIHZhciBjID0gTWF0aC5taW4oYnVmLmxlbmd0aCAtIGwsIDI2ODQzNTQ1NSk7XG4gICAgdmFyIGZyYW1lID0gbmV3IFVpbnQ4QXJyYXkoNCk7XG4gICAgb3V0LnB1c2goZnJhbWUpO1xuICAgIHZhciB1c3ogPSB3cml0ZV92YXJpbnQ0OShjKTtcbiAgICB2YXIgTCA9IHVzei5sZW5ndGg7XG4gICAgb3V0LnB1c2godXN6KTtcbiAgICBpZiAoYyA8PSA2MCkge1xuICAgICAgTCsrO1xuICAgICAgb3V0LnB1c2gobmV3IFVpbnQ4QXJyYXkoW2MgLSAxIDw8IDJdKSk7XG4gICAgfSBlbHNlIGlmIChjIDw9IDI1Nikge1xuICAgICAgTCArPSAyO1xuICAgICAgb3V0LnB1c2gobmV3IFVpbnQ4QXJyYXkoWzI0MCwgYyAtIDEgJiAyNTVdKSk7XG4gICAgfSBlbHNlIGlmIChjIDw9IDY1NTM2KSB7XG4gICAgICBMICs9IDM7XG4gICAgICBvdXQucHVzaChuZXcgVWludDhBcnJheShbMjQ0LCBjIC0gMSAmIDI1NSwgYyAtIDEgPj4gOCAmIDI1NV0pKTtcbiAgICB9IGVsc2UgaWYgKGMgPD0gMTY3NzcyMTYpIHtcbiAgICAgIEwgKz0gNDtcbiAgICAgIG91dC5wdXNoKG5ldyBVaW50OEFycmF5KFsyNDgsIGMgLSAxICYgMjU1LCBjIC0gMSA+PiA4ICYgMjU1LCBjIC0gMSA+PiAxNiAmIDI1NV0pKTtcbiAgICB9IGVsc2UgaWYgKGMgPD0gNDI5NDk2NzI5Nikge1xuICAgICAgTCArPSA1O1xuICAgICAgb3V0LnB1c2gobmV3IFVpbnQ4QXJyYXkoWzI1MiwgYyAtIDEgJiAyNTUsIGMgLSAxID4+IDggJiAyNTUsIGMgLSAxID4+IDE2ICYgMjU1LCBjIC0gMSA+Pj4gMjQgJiAyNTVdKSk7XG4gICAgfVxuICAgIG91dC5wdXNoKGJ1Zi5zbGljZShsLCBsICsgYykpO1xuICAgIEwgKz0gYztcbiAgICBmcmFtZVswXSA9IDA7XG4gICAgZnJhbWVbMV0gPSBMICYgMjU1O1xuICAgIGZyYW1lWzJdID0gTCA+PiA4ICYgMjU1O1xuICAgIGZyYW1lWzNdID0gTCA+PiAxNiAmIDI1NTtcbiAgICBsICs9IGM7XG4gIH1cbiAgcmV0dXJuIHU4Y29uY2F0KG91dCk7XG59XG5mdW5jdGlvbiBwYXJzZV9vbGRfc3RvcmFnZShidWYsIHNzdCwgcnNzdCwgdikge1xuICB2YXIgZHYgPSB1OF90b19kYXRhdmlldyhidWYpO1xuICB2YXIgZmxhZ3MgPSBkdi5nZXRVaW50MzIoNCwgdHJ1ZSk7XG4gIHZhciBkYXRhX29mZnNldCA9ICh2ID4gMSA/IDEyIDogOCkgKyBwb3BjbnQoZmxhZ3MgJiAodiA+IDEgPyAzNDcwIDogMzk4KSkgKiA0O1xuICB2YXIgcmlkeCA9IC0xLCBzaWR4ID0gLTEsIGllZWUgPSBOYU4sIGR0ID0gbmV3IERhdGUoMjAwMSwgMCwgMSk7XG4gIGlmIChmbGFncyAmIDUxMikge1xuICAgIHJpZHggPSBkdi5nZXRVaW50MzIoZGF0YV9vZmZzZXQsIHRydWUpO1xuICAgIGRhdGFfb2Zmc2V0ICs9IDQ7XG4gIH1cbiAgZGF0YV9vZmZzZXQgKz0gcG9wY250KGZsYWdzICYgKHYgPiAxID8gMTIyODggOiA0MDk2KSkgKiA0O1xuICBpZiAoZmxhZ3MgJiAxNikge1xuICAgIHNpZHggPSBkdi5nZXRVaW50MzIoZGF0YV9vZmZzZXQsIHRydWUpO1xuICAgIGRhdGFfb2Zmc2V0ICs9IDQ7XG4gIH1cbiAgaWYgKGZsYWdzICYgMzIpIHtcbiAgICBpZWVlID0gZHYuZ2V0RmxvYXQ2NChkYXRhX29mZnNldCwgdHJ1ZSk7XG4gICAgZGF0YV9vZmZzZXQgKz0gODtcbiAgfVxuICBpZiAoZmxhZ3MgJiA2NCkge1xuICAgIGR0LnNldFRpbWUoZHQuZ2V0VGltZSgpICsgZHYuZ2V0RmxvYXQ2NChkYXRhX29mZnNldCwgdHJ1ZSkgKiAxZTMpO1xuICAgIGRhdGFfb2Zmc2V0ICs9IDg7XG4gIH1cbiAgdmFyIHJldDtcbiAgc3dpdGNoIChidWZbMl0pIHtcbiAgICBjYXNlIDA6XG4gICAgICBicmVhaztcbiAgICBjYXNlIDI6XG4gICAgICByZXQgPSB7IHQ6IFwiblwiLCB2OiBpZWVlIH07XG4gICAgICBicmVhaztcbiAgICBjYXNlIDM6XG4gICAgICByZXQgPSB7IHQ6IFwic1wiLCB2OiBzc3Rbc2lkeF0gfTtcbiAgICAgIGJyZWFrO1xuICAgIGNhc2UgNTpcbiAgICAgIHJldCA9IHsgdDogXCJkXCIsIHY6IGR0IH07XG4gICAgICBicmVhaztcbiAgICBjYXNlIDY6XG4gICAgICByZXQgPSB7IHQ6IFwiYlwiLCB2OiBpZWVlID4gMCB9O1xuICAgICAgYnJlYWs7XG4gICAgY2FzZSA3OlxuICAgICAgcmV0ID0geyB0OiBcIm5cIiwgdjogaWVlZSAvIDg2NDAwIH07XG4gICAgICBicmVhaztcbiAgICBjYXNlIDg6XG4gICAgICByZXQgPSB7IHQ6IFwiZVwiLCB2OiAwIH07XG4gICAgICBicmVhaztcbiAgICBjYXNlIDk6XG4gICAgICB7XG4gICAgICAgIGlmIChyaWR4ID4gLTEpXG4gICAgICAgICAgcmV0ID0geyB0OiBcInNcIiwgdjogcnNzdFtyaWR4XSB9O1xuICAgICAgICBlbHNlIGlmIChzaWR4ID4gLTEpXG4gICAgICAgICAgcmV0ID0geyB0OiBcInNcIiwgdjogc3N0W3NpZHhdIH07XG4gICAgICAgIGVsc2UgaWYgKCFpc05hTihpZWVlKSlcbiAgICAgICAgICByZXQgPSB7IHQ6IFwiblwiLCB2OiBpZWVlIH07XG4gICAgICAgIGVsc2VcbiAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoXCJVbnN1cHBvcnRlZCBjZWxsIHR5cGUgXCIuY29uY2F0KGJ1Zi5zbGljZSgwLCA0KSkpO1xuICAgICAgfVxuICAgICAgYnJlYWs7XG4gICAgZGVmYXVsdDpcbiAgICAgIHRocm93IG5ldyBFcnJvcihcIlVuc3VwcG9ydGVkIGNlbGwgdHlwZSBcIi5jb25jYXQoYnVmLnNsaWNlKDAsIDQpKSk7XG4gIH1cbiAgcmV0dXJuIHJldDtcbn1cbmZ1bmN0aW9uIHBhcnNlX25ld19zdG9yYWdlKGJ1Ziwgc3N0LCByc3N0KSB7XG4gIHZhciBkdiA9IHU4X3RvX2RhdGF2aWV3KGJ1Zik7XG4gIHZhciBmbGFncyA9IGR2LmdldFVpbnQzMig4LCB0cnVlKTtcbiAgdmFyIGRhdGFfb2Zmc2V0ID0gMTI7XG4gIHZhciByaWR4ID0gLTEsIHNpZHggPSAtMSwgZDEyOCA9IE5hTiwgaWVlZSA9IE5hTiwgZHQgPSBuZXcgRGF0ZSgyMDAxLCAwLCAxKTtcbiAgaWYgKGZsYWdzICYgMSkge1xuICAgIGQxMjggPSByZWFkRGVjaW1hbDEyOExFKGJ1ZiwgZGF0YV9vZmZzZXQpO1xuICAgIGRhdGFfb2Zmc2V0ICs9IDE2O1xuICB9XG4gIGlmIChmbGFncyAmIDIpIHtcbiAgICBpZWVlID0gZHYuZ2V0RmxvYXQ2NChkYXRhX29mZnNldCwgdHJ1ZSk7XG4gICAgZGF0YV9vZmZzZXQgKz0gODtcbiAgfVxuICBpZiAoZmxhZ3MgJiA0KSB7XG4gICAgZHQuc2V0VGltZShkdC5nZXRUaW1lKCkgKyBkdi5nZXRGbG9hdDY0KGRhdGFfb2Zmc2V0LCB0cnVlKSAqIDFlMyk7XG4gICAgZGF0YV9vZmZzZXQgKz0gODtcbiAgfVxuICBpZiAoZmxhZ3MgJiA4KSB7XG4gICAgc2lkeCA9IGR2LmdldFVpbnQzMihkYXRhX29mZnNldCwgdHJ1ZSk7XG4gICAgZGF0YV9vZmZzZXQgKz0gNDtcbiAgfVxuICBpZiAoZmxhZ3MgJiAxNikge1xuICAgIHJpZHggPSBkdi5nZXRVaW50MzIoZGF0YV9vZmZzZXQsIHRydWUpO1xuICAgIGRhdGFfb2Zmc2V0ICs9IDQ7XG4gIH1cbiAgdmFyIHJldDtcbiAgc3dpdGNoIChidWZbMV0pIHtcbiAgICBjYXNlIDA6XG4gICAgICBicmVhaztcbiAgICBjYXNlIDI6XG4gICAgICByZXQgPSB7IHQ6IFwiblwiLCB2OiBkMTI4IH07XG4gICAgICBicmVhaztcbiAgICBjYXNlIDM6XG4gICAgICByZXQgPSB7IHQ6IFwic1wiLCB2OiBzc3Rbc2lkeF0gfTtcbiAgICAgIGJyZWFrO1xuICAgIGNhc2UgNTpcbiAgICAgIHJldCA9IHsgdDogXCJkXCIsIHY6IGR0IH07XG4gICAgICBicmVhaztcbiAgICBjYXNlIDY6XG4gICAgICByZXQgPSB7IHQ6IFwiYlwiLCB2OiBpZWVlID4gMCB9O1xuICAgICAgYnJlYWs7XG4gICAgY2FzZSA3OlxuICAgICAgcmV0ID0geyB0OiBcIm5cIiwgdjogaWVlZSAvIDg2NDAwIH07XG4gICAgICBicmVhaztcbiAgICBjYXNlIDg6XG4gICAgICByZXQgPSB7IHQ6IFwiZVwiLCB2OiAwIH07XG4gICAgICBicmVhaztcbiAgICBjYXNlIDk6XG4gICAgICB7XG4gICAgICAgIGlmIChyaWR4ID4gLTEpXG4gICAgICAgICAgcmV0ID0geyB0OiBcInNcIiwgdjogcnNzdFtyaWR4XSB9O1xuICAgICAgICBlbHNlXG4gICAgICAgICAgdGhyb3cgbmV3IEVycm9yKFwiVW5zdXBwb3J0ZWQgY2VsbCB0eXBlIFwiLmNvbmNhdChidWZbMV0sIFwiIDogXCIpLmNvbmNhdChmbGFncyAmIDMxLCBcIiA6IFwiKS5jb25jYXQoYnVmLnNsaWNlKDAsIDQpKSk7XG4gICAgICB9XG4gICAgICBicmVhaztcbiAgICBjYXNlIDEwOlxuICAgICAgcmV0ID0geyB0OiBcIm5cIiwgdjogZDEyOCB9O1xuICAgICAgYnJlYWs7XG4gICAgZGVmYXVsdDpcbiAgICAgIHRocm93IG5ldyBFcnJvcihcIlVuc3VwcG9ydGVkIGNlbGwgdHlwZSBcIi5jb25jYXQoYnVmWzFdLCBcIiA6IFwiKS5jb25jYXQoZmxhZ3MgJiAzMSwgXCIgOiBcIikuY29uY2F0KGJ1Zi5zbGljZSgwLCA0KSkpO1xuICB9XG4gIHJldHVybiByZXQ7XG59XG5mdW5jdGlvbiB3cml0ZV9uZXdfc3RvcmFnZShjZWxsLCBzc3QpIHtcbiAgdmFyIG91dCA9IG5ldyBVaW50OEFycmF5KDMyKSwgZHYgPSB1OF90b19kYXRhdmlldyhvdXQpLCBsID0gMTIsIGZsYWdzID0gMDtcbiAgb3V0WzBdID0gNTtcbiAgc3dpdGNoIChjZWxsLnQpIHtcbiAgICBjYXNlIFwiblwiOlxuICAgICAgb3V0WzFdID0gMjtcbiAgICAgIHdyaXRlRGVjaW1hbDEyOExFKG91dCwgbCwgY2VsbC52KTtcbiAgICAgIGZsYWdzIHw9IDE7XG4gICAgICBsICs9IDE2O1xuICAgICAgYnJlYWs7XG4gICAgY2FzZSBcImJcIjpcbiAgICAgIG91dFsxXSA9IDY7XG4gICAgICBkdi5zZXRGbG9hdDY0KGwsIGNlbGwudiA/IDEgOiAwLCB0cnVlKTtcbiAgICAgIGZsYWdzIHw9IDI7XG4gICAgICBsICs9IDg7XG4gICAgICBicmVhaztcbiAgICBjYXNlIFwic1wiOlxuICAgICAgaWYgKHNzdC5pbmRleE9mKGNlbGwudikgPT0gLTEpXG4gICAgICAgIHRocm93IG5ldyBFcnJvcihcIlZhbHVlIFwiLmNvbmNhdChjZWxsLnYsIFwiIG1pc3NpbmcgZnJvbSBTU1QhXCIpKTtcbiAgICAgIG91dFsxXSA9IDM7XG4gICAgICBkdi5zZXRVaW50MzIobCwgc3N0LmluZGV4T2YoY2VsbC52KSwgdHJ1ZSk7XG4gICAgICBmbGFncyB8PSA4O1xuICAgICAgbCArPSA0O1xuICAgICAgYnJlYWs7XG4gICAgZGVmYXVsdDpcbiAgICAgIHRocm93IFwidW5zdXBwb3J0ZWQgY2VsbCB0eXBlIFwiICsgY2VsbC50O1xuICB9XG4gIGR2LnNldFVpbnQzMig4LCBmbGFncywgdHJ1ZSk7XG4gIHJldHVybiBvdXQuc2xpY2UoMCwgbCk7XG59XG5mdW5jdGlvbiB3cml0ZV9vbGRfc3RvcmFnZShjZWxsLCBzc3QpIHtcbiAgdmFyIG91dCA9IG5ldyBVaW50OEFycmF5KDMyKSwgZHYgPSB1OF90b19kYXRhdmlldyhvdXQpLCBsID0gMTIsIGZsYWdzID0gMDtcbiAgb3V0WzBdID0gMztcbiAgc3dpdGNoIChjZWxsLnQpIHtcbiAgICBjYXNlIFwiblwiOlxuICAgICAgb3V0WzJdID0gMjtcbiAgICAgIGR2LnNldEZsb2F0NjQobCwgY2VsbC52LCB0cnVlKTtcbiAgICAgIGZsYWdzIHw9IDMyO1xuICAgICAgbCArPSA4O1xuICAgICAgYnJlYWs7XG4gICAgY2FzZSBcImJcIjpcbiAgICAgIG91dFsyXSA9IDY7XG4gICAgICBkdi5zZXRGbG9hdDY0KGwsIGNlbGwudiA/IDEgOiAwLCB0cnVlKTtcbiAgICAgIGZsYWdzIHw9IDMyO1xuICAgICAgbCArPSA4O1xuICAgICAgYnJlYWs7XG4gICAgY2FzZSBcInNcIjpcbiAgICAgIGlmIChzc3QuaW5kZXhPZihjZWxsLnYpID09IC0xKVxuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoXCJWYWx1ZSBcIi5jb25jYXQoY2VsbC52LCBcIiBtaXNzaW5nIGZyb20gU1NUIVwiKSk7XG4gICAgICBvdXRbMl0gPSAzO1xuICAgICAgZHYuc2V0VWludDMyKGwsIHNzdC5pbmRleE9mKGNlbGwudiksIHRydWUpO1xuICAgICAgZmxhZ3MgfD0gMTY7XG4gICAgICBsICs9IDQ7XG4gICAgICBicmVhaztcbiAgICBkZWZhdWx0OlxuICAgICAgdGhyb3cgXCJ1bnN1cHBvcnRlZCBjZWxsIHR5cGUgXCIgKyBjZWxsLnQ7XG4gIH1cbiAgZHYuc2V0VWludDMyKDQsIGZsYWdzLCB0cnVlKTtcbiAgcmV0dXJuIG91dC5zbGljZSgwLCBsKTtcbn1cbmZ1bmN0aW9uIHBhcnNlX2NlbGxfc3RvcmFnZShidWYsIHNzdCwgcnNzdCkge1xuICBzd2l0Y2ggKGJ1ZlswXSkge1xuICAgIGNhc2UgMDpcbiAgICBjYXNlIDE6XG4gICAgY2FzZSAyOlxuICAgIGNhc2UgMzpcbiAgICAgIHJldHVybiBwYXJzZV9vbGRfc3RvcmFnZShidWYsIHNzdCwgcnNzdCwgYnVmWzBdKTtcbiAgICBjYXNlIDU6XG4gICAgICByZXR1cm4gcGFyc2VfbmV3X3N0b3JhZ2UoYnVmLCBzc3QsIHJzc3QpO1xuICAgIGRlZmF1bHQ6XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoXCJVbnN1cHBvcnRlZCBwYXlsb2FkIHZlcnNpb24gXCIuY29uY2F0KGJ1ZlswXSkpO1xuICB9XG59XG5mdW5jdGlvbiBwYXJzZV9UU1BfUmVmZXJlbmNlKGJ1Zikge1xuICB2YXIgcGIgPSBwYXJzZV9zaGFsbG93KGJ1Zik7XG4gIHJldHVybiBwYXJzZV92YXJpbnQ0OShwYlsxXVswXS5kYXRhKTtcbn1cbmZ1bmN0aW9uIHdyaXRlX1RTUF9SZWZlcmVuY2UoaWR4KSB7XG4gIHZhciBvdXQgPSBbXTtcbiAgb3V0WzFdID0gW3sgdHlwZTogMCwgZGF0YTogd3JpdGVfdmFyaW50NDkoaWR4KSB9XTtcbiAgcmV0dXJuIHdyaXRlX3NoYWxsb3cob3V0KTtcbn1cbmZ1bmN0aW9uIHBhcnNlX1RTVF9UYWJsZURhdGFMaXN0KE0sIHJvb3QpIHtcbiAgdmFyIHBiID0gcGFyc2Vfc2hhbGxvdyhyb290LmRhdGEpO1xuICB2YXIgdHlwZSA9IHZhcmludF90b19pMzIocGJbMV1bMF0uZGF0YSk7XG4gIHZhciBlbnRyaWVzID0gcGJbM107XG4gIHZhciBkYXRhID0gW107XG4gIChlbnRyaWVzIHx8IFtdKS5mb3JFYWNoKGZ1bmN0aW9uKGVudHJ5KSB7XG4gICAgdmFyIGxlID0gcGFyc2Vfc2hhbGxvdyhlbnRyeS5kYXRhKTtcbiAgICB2YXIga2V5ID0gdmFyaW50X3RvX2kzMihsZVsxXVswXS5kYXRhKSA+Pj4gMDtcbiAgICBzd2l0Y2ggKHR5cGUpIHtcbiAgICAgIGNhc2UgMTpcbiAgICAgICAgZGF0YVtrZXldID0gdThzdHIobGVbM11bMF0uZGF0YSk7XG4gICAgICAgIGJyZWFrO1xuICAgICAgY2FzZSA4OlxuICAgICAgICB7XG4gICAgICAgICAgdmFyIHJ0ID0gTVtwYXJzZV9UU1BfUmVmZXJlbmNlKGxlWzldWzBdLmRhdGEpXVswXTtcbiAgICAgICAgICB2YXIgcnRwID0gcGFyc2Vfc2hhbGxvdyhydC5kYXRhKTtcbiAgICAgICAgICB2YXIgcnRwcmVmID0gTVtwYXJzZV9UU1BfUmVmZXJlbmNlKHJ0cFsxXVswXS5kYXRhKV1bMF07XG4gICAgICAgICAgdmFyIG10eXBlID0gdmFyaW50X3RvX2kzMihydHByZWYubWV0YVsxXVswXS5kYXRhKTtcbiAgICAgICAgICBpZiAobXR5cGUgIT0gMjAwMSlcbiAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcihcIjIwMDAgdW5leHBlY3RlZCByZWZlcmVuY2UgdG8gXCIuY29uY2F0KG10eXBlKSk7XG4gICAgICAgICAgdmFyIHRzd3BzYSA9IHBhcnNlX3NoYWxsb3cocnRwcmVmLmRhdGEpO1xuICAgICAgICAgIGRhdGFba2V5XSA9IHRzd3BzYVszXS5tYXAoZnVuY3Rpb24oeCkge1xuICAgICAgICAgICAgcmV0dXJuIHU4c3RyKHguZGF0YSk7XG4gICAgICAgICAgfSkuam9pbihcIlwiKTtcbiAgICAgICAgfVxuICAgICAgICBicmVhaztcbiAgICB9XG4gIH0pO1xuICByZXR1cm4gZGF0YTtcbn1cbmZ1bmN0aW9uIHBhcnNlX1RTVF9UaWxlUm93SW5mbyh1OCwgdHlwZSkge1xuICB2YXIgX2EsIF9iLCBfYywgX2QsIF9lLCBfZiwgX2csIF9oLCBfaSwgX2osIF9rLCBfbCwgX20sIF9uO1xuICB2YXIgcGIgPSBwYXJzZV9zaGFsbG93KHU4KTtcbiAgdmFyIFIgPSB2YXJpbnRfdG9faTMyKHBiWzFdWzBdLmRhdGEpID4+PiAwO1xuICB2YXIgY250ID0gdmFyaW50X3RvX2kzMihwYlsyXVswXS5kYXRhKSA+Pj4gMDtcbiAgdmFyIHdpZGVfb2Zmc2V0cyA9ICgoX2IgPSAoX2EgPSBwYls4XSkgPT0gbnVsbCA/IHZvaWQgMCA6IF9hWzBdKSA9PSBudWxsID8gdm9pZCAwIDogX2IuZGF0YSkgJiYgdmFyaW50X3RvX2kzMihwYls4XVswXS5kYXRhKSA+IDAgfHwgZmFsc2U7XG4gIHZhciB1c2VkX3N0b3JhZ2VfdTgsIHVzZWRfc3RvcmFnZTtcbiAgaWYgKCgoX2QgPSAoX2MgPSBwYls3XSkgPT0gbnVsbCA/IHZvaWQgMCA6IF9jWzBdKSA9PSBudWxsID8gdm9pZCAwIDogX2QuZGF0YSkgJiYgdHlwZSAhPSAwKSB7XG4gICAgdXNlZF9zdG9yYWdlX3U4ID0gKF9mID0gKF9lID0gcGJbN10pID09IG51bGwgPyB2b2lkIDAgOiBfZVswXSkgPT0gbnVsbCA/IHZvaWQgMCA6IF9mLmRhdGE7XG4gICAgdXNlZF9zdG9yYWdlID0gKF9oID0gKF9nID0gcGJbNl0pID09IG51bGwgPyB2b2lkIDAgOiBfZ1swXSkgPT0gbnVsbCA/IHZvaWQgMCA6IF9oLmRhdGE7XG4gIH0gZWxzZSBpZiAoKChfaiA9IChfaSA9IHBiWzRdKSA9PSBudWxsID8gdm9pZCAwIDogX2lbMF0pID09IG51bGwgPyB2b2lkIDAgOiBfai5kYXRhKSAmJiB0eXBlICE9IDEpIHtcbiAgICB1c2VkX3N0b3JhZ2VfdTggPSAoX2wgPSAoX2sgPSBwYls0XSkgPT0gbnVsbCA/IHZvaWQgMCA6IF9rWzBdKSA9PSBudWxsID8gdm9pZCAwIDogX2wuZGF0YTtcbiAgICB1c2VkX3N0b3JhZ2UgPSAoX24gPSAoX20gPSBwYlszXSkgPT0gbnVsbCA/IHZvaWQgMCA6IF9tWzBdKSA9PSBudWxsID8gdm9pZCAwIDogX24uZGF0YTtcbiAgfSBlbHNlXG4gICAgdGhyb3cgXCJOVU1CRVJTIFRpbGUgbWlzc2luZyBcIi5jb25jYXQodHlwZSwgXCIgY2VsbCBzdG9yYWdlXCIpO1xuICB2YXIgd2lkdGggPSB3aWRlX29mZnNldHMgPyA0IDogMTtcbiAgdmFyIHVzZWRfc3RvcmFnZV9vZmZzZXRzID0gdThfdG9fZGF0YXZpZXcodXNlZF9zdG9yYWdlX3U4KTtcbiAgdmFyIG9mZnNldHMgPSBbXTtcbiAgZm9yICh2YXIgQyA9IDA7IEMgPCB1c2VkX3N0b3JhZ2VfdTgubGVuZ3RoIC8gMjsgKytDKSB7XG4gICAgdmFyIG9mZiA9IHVzZWRfc3RvcmFnZV9vZmZzZXRzLmdldFVpbnQxNihDICogMiwgdHJ1ZSk7XG4gICAgaWYgKG9mZiA8IDY1NTM1KVxuICAgICAgb2Zmc2V0cy5wdXNoKFtDLCBvZmZdKTtcbiAgfVxuICBpZiAob2Zmc2V0cy5sZW5ndGggIT0gY250KVxuICAgIHRocm93IFwiRXhwZWN0ZWQgXCIuY29uY2F0KGNudCwgXCIgY2VsbHMsIGZvdW5kIFwiKS5jb25jYXQob2Zmc2V0cy5sZW5ndGgpO1xuICB2YXIgY2VsbHMgPSBbXTtcbiAgZm9yIChDID0gMDsgQyA8IG9mZnNldHMubGVuZ3RoIC0gMTsgKytDKVxuICAgIGNlbGxzW29mZnNldHNbQ11bMF1dID0gdXNlZF9zdG9yYWdlLnN1YmFycmF5KG9mZnNldHNbQ11bMV0gKiB3aWR0aCwgb2Zmc2V0c1tDICsgMV1bMV0gKiB3aWR0aCk7XG4gIGlmIChvZmZzZXRzLmxlbmd0aCA+PSAxKVxuICAgIGNlbGxzW29mZnNldHNbb2Zmc2V0cy5sZW5ndGggLSAxXVswXV0gPSB1c2VkX3N0b3JhZ2Uuc3ViYXJyYXkob2Zmc2V0c1tvZmZzZXRzLmxlbmd0aCAtIDFdWzFdICogd2lkdGgpO1xuICByZXR1cm4geyBSOiBSLCBjZWxsczogY2VsbHMgfTtcbn1cbmZ1bmN0aW9uIHBhcnNlX1RTVF9UaWxlKE0sIHJvb3QpIHtcbiAgdmFyIF9hO1xuICB2YXIgcGIgPSBwYXJzZV9zaGFsbG93KHJvb3QuZGF0YSk7XG4gIHZhciBzdG9yYWdlID0gKChfYSA9IHBiID09IG51bGwgPyB2b2lkIDAgOiBwYls3XSkgPT0gbnVsbCA/IHZvaWQgMCA6IF9hWzBdKSA/IHZhcmludF90b19pMzIocGJbN11bMF0uZGF0YSkgPj4+IDAgPiAwID8gMSA6IDAgOiAtMTtcbiAgdmFyIHJpID0gbWFwcGEocGJbNV0sIGZ1bmN0aW9uKHU4KSB7XG4gICAgcmV0dXJuIHBhcnNlX1RTVF9UaWxlUm93SW5mbyh1OCwgc3RvcmFnZSk7XG4gIH0pO1xuICByZXR1cm4ge1xuICAgIG5yb3dzOiB2YXJpbnRfdG9faTMyKHBiWzRdWzBdLmRhdGEpID4+PiAwLFxuICAgIGRhdGE6IHJpLnJlZHVjZShmdW5jdGlvbihhY2MsIHgpIHtcbiAgICAgIGlmICghYWNjW3guUl0pXG4gICAgICAgIGFjY1t4LlJdID0gW107XG4gICAgICB4LmNlbGxzLmZvckVhY2goZnVuY3Rpb24oY2VsbCwgQykge1xuICAgICAgICBpZiAoYWNjW3guUl1bQ10pXG4gICAgICAgICAgdGhyb3cgbmV3IEVycm9yKFwiRHVwbGljYXRlIGNlbGwgcj1cIi5jb25jYXQoeC5SLCBcIiBjPVwiKS5jb25jYXQoQykpO1xuICAgICAgICBhY2NbeC5SXVtDXSA9IGNlbGw7XG4gICAgICB9KTtcbiAgICAgIHJldHVybiBhY2M7XG4gICAgfSwgW10pXG4gIH07XG59XG5mdW5jdGlvbiBwYXJzZV9UU1RfVGFibGVNb2RlbEFyY2hpdmUoTSwgcm9vdCwgd3MpIHtcbiAgdmFyIF9hO1xuICB2YXIgcGIgPSBwYXJzZV9zaGFsbG93KHJvb3QuZGF0YSk7XG4gIHZhciByYW5nZSA9IHsgczogeyByOiAwLCBjOiAwIH0sIGU6IHsgcjogMCwgYzogMCB9IH07XG4gIHJhbmdlLmUuciA9ICh2YXJpbnRfdG9faTMyKHBiWzZdWzBdLmRhdGEpID4+PiAwKSAtIDE7XG4gIGlmIChyYW5nZS5lLnIgPCAwKVxuICAgIHRocm93IG5ldyBFcnJvcihcIkludmFsaWQgcm93IHZhcmludCBcIi5jb25jYXQocGJbNl1bMF0uZGF0YSkpO1xuICByYW5nZS5lLmMgPSAodmFyaW50X3RvX2kzMihwYls3XVswXS5kYXRhKSA+Pj4gMCkgLSAxO1xuICBpZiAocmFuZ2UuZS5jIDwgMClcbiAgICB0aHJvdyBuZXcgRXJyb3IoXCJJbnZhbGlkIGNvbCB2YXJpbnQgXCIuY29uY2F0KHBiWzddWzBdLmRhdGEpKTtcbiAgd3NbXCIhcmVmXCJdID0gZW5jb2RlX3JhbmdlKHJhbmdlKTtcbiAgdmFyIHN0b3JlID0gcGFyc2Vfc2hhbGxvdyhwYls0XVswXS5kYXRhKTtcbiAgdmFyIHNzdCA9IHBhcnNlX1RTVF9UYWJsZURhdGFMaXN0KE0sIE1bcGFyc2VfVFNQX1JlZmVyZW5jZShzdG9yZVs0XVswXS5kYXRhKV1bMF0pO1xuICB2YXIgcnNzdCA9ICgoX2EgPSBzdG9yZVsxN10pID09IG51bGwgPyB2b2lkIDAgOiBfYVswXSkgPyBwYXJzZV9UU1RfVGFibGVEYXRhTGlzdChNLCBNW3BhcnNlX1RTUF9SZWZlcmVuY2Uoc3RvcmVbMTddWzBdLmRhdGEpXVswXSkgOiBbXTtcbiAgdmFyIHRpbGUgPSBwYXJzZV9zaGFsbG93KHN0b3JlWzNdWzBdLmRhdGEpO1xuICB2YXIgX1IgPSAwO1xuICB0aWxlWzFdLmZvckVhY2goZnVuY3Rpb24odCkge1xuICAgIHZhciB0bCA9IHBhcnNlX3NoYWxsb3codC5kYXRhKTtcbiAgICB2YXIgcmVmID0gTVtwYXJzZV9UU1BfUmVmZXJlbmNlKHRsWzJdWzBdLmRhdGEpXVswXTtcbiAgICB2YXIgbXR5cGUgPSB2YXJpbnRfdG9faTMyKHJlZi5tZXRhWzFdWzBdLmRhdGEpO1xuICAgIGlmIChtdHlwZSAhPSA2MDAyKVxuICAgICAgdGhyb3cgbmV3IEVycm9yKFwiNjAwMSB1bmV4cGVjdGVkIHJlZmVyZW5jZSB0byBcIi5jb25jYXQobXR5cGUpKTtcbiAgICB2YXIgX3RpbGUgPSBwYXJzZV9UU1RfVGlsZShNLCByZWYpO1xuICAgIF90aWxlLmRhdGEuZm9yRWFjaChmdW5jdGlvbihyb3csIFIpIHtcbiAgICAgIHJvdy5mb3JFYWNoKGZ1bmN0aW9uKGJ1ZiwgQykge1xuICAgICAgICB2YXIgYWRkciA9IGVuY29kZV9jZWxsKHsgcjogX1IgKyBSLCBjOiBDIH0pO1xuICAgICAgICB2YXIgcmVzID0gcGFyc2VfY2VsbF9zdG9yYWdlKGJ1Ziwgc3N0LCByc3N0KTtcbiAgICAgICAgaWYgKHJlcylcbiAgICAgICAgICB3c1thZGRyXSA9IHJlcztcbiAgICAgIH0pO1xuICAgIH0pO1xuICAgIF9SICs9IF90aWxlLm5yb3dzO1xuICB9KTtcbn1cbmZ1bmN0aW9uIHBhcnNlX1RTVF9UYWJsZUluZm9BcmNoaXZlKE0sIHJvb3QpIHtcbiAgdmFyIHBiID0gcGFyc2Vfc2hhbGxvdyhyb290LmRhdGEpO1xuICB2YXIgb3V0ID0geyBcIiFyZWZcIjogXCJBMVwiIH07XG4gIHZhciB0YWJsZXJlZiA9IE1bcGFyc2VfVFNQX1JlZmVyZW5jZShwYlsyXVswXS5kYXRhKV07XG4gIHZhciBtdHlwZSA9IHZhcmludF90b19pMzIodGFibGVyZWZbMF0ubWV0YVsxXVswXS5kYXRhKTtcbiAgaWYgKG10eXBlICE9IDYwMDEpXG4gICAgdGhyb3cgbmV3IEVycm9yKFwiNjAwMCB1bmV4cGVjdGVkIHJlZmVyZW5jZSB0byBcIi5jb25jYXQobXR5cGUpKTtcbiAgcGFyc2VfVFNUX1RhYmxlTW9kZWxBcmNoaXZlKE0sIHRhYmxlcmVmWzBdLCBvdXQpO1xuICByZXR1cm4gb3V0O1xufVxuZnVuY3Rpb24gcGFyc2VfVE5fU2hlZXRBcmNoaXZlKE0sIHJvb3QpIHtcbiAgdmFyIF9hO1xuICB2YXIgcGIgPSBwYXJzZV9zaGFsbG93KHJvb3QuZGF0YSk7XG4gIHZhciBvdXQgPSB7XG4gICAgbmFtZTogKChfYSA9IHBiWzFdKSA9PSBudWxsID8gdm9pZCAwIDogX2FbMF0pID8gdThzdHIocGJbMV1bMF0uZGF0YSkgOiBcIlwiLFxuICAgIHNoZWV0czogW11cbiAgfTtcbiAgdmFyIHNoYXBlb2ZmcyA9IG1hcHBhKHBiWzJdLCBwYXJzZV9UU1BfUmVmZXJlbmNlKTtcbiAgc2hhcGVvZmZzLmZvckVhY2goZnVuY3Rpb24ob2ZmKSB7XG4gICAgTVtvZmZdLmZvckVhY2goZnVuY3Rpb24obSkge1xuICAgICAgdmFyIG10eXBlID0gdmFyaW50X3RvX2kzMihtLm1ldGFbMV1bMF0uZGF0YSk7XG4gICAgICBpZiAobXR5cGUgPT0gNmUzKVxuICAgICAgICBvdXQuc2hlZXRzLnB1c2gocGFyc2VfVFNUX1RhYmxlSW5mb0FyY2hpdmUoTSwgbSkpO1xuICAgIH0pO1xuICB9KTtcbiAgcmV0dXJuIG91dDtcbn1cbmZ1bmN0aW9uIHBhcnNlX1ROX0RvY3VtZW50QXJjaGl2ZShNLCByb290KSB7XG4gIHZhciBvdXQgPSBib29rX25ldygpO1xuICB2YXIgcGIgPSBwYXJzZV9zaGFsbG93KHJvb3QuZGF0YSk7XG4gIHZhciBzaGVldG9mZnMgPSBtYXBwYShwYlsxXSwgcGFyc2VfVFNQX1JlZmVyZW5jZSk7XG4gIHNoZWV0b2Zmcy5mb3JFYWNoKGZ1bmN0aW9uKG9mZikge1xuICAgIE1bb2ZmXS5mb3JFYWNoKGZ1bmN0aW9uKG0pIHtcbiAgICAgIHZhciBtdHlwZSA9IHZhcmludF90b19pMzIobS5tZXRhWzFdWzBdLmRhdGEpO1xuICAgICAgaWYgKG10eXBlID09IDIpIHtcbiAgICAgICAgdmFyIHJvb3QyID0gcGFyc2VfVE5fU2hlZXRBcmNoaXZlKE0sIG0pO1xuICAgICAgICByb290Mi5zaGVldHMuZm9yRWFjaChmdW5jdGlvbihzaGVldCwgaWR4KSB7XG4gICAgICAgICAgYm9va19hcHBlbmRfc2hlZXQob3V0LCBzaGVldCwgaWR4ID09IDAgPyByb290Mi5uYW1lIDogcm9vdDIubmFtZSArIFwiX1wiICsgaWR4LCB0cnVlKTtcbiAgICAgICAgfSk7XG4gICAgICB9XG4gICAgfSk7XG4gIH0pO1xuICBpZiAob3V0LlNoZWV0TmFtZXMubGVuZ3RoID09IDApXG4gICAgdGhyb3cgbmV3IEVycm9yKFwiRW1wdHkgTlVNQkVSUyBmaWxlXCIpO1xuICByZXR1cm4gb3V0O1xufVxuZnVuY3Rpb24gcGFyc2VfbnVtYmVyc19pd2EoY2ZiKSB7XG4gIHZhciBfYSwgX2IsIF9jLCBfZDtcbiAgdmFyIE0gPSB7fSwgaW5kaWNlcyA9IFtdO1xuICBjZmIuRnVsbFBhdGhzLmZvckVhY2goZnVuY3Rpb24ocCkge1xuICAgIGlmIChwLm1hdGNoKC9cXC5pd3B2Mi8pKVxuICAgICAgdGhyb3cgbmV3IEVycm9yKFwiVW5zdXBwb3J0ZWQgcGFzc3dvcmQgcHJvdGVjdGlvblwiKTtcbiAgfSk7XG4gIGNmYi5GaWxlSW5kZXguZm9yRWFjaChmdW5jdGlvbihzKSB7XG4gICAgaWYgKCFzLm5hbWUubWF0Y2goL1xcLml3YSQvKSlcbiAgICAgIHJldHVybjtcbiAgICB2YXIgbztcbiAgICB0cnkge1xuICAgICAgbyA9IGRlY29tcHJlc3NfaXdhX2ZpbGUocy5jb250ZW50KTtcbiAgICB9IGNhdGNoIChlKSB7XG4gICAgICByZXR1cm4gY29uc29sZS5sb2coXCI/PyBcIiArIHMuY29udGVudC5sZW5ndGggKyBcIiBcIiArIChlLm1lc3NhZ2UgfHwgZSkpO1xuICAgIH1cbiAgICB2YXIgcGFja2V0cztcbiAgICB0cnkge1xuICAgICAgcGFja2V0cyA9IHBhcnNlX2l3YV9maWxlKG8pO1xuICAgIH0gY2F0Y2ggKGUpIHtcbiAgICAgIHJldHVybiBjb25zb2xlLmxvZyhcIiMjIFwiICsgKGUubWVzc2FnZSB8fCBlKSk7XG4gICAgfVxuICAgIHBhY2tldHMuZm9yRWFjaChmdW5jdGlvbihwYWNrZXQpIHtcbiAgICAgIE1bcGFja2V0LmlkXSA9IHBhY2tldC5tZXNzYWdlcztcbiAgICAgIGluZGljZXMucHVzaChwYWNrZXQuaWQpO1xuICAgIH0pO1xuICB9KTtcbiAgaWYgKCFpbmRpY2VzLmxlbmd0aClcbiAgICB0aHJvdyBuZXcgRXJyb3IoXCJGaWxlIGhhcyBubyBtZXNzYWdlc1wiKTtcbiAgdmFyIGRvY3Jvb3QgPSAoKF9kID0gKF9jID0gKF9iID0gKF9hID0gTSA9PSBudWxsID8gdm9pZCAwIDogTVsxXSkgPT0gbnVsbCA/IHZvaWQgMCA6IF9hWzBdKSA9PSBudWxsID8gdm9pZCAwIDogX2IubWV0YSkgPT0gbnVsbCA/IHZvaWQgMCA6IF9jWzFdKSA9PSBudWxsID8gdm9pZCAwIDogX2RbMF0uZGF0YSkgJiYgdmFyaW50X3RvX2kzMihNWzFdWzBdLm1ldGFbMV1bMF0uZGF0YSkgPT0gMSAmJiBNWzFdWzBdO1xuICBpZiAoIWRvY3Jvb3QpXG4gICAgaW5kaWNlcy5mb3JFYWNoKGZ1bmN0aW9uKGlkeCkge1xuICAgICAgTVtpZHhdLmZvckVhY2goZnVuY3Rpb24oaXdhbSkge1xuICAgICAgICB2YXIgbXR5cGUgPSB2YXJpbnRfdG9faTMyKGl3YW0ubWV0YVsxXVswXS5kYXRhKSA+Pj4gMDtcbiAgICAgICAgaWYgKG10eXBlID09IDEpIHtcbiAgICAgICAgICBpZiAoIWRvY3Jvb3QpXG4gICAgICAgICAgICBkb2Nyb290ID0gaXdhbTtcbiAgICAgICAgICBlbHNlXG4gICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoXCJEb2N1bWVudCBoYXMgbXVsdGlwbGUgcm9vdHNcIik7XG4gICAgICAgIH1cbiAgICAgIH0pO1xuICAgIH0pO1xuICBpZiAoIWRvY3Jvb3QpXG4gICAgdGhyb3cgbmV3IEVycm9yKFwiQ2Fubm90IGZpbmQgRG9jdW1lbnQgcm9vdFwiKTtcbiAgcmV0dXJuIHBhcnNlX1ROX0RvY3VtZW50QXJjaGl2ZShNLCBkb2Nyb290KTtcbn1cbmZ1bmN0aW9uIHdyaXRlX3RpbGVfcm93KHRyaSwgZGF0YSwgU1NUKSB7XG4gIHZhciBfYSwgX2IsIF9jLCBfZDtcbiAgaWYgKCEoKF9hID0gdHJpWzZdKSA9PSBudWxsID8gdm9pZCAwIDogX2FbMF0pIHx8ICEoKF9iID0gdHJpWzddKSA9PSBudWxsID8gdm9pZCAwIDogX2JbMF0pKVxuICAgIHRocm93IFwiTXV0YXRpb24gb25seSB3b3JrcyBvbiBwb3N0LUJOQyBzdG9yYWdlcyFcIjtcbiAgdmFyIHdpZGVfb2Zmc2V0cyA9ICgoX2QgPSAoX2MgPSB0cmlbOF0pID09IG51bGwgPyB2b2lkIDAgOiBfY1swXSkgPT0gbnVsbCA/IHZvaWQgMCA6IF9kLmRhdGEpICYmIHZhcmludF90b19pMzIodHJpWzhdWzBdLmRhdGEpID4gMCB8fCBmYWxzZTtcbiAgaWYgKHdpZGVfb2Zmc2V0cylcbiAgICB0aHJvdyBcIk1hdGggb25seSB3b3JrcyB3aXRoIG5vcm1hbCBvZmZzZXRzXCI7XG4gIHZhciBjbnQgPSAwO1xuICB2YXIgZHYgPSB1OF90b19kYXRhdmlldyh0cmlbN11bMF0uZGF0YSksIGxhc3Rfb2Zmc2V0ID0gMCwgY2VsbF9zdG9yYWdlID0gW107XG4gIHZhciBfZHYgPSB1OF90b19kYXRhdmlldyh0cmlbNF1bMF0uZGF0YSksIF9sYXN0X29mZnNldCA9IDAsIF9jZWxsX3N0b3JhZ2UgPSBbXTtcbiAgZm9yICh2YXIgQyA9IDA7IEMgPCBkYXRhLmxlbmd0aDsgKytDKSB7XG4gICAgaWYgKGRhdGFbQ10gPT0gbnVsbCkge1xuICAgICAgZHYuc2V0VWludDE2KEMgKiAyLCA2NTUzNSwgdHJ1ZSk7XG4gICAgICBfZHYuc2V0VWludDE2KEMgKiAyLCA2NTUzNSk7XG4gICAgICBjb250aW51ZTtcbiAgICB9XG4gICAgZHYuc2V0VWludDE2KEMgKiAyLCBsYXN0X29mZnNldCwgdHJ1ZSk7XG4gICAgX2R2LnNldFVpbnQxNihDICogMiwgX2xhc3Rfb2Zmc2V0LCB0cnVlKTtcbiAgICB2YXIgY2VsbG9hZCwgX2NlbGxvYWQ7XG4gICAgc3dpdGNoICh0eXBlb2YgZGF0YVtDXSkge1xuICAgICAgY2FzZSBcInN0cmluZ1wiOlxuICAgICAgICBjZWxsb2FkID0gd3JpdGVfbmV3X3N0b3JhZ2UoeyB0OiBcInNcIiwgdjogZGF0YVtDXSB9LCBTU1QpO1xuICAgICAgICBfY2VsbG9hZCA9IHdyaXRlX29sZF9zdG9yYWdlKHsgdDogXCJzXCIsIHY6IGRhdGFbQ10gfSwgU1NUKTtcbiAgICAgICAgYnJlYWs7XG4gICAgICBjYXNlIFwibnVtYmVyXCI6XG4gICAgICAgIGNlbGxvYWQgPSB3cml0ZV9uZXdfc3RvcmFnZSh7IHQ6IFwiblwiLCB2OiBkYXRhW0NdIH0sIFNTVCk7XG4gICAgICAgIF9jZWxsb2FkID0gd3JpdGVfb2xkX3N0b3JhZ2UoeyB0OiBcIm5cIiwgdjogZGF0YVtDXSB9LCBTU1QpO1xuICAgICAgICBicmVhaztcbiAgICAgIGNhc2UgXCJib29sZWFuXCI6XG4gICAgICAgIGNlbGxvYWQgPSB3cml0ZV9uZXdfc3RvcmFnZSh7IHQ6IFwiYlwiLCB2OiBkYXRhW0NdIH0sIFNTVCk7XG4gICAgICAgIF9jZWxsb2FkID0gd3JpdGVfb2xkX3N0b3JhZ2UoeyB0OiBcImJcIiwgdjogZGF0YVtDXSB9LCBTU1QpO1xuICAgICAgICBicmVhaztcbiAgICAgIGRlZmF1bHQ6XG4gICAgICAgIHRocm93IG5ldyBFcnJvcihcIlVuc3VwcG9ydGVkIHZhbHVlIFwiICsgZGF0YVtDXSk7XG4gICAgfVxuICAgIGNlbGxfc3RvcmFnZS5wdXNoKGNlbGxvYWQpO1xuICAgIGxhc3Rfb2Zmc2V0ICs9IGNlbGxvYWQubGVuZ3RoO1xuICAgIF9jZWxsX3N0b3JhZ2UucHVzaChfY2VsbG9hZCk7XG4gICAgX2xhc3Rfb2Zmc2V0ICs9IF9jZWxsb2FkLmxlbmd0aDtcbiAgICArK2NudDtcbiAgfVxuICB0cmlbMl1bMF0uZGF0YSA9IHdyaXRlX3ZhcmludDQ5KGNudCk7XG4gIGZvciAoOyBDIDwgdHJpWzddWzBdLmRhdGEubGVuZ3RoIC8gMjsgKytDKSB7XG4gICAgZHYuc2V0VWludDE2KEMgKiAyLCA2NTUzNSwgdHJ1ZSk7XG4gICAgX2R2LnNldFVpbnQxNihDICogMiwgNjU1MzUsIHRydWUpO1xuICB9XG4gIHRyaVs2XVswXS5kYXRhID0gdThjb25jYXQoY2VsbF9zdG9yYWdlKTtcbiAgdHJpWzNdWzBdLmRhdGEgPSB1OGNvbmNhdChfY2VsbF9zdG9yYWdlKTtcbiAgcmV0dXJuIGNudDtcbn1cbmZ1bmN0aW9uIHdyaXRlX251bWJlcnNfaXdhKHdiLCBvcHRzKSB7XG4gIGlmICghb3B0cyB8fCAhb3B0cy5udW1iZXJzKVxuICAgIHRocm93IG5ldyBFcnJvcihcIk11c3QgcGFzcyBhIGBudW1iZXJzYCBvcHRpb24gLS0gY2hlY2sgdGhlIFJFQURNRVwiKTtcbiAgdmFyIHdzID0gd2IuU2hlZXRzW3diLlNoZWV0TmFtZXNbMF1dO1xuICBpZiAod2IuU2hlZXROYW1lcy5sZW5ndGggPiAxKVxuICAgIGNvbnNvbGUuZXJyb3IoXCJUaGUgTnVtYmVycyB3cml0ZXIgY3VycmVudGx5IHdyaXRlcyBvbmx5IHRoZSBmaXJzdCB0YWJsZVwiKTtcbiAgdmFyIHJhbmdlID0gZGVjb2RlX3JhbmdlKHdzW1wiIXJlZlwiXSk7XG4gIHJhbmdlLnMuciA9IHJhbmdlLnMuYyA9IDA7XG4gIHZhciB0cnVuYyA9IGZhbHNlO1xuICBpZiAocmFuZ2UuZS5jID4gOSkge1xuICAgIHRydW5jID0gdHJ1ZTtcbiAgICByYW5nZS5lLmMgPSA5O1xuICB9XG4gIGlmIChyYW5nZS5lLnIgPiA0OSkge1xuICAgIHRydW5jID0gdHJ1ZTtcbiAgICByYW5nZS5lLnIgPSA0OTtcbiAgfVxuICBpZiAodHJ1bmMpXG4gICAgY29uc29sZS5lcnJvcihcIlRoZSBOdW1iZXJzIHdyaXRlciBpcyBjdXJyZW50bHkgbGltaXRlZCB0byBcIi5jb25jYXQoZW5jb2RlX3JhbmdlKHJhbmdlKSkpO1xuICB2YXIgZGF0YSA9IHNoZWV0X3RvX2pzb24od3MsIHsgcmFuZ2U6IHJhbmdlLCBoZWFkZXI6IDEgfSk7XG4gIHZhciBTU1QgPSBbXCJ+U2gzM3RKNX5cIl07XG4gIGRhdGEuZm9yRWFjaChmdW5jdGlvbihyb3cpIHtcbiAgICByZXR1cm4gcm93LmZvckVhY2goZnVuY3Rpb24oY2VsbCkge1xuICAgICAgaWYgKHR5cGVvZiBjZWxsID09IFwic3RyaW5nXCIpXG4gICAgICAgIFNTVC5wdXNoKGNlbGwpO1xuICAgIH0pO1xuICB9KTtcbiAgdmFyIGRlcGVuZGVudHMgPSB7fTtcbiAgdmFyIGluZGljZXMgPSBbXTtcbiAgdmFyIGNmYiA9IENGQi5yZWFkKG9wdHMubnVtYmVycywgeyB0eXBlOiBcImJhc2U2NFwiIH0pO1xuICBjZmIuRmlsZUluZGV4Lm1hcChmdW5jdGlvbihmaSwgaWR4KSB7XG4gICAgcmV0dXJuIFtmaSwgY2ZiLkZ1bGxQYXRoc1tpZHhdXTtcbiAgfSkuZm9yRWFjaChmdW5jdGlvbihyb3cpIHtcbiAgICB2YXIgZmkgPSByb3dbMF0sIGZwID0gcm93WzFdO1xuICAgIGlmIChmaS50eXBlICE9IDIpXG4gICAgICByZXR1cm47XG4gICAgaWYgKCFmaS5uYW1lLm1hdGNoKC9cXC5pd2EvKSlcbiAgICAgIHJldHVybjtcbiAgICB2YXIgb2xkX2NvbnRlbnQgPSBmaS5jb250ZW50O1xuICAgIHZhciByYXcxID0gZGVjb21wcmVzc19pd2FfZmlsZShvbGRfY29udGVudCk7XG4gICAgdmFyIHgyID0gcGFyc2VfaXdhX2ZpbGUocmF3MSk7XG4gICAgeDIuZm9yRWFjaChmdW5jdGlvbihwYWNrZXQyKSB7XG4gICAgICBpbmRpY2VzLnB1c2gocGFja2V0Mi5pZCk7XG4gICAgICBkZXBlbmRlbnRzW3BhY2tldDIuaWRdID0geyBkZXBzOiBbXSwgbG9jYXRpb246IGZwLCB0eXBlOiB2YXJpbnRfdG9faTMyKHBhY2tldDIubWVzc2FnZXNbMF0ubWV0YVsxXVswXS5kYXRhKSB9O1xuICAgIH0pO1xuICB9KTtcbiAgaW5kaWNlcy5zb3J0KGZ1bmN0aW9uKHgyLCB5Mikge1xuICAgIHJldHVybiB4MiAtIHkyO1xuICB9KTtcbiAgdmFyIGluZGljZXNfdmFyaW50ID0gaW5kaWNlcy5maWx0ZXIoZnVuY3Rpb24oeDIpIHtcbiAgICByZXR1cm4geDIgPiAxO1xuICB9KS5tYXAoZnVuY3Rpb24oeDIpIHtcbiAgICByZXR1cm4gW3gyLCB3cml0ZV92YXJpbnQ0OSh4MildO1xuICB9KTtcbiAgY2ZiLkZpbGVJbmRleC5tYXAoZnVuY3Rpb24oZmksIGlkeCkge1xuICAgIHJldHVybiBbZmksIGNmYi5GdWxsUGF0aHNbaWR4XV07XG4gIH0pLmZvckVhY2goZnVuY3Rpb24ocm93KSB7XG4gICAgdmFyIGZpID0gcm93WzBdLCBmcCA9IHJvd1sxXTtcbiAgICBpZiAoIWZpLm5hbWUubWF0Y2goL1xcLml3YS8pKVxuICAgICAgcmV0dXJuO1xuICAgIHZhciB4MiA9IHBhcnNlX2l3YV9maWxlKGRlY29tcHJlc3NfaXdhX2ZpbGUoZmkuY29udGVudCkpO1xuICAgIHgyLmZvckVhY2goZnVuY3Rpb24oaWEpIHtcbiAgICAgIGlhLm1lc3NhZ2VzLmZvckVhY2goZnVuY3Rpb24obSkge1xuICAgICAgICBpbmRpY2VzX3ZhcmludC5mb3JFYWNoKGZ1bmN0aW9uKGl2aSkge1xuICAgICAgICAgIGlmIChpYS5tZXNzYWdlcy5zb21lKGZ1bmN0aW9uKG1lc3MpIHtcbiAgICAgICAgICAgIHJldHVybiB2YXJpbnRfdG9faTMyKG1lc3MubWV0YVsxXVswXS5kYXRhKSAhPSAxMTAwNiAmJiB1OGNvbnRhaW5zKG1lc3MuZGF0YSwgaXZpWzFdKTtcbiAgICAgICAgICB9KSkge1xuICAgICAgICAgICAgZGVwZW5kZW50c1tpdmlbMF1dLmRlcHMucHVzaChpYS5pZCk7XG4gICAgICAgICAgfVxuICAgICAgICB9KTtcbiAgICAgIH0pO1xuICAgIH0pO1xuICB9KTtcbiAgZnVuY3Rpb24gZ2V0X3VuaXF1ZV9tc2dpZCgpIHtcbiAgICBmb3IgKHZhciBpID0gOTI3MjYyOyBpIDwgMmU2OyArK2kpXG4gICAgICBpZiAoIWRlcGVuZGVudHNbaV0pXG4gICAgICAgIHJldHVybiBpO1xuICAgIHRocm93IG5ldyBFcnJvcihcIlRvbyBtYW55IG1lc3NhZ2VzXCIpO1xuICB9XG4gIHZhciBlbnRyeSA9IENGQi5maW5kKGNmYiwgZGVwZW5kZW50c1sxXS5sb2NhdGlvbik7XG4gIHZhciB4ID0gcGFyc2VfaXdhX2ZpbGUoZGVjb21wcmVzc19pd2FfZmlsZShlbnRyeS5jb250ZW50KSk7XG4gIHZhciBkb2Nyb290O1xuICBmb3IgKHZhciB4aSA9IDA7IHhpIDwgeC5sZW5ndGg7ICsreGkpIHtcbiAgICB2YXIgcGFja2V0ID0geFt4aV07XG4gICAgaWYgKHBhY2tldC5pZCA9PSAxKVxuICAgICAgZG9jcm9vdCA9IHBhY2tldDtcbiAgfVxuICB2YXIgc2hlZXRyb290cmVmID0gcGFyc2VfVFNQX1JlZmVyZW5jZShwYXJzZV9zaGFsbG93KGRvY3Jvb3QubWVzc2FnZXNbMF0uZGF0YSlbMV1bMF0uZGF0YSk7XG4gIGVudHJ5ID0gQ0ZCLmZpbmQoY2ZiLCBkZXBlbmRlbnRzW3NoZWV0cm9vdHJlZl0ubG9jYXRpb24pO1xuICB4ID0gcGFyc2VfaXdhX2ZpbGUoZGVjb21wcmVzc19pd2FfZmlsZShlbnRyeS5jb250ZW50KSk7XG4gIGZvciAoeGkgPSAwOyB4aSA8IHgubGVuZ3RoOyArK3hpKSB7XG4gICAgcGFja2V0ID0geFt4aV07XG4gICAgaWYgKHBhY2tldC5pZCA9PSBzaGVldHJvb3RyZWYpXG4gICAgICBkb2Nyb290ID0gcGFja2V0O1xuICB9XG4gIHNoZWV0cm9vdHJlZiA9IHBhcnNlX1RTUF9SZWZlcmVuY2UocGFyc2Vfc2hhbGxvdyhkb2Nyb290Lm1lc3NhZ2VzWzBdLmRhdGEpWzJdWzBdLmRhdGEpO1xuICBlbnRyeSA9IENGQi5maW5kKGNmYiwgZGVwZW5kZW50c1tzaGVldHJvb3RyZWZdLmxvY2F0aW9uKTtcbiAgeCA9IHBhcnNlX2l3YV9maWxlKGRlY29tcHJlc3NfaXdhX2ZpbGUoZW50cnkuY29udGVudCkpO1xuICBmb3IgKHhpID0gMDsgeGkgPCB4Lmxlbmd0aDsgKyt4aSkge1xuICAgIHBhY2tldCA9IHhbeGldO1xuICAgIGlmIChwYWNrZXQuaWQgPT0gc2hlZXRyb290cmVmKVxuICAgICAgZG9jcm9vdCA9IHBhY2tldDtcbiAgfVxuICBzaGVldHJvb3RyZWYgPSBwYXJzZV9UU1BfUmVmZXJlbmNlKHBhcnNlX3NoYWxsb3coZG9jcm9vdC5tZXNzYWdlc1swXS5kYXRhKVsyXVswXS5kYXRhKTtcbiAgZW50cnkgPSBDRkIuZmluZChjZmIsIGRlcGVuZGVudHNbc2hlZXRyb290cmVmXS5sb2NhdGlvbik7XG4gIHggPSBwYXJzZV9pd2FfZmlsZShkZWNvbXByZXNzX2l3YV9maWxlKGVudHJ5LmNvbnRlbnQpKTtcbiAgZm9yICh4aSA9IDA7IHhpIDwgeC5sZW5ndGg7ICsreGkpIHtcbiAgICBwYWNrZXQgPSB4W3hpXTtcbiAgICBpZiAocGFja2V0LmlkID09IHNoZWV0cm9vdHJlZilcbiAgICAgIGRvY3Jvb3QgPSBwYWNrZXQ7XG4gIH1cbiAgdmFyIHBiID0gcGFyc2Vfc2hhbGxvdyhkb2Nyb290Lm1lc3NhZ2VzWzBdLmRhdGEpO1xuICB7XG4gICAgcGJbNl1bMF0uZGF0YSA9IHdyaXRlX3ZhcmludDQ5KHJhbmdlLmUuciArIDEpO1xuICAgIHBiWzddWzBdLmRhdGEgPSB3cml0ZV92YXJpbnQ0OShyYW5nZS5lLmMgKyAxKTtcbiAgICB2YXIgY3J1aWRzcmVmID0gcGFyc2VfVFNQX1JlZmVyZW5jZShwYls0Nl1bMF0uZGF0YSk7XG4gICAgdmFyIG9sZGJ1Y2tldCA9IENGQi5maW5kKGNmYiwgZGVwZW5kZW50c1tjcnVpZHNyZWZdLmxvY2F0aW9uKTtcbiAgICB2YXIgX3ggPSBwYXJzZV9pd2FfZmlsZShkZWNvbXByZXNzX2l3YV9maWxlKG9sZGJ1Y2tldC5jb250ZW50KSk7XG4gICAge1xuICAgICAgZm9yICh2YXIgaiA9IDA7IGogPCBfeC5sZW5ndGg7ICsraikge1xuICAgICAgICBpZiAoX3hbal0uaWQgPT0gY3J1aWRzcmVmKVxuICAgICAgICAgIGJyZWFrO1xuICAgICAgfVxuICAgICAgaWYgKF94W2pdLmlkICE9IGNydWlkc3JlZilcbiAgICAgICAgdGhyb3cgXCJCYWQgQ29sdW1uUm93VUlETWFwQXJjaGl2ZVwiO1xuICAgICAgdmFyIGNydWlkcyA9IHBhcnNlX3NoYWxsb3coX3hbal0ubWVzc2FnZXNbMF0uZGF0YSk7XG4gICAgICBjcnVpZHNbMV0gPSBbXTtcbiAgICAgIGNydWlkc1syXSA9IFtdLCBjcnVpZHNbM10gPSBbXTtcbiAgICAgIGZvciAodmFyIEMgPSAwOyBDIDw9IHJhbmdlLmUuYzsgKytDKSB7XG4gICAgICAgIHZhciB1dWlkID0gW107XG4gICAgICAgIHV1aWRbMV0gPSB1dWlkWzJdID0gW3sgdHlwZTogMCwgZGF0YTogd3JpdGVfdmFyaW50NDkoQyArIDQyMDY5MCkgfV07XG4gICAgICAgIGNydWlkc1sxXS5wdXNoKHsgdHlwZTogMiwgZGF0YTogd3JpdGVfc2hhbGxvdyh1dWlkKSB9KTtcbiAgICAgICAgY3J1aWRzWzJdLnB1c2goeyB0eXBlOiAwLCBkYXRhOiB3cml0ZV92YXJpbnQ0OShDKSB9KTtcbiAgICAgICAgY3J1aWRzWzNdLnB1c2goeyB0eXBlOiAwLCBkYXRhOiB3cml0ZV92YXJpbnQ0OShDKSB9KTtcbiAgICAgIH1cbiAgICAgIGNydWlkc1s0XSA9IFtdO1xuICAgICAgY3J1aWRzWzVdID0gW10sIGNydWlkc1s2XSA9IFtdO1xuICAgICAgZm9yICh2YXIgUiA9IDA7IFIgPD0gcmFuZ2UuZS5yOyArK1IpIHtcbiAgICAgICAgdXVpZCA9IFtdO1xuICAgICAgICB1dWlkWzFdID0gdXVpZFsyXSA9IFt7IHR5cGU6IDAsIGRhdGE6IHdyaXRlX3ZhcmludDQ5KFIgKyA3MjYyNzApIH1dO1xuICAgICAgICBjcnVpZHNbNF0ucHVzaCh7IHR5cGU6IDIsIGRhdGE6IHdyaXRlX3NoYWxsb3codXVpZCkgfSk7XG4gICAgICAgIGNydWlkc1s1XS5wdXNoKHsgdHlwZTogMCwgZGF0YTogd3JpdGVfdmFyaW50NDkoUikgfSk7XG4gICAgICAgIGNydWlkc1s2XS5wdXNoKHsgdHlwZTogMCwgZGF0YTogd3JpdGVfdmFyaW50NDkoUikgfSk7XG4gICAgICB9XG4gICAgICBfeFtqXS5tZXNzYWdlc1swXS5kYXRhID0gd3JpdGVfc2hhbGxvdyhjcnVpZHMpO1xuICAgIH1cbiAgICBvbGRidWNrZXQuY29udGVudCA9IGNvbXByZXNzX2l3YV9maWxlKHdyaXRlX2l3YV9maWxlKF94KSk7XG4gICAgb2xkYnVja2V0LnNpemUgPSBvbGRidWNrZXQuY29udGVudC5sZW5ndGg7XG4gICAgZGVsZXRlIHBiWzQ2XTtcbiAgICB2YXIgc3RvcmUgPSBwYXJzZV9zaGFsbG93KHBiWzRdWzBdLmRhdGEpO1xuICAgIHtcbiAgICAgIHN0b3JlWzddWzBdLmRhdGEgPSB3cml0ZV92YXJpbnQ0OShyYW5nZS5lLnIgKyAxKTtcbiAgICAgIHZhciByb3dfaGVhZGVycyA9IHBhcnNlX3NoYWxsb3coc3RvcmVbMV1bMF0uZGF0YSk7XG4gICAgICB2YXIgcm93X2hlYWRlcl9yZWYgPSBwYXJzZV9UU1BfUmVmZXJlbmNlKHJvd19oZWFkZXJzWzJdWzBdLmRhdGEpO1xuICAgICAgb2xkYnVja2V0ID0gQ0ZCLmZpbmQoY2ZiLCBkZXBlbmRlbnRzW3Jvd19oZWFkZXJfcmVmXS5sb2NhdGlvbik7XG4gICAgICBfeCA9IHBhcnNlX2l3YV9maWxlKGRlY29tcHJlc3NfaXdhX2ZpbGUob2xkYnVja2V0LmNvbnRlbnQpKTtcbiAgICAgIHtcbiAgICAgICAgaWYgKF94WzBdLmlkICE9IHJvd19oZWFkZXJfcmVmKVxuICAgICAgICAgIHRocm93IFwiQmFkIEhlYWRlclN0b3JhZ2VCdWNrZXRcIjtcbiAgICAgICAgdmFyIGJhc2VfYnVja2V0ID0gcGFyc2Vfc2hhbGxvdyhfeFswXS5tZXNzYWdlc1swXS5kYXRhKTtcbiAgICAgICAgZm9yIChSID0gMDsgUiA8IGRhdGEubGVuZ3RoOyArK1IpIHtcbiAgICAgICAgICB2YXIgX2J1Y2tldCA9IHBhcnNlX3NoYWxsb3coYmFzZV9idWNrZXRbMl1bMF0uZGF0YSk7XG4gICAgICAgICAgX2J1Y2tldFsxXVswXS5kYXRhID0gd3JpdGVfdmFyaW50NDkoUik7XG4gICAgICAgICAgX2J1Y2tldFs0XVswXS5kYXRhID0gd3JpdGVfdmFyaW50NDkoZGF0YVtSXS5sZW5ndGgpO1xuICAgICAgICAgIGJhc2VfYnVja2V0WzJdW1JdID0geyB0eXBlOiBiYXNlX2J1Y2tldFsyXVswXS50eXBlLCBkYXRhOiB3cml0ZV9zaGFsbG93KF9idWNrZXQpIH07XG4gICAgICAgIH1cbiAgICAgICAgX3hbMF0ubWVzc2FnZXNbMF0uZGF0YSA9IHdyaXRlX3NoYWxsb3coYmFzZV9idWNrZXQpO1xuICAgICAgfVxuICAgICAgb2xkYnVja2V0LmNvbnRlbnQgPSBjb21wcmVzc19pd2FfZmlsZSh3cml0ZV9pd2FfZmlsZShfeCkpO1xuICAgICAgb2xkYnVja2V0LnNpemUgPSBvbGRidWNrZXQuY29udGVudC5sZW5ndGg7XG4gICAgICB2YXIgY29sX2hlYWRlcl9yZWYgPSBwYXJzZV9UU1BfUmVmZXJlbmNlKHN0b3JlWzJdWzBdLmRhdGEpO1xuICAgICAgb2xkYnVja2V0ID0gQ0ZCLmZpbmQoY2ZiLCBkZXBlbmRlbnRzW2NvbF9oZWFkZXJfcmVmXS5sb2NhdGlvbik7XG4gICAgICBfeCA9IHBhcnNlX2l3YV9maWxlKGRlY29tcHJlc3NfaXdhX2ZpbGUob2xkYnVja2V0LmNvbnRlbnQpKTtcbiAgICAgIHtcbiAgICAgICAgaWYgKF94WzBdLmlkICE9IGNvbF9oZWFkZXJfcmVmKVxuICAgICAgICAgIHRocm93IFwiQmFkIEhlYWRlclN0b3JhZ2VCdWNrZXRcIjtcbiAgICAgICAgYmFzZV9idWNrZXQgPSBwYXJzZV9zaGFsbG93KF94WzBdLm1lc3NhZ2VzWzBdLmRhdGEpO1xuICAgICAgICBmb3IgKEMgPSAwOyBDIDw9IHJhbmdlLmUuYzsgKytDKSB7XG4gICAgICAgICAgX2J1Y2tldCA9IHBhcnNlX3NoYWxsb3coYmFzZV9idWNrZXRbMl1bMF0uZGF0YSk7XG4gICAgICAgICAgX2J1Y2tldFsxXVswXS5kYXRhID0gd3JpdGVfdmFyaW50NDkoQyk7XG4gICAgICAgICAgX2J1Y2tldFs0XVswXS5kYXRhID0gd3JpdGVfdmFyaW50NDkocmFuZ2UuZS5yICsgMSk7XG4gICAgICAgICAgYmFzZV9idWNrZXRbMl1bQ10gPSB7IHR5cGU6IGJhc2VfYnVja2V0WzJdWzBdLnR5cGUsIGRhdGE6IHdyaXRlX3NoYWxsb3coX2J1Y2tldCkgfTtcbiAgICAgICAgfVxuICAgICAgICBfeFswXS5tZXNzYWdlc1swXS5kYXRhID0gd3JpdGVfc2hhbGxvdyhiYXNlX2J1Y2tldCk7XG4gICAgICB9XG4gICAgICBvbGRidWNrZXQuY29udGVudCA9IGNvbXByZXNzX2l3YV9maWxlKHdyaXRlX2l3YV9maWxlKF94KSk7XG4gICAgICBvbGRidWNrZXQuc2l6ZSA9IG9sZGJ1Y2tldC5jb250ZW50Lmxlbmd0aDtcbiAgICAgIHZhciBzc3RyZWYgPSBwYXJzZV9UU1BfUmVmZXJlbmNlKHN0b3JlWzRdWzBdLmRhdGEpO1xuICAgICAgKGZ1bmN0aW9uKCkge1xuICAgICAgICB2YXIgc2VudHJ5ID0gQ0ZCLmZpbmQoY2ZiLCBkZXBlbmRlbnRzW3NzdHJlZl0ubG9jYXRpb24pO1xuICAgICAgICB2YXIgc3ggPSBwYXJzZV9pd2FfZmlsZShkZWNvbXByZXNzX2l3YV9maWxlKHNlbnRyeS5jb250ZW50KSk7XG4gICAgICAgIHZhciBzc3Ryb290O1xuICAgICAgICBmb3IgKHZhciBzeGkgPSAwOyBzeGkgPCBzeC5sZW5ndGg7ICsrc3hpKSB7XG4gICAgICAgICAgdmFyIHBhY2tldDIgPSBzeFtzeGldO1xuICAgICAgICAgIGlmIChwYWNrZXQyLmlkID09IHNzdHJlZilcbiAgICAgICAgICAgIHNzdHJvb3QgPSBwYWNrZXQyO1xuICAgICAgICB9XG4gICAgICAgIHZhciBzc3RkYXRhID0gcGFyc2Vfc2hhbGxvdyhzc3Ryb290Lm1lc3NhZ2VzWzBdLmRhdGEpO1xuICAgICAgICB7XG4gICAgICAgICAgc3N0ZGF0YVszXSA9IFtdO1xuICAgICAgICAgIHZhciBuZXdzc3QgPSBbXTtcbiAgICAgICAgICBTU1QuZm9yRWFjaChmdW5jdGlvbihzdHIsIGkpIHtcbiAgICAgICAgICAgIG5ld3NzdFsxXSA9IFt7IHR5cGU6IDAsIGRhdGE6IHdyaXRlX3ZhcmludDQ5KGkpIH1dO1xuICAgICAgICAgICAgbmV3c3N0WzJdID0gW3sgdHlwZTogMCwgZGF0YTogd3JpdGVfdmFyaW50NDkoMSkgfV07XG4gICAgICAgICAgICBuZXdzc3RbM10gPSBbeyB0eXBlOiAyLCBkYXRhOiBzdHJ1OChzdHIpIH1dO1xuICAgICAgICAgICAgc3N0ZGF0YVszXS5wdXNoKHsgdHlwZTogMiwgZGF0YTogd3JpdGVfc2hhbGxvdyhuZXdzc3QpIH0pO1xuICAgICAgICAgIH0pO1xuICAgICAgICB9XG4gICAgICAgIHNzdHJvb3QubWVzc2FnZXNbMF0uZGF0YSA9IHdyaXRlX3NoYWxsb3coc3N0ZGF0YSk7XG4gICAgICAgIHZhciBzeSA9IHdyaXRlX2l3YV9maWxlKHN4KTtcbiAgICAgICAgdmFyIHJhdzMyID0gY29tcHJlc3NfaXdhX2ZpbGUoc3kpO1xuICAgICAgICBzZW50cnkuY29udGVudCA9IHJhdzMyO1xuICAgICAgICBzZW50cnkuc2l6ZSA9IHNlbnRyeS5jb250ZW50Lmxlbmd0aDtcbiAgICAgIH0pKCk7XG4gICAgICB2YXIgdGlsZSA9IHBhcnNlX3NoYWxsb3coc3RvcmVbM11bMF0uZGF0YSk7XG4gICAgICB7XG4gICAgICAgIHZhciB0ID0gdGlsZVsxXVswXTtcbiAgICAgICAgZGVsZXRlIHRpbGVbMl07XG4gICAgICAgIHZhciB0bCA9IHBhcnNlX3NoYWxsb3codC5kYXRhKTtcbiAgICAgICAge1xuICAgICAgICAgIHZhciB0aWxlcmVmID0gcGFyc2VfVFNQX1JlZmVyZW5jZSh0bFsyXVswXS5kYXRhKTtcbiAgICAgICAgICAoZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICB2YXIgdGVudHJ5ID0gQ0ZCLmZpbmQoY2ZiLCBkZXBlbmRlbnRzW3RpbGVyZWZdLmxvY2F0aW9uKTtcbiAgICAgICAgICAgIHZhciB0eCA9IHBhcnNlX2l3YV9maWxlKGRlY29tcHJlc3NfaXdhX2ZpbGUodGVudHJ5LmNvbnRlbnQpKTtcbiAgICAgICAgICAgIHZhciB0aWxlcm9vdDtcbiAgICAgICAgICAgIGZvciAodmFyIHN4aSA9IDA7IHN4aSA8IHR4Lmxlbmd0aDsgKytzeGkpIHtcbiAgICAgICAgICAgICAgdmFyIHBhY2tldDIgPSB0eFtzeGldO1xuICAgICAgICAgICAgICBpZiAocGFja2V0Mi5pZCA9PSB0aWxlcmVmKVxuICAgICAgICAgICAgICAgIHRpbGVyb290ID0gcGFja2V0MjtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHZhciB0aWxlZGF0YSA9IHBhcnNlX3NoYWxsb3codGlsZXJvb3QubWVzc2FnZXNbMF0uZGF0YSk7XG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgIGRlbGV0ZSB0aWxlZGF0YVs2XTtcbiAgICAgICAgICAgICAgZGVsZXRlIHRpbGVbN107XG4gICAgICAgICAgICAgIHZhciByb3dsb2FkID0gbmV3IFVpbnQ4QXJyYXkodGlsZWRhdGFbNV1bMF0uZGF0YSk7XG4gICAgICAgICAgICAgIHRpbGVkYXRhWzVdID0gW107XG4gICAgICAgICAgICAgIHZhciBjbnQgPSAwO1xuICAgICAgICAgICAgICBmb3IgKHZhciBSMiA9IDA7IFIyIDw9IHJhbmdlLmUucjsgKytSMikge1xuICAgICAgICAgICAgICAgIHZhciB0aWxlcm93ID0gcGFyc2Vfc2hhbGxvdyhyb3dsb2FkKTtcbiAgICAgICAgICAgICAgICBjbnQgKz0gd3JpdGVfdGlsZV9yb3codGlsZXJvdywgZGF0YVtSMl0sIFNTVCk7XG4gICAgICAgICAgICAgICAgdGlsZXJvd1sxXVswXS5kYXRhID0gd3JpdGVfdmFyaW50NDkoUjIpO1xuICAgICAgICAgICAgICAgIHRpbGVkYXRhWzVdLnB1c2goeyBkYXRhOiB3cml0ZV9zaGFsbG93KHRpbGVyb3cpLCB0eXBlOiAyIH0pO1xuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgIHRpbGVkYXRhWzFdID0gW3sgdHlwZTogMCwgZGF0YTogd3JpdGVfdmFyaW50NDkocmFuZ2UuZS5jICsgMSkgfV07XG4gICAgICAgICAgICAgIHRpbGVkYXRhWzJdID0gW3sgdHlwZTogMCwgZGF0YTogd3JpdGVfdmFyaW50NDkocmFuZ2UuZS5yICsgMSkgfV07XG4gICAgICAgICAgICAgIHRpbGVkYXRhWzNdID0gW3sgdHlwZTogMCwgZGF0YTogd3JpdGVfdmFyaW50NDkoY250KSB9XTtcbiAgICAgICAgICAgICAgdGlsZWRhdGFbNF0gPSBbeyB0eXBlOiAwLCBkYXRhOiB3cml0ZV92YXJpbnQ0OShyYW5nZS5lLnIgKyAxKSB9XTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHRpbGVyb290Lm1lc3NhZ2VzWzBdLmRhdGEgPSB3cml0ZV9zaGFsbG93KHRpbGVkYXRhKTtcbiAgICAgICAgICAgIHZhciB0eSA9IHdyaXRlX2l3YV9maWxlKHR4KTtcbiAgICAgICAgICAgIHZhciByYXczMiA9IGNvbXByZXNzX2l3YV9maWxlKHR5KTtcbiAgICAgICAgICAgIHRlbnRyeS5jb250ZW50ID0gcmF3MzI7XG4gICAgICAgICAgICB0ZW50cnkuc2l6ZSA9IHRlbnRyeS5jb250ZW50Lmxlbmd0aDtcbiAgICAgICAgICB9KSgpO1xuICAgICAgICB9XG4gICAgICAgIHQuZGF0YSA9IHdyaXRlX3NoYWxsb3codGwpO1xuICAgICAgfVxuICAgICAgc3RvcmVbM11bMF0uZGF0YSA9IHdyaXRlX3NoYWxsb3codGlsZSk7XG4gICAgfVxuICAgIHBiWzRdWzBdLmRhdGEgPSB3cml0ZV9zaGFsbG93KHN0b3JlKTtcbiAgfVxuICBkb2Nyb290Lm1lc3NhZ2VzWzBdLmRhdGEgPSB3cml0ZV9zaGFsbG93KHBiKTtcbiAgdmFyIHkgPSB3cml0ZV9pd2FfZmlsZSh4KTtcbiAgdmFyIHJhdzMgPSBjb21wcmVzc19pd2FfZmlsZSh5KTtcbiAgZW50cnkuY29udGVudCA9IHJhdzM7XG4gIGVudHJ5LnNpemUgPSBlbnRyeS5jb250ZW50Lmxlbmd0aDtcbiAgcmV0dXJuIGNmYjtcbn1cbmZ1bmN0aW9uIGZpeF9vcHRzX2Z1bmMoZGVmYXVsdHMvKjpBcnJheTxBcnJheTxhbnk+ID4qLykvKjp7KG86YW55KTp2b2lkfSovIHtcblx0cmV0dXJuIGZ1bmN0aW9uIGZpeF9vcHRzKG9wdHMpIHtcblx0XHRmb3IodmFyIGkgPSAwOyBpICE9IGRlZmF1bHRzLmxlbmd0aDsgKytpKSB7XG5cdFx0XHR2YXIgZCA9IGRlZmF1bHRzW2ldO1xuXHRcdFx0aWYob3B0c1tkWzBdXSA9PT0gdW5kZWZpbmVkKSBvcHRzW2RbMF1dID0gZFsxXTtcblx0XHRcdGlmKGRbMl0gPT09ICduJykgb3B0c1tkWzBdXSA9IE51bWJlcihvcHRzW2RbMF1dKTtcblx0XHR9XG5cdH07XG59XG5cbmZ1bmN0aW9uIGZpeF9yZWFkX29wdHMob3B0cykge1xuZml4X29wdHNfZnVuYyhbXG5cdFsnY2VsbE5GJywgZmFsc2VdLCAvKiBlbWl0IGNlbGwgbnVtYmVyIGZvcm1hdCBzdHJpbmcgYXMgLnogKi9cblx0WydjZWxsSFRNTCcsIHRydWVdLCAvKiBlbWl0IGh0bWwgc3RyaW5nIGFzIC5oICovXG5cdFsnY2VsbEZvcm11bGEnLCB0cnVlXSwgLyogZW1pdCBmb3JtdWxhZSBhcyAuZiAqL1xuXHRbJ2NlbGxTdHlsZXMnLCBmYWxzZV0sIC8qIGVtaXRzIHN0eWxlL3RoZW1lIGFzIC5zICovXG5cdFsnY2VsbFRleHQnLCB0cnVlXSwgLyogZW1pdCBmb3JtYXR0ZWQgdGV4dCBhcyAudyAqL1xuXHRbJ2NlbGxEYXRlcycsIGZhbHNlXSwgLyogZW1pdCBkYXRlIGNlbGxzIHdpdGggdHlwZSBgZGAgKi9cblxuXHRbJ3NoZWV0U3R1YnMnLCBmYWxzZV0sIC8qIGVtaXQgZW1wdHkgY2VsbHMgKi9cblx0WydzaGVldFJvd3MnLCAwLCAnbiddLCAvKiByZWFkIG4gcm93cyAoMCA9IHJlYWQgYWxsIHJvd3MpICovXG5cblx0Wydib29rRGVwcycsIGZhbHNlXSwgLyogcGFyc2UgY2FsY3VsYXRpb24gY2hhaW5zICovXG5cdFsnYm9va1NoZWV0cycsIGZhbHNlXSwgLyogb25seSB0cnkgdG8gZ2V0IHNoZWV0IG5hbWVzIChubyBTaGVldHMpICovXG5cdFsnYm9va1Byb3BzJywgZmFsc2VdLCAvKiBvbmx5IHRyeSB0byBnZXQgcHJvcGVydGllcyAobm8gU2hlZXRzKSAqL1xuXHRbJ2Jvb2tGaWxlcycsIGZhbHNlXSwgLyogaW5jbHVkZSByYXcgZmlsZSBzdHJ1Y3R1cmUgKGtleXMsIGZpbGVzLCBjZmIpICovXG5cdFsnYm9va1ZCQScsIGZhbHNlXSwgLyogaW5jbHVkZSB2YmEgcmF3IGRhdGEgKHZiYXJhdykgKi9cblxuXHRbJ3Bhc3N3b3JkJywnJ10sIC8qIHBhc3N3b3JkICovXG5cdFsnV1RGJywgZmFsc2VdIC8qIFdURiBtb2RlICh0aHJvd3MgZXJyb3JzKSAqL1xuXSkob3B0cyk7XG59XG5cbmZ1bmN0aW9uIGZpeF93cml0ZV9vcHRzKG9wdHMpIHtcbmZpeF9vcHRzX2Z1bmMoW1xuXHRbJ2NlbGxEYXRlcycsIGZhbHNlXSwgLyogd3JpdGUgZGF0ZSBjZWxscyB3aXRoIHR5cGUgYGRgICovXG5cblx0Wydib29rU1NUJywgZmFsc2VdLCAvKiBHZW5lcmF0ZSBTaGFyZWQgU3RyaW5nIFRhYmxlICovXG5cblx0Wydib29rVHlwZScsICd4bHN4J10sIC8qIFR5cGUgb2Ygd29ya2Jvb2sgKHhsc3gvbS9iKSAqL1xuXG5cdFsnY29tcHJlc3Npb24nLCBmYWxzZV0sIC8qIFVzZSBmaWxlIGNvbXByZXNzaW9uICovXG5cblx0WydXVEYnLCBmYWxzZV0gLyogV1RGIG1vZGUgKHRocm93cyBlcnJvcnMpICovXG5dKShvcHRzKTtcbn1cbmZ1bmN0aW9uIGdldF9zaGVldF90eXBlKG4vKjpzdHJpbmcqLykvKjpzdHJpbmcqLyB7XG5cdGlmKFJFTFMuV1MuaW5kZXhPZihuKSA+IC0xKSByZXR1cm4gXCJzaGVldFwiO1xuXHRpZihSRUxTLkNTICYmIG4gPT0gUkVMUy5DUykgcmV0dXJuIFwiY2hhcnRcIjtcblx0aWYoUkVMUy5EUyAmJiBuID09IFJFTFMuRFMpIHJldHVybiBcImRpYWxvZ1wiO1xuXHRpZihSRUxTLk1TICYmIG4gPT0gUkVMUy5NUykgcmV0dXJuIFwibWFjcm9cIjtcblx0cmV0dXJuIChuICYmIG4ubGVuZ3RoKSA/IG4gOiBcInNoZWV0XCI7XG59XG5mdW5jdGlvbiBzYWZlX3BhcnNlX3dicmVscyh3YnJlbHMsIHNoZWV0cykge1xuXHRpZighd2JyZWxzKSByZXR1cm4gMDtcblx0dHJ5IHtcblx0XHR3YnJlbHMgPSBzaGVldHMubWFwKGZ1bmN0aW9uIHB3YnIodykgeyBpZighdy5pZCkgdy5pZCA9IHcuc3RyUmVsSUQ7IHJldHVybiBbdy5uYW1lLCB3YnJlbHNbJyFpZCddW3cuaWRdLlRhcmdldCwgZ2V0X3NoZWV0X3R5cGUod2JyZWxzWychaWQnXVt3LmlkXS5UeXBlKV07IH0pO1xuXHR9IGNhdGNoKGUpIHsgcmV0dXJuIG51bGw7IH1cblx0cmV0dXJuICF3YnJlbHMgfHwgd2JyZWxzLmxlbmd0aCA9PT0gMCA/IG51bGwgOiB3YnJlbHM7XG59XG5cbmZ1bmN0aW9uIHNhZmVfcGFyc2Vfc2hlZXQoemlwLCBwYXRoLyo6c3RyaW5nKi8sIHJlbHNQYXRoLyo6c3RyaW5nKi8sIHNoZWV0LCBpZHgvKjpudW1iZXIqLywgc2hlZXRSZWxzLCBzaGVldHMsIHN0eXBlLyo6c3RyaW5nKi8sIG9wdHMsIHdiLCB0aGVtZXMsIHN0eWxlcykge1xuXHR0cnkge1xuXHRcdHNoZWV0UmVsc1tzaGVldF09cGFyc2VfcmVscyhnZXR6aXBzdHIoemlwLCByZWxzUGF0aCwgdHJ1ZSksIHBhdGgpO1xuXHRcdHZhciBkYXRhID0gZ2V0emlwZGF0YSh6aXAsIHBhdGgpO1xuXHRcdHZhciBfd3M7XG5cdFx0c3dpdGNoKHN0eXBlKSB7XG5cdFx0XHRjYXNlICdzaGVldCc6ICBfd3MgPSBwYXJzZV93cyhkYXRhLCBwYXRoLCBpZHgsIG9wdHMsIHNoZWV0UmVsc1tzaGVldF0sIHdiLCB0aGVtZXMsIHN0eWxlcyk7IGJyZWFrO1xuXHRcdFx0Y2FzZSAnY2hhcnQnOiAgX3dzID0gcGFyc2VfY3MoZGF0YSwgcGF0aCwgaWR4LCBvcHRzLCBzaGVldFJlbHNbc2hlZXRdLCB3YiwgdGhlbWVzLCBzdHlsZXMpO1xuXHRcdFx0XHRpZighX3dzIHx8ICFfd3NbJyFkcmF3ZWwnXSkgYnJlYWs7XG5cdFx0XHRcdHZhciBkZmlsZSA9IHJlc29sdmVfcGF0aChfd3NbJyFkcmF3ZWwnXS5UYXJnZXQsIHBhdGgpO1xuXHRcdFx0XHR2YXIgZHJlbHNwID0gZ2V0X3JlbHNfcGF0aChkZmlsZSk7XG5cdFx0XHRcdHZhciBkcmF3ID0gcGFyc2VfZHJhd2luZyhnZXR6aXBzdHIoemlwLCBkZmlsZSwgdHJ1ZSksIHBhcnNlX3JlbHMoZ2V0emlwc3RyKHppcCwgZHJlbHNwLCB0cnVlKSwgZGZpbGUpKTtcblx0XHRcdFx0dmFyIGNoYXJ0cCA9IHJlc29sdmVfcGF0aChkcmF3LCBkZmlsZSk7XG5cdFx0XHRcdHZhciBjcmVsc3AgPSBnZXRfcmVsc19wYXRoKGNoYXJ0cCk7XG5cdFx0XHRcdF93cyA9IHBhcnNlX2NoYXJ0KGdldHppcHN0cih6aXAsIGNoYXJ0cCwgdHJ1ZSksIGNoYXJ0cCwgb3B0cywgcGFyc2VfcmVscyhnZXR6aXBzdHIoemlwLCBjcmVsc3AsIHRydWUpLCBjaGFydHApLCB3YiwgX3dzKTtcblx0XHRcdFx0YnJlYWs7XG5cdFx0XHRjYXNlICdtYWNybyc6ICBfd3MgPSBwYXJzZV9tcyhkYXRhLCBwYXRoLCBpZHgsIG9wdHMsIHNoZWV0UmVsc1tzaGVldF0sIHdiLCB0aGVtZXMsIHN0eWxlcyk7IGJyZWFrO1xuXHRcdFx0Y2FzZSAnZGlhbG9nJzogX3dzID0gcGFyc2VfZHMoZGF0YSwgcGF0aCwgaWR4LCBvcHRzLCBzaGVldFJlbHNbc2hlZXRdLCB3YiwgdGhlbWVzLCBzdHlsZXMpOyBicmVhaztcblx0XHRcdGRlZmF1bHQ6IHRocm93IG5ldyBFcnJvcihcIlVucmVjb2duaXplZCBzaGVldCB0eXBlIFwiICsgc3R5cGUpO1xuXHRcdH1cblx0XHRzaGVldHNbc2hlZXRdID0gX3dzO1xuXG5cdFx0Lyogc2NhbiByZWxzIGZvciBjb21tZW50cyBhbmQgdGhyZWFkZWQgY29tbWVudHMgKi9cblx0XHR2YXIgdGNvbW1lbnRzID0gW107XG5cdFx0aWYoc2hlZXRSZWxzICYmIHNoZWV0UmVsc1tzaGVldF0pIGtleXMoc2hlZXRSZWxzW3NoZWV0XSkuZm9yRWFjaChmdW5jdGlvbihuKSB7XG5cdFx0XHR2YXIgZGZpbGUgPSBcIlwiO1xuXHRcdFx0aWYoc2hlZXRSZWxzW3NoZWV0XVtuXS5UeXBlID09IFJFTFMuQ01OVCkge1xuXHRcdFx0XHRkZmlsZSA9IHJlc29sdmVfcGF0aChzaGVldFJlbHNbc2hlZXRdW25dLlRhcmdldCwgcGF0aCk7XG5cdFx0XHRcdHZhciBjb21tZW50cyA9IHBhcnNlX2NtbnQoZ2V0emlwZGF0YSh6aXAsIGRmaWxlLCB0cnVlKSwgZGZpbGUsIG9wdHMpO1xuXHRcdFx0XHRpZighY29tbWVudHMgfHwgIWNvbW1lbnRzLmxlbmd0aCkgcmV0dXJuO1xuXHRcdFx0XHRzaGVldF9pbnNlcnRfY29tbWVudHMoX3dzLCBjb21tZW50cywgZmFsc2UpO1xuXHRcdFx0fVxuXHRcdFx0aWYoc2hlZXRSZWxzW3NoZWV0XVtuXS5UeXBlID09IFJFTFMuVENNTlQpIHtcblx0XHRcdFx0ZGZpbGUgPSByZXNvbHZlX3BhdGgoc2hlZXRSZWxzW3NoZWV0XVtuXS5UYXJnZXQsIHBhdGgpO1xuXHRcdFx0XHR0Y29tbWVudHMgPSB0Y29tbWVudHMuY29uY2F0KHBhcnNlX3RjbW50X3htbChnZXR6aXBkYXRhKHppcCwgZGZpbGUsIHRydWUpLCBvcHRzKSk7XG5cdFx0XHR9XG5cdFx0fSk7XG5cdFx0aWYodGNvbW1lbnRzICYmIHRjb21tZW50cy5sZW5ndGgpIHNoZWV0X2luc2VydF9jb21tZW50cyhfd3MsIHRjb21tZW50cywgdHJ1ZSwgb3B0cy5wZW9wbGUgfHwgW10pO1xuXHR9IGNhdGNoKGUpIHsgaWYob3B0cy5XVEYpIHRocm93IGU7IH1cbn1cblxuZnVuY3Rpb24gc3RyaXBfZnJvbnRfc2xhc2goeC8qOnN0cmluZyovKS8qOnN0cmluZyovIHsgcmV0dXJuIHguY2hhckF0KDApID09ICcvJyA/IHguc2xpY2UoMSkgOiB4OyB9XG5cbmZ1bmN0aW9uIHBhcnNlX3ppcCh6aXAvKjpaSVAqLywgb3B0cy8qOj9QYXJzZU9wdHMqLykvKjpXb3JrYm9vayovIHtcblx0bWFrZV9zc2YoKTtcblx0b3B0cyA9IG9wdHMgfHwge307XG5cdGZpeF9yZWFkX29wdHMob3B0cyk7XG5cblx0LyogT3BlbkRvY3VtZW50IFBhcnQgMyBTZWN0aW9uIDIuMi4xIE9wZW5Eb2N1bWVudCBQYWNrYWdlICovXG5cdGlmKHNhZmVnZXR6aXBmaWxlKHppcCwgJ01FVEEtSU5GL21hbmlmZXN0LnhtbCcpKSByZXR1cm4gcGFyc2Vfb2RzKHppcCwgb3B0cyk7XG5cdC8qIFVPQyAqL1xuXHRpZihzYWZlZ2V0emlwZmlsZSh6aXAsICdvYmplY3RkYXRhLnhtbCcpKSByZXR1cm4gcGFyc2Vfb2RzKHppcCwgb3B0cyk7XG5cdC8qIE51bWJlcnMgKi9cblx0aWYoc2FmZWdldHppcGZpbGUoemlwLCAnSW5kZXgvRG9jdW1lbnQuaXdhJykpIHtcblx0XHRpZih0eXBlb2YgVWludDhBcnJheSA9PSBcInVuZGVmaW5lZFwiKSB0aHJvdyBuZXcgRXJyb3IoJ05VTUJFUlMgZmlsZSBwYXJzaW5nIHJlcXVpcmVzIFVpbnQ4QXJyYXkgc3VwcG9ydCcpO1xuXHRcdGlmKHR5cGVvZiBwYXJzZV9udW1iZXJzX2l3YSAhPSBcInVuZGVmaW5lZFwiKSB7XG5cdFx0XHRpZih6aXAuRmlsZUluZGV4KSByZXR1cm4gcGFyc2VfbnVtYmVyc19pd2EoemlwKTtcblx0XHRcdHZhciBfemlwID0gQ0ZCLnV0aWxzLmNmYl9uZXcoKTtcblx0XHRcdHppcGVudHJpZXMoemlwKS5mb3JFYWNoKGZ1bmN0aW9uKGUpIHsgemlwX2FkZF9maWxlKF96aXAsIGUsIGdldHppcGJpbih6aXAsIGUpKTsgfSk7XG5cdFx0XHRyZXR1cm4gcGFyc2VfbnVtYmVyc19pd2EoX3ppcCk7XG5cdFx0fVxuXHRcdHRocm93IG5ldyBFcnJvcignVW5zdXBwb3J0ZWQgTlVNQkVSUyBmaWxlJyk7XG5cdH1cblx0aWYoIXNhZmVnZXR6aXBmaWxlKHppcCwgJ1tDb250ZW50X1R5cGVzXS54bWwnKSkge1xuXHRcdGlmKHNhZmVnZXR6aXBmaWxlKHppcCwgJ2luZGV4LnhtbC5neicpKSB0aHJvdyBuZXcgRXJyb3IoJ1Vuc3VwcG9ydGVkIE5VTUJFUlMgMDggZmlsZScpO1xuXHRcdGlmKHNhZmVnZXR6aXBmaWxlKHppcCwgJ2luZGV4LnhtbCcpKSB0aHJvdyBuZXcgRXJyb3IoJ1Vuc3VwcG9ydGVkIE5VTUJFUlMgMDkgZmlsZScpO1xuXHRcdHRocm93IG5ldyBFcnJvcignVW5zdXBwb3J0ZWQgWklQIGZpbGUnKTtcblx0fVxuXG5cdHZhciBlbnRyaWVzID0gemlwZW50cmllcyh6aXApO1xuXHR2YXIgZGlyID0gcGFyc2VfY3QoKGdldHppcHN0cih6aXAsICdbQ29udGVudF9UeXBlc10ueG1sJykvKjo/YW55Ki8pKTtcblx0dmFyIHhsc2IgPSBmYWxzZTtcblx0dmFyIHNoZWV0cywgYmlubmFtZTtcblx0aWYoZGlyLndvcmtib29rcy5sZW5ndGggPT09IDApIHtcblx0XHRiaW5uYW1lID0gXCJ4bC93b3JrYm9vay54bWxcIjtcblx0XHRpZihnZXR6aXBkYXRhKHppcCxiaW5uYW1lLCB0cnVlKSkgZGlyLndvcmtib29rcy5wdXNoKGJpbm5hbWUpO1xuXHR9XG5cdGlmKGRpci53b3JrYm9va3MubGVuZ3RoID09PSAwKSB7XG5cdFx0YmlubmFtZSA9IFwieGwvd29ya2Jvb2suYmluXCI7XG5cdFx0aWYoIWdldHppcGRhdGEoemlwLGJpbm5hbWUsdHJ1ZSkpIHRocm93IG5ldyBFcnJvcihcIkNvdWxkIG5vdCBmaW5kIHdvcmtib29rXCIpO1xuXHRcdGRpci53b3JrYm9va3MucHVzaChiaW5uYW1lKTtcblx0XHR4bHNiID0gdHJ1ZTtcblx0fVxuXHRpZihkaXIud29ya2Jvb2tzWzBdLnNsaWNlKC0zKSA9PSBcImJpblwiKSB4bHNiID0gdHJ1ZTtcblxuXHR2YXIgdGhlbWVzID0gKHt9Lyo6YW55Ki8pO1xuXHR2YXIgc3R5bGVzID0gKHt9Lyo6YW55Ki8pO1xuXHRpZighb3B0cy5ib29rU2hlZXRzICYmICFvcHRzLmJvb2tQcm9wcykge1xuXHRcdHN0cnMgPSBbXTtcblx0XHRpZihkaXIuc3N0KSB0cnkgeyBzdHJzPXBhcnNlX3NzdChnZXR6aXBkYXRhKHppcCwgc3RyaXBfZnJvbnRfc2xhc2goZGlyLnNzdCkpLCBkaXIuc3N0LCBvcHRzKTsgfSBjYXRjaChlKSB7IGlmKG9wdHMuV1RGKSB0aHJvdyBlOyB9XG5cblx0XHRpZihvcHRzLmNlbGxTdHlsZXMgJiYgZGlyLnRoZW1lcy5sZW5ndGgpIHRoZW1lcyA9IHBhcnNlX3RoZW1lKGdldHppcHN0cih6aXAsIGRpci50aGVtZXNbMF0ucmVwbGFjZSgvXlxcLy8sJycpLCB0cnVlKXx8XCJcIixkaXIudGhlbWVzWzBdLCBvcHRzKTtcblxuXHRcdGlmKGRpci5zdHlsZSkgc3R5bGVzID0gcGFyc2Vfc3R5KGdldHppcGRhdGEoemlwLCBzdHJpcF9mcm9udF9zbGFzaChkaXIuc3R5bGUpKSwgZGlyLnN0eWxlLCB0aGVtZXMsIG9wdHMpO1xuXHR9XG5cblx0Lyp2YXIgZXh0ZXJuYm9va3MgPSAqL2Rpci5saW5rcy5tYXAoZnVuY3Rpb24obGluaykge1xuXHRcdHRyeSB7XG5cdFx0XHR2YXIgcmVscyA9IHBhcnNlX3JlbHMoZ2V0emlwc3RyKHppcCwgZ2V0X3JlbHNfcGF0aChzdHJpcF9mcm9udF9zbGFzaChsaW5rKSkpLCBsaW5rKTtcblx0XHRcdHJldHVybiBwYXJzZV94bGluayhnZXR6aXBkYXRhKHppcCwgc3RyaXBfZnJvbnRfc2xhc2gobGluaykpLCByZWxzLCBsaW5rLCBvcHRzKTtcblx0XHR9IGNhdGNoKGUpIHt9XG5cdH0pO1xuXG5cdHZhciB3YiA9IHBhcnNlX3diKGdldHppcGRhdGEoemlwLCBzdHJpcF9mcm9udF9zbGFzaChkaXIud29ya2Jvb2tzWzBdKSksIGRpci53b3JrYm9va3NbMF0sIG9wdHMpO1xuXG5cdHZhciBwcm9wcyA9IHt9LCBwcm9wZGF0YSA9IFwiXCI7XG5cblx0aWYoZGlyLmNvcmVwcm9wcy5sZW5ndGgpIHtcblx0XHRwcm9wZGF0YSA9IGdldHppcGRhdGEoemlwLCBzdHJpcF9mcm9udF9zbGFzaChkaXIuY29yZXByb3BzWzBdKSwgdHJ1ZSk7XG5cdFx0aWYocHJvcGRhdGEpIHByb3BzID0gcGFyc2VfY29yZV9wcm9wcyhwcm9wZGF0YSk7XG5cdFx0aWYoZGlyLmV4dHByb3BzLmxlbmd0aCAhPT0gMCkge1xuXHRcdFx0cHJvcGRhdGEgPSBnZXR6aXBkYXRhKHppcCwgc3RyaXBfZnJvbnRfc2xhc2goZGlyLmV4dHByb3BzWzBdKSwgdHJ1ZSk7XG5cdFx0XHRpZihwcm9wZGF0YSkgcGFyc2VfZXh0X3Byb3BzKHByb3BkYXRhLCBwcm9wcywgb3B0cyk7XG5cdFx0fVxuXHR9XG5cblx0dmFyIGN1c3Rwcm9wcyA9IHt9O1xuXHRpZighb3B0cy5ib29rU2hlZXRzIHx8IG9wdHMuYm9va1Byb3BzKSB7XG5cdFx0aWYgKGRpci5jdXN0cHJvcHMubGVuZ3RoICE9PSAwKSB7XG5cdFx0XHRwcm9wZGF0YSA9IGdldHppcHN0cih6aXAsIHN0cmlwX2Zyb250X3NsYXNoKGRpci5jdXN0cHJvcHNbMF0pLCB0cnVlKTtcblx0XHRcdGlmKHByb3BkYXRhKSBjdXN0cHJvcHMgPSBwYXJzZV9jdXN0X3Byb3BzKHByb3BkYXRhLCBvcHRzKTtcblx0XHR9XG5cdH1cblxuXHR2YXIgb3V0ID0gKHt9Lyo6YW55Ki8pO1xuXHRpZihvcHRzLmJvb2tTaGVldHMgfHwgb3B0cy5ib29rUHJvcHMpIHtcblx0XHRpZih3Yi5TaGVldHMpIHNoZWV0cyA9IHdiLlNoZWV0cy5tYXAoZnVuY3Rpb24gcGx1Y2soeCl7IHJldHVybiB4Lm5hbWU7IH0pO1xuXHRcdGVsc2UgaWYocHJvcHMuV29ya3NoZWV0cyAmJiBwcm9wcy5TaGVldE5hbWVzLmxlbmd0aCA+IDApIHNoZWV0cz1wcm9wcy5TaGVldE5hbWVzO1xuXHRcdGlmKG9wdHMuYm9va1Byb3BzKSB7IG91dC5Qcm9wcyA9IHByb3BzOyBvdXQuQ3VzdHByb3BzID0gY3VzdHByb3BzOyB9XG5cdFx0aWYob3B0cy5ib29rU2hlZXRzICYmIHR5cGVvZiBzaGVldHMgIT09ICd1bmRlZmluZWQnKSBvdXQuU2hlZXROYW1lcyA9IHNoZWV0cztcblx0XHRpZihvcHRzLmJvb2tTaGVldHMgPyBvdXQuU2hlZXROYW1lcyA6IG9wdHMuYm9va1Byb3BzKSByZXR1cm4gb3V0O1xuXHR9XG5cdHNoZWV0cyA9IHt9O1xuXG5cdHZhciBkZXBzID0ge307XG5cdGlmKG9wdHMuYm9va0RlcHMgJiYgZGlyLmNhbGNjaGFpbikgZGVwcz1wYXJzZV9jYyhnZXR6aXBkYXRhKHppcCwgc3RyaXBfZnJvbnRfc2xhc2goZGlyLmNhbGNjaGFpbikpLGRpci5jYWxjY2hhaW4sb3B0cyk7XG5cblx0dmFyIGk9MDtcblx0dmFyIHNoZWV0UmVscyA9ICh7fS8qOmFueSovKTtcblx0dmFyIHBhdGgsIHJlbHNQYXRoO1xuXG5cdHtcblx0XHR2YXIgd2JzaGVldHMgPSB3Yi5TaGVldHM7XG5cdFx0cHJvcHMuV29ya3NoZWV0cyA9IHdic2hlZXRzLmxlbmd0aDtcblx0XHRwcm9wcy5TaGVldE5hbWVzID0gW107XG5cdFx0Zm9yKHZhciBqID0gMDsgaiAhPSB3YnNoZWV0cy5sZW5ndGg7ICsraikge1xuXHRcdFx0cHJvcHMuU2hlZXROYW1lc1tqXSA9IHdic2hlZXRzW2pdLm5hbWU7XG5cdFx0fVxuXHR9XG5cblx0dmFyIHdiZXh0ID0geGxzYiA/IFwiYmluXCIgOiBcInhtbFwiO1xuXHR2YXIgd2JyZWxzaSA9IGRpci53b3JrYm9va3NbMF0ubGFzdEluZGV4T2YoXCIvXCIpO1xuXHR2YXIgd2JyZWxzZmlsZSA9IChkaXIud29ya2Jvb2tzWzBdLnNsaWNlKDAsIHdicmVsc2krMSkgKyBcIl9yZWxzL1wiICsgZGlyLndvcmtib29rc1swXS5zbGljZSh3YnJlbHNpKzEpICsgXCIucmVsc1wiKS5yZXBsYWNlKC9eXFwvLyxcIlwiKTtcblx0aWYoIXNhZmVnZXR6aXBmaWxlKHppcCwgd2JyZWxzZmlsZSkpIHdicmVsc2ZpbGUgPSAneGwvX3JlbHMvd29ya2Jvb2suJyArIHdiZXh0ICsgJy5yZWxzJztcblx0dmFyIHdicmVscyA9IHBhcnNlX3JlbHMoZ2V0emlwc3RyKHppcCwgd2JyZWxzZmlsZSwgdHJ1ZSksIHdicmVsc2ZpbGUucmVwbGFjZSgvX3JlbHMuKi8sIFwiczVzXCIpKTtcblxuXHRpZigoZGlyLm1ldGFkYXRhIHx8IFtdKS5sZW5ndGggPj0gMSkge1xuXHRcdC8qIFRPRE86IE1EWCBhbmQgb3RoZXIgdHlwZXMgb2YgbWV0YWRhdGEgKi9cblx0XHRvcHRzLnhsbWV0YSA9IHBhcnNlX3hsbWV0YShnZXR6aXBkYXRhKHppcCwgc3RyaXBfZnJvbnRfc2xhc2goZGlyLm1ldGFkYXRhWzBdKSksZGlyLm1ldGFkYXRhWzBdLG9wdHMpO1xuXHR9XG5cblx0aWYoKGRpci5wZW9wbGUgfHwgW10pLmxlbmd0aCA+PSAxKSB7XG5cdFx0b3B0cy5wZW9wbGUgPSBwYXJzZV9wZW9wbGVfeG1sKGdldHppcGRhdGEoemlwLCBzdHJpcF9mcm9udF9zbGFzaChkaXIucGVvcGxlWzBdKSksb3B0cyk7XG5cdH1cblxuXHRpZih3YnJlbHMpIHdicmVscyA9IHNhZmVfcGFyc2Vfd2JyZWxzKHdicmVscywgd2IuU2hlZXRzKTtcblxuXHQvKiBOdW1iZXJzIGlPUyBoYWNrICovXG5cdHZhciBubW9kZSA9IChnZXR6aXBkYXRhKHppcCxcInhsL3dvcmtzaGVldHMvc2hlZXQueG1sXCIsdHJ1ZSkpPzE6MDtcblx0d3Nsb29wOiBmb3IoaSA9IDA7IGkgIT0gcHJvcHMuV29ya3NoZWV0czsgKytpKSB7XG5cdFx0dmFyIHN0eXBlID0gXCJzaGVldFwiO1xuXHRcdGlmKHdicmVscyAmJiB3YnJlbHNbaV0pIHtcblx0XHRcdHBhdGggPSAneGwvJyArICh3YnJlbHNbaV1bMV0pLnJlcGxhY2UoL1tcXC9dP3hsXFwvLywgXCJcIik7XG5cdFx0XHRpZighc2FmZWdldHppcGZpbGUoemlwLCBwYXRoKSkgcGF0aCA9IHdicmVsc1tpXVsxXTtcblx0XHRcdGlmKCFzYWZlZ2V0emlwZmlsZSh6aXAsIHBhdGgpKSBwYXRoID0gd2JyZWxzZmlsZS5yZXBsYWNlKC9fcmVsc1xcLy4qJC8sXCJcIikgKyB3YnJlbHNbaV1bMV07XG5cdFx0XHRzdHlwZSA9IHdicmVsc1tpXVsyXTtcblx0XHR9IGVsc2Uge1xuXHRcdFx0cGF0aCA9ICd4bC93b3Jrc2hlZXRzL3NoZWV0JysoaSsxLW5tb2RlKStcIi5cIiArIHdiZXh0O1xuXHRcdFx0cGF0aCA9IHBhdGgucmVwbGFjZSgvc2hlZXQwXFwuLyxcInNoZWV0LlwiKTtcblx0XHR9XG5cdFx0cmVsc1BhdGggPSBwYXRoLnJlcGxhY2UoL14oLiopKFxcLykoW15cXC9dKikkLywgXCIkMS9fcmVscy8kMy5yZWxzXCIpO1xuXHRcdGlmKG9wdHMgJiYgb3B0cy5zaGVldHMgIT0gbnVsbCkgc3dpdGNoKHR5cGVvZiBvcHRzLnNoZWV0cykge1xuXHRcdFx0Y2FzZSBcIm51bWJlclwiOiBpZihpICE9IG9wdHMuc2hlZXRzKSBjb250aW51ZSB3c2xvb3A7IGJyZWFrO1xuXHRcdFx0Y2FzZSBcInN0cmluZ1wiOiBpZihwcm9wcy5TaGVldE5hbWVzW2ldLnRvTG93ZXJDYXNlKCkgIT0gb3B0cy5zaGVldHMudG9Mb3dlckNhc2UoKSkgY29udGludWUgd3Nsb29wOyBicmVhaztcblx0XHRcdGRlZmF1bHQ6IGlmKEFycmF5LmlzQXJyYXkgJiYgQXJyYXkuaXNBcnJheShvcHRzLnNoZWV0cykpIHtcblx0XHRcdFx0dmFyIHNuanNlZW4gPSBmYWxzZTtcblx0XHRcdFx0Zm9yKHZhciBzbmogPSAwOyBzbmogIT0gb3B0cy5zaGVldHMubGVuZ3RoOyArK3Nuaikge1xuXHRcdFx0XHRcdGlmKHR5cGVvZiBvcHRzLnNoZWV0c1tzbmpdID09IFwibnVtYmVyXCIgJiYgb3B0cy5zaGVldHNbc25qXSA9PSBpKSBzbmpzZWVuPTE7XG5cdFx0XHRcdFx0aWYodHlwZW9mIG9wdHMuc2hlZXRzW3Nual0gPT0gXCJzdHJpbmdcIiAmJiBvcHRzLnNoZWV0c1tzbmpdLnRvTG93ZXJDYXNlKCkgPT0gcHJvcHMuU2hlZXROYW1lc1tpXS50b0xvd2VyQ2FzZSgpKSBzbmpzZWVuID0gMTtcblx0XHRcdFx0fVxuXHRcdFx0XHRpZighc25qc2VlbikgY29udGludWUgd3Nsb29wO1xuXHRcdFx0fVxuXHRcdH1cblx0XHRzYWZlX3BhcnNlX3NoZWV0KHppcCwgcGF0aCwgcmVsc1BhdGgsIHByb3BzLlNoZWV0TmFtZXNbaV0sIGksIHNoZWV0UmVscywgc2hlZXRzLCBzdHlwZSwgb3B0cywgd2IsIHRoZW1lcywgc3R5bGVzKTtcblx0fVxuXG5cdG91dCA9ICh7XG5cdFx0RGlyZWN0b3J5OiBkaXIsXG5cdFx0V29ya2Jvb2s6IHdiLFxuXHRcdFByb3BzOiBwcm9wcyxcblx0XHRDdXN0cHJvcHM6IGN1c3Rwcm9wcyxcblx0XHREZXBzOiBkZXBzLFxuXHRcdFNoZWV0czogc2hlZXRzLFxuXHRcdFNoZWV0TmFtZXM6IHByb3BzLlNoZWV0TmFtZXMsXG5cdFx0U3RyaW5nczogc3Rycyxcblx0XHRTdHlsZXM6IHN0eWxlcyxcblx0XHRUaGVtZXM6IHRoZW1lcyxcblx0XHRTU0Y6IGR1cCh0YWJsZV9mbXQpXG5cdH0vKjphbnkqLyk7XG5cdGlmKG9wdHMgJiYgb3B0cy5ib29rRmlsZXMpIHtcblx0XHRpZih6aXAuZmlsZXMpIHtcblx0XHRcdG91dC5rZXlzID0gZW50cmllcztcblx0XHRcdG91dC5maWxlcyA9IHppcC5maWxlcztcblx0XHR9IGVsc2Uge1xuXHRcdFx0b3V0LmtleXMgPSBbXTtcblx0XHRcdG91dC5maWxlcyA9IHt9O1xuXHRcdFx0emlwLkZ1bGxQYXRocy5mb3JFYWNoKGZ1bmN0aW9uKHAsIGlkeCkge1xuXHRcdFx0XHRwID0gcC5yZXBsYWNlKC9eUm9vdCBFbnRyeVtcXC9dLywgXCJcIik7XG5cdFx0XHRcdG91dC5rZXlzLnB1c2gocCk7XG5cdFx0XHRcdG91dC5maWxlc1twXSA9IHppcC5GaWxlSW5kZXhbaWR4XTtcblx0XHRcdH0pO1xuXHRcdH1cblx0fVxuXHRpZihvcHRzICYmIG9wdHMuYm9va1ZCQSkge1xuXHRcdGlmKGRpci52YmEubGVuZ3RoID4gMCkgb3V0LnZiYXJhdyA9IGdldHppcGRhdGEoemlwLHN0cmlwX2Zyb250X3NsYXNoKGRpci52YmFbMF0pLHRydWUpO1xuXHRcdGVsc2UgaWYoZGlyLmRlZmF1bHRzICYmIGRpci5kZWZhdWx0cy5iaW4gPT09IENUX1ZCQSkgb3V0LnZiYXJhdyA9IGdldHppcGRhdGEoemlwLCAneGwvdmJhUHJvamVjdC5iaW4nLHRydWUpO1xuXHR9XG5cdHJldHVybiBvdXQ7XG59XG5cbi8qIFtNUy1PRkZDUllQVE9dIDIuMS4xICovXG5mdW5jdGlvbiBwYXJzZV94bHN4Y2ZiKGNmYiwgX29wdHMvKjo/UGFyc2VPcHRzKi8pLyo6V29ya2Jvb2sqLyB7XG5cdHZhciBvcHRzID0gX29wdHMgfHwge307XG5cdHZhciBmID0gJ1dvcmtib29rJywgZGF0YSA9IENGQi5maW5kKGNmYiwgZik7XG5cdHRyeSB7XG5cdGYgPSAnLyFEYXRhU3BhY2VzL1ZlcnNpb24nO1xuXHRkYXRhID0gQ0ZCLmZpbmQoY2ZiLCBmKTsgaWYoIWRhdGEgfHwgIWRhdGEuY29udGVudCkgdGhyb3cgbmV3IEVycm9yKFwiRUNNQS0zNzYgRW5jcnlwdGVkIGZpbGUgbWlzc2luZyBcIiArIGYpO1xuXHQvKnZhciB2ZXJzaW9uID0gKi9wYXJzZV9EYXRhU3BhY2VWZXJzaW9uSW5mbyhkYXRhLmNvbnRlbnQpO1xuXG5cdC8qIDIuMy40LjEgKi9cblx0ZiA9ICcvIURhdGFTcGFjZXMvRGF0YVNwYWNlTWFwJztcblx0ZGF0YSA9IENGQi5maW5kKGNmYiwgZik7IGlmKCFkYXRhIHx8ICFkYXRhLmNvbnRlbnQpIHRocm93IG5ldyBFcnJvcihcIkVDTUEtMzc2IEVuY3J5cHRlZCBmaWxlIG1pc3NpbmcgXCIgKyBmKTtcblx0dmFyIGRzbSA9IHBhcnNlX0RhdGFTcGFjZU1hcChkYXRhLmNvbnRlbnQpO1xuXHRpZihkc20ubGVuZ3RoICE9PSAxIHx8IGRzbVswXS5jb21wcy5sZW5ndGggIT09IDEgfHwgZHNtWzBdLmNvbXBzWzBdLnQgIT09IDAgfHwgZHNtWzBdLm5hbWUgIT09IFwiU3Ryb25nRW5jcnlwdGlvbkRhdGFTcGFjZVwiIHx8IGRzbVswXS5jb21wc1swXS52ICE9PSBcIkVuY3J5cHRlZFBhY2thZ2VcIilcblx0XHR0aHJvdyBuZXcgRXJyb3IoXCJFQ01BLTM3NiBFbmNyeXB0ZWQgZmlsZSBiYWQgXCIgKyBmKTtcblxuXHQvKiAyLjMuNC4yICovXG5cdGYgPSAnLyFEYXRhU3BhY2VzL0RhdGFTcGFjZUluZm8vU3Ryb25nRW5jcnlwdGlvbkRhdGFTcGFjZSc7XG5cdGRhdGEgPSBDRkIuZmluZChjZmIsIGYpOyBpZighZGF0YSB8fCAhZGF0YS5jb250ZW50KSB0aHJvdyBuZXcgRXJyb3IoXCJFQ01BLTM3NiBFbmNyeXB0ZWQgZmlsZSBtaXNzaW5nIFwiICsgZik7XG5cdHZhciBzZWRzID0gcGFyc2VfRGF0YVNwYWNlRGVmaW5pdGlvbihkYXRhLmNvbnRlbnQpO1xuXHRpZihzZWRzLmxlbmd0aCAhPSAxIHx8IHNlZHNbMF0gIT0gXCJTdHJvbmdFbmNyeXB0aW9uVHJhbnNmb3JtXCIpXG5cdFx0dGhyb3cgbmV3IEVycm9yKFwiRUNNQS0zNzYgRW5jcnlwdGVkIGZpbGUgYmFkIFwiICsgZik7XG5cblx0LyogMi4zLjQuMyAqL1xuXHRmID0gJy8hRGF0YVNwYWNlcy9UcmFuc2Zvcm1JbmZvL1N0cm9uZ0VuY3J5cHRpb25UcmFuc2Zvcm0vIVByaW1hcnknO1xuXHRkYXRhID0gQ0ZCLmZpbmQoY2ZiLCBmKTsgaWYoIWRhdGEgfHwgIWRhdGEuY29udGVudCkgdGhyb3cgbmV3IEVycm9yKFwiRUNNQS0zNzYgRW5jcnlwdGVkIGZpbGUgbWlzc2luZyBcIiArIGYpO1xuXHQvKnZhciBoZHIgPSAqL3BhcnNlX1ByaW1hcnkoZGF0YS5jb250ZW50KTtcblx0fSBjYXRjaChlKSB7fVxuXG5cdGYgPSAnL0VuY3J5cHRpb25JbmZvJztcblx0ZGF0YSA9IENGQi5maW5kKGNmYiwgZik7IGlmKCFkYXRhIHx8ICFkYXRhLmNvbnRlbnQpIHRocm93IG5ldyBFcnJvcihcIkVDTUEtMzc2IEVuY3J5cHRlZCBmaWxlIG1pc3NpbmcgXCIgKyBmKTtcblx0dmFyIGVpbmZvID0gcGFyc2VfRW5jcnlwdGlvbkluZm8oZGF0YS5jb250ZW50KTtcblxuXHQvKiAyLjMuNC40ICovXG5cdGYgPSAnL0VuY3J5cHRlZFBhY2thZ2UnO1xuXHRkYXRhID0gQ0ZCLmZpbmQoY2ZiLCBmKTsgaWYoIWRhdGEgfHwgIWRhdGEuY29udGVudCkgdGhyb3cgbmV3IEVycm9yKFwiRUNNQS0zNzYgRW5jcnlwdGVkIGZpbGUgbWlzc2luZyBcIiArIGYpO1xuXG4vKmdsb2JhbCBkZWNyeXB0X2FnaWxlICovXG4vKjo6IGRlY2xhcmUgdmFyIGRlY3J5cHRfYWdpbGU6YW55OyAqL1xuXHRpZihlaW5mb1swXSA9PSAweDA0ICYmIHR5cGVvZiBkZWNyeXB0X2FnaWxlICE9PSAndW5kZWZpbmVkJykgcmV0dXJuIGRlY3J5cHRfYWdpbGUoZWluZm9bMV0sIGRhdGEuY29udGVudCwgb3B0cy5wYXNzd29yZCB8fCBcIlwiLCBvcHRzKTtcbi8qZ2xvYmFsIGRlY3J5cHRfc3RkNzYgKi9cbi8qOjogZGVjbGFyZSB2YXIgZGVjcnlwdF9zdGQ3Njphbnk7ICovXG5cdGlmKGVpbmZvWzBdID09IDB4MDIgJiYgdHlwZW9mIGRlY3J5cHRfc3RkNzYgIT09ICd1bmRlZmluZWQnKSByZXR1cm4gZGVjcnlwdF9zdGQ3NihlaW5mb1sxXSwgZGF0YS5jb250ZW50LCBvcHRzLnBhc3N3b3JkIHx8IFwiXCIsIG9wdHMpO1xuXHR0aHJvdyBuZXcgRXJyb3IoXCJGaWxlIGlzIHBhc3N3b3JkLXByb3RlY3RlZFwiKTtcbn1cblxuZnVuY3Rpb24gd3JpdGVfemlwKHdiLyo6V29ya2Jvb2sqLywgb3B0cy8qOldyaXRlT3B0cyovKS8qOlpJUCovIHtcblx0aWYob3B0cy5ib29rVHlwZSA9PSBcIm9kc1wiKSByZXR1cm4gd3JpdGVfb2RzKHdiLCBvcHRzKTtcblx0aWYob3B0cy5ib29rVHlwZSA9PSBcIm51bWJlcnNcIikgcmV0dXJuIHdyaXRlX251bWJlcnNfaXdhKHdiLCBvcHRzKTtcblx0aWYob3B0cy5ib29rVHlwZSA9PSBcInhsc2JcIikgcmV0dXJuIHdyaXRlX3ppcF94bHN4Yih3Yiwgb3B0cyk7XG5cdHJldHVybiB3cml0ZV96aXBfeGxzeCh3Yiwgb3B0cyk7XG59XG5cbi8qIFhMU1ggYW5kIFhMU0Igd3JpdGluZyBhcmUgdmVyeSBzaW1pbGFyLiAgT3JpZ2luYWxseSB0aGV5IHdlcmUgdW5pZmllZCBpbiBvbmVcbiAgIGV4cG9ydCBmdW5jdGlvbi4gIFRoaXMgaXMgaG9ycmlibGUgZm9yIHRyZWUgc2hha2luZyBpbiB0aGUgY29tbW9uIGNhc2UgKG1vc3RcbiAgIGFwcGxpY2F0aW9ucyBuZWVkIHRvIGV4cG9ydCBmaWxlcyBpbiBvbmUgZm9ybWF0KSBzbyB0aGlzIGZ1bmN0aW9uIHN1cHBvcnRzXG4gICBib3RoIGZvcm1hdHMgd2hpbGUgd3JpdGVfemlwX3hsc3ggb25seSBoYW5kbGVzIFhMU1ggKi9cbmZ1bmN0aW9uIHdyaXRlX3ppcF94bHN4Yih3Yi8qOldvcmtib29rKi8sIG9wdHMvKjpXcml0ZU9wdHMqLykvKjpaSVAqLyB7XG5cdF9zaGFwZWlkID0gMTAyNDtcblx0aWYod2IgJiYgIXdiLlNTRikge1xuXHRcdHdiLlNTRiA9IGR1cCh0YWJsZV9mbXQpO1xuXHR9XG5cdGlmKHdiICYmIHdiLlNTRikge1xuXHRcdG1ha2Vfc3NmKCk7IFNTRl9sb2FkX3RhYmxlKHdiLlNTRik7XG5cdFx0Ly8gJEZsb3dJZ25vcmVcblx0XHRvcHRzLnJldnNzZiA9IGV2ZXJ0X251bSh3Yi5TU0YpOyBvcHRzLnJldnNzZlt3Yi5TU0ZbNjU1MzVdXSA9IDA7XG5cdFx0b3B0cy5zc2YgPSB3Yi5TU0Y7XG5cdH1cblx0b3B0cy5yZWxzID0ge307IG9wdHMud2JyZWxzID0ge307XG5cdG9wdHMuU3RyaW5ncyA9IC8qOjooKCovW10vKjo6IDphbnkpOlNTVCkqLzsgb3B0cy5TdHJpbmdzLkNvdW50ID0gMDsgb3B0cy5TdHJpbmdzLlVuaXF1ZSA9IDA7XG5cdGlmKGJyb3dzZXJfaGFzX01hcCkgb3B0cy5yZXZTdHJpbmdzID0gbmV3IE1hcCgpO1xuXHRlbHNlIHsgb3B0cy5yZXZTdHJpbmdzID0ge307IG9wdHMucmV2U3RyaW5ncy5mb28gPSBbXTsgZGVsZXRlIG9wdHMucmV2U3RyaW5ncy5mb287IH1cblx0dmFyIHdiZXh0ID0gb3B0cy5ib29rVHlwZSA9PSBcInhsc2JcIiA/IFwiYmluXCIgOiBcInhtbFwiO1xuXHR2YXIgdmJhZm10ID0gVkJBRk1UUy5pbmRleE9mKG9wdHMuYm9va1R5cGUpID4gLTE7XG5cdHZhciBjdCA9IG5ld19jdCgpO1xuXHRmaXhfd3JpdGVfb3B0cyhvcHRzID0gb3B0cyB8fCB7fSk7XG5cdHZhciB6aXAgPSB6aXBfbmV3KCk7XG5cdHZhciBmID0gXCJcIiwgcklkID0gMDtcblxuXHRvcHRzLmNlbGxYZnMgPSBbXTtcblx0Z2V0X2NlbGxfc3R5bGUob3B0cy5jZWxsWGZzLCB7fSwge3JldnNzZjp7XCJHZW5lcmFsXCI6MH19KTtcblxuXHRpZighd2IuUHJvcHMpIHdiLlByb3BzID0ge307XG5cblx0ZiA9IFwiZG9jUHJvcHMvY29yZS54bWxcIjtcblx0emlwX2FkZF9maWxlKHppcCwgZiwgd3JpdGVfY29yZV9wcm9wcyh3Yi5Qcm9wcywgb3B0cykpO1xuXHRjdC5jb3JlcHJvcHMucHVzaChmKTtcblx0YWRkX3JlbHMob3B0cy5yZWxzLCAyLCBmLCBSRUxTLkNPUkVfUFJPUFMpO1xuXG5cdC8qOjppZighd2IuUHJvcHMpIHRocm93IFwidW5yZWFjaGFibGVcIjsgKi9cblx0ZiA9IFwiZG9jUHJvcHMvYXBwLnhtbFwiO1xuXHRpZih3Yi5Qcm9wcyAmJiB3Yi5Qcm9wcy5TaGVldE5hbWVzKXsvKiBlbXB0eSAqL31cblx0ZWxzZSBpZighd2IuV29ya2Jvb2sgfHwgIXdiLldvcmtib29rLlNoZWV0cykgd2IuUHJvcHMuU2hlZXROYW1lcyA9IHdiLlNoZWV0TmFtZXM7XG5cdGVsc2Uge1xuXHRcdHZhciBfc24gPSBbXTtcblx0XHRmb3IodmFyIF9pID0gMDsgX2kgPCB3Yi5TaGVldE5hbWVzLmxlbmd0aDsgKytfaSlcblx0XHRcdGlmKCh3Yi5Xb3JrYm9vay5TaGVldHNbX2ldfHx7fSkuSGlkZGVuICE9IDIpIF9zbi5wdXNoKHdiLlNoZWV0TmFtZXNbX2ldKTtcblx0XHR3Yi5Qcm9wcy5TaGVldE5hbWVzID0gX3NuO1xuXHR9XG5cdHdiLlByb3BzLldvcmtzaGVldHMgPSB3Yi5Qcm9wcy5TaGVldE5hbWVzLmxlbmd0aDtcblx0emlwX2FkZF9maWxlKHppcCwgZiwgd3JpdGVfZXh0X3Byb3BzKHdiLlByb3BzLCBvcHRzKSk7XG5cdGN0LmV4dHByb3BzLnB1c2goZik7XG5cdGFkZF9yZWxzKG9wdHMucmVscywgMywgZiwgUkVMUy5FWFRfUFJPUFMpO1xuXG5cdGlmKHdiLkN1c3Rwcm9wcyAhPT0gd2IuUHJvcHMgJiYga2V5cyh3Yi5DdXN0cHJvcHN8fHt9KS5sZW5ndGggPiAwKSB7XG5cdFx0ZiA9IFwiZG9jUHJvcHMvY3VzdG9tLnhtbFwiO1xuXHRcdHppcF9hZGRfZmlsZSh6aXAsIGYsIHdyaXRlX2N1c3RfcHJvcHMod2IuQ3VzdHByb3BzLCBvcHRzKSk7XG5cdFx0Y3QuY3VzdHByb3BzLnB1c2goZik7XG5cdFx0YWRkX3JlbHMob3B0cy5yZWxzLCA0LCBmLCBSRUxTLkNVU1RfUFJPUFMpO1xuXHR9XG5cblx0Zm9yKHJJZD0xO3JJZCA8PSB3Yi5TaGVldE5hbWVzLmxlbmd0aDsgKytySWQpIHtcblx0XHR2YXIgd3NyZWxzID0geychaWQnOnt9fTtcblx0XHR2YXIgd3MgPSB3Yi5TaGVldHNbd2IuU2hlZXROYW1lc1tySWQtMV1dO1xuXHRcdHZhciBfdHlwZSA9ICh3cyB8fCB7fSlbXCIhdHlwZVwiXSB8fCBcInNoZWV0XCI7XG5cdFx0c3dpdGNoKF90eXBlKSB7XG5cdFx0Y2FzZSBcImNoYXJ0XCI6XG5cdFx0XHQvKiBmYWxscyB0aHJvdWdoICovXG5cdFx0ZGVmYXVsdDpcblx0XHRcdGYgPSBcInhsL3dvcmtzaGVldHMvc2hlZXRcIiArIHJJZCArIFwiLlwiICsgd2JleHQ7XG5cdFx0XHR6aXBfYWRkX2ZpbGUoemlwLCBmLCB3cml0ZV93cyhySWQtMSwgZiwgb3B0cywgd2IsIHdzcmVscykpO1xuXHRcdFx0Y3Quc2hlZXRzLnB1c2goZik7XG5cdFx0XHRhZGRfcmVscyhvcHRzLndicmVscywgLTEsIFwid29ya3NoZWV0cy9zaGVldFwiICsgcklkICsgXCIuXCIgKyB3YmV4dCwgUkVMUy5XU1swXSk7XG5cdFx0fVxuXG5cdFx0aWYod3MpIHtcblx0XHRcdHZhciBjb21tZW50cyA9IHdzWychY29tbWVudHMnXTtcblx0XHRcdHZhciBuZWVkX3ZtbCA9IGZhbHNlO1xuXHRcdFx0dmFyIGNmID0gXCJcIjtcblx0XHRcdGlmKGNvbW1lbnRzICYmIGNvbW1lbnRzLmxlbmd0aCA+IDApIHtcblx0XHRcdFx0Y2YgPSBcInhsL2NvbW1lbnRzXCIgKyBySWQgKyBcIi5cIiArIHdiZXh0O1xuXHRcdFx0XHR6aXBfYWRkX2ZpbGUoemlwLCBjZiwgd3JpdGVfY21udChjb21tZW50cywgY2YsIG9wdHMpKTtcblx0XHRcdFx0Y3QuY29tbWVudHMucHVzaChjZik7XG5cdFx0XHRcdGFkZF9yZWxzKHdzcmVscywgLTEsIFwiLi4vY29tbWVudHNcIiArIHJJZCArIFwiLlwiICsgd2JleHQsIFJFTFMuQ01OVCk7XG5cdFx0XHRcdG5lZWRfdm1sID0gdHJ1ZTtcblx0XHRcdH1cblx0XHRcdGlmKHdzWychbGVnYWN5J10pIHtcblx0XHRcdFx0aWYobmVlZF92bWwpIHppcF9hZGRfZmlsZSh6aXAsIFwieGwvZHJhd2luZ3Mvdm1sRHJhd2luZ1wiICsgKHJJZCkgKyBcIi52bWxcIiwgd3JpdGVfY29tbWVudHNfdm1sKHJJZCwgd3NbJyFjb21tZW50cyddKSk7XG5cdFx0XHR9XG5cdFx0XHRkZWxldGUgd3NbJyFjb21tZW50cyddO1xuXHRcdFx0ZGVsZXRlIHdzWychbGVnYWN5J107XG5cdFx0fVxuXG5cdFx0aWYod3NyZWxzWychaWQnXS5ySWQxKSB6aXBfYWRkX2ZpbGUoemlwLCBnZXRfcmVsc19wYXRoKGYpLCB3cml0ZV9yZWxzKHdzcmVscykpO1xuXHR9XG5cblx0aWYob3B0cy5TdHJpbmdzICE9IG51bGwgJiYgb3B0cy5TdHJpbmdzLmxlbmd0aCA+IDApIHtcblx0XHRmID0gXCJ4bC9zaGFyZWRTdHJpbmdzLlwiICsgd2JleHQ7XG5cdFx0emlwX2FkZF9maWxlKHppcCwgZiwgd3JpdGVfc3N0KG9wdHMuU3RyaW5ncywgZiwgb3B0cykpO1xuXHRcdGN0LnN0cnMucHVzaChmKTtcblx0XHRhZGRfcmVscyhvcHRzLndicmVscywgLTEsIFwic2hhcmVkU3RyaW5ncy5cIiArIHdiZXh0LCBSRUxTLlNTVCk7XG5cdH1cblxuXHRmID0gXCJ4bC93b3JrYm9vay5cIiArIHdiZXh0O1xuXHR6aXBfYWRkX2ZpbGUoemlwLCBmLCB3cml0ZV93Yih3YiwgZiwgb3B0cykpO1xuXHRjdC53b3JrYm9va3MucHVzaChmKTtcblx0YWRkX3JlbHMob3B0cy5yZWxzLCAxLCBmLCBSRUxTLldCKTtcblxuXHQvKiBUT0RPOiBzb21ldGhpbmcgbW9yZSBpbnRlbGxpZ2VudCB3aXRoIHRoZW1lcyAqL1xuXG5cdGYgPSBcInhsL3RoZW1lL3RoZW1lMS54bWxcIjtcblx0emlwX2FkZF9maWxlKHppcCwgZiwgd3JpdGVfdGhlbWUod2IuVGhlbWVzLCBvcHRzKSk7XG5cdGN0LnRoZW1lcy5wdXNoKGYpO1xuXHRhZGRfcmVscyhvcHRzLndicmVscywgLTEsIFwidGhlbWUvdGhlbWUxLnhtbFwiLCBSRUxTLlRIRU1FKTtcblxuXHQvKiBUT0RPOiBzb21ldGhpbmcgbW9yZSBpbnRlbGxpZ2VudCB3aXRoIHN0eWxlcyAqL1xuXG5cdGYgPSBcInhsL3N0eWxlcy5cIiArIHdiZXh0O1xuXHR6aXBfYWRkX2ZpbGUoemlwLCBmLCB3cml0ZV9zdHkod2IsIGYsIG9wdHMpKTtcblx0Y3Quc3R5bGVzLnB1c2goZik7XG5cdGFkZF9yZWxzKG9wdHMud2JyZWxzLCAtMSwgXCJzdHlsZXMuXCIgKyB3YmV4dCwgUkVMUy5TVFkpO1xuXG5cdGlmKHdiLnZiYXJhdyAmJiB2YmFmbXQpIHtcblx0XHRmID0gXCJ4bC92YmFQcm9qZWN0LmJpblwiO1xuXHRcdHppcF9hZGRfZmlsZSh6aXAsIGYsIHdiLnZiYXJhdyk7XG5cdFx0Y3QudmJhLnB1c2goZik7XG5cdFx0YWRkX3JlbHMob3B0cy53YnJlbHMsIC0xLCBcInZiYVByb2plY3QuYmluXCIsIFJFTFMuVkJBKTtcblx0fVxuXG5cdGYgPSBcInhsL21ldGFkYXRhLlwiICsgd2JleHQ7XG5cdHppcF9hZGRfZmlsZSh6aXAsIGYsIHdyaXRlX3hsbWV0YShmKSk7XG5cdGN0Lm1ldGFkYXRhLnB1c2goZik7XG5cdGFkZF9yZWxzKG9wdHMud2JyZWxzLCAtMSwgXCJtZXRhZGF0YS5cIiArIHdiZXh0LCBSRUxTLlhMTUVUQSk7XG5cblx0emlwX2FkZF9maWxlKHppcCwgXCJbQ29udGVudF9UeXBlc10ueG1sXCIsIHdyaXRlX2N0KGN0LCBvcHRzKSk7XG5cdHppcF9hZGRfZmlsZSh6aXAsICdfcmVscy8ucmVscycsIHdyaXRlX3JlbHMob3B0cy5yZWxzKSk7XG5cdHppcF9hZGRfZmlsZSh6aXAsICd4bC9fcmVscy93b3JrYm9vay4nICsgd2JleHQgKyAnLnJlbHMnLCB3cml0ZV9yZWxzKG9wdHMud2JyZWxzKSk7XG5cblx0ZGVsZXRlIG9wdHMucmV2c3NmOyBkZWxldGUgb3B0cy5zc2Y7XG5cdHJldHVybiB6aXA7XG59XG5cbmZ1bmN0aW9uIHdyaXRlX3ppcF94bHN4KHdiLyo6V29ya2Jvb2sqLywgb3B0cy8qOldyaXRlT3B0cyovKS8qOlpJUCovIHtcblx0X3NoYXBlaWQgPSAxMDI0O1xuXHRpZih3YiAmJiAhd2IuU1NGKSB7XG5cdFx0d2IuU1NGID0gZHVwKHRhYmxlX2ZtdCk7XG5cdH1cblx0aWYod2IgJiYgd2IuU1NGKSB7XG5cdFx0bWFrZV9zc2YoKTsgU1NGX2xvYWRfdGFibGUod2IuU1NGKTtcblx0XHQvLyAkRmxvd0lnbm9yZVxuXHRcdG9wdHMucmV2c3NmID0gZXZlcnRfbnVtKHdiLlNTRik7IG9wdHMucmV2c3NmW3diLlNTRls2NTUzNV1dID0gMDtcblx0XHRvcHRzLnNzZiA9IHdiLlNTRjtcblx0fVxuXHRvcHRzLnJlbHMgPSB7fTsgb3B0cy53YnJlbHMgPSB7fTtcblx0b3B0cy5TdHJpbmdzID0gLyo6OigoKi9bXS8qOjogOmFueSk6U1NUKSovOyBvcHRzLlN0cmluZ3MuQ291bnQgPSAwOyBvcHRzLlN0cmluZ3MuVW5pcXVlID0gMDtcblx0aWYoYnJvd3Nlcl9oYXNfTWFwKSBvcHRzLnJldlN0cmluZ3MgPSBuZXcgTWFwKCk7XG5cdGVsc2UgeyBvcHRzLnJldlN0cmluZ3MgPSB7fTsgb3B0cy5yZXZTdHJpbmdzLmZvbyA9IFtdOyBkZWxldGUgb3B0cy5yZXZTdHJpbmdzLmZvbzsgfVxuXHR2YXIgd2JleHQgPSBcInhtbFwiO1xuXHR2YXIgdmJhZm10ID0gVkJBRk1UUy5pbmRleE9mKG9wdHMuYm9va1R5cGUpID4gLTE7XG5cdHZhciBjdCA9IG5ld19jdCgpO1xuXHRmaXhfd3JpdGVfb3B0cyhvcHRzID0gb3B0cyB8fCB7fSk7XG5cdHZhciB6aXAgPSB6aXBfbmV3KCk7XG5cdHZhciBmID0gXCJcIiwgcklkID0gMDtcblxuXHRvcHRzLmNlbGxYZnMgPSBbXTtcblx0Z2V0X2NlbGxfc3R5bGUob3B0cy5jZWxsWGZzLCB7fSwge3JldnNzZjp7XCJHZW5lcmFsXCI6MH19KTtcblxuXHRpZighd2IuUHJvcHMpIHdiLlByb3BzID0ge307XG5cblx0ZiA9IFwiZG9jUHJvcHMvY29yZS54bWxcIjtcblx0emlwX2FkZF9maWxlKHppcCwgZiwgd3JpdGVfY29yZV9wcm9wcyh3Yi5Qcm9wcywgb3B0cykpO1xuXHRjdC5jb3JlcHJvcHMucHVzaChmKTtcblx0YWRkX3JlbHMob3B0cy5yZWxzLCAyLCBmLCBSRUxTLkNPUkVfUFJPUFMpO1xuXG5cdC8qOjppZighd2IuUHJvcHMpIHRocm93IFwidW5yZWFjaGFibGVcIjsgKi9cblx0ZiA9IFwiZG9jUHJvcHMvYXBwLnhtbFwiO1xuXHRpZih3Yi5Qcm9wcyAmJiB3Yi5Qcm9wcy5TaGVldE5hbWVzKXsvKiBlbXB0eSAqL31cblx0ZWxzZSBpZighd2IuV29ya2Jvb2sgfHwgIXdiLldvcmtib29rLlNoZWV0cykgd2IuUHJvcHMuU2hlZXROYW1lcyA9IHdiLlNoZWV0TmFtZXM7XG5cdGVsc2Uge1xuXHRcdHZhciBfc24gPSBbXTtcblx0XHRmb3IodmFyIF9pID0gMDsgX2kgPCB3Yi5TaGVldE5hbWVzLmxlbmd0aDsgKytfaSlcblx0XHRcdGlmKCh3Yi5Xb3JrYm9vay5TaGVldHNbX2ldfHx7fSkuSGlkZGVuICE9IDIpIF9zbi5wdXNoKHdiLlNoZWV0TmFtZXNbX2ldKTtcblx0XHR3Yi5Qcm9wcy5TaGVldE5hbWVzID0gX3NuO1xuXHR9XG5cdHdiLlByb3BzLldvcmtzaGVldHMgPSB3Yi5Qcm9wcy5TaGVldE5hbWVzLmxlbmd0aDtcblx0emlwX2FkZF9maWxlKHppcCwgZiwgd3JpdGVfZXh0X3Byb3BzKHdiLlByb3BzLCBvcHRzKSk7XG5cdGN0LmV4dHByb3BzLnB1c2goZik7XG5cdGFkZF9yZWxzKG9wdHMucmVscywgMywgZiwgUkVMUy5FWFRfUFJPUFMpO1xuXG5cdGlmKHdiLkN1c3Rwcm9wcyAhPT0gd2IuUHJvcHMgJiYga2V5cyh3Yi5DdXN0cHJvcHN8fHt9KS5sZW5ndGggPiAwKSB7XG5cdFx0ZiA9IFwiZG9jUHJvcHMvY3VzdG9tLnhtbFwiO1xuXHRcdHppcF9hZGRfZmlsZSh6aXAsIGYsIHdyaXRlX2N1c3RfcHJvcHMod2IuQ3VzdHByb3BzLCBvcHRzKSk7XG5cdFx0Y3QuY3VzdHByb3BzLnB1c2goZik7XG5cdFx0YWRkX3JlbHMob3B0cy5yZWxzLCA0LCBmLCBSRUxTLkNVU1RfUFJPUFMpO1xuXHR9XG5cblx0dmFyIHBlb3BsZSA9IFtcIlNoZWV0SjVcIl07XG5cdG9wdHMudGNpZCA9IDA7XG5cblx0Zm9yKHJJZD0xO3JJZCA8PSB3Yi5TaGVldE5hbWVzLmxlbmd0aDsgKytySWQpIHtcblx0XHR2YXIgd3NyZWxzID0geychaWQnOnt9fTtcblx0XHR2YXIgd3MgPSB3Yi5TaGVldHNbd2IuU2hlZXROYW1lc1tySWQtMV1dO1xuXHRcdHZhciBfdHlwZSA9ICh3cyB8fCB7fSlbXCIhdHlwZVwiXSB8fCBcInNoZWV0XCI7XG5cdFx0c3dpdGNoKF90eXBlKSB7XG5cdFx0Y2FzZSBcImNoYXJ0XCI6XG5cdFx0XHQvKiBmYWxscyB0aHJvdWdoICovXG5cdFx0ZGVmYXVsdDpcblx0XHRcdGYgPSBcInhsL3dvcmtzaGVldHMvc2hlZXRcIiArIHJJZCArIFwiLlwiICsgd2JleHQ7XG5cdFx0XHR6aXBfYWRkX2ZpbGUoemlwLCBmLCB3cml0ZV93c194bWwocklkLTEsIG9wdHMsIHdiLCB3c3JlbHMpKTtcblx0XHRcdGN0LnNoZWV0cy5wdXNoKGYpO1xuXHRcdFx0YWRkX3JlbHMob3B0cy53YnJlbHMsIC0xLCBcIndvcmtzaGVldHMvc2hlZXRcIiArIHJJZCArIFwiLlwiICsgd2JleHQsIFJFTFMuV1NbMF0pO1xuXHRcdH1cblxuXHRcdGlmKHdzKSB7XG5cdFx0XHR2YXIgY29tbWVudHMgPSB3c1snIWNvbW1lbnRzJ107XG5cdFx0XHR2YXIgbmVlZF92bWwgPSBmYWxzZTtcblx0XHRcdHZhciBjZiA9IFwiXCI7XG5cdFx0XHRpZihjb21tZW50cyAmJiBjb21tZW50cy5sZW5ndGggPiAwKSB7XG5cdFx0XHRcdHZhciBuZWVkdGMgPSBmYWxzZTtcblx0XHRcdFx0Y29tbWVudHMuZm9yRWFjaChmdW5jdGlvbihjYXJyKSB7XG5cdFx0XHRcdFx0Y2FyclsxXS5mb3JFYWNoKGZ1bmN0aW9uKGMpIHsgaWYoYy5UID09IHRydWUpIG5lZWR0YyA9IHRydWU7IH0pO1xuXHRcdFx0XHR9KTtcblx0XHRcdFx0aWYobmVlZHRjKSB7XG5cdFx0XHRcdFx0Y2YgPSBcInhsL3RocmVhZGVkQ29tbWVudHMvdGhyZWFkZWRDb21tZW50XCIgKyBySWQgKyBcIi5cIiArIHdiZXh0O1xuXHRcdFx0XHRcdHppcF9hZGRfZmlsZSh6aXAsIGNmLCB3cml0ZV90Y21udF94bWwoY29tbWVudHMsIHBlb3BsZSwgb3B0cykpO1xuXHRcdFx0XHRcdGN0LnRocmVhZGVkY29tbWVudHMucHVzaChjZik7XG5cdFx0XHRcdFx0YWRkX3JlbHMod3NyZWxzLCAtMSwgXCIuLi90aHJlYWRlZENvbW1lbnRzL3RocmVhZGVkQ29tbWVudFwiICsgcklkICsgXCIuXCIgKyB3YmV4dCwgUkVMUy5UQ01OVCk7XG5cdFx0XHRcdH1cblxuXHRcdFx0XHRjZiA9IFwieGwvY29tbWVudHNcIiArIHJJZCArIFwiLlwiICsgd2JleHQ7XG5cdFx0XHRcdHppcF9hZGRfZmlsZSh6aXAsIGNmLCB3cml0ZV9jb21tZW50c194bWwoY29tbWVudHMsIG9wdHMpKTtcblx0XHRcdFx0Y3QuY29tbWVudHMucHVzaChjZik7XG5cdFx0XHRcdGFkZF9yZWxzKHdzcmVscywgLTEsIFwiLi4vY29tbWVudHNcIiArIHJJZCArIFwiLlwiICsgd2JleHQsIFJFTFMuQ01OVCk7XG5cdFx0XHRcdG5lZWRfdm1sID0gdHJ1ZTtcblx0XHRcdH1cblx0XHRcdGlmKHdzWychbGVnYWN5J10pIHtcblx0XHRcdFx0aWYobmVlZF92bWwpIHppcF9hZGRfZmlsZSh6aXAsIFwieGwvZHJhd2luZ3Mvdm1sRHJhd2luZ1wiICsgKHJJZCkgKyBcIi52bWxcIiwgd3JpdGVfY29tbWVudHNfdm1sKHJJZCwgd3NbJyFjb21tZW50cyddKSk7XG5cdFx0XHR9XG5cdFx0XHRkZWxldGUgd3NbJyFjb21tZW50cyddO1xuXHRcdFx0ZGVsZXRlIHdzWychbGVnYWN5J107XG5cdFx0fVxuXG5cdFx0aWYod3NyZWxzWychaWQnXS5ySWQxKSB6aXBfYWRkX2ZpbGUoemlwLCBnZXRfcmVsc19wYXRoKGYpLCB3cml0ZV9yZWxzKHdzcmVscykpO1xuXHR9XG5cblx0aWYob3B0cy5TdHJpbmdzICE9IG51bGwgJiYgb3B0cy5TdHJpbmdzLmxlbmd0aCA+IDApIHtcblx0XHRmID0gXCJ4bC9zaGFyZWRTdHJpbmdzLlwiICsgd2JleHQ7XG5cdFx0emlwX2FkZF9maWxlKHppcCwgZiwgd3JpdGVfc3N0X3htbChvcHRzLlN0cmluZ3MsIG9wdHMpKTtcblx0XHRjdC5zdHJzLnB1c2goZik7XG5cdFx0YWRkX3JlbHMob3B0cy53YnJlbHMsIC0xLCBcInNoYXJlZFN0cmluZ3MuXCIgKyB3YmV4dCwgUkVMUy5TU1QpO1xuXHR9XG5cblx0ZiA9IFwieGwvd29ya2Jvb2suXCIgKyB3YmV4dDtcblx0emlwX2FkZF9maWxlKHppcCwgZiwgd3JpdGVfd2JfeG1sKHdiLCBvcHRzKSk7XG5cdGN0Lndvcmtib29rcy5wdXNoKGYpO1xuXHRhZGRfcmVscyhvcHRzLnJlbHMsIDEsIGYsIFJFTFMuV0IpO1xuXG5cdC8qIFRPRE86IHNvbWV0aGluZyBtb3JlIGludGVsbGlnZW50IHdpdGggdGhlbWVzICovXG5cblx0ZiA9IFwieGwvdGhlbWUvdGhlbWUxLnhtbFwiO1xuXHR6aXBfYWRkX2ZpbGUoemlwLCBmLCB3cml0ZV90aGVtZSh3Yi5UaGVtZXMsIG9wdHMpKTtcblx0Y3QudGhlbWVzLnB1c2goZik7XG5cdGFkZF9yZWxzKG9wdHMud2JyZWxzLCAtMSwgXCJ0aGVtZS90aGVtZTEueG1sXCIsIFJFTFMuVEhFTUUpO1xuXG5cdC8qIFRPRE86IHNvbWV0aGluZyBtb3JlIGludGVsbGlnZW50IHdpdGggc3R5bGVzICovXG5cblx0ZiA9IFwieGwvc3R5bGVzLlwiICsgd2JleHQ7XG5cdHppcF9hZGRfZmlsZSh6aXAsIGYsIHdyaXRlX3N0eV94bWwod2IsIG9wdHMpKTtcblx0Y3Quc3R5bGVzLnB1c2goZik7XG5cdGFkZF9yZWxzKG9wdHMud2JyZWxzLCAtMSwgXCJzdHlsZXMuXCIgKyB3YmV4dCwgUkVMUy5TVFkpO1xuXG5cdGlmKHdiLnZiYXJhdyAmJiB2YmFmbXQpIHtcblx0XHRmID0gXCJ4bC92YmFQcm9qZWN0LmJpblwiO1xuXHRcdHppcF9hZGRfZmlsZSh6aXAsIGYsIHdiLnZiYXJhdyk7XG5cdFx0Y3QudmJhLnB1c2goZik7XG5cdFx0YWRkX3JlbHMob3B0cy53YnJlbHMsIC0xLCBcInZiYVByb2plY3QuYmluXCIsIFJFTFMuVkJBKTtcblx0fVxuXG5cdGYgPSBcInhsL21ldGFkYXRhLlwiICsgd2JleHQ7XG5cdHppcF9hZGRfZmlsZSh6aXAsIGYsIHdyaXRlX3hsbWV0YV94bWwoKSk7XG5cdGN0Lm1ldGFkYXRhLnB1c2goZik7XG5cdGFkZF9yZWxzKG9wdHMud2JyZWxzLCAtMSwgXCJtZXRhZGF0YS5cIiArIHdiZXh0LCBSRUxTLlhMTUVUQSk7XG5cblx0aWYocGVvcGxlLmxlbmd0aCA+IDEpIHtcblx0XHRmID0gXCJ4bC9wZXJzb25zL3BlcnNvbi54bWxcIjtcblx0XHR6aXBfYWRkX2ZpbGUoemlwLCBmLCB3cml0ZV9wZW9wbGVfeG1sKHBlb3BsZSwgb3B0cykpO1xuXHRcdGN0LnBlb3BsZS5wdXNoKGYpO1xuXHRcdGFkZF9yZWxzKG9wdHMud2JyZWxzLCAtMSwgXCJwZXJzb25zL3BlcnNvbi54bWxcIiwgUkVMUy5QRU9QTEUpO1xuXHR9XG5cblx0emlwX2FkZF9maWxlKHppcCwgXCJbQ29udGVudF9UeXBlc10ueG1sXCIsIHdyaXRlX2N0KGN0LCBvcHRzKSk7XG5cdHppcF9hZGRfZmlsZSh6aXAsICdfcmVscy8ucmVscycsIHdyaXRlX3JlbHMob3B0cy5yZWxzKSk7XG5cdHppcF9hZGRfZmlsZSh6aXAsICd4bC9fcmVscy93b3JrYm9vay4nICsgd2JleHQgKyAnLnJlbHMnLCB3cml0ZV9yZWxzKG9wdHMud2JyZWxzKSk7XG5cblx0ZGVsZXRlIG9wdHMucmV2c3NmOyBkZWxldGUgb3B0cy5zc2Y7XG5cdHJldHVybiB6aXA7XG59XG5cbmZ1bmN0aW9uIGZpcnN0Ynl0ZShmLyo6UmF3RGF0YSovLG8vKjo/VHlwZU9wdHMqLykvKjpBcnJheTxudW1iZXI+Ki8ge1xuXHR2YXIgeCA9IFwiXCI7XG5cdHN3aXRjaCgob3x8e30pLnR5cGUgfHwgXCJiYXNlNjRcIikge1xuXHRcdGNhc2UgJ2J1ZmZlcic6IHJldHVybiBbZlswXSwgZlsxXSwgZlsyXSwgZlszXSwgZls0XSwgZls1XSwgZls2XSwgZls3XV07XG5cdFx0Y2FzZSAnYmFzZTY0JzogeCA9IEJhc2U2NF9kZWNvZGUoZi5zbGljZSgwLDEyKSk7IGJyZWFrO1xuXHRcdGNhc2UgJ2JpbmFyeSc6IHggPSBmOyBicmVhaztcblx0XHRjYXNlICdhcnJheSc6ICByZXR1cm4gW2ZbMF0sIGZbMV0sIGZbMl0sIGZbM10sIGZbNF0sIGZbNV0sIGZbNl0sIGZbN11dO1xuXHRcdGRlZmF1bHQ6IHRocm93IG5ldyBFcnJvcihcIlVucmVjb2duaXplZCB0eXBlIFwiICsgKG8gJiYgby50eXBlIHx8IFwidW5kZWZpbmVkXCIpKTtcblx0fVxuXHRyZXR1cm4gW3guY2hhckNvZGVBdCgwKSwgeC5jaGFyQ29kZUF0KDEpLCB4LmNoYXJDb2RlQXQoMiksIHguY2hhckNvZGVBdCgzKSwgeC5jaGFyQ29kZUF0KDQpLCB4LmNoYXJDb2RlQXQoNSksIHguY2hhckNvZGVBdCg2KSwgeC5jaGFyQ29kZUF0KDcpXTtcbn1cblxuZnVuY3Rpb24gcmVhZF9jZmIoY2ZiLyo6Q0ZCQ29udGFpbmVyKi8sIG9wdHMvKjo/UGFyc2VPcHRzKi8pLyo6V29ya2Jvb2sqLyB7XG5cdGlmKENGQi5maW5kKGNmYiwgXCJFbmNyeXB0ZWRQYWNrYWdlXCIpKSByZXR1cm4gcGFyc2VfeGxzeGNmYihjZmIsIG9wdHMpO1xuXHRyZXR1cm4gcGFyc2VfeGxzY2ZiKGNmYiwgb3B0cyk7XG59XG5cbmZ1bmN0aW9uIHJlYWRfemlwKGRhdGEvKjpSYXdEYXRhKi8sIG9wdHMvKjo/UGFyc2VPcHRzKi8pLyo6V29ya2Jvb2sqLyB7XG5cdHZhciB6aXAsIGQgPSBkYXRhO1xuXHR2YXIgbyA9IG9wdHN8fHt9O1xuXHRpZighby50eXBlKSBvLnR5cGUgPSAoaGFzX2J1ZiAmJiBCdWZmZXIuaXNCdWZmZXIoZGF0YSkpID8gXCJidWZmZXJcIiA6IFwiYmFzZTY0XCI7XG5cdHppcCA9IHppcF9yZWFkKGQsIG8pO1xuXHRyZXR1cm4gcGFyc2VfemlwKHppcCwgbyk7XG59XG5cbmZ1bmN0aW9uIHJlYWRfcGxhaW50ZXh0KGRhdGEvKjpzdHJpbmcqLywgby8qOlBhcnNlT3B0cyovKS8qOldvcmtib29rKi8ge1xuXHR2YXIgaSA9IDA7XG5cdG1haW46IHdoaWxlKGkgPCBkYXRhLmxlbmd0aCkgc3dpdGNoKGRhdGEuY2hhckNvZGVBdChpKSkge1xuXHRcdGNhc2UgMHgwQTogY2FzZSAweDBEOiBjYXNlIDB4MjA6ICsraTsgYnJlYWs7XG5cdFx0Y2FzZSAweDNDOiByZXR1cm4gcGFyc2VfeGxtbChkYXRhLnNsaWNlKGkpLG8pO1xuXHRcdGRlZmF1bHQ6IGJyZWFrIG1haW47XG5cdH1cblx0cmV0dXJuIFBSTi50b193b3JrYm9vayhkYXRhLCBvKTtcbn1cblxuZnVuY3Rpb24gcmVhZF9wbGFpbnRleHRfcmF3KGRhdGEvKjpSYXdEYXRhKi8sIG8vKjpQYXJzZU9wdHMqLykvKjpXb3JrYm9vayovIHtcblx0dmFyIHN0ciA9IFwiXCIsIGJ5dGVzID0gZmlyc3RieXRlKGRhdGEsIG8pO1xuXHRzd2l0Y2goby50eXBlKSB7XG5cdFx0Y2FzZSAnYmFzZTY0Jzogc3RyID0gQmFzZTY0X2RlY29kZShkYXRhKTsgYnJlYWs7XG5cdFx0Y2FzZSAnYmluYXJ5Jzogc3RyID0gZGF0YTsgYnJlYWs7XG5cdFx0Y2FzZSAnYnVmZmVyJzogc3RyID0gZGF0YS50b1N0cmluZygnYmluYXJ5Jyk7IGJyZWFrO1xuXHRcdGNhc2UgJ2FycmF5Jzogc3RyID0gY2Myc3RyKGRhdGEpOyBicmVhaztcblx0XHRkZWZhdWx0OiB0aHJvdyBuZXcgRXJyb3IoXCJVbnJlY29nbml6ZWQgdHlwZSBcIiArIG8udHlwZSk7XG5cdH1cblx0aWYoYnl0ZXNbMF0gPT0gMHhFRiAmJiBieXRlc1sxXSA9PSAweEJCICYmIGJ5dGVzWzJdID09IDB4QkYpIHN0ciA9IHV0ZjhyZWFkKHN0cik7XG5cdG8udHlwZSA9IFwiYmluYXJ5XCI7XG5cdHJldHVybiByZWFkX3BsYWludGV4dChzdHIsIG8pO1xufVxuXG5mdW5jdGlvbiByZWFkX3V0ZjE2KGRhdGEvKjpSYXdEYXRhKi8sIG8vKjpQYXJzZU9wdHMqLykvKjpXb3JrYm9vayovIHtcblx0dmFyIGQgPSBkYXRhO1xuXHRpZihvLnR5cGUgPT0gJ2Jhc2U2NCcpIGQgPSBCYXNlNjRfZGVjb2RlKGQpO1xuXHRkID0gJGNwdGFibGUudXRpbHMuZGVjb2RlKDEyMDAsIGQuc2xpY2UoMiksICdzdHInKTtcblx0by50eXBlID0gXCJiaW5hcnlcIjtcblx0cmV0dXJuIHJlYWRfcGxhaW50ZXh0KGQsIG8pO1xufVxuXG5mdW5jdGlvbiBic3RyaWZ5KGRhdGEvKjpzdHJpbmcqLykvKjpzdHJpbmcqLyB7XG5cdHJldHVybiAhZGF0YS5tYXRjaCgvW15cXHgwMC1cXHg3Rl0vKSA/IGRhdGEgOiB1dGY4d3JpdGUoZGF0YSk7XG59XG5cbmZ1bmN0aW9uIHJlYWRfcHJuKGRhdGEsIGQsIG8sIHN0cikge1xuXHRpZihzdHIpIHsgby50eXBlID0gXCJzdHJpbmdcIjsgcmV0dXJuIFBSTi50b193b3JrYm9vayhkYXRhLCBvKTsgfVxuXHRyZXR1cm4gUFJOLnRvX3dvcmtib29rKGQsIG8pO1xufVxuXG5mdW5jdGlvbiByZWFkU3luYyhkYXRhLyo6UmF3RGF0YSovLCBvcHRzLyo6P1BhcnNlT3B0cyovKS8qOldvcmtib29rKi8ge1xuXHRyZXNldF9jcCgpO1xuXHR2YXIgbyA9IG9wdHN8fHt9O1xuXHRpZih0eXBlb2YgQXJyYXlCdWZmZXIgIT09ICd1bmRlZmluZWQnICYmIGRhdGEgaW5zdGFuY2VvZiBBcnJheUJ1ZmZlcikgcmV0dXJuIHJlYWRTeW5jKG5ldyBVaW50OEFycmF5KGRhdGEpLCAobyA9IGR1cChvKSwgby50eXBlID0gXCJhcnJheVwiLCBvKSk7XG5cdGlmKHR5cGVvZiBVaW50OEFycmF5ICE9PSAndW5kZWZpbmVkJyAmJiBkYXRhIGluc3RhbmNlb2YgVWludDhBcnJheSAmJiAhby50eXBlKSBvLnR5cGUgPSB0eXBlb2YgRGVubyAhPT0gXCJ1bmRlZmluZWRcIiA/IFwiYnVmZmVyXCIgOiBcImFycmF5XCI7XG5cdHZhciBkID0gZGF0YSwgbiA9IFswLDAsMCwwXSwgc3RyID0gZmFsc2U7XG5cdGlmKG8uY2VsbFN0eWxlcykgeyBvLmNlbGxORiA9IHRydWU7IG8uc2hlZXRTdHVicyA9IHRydWU7IH1cblx0X3NzZm9wdHMgPSB7fTtcblx0aWYoby5kYXRlTkYpIF9zc2ZvcHRzLmRhdGVORiA9IG8uZGF0ZU5GO1xuXHRpZighby50eXBlKSBvLnR5cGUgPSAoaGFzX2J1ZiAmJiBCdWZmZXIuaXNCdWZmZXIoZGF0YSkpID8gXCJidWZmZXJcIiA6IFwiYmFzZTY0XCI7XG5cdGlmKG8udHlwZSA9PSBcImZpbGVcIikgeyBvLnR5cGUgPSBoYXNfYnVmID8gXCJidWZmZXJcIiA6IFwiYmluYXJ5XCI7IGQgPSByZWFkX2JpbmFyeShkYXRhKTsgaWYodHlwZW9mIFVpbnQ4QXJyYXkgIT09ICd1bmRlZmluZWQnICYmICFoYXNfYnVmKSBvLnR5cGUgPSBcImFycmF5XCI7IH1cblx0aWYoby50eXBlID09IFwic3RyaW5nXCIpIHsgc3RyID0gdHJ1ZTsgby50eXBlID0gXCJiaW5hcnlcIjsgby5jb2RlcGFnZSA9IDY1MDAxOyBkID0gYnN0cmlmeShkYXRhKTsgfVxuXHRpZihvLnR5cGUgPT0gJ2FycmF5JyAmJiB0eXBlb2YgVWludDhBcnJheSAhPT0gJ3VuZGVmaW5lZCcgJiYgZGF0YSBpbnN0YW5jZW9mIFVpbnQ4QXJyYXkgJiYgdHlwZW9mIEFycmF5QnVmZmVyICE9PSAndW5kZWZpbmVkJykge1xuXHRcdC8vICRGbG93SWdub3JlXG5cdFx0dmFyIGFiPW5ldyBBcnJheUJ1ZmZlcigzKSwgdnU9bmV3IFVpbnQ4QXJyYXkoYWIpOyB2dS5mb289XCJiYXJcIjtcblx0XHQvLyAkRmxvd0lnbm9yZVxuXHRcdGlmKCF2dS5mb28pIHtvPWR1cChvKTsgby50eXBlPSdhcnJheSc7IHJldHVybiByZWFkU3luYyhhYjJhKGQpLCBvKTt9XG5cdH1cblx0c3dpdGNoKChuID0gZmlyc3RieXRlKGQsIG8pKVswXSkge1xuXHRcdGNhc2UgMHhEMDogaWYoblsxXSA9PT0gMHhDRiAmJiBuWzJdID09PSAweDExICYmIG5bM10gPT09IDB4RTAgJiYgbls0XSA9PT0gMHhBMSAmJiBuWzVdID09PSAweEIxICYmIG5bNl0gPT09IDB4MUEgJiYgbls3XSA9PT0gMHhFMSkgcmV0dXJuIHJlYWRfY2ZiKENGQi5yZWFkKGQsIG8pLCBvKTsgYnJlYWs7XG5cdFx0Y2FzZSAweDA5OiBpZihuWzFdIDw9IDB4MDgpIHJldHVybiBwYXJzZV94bHNjZmIoZCwgbyk7IGJyZWFrO1xuXHRcdGNhc2UgMHgzQzogcmV0dXJuIHBhcnNlX3hsbWwoZCwgbyk7XG5cdFx0Y2FzZSAweDQ5OlxuXHRcdFx0aWYoblsxXSA9PT0gMHg0OSAmJiBuWzJdID09PSAweDJhICYmIG5bM10gPT09IDB4MDApIHRocm93IG5ldyBFcnJvcihcIlRJRkYgSW1hZ2UgRmlsZSBpcyBub3QgYSBzcHJlYWRzaGVldFwiKTtcblx0XHRcdGlmKG5bMV0gPT09IDB4NDQpIHJldHVybiByZWFkX3diX0lEKGQsIG8pO1xuXHRcdFx0YnJlYWs7XG5cdFx0Y2FzZSAweDU0OiBpZihuWzFdID09PSAweDQxICYmIG5bMl0gPT09IDB4NDIgJiYgblszXSA9PT0gMHg0QykgcmV0dXJuIERJRi50b193b3JrYm9vayhkLCBvKTsgYnJlYWs7XG5cdFx0Y2FzZSAweDUwOiByZXR1cm4gKG5bMV0gPT09IDB4NEIgJiYgblsyXSA8IDB4MDkgJiYgblszXSA8IDB4MDkpID8gcmVhZF96aXAoZCwgbykgOiByZWFkX3BybihkYXRhLCBkLCBvLCBzdHIpO1xuXHRcdGNhc2UgMHhFRjogcmV0dXJuIG5bM10gPT09IDB4M0MgPyBwYXJzZV94bG1sKGQsIG8pIDogcmVhZF9wcm4oZGF0YSwgZCwgbywgc3RyKTtcblx0XHRjYXNlIDB4RkY6XG5cdFx0XHRpZihuWzFdID09PSAweEZFKSB7IHJldHVybiByZWFkX3V0ZjE2KGQsIG8pOyB9XG5cdFx0XHRlbHNlIGlmKG5bMV0gPT09IDB4MDAgJiYgblsyXSA9PT0gMHgwMiAmJiBuWzNdID09PSAweDAwKSByZXR1cm4gV0tfLnRvX3dvcmtib29rKGQsIG8pO1xuXHRcdFx0YnJlYWs7XG5cdFx0Y2FzZSAweDAwOlxuXHRcdFx0aWYoblsxXSA9PT0gMHgwMCkge1xuXHRcdFx0XHRpZihuWzJdID49IDB4MDIgJiYgblszXSA9PT0gMHgwMCkgcmV0dXJuIFdLXy50b193b3JrYm9vayhkLCBvKTtcblx0XHRcdFx0aWYoblsyXSA9PT0gMHgwMCAmJiAoblszXSA9PT0gMHgwOCB8fCBuWzNdID09PSAweDA5KSkgcmV0dXJuIFdLXy50b193b3JrYm9vayhkLCBvKTtcblx0XHRcdH1cblx0XHRcdGJyZWFrO1xuXHRcdGNhc2UgMHgwMzogY2FzZSAweDgzOiBjYXNlIDB4OEI6IGNhc2UgMHg4QzogcmV0dXJuIERCRi50b193b3JrYm9vayhkLCBvKTtcblx0XHRjYXNlIDB4N0I6IGlmKG5bMV0gPT09IDB4NUMgJiYgblsyXSA9PT0gMHg3MiAmJiBuWzNdID09PSAweDc0KSByZXR1cm4gUlRGLnRvX3dvcmtib29rKGQsIG8pOyBicmVhaztcblx0XHRjYXNlIDB4MEE6IGNhc2UgMHgwRDogY2FzZSAweDIwOiByZXR1cm4gcmVhZF9wbGFpbnRleHRfcmF3KGQsIG8pO1xuXHRcdGNhc2UgMHg4OTogaWYoblsxXSA9PT0gMHg1MCAmJiBuWzJdID09PSAweDRFICYmIG5bM10gPT09IDB4NDcpIHRocm93IG5ldyBFcnJvcihcIlBORyBJbWFnZSBGaWxlIGlzIG5vdCBhIHNwcmVhZHNoZWV0XCIpOyBicmVhaztcblx0fVxuXHRpZihEQkZfU1VQUE9SVEVEX1ZFUlNJT05TLmluZGV4T2YoblswXSkgPiAtMSAmJiBuWzJdIDw9IDEyICYmIG5bM10gPD0gMzEpIHJldHVybiBEQkYudG9fd29ya2Jvb2soZCwgbyk7XG5cdHJldHVybiByZWFkX3BybihkYXRhLCBkLCBvLCBzdHIpO1xufVxuXG5mdW5jdGlvbiByZWFkRmlsZVN5bmMoZmlsZW5hbWUvKjpzdHJpbmcqLywgb3B0cy8qOj9QYXJzZU9wdHMqLykvKjpXb3JrYm9vayovIHtcblx0dmFyIG8gPSBvcHRzfHx7fTsgby50eXBlID0gJ2ZpbGUnO1xuXHRyZXR1cm4gcmVhZFN5bmMoZmlsZW5hbWUsIG8pO1xufVxuZnVuY3Rpb24gd3JpdGVfY2ZiX2N0cihjZmIvKjpDRkJDb250YWluZXIqLywgby8qOldyaXRlT3B0cyovKS8qOmFueSovIHtcblx0c3dpdGNoKG8udHlwZSkge1xuXHRcdGNhc2UgXCJiYXNlNjRcIjogY2FzZSBcImJpbmFyeVwiOiBicmVhaztcblx0XHRjYXNlIFwiYnVmZmVyXCI6IGNhc2UgXCJhcnJheVwiOiBvLnR5cGUgPSBcIlwiOyBicmVhaztcblx0XHRjYXNlIFwiZmlsZVwiOiByZXR1cm4gd3JpdGVfZGwoby5maWxlLCBDRkIud3JpdGUoY2ZiLCB7dHlwZTpoYXNfYnVmID8gJ2J1ZmZlcicgOiBcIlwifSkpO1xuXHRcdGNhc2UgXCJzdHJpbmdcIjogdGhyb3cgbmV3IEVycm9yKFwiJ3N0cmluZycgb3V0cHV0IHR5cGUgaW52YWxpZCBmb3IgJ1wiICsgby5ib29rVHlwZSArIFwiJyBmaWxlc1wiKTtcblx0XHRkZWZhdWx0OiB0aHJvdyBuZXcgRXJyb3IoXCJVbnJlY29nbml6ZWQgdHlwZSBcIiArIG8udHlwZSk7XG5cdH1cblx0cmV0dXJuIENGQi53cml0ZShjZmIsIG8pO1xufVxuXG4vKjo6IGRlY2xhcmUgdmFyIGVuY3J5cHRfYWdpbGU6YW55OyAqL1xuZnVuY3Rpb24gd3JpdGVfemlwX3R5cGUod2IvKjpXb3JrYm9vayovLCBvcHRzLyo6P1dyaXRlT3B0cyovKS8qOmFueSovIHtcblx0dmFyIG8gPSBkdXAob3B0c3x8e30pO1xuXHR2YXIgeiA9IHdyaXRlX3ppcCh3Yiwgbyk7XG5cdHJldHVybiB3cml0ZV96aXBfZGVub3VlbWVudCh6LCBvKTtcbn1cbmZ1bmN0aW9uIHdyaXRlX3ppcF90eXBlWExTWCh3Yi8qOldvcmtib29rKi8sIG9wdHMvKjo/V3JpdGVPcHRzKi8pLyo6YW55Ki8ge1xuXHR2YXIgbyA9IGR1cChvcHRzfHx7fSk7XG5cdHZhciB6ID0gd3JpdGVfemlwX3hsc3god2IsIG8pO1xuXHRyZXR1cm4gd3JpdGVfemlwX2Rlbm91ZW1lbnQoeiwgbyk7XG59XG5mdW5jdGlvbiB3cml0ZV96aXBfZGVub3VlbWVudCh6Lyo6YW55Ki8sIG8vKjo/V3JpdGVPcHRzKi8pLyo6YW55Ki8ge1xuXHR2YXIgb29wdHMgPSB7fTtcblx0dmFyIGZ0eXBlID0gaGFzX2J1ZiA/IFwibm9kZWJ1ZmZlclwiIDogKHR5cGVvZiBVaW50OEFycmF5ICE9PSBcInVuZGVmaW5lZFwiID8gXCJhcnJheVwiIDogXCJzdHJpbmdcIik7XG5cdGlmKG8uY29tcHJlc3Npb24pIG9vcHRzLmNvbXByZXNzaW9uID0gJ0RFRkxBVEUnO1xuXHRpZihvLnBhc3N3b3JkKSBvb3B0cy50eXBlID0gZnR5cGU7XG5cdGVsc2Ugc3dpdGNoKG8udHlwZSkge1xuXHRcdGNhc2UgXCJiYXNlNjRcIjogb29wdHMudHlwZSA9IFwiYmFzZTY0XCI7IGJyZWFrO1xuXHRcdGNhc2UgXCJiaW5hcnlcIjogb29wdHMudHlwZSA9IFwic3RyaW5nXCI7IGJyZWFrO1xuXHRcdGNhc2UgXCJzdHJpbmdcIjogdGhyb3cgbmV3IEVycm9yKFwiJ3N0cmluZycgb3V0cHV0IHR5cGUgaW52YWxpZCBmb3IgJ1wiICsgby5ib29rVHlwZSArIFwiJyBmaWxlc1wiKTtcblx0XHRjYXNlIFwiYnVmZmVyXCI6XG5cdFx0Y2FzZSBcImZpbGVcIjogb29wdHMudHlwZSA9IGZ0eXBlOyBicmVhaztcblx0XHRkZWZhdWx0OiB0aHJvdyBuZXcgRXJyb3IoXCJVbnJlY29nbml6ZWQgdHlwZSBcIiArIG8udHlwZSk7XG5cdH1cblx0dmFyIG91dCA9IHouRnVsbFBhdGhzID8gQ0ZCLndyaXRlKHosIHtmaWxlVHlwZTpcInppcFwiLCB0eXBlOiAvKjo6KCove1wibm9kZWJ1ZmZlclwiOiBcImJ1ZmZlclwiLCBcInN0cmluZ1wiOiBcImJpbmFyeVwifS8qOjogOmFueSkqL1tvb3B0cy50eXBlXSB8fCBvb3B0cy50eXBlLCBjb21wcmVzc2lvbjogISFvLmNvbXByZXNzaW9ufSkgOiB6LmdlbmVyYXRlKG9vcHRzKTtcblx0aWYodHlwZW9mIERlbm8gIT09IFwidW5kZWZpbmVkXCIpIHtcblx0XHRpZih0eXBlb2Ygb3V0ID09IFwic3RyaW5nXCIpIHtcblx0XHRcdGlmKG8udHlwZSA9PSBcImJpbmFyeVwiIHx8IG8udHlwZSA9PSBcImJhc2U2NFwiKSByZXR1cm4gb3V0O1xuXHRcdFx0b3V0ID0gbmV3IFVpbnQ4QXJyYXkoczJhYihvdXQpKTtcblx0XHR9XG5cdH1cbi8qanNoaW50IC1XMDgzICovXG5cdGlmKG8ucGFzc3dvcmQgJiYgdHlwZW9mIGVuY3J5cHRfYWdpbGUgIT09ICd1bmRlZmluZWQnKSByZXR1cm4gd3JpdGVfY2ZiX2N0cihlbmNyeXB0X2FnaWxlKG91dCwgby5wYXNzd29yZCksIG8pOyAvLyBlc2xpbnQtZGlzYWJsZS1saW5lIG5vLXVuZGVmXG4vKmpzaGludCArVzA4MyAqL1xuXHRpZihvLnR5cGUgPT09IFwiZmlsZVwiKSByZXR1cm4gd3JpdGVfZGwoby5maWxlLCBvdXQpO1xuXHRyZXR1cm4gby50eXBlID09IFwic3RyaW5nXCIgPyB1dGY4cmVhZCgvKjo6KCovb3V0Lyo6OiA6YW55KSovKSA6IG91dDtcbn1cblxuZnVuY3Rpb24gd3JpdGVfY2ZiX3R5cGUod2IvKjpXb3JrYm9vayovLCBvcHRzLyo6P1dyaXRlT3B0cyovKS8qOmFueSovIHtcblx0dmFyIG8gPSBvcHRzfHx7fTtcblx0dmFyIGNmYi8qOkNGQkNvbnRhaW5lciovID0gd3JpdGVfeGxzY2ZiKHdiLCBvKTtcblx0cmV0dXJuIHdyaXRlX2NmYl9jdHIoY2ZiLCBvKTtcbn1cblxuZnVuY3Rpb24gd3JpdGVfc3RyaW5nX3R5cGUob3V0Lyo6c3RyaW5nKi8sIG9wdHMvKjpXcml0ZU9wdHMqLywgYm9tLyo6P3N0cmluZyovKS8qOmFueSovIHtcblx0aWYoIWJvbSkgYm9tID0gXCJcIjtcblx0dmFyIG8gPSBib20gKyBvdXQ7XG5cdHN3aXRjaChvcHRzLnR5cGUpIHtcblx0XHRjYXNlIFwiYmFzZTY0XCI6IHJldHVybiBCYXNlNjRfZW5jb2RlKHV0Zjh3cml0ZShvKSk7XG5cdFx0Y2FzZSBcImJpbmFyeVwiOiByZXR1cm4gdXRmOHdyaXRlKG8pO1xuXHRcdGNhc2UgXCJzdHJpbmdcIjogcmV0dXJuIG91dDtcblx0XHRjYXNlIFwiZmlsZVwiOiByZXR1cm4gd3JpdGVfZGwob3B0cy5maWxlLCBvLCAndXRmOCcpO1xuXHRcdGNhc2UgXCJidWZmZXJcIjoge1xuXHRcdFx0aWYoaGFzX2J1ZikgcmV0dXJuIEJ1ZmZlcl9mcm9tKG8sICd1dGY4Jyk7XG5cdFx0XHRlbHNlIGlmKHR5cGVvZiBUZXh0RW5jb2RlciAhPT0gXCJ1bmRlZmluZWRcIikgcmV0dXJuIG5ldyBUZXh0RW5jb2RlcigpLmVuY29kZShvKTtcblx0XHRcdGVsc2UgcmV0dXJuIHdyaXRlX3N0cmluZ190eXBlKG8sIHt0eXBlOidiaW5hcnknfSkuc3BsaXQoXCJcIikubWFwKGZ1bmN0aW9uKGMpIHsgcmV0dXJuIGMuY2hhckNvZGVBdCgwKTsgfSk7XG5cdFx0fVxuXHR9XG5cdHRocm93IG5ldyBFcnJvcihcIlVucmVjb2duaXplZCB0eXBlIFwiICsgb3B0cy50eXBlKTtcbn1cblxuZnVuY3Rpb24gd3JpdGVfc3R4dF90eXBlKG91dC8qOnN0cmluZyovLCBvcHRzLyo6V3JpdGVPcHRzKi8pLyo6YW55Ki8ge1xuXHRzd2l0Y2gob3B0cy50eXBlKSB7XG5cdFx0Y2FzZSBcImJhc2U2NFwiOiByZXR1cm4gQmFzZTY0X2VuY29kZShvdXQpO1xuXHRcdGNhc2UgXCJiaW5hcnlcIjogcmV0dXJuIG91dDtcblx0XHRjYXNlIFwic3RyaW5nXCI6IHJldHVybiBvdXQ7IC8qIG92ZXJyaWRlIGluIHNoZWV0X3RvX3R4dCAqL1xuXHRcdGNhc2UgXCJmaWxlXCI6IHJldHVybiB3cml0ZV9kbChvcHRzLmZpbGUsIG91dCwgJ2JpbmFyeScpO1xuXHRcdGNhc2UgXCJidWZmZXJcIjoge1xuXHRcdFx0aWYoaGFzX2J1ZikgcmV0dXJuIEJ1ZmZlcl9mcm9tKG91dCwgJ2JpbmFyeScpO1xuXHRcdFx0ZWxzZSByZXR1cm4gb3V0LnNwbGl0KFwiXCIpLm1hcChmdW5jdGlvbihjKSB7IHJldHVybiBjLmNoYXJDb2RlQXQoMCk7IH0pO1xuXHRcdH1cblx0fVxuXHR0aHJvdyBuZXcgRXJyb3IoXCJVbnJlY29nbml6ZWQgdHlwZSBcIiArIG9wdHMudHlwZSk7XG59XG5cbi8qIFRPRE86IHRlc3QgY29uc2lzdGVuY3kgKi9cbmZ1bmN0aW9uIHdyaXRlX2JpbmFyeV90eXBlKG91dCwgb3B0cy8qOldyaXRlT3B0cyovKS8qOmFueSovIHtcblx0c3dpdGNoKG9wdHMudHlwZSkge1xuXHRcdGNhc2UgXCJzdHJpbmdcIjpcblx0XHRjYXNlIFwiYmFzZTY0XCI6XG5cdFx0Y2FzZSBcImJpbmFyeVwiOlxuXHRcdFx0dmFyIGJzdHIgPSBcIlwiO1xuXHRcdFx0Ly8gJEZsb3dJZ25vcmVcblx0XHRcdGZvcih2YXIgaSA9IDA7IGkgPCBvdXQubGVuZ3RoOyArK2kpIGJzdHIgKz0gU3RyaW5nLmZyb21DaGFyQ29kZShvdXRbaV0pO1xuXHRcdFx0cmV0dXJuIG9wdHMudHlwZSA9PSAnYmFzZTY0JyA/IEJhc2U2NF9lbmNvZGUoYnN0cikgOiBvcHRzLnR5cGUgPT0gJ3N0cmluZycgPyB1dGY4cmVhZChic3RyKSA6IGJzdHI7XG5cdFx0Y2FzZSBcImZpbGVcIjogcmV0dXJuIHdyaXRlX2RsKG9wdHMuZmlsZSwgb3V0KTtcblx0XHRjYXNlIFwiYnVmZmVyXCI6IHJldHVybiBvdXQ7XG5cdFx0ZGVmYXVsdDogdGhyb3cgbmV3IEVycm9yKFwiVW5yZWNvZ25pemVkIHR5cGUgXCIgKyBvcHRzLnR5cGUpO1xuXHR9XG59XG5cbmZ1bmN0aW9uIHdyaXRlU3luY1hMU1god2IvKjpXb3JrYm9vayovLCBvcHRzLyo6P1dyaXRlT3B0cyovKSB7XG5cdHJlc2V0X2NwKCk7XG5cdGNoZWNrX3diKHdiKTtcblx0dmFyIG8gPSBkdXAob3B0c3x8e30pO1xuXHRpZihvLmNlbGxTdHlsZXMpIHsgby5jZWxsTkYgPSB0cnVlOyBvLnNoZWV0U3R1YnMgPSB0cnVlOyB9XG5cdGlmKG8udHlwZSA9PSBcImFycmF5XCIpIHsgby50eXBlID0gXCJiaW5hcnlcIjsgdmFyIG91dC8qOnN0cmluZyovID0gKHdyaXRlU3luY1hMU1god2IsIG8pLyo6YW55Ki8pOyBvLnR5cGUgPSBcImFycmF5XCI7IHJldHVybiBzMmFiKG91dCk7IH1cblx0cmV0dXJuIHdyaXRlX3ppcF90eXBlWExTWCh3Yiwgbyk7XG59XG5cbmZ1bmN0aW9uIHdyaXRlU3luYyh3Yi8qOldvcmtib29rKi8sIG9wdHMvKjo/V3JpdGVPcHRzKi8pIHtcblx0cmVzZXRfY3AoKTtcblx0Y2hlY2tfd2Iod2IpO1xuXHR2YXIgbyA9IGR1cChvcHRzfHx7fSk7XG5cdGlmKG8uY2VsbFN0eWxlcykgeyBvLmNlbGxORiA9IHRydWU7IG8uc2hlZXRTdHVicyA9IHRydWU7IH1cblx0aWYoby50eXBlID09IFwiYXJyYXlcIikgeyBvLnR5cGUgPSBcImJpbmFyeVwiOyB2YXIgb3V0Lyo6c3RyaW5nKi8gPSAod3JpdGVTeW5jKHdiLCBvKS8qOmFueSovKTsgby50eXBlID0gXCJhcnJheVwiOyByZXR1cm4gczJhYihvdXQpOyB9XG5cdHZhciBpZHggPSAwO1xuXHRpZihvLnNoZWV0KSB7XG5cdFx0aWYodHlwZW9mIG8uc2hlZXQgPT0gXCJudW1iZXJcIikgaWR4ID0gby5zaGVldDtcblx0XHRlbHNlIGlkeCA9IHdiLlNoZWV0TmFtZXMuaW5kZXhPZihvLnNoZWV0KTtcblx0XHRpZighd2IuU2hlZXROYW1lc1tpZHhdKSB0aHJvdyBuZXcgRXJyb3IoXCJTaGVldCBub3QgZm91bmQ6IFwiICsgby5zaGVldCArIFwiIDogXCIgKyAodHlwZW9mIG8uc2hlZXQpKTtcblx0fVxuXHRzd2l0Y2goby5ib29rVHlwZSB8fCAneGxzYicpIHtcblx0XHRjYXNlICd4bWwnOlxuXHRcdGNhc2UgJ3hsbWwnOiByZXR1cm4gd3JpdGVfc3RyaW5nX3R5cGUod3JpdGVfeGxtbCh3YiwgbyksIG8pO1xuXHRcdGNhc2UgJ3Nsayc6XG5cdFx0Y2FzZSAnc3lsayc6IHJldHVybiB3cml0ZV9zdHJpbmdfdHlwZShTWUxLLmZyb21fc2hlZXQod2IuU2hlZXRzW3diLlNoZWV0TmFtZXNbaWR4XV0sIG8pLCBvKTtcblx0XHRjYXNlICdodG0nOlxuXHRcdGNhc2UgJ2h0bWwnOiByZXR1cm4gd3JpdGVfc3RyaW5nX3R5cGUoc2hlZXRfdG9faHRtbCh3Yi5TaGVldHNbd2IuU2hlZXROYW1lc1tpZHhdXSwgbyksIG8pO1xuXHRcdGNhc2UgJ3R4dCc6IHJldHVybiB3cml0ZV9zdHh0X3R5cGUoc2hlZXRfdG9fdHh0KHdiLlNoZWV0c1t3Yi5TaGVldE5hbWVzW2lkeF1dLCBvKSwgbyk7XG5cdFx0Y2FzZSAnY3N2JzogcmV0dXJuIHdyaXRlX3N0cmluZ190eXBlKHNoZWV0X3RvX2Nzdih3Yi5TaGVldHNbd2IuU2hlZXROYW1lc1tpZHhdXSwgbyksIG8sIFwiXFx1ZmVmZlwiKTtcblx0XHRjYXNlICdkaWYnOiByZXR1cm4gd3JpdGVfc3RyaW5nX3R5cGUoRElGLmZyb21fc2hlZXQod2IuU2hlZXRzW3diLlNoZWV0TmFtZXNbaWR4XV0sIG8pLCBvKTtcblx0XHRjYXNlICdkYmYnOiByZXR1cm4gd3JpdGVfYmluYXJ5X3R5cGUoREJGLmZyb21fc2hlZXQod2IuU2hlZXRzW3diLlNoZWV0TmFtZXNbaWR4XV0sIG8pLCBvKTtcblx0XHRjYXNlICdwcm4nOiByZXR1cm4gd3JpdGVfc3RyaW5nX3R5cGUoUFJOLmZyb21fc2hlZXQod2IuU2hlZXRzW3diLlNoZWV0TmFtZXNbaWR4XV0sIG8pLCBvKTtcblx0XHRjYXNlICdydGYnOiByZXR1cm4gd3JpdGVfc3RyaW5nX3R5cGUoUlRGLmZyb21fc2hlZXQod2IuU2hlZXRzW3diLlNoZWV0TmFtZXNbaWR4XV0sIG8pLCBvKTtcblx0XHRjYXNlICdldGgnOiByZXR1cm4gd3JpdGVfc3RyaW5nX3R5cGUoRVRILmZyb21fc2hlZXQod2IuU2hlZXRzW3diLlNoZWV0TmFtZXNbaWR4XV0sIG8pLCBvKTtcblx0XHRjYXNlICdmb2RzJzogcmV0dXJuIHdyaXRlX3N0cmluZ190eXBlKHdyaXRlX29kcyh3YiwgbyksIG8pO1xuXHRcdGNhc2UgJ3drMSc6IHJldHVybiB3cml0ZV9iaW5hcnlfdHlwZShXS18uc2hlZXRfdG9fd2sxKHdiLlNoZWV0c1t3Yi5TaGVldE5hbWVzW2lkeF1dLCBvKSwgbyk7XG5cdFx0Y2FzZSAnd2szJzogcmV0dXJuIHdyaXRlX2JpbmFyeV90eXBlKFdLXy5ib29rX3RvX3drMyh3YiwgbyksIG8pO1xuXHRcdGNhc2UgJ2JpZmYyJzogaWYoIW8uYmlmZikgby5iaWZmID0gMjsgLyogZmFsbHMgdGhyb3VnaCAqL1xuXHRcdGNhc2UgJ2JpZmYzJzogaWYoIW8uYmlmZikgby5iaWZmID0gMzsgLyogZmFsbHMgdGhyb3VnaCAqL1xuXHRcdGNhc2UgJ2JpZmY0JzogaWYoIW8uYmlmZikgby5iaWZmID0gNDsgcmV0dXJuIHdyaXRlX2JpbmFyeV90eXBlKHdyaXRlX2JpZmZfYnVmKHdiLCBvKSwgbyk7XG5cdFx0Y2FzZSAnYmlmZjUnOiBpZighby5iaWZmKSBvLmJpZmYgPSA1OyAvKiBmYWxscyB0aHJvdWdoICovXG5cdFx0Y2FzZSAnYmlmZjgnOlxuXHRcdGNhc2UgJ3hsYSc6XG5cdFx0Y2FzZSAneGxzJzogaWYoIW8uYmlmZikgby5iaWZmID0gODsgcmV0dXJuIHdyaXRlX2NmYl90eXBlKHdiLCBvKTtcblx0XHRjYXNlICd4bHN4Jzpcblx0XHRjYXNlICd4bHNtJzpcblx0XHRjYXNlICd4bGFtJzpcblx0XHRjYXNlICd4bHNiJzpcblx0XHRjYXNlICdudW1iZXJzJzpcblx0XHRjYXNlICdvZHMnOiByZXR1cm4gd3JpdGVfemlwX3R5cGUod2IsIG8pO1xuXHRcdGRlZmF1bHQ6IHRocm93IG5ldyBFcnJvciAoXCJVbnJlY29nbml6ZWQgYm9va1R5cGUgfFwiICsgby5ib29rVHlwZSArIFwifFwiKTtcblx0fVxufVxuXG5mdW5jdGlvbiByZXNvbHZlX2Jvb2tfdHlwZShvLyo6V3JpdGVGaWxlT3B0cyovKSB7XG5cdGlmKG8uYm9va1R5cGUpIHJldHVybjtcblx0dmFyIF9CVCA9IHtcblx0XHRcInhsc1wiOiBcImJpZmY4XCIsXG5cdFx0XCJodG1cIjogXCJodG1sXCIsXG5cdFx0XCJzbGtcIjogXCJzeWxrXCIsXG5cdFx0XCJzb2NpYWxjYWxjXCI6IFwiZXRoXCIsXG5cdFx0XCJTaDMzdEpTXCI6IFwiV1RGXCJcblx0fTtcblx0dmFyIGV4dCA9IG8uZmlsZS5zbGljZShvLmZpbGUubGFzdEluZGV4T2YoXCIuXCIpKS50b0xvd2VyQ2FzZSgpO1xuXHRpZihleHQubWF0Y2goL15cXC5bYS16XSskLykpIG8uYm9va1R5cGUgPSBleHQuc2xpY2UoMSk7XG5cdG8uYm9va1R5cGUgPSBfQlRbby5ib29rVHlwZV0gfHwgby5ib29rVHlwZTtcbn1cblxuZnVuY3Rpb24gd3JpdGVGaWxlU3luYyh3Yi8qOldvcmtib29rKi8sIGZpbGVuYW1lLyo6c3RyaW5nKi8sIG9wdHMvKjo/V3JpdGVGaWxlT3B0cyovKSB7XG5cdHZhciBvID0gb3B0c3x8e307IG8udHlwZSA9ICdmaWxlJztcblx0by5maWxlID0gZmlsZW5hbWU7XG5cdHJlc29sdmVfYm9va190eXBlKG8pO1xuXHRyZXR1cm4gd3JpdGVTeW5jKHdiLCBvKTtcbn1cblxuZnVuY3Rpb24gd3JpdGVGaWxlU3luY1hMU1god2IvKjpXb3JrYm9vayovLCBmaWxlbmFtZS8qOnN0cmluZyovLCBvcHRzLyo6P1dyaXRlRmlsZU9wdHMqLykge1xuXHR2YXIgbyA9IG9wdHN8fHt9OyBvLnR5cGUgPSAnZmlsZSc7XG5cdG8uZmlsZSA9IGZpbGVuYW1lO1xuXHRyZXNvbHZlX2Jvb2tfdHlwZShvKTtcblx0cmV0dXJuIHdyaXRlU3luY1hMU1god2IsIG8pO1xufVxuXG5cbmZ1bmN0aW9uIHdyaXRlRmlsZUFzeW5jKGZpbGVuYW1lLyo6c3RyaW5nKi8sIHdiLyo6V29ya2Jvb2sqLywgb3B0cy8qOj9Xcml0ZUZpbGVPcHRzKi8sIGNiLyo6PyhlPzpFcnJub0Vycm9yKT0+dm9pZCovKSB7XG5cdHZhciBvID0gb3B0c3x8e307IG8udHlwZSA9ICdmaWxlJztcblx0by5maWxlID0gZmlsZW5hbWU7XG5cdHJlc29sdmVfYm9va190eXBlKG8pO1xuXHRvLnR5cGUgPSAnYnVmZmVyJztcblx0dmFyIF9jYiA9IGNiOyBpZighKF9jYiBpbnN0YW5jZW9mIEZ1bmN0aW9uKSkgX2NiID0gKG9wdHMvKjphbnkqLyk7XG5cdHJldHVybiBfZnMud3JpdGVGaWxlKGZpbGVuYW1lLCB3cml0ZVN5bmMod2IsIG8pLCBfY2IpO1xufVxuLyo6OlxudHlwZSBNSlJPYmplY3QgPSB7XG5cdHJvdzogYW55O1xuXHRpc2VtcHR5OiBib29sZWFuO1xufTtcbiovXG5mdW5jdGlvbiBtYWtlX2pzb25fcm93KHNoZWV0Lyo6V29ya3NoZWV0Ki8sIHIvKjpSYW5nZSovLCBSLyo6bnVtYmVyKi8sIGNvbHMvKjpBcnJheTxzdHJpbmc+Ki8sIGhlYWRlci8qOm51bWJlciovLCBoZHIvKjpBcnJheTxhbnk+Ki8sIGRlbnNlLyo6Ym9vbGVhbiovLCBvLyo6U2hlZXQySlNPTk9wdHMqLykvKjpNSlJPYmplY3QqLyB7XG5cdHZhciByciA9IGVuY29kZV9yb3coUik7XG5cdHZhciBkZWZ2YWwgPSBvLmRlZnZhbCwgcmF3ID0gby5yYXcgfHwgIU9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChvLCBcInJhd1wiKTtcblx0dmFyIGlzZW1wdHkgPSB0cnVlO1xuXHR2YXIgcm93Lyo6YW55Ki8gPSAoaGVhZGVyID09PSAxKSA/IFtdIDoge307XG5cdGlmKGhlYWRlciAhPT0gMSkge1xuXHRcdGlmKE9iamVjdC5kZWZpbmVQcm9wZXJ0eSkgdHJ5IHsgT2JqZWN0LmRlZmluZVByb3BlcnR5KHJvdywgJ19fcm93TnVtX18nLCB7dmFsdWU6UiwgZW51bWVyYWJsZTpmYWxzZX0pOyB9IGNhdGNoKGUpIHsgcm93Ll9fcm93TnVtX18gPSBSOyB9XG5cdFx0ZWxzZSByb3cuX19yb3dOdW1fXyA9IFI7XG5cdH1cblx0aWYoIWRlbnNlIHx8IHNoZWV0W1JdKSBmb3IgKHZhciBDID0gci5zLmM7IEMgPD0gci5lLmM7ICsrQykge1xuXHRcdHZhciB2YWwgPSBkZW5zZSA/IHNoZWV0W1JdW0NdIDogc2hlZXRbY29sc1tDXSArIHJyXTtcblx0XHRpZih2YWwgPT09IHVuZGVmaW5lZCB8fCB2YWwudCA9PT0gdW5kZWZpbmVkKSB7XG5cdFx0XHRpZihkZWZ2YWwgPT09IHVuZGVmaW5lZCkgY29udGludWU7XG5cdFx0XHRpZihoZHJbQ10gIT0gbnVsbCkgeyByb3dbaGRyW0NdXSA9IGRlZnZhbDsgfVxuXHRcdFx0Y29udGludWU7XG5cdFx0fVxuXHRcdHZhciB2ID0gdmFsLnY7XG5cdFx0c3dpdGNoKHZhbC50KXtcblx0XHRcdGNhc2UgJ3onOiBpZih2ID09IG51bGwpIGJyZWFrOyBjb250aW51ZTtcblx0XHRcdGNhc2UgJ2UnOiB2ID0gKHYgPT0gMCA/IG51bGwgOiB2b2lkIDApOyBicmVhaztcblx0XHRcdGNhc2UgJ3MnOiBjYXNlICdkJzogY2FzZSAnYic6IGNhc2UgJ24nOiBicmVhaztcblx0XHRcdGRlZmF1bHQ6IHRocm93IG5ldyBFcnJvcigndW5yZWNvZ25pemVkIHR5cGUgJyArIHZhbC50KTtcblx0XHR9XG5cdFx0aWYoaGRyW0NdICE9IG51bGwpIHtcblx0XHRcdGlmKHYgPT0gbnVsbCkge1xuXHRcdFx0XHRpZih2YWwudCA9PSBcImVcIiAmJiB2ID09PSBudWxsKSByb3dbaGRyW0NdXSA9IG51bGw7XG5cdFx0XHRcdGVsc2UgaWYoZGVmdmFsICE9PSB1bmRlZmluZWQpIHJvd1toZHJbQ11dID0gZGVmdmFsO1xuXHRcdFx0XHRlbHNlIGlmKHJhdyAmJiB2ID09PSBudWxsKSByb3dbaGRyW0NdXSA9IG51bGw7XG5cdFx0XHRcdGVsc2UgY29udGludWU7XG5cdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRyb3dbaGRyW0NdXSA9IHJhdyAmJiAodmFsLnQgIT09IFwiblwiIHx8ICh2YWwudCA9PT0gXCJuXCIgJiYgby5yYXdOdW1iZXJzICE9PSBmYWxzZSkpID8gdiA6IGZvcm1hdF9jZWxsKHZhbCx2LG8pO1xuXHRcdFx0fVxuXHRcdFx0aWYodiAhPSBudWxsKSBpc2VtcHR5ID0gZmFsc2U7XG5cdFx0fVxuXHR9XG5cdHJldHVybiB7IHJvdzogcm93LCBpc2VtcHR5OiBpc2VtcHR5IH07XG59XG5cblxuZnVuY3Rpb24gc2hlZXRfdG9fanNvbihzaGVldC8qOldvcmtzaGVldCovLCBvcHRzLyo6P1NoZWV0MkpTT05PcHRzKi8pIHtcblx0aWYoc2hlZXQgPT0gbnVsbCB8fCBzaGVldFtcIiFyZWZcIl0gPT0gbnVsbCkgcmV0dXJuIFtdO1xuXHR2YXIgdmFsID0ge3Q6J24nLHY6MH0sIGhlYWRlciA9IDAsIG9mZnNldCA9IDEsIGhkci8qOkFycmF5PGFueT4qLyA9IFtdLCB2PTAsIHZ2PVwiXCI7XG5cdHZhciByID0ge3M6e3I6MCxjOjB9LGU6e3I6MCxjOjB9fTtcblx0dmFyIG8gPSBvcHRzIHx8IHt9O1xuXHR2YXIgcmFuZ2UgPSBvLnJhbmdlICE9IG51bGwgPyBvLnJhbmdlIDogc2hlZXRbXCIhcmVmXCJdO1xuXHRpZihvLmhlYWRlciA9PT0gMSkgaGVhZGVyID0gMTtcblx0ZWxzZSBpZihvLmhlYWRlciA9PT0gXCJBXCIpIGhlYWRlciA9IDI7XG5cdGVsc2UgaWYoQXJyYXkuaXNBcnJheShvLmhlYWRlcikpIGhlYWRlciA9IDM7XG5cdGVsc2UgaWYoby5oZWFkZXIgPT0gbnVsbCkgaGVhZGVyID0gMDtcblx0c3dpdGNoKHR5cGVvZiByYW5nZSkge1xuXHRcdGNhc2UgJ3N0cmluZyc6IHIgPSBzYWZlX2RlY29kZV9yYW5nZShyYW5nZSk7IGJyZWFrO1xuXHRcdGNhc2UgJ251bWJlcic6IHIgPSBzYWZlX2RlY29kZV9yYW5nZShzaGVldFtcIiFyZWZcIl0pOyByLnMuciA9IHJhbmdlOyBicmVhaztcblx0XHRkZWZhdWx0OiByID0gcmFuZ2U7XG5cdH1cblx0aWYoaGVhZGVyID4gMCkgb2Zmc2V0ID0gMDtcblx0dmFyIHJyID0gZW5jb2RlX3JvdyhyLnMucik7XG5cdHZhciBjb2xzLyo6QXJyYXk8c3RyaW5nPiovID0gW107XG5cdHZhciBvdXQvKjpBcnJheTxhbnk+Ki8gPSBbXTtcblx0dmFyIG91dGkgPSAwLCBjb3VudGVyID0gMDtcblx0dmFyIGRlbnNlID0gQXJyYXkuaXNBcnJheShzaGVldCk7XG5cdHZhciBSID0gci5zLnIsIEMgPSAwO1xuXHR2YXIgaGVhZGVyX2NudCA9IHt9O1xuXHRpZihkZW5zZSAmJiAhc2hlZXRbUl0pIHNoZWV0W1JdID0gW107XG5cdHZhciBjb2xpbmZvLyo6QXJyYXk8Q29sSW5mbz4qLyA9IG8uc2tpcEhpZGRlbiAmJiBzaGVldFtcIiFjb2xzXCJdIHx8IFtdO1xuXHR2YXIgcm93aW5mby8qOkFycmF5PENvbEluZm8+Ki8gPSBvLnNraXBIaWRkZW4gJiYgc2hlZXRbXCIhcm93c1wiXSB8fCBbXTtcblx0Zm9yKEMgPSByLnMuYzsgQyA8PSByLmUuYzsgKytDKSB7XG5cdFx0aWYoKChjb2xpbmZvW0NdfHx7fSkuaGlkZGVuKSkgY29udGludWU7XG5cdFx0Y29sc1tDXSA9IGVuY29kZV9jb2woQyk7XG5cdFx0dmFsID0gZGVuc2UgPyBzaGVldFtSXVtDXSA6IHNoZWV0W2NvbHNbQ10gKyBycl07XG5cdFx0c3dpdGNoKGhlYWRlcikge1xuXHRcdFx0Y2FzZSAxOiBoZHJbQ10gPSBDIC0gci5zLmM7IGJyZWFrO1xuXHRcdFx0Y2FzZSAyOiBoZHJbQ10gPSBjb2xzW0NdOyBicmVhaztcblx0XHRcdGNhc2UgMzogaGRyW0NdID0gby5oZWFkZXJbQyAtIHIucy5jXTsgYnJlYWs7XG5cdFx0XHRkZWZhdWx0OlxuXHRcdFx0XHRpZih2YWwgPT0gbnVsbCkgdmFsID0ge3c6IFwiX19FTVBUWVwiLCB0OiBcInNcIn07XG5cdFx0XHRcdHZ2ID0gdiA9IGZvcm1hdF9jZWxsKHZhbCwgbnVsbCwgbyk7XG5cdFx0XHRcdGNvdW50ZXIgPSBoZWFkZXJfY250W3ZdIHx8IDA7XG5cdFx0XHRcdGlmKCFjb3VudGVyKSBoZWFkZXJfY250W3ZdID0gMTtcblx0XHRcdFx0ZWxzZSB7XG5cdFx0XHRcdFx0ZG8geyB2diA9IHYgKyBcIl9cIiArIChjb3VudGVyKyspOyB9IHdoaWxlKGhlYWRlcl9jbnRbdnZdKTsgaGVhZGVyX2NudFt2XSA9IGNvdW50ZXI7XG5cdFx0XHRcdFx0aGVhZGVyX2NudFt2dl0gPSAxO1xuXHRcdFx0XHR9XG5cdFx0XHRcdGhkcltDXSA9IHZ2O1xuXHRcdH1cblx0fVxuXHRmb3IgKFIgPSByLnMuciArIG9mZnNldDsgUiA8PSByLmUucjsgKytSKSB7XG5cdFx0aWYgKChyb3dpbmZvW1JdfHx7fSkuaGlkZGVuKSBjb250aW51ZTtcblx0XHR2YXIgcm93ID0gbWFrZV9qc29uX3JvdyhzaGVldCwgciwgUiwgY29scywgaGVhZGVyLCBoZHIsIGRlbnNlLCBvKTtcblx0XHRpZigocm93LmlzZW1wdHkgPT09IGZhbHNlKSB8fCAoaGVhZGVyID09PSAxID8gby5ibGFua3Jvd3MgIT09IGZhbHNlIDogISFvLmJsYW5rcm93cykpIG91dFtvdXRpKytdID0gcm93LnJvdztcblx0fVxuXHRvdXQubGVuZ3RoID0gb3V0aTtcblx0cmV0dXJuIG91dDtcbn1cblxudmFyIHFyZWcgPSAvXCIvZztcbmZ1bmN0aW9uIG1ha2VfY3N2X3JvdyhzaGVldC8qOldvcmtzaGVldCovLCByLyo6UmFuZ2UqLywgUi8qOm51bWJlciovLCBjb2xzLyo6QXJyYXk8c3RyaW5nPiovLCBmcy8qOm51bWJlciovLCBycy8qOm51bWJlciovLCBGUy8qOnN0cmluZyovLCBvLyo6U2hlZXQyQ1NWT3B0cyovKS8qOj9zdHJpbmcqLyB7XG5cdHZhciBpc2VtcHR5ID0gdHJ1ZTtcblx0dmFyIHJvdy8qOkFycmF5PHN0cmluZz4qLyA9IFtdLCB0eHQgPSBcIlwiLCByciA9IGVuY29kZV9yb3coUik7XG5cdGZvcih2YXIgQyA9IHIucy5jOyBDIDw9IHIuZS5jOyArK0MpIHtcblx0XHRpZiAoIWNvbHNbQ10pIGNvbnRpbnVlO1xuXHRcdHZhciB2YWwgPSBvLmRlbnNlID8gKHNoZWV0W1JdfHxbXSlbQ106IHNoZWV0W2NvbHNbQ10gKyBycl07XG5cdFx0aWYodmFsID09IG51bGwpIHR4dCA9IFwiXCI7XG5cdFx0ZWxzZSBpZih2YWwudiAhPSBudWxsKSB7XG5cdFx0XHRpc2VtcHR5ID0gZmFsc2U7XG5cdFx0XHR0eHQgPSAnJysoby5yYXdOdW1iZXJzICYmIHZhbC50ID09IFwiblwiID8gdmFsLnYgOiBmb3JtYXRfY2VsbCh2YWwsIG51bGwsIG8pKTtcblx0XHRcdGZvcih2YXIgaSA9IDAsIGNjID0gMDsgaSAhPT0gdHh0Lmxlbmd0aDsgKytpKSBpZigoY2MgPSB0eHQuY2hhckNvZGVBdChpKSkgPT09IGZzIHx8IGNjID09PSBycyB8fCBjYyA9PT0gMzQgfHwgby5mb3JjZVF1b3Rlcykge3R4dCA9IFwiXFxcIlwiICsgdHh0LnJlcGxhY2UocXJlZywgJ1wiXCInKSArIFwiXFxcIlwiOyBicmVhazsgfVxuXHRcdFx0aWYodHh0ID09IFwiSURcIikgdHh0ID0gJ1wiSURcIic7XG5cdFx0fSBlbHNlIGlmKHZhbC5mICE9IG51bGwgJiYgIXZhbC5GKSB7XG5cdFx0XHRpc2VtcHR5ID0gZmFsc2U7XG5cdFx0XHR0eHQgPSAnPScgKyB2YWwuZjsgaWYodHh0LmluZGV4T2YoXCIsXCIpID49IDApIHR4dCA9ICdcIicgKyB0eHQucmVwbGFjZShxcmVnLCAnXCJcIicpICsgJ1wiJztcblx0XHR9IGVsc2UgdHh0ID0gXCJcIjtcblx0XHQvKiBOT1RFOiBFeGNlbCBDU1YgZG9lcyBub3Qgc3VwcG9ydCBhcnJheSBmb3JtdWxhZSAqL1xuXHRcdHJvdy5wdXNoKHR4dCk7XG5cdH1cblx0aWYoby5ibGFua3Jvd3MgPT09IGZhbHNlICYmIGlzZW1wdHkpIHJldHVybiBudWxsO1xuXHRyZXR1cm4gcm93LmpvaW4oRlMpO1xufVxuXG5mdW5jdGlvbiBzaGVldF90b19jc3Yoc2hlZXQvKjpXb3Jrc2hlZXQqLywgb3B0cy8qOj9TaGVldDJDU1ZPcHRzKi8pLyo6c3RyaW5nKi8ge1xuXHR2YXIgb3V0Lyo6QXJyYXk8c3RyaW5nPiovID0gW107XG5cdHZhciBvID0gb3B0cyA9PSBudWxsID8ge30gOiBvcHRzO1xuXHRpZihzaGVldCA9PSBudWxsIHx8IHNoZWV0W1wiIXJlZlwiXSA9PSBudWxsKSByZXR1cm4gXCJcIjtcblx0dmFyIHIgPSBzYWZlX2RlY29kZV9yYW5nZShzaGVldFtcIiFyZWZcIl0pO1xuXHR2YXIgRlMgPSBvLkZTICE9PSB1bmRlZmluZWQgPyBvLkZTIDogXCIsXCIsIGZzID0gRlMuY2hhckNvZGVBdCgwKTtcblx0dmFyIFJTID0gby5SUyAhPT0gdW5kZWZpbmVkID8gby5SUyA6IFwiXFxuXCIsIHJzID0gUlMuY2hhckNvZGVBdCgwKTtcblx0dmFyIGVuZHJlZ2V4ID0gbmV3IFJlZ0V4cCgoRlM9PVwifFwiID8gXCJcXFxcfFwiIDogRlMpK1wiKyRcIik7XG5cdHZhciByb3cgPSBcIlwiLCBjb2xzLyo6QXJyYXk8c3RyaW5nPiovID0gW107XG5cdG8uZGVuc2UgPSBBcnJheS5pc0FycmF5KHNoZWV0KTtcblx0dmFyIGNvbGluZm8vKjpBcnJheTxDb2xJbmZvPiovID0gby5za2lwSGlkZGVuICYmIHNoZWV0W1wiIWNvbHNcIl0gfHwgW107XG5cdHZhciByb3dpbmZvLyo6QXJyYXk8Q29sSW5mbz4qLyA9IG8uc2tpcEhpZGRlbiAmJiBzaGVldFtcIiFyb3dzXCJdIHx8IFtdO1xuXHRmb3IodmFyIEMgPSByLnMuYzsgQyA8PSByLmUuYzsgKytDKSBpZiAoISgoY29saW5mb1tDXXx8e30pLmhpZGRlbikpIGNvbHNbQ10gPSBlbmNvZGVfY29sKEMpO1xuXHR2YXIgdyA9IDA7XG5cdGZvcih2YXIgUiA9IHIucy5yOyBSIDw9IHIuZS5yOyArK1IpIHtcblx0XHRpZiAoKHJvd2luZm9bUl18fHt9KS5oaWRkZW4pIGNvbnRpbnVlO1xuXHRcdHJvdyA9IG1ha2VfY3N2X3JvdyhzaGVldCwgciwgUiwgY29scywgZnMsIHJzLCBGUywgbyk7XG5cdFx0aWYocm93ID09IG51bGwpIHsgY29udGludWU7IH1cblx0XHRpZihvLnN0cmlwKSByb3cgPSByb3cucmVwbGFjZShlbmRyZWdleCxcIlwiKTtcblx0XHRpZihyb3cgfHwgKG8uYmxhbmtyb3dzICE9PSBmYWxzZSkpIG91dC5wdXNoKCh3KysgPyBSUyA6IFwiXCIpICsgcm93KTtcblx0fVxuXHRkZWxldGUgby5kZW5zZTtcblx0cmV0dXJuIG91dC5qb2luKFwiXCIpO1xufVxuXG5mdW5jdGlvbiBzaGVldF90b190eHQoc2hlZXQvKjpXb3Jrc2hlZXQqLywgb3B0cy8qOj9TaGVldDJDU1ZPcHRzKi8pIHtcblx0aWYoIW9wdHMpIG9wdHMgPSB7fTsgb3B0cy5GUyA9IFwiXFx0XCI7IG9wdHMuUlMgPSBcIlxcblwiO1xuXHR2YXIgcyA9IHNoZWV0X3RvX2NzdihzaGVldCwgb3B0cyk7XG5cdGlmKHR5cGVvZiAkY3B0YWJsZSA9PSAndW5kZWZpbmVkJyB8fCBvcHRzLnR5cGUgPT0gJ3N0cmluZycpIHJldHVybiBzO1xuXHR2YXIgbyA9ICRjcHRhYmxlLnV0aWxzLmVuY29kZSgxMjAwLCBzLCAnc3RyJyk7XG5cdHJldHVybiBTdHJpbmcuZnJvbUNoYXJDb2RlKDI1NSkgKyBTdHJpbmcuZnJvbUNoYXJDb2RlKDI1NCkgKyBvO1xufVxuXG5mdW5jdGlvbiBzaGVldF90b19mb3JtdWxhZShzaGVldC8qOldvcmtzaGVldCovKS8qOkFycmF5PHN0cmluZz4qLyB7XG5cdHZhciB5ID0gXCJcIiwgeCwgdmFsPVwiXCI7XG5cdGlmKHNoZWV0ID09IG51bGwgfHwgc2hlZXRbXCIhcmVmXCJdID09IG51bGwpIHJldHVybiBbXTtcblx0dmFyIHIgPSBzYWZlX2RlY29kZV9yYW5nZShzaGVldFsnIXJlZiddKSwgcnIgPSBcIlwiLCBjb2xzLyo6QXJyYXk8c3RyaW5nPiovID0gW10sIEM7XG5cdHZhciBjbWRzLyo6QXJyYXk8c3RyaW5nPiovID0gW107XG5cdHZhciBkZW5zZSA9IEFycmF5LmlzQXJyYXkoc2hlZXQpO1xuXHRmb3IoQyA9IHIucy5jOyBDIDw9IHIuZS5jOyArK0MpIGNvbHNbQ10gPSBlbmNvZGVfY29sKEMpO1xuXHRmb3IodmFyIFIgPSByLnMucjsgUiA8PSByLmUucjsgKytSKSB7XG5cdFx0cnIgPSBlbmNvZGVfcm93KFIpO1xuXHRcdGZvcihDID0gci5zLmM7IEMgPD0gci5lLmM7ICsrQykge1xuXHRcdFx0eSA9IGNvbHNbQ10gKyBycjtcblx0XHRcdHggPSBkZW5zZSA/IChzaGVldFtSXXx8W10pW0NdIDogc2hlZXRbeV07XG5cdFx0XHR2YWwgPSBcIlwiO1xuXHRcdFx0aWYoeCA9PT0gdW5kZWZpbmVkKSBjb250aW51ZTtcblx0XHRcdGVsc2UgaWYoeC5GICE9IG51bGwpIHtcblx0XHRcdFx0eSA9IHguRjtcblx0XHRcdFx0aWYoIXguZikgY29udGludWU7XG5cdFx0XHRcdHZhbCA9IHguZjtcblx0XHRcdFx0aWYoeS5pbmRleE9mKFwiOlwiKSA9PSAtMSkgeSA9IHkgKyBcIjpcIiArIHk7XG5cdFx0XHR9XG5cdFx0XHRpZih4LmYgIT0gbnVsbCkgdmFsID0geC5mO1xuXHRcdFx0ZWxzZSBpZih4LnQgPT0gJ3onKSBjb250aW51ZTtcblx0XHRcdGVsc2UgaWYoeC50ID09ICduJyAmJiB4LnYgIT0gbnVsbCkgdmFsID0gXCJcIiArIHgudjtcblx0XHRcdGVsc2UgaWYoeC50ID09ICdiJykgdmFsID0geC52ID8gXCJUUlVFXCIgOiBcIkZBTFNFXCI7XG5cdFx0XHRlbHNlIGlmKHgudyAhPT0gdW5kZWZpbmVkKSB2YWwgPSBcIidcIiArIHgudztcblx0XHRcdGVsc2UgaWYoeC52ID09PSB1bmRlZmluZWQpIGNvbnRpbnVlO1xuXHRcdFx0ZWxzZSBpZih4LnQgPT0gJ3MnKSB2YWwgPSBcIidcIiArIHgudjtcblx0XHRcdGVsc2UgdmFsID0gXCJcIit4LnY7XG5cdFx0XHRjbWRzW2NtZHMubGVuZ3RoXSA9IHkgKyBcIj1cIiArIHZhbDtcblx0XHR9XG5cdH1cblx0cmV0dXJuIGNtZHM7XG59XG5cbmZ1bmN0aW9uIHNoZWV0X2FkZF9qc29uKF93cy8qOj9Xb3Jrc2hlZXQqLywganMvKjpBcnJheTxhbnk+Ki8sIG9wdHMpLyo6V29ya3NoZWV0Ki8ge1xuXHR2YXIgbyA9IG9wdHMgfHwge307XG5cdHZhciBvZmZzZXQgPSArIW8uc2tpcEhlYWRlcjtcblx0dmFyIHdzLyo6V29ya3NoZWV0Ki8gPSBfd3MgfHwgKHt9Lyo6YW55Ki8pO1xuXHR2YXIgX1IgPSAwLCBfQyA9IDA7XG5cdGlmKHdzICYmIG8ub3JpZ2luICE9IG51bGwpIHtcblx0XHRpZih0eXBlb2Ygby5vcmlnaW4gPT0gJ251bWJlcicpIF9SID0gby5vcmlnaW47XG5cdFx0ZWxzZSB7XG5cdFx0XHR2YXIgX29yaWdpbi8qOkNlbGxBZGRyZXNzKi8gPSB0eXBlb2Ygby5vcmlnaW4gPT0gXCJzdHJpbmdcIiA/IGRlY29kZV9jZWxsKG8ub3JpZ2luKSA6IG8ub3JpZ2luO1xuXHRcdFx0X1IgPSBfb3JpZ2luLnI7IF9DID0gX29yaWdpbi5jO1xuXHRcdH1cblx0fVxuXHR2YXIgY2VsbC8qOkNlbGwqLztcblx0dmFyIHJhbmdlLyo6UmFuZ2UqLyA9ICh7czoge2M6MCwgcjowfSwgZToge2M6X0MsIHI6X1IgKyBqcy5sZW5ndGggLSAxICsgb2Zmc2V0fX0vKjphbnkqLyk7XG5cdGlmKHdzWychcmVmJ10pIHtcblx0XHR2YXIgX3JhbmdlID0gc2FmZV9kZWNvZGVfcmFuZ2Uod3NbJyFyZWYnXSk7XG5cdFx0cmFuZ2UuZS5jID0gTWF0aC5tYXgocmFuZ2UuZS5jLCBfcmFuZ2UuZS5jKTtcblx0XHRyYW5nZS5lLnIgPSBNYXRoLm1heChyYW5nZS5lLnIsIF9yYW5nZS5lLnIpO1xuXHRcdGlmKF9SID09IC0xKSB7IF9SID0gX3JhbmdlLmUuciArIDE7IHJhbmdlLmUuciA9IF9SICsganMubGVuZ3RoIC0gMSArIG9mZnNldDsgfVxuXHR9IGVsc2Uge1xuXHRcdGlmKF9SID09IC0xKSB7IF9SID0gMDsgcmFuZ2UuZS5yID0ganMubGVuZ3RoIC0gMSArIG9mZnNldDsgfVxuXHR9XG5cdHZhciBoZHIvKjpBcnJheTxzdHJpbmc+Ki8gPSBvLmhlYWRlciB8fCBbXSwgQyA9IDA7XG5cblx0anMuZm9yRWFjaChmdW5jdGlvbiAoSlMsIFIvKjpudW1iZXIqLykge1xuXHRcdGtleXMoSlMpLmZvckVhY2goZnVuY3Rpb24oaykge1xuXHRcdFx0aWYoKEM9aGRyLmluZGV4T2YoaykpID09IC0xKSBoZHJbQz1oZHIubGVuZ3RoXSA9IGs7XG5cdFx0XHR2YXIgdiA9IEpTW2tdO1xuXHRcdFx0dmFyIHQgPSAneic7XG5cdFx0XHR2YXIgeiA9IFwiXCI7XG5cdFx0XHR2YXIgcmVmID0gZW5jb2RlX2NlbGwoe2M6X0MgKyBDLHI6X1IgKyBSICsgb2Zmc2V0fSk7XG5cdFx0XHRjZWxsID0gd3NfZ2V0X2NlbGxfc3R1Yih3cywgcmVmKTtcblx0XHRcdGlmKHYgJiYgdHlwZW9mIHYgPT09ICdvYmplY3QnICYmICEodiBpbnN0YW5jZW9mIERhdGUpKXtcblx0XHRcdFx0d3NbcmVmXSA9IHY7XG5cdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRpZih0eXBlb2YgdiA9PSAnbnVtYmVyJykgdCA9ICduJztcblx0XHRcdFx0ZWxzZSBpZih0eXBlb2YgdiA9PSAnYm9vbGVhbicpIHQgPSAnYic7XG5cdFx0XHRcdGVsc2UgaWYodHlwZW9mIHYgPT0gJ3N0cmluZycpIHQgPSAncyc7XG5cdFx0XHRcdGVsc2UgaWYodiBpbnN0YW5jZW9mIERhdGUpIHtcblx0XHRcdFx0XHR0ID0gJ2QnO1xuXHRcdFx0XHRcdGlmKCFvLmNlbGxEYXRlcykgeyB0ID0gJ24nOyB2ID0gZGF0ZW51bSh2KTsgfVxuXHRcdFx0XHRcdHogPSAoby5kYXRlTkYgfHwgdGFibGVfZm10WzE0XSk7XG5cdFx0XHRcdH1cblx0XHRcdFx0ZWxzZSBpZih2ID09PSBudWxsICYmIG8ubnVsbEVycm9yKSB7IHQgPSAnZSc7IHYgPSAwOyB9XG5cdFx0XHRcdGlmKCFjZWxsKSB3c1tyZWZdID0gY2VsbCA9ICh7dDp0LCB2OnZ9Lyo6YW55Ki8pO1xuXHRcdFx0XHRlbHNlIHtcblx0XHRcdFx0XHRjZWxsLnQgPSB0OyBjZWxsLnYgPSB2O1xuXHRcdFx0XHRcdGRlbGV0ZSBjZWxsLnc7IGRlbGV0ZSBjZWxsLlI7XG5cdFx0XHRcdFx0aWYoeikgY2VsbC56ID0gejtcblx0XHRcdFx0fVxuXHRcdFx0XHRpZih6KSBjZWxsLnogPSB6O1xuXHRcdFx0fVxuXHRcdH0pO1xuXHR9KTtcblx0cmFuZ2UuZS5jID0gTWF0aC5tYXgocmFuZ2UuZS5jLCBfQyArIGhkci5sZW5ndGggLSAxKTtcblx0dmFyIF9fUiA9IGVuY29kZV9yb3coX1IpO1xuXHRpZihvZmZzZXQpIGZvcihDID0gMDsgQyA8IGhkci5sZW5ndGg7ICsrQykgd3NbZW5jb2RlX2NvbChDICsgX0MpICsgX19SXSA9IHt0OidzJywgdjpoZHJbQ119O1xuXHR3c1snIXJlZiddID0gZW5jb2RlX3JhbmdlKHJhbmdlKTtcblx0cmV0dXJuIHdzO1xufVxuZnVuY3Rpb24ganNvbl90b19zaGVldChqcy8qOkFycmF5PGFueT4qLywgb3B0cykvKjpXb3Jrc2hlZXQqLyB7IHJldHVybiBzaGVldF9hZGRfanNvbihudWxsLCBqcywgb3B0cyk7IH1cblxuLyogZ2V0IGNlbGwsIGNyZWF0aW5nIGEgc3R1YiBpZiBuZWNlc3NhcnkgKi9cbmZ1bmN0aW9uIHdzX2dldF9jZWxsX3N0dWIod3MvKjpXb3Jrc2hlZXQqLywgUiwgQy8qOj9udW1iZXIqLykvKjpDZWxsKi8ge1xuXHQvKiBBMSBjZWxsIGFkZHJlc3MgKi9cblx0aWYodHlwZW9mIFIgPT0gXCJzdHJpbmdcIikge1xuXHRcdC8qIGRlbnNlICovXG5cdFx0aWYoQXJyYXkuaXNBcnJheSh3cykpIHtcblx0XHRcdHZhciBSQyA9IGRlY29kZV9jZWxsKFIpO1xuXHRcdFx0aWYoIXdzW1JDLnJdKSB3c1tSQy5yXSA9IFtdO1xuXHRcdFx0cmV0dXJuIHdzW1JDLnJdW1JDLmNdIHx8ICh3c1tSQy5yXVtSQy5jXSA9IHt0Oid6J30pO1xuXHRcdH1cblx0XHRyZXR1cm4gd3NbUl0gfHwgKHdzW1JdID0ge3Q6J3onfSk7XG5cdH1cblx0LyogY2VsbCBhZGRyZXNzIG9iamVjdCAqL1xuXHRpZih0eXBlb2YgUiAhPSBcIm51bWJlclwiKSByZXR1cm4gd3NfZ2V0X2NlbGxfc3R1Yih3cywgZW5jb2RlX2NlbGwoUikpO1xuXHQvKiBSIGFuZCBDIGFyZSAwLWJhc2VkIGluZGljZXMgKi9cblx0cmV0dXJuIHdzX2dldF9jZWxsX3N0dWIod3MsIGVuY29kZV9jZWxsKHtyOlIsYzpDfHwwfSkpO1xufVxuXG4vKiBmaW5kIHNoZWV0IGluZGV4IGZvciBnaXZlbiBuYW1lIC8gdmFsaWRhdGUgaW5kZXggKi9cbmZ1bmN0aW9uIHdiX3NoZWV0X2lkeCh3Yi8qOldvcmtib29rKi8sIHNoLyo6bnVtYmVyfHN0cmluZyovKSB7XG5cdGlmKHR5cGVvZiBzaCA9PSBcIm51bWJlclwiKSB7XG5cdFx0aWYoc2ggPj0gMCAmJiB3Yi5TaGVldE5hbWVzLmxlbmd0aCA+IHNoKSByZXR1cm4gc2g7XG5cdFx0dGhyb3cgbmV3IEVycm9yKFwiQ2Fubm90IGZpbmQgc2hlZXQgIyBcIiArIHNoKTtcblx0fSBlbHNlIGlmKHR5cGVvZiBzaCA9PSBcInN0cmluZ1wiKSB7XG5cdFx0dmFyIGlkeCA9IHdiLlNoZWV0TmFtZXMuaW5kZXhPZihzaCk7XG5cdFx0aWYoaWR4ID4gLTEpIHJldHVybiBpZHg7XG5cdFx0dGhyb3cgbmV3IEVycm9yKFwiQ2Fubm90IGZpbmQgc2hlZXQgbmFtZSB8XCIgKyBzaCArIFwifFwiKTtcblx0fSBlbHNlIHRocm93IG5ldyBFcnJvcihcIkNhbm5vdCBmaW5kIHNoZWV0IHxcIiArIHNoICsgXCJ8XCIpO1xufVxuXG4vKiBzaW1wbGUgYmxhbmsgd29ya2Jvb2sgb2JqZWN0ICovXG5mdW5jdGlvbiBib29rX25ldygpLyo6V29ya2Jvb2sqLyB7XG5cdHJldHVybiB7IFNoZWV0TmFtZXM6IFtdLCBTaGVldHM6IHt9IH07XG59XG5cbi8qIGFkZCBhIHdvcmtzaGVldCB0byB0aGUgZW5kIG9mIGEgZ2l2ZW4gd29ya2Jvb2sgKi9cbmZ1bmN0aW9uIGJvb2tfYXBwZW5kX3NoZWV0KHdiLyo6V29ya2Jvb2sqLywgd3MvKjpXb3Jrc2hlZXQqLywgbmFtZS8qOj9zdHJpbmcqLywgcm9sbC8qOj9ib29sZWFuKi8pLyo6c3RyaW5nKi8ge1xuXHR2YXIgaSA9IDE7XG5cdGlmKCFuYW1lKSBmb3IoOyBpIDw9IDB4RkZGRjsgKytpLCBuYW1lID0gdW5kZWZpbmVkKSBpZih3Yi5TaGVldE5hbWVzLmluZGV4T2YobmFtZSA9IFwiU2hlZXRcIiArIGkpID09IC0xKSBicmVhaztcblx0aWYoIW5hbWUgfHwgd2IuU2hlZXROYW1lcy5sZW5ndGggPj0gMHhGRkZGKSB0aHJvdyBuZXcgRXJyb3IoXCJUb28gbWFueSB3b3Jrc2hlZXRzXCIpO1xuXHRpZihyb2xsICYmIHdiLlNoZWV0TmFtZXMuaW5kZXhPZihuYW1lKSA+PSAwKSB7XG5cdFx0dmFyIG0gPSBuYW1lLm1hdGNoKC8oXi4qPykoXFxkKykkLyk7XG5cdFx0aSA9IG0gJiYgK21bMl0gfHwgMDtcblx0XHR2YXIgcm9vdCA9IG0gJiYgbVsxXSB8fCBuYW1lO1xuXHRcdGZvcigrK2k7IGkgPD0gMHhGRkZGOyArK2kpIGlmKHdiLlNoZWV0TmFtZXMuaW5kZXhPZihuYW1lID0gcm9vdCArIGkpID09IC0xKSBicmVhaztcblx0fVxuXHRjaGVja193c19uYW1lKG5hbWUpO1xuXHRpZih3Yi5TaGVldE5hbWVzLmluZGV4T2YobmFtZSkgPj0gMCkgdGhyb3cgbmV3IEVycm9yKFwiV29ya3NoZWV0IHdpdGggbmFtZSB8XCIgKyBuYW1lICsgXCJ8IGFscmVhZHkgZXhpc3RzIVwiKTtcblxuXHR3Yi5TaGVldE5hbWVzLnB1c2gobmFtZSk7XG5cdHdiLlNoZWV0c1tuYW1lXSA9IHdzO1xuXHRyZXR1cm4gbmFtZTtcbn1cblxuLyogc2V0IHNoZWV0IHZpc2liaWxpdHkgKHZpc2libGUvaGlkZGVuL3ZlcnkgaGlkZGVuKSAqL1xuZnVuY3Rpb24gYm9va19zZXRfc2hlZXRfdmlzaWJpbGl0eSh3Yi8qOldvcmtib29rKi8sIHNoLyo6bnVtYmVyfHN0cmluZyovLCB2aXMvKjpudW1iZXIqLykge1xuXHRpZighd2IuV29ya2Jvb2spIHdiLldvcmtib29rID0ge307XG5cdGlmKCF3Yi5Xb3JrYm9vay5TaGVldHMpIHdiLldvcmtib29rLlNoZWV0cyA9IFtdO1xuXG5cdHZhciBpZHggPSB3Yl9zaGVldF9pZHgod2IsIHNoKTtcblx0Ly8gJEZsb3dJZ25vcmVcblx0aWYoIXdiLldvcmtib29rLlNoZWV0c1tpZHhdKSB3Yi5Xb3JrYm9vay5TaGVldHNbaWR4XSA9IHt9O1xuXG5cdHN3aXRjaCh2aXMpIHtcblx0XHRjYXNlIDA6IGNhc2UgMTogY2FzZSAyOiBicmVhaztcblx0XHRkZWZhdWx0OiB0aHJvdyBuZXcgRXJyb3IoXCJCYWQgc2hlZXQgdmlzaWJpbGl0eSBzZXR0aW5nIFwiICsgdmlzKTtcblx0fVxuXHQvLyAkRmxvd0lnbm9yZVxuXHR3Yi5Xb3JrYm9vay5TaGVldHNbaWR4XS5IaWRkZW4gPSB2aXM7XG59XG5cbi8qIHNldCBudW1iZXIgZm9ybWF0ICovXG5mdW5jdGlvbiBjZWxsX3NldF9udW1iZXJfZm9ybWF0KGNlbGwvKjpDZWxsKi8sIGZtdC8qOnN0cmluZ3xudW1iZXIqLykge1xuXHRjZWxsLnogPSBmbXQ7XG5cdHJldHVybiBjZWxsO1xufVxuXG4vKiBzZXQgY2VsbCBoeXBlcmxpbmsgKi9cbmZ1bmN0aW9uIGNlbGxfc2V0X2h5cGVybGluayhjZWxsLyo6Q2VsbCovLCB0YXJnZXQvKjpzdHJpbmcqLywgdG9vbHRpcC8qOj9zdHJpbmcqLykge1xuXHRpZighdGFyZ2V0KSB7XG5cdFx0ZGVsZXRlIGNlbGwubDtcblx0fSBlbHNlIHtcblx0XHRjZWxsLmwgPSAoeyBUYXJnZXQ6IHRhcmdldCB9Lyo6SHlwZXJsaW5rKi8pO1xuXHRcdGlmKHRvb2x0aXApIGNlbGwubC5Ub29sdGlwID0gdG9vbHRpcDtcblx0fVxuXHRyZXR1cm4gY2VsbDtcbn1cbmZ1bmN0aW9uIGNlbGxfc2V0X2ludGVybmFsX2xpbmsoY2VsbC8qOkNlbGwqLywgcmFuZ2UvKjpzdHJpbmcqLywgdG9vbHRpcC8qOj9zdHJpbmcqLykgeyByZXR1cm4gY2VsbF9zZXRfaHlwZXJsaW5rKGNlbGwsIFwiI1wiICsgcmFuZ2UsIHRvb2x0aXApOyB9XG5cbi8qIGFkZCB0byBjZWxsIGNvbW1lbnRzICovXG5mdW5jdGlvbiBjZWxsX2FkZF9jb21tZW50KGNlbGwvKjpDZWxsKi8sIHRleHQvKjpzdHJpbmcqLywgYXV0aG9yLyo6P3N0cmluZyovKSB7XG5cdGlmKCFjZWxsLmMpIGNlbGwuYyA9IFtdO1xuXHRjZWxsLmMucHVzaCh7dDp0ZXh0LCBhOmF1dGhvcnx8XCJTaGVldEpTXCJ9KTtcbn1cblxuLyogc2V0IGFycmF5IGZvcm11bGEgYW5kIGZsdXNoIHJlbGF0ZWQgY2VsbHMgKi9cbmZ1bmN0aW9uIHNoZWV0X3NldF9hcnJheV9mb3JtdWxhKHdzLyo6V29ya3NoZWV0Ki8sIHJhbmdlLCBmb3JtdWxhLyo6c3RyaW5nKi8sIGR5bmFtaWMvKjpib29sZWFuKi8pIHtcblx0dmFyIHJuZyA9IHR5cGVvZiByYW5nZSAhPSBcInN0cmluZ1wiID8gcmFuZ2UgOiBzYWZlX2RlY29kZV9yYW5nZShyYW5nZSk7XG5cdHZhciBybmdzdHIgPSB0eXBlb2YgcmFuZ2UgPT0gXCJzdHJpbmdcIiA/IHJhbmdlIDogZW5jb2RlX3JhbmdlKHJhbmdlKTtcblx0Zm9yKHZhciBSID0gcm5nLnMucjsgUiA8PSBybmcuZS5yOyArK1IpIGZvcih2YXIgQyA9IHJuZy5zLmM7IEMgPD0gcm5nLmUuYzsgKytDKSB7XG5cdFx0dmFyIGNlbGwgPSB3c19nZXRfY2VsbF9zdHViKHdzLCBSLCBDKTtcblx0XHRjZWxsLnQgPSAnbic7XG5cdFx0Y2VsbC5GID0gcm5nc3RyO1xuXHRcdGRlbGV0ZSBjZWxsLnY7XG5cdFx0aWYoUiA9PSBybmcucy5yICYmIEMgPT0gcm5nLnMuYykge1xuXHRcdFx0Y2VsbC5mID0gZm9ybXVsYTtcblx0XHRcdGlmKGR5bmFtaWMpIGNlbGwuRCA9IHRydWU7XG5cdFx0fVxuXHR9XG5cdHJldHVybiB3cztcbn1cblxudmFyIHV0aWxzLyo6YW55Ki8gPSB7XG5cdGVuY29kZV9jb2w6IGVuY29kZV9jb2wsXG5cdGVuY29kZV9yb3c6IGVuY29kZV9yb3csXG5cdGVuY29kZV9jZWxsOiBlbmNvZGVfY2VsbCxcblx0ZW5jb2RlX3JhbmdlOiBlbmNvZGVfcmFuZ2UsXG5cdGRlY29kZV9jb2w6IGRlY29kZV9jb2wsXG5cdGRlY29kZV9yb3c6IGRlY29kZV9yb3csXG5cdHNwbGl0X2NlbGw6IHNwbGl0X2NlbGwsXG5cdGRlY29kZV9jZWxsOiBkZWNvZGVfY2VsbCxcblx0ZGVjb2RlX3JhbmdlOiBkZWNvZGVfcmFuZ2UsXG5cdGZvcm1hdF9jZWxsOiBmb3JtYXRfY2VsbCxcblx0c2hlZXRfYWRkX2FvYTogc2hlZXRfYWRkX2FvYSxcblx0c2hlZXRfYWRkX2pzb246IHNoZWV0X2FkZF9qc29uLFxuXHRzaGVldF9hZGRfZG9tOiBzaGVldF9hZGRfZG9tLFxuXHRhb2FfdG9fc2hlZXQ6IGFvYV90b19zaGVldCxcblx0anNvbl90b19zaGVldDoganNvbl90b19zaGVldCxcblx0dGFibGVfdG9fc2hlZXQ6IHBhcnNlX2RvbV90YWJsZSxcblx0dGFibGVfdG9fYm9vazogdGFibGVfdG9fYm9vayxcblx0c2hlZXRfdG9fY3N2OiBzaGVldF90b19jc3YsXG5cdHNoZWV0X3RvX3R4dDogc2hlZXRfdG9fdHh0LFxuXHRzaGVldF90b19qc29uOiBzaGVldF90b19qc29uLFxuXHRzaGVldF90b19odG1sOiBzaGVldF90b19odG1sLFxuXHRzaGVldF90b19mb3JtdWxhZTogc2hlZXRfdG9fZm9ybXVsYWUsXG5cdHNoZWV0X3RvX3Jvd19vYmplY3RfYXJyYXk6IHNoZWV0X3RvX2pzb24sXG5cdHNoZWV0X2dldF9jZWxsOiB3c19nZXRfY2VsbF9zdHViLFxuXHRib29rX25ldzogYm9va19uZXcsXG5cdGJvb2tfYXBwZW5kX3NoZWV0OiBib29rX2FwcGVuZF9zaGVldCxcblx0Ym9va19zZXRfc2hlZXRfdmlzaWJpbGl0eTogYm9va19zZXRfc2hlZXRfdmlzaWJpbGl0eSxcblx0Y2VsbF9zZXRfbnVtYmVyX2Zvcm1hdDogY2VsbF9zZXRfbnVtYmVyX2Zvcm1hdCxcblx0Y2VsbF9zZXRfaHlwZXJsaW5rOiBjZWxsX3NldF9oeXBlcmxpbmssXG5cdGNlbGxfc2V0X2ludGVybmFsX2xpbms6IGNlbGxfc2V0X2ludGVybmFsX2xpbmssXG5cdGNlbGxfYWRkX2NvbW1lbnQ6IGNlbGxfYWRkX2NvbW1lbnQsXG5cdHNoZWV0X3NldF9hcnJheV9mb3JtdWxhOiBzaGVldF9zZXRfYXJyYXlfZm9ybXVsYSxcblx0Y29uc3RzOiB7XG5cdFx0U0hFRVRfVklTSUJMRTogMCxcblx0XHRTSEVFVF9ISURERU46IDEsXG5cdFx0U0hFRVRfVkVSWV9ISURERU46IDJcblx0fVxufTtcblxudmFyIF9SZWFkYWJsZTtcbmZ1bmN0aW9uIHNldF9yZWFkYWJsZShSKSB7IF9SZWFkYWJsZSA9IFI7IH1cblxuZnVuY3Rpb24gd3JpdGVfY3N2X3N0cmVhbShzaGVldC8qOldvcmtzaGVldCovLCBvcHRzLyo6P1NoZWV0MkNTVk9wdHMqLykge1xuXHR2YXIgc3RyZWFtID0gX1JlYWRhYmxlKCk7XG5cdHZhciBvID0gb3B0cyA9PSBudWxsID8ge30gOiBvcHRzO1xuXHRpZihzaGVldCA9PSBudWxsIHx8IHNoZWV0W1wiIXJlZlwiXSA9PSBudWxsKSB7IHN0cmVhbS5wdXNoKG51bGwpOyByZXR1cm4gc3RyZWFtOyB9XG5cdHZhciByID0gc2FmZV9kZWNvZGVfcmFuZ2Uoc2hlZXRbXCIhcmVmXCJdKTtcblx0dmFyIEZTID0gby5GUyAhPT0gdW5kZWZpbmVkID8gby5GUyA6IFwiLFwiLCBmcyA9IEZTLmNoYXJDb2RlQXQoMCk7XG5cdHZhciBSUyA9IG8uUlMgIT09IHVuZGVmaW5lZCA/IG8uUlMgOiBcIlxcblwiLCBycyA9IFJTLmNoYXJDb2RlQXQoMCk7XG5cdHZhciBlbmRyZWdleCA9IG5ldyBSZWdFeHAoKEZTPT1cInxcIiA/IFwiXFxcXHxcIiA6IEZTKStcIiskXCIpO1xuXHR2YXIgcm93Lyo6P3N0cmluZyovID0gXCJcIiwgY29scy8qOkFycmF5PHN0cmluZz4qLyA9IFtdO1xuXHRvLmRlbnNlID0gQXJyYXkuaXNBcnJheShzaGVldCk7XG5cdHZhciBjb2xpbmZvLyo6QXJyYXk8Q29sSW5mbz4qLyA9IG8uc2tpcEhpZGRlbiAmJiBzaGVldFtcIiFjb2xzXCJdIHx8IFtdO1xuXHR2YXIgcm93aW5mby8qOkFycmF5PFJvd0luZm8+Ki8gPSBvLnNraXBIaWRkZW4gJiYgc2hlZXRbXCIhcm93c1wiXSB8fCBbXTtcblx0Zm9yKHZhciBDID0gci5zLmM7IEMgPD0gci5lLmM7ICsrQykgaWYgKCEoKGNvbGluZm9bQ118fHt9KS5oaWRkZW4pKSBjb2xzW0NdID0gZW5jb2RlX2NvbChDKTtcblx0dmFyIFIgPSByLnMucjtcblx0dmFyIEJPTSA9IGZhbHNlLCB3ID0gMDtcblx0c3RyZWFtLl9yZWFkID0gZnVuY3Rpb24oKSB7XG5cdFx0aWYoIUJPTSkgeyBCT00gPSB0cnVlOyByZXR1cm4gc3RyZWFtLnB1c2goXCJcXHVGRUZGXCIpOyB9XG5cdFx0d2hpbGUoUiA8PSByLmUucikge1xuXHRcdFx0KytSO1xuXHRcdFx0aWYgKChyb3dpbmZvW1ItMV18fHt9KS5oaWRkZW4pIGNvbnRpbnVlO1xuXHRcdFx0cm93ID0gbWFrZV9jc3Zfcm93KHNoZWV0LCByLCBSLTEsIGNvbHMsIGZzLCBycywgRlMsIG8pO1xuXHRcdFx0aWYocm93ICE9IG51bGwpIHtcblx0XHRcdFx0aWYoby5zdHJpcCkgcm93ID0gcm93LnJlcGxhY2UoZW5kcmVnZXgsXCJcIik7XG5cdFx0XHRcdGlmKHJvdyB8fCAoby5ibGFua3Jvd3MgIT09IGZhbHNlKSkgcmV0dXJuIHN0cmVhbS5wdXNoKCh3KysgPyBSUyA6IFwiXCIpICsgcm93KTtcblx0XHRcdH1cblx0XHR9XG5cdFx0cmV0dXJuIHN0cmVhbS5wdXNoKG51bGwpO1xuXHR9O1xuXHRyZXR1cm4gc3RyZWFtO1xufVxuXG5mdW5jdGlvbiB3cml0ZV9odG1sX3N0cmVhbSh3cy8qOldvcmtzaGVldCovLCBvcHRzLyo6P1NoZWV0MkhUTUxPcHRzKi8pIHtcblx0dmFyIHN0cmVhbSA9IF9SZWFkYWJsZSgpO1xuXG5cdHZhciBvID0gb3B0cyB8fCB7fTtcblx0dmFyIGhlYWRlciA9IG8uaGVhZGVyICE9IG51bGwgPyBvLmhlYWRlciA6IEhUTUxfQkVHSU47XG5cdHZhciBmb290ZXIgPSBvLmZvb3RlciAhPSBudWxsID8gby5mb290ZXIgOiBIVE1MX0VORDtcblx0c3RyZWFtLnB1c2goaGVhZGVyKTtcblx0dmFyIHIgPSBkZWNvZGVfcmFuZ2Uod3NbJyFyZWYnXSk7XG5cdG8uZGVuc2UgPSBBcnJheS5pc0FycmF5KHdzKTtcblx0c3RyZWFtLnB1c2gobWFrZV9odG1sX3ByZWFtYmxlKHdzLCByLCBvKSk7XG5cdHZhciBSID0gci5zLnI7XG5cdHZhciBlbmQgPSBmYWxzZTtcblx0c3RyZWFtLl9yZWFkID0gZnVuY3Rpb24oKSB7XG5cdFx0aWYoUiA+IHIuZS5yKSB7XG5cdFx0XHRpZighZW5kKSB7IGVuZCA9IHRydWU7IHN0cmVhbS5wdXNoKFwiPC90YWJsZT5cIiArIGZvb3Rlcik7IH1cblx0XHRcdHJldHVybiBzdHJlYW0ucHVzaChudWxsKTtcblx0XHR9XG5cdFx0d2hpbGUoUiA8PSByLmUucikge1xuXHRcdFx0c3RyZWFtLnB1c2gobWFrZV9odG1sX3Jvdyh3cywgciwgUiwgbykpO1xuXHRcdFx0KytSO1xuXHRcdFx0YnJlYWs7XG5cdFx0fVxuXHR9O1xuXHRyZXR1cm4gc3RyZWFtO1xufVxuXG5mdW5jdGlvbiB3cml0ZV9qc29uX3N0cmVhbShzaGVldC8qOldvcmtzaGVldCovLCBvcHRzLyo6P1NoZWV0MkNTVk9wdHMqLykge1xuXHR2YXIgc3RyZWFtID0gX1JlYWRhYmxlKHtvYmplY3RNb2RlOnRydWV9KTtcblxuXHRpZihzaGVldCA9PSBudWxsIHx8IHNoZWV0W1wiIXJlZlwiXSA9PSBudWxsKSB7IHN0cmVhbS5wdXNoKG51bGwpOyByZXR1cm4gc3RyZWFtOyB9XG5cdHZhciB2YWwgPSB7dDonbicsdjowfSwgaGVhZGVyID0gMCwgb2Zmc2V0ID0gMSwgaGRyLyo6QXJyYXk8YW55PiovID0gW10sIHY9MCwgdnY9XCJcIjtcblx0dmFyIHIgPSB7czp7cjowLGM6MH0sZTp7cjowLGM6MH19O1xuXHR2YXIgbyA9IG9wdHMgfHwge307XG5cdHZhciByYW5nZSA9IG8ucmFuZ2UgIT0gbnVsbCA/IG8ucmFuZ2UgOiBzaGVldFtcIiFyZWZcIl07XG5cdGlmKG8uaGVhZGVyID09PSAxKSBoZWFkZXIgPSAxO1xuXHRlbHNlIGlmKG8uaGVhZGVyID09PSBcIkFcIikgaGVhZGVyID0gMjtcblx0ZWxzZSBpZihBcnJheS5pc0FycmF5KG8uaGVhZGVyKSkgaGVhZGVyID0gMztcblx0c3dpdGNoKHR5cGVvZiByYW5nZSkge1xuXHRcdGNhc2UgJ3N0cmluZyc6IHIgPSBzYWZlX2RlY29kZV9yYW5nZShyYW5nZSk7IGJyZWFrO1xuXHRcdGNhc2UgJ251bWJlcic6IHIgPSBzYWZlX2RlY29kZV9yYW5nZShzaGVldFtcIiFyZWZcIl0pOyByLnMuciA9IHJhbmdlOyBicmVhaztcblx0XHRkZWZhdWx0OiByID0gcmFuZ2U7XG5cdH1cblx0aWYoaGVhZGVyID4gMCkgb2Zmc2V0ID0gMDtcblx0dmFyIHJyID0gZW5jb2RlX3JvdyhyLnMucik7XG5cdHZhciBjb2xzLyo6QXJyYXk8c3RyaW5nPiovID0gW107XG5cdHZhciBjb3VudGVyID0gMDtcblx0dmFyIGRlbnNlID0gQXJyYXkuaXNBcnJheShzaGVldCk7XG5cdHZhciBSID0gci5zLnIsIEMgPSAwO1xuXHR2YXIgaGVhZGVyX2NudCA9IHt9O1xuXHRpZihkZW5zZSAmJiAhc2hlZXRbUl0pIHNoZWV0W1JdID0gW107XG5cdHZhciBjb2xpbmZvLyo6QXJyYXk8Q29sSW5mbz4qLyA9IG8uc2tpcEhpZGRlbiAmJiBzaGVldFtcIiFjb2xzXCJdIHx8IFtdO1xuXHR2YXIgcm93aW5mby8qOkFycmF5PFJvd0luZm8+Ki8gPSBvLnNraXBIaWRkZW4gJiYgc2hlZXRbXCIhcm93c1wiXSB8fCBbXTtcblx0Zm9yKEMgPSByLnMuYzsgQyA8PSByLmUuYzsgKytDKSB7XG5cdFx0aWYoKChjb2xpbmZvW0NdfHx7fSkuaGlkZGVuKSkgY29udGludWU7XG5cdFx0Y29sc1tDXSA9IGVuY29kZV9jb2woQyk7XG5cdFx0dmFsID0gZGVuc2UgPyBzaGVldFtSXVtDXSA6IHNoZWV0W2NvbHNbQ10gKyBycl07XG5cdFx0c3dpdGNoKGhlYWRlcikge1xuXHRcdFx0Y2FzZSAxOiBoZHJbQ10gPSBDIC0gci5zLmM7IGJyZWFrO1xuXHRcdFx0Y2FzZSAyOiBoZHJbQ10gPSBjb2xzW0NdOyBicmVhaztcblx0XHRcdGNhc2UgMzogaGRyW0NdID0gby5oZWFkZXJbQyAtIHIucy5jXTsgYnJlYWs7XG5cdFx0XHRkZWZhdWx0OlxuXHRcdFx0XHRpZih2YWwgPT0gbnVsbCkgdmFsID0ge3c6IFwiX19FTVBUWVwiLCB0OiBcInNcIn07XG5cdFx0XHRcdHZ2ID0gdiA9IGZvcm1hdF9jZWxsKHZhbCwgbnVsbCwgbyk7XG5cdFx0XHRcdGNvdW50ZXIgPSBoZWFkZXJfY250W3ZdIHx8IDA7XG5cdFx0XHRcdGlmKCFjb3VudGVyKSBoZWFkZXJfY250W3ZdID0gMTtcblx0XHRcdFx0ZWxzZSB7XG5cdFx0XHRcdFx0ZG8geyB2diA9IHYgKyBcIl9cIiArIChjb3VudGVyKyspOyB9IHdoaWxlKGhlYWRlcl9jbnRbdnZdKTsgaGVhZGVyX2NudFt2XSA9IGNvdW50ZXI7XG5cdFx0XHRcdFx0aGVhZGVyX2NudFt2dl0gPSAxO1xuXHRcdFx0XHR9XG5cdFx0XHRcdGhkcltDXSA9IHZ2O1xuXHRcdH1cblx0fVxuXHRSID0gci5zLnIgKyBvZmZzZXQ7XG5cdHN0cmVhbS5fcmVhZCA9IGZ1bmN0aW9uKCkge1xuXHRcdHdoaWxlKFIgPD0gci5lLnIpIHtcblx0XHRcdGlmICgocm93aW5mb1tSLTFdfHx7fSkuaGlkZGVuKSBjb250aW51ZTtcblx0XHRcdHZhciByb3cgPSBtYWtlX2pzb25fcm93KHNoZWV0LCByLCBSLCBjb2xzLCBoZWFkZXIsIGhkciwgZGVuc2UsIG8pO1xuXHRcdFx0KytSO1xuXHRcdFx0aWYoKHJvdy5pc2VtcHR5ID09PSBmYWxzZSkgfHwgKGhlYWRlciA9PT0gMSA/IG8uYmxhbmtyb3dzICE9PSBmYWxzZSA6ICEhby5ibGFua3Jvd3MpKSB7XG5cdFx0XHRcdHN0cmVhbS5wdXNoKHJvdy5yb3cpO1xuXHRcdFx0XHRyZXR1cm47XG5cdFx0XHR9XG5cdFx0fVxuXHRcdHJldHVybiBzdHJlYW0ucHVzaChudWxsKTtcblx0fTtcblx0cmV0dXJuIHN0cmVhbTtcbn1cblxudmFyIF9fc3RyZWFtID0ge1xuXHR0b19qc29uOiB3cml0ZV9qc29uX3N0cmVhbSxcblx0dG9faHRtbDogd3JpdGVfaHRtbF9zdHJlYW0sXG5cdHRvX2Nzdjogd3JpdGVfY3N2X3N0cmVhbSxcbiAgc2V0X3JlYWRhYmxlOiBzZXRfcmVhZGFibGVcbn07XG5leHBvcnQgY29uc3QgdmVyc2lvbiA9IFhMU1gudmVyc2lvbjtcbmV4cG9ydCB7XG5cdHBhcnNlX3hsc2NmYixcblx0cGFyc2VfemlwLFxuXHRyZWFkU3luYyBhcyByZWFkLFxuXHRyZWFkRmlsZVN5bmMgYXMgcmVhZEZpbGUsXG5cdHJlYWRGaWxlU3luYyxcblx0d3JpdGVTeW5jIGFzIHdyaXRlLFxuXHR3cml0ZUZpbGVTeW5jIGFzIHdyaXRlRmlsZSxcblx0d3JpdGVGaWxlU3luYyxcblx0d3JpdGVGaWxlQXN5bmMsXG5cdHdyaXRlU3luY1hMU1ggYXMgd3JpdGVYTFNYLFxuXHR3cml0ZUZpbGVTeW5jWExTWCBhcyB3cml0ZUZpbGVYTFNYLFxuXHR1dGlscyxcblx0X19zdHJlYW0gYXMgc3RyZWFtLFxuXHRTU0YsXG5cdENGQlxufTtcbiIsIi8qIGVzbGludC1kaXNhYmxlICovXG5cbi8vIOadpea6kOS6jue9kee7nCDmnInnu4blvq7mlLnliqhcblxuaW1wb3J0ICcuL19ibG9iJ1xuaW1wb3J0IEZpbGVTYXZlciBmcm9tICdmaWxlLXNhdmVyJ1xuaW1wb3J0ICogYXMgWExTWCBmcm9tICd4bHN4J1xuXG5mdW5jdGlvbiBnZW5lcmF0ZUFycmF5KHRhYmxlKSB7XG4gICAgdmFyIG91dCA9IFtdO1xuICAgIHZhciByb3dzID0gdGFibGUucXVlcnlTZWxlY3RvckFsbCgndHInKTtcbiAgICB2YXIgcmFuZ2VzID0gW107XG4gICAgZm9yICh2YXIgUiA9IDA7IFIgPCByb3dzLmxlbmd0aDsgKytSKSB7XG4gICAgICAgIHZhciBvdXRSb3cgPSBbXTtcbiAgICAgICAgdmFyIHJvdyA9IHJvd3NbUl07XG4gICAgICAgIHZhciBjb2x1bW5zID0gcm93LnF1ZXJ5U2VsZWN0b3JBbGwoJ3RkJyk7XG4gICAgICAgIGZvciAodmFyIEMgPSAwOyBDIDwgY29sdW1ucy5sZW5ndGg7ICsrQykge1xuICAgICAgICAgICAgdmFyIGNlbGwgPSBjb2x1bW5zW0NdO1xuICAgICAgICAgICAgdmFyIGNvbHNwYW4gPSBjZWxsLmdldEF0dHJpYnV0ZSgnY29sc3BhbicpO1xuICAgICAgICAgICAgdmFyIHJvd3NwYW4gPSBjZWxsLmdldEF0dHJpYnV0ZSgncm93c3BhbicpO1xuICAgICAgICAgICAgdmFyIGNlbGxWYWx1ZSA9IGNlbGwuaW5uZXJUZXh0O1xuICAgICAgICAgICAgaWYgKGNlbGxWYWx1ZSAhPT0gXCJcIiAmJiBjZWxsVmFsdWUgPT0gK2NlbGxWYWx1ZSkgY2VsbFZhbHVlID0gK2NlbGxWYWx1ZTtcblxuICAgICAgICAgICAgLy9Ta2lwIHJhbmdlc1xuICAgICAgICAgICAgcmFuZ2VzLmZvckVhY2goZnVuY3Rpb24gKHJhbmdlKSB7XG4gICAgICAgICAgICAgICAgaWYgKFIgPj0gcmFuZ2Uucy5yICYmIFIgPD0gcmFuZ2UuZS5yICYmIG91dFJvdy5sZW5ndGggPj0gcmFuZ2Uucy5jICYmIG91dFJvdy5sZW5ndGggPD0gcmFuZ2UuZS5jKSB7XG4gICAgICAgICAgICAgICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDw9IHJhbmdlLmUuYyAtIHJhbmdlLnMuYzsgKytpKSBvdXRSb3cucHVzaChudWxsKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9KTtcblxuICAgICAgICAgICAgLy9IYW5kbGUgUm93IFNwYW5cbiAgICAgICAgICAgIGlmIChyb3dzcGFuIHx8IGNvbHNwYW4pIHtcbiAgICAgICAgICAgICAgICByb3dzcGFuID0gcm93c3BhbiB8fCAxO1xuICAgICAgICAgICAgICAgIGNvbHNwYW4gPSBjb2xzcGFuIHx8IDE7XG4gICAgICAgICAgICAgICAgcmFuZ2VzLnB1c2goe3M6IHtyOiBSLCBjOiBvdXRSb3cubGVuZ3RofSwgZToge3I6IFIgKyByb3dzcGFuIC0gMSwgYzogb3V0Um93Lmxlbmd0aCArIGNvbHNwYW4gLSAxfX0pO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgO1xuXG4gICAgICAgICAgICAvL0hhbmRsZSBWYWx1ZVxuICAgICAgICAgICAgb3V0Um93LnB1c2goY2VsbFZhbHVlICE9PSBcIlwiID8gY2VsbFZhbHVlIDogbnVsbCk7XG5cbiAgICAgICAgICAgIC8vSGFuZGxlIENvbHNwYW5cbiAgICAgICAgICAgIGlmIChjb2xzcGFuKSBmb3IgKHZhciBrID0gMDsgayA8IGNvbHNwYW4gLSAxOyArK2spIG91dFJvdy5wdXNoKG51bGwpO1xuICAgICAgICB9XG4gICAgICAgIG91dC5wdXNoKG91dFJvdyk7XG4gICAgfVxuICAgIHJldHVybiBbb3V0LCByYW5nZXNdO1xufTtcblxuZnVuY3Rpb24gZGF0ZW51bSh2LCBkYXRlMTkwNCkge1xuICAgIGlmIChkYXRlMTkwNCkgdiArPSAxNDYyO1xuICAgIHZhciBlcG9jaCA9IERhdGUucGFyc2Uodik7XG4gICAgcmV0dXJuIChlcG9jaCAtIG5ldyBEYXRlKERhdGUuVVRDKDE4OTksIDExLCAzMCkpKSAvICgyNCAqIDYwICogNjAgKiAxMDAwKTtcbn1cblxuZnVuY3Rpb24gc2hlZXRfZnJvbV9hcnJheV9vZl9hcnJheXMoZGF0YSwgb3B0cz17fSkge1xuICAgIHZhciB3cyA9IHt9O1xuICAgIHZhciByYW5nZSA9IHtzOiB7YzogMTAwMDAwMDAsIHI6IDEwMDAwMDAwfSwgZToge2M6IDAsIHI6IDB9fTtcbiAgICBmb3IgKHZhciBSID0gMDsgUiAhPSBkYXRhLmxlbmd0aDsgKytSKSB7XG4gICAgICAgIGZvciAodmFyIEMgPSAwOyBDICE9IGRhdGFbUl0ubGVuZ3RoOyArK0MpIHtcbiAgICAgICAgICAgIGlmIChyYW5nZS5zLnIgPiBSKSByYW5nZS5zLnIgPSBSO1xuICAgICAgICAgICAgaWYgKHJhbmdlLnMuYyA+IEMpIHJhbmdlLnMuYyA9IEM7XG4gICAgICAgICAgICBpZiAocmFuZ2UuZS5yIDwgUikgcmFuZ2UuZS5yID0gUjtcbiAgICAgICAgICAgIGlmIChyYW5nZS5lLmMgPCBDKSByYW5nZS5lLmMgPSBDO1xuICAgICAgICAgICAgdmFyIGNlbGwgPSB7djogZGF0YVtSXVtDXX07XG4gICAgICAgICAgICBpZiAoY2VsbC52ID09IG51bGwpIGNvbnRpbnVlO1xuICAgICAgICAgICAgdmFyIGNlbGxfcmVmID0gWExTWC51dGlscy5lbmNvZGVfY2VsbCh7YzogQywgcjogUn0pO1xuXG4gICAgICAgICAgICBpZiAodHlwZW9mIGNlbGwudiA9PT0gJ251bWJlcicpIGNlbGwudCA9ICduJztcbiAgICAgICAgICAgIGVsc2UgaWYgKHR5cGVvZiBjZWxsLnYgPT09ICdib29sZWFuJykgY2VsbC50ID0gJ2InO1xuICAgICAgICAgICAgZWxzZSBpZiAoY2VsbC52IGluc3RhbmNlb2YgRGF0ZSkge1xuICAgICAgICAgICAgICAgIGNlbGwudCA9ICduJztcbiAgICAgICAgICAgICAgICBjZWxsLnogPSBYTFNYLlNTRi5fdGFibGVbMTRdO1xuICAgICAgICAgICAgICAgIGNlbGwudiA9IGRhdGVudW0oY2VsbC52KTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2UgY2VsbC50ID0gJ3MnO1xuICAgICAgICAgICAgd3NbY2VsbF9yZWZdID0gY2VsbDtcbiAgICAgICAgfVxuICAgIH1cbiAgICBpZiAocmFuZ2Uucy5jIDwgMTAwMDAwMDApIHdzWychcmVmJ10gPSBYTFNYLnV0aWxzLmVuY29kZV9yYW5nZShyYW5nZSk7XG4gICAgcmV0dXJuIHdzO1xufVxuXG5mdW5jdGlvbiBXb3JrYm9vaygpIHtcbiAgICBpZiAoISh0aGlzIGluc3RhbmNlb2YgV29ya2Jvb2spKSByZXR1cm4gbmV3IFdvcmtib29rKCk7XG4gICAgdGhpcy5TaGVldE5hbWVzID0gW107XG4gICAgdGhpcy5TaGVldHMgPSB7fTtcbn1cblxuZnVuY3Rpb24gczJhYihzKSB7XG4gICAgdmFyIGJ1ZiA9IG5ldyBBcnJheUJ1ZmZlcihzLmxlbmd0aCk7XG4gICAgdmFyIHZpZXcgPSBuZXcgVWludDhBcnJheShidWYpO1xuICAgIGZvciAodmFyIGkgPSAwOyBpICE9IHMubGVuZ3RoOyArK2kpIHZpZXdbaV0gPSBzLmNoYXJDb2RlQXQoaSkgJiAweEZGO1xuICAgIHJldHVybiBidWY7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBleHBvcnRfdGFibGVfdG9fZXhjZWwoaWQpIHtcbiAgICB2YXIgdGhlVGFibGUgPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZChpZCk7XG4gICAgdmFyIG9vID0gZ2VuZXJhdGVBcnJheSh0aGVUYWJsZSk7XG4gICAgdmFyIHJhbmdlcyA9IG9vWzFdO1xuXG4gICAgLyogb3JpZ2luYWwgZGF0YSAqL1xuICAgIHZhciBkYXRhID0gb29bMF07XG4gICAgdmFyIHdzX25hbWUgPSBcIlNoZWV0SlNcIjtcblxuICAgIHZhciB3YiA9IG5ldyBXb3JrYm9vaygpLCB3cyA9IHNoZWV0X2Zyb21fYXJyYXlfb2ZfYXJyYXlzKGRhdGEpO1xuXG4gICAgLyogYWRkIHJhbmdlcyB0byB3b3Jrc2hlZXQgKi9cbiAgICAvLyB3c1snIWNvbHMnXSA9IFsnYXBwbGUnLCAnYmFuYW4nXTtcbiAgICB3c1snIW1lcmdlcyddID0gcmFuZ2VzO1xuXG4gICAgLyogYWRkIHdvcmtzaGVldCB0byB3b3JrYm9vayAqL1xuICAgIHdiLlNoZWV0TmFtZXMucHVzaCh3c19uYW1lKTtcbiAgICB3Yi5TaGVldHNbd3NfbmFtZV0gPSB3cztcblxuICAgIHZhciB3Ym91dCA9IFhMU1gud3JpdGUod2IsIHtib29rVHlwZTogJ3hsc3gnLCBib29rU1NUOiBmYWxzZSwgdHlwZTogJ2JpbmFyeSd9KTtcblxuICAgIEZpbGVTYXZlci5zYXZlQXMobmV3IEJsb2IoW3MyYWIod2JvdXQpXSwge3R5cGU6IFwiYXBwbGljYXRpb24vb2N0ZXQtc3RyZWFtXCJ9KSwgXCJ0ZXN0Lnhsc3hcIilcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGV4cG9ydF9qc29uX3RvX2V4Y2VsKHRoLCBqc29uRGF0YSwgZGVmYXVsdFRpdGxlLCBvcHRpb25zID0geyBtZXJnZXM6IFtdLCBoZWFkZXI6IG51bGwsY29sczpudWxsIH0pIHtcblxuICAgIC8qIG9yaWdpbmFsIGRhdGEgKi9cblxuICAgIHZhciBkYXRhID0ganNvbkRhdGE7XG4gICAgZGF0YS51bnNoaWZ0KHRoKTtcbiAgICBpZiAob3B0aW9ucy5oZWFkZXIpIGRhdGEudW5zaGlmdChbb3B0aW9ucy5oZWFkZXJdKTtcbiAgICB2YXIgd3NfbmFtZSA9IFwiU2hlZXRKU1wiO1xuXG4gICAgY29uc3Qgb3B0cyA9IHtcbiAgICB9XG4gICAgdmFyIHdiID0gbmV3IFdvcmtib29rKCksIHdzID0gc2hlZXRfZnJvbV9hcnJheV9vZl9hcnJheXMoZGF0YSxvcHRzKTtcblxuICAgIC8qIGFkZCBtZXJnZXMgYXJlYSB0byB3b3Jrc2hlZXQgKi9cbiAgICBsZXQgeyBtZXJnZXMgfSA9IG9wdGlvbnM7XG4gICAgaWYgKHR5cGVvZiBtZXJnZXNbMF0gPT0gJ3N0cmluZycgJiYgbWVyZ2VzLmxlbmd0aCA9PSAyKSBtZXJnZXMgPSBbbWVyZ2VzXSAvLyBqdXN0IG9uZSAjIFsnQTEnLCAnQzEnXSA9ID4gW1snQTEnLCAnQzEnXV1cbiAgICBtZXJnZXMgPSBtZXJnZXMubWFwKGkgPT4gaSBpbnN0YW5jZW9mIEFycmF5ID8geyBzOiBpWzBdLCBlOiBpWzFdIH0gOiBpKTsgLy8gYmUgc29ydCA6KSAjIFsnQTEnLCAnQzEnXSA9PiB7IHM6ICdBMScsIGU6ICdDMycgfVxuICAgIHdzWychbWVyZ2VzJ10gPSBtZXJnZXM7XG5cbiAgICBpZihvcHRpb25zLmNvbHMpe1xuICAgICAgd3NbXCIhY29sc1wiXSA9IG9wdGlvbnMuY29scztcbiAgICB9XG5cbiAgICAvKiBhZGQgd29ya3NoZWV0IHRvIHdvcmtib29rICovXG4gICAgd2IuU2hlZXROYW1lcy5wdXNoKHdzX25hbWUpO1xuICAgIHdiLlNoZWV0c1t3c19uYW1lXSA9IHdzO1xuXG4gICAgdmFyIHdib3V0ID0gWExTWC53cml0ZSh3Yiwge2Jvb2tUeXBlOiAneGxzeCcsIGJvb2tTU1Q6IGZhbHNlLCB0eXBlOiAnYmluYXJ5J30pO1xuICAgIHZhciB0aXRsZSA9IGRlZmF1bHRUaXRsZSB8fCAn5YiX6KGoJ1xuICAgIEZpbGVTYXZlci5zYXZlQXMobmV3IEJsb2IoW3MyYWIod2JvdXQpXSwge3R5cGU6IFwiYXBwbGljYXRpb24vb2N0ZXQtc3RyZWFtXCJ9KSwgdGl0bGUgKyBcIi54bHN4XCIpXG59XG4iLG51bGwsbnVsbF0sIm5hbWVzIjpbImRlZmF1bHRDcnVkT3B0aW9ucyIsImN0eCIsIm9wdHMiLCJjdCIsIm5hbWUiLCJjb21wdXRlZCIsInVpIiwidWlDb250ZXh0IiwidHJpZ2dlciIsImRvQ2xvc2UiLCJyZXNldCIsInN1Ym1pdCIsInRvdGFsIiwiZ2V0Q2FsbGVySW5mbyIsIl9hIiwiYmxhbmsiLCJhcmdzIiwibG9nSW5mbyIsImxvZ1dhcm4iLCJsb2dFcnJvciIsImVycm9yIiwid2FybiIsImluZm8iLCJkZWJ1ZyIsImNhbGxlckluZm8iLCJsb2ciLCJjYWxsZXIiLCJsb2dnZXIiLCJzZXRMb2dnZXIiLCJsZXZlbCIsImlzRW1wdHkiLCJ2YWx1ZSIsImlzQWxsRW1wdHkiLCJ2YWx1ZXMiLCJoYXNFbXB0eSIsIlN0cmluZ1V0aWxzIiwidHJhY2UiLCJjcmVhdGVBc3luY0NvbXBvbmVudCIsImVzIiwiZGVmaW5lQXN5bmNDb21wb25lbnQiLCJyZXRyeSIsImZhaWwiLCJhdHRlbXB0cyIsImluc3RhbGxBc3luY0NvbXBvbmVudCIsImFwcCIsIm9wdGlvbnMiLCJhc3luY0NvbXBvbmVudCIsImluc3RhbGxBc3luY0NvbXBvbmVudHMiLCJtb2R1bGVzIiwiZXhjbHVkZXMiLCJwaWNrTmFtZUV4cCIsInRyYW5zZm9ybSIsImltcG9ydHMiLCJ0cmFuc2Zvcm1Gcm9tR2xvYiIsIl8iLCJpdGVtIiwia2V5IiwiaW5zdGFsbFN5bmNDb21wb25lbnRzIiwiY29tcG9uZW50cyIsInJlc3VsdCIsImxvYWRBc3luY0NvbXBvbmVudEZyb21HbG9iIiwibWFwIiwibG9hZENvbXBvbmVudEZyb21HbG9iIiwidml0ZSIsIlRhYmxlU3RvcmUiLCJfX3B1YmxpY0ZpZWxkIiwiJHJvdXRlciIsInRhYmxlTmFtZSIsImtleVR5cGUiLCJwcmVmaXgiLCJzYXZlZCIsInRhYmxlIiwiJHJvdXRlIiwicnhBcnJJbmRleCIsInJ4VmFyTmFtZSIsInJ4UXVvdCIsImpvaW5QYXRocyIsInBhdGhzIiwiYWNjIiwicCIsImdldFBhdGhUb1N0cmluZyIsInBhdGhUb1N0cmluZyIsInBhdGgiLCJwcmVmaXhlcyIsInR5cGUiLCJoYXMiLCJpc09iamVjdCIsImdldEl0ZXJhdGUiLCJpdGVyYXRlIiwib2JqIiwiY2FsbGJhY2siLCJicm9rZW4iLCJicmVha0l0IiwiZGVzY3JpYmVWYWx1ZSIsInBhcmVudCIsImNwIiwiaSIsImNoaWxkcmVuIiwiY29udGV4dFJlYWRlciIsIkNvbnRleHRSZWFkZXIiLCJlcnIiLCJzY3AiLCJnZXRFbGVtZW50cyIsImdldE93bkNoaWxkcmVuIiwiY2hpbGRyZW5QYXRoIiwic3RyQ2hpbGRyZW5QYXRoIiwic3RyQ2hpbGRQYXRoUHJlZml4IiwicmVzIiwidmFsIiwic3RyQ2hpbGRQYXRoIiwicGF0aEZvcm1hdFN0cmluZyIsImNoaWxkS2V5IiwiYWZ0ZXJJdGVyYXRlIiwiY3VyUGFyZW50IiwiaXNPYmplY3RFbXB0eSIsIm93blByb3BlcnRpZXNPbmx5IiwiZ2V0RWFjaERlZXAiLCJlYWNoRGVlcCIsImRlZXBkYXNoIiwidXRpbHMiLCJzdHJpbmdzIiwic3RvcmUiLCJyZWYiLCJza2lwcyIsImtleXMiLCJwQXR0cnMiLCJhbnRkdkNvbHNwYW4iLCJsYWJlbFNwYW4iLCJhc3Npc3QiLCJ1c2VVaSIsImJ1dHRvbiIsImNhc2NhZGVyIiwiemhDTiIsImVuIiwidCIsImFyZyIsImluZGV4IiwiSTE4biIsImluc3RhbmNlIiwibG9jYWxlcyIsIm1lc3NhZ2UiLCJmc0Nsb25lIiwiaTE4biIsInVzZUkxOG4iLCJlIiwibW9kdWxlIiwidGhpcyIsInIiLCJuIiwicyIsImEiLCJkYXlqcyIsImFkdmFuY2VkRm9ybWF0IiwiZG9Gb3JtYXQiLCJkYXRlIiwiZm9ybWF0IiwiZGF0ZUZvcm1hdHRlciIsImRhdGVyYW5nZUZvcm1hdHRlciIsImRhdGV0aW1lcmFuZ2VGb3JtYXR0ZXIiLCJmIiwibyIsInUiLCJkIiwid2Vla2RheSIsImxvY2FsZURhdGEiLCJ3ZWVrT2ZZZWFyIiwiZGF0ZSQxIiwiYnVpbGREYXRlVmFsdWUiLCJzY29wZSIsInJvdyIsImVsIiwibnVtYmVyJDEiLCJwaG9uZSQxIiwiY29sdW1uIiwicmV0Iiwic2VsZWN0IiwidGV4dCIsInRyZWUiLCJ0eXBlTGlzdCIsImRlZmF1bHRUeXBlQ3JlYXRvcnMiLCJkZWZhdWx0VHlwZXMiLCJnZXRUeXBlcyIsImdldFR5cGUiLCJhZGRUeXBlcyIsIm5ld1R5cGVzIiwidHlwZXMkMSIsImNyZWF0b3IiLCJfc2ZjX21haW4keSIsImRlZmluZUNvbXBvbmVudCIsInBhZ2VSZWYiLCJvbk1vdW50ZWQiLCJfaG9pc3RlZF8xIiwiX2hvaXN0ZWRfMiIsIl9ob2lzdGVkXzMiLCJfaG9pc3RlZF80IiwiJHNsb3RzIiwiX2N0eCIsIl9jYWNoZSIsIiRwcm9wcyIsIiRzZXR1cCIsIiRkYXRhIiwiJG9wdGlvbnMiLCJfb3BlbkJsb2NrIiwiX2NyZWF0ZUVsZW1lbnRCbG9jayIsIl9yZW5kZXJTbG90IiwiX2NyZWF0ZUNvbW1lbnRWTm9kZSIsIl9jcmVhdGVFbGVtZW50Vk5vZGUiLCJpc1VuTWVyZ2VhYmxlIiwic3JjVmFsdWUiLCJVbk1lcmdlYWJsZSIsImlzUmVmIiwiaXNVbkNsb25lYWJsZSIsIm1lcmdlIiwidGFyZ2V0Iiwic291cmNlcyIsImN1c3RvbWl6ZXIiLCJvYmpWYWx1ZSIsImZvdW5kIiwiY2xvbmVEZWVwIiwiVW5NZXJnZWFibGUkMSIsImNsb25lYWJsZSIsInVzZU1lcmdlIiwiaXNBc3luY0NvbXB1dGUiLCJBc3luY0NvbXB1dGVWYWx1ZSIsImlzU3luY0NvbXB1dGUiLCJDb21wdXRlVmFsdWUiLCJmaW5kQ29tcHV0ZVZhbHVlcyIsImlzQXN5bmMiLCJmb3VuZE1hcCIsImNoZWNrRnVuYyIsImNvbnRleHQiLCJleGNsdWRlIiwiaXNTaGFsbG93IiwiZG9Bc3luY0NvbXB1dGUiLCJkZXBlbmRBc3luY1ZhbHVlcyIsImdldENvbnRleHRGbiIsImFzeW5jVmFsdWVNYXAiLCJzZXRBc3luY0NvbXB1dGVWYWx1ZSIsImFzeW5jVmFsdWVzTWFwIiwidmFsdWVSZWYiLCJkb0NvbXB1dGVkIiwiZ2V0VGFyZ2V0RnVuYyIsInVzZXJDb21wdXRlZEZuIiwiZGVwZW5kVmFsdWVzIiwiYXN5bmNDb3VudCIsInN5bmNDb3VudCIsImNvbXB1dGVGbiIsImNvbXB1dGUiLCJhc3luY0ZuIiwiZGVmYXVsdFZhbHVlIiwiYXN5bmNSZWYiLCJjb21wdXRlZFZhbHVlIiwid2F0Y2giLCJhc3luY0NvbXB1dGUiLCJ1c2VDb21wdXRlIiwiQ29uc3RhbnRzIiwibWVyZ2VDb2x1bW5QbHVnaW5zIiwicmVnaXN0ZXJNZXJnZUNvbHVtblBsdWdpbiIsInBsdWdpbiIsInJlbW92ZSIsInB1c2giLCJzb3J0IiwiYiIsIm9yZGVyIiwibWVyZ2VDb2x1bW5EaWN0IiwiZGljdCIsImNvbXBvbmVudCIsImZvcm0iLCJtZXJnZUNvbHVtblR5cGUiLCJ0eXBlQ2hhaW4iLCJBcnJheSIsImJhc2UiLCJ0eXBlT3B0aW9ucyIsInR5cGVzIiwibWVyZ2VDb2x1bW5QbHVnaW4iLCJoYW5kbGUiLCJkaWN0UGx1Z2luIiwidmlld0Zvcm1Vc2VDZWxsQ29tcG9uZW50UGx1Z2luIiwiY29sdW1uUHJvcHMiLCJjcnVkT3B0aW9ucyIsInNldHRpbmdzIiwidmlld0Zvcm1Vc2VDZWxsQ29tcG9uZW50Iiwidmlld0Zvcm1Db2x1bW4iLCJpbmNsdWRlcyIsInJlbmRlciIsIl9jcmVhdGVWTm9kZSIsInZpZXdGb3JtIiwic2V0dXBPcHRpb25zQ29sdW1ucyIsImNvbHVtbnMiLCJ1c2VyT3B0aW9ucyIsImluaXRlZENvbHVtbnMiLCJmb3JFYWNoIiwiYnVpbGRPcHRpb25zQ29sdW1uc0ZsYXRNYXAiLCJidWlsZFRhYmxlQ29sdW1uc0ZsYXRNYXAiLCJidWlsZFRhYmxlQ29sdW1uIiwiY29sVGVtcGxhdGUiLCJ0YWJsZUNvbHVtbiIsInRpdGxlIiwiYnVpbGRUYWJsZUNvbHVtbnMiLCJ3cmFwcGVyQ3VzdG9tQ29tcG9uZW50IiwicmVhY3RpdmUiLCJzaGFsbG93UmVmIiwidGFibGVDb2x1bW5zIiwiZG9Db2x1bW5zU29ydCIsImRvQXJyYXlTb3J0IiwiYXJyIiwic29ydEJ5Iiwib3JkZXJEZWZhdWx0IiwibGlzdCIsInNpemUiLCJjb2x1bW5zQXJyIiwiY29sdW1uc01hcCIsImJ1aWxkRm9ybUNvbHVtbnMiLCJjb2x1bW5zRmxhdE1hcCIsImZvcm1UeXBlIiwiZm9ybUNvbHVtbnMiLCJmb3JtQ29sdW1uIiwiYnVpbGRGb3JtIiwiYmFzZU9wdGlvbnMiLCJvbkNvbXBsZXRlIiwiYnVpbGRTZWFyY2hGb3JtIiwic2VhcmNoQ29sdW1ucyIsImZvcm1Db2x1bW5zRm9yU2VhcmNoIiwiY29weVByb3BzIiwic2VhcmNoQ29weUZvcm1Qcm9wcyIsImNvcHlGcm9tQ29tcG9zaXRpb25Db2x1bW4iLCJmaWVsZCIsImNvbW1vbiIsImRlZiIsInBpY2siLCJzZWFyY2giLCJidWlsZEZvcm1PcHRpb25zIiwiZGVmYXVsdE9wdGlvbnMiLCJjb21tb25PcHRpb25zIiwiY3J1ZEV4cG9zZSIsImJ1aWxkQ29sdW1ucyIsInRvb2xiYXIiLCJjb2x1bW5zRmlsdGVyIiwib3JpZ2luYWxDb2x1bW5zIiwiYWRkRm9ybSIsImVkaXRGb3JtIiwiZGlzYWJsZWQiLCJlZGl0YWJsZSIsImZvckVhY2hUYWJsZUNvbHVtbnMiLCJmb3JFYWNoQ29sdW1ucyIsInVzZUNvbHVtbnMiLCJzZWVkIiwiRnNGb3JtV3JhcHBlckxpc3QiLCJjcmVhdGVGb3JtV3JhcHBlciIsImlkIiwiY29udGFpbmVyIiwicmVzb2x2ZSIsInJlamVjdCIsInZOb2RlIiwiY3JlYXRlVk5vZGUiLCJGc0Zvcm1XcmFwcGVyIiwidm0iLCJ1c2VGb3JtV3JhcHBlciIsInBkIiwiaW5qZWN0Iiwib3BlbkRpYWxvZyIsIm9wZW5DcnVkRm9ybURpYWxvZyIsImZvcm1PcHRpb25zIiwiZG9NZXJnZSIsInVzZUVkaXRhYmxlIiwicHJvcHMiLCJjcnVkQmluZGluZyIsIl9jIiwiX2IiLCJvbkVuYWJsZWQiLCJlZGl0YWJsZU9wdHMiLCJlZGl0YWJsZUlkIiwiZWRpdGFibGVSb3ciLCJpc0FkZCIsInNldERhdGEiLCJyb3dEYXRhIiwiZGF0YSIsInVzZUV4cG9zZSIsImNydWRSZWYiLCJmb3JtV3JhcHBlclByb3ZpZGVyIiwiY2hlY2tDcnVkUmVmIiwiY2hlY2tDcnVkQmluZGluZ1JlZiIsImZvcm1XcmFwcGVyUmVmIiwiZm9ybVJlZiIsInJlY29yZHMiLCJ0b1JhdyIsInZhbHVlQnVpbGRlckNvbHVtbnMiLCJjb2wiLCJpc0FycmF5IiwicGFnZVF1ZXJ5IiwicGFnZSIsInNlYXJjaEZvcm1EYXRhIiwicXVlcnkiLCJ1c2VyUGFnZVF1ZXJ5IiwidXNlclBhZ2VSZXMiLCJwYWdlUmVzIiwiY3VycmVudFBhZ2UiLCJwYWdlU2l6ZSIsImZzVGFibGVSZWYiLCJubyIsInRhYmxlUmVmIiwicm93S2V5IiwicmVtb3ZlQmluZGluZyIsImlzTG9jYWwiLCJyZW1vdmVTY29wZSIsImZvcm1PcHRzIiwibW9kZSIsInh4Rm9ybSIsImxvYWRGc0V4cG9ydFV0aWwiLCJsb2FkRnNJbXBvcnRVdGlsIiwiZGVmYXVsdERhdGFGb3JtYXR0ZXIiLCJvcmlnaW5hbFJvdyIsIm5vZGVzIiwibGFiZWwiLCJub2RlIiwiZXhwb3J0VGFibGUiLCJ1bnJlZiIsImV4cG9ydENvbCIsImV4cG9ydFV0aWwiLCJvcmlnaW5hbERhdGEiLCJzZWFyY2hQYXJhbXMiLCJjbG9uZSIsIm1hcHBpbmciLCJleHBPcHRzIiwiaW1wb3J0VGFibGUiLCJpbXBvcnREYXRhIiwiaXNFZGl0YWJsZSIsImNydWRPcHRpb25zUGx1Z2lucyIsInJlZ2lzdGVyQ3J1ZE9wdGlvbnNQbHVnaW4iLCJnZXRDcnVkT3B0aW9uc1BsdWdpbiIsInNlbGVjdGlvbiIsImdldFJvd0tleSIsImNoYW5nZWQiLCJuZXh0VGljayIsInVzZUNydWQiLCJleHBvc2UiLCJkb1JlZnJlc2giLCJkb1ZhbHVlUmVzb2x2ZSIsInVzZVBhZ2luYXRpb24iLCJjdXJyZW50IiwidXNlRm9ybVN1Ym1pdCIsIl9kIiwidXNlUm93SGFuZGxlIiwidXNlU2VhcmNoIiwiYmFzZVRhYmxlUmVmIiwidXNlVGFicyIsImZvcm1EYXRhIiwidXNlVG9vbGJhciIsImV4cG9ydGluZyIsIm9yaWdpbmFsIiwidXBkYXRlQ29sdW1ucyIsIm9sZCIsIm9sZENvbHVtbiIsIm5ld0NvbHVtbiIsIm5ld0NvbHVtbnMiLCJ1c2VUYWJsZSIsInNvcnRDaGFuZ2UiLCJpc1NlcnZlclNvcnQiLCJwcm9wIiwiYXNjIiwib2xkU29ydCIsInVzZUFjdGlvbmJhciIsImFjdGl2ZVJvd3MiLCJhZnRlclVzZUNydWQiLCJiaW5kaW5ncyIsInJlYnVpbGRDcnVkQmluZGluZ3MiLCJwbHVnaW5zIiwiYmVmb3JlIiwicGx1Z2luT3B0aW9ucyIsInJlc2V0Q3J1ZE9wdGlvbnMiLCJhcHBlbmRDcnVkT3B0aW9ucyIsIm92ZXJPcHRpb25zIiwibmV3T3B0aW9ucyIsImFwcGVuZENydWRCaW5kaW5nIiwidXNlRnNJbXBsIiwiY3JlYXRlQ3J1ZE9wdGlvbnMiLCJjcnVkRXhwb3NlUmVmIiwiY3JlYXRlQ3J1ZE9wdGlvbnNSZXQiLCJpbml0Q3J1ZCIsInVzZUNydWRQcm9wcyIsInVzZUNydWRSZXQiLCJ1c2VGcyIsInVzZUZzQXN5bmMiLCJ1c2VGc1JlZiIsInVzZURpY3QiLCJ2TW9kZWwiLCJzaGFsbG93UmVhY3RpdmUiLCJjcmVhdGVDb21wdXRlZE9wdGlvbnMiLCJvcHRpb24iLCJnZXRWYWx1ZSIsImdldExhYmVsIiwiZ2V0RGljdCIsImdldFNjb3BlIiwiZ2V0Q3VycmVudFNjb3BlIiwicHJveHkiLCJnZXRDdXJyZW50SW5zdGFuY2UiLCJsb2FkRGljdCIsInJlbG9hZCIsInJlbG9hZERpY3QiLCJjbGVhckRpY3QiLCJ3YXRjaFZhbHVlIiwiZ2V0RGljdERhdGEiLCJnZXRQcm9wVmFsdWUiLCJhdHRyIiwicmVtb3ZlUHJvcFZhbHVlIiwiZ2V0Q2hpbGRyZW4iLCJwZXJmIiwid2FybmVkIiwiUFJPQ0VTUyIsImVtaXRXYXJuaW5nIiwibXNnIiwiY29kZSIsImZuIiwiQUMiLCJBUyIsIndhcm5BQ1BvbHlmaWxsIiwicmVhc29uIiwicHJpbnRBQ1BvbHlmaWxsV2FybmluZyIsInNob3VsZFdhcm4iLCJpc1Bvc0ludCIsImdldFVpbnRBcnJheSIsIm1heCIsIlplcm9BcnJheSIsIl9TdGFjayIsIkhlYXBDbHMiLCJfX3ByaXZhdGVHZXQiLCJfY29uc3RydWN0aW5nIiwiX19wcml2YXRlU2V0IiwiX19wcml2YXRlQWRkIiwiU3RhY2siLCJfTFJVQ2FjaGUiLCJfaW5pdGlhbGl6ZVRUTFRyYWNraW5nIiwiX2luaXRpYWxpemVTaXplVHJhY2tpbmciLCJfaW5kZXhlcyIsIl9yaW5kZXhlcyIsIl9pc1ZhbGlkSW5kZXgiLCJfZXZpY3QiLCJfYmFja2dyb3VuZEZldGNoIiwiX2lzQmFja2dyb3VuZEZldGNoIiwiX2Nvbm5lY3QiLCJfbW92ZVRvVGFpbCIsIl9tYXgiLCJfbWF4U2l6ZSIsIl9kaXNwb3NlIiwiX2Rpc3Bvc2VBZnRlciIsIl9mZXRjaE1ldGhvZCIsIl9zaXplIiwiX2NhbGN1bGF0ZWRTaXplIiwiX2tleU1hcCIsIl9rZXlMaXN0IiwiX3ZhbExpc3QiLCJfbmV4dCIsIl9wcmV2IiwiX2hlYWQiLCJfdGFpbCIsIl9mcmVlIiwiX2Rpc3Bvc2VkIiwiX3NpemVzIiwiX3N0YXJ0cyIsIl90dGxzIiwiX2hhc0Rpc3Bvc2UiLCJfaGFzRmV0Y2hNZXRob2QiLCJfaGFzRGlzcG9zZUFmdGVyIiwiX3VwZGF0ZUl0ZW1BZ2UiLCJfc3RhdHVzVFRMIiwiX3NldEl0ZW1UVEwiLCJfaXNTdGFsZSIsIl9yZW1vdmVJdGVtU2l6ZSIsIl9pIiwiX2FkZEl0ZW1TaXplIiwiX3MiLCJfc3QiLCJfcmVxdWlyZVNpemUiLCJfayIsIl92Iiwic2l6ZUNhbGN1bGF0aW9uIiwidHRsIiwidHRsUmVzb2x1dGlvbiIsInR0bEF1dG9wdXJnZSIsInVwZGF0ZUFnZU9uR2V0IiwidXBkYXRlQWdlT25IYXMiLCJhbGxvd1N0YWxlIiwiZGlzcG9zZSIsImRpc3Bvc2VBZnRlciIsIm5vRGlzcG9zZU9uU2V0Iiwibm9VcGRhdGVUVEwiLCJtYXhTaXplIiwibWF4RW50cnlTaXplIiwiZmV0Y2hNZXRob2QiLCJub0RlbGV0ZU9uRmV0Y2hSZWplY3Rpb24iLCJub0RlbGV0ZU9uU3RhbGVHZXQiLCJhbGxvd1N0YWxlT25GZXRjaFJlamVjdGlvbiIsImFsbG93U3RhbGVPbkZldGNoQWJvcnQiLCJpZ25vcmVGZXRjaEFib3J0IiwiVWludEFycmF5IiwiX19wcml2YXRlTWV0aG9kIiwiaW5pdGlhbGl6ZVNpemVUcmFja2luZ19mbiIsImluaXRpYWxpemVUVExUcmFja2luZ19mbiIsImMiLCJpc0JhY2tncm91bmRGZXRjaF9mbiIsImsiLCJiYWNrZ3JvdW5kRmV0Y2hfZm4iLCJtb3ZlVG9UYWlsX2ZuIiwiaW5kZXhlc19mbiIsInJpbmRleGVzX2ZuIiwiZ2V0T3B0aW9ucyIsInYiLCJ0aGlzcCIsImRlbGV0ZWQiLCJlbnRyeSIsInN0YXJ0IiwicmVtYWluIiwiYWdlIiwic2V0T3B0aW9ucyIsInN0YXR1cyIsImV2aWN0X2ZuIiwiX19wcml2YXRlV3JhcHBlciIsIm9sZFZhbCIsIm9sZFZhbHVlIiwiZHQiLCJ0YXNrIiwiX2UiLCJoYXNPcHRpb25zIiwicGVla09wdGlvbnMiLCJmZXRjaE9wdGlvbnMiLCJmb3JjZVJlZnJlc2giLCJzaWduYWwiLCJzdGFsZSIsImlzU3RhbGUiLCJzdGFsZVZhbCIsImZldGNoaW5nIiwicGkiLCJuaSIsInR0bHMiLCJzdGFydHMiLCJjYWNoZWROb3ciLCJnZXROb3ciLCJzaXplcyIsImlzVmFsaWRJbmRleF9mbiIsImZyZWUiLCJoZWFkIiwiYWMiLCJmZXRjaE9wdHMiLCJjYiIsInVwZGF0ZUNhY2hlIiwiYWJvcnRlZCIsImlnbm9yZUFib3J0IiwiZmV0Y2hGYWlsIiwiYmYiLCJlYiIsImVyIiwiYWxsb3dTdGFsZUFib3J0ZWQiLCJub0RlbGV0ZSIsInBjYWxsIiwicmVqIiwiZm1wIiwiY29ubmVjdF9mbiIsIkxSVUNhY2hlIiwiRGljdEdsb2JhbENhY2hlIiwic2V0RGljdFJlcXVlc3QiLCJyZXF1ZXN0IiwiZGljdFJlcXVlc3QiLCJEaWN0IiwiY2FjaGVLZXkiLCJjYWNoZWQiLCJjYWxsIiwibm90aWZ5IiwidG9GZXRjaFZhbHVlcyIsImdldEZyb21SZW1vdGUiLCJ1cmwiLCJtYXliZUFyciIsImRpY3REYXRhIiwiY29uZmlnIiwidXNlRGljdERlZmluZSIsInVzZVR5cGVzIiwiZHJhZ01vZGFsRm9yQW50ZHYiLCJkaWFsb2dFbCIsImRpYWxvZ0hlYWRlckVsIiwiZHJhZ0RvbSIsInN0eSIsIlgiLCJZIiwic3R5TCIsInN0eVQiLCJsIiwiZHJhZ01vZGFsRm9yTmFpdmUiLCJkcmFnTW9kYWwiLCJ1c2VEcmFnIiwiR2xvYmFsQ29uZmlnIiwiX3NmY19tYWluJHgiLCJjb21wdXRlZElubmVyU3R5bGUiLCJjb21wdXRlZEJvZHlTdHlsZSIsIl9zZmNfcmVuZGVyIiwiX25vcm1hbGl6ZVN0eWxlIiwiX3NmY19tYWluJHciLCJfY29tcG9uZW50X2ZzX2NvbnRhaW5lciIsIl9yZXNvbHZlQ29tcG9uZW50IiwiX2NyZWF0ZUJsb2NrIiwiX3dpdGhDdHgiLCJfaG9pc3RlZF81IiwiX3NmY19tYWluJHYiLCJnZXRDcnVkQmluZGluZyIsInNlYXJjaFNob3ciLCJjYXJkQ29tcG9uZW50TmFtZSIsIl9jcmVhdGVTbG90cyIsIl9yZXNvbHZlRHluYW1pY0NvbXBvbmVudCIsIl9pc1Nsb3QiLCJPYmplY3QiLCJwcm90b3R5cGUiLCJ0b1N0cmluZyIsIl9pc1ZOb2RlIiwiaW5oZXJpdEF0dHJzIiwiU3RyaW5nIiwiZGVmYXVsdCIsInJlcXVpcmVkIiwiaWNvbiIsIkZ1bmN0aW9uIiwiaWNvblJpZ2h0IiwiY2lyY2xlIiwiQm9vbGVhbiIsInRvb2x0aXAiLCJ1bmRlZmluZWQiLCJidXR0b25Qcm9wcyIsImNsYXNzTmFtZSIsInNldHVwIiwiaWNvblJlbmRlciIsImljb25DbGFzcyIsIl9tZXJnZVByb3BzIiwicmVuZGVyQnRuIiwiaXNJY29uU2xvdCIsImlzSWNvblByb3AiLCJpY29uUHJvcCIsInNsb3RzIiwiaXNDaXJjbGUiLCJidXR0b25Db21wIiwicmVzb2x2ZUR5bmFtaWNDb21wb25lbnQiLCJidG5Qcm9wcyIsImNsYXNzIiwiYXR0cnMiLCJoIiwidG9vbHRpcENvbXAiLCJjb21wdXRlVG9vbHRpcFByb3BzIiwib21pdCIsInRyaWdnZXJTbG90TmFtZSIsInJlcXVpcmUiLCJjb21wdXRlZFJlbmRlckZ1bmMiLCJpbmRleE9mIiwic3RhcnRzV2l0aCIsIkljb25Db21wIiwicmVwbGFjZSIsImlzQ29tcG9uZW50IiwiX3NmY19tYWluJHUiLCJJY29uIiwiX25vcm1hbGl6ZUNsYXNzIiwiX3NmY19tYWluJHQiLCJzeW1ib2xJZCIsImdldFN0eWxlIiwic3BpbiIsIl9zZmNfbWFpbiRzIiwibGFiZWxBdHRycyIsIl9jcmVhdGVUZXh0Vk5vZGUiLCJfdG9EaXNwbGF5U3RyaW5nIiwibG9hZGluZyIsImljb25zIiwicmVmcmVzaCIsIl9zZmNfbWFpbiRyIiwibWVyZ2VFdmVudEhhbmRsZXMiLCJldmVudE5hbWUiLCJldmVudHMiLCIkZXZlbnQiLCJldmVudCIsImh0bWxUYWdzIiwibW9kZWxWYWx1ZSIsIm9uIiwidW5kZWZpbmVUb051bGwiLCJlbWl0cyIsInByb3ZpZGUiLCJlbWl0IiwidGFyZ2V0UmVmIiwiYWxsQXR0cnMiLCJ0cmltIiwibnVtYmVyIiwib25VcGRhdGVNb2RlbFZhbHVlTmFtZSIsInRtcCIsIk51bWJlciIsImlzTmFOIiwiaGFuZGxlciIsImNhbWVsQ2FzZSIsImNoaWxkcmVuUmVuZGVyIiwiY3JlYXRlQ2hpbGRyZW4iLCJjb21wdXRlZElucHV0Q29tcCIsImlzQXN5bmNDb21wb25lbnQiLCJpbnB1dCIsImlucHV0Q29tcCIsInJlc29sdmVDb21wb25lbnQiLCJjaGlsZHJlblJlbmRlcmVkIiwiZ2V0VGFyZ2V0UmVmIiwiZ2V0VGFyZ2V0UmVmQXN5bmMiLCJnZXRUYXJnZXRSZWZTeW5jIiwiUHJvbWlzZSIsImdldFRhcmdldFJlZkRlbGF5IiwiY291bnQiLCJzZXRUaW1lb3V0IiwiRXJyb3IiLCJfc2xvdCIsIm1lcmdlZCIsIm1lcmdlUHJvcHMiLCJtYXJrUmF3IiwiZnVuY3Rpb25hbCIsInJlbmRlckZ1bmMiLCJfc2ZjX21haW4kcSIsImNyZWF0ZUluaXRpYWxGb3JtIiwiZGVmVmFsdWUiLCJpbml0aWFsRm9ybSIsInNldEZvcm1EYXRhIiwiZ2V0Q29tcG9uZW50UmVmIiwiY29tcHV0ZWRDb2x1bW5zIiwiZG9WYWx1ZUJ1aWxkZXIiLCJnZXRGb3JtRGF0YSIsInZhbHVlQ2hhbmdlIiwiZG9WYWx1ZUNoYW5nZSIsIm1lcmdlQ29sIiwiYnVpbGRJdGVtU2NvcGUiLCJmb3JtSXRlbVJlZnMiLCJnZXRGb3JtSXRlbVJlZiIsImdyb3VwQWN0aXZlS2V5IiwiZ3JvdXBJdGVtIiwiY29tcHV0ZWRHcm91cCIsImdyb3VwIiwiZ3JvdXBlZEtleXMiLCJ3cmFwcGVyIiwiY29tcHV0ZWREZWZhdWx0Q29sdW1ucyIsImdldEZvcm1SZWYiLCJlbnRyaWVzIiwiaW5pdGlhbFZhbHVlIiwidmFsaWRSZWYiLCJlcnJvcnNSZWYiLCJmaWxsR3JvdXBFcnJvciIsImZpZWxkRXJyb3JzIiwidmFsaWRhdGVTY29wZSIsInZhbGlkYXRlRXJyb3JzIiwic3VibWl0U2NvcGUiLCJmb3JtSXRlbVNob3ciLCJncm91cEl0ZW1TaG93IiwibmV3VmFsIiwiaXNEaXJ0eSIsImFmdGVyIiwibWVyZ2VkU2xvdHMiLCJkaXNwbGF5IiwiX0ZyYWdtZW50IiwiX3JlbmRlckxpc3QiLCJfY29tcG9uZW50X2ZzX2Zvcm1faXRlbSIsInNldCIsImdyb3VwS2V5Iiwic2xvdE5hbWUiLCJfY29tcG9uZW50X2ZzX3JlbmRlciIsIl9zZmNfbWFpbiRwIiwiRnNSZW5kZXIiLCJjb21wb25lbnRSZW5kZXJSZWYiLCJzY29wZUZ1bmMiLCJ1cGRhdGVNb2RlbFZhbHVlIiwiY29tcHV0ZWRIZWxwZXJQb3NpdGlvbiIsImNvbXB1dGVkSGVscGVyVG9vbHRpcCIsImNvbXB1dGVkS2V5IiwiY29tcHV0ZWRMYWJlbCIsImNvbXB1dGVkTGFiZWxJc1JlbmRlciIsIl9jb21wb25lbnRfZnNfY29tcG9uZW50X3JlbmRlciIsIl9ub3JtYWxpemVQcm9wcyIsIl9ob2lzdGVkXzYiLCJmb3JtU2xvdCIsIl9ob2lzdGVkXzciLCJfY29tcG9uZW50X2ZzX3Nsb3RfcmVuZGVyIiwiX2NvbXBvbmVudF9mc19mb3JtX2hlbHBlciIsIl9zZmNfbWFpbiRvIiwiaGVscGVyIiwiaW5uZXIiLCJpbm5lcldyYXBwZXIiLCJ6SW5kZXgiLCJmb3JtV3JhcHBlck9wZW4iLCJmb3JtV3JhcHBlcklzIiwiZm9ybVdyYXBwZXJCaW5kIiwiZm9ybVdyYXBwZXJPcHRzIiwiZW1pdE9uQ2xvc2VkIiwiZW1pdE9uT3BlbmVkIiwiYmVmb3JlQ2xvc2VDdXN0b20iLCJmb3JtV3JhcHBlcklkIiwiTWF0aCIsImZsb29yIiwicmFuZG9tIiwiZm9ybVdyYXBwZXJJZENsYXNzIiwiZm9ybVdyYXBwZXJTbG90cyIsImJ1aWxkRXZlbnQiLCJ3cmFwcGVyQmluZFJlZiIsImZvcm1PcHRpb25zUmVmIiwiY2xvc2UiLCJ0b2dnbGVGdWxsc2NyZWVuIiwib3BlbiIsIm9uT3BlbiIsImlzIiwiY3VzdG9tQ2xhc3NLZXkiLCJmb3JtV3JhcHBlciIsImN1c3RvbUNsYXNzIiwib25DbG9zZWQiLCJvbk9wZW5lZCIsImJlZm9yZUNsb3NlIiwiZnVsbHNjcmVlbiIsImRvU2F2ZVJlbWluZCIsInNhdmVSZW1pbmQiLCJuZWVkU2F2ZSIsIm1lc3NhZ2VCb3giLCJjb25maXJtIiwiY29uZmlybUJ1dHRvblRleHQiLCJjYW5jZWxCdXR0b25UZXh0IiwiZWxlbWVudEJlZm9yZUNsb3NlRml4IiwiZG9uZSIsInRoZW4iLCJkcmFnZ2FibGUiLCJnZXRNb2RhbCIsImRvY3VtZW50IiwicXVlcnlTZWxlY3RvciIsIm9uVmFsdWVDaGFuZ2UiLCJnZXRDb21wdXRlQ29udGV4dCIsImNvbXB1dGVkQ3VzdG9tQnV0dG9ucyIsImJ1dHRvbnMiLCJjb21wdXRlZEJ1dHRvbnMiLCJkZWZCdG5zIiwiY2FuY2VsIiwib2siLCJidXR0b25zQXJyIiwib25DbGljayIsImNsaWNrIiwiZXhwb3NlZCIsImZ1bGxzY3JlZW5FbmFibGVkIiwiZW5kc1dpdGgiLCJnZXQiLCJpbm5lckJpbmQiLCJidWlsZElubmVyQmluZCIsImdldElubmVyV3JhcHBlciIsImlubmVyQ29udGFpbmVyU2VsZWN0b3IiLCJjbGFzc0xpc3QiLCJhZGQiLCJjb25zb2xlIiwidXNlU2xvdHMiLCJfc2xvdHMiLCJzbG90c1JlbmRlciIsIl9zZWxmIiwidGl0bGVTbG90TmFtZSIsImZ1bGxTY3JlZW5JY29uIiwiZnVsbFNjcmVlbiIsInVuRnVsbFNjcmVlbiIsInNob3ciLCJoYXNDb250ZW50V3JhcCIsImNvbnRlbnRXcmFwIiwic3ViQ2hpbGRyZW4iLCJjb250ZW50V3JhcENvbXAiLCJ2aXNpYmxlIiwidkNsb3NlZCIsImJ1aWxkT25DbG9zZWRCaW5kIiwidkN1c3RvbUNsYXNzIiwidkZ1bGxTY3JlZW4iLCJ2U3R5bGUiLCJmb3JtV3JhcHBlckNvbXAiLCJfX2RlZmF1bHRfXyIsIl9fTUFDUk9TX2RlZmluZUNvbXBvbmVudCIsImZvcm1XcmFwcGVyTGlzdCIsInVzZVByb3ZpZGVycyIsInNlYXJjaFJlZiIsImdldFNlYXJjaFJlZiIsImdldFNlYXJjaEZvcm1EYXRhIiwiZ2V0U2VhcmNoVmFsaWRhdGVkRm9ybURhdGEiLCJzZXRTZWFyY2hGb3JtRGF0YSIsIm1lcmdlRm9ybSIsInNlYXJjaFJldCIsImRlZmF1bHRUYWJzIiwiX2ciLCJfZiIsInNsb3RGaWx0ZXIiLCJjdHhTbG90cyIsImtleVByZWZpeCIsInVzZUZpeGVkSGVpZ2h0IiwiY29udGFpbmVyUmVmIiwibWF4SGVpZ2h0UmVmIiwiY29tcHV0ZUJvZHlIZWlnaHQiLCJ0YWJsZURvbSIsImhlYWREb20iLCJ0YWJsZUhlaWdodCIsImhlYWRIZWlnaHQiLCJ1dGlsTG9nIiwid2F0Y2hCb2R5SGVpZ2h0Q2hhbmdlIiwidGFibGVXcmFwcGVyRG9tIiwidG9vbGJhclJlZiIsInRhYmxlUHJvcFJlZiIsInRvUmVmIiwiY29tcHV0ZWRUYWJsZSIsImZpeGVkSGVpZ2h0IiwiY29tcHV0ZWRUb29sYmFyIiwiY29tcHV0ZWRDZWxsU2xvdHMiLCJjb21wdXRlZEZvcm1TbG90cyIsImNvbXB1dGVkU2VhcmNoU2xvdHMiLCJjb21wdXRlZFRvb2xiYXJTbG90cyIsImNvbXB1dGVkQ2xhc3MiLCJjbGF6eiIsImlubmVyV3JhcHBlclJlZiIsImlzRm9ybUlubmVyIiwiX3NmY19tYWluJG0iLCJ0YWJzIiwiX2NvbXBvbmVudF9mc19mb3JtX3dyYXBwZXIiLCJfY29tcG9uZW50X2ZzX2FjdGlvbmJhciIsIl9ndWFyZFJlYWN0aXZlUHJvcHMiLCJfY29tcG9uZW50X2ZzX3RhYnNfZmlsdGVyIiwidGFic0JpbmRpbmciLCJfY29tcG9uZW50X2ZzX3RhYmxlIiwicm93SGFuZGxlIiwiX3NmY19tYWluJGwiLCJkb0NsaWNrIiwicGlja2VkUHJvcHMiLCJjb21wdXRlUHJvcHMiLCJjb21wdXRlZEhhbmRsZUJ0bnMiLCJtZXJnZWRCdG5zIiwiYnRucyIsImNvbXB1dGVkRHJvcGRvd25BdExlYXN0IiwiaXNEcm9wZG93bkJ0biIsImhhc0Ryb3Bkb3duQnRuIiwiZG9Ecm9wZG93bkl0ZW1DbGljayIsImJ0biIsImNvbXB1dGVkRHJvcGRvd25CaW5kaW5nIiwiYmluZGluZyIsIl9jb21wb25lbnRfZnNfaWNvbiIsIl9jb21wb25lbnRfZnNfYnV0dG9uIiwiX3dpdGhNb2RpZmllcnMiLCJfZXh0ZW5kcyIsInNvdXJjZSIsIl9pbmhlcml0c0xvb3NlIiwic3ViQ2xhc3MiLCJzdXBlckNsYXNzIiwiX3NldFByb3RvdHlwZU9mIiwiX2dldFByb3RvdHlwZU9mIiwiX2lzTmF0aXZlUmVmbGVjdENvbnN0cnVjdCIsIl9jb25zdHJ1Y3QiLCJQYXJlbnQiLCJDbGFzcyIsIkNvbnN0cnVjdG9yIiwiX2lzTmF0aXZlRnVuY3Rpb24iLCJfd3JhcE5hdGl2ZVN1cGVyIiwiV3JhcHBlciIsImZvcm1hdFJlZ0V4cCIsIndhcm5pbmciLCJlcnJvcnMiLCJjb252ZXJ0RmllbGRzRXJyb3IiLCJmaWVsZHMiLCJ0ZW1wbGF0ZSIsIl9sZW4iLCJfa2V5IiwibGVuIiwic3RyIiwieCIsImlzTmF0aXZlU3RyaW5nVHlwZSIsImlzRW1wdHlWYWx1ZSIsImFzeW5jUGFyYWxsZWxBcnJheSIsImZ1bmMiLCJyZXN1bHRzIiwiYXJyTGVuZ3RoIiwiYXN5bmNTZXJpYWxBcnJheSIsIm5leHQiLCJmbGF0dGVuT2JqQXJyIiwib2JqQXJyIiwiQXN5bmNWYWxpZGF0aW9uRXJyb3IiLCJfRXJyb3IiLCJfdGhpcyIsImFzeW5jTWFwIiwiX3BlbmRpbmciLCJmbGF0dGVuQXJyIiwiZmlyc3RGaWVsZHMiLCJvYmpBcnJLZXlzIiwib2JqQXJyTGVuZ3RoIiwicGVuZGluZyIsImlzRXJyb3JPYmoiLCJjb21wbGVtZW50RXJyb3IiLCJydWxlIiwib2UiLCJmaWVsZFZhbHVlIiwiZGVlcE1lcmdlIiwicmVxdWlyZWQkMSIsIndoaXRlc3BhY2UiLCJ1cmxSZWciLCJnZXRVcmxSZWdleCIsIndvcmQiLCJ2NCIsInY2c2VnIiwidjYiLCJ2NDZFeGFjdCIsInY0ZXhhY3QiLCJ2NmV4YWN0IiwiaXAiLCJwcm90b2NvbCIsImF1dGgiLCJpcHY0IiwiaXB2NiIsImhvc3QiLCJkb21haW4iLCJ0bGQiLCJwb3J0IiwicmVnZXgiLCJwYXR0ZXJuJDIiLCJ0eXBlJDEiLCJjdXN0b20iLCJydWxlVHlwZSIsInJhbmdlIiwibWluIiwic3BSZWdleHAiLCJudW0iLCJFTlVNJDEiLCJlbnVtZXJhYmxlJDEiLCJwYXR0ZXJuJDEiLCJfcGF0dGVybiIsInJ1bGVzIiwic3RyaW5nIiwidmFsaWRhdGUiLCJtZXRob2QiLCJfYm9vbGVhbiIsInJlZ2V4cCIsImludGVnZXIiLCJmbG9hdEZuIiwiYXJyYXkiLCJvYmplY3QiLCJFTlVNIiwiZW51bWVyYWJsZSIsInBhdHRlcm4iLCJkYXRlT2JqZWN0IiwiYW55IiwidmFsaWRhdG9ycyIsIm5ld01lc3NhZ2VzIiwiY2xvbmVkIiwibWVzc2FnZXMiLCJTY2hlbWEiLCJkZXNjcmlwdG9yIiwiX3Byb3RvIiwiX21lc3NhZ2VzIiwic291cmNlXyIsIm9jIiwiX3RoaXMyIiwiY29tcGxldGUiLCJfZXJyb3JzIiwibWVzc2FnZXMkMSIsInNlcmllcyIsInoiLCJlcnJvckZpZWxkcyIsImRvSXQiLCJkZWVwIiwiYWRkRnVsbEZpZWxkIiwic2NoZW1hIiwiZXJyb3JMaXN0IiwiZmlsbGVkRXJyb3JzIiwiZmllbGRzU2NoZW1hIiwicGFyZWRGaWVsZHNTY2hlbWEiLCJmaWVsZFNjaGVtYSIsImZpZWxkU2NoZW1hTGlzdCIsImVycnMiLCJmaW5hbEVycm9ycyIsIm1lc3NhZ2VJbmRleCIsInZhbGlkYXRvciIsImNyZWF0ZVZhbGlkYXRvciIsImVkaXRhYmxlQ2VsbHMiLCJjdXJEZXNjIiwiZWFjaFRyZWUiLCJ1c2VUYWJsZURhdGEiLCJnZXREYXRhIiwidGFibGVEYXRhIiwiZWRpdGFibGVSb3dzIiwiZ2V0SWRGcm9tUm93IiwiZ2V0RWRpdGFibGVJZEZyb21Sb3ciLCJlZGl0YWJsZUVhY2hSb3dzIiwiY2VsbHMiLCJlZGl0YWJsZUVhY2hDZWxscyIsImNlbGwiLCJjcmVhdGVFZGl0YWJsZUNlbGwiLCJ0YWJsZVJvdyIsInNldFZhbHVlIiwidXBkYXRlQ2VsbCIsInNob3dBY3Rpb24iLCJlbmFibGVkIiwiZm9ybUl0ZW0iLCJzZXREZWZhdWx0VmFsdWUiLCJyb3dLZXlWYWx1ZSIsImNyZWF0ZUVkaXRhYmxlUm93IiwiZG9TYXZlIiwibmV3Um93Iiwic2F2ZVJvdyIsInAzIiwiY2hpbGQiLCJuZXh0RWRpdGFibGVJZCIsImVkaXRhYmxlSWRHZW4iLCJzZXR1cEVkaXRhYmxlIiwidG1wUm93cyIsImJ1aWxkVGhpbkRhdGEiLCJ0aGluRGF0YSIsInRoaW5Sb3ciLCJvbGRUaGluRGF0YSIsImdldEVkaXRhYmxlQ2VsbCIsImFjdGl2ZSIsImluYWN0aXZlIiwic2F2ZUVhY2giLCJjYW5jZWxBbGwiLCJwZXJzaXN0IiwicmVzdW1lIiwiaGFzRGlydHkiLCJkaXJ0eSIsImFkZEluZGV4Iiwic2V0RGVmYXVsdEZvcm0iLCJmb3JtQ29sdW1uQ29uZmlncyIsImFkZFJvdyIsImdldEVkaXRhYmxlUm93IiwicmVtb3ZlVGFibGVSb3dCeUVkaXRhYmxlSWQiLCJyZW1vdmVSb3ciLCJhY3RpdmVDb2xzIiwiY29scyIsImdldEFjdGl2ZVJvd3MiLCJyb3dzIiwiaGFzRXJyb3IiLCJyZW1vdmVEYXRhRWRpdGFibGVJZCIsImdldENsZWFuVGFibGVEYXRhIiwidXNlQ29tcG9uZW50UmVmUHJvdmlkZXIiLCJjb21wb25lbnRzUmVmIiwiZ2V0dGVyIiwic2V0dGVyIiwiYnVpbGRUYWJsZVNsb3RzIiwic29ydGVkQ29sdW1ucyIsInJlbmRlclJvd0hhbmRsZSIsInJlbmRlckNlbGxDb21wb25lbnQiLCJ0YWJsZUNvbHVtbkNvbXAiLCJ0YWJsZUNvbHVtbkdyb3VwQ29tcCIsInRhYmxlQ29sdW1uR3JvdXAiLCJ0YWJsZVNsb3RzIiwiYnVpbGRDb2x1bW4iLCJjZWxsU2xvdHMiLCJjZWxsU2xvdE5hbWUiLCJjdXJyZW50VGFibGVDb2x1bW5Db21wIiwic3ViQ29sdW1ucyIsInN1YkNvbHVtbiIsIm5ld0l0ZW0iLCJyb3dIYW5kbGVTbG90cyIsImRhdGFJbmRleCIsImNoaWxkT3B0aW9ucyIsImN1c3RvbVJlbmRlciIsInJlbmRlck1ldGhvZCIsIm5ld0NvbCIsInJlYnVpbGRSZW5kZXJTY29wZSIsImNlbGxSZW5kZXIiLCJjb25kaXRpb25hbFJlbmRlciIsImNvbXBvbmVudFJlZnMiLCJsZW5ndGgiLCJjZWxsUmVmIiwiY3VycmVudFJlZiIsInNjcm9sbFRvIiwidG9wIiwidGFibGVDb21wIiwidGFibGVDb2x1bW5DSSIsImVkaXRhYmxlV3JhcCIsIm9uUm93SGFuZGxlIiwib25DaGFuZ2UiLCJvblNvcnRDaGFuZ2UiLCJzb3J0ZXIiLCJvbkZpbHRlckNoYW5nZSIsImZpbHRlcnMiLCJvblBhZ2luYXRpb24iLCJidWJibGVVcCIsInJvd0hhbmRsZVNsb3RzTmFtZSIsIm5ld1Njb3BlIiwic2V0UmVmIiwicm93UmVmcyIsImVkaXRhYmxlQ2VsbCIsInJlYWRvbmx5IiwicmVuZGVyTW9kZSIsImRhdGFTb3VyY2UiLCJjb21wdXRlZEJpbmRpbmciLCJjb21wdXRlZFRhYmxlU2xvdHMiLCJ0YWJsZVJlbmRlciIsInZMb2FkaW5nIiwicmVzb2x2ZURpcmVjdGl2ZSIsIndpdGhEaXJlY3RpdmVzIiwiY29tcHV0ZWRDb21wb25lbnQiLCJjb21wdXRlZFByb3BzQ29tcG9uZW50IiwiY29tcHV0ZWRUaXRsZSIsInNob3dUaXRsZSIsImNvbXB1dGVkQ2VsbENvbnRlbnRSZW5kZXIiLCJzbG90IiwiY2VsbENvbnRlbnRSZW5kZXIiLCJtYXRjaCIsImZvcm1hdHRlciIsImNvbHVtbktleSIsImNvbXB1dGVkRm9ybSIsImdldEZvcm1SZWZGdW5jIiwiZ2V0Rm9ybSIsImNvbXB1dGVkSXNFZGl0YWJsZSIsImVkaXRpbmdVcGRhdGUiLCJvblN1Ym1pdCIsInNhdmUiLCJvbkNhbmNlbCIsImlzQ2hhbmdlZCIsImVkaXQiLCJpbnB1dENvbXBvbmVudCIsImlzRWRpdGluZyIsImFjdGl2ZVRyaWdnZXIiLCJtZXRob2RzIiwiJHJlZnMiLCJ0YXJnZXRJbnB1dFJlZiIsIl9fcHJvcHMiLCJfX2VtaXQiLCJkb1N1Ym1pdCIsImRvQ2FuY2VsIiwiZ2V0VmFsaWRhdGVFcnJvck1lc3NhZ2UiLCJfc2ZjX21haW4kaiIsInNvcnRBcnIiLCJzb3J0ZWRCdXR0b25zIiwiU2V0Rm9ybURhdGFPcHRpb25zIiwiQ29sdW1uc0ZpbHRlclByb3ZpZGVLZXkiLCJ0cmFuc2Zvcm1Db2x1bW5zVHJlZSIsImN1cnJlbnRDb2x1bW5zIiwib3JpZ2luYWxDb2x1bW5zTWFwIiwiX3RleHQiLCJidWlsZENvbHVtbkZpbHRlckl0ZW0iLCJ0cmFuc2Zvcm1Ub1RhYmxlQ29sdW1ucyIsInNldEN1cnJlbnRWYWx1ZSIsImRvX3NhdmUiLCJjbGVhclRoaXNTdG9yYWdlIiwibm9TYXZlIiwic2F2ZU9wdGlvbnNUb1N0b3JhZ2UiLCJkb0VtaXQiLCJjb21wdXRlZE9yaWdpbmFsQ29sdW1ucyIsInNpbXBsZVN1Ym1pdCIsInNpbXBsZVJlc2V0Iiwic3RvcmFnZVRhYmxlU3RvcmUiLCJnZXRTdG9yYWdlVGFibGUiLCJyZW1vdGVTdG9yYWdlIiwicm91dGUiLCJ1c2VSb3V0ZSIsInN0b3JlZE9wdGlvbnMiLCJnZXRPcHRpb25zRnJvbVN0b3JhZ2UiLCJnZXRDb2x1bW5zSGFzaCIsImhhc2giLCJpbml0Iiwic3RvcmVIYXNoIiwidXBkYXRlIiwiY2hhbmdlIiwiX19leHBvc2UiLCJidWlsZFRleHQiLCJlbGVtZW50IiwiX3NmY19tYWluJGgiLCJGc1RhYmxlQ29sdW1uc0ZpbHRlciIsImNvbHVtbnNGaWx0ZXJSZWYiLCJkZWZhdWx0QnV0dG9ucyIsImRlZmF1bHRCdXR0b25zS2V5IiwicG9wb3ZlclZpc2libGUiLCJvd25LZXlzIiwiZW51bWVyYWJsZU9ubHkiLCJzeW1ib2xzIiwic3ltIiwiX29iamVjdFNwcmVhZDIiLCJfZGVmaW5lUHJvcGVydHkiLCJfdHlwZW9mIiwiX29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzTG9vc2UiLCJleGNsdWRlZCIsInNvdXJjZUtleXMiLCJfb2JqZWN0V2l0aG91dFByb3BlcnRpZXMiLCJzb3VyY2VTeW1ib2xLZXlzIiwidmVyc2lvbiIsInVzZXJBZ2VudCIsIklFMTFPckxlc3MiLCJFZGdlIiwiRmlyZUZveCIsIlNhZmFyaSIsIklPUyIsIkNocm9tZUZvckFuZHJvaWQiLCJjYXB0dXJlTW9kZSIsIm9mZiIsIm1hdGNoZXMiLCJzZWxlY3RvciIsImdldFBhcmVudE9ySG9zdCIsImNsb3Nlc3QiLCJpbmNsdWRlQ1RYIiwiUl9TUEFDRSIsInRvZ2dsZUNsYXNzIiwic3RhdGUiLCJjc3MiLCJzdHlsZSIsIm1hdHJpeCIsInNlbGZPbmx5IiwiYXBwbGllZFRyYW5zZm9ybXMiLCJtYXRyaXhGbiIsImZpbmQiLCJ0YWdOYW1lIiwiaXRlcmF0b3IiLCJnZXRXaW5kb3dTY3JvbGxpbmdFbGVtZW50Iiwic2Nyb2xsaW5nRWxlbWVudCIsImdldFJlY3QiLCJyZWxhdGl2ZVRvQ29udGFpbmluZ0Jsb2NrIiwicmVsYXRpdmVUb05vblN0YXRpY1BhcmVudCIsInVuZG9TY2FsZSIsImVsUmVjdCIsImxlZnQiLCJib3R0b20iLCJyaWdodCIsImhlaWdodCIsIndpZHRoIiwiY29udGFpbmVyUmVjdCIsImVsTWF0cml4Iiwic2NhbGVYIiwic2NhbGVZIiwiaXNTY3JvbGxlZFBhc3QiLCJlbFNpZGUiLCJwYXJlbnRTaWRlIiwiZ2V0UGFyZW50QXV0b1Njcm9sbEVsZW1lbnQiLCJlbFNpZGVWYWwiLCJwYXJlbnRTaWRlVmFsIiwiZ2V0Q2hpbGQiLCJjaGlsZE51bSIsImluY2x1ZGVEcmFnRWwiLCJjdXJyZW50Q2hpbGQiLCJTb3J0YWJsZSIsImxhc3RDaGlsZCIsImxhc3QiLCJnZXRSZWxhdGl2ZVNjcm9sbE9mZnNldCIsIm9mZnNldExlZnQiLCJvZmZzZXRUb3AiLCJ3aW5TY3JvbGxlciIsImluZGV4T2ZPYmplY3QiLCJpbmNsdWRlU2VsZiIsImVsZW0iLCJnb3RTZWxmIiwiZWxlbUNTUyIsImV4dGVuZCIsImRzdCIsInNyYyIsImlzUmVjdEVxdWFsIiwicmVjdDEiLCJyZWN0MiIsIl90aHJvdHRsZVRpbWVvdXQiLCJ0aHJvdHRsZSIsIm1zIiwiY2FuY2VsVGhyb3R0bGUiLCJzY3JvbGxCeSIsInkiLCJQb2x5bWVyIiwiJCIsImV4cGFuZG8iLCJBbmltYXRpb25TdGF0ZU1hbmFnZXIiLCJhbmltYXRpb25TdGF0ZXMiLCJhbmltYXRpb25DYWxsYmFja0lkIiwiZnJvbVJlY3QiLCJjaGlsZE1hdHJpeCIsImFuaW1hdGluZyIsImFuaW1hdGlvblRpbWUiLCJ0aW1lIiwidG9SZWN0IiwicHJldkZyb21SZWN0IiwicHJldlRvUmVjdCIsImFuaW1hdGluZ1JlY3QiLCJ0YXJnZXRNYXRyaXgiLCJjYWxjdWxhdGVSZWFsVGltZSIsImN1cnJlbnRSZWN0IiwiZHVyYXRpb24iLCJ0cmFuc2xhdGVYIiwidHJhbnNsYXRlWSIsInJlcGFpbnQiLCJkZWZhdWx0cyIsIlBsdWdpbk1hbmFnZXIiLCJzb3J0YWJsZSIsImV2dCIsImV2ZW50TmFtZUdsb2JhbCIsInBsdWdpbk5hbWUiLCJpbml0aWFsaXplZCIsIm1vZGlmaWVkIiwiZXZlbnRQcm9wZXJ0aWVzIiwibW9kaWZpZWRWYWx1ZSIsImRpc3BhdGNoRXZlbnQiLCJfcmVmIiwicm9vdEVsIiwidGFyZ2V0RWwiLCJjbG9uZUVsIiwidG9FbCIsImZyb21FbCIsIm9sZEluZGV4IiwibmV3SW5kZXgiLCJvbGREcmFnZ2FibGVJbmRleCIsIm5ld0RyYWdnYWJsZUluZGV4Iiwib3JpZ2luYWxFdmVudCIsInB1dFNvcnRhYmxlIiwiZXh0cmFFdmVudFByb3BlcnRpZXMiLCJvbk5hbWUiLCJhbGxFdmVudFByb3BlcnRpZXMiLCJfZXhjbHVkZWQiLCJwbHVnaW5FdmVudCIsImRyYWdFbCIsInBhcmVudEVsIiwiZ2hvc3RFbCIsIm5leHRFbCIsImxhc3REb3duRWwiLCJjbG9uZUhpZGRlbiIsIm1vdmVkIiwiX2hpZGVHaG9zdEZvclRhcmdldCIsIl91bmhpZGVHaG9zdEZvclRhcmdldCIsIl9kaXNwYXRjaEV2ZW50IiwiYWN0aXZlR3JvdXAiLCJhd2FpdGluZ0RyYWdTdGFydGVkIiwiaWdub3JlTmV4dENsaWNrIiwic29ydGFibGVzIiwidGFwRXZ0IiwidG91Y2hFdnQiLCJsYXN0RHgiLCJsYXN0RHkiLCJ0YXBEaXN0YW5jZUxlZnQiLCJ0YXBEaXN0YW5jZVRvcCIsImxhc3RUYXJnZXQiLCJsYXN0RGlyZWN0aW9uIiwicGFzdEZpcnN0SW52ZXJ0VGhyZXNoIiwiaXNDaXJjdW1zdGFudGlhbEludmVydCIsInRhcmdldE1vdmVEaXN0YW5jZSIsImdob3N0UmVsYXRpdmVQYXJlbnQiLCJnaG9zdFJlbGF0aXZlUGFyZW50SW5pdGlhbFNjcm9sbCIsIl9zaWxlbnQiLCJzYXZlZElucHV0Q2hlY2tlZCIsImRvY3VtZW50RXhpc3RzIiwiUG9zaXRpb25HaG9zdEFic29sdXRlbHkiLCJDU1NGbG9hdFByb3BlcnR5Iiwic3VwcG9ydERyYWdnYWJsZSIsInN1cHBvcnRDc3NQb2ludGVyRXZlbnRzIiwiX2RldGVjdERpcmVjdGlvbiIsImVsQ1NTIiwiZWxXaWR0aCIsImNoaWxkMSIsImNoaWxkMiIsImZpcnN0Q2hpbGRDU1MiLCJzZWNvbmRDaGlsZENTUyIsImZpcnN0Q2hpbGRXaWR0aCIsInNlY29uZENoaWxkV2lkdGgiLCJ0b3VjaGluZ1NpZGVDaGlsZDIiLCJfZHJhZ0VsSW5Sb3dDb2x1bW4iLCJkcmFnUmVjdCIsInRhcmdldFJlY3QiLCJ2ZXJ0aWNhbCIsImRyYWdFbFMxT3BwIiwiZHJhZ0VsUzJPcHAiLCJkcmFnRWxPcHBMZW5ndGgiLCJ0YXJnZXRTMU9wcCIsInRhcmdldFMyT3BwIiwidGFyZ2V0T3BwTGVuZ3RoIiwiX2RldGVjdE5lYXJlc3RFbXB0eVNvcnRhYmxlIiwidGhyZXNob2xkIiwicmVjdCIsImluc2lkZUhvcml6b250YWxseSIsImluc2lkZVZlcnRpY2FsbHkiLCJfcHJlcGFyZUdyb3VwIiwidG9GbiIsInB1bGwiLCJ0byIsImZyb20iLCJzYW1lR3JvdXAiLCJvdGhlckdyb3VwIiwib3JpZ2luYWxHcm91cCIsIm5lYXJlc3RFbXB0eUluc2VydERldGVjdEV2ZW50IiwibmVhcmVzdCIsIl9jaGVja091dHNpZGVUYXJnZXRFbCIsImRhdGFUcmFuc2ZlciIsInByZXZlbnRPbkZpbHRlciIsInRvdWNoIiwib3JpZ2luYWxUYXJnZXQiLCJmaWx0ZXIiLCJfc2F2ZUlucHV0Q2hlY2tlZFN0YXRlIiwiY3JpdGVyaWEiLCJvd25lckRvY3VtZW50IiwiZHJhZ1N0YXJ0Rm4iLCJfZGlzYWJsZURyYWdnYWJsZSIsIl9uZXh0VGljayIsImZhbGxiYWNrIiwiaW5zZXJ0ZWQiLCJmYWxsYmFja1RvbGVyYW5jZSIsImZhbGxiYWNrT2Zmc2V0IiwiZ2hvc3RNYXRyaXgiLCJyZWxhdGl2ZVNjcm9sbE9mZnNldCIsImR4IiwiZHkiLCJjc3NNYXRyaXgiLCJyZXZlcnQiLCJhY3RpdmVTb3J0YWJsZSIsImlzT3duZXIiLCJjYW5Tb3J0IiwiZnJvbVNvcnRhYmxlIiwiY29tcGxldGVkRmlyZWQiLCJkcmFnT3ZlckV2ZW50IiwiZXh0cmEiLCJjb21wbGV0ZWQiLCJfb25Nb3ZlIiwiY2FwdHVyZSIsImluc2VydGlvbiIsImVsTGFzdENoaWxkIiwiX2dob3N0SXNMYXN0IiwiX2dob3N0SXNGaXJzdCIsImZpcnN0Q2hpbGQiLCJkaXJlY3Rpb24iLCJ0YXJnZXRCZWZvcmVGaXJzdFN3YXAiLCJkaWZmZXJlbnRMZXZlbCIsImRpZmZlcmVudFJvd0NvbCIsInNpZGUxIiwic2Nyb2xsZWRQYXN0VG9wIiwic2Nyb2xsQmVmb3JlIiwiX2dldFN3YXBEaXJlY3Rpb24iLCJzaWJsaW5nIiwiZHJhZ0luZGV4IiwibmV4dFNpYmxpbmciLCJtb3ZlVmVjdG9yIiwiX3Vuc2lsZW50IiwiX2NhbmNlbE5leHRUaWNrIiwiX2dsb2JhbERyYWdPdmVyIiwiX2dlbmVyYXRlSWQiLCJ1c2VBbmltYXRpb24iLCJpdGVtcyIsIndpbGxJbnNlcnRBZnRlciIsIm9uTW92ZUZuIiwicmV0VmFsIiwic3BhY2VyIiwic3dhcFRocmVzaG9sZCIsImludmVydGVkU3dhcFRocmVzaG9sZCIsImludmVydFN3YXAiLCJpc0xhc3RUYXJnZXQiLCJtb3VzZU9uQXhpcyIsInRhcmdldExlbmd0aCIsInRhcmdldFMxIiwidGFyZ2V0UzIiLCJpbnZlcnQiLCJfZ2V0SW5zZXJ0RGlyZWN0aW9uIiwic3VtIiwicm9vdCIsImlucHV0cyIsImlkeCIsImF1dG9TY3JvbGxzIiwic2Nyb2xsRWwiLCJzY3JvbGxSb290RWwiLCJzY3JvbGxpbmciLCJsYXN0QXV0b1Njcm9sbFgiLCJsYXN0QXV0b1Njcm9sbFkiLCJ0b3VjaEV2dCQxIiwicG9pbnRlckVsZW1DaGFuZ2VkSW50ZXJ2YWwiLCJBdXRvU2Nyb2xsUGx1Z2luIiwiQXV0b1Njcm9sbCIsIl9yZWYyIiwiY2xlYXJQb2ludGVyRWxlbUNoYW5nZWRJbnRlcnZhbCIsImNsZWFyQXV0b1Njcm9sbHMiLCJhdXRvU2Nyb2xsIiwib2dFbGVtU2Nyb2xsZXIiLCJuZXdFbGVtIiwiaXNGYWxsYmFjayIsInNlbnMiLCJzcGVlZCIsInNjcm9sbFRoaXNJbnN0YW5jZSIsInNjcm9sbEN1c3RvbUZuIiwibGF5ZXJzT3V0IiwiY3VycmVudFBhcmVudCIsImNhblNjcm9sbFgiLCJjYW5TY3JvbGxZIiwic2Nyb2xsV2lkdGgiLCJzY3JvbGxIZWlnaHQiLCJzY3JvbGxQb3NYIiwic2Nyb2xsUG9zWSIsInZ4IiwidnkiLCJzY3JvbGxPZmZzZXRZIiwic2Nyb2xsT2Zmc2V0WCIsImRyb3AiLCJkaXNwYXRjaFNvcnRhYmxlRXZlbnQiLCJoaWRlR2hvc3RGb3JUYXJnZXQiLCJ1bmhpZGVHaG9zdEZvclRhcmdldCIsInRvU29ydGFibGUiLCJSZXZlcnQiLCJfcmVmMyIsIlJlbW92ZSIsIl9yZWY0IiwicGFyZW50U29ydGFibGUiLCJfX2RlZlByb3AiLCJfX2RlZlByb3BzIiwiX19nZXRPd25Qcm9wRGVzY3MiLCJfX2dldE93blByb3BTeW1ib2xzIiwiX19oYXNPd25Qcm9wIiwiX19wcm9wSXNFbnVtIiwiX19kZWZOb3JtYWxQcm9wIiwiX19zcHJlYWRWYWx1ZXMiLCJfX3NwcmVhZFByb3BzIiwicmVtb3ZlTm9kZSIsImluc2VydE5vZGVBdCIsImZhdGhlck5vZGUiLCJwb3NpdGlvbiIsInJlZk5vZGUiLCJnZXRDb25zb2xlIiwiY29uc29sZSQxIiwiY2FjaGUiLCJjYW1lbGl6ZSIsIm1hbmFnZUFuZEVtaXQkMSIsImVtaXQkMSIsIm1hbmFnZSQxIiwiZXZlbnRIYW5kbGVyTmFtZXMiLCJldmVudHMyIiwiaXNSZWFkT25seSIsInRhZ3MiLCJpc0h0bWxUYWciLCJpc1RyYW5zaXRpb24iLCJpc0h0bWxBdHRyaWJ1dGUiLCJwcm9qZWN0IiwiZ2V0Q29tcG9uZW50QXR0cmlidXRlcyIsIiRhdHRycyIsImNvbXBvbmVudERhdGEiLCJhdHRyaWJ1dGVzIiwiY3JlYXRlU29ydGFibGVPcHRpb24iLCJjYWxsQmFja0J1aWxkZXIiLCJnZXRWYWxpZFNvcnRhYmxlRW50cmllcyIsImV2ZW50VHlwZSIsImV2ZW50QnVpbGRlciIsInZhbHVlMiIsImdldEh0bWxFbGVtZW50RnJvbU5vZGUiLCJhZGRDb250ZXh0IiwiZG9tRWxlbWVudCIsImdldENvbnRleHQiLCJDb21wb25lbnRTdHJ1Y3R1cmUiLCJoZWFkZXIiLCJkZWZhdWx0Tm9kZXMiLCJmb290ZXIiLCJyZWFsTGlzdCIsImgyIiwidGFnIiwiX2lzUm9vdENvbXBvbmVudCIsImRvbUluZGV4IiwiZG9tQ2hpbGRyZW4iLCJmaXJzdERvbUxpc3RFbGVtZW50IiwiaW5kZXhGaXJzdERvbUxpc3RFbGVtZW50IiwiZWxlbWVudDIiLCJnZXRTbG90Iiwic2xvdFZhbHVlIiwiY29tcHV0ZU5vZGVzIiwiZ2V0S2V5Iiwibm9ybWFsaXplZExpc3QiLCJnZXRSb290SW5mb3JtYXRpb24iLCJ0cmFuc2l0aW9uIiwiZXh0ZXJuYWxDb21wb25lbnQiLCJUcmFuc2l0aW9uR3JvdXAiLCJjb21wdXRlQ29tcG9uZW50U3RydWN0dXJlIiwiZXZ0TmFtZSIsImV2dERhdGEiLCJtYW5hZ2UiLCJvcmlnaW5hbEVsZW1lbnQiLCJtYW5hZ2VBbmRFbWl0IiwiZGVsZWdhdGVDYWxsQmFjayIsImRyYWdnaW5nRWxlbWVudCIsImRyYWdnYWJsZUNvbXBvbmVudCIsImNvbXBvbmVudFN0cnVjdHVyZSIsIiRlbCIsInNvcnRhYmxlT3B0aW9ucyIsInRhcmdldERvbUVsZW1lbnQiLCJpdGVtS2V5IiwibmV3T3B0aW9uVmFsdWUiLCJfc29ydGFibGUiLCJodG1FbGVtZW50Iiwib25MaXN0IiwibmV3TGlzdCIsInNwbGljZUxpc3QiLCJ1cGRhdGVQb3NpdGlvbiIsInJlbGF0ZWQiLCJkZXN0aW5hdGlvbiIsImFkZGVkIiwicmVtb3ZlZCIsInJlbGF0ZWRDb250ZXh0IiwiY3VycmVudERvbUluZGV4IiwiY3VycmVudEluZGV4IiwibW92ZSIsImZ1dHVyZUluZGV4IiwiZHJhZ2dlZENvbnRleHQiLCJzZW5kRXZlbnQiLCJfc2ZjX21haW4kZyIsIm9uRHJhZ2dhYmxlTW92ZSIsImRyYWdlZCIsInNvcnRlZCIsImxlZnRJbmRleCIsInJpZ2h0SW5kZXgiLCJtaW5Ob3RJbmRleCIsIm1heE5vdEluZGV4IiwiYnVpbGRVcGRhdGVLZXkiLCJ1cGRhdGVDaGVja2VkIiwidXBkYXRlQ2hpbGRyZW4iLCJ1cGRhdGVQYXJlbnQiLCJvbkNoZWNrQ2hhbmdlZCIsImZpeGVkQ2hhbmdlIiwiZHJhd2VyQmluZCIsImNoZWNrQWxsIiwib25DaGVja0FsbENoYW5nZSIsImNoZWNrQWxsQmluZCIsInNob3dMZW5ndGgiLCJhbGxMZW5ndGgiLCJpc0luZGV0ZXJtaW5hdGUiLCJhbGxDaGVja2VkVXBkYXRlIiwiX3NmY19tYWluJGQiLCJGc1NlYXJjaEJ1dHRvbnMiLCJ2YWxpZGF0ZWRGb3JtIiwic2VhcmNoQWZ0ZXJSZXNldCIsImF1dG9TZWFyY2giLCJkZWJvdW5jZSIsInZhbGlkYXRlT25DaGFuZ2UiLCJlYWNoIiwiX2NlbGxSZW5kZXIiLCJvbkZvcm1WYWxpZGF0ZWQiLCJzcGxpdEtleSIsInNwbGl0IiwiX29uVXBkYXRlTW9kZWxWYWx1ZSIsIm9uVmFsdWVDaGFuZ2VkIiwiX29uSW5wdXQiLCJvbklucHV0Iiwib25LZXl1cCIsImF1dG9TZWFyY2hUcmlnZ2VyIiwiZG9TZWFyY2giLCJkZWZhdWx0U2xvdCIsImJ1aWxkRmllbGRDb250ZXh0IiwiY29tcG9uZW50UmVuZGVyUmVmcyIsInNwbGl0ZWRLZXkiLCJydWxlUGF0aCIsInNlYXJjaEZvcm1SZWYiLCJnZXRDb21wb25lbnRSZW5kZXJSZWYiLCJkb1Jlc2V0IiwiZG9WYWxpZGF0ZSIsInNpbGVudCIsInZhbGlkYXRlV3JhcCIsInVuc2V0IiwiZGVmQnRuT3B0aW9ucyIsIl9jbGljayIsImluaXRBdXRvU2VhcmNoIiwid2FpdCIsImdldFZhbGlkYXRlZEZvcm0iLCJzZXRGb3JtIiwibmV3Rm9ybSIsImlucHV0RXZlbnREaXNhYmxlZCIsImRvQXV0b1NlYXJjaCIsImNoYW5nZUlucHV0RXZlbnREaXNhYmxlZCIsInZhbGlkYXRlT25DaGFuZ2VTaWxlbnQiLCJjb21wb25lbnRSZWYiLCJ2YWx1ZUNoYW5nZUNvbnRleHQiLCJpbW1lZGlhdGUiLCJjb21wdXRlZFJ1bGVzIiwiX3NmY19tYWluJGIiLCJjb21wdXRlZElzTXVsdGlMaW5lIiwiY29sdW1uc1Jvd1JlZiIsImNvbHVtbnNCb3hIZWlnaHRSZWYiLCJjb2x1bW5zTGlzdCIsImNvbHVtbnNMaW5lSGVpZ2h0UmVmIiwic2VhcmNoRXZlbnRDb250ZXh0UmVmIiwidG9nZ2xlQ29sbGFwc2UiLCJjb21wdXRlZENvbE5hbWUiLCJjb21wdXRlZENvbHVtbkJveEhlaWdodCIsIl9jb21wb25lbnRfZnNfc2VhcmNoX2J1dHRvbnMiLCJjb2xsYXBzZSIsIl9zZmNfbWFpbiRhIiwiY29sbGFwc2VCdXR0b24iLCJ1c2VBdHRycyIsImRlZmF1bHRPcHRpb24iLCJfX0RFRkFVTFRfXyIsIm9uVXBkYXRlQWN0aXZlS2V5IiwiX3NmY19tYWluJDgiLCJjb21wdXRlZFJhZGlvTmFtZSIsInVzZWREaWN0IiwiY29tcHV0ZWRPcHRpb25zIiwib3B0Iiwib3B0aW9uUHJvcHMiLCJwbGFjZWhvbGRlciIsInJlbmRlckxhYmVsIiwidHJhbnNmb3JtRGljdERhdGEiLCJjb21wdXRlZFBsYWNlaG9sZGVyIiwib25TZWxlY3RlZENoYW5nZSIsImRhdGFNYXAiLCJzZWxlY3RDb21wIiwiJGVtaXQiLCJvcHRpb25Db21wIiwiZ2V0SGFzaENvZGUiLCJjaHIiLCJidWlsZEFycmF5VmFsdWUiLCJ2YWx1ZUFyciIsIl9zZmNfbWFpbiQ3IiwiQ09MT1JfTElTVCIsIkVGRkVDVF9MSVNUIiwiZ2V0Q29sb3IiLCJzZXRDb2xvciIsInR5cGVLZXkiLCJjb2xvciIsImhhc2hjb2RlIiwiY29sb3JzIiwiZWZmZWN0cyIsImNvbXB1dGVkVmFsdWVJdGVtcyIsInZhbHVlUHJvcCIsImxhYmVsUHJvcCIsImNvbG9yZnVsT3B0aW9ucyIsIm5ld1ZhbHVlcyIsIl9zZmNfbWFpbiQ2IiwiY29tcHV0ZWRNdWx0aXBsZSIsInN1YiIsIkxhYmVscyIsIkluZGV4IiwiX3NmY19tYWluJDUiLCJkaWN0VXNlUmV0IiwiZmllbGROYW1lc0JpbmRlciIsIm9uU2VsZWN0Q2hhbmdlIiwic2VsZWN0ZWRPcHRpb25zIiwiX3NmY19tYWluJDQiLCJfc2ZjX21haW4kMyIsIl9zZmNfbWFpbiQyIiwiX3NmY19tYWluJDEiLCJ0cmVlUmVmIiwiX3VzZVNsb3RzIiwiZGljdFNlbGVjdFJlZiIsInZhbHVlc0Zvcm1hdFJlZiIsImRpYWxvZ09wZW4iLCJpbml0U2VsZWN0ZWRLZXlzIiwic2VsZWN0ZWRSb3dLZXlzIiwibXVsdGlwbGUiLCJ2YWx1ZVR5cGUiLCJvcGVuVGFibGVTZWxlY3QiLCJvcGVuT3B0aW9ucyIsImNydWRPcHRpb25zT3ZlcnJpZGUiLCJidWlsZE1lcmdlZENydWRPcHRpb25zIiwiYmVmb3JlT3BlbiIsImdldFNjb3BlQ29udGV4dCIsImNvbXB1dGVkVmFsdWVzRm9ybWF0IiwidmFsdWVzRm9ybWF0IiwiY29tcHV0ZWRTZWxlY3QiLCJ1cGRhdGVLZXkiLCJjbGVhcmFibGUiLCJidWlsZE11bHRpQmluZGluZyIsImNvbXB1dGVkRGlhbG9nQmluZGluZyIsImRpYWxvZyIsImJ1aWxkUHJvcHMiLCJ2aWV3TW9kZSIsImFwcGVuZEJ5VmFsdWVzIiwicmVmcmVzaGluZyIsInNlbGVjdGlvbk9wdGlvbnMiLCJidWlsZFNlbGVjdGlvbkNydWRPcHRpb25zIiwiY3Jvc3NQYWdlIiwic2VsZWN0T25DbGlja1JvdyIsImdldFBhZ2VEYXRhIiwib25TZWxlY3RlZEtleXNDaGFuZ2VkIiwib25SZWZyZXNoZWQiLCJzZXRTZWxlY3RlZFJvd3MiLCJnZXRCYXNlVGFibGVSZWYiLCJvbk9rIiwiZ2V0RGljdE1hcCIsIm9wZW5lZCIsInNjb3BlUmVmIiwiRmFzdENydWQiLCJjdXN0b21Db21wb25lbnRzIiwiY29tIiwicHJpbnRXYXJuaW5nTG9nZ2VyIiwiYnJvd3NlciIsInVhIiwiY3N2IiwiaWV2IiwiaWVvbGQiLCJ0cmlkZW50IiwicnYiLCJCT00iLCJjc3ZEYXRhIiwiZmlsZW5hbWUiLCJvV2luIiwibGluayIsIm5ld0xpbmUiLCJhcHBlbmRMaW5lIiwiY29udGVudCIsInNlcGFyYXRvciIsInF1b3RlZCIsImxpbmUiLCJkYXRhcyIsIm5vSGVhZGVyIiwiY29sdW1uT3JkZXIiLCJzZWxmIiwidmlldyIsIkJsb2JCdWlsZGVyIiwiZ2V0X2NsYXNzIiwiRmFrZUJsb2JCdWlsZGVyIiwiRmFrZUJsb2IiLCJlbmNvZGluZyIsIkZCQl9wcm90byIsIkZCX3Byb3RvIiwiRmlsZVJlYWRlclN5bmMiLCJGaWxlRXhjZXB0aW9uIiwiZmlsZV9leF9jb2RlcyIsImZpbGVfZXhfY29kZSIsInJlYWxfVVJMIiwicmVhbF9jcmVhdGVfb2JqZWN0X1VSTCIsInJlYWxfcmV2b2tlX29iamVjdF9VUkwiLCJVUkwiLCJidG9hIiwiYXRvYiIsIkFycmF5QnVmZmVyIiwiVWludDhBcnJheSIsImJsb2IiLCJkYXRhX1VSSV9oZWFkZXIiLCJvYmplY3RfVVJMIiwiYmIiLCJidWYiLCJidWZfbGVuIiwiZnIiLCJlbmQiLCJibG9iUGFydHMiLCJidWlsZGVyIiwiZyIsImdsb2JhbCIsImoiLCJtIiwiWExTWCIsImN1cnJlbnRfYW5zaSIsIlZBTElEX0FOU0kiLCJDUzJDUCIsInNldF9hbnNpIiwicmVzZXRfYW5zaSIsInNldF9jcCIsInJlc2V0X2NwIiwiY2hhcl9jb2RlcyIsInV0ZjE2bGVyZWFkIiwidXRmMTZiZXJlYWQiLCJkZWJvbSIsImMxIiwiYzIiLCJfZ2V0Y2hhciIsIl9nZXRhbnNpIiwiJGNwdGFibGUiLCJCYXNlNjRfbWFwIiwiQmFzZTY0X2VuY29kZSIsImMzIiwiZTEiLCJlMiIsImUzIiwiZTQiLCJCYXNlNjRfZGVjb2RlIiwiaGFzX2J1ZiIsIkJ1ZmZlcl9mcm9tIiwibmJmcyIsImVuYyIsIm5ld19yYXdfYnVmIiwibmV3X3Vuc2FmZV9idWYiLCJzMmEiLCJzMmFiIiwiYTJzIiwiYTJ1IiwiYWIyYSIsImJjb25jYXQiLCJidWZzIiwibWF4bGVuIiwidXRmOGRlY29kZSIsIm91dCIsIndpZHgiLCJMIiwicmlkeCIsImNocjAiLCJjaHIxIiwiX3N0cnJldiIsInBhZDAiLCJmaWxsIiwicGFkXyIsInJwYWRfIiwicGFkMHIxIiwicGFkMHIyIiwicDJfMzIiLCJwYWQwciIsIlNTRl9pc2dlbmVyYWwiLCJkYXlzIiwibW9udGhzIiwiU1NGX2luaXRfdGFibGUiLCJ0YWJsZV9mbXQiLCJTU0ZfZGVmYXVsdF9tYXAiLCJTU0ZfZGVmYXVsdF9zdHIiLCJTU0ZfZnJhYyIsIkQiLCJtaXhlZCIsInNnbiIsIkIiLCJQXzIiLCJQXzEiLCJQIiwiUV8yIiwiUV8xIiwiUSIsIkEiLCJxIiwiU1NGX3BhcnNlX2RhdGVfY29kZSIsImIyIiwiZG93IiwiZG91dCIsIlNTRl9maXhfaGlqcmkiLCJTU0ZiYXNlZGF0ZSIsIlNTRmRudGhyZXNoIiwiU1NGYmFzZTE5MDQiLCJkYXRlbnVtX2xvY2FsIiwiZGF0ZTE5MDQiLCJlcG9jaCIsIlNTRl9zdHJpcF9kZWNpbWFsIiwiU1NGX25vcm1hbGl6ZV9leHAiLCJTU0Zfc21hbGxfZXhwIiwidyIsIlNTRl9sYXJnZV9leHAiLCJTU0ZfZ2VuZXJhbF9udW0iLCJWIiwiU1NGX2dlbmVyYWwiLCJTU0ZfZm9ybWF0IiwiU1NGX3dyaXRlX2RhdGUiLCJmbXQiLCJzczAiLCJzcyIsInR0Iiwib3V0bCIsIm91dHN0ciIsImNvbW1haWZ5IiwicGN0MSIsIndyaXRlX251bV9wY3QiLCJzZm10IiwibXVsIiwid3JpdGVfbnVtIiwid3JpdGVfbnVtX2NtIiwid3JpdGVfbnVtX2V4cCIsInBlcmlvZCIsImVlIiwiZmFrZWUiLCIkJCIsIiQxIiwiJDIiLCIkMyIsImZyYWMxIiwid3JpdGVfbnVtX2YxIiwiYXZhbCIsInNpZ24iLCJkZW4iLCJyciIsIm15biIsIm15ZCIsIndyaXRlX251bV9mMiIsImRlYzEiLCJjbG9zZXBhcmVuIiwicGhvbmUiLCJoYXNocSIsImNjIiwicm5kIiwiZGQiLCJkZWMiLCJfZnJhYyIsImNhcnJ5IiwiZmxyIiwid3JpdGVfbnVtX2ZsdCIsImZmbXQiLCJyaSIsImZmIiwib2EiLCJscmVzIiwicnJlcyIsIndyaXRlX251bV9jbTIiLCJ3cml0ZV9udW1fcGN0MiIsIndyaXRlX251bV9leHAyIiwid3JpdGVfbnVtX2ludCIsIlNTRl9zcGxpdF9mbXQiLCJpbl9zdHIiLCJTU0ZfYWJzdGltZSIsImZtdF9pc19kYXRlIiwiZXZhbF9mbXQiLCJmbGVuIiwibHN0IiwiaHIiLCJidCIsInNzbSIsIm5zdHIiLCJqaiIsInZ2IiwibXl2Iiwib3N0ciIsImRlY3B0IiwibGFzdGkiLCJyZXR2YWwiLCJjZnJlZ2V4MiIsImNoa2NvbmQiLCJ0aHJlc2giLCJjaG9vc2VfZm10IiwibGF0IiwibTEiLCJtMiIsIlNTRl9sb2FkIiwiU1NGX2xvYWRfdGFibGUiLCJ0YmwiLCJtYWtlX3NzZiIsIlNTRiIsIlNTRkltcGxpY2l0IiwiZGF0ZU5GcmVnZXgiLCJkYXRlTkZfcmVnZXgiLCJkYXRlTkYiLCJkYXRlTkZfZml4IiwiSCIsIk0iLCJTIiwiZGF0ZXN0ciIsInRpbWVzdHIiLCJDUkMzMiIsInNpZ25lZF9jcmNfdGFibGUiLCJUMCIsInNsaWNlX2J5XzE2X3RhYmxlcyIsIlQiLCJUVCIsIlQxIiwiVDIiLCJUMyIsIlQ0IiwiVDUiLCJUNiIsIlQ3IiwiVDgiLCJUOSIsIlRhIiwiVGIiLCJUYyIsIlRkIiwiVGUiLCJUZiIsImNyYzMyX2JzdHIiLCJic3RyIiwiQyIsImNyYzMyX2J1ZiIsImNyYzMyX3N0ciIsIkNGQiIsImV4cG9ydHMiLCJuYW1lY21wIiwiUiIsImRpcm5hbWUiLCJ3cml0ZV9kb3NfZGF0ZSIsImhtcyIsInltZCIsInBhcnNlX2Rvc19kYXRlIiwicGFyc2VfZXh0cmFfZmllbGQiLCJwcmVwX2Jsb2IiLCJmbGFncyIsInN6IiwidGd0IiwiZnMiLCJnZXRfZnMiLCJwYXJzZSIsImZpbGUiLCJwYXJzZV96aXAiLCJwYXJzZV9tYWQiLCJtdmVyIiwic3N6Iiwibm1mcyIsImRpZmF0X3NlY19jbnQiLCJkaXJfc3RhcnQiLCJtaW5pZmF0X3N0YXJ0IiwiZGlmYXRfc3RhcnQiLCJmYXRfYWRkcnMiLCJtdiIsImNoZWNrX2dldF9tdmVyIiwiY2hlY2tfc2hpZnRzIiwiZGlyX2NudCIsInNlY3RvcnMiLCJzZWN0b3JpZnkiLCJzbGV1dGhfZmF0Iiwic2VjdG9yX2xpc3QiLCJtYWtlX3NlY3Rvcl9saXN0IiwiRU5ET0ZDSEFJTiIsImZpbGVzIiwiUGF0aHMiLCJGaWxlSW5kZXgiLCJGdWxsUGF0aHMiLCJyZWFkX2RpcmVjdG9yeSIsImJ1aWxkX2Z1bGxfcGF0aHMiLCJIRUFERVJfU0lHTkFUVVJFIiwic2hpZnQiLCJuc2VjdG9ycyIsIkZJIiwiRlAiLCJwbCIsImRhZCIsImdldF9tZmF0X2VudHJ5IiwicGF5bG9hZCIsIm1pbmkiLCJNU1NaIiwiX19yZWFkSW50MzJMRSIsIm5ld19idWYiLCJjbnQiLCJzZWN0b3IiLCJnZXRfc2VjdG9yX2xpc3QiLCJjaGtkIiwiYnVmX2NoYWluIiwibW9kdWx1cyIsImFkZHIiLCJfX3RvQnVmZmVyIiwic2wiLCJzZWVuIiwibWluaWZhdF9zdG9yZSIsIm5hbWVsZW4iLCJfX3V0ZjE2bGUiLCJjdGltZSIsInJlYWRfZGF0ZSIsIm10aW1lIiwib2Zmc2V0IiwiX19yZWFkVUludDMyTEUiLCJyZWFkX2ZpbGUiLCJyZWFkIiwiaW5pdF9jZmIiLCJjZmIiLCJzZWVkX2NmYiIsIm5tIiwicmVidWlsZF9jZmIiLCJnYyIsIl9maWxlIiwibm93IiwiZnVsbFBhdGhzIiwiSEVBREVSX0NMU0lEIiwiZWx0IiwiX3dyaXRlIiwiX29wdHMiLCJ3cml0ZV9tYWQiLCJ3cml0ZV96aXAiLCJtaW5pX3NpemUiLCJmYXRfc2l6ZSIsIm1pbmlfY250IiwibWZhdF9jbnQiLCJmYXRfYmFzZSIsImZhdF9jbnQiLCJkaWZhdF9jbnQiLCJIRUFERVJfU0lHIiwiY2hhaW5pdCIsImNvbnN0cyIsIl9ubSIsIlVDRnVsbFBhdGhzIiwiVUNQYXRocyIsIlVDUGF0aCIsIndyaXRlX2ZpbGUiLCJ3cml0ZSIsIl96bGliIiwidXNlX3psaWIiLCJ6bGliIiwiSW5mbGF0ZVJhdyIsIkluZmxSYXciLCJfaW5mbGF0ZVJhd1N5bmMiLCJ1c3oiLCJfaW5mbGF0ZSIsIl9kZWZsYXRlUmF3U3luYyIsIl9kZWZsYXRlIiwiQ0xFTl9PUkRFUiIsIkxFTl9MTiIsIkRTVF9MTiIsImJpdF9zd2FwXzgiLCJ1c2VfdHlwZWRfYXJyYXlzIiwiYml0c3dhcDgiLCJiaXRfc3dhcF9uIiwicmV2IiwicmVhZF9iaXRzXzIiLCJibCIsInJlYWRfYml0c18zIiwicmVhZF9iaXRzXzQiLCJyZWFkX2JpdHNfNSIsInJlYWRfYml0c183IiwicmVhZF9iaXRzX24iLCJ3cml0ZV9iaXRzXzMiLCJ3cml0ZV9iaXRzXzEiLCJ3cml0ZV9iaXRzXzgiLCJ3cml0ZV9iaXRzXzE2IiwicmVhbGxvYyIsInplcm9fZmlsbF9hcnJheSIsImJ1aWxkX3RyZWUiLCJjbGVucyIsImNtYXAiLCJNQVgiLCJjY29kZSIsImJsX2NvdW50IiwiY3RyZWUiLCJjbGVuaSIsImZpeF9sbWFwIiwiZml4X2RtYXAiLCJkbGVucyIsIl9kZWZsYXRlUmF3IiwiRFNUX0xOX1JFIiwiTEVOX0xOX1JFIiwid3JpdGVfc3RvcmVkIiwiYm9mZiIsIndyaXRlX2h1ZmZfZml4ZWQiLCJhZGRycyIsIm1sZW4iLCJsZW5fZWIiLCJkc3RfZWIiLCJkeW5fbG1hcCIsImR5bl9kbWFwIiwiZHluX2NtYXAiLCJkeW5fbGVuXzEiLCJkeW5fbGVuXzIiLCJkeW4iLCJfSExJVCIsIl9IRElTVCIsIl9IQ0xFTiIsIm5leHRfY29kZSIsImhjb2RlcyIsImgxIiwiaW5mbGF0ZSIsIm91dGJ1ZiIsIndvZmYiLCJPTCIsIm1heF9sZW5fMSIsIm1heF9sZW5fMiIsImJpdHMiLCJ3YXJuX29yX3Rocm93Iiwid3JuIiwiZmNudCIsInN0YXJ0X2NkIiwiY3N6IiwiZWZzeiIsImZjc3oiLCJFRiIsInBhcnNlX2xvY2FsX2ZpbGUiLCJtZXRoIiwiY3JjMzIiLCJfY3N6IiwiX3VzeiIsImVmIiwiY2ZiX2FkZCIsImNkaXJzIiwiZnAiLCJmaSIsImNyY3MiLCJzel9jZCIsIm5hbWVidWYiLCJDb250ZW50VHlwZU1hcCIsImdldF9jb250ZW50X3R5cGUiLCJleHQiLCJ3cml0ZV9iYXNlNjRfNzYiLCJ3cml0ZV9xdW90ZWRfcHJpbnRhYmxlIiwiZW5jb2RlZCIsInNpIiwicGFyc2VfcXVvdGVkX3ByaW50YWJsZSIsImRpIiwib2kiLCJwYXJzZV9taW1lIiwiZm5hbWUiLCJjdGUiLCJjdHlwZSIsImZkYXRhIiwibWJvdW5kYXJ5IiwiYm91bmRhcnkiLCJzdGFydF9kaSIsImNhIiwiY3N0ciIsImRpc3BjbnQiLCJjc2wiLCJxcCIsImNmYl9uZXciLCJ1bnNhZmUiLCJmcGF0aCIsImNmYl9kZWwiLCJjZmJfbW92Iiwib2xkX25hbWUiLCJuZXdfbmFtZSIsImNmYl9nYyIsIlJlYWRTaGlmdCIsIkNoZWNrRmllbGQiLCJibG9iaWZ5Iiwid3JpdGVfZGwiLCJ1dGY4d3JpdGUiLCJyZWFkX2JpbmFyeSIsImluZmlsZSIsImtzIiwibzIiLCJldmVydF9rZXkiLCJLIiwiZXZlcnQiLCJldmVydF9udW0iLCJldmVydF9hcnIiLCJiYXNlZGF0ZSIsImRhdGVudW0iLCJkbnRocmVzaCIsInJlZmRhdGUiLCJyZWZvZmZzZXQiLCJudW1kYXRlIiwicGFyc2VfaXNvZHVyIiwic2VjIiwibXQiLCJnb29kX3BkX2RhdGVfMSIsImdvb2RfcGRfZGF0ZSIsImdvb2RfcGQiLCJwYXJzZURhdGUiLCJmaXhkYXRlIiwiY2Myc3RyIiwiZGVib21pdCIsImR1cCIsImZ1enp5bnVtIiwid3QiLCJsb3dlcl9tb250aHMiLCJmdXp6eWRhdGUiLCJsb3dlciIsInNwbGl0X3JlZ2V4Iiwic2FmZV9zcGxpdF9yZWdleCIsInJlIiwiZ2V0ZGF0YXN0ciIsImdldGRhdGFiaW4iLCJnZXRkYXRhIiwic2FmZWdldHppcGZpbGUiLCJ6aXAiLCJnZXR6aXBmaWxlIiwiZ2V0emlwZGF0YSIsInNhZmUiLCJnZXR6aXBzdHIiLCJnZXR6aXBiaW4iLCJ6aXBlbnRyaWVzIiwiemlwX2FkZF9maWxlIiwiemlwX25ldyIsInppcF9yZWFkIiwicmVzb2x2ZV9wYXRoIiwic3RlcCIsIlhNTF9IRUFERVIiLCJhdHRyZWdleGciLCJ0YWdyZWdleDEiLCJ0YWdyZWdleDIiLCJ0YWdyZWdleCIsIm5zcmVnZXgiLCJuc3JlZ2V4MiIsInBhcnNleG1sdGFnIiwic2tpcF9yb290Iiwic2tpcF9MQyIsImVxIiwicXVvdCIsInN0cmlwX25zIiwiZW5jb2RpbmdzIiwicmVuY29kaW5nIiwidW5lc2NhcGV4bWwiLCJlbmNyZWdleCIsImNvZGVyZWdleCIsImRlY3JlZ2V4IiwiY2hhcmVnZXgiLCJlc2NhcGV4bWwiLCJlc2NhcGV4bWx0YWciLCJodG1sY2hhcmVnZXgiLCJlc2NhcGVodG1sIiwiZXNjYXBleGxtbCIsInhsbWxfZml4c3RyIiwiZW50cmVnZXgiLCJlbnRyZXBsIiwieGxtbF91bmZpeHN0ciIsInBhcnNleG1sYm9vbCIsInV0ZjhyZWFkYSIsIm9yaWciLCJ1dGY4cmVhZGIiLCJ3dyIsInV0ZjhyZWFkYyIsInV0Zjhjb3JwdXMiLCJ1dGY4cmVhZCIsIm1hdGNodGFnIiwibXRjYWNoZSIsImh0bWxkZWNvZGUiLCJlbnRpdGllcyIsInZ0cmVnZXgiLCJ2dF9jYWNoZSIsInZ0dnJlZ2V4IiwidnRtcmVnZXgiLCJwYXJzZVZlY3RvciIsInd0cmVnZXgiLCJ3cml0ZXRhZyIsInd4dF9oZWxwZXIiLCJ3cml0ZXh0YWciLCJ3cml0ZV93M2NkdGYiLCJ3cml0ZV92dCIsInhsc3giLCJ4bG1sX25vcm1hbGl6ZSIsInhsbWxyZWdleCIsIlhNTE5TIiwiWE1MTlNfbWFpbiIsIlhMTUxOUyIsInJlYWRfZG91YmxlX2xlIiwid3JpdGVfZG91YmxlX2xlIiwiYnMiLCJhdiIsIl9fX3RvQnVmZmVyIiwiX19fdXRmMTZsZSIsIl9fcmVhZFVJbnQxNkxFIiwiX19faGV4bGlmeSIsIl9faGV4bGlmeSIsIl9fX3V0ZjgiLCJfX3JlYWRVSW50OCIsIl9fdXRmOCIsIl9fX2xwc3RyIiwiX19scHN0ciIsIl9fX2Nwc3RyIiwiX19jcHN0ciIsIl9fX2xwd3N0ciIsIl9fbHB3c3RyIiwiX19fbHBwNCIsIl9fbHBwNCIsIl9fXzhscHA0IiwiX184bHBwNCIsIl9fX2RvdWJsZSIsIl9fZG91YmxlIiwiaXNfYnVmIiwiX19yZWFkSW50MTZMRSIsIl9fcmVhZEludDMyQkUiLCJvSSIsIm9SIiwib28iLCJsb2MiLCJfX3dyaXRlVUludDMyTEUiLCJfX3dyaXRlSW50MzJMRSIsIl9fd3JpdGVVSW50MTZMRSIsIldyaXRlU2hpZnQiLCJoZXhzdHIiLCJmbGQiLCJwb3MiLCJwYXJzZW5vb3AiLCJyZWNvcmRob3BwZXIiLCJ0bXBieXRlIiwiY250Ynl0ZSIsIlJUIiwiWExTQlJlY29yZEVudW0iLCJidWZfYXJyYXkiLCJibGtzeiIsIm5ld2JsayIsImN1cmJ1ZiIsImVuZGJ1ZiIsIndyaXRlX3JlY29yZCIsImJhIiwic2hpZnRfY2VsbF94bHMiLCJzaGlmdF9yYW5nZV94bHMiLCJlbmNvZGVfY2VsbF94bHMiLCJiaWZmIiwiZW5jb2RlX2NlbGwiLCJmaXhfY29sIiwiZml4X3JvdyIsImVuY29kZV9yYW5nZV94bHMiLCJlbmNvZGVfY29sIiwiZW5jb2RlX3JvdyIsImRlY29kZV9yb3ciLCJyb3dzdHIiLCJ1bmZpeF9yb3ciLCJkZWNvZGVfY29sIiwiY29sc3RyIiwidW5maXhfY29sIiwic3BsaXRfY2VsbCIsImRlY29kZV9jZWxsIiwiZGVjb2RlX3JhbmdlIiwiZW5jb2RlX3JhbmdlIiwiY3MiLCJjZSIsInNhZmVfZGVjb2RlX3JhbmdlIiwic2FmZV9mb3JtYXRfY2VsbCIsImZvcm1hdF9jZWxsIiwiQkVyciIsInNoZWV0X3RvX3dvcmtib29rIiwic2hlZXQiLCJzaGVldHMiLCJzaGVldF9hZGRfYW9hIiwiX3dzIiwiZGVuc2UiLCJ3cyIsIl9SIiwiX0MiLCJfb3JpZ2luIiwiX3JhbmdlIiwiX19SIiwiX19DIiwiY2VsbF9yZWYiLCJhb2FfdG9fc2hlZXQiLCJwYXJzZV9JbnQzMkxFIiwid3JpdGVfVUludDMyTEUiLCJwYXJzZV9YTFdpZGVTdHJpbmciLCJjY2hDaGFyYWN0ZXJzIiwid3JpdGVfWExXaWRlU3RyaW5nIiwiX251bGwiLCJwYXJzZV9TdHJSdW4iLCJ3cml0ZV9TdHJSdW4iLCJydW4iLCJwYXJzZV9SaWNoU3RyIiwicmdzU3RyUnVuIiwiZHdTaXplU3RyUnVuIiwid3JpdGVfUmljaFN0ciIsInBhcnNlX0JydENvbW1lbnRUZXh0Iiwid3JpdGVfQnJ0Q29tbWVudFRleHQiLCJwYXJzZV9YTFNCQ2VsbCIsImlTdHlsZVJlZiIsIndyaXRlX1hMU0JDZWxsIiwicGFyc2VfWExTQlNob3J0Q2VsbCIsIndyaXRlX1hMU0JTaG9ydENlbGwiLCJwYXJzZV9YTFNCQ29kZU5hbWUiLCJ3cml0ZV9YTFNCQ29kZU5hbWUiLCJwYXJzZV9YTE51bGxhYmxlV2lkZVN0cmluZyIsIndyaXRlX1hMTnVsbGFibGVXaWRlU3RyaW5nIiwicGFyc2VfWExOYW1lV2lkZVN0cmluZyIsInBhcnNlX1JlbElEIiwid3JpdGVfUmVsSUQiLCJwYXJzZV9Sa051bWJlciIsImZYMTAwIiwiZkludCIsIlJLIiwid3JpdGVfUmtOdW1iZXIiLCJkMTAwIiwicGFyc2VfUmZYIiwid3JpdGVfUmZYIiwicGFyc2VfVW5jaGVja2VkUmZYIiwid3JpdGVfVW5jaGVja2VkUmZYIiwicGFyc2VfWG51bSIsIndyaXRlX1hudW0iLCJwYXJzZV9CcnRDb2xvciIsInhDb2xvclR5cGUiLCJuVFMiLCJiUiIsImJHIiwiYkIiLCJpY3YiLCJYTFNJY3YiLCJyZ2IySGV4Iiwid3JpdGVfQnJ0Q29sb3IiLCJyZ2IiLCJwYXJzZV9Gb250RmxhZ3MiLCJ3cml0ZV9Gb250RmxhZ3MiLCJmb250IiwiZ3JiaXQiLCJwYXJzZV9DbGlwYm9hcmRGb3JtYXRPclN0cmluZyIsIkNsaXBGbXQiLCJwYXJzZV9DbGlwYm9hcmRGb3JtYXRPckFuc2lTdHJpbmciLCJwYXJzZV9DbGlwYm9hcmRGb3JtYXRPclVuaWNvZGVTdHJpbmciLCJWVF9JMiIsIlZUX0k0IiwiVlRfQk9PTCIsIlZUX1ZBUklBTlQiLCJWVF9VSTQiLCJWVF9GSUxFVElNRSIsIlZUX0JMT0IiLCJWVF9DRiIsIlZUX1ZFQ1RPUl9WQVJJQU5UIiwiVlRfVkVDVE9SX0xQU1RSIiwiVlRfU1RSSU5HIiwiVlRfVVNUUiIsIlZUX0NVU1RPTSIsIkRvY1N1bW1hcnlQSUREU0kiLCJTdW1tYXJ5UElEU0kiLCJDb3VudHJ5RW51bSIsIlhMU0ZpbGxQYXR0ZXJuIiwicmdiaWZ5IiwiX1hMU0ljdiIsIlJCRXJyIiwiY3QydHlwZSIsIkNUX0xJU1QiLCJuZXdfY3QiLCJwYXJzZV9jdCIsImN0ZXh0Iiwid3JpdGVfY3QiLCJ0eXBlMmN0IiwiZjEiLCJmMiIsImYzIiwiUkVMUyIsImdldF9yZWxzX3BhdGgiLCJwYXJzZV9yZWxzIiwiY3VycmVudEZpbGVQYXRoIiwicmVscyIsInJlbCIsImNhbm9uaWN0YXJnZXQiLCJ3cml0ZV9yZWxzIiwicmlkIiwiYWRkX3JlbHMiLCJySWQiLCJyZWxvYmoiLCJ0YXJnZXRtb2RlIiwiQ1RfT0RTIiwicGFyc2VfbWFuaWZlc3QiLCJSbiIsIkZFdGFnIiwid3JpdGVfbWFuaWZlc3QiLCJtYW5pZmVzdCIsIndyaXRlX3JkZl90eXBlIiwid3JpdGVfcmRmX2hhcyIsIndyaXRlX3JkZiIsInJkZiIsIndyaXRlX21ldGFfb2RzIiwiQ09SRV9QUk9QUyIsIkNPUkVfUFJPUFNfUkVHRVgiLCJwYXJzZV9jb3JlX3Byb3BzIiwiY3VyIiwiY3BfZG9pdCIsIndyaXRlX2NvcmVfcHJvcHMiLCJFWFRfUFJPUFMiLCJQc2V1ZG9Qcm9wc1BhaXJzIiwibG9hZF9wcm9wc19wYWlycyIsIkhQIiwiVE9QIiwiaHAiLCJwYXJ0cyIsInBhcnNlX2V4dF9wcm9wcyIsInhtbCIsIndyaXRlX2V4dF9wcm9wcyIsIlciLCJjdXN0cmVnZXgiLCJwYXJzZV9jdXN0X3Byb3BzIiwidG9rcyIsIndyaXRlX2N1c3RfcHJvcHMiLCJwaWQiLCJYTE1MRG9jUHJvcHNNYXAiLCJldmVydF9YTE1MRFBNIiwieGxtbF9zZXRfcHJvcCIsIlByb3BzIiwieGxtbF93cml0ZV9kb2Nwcm9wcyIsInhsbWxfd3JpdGVfY3VzdHByb3BzIiwiQ3VzdHByb3BzIiwiQkxBQ0tMSVNUIiwicGFyc2VfRklMRVRJTUUiLCJkd0xvd0RhdGVUaW1lIiwiZHdIaWdoRGF0ZVRpbWUiLCJ3cml0ZV9GSUxFVElNRSIsInBhcnNlX2xwc3RyIiwicGFkIiwicGFyc2VfbHB3c3RyIiwicGFyc2VfVnRTdHJpbmdCYXNlIiwic3RyaW5nVHlwZSIsInBhcnNlX1Z0U3RyaW5nIiwicGFyc2VfVnRVbmFsaWduZWRTdHJpbmciLCJwYXJzZV9WdFZlY0xwd3N0clZhbHVlIiwicGFyc2VfVnRWZWNVbmFsaWduZWRMcHN0clZhbHVlIiwicGFyc2VfVnRIZWFkaW5nUGFpciIsImhlYWRpbmdTdHJpbmciLCJwYXJzZV9UeXBlZFByb3BlcnR5VmFsdWUiLCJoZWFkZXJQYXJ0cyIsInBhcnNlX1Z0VmVjSGVhZGluZ1BhaXJWYWx1ZSIsImNFbGVtZW50cyIsInBhcnNlX2RpY3Rpb25hcnkiLCJDb2RlUGFnZSIsInBhcnNlX0JMT0IiLCJieXRlcyIsInBhcnNlX0NsaXBib2FyZERhdGEiLCJ3cml0ZV9UeXBlZFByb3BlcnR5VmFsdWUiLCJwYXJzZV9Qcm9wZXJ0eVNldCIsIlBJRFNJIiwic3RhcnRfYWRkciIsIk51bVByb3BzIiwiRGljdGlvbmFyeSIsIkRpY3RPYmoiLCJQcm9wSUQiLCJPZmZzZXQiLCJQcm9wSCIsInBpZGRzaSIsIm9sZHBvcyIsInBhcnNlYm9vbCIsIlhMU1BTU2tpcCIsImd1ZXNzX3Byb3BlcnR5X3R5cGUiLCJ3cml0ZV9Qcm9wZXJ0eVNldCIsIlJFIiwiaGRyIiwicGlhbyIsInByIiwicGlvIiwicGluZm8iLCJwYXJzZV9Qcm9wZXJ0eVNldFN0cmVhbSIsImNsc2lkIiwiTnVtU2V0cyIsIkZNVElEMCIsIkZNVElEMSIsIk9mZnNldDAiLCJPZmZzZXQxIiwiU3lzdGVtSWRlbnRpZmllciIsIkNMU0lEIiwiUFNldDAiLCJydmFsIiwiUFNldDEiLCJ3cml0ZV9Qcm9wZXJ0eVNldFN0cmVhbSIsImVudHJpZXMyIiwiY2xzaWQyIiwicHMwIiwicHMxIiwicGFyc2Vub29wMiIsIndyaXRlemVyb2VzIiwicGFyc2x1cnAiLCJ3cml0ZWJvb2wiLCJwYXJzZXVpbnQxNiIsIndyaXRldWludDE2IiwicGFyc2V1aW50MTZhIiwicGFyc2VfQmVzIiwid3JpdGVfQmVzIiwicGFyc2VfU2hvcnRYTFVuaWNvZGVTdHJpbmciLCJjY2giLCJmSGlnaEJ5dGUiLCJwYXJzZV9YTFVuaWNvZGVSaWNoRXh0ZW5kZWRTdHJpbmciLCJmRXh0U3QiLCJmUmljaFN0IiwiY1J1biIsImNiRXh0UnN0Iiwid3JpdGVfWExVbmljb2RlUmljaEV4dGVuZGVkU3RyaW5nIiwieGxzdHIiLCJvdGV4dCIsInBhcnNlX1hMVW5pY29kZVN0cmluZ05vQ2NoIiwicGFyc2VfWExVbmljb2RlU3RyaW5nIiwicGFyc2VfWExVbmljb2RlU3RyaW5nMiIsIndyaXRlX1hMVW5pY29kZVN0cmluZyIsInBhcnNlX0NvbnRyb2xJbmZvIiwiYWNjZWwiLCJwYXJzZV9VUkxNb25pa2VyIiwicGFyc2VfRmlsZU1vbmlrZXIiLCJjQW50aSIsInByZWFtYmxlIiwiYW5zaVBhdGgiLCJ1bmljb2RlUGF0aCIsInBhcnNlX0h5cGVybGlua01vbmlrZXIiLCJwYXJzZV9IeXBlcmxpbmtTdHJpbmciLCJ3cml0ZV9IeXBlcmxpbmtTdHJpbmciLCJwYXJzZV9IeXBlcmxpbmsiLCJzVmVyIiwiZGlzcGxheU5hbWUiLCJ0YXJnZXRGcmFtZU5hbWUiLCJtb25pa2VyIiwib2xlTW9uaWtlciIsIkxvYyIsImd1aWQiLCJmaWxlVGltZSIsIndyaXRlX0h5cGVybGluayIsImhsIiwiVGFyZ2V0IiwiaGFzaGlkeCIsIkYiLCJQcmV0YXJnZXQiLCJwYXJzZV9Mb25nUkdCQSIsInBhcnNlX0xvbmdSR0IiLCJwYXJzZV9YTFNDZWxsIiwicnciLCJpeGZlIiwid3JpdGVfWExTQ2VsbCIsInBhcnNlX2ZydEhlYWRlciIsInJ0IiwicGFyc2VfT3B0WExVbmljb2RlU3RyaW5nIiwicGFyc2VfWFRJIiwiaVN1cEJvb2siLCJpdGFiRmlyc3QiLCJpdGFiTGFzdCIsInBhcnNlX1JrUmVjIiwicGFyc2VfQWRkaW5VZGYiLCJ1ZGZOYW1lIiwicGFyc2VfUmVmOFUiLCJyd0ZpcnN0IiwicndMYXN0IiwiY29sRmlyc3QiLCJjb2xMYXN0Iiwid3JpdGVfUmVmOFUiLCJwYXJzZV9SZWZVIiwicGFyc2VfUmVmIiwicGFyc2VfRnRDbW8iLCJvdCIsInBhcnNlX0Z0TnRzIiwicGFyc2VfRnRDZiIsInBhcnNlX0Z0U2tpcCIsIkZ0VGFiIiwicGFyc2VfRnRBcnJheSIsImZ0cyIsImZ0IiwicGFyc2VfQk9GIiwid3JpdGVfQk9GIiwid2IiLCJwYXJzZV9JbnRlcmZhY2VIZHIiLCJwYXJzZV9Xcml0ZUFjY2VzcyIsIlVzZXJOYW1lIiwid3JpdGVfV3JpdGVBY2Nlc3MiLCJiOCIsInBhcnNlX1dzQm9vbCIsInBhcnNlX0JvdW5kU2hlZXQ4IiwiaGlkZGVuIiwid3JpdGVfQm91bmRTaGVldDgiLCJwYXJzZV9TU1QiLCJ1Y250Iiwic3RycyIsIndyaXRlX1NTVCIsInNzdCIsInBhcnNlX0V4dFNTVCIsImV4dHNzdCIsInBhcnNlX1JvdyIsIm1peVJ3IiwicGFyc2VfRm9yY2VGdWxsQ2FsY3VsYXRpb24iLCJmdWxsY2FsYyIsInBhcnNlX1JlY2FsY0lkIiwicGFyc2VfRGVmYXVsdFJvd0hlaWdodCIsImZsIiwicGFyc2VfV2luZG93MSIsInhXbiIsInlXbiIsImR4V24iLCJkeVduIiwiaVRhYkN1ciIsImlUYWJGaXJzdCIsImN0YWJTZWwiLCJ3VGFiUmF0aW8iLCJ3cml0ZV9XaW5kb3cxIiwicGFyc2VfV2luZG93MiIsIndyaXRlX1dpbmRvdzIiLCJwYXJzZV9QYW5lIiwicGFyc2VfRm9udCIsIndyaXRlX0ZvbnQiLCJiNSIsInBhcnNlX0xhYmVsU3N0Iiwid3JpdGVfTGFiZWxTc3QiLCJvcyIsInBhcnNlX0xhYmVsIiwid3JpdGVfTGFiZWwiLCJwYXJzZV9Gb3JtYXQiLCJudW1GbXRJZCIsImZtdHN0ciIsIndyaXRlX0Zvcm1hdCIsInBhcnNlX0JJRkYyRm9ybWF0IiwicGFyc2VfRGltZW5zaW9ucyIsIndyaXRlX0RpbWVuc2lvbnMiLCJwYXJzZV9SSyIsInJrcmVjIiwicGFyc2VfTXVsUmsiLCJya3JlY3MiLCJsYXN0Y29sIiwicGFyc2VfTXVsQmxhbmsiLCJpeGZlcyIsInBhcnNlX0NlbGxTdHlsZVhGIiwicGFyc2VfWEYiLCJ3cml0ZV9YRiIsIml4ZmVQIiwicGFyc2VfR3V0cyIsIndyaXRlX0d1dHMiLCJndXRzIiwicGFyc2VfQm9vbEVyciIsIndyaXRlX0Jvb2xFcnIiLCJwYXJzZV9OdW1iZXIiLCJ4bnVtIiwid3JpdGVfTnVtYmVyIiwicGFyc2VfWExIZWFkZXJGb290ZXIiLCJwYXJzZV9TdXBCb29rIiwiY3RhYiIsInZpcnRQYXRoIiwicmdzdCIsInBhcnNlX0V4dGVybk5hbWUiLCJib2R5IiwiWExTTGJsQnVpbHRJbiIsInBhcnNlX0xibCIsImNoS2V5IiwiY2NlIiwiaXRhYiIsIm5wZmxlbiIsInJnY2UiLCJwYXJzZV9OYW1lUGFyc2VkRm9ybXVsYSIsInBhcnNlX0V4dGVyblNoZWV0IiwicGFyc2VfQklGRjVFeHRlcm5TaGVldCIsInBhcnNlX05hbWVDbXQiLCJjY2hOYW1lIiwiY2NoQ29tbWVudCIsImNvbW1lbnQiLCJwYXJzZV9TaHJGbWxhIiwiY1VzZSIsInBhcnNlX1NoYXJlZFBhcnNlZEZvcm11bGEiLCJwYXJzZV9BcnJheSIsInBhcnNlX0FycmF5UGFyc2VkRm9ybXVsYSIsInBhcnNlX01UUlNldHRpbmdzIiwiZk1UUkVuYWJsZWQiLCJmVXNlclNldFRocmVhZENvdW50IiwiY1VzZXJUaHJlYWRDb3VudCIsInBhcnNlX05vdGVTaCIsImlkT2JqIiwic3RBdXRob3IiLCJwYXJzZV9Ob3RlIiwicGFyc2VfTWVyZ2VDZWxscyIsIm1lcmdlcyIsImNtY3MiLCJ3cml0ZV9NZXJnZUNlbGxzIiwicGFyc2VfT2JqIiwicGFyc2VfQklGRjVPYmoiLCJjbW8iLCJwYXJzZV9CSUZGNU9UIiwiY2YiLCJwYXJzZV9UeE8iLCJ0ZXh0cyIsImNvbnRyb2xJbmZvIiwiY2NoVGV4dCIsInBhcnNlX0hMaW5rIiwiaGxpbmsiLCJ3cml0ZV9ITGluayIsIk8iLCJwYXJzZV9ITGlua1Rvb2x0aXAiLCJ3elRvb2x0aXAiLCJ3cml0ZV9ITGlua1Rvb2x0aXAiLCJwYXJzZV9Db3VudHJ5Iiwid3JpdGVfQ291bnRyeSIsInBhcnNlX0NscnRDbGllbnQiLCJjY3YiLCJwYXJzZV9QYWxldHRlIiwicGFyc2VfWEZDUkMiLCJwYXJzZV9Db2xJbmZvIiwiY29sZHgiLCJ3cml0ZV9Db2xJbmZvIiwicGFyc2VfU2V0dXAiLCJwYXJzZV9TaHRQcm9wcyIsIndyaXRlX1JSVGFiSWQiLCJwYXJzZV9CbGFuayIsInBhcnNlX1NjbCIsInBhcnNlX1N0cmluZyIsInBhcnNlX0ltRGF0YSIsImVudiIsImxjYiIsInBhcnNlX0JJRkYyU1RSIiwicGFyc2VfQklGRjJOVU0iLCJ3cml0ZV9CSUZGMk5VTSIsIndyaXRlX0JJRkYyQ2VsbCIsInBhcnNlX0JJRkYySU5UIiwid3JpdGVfQklGRjJJTlQiLCJwYXJzZV9CSUZGMlNUUklORyIsInBhcnNlX0JJRkYyRk9OVFhUUkEiLCJwYXJzZV9SU3RyaW5nIiwiREJGX1NVUFBPUlRFRF9WRVJTSU9OUyIsIkRCRiIsImRiZl9jb2RlcGFnZV9tYXAiLCJkYmZfcmV2ZXJzZV9tYXAiLCJkYmZfdG9fYW9hIiwibWVtbyIsInZmcCIsImw3IiwibnJvdyIsImZwb3MiLCJybGVuIiwiY3VycmVudF9jcCIsImhlbmQiLCJkYmZfdG9fc2hlZXQiLCJkYmZfdG9fd29ya2Jvb2siLCJfUkxFTiIsInNoZWV0X3RvX2RiZiIsImFvYSIsInNoZWV0X3RvX2pzb24iLCJoZWFkZXJzIiwiaGNudCIsImNvbHR5cGVzIiwiY29sd2lkdGhzIiwiY29sZGVjaW1hbHMiLCJndWVzcyIsIl9ndWVzcyIsImhmIiwiaGIiLCJyb3V0IiwiX24iLCJTWUxLIiwic3lsa19lc2NhcGVzIiwic3lsa19jaGFyX3JlZ2V4Iiwic3lsa19jaGFyX2ZuIiwiZGVjb2RlX3N5bGtfY2hhciIsIm5ld2NjIiwic3lsa190b19hb2EiLCJzeWxrX3RvX2FvYV9zdHIiLCJyaiIsImZvcm1hdHMiLCJuZXh0X2NlbGxfZm9ybWF0Iiwic2h0Iiwicm93aW5mbyIsImNvbGluZm8iLCJjdyIsIk12YWwiLCJyc3RyIiwicmVjb3JkIiwiQ19zZWVuX0siLCJDX3NlZW5fWCIsIkNfc2Vlbl9TIiwiQ19zZWVuX0UiLCJmb3JtdWxhIiwicmNfdG9fYTEiLCJzaHJiYXNlIiwic2hpZnRfZm9ybXVsYV9zdHIiLCJGX3NlZW4iLCJwcm9jZXNzX2NvbCIsInB0MnB4Iiwic3lsa190b19zaGVldCIsImFvYXNodCIsInN5bGtfdG9fd29ya2Jvb2siLCJ3cml0ZV93c19jZWxsX3N5bGsiLCJhMV90b19yYyIsIndyaXRlX3dzX2NvbHNfc3lsayIsInJlYyIsIndpZHRoMnB4IiwicHgyY2hhciIsIndyaXRlX3dzX3Jvd3Nfc3lsayIsInB4MnB0Iiwic2hlZXRfdG9fc3lsayIsIlJTIiwiY29vcmQiLCJESUYiLCJkaWZfdG9fYW9hIiwiZGlmX3RvX2FvYV9zdHIiLCJtZXRhZGF0YSIsImRpZl90b19zaGVldCIsImRpZl90b193b3JrYm9vayIsInNoZWV0X3RvX2RpZiIsInB1c2hfZmllbGQiLCJ0b3BpYyIsInB1c2hfdmFsdWUiLCJFVEgiLCJkZWNvZGUiLCJlbmNvZGUiLCJldGhfdG9fYW9hIiwiZXRoX3RvX3NoZWV0IiwiZXRoX3RvX3dvcmtib29rIiwic2VwIiwibWV0YSIsInNoZWV0X3RvX2V0aF9kYXRhIiwic2hlZXRfdG9fZXRoIiwiUFJOIiwic2V0X3RleHRfYXJyIiwicHJuX3RvX2FvYV9zdHIiLCJsaW5lcyIsImd1ZXNzX3NlcHMiLCJndWVzc19zZXBfd2VpZ2h0cyIsImd1ZXNzX3NlcCIsImluc3RyIiwiZHN2X3RvX3NoZWV0X3N0ciIsInNlcGNjIiwic3RhcnRjYyIsIl9yZSIsImZpbmlzaF9jZWxsIiwiZnV6enlmbWxhIiwib3V0ZXIiLCJwcm5fdG9fc2hlZXRfc3RyIiwicHJuX3RvX3NoZWV0IiwiZmlyc3RieXRlIiwicHJuX3RvX3dvcmtib29rIiwic2hlZXRfdG9fcHJuIiwicmVhZF93Yl9JRCIsIk9MRF9XVEYiLCJXS18iLCJsb3R1c2hvcHBlciIsIkVudW0iLCJXSzFFbnVtIiwibG90dXNfdG9fd29ya2Jvb2siLCJsb3R1c190b193b3JrYm9va19idWYiLCJuZXh0X24iLCJzaWR4Iiwic25hbWVzIiwicmVhbG5hbWVzIiwicmVmZ3Vlc3MiLCJzaGVldFJvd3MiLCJ0bXBjZWxsIiwiV0szRW51bSIsIm9zaGVldHMiLCJybmFtZXMiLCJzaGVldF90b193azEiLCJ3cml0ZV9iaWZmX3JlYyIsIndyaXRlX0JPRl9XSzEiLCJ3cml0ZV9SQU5HRSIsIm1heF9SIiwid3JpdGVfSU5URUdFUiIsIndyaXRlX05VTUJFUiIsIndyaXRlX0xBQkVMIiwiYm9va190b193azMiLCJ3cml0ZV9CT0ZfV0szIiwid3JpdGVfWEZPUk1BVF9TSEVFVE5BTUUiLCJ3c2lkeCIsIndyaXRlX05VTUJFUl8xNyIsIndyaXRlX0xBQkVMXzE2Iiwid3NjbnQiLCJwYXJzZV9SQU5HRSIsInBhcnNlX2NlbGwiLCJwYXJzZV9MQUJFTCIsInBhcnNlX0lOVEVHRVIiLCJwYXJzZV9OVU1CRVIiLCJwYXJzZV9GT1JNVUxBIiwid2sxX2ZtbGFfdG9fY3NmIiwid2sxX3BhcnNlX3JjIiwiRnVuY1RhYiIsIkJpbk9wVGFiIiwiYXJnYyIsImFyZ0wiLCJhcmdSIiwiWiIsInBhcnNlX2NlbGxfMyIsInBhcnNlX0xBQkVMXzE2IiwicGFyc2VfTlVNQkVSXzE4IiwicGFyc2VfTlVNQkVSXzE3IiwidjEiLCJ2MiIsInBhcnNlX0ZPUk1VTEFfMTkiLCJwYXJzZV9OVU1CRVJfMjUiLCJwYXJzZV9OVU1CRVJfMjciLCJwYXJzZV9GT1JNVUxBXzI4IiwicGFyc2VfU0hFRVROQU1FQ1MiLCJwYXJzZV9TSEVFVE5BTUVMUCIsInBhcnNlX1NIRUVUSU5GT1FQIiwicGFyc2VfWEZPUk1BVCIsInBhcnNlX3JwciIsInJwciIsInBhc3MiLCJwYXJzZV9ycyIsInRyZWdleCIsInJwcmVnZXgiLCJwYXJzZV9yIiwicnJlZ2V4IiwicmVuZCIsInJzIiwicnNfdG9faHRtbCIsIm5scmVnZXgiLCJwYXJzZV9ycHIyIiwiaW50cm8iLCJvdXRybyIsImFsaWduIiwicl90b19odG1sIiwidGVybXMiLCJzaXRyZWdleCIsInNpcnJlZ2V4Iiwic2lycGhyZWdleCIsInBhcnNlX3NpIiwiaHRtbCIsInNzdHIwIiwic3N0cjEiLCJzc3RyMiIsInBhcnNlX3NzdF94bWwiLCJzdHJheXdzcmVnZXgiLCJ3cml0ZV9zc3RfeG1sIiwic2l0YWciLCJwYXJzZV9CcnRCZWdpblNzdCIsInBhcnNlX3NzdF9iaW4iLCJ3cml0ZV9CcnRCZWdpblNzdCIsIndyaXRlX0JydFNTVEl0ZW0iLCJ3cml0ZV9zc3RfYmluIiwiX0pTMkFOU0kiLCJwYXJzZV9DUllQVE9WZXJzaW9uIiwicGFyc2VfRGF0YVNwYWNlVmVyc2lvbkluZm8iLCJwYXJzZV9EYXRhU3BhY2VNYXBFbnRyeSIsImNvbXBzIiwicGFyc2VfRGF0YVNwYWNlTWFwIiwicGFyc2VfRGF0YVNwYWNlRGVmaW5pdGlvbiIsInBhcnNlX1RyYW5zZm9ybUluZm9IZWFkZXIiLCJwYXJzZV9QcmltYXJ5IiwicGFyc2VfRW5jcnlwdGlvbkhlYWRlciIsInZhbGlkIiwicGFyc2VfRW5jcnlwdGlvblZlcmlmaWVyIiwicGFyc2VfRW5jcnlwdGlvbkluZm8iLCJ2ZXJzIiwicGFyc2VfRW5jSW5mb1N0ZCIsInBhcnNlX0VuY0luZm9FeHQiLCJwYXJzZV9FbmNJbmZvQWdsIiwidmVyaWZpZXIiLCJLZXlEYXRhIiwicGFyc2VfUkM0Q3J5cHRvSGVhZGVyIiwicGFyc2VfUkM0SGVhZGVyIiwiY3J5cHRvX0NyZWF0ZVBhc3N3b3JkVmVyaWZpZXJfTWV0aG9kMSIsIlBhc3N3b3JkIiwiVmVyaWZpZXIiLCJQYXNzd29yZEFycmF5IiwiUGFzc3dvcmREZWNvZGVkIiwiUGFzc3dvcmRCeXRlIiwiSW50ZXJtZWRpYXRlMSIsIkludGVybWVkaWF0ZTIiLCJJbnRlcm1lZGlhdGUzIiwiY3J5cHRvX0NyZWF0ZVhvckFycmF5X01ldGhvZDEiLCJQYWRBcnJheSIsIkluaXRpYWxDb2RlIiwiWG9yTWF0cml4IiwiUm9yIiwiQnl0ZSIsIlhvclJvciIsImJ5dGUxIiwiYnl0ZTIiLCJDcmVhdGVYb3JLZXlfTWV0aG9kMSIsIlhvcktleSIsIkN1cnJlbnRFbGVtZW50IiwiQ2hhciIsInBhc3N3b3JkIiwiT2JmdXNjYXRpb25BcnJheSIsIlRlbXAiLCJQYXNzd29yZExhc3RDaGFyIiwiUGFkSW5kZXgiLCJjcnlwdG9fRGVjcnlwdERhdGFfTWV0aG9kMSIsIkRhdGEiLCJYb3JBcnJheUluZGV4IiwiWG9yQXJyYXkiLCJWYWx1ZSIsImNyeXB0b19NYWtlWG9yRGVjcnlwdG9yIiwicGFyc2VfWE9ST2JmdXNjYXRpb24iLCJwYXJzZV9GaWxlUGFzc0hlYWRlciIsInBhcnNlX0ZpbGVQYXNzIiwiUlRGIiwicnRmX3RvX3NoZWV0IiwicnRmX3RvX3NoZWV0X3N0ciIsInJvd3RmIiwicnRmcmUiLCJsYXN0X2luZGV4IiwicnRmX3RvX3dvcmtib29rIiwic2hlZXRfdG9fcnRmIiwiaGV4MlJHQiIsInJnYjJIU0wiLCJHIiwiSDYiLCJMMiIsImhzbDJSR0IiLCJoc2wiLCJoNiIsInJnYl90aW50IiwiaGV4IiwidGludCIsIkRFRl9NRFciLCJNQVhfTURXIiwiTUlOX01EVyIsIk1EVyIsInB4IiwiY2hhcjJ3aWR0aCIsImN5Y2xlX3dpZHRoIiwiY29sbHciLCJmaW5kX21kd19jb2x3IiwiZGVsdGEiLCJfTURXIiwiY29sbCIsIkRFRl9QUEkiLCJQUEkiLCJwdCIsIlhMTUxQYXR0ZXJuVHlwZU1hcCIsInBhcnNlX2JvcmRlcnMiLCJzdHlsZXMiLCJ0aGVtZXMiLCJib3JkZXIiLCJwYXJzZV9maWxscyIsInBhcnNlX2ZvbnRzIiwicGFyc2VfbnVtRm10cyIsIndyaXRlX251bUZtdHMiLCJORiIsImNlbGxYRl91aW50IiwiY2VsbFhGX2Jvb2wiLCJwYXJzZV9jZWxsWGZzIiwieGYiLCJhbGlnbm1lbnQiLCJ3cml0ZV9jZWxsWGZzIiwiY2VsbFhmcyIsInBhcnNlX3N0eV94bWwiLCJudW1GbXRSZWdleCIsImNlbGxYZlJlZ2V4IiwiZmlsbHNSZWdleCIsImZvbnRzUmVnZXgiLCJib3JkZXJzUmVnZXgiLCJ3cml0ZV9zdHlfeG1sIiwicGFyc2VfQnJ0Rm10Iiwic3RGbXRDb2RlIiwid3JpdGVfQnJ0Rm10IiwicGFyc2VfQnJ0Rm9udCIsImJscyIsInVuZGVybGluZSIsImZhbWlseSIsImJDaGFyU2V0Iiwid3JpdGVfQnJ0Rm9udCIsInNzcyIsInNjaGVtZSIsIlhMU0JGaWxsUFROYW1lcyIsInJldl9YTFNCRmlsbFBUTmFtZXMiLCJwYXJzZV9CcnRGaWxsIiwid3JpdGVfQnJ0RmlsbCIsImZscyIsInBhcnNlX0JydFhGIiwiaXhmZVBhcmVudCIsImlmbXQiLCJ3cml0ZV9CcnRYRiIsImZsb3ciLCJ3cml0ZV9CbHhmIiwicGFyc2VfQnJ0Qm9yZGVyIiwid3JpdGVfQnJ0Qm9yZGVyIiwid3JpdGVfQnJ0U3R5bGUiLCJ3cml0ZV9CcnRCZWdpblRhYmxlU3R5bGVzIiwiZGVmVGFibGVTdHlsZSIsImRlZlBpdm90U3R5bGUiLCJwYXJzZV9zdHlfYmluIiwid3JpdGVfRk1UU19iaW4iLCJ3cml0ZV9GT05UU19iaW4iLCJ3cml0ZV9GSUxMU19iaW4iLCJ3cml0ZV9CT1JERVJTX2JpbiIsIndyaXRlX0NFTExTVFlMRVhGU19iaW4iLCJ3cml0ZV9DRUxMWEZTX2JpbiIsIndyaXRlX1NUWUxFU19iaW4iLCJ3cml0ZV9EWEZTX2JpbiIsIndyaXRlX1RBQkxFU1RZTEVTX2JpbiIsIndyaXRlX3N0eV9iaW4iLCJYTFNYVGhlbWVDbHJTY2hlbWUiLCJwYXJzZV9jbHJTY2hlbWUiLCJwYXJzZV9mb250U2NoZW1lIiwicGFyc2VfZm10U2NoZW1lIiwiY2xyc3JlZ2V4IiwiZm50c3JlZ2V4IiwiZm10c3JlZ2V4IiwicGFyc2VfdGhlbWVFbGVtZW50cyIsInRoZW1lbHRyZWdleCIsInBhcnNlX3RoZW1lX3htbCIsIndyaXRlX3RoZW1lIiwiVGhlbWVzIiwicGFyc2VfVGhlbWUiLCJkd1RoZW1lVmVyc2lvbiIsInRoZW1lWE1MIiwicGFyc2VfQ29sb3JUaGVtZSIsInBhcnNlX0Z1bGxDb2xvckV4dCIsInBhcnNlX0ljdlhGIiwicGFyc2VfWEZFeHRHcmFkaWVudCIsInBhcnNlX0V4dFByb3AiLCJleHRUeXBlIiwicGFyc2VfWEZFeHQiLCJjZXh0cyIsInVwZGF0ZV94ZmV4dCIsInhmZXh0IiwieGZlIiwicGFyc2VfQnJ0TWR0aW5mbyIsIndyaXRlX0JydE1kdGluZm8iLCJwYXJzZV9CcnRNZGIiLCJ3cml0ZV9CcnRNZGIiLCJtZGIiLCJ3cml0ZV9CcnRCZWdpbkVzZm1kIiwicGFyc2VfQnJ0QmVnaW5Fc21kYiIsIndyaXRlX0JydEJlZ2luRXNtZGIiLCJjbSIsInBhcnNlX3hsbWV0YV9iaW4iLCJtZXRhdHlwZSIsIndyaXRlX3hsbWV0YV9iaW4iLCJwYXJzZV94bG1ldGFfeG1sIiwibGFzdG1ldGEiLCJ3cml0ZV94bG1ldGFfeG1sIiwicGFyc2VfY2NfeG1sIiwicGFyc2VfQnJ0Q2FsY0NoYWluSXRlbSQiLCJwYXJzZV9jY19iaW4iLCJwYXJzZV94bGlua194bWwiLCJwYXJzZV94bGlua19iaW4iLCJwYXJzZV9kcmF3aW5nIiwiX3NoYXBlaWQiLCJ3cml0ZV9jb21tZW50c192bWwiLCJjb21tZW50cyIsImNzaXplIiwiYmJveCIsImZpbGxvcHRzIiwiZmlsbHBhcm0iLCJmaWxseG1sIiwic2hhZGF0YSIsInNoZWV0X2luc2VydF9jb21tZW50cyIsInRocmVhZGVkIiwicGVvcGxlIiwicGFyc2VfY29tbWVudHNfeG1sIiwiYXV0aG9ycyIsImNvbW1lbnRMaXN0IiwiYXV0aHRhZyIsImNtbnR0YWciLCJ0ZXh0TWF0Y2giLCJ3cml0ZV9jb21tZW50c194bWwiLCJpYXV0aG9yIiwibGFzdGF1dGhvciIsInRzIiwicGFyc2VfdGNtbnRfeG1sIiwidGlkeCIsIndyaXRlX3RjbW50X3htbCIsImNhcnIiLCJyb290aWQiLCJ0Y29wdHMiLCJwYXJzZV9wZW9wbGVfeG1sIiwid3JpdGVfcGVvcGxlX3htbCIsInBlcnNvbiIsInBhcnNlX0JydEJlZ2luQ29tbWVudCIsInJmeCIsIndyaXRlX0JydEJlZ2luQ29tbWVudCIsInBhcnNlX0JydENvbW1lbnRBdXRob3IiLCJ3cml0ZV9CcnRDb21tZW50QXV0aG9yIiwicGFyc2VfY29tbWVudHNfYmluIiwid3JpdGVfY29tbWVudHNfYmluIiwiQ1RfVkJBIiwibWFrZV92YmFfeGxzIiwibmV3Y2ZiIiwibmV3cGF0aCIsImZpbGxfdmJhX3hscyIsInZiYSIsIlZCQUZNVFMiLCJwYXJzZV9kc19iaW4iLCJwYXJzZV9kc194bWwiLCJwYXJzZV9tc19iaW4iLCJwYXJzZV9tc194bWwiLCJyY3JlZ2V4IiwicmNiYXNlIiwicmNmdW5jIiwiY1JlbCIsInJSZWwiLCJmc3RyIiwiY3JlZnJlZ2V4IiwiJDAiLCIkNCIsIiQ1Iiwic2hpZnRfZm9ybXVsYV94bHN4IiwiX3hsZm4iLCJwYXJzZXJlYWQxIiwicGFyc2VfQ29sUmVsVSIsInBhcnNlX1JnY2VBcmVhIiwicGFyc2VfUmdjZUFyZWFfQklGRjIiLCJwYXJzZV9SZ2NlQXJlYVJlbCIsInBhcnNlX1JnY2VMb2MiLCJwYXJzZV9SZ2NlTG9jX0JJRkYyIiwicGFyc2VfUmdjZUVsZkxvYyIsInBhcnNlX1JnY2VMb2NSZWwiLCJwYXJzZV9SZ2NlTG9jUmVsX0JJRkYyIiwiY2wiLCJybCIsInBhcnNlX1B0Z0FyZWEiLCJhcmVhIiwicGFyc2VfUHRnQXJlYTNkIiwiaXh0aSIsInBhcnNlX1B0Z0FyZWFFcnIiLCJwYXJzZV9QdGdBcmVhRXJyM2QiLCJwYXJzZV9QdGdBcmVhTiIsInBhcnNlX1B0Z0FycmF5IiwicGFyc2VfUHRnQXR0ckJheGNlbCIsImJpdFNlbWkiLCJiaXRCYXhjZWwiLCJwYXJzZV9QdGdBdHRyQ2hvb3NlIiwicGFyc2VfUHRnQXR0ckdvdG8iLCJiaXRHb3RvIiwicGFyc2VfUHRnQXR0cklmIiwiYml0SWYiLCJwYXJzZV9QdGdBdHRySWZFcnJvciIsInBhcnNlX1B0Z0F0dHJTZW1pIiwicGFyc2VfUHRnQXR0clNwYWNlVHlwZSIsInBhcnNlX1B0Z0F0dHJTcGFjZSIsInBhcnNlX1B0Z0F0dHJTcGFjZVNlbWkiLCJwYXJzZV9QdGdSZWYiLCJwYXJzZV9QdGdSZWZOIiwicGFyc2VfUHRnUmVmM2QiLCJwYXJzZV9QdGdGdW5jIiwiaWZ0YWIiLCJGdGFiQXJnYyIsIkZ0YWIiLCJwYXJzZV9QdGdGdW5jVmFyIiwiY3BhcmFtcyIsInRhYiIsInBhcnNldGFiIiwiQ2V0YWIiLCJwYXJzZV9QdGdBdHRyU3VtIiwicGFyc2VfUHRnRXhwIiwicGFyc2VfUHRnRXJyIiwicGFyc2VfUHRnSW50IiwicGFyc2VfUHRnQm9vbCIsInBhcnNlX1B0Z051bSIsInBhcnNlX1B0Z1N0ciIsInBhcnNlX1NlckFyIiwicGFyc2VfUHRnRXh0cmFNZW0iLCJwYXJzZV9QdGdFeHRyYUFycmF5IiwicGFyc2VfUHRnTmFtZSIsIm5hbWVpbmRleCIsInBhcnNlX1B0Z05hbWVYIiwicGFyc2VfUHRnTmFtZVhfQklGRjUiLCJwYXJzZV9QdGdNZW1BcmVhIiwicGFyc2VfUHRnTWVtRnVuYyIsInBhcnNlX1B0Z1JlZkVyciIsInBhcnNlX1B0Z1JlZkVycjNkIiwicGFyc2VfUHRnTWVtRXJyIiwicGFyc2VfUHRnTWVtTm9NZW0iLCJwYXJzZV9QdGdUYmwiLCJwYXJzZV9QdGdFbGZMb2MiLCJwYXJzZV9QdGdFbGZOb29wIiwicGFyc2VfUHRnRWxmQ29sIiwicGFyc2VfUHRnRWxmQ29sUyIsInBhcnNlX1B0Z0VsZkNvbFNWIiwicGFyc2VfUHRnRWxmQ29sViIsInBhcnNlX1B0Z0VsZkxlbCIsInBhcnNlX1B0Z0VsZlJhZGljYWwiLCJwYXJzZV9QdGdFbGZSYWRpY2FsTGVsIiwicGFyc2VfUHRnRWxmUmFkaWNhbFMiLCJwYXJzZV9QdGdFbGZSdyIsInBhcnNlX1B0Z0VsZlJ3ViIsIlB0Z0xpc3RSVCIsInBhcnNlX1B0Z0xpc3QiLCJwYXJzZV9QdGdTeE5hbWUiLCJwYXJzZV9QdGdTaGVldCIsInBhcnNlX1B0Z0VuZFNoZWV0IiwicGFyc2VfUHRnTWVtQXJlYU4iLCJwYXJzZV9QdGdNZW1Ob01lbU4iLCJwYXJzZV9QdGdBdHRyTm9vcCIsIlB0Z1R5cGVzIiwiUHRnRHVwZXMiLCJQdGcxOCIsIlB0ZzE5IiwicGFyc2VfUmdiRXh0cmEiLCJwYXJzZV9SZ2NlIiwicHRncyIsInN0cmluZ2lmeV9hcnJheSIsIlB0Z0Jpbk9wIiwiZm9ybXVsYV9xdW90ZV9zaGVldF9uYW1lIiwic25hbWUiLCJnZXRfaXh0aV9yYXciLCJzdXBib29rcyIsIlhUSSIsImdldF9peHRpIiwiaXh0aXJhdyIsInN0cmluZ2lmeV9mb3JtdWxhIiwic3RhY2siLCJuYW1laWR4IiwibGFzdF9zcCIsInNwIiwiZmZsZW4iLCJsYmwiLCJib29raWR4IiwiZXh0ZXJuYm9vayIsIml4dGlkYXRhIiwibHAiLCJycCIsInBhcnNlZGYiLCJmbmQiLCJQdGdOb25EaXNwIiwiX2xlZnQiLCJyZ2NiIiwicGFyc2VfWExTQ2VsbFBhcnNlZEZvcm11bGEiLCJwYXJzZV9Gb3JtdWxhVmFsdWUiLCJ3cml0ZV9Gb3JtdWxhVmFsdWUiLCJwYXJzZV9Gb3JtdWxhIiwiY2JmIiwid3JpdGVfRm9ybXVsYSIsIm8xIiwibzMiLCJwYXJzZV9YTFNCUGFyc2VkRm9ybXVsYSIsInBhcnNlX1hMU0JBcnJheVBhcnNlZEZvcm11bGEiLCJwYXJzZV9YTFNCQ2VsbFBhcnNlZEZvcm11bGEiLCJwYXJzZV9YTFNCTmFtZVBhcnNlZEZvcm11bGEiLCJwYXJzZV9YTFNCU2hhcmVkUGFyc2VkRm9ybXVsYSIsIm9kc190b19jc2ZfZm9ybXVsYSIsImNzZl90b19vZHNfZm9ybXVsYSIsIm9kc190b19jc2ZfM0QiLCJjc2ZfdG9fb2RzXzNEIiwiX3NzZm9wdHMiLCJicm93c2VyX2hhc19NYXAiLCJnZXRfc3N0X2lkIiwicmV2YXJyIiwiY29sX29ial93Iiwid2NoIiwiZGVmYXVsdF9tYXJnaW5zIiwibWFyZ2lucyIsImRlZnMiLCJnZXRfY2VsbF9zdHlsZSIsInNhZmVfZm9ybWF0IiwiZm10aWQiLCJmaWxsaWQiLCJjaGVja193cyIsInBhcnNlX3dzX3htbF9kaW0iLCJtZXJnZWNyZWdleCIsInNoZWV0ZGF0YXJlZ2V4IiwiaGxpbmtyZWdleCIsImRpbXJlZ2V4IiwiY29scmVnZXgiLCJhZnJlZ2V4IiwibWFyZ2lucmVnZXgiLCJzaGVldHBycmVnZXgiLCJzaGVldHBycmVnZXgyIiwic3ZzcmVnZXgiLCJwYXJzZV93c194bWwiLCJkYXRhMSIsImRhdGEyIiwibXRjaCIsInNoZWV0UHIiLCJwYXJzZV93c194bWxfc2hlZXRwciIsInBhcnNlX3dzX3htbF9zaGVldHByMiIsInN2cyIsInBhcnNlX3dzX3htbF9zaGVldHZpZXdzIiwicGFyc2Vfd3NfeG1sX2NvbHMiLCJwYXJzZV93c194bWxfZGF0YSIsImFmaWx0ZXIiLCJwYXJzZV93c194bWxfYXV0b2ZpbHRlciIsIl9tZXJnZSIsInBhcnNlX3dzX3htbF9obGlua3MiLCJwYXJzZV93c194bWxfbWFyZ2lucyIsInRtcHJlZiIsIndyaXRlX3dzX3htbF9tZXJnZXMiLCJ3cml0ZV93c194bWxfc2hlZXRwciIsIm5lZWRlZCIsImNuYW1lIiwib3V0bGluZXByb3BzIiwic2hlZXRwcm90X2RlZmZhbHNlIiwic2hlZXRwcm90X2RlZnRydWUiLCJ3cml0ZV93c194bWxfcHJvdGVjdGlvbiIsInJuZyIsIm1hcmdpbiIsIndyaXRlX3dzX3htbF9tYXJnaW5zIiwic2VlbmNvbCIsImNvbGkiLCJjb2xtIiwiY29sTSIsIndyaXRlX3dzX3htbF9jb2xzIiwid3JpdGVfd3NfeG1sX2F1dG9maWx0ZXIiLCJuYW1lcyIsInN2aWV3cmVnZXgiLCJ3cml0ZV93c194bWxfc2hlZXR2aWV3cyIsInN2aWV3Iiwid3JpdGVfd3NfeG1sX2NlbGwiLCJvbGR0Iiwib2xkdiIsImNlbGxyZWdleCIsInJvd3JlZ2V4IiwiaXNyZWdleCIsInJlZnJlZ2V4IiwibWF0Y2hfdiIsIm1hdGNoX2YiLCJzZGF0YSIsImNyZWYiLCJ0YWdyIiwidGFnYyIsInNzdHIiLCJmdGFnIiwiZG9fZm9ybWF0IiwiYXJyYXlmIiwic2hhcmVkZiIsInJvd29iaiIsInJvd3JpdGUiLCJzaGVldFN0dWJzIiwibWFyciIsIm1hcnJsZW4iLCJ4bGVuIiwicnN0YXJ0aSIsIm91dGEiLCJyc2xpY2UiLCJfX19mIiwiX3RhZyIsIl9yIiwid3JpdGVfd3NfeG1sX2RhdGEiLCJwYXJhbXMiLCJfY2VsbCIsIndyaXRlX3dzX3htbCIsInJkYXRhIiwiX2RyYXdpbmciLCJyZWxjIiwicGFyc2VfQnJ0Um93SGRyIiwid3JpdGVfQnJ0Um93SGRyIiwibmNvbHNwYW4iLCJsY3MiLCJjYWRkciIsImZpcnN0Iiwid3JpdGVfcm93X2hlYWRlciIsInBhcnNlX0JydFdzRGltIiwid3JpdGVfQnJ0V3NEaW0iLCJwYXJzZV9CcnRXc0ZtdEluZm8iLCJwYXJzZV9CcnRXc1Byb3AiLCJ3cml0ZV9CcnRXc1Byb3AiLCJwYXJzZV9CcnRDZWxsQmxhbmsiLCJ3cml0ZV9CcnRDZWxsQmxhbmsiLCJuY2VsbCIsInBhcnNlX0JydFNob3J0QmxhbmsiLCJ3cml0ZV9CcnRTaG9ydEJsYW5rIiwicGFyc2VfQnJ0Q2VsbEJvb2wiLCJmQm9vbCIsIndyaXRlX0JydENlbGxCb29sIiwicGFyc2VfQnJ0U2hvcnRCb29sIiwid3JpdGVfQnJ0U2hvcnRCb29sIiwicGFyc2VfQnJ0Q2VsbEVycm9yIiwiYkVycm9yIiwid3JpdGVfQnJ0Q2VsbEVycm9yIiwicGFyc2VfQnJ0U2hvcnRFcnJvciIsIndyaXRlX0JydFNob3J0RXJyb3IiLCJwYXJzZV9CcnRDZWxsSXNzdCIsImlzc3QiLCJ3cml0ZV9CcnRDZWxsSXNzdCIsInBhcnNlX0JydFNob3J0SXNzdCIsIndyaXRlX0JydFNob3J0SXNzdCIsInBhcnNlX0JydENlbGxSZWFsIiwid3JpdGVfQnJ0Q2VsbFJlYWwiLCJwYXJzZV9CcnRTaG9ydFJlYWwiLCJ3cml0ZV9CcnRTaG9ydFJlYWwiLCJwYXJzZV9CcnRDZWxsUmsiLCJ3cml0ZV9CcnRDZWxsUmsiLCJwYXJzZV9CcnRTaG9ydFJrIiwid3JpdGVfQnJ0U2hvcnRSayIsInBhcnNlX0JydENlbGxSU3RyaW5nIiwicGFyc2VfQnJ0Q2VsbFN0Iiwid3JpdGVfQnJ0Q2VsbFN0IiwicGFyc2VfQnJ0U2hvcnRTdCIsIndyaXRlX0JydFNob3J0U3QiLCJwYXJzZV9CcnRGbWxhQm9vbCIsInBhcnNlX0JydEZtbGFFcnJvciIsInBhcnNlX0JydEZtbGFOdW0iLCJwYXJzZV9CcnRGbWxhU3RyaW5nIiwicGFyc2VfQnJ0TWVyZ2VDZWxsIiwid3JpdGVfQnJ0TWVyZ2VDZWxsIiwid3JpdGVfQnJ0QmVnaW5NZXJnZUNlbGxzIiwicGFyc2VfQnJ0SExpbmsiLCJyZWxJZCIsIndyaXRlX0JydEhMaW5rIiwibG9jaWR4IiwicGFyc2VfQnJ0UGFuZSIsInBhcnNlX0JydEFyckZtbGEiLCJmQWx3YXlzQ2FsYyIsInBhcnNlX0JydFNockZtbGEiLCJ3cml0ZV9CcnRDb2xJbmZvIiwiQnJ0TWFyZ2luS2V5cyIsInBhcnNlX0JydE1hcmdpbnMiLCJ3cml0ZV9CcnRNYXJnaW5zIiwicGFyc2VfQnJ0QmVnaW5Xc1ZpZXciLCJ3cml0ZV9CcnRCZWdpbldzVmlldyIsIldvcmtib29rIiwid3JpdGVfQnJ0Q2VsbElnbm9yZUVDIiwid3JpdGVfQnJ0U2hlZXRQcm90ZWN0aW9uIiwicGFyc2VfQnJ0RFZhbCIsInBhcnNlX0JydERWYWwxNCIsInBhcnNlX3dzX2JpbiIsImFpIiwiYWYiLCJSUiIsImFpaSIsIndyaXRlX3dzX2Jpbl9jZWxsIiwibGFzdF9zZWVuIiwid3JpdGVfQ0VMTFRBQkxFIiwiY2FwIiwid3JpdGVfTUVSR0VDRUxMUyIsIndyaXRlX0NPTElORk9TIiwid3JpdGVfSUdOT1JFRUNTIiwid3JpdGVfSExJTktTIiwid3JpdGVfTEVHQUNZRFJBV0lORyIsIndyaXRlX0FVVE9GSUxURVIiLCJ3cml0ZV9XU1ZJRVdTMiIsIndyaXRlX1NIRUVUUFJPVEVDVCIsIndyaXRlX3dzX2JpbiIsInBhcnNlX0NhY2hlIiwibmYiLCJwYXJzZV9jaGFydCIsImNzaGVldCIsIm5jIiwicGFyc2VfY3NfeG1sIiwicGFyc2VfQnJ0Q3NQcm9wIiwicGFyc2VfY3NfYmluIiwiV0JQcm9wc0RlZiIsIldCVmlld0RlZiIsIlNoZWV0RGVmIiwiQ2FsY1ByRGVmIiwicHVzaF9kZWZhdWx0c19hcnJheSIsInB1c2hfZGVmYXVsdHMiLCJwYXJzZV93Yl9kZWZhdWx0cyIsInNhZmUxOTA0IiwiYmFkY2hhcnMiLCJjaGVja193c19uYW1lIiwiX2dvb2QiLCJjaGVja193Yl9uYW1lcyIsIk4iLCJjb2RlcyIsImNuIiwiY2hlY2tfd2IiLCJTaGVldHMiLCJ3Ym5zcmVnZXgiLCJwYXJzZV93Yl94bWwiLCJ4bWxucyIsImRuYW1lIiwiZG5zdGFydCIsIndyaXRlX3diX3htbCIsIndyaXRlX25hbWVzIiwid29ya2Jvb2tQciIsInBhcnNlX0JydEJ1bmRsZVNoIiwid3JpdGVfQnJ0QnVuZGxlU2giLCJwYXJzZV9CcnRXYlByb3AiLCJzdHJOYW1lIiwid3JpdGVfQnJ0V2JQcm9wIiwicGFyc2VfQnJ0RlJUQXJjaElEJCIsInBhcnNlX0JydE5hbWUiLCJwYXJzZV93Yl9iaW4iLCJOYW1lcyIsIndyaXRlX0JVTkRMRVNIUyIsInZpeiIsIndyaXRlX0JydEZpbGVWZXJzaW9uIiwid3JpdGVfQnJ0Qm9va1ZpZXciLCJ3cml0ZV9CT09LVklFV1MiLCJ2aXN0YWIiLCJ3cml0ZV93Yl9iaW4iLCJwYXJzZV93YiIsInBhcnNlX3dzIiwicGFyc2VfY3MiLCJwYXJzZV9tcyIsInBhcnNlX2RzIiwicGFyc2Vfc3R5IiwicGFyc2VfdGhlbWUiLCJwYXJzZV9zc3QiLCJwYXJzZV9jbW50IiwicGFyc2VfY2MiLCJwYXJzZV94bGluayIsInBhcnNlX3hsbWV0YSIsIndyaXRlX3diIiwid3JpdGVfd3MiLCJ3cml0ZV9zdHkiLCJ3cml0ZV9zc3QiLCJ3cml0ZV9jbW50Iiwid3JpdGVfeGxtZXRhIiwiYXR0cmVnZXhnMiIsImF0dHJlZ2V4MiIsInhsbWxfcGFyc2V4bWx0YWciLCJ3b3JkcyIsInhsbWxfcGFyc2V4bWx0YWdvYmoiLCJYTE1MRm9ybWF0TWFwIiwieGxtbF9mb3JtYXQiLCJ4bG1sX3NldF9jdXN0cHJvcCIsIm92YWwiLCJzYWZlX2Zvcm1hdF94bG1sIiwicHJvY2Vzc19zdHlsZV94bG1sIiwic3RhZyIsIkkiLCJwYXJzZV94bG1sX2RhdGEiLCJjc3R5Iiwic2lkIiwiaW50ZXJpb3JzIiwieGxtbF9jbGVhbl9jb21tZW50IiwicGFyc2VfeGxtbF94bWwiLCJvcGVuaW5nIiwiaXNodG1sIiwiX28iLCJodG1sX3RvX3dvcmtib29rIiwic2hlZXRuYW1lcyIsImN1cnNoZWV0Iiwic2hlZXRuYW1lIiwiZHRhZyIsImRpZHgiLCJmaWR4IiwicGlkeCIsImNzdHlzIiwid3Nwcm9wcyIsInJhd19SbjMiLCJjbWEiLCJjbWQiLCJzc2ZpZHgiLCJfY29sIiwiX05hbWVkUmFuZ2UiLCJfRGVmaW5lZE5hbWUiLCJBdXRvRmlsdGVyIiwicGFyc2VfZm9kcyIsInBhZ2VtYXJnaW5zIiwicGFyc2VfeGxtbCIsImZpeF9yZWFkX29wdHMiLCJ3cml0ZV9wcm9wc194bG1sIiwid3JpdGVfd2JfeGxtbCIsIndyaXRlX3N0eV94bG1sIiwid3JpdGVfbmFtZV94bG1sIiwid3JpdGVfbmFtZXNfeGxtbCIsIndyaXRlX3dzX3hsbWxfbmFtZXMiLCJ3cml0ZV93c194bG1sX3dzb3B0cyIsIndyaXRlX3dzX3hsbWxfY29tbWVudCIsIndyaXRlX3dzX3hsbWxfY2VsbCIsIm1pIiwid3JpdGVfd3NfeGxtbF9yb3ciLCJ3cml0ZV93c194bG1sX3RhYmxlIiwic2tpcCIsIndyaXRlX3dzX3hsbWwiLCJ3cml0ZV94bG1sIiwicGFyc2VfY29tcG9iaiIsIkNPTlRJTlVFX1JUIiwic2x1cnAiLCJSZWNvcmRUeXBlIiwibmV4dHJ0IiwiWExTUmVjb3JkRW51bSIsImxsIiwic2FmZV9mb3JtYXRfeGYiLCJtYWtlX2NlbGwiLCJwYXJzZV93b3JrYm9vayIsIkRpcmVjdG9yeSIsImxhc3RfZm9ybXVsYSIsImN1cl9zaGVldCIsIlByZWFtYmxlIiwibGFzdGNlbGwiLCJsYXN0X2NlbGwiLCJjbW50Iiwicm5nQyIsInJuZ1IiLCJ0ZW1wX3ZhbCIsImNvdW50cnkiLCJYRnMiLCJwYWxldHRlIiwiZ2V0X3JnYiIsInByb2Nlc3NfY2VsbF9zdHlsZSIsInhmZCIsImFkZGNlbGwiLCJmaWxlX2RlcHRoIiwiYWZpIiwib2JqZWN0cyIsImxhc3RfUlQiLCJCSUZGMkZtdCIsIkJJRkYyRm10VGFibGUiLCJGaWx0ZXJEYXRhYmFzZXMiLCJsYXN0X2xibCIsInNlZW5fY29kZXBhZ2UiLCJjcHZhbCIsInRtcHJpIiwiZmFrZWJzOCIsIl9mciIsIl9mYyIsIl9mZSIsIl9hcnJheXN0YXJ0IiwiX2oiLCJfaXhmZSIsImI0aWR4IiwiYjJpZHgiLCJub3Rlb2JqIiwiUFNDTFNJRCIsInBhcnNlX3hsc19wcm9wcyIsIkRTSSIsIkRvY1N1bW1hcnkiLCJTSSIsIlN1bW1hcnkiLCJ3cml0ZV94bHNfcHJvcHMiLCJEU0VudHJpZXMiLCJTRW50cmllcyIsIkNFbnRyaWVzIiwiS2V5cyIsIkRvY1N1bW1hcnlSRSIsIlN1bW1hcnlSRSIsIkNFbnRyaWVzMiIsInBhcnNlX3hsc2NmYiIsIkNvbXBPYmoiLCJXQiIsIldvcmtib29rUCIsIl9kYXRhIiwid3JpdGVfeGxzY2ZiIiwid2JwYXRoIiwid3JpdGVfYmlmZl9idWYiLCJ3cml0ZV9iaWZmX2NvbnRpbnVlIiwid3JpdGVfQklGRjJCRVJSIiwid3JpdGVfQklGRjJMQUJFTCIsIndyaXRlX3dzX2JpZmYyX2NlbGwiLCJ3cml0ZV93c19iaWZmMiIsIndyaXRlX2JpZmYyX2J1ZiIsIndyaXRlX0ZPTlRTX2JpZmY4Iiwid3JpdGVfRk1UU19iaWZmOCIsIndyaXRlX0ZFQVQiLCJ3cml0ZV9DRUxMWEZTX2JpZmY4Iiwid3JpdGVfd3NfYmlmZjhfaGxpbmtzIiwiSEwiLCJ3cml0ZV93c19jb2xzX2JpZmY4Iiwid3JpdGVfd3NfYmlmZjhfY2VsbCIsIndyaXRlX3dzX2JpZmY4IiwiX1dCIiwiX3NoZWV0IiwiTUFYX1JPV1MiLCJ3cml0ZV9iaWZmOF9nbG9iYWwiLCJfc2hlZXRzIiwiX3diIiwiYmxlbiIsIndyaXRlX2JpZmY4X2J1ZiIsImZpeF93cml0ZV9vcHRzIiwiaHRtbF90b19zaGVldCIsIm10Y2gyIiwiQ1MiLCJoZCIsIm1pZHgiLCJfdCIsIm1ha2VfaHRtbF9yb3ciLCJIVE1MX0JFR0lOIiwiSFRNTF9FTkQiLCJib29rX25ldyIsImJvb2tfYXBwZW5kX3NoZWV0IiwibWFrZV9odG1sX3ByZWFtYmxlIiwic2hlZXRfdG9faHRtbCIsInNoZWV0X2FkZF9kb20iLCJvcl9SIiwib3JfQyIsImlzX2RvbV9lbGVtZW50X2hpZGRlbiIsImVsdHMiLCJBZWx0cyIsIkFlbHRpIiwicGFyc2VfZG9tX3RhYmxlIiwidGFibGVfdG9fYm9vayIsImdldF9jb21wdXRlZF9zdHlsZSIsImdldF9nZXRfY29tcHV0ZWRfc3R5bGVfZnVuY3Rpb24iLCJwYXJzZV90ZXh0X3AiLCJmaXhlZCIsIm51bWJlcl9mb3JtYXRzX29kcyIsInBhcnNlX2NvbnRlbnRfeG1sIiwiTkZ0YWciLCJzaGVldGFnIiwicm93dGFnIiwiU2hlZXROYW1lcyIsImN0YWciLCJ0ZXh0cCIsInRleHRwaWR4IiwidGV4dFIiLCJyb3dfb2wiLCJudW1iZXJfZm9ybWF0X21hcCIsIm1yYW5nZSIsIm1SIiwibUMiLCJyb3dwZWF0IiwiY29scGVhdCIsImF0YWciLCJfUmVmIiwiY3JlYXRvcmlkeCIsImlzc3R1YiIsImludGFibGUiLCJycHRSIiwicnB0IiwibnJhbmdlIiwicHRwIiwicGFyc2Vfb2RzIiwid3JpdGVfc3R5bGVzX29kcyIsIm1hc3Rlcl9zdHlsZXMiLCJ3cml0ZV9jb250ZW50X29kcyIsIndyaXRlX3RleHRfcCIsIm51bGxfY2VsbF94bWwiLCJjb3ZlcmVkX2NlbGxfeG1sIiwiUk9XUyIsIl9GcmVmIiwidGV4dF9wIiwiX3RndCIsIndyaXRlX2F1dG9tYXRpY19zdHlsZXNfb2RzIiwiY2lkeCIsImNvbG9iaiIsImZvZHMiLCJ3cml0ZV9vZHMiLCJ1OF90b19kYXRhdmlldyIsInU4c3RyIiwidTgiLCJzdHJ1OCIsInU4Y29udGFpbnMiLCJ1OGNvbmNhdCIsInU4YSIsInBvcGNudCIsInJlYWREZWNpbWFsMTI4TEUiLCJleHAiLCJtYW50aXNzYSIsIndyaXRlRGVjaW1hbDEyOExFIiwicGFyc2VfdmFyaW50NDkiLCJwdHIiLCJ2YXJpbnQiLCJ3cml0ZV92YXJpbnQ0OSIsInZhcmludF90b19pMzIiLCJpMzIiLCJwYXJzZV9zaGFsbG93Iiwid3JpdGVfc2hhbGxvdyIsInByb3RvIiwibWFwcGEiLCJwYXJzZV9pd2FfZmlsZSIsIndyaXRlX2l3YV9maWxlIiwiaWFzIiwiaWEiLCJtaWRhdGEiLCJhaXBheWxvYWQiLCJtaWQiLCJwYXJzZV9zbmFwcHlfY2h1bmsiLCJjaHVua3MiLCJkZWNvbXByZXNzX2l3YV9maWxlIiwiY29tcHJlc3NfaXdhX2ZpbGUiLCJmcmFtZSIsInBhcnNlX29sZF9zdG9yYWdlIiwicnNzdCIsImR2IiwiZGF0YV9vZmZzZXQiLCJpZWVlIiwicGFyc2VfbmV3X3N0b3JhZ2UiLCJkMTI4Iiwid3JpdGVfbmV3X3N0b3JhZ2UiLCJ3cml0ZV9vbGRfc3RvcmFnZSIsInBhcnNlX2NlbGxfc3RvcmFnZSIsInBhcnNlX1RTUF9SZWZlcmVuY2UiLCJwYiIsInBhcnNlX1RTVF9UYWJsZURhdGFMaXN0IiwibGUiLCJydHAiLCJydHByZWYiLCJtdHlwZSIsInRzd3BzYSIsInBhcnNlX1RTVF9UaWxlUm93SW5mbyIsIl9oIiwiX2wiLCJfbSIsIndpZGVfb2Zmc2V0cyIsInVzZWRfc3RvcmFnZV91OCIsInVzZWRfc3RvcmFnZSIsInVzZWRfc3RvcmFnZV9vZmZzZXRzIiwib2Zmc2V0cyIsInBhcnNlX1RTVF9UaWxlIiwic3RvcmFnZSIsInBhcnNlX1RTVF9UYWJsZU1vZGVsQXJjaGl2ZSIsInRpbGUiLCJ0bCIsIl90aWxlIiwicGFyc2VfVFNUX1RhYmxlSW5mb0FyY2hpdmUiLCJ0YWJsZXJlZiIsInBhcnNlX1ROX1NoZWV0QXJjaGl2ZSIsInNoYXBlb2ZmcyIsInBhcnNlX1ROX0RvY3VtZW50QXJjaGl2ZSIsInNoZWV0b2ZmcyIsInJvb3QyIiwicGFyc2VfbnVtYmVyc19pd2EiLCJpbmRpY2VzIiwicGFja2V0cyIsInBhY2tldCIsImRvY3Jvb3QiLCJpd2FtIiwid3JpdGVfdGlsZV9yb3ciLCJ0cmkiLCJTU1QiLCJsYXN0X29mZnNldCIsImNlbGxfc3RvcmFnZSIsIl9kdiIsIl9sYXN0X29mZnNldCIsIl9jZWxsX3N0b3JhZ2UiLCJjZWxsb2FkIiwiX2NlbGxvYWQiLCJ3cml0ZV9udW1iZXJzX2l3YSIsInRydW5jIiwiZGVwZW5kZW50cyIsIm9sZF9jb250ZW50IiwicmF3MSIsIngyIiwicGFja2V0MiIsInkyIiwiaW5kaWNlc192YXJpbnQiLCJpdmkiLCJtZXNzIiwieGkiLCJzaGVldHJvb3RyZWYiLCJjcnVpZHNyZWYiLCJvbGRidWNrZXQiLCJfeCIsImNydWlkcyIsInV1aWQiLCJyb3dfaGVhZGVycyIsInJvd19oZWFkZXJfcmVmIiwiYmFzZV9idWNrZXQiLCJfYnVja2V0IiwiY29sX2hlYWRlcl9yZWYiLCJzc3RyZWYiLCJzZW50cnkiLCJzeCIsInNzdHJvb3QiLCJzeGkiLCJzc3RkYXRhIiwibmV3c3N0Iiwic3kiLCJyYXczMiIsInRpbGVyZWYiLCJ0ZW50cnkiLCJ0eCIsInRpbGVyb290IiwidGlsZWRhdGEiLCJyb3dsb2FkIiwiUjIiLCJ0aWxlcm93IiwidHkiLCJyYXczIiwiZml4X29wdHNfZnVuYyIsImdldF9zaGVldF90eXBlIiwic2FmZV9wYXJzZV93YnJlbHMiLCJ3YnJlbHMiLCJzYWZlX3BhcnNlX3NoZWV0IiwicmVsc1BhdGgiLCJzaGVldFJlbHMiLCJzdHlwZSIsImRmaWxlIiwiZHJlbHNwIiwiZHJhdyIsImNoYXJ0cCIsImNyZWxzcCIsInRjb21tZW50cyIsInN0cmlwX2Zyb250X3NsYXNoIiwiX3ppcCIsImRpciIsInhsc2IiLCJiaW5uYW1lIiwicHJvcGRhdGEiLCJjdXN0cHJvcHMiLCJkZXBzIiwid2JzaGVldHMiLCJ3YmV4dCIsIndicmVsc2kiLCJ3YnJlbHNmaWxlIiwibm1vZGUiLCJ3c2xvb3AiLCJzbmpzZWVuIiwic25qIiwicGFyc2VfeGxzeGNmYiIsImRzbSIsInNlZHMiLCJlaW5mbyIsIndyaXRlX3ppcF94bHN4YiIsIndyaXRlX3ppcF94bHN4IiwidmJhZm10IiwiX3NuIiwid3NyZWxzIiwiX3R5cGUiLCJuZWVkX3ZtbCIsIm5lZWR0YyIsInJlYWRfY2ZiIiwicmVhZF96aXAiLCJyZWFkX3BsYWludGV4dCIsIm1haW4iLCJyZWFkX3BsYWludGV4dF9yYXciLCJyZWFkX3V0ZjE2IiwiYnN0cmlmeSIsInJlYWRfcHJuIiwicmVhZFN5bmMiLCJhYiIsInZ1Iiwid3JpdGVfY2ZiX2N0ciIsIndyaXRlX3ppcF90eXBlIiwid3JpdGVfemlwX2Rlbm91ZW1lbnQiLCJvb3B0cyIsImZ0eXBlIiwid3JpdGVfY2ZiX3R5cGUiLCJ3cml0ZV9zdHJpbmdfdHlwZSIsImJvbSIsIndyaXRlX3N0eHRfdHlwZSIsIndyaXRlX2JpbmFyeV90eXBlIiwid3JpdGVTeW5jIiwic2hlZXRfdG9fdHh0Iiwic2hlZXRfdG9fY3N2IiwibWFrZV9qc29uX3JvdyIsImRlZnZhbCIsInJhdyIsImlzZW1wdHkiLCJvdXRpIiwiY291bnRlciIsImhlYWRlcl9jbnQiLCJxcmVnIiwibWFrZV9jc3Zfcm93IiwiRlMiLCJ0eHQiLCJlbmRyZWdleCIsInNoZWV0X3RvX2Zvcm11bGFlIiwiY21kcyIsInNoZWV0X2FkZF9qc29uIiwianMiLCJKUyIsIndzX2dldF9jZWxsX3N0dWIiLCJqc29uX3RvX3NoZWV0IiwiUkMiLCJ3Yl9zaGVldF9pZHgiLCJzaCIsInJvbGwiLCJib29rX3NldF9zaGVldF92aXNpYmlsaXR5IiwidmlzIiwiY2VsbF9zZXRfbnVtYmVyX2Zvcm1hdCIsImNlbGxfc2V0X2h5cGVybGluayIsImNlbGxfc2V0X2ludGVybmFsX2xpbmsiLCJjZWxsX2FkZF9jb21tZW50IiwiYXV0aG9yIiwic2hlZXRfc2V0X2FycmF5X2Zvcm11bGEiLCJkeW5hbWljIiwicm5nc3RyIiwic2hlZXRfZnJvbV9hcnJheV9vZl9hcnJheXMiLCJYTFNYLnV0aWxzIiwiWExTWC5TU0YiLCJleHBvcnRfanNvbl90b19leGNlbCIsInRoIiwianNvbkRhdGEiLCJkZWZhdWx0VGl0bGUiLCJ3c19uYW1lIiwid2JvdXQiLCJYTFNYLndyaXRlIiwiRmlsZVNhdmVyIiwicHJvY2Vzc0NzdkRhdGEiLCJkYXRhU3RyaW5nIiwiZGF0YVN0cmluZ0xpbmVzIiwiaW1wb3J0Q3N2RnJvbUZpbGUiLCJyZWFkZXIiLCJYTFNYLnJlYWQiLCJ3c25hbWUiLCJpbXBvcnRlZCIsInRyYW5zZm9ybUV4cG9ydENvbHVtbiIsIl9wYXJhbXMiLCJDc3YiLCJFeHBvcnRDc3YiLCJFeGNlbC5leHBvcnRfanNvbl90b19leGNlbCJdLCJtYXBwaW5ncyI6IjIxQ0FJQSxNQUFNQSxHQUFxQixDQUN6QixjQUFjQyxFQUE0QixDQUN4QyxNQUFPLEVBQ1QsRUFDQSxlQUFlQyxFQUFnQixDQUN2QixLQUFBLENBQUUsQ0FBTSxFQUFBQSxFQUNSQyxFQUFNQyxHQUNIQyxXQUFTLElBQ1AsRUFBRUQsQ0FBSSxDQUNkLEVBRUdFLEVBQUtDLGFBQVUsTUFDZCxNQUFBLENBQ0wsS0FBTSxDQUFFLEVBQ1IsT0FBUSxDQUFFLEVBQ1YsT0FBUSxDQUNOLFVBQVcsQ0FDVCxHQUFJLDJCQUNKLFNBQVUsR0FDVixJQUFLLENBQ0gsS0FBTSxDQUNQLENBQ0YsRUFDRCxRQUFTLENBQ1AsR0FBR0QsRUFBRyxLQUFLLGFBRVgsYUFBYyxFQUNmLEVBQ0QsZ0JBQWdCLENBQUUsUUFBQUUsR0FBYyxDQUMxQkEsSUFBWSxVQUNkRixFQUFHLGFBQWEsTUFBTSxDQUFFLFFBQVMsRUFBRSx5QkFBeUIsRUFBRyxDQUVuRSxFQUNBLFNBQVUsR0FDVixLQUFNLEdBQ04sUUFBUyxDQUNQLE9BQVEsQ0FDTixVQUFXLENBQ1QsdUJBQXdCLEVBQ3pCLEVBQ0QsS0FBTUEsRUFBRyxNQUFNLE1BQ2hCLEVBQ0QsTUFBTyxDQUNMLFVBQVcsQ0FDVCxzQkFBdUIsRUFDeEIsRUFDRCxLQUFNQSxFQUFHLE1BQU0sT0FDaEIsQ0FDRixDQUNGLEVBQ0QsS0FBTSxDQUNKLGVBQWdCLE9BQ2hCLGNBQWUsUUFDZixXQUFZLFFBQ1osTUFBTyxDQUNMLHdCQUF5QixTQUMxQixFQUNELElBQUssQ0FDSCxPQUFRLEVBQ1QsRUFDRCxJQUFLLENBQUUsS0FBTSxFQUFJLEVBQ2pCLFdBQVksUUFDWixTQUFVLENBQUUsS0FBTSxDQUFHLEVBQ3JCLFdBQVksQ0FBRSxLQUFNLEVBQUksRUFDeEIsUUFBUyxDQUNQLEdBQUlBLEVBQUcsT0FBTyxLQUNkLEdBQUdBLEVBQUcsWUFBWSxlQUFlQSxFQUFHLE9BQU8sS0FBTSxPQUFPLEVBQ3hELEdBQUdBLEVBQUcsWUFBWSxjQUFjQSxFQUFHLE9BQU8sSUFBSSxFQUM5QyxVQUFXLEdBQ1gsZUFBZ0IsR0FDaEIsR0FBR0EsRUFBRyxPQUFPLE9BQVEsRUFDckIsUUFBUyxDQUNQLE9BQVEsQ0FDTixLQUFNSCxFQUFHLGdCQUFnQixFQUN6QixNQUFPLEVBQ1AsTUFBTyxDQUFDLENBQUUsUUFBQU0sS0FBYSxJQUV2QixDQUNELEVBQ0QsTUFBTyxDQUNMLEtBQU1OLEVBQUcsZUFBZSxFQUN4QixNQUFPLEVBQ1AsTUFBTyxDQUFDLENBQUUsTUFBQU8sS0FBVyxJQUVyQixDQUNELEVBQ0QsR0FBSSxDQUNGLEtBQU1QLEVBQUcsWUFBWSxFQUNyQixNQUFPLEVBQ1AsS0FBTSxVQUNOLE1BQU8sTUFBTyxDQUFFLE9BQUFRLEtBQVksQ0FDMUIsTUFBTUEsR0FDUixDQUNELENBQ0YsQ0FDRixDQUNGLEVBQ0QsUUFBUyxDQUNQLFFBQVMsQ0FDUCxNQUFPUixFQUFHLGtCQUFrQixDQUM3QixDQUNGLEVBQ0QsU0FBVSxDQUNSLFFBQVMsQ0FDUCxNQUFPQSxFQUFHLG1CQUFtQixDQUM5QixDQUNGLEVBQ0QsU0FBVSxDQUNSLFFBQVMsQ0FDUCxNQUFPQSxFQUFHLG1CQUFtQixFQUM3QixRQUFTLENBQ1AsTUFBTyxDQUNMLEtBQU0sRUFDUCxFQUNELE9BQVEsQ0FDTixLQUFNLEVBQ1AsQ0FDRixDQUNGLENBQ0YsRUFDRCxVQUFXLENBQ1QsTUFBTyxRQUNQLE1BQU9BLEVBQUcsb0JBQW9CLEVBQzlCLE1BQU8sSUFDUCxTQUFVLENBRVIsS0FBTSxDQUNKLEtBQU0sS0FDTixLQUFNLFVBQ04sS0FBTUcsRUFBRyxNQUFNLElBQ2hCLENBQ0YsQ0FDRixFQUNELFdBQVksQ0FDVixXQUFZLEdBQ1osU0FBVSxHQUNWLENBQUNBLEVBQUcsV0FBVyxXQUFXLEVBQUcsRUFDN0IsQ0FBQ0EsRUFBRyxXQUFXLEtBQUssRUFBRyxFQUN2QixVQUFXLENBQUMsRUFBRyxHQUFJLEdBQUksRUFBRSxFQUN6QixPQUFRLDBDQUNSLGdCQUFpQixHQUNqQixnQkFBaUIsR0FDakIsZUFBZ0IsR0FDaEIsVUFBWU0sR0FBa0IsRUFBRSwwQkFBMkIsQ0FBQ0EsQ0FBSyxDQUFDLENBQ25FLEVBQ0QsTUFBTyxDQUNMLEtBQU0sR0FDTixPQUFRLE9BQ1IsT0FBUU4sRUFBRyxNQUFNLGNBQ2pCLE9BQVEsR0FDUixPQUFRLEdBQ1IsU0FBVSxHQUNWLFdBQVksR0FDWixxQkFBc0IsR0FDdEIsU0FBVSxDQUFFLFFBQVMsR0FBTyxPQUFRLGNBQWdCLEVBQ3BELFdBQVksRUFDYixFQUNELFFBQVMsQ0FDUCxRQUFTLEdBQ1QsUUFBUyxDQUNQLE9BQVEsQ0FDTixVQUFXLENBQ1Qsd0JBQXlCLEVBQzFCLENBQ0YsRUFDRCxRQUFTLENBQ1AsVUFBVyxDQUNULHlCQUEwQixFQUMzQixDQUNGLEVBQ0QsUUFBUyxDQUNQLFVBQVcsQ0FDVCx5QkFBMEIsRUFDM0IsQ0FDRixFQUNELE9BQVEsQ0FDTixVQUFXLENBQ1Qsd0JBQXlCLEVBQzFCLENBQ0YsRUFDRCxRQUFTLENBQ1AsVUFBVyxDQUNULHlCQUEwQixFQUMzQixDQUNGLENBQ0YsQ0FDRixFQUNELFVBQVcsQ0FDVCxRQUFTLENBQ1AsSUFBSyxDQUNILFVBQVcsQ0FDVCx1QkFBd0IsRUFDekIsRUFDRCxLQUFNLFVBQ04sS0FBTUgsRUFBRyxrQkFBa0IsQ0FDNUIsQ0FDRixDQUNGLENBQUEsQ0FFTCxHQzFNRixTQUFTVSxJQUFhLE9BRXBCLE9BQU9DLEVBREcsSUFBSSxRQUNMLFFBQUYsWUFBQUEsRUFBUyxNQUFNO0FBQUEsR0FBTSxFQUM5QixDQUVBLE1BQU1DLEdBQVEsSUFBSUMsSUFBZSxDQUFBLEVBRWpDLFNBQVNDLE1BQVdELEVBQVMsQ0FHM0IsUUFBUSxJQUFPLE1BQU0sS0FBTSxTQUFTLENBQ3RDLENBQ0EsU0FBU0UsTUFBV0YsRUFBUyxDQUduQixRQUFBLEtBQUssTUFBTSxLQUFNLFNBQVMsQ0FDcEMsQ0FDQSxTQUFTRyxNQUFZSCxFQUFTLENBR3BCLFFBQUEsTUFBTSxNQUFNLEtBQU0sU0FBUyxDQUNyQyxDQUNBLE1BQU1JLEdBQVEsSUFBSUosSUFBYSxDQUNwQkcsR0FBQSxhQUFjLG9CQUFxQixHQUFHSCxDQUFJLENBQ3JELEVBQ01LLEdBQU8sSUFBSUwsSUFBYSxDQUNwQkUsR0FBQSxZQUFhLG9CQUFxQixHQUFHRixDQUFJLENBQ25ELEVBQ01NLEdBQU8sSUFBSU4sSUFBYSxDQUNwQkMsR0FBQSxZQUFhLG9CQUFxQixHQUFHRCxDQUFJLENBQ25ELEVBQ01PLEdBQVEsSUFBSVAsSUFBYSxDQUN6QixHQUFBLENBQUMsUUFBUSxJQUNYLE9BRUYsTUFBTVEsRUFBYVgsS0FDSSxDQUNyQixNQUFNWSxFQUFNLENBQUMsYUFBYyxvQkFBcUIsR0FBR1QsQ0FBSSxFQUN2REMsR0FBUSxHQUFHUSxDQUFHLEVBQ2QsTUFBTUMsRUFBUyxDQUFDLE1BQVFGLEVBQVksWUFBWSxFQUNoRFAsR0FBUSxHQUFHUyxDQUFNLENBSWxCLENBQ0gsRUFDTUMsR0FBUyxDQUNiLE1BQU9aLEdBQ1AsS0FBTUEsR0FDTixLQUFNQSxHQUNOLE1BQU9BLEdBQ1AsSUFBS0EsSUFJUyxTQUFBYSxHQUFVMUIsRUFBWSxHQUFFLENBQ2hDLE1BQUEyQixHQUFRM0IsR0FBQSxZQUFBQSxFQUFNLFFBQVMsT0FNN0IsT0FMQXlCLEdBQU8sTUFBUVosR0FDZlksR0FBTyxLQUFPWixHQUNkWSxHQUFPLEtBQU9aLEdBQ2RZLEdBQU8sTUFBUVosR0FDZlksR0FBTyxJQUFNWixHQUNMYyxFQUFPLENBQ2IsSUFBSyxRQUNIRixHQUFPLE1BQVFKLEdBQ2pCLElBQUssT0FDSEksR0FBTyxLQUFPTCxHQUNkSyxHQUFPLElBQU1MLEdBQ2YsSUFBSyxPQUNISyxHQUFPLEtBQU9OLEdBQ2hCLElBQUssUUFDSE0sR0FBTyxNQUFRUCxHQUNmLEtBQ0gsQ0FDSCxDQUNBUSxLQzVFQSxTQUFTRSxHQUFRQyxFQUFxQixDQUM3QixPQUFBQSxHQUFTLE1BQVFBLElBQVUsRUFDcEMsQ0FDQSxTQUFTQyxNQUFjQyxFQUFXLENBQ2hDLFVBQVdGLEtBQVNFLEVBQ2QsR0FBQSxFQUFBRixHQUFTLE1BQVFBLElBQVUsSUFFdEIsTUFBQSxHQUdKLE1BQUEsRUFDVCxDQUNBLFNBQVNHLE1BQVlELEVBQVcsQ0FDOUIsVUFBV0YsS0FBU0UsRUFDZCxHQUFBRixHQUFTLE1BQVFBLElBQVUsR0FDdEIsTUFBQSxHQUdKLE1BQUEsRUFDVCxDQUNBLE1BQU1JLEdBQWMsQ0FDbEIsUUFBQUwsR0FDQSxXQUFBRSxHQUNBLFNBQUFFLElDakJhRSxHQUFBLENBRWIsTUFBTWhDLEVBQVksQ0FPbEIsR0NaRixTQUFTaUMsR0FBcUJDLEVBQU8sQ0FDbkMsT0FBT0MsdUJBQXFCLENBQzFCLE9BQVFELEVBQ1IsUUFBUWxCLEVBQU9vQixFQUFPQyxFQUFNQyxFQUFRLENBQzFCLFFBQUEsTUFBTSxhQUFjdEIsQ0FBSyxFQUM3QkEsRUFBTSxRQUFRLE1BQU0sT0FBTyxHQUFLc0IsR0FBWSxTQVFsRCxDQUFBLENBQ0QsQ0FDSCxDQUNBLFNBQVNDLEdBQXNCQyxFQUFVeEMsRUFBY2tDLEVBQVNPLEVBQVksQ0FDcEUsTUFBQUMsRUFBaUJULEdBQXFCQyxDQUFFLEVBQzFDTSxFQUFBLFVBQVV4QyxFQUFNMEMsRUFBZ0JELENBQU8sQ0FDN0MsQ0FFQSxTQUFTRSxHQUF1QkgsRUFBVUksRUFBY0MsRUFBZUMsRUFBa0JDLEVBQWMsQ0FDckcsTUFBTUMsRUFBVUMsR0FBa0JMLEVBQVNFLEVBQWFDLENBQVMsRUFDakVHLEVBQUUsUUFBUUYsRUFBUyxDQUFDRyxFQUFNQyxJQUFPLENBQzNCUCxHQUFZQSxFQUFTLFFBQVFPLENBQUcsR0FBSyxJQUduQmIsR0FBQUMsRUFBS1ksRUFBS0QsRUFBTSxJQUFJLENBQUEsQ0FDM0MsQ0FDSCxDQUVBLFNBQVNFLEdBQXNCYixFQUFVSSxFQUFjQyxFQUFlQyxFQUFrQkMsRUFBYyxDQUNwRyxNQUFNQyxFQUFlQyxHQUFrQkwsRUFBU0UsRUFBYUMsQ0FBUyxFQUN0RUcsRUFBRSxRQUFRRixFQUFTLENBQUNHLEVBQVdDLElBQU8sQ0FDaENQLEdBQVlBLEVBQVMsUUFBUU8sQ0FBRyxHQUdoQ1osRUFBQSxVQUFVWSxFQUFLRCxFQUFLLE9BQU8sQ0FBQSxDQUNoQyxDQUNILENBQ0EsU0FBU0YsR0FBa0JMLEVBQWNFLEVBQW1CQyxFQUFlLENBQ3pFLE1BQU1PLEVBQWtCLENBQUEsRUFDeEIsT0FBSVIsR0FBZSxPQUNIQSxFQUFBLDBCQUVoQkksRUFBRSxRQUFRTixFQUFTLENBQUNPLEVBQU1DLElBQU8sQ0FFekIsTUFBQUcsRUFBU0gsRUFBSSxNQUFNTixDQUFXLEVBQ2hDLElBQUFTLEdBQUEsWUFBQUEsRUFBUSxTQUFVLEVBQUcsQ0FDZixRQUFBLE1BQU0sSUFBSUgsQ0FBRyw2REFBNkQsRUFDbEYsTUFDRCxDQUNHLElBQUFwRCxFQUFPdUQsRUFBTyxDQUFDLEVBR1p2RCxFQUFBa0QsRUFBRSxVQUFVbEQsQ0FBSSxFQUNoQkEsRUFBQWtELEVBQUUsV0FBV2xELENBQUksRUFFcEIrQyxJQUNGSSxFQUFPSixFQUFVSSxDQUFJLEdBRXZCRyxFQUFXdEQsQ0FBSSxFQUFJbUQsQ0FBQSxDQUNwQixFQUNNRyxDQUNULENBRUEsU0FBU0UsR0FBMkJaLEVBQVksQ0FDeEMsTUFBQUksRUFBZUMsR0FBa0JMLENBQU8sRUFDeENhLEVBQVcsQ0FBQSxFQUNqQixPQUFBUCxFQUFFLFFBQVFGLEVBQVMsQ0FBQ0csRUFBTUMsSUFBTyxDQUMzQkssRUFBQUwsQ0FBRyxFQUFJbkIsR0FBcUJrQixDQUFJLENBQUEsQ0FDckMsRUFDTU0sQ0FDVCxDQUVBLFNBQVNDLEdBQXNCZCxFQUFZLENBQ25DLE1BQUFJLEVBQVVDLEdBQWtCTCxDQUFPLEVBQ25DYSxFQUFXLENBQUEsRUFDakIsT0FBQVAsRUFBRSxRQUFRRixFQUFTLENBQUNHLEVBQU1DLElBQU8sQ0FDM0JLLEVBQUFMLENBQUcsRUFBSUQsRUFBSyxPQUFBLENBQ2pCLEVBQ01NLENBQ1QsQ0FFZSxNQUFBRSxHQUFBLENBQ2Isa0JBQUFWLEdBQ0EsdUJBQUFOLEdBQ0Esc0JBQUFVLEdBQ0EscUJBQUFwQixHQUNBLDJCQUFBdUIsR0FDQSxzQkFBQUUsSUMzRkYsTUFBcUJFLEVBQVUsQ0FJN0IsWUFBWTlELEVBQW9HLENBSGhIK0QsR0FBQSxZQUNBQSxHQUFBLGdCQUNBQSxHQUFBLHNCQUVFLEtBQU0sQ0FBRSxRQUFBQyxFQUFTLFVBQUFDLEVBQVcsUUFBQUMsQ0FBQSxFQUFZbEUsRUFDeEMsS0FBSyxJQUFNLEtBQUssV0FBV2dFLEVBQVNFLENBQU8sRUFDdEMsS0FBQSxRQUFVLEtBQUssV0FBV0QsQ0FBUyxFQUN4QyxLQUFLLGNBQWdCakUsRUFBSyxhQUM1QixDQUVBLFdBQVdFLEVBQVksQ0FDckIsTUFBTWlFLEVBQVMsVUFDWCxPQUFBakUsR0FBUSxPQUFPQSxHQUFTLFNBQ25CaUUsRUFBUyxJQUFNakUsRUFFakJpRSxDQUNULENBRUEsTUFBTSxVQUFRLENBQ1osTUFBTUMsRUFBUSxhQUFhLFFBQVEsS0FBSyxPQUFPLEVBQy9DLEdBQUlBLEdBQVMsS0FHTixPQUFBLEtBQUssTUFBTUEsQ0FBSyxDQUN6QixDQUVBLE1BQU0sVUFBVUMsRUFBVSxDQUN4QixhQUFhLFFBQVEsS0FBSyxRQUFTLEtBQUssVUFBVUEsQ0FBSyxDQUFDLENBQzFELENBRUEsTUFBTSxZQUFVLENBQ0QsYUFBQSxXQUFXLEtBQUssT0FBTyxDQUN0QyxDQUVBLE1BQU0saUJBQWlCeEMsRUFBWXlCLEVBQU0sS0FBSyxJQUFHLENBQy9DLEdBQUksS0FBSyxjQUFlLENBQ3RCLE1BQU0sS0FBSyxjQUFjLElBQUlBLEVBQUt6QixDQUFLLEVBQ3ZDLE1BQ0QsQ0FFRyxJQUFBd0MsRUFBUSxNQUFNLEtBQUssV0FDbkJBLEdBQVMsT0FDWEEsRUFBUSxDQUFBLEdBRVZBLEVBQU1mLENBQUcsRUFBSXpCLEVBQ1AsTUFBQSxLQUFLLFVBQVV3QyxDQUFLLENBQzVCLENBRUEsV0FBV0MsRUFBYUosRUFBWSxDQUNsQyxJQUFJWixFQUFNLFNBQVMsS0FJbkIsT0FISWdCLElBQ0ZoQixFQUFNZ0IsRUFBTyxNQUVYSixHQUFXLE1BQVEsT0FBT0EsR0FBWSxVQUFZLENBQUNBLEVBQzlDWixFQUVGQSxFQUFNLElBQU1ZLENBQ3JCLENBRUEsTUFBTSxjQUFjWixFQUFjLEtBQUssSUFBRyxDQUN4QyxHQUFJLEtBQUssY0FDUCxPQUFPLE1BQU0sS0FBSyxjQUFjLElBQUlBLENBQUcsRUFFbkMsTUFBQWUsRUFBUSxNQUFNLEtBQUssV0FDekIsT0FBSUEsR0FBUyxLQUNKLEtBRUZBLEVBQU1mLENBQUcsQ0FDbEIsQ0FFQSxNQUFNLGdCQUFnQkEsRUFBYyxLQUFLLElBQUcsQ0FDMUMsR0FBSSxLQUFLLGNBQWUsQ0FDaEIsTUFBQSxLQUFLLGNBQWMsT0FBT0EsQ0FBRyxFQUNuQyxNQUNELENBQ0ssTUFBQWUsRUFBUSxNQUFNLEtBQUssV0FDckJBLEdBQVMsT0FHYixPQUFPQSxFQUFNZixDQUFHLEVBQ1YsTUFBQSxLQUFLLFVBQVVlLENBQUssRUFDNUIsQ0FDRCxDQ3JGRCxNQUFNRSxHQUFhLEtBQ2JDLEdBQVkseUJBQ1pDLEdBQVMsS0FFZixTQUFTQyxNQUFhQyxFQUFVLENBQ3ZCLE9BQUFBLEVBQU0sT0FBTyxDQUFDQyxFQUFVQyxJQUFZRCxFQUFPLENBQUNDLEdBQUtBLEVBQUUsV0FBVyxHQUFHLEVBQUksR0FBR0QsQ0FBRyxHQUFHQyxDQUFDLEdBQUssR0FBR0QsQ0FBRyxJQUFJQyxDQUFDLEdBQU1BLEVBQUksRUFBRSxDQUNwSCxDQUVBLFNBQXdCQyxHQUFnQjFCLEVBQU0sQ0FDbkMsU0FBQTJCLEVBQWFDLEtBQWNDLEVBQWEsQ0FFM0MsR0FESkEsRUFBV0EsRUFBUyxPQUFRSixHQUFXQSxJQUFNLE1BQVMsRUFDbER6QixFQUFFLFNBQVM0QixDQUFJLEVBQVUsT0FBQU4sR0FBVSxHQUFHTyxFQUFVRCxDQUFJLEVBQ3BELEdBQUMsTUFBTSxRQUFRQSxDQUFJLEVBQ1osT0FBQUMsRUFBQVAsR0FBVSxHQUFHTyxDQUFRLEVBQ3pCRCxFQUFLLE9BQU8sQ0FBQ0osRUFBSy9DLElBQVMsQ0FDaEMsTUFBTXFELEVBQU8sT0FBT3JELEVBQ3BCLE9BQUlxRCxJQUFTLFNBQ1ByRCxFQUFRLEdBQUtBLEVBQVEsSUFBTSxFQUN0QixHQUFHK0MsQ0FBRyxLQUFLL0MsQ0FBSyxLQUVoQixHQUFHK0MsQ0FBRyxJQUFJL0MsQ0FBSyxJQUVmcUQsSUFBUyxTQUNYLEdBQUdOLENBQUcsS0FBSy9DLENBQUssS0FDYkEsRUFHUDBDLEdBQVcsS0FBSzFDLENBQUssRUFHdEIyQyxHQUFVLEtBQUszQyxDQUFLLEVBQ2xCK0MsRUFDSyxHQUFHQSxDQUFHLElBQUkvQyxDQUFLLEdBRWYsR0FBRytDLENBQUcsR0FBRy9DLENBQUssR0FHbEIsR0FBRytDLENBQUcsS0FBSy9DLEVBQU0sUUFBUTRDLEdBQVEsS0FBSyxDQUFDLEtBVHJDLEdBQUdHLENBQUcsSUFBSS9DLENBQUssSUFIZixHQUFHK0MsQ0FBRyxRQWFkSyxDQUFRLENBQ2IsQ0FDTyxPQUFBRixDQUNULENBRUFELEdBQWdCLGFBQWUsR0MxQy9CLE1BQU1OLEdBQVkseUJBQ1pDLEdBQVMsS0FDVFUsR0FBTSxPQUFPLFVBQVUsZUFFdkIsU0FBVUMsR0FBU3ZELEVBQVUsQ0FDakMsTUFBTXFELEVBQU8sT0FBT3JELEVBQ3BCLE9BQU9BLEdBQVMsT0FBU3FELEdBQVEsVUFBWUEsR0FBUSxXQUN2RCxDQUVBLFNBQXdCRyxHQUFXakMsRUFBTSxDQUNqQyxNQUFBMkIsRUFBZUQsR0FBZ0IxQixDQUFDLEVBRXRDLFNBQVNrQyxFQUFRakMsRUFBUyxDQUN4QixLQUFNLENBQUUsUUFBQVYsRUFBUyxJQUFBNEMsRUFBSyxTQUFBQyxDQUFBLEVBQWFuQyxFQUMzQlYsRUFBQSxnQkFBa0JBLEVBQVEsWUFBYyxRQUNoRFUsRUFBSyxNQUFRLEVBRWIsSUFBSW9DLEVBQVMsR0FDYixNQUFNQyxFQUFVLEtBQ0xELEVBQUEsR0FDRixJQUdULEtBQU9wQyxHQUNELENBQUFvQyxHQURPLENBRVAsR0FBQSxDQUFDcEMsRUFBSyxPQUFRLENBSWhCLEdBSEFBLEVBQUssT0FBUyxHQUNkQSxFQUFLLEtBQU9zQyxHQUFjdEMsRUFBSyxNQUFPVixFQUFRLGlCQUFpQixFQUUzREEsRUFBUSxnQkFDVlUsRUFBSyxvQkFBc0IsR0FDM0JBLEVBQUssZUFBaUIsS0FDdEJBLEVBQUssV0FBYSxHQUNkQSxFQUFLLEtBQUssVUFBWSxDQUFDQSxFQUFLLEtBQUssU0FBUyxDQUM1QyxJQUFJdUMsRUFBU3ZDLEVBQUssT0FDbEIsS0FBT3VDLEdBQVEsQ0FDVCxHQUFBQSxFQUFPLFFBQVV2QyxFQUFLLE1BQU8sQ0FDL0JBLEVBQUssV0FBYSxHQUNsQkEsRUFBSyxlQUFpQnVDLEVBQ3RCdkMsRUFBSyxvQkFBc0JBLEVBQUssTUFBUXVDLEVBQU8sTUFBUSxFQUN2RCxLQUNELENBQ0RBLEVBQVNBLEVBQU8sTUFDakIsQ0FDRixDQXNCSCxHQW5CQXZDLEVBQUssU0FBVyxHQUNaVixFQUFRLGNBQ1ZBLEVBQVEsYUFBYSxRQUFRLENBQUNrRCxFQUFTQyxJQUFVLENBQy9DLE1BQU1DLEVBQVczQyxFQUFFLElBQUlDLEVBQUssTUFBT3dDLENBQUUsRUFDL0J6RSxFQUFZdUUsR0FBY0ksRUFBVXBELEVBQVEsaUJBQWlCLEVBQzlEdkIsRUFBSyxTQUNIaUMsRUFBQSxTQUFTLEtBQUssQ0FBQ3dDLEVBQUlsRCxFQUFRLGdCQUFnQm1ELENBQUMsRUFBR0MsRUFBVTNFLENBQUksQ0FBQyxDQUNwRSxDQUNGLEVBR0hpQyxFQUFLLE9BQ0hBLEVBQUssWUFDSlYsRUFBUSxlQUFpQixRQUFhLENBQUNVLEVBQUssU0FBUyxRQUN0RCxDQUFDQSxFQUFLLEtBQUssVUFDWEEsRUFBSyxLQUFLLFFBRVBBLEVBQUEsY0FBZ0JBLEVBQUssT0FBU1YsRUFBUSxlQUFpQixDQUFDQSxFQUFRLFlBQWNVLEVBQUssUUFFcEZBLEVBQUssYUFBYyxDQUNyQixNQUFNMkMsRUFBZ0IsSUFBSUMsR0FBY1YsRUFBSzVDLEVBQVMrQyxDQUFPLEVBQy9DTSxFQUFBLFFBQVEzQyxFQUFNLEVBQUssRUFDN0IsR0FBQSxDQUNHQSxFQUFBLElBQU1tQyxFQUFTbkMsRUFBSyxNQUFPQSxFQUFLLElBQUtBLEVBQUssUUFBVUEsRUFBSyxPQUFPLE1BQU8yQyxDQUFhLFFBQ2xGRSxFQUFVLENBQ2pCLE1BQUlBLEVBQUksVUFDTkEsRUFBSSxTQUFXO0FBQUE7QUFBQSxFQUFnRG5CLEVBQWExQixFQUFLLElBQUksR0FHakY2QyxDQUNQLENBQ0YsQ0FFRCxHQUFJVCxFQUNGLE1BR0VwQyxFQUFLLE1BQVEsSUFDWCxDQUFDb0MsR0FBVSxDQUFDcEMsRUFBSyxZQUFjQSxFQUFLLEtBQUssV0FDdkNWLEVBQVEsZUFBaUIsU0FBY1UsRUFBSyxPQUFTLENBQUNWLEVBQVEsaUJBQ2hFVSxFQUFLLGNBQWdCLEdBQ2pCQSxFQUFLLFNBQVMsUUFDWEEsRUFBQSxTQUFTLFFBQVEsQ0FBQyxDQUFDd0MsRUFBSU0sRUFBS0osRUFBVTNFLENBQUksSUFBVSxDQUN2RGlDLEVBQUssY0FBZ0IsQ0FDbkIsR0FBR0EsRUFBSyxjQUNSLEdBQUlqQyxFQUFLLFFBQ0xnRixFQUFZL0MsRUFBTTBDLEVBQVVwRCxFQUFTa0QsRUFBSU0sQ0FBRyxFQUM1Q0UsRUFBZWhELEVBQU0wQyxFQUFVcEQsRUFBU2tELEVBQUlNLENBQUcsQ0FBQSxFQUV0RCxHQUdFOUMsRUFBQSxjQUFnQkEsRUFBSyxLQUFLLFFBQzNCK0MsRUFBWS9DLEVBQU1BLEVBQUssTUFBT1YsRUFBUyxDQUFBLEVBQUksRUFBRSxFQUM3QzBELEVBQWVoRCxFQUFNQSxFQUFLLE1BQU9WLEVBQVMsR0FBSSxFQUFFLEdBSzFEVSxFQUFLLGtCQUFvQixFQUMxQixDQUNELEdBQUlBLEVBQUssZUFBaUJBLEVBQUssa0JBQW9CQSxFQUFLLGNBQWMsT0FBUyxFQUFHLENBQzNFQSxFQUFBLG9CQUNMQSxFQUFLLGNBQWNBLEVBQUssaUJBQWlCLEVBQUUsV0FBYUEsRUFDakRBLEVBQUFBLEVBQUssY0FBY0EsRUFBSyxpQkFBaUIsRUFDaEQsUUFDRCxDQUVHLEdBQUFBLEVBQUssY0FBZ0JWLEVBQVEscUJBQXNCLENBQ3JELE1BQU1xRCxFQUFnQixJQUFJQyxHQUFjVixFQUFLNUMsRUFBUytDLENBQU8sRUFDL0NNLEVBQUEsUUFBUTNDLEVBQU0sRUFBSSxFQUU1QixHQUFBLENBQ09tQyxFQUFBbkMsRUFBSyxNQUFPQSxFQUFLLElBQUtBLEVBQUssUUFBVUEsRUFBSyxPQUFPLE1BQU8yQyxDQUFhLFFBQ3ZFRSxFQUFVLENBQ2pCLE1BQUlBLEVBQUksVUFDTkEsRUFBSSxTQUFXO0FBQUE7QUFBQSxFQUErQ25CLEVBQWExQixFQUFLLElBQUksR0FHaEY2QyxDQUNQLENBQ0YsQ0FDRDdDLEVBQU9BLEVBQUssVUFDYixDQUNILENBRU8sT0FBQWlDLEVBRVAsU0FBU2MsRUFBWS9DLEVBQVcwQyxFQUFlcEQsRUFBYzJELEVBQW1CQyxFQUFvQixDQUM5RixJQUFBQyxFQUNDN0QsRUFBUSxrQkFDWDZELEVBQXFCbkQsRUFBSyxTQUFXLEdBRWpDa0QsR0FBbUJDLEdBQXNCLENBQUNELEVBQWdCLFdBQVcsR0FBRyxJQUNwREMsR0FBQSxLQUV4QkEsR0FBc0JELEdBQW1CLElBRTNDLE1BQU1FLEVBQU0sQ0FBQSxFQUNaLFFBQVNYLEVBQUksRUFBR0EsRUFBSUMsRUFBUyxPQUFRRCxJQUFLLENBQ2xDLE1BQUFZLEVBQU1YLEVBQVNELENBQUMsRUFDdEIsR0FBSVksSUFBUSxRQUFhLEVBQUVaLEtBQUtDLEdBQzlCLFNBRUUsSUFBQVksRUFDRSxNQUFBQyxFQUFtQixDQUFDakUsRUFBUSxnQkFDOUJpRSxJQUNhRCxFQUFBLEdBQUdILENBQWtCLElBQUlWLENBQUMsS0FFM0NXLEVBQUksS0FBSyxDQUNQLE1BQU9DLEVBQ1AsSUFBS1osRUFBSSxHQUNULEtBQU0sQ0FBQyxHQUFJekMsRUFBSyxNQUFRLENBQUssRUFBQSxHQUFHaUQsRUFBY1IsRUFBSSxFQUFFLEVBQ3BELFFBQVNhLEVBQ1QsTUFBT3RELEVBQUssTUFBUSxFQUNwQixPQUFRLENBQ04sTUFBT0EsRUFBSyxNQUNaLElBQUtBLEVBQUssSUFDVixLQUFNdUQsRUFBbUJ2RCxFQUFLLFFBQVVBLEVBQUssS0FDN0MsT0FBUUEsRUFBSyxPQUNiLE1BQU9BLEVBQUssTUFDWixLQUFNQSxFQUFLLElBQ1osRUFDRCxhQUFlaUQsRUFBYSxRQUFVQSxHQUFpQixPQUN2RCxnQkFBaUJDLEdBQW1CLE1BQUEsQ0FDckMsQ0FDRixDQUNNLE9BQUFFLENBQ1QsQ0FFQSxTQUFTSixFQUFlaEQsRUFBVzBDLEVBQWVwRCxFQUFjMkQsRUFBbUJDLEVBQW9CLENBQ2pHLElBQUFDLEVBQ0M3RCxFQUFRLGtCQUNYNkQsRUFBcUJuRCxFQUFLLFNBQVcsR0FFakNrRCxHQUFtQkMsR0FBc0IsQ0FBQ0QsRUFBZ0IsV0FBVyxHQUFHLElBQ3BEQyxHQUFBLEtBRXhCQSxHQUFzQkQsR0FBbUIsSUFFM0MsTUFBTUUsRUFBTSxDQUFBLEVBQ05HLEVBQW1CLENBQUNqRSxFQUFRLGdCQUNsQyxVQUFXa0UsS0FBWWQsRUFBVSxDQUMvQixHQUFJcEQsRUFBUSxtQkFBcUIsQ0FBQ3dDLEdBQUksS0FBS1ksRUFBVWMsQ0FBUSxFQUMzRCxTQUdFLElBQUFGLEVBQ0FDLElBQ0VwQyxHQUFVLEtBQUtxQyxDQUFRLEVBQ3JCTCxFQUNhRyxFQUFBLEdBQUdILENBQWtCLElBQUlLLENBQVEsR0FFaERGLEVBQWUsR0FBR0UsQ0FBUSxHQUc1QkYsRUFBZSxHQUFHSCxDQUFrQixLQUFLSyxFQUFTLFFBQVFwQyxHQUFRLEtBQUssQ0FBQyxNQUk1RWdDLEVBQUksS0FBSyxDQUNQLE1BQU9WLEVBQVNjLENBQVEsRUFDeEIsSUFBS0EsRUFDTCxLQUFNLENBQUMsR0FBSXhELEVBQUssTUFBUSxDQUFBLEVBQUssR0FBR2lELEVBQWNPLENBQVEsRUFDdEQsUUFBU0YsRUFDVCxNQUFPdEQsRUFBSyxNQUFRLEVBQ3BCLE9BQVEsQ0FDTixNQUFPQSxFQUFLLE1BQ1osSUFBS0EsRUFBSyxJQUNWLEtBQU11RCxFQUFtQnZELEVBQUssUUFBVUEsRUFBSyxLQUM3QyxPQUFRQSxFQUFLLE9BQ2IsTUFBT0EsRUFBSyxNQUNaLEtBQU1BLEVBQUssSUFDWixFQUNELGFBQWVpRCxFQUFhLFFBQVVBLEdBQWlCLE9BQ3ZELGdCQUFpQkMsR0FBbUIsTUFBQSxDQUNyQyxDQUNGLENBRU0sT0FBQUUsQ0FDVCxDQUNGLENBRUEsTUFBTVIsRUFBYSxDQUtqQixZQUFZVixFQUFVNUMsRUFBYytDLEVBQVksQ0FKeEMzQixHQUFBLGNBQ0FBLEdBQUEsWUFDQUEsR0FBQSxpQkFDQUEsR0FBQSxxQkFFTixLQUFLLElBQU13QixFQUNYLEtBQUssU0FBVzVDLEVBRWhCLEtBQUssTUFBVytDLENBQ2xCLENBQ0EsUUFBUXJDLEVBQVd5RCxFQUFpQixDQUNsQyxLQUFLLE1BQVF6RCxFQUNiLEtBQUssYUFBZXlELENBQ3RCLENBQ0EsSUFBSSxNQUFJLENBQ04sT0FBTyxLQUFLLFNBQVMsZ0JBQWtCLEtBQUssTUFBTSxLQUFPLEtBQUssTUFBTSxPQUN0RSxDQUVBLElBQUksUUFBTSxDQUNSLE9BQU8sS0FBSyxNQUFNLE1BQ3BCLENBRUEsSUFBSSxTQUFPLENBQ0wsR0FBQSxDQUFDLEtBQUssTUFBTSxTQUFVLENBQ25CLEtBQUEsTUFBTSxTQUFXLEdBQ2xCLElBQUFDLEVBQVksS0FBSyxNQUFNLE9BQzNCLEtBQU9BLEdBQ0wsS0FBSyxNQUFNLFNBQVNBLEVBQVUsS0FBSyxFQUFJQSxFQUN2Q0EsRUFBWUEsRUFBVSxNQUV6QixDQUNELE9BQU8sS0FBSyxNQUFNLFFBQ3BCLENBQ0EsSUFBSSxPQUFLLENBQ1AsT0FBTyxLQUFLLE1BQU0sS0FDcEIsQ0FFQSxJQUFJLFFBQU0sQ0FDUixPQUFPLEtBQUssTUFBTSxNQUNwQixDQUVBLElBQUksWUFBVSxDQUNaLE9BQU8sS0FBSyxNQUFNLFVBQ3BCLENBRUEsSUFBSSxxQkFBbUIsQ0FDckIsT0FBTyxLQUFLLE1BQU0sbUJBQ3BCLENBRUEsSUFBSSxnQkFBYyxDQUNoQixPQUFPLEtBQUssTUFBTSxjQUNwQixDQUVBLElBQUksY0FBWSxDQUNkLE9BQ0csS0FBSyxTQUFTLGVBQWlCLFNBQzdCLEtBQUssU0FBUyxnQkFBa0IsS0FBSyxNQUFNLGFBQWUsS0FBSyxNQUFNLGtCQUN4RSxNQUVKLENBRUEsSUFBSSxNQUFJLENBQ04sT0FBTyxLQUFLLE1BQU0sSUFDcEIsQ0FDRCxDQUVELFNBQVNDLEdBQWNuRixFQUFZb0YsRUFBc0IsQ0FDdkQsVUFBVzNELEtBQU96QixFQUNoQixHQUFJLENBQUNvRixHQUFxQjlCLEdBQUksS0FBS3RELEVBQU95QixDQUFHLEVBQ3BDLE1BQUEsR0FHSixNQUFBLEVBQ1QsQ0FFQSxTQUFTcUMsR0FBYzlELEVBQVlvRixFQUFzQixDQUN2RCxNQUFNUixFQUFXLENBQUUsU0FBVXJCLEdBQVN2RCxDQUFLLENBQUMsRUFDNUMsT0FBQTRFLEVBQUksUUFBVUEsRUFBSSxVQUFZLE1BQU0sUUFBUTVFLENBQUssRUFDN0M0RSxFQUFBLFFBQVVBLEVBQUksUUFBVSxDQUFDNUUsRUFBTSxPQUFTNEUsRUFBSSxTQUFXTyxHQUFjbkYsRUFBT29GLENBQWlCLEVBQUksR0FFOUZSLENBQ1QsQ0N2VE0sU0FBVVMsR0FBWTlELEVBQU0sQ0FDMUIsTUFBQWtDLEVBQVVELEdBQVdqQyxDQUFDLEVBRW5CLFNBQUErRCxFQUFTNUIsRUFBVUMsRUFBZTdDLEVBQWEsQ0FZbEQsR0FYQTZDLElBQWEsU0FBV0EsRUFBV3BDLEVBQUUsVUFDekNULEVBQVVTLEVBQUUsTUFDVixDQUNFLFlBQWEsQ0FBQyxNQUFNLFFBQVFtQyxDQUFHLEVBQy9CLFdBQVksU0FDWixjQUFlLEdBQ2YsV0FBWSxHQUNaLGtCQUFtQixFQUFBLEVBRXJCNUMsR0FBVyxDQUFBLENBQUUsRUFFWEEsRUFBUSxlQUFpQixPQUFXLENBSWxDLEdBSEEsQ0FBQ0EsRUFBUSxhQUFlQSxFQUFRLGlCQUFtQixTQUM3Q0EsRUFBQSxlQUFpQixNQUFNLFFBQVE0QyxDQUFHLEdBRXhDLENBQUNuQyxFQUFFLFNBQVNULEVBQVEsWUFBWSxHQUFLLENBQUMsTUFBTSxRQUFRQSxFQUFRLFlBQVksRUFDMUUsTUFBTSxNQUFNLHFDQUFxQyxFQUU3Q1MsRUFBRSxTQUFTVCxFQUFRLFlBQVksSUFDekJBLEVBQUEsYUFBZSxDQUFDQSxFQUFRLFlBQVksR0FFOUNBLEVBQVEsZ0JBQWtCQSxFQUFRLGFBQ2xDQSxFQUFRLGFBQWUsR0FDdkIsUUFBU21ELEVBQUluRCxFQUFRLGdCQUFnQixPQUFTLEVBQUdtRCxHQUFLLEVBQUdBLElBQy9DbkQsRUFBQSxhQUFhbUQsQ0FBQyxFQUFJMUMsRUFBRSxPQUFPVCxFQUFRLGdCQUFnQm1ELENBQUMsQ0FBQyxDQUdsRSxDQUNPLE9BQUFSLEVBQUEsQ0FDTixNQUFPQyxFQUNQLFNBQUFDLEVBQ0EsUUFBQTdDLEVBQ0EsSUFBQTRDLENBQUEsQ0FDRCxFQUNNQSxDQUNULENBQ08sT0FBQTRCLENBQ1QsQ0N6Q08sTUFBTUMsR0FBVyxDQUN0QixZRDJDc0NGLEdBQVk5RCxDQUFDLEdFckN4Q2lFLEdBQVEsQ0FDbkIsT0FBQTVGLEdBQUEsUUFDQTZGLEdBQ0EsTUFBQXBGLEdBQ0EsS0FBQTJCLEdBQUEsTUFDQTBELEdBQ0EsU0FBQUgsR0FDQSxLQ2RhLENBTWIsS0FBS0ksS0FBYUMsRUFBZSxDQUMvQixNQUFNQyxFQUFPLE9BQU8sS0FBS0YsRUFBSSxLQUFLLEVBQzVCRyxFQUFjLENBQUEsRUFDcEIsVUFBV3JFLEtBQU9vRSxFQUNacEUsSUFBUSxZQUdSbUUsRUFBTSxRQUFRbkUsQ0FBRyxHQUFLLElBRzFCcUUsRUFBT3JFLENBQUcsRUFBSWtFLEVBQUksTUFBTWxFLENBQUcsSUFFdEIsT0FBQXFFLENBQ1QsSUNuQkYsU0FBU0MsR0FBYXhILEVBQVN5SCxFQUFjLENBQzNDLE9BQU96SCxFQUFHLE9BQVMsUUFBVSxDQUFBLEVBQUssQ0FBRSxTQUFVLENBQUUsS0FBTXlILEdBQWEsV0FBWSxDQUFFLEtBQU0sR0FBS0EsR0FDOUYsQ0FLYyxTQUFBQyxJQUFBLENBQ04sS0FBQSxDQUFFLEdBQUExSCxHQUFPMkgsR0FBQUEsUUFDUixNQUFBLENBQ0wsUUFBUyxDQUVQLEtBQU0sQ0FDSixJQUFLLENBQUUsS0FBTSxFQUFJLEVBQ2pCLEdBQUdILEdBQWF4SCxFQUFJLENBQUMsQ0FDdEIsQ0FDRixFQUNELFNBQVUsQ0FFUixLQUFNLENBQ0osSUFBSyxDQUFFLEtBQU0sRUFBSSxFQUNqQixHQUFHd0gsR0FBYXhILEVBQUksQ0FBQyxDQUN0QixDQUNGLEVBQ0QsU0FBVSxDQUVSLEtBQU0sQ0FDSixJQUFLLENBQUUsS0FBTSxFQUFJLEVBQ2pCLEdBQUd3SCxHQUFheEgsRUFBSSxDQUFDLENBQ3RCLENBQ0YsQ0FBQSxDQUVMLGdIQ2hDYyxTQUFBNEgsSUFBQSxDQUNOLE1BQUE1SCxFQUFLQyxhQUFVLE1BQ2QsTUFBQSxDQUNMLE9BQVEsQ0FDTixLQUFNLENBQ0osVUFBVyxDQUNULEtBQU1ELEVBQUcsTUFBTSxLQUNmLE9BQVFBLEVBQUcsTUFBTSxXQUNqQixDQUFDQSxFQUFHLE1BQU0sU0FBUyxFQUFHLEVBQ3ZCLENBQ0YsRUFDRCxPQUFRLENBQ04sVUFBVyxDQUNULEtBQU0sWUFDTixPQUFRLE1BQ1QsQ0FDRixDQUNGLEVBQ0QsS0FBTSxDQUNKLEtBQU0sQ0FDSixVQUFXLENBQ1QsS0FBTUEsRUFBRyxNQUFNLEtBQ2YsT0FBUUEsRUFBRyxNQUFNLFdBQ2pCLENBQUNBLEVBQUcsTUFBTSxTQUFTLEVBQUcsRUFDdkIsQ0FDRixFQUNELE9BQVEsQ0FDTixVQUFXLENBQ1QsS0FBTSxZQUNOLE9BQVEsT0FDUixHQUFHQSxFQUFHLE9BQU8sUUFDZCxDQUNGLENBQ0YsQ0FBQSxDQUVMLGdIQ25DYyxTQUFBNkgsSUFBQSxDQUNOLE1BQUE3SCxFQUFLQyxhQUFVLE1BRWQsTUFBQSxDQUNMLGdCQUFpQixDQUNmLE9BQVEsQ0FDTixVQUFXLENBQ1QsVUFBVyxFQUNaLENBQ0YsRUFDRCxLQUFNLENBQ0osVUFBVyxDQUNULEtBQU0sbUJBQ04sT0FBUUQsRUFBRyxTQUFTLFdBQ3BCLENBQUNBLEVBQUcsU0FBUyxTQUFTLEVBQUcsRUFDMUIsQ0FDRixFQUNELE9BQVEsQ0FDTixVQUFXLENBQUUsS0FBTSx5QkFBMkIsQ0FDL0MsQ0FDRixDQUFBLENBRUwsZ0hDeEJlOEgsR0FBQSxDQUNiLEtBQU0sUUFDTixHQUFJLENBQ0YsVUFBVyxDQUNULE9BQVEsQ0FDTixZQUFhLEtBQ2QsQ0FDRixFQUNELFFBQVMsQ0FBRSxNQUFPLElBQU0sRUFDeEIsU0FBVSxDQUFFLE1BQU8sSUFBTSxFQUN6QixTQUFVLENBQUUsTUFBTyxJQUFNLEVBQ3pCLFVBQVcsQ0FDVCxNQUFPLEtBQ1AsT0FBUSxDQUNOLEtBQU0sS0FDTixhQUFjLE9BQ2QsZUFBZ0IsY0FDaEIsUUFBUyxPQUNWLEVBQ0QsS0FBTSxDQUNKLEtBQU0sSUFDUCxFQUNELEtBQU0sQ0FDSixLQUFNLElBQ1AsRUFDRCxLQUFNLENBQ0osS0FBTSxJQUNQLENBQ0YsRUFDRCxLQUFNLENBQ0osT0FBUSxLQUNSLEdBQUksS0FDSixNQUFPLEtBQ1AsV0FBWSxDQUNWLE1BQU8sS0FDUCxRQUFTLGVBQ1QsT0FBUSxNQUNSLEdBQUksSUFDTCxDQUNGLEVBQ0QsVUFBVyxDQUFFLElBQUssSUFBTSxFQUN4QixRQUFTLENBQ1AsYUFBYyxDQUNaLE1BQU8sTUFDUCxNQUFPLEtBQ1AsTUFBTyxLQUNQLE1BQU8sS0FDUCxRQUFTLEtBQ1QsUUFBUyxLQUNWLEVBQ0QsT0FBUSxDQUFFLE1BQU8sTUFBUSxFQUN6QixRQUFTLENBQUUsTUFBTyxJQUFNLEVBQ3hCLFFBQVMsQ0FBRSxNQUFPLE1BQVEsRUFDMUIsT0FBUSxDQUFFLE1BQU8sSUFBTSxFQUN2QixRQUFTLENBQUUsTUFBTyxLQUFPLENBQzFCLEVBQ0QsT0FBUSxDQUNOLFVBQVcsQ0FDVCxlQUFnQixDQUNkLEtBQU0sQ0FDSixTQUFVLEtBQ1YsT0FBUSxJQUNULENBQ0YsQ0FDRixFQUNELE9BQVEsQ0FBRSxLQUFNLElBQU0sRUFDdEIsTUFBTyxDQUFFLEtBQU0sSUFBTSxFQUNyQixNQUFPLENBQ0wsUUFBUyxVQUNWLENBQ0YsRUFDRCxXQUFZLENBQ1YsVUFBVyxTQUNaLEVBQ0QsS0FBTSxDQUNKLFVBQVcsQ0FBRSxHQUFJLEdBQUssQ0FDdkIsRUFDRCxRQUFTLENBQ1AsWUFBYSxDQUNYLEtBQU0sS0FDTixPQUFRLElBQ1QsRUFDRCxRQUFTLENBQ1AsTUFBTyxPQUNQLFFBQVMsS0FDVCxTQUFVLE9BQ1YsTUFBTyxPQUNQLE1BQU8sT0FDUCxNQUFPLEtBQ1AsT0FBUSxLQUNSLFFBQVMsS0FDVCxZQUFhLFNBQ2IsWUFBYSxNQUNiLFVBQVcsU0FDWCxZQUFhLE9BQ2QsRUFDRCxhQUFjLENBQ1osS0FBTSxPQUNOLFNBQVUsZUFDVixhQUFjLHdCQUNkLFVBQVcsU0FDWCxjQUFlLHlCQUNmLGFBQWMsdUJBQ2YsQ0FDRixDQUNGLEdDekdZQyxHQUFBLENBQ2IsS0FBTSxLQUNOLEdBQUksQ0FDRixVQUFXLENBQ1QsT0FBUSxDQUNOLFlBQWEsZUFDZCxDQUNGLEVBQ0QsUUFBUyxDQUFFLE1BQU8sS0FBTyxFQUN6QixTQUFVLENBQUUsTUFBTyxNQUFRLEVBQzNCLFNBQVUsQ0FBRSxNQUFPLE1BQVEsRUFDM0IsVUFBVyxDQUNULE1BQU8sU0FDUCxPQUFRLENBQ04sS0FBTSxTQUNOLGFBQWMsYUFDZCxlQUFnQiwrQ0FDaEIsUUFBUyxpQkFDVixFQUNELEtBQU0sQ0FDSixLQUFNLE1BQ1AsRUFDRCxLQUFNLENBQ0osS0FBTSxNQUNQLEVBQ0QsS0FBTSxDQUNKLEtBQU0sTUFDUCxDQUNGLEVBQ0QsS0FBTSxDQUNKLE9BQVEsU0FDUixHQUFJLEtBQ0osTUFBTyxRQUNQLFdBQVksQ0FDVixNQUFPLGNBQ1AsUUFBUyw2Q0FDVCxPQUFRLGFBQ1IsR0FBSSxNQUNMLENBQ0YsRUFDRCxVQUFXLENBQUUsSUFBSyxLQUFPLEVBQ3pCLFFBQVMsQ0FDUCxhQUFjLENBQ1osTUFBTyxjQUNQLE1BQU8sUUFDUCxNQUFPLE9BQ1AsTUFBTyxRQUNQLFFBQVMsS0FDVCxRQUFTLFNBQ1YsRUFDRCxPQUFRLENBQUUsTUFBTyxpQkFBbUIsRUFDcEMsUUFBUyxDQUFFLE1BQU8sU0FBVyxFQUM3QixRQUFTLENBQUUsTUFBTyxjQUFnQixFQUNsQyxPQUFRLENBQUUsTUFBTyxRQUFVLEVBQzNCLFFBQVMsQ0FBRSxNQUFPLGFBQWUsQ0FDbEMsRUFDRCxPQUFRLENBQ04sVUFBVyxDQUNULGVBQWdCLENBQ2QsS0FBTSxDQUNKLFNBQVUsV0FDVixPQUFRLFFBQ1QsQ0FDRixDQUNGLEVBQ0QsT0FBUSxDQUFFLEtBQU0sUUFBVSxFQUMxQixNQUFPLENBQUUsS0FBTSxPQUFTLEVBQ3hCLE1BQU8sQ0FDTCxRQUFTLGtCQUNWLENBQ0YsRUFDRCxXQUFZLENBQ1YsVUFBVyxpQkFDWixFQUNELEtBQU0sQ0FBRSxVQUFXLENBQUUsR0FBSSxLQUFRLEVBQ2pDLFFBQVMsQ0FDUCxZQUFhLENBQ1gsS0FBTSxPQUNOLE9BQVEsUUFDVCxFQUNELFFBQVMsQ0FDUCxNQUFPLGFBQ1AsUUFBUyxVQUNULFNBQVUsV0FDVixNQUFPLFFBQ1AsTUFBTyxRQUNQLE1BQU8sUUFDUCxPQUFRLFNBQ1IsUUFBUyxVQUNULFlBQWEsaUJBQ2IsWUFBYSxPQUNiLFVBQVcsYUFDWCxZQUFhLFdBQ2QsRUFDRCxhQUFjLENBQ1osS0FBTSxhQUNOLFNBQVUsd0JBQ1YsYUFBYywyQ0FDZCxVQUFXLG1CQUNYLGNBQWUscUNBQ2YsYUFBYyw4RUFDZixDQUNGLENBQ0YsR0NsR0gsU0FBU0MsR0FBRTlFLEVBQWF4QyxFQUFTLENBQy9CLElBQUllLEVBQVF1QixFQUFFLElBQUk4RSxHQUFNNUUsQ0FBRyxFQUMzQixPQUFJekIsR0FBUyxLQUNKeUIsRUFFTHhDLGFBQWdCLE9BQ2xCc0MsRUFBRSxRQUFRdEMsRUFBTSxDQUFDdUgsRUFBS0MsSUFBUyxDQUM3QnpHLEVBQVFBLEVBQU0sUUFBUSxJQUFNeUcsRUFBUSxJQUFLRCxDQUFHLENBQUEsQ0FDN0MsRUFDTXhHLEdBRUZBLEVBQU0sUUFBUSxNQUFPZixDQUFJLENBQ2xDLENBQ0EsTUFBTXlILEVBQUksQ0FBVixjQUNFeEUsR0FBQSx1QkFBdUIsTUFDdkIsRUFBRVQsRUFBYXhDLEVBQVMsQ0FDZixPQUFBc0gsR0FBRTlFLEVBQUt4QyxDQUFJLENBQ3BCLENBQ0EsV0FBVzBILEVBQWEsQ0FDdEIsR0FBSSxDQUFDQSxFQUNILE9BRUVBLEVBQVMsU0FDWEEsRUFBV0EsRUFBUyxRQUV0QixNQUFNQyxFQUFvQkQsRUFBUyxpQkFDbkMsVUFBV25GLEtBQVFvRixFQUFTLENBQ3RCLEdBQUFwRixFQUFLLFdBQVcsSUFBSSxFQUFHLENBQ25CLE1BQUFxRixFQUFVRixFQUFTLGlCQUFpQm5GLENBQUksRUFDeENzRixFQUFVdkYsRUFBRSxVQUFVc0YsRUFBUSxJQUFNLENBQUEsQ0FBRSxFQUM1Q0YsRUFBUyxtQkFBbUJuRixFQUFNLENBQUUsR0FBSTZFLEdBQUssR0FBSSxFQUNqRE0sRUFBUyxtQkFBbUJuRixFQUFNLENBQUUsR0FBSXNGLENBQVMsQ0FBQSxDQUN4QyxTQUFBdEYsRUFBSyxXQUFXLElBQUksRUFBRyxDQUMxQixNQUFBcUYsRUFBVUYsRUFBUyxpQkFBaUJuRixDQUFJLEVBQ3hDc0YsRUFBVXZGLEVBQUUsVUFBVXNGLEVBQVEsSUFBTSxDQUFBLENBQUUsRUFDNUNGLEVBQVMsbUJBQW1CbkYsRUFBTSxDQUFFLEdBQUk4RSxHQUFHLEdBQUksRUFDL0NLLEVBQVMsbUJBQW1CbkYsRUFBTSxDQUFFLEdBQUlzRixDQUFTLENBQUEsQ0FDbEQsQ0FDRGxILEdBQU8sTUFBTSxPQUFRK0csRUFBUyxpQkFBaUJuRixDQUFJLENBQUMsQ0FDckQsQ0FDRCxLQUFLLGdCQUFrQm1GLENBQ3pCLENBQ0QsQ0FFWSxNQUFBSSxHQUFPLElBQUlMLFlBRVJNLElBQU8sQ0FDakIsT0FBQUQsR0FBSyxpQkFBbUIsS0FDbkIsQ0FFTCxFQUFHQSxHQUFLLGdCQUFnQixDQUFBLEVBSXJCLENBQUUsRUFBR0EsR0FBSyxFQUNuQiw0UEM1REMsU0FBU0UsRUFBRVYsRUFBRSxDQUFzRFcsRUFBQSxRQUFlWCxFQUFDLENBQXdJLEdBQUVZLEdBQU0sVUFBVSxDQUFjLE9BQU8sU0FBU0YsRUFBRVYsRUFBRSxDQUFDLElBQUlhLEVBQUViLEVBQUUsVUFBVWMsRUFBRUQsRUFBRSxPQUFPQSxFQUFFLE9BQU8sU0FBU0gsRUFBRSxDQUFDLElBQUlWLEVBQUUsS0FBS2EsRUFBRSxLQUFLLFFBQU8sRUFBRyxHQUFHLENBQUMsS0FBSyxRQUFTLEVBQUMsT0FBT0MsRUFBRSxLQUFLLElBQUksRUFBRUosQ0FBQyxFQUFFLElBQUlLLEVBQUUsS0FBSyxPQUFRLEVBQUNDLEdBQUdOLEdBQUcsd0JBQXdCLFFBQVEsOERBQStELFNBQVNBLEVBQUUsQ0FBQyxPQUFPQSxFQUFHLENBQUEsSUFBSSxJQUFJLE9BQU8sS0FBSyxNQUFNVixFQUFFLEdBQUcsR0FBRyxDQUFDLEVBQUUsSUFBSSxLQUFLLE9BQU9hLEVBQUUsUUFBUWIsRUFBRSxFQUFFLEVBQUUsSUFBSSxPQUFPLE9BQU9BLEVBQUUsU0FBVSxFQUFDLElBQUksT0FBTyxPQUFPQSxFQUFFLFlBQVcsRUFBRyxJQUFJLEtBQUssT0FBT2EsRUFBRSxRQUFRYixFQUFFLEtBQU0sRUFBQyxHQUFHLEVBQUUsSUFBSSxJQUFJLElBQUksS0FBSyxPQUFPZSxFQUFFLEVBQUVmLEVBQUUsS0FBSSxFQUFTVSxJQUFOLElBQVEsRUFBRSxFQUFFLEdBQUcsRUFBRSxJQUFJLElBQUksSUFBSSxLQUFLLE9BQU9LLEVBQUUsRUFBRWYsRUFBRSxRQUFPLEVBQVNVLElBQU4sSUFBUSxFQUFFLEVBQUUsR0FBRyxFQUFFLElBQUksSUFBSSxJQUFJLEtBQUssT0FBT0ssRUFBRSxFQUFFLE9BQVdmLEVBQUUsS0FBTixFQUFTLEdBQUdBLEVBQUUsRUFBRSxFQUFRVSxJQUFOLElBQVEsRUFBRSxFQUFFLEdBQUcsRUFBRSxJQUFJLElBQUksT0FBTyxLQUFLLE1BQU1WLEVBQUUsR0FBRyxRQUFTLEVBQUMsR0FBRyxFQUFFLElBQUksSUFBSSxPQUFPQSxFQUFFLEdBQUcsUUFBTyxFQUFHLElBQUksSUFBSSxNQUFNLElBQUlBLEVBQUUsV0FBVSxFQUFHLElBQUksSUFBSSxNQUFNLE1BQU0sSUFBSUEsRUFBRSxXQUFXLE1BQU0sRUFBRSxJQUFJLFFBQVEsT0FBT1UsQ0FBQyxDQUFDLENBQUMsRUFBRyxPQUFPSSxFQUFFLEtBQUssSUFBSSxFQUFFRSxDQUFDLENBQUMsQ0FBQyxDQUFDLDJDQ0l0a0NDLEdBQU0sT0FBT0MsRUFBYyxFQUUzQixTQUFTQyxHQUFTQyxFQUFXQyxFQUFjLENBQ3JDLEdBQUEsQ0FBQXhILEdBQVksUUFBUXVILENBQUksRUFHNUIsT0FBT0gsR0FBTUcsQ0FBSSxFQUFFLE9BQU9DLENBQU0sQ0FDbEMsQ0FDQSxTQUFTQyxHQUFjN0gsRUFBWTRILEVBQVMsc0JBQXFCLENBQy9ELEdBQUk1SCxHQUFTLE1BQVFBLGFBQWlCLE9BQVNBLEVBQU0sT0FBUyxFQUFHLENBQzNELEdBQUFJLEdBQVksU0FBU0osQ0FBSyxFQUNyQixPQUVILEtBQUEsQ0FBRSxFQUFBdUcsR0FBTVMsS0FDZCxNQUFPLEdBQUdVLEdBQVMxSCxFQUFNLENBQUMsRUFBRzRILENBQU0sQ0FBQyxJQUFJckIsRUFBRSxzQkFBc0IsQ0FBQyxJQUFJbUIsR0FBUzFILEVBQU0sQ0FBQyxFQUFHNEgsQ0FBTSxDQUFDLEVBQ2hHLENBQ00sT0FBQUYsR0FBUzFILEVBQU80SCxDQUFNLENBQy9CLENBRUEsU0FBU0UsR0FBbUIzSixFQUFvQixDQUN4QyxLQUFBLENBQUUsTUFBQTZCLENBQVUsRUFBQTdCLEVBQ1gsT0FBQTBKLEdBQWM3SCxFQUFPLFlBQVksQ0FDMUMsQ0FDQSxTQUFTK0gsR0FBdUI1SixFQUFvQixDQUM1QyxLQUFBLENBQUUsTUFBQTZCLENBQVUsRUFBQTdCLEVBQ1gsT0FBQTBKLEdBQWM3SCxFQUFPLHFCQUFxQixDQUNuRCxxQ0M5QkMsU0FBU2lILEVBQUVWLEVBQUUsQ0FBc0RXLEVBQWUsUUFBQVgsRUFBcUksQ0FBQSxHQUFFWSxHQUFNLFVBQVUsQ0FBYyxJQUFJRixFQUFFLE9BQU9WLEVBQUUsT0FBTyxPQUFPLFNBQVN0QyxFQUFFb0QsRUFBRUQsRUFBRSxDQUFDLElBQUlZLEVBQUVYLEVBQUUsVUFBVVcsRUFBRSxLQUFLLFNBQVMvRCxFQUFFLENBQUMsR0FBWUEsSUFBVCxTQUFhQSxFQUFFLE1BQWFBLElBQVAsS0FBUyxPQUFPLEtBQUssSUFBSSxHQUFHQSxFQUFFLEtBQUssS0FBSSxHQUFJLEtBQUssRUFBRSxJQUFJb0QsRUFBRSxLQUFLLFFBQU8sRUFBRyxXQUFXLEVBQUUsR0FBUSxLQUFLLE1BQU8sSUFBakIsSUFBbUIsS0FBSyxLQUFJLEVBQUcsR0FBRyxDQUFDLElBQUlXLEVBQUVaLEVBQUUsSUFBSSxFQUFFLFFBQVFiLENBQUMsRUFBRSxJQUFJLEVBQUVBLENBQUMsRUFBRSxLQUFLYyxDQUFDLEVBQUVDLEVBQUVGLEVBQUUsSUFBSSxFQUFFLE1BQU1ILENBQUMsRUFBRSxHQUFHZSxFQUFFLFNBQVNWLENBQUMsRUFBRSxNQUFPLEVBQUMsQ0FBQyxJQUFJQyxFQUFFSCxFQUFFLElBQUksRUFBRSxRQUFRYixDQUFDLEVBQUUsS0FBS2MsQ0FBQyxFQUFFLFFBQVFKLENBQUMsRUFBRSxTQUFTLEVBQUUsYUFBYSxFQUFFZ0IsRUFBRSxLQUFLLEtBQUtWLEVBQUVOLEVBQUUsRUFBRSxFQUFFLE9BQU9nQixFQUFFLEVBQUViLEVBQUUsSUFBSSxFQUFFLFFBQVEsTUFBTSxFQUFFLEtBQUksRUFBRyxLQUFLLEtBQUthLENBQUMsQ0FBQyxFQUFFRCxFQUFFLE1BQU0sU0FBU2YsRUFBRSxDQUFDLE9BQWdCQSxJQUFULFNBQWFBLEVBQUUsTUFBTSxLQUFLLEtBQUtBLENBQUMsQ0FBQyxDQUFDLENBQUMsK0VDQWx3QixTQUFTQSxFQUFFVixFQUFFLENBQXNEVyxFQUFBLFFBQWVYLEVBQWtJLENBQUEsR0FBRVksR0FBTSxVQUFVLENBQWMsT0FBTyxTQUFTRixFQUFFVixFQUFFLENBQUNBLEVBQUUsVUFBVSxRQUFRLFNBQVNVLEVBQUUsQ0FBQyxJQUFJVixFQUFFLEtBQUssUUFBTyxFQUFHLFdBQVcsRUFBRXRDLEVBQUUsS0FBSyxHQUFHb0QsR0FBR3BELEVBQUVzQyxFQUFFdEMsRUFBRSxFQUFFQSxHQUFHc0MsRUFBRSxPQUFPLEtBQUssT0FBTSxFQUFHLEVBQUVVLENBQUMsRUFBRUksRUFBRSxLQUFLLFNBQVNBLEVBQUUsS0FBSyxFQUFFLElBQUlKLEVBQUUsS0FBSyxDQUFDLENBQUMsQ0FBQyxDQUFDLDhFQ0F2YSxTQUFTSSxFQUFFSixFQUFFLENBQXNEQyxVQUFlRCxFQUFDLENBQW9JLEdBQUVFLEdBQU0sVUFBVSxDQUFjLE9BQU8sU0FBU0UsRUFBRUosRUFBRVYsRUFBRSxDQUFDLElBQUlhLEVBQUVILEVBQUUsVUFBVWdCLEVBQUUsU0FBU1osRUFBRSxDQUFDLE9BQU9BLElBQUlBLEVBQUUsUUFBUUEsRUFBRUEsRUFBRSxFQUFFLEVBQUVhLEVBQUUsU0FBU2IsRUFBRUosRUFBRVYsRUFBRWEsRUFBRWMsRUFBRSxDQUFDLElBQUlqRSxFQUFFb0QsRUFBRSxLQUFLQSxFQUFFQSxFQUFFLFFBQU8sRUFBR0UsRUFBRVUsRUFBRWhFLEVBQUVnRCxDQUFDLENBQUMsRUFBRUssRUFBRVcsRUFBRWhFLEVBQUVzQyxDQUFDLENBQUMsRUFBRXlCLEVBQUVULEdBQUdELEVBQUUsSUFBSyxTQUFTRCxFQUFFLENBQUMsT0FBT0EsRUFBRSxNQUFNLEVBQUVELENBQUMsQ0FBQyxDQUFDLEVBQUcsR0FBRyxDQUFDYyxFQUFFLE9BQU9GLEVBQUUsSUFBSUcsRUFBRWxFLEVBQUUsVUFBVSxPQUFPK0QsRUFBRSxJQUFLLFNBQVNYLEVBQUVKLEVBQUUsQ0FBQyxPQUFPZSxHQUFHZixHQUFHa0IsR0FBRyxJQUFJLENBQUMsQ0FBQyxDQUFDLENBQUUsRUFBRWxFLEVBQUUsVUFBVSxDQUFDLE9BQU9zQyxFQUFFLEdBQUdBLEVBQUUsT0FBTSxDQUFFLENBQUMsRUFBRWdCLEVBQUUsU0FBU0YsRUFBRUosRUFBRSxDQUFDLE9BQU9JLEVBQUUsUUFBUUosQ0FBQyxHQUFHLFNBQVNJLEVBQUUsQ0FBQyxPQUFPQSxFQUFFLFFBQVEsaUNBQWtDLFNBQVNBLEVBQUVKLEVBQUVWLEVBQUUsQ0FBQyxPQUFPVSxHQUFHVixFQUFFLE1BQU0sQ0FBQyxDQUFDLENBQUcsQ0FBQSxFQUFFYyxFQUFFLFFBQVFKLEVBQUUsWUFBVyxDQUFFLENBQUMsQ0FBQyxFQUFFSyxFQUFFLFVBQVUsQ0FBQyxJQUFJRCxFQUFFLEtBQUssTUFBTSxDQUFDLE9BQU8sU0FBU0osRUFBRSxDQUFDLE9BQU9BLEVBQUVBLEVBQUUsT0FBTyxNQUFNLEVBQUVpQixFQUFFYixFQUFFLFFBQVEsQ0FBQyxFQUFFLFlBQVksU0FBU0osRUFBRSxDQUFDLE9BQU9BLEVBQUVBLEVBQUUsT0FBTyxLQUFLLEVBQUVpQixFQUFFYixFQUFFLGNBQWMsU0FBUyxDQUFDLENBQUMsRUFBRSxlQUFlLFVBQVUsQ0FBQyxPQUFPQSxFQUFFLFFBQVMsRUFBQyxXQUFXLENBQUMsRUFBRSxTQUFTLFNBQVNKLEVBQUUsQ0FBQyxPQUFPQSxFQUFFQSxFQUFFLE9BQU8sTUFBTSxFQUFFaUIsRUFBRWIsRUFBRSxVQUFVLENBQUMsRUFBRSxZQUFZLFNBQVNKLEVBQUUsQ0FBQyxPQUFPQSxFQUFFQSxFQUFFLE9BQU8sSUFBSSxFQUFFaUIsRUFBRWIsRUFBRSxjQUFjLFdBQVcsQ0FBQyxDQUFDLEVBQUUsY0FBYyxTQUFTSixFQUFFLENBQUMsT0FBT0EsRUFBRUEsRUFBRSxPQUFPLEtBQUssRUFBRWlCLEVBQUViLEVBQUUsZ0JBQWdCLFdBQVcsQ0FBQyxDQUFDLEVBQUUsZUFBZSxTQUFTSixFQUFFLENBQUMsT0FBT00sRUFBRUYsRUFBRSxRQUFTLEVBQUNKLENBQUMsQ0FBQyxFQUFFLFNBQVMsS0FBSyxRQUFTLEVBQUMsU0FBUyxRQUFRLEtBQUssVUFBVSxPQUFPLENBQUMsRUFBRUcsRUFBRSxXQUFXLFVBQVUsQ0FBQyxPQUFPRSxFQUFFLEtBQUssSUFBSSxFQUFHLENBQUEsRUFBRWYsRUFBRSxXQUFXLFVBQVUsQ0FBQyxJQUFJYyxFQUFFcEQsSUFBSSxNQUFNLENBQUMsZUFBZSxVQUFVLENBQUMsT0FBT29ELEVBQUUsV0FBVyxDQUFDLEVBQUUsU0FBUyxVQUFVLENBQUMsT0FBT2QsRUFBRSxVQUFVLEVBQUUsY0FBYyxVQUFVLENBQUMsT0FBT0EsRUFBRSxlQUFlLEVBQUUsWUFBWSxVQUFVLENBQUMsT0FBT0EsRUFBRSxZQUFhLENBQUEsRUFBRSxPQUFPLFVBQVUsQ0FBQyxPQUFPQSxFQUFFLE9BQVEsQ0FBQSxFQUFFLFlBQVksVUFBVSxDQUFDLE9BQU9BLEVBQUUsWUFBVyxDQUFFLEVBQUUsZUFBZSxTQUFTVSxFQUFFLENBQUMsT0FBT00sRUFBRUYsRUFBRUosQ0FBQyxDQUFDLEVBQUUsU0FBU0ksRUFBRSxTQUFTLFFBQVFBLEVBQUUsT0FBTyxDQUFDLEVBQUVkLEVBQUUsT0FBTyxVQUFVLENBQUMsT0FBTzJCLEVBQUVqRSxFQUFHLEVBQUMsUUFBUSxDQUFDLEVBQUVzQyxFQUFFLFlBQVksVUFBVSxDQUFDLE9BQU8yQixFQUFFakUsRUFBRyxFQUFDLGNBQWMsU0FBUyxDQUFDLENBQUMsRUFBRXNDLEVBQUUsU0FBUyxTQUFTYyxFQUFFLENBQUMsT0FBT2EsRUFBRWpFLEVBQUMsRUFBRyxXQUFXLEtBQUssS0FBS29ELENBQUMsQ0FBQyxFQUFFZCxFQUFFLGNBQWMsU0FBU2MsRUFBRSxDQUFDLE9BQU9hLEVBQUVqRSxFQUFHLEVBQUMsZ0JBQWdCLFdBQVcsRUFBRW9ELENBQUMsQ0FBQyxFQUFFZCxFQUFFLFlBQVksU0FBU2MsRUFBRSxDQUFDLE9BQU9hLEVBQUVqRSxFQUFHLEVBQUMsY0FBYyxXQUFXLEVBQUVvRCxDQUFDLENBQUMsQ0FBQyxDQUFDLDJDQ1EvaEVHLEdBQU0sT0FBT1ksRUFBTyxFQUNwQlosR0FBTSxPQUFPYSxFQUFVLEVBQ3ZCYixHQUFNLE9BQU9jLEVBQVUsRUFFVCxTQUFBQyxJQUFBLENBQ04sTUFBQWhLLEVBQUtDLGFBQVUsTUFFckIsU0FBU2dLLEVBQWVDLEVBQTBCLENBQ2hELEtBQU0sQ0FBRSxJQUFBQyxFQUFLLElBQUFqSCxFQUFLLE1BQUF6QixDQUFBLEVBQVV5SSxFQUN4QnpJLEdBQVMsT0FDUHpCLEVBQUcsT0FBUyxRQUNkbUssRUFBSWpILENBQUcsRUFBSStGLEdBQU14SCxDQUFLLEVBQUUsUUFBTyxFQUN0QnpCLEVBQUcsT0FBUyxTQUFXQSxFQUFHLFVBQVksS0FDdENBLEVBQUcsS0FJbEIsQ0FvS08sTUFsSytDLENBQ3BELFNBQVUsQ0FDUixLQUFNLENBQ0osVUFBVyxDQUVULEdBQUdBLEVBQUcsV0FBVyxjQUFjLFVBQVUsRUFDekMsT0FBUUEsRUFBRyxXQUFXLFVBQ3ZCLENBQ0YsRUFDRCxPQUFRLENBQ04sTUFBTyxJQUNQLFVBQVcsQ0FBRSxLQUFNLGdCQUFrQixDQUN0QyxFQUNELGFBQWFrSyxFQUFLLENBQ2hCRCxFQUFlQyxDQUFLLENBQ3RCLENBQ0QsRUFDRCxLQUFNLENBQ0osS0FBTSxDQUNKLFVBQVcsQ0FFVCxHQUFHbEssRUFBRyxXQUFXLGNBQWMsTUFBTSxFQUNyQyxPQUFRQSxFQUFHLFdBQVcsVUFDdkIsQ0FDRixFQUNELE9BQVEsQ0FDTixNQUFPLFNBQ1AsTUFBTyxJQUNQLFVBQVcsQ0FBRSxLQUFNLGlCQUFrQixPQUFRLFlBQWMsQ0FDNUQsRUFDRCxhQUFha0ssRUFBSyxDQUNoQkQsRUFBZUMsQ0FBSyxDQUN0QixDQUNELEVBQ0QsVUFBVyxDQUNULEtBQU0sQ0FDSixVQUFXLENBRVQsR0FBR2xLLEVBQUcsV0FBVyxjQUFjLFdBQVcsRUFDMUMsT0FBUUEsRUFBRyxXQUFXLFVBQ3ZCLENBQ0YsRUFDRCxPQUFRLENBQUUsTUFBTyxJQUFLLFVBQVd1SixFQUFvQixFQUNyRCxhQUFhLENBQUUsSUFBQVksRUFBSyxJQUFBakgsRUFBSyxNQUFBekIsR0FBTyxDQUMxQkEsR0FBUyxNQUFRLE1BQU0sUUFBUUEsQ0FBSyxHQUFLQSxFQUFNLFNBQVcsR0FDeERBLEdBQVMsT0FDUHpCLEVBQUcsT0FBUyxRQUNkbUssRUFBSWpILENBQUcsRUFBSSxDQUFDK0YsR0FBTXhILEVBQU0sQ0FBQyxDQUFDLEVBQUUsUUFBTyxFQUFJd0gsR0FBTXhILEVBQU0sQ0FBQyxDQUFDLEVBQUUsUUFBUyxDQUFBLEVBRWhFMEksRUFBSWpILENBQUcsRUFBSSxDQUFDK0YsR0FBTXhILEVBQU0sQ0FBQyxDQUFDLEVBQUd3SCxHQUFNeEgsRUFBTSxDQUFDLENBQUMsQ0FBQyxFQUlwRCxDQUNELEVBQ0QsY0FBZSxDQUNiLEtBQU0sQ0FDSixVQUFXLENBQ1QsR0FBR3pCLEVBQUcsV0FBVyxjQUFjLGVBQWUsRUFDOUMsT0FBUUEsRUFBRyxXQUFXLFVBQ3ZCLENBQ0YsRUFDRCxPQUFRLENBQ04sTUFBTyxJQUNQLFVBQVd3SixFQUNaLEVBQ0QsYUFBYSxDQUFFLElBQUFXLEVBQUssSUFBQWpILEVBQUssTUFBQXpCLEdBQU8sQ0FDMUJBLEdBQVMsTUFBUSxNQUFNLFFBQVFBLENBQUssR0FBS0EsRUFBTSxTQUFXLElBQ3hEekIsRUFBRyxPQUFTLFFBQ2RtSyxFQUFJakgsQ0FBRyxFQUFJLENBQUMrRixHQUFNeEgsRUFBTSxDQUFDLENBQUMsRUFBRSxRQUFPLEVBQUl3SCxHQUFNeEgsRUFBTSxDQUFDLENBQUMsRUFBRSxRQUFTLENBQUEsRUFFaEUwSSxFQUFJakgsQ0FBRyxFQUFJLENBQUMrRixHQUFNeEgsRUFBTSxDQUFDLENBQUMsRUFBR3dILEdBQU14SCxFQUFNLENBQUMsQ0FBQyxDQUFDLEVBR2xELENBQ0QsRUFDRCxLQUFNLENBQ0osS0FBTSxDQUNKLFVBQVcsQ0FFVCxLQUFNekIsRUFBRyxXQUFXLEtBQ3BCLE9BQVFBLEVBQUcsV0FBVyxVQUN2QixDQUNGLEVBQ0QsT0FBUSxDQUNOLE1BQU8sSUFDUCxNQUFPLFNBQ1AsVUFBVyxDQUFFLEtBQU0saUJBQWtCLE9BQVEsVUFBWSxDQUMxRCxFQUNELGFBQWFrSyxFQUFLLENBQ2hCRCxFQUFlQyxDQUFLLENBQ3RCLENBQ0QsRUFDRCxNQUFPLENBQ0wsS0FBTSxDQUNKLFVBQVcsQ0FFVCxHQUFHbEssRUFBRyxXQUFXLGNBQWMsT0FBTyxFQUN0QyxPQUFRQSxFQUFHLFdBQVcsVUFDdkIsQ0FDRixFQUNELE9BQVEsQ0FDTixNQUFPLFNBQ1AsTUFBTyxJQUNQLFVBQVcsQ0FBRSxLQUFNLGlCQUFrQixPQUFRLFNBQVcsQ0FDekQsRUFDRCxhQUFha0ssRUFBSyxDQUNoQkQsRUFBZUMsQ0FBSyxDQUN0QixDQUNELEVBQ0QsS0FBTSxDQUNKLEtBQU0sQ0FDSixVQUFXLENBRVQsR0FBR2xLLEVBQUcsV0FBVyxjQUFjLE1BQU0sRUFDckMsT0FBUUEsRUFBRyxXQUFXLFVBQ3ZCLENBQ0YsRUFDRCxPQUFRLENBQ04sTUFBTyxTQUNQLE1BQU8sSUFDUCxVQUFXLENBQUUsS0FBTSxpQkFBa0IsT0FBUSxZQUFjLENBQzVELEVBQ0QsYUFBYWtLLEVBQUssQ0FDaEJELEVBQWVDLENBQUssQ0FDdEIsQ0FDRCxFQUNELFFBQVMsQ0FDUCxLQUFNLENBQ0osVUFBVyxDQUVULEdBQUdsSyxFQUFHLFdBQVcsY0FBYyxTQUFTLEVBQ3hDLE9BQVFBLEVBQUcsV0FBVyxVQUN2QixDQUNGLEVBQ0QsT0FBUSxDQUNOLE1BQU8sU0FDUCxNQUFPLElBQ1AsVUFBVyxDQUFFLEtBQU0saUJBQWtCLE9BQVEsV0FBYSxDQUMzRCxFQUNELGFBQWFrSyxFQUFLLENBQ2hCRCxFQUFlQyxDQUFLLENBQ3RCLENBQ0QsRUFDRCxLQUFNLENBQ0osS0FBTSxDQUNKLFVBQVcsQ0FFVCxHQUFHbEssRUFBRyxXQUFXLGNBQWMsTUFBTSxFQUNyQyxPQUFRQSxFQUFHLFdBQVcsVUFDdkIsQ0FDRixFQUNELE9BQVEsQ0FDTixNQUFPLFNBQ1AsTUFBTyxJQUNQLFVBQVcsQ0FBRSxLQUFNLGlCQUFrQixPQUFRLE1BQVEsQ0FDdEQsRUFDRCxhQUFha0ssRUFBSyxDQUNoQkQsRUFBZUMsQ0FBSyxDQUN0QixDQUNELENBQUEsQ0FHTCxnSEM1TGMsU0FBQUUsSUFBQSxDQUNOLEtBQUEsQ0FBRSxHQUFBcEssR0FBTzJILEdBQUFBLFFBQ1IsTUFBQSxDQUNMLE9BQVEsQ0FDTixLQUFNLENBQUUsVUFBVyxDQUFFLEtBQU0zSCxFQUFHLE9BQU8sS0FBTSxNQUFPLENBQUEsRUFBTSxFQUN4RCxNQUFPLFFBQ1IsRUFDRCxPQUFRLENBQ04sS0FBTSxDQUFFLFVBQVcsQ0FBRSxLQUFNQSxFQUFHLE9BQU8sS0FBTSxNQUFPLENBQUEsRUFBTSxFQUN4RCxVQUFXLENBQUUsS0FBTUEsRUFBRyxPQUFPLEtBQU0sTUFBTyxFQUFJLEVBQzlDLE1BQU8sUUFDUixFQUNELE9BQVEsQ0FDTixLQUFNLENBQUUsVUFBVyxDQUFFLEtBQU0sWUFBYSxNQUFPLENBQUEsRUFBTSxFQUNyRCxNQUFPLFFBQ1IsRUFDRCxLQUFNLENBQ0osS0FBTSxDQUFFLFVBQVcsQ0FBRSxLQUFNLFVBQVcsTUFBTyxDQUFBLEVBQU0sRUFDbkQsTUFBTyxRQUNSLEVBQ0QsZUFBZ0IsQ0FDZCxLQUFNLENBQUUsVUFBVyxDQUFFLEtBQU0sa0JBQW1CLE1BQU8sQ0FBQSxFQUFNLEVBQzNELE1BQU8sUUFDUixFQUNELFNBQVUsQ0FDUixLQUFNLENBQUUsVUFBVyxDQUFFLEtBQU0sY0FBZSxNQUFPLENBQUEsRUFBTSxFQUN2RCxNQUFPLFFBQ1IsRUFDRCxhQUFjLENBQ1osS0FBTSxDQUFFLFVBQVcsQ0FBRSxLQUFNLGtCQUFtQixNQUFPLENBQUEsRUFBTSxDQUM1RCxDQUFBLENBRUwsZ0hDakNjLFNBQUFxSyxJQUFBLENBQ04sTUFBQXJLLEVBQUtDLGFBQVUsTUFDZCxNQUFBLENBQ0wsT0FBUSxDQUNOLEtBQU0sQ0FDSixVQUFXLENBRVQsS0FBTUQsRUFBRyxPQUFPLEtBQ2hCLE9BQVFBLEVBQUcsVUFDWixDQUNGLENBQ0YsQ0FBQSxDQUVMLGdIQ2RjLFNBQUFzSyxJQUFBLENBQ0wsTUFBQSxDQUNMLGVBQWdCLENBQ2QsS0FBTSxDQUNKLFVBQVcsQ0FDVCxLQUFNLHVCQUNQLENBQ0YsRUFDRCxPQUFRLENBQ04sVUFBVUgsRUFBVUksRUFBYTlJLEVBQVUsQ0FDekMsSUFBSStJLEVBQU0sR0FDVixPQUFJL0ksR0FBUyxPQUNQQSxFQUFNLGFBQWUsS0FDaEIrSSxHQUFBLEtBQU8vSSxFQUFNLFlBQWMsSUFDekJBLEVBQU0sYUFBZSxPQUN2QitJLEdBQUEsSUFBTS9JLEVBQU0sWUFBYyxLQUUvQkEsRUFBTSxhQUFlLE9BQ3ZCK0ksR0FBTy9JLEVBQU0sY0FHVitJLENBQ1QsQ0FDRCxDQUNGLENBQUEsQ0FFTCxnSEN6QmMsU0FBQUMsSUFBQSxDQUNOLE1BQUF6SyxFQUFLQyxhQUFVLE1BQ2QsTUFBQSxDQUNMLE9BQVEsQ0FDTixPQUFRLENBQUUsa0JBQW1CLFFBQVUsRUFDdkMsS0FBTSxDQUNKLFVBQVcsQ0FDVCxLQUFNRCxFQUFHLE9BQU8sS0FDaEIsQ0FBQ0EsRUFBRyxPQUFPLFNBQVMsRUFBRyxFQUN4QixDQUNGLENBQ0YsRUFDRCxjQUFlLENBQ2IsT0FBUSxDQUFFLGtCQUFtQixRQUFVLEVBQ3ZDLE9BQVEsQ0FBRSxVQUFXLENBQUUsS0FBTSxtQkFBb0IsT0FBUSxhQUFnQixFQUN6RSxLQUFNLENBQ0osVUFBVyxDQUNULEtBQU0saUJBQ04sT0FBUUEsRUFBRyxPQUFPLFdBQ2xCLENBQUNBLEVBQUcsT0FBTyxTQUFTLEVBQUcsRUFDeEIsQ0FDRixDQUNGLEVBQ0QsZUFBZ0IsQ0FDZCxPQUFRLENBQUUsVUFBVyxDQUFFLEtBQU0sbUJBQW9CLE9BQVEsYUFBZ0IsRUFDekUsS0FBTSxDQUNKLFVBQVcsQ0FDVCxLQUFNLGlCQUNQLENBQ0YsQ0FDRixFQUNELGFBQWMsQ0FDWixPQUFRLENBQ04sVUFBVyxDQUNULEtBQU0saUJBQ04sT0FBUUEsRUFBRyxPQUFPLFdBQ2xCLGtCQUFtQixRQUNwQixDQUNGLEVBQ0QsS0FBTSxDQUNKLFVBQVcsQ0FDVCxLQUFNLGdCQUNOLE9BQVFBLEVBQUcsV0FBVyxXQUN0QixDQUFDQSxFQUFHLE9BQU8sU0FBUyxFQUFHLEVBQ3hCLENBQ0YsRUFDRCxPQUFRLENBQUUsVUFBVyxDQUFFLEtBQU0sbUJBQW9CLE9BQVEsYUFBZ0IsQ0FDMUUsRUFDRCxnQkFBaUIsQ0FDZixPQUFRLENBQ04sVUFBVyxDQUFFLEtBQU0sZ0JBQWtCLEVBQ3JDLGtCQUFtQixRQUNwQixFQUNELEtBQU0sQ0FDSixVQUFXLENBQ1QsS0FBTSxtQkFDTixPQUFRQSxFQUFHLFdBQVcsV0FDdEIsQ0FBQ0EsRUFBRyxPQUFPLFNBQVMsRUFBRyxFQUN4QixDQUNGLEVBQ0QsT0FBUSxDQUFFLFVBQVcsQ0FBRSxLQUFNLG1CQUFvQixPQUFRLGFBQWdCLENBQzFFLEVBQ0QsY0FBZSxDQUNiLE9BQVEsQ0FDTixVQUFXLENBQUUsS0FBTSxpQkFBa0IsT0FBUUEsRUFBRyxPQUFPLFVBQVksRUFDbkUsa0JBQW1CLFFBQ3BCLEVBQ0QsS0FBTSxDQUNKLFVBQVcsQ0FDVCxLQUFNLGlCQUNOLE9BQVFBLEVBQUcsT0FBTyxXQUNsQixDQUFDQSxFQUFHLE9BQU8sU0FBUyxFQUFHLEVBQ3hCLENBQ0YsRUFDRCxPQUFRLENBQUUsVUFBVyxDQUFFLEtBQU0sbUJBQW9CLE9BQVEsYUFBZ0IsQ0FDMUUsQ0FBQSxDQUVMLGdIQzdFYyxTQUFBMEssSUFBQSxDQUNOLE1BQUExSyxFQUFLQyxhQUFVLE1BQ2QsTUFBQSxDQUNMLEtBQU0sQ0FDSixLQUFNLENBQ0osVUFBVyxDQUVULEtBQU1ELEVBQUcsTUFBTSxLQUNmLE9BQVFBLEVBQUcsU0FBUyxXQUNwQixDQUFDQSxFQUFHLE1BQU0sU0FBUyxFQUFHLEVBQ3ZCLENBQ0YsRUFDRCxPQUFRLENBQ04sa0JBQW1CLE9BQ3BCLENBQ0YsRUFDRCxTQUFVLENBQ1IsS0FBTSxDQUNKLFVBQVcsQ0FFVCxLQUFNQSxFQUFHLGNBQWMsS0FDdkIsT0FBUUEsRUFBRyxjQUFjLFdBQ3pCLEdBQUdBLEVBQUcsY0FBYyxZQUNyQixDQUNGLEVBQ0QsT0FBUSxDQUNOLGtCQUFtQixPQUNwQixDQUNGLEVBQ0QsU0FBVSxDQUNSLE9BQVEsQ0FDTixVQUFXLENBRVQsS0FBTUEsRUFBRyxNQUFNLEtBQ2YsS0FBTSxPQUNOLENBQUNBLEVBQUcsTUFBTSxTQUFTLEVBQUcsRUFDdkIsRUFDRCxrQkFBbUIsT0FDcEIsRUFDRCxLQUFNLENBQ0osVUFBVyxDQUVULEtBQU1BLEVBQUcsU0FBUyxLQUNsQixLQUFNQSxFQUFHLFNBQVMsS0FDbEIsT0FBUUEsRUFBRyxTQUFTLFdBQ3BCLENBQUNBLEVBQUcsTUFBTSxTQUFTLEVBQUcsRUFDdkIsQ0FDRixDQUNGLENBQUEsQ0FFTCxnSENsRGMsU0FBQTJLLElBQUEsQ0FDTixNQUFBM0ssRUFBS0MsYUFBVSxNQUNkLE1BQUEsQ0FDTCxZQUFhLENBQ1gsT0FBUSxDQUFFLGtCQUFtQixRQUFVLEVBQ3ZDLE9BQVEsQ0FBRSxVQUFXLENBQUUsS0FBTSxtQkFBb0IsT0FBUSxhQUFnQixFQUN6RSxLQUFNLENBQ0osVUFBVyxDQUNULEtBQU0sZUFDTixPQUFRRCxFQUFHLFdBQVcsV0FDdEIsQ0FBQ0EsRUFBRyxXQUFXLFNBQVMsRUFBRyxFQUM1QixDQUNGLENBQ0YsQ0FBQSxDQUVMLENDYkEsTUFBTTRLLDBVQUNBQyxHQUFrQyxDQUFBLEVBQ3hDN0gsRUFBRSxRQUFRNEgsR0FBV25KLEdBQWMsQ0FDYm9KLEdBQUEsS0FBS3BKLEVBQU0sT0FBTyxDQUN4QyxDQUFDLEVBRUQsTUFBTXFKLEdBQW9CLENBQUEsRUFFMUIsU0FBU0MsSUFBUSxDQUNSLE9BQUFELEVBQ1QsQ0FFQSxTQUFTRSxHQUFROUgsRUFBVyxDQUMxQixPQUFPNEgsR0FBYTVILENBQUcsQ0FDekIsQ0FFQSxTQUFTK0gsR0FBU0MsRUFBYSxDQUM3QixVQUFXaEksS0FBT2dJLEVBQ0hKLEdBQUE1SCxDQUFHLEVBQUlnSSxFQUFTaEksQ0FBRyxDQUVwQyxDQUNlLE1BQUFpSSxHQUFBLENBQ2IsUUFBQUgsR0FDQSxTQUFBQyxHQUNBLFNBQUFGLEdBQ0EsU0FBTyxDQUNMLFVBQVdLLEtBQVdQLEdBQ3BCN0gsRUFBRSxRQUFRb0ksRUFBVyxFQUFBLENBQUNuSSxFQUFNQyxJQUFPLENBQ2pDNEgsR0FBYTVILENBQUcsRUFBSUQsQ0FBQSxDQUNyQixFQUVJNUIsR0FBQSxNQUFNLG1CQUFvQnlKLEVBQVksQ0FDL0MsR0NqQkZPLEdBQWVDLGtCQUFnQixDQUM3QixLQUFNLFNBQ04sT0FBUSxDQUNOLE1BQU1DLEVBQWVuRSxFQUFBQSxNQUNyQm9FLE9BQUFBLEVBQUFBLFVBQVUsSUFBTSxDQUNDLE9BQU8saUJBQWlCRCxFQUFRLE1BQU0sVUFBVSxFQUNsQyxpQkFBaUIsVUFBVSxJQUNsQyxZQUNwQnRFLEdBQU0sT0FBTyxLQUNYLG9GQUFBLENBRUosQ0FDRCxFQUNNLENBQ0wsUUFBQXNFLENBQUEsQ0FFSixDQUNGLENBQUMsOEVDbENvQkUsR0FBZSxDQUFBLElBQUEsMkJBQ0VDLEdBQU0sQ0FBQSxJQUFBLDBCQUY1Q0MsR0FBQSxDQUFBLE1BQUEsbUJBU3NDQyxHQUFNLENBQUEsSUFBQSwwQkFQN0JDLFNBQUFBLEdBQU9DLEVBQU1DLEVBQUFDLEVBQUFDLEVBQUFDLEVBQUFDLEVBQUEsQ0FBeEIsT0FBQUMsWUFBQSxFQUFBQyxxQkFFTSxNQUZOWixHQUVNLENBQUFLLEVBREosT0FBMkIsUUFBQSxNQUFBTSxFQUFBLFVBQUEsRUFBQUMsRUFBQSxtQkFBQSxNQUFBWCxHQUFBLENBSGpDWSxhQUFBUixFQUFBLE9BQUEsUUFBQSxDQUFBLElBT01TLEVBQUFBLG1CQUFhLEdBQUEsRUFBQSxFQUFBQyxFQUFBLG1CQUFBLE1BQUFiLEdBQUEsQ0FFSkUsYUFBT0MsRUFBTSxPQUFBLFNBQUEsQ0FBQSxDQUFBLElBQ3RCLE9BQTJCLFFBQUEsTUFBQU0sRUFBQSxVQUFBLEVBQUFDLEVBQUEsbUJBQUEsTUFBQVQsR0FBQSxDQVZqQ1UsYUFBQVIsRUFBQSxPQUFBLFFBQUEsQ0FBQSxDQUFBLEdBQUFTLEVBQUFBLG1CQUFBLEdBQUEsRUFBQSx3Q0NFQSxTQUFTRSxHQUFjQyxFQUFhLENBQ2xDLE9BQU9BLEdBQVksT0FBU0EsYUFBb0JDLElBQWVDLFFBQU1GLENBQVEsRUFDL0UsQ0FDQSxTQUFTRyxHQUFjcEwsRUFBVSxDQUMvQixPQUFPZ0wsR0FBY2hMLENBQUssR0FBSyxDQUFDQSxFQUFNLFNBQ3hDLENBQ0EsU0FBU3FMLEdBQU1DLEtBQWdCQyxFQUFZLENBTWhDLFNBQUFDLEVBQVdDLEVBQWVSLEVBQWEsQ0FDOUMsR0FBSUEsR0FBWSxPQUlaMUosRUFBRSxRQUFRa0ssQ0FBUSxHQUtsQlQsR0FBY0MsQ0FBUSxHQUNqQixPQUFBQSxDQUVYLENBRUEsSUFBSVMsRUFBYSxLQUNqQixVQUFXbEssS0FBUStKLEVBQ2JQLEdBQWN4SixDQUFJLElBQ1prSyxFQUFBbEssR0FHWixPQUFJa0ssR0FHR25LLEVBQUUsVUFBVStKLEVBQVEsR0FBR0MsRUFBU0MsQ0FBVSxDQUNuRCxDQUVBLFNBQVNHLEdBQVVMLEVBQVcsQ0FDeEIsR0FBQUYsR0FBY0UsQ0FBTSxFQUNmLE9BQUFBLEVBRVQsU0FBU0UsRUFBV3hMLEVBQVUsQ0FDeEIsR0FBQW9MLEdBQWNwTCxDQUFLLEVBQ2QsT0FBQUEsQ0FFWCxDQUVPLE9BQUF1QixFQUFFLGNBQWMrSixFQUFRRSxDQUFVLENBQzNDLENBQ0EsSUFBQUksR0FBQSxLQUFpQixDQUFqQixjQUNFMUosR0FBQSxpQkFBWSxJQUVaLGFBQWEySixFQUFjLENBQ3pCLEtBQUssVUFBWUEsQ0FDbkIsQ0FDRCxXQUVlQyxJQUFRLENBQ2YsTUFBQSxDQUFBLE1BQ0xULEdBQUEsVUFDQU0sR0FBQSxZQUNBVCxFQUFBLENBRUosQ0M3REEsS0FBTSxXQUFFUyxFQUFTLEVBQUtHLEtBRXRCLFNBQVNDLEdBQWUvTCxFQUFVLENBQ2hDLE9BQU9BLGFBQWlCZ00sRUFDMUIsQ0FDQSxTQUFTQyxHQUFjak0sRUFBVSxDQUMvQixPQUFPQSxhQUFpQmtNLEVBQzFCLENBQ0EsU0FBU0MsR0FBa0JiLEVBQWFwSyxFQUFpQmtMLEVBQWdCLENBQ3ZFLE1BQU1DLEVBQWdCLENBQUEsRUFDdEIsR0FBSWYsR0FBVSxLQUNMLE9BQUFlLEVBRUgsTUFBQUMsRUFBWUYsRUFBVUwsR0FBaUJFLEdBQzdDLE9BQUExRyxHQUFTLFlBQ1ArRixFQUNBLENBQUN0TCxFQUFZeUIsRUFBVXNDLEVBQWF3SSxJQUFnQixDQUM5QyxHQUFBRCxFQUFVdE0sQ0FBSyxFQUFHLENBRXBCLE1BQU1tRCxFQUFlb0osRUFBUSxLQUM3QixHQUFJckwsR0FDRixVQUFXc0wsS0FBV3RMLEVBQ2hCLEdBQUEsT0FBT3NMLEdBQVksVUFDakIsR0FBQXJKLEVBQUssV0FBV3FKLENBQU8sRUFDbEIsTUFBQSxXQUVBQSxhQUFtQixRQUN4QkEsRUFBUSxLQUFLckosQ0FBSSxFQUNaLE1BQUEsR0FLZixPQUFBa0osRUFBU2xKLENBQUksRUFBSW5ELEVBQ1YsRUFDUixDQUVHLE1BQUF5TSxDQUFBQSxFQUFBQSxVQUFVek0sQ0FBSyxDQUdaLEVBRVQsQ0FFRSxjQUFlLEVBQUEsQ0FDaEIsRUFHSXFNLENBQ1QsQ0FFQSxTQUFTSyxHQUFlQyxFQUF3QkMsRUFBdUIsQ0FDckUsR0FBSUQsR0FBcUIsTUFBUSxPQUFPLEtBQUtBLENBQWlCLEVBQUUsUUFBVSxFQUNqRSxPQUFBLEtBRVQsTUFBTUUsRUFBcUIsQ0FBQSxFQUMzQixPQUFBdEwsRUFBRSxRQUFRb0wsRUFBbUIsQ0FBQ25MLEVBQU1DLElBQU8sQ0FDekNvTCxFQUFjcEwsQ0FBRyxFQUFJRCxFQUFLLGNBQWNvTCxDQUFZLENBQUEsQ0FDckQsRUFDTUMsQ0FDVCxDQUVBLFNBQVNDLEdBQXFCeEIsRUFBYXlCLEVBQW1CLENBQ3hEQSxHQUFrQixNQUFRLE9BQU8sS0FBS0EsQ0FBYyxFQUFFLFFBQVUsR0FHcEV4TCxFQUFFLFFBQVF3TCxFQUFnQixDQUFDQyxFQUFVdkwsSUFBTyxDQUN4Q0YsRUFBQSxJQUFJK0osRUFBUTdKLEVBQUt1TCxFQUFTLE9BQVMsS0FBTyxLQUFPQSxFQUFTLEtBQUssQ0FBQSxDQUNsRSxDQUNILENBRUEsU0FBU0MsR0FDUEMsRUFDQU4sRUFDQTFMLEVBQ0FpTSxFQUFxQyxDQUUvQixNQUFBQyxFQUFlOU8sRUFBQUEsU0FBUyxJQUFLLENBQ2pDLE1BQU1nTixFQUFTNEIsSUFDUixPQUFBZixHQUFrQmIsRUFBUXBLLEVBQVUsRUFBSyxDQUFBLENBQ2pELEVBRUt5TCxFQUFvQnJPLEVBQUFBLFNBQVMsSUFBSyxDQUN0QyxNQUFNZ04sRUFBUzRCLElBQ1IsT0FBQWYsR0FBa0JiLEVBQVFwSyxFQUFVLEVBQUksQ0FBQSxDQUNoRCxFQUVLNkwsRUFBaUJ6TyxFQUFBQSxTQUFTLElBQ3ZCb08sR0FBZUMsRUFBa0IsTUFBT0MsQ0FBWSxDQUM1RCxFQUVELE9BQU90TyxXQUFTLElBQUssQ0FDbkIsSUFBSWdOLEVBQVM0QixJQUNiLE1BQU1HLEVBQWEsT0FBTyxLQUFLVixFQUFrQixLQUFLLEVBQUUsT0FDbERXLEVBQVksT0FBTyxLQUFLRixFQUFhLEtBQUssRUFBRSxPQUU5QyxHQUFBQyxFQUFhLEdBQUtDLEVBQVksRUFBRyxDQUVuQyxHQURBaEMsRUFBU0ssR0FBVUwsQ0FBTSxFQUNyQmdDLEVBQVksRUFBRyxDQUNqQixNQUFNZixFQUFVSyxFQUFlQSxFQUFZLEVBQUssQ0FBQSxFQUNoRHJMLEVBQUUsUUFBUTZMLEVBQWEsTUFBTyxDQUFDcE4sRUFBT3lCLElBQU8sQ0FDM0NGLEVBQUUsSUFBSStKLEVBQVE3SixFQUFLekIsRUFBTSxVQUFVdU0sQ0FBTyxDQUFDLENBQUEsQ0FDNUMsQ0FDRixDQUNHYyxFQUFhLEdBQ01QLEdBQUF4QixFQUFReUIsRUFBZSxLQUFLLENBRXBELENBRUQsT0FBSUksRUFDS0EsRUFBZTdCLENBQU0sRUFFdkJBLENBQUEsQ0FDUixDQUNILE9BRWFZLEVBQVksQ0FFdkIsWUFBWXFCLEVBQTBCLENBRHRDckwsR0FBQSxrQkFFRSxLQUFLLFVBQVlxTCxDQUNuQixDQUNELENBRUssU0FBVUMsR0FBMEJELEVBQTBCLENBQzNELE9BQUEsSUFBSXJCLEdBQW1CcUIsQ0FBUyxDQUN6QyxPQUlhdkIsRUFBaUIsQ0FJNUIsWUFBWWxMLEVBQStCLENBSDNDb0IsR0FBQSxjQUNBQSxHQUFBLGdCQUNBQSxHQUFBLHFCQUVRLEtBQUEsQ0FBRSxRQUFBdUwsRUFBUyxhQUFBQyxDQUFpQixFQUFBNU0sRUFDbEMsS0FBSyxNQUFRQSxFQUFRLE1BQ3JCLEtBQUssUUFBVTJNLEVBQ2YsS0FBSyxhQUFlQyxDQUN0QixDQUVBLGNBQWNkLEVBQTBCLENBQ3RDQSxFQUFlQSxHQUFnQixVQUFBLENBQUEsRUFDekIsTUFBQWUsRUFBb0JoSSxFQUFBQSxJQUFJLEtBQUssWUFBWSxFQUN6Q2lJLEVBQWdCdFAsRUFBQUEsU0FBYSxJQUM3QixLQUFLLE1BQ0EsS0FBSyxNQUFNc08sRUFBQSxDQUFjLEVBRTNCLElBQ1IsRUFFRGlCLE9BQUFBLEVBQUFBLE1BQ0UsSUFBTUQsRUFBYyxNQUNwQixNQUFPNU4sR0FBYSxDQUVsQjJOLEVBQVMsTUFBUSxNQUFNLEtBQUssUUFBUTNOLEVBQU80TSxHQUFjLENBQUEsRUFFM0QsQ0FBRSxVQUFXLEVBQUEsQ0FBTSxFQUdkZSxDQUNULENBQ0QsQ0FDSyxTQUFVRyxHQUNkaE4sRUFBbUMsQ0FFNUIsT0FBQSxJQUFJa0wsR0FBNkJsTCxDQUFPLENBQ2pELFVBQ2dCaU4sSUFBVSxDQUNqQixNQUFBLENBQ0wsYUFBQTdCLEdBQ0EsUUFBQXNCLEdBQ0Esa0JBQUF4QixHQUNBLGFBQUE4QixHQUNBLFdBQUFiLEVBQUEsQ0FFSixDQ3JMTyxNQUFNZSxHQUFZLENBQ3ZCLGFBQWMsR0NvQlYsT0FBRTNDLEdBQU9NLFVBQUFBLElBQWNHLEdBQVEsRUFTL0JtQyxHQUEwQyxDQUFBLEVBRTFDLFNBQVVDLEdBQTBCQyxFQUF5QixDQUNqRTVNLEVBQUU2TSxPQUFPSCxHQUFxQnpNLEdBQ3JCQSxFQUFLbkQsT0FBUzhQLEVBQU85UCxJQUM3QixFQUNENFAsR0FBbUJJLEtBQUtGLENBQU0sRUFDOUJGLEdBQW1CSyxLQUFLLENBQUMvRyxFQUFHZ0gsSUFDbkJoSCxFQUFFaUgsTUFBUUQsRUFBRUMsS0FDcEIsRUFDRDVPLEdBQU9KLE1BQU0sK0NBQWdEMk8sRUFBUSxjQUFlRixFQUFrQixDQUN4RyxDQUVBLFNBQVNRLEdBQWdCak4sRUFBNEIsU0FFbkQsR0FBSUEsRUFBS2tOLEtBQU0sQ0FDYixJQUFJbE4sRUFBQUEsRUFBS3NILFNBQUx0SCxNQUFBQSxFQUFhbU4sVUFBVyxDQUMxQixNQUFNRCxFQUFPL0MsR0FBVW5LLEVBQUtrTixJQUFJLEVBQ2hDbE4sRUFBS3NILE9BQU82RixVQUFVRCxLQUFPckQsR0FBTXFELEVBQU1sTixFQUFLc0gsT0FBTzZGLFVBQVVELElBQUksQ0FDcEUsQ0FDRCxJQUFJbE4sRUFBQUEsRUFBS29OLE9BQUxwTixNQUFBQSxFQUFXbU4sVUFBVyxDQUN4QixNQUFNRCxFQUFPL0MsR0FBVW5LLEVBQUtrTixJQUFJLEVBQ2hDbE4sRUFBS29OLEtBQUtELFVBQVVELEtBQU9yRCxHQUFNcUQsRUFBTWxOLEVBQUtvTixLQUFLRCxVQUFVRCxJQUFJLENBQ2hFLENBQ0YsQ0FDRCxPQUFPbE4sQ0FDVCxDQUVBLFNBQVNxTixHQUFnQnJOLEVBQTRCLENBQ25ELEdBQUksQ0FBQ0EsRUFBSzZCLEtBQ1IsT0FBTzdCLEVBRVQsSUFBSXNOLEVBQWlCLENBQUEsRUFDakIsT0FBT3ROLEVBQUs2QixNQUFTLFNBQ3ZCeUwsRUFBWSxDQUFDdE4sRUFBSzZCLElBQUksRUFDYjdCLEVBQUs2QixnQkFBZ0IwTCxRQUM5QkQsRUFBWXROLEVBQUs2QixNQUVuQixNQUFNMkwsRUFBTyxDQUFBLEVBQ2IsVUFBVzNMLEtBQVF5TCxFQUFXLENBQzVCLE1BQU1HLEVBQWNDLEdBQU0zRixRQUFRbEcsQ0FBSSxFQUNsQzRMLEdBQ0Y1RCxHQUFNMkQsRUFBTUMsQ0FBVyxDQUUxQixDQUNEek4sT0FBQUEsRUFBTzZKLEdBQU0yRCxFQUFNeE4sQ0FBSSxFQUNoQkEsQ0FDVCxDQUVBLE1BQU0yTixHQUFvQixDQUFFOVEsS0FBTSxPQUFRK1EsT0FBUVAsR0FBaUJMLE1BQU8sSUFDcEVhLEdBQWEsQ0FBRWhSLEtBQU0sT0FBUStRLE9BQVFYLEdBQWlCRCxNQUFPLElBRTdEYyxHQUFpQyxDQUNyQ2pSLEtBQU0sMkJBQ05tUSxNQUFPLEdBQ1BZLE9BQVFBLENBQUNHLEVBQXNDLEdBQUlDLEVBQTJCLENBQUEsSUFBTSxTQUNsRixHQUFJLEdBQUNBLEVBQUFBLEVBQVlDLFdBQVpELE1BQUFBLEVBQXNCRSwwQkFDekIsT0FBT0gsRUFJVCxNQUFNSSxFQUFnQyxDQUNwQ2hCLFlBRnNCWSxFQUFBQSxFQUFZekcsU0FBWnlHLFlBQUFBLEVBQW9CWixZQUFhLENBQUEsR0FJekQsT0FBSVksRUFBWWxNLE9BQVMsUUFBV2tNLEVBQVlsTSxnQkFBZ0IwTCxPQUFTUSxFQUFZbE0sS0FBS3VNLFNBQVMsTUFBTSxLQUN2R0QsRUFBZUUsT0FBVXRELEdBQXlCLENBQ2hELEtBQU0sQ0FBRXZNLE1BQUFBLENBQU8sRUFBR3VNLEVBQ2xCLE9BQUF1RCxFQUFBLHlCQUFjOVAsQ0FBSyxDQUFBLElBR3ZCcUwsR0FBTWtFLEVBQWEsQ0FBRVEsU0FBVUosQ0FBZ0IsQ0FBQSxFQUN4Q0osQ0FDVCxHQUdGckIsR0FBMEJpQixFQUFpQixFQUMzQ2pCLEdBQTBCbUIsRUFBVSxFQUNwQ25CLEdBQTBCb0IsRUFBOEIsRUFReEQsU0FBU1UsR0FBb0JDLEVBQW9EQyxFQUF3QixDQUN2RyxNQUFNQyxFQUFxQixDQUFBLEVBQzNCNU8sT0FBQUEsRUFBRTZPLFFBQVFILEVBQVMsQ0FBQ3pPLEVBQVdDLElBQVksQ0FFekMsR0FEQUQsRUFBS0MsSUFBTUEsRUFDUEQsRUFBSzBDLFNBQ1AxQyxFQUFLMEMsU0FBVzhMLEdBQW9CeE8sRUFBSzBDLFNBQVVnTSxDQUFXLE1BRzlELFdBQVcvQixLQUFVRixHQUNuQnpNLEVBQU8yTSxFQUFPaUIsT0FBTzVOLEVBQU0wTyxDQUFXLEVBRzFDQyxFQUFjMU8sQ0FBRyxFQUFJRCxDQUN2QixDQUFDLEVBQ00yTyxDQUNULENBUUEsU0FBU0UsR0FBMkJ2TyxFQUEwQixDQUFFLEVBQUVtTyxFQUEyQixDQUMzRjFPLE9BQUFBLEVBQUU2TyxRQUFRSCxFQUFTLENBQUN6TyxFQUFXQyxJQUFZLENBQ3JDRCxFQUFLMEMsU0FDUG1NLEdBQTJCdk8sRUFBS04sRUFBSzBDLFFBQVEsRUFFN0NwQyxFQUFJTCxDQUFHLEVBQUlELENBRWYsQ0FBQyxFQUNNTSxDQUNULFVBRWdCd08sR0FBeUJ4TyxFQUF5QixDQUFFLEVBQUVtTyxFQUEwQixDQUM5RjFPLE9BQUFBLEVBQUU2TyxRQUFRSCxFQUFTLENBQUN6TyxFQUFXQyxJQUFZLENBQ3JDRCxFQUFLMEMsU0FDUG9NLEdBQXlCeE8sRUFBS04sRUFBSzBDLFFBQVEsRUFFM0NwQyxFQUFJTCxDQUFHLEVBQUlELENBRWYsQ0FBQyxFQUNNTSxDQUNULENBTUEsU0FBU3lPLEdBQWlCQyxFQUFnQixDQUN4QyxNQUFNaFAsRUFBT2dQLEVBQ1BDLEVBQWNqUCxFQUFLc0gsUUFBVSxHQUNuQyxPQUFJMkgsRUFBWUMsT0FBUyxPQUN2QkQsRUFBWUMsTUFBUWxQLEVBQUtrUCxPQUUzQkQsRUFBWWhQLElBQU1ELEVBQUtDLElBQ25CRCxFQUFLMEMsV0FDUHVNLEVBQVl2TSxTQUFXeU0sR0FBa0JuUCxFQUFLMEMsUUFBUSxHQUV4RDBNLEdBQXVCSCxDQUFXLEVBQzNCSSxFQUFBQSxTQUFTSixDQUFXLENBQzdCLENBRUEsU0FBU0csR0FBdUI5SCxFQUFXLE9BQ3BDQSxJQUdEQSxFQUFBQSxFQUFPNkYsWUFBUDdGLE1BQUFBLEVBQWtCekssTUFBUSxPQUFPeUssRUFBTzZGLFVBQVV0USxNQUFTLFdBRXhEOE0sRUFBQUEsTUFBTXJDLEVBQU82RixVQUFVdFEsSUFBSSxJQUM5QnlLLEVBQU82RixVQUFVdFEsS0FBT3lTLEVBQUFBLFdBQVdoSSxFQUFPNkYsVUFBVXRRLElBQUksR0FHOUQsQ0FLQSxTQUFTc1MsR0FBa0JWLEVBQTJCLENBQ3BELElBQUljLEVBQWtDLENBQUEsRUFFdEN4UCxPQUFBQSxFQUFFNk8sUUFBUUgsRUFBUyxDQUFDek8sRUFBV0MsSUFBWSxDQUN6Q3NQLEVBQWF0UCxDQUFHLEVBQUk4TyxHQUFpQi9PLENBQUksQ0FDM0MsQ0FBQyxFQUVEdVAsRUFBZUMsR0FBY0QsQ0FBWSxFQUNsQ0EsQ0FDVCxDQUVBLFNBQVNFLEdBQVlDLEVBQVEsQ0FDM0IsT0FBTzNQLEVBQUU0UCxPQUFPRCxFQUFNMVAsR0FDYkEsRUFBS2dOLE9BQVNSLEdBQVVvRCxZQUNoQyxDQUNILENBRUEsU0FBU0osR0FBY2YsRUFBMEIsQ0FDL0MsTUFBTW9CLEVBQXNCLENBQUEsRUFDNUIsVUFBVzVQLEtBQU93TyxFQUFTLENBQ3pCLE1BQU16TyxFQUFPeU8sRUFBUXhPLENBQUcsRUFDeEJELEVBQUtDLElBQU1BLEVBQ1BELEVBQUswQyxVQUFZM0MsRUFBRStQLEtBQUs5UCxFQUFLMEMsUUFBUSxFQUFJLElBQzNDMUMsRUFBSzBDLFNBQVc4TSxHQUFjeFAsRUFBSzBDLFFBQVEsR0FFN0NtTixFQUFLaEQsS0FBSzdNLENBQUksQ0FDZixDQUNELE1BQU0rUCxFQUE0Qk4sR0FBWUksQ0FBSSxFQUM1Q0csRUFBZ0MsQ0FBQSxFQUN0QyxVQUFXaFEsS0FBUStQLEVBQ2pCQyxFQUFXaFEsRUFBS0MsR0FBRyxFQUFJRCxFQUV6QixPQUFPZ1EsQ0FDVCxDQU9BLFNBQVNDLEdBQWlCQyxFQUFvQ0MsRUFBZ0IsQ0FFNUUsTUFBTUMsRUFBbUIsQ0FBQSxFQUN6QnJRLE9BQUFBLEVBQUU2TyxRQUFRc0IsRUFBaUJsUSxHQUFhLENBQ3RDLE1BQU1xUSxFQUFhbEcsR0FBVW5LLEVBQUttUSxDQUFRLENBQUMsR0FBSyxDQUFBLEVBQzVDQSxJQUFhLFFBQVVFLEVBQVduQixPQUFTLE9BQzdDbUIsRUFBV25CLE1BQVFsUCxFQUFLa1AsT0FFMUJtQixFQUFXcFEsSUFBTUQsRUFBS0MsSUFDdEJtUSxFQUFZcFEsRUFBS0MsR0FBRyxFQUFJb1EsRUFFeEJqQixHQUF1QmlCLENBQVUsQ0FDbkMsQ0FBQyxFQUNNRCxDQUNULENBU0EsU0FBU0UsR0FDUEMsRUFDQUosRUFDQUQsRUFDQU0sRUFBZ0MsQ0FFaEMsTUFBTUosRUFBY0gsR0FBaUJDLEVBQWdCQyxDQUFRLEVBQ3ZEL0MsRUFBT3ZELEdBQU1NLEdBQVVvRyxFQUFZbkQsSUFBSSxFQUFHbUQsRUFBWUosQ0FBUSxFQUFHLENBQUUxQixRQUFTMkIsQ0FBYSxDQUFBLEVBQy9GLE9BQUlJLEdBQ0ZBLEVBQVdwRCxDQUFJLEVBRVZBLENBQ1QsQ0FRQSxTQUFTcUQsR0FBZ0JGLEVBQTBCSixFQUFXLFNBQVVILEVBQThCLE9BQ3BHLE1BQU1VLEVBQWdCVCxHQUFpQkQsRUFBWUcsQ0FBUSxFQUNyRFEsRUFBNEIsQ0FBQSxFQUM1QkMsSUFBWUwsRUFBQUEsRUFBWXRDLFdBQVpzQyxZQUFBQSxFQUFzQk0sc0JBQXVCLENBQzdELFlBQ0EsY0FDQSxRQUNBLE1BQ0EsUUFDQSxRQUFRLEVBR1YsU0FBU0MsRUFBMEJoSCxFQUFhN0osRUFBYThRLEVBQWEsQ0FFeEUsR0FEaUJoUixFQUFFcU8sU0FBU3dDLEVBQVdHLENBQUssR0FDNUJSLEVBQVk5QixRQUFReE8sQ0FBRyxFQUFHLENBQ3hDLE1BQU0rUSxFQUFTVCxFQUFZOUIsUUFBUXhPLENBQUcsRUFBRThRLENBQUssRUFDekNDLElBQ0ZsSCxFQUFPaUgsQ0FBSyxFQUFJQyxFQUVuQixDQUNILENBRUFqUixPQUFBQSxFQUFFNk8sUUFBUXpFLEdBQVVvRyxFQUFZbkQsS0FBS3FCLE9BQU8sRUFBRyxDQUFDek8sRUFBV0MsSUFBWSxDQUNyRSxNQUFNZ1IsRUFBTSxDQUFBLEVBQ1pILEVBQTBCRyxFQUFLaFIsRUFBSyxjQUFjLEVBQ2xENlEsRUFBMEJHLEVBQUtoUixFQUFLLGNBQWMsRUFDbEQwUSxFQUFxQjFRLENBQUcsRUFBSTRKLEdBQU1vSCxFQUFLbFIsRUFBRW1SLEtBQUtsUixFQUFNNFEsQ0FBUyxDQUFDLENBQ2hFLENBQUMsRUFDTS9HLEdBQU0sQ0FBRTRFLFFBQVNrQyxHQUF3QixDQUFFbEMsUUFBU2lDLENBQWUsRUFBRUgsRUFBWVksTUFBTSxDQUNoRyxDQUVBLFNBQVNDLEdBQWlCcEQsRUFBcUNqRCxFQUFzQixDQUNuRixLQUFNLENBQUVoRyxFQUFBQSxDQUFHLEVBQUdTLEdBQU8sRUFDZixDQUFFcUUsTUFBQUEsQ0FBTyxFQUFHUyxHQUFRLEVBQzFCUyxFQUFVQSxHQUFXLEdBQ3JCLE1BQU0yRCxFQUFjN0UsRUFDbEJwTixHQUFtQjRVLGVBQWUsQ0FBRXRNLEVBQUFBLENBQUcsQ0FBQSxFQUN2Q3RJLEdBQW1CNlUsY0FBYyxDQUFFdEQsWUFBQUEsRUFBYWpELFFBQUFBLEVBQVN3RyxXQUFZLEtBQU0sRUFDM0V2RCxDQUFXLEVBRVBXLEVBQWdCSCxHQUFvQnJFLEdBQVV1RSxFQUFZRCxPQUFPLEVBQUdDLENBQVcsRUFDL0VzQixFQUFhbkIsR0FBMkIsQ0FBRSxFQUFFRixDQUFhLEVBQy9ELE9BQU8yQixHQUFVNUIsRUFBYSxPQUFRc0IsQ0FBVSxDQUNsRCxDQUVBLFNBQVN3QixHQUFhOUMsRUFBd0IsQ0FDNUMzTyxFQUFFNk8sUUFBUUYsRUFBWUQsUUFBUyxDQUFDalEsRUFBWXlCLElBQVksQ0FDdER6QixFQUFNeUIsSUFBTUEsQ0FDZCxDQUFDLEVBQ0QsTUFBTXdPLEVBQVVELEdBQW9CckUsR0FBVXVFLEVBQVlELE9BQU8sRUFBR0MsQ0FBVyxFQUMvRUEsRUFBWUQsUUFBVUEsRUFDdEIsTUFBTXlCLEVBQWlCckIsR0FBMkIsQ0FBRSxFQUFFSixDQUFPLEVBRTdEQyxPQUFBQSxFQUFZMU4sTUFBTXlOLFFBQVVVLEdBQWtCaEYsR0FBVXNFLENBQU8sQ0FBQyxFQUNoRUMsRUFBWTFOLE1BQU1nUCxXQUFhbEIsR0FBeUIsQ0FBRSxFQUFFSixFQUFZMU4sTUFBTXlOLE9BQU8sRUFDckY1RSxHQUFNNkUsRUFBWStDLFFBQVMsQ0FDekJDLGNBQWUsQ0FDYkMsZ0JBQWlCeEgsR0FBVXVFLEVBQVkxTixNQUFNeU4sT0FBTyxDQUNyRCxDQUNGLENBQUEsRUFDREMsRUFBWXRCLEtBQU9rRCxHQUFVNUIsRUFBYSxPQUFRd0IsQ0FBYyxFQUNoRXhCLEVBQVlrRCxRQUFVdEIsR0FBVTVCLEVBQWEsVUFBV3dCLENBQWMsRUFDdEV4QixFQUFZbUQsU0FBV3ZCLEdBQVU1QixFQUFhLFdBQVl3QixDQUFjLEVBQ3hFeEIsRUFBWUgsU0FBVytCLEdBQVU1QixFQUFhLFdBQVl3QixFQUFpQjlDLEdBQVEsQ0FFakZyTixFQUFFNk8sUUFBUXhCLEVBQUtxQixRQUFValEsR0FBYyxDQUNoQ0EsRUFBTTJPLFlBQ1QzTyxFQUFNMk8sVUFBWSxJQUVwQjNPLEVBQU0yTyxVQUFVMkUsU0FBVyxFQUM3QixDQUFDLENBQ0gsQ0FBQyxFQUVEcEQsRUFBWXlDLE9BQVNWLEdBQWdCL0IsRUFBYSxTQUFVd0IsQ0FBYyxFQUd0RXhCLEVBQVkxTixNQUFNK1EsV0FDcEJyRCxFQUFZMU4sTUFBTStRLFNBQVNILFFBQVUvSCxHQUFNNkUsRUFBWWtELFFBQVFuRCxRQUFTQyxFQUFZMU4sTUFBTStRLFNBQVNILE9BQU8sRUFDMUdsRCxFQUFZMU4sTUFBTStRLFNBQVNGLFNBQVdoSSxHQUFNNkUsRUFBWW1ELFNBQVNwRCxRQUFTQyxFQUFZMU4sTUFBTStRLFNBQVNGLFFBQVEsR0FFeEduRCxDQUNULENBRWdCLFNBQUFzRCxHQUFvQnZELEVBQTRCdE0sRUFBaUQsQ0FDL0dwQyxFQUFFNk8sUUFBUUgsRUFBUyxDQUFDek8sRUFBV0MsSUFBWSxDQUNwQ0QsRUFBS0MsTUFDUkQsRUFBS0MsSUFBTUEsR0FFVEQsRUFBSzBDLFNBQ1BzUCxHQUFvQmhTLEVBQUswQyxTQUFVUCxDQUFRLEVBRTNDQSxFQUFTbkMsRUFBTUMsQ0FBRyxDQUV0QixDQUFDLENBQ0gsQ0FFZ0IsU0FBQWdTLEdBQ2R4RCxFQUNBdE0sRUFBNEQsQ0FFNURwQyxFQUFFNk8sUUFBUUgsRUFBUyxDQUFDek8sRUFBV0MsSUFBWSxDQUNwQ0QsRUFBS0MsTUFDUkQsRUFBS0MsSUFBTUEsR0FFVEQsRUFBSzBDLFNBQ1B1UCxHQUFlalMsRUFBSzBDLFNBQVVQLENBQVEsRUFFdENBLEVBQVNuQyxFQUFNQyxDQUFHLENBRXRCLENBQUMsQ0FDSCxVQUVnQmlTLElBQVUsQ0FDeEIsTUFBTyxDQUNMZCxpQkFBQUEsR0FDQUksYUFBQUEsR0FDQTlFLDBCQUFBQSxHQUNBdUYsZUFBQUEsR0FFSixDQ3pYQSxJQUFJRSxHQUFPLEVBQ1gsTUFBTUMsR0FFRixDQUFBLEVBR0osZUFBZUMsR0FBMkIxVixFQUFrQixDQUMxRCxNQUFNMlYsRUFBSzNWLEVBQUssSUFBTSxHQUFHd1YsSUFBTSxHQUV6QkksRUFBWSxTQUFTLGNBQWMsS0FBSyxFQUU5QyxPQUFPLElBQUksUUFBUSxDQUFDQyxFQUFTQyxJQUFVLENBQ2pDLElBQUF0TixFQUFnQ2lOLEdBQWtCRSxDQUFFLEVBQ3BEbk4sR0FBWSxPQUNMQSxFQUFBLEdBQUcsUUFBUSxLQUFLeEksQ0FBSSxFQUM3QjZWLEVBQVFyTixDQUFRLEdBRVosTUFBQXVOLEVBQVFDLGNBQVlDLEdBQWUsQ0FDdkMsR0FBQU4sRUFDQSxVQUFRLENBQ0QzVixFQUFLLElBQ1IsT0FBT3lWLEdBQWtCRSxDQUFFLENBRS9CLENBQUEsQ0FDRCxFQUNESSxFQUFNLFdBQWFFLEdBQWMsU0FDakN2RSxTQUFPcUUsRUFBT0gsQ0FBUyxFQUNOLFNBQVMsS0FFakIsWUFBWUEsQ0FBUyxFQUM5QixNQUFNTSxFQUFLSCxFQUFNLFVBRU52TixFQUFBLENBQ1QsR0FBQW1OLEVBQ0EsTUFBQUksRUFDQSxHQUFBRyxFQUNBLE1BQVFILEVBQU0sVUFBa0IsS0FBQSxFQUVsQ04sR0FBa0JFLENBQUUsRUFBSW5OLEVBRWZBLEVBQUEsR0FBRyxRQUFRLEtBQUt4SSxDQUFJLEVBRXJCNlYsRUFBQXJOLEVBQVMsR0FBRyxPQUFPLENBQUEsQ0FDNUIsQ0FDSCxVQUVnQjJOLElBQWMsQ0FDNUIsSUFBSUMsRUFBVSxLQUNWLEdBQUEsQ0FFRkEsRUFEa0NDLFNBQU8sbUJBQW9CLElBQUssQ0FBQSxDQUFHLEVBQ2pELFFBQ2J2TixFQUFHLENBQ0hySCxHQUFBLEtBQUssaUZBQWtGcUgsQ0FBQyxDQUNoRyxDQUVELElBQUl3TixFQUFzRCxLQUN0REYsR0FBTSxLQUdSRSxFQUFhLE1BQU90VyxHQUNYLE1BQU0wVixHQUFrQjFWLENBQUksRUFJckNzVyxFQUFhLE1BQU90VyxHQUNYLE1BQU1vVyxFQUFHLEtBQUtwVyxDQUFJLEVBSTdCLGVBQWV1VyxFQUE0QnZXLEVBQTRCLENBQy9ELEtBQUEsQ0FBRSxpQkFBQXlVLEdBQXFCYyxLQUN2QmlCLEVBQWMvQixFQUFpQnpVLEVBQUssWUFBYUEsRUFBSyxPQUFPLEVBQzVELE9BQUEsTUFBTXNXLEVBQVdFLENBQVcsQ0FDckMsQ0FFTyxNQUFBLENBQ0wsV0FBQUYsRUFDQSxtQkFBQUMsQ0FBQSxDQUVKLENDdEVBLEtBQU0sT0FBRXJKLEVBQUssRUFBS1MsS0FDWjhJLEdBQVV2SixHQW1CaEIsU0FBU3dKLEdBQXFCQyxFQUEwQixDQUNoRCxLQUFBLENBQUUsV0FBQS9CLENBQWUsRUFBQStCLEVBQ2pCLENBQUUsWUFBQUMsQ0FBZ0IsRUFBQWhDLEVBQ1Q3TSxXQUNEYyxLQUNkLEtBQU0sQ0FBRSxNQUFBcUUsQ0FBSyxFQUFLUyxLQUVsQitCLEVBQUFBLE1BQ0UsSUFBSyxXQUNJLE9BQUFtSCxHQUFBQyxHQUFBbFcsRUFBQWdXLEVBQVksUUFBWixZQUFBaFcsRUFBbUIsUUFBbkIsWUFBQWtXLEVBQTBCLFdBQTFCLFlBQUFELEVBQW9DLE9BQzdDLEVBQ0NuUSxHQUFPLENBQ0ZBLEVBQ0VrUSxFQUFZLE1BQU0sTUFBTSxTQUFTLE9BQVMsTUFDaENBLEVBQUEsTUFBTSxVQUFVLE9BQVMsVUFFekJBLEVBQUEsTUFBTSxVQUFVLE9BQVMsV0FHM0JBLEVBQUEsTUFBTSxVQUFVLE9BQVMsU0FDdEMsQ0FDRixFQUVILE1BQU14QixFQUF3QixDQUs1QixNQUFNLE9BQU9wVixFQUFZK1csRUFBa0QsQ0FDbkUsTUFBQUMsRUFBZUosRUFBWSxNQUFNLE1BQU0sU0FDN0MxSixFQUFNOEosRUFBYyxDQUFFLFFBQVMsSUFBUWhYLENBQUksRUFDdkMrVyxHQUNRQSxFQUFBLENBQUUsU0FBVUMsQ0FBQSxDQUFjLENBRXhDLEVBSUEsU0FBTyxRQUNNcFcsRUFBQWdVLEVBQUEsWUFBQSxJQUFBLE1BQUFoVSxFQUFlLFNBQVMsU0FDdkJnVyxFQUFBLE1BQU0sTUFBTSxTQUFTLFFBQVUsR0FDL0JBLEVBQUEsTUFBTSxVQUFVLE9BQVMsU0FDdkMsRUFJQSxPQUFPNVcsRUFBSSxDQUNUNFUsRUFBVyxZQUFXLEVBQUcsU0FBUyxPQUFPNVUsQ0FBSSxDQUMvQyxFQUlBLFVBQVEsQ0FDSzRVLEVBQUEsWUFBQSxFQUFjLFNBQVMsVUFDcEMsRUFJQSxPQUFPNVUsRUFBMkIsQ0FDaEM0VSxFQUFXLFlBQVcsRUFBRyxTQUFTLE9BQU81VSxDQUFJLENBQy9DLEVBQ0EsV0FBV0EsRUFBK0IsQ0FDeEM0VSxFQUFXLFlBQVcsRUFBRyxTQUFTLFdBQVc1VSxDQUFJLENBQ25ELEVBSUEsUUFBTSxDQUNPNFUsRUFBQSxZQUFBLEVBQWMsU0FBUyxRQUNwQyxFQUlBLFFBQU0sQ0FDT0EsRUFBQSxZQUFBLEVBQWMsU0FBUyxXQUNwQyxFQUlBLFNBQU8sQ0FDTUEsRUFBQSxZQUFBLEVBQWMsU0FBUyxTQUNwQyxFQUNBLFVBQVVxQyxFQUFlLENBQ3ZCckMsRUFBVyxZQUFXLEVBQUcsU0FBUyxVQUFVcUMsQ0FBVSxDQUN4RCxFQUNBLGVBQWVBLEVBQWUsU0FDNUIsT0FBT0gsR0FBQWxXLEVBQUFnVSxFQUFXLFlBQWUsSUFBMUIsWUFBQWhVLEVBQTBCLFdBQTFCLFlBQUFrVyxFQUFvQyxlQUFlRyxFQUM1RCxFQUNBLGVBQWEsU0FDWCxPQUFPSCxHQUFBbFcsRUFBQWdVLEVBQVcsWUFBQSxJQUFYLFlBQUFoVSxFQUEwQixXQUExQixZQUFBa1csRUFBb0MsZUFDN0MsRUFDQSxNQUFNLFVBQVU5VyxFQUFtQyxDQUNqRCxJQUFJaVgsRUFBYWpYLEVBQUssV0FDakJpWCxJQUVIQSxFQURZalgsRUFBSyxJQUNBNFcsRUFBWSxNQUFNLE1BQU0sU0FBUyxNQUFNLEdBRXBELE1BQUFNLEVBQWM5QixFQUFTLGVBQWU2QixDQUFVLEVBQ3RELE1BQU1DLEVBQVksS0FBSyxDQUNyQixNQUFNLE9BQU9sWCxFQUErQixTQUMxQyxLQUFNLENBQUUsTUFBQW1YLEVBQU8sSUFBQTVNLEVBQUssUUFBQTZNLENBQUEsRUFBWXBYLEVBQzFCcVgsRUFBVTlNLEVBQ2hCLEtBQUl1TSxHQUFBbFcsRUFBQWdXLEVBQVksUUFBWixZQUFBaFcsRUFBbUIsT0FBbkIsWUFBQWtXLEVBQXlCLFFBQVMsUUFHbEMsR0FBQSxDQUVGLEdBREFJLEVBQVksUUFBVSxHQUNsQkMsRUFBTyxDQUNILE1BQUF2TSxFQUFNLE1BQU1nTSxFQUFZLE1BQU0sUUFBUSxXQUFXLENBQUUsS0FBTVMsQ0FBQSxDQUFTLEVBQ3hFRCxFQUFReE0sQ0FBRyxDQUFBLE1BRUwsTUFBQWdNLEVBQVksTUFBTSxRQUFRLFlBQVksQ0FBRSxLQUFNUyxFQUFTLElBQUtBLENBQUEsQ0FBUyxDQUM1RSxRQUNPLENBQ1JILEVBQVksUUFBVSxFQUN2QixDQUNILENBQUEsQ0FDRCxDQUNILEVBQ0EsTUFBTSxZQUFZbFgsRUFBaUMsQ0FDakQsSUFBSWlYLEVBQWFqWCxFQUFLLFdBQ2pCaVgsSUFHSEEsRUFGWWpYLEVBQUssSUFFQTRXLEVBQVksTUFBTSxNQUFNLFNBQVMsTUFBTSxHQUdwRCxNQUFBTSxFQUFjOUIsRUFBUyxlQUFlNkIsQ0FBVSxFQUN0RCxHQUFJQyxFQUFZLE1BQU8sQ0FDckI5QixFQUFTLFVBQVU2QixDQUFVLEVBQzdCLE1BQ0QsQ0FDREMsRUFBWSxPQUFNLENBQ3BCLEVBQ0EsTUFBTSxZQUFZbFgsRUFBaUMsQ0FDakQsSUFBSWlYLEVBQWFqWCxFQUFLLFdBQ2pCaVgsSUFHSEEsRUFGWWpYLEVBQUssSUFFQTRXLEVBQVksTUFBTSxNQUFNLFNBQVMsTUFBTSxHQUdwRCxNQUFBTSxFQUFjOUIsRUFBUyxlQUFlNkIsQ0FBVSxFQUMvQyxPQUFBLE1BQU1yQyxFQUFXLFNBQVM1VSxFQUFNLENBQ3JDLE1BQU0sUUFBTSxDQUNWLE9BQUlrWCxFQUFZLE9BQ2Q5QixFQUFTLFVBQVU2QixDQUFVLEVBQ3RCLElBRUhMLEVBQVksTUFBTSxLQUFLLE9BQVMsU0FDbEN4QixFQUFTLFVBQVU2QixDQUFVLEVBQ3RCLENBQUUsUUFBUyxLQUVYLE1BQU1MLEVBQVksTUFBTSxRQUFRLFdBQVc1VyxDQUFJLENBRzVELENBQUEsQ0FDRCxDQUNILEVBQ0EsYUFBVyxDQUNUNFUsRUFBVyxZQUFjLEVBQUEsUUFDM0IsRUFDQSxVQUFVcFAsRUFBa0QsUUFDMUQ1RSxFQUFBZ1UsRUFBVyxZQUFXLEVBQUcsV0FBekIsTUFBQWhVLEVBQW1DLFVBQVU0RSxFQUMvQyxFQUNBLFNBQVNBLEVBQWlELFFBQ3hENUUsRUFBQWdVLEVBQVcsWUFBVyxFQUFHLFdBQXpCLE1BQUFoVSxFQUFtQyxTQUFTNEUsRUFDOUMsRUFDQSxNQUFNLFVBQVEsT0FDWixPQUFPLE9BQU01RSxFQUFBZ1UsRUFBVyxZQUFXLEVBQUcsV0FBekIsWUFBQWhVLEVBQW1DLFdBQ2xELEVBQ0EsYUFBYTBXLEVBQVksT0FDdkIsT0FBTzFXLEVBQUFnVSxFQUFXLFlBQWMsRUFBQSxXQUF6QixZQUFBaFUsRUFBbUMsa0JBQWtCMFcsRUFDOUQsRUFDQSxrQkFBa0JBLEVBQVksT0FDNUIsT0FBTzFXLEVBQUFnVSxFQUFXLFlBQWMsRUFBQSxXQUF6QixZQUFBaFUsRUFBbUMsa0JBQWtCMFcsRUFDOUQsQ0FBQSxFQUVLLE9BQUFsQyxDQUNULENBTU0sU0FBVW1DLEdBQW1CWixFQUF3QixDQUNuRCxLQUFBLENBQUUsUUFBQWEsRUFBUyxZQUFBWixDQUFnQixFQUFBRCxFQUMzQixDQUFFLEdBQUF2VyxHQUFPMkgsR0FBQUEsUUFDVCxDQUFFLEVBQUFLLEdBQU1TLEtBRVI0TyxFQUFzQnRCLEtBQzVCLFNBQVN1QixHQUFZLENBQ2ZGLEVBQVEsT0FBUyxNQUNuQi9WLEdBQU8sS0FBSyw4QkFBOEIsQ0FFOUMsQ0FDQSxTQUFTa1csR0FBbUIsQ0FDdEJmLEVBQVksT0FBUyxNQUN2Qm5WLEdBQU8sS0FBSyxzQ0FBc0MsQ0FFdEQsQ0FFQSxNQUFNbVQsRUFBNEIsQ0FDaEMsUUFBQTRDLEVBQ0EsWUFBQVosRUFFQSxtQkFBaUIsQ0FDZixPQUFPWSxFQUFRLE1BQU0sY0FDdkIsRUFDQSxXQUFZLElBQUssQ0FDVCxNQUFBSSxFQUFpQmhELEVBQVcsb0JBQ2xDLEdBQUlnRCxHQUFrQixPQUFRQSxHQUFBLFlBQUFBLEVBQWdCLFVBQVcsS0FBTSxDQUM3RG5XLEdBQU8sTUFDTCw4REFBOEQsRUFFaEUsTUFDRCxDQUNELE9BQU9tVyxHQUFBLFlBQUFBLEVBQWdCLE9BQ3pCLEVBQ0EsWUFBYSxJQUFLLENBQ1YsTUFBQUMsRUFBVWpELEVBQVcsYUFDM0IsT0FBT2lELEdBQUEsWUFBQUEsRUFBUyxhQUNsQixFQUNBLFlBQWEsQ0FBQ3BILEVBQVc5TixJQUFnQyxRQUN2RC9CLEVBQUFnVSxFQUFXLFdBQVUsSUFBckIsTUFBQWhVLEVBQXlCLFlBQVk2UCxFQUFNOU4sRUFDN0MsRUFDQSxvQkFBb0JXLEVBQUsySyxFQUFVLEdBQUssQ0FDaEMsTUFBQTRKLEVBQVVqRCxFQUFXLGFBQ3BCLE9BQUFpRCxHQUFBLFlBQUFBLEVBQVMsZ0JBQWdCdlUsRUFBSzJLLEVBQ3ZDLEVBQ0EsZUFBZTZKLEVBQVNoRyxFQUFPLENBQ3pCQSxHQUFXLE9BQ0hBLEVBQUFpRyxFQUFBQSxNQUFNbkIsRUFBWSxNQUFNLE9BQU8sR0FFcENuVixHQUFBLE1BQU0sMkJBQTRCcVEsQ0FBTyxFQUNoRCxNQUFNa0csRUFBbUQsQ0FBQSxFQUMxQzFDLEdBQUF4RCxFQUFVbkgsR0FBVSxDQUM3QkEsRUFBTyxjQUFnQixNQUN6QnFOLEVBQW9CLEtBQUtyTixDQUFNLENBQ2hDLENBQ0YsRUFDR3FOLEVBQW9CLFNBQVcsSUFHbkM1VSxFQUFFLFFBQVEwVSxFQUFTLENBQUN2TixFQUFLakMsSUFBUyxDQUM5QmxGLEVBQUEsUUFBUTRVLEVBQXNCQyxHQUFPLENBQ3JDQSxFQUFJLGFBQWEsQ0FDZixNQUFPMU4sRUFBSTBOLEVBQUksR0FBRyxFQUNsQixJQUFBMU4sRUFDQSxLQUFNQSxFQUNOLE1BQUFqQyxFQUNBLElBQUsyUCxFQUFJLElBQ1QsT0FBUUEsQ0FBQSxDQUNULENBQUEsQ0FDRixFQUlHMU4sRUFBSSxVQUFZMk4sRUFBUSxRQUFBM04sRUFBSSxRQUFRLEdBRTNCcUssRUFBQSxlQUFlckssRUFBSSxTQUFVdUgsQ0FBTyxDQUNoRCxDQUNGLEVBQ01yUSxHQUFBLE1BQU0sd0JBQXlCcVcsQ0FBTyxFQUMvQyxFQUNBLGVBQWUsQ0FBRSxLQUFBckgsQ0FBSSxFQUFJcUIsRUFBTyxDQUMxQkEsR0FBVyxPQUNIQSxFQUFBaUcsRUFBQUEsTUFBTW5CLEVBQVksTUFBTSxPQUFPLEdBRTNDLE1BQU1vQixFQUFtRCxDQUFBLEVBQzFDMUMsR0FBQXhELEVBQVVuSCxHQUFVLENBQzdCQSxFQUFPLGNBQWdCLE1BQ3pCcU4sRUFBb0IsS0FBS3JOLENBQU0sQ0FDaEMsQ0FDRixFQUNHcU4sRUFBb0IsU0FBVyxJQUc1QnZXLEdBQUEsTUFBTSwyQkFBNEJxUSxDQUFPLEVBQzlDMU8sRUFBQSxRQUFRNFUsRUFBc0JDLEdBQU8sQ0FDckMsTUFBTTNVLEVBQU0yVSxFQUFJLElBQ2hCQSxFQUFJLGFBQWEsQ0FDZixNQUFPeEgsRUFBS25OLENBQUcsRUFDZixJQUFLbU4sRUFDTCxLQUFBQSxFQUNBLElBQUFuTixFQUNBLE9BQVEyVSxDQUFBLENBQ1QsQ0FBQSxDQUNGLEVBQ014VyxHQUFBLE1BQU0sd0JBQXlCZ1AsQ0FBSSxFQUM1QyxFQUNBLGtCQUFnQixDQUNIbUUsRUFBQSxlQUFlLFlBQzVCLEVBQ0EsbUJBQWlCLENBQ1IsT0FBQWdDLEVBQVksTUFBTSxPQUFPLGFBQ2xDLEVBQ0EsNEJBQTBCLENBQ2pCLE9BQUFBLEVBQVksTUFBTSxPQUFPLGFBQ2xDLEVBSUEsa0JBQWtCeEksRUFBTyxDQVFuQixHQVBBb0osRUFBUSxPQUNWQSxFQUFRLE1BQU0sa0JBQWtCLENBQzlCLEtBQU1wSixFQUFRLEtBQ2QsVUFBV0EsRUFBUSxTQUFBLENBQ3BCLEVBR0NBLEVBQVEsWUFBYyxHQUN4QixVQUFXOUssS0FBT3NULEVBQVksTUFBTSxPQUFPLGNBQ3pDLE9BQU9BLEVBQVksTUFBTSxPQUFPLGNBQWN0VCxDQUFHLEVBR3JELEtBQU0sQ0FBRSxNQUFBNEosQ0FBSyxFQUFLUyxLQUNsQlQsRUFBTTBKLEVBQVksTUFBTSxPQUFPLGNBQWV4SSxFQUFRLElBQUksRUFDdERBLEVBQVEsZUFDVndHLEVBQVcsVUFBUyxDQUV4QixFQUlBLGNBQVksbUJBRUhoVSxFQUFBNFcsRUFBUSxRQUFSLFlBQUE1VyxFQUFlLGNBQ3hCLEVBRUEsZUFBZXVYLEVBQXVCLFNBQ3BDLE1BQU1DLEVBQU9ELEVBQVUsS0FFdkIsSUFBSUUsRUFBaUJGLEVBQVUsS0FDM0JFLEdBQWtCLE9BQ3BCQSxFQUFpQmpWLEVBQUUsVUFBVXdSLEVBQVcsMkJBQTRCLENBQUEsR0FBSyxJQUVyRWtDLEdBQUFsVyxFQUFBZ1csRUFBWSxRQUFaLFlBQUFoVyxFQUFtQixTQUFuQixNQUFBa1csRUFBMkIsU0FDbEJsQyxFQUFBLGVBQWUsQ0FBRSxLQUFNeUQsR0FBa0JOLFFBQU1uQixFQUFZLE1BQU0sT0FBTyxPQUFPLENBQUMsR0FJL0YsSUFBSXpHLEVBQU9nSSxFQUFVLEtBQ2pCaEksR0FBUSxPQUNWQSxFQUFPeUcsRUFBWSxNQUFNLE1BQU0sTUFBUSxDQUFBLEdBR3pDLE1BQU0wQixFQUFzQixDQUFFLEtBQUFGLEVBQU0sS0FBTUMsRUFBZ0IsS0FBQWxJLENBQUksRUFDOUQsSUFBSW9JLEVBQWtDRCxFQUNsQyxPQUFBMUIsRUFBWSxNQUFNLFFBQVEsaUJBQzVCMkIsRUFBZ0IzQixFQUFZLE1BQU0sUUFBUSxlQUFlMEIsQ0FBSyxHQUV6REMsQ0FDVCxFQUVBLE1BQU0sT0FBT0osRUFBeUJ4VixFQUF5QixHQUFFLENBQ3pELE1BQUE0VixFQUFnQjNELEVBQVcsZUFBZXVELENBQVMsRUFDckQsSUFBQUssRUFDQSxHQUFBLENBQ0U3VixFQUFRLFVBQVksS0FDVmlVLEVBQUEsTUFBTSxNQUFNLFFBQVUsSUFHN0JuVixHQUFBLE1BQU0sY0FBZThXLENBQWEsRUFDekNDLEVBQWMsTUFBTTVCLEVBQVksTUFBTSxRQUFRLFlBQVkyQixDQUFhLENBQUEsUUFDL0QsQ0FDSjVWLEVBQVEsVUFBWSxLQUNWaVUsRUFBQSxNQUFNLE1BQU0sUUFBVSxHQUVyQyxDQUNELEdBQUk0QixHQUFlLEtBQU0sQ0FDdkIvVyxHQUFPLEtBQUsscUJBQXFCLEVBQ2pDLE1BQ0QsQ0FDRCxJQUFJZ1gsRUFBc0JELEVBQ3RCLE9BQUE1QixFQUFZLE1BQU0sUUFBUSxlQUNsQjZCLEVBQUE3QixFQUFZLE1BQU0sUUFBUSxhQUFhLENBQy9DLElBQUs0QixFQUNMLE1BQU9ELENBQUEsQ0FDUixHQUlDRSxFQUFRLFNBQ0M3RCxFQUFBLGVBQWU2RCxFQUFRLE9BQU8sRUFFcENBLENBQ1QsRUFDQSxTQUFPLENBQ0wsSUFBSUwsRUFBYSxDQUNmLFlBQWEsRUFDYixTQUFVLEVBQUEsRUFFUixPQUFBeEIsRUFBWSxNQUFNLGFBQ2J3QixFQUFBLENBQ0wsWUFBYXhCLEVBQVksTUFBTSxXQUFXeFcsRUFBRyxXQUFXLFdBQVcsRUFDbkUsU0FBVXdXLEVBQVksTUFBTSxXQUFXLFFBQUEsR0FHcEN3QixDQUNULEVBQ0EsTUFBTSxVQUFVekIsRUFBTSxTQUNwQixHQUFJQyxFQUFZLE1BQU0sUUFBUSxhQUFlLEtBQzNDLE9BRUtuVixHQUFBLE1BQU0sY0FBZWtWLENBQUssRUFDN0JDLEVBQVksTUFBTSxZQUNoQkQsR0FBQUEsTUFBQUEsRUFBTyxjQUNUQyxFQUFZLE1BQU0sV0FBV3hXLEVBQUcsV0FBVyxXQUFXLEVBQUksR0FJeEQsTUFBQWdZLEVBQU94RCxFQUFXLFVBQ2xCNkQsRUFBVSxNQUFNN0QsRUFBVyxPQUFPLENBQUUsS0FBQXdELEdBQVEsQ0FBRSxRQUFTekIsR0FBQUEsWUFBQUEsRUFBTyxPQUFBLENBQVMsRUFDN0UsR0FBSThCLEdBQVcsS0FBTSxDQUNaaFgsR0FBQSxNQUNMLHdHQUNBZ1gsQ0FBTyxFQUVULE1BQ0QsQ0FDSyxLQUFBLENBQUUsWUFBQUMsRUFBY04sRUFBSyxhQUFlLEVBQUcsU0FBQU8sRUFBV1AsRUFBSyxTQUFVLE1BQUExWCxDQUFVLEVBQUErWCxFQUMzRSxDQUFFLFFBQUFYLENBQVksRUFBQVcsRUFFbEIsR0FBQVgsR0FBVyxNQUNYLEVBQUVBLGFBQW1CLFFBQ3JCcFgsR0FBUyxNQUNUZ1ksR0FBZSxNQUNmQSxHQUFlLEdBQ2YsTUFBTUEsQ0FBVyxHQUNqQkMsR0FBWSxNQUNaQSxHQUFZLEdBQ1osTUFBTUEsQ0FBUSxFQUNkLENBQ09sWCxHQUFBLE1BQ0wsd0dBQ0FnWCxDQUFPLEVBRVRoWCxHQUFPLEtBQ0wsdUZBQXVGLEVBRXpGLE1BQ0QsQ0FPRCxHQU5BbVYsRUFBWSxNQUFNLEtBQU9rQixFQUNyQmxCLEVBQVksTUFBTSxhQUNwQkEsRUFBWSxNQUFNLFdBQVd4VyxFQUFHLFdBQVcsV0FBVyxFQUFJc1ksRUFDOUM5QixFQUFBLE1BQU0sV0FBVyxTQUFXK0IsRUFDeEMvQixFQUFZLE1BQU0sV0FBV3hXLEVBQUcsV0FBVyxLQUFLLEVBQUlNLEdBQVNvWCxFQUFRLFNBRW5FbkIsR0FBQUEsWUFBQUEsRUFBTyxZQUFhQyxFQUFZLE1BQU0sTUFBTSxxQkFBc0IsQ0FDOUQsTUFBQWdDLEVBQWFoRSxFQUFXLGNBQzlCZ0UsR0FBQSxNQUFBQSxFQUFZLFNBQVMsRUFDdEIsRUFDRzlCLEdBQUFsVyxFQUFBZ1csRUFBWSxRQUFaLFlBQUFoVyxFQUFtQixRQUFuQixNQUFBa1csRUFBMEIsYUFDaEJGLEVBQUEsTUFBTSxNQUFNLFlBQVksQ0FDbEMsS0FBTWtCLENBQUEsQ0FDUCxDQUVMLEVBS0EsY0FBZSxJQUNOTixFQUFRLE1BQU0sV0FNdkIsb0JBQXFCLElBQ1o1QyxFQUFXLGNBQWdCLEVBQUEsaUJBT3BDLG1DQUFvQyxJQUMzQkEsRUFBVyxvQkFBc0IsRUFBQSxTQU0xQywyQkFBNEIsSUFDbkJBLEVBQVcsb0JBQXNCLEVBQUEsUUFHMUMsV0FBV2lFLEVBQVUsQ0FDbkJqQyxFQUFZLE1BQU0sV0FBV3hXLEVBQUcsV0FBVyxXQUFXLEVBQUl5WSxDQUM1RCxFQVNBLE1BQU0sU0FBUzdZLEVBQWdFLENBQ3RFeUIsR0FBQSxNQUFNLGFBQWN6QixDQUFJLEVBQy9CQSxFQUFPa04sR0FBTSxDQUFFLFlBQWEsSUFBUWxOLENBQUksRUFDcENBLEVBQUssYUFDUDRVLEVBQVcsV0FBVyxDQUFDLEVBRXJCNVUsRUFBSyxNQUFRd1gsRUFBUSxPQUN2QjVDLEVBQVcsa0JBQWtCLENBQzNCLEtBQU01VSxFQUFLLEtBQ1gsVUFBV0EsRUFBSyxVQUNoQixXQUFZLEdBQ1osY0FBZSxFQUFBLENBQ2hCLEVBR0gsTUFBTTRVLEVBQVcsV0FDbkIsRUFJQSxhQUFXLG1CQUVGaFUsRUFBQTRXLEVBQVEsUUFBUixZQUFBNVcsRUFBZSxRQUN4QixFQUlBLGlCQUFlLENBQ1AsTUFBQWtZLEVBQVcsS0FBSyxjQUN0QixHQUFJQSxHQUFZLEtBQU0sQ0FDcEJyWCxHQUFPLEtBQUssY0FBYyxFQUMxQixNQUNELENBQ0QsT0FBT3FYLEVBQVMsUUFDbEIsRUFJQSxjQUFZLFlBRUhsQyxFQUFZLE1BQU0sSUFDM0IsRUFDQSxhQUFhVSxFQUFXLEtBRXRCVixFQUFZLE1BQU0sS0FBT1UsQ0FDM0IsRUFDQSxlQUFlaFAsRUFBZWlDLEVBQVEsS0FFcENxTSxFQUFZLE1BQU0sS0FBSyxPQUFPdE8sRUFBTyxFQUFHaUMsQ0FBRyxDQUM3QyxFQUNBLGVBQWVqQyxFQUFlaUMsRUFBVTJDLEVBQVEsR0FBSSxDQUM5Q0EsRUFDVTBKLEVBQUEsTUFBTSxLQUFLdE8sQ0FBSyxFQUFJbU8sR0FBUUcsRUFBWSxNQUFNLEtBQUt0TyxDQUFLLEVBQUdpQyxDQUFHLEVBRTlEcU0sRUFBQSxNQUFNLEtBQUt0TyxDQUFLLEVBQUlpQyxDQUVwQyxFQUNBLGVBQWVqQyxFQUFhLEtBRTFCc08sRUFBWSxNQUFNLEtBQUssT0FBT3RPLEVBQU8sQ0FBQyxDQUN4QyxFQUNBLHVCQUF3QixDQUFDeVEsRUFBYXpCLElBQWdCLEtBRWhEQSxHQUFRLE9BQ1ZBLEVBQU9WLEVBQVksTUFBTSxNQUUzQixRQUFTOVEsRUFBSSxFQUFHQSxFQUFJd1IsRUFBSyxPQUFReFIsSUFBSyxDQUM5QixNQUFBeUUsRUFBTStNLEVBQUt4UixDQUFDLEVBQ2xCLEdBQUl5RSxFQUFJcU0sRUFBWSxNQUFNLE1BQU0sTUFBTSxJQUFNbUMsRUFDckMsT0FBQXpCLEVBQUEsT0FBT3hSLEVBQUcsQ0FBQyxFQUNULEdBRVQsR0FBSXlFLEVBQUksVUFBWTJOLEVBQVEsUUFBQTNOLEVBQUksUUFBUSxHQUNsQ3FLLEVBQVcsdUJBQXVCbUUsRUFBUXhPLEVBQUksUUFBUSxFQUNqRCxNQUFBLEVBR1osQ0FDSCxFQUNBLGdCQUFnQmpDLEVBQWEsQ0FDckIsTUFBQWdQLEVBQU8xQyxFQUFXLGVBQ3hCLEdBQUkwQyxHQUFRLEtBQ0osTUFBQSxJQUFJLE1BQU0sd0JBQXdCLEVBRXRDLEdBQUFBLEVBQUssUUFBVWhQLEVBQ1gsTUFBQSxJQUFJLE1BQU0seUJBQXlCLEVBRTNDLE9BQU9nUCxFQUFLaFAsQ0FBSyxDQUNuQixFQU1BLG1CQUFtQixDQUFFLElBQUFpQyxHQUFtQixDQUNyQnFLLEVBQVcsY0FDbkIsTUFBTSxjQUFjckssQ0FBRyxDQUNsQyxFQU1BLE1BQU0sU0FBUzZELEVBQTZCcE8sRUFBcUIsT0FDL0QsTUFBTWdaLEVBQXFCcEMsRUFBWSxNQUFNLE1BQU0sUUFBVTVXLEdBQVEsR0FDakUsR0FBQSxDQUNFZ1osRUFBYyxVQUNWLE1BQUFBLEVBQWMsVUFBVTVLLENBQU8sRUFFL0IsTUFBQWhPLEVBQUcsV0FBVyxRQUFRLENBQzFCLE1BQU80WSxFQUFjLGNBQWdCNVEsRUFBRSxrQ0FBa0MsRUFDekUsUUFBUzRRLEVBQWMsZ0JBQWtCNVEsRUFBRSxvQ0FBb0MsRUFDL0UsS0FBTSxPQUNOLEdBQUc0USxFQUFjLFlBQUEsQ0FDbEIsT0FFTyxDQUNOQSxFQUFjLFlBQ1YsTUFBQUEsRUFBYyxXQUFXNUssQ0FBTyxFQUV4QyxNQUNELENBQ0QsSUFBSTNILEVBQU0sS0FDVixNQUFNd1MsSUFBVXJZLEVBQUFnVyxFQUFZLE1BQU0sT0FBbEIsWUFBQWhXLEVBQXdCLFFBQVMsUUFVakQsR0FUSVosR0FBQSxNQUFBQSxFQUFNLE9BQ0Z5RyxFQUFBLE1BQU16RyxFQUFLLE9BQU9vTyxDQUFPLEVBRTNCNkssRUFDU3JFLEVBQUEsZUFBZXhHLEdBQUEsWUFBQUEsRUFBUyxLQUFLLEVBRXhDM0gsRUFBTSxNQUFNbVEsRUFBWSxNQUFNLFFBQVEsV0FBV3hJLENBQU8sRUFHeEQzSCxJQUFRLEdBQ1YsT0FFRixNQUFNeVMsRUFBYyxDQUFFLEdBQUc5SyxFQUFTLElBQUEzSCxHQUNsQyxHQUFJdVMsRUFBYyxhQUNBLE1BQU1BLEVBQWMsWUFBWUUsQ0FBVyxJQUMzQyxHQUNQLE1BQUEsR0FJUEYsRUFBYywwQkFBNEIsSUFDNUM1WSxFQUFHLGFBQWEsUUFBUWdJLEVBQUUsNkJBQTZCLENBQUMsRUFHckQ2USxHQUNDRCxFQUFjLGVBQWlCLElBQ2pDLE1BQU1wRSxFQUFXLFVBQVUsQ0FBRSxVQUFXLEVBQU8sQ0FBQSxFQUkvQ29FLEVBQWMsV0FDaEIsTUFBTUEsRUFBYyxVQUFVLENBQUUsR0FBRzVLLEVBQVMsSUFBQTNILENBQUssQ0FBQSxDQUVyRCxFQU1BLE1BQU0sV0FBVzBTLEVBQXlCLENBQ3BDLEdBQUFBLEVBQVMsY0FBZ0IsSUFBUTFCLEVBRTVCLE9BQUEsTUFBTUEsRUFBb0IsV0FBVzBCLENBQVEsRUFFaEQsTUFBQXZCLEVBQWlCLEtBQUssb0JBQzVCLE9BQUFBLEVBQWUsS0FBS3VCLENBQVEsRUFDckJ2QixDQUNULEVBQ0EsTUFBTSxZQUFZd0IsRUFBY2hMLEVBQTBCK0ssRUFBeUIsU0FDakYsS0FBTSxDQUFFLE1BQUFqTSxDQUFLLEVBQUtTLEtBRWxCLElBQUlwRCxFQUFNNkQsRUFBUSxLQUFPQSxFQUFRaE8sRUFBRyxZQUFZLEdBQUcsRUFDbkQsT0FBT2dPLEVBQVEsSUFDWDdELEdBQU8sTUFBUTZELEVBQVEsT0FBUyxPQUM1QjdELEVBQUFxSyxFQUFXLGdCQUFnQnhHLEVBQVEsS0FBSyxJQUU1QzBJLEdBQUFsVyxFQUFBZ1csRUFBWSxRQUFaLFlBQUFoVyxFQUFtQixVQUFuQixNQUFBa1csRUFBNEIsY0FDeEJ2TSxFQUFBLE1BQU1xTSxFQUFZLE1BQU0sUUFBUSxZQUFZLENBQUUsS0FBQXdDLEVBQU0sSUFBQTdPLEVBQUssR0FFakUsTUFBTTVILEVBQVUsQ0FDZCxLQUFBeVcsQ0FBQSxFQUVJQyxFQUFTdEIsRUFBQUEsTUFBTW5CLEVBQVksTUFBTXdDLEVBQU8sTUFBTSxDQUFDLEVBQ3JEbE0sT0FBQUEsRUFBTXZLLEVBQVMwVyxFQUFRLENBQUUsWUFBYTlPLEdBQU82RCxFQUFTK0ssQ0FBUSxFQUN2RCxNQUFNLEtBQUssV0FBV3hXLENBQU8sQ0FDdEMsRUFDQSxNQUFNLFFBQVF5TCxFQUEwQitLLEVBQTRCLEdBQUUsQ0FDcEUsT0FBTyxLQUFLLFlBQVksTUFBTy9LLEVBQVMrSyxDQUFRLENBQ2xELEVBQ0EsTUFBTSxTQUFTL0ssRUFBMEIrSyxFQUE0QixHQUFFLENBQ3JFLE9BQU8sS0FBSyxZQUFZLE9BQVEvSyxFQUFTK0ssQ0FBUSxDQUNuRCxFQUNBLE1BQU0sU0FBUy9LLEVBQTBCK0ssRUFBNEIsR0FBRSxDQUNyRSxPQUFPLEtBQUssWUFBWSxPQUFRL0ssRUFBUytLLENBQVEsQ0FDbkQsRUFDQSxNQUFNLFNBQVMvSyxFQUEwQitLLEVBQTRCLEdBQUUsQ0FDckUsT0FBTyxLQUFLLFlBQVksTUFBTy9LLEVBQVMrSyxDQUFRLENBQ2xELEVBRUEsU0FBVSxNQUFBLEVBRVosT0FBQXZFLEVBQVcsU0FBVzhCLEdBQVksQ0FBRSxXQUFBOUIsQ0FBWSxDQUFBLEVBQ3pDLENBQUUsT0FBUUEsRUFBWSxXQUFBQSxFQUMvQixDQzV1QkEsZUFBc0IwRSxJQUFnQixDQUNwQyxNQUFNdlEsRUFBUyxNQUFNLE9BQUEsT0FBQSxDQUFBLGlCQUFBLElBQUEsUUFBQSxRQUFBLEVBQUEsS0FBQSxJQUFBVCxFQUFBLENBQUEsQ0FBQSxFQUNyQixJQUFJNkUsRUFBYyxLQUNoQixPQUFBL0osRUFBQSxLQUFLMkYsRUFBUzFGLEdBQVEsQ0FDYjhKLEVBQUE5SixDQUFBLENBQ1YsR0FDVyxNQUFNOEosS0FDUCxVQUNiLENBRUEsZUFBc0JvTSxJQUFnQixDQUNwQyxNQUFNeFEsRUFBUyxNQUFNLE9BQUEsT0FBQSxDQUFBLGlCQUFBLElBQUEsUUFBQSxRQUFBLEVBQUEsS0FBQSxJQUFBVCxFQUFBLENBQUEsQ0FBQSxFQUNyQixJQUFJNkUsRUFBYyxLQUNoQixPQUFBL0osRUFBQSxLQUFLMkYsRUFBUzFGLEdBQVEsQ0FDYjhKLEVBQUE5SixDQUFBLENBQ1YsR0FDVyxNQUFNOEosS0FDUCxVQUNiLENBWUEsU0FBU3FNLEdBQThCLENBQUUsWUFBQUMsRUFBYSxJQUFBbFAsRUFBSyxJQUFBakgsRUFBSyxJQUFBMlUsR0FBOEIsT0FFdEYsTUFBQXBXLEVBQWE0WCxFQUFZblcsQ0FBRyxFQUM1QmlOLEdBQU8zUCxFQUFBcVgsRUFBSSxZQUFKLFlBQUFyWCxFQUFlLEtBQ3hCLEdBQUEyUCxHQUFRMU8sR0FBUyxLQUFNLENBRW5CLE1BQUE2WCxFQUFRbkosRUFBSyxvQkFBb0IxTyxDQUFLLEVBQzVDLEdBQUk2WCxHQUFTLE1BQVFBLEVBQU0sT0FBUyxFQUFHLENBQ3JDLE1BQU1DLEVBQVF2VyxFQUFFLElBQUlzVyxFQUFRRSxHQUNuQnJKLEVBQUssU0FBU3FKLENBQUksR0FBS3JKLEVBQUssU0FBU3FKLENBQUksQ0FDakQsRUFBRSxLQUFLLEdBQUcsRUFDUEQsR0FBUyxNQUFRQSxJQUFVLEtBQzdCcFAsRUFBSWpILENBQUcsRUFBSXFXLEVBRWQsQ0FDRixDQUNNLE9BQUFwUCxDQUNULENBaUVBLGVBQXNCc1AsR0FBcUJqRixFQUEyQjVVLEVBQXVCLEdBQUUsQ0FDN0YsR0FBSUEsRUFBSyxPQUFRLENBQ1QsTUFBQW9ZLEVBQU94RCxFQUFXLFVBQ2xCdUQsRUFBWXZELEVBQVcsZUFBZSxDQUFFLEtBQUF3RCxDQUFNLENBQUEsRUFDOUMsTUFBQXBZLEVBQUssT0FBT21ZLENBQVMsRUFDM0IsTUFDRCxDQUNELE1BQU12QixFQUFjaEMsRUFBVyxZQUMvQixJQUFJOUMsRUFBNkI5UixFQUFLLFFBQ2xDOFIsR0FBVyxPQUNiQSxFQUFVLENBQUEsRUFDVjFPLEVBQUUsS0FBS3dULEVBQVksTUFBTSxNQUFNLFdBQWFxQixHQUF1QixDQUNqRSxHQUFJLEVBQUFqWSxFQUFLLGNBRUhBLEVBQUssYUFBYWlZLENBQUcsSUFBTSxLQUs3QixFQUFBalksRUFBSyxVQUFZOFosRUFBQUEsTUFBTTdCLEVBQUksSUFBSSxJQUFNLEtBR3JDQSxFQUFJLGFBQWUsSUFBU0EsRUFBSSxNQUFRLFNBQVUsQ0FDcEQsTUFBTThCLEVBQTZCLENBQ2pDLElBQUs5QixFQUFJLElBQ1QsTUFBT0EsRUFBSSxLQUFBLEVBRWJuRyxFQUFRLEtBQUtpSSxDQUFTLENBQ3ZCLENBQUEsQ0FDRixHQUdILFVBQVdBLEtBQWFqSSxFQUFTLENBRS9CLE1BQU1WLEVBQWN3RixFQUFZLE1BQU0sTUFBTSxXQUFXbUQsRUFBVSxHQUFHLEVBQzFEQSxFQUFBLFlBQWMzSSxHQUFlLEdBQ25DcFIsRUFBSyxlQUNQQSxFQUFLLGNBQWMsQ0FBRSxJQUFLK1osQ0FBVyxDQUFBLENBRXhDLENBRUssS0FBQSxDQUFFLE1BQUE3TSxHQUFVUyxLQUVacU0sRUFBeUIsTUFBTVYsS0FDL0JoQyxFQUFPLENBQUEsRUFDVCxJQUFBMkMsRUFBZXJELEVBQVksTUFBTSxLQUNqQyxHQUFBNVcsRUFBSyxXQUFhLFNBQVUsQ0FDOUIsTUFBTWthLEVBQWVoTixFQUNuQixDQUNFLEtBQU0sQ0FDSixZQUFhLEVBQ2IsU0FBVSxRQUNYLENBRUgsRUFBQTBKLEVBQVksTUFBTSxRQUFRLE9BQU8sWUFBWSxFQUcvQ3FELEdBRGdCLE1BQU1yRixFQUFXLE9BQU9zRixFQUFjLENBQUUsUUFBUyxHQUFNLEdBQ2hELE9BQ3hCLENBQ0QsVUFBVzNQLEtBQU8wUCxFQUFjLENBQ3hCLE1BQUFFLEVBQVEvVyxFQUFFLFVBQVVtSCxDQUFHLEVBQzNCbkgsRUFBQSxLQUFLME8sRUFBVWlJLEdBQThCLENBQzdDLE1BQU05QixFQUFNOEIsRUFBVSxZQUNoQkssRUFBVSxDQUNkLElBQUtELEVBQ0wsWUFBYTVQLEVBQ2IsSUFBS3dQLEVBQVUsSUFDZixJQUFBOUIsRUFDQSxVQUFBOEIsQ0FBQSxFQUVFL1osRUFBSyxtQkFBcUIsSUFDNUJ3WixHQUFxQlksQ0FBTyxFQUcxQnBhLEVBQUssZUFDUEEsRUFBSyxjQUFjb2EsQ0FBTyxDQUMzQixDQUNGLEVBRUQ5QyxFQUFLLEtBQUs2QyxDQUFLLENBQ2hCLENBQ0ssTUFBQUUsRUFBVWpYLEVBQUUsTUFDaEIsQ0FDRSxRQUFBME8sRUFDQSxLQUFBd0YsRUFDQSxTQUFVLFFBQ1YsU0FBVSxHQUNWLFVBQVcsSUFDWCxPQUFRLEVBQUEsRUFFVixDQUNFLEdBQUd0WCxDQUFBLENBQ0osRUFFQ0EsRUFBSyxXQUFhLFFBQ2QsTUFBQWdhLEVBQVcsTUFBTUssQ0FBTyxFQUV4QixNQUFBTCxFQUFXLElBQUlLLENBQU8sQ0FFaEMsQ0FNc0IsZUFBQUMsR0FBcUIxRixFQUEyQjVVLEVBQWlCLENBRXJGLE1BQU11YSxFQUFhLE1BREEsTUFBTWhCLE1BQ1csSUFBSXZaLEVBQUssSUFBSSxFQUMzQzRXLEVBQWNoQyxFQUFXLFlBQzNCNVUsRUFBSyxTQUFXLEtBQ040VyxFQUFBLE1BQU0sS0FBSyxPQUFTLEdBRWxDLE1BQU00RCxFQUFhNUQsRUFBWSxNQUFNLE1BQU0sU0FBUyxRQUN6QyxVQUFBck0sS0FBT2dRLEVBQVcsS0FDdkJDLEVBQ0Y1RixFQUFXLFNBQVMsT0FBTyxDQUFFLElBQUFySyxFQUFLLE9BQVEsR0FBTyxFQUVyQ3FNLEVBQUEsTUFBTSxLQUFLLEtBQUtyTSxDQUFHLENBR3JDLENDeE9hLE1BQUFrUSxHQUE4RCxHQUMzRCxTQUFBQyxHQUEwQnhhLEVBQWM4UCxFQUErQixDQUNyRnlLLEdBQW1CdmEsQ0FBSSxFQUFJOFAsQ0FDN0IsQ0FFTSxTQUFVMkssR0FBcUJ6YSxFQUFZLENBQy9DLE9BQU91YSxHQUFtQnZhLENBQUksQ0FDaEMsQ0FPQXdhLEdBQTBCLGVBQWdCLENBQUNFLEVBQThCN2EsSUFBa0MsQ0FFekcsTUFBTTZXLEVBRGE3VyxFQUFJLFdBQ1EsWUFDL0IsU0FBUzhhLEdBQVMsQ0FDVCxPQUFBakUsRUFBWSxNQUFNLE1BQU0sUUFBVSxJQUMzQyxDQUNNLEtBQUEsQ0FBRSxHQUFBeFcsR0FBTzJILEdBQUFBLFFBQ2YsR0FBSSxDQUFDNlMsRUFBVyxDQUNkblosR0FBTyxLQUFLLDBDQUEwQyxFQUN0RCxNQUNELENBQ00sT0FBQXJCLEVBQUcsTUFBTSwwQkFBMEIsQ0FDeEMsVUFBV3dhLEVBQVUsVUFDckIsVUFBQUMsRUFDQSxhQUFXLENBQ1QsT0FBT2pFLEVBQVksTUFBTSxJQUMzQixFQUNBLFdBQVksSUFDSGhILEtBRVQsU0FBVWdMLEVBQVUsU0FDcEIsZ0JBQWlCQSxFQUFVLGdCQUMzQixzQkFBdUIsTUFBT0UsR0FBVyxDQUN2Q0YsRUFBVSxnQkFBZ0IsTUFBUSxDQUFDLEdBQUdFLENBQU8sRUFDN0MsTUFBTUMsYUFDRkgsRUFBVSxtQkFDRkEsRUFBQSxrQkFBa0JBLEVBQVUsZ0JBQWdCLEtBQUssQ0FFL0QsQ0FBQSxDQUNELENBQ0gsQ0FBQyxFQ2hCRCxLQUFNLENBQUUsTUFBQTFOLEVBQUssRUFBS1MsS0FHWixTQUFVcU4sR0FBMEJqYixFQUF1QixDQUMzREEsRUFBSSxTQUFXLE9BRWpCQSxFQUFJLFFBQVUsSUFFVixNQUFBSyxFQUFLQyxhQUFVLE1BQ2YsQ0FBRSxFQUFBK0gsR0FBTVMsS0FDUjVJLEVBQU1DLEdBQ0hDLFdBQVMsSUFDUGlJLEVBQUVsSSxDQUFJLENBQ2QsRUFHSCxJQUFJeUMsRUFBdUI1QyxFQUFJLFlBQ3pCLE1BQUE2VSxFQUFhN1UsRUFBSSxRQUFVQSxFQUFJLFdBQ3JDLEdBQUksQ0FBQzZVLEVBQ0csTUFBQSxJQUFJLE1BQU0sMENBQTBDLEVBRTVELE1BQU1xRyxFQUFxQnJHLEVBRXJCLENBQUUsWUFBQWdDLENBQWdCLEVBQUFxRSxFQUVsQixDQUFFLFVBQUFDLEVBQVcsZUFBQUMsQ0FBbUIsRUFBQUYsRUFFdEMsU0FBU0csR0FBYSxDQWFiLE1BQUEsQ0FDTCxXQUFZLENBQ1YsR0FkV2hiLEVBQUcsV0FBVyxTQUFTLENBQ3BDLGVBQWVpYixFQUFlLENBQzVCekUsRUFBWSxNQUFNLFdBQVd4VyxFQUFHLFdBQVcsV0FBVyxFQUFJaWIsQ0FDNUQsRUFDQSxZQUFZMUMsRUFBZ0IsQ0FDZC9CLEVBQUEsTUFBTSxXQUFXLFNBQVcrQixFQUN4Qy9CLEVBQVksTUFBTSxXQUFXeFcsRUFBRyxXQUFXLFdBQVcsRUFBSSxDQUM1RCxFQUNBLE1BQU0sZUFBYSxDQUNqQixPQUFPLE1BQU04YSxFQUFTLENBQ3hCLENBQUEsQ0FDRCxDQUlFLENBQUEsQ0FFTCxDQUVBLFNBQVNJLEdBQWEsQ0FDYixNQUFBLENBQ0wsS0FBTSxDQUNKLE1BQU0sU0FBU2xOLEVBQXFCLGFBQzlCLEdBQUFBLEVBQVEsT0FBUyxPQUVmLEdBREorTSxFQUFlL00sQ0FBTyxJQUNsQnhOLEVBQUErQixFQUFRLE9BQVIsWUFBQS9CLEVBQWMsUUFBUyxRQUN6QnFhLEVBQU8sZUFBZTdNLEVBQVEsTUFBT0EsRUFBUSxLQUFNekwsRUFBUSxLQUFLLGlCQUFpQixNQUVqRixRQUFLbVUsRUFBQUYsRUFBWSxNQUFNLFVBQWxCLE1BQUFFLEVBQTJCLGFBQzlCclYsR0FBTyxLQUFLLDhCQUE4QixFQUVyQyxNQUFNbVYsRUFBWSxNQUFNLFFBQVEsWUFBWXhJLENBQU8sVUFFbkRBLEVBQVEsT0FBUyxNQUV0QixHQURKK00sRUFBZS9NLENBQU8sSUFDbEJ5SSxFQUFBbFUsRUFBUSxPQUFSLFlBQUFrVSxFQUFjLFFBQVMsUUFBUyxDQUNsQyxNQUFNdk8sRUFBUTNGLEVBQVEsS0FBSyxnQkFBa0JzWSxFQUFPLGFBQUEsRUFBZSxPQUFTLEVBQ3JFQSxFQUFBLGVBQWUzUyxFQUFPOEYsRUFBUSxJQUFJLENBQUEsS0FFekMsUUFBS21OLEVBQUEzRSxFQUFZLE1BQU0sVUFBbEIsTUFBQTJFLEVBQTJCLFlBQzlCOVosR0FBTyxLQUFLLDZCQUE2QixFQUVwQyxNQUFNbVYsRUFBWSxNQUFNLFFBQVEsV0FBV3hJLENBQU8sQ0FHL0QsRUFDQSxNQUFNLFVBQVUsQ0FBRSxLQUFBZ0wsR0FBTSxDQUNsQkEsSUFBUyxPQUVYLE1BQU04QixFQUFVLENBQUUsVUFBVyxFQUFPLENBQUEsRUFDM0I5QixJQUFTLE1BQ2xCLE1BQU04QixFQUFVLENBQUUsVUFBVyxHQUFNLFlBQWEsR0FBTSxFQUV0RCxNQUFNQSxHQUVWLENBQ0QsQ0FBQSxDQUVMLENBRUEsU0FBU00sR0FBWSxDQUNaLE1BQUEsQ0FDTCxVQUFXLENBQ1QsUUFBUyxDQUNQLE9BQVEsQ0FDTixNQUFPLE1BQU9wTixHQUF5QixDQUVyQ0EsRUFBUSxJQUFNQSxFQUFRaE8sRUFBRyxZQUFZLEdBQUcsRUFDbEMsTUFBQTZhLEVBQU8sU0FBUzdNLENBQU8sQ0FDL0IsQ0FDRCxFQUNELEtBQU0sQ0FDSixLQUFNLEdBQ04sTUFBTyxNQUFPQSxHQUF5QixDQUVyQ0EsRUFBUSxJQUFNQSxFQUFRaE8sRUFBRyxZQUFZLEdBQUcsRUFDeEMsTUFBTTZhLEVBQU8sU0FBUyxDQUNwQixJQUFLN00sRUFBUSxJQUNiLE1BQU9BLEVBQVEsS0FBQSxDQUNoQixDQUNILENBQ0QsRUFDRCxLQUFNLENBQ0osTUFBTyxNQUFPQSxHQUF5QixDQUVyQ0EsRUFBUSxJQUFNQSxFQUFRaE8sRUFBRyxZQUFZLEdBQUcsRUFDeEMsTUFBTTZhLEVBQU8sU0FBUyxDQUNwQixJQUFLN00sRUFBUSxJQUNiLE1BQU9BLEVBQVEsS0FBQSxDQUNoQixDQUNILENBQ0QsRUFDRCxLQUFNLENBQ0osTUFBTyxNQUFPQSxHQUF5QixDQUVyQ0EsRUFBUSxJQUFNQSxFQUFRaE8sRUFBRyxZQUFZLEdBQUcsRUFDeEMsTUFBTTZhLEVBQU8sU0FBUyxDQUNwQixJQUFLN00sRUFBUSxJQUNiLE1BQU9BLEVBQVEsS0FBQSxDQUNoQixDQUNILENBQ0QsQ0FDRixDQUNGLENBQUEsQ0FFTCxDQUVBLFNBQVNxTixHQUFTLENBQ1QsTUFBQSxDQUNMLE9BQVEsQ0FDTixRQUFTLENBQ1AsT0FBUSxDQUNOLFFBQVN0YixXQUFTLElBQUssU0FDZCxPQUFBMlcsR0FBQWxXLEVBQUFnVyxFQUFZLFFBQVosWUFBQWhXLEVBQW1CLFFBQW5CLFlBQUFrVyxFQUEwQixPQUFBLENBQ2xDLENBQ0YsQ0FDRixFQUNELFVBQVEsQ0FDTUYsRUFBQSxNQUFNLE1BQU0sS0FBTyxDQUFBLEVBQy9CdkIsR0FBb0J1QixFQUFZLE1BQU0sTUFBTSxRQUFVak0sR0FBa0MsQ0FFdEZBLEVBQU8sVUFBWSxFQUFBLENBQ3BCLEVBRUssTUFBQStRLEVBQWU5RyxFQUFXLGtCQUM1QjhHLEdBQUEsTUFBQUEsRUFBYyxXQUNoQkEsRUFBYSxVQUFTLENBRTFCLEVBQ0EsV0FBUyxDQUNQOUcsRUFBVyxVQUFVLENBQUUsWUFBYSxFQUFNLENBQUEsQ0FDNUMsRUFDQyxnQkFBbUIvUyxHQUFjLENBQ3BCK1UsRUFBQSxNQUFNLE9BQU8sS0FBTy9VLENBQ2xDLEVBQ0MseUJBQTRCQSxHQUFjLENBQzdCK1UsRUFBQSxNQUFNLE9BQU8sY0FBZ0IvVSxDQUMzQyxFQUNDLG9CQUF1QkEsR0FBYyxDQUN4QitVLEVBQUEsTUFBTSxPQUFPLFNBQVcvVSxDQUN0QyxFQUNBLFVBQVcsQ0FDVCxTQUFVLEdBQ1Qsb0JBQXVCQSxHQUFjLENBQ3hCK1UsRUFBQSxNQUFNLE9BQU8sVUFBVSxTQUFXL1UsQ0FDaEQsQ0FDRCxDQUNGLENBQUEsQ0FFTCxDQUVBLFNBQVM4WixHQUFPLENBQ1AsTUFBQSxDQUNMLEtBQU0sQ0FBRSxFQUNSLFlBQVlDLEVBQWEsQ0FDdkJoSCxFQUFXLGtCQUFrQixDQUFFLEtBQU1nSCxFQUFVLFVBQVcsR0FBTSxLQUVsRSxDQUFBLENBRUosQ0FFQSxTQUFTQyxHQUFVLENBQ1gsTUFBQUMsRUFBWXRVLE1BQUksRUFBSyxFQUNwQixNQUFBLENBQ0wsUUFBUyxDQUNQLFFBQVMsQ0FDUCxRQUFTLENBQ1AsS0FBTSxVQUNOLEtBQU1wSCxFQUFHLE1BQU0sUUFDZixNQUFPSCxFQUFHLDBCQUEwQixFQUNwQyxNQUFPLEVBQ1AsT0FBUSxHQUNSLE1BQU8sU0FBVyxDQUNoQixNQUFNMlUsRUFBVyxVQUFVLENBQUUsVUFBVyxFQUFPLENBQUEsQ0FDakQsQ0FDRCxFQUNELE9BQVEsQ0FDTixLQUFNelUsV0FBUyxJQUNOeVcsRUFBWSxNQUFNLE9BQU8sT0FBUyxHQUFRLFVBQVksU0FDOUQsRUFDRCxLQUFNeFcsRUFBRyxNQUFNLE9BQ2YsTUFBT0gsRUFBRyx5QkFBeUIsRUFDbkMsTUFBTyxFQUNQLE9BQVEsR0FDUixNQUFPLElBQUssQ0FDVjJXLEVBQVksTUFBTSxPQUFPLEtBQU8sQ0FBQ0EsRUFBWSxNQUFNLE9BQU8sSUFDNUQsQ0FDRCxFQUNELFFBQVMsQ0FDUCxLQUFNelcsV0FBUyxJQUNOeVcsRUFBWSxNQUFNLFFBQVEsUUFBVSxVQUFZLFNBQ3hELEVBQ0QsS0FBTXhXLEVBQUcsTUFBTSxRQUNmLE1BQU9ILEVBQUcsMEJBQTBCLEVBQ3BDLE1BQU8sRUFDUCxPQUFRLEdBQ1IsTUFBTyxJQUFLLENBQ1YyVyxFQUFZLE1BQU0sUUFBUSxRQUFVLENBQUNBLEVBQVksTUFBTSxRQUFRLE9BQ2pFLENBQ0QsRUFDRCxPQUFRLENBQ04sS0FBTSxHQUNOLEtBQU0sVUFDTixLQUFNeFcsRUFBRyxNQUFNLE9BQ2YsTUFBTyxFQUNQLFFBQVMwYixFQUNULE1BQU83YixFQUFHLHlCQUF5QixFQUNuQyxPQUFRLEdBQ1IsTUFBTyxTQUFXLENBQ2hCNmIsRUFBVSxNQUFRLEdBQ2QsR0FBQSxDQUNGLE1BQU1qQyxHQUFZakYsRUFBWWdDLEVBQVksTUFBTSxRQUFRLE1BQU0sQ0FBQSxRQUN0RCxDQUNSa0YsRUFBVSxNQUFRLEVBQ25CLENBQ0gsQ0FDRCxFQUNELFFBQVMsQ0FDUCxLQUFNLFVBQ04sS0FBTTFiLEVBQUcsTUFBTSxjQUNmLE1BQU9ILEVBQUcsMEJBQTBCLEVBQ3BDLE9BQVEsR0FDUixNQUFPLENBQ1IsQ0FDRixFQUNELG1CQUFtQjRCLEVBQXdCLENBQ25DLE1BQUFrYSxFQUFXbkYsRUFBWSxNQUFNLE1BQU0sUUFFaEMsU0FBQW9GLEVBQWNDLEVBQXdCcGEsR0FBd0IsQ0FDckUsTUFBTWlRLEdBQTZCLENBQUEsRUFDakMsT0FBQTFPLEVBQUEsUUFBUXZCLEdBQVF3QixJQUFRLENBQ2xCLE1BQUE2WSxHQUFZRCxFQUFJNVksR0FBSyxHQUFHLEVBQzlCLEdBQUk2WSxHQUFXLENBQ2IsT0FBT0EsR0FBVSxNQUNqQixNQUFNQyxHQUFZalAsR0FBTSxDQUFFLEdBQUdnUCxJQUFhN1ksRUFBSSxFQUN0Q3lPLEdBQUF6TyxHQUFLLEdBQUcsRUFBSThZLEdBQ2hCRCxHQUFVLFdBQ1pDLEdBQVUsU0FBV0gsRUFBY0UsR0FBVSxTQUFVN1ksR0FBSyxRQUFRLEVBRXZFLENBQUEsQ0FDRixFQUNNeU8sRUFDVCxDQUVNLE1BQUFzSyxFQUFhSixFQUFjRCxFQUFVbGEsQ0FBSyxFQUNwQytVLEVBQUEsTUFBTSxNQUFNLFFBQVV3RixFQUNsQ3hGLEVBQVksTUFBTSxNQUFNLFdBQWF6RSxHQUF5QixDQUFBLEVBQUlpSyxDQUFVLENBQzlFLENBQ0QsQ0FBQSxDQUVMLENBRUEsU0FBU0MsR0FBUSxDQUNSLE1BQUEsQ0FDTCxNQUFPLENBQ0wsYUFBYUMsRUFBc0UsQ0FDakYsS0FBTSxDQUFFLGFBQUFDLEVBQWMsS0FBQUMsRUFBTSxJQUFBQyxFQUFLLE1BQUFwTSxHQUFVaU0sRUFFM0NqSCxHQUFvQnVCLEVBQVksTUFBTSxNQUFNLFFBQVVqTSxJQUF1QixDQUN2RUEsR0FBTyxNQUFRNlIsRUFDakI3UixHQUFPLFVBQVkwRixFQUVuQjFGLEdBQU8sVUFBWSxFQUNwQixDQUNGLEVBRUssTUFBQStSLEVBQVU5RixFQUFZLE1BQU0sTUFBTSxLQUM1QkEsRUFBQSxNQUFNLE1BQU0sS0FBTzJGLEVBQWUsQ0FBRSxLQUFBQyxFQUFNLE1BQUFuTSxFQUFPLElBQUFvTSxDQUFRLEVBQUEsTUFDakVGLEdBQWdCRyxHQUFXLE9BQzdCekIsRUFBTyxVQUFTLENBRXBCLENBQ0QsQ0FBQSxDQUVMLENBRUEsU0FBUzBCLEdBQVksQ0FDWixNQUFBLENBQ0wsVUFBVyxDQUNULFFBQVMsQ0FDUCxJQUFLLENBQ0gsT0FBSyxDQUNJMUIsRUFBQSxRQUFRLENBQUEsQ0FBRSxDQUNuQixDQUNELENBQ0YsQ0FDRixDQUFBLENBRUwsQ0FFQSxTQUFTdkUsR0FBVyxDQUNaLEtBQUEsQ0FBRSxRQUFBckgsR0FBWU8sS0FDYixNQUFBLENBQ0wsVUFBVyxDQUNULFFBQVMsQ0FDUCxPQUFRLENBQ04sS0FBTSxHQUNOLEtBQU0zUCxFQUFHLGtCQUFrQixFQUMzQixLQUFNLFVBQ04sTUFBTyxJQUFLLENBQ1ZnYixFQUFPLFNBQVMsUUFDbEIsQ0FDRCxDQUNGLENBQ0YsRUFDRCxVQUFXLENBQ1QsTUFBTyxDQUNMLFNBQVUsQ0FDUixPQUFRLENBQ04sS0FBTSxLQUNOLEdBQUc3YSxFQUFHLE9BQU8sT0FBTyxRQUFRLEVBQzVCLE1BQU8sTUFBT2dPLEdBQXlCLENBQy9CLEtBQUEsQ0FBRSxNQUFBOUYsRUFBTyxJQUFBaUMsQ0FBUSxFQUFBNkQsRUFDakI2SSxFQUFhMU0sRUFBSXFNLEVBQVksTUFBTSxNQUFNLFNBQVMsTUFBTSxFQUM5RCxNQUFNcUUsRUFBTyxTQUFTLFlBQVksQ0FBRSxXQUFBaEUsRUFBWSxJQUFBMU0sRUFBSyxDQUN2RCxDQUNELENBQ0YsRUFDRCxRQUFTLENBQ1AsS0FBTSxDQUNKLEtBQU0sS0FDTixRQUFTOEUsRUFBU2pCLEdBQTJCLENBQ3JDLEtBQUEsQ0FBRSxNQUFBOUYsRUFBTyxJQUFBaUMsQ0FBUSxFQUFBNkQsRUFDakI2SSxFQUFhMU0sRUFBSXFNLEVBQVksTUFBTSxNQUFNLFNBQVMsTUFBTSxFQUN4RE0sRUFBYytELEVBQU8sU0FBUyxlQUFlaEUsQ0FBVSxFQUN0RCxNQUFBLENBQUMsRUFBQ0MsR0FBQSxNQUFBQSxFQUFhLFFBQUEsQ0FDdkIsRUFDRCxNQUFPLE1BQU85SSxHQUF5QixPQUMvQixLQUFBLENBQUUsTUFBQTlGLEVBQU8sSUFBQWlDLENBQVEsRUFBQTZELEVBQ2pCNkksRUFBYTFNLEVBQUlxTSxFQUFZLE1BQU0sTUFBTSxTQUFTLE1BQU0sRUFDOUQsR0FBSUEsRUFBWSxNQUFNLE1BQU0sU0FBUyxVQUFXLENBRXhDLE1BQUFnRyxHQUE0QjNCLEVBQU8sU0FBUyxnQkFDaEQ3WCxFQUFBLFFBQVF3WixHQUFhdlosSUFBcUIsQ0FDdEN1VCxFQUFZLE1BQU0sTUFBTSxTQUFTLGtCQUFvQixPQUN2RHFFLEVBQU8sU0FBUyxVQUFVLENBQUUsSUFBSzVYLEdBQUssUUFBUyxFQUUvQzRYLEVBQU8sU0FBUyxZQUFZLENBQUUsSUFBSzVYLEdBQUssUUFBUyxDQUNsRCxDQUNGLENBQ0YsRUFDRHpDLEVBQUFxYSxFQUFPLFNBQVMsZUFBZWhFLENBQVUsSUFBekMsTUFBQXJXLEVBQTRDLFFBQzlDLEVBQ0EsS0FBTXlPLEVBQVNqQixHQUEyQixVQUNsQyxLQUFBLENBQUUsTUFBQTlGLEVBQU8sSUFBQWlDLENBQVEsRUFBQTZELEVBQ2pCNkksRUFBYTFNLEVBQUlxTSxFQUFZLE1BQU0sTUFBTSxTQUFTLE1BQU0sRUFDOUQsTUFBTyxHQUFDRSxJQUFBbFcsRUFBQXFhLEVBQU8sV0FBUCxZQUFBcmEsRUFBaUIsZUFBZXFXLEtBQWhDLE1BQUFILEdBQTZDLFVBQUEsQ0FDdEQsQ0FDRixFQUNELEtBQU0sQ0FDSixLQUFNLEtBQ04sUUFBUyxHQUNULE1BQU8sTUFBTzFJLEdBQXlCLENBQy9CLEtBQUEsQ0FBRSxNQUFBOUYsRUFBTyxJQUFBaUMsQ0FBUSxFQUFBNkQsRUFDdkIsTUFBTTZNLEVBQU8sU0FBUyxVQUFVLENBQUUsSUFBQTFRLENBQUssQ0FBQSxDQUN6QyxFQUNBLEtBQU04RSxFQUFTakIsR0FBMkIsVUFDbEMsS0FBQSxDQUFFLE1BQUE5RixFQUFPLElBQUFpQyxDQUFRLEVBQUE2RCxFQUNqQjZJLEVBQWExTSxFQUFJcU0sRUFBWSxNQUFNLE1BQU0sU0FBUyxNQUFNLEVBQzlELE1BQU8sQ0FBQyxHQUFDRSxJQUFBbFcsRUFBQXFhLEVBQU8sV0FBUCxZQUFBcmEsRUFBaUIsZUFBZXFXLEtBQWhDLE1BQUFILEdBQTZDLFVBQUEsQ0FDdkQsQ0FDRixFQUNELE9BQVEsQ0FDTixLQUFNLEtBQ04sTUFBTyxNQUFPMUksR0FBeUIsT0FDL0IsS0FBQSxDQUFFLE1BQUE5RixFQUFPLElBQUFpQyxDQUFRLEVBQUE2RCxFQUN2QixPQUFNeE4sRUFBQXFhLEVBQU8sV0FBUCxZQUFBcmEsRUFBaUIsWUFBWSxDQUFFLElBQUEySixDQUFLLEdBQzVDLEVBQ0EsS0FBTThFLEVBQVNqQixHQUEyQixVQUNsQyxLQUFBLENBQUUsTUFBQTlGLEVBQU8sSUFBQWlDLENBQVEsRUFBQTZELEVBQ2pCNkksRUFBYTFNLEVBQUlxTSxFQUFZLE1BQU0sTUFBTSxTQUFTLE1BQU0sRUFDOUQsTUFBTyxDQUFDLEdBQUNFLElBQUFsVyxFQUFBcWEsRUFBTyxXQUFQLFlBQUFyYSxFQUFpQixlQUFlcVcsS0FBaEMsTUFBQUgsR0FBNkMsVUFBQSxDQUN2RCxDQUNGLEVBQ0QsT0FBUSxDQUNOLEtBQU0sS0FDTixHQUFHMVcsRUFBRyxPQUFPLE9BQU8sUUFBUSxFQUM1QixNQUFPLE1BQU9nTyxHQUF5QixPQUMvQixLQUFBLENBQUUsTUFBQTlGLEVBQU8sSUFBQWlDLENBQVEsRUFBQTZELEVBQ2pCNkksRUFBYTFNLEVBQUlxTSxFQUFZLE1BQU0sTUFBTSxTQUFTLE1BQU0sRUFDOUQsT0FBTWhXLEVBQUFxYSxFQUFPLFdBQVAsWUFBQXJhLEVBQWlCLFlBQVksQ0FBRSxJQUFBMkosRUFBSyxXQUFBME0sSUFDNUMsQ0FDRCxDQUNGLENBQ0YsQ0FDRixDQUFBLENBRUwsQ0FFQSxTQUFTNEYsRUFBYUMsRUFBcUIsQ0FDekNBLEVBQVMsT0FBTyxjQUFnQjFaLEVBQUUsVUFBVTBaLEVBQVMsT0FBTyxXQUFXLENBQ3pFLENBRUEsU0FBU0MsRUFBb0JwYSxFQUErQixDQUMxREEsRUFBVXVLLEdBQU1wTixHQUFtQixjQUFjQyxDQUFHLEVBQUc0QyxDQUFPLEVBQ3hELE1BQUEyTyxFQUF5QndJLEVBQUFBLE1BQU1uWCxFQUFRLFFBQVEsRUFDckQsR0FBSTJPLEVBQVUsQ0FDTixNQUFBMEwsRUFBVWxELEVBQUFBLE1BQU14SSxFQUFTLE9BQU8sRUFDdENsTyxFQUFFLFFBQVE0WixFQUFTLENBQUNoTixHQUFRMU0sS0FBTyxDQUM3QixHQUFBME0sR0FBTyxVQUFZLEdBQ3JCLE9BRUYsSUFBSWlCLEdBQWtDakIsR0FBTyxPQUk3QyxHQUhJaUIsSUFBVSxPQUNaQSxHQUFTMEosR0FBcUJyWCxFQUFHLEdBRS9CMk4sSUFBVSxLQUNaLE9BRUYsTUFBTWdNLEdBQVNqTixHQUFPLE9BQ2hCa04sR0FBZ0JqTSxHQUFPakIsR0FBTyxNQUFPalEsQ0FBRyxFQUMxQ2tkLEtBQVcsR0FDYnRhLEVBQVV1SyxHQUFNZ1EsR0FBZXZhLENBQU8sRUFFdEN1SyxHQUFNdkssRUFBU3VhLEVBQWEsQ0FDN0IsQ0FDRixDQUNGLENBRUssTUFBQW5MLEVBQWM3RSxHQUNsQnBOLEdBQW1CLGVBQWUsQ0FBRSxFQUFBc0ksQ0FBRyxDQUFBLEVBQ3ZDZ1QsSUFDQUUsSUFDQUUsSUFDQUMsSUFDQUUsSUFDQUUsSUFDQVEsSUFDQU0sSUFDQWpHLElBQ0EvVCxDQUFPLEVBR0gsQ0FBRSxhQUFBa1MsR0FBaUJVLEtBRW5CdUgsRUFBV2pJLEVBQWE5QyxDQUFXLEVBQ3pDLE9BQUE4SyxFQUFhQyxDQUFRLEVBQ2RBLENBQ1QsQ0FFQSxTQUFTSyxFQUFpQnhhLEVBQStCLENBRTNDaVUsRUFBQSxNQUFRbUcsRUFBb0JwYSxDQUFPLEVBQ3hDbEIsR0FBQSxLQUFLLGlDQUFrQ21WLEVBQVksS0FBSyxDQUNqRSxDQUVBLFNBQVN3RyxFQUFrQkMsRUFBbUMsQ0FDNUQsTUFBTUMsRUFBYXBRLEdBQU0sQ0FBQSxFQUFJdkssRUFBUzBhLENBQVcsRUFDakQsT0FBQUYsRUFBaUJHLENBQVUsRUFDakIzYSxFQUFBMmEsRUFDSEEsQ0FDVCxDQUVBSCxFQUFpQnhhLENBQU8sRUFNeEIsU0FBUzRhLEVBQWtCRixFQUF3QixDQUMzQ25RLEdBQUEwSixFQUFZLE1BQU95RyxDQUFXLENBQ3RDLENBRU8sTUFBQSxDQUNMLGtCQUFBRCxFQUNBLGlCQUFBRCxFQUNBLGtCQUFBSSxDQUFBLENBRUosQ0FFQSxTQUFTQyxHQUFVN0csRUFBaUIsQ0FDNUIsS0FBQSxDQUFFLGtCQUFBOEcsRUFBbUIsY0FBQUMsQ0FBa0IsRUFBQS9HLEVBQ3ZDYSxFQUFVYixFQUFNLFNBQVduUCxRQUUzQm9QLEVBQWdDRCxFQUFNLGFBQWVuUCxFQUFBLElBQUksQ0FBRSxDQUFBLEVBRWpFLElBQUlvTixFQUFhK0IsRUFBTSxXQUNsQi9CLElBRUhBLEVBRFkyQyxHQUFVLENBQUUsUUFBQUMsRUFBUyxZQUFBWixDQUFhLENBQUEsRUFDN0IsWUFHZjhHLEdBQWlCLENBQUNBLEVBQWMsUUFDbENBLEVBQWMsTUFBUTlJLEdBR3BCK0IsRUFBTSxTQUFXLE9BQ25CQSxFQUFNLFFBQVUsSUFFbEIsTUFBTXZJLEVBQVV1SSxFQUFNLFFBQ2xCQSxFQUFNLFVBQ1JBLEVBQU0sU0FBUyxDQUFFLFFBQUFhLEVBQVMsWUFBQVosRUFBYSxXQUFBaEMsRUFBWSxRQUFBeEcsRUFBUyxFQUc5RCxNQUFNdVAsRUFBdUJGLEVBQWtCLENBQzdDLEdBQUc5RyxFQUNILFdBQUEvQixFQUNBLE9BQVFBLEVBQ1IsUUFBQXhHLENBQUEsQ0FDRCxFQUVELFNBQVN3UCxFQUFTRCxFQUEwQyxDQUMxRCxNQUFNRSxFQUE2QixDQUFFLFdBQUFqSixFQUFZLEdBQUcrSSxFQUFzQixRQUFBdlAsQ0FBTyxFQUUzRXVQLEdBQUFBLEVBQXFCLFlBQWFoSCxFQUFNLG1CQUFtQixFQUUzRCxNQUFBbUgsRUFBYTlDLEdBQVE2QyxDQUFZLEVBQ2hDLE1BQUEsQ0FDTCxHQUFHRixFQUNILEdBQUdHLEVBQ0gsUUFBQXRHLEVBQ0EsV0FBQTVDLEVBQ0EsWUFBQWdDLEVBQ0EsUUFBQXhJLENBQUEsQ0FFSixDQUVBLE9BQUl1UCxhQUFnQyxRQUMzQkEsRUFBcUIsS0FBTS9TLEdBQ3pCZ1QsRUFBU2hULENBQUcsQ0FDcEIsRUFHTWdULEVBQVNELENBQW9CLENBRXhDLENBRU0sU0FBVUksR0FBd0JwSCxFQUF1QixDQUM3RCxPQUFPNkcsR0FBVTdHLENBQUssQ0FDeEIsQ0FFTSxTQUFVcUgsR0FBNkJySCxFQUF1QixDQUNsRSxPQUFPNkcsR0FBVTdHLENBQUssQ0FDeEIsVUFJZ0JzSCxJQUFRLENBRXRCLE1BQU16RyxFQUFlaFEsRUFBQUEsTUFFZm9QLEVBQWdDcFAsRUFBQUEsTUFFaEM0RyxFQUFlLENBQUEsRUFDZixDQUFFLFdBQUF3RyxDQUFZLEVBQUcyQyxHQUFVLENBQUUsWUFBQVgsRUFBYSxRQUFBWSxFQUFTLEVBQ2xELE1BQUEsQ0FDTCxRQUFBQSxFQUNBLFlBQUFaLEVBQ0EsUUFBQXhJLEVBQ0EsV0FBQXdHLENBQUEsQ0FFSixDQ2htQk0sU0FBVXNKLEdBQVF2SCxFQUFZNVcsRUFBVW9lLEVBQVMsYUFBWSxDQUMzRCxNQUFBL2QsRUFBS0MsYUFBVSxNQUNyQixJQUFJa1EsRUFBYW9HLEVBQU0sS0FDbkJwRyxHQUNFQSxFQUFLLFlBQ1BBLEVBQUssTUFBSyxFQUNWQSxFQUFPNk4sRUFBZ0IsZ0JBQUFoYixFQUFFLFVBQVV1VCxFQUFNLElBQUksQ0FBQyxFQUM5Q3BHLEVBQUssTUFBSyxHQUlkLFNBQVM4TixHQUFxQixDQUM1QixPQUFPbGUsV0FBUyxJQUFLLENBQ25CLElBQUl3QyxFQUFlLENBQUEsRUFhZixHQVpBZ1UsRUFBTSxRQUNSaFUsRUFBVWdVLEVBQU0sUUFDUHBHLEdBQVFBLEVBQUssTUFBUSxPQUN4QkEsRUFBSyxnQkFBZ0IsT0FDekJsSixHQUFNLE9BQU8sS0FBSywwQkFBNEJrSixFQUFLLElBQUksRUFFekQ1TixFQUFVNE4sRUFBSyxLQUNYb0csRUFBTSxvQkFDUmhVLEVBQVVnVSxFQUFNLGtCQUFrQnZULEVBQUUsVUFBVW1OLEVBQUssSUFBSSxDQUFDLElBSXhEblEsRUFBRyxPQUFTLFFBQVMsQ0FDdkIsTUFBTWtkLEVBQWtCLENBQUEsRUFDeEIsVUFBV2dCLEtBQVUzYixFQUNuQjJhLEVBQVcsS0FBSyxDQUNkLEdBQUdnQixFQUNILE1BQU9DLEVBQVNELENBQU0sRUFDdEIsTUFBT0UsRUFBU0YsQ0FBTSxDQUFBLENBQ3ZCLEVBRUksT0FBQWhCLENBQ1IsQ0FFTSxPQUFBM2EsQ0FBQSxDQUNSLENBQ0gsQ0FFQSxTQUFTOGIsR0FBTyxDQUNQLE9BQUFsTyxDQUNULENBRU0sTUFBQW1PLEVBQXFCckksU0FBTyxZQUFhLFVBQUEsQ0FBQSxDQUFjLEVBRTdELFNBQVNzSSxHQUFlLENBQ3RCLE1BQU05YyxFQUFROFUsRUFBTXdILENBQU0sR0FBS3BlLEVBQUksTUFBTW9lLENBQU0sRUFDeEMsTUFBQSxDQUNMLEdBQUdPLEVBQVUsRUFDYixhQUFjRSxFQUNkLE1BQUEvYyxDQUFBLENBRUosQ0FFTSxLQUFBLENBQUUsTUFBQStjLEdBQVVDLEVBQUFBLHFCQUNaQyxFQUFXLE1BQU9DLEVBQVMsS0FBUyxDQUN4QyxHQUFJLENBQUN4TyxFQUNILE9BR0YsR0FBSUEsRUFBSyxpQkFBa0IsQ0FDekIsTUFBTWpHLEVBQVFxVSxJQUNWclUsR0FBQUEsRUFBTSxPQUFTLEtBQ2pCLE9BRUYsSUFBSXZJLEVBQVN1SSxFQUFNLE1BQ2QsTUFBTSxRQUFRQSxFQUFNLEtBQUssSUFDbkJ2SSxFQUFBLENBQUN1SSxFQUFNLEtBQUssR0FFakIsTUFBQWlHLEVBQUssZUFBZXhPLENBQU0sRUFDaEMsTUFDRCxDQUVELEdBQUl3TyxFQUFLLFFBQ1AsT0FHRixNQUFNakcsRUFBUXFVLElBQ2QsR0FBSUksRUFBUSxDQUNKLE1BQUF4TyxFQUFLLFdBQVdqRyxDQUFLLEVBQzNCLE1BQ0QsQ0FDSyxNQUFBaUcsRUFBSyxTQUFTakcsQ0FBSyxDQUFBLE1BSTNCLE1BQU0wVSxFQUFhLFNBQVcsQ0FDNUIsTUFBTUYsRUFBUyxFQUFJLENBQUEsRUFFZkcsRUFBWSxJQUFLLENBQ2hCMU8sR0FHTEEsRUFBSyxNQUFLLENBQUEsRUFHTjJPLEVBQWEsSUFBSyxDQUNsQjNPLEdBQVEsT0FHUixDQUFDQSxFQUFLLFdBQWEsQ0FBQ0EsRUFBSyxXQUs3QmIsRUFBQUEsTUFDRSxJQUNTaUgsRUFBTXdILENBQU0sRUFFckIsSUFBSyxLQUVKLEVBQUEsR0FJaUIsSUFBSyxDQUN6QnpPLEVBQUFBLE1BQ0UsSUFDU2EsR0FBQSxZQUFBQSxFQUFNLEtBRWYsSUFBSyxDQUNILE1BQU1qRyxFQUFRcVUsSUFDVjVlLEVBQUksTUFBTSxhQUdkQSxFQUFJLEtBQUssY0FBZSxDQUFFLEtBQUF3USxFQUFNLEdBQUdqRyxFQUFPLENBQUEsRUFFNUMsQ0FDRSxVQUFXLEVBQUEsQ0FDWixDQUFBLEtBS0wsTUFBTTZVLEVBQWMsSUFBSyxPQUN2QixPQUFPdmUsRUFBQTZkLEVBQVcsSUFBWCxZQUFBN2QsRUFBVyxJQUFBLEVBR2R3ZSxFQUFlLENBQUMvYixFQUFXbVosSUFBYSxDQUM1QyxJQUFJNkMsRUFBTzdDLEVBQ1gsT0FBSWlDLE1BQ0tZLEVBQUFaLElBQVVqQyxDQUFJLEdBRWhCblosRUFBS2djLENBQUksQ0FBQSxFQUVaQyxFQUFrQixDQUFDamMsRUFBV21aLElBQWEsQ0FDL0MsSUFBSTZDLEVBQU83QyxFQUNQaUMsTUFDS1ksRUFBQVosSUFBVWpDLENBQUksR0FFdkIsT0FBT25aLEVBQUtnYyxDQUFJLENBQUEsRUFFWmQsRUFBWWxiLEdBQ1QrYixFQUFhL2IsRUFBTSxPQUFPLEVBRzdCa2MsRUFBZWxjLEdBQ1orYixFQUFhL2IsRUFBTSxVQUFVLEVBRWhDbWIsRUFBWW5iLEdBQWEsQ0FDN0IsR0FBSXNULEVBQU0sZUFDRCxPQUFBQSxFQUFNLGVBQWV0VCxDQUFJLEVBRTVCLE1BQUFzVyxFQUFReUYsRUFBYS9iLEVBQU0sT0FBTyxFQUN4QyxPQUFJc1csR0FBUyxLQUNKLEdBRUYsT0FBT0EsQ0FBSyxDQUFBLEVBTWQsTUFBQSxDQUNMLHNCQUFBMEUsRUFDQSxTQUFBUyxFQUNBLFdBQUFFLEVBQ0EsVUFBQUMsRUFDQSxZQUFBRSxFQUNBLFFBQUFWLEVBQ0EsV0FBQVMsRUFDQSxTQUFBWCxFQUNBLFNBQUFDLEVBQ0EsWUFBQWUsRUFDQSxTQWZnQmxjLEdBQ1QrYixFQUFhL2IsRUFBTSxPQUFPLEVBZWpDLGdCQUFBaWMsRUFDQSxRQUFTL08sQ0FBQSxDQUViLENDak1BLE1BQU1pUCxHQUFPLE9BQU8sYUFBZ0IsVUFDaEMsYUFDQSxPQUFPLFlBQVksS0FBUSxXQUN6QixZQUNBLEtBQ0FDLEdBQVMsSUFBSSxJQUViQyxHQUFXLE9BQU8sU0FBWSxVQUFjLFFBQVUsUUFBVSxDQUFBLEVBRWhFQyxHQUFjLENBQUNDLEVBQUsxYSxFQUFNMmEsRUFBTUMsSUFBTyxDQUN6QyxPQUFPSixHQUFRLGFBQWdCLFdBQ3pCQSxHQUFRLFlBQVlFLEVBQUsxYSxFQUFNMmEsRUFBTUMsQ0FBRSxFQUN2QyxRQUFRLE1BQU0sSUFBSUQsQ0FBSSxLQUFLM2EsQ0FBSSxLQUFLMGEsQ0FBRyxFQUFFLENBQ25ELEVBQ0EsSUFBSUcsR0FBSyxXQUFXLGdCQUNoQkMsR0FBSyxXQUFXLFlBRXBCLEdBQUksT0FBT0QsR0FBTyxJQUFhLENBRTNCQyxHQUFLLEtBQWtCLENBQWxCLGNBQ0RqYyxHQUFBLGdCQUNBQSxHQUFBLGdCQUFXLENBQUEsR0FDWEEsR0FBQSxlQUNBQSxHQUFBLGVBQVUsSUFDVixpQkFBaUJYLEVBQUcwYyxFQUFJLENBQ3BCLEtBQUssU0FBUyxLQUFLQSxDQUFFLENBQ3hCLENBQ1QsRUFFSUMsR0FBSyxLQUFzQixDQUN2QixhQUFjLENBR2RoYyxHQUFBLGNBQVMsSUFBSWljLElBRlRDLEdBQ0gsQ0FFRCxNQUFNQyxFQUFRLFNBQ1YsR0FBSSxNQUFLLE9BQU8sUUFHaEIsTUFBSyxPQUFPLE9BQVNBLEVBRXJCLEtBQUssT0FBTyxRQUFVLEdBRXRCLFVBQVdKLEtBQU0sS0FBSyxPQUFPLFNBQ3pCQSxFQUFHSSxDQUFNLEdBRWJwSixHQUFBbFcsRUFBQSxLQUFLLFFBQU8sVUFBWixNQUFBa1csRUFBQSxLQUFBbFcsRUFBc0JzZixHQUN6QixDQUNULEVBQ0ksSUFBSUMsSUFBeUJ2ZixHQUFBOGUsR0FBUSxNQUFSLFlBQUE5ZSxHQUFhLCtCQUFnQyxJQUMxRSxNQUFNcWYsRUFBaUIsSUFBTSxDQUNwQkUsSUFFTEEsRUFBeUIsR0FDekJSLEdBQVksbWFBTStELHNCQUF1QixVQUFXTSxDQUFjLEVBQ25JLENBQ0EsQ0FFQSxNQUFNRyxHQUFjUCxHQUFTLENBQUNKLEdBQU8sSUFBSUksQ0FBSSxFQUV2Q1EsR0FBWW5YLEdBQU1BLEdBQUtBLElBQU0sS0FBSyxNQUFNQSxDQUFDLEdBQUtBLEVBQUksR0FBSyxTQUFTQSxDQUFDLEVBVWpFb1gsR0FBZ0JDLEdBQVNGLEdBQVNFLENBQUcsRUFFckNBLEdBQU8sS0FBSyxJQUFJLEVBQUcsQ0FBQyxFQUNoQixXQUNBQSxHQUFPLEtBQUssSUFBSSxFQUFHLEVBQUUsRUFDakIsWUFDQUEsR0FBTyxLQUFLLElBQUksRUFBRyxFQUFFLEVBQ2pCLFlBQ0FBLEdBQU8sT0FBTyxpQkFDVkMsR0FDQSxLQVRoQixLQVdOLE1BQU1BLFdBQWtCLEtBQU0sQ0FDMUIsWUFBWXJOLEVBQU0sQ0FDZCxNQUFNQSxDQUFJLEVBQ1YsS0FBSyxLQUFLLENBQUMsQ0FDZCxDQUNMLENBQ0EsTUFBTXNOLEdBQU4sTUFBTUEsRUFBTSxDQWNSLFlBQVlGLEVBQUtHLEVBQVMsQ0FiMUIzYyxHQUFBLGFBQ0FBLEdBQUEsZUFjSSxHQUFJLENBQUM0YyxFQUFBRixHQUFNRyxJQUNQLE1BQU0sSUFBSSxVQUFVLHlDQUF5QyxFQUdqRSxLQUFLLEtBQU8sSUFBSUYsRUFBUUgsQ0FBRyxFQUMzQixLQUFLLE9BQVMsQ0FDakIsQ0FqQkQsT0FBTyxPQUFPQSxFQUFLLENBQ2YsTUFBTUcsRUFBVUosR0FBYUMsQ0FBRyxFQUNoQyxHQUFJLENBQUNHLEVBQ0QsTUFBTyxHQUNYRyxHQUFBSixHQUFNRyxHQUFnQixJQUN0QixNQUFNelgsRUFBSSxJQUFJc1gsR0FBTUYsRUFBS0csQ0FBTyxFQUNoQyxPQUFBRyxHQUFBSixHQUFNRyxHQUFnQixJQUNmelgsQ0FDVixDQVVELEtBQUtELEVBQUcsQ0FDSixLQUFLLEtBQUssS0FBSyxRQUFRLEVBQUlBLENBQzlCLENBQ0QsS0FBTSxDQUNGLE9BQU8sS0FBSyxLQUFLLEVBQUUsS0FBSyxNQUFNLENBQ2pDLENBQ0wsRUF6QlcwWCxHQUFBLFlBQVBFLEdBSkVMLEdBSUtHLEdBQWdCLElBSjNCLElBQU1HLEdBQU5OLEdBdUNPLE1BQU1PLEdBQU4sTUFBTUEsRUFBUyxDQXNLbEIsWUFBWXJlLEVBQVMsQ0F3R3JCbWUsR0FBQSxLQUFBRyxJQWlGQUgsR0FBQSxLQUFBSSxJQXVEQUosR0FBQSxLQUFDSyxJQWtCREwsR0FBQSxLQUFDTSxJQWtCRE4sR0FBQSxLQUFBTyxJQTRYQVAsR0FBQSxLQUFBUSxJQXdGQVIsR0FBQSxLQUFBUyxJQStIQVQsR0FBQSxLQUFBVSxJQWtKQVYsR0FBQSxLQUFBVyxJQUlBWCxHQUFBLEtBQUFZLElBL3BDQVosR0FBQSxLQUFBYSxHQUFBLFFBQ0FiLEdBQUEsS0FBQWMsR0FBQSxRQUNBZCxHQUFBLEtBQUFlLEdBQUEsUUFDQWYsR0FBQSxLQUFBZ0IsR0FBQSxRQUNBaEIsR0FBQSxLQUFBaUIsR0FBQSxRQUlBaGUsR0FBQSxZQUlBQSxHQUFBLHNCQUlBQSxHQUFBLHFCQUlBQSxHQUFBLHVCQUlBQSxHQUFBLHVCQUlBQSxHQUFBLG1CQUlBQSxHQUFBLHVCQUlBQSxHQUFBLG9CQUlBQSxHQUFBLHFCQUlBQSxHQUFBLHdCQUlBQSxHQUFBLGlDQUlBQSxHQUFBLDJCQUlBQSxHQUFBLCtCQUlBQSxHQUFBLG1DQUlBQSxHQUFBLHlCQUVBK2MsR0FBQSxLQUFBa0IsR0FBQSxRQUNBbEIsR0FBQSxLQUFBbUIsR0FBQSxRQUNBbkIsR0FBQSxLQUFBb0IsR0FBQSxRQUNBcEIsR0FBQSxLQUFBcUIsR0FBQSxRQUNBckIsR0FBQSxLQUFBc0IsR0FBQSxRQUNBdEIsR0FBQSxLQUFBdUIsR0FBQSxRQUNBdkIsR0FBQSxLQUFBd0IsR0FBQSxRQUNBeEIsR0FBQSxLQUFBeUIsR0FBQSxRQUNBekIsR0FBQSxLQUFBMEIsR0FBQSxRQUNBMUIsR0FBQSxLQUFBMkIsR0FBQSxRQUNBM0IsR0FBQSxLQUFBNEIsR0FBQSxRQUNBNUIsR0FBQSxLQUFBNkIsR0FBQSxRQUNBN0IsR0FBQSxLQUFBOEIsR0FBQSxRQUNBOUIsR0FBQSxLQUFBK0IsR0FBQSxRQUNBL0IsR0FBQSxLQUFBZ0MsR0FBQSxRQUNBaEMsR0FBQSxLQUFBaUMsR0FBQSxRQUNBakMsR0FBQSxLQUFBa0MsR0FBQSxRQW9RQWxDLEdBQUEsS0FBQW1DLEdBQWlCLElBQU0sQ0FBQSxHQUN2Qm5DLEdBQUEsS0FBQW9DLEdBQWEsSUFBTSxDQUFBLEdBQ25CcEMsR0FBQSxLQUFBcUMsR0FBYyxJQUFNLENBQUEsR0FFcEJyQyxHQUFBLEtBQUFzQyxHQUFXLElBQU0sSUFnRGpCdEMsR0FBQSxLQUFBdUMsR0FBa0JDLEdBQU0sSUFDeEJ4QyxHQUFBLEtBQUF5QyxHQUFlLENBQUNELEVBQUlFLEVBQUlDLElBQVEsQ0FBQSxHQUNoQzNDLEdBQUEsS0FBQTRDLEdBQWUsQ0FBQ0MsRUFBSUMsRUFBSXpRLEVBQU0wUSxJQUFvQixDQUM5QyxHQUFJMVEsR0FBUTBRLEVBQ1IsTUFBTSxJQUFJLFVBQVUsa0VBQWtFLEVBRTFGLE1BQU8sRUFDZixHQXdJSTlmLEdBQUEsS0FBQytTLEdBQXNCLFlBdFhuQixLQUFNLENBQUUsSUFBQXlKLEVBQU0sRUFBRyxJQUFBdUQsRUFBSyxjQUFBQyxFQUFnQixFQUFHLGFBQUFDLEVBQWMsZUFBQUMsRUFBZ0IsZUFBQUMsRUFBZ0IsV0FBQUMsRUFBWSxRQUFBQyxFQUFTLGFBQUFDLEVBQWMsZUFBQUMsRUFBZ0IsWUFBQUMsRUFBYSxRQUFBQyxFQUFVLEVBQUcsYUFBQUMsRUFBZSxFQUFHLGdCQUFBWixFQUFpQixZQUFBYSxFQUFhLHlCQUFBQyxFQUEwQixtQkFBQUMsRUFBb0IsMkJBQUFDLEVBQTRCLHVCQUFBQyxFQUF3QixpQkFBQUMsQ0FBZ0IsRUFBTXBpQixFQUM1VSxHQUFJNGQsSUFBUSxHQUFLLENBQUNGLEdBQVNFLENBQUcsRUFDMUIsTUFBTSxJQUFJLFVBQVUsMENBQTBDLEVBRWxFLE1BQU15RSxFQUFZekUsRUFBTUQsR0FBYUMsQ0FBRyxFQUFJLE1BQzVDLEdBQUksQ0FBQ3lFLEVBQ0QsTUFBTSxJQUFJLE1BQU0sc0JBQXdCekUsQ0FBRyxFQU0vQyxHQUpBTSxHQUFBLEtBQUtjLEdBQU9wQixHQUNaTSxHQUFBLEtBQUtlLEdBQVc0QyxHQUNoQixLQUFLLGFBQWVDLEdBQWdCOUQsRUFBQSxLQUFLaUIsSUFDekMsS0FBSyxnQkFBa0JpQyxFQUNuQixLQUFLLGdCQUFpQixDQUN0QixHQUFJLENBQUNsRCxFQUFBLEtBQUtpQixLQUFZLENBQUMsS0FBSyxhQUN4QixNQUFNLElBQUksVUFBVSxvRUFBb0UsRUFFNUYsR0FBSSxPQUFPLEtBQUssaUJBQW9CLFdBQ2hDLE1BQU0sSUFBSSxVQUFVLHFDQUFxQyxDQUVoRSxDQUNELEdBQUk4QyxJQUFnQixRQUNoQixPQUFPQSxHQUFnQixXQUN2QixNQUFNLElBQUksVUFBVSw2Q0FBNkMsRUFrQ3JFLEdBaENBN0QsR0FBQSxLQUFLa0IsR0FBZTJDLEdBQ3BCN0QsR0FBQSxLQUFLa0MsR0FBa0IsQ0FBQyxDQUFDMkIsR0FDekI3RCxHQUFBLEtBQUtxQixHQUFVLElBQUksS0FDbkJyQixHQUFBLEtBQUtzQixHQUFXLElBQUksTUFBTTVCLENBQUcsRUFBRSxLQUFLLE1BQVMsR0FDN0NNLEdBQUEsS0FBS3VCLEdBQVcsSUFBSSxNQUFNN0IsQ0FBRyxFQUFFLEtBQUssTUFBUyxHQUM3Q00sR0FBQSxLQUFLd0IsR0FBUSxJQUFJMkMsRUFBVXpFLENBQUcsR0FDOUJNLEdBQUEsS0FBS3lCLEdBQVEsSUFBSTBDLEVBQVV6RSxDQUFHLEdBQzlCTSxHQUFBLEtBQUswQixHQUFRLEdBQ2IxQixHQUFBLEtBQUsyQixHQUFRLEdBQ2IzQixHQUFBLEtBQUs0QixHQUFRMUIsR0FBTSxPQUFPUixDQUFHLEdBQzdCTSxHQUFBLEtBQUttQixHQUFRLEdBQ2JuQixHQUFBLEtBQUtvQixHQUFrQixHQUNuQixPQUFPbUMsR0FBWSxZQUNuQnZELEdBQUEsS0FBS2dCLEdBQVd1QyxHQUVoQixPQUFPQyxHQUFpQixZQUN4QnhELEdBQUEsS0FBS2lCLEdBQWdCdUMsR0FDckJ4RCxHQUFBLEtBQUs2QixHQUFZLE1BR2pCN0IsR0FBQSxLQUFLaUIsR0FBZ0IsUUFDckJqQixHQUFBLEtBQUs2QixHQUFZLFNBRXJCN0IsR0FBQSxLQUFLaUMsR0FBYyxDQUFDLENBQUNuQyxFQUFBLEtBQUtrQixLQUMxQmhCLEdBQUEsS0FBS21DLEdBQW1CLENBQUMsQ0FBQ3JDLEVBQUEsS0FBS21CLEtBQy9CLEtBQUssZUFBaUIsQ0FBQyxDQUFDd0MsRUFDeEIsS0FBSyxZQUFjLENBQUMsQ0FBQ0MsRUFDckIsS0FBSyx5QkFBMkIsQ0FBQyxDQUFDSSxFQUNsQyxLQUFLLDJCQUE2QixDQUFDLENBQUNFLEVBQ3BDLEtBQUssdUJBQXlCLENBQUMsQ0FBQ0MsRUFDaEMsS0FBSyxpQkFBbUIsQ0FBQyxDQUFDQyxFQUV0QixLQUFLLGVBQWlCLEVBQUcsQ0FDekIsR0FBSXBFLEVBQUEsS0FBS2lCLE1BQWEsR0FDZCxDQUFDdkIsR0FBU00sRUFBQSxLQUFLaUIsR0FBUSxFQUN2QixNQUFNLElBQUksVUFBVSxpREFBaUQsRUFHN0UsR0FBSSxDQUFDdkIsR0FBUyxLQUFLLFlBQVksRUFDM0IsTUFBTSxJQUFJLFVBQVUsc0RBQXNELEVBRTlFNEUsR0FBQSxLQUFLL0QsR0FBQWdFLElBQUwsVUFDSCxDQVdELEdBVkEsS0FBSyxXQUFhLENBQUMsQ0FBQ2YsRUFDcEIsS0FBSyxtQkFBcUIsQ0FBQyxDQUFDUyxFQUM1QixLQUFLLGVBQWlCLENBQUMsQ0FBQ1gsRUFDeEIsS0FBSyxlQUFpQixDQUFDLENBQUNDLEVBQ3hCLEtBQUssY0FDRDdELEdBQVMwRCxDQUFhLEdBQUtBLElBQWtCLEVBQ3ZDQSxFQUNBLEVBQ1YsS0FBSyxhQUFlLENBQUMsQ0FBQ0MsRUFDdEIsS0FBSyxJQUFNRixHQUFPLEVBQ2QsS0FBSyxJQUFLLENBQ1YsR0FBSSxDQUFDekQsR0FBUyxLQUFLLEdBQUcsRUFDbEIsTUFBTSxJQUFJLFVBQVUsNkNBQTZDLEVBRXJFNEUsR0FBQSxLQUFLaEUsR0FBQWtFLElBQUwsVUFDSCxDQUVELEdBQUl4RSxFQUFBLEtBQUtnQixNQUFTLEdBQUssS0FBSyxNQUFRLEdBQUtoQixFQUFBLEtBQUtpQixNQUFhLEVBQ3ZELE1BQU0sSUFBSSxVQUFVLGtEQUFrRCxFQUUxRSxHQUFJLENBQUMsS0FBSyxjQUFnQixDQUFDakIsRUFBQSxLQUFLZ0IsS0FBUSxDQUFDaEIsRUFBQSxLQUFLaUIsSUFBVSxDQUNwRCxNQUFNL0IsRUFBTyxzQkFDVE8sR0FBV1AsQ0FBSSxJQUNmSixHQUFPLElBQUlJLENBQUksRUFHZkYsR0FGWSxnR0FFSyx3QkFBeUJFLEVBQU1tQixFQUFRLEVBRS9ELENBQ0osQ0F2S0QsT0FBTyxzQkFBc0JvRSxFQUFHLENBQzVCLE1BQU8sQ0FFSCxPQUFRekUsRUFBQXlFLEVBQUV4QyxJQUNWLEtBQU1qQyxFQUFBeUUsRUFBRXZDLElBQ1IsTUFBT2xDLEVBQUF5RSxFQUFFekMsSUFDVCxPQUFRaEMsRUFBQXlFLEVBQUVsRCxJQUNWLFFBQVN2QixFQUFBeUUsRUFBRWpELElBQ1gsUUFBU3hCLEVBQUF5RSxFQUFFaEQsSUFDWCxLQUFNekIsRUFBQXlFLEVBQUUvQyxJQUNSLEtBQU0xQixFQUFBeUUsRUFBRTlDLElBQ1IsSUFBSSxNQUFPLENBQ1AsT0FBTzNCLEVBQUF5RSxFQUFFN0MsR0FDWixFQUNELElBQUksTUFBTyxDQUNQLE9BQU81QixFQUFBeUUsRUFBRTVDLEdBQ1osRUFDRCxLQUFNN0IsRUFBQXlFLEVBQUUzQyxJQUVSLGtCQUFvQjVkLEdBQUMsT0FBSyxPQUFBb2dCLEdBQUFya0IsRUFBQXdrQixFQUFFNUQsR0FBQTZELElBQUYsS0FBQXprQixFQUFxQmlFLElBQy9DLGdCQUFpQixDQUFDeWdCLEVBQUdoZCxFQUFPM0YsRUFBU3lMLElBQU8sT0FBSyxPQUFBNlcsR0FBQXJrQixFQUFBd2tCLEVBQUU3RCxHQUFBZ0UsSUFBRixLQUFBM2tCLEVBQW1CMGtCLEVBQUdoZCxFQUFPM0YsRUFBU3lMLElBQ3ZGLFdBQWE5RixHQUFLLE9BQUssT0FBQTJjLEdBQUFya0IsRUFBQXdrQixFQUFFMUQsR0FBQThELElBQUYsS0FBQTVrQixFQUFjMEgsSUFDckMsUUFBVTNGLEdBQU8sT0FBSyxPQUFBc2lCLEdBQUFya0IsRUFBQXdrQixFQUFFakUsR0FBQXNFLElBQUYsS0FBQTdrQixFQUFXK0IsSUFDakMsU0FBV0EsR0FBTyxPQUFLLE9BQUFzaUIsR0FBQXJrQixFQUFBd2tCLEVBQUVoRSxHQUFBc0UsSUFBRixLQUFBOWtCLEVBQVkrQixJQUNuQyxRQUFVMkYsR0FBSyxPQUFLLE9BQUFxWSxFQUFBL2YsRUFBQXdrQixFQUFFaEMsSUFBRixLQUFBeGlCLEVBQVcwSCxHQUMzQyxDQUNLLENBS0QsSUFBSSxLQUFNLENBQ04sT0FBT3FZLEVBQUEsS0FBS2dCLEdBQ2YsQ0FJRCxJQUFJLFNBQVUsQ0FDVixPQUFPaEIsRUFBQSxLQUFLaUIsR0FDZixDQUlELElBQUksZ0JBQWlCLENBQ2pCLE9BQU9qQixFQUFBLEtBQUtzQixHQUNmLENBSUQsSUFBSSxNQUFPLENBQ1AsT0FBT3RCLEVBQUEsS0FBS3FCLEdBQ2YsQ0FJRCxJQUFJLGFBQWMsQ0FDZCxPQUFPckIsRUFBQSxLQUFLb0IsR0FDZixDQUlELElBQUksU0FBVSxDQUNWLE9BQU9wQixFQUFBLEtBQUtrQixHQUNmLENBSUQsSUFBSSxjQUFlLENBQ2YsT0FBT2xCLEVBQUEsS0FBS21CLEdBQ2YsQ0FzR0QsZ0JBQWdCeGUsRUFBSyxDQUNqQixPQUFPcWQsRUFBQSxLQUFLdUIsSUFBUSxJQUFJNWUsQ0FBRyxFQUFJLElBQVcsQ0FDN0MsQ0FxTEQsQ0FBQyxTQUFVLENBQ1AsVUFBV3dDLEtBQUttZixHQUFBLEtBQUs5RCxHQUFBc0UsSUFBTCxXQUNSOUUsRUFBQSxLQUFLeUIsSUFBU3RjLENBQUMsSUFBTSxRQUNyQjZhLEVBQUEsS0FBS3dCLElBQVNyYyxDQUFDLElBQU0sUUFDckIsQ0FBQ21mLEdBQUEsS0FBS3pELEdBQUE2RCxJQUFMLFVBQXdCMUUsRUFBQSxLQUFLeUIsSUFBU3RjLENBQUMsS0FDeEMsS0FBTSxDQUFDNmEsRUFBQSxLQUFLd0IsSUFBU3JjLENBQUMsRUFBRzZhLEVBQUEsS0FBS3lCLElBQVN0YyxDQUFDLENBQUMsRUFHcEQsQ0FPRCxDQUFDLFVBQVcsQ0FDUixVQUFXQSxLQUFLbWYsR0FBQSxLQUFLN0QsR0FBQXNFLElBQUwsV0FDUi9FLEVBQUEsS0FBS3lCLElBQVN0YyxDQUFDLElBQU0sUUFDckI2YSxFQUFBLEtBQUt3QixJQUFTcmMsQ0FBQyxJQUFNLFFBQ3JCLENBQUNtZixHQUFBLEtBQUt6RCxHQUFBNkQsSUFBTCxVQUF3QjFFLEVBQUEsS0FBS3lCLElBQVN0YyxDQUFDLEtBQ3hDLEtBQU0sQ0FBQzZhLEVBQUEsS0FBS3dCLElBQVNyYyxDQUFDLEVBQUc2YSxFQUFBLEtBQUt5QixJQUFTdGMsQ0FBQyxDQUFDLEVBR3BELENBS0QsQ0FBQyxNQUFPLENBQ0osVUFBV0EsS0FBS21mLEdBQUEsS0FBSzlELEdBQUFzRSxJQUFMLFdBQWlCLENBQzdCLE1BQU1ILEVBQUkzRSxFQUFBLEtBQUt3QixJQUFTcmMsQ0FBQyxFQUNyQndmLElBQU0sUUFDTixDQUFDTCxHQUFBLEtBQUt6RCxHQUFBNkQsSUFBTCxVQUF3QjFFLEVBQUEsS0FBS3lCLElBQVN0YyxDQUFDLEtBQ3hDLE1BQU13ZixFQUViLENBQ0osQ0FPRCxDQUFDLE9BQVEsQ0FDTCxVQUFXeGYsS0FBS21mLEdBQUEsS0FBSzdELEdBQUFzRSxJQUFMLFdBQWtCLENBQzlCLE1BQU1KLEVBQUkzRSxFQUFBLEtBQUt3QixJQUFTcmMsQ0FBQyxFQUNyQndmLElBQU0sUUFDTixDQUFDTCxHQUFBLEtBQUt6RCxHQUFBNkQsSUFBTCxVQUF3QjFFLEVBQUEsS0FBS3lCLElBQVN0YyxDQUFDLEtBQ3hDLE1BQU13ZixFQUViLENBQ0osQ0FLRCxDQUFDLFFBQVMsQ0FDTixVQUFXeGYsS0FBS21mLEdBQUEsS0FBSzlELEdBQUFzRSxJQUFMLFdBQ0Y5RSxFQUFBLEtBQUt5QixJQUFTdGMsQ0FBQyxJQUNmLFFBQ04sQ0FBQ21mLEdBQUEsS0FBS3pELEdBQUE2RCxJQUFMLFVBQXdCMUUsRUFBQSxLQUFLeUIsSUFBU3RjLENBQUMsS0FDeEMsTUFBTTZhLEVBQUEsS0FBS3lCLElBQVN0YyxDQUFDLEVBR2hDLENBT0QsQ0FBQyxTQUFVLENBQ1AsVUFBV0EsS0FBS21mLEdBQUEsS0FBSzdELEdBQUFzRSxJQUFMLFdBQ0YvRSxFQUFBLEtBQUt5QixJQUFTdGMsQ0FBQyxJQUNmLFFBQ04sQ0FBQ21mLEdBQUEsS0FBS3pELEdBQUE2RCxJQUFMLFVBQXdCMUUsRUFBQSxLQUFLeUIsSUFBU3RjLENBQUMsS0FDeEMsTUFBTTZhLEVBQUEsS0FBS3lCLElBQVN0YyxDQUFDLEVBR2hDLENBS0QsQ0FBQyxPQUFPLFFBQVEsR0FBSSxDQUNoQixPQUFPLEtBQUssU0FDZixDQVVELEtBQUtnYSxFQUFJNkYsRUFBYSxHQUFJLENBQ3RCLFVBQVc3ZixLQUFLbWYsR0FBQSxLQUFLOUQsR0FBQXNFLElBQUwsV0FBaUIsQ0FDN0IsTUFBTUcsRUFBSWpGLEVBQUEsS0FBS3lCLElBQVN0YyxDQUFDLEVBQ25CakUsRUFBUW9qQixHQUFBLEtBQUt6RCxHQUFBNkQsSUFBTCxVQUF3Qk8sR0FDaENBLEVBQUUscUJBQ0ZBLEVBQ04sR0FBSS9qQixJQUFVLFFBRVZpZSxFQUFHamUsRUFBTzhlLEVBQUEsS0FBS3dCLElBQVNyYyxDQUFDLEVBQUcsSUFBSSxFQUNoQyxPQUFPLEtBQUssSUFBSTZhLEVBQUEsS0FBS3dCLElBQVNyYyxDQUFDLEVBQUc2ZixDQUFVLENBRW5ELENBQ0osQ0FPRCxRQUFRN0YsRUFBSStGLEVBQVEsS0FBTSxDQUN0QixVQUFXL2YsS0FBS21mLEdBQUEsS0FBSzlELEdBQUFzRSxJQUFMLFdBQWlCLENBQzdCLE1BQU1HLEVBQUlqRixFQUFBLEtBQUt5QixJQUFTdGMsQ0FBQyxFQUNuQmpFLEVBQVFvakIsR0FBQSxLQUFLekQsR0FBQTZELElBQUwsVUFBd0JPLEdBQ2hDQSxFQUFFLHFCQUNGQSxFQUNGL2pCLElBQVUsUUFFZGllLEVBQUcsS0FBSytGLEVBQU9oa0IsRUFBTzhlLEVBQUEsS0FBS3dCLElBQVNyYyxDQUFDLEVBQUcsSUFBSSxDQUMvQyxDQUNKLENBS0QsU0FBU2dhLEVBQUkrRixFQUFRLEtBQU0sQ0FDdkIsVUFBVy9mLEtBQUttZixHQUFBLEtBQUs3RCxHQUFBc0UsSUFBTCxXQUFrQixDQUM5QixNQUFNRSxFQUFJakYsRUFBQSxLQUFLeUIsSUFBU3RjLENBQUMsRUFDbkJqRSxFQUFRb2pCLEdBQUEsS0FBS3pELEdBQUE2RCxJQUFMLFVBQXdCTyxHQUNoQ0EsRUFBRSxxQkFDRkEsRUFDRi9qQixJQUFVLFFBRWRpZSxFQUFHLEtBQUsrRixFQUFPaGtCLEVBQU84ZSxFQUFBLEtBQUt3QixJQUFTcmMsQ0FBQyxFQUFHLElBQUksQ0FDL0MsQ0FDSixDQUtELFlBQWEsQ0FDVCxJQUFJZ2dCLEVBQVUsR0FDZCxVQUFXaGdCLEtBQUttZixHQUFBLEtBQUs3RCxHQUFBc0UsSUFBTCxVQUFlLENBQUUsV0FBWSxFQUFJLEdBQ3pDL0UsRUFBQSxLQUFLeUMsSUFBTCxVQUFjdGQsS0FDZCxLQUFLLE9BQU82YSxFQUFBLEtBQUt3QixJQUFTcmMsQ0FBQyxDQUFDLEVBQzVCZ2dCLEVBQVUsSUFHbEIsT0FBT0EsQ0FDVixDQU9ELEtBQUt4aUIsRUFBSyxDQUNOLE1BQU13QyxFQUFJNmEsRUFBQSxLQUFLdUIsSUFBUSxJQUFJNWUsQ0FBRyxFQUM5QixHQUFJd0MsSUFBTSxPQUNOLE9BQ0osTUFBTThmLEVBQUlqRixFQUFBLEtBQUt5QixJQUFTdGMsQ0FBQyxFQUNuQmpFLEVBQVFvakIsR0FBQSxLQUFLekQsR0FBQTZELElBQUwsVUFBd0JPLEdBQ2hDQSxFQUFFLHFCQUNGQSxFQUNOLEdBQUkvakIsSUFBVSxPQUNWLE9BQ0osTUFBTWtrQixFQUFRLENBQUUsTUFBQWxrQixHQUNoQixHQUFJOGUsRUFBQSxLQUFLa0MsS0FBU2xDLEVBQUEsS0FBS2lDLElBQVMsQ0FDNUIsTUFBTWtCLEVBQU1uRCxFQUFBLEtBQUtrQyxJQUFNL2MsQ0FBQyxFQUNsQmtnQixFQUFRckYsRUFBQSxLQUFLaUMsSUFBUTljLENBQUMsRUFDNUIsR0FBSWdlLEdBQU9rQyxFQUFPLENBQ2QsTUFBTUMsRUFBU25DLEdBQU90RSxHQUFLLElBQUssRUFBR3dHLEdBQ25DRCxFQUFNLElBQU1FLEVBQ1pGLEVBQU0sTUFBUSxLQUFLLEtBQ3RCLENBQ0osQ0FDRCxPQUFJcEYsRUFBQSxLQUFLZ0MsTUFDTG9ELEVBQU0sS0FBT3BGLEVBQUEsS0FBS2dDLElBQU83YyxDQUFDLEdBRXZCaWdCLENBQ1YsQ0FLRCxNQUFPLENBQ0gsTUFBTWhULEVBQU0sQ0FBQSxFQUNaLFVBQVdqTixLQUFLbWYsR0FBQSxLQUFLOUQsR0FBQXNFLElBQUwsVUFBYyxDQUFFLFdBQVksRUFBSSxHQUFLLENBQ2pELE1BQU1uaUIsRUFBTXFkLEVBQUEsS0FBS3dCLElBQVNyYyxDQUFDLEVBQ3JCOGYsRUFBSWpGLEVBQUEsS0FBS3lCLElBQVN0YyxDQUFDLEVBQ25CakUsRUFBUW9qQixHQUFBLEtBQUt6RCxHQUFBNkQsSUFBTCxVQUF3Qk8sR0FDaENBLEVBQUUscUJBQ0ZBLEVBQ04sR0FBSS9qQixJQUFVLFFBQWF5QixJQUFRLE9BQy9CLFNBQ0osTUFBTXlpQixFQUFRLENBQUUsTUFBQWxrQixHQUNoQixHQUFJOGUsRUFBQSxLQUFLa0MsS0FBU2xDLEVBQUEsS0FBS2lDLElBQVMsQ0FDNUJtRCxFQUFNLElBQU1wRixFQUFBLEtBQUtrQyxJQUFNL2MsQ0FBQyxFQUd4QixNQUFNb2dCLEVBQU0xRyxHQUFLLElBQUcsRUFBS21CLEVBQUEsS0FBS2lDLElBQVE5YyxDQUFDLEVBQ3ZDaWdCLEVBQU0sTUFBUSxLQUFLLE1BQU0sS0FBSyxJQUFHLEVBQUtHLENBQUcsQ0FDNUMsQ0FDR3ZGLEVBQUEsS0FBS2dDLE1BQ0xvRCxFQUFNLEtBQU9wRixFQUFBLEtBQUtnQyxJQUFPN2MsQ0FBQyxHQUU5QmlOLEVBQUksUUFBUSxDQUFDelAsRUFBS3lpQixDQUFLLENBQUMsQ0FDM0IsQ0FDRCxPQUFPaFQsQ0FDVixDQU1ELEtBQUtBLEVBQUssQ0FDTixLQUFLLE1BQUssRUFDVixTQUFXLENBQUN6UCxFQUFLeWlCLENBQUssSUFBS2hULEVBQUssQ0FDNUIsR0FBSWdULEVBQU0sTUFBTyxDQU9iLE1BQU1HLEVBQU0sS0FBSyxJQUFHLEVBQUtILEVBQU0sTUFDL0JBLEVBQU0sTUFBUXZHLEdBQUssSUFBRyxFQUFLMEcsQ0FDOUIsQ0FDRCxLQUFLLElBQUk1aUIsRUFBS3lpQixFQUFNLE1BQU9BLENBQUssQ0FDbkMsQ0FDSixDQU9ELElBQUlULEVBQUdNLEVBQUdPLEVBQWEsQ0FBQSxFQUFJLGVBQ3ZCLEdBQUlQLElBQU0sT0FDTixZQUFLLE9BQU9OLENBQUMsRUFDTixLQUVYLEtBQU0sQ0FBRSxJQUFBeEIsRUFBTSxLQUFLLElBQUssTUFBQWtDLEVBQU8sZUFBQTFCLEVBQWlCLEtBQUssZUFBZ0IsZ0JBQUFULEVBQWtCLEtBQUssZ0JBQWlCLE9BQUF1QyxDQUFNLEVBQU1ELEVBQ3pILEdBQUksQ0FBRSxZQUFBNUIsRUFBYyxLQUFLLFdBQVcsRUFBSzRCLEVBQ3pDLE1BQU1oVCxFQUFPd04sRUFBQSxLQUFLK0MsSUFBTCxVQUFrQjRCLEVBQUdNLEVBQUdPLEVBQVcsTUFBUSxFQUFHdEMsR0FHM0QsR0FBSSxLQUFLLGNBQWdCMVEsRUFBTyxLQUFLLGFBQ2pDLE9BQUlpVCxJQUNBQSxFQUFPLElBQU0sT0FDYkEsRUFBTyxxQkFBdUIsSUFHbEMsS0FBSyxPQUFPZCxDQUFDLEVBQ04sS0FFWCxJQUFJaGQsRUFBUXFZLEVBQUEsS0FBS3FCLE1BQVUsRUFBSSxPQUFZckIsRUFBQSxLQUFLdUIsSUFBUSxJQUFJb0QsQ0FBQyxFQUM3RCxHQUFJaGQsSUFBVSxPQUVWQSxFQUFTcVksRUFBQSxLQUFLcUIsTUFBVSxFQUNsQnJCLEVBQUEsS0FBSzZCLElBQ0w3QixFQUFBLEtBQUs4QixJQUFNLFNBQVcsRUFDbEI5QixFQUFBLEtBQUs4QixJQUFNLElBQUssRUFDaEI5QixFQUFBLEtBQUtxQixNQUFVckIsRUFBQSxLQUFLZ0IsSUFDaEJzRCxHQUFBLEtBQUszRCxHQUFBK0UsSUFBTCxVQUFZLElBQ1oxRixFQUFBLEtBQUtxQixJQUNuQnJCLEVBQUEsS0FBS3dCLElBQVM3WixDQUFLLEVBQUlnZCxFQUN2QjNFLEVBQUEsS0FBS3lCLElBQVM5WixDQUFLLEVBQUlzZCxFQUN2QmpGLEVBQUEsS0FBS3VCLElBQVEsSUFBSW9ELEVBQUdoZCxDQUFLLEVBQ3pCcVksRUFBQSxLQUFLMEIsSUFBTTFCLEVBQUEsS0FBSzZCLEdBQUssRUFBSWxhLEVBQ3pCcVksRUFBQSxLQUFLMkIsSUFBTWhhLENBQUssRUFBSXFZLEVBQUEsS0FBSzZCLElBQ3pCM0IsR0FBQSxLQUFLMkIsR0FBUWxhLEdBQ2JnZSxHQUFBLEtBQUt0RSxJQUFMLElBQ0FyQixFQUFBLEtBQUs0QyxJQUFMLFVBQWtCamIsRUFBTzZLLEVBQU1pVCxHQUMzQkEsSUFDQUEsRUFBTyxJQUFNLE9BQ2pCN0IsRUFBYyxPQUViLENBRURVLEdBQUEsS0FBS3ZELEdBQUE4RCxJQUFMLFVBQWlCbGQsR0FDakIsTUFBTWllLEVBQVM1RixFQUFBLEtBQUt5QixJQUFTOVosQ0FBSyxFQUNsQyxHQUFJc2QsSUFBTVcsRUFBUSxDQUNkLEdBQUk1RixFQUFBLEtBQUtvQyxLQUFtQmtDLEdBQUEsS0FBS3pELEdBQUE2RCxJQUFMLFVBQXdCa0IsR0FBUyxDQUN6REEsRUFBTyxrQkFBa0IsTUFBTSxJQUFJLE1BQU0sVUFBVSxDQUFDLEVBQ3BELEtBQU0sQ0FBRSxxQkFBc0JwZCxDQUFHLEVBQUdvZCxFQUNoQ3BkLElBQU0sUUFBYSxDQUFDbWIsSUFDaEIzRCxFQUFBLEtBQUttQyxPQUNMbGlCLEVBQUErZixFQUFBLEtBQUtrQixNQUFMLE1BQUFqaEIsRUFBQSxVQUFnQnVJLEVBQUdtYyxFQUFHLFFBRXRCM0UsRUFBQSxLQUFLcUMsT0FDTGxNLEVBQUE2SixFQUFBLEtBQUsrQixNQUFMLE1BQUE1TCxFQUFnQixLQUFLLENBQUMzTixFQUFHbWMsRUFBRyxLQUFLLElBRzVDLE1BQ1NoQixJQUNGM0QsRUFBQSxLQUFLbUMsT0FDTGpNLEVBQUE4SixFQUFBLEtBQUtrQixNQUFMLE1BQUFoTCxFQUFBLFVBQWdCMFAsRUFBUWpCLEVBQUcsUUFFM0IzRSxFQUFBLEtBQUtxQyxPQUNMekgsRUFBQW9GLEVBQUEsS0FBSytCLE1BQUwsTUFBQW5ILEVBQWdCLEtBQUssQ0FBQ2dMLEVBQVFqQixFQUFHLEtBQUssS0FNOUMsR0FIQTNFLEVBQUEsS0FBSzBDLElBQUwsVUFBcUIvYSxHQUNyQnFZLEVBQUEsS0FBSzRDLElBQUwsVUFBa0JqYixFQUFPNkssRUFBTWlULEdBQy9CekYsRUFBQSxLQUFLeUIsSUFBUzlaLENBQUssRUFBSXNkLEVBQ25CUSxFQUFRLENBQ1JBLEVBQU8sSUFBTSxVQUNiLE1BQU1JLEVBQVdELEdBQVV0QixHQUFBLEtBQUt6RCxHQUFBNkQsSUFBTCxVQUF3QmtCLEdBQzdDQSxFQUFPLHFCQUNQQSxFQUNGQyxJQUFhLFNBQ2JKLEVBQU8sU0FBV0ksRUFDekIsQ0FDSixNQUNRSixJQUNMQSxFQUFPLElBQU0sU0FFcEIsQ0FXRCxHQVZJdEMsSUFBUSxHQUFLLENBQUNuRCxFQUFBLEtBQUtrQyxLQUNuQm9DLEdBQUEsS0FBS2hFLEdBQUFrRSxJQUFMLFdBRUF4RSxFQUFBLEtBQUtrQyxNQUNBMEIsR0FDRDVELEVBQUEsS0FBS3dDLElBQUwsVUFBaUI3YSxFQUFPd2IsRUFBS2tDLEdBRTdCSSxHQUNBekYsRUFBQSxLQUFLdUMsSUFBTCxVQUFnQmtELEVBQVE5ZCxJQUU1QixDQUFDZ2MsR0FBa0IzRCxFQUFBLEtBQUtxQyxLQUFvQnJDLEVBQUEsS0FBSytCLElBQVcsQ0FDNUQsTUFBTStELEVBQUs5RixFQUFBLEtBQUsrQixJQUNoQixJQUFJZ0UsRUFDSixLQUFRQSxFQUFPRCxHQUFBLFlBQUFBLEVBQUksVUFDZkUsRUFBQWhHLEVBQUEsS0FBS21CLE1BQUwsTUFBQTZFLEVBQUEsVUFBcUIsR0FBR0QsRUFFL0IsQ0FDRCxPQUFPLElBQ1YsQ0FLRCxLQUFNLE9BQ0YsR0FBSSxDQUNBLEtBQU8vRixFQUFBLEtBQUtxQixLQUFPLENBQ2YsTUFBTXRiLEVBQU1pYSxFQUFBLEtBQUt5QixJQUFTekIsRUFBQSxLQUFLNEIsR0FBSyxFQUVwQyxHQURBMEMsR0FBQSxLQUFLM0QsR0FBQStFLElBQUwsVUFBWSxJQUNScEIsR0FBQSxLQUFLekQsR0FBQTZELElBQUwsVUFBd0IzZSxJQUN4QixHQUFJQSxFQUFJLHFCQUNKLE9BQU9BLEVBQUksNkJBR1ZBLElBQVEsT0FDYixPQUFPQSxDQUVkLENBQ0osUUFDTyxDQUNKLEdBQUlpYSxFQUFBLEtBQUtxQyxLQUFvQnJDLEVBQUEsS0FBSytCLElBQVcsQ0FDekMsTUFBTStELEVBQUs5RixFQUFBLEtBQUsrQixJQUNoQixJQUFJZ0UsRUFDSixLQUFRQSxFQUFPRCxHQUFBLFlBQUFBLEVBQUksVUFDZjdsQixFQUFBK2YsRUFBQSxLQUFLbUIsTUFBTCxNQUFBbGhCLEVBQUEsVUFBcUIsR0FBRzhsQixFQUUvQixDQUNKLENBQ0osQ0EwQ0QsSUFBSXBCLEVBQUdzQixFQUFhLEdBQUksQ0FDcEIsS0FBTSxDQUFFLGVBQUExQyxFQUFpQixLQUFLLGVBQWdCLE9BQUFrQyxDQUFNLEVBQUtRLEVBQ25EdGUsRUFBUXFZLEVBQUEsS0FBS3VCLElBQVEsSUFBSW9ELENBQUMsRUFDaEMsR0FBSWhkLElBQVUsT0FBVyxDQUNyQixNQUFNc2QsRUFBSWpGLEVBQUEsS0FBS3lCLElBQVM5WixDQUFLLEVBQzdCLEdBQUkyYyxHQUFBLEtBQUt6RCxHQUFBNkQsSUFBTCxVQUF3Qk8sSUFDeEJBLEVBQUUsdUJBQXlCLE9BQzNCLE1BQU8sR0FFWCxHQUFLakYsRUFBQSxLQUFLeUMsSUFBTCxVQUFjOWEsR0FVVjhkLElBQ0xBLEVBQU8sSUFBTSxRQUNiekYsRUFBQSxLQUFLdUMsSUFBTCxVQUFnQmtELEVBQVE5ZCxRQVh4QixRQUFJNGIsR0FDQXZELEVBQUEsS0FBS3NDLElBQUwsVUFBb0IzYSxHQUVwQjhkLElBQ0FBLEVBQU8sSUFBTSxNQUNiekYsRUFBQSxLQUFLdUMsSUFBTCxVQUFnQmtELEVBQVE5ZCxJQUVyQixFQU1kLE1BQ1E4ZCxJQUNMQSxFQUFPLElBQU0sUUFFakIsTUFBTyxFQUNWLENBUUQsS0FBS2QsRUFBR3VCLEVBQWMsR0FBSSxDQUN0QixLQUFNLENBQUUsV0FBQTFDLEVBQWEsS0FBSyxVQUFVLEVBQUswQyxFQUNuQ3ZlLEVBQVFxWSxFQUFBLEtBQUt1QixJQUFRLElBQUlvRCxDQUFDLEVBQ2hDLEdBQUloZCxJQUFVLFFBQ1QsQ0FBQzZiLEdBQWN4RCxFQUFBLEtBQUt5QyxJQUFMLFVBQWM5YSxHQUM5QixPQUVKLE1BQU1zZCxFQUFJakYsRUFBQSxLQUFLeUIsSUFBUzlaLENBQUssRUFFN0IsT0FBTzJjLEdBQUEsS0FBS3pELEdBQUE2RCxJQUFMLFVBQXdCTyxHQUFLQSxFQUFFLHFCQUF1QkEsQ0FDaEUsQ0F5SUQsTUFBTSxNQUFNTixFQUFHd0IsRUFBZSxHQUFJLENBQzlCLEtBQU0sQ0FFTixXQUFBM0MsRUFBYSxLQUFLLFdBQVksZUFBQUYsRUFBaUIsS0FBSyxlQUFnQixtQkFBQVcsRUFBcUIsS0FBSyxtQkFFOUYsSUFBQWQsRUFBTSxLQUFLLElBQUssZUFBQVEsRUFBaUIsS0FBSyxlQUFnQixLQUFBblIsRUFBTyxFQUFHLGdCQUFBMFEsRUFBa0IsS0FBSyxnQkFBaUIsWUFBQVUsRUFBYyxLQUFLLFlBRTNILHlCQUFBSSxFQUEyQixLQUFLLHlCQUEwQiwyQkFBQUUsRUFBNkIsS0FBSywyQkFBNEIsaUJBQUFFLEVBQW1CLEtBQUssaUJBQWtCLHVCQUFBRCxFQUF5QixLQUFLLHVCQUF3QixRQUFBMVcsRUFBUyxhQUFBMlksRUFBZSxHQUFPLE9BQUFYLEVBQVEsT0FBQVksQ0FBUyxFQUFHRixFQUMzUSxHQUFJLENBQUNuRyxFQUFBLEtBQUtvQyxJQUNOLE9BQUlxRCxJQUNBQSxFQUFPLE1BQVEsT0FDWixLQUFLLElBQUlkLEVBQUcsQ0FDZixXQUFBbkIsRUFDQSxlQUFBRixFQUNBLG1CQUFBVyxFQUNBLE9BQUF3QixDQUNoQixDQUFhLEVBRUwsTUFBTXpqQixFQUFVLENBQ1osV0FBQXdoQixFQUNBLGVBQUFGLEVBQ0EsbUJBQUFXLEVBQ0EsSUFBQWQsRUFDQSxlQUFBUSxFQUNBLEtBQUFuUixFQUNBLGdCQUFBMFEsRUFDQSxZQUFBVSxFQUNBLHlCQUFBSSxFQUNBLDJCQUFBRSxFQUNBLHVCQUFBQyxFQUNBLGlCQUFBQyxFQUNBLE9BQUFxQixFQUNBLE9BQUFZLENBQ1osRUFDUSxJQUFJMWUsRUFBUXFZLEVBQUEsS0FBS3VCLElBQVEsSUFBSW9ELENBQUMsRUFDOUIsR0FBSWhkLElBQVUsT0FBVyxDQUNqQjhkLElBQ0FBLEVBQU8sTUFBUSxRQUNuQixNQUFNdmhCLEVBQUlvZ0IsR0FBQSxLQUFLMUQsR0FBQWdFLElBQUwsVUFBc0JELEVBQUdoZCxFQUFPM0YsRUFBU3lMLEdBQ25ELE9BQVF2SixFQUFFLFdBQWFBLENBQzFCLEtBQ0ksQ0FFRCxNQUFNK2dCLEVBQUlqRixFQUFBLEtBQUt5QixJQUFTOVosQ0FBSyxFQUM3QixHQUFJMmMsR0FBQSxLQUFLekQsR0FBQTZELElBQUwsVUFBd0JPLEdBQUksQ0FDNUIsTUFBTXFCLEVBQVE5QyxHQUFjeUIsRUFBRSx1QkFBeUIsT0FDdkQsT0FBSVEsSUFDQUEsRUFBTyxNQUFRLFdBQ1hhLElBQ0FiLEVBQU8sY0FBZ0IsS0FFeEJhLEVBQVFyQixFQUFFLHFCQUF3QkEsRUFBRSxXQUFhQSxDQUMzRCxDQUdELE1BQU1zQixFQUFVdkcsRUFBQSxLQUFLeUMsSUFBTCxVQUFjOWEsR0FDOUIsR0FBSSxDQUFDeWUsR0FBZ0IsQ0FBQ0csRUFDbEIsT0FBSWQsSUFDQUEsRUFBTyxNQUFRLE9BQ25CbkIsR0FBQSxLQUFLdkQsR0FBQThELElBQUwsVUFBaUJsZCxHQUNiMmIsR0FDQXRELEVBQUEsS0FBS3NDLElBQUwsVUFBb0IzYSxHQUVwQjhkLEdBQ0F6RixFQUFBLEtBQUt1QyxJQUFMLFVBQWdCa0QsRUFBUTlkLEdBQ3JCc2QsRUFJWCxNQUFNL2dCLEVBQUlvZ0IsR0FBQSxLQUFLMUQsR0FBQWdFLElBQUwsVUFBc0JELEVBQUdoZCxFQUFPM0YsRUFBU3lMLEdBRTdDK1ksRUFEV3RpQixFQUFFLHVCQUF5QixRQUNmc2YsRUFDN0IsT0FBSWlDLElBQ0FBLEVBQU8sTUFBUWMsRUFBVSxRQUFVLFVBQy9CQyxHQUFZRCxJQUNaZCxFQUFPLGNBQWdCLEtBRXhCZSxFQUFXdGlCLEVBQUUscUJBQXdCQSxFQUFFLFdBQWFBLENBQzlELENBQ0osQ0FPRCxJQUFJeWdCLEVBQUdLLEVBQWEsR0FBSSxDQUNwQixLQUFNLENBQUUsV0FBQXhCLEVBQWEsS0FBSyxXQUFZLGVBQUFGLEVBQWlCLEtBQUssZUFBZ0IsbUJBQUFXLEVBQXFCLEtBQUssbUJBQW9CLE9BQUF3QixDQUFNLEVBQU1ULEVBQ2hJcmQsRUFBUXFZLEVBQUEsS0FBS3VCLElBQVEsSUFBSW9ELENBQUMsRUFDaEMsR0FBSWhkLElBQVUsT0FBVyxDQUNyQixNQUFNekcsRUFBUThlLEVBQUEsS0FBS3lCLElBQVM5WixDQUFLLEVBQzNCOGUsRUFBV25DLEdBQUEsS0FBS3pELEdBQUE2RCxJQUFMLFVBQXdCeGpCLEdBR3pDLE9BRkl1a0IsR0FDQXpGLEVBQUEsS0FBS3VDLElBQUwsVUFBZ0JrRCxFQUFROWQsR0FDeEJxWSxFQUFBLEtBQUt5QyxJQUFMLFVBQWM5YSxJQUNWOGQsSUFDQUEsRUFBTyxJQUFNLFNBRVpnQixHQVNHaEIsR0FDQWpDLEdBQ0F0aUIsRUFBTSx1QkFBeUIsU0FDL0J1a0IsRUFBTyxjQUFnQixJQUVwQmpDLEVBQWF0aUIsRUFBTSxxQkFBdUIsU0FiNUMraUIsR0FDRCxLQUFLLE9BQU9VLENBQUMsRUFFYmMsR0FBVWpDLElBQ1ZpQyxFQUFPLGNBQWdCLElBQ3BCakMsRUFBYXRpQixFQUFRLFVBWTVCdWtCLElBQ0FBLEVBQU8sSUFBTSxPQU1iZ0IsRUFDT3ZsQixFQUFNLHNCQUVqQm9qQixHQUFBLEtBQUt2RCxHQUFBOEQsSUFBTCxVQUFpQmxkLEdBQ2IyYixHQUNBdEQsRUFBQSxLQUFLc0MsSUFBTCxVQUFvQjNhLEdBRWpCekcsR0FFZCxNQUNRdWtCLElBQ0xBLEVBQU8sSUFBTSxPQUVwQixDQTZCRCxPQUFPZCxFQUFHLGFBQ04sSUFBSVEsRUFBVSxHQUNkLEdBQUluRixFQUFBLEtBQUtxQixNQUFVLEVBQUcsQ0FDbEIsTUFBTTFaLEVBQVFxWSxFQUFBLEtBQUt1QixJQUFRLElBQUlvRCxDQUFDLEVBQ2hDLEdBQUloZCxJQUFVLE9BRVYsR0FEQXdkLEVBQVUsR0FDTm5GLEVBQUEsS0FBS3FCLE1BQVUsRUFDZixLQUFLLE1BQUssTUFFVCxDQUNEckIsRUFBQSxLQUFLMEMsSUFBTCxVQUFxQi9hLEdBQ3JCLE1BQU1zZCxFQUFJakYsRUFBQSxLQUFLeUIsSUFBUzlaLENBQUssRUFlN0IsR0FkSTJjLEdBQUEsS0FBS3pELEdBQUE2RCxJQUFMLFVBQXdCTyxHQUN4QkEsRUFBRSxrQkFBa0IsTUFBTSxJQUFJLE1BQU0sU0FBUyxDQUFDLEdBRXpDakYsRUFBQSxLQUFLbUMsS0FBZW5DLEVBQUEsS0FBS3FDLE9BQzFCckMsRUFBQSxLQUFLbUMsT0FDTGxpQixFQUFBK2YsRUFBQSxLQUFLa0IsTUFBTCxNQUFBamhCLEVBQUEsVUFBZ0JnbEIsRUFBR04sRUFBRyxXQUV0QjNFLEVBQUEsS0FBS3FDLE9BQ0xsTSxFQUFBNkosRUFBQSxLQUFLK0IsTUFBTCxNQUFBNUwsRUFBZ0IsS0FBSyxDQUFDOE8sRUFBR04sRUFBRyxRQUFRLEtBRzVDM0UsRUFBQSxLQUFLdUIsSUFBUSxPQUFPb0QsQ0FBQyxFQUNyQjNFLEVBQUEsS0FBS3dCLElBQVM3WixDQUFLLEVBQUksT0FDdkJxWSxFQUFBLEtBQUt5QixJQUFTOVosQ0FBSyxFQUFJLE9BQ25CQSxJQUFVcVksRUFBQSxLQUFLNkIsSUFDZjNCLEdBQUEsS0FBSzJCLEdBQVE3QixFQUFBLEtBQUsyQixJQUFNaGEsQ0FBSyxXQUV4QkEsSUFBVXFZLEVBQUEsS0FBSzRCLElBQ3BCMUIsR0FBQSxLQUFLMEIsR0FBUTVCLEVBQUEsS0FBSzBCLElBQU0vWixDQUFLLE9BRTVCLENBQ0QsTUFBTStlLEVBQUsxRyxFQUFBLEtBQUsyQixJQUFNaGEsQ0FBSyxFQUMzQnFZLEVBQUEsS0FBSzBCLElBQU1nRixDQUFFLEVBQUkxRyxFQUFBLEtBQUswQixJQUFNL1osQ0FBSyxFQUNqQyxNQUFNZ2YsRUFBSzNHLEVBQUEsS0FBSzBCLElBQU0vWixDQUFLLEVBQzNCcVksRUFBQSxLQUFLMkIsSUFBTWdGLENBQUUsRUFBSTNHLEVBQUEsS0FBSzJCLElBQU1oYSxDQUFLLENBQ3BDLENBQ0RnZSxHQUFBLEtBQUt0RSxJQUFMLElBQ0FyQixFQUFBLEtBQUs4QixJQUFNLEtBQUtuYSxDQUFLLENBQ3hCLENBRVIsQ0FDRCxHQUFJcVksRUFBQSxLQUFLcUMsT0FBb0JuTSxFQUFBOEosRUFBQSxLQUFLK0IsTUFBTCxNQUFBN0wsRUFBZ0IsUUFBUSxDQUNqRCxNQUFNNFAsRUFBSzlGLEVBQUEsS0FBSytCLElBQ2hCLElBQUlnRSxFQUNKLEtBQVFBLEVBQU9ELEdBQUEsWUFBQUEsRUFBSSxVQUNmbEwsRUFBQW9GLEVBQUEsS0FBS21CLE1BQUwsTUFBQXZHLEVBQUEsVUFBcUIsR0FBR21MLEVBRS9CLENBQ0QsT0FBT1osQ0FDVixDQUlELE9BQVEsV0FDSixVQUFXeGQsS0FBUzJjLEdBQUEsS0FBSzdELEdBQUFzRSxJQUFMLFVBQWUsQ0FBRSxXQUFZLEVBQUksR0FBSyxDQUN0RCxNQUFNRSxFQUFJakYsRUFBQSxLQUFLeUIsSUFBUzlaLENBQUssRUFDN0IsR0FBSTJjLEdBQUEsS0FBS3pELEdBQUE2RCxJQUFMLFVBQXdCTyxHQUN4QkEsRUFBRSxrQkFBa0IsTUFBTSxJQUFJLE1BQU0sU0FBUyxDQUFDLE1BRTdDLENBQ0QsTUFBTU4sRUFBSTNFLEVBQUEsS0FBS3dCLElBQVM3WixDQUFLLEVBQ3pCcVksRUFBQSxLQUFLbUMsT0FDTGxpQixFQUFBK2YsRUFBQSxLQUFLa0IsTUFBTCxNQUFBamhCLEVBQUEsVUFBZ0JnbEIsRUFBR04sRUFBRyxXQUV0QjNFLEVBQUEsS0FBS3FDLE9BQ0xsTSxFQUFBNkosRUFBQSxLQUFLK0IsTUFBTCxNQUFBNUwsRUFBZ0IsS0FBSyxDQUFDOE8sRUFBR04sRUFBRyxRQUFRLEdBRTNDLENBQ0osQ0FnQkQsR0FmQTNFLEVBQUEsS0FBS3VCLElBQVEsUUFDYnZCLEVBQUEsS0FBS3lCLElBQVMsS0FBSyxNQUFTLEVBQzVCekIsRUFBQSxLQUFLd0IsSUFBUyxLQUFLLE1BQVMsRUFDeEJ4QixFQUFBLEtBQUtrQyxLQUFTbEMsRUFBQSxLQUFLaUMsTUFDbkJqQyxFQUFBLEtBQUtrQyxJQUFNLEtBQUssQ0FBQyxFQUNqQmxDLEVBQUEsS0FBS2lDLElBQVEsS0FBSyxDQUFDLEdBRW5CakMsRUFBQSxLQUFLZ0MsS0FDTGhDLEVBQUEsS0FBS2dDLElBQU8sS0FBSyxDQUFDLEVBRXRCOUIsR0FBQSxLQUFLMEIsR0FBUSxHQUNiMUIsR0FBQSxLQUFLMkIsR0FBUSxHQUNiN0IsRUFBQSxLQUFLOEIsSUFBTSxPQUFTLEVBQ3BCNUIsR0FBQSxLQUFLb0IsR0FBa0IsR0FDdkJwQixHQUFBLEtBQUttQixHQUFRLEdBQ1RyQixFQUFBLEtBQUtxQyxLQUFvQnJDLEVBQUEsS0FBSytCLElBQVcsQ0FDekMsTUFBTStELEVBQUs5RixFQUFBLEtBQUsrQixJQUNoQixJQUFJZ0UsRUFDSixLQUFRQSxFQUFPRCxHQUFBLFlBQUFBLEVBQUksVUFDZjVQLEVBQUE4SixFQUFBLEtBQUttQixNQUFMLE1BQUFqTCxFQUFBLFVBQXFCLEdBQUc2UCxFQUUvQixDQUNKLENBQ0wsRUE1dkJLNVAsR0FBQSxPQUFPLFlBemhCUjZLLEdBQUEsWUFDQUMsR0FBQSxZQUNBQyxHQUFBLFlBQ0FDLEdBQUEsWUFDQUMsR0FBQSxZQThEQUMsR0FBQSxZQUNBQyxHQUFBLFlBQ0FDLEdBQUEsWUFDQUMsR0FBQSxZQUNBQyxHQUFBLFlBQ0FDLEdBQUEsWUFDQUMsR0FBQSxZQUNBQyxHQUFBLFlBQ0FDLEdBQUEsWUFDQUMsR0FBQSxZQUNBQyxHQUFBLFlBQ0FDLEdBQUEsWUFDQUMsR0FBQSxZQUNBQyxHQUFBLFlBQ0FDLEdBQUEsWUFDQUMsR0FBQSxZQUNBQyxHQUFBLFlBd0xBL0IsR0FBQSxZQUFBa0UsR0FBc0IsVUFBRyxDQUNyQixNQUFNb0MsRUFBTyxJQUFJL0csR0FBVUcsRUFBQSxLQUFLZ0IsR0FBSSxFQUM5QjZGLEVBQVMsSUFBSWhILEdBQVVHLEVBQUEsS0FBS2dCLEdBQUksRUFDdENkLEdBQUEsS0FBS2dDLEdBQVEwRSxHQUNiMUcsR0FBQSxLQUFLK0IsR0FBVTRFLEdBQ2YzRyxHQUFBLEtBQUtzQyxHQUFjLENBQUM3YSxFQUFPd2IsRUFBS2tDLEVBQVF4RyxHQUFLLFFBQVUsQ0FHbkQsR0FGQWdJLEVBQU9sZixDQUFLLEVBQUl3YixJQUFRLEVBQUlrQyxFQUFRLEVBQ3BDdUIsRUFBS2pmLENBQUssRUFBSXdiLEVBQ1ZBLElBQVEsR0FBSyxLQUFLLGFBQWMsQ0FDaEMsTUFBTTFiLEVBQUksV0FBVyxJQUFNLENBQ25CdVksRUFBQSxLQUFLeUMsSUFBTCxVQUFjOWEsSUFDZCxLQUFLLE9BQU9xWSxFQUFBLEtBQUt3QixJQUFTN1osQ0FBSyxDQUFDLENBRXhELEVBQW1Cd2IsRUFBTSxDQUFDLEVBR04xYixFQUFFLE9BQ0ZBLEVBQUUsTUFBSyxDQUdkLENBQ2IsR0FDUXlZLEdBQUEsS0FBS29DLEdBQWlCM2EsR0FBUyxDQUMzQmtmLEVBQU9sZixDQUFLLEVBQUlpZixFQUFLamYsQ0FBSyxJQUFNLEVBQUlrWCxHQUFLLElBQUssRUFBRyxDQUM3RCxHQUNRcUIsR0FBQSxLQUFLcUMsR0FBYSxDQUFDa0QsRUFBUTlkLElBQVUsQ0FDakMsR0FBSWlmLEVBQUtqZixDQUFLLEVBQUcsQ0FDYixNQUFNd2IsRUFBTXlELEVBQUtqZixDQUFLLEVBQ2hCMGQsRUFBUXdCLEVBQU9sZixDQUFLLEVBRTFCLEdBQUksQ0FBQ3diLEdBQU8sQ0FBQ2tDLEVBQ1QsT0FDSkksRUFBTyxJQUFNdEMsRUFDYnNDLEVBQU8sTUFBUUosRUFDZkksRUFBTyxJQUFNcUIsR0FBYUMsSUFDMUIsTUFBTXhCLEVBQU1FLEVBQU8sSUFBTUosRUFDekJJLEVBQU8sYUFBZXRDLEVBQU1vQyxDQUMvQixDQUNiLEdBR1EsSUFBSXVCLEVBQVksRUFDaEIsTUFBTUMsRUFBUyxJQUFNLENBQ2pCLE1BQU14ZSxFQUFJc1csR0FBSyxNQUNmLEdBQUksS0FBSyxjQUFnQixFQUFHLENBQ3hCaUksRUFBWXZlLEVBQ1osTUFBTWQsRUFBSSxXQUFXLElBQU9xZixFQUFZLEVBQUksS0FBSyxhQUFhLEVBRzFEcmYsRUFBRSxPQUNGQSxFQUFFLE1BQUssQ0FHZCxDQUNELE9BQU9jLENBQ25CLEVBQ1EsS0FBSyxnQkFBa0I1RixHQUFPLENBQzFCLE1BQU1nRixFQUFRcVksRUFBQSxLQUFLdUIsSUFBUSxJQUFJNWUsQ0FBRyxFQUNsQyxHQUFJZ0YsSUFBVSxPQUNWLE1BQU8sR0FFWCxNQUFNd2IsRUFBTXlELEVBQUtqZixDQUFLLEVBQ2hCMGQsRUFBUXdCLEVBQU9sZixDQUFLLEVBQzFCLEdBQUksQ0FBQ3diLEdBQU8sQ0FBQ2tDLEVBQ1QsTUFBTyxLQUVYLE1BQU1FLEdBQU91QixHQUFhQyxFQUFNLEdBQU0xQixFQUN0QyxPQUFPbEMsRUFBTW9DLENBQ3pCLEVBQ1FyRixHQUFBLEtBQUt1QyxHQUFXOWEsR0FBUyxDQUNyQixNQUFNLEVBQUlrZixFQUFPbGYsQ0FBSyxFQUNoQkYsRUFBSW1mLEVBQUtqZixDQUFLLEVBQ3BCLE1BQU8sQ0FBQyxDQUFDRixHQUFLLENBQUMsQ0FBQyxJQUFNcWYsR0FBYUMsRUFBTSxHQUFNLEVBQUl0ZixDQUMvRCxFQUNLLEVBRUQ2YSxHQUFBLFlBQ0FDLEdBQUEsWUFDQUMsR0FBQSxZQUVBQyxHQUFBLFlBQ0FsQyxHQUFBLFlBQUFnRSxHQUF1QixVQUFHLENBQ3RCLE1BQU15QyxFQUFRLElBQUluSCxHQUFVRyxFQUFBLEtBQUtnQixHQUFJLEVBQ3JDZCxHQUFBLEtBQUtvQixHQUFrQixHQUN2QnBCLEdBQUEsS0FBSzhCLEdBQVNnRixHQUNkOUcsR0FBQSxLQUFLd0MsR0FBa0IvYSxHQUFTLENBQzVCdVksR0FBQSxLQUFLb0IsR0FBTHRCLEVBQUEsS0FBS3NCLElBQW1CMEYsRUFBTXJmLENBQUssR0FDbkNxZixFQUFNcmYsQ0FBSyxFQUFJLENBQzNCLEdBQ1F1WSxHQUFBLEtBQUs2QyxHQUFlLENBQUM0QixFQUFHTSxFQUFHelMsRUFBTTBRLElBQW9CLENBR2pELEdBQUlvQixHQUFBLEtBQUt6RCxHQUFBNkQsSUFBTCxVQUF3Qk8sR0FDeEIsTUFBTyxHQUVYLEdBQUksQ0FBQ3ZGLEdBQVNsTixDQUFJLEVBQ2QsR0FBSTBRLEVBQWlCLENBQ2pCLEdBQUksT0FBT0EsR0FBb0IsV0FDM0IsTUFBTSxJQUFJLFVBQVUsb0NBQW9DLEVBRzVELEdBREExUSxFQUFPMFEsRUFBZ0IrQixFQUFHTixDQUFDLEVBQ3ZCLENBQUNqRixHQUFTbE4sQ0FBSSxFQUNkLE1BQU0sSUFBSSxVQUFVLDBEQUEwRCxDQUVyRixLQUVHLE9BQU0sSUFBSSxVQUFVLDJIQUVNLEVBR2xDLE9BQU9BLENBQ25CLEdBQ1EwTixHQUFBLEtBQUswQyxHQUFlLENBQUNqYixFQUFPNkssRUFBTWlULElBQVcsQ0FFekMsR0FEQXVCLEVBQU1yZixDQUFLLEVBQUk2SyxFQUNYd04sRUFBQSxLQUFLaUIsSUFBVSxDQUNmLE1BQU00QyxFQUFVN0QsRUFBQSxLQUFLaUIsSUFBVytGLEVBQU1yZixDQUFLLEVBQzNDLEtBQU9xWSxFQUFBLEtBQUtzQixJQUFrQnVDLEdBQzFCUyxHQUFBLEtBQUszRCxHQUFBK0UsSUFBTCxVQUFZLEdBRW5CLENBQ0R4RixHQUFBLEtBQUtvQixHQUFMdEIsRUFBQSxLQUFLc0IsSUFBbUIwRixFQUFNcmYsQ0FBSyxHQUMvQjhkLElBQ0FBLEVBQU8sVUFBWWpULEVBQ25CaVQsRUFBTyxvQkFBc0J6RixFQUFBLEtBQUtzQixJQUVsRCxFQUNLLEVBQ0RvQixHQUFBLFlBQ0FFLEdBQUEsWUFDQUcsR0FBQSxZQU1DdkMsR0FBQSxZQUFBc0UsR0FBUSxVQUFDLENBQUUsV0FBQXRCLEVBQWEsS0FBSyxVQUFVLEVBQUssQ0FBQSxFQUFJLENBQzdDLEdBQUl4RCxFQUFBLEtBQUtxQixJQUNMLFFBQVNsYyxFQUFJNmEsRUFBQSxLQUFLNkIsSUFDVixHQUFDeUMsR0FBQSxLQUFLNUQsR0FBQXVHLElBQUwsVUFBbUI5aEIsTUFHcEJxZSxHQUFjLENBQUN4RCxFQUFBLEtBQUt5QyxJQUFMLFVBQWN0ZCxNQUM3QixNQUFNQSxHQUVOQSxJQUFNNmEsRUFBQSxLQUFLNEIsT0FJWHpjLEVBQUk2YSxFQUFBLEtBQUsyQixJQUFNeGMsQ0FBQyxDQUkvQixFQUNBc2IsR0FBQSxZQUFBc0UsR0FBUyxVQUFDLENBQUUsV0FBQXZCLEVBQWEsS0FBSyxVQUFVLEVBQUssQ0FBQSxFQUFJLENBQzlDLEdBQUl4RCxFQUFBLEtBQUtxQixJQUNMLFFBQVNsYyxFQUFJNmEsRUFBQSxLQUFLNEIsSUFDVixHQUFDMEMsR0FBQSxLQUFLNUQsR0FBQXVHLElBQUwsVUFBbUI5aEIsTUFHcEJxZSxHQUFjLENBQUN4RCxFQUFBLEtBQUt5QyxJQUFMLFVBQWN0ZCxNQUM3QixNQUFNQSxHQUVOQSxJQUFNNmEsRUFBQSxLQUFLNkIsT0FJWDFjLEVBQUk2YSxFQUFBLEtBQUswQixJQUFNdmMsQ0FBQyxDQUkvQixFQUNEdWIsR0FBQSxZQUFBdUcsR0FBYSxTQUFDdGYsRUFBTyxDQUNqQixPQUFRQSxJQUFVLFFBQ2RxWSxFQUFBLEtBQUt1QixJQUFRLElBQUl2QixFQUFBLEtBQUt3QixJQUFTN1osQ0FBSyxDQUFDLElBQU1BLENBQ2xELEVBeVhEZ1osR0FBQSxZQUFBK0UsR0FBTSxTQUFDd0IsRUFBTSxTQUNULE1BQU1DLEVBQU9uSCxFQUFBLEtBQUs0QixJQUNaK0MsRUFBSTNFLEVBQUEsS0FBS3dCLElBQVMyRixDQUFJLEVBQ3RCbEMsRUFBSWpGLEVBQUEsS0FBS3lCLElBQVMwRixDQUFJLEVBQzVCLE9BQUluSCxFQUFBLEtBQUtvQyxLQUFtQmtDLEdBQUEsS0FBS3pELEdBQUE2RCxJQUFMLFVBQXdCTyxHQUNoREEsRUFBRSxrQkFBa0IsTUFBTSxJQUFJLE1BQU0sU0FBUyxDQUFDLEdBRXpDakYsRUFBQSxLQUFLbUMsS0FBZW5DLEVBQUEsS0FBS3FDLE9BQzFCckMsRUFBQSxLQUFLbUMsT0FDTGxpQixFQUFBK2YsRUFBQSxLQUFLa0IsTUFBTCxNQUFBamhCLEVBQUEsVUFBZ0JnbEIsRUFBR04sRUFBRyxVQUV0QjNFLEVBQUEsS0FBS3FDLE9BQ0xsTSxFQUFBNkosRUFBQSxLQUFLK0IsTUFBTCxNQUFBNUwsRUFBZ0IsS0FBSyxDQUFDOE8sRUFBR04sRUFBRyxPQUFPLEtBRzNDM0UsRUFBQSxLQUFLMEMsSUFBTCxVQUFxQnlFLEdBRWpCRCxJQUNBbEgsRUFBQSxLQUFLd0IsSUFBUzJGLENBQUksRUFBSSxPQUN0Qm5ILEVBQUEsS0FBS3lCLElBQVMwRixDQUFJLEVBQUksT0FDdEJuSCxFQUFBLEtBQUs4QixJQUFNLEtBQUtxRixDQUFJLEdBRXBCbkgsRUFBQSxLQUFLcUIsTUFBVSxHQUNmbkIsR0FBQSxLQUFLMEIsR0FBUTFCLEdBQUEsS0FBSzJCLEdBQVEsSUFDMUI3QixFQUFBLEtBQUs4QixJQUFNLE9BQVMsR0FHcEI1QixHQUFBLEtBQUswQixHQUFRNUIsRUFBQSxLQUFLMEIsSUFBTXlGLENBQUksR0FFaENuSCxFQUFBLEtBQUt1QixJQUFRLE9BQU9vRCxDQUFDLEVBQ3JCZ0IsR0FBQSxLQUFLdEUsSUFBTCxJQUNPOEYsQ0FDVixFQXdERHZHLEdBQUEsWUFBQWdFLEdBQWdCLFNBQUNELEVBQUdoZCxFQUFPM0YsRUFBU3lMLEVBQVMsQ0FDekMsTUFBTXdYLEVBQUl0ZCxJQUFVLE9BQVksT0FBWXFZLEVBQUEsS0FBS3lCLElBQVM5WixDQUFLLEVBQy9ELEdBQUkyYyxHQUFBLEtBQUt6RCxHQUFBNkQsSUFBTCxVQUF3Qk8sR0FDeEIsT0FBT0EsRUFFWCxNQUFNbUMsRUFBSyxJQUFJaEksR0FDVCxDQUFFLE9BQUFpSCxDQUFRLEVBQUdya0IsRUFFbkJxa0IsR0FBQSxNQUFBQSxFQUFRLGlCQUFpQixRQUFTLElBQU1lLEVBQUcsTUFBTWYsRUFBTyxNQUFNLEVBQUcsQ0FDN0QsT0FBUWUsRUFBRyxNQUN2QixHQUNRLE1BQU1DLEVBQVksQ0FDZCxPQUFRRCxFQUFHLE9BQ1gsUUFBQXBsQixFQUNBLFFBQUF5TCxDQUNaLEVBQ2M2WixFQUFLLENBQUNyQyxFQUFHc0MsRUFBYyxLQUFVLENBQ25DLEtBQU0sQ0FBRSxRQUFBQyxDQUFPLEVBQUtKLEVBQUcsT0FDakJLLEVBQWN6bEIsRUFBUSxrQkFBb0JpakIsSUFBTSxPQVl0RCxHQVhJampCLEVBQVEsU0FDSndsQixHQUFXLENBQUNELEdBQ1p2bEIsRUFBUSxPQUFPLGFBQWUsR0FDOUJBLEVBQVEsT0FBTyxXQUFhb2xCLEVBQUcsT0FBTyxPQUNsQ0ssSUFDQXpsQixFQUFRLE9BQU8sa0JBQW9CLEtBR3ZDQSxFQUFRLE9BQU8sY0FBZ0IsSUFHbkN3bEIsR0FBVyxDQUFDQyxHQUFlLENBQUNGLEVBQzVCLE9BQU9HLEVBQVVOLEVBQUcsT0FBTyxNQUFNLEVBR3JDLE1BQU1PLEVBQUssRUFDWCxPQUFJM0gsRUFBQSxLQUFLeUIsSUFBUzlaLENBQUssSUFBTSxJQUNyQnNkLElBQU0sT0FDRjBDLEVBQUcscUJBQ0gzSCxFQUFBLEtBQUt5QixJQUFTOVosQ0FBSyxFQUFJZ2dCLEVBQUcscUJBRzFCLEtBQUssT0FBT2hELENBQUMsR0FJYjNpQixFQUFRLFNBQ1JBLEVBQVEsT0FBTyxhQUFlLElBQ2xDLEtBQUssSUFBSTJpQixFQUFHTSxFQUFHb0MsRUFBVSxPQUFPLElBR2pDcEMsQ0FDbkIsRUFDYzJDLEVBQU1DLElBQ0o3bEIsRUFBUSxTQUNSQSxFQUFRLE9BQU8sY0FBZ0IsR0FDL0JBLEVBQVEsT0FBTyxXQUFhNmxCLEdBRXpCSCxFQUFVRyxDQUFFLEdBRWpCSCxFQUFhRyxHQUFPLENBQ3RCLEtBQU0sQ0FBRSxRQUFBTCxDQUFPLEVBQUtKLEVBQUcsT0FDakJVLEVBQW9CTixHQUFXeGxCLEVBQVEsdUJBQ3ZDd2hCLEVBQWFzRSxHQUFxQjlsQixFQUFRLDJCQUMxQytsQixFQUFXdkUsR0FBY3hoQixFQUFRLHlCQUNqQzJsQixFQUFLLEVBZ0JYLEdBZkkzSCxFQUFBLEtBQUt5QixJQUFTOVosQ0FBSyxJQUFNLElBR2IsQ0FBQ29nQixHQUFZSixFQUFHLHVCQUF5QixPQUVqRCxLQUFLLE9BQU9oRCxDQUFDLEVBRVBtRCxJQUtOOUgsRUFBQSxLQUFLeUIsSUFBUzlaLENBQUssRUFBSWdnQixFQUFHLHVCQUc5Qm5FLEVBQ0EsT0FBSXhoQixFQUFRLFFBQVUybEIsRUFBRyx1QkFBeUIsU0FDOUMzbEIsRUFBUSxPQUFPLGNBQWdCLElBRTVCMmxCLEVBQUcscUJBRVQsR0FBSUEsRUFBRyxhQUFlQSxFQUN2QixNQUFNRSxDQUV0QixFQUNjRyxFQUFRLENBQUNsaUIsRUFBS21pQixJQUFRLE9BQ3hCLE1BQU1DLEdBQU1qb0IsRUFBQStmLEVBQUEsS0FBS29CLE1BQUwsWUFBQW5oQixFQUFBLFVBQW9CMGtCLEVBQUdNLEVBQUdvQyxHQUNsQ2EsR0FBT0EsYUFBZSxTQUN0QkEsRUFBSSxLQUFLakQsR0FBS25mLEVBQUltZixJQUFNLE9BQVksT0FBWUEsQ0FBQyxFQUFHZ0QsQ0FBRyxFQUszRGIsRUFBRyxPQUFPLGlCQUFpQixRQUFTLElBQU0sRUFDbEMsQ0FBQ3BsQixFQUFRLGtCQUNUQSxFQUFRLDBCQUNSOEQsRUFBSSxNQUFTLEVBRVQ5RCxFQUFRLHlCQUNSOEQsRUFBTW1mLEdBQUtxQyxFQUFHckMsRUFBRyxFQUFJLEdBRzdDLENBQWEsQ0FDYixFQUNZampCLEVBQVEsU0FDUkEsRUFBUSxPQUFPLGdCQUFrQixJQUNyQyxNQUFNLEVBQUksSUFBSSxRQUFRZ21CLENBQUssRUFBRSxLQUFLVixFQUFJTSxDQUFFLEVBQ2xDRCxFQUFLLE9BQU8sT0FBTyxFQUFHLENBQ3hCLGtCQUFtQlAsRUFDbkIscUJBQXNCbkMsRUFDdEIsV0FBWSxNQUN4QixDQUFTLEVBQ0QsT0FBSXRkLElBQVUsUUFFVixLQUFLLElBQUlnZCxFQUFHZ0QsRUFBSSxDQUFFLEdBQUdOLEVBQVUsUUFBUyxPQUFRLE1BQVMsQ0FBRSxFQUMzRDFmLEVBQVFxWSxFQUFBLEtBQUt1QixJQUFRLElBQUlvRCxDQUFDLEdBRzFCM0UsRUFBQSxLQUFLeUIsSUFBUzlaLENBQUssRUFBSWdnQixFQUVwQkEsQ0FDVixFQUNEOUcsR0FBQSxZQUFBNkQsR0FBa0IsU0FBQ3hnQixFQUFHLENBQ2xCLEdBQUksQ0FBQzhiLEVBQUEsS0FBS29DLElBQ04sTUFBTyxHQUNYLE1BQU0zUyxFQUFJdkwsRUFDVixNQUFRLENBQUMsQ0FBQ3VMLEdBQ05BLGFBQWEsU0FDYkEsRUFBRSxlQUFlLHNCQUFzQixHQUN2Q0EsRUFBRSw2QkFBNkIyUCxFQUN0QyxFQTBJRDBCLEdBQUEsWUFBQXFILEdBQVEsU0FBQ2prQixFQUFHcUUsRUFBRyxDQUNYeVgsRUFBQSxLQUFLMkIsSUFBTXBaLENBQUMsRUFBSXJFLEVBQ2hCOGIsRUFBQSxLQUFLMEIsSUFBTXhkLENBQUMsRUFBSXFFLENBQ25CLEVBQ0R3WSxHQUFBLFlBQUE4RCxHQUFXLFNBQUNsZCxFQUFPLENBU1hBLElBQVVxWSxFQUFBLEtBQUs2QixNQUNYbGEsSUFBVXFZLEVBQUEsS0FBSzRCLElBQ2YxQixHQUFBLEtBQUswQixHQUFRNUIsRUFBQSxLQUFLMEIsSUFBTS9aLENBQUssR0FHN0IyYyxHQUFBLEtBQUt4RCxHQUFBcUgsSUFBTCxVQUFjbkksRUFBQSxLQUFLMkIsSUFBTWhhLENBQUssRUFBR3FZLEVBQUEsS0FBSzBCLElBQU0vWixDQUFLLEdBRXJEMmMsR0FBQSxLQUFLeEQsR0FBQXFILElBQUwsVUFBY25JLEVBQUEsS0FBSzZCLElBQU9sYSxHQUMxQnVZLEdBQUEsS0FBSzJCLEdBQVFsYSxHQUVwQixFQXRyQ0UsSUFBTXlnQixHQUFOL0gsR0NqSVAsTUFBTWdJLEdBQWtCLElBQUlELEdBQXNCLENBQ2hELElBQUssSUFDTCxRQUFTLElBQ1QsSUFBSyxJQUFPLEdBQUssR0FDakIsZ0JBQWlCLENBQUNsbkIsRUFBWXlCLElBR3JCLEVBRVYsRUFFSyxDQUFFLFlBQUF5SixFQUFXLEVBQUtZLEtBSXhCLFNBQVNzYixHQUFlQyxFQUFvQixDQUM1QkMsR0FBQUQsQ0FDaEIsQ0FFQSxJQUFJQyxHQUFjLE1BQU9ucEIsSUFDdkJ5QixHQUFPLEtBQUssMkRBQTJELEVBQ2hFLElBaUdILE1BQU8ybkIsV0FBc0JyYyxFQUFXLENBNEI1QyxZQUFZd0QsRUFBb0IsU0EzQmhDeE0sR0FBQSxhQUFRLElBQ1JBLEdBQUEsaUJBQVksSUFDWkEsR0FBQSxpQkFBWSxJQUNaQSxHQUFBLFlBQ0FBLEdBQUEsZ0JBQ0FBLEdBQUEsYUFBUSxTQUNSQSxHQUFBLGFBQVEsU0FDUkEsR0FBQSxxQkFDQUEsR0FBQSxnQkFBVyxZQUNYQSxHQUFBLGFBQVEsU0FDUkEsR0FBQSxjQUFTLElBRVRBLEdBQUEsYUFBb0IsTUFRcEJBLEdBQUEscUJBQ0FBLEdBQUEsZUFBZSxDQUFBLEdBQ2ZBLEdBQUEsZUFBVSxJQUNWQSxHQUFBLGNBQVMsQ0FBQSxHQUNUQSxHQUFBLHlCQUNBQSxHQUFBLGdCQUNBQSxHQUFBLGdCQUF1QixDQUFBLEdBcUl2QkEsR0FBQSxzQkFBZ0UsQ0FBQSxHQWhJdkQsT0FBQSxlQUFlLEtBQU0sVUFBVyxDQUNyQyxNQUFPLEdBQ1AsV0FBWSxFQUFBLENBQ2IsRUFDTSxPQUFBLGVBQWUsS0FBTSxXQUFZLENBQ3RDLE1BQU8sR0FDUCxXQUFZLEVBQUEsQ0FDYixFQUNNLE9BQUEsZUFBZSxLQUFNLGVBQWdCLENBQzFDLE1BQU8sS0FDUCxXQUFZLEVBQUEsQ0FDYixFQUNELEtBQUssUUFBVSxHQUNiWCxFQUFBLE1BQU0sS0FBTW1OLENBQUksRUFDZEEsRUFBSyxNQUFRLE9BQ2YsS0FBSyxhQUFlQSxFQUFLLEtBQ3BCLEtBQUEsUUFBUUEsRUFBSyxJQUFJLEdBRXhCLEtBQUssTUFBSyxDQUNaLENBckNBLElBQUksTUFBSSxDQUNOLE9BQU8sS0FBSyxLQUNkLENBQ0EsSUFBSSxLQUFLK0csRUFBUyxDQUNoQixLQUFLLE1BQVFBLEVBQ2IsS0FBSyxNQUFLLENBQ1osQ0FpQ0EsV0FBUyxDQUNQLE9BQU8sS0FBSyxlQUFlLFVBQVksS0FBSyxtQkFBbUIsVUFBWSxLQUFLLFNBQ2xGLENBRUEsUUFBUUEsRUFBVyxDQUNqQixLQUFLLEtBQU9BLENBRWQsQ0FLQSxNQUFNLFVBQVVsSixFQUFxQixDQUNuQyxHQUFJLEtBQUssTUFBUSxDQUFDQSxFQUFRLE9BQ3hCLE9BQU8sS0FBSyxLQUdkLEdBQUksS0FBSyxRQUNQLE9BQU8sS0FBSyxrQkFHZCxJQUFJa0osRUFBYyxLQUNsQixHQUFJLEtBQUssa0JBTVAsR0FBSWxKLEVBQVEsTUFBTyxDQUNqQixJQUFJaWIsRUFBVyxLQUNYLEtBQUssT0FBUyxLQUFLLE1BQ1ZBLEVBQUEsS0FBSyxJQUFNamIsRUFBUSxPQUVoQyxJQUFJa2IsRUFBUyxLQU1iLEdBSklELElBRU9DLEVBQUFOLEdBQWdCLElBQUlLLENBQVEsR0FFbkNDLEVBQ0toUyxFQUFBZ1MsTUFDRixDQUNDLE1BQUF6bkIsRUFBUSxNQUFNLFFBQVF1TSxFQUFRLEtBQUssRUFBSUEsRUFBUSxNQUFRLENBQUNBLEVBQVEsS0FBSyxFQUUzRSxHQURBa0osRUFBTyxNQUFNLEtBQUssaUJBQWlCelYsRUFBT3VNLENBQU8sRUFDN0NrSixHQUFRLE1BQVEsRUFBRUEsYUFBZ0IsT0FBUSxDQUNyQzdWLEdBQUEsTUFBTSxnQ0FBaUM2VixDQUFJLEVBQ2xELE1BQ0QsQ0FDRytSLEdBQ2NMLEdBQUEsSUFBSUssRUFBVS9SLENBQUksQ0FFckMsQ0FDRixVQUNRLEtBQUssYUFDZEEsRUFBTyxLQUFLLGlCQUNQLENBQ0wsS0FBSyxRQUFVLEdBQ1gsR0FBQSxDQUNLQSxFQUFBLE1BQU0sS0FBSyxrQkFBa0JsSixDQUFPLENBQUEsUUFDbkMsQ0FDUixLQUFLLFFBQVUsRUFDaEIsQ0FDRixDQUNELEtBQUssS0FBT2tKLEVBQ1IsS0FBSyxTQUNQLEtBQUssUUFBUSxDQUFFLEtBQU0sS0FBTSxHQUFHbEosRUFBUyxFQUd6QyxLQUFLLGVBQWMsQ0FDckIsQ0FFQSxnQkFBYyxDQUNSLEtBQUssVUFBWSxLQUFLLFNBQVMsT0FBUyxJQUMxQ2hMLEVBQUUsUUFBUSxLQUFLLFNBQVdtbUIsR0FBUSxDQUNoQ0EsRUFBSyxLQUFLLElBQUksQ0FBQSxDQUNmLEVBQ0QsS0FBSyxTQUFTLE9BQVMsRUFFM0IsQ0FFQSxpQkFBZSxDQUNiLElBQUlDLEVBQXdCLEtBRTVCLE1BQU01ZSxFQUFzQixJQUFJLFFBQVNpTCxHQUFXLENBQ2xEMlQsRUFBVWxTLEdBQWUsQ0FDdkJ6QixFQUFReUIsQ0FBSSxDQUFBLENBQ2QsQ0FDRCxFQUNHLE9BQUMsS0FBSyxXQUNSLEtBQUssU0FBVyxJQUViLEtBQUEsU0FBUyxLQUFLa1MsQ0FBTSxFQUNsQjVlLENBQ1QsQ0FNQSxNQUFNLFNBQVN3RCxFQUFzQixDQUNuQyxPQUFPLE1BQU0sS0FBSyxVQUFVLENBQUUsR0FBR0EsQ0FBUyxDQUFBLENBQzVDLENBRUEsTUFBTSxXQUFXQSxFQUFzQixDQUM5QixPQUFBLE1BQU0sS0FBSyxTQUFTLENBQUUsR0FBR0EsRUFBUyxPQUFRLEdBQU0sQ0FDekQsQ0FPQSxNQUFNLGVBQWVyTSxFQUFhLENBQzVCLEdBQUEsS0FBSyxrQkFBb0IsS0FBTSxDQUNqQ04sR0FBTyxLQUFLLHFCQUFxQixFQUNqQyxNQUNELENBQ0QsVUFBV21rQixLQUFLN2pCLEVBQ1YsS0FBSyxRQUFRNmpCLENBQUMsR0FBSyxLQUFLLGVBQWVBLENBQUMsSUFHdkMsS0FBQSxlQUFlQSxDQUFDLEVBQUksQ0FDdkIsUUFBUyxHQUNULE1BQU9BLENBQUEsR0FHWCxNQUFNN0ssYUFDTixNQUFNQSxhQUNOLE1BQU1BLGFBQ04sTUFBTTBPLEVBQXVCLENBQUEsRUFPekIsR0FOSnJtQixFQUFFLFFBQVEsS0FBSyxlQUFpQndpQixHQUFLLENBQzlCQSxFQUFFLFVBQ0xBLEVBQUUsUUFBVSxHQUNFNkQsRUFBQSxLQUFLN0QsRUFBRSxLQUFLLEVBQzNCLENBQ0YsRUFDRzZELEVBQWMsT0FBUyxFQUFHLENBQzVCLE1BQU1uUyxFQUFPLE1BQU0sS0FBSyxpQkFBaUJtUyxDQUFhLEVBQ2pELEtBQUEsUUFBUSxDQUFDLEdBQUksS0FBSyxNQUFRLEdBQUssR0FBR25TLENBQUksQ0FBQyxFQUM1QyxVQUFXaFUsS0FBT21tQixFQUNULE9BQUEsS0FBSyxlQUFlbm1CLENBQUcsRUFFaEMsT0FBSSxPQUFPLEtBQUssS0FBSyxjQUFjLEVBQUUsU0FBVyxHQUM5QyxLQUFLLGVBQWMsRUFFZCxLQUFLLElBQUEsS0FFWixRQUFPLEtBQUssaUJBRWhCLENBRUEsT0FBSyxDQUNILEtBQUssYUFBZSxLQUNwQixLQUFLLFFBQVEsSUFBSSxDQUNuQixDQUVBLE1BQU0sa0JBQWtCOEssRUFBYSxDQUMvQixJQUFBc2IsRUFDQUwsRUFDQU0sRUFRQSxHQVBBLEtBQUssTUFDUEEsRUFBTSxLQUFLLElBQ1BBLGFBQWUsV0FDakJBLEVBQU1BLEVBQUksQ0FBRSxHQUFHdmIsRUFBUyxLQUFNLEtBQU0sR0FFM0JpYixFQUFBTSxHQUVULEtBQUssU0FBVyxLQUNsQkQsRUFBZ0IsU0FBVyxDQUVuQixNQUFBRSxFQUFXLE1BQU0sS0FBSyxRQUFRLENBQUUsSUFBQUQsRUFBSyxLQUFNLEtBQU0sR0FBR3ZiLENBQUEsQ0FBUyxFQUMvRCxPQUFBLE1BQU0sUUFBUXdiLENBQVEsRUFDakJBLEVBRUEsRUFDUixVQUVNRCxFQUNURCxFQUFnQixTQUFXLENBQ3pCLE1BQU1FLEVBQVcsTUFBTVQsR0FBWSxDQUFFLElBQUFRLEVBQUssS0FBTSxLQUFNLEVBQ2xELE9BQUEsTUFBTSxRQUFRQyxDQUFRLEVBQ2pCQSxFQUVBLEVBQ1IsTUFHSCxPQUFPLEdBRUwsR0FBQSxLQUFLLE9BQVNQLEVBQVUsQ0FDdEIsSUFBQUMsRUFBU04sR0FBZ0IsSUFBSUssQ0FBUSxFQUV6QyxHQUFJQyxHQUFVLEtBQ0hBLEVBQUEsQ0FDUCxPQUFRLEdBQ1IsUUFBUyxHQUNULEtBQU0sT0FDTixTQUFVLENBQUUsQ0FBQSxFQUVFTixHQUFBLElBQUlLLEVBQVVDLENBQU0sTUFDckMsSUFBVUEsRUFBTyxPQUNoQixPQUFPQSxFQUFPLEtBQ2YsR0FBVUEsRUFBTyxRQUNULE9BQUEsSUFBSSxRQUFTelQsR0FBVyxDQUN2QixNQUFBclEsRUFBWThSLEdBQWEsQ0FDN0J6QixFQUFReUIsQ0FBSSxDQUFBLEVBRVBnUyxFQUFBLFNBQVMsS0FBSzlqQixDQUFRLENBQUEsQ0FDOUIsRUFHQyxHQUFBLENBQ0Y4akIsRUFBTyxPQUFTLEdBQ2hCQSxFQUFPLFFBQVUsR0FDYixJQUFBTyxFQUFXLE1BQU1ILElBQ3JCRyxFQUFXQSxHQUFZLEdBQ2pCQSxhQUFvQixPQUNqQnBvQixHQUFBLEtBQUssZ0NBQWlDb29CLENBQVEsRUFFdkRQLEVBQU8sS0FBT08sRUFDZFAsRUFBTyxPQUFTLEdBQ2hCQSxFQUFPLFFBQVUsR0FDTixVQUFBOWpCLEtBQVk4akIsRUFBTyxTQUM1QjlqQixFQUFTcWtCLENBQVEsRUFFbkIsT0FBQVAsRUFBTyxTQUFXLEdBQ1hPLFFBQ0EvZ0IsRUFBRyxDQUNWd2dCLEVBQU8sUUFBVSxHQUNqQkEsRUFBTyxPQUFTLEdBQ1Q3bkIsR0FBQSxNQUFNLG1CQUFvQnFILENBQUMsQ0FDbkMsQ0FDRixDQUVELE9BQU8sTUFBTTRnQixFQUFhLENBQzVCLENBRUEsT0FBSyxDQUNDLEdBQUEsS0FBSyxPQUFTLEtBQU0sQ0FDdEIsS0FBSyxRQUFVLEdBQ2YsTUFDRCxDQUNELE1BQU0vbEIsRUFBTSxDQUFBLEVBQ1IsS0FBSyxNQUNQLEtBQUssU0FBU0EsRUFBSyxLQUFLLE1BQVEsQ0FBRSxDQUFBLEVBS3BDLEtBQUssUUFBVUEsQ0FDakIsQ0FDQSxTQUFTQSxFQUFVdVAsRUFBUyxDQUN4QjlQLEVBQUEsUUFBUThQLEVBQU83UCxHQUFRLENBQ3ZCTSxFQUFJLEtBQUssU0FBU04sQ0FBSSxDQUFDLEVBQUlBLEVBQ3ZCLEtBQUssUUFBVSxLQUFLLFlBQVlBLENBQUksR0FDdEMsS0FBSyxTQUFTTSxFQUFLLEtBQUssWUFBWU4sQ0FBSSxDQUFDLENBQzFDLENBQ0YsQ0FDSCxDQUVBLFNBQVNBLEVBQVMsQ0FDVCxPQUFBQSxFQUFLLEtBQUssS0FBSyxDQUN4QixDQUNBLFNBQVNBLEVBQVMsQ0FDaEIsT0FBSSxLQUFLLGFBQ0EsS0FBSyxhQUFhQSxDQUFJLEVBRXhCQSxFQUFLLEtBQUssS0FBSyxDQUN4QixDQUNBLFlBQVlBLEVBQVMsQ0FDWixPQUFBQSxFQUFLLEtBQUssUUFBUSxDQUMzQixDQUNBLFNBQVNBLEVBQVMsQ0FDVCxPQUFBQSxFQUFLLEtBQUssS0FBSyxDQUN4QixDQUNBLGFBQVcsQ0FDVCxPQUFPLEtBQUssSUFDZCxDQUVBLFlBQVUsQ0FDUixPQUFPLEtBQUssT0FDZCxDQUVBLGVBQWV4QixFQUFVLENBQ2hCLE9BQUEsS0FBSyxRQUFRQSxDQUFLLENBQzNCLENBRUEsb0JBQW9CQSxFQUFVLENBQzVCLEdBQUlBLEdBQVMsS0FDWCxNQUFPLEdBRUp1QixFQUFFLFFBQVF2QixDQUFLLElBQ2xCQSxFQUFRLENBQUNBLENBQUssR0FHaEIsTUFBTTZYLEVBQW9CLENBQUEsRUFDeEIsT0FBQXRXLEVBQUEsUUFBUXZCLEVBQVF3QixHQUFRLENBQ2xCLE1BQUF1VyxFQUFPLEtBQUssUUFBUXZXLENBQUksRUFDMUJ1VyxFQUNGRixFQUFNLEtBQUtFLENBQUksRUFFZkYsRUFBTSxLQUFLLENBQUUsQ0FBQyxLQUFLLEtBQUssRUFBR3JXLEVBQU0sQ0FDbEMsQ0FDRixFQUNNcVcsQ0FDVCxDQUNELENBT0ssU0FBVW5KLEdBQWN1WixFQUFzQixDQUNsRCxNQUFNbGYsRUFBTXdULEVBQUEsZ0JBQWdCLElBQUlnTCxHQUFLVSxDQUFNLENBQUMsRUFDNUMsTUFBSSxDQUFDbGYsRUFBSSxXQUFhQSxFQUFJLFdBQ3hCQSxFQUFJLFNBQVEsRUFFUEEsQ0FDVCxVQUNnQm1mLElBQWEsQ0FDcEIsTUFBQSxDQUNMLEtBQUF4WixHQUFBLGVBQ0EwWSxHQUNBLEtBQUFHLEVBQUEsQ0FFSixVQ3RmZ0JZLElBQVEsQ0FDZixNQUFBLENBQ0wsU0FBVWpaLEdBQU0sU0FDaEIsUUFBU0EsR0FBTSxRQUNmLFNBQVVBLEdBQU0sU0FDaEIsUUFBU0EsR0FBTSxPQUFBLENBRW5CLENDSkEsZUFBZWtaLEdBQWtCanFCLEVBQXNCLENBQ3JELE1BQU0rYSxhQUNBLE1BQUFtUCxFQUFXbHFCLEVBQUssV0FDdEIsR0FBSWtxQixHQUFZLEtBQ2QsT0FFSSxNQUFBQyxFQUE4QkQsRUFBUyxjQUFjLG1CQUFtQixFQUM5RSxHQUFJQyxHQUFrQixLQUNwQixPQUlGLE1BQU1DLEVBQVVGLEVBRVZHLEVBRFNILEVBQ0ksTUFDbkJDLEVBQWUsTUFBTSxPQUFTLE9BQ2ZBLEVBQUEsWUFBZXJoQixHQUFLLENBRWpDLE1BQU13aEIsRUFBSXhoQixFQUFFLFFBQ055aEIsRUFBSXpoQixFQUFFLFFBRVpzaEIsRUFBUSxNQUFNLFVBQVksc0JBRTFCLElBQUlJLEVBQVdDLEVBR1hKLEVBQUksS0FBSyxTQUFTLEdBQUcsR0FDaEJHLEVBQUEsQ0FBQyxTQUFTLEtBQUssYUFBZSxDQUFDSCxFQUFJLEtBQUssUUFBUSxLQUFNLEVBQUUsRUFBSSxLQUM1REksRUFBQSxDQUFDLFNBQVMsS0FBSyxjQUFnQixDQUFDSixFQUFJLElBQUksUUFBUSxLQUFNLEVBQUUsRUFBSSxPQUVuRUcsRUFBTyxDQUFDSCxFQUFJLEtBQUssUUFBUSxNQUFPLEVBQUUsRUFDbENJLEVBQU8sQ0FBQ0osRUFBSSxJQUFJLFFBQVEsTUFBTyxFQUFFLEVBQzFCSSxFQUFBQSxJQUFTLEVBQUksSUFBTUEsR0FFbkIsU0FBQSxZQUFjLFNBQVUzaEIsRUFBQyxDQUUxQixNQUFBNGhCLEVBQUk1aEIsRUFBRSxRQUFVd2hCLEVBQ2hCbGlCLEVBQUlVLEVBQUUsUUFBVXloQixFQUd0QkgsRUFBUSxNQUFNLEtBQU8sR0FBR00sRUFBSUYsQ0FBSSxLQUNoQ0osRUFBUSxNQUFNLElBQU0sR0FBR2hpQixFQUFJcWlCLENBQUksSUFBQSxFQUd4QixTQUFBLFVBQVksU0FBVTNoQixFQUFDLENBQzlCLFNBQVMsWUFBYyxLQUN2QixTQUFTLFVBQVksSUFBQSxDQUN2QixDQUVKLENBQ0EsZUFBZTZoQixHQUFrQjNxQixFQUFzQixDQUNyRCxNQUFNK2EsYUFDQSxNQUFBbVAsRUFBV2xxQixFQUFLLFdBQ3RCLEdBQUlrcUIsR0FBWSxLQUNkLE9BRUksTUFBQUMsRUFBOEJELEVBQVMsY0FBYyxnQkFBZ0IsRUFDM0UsR0FBSUMsR0FBa0IsS0FDcEIsT0FJRixNQUFNQyxFQUFVRixFQUVWRyxFQURTSCxFQUNJLE1BQ25CQyxFQUFlLE1BQU0sT0FBUyxPQUNmQSxFQUFBLFlBQWVyaEIsR0FBSyxDQUVqQyxNQUFNd2hCLEVBQUl4aEIsRUFBRSxRQUNOeWhCLEVBQUl6aEIsRUFBRSxRQUVac2hCLEVBQVEsTUFBTSxVQUFZLHNCQUUxQixJQUFJSSxFQUFXQyxFQUVYSixFQUFJLEtBQUssU0FBUyxHQUFHLEdBQ2hCRyxFQUFBLENBQUMsU0FBUyxLQUFLLGFBQWUsQ0FBQ0gsRUFBSSxLQUFLLFFBQVEsS0FBTSxFQUFFLEVBQUksS0FDNURJLEVBQUEsQ0FBQyxTQUFTLEtBQUssY0FBZ0IsQ0FBQ0osRUFBSSxJQUFJLFFBQVEsS0FBTSxFQUFFLEVBQUksT0FFbkVHLEVBQU8sQ0FBQ0gsRUFBSSxLQUFLLFFBQVEsTUFBTyxFQUFFLEVBQ2xDSSxFQUFPLENBQUNKLEVBQUksSUFBSSxRQUFRLE1BQU8sRUFBRSxHQUkxQixTQUFBLE9BQVMsZUFBZ0J2aEIsRUFBQyxDQUNqQyxHQUFJQSxFQUFFLFNBQVcsR0FBS0EsRUFBRSxTQUFXLEVBQ2pDLE9BR0ksTUFBQTRoQixFQUFJNWhCLEVBQUUsUUFBVXdoQixFQUNoQmxpQixFQUFJVSxFQUFFLFFBQVV5aEIsRUFFdEJILEVBQVEsTUFBTSxLQUFPLEdBQUdNLEVBQUlGLENBQUksS0FDaENKLEVBQVEsTUFBTSxJQUFNLEdBQUdoaUIsRUFBSXFpQixDQUFJLElBQUEsRUFHeEIsU0FBQSxVQUFZLFNBQVUzaEIsRUFBQyxDQUM5QixTQUFTLE9BQVMsS0FDbEIsU0FBUyxVQUFZLElBQUEsQ0FDdkIsQ0FFSixDQUNBLGVBQWU4aEIsR0FBVTVxQixFQUFzQixDQUN2QyxLQUFBLENBQUUsR0FBQUksR0FBTzJILEdBQUFBLFFBQ1gzSCxFQUFHLE9BQVMsUUFDZCxNQUFNNnBCLEdBQWtCanFCLENBQUksRUFDbkJJLEVBQUcsT0FBUyxXQUdyQixNQUFNdXFCLEdBQWtCM3FCLENBQUksQ0FFaEMsVUFFZ0I2cUIsSUFBTyxDQUNkLE1BQUEsQ0FDTCxVQUFBRCxFQUFBLENBRUosQ0NqSE8sTUFBTUUsR0FBNkIsQ0FDeEMsT0FBUSxDQUNOLElBQUssQ0FDSCxhQUFjLEVBQ2YsQ0FDRixHQ2VIQyxHQUFlcmYsa0JBQWdCLENBQzdCLEtBQU0sY0FDTixNQUFPLENBSUwsWUFBYSxDQUNYLEtBQU0sUUFDTixRQUFTLEVBQ1gsRUFJQSxVQUFXLENBQ1QsS0FBTSxPQUNOLFFBQVMsS0FDQSxHQUVYLEVBSUEsV0FBWSxDQUNWLEtBQU0sT0FDTixRQUFTLEtBQ0EsR0FFWCxDQUNGLEVBQ0EsTUFBTWlMLEVBQU81VyxFQUFLLENBQ1YsS0FBQSxDQUFFLE1BQUFtTixHQUFVUyxLQUNacWQsRUFBcUI3cUIsRUFBQUEsU0FBUyxJQUM5QndXLEVBQU0sY0FBZ0IsR0FDakJ6SixFQUFNLENBQUUsU0FBVSxVQUFXLEVBQUd5SixFQUFNLFVBQVUsRUFFbERBLEVBQU0sVUFDZCxFQUVLc1UsRUFBb0I5cUIsRUFBQUEsU0FBUyxJQUM3QndXLEVBQU0sY0FBZ0IsR0FDakJ6SixFQUFNLENBQUUsS0FBTSxPQUFRLEVBQUd5SixFQUFNLFNBQVMsRUFFMUNBLEVBQU0sU0FDZCxFQUVNLE1BQUEsQ0FDTCxtQkFBQXFVLEVBQ0Esa0JBQUFDLENBQUEsQ0FFSixDQUNGLENBQUMsUUMxRVlwZixHQUFBLENBQUEsTUFBTSxvQkFRTixNQUFNLCtDQVZmLFNBQUFxZixHQUFBaGYsRUFlTUMsRUFmTkMsRUFlTUMsRUFBQUMsRUFBQUMsRUFBQSxRQWRKQyxZQWFNLEVBQUFDLHFCQUFBLE1BQUFaLEdBQUEsQ0FiWWUsRUFBQSxtQkFBQSxNQUFBZCxHQUFBLENBQUFjLEVBQUFBLG1CQUh4QixNQUdpQ29lLENBQUFBLE1BQUFBLFFBQ3pCLE1BQUFHLEVBQUFBLGVBR01qZixFQUhOLGtCQUdNLENBQUEsRUFBQSxnQ0FDTlEsYUFHTVIsRUFBQSxPQUFBLFFBQUEsQ0FBQSxDQUFBLHVCQVhkLE1BUWtDK2UsQ0FBQUEsTUFBQUEsT0FFeEIsTUFBYUUsRUFBQUEsZUFBQWpmLEVBQUEsaUJBQUEsQ0FBQSxFQUFBLENBRWZRLGFBQUFSLEVBQUEsT0FBQSxTQUFBLENBRUUsRUFBQSxDQUFBLEVBQUFVLEVBQUEsbUJBQUEsTUFBQVosR0FBQSxrQ0FJTixFQUFBLENBQUEsQ0FBQSxDQUFBLGlFQ3dCSm9mLEdBQWUxZixrQkFBZ0IsQ0FDN0IsS0FBTSxpQkFDUixDQUFDLFlDcENZLE1BQU0sc0JBS04sTUFBTSxpQkFlUkssR0FBQSxDQUFBLE1BQU0sdUdBM0JmLE1BQUFzZixFQUFBQyxtQkFpQ2UsY0FqQ0QsU0FFVjllLEVBQUFBLFVBY00sRUFBQStlLEVBQUEsWUFBQUYsRUFBQSxDQUFBLE1BQUEscUJBQUEsQ0FiSixPQUFBRyxFQUFBLFFBQUEsSUFBQSxDQUNpQzVlLEVBQUEsbUJBQUEsTUFBQWYsR0FBQSxDQUFBZSxFQUFBLG1CQUFBLE1BQUFkLEdBQUEsQ0FFakNZLGFBQTJCUixFQUFBLE9BQUEsWUFBQSxDQUFBLENBQzNCLEVBQUFRLGFBQ0VSLEVBQWtDLE9BQUEsUUFBQSxFQUFBVSxFQUFBLG1CQUFBLE1BQUFiLEdBQUEsQ0FFcENXLGFBQThCUixFQUFBLE9BQUEsZUFBQSxDQUFBLENBQzlCLEVBQ0FRLHNCQUVNLFdBRk4sRUFBQUEsYUFDRVIsRUFBa0MsT0FBQSxTQUFBLEVBQUFVLEVBQUEsbUJBQUEsTUFBQVosR0FBQSxDQUVwQ1UsYUFBeUJSLEVBQUEsT0FBQSxlQUFBLENBQUEsQ0FBQSwrQkFXbEIsQ0FBQSxDQUFBLENBQUEsU0FFUHNmLEVBQStCLFFBQUEsSUFBQSxDQUNBNWUsRUFBQSxtQkFBQSxNQUFBNmUsR0FBQSxDQUMvQi9lLGFBQWtDUixFQUFBLE9BQUEsWUFBQSxFQUFBUSxhQUFBUixFQUFBLE9BQUEsWUFBQSx3Q0EvQjFDLENBQUEsQ0FBQSxDQUFBLFVBdUJJc2YsRUFBMEIsUUFBQSxJQUFBLENBRTFCOWUsYUFBMEJSLEVBQUEsT0FBQSxTQUFBLEVBQUFRLGFBQUFSLEVBQUEsT0FBQSxPQUFBLEVBekI5QlEsYUFBQVIsRUFBQSxPQUFBLE1BQUEsQ0FBQSxDQUFBLHdDQ3dEQXdmLEdBQWVoZ0Isa0JBQWdCLENBQzdCLEtBQU0sZUFDTixPQUFRLENBQ0EsTUFBQWlnQixFQUFpQnRWLFNBQU8saUJBQWlCLEVBQ3pDdVYsRUFBYXpyQixFQUFBQSxTQUFTLElBQU0sU0FDaEMsT0FBSXdyQixHQUFrQixLQUNiLElBR0Y3VSxHQUFBbFcsRUFBQStxQixFQUFBLElBQUEsWUFBQS9xQixFQUFrQixTQUFsQixZQUFBa1csRUFBMEIsSUFBQSxDQUNsQyxFQUVLLENBQUUsR0FBQTFXLEdBQU8ySCxHQUFBQSxRQUVUOGpCLEVBQW9CcmtCLEVBQUEsSUFBSXBILEVBQUcsS0FBSyxJQUFJLEVBQ25DLE1BQUEsQ0FDTCxXQUFBd3JCLEVBQ0Esa0JBQUFDLENBQUEsQ0FFSixDQUNGLENBQUMsUUN4RGNoZ0IsR0FBQSxDQUFBLE1BQU0saUJBTU5DLEdBQUEsQ0FBQSxNQUFNLHdCQVlKLE1BQU0scUZBckNyQixNQUFBdWYsRUFBQUMsbUJBOENlLGNBOUNELFNBYVo5ZSxFQUFBQSxVQWdDZSxFQUFBK2UsY0FBQUYsRUFBQSxDQUFBLE1BQUEsZ0JBQUEsRUFBQVMsY0FBQSxDQUFBLFFBL0JGTixVQUFNLElBQ1UsQ0FBQTdaLEVBQUEsWUFBekIwWixFQUF5QixLQUFBLENBQUEsT0FBQUcsRUFBQSxRQUFBLElBQUEsQ0FoQmpDOWUsYUE2Q2tCUixFQUFBLE9BQUEsTUFBQSxDQUFBLENBQUEsVUExQk1zZixFQUlSLFFBQUEsSUFBQSxFQUFBaGYsWUFBQSxFQUFBK2UsRUFBQSxZQUFBUSwwQkFBQTdmLEVBQUEsaUJBQUEsRUFBQSxDQUFBLE1BQUEsdUJBQUEsQ0FBQSxNQUZKc2YsRUFBOEIsUUFBQSxJQUFBLENBQ0Y1ZSxFQUFBLG1CQUFBLE1BQUFiLEdBQUEsQ0FBQVcsYUFBQVIsRUFBQSxPQUFBLFdBQUEsa0NBR3JCLENBQUEsQ0FBQSxDQUFBLFNBRVBzZixFQUE4QixRQUFBLElBQUEsQ0FDRjVlLEVBQUEsbUJBQUEsTUFBQVosR0FBQSxDQUFBVSxhQUFBUixFQUFBLE9BQUEsV0FBQSxrQ0E1QnhDLENBQUEsQ0FBQSxDQUFBLEVBcUNxQixRQUFBc2YsRUFBQSxRQUFNLElBS1QsQ0FBQTdaLEVBQUEsWUFKTjBaLEVBSU0sS0FBQSxDQUFBLE9BSEpHLEVBQStCLFFBQUEsSUFBQSxDQUNBNWUsRUFBQSxtQkFBQSxNQUFBNmUsR0FBQSxDQUMvQi9lLGFBQWtDUixFQUFBLE9BQUEsWUFBQSxFQUFBUSxhQUFBUixFQUFBLE9BQUEsWUFBQSx3Q0F6Q2hELENBQUEsQ0FBQSxDQUFBLFVBbUNVc2YsRUFBMEIsUUFBQSxJQUFBLENBQzFCOWUsYUFBeUJSLEVBQUEsT0FBQSxTQUFBLEVBQUFRLGFBQUFSLEVBQUEsT0FBQSxPQUFBLEVBcENuQ1EsYUFBQVIsRUFBQSxPQUFBLE1BQUEsQ0FBQSxDQUFBLEtBQUEsQ0FBQSxDQUFBLENBQUEsS0FBQSxDQUFBLEVBQUEsQ0FBQSxLQUFBLENBQUEsQ0FBQSxDQUFBLEVBRW9CMGYsRUFBQUEsQ0FBQUEsRUFBQUEsQ0FGcEIxZixFQUFBLFdBQUEsQ0FHTSxLQUFBLFNBQUEsR0FDRXNmLEVBQStCLFFBQUEsSUFBQSxDQUFBNWUsRUFBQSxtQkFBQSxNQUFBZixHQUFBLGdCQUVqQyxPQU5OLFlBQUEsQ0FBQSxDQUFBLGlCQU9tQzBmLEVBQUFBLFlBQUFRLEVBQUFBLHdCQUFBN2YsRUFBQSxpQkFBQSxFQUFBLEtBQUEsQ0FBQSxRQUFBc2YsRUFBQSxRQUFBLElBQUEsQ0FQbkM5ZSxhQUFBUixFQUFBLE9BQUEsUUFBQSxDQUFBLENBQUEsRUFTTSxFQUFBLENBQUEsQ0FBQSx3RUFUTixDQUFBLENBQUEsQ0FBQSxFQUFBLElBQUEsR0FBQSxFQUFBLHFEQ0lBLFNBQUE4ZixHQUFBN2lCLEVBQUEsQ0FBQSxPQUFBLE9BQUFBLEdBQUEsWUFBQThpQixPQUFBQyxVQUFBQyxTQUFBNUMsS0FBQXBnQixDQUFBLElBQUFpakIsbUJBQUFBLENBQUFBLEVBQUEsUUFBQWpqQixDQUFBLENBQUEsQ0FHZXVDLE1BQUFBLHFCQUFnQixDQUM3QnhMLEtBQU0sV0FDTm1zQixhQUFjLEdBQ2QxVixNQUFPLENBSUw3TCxLQUFNLENBQ0o1RixLQUFNb25CLE9BQ05DLFFBQVMsR0FDVEMsU0FBVSxFQUNYLEVBSURDLEtBQU0sQ0FBRXZuQixLQUFNLENBQUNvbkIsT0FBUUwsT0FBUVMsUUFBUSxFQUFHSCxRQUFTLEdBQUlDLFNBQVUsRUFBTyxFQUl4RUcsVUFBVyxDQUFFem5CLEtBQU0sQ0FBQ29uQixPQUFRTCxPQUFRUyxRQUFRLEVBQUdILFFBQVMsR0FBSUMsU0FBVSxFQUFPLEVBSTdFSSxPQUFRLENBQUUxbkIsS0FBTTJuQixRQUFTTixRQUFTLEdBQU9DLFNBQVUsRUFBTyxFQUsxRE0sUUFBUyxDQUNQNW5CLEtBQU0rbUIsT0FDTk0sUUFBU1EsTUFDVixFQUtEQyxZQUFhLENBQ1g5bkIsS0FBTSttQixPQUNOTSxRQUFTUSxNQUNWLEVBQ0RFLFVBQVcsQ0FBRSxDQUNkLEVBQ0RDLE1BQU12VyxFQUFPNVcsRUFBRyxDQUNkLEtBQU0sQ0FBRUssR0FBQUEsQ0FBSSxFQUFHMkgsR0FBSyxNQUFBLEVBQ2QsQ0FBRW1GLE1BQUFBLENBQU8sRUFBR1MsR0FBUSxFQUNwQndmLEVBQWFBLENBQUNWLEVBQVdXLEVBQVksbUJBQW9CLENBQzdELEdBQUlYLEdBQVEsS0FHWixPQUFJLE9BQU9BLEdBQVMsU0FDbEI5YSxFQUFBLFlBQUEyWixtQkFBQSxTQUFBLEVBQUEsQ0FBQSxLQUFzQm1CLEVBQUksTUFBU1csQ0FBUyxFQUFBLElBQUEsRUFDbkMsT0FBT1gsR0FBUyxXQUNsQkEsRUFBSSxFQUVYOWEsRUFBQSxZQUFBMlosRUFBQSxpQkFBQStCLFNBQUFBLEVBQUFBLEVBQUFBLFdBQW9CWixFQUFJLENBQUEsTUFBU1csQ0FBUyxDQUFBLEVBQUEsSUFBQSxHQUl4Q0UsRUFBWUEsSUFBSyxDQUNyQixNQUFNYixFQUEyQzlWLEVBQU04VixLQUNqREUsRUFBZ0RoVyxFQUFNZ1csVUFFdERZLEVBQWFudEIsRUFBRzhFLE9BQVMsVUFDekJzb0IsRUFBYSxDQUFDRCxFQUNwQixJQUFJRSxFQUNKLE1BQU1DLEVBQVEsQ0FDWixHQUFHM3RCLEVBQUkydEIsUUFFSmpCLEdBQVEsQ0FBQ2MsR0FBYyxDQUFDQyxHQUFlenRCLEVBQUkydEIsTUFBTW5CLFNBQVc1VixFQUFNN0wsTUFBUTZoQixLQUM3RWUsRUFBTW5CLFFBQVUsSUFBSyxDQUNuQixNQUFNeG1CLEVBQWdCLENBQUEsRUFDdEIsT0FBSTBtQixHQUFRLENBQUNjLEdBQWMsQ0FBQ0MsR0FDMUJ6bkIsRUFBU21LLEtBQUtpZCxFQUFXVixDQUFJLENBQUMsRUFFNUIxc0IsRUFBSTJ0QixNQUFNbkIsU0FDWnhtQixFQUFTbUssS0FBS25RLEVBQUkydEIsTUFBTW5CLFFBQVMsQ0FBQSxFQUUvQjVWLEVBQU03TCxNQUNSL0UsRUFBU21LLEtBQUt5RyxFQUFNN0wsSUFBSSxFQUV0QjZoQixHQUNGNW1CLEVBQVNtSyxLQUFLaWQsRUFBV1IsRUFBVyxzQkFBc0IsQ0FBQyxFQUV0RDVtQixJQUdQMG1CLElBQ0VjLEdBQWMsQ0FBQ0csRUFBTSxLQUV2QkEsRUFBTSxLQUFVLElBQ1BQLEVBQVdWLENBQUksRUFFZmUsR0FBYyxDQUFDRSxFQUFNLE9BRTlCRCxFQUFXTixFQUFXVixDQUFJLElBSTlCLE1BQU1rQixFQUFXaFgsRUFBTWlXLE9BQVN4c0IsRUFBRzRILE9BQU80a0IsT0FBUyxHQUU3Q2dCLEVBQWtCQyxFQUF1Qix3QkFBQ3p0QixFQUFHNEgsT0FBTzlILElBQUksRUFFeEQ0dEIsRUFBVzVnQixFQUNmLENBQ0UsR0FBR3lnQixFQUVISSxNQUFPLENBQ0wsWUFBYSxHQUNiLFVBQVcsQ0FBQ3BYLEVBQU03TCxNQUFRLENBQUMvSyxFQUFJMnRCLE1BQU1uQixPQUN0QyxDQUNGLEVBQ0QsQ0FBRXdCLE1BQU9wWCxFQUFNc1csVUFBVyxHQUFHbHRCLEVBQUlpdUIsTUFBTyxHQUFHclgsRUFBTXFXLFdBQVcsQ0FBRSxFQUVoRSxPQUFJUyxJQUVGSyxFQUFTckIsS0FBT2dCLEdBRVhRLElBQUVMLEVBQVlFLEVBQVVKLENBQUssR0FHdEMsR0FBSSxDQUFDL1csRUFBTW1XLFFBQ1QsT0FBT1EsRUFJVCxNQUFNWSxFQUFtQkwsRUFBdUIsd0JBQUN6dEIsRUFBRzBzQixRQUFRNXNCLElBQUksRUFFMURpdUIsRUFBc0JodUIsRUFBQUEsU0FBUyxJQUM1QmlELEVBQUVnckIsS0FBS3pYLEVBQU1tVyxRQUFTLE9BQU8sQ0FDckMsRUFDS3VCLEVBQWtCanVCLEVBQUcwc0IsUUFBUXhzQixRQUNuQyxNQUFPLElBQUssT0FDVixNQUFNb3RCLEVBQVEsQ0FDWixJQUFHL1csRUFBQUEsRUFBTW1XLFVBQU5uVyxZQUFBQSxFQUFlK1csTUFDbEIsQ0FBQ1csQ0FBZSxFQUFHZixHQUVyQixPQUFBM2IsRUFBQUEsWUFBQXVjLEVBQXdCQyxFQUFvQnRzQixNQUFLbXFCLEdBQUcwQixDQUFLLEVBQUxBLEVBQUssQ0FBQW5CLFFBQUFBLElBQUEsQ0FBTG1CLENBQUssQ0FBQSxDQUFBLEVBRTdELENBQ0QsQ0FBQSxRQzNJY2hpQixxQkFBZ0IsQ0FDN0J4TCxLQUFNLFNBQ05tc0IsYUFBYyxHQUNkMVYsTUFBTyxDQUlMOFYsS0FBTSxDQUNKdm5CLEtBQU1vbkIsT0FDTkMsUUFBU1EsT0FDVHVCLFFBQVMsRUFDVixDQUNGLEVBQ0RwQixNQUFNdlcsRUFBTzVXLEVBQUcsQ0FDZCxLQUFNLENBQUVLLEdBQUFBLENBQUksRUFBRzJILEdBQUssTUFBQSxFQUNkd21CLEVBQXFCcHVCLEVBQUFBLFNBQVMsSUFBSyxPQUN2QyxHQUFJd1csRUFBTThWLFFBQVE5VixFQUFBQSxFQUFNOFYsT0FBTjlWLFlBQUFBLEVBQVk2WCxRQUFRLE9BQVEsRUFBRyxDQUMvQyxHQUFJN1gsRUFBTThWLEtBQUtnQyxXQUFXLE1BQU0sRUFBRyxDQUNqQyxNQUFNQyxFQUFnQmIsMEJBQXdCLFdBQVcsRUFFekQsTUFBTyxJQUFLLENBRVYsTUFBTTN0QixFQUFPeVcsRUFBTThWLEtBQUtrQyxRQUFRLE9BQVEsRUFBRSxFQUMxQyxPQUFBaGQsRUFBQSxZQUFBK2MsRUFBQXJCLGFBQUEsQ0FBQSxNQUF3QixVQUFTLEtBQVFudEIsQ0FBVUgsRUFBQUEsRUFBSWl1QixLQUFLLEVBQUEsSUFBQSxFQUUvRCxDQUVELE1BQU1VLEVBQWdCYiwwQkFBd0IsV0FBVyxFQUV6RCxNQUFPLElBQ0xsYyxFQUFBLFlBQUErYyxFQUFBckIsYUFBQSxDQUFBLE1BQXdCLFVBQVMsS0FBUTFXLEVBQU04VixJQUFVMXNCLEVBQUFBLEVBQUlpdUIsS0FBSyxFQUFBLElBQUEsQ0FFckUsQ0FFRCxNQUFNVSxFQUFnQmIsRUFBQUEsd0JBQXdCbFgsRUFBTThWLElBQUksRUFDeEQsT0FBSSxPQUFPaUMsR0FBYSxTQUNmLElBQ0wvYyxFQUFBQSxZQUFBLE9BQUEsQ0FBQSxNQUFvQixpQkFBaUIsRUFBQSxDQUFHK2MsQ0FBUSxDQUFBLEVBR2hEdHVCLEVBQUdxc0IsS0FBS21DLFlBQ0gsSUFDTGpkLEVBQUEsWUFBQStjLEVBQUFyQixhQUFBLENBQUEsTUFBd0IsU0FBZXR0QixFQUFBQSxFQUFJaXVCLEtBQUssRUFBQSxJQUFBLEVBRzNDLElBQ0xyYyxjQUFBMlosRUFBQUEsaUJBQUEsU0FBQSxFQUFBK0IsRUFBQUEsV0FBQSxDQUFBLE1BQ2tCLFdBQWV0dEIsRUFBSWl1QixLQUFLLEVBQUEsQ0FBQXpCLFFBQUFBLElBQUE1YSxDQUFBQSxFQUFBLFlBQUErYyxFQUFBLEtBQUEsSUFBQSxDQUFBLENBQUEsQ0FBQSxDQVNoRCxDQUFDLEVBRUQsTUFBTyxJQUNFSCxFQUFtQjFzQixPQUU5QixDQUNELENBQUEsRUN6RERndEIsR0FBZW5qQixrQkFBZ0IsQ0FDN0IsS0FBTSxZQUNOLFdBQVksQ0FBRW9qQixLQUFBQSxHQUFBQSxJQUFLLEVBQ25CLE1BQU8sQ0FJTCxLQUFNLENBQ0osS0FBTSxNQUNSLEVBSUEsS0FBTSxDQUNKLEtBQU0sUUFDTixRQUFTLEVBQ1gsQ0FDRixFQUNBLE1BQU1uWSxFQUFPNVcsRUFBSyxDQUVoQixNQUFPLENBQUUsV0FEVXlILE1BQUksSUFBSSxDQUNQLENBQ3RCLENBQ0YsQ0FBQyx5Q0NqQ0M4akIsbUJBRU8sTUFBQSxvREFETCxNQUFzQ3lELEVBQUEsZUFBQSxDQUFBLGFBQUEsQ0FBQSxrQkFBQTdpQixFQUFBLElBQUEsQ0FBQSxDQUFBLENBQUEsRUFBQSxlQUFSdWdCLEVBQUksQ0FBQSxJQUFBLCtFQ1N0Q3VDLEdBQWV0akIsa0JBQWdCLENBQzdCLEtBQU0sWUFDTixNQUFPLENBQ0wsS0FBTSxDQUNKLEtBQU0sT0FDTixTQUFVLEVBQ1osRUFDQSxLQUFNLENBQ0osS0FBTSxDQUFDLE9BQVEsTUFBTSxFQUNyQixRQUFTLEVBQ1gsRUFDQSxLQUFNLENBQ0osS0FBTSxRQUNOLFFBQVMsRUFDWCxDQUNGLEVBQ0EsTUFBTWlMLEVBQU8sQ0FDWCxNQUFNc1ksRUFBVzl1QixFQUFBQSxTQUFTLElBQU0sSUFBSXdXLEVBQU0sSUFBSSxFQUFFLEVBRTFDdVksRUFBVy91QixFQUFBQSxTQUFTLElBQXFCLENBQ3ZDLEtBQUEsQ0FBRSxLQUFBZ1QsQ0FBUyxFQUFBd0QsRUFDYixJQUFBeE4sRUFBSSxHQUFHZ0ssQ0FBSSxHQUNmLE9BQUFoSyxFQUFJLEdBQUdBLEVBQUUsUUFBUSxLQUFNLEVBQUUsQ0FBQyxLQUNuQixDQUNMLE1BQU9BLEVBQ1AsT0FBUUEsQ0FBQSxDQUNWLENBQ0QsRUFDTSxNQUFBLENBQUUsU0FBQThsQixFQUFVLFNBQUFDLEVBQ3JCLENBQ0YsQ0FBQyxRQ3ZDb0NyakIsR0FBWSxDQUFBLE1BQUEsOERBRG5DLFNBQUFxZixHQURkaGYsTUFDZ0NpakIsRUFBSTdpQixFQUFBQyxFQUFBLG1EQUNoQyxNQUFBd2lCLEVBQUEsZUFBQSxDQUFBLGNBRU03aUIsRUFGTixNQUVNLGNBQUEsQ0FBQSxDQUFBLEVBQUEsc0pDYVZrakIsR0FBZTFqQixrQkFBZ0IsQ0FDN0IsS0FBTSxVQUNOLE1BQU8sQ0FDTCxNQUFPLENBQ0wsS0FBTSxPQUNOLFFBQVMsRUFDWCxFQUNBLFdBQVksQ0FDVixLQUFNLE9BQ04sUUFBUyxLQUFPLENBQUEsRUFDbEIsRUFDQSxhQUFjLENBQ1osS0FBTSxPQUNOLFFBQVMsS0FBTyxDQUFBLEVBQ2xCLENBQ0YsQ0FDRixDQUFDLDhCQy9CRyxTQUFBd2YsR0FBQWhmLEVBR01DLEVBSE5DLEVBR01DLEVBSElDLEVBQUNDLEVBQWdCOGlCLENBRi9CLE9BQUE3aUIsWUFBQSxFQUFBQyxxQkFHU2tOLE1BQUs5TixHQUNSLENBQTBCZSxxQkFBQSxNQUFBeWdCLEVBQUFBLFdBQUEsQ0FBQSxNQUFBLFNBQUFuaEIsRUFBQSxVQUFBLEVBQUEsQ0FBQW9qQixFQUFBLGdCQUFBQyxFQUFBLGdCQUFBcmpCLEVBQUEsS0FBQSxFQUFBLElBQUEsQ0FBQSxFQUU1QlEsYUFBQVIsRUFBQSxPQUFBLE9BQUEsQ0FDRSxFQUFBLEVBQUEsRUFBQVUscUJBQUEsTUFBQXlnQixFQUFBQSxXQUFBLENBQUEsTUFBQSxXQUFBbmhCLEVBQUEsWUFBQSxFQUFBLHlFQ0RTUixxQkFBZ0IsQ0FDN0J4TCxLQUFNLFlBQ055VyxNQUFPLENBSUw2WSxRQUFTLENBQUUsRUFFWC9DLEtBQU0sQ0FBRSxDQUNULEVBQ0RTLE1BQU12VyxFQUFLLENBQ1QsS0FBTSxDQUFFdlcsR0FBQUEsQ0FBSSxFQUFHMkgsR0FBSyxNQUFBLEVBRXBCLE1BQU8sSUFDQTRPLEVBQU02WSxRQUdYN2QsRUFBQUEsWUFBQSxNQUFBLENBQUEsTUFBQSxZQUFBQSxFQUFBQSxDQUFBQSxFQUFBLFlBQUEyWixtQkFBQSxTQUFBLEVBQUEsQ0FBQSxNQUVvQixlQUFjLEtBQVFsckIsRUFBR3F2QixNQUFNQyxPQUFPLEVBQUEsSUFBQSxDQUFBLENBQUEsRUFKakQsSUFRYixDQUNELENBQUEsRUNuQkRDLEdBQWVqa0Isa0JBQWdCLENBQzdCLEtBQU0sT0FDUixDQUFDLCtCQ1hHd2YsR0FBYWhmLEVBQUFDLEVBQUFDLEVBQUFDLEVBQUFDLEVBQUFDLEVBQUEsd0hDVzJCLFNBQUF5ZixHQUFBN2lCLEVBQUEsQ0FBQSxPQUFBLE9BQUFBLEdBQUEsWUFBQThpQixPQUFBQyxVQUFBQyxTQUFBNUMsS0FBQXBnQixDQUFBLElBQUFpakIsbUJBQUFBLENBQUFBLEVBQUEsUUFBQWpqQixDQUFBLENBQUEsQ0FHNUMsU0FBU3ltQixHQUFrQnppQixFQUFhMGlCLEVBQWlCLENBQ3ZELEdBQUkxaUIsRUFBTzBpQixDQUFTLFlBQWFqZixNQUFPLENBQ3RDLE1BQU1rZixFQUFTM2lCLEVBQU8waUIsQ0FBUyxFQUMvQjFpQixFQUFPMGlCLENBQVMsRUFBS0UsR0FBZSxDQUNsQyxVQUFXQyxLQUFTRixFQUNsQkUsRUFBTUQsQ0FBTSxFQUdqQixDQUNILENBQ0EsTUFBTUUsR0FBVyxDQUFDLE1BQU8sT0FBUSxJQUFLLElBQUssTUFBTyxLQUFNLEtBQU0sSUFBSSxFQUluRHZrQixxQkFBZ0IsQ0FDN0J4TCxLQUFNLG9CQUNObXNCLGFBQWMsR0FDZDFWLE1BQU8sQ0FJTHVaLFdBQVksQ0FBRSxFQUlkaHdCLEtBQU0sQ0FBRSxFQUlSd3RCLE1BQU8sQ0FDTHhvQixLQUFNK21CLE1BQ1AsRUFJRGxtQixTQUFVLENBQ1JiLEtBQU0rbUIsTUFDUCxFQUlEa0UsR0FBSSxDQUNGanJCLEtBQU0rbUIsTUFDUCxFQUlENkQsT0FBUSxDQUNONXFCLEtBQU0rbUIsTUFDUCxFQUlEM2hCLE1BQU8sQ0FDTHBGLEtBQU0rbUIsTUFDUCxFQUlEOU4sT0FBUSxDQUNOalosS0FBTSxDQUFDb25CLE9BQVFMLE1BQU0sQ0FDdEIsRUFJRHRWLE1BQU8sQ0FBRSxFQUlUakYsT0FBUSxDQUFFLEVBS1YwZSxlQUFnQixDQUNkbHJCLEtBQU0ybkIsUUFDTk4sUUFBUyxFQUNWLENBQ0YsRUFDRDhELE1BQU8sQ0FBQyxjQUFlLG9CQUFxQixTQUFTLEVBQ3JEbkQsTUFBTXZXLEVBQVk1VyxFQUFHLENBQ25CLEtBQU0sQ0FBRUssR0FBQUEsQ0FBSSxFQUFHMkgsR0FBSyxNQUFBLEVBQ2QsQ0FBRW1GLE1BQUFBLENBQU8sRUFBR1MsR0FBUSxFQUMxQjJpQixFQUFPLFFBQUMsWUFBYSxJQUNaM1osRUFBTXJNLEtBQ2QsRUFFRHNCLEVBQUFBLFVBQVUsSUFBSyxDQUNiN0wsRUFBSXd3QixLQUFLLFVBQVc1WixFQUFNck0sS0FBSyxDQUNqQyxDQUFDLEVBRUQsTUFBTWttQixFQUFZaHBCLEVBQUFBLE1BRVppcEIsRUFBV3R3QixFQUFBQSxTQUFTLElBQUssQ0FDN0IsTUFBTWdlLEVBQXNCLENBQzFCamUsS0FBTSxhQUNOd3dCLEtBQU0sR0FDTkMsT0FBUSxHQUNSMXRCLFVBQVc4cEIsUUFFVHBXLEVBQU13SCxTQUNKLE9BQU94SCxFQUFNd0gsUUFBVyxTQUMxQkEsRUFBT2plLEtBQU95VyxFQUFNd0gsT0FFcEJqUixFQUFNaVIsRUFBUXhILEVBQU13SCxNQUFNLEdBSTlCLE1BQU0rUixFQUFhdlosRUFBTXVaLGFBQWU5dkIsRUFBRzhFLE9BQVMsUUFBVTZuQixPQUFZLE1BQ3BFNkQsRUFBeUIsWUFBY3pTLEVBQU9qZSxLQUM5Qzh0QixFQUFRLENBQ1p4bUIsSUFBS2dwQixFQUdMLENBQUNyUyxFQUFPamUsSUFBSSxFQUFHZ3dCLEVBQ2YsQ0FBQ1UsQ0FBc0IsRUFBSS91QixHQUFjLENBQ3ZDLEdBQUlBLElBQ0VzYyxFQUFPdVMsT0FDVDd1QixFQUFRQSxFQUFNNnVCLFFBRVp2UyxFQUFPd1MsUUFBUSxDQUNqQixNQUFNRSxFQUFNQyxPQUFPanZCLENBQUssRUFFcEJrdkIsTUFBTUYsQ0FBRyxJQUVYaHZCLEVBQVFndkIsRUFFWCxDQUVDMVMsRUFBT2xiLFlBQ1RwQixFQUFRc2MsRUFBT2xiLFVBQVVwQixDQUFLLEdBRTVCQSxJQUFVa3JCLFFBQWFwVyxFQUFNeVosaUJBQy9CdnVCLEVBQVEsTUFFVjlCLEVBQUl3d0IsS0FBSyxvQkFBcUIxdUIsQ0FBSyxDQUNwQyxFQUNELEdBQUc4VSxFQUFNQSxPQUdMbVosRUFFRixDQUFFLEdBQUduWixFQUFNbVosT0FBUSxHQUFHblosRUFBTXdaLElBRWhDL3NCLE9BQUFBLEVBQUU2TyxRQUFRNmQsRUFBUSxDQUFDanVCLEVBQU95QixJQUFPLENBQy9CLE1BQU0wdEIsRUFBVW52QixFQUNYeUIsRUFBSW1yQixXQUFXLElBQUksSUFDdEJuckIsRUFBTUYsRUFBRTZ0QixVQUFVLE1BQVEzdEIsQ0FBRyxHQUUvQjBxQixFQUFNMXFCLENBQUcsRUFBS3lzQixHQUNMaUIsRUFBUSxDQUFFLEdBQUdyYSxFQUFNck0sTUFBT3lsQixPQUFBQSxDQUFRLENBQUEsQ0FFN0MsQ0FBQyxFQUVNL0IsQ0FDVCxDQUFDLEVBRUtrRCxFQUFpQkEsSUFBSyxDQUMxQixNQUFNbnJCLEVBQWdCLENBQUEsRUFDaEJvckIsRUFBaUJBLENBQUM5dEIsRUFBV0MsSUFBZSxDQUM1Q0QsYUFBZ0JxcEIsU0FDbEIzbUIsRUFBU3pDLENBQUcsRUFBS2dILEdBQ1JqSCxFQUFLLENBQUUsR0FBR3NULEVBQU1yTSxNQUFPQSxNQUFBQSxDQUFPLENBQUEsRUFHdkN2RSxFQUFTekMsQ0FBRyxFQUFJLElBQ1BELEdBSWJELE9BQUFBLEVBQUU2TyxRQUFRMEUsRUFBTTVRLFNBQVVvckIsQ0FBYyxFQUN4Qy90QixFQUFFNk8sUUFBUTBFLEVBQU0rVyxNQUFPeUQsQ0FBYyxFQUM5QnByQixHQU9IcXJCLEVBQXdDanhCLEVBQUFBLFNBQVMsSUFBSyxDQUMxRCxNQUFNc0csRUFBcUIsQ0FDekI0cUIsaUJBQWtCLEdBQ2xCN2dCLFVBQVdzSixFQUFLLE1BQUNuRCxFQUFNelcsSUFBSSxHQUFLRSxFQUFHa3hCLE1BQU1weEIsTUFFM0MsSUFBSXF4QixFQUFZOXFCLEVBQUkrSixVQUNwQixPQUFLeWYsR0FBU3hlLFNBQVM4ZixDQUFTLElBQzFCLE9BQU9BLEdBQWMsV0FDdkJBLEVBQVlDLEVBQUFBLGlCQUFpQkQsQ0FBUyxJQUVwQ0EsR0FBQUEsWUFBQUEsRUFBV3J4QixRQUFTLDBCQUV0QnVHLEVBQUk0cUIsaUJBQW1CLEtBRzNCNXFCLEVBQUkrSixVQUFZK2dCLEVBQ1Q5cUIsQ0FDVCxDQUFDLEVBRUtnckIsRUFBbUJQLEVBRXpCLFNBQVNRLEdBQVksQ0FDbkIsT0FBSU4sRUFBa0J2dkIsTUFBTXd2QixpQkFDbkJNLEVBQWlCLEVBRW5CQyxFQUFnQixDQUN6QixDQUNBLFNBQVNBLEdBQWdCLENBQ3ZCLE9BQU9wQixFQUFVM3VCLEtBQ25CLENBR0EsZUFBZTh2QixHQUFpQixDQUM5QixNQUFNdk0sRUFBSXdNLElBQ1YsT0FBSXhNLEdBR0csSUFBSXlNLFFBQVEsQ0FBQ2hjLEVBQVNDLElBQVUsQ0FDckNnYyxFQUFrQmpjLEVBQVNDLEVBQVEsQ0FBQyxDQUN0QyxDQUFDLENBQ0gsQ0FDQSxTQUFTZ2MsRUFBa0JqYyxFQUFjQyxFQUFhaWMsRUFBYSxDQUNqRUMsV0FBVyxJQUFLLENBQ2QsTUFBTTVNLEVBQUl3TSxJQUNWLEdBQUl4TSxHQUFLLEtBQU0sQ0FDYnZQLEVBQVF1UCxDQUFDLEVBQ1QsTUFDRCxDQUVELEdBREEyTSxJQUNJQSxFQUFRLEdBQUksQ0FDZGpjLEVBQU8sSUFBSW1jLE1BQU0sVUFBVSxDQUFDLEVBQzVCLE1BQ0QsQ0FDREgsRUFBa0JqYyxFQUFTQyxFQUFRaWMsQ0FBSyxDQUN6QyxFQUFFLEdBQUcsQ0FDUixDQUVBaHlCLE9BQUFBLEVBQUlrYixPQUFPLENBQ1R0RSxNQUFBQSxFQUNBaWIsaUJBQUFBLEVBQ0FGLGFBQUFBLEVBQ0FDLGtCQUFBQSxDQUNELENBQUEsRUFFTSxJQUFLLENBQUEsSUFBQU8sRUFFVixNQUFNQyxFQUFTQyxFQUFBQSxXQUFXM0IsRUFBUzV1QixNQUFPOUIsRUFBSWl1QixLQUFLLEVBR25ELEdBRkE0QixHQUFrQnVDLEVBQVEsVUFBVSxFQUNwQ3ZDLEdBQWtCdUMsRUFBUSxRQUFRLEVBQzlCeGIsRUFBTWpGLE9BQ1IsT0FBT2lGLEVBQU1qRixPQUFPLENBQUUsR0FBR2lGLEVBQU1yTSxNQUFPMGpCLE1BQU9tRSxDQUFNLENBQUUsRUFFdkQsTUFBTVosRUFBWWMsRUFBTyxRQUFDakIsRUFBa0J2dkIsTUFBTTJPLFNBQVMsRUFDM0QsT0FBQW1CLEVBQUEsWUFBQTRmLEVBQXNCWSxFQUFNbkcsR0FBQWtHLEVBQUdULEVBQWdCLENBQUUsRUFBQVMsRUFBQSxDQUFBM0YsUUFBQUEsSUFBQSxDQUFBMkYsQ0FBQSxDQUFBLENBQUEsRUFFckQsQ0FDRCxDQUFBLEVDMVFjeG1CLHFCQUFnQixDQUM3QnhMLEtBQU0sZUFDTm1zQixhQUFjLEdBQ2QxVixNQUFPLENBSUwrVyxNQUFPLENBQ0x4b0IsS0FBTXduQixRQUNQLEVBSURwaUIsTUFBTyxDQUNMcEYsS0FBTSttQixNQUNQLENBQ0YsRUFDRGlCLE1BQU12VyxFQUFLLENBQ1QsTUFBTyxJQUNFQSxFQUFNK1csTUFBTS9XLEVBQU1yTSxLQUFLLENBRWxDLENBQ0QsQ0FBQSxFQ3RCY29CLHFCQUFnQixDQUM3QjRtQixXQUFZLEdBQ1pweUIsS0FBTSxXQUNOeVcsTUFBTyxDQUNMNGIsV0FBWSxDQUNWcnRCLEtBQU13bkIsUUFDUCxFQUNEcGlCLE1BQU8sQ0FDTHBGLEtBQU0rbUIsTUFDUCxDQUNGLEVBQ0RpQixRQUFVLEVBQ1Z4YixRQUFNLENBQ0osT0FBTyxLQUFLNmdCLFdBQVcsS0FBS2pvQixLQUFLLENBQ25DLENBQ0QsQ0FBQSxFQ2dHRGtvQixHQUFlOW1CLGtCQUFnQixDQUM3QixLQUFNLFNBQ04sTUFBTyxDQUlMLFlBQWEsQ0FDWCxLQUFNLE9BQ04sU0FBVSxDQUNSLE1BQU8sRUFDVCxDQUNGLEVBYUEsUUFBUyxDQUNQLEtBQU0sT0FDTixRQUFTLE1BQ1gsRUFVQSxNQUFPLENBQ0wsS0FBTSxPQUNOLFFBQVMsTUFDWCxFQUlBLFFBQVMsQ0FDUCxLQUFNLFNBQ04sUUFBUyxNQUNYLEVBSUEsZUFBZ0IsQ0FDZCxLQUFNLFNBQ04sUUFBUyxNQUNYLEVBSUEsYUFBYyxDQUNaLEtBQU0sU0FDTixRQUFTLE1BQ1gsRUFJQSxTQUFVLENBQ1IsS0FBTSxTQUNOLFFBQVMsTUFDWCxFQUlBLFlBQWEsQ0FDWCxLQUFNLFNBQ04sUUFBUyxNQUNYLEVBSUEsTUFBTyxDQUNMLEtBQU0sT0FDTixRQUFTLEtBQ0EsR0FFWCxFQUlBLFFBQVMsQ0FDUCxLQUFNLE9BQ04sUUFBUyxNQUNYLEVBSUEsTUFBTyxDQUNMLEtBQU0sT0FDTixRQUFTLE1BQ1gsRUFJQSxLQUFNLENBQ0osS0FBTSxPQUNOLFFBQVMsTUFDWCxFQUlBLElBQUssQ0FDSCxLQUFNLE9BQ04sUUFBUyxNQUNYLEVBSUEsSUFBSyxDQUNILEtBQU0sT0FDTixRQUFTLE1BQ1gsRUFJQSxTQUFVLENBQ1IsS0FBTSxPQUNOLFFBQVMsTUFDWCxFQUlBLE9BQVEsQ0FDTixLQUFNLE1BQ1IsRUFFQSxNQUFPLENBQ0wsS0FBTSxTQUNOLFFBQVMsSUFDWCxDQUNGLEVBQ0EsTUFBTyxDQUFDLFFBQVMsU0FBVSxVQUFXLGtCQUFtQixlQUFnQixNQUFNLEVBQy9FLE1BQU1pTCxFQUFPNVcsRUFBSyxVQUNWLEtBQUEsQ0FBRSxNQUFBbU4sR0FBVVMsS0FDWixDQUFFLEdBQUF2TixHQUFPMkgsR0FBQUEsUUFDVCxDQUFFLGtCQUFBOEYsRUFBbUIsV0FBQWlCLENBQVcsRUFBSWMsR0FBVyxFQUMvQ2lJLEVBQVVyUSxFQUFBQSxNQUNWaUosRUFBOEJpQyxXQUFTLENBQUEsQ0FBRSxFQUN6QyxDQUFFLE1BQUFrTSxHQUFVQyxFQUFBQSxxQkFHbEJ6YixFQUFFLEtBQUt1VCxFQUFNLFFBQVV0VCxHQUFjLENBQy9CQSxFQUFLLE9BQVMsT0FBU0EsRUFBSyxpQkFBaUJ3SyxHQUFxQnhLLEVBQUssaUJBQWlCMEssS0FDMUZ0TSxHQUFPLEtBQUssNENBQTRDLENBQzFELENBQ0QsRUFDRCxTQUFTZ3hCLEdBQW9CLENBQzNCLE1BQU1oaUIsRUFBTyxDQUFBLEVBRWIsT0FBQXJOLEVBQUUsS0FBS3VULEVBQU0sUUFBUyxDQUFDdFQsRUFBV0MsSUFBYSxDQUN2QyxNQUFBb3ZCLEVBQVc1WSxFQUFBQSxNQUFNelcsRUFBSyxLQUFLLEVBQzdCcXZCLElBQWEsUUFDYnR2QixFQUFBLElBQUlxTixFQUFNbk4sRUFBS292QixDQUFRLENBQzNCLENBQ0QsRUFDRHhsQixFQUFNdUQsRUFBTXJOLEVBQUUsVUFBVXVULEVBQU0sV0FBVyxDQUFDLEVBQ25DbEcsQ0FDVCxDQUVBLE1BQU1raUIsRUFBY0YsSUFDcEJHLEVBQVlELENBQVcsRUFFakIsTUFBQXJvQixFQUErQm5LLEVBQUFBLFNBQVMsS0FDckMsQ0FDTCxJQUFLd3lCLEVBQ0wsS0FBQWxpQixFQUNBLE1BQU9rRyxFQUFNLE1BQ2IsS0FBTUEsRUFBTSxNQUFRLE1BQ3BCLE1BQU81VyxFQUFJLE1BQ1gsZ0JBQUE4eUIsQ0FBQSxFQUVILEVBRUQsU0FBU3BrQixHQUFlLENBQ3RCLE9BQU9uRSxFQUFNLEtBQ2YsQ0FFTSxNQUFBd29CLEVBQWtCaGtCLEVBQVcsSUFDMUI2SCxFQUFNLFFBQ1psSSxDQUFZLEVBR2YsU0FBU3NrQixFQUFldGlCLEVBQVcsQ0FDN0JBLEdBQVEsTUFHWnJOLEVBQUUsS0FBS3VULEVBQU0sUUFBUyxDQUFDdFQsRUFBV0MsSUFBYSxDQUM3QyxJQUFJekIsRUFBUXVCLEVBQUUsSUFBSXFOLEVBQU1uTixDQUFHLEVBQ3ZCRCxFQUFLLGNBQ1BBLEVBQUssYUFBYSxDQUNoQixNQUFBeEIsRUFDQSxJQUFBeUIsRUFDQSxJQUFLcXZCLEVBQ0wsS0FBQWxpQixFQUNBLE1BQU9rRyxFQUFNLE1BQ2IsS0FBTUEsRUFBTSxJQUFBLENBQ2IsQ0FDSCxDQUNELENBQ0gsQ0FFQSxTQUFTcWMsR0FBYyxDQUNkLE9BQUF2aUIsQ0FDVCxDQUNBLFNBQVNtaUIsRUFBWWhYLEVBQWVqWixFQUE4QixHQUFJLENBR2hFLEdBRkpvd0IsRUFBZW5YLENBQVEsRUFFbkJqWixFQUFRLFlBQWMsR0FDeEIsVUFBV1csS0FBT21OLEVBQ2hCLE9BQU9BLEVBQUtuTixDQUFHLEVBR25CNEosRUFBTXVELEVBQU1tTCxDQUFRLEVBQ2QsS0FBQSxDQUFFLFlBQUFxWCxDQUFnQixFQUFBdHdCLEVBQ3BCc3dCLEdBQ0Y3dkIsRUFBRSxRQUFRdVQsRUFBTSxRQUFTLENBQUNoTSxFQUFhckgsSUFBYSxDQUM1QyxNQUFBekIsRUFBUTRPLEVBQUtuTixDQUFHLEVBQ3RCNHZCLEVBQWM1dkIsRUFBS3pCLENBQUssQ0FBQSxDQUN6QixDQUVMLENBRUEsU0FBU3N4QixLQUFZbGIsRUFBVSxDQUM3QixPQUFPL0ssRUFBTSxDQUFBLEVBQUl5SixFQUFNLElBQUssR0FBR3NCLENBQUcsQ0FDcEMsQ0FFQSxTQUFTbWIsRUFBZS92QixFQUE2QixDQUNuRCxNQUFPLENBQUUsSUFBS0EsRUFBSyxJQUFLLEdBQUdpSCxFQUFNLE1BQ25DLENBV1MsU0FBQTRvQixFQUFjNXZCLEVBQWF6QixFQUFZLENBQ3hDLE1BQUFtdUIsRUFBUSxDQUFFLElBQUExc0IsRUFBSyxNQUFBekIsRUFBTyxRQUFTK2MsRUFBTyxHQUFHdFUsRUFBTSxNQUFPLFVBQVcsRUFBTSxFQUN6RXZLLEVBQUEsS0FBSyxlQUFnQml3QixDQUFLLEVBQzlCLElBQUlpRCxFQUFjdGMsRUFBTSxRQUFRclQsQ0FBRyxFQUFFLFlBQ2pDMnZCLElBQ0VBLGFBQXVCLFNBQ3pCQSxFQUFZakQsQ0FBSyxFQUNSaUQsRUFBWSxRQUNyQkEsRUFBWSxPQUFPakQsQ0FBSyxFQUc5QixDQUVNLE1BQUFxRCxFQUFvQjdyQixNQUFJLENBQUEsQ0FBRSxFQUVoQyxTQUFTOHJCLEVBQWVod0IsRUFBYSxDQUM1QixPQUFBK3ZCLEVBQWEsTUFBTS92QixDQUFHLENBQy9CLENBRVMsU0FBQXV2QixFQUFnQnZ2QixFQUFhMkssRUFBVSxHQUFPLE9BQ3JELE9BQU9yTixFQUFBMHlCLEVBQWVod0IsQ0FBRyxJQUFsQixZQUFBMUMsRUFBcUIsZ0JBQWdCcU4sRUFDOUMsQ0FFTSxNQUFBc2xCLEVBQWlCL3JCLE1BQUksQ0FBQSxDQUFFLEVBRzdCcEUsRUFBRSxTQUFReEMsR0FBQStWLEVBQU0sUUFBTixZQUFBL1YsR0FBYSxPQUFRLENBQUM0eUIsRUFBZ0Jsd0IsSUFBYSxDQUN2RGt3QixFQUFVLFlBQWMsSUFDWEQsRUFBQSxNQUFNLEtBQUtqd0IsQ0FBRyxDQUMvQixDQUNELElBRUd3VCxFQUFBSCxFQUFNLFFBQU4sWUFBQUcsRUFBYSxhQUFjLFNBQ2R5YyxFQUFBLE1BQVFBLEVBQWUsTUFBTSxPQUFTLEVBQUlBLEVBQWUsTUFBTSxDQUFDLEVBQUksTUFJckYsTUFBTUUsRUFBZ0Iza0IsRUFDcEIsSUFDUzZILEVBQU0sTUFFZmxJLEVBQ0EsS0FDQ2lsQixHQUFVLENBQ1QsR0FBSSxDQUFDQSxFQUNILE1BQU8sR0FHVCxNQUFNQyxFQUFtQixDQUFBLEVBQ3pCdndCLEVBQUUsUUFBUXN3QixHQUFBLFlBQUFBLEVBQU8sT0FBUSxDQUFDRixFQUFnQmx3QixJQUFnQixDQUN4REYsRUFBRSxRQUFRb3dCLEVBQVUsUUFBVW53QixHQUFjLENBQzFDLEdBQUl5dkIsRUFBZ0IsTUFBTXp2QixDQUFJLEdBQUssS0FBTSxDQUNqQ2dFLEdBQUEsT0FBTyxLQUFLLFdBQWFoRSxDQUFJLEVBQ25DLE1BQ0YsQ0FDQXN3QixFQUFZdHdCLENBQUksRUFBSUMsQ0FBQSxDQUNyQixDQUFBLENBQ0YsRUFFRCxNQUFNNEIsRUFBT3d1QixFQUFNLFVBQ25CLElBQUlFLEVBQVUsQ0FDWixPQUFReHpCLEVBQUcsU0FBUyxLQUNwQixNQUFPQSxFQUFHLGFBQWEsSUFBQSxFQUV6QixPQUFJOEUsSUFBUyxTQUNIMHVCLEVBQUEsT0FBU3h6QixFQUFHLEtBQUssS0FDakJ3ekIsRUFBQSxNQUFReHpCLEVBQUcsUUFBUSxNQUV0QjhNLEVBQ0wsQ0FDRSxRQUFBMG1CLEVBQ0EsWUFBQUQsQ0FDRixFQUNBRCxDQUFBLENBRUosQ0FBQSxFQUdJRyxFQUF5QjF6QixFQUFBQSxTQUFTLElBQU0sQ0FDNUMsTUFBTTJSLEVBQWUsQ0FBQSxFQUVyQixPQUFBMU8sRUFBRSxRQUFRMHZCLEVBQWdCLE1BQU8sQ0FBQ2p4QixFQUFZeUIsSUFBZ0IsU0FDNUQsTUFBTUQsRUFBT0QsRUFBRSxVQUFVdVQsRUFBTSxVQUFZLENBQUEsQ0FBRSxFQUNyQzlVLEVBQUFxTCxFQUFNN0osRUFBTXhCLENBQUssRUFDekJBLEVBQU0sSUFBTXlCLEVBQ1J6QixFQUFNLE9BQVMsT0FDakJBLEVBQU0sTUFBUWdPLEdBQVUsaUJBRXRCalAsRUFBQTZ5QixFQUFjLFFBQWQsWUFBQTd5QixFQUFxQixjQUFlLFFBQVFrVyxFQUFBMmMsRUFBYyxRQUFkLFlBQUEzYyxFQUFxQixZQUFZeFQsS0FBUSxPQUN2RndPLEVBQVEsS0FBS2pRLENBQUssRUFFZEEsRUFBQSxJQUFNc3hCLEVBQVN0eEIsRUFBTSxHQUFHLENBQUEsQ0FDL0IsRUFFT2lRLEVBQUEsS0FBSyxDQUFDMUksRUFBUWdILElBQ2JoSCxFQUFFLE1BQVFnSCxFQUFFLEtBQ3BCLEVBRU0wQixDQUFBLENBQ1IsRUFFRCxTQUFTZ2lCLEdBQWEsQ0FDcEIsT0FBT2pjLEVBQVEsS0FDakIsQ0FDQSxlQUFlclgsR0FBUSxDQUVyQixNQUFNbXlCLEVBQWNGLElBQ2RzQixFQUFVM3dCLEVBQUUsUUFBUXFOLENBQUksRUFDOUIsVUFBV3NWLEtBQVNnTyxFQUFTLENBQzNCLE1BQU1DLEVBQWU1d0IsRUFBRSxJQUFJdXZCLEVBQWE1TSxFQUFNLENBQUMsQ0FBQyxFQUM1Q2lPLEdBQWdCLEtBQ2xCNXdCLEVBQUUsTUFBTXFOLEVBQU1zVixFQUFNLENBQUMsQ0FBQyxFQUV0QjNpQixFQUFFLElBQUlxTixFQUFNc1YsRUFBTSxDQUFDLEVBQUdpTyxDQUFZLENBRXRDLENBRUlyZCxFQUFNLFNBQ0YsTUFBQUEsRUFBTSxRQUFRck0sRUFBTSxLQUFLLEVBRWpDdkssRUFBSSxLQUFLLE9BQU8sQ0FDbEIsQ0FFQSxNQUFNazBCLEVBQWdCenNCLEVBQUFBLE1BQ2hCMHNCLEVBQWlCMXNCLE1BQUksQ0FBQSxDQUFFLEVBRTdCLFNBQVMyc0IsR0FBZUMsRUFBa0IsU0FDcEMsSUFBQ3h6QixFQUFBNnlCLEVBQWMsUUFBZCxNQUFBN3lCLEVBQXFCLFlBRzFCLFFBQVMwQyxLQUFPOHdCLEVBQWEsQ0FDM0IsTUFBTVYsR0FBUTVjLEVBQUEyYyxFQUFjLFFBQWQsWUFBQTNjLEVBQXFCLFlBQVl4VCxHQUMzQ293QixHQUFTLE9BQ0NVLEVBQUEsU0FBV1YsQ0FBSyxFQUFJLEdBRXBDLENBQ0YsQ0FDQSxlQUFlanpCLElBQVMsQ0FDdEIsTUFBTTR6QixFQUFnQixDQUFFLEdBQUcvcEIsRUFBTSxNQUFPLEtBQUFtRyxDQUFLLEVBQzdDLEdBQUlrRyxFQUFNLGdCQUNJLE1BQU1BLEVBQU0sZUFBZTBkLENBQWEsSUFDeEMsR0FDSCxNQUFBLEdBSVAsR0FBQSxDQUNGSCxFQUFVLE1BQVEsR0FDbEIsTUFBTTl6QixFQUFHLEtBQUssYUFBYXlYLEVBQVEsS0FBSyxFQUN4Q29jLEVBQVMsTUFBUSxTQUNWbnJCLEVBQVEsQ0FDZm1yQixFQUFTLE1BQVEsR0FDakIsTUFBTUssRUFBaUJsMEIsRUFBRyxLQUFLLHdCQUF3QjBJLENBQUMsRUFDeEQsTUFBQXFyQixHQUFlRyxDQUFjLEVBQzdCSixFQUFVLE1BQVFJLEVBQ2R2MEIsRUFBQSxLQUFLLGtCQUFtQnVLLEVBQU0sS0FBSyxFQUNqQ3hCLENBQ1IsQ0FFQSxNQUFNOFMsRUFBV3hZLEVBQUUsVUFBVTJVLEVBQUFBLE1BQU10SCxDQUFJLENBQUMsRUFDbEM4akIsRUFBYyxDQUFFLEdBQUdqcUIsRUFBTSxNQUFPLEtBQU1zUixHQWE1QyxHQVpBbmEsR0FBTyxNQUFNLGNBQWUsS0FBSyxVQUFVZ1AsQ0FBSSxDQUFDLEVBQ2hEck4sRUFBRSxLQUFLdVQsRUFBTSxRQUFTLENBQUN0VCxFQUFXQyxJQUFnQixDQUNoRCxJQUFJekIsRUFBUXVCLEVBQUUsSUFBSXdZLEVBQVV0WSxDQUFHLEVBQzNCRCxFQUFLLGNBQ1BBLEVBQUssYUFBYSxDQUNoQixNQUFBeEIsRUFDQSxJQUFBeUIsRUFDQSxHQUFHaXhCLENBQUEsQ0FDSixDQUNILENBQ0QsRUFFRzVkLEVBQU0sY0FDSSxNQUFNQSxFQUFNLGFBQWE0ZCxDQUFXLElBQ3BDLEdBQ0gsTUFBQSxHQWNYLEdBVEFueEIsRUFBRSxLQUFLdVQsRUFBTSxRQUFTLENBQUN0VCxFQUFXQyxJQUFnQixDQUM1Q0QsRUFBSyxTQUFXLEdBQ2hCRCxFQUFBLE1BQU13WSxFQUFVdFksQ0FBRyxFQUNaRCxFQUFLLFNBQVcsSUFFekJELEVBQUUsSUFBSXdZLEVBQVV0WSxFQUFLc1ksRUFBU3RZLENBQUcsQ0FBQyxDQUNwQyxDQUNELEVBRUdxVCxFQUFNLFNBQVUsQ0FDbEIsTUFBTWxRLEVBQU0sTUFBTWtRLEVBQU0sU0FBUzRkLENBQVcsRUFFNUMsR0FEQUEsRUFBWSxJQUFNOXRCLEVBQ2RBLElBQVEsR0FDSCxNQUFBLEVBRVgsQ0FFQSxPQURJMUcsRUFBQSxLQUFLLFNBQVV3MEIsQ0FBVyxFQUMxQjVkLEVBQU0sYUFDUSxNQUFNQSxFQUFNLFlBQVk0ZCxDQUFXLElBQ25DLEdBQ1AsSUFHUHgwQixFQUFBLEtBQUssVUFBV3cwQixDQUFXLEVBRXhCQSxFQUNULENBRUEzb0IsRUFBQUEsVUFBVSxJQUFNLENBRWR4SSxFQUFFLFFBQVEwdkIsRUFBZ0IsTUFBTyxDQUFDenZCLEVBQVdDLElBQWdCLENBQ3ZELEdBQUFELEVBQUssYUFBZSxLQUN0QixPQUVGLElBQUk0dkIsRUFBYzV2QixFQUFLLFlBQ3ZCLEdBQUk0dkIsR0FBZUEsRUFBWSxZQUFjLElBQVFBLEVBQVksT0FBUSxDQUN2RSxNQUFNakQsRUFBUSxDQUFFLElBQUExc0IsRUFBSyxNQUFPbU4sRUFBS25OLENBQUcsRUFBRyxRQUFTc2IsRUFBTyxHQUFHdFUsRUFBTSxNQUFPLFVBQVcsRUFBSyxFQUNuRjJvQixFQUFZLFFBQ2RBLEVBQVksT0FBT2pELENBQUssQ0FFNUIsQ0FBQSxDQUNELENBQUEsQ0FDRixFQUVELFNBQVN3RSxHQUFhbnhCLEVBQVcsQ0FDM0IsTUFBQSxHQUFBQSxHQUFRQSxFQUFLLE9BQVMsR0FJNUIsQ0FDQSxTQUFTb3hCLEdBQWNqQixFQUFnQixDQUlqQyxHQUhBLENBQUNBLEVBQVUsU0FHWEEsRUFBVSxPQUFTLEdBQ2QsTUFBQSxHQUdBLFFBQUFsd0IsS0FBT2t3QixFQUFVLFFBQVMsQ0FDakMsR0FBSVYsRUFBZ0IsTUFBTXh2QixDQUFHLEdBQUssS0FDaEMsU0FHRixHQURvQmt4QixHQUFhMUIsRUFBZ0IsTUFBTXh2QixDQUFHLENBQUMsRUFFbEQsTUFBQSxFQUVYLENBQ08sTUFBQSxFQUNULENBRUlxVCxFQUFNLE9BQ1JqSCxFQUFBLE1BQ0UsSUFDU2UsRUFFVCxDQUFDaWtCLEVBQVFuTyxJQUFXLENBQ2Q1UCxFQUFNLE9BQ0ZBLEVBQUEsTUFBTXJNLEVBQU0sS0FBSyxDQUUzQixFQUNBLENBQ0UsS0FBTSxHQUNOLFVBQVcsRUFDYixDQUFBLEVBSUosU0FBU3FxQixJQUFVLENBQ1gsTUFBQTFYLEVBQVMsS0FBSyxVQUFVMFYsQ0FBVyxFQUNuQ2lDLEVBQVEsS0FBSyxVQUFVbmtCLENBQUksRUFDakMsT0FBT3dNLElBQVcyWCxDQUNwQixDQUVNLE1BQUFDLEVBQWMxMEIsRUFBQUEsU0FBUyxJQUNwQmlELEVBQUUsTUFBTSxHQUFJdVQsRUFBTSxNQUFPNVcsRUFBSSxLQUFLLENBQzFDLEVBRUcsT0FBQUEsRUFBQSxLQUFLLE9BQVF1SyxFQUFNLEtBQUssRUFFckIsQ0FDTCxJQUFLLENBQUNtRyxFQUFXbk4sSUFDUkYsRUFBRSxJQUFJcU4sRUFBTW5OLENBQUcsRUFFeEIsSUFBSyxDQUFDbU4sRUFBV25OLEVBQWF6QixJQUFlLENBQ3pDdUIsRUFBQSxJQUFJcU4sRUFBTW5OLEVBQUt6QixDQUFLLEVBQ3RCcXhCLEVBQWM1dkIsRUFBS3pCLENBQUssQ0FDMUIsRUFDQSxHQUFBekIsRUFDQSxTQUFBNnpCLEVBQ0EsVUFBQUMsRUFDQSxRQUFBcmMsRUFDQSxnQkFBQWliLEVBQ0EsdUJBQUFlLEVBQ0EsT0FBQXB6QixHQUNBLE1BQUFELEVBQ0EsV0FBQXN6QixFQUNBLE1BQUF4cEIsRUFDQSxlQUFBOG9CLEVBQ0EsZUFBQUcsRUFDQSxLQUFBOWlCLEVBQ0EsYUFBQTRpQixFQUNBLFlBQUFMLEVBQ0EsWUFBQUosRUFDQSxnQkFBQUMsRUFDQSxTQUFBTSxFQUNBLGNBQUFNLEVBQ0EsYUFBQWhsQixFQUNBLGFBQUErbEIsR0FDQSxjQUFBQyxHQUNBLFFBQUFFLEdBQ0EsWUFBQUUsQ0FBQSxDQUVKLENBQ0YsQ0FBQyw4RUNwcUJDdkosbUJBREYsV0FBQSxFQUlTLE9BQUE5ZSxFQUFBLFVBQUEsRUFBVStlLEVBQUFBLFlBQUFRLEVBQUEsd0JBQUE3ZixFQUFBLEdBQUEsS0FBQSxJQUFBLEVBQUEsQ0FBQSxJQUFBLGlDQUMyRDRvQixDQUFPLFVBQUEsQ0FBQSxlQUFBNW9CLEVBQXNDK25CLFVBQVEsT0FBQSxlQUFBL25CLEVBQUEsVUFBQSxPQUsvSCxrQkFBU0EsRUFBeUIsV0FBQSxFQUFBLENBQ2pDLENBQUEsRUFBQSxTQUFBLDBCQVhMLE1BQUFBLEVBQUEsSUFBQSxFQUFBLFNBQUFzZixFQWdCc0QsUUFBQSxJQUFBLEVBQUFoZixFQUFBLFVBQUEsRUFBQStlLEVBQUFBLFlBQWhEUSxFQUFBQSx3QkFtQlc3ZixFQUFBLEdBbkNqQixJQWdCK0IybkIsSUFBQUEsRUFBQUEsRUFBQUEsV0FBQUEsQ0FBQUEsTUFBQUEsUUFBSixFQUFBM25CLEVBQUEsR0FBQSxFQUFBLENBQUEsUUFBQXNmLEVBQUEsUUFBQSxJQUFBLEVBQWtDaGYsWUFBQSxFQUFNLEVBQUdDLEVBQUFBLG1CQUFBc29CLEVBQUEsU0FBQSxLQUFBQyxFQUFBQSxXQUFBOW9CLEVBQUEsdUJBQUE3SSxtREFDM0JteEIsSUFBQUEsR0FBQUEsWUFBQUEsRUFBQUEsR0FBQUEsRUFBQUEsQ0FqQjNDdG9CLEVBQUEsYUFBQTdJLENBQUEsR0FBQW1KLEVBQUFBLFVBaUI2RSxFQUFBK2UsRUFBQSxZQUFBUSwwQkFBQTdmLEVBQUEsR0FBQSxJQUFBLElBQUEsRUFBQW1oQixFQUFBQSxXQUFBLENBakI3RSxJQUFBLEVBaUIyRixNQUFBLFNBakIzRixRQUFBLEVBQUEsRUFBQWhxQixFQW1Ca0IsR0FBSyxFQUFBLENBRGIsUUFBQW1vQixFQUFBLFFBQUEsSUFBQSxDQWxCVm5vQixFQUFBLFFBQUEsSUFBQW1KLEVBQUEsVUFBQSxFQUFBK2UsRUFBQUEsWUFBQTBKLEVBQUEsQ0FvQmEsSUFBRyxFQUF5QixRQUFBLEdBQTZCLElBQXNCNUIsR0FBQUEsK0JBUy9FLEtBQUFod0IsRUFDQSxPQUFXd3hCLEVBQUFBLE9BQ1gsZ0JBQWdCcG1CLElBQVl2QyxFQUFBLEtBQUE3SSxFQUFBLEdBQUEsRUFDNUIsWUFBQTZJLEVBQUEsWUFBa0IsUUFBRWdwQixFQUFJemtCLEdBQUFBLEVBQUFBLGlCQUFBQSxFQUFBQSxhQWhDckMsc0JBQUFzZixHQUFBN2pCLEVBQUEsSUFBQUEsRUFBQSxLQUFBN0ksRUFBQSxJQUFBMHNCLENBQUEsQ0FBQSxFQUFBLEtBQUEsRUFBQSxDQUFBLE9BQUEsU0FBQSxjQUFBLFlBQUEsaUJBQUEscUJBQUEsQ0FBQSxHQUFBcGpCLEVBQUFBLG1CQUFBLEdBQUEsRUFBQSxDQUFBLENBQUEsRUFBQSxFQUFBLENBQUEsRUFBQSxJQUFBLEdBQUFBLHFCQUFBLEdBQUEsRUFBQSxPQUFBLEVBQUEsR0FBQSxFQUFBLENBQUEsRUF1Q1k4bUIsRUFBQUEsQ0FBQUEsRUFBQUEsRUFBQUEsR0F2Q1p2bkIsRUFBQSxjQUFBLFNBQUFNLEVBQUFBLDBCQXdDMEJ1ZiwwQkFBNEI3ZixFQUFBLGNBQUEsUUFBQSxNQUFBLEVBQUFtaEIsRUFBQUEsV0FBQSxDQUFBLElBQUEsRUFDaEQsQ0FBQW5oQixFQUFtQixHQUFuQixTQUFtQixVQUFBLEVBQUFBLEVBQUEsZUFBQSxDQUNYdW5CLFlBQWF2bkIsRUFBQSxHQUFBLFNBQUEsVUFBQSxFQUFBQyxFQUFBLENBQUEsSUFBQUEsRUFBQSxDQUFBLEVBQUE0akIsR0FBQTdqQixFQUFBLGVBQUE2akIsR0ExQzNCLE1BNENxRSxDQUFBLE1BQUEsTUFBQSxDQUFBLEVBQS9EN2pCLEVBQUEsYUFBQSxFQUFBLENBQUEsUUFBQXNmLEVBQUEsUUFBQSxJQUFBLGNBR1VpSixFQUF1QixFQUFBaG9CLEVBQUEsbUJBQUFzb0IsRUFBQSxTQUFBLEtBQUFDLGFBQUE5b0IsRUFBQSxjQUFBLE9BQUEsQ0FBQXNuQixFQUFBMkIsS0FGL0Izb0IsRUFBQUEsVUFBQSxFQUFBQyxFQUFBLG1CQTdDUnNvQixFQThDZXRCLFNBQUFBLENBQUFBLElBQUFBLEdBQUFBLENBOUNmdm5CLEVBQUEsY0FBQXNuQixDQUFBLEdBQUFobkIsRUFBQUEsMEJBZ0Q4QnVmLDBCQUFZN2YsRUFBQSxjQUFBLFFBQUEsS0FBQSxFQUFBbWhCLEVBQUFBLFdBQUEsQ0FoRDFDLElBQUEsRUFBQSxDQWlEa0JuaEIsRUFBUyxHQUFBLFNBQUEsU0FBQSxFQUFBLEVBQUFpcEIsRUFDaEIsUUFBSyxFQWxEaEIsRUFBQTNCLEVBQUEsQ0FrRnNCLE1BQUEsQ0FBQSxzQkFBQXRuQixFQUFBLFVBQUEsU0FBQWlwQixDQUFBLENBQUEsQ0FBQSxDQUFBLEVBQUFySixFQUFBQSxZQUFBLENBMUJzQixRQUFBTixFQUFBLFFBQUMsSUFBUSxFQXhEckRoZixZQUFBLEVBQUErZSxFQUFBLFlBQUFRLDBCQUFBN2YsRUFBQSxHQUFBLElBQUEsSUFBQSxFQUFBbWhCLGFBQUEsQ0F3RDhEOWlCLE1BQUFBLFNBeEQ5RCxRQUFBLEVBQUEsRUFBQTJCLEVBQUEsR0FBQSxFQUFBLHlCQTZEc0Jzb0IsWUFBQUEsRUFBQUEsRUFBQUEsRUFBQUEsbUJBQWExQixFQUFtQixTQUFBLEtBQUFrQyxFQUFBQSxXQUFBeEIsRUFBQSxRQUFBbHdCLEdBQUEsT0FGeEMsT0FBQWtKLEVBQUEsVUFBQSxFQUFBQyxFQUFBQSxtQkEzRGRzb0IsRUFBQUEsaUJBNER3QixDQUFBN29CLEVBNUR4QixrREE4RDhCcWYsRUFBQUEsWUFBQVEsRUFBQUEsd0JBQUE3ZixFQUFBLEdBQUEsSUFBQSxJQUFBLEVBQUFtaEIsYUFBQSxDQTlEOUIsSUFBQSxFQStEd0I4RixNQUFBQSxTQS9EeEIsUUFBQSxFQUFBLEVBQUFqbkIsRUFrRXdCNG1CLFdBQWdCLEtBQUdseUIsRUFBQXNMLEVBQUs0bUIsZ0JBQWdCeHZCLENBQUEsSUFBckIsWUFBQTFDLEVBQXdCLEdBQUcsQ0FBSyxFQUFBLENBRDNELFFBQUE0cUIsRUFBQSxRQUFBLElBQUEsT0FBQSxPQWpFaEJ0ZixFQUFBLGdCQUFBNUksQ0FBQSxLQUFBMUMsRUFBQXNMLEVBQUEsZ0JBQUE1SSxDQUFBLElBQUEsWUFBQTFDLEVBQUEsU0FBQSxJQUFBNEwsRUFBQUEsWUFBQStlLEVBQUFBLFlBQUEwSixFQUFBLENBbUVtQixJQUFHLEVBQStCLFFBQUEsR0FBbUMsSUFBNEI1QixHQUFBQSwyQkFTakcsS0FBQW5uQixFQUFTLGdCQUFFMm9CLENBQVcsRUFDdEIsZ0JBQWdCcG1CLElBQVl2QyxFQUFBLEtBQUE1SSxDQUFBLEVBQzVCLFlBQUE0SSxFQUFBLFlBQWtCLFFBQUVncEIsQ0FBSXprQixFQUFBQSxpQkFBQUEsRUFBQUEsYUE5RTNDLHNCQUFBc2YsR0FBQTdqQixFQUFBLElBQUFBLEVBQUEsS0FBQTVJLEVBQUF5c0IsQ0FBQSxDQUFBLEVBQUEsS0FBQSxFQUFBLENBQUEsT0FBQSxjQUFBLFlBQUEsaUJBQUEscUJBQUEsQ0FBQSxHQUFBcGpCLHFCQUFBLEdBQUEsRUFBQSxDQUFBLEVBQUEsRUFBQSxFQUFBLENBQUEsRUFBQSxJQUFBLEdBQUFBLHFCQUFBLEdBQUEsRUFBQSxNQUFBLENBQUEsRUFBQSxHQUFBLEVBQUEsQ0FBQSxLQUFBLEVBQUEsSUFBQSxFQUFBLENBQUEsRUFBQSxFQUFBLENBQUEsRUFBQSxjQW9EaUY2bUIsRUFBVSxNQUFBLENBQUFud0IsRUFBQSt4QixLQXBEM0YsQ0FxRFksS0FBQUEsRUFBQSxHQUFZNUosRUFBQUEsUUFBaUJsaEIsR0FBQSxDQUFBcUgsRUFBQUEsWUFBUTBqQixFQUF3Qm5CLENBQUFBLGNBQUFBLG9GQXJEekUsQ0FBQSxDQUFBLEVBQUEsS0FBQSxDQUFBLE9BQUEsQ0FBQSxHQUFBdm5CLEVBQUEsbUJBQUEsR0FBQSxFQUFBLE9BQUEsRUFBQSxHQUFBLEVBQUEsQ0FBQSxFQUFBLEVBQUEsQ0FBQSxFQUFBLEVBQUEsR0FBQUEscUJBQUEsR0FBQSxFQUFBLENBQUEsQ0FBQSw0REMyRUEyb0IsR0FBZTVwQixrQkFBZ0IsQ0FDN0IsS0FBTSxhQUNOLFdBQVksQ0FBRSxTQUFBNnBCLEVBQVMsRUFDdkIsTUFBTyxDQUlMLFdBQVksQ0FBQyxFQUliLEtBQU0sQ0FDSixLQUFNLE9BQ04sUUFBUyxNQUNYLEVBSUEsU0FBVSxDQUNSLEtBQU0sU0FDTixRQUFTLE1BQ1gsRUFDQSxhQUFjLENBQ1osS0FBTSxTQUNOLFFBQVMsTUFDWCxFQUNBLE9BQVEsQ0FDTixLQUFNLENBQUMsT0FBUSxNQUFNLENBQ3ZCLENBQ0YsRUFDQSxNQUFPLENBQUMsbUJBQW1CLEVBQzNCLE1BQU01ZSxFQUFPNVcsRUFBSyxDQUNWLEtBQUEsQ0FBRSxHQUFBSyxHQUFPMkgsR0FBQUEsUUFDVCxDQUFFLE1BQUFtRixHQUFVUyxLQUNaNm5CLEVBQXFCaHVCLEVBQUFBLE1BR3JCaXVCLEVBQVksSUFBTSxDQUN0QixNQUFNbnJCLEVBQVFxTSxFQUFNLGFBQWVBLEVBQU0sZUFBaUIsR0FDbkQsTUFBQSxDQUFFLE1BQU9BLEVBQU0sV0FBWSxJQUFLQSxFQUFNLEtBQUssSUFBSyxHQUFHck0sRUFBTSxFQUdsRSxTQUFTb3JCLEVBQWlCN3pCLEVBQVksQ0FDaEM5QixFQUFBLEtBQUssb0JBQXFCOEIsQ0FBSyxDQUNyQyxDQUNTLFNBQUFneEIsRUFBZ0I1a0IsRUFBVSxHQUFPLFNBQ3hDLE9BQUlBLEdBQ0tyTixFQUFBNDBCLEVBQW1CLFFBQW5CLFlBQUE1MEIsRUFBMEIscUJBRTVCa1csRUFBQTBlLEVBQW1CLFFBQW5CLFlBQUExZSxFQUEwQixjQUNuQyxDQUVNLE1BQUE2ZSxFQUF5QngxQixFQUFBQSxTQUFTLElBQU0sV0FDNUMsUUFBTzJXLEdBQUFsVyxFQUFBK1YsRUFBTSxPQUFOLFlBQUEvVixFQUFZLFNBQVosWUFBQWtXLEVBQW9CLGFBQWFELEVBQUFGLEVBQU0sU0FBTixZQUFBRSxFQUFzQixTQUFBLENBQy9ELEVBQ0srZSxFQUF3QnoxQixFQUFBQSxTQUFTLElBQU0sU0FDcEMsT0FBQStNLEVBQU0sSUFBSXRNLEVBQUErVixFQUFNLEtBQUssU0FBWCxZQUFBL1YsRUFBbUIsU0FBVWtXLEVBQUFILEVBQU0sU0FBTixZQUFBRyxFQUFzQixPQUFPLENBQUEsQ0FDNUUsRUFDSytlLEVBQWMxMUIsRUFBQUEsU0FBUyxJQUFNLENBQzdCLEdBQUF3VyxFQUFNLE1BQVEsS0FHbEIsT0FBSUEsRUFBTSxLQUFLLElBQUksUUFBUSxHQUFHLEdBQUssRUFDMUJBLEVBQU0sS0FBSyxJQUFJLE1BQU0sR0FBRyxFQUUxQkEsRUFBTSxLQUFLLEdBQUEsQ0FDbkIsRUFFS21mLEVBQWdCMzFCLEVBQUFBLFNBQVMsSUFDdEJ3VyxFQUFNLEtBQUssT0FBU0EsRUFBTSxLQUFLLEtBQ3ZDLEVBQ0tvZixFQUF3QjUxQixFQUFBQSxTQUFTLElBQzlCMjFCLEVBQWMsaUJBQWlCLFFBQ3ZDLEVBTU0sTUFBQSxDQUNMLEdBQUExMUIsRUFDQSxpQkFBQXMxQixFQUNBLFVBQUFELEVBQ0EsZ0JBQUE1QyxFQUNBLG1CQUFBMkMsRUFDQSx1QkFBQUcsRUFDQSxzQkFBQUMsRUFDQSxZQUFBQyxFQUNBLHNCQUFBRSxFQUNBLGNBQUFELEVBQ0Esb0JBZjBCLElBQ25CQSxFQUFjLE1BQU1MLEVBQUEsQ0FBVyxDQWN0QyxDQUVKLENBQ0YsQ0FBQyxRQzdKd0M1cEIsR0FBTSxDQUFBLElBQUEsbUNBa0IxQkMsR0FBQSxDQUFBLE9BQUEsRUFNWkMsR0FBQSxDQUFBLE1BQU0sMEJBRUpDLEdBQUEsQ0FBQSxNQUFNLCtCQUVKLE1BQU0sNFFBcENMZ3FCLEVBQUExSyxtQkFBQSxxQkFBQSxFQUhkLE9BQUFwZixFQUFBLE1BQUFNLEVBQUEsVUFBQSxFQUl3QitlLEVBQUFBLFlBQUFRLEVBQUFBLHdCQUFBN2YsRUFBQSxHQUFBLFNBQUEsSUFBQSxFQUFBbWhCLEVBQUFBLFdBQUEsQ0FDbkJqdEIsSUFBQUEsRUFDT2lELE1BQUFBLGVBQ1AsR0FBTUEsR0FBUSxTQUFBLE1BQUEsRUFBQSxFQUFBNkksRUFBQSxXQUFBLEVBQ2RBLEVBQVMsS0FBQSxDQUFBLEtBQUFBLEVBQUEsS0FBQSxJQUVDLFlBQUtBLEVBR1AsS0FBQSxHQUFBLENBQUEsRUFBQSxDQUZQLE1BQUFzZixFQUFBLFFBQUEsSUFBQSxDQUNFdGYsRUFBQSx1QkFBQU0sRUFBQSxVQUFBLEVBQUFDLEVBQUFBLG1CQUFBLE9BQUFaLEdBQUEsZUFFRndwQixFQUVPLENBQUEsY0FBQW5wQixFQUFBLG1CQUFBLEVBQUEsS0FBQSxFQUFBLENBQUEsYUFBQSxDQUFBLENBQUEsQ0FBQSxJQUFBTSxFQUFBLFVBQUEsRUFGcUNDLEVBQUEsbUJBQUEsT0FBQSxDQUFFLElBQUssRUFBQSxNQUFBLDBCQU0zQ3BKLE1BQUs2SSxFQUFNLGFBQUEsRUFBQXFqQixFQUFBQSxnQkFGbkJyakIsZUFsQk4sRUFtQmE5TCxFQUFBQSxFQUFBQSxHQUFBQSxFQUFBQSxLQUlNQSxRQUFHOEwsRUFBUSx5QkFHYixTQUFBTSxZQUFBLEVBQUErZSxjQUFBUSxFQUFBQSx3QkFBQTdmLEVBQUEsR0FBQSxRQUFBLElBQUEsRUFBQStwQixFQUFBLGVBQUE1SSxhQUFBLENBQUEsSUFBQSxHQUFBbmhCLEVBQUEscUJBQUEsQ0FBQSxFQUFBLENBQUEsQ0FBQUEsRUFETCxHQUE2RCxRQUFBLE9BQUEsRUFBQXNmLEVBQUEsUUFBQSxJQUFBLENBQUE1ZSxFQUFBLG1CQUFwQ3ZKLE9BQVcwSSxHQUFBLENBQUE0RixFQUFBQSxZQUFVOGpCLEVBQVMsQ0FBQSxPQUFBdnBCLEVBQUEsS0FBQSxzREFHaEQ5TCxDQUFBQSxDQUFBQSxDQUFBQSxLQUVQLEdBQW1GLFFBQUEsT0FBQSxFQUFBb3JCLEVBQUEsUUFBQSxJQUFBLENBQXBFNWUsRUFBQSxtQkFBQSxPQUFBWixHQUFBLENBQUEyRixFQUFBQSxZQUF1Q3ZSLEVBQWlCLENBQUEsTUFBQSwwRUE5Qm5GLENBQUEsQ0FBQSxDQUFBLEVBQUEsRUFBQSxDQWdFVSxFQUFBLElBQUEsR0FBQXVNLHFCQUFBLEdBQUEsRUFBQSxDQUFBLENBQUEsRUE1QmF0SixRQUFBQSxFQUFBQSxRQUFLLElBQVMsT0FBQSxPQUFBdUosRUFBQSxtQkFBQSxNQUEvQjZlLEdBQXNGLENBcEM1RnZmLEVBQUEsS0FBQSxXQUFBTSxFQUFBLFVBQUEsRUFvQ21EK2UsRUFBQUEsWUFBTzhKLEVBQVMsQ0FBRyxJQUFLLEVBQUEsY0FBQW5wQixFQUFBLEtBQUEsVUFwQzNFLE1BQUFBLEVBQUEsVUFBQSxDQUFBLEVBcUNNLEtBQUEsRUFBQSxDQUFBLGNBQUEsT0FzQk0sQ0FyQmE3SSxHQUFBQSxFQUFBQSxtQkFBSyxHQUFZLEVBQUEsRUFBQXVKLEVBQUEsbUJBQUEsTUFBbENzcEIsR0FBNEYsQ0F0Q3BHaHFCLEVBQUEsS0FBQSxjQUFBTSxFQUFBLFVBQUEsRUFzQ3dEK2UsRUFBQUEsWUFBTzhKLEVBQVksQ0FBRyxJQUFLLEVBQUEsY0FBQW5wQixFQUFBLEtBQUEsYUF0Q25GLE1BQUFBLEVBQUEsVUFBQSxDQUFBLEVBdUNRLEtBQUEsRUFBQSxDQUFBLGNBQUEsT0FrQk0sSUFqQmtCaXFCLEVBQUFBLG1CQUFRLEdBQUEsRUFBQSxFQUFBdnBCLEVBQUEsbUJBQUEsTUFBOUJ3cEIsR0FBeUUsQ0FBQWxxQixFQXhDbkYsd0JBd0MwRHFmLEVBQUFBLFlBQUE4SyxFQUFBLENBQUcsSUFBSyxFQUFBLE1BQUFucUIsRUFBQSxTQUNuQzdJLE1BQUFBLEVBQUssVUFBVyxDQUFBLEVBQXJDLEtBQUEsRUFBQSxDQUFBLFFBQUEsT0FBQSxDQUFBLEtBQUF6QyxFQUFBc0wsRUFFVTdJLGlCQUZWLFlBQUF6QyxFQUVlLFFBR1gsSUFBQTRMLEVBQUFBLFlBQUFDLEVBQUFBLG1CQUFBc29CLEVBQUFBLFNBQUEsQ0FBQSxJQUFBLEdBQUEsQ0E5Q2Q3b0IsRUFBQSxLQUFBLG1CQUFBQSxFQUFBLEtBQUEsa0JBQUEsT0FBQUEsRUFBQSxLQUFBLGtCQUFBLE1BQUFBLEVBQUEsVUFBQSxDQUFBLEdBQUFNLFlBNEMwQixFQUFBK2UsRUFBQSxZQUFPOEosRUFBa0IsQ0FDcEMsSUFBSyxFQUFBLGNBQUFucEIsRUFBQSxLQUFBLGtCQUFBLE9BRWM3SSxNQUFBQSxFQUFLLFVBQU0sQ0FBQSxFQUFBLEtBQUEsRUFBQSxDQUFBLGNBQWpDLE9BQXFGLENBQUEsR0FBQTZJLEVBL0NqRyxLQStDZ0QsUUFBQU0sRUFBQUEsWUFBVytlLEVBQUFBLFlBQU84SixFQUFNLENBQUcsSUFBSyxFQUFBLGNBQUFucEIsRUFBQSxLQUFBLE9BQ3BFLE1BQUFBLEVBQUEsVUFBQSxDQUFBLEVBaERaLGdEQWtEc0NxZixFQUFBQSxZQUFBeUssRUFBQTNJLGFBQUEsQ0FDaEJocUIsSUFBQUEsRUFDUCxJQUFBLG9CQUFBLEVBQ0E2SSxFQUFLLEtBQUV1cEIsVUFBUyxDQUNoQixjQUFBdnBCLEVBQUEsV0FBQSxNQUFBQSxFQUFBLFVBQUEsMENBdERmLENBQUEsRUFBQSxLQUFBLEdBQUEsQ0FBQSxjQUFBLFFBQUEscUJBQUEsQ0FBQSxFQUFBLEVBQUEsRUFBQSxHQTBEeUI3SSxxQkFBaUIsR0FBQSxFQUFBLENBQUEsQ0FBQSxJQTFEMUMsS0EwRDZDLGNBQUFtSixFQUFBLFVBQUEsRUFBVytlLEVBQUFBLFlBQU84SixFQUFZLENBQUcsSUFBSyxFQUFBLGNBQUFucEIsRUFBQSxLQUFBLGFBMURuRixNQUFBQSxFQUFBLFVBQUEsQ0FBQSxFQUFBLEtBQUEsRUFBQSxDQUFBLGNBQUEsT0FBQSxDQUFBLEdBNER1QjdJLEVBQUFBLG1CQUFpQixHQUFBLEVBQUEsQ0FBQSxDQUFBLElBNUR4QyxLQTREMkMsY0FBQW1KLEVBQUEsVUFBQSxFQUFXK2UsRUFBQUEsWUFBTzhKLEVBQVksQ0FBRyxJQUFLLEVBQUEsY0FBQW5wQixFQUFBLEtBQUEsYUE1RGpGLE1BQUFBLEVBQUEsVUFBQSxDQUFBLEVBNkQyQixLQUFBLEVBQUEsQ0FBTSxjQUFJeXBCLE9BQUFBLENBQUFBLEdBQUFBLEVBQUFBLG1CQUM3QixHQUE2RCxFQUFBLEVBQUF6cEIsRUE5RHJFLCtEQThENENxZixFQUFBLFlBQUErSyxFQUFBLENBQUcsSUFBSyxFQUFBLE9BQUFwcUIsRUFBQSxLQUFBLE9BOURwRCxNQUFBQSxFQUFBLFVBQUEsQ0FBQSxFQUFBLEtBQUEsRUFBQSxDQUFBLFNBQUEsT0FBQSxDQUFBLEdBQUFTLEVBQUFBLG1CQUFBLEdBQUEsRUFBQSxDQUFBLENBQUEsQ0FBQSxFQUFBLEVBQUEsRUFBQSxDQUFBLEVBQUEsR0FBQSxDQUFBLE9BQUEsV0FBQSxDQUFBLEdBQUFBLHFCQUFBLEdBQUEsRUFBQSxrQ0NlQTRwQixHQUFlN3FCLGtCQUFnQixDQUM3QixLQUFNLGVBQ04sTUFBTyxDQUlMLE9BQVEsQ0FDTixLQUFNLENBS0osT0FJQSxNQUNGLENBQ0YsRUFDQSxNQUFPLENBQUMsQ0FDVixFQUNBLE1BQU1pTCxFQUFPLENBQUMsQ0FDaEIsQ0FBQyxRQ3JDRDlLLEdBQUEsQ0FBQSxNQUFBLGlFQUNFLE1BQUF3cEIsRUFBQS9KLG1CQU1NLFdBTk4sRUFDRSxPQUFBOWUsWUFBQSxFQUFBQyxxQkFBeUQsTUFGN0RaLEdBQUEsQ0FBQSxPQUd5QjJxQixVQUFhLFVBQ3lCaHFCLEVBQUFBLFVBQUEsRUFBQUMscUJBQUEsTUFBQVgsR0FBQXlqQixrQkFBQXJqQixFQUFBLE1BQUEsRUFBQSxDQUFBLEdBQUFBLEVBSi9ELE9BSWtCLFFBQUFNLEVBQUEsVUFBQSxFQUFXK2UsY0FBUThKLEVBQU8sQ0FBRyxJQUFLLEVBQUEsY0FBQW5wQixFQUFBLE9BQUEsT0FFaENzcUIsTUFBT3RxQixFQUFBLEtBQUEsRUFBQSxLQUFBLEVBQUEsQ0FBQSxjQUF2QixPQU5KLENBQUEsR0FBQUEsRUFBQSxPQUFBLE1BQUFNLEVBQUFBLFlBQUFDLEVBQUFBLG1CQUFBLE1BQUFWLEdBQUF3akIsRUFBQUEsZ0JBQUFyakIsRUFBQSxPQUFBLElBQUEsRUFBQSxDQUFBLEdBQUFTLEVBQUFBLG1CQUFBLEdBQUEsRUFBQSwwQ0M2QkEsU0FBQXFmLEdBQUE3aUIsRUFBQSxDQUFBLE9BQUEsT0FBQUEsR0FBQSxZQUFBOGlCLE9BQUFDLFVBQUFDLFNBQUE1QyxLQUFBcGdCLENBQUEsSUFBQWlqQixtQkFBQUEsQ0FBQUEsRUFBQSxRQUFBampCLENBQUEsQ0FBQSxDQUtldUMsTUFBQUEscUJBQWdCLENBQzdCeEwsS0FBTSxnQkFDTnlXLE1BQU8sQ0FZTGhVLFFBQVMsQ0FBRSxFQUlYK3FCLE1BQU8sQ0FBRSxFQUlUK0ksTUFBTyxDQUFFLEVBSVRDLGFBQWMsQ0FBRSxFQUVoQi9nQixHQUFJLENBQUUsRUFFTmdoQixPQUFRLENBQUUsQ0FDWCxFQUNEdEcsTUFBTyxDQUFDLFFBQVMsU0FBVSxrQkFBbUIsZUFBZ0IsT0FBUSxTQUFVLFVBQVcsU0FBVSxjQUFjLEVBQ25IbkQsTUFBTXZXLEVBQVk1VyxFQUFRLENBQ3hCLEtBQU0sQ0FBRXFJLEVBQUFBLENBQUcsRUFBR1MsR0FBTyxFQUNmLENBQUVxRSxNQUFBQSxDQUFPLEVBQUdTLEdBQVEsRUFDcEJpcEIsRUFBZ0NwdkIsTUFBSSxFQUFLLEVBQ3pDcXZCLEVBQTZCcnZCLEVBQUFBLE1BQzdCZ1AsRUFBOEJoUCxFQUFBQSxNQUM5QnN2QixFQUF1QnR2QixFQUFBQSxNQUN2QnV2QixFQUF5Q3Z2QixFQUFBQSxNQUN6Q3FRLEVBQWVyUSxFQUFBQSxNQUNmZ29CLEVBQXdCaG9CLE1BQUksRUFBSyxFQUVqQ3d2QixFQUFvQnh2QixFQUFBQSxNQUNwQnl2QixFQUFvQnp2QixFQUFBQSxNQUNwQjB2QixFQUF5QjF2QixFQUFBQSxNQUN6QitLLEVBQXFCL0ssRUFBQUEsTUFDckIydkIsRUFBZ0J4Z0IsRUFBTWhCLElBQU15aEIsS0FBS0MsTUFBTUQsS0FBS0UsT0FBUSxFQUFHLEdBQU8sRUFBSSxHQUNsRUMsRUFBcUIsbUJBQXFCSixFQUUxQ0ssRUFBd0Nod0IsTUFBSSxDQUFBLENBQUUsRUFFcEQsU0FBU2l3QixHQUFVLE9BQ2pCLE1BQU8sQ0FDTDdELFFBQVNrRCxFQUFnQmoxQixNQUN6QmMsUUFBUzZULEVBQVkzVSxNQUNyQmdXLFFBQVNBLEVBQVFoVyxNQUNqQjRPLEtBQU11aUIsR0FBYSxFQUNuQjBFLGVBQWdCWixFQUNoQmEsZUFBZ0JuaEIsRUFDaEJvYyxZQUFBQSxHQUNBSSxZQUFBQSxHQUNBeHlCLE1BQUFBLEVBQ0FndkIsUUFBQUEsRUFDQW9JLE1BQUFBLEVBQ0FyM0IsUUFBQUEsRUFDQXMzQixpQkFBQUEsRUFDQXAzQixPQUFBQSxFQUNBMlksTUFBTTVDLEVBQUFBLEVBQVkzVSxRQUFaMlUsWUFBQUEsRUFBbUI0QyxLQUU3QixDQUVBLE1BQU0wZSxFQUFPLE1BQU85M0IsR0FBeUIsUUFFM0MsS0FBTSxDQUFFNHpCLFFBQUFBLENBQVMsRUFBRzV6QixFQUNoQjR6QixFQUFRbUUsUUFDVm5FLEVBQVFtRSxPQUFPLzNCLENBQUksRUFFckJ1UyxFQUFNMVEsTUFBUWlZLEVBQUFBLE1BQU04WixFQUFRcmhCLEtBQUssRUFDakNza0IsRUFBY2gxQixNQUFRN0IsRUFBSzR6QixRQUFRb0UsR0FDbkNqQixFQUFnQmwxQixNQUFRK3hCLEVBQ3hCLE1BQU1xRSxFQUFpQjczQixFQUFHODNCLFlBQVlDLFlBQVl0QixFQUFjaDFCLEtBQWUsRUFDekVzMkIsRUFBYyxtQkFBbUJaLENBQWtCLElBQUkzRCxFQUFRcUUsQ0FBYyxHQUFLLEVBQUUsSUFFMUZuQixPQUFBQSxFQUFnQmoxQixNQUFRLENBQ3RCLEdBQUd1QixFQUFFZ3JCLEtBQUt3RixFQUFTLFFBQVMsU0FBVSxXQUFZLFdBQVksS0FBTSxRQUFTLGFBQWEsRUFDMUYsQ0FBQ3FFLENBQWMsRUFBR0UsR0FJcEIzaEIsRUFBWTNVLE1BQVEsQ0FDbEIsR0FBR3VCLEVBQUVnckIsS0FBS3B1QixFQUFNLFVBQVcsT0FBTyxFQUNsQzB0QixNQUFPLENBQ0wsR0FBRy9XLEVBQU0rVyxNQUNULEdBQUcxdEIsRUFBSzB0QixNQUNSLEdBQUczdEIsRUFBSTJ0QixLQUNSLEdBR0g4SixFQUFpQjMxQixNQUFRLENBQ3ZCLEdBQUc4VSxFQUFNK1csTUFDVCxJQUFHMXRCLEdBQUFBLEVBQUs0ekIsVUFBTDV6QixZQUFBQSxHQUFjMHRCLE1BQ2pCLEdBQUczdEIsRUFBSTJ0QixPQUlUc0osRUFBYW4xQixNQUFRLElBQUssQ0FDcEIreEIsRUFBUXdFLFVBQ1Z4RSxFQUFRd0UsU0FBU1gsRUFBVSxDQUFFLEdBR2pDUixFQUFhcDFCLE1BQVEsSUFBSyxDQUNwQit4QixFQUFReUUsVUFDVnpFLEVBQVF5RSxTQUFTWixFQUFVLENBQUUsR0FJakNQLEVBQWtCcjFCLE1BQVEreEIsRUFBUTBFLFlBRTlCMUUsRUFBUTJFLFlBQWMsT0FDeEJBLEdBQVcxMkIsTUFBUSt4QixFQUFRMkUsWUFNN0J4NEIsRUFBSXd3QixLQUFLLGVBQWdCLENBQUMsQ0FBQ3dHLEVBQWdCbDFCLE1BQU00MEIsS0FBSyxFQUd0RCxNQUFNMWIsRUFBUSxTQUFBLEVBQ2Q2YixFQUFnQi8wQixNQUFRLEdBQ3hCLE1BQU1rWixFQUFRLFNBQUEsRUFFZHNkLElBRU9aLEVBQVUsR0FHbkIsZUFBZWUsR0FBWSxPQUN6QixNQUFNQyxFQUFhMUIsRUFBZ0JsMUIsTUFBTTQyQixXQUV6QyxLQURnQjVnQixFQUFBQSxFQUFRaFcsUUFBUmdXLFlBQUFBLEVBQWU4YyxZQUNoQjhELEVBQVksQ0FDekIsSUFBSUMsRUFBVyxHQUNmLEdBQUlELGFBQXNCL0wsU0FDeEJnTSxFQUFXLE1BQU1ELFFBRWpCLElBQUksQ0FDRixNQUFNcjRCLEVBQUd1NEIsV0FBV0MsUUFBUSxDQUMxQnJtQixNQUFPbkssRUFBRSwwQkFBMEIsRUFDbkNNLFFBQVNOLEVBQUUsNEJBQTRCLEVBQ3ZDeXdCLGtCQUFtQnp3QixFQUFFLHVCQUF1QixFQUM1QzB3QixpQkFBa0Ixd0IsRUFBRSwyQkFBMkIsQ0FDaEQsQ0FBQSxFQUNEc3dCLEVBQVcsRUFDWixNQUFXLENBRVZBLEVBQVcsRUFDWixDQUdDQSxHQUNGLE1BQU1qNEIsRUFBTSxDQUVmLENBQ0gsQ0FFQSxlQUFlNjNCLEdBQVcsQ0FDeEIsT0FBSXBCLEVBQWtCcjFCLE9BQ1JxMUIsRUFBa0JyMUIsTUFBTTQxQixFQUFZLENBQUEsR0FDckMsR0FDRixJQUdYLE1BQU1lLEVBQVksRUFDWCxHQUNULENBRUEsTUFBTU8sRUFBd0I1NEIsRUFBQUEsU0FBUyxJQUNqQ0MsRUFBRzhFLE1BQVEsVUFDTixDQUNMb3pCLFlBQWNVLEdBQWEsQ0FDekJWLEVBQWEsRUFBQ1csS0FBTXJ1QixHQUFPLENBQ3JCQSxHQUNGb3VCLEdBRUosQ0FBQyxDQUNILEdBR0csRUFDUixFQUVLcEIsRUFBUSxTQUFXLENBQ3ZCaEIsRUFBZ0IvMEIsTUFBUSxJQUVwQnRCLEVBQVUsU0FDRixNQUFNKzNCLEtBQ1AsR0FDRixJQUVUVixJQUNPLElBR0hRLEVBQVdBLElBQUssQ0FDaEJwQixFQUFhbjFCLE9BQ2ZtMUIsRUFBYW4xQixNQUFLLEVBRXBCOUIsRUFBSXd3QixLQUFLLFFBQVEsRUFDakIvWixFQUFZM1UsTUFBUSxNQUdoQncyQixFQUFXQSxJQUFLLENBSXBCLEdBSElwQixFQUFhcDFCLE9BQ2ZvMUIsRUFBYXAxQixNQUFLLEVBRWhCaTFCLEVBQWdCajFCLE1BQU1xM0IsVUFBVyxDQUNuQyxLQUFNLENBQUV0TyxVQUFBQSxDQUFXLEVBQUdDLEdBQU8sRUFDN0JELEVBQVUsQ0FDUnVPLFNBQVVBLElBQ0RDLFNBQVNDLGNBQWMsSUFBSTlCLENBQWtCLEVBQUUsQ0FFekQsQ0FBQSxDQUNGLEdBR0crQixFQUFpQnh3QixHQUFVLENBQy9CL0ksRUFBSXd3QixLQUFLLGVBQWdCem5CLENBQUMsR0FHNUIsZUFBZXJJLEdBQU0sQ0FDbkIrdUIsRUFBUTN0QixNQUFRLEdBQ2hCLEdBQUksQ0FFRixHQURnQixNQUFNZ1csRUFBUWhXLE1BQU1wQixPQUFNLElBQzFCLEdBQ2QsT0FFRm0zQixHQUNELFFBQVMsQ0FDUnBJLEVBQVEzdEIsTUFBUSxFQUNqQixDQUNILENBRUEsZUFBZXJCLEdBQUssQ0FDbEIsTUFBTXFYLEVBQVFoVyxNQUFNckIsT0FDdEIsQ0FFQSxTQUFTd3lCLElBQVcsT0FDbEIsT0FBT25iLEVBQUFBLEVBQVFoVyxRQUFSZ1csWUFBQUEsRUFBZW1iLGFBQ3hCLENBRUEsU0FBU0osR0FBWW5pQixFQUFXOU4sRUFBNEIsUUFDMURrVixFQUFBQSxFQUFRaFcsUUFBUmdXLE1BQUFBLEVBQWUrYSxZQUFZbmlCLEVBQU05TixFQUNuQyxDQUVBLEtBQU0sQ0FBRW1NLFdBQUFBLEVBQVksRUFBR2MsR0FBVSxFQUVqQyxTQUFTMnBCLElBQWlCLFdBQ3hCLE1BQU8sQ0FDTGh2QixLQUFLaU0sRUFBQUEsRUFBWTNVLFFBQVoyVSxZQUFBQSxFQUFtQm1jLFlBQ3hCbGlCLEtBQU11aUIsR0FBYSxFQUNuQjFxQixPQUFPa08sRUFBQUEsRUFBWTNVLFFBQVoyVSxZQUFBQSxFQUFtQmxPLE1BQzFCOFEsTUFBTTVDLEVBQUFBLEVBQVkzVSxRQUFaMlUsWUFBQUEsRUFBbUI0QyxLQUN6QjRVLE1BQU94WCxFQUFZM1UsTUFDbkJneEIsbUJBQW1CL3hCLEVBQUksU0FDckIrVyxHQUFBQSxFQUFRaFcsUUFBUmdXLE1BQUFBLEdBQWVnYixnQkFBZ0IsR0FBRy94QixFQUNwQyxFQUVKLENBQ0EsTUFBTTA0QixHQUF3QjFxQixHQUFXLElBQUssT0FDNUMsT0FBT2dvQixFQUFBQSxFQUFnQmoxQixRQUFoQmkxQixZQUFBQSxFQUF1QjJDLE9BQy9CLEVBQUVGLEVBQWlCLEVBRWRHLEVBQWtCdjVCLEVBQUFBLFNBQVMsSUFBSyxDQUNwQyxNQUFNdzVCLEVBQVUsQ0FDZEMsT0FBUSxDQUFFLEVBQ1ZwNUIsTUFBTyxDQUFFLEVBQ1RxNUIsR0FBSSxDQUNGckssUUFBU0EsRUFBUTN0QixLQUNsQixHQUVHNDNCLEVBQVV2c0IsRUFBTXlzQixFQUFTSCxHQUFzQjMzQixLQUFLLEVBQ3BEaTRCLEVBQWtCLENBQUEsRUFDeEIxMkIsT0FBQUEsRUFBRTZPLFFBQVF3bkIsRUFBUyxDQUFDNTNCLEVBQU95QixLQUFPLENBQ2hDekIsRUFBTXlCLElBQU1BLEdBQ1p3MkIsRUFBVzVwQixLQUFLck8sQ0FBSyxFQUNqQkEsRUFBTWs0QixTQUFXLE1BQVFsNEIsRUFBTW00QixPQUFTLE9BQzFDbjRCLEVBQU1rNEIsUUFBVSxJQUFLLENBQ25CbDRCLEVBQU1tNEIsTUFBTXZDLEVBQVUsQ0FBRSxHQUc5QixDQUFDLEVBQ01yMEIsRUFBRTRQLE9BQU84bUIsRUFBYXoyQixHQUNwQkEsRUFBS2dOLE9BQVNSLEdBQVVvRCxZQUNoQyxDQUNILENBQUMsRUFFRHJILEVBQUFBLFVBQVUsU0FBVyxDQUNmK0ssRUFBTWhVLFNBQVcsTUFDbkIsTUFBTW0xQixFQUFLbmhCLEVBQU1oVSxPQUFPLEVBRTFCNUMsRUFBSXd3QixLQUFLLFVBQVcxUixFQUFBQSxtQkFBb0IsRUFBQ29iLE9BQU8sQ0FDbEQsQ0FBQyxFQUVELE1BQU0xQixHQUFhL3dCLE1BQUksRUFBSyxFQUN0QjB5QixFQUFvQi81QixFQUFBQSxTQUFTLElBQUssT0FDdEMsTUFBTyxHQUFDMDJCLEVBQUFBLEVBQWNoMUIsUUFBZGcxQixNQUFBQSxFQUFxQnNELFNBQVMsVUFDeEMsQ0FBQyxFQUVELFNBQVN0QyxHQUFnQixDQUN2QlUsR0FBVzEyQixNQUFRLENBQUMwMkIsR0FBVzEyQixLQUNqQyxDQUVBLE1BQU16QixFQUFLQyxhQUFVKzVCLE1BRWZDLEVBQVlsNkIsRUFBQUEsU0FBUyxJQUNwQjQyQixFQUFnQmwxQixNQUFNNDBCLE1BR3BCcjJCLEVBQUc4M0IsWUFBWW9DLGVBQWUsQ0FDbkNDLGlCQUFlLENBQ2IsR0FBSXhELEVBQWdCbDFCLE1BQU0yNEIsdUJBQXdCLENBQ2hELE1BQU01a0IsRUFBWXdqQixTQUFTQyxjQUFjdEMsRUFBZ0JsMUIsTUFBTTI0QixzQkFBc0IsRUFDckYsR0FBSTVrQixFQUNGQSxPQUFBQSxFQUFVNmtCLFVBQVVDLElBQUksdUJBQXVCLEVBQ3hDOWtCLEVBRVAra0IsUUFBUXo1QixNQUFNLFVBQVU2MUIsRUFBZ0JsMUIsTUFBTTI0QixzQkFBc0IsS0FBSyxDQUU1RSxDQUNELE9BQU83akIsRUFBTStmLFlBQ2YsQ0FDRCxDQUFBLEVBZlEsRUFnQlYsRUFFRDMyQixFQUFJa2IsT0FBTyxDQUNUa2MsY0FBQUEsRUFDQUksbUJBQUFBLEVBQ0FLLE1BQUFBLEVBQ0FyM0IsUUFBQUEsRUFDQTYzQixTQUFBQSxFQUNBQyxTQUFBQSxFQUNBUCxLQUFBQSxFQUNBdmxCLE1BQUFBLEVBQ0EybkIsa0JBQUFBLEVBQ0EzQixXQUFBQSxHQUNBVixpQkFBQUEsRUFDQXJoQixZQUFBQSxFQUNBcWdCLGNBQUFBLEVBQ0FELGdCQUFBQSxFQUNBRSxnQkFBQUEsRUFDQWpmLFFBQUFBLEVBQ0FwWCxPQUFBQSxFQUNBRCxNQUFBQSxFQUNBazVCLGdCQUFBQSxFQUNBbEssUUFBQUEsRUFDQXdELFlBQUFBLEdBQ0FKLFlBQUFBLEdBQ0EwRyxjQUFBQSxFQUNBZSxVQUFBQSxFQUNBN0MsaUJBQUFBLENBQ0QsQ0FBQSxFQUVELE1BQU05SixFQUFRa04sRUFBQUEsV0FFZCxNQUFPLElBQUssQ0FDVixHQUFJLENBQUM5RCxFQUFnQmoxQixNQUNuQixPQUFPLEtBRVQsTUFBTXpCLEVBQUtDLGFBQVUrNUIsTUFDckIsSUFBSXIwQixFQUFXLENBQUEsRUFDZixNQUFNODBCLEVBQWMsQ0FBRSxHQUFHbk4sRUFBTyxHQUFHOEosRUFBaUIzMUIsT0FDOUNpNUIsRUFBY0EsQ0FBQ3gzQixHQUFhZ0gsR0FBWW9qQixHQUFRbU4sSUFDL0NuTixHQUFNcHFCLEVBQUcsRUFHUG9xQixHQUFNcHFCLEVBQUcsRUFBRWdILEVBQUssRUFGZCxLQUlMMHRCLEdBQUtuQixFQUFjaDFCLE9BQVMsWUFDbEMsR0FBSTJVLEVBQVkzVSxNQUFPLENBQ3JCLEtBQU0sQ0FBRXlHLE1BQUFBLEdBQU84USxLQUFBQSxFQUFJLEVBQUs1QyxFQUFZM1UsT0FBUyxHQUN2Q3lJLEdBQVEsQ0FBRXl3QixNQUFPLEtBQU16eUIsTUFBQUEsR0FBTzhRLEtBQUFBLEdBQU00WixZQUFhQSxJQUN2RGp0QixFQUFXLENBQ1QsQ0FBQzNGLEVBQUc4M0IsWUFBWThDLGFBQWEsRUFBRyxJQUFLLENBQ25DLElBQUlDLEdBQWlCLEtBQ3JCLE9BQUlmLEVBQWtCcjRCLFFBQ3BCbzVCLEdBQWN0cEIsRUFBQSxZQUFBMlosbUJBQUEsU0FBQSxFQUFBLENBQUEsTUFBQSxxQkFBQSxRQUdEdU0sRUFBZ0IsS0FDbkJVLEdBQVcxMkIsTUFBUXpCLEVBQUdxdkIsTUFBTXlMLFdBQWE5NkIsRUFBR3F2QixNQUFNMEwsWUFFM0QsRUFBQSxJQUFBLEdBRUh4cEIsRUFBQUEsWUFBQSxNQUFBLENBQUEsTUFDYyxnQkFBZ0IsRUFBQSxDQUFBQSxFQUFBLFlBQUEsTUFBQSxDQUFBLE1BQ2QscUJBQXFCLEVBQUEsQ0FDOUJtcEIsRUFBWSxtQkFBb0J4d0IsRUFBSyxFQUNyQ2lJLEVBQU0xUSxNQUNOaTVCLEVBQVksb0JBQXFCeHdCLEVBQUssQ0FBQyxHQUFBcUgsRUFBQUEsWUFBQSxNQUFBLENBQUEsTUFFOUIsdUJBQXVCLEVBQUEsQ0FDaENtcEIsRUFBWSwwQkFBMkJ4d0IsRUFBSyxFQUM1QzJ3QixHQUNBSCxFQUFZLDJCQUE0Qnh3QixFQUFLLENBQUMsQ0FBQSxDQUFBLENBQUEsQ0FJdEQsRUFDRGlpQixRQUFTQSxJQUFLLENBQ1osTUFBTWtOLEdBQWlCLENBQUEsRUFDdkJyMkIsT0FBQUEsRUFBRTZPLFFBQVF5bkIsRUFBZ0I3M0IsTUFBUXdCLElBQWEsQ0FDekNBLEdBQUsrM0IsT0FBUyxJQUdsQjNCLEdBQVF2cEIsS0FBSXlCLEVBQUFBLFlBQUEyWixFQUFBLGlCQUFBLFdBQUEsRUFBZ0Jqb0IsR0FBSSxJQUFBLENBQUksQ0FDdEMsQ0FBQyxFQUNEc08sRUFBQUEsWUFBQSxNQUFBLENBQUEsTUFDYyxzQkFBc0IsRUFBQSxDQUFBQSxFQUFBLFlBQUEsTUFBQSxDQUFBLE1BQ3BCLGNBQWMsRUFBQSxDQUN2Qm1wQixFQUFZLGdCQUFpQnh3QixFQUFLLEVBQUNxSCxFQUFBQSxZQUFBLE1BQUEsQ0FBQSxNQUN4QixtQkFDVG1wQixDQUFBQSxFQUFZLGlCQUFrQnh3QixFQUFLLEVBQUNxSCxFQUFBQSxZQUFBMlosRUFBQSxpQkFBQSxTQUFBLEVBQUErQixhQUFBLENBQUEsSUFDdkJ4VixHQUFhckIsRUFBWTNVLE1BQUssQ0FBQSxjQUFpQnkzQixDQUFhLENBQUEsRUFBQSxJQUFBLEVBQ3pFd0IsRUFBWSxrQkFBbUJ4d0IsRUFBSyxDQUFDLENBQUEsRUFHdkN3d0IsRUFBWSxtQkFBb0J4d0IsRUFBSyxDQUFDLEdBQUFxSCxFQUFBQSxZQUFBLE1BQUEsQ0FBQSxNQUU3QixxQkFBcUIsRUFBQSxDQUM5Qm1wQixFQUFZLG1CQUFvQnh3QixFQUFLLEVBQ3JDbXZCLEdBQ0FxQixFQUFZLG9CQUFxQnh3QixFQUFLLENBQUMsQ0FBQSxDQUFBLENBQUEsQ0FJaEQsRUFFSCxDQUVELEdBQUlsSyxFQUFHODNCLFlBQVltRCxlQUFnQixDQUNqQyxNQUFNQyxHQUFjbDdCLEVBQUc4M0IsWUFBWW1ELGVBQWVyRCxFQUFFLEVBQzlDdUQsR0FBY3gxQixFQUNwQixHQUFJdTFCLEdBQWEsQ0FDZixNQUFNRSxHQUFrQjNOLDBCQUF3QnlOLEVBQVcsRUFDM0R2MUIsRUFBVyxDQUNUd21CLFFBQVNBLElBQ1A1YSxFQUFBQSxZQUFBNnBCLEdBQUEsS0FBQXhQLEdBQXlCdVAsRUFBVyxFQUFYQSxHQUFXLENBQUFoUCxRQUFBQSxJQUFBLENBQVhnUCxFQUFXLENBQUEsQ0FBQSxFQUd6QyxDQUNGLENBRUQsTUFBTUUsR0FBVXI3QixFQUFHODNCLFlBQVl1RCxRQUN6QnRkLEVBQVMsQ0FDYixDQUFDc2QsRUFBTyxFQUFHN0UsRUFBZ0IvMEIsTUFDM0IsQ0FBQyxZQUFjNDVCLEVBQU8sRUFBRyxNQUFPNTVCLElBQWMsQ0FDNUMsR0FBSUEsS0FBVSxJQUFTKzBCLEVBQWdCLzBCLE1BQ3JDLE9BQU8sTUFBTXRCLEVBQU8sRUFFdEJxMkIsRUFBZ0IvMEIsTUFBUUEsRUFDMUIsR0FFSTY1QixHQUFVdDdCLEVBQUc4M0IsWUFBWXlELGtCQUFrQjNELEdBQUlJLENBQVEsRUFFdkRILEdBQWlCNzNCLEVBQUc4M0IsWUFBWUMsWUFBWUgsRUFBRSxFQUU5Q0csR0FBYyxHQURPSSxHQUFXMTJCLE1BQVEsZ0JBQWtCLEVBQ3ZCLElBQUlpMUIsRUFBZ0JqMUIsTUFBTW8yQixFQUFjLEdBQUssRUFBRSxHQUNsRjJELEdBQWUsQ0FDbkIsQ0FBQzNELEVBQWMsRUFBR0UsSUFHZDBELEdBQWMsQ0FDbEJ0RCxXQUFZQSxHQUFXMTJCLE9BR25CaTZCLEdBQVMsQ0FDYm5GLE9BQVFHLEVBQWdCajFCLE1BQU04MEIsUUFBVWhnQixFQUFNZ2dCLFFBRzFDb0YsR0FBa0JsTywwQkFBd0JtSyxFQUFFLEVBRWxELE9BQUFybUIsRUFBQUEsWUFBQW9xQixHQUFBMU8sRUFBQSxXQUVReUosRUFBZ0JqMUIsTUFDaEIrNUIsR0FDQXpkLEVBQ0F1ZCxHQUNBRyxHQUNBeEIsRUFBVXg0QixNQUNWaTZCLEdBQ0EvQyxFQUFzQmwzQixLQUFLLEVBQ3RCa0UsQ0FBUSxFQUl6QixDQUNELENBQUEsRUNsaEI0QmkyQixHQUFBQyxFQUFBQSxnQkFBeUIsQ0FDcEQsS0FBTSxnQkFDUixDQUFDLHVDQWNLLE1BQUFDLEVBQXVCMTBCLE1BQUksQ0FBQSxDQUFFLEVBWW5DOG9CLE9BQUFBLEVBQUEsUUFBUSxtQkFBb0IsS0FDbkIsQ0FDTCxLQUFLdHdCLEVBQXVCLENBQ3BCLE1BQUEyVixFQUFLM1YsRUFBSyxJQUFNLEtBQUssTUFBTSxLQUFLLE9BQVcsRUFBQSxHQUFPLEVBQUksR0FDNUQsT0FBTyxJQUFJLFFBQVEsQ0FBQzZWLEVBQVNDLElBQVcsQ0FDdEJvbUIsRUFBQSxNQUFNdm1CLENBQUUsRUFBSSxDQUMxQixHQUFBQSxFQUVBLE1BQU0sVUFBVW5OLEVBQWUsQ0FDdkIsTUFBQUEsRUFBUyxLQUFLeEksQ0FBSSxFQUN4QjZWLEVBQVFyTixDQUFRLENBQ2xCLEVBQ0EsVUFBVyxDQUNKeEksRUFBSyxJQUVELE9BQUFrOEIsRUFBZ0IsTUFBTXZtQixDQUFFLENBRW5DLENBQUEsQ0FDRixDQUNELENBQ0gsQ0FBQSxFQUVILHNSQ3NERCxTQUFTd21CLEdBQWF4bEIsRUFBWTVXLEVBQW1CLENBQ25EdXdCLEVBQUEsUUFBUSxjQUFlLElBQ2QzWixFQUFNLE1BQU0sT0FDcEIsRUFDTzJaLFVBQUEsaUJBQW1CeGUsR0FBaUIsQ0FDdEMvUixFQUFBLEtBQUssaUJBQWtCK1IsQ0FBTyxDQUFBLENBQ25DLEVBRUR3ZSxFQUFBLFFBQVEsa0JBQW1CLElBQ2xCM1osQ0FDUixDQUNILENBRUEsU0FBUzhFLEdBQVU5RSxFQUFZNVcsRUFBbUIsQ0FDaEQsTUFBTXE4QixFQUFZNTBCLEVBQUFBLE1BQ1o2MEIsRUFBZSxJQUNaRCxFQUFVLE1BR2JFLEVBQW9CLElBQ3BCRixFQUFVLE1BQ0xBLEVBQVUsTUFBTSxXQUV6QjM2QixHQUFPLEtBQUssK0JBQStCLEVBQ3BDLElBR0g4NkIsRUFBNkIsSUFDN0JILEVBQVUsTUFDTEEsRUFBVSxNQUFNLG9CQUV6QjM2QixHQUFPLEtBQUssd0NBQXdDLEVBQzdDLElBVVQsU0FBUys2QixFQUFrQixDQUFFLEtBQUEvckIsRUFBTSxVQUFBZ3NCLEVBQVksSUFBaUMsQ0FDMUVMLEVBQVUsT0FDRkEsRUFBQSxNQUFNLFFBQVEzckIsRUFBTWdzQixDQUFTLENBRTNDLENBRU8sTUFBQSxDQUNMLFVBQUFMLEVBQ0EsYUFBQUMsRUFDQSxrQkFBQUMsRUFDQSxrQkFBQUUsRUFDQSwyQkFBQUQsQ0FBQSxDQUVKLENBRUEsU0FBUzVnQixHQUFRK2dCLEVBQWdCL2xCLEVBQVk1VyxFQUFtQixDQThCdkQsTUFBQSxDQUNMLFlBOUJrQkksRUFBQUEsU0FBUyxJQUFNLG1CQUNqQyxHQUFJd1csRUFBTSxNQUFRQSxFQUFNLEtBQUssTUFBUUEsRUFBTSxLQUFLLEtBQU0sQ0FDcEQsSUFBSXBHLEVBQU8sS0FDWCxNQUFNb3NCLEVBQWMsQ0FBRSxHQUFHaG1CLEVBQU0sSUFBSyxFQUNoQyxPQUFBL1YsRUFBQStWLEVBQU0sU0FBTixNQUFBL1YsRUFBYyxXQUFXMmEsR0FBQTFFLEdBQUFDLEVBQUFILEVBQU0sU0FBTixZQUFBRyxFQUFjLFFBQVFILEVBQU0sS0FBSyxRQUFqQyxZQUFBRSxFQUF3QyxZQUF4QyxNQUFBMEUsRUFBbUQsUUFDOUVoTCxHQUFPcXNCLEdBQUFDLEdBQUFsVyxFQUFBaFEsRUFBTSxTQUFOLFlBQUFnUSxFQUFjLFFBQVFoUSxFQUFNLEtBQUssUUFBakMsWUFBQWttQixFQUF3QyxZQUF4QyxZQUFBRCxFQUFtRCxLQUN0REQsRUFBWSxPQUFTLE9BQ3ZCQSxFQUFZLE1BQVFwc0IsRUFBSyxPQUV2Qm9zQixFQUFZLE9BQVMsT0FDdkJBLEVBQVksTUFBUXBzQixFQUFLLE9BRXZCb3NCLEVBQVksU0FBVyxPQUNiQSxFQUFBLFFBQVVwc0IsRUFBSyxNQUFRLENBQUEsSUFJaEMsQ0FDTCxHQUFHb3NCLEVBQ0gsV0FBWWhtQixFQUFNLE9BQU8sZUFBaUJBLEVBQU0sT0FBTyxjQUFjQSxFQUFNLEtBQUssSUFBSSxFQUNwRixzQkFBd0I5VSxHQUFlLENBQ2pDOUIsRUFBQSxLQUFLLGFBQWMsQ0FBRSxDQUFDNFcsRUFBTSxLQUFLLElBQUksRUFBRzlVLENBQUEsQ0FBTyxDQUNyRCxDQUFBLENBRUosQ0FDTyxNQUFBLENBQ0wsS0FBTSxFQUFBLENBQ1IsQ0FDRCxDQUVDLENBRUosQ0FFQSxTQUFTaTdCLEdBQVdDLEVBQWVDLEVBQW1CLENBQ3BELEdBQUksQ0FBQ0QsRUFDSCxNQUFPLEdBRVQsTUFBTXJQLEVBQWEsQ0FBQSxFQUNuQixPQUFBdHFCLEVBQUUsUUFBUTI1QixFQUFVLENBQUNsN0IsRUFBT3lCLElBQVEsQ0FDOUJBLEVBQUksV0FBVzA1QixDQUFTLElBQzFCdFAsRUFBTXBxQixDQUFHLEVBQUl6QixFQUNmLENBQ0QsRUFDTTZyQixDQUNULENBRUEsU0FBU3VQLEdBQWV0bUIsRUFBWTVXLEVBQW1CLENBQUUsU0FBQStZLEVBQVUsYUFBQW9rQixHQUFxQixDQUNoRixNQUFBOThCLEVBQUtDLGFBQVUsTUFDckIsR0FBSUQsRUFBRyxNQUFNLGFBQWF1VyxFQUFNLEtBQUssRUFDbkMsTUFBTyxHQUVMLEdBQUEsQ0FBQ3ZXLEVBQUcsTUFBTSxpQ0FDWixNQUFPLEdBRUgsTUFBQSs4QixFQUFlMzFCLE1BQUksSUFBSSxFQUU3QixTQUFTNDFCLEdBQW9CLE9BQ3JCLE1BQUFDLEdBQVd6OEIsRUFBQWtZLEdBQUEsWUFBQUEsRUFBVSxRQUFWLFlBQUFsWSxFQUFpQixJQUNsQyxHQUFJeThCLEdBQVksTUFBUUEsRUFBUyxlQUFpQixLQUNoRCxPQUVGLE1BQU1DLEVBQVVELEVBQVMsY0FBY2o5QixFQUFHLE1BQU0saUJBQWlCLEVBQ2pFLEdBQUlrOUIsR0FBVyxLQUNiLE9BRUksTUFBQUMsRUFBY0YsRUFBUyxzQkFBQSxFQUF3QixPQUMvQ0csRUFBYUYsRUFBUSxzQkFBQSxFQUF3QixPQUNuREgsRUFBYSxNQUFRSSxFQUFjQyxFQUFhLEdBQUs3bUIsRUFBTSxNQUFNLGlCQUFtQixHQUU1RThtQixHQUFBLE1BQU0sK0JBQWdDTixFQUFhLEtBQUssQ0FDbEUsQ0FFQSxTQUFTTyxHQUF3QixDQUN6QixNQUFBTCxFQUFXdmtCLEVBQVMsTUFBTSxJQUNoQyxHQUFJdWtCLEdBQVksS0FDZCxPQUVGLE1BQU1NLEVBQWtCTixFQUFTLFdBRWhCLElBQUksZUFBZSxTQUFVdEosRUFBUyxDQUM3QzBKLEdBQUEsTUFBTSxnQkFBaUIxSixDQUFPLEVBRWxDQSxFQUFRLE9BQVMsR0FBS0EsRUFBUSxDQUFDLEVBQUUsWUFBWSxPQUFTLElBQ3RDcUosSUFDbEIsV0FBVyxJQUFNLENBQ0dBLEtBQ2pCLEdBQUcsRUFDTixXQUFXLElBQU0sQ0FDR0EsS0FDakIsR0FBRyxFQUNSLENBQ0QsRUFDUSxRQUFRTyxDQUFlLENBQ2xDLENBRUEveEIsT0FBQUEsRUFBQUEsVUFBVSxTQUFZLENBQ3BCLE1BQU1tUCxFQUFTLFNBQUEsRUFDZixNQUFNQSxFQUFTLFNBQUEsRUFDTzJpQixHQUFBLENBQ3ZCLEVBQ00sQ0FBRSxhQUFBUCxFQUFjLGtCQUFBQyxFQUN6QixDQUVBLFNBQVMvZ0IsR0FBUzFGLEVBQVk1VyxFQUFtQixDQUN6QyxNQUFBSyxFQUFLQyxhQUFVLE1BQ2Z5WSxFQUFXdFIsRUFBQUEsTUFDWG8yQixFQUFhcDJCLEVBQUFBLE1BQ2IwMUIsRUFBZTExQixFQUFBQSxNQUNmLENBQUUsYUFBQTIxQixFQUFjLGtCQUFBQyxDQUFBLEVBQXNCSCxHQUFldG1CLEVBQU81VyxFQUFLLENBQUUsU0FBQStZLEVBQVUsYUFBQW9rQixDQUFBLENBQWMsRUFDM0YsQ0FBRSxNQUFBaHdCLENBQU0sRUFBSVMsR0FBUyxFQUNyQmt3QixFQUFlQyxFQUFBQSxNQUFNbm5CLEVBQU8sT0FBTyxFQUNuQ29uQixFQUFnQjU5QixFQUFBQSxTQUFTLElBQU0sQ0FFbkMsSUFBSTY5QixFQUFjLENBQUEsR0FDZGIsR0FBQSxZQUFBQSxFQUFjLFFBQVMsT0FDekJhLEVBQWM1OUIsRUFBRyxNQUFNLGVBQWUrOEIsRUFBYSxLQUFLLEdBRTFELE1BQU14MUIsRUFBU04sR0FBTSxLQUFLLEtBQUt3MkIsRUFBYyxVQUFXLFVBQVcsWUFBWSxFQUV4RTN3QixPQUFBQSxFQUFNOHdCLEVBQWEsQ0FBRSxHQUFHaitCLEVBQUksTUFBTyxHQUFHNEgsRUFBUSxDQUFBLENBQ3RELEVBRUtzMkIsRUFBa0JILEVBQUFBLE1BQU1ubkIsRUFBTyxTQUFTLEVBRXhDdW5CLEVBQW9CLzlCLEVBQUFBLFNBQVMsSUFDMUIyOEIsR0FBVy84QixFQUFJLE1BQU8sTUFBTSxDQUNwQyxFQUVLbytCLEVBQW9CaCtCLEVBQUFBLFNBQVMsSUFDMUIyOEIsR0FBVy84QixFQUFJLE1BQU8sTUFBTSxDQUNwQyxFQUNLcStCLEVBQXNCaitCLEVBQUFBLFNBQVMsSUFDNUIyOEIsR0FBVy84QixFQUFJLE1BQU8sUUFBUSxDQUN0QyxFQUNLcytCLEVBQXVCbCtCLEVBQUFBLFNBQVMsSUFDN0IyOEIsR0FBVy84QixFQUFJLE1BQU8sU0FBUyxDQUN2QyxFQUVLNlgsRUFBaUJwUSxFQUFBQSxNQUVqQjgyQixFQUFnQm4rQixFQUFBQSxTQUFTLElBQU0sQ0FDbkMsTUFBTW8rQixFQUFhLENBQUUsUUFBUzVuQixFQUFNLFFBQVEsVUFBWSxJQUN4RCxPQUFJQSxFQUFNLGNBQ0Y0bkIsRUFBQTVuQixFQUFNLFdBQVcsRUFBSSxJQUV0QjRuQixDQUFBLENBQ1IsRUFFS0MsRUFBa0JoM0IsRUFBQUEsTUFFbEJpM0IsRUFBY2ozQixNQUFJLEVBQUssRUFLdEIsTUFBQSxDQUNMLFNBQUFzUixFQUNBLGFBQUFva0IsRUFDQSxXQUFBVSxFQUNBLGNBQUFHLEVBQ0EsZ0JBQUFFLEVBQ0Esa0JBQUFDLEVBQ0EsZUFBQXRtQixFQUNBLFlBQUE2bUIsRUFDQSxrQkFieUI1OEIsR0FBZSxDQUN4QzQ4QixFQUFZLE1BQVE1OEIsQ0FBQSxFQWFwQixrQkFBQXM4QixFQUNBLG9CQUFBQyxFQUNBLHFCQUFBQyxFQUNBLGtCQUFBakIsRUFDQSxjQUFBa0IsRUFDQSxnQkFBQUUsQ0FBQSxDQUVKLENBS0EsTUFBQUUsR0FBZWh6QixrQkFBZ0IsQ0FDN0IsS0FBTSxTQUNOLGFBQWMsR0FDZCxNQUFPLENBSUwsTUFBTyxDQUNMLEtBQU0sT0FDTixTQUFVLENBQ1IsTUFBTyxFQUNULENBQ0YsRUFLQSxLQUFNLENBQ0osS0FBTSxLQUNSLEVBSUEsVUFBVyxDQUNULEtBQU0sT0FDTixTQUFVLENBQ1IsTUFBTyxFQUNULENBQ0YsRUFJQSxPQUFRLENBQ04sS0FBTSxPQUNOLFNBQVUsQ0FDUixNQUFPLEVBQ1QsQ0FDRixFQUlBLFFBQVMsQ0FDUCxLQUFNLE9BQ04sU0FBVSxDQUNSLE1BQU8sRUFDVCxDQUNGLEVBSUEsVUFBVyxDQUNULEtBQU0sT0FDTixTQUFVLENBQ1IsTUFBTyxFQUNULENBQ0YsRUFJQSxLQUFNLENBQ0osS0FBTSxPQUNOLFNBQVUsQ0FDUixNQUFPLEVBQ1QsQ0FDRixFQUlBLFFBQVMsQ0FDUCxLQUFNLE9BQ04sU0FBVSxDQUNSLE1BQU8sRUFDVCxDQUNGLEVBSUEsU0FBVSxDQUNSLEtBQU0sT0FDTixTQUFVLENBQ1IsTUFBTyxFQUNULENBQ0YsRUFJQSxTQUFVLENBQ1IsS0FBTSxPQUNOLFNBQVUsQ0FDUixNQUFPLEVBQ1QsQ0FDRixFQUlBLFdBQVksQ0FDVixLQUFNLE9BQ04sU0FBVSxDQUNELE1BQUEsQ0FBRSxLQUFNLEdBQ2pCLENBQ0YsRUFJQSxVQUFXLENBQ1QsS0FBTSxPQUNOLFNBQVUsQ0FDUixNQUFPLEVBQ1QsQ0FDRixFQUtBLFlBQWEsQ0FBQyxFQUlkLEtBQU0sQ0FDSixLQUFNLE9BQ04sU0FBVSxDQUNSLE1BQU8sRUFDVCxDQUNGLEVBS0EsVUFBVyxDQUNULEtBQU0sT0FDTixTQUFVLENBQ0QsTUFBQSxDQUFFLEtBQU0sR0FDakIsQ0FDRixDQUNGLEVBQ0EsTUFBTyxDQUFDLGdCQUFpQixpQkFBa0IsaUJBQWtCLG9CQUFxQixvQkFBcUIsWUFBWSxFQUNuSCxNQUFNaUwsRUFBWTVXLEVBQVUsQ0FDcEIsS0FBQSxDQUFFLEdBQUFLLEdBQU8ySCxHQUFBQSxRQUNmbzBCLEdBQWF4bEIsRUFBTzVXLENBQUcsRUFDakIsTUFBQXlVLEVBQVNpSCxHQUFvQixFQUM3QmtqQixFQUFPaGpCLEdBQVFuSCxFQUFRbUMsRUFBTzVXLENBQUcsRUFDakNzRSxFQUFRZ1ksR0FBUzFGLEVBQU81VyxDQUFHLEVBQzFCLE1BQUEsQ0FDTCxHQUFBSyxFQUNBLEdBQUdvVSxFQUNILEdBQUduUSxFQUNILEdBQUdzNkIsQ0FBQSxDQUVQLENBQ0YsQ0FBQyxRQzNlRDl5QixHQUFBLENBQUEsTUFBQSxrQkEyQndEQyxHQUFNLENBQUEsSUFBQSw2QkFRVkMsR0FBTSxDQUFBLElBQUEsMkJBd0M3Q0MsR0FBQSxDQUFBLE1BQU0sc0JBSU55ZixHQUFBLENBQUEsTUFBTSx1UUFZTG1ULEVBQUF0VCxtQkEzRmQsaUJBRVMxVixFQUVBLE9BQUFwSixFQUFBLFVBQUEsRUFBb0IrZSxFQUFBLFlBQUFRLDRCQUFBbnJCLEVBQUFzTCxFQUFBLFlBQUEsWUFBQXRMLEVBQUEsS0FBQSxtQkFBQSxFQUFBeXNCLGFBQUEsQ0FDakJ6WCxJQUFBQSxlQUtHLE1BQUEsbUJBQUEsRUFBQTFKLEVBQ1QsVUFBK0IsQ0FBQSxNQUFBQSxFQUFBLGFBQUEsQ0FBQSxFQUFBLENBQUEsYUFBQXNmLEVBQUEsUUFBQSxJQUFBLENBRXRCOWUsYUFBQVIsRUFBYSxPQUNZLFlBQUEsQ0FBQSxDQUFBLGlDQUV6QlEsYUFBQVIsRUFBYSxPQUNZLGVBQUEsQ0FBQSxDQUFBLGlDQUd6QlEsYUFBTVIsRUFHVCxPQUFBLGVBQUEsQ0FBQSxDQUFBLEVBREosT0FBQXNmLEVBQUEsUUFBQSxJQUFBLENBQUE1ZSxFQUFBLG1CQUFBLE1BQUFmLEdBQUEsNEtBSU8sQ0FBQSxDQUFBLENBQUEsRUFDVCxVQUFBMmYsRUFBQSxRQUFBLElBQUEsQ0FDRXRmLEVBQUEsV0FBbUNBLEVBQ25DLFVBQUEsT0FBQSxJQUFBTSxFQUFBQSxZQUFtQ0MsRUFBQUEsbUJBN0IzQyxNQUFBWCxHQUFBLENBOEJRWSxhQUFvQ1IsRUFBQSxPQUFBLGdCQUFBLEVBQUF5RixjQUFBa3RCLEVBQUE1SSxFQUFBQSxlQUFBNkksRUFBQSxtQkFBQTV5QixFQUFBLFNBQUEsQ0FBQSxFQUFBLEtBQUEsRUFBQSxFQTlCNUNRLGFBQUFSLEVBQUEsT0FBQSxpQkFBQSxDQUFBLENBQUEsR0FrQ2VTLEVBQUFBLG1CQUtILEdBQUEsRUFBQSxDQUFBLENBQUEsRUFKTixRQUFBNmUsRUFBQSxRQUFBLElBQUEsQ0FBQXRmLEVBQ0UsU0FBaUNBLEVBQUEsUUFBQSxPQUFBLElBQUFNLEVBQUFBLFlBQ3NFQyxFQUFBQSxtQkFBQSxNQUF2R1YsR0FBWSxDQUFBVyxhQUEwQzJ4QixFQUFvQixPQUFBLGNBQUEsRUFBQTFzQixFQUFBLFlBQVl0TixFQUFhZ3BCLGFBQUEsQ0FBQSxJQUFBLFlBQUEsRUFBQW5oQixFQUFBLFFBQUEsQ0FBQSxNQUFBQSxFQUFBLHFCQUNuRyxRQUFrQ0EsRUFBQSxNQUFBLE9BQUEsQ0FBQSxFQUFBLEtBQUEsR0FBQSxDQUFBLFFBQUEsU0FBQSxDQUFBLEVBdEMxQ1EsYUFBQVIsRUFBQSxPQUFBLGVBQUEsQ0FBQSxDQUFBLEdBeUNtQlMsRUFBQUEsbUJBQ2dGLEdBQUEsRUFBQSxDQUFBLENBQUEsRUFBN0YsS0FBQTZlLEVBQUEsUUFBQSxJQUFBLENBQUF0ZixFQTFDTiw4QkEwQzJELEVBQUFxZixFQUFBLFlBQUF3VCxFQUFBMVIsYUFBQSxDQUFDLElBQUssRUFBbUIyUixJQUFBQSxVQTFDcEYsTUFBQSxTQUFBLEVBQUE5eUIsRUFBQSxXQUFBLEVBQUEsS0FBQSxFQUFBLEdBNENvQlMsRUFVWixtQkFBQSxHQUFBLEVBQUEsQ0FBQSxDQUFBLEVBUkcsTUFBQTZlLEVBQUEsUUFBQyxJQUFVLENBQUE3WixFQUFBLFlBQ1JzdEIsRUFBZTVSLGFBQUEsQ0FDYjBRLElBQUFBLFdBQ1AsTUFBTyxlQUFBLEVBQ1A3eEIsRUFBZSxjQUFBLENBQ2YsUUFBWWd6QixFQUFBQSxNQUFBQSxRQUNaLFFBQU01bkIsRUFBSSxNQUFBLFFBQ1YsYUFBWTRtQixFQUFBQSxVQUFBQSxLQUFBQSxFQUFBQSxxQ0FJTixDQUFBLEVBQUksS0FVUCxHQUFBLENBQUEsVUFBQSxVQUFBLGFBQUEsT0FBQSxZQUFBLENBQUEsQ0FBQSxDQUFBLE9BVEQxUyxFQUFJLFFBQUEsSUFBQSxDQUFBNWUsRUFBQUEsbUJBMURmLE1BMER1QyxDQUFBLElBQUEsa0JBQy9CLE1BTUVtaUIsRUFBQSxlQUFBLENBQUEsNEJBQUEsQ0FBQSx3QkFBQTdpQixFQUFBLFdBQUEsQ0FBQSxDQUFBLENBQUEsRUFBQSxlQUpRaXlCLEVBQWlCLENBQ3hCLElBQUEsaUJBQ0EsTUFBQWp5QixFQUFBLGtCQUNBLGdCQUFZQSxFQUFBLGdCQUFBLGNBQUFBLEVBQUEsaUlBTVIsRUFBQSxDQUFBLENBQUEsQ0FBQSxhQUVQc2YsRUFFTSxRQUFBLElBQUEsQ0FEZ0M1ZSxFQUFBLG1CQUFBLE1BQUFaLEdBQUEsQ0FBQVksRUFBQSxtQkFBQSxNQUFBNmUsR0FBQSxDQUV0Qy9lLGFBR01SLEVBQUEsT0FBQSxpQkFBQSxDQUFBLENBQUEsNkJBREpncUIsR0E3RVYsQ0FBQWhxQixFQUFBLFdBQUEsT0FBQSxJQUFBTSxFQUFBQSxVQUFBLEVBQUErZSxjQUFBUSxFQUFBQSx3QkFBQTdmLEVBQUEsR0FBQSxXQUFBLElBQUEsRUFBQStwQixFQUFBQSxlQUFBNUksRUFBQSxXQUFBLENBQUEsSUFBQSxDQUFBLEVBQUFuaEIsRUFBQSxVQUFBLENBQUEsRUFBQSxLQUFBLEVBQUEsR0ErRVFTLHFCQUVNLEdBRk4sRUFBQSxDQUFBLENBQUEsNEVBTU8sQ0FBQSxDQUFBLENBQUEsOEJBR0FELGFBQUFSLEVBQWEsT0FDWSxZQUFBLENBQUEsQ0FBQSxpQ0F6RnhDUSxhQVFpQlIsRUFBQSxPQUFBLGVBQUEsQ0FBQSxDQUFBLHlCQVJqQlEsYUFBQVIsRUFBQSxPQUFBLFNBQUEsQ0FBQSxDQUFBLHFEQ3dEQWl6QixHQUFlenpCLGtCQUFnQixDQUM3QixLQUFNLGNBQ04sTUFBTyxDQUlMLFNBQVUsQ0FDUixLQUFNLE1BQ1IsRUFVQSxRQUFTLENBQ1AsS0FBTSxNQUNSLEVBT0EsTUFBTyxDQUNMLEtBQU0sTUFDUixFQUlBLE9BQVEsQ0FDTixLQUFNLE9BQ04sUUFBUyxTQUNYLEVBSUEsTUFBTyxDQUNMLEtBQU0sT0FDTixRQUFTLEtBQ0EsR0FFWCxDQUNGLEVBQ0EsTUFBTyxDQUFDLFFBQVEsRUFDaEIsTUFBTWlMLEVBQVk1VyxFQUFLLENBQ2YsS0FBQSxDQUFFLEdBQUFLLEdBQU8ySCxHQUFBQSxRQUNULENBQUUsTUFBQW1GLEdBQVVTLEtBQ1osQ0FBRSxFQUFBdkYsR0FBTVMsS0FDUnUyQixFQUFXLzdCLEdBQWMsQ0FDN0IsTUFBTWlGLEVBQVFxTyxFQUFNLE1BQU12VyxFQUFHLFlBQVksS0FBSyxFQUN4Q21LLEVBQU1vTSxFQUFNLE1BQU12VyxFQUFHLFlBQVksR0FBRyxFQUNwQzBJLEVBQWtCLENBQUUsSUFBS3pGLEVBQUssSUFBSyxJQUFBa0gsRUFBSyxJQUFLbEgsRUFBTSxNQUFBaUYsRUFBTyxHQUFHcU8sRUFBTSxLQUFNLEVBQy9FLEdBQUl0VCxFQUFLLE1BQ0EsT0FBQUEsRUFBSyxNQUFNeUYsQ0FBQyxFQUVqQi9JLEVBQUEsS0FBSyxTQUFVK0ksQ0FBQyxDQUFBLEVBRWhCLENBQUUsV0FBQWdHLEdBQWVjLEtBQ2pCeXZCLEVBQWNsL0IsRUFBQUEsU0FBUyxLQUNwQixDQUNMLFNBQVV3VyxFQUFNLFNBQ2hCLFFBQVNBLEVBQU0sUUFDZixPQUFRQSxFQUFNLE9BQ2QsTUFBT0EsRUFBTSxLQUFBLEVBRWhCLEVBQ0syb0IsRUFBZXh3QixFQUNuQixJQUNTdXdCLEVBQVksTUFFckIsSUFBTSxDQUNKLE1BQU0vMkIsRUFBUXFPLEVBQU0sTUFBTXZXLEVBQUcsWUFBWSxLQUFLLEVBQ3hDbUssRUFBTW9NLEVBQU0sTUFBTXZXLEVBQUcsWUFBWSxHQUFHLEVBQzFDLE1BQU8sQ0FBRSxHQUFHdVcsRUFBTSxNQUFPLE1BQUFyTyxFQUFPLElBQUFpQyxDQUFJLENBQ3RDLENBQUEsRUFJSWcxQixFQUFxQnAvQixFQUFBQSxTQUFTLElBQU0sQ0FDeEMsSUFBSXEvQixFQUFhLEtBQ2pCLEdBQUlGLEVBQWEsTUFBTSxRQUFVLE1BQVFBLEVBQWEsTUFBTSxTQUFXLFVBQVcsQ0FDaEYsTUFBTTNGLEVBQVUsQ0FDZCxLQUFNLENBQ0osSUFBSyxPQUNMLEtBQU12eEIsRUFBRSx3QkFBd0IsRUFDaEMsTUFBT0EsRUFBRSx3QkFBd0IsQ0FDbkMsRUFDQSxLQUFNLENBQ0osSUFBSyxPQUNMLEtBQU1BLEVBQUUsd0JBQXdCLEVBQ2hDLE1BQU9BLEVBQUUsd0JBQXdCLENBQ25DLEVBQ0EsS0FBTSxDQUNKLElBQUssT0FDTCxLQUFNLFVBQ04sS0FBTUEsRUFBRSx3QkFBd0IsRUFDaEMsTUFBT0EsRUFBRSx3QkFBd0IsQ0FDbkMsRUFDQSxPQUFRLENBQ04sSUFBSyxTQUNMLEdBQUdoSSxFQUFHLE9BQU8sT0FBTyxRQUFRLEVBQzVCLEtBQU1nSSxFQUFFLDBCQUEwQixFQUNsQyxNQUFPQSxFQUFFLDBCQUEwQixDQUNyQyxDQUFBLEVBRUZvM0IsRUFBYXR5QixFQUFNeXNCLEVBQVMyRixFQUFhLE1BQU0sT0FBTyxDQUFBLE1BRXRERSxFQUFhRixFQUFhLE1BQU0sTUFBTUEsRUFBYSxNQUFNLE1BQU0sRUFHakUsTUFBTUcsRUFBc0IsQ0FBQSxFQUM1QixPQUFBcjhCLEVBQUUsUUFBUW84QixFQUFZLENBQUNuOEIsRUFBTUMsSUFBUSxDQUNuQ0QsRUFBSyxJQUFNQyxFQUNQRCxFQUFLLE9BQVMsSUFHbEJvOEIsRUFBSyxLQUFLcDhCLENBQUksQ0FBQSxDQUNmLEVBRU1ELEVBQUUsT0FBT3E4QixFQUFPcDhCLEdBQ2RBLEVBQUssT0FBU3dNLEdBQVUsWUFDaEMsQ0FBQSxDQUNGLEVBRUs2dkIsRUFBMEJ2L0IsRUFBQUEsU0FBUyxJQUVyQ20vQixFQUFhLE1BQU0sVUFBWSxNQUMvQkEsRUFBYSxNQUFNLFNBQVMsU0FBVyxNQUN2Q0EsRUFBYSxNQUFNLFNBQVMsU0FBVyxHQUN2Q0MsRUFBbUIsTUFBTSxRQUFVRCxFQUFhLE1BQU0sU0FBUyxRQUV4RCxFQUVGQSxFQUFhLE1BQU0sU0FBUyxTQUFXLENBQy9DLEVBQ1EsU0FBQUssRUFBY3Q4QixFQUFXaUYsRUFBZSxDQUkvQyxPQUhJakYsRUFBSyxXQUFhLElBR2xCcThCLEVBQXdCLE1BQVEsR0FBS0EsRUFBd0IsTUFBUXAzQixDQUkzRSxDQUNNLE1BQUFzM0IsRUFBaUJ6L0IsRUFBQUEsU0FBUyxJQUFNLENBQ3BDLElBQUltSSxFQUFRLEVBQ0QsVUFBQWpGLEtBQVFrOEIsRUFBbUIsTUFBTyxDQUUzQyxHQURXSSxFQUFjdDhCLEVBQU1pRixDQUFLLEVBRTNCLE1BQUEsR0FFVEEsR0FDRixDQUNPLE1BQUEsRUFBQSxDQUNSLEVBRUQsU0FBU3UzQixFQUFvQjlQLEVBQWEsQ0FDL0IsUUFBQStQLEtBQU9QLEVBQW1CLE1BQzdCLEdBQUF4UCxJQUFXK1AsRUFBSSxJQUFLLENBQ3RCVixFQUFRVSxDQUFHLEVBQ1gsTUFDRixDQUVKLENBRU0sTUFBQUMsRUFBMEI1L0IsRUFBQUEsU0FBUyxJQUFNLENBQzdDLE1BQU02L0IsRUFBZSxDQUFBLEVBQ2pCLEdBQUE1L0IsRUFBRyxTQUFTLGFBQWUsT0FBUSxDQUVyQyxNQUFNcS9CLEVBQU9GLEVBQW1CLE1BQzFCdi9CLEVBQXNCLENBQUEsRUFDNUJvRCxFQUFFLFFBQVFxOEIsRUFBTSxDQUFDNTlCLEVBQU95RyxJQUFVLENBQzVCekcsRUFBTSxPQUFTLElBQVM4OUIsRUFBYzk5QixFQUFPeUcsQ0FBSyxHQUNwRHRJLEVBQUssS0FBSyxDQUNSLENBQUNJLEVBQUcsU0FBUyxLQUFLLEVBQUd5QixFQUFNLElBQzNCLENBQUN6QixFQUFHLFNBQVMsS0FBSyxFQUFHeUIsRUFBTSxLQUMzQixNQUFPQSxFQUFNLEtBQUEsQ0FDZCxDQUNILENBQ0QsRUFDRG0rQixFQUFRLFFBQVVoZ0MsQ0FDcEIsQ0FDTyxNQUFBLENBQ0wsR0FBR29ELEVBQUUsS0FBS3VULEVBQU0sU0FBVSxPQUFRLFNBQVMsRUFDM0MsR0FBR3ZXLEVBQUcsU0FBUyxRQUFReS9CLENBQW1CLEVBQzFDLEdBQUdHLENBQUEsQ0FDTCxDQUNELEVBRU0sTUFBQSxDQUNMLEdBQUE1L0IsRUFDQSxlQUFBdy9CLEVBQ0EsbUJBQUFMLEVBQ0Esb0JBQUFNLEVBQ0Esd0JBQUFILEVBQ0EsUUFBQU4sRUFDQSxjQUFBTyxFQUNBLHdCQUFBSSxDQUFBLENBRUosQ0FDRixDQUFDLFFDcFFEbDBCLEdBQUEsQ0FBQSxNQUFBLGlCQWFnQ0MsR0FBTSxDQUFBLElBQUEsa0hBWnBDbTBCLEVBQUEzVSxtQkF1Q00sU0F2Q04sRUFFRSxPQUFBOWUsWUFBQSxFQUFBQyxxQkFPVyxNQVZmWixHQUFBLENBQUFhLGFBQUFSLEVBQUEsT0FBQSxzQkFBQStwQixFQUFBLGVBR2dFNkkscUJBQUs1eUIsRUFBQSxLQUFBLENBQUEsQ0FBQSxHQUFBTSxFQUFBQSxVQUVsRCxFQUFJLEVBQUFDLEVBQUEsbUJBQWVrekIsV0FBYyxLQUFNM0ssRUFBSyxXQUFBOW9CLEVBQUEsbUJBQUEsQ0FBQTdJLEVBQUFpRixLQUR6RGtFLEVBQUFBLFVBQUEsRUFBQUMsRUFBQSxtQkFLRXNvQixnQkFMRnpzQixHQUtFLENBQUFqRixFQVRSLDhDQU04QixFQUFBa29CLGNBQUEyVSxFQUFBN1MsRUFBQUEsV0FBQSxDQU45QixJQUFBLEVBT29CLE1BQUEsaUJBQ1gsUUFSVCxFQUFBLEVBQUFocUIsRUFBQSxDQUFBLFFBQUE4OEIsRUFBQUEsY0FBQXBRLEdBQUE3akIsRUFBQSxRQUFBN0ksQ0FBQSxFQUFBLENBQUEsTUFBQSxDQUFBLENBQUEsQ0FBQSxFQUFBLEtBQUEsR0FBQSxDQUFBLFNBQUEsQ0FBQSxHQUFBc0osRUFBQSxtQkFBQSxHQUFBLEVBQUEsQ0FXSSxFQUFBLEVBQUEsRUFFWWl6QixFQUFBQSxHQUFBQSxHQUFBQSxhQUFBQSxFQUFBQSxPQUFaLHdCQXlCTzNKLEVBQUEsZUFBQTZJLHFCQUFBNXlCLEVBQUEsS0FBQSxDQUFBLENBQUEsRUF0QlVBLEVBQUEsZ0JBQUFNLEVBQUEsVUFBQSxFQUFDQyxFQUFBQSxtQkFBaUIsT0FtQmpCWCxHQUFBLEVBaEJGVSxFQUFBQSxVQUFBLEVBQUMrZSxjQUFTUSwwQkFBVTdmLEVBQUEsR0FBQSxTQUFBLElBQUEsRUFBQStwQixFQUFBQSxlQUFBNkksRUFBQUEsbUJBQUE1eUIsRUFBQSx1QkFBQSxDQUFBLEVBQUEsQ0FBQSxDQUFBQSxFQUFBLEdBQUEsU0FBQSxRQUY5QixFQWpCVnNmLEVBQUEsUUFBQSxJQUFBLENBQUF0ZixFQUFBLEdBQUEsU0FBQSxhQXNCaUUsUUFBckRNLEVBQUFBLFlBQUErZSxFQUFBQSxZQUFBUSxFQUFBQSx3QkFZVzdmLEVBbEN2QixHQUFBLGFBc0I4Q3F6Qix1QkF0QjlDbFMsYUFzQnlDLENBQUEsSUFBQSxDQUFBLEVBQUFuaEIsRUFBQSxHQUFBLGFBQUEsUUFBQUEsRUFBQSxtQkFBQSxDQUFBLENBQUEsRUFBQSxDQUFBLFFBQUFzZixFQUFBLFFBQUEsSUFBQSxjQUdkLEVBQUksRUFBQS9lLEVBQUEsbUJBQWNrekIsV0FBYyxLQUFNM0ssRUFBSyxXQUFBOW9CLEVBQUEsbUJBQUEsQ0FBQTdJLEVBQUFpRixtQkFGeERtRSxFQXZCZCxtQkFBQXNvQixFQUFBLFNBQUEsQ0FBQSxJQXdCcUIzMEIsR0FBRyxDQXhCeEJpRCxFQUFBLE9BQUEsSUFBQTZJLEVBQUEsY0FBQTdJLEVBQUFpRixDQUFBLEdBQUFrRSxFQUFBQSwwQkEwQmlDdWYsRUFBbUIsd0JBQUE3ZixFQUFBLEdBQUEsYUFBQSxJQUFBLEVBQUFtaEIsYUFBQSxDQTFCcEQsSUFBQSxFQUFBLENBMkJ3Qm5oQixFQUFLLEdBQVksYUFBQSxTQUFBLEVBQUEsRUFBQTdJLEVBQUEsSUFDeEIsUUFBUSxFQUFBLEVBQUFBLEVBQUEsYUFBQSxDQTVCekIsU0FBQUEsRUFBQSxRQUFBLENBOEJnQixFQUFBLENBQUEsUUFBVW1vQixFQUFDLFFBQUEsSUFBQSxDQTlCM0I1ZSxFQUFBLG1CQUFBLE1BQUF5Z0IsYUFBQSxDQThCcUUsTUFBQSw4QkFDL0IsUUFBQSxFQUFBLEVBQUFocUIsQ0FBQSxFQUFBLENBL0J0Q0EsRUFBQSxNQUFBbUosRUFBQUEsWUErQndEK2UsRUFBQUEsWUFBSTBVLEVBQUEsQ0FBQSxJQUFBLEVBL0I1RCxLQUFBNThCLEVBQUEsSUFBQSxFQUFBLEtBQUEsRUFBQSxDQStCZ0UsTUFBQyxDQUFBLEdBQUFzSixFQUFBLG1CQUFBLEdBQUEsRUFBQSw2REEvQmpFLEVBQUEsRUFBQSxDQUFBLENBQUEsRUFBQSxFQUFBLENBQUEsRUFBQSxLQUFBLENBQUEsVUFBQSxDQUFBLEdBQUFBLEVBQUEsbUJBQUEsR0FBQSxFQUFBLE9BQUEsRUFBQSxHQUFBLEVBQUEsQ0FBQSxFQUFBLEVBQUEsQ0FlNEMsRUFBQSxFQUFBLEdBQUFBLHFCQUFBLEdBQUEsRUFBQSxDQUFBLENBQUEseUJBZjVDZ0YsY0FBQXV1QixFQUFBakssRUFBQSxlQUFBNkkscUJBQUE1eUIsRUFBQSxTQUFBLElBQUEsQ0FBQSxFQUFBLEtBQUEsRUFBQSxDQUFBLENBQUEsS0FBQSxFQUFBLElBQUEsRUFBQSxDQXVDSSxHQUFBUyxFQUFBQSxtQkFBQSxHQUFBLEVBQUEsa0lDdkNKLFNBQVN5ekIsSUFBVyxDQUNsQkEsT0FBQUEsR0FBVyxPQUFPLE9BQVMsT0FBTyxPQUFPLEtBQUksRUFBSyxTQUFVanpCLEVBQVEsQ0FDbEUsUUFBU3JILEVBQUksRUFBR0EsRUFBSSxVQUFVLE9BQVFBLElBQUssQ0FDekMsSUFBSXU2QixFQUFTLFVBQVV2NkIsQ0FBQyxFQUV4QixRQUFTeEMsS0FBTys4QixFQUNWLE9BQU8sVUFBVSxlQUFlLEtBQUtBLEVBQVEvOEIsQ0FBRyxJQUNsRDZKLEVBQU83SixDQUFHLEVBQUkrOEIsRUFBTy84QixDQUFHLEVBRzdCLENBRUQsT0FBTzZKLENBQ1gsRUFDU2l6QixHQUFTLE1BQU0sS0FBTSxTQUFTLENBQ3ZDLENBRUEsU0FBU0UsR0FBZUMsRUFBVUMsRUFBWSxDQUM1Q0QsRUFBUyxVQUFZLE9BQU8sT0FBT0MsRUFBVyxTQUFTLEVBQ3ZERCxFQUFTLFVBQVUsWUFBY0EsRUFFakNFLEdBQWdCRixFQUFVQyxDQUFVLENBQ3RDLENBRUEsU0FBU0UsR0FBZ0I1MkIsRUFBRyxDQUMxQixPQUFBNDJCLEdBQWtCLE9BQU8sZUFBaUIsT0FBTyxlQUFlLEtBQU0sRUFBRyxTQUF5QjUyQixFQUFHLENBQ25HLE9BQU9BLEVBQUUsV0FBYSxPQUFPLGVBQWVBLENBQUMsQ0FDakQsRUFDUzQyQixHQUFnQjUyQixDQUFDLENBQzFCLENBRUEsU0FBUzIyQixHQUFnQjMyQixFQUFHakYsRUFBRyxDQUM3QixPQUFBNDdCLEdBQWtCLE9BQU8sZUFBaUIsT0FBTyxlQUFlLEtBQUksRUFBSyxTQUF5QjMyQixFQUFHakYsRUFBRyxDQUN0RyxPQUFBaUYsRUFBRSxVQUFZakYsRUFDUGlGLENBQ1gsRUFDUzIyQixHQUFnQjMyQixFQUFHakYsQ0FBQyxDQUM3QixDQUVBLFNBQVM4N0IsSUFBNEIsQ0FFbkMsR0FESSxPQUFPLFFBQVksS0FBZSxDQUFDLFFBQVEsV0FDM0MsUUFBUSxVQUFVLEtBQU0sTUFBTyxHQUNuQyxHQUFJLE9BQU8sT0FBVSxXQUFZLE1BQU8sR0FFeEMsR0FBSSxDQUNGLGVBQVEsVUFBVSxRQUFRLEtBQUssUUFBUSxVQUFVLFFBQVMsQ0FBRSxFQUFFLFVBQVksQ0FBRSxDQUFBLENBQUMsRUFDdEUsRUFDUixNQUFXLENBQ1YsTUFBTyxFQUNSLENBQ0gsQ0FFQSxTQUFTQyxHQUFXQyxFQUFRLy9CLEVBQU1nZ0MsRUFBTyxDQUN2QyxPQUFJSCxHQUF5QixFQUMzQkMsR0FBYSxRQUFRLFVBQVUsT0FFL0JBLEdBQWEsU0FBb0JDLEVBQVEvL0IsRUFBTWdnQyxFQUFPLENBQ3BELElBQUkxM0IsRUFBSSxDQUFDLElBQUksRUFDYkEsRUFBRSxLQUFLLE1BQU1BLEVBQUd0SSxDQUFJLEVBQ3BCLElBQUlpZ0MsRUFBYyxTQUFTLEtBQUssTUFBTUYsRUFBUXozQixDQUFDLEVBQzNDWixFQUFXLElBQUl1NEIsRUFDbkIsT0FBSUQsR0FBT0wsR0FBZ0JqNEIsRUFBVXM0QixFQUFNLFNBQVMsRUFDN0N0NEIsQ0FDYixFQUdTbzRCLEdBQVcsTUFBTSxLQUFNLFNBQVMsQ0FDekMsQ0FFQSxTQUFTSSxHQUFrQmxoQixFQUFJLENBQzdCLE9BQU8sU0FBUyxTQUFTLEtBQUtBLENBQUUsRUFBRSxRQUFRLGVBQWUsSUFBTSxFQUNqRSxDQUVBLFNBQVNtaEIsR0FBaUJILEVBQU8sQ0FDL0IsSUFBSTMwQixFQUFTLE9BQU8sS0FBUSxXQUFhLElBQUksSUFBUSxPQUVyRCxPQUFBODBCLEdBQW1CLFNBQTBCSCxFQUFPLENBQ2xELEdBQUlBLElBQVUsTUFBUSxDQUFDRSxHQUFrQkYsQ0FBSyxFQUFHLE9BQU9BLEVBRXhELEdBQUksT0FBT0EsR0FBVSxXQUNuQixNQUFNLElBQUksVUFBVSxvREFBb0QsRUFHMUUsR0FBSSxPQUFPMzBCLEVBQVcsSUFBYSxDQUNqQyxHQUFJQSxFQUFPLElBQUkyMEIsQ0FBSyxFQUFHLE9BQU8zMEIsRUFBTyxJQUFJMjBCLENBQUssRUFFOUMzMEIsRUFBTyxJQUFJMjBCLEVBQU9JLENBQU8sQ0FDMUIsQ0FFRCxTQUFTQSxHQUFVLENBQ2pCLE9BQU9OLEdBQVdFLEVBQU8sVUFBV0osR0FBZ0IsSUFBSSxFQUFFLFdBQVcsQ0FDdEUsQ0FFRCxPQUFBUSxFQUFRLFVBQVksT0FBTyxPQUFPSixFQUFNLFVBQVcsQ0FDakQsWUFBYSxDQUNYLE1BQU9JLEVBQ1AsV0FBWSxHQUNaLFNBQVUsR0FDVixhQUFjLEVBQ2YsQ0FDUCxDQUFLLEVBQ01ULEdBQWdCUyxFQUFTSixDQUFLLENBQ3pDLEVBRVNHLEdBQWlCSCxDQUFLLENBQy9CLENBR0EsSUFBSUssR0FBZSxXQUNmQyxHQUFVLFVBQW1CLEdBRTdCLE9BQU8sUUFBWSxLQUFlLFFBQVEsS0FBTyxRQUFRLElBQUksV0FBYSxjQUFnQixPQUFPLE9BQVcsS0FBZSxPQUFPLFNBQWEsTUFDakpBLEdBQVUsU0FBaUJsOEIsRUFBTW04QixFQUFRLENBQ25DLE9BQU8sUUFBWSxLQUFlLFFBQVEsTUFBUSxPQUFPLDJCQUErQixLQUN0RkEsRUFBTyxNQUFNLFNBQVV2NEIsRUFBRyxDQUM1QixPQUFPLE9BQU9BLEdBQU0sUUFDNUIsQ0FBTyxHQUNDLFFBQVEsS0FBSzVELEVBQU1tOEIsQ0FBTSxDQUdqQyxHQUdBLFNBQVNDLEdBQW1CRCxFQUFRLENBQ2xDLEdBQUksQ0FBQ0EsR0FBVSxDQUFDQSxFQUFPLE9BQVEsT0FBTyxLQUN0QyxJQUFJRSxFQUFTLENBQUEsRUFDYixPQUFBRixFQUFPLFFBQVEsU0FBVW5nQyxFQUFPLENBQzlCLElBQUlrVCxFQUFRbFQsRUFBTSxNQUNsQnFnQyxFQUFPbnRCLENBQUssRUFBSW10QixFQUFPbnRCLENBQUssR0FBSyxDQUFBLEVBQ2pDbXRCLEVBQU9udEIsQ0FBSyxFQUFFLEtBQUtsVCxDQUFLLENBQzVCLENBQUcsRUFDTXFnQyxDQUNULENBQ0EsU0FBUzkzQixHQUFPKzNCLEVBQVUsQ0FDeEIsUUFBU0MsRUFBTyxVQUFVLE9BQVEzZ0MsRUFBTyxJQUFJLE1BQU0yZ0MsRUFBTyxFQUFJQSxFQUFPLEVBQUksQ0FBQyxFQUFHQyxFQUFPLEVBQUdBLEVBQU9ELEVBQU1DLElBQ2xHNWdDLEVBQUs0Z0MsRUFBTyxDQUFDLEVBQUksVUFBVUEsQ0FBSSxFQUdqQyxJQUFJNTdCLEVBQUksRUFDSjY3QixFQUFNN2dDLEVBQUssT0FFZixHQUFJLE9BQU8wZ0MsR0FBYSxXQUN0QixPQUFPQSxFQUFTLE1BQU0sS0FBTTFnQyxDQUFJLEVBR2xDLEdBQUksT0FBTzBnQyxHQUFhLFNBQVUsQ0FDaEMsSUFBSUksRUFBTUosRUFBUyxRQUFRTCxHQUFjLFNBQVVVLEVBQUcsQ0FDcEQsR0FBSUEsSUFBTSxLQUNSLE1BQU8sSUFHVCxHQUFJLzdCLEdBQUs2N0IsRUFDUCxPQUFPRSxFQUdULE9BQVFBLEVBQUMsQ0FDUCxJQUFLLEtBQ0gsT0FBTyxPQUFPL2dDLEVBQUtnRixHQUFHLENBQUMsRUFFekIsSUFBSyxLQUNILE9BQU8sT0FBT2hGLEVBQUtnRixHQUFHLENBQUMsRUFFekIsSUFBSyxLQUNILEdBQUksQ0FDRixPQUFPLEtBQUssVUFBVWhGLEVBQUtnRixHQUFHLENBQUMsQ0FDaEMsTUFBVyxDQUNWLE1BQU8sWUFDUixDQUVELE1BRUYsUUFDRSxPQUFPKzdCLENBQ1YsQ0FDUCxDQUFLLEVBQ0QsT0FBT0QsQ0FDUixDQUVELE9BQU9KLENBQ1QsQ0FFQSxTQUFTTSxHQUFtQjU4QixFQUFNLENBQ2hDLE9BQU9BLElBQVMsVUFBWUEsSUFBUyxPQUFTQSxJQUFTLE9BQVNBLElBQVMsU0FBV0EsSUFBUyxRQUFVQSxJQUFTLFNBQ2xILENBRUEsU0FBUzY4QixHQUFhbGdDLEVBQU9xRCxFQUFNLENBU2pDLE1BUkksR0FBdUJyRCxHQUFVLE1BSWpDcUQsSUFBUyxTQUFXLE1BQU0sUUFBUXJELENBQUssR0FBSyxDQUFDQSxFQUFNLFFBSW5EaWdDLEdBQW1CNThCLENBQUksR0FBSyxPQUFPckQsR0FBVSxVQUFZLENBQUNBLEVBS2hFLENBRUEsU0FBU21nQyxHQUFtQmp2QixFQUFLa3ZCLEVBQU16OEIsRUFBVSxDQUMvQyxJQUFJMDhCLEVBQVUsQ0FBQSxFQUNWeGhDLEVBQVEsRUFDUnloQyxFQUFZcHZCLEVBQUksT0FFcEIsU0FBU2dmLEVBQU1zUCxFQUFRLENBQ3JCYSxFQUFRLEtBQUssTUFBTUEsRUFBU2IsR0FBVSxDQUFFLENBQUEsRUFDeEMzZ0MsSUFFSUEsSUFBVXloQyxHQUNaMzhCLEVBQVMwOEIsQ0FBTyxDQUVuQixDQUVEbnZCLEVBQUksUUFBUSxTQUFVM0osRUFBRyxDQUN2QjY0QixFQUFLNzRCLEVBQUcyb0IsQ0FBSyxDQUNqQixDQUFHLENBQ0gsQ0FFQSxTQUFTcVEsR0FBaUJydkIsRUFBS2t2QixFQUFNejhCLEVBQVUsQ0FDN0MsSUFBSThDLEVBQVEsRUFDUjY1QixFQUFZcHZCLEVBQUksT0FFcEIsU0FBU3N2QixFQUFLaEIsRUFBUSxDQUNwQixHQUFJQSxHQUFVQSxFQUFPLE9BQVEsQ0FDM0I3N0IsRUFBUzY3QixDQUFNLEVBQ2YsTUFDRCxDQUVELElBQUl0bEIsRUFBV3pULEVBQ2ZBLEVBQVFBLEVBQVEsRUFFWnlULEVBQVdvbUIsRUFDYkYsRUFBS2x2QixFQUFJZ0osQ0FBUSxFQUFHc21CLENBQUksRUFFeEI3OEIsRUFBUyxDQUFFLENBQUEsQ0FFZCxDQUVENjhCLEVBQUssQ0FBRSxDQUFBLENBQ1QsQ0FFQSxTQUFTQyxHQUFjQyxFQUFRLENBQzdCLElBQUkzM0IsRUFBTSxDQUFBLEVBQ1YsY0FBTyxLQUFLMjNCLENBQU0sRUFBRSxRQUFRLFNBQVVqZCxFQUFHLENBQ3ZDMWEsRUFBSSxLQUFLLE1BQU1BLEVBQUsyM0IsRUFBT2pkLENBQUMsR0FBSyxDQUFBLENBQUUsQ0FDdkMsQ0FBRyxFQUNNMWEsQ0FDVCxDQUVBLElBQUk0M0IsR0FBb0MsU0FBVUMsRUFBUSxDQUN4RG5DLEdBQWVrQyxFQUFzQkMsQ0FBTSxFQUUzQyxTQUFTRCxFQUFxQm5CLEVBQVFFLEVBQVEsQ0FDNUMsSUFBSW1CLEVBRUosT0FBQUEsRUFBUUQsRUFBTyxLQUFLLEtBQU0sd0JBQXdCLEdBQUssS0FDdkRDLEVBQU0sT0FBU3JCLEVBQ2ZxQixFQUFNLE9BQVNuQixFQUNSbUIsQ0FDUixDQUVELE9BQU9GLENBQ1QsRUFBZ0J2QixHQUFpQixLQUFLLENBQUMsRUFDdkMsU0FBUzBCLEdBQVNKLEVBQVFqa0IsRUFBUTJqQixFQUFNejhCLEVBQVU2NkIsRUFBUSxDQUN4RCxHQUFJL2hCLEVBQU8sTUFBTyxDQUNoQixJQUFJc2tCLEVBQVcsSUFBSSxRQUFRLFNBQVUvc0IsRUFBU0MsRUFBUSxDQUNwRCxJQUFJdXNCLEVBQU8sU0FBY2hCLEVBQVEsQ0FDL0IsT0FBQTc3QixFQUFTNjdCLENBQU0sRUFDUkEsRUFBTyxPQUFTdnJCLEVBQU8sSUFBSTBzQixHQUFxQm5CLEVBQVFDLEdBQW1CRCxDQUFNLENBQUMsQ0FBQyxFQUFJeHJCLEVBQVF3cUIsQ0FBTSxDQUNwSCxFQUVVd0MsRUFBYVAsR0FBY0MsQ0FBTSxFQUNyQ0gsR0FBaUJTLEVBQVlaLEVBQU1JLENBQUksQ0FDN0MsQ0FBSyxFQUVELE9BQUFPLEVBQVMsTUFBUyxTQUFVOTVCLEVBQUcsQ0FDN0IsT0FBT0EsQ0FDYixDQUFLLEVBRU04NUIsQ0FDUixDQUVELElBQUlFLEVBQWN4a0IsRUFBTyxjQUFnQixHQUFPLE9BQU8sS0FBS2lrQixDQUFNLEVBQUlqa0IsRUFBTyxhQUFlLENBQUEsRUFDeEZ5a0IsRUFBYSxPQUFPLEtBQUtSLENBQU0sRUFDL0JTLEVBQWVELEVBQVcsT0FDMUJyaUMsRUFBUSxFQUNSd2hDLEVBQVUsQ0FBQSxFQUNWZSxFQUFVLElBQUksUUFBUSxTQUFVcHRCLEVBQVNDLEVBQVEsQ0FDbkQsSUFBSXVzQixFQUFPLFNBQWNoQixFQUFRLENBSS9CLEdBSEFhLEVBQVEsS0FBSyxNQUFNQSxFQUFTYixDQUFNLEVBQ2xDM2dDLElBRUlBLElBQVVzaUMsRUFDWixPQUFBeDlCLEVBQVMwOEIsQ0FBTyxFQUNUQSxFQUFRLE9BQVNwc0IsRUFBTyxJQUFJMHNCLEdBQXFCTixFQUFTWixHQUFtQlksQ0FBTyxDQUFDLENBQUMsRUFBSXJzQixFQUFRd3FCLENBQU0sQ0FFdkgsRUFFUzBDLEVBQVcsU0FDZHY5QixFQUFTMDhCLENBQU8sRUFDaEJyc0IsRUFBUXdxQixDQUFNLEdBR2hCMEMsRUFBVyxRQUFRLFNBQVV6L0IsRUFBSyxDQUNoQyxJQUFJeVAsRUFBTXd2QixFQUFPai9CLENBQUcsRUFFaEJ3L0IsRUFBWSxRQUFReC9CLENBQUcsSUFBTSxHQUMvQjgrQixHQUFpQnJ2QixFQUFLa3ZCLEVBQU1JLENBQUksRUFFaENMLEdBQW1CanZCLEVBQUtrdkIsRUFBTUksQ0FBSSxDQUUxQyxDQUFLLENBQ0wsQ0FBRyxFQUNELE9BQUFZLEVBQVEsTUFBUyxTQUFVbjZCLEVBQUcsQ0FDNUIsT0FBT0EsQ0FDWCxDQUFHLEVBQ01tNkIsQ0FDVCxDQUVBLFNBQVNDLEdBQVczOUIsRUFBSyxDQUN2QixNQUFPLENBQUMsRUFBRUEsR0FBT0EsRUFBSSxVQUFZLE9BQ25DLENBRUEsU0FBU2daLEdBQVMxYyxFQUFPbUQsRUFBTSxDQUc3QixRQUZJNGdCLEVBQUkvakIsRUFFQ2lFLEVBQUksRUFBR0EsRUFBSWQsRUFBSyxPQUFRYyxJQUFLLENBQ3BDLEdBQUk4ZixHQUFLLEtBQ1AsT0FBT0EsRUFHVEEsRUFBSUEsRUFBRTVnQixFQUFLYyxDQUFDLENBQUMsQ0FDZCxDQUVELE9BQU84ZixDQUNULENBRUEsU0FBU3VkLEdBQWdCQyxFQUFNL0MsRUFBUSxDQUNyQyxPQUFPLFNBQVVnRCxFQUFJLENBQ25CLElBQUlDLEVBUUosT0FOSUYsRUFBSyxXQUNQRSxFQUFhL2tCLEdBQVM4aEIsRUFBUStDLEVBQUssVUFBVSxFQUU3Q0UsRUFBYWpELEVBQU9nRCxFQUFHLE9BQVNELEVBQUssU0FBUyxFQUc1Q0YsR0FBV0csQ0FBRSxHQUNmQSxFQUFHLE1BQVFBLEVBQUcsT0FBU0QsRUFBSyxVQUM1QkMsRUFBRyxXQUFhQyxFQUNURCxHQUdGLENBQ0wsUUFBUyxPQUFPQSxHQUFPLFdBQWFBLEVBQUksRUFBR0EsRUFDM0MsV0FBWUMsRUFDWixNQUFPRCxFQUFHLE9BQVNELEVBQUssU0FDOUIsQ0FDQSxDQUNBLENBQ0EsU0FBU0csR0FBVXAyQixFQUFRa3pCLEVBQVEsQ0FDakMsR0FBSUEsR0FDRixRQUFTbDNCLEtBQUtrM0IsRUFDWixHQUFJQSxFQUFPLGVBQWVsM0IsQ0FBQyxFQUFHLENBQzVCLElBQUl0SCxFQUFRdytCLEVBQU9sM0IsQ0FBQyxFQUVoQixPQUFPdEgsR0FBVSxVQUFZLE9BQU9zTCxFQUFPaEUsQ0FBQyxHQUFNLFNBQ3BEZ0UsRUFBT2hFLENBQUMsRUFBSWkzQixHQUFTLENBQUEsRUFBSWp6QixFQUFPaEUsQ0FBQyxFQUFHdEgsQ0FBSyxFQUV6Q3NMLEVBQU9oRSxDQUFDLEVBQUl0SCxDQUVmLEVBSUwsT0FBT3NMLENBQ1QsQ0FFQSxJQUFJcTJCLEdBQWEsU0FBa0JKLEVBQU12aEMsRUFBT3crQixFQUFRZ0IsRUFBUTErQixFQUFTdUMsRUFBTSxDQUN6RWsrQixFQUFLLFdBQWEsQ0FBQy9DLEVBQU8sZUFBZStDLEVBQUssS0FBSyxHQUFLckIsR0FBYWxnQyxFQUFPcUQsR0FBUWsrQixFQUFLLElBQUksSUFDL0YvQixFQUFPLEtBQUs1M0IsR0FBTzlHLEVBQVEsU0FBUyxTQUFVeWdDLEVBQUssU0FBUyxDQUFDLENBRWpFLEVBY0lLLEdBQWEsU0FBb0JMLEVBQU12aEMsRUFBT3crQixFQUFRZ0IsRUFBUTErQixFQUFTLEVBQ3JFLFFBQVEsS0FBS2QsQ0FBSyxHQUFLQSxJQUFVLEtBQ25Ddy9CLEVBQU8sS0FBSzUzQixHQUFPOUcsRUFBUSxTQUFTLFdBQVl5Z0MsRUFBSyxTQUFTLENBQUMsQ0FFbkUsRUFHSU0sR0FDQUMsR0FBZSxVQUFZLENBQzdCLEdBQUlELEdBQ0YsT0FBT0EsR0FHVCxJQUFJRSxFQUFPLGVBRVB4ekIsRUFBSSxTQUFXek4sRUFBUyxDQUMxQixPQUFPQSxHQUFXQSxFQUFRLGtCQUFvQixtQkFBcUJpaEMsRUFBTyxTQUFXQSxFQUFPLGNBQWdCLEVBQ2hILEVBRU1DLEVBQUssaUdBQ0xDLEVBQVEsbUJBQ1JDLEdBQU07QUFBQTtBQUFBLEtBQWVELEVBQVEsV0FBYUEsRUFBUTtBQUFBLEtBQXFGQSxFQUFRLFdBQWFELEVBQUssS0FBT0MsRUFBUTtBQUFBLEtBQW9IQSxFQUFRLFlBQWNELEVBQUssUUFBVUMsRUFBUTtBQUFBLEtBQWdIQSxFQUFRLGVBQWlCQSxFQUFRLFVBQVlELEVBQUssUUFBVUMsRUFBUTtBQUFBLEtBQThGQSxFQUFRLGVBQWlCQSxFQUFRLFVBQVlELEVBQUssUUFBVUMsRUFBUTtBQUFBLEtBQThGQSxFQUFRLGVBQWlCQSxFQUFRLFVBQVlELEVBQUssUUFBVUMsRUFBUTtBQUFBLEtBQThGQSxFQUFRLGVBQWlCQSxFQUFRLFVBQVlELEVBQUssUUFBVUMsRUFBUTtBQUFBLGFBQXNHQSxFQUFRLFVBQVlELEVBQUssUUFBVUMsRUFBUTtBQUFBO0FBQUEsR0FBc0wsUUFBUSxlQUFnQixFQUFFLEVBQUUsUUFBUSxNQUFPLEVBQUUsRUFBRSxPQUVqMkNFLEVBQVcsSUFBSSxPQUFPLE9BQVNILEVBQUssVUFBWUUsRUFBSyxJQUFJLEVBQ3pERSxFQUFVLElBQUksT0FBTyxJQUFNSixFQUFLLEdBQUcsRUFDbkNLLEVBQVUsSUFBSSxPQUFPLElBQU1ILEVBQUssR0FBRyxFQUVuQ0ksRUFBSyxTQUFZeGhDLEVBQVMsQ0FDNUIsT0FBT0EsR0FBV0EsRUFBUSxNQUFRcWhDLEVBQVcsSUFBSSxPQUFPLE1BQVE1ekIsRUFBRXpOLENBQU8sRUFBSWtoQyxFQUFLenpCLEVBQUV6TixDQUFPLEVBQUksUUFBVXlOLEVBQUV6TixDQUFPLEVBQUlvaEMsRUFBSzN6QixFQUFFek4sQ0FBTyxFQUFJLElBQUssR0FBRyxDQUNwSixFQUVFd2hDLEVBQUcsR0FBSyxTQUFVeGhDLEVBQVMsQ0FDekIsT0FBT0EsR0FBV0EsRUFBUSxNQUFRc2hDLEVBQVUsSUFBSSxPQUFPLEdBQUs3ekIsRUFBRXpOLENBQU8sRUFBSWtoQyxFQUFLenpCLEVBQUV6TixDQUFPLEVBQUcsR0FBRyxDQUNqRyxFQUVFd2hDLEVBQUcsR0FBSyxTQUFVeGhDLEVBQVMsQ0FDekIsT0FBT0EsR0FBV0EsRUFBUSxNQUFRdWhDLEVBQVUsSUFBSSxPQUFPLEdBQUs5ekIsRUFBRXpOLENBQU8sRUFBSW9oQyxFQUFLM3pCLEVBQUV6TixDQUFPLEVBQUcsR0FBRyxDQUNqRyxFQUVFLElBQUl5aEMsRUFBVyxxQkFDWEMsRUFBTyx1QkFDUEMsRUFBT0gsRUFBRyxHQUFFLEVBQUcsT0FDZkksRUFBT0osRUFBRyxHQUFFLEVBQUcsT0FDZkssRUFBTyxnRUFDUEMsRUFBUyxpRUFDVEMsRUFBTSxzQ0FDTkMsRUFBTyxpQkFDUDMvQixFQUFPLHFCQUNQNC9CLEVBQVEsTUFBUVIsRUFBVyxXQUFhQyxFQUFPLGdCQUFrQkMsRUFBTyxJQUFNQyxFQUFPLElBQU1DLEVBQU9DLEVBQVNDLEVBQU0sSUFBTUMsRUFBTzMvQixFQUNsSSxPQUFBMCtCLEdBQVMsSUFBSSxPQUFPLE9BQVNrQixFQUFRLEtBQU0sR0FBRyxFQUN2Q2xCLEVBQ1QsRUFJSW1CLEdBQVksQ0FFZCxNQUFPLHVPQUtQLElBQUssZ0NBQ1AsRUFDSTl6QixHQUFRLENBQ1YsUUFBUyxTQUFpQmxQLEVBQU8sQ0FDL0IsT0FBT2tQLEdBQU0sT0FBT2xQLENBQUssR0FBSyxTQUFTQSxFQUFPLEVBQUUsSUFBTUEsQ0FDdkQsRUFDRCxNQUFTLFNBQWVBLEVBQU8sQ0FDN0IsT0FBT2tQLEdBQU0sT0FBT2xQLENBQUssR0FBSyxDQUFDa1AsR0FBTSxRQUFRbFAsQ0FBSyxDQUNuRCxFQUNELE1BQU8sU0FBZUEsRUFBTyxDQUMzQixPQUFPLE1BQU0sUUFBUUEsQ0FBSyxDQUMzQixFQUNELE9BQVEsU0FBZ0JBLEVBQU8sQ0FDN0IsR0FBSUEsYUFBaUIsT0FDbkIsTUFBTyxHQUdULEdBQUksQ0FDRixNQUFPLENBQUMsQ0FBQyxJQUFJLE9BQU9BLENBQUssQ0FDMUIsTUFBVyxDQUNWLE1BQU8sRUFDUixDQUNGLEVBQ0QsS0FBTSxTQUFjQSxFQUFPLENBQ3pCLE9BQU8sT0FBT0EsRUFBTSxTQUFZLFlBQWMsT0FBT0EsRUFBTSxVQUFhLFlBQWMsT0FBT0EsRUFBTSxTQUFZLFlBQWMsQ0FBQyxNQUFNQSxFQUFNLFFBQU8sQ0FBRSxDQUNwSixFQUNELE9BQVEsU0FBZ0JBLEVBQU8sQ0FDN0IsT0FBSSxNQUFNQSxDQUFLLEVBQ04sR0FHRixPQUFPQSxHQUFVLFFBQ3pCLEVBQ0QsT0FBUSxTQUFnQkEsRUFBTyxDQUM3QixPQUFPLE9BQU9BLEdBQVUsVUFBWSxDQUFDa1AsR0FBTSxNQUFNbFAsQ0FBSyxDQUN2RCxFQUNELE9BQVEsU0FBZ0JBLEVBQU8sQ0FDN0IsT0FBTyxPQUFPQSxHQUFVLFVBQ3pCLEVBQ0QsTUFBTyxTQUFlQSxFQUFPLENBQzNCLE9BQU8sT0FBT0EsR0FBVSxVQUFZQSxFQUFNLFFBQVUsS0FBTyxDQUFDLENBQUNBLEVBQU0sTUFBTWdqQyxHQUFVLEtBQUssQ0FDekYsRUFDRCxJQUFLLFNBQWFoakMsRUFBTyxDQUN2QixPQUFPLE9BQU9BLEdBQVUsVUFBWUEsRUFBTSxRQUFVLE1BQVEsQ0FBQyxDQUFDQSxFQUFNLE1BQU04aEMsR0FBYSxDQUFBLENBQ3hGLEVBQ0QsSUFBSyxTQUFhOWhDLEVBQU8sQ0FDdkIsT0FBTyxPQUFPQSxHQUFVLFVBQVksQ0FBQyxDQUFDQSxFQUFNLE1BQU1nakMsR0FBVSxHQUFHLENBQ2hFLENBQ0gsRUFFSUMsR0FBUyxTQUFjMUIsRUFBTXZoQyxFQUFPdytCLEVBQVFnQixFQUFRMStCLEVBQVMsQ0FDL0QsR0FBSXlnQyxFQUFLLFVBQVl2aEMsSUFBVSxPQUFXLENBQ3hDMmhDLEdBQVdKLEVBQU12aEMsRUFBT3crQixFQUFRZ0IsRUFBUTErQixDQUFPLEVBQy9DLE1BQ0QsQ0FFRCxJQUFJb2lDLEVBQVMsQ0FBQyxVQUFXLFFBQVMsUUFBUyxTQUFVLFNBQVUsU0FBVSxRQUFTLFNBQVUsT0FBUSxNQUFPLEtBQUssRUFDNUdDLEVBQVc1QixFQUFLLEtBRWhCMkIsRUFBTyxRQUFRQyxDQUFRLEVBQUksR0FDeEJqMEIsR0FBTWkwQixDQUFRLEVBQUVuakMsQ0FBSyxHQUN4QncvQixFQUFPLEtBQUs1M0IsR0FBTzlHLEVBQVEsU0FBUyxNQUFNcWlDLENBQVEsRUFBRzVCLEVBQUssVUFBV0EsRUFBSyxJQUFJLENBQUMsRUFHeEU0QixHQUFZLE9BQU9uakMsSUFBVXVoQyxFQUFLLE1BQzNDL0IsRUFBTyxLQUFLNTNCLEdBQU85RyxFQUFRLFNBQVMsTUFBTXFpQyxDQUFRLEVBQUc1QixFQUFLLFVBQVdBLEVBQUssSUFBSSxDQUFDLENBRW5GLEVBRUk2QixHQUFRLFNBQWU3QixFQUFNdmhDLEVBQU93K0IsRUFBUWdCLEVBQVExK0IsRUFBUyxDQUMvRCxJQUFJZy9CLEVBQU0sT0FBT3lCLEVBQUssS0FBUSxTQUMxQjhCLEVBQU0sT0FBTzlCLEVBQUssS0FBUSxTQUMxQjdpQixFQUFNLE9BQU82aUIsRUFBSyxLQUFRLFNBRTFCK0IsRUFBVyxrQ0FDWHorQixFQUFNN0UsRUFDTnlCLEVBQU0sS0FDTjhoQyxFQUFNLE9BQU92akMsR0FBVSxTQUN2QisvQixFQUFNLE9BQU8vL0IsR0FBVSxTQUN2QmtSLEVBQU0sTUFBTSxRQUFRbFIsQ0FBSyxFQWE3QixHQVhJdWpDLEVBQ0Y5aEMsRUFBTSxTQUNHcytCLEVBQ1R0K0IsRUFBTSxTQUNHeVAsSUFDVHpQLEVBQU0sU0FNSixDQUFDQSxFQUNILE1BQU8sR0FHTHlQLElBQ0ZyTSxFQUFNN0UsRUFBTSxRQUdWKy9CLElBRUZsN0IsRUFBTTdFLEVBQU0sUUFBUXNqQyxFQUFVLEdBQUcsRUFBRSxRQUdqQ3hELEVBQ0VqN0IsSUFBUTA4QixFQUFLLEtBQ2YvQixFQUFPLEtBQUs1M0IsR0FBTzlHLEVBQVEsU0FBU1csQ0FBRyxFQUFFLElBQUs4L0IsRUFBSyxVQUFXQSxFQUFLLEdBQUcsQ0FBQyxFQUVoRThCLEdBQU8sQ0FBQzNrQixHQUFPN1osRUFBTTA4QixFQUFLLElBQ25DL0IsRUFBTyxLQUFLNTNCLEdBQU85RyxFQUFRLFNBQVNXLENBQUcsRUFBRSxJQUFLOC9CLEVBQUssVUFBV0EsRUFBSyxHQUFHLENBQUMsRUFDOUQ3aUIsR0FBTyxDQUFDMmtCLEdBQU94K0IsRUFBTTA4QixFQUFLLElBQ25DL0IsRUFBTyxLQUFLNTNCLEdBQU85RyxFQUFRLFNBQVNXLENBQUcsRUFBRSxJQUFLOC9CLEVBQUssVUFBV0EsRUFBSyxHQUFHLENBQUMsRUFDOUQ4QixHQUFPM2tCLElBQVE3WixFQUFNMDhCLEVBQUssS0FBTzE4QixFQUFNMDhCLEVBQUssTUFDckQvQixFQUFPLEtBQUs1M0IsR0FBTzlHLEVBQVEsU0FBU1csQ0FBRyxFQUFFLE1BQU84L0IsRUFBSyxVQUFXQSxFQUFLLElBQUtBLEVBQUssR0FBRyxDQUFDLENBRXZGLEVBRUlpQyxHQUFTLE9BRVRDLEdBQWUsU0FBb0JsQyxFQUFNdmhDLEVBQU93K0IsRUFBUWdCLEVBQVExK0IsRUFBUyxDQUMzRXlnQyxFQUFLaUMsRUFBTSxFQUFJLE1BQU0sUUFBUWpDLEVBQUtpQyxFQUFNLENBQUMsRUFBSWpDLEVBQUtpQyxFQUFNLEVBQUksQ0FBQSxFQUV4RGpDLEVBQUtpQyxFQUFNLEVBQUUsUUFBUXhqQyxDQUFLLElBQU0sSUFDbEN3L0IsRUFBTyxLQUFLNTNCLEdBQU85RyxFQUFRLFNBQVMwaUMsRUFBTSxFQUFHakMsRUFBSyxVQUFXQSxFQUFLaUMsRUFBTSxFQUFFLEtBQUssSUFBSSxDQUFDLENBQUMsQ0FFekYsRUFFSUUsR0FBWSxTQUFpQm5DLEVBQU12aEMsRUFBT3crQixFQUFRZ0IsRUFBUTErQixFQUFTLENBQ3JFLEdBQUl5Z0MsRUFBSyxTQUNQLEdBQUlBLEVBQUssbUJBQW1CLE9BSTFCQSxFQUFLLFFBQVEsVUFBWSxFQUVwQkEsRUFBSyxRQUFRLEtBQUt2aEMsQ0FBSyxHQUMxQncvQixFQUFPLEtBQUs1M0IsR0FBTzlHLEVBQVEsU0FBUyxRQUFRLFNBQVV5Z0MsRUFBSyxVQUFXdmhDLEVBQU91aEMsRUFBSyxPQUFPLENBQUMsVUFFbkYsT0FBT0EsRUFBSyxTQUFZLFNBQVUsQ0FDM0MsSUFBSW9DLEVBQVcsSUFBSSxPQUFPcEMsRUFBSyxPQUFPLEVBRWpDb0MsRUFBUyxLQUFLM2pDLENBQUssR0FDdEJ3L0IsRUFBTyxLQUFLNTNCLEdBQU85RyxFQUFRLFNBQVMsUUFBUSxTQUFVeWdDLEVBQUssVUFBV3ZoQyxFQUFPdWhDLEVBQUssT0FBTyxDQUFDLENBRTdGLEVBRUwsRUFFSXFDLEdBQVEsQ0FDVixTQUFVakMsR0FDVixXQUFZQyxHQUNaLEtBQU1xQixHQUNOLE1BQU9HLEdBQ1AsS0FBUUssR0FDUixRQUFTQyxFQUNYLEVBRUlHLEdBQVMsU0FBZ0J0QyxFQUFNdmhDLEVBQU8yRCxFQUFVNjZCLEVBQVExOUIsRUFBUyxDQUNuRSxJQUFJMCtCLEVBQVMsQ0FBQSxFQUNUc0UsRUFBV3ZDLEVBQUssVUFBWSxDQUFDQSxFQUFLLFVBQVkvQyxFQUFPLGVBQWUrQyxFQUFLLEtBQUssRUFFbEYsR0FBSXVDLEVBQVUsQ0FDWixHQUFJNUQsR0FBYWxnQyxFQUFPLFFBQVEsR0FBSyxDQUFDdWhDLEVBQUssU0FDekMsT0FBTzU5QixFQUFRLEVBR2pCaWdDLEdBQU0sU0FBU3JDLEVBQU12aEMsRUFBT3crQixFQUFRZ0IsRUFBUTErQixFQUFTLFFBQVEsRUFFeERvL0IsR0FBYWxnQyxFQUFPLFFBQVEsSUFDL0I0akMsR0FBTSxLQUFLckMsRUFBTXZoQyxFQUFPdytCLEVBQVFnQixFQUFRMStCLENBQU8sRUFDL0M4aUMsR0FBTSxNQUFNckMsRUFBTXZoQyxFQUFPdytCLEVBQVFnQixFQUFRMStCLENBQU8sRUFDaEQ4aUMsR0FBTSxRQUFRckMsRUFBTXZoQyxFQUFPdytCLEVBQVFnQixFQUFRMStCLENBQU8sRUFFOUN5Z0MsRUFBSyxhQUFlLElBQ3RCcUMsR0FBTSxXQUFXckMsRUFBTXZoQyxFQUFPdytCLEVBQVFnQixFQUFRMStCLENBQU8sRUFHMUQsQ0FFRDZDLEVBQVM2N0IsQ0FBTSxDQUNqQixFQUVJdUUsR0FBUyxTQUFnQnhDLEVBQU12aEMsRUFBTzJELEVBQVU2NkIsRUFBUTE5QixFQUFTLENBQ25FLElBQUkwK0IsRUFBUyxDQUFBLEVBQ1RzRSxFQUFXdkMsRUFBSyxVQUFZLENBQUNBLEVBQUssVUFBWS9DLEVBQU8sZUFBZStDLEVBQUssS0FBSyxFQUVsRixHQUFJdUMsRUFBVSxDQUNaLEdBQUk1RCxHQUFhbGdDLENBQUssR0FBSyxDQUFDdWhDLEVBQUssU0FDL0IsT0FBTzU5QixFQUFRLEVBR2pCaWdDLEdBQU0sU0FBU3JDLEVBQU12aEMsRUFBT3crQixFQUFRZ0IsRUFBUTErQixDQUFPLEVBRS9DZCxJQUFVLFFBQ1o0akMsR0FBTSxLQUFLckMsRUFBTXZoQyxFQUFPdytCLEVBQVFnQixFQUFRMStCLENBQU8sQ0FFbEQsQ0FFRDZDLEVBQVM2N0IsQ0FBTSxDQUNqQixFQUVJMVEsR0FBUyxTQUFnQnlTLEVBQU12aEMsRUFBTzJELEVBQVU2NkIsRUFBUTE5QixFQUFTLENBQ25FLElBQUkwK0IsRUFBUyxDQUFBLEVBQ1RzRSxFQUFXdkMsRUFBSyxVQUFZLENBQUNBLEVBQUssVUFBWS9DLEVBQU8sZUFBZStDLEVBQUssS0FBSyxFQUVsRixHQUFJdUMsRUFBVSxDQUtaLEdBSkk5akMsSUFBVSxLQUNaQSxFQUFRLFFBR05rZ0MsR0FBYWxnQyxDQUFLLEdBQUssQ0FBQ3VoQyxFQUFLLFNBQy9CLE9BQU81OUIsRUFBUSxFQUdqQmlnQyxHQUFNLFNBQVNyQyxFQUFNdmhDLEVBQU93K0IsRUFBUWdCLEVBQVExK0IsQ0FBTyxFQUUvQ2QsSUFBVSxTQUNaNGpDLEdBQU0sS0FBS3JDLEVBQU12aEMsRUFBT3crQixFQUFRZ0IsRUFBUTErQixDQUFPLEVBQy9DOGlDLEdBQU0sTUFBTXJDLEVBQU12aEMsRUFBT3crQixFQUFRZ0IsRUFBUTErQixDQUFPLEVBRW5ELENBRUQ2QyxFQUFTNjdCLENBQU0sQ0FDakIsRUFFSXdFLEdBQVcsU0FBa0J6QyxFQUFNdmhDLEVBQU8yRCxFQUFVNjZCLEVBQVExOUIsRUFBUyxDQUN2RSxJQUFJMCtCLEVBQVMsQ0FBQSxFQUNUc0UsRUFBV3ZDLEVBQUssVUFBWSxDQUFDQSxFQUFLLFVBQVkvQyxFQUFPLGVBQWUrQyxFQUFLLEtBQUssRUFFbEYsR0FBSXVDLEVBQVUsQ0FDWixHQUFJNUQsR0FBYWxnQyxDQUFLLEdBQUssQ0FBQ3VoQyxFQUFLLFNBQy9CLE9BQU81OUIsRUFBUSxFQUdqQmlnQyxHQUFNLFNBQVNyQyxFQUFNdmhDLEVBQU93K0IsRUFBUWdCLEVBQVExK0IsQ0FBTyxFQUUvQ2QsSUFBVSxRQUNaNGpDLEdBQU0sS0FBS3JDLEVBQU12aEMsRUFBT3crQixFQUFRZ0IsRUFBUTErQixDQUFPLENBRWxELENBRUQ2QyxFQUFTNjdCLENBQU0sQ0FDakIsRUFFSXlFLEdBQVMsU0FBZ0IxQyxFQUFNdmhDLEVBQU8yRCxFQUFVNjZCLEVBQVExOUIsRUFBUyxDQUNuRSxJQUFJMCtCLEVBQVMsQ0FBQSxFQUNUc0UsRUFBV3ZDLEVBQUssVUFBWSxDQUFDQSxFQUFLLFVBQVkvQyxFQUFPLGVBQWUrQyxFQUFLLEtBQUssRUFFbEYsR0FBSXVDLEVBQVUsQ0FDWixHQUFJNUQsR0FBYWxnQyxDQUFLLEdBQUssQ0FBQ3VoQyxFQUFLLFNBQy9CLE9BQU81OUIsRUFBUSxFQUdqQmlnQyxHQUFNLFNBQVNyQyxFQUFNdmhDLEVBQU93K0IsRUFBUWdCLEVBQVExK0IsQ0FBTyxFQUU5Q28vQixHQUFhbGdDLENBQUssR0FDckI0akMsR0FBTSxLQUFLckMsRUFBTXZoQyxFQUFPdytCLEVBQVFnQixFQUFRMStCLENBQU8sQ0FFbEQsQ0FFRDZDLEVBQVM2N0IsQ0FBTSxDQUNqQixFQUVJMEUsR0FBVSxTQUFpQjNDLEVBQU12aEMsRUFBTzJELEVBQVU2NkIsRUFBUTE5QixFQUFTLENBQ3JFLElBQUkwK0IsRUFBUyxDQUFBLEVBQ1RzRSxFQUFXdkMsRUFBSyxVQUFZLENBQUNBLEVBQUssVUFBWS9DLEVBQU8sZUFBZStDLEVBQUssS0FBSyxFQUVsRixHQUFJdUMsRUFBVSxDQUNaLEdBQUk1RCxHQUFhbGdDLENBQUssR0FBSyxDQUFDdWhDLEVBQUssU0FDL0IsT0FBTzU5QixFQUFRLEVBR2pCaWdDLEdBQU0sU0FBU3JDLEVBQU12aEMsRUFBT3crQixFQUFRZ0IsRUFBUTErQixDQUFPLEVBRS9DZCxJQUFVLFNBQ1o0akMsR0FBTSxLQUFLckMsRUFBTXZoQyxFQUFPdytCLEVBQVFnQixFQUFRMStCLENBQU8sRUFDL0M4aUMsR0FBTSxNQUFNckMsRUFBTXZoQyxFQUFPdytCLEVBQVFnQixFQUFRMStCLENBQU8sRUFFbkQsQ0FFRDZDLEVBQVM2N0IsQ0FBTSxDQUNqQixFQUVJMkUsR0FBVSxTQUFpQjVDLEVBQU12aEMsRUFBTzJELEVBQVU2NkIsRUFBUTE5QixFQUFTLENBQ3JFLElBQUkwK0IsRUFBUyxDQUFBLEVBQ1RzRSxFQUFXdkMsRUFBSyxVQUFZLENBQUNBLEVBQUssVUFBWS9DLEVBQU8sZUFBZStDLEVBQUssS0FBSyxFQUVsRixHQUFJdUMsRUFBVSxDQUNaLEdBQUk1RCxHQUFhbGdDLENBQUssR0FBSyxDQUFDdWhDLEVBQUssU0FDL0IsT0FBTzU5QixFQUFRLEVBR2pCaWdDLEdBQU0sU0FBU3JDLEVBQU12aEMsRUFBT3crQixFQUFRZ0IsRUFBUTErQixDQUFPLEVBRS9DZCxJQUFVLFNBQ1o0akMsR0FBTSxLQUFLckMsRUFBTXZoQyxFQUFPdytCLEVBQVFnQixFQUFRMStCLENBQU8sRUFDL0M4aUMsR0FBTSxNQUFNckMsRUFBTXZoQyxFQUFPdytCLEVBQVFnQixFQUFRMStCLENBQU8sRUFFbkQsQ0FFRDZDLEVBQVM2N0IsQ0FBTSxDQUNqQixFQUVJNEUsR0FBUSxTQUFlN0MsRUFBTXZoQyxFQUFPMkQsRUFBVTY2QixFQUFRMTlCLEVBQVMsQ0FDakUsSUFBSTArQixFQUFTLENBQUEsRUFDVHNFLEVBQVd2QyxFQUFLLFVBQVksQ0FBQ0EsRUFBSyxVQUFZL0MsRUFBTyxlQUFlK0MsRUFBSyxLQUFLLEVBRWxGLEdBQUl1QyxFQUFVLENBQ1osR0FBNEI5akMsR0FBVSxNQUFTLENBQUN1aEMsRUFBSyxTQUNuRCxPQUFPNTlCLEVBQVEsRUFHakJpZ0MsR0FBTSxTQUFTckMsRUFBTXZoQyxFQUFPdytCLEVBQVFnQixFQUFRMStCLEVBQVMsT0FBTyxFQUVqQ2QsR0FBVSxPQUNuQzRqQyxHQUFNLEtBQUtyQyxFQUFNdmhDLEVBQU93K0IsRUFBUWdCLEVBQVExK0IsQ0FBTyxFQUMvQzhpQyxHQUFNLE1BQU1yQyxFQUFNdmhDLEVBQU93K0IsRUFBUWdCLEVBQVExK0IsQ0FBTyxFQUVuRCxDQUVENkMsRUFBUzY3QixDQUFNLENBQ2pCLEVBRUk2RSxHQUFTLFNBQWdCOUMsRUFBTXZoQyxFQUFPMkQsRUFBVTY2QixFQUFRMTlCLEVBQVMsQ0FDbkUsSUFBSTArQixFQUFTLENBQUEsRUFDVHNFLEVBQVd2QyxFQUFLLFVBQVksQ0FBQ0EsRUFBSyxVQUFZL0MsRUFBTyxlQUFlK0MsRUFBSyxLQUFLLEVBRWxGLEdBQUl1QyxFQUFVLENBQ1osR0FBSTVELEdBQWFsZ0MsQ0FBSyxHQUFLLENBQUN1aEMsRUFBSyxTQUMvQixPQUFPNTlCLEVBQVEsRUFHakJpZ0MsR0FBTSxTQUFTckMsRUFBTXZoQyxFQUFPdytCLEVBQVFnQixFQUFRMStCLENBQU8sRUFFL0NkLElBQVUsUUFDWjRqQyxHQUFNLEtBQUtyQyxFQUFNdmhDLEVBQU93K0IsRUFBUWdCLEVBQVExK0IsQ0FBTyxDQUVsRCxDQUVENkMsRUFBUzY3QixDQUFNLENBQ2pCLEVBRUk4RSxHQUFPLE9BRVBDLEdBQWEsU0FBb0JoRCxFQUFNdmhDLEVBQU8yRCxFQUFVNjZCLEVBQVExOUIsRUFBUyxDQUMzRSxJQUFJMCtCLEVBQVMsQ0FBQSxFQUNUc0UsRUFBV3ZDLEVBQUssVUFBWSxDQUFDQSxFQUFLLFVBQVkvQyxFQUFPLGVBQWUrQyxFQUFLLEtBQUssRUFFbEYsR0FBSXVDLEVBQVUsQ0FDWixHQUFJNUQsR0FBYWxnQyxDQUFLLEdBQUssQ0FBQ3VoQyxFQUFLLFNBQy9CLE9BQU81OUIsRUFBUSxFQUdqQmlnQyxHQUFNLFNBQVNyQyxFQUFNdmhDLEVBQU93K0IsRUFBUWdCLEVBQVExK0IsQ0FBTyxFQUUvQ2QsSUFBVSxRQUNaNGpDLEdBQU1VLEVBQUksRUFBRS9DLEVBQU12aEMsRUFBT3crQixFQUFRZ0IsRUFBUTErQixDQUFPLENBRW5ELENBRUQ2QyxFQUFTNjdCLENBQU0sQ0FDakIsRUFFSWdGLEdBQVUsU0FBaUJqRCxFQUFNdmhDLEVBQU8yRCxFQUFVNjZCLEVBQVExOUIsRUFBUyxDQUNyRSxJQUFJMCtCLEVBQVMsQ0FBQSxFQUNUc0UsRUFBV3ZDLEVBQUssVUFBWSxDQUFDQSxFQUFLLFVBQVkvQyxFQUFPLGVBQWUrQyxFQUFLLEtBQUssRUFFbEYsR0FBSXVDLEVBQVUsQ0FDWixHQUFJNUQsR0FBYWxnQyxFQUFPLFFBQVEsR0FBSyxDQUFDdWhDLEVBQUssU0FDekMsT0FBTzU5QixFQUFRLEVBR2pCaWdDLEdBQU0sU0FBU3JDLEVBQU12aEMsRUFBT3crQixFQUFRZ0IsRUFBUTErQixDQUFPLEVBRTlDby9CLEdBQWFsZ0MsRUFBTyxRQUFRLEdBQy9CNGpDLEdBQU0sUUFBUXJDLEVBQU12aEMsRUFBT3crQixFQUFRZ0IsRUFBUTErQixDQUFPLENBRXJELENBRUQ2QyxFQUFTNjdCLENBQU0sQ0FDakIsRUFFSTczQixHQUFPLFNBQWM0NUIsRUFBTXZoQyxFQUFPMkQsRUFBVTY2QixFQUFRMTlCLEVBQVMsQ0FFL0QsSUFBSTArQixFQUFTLENBQUEsRUFDVHNFLEVBQVd2QyxFQUFLLFVBQVksQ0FBQ0EsRUFBSyxVQUFZL0MsRUFBTyxlQUFlK0MsRUFBSyxLQUFLLEVBRWxGLEdBQUl1QyxFQUFVLENBQ1osR0FBSTVELEdBQWFsZ0MsRUFBTyxNQUFNLEdBQUssQ0FBQ3VoQyxFQUFLLFNBQ3ZDLE9BQU81OUIsRUFBUSxFQUtqQixHQUZBaWdDLEdBQU0sU0FBU3JDLEVBQU12aEMsRUFBT3crQixFQUFRZ0IsRUFBUTErQixDQUFPLEVBRS9DLENBQUNvL0IsR0FBYWxnQyxFQUFPLE1BQU0sRUFBRyxDQUNoQyxJQUFJeWtDLEVBRUF6a0MsYUFBaUIsS0FDbkJ5a0MsRUFBYXprQyxFQUVieWtDLEVBQWEsSUFBSSxLQUFLemtDLENBQUssRUFHN0I0akMsR0FBTSxLQUFLckMsRUFBTWtELEVBQVlqRyxFQUFRZ0IsRUFBUTErQixDQUFPLEVBRWhEMmpDLEdBQ0ZiLEdBQU0sTUFBTXJDLEVBQU1rRCxFQUFXLFFBQU8sRUFBSWpHLEVBQVFnQixFQUFRMStCLENBQU8sQ0FFbEUsQ0FDRixDQUVENkMsRUFBUzY3QixDQUFNLENBQ2pCLEVBRUk3VSxHQUFXLFNBQWtCNFcsRUFBTXZoQyxFQUFPMkQsRUFBVTY2QixFQUFRMTlCLEVBQVMsQ0FDdkUsSUFBSTArQixFQUFTLENBQUEsRUFDVG44QixFQUFPLE1BQU0sUUFBUXJELENBQUssRUFBSSxRQUFVLE9BQU9BLEVBQ25ENGpDLEdBQU0sU0FBU3JDLEVBQU12aEMsRUFBT3crQixFQUFRZ0IsRUFBUTErQixFQUFTdUMsQ0FBSSxFQUN6RE0sRUFBUzY3QixDQUFNLENBQ2pCLEVBRUluOEIsR0FBTyxTQUFjaytCLEVBQU12aEMsRUFBTzJELEVBQVU2NkIsRUFBUTE5QixFQUFTLENBQy9ELElBQUlxaUMsRUFBVzVCLEVBQUssS0FDaEIvQixFQUFTLENBQUEsRUFDVHNFLEVBQVd2QyxFQUFLLFVBQVksQ0FBQ0EsRUFBSyxVQUFZL0MsRUFBTyxlQUFlK0MsRUFBSyxLQUFLLEVBRWxGLEdBQUl1QyxFQUFVLENBQ1osR0FBSTVELEdBQWFsZ0MsRUFBT21qQyxDQUFRLEdBQUssQ0FBQzVCLEVBQUssU0FDekMsT0FBTzU5QixFQUFRLEVBR2pCaWdDLEdBQU0sU0FBU3JDLEVBQU12aEMsRUFBT3crQixFQUFRZ0IsRUFBUTErQixFQUFTcWlDLENBQVEsRUFFeERqRCxHQUFhbGdDLEVBQU9takMsQ0FBUSxHQUMvQlMsR0FBTSxLQUFLckMsRUFBTXZoQyxFQUFPdytCLEVBQVFnQixFQUFRMStCLENBQU8sQ0FFbEQsQ0FFRDZDLEVBQVM2N0IsQ0FBTSxDQUNqQixFQUVJa0YsR0FBTSxTQUFhbkQsRUFBTXZoQyxFQUFPMkQsRUFBVTY2QixFQUFRMTlCLEVBQVMsQ0FDN0QsSUFBSTArQixFQUFTLENBQUEsRUFDVHNFLEVBQVd2QyxFQUFLLFVBQVksQ0FBQ0EsRUFBSyxVQUFZL0MsRUFBTyxlQUFlK0MsRUFBSyxLQUFLLEVBRWxGLEdBQUl1QyxFQUFVLENBQ1osR0FBSTVELEdBQWFsZ0MsQ0FBSyxHQUFLLENBQUN1aEMsRUFBSyxTQUMvQixPQUFPNTlCLEVBQVEsRUFHakJpZ0MsR0FBTSxTQUFTckMsRUFBTXZoQyxFQUFPdytCLEVBQVFnQixFQUFRMStCLENBQU8sQ0FDcEQsQ0FFRDZDLEVBQVM2N0IsQ0FBTSxDQUNqQixFQUVJbUYsR0FBYSxDQUNmLE9BQVFkLEdBQ1IsT0FBUUUsR0FDUixPQUFRalYsR0FDUixRQUFXa1YsR0FDWCxPQUFRQyxHQUNSLFFBQVNDLEdBQ1QsTUFBU0MsR0FDVCxNQUFPQyxHQUNQLE9BQVFDLEdBQ1IsS0FBUUUsR0FDUixRQUFTQyxHQUNULEtBQU03OEIsR0FDTixJQUFLdEUsR0FDTCxJQUFLQSxHQUNMLE1BQU9BLEdBQ1AsU0FBVXNuQixHQUNWLElBQUsrWixFQUNQLEVBRUEsU0FBU0UsSUFBYyxDQUNyQixNQUFPLENBQ0wsUUFBVywrQkFDWCxTQUFVLGlCQUNWLEtBQVEsdUJBQ1IsV0FBWSxxQkFDWixLQUFNLENBQ0osT0FBUSxzQ0FDUixNQUFPLDhDQUNQLFFBQVMsdUJBQ1YsRUFDRCxNQUFPLENBQ0wsT0FBUSxpQkFDUixPQUFRLDRCQUNSLE1BQU8sa0JBQ1AsT0FBUSxrQkFDUixPQUFRLGlCQUNSLEtBQU0saUJBQ04sUUFBVyxpQkFDWCxRQUFTLGtCQUNULE1BQVMsaUJBQ1QsT0FBUSx1QkFDUixNQUFPLHVCQUNQLElBQUssdUJBQ0wsSUFBSyxzQkFDTixFQUNELE9BQVEsQ0FDTixJQUFLLG1DQUNMLElBQUssb0NBQ0wsSUFBSyx5Q0FDTCxNQUFPLHlDQUNSLEVBQ0QsT0FBUSxDQUNOLElBQUssbUJBQ0wsSUFBSyw0QkFDTCxJQUFLLCtCQUNMLE1BQU8sOEJBQ1IsRUFDRCxNQUFPLENBQ0wsSUFBSyxrQ0FDTCxJQUFLLHNDQUNMLElBQUsseUNBQ0wsTUFBTyx3Q0FDUixFQUNELFFBQVMsQ0FDUCxTQUFVLHVDQUNYLEVBQ0QsTUFBTyxVQUFpQixDQUN0QixJQUFJQyxFQUFTLEtBQUssTUFBTSxLQUFLLFVBQVUsSUFBSSxDQUFDLEVBQzVDLE9BQUFBLEVBQU8sTUFBUSxLQUFLLE1BQ2JBLENBQ1IsQ0FDTCxDQUNBLENBQ0EsSUFBSUMsR0FBV0YsR0FBVyxFQVN0QkcsR0FBc0IsVUFBWSxDQUdwQyxTQUFTQSxFQUFPQyxFQUFZLENBQzFCLEtBQUssTUFBUSxLQUNiLEtBQUssVUFBWUYsR0FDakIsS0FBSyxPQUFPRSxDQUFVLENBQ3ZCLENBRUQsSUFBSUMsRUFBU0YsRUFBTyxVQUVwQixPQUFBRSxFQUFPLE9BQVMsU0FBZ0JyQixFQUFPLENBQ3JDLElBQUkvQyxFQUFRLEtBRVosR0FBSSxDQUFDK0MsRUFDSCxNQUFNLElBQUksTUFBTSx5Q0FBeUMsRUFHM0QsR0FBSSxPQUFPQSxHQUFVLFVBQVksTUFBTSxRQUFRQSxDQUFLLEVBQ2xELE1BQU0sSUFBSSxNQUFNLHlCQUF5QixFQUczQyxLQUFLLE1BQVEsR0FDYixPQUFPLEtBQUtBLENBQUssRUFBRSxRQUFRLFNBQVV2bEMsRUFBTSxDQUN6QyxJQUFJbUQsRUFBT29pQyxFQUFNdmxDLENBQUksRUFDckJ3aUMsRUFBTSxNQUFNeGlDLENBQUksRUFBSSxNQUFNLFFBQVFtRCxDQUFJLEVBQUlBLEVBQU8sQ0FBQ0EsQ0FBSSxDQUM1RCxDQUFLLENBQ0wsRUFFRXlqQyxFQUFPLFNBQVcsU0FBa0JDLEVBQVcsQ0FDN0MsT0FBSUEsSUFDRixLQUFLLFVBQVl4RCxHQUFVa0QsR0FBYSxFQUFFTSxDQUFTLEdBRzlDLEtBQUssU0FDaEIsRUFFRUQsRUFBTyxTQUFXLFNBQWtCRSxFQUFTbDlCLEVBQUdtOUIsRUFBSSxDQUNsRCxJQUFJQyxFQUFTLEtBRVRwOUIsSUFBTSxTQUNSQSxFQUFJLENBQUEsR0FHRm05QixJQUFPLFNBQ1RBLEVBQUssVUFBYyxJQUdyQixJQUFJNUcsRUFBUzJHLEVBQ1Rya0MsRUFBVW1ILEVBQ1Z0RSxFQUFXeWhDLEVBT2YsR0FMSSxPQUFPdGtDLEdBQVksYUFDckI2QyxFQUFXN0MsRUFDWEEsRUFBVSxDQUFBLEdBR1IsQ0FBQyxLQUFLLE9BQVMsT0FBTyxLQUFLLEtBQUssS0FBSyxFQUFFLFNBQVcsRUFDcEQsT0FBSTZDLEdBQ0ZBLEVBQVMsS0FBTTY2QixDQUFNLEVBR2hCLFFBQVEsUUFBUUEsQ0FBTSxFQUcvQixTQUFTOEcsRUFBU2pGLEVBQVMsQ0FDekIsSUFBSWIsRUFBUyxDQUFBLEVBQ1RFLEVBQVMsQ0FBQSxFQUViLFNBQVM3RyxFQUFJNXhCLEVBQUcsQ0FDZCxHQUFJLE1BQU0sUUFBUUEsQ0FBQyxFQUFHLENBQ3BCLElBQUlzK0IsRUFFSi9GLEdBQVUrRixFQUFVL0YsR0FBUSxPQUFPLE1BQU0rRixFQUFTdCtCLENBQUMsQ0FDN0QsTUFDVXU0QixFQUFPLEtBQUt2NEIsQ0FBQyxDQUVoQixDQUVELFFBQVNoRCxFQUFJLEVBQUdBLEVBQUlvOEIsRUFBUSxPQUFRcDhCLElBQ2xDNDBCLEVBQUl3SCxFQUFRcDhCLENBQUMsQ0FBQyxFQUdYdTdCLEVBQU8sUUFHVkUsRUFBU0QsR0FBbUJELENBQU0sRUFDbEM3N0IsRUFBUzY3QixFQUFRRSxDQUFNLEdBSHZCLzdCLEVBQVMsS0FBTTY2QixDQUFNLENBS3hCLENBRUQsR0FBSTE5QixFQUFRLFNBQVUsQ0FDcEIsSUFBSTBrQyxFQUFhLEtBQUssV0FFbEJBLElBQWVWLEtBQ2pCVSxFQUFhWixHQUFXLEdBRzFCbEQsR0FBVThELEVBQVkxa0MsRUFBUSxRQUFRLEVBQ3RDQSxFQUFRLFNBQVcwa0MsQ0FDekIsTUFDTTFrQyxFQUFRLFNBQVcsS0FBSyxXQUcxQixJQUFJMmtDLEVBQVMsQ0FBQSxFQUNUNS9CLEVBQU8vRSxFQUFRLE1BQVEsT0FBTyxLQUFLLEtBQUssS0FBSyxFQUNqRCtFLEVBQUssUUFBUSxTQUFVNi9CLEVBQUcsQ0FDeEIsSUFBSXgwQixFQUFNbTBCLEVBQU8sTUFBTUssQ0FBQyxFQUNwQjFsQyxFQUFRdytCLEVBQU9rSCxDQUFDLEVBQ3BCeDBCLEVBQUksUUFBUSxTQUFVOUosRUFBRyxDQUN2QixJQUFJbTZCLEVBQU9uNkIsRUFFUCxPQUFPbTZCLEVBQUssV0FBYyxhQUN4Qi9DLElBQVcyRyxJQUNiM0csRUFBU0QsR0FBUyxHQUFJQyxDQUFNLEdBRzlCeCtCLEVBQVF3K0IsRUFBT2tILENBQUMsRUFBSW5FLEVBQUssVUFBVXZoQyxDQUFLLEdBR3RDLE9BQU91aEMsR0FBUyxXQUNsQkEsRUFBTyxDQUNMLFVBQVdBLENBQ3ZCLEVBRVVBLEVBQU9oRCxHQUFTLEdBQUlnRCxDQUFJLEVBSTFCQSxFQUFLLFVBQVk4RCxFQUFPLG9CQUFvQjlELENBQUksRUFFM0NBLEVBQUssWUFJVkEsRUFBSyxNQUFRbUUsRUFDYm5FLEVBQUssVUFBWUEsRUFBSyxXQUFhbUUsRUFDbkNuRSxFQUFLLEtBQU84RCxFQUFPLFFBQVE5RCxDQUFJLEVBQy9Ca0UsRUFBT0MsQ0FBQyxFQUFJRCxFQUFPQyxDQUFDLEdBQUssQ0FBQSxFQUN6QkQsRUFBT0MsQ0FBQyxFQUFFLEtBQUssQ0FDYixLQUFNbkUsRUFDTixNQUFPdmhDLEVBQ1AsT0FBUXcrQixFQUNSLE1BQU9rSCxDQUNqQixDQUFTLEVBQ1QsQ0FBTyxDQUNQLENBQUssRUFDRCxJQUFJQyxFQUFjLENBQUEsRUFDbEIsT0FBTzdFLEdBQVMyRSxFQUFRM2tDLEVBQVMsU0FBVTJVLEVBQU1td0IsRUFBTSxDQUNyRCxJQUFJckUsRUFBTzlyQixFQUFLLEtBQ1pvd0IsR0FBUXRFLEVBQUssT0FBUyxVQUFZQSxFQUFLLE9BQVMsV0FBYSxPQUFPQSxFQUFLLFFBQVcsVUFBWSxPQUFPQSxFQUFLLGNBQWlCLFVBQ2pJc0UsRUFBT0EsSUFBU3RFLEVBQUssVUFBWSxDQUFDQSxFQUFLLFVBQVk5ckIsRUFBSyxPQUN4RDhyQixFQUFLLE1BQVE5ckIsRUFBSyxNQUVsQixTQUFTcXdCLEVBQWFya0MsRUFBS3NrQyxFQUFRLENBQ2pDLE9BQU94SCxHQUFTLENBQUUsRUFBRXdILEVBQVEsQ0FDMUIsVUFBV3hFLEVBQUssVUFBWSxJQUFNOS9CLEVBQ2xDLFdBQVk4L0IsRUFBSyxXQUFhLENBQUEsRUFBRyxPQUFPQSxFQUFLLFdBQVksQ0FBQzkvQixDQUFHLENBQUMsRUFBSSxDQUFDQSxDQUFHLENBQ2hGLENBQVMsQ0FDRixDQUVELFNBQVMya0IsRUFBR25mLEVBQUcsQ0FDVEEsSUFBTSxTQUNSQSxFQUFJLENBQUEsR0FHTixJQUFJKytCLEVBQVksTUFBTSxRQUFRLytCLENBQUMsRUFBSUEsRUFBSSxDQUFDQSxDQUFDLEVBRXJDLENBQUNuRyxFQUFRLGlCQUFtQmtsQyxFQUFVLFFBQ3hDakIsRUFBTyxRQUFRLG1CQUFvQmlCLENBQVMsRUFHMUNBLEVBQVUsUUFBVXpFLEVBQUssVUFBWSxTQUN2Q3lFLEVBQVksQ0FBQSxFQUFHLE9BQU96RSxFQUFLLE9BQU8sR0FJcEMsSUFBSTBFLEVBQWVELEVBQVUsSUFBSTFFLEdBQWdCQyxFQUFNL0MsQ0FBTSxDQUFDLEVBRTlELEdBQUkxOUIsRUFBUSxPQUFTbWxDLEVBQWEsT0FDaEMsT0FBQU4sRUFBWXBFLEVBQUssS0FBSyxFQUFJLEVBQ25CcUUsRUFBS0ssQ0FBWSxFQUcxQixHQUFJLENBQUNKLEVBQ0hELEVBQUtLLENBQVksTUFDWixDQUlMLEdBQUkxRSxFQUFLLFVBQVksQ0FBQzlyQixFQUFLLE1BQ3pCLE9BQUk4ckIsRUFBSyxVQUFZLE9BQ25CMEUsRUFBZSxDQUFFLEVBQUMsT0FBTzFFLEVBQUssT0FBTyxFQUFFLElBQUlELEdBQWdCQyxFQUFNL0MsQ0FBTSxDQUFDLEVBQy9EMTlCLEVBQVEsUUFDakJtbEMsRUFBZSxDQUFDbmxDLEVBQVEsTUFBTXlnQyxFQUFNMzVCLEdBQU85RyxFQUFRLFNBQVMsU0FBVXlnQyxFQUFLLEtBQUssQ0FBQyxDQUFDLEdBRzdFcUUsRUFBS0ssQ0FBWSxFQUcxQixJQUFJQyxFQUFlLENBQUEsRUFFZjNFLEVBQUssY0FDUCxPQUFPLEtBQUs5ckIsRUFBSyxLQUFLLEVBQUUsSUFBSSxTQUFVaFUsRUFBSyxDQUN6Q3lrQyxFQUFhemtDLENBQUcsRUFBSTgvQixFQUFLLFlBQ3ZDLENBQWEsRUFHSDJFLEVBQWUzSCxHQUFTLEdBQUkySCxFQUFjendCLEVBQUssS0FBSyxNQUFNLEVBQzFELElBQUkwd0IsRUFBb0IsQ0FBQSxFQUN4QixPQUFPLEtBQUtELENBQVksRUFBRSxRQUFRLFNBQVUzekIsRUFBTyxDQUNqRCxJQUFJNnpCLEVBQWNGLEVBQWEzekIsQ0FBSyxFQUNoQzh6QixHQUFrQixNQUFNLFFBQVFELENBQVcsRUFBSUEsRUFBYyxDQUFDQSxDQUFXLEVBQzdFRCxFQUFrQjV6QixDQUFLLEVBQUk4ekIsR0FBZ0IsSUFBSVAsRUFBYSxLQUFLLEtBQU12ekIsQ0FBSyxDQUFDLENBQ3pGLENBQVcsRUFDRCxJQUFJd3pCLEVBQVMsSUFBSWhCLEVBQU9vQixDQUFpQixFQUN6Q0osRUFBTyxTQUFTamxDLEVBQVEsUUFBUSxFQUU1QjJVLEVBQUssS0FBSyxVQUNaQSxFQUFLLEtBQUssUUFBUSxTQUFXM1UsRUFBUSxTQUNyQzJVLEVBQUssS0FBSyxRQUFRLE1BQVEzVSxFQUFRLE9BR3BDaWxDLEVBQU8sU0FBU3R3QixFQUFLLE1BQU9BLEVBQUssS0FBSyxTQUFXM1UsRUFBUyxTQUFVd2xDLEVBQU0sQ0FDeEUsSUFBSUMsRUFBYyxDQUFBLEVBRWROLEdBQWdCQSxFQUFhLFFBQy9CTSxFQUFZLEtBQUssTUFBTUEsRUFBYU4sQ0FBWSxFQUc5Q0ssR0FBUUEsRUFBSyxRQUNmQyxFQUFZLEtBQUssTUFBTUEsRUFBYUQsQ0FBSSxFQUcxQ1YsRUFBS1csRUFBWSxPQUFTQSxFQUFjLElBQUksQ0FDeEQsQ0FBVyxDQUNGLENBQ0YsQ0FFRCxJQUFJM2hDLEVBRUosR0FBSTI4QixFQUFLLGVBQ1AzOEIsRUFBTTI4QixFQUFLLGVBQWVBLEVBQU05ckIsRUFBSyxNQUFPMlEsRUFBSTNRLEVBQUssT0FBUTNVLENBQU8sVUFDM0R5Z0MsRUFBSyxVQUFXLENBQ3pCLEdBQUksQ0FDRjM4QixFQUFNMjhCLEVBQUssVUFBVUEsRUFBTTlyQixFQUFLLE1BQU8yUSxFQUFJM1EsRUFBSyxPQUFRM1UsQ0FBTyxDQUNoRSxPQUFRekIsRUFBTyxDQUNkLFFBQVEsT0FBUyxNQUFnQixRQUFRLE1BQU1BLENBQUssRUFFL0N5QixFQUFRLHdCQUNYLFdBQVcsVUFBWSxDQUNyQixNQUFNekIsQ0FDUCxFQUFFLENBQUMsRUFHTittQixFQUFHL21CLEVBQU0sT0FBTyxDQUNqQixDQUVHdUYsSUFBUSxHQUNWd2hCLElBQ1N4aEIsSUFBUSxHQUNqQndoQixFQUFHLE9BQU9tYixFQUFLLFNBQVksV0FBYUEsRUFBSyxRQUFRQSxFQUFLLFdBQWFBLEVBQUssS0FBSyxFQUFJQSxFQUFLLFVBQVlBLEVBQUssV0FBYUEsRUFBSyxPQUFTLFFBQVEsRUFDckkzOEIsYUFBZSxNQUN4QndoQixFQUFHeGhCLENBQUcsRUFDR0EsYUFBZSxPQUN4QndoQixFQUFHeGhCLEVBQUksT0FBTyxDQUVqQixDQUVHQSxHQUFPQSxFQUFJLE1BQ2JBLEVBQUksS0FBSyxVQUFZLENBQ25CLE9BQU93aEIsRUFBRSxDQUNWLEVBQUUsU0FBVW5mLEVBQUcsQ0FDZCxPQUFPbWYsRUFBR25mLENBQUMsQ0FDckIsQ0FBUyxDQUVKLEVBQUUsU0FBVW81QixFQUFTLENBQ3BCaUYsRUFBU2pGLENBQU8sQ0FDakIsRUFBRTdCLENBQU0sQ0FDYixFQUVFeUcsRUFBTyxRQUFVLFNBQWlCMUQsRUFBTSxDQUt0QyxHQUpJQSxFQUFLLE9BQVMsUUFBYUEsRUFBSyxtQkFBbUIsU0FDckRBLEVBQUssS0FBTyxXQUdWLE9BQU9BLEVBQUssV0FBYyxZQUFjQSxFQUFLLE1BQVEsQ0FBQ29ELEdBQVcsZUFBZXBELEVBQUssSUFBSSxFQUMzRixNQUFNLElBQUksTUFBTTM1QixHQUFPLHVCQUF3QjI1QixFQUFLLElBQUksQ0FBQyxFQUczRCxPQUFPQSxFQUFLLE1BQVEsUUFDeEIsRUFFRTBELEVBQU8sb0JBQXNCLFNBQTZCMUQsRUFBTSxDQUM5RCxHQUFJLE9BQU9BLEVBQUssV0FBYyxXQUM1QixPQUFPQSxFQUFLLFVBR2QsSUFBSTE3QixFQUFPLE9BQU8sS0FBSzA3QixDQUFJLEVBQ3ZCaUYsRUFBZTNnQyxFQUFLLFFBQVEsU0FBUyxFQU16QyxPQUpJMmdDLElBQWlCLElBQ25CM2dDLEVBQUssT0FBTzJnQyxFQUFjLENBQUMsRUFHekIzZ0MsRUFBSyxTQUFXLEdBQUtBLEVBQUssQ0FBQyxJQUFNLFdBQzVCOCtCLEdBQVcsU0FHYkEsR0FBVyxLQUFLLFFBQVFwRCxDQUFJLENBQUMsR0FBSyxNQUM3QyxFQUVTd0QsQ0FDVCxJQUVBQSxHQUFPLFNBQVcsU0FBa0IxaEMsRUFBTW9qQyxFQUFXLENBQ25ELEdBQUksT0FBT0EsR0FBYyxXQUN2QixNQUFNLElBQUksTUFBTSxrRUFBa0UsRUFHcEY5QixHQUFXdGhDLENBQUksRUFBSW9qQyxDQUNyQixFQUVBMUIsR0FBTyxRQUFVeEYsR0FDakJ3RixHQUFPLFNBQVdELEdBQ2xCQyxHQUFPLFdBQWFKLEdDenlDZCxTQUFVK0IsR0FBZ0JDLEVBQTJDLENBQ3pFLE1BQU0zQixFQUFvQixDQUFBLEVBQzFCLFVBQVd2akMsS0FBT2tsQyxFQUFlLENBQy9CLE1BQU0vM0IsRUFBTyszQixFQUFjbGxDLENBQUcsRUFBRSxRQUFPLEVBQ2pDbWlDLEVBQVFoMUIsRUFBSyxPQUFTQSxFQUFLLEtBQzNCL0ksRUFBaUJwRSxFQUFJLE1BQU0sR0FBRyxFQUNwQyxJQUFJbWxDLEVBQWU1QixFQUNuQixHQUFJcEIsRUFDRixRQUFTMy9CLEVBQUksRUFBR0EsRUFBSTRCLEVBQUssT0FBUTVCLElBQUssQ0FDOUJ4QyxNQUFBQSxFQUFNb0UsRUFBSzVCLENBQUMsRUFDYjJpQyxFQUFRbmxDLENBQUcsSUFDZG1sQyxFQUFRbmxDLENBQUcsRUFBSSxDQUFFLEtBQU0sU0FBVSxPQUFRLENBQUEsSUFFdkN3QyxHQUFLNEIsRUFBSyxPQUFTLEVBRXJCK2dDLEVBQVFubEMsQ0FBRyxFQUFJbWlDLEVBRUxnRCxFQUFBQSxFQUFRbmxDLENBQUcsRUFBRSxNQUUxQixDQUVKLENBQ00sT0FBQSxJQUFJc2pDLEdBQU9DLENBQVUsQ0FDOUIsQ0NSQSxTQUFTNkIsR0FBUzM5QixFQUFXdkYsRUFBYSxDQUN0Q3BDLEVBQUEsUUFBUTJILEVBQU8xSCxHQUFhLENBQ3hCQSxFQUFLLFNBQ0VBLEdBQUFBLEVBQUssU0FBVW1DLENBQVEsRUFFaENBLEVBQVNuQyxDQUFJLENBQ2QsQ0FDRixDQUNILENBRUEsU0FBU3NsQyxHQUFhaHlCLEVBQVltQyxFQUFhLENBQ3ZDLE1BQUExWSxFQUFLQyxhQUFVLE1BRXJCLFNBQVN1b0MsR0FBTyxDQUNkLE9BQUlqeUIsRUFBTSxLQUNEQSxFQUFNLEtBRVhtQyxFQUFTLE1BQ0pBLEVBQVMsTUFBTTFZLEVBQUcsTUFBTSxJQUFJLEdBQUssR0FFbkMsRUFDVCxDQUVPLE1BQUEsQ0FDTCxRQUFBd29DLEVBQ0EsT0FBT3RnQyxFQUFlaUMsRUFBUSxDQUM1QnErQixFQUFVLEVBQUEsT0FBT3RnQyxFQUFPLEVBQUdpQyxDQUFHLENBQ2hDLEVBQ0EsUUFBUUEsRUFBUSxLQUNKLFFBQVFBLENBQUcsQ0FDdkIsRUFDQSxPQUFPakMsRUFBYSxDQUNYc2dDLElBQUcsT0FBT3RnQyxFQUFPLENBQUMsQ0FDM0IsRUFDQSxJQUFJQSxFQUFhLENBQ1IsT0FBQXNnQyxFQUFBLEVBQVV0Z0MsQ0FBSyxDQUN4QixDQUFBLENBRUosQ0FFZ0IsU0FBQW9PLEdBQVlDLEVBQVk1VyxFQUFVK1ksRUFBYSxDQUN2RCxNQUFBK3ZCLEVBQVlGLEdBQWFoeUIsRUFBT21DLENBQVEsRUFDeENnd0IsRUFBNENwMkIsV0FBUyxDQUFBLENBQUUsRUFDN0QsU0FBU3EyQixFQUFheCtCLEVBQVEsQ0FDeEIsT0FBQSxPQUFPb00sRUFBTSxRQUFXLFNBQ25CcE0sRUFBSW9NLEVBQU0sTUFBTSxFQUVsQkEsRUFBTSxPQUFPcE0sQ0FBRyxDQUN6QixDQUVBLFNBQVN5K0IsRUFBcUJ6K0IsRUFBUSxDQUM3QixPQUFBQSxFQUFJb00sRUFBTSxTQUFTLE1BQU0sQ0FDbEMsQ0FFQSxTQUFTc3lCLEVBQWlCMWYsRUFBeUMsQ0FDakUsVUFBV2ptQixLQUFPd2xDLEVBQWMsQ0FDeEIsTUFBQXYrQixFQUFNdStCLEVBQWF4bEMsQ0FBRyxFQUN0QjRsQyxFQUFRMytCLEVBQUksTUFDWjhNLEVBQVU5TSxFQUFJLFFBRXBCLEdBRFlnZixFQUFLLENBQUUsUUFBQWxTLEVBQVMsSUFBQTlNLEVBQUssTUFBQTIrQixFQUFPLElBQzVCLFFBQ1YsTUFFSCxDQUNILENBRUEsU0FBU0MsRUFBa0I1ZixFQUEwQyxDQUNuRTBmLEVBQWlCLENBQUMsQ0FBRSxRQUFBNXhCLEVBQVMsSUFBQTlNLEVBQUssTUFBQTIrQixLQUFXLENBQzNDOWxDLEVBQUUsUUFBUThsQyxFQUFPLENBQUNFLEVBQVc5bEMsSUFBZSxDQUMxQ2ltQixFQUFLLENBQUUsUUFBQWxTLEVBQVMsSUFBQTlNLEVBQUssTUFBQTIrQixFQUFPLEtBQUFFLEVBQU0sSUFBQTlsQyxFQUFLLENBQUEsQ0FDeEMsQ0FBQSxDQUNGLENBQ0gsQ0FFTSxLQUFBLENBQUUsTUFBQTRKLEdBQVVTLEtBRVpoTCxFQUFzQ3hDLEVBQUFBLFNBQVMsSUFDNUMrTSxFQUNMLENBQ0UsUUFBUyxHQUVULEtBQU0sT0FDTixPQUFRLEtBQ1IsUUFBUyxDQUFFLEVBQ1gsU0FBVSxDQUFFLEVBRVosVUFBVyxHQUVYLGdCQUFpQixTQUVqQixjQUFlLFVBRWYsY0FBZSxHQUNmLFdBQVdsTixFQUFnRCxDQUNsRCxNQUFBLEVBQ1QsQ0FBQSxFQUVGMlcsRUFBTSxRQUFRLENBRWpCLEVBRUQsU0FBUzB5QixFQUFtQkMsRUFBZWhtQyxFQUFhMlQsRUFBaUJnQixFQUFnQixDQUN2RixTQUFTc0csRUFBU2piLEdBQVcsQ0FDcEIsT0FBQUYsRUFBRSxJQUFJa21DLEVBQVVobUMsRUFBRyxDQUM1QixDQUVTLFNBQUFpbUMsRUFBU2ptQyxHQUFhekIsR0FBVSxDQUNyQ3VCLEVBQUEsSUFBSWttQyxFQUFVaG1DLEdBQUt6QixFQUFLLENBQzVCLENBRU0sTUFBQTJuQyxFQUFrQnJwQyxFQUFBQSxTQUFTLElBQUssUUFDcEMsUUFBT1MsR0FBQXFYLEVBQUksV0FBSixZQUFBclgsR0FBYyxhQUFjK0IsRUFBUSxNQUFNLFVBQUEsQ0FDbEQsRUFDSzhtQyxFQUFrQnRwQyxFQUFBQSxTQUFTLElBQUssUUFDcEMsUUFBT1MsR0FBQXFYLEVBQUksV0FBSixZQUFBclgsR0FBYyxhQUFjK0IsRUFBUSxNQUFNLFVBQUEsQ0FDbEQsRUFDS3ltQyxFQUFxQjEyQixFQUFBQSxTQUFTLENBQ2xDLEtBQU11RSxFQUFhLEVBQUksTUFBUSxPQUMvQixTQUFVLE9BQ1YsU0FBVSxPQUNWLFFBQVMsR0FDVCxVQUFXdFUsRUFBUSxNQUFNLGNBQ3pCLGNBQWVBLEVBQVEsTUFBTSxjQUM3QixPQUFRc1YsRUFDUixXQUFBdXhCLEVBQ0EsV0FBQUMsRUFDQSxXQUFZLElBQUssT0FDWCxJQUFBdDBCLElBQVd2VSxFQUFBcVgsR0FBQSxZQUFBQSxFQUFLLFdBQUwsWUFBQXJYLEVBQWUsU0FDMUJ1VSxjQUFvQixXQUVYQSxHQUFBLE9BQU8sU0FBUyxDQUFFLE9BQVEsS0FBTSxXQUFBOEIsRUFBWSxJQUFLLFFBQVMsR0FFdkUsSUFBSXl5QixHQUFVLEtBQ2QsT0FBSXYwQixJQUFZLE9BQ2R1MEIsR0FBVSxDQUFDdjBCLElBRU51MEIsS0FBWS9tQyxFQUFRLE1BQU0sV0FBVyxDQUFFLFdBQUFzVSxFQUFZLElBQUEzVCxFQUFLLElBQUtnbUMsRUFBVSxHQUFLLEdBQ3JGLEVBQ0EsVUFBVyxJQUNGRixFQUFLLFdBQWFBLEVBQUssU0FFaEMsUUFBUyxJQUFLLENBQ1osSUFBSTM0QixHQUFPOU4sRUFBUSxNQUFNeW1DLEVBQUssS0FBTyxNQUFNLEVBQzNDLE9BQUkzNEIsSUFBUSxPQUNWQSxHQUFPOU4sRUFBUSxNQUFNLFVBRWhCOE4sR0FBS25OLENBQUcsQ0FDakIsRUFDQSxPQUFRLENBQUN0RCxHQUFnQyxLQUFNLEVBQzNCQSxHQUFLLFdBQWEyQyxFQUFRLE1BQU0sY0FFakMzQyxHQUFLLGlCQUFtQjJDLEVBQVEsTUFBTSxtQkFDdEMsZ0JBV2pCeW1DLEVBQUssVUFBWSxHQUVaQSxFQUFBLFNBQVc3cUIsRUFBU2piLENBQUcsRUFFNUIsTUFBTXFtQyxFQUFXaG5DLEVBQVEsTUFBTSxTQUFTVyxDQUFHLEVBQ3ZDcW1DLEdBQ0ZDLEVBQWdCRCxFQUFVTCxDQUFRLENBRXRDLEVBQ0EsU0FBVSxJQUFLLENBQ2JGLEVBQUssVUFBWSxHQUNaQSxFQUFBLFNBQVc3cUIsRUFBU2piLENBQUcsQ0FDOUIsRUFDQSxPQUFRLElBQUssQ0FDTjhsQyxFQUFLLFlBR1ZBLEVBQUssVUFBWSxHQUNSRyxFQUFBam1DLEVBQUs4bEMsRUFBSyxRQUFRLEVBQzNCLE9BQU9BLEVBQUssU0FDWixPQUFPQSxFQUFLLFNBQ2QsRUFDQSxPQUFRLElBQUssQ0FDWEEsRUFBSyxPQUFNLENBQ2IsRUFDQSxRQUFTLElBQUssQ0FDWkEsRUFBSyxVQUFZLEdBQ2pCLE9BQU9BLEVBQUssU0FDWixPQUFPQSxFQUFLLFFBQ2QsRUFDQSxLQUFNLFNBQVcsQ0FDVEksTUFBQUEsR0FBYTF2QixFQUFBQSxNQUFNc3ZCLEVBQUssVUFBVSxFQUN4QyxHQUFJLENBQUNJLEdBQVksQ0FDZi9uQyxHQUFPLEtBQ0wsOEdBQThHLEVBRWhILE1BQ0QsQ0FDRDJuQyxFQUFLLFFBQVUsR0FDWCxHQUFBLENBQ0YsTUFBTTNpQyxHQUFNLE1BQU0raUMsR0FBVyxDQUFFLFdBQUF2eUIsRUFBWSxJQUFLcXlCLEVBQVUsSUFBQWhtQyxFQUFLLE1BQU9pYixFQUFTamIsQ0FBRyxDQUFHLENBQUEsRUFDL0V1bUMsRUFBY1AsRUFBUzNtQyxFQUFRLE1BQU0sTUFBTSxHQUM3Q2tuQyxHQUFlLE1BQVFBLEdBQWUsTUFHdkJwakMsSUFBT0EsR0FBSTlELEVBQVEsTUFBTSxNQUFNLElBQ2hDLEtBQ2RsQixHQUFPLE1BQ0w7QUFBQSxRQUNSLEtBQUssVUFBVWdGLEVBQUcsQ0FBQyxFQUFFLEVBR2Y2aUMsRUFBUzNtQyxFQUFRLE1BQU0sTUFBTSxFQUFJOEQsR0FBSTlELEVBQVEsTUFBTSxNQUFNLEdBRzdEeW1DLEVBQUssUUFBTyxDQUFBLFFBQ0osQ0FDUkEsRUFBSyxRQUFVLEVBQ2hCLENBQ0gsQ0FBQSxDQUNELEVBQ00sT0FBQUEsQ0FDVCxDQUVTLFNBQUFVLEVBQWtCN3lCLEVBQW9CSSxFQUFZLENBQ3pELE1BQU02eEIsRUFBc0MsQ0FBQSxFQUNuQ1IsR0FBQS94QixFQUFNLFFBQVV0VCxHQUFxQixDQUN0Q0EsRUFBQUEsRUFBSyxHQUFHLEVBQUlnbUMsRUFBbUJoeUIsRUFBU2hVLEVBQUssSUFBSzRULEVBQVk1VCxDQUFJLENBQUEsQ0FDekUsRUFDSyxNQUFBaWxDLEVBQVlub0MsRUFBQUEsU0FBUyxJQUNsQm9vQyxHQUFnQlcsQ0FBSyxDQUM3QixFQUNLdnpCLEVBQUtvekIsRUFBYTF4QixDQUFPLEVBQ3pCRixFQUFReEIsR0FBTSxNQUFRQSxFQUFLLEVBQzNCdUIsRUFBMkJ4RSxFQUFBQSxTQUFTLENBQ3hDLE1BQUF5RSxFQUNBLFFBQUFFLEVBQ0EsV0FBQUosRUFDQSxVQUFXLEdBQ1gsUUFBUyxHQUNULE1BQUFpeUIsRUFDQSxVQUFBWixFQUNBLFNBQVUsSUFBSyxDQUNicHhCLEVBQVksVUFBWSxHQUN4QjlULEVBQUUsUUFBUThULEVBQVksTUFBUWt5QixHQUFRLENBQ2hDQSxFQUFLLFdBQ1BBLEVBQUssU0FBUSxDQUNkLENBQ0YsQ0FDSCxFQUNBLE9BQVEsSUFBSyxDQUNYbHlCLEVBQVksVUFBWSxHQUN4QjlULEVBQUUsUUFBUThULEVBQVksTUFBUWt5QixHQUFRLENBQ3BDQSxFQUFLLE9BQU8sQ0FBRSxVQUFXLEVBQU8sQ0FBQSxDQUFBLENBQ2pDLENBQ0gsRUFDQSxRQUFTLElBQUssQ0FDWmx5QixFQUFZLFVBQVksR0FDeEJBLEVBQVksU0FBUSxFQUNwQixPQUFPQSxFQUFZLE1BQ25COVQsRUFBRSxRQUFROFQsRUFBWSxNQUFRa3lCLEdBQVEsQ0FDcENBLEVBQUssUUFBTyxDQUFBLENBQ2IsQ0FDSCxFQUNBLE9BQVEsSUFBSyxDQUNYbHlCLEVBQVksVUFBWSxHQUN4QjlULEVBQUUsUUFBUThULEVBQVksTUFBUWt5QixHQUFRLENBQ3BDQSxFQUFLLE9BQU0sQ0FBQSxDQUNaLENBQ0gsRUFDQSxPQUFRLElBQUssQ0FDWGx5QixFQUFZLE9BQU0sQ0FDcEIsRUFDQSxTQUFVLE1BQU8zTSxHQUFhLENBQ3hCLEdBQUEsQ0FDRixPQUFBbkgsRUFBRSxRQUFROFQsRUFBWSxNQUFPLENBQUNreUIsRUFBTTlsQyxLQUFPLENBQ3pDOGxDLEVBQUssZUFBaUIsRUFBQSxDQUN2QixFQUNHNytCLEdBQU8sT0FDVEEsRUFBTTJNLEVBQVksU0FFZCxNQUFBQSxFQUFZLFVBQVUsU0FBUzNNLENBQUcsRUFDakMsU0FDQXpCLEVBQVEsQ0FDVCxLQUFBLENBQUUsT0FBQXU0QixHQUFRLE9BQUFFLEVBQVcsRUFBQXo0QixFQUMzQixPQUFBMUYsRUFBRSxRQUFRbStCLEdBQVEsQ0FBQ0YsRUFBYS85QixLQUFlLENBQ3ZDLE1BQUE4bEMsR0FBT2x5QixFQUFZLE1BQU01VCxFQUFHLEVBQzlCOGxDLEtBQ0ZBLEdBQUssZUFBaUIvSCxFQUN2QixDQUNGLEVBRU1FLEVBQ1IsQ0FDSCxFQUNBLFdBQVksSUFBSyxDQUNmLE1BQU1oM0IsRUFBTW5ILEVBQUUsVUFBVThULEVBQVksT0FBTyxFQUNwQyxjQUFBM00sRUFBSW9NLEVBQU0sU0FBUyxNQUFNLEVBQ2hDLE9BQU9wTSxFQUFJLFNBQ0pBLENBQ1QsRUFDQSxLQUFNLE1BQU92SyxHQUFrRCxDQUN2RCxLQUFBLENBQUUsT0FBQStwQyxDQUFXLEVBQUEvcEMsRUFDYnVLLEdBQU0yTSxFQUFZLFFBQ2xCLENBQUUsTUFBQWhLLEVBQUssRUFBS1MsS0FFbEIsR0FEZSxNQUFNdUosRUFBWSxhQUNsQixHQUNiLE9BRUYsU0FBU0UsR0FBUTR5QixHQUFXLENBQ3RCQSxLQUNFakIsRUFBYWlCLEVBQU0sR0FBSyxNQUNsQixRQUFBLE1BQU0sbUNBQW9DQSxFQUFNLEVBRTFEOThCLEdBQU0zQyxHQUFLeS9CLEVBQU0sRUFFckIsQ0FFQTl5QixFQUFZLFFBQVUsR0FDaEIsTUFBQSt5QixHQUFVL3lCLEVBQVksYUFDeEIsR0FBQSxDQUNJLE1BQUE2eUIsRUFBTyxDQUFFLE1BQU83eUIsRUFBWSxNQUFPLElBQUsreUIsR0FBUyxRQUFBN3lCLEdBQVMsRUFDaEVGLEVBQVksUUFBTyxDQUFBLFFBQ1gsQ0FDUkEsRUFBWSxRQUFVLEVBQ3ZCLENBQ0gsQ0FBQSxDQUNELEVBY0QsR0FaQXhILEVBQUFBLE1BQ0UsSUFDUzJILEVBRVQsTUFBT3hWLEVBQU8ya0IsRUFBVTBqQixLQUFNLENBQzVCLE1BQU1oekIsRUFBWSxVQUFRLEVBRTVCLENBQ0UsS0FBTSxFQUFBLENBQ1AsRUFHQ0csRUFBUSxVQUFZQSxFQUFRLFNBQVMsT0FBUyxFQUNyQyxVQUFBOHlCLEtBQVM5eUIsRUFBUSxTQUFVLENBQy9COHlCLEVBQU14ekIsRUFBTSxTQUFTLE1BQU0sSUFDOUJ3ekIsRUFBTXh6QixFQUFNLFNBQVMsTUFBTSxFQUFJeXpCLEVBQWMsR0FFL0MsTUFBTW56QixFQUFha3pCLEVBQU14ekIsRUFBTSxTQUFTLE1BQU0sRUFDOUNteUIsRUFBYTd4QixDQUFVLEVBQUk2eUIsRUFBa0I3eUIsRUFBWWt6QixDQUFLLENBQy9ELENBR0gsT0FBSWh6QixHQUNGRCxFQUFZLE9BQU0sRUFFYkEsQ0FDVCxDQWdCQSxJQUFJbXpCLEVBQWdCLEVBQ3BCLFNBQVNELEdBQWMsQ0FDckIsT0FBQUMsSUFDT0EsQ0FDVCxDQUNBLFNBQVNDLEVBQWNoekIsRUFBVSxDQUMzQkEsR0FBUSxPQUNWQSxFQUFPdXhCLEVBQVUsV0FHbkIsTUFBTTBCLEVBQVUsT0FBTyxPQUFPLEdBQUl6QixDQUFZLEVBRzlDMWxDLEVBQUUsT0FBTzBsQyxFQUFjLENBQUMxbEMsRUFBR0UsSUFBWSxDQUNyQyxPQUFPd2xDLEVBQWF4bEMsQ0FBRyxDQUFBLENBQ3hCLEVBRUNGLEVBQUEsUUFBUWtVLEVBQU9ELEdBQWdCLENBQzFCQSxFQUFRVixFQUFNLFNBQVMsTUFBTSxJQUNoQ1UsRUFBUVYsRUFBTSxTQUFTLE1BQU0sRUFBSXl6QixFQUFjLEdBRWpELE1BQU1uekIsRUFBYUksRUFBUVYsRUFBTSxTQUFTLE1BQU0sRUFDNUM0ekIsRUFBUXR6QixDQUFVLEVBQ1A2eEIsRUFBQTd4QixDQUFVLEVBQUlzekIsRUFBUXR6QixDQUFVLEVBRTdDNnhCLEVBQWE3eEIsQ0FBVSxFQUFJNnlCLEVBQWtCN3lCLEVBQVlJLENBQU8sQ0FDakUsQ0FDRixFQUNHMVUsRUFBUSxNQUFNLFNBQ2hCQSxFQUFRLE1BQU0sU0FFbEIsQ0FFQSxTQUFTNm5DLEVBQWNsekIsRUFBVyxDQUMxQixNQUFBeUIsRUFBU3BDLEVBQU0sU0FBUyxPQUN4Qjh6QixFQUFnQixDQUFBLEVBQ3RCLFVBQVdsZ0MsS0FBTytNLEVBQU0sQ0FDdEIsTUFBTW96QixFQUFlLENBQUUsQ0FBQzN4QixDQUFNLEVBQUd4TyxFQUFJd08sQ0FBTSxDQUFDLEVBQ3hDeE8sRUFBSSxVQUFZQSxFQUFJLFNBQVMsU0FDdkJtZ0MsRUFBQSxTQUFXRixFQUFjamdDLEVBQUksUUFBUSxHQUUvQ2tnQyxFQUFTLEtBQUtDLENBQU8sQ0FDdEIsQ0FDTSxPQUFBRCxDQUNULENBQ0EvNkIsRUFBQUEsTUFDRSxJQUFLLENBQ0gsTUFBTTRILEVBQU9YLEVBQU0sS0FDbkIsSUFBSTh6QixFQUFrQixDQUFBLEVBQ2xCLE9BQUFuekIsR0FBUSxNQUFRQSxhQUFnQixRQUNsQ216QixFQUFXRCxFQUFjbHpCLENBQUksR0FFeEIsS0FBSyxVQUFVbXpCLENBQVEsQ0FBQSxFQUVoQyxDQUFDQSxFQUFVRSxJQUFlLENBQ3BCaG9DLEVBQVEsTUFBTSxTQUNoQjJuQyxFQUFjM3pCLEVBQU0sSUFBSSxDQUN6QixFQUVILENBQ0UsVUFBVyxFQUFBLENBQ1osRUFFSGpILEVBQUFBLE1BQ0UsSUFDUy9NLEVBQVEsTUFBTSxRQUV0QmQsR0FBUyxPQUNKQSxNQUNFakIsRUFBQWlvQyxFQUFVLFlBQVYsWUFBQWpvQyxFQUFxQixRQUFTLE9BSTlCK0IsRUFBUSxNQUFNLFdBQ2hCQSxFQUFRLE1BQU0sVUFBVSxDQUFFLEdBQUdBLEVBQVEsTUFBTyxFQUUvQyxFQUVILENBQ0UsVUFBVyxFQUFBLENBQ1osRUFFSCtNLEVBQUFBLE1BQ0UsSUFDUy9NLEVBQVEsTUFBTSxLQUV2QixJQUFLLENBQ0NBLEVBQVEsTUFBTSxXQUNoQkEsRUFBUSxNQUFNLFVBQVUsQ0FBRSxHQUFHQSxFQUFRLE1BQU8sQ0FDN0MsQ0FDRixFQUdNLFNBQUFpb0MsRUFBZ0IzekIsRUFBcUIzVCxFQUFZLE9BQ3hELEdBQUlBLEdBQU8sS0FHWCxPQUFPMUMsRUFBQWtvQyxFQUFhN3hCLENBQVUsSUFBdkIsWUFBQXJXLEVBQTBCLE1BQU0wQyxFQUN6QyxDQUtTLFNBQUF1bkMsRUFBTzdxQyxFQUFnQyxHQUFFLENBQzlCbXBDLEVBQUEsQ0FBQyxDQUFFLEtBQUFDLEtBQVUsQ0FDN0JBLEVBQUssT0FBTyxDQUFFLEdBQUdwcEMsRUFBTSxVQUFXLEdBQU8sQ0FBQSxDQUMxQyxDQUNILENBS0EsU0FBUzhxQyxHQUFRLENBQ0czQixFQUFBLENBQUMsQ0FBRSxLQUFBQyxLQUFVLENBQ3pCQSxFQUFLLFdBQ1BBLEVBQUssU0FBUSxDQUNkLENBQ0YsQ0FDSCxDQUVBLGVBQWUyQixHQUFRLENBQ0g1QixFQUFBLENBQUMsQ0FBRSxLQUFBQyxLQUFVLENBQ3pCQSxFQUFLLFdBQ1BBLEVBQUssS0FBSSxDQUNWLENBQ0YsQ0FDSCxDQUVBLFNBQVM0QixHQUFTLENBQ0U3QixFQUFBLENBQUMsQ0FBRSxLQUFBQyxLQUFVLENBQ3pCQSxFQUFLLFdBQ1BBLEVBQUssT0FBTSxDQUNaLENBQ0YsQ0FDSCxDQUtBLFNBQVM2QixHQUFPLEtBRUdoQyxFQUFBLENBQUMsQ0FBRSxJQUFBMStCLEtBQVMsQ0FDM0IsT0FBT0EsRUFBSSxLQUFBLENBQ1osRUFDaUI0K0IsRUFBQSxDQUFDLENBQUUsS0FBQUMsS0FBVSxDQUM3QixPQUFPQSxFQUFLLFNBQ1osT0FBT0EsRUFBSyxRQUFBLENBQ2IsQ0FDSCxDQUtBLFNBQVM4QixHQUFNLENBU0svQixFQUFBLENBQUMsQ0FBRSxLQUFBQyxLQUFVLENBQzdCQSxFQUFLLE9BQU0sQ0FBQSxDQUNaLENBQ0gsQ0FFQSxTQUFTK0IsR0FBUSxDQUNmLElBQUlDLEVBQVEsR0FDSyxPQUFBbkMsRUFBQSxDQUFDLENBQUUsTUFBQUMsS0FBVyxDQUMzQjlsQyxFQUFBLFFBQVE4bEMsRUFBUUUsR0FBUSxDQUNwQixHQUFBQSxFQUFLLFlBQ0MsT0FBQWdDLEVBQUEsR0FDRCxPQUNSLENBQ0YsQ0FBQSxDQUNGLEVBQ01BLENBQ1QsQ0FFQSxJQUFJQyxFQUFXLEVBRU4sU0FBQUMsRUFBZUMsRUFBa0RoaEMsRUFBUSxDQUV2RW0rQixHQUFBNkMsRUFBb0Jsb0MsR0FBdUIsQ0FDbER1bUMsRUFBZ0J2bUMsRUFBTWtILENBQUcsQ0FBQSxDQUMxQixDQUNILENBRVMsU0FBQXEvQixFQUFnQkQsRUFBeUJwL0IsRUFBUSxDQUN4RCxNQUFNMUksRUFBUXVCLEVBQUUsSUFBSW1ILEVBQUtvL0IsRUFBUyxHQUFHLEVBQy9CalgsRUFBVzVZLEVBQUFBLE1BQU02dkIsRUFBUyxLQUFLLEVBQ2pDalgsR0FBWSxNQUFRN3dCLEdBQVMsTUFDL0J1QixFQUFFLElBQUltSCxFQUFLby9CLEVBQVMsSUFBS2pYLENBQVEsQ0FFckMsQ0FFQSxlQUFlOFksRUFBT3hyQyxFQUE2RCxDQUFFLElBQUssT0FBVyxPQUFRLElBQU0sQ0FDakgsSUFBSXVLLEVBQU12SyxFQUFLLEtBQU8sQ0FBRSxDQUFDMkMsRUFBUSxNQUFNLE1BQU0sRUFBRyxFQUFFMG9DLEVBQVUsQ0FBQzEwQixFQUFNLE1BQU0sRUFBRzAwQixDQUFRLEVBRXBGLEdBRGVDLEVBQUEzb0MsRUFBUSxNQUFNLFFBQVM0SCxDQUFHLEVBQ3JDdkssRUFBSyxXQUFZLENBQ2IsTUFBQWdxQyxFQUFTLE1BQU1ocUMsRUFBSyxXQUFXLENBQUUsSUFBS0EsRUFBSyxJQUFLLEVBQ2xEZ3FDLElBQ0l6L0IsRUFBQXkvQixFQUNQLFNBQ1FyekIsRUFBTSxTQUFTLE9BQVEsQ0FDMUIsTUFBQXF6QixFQUFTLE1BQU1yekIsRUFBTSxTQUFTLE9BQU9reUIsRUFBVSxVQUFXdCtCLENBQUcsRUFDL0R5L0IsSUFDSXovQixFQUFBeS9CLEVBQ1AsTUFFRG5CLEVBQVUsUUFBUXQrQixDQUFHLEVBR3ZCLEdBQUl2SyxFQUFLLFFBQVUyVyxFQUFNLFNBQVMsY0FBZSxDQUMvQyxNQUFNb0UsYUFDQSxNQUFBOUQsRUFBYSt4QixFQUFxQnorQixDQUFHLEVBQ3JDMk0sRUFBY3UwQixHQUFleDBCLENBQVUsRUFDekNDLEdBQ0ZBLEVBQVksT0FBTSxDQUVyQixDQUNILENBRVMsU0FBQXcwQixFQUEyQnowQixFQUFvQkssRUFBVyxDQUNqRSxRQUFTeFIsRUFBSSxFQUFHQSxFQUFJd1IsRUFBSyxPQUFReFIsSUFBSyxDQUM5QixNQUFBeUUsRUFBTStNLEVBQUt4UixDQUFDLEVBRWxCLEdBRFdrakMsRUFBcUJ6K0IsQ0FBRyxJQUN4QjBNLEVBQ1AsT0FBQTdULEVBQUEsT0FBT2tVLEVBQU0vTSxDQUFHLEVBQ1gsR0FFVCxHQUFJQSxFQUFJLFVBQVlBLEVBQUksU0FBUyxPQUFTLEdBQzVCbWhDLEVBQTJCejBCLEVBQVkxTSxFQUFJLFFBQVEsRUFFN0QsTUFHTCxDQUNNLE1BQUEsRUFDVCxDQUVBLFNBQVNvaEMsR0FBVTEwQixFQUFlLENBQ2hDLE9BQU82eEIsRUFBYTd4QixDQUFVLEVBQ0h5MEIsRUFBQXowQixFQUFZNHhCLEVBQVUsUUFBUyxDQUFBLENBQzVELENBRUEsU0FBUytDLEdBQVc1ckMsRUFBK0IsQ0FDM0MsS0FBQSxDQUFFLEtBQUE2ckMsQ0FBUyxFQUFBN3JDLEVBQ0FpcEMsRUFBQSxDQUFDLENBQUUsTUFBQUMsS0FBVyxDQUMzQjlsQyxFQUFBLFFBQVF5b0MsRUFBT3ZvQyxHQUFPLENBQ2hCNGxDLEVBQUE1bEMsQ0FBRyxFQUFFLE9BQU8sQ0FBRSxHQUFHdEQsRUFBTSxVQUFXLEdBQU8sQ0FBQSxDQUNoRCxDQUFBLENBQ0YsQ0FDSCxDQUVBLFNBQVN5ckMsR0FBZXgwQixFQUFlLENBQ3JDLE9BQU82eEIsRUFBYTd4QixDQUFVLENBQ2hDLENBRUEsU0FBUzYwQixJQUFhLENBQ3BCLE1BQU1DLEVBQWMsQ0FBQSxFQUNILE9BQUE5QyxFQUFBLENBQUMsQ0FBRSxJQUFBMStCLEtBQVMsQ0FDdkJBLEVBQUksV0FDTndoQyxFQUFLLEtBQUt4aEMsQ0FBRyxDQUNkLENBQ0YsRUFDTXdoQyxDQUNULENBRUEsZUFBZXBHLElBQVEsQ0FDckIsTUFBTXRFLEVBQWMsQ0FBQSxFQUNwQixJQUFJMkssRUFBVyxHQUNmLFVBQVcxb0MsS0FBT3dsQyxFQUFjLENBQ3hCLE1BQUF2K0IsRUFBTXUrQixFQUFheGxDLENBQUcsRUFDdEJtRCxFQUFNLE1BQU04RCxFQUFJLFdBQ2xCOUQsR0FBTyxLQUNGNDZCLEVBQUE5MkIsRUFBSSxVQUFVLEVBQUk5RCxFQUNkdWxDLEVBQUEsR0FFZCxDQUNELE9BQUlBLEVBQ0szSyxFQUVGLEVBQ1QsQ0FFQSxTQUFTNEssRUFBcUIzMEIsRUFBVyxDQUN2QyxVQUFXL00sS0FBTytNLEVBQ1QsT0FBQS9NLEVBQUlvTSxFQUFNLFNBQVMsTUFBTSxFQUM1QnBNLEVBQUksVUFBWUEsRUFBSSxTQUFTLE9BQVMsR0FDeEMwaEMsRUFBcUIxaEMsRUFBSSxRQUFRLEVBRzlCLE9BQUErTSxDQUNULENBQ0EsU0FBUzQwQixHQUFrQjUwQixFQUFZLENBSXJDLE9BSElBLEdBQVEsT0FDVkEsRUFBT2xVLEVBQUUsVUFBVXlsQyxFQUFVLFFBQVMsQ0FBQSxHQUVwQ3Z4QixHQUFRLEtBQ0gsR0FFRjIwQixFQUFxQjMwQixDQUFJLENBQ2xDLENBRU8sTUFBQSxDQUNMLFNBQVUsQ0FDUixRQUFBM1UsRUFDQSxjQUFBMm5DLEVBQ0EsU0FBQVEsRUFDQSxPQUFBRCxFQUNBLFFBQUFJLEVBQ0EsU0FBQUYsRUFDQSxVQUFBQyxFQUNBLE9BQUFFLEVBQ0EsT0FBQU0sRUFDQSxVQUFBRyxHQUNBLGVBQUFGLEdBQ0EsV0FBQUcsR0FDQSxTQUFBVCxFQUNBLGdCQUFBUCxFQUNBLFNBQVUzQixFQUNWLFVBQVdFLEVBQ1gsU0FBQXhELEdBQ0Esa0JBQUF1RyxHQUNBLGNBQUFKLEVBQ0QsQ0FBQSxDQUVMLGFDL3NCTSxTQUFVSyxHQUF3QkMsRUFBa0IsQ0FDbEQsTUFBQUMsRUFBUyxDQUFDL2pDLEVBQWVoRixJQUN0QkYsRUFBRSxJQUFJZ3BDLEVBQWUsU0FBUzlqQyxDQUFLLEtBQUtoRixDQUFHLEVBQUUsRUFFdERndEIsVUFBUSxtQkFBb0IrYixDQUFNLEVBQ2xDLE1BQU1DLEVBQVMsQ0FBQ2hrQyxFQUFlaEYsRUFBYXpCLElBQ25DdUIsRUFBRSxJQUFJZ3BDLEVBQWUsU0FBUzlqQyxDQUFLLEtBQUtoRixDQUFHLEdBQUl6QixDQUFLLEVBRTdEeXVCLE9BQUFBLFVBQVEsbUJBQW9CZ2MsQ0FBTSxFQUUzQixDQUNMLE9BQUFELEVBQ0EsT0FBQUMsQ0FBQSxDQUVKLENDbUJBLFNBQVNDLEdBQWdCLENBQUU1MUIsTUFBQUEsRUFBT3ZXLEdBQUFBLEVBQUlvc0MsY0FBQUEsRUFBZUMsZ0JBQUFBLEVBQWlCQyxvQkFBQUEsQ0FBOEMsRUFBQSxDQUNoRzdlLDBCQUF3Qnp0QixFQUFHaUUsTUFBTW5FLElBQUksRUFDdkQsTUFBTXlzQyxFQUFrQjllLEVBQXVCLHdCQUFDenRCLEVBQUdrUyxZQUFZcFMsSUFBSSxFQUM3RDBzQyxFQUF1Qi9lLEVBQXVCLHdCQUFDenRCLEVBQUd5c0MsaUJBQWlCM3NDLElBQUksRUFDdkRFLEVBQUdrUyxZQUN6QixNQUFNdzZCLEVBQTZCLENBQUEsRUFDbkNBLE9BQUFBLEVBQVd2Z0IsUUFBVSxJQUFLLENBQ3hCLE1BQU14bUIsRUFBVyxDQUFBLEVBQ1hnbkMsRUFBZTFwQyxHQUEwQixDQUM3QyxNQUFNMnBDLEVBQTRCLENBQUEsRUFDNUJDLEVBQWUsUUFBVTVwQyxFQUFLQyxJQUNwQyxJQUFJNHBDLEVBQXlCUCxFQUM3QixHQUFJdHBDLEVBQUswQyxTQUVQaW5DLEVBQVV6Z0IsUUFBVSxJQUFLLENBQ3ZCLE1BQU00Z0IsRUFBb0IsQ0FBQSxFQUMxQi9wQyxPQUFBQSxFQUFFNk8sUUFBUTVPLEVBQUswQyxTQUFXcW5DLEdBQWEsQ0FDakNBLEVBQVVoUyxPQUFTLElBR3ZCK1IsRUFBV2o5QixLQUFLNjhCLEVBQVlLLENBQVMsQ0FBQyxDQUN4QyxDQUFDLEVBQ01ELEdBRVRELEVBQXlCTixVQUNoQnZwQyxFQUFLNkIsTUFBUSxLQUFNLENBRTVCekQsR0FBT0osTUFBTSwyQkFBNEJnQyxFQUFLNkIsSUFBSSxFQUNsRCxNQUFNd29CLEVBQVEvVyxFQUFNcTJCLFdBQWFyMkIsRUFBTXEyQixVQUFVQyxDQUFZLEVBQ3pEdmYsSUFDRnNmLEVBQVV6Z0IsUUFBVW1CLEVBRXZCLE1BRUNzZixFQUFVemdCLFFBQVdqaUIsR0FDWm9pQyxFQUFvQnJwQyxFQUFNaUgsQ0FBSyxFQUcxQyxNQUFNK2lDLEVBQVUsQ0FBRSxHQUFHaHFDLEdBQ3JCLGNBQU9ncUMsRUFBUXRuQyxTQUVmNEwsRUFBQSxZQUFBdTdCLEVBQUE3ZixhQUFBLENBQUEsSUFFUyxnQkFBZ0IsRUFDakJnZ0IsRUFBTyxDQUFBLE1BQ0pocUMsRUFBS2tQLE1BQUssS0FDWGxQLEVBQUtDLElBQUcsVUFDSEQsRUFBS0MsR0FBRyxDQUFBLEVBQ1YwcEMsQ0FBUyxHQVl4QixHQVJBNXBDLEVBQUU2TyxRQUFRdTZCLEVBQWdCbnBDLEdBQVEsQ0FDNUJBLEVBQUsrM0IsT0FBUyxJQUdsQnIxQixFQUFTbUssS0FBSzY4QixFQUFZMXBDLENBQUksQ0FBQyxDQUNqQyxDQUFDLEVBR0dzVCxFQUFNdW9CLFdBQWF2b0IsRUFBTXVvQixVQUFVOUQsT0FBUyxHQUFPLENBQ3JELE1BQU1rUyxFQUFpQixDQUNyQi9nQixRQUFTa2dCLEdBRVgxbUMsRUFBU21LLEtBQUl5QixjQUFBZzdCLEVBQUF0ZixFQUFBQSxXQUFBLENBQUEsSUFFSixrQkFDRDFXLEVBQU11b0IsVUFBUyxDQUFBLE1BQ1p2b0IsRUFBTXVvQixVQUFVM3NCLE1BQUssS0FDdEJvRSxFQUFNdW9CLFVBQVU1N0IsS0FBTyxZQUNwQmdxQyxFQUFBQSxDQUFjLENBQ3ZCLENBRUwsQ0FDRCxPQUFPdm5DLEdBR0w0USxFQUFNK1csT0FDUnRxQixFQUFFNk8sUUFBUTBFLEVBQU0rVyxNQUFPLENBQUNycUIsRUFBTUMsSUFBTyxDQUNuQ3dwQyxFQUFXeHBDLENBQUcsRUFBSUQsQ0FDcEIsQ0FBQyxFQUdJeXBDLENBQ1QsQ0FTQSxTQUFTdDZCLEdBQWtCN1AsRUFBWSxPQUNyQyxLQUFNLENBQUVnVSxNQUFBQSxFQUFPODFCLGdCQUFBQSxFQUFpQkMsb0JBQUFBLEVBQXFCRixjQUFBQSxDQUFlLEVBQUc3cEMsRUFDakUsQ0FBRXZDLEdBQUFBLENBQUksRUFBRzJILEdBQUssTUFBQSxFQUNkaU4sRUFBa0J3M0IsR0FBaUIsR0FDbkMxNkIsRUFBeUIsQ0FBQSxFQUUvQixVQUFXeE8sS0FBTzBSLEVBQWlCLENBQ2pDLE1BQU1ySyxFQUFTcUssRUFBZ0IxUixDQUFHLEVBQ2xDLEdBQUlxSCxFQUFPeXdCLE9BQVMsR0FDbEIsU0FFRixNQUFNLzNCLEVBQU8sQ0FBRSxHQUFHc0gsR0FHbEIsR0FGQXRILEVBQUtrcUMsVUFBWTVpQyxFQUFPckgsSUFDeEJ3TyxFQUFRNUIsS0FBSzdNLENBQUksRUFDYnNILEVBQU81RSxVQUFZLEtBQU0sQ0FFM0IsTUFBTXluQyxFQUFlLENBQUUsR0FBRzdxQyxFQUFTNnBDLGNBQWU3aEMsRUFBTzVFLFVBQ3pELE9BQU95bkMsRUFBYWYsZ0JBQ3BCcHBDLEVBQUswQyxTQUFXeU0sR0FBa0JnN0IsQ0FBWSxDQUMvQyxTQUFVN2lDLEVBQU96RixNQUFRLEtBRW5CLENBRUwsTUFBTXVvQyxFQUFlcHFDLEVBQUtqRCxFQUFHaUUsTUFBTXFwQyxZQUFZLEVBQ3pDQyxFQUFTLENBQUUsR0FBR3RxQyxHQUNwQixPQUFPc3FDLEVBQU92dEMsRUFBR2lFLE1BQU1xcEMsWUFBWSxFQUM5QkQsRUFRSHBxQyxFQUFLakQsRUFBR2lFLE1BQU1xcEMsWUFBWSxFQUFJLENBQUN0a0MsRUFBUWdILEVBQVFnVixJQUFVLENBQ3ZELE1BQU05YSxFQUFRbEssRUFBR2lFLE1BQU11cEMsbUJBQW1CeGtDLEVBQUdnSCxFQUFHZ1YsQ0FBQyxFQUlqRCxPQUFPcW9CLEVBQWFuakMsRUFIRHVqQyxJQUNWbkIsRUFBb0JpQixFQUFRcmpDLENBQUssQ0FFTCxHQVh2Q2pILEVBQUtqRCxFQUFHaUUsTUFBTXFwQyxZQUFZLEVBQUksQ0FBQ3RrQyxFQUFRZ0gsRUFBUWdWLElBQVUsQ0FDdkQsTUFBTTlhLEVBQVFsSyxFQUFHaUUsTUFBTXVwQyxtQkFBbUJ4a0MsRUFBR2dILEVBQUdnVixDQUFDLEVBQ2pELE9BQU9zbkIsRUFBb0JpQixFQUFRcmpDLENBQUssRUFZN0MsQ0FDRixDQUVELEdBQUltaUMsS0FBbUI5MUIsRUFBQUEsRUFBTXVvQixZQUFOdm9CLFlBQUFBLEVBQWlCeWtCLFFBQVMsR0FBTyxDQUV0RCxNQUFNOEQsRUFBWSxDQUNoQjU3QixJQUFLLGFBQ0wsR0FBR3FULEVBQU11b0IsV0FFWEEsRUFBVTkrQixFQUFHaUUsTUFBTXFwQyxZQUFZLEVBQUksQ0FBQ3RrQyxFQUFRZ0gsRUFBUWdWLElBQVUsQ0FDNUQsTUFBTTlhLEVBQVFsSyxFQUFHaUUsTUFBTXVwQyxtQkFBbUJ4a0MsRUFBR2dILEVBQUdnVixDQUFDLEVBQ2pELE9BQU9xbkIsRUFBZ0JuaUMsQ0FBSyxHQUU5QndILEVBQVE1QixLQUFLZ3ZCLENBQVMsQ0FDdkIsQ0FFRHpCLE9BQUFBLEdBQVFwOEIsTUFBTSxpQkFBa0J5USxDQUFPLEVBQ2hDQSxDQUNULENBTWVwRyxNQUFBQSxxQkFBZ0IsQ0FDN0J4TCxLQUFNLFVBQ05tc0IsYUFBYyxHQUNkMVYsTUFBTyxDQUlMK1csTUFBTyxDQUNMeG9CLEtBQU0rbUIsTUFDUCxFQUlEK2dCLFVBQVcsQ0FDVDluQyxLQUFNK21CLE1BQ1AsRUFJRG5hLFFBQVMsQ0FDUDVNLEtBQU0rbUIsT0FDTk0sUUFBU1EsTUFDVixFQUlEbVMsVUFBVyxDQUNUaDZCLEtBQU0rbUIsTUFDUCxFQUlEbVAsS0FBTSxDQUNKbDJCLEtBQU0ybkIsUUFDTk4sUUFBUyxFQUNWLEVBSURqVixLQUFNLENBQ0pwUyxLQUFNMEwsS0FDUCxFQUVEazlCLGtCQUFtQixDQUNqQjVvQyxLQUFNK21CLE1BQ1AsRUFLRDdXLFNBQVUsQ0FDUmxRLEtBQU0rbUIsT0FDTk0sU0FBTyxDQUNMLE1BQU8sRUFDVCxDQUNELEVBRURpRCxRQUFTLENBQ1B0cUIsS0FBTTJuQixRQUNOTixRQUFTLEVBQ1YsRUFJRHBjLEtBQU0sQ0FDSmpMLEtBQU0rbUIsTUFDUCxFQUNEL0MsUUFBUyxDQUNQaGtCLEtBQU0rbUIsTUFDUCxFQUNEbFQsT0FBUSxDQUNON1QsS0FBTSxDQUFDb25CLE9BQVFJLFFBQVEsRUFDdkJILFFBQVMsSUFDVixDQUNGLEVBQ0Q4RCxNQUFPLENBQUMsYUFBYyxlQUFnQixvQkFBcUIsZ0JBQWlCLGNBQWUsYUFBYSxFQUN4R25ELE1BQU12VyxFQUFZNVcsRUFBRyxDQUNuQixNQUFNK1ksRUFBV3RSLEVBQUFBLE1BQ1h1bUMsRUFBZ0J2bUMsTUFBSSxDQUFBLENBQUUsRUFDNUIya0MsR0FBd0I0QixDQUFhLEVBQ3JDLE1BQU1sYixFQUFrQkEsQ0FBQ3ZxQixFQUFnQmhGLElBQWdCLENBQ3ZELEdBQUksQ0FBQ0EsR0FBT2dGLEdBQVMsTUFBUUEsRUFBUXlsQyxFQUFjbHNDLE1BQU1tc0MsT0FDdkQsT0FHRixNQUFNQyxFQURNRixFQUFjbHNDLE1BQU15RyxDQUFLLEVBQ2pCaEYsQ0FBRyxFQUN2QixPQUFPMnFDLEdBQUFBLFlBQUFBLEVBQVN2YyxnQkFHWixDQUFFdHhCLEdBQUFBLENBQUksRUFBRzJILEdBQUssTUFBQSxFQUVkbW1DLEVBQWFydkIsRUFBQUEscUJBQ25CblAsRUFBQUEsTUFDRSxJQUNTaUgsRUFBTVcsS0FFZHpWLEdBQVMsQ0FDUjlCLEVBQUl3d0IsS0FBSyxjQUFlLENBQUVqWixLQUFNelYsQ0FBTyxDQUFBLENBQ3pDLENBQUMsRUFHSCxTQUFTc3NDLEVBQVNDLEVBQWMsRUFBQyxDQUMvQmh1QyxFQUFHaUUsTUFBTThwQyxTQUFTLENBQ2hCQyxJQUFBQSxFQUNBdDFCLFNBQUFBLEVBQ0FGLFdBQVlzMUIsQ0FDYixDQUFBLENBQ0gsQ0FFQSxNQUFNRyxFQUFZeGdCLEVBQXVCLHdCQUFDenRCLEVBQUdpRSxNQUFNbkUsSUFBSSxFQUNqRG91QyxFQUFnQmx1QyxFQUFHa1MsWUFFbkJpOEIsRUFBZTczQixHQUFZQyxFQUFPNVcsRUFBSytZLENBQVEsRUFFL0NySyxFQUFlQSxDQUFDcEwsRUFBV2lILElBQTRCLENBQzNELE1BQU1DLEVBQU1ELEVBQU1na0MsRUFBYy9qQyxHQUFHLEVBQzdCa0csRUFBT2xHLEVBQ1BqQyxFQUFRZ0MsRUFBTWxLLEVBQUdrUyxZQUFZaEssS0FBSyxFQUN4Q2dDLE9BQUFBLEVBQU1oQyxNQUFRQSxFQUNQLENBQ0wsR0FBR2dDLEVBQ0hoSCxJQUFLRCxFQUFLQyxJQUNWekIsTUFBT3VCLEVBQUVnM0IsSUFBSTd2QixFQUFLbEgsRUFBS0MsR0FBRyxFQUMxQmlILElBQUFBLEVBQ0FrRyxLQUFBQSxFQUNBb2lCLGdCQUFrQnZ2QixHQUNUdXZCLEVBQWdCdnFCLEVBQU9oRixDQUFHLElBS3ZDLFNBQVNrckMsRUFBWXBnQyxFQUFxQixDQUN4Q3JPLEVBQUl3d0IsS0FBSyxhQUFjbmlCLENBQU8sQ0FDaEMsQ0FFQSxNQUFNMGhCLEVBQVMxdkIsRUFBR2lFLE1BQU1vcUMsU0FBUyxDQUMvQkMsYUFBZUMsR0FBVSxDQUN2QjV1QyxFQUFJd3dCLEtBQUssY0FBZW9lLENBQU0sQ0FDL0IsRUFDREMsZUFBaUJDLEdBQWdCLENBQy9COXVDLEVBQUl3d0IsS0FBSyxnQkFBaUJzZSxDQUFPLENBQ2xDLEVBQ0RDLGFBQWNBLElBQUssQ0FFbEIsRUFDREMsU0FBV04sR0FBWSxDQUNyQkEsRUFBUzF1QyxFQUFJaXVCLEtBQUssQ0FDcEIsQ0FDRCxDQUFBLEVBRUt5ZSxFQUFtQm5pQyxHQUFjLENBRXJDQSxFQUFNaEMsTUFBUWdDLEVBQU1sSyxFQUFHa1MsWUFBWWhLLEtBQUssRUFDeEMsTUFBTTBtQyxFQUFxQixpQkFDckIxQixFQUFzQixDQUFBLEVBQzVCLEdBQUkzMkIsRUFBTXEyQixVQUNSLFVBQVcxcEMsS0FBT3FULEVBQU1xMkIsVUFDbEIxcEMsRUFBSW1yQixXQUFXdWdCLENBQWtCLElBQ25DMUIsRUFBZWhxQyxDQUFHLEVBQUlxVCxFQUFNcTJCLFVBQVUxcEMsQ0FBRyxHQUkvQyxPQUFBcU8sRUFBQUEsWUFBQTJaLEVBQUFBLGlCQUFBLGVBQUEsRUFBQStCLEVBQUEsV0FBMEIxVyxFQUFNdW9CLFVBQVMsQ0FBQSxNQUFTNTBCLEVBQUssU0FBWWtrQyxDQUFXLENBQUEsRUFBV2xCLENBQWMsR0FHbkdaLEVBQXNCQSxDQUFDcnBDLEVBQVdpSCxJQUFjLGlDQUNwRCxNQUFNMmlDLEVBQWUsUUFBVTVwQyxFQUFLQyxJQUM5QmlILEVBQU9ELEVBQU1DLElBQU1ELEVBQU1na0MsRUFBYy9qQyxHQUFHLEVBSTFDNFQsRUFBUyxDQUNiK1IsV0FBWTlzQixFQUFFZzNCLElBQUk5dkIsRUFBTWdrQyxFQUFjL2pDLEdBQUcsRUFBR2xILEVBQUtDLEdBQUcsRUFDcEQsc0JBQXdCekIsR0FBYyxRQUNwQ3VCLEVBQUU4eEIsSUFBSTVxQixFQUFNZ2tDLEVBQWMvakMsR0FBRyxFQUFHbEgsRUFBS0MsSUFBS3pCLENBQUssRUFDL0MsTUFBTW90QyxFQUFXeGdDLEVBQWFwTCxFQUFNaUgsQ0FBSyxFQUN6Q3ZLLEVBQUl3d0IsS0FBSyxlQUFnQjBlLENBQVEsRUFDN0I1ckMsRUFBSzR2QixjQUNINXZCLEVBQUs0dkIsdUJBQXVCdkcsU0FDOUJycEIsRUFBSzR2QixZQUFZZ2MsQ0FBUSxHQUV6QjVyQyxHQUFBQSxFQUFLNHZCLGNBQUw1dkIsTUFBQUEsR0FBa0I0TixPQUFPZytCLEdBRy9CLEdBRUlDLEVBQVUxa0MsR0FBVyxDQUN6QixNQUFNbEMsRUFBUWdDLEVBQU1sSyxFQUFHa1MsWUFBWWhLLEtBQUssRUFDbENoRixHQUFNRCxFQUFLQyxJQUNqQixJQUFJNnJDLEdBQVVwQixFQUFjbHNDLE1BQU15RyxDQUFLLEVBQ25DNm1DLElBQVcsT0FDYnBCLEVBQWNsc0MsTUFBTXlHLENBQUssRUFBSTZtQyxHQUFVLENBQUEsR0FFekNBLEdBQVE3ckMsRUFBRyxFQUFJa0gsR0FHWGxDLEVBQVFnQyxFQUFNbEssRUFBR2tTLFlBQVloSyxLQUFLLEVBQ2xDMk8sRUFBYTFNLEdBQUlvTSxHQUFBQSxFQUFNdkIsV0FBTnVCLFlBQUFBLEdBQWdCb0MsTUFBTSxFQUV2Q2kwQixHQUFZcjJCLEVBQU1xMkIsV0FBYXIyQixFQUFNcTJCLFVBQVVDLENBQVksRUFFM0RnQyxHQUFXeGdDLEVBQWFwTCxFQUFNaUgsQ0FBSyxFQUN6QyxLQUFJaWtDLEdBQUFBLElBQUFBLEdBQUFBLEVBQWFuNUIsV0FBYm01QixZQUFBQSxHQUF1QjVyQyxVQUF2QjRyQyxZQUFBQSxHQUFnQzFzQyxRQUFoQzBzQyxZQUFBQSxFQUF1QzdFLFdBQVksR0FBTSxDQUUzRCxNQUFNMEYsRUFBZWIsRUFBYW41QixTQUFTdzFCLGdCQUFnQjN6QixFQUFZNVQsRUFBS0MsR0FBRyxFQUMvRSxPQUFBcU8sY0FBQTJaLEVBQUFBLGlCQUFBLGtCQUFBLEVBQUErQixFQUFBQSxXQUFBLENBQUEsSUFFUzZoQixFQUFNLElBQ043ckMsRUFBS0MsSUFBRyxVQUNGRCxFQUFLQyxJQUFHLE1BQ1pnRixFQUFLLFdBQ0EyTyxFQUFVLEtBQ2hCNVQsRUFBSSxhQUNJK3JDLEVBQVksY0FDWmIsR0FBQUEsR0FBQUEsRUFBYW41QixXQUFibTVCLFlBQUFBLEdBQXVCNXJDLFVBQXZCNHJDLFlBQUFBLEVBQWdDMXNDLE1BQUssTUFDNUNvdEMsR0FBUSxNQUNSakMsR0FBUyxVQUNOdUIsR0FBQUEsR0FBQUEsRUFBQUEsRUFBYW41QixXQUFibTVCLFlBQUFBLEVBQXVCNXJDLFVBQXZCNHJDLFlBQUFBLEVBQWdDMXNDLFFBQWhDMHNDLFlBQUFBLEVBQXVDcDVCLFNBQVEsVUFDL0NvNUIsR0FBQUEsR0FBQUEsRUFBQUEsRUFBYW41QixXQUFibTVCLFlBQUFBLEVBQXVCNXJDLFVBQXZCNHJDLFlBQUFBLEVBQWdDMXNDLFFBQWhDMHNDLFlBQUFBLEVBQXVDYyxRQUFRLEVBQ3JEbHhCLENBQU0sRUFBQSxJQUFBLENBR2YsS0FDQyxRQUFBeE0sY0FBQTJaLEVBQUFBLGlCQUFBLFNBQUEsRUFBQStCLEVBQUFBLFdBQUEsQ0FBQSxJQUVTNmhCLEVBQU0sSUFDTjdyQyxFQUFLQyxJQUFHLEtBQ1BELEVBQUksTUFDSDRyQyxHQUFRLE1BQ1JqQyxFQUFTLEVBQ1o3dUIsRUFBTSxDQUFBLGtCQUNTeEgsRUFBTW0zQixpQkFBaUIsQ0FBQSxFQUFBLElBQUEsR0FNNUMsQ0FBRTd5QixPQUFBQSxDQUFRLEVBQUdsYixFQUVuQmtiLEVBQU8sQ0FDTG5DLFNBQUFBLEVBQ0FpMUIsY0FBQUEsRUFDQWxiLGdCQUFBQSxFQUNBLEdBQUcwYixFQUNISixTQUFBQSxDQUNELENBQUEsRUFFRCxNQUFNbUIsRUFBYWx2QyxFQUFHaUUsTUFBTWlyQyxXQUN0QkMsRUFBYXB2QyxFQUFBQSxTQUFTLEtBQ25CLENBQ0wsQ0FBQ0MsRUFBR2lFLE1BQU1pVCxJQUFJLEVBQUdYLEVBQU1XLE1BRTFCLEVBRUssQ0FBRXBLLE1BQUFBLENBQU8sRUFBR1MsR0FBUSxFQUNwQjZoQyxFQUFrQnJ2QyxFQUFBQSxTQUFTLElBQ3hCK00sRUFBTSxDQUFFLEVBQUVuTixFQUFJaXVCLE1BQU84QixDQUFNLENBQ25DLEVBQ0swYyxFQUFnQnJzQyxFQUFBQSxTQUFTLElBRXRCd1csRUFBTTdFLE9BQ2QsRUFDRCxHQUFJdzlCLElBQWUsT0FBUSxDQUV6QixNQUFNRyxFQUFxQnR2QyxFQUFBQSxTQUFTLElBQzNCb3NDLEdBQWdCLENBQ3JCNTFCLE1BQUFBLEVBQ0F2VyxHQUFBQSxFQUNBb3NDLGNBQWVBLEVBQWMzcUMsTUFDN0I0cUMsZ0JBQUFBLEVBQ0FDLG9CQUFBQSxDQUMwQixDQUFBLENBQzdCLEVBRUQsTUFBTyxJQUFLLENBQ1YsR0FBSS8xQixFQUFNeWtCLE9BQVMsR0FDakIsT0FHRixNQUFNc1UsRUFBVy85QixFQUFBQSxZQUFBMDhCLEVBQUFoaEIsYUFBQSxDQUFBLElBRVJ2VSxFQUFRLFFBQ0puQyxFQUFNNlksUUFBTyxPQUNkN1ksRUFBTW9DLFFBQ1Z5MkIsRUFBZ0IzdEMsTUFDaEIwdEMsRUFBVzF0QyxLQUFLLEVBQ1g0dEMsRUFBbUI1dEMsS0FBSyxFQUdyQyxHQUFJLE9BQU96QixFQUFHaUUsTUFBTXNyQyxVQUFhLFNBQVUsQ0FDekMsTUFBTW5nQixFQUFVb2dCLEVBQWdCLGlCQUFDeHZDLEVBQUdpRSxNQUFNc3JDLFFBQVEsRUFDbEQsT0FBT0UsRUFBQUEsZUFBZUgsRUFBYSxDQUFDLENBQUNsZ0IsRUFBUzdZLEVBQU02WSxPQUFPLENBQUMsQ0FBQyxDQUM5RCxDQUNELE9BQU9rZ0IsRUFFVixLQUFNLENBRUwsTUFBTTVjLEVBQWtCM3lCLEVBQUFBLFNBQVMsSUFDeEJxUyxHQUFrQixDQUN2Qm1FLE1BQUFBLEVBQ0E1VyxJQUFBQSxFQUNBSyxHQUFBQSxFQUNBcU8sYUFBQUEsRUFDQSs5QixjQUFlQSxFQUFjM3FDLE1BQzdCa3NDLGNBQUFBLEVBQ0F0QixnQkFBQUEsRUFDQUMsb0JBQUFBLEVBQ0E1NkIsUUFBUzZFLEVBQU03RSxPQUNoQixDQUFBLENBQ0YsRUFFRCxNQUFPLElBQUssQ0FDVixHQUFJNkUsRUFBTXlrQixPQUFTLEdBR25CLE9BQUF6cEIsRUFBQSxZQUFBMDhCLEVBQUFoaEIsYUFBQSxDQUFBLElBRVN2VSxFQUFRLFFBQ0puQyxFQUFNNlksUUFBTyxPQUNkN1ksRUFBTW9DLFFBQ1Z5MkIsRUFBZ0IzdEMsTUFBSyxDQUFBLFFBQ2hCaXhCLEVBQWdCanhCLEtBQUssRUFDMUIwdEMsRUFBVzF0QyxLQUFLLEVBQ1g4VSxFQUFNK1csS0FBSyxFQUkzQixDQUNILENBQ0QsQ0FBQSxFQ3JnQmNoaUIscUJBQWdCLENBQzdCeEwsS0FBTSxTQUNOeVcsTUFBTyxDQUNMdFQsS0FBTSxDQUFFLEVBSVJpSCxNQUFPLENBQ0xpaUIsU0FBTyxDQUNMLE1BQU8sRUFDVCxDQUNELEVBSURtQixNQUFPLENBQUUsRUFLVG9nQixrQkFBbUIsQ0FDakI1b0MsS0FBTSttQixNQUNQLENBQ0YsRUFDRGlCLE1BQU12VyxFQUFZNVcsRUFBRyxDQUNuQixLQUFNLENBQUUrTyxXQUFBQSxDQUFZLEVBQUdjLEdBQVUsRUFRM0JrZ0MsRUFBb0JoaEMsRUFQS2loQyxJQUN0QnA1QixFQUFNdFQsS0FBS21OLFVBRUhrTyxJQUNSL0gsRUFBTXJNLEtBR3NELEVBRS9Ea21CLEVBQVlocEIsRUFBQUEsTUFFbEIsU0FBU2txQixHQUFZLENBQ25CLE9BQU9sQixFQUFVM3VCLE1BQU02dkIsY0FDekIsQ0FFQTN4QixFQUFJa2IsT0FBTyxDQUNUeVcsYUFBQUEsRUFDQWxCLFVBQUFBLENBQ0QsQ0FBQSxFQUVELE1BQU13ZixFQUFnQjd2QyxFQUFBQSxTQUFTLElBQUssQ0FDbEMsSUFBSW9TLEVBQVFvRSxFQUFNdFQsS0FBSzRzQyxVQUN2QixNQUFNcHVDLEVBQVE4VSxFQUFNck0sTUFBTXpJLE1BQzFCLE9BQUkwUSxJQUFVLEtBQ1pBLEVBQVExUSxHQUVIMFEsQ0FDVCxDQUFDLEVBQ0syOUIsRUFBNEIvdkMsRUFBQUEsU0FBUyxJQUNkZ3dDLEdBQ3pCeCtCLEVBQUFBLFlBQUEsT0FBQSxDQUFBLE1BQ2UsVUFBUyxNQUFTcStCLEVBQWNudUMsS0FBSyxFQUFBLENBQy9Dc3VDLENBQUksQ0FBQSxDQUtaLEVBRUQsTUFBTyxJQUFLLFNBQ1YsTUFBTXR1QyxFQUFROFUsRUFBTXJNLE1BQU16SSxNQUNwQnV1QyxFQUFvQkYsRUFBMEJydUMsTUFDOUN5SSxFQUFRLENBQUUsR0FBR3FNLEVBQU1yTSxNQUFPcU0sTUFBT0EsRUFBTXRULE1BQ3ZDeXFDLEVBQW9CbjNCLEVBQU10VCxLQUFLeXFDLG1CQUFxQm4zQixFQUFNbTNCLGtCQUNoRSxHQUFJQSxHQUFxQkEsRUFBa0J1QyxPQUFTdkMsRUFBa0J1QyxNQUFNL2xDLENBQUssRUFFL0UsT0FBTzhsQyxFQUFrQnRDLEVBQWtCcDhCLE9BQU9wSCxDQUFLLENBQUMsRUFDbkQsR0FBSXFNLEVBQU0rVyxNQUNmLE9BQU8waUIsRUFBa0J6NUIsRUFBTStXLE1BQU1wakIsQ0FBSyxDQUFDLEVBQ3RDLEdBQUlxTSxFQUFNdFQsS0FBS2l0QyxVQUNwQixPQUFPRixFQUFrQno1QixFQUFNdFQsS0FBS2l0QyxVQUFVaG1DLENBQUssQ0FBQyxFQUMvQyxHQUFJcU0sRUFBTXRULEtBQUt3cUMsV0FDcEIsT0FBT3VDLEVBQWtCejVCLEVBQU10VCxLQUFLd3FDLFdBQVd2akMsQ0FBSyxDQUFDLEVBQ2hELEdBQUlxTSxFQUFNdFQsS0FBS3FPLE9BQ3BCaXBCLFFBQVF4NUIsS0FBSyw0Q0FBNEMsTUFDcEQsUUFBSTJ1QyxFQUFBQSxFQUFrQmp1QyxRQUFsQml1QyxNQUFBQSxFQUF5QjV2QyxPQUM5QjR2QyxFQUFBQSxFQUFrQmp1QyxRQUFsQml1QyxZQUFBQSxFQUF5QjFVLFFBQVMsR0FDcEMsT0FFRnpwQixjQUFBMlosRUFBQUEsaUJBQUEscUJBQUEsRUFBQStCLEVBQUFBLFdBQUEsQ0FBQSxNQUM4QjJpQixFQUFjbnVDLE1BQUssSUFBTzJ1QixHQUFlc2YsRUFBa0JqdUMsTUFBSyxDQUFBLE1BQVN5SSxDQUFLLENBQUEsRUFBQSxJQUFBLEVBR3JHOGxDLEVBQWtCaHRDLEVBQUUrb0IsU0FBU3RxQixDQUFLLENBQUMsRUFHaEQsQ0FDRCxDQUFBLEVDN0ZjNkoscUJBQWdCLENBQzdCeEwsS0FBTSxpQkFDTm1zQixhQUFjLEdBQ2QxVixNQUFPLENBSUx0VCxLQUFNLENBQUUsRUFDUmlILE1BQU8sQ0FBRSxFQUNUaEMsTUFBTyxDQUFFLEVBQ1QyTyxXQUFZLENBQUUsRUFDZHM1QixVQUFXLENBQUUsRUFDYm5CLGFBQWMsQ0FDWmxxQyxLQUFNK21CLE1BQ1AsRUFDRGpWLGFBQWMsQ0FDWjlSLEtBQU0rbUIsTUFDUCxFQUNEeUIsTUFBTyxDQUFFLEVBQ1R2WSxTQUFVLENBQUUsRUFDWms2QixTQUFVLENBQUUsQ0FDYixFQUNEbmlCLE1BQU12VyxFQUFZNVcsRUFBUSxDQUNiTSxHQUFBQSxVQUFVKzVCLElBQUssRUFFMUIsS0FBTSxDQUFFdHJCLFdBQUFBLENBQVksRUFBR2MsR0FBVSxFQUdqQyxHQUFJK0csRUFBTXJPLFFBQVUsR0FFbEIsTUFBTyxJQUFPLENBQUEsRUFPaEIsTUFBTWtvQyxFQUFlMWhDLEVBSkUyaEMsSUFBSyxPQUMxQixPQUFPOTVCLEVBQUFBLEVBQU15NEIsZUFBTno0QixZQUFBQSxFQUFvQis1QixXQUdtQixJQUN2Qy81QixFQUFNck0sS0FDZCxFQUVLcW1DLEVBQTZEeHdDLEVBQUFBLFNBQVMsSUFBSyxPQUMvRSxPQUFPcXdDLEVBQWEzdUMsT0FBUzJ1QyxFQUFhM3VDLE1BQU11NUIsT0FBUyxNQUFTemtCLEVBQUFBLEVBQU15NEIsZUFBTno0QixZQUFBQSxFQUFvQjZELGFBQ3hGLENBQUMsRUFFRCxTQUFTbzJCLEVBQWMvRixFQUFlLENBQ2hDQSxHQUNFOEYsRUFBbUI5dUMsT0FDckI4VSxFQUFNeTRCLGFBQWF2RSxRQUd6QixDQUNBLGVBQWVnRyxHQUFRLE9BQ3JCLEtBQUlsNkIsRUFBQUEsRUFBTUssZUFBTkwsWUFBQUEsRUFBb0J5QyxRQUFTLE9BQVEsQ0FDdkMsTUFBTXpDLEVBQU15NEIsYUFBYW5FLFVBQ3pCLE1BQ0QsQ0FDRCxNQUFNdDBCLEVBQU15NEIsYUFBYTBCLE1BQzNCLENBQ0EsU0FBU0MsR0FBUSxDQUNmcDZCLEVBQU15NEIsYUFBYXhWLFFBQ3JCLENBRUEsTUFBTTZQLEVBQW1DdHBDLEVBQUFBLFNBQVMsSUFBSyxTQUVyRCxTQUNHd1csRUFBQUEsRUFBTUssZUFBTkwsWUFBQUEsRUFBb0J5QyxRQUFTLFVBQVV6QyxFQUFBQSxFQUFNSyxlQUFOTCxZQUFBQSxFQUFvQnlDLFFBQVMsU0FDckV6QyxFQUFNeTRCLGFBQWEzRixhQUFlLEVBRXRDLENBQUMsRUFDSzlVLEVBQWdDeDBCLEVBQUFBLFNBQVMsSUFDdEN3VyxFQUFNeTRCLGFBQWE0QixXQUFhcjZCLEVBQU15NEIsYUFBYTRCLFdBQzNELEVBRUt2YixFQUFZQSxJQUNUOWUsRUFBTXJNLE1BSVRvakIsRUFBUSxDQUNabkIsUUFBU0EsSUFDUDVhLGNBQUEyWixFQUFBQSxpQkFBQSxTQUFBLEVBQUErQixFQUFBQSxXQUFBLENBQUEsSUFBcUIsWUFBVyxLQUFRMVcsRUFBTXRULEtBQUksTUFBU3NULEVBQU1yTSxNQUFLLE1BQVNxTSxFQUFNK1csS0FBVzN0QixFQUFBQSxFQUFJaXVCLEtBQUssRUFBQSxJQUFBLEVBRTNHaWpCLEtBQU1BLElBQUssU0FDVCxJQUFJQyxFQUFzQixLQUMxQixPQUFJdjZCLEVBQUFBLEVBQU15NEIsZUFBTno0QixNQUFBQSxFQUFvQnc2QixZQUNsQlgsRUFBYTN1QyxNQUFNaEIsUUFBVSxNQUFTMnZDLEVBQUFBLEVBQWEzdUMsTUFBTTJPLFlBQW5CZ2dDLFlBQUFBLEVBQThCcFYsUUFBUyxHQUMvRThWLEVBQWlCLEtBRWpCVixFQUFhM3VDLE1BQU1pc0MsbUJBQ25CMEMsRUFBYTN1QyxNQUFNaXNDLGtCQUFrQnVDLE9BQ3JDRyxFQUFhM3VDLE1BQU1pc0Msa0JBQWtCdUMsTUFBTTVhLEVBQVcsQ0FBQSxFQUV0RHliLEVBQWN2L0IsRUFBQUEsWUFBQTJaLEVBQUFBLDhCQUFBK0IsRUFBQUEsV0FBQSxDQUFBLGNBQ1ltakIsRUFBYTN1QyxNQUFNaXNDLGtCQUFrQnA4QixPQUFNLE1BQVMrakIsR0FBaUIxMUIsRUFBQUEsRUFBSWl1QixLQUFLLEVBQ3ZHLElBQUEsRUFDUXdpQixFQUFhM3VDLE1BQU02UCxPQUM1QncvQixFQUFjdi9CLEVBQUFBLFlBQUEyWixFQUFBQSw4QkFBQStCLEVBQUFBLFdBQUEsQ0FBQSxjQUEyQm1qQixFQUFhM3VDLE1BQU02UCxPQUFNLE1BQVMrakIsRUFBUyxDQUFRMTFCLEVBQUFBLEVBQUlpdUIsS0FBSyxFQUFJLElBQUEsRUFFekdrakIsRUFBY3YvQixFQUFBQSxZQUFBMlosRUFBQUEsd0NBQUErQixFQUFBQSxXQUFBLENBQUEsSUFFTCxnQkFDRG1qQixFQUFBQSxFQUFhM3VDLE1BQU0yTyxVQUNuQnpRLEVBQUlpdUIsTUFBSyxDQUFBLE1BQ05yWCxFQUFNck0sTUFFaEIsRUFBQSxJQUFBLEdBR0U0bUMsQ0FDVCxHQUdGLE1BQU8sSUFBSyxPQUNWLEdBQUksQ0FBQ1AsRUFBbUI5dUMsT0FBUzhVLEVBQU14QixVQUFZd0IsRUFBTTA0QixTQUN2RCxPQUFBMTlCLGNBQUEyWixFQUFBQSxpQkFBQSxTQUFBLEVBQUErQixFQUFBQSxXQUFBLENBQUEsSUFBcUIsWUFBVyxLQUFRMVcsRUFBTXRULEtBQUksTUFBU3NULEVBQU1yTSxLQUFXdkssRUFBQUEsRUFBSWl1QixLQUFLLEVBQUEsSUFBQSxFQUV2RixNQUFNb2hCLEVBQTZCejRCLEVBQU15NEIsYUFDbkM5dUMsRUFBVW1wQyxFQUFXNW5DLE9BQVE4VSxFQUFBQSxFQUFNSyxlQUFOTCxZQUFBQSxFQUFvQnk2QixjQUFnQixHQUN2RSxPQUFBei9CLEVBQUEsWUFBQTJaLG1CQUFBLGFBQUEsRUFBQSxDQUFBLElBRVMsY0FBYSxNQUNYLG1CQUFrQixRQUNoQjhqQixHQUFBQSxZQUFBQSxFQUFjK0IsVUFBUyxXQUNwQjFILEVBQVc1bkMsTUFBSyxNQUNyQjh5QixFQUFROXlCLE1BQUssbUJBRUYrdUMsRUFBYSxTQUNyQkMsRUFBUSxTQUNSRSxFQUFRLFFBQ1QzQixHQUFBQSxZQUFBQSxFQUFjNWYsUUFBTyxRQUNyQmx2QixFQUFPLGVBQ0E4dUMsR0FBQUEsWUFBQUEsRUFBYzlhLGNBQWMsRUFObkM1RyxDQUFLLEVBVXJCLEVBQ0QyakIsUUFBUyxDQUNQM2YsY0FBWSxPQUVWLFFBQU85d0IsRUFBQSxLQUFLMHdDLE1BQU1DLGlCQUFYLFlBQUEzd0MsRUFBMkI4d0IsaUJBQWtCLEtBQUs0ZixNQUFNOWdCLFNBQ2pFLENBQ0QsQ0FDRixDQUFBLDJsQkNyR0QsTUFBTTdaLEVBQVE2NkIsRUFZUixDQUFFLEdBQUFweEMsR0FBTzJILEdBQUFBLFFBQ1Rzb0IsRUFBUW9oQixFQUNSTCxFQUFnQmp4QyxFQUFBQSxTQUFTLElBQ3hCd1csRUFBTSxRQUdKLENBQ0wsQ0FBQ0EsRUFBTSxPQUFPLEVBQUcsSUFBTSxDQUNyQjBaLEVBQU0saUJBQWtCLEVBQUksQ0FDOUIsQ0FBQSxFQUxPLEVBT1YsRUFDRCxTQUFTcWhCLEdBQVcsQ0FDbEJyaEIsRUFBTSxRQUFRLENBQ2hCLENBQ0EsU0FBU3NoQixHQUFXLENBQ2xCdGhCLEVBQU0sUUFBUSxDQUNoQixDQUNBLFNBQVMyYixHQUFXLE9BQ1gsUUFBQXByQyxFQUFBK1YsRUFBTSxpQkFBTixZQUFBL1YsRUFBc0IsUUFBUyxDQUN4QyxDQUNBLFNBQVNneEMsR0FBMEIsU0FDN0IsS0FBQWh4QyxFQUFBK1YsRUFBTSxpQkFBTixZQUFBL1YsRUFBc0IsVUFBVyxFQUc5QixPQUFBa1csRUFBQUgsRUFBTSxpQkFBTixZQUFBRyxFQUFzQixJQUFLelQsR0FBU0EsRUFBSyxTQUFTLEtBQUssSUFDaEUsOG1EQzFFQXd1QyxHQUFlbm1DLGtCQUFnQixDQUM3QixLQUFNLGNBQ04sTUFBTyxDQVdMLFFBQVMsQ0FBQyxDQUNaLEVBQ0EsTUFBTyxDQUFDLFFBQVEsRUFDaEIsTUFBTWlMLEVBQU81VyxFQUFVLENBQ1osU0FBQWc2QixFQUFRejJCLEVBQVV3OEIsRUFBVS9QLEVBQWEsQ0FDaEQsTUFBTWpuQixFQUFJLENBQUUsSUFBQXhGLEVBQUssSUFBQXc4QixFQUFLLE9BQUEvUCxDQUFPLEVBQzdCLEdBQUkrUCxFQUFJLE1BQU8sQ0FDYkEsRUFBSSxNQUFNaDNCLENBQUMsRUFDWCxNQUNGLENBQ0EsR0FBSWczQixFQUFJLFFBQVMsQ0FDZkEsRUFBSSxRQUFRaDNCLENBQUMsRUFDYixNQUNGLENBQ0kvSSxFQUFBLEtBQUssU0FBVStJLENBQUMsQ0FDdEIsQ0FDTSxNQUFBNHdCLEVBQXVCdjVCLEVBQUFBLFNBQVMsSUFBTSxDQUMxQyxJQUFJMnhDLEVBQVUsQ0FBQSxFQUVMLFFBQUF4dUMsS0FBT3FULEVBQU0sUUFDcEJtN0IsRUFBUSxLQUFLLENBRVgsR0FBR243QixFQUFNLFFBQVFyVCxDQUFHLEVBQ3BCLEtBQU1BLENBQUEsQ0FDUCxFQUVId3VDLEVBQVUxdUMsRUFBRSxPQUFPMHVDLEVBQVV6dUMsR0FDcEJBLEVBQUssT0FBU3dNLEdBQVUsWUFDaEMsRUFFRCxNQUFNa2lDLEVBQW1ELENBQUEsRUFFakQsT0FBQUQsRUFBQSxRQUFTenVDLEdBQWMsQ0FDN0IsSUFBSXErQixFQUFPcitCLEVBQUssS0FDaEIsT0FBT0EsRUFBSyxLQUNaMHVDLEVBQWNyUSxDQUFJLEVBQUlyK0IsQ0FBQSxDQUN2QixFQUNNMHVDLENBQUEsQ0FDUixFQUNNLE1BQUEsQ0FDTCxRQUFBaFksRUFDQSxnQkFBQUwsQ0FBQSxDQUVKLENBQ0YsQ0FBQywyRENyRUMsTUFBQXdHLEVBQUE1VSxtQkFJTSxXQUpOLEVBREYsT0FBQTllLFlBQUEsRUFBQUMscUJBQUEsTUFBQVosR0FBQSxFQUFBVyxFQUFBQSxVQUc2QixFQUFJLEVBQUFDLEVBQUEsbUJBQUFzb0IsV0FBQSxLQUFBQyxFQUFBLFdBQUE5b0IsRUFBQSxnQkFBQSxDQUFBckssRUFBQXlCLEtBQTNCa0osRUFBQSxVQUFBLEVBQUFDLEVBQUFBLG1CQUE2RnNvQixFQUFBQSxTQUE3RixDQUFBLElBQUF6eEIsQ0FBQSxFQUFBLENBSE56QixFQUFBLE9BQUEsSUFBQTJLLEVBQUFBLFVBQUEsRUFBQStlLEVBQUEsWUFBQTJVLEVBQUE3UyxhQUFBLENBR3FELElBQUEsRUFBUSxRQUFLLEVBQUEsRUFBQXhyQixFQUFBLENBSGxFLFFBQUFrdUIsR0FBQTdqQixFQUFBLFFBQUE1SSxFQUFBekIsRUFBQWt1QixDQUFBLENBQUEsQ0FBQSxFQUFBLEtBQUEsR0FBQSxDQUFBLFNBQUEsQ0FBQSxHQUFBcGpCLEVBQUEsbUJBQUEsR0FBQSxFQUFBLHVEQ3NCYXFsQyxFQUFrQixlQUk3Qmp1QyxHQUFBLG9CQUVBQSxHQUFBLGtCQUNELENDQU0sTUFBTWt1QyxHQUEwQiwyWEN3Q3ZDLE1BQU10N0IsRUFBUTY2QixFQU9SamhCLEVBQU9raEIsRUFFUCxDQUFFLEVBQUFycEMsR0FBTVMsS0FDUnpJLEVBQUtDLGFBQVUsTUFDZndxQyxFQUFTcmpDLE1BQUksRUFBSyxFQUNsQndlLEVBQVEsSUFBTSxDQUNsQjZrQixFQUFPLE1BQVEsRUFBQSxFQUlYOXVCLEVBQXFDNWIsRUFBQUEsU0FBUyxJQUMzQyt4QyxFQUFxQnY3QixFQUFNLGVBQWUsQ0FDbEQsRUFFS3c3QixFQUEyQzNxQyxNQUFJLENBQUEsQ0FBRSxFQUVqRDRxQyxFQUE2RGp5QyxFQUFBQSxTQUFTLElBQU0sQ0FDaEYsTUFBTXdELEVBQXlDLENBQUEsRUFDdEMsT0FBQStrQyxFQUFBM3NCLEVBQVMsTUFBUTFZLElBQTRCLENBQ2hETSxFQUFBTixHQUFLLEtBQUssRUFBSUEsRUFBQSxDQUNuQixFQUNNTSxDQUFBLENBQ1IsRUFDSyxDQUFFLE1BQUF1SixHQUFVUyxLQUVaMGtDLEVBQVFseUMsRUFBQUEsU0FBUyxJQUFNLENBQzNCLE1BQU1tVSxFQUFNLENBQ1YsTUFBT2xNLEVBQUUsK0JBQStCLEVBQ3hDLE1BQU9BLEVBQUUsK0JBQStCLEVBQ3hDLE1BQU9BLEVBQUUsK0JBQStCLEVBQ3hDLE1BQU9BLEVBQUUsK0JBQStCLEVBQ3hDLFFBQVNBLEVBQUUsaUNBQWlDLEVBQzVDLFFBQVNBLEVBQUUsaUNBQWlDLENBQUEsRUFFeEMsT0FBQThFLEVBQUFvSCxFQUFLcUMsRUFBTSxJQUFJLEVBQ2RyQyxDQUFBLENBQ1IsRUFFUSxTQUFBbzBCLEVBQVMzOUIsRUFBV3ZGLEdBQW9CLENBQy9DLEdBQUt1RixFQUdELEdBQUEsTUFBTSxRQUFRQSxDQUFJLEVBQ3BCLFVBQVcxSCxLQUFRMEgsRUFDakJ2RixHQUFTbkMsQ0FBSSxFQUNUQSxFQUFLLFVBQ0VxbEMsRUFBQXJsQyxFQUFLLFNBQVVtQyxFQUFRLE1BSXBDLFdBQVdsQyxLQUFPeUgsRUFBTSxDQUNoQixNQUFBMUgsRUFBTzBILEVBQUt6SCxDQUFHLEVBQ3JCa0MsR0FBU25DLENBQUksRUFDVEEsRUFBSyxVQUNFcWxDLEVBQUFybEMsRUFBSyxTQUFVbUMsRUFBUSxDQUVwQyxDQUVKLENBRUEsU0FBUzhzQyxFQUFzQmp2QyxFQUFzQyxDQUM1RCxNQUFBLENBQ0wsSUFBS0EsRUFBSyxJQUNWLE1BQU9BLEVBQUssTUFDWixNQUFPQSxFQUFLLE9BQVMsR0FDckIsS0FBTUEsRUFBSyxNQUFRLEdBQ25CLE9BQVFBLEVBQUssZ0JBQWtCLEdBQy9CLFdBQVlBLEVBQUssbUJBQXFCLEVBQUEsQ0FFMUMsQ0FFQSxTQUFTa3ZDLEVBQXdCOXVDLEVBQTZCLENBQzVELE1BQU1xTyxHQUE2QixDQUFBLEVBQ2pDLE9BQUExTyxFQUFBLFFBQVFLLEVBQVNKLEdBQVMsQ0FDcEIsTUFBQXNILEVBQXNCdkgsRUFBRSxLQUFLQyxFQUFNLFdBQVksU0FBVSxhQUFjLFdBQVksT0FBTyxFQUM1RkEsRUFBSyxVQUFZQSxFQUFLLFNBQVMsT0FBUyxJQUNuQ3NILEVBQUEsU0FBVzRuQyxFQUF3Qmx2QyxFQUFLLFFBQVEsR0FFakR5TyxHQUFBek8sRUFBSyxHQUFHLEVBQUlzSCxDQUFBLENBQ3JCLEVBQ01tSCxFQUNULENBRVMsU0FBQW9nQyxFQUFxQnJ3QyxFQUEwQitELEdBQWlELENBQ3ZHLE1BQU1rTSxFQUErQixDQUFBLEVBQ25DLE9BQUExTyxFQUFBLFFBQVF2QixFQUFRd0IsR0FBUyxDQUNuQixNQUFBc0gsRUFBUzJuQyxFQUFzQmp2QyxDQUFJLEVBQ3pDc0gsRUFBTyxTQUFXL0UsR0FDbEIrRSxFQUFPLE1BQVEsSUFBRy9FLElBQUEsWUFBQUEsR0FBUSxNQUFPLEVBQUUsSUFBSXZDLEVBQUssR0FBRyxHQUMvQ3lPLEVBQVEsS0FBS25ILENBQU0sRUFDZnRILEVBQUssV0FDUHNILEVBQU8sU0FBV3VuQyxFQUFxQjd1QyxFQUFLLFNBQVVzSCxDQUFNLEVBQzlELENBQ0QsRUFDTW1ILENBQ1QsQ0FFQSxTQUFTMGdDLEVBQWdCM3dDLEVBQVksQ0FDcEJzd0MsRUFBQSxNQUFRRCxFQUFxQnJ3QyxDQUFLLENBQ25ELENBR0EsZUFBZXJCLEdBQVEsQ0FDTjJ4QyxFQUFBLE1BQVFELEVBQXFCdjdCLEVBQU0sZUFBZSxFQUNqRSxNQUFNODdCLEVBQVEsRUFBSSxFQUNsQixNQUFNQyxHQUFpQixFQUN2Qm5pQixFQUFLLE9BQU8sQ0FDZCxDQUdlLGVBQUFraUIsRUFBUUUsRUFBUyxHQUFPLENBQ2hDQSxHQUNHLE1BQUFDLEVBQXFCVCxFQUFlLEtBQUssRUFFakQsTUFBTTF1QyxHQUFTTCxFQUFFLFVBQVUrdUMsRUFBZSxLQUFLLEVBR3RDLE9BQUF6SixFQUFBamxDLEdBQVNKLEdBQWMsQ0FDMUJBLElBQ0YsT0FBT0EsRUFBSyxXQUNaLE9BQU9BLEVBQUssT0FDWixPQUFPQSxFQUFLLFNBQ1osT0FBT0EsRUFBSyxNQUNkLENBQ0QsRUFFRHd2QyxFQUFPcHZDLEVBQU0sRUFDYm9uQyxFQUFPLE1BQVEsR0FDUnBuQyxFQUNULENBRWUsZUFBQWhELEVBQU9reUMsRUFBUyxHQUFPLENBQzlCLE1BQUE3Z0MsR0FBVSxNQUFNMmdDLEVBQVFFLENBQU0sRUFDL0JwaUIsRUFBQSxTQUFVLENBQUUsUUFBQXplLEVBQUEsQ0FBUyxDQUM1QixDQUNNLE1BQUFnaEMsRUFBMEIzeUMsRUFBQUEsU0FBUyxJQUNoQ3dXLEVBQU0sZUFDZCxFQUNEMlosRUFBQUEsUUFBUTJoQixHQUF5QixDQUMvQixnQkFBaUJhLEVBQ2pCLG1CQUFBVixFQUNBLGVBQUFELEVBQ0EsS0FBTUUsRUFDTixPQUFBeEgsRUFDQSxPQUFBcHFDLEVBQ0EsTUFBQUQsQ0FBQSxDQUNELEVBRUQsZUFBZXV5QyxHQUFlLENBQzVCLE1BQU10eUMsRUFBTyxFQUFLLEVBQ2xCOHZCLEVBQUssY0FBZSxFQUFLLENBQzNCLENBQ0EsZUFBZXlpQixHQUFjLENBQzNCLE1BQU14eUMsRUFBTSxFQUNaK3ZCLEVBQUssY0FBZSxFQUFLLENBQzNCLENBRUEsU0FBU3NpQixFQUFPcHZDLEVBQTZCLENBQ3RDOHNCLEVBQUEsaUJBQWtCZ2lCLEVBQXdCOXVDLENBQU0sQ0FBQyxDQUN4RCxDQUVBLE1BQU13dkMsRUFBb0J6ckMsRUFBQUEsTUFDMUIsU0FBUzByQyxHQUFrQixDQUV6QixNQUFNQyxFQUFnQixPQUFPeDhCLEVBQU0sU0FBWSxTQUFXQSxFQUFNLFFBQVUsS0FDcEV6UyxHQUFVLE9BQU95UyxFQUFNLFNBQVksU0FBV0EsRUFBTSxRQUFVLEdBQ2hFLEdBQUFzOEIsRUFBa0IsT0FBUyxLQUFNLENBQ25DLE1BQU1HLEVBQVFDLEdBQUFBLFdBQ0lKLEVBQUEsTUFBUSxJQUFJbnZDLEdBQVcsQ0FDdkMsUUFBU3N2QyxFQUNULFVBQVcsZ0JBQ1gsUUFBQWx2QyxHQUNBLGNBQUFpdkMsQ0FBQSxDQUNELENBQ0gsQ0FDQSxPQUFPRixFQUFrQixLQUMzQixDQUVBLGVBQWVMLEVBQXFCL3dDLEVBQVksQ0FDMUMsR0FBQThVLEVBQU0sVUFBWSxHQUNwQixPQUVJLE1BQUEyOEIsR0FBcUI5bEMsWUFBVTNMLENBQUssRUFFakM2bUMsRUFBQTRLLEdBQWdCandDLEdBQWMsQ0FDckMsT0FBT0EsRUFBSyxRQUFBLENBQ2IsRUFFSyxNQUFBNnZDLEVBQWtCLEVBQUEsaUJBQWlCSSxFQUFhLENBQ3hELENBRUEsZUFBZUMsR0FBd0IsQ0FDakMsR0FBQTU4QixFQUFNLFVBQVksR0FHZixPQUFBLE1BQU11OEIsSUFBa0IsZUFDakMsQ0FDQSxlQUFlUixJQUFtQixDQUMxQixNQUFBUSxFQUFBLEVBQWtCLGlCQUMxQixDQUVBLFNBQVNNLEdBQWUxaEMsRUFBYyxDQUNwQyxNQUFNcEssR0FBWSxDQUFBLEVBQ1RnaEMsRUFBQTUyQixFQUFVek8sR0FBYyxDQUMvQixNQUFNOEosRUFBUy9KLEVBQUUsS0FBS0MsRUFBTSxNQUFPLFNBQVUsWUFBWSxFQUN6RHFFLEdBQUssS0FBSyxLQUFLLFVBQVV5RixDQUFNLENBQUMsQ0FBQSxDQUNqQyxFQUNEekYsR0FBSyxLQUFLLEVBQ1YsSUFBSStyQyxFQUFPLEdBQ1gsVUFBV253QyxLQUFPb0UsR0FDUityQyxHQUFBbndDLEVBRUgsT0FBQW13QyxDQUNULENBQ0EvakMsRUFBQSxNQUNFLElBQ1NpSCxFQUFNLFFBRWQ5VSxHQUFVLENBQ1Qyd0MsRUFBZ0Izd0MsQ0FBSyxDQUN2QixDQUFBLEVBR0YsTUFBTTZ4QyxHQUFPLFNBQVksQ0FDdkJsQixFQUFnQjc3QixFQUFNLE9BQU8sRUFDdkIsTUFBQTI4QixFQUFnQixNQUFNQyxJQUM1QixHQUFJRCxFQUFlLENBQ1gsTUFBQUssR0FBWUgsR0FBZUYsQ0FBYSxFQUU5QyxHQURtQkUsR0FBZXozQixFQUFTLEtBQUssSUFDN0I0M0IsR0FHakIsT0FFRnhCLEVBQWUsTUFBUW1CLEVBQ3ZCLE1BQU12NEIsRUFBUyxTQUFBLEVBQ2YsTUFBTXRhLEVBQU8sRUFBSSxDQUNuQixDQUFBLEVBR0YsZUFBZW16QyxHQUFPQyxFQUFxRSxDQUN6RixNQUFNQSxFQUFPMUIsQ0FBYyxFQUMzQixNQUFNTSxFQUFRLENBQ2hCLENBRUtpQixLQUNRSSxFQUFBLENBQ1gsTUFBQTl0QixFQUNBLEtBQU15c0IsRUFDTixPQUFBbUIsR0FDQSxTQUFBNzNCLEVBQ0EsUUFBU28yQixDQUFBLENBQ1YsRUFFRCxTQUFTNEIsR0FBVUMsRUFBYyxDQUMvQixPQUFPQSxFQUFRLE9BQVNBLEVBQVEsT0FBU0EsRUFBUSxLQUFPM0IsRUFBTSxNQUFNLE9BQ3RFLDR5RUNwUkE0QixHQUFldm9DLGtCQUFnQixDQUM3QixLQUFNLFlBQ04sV0FBWSxDQUFFd29DLHFCQUFBQSxFQUFxQixFQUNuQyxNQUFPLENBV0wsUUFBUyxDQUNQLEtBQU0sTUFDUixFQUlBLFFBQVMsQ0FDUCxLQUFNLFFBQ04sUUFBUyxFQUNYLEVBSUEsUUFBUyxDQUNQLEtBQU0sT0FDTixRQUFTLE1BQ1gsRUFLQSxRQUFTLENBQ1AsS0FBTSxDQUFDLE9BQVEsT0FBTyxFQUN0QixRQUFTLEVBQ1gsRUFJQSxNQUFPLENBQUMsRUFLUixjQUFlLENBQ2IsS0FBTSxNQUNSLENBQ0YsRUFDQSxNQUFPLENBQUMsZ0JBQWdCLEVBQ3hCLE1BQU12OUIsRUFBWTVXLEVBQUssQ0FDUDhJLEdBQVEsRUFDdEIsTUFBTXNyQyxFQUF3QjNzQyxFQUFBQSxNQUN4QixDQUFFLEdBQUFwSCxHQUFPMkgsR0FBQUEsUUFDVCxDQUFFLE1BQUFtRixHQUFVUyxLQUNaK3JCLEVBQWtCdjVCLEVBQUFBLFNBQVMsSUFBTSxDQUNyQyxNQUFNaTBDLEVBQXFDLENBQ3pDLFFBQVMsQ0FDUCxNQUFPLElBQU0sQ0FDWEQsRUFBaUIsTUFBTSxPQUN6QixDQUNGLENBQUEsRUFHSWpuQyxFQUFBa25DLEVBQWdCejlCLEVBQU0sT0FBTyxFQVFuQyxJQUFJbTdCLEVBQXlCLENBQUEsRUFDN0IsUUFBU3VDLEtBQXFCRCxFQUM1QnRDLEVBQVEsS0FBSyxDQUNYLEdBQUdzQyxFQUFlQyxDQUFpQixFQUNuQyxLQUFNQSxDQUFBLENBQ1AsRUFFSHZDLEVBQVUxdUMsRUFBRSxPQUFPMHVDLEVBQVV6dUMsR0FDcEJBLEVBQUssT0FBU3dNLEdBQVUsWUFDaEMsRUFFRCxNQUFNa2lDLEVBQW9DLENBQUEsRUFFbEMsT0FBQUQsRUFBQSxRQUFTenVDLEdBQVMsQ0FDeEIsSUFBSXErQixFQUFPcitCLEVBQUssS0FDaEIsT0FBT0EsRUFBSyxLQUNaMHVDLEVBQWNyUSxDQUFJLEVBQUlyK0IsQ0FBQSxDQUN2QixFQUNNMHVDLENBQUEsQ0FDUixFQUNLdUMsRUFBaUI5c0MsTUFBSSxFQUFLLEVBT3pCLE1BQUEsQ0FDTCxHQUFBcEgsRUFDQSxpQkFBQSt6QyxFQUNBLGdCQUFBemEsRUFDQSxlQUFBNGEsRUFDQSxrQkFYd0IsSUFBTSxDQUMxQmwwQyxFQUFHLE9BQVMsWUFHRGswQyxFQUFBLE1BQVEsQ0FBQ0EsRUFBZSxNQUFBLENBT3ZDLENBRUosQ0FDRixDQUFDLCtEQ3BLQyxNQUFBcFUsRUFBQTVVLG1CQXlDTSxXQXpDTixFQURGLE9BQUE5ZSxZQUFBLEVBQUFDLHFCQUFBLE1BQUFaLEdBQUEsRUFBQVcsRUFBQUEsVUFHMkIsRUFBSSxFQUFBQyxFQUFBLG1CQUFBc29CLFdBQUEsS0FBQUMsRUFBQSxXQUFBOW9CLEVBQUEsZ0JBQUEsQ0FBQTdJLEVBQUFDLElBQUEsT0FBekIsT0FBQWtKLEVBQUEsVUFBQSxFQUFBQyxFQUFBQSxtQkE0Qldzb0IsRUFBQUEsU0EvQmpCLENBQUEsSUFBQXp4QixDQUFBLEVBQUEsQ0FBQUQsRUFBQSxPQU1tQixJQU5uQm1KLFlBQUEsRUFBQUMsRUFBQSxtQkFBQXNvQixXQUFBLENBQUEsSUFBQSxHQUFBLENBQUF6eEIsSUFBQSxXQUFBNEksRUFBQSxpQkFBQXRMLEVBQUFzTCxFQUFBLGdCQUFBLFlBQUF0TCxFQUFBLFFBQUEsVUFBQTRMLEVBQUEsVUFBQSxnQkFPb0N1ZixFQUFBQSx3QkFBa0I3ZixFQUFBLEdBQUEsUUFBQSxJQUFBLEVBQUErcEIsaUJBQUEsQ0FBQSxJQUFBLEVBQzVDLENBQUEvcEIsRUFBQSxHQUFBLFFBQUEsT0FBa0IsRUFBTUEsRUFBQSxlQUN4QixhQUFVQSxFQUFRLEdBQUEsUUFBQSxPQUFBLEVBQUFDLEVBQUEsQ0FBQSxJQUFBQSxFQUFBLENBQUEsRUFBQTRqQixHQUFBN2pCLEVBQUEsZUFBQTZqQixHQUNqQixvQkFBVSxPQUNYLFVBQVEsU0FBQSxNQUFBLElBRU0sUUFBQSxPQUFBLENBQ1osRUFBQSxDQUFBLENBQUE3akIsRUFBQSxHQUFBLFFBQUEsZUFBQSxFQUFBc2YsRUFBQSxRQUFBLElBQUEsQ0FFU3ByQixFQUFBQSxZQUFHOC9CLEVBQXVCN1MsRUFXakMsV0FBQSxDQUFBLFFBQUEsRUFBQSxFQUFBaHFCLEVBQUEsQ0FBQSxRQUFBNkksRUFBQSxpQkFBQSxDQUFBLEVBQUEsS0FBQSxHQUFBLENBQUEsU0FBQSxDQUFBLENBQUEsQ0FBQSwrQkFWRixFQWpCWnNmLEVBQUEsUUFBQSxJQUFBLENBQUF0ZixFQUFBLFNBQUFNLFlBQUEsRUFBQStlLGNBQUFRLEVBQUFBLHdCQUFBN2YsRUFBQSxjQUFBLElBQUEseUJBQUEsRUFBQW1oQixFQUFBQSxXQUFBLENBb0JjLElBQUksRUFDSSxRQUFNaW5CLEdBckI1QixJQUFBLG1CQXNCYyxLQUFLcG9DLEVBQUEsZUFBQSxnQkFDRzZJLEVBQWEsQ0FBQSxJQUFBNUksRUFBQSxDQUFBLEVBQUE0akIsR0FBQTdqQixFQUFBLGVBQUE2akIsR0FDcEIsS0FBQSxRQUFBLEVBQ0E3akIsRUFBZ0IsY0FBQSxDQUNoQixRQUFBQSxFQUFBLFFBQUEsUUFBQUEsRUFBQSxRQTFCZixtQkFBQUMsRUFBQSxDQUFBLElBQUFBLEVBQUEsQ0FBQSxFQUFBNGpCLEdBQUE3akIsRUFBQSxNQUFBLGlCQUFBNmpCLENBQUEsRUFBQSxDQUFBLEVBQUEsS0FBQSxHQUFBLENBQUEsT0FBQSxVQUFBLFNBQUEsQ0FBQSxHQUFBcGpCLEVBQUFBLG1CQUFBLEdBQUEsRUFBQSxDQUFBLENBQUEsS0FBQSxFQUFBLElBQUEsSUFBQUgsRUFBQSxVQUFBLEVBQUErZSxFQUFBQSxZQUFBMlUsRUFBQTdTLEVBQUFBLFdBQUEsQ0E4QnNDLElBQUEsRUFBRyxRQUFLLEVBQUEsRUFBQWhxQixFQUFBLHFCQTlCOUMsQ0FBQSxFQUFBLEtBQUEsR0FBQSxDQUFBLFNBQUEsQ0FBQSxFQUFBLEVBQUEsRUFBQSxHQUFBc0oscUJBQUEsR0FBQSxFQUFBLENBbUNZbUYsRUFBQUEsRUFBQUEsQ0FBQUEsQ0FBQUEsRUFBQUEsR0FBQUEsR0FuQ1o1RixFQUFBLFdBQUF0TCxFQUFBc0wsRUFBQSxnQkFBQSxZQUFBdEwsRUFBQSxRQUFBLFVBQUE0TCxFQUFBLFVBQUEsRUFvQzRCK2UsRUFBQUEsWUFBQVEsRUFBQUEsd0JBQUE3ZixFQUFBLGNBQUEsSUFBQSx5QkFBQSxFQUFBbWhCLGFBQUEsQ0FDckIsSUFBQSxFQUNPdFksSUFBQUEsbUJBQ1AsUUFBU2pELEVBQUFBLE9BQUFBLEVBQ1Q1RixFQUFjLGNBQUEsQ0FBQSxRQUFBQSxFQUFBLFFBeENyQixtQkFBQUMsRUFBQSxDQUFBLElBQUFBLEVBQUEsQ0FBQSxFQUFBNGpCLEdBQUE3akIsRUFBQSxNQUFBLGlCQUFBNmpCLENBQUEsRUFBQSxDQUFBLEVBQUEsS0FBQSxHQUFBLENBQUEsVUFBQSxTQUFBLENBQUEsR0FBQXBqQixFQUFBQSxtQkFBQSxHQUFBLEVBQUEsb0NDQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBLEdBTUEsU0FBUzRuQyxHQUFRck8sRUFBUXNPLEVBQWdCLENBQ3ZDLElBQUk5c0MsRUFBTyxPQUFPLEtBQUt3K0IsQ0FBTSxFQUU3QixHQUFJLE9BQU8sc0JBQXVCLENBQ2hDLElBQUl1TyxFQUFVLE9BQU8sc0JBQXNCdk8sQ0FBTSxFQUU3Q3NPLElBQ0ZDLEVBQVVBLEVBQVEsT0FBTyxTQUFVQyxFQUFLLENBQ3RDLE9BQU8sT0FBTyx5QkFBeUJ4TyxFQUFRd08sQ0FBRyxFQUFFLFVBQzVELENBQU8sR0FHSGh0QyxFQUFLLEtBQUssTUFBTUEsRUFBTStzQyxDQUFPLENBQzlCLENBRUQsT0FBTy9zQyxDQUNULENBRUEsU0FBU2l0QyxHQUFleG5DLEVBQVEsQ0FDOUIsUUFBU3JILEVBQUksRUFBR0EsRUFBSSxVQUFVLE9BQVFBLElBQUssQ0FDekMsSUFBSXU2QixFQUFTLFVBQVV2NkIsQ0FBQyxHQUFLLEtBQU8sVUFBVUEsQ0FBQyxFQUFJLEdBRS9DQSxFQUFJLEVBQ055dUMsR0FBUSxPQUFPbFUsQ0FBTSxFQUFHLEVBQUksRUFBRSxRQUFRLFNBQVUvOEIsRUFBSyxDQUNuRHN4QyxHQUFnQnpuQyxFQUFRN0osRUFBSys4QixFQUFPLzhCLENBQUcsQ0FBQyxDQUNoRCxDQUFPLEVBQ1EsT0FBTywwQkFDaEIsT0FBTyxpQkFBaUI2SixFQUFRLE9BQU8sMEJBQTBCa3pCLENBQU0sQ0FBQyxFQUV4RWtVLEdBQVEsT0FBT2xVLENBQU0sQ0FBQyxFQUFFLFFBQVEsU0FBVS84QixFQUFLLENBQzdDLE9BQU8sZUFBZTZKLEVBQVE3SixFQUFLLE9BQU8seUJBQXlCKzhCLEVBQVEvOEIsQ0FBRyxDQUFDLENBQ3ZGLENBQU8sQ0FFSixDQUVELE9BQU82SixDQUNULENBRUEsU0FBUzBuQyxHQUFRdHZDLEVBQUssQ0FDcEIsMEJBRUEsT0FBSSxPQUFPLFFBQVcsWUFBYyxPQUFPLE9BQU8sVUFBYSxTQUM3RHN2QyxHQUFVLFNBQVV0dkMsRUFBSyxDQUN2QixPQUFPLE9BQU9BLENBQ3BCLEVBRUlzdkMsR0FBVSxTQUFVdHZDLEVBQUssQ0FDdkIsT0FBT0EsR0FBTyxPQUFPLFFBQVcsWUFBY0EsRUFBSSxjQUFnQixRQUFVQSxJQUFRLE9BQU8sVUFBWSxTQUFXLE9BQU9BLENBQy9ILEVBR1NzdkMsR0FBUXR2QyxDQUFHLENBQ3BCLENBRUEsU0FBU3F2QyxHQUFnQnJ2QyxFQUFLakMsRUFBS3pCLEVBQU8sQ0FDeEMsT0FBSXlCLEtBQU9pQyxFQUNULE9BQU8sZUFBZUEsRUFBS2pDLEVBQUssQ0FDOUIsTUFBT3pCLEVBQ1AsV0FBWSxHQUNaLGFBQWMsR0FDZCxTQUFVLEVBQ2hCLENBQUssRUFFRDBELEVBQUlqQyxDQUFHLEVBQUl6QixFQUdOMEQsQ0FDVCxDQUVBLFNBQVM2NkIsSUFBVyxDQUNsQixPQUFBQSxHQUFXLE9BQU8sUUFBVSxTQUFVanpCLEVBQVEsQ0FDNUMsUUFBU3JILEVBQUksRUFBR0EsRUFBSSxVQUFVLE9BQVFBLElBQUssQ0FDekMsSUFBSXU2QixFQUFTLFVBQVV2NkIsQ0FBQyxFQUV4QixRQUFTeEMsS0FBTys4QixFQUNWLE9BQU8sVUFBVSxlQUFlLEtBQUtBLEVBQVEvOEIsQ0FBRyxJQUNsRDZKLEVBQU83SixDQUFHLEVBQUkrOEIsRUFBTy84QixDQUFHLEVBRzdCLENBRUQsT0FBTzZKLENBQ1gsRUFFU2l6QixHQUFTLE1BQU0sS0FBTSxTQUFTLENBQ3ZDLENBRUEsU0FBUzBVLEdBQThCelUsRUFBUTBVLEVBQVUsQ0FDdkQsR0FBSTFVLEdBQVUsS0FBTSxNQUFPLEdBQzNCLElBQUlsekIsRUFBUyxDQUFBLEVBQ1Q2bkMsRUFBYSxPQUFPLEtBQUszVSxDQUFNLEVBQy9CLzhCLEVBQUssRUFFVCxJQUFLLEVBQUksRUFBRyxFQUFJMHhDLEVBQVcsT0FBUSxJQUNqQzF4QyxFQUFNMHhDLEVBQVcsQ0FBQyxFQUNkLEVBQUFELEVBQVMsUUFBUXp4QyxDQUFHLEdBQUssS0FDN0I2SixFQUFPN0osQ0FBRyxFQUFJKzhCLEVBQU8vOEIsQ0FBRyxHQUcxQixPQUFPNkosQ0FDVCxDQUVBLFNBQVM4bkMsR0FBeUI1VSxFQUFRMFUsRUFBVSxDQUNsRCxHQUFJMVUsR0FBVSxLQUFNLE1BQU8sR0FFM0IsSUFBSWx6QixFQUFTMm5DLEdBQThCelUsRUFBUTBVLENBQVEsRUFFdkR6eEMsRUFBS3dDLEVBRVQsR0FBSSxPQUFPLHNCQUF1QixDQUNoQyxJQUFJb3ZDLEVBQW1CLE9BQU8sc0JBQXNCN1UsQ0FBTSxFQUUxRCxJQUFLdjZCLEVBQUksRUFBR0EsRUFBSW92QyxFQUFpQixPQUFRcHZDLElBQ3ZDeEMsRUFBTTR4QyxFQUFpQnB2QyxDQUFDLEVBQ3BCLEVBQUFpdkMsRUFBUyxRQUFRenhDLENBQUcsR0FBSyxJQUN4QixPQUFPLFVBQVUscUJBQXFCLEtBQUsrOEIsRUFBUS84QixDQUFHLElBQzNENkosRUFBTzdKLENBQUcsRUFBSSs4QixFQUFPLzhCLENBQUcsRUFFM0IsQ0FFRCxPQUFPNkosQ0FDVCxDQW1DQSxJQUFJZ29DLEdBQVUsU0FFZCxTQUFTQyxHQUFVL08sRUFBUyxDQUMxQixHQUFJLE9BQU8sT0FBVyxLQUFlLE9BQU8sVUFDMUMsTUFBTyxDQUFDLENBQWUsVUFBVSxVQUFVLE1BQU1BLENBQU8sQ0FFNUQsQ0FFQSxJQUFJZ1AsR0FBYUQsR0FBVSx1REFBdUQsRUFDOUVFLEdBQU9GLEdBQVUsT0FBTyxFQUN4QkcsR0FBVUgsR0FBVSxVQUFVLEVBQzlCSSxHQUFTSixHQUFVLFNBQVMsR0FBSyxDQUFDQSxHQUFVLFNBQVMsR0FBSyxDQUFDQSxHQUFVLFVBQVUsRUFDL0VLLEdBQU1MLEdBQVUsaUJBQWlCLEVBQ2pDTSxHQUFtQk4sR0FBVSxTQUFTLEdBQUtBLEdBQVUsVUFBVSxFQUUvRE8sR0FBYyxDQUNoQixRQUFTLEdBQ1QsUUFBUyxFQUNYLEVBRUEsU0FBU3hsQixHQUFHM2xCLEVBQUl3bEIsRUFBT2xRLEVBQUksQ0FDekJ0VixFQUFHLGlCQUFpQndsQixFQUFPbFEsRUFBSSxDQUFDdTFCLElBQWNNLEVBQVcsQ0FDM0QsQ0FFQSxTQUFTQyxHQUFJcHJDLEVBQUl3bEIsRUFBT2xRLEVBQUksQ0FDMUJ0VixFQUFHLG9CQUFvQndsQixFQUFPbFEsRUFBSSxDQUFDdTFCLElBQWNNLEVBQVcsQ0FDOUQsQ0FFQSxTQUFTRSxHQUVUcnJDLEVBRUFzckMsRUFBVSxDQUNSLEdBQUtBLEVBR0wsSUFGQUEsRUFBUyxDQUFDLElBQU0sTUFBUUEsRUFBV0EsRUFBUyxVQUFVLENBQUMsR0FFbkR0ckMsRUFDRixHQUFJLENBQ0YsR0FBSUEsRUFBRyxRQUNMLE9BQU9BLEVBQUcsUUFBUXNyQyxDQUFRLEVBQ3JCLEdBQUl0ckMsRUFBRyxrQkFDWixPQUFPQSxFQUFHLGtCQUFrQnNyQyxDQUFRLEVBQy9CLEdBQUl0ckMsRUFBRyxzQkFDWixPQUFPQSxFQUFHLHNCQUFzQnNyQyxDQUFRLENBRTNDLE1BQVcsQ0FDVixNQUFPLEVBQ1IsQ0FHSCxNQUFPLEdBQ1QsQ0FFQSxTQUFTQyxHQUFnQnZyQyxFQUFJLENBQzNCLE9BQU9BLEVBQUcsTUFBUUEsSUFBTyxVQUFZQSxFQUFHLEtBQUssU0FBV0EsRUFBRyxLQUFPQSxFQUFHLFVBQ3ZFLENBRUEsU0FBU3dyQyxHQUVUeHJDLEVBRUFzckMsRUFFQS8xQyxFQUFLazJDLEVBQVksQ0FDZixHQUFJenJDLEVBQUksQ0FDTnpLLEVBQU1BLEdBQU8sU0FFYixFQUFHLENBQ0QsR0FBSSsxQyxHQUFZLE9BQVNBLEVBQVMsQ0FBQyxJQUFNLElBQU10ckMsRUFBRyxhQUFlekssR0FBTzgxQyxHQUFRcnJDLEVBQUlzckMsQ0FBUSxFQUFJRCxHQUFRcnJDLEVBQUlzckMsQ0FBUSxJQUFNRyxHQUFjenJDLElBQU96SyxFQUM3SSxPQUFPeUssRUFHVCxHQUFJQSxJQUFPekssRUFBSyxLQUV0QixPQUFheUssRUFBS3VyQyxHQUFnQnZyQyxDQUFFLEVBQ2pDLENBRUQsT0FBTyxJQUNULENBRUEsSUFBSTByQyxHQUFVLE9BRWQsU0FBU0MsR0FBWTNyQyxFQUFJdEssRUFBTWsyQyxFQUFPLENBQ3BDLEdBQUk1ckMsR0FBTXRLLEVBQ1IsR0FBSXNLLEVBQUcsVUFDTEEsRUFBRyxVQUFVNHJDLEVBQVEsTUFBUSxRQUFRLEVBQUVsMkMsQ0FBSSxNQUN0QyxDQUNMLElBQUkrc0IsR0FBYSxJQUFNemlCLEVBQUcsVUFBWSxLQUFLLFFBQVEwckMsR0FBUyxHQUFHLEVBQUUsUUFBUSxJQUFNaDJDLEVBQU8sSUFBSyxHQUFHLEVBQzlGc0ssRUFBRyxXQUFheWlCLEdBQWFtcEIsRUFBUSxJQUFNbDJDLEVBQU8sS0FBSyxRQUFRZzJDLEdBQVMsR0FBRyxDQUM1RSxDQUVMLENBRUEsU0FBU0csR0FBSTdyQyxFQUFJZ1MsRUFBTTlWLEVBQUssQ0FDMUIsSUFBSTR2QyxFQUFROXJDLEdBQU1BLEVBQUcsTUFFckIsR0FBSThyQyxFQUFPLENBQ1QsR0FBSTV2QyxJQUFRLE9BQ1YsT0FBSSxTQUFTLGFBQWUsU0FBUyxZQUFZLGlCQUMvQ0EsRUFBTSxTQUFTLFlBQVksaUJBQWlCOEQsRUFBSSxFQUFFLEVBQ3pDQSxFQUFHLGVBQ1o5RCxFQUFNOEQsRUFBRyxjQUdKZ1MsSUFBUyxPQUFTOVYsRUFBTUEsRUFBSThWLENBQUksRUFFbkMsRUFBRUEsS0FBUTg1QixJQUFVOTVCLEVBQUssUUFBUSxRQUFRLElBQU0sS0FDakRBLEVBQU8sV0FBYUEsR0FHdEI4NUIsRUFBTTk1QixDQUFJLEVBQUk5VixHQUFPLE9BQU9BLEdBQVEsU0FBVyxHQUFLLEtBRXZELENBQ0gsQ0FFQSxTQUFTNnZDLEdBQU8vckMsRUFBSWdzQyxFQUFVLENBQzVCLElBQUlDLEVBQW9CLEdBRXhCLEdBQUksT0FBT2pzQyxHQUFPLFNBQ2hCaXNDLEVBQW9CanNDLE1BRXBCLEdBQUcsQ0FDRCxJQUFJdkgsRUFBWW96QyxHQUFJN3JDLEVBQUksV0FBVyxFQUUvQnZILEdBQWFBLElBQWMsU0FDN0J3ekMsRUFBb0J4ekMsRUFBWSxJQUFNd3pDLEVBSXpDLE9BQVEsQ0FBQ0QsSUFBYWhzQyxFQUFLQSxFQUFHLGFBR2pDLElBQUlrc0MsRUFBVyxPQUFPLFdBQWEsT0FBTyxpQkFBbUIsT0FBTyxXQUFhLE9BQU8sWUFHeEYsT0FBT0EsR0FBWSxJQUFJQSxFQUFTRCxDQUFpQixDQUNuRCxDQUVBLFNBQVNFLEdBQUs1MkMsRUFBSzYyQyxFQUFTQyxFQUFVLENBQ3BDLEdBQUk5MkMsRUFBSyxDQUNQLElBQUltVCxFQUFPblQsRUFBSSxxQkFBcUI2MkMsQ0FBTyxFQUN2Qzl3QyxFQUFJLEVBQ0pvRCxFQUFJZ0ssRUFBSyxPQUViLEdBQUkyakMsRUFDRixLQUFPL3dDLEVBQUlvRCxFQUFHcEQsSUFDWit3QyxFQUFTM2pDLEVBQUtwTixDQUFDLEVBQUdBLENBQUMsRUFJdkIsT0FBT29OLENBQ1IsQ0FFRCxNQUFPLEVBQ1QsQ0FFQSxTQUFTNGpDLElBQTRCLENBQ25DLElBQUlDLEVBQW1CLFNBQVMsaUJBRWhDLE9BQUlBLEdBR0ssU0FBUyxlQUVwQixDQVlBLFNBQVNDLEdBQVF4c0MsRUFBSXlzQyxFQUEyQkMsRUFBMkJDLEVBQVd2aEMsRUFBVyxDQUMvRixHQUFJLEdBQUNwTCxFQUFHLHVCQUF5QkEsSUFBTyxRQUN4QyxLQUFJNHNDLEVBQVFoSixFQUFLaUosRUFBTUMsRUFBUUMsRUFBT0MsRUFBUUMsRUFtQjlDLEdBakJJanRDLElBQU8sUUFBVUEsRUFBRyxZQUFjQSxJQUFPc3NDLE1BQzNDTSxFQUFTNXNDLEVBQUcsd0JBQ1o0akMsRUFBTWdKLEVBQU8sSUFDYkMsRUFBT0QsRUFBTyxLQUNkRSxFQUFTRixFQUFPLE9BQ2hCRyxFQUFRSCxFQUFPLE1BQ2ZJLEVBQVNKLEVBQU8sT0FDaEJLLEVBQVFMLEVBQU8sUUFFZmhKLEVBQU0sRUFDTmlKLEVBQU8sRUFDUEMsRUFBUyxPQUFPLFlBQ2hCQyxFQUFRLE9BQU8sV0FDZkMsRUFBUyxPQUFPLFlBQ2hCQyxFQUFRLE9BQU8sYUFHWlIsR0FBNkJDLElBQThCMXNDLElBQU8sU0FFckVvTCxFQUFZQSxHQUFhcEwsRUFBRyxXQUd4QixDQUFDNnFDLElBQ0gsRUFDRSxJQUFJei9CLEdBQWFBLEVBQVUsd0JBQTBCeWdDLEdBQUl6Z0MsRUFBVyxXQUFXLElBQU0sUUFBVXNoQyxHQUE2QmIsR0FBSXpnQyxFQUFXLFVBQVUsSUFBTSxVQUFXLENBQ3BLLElBQUk4aEMsRUFBZ0I5aEMsRUFBVSx3QkFFOUJ3NEIsR0FBT3NKLEVBQWMsSUFBTSxTQUFTckIsR0FBSXpnQyxFQUFXLGtCQUFrQixDQUFDLEVBQ3RFeWhDLEdBQVFLLEVBQWMsS0FBTyxTQUFTckIsR0FBSXpnQyxFQUFXLG1CQUFtQixDQUFDLEVBQ3pFMGhDLEVBQVNsSixFQUFNZ0osRUFBTyxPQUN0QkcsRUFBUUYsRUFBT0QsRUFBTyxNQUN0QixLQUNELE9BR014aEMsRUFBWUEsRUFBVSxZQUluQyxHQUFJdWhDLEdBQWEzc0MsSUFBTyxPQUFRLENBRTlCLElBQUltdEMsRUFBV3BCLEdBQU8zZ0MsR0FBYXBMLENBQUUsRUFDakNvdEMsRUFBU0QsR0FBWUEsRUFBUyxFQUM5QkUsRUFBU0YsR0FBWUEsRUFBUyxFQUU5QkEsSUFDRnZKLEdBQU95SixFQUNQUixHQUFRTyxFQUNSSCxHQUFTRyxFQUNUSixHQUFVSyxFQUNWUCxFQUFTbEosRUFBTW9KLEVBQ2ZELEVBQVFGLEVBQU9JLEVBRWxCLENBRUQsTUFBTyxDQUNMLElBQUtySixFQUNMLEtBQU1pSixFQUNOLE9BQVFDLEVBQ1IsTUFBT0MsRUFDUCxNQUFPRSxFQUNQLE9BQVFELENBQ1osRUFDQSxDQVVBLFNBQVNNLEdBQWV0dEMsRUFBSXV0QyxFQUFRQyxFQUFZLENBSzlDLFFBSklweUMsRUFBU3F5QyxHQUEyQnp0QyxFQUFJLEVBQUksRUFDNUMwdEMsRUFBWWxCLEdBQVF4c0MsQ0FBRSxFQUFFdXRDLENBQU0sRUFHM0JueUMsR0FBUSxDQUNiLElBQUl1eUMsRUFBZ0JuQixHQUFRcHhDLENBQU0sRUFBRW95QyxDQUFVLEVBQzFDdmMsRUFBVSxPQVFkLEdBTkl1YyxJQUFlLE9BQVNBLElBQWUsT0FDekN2YyxFQUFVeWMsR0FBYUMsRUFFdkIxYyxFQUFVeWMsR0FBYUMsRUFHckIsQ0FBQzFjLEVBQVMsT0FBTzcxQixFQUNyQixHQUFJQSxJQUFXa3hDLEdBQXlCLEVBQUksTUFDNUNseEMsRUFBU3F5QyxHQUEyQnJ5QyxFQUFRLEVBQUssQ0FDbEQsQ0FFRCxNQUFPLEVBQ1QsQ0FXQSxTQUFTd3lDLEdBQVM1dEMsRUFBSTZ0QyxFQUFVMTFDLEVBQVMyMUMsRUFBZSxDQUt0RCxRQUpJQyxFQUFlLEVBQ2YsRUFBSSxFQUNKeHlDLEVBQVd5RSxFQUFHLFNBRVgsRUFBSXpFLEVBQVMsUUFBUSxDQUMxQixHQUFJQSxFQUFTLENBQUMsRUFBRSxNQUFNLFVBQVksUUFBVUEsRUFBUyxDQUFDLElBQU15eUMsR0FBUyxRQUFVRixHQUFpQnZ5QyxFQUFTLENBQUMsSUFBTXl5QyxHQUFTLFVBQVl4QyxHQUFRandDLEVBQVMsQ0FBQyxFQUFHcEQsRUFBUSxVQUFXNkgsRUFBSSxFQUFLLEVBQUcsQ0FDdkwsR0FBSSt0QyxJQUFpQkYsRUFDbkIsT0FBT3R5QyxFQUFTLENBQUMsRUFHbkJ3eUMsR0FDRCxDQUVELEdBQ0QsQ0FFRCxPQUFPLElBQ1QsQ0FTQSxTQUFTRSxHQUFVanVDLEVBQUlzckMsRUFBVSxDQUcvQixRQUZJNEMsRUFBT2x1QyxFQUFHLGlCQUVQa3VDLElBQVNBLElBQVNGLEdBQVMsT0FBU25DLEdBQUlxQyxFQUFNLFNBQVMsSUFBTSxRQUFVNUMsR0FBWSxDQUFDRCxHQUFRNkMsRUFBTTVDLENBQVEsSUFDL0c0QyxFQUFPQSxFQUFLLHVCQUdkLE9BQU9BLEdBQVEsSUFDakIsQ0FVQSxTQUFTcHdDLEdBQU1rQyxFQUFJc3JDLEVBQVUsQ0FDM0IsSUFBSXh0QyxFQUFRLEVBRVosR0FBSSxDQUFDa0MsR0FBTSxDQUFDQSxFQUFHLFdBQ2IsTUFBTyxHQUtULEtBQU9BLEVBQUtBLEVBQUcsd0JBQ1RBLEVBQUcsU0FBUyxZQUFXLElBQU8sWUFBY0EsSUFBT2d1QyxHQUFTLFFBQVUsQ0FBQzFDLEdBQVlELEdBQVFyckMsRUFBSXNyQyxDQUFRLElBQ3pHeHRDLElBSUosT0FBT0EsQ0FDVCxDQVNBLFNBQVNxd0MsR0FBd0JudUMsRUFBSSxDQUNuQyxJQUFJb3VDLEVBQWEsRUFDYkMsRUFBWSxFQUNaQyxFQUFjaEMsR0FBeUIsRUFFM0MsR0FBSXRzQyxFQUNGLEVBQUcsQ0FDRCxJQUFJbXRDLEVBQVdwQixHQUFPL3JDLENBQUUsRUFDcEJvdEMsRUFBU0QsRUFBUyxFQUNsQkUsRUFBU0YsRUFBUyxFQUN0QmlCLEdBQWNwdUMsRUFBRyxXQUFhb3RDLEVBQzlCaUIsR0FBYXJ1QyxFQUFHLFVBQVlxdEMsQ0FDN0IsT0FBUXJ0QyxJQUFPc3VDLElBQWdCdHVDLEVBQUtBLEVBQUcsYUFHMUMsTUFBTyxDQUFDb3VDLEVBQVlDLENBQVMsQ0FDL0IsQ0FTQSxTQUFTRSxHQUFjaG1DLEVBQUt4TixFQUFLLENBQy9CLFFBQVNPLEtBQUtpTixFQUNaLEdBQUtBLEVBQUksZUFBZWpOLENBQUMsR0FFekIsUUFBU3hDLEtBQU9pQyxFQUNkLEdBQUlBLEVBQUksZUFBZWpDLENBQUcsR0FBS2lDLEVBQUlqQyxDQUFHLElBQU15UCxFQUFJak4sQ0FBQyxFQUFFeEMsQ0FBRyxFQUFHLE9BQU8sT0FBT3dDLENBQUMsRUFJNUUsTUFBTyxFQUNULENBRUEsU0FBU215QyxHQUEyQnp0QyxFQUFJd3VDLEVBQWEsQ0FFbkQsR0FBSSxDQUFDeHVDLEdBQU0sQ0FBQ0EsRUFBRyxzQkFBdUIsT0FBT3NzQyxHQUF5QixFQUN0RSxJQUFJbUMsRUFBT3p1QyxFQUNQMHVDLEVBQVUsR0FFZCxFQUVFLElBQUlELEVBQUssWUFBY0EsRUFBSyxhQUFlQSxFQUFLLGFBQWVBLEVBQUssYUFBYyxDQUNoRixJQUFJRSxFQUFVOUMsR0FBSTRDLENBQUksRUFFdEIsR0FBSUEsRUFBSyxZQUFjQSxFQUFLLGNBQWdCRSxFQUFRLFdBQWEsUUFBVUEsRUFBUSxXQUFhLFdBQWFGLEVBQUssYUFBZUEsRUFBSyxlQUFpQkUsRUFBUSxXQUFhLFFBQVVBLEVBQVEsV0FBYSxVQUFXLENBQ3BOLEdBQUksQ0FBQ0YsRUFBSyx1QkFBeUJBLElBQVMsU0FBUyxLQUFNLE9BQU9uQyxLQUNsRSxHQUFJb0MsR0FBV0YsRUFBYSxPQUFPQyxFQUNuQ0MsRUFBVSxFQUNYLENBQ0YsT0FHTUQsRUFBT0EsRUFBSyxZQUVyQixPQUFPbkMsR0FBeUIsQ0FDbEMsQ0FFQSxTQUFTc0MsR0FBT0MsRUFBS0MsRUFBSyxDQUN4QixHQUFJRCxHQUFPQyxFQUNULFFBQVNoMkMsS0FBT2cyQyxFQUNWQSxFQUFJLGVBQWVoMkMsQ0FBRyxJQUN4QisxQyxFQUFJLzFDLENBQUcsRUFBSWcyQyxFQUFJaDJDLENBQUcsR0FLeEIsT0FBTysxQyxDQUNULENBRUEsU0FBU0UsR0FBWUMsRUFBT0MsRUFBTyxDQUNqQyxPQUFPLEtBQUssTUFBTUQsRUFBTSxHQUFHLElBQU0sS0FBSyxNQUFNQyxFQUFNLEdBQUcsR0FBSyxLQUFLLE1BQU1ELEVBQU0sSUFBSSxJQUFNLEtBQUssTUFBTUMsRUFBTSxJQUFJLEdBQUssS0FBSyxNQUFNRCxFQUFNLE1BQU0sSUFBTSxLQUFLLE1BQU1DLEVBQU0sTUFBTSxHQUFLLEtBQUssTUFBTUQsRUFBTSxLQUFLLElBQU0sS0FBSyxNQUFNQyxFQUFNLEtBQUssQ0FDNU4sQ0FFQSxJQUFJQyxHQUVKLFNBQVNDLEdBQVNuMEMsRUFBVW8wQyxFQUFJLENBQzlCLE9BQU8sVUFBWSxDQUNqQixHQUFJLENBQUNGLEdBQWtCLENBQ3JCLElBQUk1NEMsRUFBTyxVQUNQNGhDLEVBQVEsS0FFUjVoQyxFQUFLLFNBQVcsRUFDbEIwRSxFQUFTLEtBQUtrOUIsRUFBTzVoQyxFQUFLLENBQUMsQ0FBQyxFQUU1QjBFLEVBQVMsTUFBTWs5QixFQUFPNWhDLENBQUksRUFHNUI0NEMsR0FBbUIsV0FBVyxVQUFZLENBQ3hDQSxHQUFtQixNQUNwQixFQUFFRSxDQUFFLENBQ04sQ0FDTCxDQUNBLENBRUEsU0FBU0MsSUFBaUIsQ0FDeEIsYUFBYUgsRUFBZ0IsRUFDN0JBLEdBQW1CLE1BQ3JCLENBRUEsU0FBU0ksR0FBU3R2QyxFQUFJcTNCLEVBQUdrWSxFQUFHLENBQzFCdnZDLEVBQUcsWUFBY3EzQixFQUNqQnIzQixFQUFHLFdBQWF1dkMsQ0FDbEIsQ0FFQSxTQUFTNS9CLEdBQU0zUCxFQUFJLENBQ2pCLElBQUl3dkMsRUFBVSxPQUFPLFFBQ2pCQyxFQUFJLE9BQU8sUUFBVSxPQUFPLE1BRWhDLE9BQUlELEdBQVdBLEVBQVEsSUFDZEEsRUFBUSxJQUFJeHZDLENBQUUsRUFBRSxVQUFVLEVBQUksRUFDNUJ5dkMsRUFDRkEsRUFBRXp2QyxDQUFFLEVBQUUsTUFBTSxFQUFJLEVBQUUsQ0FBQyxFQUVuQkEsRUFBRyxVQUFVLEVBQUksQ0FFNUIsQ0FrQkEsSUFBSTB2QyxHQUFVLFdBQWEsSUFBSSxLQUFNLEVBQUMsUUFBTyxFQUU3QyxTQUFTQyxJQUF3QixDQUMvQixJQUFJQyxFQUFrQixDQUFFLEVBQ3BCQyxFQUNKLE1BQU8sQ0FDTCxzQkFBdUIsVUFBaUMsQ0FFdEQsR0FEQUQsRUFBa0IsQ0FBQSxFQUNkLEVBQUMsS0FBSyxRQUFRLFVBQ2xCLEtBQUlyMEMsRUFBVyxDQUFBLEVBQUcsTUFBTSxLQUFLLEtBQUssR0FBRyxRQUFRLEVBQzdDQSxFQUFTLFFBQVEsU0FBVW9rQyxFQUFPLENBQ2hDLEdBQUksRUFBQWtNLEdBQUlsTSxFQUFPLFNBQVMsSUFBTSxRQUFVQSxJQUFVcU8sR0FBUyxPQUMzRCxDQUFBNEIsRUFBZ0IsS0FBSyxDQUNuQixPQUFRalEsRUFDUixLQUFNNk0sR0FBUTdNLENBQUssQ0FDN0IsQ0FBUyxFQUVELElBQUltUSxFQUFXM0YsR0FBZSxDQUFBLEVBQUl5RixFQUFnQkEsRUFBZ0IsT0FBUyxDQUFDLEVBQUUsSUFBSSxFQUdsRixHQUFJalEsRUFBTSxzQkFBdUIsQ0FDL0IsSUFBSW9RLEVBQWNoRSxHQUFPcE0sRUFBTyxFQUFJLEVBRWhDb1EsSUFDRkQsRUFBUyxLQUFPQyxFQUFZLEVBQzVCRCxFQUFTLE1BQVFDLEVBQVksRUFFaEMsQ0FFRHBRLEVBQU0sU0FBV21RLEVBQ3pCLENBQU8sRUFDRixFQUNELGtCQUFtQixTQUEyQmxFLEVBQU8sQ0FDbkRnRSxFQUFnQixLQUFLaEUsQ0FBSyxDQUMzQixFQUNELHFCQUFzQixTQUE4QmpwQyxFQUFRLENBQzFEaXRDLEVBQWdCLE9BQU9yQixHQUFjcUIsRUFBaUIsQ0FDcEQsT0FBUWp0QyxDQUNoQixDQUFPLEVBQUcsQ0FBQyxDQUNOLEVBQ0QsV0FBWSxTQUFvQjNILEVBQVUsQ0FDeEMsSUFBSWs5QixFQUFRLEtBRVosR0FBSSxDQUFDLEtBQUssUUFBUSxVQUFXLENBQzNCLGFBQWEyWCxDQUFtQixFQUM1QixPQUFPNzBDLEdBQWEsWUFBWUEsSUFDcEMsTUFDRCxDQUVELElBQUlnMUMsRUFBWSxHQUNaQyxFQUFnQixFQUNwQkwsRUFBZ0IsUUFBUSxTQUFVaEUsRUFBTyxDQUN2QyxJQUFJc0UsRUFBTyxFQUNQdnRDLEVBQVNpcEMsRUFBTSxPQUNma0UsRUFBV250QyxFQUFPLFNBQ2xCd3RDLEVBQVMzRCxHQUFRN3BDLENBQU0sRUFDdkJ5dEMsRUFBZXp0QyxFQUFPLGFBQ3RCMHRDLEVBQWExdEMsRUFBTyxXQUNwQjJ0QyxFQUFnQjFFLEVBQU0sS0FDdEIyRSxFQUFleEUsR0FBT3BwQyxFQUFRLEVBQUksRUFFbEM0dEMsSUFFRkosRUFBTyxLQUFPSSxFQUFhLEVBQzNCSixFQUFPLE1BQVFJLEVBQWEsR0FHOUI1dEMsRUFBTyxPQUFTd3RDLEVBRVp4dEMsRUFBTyx1QkFFTG9zQyxHQUFZcUIsRUFBY0QsQ0FBTSxHQUFLLENBQUNwQixHQUFZZSxFQUFVSyxDQUFNLElBQ3JFRyxFQUFjLElBQU1ILEVBQU8sTUFBUUcsRUFBYyxLQUFPSCxFQUFPLFNBQVdMLEVBQVMsSUFBTUssRUFBTyxNQUFRTCxFQUFTLEtBQU9LLEVBQU8sUUFFOUhELEVBQU9NLEdBQWtCRixFQUFlRixFQUFjQyxFQUFZblksRUFBTSxPQUFPLEdBSzlFNlcsR0FBWW9CLEVBQVFMLENBQVEsSUFDL0JudEMsRUFBTyxhQUFlbXRDLEVBQ3RCbnRDLEVBQU8sV0FBYXd0QyxFQUVmRCxJQUNIQSxFQUFPaFksRUFBTSxRQUFRLFdBR3ZCQSxFQUFNLFFBQVF2MUIsRUFBUTJ0QyxFQUFlSCxFQUFRRCxDQUFJLEdBRy9DQSxJQUNGRixFQUFZLEdBQ1pDLEVBQWdCLEtBQUssSUFBSUEsRUFBZUMsQ0FBSSxFQUM1QyxhQUFhdnRDLEVBQU8sbUJBQW1CLEVBQ3ZDQSxFQUFPLG9CQUFzQixXQUFXLFVBQVksQ0FDbERBLEVBQU8sY0FBZ0IsRUFDdkJBLEVBQU8sYUFBZSxLQUN0QkEsRUFBTyxTQUFXLEtBQ2xCQSxFQUFPLFdBQWEsS0FDcEJBLEVBQU8sc0JBQXdCLElBQ2hDLEVBQUV1dEMsQ0FBSSxFQUNQdnRDLEVBQU8sc0JBQXdCdXRDLEVBRXpDLENBQU8sRUFDRCxhQUFhTCxDQUFtQixFQUUzQkcsRUFHSEgsRUFBc0IsV0FBVyxVQUFZLENBQ3ZDLE9BQU83MEMsR0FBYSxZQUFZQSxHQUNyQyxFQUFFaTFDLENBQWEsRUFKWixPQUFPajFDLEdBQWEsWUFBWUEsSUFPdEM0MEMsRUFBa0IsQ0FBQSxDQUNuQixFQUNELFFBQVMsU0FBaUJqdEMsRUFBUTh0QyxFQUFhTixFQUFRTyxFQUFVLENBQy9ELEdBQUlBLEVBQVUsQ0FDWjdFLEdBQUlscEMsRUFBUSxhQUFjLEVBQUUsRUFDNUJrcEMsR0FBSWxwQyxFQUFRLFlBQWEsRUFBRSxFQUMzQixJQUFJd3FDLEVBQVdwQixHQUFPLEtBQUssRUFBRSxFQUN6QnFCLEVBQVNELEdBQVlBLEVBQVMsRUFDOUJFLEVBQVNGLEdBQVlBLEVBQVMsRUFDOUJ3RCxHQUFjRixFQUFZLEtBQU9OLEVBQU8sT0FBUy9DLEdBQVUsR0FDM0R3RCxHQUFjSCxFQUFZLElBQU1OLEVBQU8sTUFBUTlDLEdBQVUsR0FDN0QxcUMsRUFBTyxXQUFhLENBQUMsQ0FBQ2d1QyxFQUN0Qmh1QyxFQUFPLFdBQWEsQ0FBQyxDQUFDaXVDLEVBQ3RCL0UsR0FBSWxwQyxFQUFRLFlBQWEsZUFBaUJndUMsRUFBYSxNQUFRQyxFQUFhLE9BQU8sRUFDbkYsS0FBSyxnQkFBa0JDLEdBQVFsdUMsQ0FBTSxFQUVyQ2twQyxHQUFJbHBDLEVBQVEsYUFBYyxhQUFlK3RDLEVBQVcsTUFBUSxLQUFLLFFBQVEsT0FBUyxJQUFNLEtBQUssUUFBUSxPQUFTLEdBQUcsRUFDakg3RSxHQUFJbHBDLEVBQVEsWUFBYSxvQkFBb0IsRUFDN0MsT0FBT0EsRUFBTyxVQUFhLFVBQVksYUFBYUEsRUFBTyxRQUFRLEVBQ25FQSxFQUFPLFNBQVcsV0FBVyxVQUFZLENBQ3ZDa3BDLEdBQUlscEMsRUFBUSxhQUFjLEVBQUUsRUFDNUJrcEMsR0FBSWxwQyxFQUFRLFlBQWEsRUFBRSxFQUMzQkEsRUFBTyxTQUFXLEdBQ2xCQSxFQUFPLFdBQWEsR0FDcEJBLEVBQU8sV0FBYSxFQUNyQixFQUFFK3RDLENBQVEsQ0FDWixDQUNGLENBQ0wsQ0FDQSxDQUVBLFNBQVNHLEdBQVFsdUMsRUFBUSxDQUN2QixPQUFPQSxFQUFPLFdBQ2hCLENBRUEsU0FBUzZ0QyxHQUFrQkYsRUFBZVIsRUFBVUssRUFBUWg0QyxFQUFTLENBQ25FLE9BQU8sS0FBSyxLQUFLLEtBQUssSUFBSTIzQyxFQUFTLElBQU1RLEVBQWMsSUFBSyxDQUFDLEVBQUksS0FBSyxJQUFJUixFQUFTLEtBQU9RLEVBQWMsS0FBTSxDQUFDLENBQUMsRUFBSSxLQUFLLEtBQUssS0FBSyxJQUFJUixFQUFTLElBQU1LLEVBQU8sSUFBSyxDQUFDLEVBQUksS0FBSyxJQUFJTCxFQUFTLEtBQU9LLEVBQU8sS0FBTSxDQUFDLENBQUMsRUFBSWg0QyxFQUFRLFNBQzdOLENBRUEsSUFBSXFhLEdBQVUsQ0FBQSxFQUNWcytCLEdBQVcsQ0FDYixvQkFBcUIsRUFDdkIsRUFDSUMsR0FBZ0IsQ0FDbEIsTUFBTyxTQUFldnJDLEVBQVEsQ0FFNUIsUUFBU3NPLEtBQVVnOUIsR0FDYkEsR0FBUyxlQUFlaDlCLENBQU0sR0FBSyxFQUFFQSxLQUFVdE8sS0FDakRBLEVBQU9zTyxDQUFNLEVBQUlnOUIsR0FBU2g5QixDQUFNLEdBSXBDdEIsR0FBUSxRQUFRLFNBQVVuWSxFQUFHLENBQzNCLEdBQUlBLEVBQUUsYUFBZW1MLEVBQU8sV0FDMUIsS0FBTSxpQ0FBaUMsT0FBT0EsRUFBTyxXQUFZLGlCQUFpQixDQUUxRixDQUFLLEVBQ0RnTixHQUFRLEtBQUtoTixDQUFNLENBQ3BCLEVBQ0QsWUFBYSxTQUFxQjZmLEVBQVcyckIsRUFBVUMsRUFBSyxDQUMxRCxJQUFJL1ksRUFBUSxLQUVaLEtBQUssY0FBZ0IsR0FFckIrWSxFQUFJLE9BQVMsVUFBWSxDQUN2Qi9ZLEVBQU0sY0FBZ0IsRUFDNUIsRUFFSSxJQUFJZ1osRUFBa0I3ckIsRUFBWSxTQUNsQzdTLEdBQVEsUUFBUSxTQUFVaE4sRUFBUSxDQUMzQndyQyxFQUFTeHJDLEVBQU8sVUFBVSxJQUUzQndyQyxFQUFTeHJDLEVBQU8sVUFBVSxFQUFFMHJDLENBQWUsR0FDN0NGLEVBQVN4ckMsRUFBTyxVQUFVLEVBQUUwckMsQ0FBZSxFQUFFL0csR0FBZSxDQUMxRCxTQUFVNkcsQ0FDcEIsRUFBV0MsQ0FBRyxDQUFDLEVBS0xELEVBQVMsUUFBUXhyQyxFQUFPLFVBQVUsR0FBS3dyQyxFQUFTeHJDLEVBQU8sVUFBVSxFQUFFNmYsQ0FBUyxHQUM5RTJyQixFQUFTeHJDLEVBQU8sVUFBVSxFQUFFNmYsQ0FBUyxFQUFFOGtCLEdBQWUsQ0FDcEQsU0FBVTZHLENBQ3BCLEVBQVdDLENBQUcsQ0FBQyxFQUVmLENBQUssQ0FDRixFQUNELGtCQUFtQixTQUEyQkQsRUFBVWh4QyxFQUFJOHdDLEVBQVUzNEMsRUFBUyxDQUM3RXFhLEdBQVEsUUFBUSxTQUFVaE4sRUFBUSxDQUNoQyxJQUFJMnJDLEVBQWEzckMsRUFBTyxXQUN4QixHQUFJLEdBQUN3ckMsRUFBUyxRQUFRRyxDQUFVLEdBQUssQ0FBQzNyQyxFQUFPLHFCQUM3QyxLQUFJNHJDLEVBQWMsSUFBSTVyQyxFQUFPd3JDLEVBQVVoeEMsRUFBSWd4QyxFQUFTLE9BQU8sRUFDM0RJLEVBQVksU0FBV0osRUFDdkJJLEVBQVksUUFBVUosRUFBUyxRQUMvQkEsRUFBU0csQ0FBVSxFQUFJQyxFQUV2QnhiLEdBQVNrYixFQUFVTSxFQUFZLFFBQVEsRUFDN0MsQ0FBSyxFQUVELFFBQVN0OUIsS0FBVWs5QixFQUFTLFFBQzFCLEdBQUtBLEVBQVMsUUFBUSxlQUFlbDlCLENBQU0sRUFDM0MsS0FBSXU5QixFQUFXLEtBQUssYUFBYUwsRUFBVWw5QixFQUFRazlCLEVBQVMsUUFBUWw5QixDQUFNLENBQUMsRUFFdkUsT0FBT3U5QixFQUFhLE1BQ3RCTCxFQUFTLFFBQVFsOUIsQ0FBTSxFQUFJdTlCLEdBR2hDLEVBQ0QsbUJBQW9CLFNBQTRCMzdDLEVBQU1zN0MsRUFBVSxDQUM5RCxJQUFJTSxFQUFrQixDQUFBLEVBQ3RCLE9BQUE5K0IsR0FBUSxRQUFRLFNBQVVoTixFQUFRLENBQzVCLE9BQU9BLEVBQU8saUJBQW9CLFlBRXRDb3dCLEdBQVMwYixFQUFpQjlyQyxFQUFPLGdCQUFnQixLQUFLd3JDLEVBQVN4ckMsRUFBTyxVQUFVLEVBQUc5UCxDQUFJLENBQUMsQ0FDOUYsQ0FBSyxFQUNNNDdDLENBQ1IsRUFDRCxhQUFjLFNBQXNCTixFQUFVdDdDLEVBQU0yQixFQUFPLENBQ3pELElBQUlrNkMsRUFDSixPQUFBLytCLEdBQVEsUUFBUSxTQUFVaE4sRUFBUSxDQUUzQndyQyxFQUFTeHJDLEVBQU8sVUFBVSxHQUUzQkEsRUFBTyxpQkFBbUIsT0FBT0EsRUFBTyxnQkFBZ0I5UCxDQUFJLEdBQU0sYUFDcEU2N0MsRUFBZ0IvckMsRUFBTyxnQkFBZ0I5UCxDQUFJLEVBQUUsS0FBS3M3QyxFQUFTeHJDLEVBQU8sVUFBVSxFQUFHbk8sQ0FBSyxFQUU1RixDQUFLLEVBQ01rNkMsQ0FDUixDQUNILEVBRUEsU0FBU0MsR0FBY0MsRUFBTSxDQUMzQixJQUFJVCxFQUFXUyxFQUFLLFNBQ2hCQyxFQUFTRCxFQUFLLE9BQ2QvN0MsRUFBTys3QyxFQUFLLEtBQ1pFLEVBQVdGLEVBQUssU0FDaEJHLEVBQVVILEVBQUssUUFDZkksRUFBT0osRUFBSyxLQUNaSyxFQUFTTCxFQUFLLE9BQ2RNLEVBQVdOLEVBQUssU0FDaEJPLEVBQVdQLEVBQUssU0FDaEJRLEVBQW9CUixFQUFLLGtCQUN6QlMsRUFBb0JULEVBQUssa0JBQ3pCVSxFQUFnQlYsRUFBSyxjQUNyQlcsRUFBY1gsRUFBSyxZQUNuQlksRUFBdUJaLEVBQUsscUJBRWhDLEdBREFULEVBQVdBLEdBQVlVLEdBQVVBLEVBQU9oQyxFQUFPLEVBQzNDLEVBQUNzQixFQUNMLEtBQUlDLEVBQ0E5NEMsRUFBVTY0QyxFQUFTLFFBQ25Cc0IsRUFBUyxLQUFPNThDLEVBQUssT0FBTyxDQUFDLEVBQUUsWUFBVyxFQUFLQSxFQUFLLE9BQU8sQ0FBQyxFQUU1RCxPQUFPLGFBQWUsQ0FBQ20xQyxJQUFjLENBQUNDLEdBQ3hDbUcsRUFBTSxJQUFJLFlBQVl2N0MsRUFBTSxDQUMxQixRQUFTLEdBQ1QsV0FBWSxFQUNsQixDQUFLLEdBRUR1N0MsRUFBTSxTQUFTLFlBQVksT0FBTyxFQUNsQ0EsRUFBSSxVQUFVdjdDLEVBQU0sR0FBTSxFQUFJLEdBR2hDdTdDLEVBQUksR0FBS1ksR0FBUUgsRUFDakJULEVBQUksS0FBT2EsR0FBVUosRUFDckJULEVBQUksS0FBT1UsR0FBWUQsRUFDdkJULEVBQUksTUFBUVcsRUFDWlgsRUFBSSxTQUFXYyxFQUNmZCxFQUFJLFNBQVdlLEVBQ2ZmLEVBQUksa0JBQW9CZ0IsRUFDeEJoQixFQUFJLGtCQUFvQmlCLEVBQ3hCakIsRUFBSSxjQUFnQmtCLEVBQ3BCbEIsRUFBSSxTQUFXbUIsRUFBY0EsRUFBWSxZQUFjLE9BRXZELElBQUlHLEVBQXFCcEksR0FBZUEsR0FBZSxHQUFJa0ksQ0FBb0IsRUFBR3RCLEdBQWMsbUJBQW1CcjdDLEVBQU1zN0MsQ0FBUSxDQUFDLEVBRWxJLFFBQVNsOUIsS0FBVXkrQixFQUNqQnRCLEVBQUluOUIsQ0FBTSxFQUFJeStCLEVBQW1CeitCLENBQU0sRUFHckM0OUIsR0FDRkEsRUFBTyxjQUFjVCxDQUFHLEVBR3RCOTRDLEVBQVFtNkMsQ0FBTSxHQUNoQm42QyxFQUFRbTZDLENBQU0sRUFBRSxLQUFLdEIsRUFBVUMsQ0FBRyxFQUV0QyxDQUVBLElBQUl1QixHQUFZLENBQUMsS0FBSyxFQUVsQkMsR0FBYyxTQUFxQnB0QixFQUFXMnJCLEVBQVUsQ0FDMUQsSUFBSVMsRUFBTyxVQUFVLE9BQVMsR0FBSyxVQUFVLENBQUMsSUFBTSxPQUFZLFVBQVUsQ0FBQyxFQUFJLENBQUUsRUFDN0VVLEVBQWdCVixFQUFLLElBQ3JCM2tDLEVBQU8yOUIsR0FBeUJnSCxFQUFNZSxFQUFTLEVBRW5EekIsR0FBYyxZQUFZLEtBQUsvQyxFQUFRLEVBQUUzb0IsRUFBVzJyQixFQUFVN0csR0FBZSxDQUMzRSxPQUFRdUksR0FDUixTQUFVQyxHQUNWLFFBQVNDLEdBQ1QsT0FBUWxCLEdBQ1IsT0FBUW1CLEdBQ1IsV0FBWUMsR0FDWixRQUFTbEIsR0FDVCxZQUFhbUIsR0FDYixZQUFhQyxHQUNiLFlBQWFaLEdBQ2IsZUFBZ0JwRSxHQUFTLE9BQ3pCLGNBQWVtRSxFQUNmLFNBQVVKLEdBQ1Ysa0JBQW1CRSxHQUNuQixTQUFVRCxHQUNWLGtCQUFtQkUsR0FDbkIsbUJBQW9CZSxHQUNwQixxQkFBc0JDLEdBQ3RCLGVBQWdCLFVBQTBCLENBQ3hDSCxHQUFjLEVBQ2YsRUFDRCxjQUFlLFVBQXlCLENBQ3RDQSxHQUFjLEVBQ2YsRUFDRCxzQkFBdUIsU0FBK0JyOUMsRUFBTSxDQUMxRHk5QyxHQUFlLENBQ2IsU0FBVW5DLEVBQ1YsS0FBTXQ3QyxFQUNOLGNBQWV5OEMsQ0FDdkIsQ0FBTyxDQUNGLENBQ0wsRUFBS3JsQyxDQUFJLENBQUMsQ0FDVixFQUVBLFNBQVNxbUMsR0FBZXY4QyxFQUFNLENBQzVCNDZDLEdBQWNySCxHQUFlLENBQzNCLFlBQWFpSSxHQUNiLFFBQVNSLEdBQ1QsU0FBVWMsR0FDVixPQUFRaEIsR0FDUixTQUFVSyxHQUNWLGtCQUFtQkUsR0FDbkIsU0FBVUQsR0FDVixrQkFBbUJFLEVBQ3ZCLEVBQUt0N0MsQ0FBSSxDQUFDLENBQ1YsQ0FFQSxJQUFJODdDLEdBQ0FDLEdBQ0FDLEdBQ0FsQixHQUNBbUIsR0FDQUMsR0FDQWxCLEdBQ0FtQixHQUNBaEIsR0FDQUMsR0FDQUMsR0FDQUMsR0FDQWtCLEdBQ0FoQixHQUNBaUIsR0FBc0IsR0FDdEJDLEdBQWtCLEdBQ2xCQyxHQUFZLENBQUUsRUFDZEMsR0FDQUMsR0FDQUMsR0FDQUMsR0FDQUMsR0FDQUMsR0FDQWIsR0FDQWMsR0FDQUMsR0FDQUMsR0FBd0IsR0FDeEJDLEdBQXlCLEdBQ3pCQyxHQUVKQyxHQUNJQyxHQUFtQyxDQUFFLEVBRXpDQyxHQUFVLEdBQ05DLEdBQW9CLENBQUEsRUFHcEJDLEdBQWlCLE9BQU8sU0FBYSxJQUNyQ0MsR0FBMEJ2SixHQUMxQndKLEdBQW1CM0osSUFBUUQsR0FBYSxXQUFhLFFBRXpENkosR0FBbUJILElBQWtCLENBQUNySixJQUFvQixDQUFDRCxJQUFPLGNBQWUsU0FBUyxjQUFjLEtBQUssRUFDekcwSixHQUEwQixVQUFZLENBQ3hDLEdBQUtKLEdBRUwsSUFBSTFKLEdBQ0YsTUFBTyxHQUdULElBQUk3cUMsRUFBSyxTQUFTLGNBQWMsR0FBRyxFQUNuQyxPQUFBQSxFQUFHLE1BQU0sUUFBVSxzQkFDWkEsRUFBRyxNQUFNLGdCQUFrQixPQUNwQyxFQUFHLEVBQ0M0MEMsR0FBbUIsU0FBMEI1MEMsRUFBSTdILEVBQVMsQ0FDNUQsSUFBSTA4QyxFQUFRaEosR0FBSTdyQyxDQUFFLEVBQ2Q4MEMsRUFBVSxTQUFTRCxFQUFNLEtBQUssRUFBSSxTQUFTQSxFQUFNLFdBQVcsRUFBSSxTQUFTQSxFQUFNLFlBQVksRUFBSSxTQUFTQSxFQUFNLGVBQWUsRUFBSSxTQUFTQSxFQUFNLGdCQUFnQixFQUNoS0UsRUFBU25ILEdBQVM1dEMsRUFBSSxFQUFHN0gsQ0FBTyxFQUNoQzY4QyxFQUFTcEgsR0FBUzV0QyxFQUFJLEVBQUc3SCxDQUFPLEVBQ2hDODhDLEVBQWdCRixHQUFVbEosR0FBSWtKLENBQU0sRUFDcENHLEVBQWlCRixHQUFVbkosR0FBSW1KLENBQU0sRUFDckNHLEVBQWtCRixHQUFpQixTQUFTQSxFQUFjLFVBQVUsRUFBSSxTQUFTQSxFQUFjLFdBQVcsRUFBSXpJLEdBQVF1SSxDQUFNLEVBQUUsTUFDOUhLLEVBQW1CRixHQUFrQixTQUFTQSxFQUFlLFVBQVUsRUFBSSxTQUFTQSxFQUFlLFdBQVcsRUFBSTFJLEdBQVF3SSxDQUFNLEVBQUUsTUFFdEksR0FBSUgsRUFBTSxVQUFZLE9BQ3BCLE9BQU9BLEVBQU0sZ0JBQWtCLFVBQVlBLEVBQU0sZ0JBQWtCLGlCQUFtQixXQUFhLGFBR3JHLEdBQUlBLEVBQU0sVUFBWSxPQUNwQixPQUFPQSxFQUFNLG9CQUFvQixNQUFNLEdBQUcsRUFBRSxRQUFVLEVBQUksV0FBYSxhQUd6RSxHQUFJRSxHQUFVRSxFQUFjLE9BQVlBLEVBQWMsUUFBYSxPQUFRLENBQ3pFLElBQUlJLEVBQXFCSixFQUFjLFFBQWEsT0FBUyxPQUFTLFFBQ3RFLE9BQU9ELElBQVdFLEVBQWUsUUFBVSxRQUFVQSxFQUFlLFFBQVVHLEdBQXNCLFdBQWEsWUFDbEgsQ0FFRCxPQUFPTixJQUFXRSxFQUFjLFVBQVksU0FBV0EsRUFBYyxVQUFZLFFBQVVBLEVBQWMsVUFBWSxTQUFXQSxFQUFjLFVBQVksUUFBVUUsR0FBbUJMLEdBQVdELEVBQU1KLEVBQWdCLElBQU0sUUFBVU8sR0FBVUgsRUFBTUosRUFBZ0IsSUFBTSxRQUFVVSxFQUFrQkMsRUFBbUJOLEdBQVcsV0FBYSxZQUN2VixFQUNJUSxHQUFxQixTQUE0QkMsRUFBVUMsRUFBWUMsRUFBVSxDQUNuRixJQUFJQyxFQUFjRCxFQUFXRixFQUFTLEtBQU9BLEVBQVMsSUFDbERJLEVBQWNGLEVBQVdGLEVBQVMsTUFBUUEsRUFBUyxPQUNuREssRUFBa0JILEVBQVdGLEVBQVMsTUFBUUEsRUFBUyxPQUN2RE0sRUFBY0osRUFBV0QsRUFBVyxLQUFPQSxFQUFXLElBQ3RETSxFQUFjTCxFQUFXRCxFQUFXLE1BQVFBLEVBQVcsT0FDdkRPLEVBQWtCTixFQUFXRCxFQUFXLE1BQVFBLEVBQVcsT0FDL0QsT0FBT0UsSUFBZ0JHLEdBQWVGLElBQWdCRyxHQUFlSixFQUFjRSxFQUFrQixJQUFNQyxFQUFjRSxFQUFrQixDQUM3SSxFQVFBQyxHQUE4QixTQUFxQzNlLEVBQUdrWSxFQUFHLENBQ3ZFLElBQUludkMsRUFDSixPQUFBbXpDLEdBQVUsS0FBSyxTQUFVdkMsRUFBVSxDQUNqQyxJQUFJaUYsRUFBWWpGLEVBQVN0QixFQUFPLEVBQUUsUUFBUSxxQkFDMUMsR0FBSSxHQUFDdUcsR0FBYWhJLEdBQVUrQyxDQUFRLEdBQ3BDLEtBQUlrRixFQUFPMUosR0FBUXdFLENBQVEsRUFDdkJtRixFQUFxQjllLEdBQUs2ZSxFQUFLLEtBQU9ELEdBQWE1ZSxHQUFLNmUsRUFBSyxNQUFRRCxFQUNyRUcsRUFBbUI3RyxHQUFLMkcsRUFBSyxJQUFNRCxHQUFhMUcsR0FBSzJHLEVBQUssT0FBU0QsRUFFdkUsR0FBSUUsR0FBc0JDLEVBQ3hCLE9BQU9oMkMsRUFBTTR3QyxFQUVuQixDQUFHLEVBQ001d0MsQ0FDVCxFQUNJaTJDLEdBQWdCLFNBQXVCbCtDLEVBQVMsQ0FDbEQsU0FBU20rQyxFQUFLai9DLEVBQU9rL0MsRUFBTSxDQUN6QixPQUFPLFNBQVVDLEVBQUlDLEVBQU0vRCxFQUFRekIsRUFBSyxDQUN0QyxJQUFJeUYsRUFBWUYsRUFBRyxRQUFRLE1BQU0sTUFBUUMsRUFBSyxRQUFRLE1BQU0sTUFBUUQsRUFBRyxRQUFRLE1BQU0sT0FBU0MsRUFBSyxRQUFRLE1BQU0sS0FFakgsR0FBSXAvQyxHQUFTLE9BQVNrL0MsR0FBUUcsR0FHNUIsTUFBTyxHQUNGLEdBQUlyL0MsR0FBUyxNQUFRQSxJQUFVLEdBQ3BDLE1BQU8sR0FDRixHQUFJay9DLEdBQVFsL0MsSUFBVSxRQUMzQixPQUFPQSxFQUNGLEdBQUksT0FBT0EsR0FBVSxXQUMxQixPQUFPaS9DLEVBQUtqL0MsRUFBTW0vQyxFQUFJQyxFQUFNL0QsRUFBUXpCLENBQUcsRUFBR3NGLENBQUksRUFBRUMsRUFBSUMsRUFBTS9ELEVBQVF6QixDQUFHLEVBRXJFLElBQUkwRixHQUFjSixFQUFPQyxFQUFLQyxHQUFNLFFBQVEsTUFBTSxLQUNsRCxPQUFPcC9DLElBQVUsSUFBUSxPQUFPQSxHQUFVLFVBQVlBLElBQVVzL0MsR0FBY3QvQyxFQUFNLE1BQVFBLEVBQU0sUUFBUXMvQyxDQUFVLEVBQUksRUFFaEksQ0FDRyxDQUVELElBQUl6dEIsRUFBUSxDQUFBLEVBQ1IwdEIsRUFBZ0J6K0MsRUFBUSxPQUV4QixDQUFDeStDLEdBQWlCdk0sR0FBUXVNLENBQWEsR0FBSyxZQUM5Q0EsRUFBZ0IsQ0FDZCxLQUFNQSxDQUNaLEdBR0UxdEIsRUFBTSxLQUFPMHRCLEVBQWMsS0FDM0IxdEIsRUFBTSxVQUFZb3RCLEVBQUtNLEVBQWMsS0FBTSxFQUFJLEVBQy9DMXRCLEVBQU0sU0FBV290QixFQUFLTSxFQUFjLEdBQUcsRUFDdkMxdEIsRUFBTSxZQUFjMHRCLEVBQWMsWUFDbEN6K0MsRUFBUSxNQUFRK3dCLENBQ2xCLEVBQ0krcEIsR0FBc0IsVUFBK0IsQ0FDbkQsQ0FBQzBCLElBQTJCL0IsSUFDOUIvRyxHQUFJK0csR0FBUyxVQUFXLE1BQU0sQ0FFbEMsRUFDSU0sR0FBd0IsVUFBaUMsQ0FDdkQsQ0FBQ3lCLElBQTJCL0IsSUFDOUIvRyxHQUFJK0csR0FBUyxVQUFXLEVBQUUsQ0FFOUIsRUFHSTJCLElBQ0YsU0FBUyxpQkFBaUIsUUFBUyxTQUFVdEQsRUFBSyxDQUNoRCxHQUFJcUMsR0FDRixPQUFBckMsRUFBSSxlQUFjLEVBQ2xCQSxFQUFJLGlCQUFtQkEsRUFBSSxrQkFDM0JBLEVBQUksMEJBQTRCQSxFQUFJLDJCQUNwQ3FDLEdBQWtCLEdBQ1gsRUFFVixFQUFFLEVBQUksRUFHVCxJQUFJdUQsR0FBZ0MsU0FBdUM1RixFQUFLLENBQzlFLEdBQUl5QixHQUFRLENBQ1Z6QixFQUFNQSxFQUFJLFFBQVVBLEVBQUksUUFBUSxDQUFDLEVBQUlBLEVBRXJDLElBQUk2RixFQUFVZCxHQUE0Qi9FLEVBQUksUUFBU0EsRUFBSSxPQUFPLEVBRWxFLEdBQUk2RixFQUFTLENBRVgsSUFBSXR4QixFQUFRLENBQUEsRUFFWixRQUFTbHFCLEtBQUsyMUMsRUFDUkEsRUFBSSxlQUFlMzFDLENBQUMsSUFDdEJrcUIsRUFBTWxxQixDQUFDLEVBQUkyMUMsRUFBSTMxQyxDQUFDLEdBSXBCa3FCLEVBQU0sT0FBU0EsRUFBTSxPQUFTc3hCLEVBQzlCdHhCLEVBQU0sZUFBaUIsT0FDdkJBLEVBQU0sZ0JBQWtCLE9BRXhCc3hCLEVBQVFwSCxFQUFPLEVBQUUsWUFBWWxxQixDQUFLLENBQ25DLENBQ0YsQ0FDSCxFQUVJdXhCLEdBQXdCLFNBQStCOUYsRUFBSyxDQUMxRHlCLElBQ0ZBLEdBQU8sV0FBV2hELEVBQU8sRUFBRSxpQkFBaUJ1QixFQUFJLE1BQU0sQ0FFMUQsRUFRQSxTQUFTakQsR0FBU2h1QyxFQUFJN0gsRUFBUyxDQUM3QixHQUFJLEVBQUU2SCxHQUFNQSxFQUFHLFVBQVlBLEVBQUcsV0FBYSxHQUN6QyxLQUFNLDhDQUE4QyxPQUFPLENBQUUsRUFBQyxTQUFTLEtBQUtBLENBQUUsQ0FBQyxFQUdqRixLQUFLLEdBQUtBLEVBRVYsS0FBSyxRQUFVN0gsRUFBVXk5QixHQUFTLENBQUUsRUFBRXo5QixDQUFPLEVBRTdDNkgsRUFBRzB2QyxFQUFPLEVBQUksS0FDZCxJQUFJb0IsRUFBVyxDQUNiLE1BQU8sS0FDUCxLQUFNLEdBQ04sU0FBVSxHQUNWLE1BQU8sS0FDUCxPQUFRLEtBQ1IsVUFBVyxXQUFXLEtBQUs5d0MsRUFBRyxRQUFRLEVBQUksTUFBUSxLQUNsRCxjQUFlLEVBRWYsV0FBWSxHQUVaLHNCQUF1QixLQUV2QixrQkFBbUIsR0FDbkIsVUFBVyxVQUFxQixDQUM5QixPQUFPNDBDLEdBQWlCNTBDLEVBQUksS0FBSyxPQUFPLENBQ3pDLEVBQ0QsV0FBWSxpQkFDWixZQUFhLGtCQUNiLFVBQVcsZ0JBQ1gsT0FBUSxTQUNSLE9BQVEsS0FDUixnQkFBaUIsR0FDakIsVUFBVyxFQUNYLE9BQVEsS0FDUixRQUFTLFNBQWlCZzNDLEVBQWN0RSxFQUFRLENBQzlDc0UsRUFBYSxRQUFRLE9BQVF0RSxFQUFPLFdBQVcsQ0FDaEQsRUFDRCxXQUFZLEdBQ1osZUFBZ0IsR0FDaEIsV0FBWSxVQUNaLE1BQU8sRUFDUCxpQkFBa0IsR0FDbEIscUJBQXNCLE9BQU8sU0FBVyxPQUFTLFFBQVEsU0FBUyxPQUFPLGlCQUFrQixFQUFFLEdBQUssRUFDbEcsY0FBZSxHQUNmLGNBQWUsb0JBQ2YsZUFBZ0IsR0FDaEIsa0JBQW1CLEVBQ25CLGVBQWdCLENBQ2QsRUFBRyxFQUNILEVBQUcsQ0FDSixFQUNELGVBQWdCMUUsR0FBUyxpQkFBbUIsSUFBUyxpQkFBa0IsUUFBVSxDQUFDaEQsR0FDbEYscUJBQXNCLENBQzFCLEVBQ0UrRixHQUFjLGtCQUFrQixLQUFNL3dDLEVBQUk4d0MsQ0FBUSxFQUVsRCxRQUFTcDdDLEtBQVFvN0MsRUFDZixFQUFFcDdDLEtBQVF5QyxLQUFhQSxFQUFRekMsQ0FBSSxFQUFJbzdDLEVBQVNwN0MsQ0FBSSxHQUd0RDJnRCxHQUFjbCtDLENBQU8sRUFHckIsUUFBU21kLEtBQU0sS0FDVEEsRUFBRyxPQUFPLENBQUMsSUFBTSxLQUFPLE9BQU8sS0FBS0EsQ0FBRSxHQUFNLGFBQzlDLEtBQUtBLENBQUUsRUFBSSxLQUFLQSxDQUFFLEVBQUUsS0FBSyxJQUFJLEdBS2pDLEtBQUssZ0JBQWtCbmQsRUFBUSxjQUFnQixHQUFRdThDLEdBRW5ELEtBQUssa0JBRVAsS0FBSyxRQUFRLG9CQUFzQixHQUlqQ3Y4QyxFQUFRLGVBQ1Z3dEIsR0FBRzNsQixFQUFJLGNBQWUsS0FBSyxXQUFXLEdBRXRDMmxCLEdBQUczbEIsRUFBSSxZQUFhLEtBQUssV0FBVyxFQUNwQzJsQixHQUFHM2xCLEVBQUksYUFBYyxLQUFLLFdBQVcsR0FHbkMsS0FBSyxrQkFDUDJsQixHQUFHM2xCLEVBQUksV0FBWSxJQUFJLEVBQ3ZCMmxCLEdBQUczbEIsRUFBSSxZQUFhLElBQUksR0FHMUJ1ekMsR0FBVSxLQUFLLEtBQUssRUFBRSxFQUV0QnA3QyxFQUFRLE9BQVNBLEVBQVEsTUFBTSxLQUFPLEtBQUssS0FBS0EsRUFBUSxNQUFNLElBQUksSUFBSSxHQUFLLENBQUUsQ0FBQSxFQUU3RXk5QixHQUFTLEtBQU0rWixHQUFxQixDQUFFLENBQ3hDLENBRUEzQixHQUFTLFVBRVQsQ0FDRSxZQUFhQSxHQUNiLGlCQUFrQixTQUEwQnJyQyxFQUFRLENBQzlDLENBQUMsS0FBSyxHQUFHLFNBQVNBLENBQU0sR0FBS0EsSUFBVyxLQUFLLEtBQy9DbXhDLEdBQWEsS0FFaEIsRUFDRCxjQUFlLFNBQXVCN0MsRUFBS3R1QyxFQUFRLENBQ2pELE9BQU8sT0FBTyxLQUFLLFFBQVEsV0FBYyxXQUFhLEtBQUssUUFBUSxVQUFVLEtBQUssS0FBTXN1QyxFQUFLdHVDLEVBQVErdkMsRUFBTSxFQUFJLEtBQUssUUFBUSxTQUM3SCxFQUNELFlBQWEsU0FFYnpCLEVBQUssQ0FDSCxHQUFLQSxFQUFJLFdBRVQsS0FBSS9ZLEVBQVEsS0FDUmw0QixFQUFLLEtBQUssR0FDVjdILEVBQVUsS0FBSyxRQUNmOCtDLEVBQWtCOStDLEVBQVEsZ0JBQzFCdUMsRUFBT3UyQyxFQUFJLEtBQ1hpRyxFQUFRakcsRUFBSSxTQUFXQSxFQUFJLFFBQVEsQ0FBQyxHQUFLQSxFQUFJLGFBQWVBLEVBQUksY0FBZ0IsU0FBV0EsRUFDM0Z0dUMsR0FBVXUwQyxHQUFTakcsR0FBSyxPQUN4QmtHLEVBQWlCbEcsRUFBSSxPQUFPLGFBQWVBLEVBQUksTUFBUUEsRUFBSSxLQUFLLENBQUMsR0FBS0EsRUFBSSxjQUFnQkEsRUFBSSxhQUFZLEVBQUcsQ0FBQyxJQUFNdHVDLEVBQ3BIeTBDLEVBQVNqL0MsRUFBUSxPQUtyQixHQUhBay9DLEdBQXVCcjNDLENBQUUsRUFHckIsQ0FBQTB5QyxJQUlBLDBCQUF3QixLQUFLaDRDLENBQUksR0FBS3UyQyxFQUFJLFNBQVcsR0FBSzk0QyxFQUFRLFdBS2xFLENBQUFnL0MsRUFBZSxtQkFLZixHQUFDLEtBQUssaUJBQW1Cbk0sSUFBVXJvQyxHQUFVQSxFQUFPLFFBQVEsWUFBYSxJQUFLLFlBSWxGQSxFQUFTNm9DLEdBQVE3b0MsRUFBUXhLLEVBQVEsVUFBVzZILEVBQUksRUFBSyxFQUVqRCxFQUFBMkMsR0FBVUEsRUFBTyxXQUlqQm13QyxLQUFlbndDLEdBU25CLElBSEFvdkMsR0FBV2owQyxHQUFNNkUsQ0FBTSxFQUN2QnN2QyxHQUFvQm4wQyxHQUFNNkUsRUFBUXhLLEVBQVEsU0FBUyxFQUUvQyxPQUFPaS9DLEdBQVcsWUFDcEIsR0FBSUEsRUFBTyxLQUFLLEtBQU1uRyxFQUFLdHVDLEVBQVEsSUFBSSxFQUFHLENBQ3hDd3dDLEdBQWUsQ0FDYixTQUFVamIsRUFDVixPQUFRaWYsRUFDUixLQUFNLFNBQ04sU0FBVXgwQyxFQUNWLEtBQU0zQyxFQUNOLE9BQVFBLENBQ2xCLENBQVMsRUFFRHl5QyxHQUFZLFNBQVV2YSxFQUFPLENBQzNCLElBQUsrWSxDQUNmLENBQVMsRUFDRGdHLEdBQW1CaEcsRUFBSSxZQUFjQSxFQUFJLGVBQWMsRUFDdkQsTUFDRCxVQUNRbUcsSUFDVEEsRUFBU0EsRUFBTyxNQUFNLEdBQUcsRUFBRSxLQUFLLFNBQVVFLEVBQVUsQ0FHbEQsR0FGQUEsRUFBVzlMLEdBQVEyTCxFQUFnQkcsRUFBUyxPQUFRdDNDLEVBQUksRUFBSyxFQUV6RHMzQyxFQUNGLE9BQUFuRSxHQUFlLENBQ2IsU0FBVWpiLEVBQ1YsT0FBUW9mLEVBQ1IsS0FBTSxTQUNOLFNBQVUzMEMsRUFDVixPQUFRM0MsRUFDUixLQUFNQSxDQUNsQixDQUFXLEVBRUR5eUMsR0FBWSxTQUFVdmEsRUFBTyxDQUMzQixJQUFLK1ksQ0FDakIsQ0FBVyxFQUNNLEVBRWpCLENBQU8sRUFFR21HLEdBQVEsQ0FDVkgsR0FBbUJoRyxFQUFJLFlBQWNBLEVBQUksZUFBYyxFQUN2RCxNQUNELENBR0M5NEMsRUFBUSxRQUFVLENBQUNxekMsR0FBUTJMLEVBQWdCaC9DLEVBQVEsT0FBUTZILEVBQUksRUFBSyxHQUt4RSxLQUFLLGtCQUFrQml4QyxFQUFLaUcsRUFBT3YwQyxDQUFNLEdBQzFDLEVBQ0Qsa0JBQW1CLFNBRW5Cc3VDLEVBRUFpRyxFQUVBdjBDLEVBQVEsQ0FDTixJQUFJdTFCLEVBQVEsS0FDUmw0QixFQUFLazRCLEVBQU0sR0FDWC8vQixFQUFVKy9CLEVBQU0sUUFDaEJxZixFQUFnQnYzQyxFQUFHLGNBQ25CdzNDLEVBRUosR0FBSTcwQyxHQUFVLENBQUMrdkMsSUFBVS92QyxFQUFPLGFBQWUzQyxFQUFJLENBQ2pELElBQUl1MUMsRUFBVy9JLEdBQVE3cEMsQ0FBTSxFQXdFN0IsR0F2RUErdUMsR0FBUzF4QyxFQUNUMHlDLEdBQVMvdkMsRUFDVGd3QyxHQUFXRCxHQUFPLFdBQ2xCRyxHQUFTSCxHQUFPLFlBQ2hCSSxHQUFhbndDLEVBQ2J5d0MsR0FBY2o3QyxFQUFRLE1BQ3RCNjFDLEdBQVMsUUFBVTBFLEdBQ25CYyxHQUFTLENBQ1AsT0FBUWQsR0FDUixTQUFVd0UsR0FBU2pHLEdBQUssUUFDeEIsU0FBVWlHLEdBQVNqRyxHQUFLLE9BQ2hDLEVBQ00yQyxHQUFrQkosR0FBTyxRQUFVK0IsRUFBUyxLQUM1QzFCLEdBQWlCTCxHQUFPLFFBQVUrQixFQUFTLElBQzNDLEtBQUssUUFBVTJCLEdBQVNqRyxHQUFLLFFBQzdCLEtBQUssUUFBVWlHLEdBQVNqRyxHQUFLLFFBQzdCeUIsR0FBTyxNQUFNLGFBQWEsRUFBSSxNQUU5QjhFLEVBQWMsVUFBdUIsQ0FLbkMsR0FKQS9FLEdBQVksYUFBY3ZhLEVBQU8sQ0FDL0IsSUFBSytZLENBQ2YsQ0FBUyxFQUVHakQsR0FBUyxjQUFlLENBQzFCOVYsRUFBTSxRQUFPLEVBRWIsTUFDRCxDQUlEQSxFQUFNLDBCQUF5QixFQUUzQixDQUFDNlMsSUFBVzdTLEVBQU0sa0JBQ3BCd2EsR0FBTyxVQUFZLElBSXJCeGEsRUFBTSxrQkFBa0IrWSxFQUFLaUcsQ0FBSyxFQUdsQy9ELEdBQWUsQ0FDYixTQUFVamIsRUFDVixLQUFNLFNBQ04sY0FBZStZLENBQ3pCLENBQVMsRUFHRHRGLEdBQVkrRyxHQUFRdjZDLEVBQVEsWUFBYSxFQUFJLENBQ3JELEVBR01BLEVBQVEsT0FBTyxNQUFNLEdBQUcsRUFBRSxRQUFRLFNBQVVtL0MsRUFBVSxDQUNwRG5MLEdBQUt1RyxHQUFRNEUsRUFBUyxLQUFNLEVBQUVHLEVBQWlCLENBQ3ZELENBQU8sRUFDRDl4QixHQUFHNHhCLEVBQWUsV0FBWVYsRUFBNkIsRUFDM0RseEIsR0FBRzR4QixFQUFlLFlBQWFWLEVBQTZCLEVBQzVEbHhCLEdBQUc0eEIsRUFBZSxZQUFhVixFQUE2QixFQUM1RGx4QixHQUFHNHhCLEVBQWUsVUFBV3JmLEVBQU0sT0FBTyxFQUMxQ3ZTLEdBQUc0eEIsRUFBZSxXQUFZcmYsRUFBTSxPQUFPLEVBQzNDdlMsR0FBRzR4QixFQUFlLGNBQWVyZixFQUFNLE9BQU8sRUFFMUM2UyxJQUFXLEtBQUssa0JBQ2xCLEtBQUssUUFBUSxvQkFBc0IsRUFDbkMySCxHQUFPLFVBQVksSUFHckJELEdBQVksYUFBYyxLQUFNLENBQzlCLElBQUt4QixDQUNiLENBQU8sRUFFRzk0QyxFQUFRLFFBQVUsQ0FBQ0EsRUFBUSxrQkFBb0IrK0MsS0FBVyxDQUFDLEtBQUssaUJBQW1CLEVBQUVwTSxJQUFRRCxLQUFjLENBQzdHLEdBQUltRCxHQUFTLGNBQWUsQ0FDMUIsS0FBSyxRQUFPLEVBRVosTUFDRCxDQUtEcm9CLEdBQUc0eEIsRUFBZSxVQUFXcmYsRUFBTSxtQkFBbUIsRUFDdER2UyxHQUFHNHhCLEVBQWUsV0FBWXJmLEVBQU0sbUJBQW1CLEVBQ3ZEdlMsR0FBRzR4QixFQUFlLGNBQWVyZixFQUFNLG1CQUFtQixFQUMxRHZTLEdBQUc0eEIsRUFBZSxZQUFhcmYsRUFBTSw0QkFBNEIsRUFDakV2UyxHQUFHNHhCLEVBQWUsWUFBYXJmLEVBQU0sNEJBQTRCLEVBQ2pFLy9CLEVBQVEsZ0JBQWtCd3RCLEdBQUc0eEIsRUFBZSxjQUFlcmYsRUFBTSw0QkFBNEIsRUFDN0ZBLEVBQU0sZ0JBQWtCLFdBQVdzZixFQUFhci9DLEVBQVEsS0FBSyxDQUNyRSxNQUNRcS9DLEdBRUgsQ0FDRixFQUNELDZCQUE4QixTQUU5Qmw1QyxFQUFHLENBQ0QsSUFBSTQ0QyxFQUFRNTRDLEVBQUUsUUFBVUEsRUFBRSxRQUFRLENBQUMsRUFBSUEsRUFFbkMsS0FBSyxJQUFJLEtBQUssSUFBSTQ0QyxFQUFNLFFBQVUsS0FBSyxNQUFNLEVBQUcsS0FBSyxJQUFJQSxFQUFNLFFBQVUsS0FBSyxNQUFNLENBQUMsR0FBSyxLQUFLLE1BQU0sS0FBSyxRQUFRLHFCQUF1QixLQUFLLGlCQUFtQixPQUFPLGtCQUFvQixFQUFFLEdBQ2hNLEtBQUssb0JBQW1CLENBRTNCLEVBQ0Qsb0JBQXFCLFVBQStCLENBQ2xEeEUsSUFBVStFLEdBQWtCL0UsRUFBTSxFQUNsQyxhQUFhLEtBQUssZUFBZSxFQUVqQyxLQUFLLDBCQUF5QixDQUMvQixFQUNELDBCQUEyQixVQUFxQyxDQUM5RCxJQUFJNkUsRUFBZ0IsS0FBSyxHQUFHLGNBQzVCbk0sR0FBSW1NLEVBQWUsVUFBVyxLQUFLLG1CQUFtQixFQUN0RG5NLEdBQUltTSxFQUFlLFdBQVksS0FBSyxtQkFBbUIsRUFDdkRuTSxHQUFJbU0sRUFBZSxjQUFlLEtBQUssbUJBQW1CLEVBQzFEbk0sR0FBSW1NLEVBQWUsWUFBYSxLQUFLLDRCQUE0QixFQUNqRW5NLEdBQUltTSxFQUFlLFlBQWEsS0FBSyw0QkFBNEIsRUFDakVuTSxHQUFJbU0sRUFBZSxjQUFlLEtBQUssNEJBQTRCLENBQ3BFLEVBQ0Qsa0JBQW1CLFNBRW5CdEcsRUFFQWlHLEVBQU8sQ0FDTEEsRUFBUUEsR0FBU2pHLEVBQUksYUFBZSxTQUFXQSxFQUUzQyxDQUFDLEtBQUssaUJBQW1CaUcsRUFDdkIsS0FBSyxRQUFRLGVBQ2Z2eEIsR0FBRyxTQUFVLGNBQWUsS0FBSyxZQUFZLEVBQ3BDdXhCLEVBQ1R2eEIsR0FBRyxTQUFVLFlBQWEsS0FBSyxZQUFZLEVBRTNDQSxHQUFHLFNBQVUsWUFBYSxLQUFLLFlBQVksR0FHN0NBLEdBQUcrc0IsR0FBUSxVQUFXLElBQUksRUFDMUIvc0IsR0FBRytyQixHQUFRLFlBQWEsS0FBSyxZQUFZLEdBRzNDLEdBQUksQ0FDRSxTQUFTLFVBRVhnRyxHQUFVLFVBQVksQ0FDcEIsU0FBUyxVQUFVLE9BQzdCLENBQVMsRUFFRCxPQUFPLGVBQWUsaUJBRTlCLE1BQWtCLENBQUUsQ0FDakIsRUFDRCxhQUFjLFNBQXNCQyxFQUFVMUcsRUFBSyxDQUlqRCxHQUZBb0MsR0FBc0IsR0FFbEIzQixJQUFVZ0IsR0FBUSxDQUNwQkQsR0FBWSxjQUFlLEtBQU0sQ0FDL0IsSUFBS3hCLENBQ2IsQ0FBTyxFQUVHLEtBQUssaUJBQ1B0ckIsR0FBRyxTQUFVLFdBQVlveEIsRUFBcUIsRUFHaEQsSUFBSTUrQyxFQUFVLEtBQUssUUFFbkIsQ0FBQ3cvQyxHQUFZaE0sR0FBWStHLEdBQVF2NkMsRUFBUSxVQUFXLEVBQUssRUFDekR3ekMsR0FBWStHLEdBQVF2NkMsRUFBUSxXQUFZLEVBQUksRUFDNUM2MUMsR0FBUyxPQUFTLEtBQ2xCMkosR0FBWSxLQUFLLGVBRWpCeEUsR0FBZSxDQUNiLFNBQVUsS0FDVixLQUFNLFFBQ04sY0FBZWxDLENBQ3ZCLENBQU8sQ0FDUCxNQUNNLEtBQUssU0FBUSxDQUVoQixFQUNELGlCQUFrQixVQUE0QixDQUM1QyxHQUFJd0MsR0FBVSxDQUNaLEtBQUssT0FBU0EsR0FBUyxRQUN2QixLQUFLLE9BQVNBLEdBQVMsUUFFdkJSLEtBS0EsUUFISXR3QyxFQUFTLFNBQVMsaUJBQWlCOHdDLEdBQVMsUUFBU0EsR0FBUyxPQUFPLEVBQ3JFcjRDLEVBQVN1SCxFQUVOQSxHQUFVQSxFQUFPLGFBQ3RCQSxFQUFTQSxFQUFPLFdBQVcsaUJBQWlCOHdDLEdBQVMsUUFBU0EsR0FBUyxPQUFPLEVBQzFFOXdDLElBQVd2SCxJQUNmQSxFQUFTdUgsRUFLWCxHQUZBK3ZDLEdBQU8sV0FBV2hELEVBQU8sRUFBRSxpQkFBaUIvc0MsQ0FBTSxFQUU5Q3ZILEVBQ0YsRUFBRyxDQUNELEdBQUlBLEVBQU9zMEMsRUFBTyxFQUFHLENBQ25CLElBQUlrSSxFQUFXLE9BUWYsR0FQQUEsRUFBV3g4QyxFQUFPczBDLEVBQU8sRUFBRSxZQUFZLENBQ3JDLFFBQVMrRCxHQUFTLFFBQ2xCLFFBQVNBLEdBQVMsUUFDbEIsT0FBUTl3QyxFQUNSLE9BQVF2SCxDQUN0QixDQUFhLEVBRUd3OEMsR0FBWSxDQUFDLEtBQUssUUFBUSxlQUM1QixLQUVILENBRURqMUMsRUFBU3ZILENBQ1YsT0FFTUEsRUFBU0EsRUFBTyxZQUd6QjgzQyxJQUNELENBQ0YsRUFDRCxhQUFjLFNBRWRqQyxFQUFLLENBQ0gsR0FBSXVDLEdBQVEsQ0FDVixJQUFJcjdDLEVBQVUsS0FBSyxRQUNmMC9DLEVBQW9CMS9DLEVBQVEsa0JBQzVCMi9DLEVBQWlCMy9DLEVBQVEsZUFDekIrK0MsRUFBUWpHLEVBQUksUUFBVUEsRUFBSSxRQUFRLENBQUMsRUFBSUEsRUFDdkM4RyxFQUFjbkYsSUFBVzdHLEdBQU82RyxHQUFTLEVBQUksRUFDN0N4RixFQUFTd0YsSUFBV21GLEdBQWVBLEVBQVksRUFDL0MxSyxFQUFTdUYsSUFBV21GLEdBQWVBLEVBQVksRUFDL0NDLEVBQXVCeEQsSUFBMkJMLElBQXVCaEcsR0FBd0JnRyxFQUFtQixFQUNwSDhELEdBQU1mLEVBQU0sUUFBVTFELEdBQU8sUUFBVXNFLEVBQWUsSUFBTTFLLEdBQVUsSUFBTTRLLEVBQXVCQSxFQUFxQixDQUFDLEVBQUk1RCxHQUFpQyxDQUFDLEVBQUksSUFBTWhILEdBQVUsR0FDbkw4SyxHQUFNaEIsRUFBTSxRQUFVMUQsR0FBTyxRQUFVc0UsRUFBZSxJQUFNekssR0FBVSxJQUFNMkssRUFBdUJBLEVBQXFCLENBQUMsRUFBSTVELEdBQWlDLENBQUMsRUFBSSxJQUFNL0csR0FBVSxHQUV2TCxHQUFJLENBQUNXLEdBQVMsUUFBVSxDQUFDcUYsR0FBcUIsQ0FDNUMsR0FBSXdFLEdBQXFCLEtBQUssSUFBSSxLQUFLLElBQUlYLEVBQU0sUUFBVSxLQUFLLE1BQU0sRUFBRyxLQUFLLElBQUlBLEVBQU0sUUFBVSxLQUFLLE1BQU0sQ0FBQyxFQUFJVyxFQUNoSCxPQUdGLEtBQUssYUFBYTVHLEVBQUssRUFBSSxDQUM1QixDQUVELEdBQUkyQixHQUFTLENBQ1BtRixHQUNGQSxFQUFZLEdBQUtFLEdBQU12RSxJQUFVLEdBQ2pDcUUsRUFBWSxHQUFLRyxHQUFNdkUsSUFBVSxJQUVqQ29FLEVBQWMsQ0FDWixFQUFHLEVBQ0gsRUFBRyxFQUNILEVBQUcsRUFDSCxFQUFHLEVBQ0gsRUFBR0UsRUFDSCxFQUFHQyxDQUNmLEVBR1EsSUFBSUMsRUFBWSxVQUFVLE9BQU9KLEVBQVksRUFBRyxHQUFHLEVBQUUsT0FBT0EsRUFBWSxFQUFHLEdBQUcsRUFBRSxPQUFPQSxFQUFZLEVBQUcsR0FBRyxFQUFFLE9BQU9BLEVBQVksRUFBRyxHQUFHLEVBQUUsT0FBT0EsRUFBWSxFQUFHLEdBQUcsRUFBRSxPQUFPQSxFQUFZLEVBQUcsR0FBRyxFQUMxTGxNLEdBQUkrRyxHQUFTLGtCQUFtQnVGLENBQVMsRUFDekN0TSxHQUFJK0csR0FBUyxlQUFnQnVGLENBQVMsRUFDdEN0TSxHQUFJK0csR0FBUyxjQUFldUYsQ0FBUyxFQUNyQ3RNLEdBQUkrRyxHQUFTLFlBQWF1RixDQUFTLEVBQ25DekUsR0FBU3VFLEVBQ1R0RSxHQUFTdUUsRUFDVHpFLEdBQVd5RCxDQUNaLENBRURqRyxFQUFJLFlBQWNBLEVBQUksZ0JBQ3ZCLENBQ0YsRUFDRCxhQUFjLFVBQXdCLENBR3BDLEdBQUksQ0FBQzJCLEdBQVMsQ0FDWixJQUFJeG5DLEVBQVksS0FBSyxRQUFRLGVBQWlCLFNBQVMsS0FBT3NtQyxHQUMxRHdFLEVBQU8xSixHQUFRa0csR0FBUSxHQUFNOEIsR0FBeUIsR0FBTXBwQyxDQUFTLEVBQ3JFalQsRUFBVSxLQUFLLFFBRW5CLEdBQUlxOEMsR0FBeUIsQ0FJM0IsSUFGQUwsR0FBc0Ivb0MsRUFFZnlnQyxHQUFJc0ksR0FBcUIsVUFBVSxJQUFNLFVBQVl0SSxHQUFJc0ksR0FBcUIsV0FBVyxJQUFNLFFBQVVBLEtBQXdCLFVBQ3RJQSxHQUFzQkEsR0FBb0IsV0FHeENBLEtBQXdCLFNBQVMsTUFBUUEsS0FBd0IsU0FBUyxpQkFDeEVBLEtBQXdCLFdBQVVBLEdBQXNCN0gsR0FBeUIsR0FDckY0SixFQUFLLEtBQU8vQixHQUFvQixVQUNoQytCLEVBQUssTUFBUS9CLEdBQW9CLFlBRWpDQSxHQUFzQjdILEdBQXlCLEVBR2pEOEgsR0FBbUNqRyxHQUF3QmdHLEVBQW1CLENBQy9FLENBRUR2QixHQUFVRixHQUFPLFVBQVUsRUFBSSxFQUMvQi9HLEdBQVlpSCxHQUFTejZDLEVBQVEsV0FBWSxFQUFLLEVBQzlDd3pDLEdBQVlpSCxHQUFTejZDLEVBQVEsY0FBZSxFQUFJLEVBQ2hEd3pDLEdBQVlpSCxHQUFTejZDLEVBQVEsVUFBVyxFQUFJLEVBQzVDMHpDLEdBQUkrRyxHQUFTLGFBQWMsRUFBRSxFQUM3Qi9HLEdBQUkrRyxHQUFTLFlBQWEsRUFBRSxFQUM1Qi9HLEdBQUkrRyxHQUFTLGFBQWMsWUFBWSxFQUN2Qy9HLEdBQUkrRyxHQUFTLFNBQVUsQ0FBQyxFQUN4Qi9HLEdBQUkrRyxHQUFTLE1BQU9zRCxFQUFLLEdBQUcsRUFDNUJySyxHQUFJK0csR0FBUyxPQUFRc0QsRUFBSyxJQUFJLEVBQzlCckssR0FBSStHLEdBQVMsUUFBU3NELEVBQUssS0FBSyxFQUNoQ3JLLEdBQUkrRyxHQUFTLFNBQVVzRCxFQUFLLE1BQU0sRUFDbENySyxHQUFJK0csR0FBUyxVQUFXLEtBQUssRUFDN0IvRyxHQUFJK0csR0FBUyxXQUFZNEIsR0FBMEIsV0FBYSxPQUFPLEVBQ3ZFM0ksR0FBSStHLEdBQVMsU0FBVSxRQUFRLEVBQy9CL0csR0FBSStHLEdBQVMsZ0JBQWlCLE1BQU0sRUFDcEM1RSxHQUFTLE1BQVE0RSxHQUNqQnhuQyxFQUFVLFlBQVl3bkMsRUFBTyxFQUU3Qi9HLEdBQUkrRyxHQUFTLG1CQUFvQmdCLEdBQWtCLFNBQVNoQixHQUFRLE1BQU0sS0FBSyxFQUFJLElBQU0sS0FBT2lCLEdBQWlCLFNBQVNqQixHQUFRLE1BQU0sTUFBTSxFQUFJLElBQU0sR0FBRyxDQUM1SixDQUNGLEVBQ0QsYUFBYyxTQUVkM0IsRUFFQTBHLEVBQVUsQ0FDUixJQUFJemYsRUFBUSxLQUVSOGUsRUFBZS9GLEVBQUksYUFDbkI5NEMsRUFBVSsvQixFQUFNLFFBS3BCLEdBSkF1YSxHQUFZLFlBQWEsS0FBTSxDQUM3QixJQUFLeEIsQ0FDWCxDQUFLLEVBRUdqRCxHQUFTLGNBQWUsQ0FDMUIsS0FBSyxRQUFPLEVBRVosTUFDRCxDQUVEeUUsR0FBWSxhQUFjLElBQUksRUFFekJ6RSxHQUFTLGdCQUNaNEQsR0FBVWppQyxHQUFNK2lDLEVBQU0sRUFDdEJkLEdBQVEsVUFBWSxHQUNwQkEsR0FBUSxNQUFNLGFBQWEsRUFBSSxHQUUvQixLQUFLLFdBQVUsRUFFZmpHLEdBQVlpRyxHQUFTLEtBQUssUUFBUSxZQUFhLEVBQUssRUFDcEQ1RCxHQUFTLE1BQVE0RCxJQUluQjFaLEVBQU0sUUFBVXdmLEdBQVUsVUFBWSxDQUNwQ2pGLEdBQVksUUFBU3ZhLENBQUssRUFDdEIsQ0FBQThWLEdBQVMsZ0JBRVI5VixFQUFNLFFBQVEsbUJBQ2pCd1osR0FBTyxhQUFhRSxHQUFTYyxFQUFNLEVBR3JDeGEsRUFBTSxXQUFVLEVBRWhCaWIsR0FBZSxDQUNiLFNBQVVqYixFQUNWLEtBQU0sT0FDZCxDQUFPLEVBQ1AsQ0FBSyxFQUNELENBQUN5ZixHQUFZaE0sR0FBWStHLEdBQVF2NkMsRUFBUSxVQUFXLEVBQUksRUFFcER3L0MsR0FDRnJFLEdBQWtCLEdBQ2xCcGIsRUFBTSxRQUFVLFlBQVlBLEVBQU0saUJBQWtCLEVBQUUsSUFHdERrVCxHQUFJLFNBQVUsVUFBV2xULEVBQU0sT0FBTyxFQUN0Q2tULEdBQUksU0FBVSxXQUFZbFQsRUFBTSxPQUFPLEVBQ3ZDa1QsR0FBSSxTQUFVLGNBQWVsVCxFQUFNLE9BQU8sRUFFdEM4ZSxJQUNGQSxFQUFhLGNBQWdCLE9BQzdCNytDLEVBQVEsU0FBV0EsRUFBUSxRQUFRLEtBQUsrL0IsRUFBTzhlLEVBQWN0RSxFQUFNLEdBR3JFL3NCLEdBQUcsU0FBVSxPQUFRdVMsQ0FBSyxFQUUxQjJULEdBQUk2RyxHQUFRLFlBQWEsZUFBZSxHQUcxQ1csR0FBc0IsR0FDdEJuYixFQUFNLGFBQWV3ZixHQUFVeGYsRUFBTSxhQUFhLEtBQUtBLEVBQU95ZixFQUFVMUcsQ0FBRyxDQUFDLEVBQzVFdHJCLEdBQUcsU0FBVSxjQUFldVMsQ0FBSyxFQUNqQzhhLEdBQVEsR0FFSmhJLElBQ0ZhLEdBQUksU0FBUyxLQUFNLGNBQWUsTUFBTSxDQUUzQyxFQUVELFlBQWEsU0FFYm9GLEVBQUssQ0FDSCxJQUFJanhDLEVBQUssS0FBSyxHQUNWMkMsRUFBU3N1QyxFQUFJLE9BQ2JzRSxFQUNBQyxFQUNBNEMsRUFDQWpnRCxFQUFVLEtBQUssUUFDZit3QixFQUFRL3dCLEVBQVEsTUFDaEJrZ0QsRUFBaUJySyxHQUFTLE9BQzFCc0ssRUFBVWxGLEtBQWdCbHFCLEVBQzFCcXZCLEVBQVVwZ0QsRUFBUSxLQUNsQnFnRCxFQUFlcEcsSUFBZWlHLEVBQzlCNUMsRUFDQXZkLEVBQVEsS0FDUnVnQixFQUFpQixHQUVyQixHQUFJcEUsR0FBUyxPQUViLFNBQVNxRSxFQUFjaGpELEdBQU1pakQsRUFBTyxDQUNsQ2xHLEdBQVkvOEMsR0FBTXdpQyxFQUFPaVMsR0FBZSxDQUN0QyxJQUFLOEcsRUFDTCxRQUFTcUgsRUFDVCxLQUFNN0MsRUFBVyxXQUFhLGFBQzlCLE9BQVEyQyxFQUNSLFNBQVU3QyxFQUNWLFdBQVlDLEVBQ1osUUFBUytDLEVBQ1QsYUFBY0MsRUFDZCxPQUFRNzFDLEVBQ1IsVUFBV2kyQyxFQUNYLE9BQVEsU0FBZ0JqMkMsRUFBUXluQixFQUFPLENBQ3JDLE9BQU95dUIsR0FBUW5ILEdBQVExeEMsRUFBSTB5QyxHQUFRNkMsRUFBVTV5QyxFQUFRNnBDLEdBQVE3cEMsQ0FBTSxFQUFHc3VDLEVBQUs3bUIsQ0FBSyxDQUNqRixFQUNELFFBQVM5WixDQUNqQixFQUFTcW9DLENBQUssQ0FBQyxDQUNWLENBR0QsU0FBU0csR0FBVSxDQUNqQkosRUFBYywwQkFBMEIsRUFFeEN4Z0IsRUFBTSxzQkFBcUIsRUFFdkJBLElBQVVzZ0IsR0FDWkEsRUFBYSxzQkFBcUIsQ0FFckMsQ0FHRCxTQUFTSSxFQUFVRyxHQUFXLENBQzVCLE9BQUFMLEVBQWMsb0JBQXFCLENBQ2pDLFVBQVdLLEVBQ25CLENBQU8sRUFFR0EsS0FFRVQsRUFDRkQsRUFBZSxXQUFVLEVBRXpCQSxFQUFlLFdBQVduZ0IsQ0FBSyxFQUc3QkEsSUFBVXNnQixJQUVaN00sR0FBWStHLEdBQVFOLEdBQWNBLEdBQVksUUFBUSxXQUFhaUcsRUFBZSxRQUFRLFdBQVksRUFBSyxFQUMzRzFNLEdBQVkrRyxHQUFRdjZDLEVBQVEsV0FBWSxFQUFJLEdBRzFDaTZDLEtBQWdCbGEsR0FBU0EsSUFBVThWLEdBQVMsT0FDOUNvRSxHQUFjbGEsRUFDTEEsSUFBVThWLEdBQVMsUUFBVW9FLEtBQ3RDQSxHQUFjLE1BSVpvRyxJQUFpQnRnQixJQUNuQkEsRUFBTSxzQkFBd0J2MUIsR0FHaEN1MUIsRUFBTSxXQUFXLFVBQVksQ0FDM0J3Z0IsRUFBYywyQkFBMkIsRUFDekN4Z0IsRUFBTSxzQkFBd0IsSUFDeEMsQ0FBUyxFQUVHQSxJQUFVc2dCLElBQ1pBLEVBQWEsV0FBVSxFQUN2QkEsRUFBYSxzQkFBd0IsUUFLckM3MUMsSUFBVyt2QyxJQUFVLENBQUNBLEdBQU8sVUFBWS92QyxJQUFXM0MsR0FBTSxDQUFDMkMsRUFBTyxZQUNwRW14QyxHQUFhLE1BSVgsQ0FBQzM3QyxFQUFRLGdCQUFrQixDQUFDODRDLEVBQUksUUFBVXR1QyxJQUFXLFdBQ3ZEK3ZDLEdBQU8sV0FBV2hELEVBQU8sRUFBRSxpQkFBaUJ1QixFQUFJLE1BQU0sRUFHdEQsQ0FBQzhILElBQWFsQyxHQUE4QjVGLENBQUcsR0FHakQsQ0FBQzk0QyxFQUFRLGdCQUFrQjg0QyxFQUFJLGlCQUFtQkEsRUFBSSxrQkFDL0N3SCxFQUFpQixFQUN6QixDQUdELFNBQVNub0MsR0FBVSxDQUNqQjBoQyxHQUFXbDBDLEdBQU00MEMsRUFBTSxFQUN2QlIsR0FBb0JwMEMsR0FBTTQwQyxHQUFRdjZDLEVBQVEsU0FBUyxFQUVuRGc3QyxHQUFlLENBQ2IsU0FBVWpiLEVBQ1YsS0FBTSxTQUNOLEtBQU1sNEIsRUFDTixTQUFVZ3lDLEdBQ1Ysa0JBQW1CRSxHQUNuQixjQUFlakIsQ0FDdkIsQ0FBTyxDQUNGLENBUUQsR0FOSUEsRUFBSSxpQkFBbUIsUUFDekJBLEVBQUksWUFBY0EsRUFBSSxpQkFHeEJ0dUMsRUFBUzZvQyxHQUFRN29DLEVBQVF4SyxFQUFRLFVBQVc2SCxFQUFJLEVBQUksRUFDcEQwNEMsRUFBYyxVQUFVLEVBQ3BCMUssR0FBUyxjQUFlLE9BQU95SyxFQUVuQyxHQUFJL0YsR0FBTyxTQUFTekIsRUFBSSxNQUFNLEdBQUt0dUMsRUFBTyxVQUFZQSxFQUFPLFlBQWNBLEVBQU8sWUFBY3UxQixFQUFNLHdCQUEwQnYxQixFQUM5SCxPQUFPaTJDLEVBQVUsRUFBSyxFQUt4QixHQUZBdEYsR0FBa0IsR0FFZCtFLEdBQWtCLENBQUNsZ0QsRUFBUSxXQUFhbWdELEVBQVVDLElBQVlILEVBQVN6RixLQUFhakIsSUFDdEZVLEtBQWdCLE9BQVMsS0FBSyxZQUFjZ0IsR0FBWSxVQUFVLEtBQU1pRixFQUFnQjNGLEdBQVF6QixDQUFHLElBQU0vbkIsRUFBTSxTQUFTLEtBQU1tdkIsRUFBZ0IzRixHQUFRekIsQ0FBRyxHQUFJLENBSTdKLEdBSEF3RSxFQUFXLEtBQUssY0FBY3hFLEVBQUt0dUMsQ0FBTSxJQUFNLFdBQy9DNHlDLEVBQVcvSSxHQUFRa0csRUFBTSxFQUN6QmdHLEVBQWMsZUFBZSxFQUN6QjFLLEdBQVMsY0FBZSxPQUFPeUssRUFFbkMsR0FBSUwsRUFDRixPQUFBekYsR0FBV2pCLEdBRVhvSCxJQUVBLEtBQUssV0FBVSxFQUVmSixFQUFjLFFBQVEsRUFFakIxSyxHQUFTLGdCQUNSNkUsR0FDRm5CLEdBQU8sYUFBYWdCLEdBQVFHLEVBQU0sRUFFbENuQixHQUFPLFlBQVlnQixFQUFNLEdBSXRCa0csRUFBVSxFQUFJLEVBR3ZCLElBQUlJLEVBQWMvSyxHQUFVanVDLEVBQUk3SCxFQUFRLFNBQVMsRUFFakQsR0FBSSxDQUFDNmdELEdBQWVDLEdBQWFoSSxFQUFLd0UsRUFBVSxJQUFJLEdBQUssQ0FBQ3VELEVBQVksU0FBVSxDQUc5RSxHQUFJQSxJQUFnQnRHLEdBQ2xCLE9BQU9rRyxFQUFVLEVBQUssRUFZeEIsR0FSSUksR0FBZWg1QyxJQUFPaXhDLEVBQUksU0FDNUJ0dUMsRUFBU3EyQyxHQUdQcjJDLElBQ0Y2eUMsRUFBYWhKLEdBQVE3cEMsQ0FBTSxHQUd6QmsyQyxHQUFRbkgsR0FBUTF4QyxFQUFJMHlDLEdBQVE2QyxFQUFVNXlDLEVBQVE2eUMsRUFBWXZFLEVBQUssQ0FBQyxDQUFDdHVDLENBQU0sSUFBTSxHQUMvRSxPQUFBbTJDLElBQ0E5NEMsRUFBRyxZQUFZMHlDLEVBQU0sRUFDckJDLEdBQVczeUMsRUFFWHNRLElBQ09zb0MsRUFBVSxFQUFJLENBRS9CLFNBQWlCSSxHQUFlRSxHQUFjakksRUFBS3dFLEVBQVUsSUFBSSxFQUFHLENBRTVELElBQUkwRCxFQUFhdkwsR0FBUzV0QyxFQUFJLEVBQUc3SCxFQUFTLEVBQUksRUFFOUMsR0FBSWdoRCxJQUFlekcsR0FDakIsT0FBT2tHLEVBQVUsRUFBSyxFQU14QixHQUhBajJDLEVBQVN3MkMsRUFDVDNELEVBQWFoSixHQUFRN3BDLENBQU0sRUFFdkJrMkMsR0FBUW5ILEdBQVExeEMsRUFBSTB5QyxHQUFRNkMsRUFBVTV5QyxFQUFRNnlDLEVBQVl2RSxFQUFLLEVBQUssSUFBTSxHQUM1RSxPQUFBNkgsSUFDQTk0QyxFQUFHLGFBQWEweUMsR0FBUXlHLENBQVUsRUFDbEN4RyxHQUFXM3lDLEVBRVhzUSxJQUNPc29DLEVBQVUsRUFBSSxDQUUvQixTQUFpQmoyQyxFQUFPLGFBQWUzQyxFQUFJLENBQ25DdzFDLEVBQWFoSixHQUFRN3BDLENBQU0sRUFDM0IsSUFBSXkyQyxFQUFZLEVBQ1pDLEVBQ0FDLEVBQWlCNUcsR0FBTyxhQUFlMXlDLEVBQ3ZDdTVDLEVBQWtCLENBQUNqRSxHQUFtQjVDLEdBQU8sVUFBWUEsR0FBTyxRQUFVNkMsRUFBVTV5QyxFQUFPLFVBQVlBLEVBQU8sUUFBVTZ5QyxFQUFZQyxDQUFRLEVBQzVJK0QsRUFBUS9ELEVBQVcsTUFBUSxPQUMzQmdFLEVBQWtCbk0sR0FBZTNxQyxFQUFRLE1BQU8sS0FBSyxHQUFLMnFDLEdBQWVvRixHQUFRLE1BQU8sS0FBSyxFQUM3RmdILEVBQWVELEVBQWtCQSxFQUFnQixVQUFZLE9BRTdEM0YsS0FBZW54QyxJQUNqQjAyQyxFQUF3QjdELEVBQVdnRSxDQUFLLEVBQ3hDeEYsR0FBd0IsR0FDeEJDLEdBQXlCLENBQUNzRixHQUFtQnBoRCxFQUFRLFlBQWNtaEQsR0FHckVGLEVBQVlPLEdBQWtCMUksRUFBS3R1QyxFQUFRNnlDLEVBQVlDLEVBQVU4RCxFQUFrQixFQUFJcGhELEVBQVEsY0FBZUEsRUFBUSx1QkFBeUIsS0FBT0EsRUFBUSxjQUFnQkEsRUFBUSxzQkFBdUI4N0MsR0FBd0JILEtBQWVueEMsQ0FBTSxFQUMxUCxJQUFJaTNDLEVBRUosR0FBSVIsSUFBYyxFQUFHLENBRW5CLElBQUlTLEdBQVkvN0MsR0FBTTQwQyxFQUFNLEVBRTVCLEdBQ0VtSCxJQUFhVCxFQUNiUSxFQUFVakgsR0FBUyxTQUFTa0gsRUFBUyxRQUM5QkQsSUFBWS9OLEdBQUkrTixFQUFTLFNBQVMsSUFBTSxRQUFVQSxJQUFZaEgsSUFDeEUsQ0FHRCxHQUFJd0csSUFBYyxHQUFLUSxJQUFZajNDLEVBQ2pDLE9BQU9pMkMsRUFBVSxFQUFLLEVBR3hCOUUsR0FBYW54QyxFQUNib3hDLEdBQWdCcUYsRUFDaEIsSUFBSVUsR0FBY24zQyxFQUFPLG1CQUNyQnluQixHQUFRLEdBQ1pBLEdBQVFndkIsSUFBYyxFQUV0QixJQUFJVyxHQUFhbEIsR0FBUW5ILEdBQVExeEMsRUFBSTB5QyxHQUFRNkMsRUFBVTV5QyxFQUFRNnlDLEVBQVl2RSxFQUFLN21CLEVBQUssRUFFckYsR0FBSTJ2QixLQUFlLEdBQ2pCLE9BQUlBLEtBQWUsR0FBS0EsS0FBZSxNQUNyQzN2QixHQUFRMnZCLEtBQWUsR0FHekIxRixHQUFVLEdBQ1YsV0FBVzJGLEdBQVcsRUFBRSxFQUN4QmxCLElBRUkxdUIsSUFBUyxDQUFDMHZCLEdBQ1o5NUMsRUFBRyxZQUFZMHlDLEVBQU0sRUFFckIvdkMsRUFBTyxXQUFXLGFBQWErdkMsR0FBUXRvQixHQUFRMHZCLEdBQWNuM0MsQ0FBTSxFQUlqRTgyQyxHQUNGbkssR0FBU21LLEVBQWlCLEVBQUdDLEVBQWVELEVBQWdCLFNBQVMsRUFHdkU5RyxHQUFXRCxHQUFPLFdBR2QyRyxJQUEwQixRQUFhLENBQUNwRixLQUMxQ0MsR0FBcUIsS0FBSyxJQUFJbUYsRUFBd0I3TSxHQUFRN3BDLENBQU0sRUFBRTYyQyxDQUFLLENBQUMsR0FHOUVscEMsSUFDT3NvQyxFQUFVLEVBQUksQ0FFeEIsQ0FFRCxHQUFJNTRDLEVBQUcsU0FBUzB5QyxFQUFNLEVBQ3BCLE9BQU9rRyxFQUFVLEVBQUssQ0FFekIsQ0FFRCxNQUFPLEVBQ1IsRUFDRCxzQkFBdUIsS0FDdkIsZUFBZ0IsVUFBMEIsQ0FDeEN4TixHQUFJLFNBQVUsWUFBYSxLQUFLLFlBQVksRUFDNUNBLEdBQUksU0FBVSxZQUFhLEtBQUssWUFBWSxFQUM1Q0EsR0FBSSxTQUFVLGNBQWUsS0FBSyxZQUFZLEVBQzlDQSxHQUFJLFNBQVUsV0FBWXlMLEVBQTZCLEVBQ3ZEekwsR0FBSSxTQUFVLFlBQWF5TCxFQUE2QixFQUN4RHpMLEdBQUksU0FBVSxZQUFheUwsRUFBNkIsQ0FDekQsRUFDRCxhQUFjLFVBQXdCLENBQ3BDLElBQUlVLEVBQWdCLEtBQUssR0FBRyxjQUM1Qm5NLEdBQUltTSxFQUFlLFVBQVcsS0FBSyxPQUFPLEVBQzFDbk0sR0FBSW1NLEVBQWUsV0FBWSxLQUFLLE9BQU8sRUFDM0NuTSxHQUFJbU0sRUFBZSxZQUFhLEtBQUssT0FBTyxFQUM1Q25NLEdBQUltTSxFQUFlLGNBQWUsS0FBSyxPQUFPLEVBQzlDbk0sR0FBSSxTQUFVLGNBQWUsSUFBSSxDQUNsQyxFQUNELFFBQVMsU0FFVDZGLEVBQUssQ0FDSCxJQUFJanhDLEVBQUssS0FBSyxHQUNWN0gsRUFBVSxLQUFLLFFBWW5CLEdBVkE2NUMsR0FBV2wwQyxHQUFNNDBDLEVBQU0sRUFDdkJSLEdBQW9CcDBDLEdBQU00MEMsR0FBUXY2QyxFQUFRLFNBQVMsRUFDbkRzNkMsR0FBWSxPQUFRLEtBQU0sQ0FDeEIsSUFBS3hCLENBQ1gsQ0FBSyxFQUNEMEIsR0FBV0QsSUFBVUEsR0FBTyxXQUU1QlYsR0FBV2wwQyxHQUFNNDBDLEVBQU0sRUFDdkJSLEdBQW9CcDBDLEdBQU00MEMsR0FBUXY2QyxFQUFRLFNBQVMsRUFFL0M2MUMsR0FBUyxjQUFlLENBQzFCLEtBQUssU0FBUSxFQUViLE1BQ0QsQ0FFRHFGLEdBQXNCLEdBQ3RCWSxHQUF5QixHQUN6QkQsR0FBd0IsR0FDeEIsY0FBYyxLQUFLLE9BQU8sRUFDMUIsYUFBYSxLQUFLLGVBQWUsRUFFakNpRyxHQUFnQixLQUFLLE9BQU8sRUFFNUJBLEdBQWdCLEtBQUssWUFBWSxFQUc3QixLQUFLLGtCQUNQN08sR0FBSSxTQUFVLE9BQVEsSUFBSSxFQUMxQkEsR0FBSXByQyxFQUFJLFlBQWEsS0FBSyxZQUFZLEdBR3hDLEtBQUssZUFBYyxFQUVuQixLQUFLLGFBQVksRUFFYmdyQyxJQUNGYSxHQUFJLFNBQVMsS0FBTSxjQUFlLEVBQUUsRUFHdENBLEdBQUk2RyxHQUFRLFlBQWEsRUFBRSxFQUV2QnpCLElBQ0UrQixLQUNGL0IsRUFBSSxZQUFjQSxFQUFJLGlCQUN0QixDQUFDOTRDLEVBQVEsWUFBYzg0QyxFQUFJLGdCQUFlLEdBRzVDMkIsSUFBV0EsR0FBUSxZQUFjQSxHQUFRLFdBQVcsWUFBWUEsRUFBTyxHQUVuRWxCLEtBQVdpQixJQUFZUCxJQUFlQSxHQUFZLGNBQWdCLFVBRXBFUixJQUFXQSxHQUFRLFlBQWNBLEdBQVEsV0FBVyxZQUFZQSxFQUFPLEVBR3JFYyxLQUNFLEtBQUssaUJBQ1B0SCxHQUFJc0gsR0FBUSxVQUFXLElBQUksRUFHN0IrRSxHQUFrQi9FLEVBQU0sRUFFeEJBLEdBQU8sTUFBTSxhQUFhLEVBQUksR0FHMUJNLElBQVMsQ0FBQ0ssSUFDWjFILEdBQVkrRyxHQUFRTixHQUFjQSxHQUFZLFFBQVEsV0FBYSxLQUFLLFFBQVEsV0FBWSxFQUFLLEVBR25HekcsR0FBWStHLEdBQVEsS0FBSyxRQUFRLFlBQWEsRUFBSyxFQUVuRFMsR0FBZSxDQUNiLFNBQVUsS0FDVixLQUFNLFdBQ04sS0FBTVIsR0FDTixTQUFVLEtBQ1Ysa0JBQW1CLEtBQ25CLGNBQWUxQixDQUN6QixDQUFTLEVBRUdTLEtBQVdpQixJQUNUWCxJQUFZLElBRWRtQixHQUFlLENBQ2IsT0FBUVIsR0FDUixLQUFNLE1BQ04sS0FBTUEsR0FDTixPQUFRakIsR0FDUixjQUFlVCxDQUM3QixDQUFhLEVBR0RrQyxHQUFlLENBQ2IsU0FBVSxLQUNWLEtBQU0sU0FDTixLQUFNUixHQUNOLGNBQWUxQixDQUM3QixDQUFhLEVBR0RrQyxHQUFlLENBQ2IsT0FBUVIsR0FDUixLQUFNLE9BQ04sS0FBTUEsR0FDTixPQUFRakIsR0FDUixjQUFlVCxDQUM3QixDQUFhLEVBRURrQyxHQUFlLENBQ2IsU0FBVSxLQUNWLEtBQU0sT0FDTixLQUFNUixHQUNOLGNBQWUxQixDQUM3QixDQUFhLEdBR0htQixJQUFlQSxHQUFZLFFBRXZCSixLQUFhRCxJQUNYQyxJQUFZLElBRWRtQixHQUFlLENBQ2IsU0FBVSxLQUNWLEtBQU0sU0FDTixLQUFNUixHQUNOLGNBQWUxQixDQUMvQixDQUFlLEVBRURrQyxHQUFlLENBQ2IsU0FBVSxLQUNWLEtBQU0sT0FDTixLQUFNUixHQUNOLGNBQWUxQixDQUMvQixDQUFlLEdBS0hqRCxHQUFTLFVBRVBnRSxJQUFZLE1BQVFBLEtBQWEsTUFDbkNBLEdBQVdELEdBQ1hHLEdBQW9CRCxJQUd0QmtCLEdBQWUsQ0FDYixTQUFVLEtBQ1YsS0FBTSxNQUNOLEtBQU1SLEdBQ04sY0FBZTFCLENBQzNCLENBQVcsRUFHRCxLQUFLLEtBQUksS0FLZixLQUFLLFNBQVEsQ0FDZCxFQUNELFNBQVUsVUFBb0IsQ0FDNUJ3QixHQUFZLFVBQVcsSUFBSSxFQUMzQmYsR0FBU2dCLEdBQVNDLEdBQVdDLEdBQVVDLEdBQVNqQixHQUFVa0IsR0FBYUMsR0FBY1MsR0FBU0MsR0FBV1QsR0FBUWhCLEdBQVdFLEdBQW9CSCxHQUFXRSxHQUFvQjZCLEdBQWFDLEdBQWdCM0IsR0FBY2dCLEdBQWNwRixHQUFTLFFBQVVBLEdBQVMsTUFBUUEsR0FBUyxNQUFRQSxHQUFTLE9BQVMsS0FDL1NzRyxHQUFrQixRQUFRLFNBQVV0MEMsRUFBSSxDQUN0Q0EsRUFBRyxRQUFVLEVBQ25CLENBQUssRUFDRHMwQyxHQUFrQixPQUFTWixHQUFTQyxHQUFTLENBQzlDLEVBQ0QsWUFBYSxTQUViMUMsRUFBSyxDQUNILE9BQVFBLEVBQUksS0FBSSxDQUNkLElBQUssT0FDTCxJQUFLLFVBQ0gsS0FBSyxRQUFRQSxDQUFHLEVBRWhCLE1BRUYsSUFBSyxZQUNMLElBQUssV0FDQ3lCLEtBQ0YsS0FBSyxZQUFZekIsQ0FBRyxFQUVwQmlKLEdBQWdCakosQ0FBRyxHQUdyQixNQUVGLElBQUssY0FDSEEsRUFBSSxlQUFjLEVBQ2xCLEtBQ0gsQ0FDRixFQU1ELFFBQVMsVUFBbUIsQ0FRMUIsUUFQSXByQyxFQUFRLENBQUUsRUFDVjdGLEVBQ0F6RSxFQUFXLEtBQUssR0FBRyxTQUNuQkQsRUFBSSxFQUNKb0QsRUFBSW5ELEVBQVMsT0FDYnBELEVBQVUsS0FBSyxRQUVabUQsRUFBSW9ELEVBQUdwRCxJQUNaMEUsRUFBS3pFLEVBQVNELENBQUMsRUFFWGt3QyxHQUFReHJDLEVBQUk3SCxFQUFRLFVBQVcsS0FBSyxHQUFJLEVBQUssR0FDL0MwTixFQUFNLEtBQUs3RixFQUFHLGFBQWE3SCxFQUFRLFVBQVUsR0FBS2dpRCxHQUFZbjZDLENBQUUsQ0FBQyxFQUlyRSxPQUFPNkYsQ0FDUixFQU1ELEtBQU0sU0FBY0EsRUFBT3UwQyxFQUFjLENBQ3ZDLElBQUlDLEVBQVEsQ0FBRSxFQUNWM0ksRUFBUyxLQUFLLEdBQ2xCLEtBQUssUUFBUyxFQUFDLFFBQVEsU0FBVXZtQyxFQUFJN1AsRUFBRyxDQUN0QyxJQUFJMEUsRUFBSzB4QyxFQUFPLFNBQVNwMkMsQ0FBQyxFQUV0Qmt3QyxHQUFReHJDLEVBQUksS0FBSyxRQUFRLFVBQVcweEMsRUFBUSxFQUFLLElBQ25EMkksRUFBTWx2QyxDQUFFLEVBQUluTCxFQUVmLEVBQUUsSUFBSSxFQUNQbzZDLEdBQWdCLEtBQUssd0JBQ3JCdjBDLEVBQU0sUUFBUSxTQUFVc0YsRUFBSSxDQUN0Qmt2QyxFQUFNbHZDLENBQUUsSUFDVnVtQyxFQUFPLFlBQVkySSxFQUFNbHZDLENBQUUsQ0FBQyxFQUM1QnVtQyxFQUFPLFlBQVkySSxFQUFNbHZDLENBQUUsQ0FBQyxFQUVwQyxDQUFLLEVBQ0RpdkMsR0FBZ0IsS0FBSyxZQUN0QixFQUtELEtBQU0sVUFBZ0IsQ0FDcEIsSUFBSXI5QyxFQUFRLEtBQUssUUFBUSxNQUN6QkEsR0FBU0EsRUFBTSxLQUFPQSxFQUFNLElBQUksSUFBSSxDQUNyQyxFQVFELFFBQVMsU0FBbUJpRCxFQUFJc3JDLEVBQVUsQ0FDeEMsT0FBT0UsR0FBUXhyQyxFQUFJc3JDLEdBQVksS0FBSyxRQUFRLFVBQVcsS0FBSyxHQUFJLEVBQUssQ0FDdEUsRUFRRCxPQUFRLFNBQWdCNTFDLEVBQU0yQixFQUFPLENBQ25DLElBQUljLEVBQVUsS0FBSyxRQUVuQixHQUFJZCxJQUFVLE9BQ1osT0FBT2MsRUFBUXpDLENBQUksRUFFbkIsSUFBSTY3QyxFQUFnQlIsR0FBYyxhQUFhLEtBQU1yN0MsRUFBTTJCLENBQUssRUFFNUQsT0FBT2s2QyxFQUFrQixJQUMzQnA1QyxFQUFRekMsQ0FBSSxFQUFJNjdDLEVBRWhCcDVDLEVBQVF6QyxDQUFJLEVBQUkyQixFQUdkM0IsSUFBUyxTQUNYMmdELEdBQWNsK0MsQ0FBTyxDQUcxQixFQUtELFFBQVMsVUFBbUIsQ0FDMUJzNkMsR0FBWSxVQUFXLElBQUksRUFDM0IsSUFBSXp5QyxFQUFLLEtBQUssR0FDZEEsRUFBRzB2QyxFQUFPLEVBQUksS0FDZHRFLEdBQUlwckMsRUFBSSxZQUFhLEtBQUssV0FBVyxFQUNyQ29yQyxHQUFJcHJDLEVBQUksYUFBYyxLQUFLLFdBQVcsRUFDdENvckMsR0FBSXByQyxFQUFJLGNBQWUsS0FBSyxXQUFXLEVBRW5DLEtBQUssa0JBQ1BvckMsR0FBSXByQyxFQUFJLFdBQVksSUFBSSxFQUN4Qm9yQyxHQUFJcHJDLEVBQUksWUFBYSxJQUFJLEdBSTNCLE1BQU0sVUFBVSxRQUFRLEtBQUtBLEVBQUcsaUJBQWlCLGFBQWEsRUFBRyxTQUFVQSxFQUFJLENBQzdFQSxFQUFHLGdCQUFnQixXQUFXLENBQ3BDLENBQUssRUFFRCxLQUFLLFFBQU8sRUFFWixLQUFLLDBCQUF5QixFQUU5QnV6QyxHQUFVLE9BQU9BLEdBQVUsUUFBUSxLQUFLLEVBQUUsRUFBRyxDQUFDLEVBQzlDLEtBQUssR0FBS3Z6QyxFQUFLLElBQ2hCLEVBQ0QsV0FBWSxVQUFzQixDQUNoQyxHQUFJLENBQUMreUMsR0FBYSxDQUVoQixHQURBTixHQUFZLFlBQWEsSUFBSSxFQUN6QnpFLEdBQVMsY0FBZSxPQUM1Qm5DLEdBQUkrRixHQUFTLFVBQVcsTUFBTSxFQUUxQixLQUFLLFFBQVEsbUJBQXFCQSxHQUFRLFlBQzVDQSxHQUFRLFdBQVcsWUFBWUEsRUFBTyxFQUd4Q21CLEdBQWMsRUFDZixDQUNGLEVBQ0QsV0FBWSxTQUFvQlgsRUFBYSxDQUMzQyxHQUFJQSxFQUFZLGNBQWdCLFFBQVMsQ0FDdkMsS0FBSyxXQUFVLEVBRWYsTUFDRCxDQUVELEdBQUlXLEdBQWEsQ0FFZixHQURBTixHQUFZLFlBQWEsSUFBSSxFQUN6QnpFLEdBQVMsY0FBZSxPQUV4QjBFLEdBQU8sWUFBY2hCLElBQVUsQ0FBQyxLQUFLLFFBQVEsTUFBTSxZQUNyREEsR0FBTyxhQUFhRSxHQUFTYyxFQUFNLEVBQzFCRyxHQUNUbkIsR0FBTyxhQUFhRSxHQUFTaUIsRUFBTSxFQUVuQ25CLEdBQU8sWUFBWUUsRUFBTyxFQUd4QixLQUFLLFFBQVEsTUFBTSxhQUNyQixLQUFLLFFBQVFjLEdBQVFkLEVBQU8sRUFHOUIvRixHQUFJK0YsR0FBUyxVQUFXLEVBQUUsRUFDMUJtQixHQUFjLEVBQ2YsQ0FDRixDQUNILEVBRUEsU0FBU21ILEdBRVRqSixFQUFLLENBQ0NBLEVBQUksZUFDTkEsRUFBSSxhQUFhLFdBQWEsUUFHaENBLEVBQUksWUFBY0EsRUFBSSxnQkFDeEIsQ0FFQSxTQUFTNEgsR0FBUS9HLEVBQVFELEVBQU1hLEVBQVE2QyxFQUFVNUQsRUFBVTZELEVBQVlyRCxFQUFlbUksRUFBaUIsQ0FDckcsSUFBSXJKLEVBQ0FELEVBQVdjLEVBQU9wQyxFQUFPLEVBQ3pCNkssRUFBV3ZKLEVBQVMsUUFBUSxPQUM1QndKLEVBRUosT0FBSSxPQUFPLGFBQWUsQ0FBQzNQLElBQWMsQ0FBQ0MsR0FDeENtRyxFQUFNLElBQUksWUFBWSxPQUFRLENBQzVCLFFBQVMsR0FDVCxXQUFZLEVBQ2xCLENBQUssR0FFREEsRUFBTSxTQUFTLFlBQVksT0FBTyxFQUNsQ0EsRUFBSSxVQUFVLE9BQVEsR0FBTSxFQUFJLEdBR2xDQSxFQUFJLEdBQUtZLEVBQ1RaLEVBQUksS0FBT2EsRUFDWGIsRUFBSSxRQUFVeUIsRUFDZHpCLEVBQUksWUFBY3NFLEVBQ2xCdEUsRUFBSSxRQUFVVSxHQUFZRSxFQUMxQlosRUFBSSxZQUFjdUUsR0FBY2hKLEdBQVFxRixDQUFJLEVBQzVDWixFQUFJLGdCQUFrQnFKLEVBQ3RCckosRUFBSSxjQUFnQmtCLEVBQ3BCTCxFQUFPLGNBQWNiLENBQUcsRUFFcEJzSixJQUNGQyxFQUFTRCxFQUFTLEtBQUt2SixFQUFVQyxFQUFLa0IsQ0FBYSxHQUc5Q3FJLENBQ1QsQ0FFQSxTQUFTL0MsR0FBa0J6M0MsRUFBSSxDQUM3QkEsRUFBRyxVQUFZLEVBQ2pCLENBRUEsU0FBU2c2QyxJQUFZLENBQ25CM0YsR0FBVSxFQUNaLENBRUEsU0FBUzZFLEdBQWNqSSxFQUFLd0UsRUFBVXpFLEVBQVUsQ0FDOUMsSUFBSWtGLEVBQU8xSixHQUFRb0IsR0FBU29ELEVBQVMsR0FBSSxFQUFHQSxFQUFTLFFBQVMsRUFBSSxDQUFDLEVBQy9EeUosRUFBUyxHQUNiLE9BQU9oRixFQUFXeEUsRUFBSSxRQUFVaUYsRUFBSyxLQUFPdUUsR0FBVXhKLEVBQUksUUFBVWlGLEVBQUssS0FBT2pGLEVBQUksUUFBVWlGLEVBQUssTUFBUWpGLEVBQUksUUFBVWlGLEVBQUssSUFBTXVFLEdBQVV4SixFQUFJLFFBQVVpRixFQUFLLFFBQVVqRixFQUFJLFFBQVVpRixFQUFLLElBQ2hNLENBRUEsU0FBUytDLEdBQWFoSSxFQUFLd0UsRUFBVXpFLEVBQVUsQ0FDN0MsSUFBSWtGLEVBQU8xSixHQUFReUIsR0FBVStDLEVBQVMsR0FBSUEsRUFBUyxRQUFRLFNBQVMsQ0FBQyxFQUNqRXlKLEVBQVMsR0FDYixPQUFPaEYsRUFBV3hFLEVBQUksUUFBVWlGLEVBQUssTUFBUXVFLEdBQVV4SixFQUFJLFNBQVdpRixFQUFLLE9BQVNqRixFQUFJLFFBQVVpRixFQUFLLFFBQVVqRixFQUFJLFNBQVdpRixFQUFLLEtBQU9qRixFQUFJLFFBQVVpRixFQUFLLE9BQVNqRixFQUFJLFFBQVVpRixFQUFLLEtBQU9qRixFQUFJLFNBQVdpRixFQUFLLE9BQVNqRixFQUFJLFFBQVVpRixFQUFLLE9BQVN1RSxDQUM3UCxDQUVBLFNBQVNkLEdBQWtCMUksRUFBS3R1QyxFQUFRNnlDLEVBQVlDLEVBQVVpRixFQUFlQyxFQUF1QkMsRUFBWUMsRUFBYyxDQUM1SCxJQUFJQyxFQUFjckYsRUFBV3hFLEVBQUksUUFBVUEsRUFBSSxRQUMzQzhKLEVBQWV0RixFQUFXRCxFQUFXLE9BQVNBLEVBQVcsTUFDekR3RixFQUFXdkYsRUFBV0QsRUFBVyxJQUFNQSxFQUFXLEtBQ2xEeUYsRUFBV3hGLEVBQVdELEVBQVcsT0FBU0EsRUFBVyxNQUNyRDBGLEVBQVMsR0FFYixHQUFJLENBQUNOLEdBRUgsR0FBSUMsR0FBZ0IzRyxHQUFxQjZHLEVBQWVMLEdBUXRELEdBTEksQ0FBQzFHLEtBQTBCRCxLQUFrQixFQUFJK0csRUFBY0UsRUFBV0QsRUFBZUosRUFBd0IsRUFBSUcsRUFBY0csRUFBV0YsRUFBZUosRUFBd0IsS0FFdkwzRyxHQUF3QixJQUdyQkEsR0FPSGtILEVBQVMsV0FMTG5ILEtBQWtCLEVBQUkrRyxFQUFjRSxFQUFXOUcsR0FDakQ0RyxFQUFjRyxFQUFXL0csR0FDekIsTUFBTyxDQUFDSCxXQU9SK0csRUFBY0UsRUFBV0QsR0FBZ0IsRUFBSUwsR0FBaUIsR0FBS0ksRUFBY0csRUFBV0YsR0FBZ0IsRUFBSUwsR0FBaUIsRUFDbkksT0FBT1MsR0FBb0J4NEMsQ0FBTSxFQU92QyxPQUZBdTRDLEVBQVNBLEdBQVVOLEVBRWZNLElBRUVKLEVBQWNFLEVBQVdELEVBQWVKLEVBQXdCLEdBQUtHLEVBQWNHLEVBQVdGLEVBQWVKLEVBQXdCLEdBQ2hJRyxFQUFjRSxFQUFXRCxFQUFlLEVBQUksRUFBSSxHQUlwRCxDQUNULENBU0EsU0FBU0ksR0FBb0J4NEMsRUFBUSxDQUNuQyxPQUFJN0UsR0FBTTQwQyxFQUFNLEVBQUk1MEMsR0FBTTZFLENBQU0sRUFDdkIsRUFFQSxFQUVYLENBU0EsU0FBU3czQyxHQUFZbjZDLEVBQUksQ0FLdkIsUUFKSW8zQixFQUFNcDNCLEVBQUcsUUFBVUEsRUFBRyxVQUFZQSxFQUFHLElBQU1BLEVBQUcsS0FBT0EsRUFBRyxZQUN4RDFFLEVBQUk4N0IsRUFBSSxPQUNSZ2tCLEVBQU0sRUFFSDkvQyxLQUNMOC9DLEdBQU9oa0IsRUFBSSxXQUFXOTdCLENBQUMsRUFHekIsT0FBTzgvQyxFQUFJLFNBQVMsRUFBRSxDQUN4QixDQUVBLFNBQVMvRCxHQUF1QmdFLEVBQU0sQ0FDcEMvRyxHQUFrQixPQUFTLEVBSTNCLFFBSElnSCxFQUFTRCxFQUFLLHFCQUFxQixPQUFPLEVBQzFDRSxFQUFNRCxFQUFPLE9BRVZDLEtBQU8sQ0FDWixJQUFJdjdDLEVBQUtzN0MsRUFBT0MsQ0FBRyxFQUNuQnY3QyxFQUFHLFNBQVdzMEMsR0FBa0IsS0FBS3QwQyxDQUFFLENBQ3hDLENBQ0gsQ0FFQSxTQUFTMDNDLEdBQVVwaUMsRUFBSSxDQUNyQixPQUFPLFdBQVdBLEVBQUksQ0FBQyxDQUN6QixDQUVBLFNBQVMya0MsR0FBZ0I5dUMsRUFBSSxDQUMzQixPQUFPLGFBQWFBLENBQUUsQ0FDeEIsQ0FHSW9wQyxJQUNGNXVCLEdBQUcsU0FBVSxZQUFhLFNBQVVzckIsRUFBSyxFQUNsQ2pELEdBQVMsUUFBVXFGLEtBQXdCcEMsRUFBSSxZQUNsREEsRUFBSSxlQUFjLENBRXhCLENBQUcsRUFJSGpELEdBQVMsTUFBUSxDQUNmLEdBQUlyb0IsR0FDSixJQUFLeWxCLEdBQ0wsSUFBS1MsR0FDTCxLQUFNTSxHQUNOLEdBQUksU0FBWW5zQyxFQUFJc3JDLEVBQVUsQ0FDNUIsTUFBTyxDQUFDLENBQUNFLEdBQVF4ckMsRUFBSXNyQyxFQUFVdHJDLEVBQUksRUFBSyxDQUN6QyxFQUNELE9BQVE0dUMsR0FDUixTQUFVTyxHQUNWLFFBQVMzRCxHQUNULFlBQWFHLEdBQ2IsTUFBT2g4QixHQUNQLE1BQU83UixHQUNQLFNBQVU0NUMsR0FDVixlQUFnQnVDLEdBQ2hCLGdCQUFpQnJGLEdBQ2pCLFNBQVVoSCxFQUNaLEVBT0FJLEdBQVMsSUFBTSxTQUFVeEUsRUFBUyxDQUNoQyxPQUFPQSxFQUFRa0csRUFBTyxDQUN4QixFQU9BMUIsR0FBUyxNQUFRLFVBQVksQ0FDM0IsUUFBUy9XLEVBQU8sVUFBVSxPQUFRemtCLEVBQVUsSUFBSSxNQUFNeWtCLENBQUksRUFBR0MsRUFBTyxFQUFHQSxFQUFPRCxFQUFNQyxJQUNsRjFrQixFQUFRMGtCLENBQUksRUFBSSxVQUFVQSxDQUFJLEVBRzVCMWtCLEVBQVEsQ0FBQyxFQUFFLGNBQWdCLFFBQU9BLEVBQVVBLEVBQVEsQ0FBQyxHQUN6REEsRUFBUSxRQUFRLFNBQVVoTixFQUFRLENBQ2hDLEdBQUksQ0FBQ0EsRUFBTyxXQUFhLENBQUNBLEVBQU8sVUFBVSxZQUN6QyxLQUFNLGdFQUFnRSxPQUFPLENBQUUsRUFBQyxTQUFTLEtBQUtBLENBQU0sQ0FBQyxFQUduR0EsRUFBTyxRQUFPd29DLEdBQVMsTUFBUTdELEdBQWVBLEdBQWUsQ0FBRSxFQUFFNkQsR0FBUyxLQUFLLEVBQUd4b0MsRUFBTyxLQUFLLEdBQ2xHdXJDLEdBQWMsTUFBTXZyQyxDQUFNLENBQzlCLENBQUcsQ0FDSCxFQVFBd29DLEdBQVMsT0FBUyxTQUFVaHVDLEVBQUk3SCxFQUFTLENBQ3ZDLE9BQU8sSUFBSTYxQyxHQUFTaHVDLEVBQUk3SCxDQUFPLENBQ2pDLEVBR0E2MUMsR0FBUyxRQUFVckQsR0FFbkIsSUFBSTZRLEdBQWMsQ0FBRSxFQUNoQkMsR0FDQUMsR0FDQUMsR0FBWSxHQUNaQyxHQUNBQyxHQUNBQyxHQUNBQyxHQUVKLFNBQVNDLElBQW1CLENBQzFCLFNBQVNDLEdBQWEsQ0FDcEIsS0FBSyxTQUFXLENBQ2QsT0FBUSxHQUNSLHdCQUF5QixHQUN6QixrQkFBbUIsR0FDbkIsWUFBYSxHQUNiLGFBQWMsRUFDcEIsRUFFSSxRQUFTM21DLEtBQU0sS0FDVEEsRUFBRyxPQUFPLENBQUMsSUFBTSxLQUFPLE9BQU8sS0FBS0EsQ0FBRSxHQUFNLGFBQzlDLEtBQUtBLENBQUUsRUFBSSxLQUFLQSxDQUFFLEVBQUUsS0FBSyxJQUFJLEVBR2xDLENBRUQsT0FBQTJtQyxFQUFXLFVBQVksQ0FDckIsWUFBYSxTQUFxQnhLLEVBQU0sQ0FDdEMsSUFBSVUsRUFBZ0JWLEVBQUssY0FFckIsS0FBSyxTQUFTLGdCQUNoQjlyQixHQUFHLFNBQVUsV0FBWSxLQUFLLGlCQUFpQixFQUUzQyxLQUFLLFFBQVEsZUFDZkEsR0FBRyxTQUFVLGNBQWUsS0FBSyx5QkFBeUIsRUFDakR3c0IsRUFBYyxRQUN2QnhzQixHQUFHLFNBQVUsWUFBYSxLQUFLLHlCQUF5QixFQUV4REEsR0FBRyxTQUFVLFlBQWEsS0FBSyx5QkFBeUIsQ0FHN0QsRUFDRCxrQkFBbUIsU0FBMkJ1MkIsRUFBTyxDQUNuRCxJQUFJL0osRUFBZ0IrSixFQUFNLGNBR3RCLENBQUMsS0FBSyxRQUFRLGdCQUFrQixDQUFDL0osRUFBYyxRQUNqRCxLQUFLLGtCQUFrQkEsQ0FBYSxDQUV2QyxFQUNELEtBQU0sVUFBZ0IsQ0FDaEIsS0FBSyxTQUFTLGdCQUNoQi9HLEdBQUksU0FBVSxXQUFZLEtBQUssaUJBQWlCLEdBRWhEQSxHQUFJLFNBQVUsY0FBZSxLQUFLLHlCQUF5QixFQUMzREEsR0FBSSxTQUFVLFlBQWEsS0FBSyx5QkFBeUIsRUFDekRBLEdBQUksU0FBVSxZQUFhLEtBQUsseUJBQXlCLEdBRzNEK1EsS0FDQUMsS0FDQS9NLElBQ0QsRUFDRCxRQUFTLFVBQW1CLENBQzFCeU0sR0FBYUosR0FBZUQsR0FBV0UsR0FBWUksR0FBNkJILEdBQWtCQyxHQUFrQixLQUNwSEwsR0FBWSxPQUFTLENBQ3RCLEVBQ0QsMEJBQTJCLFNBQW1DdkssRUFBSyxDQUNqRSxLQUFLLGtCQUFrQkEsRUFBSyxFQUFJLENBQ2pDLEVBQ0Qsa0JBQW1CLFNBQTJCQSxFQUFLMEcsRUFBVSxDQUMzRCxJQUFJemYsRUFBUSxLQUVSYixHQUFLNFosRUFBSSxRQUFVQSxFQUFJLFFBQVEsQ0FBQyxFQUFJQSxHQUFLLFFBQ3pDMUIsR0FBSzBCLEVBQUksUUFBVUEsRUFBSSxRQUFRLENBQUMsRUFBSUEsR0FBSyxRQUN6Q3hDLEVBQU8sU0FBUyxpQkFBaUJwWCxFQUFHa1ksQ0FBQyxFQU16QyxHQUxBdU0sR0FBYTdLLEVBS1QwRyxHQUFZLEtBQUssUUFBUSx5QkFBMkI3TSxJQUFRRCxJQUFjRyxHQUFRLENBQ3BGcVIsR0FBV3BMLEVBQUssS0FBSyxRQUFTeEMsRUFBTWtKLENBQVEsRUFFNUMsSUFBSTJFLEVBQWlCN08sR0FBMkJnQixFQUFNLEVBQUksRUFFdERrTixLQUFjLENBQUNJLElBQThCMWtCLElBQU11a0IsSUFBbUJyTSxJQUFNc00sTUFDOUVFLElBQThCSSxHQUErQixFQUU3REosR0FBNkIsWUFBWSxVQUFZLENBQ25ELElBQUlRLEVBQVU5TyxHQUEyQixTQUFTLGlCQUFpQnBXLEVBQUdrWSxDQUFDLEVBQUcsRUFBSSxFQUUxRWdOLElBQVlELElBQ2RBLEVBQWlCQyxFQUNqQkgsTUFHRkMsR0FBV3BMLEVBQUsvWSxFQUFNLFFBQVNxa0IsRUFBUzVFLENBQVEsQ0FDakQsRUFBRSxFQUFFLEVBQ0xpRSxHQUFrQnZrQixFQUNsQndrQixHQUFrQnRNLEVBRTVCLEtBQWEsQ0FFTCxHQUFJLENBQUMsS0FBSyxRQUFRLGNBQWdCOUIsR0FBMkJnQixFQUFNLEVBQUksSUFBTW5DLEtBQTZCLENBQ3hHOFAsS0FDQSxNQUNELENBRURDLEdBQVdwTCxFQUFLLEtBQUssUUFBU3hELEdBQTJCZ0IsRUFBTSxFQUFLLEVBQUcsRUFBSyxDQUM3RSxDQUNGLENBQ0wsRUFDUzdZLEdBQVNxbUIsRUFBWSxDQUMxQixXQUFZLFNBQ1osb0JBQXFCLEVBQ3pCLENBQUcsQ0FDSCxDQUVBLFNBQVNHLElBQW1CLENBQzFCWixHQUFZLFFBQVEsU0FBVWEsRUFBWSxDQUN4QyxjQUFjQSxFQUFXLEdBQUcsQ0FDaEMsQ0FBRyxFQUNEYixHQUFjLENBQUEsQ0FDaEIsQ0FFQSxTQUFTVyxJQUFrQyxDQUN6QyxjQUFjSixFQUEwQixDQUMxQyxDQUVBLElBQUlNLEdBQWFsTixHQUFTLFNBQVU4QixFQUFLOTRDLEVBQVN1NUMsRUFBUThLLEVBQVksQ0FFcEUsR0FBS3JrRCxFQUFRLE9BQ2IsS0FBSWsvQixHQUFLNFosRUFBSSxRQUFVQSxFQUFJLFFBQVEsQ0FBQyxFQUFJQSxHQUFLLFFBQ3pDMUIsR0FBSzBCLEVBQUksUUFBVUEsRUFBSSxRQUFRLENBQUMsRUFBSUEsR0FBSyxRQUN6Q3dMLEVBQU90a0QsRUFBUSxrQkFDZnVrRCxFQUFRdmtELEVBQVEsWUFDaEJtMkMsRUFBY2hDLEdBQXlCLEVBQ3ZDcVEsRUFBcUIsR0FDckJDLEVBRUFsQixLQUFpQmhLLElBQ25CZ0ssR0FBZWhLLEVBQ2YwSyxLQUNBWCxHQUFXdGpELEVBQVEsT0FDbkJ5a0QsRUFBaUJ6a0QsRUFBUSxTQUVyQnNqRCxLQUFhLEtBQ2ZBLEdBQVdoTyxHQUEyQmlFLEVBQVEsRUFBSSxJQUl0RCxJQUFJbUwsRUFBWSxFQUNaQyxFQUFnQnJCLEdBRXBCLEVBQUcsQ0FDRCxJQUFJejdDLEVBQUs4OEMsRUFDTDVHLEVBQU8xSixHQUFReHNDLENBQUUsRUFDakI0akMsRUFBTXNTLEVBQUssSUFDWHBKLEVBQVNvSixFQUFLLE9BQ2RySixFQUFPcUosRUFBSyxLQUNabkosRUFBUW1KLEVBQUssTUFDYmpKLEVBQVFpSixFQUFLLE1BQ2JsSixFQUFTa0osRUFBSyxPQUNkNkcsRUFBYSxPQUNiQyxFQUFhLE9BQ2JDLEVBQWNqOUMsRUFBRyxZQUNqQms5QyxFQUFlbDlDLEVBQUcsYUFDbEI2MEMsRUFBUWhKLEdBQUk3ckMsQ0FBRSxFQUNkbTlDLEVBQWFuOUMsRUFBRyxXQUNoQm85QyxFQUFhcDlDLEVBQUcsVUFFaEJBLElBQU9zdUMsR0FDVHlPLEVBQWE5UCxFQUFRZ1EsSUFBZ0JwSSxFQUFNLFlBQWMsUUFBVUEsRUFBTSxZQUFjLFVBQVlBLEVBQU0sWUFBYyxXQUN2SG1JLEVBQWFoUSxFQUFTa1EsSUFBaUJySSxFQUFNLFlBQWMsUUFBVUEsRUFBTSxZQUFjLFVBQVlBLEVBQU0sWUFBYyxhQUV6SGtJLEVBQWE5UCxFQUFRZ1EsSUFBZ0JwSSxFQUFNLFlBQWMsUUFBVUEsRUFBTSxZQUFjLFVBQ3ZGbUksRUFBYWhRLEVBQVNrUSxJQUFpQnJJLEVBQU0sWUFBYyxRQUFVQSxFQUFNLFlBQWMsV0FHM0YsSUFBSXdJLEVBQUtOLElBQWUsS0FBSyxJQUFJaFEsRUFBUTFWLENBQUMsR0FBS29sQixHQUFRVSxFQUFhbFEsRUFBUWdRLElBQWdCLEtBQUssSUFBSXBRLEVBQU94VixDQUFDLEdBQUtvbEIsR0FBUSxDQUFDLENBQUNVLEdBQ3hIRyxFQUFLTixJQUFlLEtBQUssSUFBSWxRLEVBQVN5QyxDQUFDLEdBQUtrTixHQUFRVyxFQUFhcFEsRUFBU2tRLElBQWlCLEtBQUssSUFBSXRaLEVBQU0yTCxDQUFDLEdBQUtrTixHQUFRLENBQUMsQ0FBQ1csR0FFOUgsR0FBSSxDQUFDNUIsR0FBWXFCLENBQVMsRUFDeEIsUUFBU3ZoRCxHQUFJLEVBQUdBLElBQUt1aEQsRUFBV3ZoRCxLQUN6QmtnRCxHQUFZbGdELEVBQUMsSUFDaEJrZ0QsR0FBWWxnRCxFQUFDLEVBQUksS0FLbkJrZ0QsR0FBWXFCLENBQVMsRUFBRSxJQUFNUSxHQUFNN0IsR0FBWXFCLENBQVMsRUFBRSxJQUFNUyxHQUFNOUIsR0FBWXFCLENBQVMsRUFBRSxLQUFPNzhDLEtBQ3RHdzdDLEdBQVlxQixDQUFTLEVBQUUsR0FBSzc4QyxFQUM1Qnc3QyxHQUFZcUIsQ0FBUyxFQUFFLEdBQUtRLEVBQzVCN0IsR0FBWXFCLENBQVMsRUFBRSxHQUFLUyxFQUM1QixjQUFjOUIsR0FBWXFCLENBQVMsRUFBRSxHQUFHLEdBRXBDUSxHQUFNLEdBQUtDLEdBQU0sS0FDbkJYLEVBQXFCLEdBR3JCbkIsR0FBWXFCLENBQVMsRUFBRSxJQUFNLGFBQVksVUFBWSxDQUUvQ0wsR0FBYyxLQUFLLFFBQVUsR0FDL0J4TyxHQUFTLE9BQU8sYUFBYThOLEVBQVUsRUFJekMsSUFBSXlCLEdBQWdCL0IsR0FBWSxLQUFLLEtBQUssRUFBRSxHQUFLQSxHQUFZLEtBQUssS0FBSyxFQUFFLEdBQUtrQixFQUFRLEVBQ2xGYyxHQUFnQmhDLEdBQVksS0FBSyxLQUFLLEVBQUUsR0FBS0EsR0FBWSxLQUFLLEtBQUssRUFBRSxHQUFLa0IsRUFBUSxFQUVsRixPQUFPRSxHQUFtQixZQUN4QkEsRUFBZSxLQUFLNU8sR0FBUyxRQUFRLFdBQVcwQixFQUFPLEVBQUc4TixHQUFlRCxHQUFldE0sRUFBSzZLLEdBQVlOLEdBQVksS0FBSyxLQUFLLEVBQUUsRUFBRSxJQUFNLFlBSy9JbE0sR0FBU2tNLEdBQVksS0FBSyxLQUFLLEVBQUUsR0FBSWdDLEdBQWVELEVBQWEsQ0FDbEUsR0FBQyxLQUFLLENBQ0wsTUFBT1YsQ0FDakIsQ0FBUyxFQUFHLEVBQUUsSUFJVkEsR0FDSixPQUFXMWtELEVBQVEsY0FBZ0Iya0QsSUFBa0J4TyxJQUFnQndPLEVBQWdCclAsR0FBMkJxUCxFQUFlLEVBQUssSUFFbEluQixHQUFZZ0IsRUFDZCxFQUFHLEVBQUUsRUFFRGMsR0FBTyxTQUFjaE0sRUFBTSxDQUM3QixJQUFJVSxFQUFnQlYsRUFBSyxjQUNyQlcsRUFBY1gsRUFBSyxZQUNuQmlCLEVBQVNqQixFQUFLLE9BQ2Q0RyxFQUFpQjVHLEVBQUssZUFDdEJpTSxFQUF3QmpNLEVBQUssc0JBQzdCa00sRUFBcUJsTSxFQUFLLG1CQUMxQm1NLEVBQXVCbk0sRUFBSyxxQkFDaEMsR0FBS1UsRUFDTCxLQUFJMEwsRUFBYXpMLEdBQWVpRyxFQUNoQ3NGLElBQ0EsSUFBSXpHLEVBQVEvRSxFQUFjLGdCQUFrQkEsRUFBYyxlQUFlLE9BQVNBLEVBQWMsZUFBZSxDQUFDLEVBQUlBLEVBQ2hIeHZDLEVBQVMsU0FBUyxpQkFBaUJ1MEMsRUFBTSxRQUFTQSxFQUFNLE9BQU8sRUFDbkUwRyxJQUVJQyxHQUFjLENBQUNBLEVBQVcsR0FBRyxTQUFTbDdDLENBQU0sSUFDOUMrNkMsRUFBc0IsT0FBTyxFQUM3QixLQUFLLFFBQVEsQ0FDWCxPQUFRaEwsRUFDUixZQUFhTixDQUNuQixDQUFLLEdBRUwsRUFFQSxTQUFTMEwsSUFBUyxDQUFFLENBRXBCQSxHQUFPLFVBQVksQ0FDakIsV0FBWSxLQUNaLFVBQVcsU0FBbUI1QixFQUFPLENBQ25DLElBQUlqSyxFQUFvQmlLLEVBQU0sa0JBQzlCLEtBQUssV0FBYWpLLENBQ25CLEVBQ0QsUUFBUyxTQUFpQjhMLEVBQU8sQ0FDL0IsSUFBSXJMLEVBQVNxTCxFQUFNLE9BQ2YzTCxFQUFjMkwsRUFBTSxZQUN4QixLQUFLLFNBQVMsd0JBRVYzTCxHQUNGQSxFQUFZLHNCQUFxQixFQUduQyxJQUFJMEgsRUFBY2xNLEdBQVMsS0FBSyxTQUFTLEdBQUksS0FBSyxXQUFZLEtBQUssT0FBTyxFQUV0RWtNLEVBQ0YsS0FBSyxTQUFTLEdBQUcsYUFBYXBILEVBQVFvSCxDQUFXLEVBRWpELEtBQUssU0FBUyxHQUFHLFlBQVlwSCxDQUFNLEVBR3JDLEtBQUssU0FBUyxhQUVWTixHQUNGQSxFQUFZLFdBQVUsQ0FFekIsRUFDRCxLQUFNcUwsRUFDUixFQUVBN25CLEdBQVNrb0IsR0FBUSxDQUNmLFdBQVksZUFDZCxDQUFDLEVBRUQsU0FBU0UsSUFBUyxDQUFFLENBRXBCQSxHQUFPLFVBQVksQ0FDakIsUUFBUyxTQUFpQkMsRUFBTyxDQUMvQixJQUFJdkwsRUFBU3VMLEVBQU0sT0FDZjdMLEVBQWM2TCxFQUFNLFlBQ3BCQyxFQUFpQjlMLEdBQWUsS0FBSyxTQUN6QzhMLEVBQWUsc0JBQXFCLEVBQ3BDeEwsRUFBTyxZQUFjQSxFQUFPLFdBQVcsWUFBWUEsQ0FBTSxFQUN6RHdMLEVBQWUsV0FBVSxDQUMxQixFQUNELEtBQU1ULEVBQ1IsRUFFQTduQixHQUFTb29CLEdBQVEsQ0FDZixXQUFZLGVBQ2QsQ0FBQyxFQXdzQkRoUSxHQUFTLE1BQU0sSUFBSWdPLEVBQWtCLEVBQ3JDaE8sR0FBUyxNQUFNZ1EsR0FBUUYsRUFBTSxFQ3pySDdCLElBQUlLLEdBQVksT0FBTyxlQUNuQkMsR0FBYSxPQUFPLGlCQUNwQkMsR0FBb0IsT0FBTywwQkFDM0JDLEdBQXNCLE9BQU8sc0JBQzdCQyxHQUFlLE9BQU8sVUFBVSxlQUNoQ0MsR0FBZSxPQUFPLFVBQVUscUJBQ2hDQyxHQUFrQixDQUFDMWpELEVBQUtqQyxFQUFLekIsSUFBVXlCLEtBQU9pQyxFQUFNb2pELEdBQVVwakQsRUFBS2pDLEVBQUssQ0FBRSxXQUFZLEdBQU0sYUFBYyxHQUFNLFNBQVUsR0FBTSxNQUFBekIsQ0FBTyxDQUFBLEVBQUkwRCxFQUFJakMsQ0FBRyxFQUFJekIsRUFDdEpxbkQsR0FBaUIsQ0FBQzkvQyxFQUFHZ0gsSUFBTSxDQUM3QixRQUFTb00sS0FBUXBNLElBQU1BLEVBQUksQ0FBQSxHQUNyQjI0QyxHQUFhLEtBQUszNEMsRUFBR29NLENBQUksR0FDM0J5c0MsR0FBZ0I3L0MsRUFBR29ULEVBQU1wTSxFQUFFb00sQ0FBSSxDQUFDLEVBQ3BDLEdBQUlzc0MsR0FDRixRQUFTdHNDLEtBQVFzc0MsR0FBb0IxNEMsQ0FBQyxFQUNoQzQ0QyxHQUFhLEtBQUs1NEMsRUFBR29NLENBQUksR0FDM0J5c0MsR0FBZ0I3L0MsRUFBR29ULEVBQU1wTSxFQUFFb00sQ0FBSSxDQUFDLEVBRXRDLE9BQU9wVCxDQUNULEVBQ0krL0MsR0FBZ0IsQ0FBQy8vQyxFQUFHZ0gsSUFBTXc0QyxHQUFXeC9DLEVBQUd5L0MsR0FBa0J6NEMsQ0FBQyxDQUFDLEVBR2hFLFNBQVNnNUMsR0FBV3h2QyxFQUFNLENBQ3BCQSxFQUFLLGdCQUFrQixNQUN6QkEsRUFBSyxjQUFjLFlBQVlBLENBQUksQ0FFdkMsQ0FDQSxTQUFTeXZDLEdBQWFDLEVBQVkxdkMsRUFBTTJ2QyxFQUFVLENBQ2hELE1BQU1DLEVBQVVELElBQWEsRUFBSUQsRUFBVyxTQUFTLENBQUMsRUFBSUEsRUFBVyxTQUFTQyxFQUFXLENBQUMsRUFBRSxZQUM1RkQsRUFBVyxhQUFhMXZDLEVBQU00dkMsQ0FBTyxDQUN2QyxDQUNBLFNBQVNDLElBQWEsQ0FDcEIsT0FBSSxPQUFPLE9BQVcsSUFDYixPQUFPLFFBRVQsT0FBTyxPQUNoQixDQUNBLE1BQU1DLEdBQVlELEdBQVUsRUFDNUIsU0FBU25nQyxHQUFPeEosRUFBSSxDQUNsQixNQUFNNnBDLEVBQXdCLE9BQU8sT0FBTyxJQUFJLEVBQ2hELE9BQU8sU0FBa0IvbkIsRUFBSyxDQUU1QixPQURZK25CLEVBQU0vbkIsQ0FBRyxJQUNOK25CLEVBQU0vbkIsQ0FBRyxFQUFJOWhCLEVBQUc4aEIsQ0FBRyxFQUN0QyxDQUNBLENBQ0EsTUFBTWdELEdBQVEsU0FDUmdsQixHQUFXdGdDLEdBQVFzWSxHQUFRQSxFQUFJLFFBQVFnRCxHQUFPLENBQUN4aEMsRUFBR2dpQixJQUFNQSxFQUFFLFlBQVcsQ0FBRSxDQUFDLEVBQ3hFeWtDLEdBQWtCLENBQUMsUUFBUyxNQUFPLFNBQVUsU0FBVSxLQUFLLEVBQzVEQyxHQUFTLENBQUMsU0FBVSxXQUFZLE9BQVEsU0FBVSxPQUFPLEVBQ3pEQyxHQUFXLENBQUMsTUFBTSxFQUNsQkMsR0FBb0IsQ0FBQ0QsR0FBVUYsR0FBaUJDLEVBQU0sRUFBRSxRQUFTRyxHQUFZQSxDQUFPLEVBQUUsSUFBS3hPLEdBQVEsS0FBS0EsQ0FBRyxFQUFFLEVBQzdHM3JCLEdBQVMsQ0FDYixPQUFRaTZCLEdBQ1IsY0FBZUYsR0FDZixLQUFNQyxFQUNSLEVBQ0EsU0FBU0ksR0FBV3I2QixFQUFXLENBQzdCLE9BQU9tNkIsR0FBa0IsUUFBUW42QixDQUFTLElBQU0sRUFDbEQsQ0FDQSxNQUFNczZCLEdBQU8sQ0FDWCxJQUNBLE9BQ0EsVUFDQSxPQUNBLFVBQ0EsUUFDQSxRQUNBLElBQ0EsT0FDQSxNQUNBLE1BQ0EsYUFDQSxPQUNBLEtBQ0EsU0FDQSxTQUNBLFVBQ0EsT0FDQSxPQUNBLE1BQ0EsV0FDQSxPQUNBLFdBQ0EsS0FDQSxNQUNBLFVBQ0EsTUFDQSxTQUNBLE1BQ0EsS0FDQSxLQUNBLEtBQ0EsUUFDQSxXQUNBLGFBQ0EsU0FDQSxTQUNBLE9BQ0EsS0FDQSxLQUNBLEtBQ0EsS0FDQSxLQUNBLEtBQ0EsT0FDQSxTQUNBLFNBQ0EsS0FDQSxPQUNBLElBQ0EsU0FDQSxNQUNBLFFBQ0EsTUFDQSxNQUNBLFFBQ0EsU0FDQSxLQUNBLE9BQ0EsT0FDQSxNQUNBLE9BQ0EsT0FDQSxPQUNBLFdBQ0EsT0FDQSxRQUNBLE1BQ0EsV0FDQSxTQUNBLEtBQ0EsV0FDQSxTQUNBLFNBQ0EsSUFDQSxRQUNBLFVBQ0EsTUFDQSxXQUNBLElBQ0EsS0FDQSxLQUNBLEtBQ0EsTUFDQSxPQUNBLElBQ0EsT0FDQSxTQUNBLFVBQ0EsU0FDQSxPQUNBLFFBQ0EsU0FDQSxPQUNBLFNBQ0EsUUFDQSxNQUNBLFVBQ0EsTUFDQSxNQUNBLFFBQ0EsUUFDQSxLQUNBLFdBQ0EsV0FDQSxRQUNBLEtBQ0EsUUFDQSxPQUNBLFFBQ0EsS0FDQSxRQUNBLElBQ0EsS0FDQSxNQUNBLFFBQ0EsS0FDRixFQUNBLFNBQVNDLEdBQVVscUQsRUFBTSxDQUN2QixPQUFPaXFELEdBQUssU0FBU2pxRCxDQUFJLENBQzNCLENBQ0EsU0FBU21xRCxHQUFhbnFELEVBQU0sQ0FDMUIsTUFBTyxDQUFDLG1CQUFvQixpQkFBaUIsRUFBRSxTQUFTQSxDQUFJLENBQzlELENBQ0EsU0FBU29xRCxHQUFnQnpvRCxFQUFPLENBQzlCLE1BQU8sQ0FBQyxLQUFNLFFBQVMsT0FBUSxPQUFPLEVBQUUsU0FBU0EsQ0FBSyxHQUFLQSxFQUFNLFdBQVcsT0FBTyxHQUFLQSxFQUFNLFdBQVcsT0FBTyxHQUFLQSxFQUFNLFdBQVcsSUFBSSxDQUM1SSxDQUNBLFNBQVMwb0QsR0FBUXgyQixFQUFTLENBQ3hCLE9BQU9BLEVBQVEsT0FBTyxDQUFDdHRCLEVBQUssQ0FBQ25ELEVBQUt6QixDQUFLLEtBQ3JDNEUsRUFBSW5ELENBQUcsRUFBSXpCLEVBQ0o0RSxHQUNOLENBQUUsQ0FBQSxDQUNQLENBQ0EsU0FBUytqRCxHQUF1QixDQUFFLE9BQUFDLEVBQVEsY0FBQUMsRUFBZ0IsQ0FBRSxDQUFBLEVBQUksQ0FDOUQsTUFBTUMsRUFBYUosR0FBUSxPQUFPLFFBQVFFLENBQU0sRUFBRSxPQUFPLENBQUMsQ0FBQ25uRCxFQUFLRixDQUFDLElBQU1rbkQsR0FBZ0JobkQsQ0FBRyxDQUFDLENBQUMsRUFDNUYsT0FBTzRsRCxHQUFlQSxHQUFlLENBQUEsRUFBSXlCLENBQVUsRUFBR0QsQ0FBYSxDQUNyRSxDQUNBLFNBQVNFLEdBQXFCLENBQUUsT0FBQUgsRUFBUSxnQkFBQUksR0FBbUIsQ0FDekQsTUFBTWxvRCxFQUFVNG5ELEdBQVFPLEdBQXdCTCxDQUFNLENBQUMsRUFDdkQsT0FBTyxRQUFRSSxDQUFlLEVBQUUsUUFBUSxDQUFDLENBQUNFLEVBQVdDLENBQVksSUFBTSxDQUNyRWw3QixHQUFPaTdCLENBQVMsRUFBRSxRQUFTLzZCLEdBQVUsQ0FDbkNydEIsRUFBUSxLQUFLcXRCLENBQUssRUFBRSxFQUFJZzdCLEVBQWFoN0IsQ0FBSyxDQUNoRCxDQUFLLENBQ0wsQ0FBRyxFQUNELE1BQU1rSixFQUFZLG1CQUFtQnYyQixFQUFRLFdBQWEsRUFBRSxHQUM1RCxPQUFPd21ELEdBQWNELEdBQWUsQ0FBRSxFQUFFdm1ELENBQU8sRUFBRyxDQUNoRCxVQUFBdTJCLENBQ0osQ0FBRyxDQUNILENBQ0EsU0FBUzR4QixHQUF3QmpwRCxFQUFPLENBQ3RDLE9BQU8sT0FBTyxRQUFRQSxDQUFLLEVBQUUsT0FBTyxDQUFDLENBQUN5QixFQUFLRixDQUFDLElBQU0sQ0FBQ2tuRCxHQUFnQmhuRCxDQUFHLENBQUMsRUFBRSxJQUFJLENBQUMsQ0FBQ0EsRUFBSzJuRCxDQUFNLElBQU0sQ0FBQ3JCLEdBQVN0bUQsQ0FBRyxFQUFHMm5ELENBQU0sQ0FBQyxFQUFFLE9BQU8sQ0FBQyxDQUFDM25ELEVBQUtGLENBQUMsSUFBTSxDQUFDOG1ELEdBQVc1bUQsQ0FBRyxDQUFDLENBQ2hLLENBQ0EsTUFBTTRuRCxHQUEwQnR4QyxHQUFTLENBQ3ZDLE1BQU1wUCxFQUFLb1AsRUFBSyxJQUFNLE1BQU0sUUFBUUEsRUFBSyxRQUFRLEdBQUtBLEVBQUssU0FBUyxDQUFDLEVBQUUsR0FBRyxXQUMxRSxPQUFLcFAsR0FDSCxRQUFRLE1BQU0sbURBQStHLEVBRXhIQSxHQUFNLENBQUEsQ0FDZixFQUNNMmdELEdBQWEsQ0FBQ0MsRUFBWWg5QyxJQUFZZzlDLEVBQVcsb0JBQXNCaDlDLEVBQ3ZFaTlDLEdBQWNELEdBQWVBLEVBQVcsb0JBQzlDLE1BQU1FLEVBQW1CLENBQ3ZCLFlBQVksQ0FDVixNQUFPLENBQUUsT0FBQUMsRUFBUSxRQUFTQyxFQUFjLE9BQUFDLENBQVEsRUFDaEQsS0FBQTVGLEVBQ0EsU0FBQTZGLENBQ0osRUFBSyxDQUNELEtBQUssYUFBZUYsRUFDcEIsS0FBSyxTQUFXLENBQUMsR0FBR0QsRUFBUSxHQUFHQyxFQUFjLEdBQUdDLENBQU0sRUFDdEQsS0FBSyxrQkFBb0I1RixFQUFLLGtCQUM5QixLQUFLLGVBQWlCQSxFQUFLLFdBQzNCLEtBQUssSUFBTUEsRUFBSyxJQUNoQixLQUFLLFNBQVc2RixDQUNqQixDQUNELElBQUksa0JBQW1CLENBQ3JCLE9BQU8sS0FBSyxtQkFBcUIsS0FBSyxjQUN2QyxDQUNELE9BQU9DLEVBQUloQixFQUFZLENBQ3JCLEtBQU0sQ0FBRSxJQUFBaUIsRUFBSyxTQUFBN2xELEVBQVUsaUJBQUE4bEQsQ0FBZ0IsRUFBSyxLQUU1QyxPQUFPRixFQUFHQyxFQUFLakIsRUFEQ2tCLEVBQThCLENBQUUsUUFBUyxJQUFNOWxELEdBQTVCQSxDQUNGLENBQ2xDLENBQ0QsU0FBVSxDQUNSLEtBQU0sQ0FBRSxhQUFBeWxELEVBQWMsU0FBQUUsQ0FBVSxFQUFHLEtBQ25DRixFQUFhLFFBQVEsQ0FBQzV4QyxFQUFNdFIsSUFBVSxDQUNwQzZpRCxHQUFXRCxHQUF1QnR4QyxDQUFJLEVBQUcsQ0FDdkMsUUFBUzh4QyxFQUFTcGpELENBQUssRUFDdkIsTUFBQUEsQ0FDUixDQUFPLENBQ1AsQ0FBSyxDQUNGLENBQ0QsZ0JBQWdCOGlELEVBQVksQ0FDMUIsT0FBT0MsR0FBV0QsQ0FBVSxDQUM3QixDQUNELHVCQUF1QlUsRUFBVTlYLEVBQVMsQ0FDeEMsS0FBTSxDQUFFLGFBQUF3WCxDQUFjLEVBQUcsS0FDbkIsQ0FBRSxPQUFBeGQsQ0FBUSxFQUFHd2QsRUFDYk8sRUFBYy9YLEVBQVEsU0FDdEJvWCxFQUFhVyxFQUFZLEtBQUtELENBQVEsRUFDNUMsR0FBSVYsSUFBZSxLQUNqQixPQUFPcGQsRUFFVCxNQUFNNS9CLEVBQVVpOUMsR0FBV0QsQ0FBVSxFQUNyQyxHQUFJaDlDLEVBQ0YsT0FBT0EsRUFBUSxNQUVqQixHQUFJNC9CLElBQVcsRUFDYixNQUFPLEdBRVQsTUFBTWdlLEVBQXNCZCxHQUF1Qk0sRUFBYSxDQUFDLENBQUMsRUFDNURTLEVBQTJCLENBQUMsR0FBR0YsQ0FBVyxFQUFFLFVBQVdHLEdBQWFBLElBQWFGLENBQW1CLEVBQzFHLE9BQU9GLEVBQVdHLEVBQTJCLEVBQUlqZSxDQUNsRCxDQUNILENBQ0EsU0FBU21lLEdBQVF6K0IsRUFBT3BxQixFQUFLLENBQzNCLE1BQU04b0QsRUFBWTErQixFQUFNcHFCLENBQUcsRUFDM0IsT0FBTzhvRCxFQUFZQSxFQUFXLEVBQUcsRUFDbkMsQ0FDQSxTQUFTQyxHQUFhLENBQUUsT0FBQXBnRCxFQUFRLFNBQUF5L0MsRUFBVSxPQUFBWSxDQUFNLEVBQUksQ0FDbEQsTUFBTUMsRUFBaUJiLEdBQVksR0FDN0IsQ0FBQ0gsRUFBUUUsQ0FBTSxFQUFJLENBQUMsU0FBVSxRQUFRLEVBQUUsSUFBS3ZyRCxHQUFTaXNELEdBQVFsZ0QsRUFBUS9MLENBQUksQ0FBQyxFQUMzRSxDQUFFLEtBQUFtRCxDQUFNLEVBQUc0SSxFQUNqQixHQUFJLENBQUM1SSxFQUNILE1BQU0sSUFBSSxNQUFNLDBDQUEwQyxFQUU1RCxNQUFNbW9ELEVBQWVlLEVBQWUsUUFBUSxDQUFDdlksRUFBUzFyQyxJQUFVakYsRUFBSyxDQUFFLFFBQUEyd0MsRUFBUyxNQUFBMXJDLENBQUssQ0FBRSxFQUFFLElBQUtzUixJQUM1RkEsRUFBSyxJQUFNMHlDLEVBQU90WSxDQUFPLEVBQ3pCcDZCLEVBQUssTUFBUXV2QyxHQUFjRCxHQUFlLENBQUEsRUFBSXR2QyxFQUFLLE9BQVMsQ0FBRSxDQUFBLEVBQUcsQ0FBRSxpQkFBa0IsRUFBTSxDQUFBLEVBQ3BGQSxFQUNSLENBQUMsRUFDRixHQUFJNHhDLEVBQWEsU0FBV2UsRUFBZSxPQUN6QyxNQUFNLElBQUksTUFBTSxvQ0FBb0MsRUFFdEQsTUFBTyxDQUNMLE9BQUFoQixFQUNBLE9BQUFFLEVBQ0EsUUFBU0QsQ0FDYixDQUNBLENBQ0EsU0FBU2dCLEdBQW1CWixFQUFLLENBQy9CLE1BQU1hLEVBQWFwQyxHQUFhdUIsQ0FBRyxFQUM3QmMsRUFBb0IsQ0FBQ3RDLEdBQVV3QixDQUFHLEdBQUssQ0FBQ2EsRUFDOUMsTUFBTyxDQUNMLFdBQUFBLEVBQ0Esa0JBQUFDLEVBQ0EsSUFBS0EsRUFBb0JsN0IsRUFBZ0IsaUJBQUNvNkIsQ0FBRyxFQUFJYSxFQUFhRSxFQUFBQSxnQkFBa0JmLENBQ3BGLENBQ0EsQ0FDQSxTQUFTZ0IsR0FBMEIsQ0FBRSxPQUFBM2dELEVBQVEsSUFBQTIvQyxFQUFLLFNBQUFGLEVBQVUsT0FBQVksQ0FBTSxFQUFJLENBQ3BFLE1BQU01eUMsRUFBUTJ5QyxHQUFhLENBQUUsT0FBQXBnRCxFQUFRLFNBQUF5L0MsRUFBVSxPQUFBWSxDQUFNLENBQUUsRUFDakR6RyxFQUFPMkcsR0FBbUJaLENBQUcsRUFDbkMsT0FBTyxJQUFJTixHQUFtQixDQUFFLE1BQUE1eEMsRUFBTyxLQUFBbXNDLEVBQU0sU0FBQTZGLENBQVUsQ0FBQSxDQUN6RCxDQUNBLFNBQVNuN0IsR0FBS3M4QixFQUFTQyxFQUFTLENBQzlCL3hDLEVBQVEsU0FBQyxJQUFNLEtBQUssTUFBTTh4QyxFQUFRLFlBQWEsRUFBRUMsQ0FBTyxDQUFDLENBQzNELENBQ0EsU0FBU0MsR0FBT0YsRUFBUyxDQUN2QixNQUFPLENBQUNDLEVBQVNFLElBQW9CLENBQ25DLEdBQUksS0FBSyxXQUFhLEtBQ3BCLE9BQU8sS0FBSyxTQUFTSCxDQUFPLEVBQUUsRUFBRUMsRUFBU0UsQ0FBZSxDQUU5RCxDQUNBLENBQ0EsU0FBU0MsR0FBY0osRUFBUyxDQUM5QixNQUFNSyxFQUFtQkgsR0FBTyxLQUFLLEtBQU1GLENBQU8sRUFDbEQsTUFBTyxDQUFDQyxFQUFTRSxJQUFvQixDQUNuQ0UsRUFBaUIsS0FBSyxLQUFNSixFQUFTRSxDQUFlLEVBQ3BEejhCLEdBQUssS0FBSyxLQUFNczhCLEVBQVNDLENBQU8sQ0FDcEMsQ0FDQSxDQUNBLElBQUlLLEdBQWtCLEtBQ3RCLE1BQU14MkMsR0FBUSxDQUNaLEtBQU0sQ0FDSixLQUFNLE1BQ04sU0FBVSxHQUNWLFFBQVMsSUFDVixFQUNELFdBQVksQ0FDVixLQUFNLE1BQ04sU0FBVSxHQUNWLFFBQVMsSUFDVixFQUNELFFBQVMsQ0FDUCxLQUFNLENBQUMsT0FBUSxRQUFRLEVBQ3ZCLFNBQVUsRUFDWCxFQUNELE1BQU8sQ0FDTCxLQUFNLFNBQ04sUUFBVW9GLEdBQ0RBLENBRVYsRUFDRCxJQUFLLENBQ0gsS0FBTSxPQUNOLFFBQVMsS0FDVixFQUNELEtBQU0sQ0FDSixLQUFNLFNBQ04sUUFBUyxJQUNWLEVBQ0QsY0FBZSxDQUNiLEtBQU0sT0FDTixTQUFVLEdBQ1YsUUFBUyxJQUNWLENBQ0gsRUFDTXNVLEdBQVEsQ0FDWixvQkFDQSxTQUNBLEdBQUcsQ0FBQyxHQUFHUCxHQUFPLGNBQWUsR0FBR0EsR0FBTyxJQUFJLEVBQUUsSUFBSzJyQixHQUFRQSxFQUFJLFlBQVcsQ0FBRSxDQUM3RSxFQUNNMlIsR0FBcUIxaEQsRUFBQUEsZ0JBQWdCLENBQ3pDLEtBQU0sWUFDTixhQUFjLEdBQ2QsTUFBQWlMLEdBQ0EsTUFBQTBaLEdBQ0EsTUFBTyxDQUNMLE1BQU8sQ0FDTCxNQUFPLEVBQ2IsQ0FDRyxFQUNELFFBQVMsQ0FDUCxHQUFJLENBQ0YsS0FBSyxNQUFRLEdBQ2IsS0FBTSxDQUFFLE9BQUFwa0IsRUFBUSxPQUFBdytDLEVBQVEsSUFBQW1CLEVBQUssY0FBQWxCLEVBQWUsU0FBQWdCLEVBQVUsT0FBQVksQ0FBUSxFQUFHLEtBQzNEZSxFQUFxQlQsR0FBMEIsQ0FDbkQsT0FBQTNnRCxFQUNBLElBQUEyL0MsRUFDQSxTQUFBRixFQUNBLE9BQUFZLENBQ1IsQ0FBTyxFQUNELEtBQUssbUJBQXFCZSxFQUMxQixNQUFNMUMsRUFBYUgsR0FBdUIsQ0FBRSxPQUFBQyxFQUFRLGNBQUFDLENBQWUsQ0FBQSxFQUNuRSxPQUFPMkMsRUFBbUIsT0FBT3AvQixFQUFDLEVBQUUwOEIsQ0FBVSxDQUMvQyxPQUFRemtELEVBQUssQ0FDWixZQUFLLE1BQVEsR0FDTituQixFQUFDLEVBQUMsTUFBTyxDQUFFLE1BQU8sQ0FBRSxNQUFPLE1BQVMsRUFBRS9uQixFQUFJLEtBQUssQ0FDdkQsQ0FDRixFQUNELFNBQVUsQ0FDSixLQUFLLE9BQVMsTUFBUSxLQUFLLGFBQWUsTUFDNUN3akQsR0FBVSxNQUFNLDhFQUE4RSxDQUVqRyxFQUNELFNBQVUsQ0FDUixHQUFJLEtBQUssTUFDUCxPQUVGLEtBQU0sQ0FBRSxPQUFBZSxFQUFRLElBQUE2QyxFQUFLLG1CQUFBRCxDQUFrQixFQUFLLEtBQzVDQSxFQUFtQixRQUFPLEVBQzFCLE1BQU1FLEVBQWtCM0MsR0FBcUIsQ0FDM0MsT0FBQUgsRUFDQSxnQkFBaUIsQ0FDZixjQUFnQno2QixHQUFVaTlCLEdBQWMsS0FBSyxLQUFNajlCLENBQUssRUFDeEQsS0FBT0EsR0FBVU8sR0FBSyxLQUFLLEtBQU1QLENBQUssRUFDdEMsT0FBU0EsR0FBVSs4QixHQUFPLEtBQUssS0FBTS84QixDQUFLLENBQzNDLENBQ1AsQ0FBSyxFQUNLdzlCLEVBQW1CRixFQUFJLFdBQWEsRUFBSUEsRUFBTUEsRUFBSSxjQUN4RCxLQUFLLFVBQVksSUFBSTlVLEdBQVNnVixFQUFrQkQsQ0FBZSxFQUMvRCxLQUFLLGlCQUFtQkMsRUFDeEJBLEVBQWlCLHdCQUEwQixJQUM1QyxFQUNELFNBQVUsQ0FDUixLQUFLLG1CQUFtQixTQUN6QixFQUNELGVBQWdCLENBQ1YsS0FBSyxZQUFjLFFBQ3JCLEtBQUssVUFBVSxTQUNsQixFQUNELFNBQVUsQ0FDUixVQUFXLENBQ1QsS0FBTSxDQUFFLEtBQUF0NkMsQ0FBTSxFQUFHLEtBQ2pCLE9BQU9BLEdBQWMsS0FBSyxVQUMzQixFQUNELFFBQVMsQ0FDUCxLQUFNLENBQUUsUUFBQXU2QyxDQUFTLEVBQUcsS0FDcEIsT0FBSSxPQUFPQSxHQUFZLFdBQ2RBLEVBRUR6WixHQUFZQSxFQUFReVosQ0FBTyxDQUNwQyxDQUNGLEVBQ0QsTUFBTyxDQUNMLE9BQVEsQ0FDTixRQUFRQyxFQUFnQixDQUN0QixLQUFNLENBQUUsVUFBQUMsQ0FBVyxFQUFHLEtBQ2pCQSxHQUVMN0MsR0FBd0I0QyxDQUFjLEVBQUUsUUFBUSxDQUFDLENBQUNwcUQsRUFBS3pCLENBQUssSUFBTSxDQUNoRThyRCxFQUFVLE9BQU9ycUQsRUFBS3pCLENBQUssQ0FDckMsQ0FBUyxDQUNGLEVBQ0QsS0FBTSxFQUNQLENBQ0YsRUFDRCxRQUFTLENBQ1AsZ0JBQWdCdXBELEVBQVksQ0FDMUIsT0FBTyxLQUFLLG1CQUFtQixnQkFBZ0JBLENBQVUsR0FBSyxJQUMvRCxFQUNELHlDQUF5Q3dDLEVBQVksQ0FDbkQsT0FBT0EsRUFBVyx1QkFDbkIsRUFDRCxZQUFZblMsRUFBSyxDQUNmMWdDLEVBQVEsU0FBQyxJQUFNLEtBQUssTUFBTSxTQUFVMGdDLENBQUcsQ0FBQyxDQUN6QyxFQUNELFVBQVVvUyxFQUFRLENBQ2hCLEdBQUksS0FBSyxLQUFNLENBQ2JBLEVBQU8sS0FBSyxJQUFJLEVBQ2hCLE1BQ0QsQ0FDRCxNQUFNQyxFQUFVLENBQUMsR0FBRyxLQUFLLFVBQVUsRUFDbkNELEVBQU9DLENBQU8sRUFDZCxLQUFLLE1BQU0sb0JBQXFCQSxDQUFPLENBQ3hDLEVBQ0QsWUFBYSxDQUNYLE1BQU1DLEVBQWM3NkMsR0FBU0EsRUFBSyxPQUFPLEdBQUcsU0FBUyxFQUNyRCxLQUFLLFVBQVU2NkMsQ0FBVSxDQUMxQixFQUNELGVBQWV4UixFQUFVQyxFQUFVLENBQ2pDLE1BQU13UixFQUFrQjk2QyxHQUFTQSxFQUFLLE9BQU9zcEMsRUFBVSxFQUFHdHBDLEVBQUssT0FBT3FwQyxFQUFVLENBQUMsRUFBRSxDQUFDLENBQUMsRUFDckYsS0FBSyxVQUFVeVIsQ0FBYyxDQUM5QixFQUNELCtCQUErQixDQUFFLEdBQUFoTixFQUFJLFFBQUFpTixHQUFXLENBQzlDLE1BQU16OUMsRUFBWSxLQUFLLHlDQUF5Q3d3QyxDQUFFLEVBQ2xFLEdBQUksQ0FBQ3h3QyxFQUNILE1BQU8sQ0FBRSxVQUFBQSxDQUFTLEVBRXBCLE1BQU0wQyxFQUFPMUMsRUFBVSxTQUNqQnBDLEVBQVUsQ0FBRSxLQUFBOEUsRUFBTSxVQUFBMUMsR0FDeEIsR0FBSXd3QyxJQUFPaU4sR0FBVy82QyxFQUFNLENBQzFCLE1BQU1nN0MsRUFBYzE5QyxFQUFVLGdCQUFnQnk5QyxDQUFPLEdBQUssQ0FBQSxFQUMxRCxPQUFPL0UsR0FBZUEsR0FBZSxDQUFBLEVBQUlnRixDQUFXLEVBQUc5L0MsQ0FBTyxDQUMvRCxDQUNELE9BQU9BLENBQ1IsRUFDRCx1QkFBdUIwOUMsRUFBVSxDQUMvQixPQUFPLEtBQUssbUJBQW1CLHVCQUF1QkEsRUFBVSxLQUFLLGdCQUFnQixDQUN0RixFQUNELFlBQVlyUSxFQUFLLENBQ2YsS0FBSyxRQUFVLEtBQUssZ0JBQWdCQSxFQUFJLElBQUksRUFDNUNBLEVBQUksS0FBSyxnQkFBa0IsS0FBSyxNQUFNLEtBQUssUUFBUSxPQUFPLEVBQzFEMFIsR0FBa0IxUixFQUFJLElBQ3ZCLEVBQ0QsVUFBVUEsRUFBSyxDQUNiLE1BQU16SCxFQUFVeUgsRUFBSSxLQUFLLGdCQUN6QixHQUFJekgsSUFBWSxPQUNkLE9BRUZvVixHQUFXM04sRUFBSSxJQUFJLEVBQ25CLE1BQU1lLEVBQVcsS0FBSyx1QkFBdUJmLEVBQUksUUFBUSxFQUN6RCxLQUFLLFdBQVdlLEVBQVUsRUFBR3hJLENBQU8sRUFDcEMsTUFBTW1hLEVBQVEsQ0FBRSxRQUFBbmEsRUFBUyxTQUFBd0ksR0FDekIsS0FBSyxZQUFZLENBQUUsTUFBQTJSLENBQUssQ0FBRSxDQUMzQixFQUNELGFBQWExUyxFQUFLLENBRWhCLEdBREE0TixHQUFhLEtBQUssSUFBSzVOLEVBQUksS0FBTUEsRUFBSSxRQUFRLEVBQ3pDQSxFQUFJLFdBQWEsUUFBUyxDQUM1QjJOLEdBQVczTixFQUFJLEtBQUssRUFDcEIsTUFDRCxDQUNELEtBQU0sQ0FBRSxNQUFPYyxFQUFVLFFBQUF2SSxDQUFPLEVBQUssS0FBSyxRQUMxQyxLQUFLLFdBQVd1SSxFQUFVLENBQUMsRUFDM0IsTUFBTTZSLEVBQVUsQ0FBRSxRQUFBcGEsRUFBUyxTQUFBdUksR0FDM0IsS0FBSyxZQUFZLENBQUUsUUFBQTZSLENBQU8sQ0FBRSxDQUM3QixFQUNELGFBQWEzUyxFQUFLLENBQ2hCMk4sR0FBVzNOLEVBQUksSUFBSSxFQUNuQjROLEdBQWE1TixFQUFJLEtBQU1BLEVBQUksS0FBTUEsRUFBSSxRQUFRLEVBQzdDLE1BQU1jLEVBQVcsS0FBSyxRQUFRLE1BQ3hCQyxFQUFXLEtBQUssdUJBQXVCZixFQUFJLFFBQVEsRUFDekQsS0FBSyxlQUFlYyxFQUFVQyxDQUFRLEVBQ3RDLE1BQU1nQixFQUFRLENBQUUsUUFBUyxLQUFLLFFBQVEsUUFBUyxTQUFBakIsRUFBVSxTQUFBQyxHQUN6RCxLQUFLLFlBQVksQ0FBRSxNQUFBZ0IsQ0FBSyxDQUFFLENBQzNCLEVBQ0QsbUJBQW1CNlEsRUFBZ0I1UyxFQUFLLENBQ3RDLEdBQUksQ0FBQzRTLEVBQWUsUUFDbEIsTUFBTyxHQUVULE1BQU10QyxFQUFjLENBQUMsR0FBR3RRLEVBQUksR0FBRyxRQUFRLEVBQUUsT0FBUWp4QyxHQUFPQSxFQUFHLE1BQU0sVUFBZSxNQUFNLEVBQ2hGOGpELEVBQWtCdkMsRUFBWSxRQUFRdFEsRUFBSSxPQUFPLEVBQ2pEOFMsRUFBZUYsRUFBZSxVQUFVLHVCQUF1QkMsQ0FBZSxFQUVwRixPQURzQnZDLEVBQVksUUFBUW9CLEVBQWUsSUFBTSxJQUN2QyxDQUFDMVIsRUFBSSxnQkFBa0I4UyxFQUFlQSxFQUFlLENBQzlFLEVBQ0QsV0FBVzlTLEVBQUtrQixFQUFlLENBQzdCLEtBQU0sQ0FBRSxLQUFBNlIsRUFBTSxTQUFBOUMsQ0FBVSxFQUFHLEtBQzNCLEdBQUksQ0FBQzhDLEdBQVEsQ0FBQzlDLEVBQ1osTUFBTyxHQUVULE1BQU0yQyxFQUFpQixLQUFLLCtCQUErQjVTLENBQUcsRUFDeERnVCxFQUFjLEtBQUssbUJBQW1CSixFQUFnQjVTLENBQUcsRUFDekRpVCxFQUFpQnZGLEdBQWNELEdBQWUsQ0FBQSxFQUFJLEtBQUssT0FBTyxFQUFHLENBQ3JFLFlBQUF1RixDQUNSLENBQU8sRUFDS0UsRUFBWXhGLEdBQWNELEdBQWUsQ0FBRSxFQUFFek4sQ0FBRyxFQUFHLENBQ3ZELGVBQUE0UyxFQUNBLGVBQUFLLENBQ1IsQ0FBTyxFQUNELE9BQU9GLEVBQUtHLEVBQVdoUyxDQUFhLENBQ3JDLEVBQ0QsV0FBWSxDQUNWd1EsR0FBa0IsSUFDbkIsQ0FDRixDQUNILENBQUMsRUNuaUJEeUIsR0FBZWxqRCxrQkFBZ0IsQ0FDN0IsS0FBTSxnQ0FDTixNQUFPLENBQ0wsV0FBWSxDQUNWLFFBQVMsRUFDWCxDQUNGLEVBQ0EsTUFBTyxDQUFDLG9CQUFxQixRQUFRLEVBQ3JDLE1BQU1pTCxFQUFPNVcsRUFBSyxDQUNWLEtBQUEsQ0FBRSxHQUFBSyxHQUFPMkgsR0FBQUEsUUFDVHBGLEVBQVV4QyxFQUFBQSxTQUFTLElBQ2hCLENBQ0wsQ0FDRSxNQUFPLE9BQ1AsS0FBTUMsRUFBRyxNQUFNLElBQ2pCLEVBQ0EsQ0FDRSxNQUFPLEdBQ1AsS0FBTUEsRUFBRyxNQUFNLEtBQ2pCLEVBQ0EsQ0FDRSxNQUFPLFFBQ1AsS0FBTUEsRUFBRyxNQUFNLEtBQ2pCLENBQUEsQ0FFSCxFQUVELFNBQVNLLEVBQU9vQixFQUFZLENBQ3RCOUIsRUFBQSxLQUFLLG9CQUFxQjhCLENBQUssRUFDL0I5QixFQUFBLEtBQUssU0FBVThCLENBQUssQ0FDMUIsQ0FDTyxNQUFBLENBQ0wsR0FBQXpCLEVBQ0EsUUFBQXVDLEVBQ0EsT0FBQWxDLENBQUEsQ0FFSixDQUNGLENBQUMseUNDckRDNnFCLG1CQURGLFdBQUEscUNBRUlTLEVBQUFBLHdCQUZKN2YsRUFBQSxHQUFBLFlBR3VCdkosSUFBTyxFQUFqQixDQUFNLE1BQUEsbUNBQUEsRUFBQSxDQUFBLFFBQUE2b0IsRUFBQSxRQUFBLElBQUEsRUFDUGhmLFlBQUEsRUFBTyxFQUFJQyxFQUFBQSxtQkFBQXNvQixFQUFBLFNBQUEsS0FBQUMsRUFBQUEsV0FBQTlvQixFQUFBLFFBQUFvUyxJQUNWNFIsRUFBQUEsVUFBQUEsRUFBQUEsRUFBQUEsWUFBc0JnUSxFQUFLLENBQ2pDLElBQUk1aEIsRUFBUSxLQUNiLEtBQUtwUyxFQUFPLGFBQUFvUyxFQUFBLE1BQUEsVUFBQSxVQUNYLEtBQUtBLEVBQUEsS0FBQSxLQUFBLHdFQVJaLEVBQUEsR0FBQSxFQUFBLENBQUEsZ1pDdURNLEtBQUEsQ0FBRSxHQUFBbGUsR0FBTzJILEdBQUFBLFFBQ1Rzb0IsRUFBUW9oQixFQVFSLENBQUUsZ0JBQUF6OEIsRUFBaUIsZUFBQW05QixFQUFnQixtQkFBQUMsRUFBb0IsS0FBQXRuQyxFQUFNLE9BQUErL0IsQ0FBTyxFQUN4RXgwQixTQUE2QjQ3QixFQUF1QixFQUN0RCxTQUFTOEIsRUFBVUMsRUFBYyxDQUMvQixPQUFPQSxFQUFRLE9BQVNBLEVBQVEsT0FBU0EsRUFBUSxLQUFPbHBDLEVBQUssTUFBTSxPQUNyRSxDQUVBLFNBQVMrakQsRUFBZ0IvbEQsRUFBUSxDQUN6QixNQUFBZ21ELEVBQVNobUQsRUFBRSxlQUFlLFFBQzFCcUUsRUFBU3JFLEVBQUUsZUFBZSxRQUMxQmltRCxFQUE4QixDQUFBLEVBQ3pCLFVBQUExckQsS0FBUTh1QyxFQUFlLE1BQzVCOXVDLEVBQUssTUFBUXlyRCxFQUFPLElBQ3RCQyxFQUFPLEtBQUs1aEQsQ0FBTSxFQUNUOUosRUFBSyxNQUFROEosRUFBTyxJQUM3QjRoRCxFQUFPLEtBQUtELENBQU0sRUFFbEJDLEVBQU8sS0FBSzFyRCxDQUFJLEVBSXBCLElBQUkyckQsRUFBWSxFQUNaQyxFQUFhRixFQUFPLE9BQVMsRUFDN0JHLEVBQWNILEVBQU8sT0FBUyxFQUM5QkksRUFBYyxFQUNsQixRQUFTcnBELEVBQUksRUFBR0EsRUFBSWlwRCxFQUFPLE9BQVFqcEQsSUFBSyxDQUNoQyxNQUFBekMsRUFBTzByRCxFQUFPanBELENBQUMsRUFDakJ6QyxFQUFLLFFBQVUsT0FDTDJyRCxFQUFBbHBELEVBQ0h6QyxFQUFLLFFBQVUsUUFDWDRyRCxFQUFBQSxFQUFhbnBELEVBQUlBLEVBQUltcEQsR0FFcEJDLEVBQUFBLEVBQWNwcEQsRUFBSUEsRUFBSW9wRCxFQUN0QkMsRUFBQUEsRUFBY3JwRCxFQUFJQSxFQUFJcXBELEVBRXhDLENBRUksR0FBQUQsRUFBY0YsR0FBYUcsRUFBY0YsRUFFcEMsTUFBQSxFQUVYLENBQ0EsU0FBU0csRUFBZTlyRCxFQUFLLENBQzNCLE1BQU8sVUFBWUEsQ0FDckIsQ0FnQkEsU0FBUytyRCxFQUFjcmIsRUFBYyxDQUMzQkEsRUFBQSxLQUFPLENBQUNBLEVBQVEsS0FHeEIsU0FBU3NiLEVBQWV0YixFQUFjLENBQ2hDQSxFQUFRLFVBQ1ZBLEVBQVEsU0FBUyxRQUFTbHJDLEdBQVcsQ0FDL0IsQ0FBQ0EsRUFBRSxRQUFVQSxFQUFFLGFBR25CQSxFQUFFLEtBQU9rckMsRUFBUSxLQUNqQnNiLEVBQWV4bUQsQ0FBQyxFQUFBLENBQ2pCLENBRUwsQ0FDQXdtRCxFQUFldGIsQ0FBTyxFQUV0QixTQUFTdWIsRUFBYXZiLEVBQVMsQ0FDN0IsR0FBSUEsRUFBUSxTQUFVLENBQ3BCLE1BQU1wdUMsRUFBU291QyxFQUFRLFNBQ25CcHVDLElBQ0ZBLEVBQU8sS0FBT0EsRUFBTyxTQUFTLE9BQVFrRCxHQUFXQSxFQUFFLFFBQVVBLEVBQUUsT0FBUyxFQUFJLEVBQUUsT0FBUyxFQUN2RnltRCxFQUFhM3BELENBQU0sRUFFdkIsQ0FDRixDQUNBMnBELEVBQWF2YixDQUFPLENBQ3RCLENBQ0EsU0FBU3diLEdBQWlCLENBQ3hCbi9CLEVBQU0sZUFBZSxDQUN2QixDQUNTLFNBQUFvL0IsRUFBWW5uRCxFQUFlekcsRUFBWSxDQUN4Q3d1QixFQUFBLGdCQUFpQi9uQixFQUFPekcsQ0FBSyxDQUNyQyxzcURDNUdNLEtBQUEsQ0FBRSxHQUFBekIsR0FBTzJILEdBQUFBLFFBRVQsQ0FBRSxnQkFBQWlOLEVBQWlCLGVBQUFtOUIsRUFBZ0IsS0FBQXJuQyxFQUFNLE9BQUErL0IsR0FBV3gwQixFQUFBQSxPQUE2QjQ3QixFQUF1QixFQUN4R3Q3QixFQUFRNjZCLEVBQ1JrZSxFQUFhdnZELEVBQUFBLFNBQVMsSUFDbkJpRCxFQUFFLE1BQ1AsQ0FDRSxDQUFDaEQsRUFBRyxPQUFPLE9BQU8sRUFBR3lxQyxFQUFPLE1BQzVCLENBQUMsWUFBY3pxQyxFQUFHLE9BQU8sT0FBTyxFQUFJMEksR0FBVyxDQUM3QytoQyxFQUFPLE1BQVEvaEMsQ0FDakIsRUFDQSxDQUFDMUksRUFBRyxPQUFPLEtBQUssRUFBR3VXLEVBQU0sT0FBUyxPQUNwQyxFQUNBQSxFQUFNLE1BQUEsQ0FFVCxFQUVLZzVDLEVBQVdub0QsTUFBSSxFQUFLLEVBRTFCLFNBQVNvb0QsRUFBaUIvdEQsRUFBWSxDQUNwQzh0RCxFQUFTLE1BQVE5dEQsRUFDakJzd0MsRUFBZSxNQUFRQSxFQUFlLE1BQU0sSUFBS3JwQyxJQUMzQyxDQUFDQSxFQUFFLFFBQVVBLEVBQUUsYUFHbkJBLEVBQUUsS0FBT2pILEdBQ0ZpSCxFQUNSLENBQ0gsQ0FFTSxNQUFBK21ELEVBQWUxdkQsRUFBQUEsU0FBUyxLQUNyQixDQUNMLENBQUNDLEVBQUcsU0FBUyxVQUFVLEVBQUd1dkQsRUFBUyxNQUNuQyxDQUFDLFlBQWN2dkQsRUFBRyxTQUFTLFVBQVUsRUFBSXdsQixHQUFXLENBQ2xEZ3FDLEVBQWlCaHFDLENBQUMsQ0FDcEIsQ0FBQSxFQUVILEVBRUtrcUMsRUFBYTN2RCxFQUFBQSxTQUFTLElBQ25CZ3lDLEVBQWUsTUFBTSxPQUFRcnBDLEdBQVdBLEVBQUUsUUFBVUEsRUFBRSxPQUFTLEVBQUksRUFBRSxNQUM3RSxFQUNLaW5ELEVBQVk1dkQsRUFBQUEsU0FBUyxJQUNsQmd5QyxFQUFlLE1BQU0sT0FBUXJwQyxHQUFXQSxFQUFFLE1BQU0sRUFBRSxNQUMxRCxFQUNLa25ELEVBQWtCN3ZELEVBQUFBLFNBQVMsSUFDeEIydkQsRUFBVyxNQUFRLEdBQUtBLEVBQVcsTUFBUUMsRUFBVSxLQUM3RCxFQUVEcmdELEVBQUEsTUFDRSxJQUFNLENBQ1d5aUMsRUFBQSxLQUNqQixFQUNBLElBQU0sQ0FDYThkLEdBQ25CLEVBQ0EsQ0FBRSxVQUFXLEVBQUssQ0FBQSxFQUlYLFNBQUFSLEVBQVlubkQsRUFBZXpHLEVBQVksQ0FDMUNBLElBQ2Fzd0MsRUFBQSxNQUFNN3BDLENBQUssRUFBRSxLQUFPLElBRWpDekcsSUFBVSxRQUNHc3dDLEVBQUEsTUFBTSxRQUFRQSxFQUFlLE1BQU0sT0FBTzdwQyxFQUFPLENBQUMsRUFBRSxDQUFDLENBQUMsRUFFbkV6RyxJQUFVLFNBQ0dzd0MsRUFBQSxNQUFNLEtBQUtBLEVBQWUsTUFBTSxPQUFPN3BDLEVBQU8sQ0FBQyxFQUFFLENBQUMsQ0FBQyxFQUVuRDJuRCxHQUNuQixDQUNBLFNBQVNBLEdBQW1CLENBQ2pCTixFQUFBLE1BQVFHLEVBQVcsUUFBVUMsRUFBVSxLQUNsRCx1ckNDN0dBRyxHQUFleGtELGtCQUFnQixDQUM3QixLQUFNLGtCQUNOLGFBQWMsR0FDZCxNQUFPLENBQ0wsUUFBUyxDQUNQLEtBQU0sTUFDUixDQUNGLEVBQ0EsT0FBUSxDQUNBLEtBQUEsQ0FBRSxHQUFBdEwsR0FBTzJILEdBQUFBLFFBQ2YsTUFBTyxDQUFFLEdBQUEzSCxDQUFHLENBQ2QsQ0FDRixDQUFDLHFFQ3hCQyxNQUFBOC9CLEVBQUE1VSxtQkFNTSxXQU5OLEVBREYsT0FBQTllLFlBQUEsRUFHZ0JDLHFCQUFnQyxNQUFBWixHQUFBLEVBQTFDVyxZQUFBLEVBQUErZSxFQUFBLFlBQUFRLDBCQUVXN2YsS0FMakIsU0FHd0N1dEIsSUFBQUEsRUFBQUEsS0FBQUEsQ0FBQUEsUUFBQUEsRUFBQUEsUUFBQUEsSUFBQUEsY0FDVixFQUFJLEVBQUFodEIsRUFBQSxtQkFBQXNvQixXQUFBLEtBQUFDLEVBQUEsV0FBQTlvQixFQUFBLFFBQUEsQ0FBQTdJLEVBQUFpRixLQUExQmtFLEVBQUFBLFVBQUEsRUFBQUMsRUFBQSxtQkFBbUVzb0IsZ0JBQW5FenNCLEdBQW1FLENBSjNFakYsRUFBQSxNQUFBbUosRUFBQSxVQUFBLEVBQUErZSxFQUFBQSxZQUFBMlUsRUFBQTdTLEVBQUFBLFdBQUEsQ0FJZ0QsSUFBQSxFQUFHLFFBQUssRUFBQSxFQUFBaHFCLEVBQUEsQ0FKeEQsUUFBQTBzQixHQUFBMXNCLEVBQUEsT0FBQSxDQUFBLENBQUEsRUFBQSxLQUFBLEdBQUEsQ0FBQSxTQUFBLENBQUEsR0FBQXNKLEVBQUEsbUJBQUEsR0FBQSxFQUFBLE9BQUEsRUFBQSxHQUFBLEVBQUEsQ0FBQSwyQ0NrRWVqQixxQkFBZ0IsQ0FDN0J4TCxLQUFNLFdBQ05zRCxXQUFZLENBQUUyc0QsZ0JBQUFBLEVBQWlCLEVBQy9COWpDLGFBQWMsR0FDZDFWLE1BQU8sQ0FJTGYsVUFBVyxDQUNUMVEsS0FBTSttQixNQUNQLEVBS0QwRyxZQUFhLENBQ1h6dEIsS0FBTSttQixNQUNQLEVBSURta0MsY0FBZSxDQUNibHJELEtBQU0rbUIsTUFDUCxFQUtEdHBCLFFBQVMsQ0FDUHVDLEtBQU0rbUIsTUFDUCxFQUlEbmEsUUFBUyxDQUNQNU0sS0FBTSttQixNQUNQLEVBS0R3TixRQUFTLENBQ1B2MEIsS0FBTSttQixNQUNQLEVBSURva0MsaUJBQWtCLENBQ2hCbnJELEtBQU0ybkIsUUFDTk4sUUFBUyxFQUNWLEVBSUQrakMsV0FBWSxDQUNWcHJELEtBQU0ybkIsUUFDTk4sUUFBUyxFQUNWLEVBS0Rna0MsU0FBVSxDQUNScnJELEtBQU0sQ0FBQzJuQixRQUFTWixNQUFNLEVBQ3RCTSxRQUFTUSxNQUNWLEVBSURXLE1BQU8sQ0FDTHhvQixLQUFNK21CLE9BQ05NLFNBQVUsQ0FDUixNQUFPLEVBQ1QsQ0FDRCxFQUlENk8sS0FBTSxDQUNKbDJCLEtBQU0ybkIsUUFDTk4sUUFBUyxFQUNWLEVBSURvWixTQUFVLENBQ1JwWixRQUFTLEVBQ1YsRUFLRGlrQyxpQkFBa0IsQ0FDaEJqa0MsUUFBUyxHQUNUcm5CLEtBQU0ybkIsT0FDUCxFQUlENVUsSUFBSyxDQUFFLEVBS1AweEIsU0FBVSxDQUNSemtDLEtBQU0rbUIsT0FDTk0sUUFBU1EsTUFDWCxDQUNELEVBQ0RzRCxNQUFPLENBSUwsU0FJQSxVQUlBLFFBSUEsU0FJQSxpQkFJQSxzQkFBcUIsRUFFdkJuRCxNQUFNdlcsRUFBWTVXLEVBQVUsQ0FDMUIsS0FBTSxDQUFFSyxHQUFBQSxDQUFLLEVBQUUySCxHQUFLLE1BQUEsRUFDZCxDQUFFbUYsTUFBQUEsR0FBVVMsR0FBUSxFQUNwQjhJLEVBQVV2SixFQUNWLENBQUU0QixXQUFBQSxFQUFZakIsa0JBQUFBLEVBQW1CRSxhQUFBQSxDQUFhLEVBQUk2QixHQUFVLEVBRWxFeE0sRUFBRXF0RCxLQUFLOTVDLEVBQU03RSxRQUFVek8sR0FBUyxDQUMxQkEsRUFBS3hCLE9BQVMsT0FBU3dCLEVBQUt4QixpQkFBaUJnTSxHQUFxQnhLLEVBQUt4QixpQkFBaUJrTSxJQUMxRnRNLEdBQU9OLEtBQUssbURBQW1ELENBRW5FLENBQUMsRUFFRCxTQUFTc3hCLEdBQXlCLENBRWhDLE1BQU1oaUIsRUFBWSxDQUFBLEVBRWxCck4sT0FBQUEsRUFBRTZPLFFBQVEwRSxFQUFNN0UsUUFBUyxDQUFDbkgsRUFBUXJILElBQVEsT0FDeEMsR0FBSXFILEVBQU85SSxRQUFVa3JCLE9BQ25CLE9BRUYsTUFBTTJGLEVBQVc1WSxFQUFBQSxNQUFNblAsRUFBTzlJLEtBQUssRUFDL0I2d0IsSUFBYTNGLFFBQWFwaUIsRUFBT3l3QixPQUFTLE1BQVN6d0IsRUFBQUEsRUFBTzZGLFlBQVA3RixZQUFBQSxFQUFrQnl3QixRQUFTLEtBRWhGM3FCLEVBQUtuTixDQUFHLEVBQUlvdkIsRUFFaEIsQ0FBQyxFQUVNdHZCLEVBQUVvSyxVQUFVTixFQUFNLENBQUEsRUFBSXlKLEVBQU1nYyxZQUFhbGlCLENBQUksQ0FBQyxDQUN2RCxDQUVBLE1BQU1tTCxFQUFXbEosRUFBQUEsU0FBUytmLEVBQWlCLENBQUUsRUFFN0MsSUFBSTY5QixFQUFrQixLQUV0QixNQUFNeDlCLEVBQWlEaGtCLEVBQ3JELElBQ1M2SCxFQUFNN0UsUUFFZnJELEVBQ0EsS0FDQ3FELEdBQWlCLENBQ2hCLE1BQU02M0IsRUFBV3ZtQyxFQUFFb0ssVUFBVW1KLEVBQU1nekIsVUFBWSxDQUFBLENBQUUsRUFDakR2bUMsRUFBRTZPLFFBQVFILEVBQVV6TyxHQUFTLENBQzNCNkosRUFBTTdKLEVBQU1zbUMsRUFBVXRtQyxDQUFJLENBQzVCLENBQUMsRUFFSXNULEVBQU1ndkIsVUFFVHZpQyxFQUFFNk8sUUFBUUgsRUFBVXpPLEdBQVMsQ0FDM0IsT0FBT0EsRUFBS29pQyxNQUNaLE9BQU9waUMsRUFBSysvQixJQUNkLENBQUMsRUFHQ3pzQixFQUFNc0IsS0FDUjdVLEVBQUU2TyxRQUFRSCxFQUFVOFQsR0FBTSxDQUN4QkEsRUFBRTNOLElBQU0vSyxFQUFNLENBQUUsRUFBRXlKLEVBQU1zQixJQUFLMk4sRUFBRTNOLEdBQUcsQ0FDcEMsQ0FBQyxFQUlIN1UsRUFBRTZPLFFBQVFILEVBQVV6TyxHQUFTLENBQzNCQSxFQUFLcXRELFlBQWMsSUFDVjdpQixFQUFXeHFDLENBQUksQ0FFMUIsQ0FBQyxFQUdELElBQUl5dUMsRUFBNkIsQ0FBQSxFQUNqQzF1QyxFQUFFNk8sUUFBUUgsRUFBUyxDQUFDOFQsRUFBR3RpQixJQUFRLENBQzdCc2lCLEVBQUU4YixLQUFPcCtCLEVBQ1R3dUMsRUFBUTVoQyxLQUFLMFYsQ0FBQyxDQUNoQixDQUFDLEVBQ0Rrc0IsRUFBVTF1QyxFQUFFNFAsT0FBTzgrQixFQUFVenVDLEdBQ3BCQSxFQUFLZ04sT0FBU1IsR0FBVW9ELFlBQ2hDLEVBRUQsTUFBTXU1QixFQUVGLENBQUEsRUFFSnNGLE9BQUFBLEVBQVE3L0IsUUFBUzVPLEdBQVMsQ0FDeEIsSUFBSXErQixFQUFPcitCLEVBQUtxK0IsS0FDaEIsT0FBT3IrQixFQUFLcStCLEtBQ1o4SyxFQUFjOUssQ0FBSSxFQUFJcitCLENBQ3hCLENBQUMsRUFDTW1wQyxDQUNULENBQ0YsRUFFQSxTQUFTbWtCLEdBQWtCLENBQ3pCLE1BQU1QLEVBQWdCaHRELEVBQUVvSyxVQUFVb08sQ0FBUSxFQUMxQzdiLEVBQUl3d0IsS0FBSyx1QkFBd0I2L0IsQ0FBYSxDQUNoRCxDQUVBMWdELEVBQUFBLE1BQ0UsSUFDU2lILEVBQU15NUMsY0FFZHZ1RCxHQUFlLENBQ2QsVUFBV3lCLEtBQU9zWSxFQUNoQixPQUFPQSxFQUFTdFksQ0FBRyxFQUVyQjRKLEVBQU0wTyxFQUFVL1osR0FBUyxDQUFBLENBQUUsQ0FDN0IsRUFDQSxDQUNFNmxDLEtBQU0sRUFDUixDQUNGLEVBRUEsTUFBTXROLEVBQU1BLENBQUMzcEIsRUFBV25OLElBQ2ZGLEVBQUVnM0IsSUFBSTNwQixFQUFNbk4sQ0FBRyxFQUd4QixTQUFTc3RELEVBQVN0dEQsRUFBYSxDQUM3QixHQUFJQSxHQUFPLEtBR1gsT0FBSUEsRUFBSWtyQixRQUFRLEdBQUcsR0FBSyxFQUNmbHJCLEVBQUl1dEQsTUFBTSxHQUFHLEVBRWZ2dEQsQ0FDVCxDQVFBLFNBQVN1cUMsRUFBV3hxQyxFQUFXLENBQzdCLE1BQU1DLEVBQU1ELEVBQUtDLElBRWpCLGVBQWV3dEQsRUFBb0IvZ0MsRUFBYSxDQUU5Q2doQyxFQUFlaGhDLEVBQVExc0IsQ0FBSSxDQUM3QixDQUVBLFNBQVMydEQsR0FBVyxDQUNsQkMsR0FBUTV0RCxDQUFJLENBQ2QsQ0FFQSxTQUFTNnRELEVBQVE3dEQsRUFBV0MsRUFBVSxDQUNoQ0EsRUFBSXVjLE9BQVMsU0FDWHhjLEVBQUs4dEQsb0JBQXNCLFNBQzdCQyxHQUdOLENBRUEsSUFBSUMsRUFBbUIsS0FDbkIxNkMsRUFBTStXLE1BQU0sVUFBWXBxQixDQUFHLEVBQzdCK3RELDREQUFxQzE2QyxFQUFNK1csTUFBTSxVQUFZcHFCLENBQUcsRUFBQyxNQUFTZ3VELEVBQWtCaHVELENBQUcsQ0FBSyxFQUFBLElBQUEsRUFDM0ZELEVBQUtxTyxPQUNkMi9DLEVBQVUxL0MsRUFBQSxZQUFBMlosbUJBQUEsV0FBQSxFQUFBLENBQUEsY0FBNEJqb0IsRUFBS3FPLE9BQU0sTUFBUzQvQyxFQUFrQmh1RCxDQUFHLENBQUssRUFBQSxJQUFBLEVBQzNFRCxFQUFLbU4sV0FBYW5OLEVBQUttTixVQUFVNHFCLE9BQVMsS0FDbkRpMkIsRUFBVTEvQyxFQUFBQSxZQUFBMlosRUFBQUEsd0NBQUErQixFQUFBQSxXQUFBLENBQUEsSUFFQXhyQixHQUFlLENBQ25CMHZELEVBQW9CMXZELE1BQU15QixDQUFHLEVBQUl6QixDQUNsQyxFQUFBLGNBQ1l1NEIsRUFBSXhlLEVBQVV0WSxDQUFHLEVBQUMsUUFDckJ5c0IsR0FBZ0IsQ0FDeEJtaEMsRUFBUTd0RCxFQUFNMHNCLENBQU0sQ0FDdEIsR0FDSTFzQixFQUFLbU4sVUFBUyxDQUFBLE1BQ1g4Z0QsRUFBa0JodUQsQ0FBRyxFQUFDLHNCQUNSd3RELEVBQW1CLFFBQy9CRSxFQUVaLEVBQUEsSUFBQSxHQUdILE1BQU1RLEVBQWFaLEVBQVN0dEQsQ0FBRyxFQUUvQixPQUFPbEQsRUFBR3VwQyxTQUFTajRCLE9BQU8sQ0FDeEJpRixNQUFPLENBQ0wsR0FBR3RULEVBQ0hzVyxNQUFPdFcsRUFBS2tQLE1BQ1osQ0FBQ25TLEVBQUd1cEMsU0FBU250QixJQUFJLEVBQUdnMUMsRUFDcEJ4c0QsS0FBTTFCLEVBQ05tdUQsU0FBVW51RCxDQUNYLEVBQ0RvcUIsTUFBTyxDQUNMbkIsU0FBVSxDQUNSLE9BQU84a0MsQ0FDVCxDQUNGLENBQ0YsQ0FBQyxDQUNILENBRUEsTUFBTUssRUFBZ0JscUQsRUFBQUEsTUFDaEIsQ0FBRVksRUFBQUEsQ0FBSSxFQUFFUyxHQUFPLEVBQ2Ywb0QsRUFBMkIvcEQsTUFBSSxDQUFBLENBQUUsRUFFdkMsU0FBU21xRCxFQUFzQnJ1RCxFQUFhLENBQzFDLE9BQU9pdUQsRUFBb0IxdkQsTUFBTXlCLENBQUcsQ0FDdEMsQ0FFQSxTQUFTdXZCLEVBQWdCdnZCLEVBQWtCLE9BQ3pDLE9BQU9xdUQsRUFBQUEsRUFBc0JydUQsQ0FBRyxJQUF6QnF1RCxZQUFBQSxFQUE0QmpnQyxjQUNyQyxDQUVBLFNBQVNqakIsR0FBbUMsQ0FDMUMsTUFBTyxDQUFFZ0MsS0FBTW1MLEVBQVV3MEMsY0FBZXo1QyxFQUFNeTVDLGNBQWV2OUIsZ0JBQUFBLEVBQWlCdStCLFNBQUFBLEVBQVVRLFFBQUFBLEVBQVNDLFdBQUFBLEVBQ25HLENBRUEsU0FBU1AsRUFBa0JodUQsRUFBYSxDQUN0QyxNQUFPLENBQUUsR0FBR21MLEVBQWMsRUFBRW5MLElBQUFBLEVBQUt6QixNQUFPdUIsRUFBRWczQixJQUFJeGUsRUFBVXRZLENBQUcsRUFDN0QsQ0FFQSxlQUFldXVELEVBQVdDLEVBQWtCLEdBQU94eEQsRUFBa0IsU0FBNEIsQ0FDL0YsR0FBSSxDQUNGLE9BQUlxVyxFQUFNZ3ZCLFVBQ1IsTUFBTXZsQyxFQUFHcVEsS0FBS3NoRCxhQUFhTCxFQUFjN3ZELEtBQUssRUFFekMsRUFDUCxPQUFPaUgsRUFBUSxDQUNmLE9BQUtncEQsR0FDSC94RCxFQUFJd3dCLEtBQUssaUJBQWtCLENBQUUsR0FBRzloQixFQUFjLEVBQUV2TixNQUFPNEgsRUFBR3hJLFFBQUFBLENBQVEsQ0FBQyxFQUc5RCxFQUNULENBQ0YsQ0FFQSxlQUFlOHdELEdBQVcsQ0FDcEJkLEdBRUZBLEVBQVcxMkIsT0FBTSxFQUdmLE1BQU1pNEIsRUFBVSxJQUNsQmxCLElBQ0EsTUFBTTUxQyxFQUFRLFNBQUEsRUFDZGhiLEVBQUl3d0IsS0FBSyxVQUFXOWhCLEVBQWMsQ0FBQSxFQUNsQzFPLEVBQUl3d0IsS0FBSyxTQUFVOWhCLEVBQWMsQ0FBQSxFQUVyQyxDQUVBLGVBQWVtakQsR0FBVSxDQUd2QixNQUFNai9CLEVBQWNGLElBQ2RzQixFQUFVM3dCLEVBQUUyd0IsUUFBUW5ZLENBQVEsRUFDbEMsVUFBV21LLEtBQVNnTyxFQUFTLENBQzNCLE1BQU1DLEVBQWU1d0IsRUFBRWczQixJQUFJekgsRUFBYTVNLEVBQU0sQ0FBQyxDQUFDLEVBQzVDaU8sR0FBZ0IsS0FDbEI1d0IsRUFBRTR1RCxNQUFNcDJDLEVBQVVtSyxFQUFNLENBQUMsQ0FBQyxFQUUxQjNpQixFQUFFOHhCLElBQUl0WixFQUFVbUssRUFBTSxDQUFDLEVBQUdpTyxDQUFZLENBRTFDLENBRUksTUFBTTY5QixFQUFVLElBQ2xCbEIsSUFDQSxNQUFNNTFDLEVBQVEsU0FBQSxFQUNWcEUsRUFBTW5XLE9BQ1JtVyxFQUFNblcsTUFBTWlPLEVBQVksQ0FBRSxFQUc1QjFPLEVBQUl3d0IsS0FBSyxTQUFVOWhCLEVBQWMsQ0FBQSxFQUNqQzFPLEVBQUl3d0IsS0FBSyxRQUFTOWhCLEVBQWMsQ0FBQSxFQUM1QmtJLEVBQU0wNUMsa0JBQ1JlLElBR04sQ0FFQSxNQUFNMTNCLEVBQWtCdjVCLEVBQUFBLFNBQVMsSUFBTSxDQUNyQyxNQUFNcy9CLEVBQVksQ0FBQSxFQUNad3lCLEVBQWtELENBQ3REejlDLE9BQVEsQ0FDTjRtQixLQUFNLEdBQ05sMkIsS0FBTSxVQUNOaVEsU0FBVSxHQUVWNmtCLE1BQVE1ckIsR0FBZ0MsQ0FDdENnakQsR0FDRCxFQUNEL2dELE1BQU8sRUFDUHZGLEtBQU0xQyxFQUFFLHVCQUF1QixDQUNoQyxFQUNENUgsTUFBTyxDQUNMNDZCLEtBQU0sR0FDTmptQixTQUFVLEdBRVY2a0IsTUFBUTVyQixHQUFnQyxDQUN0Q3dqRCxHQUNELEVBQ0Q5bUQsS0FBTTFDLEVBQUUsc0JBQXNCLEVBQzlCaUksTUFBTyxDQUNULEdBRUZuRCxFQUFNK2tELEVBQWV0N0MsRUFBTThpQixPQUFPLEVBQ2xDLFFBQVNuMkIsS0FBTzJ1RCxFQUFlLENBQzdCLE1BQU1ueUIsRUFBTW15QixFQUFjM3VELENBQUcsRUFDN0J3OEIsRUFBSW95QixPQUFTLElBQU0sQ0FDakJweUIsRUFBSTlGLE1BQU12ckIsRUFBWSxDQUFFLEdBRTFCZ3hCLEVBQUt2dkIsS0FBSzR2QixDQUFHLENBQ2YsQ0FFQUwsT0FBQUEsRUFBS3R2QixLQUFLLENBQUMvRyxFQUFRZ0gsSUFDVmhILEVBQUVpSCxNQUFRRCxFQUFFQyxLQUNwQixFQUNNb3ZCLENBQ1QsQ0FBQyxFQUVELFNBQVMweUIsR0FBaUIsT0FDeEIsR0FBSXg3QyxFQUFNMjVDLGFBQWUsSUFJckIzNUMsRUFBTTQ1QyxXQUFhLEdBQU8sQ0FDNUIsSUFBSTZCLElBQU96N0MsRUFBQUEsRUFBTTQ1QyxXQUFONTVDLFlBQUFBLEVBQWdCeTdDLE9BQVEsSUFDbkM5QixFQUFhbHRELEVBQUVtdEQsU0FBU2EsRUFBVWdCLEVBQU16N0MsRUFBTTQ1QyxRQUFRLENBQ3hELENBQ0YsQ0FFQTRCLElBRUEsU0FBU3poQixHQUFVLENBQ2pCLE9BQU85MEIsQ0FDVCxDQUVBLFNBQVN5MkMsR0FBbUIsQ0FDMUIsT0FBTzE3QyxFQUFNeTVDLGFBQ2YsQ0FLQSxTQUFTa0MsR0FBUUMsRUFBY3JsRCxFQUFRLEdBQU0sQ0FDdENBLEdBQ0g5SixFQUFFcXRELEtBQUtydEQsRUFBRXNFLEtBQUtrVSxDQUFRLEVBQUl2WSxHQUFTLENBQ2pDLE9BQU91WSxFQUFTdlksQ0FBSSxDQUN0QixDQUFDLEVBRUhvVCxFQUFRbUYsRUFBVTIyQyxDQUFPLEVBQ3pCNUIsR0FDRixDQUVBLE1BQU02QixHQUFxQmhyRCxNQUFJLEVBQUssRUFFOUJpckQsR0FBZUEsSUFBTSxDQUN6Qmh4RCxHQUFPSixNQUFNLHFDQUFzQ214RCxHQUFtQjN3RCxLQUFLLEVBQ3ZFMndELEdBQW1CM3dELFFBQVUsSUFBUXl1RCxHQUV2Q0EsS0FJRVcsR0FBVzV0RCxHQUFjLENBQ3pCQSxFQUFLOHRELG9CQUFzQixTQUM3QnNCLE1BSUVDLEdBQTRCdjlDLEdBQXNCLENBQ3REcTlDLEdBQW1CM3dELE1BQVFzVCxFQUMzQnM5QyxNQUdGLGVBQWUxQixFQUFlbHZELEVBQVl3QixFQUF1QixDQUMvRCxNQUFNQyxFQUFNRCxFQUFLQyxJQUNqQkYsRUFBRTh4QixJQUFJdFosRUFBVXRZLEVBQUt6QixDQUFLLEVBRTFCLE1BQU1pd0QsRUFBU243QyxFQUFNZzhDLHVCQUtyQixHQUFJdHZELEVBQUs0dkIsWUFBYSxDQUNwQixNQUFNM3ZCLEVBQU1ELEVBQUtDLElBQ1h6QixFQUFRK1osRUFBU3RZLENBQUcsRUFDcEJzdkQsRUFBZS8vQixFQUFnQnZ2QixDQUFHLEVBQ2xDMnZCLEVBQ0o1dkIsRUFBSzR2Qix1QkFBdUJ2RyxTQUFXcnBCLEVBQUs0dkIsWUFBYzV2QixFQUFLNHZCLFlBQVloaUIsT0FDdkUzRyxFQUFRbUUsSUFDUm9rRCxHQUF5QyxDQUM3Q3ZxRCxNQUFPLEVBQ1BpQyxJQUFLRCxFQUFNbUcsS0FDWEEsS0FBTW5HLEVBQU1tRyxLQUNaLEdBQUduRyxFQUNIaEgsSUFBQUEsRUFDQXpCLE1BQUFBLEVBQ0Erd0QsYUFBQUEsRUFDQUUsVUFBVyxHQUNYamdDLGdCQUFBQSxFQUNBelosS0FBTSxVQUVSNlosRUFBWTQvQixFQUFrQixDQUNoQyxDQUVJbDhDLEVBQU02NUMsa0JBQXFCLE1BQU1xQixFQUFXQyxFQUFRLFFBQVEsR0FDOURuQixLQUVFdHRELEVBQUs4dEQsbUJBQXFCLE1BQVE5dEQsRUFBSzh0RCxvQkFBc0IsSUFBUTl0RCxFQUFLOHRELG9CQUFzQixXQUNsR3NCLElBRUosQ0FFQSxNQUFNTSxHQUFnQjV5RCxFQUFBQSxTQUFTLElBQ3hCd1csRUFBTWd2QixTQUdKaHZCLEVBQU1oVSxRQUFROGlDLE1BRlosRUFHVixFQUVEa3JCLE9BQUFBLElBQ08sQ0FDTHYyQixJQUFBQSxFQUNBaDZCLEdBQUFBLEVBQ0Eyd0QsZUFBQUEsRUFDQWMsV0FBQUEsRUFDQVQsU0FBQUEsRUFDQVEsUUFBQUEsRUFDQWgyQyxTQUFBQSxFQUNBMjFDLG9CQUFBQSxFQUNBSSxzQkFBQUEsRUFDQTkrQixnQkFBQUEsRUFDQTZkLFFBQUFBLEVBQ0EyaEIsaUJBQUFBLEVBQ0FDLFFBQUFBLEdBQ0FaLGNBQUFBLEVBQ0FULFFBQUFBLEdBQ0F1QixtQkFBQUEsR0FDQUUseUJBQUFBLEdBQ0E1L0IsZ0JBQUFBLEVBQ0E0RyxnQkFBQUEsRUFDQXE1QixjQUFBQSxHQUNBekIsa0JBQUFBLEVBQ0E3aUQsYUFBQUEsRUFFSixDQUNGLENBQUMsOElDNW5CQzZjLG1CQXdDTSxnQkFBQSxFQXpDUixPQUFBOWUsWUFBQSxFQUdNQyxxQkFvQ1ksTUFBQVosR0FBQSxFQXBDWlcsWUFBQSxFQUFBK2UsRUFBQSxZQUFBUSwwQkFITjdmLEVBSWE5TCxHQUFBQSxtQkFEUCxJQW9DWSxFQUFBLEtBQUEsQ0FBQSxRQWxDTm9yQixFQUFlLFFBQUEsSUFBQSxFQUFBaGYsWUFDSCxFQUFBK2UsRUFBQSxZQUFBUSwwQkFBQTdmLEVBQUEsR0FBQSxLQUFBLElBQUEsRUFBQW1oQixhQUFBLENBQ2hCLElBQUEsZ0JBQ1ExcUIsTUFBQUEsRUFBQUEsU0FDUCxTQUFPb3dELHlCQUFBQSxFQUNSN21ELEVBQUssUUFBQyxDQUNMLE1BQUFBLEVBQUEsY0FDQSxNQUFBLGlCQUFBLG1CQUFBQyxFQUFBLENBQUEsSUFBQUEsRUFBQSxDQUFBLEVBQUE0akIsR0FBQTdqQixFQUFBLHlCQUFBLEVBQUEsR0FaVCxpQkFjUUMsRUF3QlksQ0FBQSxJQUFBQSxFQUFBLENBQUEsRUFBQTRqQixHQUFBN2pCLEVBQUEseUJBQUEsRUFBQSxFQUFBLENBQUEsRUFBQSxDQXhCWixRQUFBc2YsRUFBQSxRQUFBLElBQUEsT0FBQSxPQUlHdGYsRUFBQSxPQUFTNG1CLElBQ1R0bUIsRUFBQUEsVUFBQSxFQUFBK2UsRUFBQSxZQUFnQjljLEVBQVksMEJBQUE3TixFQUFBc0wsRUFBQSxZQUFBLFlBQUF0TCxFQUFBLEtBQUEsMEJBQUEsRUFBQXlzQixhQUFBLENBQUEsSUFBQSxDQUFBLEVBQUFuaEIsRUFBQSxVQUFBLENBbkJ2QyxRQUFBQSxFQUFBLGdCQXFCcUIsaUJBQWNBLEVBQUEsWUFDdkIsQ0FBQSxFQUFBNGYsRUFBQUEsWUFBQSxDQUNFLGlCQUFBTixFQUFBLFFBQUEsSUFBQSxDQXZCZDVlLEVBQUEsbUJBQUEsTUFBQWQsR0FBQSxFQUFBVSxFQUFBQSxVQXdCc0MsRUFBSSxFQUFBQyxFQUFBLG1CQUFBc29CLFdBQUEsS0FBQUMsRUFBQSxXQUFBOW9CLEVBQUEsZ0JBQUEsQ0FBQTdJLEVBQUFpRixLQUExQmtFLEVBQUFBLFVBQUEsRUFBQUMsRUFBQSxtQkFBNkVzb0IsZ0JBQTdFenNCLEdBQTZFLENBeEI3RmpGLEVBQUEsT0FBQSxJQUFBbUosRUFBQUEsVUFBQSxFQUFBK2UsRUFBQSxZQUFBMlUsRUFBQTdTLGFBQUEsQ0F3QmtFLElBQUEsRUFBRyxRQUFLLEVBQUEsRUFBQWhxQixFQUFBLENBeEIxRSxRQUFBMHNCLEdBQUExc0IsRUFBQSxPQUFBLENBQUEsQ0FBQSxFQUFBLEtBQUEsR0FBQSxDQUFBLFNBQUEsQ0FBQSxHQUFBc0osRUFBQSxtQkFBQSxHQUFBLEVBQUEsY0FBQSxDQUFBLENBQUEsQ0FBQSxFQTZCMEIrZ0IsRUFBQUEsQ0FBQUEsRUFBQUEsQ0E3QjFCeGhCLEVBQUEsTUE2QmlELGFBQVcsRUFBQSxDQUNoRCxLQUFBLGNBQUEsR0FBaUJzZixFQUFPa0MsUUFBQUEsSUFBQUEsQ0FBQUEsRUFBQUEsWUFBOEJqZixFQUFZLENBQUEsTUFBQXZDLEVBQUEsTUFBQSxhQUFBLHdCQTlCOUUsRUFBQSxLQUFBLEVBQUEsQ0FBQSxRQUFBLE9BQUEsQ0FBQSxDQUFBLENBQUEsRUFBQSxJQUFBLEdBZ0MwQndoQixFQUFBQSxPQWhDMUJ4aEIsRUFBQSxNQWdDbUQsZUFBYSxFQUFBLENBQ3BELEtBQUEsZ0JBQUEsR0FBaUJzZixFQUFPa0MsUUFBQUEsSUFBQUEsQ0FBQUEsRUFBQUEsWUFBZ0NqZixFQUFZLENBQUEsTUFBQXZDLEVBQUEsTUFBQSxlQUFBLHdCQWpDaEYsRUFBQSxLQUFBLEVBQUEsQ0FBQSxRQUFBLE9BQUEsQ0FBQSxDQUFBLENBQUEsRUFBQSxJQUFBLEdBbUMwQndoQixFQUFBQSxPQW5DMUJ4aEIsRUFBQSxNQW1Da0QsY0FBWSxFQUFBLENBQ2xELEtBQUEsZUFBQSxHQUFpQnNmLEVBQU9rQyxRQUFBQSxJQUFBQSxDQUFBQSxFQUFBQSxZQUErQmpmLEVBQVksQ0FBQSxNQUFBdkMsRUFBQSxNQUFBLGNBQUEsd0JBcEMvRSxFQUFBLEtBQUEsRUFBQSxDQUFBLFFBQUEsT0FBQSxDQUFBLENBQUEsQ0FBQSxFQUFBLElBQUEsR0FBQSxFQUFBLE1BQUEsQ0FBQSxFQUFBLEtBQUEsQ0FBQSxVQUFBLGdCQUFBLENBQUEsR0FBQVMsRUFBQSxtQkFBQSxHQUFBLEVBQUEsQ0FBQSxFQUFBLEtBQUEsRUFBQSxHQUFBLENBQUEsUUFBQSxPQUFBLENBQUEsRUFBQSxDQUFBLDJDQytGQXFtRCxHQUFldG5ELGtCQUFnQixDQUM3QixLQUFNLGFBQ04sV0FBWSxDQUFFLGdCQUFBeWtELEVBQWdCLEVBQzlCLGFBQWMsR0FDZCxNQUFPLENBS0wsWUFBYSxDQUNYLEtBQU0sTUFDUixFQUtBLFFBQVMsQ0FDUCxLQUFNLE1BQ1IsRUFJQSxRQUFTLENBQ1AsS0FBTSxNQUNSLEVBS0EsS0FBTSxDQUNKLEtBQU0sTUFDUixFQUtBLFFBQVMsQ0FDUCxLQUFNLE1BQ1IsRUFJQSxpQkFBa0IsQ0FDaEIsS0FBTSxRQUNOLFFBQVMsRUFDWCxFQUlBLFdBQVksQ0FDVixLQUFNLFFBQ04sUUFBUyxFQUNYLEVBS0EsU0FBVSxDQUNSLEtBQU0sQ0FBQyxRQUFTLE1BQU0sRUFDdEIsUUFBUyxNQUNYLEVBSUEsTUFBTyxDQUNMLFNBQVUsQ0FDUixNQUFPLEVBQ1QsQ0FDRixFQUlBLEtBQU0sQ0FDSixLQUFNLFFBQ04sUUFBUyxFQUNYLEVBSUEsU0FBVSxDQUNSLFFBQVMsRUFDWCxFQUlBLE9BQVEsQ0FDTixLQUFNLE9BQ04sUUFBUyxhQUNYLEVBSUEsSUFBSyxDQUFDLEVBS04sU0FBVSxDQUNSLEtBQU0sUUFDTixRQUFTLEVBQ1gsQ0FDRixFQUNBLE1BQU8sQ0FJTCxTQUlBLFFBQ0EsV0FDQSxpQkFDRixFQUNBLE1BQU14NUMsRUFBTzVXLEVBQUssQ0FDVixLQUFBLENBQUUsR0FBQUssR0FBTzJILEdBQUFBLFFBSWY2RCxFQUFBQSxVQUFVLElBQU0sQ0FDVixHQUFBcW5ELEVBQW9CLE9BQVNDLEdBQWMsTUFBTyxDQUNoQ0MsR0FBQSxNQUFRRCxHQUFjLE1BQU0sSUFBSSxhQUM5QyxNQUFBRSxFQUFjRixHQUFjLE1BQU0sSUFBSSxTQUN4Q0UsR0FBZUEsRUFBWSxPQUFTLElBQ3RDQyxHQUFxQixNQUFRRCxFQUFZLENBQUMsRUFBRSxhQUFlLEVBRS9ELENBQUEsQ0FDRCxFQUVELElBQUk5QyxFQUFrQixLQUN0QixTQUFTNzlCLEdBQW9CLENBRTNCLE9BQU9ydkIsRUFBRSxVQUFVdVQsRUFBTSxhQUFlLENBQUUsQ0FBQSxDQUM1QyxDQUNNLE1BQUFsRyxFQUFPaUMsRUFBQUEsU0FBUytmLEVBQUEsQ0FBbUIsRUFDbkMsQ0FBRSxXQUFBM2pCLEVBQVksa0JBQUFqQixDQUFrQixFQUFJK0IsR0FBVyxFQUVyRHhNLEVBQUUsS0FBS3VULEVBQU0sUUFBVXRULEdBQVMsQ0FDMUJBLEVBQUssT0FBUyxNQUFRQSxFQUFLLGlCQUFpQndLLEdBQzlDcE0sR0FBTyxLQUFLLHNDQUFzQyxDQUNwRCxDQUNELEVBQ0ssS0FBQSxDQUFFLE1BQUF5TCxHQUFVUyxLQUNaOEksRUFBVXZKLEVBQ1Y0bEIsRUFBa0Joa0IsRUFDdEIsSUFFUzZILEVBQU0sUUFFZmxJLEVBQ0EsS0FDQzVNLEdBQVUsQ0FFSjhVLEVBQU0sVUFFUHZULEVBQUEsUUFBUXZCLEVBQVF3QixHQUFTLENBQ3pCLE9BQU9BLEVBQUssS0FBQSxDQUNiLEVBSUNzVCxFQUFNLEtBQ052VCxFQUFBLFFBQVF2QixFQUFRK2pCLEdBQU0sQ0FFdEJBLEVBQUUsSUFBTTFZLEVBQU0sR0FBSXlKLEVBQU0sSUFBS2lQLEVBQUUsR0FBRyxDQUFBLENBQ25DLEVBSUgsSUFBSWtzQixFQUE2QixDQUFBLEVBQ2pDMXVDLEVBQUUsUUFBUXZCLEVBQU8sQ0FBQytqQixFQUFHdGlCLElBQVEsQ0FDM0JzaUIsRUFBRSxLQUFPdGlCLEVBQ1R3dUMsRUFBUSxLQUFLbHNCLENBQUMsQ0FBQSxDQUNmLEVBQ0Rrc0IsRUFBVTF1QyxFQUFFLE9BQU8wdUMsRUFBVXp1QyxHQUNwQkEsRUFBSyxPQUFTd00sR0FBVSxZQUNoQyxFQUVELE1BQU0yOEIsRUFFRixDQUFBLEVBRUksT0FBQXNGLEVBQUEsUUFBU3p1QyxHQUFTLENBQ3hCLElBQUlxK0IsRUFBT3IrQixFQUFLLEtBQ2hCLE9BQU9BLEVBQUssS0FDWm1wQyxFQUFjOUssQ0FBSSxFQUFJcitCLENBQUEsQ0FDdkIsRUFDTW1wQyxDQUNULENBQUEsRUFJRnBwQyxFQUFFLFFBQVEwdkIsRUFBZ0IsTUFBTyxDQUFDbm9CLEVBQVFySCxJQUFRLE9BQzVDLEdBQUFxSCxFQUFPLFFBQVUsT0FDbkIsT0FFSSxNQUFBK25CLEVBQVc1WSxFQUFBQSxNQUFNblAsRUFBTyxLQUFLLEVBQy9CK25CLElBQWEsUUFBYS9uQixFQUFPLE9BQVMsTUFBUy9KLEVBQUErSixFQUFPLFlBQVAsWUFBQS9KLEVBQWtCLFFBQVMsS0FFaEY2UCxFQUFLbk4sQ0FBRyxFQUFJb3ZCLEVBQ2QsQ0FDRCxFQUNELE1BQU1nL0IsRUFBZ0JscUQsRUFBQUEsTUFDaEIsQ0FBRSxFQUFBWSxHQUFNUyxLQUNSMG9ELEVBQTJCL3BELE1BQUksQ0FBQSxDQUFFLEVBQ3ZDLFNBQVNtcUQsRUFBc0JydUQsRUFBYSxDQUNuQyxPQUFBaXVELEVBQW9CLE1BQU1qdUQsQ0FBRyxDQUN0QyxDQUVBLFNBQVN1dkIsRUFBZ0J2dkIsRUFBa0IsU0FDbEMsT0FBQXdULEdBQUFsVyxFQUFBK3dELEVBQXNCcnVELENBQUcsSUFBekIsWUFBQTFDLEVBQTRCLFFBQTVCLFlBQUFrVyxFQUFtQyxTQUM1QyxDQUVBLFNBQVNySSxHQUFtQyxDQUMxQyxNQUFPLENBQUUsS0FBQWdDLEVBQU0sY0FBZUEsRUFBTSxnQkFBQW9pQixFQUFpQixXQUFZLEtBQ25FLENBRU0sTUFBQXlnQyxFQUFpRDlyRCxFQUFBQSxJQUFJaUgsRUFBQSxDQUFjLEVBRXpFLGVBQWUyaUQsR0FBVyxDQU94QixHQU5JZCxHQUVGQSxFQUFXLE9BQU8sRUFHTixNQUFNbHdELEVBQUcsS0FBSyxhQUFhc3hELEVBQWMsS0FBSyxFQUV0RDN4RCxFQUFBLEtBQUssU0FBVXV6RCxFQUFzQixLQUFLLE1BRTlDLFFBQUFsekQsRUFBRyxRQUFRLE1BQU0sQ0FDZixRQUFTZ0ksRUFBRSx5QkFBeUIsQ0FBQSxDQUNyQyxFQUNNLEVBRVgsQ0FFQSxTQUFTd3BELEdBQVUsQ0FHakIsTUFBTWovQixFQUFjRixJQUNkc0IsRUFBVTN3QixFQUFFLFFBQVFxTixDQUFJLEVBQzlCLFVBQVdzVixLQUFTZ08sRUFBUyxDQUMzQixNQUFNQyxFQUFlNXdCLEVBQUUsSUFBSXV2QixFQUFhNU0sRUFBTSxDQUFDLENBQUMsRUFDNUNpTyxHQUFnQixLQUNsQjV3QixFQUFFLE1BQU1xTixFQUFNc1YsRUFBTSxDQUFDLENBQUMsRUFFdEIzaUIsRUFBRSxJQUFJcU4sRUFBTXNWLEVBQU0sQ0FBQyxFQUFHaU8sQ0FBWSxDQUV0QyxDQUVJcmQsRUFBTSxPQUVGQSxFQUFBLE1BQU0yOEMsRUFBc0IsS0FBSyxFQUdyQ3Z6RCxFQUFBLEtBQUssUUFBUzBPLEVBQWMsQ0FBQSxFQUU1QmtJLEVBQU0sa0JBQ1JvRSxFQUFBQSxTQUFTLElBQU0sQ0FDSnEyQyxHQUFBLENBQ1YsQ0FFTCxDQUNNLE1BQUExM0IsRUFBa0J2NUIsRUFBQUEsU0FBUyxJQUFNLENBQ3JDLE1BQU1zL0IsRUFBWSxDQUFBLEVBQ1p3eUIsRUFBa0QsQ0FDdEQsT0FBUSxDQUNOLEtBQU0sR0FDTixLQUFNLFVBQ04sU0FBVSxHQUNWLE1BQVE3akQsR0FBZ0MsQ0FDN0JnakQsR0FDWCxFQUNBLE1BQU8sRUFDUCxLQUFNaHBELEVBQUUsdUJBQXVCLENBQ2pDLEVBQ0EsTUFBTyxDQUNMLEtBQU0sR0FDTixTQUFVLEdBQ1YsTUFBUWdHLEdBQWdDLENBQzlCd2pELEdBQ1YsRUFDQSxLQUFNeHBELEVBQUUsc0JBQXNCLEVBQzlCLE1BQU8sQ0FDVCxDQUFBLEVBR0k4RSxFQUFBK2tELEVBQWV0N0MsRUFBTSxPQUFPLEVBQ2xDLFFBQVNyVCxLQUFPMnVELEVBQWUsQ0FDdkIsTUFBQW55QixFQUFNbXlCLEVBQWMzdUQsQ0FBRyxFQUM3Qnc4QixFQUFJLE9BQVMsSUFBTSxDQUNiQSxFQUFBLE1BQU1yeEIsR0FBYyxDQUFBLEVBRTFCZ3hCLEVBQUssS0FBS0ssQ0FBRyxDQUNmLENBRUssT0FBQUwsRUFBQSxLQUFLLENBQUNyMkIsRUFBUWdILElBQ1ZoSCxFQUFFLE1BQVFnSCxFQUFFLEtBQ3BCLEVBQ01xdkIsQ0FBQSxDQUNSLEVBRUQsU0FBUzB5QixHQUFpQixPQUVwQixHQUFBeDdDLEVBQU0sYUFBZSxJQUtyQkEsRUFBTSxXQUFhLEdBQU8sQ0FFeEIsSUFBQXk3QyxJQUFPeHhELEVBQUErVixFQUFNLFdBQU4sWUFBQS9WLEVBQWdCLE9BQVEsSUFFbkMwdkQsRUFBYWx0RCxFQUFFLFNBQVNndUQsRUFBVWdCLEVBQU16N0MsRUFBTSxRQUFRLENBQ3hELENBQ0YsQ0FFZXc3QyxJQUVmLFNBQVN6aEIsR0FBVSxDQUNWLE9BQUFqZ0MsQ0FDVCxDQUtTLFNBQUE2aEQsRUFBUUMsRUFBY3JsRCxFQUFRLEdBQU0sQ0FDdENBLEdBQ0g5SixFQUFFLEtBQUtBLEVBQUUsS0FBS3FOLENBQUksRUFBSXBOLEdBQVMsQ0FDN0IsT0FBT29OLEVBQUtwTixDQUFJLENBQUEsQ0FDakIsRUFFSG9ULEVBQVFoRyxFQUFNOGhELENBQU8sQ0FDdkIsQ0FFTSxNQUFBQyxFQUFxQmhyRCxNQUFJLEVBQUssRUFFOUJpckQsRUFBZSxJQUFNLENBQ2xCaHhELEdBQUEsTUFBTSxxQ0FBc0Mrd0QsRUFBbUIsS0FBSyxFQUN2RUEsRUFBbUIsUUFBVSxJQUFRbEMsR0FFNUJBLEdBQ2IsRUFHSVcsRUFBVzV0RCxHQUFjLENBQ3pCQSxFQUFLLG9CQUFzQixTQUNoQm92RCxHQUNmLEVBR0lDLEVBQTRCdjlDLEdBQXNCLENBQ3REcTlDLEVBQW1CLE1BQVFyOUMsRUFDZHM5QyxHQUFBLEVBR04sU0FBQTFCLEVBQWVsdkQsRUFBWXdCLEVBQXVCLENBQ3pELE1BQU1DLEVBQU1ELEVBQUssSUFFakIsR0FERUQsRUFBQSxJQUFJcU4sRUFBTW5OLEVBQUt6QixDQUFLLEVBQ2xCd0IsRUFBSyxZQUFhLENBQ3BCLE1BQU1DLEVBQU1ELEVBQUssSUFDWHhCLEVBQVE0TyxFQUFLbk4sQ0FBRyxFQUNoQnN2RCxFQUFlLy9CLEVBQWdCdnZCLENBQUcsR0FDcEJELEVBQUssdUJBQXVCLFNBQVdBLEVBQUssWUFBY0EsRUFBSyxZQUFZLFFBRW5GLENBQUUsSUFBQUMsRUFBSyxNQUFBekIsRUFBTyxhQUFBK3dELEVBQWMsR0FBR25rRCxFQUFhLEVBQUcsVUFBVyxFQUFPLENBQUEsQ0FDL0UsRUFDSXBMLEVBQUssbUJBQXFCLE1BQVFBLEVBQUssb0JBQXNCLElBQVFBLEVBQUssb0JBQXNCLFdBQ3JGb3ZELEdBRWpCLENBRU0sTUFBQU0sRUFBZ0I1eUQsRUFBQUEsU0FBUyxJQUV4QndXLEVBQU0sU0FJSkEsRUFBTSxRQUFRLE1BSFosRUFJVixFQUlLdThDLEdBQWdCMXJELEVBQUFBLE1BQ2hCMnJELEdBQXNCM3JELE1BQUksQ0FBQyxFQUMzQjZyRCxHQUF1QjdyRCxNQUFJLENBQUMsRUFFNUIrckQsR0FBaUIsSUFBTSxDQUUzQnh6RCxFQUFJLEtBQUssa0JBQW1CLENBQUM0VyxFQUFNLFFBQVEsRUFFM0M1VyxFQUFJLEtBQUssV0FBWSxDQUFDNFcsRUFBTSxRQUFRLENBQUEsRUFHaEM2OEMsR0FBa0JyekQsRUFBQUEsU0FBUyxJQUUzQndXLEVBQU0sU0FBVyxhQUNadlcsRUFBRyxJQUFJLEtBRVQsS0FDUixFQUNLNnlELEVBQXNCOXlELEVBQUFBLFNBQVMsSUFFNUJ3VyxFQUFNLFNBQVcsWUFFekIsRUFFSzg4QyxHQUEwQnR6RCxFQUFBQSxTQUFTLElBQ2xDOHlELEVBQW9CLE1BSXJCdDhDLEVBQU0sU0FDRDA4QyxHQUFxQixNQUFRQSxHQUFxQixNQUFRLEtBQU8sR0FFakVGLEdBQW9CLE1BQVFBLEdBQW9CLE1BQVEsS0FBTyxHQU4vRCxNQVFWLEVBRU0sTUFBQSxDQUNMLElBQUssQ0FBQzFpRCxFQUFXbk4sSUFDUkYsRUFBRSxJQUFJcU4sRUFBTW5OLENBQUcsRUFFeEIsR0FBQWxELEVBQ0EsZUFBQTJ3RCxFQUNBLFNBQUFLLEVBQ0EsUUFBQVEsRUFDQSxLQUFBbmhELEVBQ0Esb0JBQUE4Z0QsRUFDQSxzQkFBQUksRUFDQSxnQkFBQTkrQixFQUNBLFFBQUE2ZCxFQUNBLFFBQUE0aEIsRUFDQSxjQUFBWixFQUNBLFFBQUFULEVBQ0EsbUJBQUF1QixFQUNBLHlCQUFBRSxFQUNBLGdCQUFBNS9CLEVBQ0EsZ0JBQUE0RyxFQUNBLGNBQUFxNUIsRUFDQSxjQUFBRyxHQUNBLHdCQUFBTyxHQUNBLGdCQUFBRCxHQUNBLG9CQUFBUCxFQUNBLGVBQUFNLEdBQ0Esc0JBQUFELENBQUEsQ0FFSixDQUNGLENBQUMsbUNDL2hCRHhuRCxHQUFBLENBQUEsTUFBQSxrQkFxQmlEQyxHQUFNLENBQUEsSUFBQSx5QkFnQ0pDLEdBQU0sQ0FBQSxJQUFBLDBDQU1QeWYsR0FBTSxDQUFBLElBQUEseUNBVWR5SyxHQUFNLENBQUEsSUFBQSwwTEFwRTlDNUssbUJBREYsV0FBQSxTQUVlOFAsRUFBSSxVQUFBLEVBQUE3UCxFQUFBLFlBQUFRLDBCQUFBN2YsRUFBQSxHQUFBLG1CQUFBLElBQUEsRUFBQSxLQUFBLENBQWYsUUFBQXNmLEVBQUEsUUFBQSxJQUFBLENBQUF0ZixFQUZKLDhDQUVxQyxNQUFXLENBQUEsSUFBQSx5QkFDMUMsQ0FITixZQUFBLENBQUEsdUJBSWdCQSxFQUFLLG1CQXVFSCxDQUFBLENBQUEsQ0FBQSxFQUFBLGNBckVFLEVBQUFxZixFQUFBLFlBQUFRLDBCQUFBN2YsRUFBQSxHQUFBLEtBQUEsSUFBQSxFQUFBbWhCLGFBQUEsQ0FDSjFxQixJQUFBQSxnQkFDUCxNQUFPb3dELEVBQUFBLElBQUFBLEVBQ1I3bUQsRUFBSyxRQUFDLENBQ0wsTUFBQUEsRUFBQSxjQUNBLE1BQUEsaUJBQUEsbUJBQUFDLEVBQUEsQ0FBQSxJQUFBQSxFQUFBLENBQUEsRUFBQTRqQixHQUFBN2pCLEVBQUEseUJBQUEsRUFBQSxHQVhULGlCQWFRQyxFQTZETSxDQUFBLElBQUFBLEVBQUEsQ0FBQSxFQUFBNGpCLEdBQUE3akIsRUFBQSx5QkFBQSxFQUFBLEVBQUEsQ0E3RE4sRUFBQSxDQUFBLFFBQ0VzZixFQXFETSxRQUFBLElBQUEsQ0FBQTVlLEVBQUEsbUJBcERKLE1Ba0RNZixHQUFBLENBQUFlLEVBQUEsbUJBakVsQixNQWdCb0JkLEdBQUEsQ0FoQnBCYyxFQUFBQSxtQkFBQSxNQUFBLENBQUEsTUFBQW1pQixFQUFBLGVBQUEsQ0FBQSxvQkFBQSxDQUFBLHFCQUFBN2lCLEVBQUEsUUFBQSxDQUFBLENBQUEsRUFvQmMsTUFBQWlmLEVBQUFBLGVBQUEsQ0FBQSxPQXBCZGpmLEVBb0JpQyx1QkFBQSxDQUFBLENBQUEsRUFBQSxnQkFDRHFmLEVBQUFBLFlBQUFRLEVBQUEsd0JBQUE3ZixFQUFBLEdBQUEsSUFBQSxJQUFBLEVBQUEsQ0FBQSxJQUFBLGVBQUEsRUFBQSxDQUFoQixRQUFBc2YsRUFBQSxRQUFBLElBQUEsQ0FBQXRmLEVBQUEsTUFBQSxhQUNFLGlCQUNpRk8sRUFBQSxtQkFBQSxNQUFBVixHQUFBLEVBQUFTLFlBQUEsRUFBQStlLEVBQUEsWUFBQVEsMEJBQUE3ZixFQUFBLEdBQUEsU0FBQSxJQUFBLEVBQUEsS0FBQSxDQUFBLFFBQXpEc2YsVUFBRWtDLElBQUssQ0FBQS9iLEVBQUFBLFlBQXlCMmhELEVBQXFCLENBQUEsTUFBQXBuRCxFQUFBLE1BQUEsYUFBQSwrQkF2Qi9GLEVBQUEsS0FBQSxFQUFBLENBQUEsUUFBQSxPQUFBLENBQUEsQ0FBQSxDQUFBLEtBQUEsQ0FBQSxFQUFBLENBQUEsR0FBQVMsRUFBQUEsbUJBQUEsR0FBQSxFQUFBLEdBQUFILEVBQUFBLFVBMkI4RCxFQUFJLEVBQUFDLEVBQUEsbUJBQUFzb0IsV0FBQSxLQUFBQyxFQUFBLFdBQUE5b0IsRUFBQSxnQkFBQSxDQUFBN0ksRUFBQUMsS0FBaERrSixFQUFBLFVBQUEsRUFBQUMsRUFBQUEsbUJBM0JsQnNvQixFQUFBQSxTQTJCa0N5K0IsQ0FBQUEsSUFBQUEsQ0FBQUEsRUFBQUEsQ0FBQUEsRUEzQmxDLHVCQTJCa0csRUFBQWpvQyxjQUFBUSxFQUFBQSx3QkFBQTdmLEVBQUEsZUFBQSxFQUFBbWhCLGFBQUEsQ0EzQmxHLElBQUEsRUEyQmdILE1BQUEsZ0JBM0JoSCxRQUFBLEVBQUEsRUFBQWhxQixFQUFBLEdBQUEsRUFBQSxDQTRCcUVqRCxRQUFBQSxFQUFBQSxRQUFHLElBQVMsRUFBQW9NLEVBQUFBLFlBQTBCK2UsRUFBSyxZQUFBUSwwQkFBQTdmLEVBQUEsR0FBQSxTQUFBLElBQUEsRUFBQW1oQixFQUFBQSxXQUFBLENBQUEsUUFBQSxFQUFBLEVBQUFocUIsRUFBQSxDQUFBLENBQUE2SSxFQUFBLEdBQUEsU0FBQSxNQUFBLEVBQUEsRUFBQTVJLEVBNUJoSCxNQUFBRCxFQUFBLEtBQUEsQ0FBQSxFQUFBLENBOEJ3QixRQUFBbW9CLEVBQUEsUUFBQSxJQUFBLENBOUJ4QnRmLEVBQUEsTUFBQSxVQUFBNUksQ0FBQSxHQUFBa0osNEJBOEJxRDZwQixFQUFnQixDQUFJLElBQUssRUFBQSxNQUFBbnFCLEVBQUEsTUFBQSxVQUFBNUksQ0FBQSxjQUV4RCxzQkFnQlcsSUFBQUEsQ0FBQSxDQWRELEVBQUEsS0FBSyxFQUFhLENBQUEsUUFBQSxPQUFLLENBYTdCLElBQUFrSixZQUFBLEVBQUFDLEVBQUEsbUJBQUFzb0IsRUFBQSxTQUFBLENBQUEsSUFBQSxDQUFBLEVBQUEsQ0EvQzFCMXhCLEVBQUEsV0FBQUEsRUFBQSxVQUFBLE9BQUEsSUFBQW1KLEVBQUFBLFlBQUErZSxFQUFBQSxZQUFBeUssRUFBQTNJLGFBQUEsQ0FtQzJCLElBQUcsRUFBdUMsUUFBQSxHQUEyQyxJQUFvQ2trQyxHQUFBQSxzQ0FTekgsY0FBTytCLEVBQXFCLElBQUFwbkQsRUFBQSxLQUFBNUksQ0FBQSxDQUFBLEVBQzVCRCxFQUFBLFVBQUEsQ0FDQSxNQUFLNkksRUFBQSxzQkFBQSxzQkFBQTZqQixHQUFBN2pCLEVBQUEsZUFBQTZqQixFQUFBMXNCLENBQUEsRUE5Q2hDLFFBQUEwc0IsR0FBQTdqQixFQUFBLFFBQUE3SSxDQUFBLENBQUEsQ0FBQSxFQUFBLEtBQUEsR0FBQSxDQUFBLGNBQUEsUUFBQSxzQkFBQSxTQUFBLENBQUEsR0FBQXNKLHFCQUFBLEdBQUEsRUFBQSxDQUFBLEVBQUEsRUFBQSxFQUFBLENBQUEsS0FBQSxFQUFBLEtBQUEsQ0FBQSxPQUFBLENBQUEsRUFBQSxDQUFBLEVBQUEsRUFBQSxDQUFBLEVBQUEsSUFBQSxHQUFBQSxxQkFBQSxHQUFBLEVBQUEsQ0FxRDJCK2dCLEVBQUFBLEVBQUFBLEVBQUFBLEVBQUFBLEdBQUFBLEdBQ1R4aEIsRUFBQSxNQUFBLGVBQUEsR0FBQU0sRUFBQSxVQUFBLEVBQ21GQyxFQUFBLG1CQUFBLE1BQUFULEdBQUEsRUFBQVEsWUFBQSxFQUFBK2UsRUFBQSxZQUFBUSwwQkFBQTdmLEVBQUEsR0FBQSxTQUFBLElBQUEsRUFBQSxLQUFBLENBQUEsUUFBM0RzZixVQUFFa0MsSUFBSyxDQUFBL2IsRUFBQUEsWUFBMkIyaEQsRUFBcUIsQ0FBQSxNQUFBcG5ELEVBQUEsTUFBQSxlQUFBLCtCQXZEakcsRUFBQSxLQUFBLEVBQUEsQ0FBQSxRQUFBLE9BQUEsQ0FBQSxDQUFBLENBQUEsS0FBQSxDQUFBLEVBQUEseUJBMERnQixHQUE4RixFQUFBLEVBQUFBLEVBMUQ5RyxvQkEyRGdCUyxFQUFBLG1CQUFBLEdBQUEsRUFBQSxpQkFEd0U0ZSxFQUFBQSxZQUFBbW9DLEVBQUEsQ0FBQSxJQUFBLEVBMUR4RixRQUFBeG5ELEVBQUEsZUFBQSxPQTJEZ0MsRUFBaEIsQ0FBQSxTQUFBLENBQUEsR0FBQUEsRUFBQSxNQUFBLGNBQ0UsaUJBQ2tGTyxFQUFBLG1CQUFBLE1BQUFnZixHQUFBLEVBQUFqZixZQUFBLEVBQUErZSxFQUFBLFlBQUFRLDBCQUFBN2YsRUFBQSxHQUFBLFNBQUEsSUFBQSxFQUFBLEtBQUEsQ0FBQSxRQUExRHNmLFVBQUVrQyxJQUFLLENBQUEvYixFQUFBQSxZQUEwQjJoRCxFQUFxQixDQUFBLE1BQUFwbkQsRUFBQSxNQUFBLGNBQUEsK0JBN0RoRyxFQUFBLEtBQUEsRUFBQSxDQUFBLFFBQUEsT0FBQSxDQUFBLENBQUEsQ0FBQSxLQUFBLENBQUEsRUFBQSxDQUFBLEdBQUFTLEVBQUFBLG1CQUFBLEdBQUEsRUFBQSxDQUFBLENBQUEsS0FrRXFDc21ELEVBQUFBLEdBQUFBLEVBQUFBLEVBQUFBLENBQUFBLEVBbEVyQy9tRCxFQUFBLHFCQUFBTSxFQUFBQSxZQWtFbUYrZSxFQUFBQSxZQUFBbW9DLEVBQUEsQ0FBQSxJQUFBLEVBbEVuRixRQUFBeG5ELEVBQUEsZUFBQSxFQUFBLEtBQUEsRUFBQSxDQUFBLFNBQUEsQ0FBQSxHQXFFcUIrbUQsRUFBbUIsbUJBQUEsR0FBQSxFQUFBLENBQUEsQ0FBQSx1Q0FFb0V4bUQsRUFBQUEsbUJBQUEsTUFBQXlwQixHQUFBLEVBQUExcEIsWUFBQSxFQUFBK2UsRUFBQSxZQUFBUSwwQkFBQTdmLEVBQUEsR0FBQSxTQUFBLElBQUEsRUFBQSxLQUFBLENBQUEsUUFBOUVzZixVQUFFbW9DLElBQVEsQ0FBQWhpRCxFQUFBQSxZQUFrRDRoRCxFQUFjLENBQUEsS0FBQXJuRCxFQUFBLFNBQUFBLEVBQUEsR0FBQSxNQUFBLFFBQUFBLEVBQUEsR0FBQSxNQUFBLGtDQXZFeEcsRUFBQSxLQUFBLEVBQUEsQ0FBQSxPQUFBLFNBQUEsQ0FBQSxDQUFBLENBQUEsS0FBQSxDQUFBLEVBQUEsQ0FBQSxHQUFBUyxFQUFBQSxtQkFBQSxHQUFBLEVBQUEsQ0FBQSxDQUFBLENBQUEsQ0FBQSxLQUFBLEVBQUEsR0FBQSxDQUFBLFFBQUEsT0FBQSxDQUFBLEVBQUEsRUFBQSxDQUFBLEdBQUFBLHFCQUFBLEdBQUEsRUFBQSxDQUFBLENBQUEsd0NDNkRBaW5ELEdBQWVsb0Qsa0JBQWdCLENBQzdCLEtBQU0sd0JBQ04sTUFBTyxDQUlMLFNBQVUsQ0FDUixLQUFNLFFBQ04sUUFBUyxFQUNYLEVBSUEsZUFBZ0IsQ0FDZCxLQUFNLE1BQ1IsRUFFQSxPQUFRLENBQ04sS0FBTSxNQUNSLEVBSUEsT0FBUSxDQUNOLEtBQU0sT0FDTixRQUFTLGFBQ1gsRUFJQSxRQUFTLENBQ1AsS0FBTSxNQUNSLEVBSUEsSUFBSyxDQUNILEtBQU0sTUFDUixFQUtBLGFBQWMsQ0FDWixLQUFNLFFBQ1IsQ0FDRixFQUNBLE1BQU8sQ0FBQyxrQkFBbUIsVUFBVSxFQUNyQyxNQUFNaUwsRUFBTzVXLEVBQUssQ0FDVixLQUFBLENBQUUsR0FBQUssR0FBTzJILEdBQUFBLFFBQ1QsQ0FBRSxFQUFBSyxHQUFNUyxLQUNScXFELEVBQWdCMXJELEVBQUFBLE1BQ2hCeXJELEVBQXNCOXlELEVBQUFBLFNBQVMsSUFDNUJ3VyxFQUFNLFNBQVcsWUFFekIsRUFDRC9LLEVBQUFBLFVBQVUsSUFBTSxDQUNWcW5ELEVBQW9CLE9BQVNDLEVBQWMsUUFDekJDLEVBQUEsTUFBUUQsRUFBYyxNQUFNLElBQUksYUFDdEQsQ0FDRCxFQUVLLE1BQUFPLEVBQTBCdHpELEVBQUFBLFNBQVMsSUFDbkMsQ0FBQzh5RCxFQUFvQixPQUFTLENBQUN0OEMsRUFBTSxTQUNoQyxPQUVGdzhDLEVBQW9CLE1BQVFBLEVBQW9CLE1BQVEsS0FBTyxFQUN2RSxFQUVLQSxFQUFzQjNyRCxNQUFJLENBQUMsRUFFM0IrckQsRUFBaUIsSUFBTSxDQUMzQnh6RCxFQUFJLEtBQUssa0JBQW1CLENBQUM0VyxFQUFNLFFBQVEsRUFDM0M1VyxFQUFJLEtBQUssV0FBWSxDQUFDNFcsRUFBTSxRQUFRLENBQUEsRUFHdEMsU0FBU3djLEVBQVNsYixFQUFVLENBQzFCLE9BQU83VSxFQUFFLE1BQU0sQ0FBQSxFQUFJdVQsRUFBTSxJQUFLc0IsQ0FBRyxDQUNuQyxDQUVPLE1BQUEsQ0FDTCxHQUFBN1gsRUFDQSxjQUFBOHlELEVBQ0Esd0JBQUFPLEVBQ0Esb0JBQUFSLEVBQ0EsZUFBQU0sRUFDQSxTQUFBcGdDLEVBQ0EsRUFBQS9xQixDQUFBLENBRUosQ0FDRixDQUFDLFlDckllLE1BQU0saUJBY04wRCxHQUFBLENBQUEsTUFBTSwwRUFoQ3RCRSxHQUFBLENBQUEsTUFBQSxnQ0FxQ3NDeWYsR0FBTSxDQUFBLElBQUEseUlBcEMxQ0gsbUJBb0RNLFdBQUEsbURBbkRKLE1Ba0RNeUQsRUFBQSxlQUFBLENBQUEsMkJBQUEsQ0FBQSx1QkFBQTdpQixFQUFBLG1CQUFBLENBQUEsQ0FBQSxDQUFBLEVBQUEsc0JBcERWLE1BSWNMLEdBQUEsQ0FKZGUsRUFBQUEsbUJBQUEsTUFBQSxDQUFBLE1BQUFtaUIsRUFBQSxlQUFBLENBQUEsaUJBQUEsQ0FBQSxxQkFBQTdpQixFQUFBLFFBQUEsQ0FBQSxDQUFBLEVBUVEsTUFBQWlmLEVBQUFBLGVBQUEsQ0FBQSxVQVJSamYsRUFRK0IsdUJBQUEsQ0FBQSxDQUFBLEVBQUEsZ0JBQW1EcWYsRUFBQUEsWUFBQVEsRUFBQSx3QkFBQTdmLEVBQUEsR0FBQSxJQUFBLElBQUEsRUFBQSxDQUFBLElBQUEsZ0JBUmxGLE1BQUEsbUJBQUEsRUFBQSxTQVVZc2YsRUFBZ0MsUUFBQSxJQUFBLE9BQUEsT0FBQTVlLEVBQUEsbUJBQUEsT0FBQWQsR0FBQSxnQkFHbEMsT0FJVyxhQUFBLENBQUEsQ0FBQSxlQUgrQixFQUFJLEVBQUFXLEVBQUEsbUJBQUFzb0IsV0FBQSxLQUFBQyxFQUFBLFdBQUE5b0IsRUFBQSxRQUFBLENBQUE3SSxFQUFBQyxLQUE1Q2tKLEVBQUEsVUFBQSxFQUFBQyxFQUFBQSxtQkFkWnNvQixFQUFBQSxpQkFjK0IsQ0FBQTF4QixFQWQvQixrQkFjK0UsRUFBQWtvQixjQUFBUSxFQUFBQSx3QkFBQTdmLEVBQUEsR0FBQSxJQUFBLElBQUEsRUFBQW1oQixFQUFBQSxXQUFBLENBZC9FLElBQUEsRUFjd0Y4RixNQUFBQSxnQkFkeEYsUUFBQSxFQUFBLEVBQUFqbkIsRUFlYyxTQUFxRTdJLEVBQUEsR0FBQSxDQUFBLEVBQUEsQ0FBQSxRQUF6RG1vQixVQUFXLElBQU8sQ0FBQTdaLEVBQUFBLFlBQXFCbEQsRUFBWSxDQUFBLGNBQUFwTCxFQUFBLGtDQWY3RSxFQUFBLEtBQUEsRUFBQSxDQUFBLGNBQUEsT0FBQSxDQUFBLENBQUEsQ0FBQSxFQUFBLEVBQUEsQ0FBQSxFQUFBLElBQUEsR0FBQXNKLHFCQUFBLEdBQUEsRUFBQSxDQWtCVSxFQUFBLEVBQUEsRUFDRSxFQUFBLEdBQUEsR0FBQUMsRUFBQSxtQkFBQSxPQUFBYixHQUFBLENBSU9rbkQsYUFBbUIvbUQsRUFBQSxPQUFBLGVBQUEsQ0FBQSxDQUFBLEVBdkJ0Q0EsRUFBQSxvQkFpQ1lTLHFCQUF5RCxHQUFBLEVBQUEsR0FqQ3JFSCxFQUFBLFVBQUEsRUF3QnlEK2UsRUFBQUEsWUFBQVEsRUFBQUEsd0JBQUE3ZixFQUFBLEdBQUEsSUFBQSxJQUFBLEVBQUFtaEIsRUFBQUEsV0FBQSxDQUNyQzhGLElBQUFBLEVBekJwQixNQUFBLHVDQUFBLEVBQUFqbkIsRUFBQSxVQUFBdEwsRUFBQXNMLEVBMkJZLFNBM0JaLFlBQUF0TCxFQUFBLEdBQUEsQ0FBQSxFQUFBLENBQUEsUUEyQitDUixVQUFHLElBQVMsT0FBQSxRQUFBb00sWUFBQSxFQUFBK2UsRUFBQSxZQUFBUSwwQkFBQTdmLEVBQUEsR0FBQSxTQUFBLElBQUEsRUFBQStwQixpQkFBQSxDQTNCM0QsQ0E2QnlFL3BCLEVBQUEsR0FBQSxTQUFBLE9BQUEsRUFBQSxHQUFBdEwsRUFBQXNMLEVBQUEsU0FBQSxZQUFBdEwsRUFBQSxLQUFBLENBQTNELEVBQUEsQ0FBQSxRQUFBNHFCLEVBQUEsUUFBQSxJQUFBLENBN0JkOWUsYUFBQVIsRUFBQSxPQUFBLGlCQUFBK3BCLEVBQUFBLGVBQUE2SSxFQUFBQSxtQkFBQTV5QixFQUFBLGFBQUEsQ0FBQSxDQUFBLENBQUEsQ0FBQSxDQUFBLEtBQUEsRUFBQSxFQUFBLEVBQUEsRUFBQSxFQUFBLEVBQUEsUUFpQ3FFVSxFQUFBLG1CQUFBLE9BQUFaLEdBQUEsK0ZBakNyRSxDQUFBLENBQUEsRUFBQSxLQXFDaUJpbkQsRUFBQUEsR0FBQUEsRUFBQUEsRUFBQUEsQ0FBQUEsRUFFVC9tRCxFQUFBLHFCQUFBTSxFQUFBLFVBQUEsRUFFNEJDLEVBQUFBLG1CQUFBLE1BQUFnZixHQUFBLENBQUEvZSxhQUFBUixFQUFBLE9BRDVCLGdCQVVFLElBbERWdEwsRUFBQXNMLEVBQUEsaUJBQUEsWUFBQXRMLEVBQUEsUUFBQSxJQUFBNEwsRUFBQSxVQUFBLEVBMEM0QnBNLEVBQUFBLFlBQUFBLEVBQW1CQSxhQUFTLENBQzdDLElBQUksRUFBZXV6RCxLQUFRem5ELEVBQUEsU0FBQUEsRUFBQSxHQUFBLE1BQUEsUUFBQUEsRUFBQSxHQUFBLE1BQUEsVUFBaUI5RCxLQUFBQSxFQUFvRUEsaUVBS3pHeXJELEVBQ2Msa0RBQUEsQ0FBQSxFQWpEaEMzbkQsRUFBQSxlQUFBLENBQUEsUUFBQUEsRUFBQSxjQUFBLENBQUEsRUFBQSxLQUFBLEdBQUEsQ0FBQSxPQUFBLE9BQUEsU0FBQSxDQUFBLEdBQUFTLEVBQUEsbUJBQUEsR0FBQSxFQUFBLENBQUEsQ0FBQSxHQUFBQSxFQUFBQSxtQkFBQSxHQUFBLEVBQUEsb0VDRTZCcXZCLEdBQUFDLEVBQUFBLGdCQUF5QixDQUNwRCxLQUFNLGVBQ04sYUFBYyxFQUNoQixDQUFDLDBQQXVDRCxNQUFNak8sRUFBUThsQyxFQUFBQSxXQUNSLENBQUUsTUFBQTVtRCxHQUFVUyxLQUNaZ0osRUFBUTY2QixFQVVSdWlCLEVBQWdCNXpELEVBQUFBLFNBQVMsSUFNdEIrTSxFQUxLLENBQ1YsS0FBTSxHQUNOLE1BQU8sS0FDUCxNQUFPLElBQUEsRUFFU3lKLEVBQU0sZUFBaUIsQ0FBRSxDQUFBLENBQzVDLEVBRUtxOUMsRUFBYyxnQkFDZGgwQixFQUFVNy9CLEVBQUFBLFNBQVMsSUFBTSxDQUN2QixNQUFBMEIsRUFDSjhVLEVBQU0sWUFBYyxNQUFRQSxFQUFNLGFBQWVvOUMsRUFBYyxNQUFNLE1BQVFDLEVBQWNyOUMsRUFBTSxXQUM1RixNQUFBLENBQ0wsS0FBTSxPQUNOLEdBQUdxWCxFQUNILENBQUM1dEIsRUFBRyxLQUFLLFVBQVUsRUFBR3lCLEVBQ3RCLENBQUMsWUFBY3pCLEVBQUcsS0FBSyxVQUFVLEVBQUc2ekQsQ0FBQSxDQUN0QyxDQUNELEVBRUsxakMsRUFBT2toQixFQUViLFNBQVN3aUIsRUFBa0JweUQsRUFBWSxDQUNqQ215RCxJQUFnQm55RCxJQUNsQkEsRUFBUWt5RCxFQUFjLE1BQU0sT0FFOUIsTUFBTXZ0QyxFQUFXN1AsRUFBTSxXQUN2QjRaLEVBQUssb0JBQXFCMXVCLENBQUssRUFDM0Iya0IsSUFBYTNrQixHQUNmMHVCLEVBQUssU0FBVTF1QixDQUFLLENBRXhCLENBRUEsU0FBUzBjLEVBQVNELEVBQTBCLENBQ25DLE9BQUFBLEVBQU8zSCxFQUFNLEtBQUssQ0FDM0IsQ0FDQSxTQUFTNkgsRUFBU0YsRUFBMEIsQ0FDbkMsT0FBQUEsRUFBTzNILEVBQU0sS0FBSyxDQUMzQixDQUVNLEtBQUEsQ0FBRSxHQUFBdlcsR0FBTzJILEdBQUFBLDB1QkN6RWZtc0QsR0FBZXhvRCxrQkFBZ0IsQ0FDN0IsS0FBTSxjQUNOLE1BQU8sQ0FJTCxLQUFNLENBQUMsRUFJUCxRQUFTLENBQUUsS0FBTSxLQUFNLEVBT3ZCLFVBQVcsQ0FBQyxFQUtaLFdBQVksQ0FDVixLQUFNLE1BQ1IsRUFLQSxZQUFhLENBQ1gsS0FBTSxPQUNOLFNBQVUsQ0FDUixNQUFPLEVBQ1QsQ0FDRixFQUlBLGtCQUFtQixDQUNqQixLQUFNLFNBQ04sUUFBUyxNQUNYLENBQ0YsRUFDQSxNQUFPLENBSUwsY0FLQSxrQkFJQSxRQUNGLEVBQ0EsTUFBTWlMLEVBQVk1VyxFQUFVLENBQ3BCLEtBQUEsQ0FBRSxHQUFBSyxHQUFPMkgsR0FBQUEsUUFFWDRPLEVBQU0sV0FDUixRQUFRLEtBQUssK0JBQStCLEVBRXhDLE1BQUF3OUMsRUFBb0JoMEQsRUFBQUEsU0FBUyxJQUMxQndXLEVBQU0sWUFBY0EsRUFBTSxXQUFhdlcsRUFBRyxNQUFNLElBQ3hELEVBRUQsSUFBSWcwRCxFQUFXbDJDLEdBQVF2SCxFQUFPNVcsRUFBS0ssRUFBRyxXQUFXLFVBQVUsRUFDckQsTUFBQWkwRCxFQUFrQkQsRUFBUyx3QkFnQjFCLE1BQUEsQ0FDTCxHQUFBaDBELEVBQ0Esa0JBQUErekQsRUFDQSxHQUFHQyxFQUNILGdCQUFBQyxFQUNBLGlCQW5Cd0J4eUQsR0FBZSxDQUNuQzlCLEVBQUEsS0FBSyxTQUFVOEIsQ0FBSyxFQUNwQkEsR0FBU0EsRUFBTSxTQUNqQkEsRUFBUUEsRUFBTSxPQUFPLE9BRWpCLE1BQUEwTyxFQUFPNmpELEVBQVMsVUFDdEIsR0FBSTdqRCxHQUFRQSxFQUFLLFNBQVdBLEVBQUssUUFBUTFPLENBQUssRUFBRyxDQUN6QyxNQUFBeXlELEVBQU0vakQsRUFBSyxRQUFRMU8sQ0FBSyxFQUMxQjlCLEVBQUEsS0FBSyxrQkFBbUJ1MEQsQ0FBRyxDQUFBLE1BRTNCdjBELEVBQUEsS0FBSyxrQkFBbUIsSUFBSSxDQUNsQyxDQVFBLENBRUosQ0FDRixDQUFDLFdDckhEbXJCLEdBSXFDaGYsRUFBQUMsRUFBQUMsRUFBQUMsRUFBQUMsRUFBQUMsRUFBQSxvQ0FGakN3ZixFQUZKLHdCQUFBN2YsRUFBQSxHQUFBLFdBSXFCbW9ELGdCQUFSbm9ELEVBQUksZ0JBQUEsRUFBQSxDQUFBLFFBQUFzZixFQUFBLFFBQUEsSUFBQSxFQUpqQmhmLFlBQUEsRUFBQSxFQUFBQyxFQUFBQSxtQkFBQXNvQixFQUFBLFNBQUEsS0FBQUMsRUFBQUEsV0FBQTlvQixFQUFBLGdCQUFBN0ksSUFLVW1KLEVBQUFBLFVBQVUsRUFBQStlLGNBQUFRLEVBQUFBLHdCQUFBN2YsRUFBQSxpQkFBQSxFQUFBbWhCLGFBQUEsQ0FDYixRQUFLOU8sR0FDTG5lLElBQUFBLFdBQUFBLElBQ09tMEQsRUFBVyxTQUFBbHhELENBQUEsRUFSekIsQ0FVMEI2SSxFQUFBLEdBQUEsTUFBQSxPQUFBLEVBQUEsRUFBQUEsRUFBQSxTQUFBN0ksQ0FBQSxDQUFBLEVBVjFCNkksRUFBQSxXQUFBLEVBQUEsQ0FBQSxRQUFBc2YsRUFBQSxRQUFBLElBQUEsQ0FBQThELEVBQUEsZ0JBQUFDLEVBQUEsZ0JBQUFyakIsRUFBQSxTQUFBN0ksQ0FBQSxDQUFBLEVBQUEsQ0FBQSxDQUFBLENBQUEsYUFBQSxFQUFBLEdBQUEsRUFBQSxDQUFBLHdEQ1NlcUkscUJBQWdCLENBQzdCeEwsS0FBTSxlQUNOeVcsTUFBTyxDQUlMcEcsS0FBTSxDQUFFLEVBSVI1TixRQUFTLENBQUV1QyxLQUFNMEwsS0FBTyxFQUl4QjRqRCxZQUFhLENBQUV0dkQsS0FBTW9uQixNQUFRLEVBSTdCb0IsTUFBTyxDQUFFLEVBS1QrbUMsWUFBYSxDQUNYdnZELEtBQU13bkIsUUFDUCxFQUlEZ29DLGtCQUFtQixDQUNqQnh2RCxLQUFNd25CLFNBQ05ILFFBQVNRLE1BQ1YsQ0FDRixFQUNEc0QsTUFBTyxDQUlMLGNBSUEsa0JBSUEsUUFBUSxFQUVWbkQsTUFBTXZXLEVBQU81VyxFQUFHLENBQ2QsS0FBTSxDQUFFcUksRUFBQUEsQ0FBRyxFQUFHUyxHQUFPLEVBQ2Y4ckQsRUFBc0J4MEQsRUFBQUEsU0FBUyxJQUM1QndXLEVBQU02OUMsYUFBZXBzRCxFQUFFLGlDQUFpQyxDQUNoRSxFQUVLLENBQUVoSSxHQUFBQSxDQUFJLEVBQUcySCxHQUFLLE1BQUEsRUFDZHFzRCxFQUFXbDJDLEdBQVF2SCxFQUFPNVcsRUFBS0ssRUFBR3lLLE9BQU9xbEIsVUFBVSxFQUNuRG1rQyxFQUFrQkQsRUFBUy8xQyx3QkF3QmpDLE1BQU8sQ0FDTHMyQyxvQkFBQUEsRUFDQSxHQUFHUCxFQUNIQyxnQkFBQUEsRUFDQU8saUJBMUJ3Qi95RCxHQUFjLENBQ3RDOUIsRUFBSXd3QixLQUFLLFNBQVUxdUIsQ0FBSyxFQUN4QixNQUFNME8sRUFBTzZqRCxFQUFTMzFDLFVBRXRCLEdBQUk1YyxHQUFTK08sTUFBTXNILFFBQVFyVyxDQUFLLEdBQUtBLEVBQU1tc0MsT0FBUyxFQUFHLENBQ3JELE1BQU1odUMsRUFBTyxDQUFBLEVBQ2IsVUFBVzRsQixLQUFLL2pCLEVBQ1YwTyxHQUFRQSxFQUFLc2tELFNBQVd0a0QsRUFBS3NrRCxRQUFRanZDLENBQUMsR0FDeEM1bEIsRUFBS2tRLEtBQUtLLEVBQUtza0QsUUFBUWp2QyxDQUFDLENBQUMsRUFHN0I3bEIsRUFBSXd3QixLQUFLLGtCQUFtQnZ3QixDQUFJLEVBQ2hDLE1BQ0QsQ0FFRCxHQUFJdVEsR0FBUUEsRUFBS3NrRCxTQUFXdGtELEVBQUtza0QsUUFBUWh6RCxDQUFLLEVBQUcsQ0FDL0MsTUFBTXl5RCxFQUFNL2pELEVBQUtza0QsUUFBUWh6RCxDQUFLLEVBQzlCOUIsRUFBSXd3QixLQUFLLGtCQUFtQitqQyxDQUFHLENBQ2hDLE1BQ0N2MEQsRUFBSXd3QixLQUFLLGtCQUFtQixJQUFJLEdBU3JDLEVBQ0Q3ZSxRQUFNLENBQ0osS0FBTSxDQUFFdFIsR0FBQUEsQ0FBSSxFQUFHMkgsR0FBSyxNQUFBLEVBQ2Qrc0QsRUFBYWpuQyxFQUF1Qix3QkFBQ3p0QixFQUFHeUssT0FBTzNLLElBQUksRUFDbkRpZSxFQUFTL2QsRUFBR3lLLE9BQU9xbEIsV0FDekIsR0FBSTl2QixFQUFHa2UsT0FBT3BlLE1BQVEsS0FBTSxDQUcxQixNQUFNeUMsRUFBVSxLQUFLMHhELGlCQUFtQixHQUNsQ3IwQixFQUFlLENBQ25CLENBQUMsWUFBWTdoQixDQUFNLEVBQUUsRUFBSXRjLEdBQWEsQ0FFcEMsS0FBS2t6RCxNQUFNLFlBQVk1MkMsQ0FBTSxHQUFJdGMsQ0FBSyxFQUN0QyxLQUFLK3lELGlCQUFpQi95RCxDQUFLLENBQzdCLEdBRUYsT0FBQThQLEVBQUEsWUFBQW1qRCxFQUFBem5DLGFBQUEsQ0FBQSxJQUVTLFlBQVcsWUFDSCxLQUFLc25DLG9CQUFtQixRQUM1Qmh5RCxFQUFPLFlBQ0gsS0FBSzh4RCxXQUFXLEVBQ3pCejBCLENBQU8sRUFBQSxJQUFBLENBR2hCLENBRUQsTUFBTXI5QixFQUFVLENBQUEsRUFDVnF5RCxFQUFhbm5DLEVBQXVCLHdCQUFDenRCLEVBQUdrZSxPQUFPcGUsSUFBSSxFQUNuRG0wRCxFQUFrQixLQUFLQSxpQkFBbUIsR0FDaEQsVUFBV2h4RCxLQUFRZ3hELEVBQWlCLENBQ2xDLE1BQU0vMUMsRUFBTTNNLEVBQUEsWUFBQXFqRCxFQUFBM25DLEVBQUFBLFdBQ01ocUIsRUFBSSxDQUFBLE1BQVMsS0FBS2tiLFNBQVNsYixDQUFJLEVBQUMsTUFBUyxLQUFLbWIsU0FBU25iLENBQUksQ0FBQyxDQUFBLEVBQUEsQ0FBQWtwQixRQUFBQSxJQUFBLENBQ3pFLEtBQUtrb0MsWUFBYyxLQUFLQSxZQUFZcHhELENBQUksRUFBSSxLQUFLbWIsU0FBU25iLENBQUksQ0FBQyxFQUVuRSxFQUNEVixFQUFRdU4sS0FBS29PLENBQU0sQ0FDcEIsQ0FDRCxPQUFBM00sRUFBQUEsWUFBQW1qRCxFQUFBLENBQUEsSUFFUyxZQUFXLFlBQ0gsS0FBS0gsb0JBQW1CLFNBRTNCLEtBQUtDLGdCQUFnQixFQUFBLENBQUFyb0MsUUFBQUEsSUFBQSxDQUU5QjVwQixDQUFPLEVBQUEsR0FIQyxLQUFLK3FCLEtBQUssQ0FBQSxDQU16QixDQUNELENBQUEsRUM1R0QsU0FBU3VuQyxHQUFZcnpCLEVBQWEsQ0FDaEMsR0FBSUEsR0FBTyxLQUNGLE1BQUEsR0FFTCxPQUFPQSxHQUFRLFdBQ1hBLEVBQUEsS0FBSyxVQUFVQSxDQUFHLEdBRTFCLElBQUk2UixFQUFPLEVBQ1AzdEMsRUFDQW92RCxFQUNBdnpCLEVBQ0osR0FBSUMsRUFBSSxTQUFXLEVBQVUsT0FBQTZSLEVBQzdCLElBQUszdEMsRUFBSSxFQUFHNjdCLEVBQU1DLEVBQUksT0FBUTk3QixFQUFJNjdCLEVBQUs3N0IsSUFDL0JvdkQsRUFBQXR6QixFQUFJLFdBQVc5N0IsQ0FBQyxFQUNkMnRDLEdBQUFBLEdBQVEsR0FBS0EsRUFBT3loQixFQUNwQnpoQixHQUFBLEVBRUgsT0FBQUEsQ0FDVCxDQUVBLFNBQVMwaEIsR0FBZ0J4K0MsRUFBWSxDQUNuQyxJQUFJeStDLEVBQVcsQ0FBQSxFQUNYLE9BQUEsT0FBT3orQyxFQUFNLFlBQWUsVUFBWUEsRUFBTSxVQUFZQSxFQUFNLFdBQWEsTUFBUUEsRUFBTSxZQUFjLEdBQzNHeStDLEVBQVd6K0MsRUFBTSxXQUFXLE1BQU1BLEVBQU0sU0FBUyxFQUN4Q0EsRUFBTSxzQkFBc0IsTUFFckN5K0MsRUFBV3orQyxFQUFNLFdBRU55K0MsRUFBQSxDQUFDeitDLEVBQU0sVUFBVSxFQUV2QnkrQyxDQUNULENBS0EsTUFBQUMsR0FBZTNwRCxrQkFBZ0IsQ0FDN0IsS0FBTSxpQkFDTixNQUFPLENBSUwsV0FBWSxDQUFDLEVBSWIsS0FBTSxDQUFDLEVBSVAsU0FBVSxDQUFFLFFBQVMsRUFBSyxFQU0xQixVQUFXLENBQUUsUUFBUyxHQUFJLEVBUTFCLE1BQU8sQ0FBQyxFQUlSLE9BQVEsQ0FBQyxFQUlULFdBQVksQ0FDVixLQUFNLEtBQ1IsRUFLQSxZQUFhLENBQ1gsS0FBTSxLQUNSLEVBSUEsS0FBTSxDQUNKLFFBQVMsS0FDWCxFQUlBLFVBQVcsQ0FDVCxLQUFNLE1BQ1IsRUFJQSxhQUFjLENBQUMsRUFLZixlQUFnQixDQUNkLEtBQU0sUUFDUixFQUlBLFdBQVksQ0FDVixLQUFNLFFBQ1IsRUFFQSxTQUFVLENBQ1IsS0FBTSxRQUNOLFFBQVMsRUFDWCxDQUNGLEVBQ0EsTUFBTyxDQUFDLFFBQVMsY0FBZSxRQUFTLG1CQUFtQixFQUM1RCxNQUFNaUwsRUFBWTVXLEVBQVUsQ0FJcEIsS0FBQSxDQUFFLEdBQUFLLEdBQU8ySCxHQUFBQSxRQUNUdXRELEVBQWFsMUQsRUFBRyxJQUFJLE9BQ3BCbTFELEVBQWMsQ0FBQyxRQUFTLE9BQU8sRUFFL0JuQixFQUFXbDJDLEdBQVF2SCxFQUFPNVcsQ0FBRyxFQUM3QixDQUFFLFNBQUF5MUQsRUFBVSxTQUFBajNDLEVBQVUsZ0JBQUFlLENBQUEsRUFBb0I4MEMsRUFDaERBLEVBQVMsV0FBVyxFQUNYLFNBQUFxQixFQUFTOStDLEVBQVl0VCxFQUFXLENBQ25DLENBQUNBLEVBQUssUUFBVXNULEVBQU0sU0FDeEJ0VCxFQUFLLE9BQVNzVCxFQUFNLFFBRWhCLE1BQUErK0MsRUFBVXQxRCxFQUFHLElBQUksS0FDakJ1MUQsRUFBUUgsRUFBU255RCxDQUFJLEVBQzNCLEdBQUlzeUQsR0FBUyxLQUFNLENBRWIsR0FBQSxPQUFPQSxHQUFTLFNBQ2xCLE9BR0ZyMkMsRUFBZ0JqYyxFQUFNLE9BQU8sRUFDN0JBLEVBQUtxeUQsQ0FBTyxFQUFJQyxFQUNoQixNQUNGLENBQ0loL0MsR0FBQUEsRUFBTSxRQUFVLE9BQVEsQ0FDMUIsTUFBTWkvQyxFQUFXWCxHQUFZMTJDLEVBQVNsYixDQUFJLENBQUMsRUFDckN3eUQsRUFBU2wvQyxFQUFNLFdBQWFBLEVBQU0sV0FBYTIrQyxFQUNyRGp5RCxFQUFLcXlELENBQU8sRUFBSUcsRUFBT0QsRUFBV0MsRUFBTyxNQUFNLEVBQy9DLE1BQU1DLEVBQVVuL0MsRUFBTSxZQUFjQSxFQUFNLFlBQWM0K0MsRUFDbkRseUQsRUFBQSxPQUFTeXlELEVBQVEsS0FBSyxNQUFNRixFQUFXQyxFQUFPLE1BQU0sRUFBSUMsRUFBUSxNQUFNLENBQUEsTUFFdEV6eUQsRUFBQXF5RCxDQUFPLEVBQUkvK0MsRUFBTSxLQUUxQixDQUVNLE1BQUFvL0MsRUFBaUM1MUQsRUFBQUEsU0FBUyxJQUFNLFNBQ2hELEdBQUF3VyxFQUFNLFlBQWMsU0FDdEIsT0FBSUEsRUFBTSxZQUFjLENBQUMsTUFBTSxRQUFRQSxFQUFNLFVBQVUsRUFDOUMsQ0FBQ0EsRUFBTSxVQUFVLEVBRW5CQSxFQUFNLFdBR1QsTUFBQXBHLEVBQU82akQsRUFBUyxVQUN0QixHQUFJejlDLEVBQU0sWUFBYyxNQUFRQSxFQUFNLGFBQWUsR0FDbkQsTUFBTyxHQUVILE1BQUF5K0MsRUFBV0QsR0FBZ0J4K0MsQ0FBSyxFQUV0QyxJQUFJaFUsRUFBVSxDQUFBLEVBRVIsTUFBQXF6RCxJQUFZcDFELEVBQUErVixFQUFNLE9BQU4sWUFBQS9WLEVBQVksUUFBUyxRQUNqQ3ExRCxJQUFZbi9DLEVBQUFILEVBQU0sT0FBTixZQUFBRyxFQUFZLFFBQVMsUUFFbkN2RyxHQUNRNU4sRUFBQTROLEVBQUssb0JBQW9CNmtELENBQVEsRUFFekNoeUQsRUFBQSxRQUFRVCxFQUFVVSxHQUFTLENBQ3ZCQSxFQUFLNHlELENBQVMsR0FBSyxPQUNyQjV5RCxFQUFLNHlELENBQVMsRUFBSXQvQyxFQUFNLGNBQWdCdFQsRUFBSzJ5RCxDQUFTLEVBQ3hELENBQ0QsSUFFRHJ6RCxFQUFVLENBQUEsRUFDUlMsRUFBQSxRQUFRZ3lELEVBQVcveEQsR0FBUyxDQUN4QkEsYUFBZ0IsT0FDbEJWLEVBQVEsS0FBS1UsQ0FBSSxFQUVqQlYsRUFBUSxLQUFLLENBQ1gsQ0FBQ3F6RCxDQUFTLEVBQUczeUQsRUFDYixDQUFDNHlELENBQVMsRUFBRzV5RCxDQUFBLENBQ2QsQ0FDSCxDQUNELEdBR0gsTUFBTTZ5RCxFQUF1QixDQUFBLEVBQzNCLE9BQUE5eUQsRUFBQSxRQUFRVCxFQUFVVSxHQUFTLENBQzNCNnlELEVBQWdCLEtBQUs5eUQsRUFBRSxLQUFLQyxFQUFNLFVBQVUsQ0FBQyxDQUFBLENBQzlDLEVBQ0NELEVBQUEsUUFBUTh5RCxFQUFrQjd5RCxHQUFTLENBQ25Db3lELEVBQVM5K0MsRUFBT3RULENBQUksQ0FBQSxDQUNyQixFQUNNNnlELENBQUEsQ0FDUixFQUVELFNBQVM5MkIsRUFBUS83QixFQUFXLENBQzFCdEQsRUFBSSxLQUFLLFFBQVMsQ0FBRSxLQUFBc0QsQ0FBWSxDQUFBLENBQ2xDLENBQ1MsU0FBQTlDLEVBQVErSCxFQUFlakYsRUFBVyxDQUN6Q3RELEVBQUksS0FBSyxRQUFTLENBQUUsS0FBQXNELEVBQU0sTUFBQWlGLENBQU8sQ0FBQSxFQUNqQyxNQUFNNnRELEVBQW1CLENBQUEsRUFDekIsUUFBU3J3RCxFQUFJLEVBQUdBLEVBQUlpd0QsRUFBbUIsTUFBTSxPQUFRandELElBQy9DQSxJQUFNd0MsR0FDUjZ0RCxFQUFVLEtBQUs1M0MsRUFBU3czQyxFQUFtQixNQUFNandELENBQUMsQ0FBQyxDQUFDLEVBR3BEL0YsRUFBQSxLQUFLLG9CQUFxQm8yRCxDQUFTLENBQ3pDLENBRU8sTUFBQSxDQUNMLEdBQUEvMUQsRUFDQSxHQUFHZzBELEVBQ0gsUUFBQWgxQixFQUNBLG1CQUFBMjJCLEVBQ0EsUUFBQXgxRCxDQUFBLENBRUosQ0FDRixDQUFDLHNIQ3hRQzAvQixFQUFBM1UsbUJBMkJPLFNBM0JQLEVBRUksT0FBQTllLFlBQUEsRUFBQUMscUJBQUEsT0FBOEdaLEdBSHBILENBQUFLLEVBQUEsWUFBQU0sRUFBQUEsVUFHMEQrUixFQUFhLEVBQUE5UixFQUFBLG1CQUFBc29CLEVBQUEsU0FBQSxDQUFBLElBQUEsQ0FBQSxFQUFBQyxFQUFBLFdBQUE5b0IsRUFBQSxtQkFBQTdJLElBQUltSixFQUFBLFVBQUEsRUFBdUIrZSxFQUFBLFlBQUE4SixFQUFBLENBQUcsSUFBS25wQixFQUFFLFNBQUk3SSxDQUFBLEVBQUEsY0FBQTZJLEVBQUEsa0JBRW5GLEVBQUEsS0FBQSxFQUFBLENBQUEsY0FBQSxPQUFBLENBQUEsRUFBQSxFQUFBLEdBQUEsR0FBQUEsRUFBQSxPQUFBLFFBQUFNLEVBQUFBLFVBQ3dCK1IsRUFBYSxFQUFBOVIsRUFBQUEsbUJBQUFzb0IsRUFBQUEsU0FBQSxDQUFBLElBQUEsQ0FBQSxFQUFBQyxFQUFBLFdBQUE5b0IsRUFBQSxtQkFBQTdJLElBQUltSixFQUFBLFVBQUEsRUFBTzR5QixFQUFZLG1CQUFBLE9BQUEsQ0FBTTVnQixJQUFBQSxFQUFBQSxTQUFBQSxDQUFBQSxFQUFBQSxRQUFBQSxHQUFBQSxFQUFBQSxRQUFBQSxDQUFBQSxDQUd6RixFQUFBK1EsRUFBQUEsZ0JBQUFyakIsRUFBQSxTQUFBN0ksQ0FpQlcsQ0ExQmpCLEVBQUEsRUFBQXlJLEVBQUEsRUFBQSxFQUFBLEdBQUEsSUFBQVUsRUFBQUEsVUFTa0UrUixFQUFhLEVBQUE5UixFQUFBLG1CQUFBc29CLFdBQUEsQ0FBQSxJQUFBLENBQUEsRUFBQUMsRUFBQUEsV0FBQTlvQixFQUFBLG1CQUFBLENBQUE3SSxFQUFBaUYsS0FHaEVrRSxFQUFTLFVBQUEsRUFBQStlLEVBQUEsWUFBQVEsMEJBQUE3ZixFQUFBLEdBQUEsSUFBQSxJQUFBLEVBQUFtaEIsYUFBQSxDQUNkLElBQUluaEIsRUFBQyxTQUFPN0ksQ0FBQSxFQUNYLE1BQUEsU0FkWCxLQUFBLFFBZXNCLFNBQUE2SSxFQUFBLFNBQ1gsUUFBTSxFQUFBLEVBQ043SSxFQUFNLENBQ04sS0FBQSxLQUNBLEtBQUEsS0FBQSxRQUFBMHNCLEdBQUE3akIsRUFBQSxRQUFBNUQsRUFBQWpGLENBQUEsRUFuQlgsUUF1QnFCMHNCLEdBQUE3akIsRUFBQSxRQUFBN0ksQ0FBQSxDQUFBLENBQUEsRUFBQSxDQURULFFBQUFtb0IsRUFBQSxRQUFBLElBQUEsQ0F0Qlpub0IsRUFBQSxNQUFBbUosRUFBQUEsWUFzQmlDK2UsRUFBQUEsWUFBSTBVLEVBQUEsQ0FBRyxJQUFJLEVBQWlCLEtBQUs1OEIsRUFBQyxLQUFBLEtBQUFBLEVBQUEsU0F0Qm5FLE1BQUEsYUFBQSxFQUFBLEtBQUEsRUFBQSxDQXVCcUIsT0FDWCxNQUFBLENBQUEsR0FBQXNKLEVBQUFBLG1CQUFBLEdBQUEsRUFBQSxFQXhCVjJpQixFQUFBLGdCQUFBLElBQUFDLGtCQUFBcmpCLEVBQUEsU0FBQTdJLENBQUEsQ0FBQSxFQUFBLENBQUEsQ0FBQSxDQUFBLHdGQ3lCQSt5RCxHQUFlMXFELGtCQUFnQixDQUM3QixLQUFNLHVCQUNOLE1BQU8sQ0FPTCxXQUFZLENBQ1YsS0FBTSxDQUFDLE9BQVEsS0FBSyxFQUNwQixRQUFTLE9BQ1QsUUFBUyxFQUNYLEVBT0EsVUFBVyxDQUFFLEtBQU0sT0FBUSxRQUFTLElBQUssUUFBUyxFQUFNLEVBS3hELFNBQVUsQ0FBRSxLQUFNLFFBQVMsUUFBUyxFQUFNLEVBSTFDLEtBQU0sQ0FDSixLQUFNLE9BQ04sUUFBUyxPQUNULFFBQVMsRUFDWCxDQUNGLEVBQ0EsTUFBTyxDQUFDLGFBQWEsRUFDckIsTUFBTWlMLEVBQU81VyxFQUFLLE9BQ1YsTUFBQXdRLEVBQU8yTixHQUFRdkgsRUFBTzVXLENBQUcsR0FFM0JhLEVBQUErVixFQUFNLE9BQU4sTUFBQS9WLEVBQVksa0JBQ2QyUCxFQUFLLFdBQVcsRUFHWixNQUFBOGxELEVBQW1CbDJELEVBQUFBLFNBQVMsSUFFekJ3VyxFQUFNLFFBQ2QsRUFFTSxNQUFBLENBQ0wsR0FBR3BHLEVBQ0gsaUJBQUE4bEQsQ0FBQSxDQUVKLEVBQ0EsTUFBTyxDQUNMLE1BQU8sRUFDVCxFQUNBLFNBQVUsQ0FDUixRQUFTLENBRUgsT0FBQSxLQUFLLFlBQWMsS0FDZCxHQUdGLEtBQUssZUFBZSxLQUFLLFVBQVUsQ0FDNUMsRUFDQSxnQkFBaUIsQ0FFWCxHQUFBLEtBQUssWUFBYyxLQUNyQixNQUFPLEdBRVQsTUFBTXRqRCxFQUFNLENBQUEsRUFFRCxVQUFBMVAsS0FBUSxLQUFLLFdBRXRCMFAsRUFBSSxLQUFLLEtBQUssZUFBZTFQLENBQUksQ0FBQyxFQUU3QixPQUFBMFAsQ0FDVCxDQUNGLEVBQ0EsUUFBUyxDQUNQLFlBQVloUixFQUFhLENBQ3ZCLEdBQUlBLEdBQVUsS0FFWixHQUFJLEtBQUssU0FBVSxDQUNqQkEsRUFBUyxDQUFBLEVBRUUsVUFBQXNCLEtBQVEsS0FBSyxXQUN0QixVQUFXaXpELEtBQU9qekQsRUFDaEJ0QixFQUFPLEtBQUt1MEQsQ0FBRyxDQUVuQixNQUdBdjBELEVBQVMsS0FBSyxXQUdsQixHQUFJQSxHQUFVLEtBQ1osTUFBTyxHQUVULElBQUlnUixFQUFNLEtBRU4sT0FBQSxPQUFPaFIsR0FBVyxVQUFZLENBQUMsS0FBSyxVQUFZLEtBQUssV0FBYSxNQUFRLEtBQUssWUFBYyxHQUV6RmdSLEVBQUFoUixFQUFPLE1BQU0sS0FBSyxTQUFTLEVBQ3hCQSxhQUFrQixNQUNyQmdSLEVBQUFoUixFQUVOZ1IsRUFBTSxDQUFDaFIsQ0FBTSxFQUVSZ1IsQ0FDVCxFQUNBLGVBQWVoUixFQUFhLENBRXBCLE1BQUFnUixFQUFNLEtBQUssWUFBWWhSLENBQU0sRUFHN0J3TyxFQUFPLEtBQUssVUFDbEIsR0FBSUEsRUFDSyxPQUFBQSxFQUFLLG9CQUFvQndDLENBQUcsQ0FFdkMsQ0FDRixDQUNGLENBQUMsaUNDakptQnNqRCxHQUFnQm5xRCxFQUFBQyxFQUFBQyxFQUFBQyxFQUFBQyxFQUFBQyxFQUFBLDJDQUM5QixPQUtNLEtBQUEsQ0FBQUwsRUFBQSxrQkFBQU0sRUFBQSxVQUFBLEVBQUEsRUFBQUMsRUFBQUEsbUJBSkpzb0IsRUFBQUEsU0FHTyxDQUFBLElBQUEsQ0FBQSxFQVBmQyxFQUFBQSxXQUlzQzlvQixFQUFNLGVBQVgsQ0FBQXFxRCxFQUFBQyxLQUF6QmhxRCxFQUFBQSxVQUFBLEVBQUFDLEVBQUEsbUJBQUEsTUFHTyxLQUhnQytwRCxHQUFLLEVBQ3pCaHFELFlBQUEsRUFBQSxFQUFBQyxFQUFBQSxtQkFBQXNvQixFQUFBLFNBQUEsS0FBQUMsRUFBQUEsV0FBQXVoQyxFQUFBLENBQUFsekQsRUFBQWlGLG1CQUFqQm1FLEVBQW1DLG1CQUFBLE9BTDdDLFFBS3NDLENBTHRDbkUsSUFBQSxHQU1Va0UsWUFBaUMsRUFBQUMscUJBQUEsT0FBQVosR0FBeEIyUyxLQUFRLEdBQUE3UixxQkFBQSxHQUFBLEVBQUEsbUZBTUYsRUFBQSxHQUFBLElBQUFILEVBQUFBLFVBQUEsRUFBQSxFQUFBQyxFQUFBLG1CQUFBc29CLFdBQUEsQ0FBQSxJQUFBLENBQUEsRUFBQUMsRUFBQUEsV0FBQTlvQixFQUFBLE9BQUEsQ0FBQTdJLEVBQUFpRixtQkFBakJtRSxFQUFtQyxtQkFBQSxPQVozQyxRQVlvQyxDQVpwQ25FLElBQUEsR0FhUWtFLFlBQWlDLEVBQUFDLHFCQUFBLE9BQUFYLEdBQXhCMFMsS0FBUSxHQUFBN1IscUJBQUEsR0FBQSxFQUFBLG1IQ0l6QjhwRCxHQUFlL3FELGtCQUFnQixDQUM3QixLQUFNLGlCQUNOLE1BQU8sQ0FJTCxLQUFNLENBQUMsRUFJUCxRQUFTLENBQUUsS0FBTSxLQUFNLEVBSXZCLGtCQUFtQixDQUNqQixLQUFNLFNBQ04sUUFBUyxNQUNYLENBQ0YsRUFDQSxNQUFPLENBSUwsY0FLQSxrQkFJQSxRQUNGLEVBQ0EsTUFBTWlMLEVBQU81VyxFQUFLLENBQ1YsTUFBQTIyRCxFQUFheDRDLEdBQVF2SCxFQUFPNVcsQ0FBRyxFQUMvQixDQUFFLEdBQUFLLEdBQU8ySCxHQUFBQSxRQUNUNHVELEVBQW1CbnZELEVBQUFBLE1BRXJCbVAsRUFBTSxPQUNTZ2dELEVBQUEsTUFBUXYyRCxFQUFHLFNBQVMsV0FBVyxDQUU5QyxNQUFPdVcsRUFBTSxLQUFLLE1BRWxCLE1BQU9BLEVBQU0sS0FBSyxNQUVsQixTQUFVQSxFQUFNLEtBQUssUUFBQSxDQUN0QixHQUVHLE1BQUEwOUMsRUFBa0JxQyxFQUFXLHdCQUVuQyxTQUFTRSxFQUFlLzBELEVBQVksQ0FFbEMsR0FESTlCLEVBQUEsS0FBSyxTQUFVOEIsQ0FBSyxFQUNwQkEsRUFBTyxDQUNULElBQUlnMUQsRUFBa0IsQ0FBQSxFQUNoQixNQUFBdG1ELEVBQU9tbUQsRUFBVyxVQUNwQixHQUFBbm1ELEdBQVFBLEVBQUssUUFBUyxDQUN4QixRQUFTbE4sS0FBUXhCLEVBQU8sQ0FDaEIsTUFBQXl5RCxFQUFNL2pELEVBQUssUUFBUWxOLENBQUksRUFDekJpeEQsR0FDRnVDLEVBQWdCLEtBQUt2QyxDQUFHLENBRTVCLENBQ0l2MEQsRUFBQSxLQUFLLGtCQUFtQjgyRCxDQUFlLENBQzdDLENBQUEsTUFFSTkyRCxFQUFBLEtBQUssa0JBQW1CLElBQUksQ0FFcEMsQ0FDTyxNQUFBLENBQ0wsR0FBQUssRUFDQSxHQUFHczJELEVBQ0gsaUJBQUFDLEVBQ0EsZ0JBQUF0QyxFQUNBLGVBQUF1QyxDQUFBLENBRUosQ0FDRixDQUFDLFdDM0ZPMXJDLEdBQWFoZixFQUFBQyxFQUFBQyxFQUFBQyxFQUFBQyxFQUFBQyxFQUFBLENBQ2hCLE9BQUFDLEVBQUEsVUFBQSxFQUF3QitlLEVBQUEsWUFBQVEsMEJBQUE3ZixFQUFBLEdBQUEsU0FBQSxJQUFBLEVBQUFtaEIsYUFBQSxDQUNqQnNwQyxJQUFBQSxjQUFBQSxRQUFBQSxFQUFBQSxpSUNpQlpHLEdBQWVwckQsa0JBQWdCLENBQzdCLEtBQU0saUJBQ04sTUFBTyxDQUlMLEtBQU0sQ0FBQyxFQUlQLFFBQVMsQ0FBRSxLQUFNLE1BQU8sUUFBUyxPQUFXLFFBQVMsRUFBTSxFQUszRCxXQUFZLENBQ1YsS0FBTSxNQUNSLEVBS0EsWUFBYSxDQUNYLEtBQU0sT0FDTixTQUFVLENBQ1IsTUFBTyxFQUNULENBQ0YsRUFJQSxrQkFBbUIsQ0FDakIsS0FBTSxTQUNOLFFBQVMsTUFDWCxDQUNGLEVBQ0EsTUFBTyxDQUlMLGNBS0Esa0JBSUEsUUFDRixFQUNBLE1BQU1pTCxFQUFPNVcsRUFBSyxDQUNWLEtBQUEsQ0FBRSxHQUFBSyxHQUFPMkgsR0FBQUEsUUFDZixJQUFJcXNELEVBQVdsMkMsR0FBUXZILEVBQU81VyxFQUFLSyxFQUFHLGNBQWMsVUFBVSxFQUN4RCxNQUFBaTBELEVBQWtCRCxFQUFTLHdCQW9CMUIsTUFBQSxDQUNMLEdBQUFoMEQsRUFDQSxHQUFHZzBELEVBQ0gsZ0JBQUFDLEVBQ0EsaUJBdkJ3Qnh5RCxHQUFlLENBRXZDLEdBREk5QixFQUFBLEtBQUssU0FBVThCLENBQUssRUFDcEJBLEVBQU8sQ0FDVCxJQUFJZzFELEVBQWtCLENBQUEsRUFDaEIsTUFBQXRtRCxFQUFPNmpELEVBQVMsVUFDbEIsR0FBQTdqRCxHQUFRQSxFQUFLLFFBQVMsQ0FDeEIsUUFBU2xOLEtBQVF4QixFQUFPLENBQ2hCLE1BQUF5eUQsRUFBTS9qRCxFQUFLLFFBQVFsTixDQUFJLEVBQ3pCaXhELEdBQ0Z1QyxFQUFnQixLQUFLdkMsQ0FBRyxDQUU1QixDQUNJdjBELEVBQUEsS0FBSyxrQkFBbUI4MkQsQ0FBZSxDQUM3QyxDQUFBLE1BRUk5MkQsRUFBQSxLQUFLLGtCQUFtQixJQUFJLENBQ2xDLENBT0EsQ0FFSixDQUNGLENBQUMsV0N2R0RtckIsR0FJcUNoZixFQUFBQyxFQUFBQyxFQUFBQyxFQUFBQyxFQUFBQyxFQUFBLENBRmpDLE9BQUFDLEVBQUEsVUFBQSxFQUFBK2UsRUFBQUEsWUFBQVEsRUFBQSx3QkFGSjdmLG1CQUlxQm1vRCxJQUFKLEVBQUEsQ0FBQSxTQUFBbm9ELEVBQUEsZ0JBQUEsRUFBQSxDQUFBLFFBQUFzZixFQUFBLFFBQUEsSUFBQSxFQUpqQmhmLFlBQUEsRUFBQSxFQUFBQyxFQUFBQSxtQkFBQXNvQixFQUFBLFNBQUEsS0FBQUMsRUFBQUEsV0FBQTlvQixFQUFBLGdCQUFBN0ksSUFLVW1KLFlBQWEsRUFBQStlLGNBQUFRLEVBQUFBLHdCQUFBN2YsRUFBQSxZQUFBQSxFQUFBLEdBQUEsU0FBQSxJQUFBLEVBQUFtaEIsRUFBQUEsV0FBQSxDQUNoQixRQUFLOU8sR0FDTG5lLElBQUFBLGNBQUFBLElBQ09tMEQsRUFBVyxTQUFBbHhELENBQUEsRUFSekIsQ0FTMkI2SSxFQUFBLEdBQUEsU0FBQSxPQUFBLEVBQUEsRUFBQUEsRUFBQSxTQUFBN0ksQ0FBQSxDQUFBLEVBVDNCNkksRUFBQSxXQUFBLEVBQUEsQ0FBQSxRQUFBc2YsRUFBQSxRQUFBLElBQUEsQ0FBQThELEVBQUEsZ0JBQUFDLEVBQUEsZ0JBQUFyakIsRUFBQSxTQUFBN0ksQ0FBQSxDQUFBLEVBQUEsQ0FBQSxDQUFBLENBQUEsYUFBQSxFQUFBLEdBQUEsRUFBQSxDQUFBLHdEQ2FBMHpELEdBQWVyckQsa0JBQWdCLENBQzdCLEtBQU0sZUFDTixNQUFPLENBS0wsS0FBTSxDQUNKLEtBQU0sTUFDUixFQUNBLFFBQVMsQ0FBQyxFQUlWLGtCQUFtQixDQUNqQixLQUFNLFNBQ04sUUFBUyxNQUNYLENBQ0YsRUFDQSxNQUFPLENBQUMsYUFBYSxFQUNyQixNQUFNaUwsRUFBTzVXLEVBQUssQ0FDVixLQUFBLENBQUUsR0FBQUssR0FBTzJILEdBQUFBLFFBQ2YsSUFBSXFzRCxFQUFXbDJDLEdBQVF2SCxFQUFPNVcsRUFBS0ssRUFBRyxPQUFPLFVBQVUsRUFDakQsTUFBQWkwRCxFQUFrQkQsRUFBUyx3QkFDMUIsTUFBQSxDQUNMLEdBQUFoMEQsRUFDQSxHQUFHZzBELEVBQ0gsZ0JBQUFDLENBQUEsQ0FFSixFQUNBLFNBQVUsQ0FDUixTQUFVLENBQ0osT0FBQSxLQUFLLGdCQUFnQixPQUFTLEVBQ3pCLEtBQUssZ0JBQWdCLENBQUMsRUFFeEIsRUFDVCxFQUNBLFdBQVksQ0FDTixPQUFBLEtBQUssZ0JBQWdCLE9BQVMsRUFDekIsS0FBSyxnQkFBZ0IsQ0FBQyxFQUV4QixFQUNULEVBQ0EsU0FBVSxpQkFDRixNQUFBajBELEVBQUtDLGFBQVUsTUFDZCxNQUFBLENBRUwsQ0FBQ0QsRUFBRyxPQUFPLFVBQVUsRUFBRyxLQUFLLFVBQVFRLEVBQUEsS0FBSyxPQUFMLFlBQUFBLEVBQVcsUUFBUyxPQUFPLEVBRWhFLENBQUNSLEVBQUcsT0FBTyxZQUFZLEVBQUcsS0FBSyxZQUFVMFcsRUFBQSxLQUFLLE9BQUwsWUFBQUEsRUFBVyxRQUFTLE9BQU8sRUFFcEUsQ0FBQzFXLEVBQUcsT0FBTyxXQUFXLEVBQUcsS0FBSyxVQUFReVcsRUFBQSxLQUFLLE9BQUwsWUFBQUEsRUFBVyxRQUFTLE9BQU8sRUFFakUsQ0FBQ3pXLEVBQUcsT0FBTyxhQUFhLEVBQUcsS0FBSyxZQUFVbWIsRUFBQSxLQUFLLE9BQUwsWUFBQUEsRUFBVyxRQUFTLE9BQU8sRUFFckUsQ0FBQ25iLEVBQUcsT0FBTyxXQUFXLEVBQUcsS0FBSyxVQUFRdW1CLEVBQUEsS0FBSyxPQUFMLFlBQUFBLEVBQVcsUUFBUyxPQUFPLEVBRWpFLENBQUN2bUIsRUFBRyxPQUFPLGFBQWEsRUFBRyxLQUFLLFlBQVV5OEIsRUFBQSxLQUFLLE9BQUwsWUFBQUEsRUFBVyxRQUFTLE9BQU8sQ0FBQSxDQUV6RSxDQUNGLENBQ0YsQ0FBQyw2TENoRURtNkIsR0FBZXRyRCxrQkFBZ0IsQ0FDN0IsS0FBTSxlQUNOLE1BQU8sQ0FJTCxXQUFZLENBQUUsU0FBVSxFQUFNLEVBSTlCLFlBQWEsQ0FBRSxLQUFNLE9BQVEsUUFBUyxPQUFXLFNBQVUsRUFBTSxFQUlqRSxPQUFRLENBQUUsS0FBTSxPQUFRLFFBQVMsc0JBQXVCLFNBQVUsRUFBTSxDQUMxRSxFQUNBLE1BQU8sQ0FDRSxNQUFBLENBQ0wsS0FBTSxDQUFDLENBQUEsQ0FFWCxFQUNBLFNBQVUsQ0FDUixVQUFXLENBQ1QsR0FBSSxLQUFLLFlBQWMsTUFBUSxLQUFLLGFBQWUsR0FDMUMsTUFBQSxHQUVULElBQUlsQyxFQUFPLEtBQ1AsT0FBQSxLQUFLLGFBQWUsS0FDdEJBLEVBQU9ILEdBQU0sS0FBSyxXQUFZLEtBQUssV0FBVyxFQUV2Q0csRUFBQUgsR0FBTSxLQUFLLFVBQVUsRUFFdkJHLEVBQUssT0FBTyxLQUFLLE1BQU0sQ0FDaEMsQ0FDRixFQUNBLFNBQVUsQ0FBQyxFQUNYLFFBQVMsQ0FBQyxDQUNaLENBQUMsa0pDdkJEeXRELEdBQWV2ckQsa0JBQWdCLENBQzdCLEtBQU0sYUFDTixXQUFZLENBQUMsRUFDYixNQUFPLENBSUwsS0FBTSxDQUFDLEVBSVAsUUFBUyxDQUFFLEtBQU0sS0FBTSxFQUl2QixZQUFhLENBQUUsS0FBTSxNQUFPLEVBSTVCLGtCQUFtQixDQUNqQixLQUFNLFNBQ04sUUFBUyxNQUNYLENBQ0YsRUFDQSxNQUFPLENBSUwsY0FLQSxrQkFJQSxRQUNGLEVBSUEsTUFBTWlMLEVBQU81VyxFQUFLLENBQ1YsS0FBQSxDQUFFLEVBQUFxSSxHQUFNUyxLQUNSLENBQUUsR0FBQXpJLEdBQU8ySCxHQUFBQSxRQUNUNHNELEVBQXNCeDBELEVBQUFBLFNBQVMsSUFDNUJ3VyxFQUFNLGFBQWV2TyxFQUFFLGlDQUFpQyxDQUNoRSxFQUVHLElBQUFnc0QsRUFBV2wyQyxHQUFRdkgsRUFBTzVXLENBQUcsRUFFakMsTUFBTTJ0QixFQUFRM3RCLEVBQUksTUFFWnMwRCxFQUFrQkQsRUFBUyx3QkFFM0I1a0IsRUFBa0JydkMsRUFBQUEsU0FBUyxJQUFNLENBQy9CLE1BQUFvUSxFQUFPNmpELEVBQVMsVUFDZixPQUFBaDBELEVBQUcsV0FBVywyQkFBMkIsQ0FDOUMsTUFBT21RLEVBQUssTUFDWixNQUFPQSxFQUFLLE1BQ1osU0FBVUEsRUFBSyxRQUFBLENBQ2hCLENBQUEsQ0FDRixFQUVLcWtELEVBQW9CL3lELEdBQWUsQ0FFdkMsR0FESTlCLEVBQUEsS0FBSyxTQUFVOEIsQ0FBSyxFQUNwQkEsRUFBTyxDQUNILE1BQUEwTyxFQUFPNmpELEVBQVMsVUFDbEIsR0FBQTdqRCxHQUFRQSxFQUFLLFFBQ2YsR0FBSTFPLGFBQWlCLE1BQU8sQ0FDMUIsSUFBSWcxRCxFQUFrQixDQUFBLEVBQ3RCLFFBQVN4ekQsS0FBUXhCLEVBQU8sQ0FDaEIsTUFBQXl5RCxFQUFNL2pELEVBQUssUUFBUWxOLENBQUksRUFDekJpeEQsR0FDRnVDLEVBQWdCLEtBQUt2QyxDQUFHLENBRTVCLENBQ0l2MEQsRUFBQSxLQUFLLGtCQUFtQjgyRCxDQUFlLENBQUEsTUFFM0M5MkQsRUFBSSxLQUFLLGtCQUFtQndRLEVBQUssUUFBUTFPLENBQUssQ0FBQyxDQUVuRCxNQUVJOUIsRUFBQSxLQUFLLGtCQUFtQixJQUFJLENBQ2xDLEVBR0ltM0QsRUFBVTF2RCxFQUFBQSxNQUNULE1BQUEsQ0FDTCxHQUFBcEgsRUFDQSxnQkFBQW92QyxFQUNBLG9CQUFBbWxCLEVBQ0EsR0FBR1AsRUFDSCxnQkFBQUMsRUFDQSxpQkFBQU8sRUFDQSxNQUFBbG5DLEVBQ0EsUUFBQXdwQyxDQUFBLENBRUosQ0FDRixDQUFDLDJCQzFIQyxNQUFBN2dDLEVBQUEvSyxtQkFERixnQkFFWSxTQUVQbHJCLEVBQUcsVUFBQSxFQUFVbXJCLGNBQVFRLDBCQUFtQjdmLEVBQUEsR0FBQSxXQUFBLElBQUEsRUFBQW1oQixhQUFBLENBQ3hDLElBQUEsVUFDT21pQixDQUFBQSxFQUFBQSxHQUFBQSxXQUFlLFNBQ2hCLEVBQUVvbEIsRUFBQUEsRUFBQUEsZ0JBUGIsWUFTcUNsbkMsRUFBQUEsbUJBQUFBLEVBQUFBLEVBQUFBLGdCQUFBQSxDQUFBQSxTQUFBQSxFQUFBQSxnQkFBQUEsQ0FBQUEsRUFBQUEsRUFBQUEsWUFBQUEsQ0FBQUEsRUFBQUEsQ0FBQUEsRUFBQUEsY0FBbUJ4aEIsRUFBSyxNQUFBLENBQUFySyxFQUFBeUIsS0FUN0QsQ0FVTSxLQUFBQSxFQUFBLEdBQWlCa29CLEVBQUFBLFFBQVlsaEIsR0FBQSxDQUFBcUgsRUFBQUEsWUFBVTBrQixFQUFLLENBQUEsTUFBQXgwQiw4MkJDZ0lsRCxNQUFNOFUsRUFBUTY2QixFQWlCUjlqQixFQUFReXBDLEVBQUFBLFdBZVI5bUMsRUFBUW9oQixFQVVSLENBQUVyeEMsR0FBQUEsQ0FBSSxFQUFHMkgsR0FBSyxNQUFBLEVBQ2QsQ0FBRUssRUFBQUEsQ0FBRyxFQUFHUyxHQUFPLEVBQ2Z1dUQsRUFBZ0I1dkQsRUFBQUEsTUFDaEI2dkQsRUFBa0I3dkQsRUFBQUEsTUFDbEI4dkQsRUFBYTl2RCxNQUFJLEVBQUssRUFFdEIsQ0FBRWdRLFFBQUFBLEVBQVNaLFlBQUFBLEVBQWF4SSxRQUFBQSxDQUFTLEVBQUc2UCxHQUFRLEVBRWxELFNBQVNzNUMsRUFBaUJybkMsRUFBaUIsQ0FDckNBLEdBQWMsTUFBU3RmLE1BQU1zSCxRQUFRZ1ksQ0FBVSxHQUFLQSxFQUFXOGQsUUFBVSxFQUMzRXdwQixFQUFnQjMxRCxNQUFRLElBRXBCOFUsRUFBTThnRCxTQUNSRCxFQUFnQjMxRCxNQUFRcXVCLEdBQWMsR0FFdENzbkMsRUFBZ0IzMUQsTUFBUSxDQUFDcXVCLENBQVUsRUFFakN2WixFQUFNK2dELFlBQWMsV0FDdEJGLEVBQWdCMzFELE1BQVEyMUQsRUFBZ0IzMUQsTUFBTThCLElBQUtOLEdBQzFDc1QsRUFBTXBHLEtBQUtnTyxTQUFTbGIsQ0FBSSxDQUNoQyxHQUdQLENBRUEsS0FBTSxDQUFFdVIsV0FBQUEsQ0FBWSxFQUFHMkMsR0FBVSxDQUFFQyxRQUFBQSxFQUFTWixZQUFBQSxDQUFZLENBQUMsRUFDbkQrZ0QsRUFBa0IsTUFBT0MsR0FBeUQsV0FDdEYsR0FBSWpoRCxFQUFNeEIsVUFBWXdCLEVBQU0wNEIsV0FBWTE0QixHQUFBQSxFQUFNOUwsU0FBTjhMLE1BQUFBLEdBQWN4QixXQUFZd0IsR0FBQUEsRUFBTTlMLFNBQU44TCxNQUFBQSxHQUFjMDRCLFNBQzlFLE9BRUYsR0FBSTE0QixFQUFNcEcsTUFBUSxLQUNoQixNQUFNLElBQUkwaEIsTUFBTSxxQ0FBcUMsRUFHdkQsTUFBTXJuQixFQUFNLE1BQU1vVCxHQUFXLENBQzNCcEgsWUFBQUEsRUFDQVksUUFBQUEsRUFDQWlHLGtCQUFtQjlHLEVBQU04RyxrQkFDekJvNkMsb0JBQXFCQyxFQUF3QixFQUM3QzFwRCxRQUFBQSxFQUNBd0csV0FBQUEsQ0FDRixDQUFDLEVBQ0QwaUQsT0FBQUEsRUFBV3oxRCxNQUFRLEdBQ25CMDFELEVBQWlCNWdELEVBQU11WixVQUFVLEVBQzdCdlosRUFBTW9oRCxZQUNSLE1BQU1waEQsRUFBTW9oRCxXQUFXLENBQ3JCMW1ELFlBQWF1bUQsRUFBWXZtRCxZQUN6QixHQUFHMm1ELEVBQWdCLENBQ3JCLENBQUMsRUFFQ0osR0FDRmh0RCxFQUFJd1Msa0JBQWtCdzZDLEVBQVl2bUQsV0FBVyxFQUcvQyxNQUFNMEosRUFBUSxTQUFBLEVBQ2QsTUFBTW5HLEVBQVdzRyxZQUNWdFEsR0FHSHF0RCxFQUF1QjkzRCxFQUFBQSxTQUFTLEtBQzdCLENBQ0wsR0FBR3dXLEVBQU11aEQsY0FFWixFQUVLQyxFQUFpQmg0RCxFQUFBQSxTQUFTLElBQU0sQ0FDcEMsTUFBTWk0RCxFQUFZLFlBQVloNEQsRUFBR3lLLE9BQU9xbEIsVUFBVSxHQUVsRCxJQUFJcnVCLEVBQVE4VSxFQUFNdVosV0FDbEIsT0FBSXZaLEVBQU0rZ0QsWUFBYyxVQUFZL2dELEVBQU11WixhQUNwQ3ZaLEVBQU04Z0QsU0FDUjUxRCxFQUFROFUsRUFBTXVaLFdBQVd2c0IsSUFBS04sSUFDckJzVCxFQUFNcEcsS0FBS2dPLFNBQVNsYixFQUFJLENBQ2hDLEVBRUR4QixFQUFROFUsRUFBTXBHLEtBQUtnTyxTQUFTNUgsRUFBTXVaLFVBQVUsR0FHekMsQ0FDTCxDQUFDOXZCLEVBQUd5SyxPQUFPcWxCLFVBQVUsRUFBR3J1QixFQUN4QixDQUFDdTJELENBQVMsRUFBSXYyRCxJQUFlLENBQzNCd3VCLEVBQU0sb0JBQXFCeHVCLEVBQUssQ0FDakMsRUFDRCxDQUFDekIsRUFBR3lLLE9BQU93dEQsU0FBUyxFQUFHLEdBQ3ZCLEdBQUdqNEQsRUFBR3lLLE9BQU95dEQsa0JBQWtCM2hELEVBQU04Z0QsUUFBUSxFQUM3Q3I4QixLQUFNLEdBQ04sR0FBR3prQixFQUFNOUwsT0FFYixDQUFDLEVBRUswdEQsRUFBd0JwNEQsRUFBQUEsU0FBUyxJQUFNLENBQzNDLE1BQU0wUSxFQUFPelEsRUFBR280RCxPQUFPQyxXQUFXLENBQ2hDbG1ELE1BQU9vRSxFQUFNK2hELFNBQVd0d0QsRUFBRSw2QkFBNkIsRUFBSUEsRUFBRSwrQkFBK0IsRUFDNUZxdkMsTUFBTyxLQUNULENBQUMsRUFDRCxPQUFPdnFDLEVBQU0yRCxFQUFNOEYsRUFBTTZoRCxNQUFNLENBQ2pDLENBQUMsRUFFRDlvRCxFQUFBQSxNQUNFLElBQ1NpSCxFQUFNdVosV0FFZixNQUFPcnVCLEdBQVUsQ0FDWEEsSUFBVTIxRCxFQUFnQjMxRCxRQUc5QjAxRCxFQUFpQjExRCxDQUFLLEVBQ3RCLE1BQU1rWixFQUFRLFNBQUEsRUFDZCxNQUFNcEUsRUFBTXBHLEtBQUtvb0QsZUFBZW5CLEVBQWdCMzFELEtBQUssRUFFdkQsQ0FDRixFQUNBLE1BQU0yMUQsRUFBOEJod0QsTUFBSSxDQUFBLENBQUUsRUFFMUMsU0FBU3FULEdBQVksQ0FDbkIsT0FBT2xFLEVBQU1vQyxRQUFVbkMsRUFBWS9VLE1BQU13QyxNQUFNMFUsUUFBVSxJQUMzRCxDQUNBLE1BQU02L0MsRUFBYXB4RCxNQUFJLEVBQUssRUFFNUIsU0FBU3N3RCxHQUF5QixDQUNoQyxJQUFJZSxFQUFtQno0RCxFQUFHaUUsTUFBTXkwRCwwQkFBMEIsQ0FDeERDLFVBQVdwaUQsRUFBTW9pRCxVQUNqQkMsaUJBQWtCLEdBQ2xCbitDLFVBQUFBLEVBQ0FvK0MsYUFBYyxDQUNaLE9BQU9yaUQsRUFBWS9VLE1BQU15VixJQUMxQixFQUNEMUgsV0FBWUEsR0FDWjZuRCxTQUFVOWdELEVBQU04Z0QsU0FDaEJELGdCQUFBQSxFQUNBMEIsc0JBQXVCLE1BQU9wK0MsSUFBWSxDQUN4QzA4QyxFQUFnQjMxRCxNQUFRLENBQUMsR0FBR2laLEVBQU8sRUFDbkMsTUFBTUMsRUFBUSxTQUFBLEVBQ2QsTUFBTXBFLEVBQU1wRyxLQUFLb29ELGVBQWVuQixFQUFnQjMxRCxLQUFLLENBSXZELENBQ0YsQ0FBQyxFQW9CRCxPQUFPcUwsRUFuQmEsQ0FDbEI3SSxNQUFPLENBQ0wsTUFBTTgwRCxhQUFjLENBQ2xCLEdBQUkvNEQsRUFBR2lFLE1BQU0rMEQsZ0JBQWlCLENBQzVCUixFQUFXLzJELE1BQVEsR0FDbkIsTUFBTWtaLEVBQVEsU0FBQSxFQUNkLE1BQU1BLEVBQVEsU0FBQSxFQUNkLE1BQU1XLEdBQWU5RyxFQUFXeWtELGtCQUNoQ2o1RCxFQUFHaUUsTUFBTSswRCxnQkFBZ0IsQ0FDdkJ2K0MsVUFBQUEsRUFDQTQ4QyxTQUFVOWdELEVBQU04Z0QsU0FDaEIzK0MsU0FBVTRDLEdBQ1Y4N0MsZ0JBQUFBLENBQ0YsQ0FBQyxFQUNEb0IsRUFBVy8yRCxNQUFRLEVBQ3JCLENBQ0YsQ0FDRixHQUV3QmczRCxFQUFrQmxpRCxFQUFNa2hELG1CQUFtQixDQUN2RSxDQUVBLEtBQU0sQ0FBRTNxRCxNQUFBQSxDQUFPLEVBQUdTLEdBQVEsRUFtQjFCLGVBQWUyckQsR0FBTyxRQUNwQixHQUFJM2lELEVBQU1wRyxLQUFLaWYsUUFDYixPQUVGLElBQUkzdEIsRUFBUSxLQUNSa3FDLEVBQU8sT0FDUHlyQixHQUFBQSxFQUFnQjMxRCxRQUFoQjIxRCxZQUFBQSxHQUF1QnhwQixRQUFTLElBQ2xDbnNDLEVBQVEsQ0FBQyxHQUFHMjFELEVBQWdCMzFELEtBQUssRUFFakNrcUMsRUFBT2xxQyxFQUFNOEIsSUFBS04sSUFDVHNULEVBQU1wRyxLQUFLZ3BELFdBQVksRUFBQ2wyRCxFQUFJLENBQ3BDLEVBQ0dzVCxFQUFNK2dELFlBQWMsV0FDdEI3MUQsRUFBUWtxQyxHQUdOcDFCLEVBQU04Z0QsV0FBYSxJQUFRNTFELEVBQU1tc0MsT0FBUyxJQUM1Q25zQyxFQUFRQSxFQUFNLENBQUMsSUFJZDhVLEVBQU0raEQsV0FFVHJvQyxFQUFNLG9CQUFxQnh1QixDQUFLLEVBQ2hDd3VCLEVBQU0sU0FBVXh1QixDQUFLLEVBQ3JCd3VCLEVBQU0sa0JBQW1CMGIsQ0FBSSxHQUUvQnVyQixFQUFXejFELE1BQVEsR0FFbkIsSUFBSXlJLEdBQVEsQ0FDVnpJLE1BQUFBLEVBQ0FrcUMsS0FBQUEsRUFDQXlyQixnQkFBaUJBLEVBQWdCMzFELE9BRW5Dd3VCLEVBQU0sZUFBZ0IvbEIsRUFBSyxFQUMzQixNQUFNeVEsRUFBUSxTQUFBLEVBQ2RzVixFQUFNLGdCQUFpQi9sQixFQUFLLENBQzlCLENBRUEsTUFBTTB0RCxFQUFrQkEsS0FDZixDQUNMd0IsT0FBUWxDLEVBQ1J4L0IsS0FBTTYvQixFQUNOSCxnQkFBQUEsRUFDQUosY0FBQUEsRUFDQUMsZ0JBQUFBLEVBQ0E3L0MsUUFBQUEsRUFDQVosWUFBQUEsRUFDQWhDLFdBQUFBLElBSUU2a0QsRUFBV2p5RCxFQUFBQSxJQUFJd3dELEVBQWUsQ0FBRSxFQUN0Q2xrQixPQUFBQSxFQUFhMmxCLEVBQVM1M0QsS0FBSyx1dEZDOVlyQixDQUFFLGVBQUFvbkIsRUFBYyxFQUFLYyxLQUlkMnZDLEdBQVcsQ0FDdEIsUUFBUWgzRCxFQUFVQyxFQUEwQixHQUFFLENBQ3hDQSxFQUFRLElBQ0F0QyxHQUFBQSxVQUFBLElBQUlzQyxFQUFRLEVBQUUsRUFFcEIsS0FBQSxDQUFFLE1BQUF1SyxHQUFVUyxLQUNkaEwsRUFBUSxnQkFDVjdDLEdBQW1CLGNBQWdCNkMsRUFBUSxlQUV6Q0EsRUFBUSxhQUNWc21CLEdBQWV0bUIsRUFBUSxXQUFXLEVBR2hDQSxFQUFRLE1BQ0xpRyxHQUFBLFdBQVdqRyxFQUFRLElBQUksRUFHeEIsTUFBQWczRCxFQUFtQmgzRCxFQUFRLGtCQUFvQixHQUNyRCxVQUFXVyxLQUFPRSxHQUFZLENBRTVCLE1BQU1vMkQsRUFBTUQsRUFBaUJyMkQsQ0FBRyxHQUFLRSxHQUFXRixDQUFHLEVBQy9DWixFQUFBLFVBQVVZLEVBQUtzMkQsQ0FBRyxDQUN2QixDQUVEM2pELEdBQWMsU0FBV3ZULEVBQUksU0FFN0JxTyxHQUFNLFFBQU8sRUFFYnJPLEVBQUksT0FBTyxpQkFBaUIsTUFBUXJDLEdBQUEsVUFBVSxJQUFHLEVBRTNDNk0sRUFBQTRkLEdBQWEsT0FBUW5vQixFQUFRLE1BQU0sRUFDekNrM0QsR0FBbUJsM0QsRUFBUSxNQUFNLENBQ25DLEdBR0YsU0FBU2szRCxHQUFtQnA0RCxFQUFxQixTQUMzQ2IsRUFBQWEsR0FBQSxZQUFBQSxFQUFRLE1BQVIsWUFBQWIsRUFBYSxnQkFBaUIsSUFDaEMsUUFBUSxLQUNOO0FBQUEseUVBQ21FLENBR3pFLENDdERBLFNBQVN1RSxHQUFLMjBELEVBQVMsQ0FDbkIsTUFBTUMsRUFBSyxVQUFVLFVBQ3JCLE9BQUlELElBQVksS0FDQ0MsRUFBRyxRQUFRLFlBQVksRUFBSSxJQUFNQSxFQUFHLFFBQVEsTUFBTSxFQUFJLElBRWxELElBQUksT0FBTyxxQkFBcUIsRUFDeEMsS0FBS0EsQ0FBRSxFQUNMLFdBQVcsT0FBTyxFQUFLLEdBRXZCLEdBR0pBLEVBQUcsUUFBUUQsQ0FBTyxFQUFJLEVBRXJDLENBRUEsTUFBTUUsR0FBTSxDQUNSLFNBQVcsQ0FDUCxJQUFJQyxFQUFNLEVBQ1YsTUFBTUMsRUFBUyxtQkFBbUIsS0FBSyxVQUFVLFNBQVMsRUFDcERDLEVBQVUsQ0FBQyxDQUFDLFVBQVUsVUFBVSxNQUFNLGNBQWMsRUFDcERDLEVBQUssVUFBVSxVQUFVLFFBQVEsU0FBUyxFQUVoRCxPQUFJRixJQUNBRCxFQUFNLE9BQU8sT0FBTyxFQUFFLEdBRXRCLFVBQVUsV0FBVyxRQUFRLFNBQVMsSUFBTSxLQUM1Q0EsRUFBTSxJQUVORSxHQUFXQyxJQUFPLEtBQ2xCSCxFQUFNLElBR0hBLElBQVEsRUFDbEIsRUFFRCxTQUFXLENBQ1AsTUFBTyxPQUFPLEtBQUssVUFBVSxTQUFTLENBQ3pDLEVBRUQsZ0JBQWlCbnZELEVBQU0sQ0FDbkIsTUFBTXV2RCxFQUFNLFNBRVosR0FBSSxPQUFPLE1BQVEsT0FBTyxLQUFPLE9BQU8sSUFBSSxnQkFBaUIsQ0FDekQsTUFBTUMsRUFBVSxJQUFJLEtBQUssQ0FBQ0QsRUFBTXZ2RCxDQUFJLEVBQUcsQ0FBRSxLQUFNLFVBQVUsQ0FBRSxFQUMzRCxPQUFPLElBQUksZ0JBQWdCd3ZELENBQU8sQ0FDOUMsS0FDWSxPQUFPLHFDQUF1Q0QsRUFBTSxtQkFBbUJ2dkQsQ0FBSSxDQUVsRixFQUVELFNBQVV5dkQsRUFBVXp2RCxFQUFNLENBQ3RCLEdBQUkzRixHQUFJLElBQUksR0FBS0EsR0FBSSxJQUFJLEVBQUksR0FBSSxDQUU3QixNQUFNcTFELEVBQU8sT0FBTyxJQUFJLEtBQUssY0FBZSxRQUFRLEVBQ3BEQSxFQUFLLFNBQVMsUUFBVSxRQUN4QkEsRUFBSyxTQUFTLE1BQU0xdkQsQ0FBSSxFQUN4QjB2RCxFQUFLLFNBQVMsUUFDZEEsRUFBSyxTQUFTLFlBQVksU0FBVUQsRUFBVyxNQUFNLEVBQ3JEQyxFQUFLLE1BQUssQ0FDdEIsU0FBbUJyMUQsR0FBSSxJQUFJLElBQU0sSUFBTSxLQUFLLFFBQVMsR0FBSSxLQUFLLFVBQVcsQ0FDN0QsTUFBTWsxRCxFQUFNLFNBQ05DLEVBQVUsSUFBSSxLQUFLLENBQUNELEVBQU12dkQsQ0FBSSxFQUFHLENBQUUsS0FBTSxVQUFVLENBQUUsRUFDM0QsVUFBVSxXQUFXd3ZELEVBQVNDLEVBQVcsTUFBTSxDQUMzRCxLQUFlLENBQ0gsTUFBTUUsRUFBTyxTQUFTLGNBQWMsR0FBRyxFQUN2Q0EsRUFBSyxTQUFXRixFQUFXLE9BQzNCRSxFQUFLLEtBQU8sS0FBSyxnQkFBZ0IzdkQsQ0FBSSxFQUNyQyxTQUFTLEtBQUssWUFBWTJ2RCxDQUFJLEVBQzlCQSxFQUFLLE1BQUssRUFDVixTQUFTLEtBQUssWUFBWUEsQ0FBSSxDQUNqQyxDQUNKLENBQ0wsRUN4RU1DLEdBQVU7QUFBQSxFQUNWQyxHQUFhLENBQUNDLEVBQVNyd0QsRUFBSyxDQUFFLFVBQUFzd0QsRUFBVyxPQUFBQyxDQUFNLElBQU8sQ0FDeEQsTUFBTUMsRUFBT3h3RCxFQUFJLElBQUkrTSxHQUNad2pELEdBRUx4akQsRUFBTyxPQUFPQSxHQUFTLFNBQVdBLEVBQUssUUFBUSxLQUFNLEdBQUcsRUFBSUEsRUFDckQsSUFBSUEsQ0FBSSxLQUhLQSxDQUl2QixFQUNEc2pELEVBQVEsS0FBS0csRUFBSyxLQUFLRixDQUFTLENBQUMsQ0FDckMsRUFFTXZmLEdBQVcsQ0FDYixVQUFXLElBQ1gsT0FBUSxFQUNaLEVBRWUsU0FBUzBlLEdBQUlsb0QsRUFBU2twRCxFQUFPcjRELEVBQVNzNEQsRUFBVyxHQUFPLENBQ25FdDRELEVBQVUsT0FBTyxPQUFPLENBQUUsRUFBRTI0QyxHQUFVMzRDLENBQU8sRUFDN0MsSUFBSXU0RCxFQUNKLE1BQU1OLEVBQVUsQ0FBQSxFQUNWandELEVBQVMsQ0FBQSxFQUVmLE9BQUltSCxHQUNBb3BELEVBQWNwcEQsRUFBUSxJQUFJOFQsR0FDbEIsT0FBT0EsR0FBTSxTQUFpQkEsR0FDN0JxMUMsR0FDRHR3RCxFQUFPLEtBQUssT0FBT2liLEVBQUUsTUFBVSxJQUFjQSxFQUFFLE1BQVFBLEVBQUUsSUFBSSxFQUUxREEsRUFBRSxLQUNaLEVBQ0dqYixFQUFPLE9BQVMsR0FBR2d3RCxHQUFXQyxFQUFTandELEVBQVFoSSxDQUFPLElBRTFEdTRELEVBQWMsQ0FBQSxFQUNkRixFQUFNLFFBQVFwMUMsR0FBSyxDQUNWLE1BQU0sUUFBUUEsQ0FBQyxJQUNoQnMxQyxFQUFjQSxFQUFZLE9BQU8sT0FBTyxLQUFLdDFDLENBQUMsQ0FBQyxFQUUvRCxDQUFTLEVBQ0dzMUMsRUFBWSxPQUFTLElBQ3JCQSxFQUFjQSxFQUFZLE9BQU8sQ0FBQ3I1RCxFQUFPeUcsRUFBTzZ5RCxJQUFTQSxFQUFLLFFBQVF0NUQsQ0FBSyxJQUFNeUcsQ0FBSyxFQUNqRjJ5RCxHQUFVTixHQUFXQyxFQUFTTSxFQUFhdjRELENBQU8sSUFJM0QsTUFBTSxRQUFRcTRELENBQUssR0FDbkJBLEVBQU0sUUFBUXp3RCxHQUFPLENBQ1osTUFBTSxRQUFRQSxDQUFHLElBQ2xCQSxFQUFNMndELEVBQVksSUFBSTUxQyxHQUFNLE9BQU8vYSxFQUFJK2EsQ0FBQyxFQUFNLElBQWMvYSxFQUFJK2EsQ0FBQyxFQUFJLEVBQUcsR0FFNUVxMUMsR0FBV0MsRUFBU3J3RCxFQUFLNUgsQ0FBTyxDQUM1QyxDQUFTLEVBRUVpNEQsRUFBUSxLQUFLRixFQUFPLENBQy9CLENDOUNBLDBFQUVDLFNBQVVVLEVBQU0sQ0FLYixHQUZBQSxFQUFLLElBQU1BLEVBQUssS0FBT0EsRUFBSyxVQUV4QkEsRUFBSyxNQUFRQSxFQUFLLElBQ2xCLEdBQUksQ0FDQSxJQUFJLEtBQ0osTUFDWixNQUFvQixDQUFFLENBS2xCLElBQUlDLEVBQWNELEVBQUssYUFBZUEsRUFBSyxtQkFBcUJBLEVBQUssZ0JBQW1CLFNBQVNBLEVBQU0sQ0FDL0YsSUFDSUUsRUFBWSxTQUFTcDFCLEVBQVEsQ0FDekIsT0FBTyxPQUFPLFVBQVUsU0FBUyxLQUFLQSxDQUFNLEVBQUUsTUFBTSxvQkFBb0IsRUFBRSxDQUFDLENBQzlFLEVBQ0NxMUIsRUFBa0IsVUFBdUIsQ0FDdkMsS0FBSyxLQUFPLEVBQ2YsRUFDQ0MsRUFBVyxTQUFjbGtELEVBQU1wUyxFQUFNdTJELEVBQVUsQ0FDN0MsS0FBSyxLQUFPbmtELEVBQ1osS0FBSyxLQUFPQSxFQUFLLE9BQ2pCLEtBQUssS0FBT3BTLEVBQ1osS0FBSyxTQUFXdTJELENBQ25CLEVBQ0NDLEVBQVlILEVBQWdCLFVBQzVCSSxFQUFXSCxFQUFTLFVBQ3BCSSxFQUFpQlIsRUFBSyxlQUN0QlMsRUFBZ0IsU0FBUzMyRCxFQUFNLENBQzdCLEtBQUssS0FBTyxLQUFLLEtBQUssS0FBT0EsQ0FBSSxDQUNwQyxFQUNDNDJELEVBQ0UsOEhBRUYsTUFBTSxHQUFHLEVBQ1RDLEVBQWVELEVBQWMsT0FDN0JFLEVBQVdaLEVBQUssS0FBT0EsRUFBSyxXQUFhQSxFQUN6Q2EsRUFBeUJELEVBQVMsZ0JBQ2xDRSxFQUF5QkYsRUFBUyxnQkFDbENHLEVBQU1ILEVBQ05JLEVBQU9oQixFQUFLLEtBQ1ppQixFQUFPakIsRUFBSyxLQUVaa0IsRUFBY2xCLEVBQUssWUFDbkJtQixFQUFhbkIsRUFBSyxXQUd4QixJQURBSSxFQUFTLEtBQU9HLEVBQVMsS0FBTyxHQUN6QkksS0FDSEYsRUFBYyxVQUFVQyxFQUFjQyxDQUFZLENBQUMsRUFBSUEsRUFBZSxFQUUxRSxPQUFLQyxFQUFTLGtCQUNWRyxFQUFNZixFQUFLLElBQU0sSUFFckJlLEVBQUksZ0JBQWtCLFNBQVNLLEVBQU0sQ0FDakMsSUFDSXQzRCxFQUFPczNELEVBQUssS0FDVkMsRUFLTixHQUhJdjNELElBQVMsT0FDVEEsRUFBTyw0QkFFUHMzRCxhQUFnQmhCLEVBRWhCLE9BREFpQixFQUFrQixRQUFVdjNELEVBQ3hCczNELEVBQUssV0FBYSxTQUNYQyxFQUFrQixXQUFhRCxFQUFLLEtBQ3BDQSxFQUFLLFdBQWEsTUFDbEJDLEVBQWtCLElBQU0sbUJBQW1CRCxFQUFLLElBQUksRUFDekRKLEVBQ0tLLEVBQWtCLFdBQWFMLEVBQUtJLEVBQUssSUFBSSxFQUU3Q0MsRUFBa0IsSUFBTSxtQkFBbUJELEVBQUssSUFBSSxFQUU1RCxHQUFJUCxFQUNQLE9BQU9BLEVBQXVCLEtBQUtELEVBQVVRLENBQUksQ0FFckUsRUFDWUwsRUFBSSxnQkFBa0IsU0FBU08sRUFBWSxDQUNuQ0EsRUFBVyxVQUFVLEVBQUcsQ0FBQyxJQUFNLFNBQVdSLEdBQzFDQSxFQUF1QixLQUFLRixFQUFVVSxDQUFVLENBRXBFLEVBQ1loQixFQUFVLE9BQVMsU0FBU3BrRCxFQUFtQixDQUMzQyxJQUFJcWxELEVBQUssS0FBSyxLQUVkLEdBQUlKLElBQWVqbEQsYUFBZ0JnbEQsR0FBZWhsRCxhQUFnQmlsRCxHQUFhLENBTzNFLFFBTEkzNkIsRUFBTSxHQUNKZzdCLEVBQU0sSUFBSUwsRUFBV2psRCxDQUFJLEVBQ3pCeFIsRUFBSSxFQUNKKzJELEVBQVVELEVBQUksT0FFYjkyRCxFQUFJKzJELEVBQVMvMkQsSUFDaEI4N0IsR0FBTyxPQUFPLGFBQWFnN0IsRUFBSTkyRCxDQUFDLENBQUMsRUFFckM2MkQsRUFBRyxLQUFLLzZCLENBQUcsQ0FDL0IsU0FBMkIwNUIsRUFBVWhrRCxDQUFJLElBQU0sUUFBVWdrRCxFQUFVaGtELENBQUksSUFBTSxPQUN6RCxHQUFJc2tELEVBQWdCLENBQ2hCLElBQUlrQixFQUFLLElBQUlsQixFQUNiZSxFQUFHLEtBQUtHLEVBQUcsbUJBQW1CeGxELENBQUksQ0FBQyxDQUMzRCxLQUV3QixPQUFNLElBQUl1a0QsRUFBYyxrQkFBa0IsT0FFdkN2a0QsYUFBZ0Jra0QsRUFDbkJsa0QsRUFBSyxXQUFhLFVBQVkra0QsRUFDOUJNLEVBQUcsS0FBS04sRUFBSy9rRCxFQUFLLElBQUksQ0FBQyxFQUNoQkEsRUFBSyxXQUFhLE1BQ3pCcWxELEVBQUcsS0FBSyxtQkFBbUJybEQsRUFBSyxJQUFJLENBQUMsRUFDOUJBLEVBQUssV0FBYSxPQUN6QnFsRCxFQUFHLEtBQUtybEQsRUFBSyxJQUFJLEdBR2pCLE9BQU9BLEdBQVMsV0FDaEJBLEdBQVEsSUFHWnFsRCxFQUFHLEtBQUssU0FBUyxtQkFBbUJybEQsQ0FBSSxDQUFDLENBQUMsRUFFOUQsRUFDWW9rRCxFQUFVLFFBQVUsU0FBU3gyRCxFQUFNLENBQy9CLE9BQUssVUFBVSxTQUNYQSxFQUFPLE1BRUosSUFBSXMyRCxFQUFTLEtBQUssS0FBSyxLQUFLLEVBQUUsRUFBR3QyRCxFQUFNLEtBQUssQ0FDbkUsRUFDWXcyRCxFQUFVLFNBQVcsVUFBVyxDQUM1QixNQUFPLHNCQUN2QixFQUNZQyxFQUFTLE1BQVEsU0FBUzMxQyxFQUFPKzJDLEVBQUs3M0QsRUFBTSxDQUN4QyxJQUFJcEUsRUFBTyxVQUFVLE9BQ3JCLE9BQUlBLEVBQU8sSUFDUG9FLEVBQU8sTUFFSixJQUFJczJELEVBQ1AsS0FBSyxLQUFLLE1BQU14MUMsRUFBT2xsQixFQUFPLEVBQUlpOEQsRUFBTSxLQUFLLEtBQUssTUFBTSxFQUN0RDczRCxFQUNBLEtBQUssUUFDM0IsQ0FDQSxFQUNZeTJELEVBQVMsU0FBVyxVQUFXLENBQzNCLE1BQU8sZUFDdkIsRUFDWUEsRUFBUyxNQUFRLFVBQVcsQ0FDeEIsS0FBSyxLQUFPLEtBQUssS0FBSyxPQUFTLENBQy9DLEVBQ21CSixDQUNuQixFQUFVSCxDQUFJLEVBRVZBLEVBQUssS0FBTyxTQUFjNEIsRUFBV3I2RCxFQUFTLENBQzFDLElBQUl1QyxFQUFPdkMsR0FBV0EsRUFBUSxNQUFRLEdBQ2xDczZELEVBQVUsSUFBSTVCLEVBQ2xCLEdBQUkyQixFQUNBLFFBQVNsM0QsRUFBSSxFQUFHNjdCLEVBQU1xN0IsRUFBVSxPQUFRbDNELEVBQUk2N0IsRUFBSzc3QixJQUM3Q20zRCxFQUFRLE9BQU9ELEVBQVVsM0QsQ0FBQyxDQUFDLEVBR25DLE9BQU9tM0QsRUFBUSxRQUFRLzNELENBQUksQ0FDbkMsQ0FDQSxHQUFFLE9BQU8sS0FBUyxLQUFlLE1BQVEsT0FBTyxPQUFXLEtBQWUsUUFBVThELFdBQUssU0FBV0EsVUFBSSxzQ0NsTHZHLFNBQVNJLEVBQUVnSCxFQUFFLENBQTJGQSxFQUFDLENBQTZDLEdBQUdwSCxHQUFLLFVBQVUsQ0FBYyxTQUFTb0gsRUFBRWhILEVBQUVnSCxFQUFFLENBQUMsT0FBbUIsT0FBT0EsRUFBcEIsSUFBc0JBLEVBQUUsQ0FBQyxRQUFRLEVBQUUsRUFBWSxPQUFPQSxHQUFqQixXQUFxQixRQUFRLEtBQUssb0RBQW9ELEVBQUVBLEVBQUUsQ0FBQyxRQUFRLENBQUNBLENBQUMsR0FBR0EsRUFBRSxTQUFTLDZFQUE2RSxLQUFLaEgsRUFBRSxJQUFJLEVBQUUsSUFBSSxLQUFLLENBQUMsU0FBU0EsQ0FBQyxFQUFFLENBQUMsS0FBS0EsRUFBRSxJQUFJLENBQUMsRUFBRUEsQ0FBQyxDQUFDLFNBQVNnYyxFQUFFaGMsRUFBRWdILEVBQUVnVixFQUFFLENBQUMsSUFBSXBiLEVBQUUsSUFBSSxlQUFlQSxFQUFFLEtBQUssTUFBTVosQ0FBQyxFQUFFWSxFQUFFLGFBQWEsT0FBT0EsRUFBRSxPQUFPLFVBQVUsQ0FBQ2t6RCxFQUFFbHpELEVBQUUsU0FBU29HLEVBQUVnVixDQUFDLENBQUMsRUFBRXBiLEVBQUUsUUFBUSxVQUFVLENBQUMsUUFBUSxNQUFNLHlCQUF5QixDQUFDLEVBQUVBLEVBQUUsS0FBSSxDQUFFLENBQUMsU0FBU0EsRUFBRVosRUFBRSxDQUFDLElBQUlnSCxFQUFFLElBQUksZUFBZUEsRUFBRSxLQUFLLE9BQU9oSCxFQUFFLEVBQUUsRUFBRSxHQUFHLENBQUNnSCxFQUFFLE1BQU0sTUFBUyxDQUFFLENBQUEsTUFBTyxNQUFLQSxFQUFFLFFBQVEsS0FBS0EsRUFBRSxNQUFNLENBQUMsU0FBU3RILEVBQUVNLEVBQUUsQ0FBQyxHQUFHLENBQUNBLEVBQUUsY0FBYyxJQUFJLFdBQVcsT0FBTyxDQUFDLENBQUMsTUFBUyxDQUFDLElBQUlnSCxFQUFFLFNBQVMsWUFBWSxhQUFhLEVBQUVBLEVBQUUsZUFBZSxRQUFRLEdBQUcsR0FBRyxPQUFPLEVBQUUsRUFBRSxFQUFFLEdBQUcsR0FBRyxHQUFHLEdBQUcsR0FBRyxHQUFHLEVBQUUsSUFBSSxFQUFFaEgsRUFBRSxjQUFjZ0gsQ0FBQyxDQUFDLENBQUMsQ0FBQyxJQUFJdkcsRUFBWSxPQUFPLFFBQWpCLFVBQXlCLE9BQU8sU0FBUyxPQUFPLE9BQWlCLE9BQU8sTUFBakIsVUFBdUIsS0FBSyxPQUFPLEtBQUssS0FBZSxPQUFPc3pELElBQWpCLFVBQXlCQSxHQUFPLFNBQVNBLEdBQU9BLEdBQU8sT0FBTy96RCxFQUFFUyxFQUFFLFdBQVcsWUFBWSxLQUFLLFVBQVUsU0FBUyxHQUFHLGNBQWMsS0FBSyxVQUFVLFNBQVMsR0FBRyxDQUFDLFNBQVMsS0FBSyxVQUFVLFNBQVMsRUFBRXF6RCxFQUFFcnpELEVBQUUsU0FBbUIsT0FBTyxRQUFqQixVQUF5QixTQUFTQSxFQUFFLFVBQVUsQ0FBRSxFQUFDLGFBQWEsa0JBQWtCLFdBQVcsQ0FBQ1QsRUFBRSxTQUFTZ0gsRUFBRThzRCxFQUFFanZDLEVBQUUsQ0FBQyxJQUFJbm9CLEVBQUUrRCxFQUFFLEtBQUtBLEVBQUUsVUFBVXV6RCxFQUFFLFNBQVMsY0FBYyxHQUFHLEVBQUVGLEVBQUVBLEdBQUc5c0QsRUFBRSxNQUFNLFdBQVdndEQsRUFBRSxTQUFTRixFQUFFRSxFQUFFLElBQUksV0FBcUIsT0FBT2h0RCxHQUFqQixVQUFvQmd0RCxFQUFFLEtBQUtodEQsRUFBRWd0RCxFQUFFLFNBQVMsU0FBUyxPQUFPdDBELEVBQUVzMEQsQ0FBQyxFQUFFcHpELEVBQUVvekQsRUFBRSxJQUFJLEVBQUVoNEMsRUFBRWhWLEVBQUU4c0QsRUFBRWp2QyxDQUFDLEVBQUVubEIsRUFBRXMwRCxFQUFFQSxFQUFFLE9BQU8sUUFBUSxJQUFJQSxFQUFFLEtBQUt0M0QsRUFBRSxnQkFBZ0JzSyxDQUFDLEVBQUUsV0FBVyxVQUFVLENBQUN0SyxFQUFFLGdCQUFnQnMzRCxFQUFFLElBQUksQ0FBQyxFQUFFLEdBQUcsRUFBRSxXQUFXLFVBQVUsQ0FBQ3QwRCxFQUFFczBELENBQUMsQ0FBQyxFQUFFLENBQUMsRUFBRSxFQUFFLHFCQUFxQixVQUFVLFNBQVMsRUFBRUYsRUFBRWp2QyxFQUFFLENBQUMsR0FBR2l2QyxFQUFFQSxHQUFHLEVBQUUsTUFBTSxXQUFxQixPQUFPLEdBQWpCLFNBQW1CLFVBQVUsaUJBQWlCOXNELEVBQUUsRUFBRTZkLENBQUMsRUFBRWl2QyxDQUFDLFVBQVVsekQsRUFBRSxDQUFDLEVBQUVvYixFQUFFLEVBQUU4M0MsRUFBRWp2QyxDQUFDLE1BQU0sQ0FBQyxJQUFJbm9CLEVBQUUsU0FBUyxjQUFjLEdBQUcsRUFBRUEsRUFBRSxLQUFLLEVBQUVBLEVBQUUsT0FBTyxTQUFTLFdBQVcsVUFBVSxDQUFDZ0QsRUFBRWhELENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxFQUFFLFNBQVNzSyxFQUFFcEcsRUFBRWxCLEVBQUVvMEQsRUFBRSxDQUFDLEdBQUdBLEVBQUVBLEdBQUcsS0FBSyxHQUFHLFFBQVEsRUFBRUEsSUFBSUEsRUFBRSxTQUFTLE1BQU1BLEVBQUUsU0FBUyxLQUFLLFVBQVUsa0JBQTRCLE9BQU85c0QsR0FBakIsU0FBbUIsT0FBT2dWLEVBQUVoVixFQUFFcEcsRUFBRWxCLENBQUMsRUFBRSxJQUFJbWxCLEVBQStCN2QsRUFBRSxPQUEvQiwyQkFBb0N0SyxFQUFFLGVBQWUsS0FBSytELEVBQUUsV0FBVyxHQUFHQSxFQUFFLE9BQU91ekQsRUFBRSxlQUFlLEtBQUssVUFBVSxTQUFTLEVBQUUsSUFBSUEsR0FBR252QyxHQUFHbm9CLEdBQUdzRCxJQUFpQixPQUFPLFdBQXBCLElBQStCLENBQUMsSUFBSWtjLEVBQUUsSUFBSSxXQUFXQSxFQUFFLFVBQVUsVUFBVSxDQUFDLElBQUlsYyxFQUFFa2MsRUFBRSxPQUFPbGMsRUFBRWcwRCxFQUFFaDBELEVBQUVBLEVBQUUsUUFBUSxlQUFlLHVCQUF1QixFQUFFOHpELEVBQUVBLEVBQUUsU0FBUyxLQUFLOXpELEVBQUUsU0FBU0EsRUFBRTh6RCxFQUFFLElBQUksRUFBRTUzQyxFQUFFLGNBQWNsVixDQUFDLENBQUMsS0FBSyxDQUFDLElBQUlzYSxFQUFFN2dCLEVBQUUsS0FBS0EsRUFBRSxVQUFVd3pELEVBQUUzeUMsRUFBRSxnQkFBZ0J0YSxDQUFDLEVBQUU4c0QsRUFBRUEsRUFBRSxTQUFTRyxFQUFFLFNBQVMsS0FBS0EsRUFBRUgsRUFBRSxLQUFLLFdBQVcsVUFBVSxDQUFDeHlDLEVBQUUsZ0JBQWdCMnlDLENBQUMsQ0FBQyxFQUFFLEdBQUcsQ0FBQyxDQUFDLEdBQUd4ekQsRUFBRSxPQUFPcXpELEVBQUUsT0FBT0EsRUFBK0JuMEQsRUFBQSxRQUFlbTBELENBQUUsQ0FBQywwQ0NBaHBGLDZEQUlBLElBQUlJLEdBQU8sQ0FBQSxFQUNYQSxHQUFLLFFBQVUsU0FDYyxJQUFBQyxHQUFlLEtBRXhDQyxHQUFhLENBQUUsSUFBSyxJQUFLLElBQUssSUFBSyxJQUFLLEtBQU0sS0FBTSxLQUFNLEtBQU0sS0FBTSxLQUFNLEtBQU0sS0FBTSxLQUFNLEtBRTlGQyxHQUFTLENBQ0wsRUFBYSxLQUNiLEVBQVksTUFDWixFQUFZLE1BQ1osR0FBWSxJQUNaLElBQWMsSUFDZCxJQUFjLElBQ2QsSUFBYSxLQUNiLElBQWMsSUFDZCxJQUFjLElBQ2QsSUFBYSxLQUNiLElBQWEsS0FDYixJQUFhLEtBQ2IsSUFBYSxLQUNiLElBQWEsS0FDYixJQUFhLEtBQ2IsSUFBYSxLQUNiLElBQWMsSUFDZCxJQUFhLEtBQ2IsSUFBYSxLQUNiLEdBQWEsSUFDckIsRUFFSUMsR0FBVyxTQUFTNzNELEVBQWUsQ0FBSzIzRCxHQUFXLFFBQVEzM0QsQ0FBRSxHQUFLLEtBQVkwM0QsR0FBZUUsR0FBTSxDQUFDLEVBQUk1M0QsSUFDNUcsU0FBUzgzRCxJQUFhLENBQUVELEdBQVMsSUFBSSxDQUFJLENBRXpDLElBQUlFLEdBQVMsU0FBUy8zRCxFQUFlLENBQXlCNjNELEdBQVM3M0QsQ0FBRSxHQUN6RSxTQUFTZzRELElBQVcsQ0FBRUQsR0FBTyxJQUFJLEVBQUdELEdBQVksQ0FBRyxDQUVuRCxTQUFTRyxHQUFXeG1ELEVBQW1DLENBQWdDLFFBQTFCeE4sRUFBc0IsQ0FBRSxFQUFVaEUsRUFBSSxFQUFHNjdCLEVBQU1ycUIsRUFBSyxPQUFReFIsRUFBSTY3QixFQUFLLEVBQUU3N0IsRUFBR2dFLEVBQUVoRSxDQUFDLEVBQUl3UixFQUFLLFdBQVd4UixDQUFDLEVBQUcsT0FBT2dFLENBQUksQ0FFN0ssU0FBU2kwRCxHQUFZem1ELEVBQTRCLENBRWhELFFBREl4TixFQUFzQixDQUFBLEVBQ2xCaEUsRUFBSSxFQUFHQSxFQUFLd1IsRUFBSyxRQUFRLEVBQUksRUFBRXhSLEVBQUdnRSxFQUFFaEUsQ0FBQyxFQUFJLE9BQU8sYUFBYXdSLEVBQUssV0FBVyxFQUFFeFIsQ0FBQyxHQUFLd1IsRUFBSyxXQUFXLEVBQUV4UixFQUFFLENBQUMsR0FBRyxFQUFFLEVBQ3ZILE9BQU9nRSxFQUFFLEtBQUssRUFBRSxDQUNqQixDQUNBLFNBQVNrMEQsR0FBWTFtRCxFQUE0QixDQUVoRCxRQURJeE4sRUFBc0IsQ0FBQSxFQUNsQmhFLEVBQUksRUFBR0EsRUFBS3dSLEVBQUssUUFBUSxFQUFJLEVBQUV4UixFQUFHZ0UsRUFBRWhFLENBQUMsRUFBSSxPQUFPLGFBQWF3UixFQUFLLFdBQVcsRUFBRXhSLEVBQUUsQ0FBQyxHQUFLd1IsRUFBSyxXQUFXLEVBQUV4UixDQUFDLEdBQUcsRUFBRSxFQUN2SCxPQUFPZ0UsRUFBRSxLQUFLLEVBQUUsQ0FDakIsQ0FFQSxJQUFJbTBELEdBQVEsU0FBUzNtRCxFQUE0QixDQUNoRCxJQUFJNG1ELEVBQUs1bUQsRUFBSyxXQUFXLENBQUMsRUFBRzZtRCxFQUFLN21ELEVBQUssV0FBVyxDQUFDLEVBQ25ELE9BQUc0bUQsR0FBTSxLQUFRQyxHQUFNLElBQWFKLEdBQVl6bUQsRUFBSyxNQUFNLENBQUMsQ0FBQyxFQUMxRDRtRCxHQUFNLEtBQVFDLEdBQU0sSUFBYUgsR0FBWTFtRCxFQUFLLE1BQU0sQ0FBQyxDQUFDLEVBQzFENG1ELEdBQU0sTUFBZTVtRCxFQUFLLE1BQU0sQ0FBQyxFQUM3QkEsQ0FDUixFQUVJOG1ELEdBQVcsU0FBY3Y4QixFQUF5QixDQUFFLE9BQU8sT0FBTyxhQUFhQSxDQUFDLEdBQ2hGdzhCLEdBQVcsU0FBY3g4QixFQUF5QixDQUFFLE9BQU8sT0FBTyxhQUFhQSxDQUFDLEdBRWhGeThCLEdBb0JBQyxHQUFhLG9FQUNqQixTQUFTQyxHQUFjbHRDLEVBQU8sQ0FHNUIsUUFGSXhuQixFQUFJLEdBQ0pvMEQsRUFBSyxFQUFHQyxFQUFLLEVBQUdNLEVBQUssRUFBR0MsRUFBSyxFQUFHQyxFQUFLLEVBQUdDLEVBQUssRUFBR0MsRUFBSyxFQUNoRC80RCxFQUFJLEVBQUdBLEVBQUl3ckIsRUFBTSxRQUN4QjRzQyxFQUFLNXNDLEVBQU0sV0FBV3hyQixHQUFHLEVBQ3pCNDRELEVBQUtSLEdBQU0sRUFDWEMsRUFBSzdzQyxFQUFNLFdBQVd4ckIsR0FBRyxFQUN6QjY0RCxHQUFNVCxFQUFLLElBQU0sRUFBSUMsR0FBTSxFQUMzQk0sRUFBS250QyxFQUFNLFdBQVd4ckIsR0FBRyxFQUN6Qjg0RCxHQUFNVCxFQUFLLEtBQU8sRUFBSU0sR0FBTSxFQUM1QkksRUFBS0osRUFBSyxHQUNOLE1BQU1OLENBQUUsRUFDVlMsRUFBS0MsRUFBSyxHQUNELE1BQU1KLENBQUUsSUFDakJJLEVBQUssSUFFUC8wRCxHQUFLeTBELEdBQVcsT0FBT0csQ0FBRSxFQUFJSCxHQUFXLE9BQU9JLENBQUUsRUFBSUosR0FBVyxPQUFPSyxDQUFFLEVBQUlMLEdBQVcsT0FBT00sQ0FBRSxFQUVuRyxPQUFPLzBELENBQ1QsQ0FDQSxTQUFTZzFELEdBQWN4dEMsRUFBTyxDQUM1QixJQUFJeG5CLEVBQUksR0FDSm8wRCxFQUFLLEVBQUdDLEVBQUssRUFBR00sRUFBSyxFQUFHQyxFQUFLLEVBQUdDLEVBQUssRUFBR0MsRUFBSyxFQUFHQyxFQUFLLEVBQ3pEdnRDLEVBQVFBLEVBQU0sUUFBUSxlQUFnQixFQUFFLEVBQ3hDLFFBQVN4ckIsRUFBSSxFQUFHQSxFQUFJd3JCLEVBQU0sUUFDeEJvdEMsRUFBS0gsR0FBVyxRQUFRanRDLEVBQU0sT0FBT3hyQixHQUFHLENBQUMsRUFDekM2NEQsRUFBS0osR0FBVyxRQUFRanRDLEVBQU0sT0FBT3hyQixHQUFHLENBQUMsRUFDekNvNEQsRUFBS1EsR0FBTSxFQUFJQyxHQUFNLEVBQ3JCNzBELEdBQUssT0FBTyxhQUFhbzBELENBQUUsRUFDM0JVLEVBQUtMLEdBQVcsUUFBUWp0QyxFQUFNLE9BQU94ckIsR0FBRyxDQUFDLEVBQ3pDcTRELEdBQU1RLEVBQUssS0FBTyxFQUFJQyxHQUFNLEVBQ3hCQSxJQUFPLEtBQ1Q5MEQsR0FBSyxPQUFPLGFBQWFxMEQsQ0FBRSxHQUU3QlUsRUFBS04sR0FBVyxRQUFRanRDLEVBQU0sT0FBT3hyQixHQUFHLENBQUMsRUFDekMyNEQsR0FBTUcsRUFBSyxJQUFNLEVBQUlDLEVBQ2pCQSxJQUFPLEtBQ1QvMEQsR0FBSyxPQUFPLGFBQWEyMEQsQ0FBRSxHQUcvQixPQUFPMzBELENBQ1QsQ0FDQSxJQUFJaTFELEdBQXdCLFVBQVcsQ0FBRSxPQUFPLE9BQU8sT0FBVyxLQUFlLE9BQU8sUUFBWSxLQUFlLE9BQU8sUUFBUSxTQUFhLEtBQWUsQ0FBQyxDQUFDLFFBQVEsU0FBUyxJQUFLLElBRWxMQyxHQUE0QixVQUFXLENBQzFDLEdBQUcsT0FBTyxPQUFXLElBQWEsQ0FDakMsSUFBSUMsRUFBTyxDQUFDLE9BQU8sS0FDbkIsR0FBRyxDQUFDQSxFQUFNLEdBQUksQ0FBRSxPQUFPLEtBQUssTUFBTyxNQUFNLENBQUksTUFBVSxDQUFFQSxFQUFPLEVBQU8sQ0FDdkUsT0FBT0EsRUFBTyxTQUFTckMsRUFBS3NDLEVBQUssQ0FBRSxPQUFRQSxFQUFPLElBQUksT0FBT3RDLEVBQUtzQyxDQUFHLEVBQUksSUFBSSxPQUFPdEMsQ0FBRyxDQUFFLEVBQUssT0FBTyxLQUFLLEtBQUssTUFBTSxDQUNySCxDQUNELE9BQU8sVUFBVyxDQUFBLENBQ25CLElBR0EsU0FBU3VDLEdBQVl4OUIsRUFBZ0IsQ0FFcEMsT0FBR285QixHQUFnQixPQUFPLE1BQVEsT0FBTyxNQUFNcDlCLENBQUcsRUFBSSxJQUFJLE9BQU9BLENBQUcsRUFDN0QsT0FBTyxXQUFjLElBQWMsSUFBSSxXQUFXQSxDQUFHLEVBQUksSUFBSSxNQUFNQSxDQUFHLENBRTlFLENBRUEsU0FBU3k5QixHQUFlejlCLEVBQWdCLENBRXZDLE9BQUdvOUIsR0FBZ0IsT0FBTyxZQUFjLE9BQU8sWUFBWXA5QixDQUFHLEVBQUksSUFBSSxPQUFPQSxDQUFHLEVBQ3pFLE9BQU8sV0FBYyxJQUFjLElBQUksV0FBV0EsQ0FBRyxFQUFJLElBQUksTUFBTUEsQ0FBRyxDQUU5RSxDQUVBLElBQUkwOUIsR0FBTSxTQUFhbDJELEVBQXNCLENBQzVDLE9BQUc0MUQsR0FBZ0JDLEdBQVk3MUQsRUFBRyxRQUFRLEVBQ25DQSxFQUFFLE1BQU0sRUFBRSxFQUFFLElBQUksU0FBUzA0QixFQUF3QixDQUFFLE9BQU9BLEVBQUUsV0FBVyxDQUFDLEVBQUksR0FBTyxDQUFBLENBQzNGLEVBRUEsU0FBU3k5QixHQUFLbjJELEVBQXNCLENBQ25DLEdBQUcsT0FBTyxZQUFnQixJQUFhLE9BQU9rMkQsR0FBSWwyRCxDQUFDLEVBRW5ELFFBREl5ekQsRUFBTSxJQUFJLFlBQVl6ekQsRUFBRSxNQUFNLEVBQUdpeUQsRUFBTyxJQUFJLFdBQVd3QixDQUFHLEVBQ3JEOTJELEVBQUUsRUFBR0EsR0FBR3FELEVBQUUsT0FBUSxFQUFFckQsRUFBR3MxRCxFQUFLdDFELENBQUMsRUFBSXFELEVBQUUsV0FBV3JELENBQUMsRUFBSSxJQUM1RCxPQUFPODJELENBQ1IsQ0FFQSxTQUFTMkMsR0FBSWpvRCxFQUF5QixDQUNyQyxHQUFHLE1BQU0sUUFBUUEsQ0FBSSxFQUFHLE9BQU9BLEVBQUssSUFBSSxTQUFTOE4sRUFBRyxDQUFFLE9BQU8sT0FBTyxhQUFhQSxDQUFDLENBQUksQ0FBQSxFQUFFLEtBQUssRUFBRSxFQUNqRSxRQUExQnRiLEVBQXNCLENBQUEsRUFBWWhFLEVBQUksRUFBR0EsRUFBSXdSLEVBQUssT0FBUSxFQUFFeFIsRUFBR2dFLEVBQUVoRSxDQUFDLEVBQUksT0FBTyxhQUFhd1IsRUFBS3hSLENBQUMsQ0FBQyxFQUFHLE9BQU9nRSxFQUFFLEtBQUssRUFBRSxDQUN6SCxDQUVBLFNBQVMwMUQsR0FBSWxvRCxFQUF1QyxDQUNuRCxHQUFHLE9BQU8sV0FBZSxJQUFhLE1BQU0sSUFBSSxNQUFNLGFBQWEsRUFDbkUsT0FBTyxJQUFJLFdBQVdBLENBQUksQ0FDM0IsQ0FFQSxTQUFTbW9ELEdBQUtub0QsRUFBbUQsQ0FDaEUsR0FBRyxPQUFPLFlBQWUsSUFBYSxNQUFNLElBQUksTUFBTSxhQUFhLEVBQ25FLEdBQUdBLGFBQWdCLFlBQWEsT0FBT21vRCxHQUFLLElBQUksV0FBV25vRCxDQUFJLENBQUMsRUFHaEUsUUFESXhOLEVBQUksSUFBSSxNQUFNd04sRUFBSyxNQUFNLEVBQ3JCeFIsRUFBSSxFQUFHQSxFQUFJd1IsRUFBSyxPQUFRLEVBQUV4UixFQUFHZ0UsRUFBRWhFLENBQUMsRUFBSXdSLEVBQUt4UixDQUFDLEVBQ2xELE9BQU9nRSxDQUNSLENBRUEsSUFBSTQxRCxHQUFVWCxHQUFVLFNBQVNZLEVBQU0sQ0FBRSxPQUFPLE9BQU8sT0FBT0EsRUFBSyxJQUFJLFNBQVMvQyxFQUFLLENBQUUsT0FBTyxPQUFPLFNBQVNBLENBQUcsRUFBSUEsRUFBTW9DLEdBQVlwQyxDQUFHLENBQUUsQ0FBRSxDQUFDLEdBQU8sU0FBUytDLEVBQU0sQ0FDcEssR0FBRyxPQUFPLFdBQWUsSUFBYSxDQUNyQyxJQUFJNzVELEVBQUksRUFBRzg1RCxFQUFTLEVBQ3BCLElBQUk5NUQsRUFBSSxFQUFHQSxFQUFJNjVELEVBQUssT0FBUSxFQUFFNzVELEVBQUc4NUQsR0FBVUQsRUFBSzc1RCxDQUFDLEVBQUUsT0FDbkQsSUFBSWdFLEVBQUksSUFBSSxXQUFXODFELENBQU0sRUFDekJqK0IsRUFBTSxFQUNWLElBQUk3N0IsRUFBSSxFQUFHODVELEVBQVMsRUFBRzk1RCxFQUFJNjVELEVBQUssT0FBUUMsR0FBVWorQixFQUFLLEVBQUU3N0IsRUFFeEQsR0FEQTY3QixFQUFNZytCLEVBQUs3NUQsQ0FBQyxFQUFFLE9BQ1g2NUQsRUFBSzc1RCxDQUFDLFlBQWEsV0FBWWdFLEVBQUUsSUFBSTYxRCxFQUFLNzVELENBQUMsRUFBRzg1RCxDQUFNLE1BQ2xELElBQUcsT0FBT0QsRUFBSzc1RCxDQUFDLEdBQUssU0FBWSxLQUFNLE1BQ3ZDZ0UsRUFBRSxJQUFJLElBQUksV0FBVzYxRCxFQUFLNzVELENBQUMsQ0FBQyxFQUFHODVELENBQU0sRUFFM0MsT0FBTzkxRCxDQUNQLENBQ0QsTUFBTyxDQUFFLEVBQUMsT0FBTyxNQUFNLENBQUEsRUFBSTYxRCxFQUFLLElBQUksU0FBUy9DLEVBQUssQ0FBRSxPQUFPLE1BQU0sUUFBUUEsQ0FBRyxFQUFJQSxFQUFNLEdBQUcsTUFBTSxLQUFLQSxDQUFHLENBQUksQ0FBQSxDQUFDLENBQzdHLEVBRUEsU0FBU2lELEdBQVdqRixFQUFvQixDQUd2QyxRQUZJa0YsRUFBTSxDQUFFLEVBQUVDLEVBQU8sRUFBR0MsRUFBSXBGLEVBQVEsT0FBUyxJQUN6Qzl3RCxFQUFJcTFELEdBQVl2RSxFQUFRLE9BQVMsR0FBRyxFQUNoQ3FGLEVBQU8sRUFBR0EsRUFBT3JGLEVBQVEsT0FBUSxFQUFFcUYsRUFBTSxDQUNoRCxJQUFJNzZDLEVBQUl3MUMsRUFBUSxXQUFXcUYsQ0FBSSxFQUMvQixHQUFHNzZDLEVBQUksSUFBTXRiLEVBQUVpMkQsR0FBTSxFQUFJMzZDLFVBQ2pCQSxFQUFJLEtBQ1h0YixFQUFFaTJELEdBQU0sRUFBSyxJQUFNMzZDLEdBQUcsRUFBRyxHQUN6QnRiLEVBQUVpMkQsR0FBTSxFQUFLLElBQUszNkMsRUFBRSxXQUNYQSxHQUFLLE9BQVVBLEVBQUksTUFBUSxDQUNwQ0EsR0FBS0EsRUFBRSxNQUFNLEdBQ2IsSUFBSXBiLEVBQUk0d0QsRUFBUSxXQUFXLEVBQUVxRixDQUFJLEVBQUUsS0FDbkNuMkQsRUFBRWkyRCxHQUFNLEVBQUssSUFBTTM2QyxHQUFHLEVBQUcsRUFDekJ0YixFQUFFaTJELEdBQU0sRUFBSyxJQUFNMzZDLEdBQUcsRUFBRyxHQUN6QnRiLEVBQUVpMkQsR0FBTSxFQUFLLElBQU0vMUQsR0FBRyxFQUFHLElBQU1vYixFQUFFLElBQUksRUFDckN0YixFQUFFaTJELEdBQU0sRUFBSyxJQUFLLzFELEVBQUUsRUFDdkIsTUFDR0YsRUFBRWkyRCxHQUFNLEVBQUssSUFBTTM2QyxHQUFHLEdBQUksR0FDMUJ0YixFQUFFaTJELEdBQU0sRUFBSyxJQUFNMzZDLEdBQUcsRUFBRyxHQUN6QnRiLEVBQUVpMkQsR0FBTSxFQUFLLElBQUszNkMsRUFBRSxHQUVsQjI2QyxFQUFPQyxJQUNURixFQUFJLEtBQUtoMkQsRUFBRSxNQUFNLEVBQUdpMkQsQ0FBSSxDQUFDLEVBQ3pCQSxFQUFPLEVBQ1BqMkQsRUFBSXExRCxHQUFZLEtBQUssRUFDckJhLEVBQUksTUFFTCxDQUNELE9BQUFGLEVBQUksS0FBS2gyRCxFQUFFLE1BQU0sRUFBR2kyRCxDQUFJLENBQUMsRUFDbEJMLEdBQVFJLENBQUcsQ0FDbkIsQ0FFQSxJQUFJSSxHQUFPLFVBQVdDLEdBQU8sbUJBcUI3QixTQUFTQyxHQUFRditCLEVBQXlCLENBQThCLFFBQXhCLzNCLEVBQUksR0FBSWhFLEVBQUkrN0IsRUFBRSxPQUFPLEVBQVMvN0IsR0FBRyxHQUFHZ0UsR0FBSyszQixFQUFFLE9BQU8vN0IsR0FBRyxFQUFHLE9BQU9nRSxDQUFJLENBQ25ILFNBQVN1MkQsR0FBS3o2QyxFQUFVNWIsRUFBd0IsQ0FBQyxJQUFJNUIsRUFBRSxHQUFHd2QsRUFBRyxPQUFPeGQsRUFBRSxRQUFRNEIsRUFBRTVCLEVBQUVrNEQsR0FBSyxJQUFJdDJELEVBQUU1QixFQUFFLE1BQU0sRUFBRUEsQ0FBRSxDQUN6RyxTQUFTbTRELEdBQUszNkMsRUFBVTViLEVBQXdCLENBQUMsSUFBSTVCLEVBQUUsR0FBR3dkLEVBQUUsT0FBT3hkLEVBQUUsUUFBUTRCLEVBQUU1QixFQUFFazRELEdBQUssSUFBSXQyRCxFQUFFNUIsRUFBRSxNQUFNLEVBQUVBLENBQUUsQ0FDeEcsU0FBU280RCxHQUFNNTZDLEVBQVU1YixFQUF3QixDQUFDLElBQUk1QixFQUFFLEdBQUd3ZCxFQUFHLE9BQU94ZCxFQUFFLFFBQVE0QixFQUFFNUIsRUFBRUEsRUFBRWs0RCxHQUFLLElBQUl0MkQsRUFBRTVCLEVBQUUsTUFBTSxDQUFFLENBQzFHLFNBQVNxNEQsR0FBTzc2QyxFQUFVNWIsRUFBd0IsQ0FBQyxJQUFJNUIsRUFBRSxHQUFHLEtBQUssTUFBTXdkLENBQUMsRUFBRyxPQUFPeGQsRUFBRSxRQUFRNEIsRUFBRTVCLEVBQUVrNEQsR0FBSyxJQUFJdDJELEVBQUU1QixFQUFFLE1BQU0sRUFBRUEsQ0FBRSxDQUN2SCxTQUFTczRELEdBQU85NkMsRUFBVTViLEVBQXdCLENBQUMsSUFBSTVCLEVBQUUsR0FBR3dkLEVBQUcsT0FBT3hkLEVBQUUsUUFBUTRCLEVBQUU1QixFQUFFazRELEdBQUssSUFBSXQyRCxFQUFFNUIsRUFBRSxNQUFNLEVBQUVBLENBQUUsQ0FDM0csSUFBSXU0RCxHQUFxQixLQUFLLElBQUksRUFBRSxFQUFFLEVBQ3RDLFNBQVNDLEdBQU1oN0MsRUFBVTViLEVBQXdCLENBQUMsR0FBRzRiLEVBQUUrNkMsSUFBTy82QyxFQUFFLENBQUMrNkMsR0FBTyxPQUFPRixHQUFPNzZDLEVBQUU1YixDQUFDLEVBQUcsSUFBSWxFLEVBQUksS0FBSyxNQUFNOGYsQ0FBQyxFQUFHLE9BQU84NkMsR0FBTzU2RCxFQUFFa0UsQ0FBQyxDQUFJLENBRXhJLFNBQVM2MkQsR0FBYzEzRCxFQUFjckQsRUFBMkIsQ0FBRSxPQUFBQSxFQUFJQSxHQUFLLEVBQVVxRCxFQUFFLFFBQVUsRUFBSXJELElBQU1xRCxFQUFFLFdBQVdyRCxDQUFDLEVBQUUsTUFBUSxNQUFRcUQsRUFBRSxXQUFXckQsRUFBRSxDQUFDLEVBQUUsTUFBUSxNQUFRcUQsRUFBRSxXQUFXckQsRUFBRSxDQUFDLEVBQUUsTUFBUSxNQUFRcUQsRUFBRSxXQUFXckQsRUFBRSxDQUFDLEVBQUUsTUFBUSxNQUFRcUQsRUFBRSxXQUFXckQsRUFBRSxDQUFDLEVBQUUsTUFBUSxNQUFRcUQsRUFBRSxXQUFXckQsRUFBRSxDQUFDLEVBQUUsTUFBUSxLQUFPcUQsRUFBRSxXQUFXckQsRUFBRSxDQUFDLEVBQUUsTUFBUSxHQUFNLENBQ3BWLElBQUlnN0QsR0FBaUMsQ0FDcEMsQ0FBQyxNQUFPLFFBQVEsRUFDaEIsQ0FBQyxNQUFPLFFBQVEsRUFDaEIsQ0FBQyxNQUFPLFNBQVMsRUFDakIsQ0FBQyxNQUFPLFdBQVcsRUFDbkIsQ0FBQyxNQUFPLFVBQVUsRUFDbEIsQ0FBQyxNQUFPLFFBQVEsRUFDaEIsQ0FBQyxNQUFPLFVBQVUsQ0FDbkIsRUFDSUMsR0FBbUMsQ0FDdEMsQ0FBQyxJQUFLLE1BQU8sU0FBUyxFQUN0QixDQUFDLElBQUssTUFBTyxVQUFVLEVBQ3ZCLENBQUMsSUFBSyxNQUFPLE9BQU8sRUFDcEIsQ0FBQyxJQUFLLE1BQU8sT0FBTyxFQUNwQixDQUFDLElBQUssTUFBTyxLQUFLLEVBQ2xCLENBQUMsSUFBSyxNQUFPLE1BQU0sRUFDbkIsQ0FBQyxJQUFLLE1BQU8sTUFBTSxFQUNuQixDQUFDLElBQUssTUFBTyxRQUFRLEVBQ3JCLENBQUMsSUFBSyxNQUFPLFdBQVcsRUFDeEIsQ0FBQyxJQUFLLE1BQU8sU0FBUyxFQUN0QixDQUFDLElBQUssTUFBTyxVQUFVLEVBQ3ZCLENBQUMsSUFBSyxNQUFPLFVBQVUsQ0FDeEIsRUFDQSxTQUFTQyxHQUFlNTRELEVBQVcsQ0FDbEMsT0FBSUEsSUFBR0EsRUFBSSxJQUNYQSxFQUFFLENBQUMsRUFBSSxVQUNQQSxFQUFFLENBQUMsRUFBSSxJQUNQQSxFQUFFLENBQUMsRUFBSSxPQUNQQSxFQUFFLENBQUMsRUFBSSxRQUNQQSxFQUFFLENBQUMsRUFBSSxXQUNQQSxFQUFFLENBQUMsRUFBSSxLQUNQQSxFQUFFLEVBQUUsRUFBRyxRQUNQQSxFQUFFLEVBQUUsRUFBRyxXQUNQQSxFQUFFLEVBQUUsRUFBRyxRQUNQQSxFQUFFLEVBQUUsRUFBRyxVQUNQQSxFQUFFLEVBQUUsRUFBRyxTQUNQQSxFQUFFLEVBQUUsRUFBRyxXQUNQQSxFQUFFLEVBQUUsRUFBRyxRQUNQQSxFQUFFLEVBQUUsRUFBRyxTQUNQQSxFQUFFLEVBQUUsRUFBRyxhQUNQQSxFQUFFLEVBQUUsRUFBRyxnQkFDUEEsRUFBRSxFQUFFLEVBQUcsT0FDUEEsRUFBRSxFQUFFLEVBQUcsVUFDUEEsRUFBRSxFQUFFLEVBQUcsY0FDUEEsRUFBRSxFQUFFLEVBQUcsaUJBQ1BBLEVBQUUsRUFBRSxFQUFHLHNCQUNQQSxFQUFFLEVBQUUsRUFBRyxzQkFDUEEsRUFBRSxFQUFFLEVBQUcsMkJBQ1BBLEVBQUUsRUFBRSxFQUFHLFFBQ1BBLEVBQUUsRUFBRSxFQUFHLFlBQ1BBLEVBQUUsRUFBRSxFQUFHLFNBQ1BBLEVBQUUsRUFBRSxFQUFHLFdBQ1BBLEVBQUUsRUFBRSxFQUFHLElBQ1BBLEVBQUUsRUFBRSxFQUFHLDJCQUNBQSxDQUNSLENBRUEsSUFBSTY0RCxHQUFZLENBQ2YsRUFBSSxVQUNKLEVBQUksSUFDSixFQUFJLE9BQ0osRUFBSSxRQUNKLEVBQUksV0FDSixFQUFJLEtBQ0osR0FBSSxRQUNKLEdBQUksV0FDSixHQUFJLFFBQ0osR0FBSSxVQUNKLEdBQUksU0FDSixHQUFJLFdBQ0osR0FBSSxRQUNKLEdBQUksU0FDSixHQUFJLGFBQ0osR0FBSSxnQkFDSixHQUFJLE9BQ0osR0FBSSxVQUNKLEdBQUksY0FDSixHQUFJLGlCQUNKLEdBQUksc0JBQ0osR0FBSSxzQkFDSixHQUFJLDJCQUNKLEdBQUksUUFDSixHQUFJLFlBQ0osR0FBSSxTQUNKLEdBQUksV0FDSixHQUFJLElBQ0osR0FBSSwwQkFDTCxFQUtJQyxHQUFrQixDQUNyQixFQUFJLEdBQUksRUFBSSxHQUFJLEVBQUksR0FBSSxFQUFJLEdBRTVCLEdBQUssRUFBRyxHQUFLLEVBQUcsR0FBSyxFQUFHLEdBQUssRUFFN0IsR0FBSSxHQUFJLEdBQUksR0FBSSxHQUFJLEdBQUksR0FBSSxHQUFJLEdBQUksR0FFcEMsR0FBSSxHQUFJLEdBQUksR0FBSSxHQUFJLEdBQUksR0FBSSxHQUFJLEdBQUksR0FDcEMsR0FBSSxHQUFJLEdBQUksR0FBSSxHQUFJLEdBQUksR0FBSSxHQUM1QixHQUFLLEVBQUcsR0FBSyxFQUFHLEdBQUssRUFBRyxHQUFLLEVBRTdCLEdBQUssRUFBRyxHQUFJLEdBQ1osR0FBSSxHQUFJLEdBQUksR0FBSSxHQUFJLEdBQ3BCLEdBQUksR0FBSSxHQUFJLEdBQUksR0FBSSxHQUFJLEdBQUksR0FDNUIsR0FBSSxHQUFJLEdBQUksR0FBSSxHQUFJLEdBQ3BCLEdBQUksR0FBSSxHQUFJLEdBQUksR0FBSSxHQUNwQixHQUFJLENBQ0wsRUFJSUMsR0FBa0IsQ0FFckIsRUFBSSw0QkFDSixHQUFJLDRCQUdKLEVBQUksaUNBQ0osR0FBSSxpQ0FHSixFQUFJLGtDQUNKLEdBQUksa0NBR0osRUFBSSx1Q0FDSixHQUFJLHVDQUdKLEdBQUksOENBR0osR0FBSSx1REFHSixHQUFJLHNEQUdKLEdBQUksOERBQ0wsRUFFQSxTQUFTQyxHQUFTdi9CLEVBQWN3L0IsRUFBY0MsRUFBc0MsQ0FNbkYsUUFMSUMsRUFBTTEvQixFQUFJLEVBQUksR0FBSyxFQUNuQjIvQixFQUFJMy9CLEVBQUkwL0IsRUFDUkUsRUFBTSxFQUFHQyxFQUFNLEVBQUdDLEVBQUksRUFDdEJDLEVBQU0sRUFBR0MsRUFBTSxFQUFHQyxFQUFJLEVBQ3RCQyxFQUFJLEtBQUssTUFBTVAsQ0FBQyxFQUNkSyxFQUFNUixJQUNYVSxFQUFJLEtBQUssTUFBTVAsQ0FBQyxFQUNoQkcsRUFBSUksRUFBSUwsRUFBTUQsRUFDZEssRUFBSUMsRUFBSUYsRUFBTUQsRUFDVixFQUFBSixFQUFJTyxFQUFLLFFBQ2JQLEVBQUksR0FBS0EsRUFBSU8sR0FDYk4sRUFBTUMsRUFBS0EsRUFBTUMsRUFDakJDLEVBQU1DLEVBQUtBLEVBQU1DLEVBR2xCLEdBREdBLEVBQUlULElBQVFRLEVBQU1SLEdBQUtTLEVBQUlGLEVBQUtELEVBQUlGLElBQWNLLEVBQUlELEVBQUtGLEVBQUlELElBQy9ELENBQUNKLEVBQU8sTUFBTyxDQUFDLEVBQUdDLEVBQU1JLEVBQUdHLENBQUMsRUFDaEMsSUFBSUUsRUFBSSxLQUFLLE1BQU1ULEVBQU1JLEVBQUVHLENBQUMsRUFDNUIsTUFBTyxDQUFDRSxFQUFHVCxFQUFJSSxFQUFJSyxFQUFFRixFQUFHQSxDQUFDLENBQzFCLENBQ0EsU0FBU0csR0FBb0JyOEMsRUFBYTVsQixFQUFja2lFLEVBQWlCLENBQ3hFLEdBQUd0OEMsRUFBSSxTQUFXQSxFQUFJLEVBQUcsT0FBTyxLQUNoQyxJQUFJcGMsRUFBUW9jLEVBQUUsRUFBSTgwQixFQUFPLEtBQUssTUFBTSxPQUFTOTBCLEVBQUlwYyxFQUFLLEVBQUcyNEQsRUFBSSxFQUN6REMsRUFBSyxDQUFBLEVBQ0x0QyxFQUFJLENBQUMsRUFBRXQyRCxFQUFNLEVBQUVreEMsRUFBTSxFQUFFLE9BQU85MEIsRUFBRXBjLEdBQU1reEMsRUFBSyxFQUFFLEVBQUUsRUFBRSxFQUFFLEVBQUUsRUFBRSxFQUFFLEVBQUUsRUFBRSxFQUFFLEVBQUUsRUFBRSxFQUFFLENBQUMsRUFPMUUsR0FORyxLQUFLLElBQUlvbEIsRUFBSSxDQUFDLEVBQUksT0FBTUEsRUFBSSxFQUFJLEdBQ2hDOS9ELEdBQVFBLEVBQUssV0FBVXdKLEdBQVEsTUFDL0JzMkQsRUFBSSxFQUFJLFFBQ1ZBLEVBQUksRUFBSSxFQUNMLEVBQUVwbEIsR0FBUSxRQUFTb2xCLEVBQUksRUFBSXBsQixFQUFPLEVBQUcsRUFBRWx4QyxFQUFNLEVBQUVzMkQsRUFBSSxJQUVwRHQyRCxJQUFTLEdBQUs0NEQsRUFBT0YsRUFBSyxDQUFDLEtBQUssR0FBRyxFQUFFLEVBQUksQ0FBQyxLQUFLLEVBQUUsRUFBRSxFQUFHQyxFQUFJLFVBQ3JEMzRELElBQVMsRUFBSTQ0RCxFQUFPRixFQUFLLENBQUMsS0FBSyxFQUFFLEVBQUUsRUFBSSxDQUFDLEtBQUssRUFBRSxDQUFDLEVBQUdDLEVBQUksTUFDMUQsQ0FDRDM0RCxFQUFPLElBQUksRUFBRUEsRUFFaEIsSUFBSVEsRUFBSSxJQUFJLEtBQUssS0FBTSxFQUFHLENBQUMsRUFDM0JBLEVBQUUsUUFBUUEsRUFBRSxRQUFPLEVBQUtSLEVBQU8sQ0FBQyxFQUNoQzQ0RCxFQUFPLENBQUNwNEQsRUFBRSxZQUFXLEVBQUlBLEVBQUUsU0FBVSxFQUFDLEVBQUVBLEVBQUUsUUFBTyxDQUFFLEVBQ25EbTRELEVBQU1uNEQsRUFBRSxTQUNMUixFQUFPLEtBQUkyNEQsR0FBT0EsRUFBTSxHQUFLLEdBQzdCRCxJQUFJQyxFQUFNRSxHQUFjcjRELEVBQUdvNEQsQ0FBSSxFQUNsQyxDQUNELE9BQUF0QyxFQUFJLEVBQUlzQyxFQUFLLENBQUMsRUFBR3RDLEVBQUksRUFBSXNDLEVBQUssQ0FBQyxFQUFHdEMsRUFBSSxFQUFJc0MsRUFBSyxDQUFDLEVBQ2hEdEMsRUFBSSxFQUFJcGxCLEVBQU8sR0FBSUEsRUFBTyxLQUFLLE1BQU1BLEVBQU8sRUFBRSxFQUM5Q29sQixFQUFJLEVBQUlwbEIsRUFBTyxHQUFJQSxFQUFPLEtBQUssTUFBTUEsRUFBTyxFQUFFLEVBQzlDb2xCLEVBQUksRUFBSXBsQixFQUNSb2xCLEVBQUksRUFBSXFDLEVBQ0RyQyxDQUNSLENBQ0EsSUFBSXdDLEdBQTJCLElBQUksS0FBSyxLQUFNLEdBQUksR0FBSSxFQUFHLEVBQUcsQ0FBQyxFQUN6REMsR0FBMkJELEdBQVksVUFDdkNFLEdBQTJCLElBQUksS0FBSyxLQUFNLEVBQUcsRUFBRyxFQUFHLEVBQUcsQ0FBQyxFQUMzRCxTQUFTQyxHQUFjNzhDLEVBQVk4OEMsRUFBa0MsQ0FDcEUsSUFBSUMsRUFBcUIvOEMsRUFBRSxVQUMzQixPQUFHODhDLEVBQVVDLEdBQVMsS0FBSyxHQUFHLEdBQUcsR0FBRyxJQUM1Qi84QyxHQUFLNDhDLEtBQWFHLEdBQVMsR0FBRyxHQUFHLEdBQUcsTUFDcENBLEdBQVNKLElBQTRCMzhDLEVBQUUsa0JBQW1CLEVBQWdCMDhDLEdBQVksa0JBQWlCLEdBQU0sT0FBVyxHQUFLLEdBQUssR0FBSyxJQUNoSixDQUlBLFNBQVNNLEdBQWtCOTRELEVBQXlCLENBQ25ELE9BQVFBLEVBQUUsUUFBUSxHQUFHLEdBQUssR0FBTUEsRUFBSUEsRUFBRSxRQUFRLDJCQUE0QixJQUFJLENBQy9FLENBR0EsU0FBUys0RCxHQUFrQi80RCxFQUF5QixDQUNuRCxPQUFHQSxFQUFFLFFBQVEsR0FBRyxHQUFLLEdBQVdBLEVBQ3pCQSxFQUFFLFFBQVEsOEJBQThCLEtBQUssRUFBRSxRQUFRLGVBQWUsT0FBTyxDQUNyRixDQUdBLFNBQVNnNUQsR0FBY2w5QyxFQUF5QixDQUMvQyxJQUFJbTlDLEVBQUtuOUMsRUFBRSxFQUFFLEdBQUcsR0FDWjliLEVBQUk4NEQsR0FBa0JoOUMsRUFBRSxRQUFRLEVBQUUsQ0FBQyxFQUNoQixPQURzQjliLEVBQUUsUUFBVWk1RCxJQUN6RGo1RCxFQUFJOGIsRUFBRSxZQUFZLEVBQUUsRUFBTTliLEVBQUUsUUFBVWk1RCxHQUFVajVELEVBQ3pDOGIsRUFBRSxjQUFjLENBQUMsQ0FDekIsQ0FHQSxTQUFTbzlDLEdBQWNwOUMsRUFBeUIsQ0FDL0MsSUFBSTliLEVBQUk4NEQsR0FBa0JoOUMsRUFBRSxRQUFRLEVBQUUsQ0FBQyxFQUN2QyxPQUFROWIsRUFBRSxRQUFVOGIsRUFBRSxFQUFFLEdBQUcsS0FBTzliLElBQU0sS0FBT0EsSUFBTSxLQUFROGIsRUFBRSxZQUFZLENBQUMsRUFBSTliLENBQ2pGLENBRUEsU0FBU201RCxHQUFnQnI5QyxFQUF5QixDQUNqRCxJQUFJczlDLEVBQUksS0FBSyxNQUFNLEtBQUssSUFBSSxLQUFLLElBQUl0OUMsQ0FBQyxDQUFDLEVBQUUsS0FBSyxNQUFNLEVBQUc5YixFQUV2RCxPQUFHbzVELEdBQUssSUFBTUEsR0FBSyxHQUFJcDVELEVBQUk4YixFQUFFLFlBQVksR0FBR3M5QyxDQUFDLEVBQ3JDLEtBQUssSUFBSUEsQ0FBQyxHQUFLLEVBQUdwNUQsRUFBSWc1RCxHQUFjbDlDLENBQUMsRUFDckNzOUMsSUFBTSxHQUFJcDVELEVBQUk4YixFQUFFLFFBQVEsRUFBRSxFQUFFLE9BQU8sRUFBRSxFQUFFLEVBQzFDOWIsRUFBSWs1RCxHQUFjcDlDLENBQUMsRUFFakJnOUMsR0FBa0JDLEdBQWtCLzRELEVBQUUsWUFBVyxDQUFFLENBQUMsQ0FDNUQsQ0FhQSxTQUFTcTVELEdBQVl2OUMsRUFBVzVsQixFQUFjLENBQzdDLE9BQU8sT0FBTzRsQixFQUFDLENBQ2QsSUFBSyxTQUFVLE9BQU9BLEVBQ3RCLElBQUssVUFBVyxPQUFPQSxFQUFJLE9BQVMsUUFDcEMsSUFBSyxTQUFVLE9BQVFBLEVBQUUsS0FBT0EsRUFBSUEsRUFBRSxTQUFTLEVBQUUsRUFBSXE5QyxHQUFnQnI5QyxDQUFDLEVBQ3RFLElBQUssWUFBYSxNQUFPLEdBQ3pCLElBQUssU0FDSixHQUFHQSxHQUFLLEtBQU0sTUFBTyxHQUNyQixHQUFHQSxhQUFhLEtBQU0sT0FBT3c5QyxHQUFXLEdBQUlYLEdBQWM3OEMsRUFBRzVsQixHQUFRQSxFQUFLLFFBQVEsRUFBR0EsQ0FBSSxDQUMxRixDQUNELE1BQU0sSUFBSSxNQUFNLHdDQUEwQzRsQixDQUFDLENBQzVELENBRUEsU0FBU3k4QyxHQUFjNzRELEVBQWVNLEVBQWdDLENBRXBFQSxFQUFFLENBQUMsR0FBSyxJQUNSLElBQUlxNEQsRUFBTTM0RCxFQUFLLFNBQ2YsT0FBR0EsRUFBTyxLQUFJMjRELEdBQU9BLEVBQU0sR0FBSyxHQUN6QkEsQ0FDVCxDQUVBLFNBQVNrQixHQUFlbitELEVBQWlCbytELEVBQWdCNThELEVBQUs2OEQsRUFBNEIsQ0FDekYsSUFBSXo1RCxFQUFFLEdBQUkwNUQsRUFBRyxFQUFHQyxFQUFHLEVBQUcxcEIsRUFBSXJ6QyxFQUFJLEVBQUdvNUQsRUFBSzRELEVBQU8sRUFDN0MsT0FBT3grRCxFQUFJLENBQ1YsSUFBSyxJQUNKNjBDLEVBQUlyekMsRUFBSSxFQUFJLElBRWIsSUFBSyxLQUNMLE9BQU80OEQsRUFBSSxPQUFNLENBQ2hCLElBQUssR0FBRyxJQUFLLEdBQUd4RCxFQUFNL2xCLEVBQUksSUFBSzJwQixFQUFPLEVBQUcsTUFDekMsUUFBUzVELEVBQU0vbEIsRUFBSSxJQUFPMnBCLEVBQU8sRUFBRyxLQUN2QyxDQUFJLE1BQ0YsSUFBSyxLQUNMLE9BQU9KLEVBQUksT0FBTSxDQUNoQixJQUFLLEdBQUcsSUFBSyxHQUFHeEQsRUFBTXA1RCxFQUFJLEVBQUdnOUQsRUFBT0osRUFBSSxPQUFRLE1BQ2hELElBQUssR0FBRyxPQUFPdkMsR0FBT3I2RCxFQUFJLEVBQUUsQ0FBQyxFQUFFLENBQUMsRUFDaEMsSUFBSyxHQUFHLE9BQU9xNkQsR0FBT3I2RCxFQUFJLEVBQUUsQ0FBQyxFQUFFLENBQUMsRUFDaEMsUUFBUyxPQUFPcTZELEdBQU9yNkQsRUFBSSxFQUFFLENBQUMsRUFBRSxDQUFDLENBQ3BDLENBQUksTUFDRixJQUFLLEtBQ0wsT0FBTzQ4RCxFQUFJLE9BQU0sQ0FDaEIsSUFBSyxHQUFHLElBQUssR0FBR3hELEVBQU1wNUQsRUFBSSxFQUFHZzlELEVBQU9KLEVBQUksT0FBUSxNQUNoRCxJQUFLLEdBQUcsT0FBT3hDLEdBQUtwNkQsRUFBSSxDQUFDLEVBQUUsQ0FBQyxFQUM1QixRQUFTLE9BQU9vNkQsR0FBS3A2RCxFQUFJLENBQUMsRUFBRSxDQUFDLENBQ2hDLENBQUksTUFDRixJQUFLLEtBQ0wsT0FBTzQ4RCxFQUFJLE9BQU0sQ0FDaEIsSUFBSyxHQUFHLElBQUssR0FBR3hELEVBQU0sR0FBR3A1RCxFQUFJLEVBQUUsSUFBSSxHQUFJZzlELEVBQU9KLEVBQUksT0FBUSxNQUMxRCxRQUFTLEtBQU0sb0JBQXNCQSxDQUN4QyxDQUFJLE1BQ0YsSUFBSyxJQUNMLE9BQU9BLEVBQUksT0FBTSxDQUNoQixJQUFLLEdBQUcsSUFBSyxHQUFHeEQsRUFBTXA1RCxFQUFJLEVBQUdnOUQsRUFBT0osRUFBSSxPQUFRLE1BQ2hELFFBQVMsS0FBTSxvQkFBc0JBLENBQ3hDLENBQUksTUFDRixJQUFLLElBQ0wsT0FBT0EsRUFBSSxPQUFNLENBQ2hCLElBQUssR0FBRyxJQUFLLEdBQUd4RCxFQUFNcDVELEVBQUksRUFBR2c5RCxFQUFPSixFQUFJLE9BQVEsTUFDaEQsUUFBUyxLQUFNLHNCQUF3QkEsQ0FDMUMsQ0FBSSxNQUNGLElBQUssS0FDSixHQUFHQSxHQUFPLEtBQU9BLEdBQU8sTUFBUUEsR0FBTyxNQUFRQSxHQUFPLE9BQVNBLEdBQU8sT0FBUSxLQUFNLHNCQUF3QkEsRUFDNUcsT0FBRzU4RCxFQUFJLElBQU0sSUFBTTQ4RCxHQUFPLEtBQU9BLEdBQU8sTUFBY2pELEdBQUszNUQsRUFBSSxFQUFHNDhELEVBQUksTUFBTSxHQUV6RUMsR0FBTyxFQUFHRSxFQUFLRixJQUFRLEVBQUksSUFBTyxJQUNoQ0UsRUFBS0YsSUFBUSxFQUFJLEdBQUssRUFDM0JDLEVBQUssS0FBSyxNQUFPQyxHQUFLLzhELEVBQUksRUFBSUEsRUFBSSxFQUFFLEVBQ2pDODhELEdBQU0sR0FBR0MsSUFBSUQsRUFBSyxHQUNsQkYsSUFBUSxJQUFZRSxJQUFPLEVBQUksSUFBTSxHQUFHQSxFQUFHQyxHQUM5QzM1RCxFQUFJdTJELEdBQUttRCxFQUFHLEVBQUlELENBQUcsRUFDaEJELElBQVEsS0FBYXg1RCxFQUFFLE9BQU8sRUFBRSxDQUFDLEVBQzdCLElBQU1BLEVBQUUsT0FBTyxFQUFFdzVELEVBQUksT0FBTyxDQUFDLElBQ3JDLElBQUssSUFDTCxPQUFPQSxFQUFHLENBQ1QsSUFBSyxNQUFPLElBQUssT0FBUXhELEVBQU1wNUQsRUFBSSxFQUFFLEdBQUdBLEVBQUksRUFBRyxNQUMvQyxJQUFLLE1BQU8sSUFBSyxPQUFRbzVELEdBQU9wNUQsRUFBSSxFQUFFLEdBQUdBLEVBQUksR0FBRyxHQUFHQSxFQUFJLEVBQUcsTUFDMUQsSUFBSyxNQUFPLElBQUssT0FBUW81RCxJQUFRcDVELEVBQUksRUFBRSxHQUFHQSxFQUFJLEdBQUcsR0FBR0EsRUFBSSxHQUFHLEdBQUcsS0FBSyxNQUFNQSxFQUFJLEVBQUVBLEVBQUksQ0FBQyxFQUFHLE1BQ3ZGLFFBQVMsS0FBTSx1QkFBeUI0OEQsQ0FDM0MsQ0FBSUksRUFBT0osRUFBSSxTQUFXLEVBQUksRUFBSSxFQUFHLE1BQ25DLElBQUssS0FDSnhELEVBQU0vbEIsRUFBRzJwQixFQUFPLEVBQUcsS0FDcEIsQ0FDRCxJQUFJQyxFQUFTRCxFQUFPLEVBQUlyRCxHQUFLUCxFQUFLNEQsQ0FBSSxFQUFJLEdBQzFDLE9BQU9DLENBQ1IsQ0FLQSxTQUFTQyxHQUFTejZELEVBQXlCLENBQzFDLElBQUk0NUQsRUFBSSxFQUNSLEdBQUc1NUQsRUFBRSxRQUFVNDVELEVBQUcsT0FBTzU1RCxFQUV6QixRQURJaTBELEVBQUtqMEQsRUFBRSxPQUFTNDVELEVBQUlqNUQsRUFBSVgsRUFBRSxPQUFPLEVBQUVpMEQsQ0FBQyxFQUNsQ0EsR0FBR2owRCxFQUFFLE9BQVFpMEQsR0FBRzJGLEVBQUdqNUQsSUFBSUEsRUFBRSxPQUFTLEVBQUksSUFBTSxJQUFNWCxFQUFFLE9BQU9pMEQsRUFBRTJGLENBQUMsRUFDcEUsT0FBT2o1RCxDQUNSLENBQ0EsSUFBSSs1RCxHQUFPLEtBQ1gsU0FBU0MsR0FBYzUrRCxFQUFpQm8rRCxFQUFnQjU4RCxFQUEwQixDQUNqRixJQUFJcTlELEVBQU9ULEVBQUksUUFBUU8sR0FBSyxFQUFFLEVBQUdHLEVBQU1WLEVBQUksT0FBU1MsRUFBSyxPQUN6RCxPQUFPRSxHQUFVLytELEVBQU02K0QsRUFBTXI5RCxFQUFNLEtBQUssSUFBSSxHQUFHLEVBQUVzOUQsQ0FBRyxDQUFDLEVBQUkxRCxHQUFLLElBQUkwRCxDQUFHLENBQ3RFLENBRUEsU0FBU0UsR0FBYWgvRCxFQUFpQm8rRCxFQUFnQjU4RCxFQUEwQixDQUVoRixRQURJcS9DLEVBQU11ZCxFQUFJLE9BQVMsRUFDakJBLEVBQUksV0FBV3ZkLEVBQUksQ0FBQyxJQUFNLElBQUksRUFBRUEsRUFDdEMsT0FBT2tlLEdBQVUvK0QsRUFBTW8rRCxFQUFJLE9BQU8sRUFBRXZkLENBQUcsRUFBR3IvQyxFQUFNLEtBQUssSUFBSSxHQUFHLEdBQUc0OEQsRUFBSSxPQUFPdmQsRUFBSSxDQUFDLENBQ2hGLENBRUEsU0FBU29lLEdBQWNiLEVBQWdCNThELEVBQTBCLENBQ2hFLElBQUlvRCxFQUNBaThDLEVBQU11ZCxFQUFJLFFBQVEsR0FBRyxFQUFJQSxFQUFJLFFBQVEsR0FBRyxFQUFJLEVBQ2hELEdBQUdBLEVBQUksTUFBTSxhQUFhLEVBQUcsQ0FDNUIsR0FBRzU4RCxHQUFPLEVBQUcsTUFBTyxTQUNmLEdBQUdBLEVBQU0sRUFBRyxNQUFPLElBQU15OUQsR0FBY2IsRUFBSyxDQUFDNThELENBQUcsRUFDckQsSUFBSTA5RCxFQUFTZCxFQUFJLFFBQVEsR0FBRyxFQUFNYyxJQUFXLEtBQUlBLEVBQU9kLEVBQUksUUFBUSxHQUFHLEdBQ3ZFLElBQUllLEVBQUssS0FBSyxNQUFNLEtBQUssSUFBSTM5RCxDQUFHLEVBQUUsS0FBSyxNQUFNLEVBQUUwOUQsRUFHL0MsR0FGR0MsRUFBSyxJQUFHQSxHQUFNRCxHQUNqQnQ2RCxHQUFLcEQsRUFBSSxLQUFLLElBQUksR0FBRzI5RCxDQUFFLEdBQUcsWUFBWXRlLEVBQUksR0FBR3FlLEVBQU9DLEdBQUlELENBQU0sRUFDM0R0NkQsRUFBRSxRQUFRLEdBQUcsSUFBTSxHQUFJLENBQ3pCLElBQUl3NkQsRUFBUSxLQUFLLE1BQU0sS0FBSyxJQUFJNTlELENBQUcsRUFBRSxLQUFLLE1BQU0sRUFHaEQsSUFGR29ELEVBQUUsUUFBUSxHQUFHLElBQU0sR0FBSUEsRUFBSUEsRUFBRSxPQUFPLENBQUMsRUFBSSxJQUFNQSxFQUFFLE9BQU8sQ0FBQyxFQUFJLE1BQVF3NkQsRUFBUXg2RCxFQUFFLE9BQU91NkQsR0FDcEZ2NkQsR0FBSyxNQUFRdzZELEVBQVFELEdBQ3BCdjZELEVBQUUsT0FBTyxFQUFFLENBQUMsSUFBTSxNQUN2QkEsRUFBSUEsRUFBRSxPQUFPLENBQUMsRUFBSUEsRUFBRSxPQUFPLEVBQUVzNkQsQ0FBTSxFQUFJLElBQU10NkQsRUFBRSxPQUFPLEVBQUVzNkQsQ0FBTSxFQUM5RHQ2RCxFQUFJQSxFQUFFLFFBQVEsYUFBYSxJQUFJLEVBQUUsUUFBUSxRQUFRLElBQUksRUFFdERBLEVBQUlBLEVBQUUsUUFBUSxNQUFNLEdBQUcsQ0FDdkIsQ0FDREEsRUFBSUEsRUFBRSxRQUFRLDJCQUEyQixTQUFTeTZELEVBQUdDLEVBQUdDLEVBQUdDLEVBQUksQ0FBRSxPQUFPRixFQUFLQyxFQUFLQyxFQUFHLE9BQU8sR0FBR04sRUFBT0MsR0FBSUQsQ0FBTSxFQUFJLElBQU1NLEVBQUcsT0FBT0wsQ0FBRSxFQUFJLEdBQU0sQ0FBQSxDQUNoSixNQUFNdjZELEVBQUlwRCxFQUFJLGNBQWNxL0MsQ0FBRyxFQUNoQyxPQUFHdWQsRUFBSSxNQUFNLFFBQVEsR0FBS3g1RCxFQUFFLE1BQU0sVUFBVSxJQUFHQSxFQUFJQSxFQUFFLE9BQU8sRUFBRUEsRUFBRSxPQUFPLENBQUMsRUFBSSxJQUFNQSxFQUFFLE9BQU9BLEVBQUUsT0FBTyxDQUFDLEdBQ2xHdzVELEVBQUksTUFBTSxLQUFLLEdBQUt4NUQsRUFBRSxNQUFNLEtBQUssSUFBR0EsRUFBSUEsRUFBRSxRQUFRLE1BQU0sR0FBRyxHQUN2REEsRUFBRSxRQUFRLElBQUksR0FBRyxDQUN6QixDQUNBLElBQUk2NkQsR0FBUSx5QkFDWixTQUFTQyxHQUFhMzdELEVBQXFCNDdELEVBQWlCQyxFQUE0QixDQUN2RixJQUFJQyxFQUFNLFNBQVM5N0QsRUFBRSxDQUFDLEVBQUUsRUFBRSxFQUFHKzdELEVBQUssS0FBSyxNQUFNSCxFQUFPRSxDQUFHLEVBQUdsMEQsRUFBTyxLQUFLLE1BQU1tMEQsRUFBR0QsQ0FBRyxFQUM5RUUsRUFBT0QsRUFBS24wRCxFQUFLazBELEVBQU1HLEVBQU1ILEVBQ2pDLE9BQU9ELEdBQVFqMEQsSUFBUyxFQUFJLEdBQUssR0FBR0EsR0FBUSxLQUFPbzBELElBQVEsRUFBSTNFLEdBQUssSUFBS3IzRCxFQUFFLENBQUMsRUFBRSxPQUFTLEVBQUlBLEVBQUUsQ0FBQyxFQUFFLE1BQU0sRUFBSXMzRCxHQUFLMEUsRUFBSWg4RCxFQUFFLENBQUMsRUFBRSxNQUFNLEVBQUlBLEVBQUUsQ0FBQyxFQUFJLElBQU1BLEVBQUUsQ0FBQyxFQUFJbzNELEdBQUs2RSxFQUFJajhELEVBQUUsQ0FBQyxFQUFFLE1BQU0sRUFDM0ssQ0FDQSxTQUFTazhELEdBQWFsOEQsRUFBcUI0N0QsRUFBaUJDLEVBQTRCLENBQ3ZGLE9BQU9BLEdBQVFELElBQVMsRUFBSSxHQUFLLEdBQUdBLEdBQVF2RSxHQUFLLElBQUtyM0QsRUFBRSxDQUFDLEVBQUUsT0FBUyxFQUFJQSxFQUFFLENBQUMsRUFBRSxNQUFNLENBQ3BGLENBQ0EsSUFBSW04RCxHQUFPLGlCQUNQQyxHQUFhLFdBQ2JDLEdBQVEsc0JBQ1osU0FBU0MsR0FBTTNqQyxFQUEyQixDQUV6QyxRQURJOTNCLEVBQUksR0FBSTA3RCxFQUNKMS9ELEVBQUksRUFBR0EsR0FBSzg3QixFQUFJLE9BQVEsRUFBRTk3QixFQUFHLE9BQVEwL0QsRUFBRzVqQyxFQUFJLFdBQVc5N0IsQ0FBQyxFQUFDLENBQ2hFLElBQUssSUFBSSxNQUNULElBQUssSUFBSWdFLEdBQUksSUFBSyxNQUNsQixJQUFLLElBQUlBLEdBQUksSUFBSyxNQUNsQixRQUFTQSxHQUFJLE9BQU8sYUFBYTA3RCxDQUFFLENBQ25DLENBQ0QsT0FBTzE3RCxDQUNSLENBQ0EsU0FBUzI3RCxHQUFJLytELEVBQWdCc0QsRUFBeUIsQ0FBRSxJQUFJMDdELEVBQUssS0FBSyxJQUFJLEdBQUcxN0QsQ0FBQyxFQUFHLE1BQU8sR0FBSSxLQUFLLE1BQU10RCxFQUFNZy9ELENBQUUsRUFBRUEsQ0FBTSxDQUN2SCxTQUFTQyxHQUFJai9ELEVBQWdCc0QsRUFBeUIsQ0FDckQsSUFBSTQ3RCxFQUFRbC9ELEVBQU0sS0FBSyxNQUFNQSxDQUFHLEVBQUdnL0QsRUFBSyxLQUFLLElBQUksR0FBRzE3RCxDQUFDLEVBQ3JELE9BQUlBLEdBQUssR0FBSyxLQUFLLE1BQU00N0QsRUFBUUYsQ0FBRSxHQUFHLE9BQWUsRUFDOUMsS0FBSyxNQUFNRSxFQUFRRixDQUFFLENBQzdCLENBQ0EsU0FBU0csR0FBTW4vRCxFQUFnQnNELEVBQXlCLENBQ3ZELE9BQUlBLEdBQUssR0FBSyxLQUFLLE9BQU90RCxFQUFJLEtBQUssTUFBTUEsQ0FBRyxHQUFHLEtBQUssSUFBSSxHQUFHc0QsQ0FBQyxDQUFDLEdBQUcsT0FDeEQsRUFFRCxDQUNSLENBQ0EsU0FBUzg3RCxHQUFJcC9ELEVBQTJCLENBQ3ZDLE9BQUdBLEVBQU0sWUFBY0EsRUFBTSxZQUFvQixJQUFJQSxHQUFPLEVBQUtBLEVBQUksRUFBTUEsRUFBSSxFQUFFLEdBQzFFLEdBQUcsS0FBSyxNQUFNQSxDQUFHLENBQ3pCLENBQ0EsU0FBU3EvRCxHQUFjN2dFLEVBQWlCbytELEVBQWdCNThELEVBQTJCLENBQ2xGLEdBQUd4QixFQUFLLFdBQVcsQ0FBQyxJQUFNLElBQU0sQ0FBQ28rRCxFQUFJLE1BQU0rQixFQUFVLEVBQUcsQ0FDdkQsSUFBSVcsRUFBTzFDLEVBQUksUUFBUSxPQUFPLEVBQUUsRUFBRSxRQUFRLE1BQU0sRUFBRSxFQUFFLFFBQVEsS0FBSyxFQUFFLEVBQ25FLE9BQUc1OEQsR0FBTyxFQUFVcS9ELEdBQWMsSUFBS0MsRUFBTXQvRCxDQUFHLEVBQ3pDLElBQU1xL0QsR0FBYyxJQUFLQyxFQUFNLENBQUN0L0QsQ0FBRyxFQUFJLEdBQzlDLENBQ0QsR0FBRzQ4RCxFQUFJLFdBQVdBLEVBQUksT0FBUyxDQUFDLElBQU0sR0FBSSxPQUFPWSxHQUFhaC9ELEVBQU1vK0QsRUFBSzU4RCxDQUFHLEVBQzVFLEdBQUc0OEQsRUFBSSxRQUFRLEdBQUcsSUFBTSxHQUFJLE9BQU9RLEdBQWM1K0QsRUFBTW8rRCxFQUFLNThELENBQUcsRUFDL0QsR0FBRzQ4RCxFQUFJLFFBQVEsR0FBRyxJQUFNLEdBQUksT0FBT2EsR0FBY2IsRUFBSzU4RCxDQUFHLEVBQ3pELEdBQUc0OEQsRUFBSSxXQUFXLENBQUMsSUFBTSxHQUFJLE1BQU8sSUFBSXlDLEdBQWM3Z0UsRUFBS28rRCxFQUFJLE9BQU9BLEVBQUksT0FBTyxDQUFDLEdBQUcsSUFBSSxFQUFFLENBQUMsRUFBRTU4RCxDQUFHLEVBQ2pHLElBQUlvRCxFQUNBYixFQUFzQmc5RCxFQUFJQyxFQUFJckIsRUFBTyxLQUFLLElBQUluK0QsQ0FBRyxFQUFHbytELEVBQU9wK0QsRUFBTSxFQUFJLElBQU0sR0FDL0UsR0FBRzQ4RCxFQUFJLE1BQU0sT0FBTyxFQUFHLE9BQU93QixFQUFPbEUsR0FBTWlFLEVBQUt2QixFQUFJLE1BQU0sRUFDMUQsR0FBR0EsRUFBSSxNQUFNLFNBQVMsRUFDckIsT0FBQXg1RCxFQUFJODJELEdBQU1sNkQsRUFBSSxDQUFDLEVBQU1vRCxJQUFNLE1BQUtBLEVBQUksSUFDN0JBLEVBQUUsT0FBU3c1RCxFQUFJLE9BQVN4NUQsRUFBSXk3RCxHQUFNakMsRUFBSSxPQUFPLEVBQUVBLEVBQUksT0FBT3g1RCxFQUFFLE1BQU0sQ0FBQyxFQUFJQSxFQUUvRSxHQUFJYixFQUFJcTZELEVBQUksTUFBTXFCLEVBQUssRUFBSSxPQUFPQyxHQUFhMzdELEVBQUc0N0QsRUFBTUMsQ0FBSSxFQUM1RCxHQUFHeEIsRUFBSSxNQUFNLFFBQVEsRUFBRyxPQUFPd0IsRUFBT2xFLEdBQU1pRSxFQUFLdkIsRUFBSSxPQUFTQSxFQUFJLFFBQVEsR0FBRyxDQUFDLEVBQzlFLEdBQUlyNkQsRUFBSXE2RCxFQUFJLE1BQU04QixFQUFJLEVBQ3JCLE9BQUF0N0QsRUFBSTI3RCxHQUFJLytELEVBQUt1QyxFQUFFLENBQUMsRUFBRSxNQUFNLEVBQUUsUUFBUSxhQUFhLE1BQU1zOEQsR0FBTXQ4RCxFQUFFLENBQUMsQ0FBQyxDQUFDLEVBQUUsUUFBUSxNQUFNLElBQUlzOEQsR0FBTXQ4RCxFQUFFLENBQUMsQ0FBQyxDQUFDLEVBQUUsUUFBUSxXQUFXLFNBQVNzN0QsRUFBSUMsRUFBSSxDQUFFLE1BQU8sSUFBTUEsRUFBS2xFLEdBQUssSUFBS2lGLEdBQWF0OEQsRUFBZSxDQUFDLENBQUMsRUFBRSxPQUFPdTdELEVBQUcsTUFBTSxDQUFFLENBQUUsRUFDaE5sQixFQUFJLFFBQVEsSUFBSSxJQUFNLEdBQUt4NUQsRUFBSUEsRUFBRSxRQUFRLE9BQU8sR0FBRyxFQUczRCxHQURBdzVELEVBQU1BLEVBQUksUUFBUSxZQUFhLElBQUksRUFDL0JyNkQsRUFBSXE2RCxFQUFJLE1BQU0sY0FBYyxFQUMvQixPQUFPd0IsRUFBT1csR0FBSVosRUFBTTU3RCxFQUFFLENBQUMsRUFBRSxNQUFNLEVBQUUsUUFBUSxrQkFBa0IsS0FBSyxFQUFFLFFBQVEsWUFBWSxLQUFLLEVBQUUsUUFBUSxPQUFPQSxFQUFFLENBQUMsRUFBRSxPQUFPLEtBQUssR0FBRyxFQUVySSxHQUFJQSxFQUFJcTZELEVBQUksTUFBTSxtQkFBbUIsRUFBSSxPQUFPd0IsRUFBT2xCLEdBQVNoRCxHQUFNaUUsRUFBSyxDQUFDLENBQUMsRUFDN0UsR0FBSTU3RCxFQUFJcTZELEVBQUksTUFBTSxtQkFBbUIsRUFDcEMsT0FBTzU4RCxFQUFNLEVBQUksSUFBTXEvRCxHQUFjN2dFLEVBQU1vK0QsRUFBSyxDQUFDNThELENBQUcsRUFBSWs5RCxHQUFTLElBQUksS0FBSyxNQUFNbDlELENBQUcsRUFBSW0vRCxHQUFNbi9ELEVBQUt1QyxFQUFFLENBQUMsRUFBRSxNQUFNLEVBQUUsRUFBSSxJQUFNbzNELEdBQUtzRixHQUFJai9ELEVBQUt1QyxFQUFFLENBQUMsRUFBRSxNQUFNLEVBQUVBLEVBQUUsQ0FBQyxFQUFFLE1BQU0sRUFFaEssR0FBSUEsRUFBSXE2RCxFQUFJLE1BQU0sVUFBVSxFQUFJLE9BQU95QyxHQUFjN2dFLEVBQUtvK0QsRUFBSSxRQUFRLFNBQVMsRUFBRSxFQUFFNThELENBQUcsRUFDdEYsR0FBSXVDLEVBQUlxNkQsRUFBSSxNQUFNLHlCQUF5QixFQUMxQyxPQUFBeDVELEVBQUlzMkQsR0FBUTJGLEdBQWM3Z0UsRUFBTW8rRCxFQUFJLFFBQVEsU0FBUyxFQUFFLEVBQUc1OEQsQ0FBRyxDQUFDLEVBQzlEdS9ELEVBQUssRUFDRTdGLEdBQVFBLEdBQVFrRCxFQUFJLFFBQVEsTUFBTSxFQUFFLENBQUMsRUFBRSxRQUFRLFFBQVEsU0FBU3poQyxFQUFFLENBQUMsT0FBT29rQyxFQUFHbjhELEVBQUUsT0FBT0EsRUFBRSxPQUFPbThELEdBQUksRUFBRXBrQyxJQUFJLElBQUksSUFBSSxFQUFHLENBQUMsQ0FBQyxFQUU5SCxHQUFHeWhDLEVBQUksTUFBTWdDLEVBQUssRUFDakIsT0FBQXg3RCxFQUFJaThELEdBQWM3Z0UsRUFBTSxhQUFjd0IsQ0FBRyxFQUNsQyxJQUFNb0QsRUFBRSxPQUFPLEVBQUUsQ0FBQyxFQUFJLEtBQU9BLEVBQUUsT0FBTyxFQUFHLENBQUMsRUFBSSxJQUFNQSxFQUFFLE9BQU8sQ0FBQyxFQUV0RSxJQUFJcThELEVBQUssR0FDVCxHQUFJbDlELEVBQUlxNkQsRUFBSSxNQUFNLDZCQUE2QixFQUM5QyxPQUFBMkMsRUFBSyxLQUFLLElBQWlCaDlELEVBQUUsQ0FBQyxFQUFTLE9BQU8sQ0FBQyxFQUMvQ2k5RCxFQUFLOUUsR0FBU3lELEVBQU0sS0FBSyxJQUFJLEdBQUdvQixDQUFFLEVBQUUsRUFBRyxFQUFLLEVBQzVDbjhELEVBQUksR0FBS2c3RCxFQUNUcUIsRUFBS2xDLEdBQVUsSUFBa0JoN0QsRUFBRSxDQUFDLEVBQVVpOUQsRUFBRyxDQUFDLENBQUMsRUFDaERDLEVBQUcsT0FBT0EsRUFBRyxPQUFPLENBQUMsR0FBSyxNQUFLQSxFQUFLQSxFQUFHLE9BQU8sRUFBRUEsRUFBRyxPQUFPLENBQUMsRUFBSSxLQUNsRXI4RCxHQUFLcThELEVBQWtCbDlELEVBQUUsQ0FBQyxFQUFXLElBQW1CQSxFQUFFLENBQUMsRUFDM0RrOUQsRUFBSzNGLEdBQU0wRixFQUFHLENBQUMsRUFBRUQsQ0FBRSxFQUNoQkUsRUFBRyxPQUFTbDlELEVBQUUsQ0FBQyxFQUFFLFNBQVFrOUQsRUFBS1osR0FBTXQ4RCxFQUFFLENBQUMsRUFBRSxPQUFPQSxFQUFFLENBQUMsRUFBRSxPQUFPazlELEVBQUcsTUFBTSxDQUFDLEVBQUlBLEdBQzdFcjhELEdBQUtxOEQsRUFDRXI4RCxFQUVSLEdBQUliLEVBQUlxNkQsRUFBSSxNQUFNLCtCQUErQixFQUNoRCxPQUFBMkMsRUFBSyxLQUFLLElBQUksS0FBSyxJQUFJaDlELEVBQUUsQ0FBQyxFQUFFLE9BQVFBLEVBQUUsQ0FBQyxFQUFFLE1BQU0sRUFBRSxDQUFDLEVBQ2xEaTlELEVBQUs5RSxHQUFTeUQsRUFBTSxLQUFLLElBQUksR0FBR29CLENBQUUsRUFBRSxFQUFHLEVBQUksRUFDcENuQixHQUFRb0IsRUFBRyxDQUFDLElBQUlBLEVBQUcsQ0FBQyxFQUFJLEdBQUssTUFBUSxLQUFPQSxFQUFHLENBQUMsRUFBSTNGLEdBQUsyRixFQUFHLENBQUMsRUFBRUQsQ0FBRSxFQUFJaDlELEVBQUUsQ0FBQyxFQUFJLElBQU1BLEVBQUUsQ0FBQyxFQUFJdTNELEdBQU0wRixFQUFHLENBQUMsRUFBRUQsQ0FBRSxFQUFHM0YsR0FBSyxJQUFLLEVBQUUyRixFQUFHLEVBQUloOUQsRUFBRSxDQUFDLEVBQUUsT0FBU0EsRUFBRSxDQUFDLEVBQUUsTUFBTSxHQUU5SixHQUFJQSxFQUFJcTZELEVBQUksTUFBTSxVQUFVLEVBRTNCLE9BREF4NUQsRUFBSTgyRCxHQUFNbDZELEVBQUssQ0FBQyxFQUNiNDhELEVBQUksUUFBVXg1RCxFQUFFLE9BQWVBLEVBQzNCeTdELEdBQU1qQyxFQUFJLE9BQU8sRUFBRUEsRUFBSSxPQUFPeDVELEVBQUUsTUFBTSxDQUFDLEVBQUlBLEVBRW5ELEdBQUliLEVBQUlxNkQsRUFBSSxNQUFNLHFCQUFxQixFQUFJLENBQzFDeDVELEVBQUksR0FBS3BELEVBQUksUUFBUSxLQUFLLElBQUl1QyxFQUFFLENBQUMsRUFBRSxPQUFPLEVBQUUsQ0FBQyxFQUFFLFFBQVEsWUFBWSxJQUFJLEVBQ3ZFZzlELEVBQUtuOEQsRUFBRSxRQUFRLEdBQUcsRUFDbEIsSUFBSXM4RCxFQUFPOUMsRUFBSSxRQUFRLEdBQUcsRUFBSTJDLEVBQUlJLEVBQU8vQyxFQUFJLE9BQVN4NUQsRUFBRSxPQUFTczhELEVBQ2pFLE9BQU9iLEdBQU1qQyxFQUFJLE9BQU8sRUFBRThDLENBQUksRUFBSXQ4RCxFQUFJdzVELEVBQUksT0FBT0EsRUFBSSxPQUFPK0MsQ0FBSSxDQUFDLENBQ2pFLENBQ0QsR0FBSXA5RCxFQUFJcTZELEVBQUksTUFBTSxvQkFBb0IsRUFDckMsT0FBQTJDLEVBQUtOLEdBQUlqL0QsRUFBS3VDLEVBQUUsQ0FBQyxFQUFFLE1BQU0sRUFDbEJ2QyxFQUFNLEVBQUksSUFBTXEvRCxHQUFjN2dFLEVBQU1vK0QsRUFBSyxDQUFDNThELENBQUcsRUFBSWs5RCxHQUFTa0MsR0FBSXAvRCxDQUFHLENBQUMsRUFBRSxRQUFRLGFBQWEsS0FBSyxFQUFFLFFBQVEsUUFBUSxTQUFTNjlELEVBQUksQ0FBRSxNQUFPLE9BQVNBLEVBQUcsT0FBUyxFQUFJbEUsR0FBSyxFQUFFLEVBQUVrRSxFQUFHLE1BQU0sRUFBSSxJQUFNQSxDQUFHLENBQUUsRUFBSSxJQUFNbEUsR0FBSzRGLEVBQUdoOUQsRUFBRSxDQUFDLEVBQUUsTUFBTSxFQUVyTyxPQUFPcTZELEVBQUcsQ0FDVCxJQUFLLGFBQWMsT0FBT3lDLEdBQWM3Z0UsRUFBTSxXQUFZd0IsQ0FBRyxFQUM3RCxJQUFLLFVBQ0wsSUFBSyxTQUNMLElBQUssUUFBUyxJQUFJbTdCLEVBQUkraEMsR0FBU2hELEdBQU1pRSxFQUFLLENBQUMsQ0FBQyxFQUFHLE9BQU9oakMsSUFBTSxJQUFNaWpDLEVBQU9qakMsRUFBSSxHQUM3RSxJQUFLLGFBQWMsT0FBT2trQyxHQUFjN2dFLEVBQU0sYUFBYXdCLENBQUcsRUFBRSxRQUFRLE9BQU8sR0FBRyxFQUNsRixJQUFLLFdBQVksT0FBT3EvRCxHQUFjN2dFLEVBQU0sV0FBV3dCLENBQUcsRUFBRSxRQUFRLE9BQU8sR0FBRyxDQUU5RSxDQUNELE1BQU0sSUFBSSxNQUFNLHVCQUF5QjQ4RCxFQUFNLEdBQUcsQ0FDbkQsQ0FDQSxTQUFTZ0QsR0FBY3BoRSxFQUFpQm8rRCxFQUFnQjU4RCxFQUEwQixDQUVqRixRQURJcS9DLEVBQU11ZCxFQUFJLE9BQVMsRUFDakJBLEVBQUksV0FBV3ZkLEVBQUksQ0FBQyxJQUFNLElBQUksRUFBRUEsRUFDdEMsT0FBT2tlLEdBQVUvK0QsRUFBTW8rRCxFQUFJLE9BQU8sRUFBRXZkLENBQUcsRUFBR3IvQyxFQUFNLEtBQUssSUFBSSxHQUFHLEdBQUc0OEQsRUFBSSxPQUFPdmQsRUFBSSxDQUFDLENBQ2hGLENBQ0EsU0FBU3dnQixHQUFlcmhFLEVBQWlCbytELEVBQWdCNThELEVBQTBCLENBQ2xGLElBQUlxOUQsRUFBT1QsRUFBSSxRQUFRTyxHQUFLLEVBQUUsRUFBR0csRUFBTVYsRUFBSSxPQUFTUyxFQUFLLE9BQ3pELE9BQU9FLEdBQVUvK0QsRUFBTTYrRCxFQUFNcjlELEVBQU0sS0FBSyxJQUFJLEdBQUcsRUFBRXM5RCxDQUFHLENBQUMsRUFBSTFELEdBQUssSUFBSTBELENBQUcsQ0FDdEUsQ0FDQSxTQUFTd0MsR0FBZWxELEVBQWdCNThELEVBQTBCLENBQ2pFLElBQUlvRCxFQUNBaThDLEVBQU11ZCxFQUFJLFFBQVEsR0FBRyxFQUFJQSxFQUFJLFFBQVEsR0FBRyxFQUFJLEVBQ2hELEdBQUdBLEVBQUksTUFBTSxhQUFhLEVBQUcsQ0FDNUIsR0FBRzU4RCxHQUFPLEVBQUcsTUFBTyxTQUNmLEdBQUdBLEVBQU0sRUFBRyxNQUFPLElBQU04L0QsR0FBZWxELEVBQUssQ0FBQzU4RCxDQUFHLEVBQ3RELElBQUkwOUQsRUFBU2QsRUFBSSxRQUFRLEdBQUcsRUFBTWMsSUFBVyxLQUFJQSxFQUFPZCxFQUFJLFFBQVEsR0FBRyxHQUN2RSxJQUFJZSxFQUFLLEtBQUssTUFBTSxLQUFLLElBQUkzOUQsQ0FBRyxFQUFFLEtBQUssTUFBTSxFQUFFMDlELEVBRy9DLEdBRkdDLEVBQUssSUFBR0EsR0FBTUQsR0FDakJ0NkQsR0FBS3BELEVBQUksS0FBSyxJQUFJLEdBQUcyOUQsQ0FBRSxHQUFHLFlBQVl0ZSxFQUFJLEdBQUdxZSxFQUFPQyxHQUFJRCxDQUFNLEVBQzNELENBQUN0NkQsRUFBRSxNQUFNLE1BQU0sRUFBRyxDQUNwQixJQUFJdzZELEVBQVEsS0FBSyxNQUFNLEtBQUssSUFBSTU5RCxDQUFHLEVBQUUsS0FBSyxNQUFNLEVBQzdDb0QsRUFBRSxRQUFRLEdBQUcsSUFBTSxHQUFJQSxFQUFJQSxFQUFFLE9BQU8sQ0FBQyxFQUFJLElBQU1BLEVBQUUsT0FBTyxDQUFDLEVBQUksTUFBUXc2RCxFQUFReDZELEVBQUUsT0FBT3U2RCxHQUNwRnY2RCxHQUFLLE1BQVF3NkQsRUFBUUQsR0FDMUJ2NkQsRUFBSUEsRUFBRSxRQUFRLE1BQU0sR0FBRyxDQUN2QixDQUNEQSxFQUFJQSxFQUFFLFFBQVEsMkJBQTJCLFNBQVN5NkQsRUFBR0MsRUFBR0MsRUFBR0MsRUFBSSxDQUFFLE9BQU9GLEVBQUtDLEVBQUtDLEVBQUcsT0FBTyxHQUFHTixFQUFPQyxHQUFJRCxDQUFNLEVBQUksSUFBTU0sRUFBRyxPQUFPTCxDQUFFLEVBQUksR0FBTSxDQUFBLENBQ2hKLE1BQU12NkQsRUFBSXBELEVBQUksY0FBY3EvQyxDQUFHLEVBQ2hDLE9BQUd1ZCxFQUFJLE1BQU0sUUFBUSxHQUFLeDVELEVBQUUsTUFBTSxVQUFVLElBQUdBLEVBQUlBLEVBQUUsT0FBTyxFQUFFQSxFQUFFLE9BQU8sQ0FBQyxFQUFJLElBQU1BLEVBQUUsT0FBT0EsRUFBRSxPQUFPLENBQUMsR0FDbEd3NUQsRUFBSSxNQUFNLEtBQUssR0FBS3g1RCxFQUFFLE1BQU0sS0FBSyxJQUFHQSxFQUFJQSxFQUFFLFFBQVEsTUFBTSxHQUFHLEdBQ3ZEQSxFQUFFLFFBQVEsSUFBSSxHQUFHLENBQ3pCLENBQ0EsU0FBUzI4RCxHQUFjdmhFLEVBQWlCbytELEVBQWdCNThELEVBQTJCLENBQ2xGLEdBQUd4QixFQUFLLFdBQVcsQ0FBQyxJQUFNLElBQU0sQ0FBQ28rRCxFQUFJLE1BQU0rQixFQUFVLEVBQUcsQ0FDdkQsSUFBSVcsRUFBTzFDLEVBQUksUUFBUSxPQUFPLEVBQUUsRUFBRSxRQUFRLE1BQU0sRUFBRSxFQUFFLFFBQVEsS0FBSyxFQUFFLEVBQ25FLE9BQUc1OEQsR0FBTyxFQUFVKy9ELEdBQWMsSUFBS1QsRUFBTXQvRCxDQUFHLEVBQ3pDLElBQU0rL0QsR0FBYyxJQUFLVCxFQUFNLENBQUN0L0QsQ0FBRyxFQUFJLEdBQzlDLENBQ0QsR0FBRzQ4RCxFQUFJLFdBQVdBLEVBQUksT0FBUyxDQUFDLElBQU0sR0FBSSxPQUFPZ0QsR0FBY3BoRSxFQUFNbytELEVBQUs1OEQsQ0FBRyxFQUM3RSxHQUFHNDhELEVBQUksUUFBUSxHQUFHLElBQU0sR0FBSSxPQUFPaUQsR0FBZXJoRSxFQUFNbytELEVBQUs1OEQsQ0FBRyxFQUNoRSxHQUFHNDhELEVBQUksUUFBUSxHQUFHLElBQU0sR0FBSSxPQUFPa0QsR0FBZWxELEVBQUs1OEQsQ0FBRyxFQUMxRCxHQUFHNDhELEVBQUksV0FBVyxDQUFDLElBQU0sR0FBSSxNQUFPLElBQUltRCxHQUFjdmhFLEVBQUtvK0QsRUFBSSxPQUFPQSxFQUFJLE9BQU8sQ0FBQyxHQUFHLElBQUksRUFBRSxDQUFDLEVBQUU1OEQsQ0FBRyxFQUNqRyxJQUFJb0QsRUFDQWIsRUFBc0JnOUQsRUFBSUMsRUFBSXJCLEVBQU8sS0FBSyxJQUFJbitELENBQUcsRUFBR28rRCxFQUFPcCtELEVBQU0sRUFBSSxJQUFNLEdBQy9FLEdBQUc0OEQsRUFBSSxNQUFNLE9BQU8sRUFBRyxPQUFPd0IsRUFBT3pFLEdBQUt3RSxFQUFLdkIsRUFBSSxNQUFNLEVBQ3pELEdBQUdBLEVBQUksTUFBTSxTQUFTLEVBQ3JCLE9BQUF4NUQsRUFBSyxHQUFHcEQsRUFBU0EsSUFBUSxJQUFHb0QsRUFBSSxJQUN6QkEsRUFBRSxPQUFTdzVELEVBQUksT0FBU3g1RCxFQUFJeTdELEdBQU1qQyxFQUFJLE9BQU8sRUFBRUEsRUFBSSxPQUFPeDVELEVBQUUsTUFBTSxDQUFDLEVBQUlBLEVBRS9FLEdBQUliLEVBQUlxNkQsRUFBSSxNQUFNcUIsRUFBSyxFQUFJLE9BQU9RLEdBQWFsOEQsRUFBRzQ3RCxFQUFNQyxDQUFJLEVBQzVELEdBQUd4QixFQUFJLE1BQU0sUUFBUSxFQUFHLE9BQU93QixFQUFPekUsR0FBS3dFLEVBQUt2QixFQUFJLE9BQVNBLEVBQUksUUFBUSxHQUFHLENBQUMsRUFDN0UsR0FBSXI2RCxFQUFJcTZELEVBQUksTUFBTThCLEVBQUksRUFFckIsT0FBQXQ3RCxHQUFLLEdBQUdwRCxHQUFLLFFBQVEsYUFBYSxNQUFNNitELEdBQU10OEQsRUFBRSxDQUFDLENBQUMsQ0FBQyxFQUFFLFFBQVEsTUFBTSxJQUFJczhELEdBQU10OEQsRUFBRSxDQUFDLENBQUMsQ0FBQyxFQUNsRmEsRUFBSUEsRUFBRSxRQUFRLFdBQVcsU0FBU3k2RCxFQUFJQyxFQUFJLENBRXpDLE1BQU8sSUFBTUEsRUFBS2xFLEdBQUssSUFBS2lGLEdBQU10OEQsRUFBRSxDQUFDLENBQUMsRUFBRSxPQUFPdTdELEVBQUcsTUFBTSxDQUFJLENBQUEsRUFDdERsQixFQUFJLFFBQVEsSUFBSSxJQUFNLEdBQUt4NUQsRUFBSUEsRUFBRSxRQUFRLE9BQU8sR0FBRyxFQUczRCxHQURBdzVELEVBQU1BLEVBQUksUUFBUSxZQUFhLElBQUksRUFDL0JyNkQsRUFBSXE2RCxFQUFJLE1BQU0sY0FBYyxFQUMvQixPQUFPd0IsR0FBUSxHQUFHRCxHQUFNLFFBQVEsa0JBQWtCLEtBQUssRUFBRSxRQUFRLFlBQVksS0FBSyxFQUFFLFFBQVEsT0FBTzU3RCxFQUFFLENBQUMsRUFBRSxPQUFPLEtBQUssR0FBRyxFQUV4SCxHQUFJQSxFQUFJcTZELEVBQUksTUFBTSxtQkFBbUIsRUFBSSxPQUFPd0IsRUFBT2xCLEdBQVUsR0FBR2lCLEdBQ3BFLEdBQUk1N0QsRUFBSXE2RCxFQUFJLE1BQU0sbUJBQW1CLEVBQ3BDLE9BQU81OEQsRUFBTSxFQUFJLElBQU0rL0QsR0FBY3ZoRSxFQUFNbytELEVBQUssQ0FBQzU4RCxDQUFHLEVBQUlrOUQsR0FBVSxHQUFHbDlELENBQUcsRUFBSyxJQUFNNDVELEdBQUssSUFBSXIzRCxFQUFFLENBQUMsRUFBRSxNQUFNLEVBRXhHLEdBQUlBLEVBQUlxNkQsRUFBSSxNQUFNLFVBQVUsRUFBSSxPQUFPbUQsR0FBY3ZoRSxFQUFLbytELEVBQUksUUFBUSxTQUFTLEVBQUUsRUFBRTU4RCxDQUFHLEVBQ3RGLEdBQUl1QyxFQUFJcTZELEVBQUksTUFBTSx5QkFBeUIsRUFDMUMsT0FBQXg1RCxFQUFJczJELEdBQVFxRyxHQUFjdmhFLEVBQU1vK0QsRUFBSSxRQUFRLFNBQVMsRUFBRSxFQUFHNThELENBQUcsQ0FBQyxFQUM5RHUvRCxFQUFLLEVBQ0U3RixHQUFRQSxHQUFRa0QsRUFBSSxRQUFRLE1BQU0sRUFBRSxDQUFDLEVBQUUsUUFBUSxRQUFRLFNBQVN6aEMsRUFBRSxDQUFDLE9BQU9va0MsRUFBR244RCxFQUFFLE9BQU9BLEVBQUUsT0FBT204RCxHQUFJLEVBQUVwa0MsSUFBSSxJQUFJLElBQUksRUFBRyxDQUFDLENBQUMsRUFFOUgsR0FBR3loQyxFQUFJLE1BQU1nQyxFQUFLLEVBQ2pCLE9BQUF4N0QsRUFBSTI4RCxHQUFjdmhFLEVBQU0sYUFBY3dCLENBQUcsRUFDbEMsSUFBTW9ELEVBQUUsT0FBTyxFQUFFLENBQUMsRUFBSSxLQUFPQSxFQUFFLE9BQU8sRUFBRyxDQUFDLEVBQUksSUFBTUEsRUFBRSxPQUFPLENBQUMsRUFFdEUsSUFBSXE4RCxFQUFLLEdBQ1QsR0FBSWw5RCxFQUFJcTZELEVBQUksTUFBTSw2QkFBNkIsRUFDOUMsT0FBQTJDLEVBQUssS0FBSyxJQUFpQmg5RCxFQUFFLENBQUMsRUFBUyxPQUFPLENBQUMsRUFDL0NpOUQsRUFBSzlFLEdBQVN5RCxFQUFNLEtBQUssSUFBSSxHQUFHb0IsQ0FBRSxFQUFFLEVBQUcsRUFBSyxFQUM1Q244RCxFQUFJLEdBQUtnN0QsRUFDVHFCLEVBQUtsQyxHQUFVLElBQWtCaDdELEVBQUUsQ0FBQyxFQUFVaTlELEVBQUcsQ0FBQyxDQUFDLEVBQ2hEQyxFQUFHLE9BQU9BLEVBQUcsT0FBTyxDQUFDLEdBQUssTUFBS0EsRUFBS0EsRUFBRyxPQUFPLEVBQUVBLEVBQUcsT0FBTyxDQUFDLEVBQUksS0FDbEVyOEQsR0FBS3E4RCxFQUFrQmw5RCxFQUFFLENBQUMsRUFBVyxJQUFtQkEsRUFBRSxDQUFDLEVBQzNEazlELEVBQUszRixHQUFNMEYsRUFBRyxDQUFDLEVBQUVELENBQUUsRUFDaEJFLEVBQUcsT0FBU2w5RCxFQUFFLENBQUMsRUFBRSxTQUFRazlELEVBQUtaLEdBQU10OEQsRUFBRSxDQUFDLEVBQUUsT0FBT0EsRUFBRSxDQUFDLEVBQUUsT0FBT2s5RCxFQUFHLE1BQU0sQ0FBQyxFQUFJQSxHQUM3RXI4RCxHQUFLcThELEVBQ0VyOEQsRUFFUixHQUFJYixFQUFJcTZELEVBQUksTUFBTSwrQkFBK0IsRUFDaEQsT0FBQTJDLEVBQUssS0FBSyxJQUFJLEtBQUssSUFBSWg5RCxFQUFFLENBQUMsRUFBRSxPQUFRQSxFQUFFLENBQUMsRUFBRSxNQUFNLEVBQUUsQ0FBQyxFQUNsRGk5RCxFQUFLOUUsR0FBU3lELEVBQU0sS0FBSyxJQUFJLEdBQUdvQixDQUFFLEVBQUUsRUFBRyxFQUFJLEVBQ3BDbkIsR0FBUW9CLEVBQUcsQ0FBQyxJQUFJQSxFQUFHLENBQUMsRUFBSSxHQUFLLE1BQVEsS0FBT0EsRUFBRyxDQUFDLEVBQUkzRixHQUFLMkYsRUFBRyxDQUFDLEVBQUVELENBQUUsRUFBSWg5RCxFQUFFLENBQUMsRUFBSSxJQUFNQSxFQUFFLENBQUMsRUFBSXUzRCxHQUFNMEYsRUFBRyxDQUFDLEVBQUVELENBQUUsRUFBRzNGLEdBQUssSUFBSyxFQUFFMkYsRUFBRyxFQUFJaDlELEVBQUUsQ0FBQyxFQUFFLE9BQVNBLEVBQUUsQ0FBQyxFQUFFLE1BQU0sR0FFOUosR0FBSUEsRUFBSXE2RCxFQUFJLE1BQU0sVUFBVSxFQUUzQixPQURBeDVELEVBQUksR0FBS3BELEVBQ040OEQsRUFBSSxRQUFVeDVELEVBQUUsT0FBZUEsRUFDM0J5N0QsR0FBTWpDLEVBQUksT0FBTyxFQUFFQSxFQUFJLE9BQU94NUQsRUFBRSxNQUFNLENBQUMsRUFBSUEsRUFFbkQsR0FBSWIsRUFBSXE2RCxFQUFJLE1BQU0sb0JBQW9CLEVBQUksQ0FDekN4NUQsRUFBSSxHQUFLcEQsRUFBSSxRQUFRLEtBQUssSUFBSXVDLEVBQUUsQ0FBQyxFQUFFLE9BQU8sRUFBRSxDQUFDLEVBQUUsUUFBUSxZQUFZLElBQUksRUFDdkVnOUQsRUFBS244RCxFQUFFLFFBQVEsR0FBRyxFQUNsQixJQUFJczhELEVBQU85QyxFQUFJLFFBQVEsR0FBRyxFQUFJMkMsRUFBSUksRUFBTy9DLEVBQUksT0FBU3g1RCxFQUFFLE9BQVNzOEQsRUFDakUsT0FBT2IsR0FBTWpDLEVBQUksT0FBTyxFQUFFOEMsQ0FBSSxFQUFJdDhELEVBQUl3NUQsRUFBSSxPQUFPQSxFQUFJLE9BQU8rQyxDQUFJLENBQUMsQ0FDakUsQ0FDRCxHQUFJcDlELEVBQUlxNkQsRUFBSSxNQUFNLG9CQUFvQixFQUNyQyxPQUFPNThELEVBQU0sRUFBSSxJQUFNKy9ELEdBQWN2aEUsRUFBTW8rRCxFQUFLLENBQUM1OEQsQ0FBRyxFQUFJazlELEdBQVMsR0FBR2w5RCxDQUFHLEVBQUUsUUFBUSxhQUFhLEtBQUssRUFBRSxRQUFRLFFBQVEsU0FBUzY5RCxFQUFJLENBQUUsTUFBTyxPQUFTQSxFQUFHLE9BQVMsRUFBSWxFLEdBQUssRUFBRSxFQUFFa0UsRUFBRyxNQUFNLEVBQUksSUFBTUEsQ0FBSyxDQUFBLEVBQUksSUFBTWxFLEdBQUssRUFBRXAzRCxFQUFFLENBQUMsRUFBRSxNQUFNLEVBRWxPLE9BQU9xNkQsRUFBRyxDQUNULElBQUssVUFDTCxJQUFLLFNBQ0wsSUFBSyxRQUFTLElBQUl6aEMsRUFBSStoQyxHQUFTLEdBQUdpQixDQUFJLEVBQUcsT0FBT2hqQyxJQUFNLElBQU1pakMsRUFBT2pqQyxFQUFJLEdBQ3ZFLFFBQ0MsR0FBR3loQyxFQUFJLE1BQU0sV0FBVyxFQUFHLE9BQU9tRCxHQUFjdmhFLEVBQU1vK0QsRUFBSSxNQUFNLEVBQUVBLEVBQUksWUFBWSxHQUFHLENBQUMsRUFBRzU4RCxDQUFHLEVBQUk2K0QsR0FBTWpDLEVBQUksTUFBTUEsRUFBSSxZQUFZLEdBQUcsQ0FBQyxDQUFDLENBQ3RJLENBQ0QsTUFBTSxJQUFJLE1BQU0sdUJBQXlCQSxFQUFNLEdBQUcsQ0FDbkQsQ0FDQSxTQUFTVyxHQUFVLytELEVBQWlCbytELEVBQWdCNThELEVBQTJCLENBQzlFLE9BQVFBLEVBQUksS0FBT0EsRUFBTSsvRCxHQUFjdmhFLEVBQU1vK0QsRUFBSzU4RCxDQUFHLEVBQUlxL0QsR0FBYzdnRSxFQUFNbytELEVBQUs1OEQsQ0FBRyxDQUN0RixDQUNBLFNBQVNnZ0UsR0FBY3BELEVBQWtDLENBR3hELFFBRkl4RCxFQUF3QixDQUFBLEVBQ3hCNkcsRUFBUyxHQUNMN2dFLEVBQUksRUFBR3MzRCxFQUFJLEVBQUd0M0QsRUFBSXc5RCxFQUFJLE9BQVEsRUFBRXg5RCxFQUFHLE9BQWV3OUQsRUFBSSxXQUFXeDlELENBQUMsRUFBQyxDQUMxRSxJQUFLLElBQ0o2Z0UsRUFBUyxDQUFDQSxFQUFRLE1BQ25CLElBQUssSUFBSSxJQUFLLElBQUksSUFBSyxJQUN0QixFQUFFN2dFLEVBQUcsTUFDTixJQUFLLElBQ0pnNkQsRUFBSUEsRUFBSSxNQUFNLEVBQUl3RCxFQUFJLE9BQU9sRyxFQUFFdDNELEVBQUVzM0QsQ0FBQyxFQUNsQ0EsRUFBSXQzRCxFQUFFLENBQ1AsQ0FFRCxHQURBZzZELEVBQUlBLEVBQUksTUFBTSxFQUFJd0QsRUFBSSxPQUFPbEcsQ0FBQyxFQUMzQnVKLElBQVcsR0FBTSxNQUFNLElBQUksTUFBTSxXQUFhckQsRUFBTSx3QkFBd0IsRUFDL0UsT0FBT3hELENBQ1IsQ0FFQSxJQUFJOEcsR0FBYyxrQ0FDbEIsU0FBU0MsR0FBWXZELEVBQTRCLENBRWhELFFBREl4OUQsRUFBSSxFQUFlc2YsRUFBSSxHQUFJdGIsRUFBSSxHQUM3QmhFLEVBQUl3OUQsRUFBSSxRQUNiLE9BQVFsK0MsRUFBSWsrQyxFQUFJLE9BQU94OUQsQ0FBQyxFQUFDLENBQ3hCLElBQUssSUFBUSs2RCxHQUFjeUMsRUFBS3g5RCxDQUFDLElBQUdBLEdBQUksR0FBR0EsSUFBSyxNQUNoRCxJQUFLLElBQUssS0FBYXc5RCxFQUFJLFdBQVcsRUFBRXg5RCxDQUFDLElBQU8sSUFBTUEsRUFBSXc5RCxFQUFJLFFBQVEsQ0FBWSxFQUFFeDlELEVBQUcsTUFDdkYsSUFBSyxLQUFNQSxHQUFHLEVBQUcsTUFDakIsSUFBSyxJQUFLQSxHQUFHLEVBQUcsTUFDaEIsSUFBSyxJQUFLLEVBQUVBLEVBQUcsTUFDZixJQUFLLElBQUssSUFBSyxJQUNkLEdBQUd3OUQsRUFBSSxPQUFPeDlELEVBQUUsQ0FBQyxJQUFNLEtBQU93OUQsRUFBSSxPQUFPeDlELEVBQUUsQ0FBQyxJQUFNLElBQUssTUFBTyxHQUUvRCxJQUFLLElBQUssSUFBSyxJQUFLLElBQUssSUFBSyxJQUFLLElBQUssSUFBSyxJQUFLLElBQUssSUFFdkQsSUFBSyxJQUFLLElBQUssSUFBSyxJQUFLLElBQUssSUFBSyxJQUFLLElBQUssSUFBSyxJQUFLLElBQUssSUFBSyxJQUFLLE1BQU8sR0FDN0UsSUFBSyxJQUFLLElBQUssSUFBSyxJQUFLLElBR3hCLEdBRkd3OUQsRUFBSSxPQUFPeDlELEVBQUcsQ0FBQyxFQUFFLFlBQWEsSUFBSyxPQUNuQ3c5RCxFQUFJLE9BQU94OUQsRUFBRyxDQUFDLEVBQUUsWUFBYSxJQUFLLFNBQ25DdzlELEVBQUksT0FBT3g5RCxFQUFHLENBQUMsRUFBRSxZQUFhLElBQUssUUFBUyxNQUFPLEdBQ3RELEVBQUVBLEVBQUcsTUFDTixJQUFLLElBRUosSUFEQWdFLEVBQUlzYixFQUNFaytDLEVBQUksT0FBT3g5RCxHQUFHLElBQU0sS0FBT0EsRUFBSXc5RCxFQUFJLFFBQVF4NUQsR0FBS3c1RCxFQUFJLE9BQU94OUQsQ0FBQyxFQUNsRSxHQUFHZ0UsRUFBRSxNQUFNODhELEVBQVcsRUFBRyxNQUFPLEdBQ2hDLE1BQ0QsSUFBSyxJQUVMLElBQUssSUFBSyxJQUFLLElBQ2QsS0FBTTlnRSxFQUFJdzlELEVBQUksU0FBVyxZQUFZLFFBQVFsK0MsRUFBRWsrQyxFQUFJLE9BQU8sRUFBRXg5RCxDQUFDLENBQUMsRUFBSSxJQUFPc2YsR0FBRyxNQUFRaytDLEVBQUksT0FBT3g5RCxFQUFFLENBQUMsR0FBSyxLQUFPLEtBQUssUUFBUXc5RCxFQUFJLE9BQU94OUQsRUFBRSxDQUFDLENBQUMsRUFBRSxLQUFLLENBQ2pKLE1BQ0QsSUFBSyxJQUFLLEtBQU13OUQsRUFBSSxPQUFPLEVBQUV4OUQsQ0FBQyxJQUFNc2YsR0FBRSxDQUFjLE1BQ3BELElBQUssSUFBSyxFQUFFdGYsR0FBTXc5RCxFQUFJLE9BQU94OUQsQ0FBQyxHQUFLLEtBQU93OUQsRUFBSSxPQUFPeDlELENBQUMsR0FBSyxNQUFLLEVBQUVBLEVBQUcsTUFDckUsSUFBSyxJQUFLLElBQUssSUFBSyxFQUFFQSxFQUFHLE1BQ3pCLElBQUssSUFBSyxJQUFLLElBQUssSUFBSyxJQUFLLElBQUssSUFBSyxJQUFLLElBQUssSUFBSyxJQUFLLElBQUssSUFBSyxJQUFLLElBQUssSUFBSyxJQUNwRixLQUFNQSxFQUFJdzlELEVBQUksUUFBVSxhQUFhLFFBQVFBLEVBQUksT0FBTyxFQUFFeDlELENBQUMsQ0FBQyxFQUFJLElBQUcsQ0FBYyxNQUNsRixJQUFLLElBQUssRUFBRUEsRUFBRyxNQUNmLFFBQVMsRUFBRUEsRUFBRyxLQUNkLENBRUYsTUFBTyxFQUNSLENBRUEsU0FBU2doRSxHQUFTeEQsRUFBZ0IxOUMsRUFBVzVsQixFQUFjK21FLEVBQWlCLENBSTNFLFFBSElqSCxFQUFNLENBQUUsRUFBRWgyRCxFQUFJLEdBQUloRSxFQUFJLEVBQUdzZixFQUFJLEdBQUk0aEQsRUFBSSxJQUFLdmdELEVBQUkyMkMsRUFBR29JLEVBQ2pEeUIsRUFBRyxJQUVEbmhFLEVBQUl3OUQsRUFBSSxRQUNiLE9BQVFsK0MsRUFBSWsrQyxFQUFJLE9BQU94OUQsQ0FBQyxFQUFDLENBQ3hCLElBQUssSUFDSixHQUFHLENBQUMrNkQsR0FBY3lDLEVBQUt4OUQsQ0FBQyxFQUFHLE1BQU0sSUFBSSxNQUFNLDBCQUE0QnNmLEVBQUksT0FBUWsrQyxDQUFHLEVBQ3RGeEQsRUFBSUEsRUFBSSxNQUFNLEVBQUksQ0FBQyxFQUFFLElBQUssRUFBRSxTQUFTLEVBQUdoNkQsR0FBRyxFQUFHLE1BQy9DLElBQUssSUFDSixJQUFJZ0UsRUFBRSxJQUFJMDdELEVBQUdsQyxFQUFJLFdBQVcsRUFBRXg5RCxDQUFDLEtBQU8sSUFBTUEsRUFBSXc5RCxFQUFJLFFBQVN4NUQsR0FBSyxPQUFPLGFBQWEwN0QsQ0FBRSxFQUN4RjFGLEVBQUlBLEVBQUksTUFBTSxFQUFJLENBQUMsRUFBRSxJQUFLLEVBQUVoMkQsQ0FBQyxFQUFHLEVBQUVoRSxFQUFHLE1BQ3RDLElBQUssS0FBTSxJQUFJaTlELEVBQUlPLEVBQUksT0FBTyxFQUFFeDlELENBQUMsRUFBR3NDLEVBQUsyNkQsSUFBTSxLQUFPQSxJQUFNLElBQU9BLEVBQUksSUFDdEVqRCxFQUFJQSxFQUFJLE1BQU0sRUFBSSxDQUFDLEVBQUUxM0QsRUFBRyxFQUFFMjZELENBQUMsRUFBRyxFQUFFajlELEVBQUcsTUFDcEMsSUFBSyxJQUFLZzZELEVBQUlBLEVBQUksTUFBTSxFQUFJLENBQUMsRUFBRSxJQUFLLEVBQUUsR0FBRyxFQUFHaDZELEdBQUcsRUFBRyxNQUNsRCxJQUFLLElBQ0pnNkQsRUFBSUEsRUFBSSxNQUFNLEVBQUksQ0FBQyxFQUFFLElBQUssRUFBRWw2QyxDQUFDLEVBQUcsRUFBRTlmLEVBQUcsTUFDdEMsSUFBSyxJQUFLLElBQUssSUFDZCxHQUFHdzlELEVBQUksT0FBT3g5RCxFQUFFLENBQUMsSUFBTSxLQUFPdzlELEVBQUksT0FBT3g5RCxFQUFFLENBQUMsSUFBTSxJQUFLLENBQ3RELEdBQUcyZ0IsR0FBSSxPQUFRQSxFQUFHdzdDLEdBQW9CcjhDLEVBQUc1bEIsRUFBTXNqRSxFQUFJLE9BQU94OUQsRUFBRSxDQUFDLElBQU0sR0FBRyxFQUFNMmdCLEdBQUksTUFBTSxNQUFPLEdBQzdGcTVDLEVBQUlBLEVBQUksTUFBTSxFQUFJLENBQUMsRUFBRSxJQUFLLEVBQUV3RCxFQUFJLE9BQU94OUQsRUFBRSxDQUFDLENBQUMsRUFBR2toRSxFQUFNNWhELEVBQUd0ZixHQUFHLEVBQUcsS0FDN0QsQ0FFRixJQUFLLElBQUssSUFBSyxJQUFLLElBQUssSUFBSyxJQUFLLElBQUssSUFBSyxJQUFLLElBQUssSUFDdERzZixFQUFJQSxFQUFFLGNBRVAsSUFBSyxJQUFLLElBQUssSUFBSyxJQUFLLElBQUssSUFBSyxJQUFLLElBQUssSUFBSyxJQUFLLElBQUssSUFBSyxJQUVoRSxHQURHUSxFQUFJLEdBQ0phLEdBQUksT0FBUUEsRUFBR3c3QyxHQUFvQnI4QyxFQUFHNWxCLENBQUksRUFBTXltQixHQUFJLE1BQU0sTUFBTyxHQUM3RCxJQUFQM2MsRUFBSXNiLEVBQVMsRUFBRXRmLEVBQUl3OUQsRUFBSSxRQUFVQSxFQUFJLE9BQU94OUQsQ0FBQyxFQUFFLFlBQVcsSUFBT3NmLEdBQUd0YixHQUFHc2IsRUFDcEVBLElBQU0sS0FBTzRoRCxFQUFJLFlBQVcsSUFBTyxNQUFLNWhELEVBQUksS0FDNUNBLElBQU0sTUFBS0EsRUFBSTZoRCxHQUNsQm5ILEVBQUlBLEVBQUksTUFBTSxFQUFJLENBQUMsRUFBRTE2QyxFQUFHLEVBQUV0YixDQUFDLEVBQUdrOUQsRUFBTTVoRCxFQUFHLE1BQ3hDLElBQUssSUFBSyxJQUFLLElBQUssSUFBSyxJQUN4QixJQUFJNDhDLEVBQUUsQ0FBQyxFQUFFNThDLEVBQUcsRUFBRUEsQ0FBQyxFQU1mLEdBTEdxQixHQUFJLE9BQU1BLEVBQUd3N0MsR0FBb0JyOEMsRUFBRzVsQixDQUFJLEdBQ3hDc2pFLEVBQUksT0FBT3g5RCxFQUFHLENBQUMsRUFBRSxnQkFBa0IsT0FBWTJnQixHQUFJLE9BQU11N0MsRUFBRSxFQUFJdjdDLEVBQUcsR0FBSyxHQUFLLElBQU0sS0FBS3U3QyxFQUFFLEVBQUksSUFBS2lGLEVBQUcsSUFBSW5oRSxHQUFHLEdBQ3ZHdzlELEVBQUksT0FBT3g5RCxFQUFFLENBQUMsRUFBRSxZQUFXLElBQU8sU0FBYzJnQixHQUFJLE9BQU11N0MsRUFBRSxFQUFJdjdDLEVBQUcsR0FBSyxHQUFLLEtBQU8sTUFBTXU3QyxFQUFFLEVBQUksSUFBS2w4RCxHQUFHLEVBQUdtaEUsRUFBRyxLQUM5RzNELEVBQUksT0FBT3g5RCxFQUFFLENBQUMsRUFBRSxZQUFXLElBQU8sU0FBYzJnQixHQUFJLE9BQU11N0MsRUFBRSxFQUFJdjdDLEVBQUcsR0FBSyxHQUFLLEtBQU8sTUFBTXU3QyxFQUFFLEVBQUksSUFBS2w4RCxHQUFHLEVBQUdtaEUsRUFBRyxNQUMvR2pGLEVBQUUsRUFBSSxJQUFLLEVBQUVsOEQsR0FDakIyZ0IsR0FBSSxNQUFRdTdDLEVBQUUsSUFBTSxJQUFLLE1BQU8sR0FDbkNsQyxFQUFJQSxFQUFJLE1BQU0sRUFBSWtDLEVBQUdnRixFQUFNNWhELEVBQUcsTUFDL0IsSUFBSyxJQUVKLElBREF0YixFQUFJc2IsRUFDRWsrQyxFQUFJLE9BQU94OUQsR0FBRyxJQUFNLEtBQU9BLEVBQUl3OUQsRUFBSSxRQUFReDVELEdBQUt3NUQsRUFBSSxPQUFPeDlELENBQUMsRUFDbEUsR0FBR2dFLEVBQUUsTUFBTSxFQUFFLElBQU0sSUFBSyxLQUFNLDRCQUE4QkEsRUFBSSxJQUNoRSxHQUFHQSxFQUFFLE1BQU04OEQsRUFBVyxFQUFHLENBQ3hCLEdBQUduZ0QsR0FBSSxPQUFRQSxFQUFHdzdDLEdBQW9CcjhDLEVBQUc1bEIsQ0FBSSxFQUFNeW1CLEdBQUksTUFBTSxNQUFPLEdBQ3BFcTVDLEVBQUlBLEVBQUksTUFBTSxFQUFJLENBQUMsRUFBRSxJQUFLLEVBQUVoMkQsRUFBRSxZQUFXLENBQUUsRUFDM0NrOUQsRUFBTWw5RCxFQUFFLE9BQU8sQ0FBQyxDQUNoQixNQUFTQSxFQUFFLFFBQVEsR0FBRyxFQUFJLEtBQzFCQSxHQUFLQSxFQUFFLE1BQU0sZUFBZSxHQUFHLElBQUksQ0FBQyxHQUFHLElBQ25DKzhELEdBQVl2RCxDQUFHLElBQUd4RCxFQUFJQSxFQUFJLE1BQU0sRUFBSSxDQUFDLEVBQUUsSUFBSSxFQUFFaDJELENBQUMsSUFFbkQsTUFFRCxJQUFLLElBQ0osR0FBRzJjLEdBQU0sS0FBTSxDQUNQLElBQVAzYyxFQUFJc2IsRUFBUyxFQUFFdGYsRUFBSXc5RCxFQUFJLFNBQVdsK0MsRUFBRWsrQyxFQUFJLE9BQU94OUQsQ0FBQyxLQUFPLEtBQUtnRSxHQUFLc2IsRUFDakUwNkMsRUFBSUEsRUFBSSxNQUFNLEVBQUksQ0FBQyxFQUFFLElBQUssRUFBRWgyRCxDQUFDLEVBQUcsS0FDaEMsQ0FFRixJQUFLLElBQUssSUFBSyxJQUNQLElBQVBBLEVBQUlzYixFQUFTLEVBQUV0ZixFQUFJdzlELEVBQUksUUFBVSxZQUFZLFFBQVFsK0MsRUFBRWsrQyxFQUFJLE9BQU94OUQsQ0FBQyxDQUFDLEVBQUksSUFBSWdFLEdBQUtzYixFQUNqRjA2QyxFQUFJQSxFQUFJLE1BQU0sRUFBSSxDQUFDLEVBQUUsSUFBSyxFQUFFaDJELENBQUMsRUFBRyxNQUNqQyxJQUFLLElBQ0csSUFBUEEsRUFBSXNiLEVBQVNrK0MsRUFBSSxPQUFPLEVBQUV4OUQsQ0FBQyxJQUFNc2YsR0FBR3RiLEdBQUdzYixFQUN2QzA2QyxFQUFJQSxFQUFJLE1BQU0sRUFBSSxDQUFDLEVBQUUxNkMsRUFBRyxFQUFFdGIsQ0FBQyxFQUFHazlELEVBQU01aEQsRUFBRyxNQUN4QyxJQUFLLElBQUssRUFBRXRmLEdBQU13OUQsRUFBSSxPQUFPeDlELENBQUMsR0FBSyxLQUFPdzlELEVBQUksT0FBT3g5RCxDQUFDLEdBQUssTUFBSyxFQUFFQSxFQUFHLE1BQ3JFLElBQUssSUFBSyxJQUFLLElBQUtnNkQsRUFBSUEsRUFBSSxNQUFNLEVBQUksQ0FBQyxFQUFHaUgsSUFBTyxFQUFFLElBQUkzaEQsRUFBSSxFQUFFQSxDQUFDLEVBQUcsRUFBRXRmLEVBQUcsTUFDdEUsSUFBSyxJQUFLLElBQUssSUFBSyxJQUFLLElBQUssSUFBSyxJQUFLLElBQUssSUFBSyxJQUFLLElBQUssSUFBSyxJQUFLLElBQUssSUFBSyxJQUFLLElBQzdFLElBQVBnRSxFQUFJc2IsRUFBU3RmLEVBQUl3OUQsRUFBSSxRQUFVLGFBQWEsUUFBUUEsRUFBSSxPQUFPLEVBQUV4OUQsQ0FBQyxDQUFDLEVBQUksSUFBSWdFLEdBQUd3NUQsRUFBSSxPQUFPeDlELENBQUMsRUFDMUZnNkQsRUFBSUEsRUFBSSxNQUFNLEVBQUksQ0FBQyxFQUFFLElBQUssRUFBRWgyRCxDQUFDLEVBQUcsTUFDakMsSUFBSyxJQUFLZzJELEVBQUlBLEVBQUksTUFBTSxFQUFJLENBQUMsRUFBRTE2QyxFQUFHLEVBQUVBLENBQUMsRUFBRyxFQUFFdGYsRUFBRyxNQUM3QyxJQUFLLElBQUtnNkQsRUFBSUEsRUFBSSxNQUFNLEVBQUksQ0FBQyxFQUFFLElBQUssRUFBRSxHQUFHLEVBQUcsRUFBRWg2RCxFQUFHLE1BQ2pELFFBQ0MsR0FBRyx3Q0FBd0MsUUFBUXNmLENBQUMsSUFBTSxHQUFJLE1BQU0sSUFBSSxNQUFNLDBCQUE0QkEsRUFBSSxPQUFTaytDLENBQUcsRUFDMUh4RCxFQUFJQSxFQUFJLE1BQU0sRUFBSSxDQUFDLEVBQUUsSUFBSyxFQUFFMTZDLENBQUMsRUFBRyxFQUFFdGYsRUFBRyxLQUN0QyxDQUlGLElBQUlvaEUsRUFBSyxFQUFHM0QsRUFBTSxFQUFHNEQsRUFDckIsSUFBSXJoRSxFQUFFZzZELEVBQUksT0FBTyxFQUFHa0gsRUFBSSxJQUFLbGhFLEdBQUssRUFBRyxFQUFFQSxFQUN0QyxPQUFPZzZELEVBQUloNkQsQ0FBQyxFQUFFLEVBQUMsQ0FDZCxJQUFLLElBQUssSUFBSyxJQUFLZzZELEVBQUloNkQsQ0FBQyxFQUFFLEVBQUltaEUsRUFBSUQsRUFBSSxJQUFRRSxFQUFLLElBQUdBLEVBQUssR0FBRyxNQUMvRCxJQUFLLEtBQ0FDLEVBQUlySCxFQUFJaDZELENBQUMsRUFBRSxFQUFFLE1BQU0sT0FBTyxLQUFJeTlELEVBQUksS0FBSyxJQUFJQSxFQUFJNEQsRUFBSSxDQUFDLEVBQUUsT0FBTyxDQUFDLEdBQy9ERCxFQUFLLElBQUdBLEVBQUssR0FFakIsSUFBSyxJQUFLLElBQUssSUFBSyxJQUFLLElBQUssSUFBSyxJQUFLRixFQUFJbEgsRUFBSWg2RCxDQUFDLEVBQUUsRUFBRyxNQUN0RCxJQUFLLElBQVFraEUsSUFBUSxNQUFPbEgsRUFBSWg2RCxDQUFDLEVBQUUsRUFBSSxJQUFRb2hFLEVBQUssSUFBR0EsRUFBSyxJQUFLLE1BQ2pFLElBQUssSUFDSixNQUNELElBQUssSUFDREEsRUFBSyxHQUFLcEgsRUFBSWg2RCxDQUFDLEVBQUUsRUFBRSxNQUFNLE1BQU0sSUFBR29oRSxFQUFLLEdBQ3ZDQSxFQUFLLEdBQUtwSCxFQUFJaDZELENBQUMsRUFBRSxFQUFFLE1BQU0sTUFBTSxJQUFHb2hFLEVBQUssR0FDdkNBLEVBQUssR0FBS3BILEVBQUloNkQsQ0FBQyxFQUFFLEVBQUUsTUFBTSxNQUFNLElBQUdvaEUsRUFBSyxFQUMzQyxDQUdGLE9BQU9BLEVBQUUsQ0FDUixJQUFLLEdBQUcsTUFDUixJQUFLLEdBRUR6Z0QsRUFBRyxHQUFLLEtBQU9BLEVBQUcsRUFBSSxFQUFHLEVBQUVBLEVBQUcsR0FDOUJBLEVBQUcsR0FBTSxLQUFNQSxFQUFHLEVBQUksRUFBRyxFQUFFQSxFQUFHLEdBQzlCQSxFQUFHLEdBQU0sS0FBTUEsRUFBRyxFQUFJLEVBQUcsRUFBRUEsRUFBRyxHQUNqQyxNQUNELElBQUssR0FFREEsRUFBRyxHQUFLLEtBQU9BLEVBQUcsRUFBSSxFQUFHLEVBQUVBLEVBQUcsR0FDOUJBLEVBQUcsR0FBTSxLQUFNQSxFQUFHLEVBQUksRUFBRyxFQUFFQSxFQUFHLEdBQ2pDLEtBQ0QsQ0FHRCxJQUFJMmdELEVBQU8sR0FBSUMsRUFDZixJQUFJdmhFLEVBQUUsRUFBR0EsRUFBSWc2RCxFQUFJLE9BQVEsRUFBRWg2RCxFQUMxQixPQUFPZzZELEVBQUloNkQsQ0FBQyxFQUFFLEVBQUMsQ0FDZCxJQUFLLElBQUssSUFBSyxJQUFLLElBQUssSUFBSyxJQUFLLElBQUssTUFDeEMsSUFBSyxJQUFLZzZELEVBQUloNkQsQ0FBQyxFQUFFLEVBQUksR0FBSWc2RCxFQUFJaDZELENBQUMsRUFBRSxFQUFJLElBQUssTUFDekMsSUFBSyxJQUFLLElBQUssSUFBSyxJQUFLLElBQUssSUFBSyxJQUFLLElBQUssSUFBSyxJQUFLLElBQUssSUFBSyxJQUFLLElBQUssSUFBSyxJQUFLLElBQUssSUFBSyxJQUU5Rmc2RCxFQUFJaDZELENBQUMsRUFBRSxFQUFJdTlELEdBQWV2RCxFQUFJaDZELENBQUMsRUFBRSxFQUFFLFdBQVcsQ0FBQyxFQUFHZzZELEVBQUloNkQsQ0FBQyxFQUFFLEVBQUcyZ0IsRUFBSTg4QyxDQUFHLEVBQ25FekQsRUFBSWg2RCxDQUFDLEVBQUUsRUFBSSxJQUFLLE1BQ2pCLElBQUssSUFBSyxJQUFLLElBRWQsSUFEQXVoRSxFQUFLdmhFLEVBQUUsRUFDRGc2RCxFQUFJdUgsQ0FBRSxHQUFLLFFBQ2ZqaUQsRUFBRTA2QyxFQUFJdUgsQ0FBRSxFQUFFLEtBQU8sS0FBT2ppRCxJQUFNLE1BQzdCQSxJQUFNLEtBQU9BLElBQU0sTUFBUTA2QyxFQUFJdUgsRUFBRyxDQUFDLEdBQUssT0FBU3ZILEVBQUl1SCxFQUFHLENBQUMsRUFBRSxJQUFNLEtBQU92SCxFQUFJdUgsRUFBRyxDQUFDLEVBQUUsSUFBTSxLQUFPdkgsRUFBSXVILEVBQUcsQ0FBQyxFQUFFLElBQU0sTUFDaEh2SCxFQUFJaDZELENBQUMsRUFBRSxJQUFNLE1BQVFzZixJQUFNLEtBQU9BLElBQU0sS0FBT0EsSUFBTSxNQUNyREEsSUFBTSxNQUFRMDZDLEVBQUl1SCxDQUFFLEVBQUUsSUFBTSxLQUFPdkgsRUFBSXVILENBQUUsRUFBRSxJQUFNLEtBQU92SCxFQUFJdUgsRUFBRyxDQUFDLEdBQUssTUFBUXZILEVBQUl1SCxFQUFHLENBQUMsRUFBRSxHQUFLLE9BRTdGdkgsRUFBSWg2RCxDQUFDLEVBQUUsR0FBS2c2RCxFQUFJdUgsQ0FBRSxFQUFFLEVBQ3BCdkgsRUFBSXVILENBQUUsRUFBSSxDQUFDLEVBQUUsR0FBSSxFQUFFLEdBQUcsRUFBRyxFQUFFQSxFQUU1QkQsR0FBUXRILEVBQUloNkQsQ0FBQyxFQUFFLEVBQ2ZBLEVBQUl1aEUsRUFBRyxFQUFHLE1BQ1gsSUFBSyxJQUFLdkgsRUFBSWg2RCxDQUFDLEVBQUUsRUFBSSxJQUFLZzZELEVBQUloNkQsQ0FBQyxFQUFFLEVBQUlxOUQsR0FBWXY5QyxFQUFFNWxCLENBQUksRUFBRyxLQUMxRCxDQUVGLElBQUlzbkUsRUFBSyxHQUFJQyxFQUFLQyxFQUNsQixHQUFHSixFQUFLLE9BQVMsRUFBRyxDQUNoQkEsRUFBSyxXQUFXLENBQUMsR0FBSyxJQUN4QkcsRUFBTzNoRCxFQUFFLEdBQUd3aEQsRUFBSyxXQUFXLENBQUMsSUFBTSxHQUFLLENBQUN4aEQsRUFBSUEsRUFDN0M0aEQsRUFBT3ZELEdBQVUsSUFBS21ELEVBQU1HLENBQUcsSUFFL0JBLEVBQU8zaEQsRUFBRSxHQUFLbWhELEVBQU8sRUFBSSxDQUFDbmhELEVBQUlBLEVBQzlCNGhELEVBQU92RCxHQUFVLElBQUttRCxFQUFNRyxDQUFHLEVBQzVCQSxFQUFNLEdBQUt6SCxFQUFJLENBQUMsR0FBS0EsRUFBSSxDQUFDLEVBQUUsR0FBSyxNQUNuQzBILEVBQU9BLEVBQUssT0FBTyxDQUFDLEVBQ3BCMUgsRUFBSSxDQUFDLEVBQUUsRUFBSSxJQUFNQSxFQUFJLENBQUMsRUFBRSxJQUcxQnVILEVBQUdHLEVBQUssT0FBTyxFQUNmLElBQUlDLEVBQVEzSCxFQUFJLE9BQ2hCLElBQUloNkQsRUFBRSxFQUFHQSxFQUFJZzZELEVBQUksT0FBUSxFQUFFaDZELEVBQUcsR0FBR2c2RCxFQUFJaDZELENBQUMsR0FBSyxNQUFRZzZELEVBQUloNkQsQ0FBQyxFQUFFLEdBQUssS0FBT2c2RCxFQUFJaDZELENBQUMsRUFBRSxFQUFFLFFBQVEsR0FBRyxFQUFJLEdBQUksQ0FBRTJoRSxFQUFRM2hFLEVBQUcsS0FBUSxDQUN2SCxJQUFJNGhFLEVBQU01SCxFQUFJLE9BQ2QsR0FBRzJILElBQVUzSCxFQUFJLFFBQVUwSCxFQUFLLFFBQVEsR0FBRyxJQUFNLEdBQUksQ0FDcEQsSUFBSTFoRSxFQUFFZzZELEVBQUksT0FBTyxFQUFHaDZELEdBQUksRUFBRSxFQUFFQSxFQUN4Qmc2RCxFQUFJaDZELENBQUMsR0FBSyxNQUFRLEtBQUssUUFBUWc2RCxFQUFJaDZELENBQUMsRUFBRSxDQUFDLElBQU0sS0FDN0N1aEUsR0FBSXZILEVBQUloNkQsQ0FBQyxFQUFFLEVBQUUsT0FBTyxHQUFLdWhFLEdBQU12SCxFQUFJaDZELENBQUMsRUFBRSxFQUFFLE9BQVFnNkQsRUFBSWg2RCxDQUFDLEVBQUUsRUFBSTBoRSxFQUFLLE9BQU9ILEVBQUcsRUFBR3ZILEVBQUloNkQsQ0FBQyxFQUFFLEVBQUUsTUFBTSxHQUN2RnVoRSxFQUFLLEVBQUd2SCxFQUFJaDZELENBQUMsRUFBRSxFQUFJLElBQ3BCZzZELEVBQUloNkQsQ0FBQyxFQUFFLEVBQUkwaEUsRUFBSyxPQUFPLEVBQUdILEVBQUcsQ0FBQyxFQUFHQSxFQUFLLElBQzdDdkgsRUFBSWg2RCxDQUFDLEVBQUUsRUFBSSxJQUNYNGhFLEVBQVE1aEUsR0FFTnVoRSxHQUFJLEdBQUtLLEVBQU01SCxFQUFJLFNBQVFBLEVBQUk0SCxDQUFLLEVBQUUsRUFBSUYsRUFBSyxPQUFPLEVBQUVILEVBQUcsQ0FBQyxFQUFJdkgsRUFBSTRILENBQUssRUFBRSxFQUM5RSxTQUNPRCxJQUFVM0gsRUFBSSxRQUFVMEgsRUFBSyxRQUFRLEdBQUcsSUFBTSxHQUFJLENBRXpELElBREFILEVBQUtHLEVBQUssUUFBUSxHQUFHLEVBQUUsRUFDbkIxaEUsRUFBRTJoRSxFQUFPM2hFLEdBQUksRUFBRyxFQUFFQSxFQUNyQixHQUFHLEVBQUFnNkQsRUFBSWg2RCxDQUFDLEdBQUssTUFBUSxLQUFLLFFBQVFnNkQsRUFBSWg2RCxDQUFDLEVBQUUsQ0FBQyxJQUFNLElBR2hELEtBRkFzM0QsRUFBRTBDLEVBQUloNkQsQ0FBQyxFQUFFLEVBQUUsUUFBUSxHQUFHLEVBQUUsSUFBSUEsSUFBSTJoRSxFQUFNM0gsRUFBSWg2RCxDQUFDLEVBQUUsRUFBRSxRQUFRLEdBQUcsRUFBRSxFQUFFZzZELEVBQUloNkQsQ0FBQyxFQUFFLEVBQUUsT0FBTyxFQUM5RXdoRSxFQUFLeEgsRUFBSWg2RCxDQUFDLEVBQUUsRUFBRSxPQUFPczNELEVBQUUsQ0FBQyxFQUNsQkEsR0FBRyxFQUFHLEVBQUVBLEVBQ1ZpSyxHQUFJLElBQU12SCxFQUFJaDZELENBQUMsRUFBRSxFQUFFLE9BQU9zM0QsQ0FBQyxJQUFNLEtBQU8wQyxFQUFJaDZELENBQUMsRUFBRSxFQUFFLE9BQU9zM0QsQ0FBQyxJQUFNLE9BQU1rSyxFQUFLRSxFQUFLLE9BQU9ILEdBQUksRUFBSUMsR0FFbEd4SCxFQUFJaDZELENBQUMsRUFBRSxFQUFJd2hFLEVBQ1h4SCxFQUFJaDZELENBQUMsRUFBRSxFQUFJLElBQ1g0aEUsRUFBUTVoRSxFQUlULElBRkd1aEUsR0FBSSxHQUFLSyxFQUFNNUgsRUFBSSxTQUFRQSxFQUFJNEgsQ0FBSyxFQUFFLEVBQUlGLEVBQUssT0FBTyxFQUFFSCxFQUFHLENBQUMsRUFBSXZILEVBQUk0SCxDQUFLLEVBQUUsR0FDOUVMLEVBQUtHLEVBQUssUUFBUSxHQUFHLEVBQUUsRUFDbkIxaEUsRUFBRTJoRSxFQUFPM2hFLEVBQUVnNkQsRUFBSSxPQUFRLEVBQUVoNkQsRUFDNUIsR0FBRyxFQUFBZzZELEVBQUloNkQsQ0FBQyxHQUFLLE1BQVMsTUFBTSxRQUFRZzZELEVBQUloNkQsQ0FBQyxFQUFFLENBQUMsSUFBTSxJQUFNQSxJQUFNMmhFLEdBRzlELEtBRkFySyxFQUFFMEMsRUFBSWg2RCxDQUFDLEVBQUUsRUFBRSxRQUFRLEdBQUcsRUFBRSxJQUFJQSxJQUFJMmhFLEVBQU0zSCxFQUFJaDZELENBQUMsRUFBRSxFQUFFLFFBQVEsR0FBRyxFQUFFLEVBQUUsRUFDOUR3aEUsRUFBS3hILEVBQUloNkQsQ0FBQyxFQUFFLEVBQUUsT0FBTyxFQUFFczNELENBQUMsRUFDbEJBLEVBQUUwQyxFQUFJaDZELENBQUMsRUFBRSxFQUFFLE9BQVEsRUFBRXMzRCxFQUN2QmlLLEVBQUdHLEVBQUssU0FBUUYsR0FBTUUsRUFBSyxPQUFPSCxHQUFJLEdBRTFDdkgsRUFBSWg2RCxDQUFDLEVBQUUsRUFBSXdoRSxFQUNYeEgsRUFBSWg2RCxDQUFDLEVBQUUsRUFBSSxJQUNYNGhFLEVBQVE1aEUsRUFFVCxDQUNELENBQ0QsSUFBSUEsRUFBRSxFQUFHQSxFQUFFZzZELEVBQUksT0FBUSxFQUFFaDZELEVBQU1nNkQsRUFBSWg2RCxDQUFDLEdBQUssTUFBUSxLQUFLLFFBQVFnNkQsRUFBSWg2RCxDQUFDLEVBQUUsQ0FBQyxFQUFFLEtBQ3ZFeWhFLEVBQU9SLEVBQU0sR0FBS25oRCxFQUFJLEdBQUs5ZixFQUFFLEdBQUtnNkQsRUFBSWg2RCxFQUFFLENBQUMsRUFBRSxJQUFNLElBQU0sQ0FBQzhmLEVBQUVBLEVBQzFEazZDLEVBQUloNkQsQ0FBQyxFQUFFLEVBQUltK0QsR0FBVW5FLEVBQUloNkQsQ0FBQyxFQUFFLEVBQUdnNkQsRUFBSWg2RCxDQUFDLEVBQUUsRUFBR3loRSxDQUFHLEVBQzVDekgsRUFBSWg2RCxDQUFDLEVBQUUsRUFBSSxLQUVaLElBQUk2aEUsRUFBUyxHQUNiLElBQUk3aEUsRUFBRSxFQUFHQSxJQUFNZzZELEVBQUksT0FBUSxFQUFFaDZELEVBQU1nNkQsRUFBSWg2RCxDQUFDLEdBQUssT0FBTTZoRSxHQUFVN0gsRUFBSWg2RCxDQUFDLEVBQUUsR0FDcEUsT0FBTzZoRSxDQUNSLENBRUEsSUFBSUMsR0FBVyx3Q0FDZixTQUFTQyxHQUFRamlELEVBQUdvL0MsRUFBSSxDQUN2QixHQUFHQSxHQUFNLEtBQU0sTUFBTyxHQUN0QixJQUFJOEMsRUFBUyxXQUFXOUMsRUFBRyxDQUFDLENBQUMsRUFDN0IsT0FBT0EsRUFBRyxDQUFDLEVBQUMsQ0FDWCxJQUFLLElBQU0sR0FBR3AvQyxHQUFLa2lELEVBQVEsTUFBTyxHQUFNLE1BQ3hDLElBQUssSUFBTSxHQUFHbGlELEVBQUtraUQsRUFBUSxNQUFPLEdBQU0sTUFDeEMsSUFBSyxJQUFNLEdBQUdsaUQsRUFBS2tpRCxFQUFRLE1BQU8sR0FBTSxNQUN4QyxJQUFLLEtBQU0sR0FBR2xpRCxHQUFLa2lELEVBQVEsTUFBTyxHQUFNLE1BQ3hDLElBQUssS0FBTSxHQUFHbGlELEdBQUtraUQsRUFBUSxNQUFPLEdBQU0sTUFDeEMsSUFBSyxLQUFNLEdBQUdsaUQsR0FBS2tpRCxFQUFRLE1BQU8sR0FBTSxLQUN4QyxDQUNELE1BQU8sRUFDUixDQUNBLFNBQVNDLEdBQVdsK0QsRUFBYytiLEVBQVcsQ0FDNUMsSUFBSTA5QyxFQUFNb0QsR0FBYzc4RCxDQUFDLEVBQ3JCNmdCLEVBQUk0NEMsRUFBSSxPQUFRMEUsRUFBTTFFLEVBQUk1NEMsRUFBRSxDQUFDLEVBQUUsUUFBUSxHQUFHLEVBRTlDLEdBREdBLEVBQUUsR0FBS3M5QyxFQUFJLElBQUksRUFBRXQ5QyxFQUNqQjQ0QyxFQUFJLE9BQVMsRUFBRyxNQUFNLElBQUksTUFBTSxpQ0FBbUNBLEVBQUksS0FBSyxHQUFHLEVBQUksR0FBRyxFQUN6RixHQUFHLE9BQU8xOUMsR0FBTSxTQUFVLE1BQU8sQ0FBQyxFQUFHMDlDLEVBQUksU0FBVyxHQUFLMEUsRUFBSSxHQUFHMUUsRUFBSUEsRUFBSSxPQUFPLENBQUMsRUFBRSxHQUFHLEVBQ3JGLE9BQU9BLEVBQUksT0FBTSxDQUNoQixJQUFLLEdBQUdBLEVBQU0wRSxFQUFJLEdBQUssQ0FBQyxVQUFXLFVBQVcsVUFBVzFFLEVBQUksQ0FBQyxDQUFDLEVBQUksQ0FBQ0EsRUFBSSxDQUFDLEVBQUdBLEVBQUksQ0FBQyxFQUFHQSxFQUFJLENBQUMsRUFBRyxHQUFHLEVBQUcsTUFDbEcsSUFBSyxHQUFHQSxFQUFNMEUsRUFBSSxHQUFLLENBQUMxRSxFQUFJLENBQUMsRUFBR0EsRUFBSSxDQUFDLEVBQUdBLEVBQUksQ0FBQyxFQUFHQSxFQUFJLENBQUMsQ0FBQyxFQUFJLENBQUNBLEVBQUksQ0FBQyxFQUFHQSxFQUFJLENBQUMsRUFBR0EsRUFBSSxDQUFDLEVBQUcsR0FBRyxFQUFHLE1BQ3pGLElBQUssR0FBR0EsRUFBTTBFLEVBQUksR0FBSyxDQUFDMUUsRUFBSSxDQUFDLEVBQUdBLEVBQUksQ0FBQyxFQUFHQSxFQUFJLENBQUMsRUFBR0EsRUFBSSxDQUFDLENBQUMsRUFBSSxDQUFDQSxFQUFJLENBQUMsRUFBR0EsRUFBSSxDQUFDLEVBQUdBLEVBQUksQ0FBQyxFQUFHLEdBQUcsRUFBRyxLQUV6RixDQUNELElBQUk0QyxFQUFLdGdELEVBQUksRUFBSTA5QyxFQUFJLENBQUMsRUFBSTE5QyxFQUFJLEVBQUkwOUMsRUFBSSxDQUFDLEVBQUlBLEVBQUksQ0FBQyxFQUNoRCxHQUFHQSxFQUFJLENBQUMsRUFBRSxRQUFRLEdBQUcsSUFBTSxJQUFNQSxFQUFJLENBQUMsRUFBRSxRQUFRLEdBQUcsSUFBTSxHQUFJLE1BQU8sQ0FBQzU0QyxFQUFHdzdDLENBQUUsRUFDMUUsR0FBRzVDLEVBQUksQ0FBQyxFQUFFLE1BQU0sU0FBUyxHQUFLLE1BQVFBLEVBQUksQ0FBQyxFQUFFLE1BQU0sU0FBUyxHQUFLLEtBQU0sQ0FDdEUsSUFBSTJFLEVBQUszRSxFQUFJLENBQUMsRUFBRSxNQUFNc0UsRUFBUSxFQUMxQk0sRUFBSzVFLEVBQUksQ0FBQyxFQUFFLE1BQU1zRSxFQUFRLEVBQzlCLE9BQU9DLEdBQVFqaUQsRUFBR3FpRCxDQUFFLEVBQUksQ0FBQ3Y5QyxFQUFHNDRDLEVBQUksQ0FBQyxDQUFDLEVBQUl1RSxHQUFRamlELEVBQUdzaUQsQ0FBRSxFQUFJLENBQUN4OUMsRUFBRzQ0QyxFQUFJLENBQUMsQ0FBQyxFQUFJLENBQUM1NEMsRUFBRzQ0QyxFQUFJMkUsR0FBTSxNQUFRQyxHQUFNLEtBQU8sRUFBSSxDQUFDLENBQUMsQ0FDOUcsQ0FDRCxNQUFPLENBQUN4OUMsRUFBR3c3QyxDQUFFLENBQ2QsQ0FDQSxTQUFTOUMsR0FBV0UsRUFBc0IxOUMsRUFBVTliLEVBQVksQ0FDNURBLEdBQUssT0FBTUEsRUFBSSxJQUNsQixJQUFJaTZELEVBQU8sR0FDWCxPQUFPLE9BQU9ULEVBQUcsQ0FDaEIsSUFBSyxTQUNEQSxHQUFPLFVBQVl4NUQsRUFBRSxPQUFRaTZELEVBQU9qNkQsRUFBRSxPQUNwQ2k2RCxFQUFPVCxFQUNaLE1BQ0QsSUFBSyxTQUNEQSxHQUFPLElBQU14NUQsRUFBRSxPQUFRaTZELEVBQU9qNkQsRUFBRSxPQUM5Qmk2RCxHQUFRajZELEVBQUUsT0FBUyxLQUFRQSxFQUFFLE1BQWlCbTNELElBQVdxQyxDQUFHLEVBQzlEUyxHQUFRLE9BQU1BLEVBQVFqNkQsRUFBRSxPQUFTQSxFQUFFLE1BQU1vM0QsR0FBZ0JvQyxDQUFHLENBQUMsR0FBTXJDLEdBQVVDLEdBQWdCb0MsQ0FBRyxDQUFDLEdBQ2pHUyxHQUFRLE9BQU1BLEVBQU81QyxHQUFnQm1DLENBQUcsR0FBSyxXQUNoRCxLQUNELENBQ0QsR0FBR3pDLEdBQWNrRCxFQUFLLENBQUMsRUFBRyxPQUFPWixHQUFZdjlDLEVBQUc5YixDQUFDLEVBQzlDOGIsYUFBYSxPQUFNQSxFQUFJNjhDLEdBQWM3OEMsRUFBRzliLEVBQUUsUUFBUSxHQUNyRCxJQUFJRCxFQUFJaytELEdBQVdoRSxFQUFNbitDLENBQUMsRUFDMUIsR0FBR2k3QyxHQUFjaDNELEVBQUUsQ0FBQyxDQUFDLEVBQUcsT0FBT3M1RCxHQUFZdjlDLEVBQUc5YixDQUFDLEVBQy9DLEdBQUc4YixJQUFNLEdBQU1BLEVBQUksZUFBZ0JBLElBQU0sR0FBT0EsRUFBSSxnQkFDNUNBLElBQU0sSUFBTUEsR0FBSyxLQUFNLE1BQU8sR0FDdEMsT0FBT2toRCxHQUFTajlELEVBQUUsQ0FBQyxFQUFHK2IsRUFBRzliLEVBQUdELEVBQUUsQ0FBQyxDQUFDLENBQ2pDLENBQ0EsU0FBU3MrRCxHQUFTN0UsRUFBZ0J2ZCxFQUE0QixDQUM3RCxHQUFHLE9BQU9BLEdBQU8sU0FBVSxDQUMxQkEsRUFBTSxDQUFDQSxHQUFPLEdBRWQsUUFBUWpnRCxFQUFJLEVBQUdBLEVBQUksSUFBUSxFQUFFQSxFQUFHLENBRS9CLEdBQUdtN0QsR0FBVW43RCxDQUFDLEdBQUssS0FBVyxDQUFLaWdELEVBQU0sSUFBR0EsRUFBTWpnRCxHQUFHLFFBQVcsQ0FDaEUsR0FBR203RCxHQUFVbjdELENBQUMsR0FBS3c5RCxFQUFLLENBQUV2ZCxFQUFNamdELEVBQUcsS0FBUSxDQUMzQyxDQUVFaWdELEVBQU0sSUFBR0EsRUFBTSxJQUNsQixDQUVELE9BQUFrYixHQUFVbGIsQ0FBRyxFQUFJdWQsRUFDVnZkLENBQ1IsQ0FDQSxTQUFTcWlCLEdBQWVDLEVBQTJCLENBQ2xELFFBQVF2aUUsRUFBRSxFQUFHQSxHQUFHLElBQVEsRUFBRUEsRUFDdEJ1aUUsRUFBSXZpRSxDQUFDLElBQU0sUUFBV3FpRSxHQUFTRSxFQUFJdmlFLENBQUMsRUFBR0EsQ0FBQyxDQUM3QyxDQUVBLFNBQVN3aUUsSUFBVyxDQUNuQnJILEdBQVlELEdBQWMsQ0FDM0IsQ0FFQSxJQUFJdUgsR0FBTSxDQUNULE9BQVFuRixHQUNSLEtBQU0rRSxHQUNOLE9BQVFsSCxHQUNSLFdBQVltSCxHQUNaLGdCQUFpQm5HLEdBQ2pCLFFBQVM0RSxHQUNULFVBQVcsVUFBcUIsQ0FBRSxPQUFPMEIsR0FBSSxPQUFTdEgsRUFBWSxDQUNuRSxFQUVJdUgsR0FBb0MsQ0FDdkMsRUFBSyw0QkFDTCxFQUFLLGlDQUNMLEVBQUssa0NBQ0wsRUFBSyx1Q0FDTCxHQUFNLFVBQVcsR0FBTSxVQUFXLEdBQU0sVUFBVyxHQUFNLFVBQ3pELEdBQU0sU0FBVSxHQUFNLFNBQVUsR0FBTSxTQUFVLEdBQU0sU0FBVSxHQUFNLFNBQ3RFLEdBQU0sVUFBVyxHQUFNLFVBQVcsR0FBTSxVQUFXLEdBQU0sVUFDekQsR0FBTSxTQUNOLEdBQU0sMENBQ04sR0FBTSxtREFDTixHQUFNLGtEQUNOLEdBQU0sMkRBQ04sR0FBTSxTQUFVLEdBQU0sU0FBVSxHQUFNLFNBQVUsR0FBTSxTQUFVLEdBQU0sU0FDdEUsR0FBTSxTQUFVLEdBQU0sU0FBVSxHQUFNLFNBQVUsR0FBTSxTQUN0RCxHQUFNLElBQ04sR0FBTSxPQUNOLEdBQU0sUUFDTixHQUFNLFdBQ04sR0FBTSw0QkFDTixHQUFNLGlDQUNOLEdBQU0sa0NBQ04sR0FBTSx1Q0FDTixHQUFNLEtBQ04sR0FBTSxRQUNOLEdBQU0sUUFDTixHQUFNLFVBQ04sR0FBTSxTQUNOLEdBQU0sU0FDTixHQUFNLFdBQ04sR0FBTSxRQUNOLEdBQU0sU0FDTixHQUFNLE9BQ04sR0FBTSxVQUNOLEdBQU0sY0FDTixHQUFNLFFBQ04sR0FBTSxZQUNOLEdBQU0sUUFDUCxFQUdJQyxHQUFjLG1DQUNsQixTQUFTQyxHQUFhQyxFQUFxQyxDQUMxRCxJQUFJckYsRUFBTSxPQUFPcUYsR0FBVSxTQUFXMUgsR0FBVTBILENBQU0sRUFBSUEsRUFDMUQsT0FBQXJGLEVBQU1BLEVBQUksUUFBUW1GLEdBQWEsUUFBUSxFQUNoQyxJQUFJLE9BQU8sSUFBTW5GLEVBQU0sR0FBRyxDQUNsQyxDQUNBLFNBQVNzRixHQUFXaG5DLEVBQWdCK21DLEVBQW1CdDRCLEVBQW9DLENBQzFGLElBQUk5bEIsRUFBSSxHQUFJOHlDLEVBQUksR0FBSXJ6RCxFQUFJLEdBQUk2K0QsRUFBSSxHQUFJQyxFQUFJLEdBQUlDLEVBQUksSUFDL0NKLEVBQU8sTUFBTUYsRUFBVyxHQUFHLENBQUUsR0FBRSxRQUFRLFNBQVN2L0QsRUFBR3BELEVBQUcsQ0FDdEQsSUFBSThmLEVBQUksU0FBU3lxQixFQUFNdnFDLEVBQUUsQ0FBQyxFQUFHLEVBQUUsRUFDL0IsT0FBT29ELEVBQUUsY0FBYyxPQUFPLENBQUMsRUFBQyxDQUMvQixJQUFLLElBQUtxaEIsRUFBSTNFLEVBQUcsTUFBTyxJQUFLLElBQUs1YixFQUFJNGIsRUFBRyxNQUN6QyxJQUFLLElBQUtpakQsRUFBSWpqRCxFQUFHLE1BQU8sSUFBSyxJQUFLbWpELEVBQUluakQsRUFBRyxNQUN6QyxJQUFLLElBQVFpakQsR0FBSyxFQUFHQyxFQUFJbGpELEVBQVF5M0MsRUFBSXozQyxFQUFHLEtBQ3hDLENBQ0gsQ0FBRSxFQUNFbWpELEdBQUssR0FBS0QsR0FBSyxJQUFNekwsR0FBSyxJQUFLeUwsRUFBSXpMLEVBQUdBLEVBQUksSUFDN0MsSUFBSTJMLEdBQVksSUFBTXorQyxHQUFHLEVBQUVBLEVBQUcsSUFBSSxLQUFJLEVBQUcsWUFBYSxJQUFHLE1BQU0sRUFBRSxFQUFJLEtBQU8sTUFBUTh5QyxHQUFHLEVBQUVBLEVBQUUsSUFBSSxNQUFNLEVBQUUsRUFBSSxLQUFPLE1BQVFyekQsR0FBRyxFQUFFQSxFQUFFLElBQUksTUFBTSxFQUFFLEVBQzFJZy9ELEVBQVEsUUFBVSxJQUFHQSxFQUFVLElBQU1BLEdBQ3JDQSxFQUFRLFFBQVUsSUFBR0EsRUFBVSxLQUFPQSxHQUN6QyxJQUFJQyxHQUFZLE1BQVFKLEdBQUcsRUFBRUEsRUFBRSxJQUFJLE1BQU0sRUFBRSxFQUFJLEtBQU8sTUFBUUMsR0FBRyxFQUFFQSxFQUFFLElBQUksTUFBTSxFQUFFLEVBQUksS0FBTyxNQUFRQyxHQUFHLEVBQUVBLEVBQUUsSUFBSSxNQUFNLEVBQUUsRUFDdkgsT0FBR0YsR0FBSyxJQUFNQyxHQUFLLElBQU1DLEdBQUssR0FBV0MsRUFDdEN6K0MsR0FBSyxJQUFNOHlDLEdBQUssSUFBTXJ6RCxHQUFLLEdBQVdpL0QsRUFDbENELEVBQVUsSUFBTUMsQ0FDeEIsQ0EyQ0EsSUFBSUMsR0FBc0IsVUFBVyxDQUNyQyxJQUFJQSxFQUFRLENBQUEsRUFDWkEsRUFBTSxRQUFVLFFBR2hCLFNBQVNDLEdBQTJCLENBR25DLFFBRkkvakQsRUFBSSxFQUFHL2dCLEVBQTBCLElBQUksTUFBTSxHQUFHLEVBRTFDNkUsRUFBRyxFQUFHQSxHQUFLLElBQUssRUFBRUEsRUFDekJrYyxFQUFJbGMsRUFDSmtjLEVBQU1BLEVBQUUsRUFBTSxXQUFjQSxJQUFNLEVBQU9BLElBQU0sRUFDL0NBLEVBQU1BLEVBQUUsRUFBTSxXQUFjQSxJQUFNLEVBQU9BLElBQU0sRUFDL0NBLEVBQU1BLEVBQUUsRUFBTSxXQUFjQSxJQUFNLEVBQU9BLElBQU0sRUFDL0NBLEVBQU1BLEVBQUUsRUFBTSxXQUFjQSxJQUFNLEVBQU9BLElBQU0sRUFDL0NBLEVBQU1BLEVBQUUsRUFBTSxXQUFjQSxJQUFNLEVBQU9BLElBQU0sRUFDL0NBLEVBQU1BLEVBQUUsRUFBTSxXQUFjQSxJQUFNLEVBQU9BLElBQU0sRUFDL0NBLEVBQU1BLEVBQUUsRUFBTSxXQUFjQSxJQUFNLEVBQU9BLElBQU0sRUFDL0NBLEVBQU1BLEVBQUUsRUFBTSxXQUFjQSxJQUFNLEVBQU9BLElBQU0sRUFDL0MvZ0IsRUFBTTZFLENBQUMsRUFBSWtjLEVBR1osT0FBTyxPQUFPLFdBQWUsSUFBYyxJQUFJLFdBQVcvZ0IsQ0FBSyxFQUFJQSxDQUNwRSxDQUVBLElBQUkra0UsRUFBS0QsRUFBZ0IsRUFDekIsU0FBU0UsRUFBbUJDLEVBQUcsQ0FDOUIsSUFBSWxrRCxFQUFJLEVBQUdRLEVBQUksRUFBRzFjLEVBQUksRUFBRzdFLEVBQTBCLE9BQU8sV0FBZSxJQUFjLElBQUksV0FBVyxJQUFJLEVBQUksSUFBSSxNQUFNLElBQUksRUFFNUgsSUFBSTZFLEVBQUksRUFBR0EsR0FBSyxJQUFLLEVBQUVBLEVBQUc3RSxFQUFNNkUsQ0FBQyxFQUFJb2dFLEVBQUVwZ0UsQ0FBQyxFQUN4QyxJQUFJQSxFQUFJLEVBQUdBLEdBQUssSUFBSyxFQUFFQSxFQUV0QixJQURBMGMsRUFBSTBqRCxFQUFFcGdFLENBQUMsRUFDSGtjLEVBQUksSUFBTWxjLEVBQUdrYyxFQUFJLEtBQU1BLEdBQUssSUFBS1EsRUFBSXZoQixFQUFNK2dCLENBQUMsRUFBS1EsSUFBTSxFQUFLMGpELEVBQUUxakQsRUFBSSxHQUFJLEVBRTNFLElBQUlrNkMsRUFBTSxDQUFBLEVBQ1YsSUFBSTUyRCxFQUFJLEVBQUdBLEdBQUssR0FBSSxFQUFFQSxFQUFHNDJELEVBQUk1MkQsRUFBSSxDQUFDLEVBQUksT0FBTyxXQUFlLElBQWM3RSxFQUFNLFNBQVM2RSxFQUFJLElBQUtBLEVBQUksSUFBTSxHQUFHLEVBQUk3RSxFQUFNLE1BQU02RSxFQUFJLElBQUtBLEVBQUksSUFBTSxHQUFHLEVBQ3JKLE9BQU80MkQsQ0FDUixDQUNBLElBQUl5SixFQUFLRixFQUFtQkQsQ0FBRSxFQUMxQkksRUFBS0QsRUFBRyxDQUFDLEVBQUlFLEVBQUtGLEVBQUcsQ0FBQyxFQUFJRyxFQUFLSCxFQUFHLENBQUMsRUFBSUksRUFBS0osRUFBRyxDQUFDLEVBQUlLLEVBQUtMLEVBQUcsQ0FBQyxFQUM3RE0sRUFBS04sRUFBRyxDQUFDLEVBQUlPLEVBQUtQLEVBQUcsQ0FBQyxFQUFJUSxFQUFLUixFQUFHLENBQUMsRUFBSVMsRUFBS1QsRUFBRyxDQUFDLEVBQUlVLEVBQUtWLEVBQUcsQ0FBQyxFQUM3RFcsRUFBS1gsRUFBRyxFQUFFLEVBQUdZLEVBQUtaLEVBQUcsRUFBRSxFQUFHYSxFQUFLYixFQUFHLEVBQUUsRUFBR2MsRUFBS2QsRUFBRyxFQUFFLEVBQUdlLEVBQUtmLEVBQUcsRUFBRSxFQUNsRSxTQUFTZ0IsRUFBV0MsRUFBaUJoMUQsRUFBNEIsQ0FFaEUsUUFESWkxRCxFQUFJajFELEVBQXNCLEdBQ3RCMVAsRUFBSSxFQUFHazZELEVBQUl3SyxFQUFLLE9BQVExa0UsRUFBSWs2RCxHQUFJeUssRUFBS0EsSUFBSSxFQUFLckIsR0FBSXFCLEVBQUVELEVBQUssV0FBVzFrRSxHQUFHLEdBQUcsR0FBSSxFQUN0RixNQUFPLENBQUMya0UsQ0FDVCxDQUVBLFNBQVNDLEVBQVVsSixFQUFnQ2hzRCxFQUE0QixDQUU5RSxRQURJaTFELEVBQUlqMUQsRUFBc0IsR0FBSXdxRCxFQUFJd0IsRUFBRSxPQUFTLEdBQUkxN0QsRUFBSSxFQUNuREEsRUFBSWs2RCxHQUFJeUssRUFDYkgsRUFBRzlJLEVBQUUxN0QsR0FBRyxFQUFLMmtFLEVBQUksR0FBSSxFQUNyQkosRUFBRzdJLEVBQUUxN0QsR0FBRyxFQUFNMmtFLEdBQUssRUFBSyxHQUFJLEVBQzVCTCxFQUFHNUksRUFBRTE3RCxHQUFHLEVBQU0ya0UsR0FBSyxHQUFNLEdBQUksRUFDN0JOLEVBQUczSSxFQUFFMTdELEdBQUcsRUFBSzJrRSxJQUFNLEVBQUcsRUFDdEJQLEVBQUcxSSxFQUFFMTdELEdBQUcsQ0FBQyxFQUFJbWtFLEVBQUd6SSxFQUFFMTdELEdBQUcsQ0FBQyxFQUFJa2tFLEVBQUd4SSxFQUFFMTdELEdBQUcsQ0FBQyxFQUFJaWtFLEVBQUd2SSxFQUFFMTdELEdBQUcsQ0FBQyxFQUNoRGdrRSxFQUFHdEksRUFBRTE3RCxHQUFHLENBQUMsRUFBSStqRSxFQUFHckksRUFBRTE3RCxHQUFHLENBQUMsRUFBSThqRSxFQUFHcEksRUFBRTE3RCxHQUFHLENBQUMsRUFBSTZqRSxFQUFHbkksRUFBRTE3RCxHQUFHLENBQUMsRUFDaEQ0akUsRUFBR2xJLEVBQUUxN0QsR0FBRyxDQUFDLEVBQUkyakUsRUFBR2pJLEVBQUUxN0QsR0FBRyxDQUFDLEVBQUkwakUsRUFBR2hJLEVBQUUxN0QsR0FBRyxDQUFDLEVBQUlzakUsRUFBRzVILEVBQUUxN0QsR0FBRyxDQUFDLEVBRWpELElBREFrNkQsR0FBSyxHQUNDbDZELEVBQUlrNkQsR0FBR3lLLEVBQUtBLElBQUksRUFBS3JCLEdBQUlxQixFQUFFakosRUFBRTE3RCxHQUFHLEdBQUcsR0FBSSxFQUM3QyxNQUFPLENBQUMya0UsQ0FDVCxDQUVBLFNBQVNFLEVBQVUvb0MsRUFBZ0Jwc0IsRUFBNEIsQ0FFOUQsUUFESWkxRCxFQUFJajFELEVBQU8sR0FDUDFQLEVBQUksRUFBR2s2RCxFQUFJcCtCLEVBQUksT0FBUXhjLEVBQUksRUFBR3BiLEVBQUksRUFBR2xFLEVBQUlrNkQsR0FDaEQ1NkMsRUFBSXdjLEVBQUksV0FBVzk3QixHQUFHLEVBQ25Cc2YsRUFBSSxJQUNOcWxELEVBQUtBLElBQUksRUFBS3JCLEdBQUlxQixFQUFFcmxELEdBQUcsR0FBSSxFQUNsQkEsRUFBSSxNQUNicWxELEVBQUtBLElBQUksRUFBS3JCLEdBQUlxQixHQUFLLElBQU1ybEQsR0FBRyxFQUFHLEtBQU0sR0FBSSxFQUM3Q3FsRCxFQUFLQSxJQUFJLEVBQUtyQixHQUFJcUIsR0FBSyxJQUFLcmxELEVBQUUsS0FBTSxHQUFJLEdBQy9CQSxHQUFLLE9BQVVBLEVBQUksT0FDNUJBLEdBQUtBLEVBQUUsTUFBTSxHQUFJcGIsRUFBSTQzQixFQUFJLFdBQVc5N0IsR0FBRyxFQUFFLEtBQ3pDMmtFLEVBQUtBLElBQUksRUFBS3JCLEdBQUlxQixHQUFLLElBQU1ybEQsR0FBRyxFQUFHLElBQUssR0FBSSxFQUM1Q3FsRCxFQUFLQSxJQUFJLEVBQUtyQixHQUFJcUIsR0FBSyxJQUFNcmxELEdBQUcsRUFBRyxLQUFNLEdBQUksRUFDN0NxbEQsRUFBS0EsSUFBSSxFQUFLckIsR0FBSXFCLEdBQUssSUFBTXpnRSxHQUFHLEVBQUcsSUFBTW9iLEVBQUUsSUFBSSxJQUFLLEdBQUksRUFDeERxbEQsRUFBS0EsSUFBSSxFQUFLckIsR0FBSXFCLEdBQUssSUFBS3pnRSxFQUFFLEtBQU0sR0FBSSxJQUV4Q3lnRSxFQUFLQSxJQUFJLEVBQUtyQixHQUFJcUIsR0FBSyxJQUFNcmxELEdBQUcsR0FBSSxLQUFNLEdBQUksRUFDOUNxbEQsRUFBS0EsSUFBSSxFQUFLckIsR0FBSXFCLEdBQUssSUFBTXJsRCxHQUFHLEVBQUcsS0FBTSxHQUFJLEVBQzdDcWxELEVBQUtBLElBQUksRUFBS3JCLEdBQUlxQixHQUFLLElBQUtybEQsRUFBRSxLQUFNLEdBQUksR0FHMUMsTUFBTyxDQUFDcWxELENBQ1QsQ0FDQSxPQUFBdkIsRUFBTSxNQUFRRSxFQUNkRixFQUFNLEtBQU9xQixFQUNickIsRUFBTSxJQUFNd0IsRUFDWnhCLEVBQU0sSUFBTXlCLEVBQ0x6QixDQUNQLElBRUkwQixHQUFvQixVQUFlLENBQ3ZDLElBQUlDLEVBQVUsQ0FBQSxFQUNkQSxFQUFRLFFBQVUsUUFFbEIsU0FBU0MsRUFBUXBnRCxFQUFjemhCLEVBQXlCLENBRXZELFFBREkrMkQsRUFBSXQxQyxFQUFFLE1BQU0sR0FBRyxFQUFHcWdELEVBQUk5aEUsRUFBRSxNQUFNLEdBQUcsRUFDN0JuRCxFQUFJLEVBQUdzZixFQUFJLEVBQUcsRUFBSSxLQUFLLElBQUk0NkMsRUFBRSxPQUFRK0ssRUFBRSxNQUFNLEVBQUdqbEUsRUFBSSxFQUFHLEVBQUVBLEVBQUcsQ0FDbkUsR0FBSXNmLEVBQUk0NkMsRUFBRWw2RCxDQUFDLEVBQUUsT0FBU2lsRSxFQUFFamxFLENBQUMsRUFBRSxPQUFTLE9BQU9zZixFQUMzQyxHQUFHNDZDLEVBQUVsNkQsQ0FBQyxHQUFLaWxFLEVBQUVqbEUsQ0FBQyxFQUFHLE9BQU9rNkQsRUFBRWw2RCxDQUFDLEVBQUlpbEUsRUFBRWpsRSxDQUFDLEVBQUksR0FBSyxDQUMzQyxDQUNELE9BQU9rNkQsRUFBRSxPQUFTK0ssRUFBRSxNQUNyQixDQUNBLFNBQVNDLEVBQVFubUUsRUFBeUIsQ0FDekMsR0FBR0EsRUFBRSxPQUFPQSxFQUFFLE9BQVMsQ0FBQyxHQUFLLElBQUssT0FBUUEsRUFBRSxNQUFNLEVBQUUsRUFBRSxFQUFFLFFBQVEsR0FBRyxJQUFNLEdBQU1BLEVBQUltbUUsRUFBUW5tRSxFQUFFLE1BQU0sRUFBRyxFQUFFLENBQUMsRUFDekcsSUFBSXVnQixFQUFJdmdCLEVBQUUsWUFBWSxHQUFHLEVBQ3pCLE9BQVF1Z0IsSUFBTSxHQUFNdmdCLEVBQUlBLEVBQUUsTUFBTSxFQUFHdWdCLEVBQUUsQ0FBQyxDQUN2QyxDQUVBLFNBQVNtMUMsRUFBUzExRCxFQUF5QixDQUMxQyxHQUFHQSxFQUFFLE9BQU9BLEVBQUUsT0FBUyxDQUFDLEdBQUssSUFBSyxPQUFPMDFELEVBQVMxMUQsRUFBRSxNQUFNLEVBQUcsRUFBRSxDQUFDLEVBQ2hFLElBQUl1Z0IsRUFBSXZnQixFQUFFLFlBQVksR0FBRyxFQUN6QixPQUFRdWdCLElBQU0sR0FBTXZnQixFQUFJQSxFQUFFLE1BQU11Z0IsRUFBRSxDQUFDLENBQ3BDLENBU0EsU0FBUzZsRCxFQUFlck8sRUFBZ0JwekQsRUFBc0IsQ0FDMUQsT0FBT0EsR0FBUyxXQUFVQSxFQUFPLElBQUksS0FBS0EsQ0FBSSxHQUNqRCxJQUFJMGhFLEVBQWlCMWhFLEVBQUssV0FDMUIwaEUsRUFBTUEsR0FBTyxFQUFJMWhFLEVBQUssV0FBVSxFQUNoQzBoRSxFQUFNQSxHQUFPLEVBQUsxaEUsRUFBSyxXQUFVLElBQUssRUFDdENvekQsRUFBSSxZQUFZLEVBQUdzTyxDQUFHLEVBQ3RCLElBQUlDLEVBQWtCM2hFLEVBQUssWUFBYSxFQUFHLEtBQzNDMmhFLEVBQU1BLEdBQU8sRUFBSzNoRSxFQUFLLFNBQVEsRUFBRyxFQUNsQzJoRSxFQUFNQSxHQUFPLEVBQUkzaEUsRUFBSyxRQUFPLEVBQzdCb3pELEVBQUksWUFBWSxFQUFHdU8sQ0FBRyxDQUN2QixDQUdBLFNBQVNDLEVBQWV4TyxFQUF5QixDQUNoRCxJQUFJc08sRUFBTXRPLEVBQUksV0FBVyxDQUFDLEVBQUksTUFDMUJ1TyxFQUFNdk8sRUFBSSxXQUFXLENBQUMsRUFBSSxNQUMxQmwyRCxFQUFNLElBQUksS0FDVnNELEVBQUltaEUsRUFBTSxHQUFNQSxLQUFTLEVBQzdCLElBQUk5TixFQUFJOE4sRUFBTSxHQUFNQSxLQUFTLEVBQzdCemtFLEVBQUksZ0JBQWdCLENBQUMsRUFDckJBLEVBQUksWUFBWXlrRSxFQUFNLElBQUksRUFDMUJ6a0UsRUFBSSxTQUFTMjJELEVBQUUsQ0FBQyxFQUNoQjMyRCxFQUFJLFFBQVFzRCxDQUFDLEVBQ2IsSUFBSSsrRCxFQUFJbUMsRUFBTSxHQUFNQSxLQUFTLEVBQzdCLElBQUlwQyxHQUFJb0MsRUFBTSxHQUFNLE9BQUFBLEtBQVMsRUFDN0J4a0UsRUFBSSxTQUFTd2tFLENBQUcsRUFDaEJ4a0UsRUFBSSxXQUFXb2lFLEVBQUMsRUFDaEJwaUUsRUFBSSxXQUFXcWlFLEdBQUcsQ0FBQyxFQUNacmlFLENBQ1IsQ0FDQSxTQUFTMmtFLEVBQWtCN08sRUFBeUIsQ0FDbkQ4TyxHQUFVOU8sRUFBTSxDQUFDLEVBR2pCLFFBRkkxeUQsRUFBVyxDQUFBLEVBQ1h5aEUsRUFBUSxFQUNOL08sRUFBSyxHQUFLQSxFQUFLLE9BQVMsR0FBRyxDQUNoQyxJQUFJdDNELEVBQU9zM0QsRUFBSyxXQUFXLENBQUMsRUFDeEJnUCxFQUFLaFAsRUFBSyxXQUFXLENBQUMsRUFBR2lQLEVBQU1qUCxFQUFLLEVBQUlnUCxFQUN4QzNtRSxFQUFJLENBQUEsRUFDUixPQUFPSyxFQUFJLENBRVYsSUFBSyxPQUNKcW1FLEVBQVEvTyxFQUFLLFdBQVcsQ0FBQyxFQUN0QitPLEVBQVEsSUFBRzFtRSxFQUFFLE1BQVEyM0QsRUFBSyxXQUFXLENBQUMsR0FFdENnUCxFQUFLLElBQ0pELEVBQVEsSUFBRzFtRSxFQUFFLE1BQVEyM0QsRUFBSyxXQUFXLENBQUMsR0FDdEMrTyxFQUFRLElBQUcxbUUsRUFBRSxNQUFRMjNELEVBQUssV0FBVyxDQUFDLElBRXZDMzNELEVBQUUsUUFBT0EsRUFBRSxHQUFLLElBQUksS0FBS0EsRUFBRSxNQUFNLEdBQUksR0FFekMsS0FDQSxDQUNEMjNELEVBQUssRUFBSWlQLEVBQ1QzaEUsRUFBRTVFLENBQUksRUFBSUwsQ0FDVixDQUNELE9BQU9pRixDQUNSLENBQ0EsSUFBSTRoRSxFQUNKLFNBQVNDLEdBQVMsQ0FBRSxPQUFPRCxJQUFPQSxFQUFLLENBQUEsRUFBTSxDQUM3QyxTQUFTRSxFQUFNQyxFQUFtQmxwRSxFQUEwQyxDQUM1RSxHQUFHa3BFLEVBQUssQ0FBQyxHQUFLLElBQVFBLEVBQUssQ0FBQyxHQUFLLEdBQU0sT0FBT0MsR0FBVUQsRUFBTWxwRSxDQUFPLEVBQ3JFLElBQUlrcEUsRUFBSyxDQUFDLEVBQUksS0FBUyxNQUFTQSxFQUFLLENBQUMsRUFBRSxLQUFTLElBQU0sT0FBT0UsR0FBVUYsRUFBTWxwRSxDQUFPLEVBQ3JGLEdBQUdrcEUsRUFBSyxPQUFTLElBQUssTUFBTSxJQUFJLE1BQU0saUJBQW1CQSxFQUFLLE9BQVMsUUFBUSxFQUMvRSxJQUFJRyxFQUFPLEVBQ1BDLEVBQU0sSUFDTkMsRUFBTyxFQUNQQyxFQUFnQixFQUNoQkMsRUFBWSxFQUNaQyxHQUFnQixFQUNoQkMsRUFBYyxFQUVkQyxFQUE4QixDQUFBLEVBRzlCL1AsR0FBeUJxUCxFQUFLLE1BQU0sRUFBRSxHQUFHLEVBQzdDUCxHQUFVOU8sR0FBTSxDQUFDLEVBR2pCLElBQUlnUSxHQUFLQyxFQUFlalEsRUFBSSxFQUU1QixPQURBd1AsRUFBT1EsR0FBRyxDQUFDLEVBQ0pSLEVBQUksQ0FDVixJQUFLLEdBQUdDLEVBQU0sSUFBSyxNQUFPLElBQUssR0FBR0EsRUFBTSxLQUFNLE1BQzlDLElBQUssR0FBRyxHQUFHTyxHQUFHLENBQUMsR0FBSyxFQUFHLE9BQU9WLEdBQVVELEVBQU1scEUsQ0FBTyxFQUVyRCxRQUFTLE1BQU0sSUFBSSxNQUFNLHNDQUF3Q3FwRSxDQUFJLENBQ3RFLENBR0dDLElBQVEsTUFBT3pQLEdBQWNxUCxFQUFLLE1BQU0sRUFBRUksQ0FBRyxFQUFlWCxHQUFVOU8sR0FBTSxFQUFnQixHQUUvRixJQUFJalIsR0FBc0JzZ0IsRUFBSyxNQUFNLEVBQUVJLENBQUcsRUFFMUNTLEVBQWFsUSxHQUFNd1AsQ0FBSSxFQUd2QixJQUFJVyxHQUFxQm5RLEdBQUssV0FBVyxFQUFHLEdBQUcsRUFDL0MsR0FBR3dQLElBQVMsR0FBS1csS0FBWSxFQUFHLE1BQU0sSUFBSSxNQUFNLHVDQUF5Q0EsRUFBTyxFQUdoR25RLEdBQUssR0FBSyxFQUdWNFAsRUFBWTVQLEdBQUssV0FBVyxFQUFHLEdBQUcsRUFHbENBLEdBQUssR0FBSyxFQUdWQSxHQUFLLElBQUksV0FBWSwyQkFBMkIsRUFHaEQ2UCxHQUFnQjdQLEdBQUssV0FBVyxFQUFHLEdBQUcsRUFHdEMwUCxFQUFPMVAsR0FBSyxXQUFXLEVBQUcsR0FBRyxFQUc3QjhQLEVBQWM5UCxHQUFLLFdBQVcsRUFBRyxHQUFHLEVBR3BDMlAsRUFBZ0IzUCxHQUFLLFdBQVcsRUFBRyxHQUFHLEVBR3RDLFFBQVF3RixHQUFJLEdBQUk1RSxHQUFJLEVBQUdBLEdBQUksTUFDMUI0RSxHQUFJeEYsR0FBSyxXQUFXLEVBQUcsR0FBRyxFQUN2QixFQUFBd0YsR0FBRSxJQUYwQixFQUFFNUUsR0FHakNtUCxFQUFVblAsRUFBQyxFQUFJNEUsR0FJaEIsSUFBSTRLLEdBQThCQyxFQUFVaEIsRUFBTUksQ0FBRyxFQUVyRGEsRUFBV1IsRUFBYUgsRUFBZVMsR0FBU1gsRUFBS00sQ0FBUyxFQUc5RCxJQUFJUSxHQUE2QkMsRUFBaUJKLEdBQVNSLEVBQVdHLEVBQVdOLENBQUcsRUFFcEZjLEdBQVlYLENBQVMsRUFBRSxLQUFPLGFBQzNCRixFQUFPLEdBQUtHLEtBQWtCWSxJQUFZRixHQUFZVixFQUFhLEVBQUUsS0FBTyxZQUMvRVUsR0FBWVIsRUFBVSxDQUFDLENBQUMsRUFBRSxLQUFPLE9BQ2pDUSxHQUFZLFVBQVlSLEVBQ3hCUSxHQUFZLElBQU1kLEVBR2xCLElBQUlpQixHQUFxQixDQUFFLEVBQUVDLEdBQTBCLENBQUEsRUFBSUMsR0FBNkIsQ0FBRSxFQUFFQyxHQUE4QixHQUMxSEMsRUFBZWxCLEVBQVdXLEdBQWFILEdBQVNPLEdBQU9qQixFQUFNZ0IsR0FBT0UsR0FBV2YsRUFBYSxFQUU1RmtCLEVBQWlCSCxHQUFXQyxHQUFXRixFQUFLLEVBQzVDQSxHQUFNLE1BQUssRUFFWCxJQUFJcmpFLEdBQUksQ0FDUCxVQUFXc2pFLEdBQ1gsVUFBV0MsRUFDWixFQUdBLE9BQUcxcUUsR0FBV0EsRUFBUSxNQUFLbUgsR0FBRSxJQUFNLENBQUMsT0FBUXloRCxHQUFRLFFBQVNxaEIsRUFBTyxHQUM3RDlpRSxFQUNQLENBR0EsU0FBUzJpRSxFQUFlalEsRUFBc0MsQ0FDN0QsR0FBR0EsRUFBS0EsRUFBSyxDQUFDLEdBQUssSUFBUUEsRUFBS0EsRUFBSyxFQUFJLENBQUMsR0FBSyxHQUFNLE1BQU8sQ0FBQyxFQUFHLENBQUMsRUFFakVBLEVBQUssSUFBSWdSLEdBQWtCLG9CQUFvQixFQUkvQ2hSLEVBQUssR0FBSyxHQUdWLElBQUl3UCxFQUFrQnhQLEVBQUssV0FBVyxFQUFHLEdBQUcsRUFFNUMsTUFBTyxDQUFDQSxFQUFLLFdBQVcsRUFBRSxHQUFHLEVBQUd3UCxDQUFJLENBQ3JDLENBQ0EsU0FBU1UsRUFBYWxRLEVBQWlCd1AsRUFBMEIsQ0FDaEUsSUFBSXlCLEVBQVEsRUFPWixPQUhBalIsRUFBSyxHQUFLLEVBR0ZpUixFQUFRalIsRUFBSyxXQUFXLENBQUMsRUFBQyxDQUNqQyxJQUFLLEdBQU0sR0FBR3dQLEdBQVEsRUFBRyxNQUFNLElBQUksTUFBTSxnQ0FBa0N5QixDQUFLLEVBQUcsTUFDbkYsSUFBSyxJQUFNLEdBQUd6QixHQUFRLEVBQUcsTUFBTSxJQUFJLE1BQU0saUNBQW1DeUIsQ0FBSyxFQUFHLE1BQ3BGLFFBQVMsTUFBTSxJQUFJLE1BQU0sc0NBQXdDQSxDQUFLLENBQ3RFLENBR0RqUixFQUFLLElBQUksT0FBUSxxQkFBcUIsRUFHdENBLEVBQUssSUFBSSxlQUFnQixZQUFZLENBQ3RDLENBR0EsU0FBU3FRLEVBQVVoQixFQUFtQkksRUFBb0MsQ0FHekUsUUFGSXlCLEVBQVcsS0FBSyxLQUFLN0IsRUFBSyxPQUFPSSxDQUFHLEVBQUUsRUFDdENXLEVBQThCLENBQUEsRUFDMUI5bUUsRUFBRSxFQUFHQSxFQUFJNG5FLEVBQVUsRUFBRTVuRSxFQUFHOG1FLEVBQVE5bUUsRUFBRSxDQUFDLEVBQUkrbEUsRUFBSyxNQUFNL2xFLEVBQUVtbUUsR0FBS25tRSxFQUFFLEdBQUdtbUUsQ0FBRyxFQUN6RSxPQUFBVyxFQUFRYyxFQUFTLENBQUMsRUFBSTdCLEVBQUssTUFBTTZCLEVBQVN6QixDQUFHLEVBQ3RDVyxDQUNSLENBR0EsU0FBU1csRUFBaUJJLEVBQXFCQyxFQUFzQlQsRUFBa0MsQ0FJdEcsUUFISXJuRSxFQUFJLEVBQUcsRUFBSSxFQUFHaWxFLEVBQUksRUFBR04sRUFBSSxFQUFHck4sR0FBSSxFQUFHeVEsRUFBS1YsRUFBTSxPQUM5Q1csRUFBd0IsQ0FBQSxFQUFJOUwsR0FBc0IsR0FFaERsOEQsRUFBSStuRSxFQUFJLEVBQUUvbkUsRUFBS2dvRSxFQUFJaG9FLENBQUMsRUFBRWs4RCxHQUFFbDhELENBQUMsRUFBRUEsRUFBRzhuRSxFQUFHOW5FLENBQUMsRUFBRXFuRSxFQUFNcm5FLENBQUMsRUFFakQsS0FBTXMzRCxHQUFJNEUsR0FBRSxPQUFRLEVBQUU1RSxHQUNyQnQzRCxFQUFJazhELEdBQUU1RSxFQUFDLEVBQ1AsRUFBSXVRLEVBQUc3bkUsQ0FBQyxFQUFFLEVBQUdpbEUsRUFBSTRDLEVBQUc3bkUsQ0FBQyxFQUFFLEVBQUcya0UsRUFBSWtELEVBQUc3bkUsQ0FBQyxFQUFFLEVBQ2pDZ29FLEVBQUlob0UsQ0FBQyxJQUFNQSxJQUNWLElBQU0sSUFBbUJnb0UsRUFBSSxDQUFDLElBQU0sSUFBR0EsRUFBSWhvRSxDQUFDLEVBQUlnb0UsRUFBSSxDQUFDLEdBQ3JEL0MsSUFBTSxJQUFNK0MsRUFBSS9DLENBQUMsSUFBTUEsSUFBRytDLEVBQUlob0UsQ0FBQyxFQUFJZ29FLEVBQUkvQyxDQUFDLElBRXpDTixJQUFNLEtBQWlCcUQsRUFBSXJELENBQUMsRUFBSTNrRSxHQUNoQyxJQUFNLElBQU1BLEdBQUtnb0UsRUFBSWhvRSxDQUFDLElBQUtnb0UsRUFBSSxDQUFDLEVBQUlBLEVBQUlob0UsQ0FBQyxFQUFNazhELEdBQUUsWUFBWSxDQUFDLEVBQUk1RSxJQUFHNEUsR0FBRSxLQUFLLENBQUMsR0FDN0UrSSxJQUFNLElBQU1qbEUsR0FBS2dvRSxFQUFJaG9FLENBQUMsSUFBS2dvRSxFQUFJL0MsQ0FBQyxFQUFJK0MsRUFBSWhvRSxDQUFDLEVBQU1rOEQsR0FBRSxZQUFZK0ksQ0FBQyxFQUFJM04sSUFBRzRFLEdBQUUsS0FBSytJLENBQUMsR0FFakYsSUFBSWpsRSxFQUFFLEVBQUdBLEVBQUkrbkUsRUFBSSxFQUFFL25FLEVBQU1nb0UsRUFBSWhvRSxDQUFDLElBQU1BLElBQ2hDaWxFLElBQU0sSUFBbUIrQyxFQUFJL0MsQ0FBQyxJQUFNQSxFQUFHK0MsRUFBSWhvRSxDQUFDLEVBQUlnb0UsRUFBSS9DLENBQUMsRUFDaEQsSUFBTSxJQUFNK0MsRUFBSSxDQUFDLElBQU0sSUFBR0EsRUFBSWhvRSxDQUFDLEVBQUlnb0UsRUFBSSxDQUFDLElBR2pELElBQUlob0UsRUFBRSxFQUFHQSxFQUFJK25FLEVBQUksRUFBRS9uRSxFQUNsQixHQUFHNm5FLEVBQUc3bkUsQ0FBQyxFQUFFLE9BQVMsRUFFbEIsSUFEQXMzRCxHQUFJdDNELEVBQ0RzM0QsSUFBSzBRLEVBQUkxUSxFQUFDLEVBQUcsR0FDZkEsR0FBSTBRLEVBQUkxUSxFQUFDLEVBQ1R3USxFQUFHOW5FLENBQUMsRUFBSThuRSxFQUFHeFEsRUFBQyxFQUFJLElBQU13USxFQUFHOW5FLENBQUMsUUFDbEJzM0QsS0FBTSxHQUFZMFEsRUFBSTFRLEVBQUMsSUFBWixJQUFpQkEsSUFBSzBRLEVBQUkxUSxFQUFDLEdBQy9DMFEsRUFBSWhvRSxDQUFDLEVBQUksR0FJVixJQURBOG5FLEVBQUcsQ0FBQyxHQUFLLElBQ0w5bkUsRUFBRSxFQUFHQSxFQUFJK25FLEVBQUksRUFBRS9uRSxFQUNmNm5FLEVBQUc3bkUsQ0FBQyxFQUFFLE9BQVMsSUFBZ0I4bkUsRUFBRzluRSxDQUFDLEdBQUssSUFFN0MsQ0FFQSxTQUFTaW9FLEVBQWVob0QsRUFBb0Jpb0QsRUFBc0JDLEVBQStCLENBS2hHLFFBSklqb0QsRUFBUUQsRUFBTSxNQUFPNVMsRUFBTzRTLEVBQU0sS0FFbENqYyxFQUFJLENBQUEsRUFDSmk4QyxFQUFNLy9CLEVBQ0ppb0QsR0FBUTk2RCxFQUFPLEdBQUs0eUMsR0FBTyxHQUNoQ2o4QyxFQUFFLEtBQUtra0UsRUFBUSxNQUFNam9CLEVBQU1tb0IsRUFBTW5vQixFQUFNbW9CLEVBQU9BLENBQUksQ0FBQyxFQUNuRC82RCxHQUFRKzZELEVBQ1Jub0IsRUFBTW9vQixHQUFjRixFQUFNbG9CLEVBQU0sQ0FBQyxFQUVsQyxPQUFHajhDLEVBQUUsU0FBVyxFQUFXc2tFLEdBQVEsQ0FBQyxFQUM1QjFPLEdBQVE1MUQsQ0FBQyxFQUFFLE1BQU0sRUFBR2ljLEVBQU0sSUFBSSxDQUN2QyxDQUlBLFNBQVMrbUQsRUFBVy9tQixFQUFnQnNvQixFQUFnQnpCLEVBQTZCWCxFQUFnQk0sRUFBb0IsQ0FDcEgsSUFBSXZLLEVBQWVpTCxFQUNuQixHQUFHbG5CLElBQVFrbkIsR0FDVixHQUFHb0IsSUFBUSxFQUFHLE1BQU0sSUFBSSxNQUFNLG1DQUFtQyxVQUN4RHRvQixJQUFRLEdBQWlCLENBQ2xDLElBQUl1b0IsRUFBUzFCLEVBQVE3bUIsQ0FBRyxFQUFHc1gsSUFBSzRPLElBQU0sR0FBRyxFQUN6QyxHQUFHLENBQUNxQyxFQUFRLE9BQ1osUUFBUXhvRSxFQUFJLEVBQUdBLEVBQUl1M0QsS0FDZDJFLEVBQUltTSxHQUFjRyxFQUFPeG9FLEVBQUUsQ0FBQyxLQUFPbW5FLEVBRGxCLEVBQUVubkUsRUFFdkJ5bUUsRUFBVSxLQUFLdkssQ0FBQyxFQUVqQjhLLEVBQVdxQixHQUFjRyxFQUFPckMsRUFBSSxDQUFDLEVBQUVvQyxFQUFNLEVBQUd6QixFQUFTWCxFQUFLTSxDQUFTLENBQ3ZFLENBQ0YsQ0FHQSxTQUFTZ0MsRUFBZ0IzQixFQUE2QjVtRCxFQUFrQnVtRCxFQUE2Qk4sRUFBZ0J1QyxFQUEwQyxDQUM5SixJQUFJNVIsRUFBd0IsQ0FBQSxFQUFJNlIsRUFBMkIsR0FDdkRELElBQU1BLEVBQU8sSUFDakIsSUFBSUUsR0FBVXpDLEVBQU0sRUFBRzdPLEVBQUksRUFBR2lLLEVBQUssRUFDbkMsSUFBSWpLLEVBQUVwM0MsRUFBT28zQyxHQUFHLEdBQUksQ0FDbkJvUixFQUFLcFIsQ0FBQyxFQUFJLEdBQ1ZSLEVBQUlBLEVBQUksTUFBTSxFQUFJUSxFQUNsQnFSLEVBQVUsS0FBSzdCLEVBQVF4UCxDQUFDLENBQUMsRUFDekIsSUFBSXVSLEdBQU9wQyxFQUFVLEtBQUssTUFBTW5QLEVBQUUsRUFBRTZPLENBQUcsQ0FBQyxFQUV4QyxHQURBNUUsRUFBT2pLLEVBQUUsRUFBS3NSLEdBQ1h6QyxFQUFNLEVBQUk1RSxFQUFJLE1BQU0sSUFBSSxNQUFNLHlCQUEyQmpLLEVBQUksTUFBTTZPLENBQUcsRUFDekUsR0FBRyxDQUFDVyxFQUFRK0IsRUFBSSxFQUFHLE1BQ25CdlIsRUFBSStRLEdBQWN2QixFQUFRK0IsRUFBSSxFQUFHdEgsQ0FBRSxDQUNuQyxDQUNELE1BQU8sQ0FBQyxNQUFPekssRUFBSyxLQUFLZ1MsR0FBVyxDQUFDSCxDQUFTLENBQUMsQ0FBQyxDQUNqRCxDQUdBLFNBQVN6QixFQUFpQkosRUFBNkJSLEVBQXNCRyxFQUE2Qk4sRUFBK0IsQ0FDeEksSUFBSTRDLEVBQUtqQyxFQUFRLE9BQVFHLEVBQThCLENBQUUsRUFDckR5QixFQUEwQixDQUFBLEVBQUk1UixHQUF3QixDQUFBLEVBQUk2UixFQUFnQyxDQUFBLEVBQzFGQyxFQUFVekMsRUFBTSxFQUFHbm1FLEdBQUUsRUFBR3MzRCxHQUFFLEVBQUc5M0MsR0FBRSxFQUFHK2hELEdBQUcsRUFDekMsSUFBSXZoRSxHQUFFLEVBQUdBLEdBQUkrb0UsRUFBSSxFQUFFL29FLEdBR2xCLEdBRkE4MkQsR0FBTyxDQUFFLEVBQ1R0M0MsR0FBS3hmLEdBQUlzbUUsRUFBZTltRCxJQUFLdXBELElBQUl2cEQsSUFBR3VwRCxHQUNqQyxDQUFBTCxFQUFLbHBELEVBQUMsRUFDVCxDQUFBbXBELEVBQVksQ0FBQSxFQUNaLElBQUlLLEdBQU8sQ0FBQSxFQUNYLElBQUkxUixHQUFFOTNDLEdBQUc4M0MsSUFBRyxHQUFJLENBQ2YwUixHQUFLMVIsRUFBQyxFQUFJLEdBQ1ZvUixFQUFLcFIsRUFBQyxFQUFJLEdBQ1ZSLEdBQUlBLEdBQUksTUFBTSxFQUFJUSxHQUNsQnFSLEVBQVUsS0FBSzdCLEVBQVF4UCxFQUFDLENBQUMsRUFDekIsSUFBSXVSLEdBQWtCcEMsRUFBVSxLQUFLLE1BQU1uUCxHQUFFLEVBQUU2TyxDQUFHLENBQUMsRUFFbkQsR0FEQTVFLEdBQU9qSyxHQUFFLEVBQUtzUixFQUNYekMsRUFBTSxFQUFJNUUsR0FBSSxNQUFNLElBQUksTUFBTSx5QkFBMkJqSyxHQUFJLE1BQU02TyxDQUFHLEVBR3pFLEdBRkcsQ0FBQ1csRUFBUStCLEVBQUksSUFDaEJ2UixHQUFJK1EsR0FBY3ZCLEVBQVErQixFQUFJLEVBQUd0SCxFQUFFLEVBQ2hDeUgsR0FBSzFSLEVBQUMsR0FBRyxLQUNaLENBQ0QyUCxFQUFZem5ELEVBQUMsRUFBSyxDQUFDLE1BQU9zM0MsR0FBSyxLQUFLZ1MsR0FBVyxDQUFDSCxDQUFTLENBQUMsQ0FBQyxFQUU1RCxPQUFPMUIsQ0FDUixDQUdBLFNBQVNPLEVBQWVsQixFQUFzQlcsRUFBNEJILEVBQTZCTyxFQUF5QmpCLEVBQU1nQixFQUFPRSxFQUFXYSxHQUFNLENBSTdKLFFBSEljLEVBQWdCLEVBQUdsQixFQUFNVixFQUFNLE9BQU8sRUFBRSxFQUN4Q21CLEdBQVN2QixFQUFZWCxDQUFTLEVBQUUsS0FDaEN0bUUsR0FBSSxFQUFHa3BFLEdBQVUsRUFBRzl1RSxHQUNsQjRGLEdBQUl3b0UsR0FBTyxPQUFReG9FLElBQUksSUFBSyxDQUNqQyxJQUFJMDJELEdBQXlCOFIsR0FBTyxNQUFNeG9FLEdBQUdBLEdBQUUsR0FBRyxFQUNsRHdsRSxHQUFVOU8sR0FBTSxFQUFFLEVBQ2xCd1MsR0FBVXhTLEdBQUssV0FBVyxDQUFDLEVBQzNCdDhELEdBQU8rdUUsR0FBVXpTLEdBQUssRUFBRXdTLEdBQVFuQixDQUFFLEVBQ2xDVixFQUFNLEtBQUtqdEUsRUFBSSxFQUNmLElBQUk0SixHQUFrQixDQUNyQixLQUFPNUosR0FDUCxLQUFPczhELEdBQUssV0FBVyxDQUFDLEVBQ3hCLE1BQU9BLEdBQUssV0FBVyxDQUFDLEVBQ3hCLEVBQU9BLEdBQUssV0FBVyxFQUFHLEdBQUcsRUFDN0IsRUFBT0EsR0FBSyxXQUFXLEVBQUcsR0FBRyxFQUM3QixFQUFPQSxHQUFLLFdBQVcsRUFBRyxHQUFHLEVBQzdCLE1BQU9BLEdBQUssV0FBVyxFQUFFLEVBQ3pCLE1BQU9BLEdBQUssV0FBVyxFQUFHLEdBQUcsRUFDN0IsTUFBTyxFQUNQLEtBQU0sQ0FDVCxFQUNNMFMsR0FBbUIxUyxHQUFLLFdBQVcsQ0FBQyxFQUFJQSxHQUFLLFdBQVcsQ0FBQyxFQUFJQSxHQUFLLFdBQVcsQ0FBQyxFQUFJQSxHQUFLLFdBQVcsQ0FBQyxFQUNwRzBTLEtBQVUsSUFBR3BsRSxHQUFFLEdBQUtxbEUsRUFBVTNTLEdBQU1BLEdBQUssRUFBRSxDQUFDLEdBQy9DLElBQUk0UyxHQUFtQjVTLEdBQUssV0FBVyxDQUFDLEVBQUlBLEdBQUssV0FBVyxDQUFDLEVBQUlBLEdBQUssV0FBVyxDQUFDLEVBQUlBLEdBQUssV0FBVyxDQUFDLEVBQ3BHNFMsS0FBVSxJQUFHdGxFLEdBQUUsR0FBS3FsRSxFQUFVM1MsR0FBTUEsR0FBSyxFQUFFLENBQUMsR0FDL0MxeUQsR0FBRSxNQUFRMHlELEdBQUssV0FBVyxFQUFHLEdBQUcsRUFDaEMxeUQsR0FBRSxLQUFPMHlELEdBQUssV0FBVyxFQUFHLEdBQUcsRUFDNUIxeUQsR0FBRSxLQUFPLEdBQUtBLEdBQUUsTUFBUSxJQUFLQSxHQUFFLEtBQU9BLEdBQUUsS0FBTyxFQUFHQSxHQUFFLE1BQVFtakUsRUFBWW5qRSxHQUFFLEtBQU8sSUFDakZBLEdBQUUsT0FBUyxHQUNiaWxFLEVBQWdCamxFLEdBQUUsTUFDZm9pRSxFQUFPLEdBQUs2QyxJQUFrQjlCLElBQVlGLEVBQVlnQyxDQUFhLEVBQUUsS0FBTyxnQkFFdEVqbEUsR0FBRSxNQUFRLE1BQ25CQSxHQUFFLFFBQVUsTUFDVGlqRSxFQUFZampFLEdBQUUsS0FBSyxJQUFNLFNBQVdpakUsRUFBWWpqRSxHQUFFLEtBQUssRUFBSXlrRSxFQUFnQjNCLEVBQVM5aUUsR0FBRSxNQUFPaWpFLEVBQVksVUFBV0EsRUFBWSxHQUFHLEdBQ3RJQSxFQUFZampFLEdBQUUsS0FBSyxFQUFFLEtBQU9BLEdBQUUsS0FDOUJBLEdBQUUsUUFBV2lqRSxFQUFZampFLEdBQUUsS0FBSyxFQUFFLEtBQUssTUFBTSxFQUFFQSxHQUFFLElBQUksSUFFckRBLEdBQUUsUUFBVSxVQUNUQSxHQUFFLEtBQU8sRUFBR0EsR0FBRSxLQUFPLEVBQ2hCaWxFLElBQWtCOUIsR0FBY25qRSxHQUFFLFFBQVVtakUsR0FBY0YsRUFBWWdDLENBQWEsSUFDMUZqbEUsR0FBRSxRQUFVaWtFLEVBQWVqa0UsR0FBR2lqRSxFQUFZZ0MsQ0FBYSxFQUFFLE1BQU9oQyxFQUFZa0IsRUFBSSxHQUFHLENBQUUsR0FBRSxJQUFJLElBRzFGbmtFLEdBQUUsU0FBU3doRSxHQUFVeGhFLEdBQUUsUUFBUyxDQUFDLEVBQ3BDb2pFLEVBQU1odEUsRUFBSSxFQUFJNEosR0FDZHNqRSxFQUFVLEtBQUt0akUsRUFBQyxDQUNoQixDQUNGLENBRUEsU0FBU3FsRSxFQUFVM1MsRUFBMEI2UyxFQUE0QixDQUN4RSxPQUFPLElBQUksTUFBVUMsR0FBZTlTLEVBQUs2UyxFQUFPLENBQUMsRUFBRSxJQUFLLEtBQUssSUFBSSxFQUFFLEVBQUUsRUFBRUMsR0FBZTlTLEVBQUs2UyxDQUFNLEVBQUUsSUFBUSxhQUFhLEdBQUksQ0FDN0gsQ0FFQSxTQUFTRSxFQUFVaFYsRUFBcUI1M0QsRUFBeUIsQ0FDaEUsT0FBQWdwRSxJQUNPQyxFQUFNRixFQUFHLGFBQWFuUixDQUFRLEVBQUc1M0QsQ0FBTyxDQUNoRCxDQUVBLFNBQVM2c0UsRUFBS2hULEVBQTBCNzVELEVBQXlCLENBQ2hFLElBQUl1QyxFQUFPdkMsR0FBV0EsRUFBUSxLQUk5QixPQUhJdUMsR0FDQTY1RCxJQUFXLE9BQU8sU0FBU3ZDLENBQUksSUFBR3QzRCxFQUFPLFVBRXRDQSxHQUFRLFNBQVEsQ0FDdEIsSUFBSyxPQUEyRixPQUFPcXFFLEVBQVUvUyxFQUFNNzVELENBQU8sRUFDOUgsSUFBSyxTQUFpSCxPQUFPaXBFLEVBQU12TSxHQUFJUCxHQUFjdEMsQ0FBSSxDQUFDLEVBQUc3NUQsQ0FBTyxFQUNwSyxJQUFLLFNBQWtHLE9BQU9pcEUsRUFBTXZNLEdBQUk3QyxDQUFJLEVBQUc3NUQsQ0FBTyxDQUN0SSxDQUNELE9BQU9pcEUsRUFBa0VwUCxFQUFNNzVELENBQU8sQ0FDdkYsQ0FFQSxTQUFTOHNFLEVBQVNDLEVBQXNCMXZFLEVBQXdCLENBQy9ELElBQUk4SixFQUFJOUosR0FBUSxDQUFFLEVBQUU2bEQsRUFBTy83QyxFQUFFLE1BQVEsYUFHckMsR0FGSTRsRSxFQUFJLFlBQVdBLEVBQUksVUFBWSxDQUFBLEdBQy9CQSxFQUFJLFlBQVdBLEVBQUksVUFBWSxDQUFBLEdBQ2hDQSxFQUFJLFVBQVUsU0FBV0EsRUFBSSxVQUFVLE9BQVEsTUFBTSxJQUFJLE1BQU0sNEJBQTRCLEVBQzNGQSxFQUFJLFVBQVUsU0FBVyxJQUMzQkEsRUFBSSxVQUFVLENBQUMsRUFBSTdwQixFQUFPLElBQzFCNnBCLEVBQUksVUFBVSxDQUFDLEVBQUssQ0FBRSxLQUFNN3BCLEVBQU0sS0FBTSxDQUFDLEdBRXZDLzdDLEVBQUUsUUFBTzRsRSxFQUFJLFVBQVUsQ0FBQyxFQUFFLE1BQVE1bEUsRUFBRSxPQUN2QzZsRSxFQUFTRCxDQUFHLENBQ2IsQ0FDQSxTQUFTQyxFQUFTRCxFQUErQixDQUNoRCxJQUFJRSxFQUFLLFdBQ1QsR0FBRyxDQUFBaEYsR0FBSSxLQUFLOEUsRUFBSyxJQUFNRSxDQUFFLEVBQ3pCLEtBQUkvcUUsRUFBSXVwRSxHQUFRLENBQUMsRUFBR3ZwRSxFQUFFLENBQUMsRUFBSSxHQUFJQSxFQUFFLENBQUMsRUFBSUEsRUFBRSxDQUFDLEVBQUksR0FBSUEsRUFBRSxDQUFDLEVBQUksR0FDeEQ2cUUsRUFBSSxVQUFVLEtBQU0sQ0FBRSxLQUFNRSxFQUFJLEtBQU0sRUFBRyxRQUFRL3FFLEVBQUcsS0FBSyxFQUFHLEVBQUUsR0FBSSxFQUFFLEdBQUksRUFBRSxFQUFFLEdBQzVFNnFFLEVBQUksVUFBVSxLQUFLQSxFQUFJLFVBQVUsQ0FBQyxFQUFJRSxDQUFFLEVBQ3hDQyxFQUFZSCxDQUFHLEVBQ2hCLENBQ0EsU0FBU0csRUFBWUgsRUFBc0I3bEUsRUFBeUIsQ0FDbkU0bEUsRUFBU0MsQ0FBRyxFQUVaLFFBRElJLEVBQUssR0FBTzNtRSxFQUFJLEdBQ1pyRCxFQUFJNHBFLEVBQUksVUFBVSxPQUFTLEVBQUc1cEUsR0FBSyxFQUFHLEVBQUVBLEVBQUcsQ0FDbEQsSUFBSWlxRSxFQUFRTCxFQUFJLFVBQVU1cEUsQ0FBQyxFQUMzQixPQUFPaXFFLEVBQU0sS0FBSSxDQUNoQixJQUFLLEdBQ0Q1bUUsRUFBRzJtRSxFQUFLLElBQ0pKLEVBQUksVUFBVSxJQUFLLEVBQUVBLEVBQUksVUFBVSxJQUFHLEdBQzdDLE1BQ0QsSUFBSyxHQUFHLElBQUssR0FBRyxJQUFLLEdBQ3BCdm1FLEVBQUksR0FDRCxNQUFNNG1FLEVBQU0sRUFBSUEsRUFBTSxFQUFJQSxFQUFNLENBQUMsSUFBR0QsRUFBSyxJQUN6Q0MsRUFBTSxFQUFJLElBQU1BLEVBQU0sRUFBSSxJQUFNQSxFQUFNLEdBQUtBLEVBQU0sSUFBR0QsRUFBSyxJQUM1RCxNQUNELFFBQVNBLEVBQUssR0FBTSxLQUNwQixDQUNELENBQ0QsR0FBRyxHQUFDQSxHQUFNLENBQUNqbUUsR0FFWCxLQUFJbW1FLEVBQU0sSUFBSSxLQUFLLEtBQU0sRUFBRyxFQUFFLEVBQUc1UyxHQUFJLEVBRWpDNlMsRUFBWSxPQUFPLE9BQVMsT0FBTyxPQUFPLElBQUksRUFBSSxHQUNsRDM0RCxFQUFxQyxDQUFBLEVBQ3pDLElBQUl4UixFQUFJLEVBQUdBLEVBQUk0cEUsRUFBSSxVQUFVLE9BQVEsRUFBRTVwRSxFQUN0Q21xRSxFQUFVUCxFQUFJLFVBQVU1cEUsQ0FBQyxDQUFDLEVBQUksR0FDM0I0cEUsRUFBSSxVQUFVNXBFLENBQUMsRUFBRSxPQUFTLEdBQzdCd1IsRUFBSyxLQUFLLENBQUNvNEQsRUFBSSxVQUFVNXBFLENBQUMsRUFBRzRwRSxFQUFJLFVBQVU1cEUsQ0FBQyxDQUFDLENBQUMsRUFFL0MsSUFBSUEsRUFBSSxFQUFHQSxFQUFJd1IsRUFBSyxPQUFRLEVBQUV4UixFQUFHLENBQ2hDLElBQUlnb0UsR0FBTTlDLEVBQVExekQsRUFBS3hSLENBQUMsRUFBRSxDQUFDLENBQUMsRUFDNUJxRCxFQUFJOG1FLEVBQVVuQyxFQUFHLEVBQ2Iza0UsSUFDSG1PLEVBQUssS0FBSyxDQUFDdzJELEdBQU0sQ0FDaEIsS0FBTXZULEVBQVN1VCxFQUFHLEVBQUUsUUFBUSxJQUFJLEVBQUUsRUFDbEMsS0FBTSxFQUNOLE1BQU9vQyxHQUNQLEdBQUlGLEVBQUssR0FBSUEsRUFDYixRQUFTLElBQ1QsQ0FBQSxDQUFVLEVBRVhDLEVBQVVuQyxFQUFHLEVBQUksR0FFbEIsQ0FJRCxJQUZBeDJELEVBQUssS0FBSyxTQUFTdXFCLEdBQUVrWSxHQUFHLENBQUUsT0FBTyt3QixFQUFRanBDLEdBQUUsQ0FBQyxFQUFHa1ksR0FBRSxDQUFDLENBQUMsQ0FBSSxDQUFBLEVBQ3ZEMjFCLEVBQUksVUFBWSxDQUFFLEVBQUVBLEVBQUksVUFBWSxDQUFBLEVBQ2hDNXBFLEVBQUksRUFBR0EsRUFBSXdSLEVBQUssT0FBUSxFQUFFeFIsRUFBSzRwRSxFQUFJLFVBQVU1cEUsQ0FBQyxFQUFJd1IsRUFBS3hSLENBQUMsRUFBRSxDQUFDLEVBQUc0cEUsRUFBSSxVQUFVNXBFLENBQUMsRUFBSXdSLEVBQUt4UixDQUFDLEVBQUUsQ0FBQyxFQUM5RixJQUFJQSxFQUFJLEVBQUdBLEVBQUl3UixFQUFLLE9BQVEsRUFBRXhSLEVBQUcsQ0FDaEMsSUFBSXFxRSxHQUFNVCxFQUFJLFVBQVU1cEUsQ0FBQyxFQUNyQjhwRSxHQUFLRixFQUFJLFVBQVU1cEUsQ0FBQyxFQU94QixHQUxBcXFFLEdBQUksS0FBUTVWLEVBQVNxVixFQUFFLEVBQUUsUUFBUSxJQUFJLEVBQUUsRUFDdkNPLEdBQUksRUFBSUEsR0FBSSxFQUFJQSxHQUFJLEVBQUksRUFBRUEsR0FBSSxNQUFRLEdBQ3RDQSxHQUFJLEtBQU9BLEdBQUksUUFBVUEsR0FBSSxRQUFRLE9BQVMsRUFDOUNBLEdBQUksTUFBUSxFQUNaQSxHQUFJLE1BQVNBLEdBQUksT0FBU0QsR0FDdkJwcUUsSUFBTSxFQUNScXFFLEdBQUksRUFBSTc0RCxFQUFLLE9BQVMsRUFBSSxFQUFJLEdBQzlCNjRELEdBQUksS0FBTyxFQUNYQSxHQUFJLEtBQU8sVUFDRlAsR0FBRyxNQUFNLEVBQUUsR0FBSyxJQUFLLENBQzlCLElBQUl4UyxHQUFFdDNELEVBQUUsRUFBRXMzRCxHQUFJOWxELEVBQUssUUFBZ0IwekQsRUFBUTBFLEVBQUksVUFBVXRTLEVBQUMsQ0FBQyxHQUFHd1MsR0FBbkMsRUFBRXhTLEdBQUcsQ0FFaEMsSUFEQStTLEdBQUksRUFBSS9TLElBQUs5bEQsRUFBSyxPQUFTLEdBQUs4bEQsR0FDNUJBLEdBQUV0M0QsRUFBRSxFQUFFczNELEdBQUk5bEQsRUFBSyxRQUFnQjB6RCxFQUFRMEUsRUFBSSxVQUFVdFMsRUFBQyxDQUFDLEdBQUc0TixFQUFRNEUsRUFBRSxFQUE3QyxFQUFFeFMsR0FBRyxDQUNoQytTLEdBQUksRUFBSS9TLElBQUs5bEQsRUFBSyxPQUFTLEdBQUs4bEQsR0FDaEMrUyxHQUFJLEtBQU8sQ0FDZCxNQUNNbkYsRUFBUTBFLEVBQUksVUFBVTVwRSxFQUFFLENBQUMsR0FBRyxFQUFFLEdBQUtrbEUsRUFBUTRFLEVBQUUsSUFBR08sR0FBSSxFQUFJcnFFLEVBQUksR0FDL0RxcUUsR0FBSSxLQUFPLENBRVosRUFFRixDQUVBLFNBQVNDLEVBQU9WLEVBQXNCL3NFLEVBQThDLENBQ25GLElBQUkwdEUsRUFBUTF0RSxHQUFXLEdBRXZCLEdBQUcwdEUsRUFBTSxVQUFZLE1BQU8sT0FBT0MsR0FBVVosRUFBS1csQ0FBSyxFQUV2RCxPQURBUixFQUFZSCxDQUFHLEVBQ1JXLEVBQU0sU0FBUSxDQUNwQixJQUFLLE1BQU8sT0FBT0UsR0FBVWIsRUFBS1csQ0FBSyxDQUV2QyxDQUNELElBQUlyUSxFQUFLLFNBQVMwUCxHQUF1QyxDQUV4RCxRQURJYyxHQUFZLEVBQUdDLEdBQVcsRUFDdEIzcUUsR0FBSSxFQUFHQSxHQUFJNHBFLEdBQUksVUFBVSxPQUFRLEVBQUU1cEUsR0FBRyxDQUM3QyxJQUFJK2xFLEdBQU82RCxHQUFJLFVBQVU1cEUsRUFBQyxFQUMxQixHQUFJK2xFLEdBQUssUUFFVCxLQUFJOUUsR0FBTzhFLEdBQUssUUFBUSxPQUNyQjlFLEdBQU8sSUFDTkEsR0FBTyxLQUFReUosSUFBY3pKLEdBQU8sSUFBUyxFQUMzQzBKLElBQWExSixHQUFPLEtBQVcsR0FFckMsQ0FPRCxRQU5JNEYsR0FBVytDLEdBQUksVUFBVSxPQUFRLEdBQU0sRUFDdkNnQixHQUFZRixHQUFZLEdBQU0sRUFDOUJHLEdBQVlILEdBQVksS0FBUyxFQUNqQ0ksR0FBV0YsR0FBV0QsR0FBVzlELEdBQVVnRSxHQUMzQ0UsR0FBV0QsR0FBVyxLQUFTLEVBQy9CRSxHQUFZRCxJQUFXLElBQU0sRUFBSSxLQUFLLE1BQU1BLEdBQVEsS0FBSyxHQUFJLEVBQ3pERCxHQUFXQyxHQUFVQyxHQUFZLEtBQVMsRUFBS0QsSUFBU0MsR0FBWSxFQUFFRCxJQUFXLElBQU0sRUFBSSxLQUFLLE1BQU1BLEdBQVEsS0FBSyxHQUFJLEVBQy9ILElBQUk3USxHQUFLLENBQUMsRUFBRzhRLEdBQVdELEdBQVNGLEdBQVVoRSxHQUFTOEQsR0FBVUQsR0FBVyxDQUFDLEVBQzFFLE9BQUFkLEdBQUksVUFBVSxDQUFDLEVBQUUsS0FBT2MsSUFBYSxFQUNyQ3hRLEdBQUUsQ0FBQyxHQUFLMFAsR0FBSSxVQUFVLENBQUMsRUFBRSxNQUFNMVAsR0FBRSxDQUFDLEVBQUVBLEdBQUUsQ0FBQyxFQUFFQSxHQUFFLENBQUMsRUFBRUEsR0FBRSxDQUFDLEVBQUVBLEdBQUUsQ0FBQyxFQUFFQSxHQUFFLENBQUMsSUFBS0EsR0FBRSxDQUFDLEVBQUUsR0FBTSxHQUNwRUEsRUFDUCxFQUFFMFAsQ0FBRyxFQUNGNWxFLEVBQUlza0UsR0FBUXBPLEVBQUUsQ0FBQyxHQUFLLENBQUMsRUFDckJsNkQsRUFBSSxFQUFHd2pFLEVBQUksRUFDZixDQUNDLElBQUl4akUsRUFBSSxFQUFHQSxFQUFJLEVBQUcsRUFBRUEsRUFBR2dFLEVBQUUsWUFBWSxFQUFHaW5FLEdBQVdqckUsQ0FBQyxDQUFDLEVBQ3JELElBQUlBLEVBQUksRUFBR0EsRUFBSSxFQUFHLEVBQUVBLEVBQUdnRSxFQUFFLFlBQVksRUFBRyxDQUFDLEVBTXpDLElBTEFBLEVBQUUsWUFBWSxFQUFHLEVBQU0sRUFDdkJBLEVBQUUsWUFBWSxFQUFHLENBQU0sRUFDdkJBLEVBQUUsWUFBWSxFQUFHLEtBQU0sRUFDdkJBLEVBQUUsWUFBWSxFQUFHLENBQU0sRUFDdkJBLEVBQUUsWUFBWSxFQUFHLENBQU0sRUFDbkJoRSxFQUFJLEVBQUdBLEVBQUksRUFBRyxFQUFFQSxFQUFHZ0UsRUFBRSxZQUFZLEVBQUcsQ0FBQyxFQVV6QyxJQVRBQSxFQUFFLFlBQVksRUFBRyxDQUFDLEVBQ2xCQSxFQUFFLFlBQVksRUFBR2syRCxFQUFFLENBQUMsQ0FBQyxFQUNyQmwyRCxFQUFFLFlBQVksRUFBR2syRCxFQUFFLENBQUMsRUFBSUEsRUFBRSxDQUFDLEVBQUlBLEVBQUUsQ0FBQyxFQUFJQSxFQUFFLENBQUMsRUFBSSxDQUFDLEVBQzlDbDJELEVBQUUsWUFBWSxFQUFHLENBQUMsRUFDbEJBLEVBQUUsWUFBWSxFQUFHLElBQUssRUFDdEJBLEVBQUUsWUFBWSxFQUFHazJELEVBQUUsQ0FBQyxFQUFJQSxFQUFFLENBQUMsRUFBSUEsRUFBRSxDQUFDLEVBQUlBLEVBQUUsQ0FBQyxFQUFJLEVBQUdpTixDQUFVLEVBQzFEbmpFLEVBQUUsWUFBWSxFQUFHazJELEVBQUUsQ0FBQyxDQUFDLEVBQ3JCbDJELEVBQUUsWUFBWSxHQUFJazJELEVBQUUsQ0FBQyxFQUFJQSxFQUFFLENBQUMsRUFBSSxFQUFHaU4sQ0FBVSxFQUM3Q25qRSxFQUFFLFlBQVksRUFBR2syRCxFQUFFLENBQUMsQ0FBQyxFQUNqQmw2RCxFQUFJLEVBQUdBLEVBQUksSUFBSyxFQUFFQSxFQUFHZ0UsRUFBRSxZQUFZLEdBQUloRSxFQUFJazZELEVBQUUsQ0FBQyxFQUFJQSxFQUFFLENBQUMsRUFBSWw2RCxFQUFJLEVBQUUsQ0FDbkUsQ0FDRCxHQUFHazZELEVBQUUsQ0FBQyxFQUNMLElBQUlzSixFQUFJLEVBQUdBLEVBQUl0SixFQUFFLENBQUMsRUFBRyxFQUFFc0osRUFBRyxDQUN6QixLQUFNeGpFLEVBQUksSUFBTXdqRSxFQUFJLElBQUssRUFBRXhqRSxFQUFHZ0UsRUFBRSxZQUFZLEdBQUloRSxFQUFJazZELEVBQUUsQ0FBQyxFQUFJQSxFQUFFLENBQUMsRUFBSWw2RCxFQUFJLEVBQUUsRUFDeEVnRSxFQUFFLFlBQVksR0FBSXcvRCxJQUFNdEosRUFBRSxDQUFDLEVBQUksRUFBSWlOLEVBQWEzRCxFQUFJLENBQUMsQ0FDckQsQ0FFRixJQUFJMEgsR0FBVSxTQUFTak8sR0FBdUIsQ0FDN0MsSUFBSXVHLEdBQUt2RyxHQUFHajlELEVBQUV3akUsRUFBRSxFQUFHLEVBQUV4akUsRUFBR2dFLEVBQUUsWUFBWSxHQUFJaEUsRUFBRSxDQUFDLEVBQzFDaTlELEtBQUssRUFBRWo5RCxFQUFHZ0UsRUFBRSxZQUFZLEdBQUltakUsQ0FBVSxFQUMzQyxFQUVDLElBREEzRCxFQUFJeGpFLEVBQUksRUFDSndqRSxHQUFHdEosRUFBRSxDQUFDLEVBQUdsNkQsRUFBRXdqRSxFQUFHLEVBQUV4akUsRUFBR2dFLEVBQUUsWUFBWSxHQUFJbW5FLEdBQU8sT0FBTyxFQUN2RCxJQUFJM0gsR0FBR3RKLEVBQUUsQ0FBQyxFQUFHbDZELEVBQUV3akUsRUFBRyxFQUFFeGpFLEVBQUdnRSxFQUFFLFlBQVksR0FBSW1uRSxHQUFPLE9BQU8sRUFDdkRELEdBQVFoUixFQUFFLENBQUMsQ0FBQyxFQUNaZ1IsR0FBUWhSLEVBQUUsQ0FBQyxDQUFDLEVBR1osUUFGSTVDLEVBQWUsRUFBRzJKLEVBQWtCLEVBQ3BDOEUsR0FBb0I2RCxFQUFJLFVBQVUsQ0FBQyxFQUNqQ3RTLEVBQUlzUyxFQUFJLFVBQVUsT0FBUSxFQUFFdFMsRUFDakN5TyxHQUFPNkQsRUFBSSxVQUFVdFMsQ0FBQyxFQUNsQnlPLEdBQUssVUFFVDlFLEVBQU84RSxHQUFLLFFBQVEsT0FDakIsRUFBQTlFLEVBQU8sUUFDVjhFLEdBQUssTUFBUXZDLEVBQ2IwSCxHQUFTakssRUFBTyxLQUFXLENBQUMsSUFHN0IsSUFEQWlLLEdBQVNoUixFQUFFLENBQUMsRUFBSSxHQUFNLENBQUMsRUFDakJsMkQsRUFBRSxFQUFJLEtBQU9BLEVBQUUsWUFBWSxHQUFJbW5FLEdBQU8sVUFBVSxFQUV0RCxJQURBM0gsRUFBSXhqRSxFQUFJLEVBQ0pzM0QsRUFBSSxFQUFHQSxFQUFJc1MsRUFBSSxVQUFVLE9BQVEsRUFBRXRTLEVBQ3RDeU8sR0FBTzZELEVBQUksVUFBVXRTLENBQUMsRUFDbEJ5TyxHQUFLLFVBRVQ5RSxFQUFPOEUsR0FBSyxRQUFRLE9BQ2pCLEdBQUM5RSxHQUFRQSxHQUFRLFFBQ3BCOEUsR0FBSyxNQUFRdkMsRUFDYjBILEdBQVNqSyxFQUFPLElBQVMsQ0FBQyxJQUUzQixLQUFNajlELEVBQUUsRUFBSSxLQUFPQSxFQUFFLFlBQVksR0FBSW1uRSxHQUFPLFVBQVUsRUFDdEQsSUFBSW5yRSxFQUFJLEVBQUdBLEVBQUlrNkQsRUFBRSxDQUFDLEdBQUcsRUFBRyxFQUFFbDZELEVBQUcsQ0FDNUIsSUFBSThwRSxHQUFLRixFQUFJLFVBQVU1cEUsQ0FBQyxFQUN4QixHQUFHLENBQUM4cEUsSUFBTUEsR0FBRyxTQUFXLEVBQUcsQ0FDMUIsSUFBSXhTLEVBQUksRUFBR0EsRUFBSSxHQUFJLEVBQUVBLEVBQUd0ekQsRUFBRSxZQUFZLEVBQUcsQ0FBQyxFQUMxQyxJQUFJc3pELEVBQUksRUFBR0EsRUFBSSxFQUFHLEVBQUVBLEVBQUd0ekQsRUFBRSxZQUFZLEVBQUcsRUFBRSxFQUMxQyxJQUFJc3pELEVBQUksRUFBR0EsRUFBSSxHQUFJLEVBQUVBLEVBQUd0ekQsRUFBRSxZQUFZLEVBQUcsQ0FBQyxFQUMxQyxRQUNBLENBQ0QraEUsR0FBTzZELEVBQUksVUFBVTVwRSxDQUFDLEVBQ25CQSxJQUFNLElBQUcrbEUsR0FBSyxNQUFRQSxHQUFLLEtBQU9BLEdBQUssTUFBUSxFQUFJb0IsR0FDdEQsSUFBSWlFLEdBQWtCcHJFLElBQU0sR0FBS3VxRSxFQUFNLE1BQVN4RSxHQUFLLEtBU3JELEdBUkE5RSxFQUFPLEdBQUdtSyxHQUFJLE9BQU8sR0FDckJwbkUsRUFBRSxZQUFZLEdBQUlvbkUsR0FBSyxTQUFTLEVBQ2hDcG5FLEVBQUUsWUFBWSxFQUFHaTlELENBQUksRUFDckJqOUQsRUFBRSxZQUFZLEVBQUcraEUsR0FBSyxJQUFJLEVBQzFCL2hFLEVBQUUsWUFBWSxFQUFHK2hFLEdBQUssS0FBSyxFQUMzQi9oRSxFQUFFLFlBQVksR0FBSStoRSxHQUFLLENBQUMsRUFDeEIvaEUsRUFBRSxZQUFZLEdBQUkraEUsR0FBSyxDQUFDLEVBQ3hCL2hFLEVBQUUsWUFBWSxHQUFJK2hFLEdBQUssQ0FBQyxFQUNwQkEsR0FBSyxNQUNKL2hFLEVBQUUsWUFBWSxHQUFJK2hFLEdBQUssTUFBTyxLQUFLLE1BRHhCLEtBQUl6TyxFQUFJLEVBQUdBLEVBQUksRUFBRyxFQUFFQSxFQUFHdHpELEVBQUUsWUFBWSxFQUFHLENBQUMsRUFFekRBLEVBQUUsWUFBWSxFQUFHK2hFLEdBQUssT0FBUyxDQUFDLEVBQ2hDL2hFLEVBQUUsWUFBWSxFQUFHLENBQUMsRUFBR0EsRUFBRSxZQUFZLEVBQUcsQ0FBQyxFQUN2Q0EsRUFBRSxZQUFZLEVBQUcsQ0FBQyxFQUFHQSxFQUFFLFlBQVksRUFBRyxDQUFDLEVBQ3ZDQSxFQUFFLFlBQVksRUFBRytoRSxHQUFLLEtBQUssRUFDM0IvaEUsRUFBRSxZQUFZLEVBQUcraEUsR0FBSyxJQUFJLEVBQUcvaEUsRUFBRSxZQUFZLEVBQUcsQ0FBQyxDQUMvQyxDQUNELElBQUloRSxFQUFJLEVBQUdBLEVBQUk0cEUsRUFBSSxVQUFVLE9BQVEsRUFBRTVwRSxFQUd0QyxHQUZBK2xFLEdBQU82RCxFQUFJLFVBQVU1cEUsQ0FBQyxFQUVuQitsRSxHQUFLLE1BQVEsS0FFZixHQURBL2hFLEVBQUUsRUFBSytoRSxHQUFLLE1BQU0sR0FBTSxFQUNwQjlNLElBQVcsT0FBTyxTQUFTOE0sR0FBSyxPQUFPLEVBQzFDQSxHQUFLLFFBQVEsS0FBSy9oRSxFQUFHQSxFQUFFLEVBQUcsRUFBRytoRSxHQUFLLElBQUksRUFFdEMvaEUsRUFBRSxHQUFNK2hFLEdBQUssS0FBTyxJQUFPLFNBQ3JCLENBQ04sSUFBSXpPLEVBQUksRUFBR0EsRUFBSXlPLEdBQUssS0FBTSxFQUFFek8sRUFBR3R6RCxFQUFFLFlBQVksRUFBRytoRSxHQUFLLFFBQVF6TyxDQUFDLENBQUMsRUFDL0QsS0FBTUEsRUFBSSxJQUFPLEVBQUVBLEVBQUd0ekQsRUFBRSxZQUFZLEVBQUcsQ0FBQyxDQUN4QyxDQUdILElBQUloRSxFQUFJLEVBQUdBLEVBQUk0cEUsRUFBSSxVQUFVLE9BQVEsRUFBRTVwRSxFQUd0QyxHQUZBK2xFLEdBQU82RCxFQUFJLFVBQVU1cEUsQ0FBQyxFQUVuQitsRSxHQUFLLEtBQU8sR0FBS0EsR0FBSyxLQUFPLEtBQy9CLEdBQUk5TSxJQUFXLE9BQU8sU0FBUzhNLEdBQUssT0FBTyxFQUMxQ0EsR0FBSyxRQUFRLEtBQUsvaEUsRUFBR0EsRUFBRSxFQUFHLEVBQUcraEUsR0FBSyxJQUFJLEVBRXRDL2hFLEVBQUUsR0FBTStoRSxHQUFLLEtBQU8sR0FBTSxRQUNwQixDQUNOLElBQUl6TyxFQUFJLEVBQUdBLEVBQUl5TyxHQUFLLEtBQU0sRUFBRXpPLEVBQUd0ekQsRUFBRSxZQUFZLEVBQUcraEUsR0FBSyxRQUFRek8sQ0FBQyxDQUFDLEVBQy9ELEtBQU1BLEVBQUksR0FBTSxFQUFFQSxFQUFHdHpELEVBQUUsWUFBWSxFQUFHLENBQUMsQ0FDdkMsQ0FHSCxHQUFJaTFELEdBQ0hqMUQsRUFBRSxFQUFJQSxFQUFFLFdBR1IsTUFBTUEsRUFBRSxFQUFJQSxFQUFFLFFBQVFBLEVBQUUsWUFBWSxFQUFHLENBQUMsRUFFekMsT0FBT0EsQ0FDUixDQUVBLFNBQVM2c0MsRUFBSys0QixFQUFzQjFxRSxFQUErQixDQUNsRSxJQUFJbXNFLEVBQWdDekIsRUFBSSxVQUFVLElBQUksU0FBUzd0QyxFQUFHLENBQUUsT0FBT0EsRUFBRSxZQUFhLENBQUcsQ0FBQSxFQUN6RnV2QyxFQUE0QkQsRUFBWSxJQUFJLFNBQVN0dkMsRUFBRyxDQUFFLElBQUlrWSxFQUFJbFksRUFBRSxNQUFNLEdBQUcsRUFBRyxPQUFPa1ksRUFBRUEsRUFBRSxRQUFVbFksRUFBRSxNQUFNLEVBQUUsR0FBSyxJQUFNLEVBQUksRUFBRSxDQUFJLENBQUEsRUFDcEl2YyxFQUFnQixHQUNqQnRnQixFQUFLLFdBQVcsQ0FBQyxJQUFNLElBQWdCc2dCLEVBQUksR0FBTXRnQixFQUFPbXNFLEVBQVksQ0FBQyxFQUFFLE1BQU0sRUFBRyxFQUFFLEVBQUluc0UsR0FDcEZzZ0IsRUFBSXRnQixFQUFLLFFBQVEsR0FBRyxJQUFNLEdBQy9CLElBQUlxc0UsRUFBb0Jyc0UsRUFBSyxjQUN6Qis5RCxFQUFlejlDLElBQU0sR0FBTzZyRCxFQUFZLFFBQVFFLENBQU0sRUFBSUQsRUFBUSxRQUFRQyxDQUFNLEVBQ3BGLEdBQUd0TyxJQUFNLEdBQUksT0FBTzJNLEVBQUksVUFBVTNNLENBQUMsRUFFbkMsSUFBSTFGLEdBQUksQ0FBQ2dVLEVBQU8sTUFBTWxSLEVBQUksRUFHMUIsSUFGQWtSLEVBQVNBLEVBQU8sUUFBUW5SLEdBQUssRUFBRSxFQUM1QjdDLEtBQUdnVSxFQUFTQSxFQUFPLFFBQVFsUixHQUFLLEdBQUcsR0FDbEM0QyxFQUFJLEVBQUdBLEVBQUlvTyxFQUFZLE9BQVEsRUFBRXBPLEVBRXBDLElBREkxRixHQUFJOFQsRUFBWXBPLENBQUMsRUFBRSxRQUFRNUMsR0FBSyxHQUFHLEVBQUlnUixFQUFZcE8sQ0FBQyxHQUFHLFFBQVE3QyxHQUFLLEVBQUUsR0FBS21SLElBQzNFaFUsR0FBSStULEVBQVFyTyxDQUFDLEVBQUUsUUFBUTVDLEdBQUssR0FBRyxFQUFJaVIsRUFBUXJPLENBQUMsR0FBRyxRQUFRN0MsR0FBSyxFQUFFLEdBQUttUixFQUFRLE9BQU8zQixFQUFJLFVBQVUzTSxDQUFDLEVBRXRHLE9BQU8sSUFDUixDQUVBLElBQUltTCxFQUFPLEdBR1BqQixFQUFhLEdBRWJPLEdBQW1CLG1CQUNuQnVELEdBQWEsQ0FBQyxJQUFNLElBQU0sR0FBTSxJQUFNLElBQU0sSUFBTSxHQUFNLEdBQUksRUFDNURiLEdBQWUsbUNBQ2ZlLEdBQVMsQ0FFWixXQUFZLEdBQ1osUUFBUyxHQUNULFFBQVMsR0FDVCxXQUFZaEUsRUFDWixTQUFVLEdBRVYsaUJBQWtCTyxHQUNsQixxQkFBc0IsT0FDdEIsVUFBVyxHQUNYLFNBQVUsR0FDVixhQUFjMEMsR0FFZCxXQUFZLENBQUMsVUFBVSxVQUFVLFNBQVMsWUFBWSxXQUFXLE1BQU0sQ0FDeEUsRUFFQSxTQUFTb0IsR0FBVzVCLEVBQXNCblYsRUFBcUI1M0QsRUFBbUMsQ0FDakdncEUsSUFDQSxJQUFJN2hFLEVBQUlzbUUsRUFBT1YsRUFBSy9zRSxDQUFPLEVBRTNCK29FLEVBQUcsY0FBY25SLEVBQVV6d0QsQ0FBQyxDQUM3QixDQUVBLFNBQVN5MUQsRUFBSXoxRCxFQUEyQixDQUV2QyxRQURJZzJELEVBQU0sSUFBSSxNQUFNaDJELEVBQUUsTUFBTSxFQUNwQmhFLEVBQUksRUFBR0EsRUFBSWdFLEVBQUUsT0FBUSxFQUFFaEUsRUFBR2c2RCxFQUFJaDZELENBQUMsRUFBSSxPQUFPLGFBQWFnRSxFQUFFaEUsQ0FBQyxDQUFDLEVBQ25FLE9BQU9nNkQsRUFBSSxLQUFLLEVBQUUsQ0FDbkIsQ0FFQSxTQUFTeVIsR0FBTTdCLEVBQXNCL3NFLEVBQThDLENBQ2xGLElBQUltSCxFQUFJc21FLEVBQU9WLEVBQUsvc0UsQ0FBTyxFQUMzQixPQUFPQSxHQUFXQSxFQUFRLE1BQVEsU0FBUSxDQUN6QyxJQUFLLE9BQVEsT0FBQWdwRSxJQUFVRCxFQUFHLGNBQWMvb0UsRUFBUSxTQUFXbUgsR0FBb0JBLEVBQy9FLElBQUssU0FBVSxPQUFPLE9BQU9BLEdBQUssU0FBV0EsRUFBSXkxRCxFQUFJejFELENBQUMsRUFDdEQsSUFBSyxTQUFVLE9BQU8wMEQsR0FBYyxPQUFPMTBELEdBQUssU0FBV0EsRUFBSXkxRCxFQUFJejFELENBQUMsQ0FBQyxFQUNyRSxJQUFLLFNBQVUsR0FBR2kxRCxHQUFTLE9BQU8sT0FBTyxTQUFTajFELENBQUMsRUFBSUEsRUFBSWsxRCxHQUFZbDFELENBQUMsRUFFeEUsSUFBSyxRQUFTLE9BQU8sT0FBT0EsR0FBSyxTQUFXdTFELEdBQUl2MUQsQ0FBQyxFQUFJQSxDQUNyRCxDQUNELE9BQU9BLENBQ1IsQ0FFQSxJQUFJMG5FLEVBQ0osU0FBU0MsRUFBU0MsRUFBTSxDQUFFLEdBQUksQ0FDN0IsSUFBSUMsRUFBYUQsRUFBSyxXQUNsQkUsRUFBVSxJQUFJRCxFQUVsQixHQURBQyxFQUFRLGNBQWMsSUFBSSxXQUFXLENBQUMsRUFBRyxDQUFDLENBQUMsRUFBR0EsRUFBUSxnQkFBZ0IsRUFDbkVBLEVBQVEsVUFBV0osRUFBUUUsTUFDekIsT0FBTSxJQUFJLE1BQU0sZ0NBQWdDLENBQ3RELE9BQVE1b0UsRUFBRyxDQUFDLFFBQVEsTUFBTSw0QkFBOEJBLEVBQUUsU0FBV0EsRUFBRSxFQUFNLENBRTdFLFNBQVMrb0UsRUFBZ0I3RCxFQUFTOEQsRUFBSyxDQUN0QyxHQUFHLENBQUNOLEVBQU8sT0FBT08sR0FBUy9ELEVBQVM4RCxDQUFHLEVBQ3ZDLElBQUlILEVBQWFILEVBQU0sV0FDbkJJLEVBQVUsSUFBSUQsRUFDZDdSLEVBQU04UixFQUFRLGNBQWM1RCxFQUFRLE1BQU1BLEVBQVEsQ0FBQyxFQUFHNEQsRUFBUSxnQkFBZ0IsRUFDbEYsT0FBQTVELEVBQVEsR0FBSzRELEVBQVEsVUFDZDlSLENBQ1IsQ0FFQSxTQUFTa1MsRUFBZ0JoRSxFQUFTLENBQ2pDLE9BQU93RCxFQUFRQSxFQUFNLGVBQWV4RCxDQUFPLEVBQUlpRSxHQUFTakUsQ0FBTyxDQUNoRSxDQUNBLElBQUlrRSxFQUFhLENBQUUsR0FBSSxHQUFJLEdBQUksRUFBRyxFQUFHLEVBQUcsRUFBRyxFQUFHLEdBQUksRUFBRyxHQUFJLEVBQUcsR0FBSSxFQUFHLEdBQUksRUFBRyxHQUFJLEVBQUcsSUFHN0VDLEVBQVMsQ0FBSSxFQUFLLEVBQUssRUFBSyxFQUFLLEVBQUssRUFBSyxFQUFJLEdBQUssR0FBSyxHQUFLLEdBQUssR0FBSyxHQUFLLEdBQUssR0FBSyxHQUFLLEdBQUssR0FBSyxHQUFLLEdBQUssR0FBSyxHQUFLLEdBQUksSUFBSyxJQUFLLElBQUssSUFBSyxJQUFLLEtBR3ZKQyxFQUFTLENBQUcsRUFBSSxFQUFJLEVBQUksRUFBSSxFQUFJLEVBQUksRUFBRyxHQUFJLEdBQUksR0FBSSxHQUFJLEdBQUksR0FBSSxHQUFJLElBQUssSUFBSyxJQUFLLElBQUssSUFBSyxJQUFLLEtBQU0sS0FBTSxLQUFNLEtBQU0sS0FBTSxLQUFNLEtBQU0sTUFBTyxNQUFPLE9BRTdKLFNBQVNDLEVBQVducEUsRUFBRyxDQUFFLElBQUlkLEdBQVNjLEdBQUcsRUFBSUEsR0FBRyxJQUFPLFFBQWNBLEdBQUcsRUFBSUEsR0FBRyxJQUFPLE9BQVksT0FBU2QsR0FBRyxHQUFPQSxHQUFHLEVBQUlBLEdBQUcsR0FBTyxDQUt0SSxRQUhJa3FFLEVBQW1CLE9BQU8sV0FBZSxJQUV6Q0MsR0FBV0QsRUFBbUIsSUFBSSxXQUFXLEdBQUksRUFBSSxHQUNqRHRRLEdBQUksRUFBR0EsR0FBSyxJQUFPLEVBQUVBLEdBQUd1USxHQUFTdlEsRUFBQyxFQUFJcVEsRUFBV3JRLEVBQUMsRUFFMUQsU0FBU3dRLEVBQVd0cEUsRUFBR2tILEVBQUcsQ0FDekIsSUFBSXFpRSxFQUFNRixHQUFTcnBFLEVBQUksR0FBSSxFQUMzQixPQUFHa0gsR0FBSyxFQUFVcWlFLElBQVMsRUFBRXJpRSxHQUM3QnFpRSxFQUFPQSxHQUFPLEVBQUtGLEdBQVVycEUsR0FBRyxFQUFHLEdBQUksRUFDcENrSCxHQUFLLEdBQVdxaUUsSUFBUyxHQUFHcmlFLEdBQy9CcWlFLEVBQU9BLEdBQU8sRUFBS0YsR0FBVXJwRSxHQUFHLEdBQUksR0FBSSxFQUNqQ3VwRSxJQUFTLEdBQUdyaUUsR0FDcEIsQ0FHQSxTQUFTc2lFLEdBQVk5VixFQUFLK1YsRUFBSSxDQUFFLElBQUk1UCxFQUFLNFAsRUFBRyxFQUFJMWtELEVBQUswa0QsSUFBSyxFQUFJLE9BQVMvVixFQUFJM3VDLENBQUMsR0FBRzgwQyxHQUFLLEVBQUksRUFBSW5HLEVBQUkzdUMsRUFBRSxDQUFDLEdBQUcsTUFBTTgwQyxFQUFJLENBQU8sQ0FDdkgsU0FBUzZQLEdBQVloVyxFQUFLK1YsRUFBSSxDQUFFLElBQUk1UCxFQUFLNFAsRUFBRyxFQUFJMWtELEVBQUswa0QsSUFBSyxFQUFJLE9BQVMvVixFQUFJM3VDLENBQUMsR0FBRzgwQyxHQUFLLEVBQUksRUFBSW5HLEVBQUkzdUMsRUFBRSxDQUFDLEdBQUcsTUFBTTgwQyxFQUFJLENBQU8sQ0FDdkgsU0FBUzhQLEdBQVlqVyxFQUFLK1YsRUFBSSxDQUFFLElBQUk1UCxFQUFLNFAsRUFBRyxFQUFJMWtELEVBQUswa0QsSUFBSyxFQUFJLE9BQVMvVixFQUFJM3VDLENBQUMsR0FBRzgwQyxHQUFLLEVBQUksRUFBSW5HLEVBQUkzdUMsRUFBRSxDQUFDLEdBQUcsTUFBTTgwQyxFQUFJLEVBQU8sQ0FDdkgsU0FBUytQLEdBQVlsVyxFQUFLK1YsRUFBSSxDQUFFLElBQUk1UCxFQUFLNFAsRUFBRyxFQUFJMWtELEVBQUswa0QsSUFBSyxFQUFJLE9BQVMvVixFQUFJM3VDLENBQUMsR0FBRzgwQyxHQUFLLEVBQUksRUFBSW5HLEVBQUkzdUMsRUFBRSxDQUFDLEdBQUcsTUFBTTgwQyxFQUFJLEVBQU8sQ0FDdkgsU0FBU2dRLEdBQVluVyxFQUFLK1YsRUFBSSxDQUFFLElBQUk1UCxFQUFLNFAsRUFBRyxFQUFJMWtELEVBQUswa0QsSUFBSyxFQUFJLE9BQVMvVixFQUFJM3VDLENBQUMsR0FBRzgwQyxHQUFLLEVBQUksRUFBSW5HLEVBQUkzdUMsRUFBRSxDQUFDLEdBQUcsTUFBTTgwQyxFQUFJLEdBQU8sQ0FHdkgsU0FBU2lRLEdBQVlwVyxFQUFLK1YsRUFBSXpwRSxFQUFHLENBQ2hDLElBQUk2NUQsRUFBSzRQLEVBQUcsRUFBSTFrRCxFQUFLMGtELElBQUssRUFBSTlvRSxHQUFNLEdBQUdYLEdBQUcsRUFDdEMwYyxFQUFJZzNDLEVBQUkzdUMsQ0FBQyxJQUFNODBDLEVBS25CLE9BSkc3NUQsRUFBSSxFQUFJNjVELElBQ1huOUMsR0FBS2czQyxFQUFJM3VDLEVBQUUsQ0FBQyxHQUFJLEVBQUU4MEMsRUFDZjc1RCxFQUFJLEdBQUs2NUQsS0FDWm45QyxHQUFLZzNDLEVBQUkzdUMsRUFBRSxDQUFDLEdBQUksR0FBRzgwQyxFQUNoQjc1RCxFQUFJLEdBQUs2NUQsS0FDWm45QyxHQUFLZzNDLEVBQUkzdUMsRUFBRSxDQUFDLEdBQUksR0FBRzgwQyxHQUNabjlDLEVBQUkvYixDQUNaLENBR0EsU0FBU29wRSxHQUFhclcsRUFBSytWLEVBQUkvc0QsRUFBRyxDQUFFLElBQUltOUMsRUFBSTRQLEVBQUssRUFBRzFrRCxFQUFJMGtELElBQU8sRUFDOUQsT0FBRzVQLEdBQUssRUFBR25HLEVBQUkzdUMsQ0FBQyxJQUFNckksRUFBSSxJQUFNbTlDLEdBRS9CbkcsRUFBSTN1QyxDQUFDLEdBQU1ySSxHQUFLbTlDLEVBQUssSUFDckJuRyxFQUFJM3VDLEVBQUUsQ0FBQyxHQUFLckksRUFBRSxJQUFPLEVBQUVtOUMsR0FFakI0UCxFQUFLLENBQ2IsQ0FFQSxTQUFTTyxHQUFhdFcsRUFBSytWLEVBQUkvc0QsRUFBRyxDQUNqQyxJQUFJbTlDLEVBQUk0UCxFQUFLLEVBQUcxa0QsRUFBSTBrRCxJQUFPLEVBQzNCLE9BQUEvc0QsR0FBS0EsRUFBRSxJQUFNbTlDLEVBQ2JuRyxFQUFJM3VDLENBQUMsR0FBS3JJLEVBQ0grc0QsRUFBSyxDQUNiLENBQ0EsU0FBU1EsR0FBYXZXLEVBQUsrVixFQUFJL3NELEVBQUcsQ0FDakMsSUFBSW05QyxFQUFJNFAsRUFBSyxFQUFHMWtELEVBQUkwa0QsSUFBTyxFQUMzQixPQUFBL3NELElBQU1tOUMsRUFDTm5HLEVBQUkzdUMsQ0FBQyxHQUFNckksRUFBSSxJQUFNQSxLQUFPLEVBQzVCZzNDLEVBQUkzdUMsRUFBRSxDQUFDLEVBQUlySSxFQUNKK3NELEVBQUssQ0FDYixDQUNBLFNBQVNTLEdBQWN4VyxFQUFLK1YsRUFBSS9zRCxFQUFHLENBQ2xDLElBQUltOUMsRUFBSTRQLEVBQUssRUFBRzFrRCxFQUFJMGtELElBQU8sRUFDM0IsT0FBQS9zRCxJQUFNbTlDLEVBQ05uRyxFQUFJM3VDLENBQUMsR0FBTXJJLEVBQUksSUFBTUEsS0FBTyxFQUM1QmczQyxFQUFJM3VDLEVBQUUsQ0FBQyxFQUFJckksRUFBSSxJQUNmZzNDLEVBQUkzdUMsRUFBRSxDQUFDLEVBQUlySSxJQUFNLEVBQ1Yrc0QsRUFBSyxFQUNiLENBR0EsU0FBU1UsR0FBUWpqRSxFQUFHbzdELEVBQWUsQ0FDbEMsSUFBSXhMLEVBQUk1dkQsRUFBRSxPQUFRMDRELEVBQUksRUFBRTlJLEVBQUl3TCxFQUFLLEVBQUV4TCxFQUFJd0wsRUFBSyxFQUFHMWxFLEVBQUksRUFDbkQsR0FBR2s2RCxHQUFLd0wsRUFBSSxPQUFPcDdELEVBQ25CLEdBQUcydUQsR0FBUyxDQUNYLElBQUlqMUQsRUFBSXMxRCxHQUFlMEosQ0FBQyxFQUV4QixHQUFHMTRELEVBQUUsS0FBTUEsRUFBRSxLQUFLdEcsQ0FBQyxNQUNkLE1BQU1oRSxFQUFJc0ssRUFBRSxPQUFRLEVBQUV0SyxFQUFHZ0UsRUFBRWhFLENBQUMsRUFBSXNLLEVBQUV0SyxDQUFDLEVBQ3hDLE9BQU9nRSxDQUNQLFNBQVN3b0UsRUFBa0IsQ0FDM0IsSUFBSWxwRSxFQUFJLElBQUksV0FBVzAvRCxDQUFDLEVBQ3hCLEdBQUcxL0QsRUFBRSxJQUFLQSxFQUFFLElBQUlnSCxDQUFDLE1BQ1osTUFBTXRLLEVBQUlrNkQsRUFBRyxFQUFFbDZELEVBQUdzRCxFQUFFdEQsQ0FBQyxFQUFJc0ssRUFBRXRLLENBQUMsRUFDakMsT0FBT3NELENBQ1AsQ0FDRCxPQUFBZ0gsRUFBRSxPQUFTMDRELEVBQ0oxNEQsQ0FDUixDQUdBLFNBQVNrakUsR0FBZ0JwcUUsRUFBRyxDQUUzQixRQURJWSxFQUFJLElBQUksTUFBTVosQ0FBQyxFQUNYcEQsRUFBSSxFQUFHQSxFQUFJb0QsRUFBRyxFQUFFcEQsRUFBR2dFLEVBQUVoRSxDQUFDLEVBQUksRUFDbEMsT0FBT2dFLENBQ1IsQ0FHQSxTQUFTeXBFLEdBQVdDLEVBQU9DLEVBQU1DLEVBQTJCLENBQzNELElBQUk5VCxFQUFTLEVBQUdtRCxFQUFJLEVBQUdqOUQsRUFBSSxFQUFHczNELEVBQUksRUFBR3VXLEdBQVEsRUFBRzNULEVBQUl3VCxFQUFNLE9BRXRESSxFQUFZdEIsRUFBbUIsSUFBSSxZQUFZLEVBQUUsRUFBSWdCLEdBQWdCLEVBQUUsRUFDM0UsSUFBSXh0RSxFQUFJLEVBQUdBLEVBQUksR0FBSSxFQUFFQSxFQUFHOHRFLEVBQVM5dEUsQ0FBQyxFQUFJLEVBRXRDLElBQUlBLEVBQUlrNkQsRUFBR2w2RCxFQUFJNHRFLEVBQUssRUFBRTV0RSxFQUFHMHRFLEVBQU0xdEUsQ0FBQyxFQUFJLEVBQ3BDazZELEVBQUl3VCxFQUFNLE9BRVYsSUFBSUssR0FBUXZCLEVBQW1CLElBQUksWUFBWXRTLENBQUMsRUFBSXNULEdBQWdCdFQsQ0FBQyxFQUdyRSxJQUFJbDZELEVBQUksRUFBR0EsRUFBSWs2RCxFQUFHLEVBQUVsNkQsRUFDbkI4dEUsRUFBVTdRLEVBQUl5USxFQUFNMXRFLENBQUMsQ0FBRyxJQUNyQjg1RCxFQUFTbUQsSUFBR25ELEVBQVNtRCxHQUN4QjhRLEdBQU0vdEUsQ0FBQyxFQUFJLEVBR1osSUFEQTh0RSxFQUFTLENBQUMsRUFBSSxFQUNWOXRFLEVBQUksRUFBR0EsR0FBSzg1RCxFQUFRLEVBQUU5NUQsRUFBRzh0RSxFQUFTOXRFLEVBQUUsRUFBRSxFQUFLNnRFLEdBQVNBLEdBQVFDLEVBQVM5dEUsRUFBRSxDQUFDLEdBQUksRUFDaEYsSUFBSUEsRUFBSSxFQUFHQSxFQUFJazZELEVBQUcsRUFBRWw2RCxFQUNuQjZ0RSxHQUFRSCxFQUFNMXRFLENBQUMsRUFDWjZ0RSxJQUFTLElBQUdFLEdBQU0vdEUsQ0FBQyxFQUFJOHRFLEVBQVNELEdBQU0sRUFBRSxLQUk1QyxJQUFJRyxHQUFRLEVBQ1osSUFBSWh1RSxFQUFJLEVBQUdBLEVBQUlrNkQsRUFBRyxFQUFFbDZELEVBRW5CLEdBREFndUUsR0FBUU4sRUFBTTF0RSxDQUFDLEVBQ1pndUUsSUFBUyxFQUVYLElBREFILEdBQVFuQixFQUFXcUIsR0FBTS90RSxDQUFDLEVBQUc4NUQsQ0FBTSxHQUFJQSxFQUFPa1UsR0FDMUMxVyxHQUFLLEdBQUl3QyxFQUFTLEVBQUlrVSxJQUFVLEVBQUcxVyxHQUFHLEVBQUcsRUFBRUEsRUFDOUNxVyxFQUFLRSxHQUFPdlcsR0FBRzBXLEVBQU0sRUFBS0EsR0FBTSxHQUFPaHVFLEdBQUcsRUFHN0MsT0FBTzg1RCxDQUNSLENBR0EsSUFBSW1VLEdBQVd6QixFQUFtQixJQUFJLFlBQVksR0FBRyxFQUFJZ0IsR0FBZ0IsR0FBRyxFQUN4RVUsR0FBVzFCLEVBQW1CLElBQUksWUFBWSxFQUFFLEVBQUtnQixHQUFnQixFQUFFLEVBQzNFLEdBQUcsQ0FBQ2hCLEVBQWtCLENBQ3JCLFFBQVF4c0UsR0FBSSxFQUFHQSxHQUFJLElBQUssRUFBRUEsR0FBR2l1RSxHQUFTanVFLEVBQUMsRUFBSSxFQUMzQyxJQUFJQSxHQUFJLEVBQUdBLEdBQUksR0FBSSxFQUFFQSxHQUFHa3VFLEdBQVNsdUUsRUFBQyxFQUFJLENBQ3ZDLEVBQ0MsVUFBVyxDQUdYLFFBRkltdUUsRUFBMEIsQ0FBQSxFQUMxQm51RSxFQUFJLEVBQ0hBLEVBQUUsR0FBSUEsSUFBS211RSxFQUFNLEtBQUssQ0FBQyxFQUM1QlYsR0FBV1UsRUFBT0QsR0FBVSxFQUFFLEVBRTlCLElBQUlSLEVBQTBCLENBQUEsRUFFOUIsSUFEQTF0RSxFQUFJLEVBQ0VBLEdBQUcsSUFBS0EsSUFBSzB0RSxFQUFNLEtBQUssQ0FBQyxFQUMvQixLQUFNMXRFLEdBQUcsSUFBS0EsSUFBSzB0RSxFQUFNLEtBQUssQ0FBQyxFQUMvQixLQUFNMXRFLEdBQUcsSUFBS0EsSUFBSzB0RSxFQUFNLEtBQUssQ0FBQyxFQUMvQixLQUFNMXRFLEdBQUcsSUFBS0EsSUFBSzB0RSxFQUFNLEtBQUssQ0FBQyxFQUMvQkQsR0FBV0MsRUFBT08sR0FBVSxHQUFHLENBQ2hDLEdBQUMsRUFBSSxJQUFJRyxHQUE0QixVQUEyQixDQUcvRCxRQUZJQyxFQUFZN0IsRUFBbUIsSUFBSSxXQUFXLEtBQU0sRUFBSSxDQUFBLEVBQ3hEbFYsRUFBSSxFQUFHOTNDLEVBQUksRUFDVDgzQyxFQUFJZ1YsRUFBTyxPQUFTLEVBQUcsRUFBRWhWLEVBQzlCLEtBQU05M0MsRUFBSThzRCxFQUFPaFYsRUFBRSxDQUFDLEVBQUcsRUFBRTkzQyxFQUFHNnVELEVBQVU3dUQsQ0FBQyxFQUFJODNDLEVBRTVDLEtBQUs5M0MsRUFBSSxNQUFPLEVBQUVBLEVBQUc2dUQsRUFBVTd1RCxDQUFDLEVBQUksR0FFcEMsSUFBSTh1RCxFQUFZOUIsRUFBbUIsSUFBSSxXQUFXLEdBQUssRUFBSSxDQUFBLEVBQzNELElBQUlsVixFQUFJLEVBQUc5M0MsRUFBSSxFQUFHODNDLEVBQUkrVSxFQUFPLE9BQVMsRUFBRyxFQUFFL1UsRUFDMUMsS0FBTTkzQyxFQUFJNnNELEVBQU8vVSxFQUFFLENBQUMsRUFBRyxFQUFFOTNDLEVBQUc4dUQsRUFBVTl1RCxDQUFDLEVBQUk4M0MsRUFHNUMsU0FBU2lYLEVBQWEvOEQsR0FBTXdvRCxFQUFLLENBRWhDLFFBREl3VSxFQUFPLEVBQ0xBLEVBQU9oOUQsR0FBSyxRQUFRLENBQ3pCLElBQUkwb0QsR0FBSSxLQUFLLElBQUksTUFBUTFvRCxHQUFLLE9BQVNnOUQsQ0FBSSxFQUN2Q3JtRCxHQUFJcW1ELEVBQU90VSxJQUFLMW9ELEdBQUssT0FJekIsSUFIQXdvRCxFQUFJLFlBQVksRUFBRyxDQUFDN3hDLEVBQUMsRUFDckI2eEMsRUFBSSxZQUFZLEVBQUdFLEVBQUMsRUFDcEJGLEVBQUksWUFBWSxFQUFJLENBQUNFLEdBQUssS0FBTSxFQUMxQkEsTUFBTSxHQUFHRixFQUFJQSxFQUFJLEdBQUcsRUFBSXhvRCxHQUFLZzlELEdBQU0sQ0FDekMsQ0FDRCxPQUFPeFUsRUFBSSxDQUNYLENBR0QsU0FBU3lVLEVBQWlCajlELEdBQU13b0QsRUFBSyxDQUlwQyxRQUhJNlMsRUFBSyxFQUNMMkIsR0FBTyxFQUNQRSxHQUFRbEMsRUFBbUIsSUFBSSxZQUFZLEtBQU0sRUFBSSxDQUFBLEVBQ25EZ0MsR0FBT2g5RCxHQUFLLFFBQVEsQ0FDekIsSUFBSTBvRCxHQUE4QixLQUFLLElBQUksTUFBUTFvRCxHQUFLLE9BQVNnOUQsRUFBSSxFQUdyRSxHQUFHdFUsR0FBSSxHQUFJLENBTVYsSUFMQTJTLEVBQUtNLEdBQWFuVCxFQUFLNlMsRUFBSSxFQUFJMkIsR0FBT3RVLElBQUsxb0QsR0FBSyxPQUFPLEVBQ3BEcTdELEVBQUssSUFBR0EsR0FBTSxHQUFLQSxFQUFLLElBQzNCN1MsRUFBSSxFQUFLNlMsRUFBSyxFQUFLLEVBQ25CN1MsRUFBSSxZQUFZLEVBQUdFLEVBQUMsRUFDcEJGLEVBQUksWUFBWSxFQUFJLENBQUNFLEdBQUssS0FBTSxFQUMxQkEsTUFBTSxHQUFHRixFQUFJQSxFQUFJLEdBQUcsRUFBSXhvRCxHQUFLZzlELElBQU0sRUFDekMzQixFQUFLN1MsRUFBSSxFQUFJLEVBQ2IsUUFDQSxDQUVENlMsRUFBS00sR0FBYW5ULEVBQUs2UyxFQUFJLEVBQUkyQixHQUFPdFUsSUFBSzFvRCxHQUFLLFFBQVUsQ0FBQyxFQUUzRCxRQURJbThCLEdBQU8sRUFDTHVzQixNQUFNLEdBQUcsQ0FDZCxJQUFJaDJELEdBQUlzTixHQUFLZzlELEVBQUksRUFDakI3Z0MsSUFBU0EsSUFBUSxFQUFLenBDLElBQUssTUFFM0IsSUFBSXFtQyxHQUFRLEdBQUlva0MsR0FBTyxFQUV2QixJQUFJcGtDLEdBQVFta0MsR0FBTS9nQyxFQUFJLEtBQ3JCcEQsSUFBU2lrQyxHQUFPLE9BQ2Jqa0MsR0FBUWlrQyxLQUFNamtDLElBQVMsT0FDdkJBLEdBQVFpa0MsSUFBTSxLQUFNaDlELEdBQUsrNEIsR0FBUW9rQyxFQUFJLEdBQUtuOUQsR0FBS2c5RCxHQUFPRyxFQUFJLEdBQUtBLEdBQU8sS0FBSyxFQUFFQSxHQUdqRixHQUFHQSxHQUFPLEVBQUcsQ0FFWnpxRSxHQUFJb3FFLEVBQVVLLEVBQUksRUFDZnpxRSxJQUFLLEdBQUkyb0UsRUFBS1EsR0FBYXJULEVBQUs2UyxFQUFJSixHQUFTdm9FLEdBQUUsQ0FBQyxHQUFHLENBQUMsRUFBSSxHQUUxRG1wRSxHQUFhclQsRUFBSzZTLEVBQUksQ0FBQyxFQUN2QkEsR0FBTSxFQUNOUSxHQUFhclQsRUFBSzZTLEVBQUlKLEdBQVN2b0UsR0FBRSxFQUFFLEdBQUcsQ0FBQyxFQUN2QzJvRSxHQUFNLEdBRVAsSUFBSStCLEdBQVUxcUUsR0FBSSxFQUFLLEVBQU1BLEdBQUksR0FBSSxFQUNsQzBxRSxHQUFTLElBQ1h0QixHQUFjdFQsRUFBSzZTLEVBQUk4QixHQUFPdEMsRUFBT25vRSxFQUFDLENBQUMsRUFDdkMyb0UsR0FBTStCLElBR1AxcUUsR0FBSW1xRSxFQUFVRyxHQUFPamtDLEVBQUssRUFDMUJzaUMsRUFBS1EsR0FBYXJULEVBQUs2UyxFQUFJSixHQUFTdm9FLEVBQUMsR0FBRyxDQUFDLEVBQ3pDMm9FLEdBQU0sRUFFTixJQUFJZ0MsR0FBUzNxRSxHQUFJLEVBQUksRUFBS0EsR0FBRSxHQUFJLEVBQzdCMnFFLEdBQVMsSUFDWHZCLEdBQWN0VCxFQUFLNlMsRUFBSTJCLEdBQU9qa0MsR0FBUStoQyxFQUFPcG9FLEVBQUMsQ0FBQyxFQUMvQzJvRSxHQUFNZ0MsSUFFUCxRQUFRM1MsR0FBSSxFQUFHQSxHQUFJeVMsR0FBTSxFQUFFelMsR0FDMUJ3UyxHQUFNL2dDLEVBQUksRUFBSTZnQyxHQUFPLE1BQ3JCN2dDLElBQVNBLElBQVEsRUFBS244QixHQUFLZzlELEVBQUksR0FBSyxNQUNwQyxFQUFFQSxHQUVIdFUsSUFBSXlVLEdBQU8sQ0FDaEIsTUFFUXpxRSxJQUFLLElBQUtBLEdBQUlBLEdBQUksR0FDaEIyb0UsRUFBS08sR0FBYXBULEVBQUs2UyxFQUFJLENBQUMsRUFDakNBLEVBQUtRLEdBQWFyVCxFQUFLNlMsRUFBSUosR0FBU3ZvRSxFQUFDLENBQUMsRUFDdEN3cUUsR0FBTS9nQyxFQUFJLEVBQUk2Z0MsR0FBTyxNQUNyQixFQUFFQSxFQUVILENBRUQzQixFQUFLUSxHQUFhclQsRUFBSzZTLEVBQUksQ0FBQyxFQUFJLENBQ2hDLENBQ0QsT0FBQTdTLEVBQUksR0FBTTZTLEVBQUssR0FBRyxFQUFHLEVBQ2Q3UyxFQUFJLENBQ1gsQ0FDRCxPQUFPLFNBQXFCeG9ELEVBQU13b0QsRUFBSyxDQUN0QyxPQUFHeG9ELEVBQUssT0FBUyxFQUFVKzhELEVBQWEvOEQsRUFBTXdvRCxDQUFHLEVBQzFDeVUsRUFBaUJqOUQsRUFBTXdvRCxDQUFHLENBQ25DLENBQ0EsSUFFQSxTQUFTbVMsR0FBUzM2RCxFQUFNLENBQ3ZCLElBQUlzbEQsRUFBTXdSLEdBQVEsR0FBRyxLQUFLLE1BQU05MkQsRUFBSyxPQUFPLEdBQUcsQ0FBQyxFQUM1Q3MrQixFQUFNcytCLEdBQVk1OEQsRUFBTXNsRCxDQUFHLEVBQy9CLE9BQU9BLEVBQUksTUFBTSxFQUFHaG5CLENBQUcsQ0FDeEIsQ0FHQSxJQUFJZy9CLEdBQVd0QyxFQUFtQixJQUFJLFlBQVksS0FBSyxFQUFJZ0IsR0FBZ0IsS0FBSyxFQUM1RXVCLEdBQVd2QyxFQUFtQixJQUFJLFlBQVksS0FBSyxFQUFJZ0IsR0FBZ0IsS0FBSyxFQUM1RXdCLEdBQVd4QyxFQUFtQixJQUFJLFlBQVksR0FBRyxFQUFNZ0IsR0FBZ0IsR0FBRyxFQUMxRXlCLEdBQVksRUFBR0MsR0FBWSxFQUcvQixTQUFTQyxHQUFJMzlELEVBQU1nOUQsRUFBaUIsQ0FFbkMsSUFBSVksRUFBUXBDLEdBQVl4N0QsRUFBTWc5RCxDQUFJLEVBQUksSUFBS0EsR0FBUSxFQUNuRCxJQUFJYSxFQUFTckMsR0FBWXg3RCxFQUFNZzlELENBQUksRUFBSSxFQUFHQSxHQUFRLEVBQ2xELElBQUljLEVBQVN2QyxHQUFZdjdELEVBQU1nOUQsQ0FBSSxFQUFJLEVBQUdBLEdBQVEsRUFVbEQsUUFUSXZSLEVBQUksRUFHSnlRLEVBQVFsQixFQUFtQixJQUFJLFdBQVcsRUFBRSxFQUFJZ0IsR0FBZ0IsRUFBRSxFQUNsRU8sR0FBUSxDQUFFLEVBQUcsRUFBRyxFQUFHLEVBQUcsRUFBRyxFQUFHLEVBQUcsRUFBRyxFQUFHLEVBQUcsRUFBRyxFQUFHLEVBQUcsRUFBRyxFQUFHLEVBQUcsRUFBRyxFQUFHLEdBQ2hFalUsRUFBUyxFQUNUZ1UsRUFBWXRCLEVBQW1CLElBQUksV0FBVyxDQUFDLEVBQUlnQixHQUFnQixDQUFDLEVBQ3BFK0IsR0FBWS9DLEVBQW1CLElBQUksV0FBVyxDQUFDLEVBQUlnQixHQUFnQixDQUFDLEVBQ3BFdFQsR0FBSXdULEVBQU0sT0FDTjF0RSxHQUFJLEVBQUdBLEdBQUlzdkUsRUFBUSxFQUFFdHZFLEdBQzVCMHRFLEVBQU10QixFQUFXcHNFLEVBQUMsQ0FBQyxFQUFJaTlELEVBQUk2UCxHQUFZdDdELEVBQU1nOUQsQ0FBSSxFQUM5QzFVLEVBQVNtRCxJQUFHbkQsRUFBU21ELEdBQ3hCNlEsRUFBUzdRLENBQUMsSUFDVnVSLEdBQVEsRUFJVCxJQUFJWCxHQUFRLEVBRVosSUFEQUMsRUFBUyxDQUFDLEVBQUksRUFDVjl0RSxHQUFJLEVBQUdBLElBQUs4NUQsRUFBUSxFQUFFOTVELEdBQUd1dkUsR0FBVXZ2RSxFQUFDLEVBQUk2dEUsR0FBU0EsR0FBUUMsRUFBUzl0RSxHQUFFLENBQUMsR0FBSSxFQUM3RSxJQUFJQSxHQUFJLEVBQUdBLEdBQUlrNkQsR0FBRyxFQUFFbDZELElBQU82dEUsR0FBUUgsRUFBTTF0RSxFQUFDLElBQU0sSUFBRyt0RSxHQUFNL3RFLEVBQUMsRUFBSXV2RSxHQUFVMUIsRUFBSyxLQUU3RSxJQUFJRyxHQUFRLEVBQ1osSUFBSWh1RSxHQUFJLEVBQUdBLEdBQUlrNkQsR0FBRyxFQUFFbDZELEdBRW5CLEdBREFndUUsR0FBUU4sRUFBTTF0RSxFQUFDLEVBQ1pndUUsSUFBUyxFQUFHLENBQ2RILEdBQVFwQixHQUFTc0IsR0FBTS90RSxFQUFDLENBQUMsR0FBSSxFQUFFZ3VFLEdBQy9CLFFBQVExVyxJQUFLLEdBQUksRUFBRTBXLElBQVEsRUFBRzFXLElBQUcsRUFBRyxFQUFFQSxHQUFHMFgsR0FBU25CLEdBQU92VyxJQUFHMFcsRUFBTSxFQUFLQSxHQUFNLEVBQU1odUUsSUFBRyxDQUN0RixDQUlGLElBQUl3dkUsR0FBMkIsQ0FBQSxFQUUvQixJQURBMVYsRUFBUyxFQUNIMFYsR0FBTyxPQUFTSixFQUFRQyxHQUc3QixPQUZBeEIsR0FBUW1CLEdBQVMvQixHQUFZejdELEVBQU1nOUQsQ0FBSSxDQUFDLEVBQ3hDQSxHQUFRWCxHQUFRLEVBQ1JBLE1BQVcsRUFBQyxDQUNuQixJQUFLLElBR0osSUFGQTVRLEVBQUksRUFBSTJQLEdBQVlwN0QsRUFBTWc5RCxDQUFJLEVBQUdBLEdBQVEsRUFDekNYLEdBQVEyQixHQUFPQSxHQUFPLE9BQVMsQ0FBQyxFQUMxQnZTLEtBQU0sR0FBR3VTLEdBQU8sS0FBSzNCLEVBQUssRUFDaEMsTUFDRCxJQUFLLElBRUosSUFEQTVRLEVBQUksRUFBSTZQLEdBQVl0N0QsRUFBTWc5RCxDQUFJLEVBQUdBLEdBQVEsRUFDbkN2UixLQUFNLEdBQUd1UyxHQUFPLEtBQUssQ0FBQyxFQUM1QixNQUNELElBQUssSUFFSixJQURBdlMsRUFBSSxHQUFLZ1EsR0FBWXo3RCxFQUFNZzlELENBQUksRUFBR0EsR0FBUSxFQUNwQ3ZSLEtBQU8sR0FBR3VTLEdBQU8sS0FBSyxDQUFDLEVBQzdCLE1BQ0QsUUFDQ0EsR0FBTyxLQUFLM0IsRUFBSyxFQUNkL1QsRUFBUytULEtBQU8vVCxFQUFTK1QsSUFDNUIsS0FDRCxDQUlGLElBQUk0QixHQUFLRCxHQUFPLE1BQU0sRUFBR0osQ0FBSyxFQUFHdnBCLEdBQUsycEIsR0FBTyxNQUFNSixDQUFLLEVBQ3hELElBQUlwdkUsR0FBSW92RSxFQUFPcHZFLEdBQUksSUFBSyxFQUFFQSxHQUFHeXZFLEdBQUd6dkUsRUFBQyxFQUFJLEVBQ3JDLElBQUlBLEdBQUlxdkUsRUFBUXJ2RSxHQUFJLEdBQUksRUFBRUEsR0FBRzZsRCxHQUFHN2xELEVBQUMsRUFBSSxFQUNyQyxPQUFBaXZFLEdBQVl4QixHQUFXZ0MsR0FBSVgsR0FBVSxHQUFHLEVBQ3hDSSxHQUFZekIsR0FBVzVuQixHQUFJa3BCLEdBQVUsRUFBRSxFQUNoQ1AsQ0FDUixDQUdBLFNBQVNrQixHQUFRbCtELEVBQU13NkQsRUFBZ0IsQ0FFdEMsR0FBR3g2RCxFQUFLLENBQUMsR0FBSyxHQUFLLEVBQUVBLEVBQUssQ0FBQyxFQUFJLEdBQVEsTUFBTyxDQUFDNm5ELEdBQVkyUyxDQUFHLEVBQUcsQ0FBQyxFQWFsRSxRQVZJd0MsRUFBTyxFQUdQL29CLEVBQVMsRUFFVGtxQixFQUFTclcsR0FBZTBTLEdBQWEsR0FBRyxFQUFHLEVBQzNDNEQsRUFBTyxFQUNQQyxFQUFLRixFQUFPLFNBQVMsRUFDckJHLEdBQVksRUFBR0MsRUFBWSxFQUV4QixFQUFBdHFCLEVBQU8sSUFBUyxDQUV0QixHQURBQSxFQUFTcW5CLEdBQVl0N0QsRUFBTWc5RCxDQUFJLEVBQUdBLEdBQVEsRUFDdEMvb0IsSUFBVyxFQVlKQSxHQUFVLEdBQU0sR0FFMUJxcUIsR0FBWSxFQUFHQyxFQUFZLElBRzNCdkIsRUFBT1csR0FBSTM5RCxFQUFNZzlELENBQUksRUFDckJzQixHQUFZYixHQUFXYyxFQUFZYixRQWxCWixDQUVwQlYsRUFBTyxJQUFHQSxHQUFRLEdBQUtBLEVBQUssSUFFL0IsSUFBSTlJLEVBQUtsMEQsRUFBS2c5RCxJQUFPLENBQUMsRUFBSWg5RCxHQUFNZzlELElBQU8sR0FBRyxDQUFDLEdBQUcsRUFHOUMsR0FGQUEsR0FBUSxHQUVMOUksRUFBSyxFQUVQLElBREcsQ0FBQ3NHLEdBQU82RCxFQUFLRCxFQUFPbEssSUFBTWlLLEVBQVNwQyxHQUFRb0MsRUFBUUMsRUFBT2xLLENBQUUsRUFBR21LLEVBQUtGLEVBQU8sUUFDeEVqSyxLQUFPLEdBQUtpSyxFQUFPQyxHQUFNLEVBQUlwK0QsRUFBS2c5RCxJQUFPLENBQUMsRUFBR0EsR0FBUSxFQUU1RCxRQUNBLENBUUQsT0FBUSxDQUNKLENBQUN4QyxHQUFRNkQsRUFBS0QsRUFBTyxRQUFVRCxFQUFTcEMsR0FBUW9DLEVBQVFDLEVBQU8sS0FBSyxFQUFHQyxFQUFLRixFQUFPLFFBRXRGLElBQUlLLEdBQU85QyxHQUFZMTdELEVBQU1nOUQsRUFBTXNCLEVBQVMsRUFDeEMvMUQsR0FBUTByQyxJQUFTLEdBQU0sRUFBSXdvQixHQUFTK0IsRUFBSSxFQUFJbEIsR0FBU2tCLEVBQUksRUFHN0QsR0FGQXhCLEdBQVF6MEQsR0FBTyxHQUFJQSxNQUFVLEVBRXhCLEVBQUFBLEtBQU8sRUFBRyxLQUFhNDFELEVBQU9DLEdBQU0sRUFBSTcxRCxPQUN4QyxJQUFHQSxJQUFRLElBQUssTUFFcEJBLElBQVEsSUFDUixJQUFJNjBELEdBQVU3MEQsR0FBTyxFQUFLLEVBQU1BLEdBQUssR0FBSSxFQUFPNjBELEdBQVMsSUFBR0EsR0FBUyxHQUNyRSxJQUFJakosR0FBTWlLLEVBQU92RCxFQUFPdHlELEVBQUksRUFFekI2MEQsR0FBUyxJQUNYakosSUFBT3VILEdBQVkxN0QsRUFBTWc5RCxFQUFNSSxFQUFNLEVBQ3JDSixHQUFRSSxJQUlUb0IsR0FBTzlDLEdBQVkxN0QsRUFBTWc5RCxFQUFNdUIsQ0FBUyxFQUN4Q2gyRCxHQUFRMHJDLElBQVMsR0FBTSxFQUFJeW9CLEdBQVM4QixFQUFJLEVBQUlqQixHQUFTaUIsRUFBSSxFQUN6RHhCLEdBQVF6MEQsR0FBTyxHQUFJQSxNQUFVLEVBQzdCLElBQUk4MEQsR0FBVTkwRCxHQUFPLEVBQUksRUFBS0EsR0FBSyxHQUFJLEVBQ25DdzVCLEdBQU0rNEIsRUFBT3Z5RCxFQUFJLEVBU3JCLElBUEc4MEQsR0FBUyxJQUNYdDdCLElBQU8yNUIsR0FBWTE3RCxFQUFNZzlELEVBQU1LLEVBQU0sRUFDckNMLEdBQVFLLElBSU4sQ0FBQzdDLEdBQU82RCxFQUFLbEssS0FBT2dLLEVBQVNwQyxHQUFRb0MsRUFBUWhLLEdBQU0sR0FBRyxFQUFHa0ssRUFBS0YsRUFBTyxRQUNsRUMsRUFBT2pLLElBQU9nSyxFQUFPQyxDQUFJLEVBQUlELEVBQU9DLEVBQU9yOEIsRUFBRyxFQUFHLEVBQUVxOEIsRUFFMUQsQ0FDRCxDQUNELE9BQUc1RCxFQUFZLENBQUMyRCxFQUFTbkIsRUFBSyxJQUFLLENBQUMsRUFDN0IsQ0FBQ21CLEVBQU8sTUFBTSxFQUFHQyxDQUFJLEVBQUlwQixFQUFLLElBQUssQ0FBQyxDQUM1QyxDQUVBLFNBQVN2QyxHQUFTL0QsRUFBUzhELEVBQUssQ0FDL0IsSUFBSXg2RCxFQUFPMDJELEVBQVEsTUFBTUEsRUFBUSxHQUFHLENBQUMsRUFDakNsTyxFQUFNMFYsR0FBUWwrRCxFQUFNdzZELENBQUcsRUFDM0IsT0FBQTlELEVBQVEsR0FBS2xPLEVBQUksQ0FBQyxFQUNYQSxFQUFJLENBQUMsQ0FDYixDQUVBLFNBQVNpVyxHQUFjQyxFQUFLcDJELEVBQUssQ0FDaEMsR0FBR28yRCxFQUFVLE9BQU8sUUFBWSxLQUFhLFFBQVEsTUFBTXAyRCxDQUFHLE1BQ3pELE9BQU0sSUFBSSxNQUFNQSxDQUFHLENBQ3pCLENBRUEsU0FBU2tzRCxHQUFVRCxFQUFtQmxwRSxFQUEwQyxDQUMvRSxJQUFJNjVELEVBQXlCcVAsRUFDN0JQLEdBQVU5TyxFQUFNLENBQUMsRUFFakIsSUFBSTRRLEVBQTZCLENBQUEsRUFBSUMsRUFBOEIsR0FDL0R2akUsRUFBSSxDQUNQLFVBQVdzakUsRUFDWCxVQUFXQyxDQUNiLEVBQ0NvQyxFQUFTM2xFLEVBQUcsQ0FBRSxLQUFNbkgsRUFBUSxJQUFNLENBQUEsRUFJbEMsUUFESW1ELEVBQUkwMkQsRUFBSyxPQUFTLEdBQ2ZBLEVBQUsxMkQsQ0FBQyxHQUFLLElBQVEwMkQsRUFBSzEyRCxFQUFFLENBQUMsR0FBSyxJQUFRMDJELEVBQUsxMkQsRUFBRSxDQUFDLEdBQUssR0FBUTAyRCxFQUFLMTJELEVBQUUsQ0FBQyxHQUFLLElBQVNBLEdBQUssR0FBRyxFQUFFQSxFQUNwRzAyRCxFQUFLLEVBQUkxMkQsRUFBSSxFQUdiMDJELEVBQUssR0FBSyxFQUNWLElBQUl5WixHQUFPelosRUFBSyxXQUFXLENBQUMsRUFDNUJBLEVBQUssR0FBSyxFQUNWLElBQUkwWixFQUFXMVosRUFBSyxXQUFXLENBQUMsRUFLaEMsSUFGQUEsRUFBSyxFQUFJMFosRUFFTHB3RSxFQUFJLEVBQUdBLEVBQUltd0UsR0FBTSxFQUFFbndFLEVBQUcsQ0FFekIwMkQsRUFBSyxHQUFLLEdBQ1YsSUFBSTJaLEVBQU0zWixFQUFLLFdBQVcsQ0FBQyxFQUN2QnNWLEdBQU10VixFQUFLLFdBQVcsQ0FBQyxFQUN2QndTLEdBQVV4UyxFQUFLLFdBQVcsQ0FBQyxFQUMzQjRaLEdBQU81WixFQUFLLFdBQVcsQ0FBQyxFQUN4QjZaLEdBQU83WixFQUFLLFdBQVcsQ0FBQyxFQUM1QkEsRUFBSyxHQUFLLEVBQ1YsSUFBSTZTLEdBQVM3UyxFQUFLLFdBQVcsQ0FBQyxFQUMxQjhaLEdBQUtqTCxFQUF5QjdPLEVBQUssTUFBTUEsRUFBSyxFQUFFd1MsR0FBU3hTLEVBQUssRUFBRXdTLEdBQVFvSCxFQUFJLENBQUMsRUFDakY1WixFQUFLLEdBQUt3UyxHQUFVb0gsR0FBT0MsR0FFM0IsSUFBSXJXLEdBQUl4RCxFQUFLLEVBQ2JBLEVBQUssRUFBSTZTLEdBQVMsRUFDbEJrSCxHQUFpQi9aLEVBQU0yWixFQUFLckUsR0FBS2hvRSxFQUFHd3NFLEVBQUUsRUFDdEM5WixFQUFLLEVBQUl3RCxFQUNULENBQ0QsT0FBT2wyRCxDQUNSLENBSUEsU0FBU3lzRSxHQUFpQi9aLEVBQWlCMlosRUFBZ0JyRSxFQUFnQmhvRSxFQUFvQndzRSxFQUFJLENBRWxHOVosRUFBSyxHQUFLLEVBQ1YsSUFBSStPLEVBQVEvTyxFQUFLLFdBQVcsQ0FBQyxFQUN6QmdhLEVBQU9oYSxFQUFLLFdBQVcsQ0FBQyxFQUN4Qmh6RCxHQUFPNGhFLEVBQWU1TyxDQUFJLEVBRTlCLEdBQUcrTyxFQUFRLEtBQVEsTUFBTSxJQUFJLE1BQU0sNEJBQTRCLEVBU2hELFFBUlhrTCxFQUFRamEsRUFBSyxXQUFXLENBQUMsRUFDekJrYSxFQUFPbGEsRUFBSyxXQUFXLENBQUMsRUFDeEJtYSxHQUFPbmEsRUFBSyxXQUFXLENBQUMsRUFFeEJ3UyxHQUFVeFMsRUFBSyxXQUFXLENBQUMsRUFDM0I0WixHQUFPNVosRUFBSyxXQUFXLENBQUMsRUFHeEJ0OEQsR0FBTyxHQUFZNEYsR0FBSSxFQUFHQSxHQUFJa3BFLEdBQVMsRUFBRWxwRSxHQUFHNUYsSUFBUSxPQUFPLGFBQWFzOEQsRUFBS0EsRUFBSyxHQUFHLENBQUMsRUFDMUYsR0FBRzRaLEdBQU0sQ0FDUixJQUFJUSxHQUFLdkwsRUFBeUI3TyxFQUFLLE1BQU1BLEVBQUssRUFBR0EsRUFBSyxFQUFJNFosRUFBSSxJQUM5RFEsR0FBRyxLQUFNLEdBQUcsQ0FBRSxHQUFFLEtBQUlwdEUsR0FBT290RSxHQUFHLEtBQU0sRUFBRSxNQUNyQ04sR0FBSSxDQUFFLEdBQUUsS0FBTSxHQUFHLENBQUEsR0FBSSxLQUFJOXNFLEdBQU84c0UsRUFBRyxLQUFNLEVBQUUsR0FDaEQsQ0FDRDlaLEVBQUssR0FBSzRaLEdBS1YsSUFBSTkrRCxHQUFPa2xELEVBQUssTUFBTUEsRUFBSyxFQUFHQSxFQUFLLEVBQUlrYSxDQUFJLEVBQzNDLE9BQU9GLEVBQUksQ0FDVixJQUFLLEdBQUdsL0QsR0FBT3U2RCxFQUFnQnJWLEVBQU1tYSxFQUFJLEVBQUcsTUFDNUMsSUFBSyxHQUFHLE1BQ1IsUUFBUyxNQUFNLElBQUksTUFBTSxzQ0FBd0NILENBQUksQ0FDckUsQ0FHRCxJQUFJUixHQUFNLEdBQ1B6SyxFQUFRLElBQ1ZrTCxFQUFRamEsRUFBSyxXQUFXLENBQUMsRUFDdEJpYSxHQUFTLFlBQWNBLEVBQVFqYSxFQUFLLFdBQVcsQ0FBQyxFQUFHd1osR0FBTSxJQUM1RFUsRUFBT2xhLEVBQUssV0FBVyxDQUFDLEVBQ3hCbWEsR0FBT25hLEVBQUssV0FBVyxDQUFDLEdBR3RCa2EsR0FBUVAsR0FBS0osR0FBY0MsR0FBSyx3QkFBMEJHLEVBQU0sT0FBU08sQ0FBSSxFQUM3RUMsSUFBUTdFLEdBQUtpRSxHQUFjQyxHQUFLLDBCQUE0QmxFLEVBQU0sT0FBUzZFLEVBQUksRUFHbEZFLEdBQVEvc0UsRUFBRzVKLEdBQU1vWCxHQUFNLENBQUMsT0FBUSxHQUFNLEdBQUk5TixFQUFJLENBQUMsQ0FDaEQsQ0FDQSxTQUFTK21FLEdBQVViLEVBQXNCL3NFLEVBQXVDLENBQy9FLElBQUkwdEUsRUFBUTF0RSxHQUFXLEdBQ25CbTlELEVBQU0sQ0FBQSxFQUFJZ1gsRUFBUSxHQUNsQmh0RSxFQUFlc2tFLEdBQVEsQ0FBQyxFQUN4QnhvQyxFQUFVeXFDLEVBQU0sWUFBYyxFQUFJLEVBQUk5RSxHQUFRLEVBRzlDemxFLEVBQUksRUFBR3MzRCxFQUFJLEVBRVg4WSxHQUFXLEVBQUdELEdBQU8sRUFDckJwd0IsR0FBTzZwQixFQUFJLFVBQVUsQ0FBQyxFQUFHcUgsR0FBS2x4QixHQUFNbXhCLEdBQUt0SCxFQUFJLFVBQVUsQ0FBQyxFQUN4RHVILEdBQU8sQ0FBQSxFQUNQQyxHQUFRLEVBRVosSUFBSXB4RSxFQUFJLEVBQUdBLEVBQUk0cEUsRUFBSSxVQUFVLE9BQVEsRUFBRTVwRSxFQUV0QyxHQURBaXhFLEdBQUtySCxFQUFJLFVBQVU1cEUsQ0FBQyxFQUFFLE1BQU0rL0MsR0FBSyxNQUFNLEVBQUdteEIsR0FBS3RILEVBQUksVUFBVTVwRSxDQUFDLEVBQzNELEdBQUNreEUsR0FBRyxNQUFRLENBQUNBLEdBQUcsU0FBV0QsSUFBTSxZQUNwQyxLQUFJL3dELEdBQVFrd0QsR0FHUmlCLEdBQVUvSSxHQUFRMkksR0FBRyxNQUFNLEVBQy9CLElBQUkzWixFQUFJLEVBQUdBLEVBQUkyWixHQUFHLE9BQVEsRUFBRTNaLEVBQUcrWixHQUFRLFlBQVksRUFBR0osR0FBRyxXQUFXM1osQ0FBQyxFQUFJLEdBQUksRUFDN0UrWixHQUFVQSxHQUFRLE1BQU0sRUFBR0EsR0FBUSxDQUFDLEVBQ3BDRixHQUFLaEIsRUFBSSxFQUFJL00sR0FBTSxJQUFZOE4sR0FBRyxRQUF5QixDQUFDLEVBRTVELElBQUl2QixHQUFTdUIsR0FBRyxRQUNicHhDLEdBQVUsSUFBRzZ2QyxHQUFTekQsRUFBZ0J5RCxFQUFNLEdBRy9DM3JFLEVBQUlza0UsR0FBUSxFQUFFLEVBQ2R0a0UsRUFBRSxZQUFZLEVBQUcsUUFBVSxFQUMzQkEsRUFBRSxZQUFZLEVBQUcsRUFBRSxFQUNuQkEsRUFBRSxZQUFZLEVBQUd5aEUsRUFBSyxFQUN0QnpoRSxFQUFFLFlBQVksRUFBRzg3QixDQUFNLEVBRXBCb3hDLEdBQUcsR0FBSS9MLEVBQWVuaEUsRUFBR2t0RSxHQUFHLEVBQUUsRUFDNUJsdEUsRUFBRSxZQUFZLEVBQUcsQ0FBQyxFQUN2QkEsRUFBRSxZQUFZLEdBQXNCbXRFLEdBQUtoQixFQUFJLENBQUMsRUFDOUNuc0UsRUFBRSxZQUFZLEVBQXNCMnJFLEdBQU8sTUFBTSxFQUNqRDNyRSxFQUFFLFlBQVksRUFBNkJrdEUsR0FBRyxRQUFtQixNQUFNLEVBQ3ZFbHRFLEVBQUUsWUFBWSxFQUFHcXRFLEdBQVEsTUFBTSxFQUMvQnJ0RSxFQUFFLFlBQVksRUFBRyxDQUFDLEVBRWxCb3NFLElBQVlwc0UsRUFBRSxPQUNkZzJELEVBQUksS0FBS2gyRCxDQUFDLEVBQ1Zvc0UsSUFBWWlCLEdBQVEsT0FDcEJyWCxFQUFJLEtBQUtxWCxFQUFPLEVBTWhCakIsSUFBWVQsR0FBTyxPQUNuQjNWLEVBQUksS0FBSzJWLEVBQU0sRUFhZjNyRSxFQUFJc2tFLEdBQVEsRUFBRSxFQUNkdGtFLEVBQUUsWUFBWSxFQUFHLFFBQVUsRUFDM0JBLEVBQUUsWUFBWSxFQUFHLENBQUMsRUFDbEJBLEVBQUUsWUFBWSxFQUFHLEVBQUUsRUFDbkJBLEVBQUUsWUFBWSxFQUFHeWhFLEVBQUssRUFDdEJ6aEUsRUFBRSxZQUFZLEVBQUc4N0IsQ0FBTSxFQUN2Qjk3QixFQUFFLFlBQVksRUFBRyxDQUFDLEVBQ2xCQSxFQUFFLFlBQVksR0FBSW10RSxHQUFLaEIsRUFBSSxDQUFDLEVBRTVCbnNFLEVBQUUsWUFBWSxFQUFHMnJFLEdBQU8sTUFBTSxFQUM5QjNyRSxFQUFFLFlBQVksRUFBVWt0RSxHQUFHLFFBQW1CLE1BQU0sRUFDcERsdEUsRUFBRSxZQUFZLEVBQUdxdEUsR0FBUSxNQUFNLEVBQy9CcnRFLEVBQUUsWUFBWSxFQUFHLENBQUMsRUFDbEJBLEVBQUUsWUFBWSxFQUFHLENBQUMsRUFDbEJBLEVBQUUsWUFBWSxFQUFHLENBQUMsRUFDbEJBLEVBQUUsWUFBWSxFQUFHLENBQUMsRUFDbEJBLEVBQUUsWUFBWSxFQUFHLENBQUMsRUFDbEJBLEVBQUUsWUFBWSxFQUFHa2MsRUFBSyxFQUV0Qmt4RCxJQUFTcHRFLEVBQUUsRUFDWGd0RSxFQUFNLEtBQUtodEUsQ0FBQyxFQUNab3RFLElBQVNDLEdBQVEsT0FDakJMLEVBQU0sS0FBS0ssRUFBTyxFQUNsQixFQUFFbEIsR0FJSCxPQUFBbnNFLEVBQUlza0UsR0FBUSxFQUFFLEVBQ2R0a0UsRUFBRSxZQUFZLEVBQUcsU0FBVSxFQUMzQkEsRUFBRSxZQUFZLEVBQUcsQ0FBQyxFQUNsQkEsRUFBRSxZQUFZLEVBQUcsQ0FBQyxFQUNsQkEsRUFBRSxZQUFZLEVBQUdtc0UsRUFBSSxFQUNyQm5zRSxFQUFFLFlBQVksRUFBR21zRSxFQUFJLEVBQ3JCbnNFLEVBQUUsWUFBWSxFQUFHb3RFLEVBQUssRUFDdEJwdEUsRUFBRSxZQUFZLEVBQUdvc0UsRUFBUSxFQUN6QnBzRSxFQUFFLFlBQVksRUFBRyxDQUFDLEVBRVg0MUQsR0FBUyxDQUFDQSxHQUFTSSxDQUFHLEVBQVlKLEdBQVFvWCxDQUFLLEVBQUdodEUsQ0FBQyxFQUMzRCxDQUNBLElBQUlzdEUsR0FBa0IsQ0FDckIsSUFBTyxZQUNQLElBQU8sV0FFUCxJQUFPLFlBQ1AsSUFBTyxhQUNQLElBQU8sWUFFUCxJQUFPLG9CQUNQLEtBQVEsaUNBQ1IsUUFBVywwQkFDWixFQUVBLFNBQVNDLEdBQWlCTCxFQUFpQkQsRUFBMEIsQ0FDcEUsR0FBR0MsRUFBRyxNQUFPLE9BQU9BLEVBQUcsTUFFdkIsSUFBSU0sRUFBTU4sRUFBRyxNQUFRLEdBQUkzWixFQUFJaWEsRUFBSSxNQUFNLGFBQWEsRUFHcEQsT0FGR2phLEdBQUsrWixHQUFlL1osRUFBRSxDQUFDLENBQUMsR0FFeEIwWixJQUNGMVosR0FBS2lhLEVBQU1QLEdBQUksTUFBTSxtQkFBbUIsRUFDckMxWixHQUFLK1osR0FBZS9aLEVBQUUsQ0FBQyxDQUFDLEdBQVUrWixHQUFlL1osRUFBRSxDQUFDLENBQUMsRUFHbEQsMEJBQ1IsQ0FHQSxTQUFTa2EsR0FBZ0IvTSxFQUE0QixDQUdwRCxRQUZJbHpELEVBQU9rbkQsR0FBY2dNLENBQUksRUFDekIxZ0UsRUFBSSxDQUFBLEVBQ0FoRSxFQUFJLEVBQUdBLEVBQUl3UixFQUFLLE9BQVF4UixHQUFJLEdBQUlnRSxFQUFFLEtBQUt3TixFQUFLLE1BQU14UixFQUFHQSxFQUFFLEVBQUUsQ0FBQyxFQUNsRSxPQUFPZ0UsRUFBRSxLQUFLO0FBQUEsQ0FBTSxFQUFJO0FBQUEsQ0FDekIsQ0FnQkEsU0FBUzB0RSxHQUF1QjFzRSxFQUE0QixDQUMzRCxJQUFJMnNFLEVBQVUzc0UsRUFBSyxRQUFRLDBDQUEyQyxTQUFTc2EsRUFBRyxDQUNqRixJQUFJMjlDLEdBQUkzOUMsRUFBRSxXQUFXLENBQUMsRUFBRSxTQUFTLEVBQUUsRUFBRSxjQUNyQyxNQUFPLEtBQU8yOUMsR0FBRSxRQUFVLEVBQUksSUFBTUEsR0FBSUEsR0FDMUMsQ0FBRSxFQUVEMFUsRUFBVUEsRUFBUSxRQUFRLE9BQVEsS0FBSyxFQUFFLFFBQVEsUUFBUyxLQUFLLEVBRTVEQSxFQUFRLE9BQU8sQ0FBQyxHQUFLO0FBQUEsSUFBTUEsRUFBVSxNQUFRQSxFQUFRLE1BQU0sQ0FBQyxHQUMvREEsRUFBVUEsRUFBUSxRQUFRLGFBQWMsS0FBSyxFQUFFLFFBQVEsU0FBVTtBQUFBLElBQU8sRUFBRSxRQUFRLGdCQUFpQixPQUFPLEVBRzFHLFFBREkzdEUsRUFBc0IsQ0FBQSxFQUFJK21ELEVBQVE0bUIsRUFBUSxNQUFNO0FBQUEsQ0FBTSxFQUNsREMsRUFBSyxFQUFHQSxFQUFLN21CLEVBQU0sT0FBUSxFQUFFNm1CLEVBQUksQ0FDeEMsSUFBSTkxQyxFQUFNaXZCLEVBQU02bUIsQ0FBRSxFQUNsQixHQUFHOTFDLEVBQUksUUFBVSxFQUFHLENBQUU5M0IsRUFBRSxLQUFLLEVBQUUsRUFBRyxRQUFXLENBQzdDLFFBQVFoRSxFQUFJLEVBQUdBLEVBQUk4N0IsRUFBSSxRQUFTLENBQy9CLElBQUltN0IsR0FBTSxHQUNObHNDLEVBQU0rUSxFQUFJLE1BQU05N0IsRUFBR0EsRUFBSWkzRCxFQUFHLEVBQzNCbHNDLEVBQUksT0FBT2tzQyxHQUFNLENBQUMsR0FBSyxJQUFLQSxLQUN2QmxzQyxFQUFJLE9BQU9rc0MsR0FBTSxDQUFDLEdBQUssSUFBS0EsSUFBTyxFQUNuQ2xzQyxFQUFJLE9BQU9rc0MsR0FBTSxDQUFDLEdBQUssTUFBS0EsSUFBTyxHQUMzQ2xzQyxFQUFNK1EsRUFBSSxNQUFNOTdCLEVBQUdBLEVBQUlpM0QsRUFBRyxFQUMxQmozRCxHQUFLaTNELEdBQ0ZqM0QsRUFBSTg3QixFQUFJLFNBQVEvUSxHQUFPLEtBQzFCL21CLEVBQUUsS0FBSyttQixDQUFHLENBQ1YsQ0FDRCxDQUVELE9BQU8vbUIsRUFBRSxLQUFLO0FBQUEsQ0FBTSxDQUNyQixDQUNBLFNBQVM2dEUsR0FBdUJyZ0UsRUFBcUMsQ0FJcEUsUUFISXhOLEVBQUksQ0FBQSxFQUdBOHRFLEVBQUssRUFBR0EsRUFBS3RnRSxFQUFLLE9BQVEsRUFBRXNnRSxFQUFJLENBRXZDLFFBREk3YyxFQUFPempELEVBQUtzZ0UsQ0FBRSxFQUNaQSxHQUFNdGdFLEVBQUssUUFBVXlqRCxFQUFLLE9BQU9BLEVBQUssT0FBUyxDQUFDLEdBQUssS0FBS0EsRUFBT0EsRUFBSyxNQUFNLEVBQUdBLEVBQUssT0FBUyxDQUFDLEVBQUl6akQsRUFBSyxFQUFFc2dFLENBQUUsRUFDakg5dEUsRUFBRSxLQUFLaXhELENBQUksQ0FDWCxDQUdELFFBQVE4YyxFQUFLLEVBQUdBLEVBQUsvdEUsRUFBRSxPQUFRLEVBQUUrdEUsRUFBSS90RSxFQUFFK3RFLENBQUUsRUFBSS90RSxFQUFFK3RFLENBQUUsRUFBRSxRQUFRLHFCQUFzQixTQUFTdFQsRUFBSSxDQUFFLE9BQU8sT0FBTyxhQUFhLFNBQVNBLEVBQUcsTUFBTSxDQUFDLEVBQUcsRUFBRSxDQUFDLENBQUksQ0FBQSxFQUN4SixPQUFPbEYsR0FBSXYxRCxFQUFFLEtBQUs7QUFBQSxDQUFNLENBQUMsQ0FDMUIsQ0FHQSxTQUFTZ3VFLEdBQVdwSSxFQUFzQnA0RCxFQUF3QnV1QyxFQUEwQixDQUczRixRQUZJa3lCLEVBQVEsR0FBSUMsRUFBTSxHQUFJQyxFQUFRLEdBQUlDLEVBQ2xDTixHQUFLLEVBQ0pBLEdBQUssR0FBSSxFQUFFQSxHQUFJLENBQ25CLElBQUk3YyxFQUFPempELEVBQUtzZ0UsRUFBRSxFQUNsQixHQUFHLENBQUM3YyxHQUFRQSxFQUFLLE1BQU0sT0FBTyxFQUFHLE1BQ2pDLElBQUlzQyxFQUFJdEMsRUFBSyxNQUFNLHNCQUFzQixFQUN6QyxHQUFHc0MsRUFBRyxPQUFPQSxFQUFFLENBQUMsRUFBRSxZQUFhLEVBQUEsQ0FDOUIsSUFBSyxtQkFBb0IwYSxFQUFRMWEsRUFBRSxDQUFDLEVBQUUsS0FBTSxFQUFFLE1BQzlDLElBQUssZUFBZ0I0YSxFQUFRNWEsRUFBRSxDQUFDLEVBQUUsS0FBTSxFQUFFLE1BQzFDLElBQUssNEJBQTZCMmEsRUFBTTNhLEVBQUUsQ0FBQyxFQUFFLEtBQU0sRUFBRSxLQUNyRCxDQUNELENBRUQsT0FEQSxFQUFFdWEsR0FDS0ksRUFBSSxZQUFhLEVBQUEsQ0FDdkIsSUFBSyxTQUFVRSxFQUFRN1ksR0FBSVAsR0FBY3huRCxFQUFLLE1BQU1zZ0UsRUFBRSxFQUFFLEtBQUssRUFBRSxDQUFDLENBQUMsRUFBRyxNQUNwRSxJQUFLLG1CQUFvQk0sRUFBUVAsR0FBdUJyZ0UsRUFBSyxNQUFNc2dFLEVBQUUsQ0FBQyxFQUFHLE1BQ3pFLFFBQVMsTUFBTSxJQUFJLE1BQU0seUNBQTJDSSxDQUFHLENBQ3ZFLENBQ0QsSUFBSW5NLEdBQU9nTCxHQUFRbkgsRUFBS3FJLEVBQU0sTUFBTWx5QixFQUFLLE1BQU0sRUFBR3F5QixFQUFPLENBQUMsT0FBUSxFQUFJLENBQUMsRUFDcEVELElBQU9wTSxHQUFLLE1BQVFvTSxFQUN4QixDQUVBLFNBQVNsTSxHQUFVRixFQUFtQmxwRSxFQUEwQyxDQUMvRSxHQUFHNDhELEVBQUlzTSxFQUFLLE1BQU0sRUFBRSxFQUFFLENBQUMsRUFBRSxZQUFXLEdBQU0sZ0JBQWlCLE1BQU0sSUFBSSxNQUFNLHdCQUF3QixFQUNuRyxJQUFJaG1CLEVBQVFsakQsR0FBV0EsRUFBUSxNQUFRLEdBRW5DMlUsR0FBUXluRCxJQUFXLE9BQU8sU0FBUzhNLENBQUksRUFBSUEsRUFBSyxTQUFTLFFBQVEsRUFBSXRNLEVBQUlzTSxDQUFJLEdBQUcsTUFBTTtBQUFBLENBQU0sRUFDNUYrTCxFQUFLLEVBQUdydEUsRUFBTSxHQUdsQixJQUFJcXRFLEVBQUssRUFBR0EsRUFBS3RnRSxFQUFLLE9BQVEsRUFBRXNnRSxFQUUvQixHQURBcnRFLEVBQU0rTSxFQUFLc2dFLENBQUUsRUFDVixFQUFDLHNCQUFzQixLQUFLcnRFLENBQUcsSUFDbENBLEVBQU1BLEVBQUksTUFBTUEsRUFBSSxRQUFRLE1BQU0sQ0FBQyxFQUMvQnM3QyxJQUFNQSxFQUFPdDdDLEVBQUksTUFBTSxFQUFHQSxFQUFJLFlBQVksR0FBRyxFQUFJLENBQUMsR0FDbkRBLEVBQUksTUFBTSxFQUFHczdDLEVBQUssTUFBTSxHQUFLQSxHQUNoQyxLQUFNQSxFQUFLLE9BQVMsSUFDbkJBLEVBQU9BLEVBQUssTUFBTSxFQUFHQSxFQUFLLE9BQVMsQ0FBQyxFQUNwQ0EsRUFBT0EsRUFBSyxNQUFNLEVBQUdBLEVBQUssWUFBWSxHQUFHLEVBQUksQ0FBQyxFQUMzQ3Q3QyxFQUFJLE1BQU0sRUFBRXM3QyxFQUFLLE1BQU0sR0FBS0EsSUFBL0IsQ0FJRixJQUFJc3lCLEdBQWE3Z0UsRUFBSyxDQUFDLEdBQUssSUFBSSxNQUFNLGtCQUFrQixFQUN4RCxHQUFHLENBQUM2Z0UsRUFBVyxNQUFNLElBQUksTUFBTSwwQkFBMEIsRUFDekQsSUFBSUMsR0FBVyxNQUFRRCxFQUFVLENBQUMsR0FBSyxJQUVuQy9LLEVBQTZCLENBQUEsRUFBSUMsRUFBOEIsR0FDL0R2akUsR0FBSSxDQUNQLFVBQVdzakUsRUFDWCxVQUFXQyxDQUNiLEVBQ0NvQyxFQUFTM2xFLEVBQUMsRUFDVixJQUFJdXVFLEdBQVVwQyxHQUFPLEVBQ3JCLElBQUkyQixFQUFLLEVBQUdBLEVBQUt0Z0UsRUFBSyxPQUFRLEVBQUVzZ0UsRUFBSSxDQUNuQyxJQUFJN2MsR0FBT3pqRCxFQUFLc2dFLENBQUUsRUFDZjdjLEtBQVNxZCxJQUFZcmQsS0FBU3FkLEdBQVcsT0FDekNuQyxNQUFRNkIsR0FBV2h1RSxHQUFHd04sRUFBSyxNQUFNK2dFLEdBQVVULENBQUUsRUFBRy94QixDQUFJLEVBQ3ZEd3lCLEdBQVdULEVBQ1gsQ0FDRCxPQUFPOXRFLEVBQ1IsQ0FFQSxTQUFTd21FLEdBQVVaLEVBQXNCL3NFLEVBQXFDLENBQzdFLElBQUkzQyxFQUFPMkMsR0FBVyxHQUNsQnkxRSxFQUFXcDRFLEVBQUssVUFBWSxVQUNoQ280RSxFQUFXLFVBQVlBLEVBV3ZCLFFBVEl0WSxFQUFNLENBQ1Qsb0JBQ0EsOENBQWdEc1ksRUFBUyxNQUFNLENBQUMsRUFBSSxJQUNwRSxHQUNBLEdBQ0EsRUFDRixFQUVLdnlCLEVBQU82cEIsRUFBSSxVQUFVLENBQUMsRUFBR3FILEVBQUtseEIsRUFBTW14QixHQUFLdEgsRUFBSSxVQUFVLENBQUMsRUFDcEQ1cEUsRUFBSSxFQUFHQSxFQUFJNHBFLEVBQUksVUFBVSxPQUFRLEVBQUU1cEUsRUFHMUMsR0FGQWl4RSxFQUFLckgsRUFBSSxVQUFVNXBFLENBQUMsRUFBRSxNQUFNKy9DLEVBQUssTUFBTSxFQUN2Q214QixHQUFLdEgsRUFBSSxVQUFVNXBFLENBQUMsRUFDakIsR0FBQ2t4RSxHQUFHLE1BQVEsQ0FBQ0EsR0FBRyxTQUFXRCxHQUFNLFlBR3BDLENBQUFBLEVBQUtBLEVBQUcsUUFBUSx5Q0FBMEMsU0FBUzN4RCxHQUFHLENBQ3JFLE1BQU8sS0FBT0EsR0FBRSxXQUFXLENBQUMsRUFBRSxTQUFTLEVBQUUsRUFBSSxHQUM3QyxDQUFBLEVBQUUsUUFBUSxtQkFBb0IsU0FBU3JiLEdBQUcsQ0FDMUMsTUFBTyxLQUFPQSxHQUFFLFdBQVcsQ0FBQyxFQUFFLFNBQVMsRUFBRSxFQUFJLEdBQ2hELENBQUcsRUFTRCxRQU5JdXVFLEVBQUt0QixHQUFHLFFBRVJ1QixHQUFPeFosSUFBVyxPQUFPLFNBQVN1WixDQUFFLEVBQUlBLEVBQUcsU0FBUyxRQUFRLEVBQUkvWSxFQUFJK1ksQ0FBRSxFQUd0RUUsR0FBVSxFQUFHeFksR0FBSSxLQUFLLElBQUksS0FBTXVZLEdBQUssTUFBTSxFQUFHL1MsR0FBSyxFQUMvQ2lULEdBQU0sRUFBR0EsSUFBT3pZLEdBQUcsRUFBRXlZLElBQVNqVCxHQUFHK1MsR0FBSyxXQUFXRSxFQUFHLElBQU0sSUFBUWpULEdBQUssS0FBTSxFQUFFZ1QsR0FDdkYsSUFBSUUsR0FBS0YsSUFBV3hZLEdBQUksRUFBSSxFQUU1QkYsRUFBSSxLQUFLc1ksQ0FBUSxFQUNqQnRZLEVBQUksS0FBSyxzQkFBd0I5L0QsRUFBSyxNQUFRLHVCQUF5QisyRSxDQUFFLEVBQ3pFalgsRUFBSSxLQUFLLCtCQUFpQzRZLEdBQUssbUJBQXFCLFNBQVMsRUFDN0U1WSxFQUFJLEtBQUssaUJBQW1CdVgsR0FBaUJMLEdBQUlELENBQUUsQ0FBQyxFQUNwRGpYLEVBQUksS0FBSyxFQUFFLEVBRVhBLEVBQUksS0FBSzRZLEdBQUtsQixHQUF1QmUsRUFBSSxFQUFJaEIsR0FBZ0JnQixFQUFJLENBQUMsRUFFbkUsT0FBQXpZLEVBQUksS0FBS3NZLEVBQVc7QUFBQSxDQUFRLEVBQ3JCdFksRUFBSSxLQUFLO0FBQUEsQ0FBTSxDQUN2QixDQUNBLFNBQVM2WSxHQUFRMzRFLEVBQWdDLENBQ2hELElBQUk4SixFQUFzQixDQUFBLEVBQzFCLE9BQUEybEUsRUFBUzNsRSxFQUFHOUosQ0FBSSxFQUNUOEosQ0FDUixDQUVBLFNBQVMrc0UsR0FBUW5ILEVBQXNCeHZFLEVBQWlCMDZELEVBQXVCNTZELEVBQTRCLENBQzFHLElBQUk0NEUsRUFBUzU0RSxHQUFRQSxFQUFLLE9BQ3RCNDRFLEdBQVFuSixFQUFTQyxDQUFHLEVBQ3hCLElBQUk3RCxFQUFPLENBQUMrTSxHQUFVaE8sR0FBSSxLQUFLOEUsRUFBS3h2RSxDQUFJLEVBQ3hDLEdBQUcsQ0FBQzJyRSxFQUFNLENBQ1QsSUFBSWdOLEVBQW1CbkosRUFBSSxVQUFVLENBQUMsRUFDbkN4dkUsRUFBSyxNQUFNLEVBQUcyNEUsRUFBTSxNQUFNLEdBQUtBLEVBQU9BLEVBQVEzNEUsR0FFN0MyNEUsRUFBTSxNQUFNLEVBQUUsR0FBSyxNQUFLQSxHQUFTLEtBQ3BDQSxHQUFTQSxFQUFRMzRFLEdBQU0sUUFBUSxLQUFLLEdBQUcsR0FFeEMyckUsRUFBUSxDQUFDLEtBQU10UixFQUFTcjZELENBQUksRUFBRyxLQUFNLENBQUMsRUFDdEN3dkUsRUFBSSxVQUFVLEtBQUs3RCxDQUFJLEVBQ3ZCNkQsRUFBSSxVQUFVLEtBQUttSixDQUFLLEVBQ3BCRCxHQUFRaE8sR0FBSSxNQUFNLE9BQU84RSxDQUFHLENBQ2hDLENBRUQsT0FBQTdELEVBQUssUUFBV2pSLEVBQ2hCaVIsRUFBSyxLQUFPalIsRUFBVUEsRUFBUSxPQUFTLEVBQ3BDNTZELElBQ0NBLEVBQUssUUFBTzZyRSxFQUFLLE1BQVE3ckUsRUFBSyxPQUM5QkEsRUFBSyxLQUFJNnJFLEVBQUssR0FBSzdyRSxFQUFLLElBQ3hCQSxFQUFLLEtBQUk2ckUsRUFBSyxHQUFLN3JFLEVBQUssS0FFckI2ckUsQ0FDUixDQUVBLFNBQVNpTixHQUFRcEosRUFBc0J4dkUsRUFBNkIsQ0FDbkV1dkUsRUFBU0MsQ0FBRyxFQUNaLElBQUk3RCxFQUFPakIsR0FBSSxLQUFLOEUsRUFBS3h2RSxDQUFJLEVBQzdCLEdBQUcyckUsR0FBTSxRQUFRek8sRUFBSSxFQUFHQSxFQUFJc1MsRUFBSSxVQUFVLE9BQVEsRUFBRXRTLEVBQUcsR0FBR3NTLEVBQUksVUFBVXRTLENBQUMsR0FBS3lPLEVBQzdFLE9BQUE2RCxFQUFJLFVBQVUsT0FBT3RTLEVBQUcsQ0FBQyxFQUN6QnNTLEVBQUksVUFBVSxPQUFPdFMsRUFBRyxDQUFDLEVBQ2xCLEdBRVIsTUFBTyxFQUNSLENBRUEsU0FBUzJiLEdBQVFySixFQUFzQnNKLEVBQXFCQyxFQUFpQyxDQUM1RnhKLEVBQVNDLENBQUcsRUFDWixJQUFJN0QsRUFBT2pCLEdBQUksS0FBSzhFLEVBQUtzSixDQUFRLEVBQ2pDLEdBQUduTixHQUFNLFFBQVF6TyxFQUFJLEVBQUdBLEVBQUlzUyxFQUFJLFVBQVUsT0FBUSxFQUFFdFMsRUFBRyxHQUFHc1MsRUFBSSxVQUFVdFMsQ0FBQyxHQUFLeU8sRUFDN0UsT0FBQTZELEVBQUksVUFBVXRTLENBQUMsRUFBRSxLQUFPN0MsRUFBUzBlLENBQVEsRUFDekN2SixFQUFJLFVBQVV0UyxDQUFDLEVBQUk2YixFQUNaLEdBRVIsTUFBTyxFQUNSLENBRUEsU0FBU0MsR0FBT3hKLEVBQStCLENBQUVHLEVBQVlILEVBQUssRUFBSSxDQUFJLENBRTFFLE9BQUE3RSxFQUFRLEtBQU9sMEIsRUFDZmswQixFQUFRLEtBQU8yRSxFQUNmM0UsRUFBUSxNQUFRZSxFQUNoQmYsRUFBUSxNQUFRMEcsR0FDaEIxRyxFQUFRLFVBQVl5RyxHQUNwQnpHLEVBQVEsTUFBUSxDQUNmLFFBQVM4TixHQUNULFFBQVM5QixHQUNULFFBQVNpQyxHQUNULFFBQVNDLEdBQ1QsT0FBUUcsR0FDUixVQUFXQyxHQUNYLFdBQVlDLEdBQ1osVUFBVzlOLEdBQ1gsUUFBUzVMLEdBQ1QsU0FBVStSLEVBQ1YsWUFBYVEsR0FDYixZQUFhRixHQUNiLE9BQVFkLEVBQ1QsRUFFT3BHLENBQ1AsSUFPQSxTQUFTd08sR0FBUS9oRSxFQUFNLENBQ3RCLE9BQUcsT0FBT0EsR0FBUyxTQUFpQmdvRCxHQUFLaG9ELENBQUksRUFDMUMsTUFBTSxRQUFRQSxDQUFJLEVBQVVrb0QsR0FBSWxvRCxDQUFJLEVBQ2hDQSxDQUNSLENBRUEsU0FBU2dpRSxHQUFTdkIsRUFBa0IvSixFQUFpQjlPLEVBQWlCLENBR3JFLEdBQUcsT0FBTyxLQUFTLElBQWEsQ0FFL0IsR0FBR0EsR0FBTyxPQUFPOE8sR0FBVyxTQUFVLE9BQU85TyxFQUFHLENBQy9DLElBQUssT0FBUThPLEVBQVUsSUFBSSxZQUFZOU8sQ0FBRyxFQUFFLE9BQU84TyxDQUFPLEVBQUcsTUFDN0QsSUFBSyxTQUFVQSxFQUFVMU8sR0FBSzBPLENBQU8sRUFBRyxNQUV4QyxRQUFTLE1BQU0sSUFBSSxNQUFNLHdCQUEwQjlPLENBQUcsQ0FDdEQsQ0FDRCxPQUFPLEtBQUssY0FBYzZZLEVBQU8vSixDQUFPLENBQ3hDLENBQ0QsSUFBSTEyRCxFQUFRNG5ELEdBQU8sT0FBVXFhLEdBQVV2TCxDQUFPLEVBQUlBLEVBRWxELEdBQUcsT0FBTyxZQUFnQixJQUFhLE9BQU8sWUFBWTEyRCxFQUFNeWdFLENBQUssRUFDckUsR0FBRyxPQUFPLEtBQVMsSUFBYSxDQUMvQixJQUFJdmIsRUFBTyxJQUFJLEtBQUssQ0FBQzZjLEdBQVEvaEUsQ0FBSSxDQUFDLEVBQUcsQ0FBQyxLQUFLLDBCQUEwQixDQUFDLEVBRXRFLEdBQUcsT0FBTyxVQUFjLEtBQWUsVUFBVSxXQUFZLE9BQU8sVUFBVSxXQUFXa2xELEVBQU11YixDQUFLLEVBRXBHLEdBQUcsT0FBTyxPQUFXLElBQWEsT0FBTyxPQUFPdmIsRUFBTXViLENBQUssRUFDM0QsR0FBRyxPQUFPLElBQVEsS0FBZSxPQUFPLFNBQWEsS0FBZSxTQUFTLGVBQWlCLElBQUksZ0JBQWlCLENBQ2xILElBQUlwdUQsRUFBTSxJQUFJLGdCQUFnQjZ5QyxDQUFJLEVBRWxDLEdBQUcsT0FBTyxRQUFXLFVBQVksT0FBUSxPQUFPLFdBQVcsQ0FBQSxHQUFJLFVBQVksV0FDMUUsT0FBRyxJQUFJLGlCQUFtQixPQUFPLFdBQWUsS0FBYSxXQUFXLFVBQVcsQ0FBRSxJQUFJLGdCQUFnQjd5QyxDQUFHLENBQUksRUFBRSxHQUFLLEVBQ2hILE9BQU8sVUFBVSxTQUFTLENBQUUsSUFBS0EsRUFBSyxTQUFVb3VELEVBQU8sT0FBUSxFQUFJLENBQUMsRUFFNUUsSUFBSTN1RSxFQUFJLFNBQVMsY0FBYyxHQUFHLEVBQ2xDLEdBQUdBLEVBQUUsVUFBWSxLQUVoQixPQUFBQSxFQUFFLFNBQVcydUUsRUFBTzN1RSxFQUFFLEtBQU91Z0IsRUFBSyxTQUFTLEtBQUssWUFBWXZnQixDQUFDLEVBQUdBLEVBQUUsTUFBSyxFQUNMLFNBQVMsS0FBSyxZQUFZQSxDQUFDLEVBQzFGLElBQUksaUJBQW1CLE9BQU8sV0FBZSxLQUFhLFdBQVcsVUFBVyxDQUFFLElBQUksZ0JBQWdCdWdCLENBQUcsQ0FBSSxFQUFFLEdBQUssRUFDaEhBLENBRVIsQ0FDRCxDQUVELEdBQUcsT0FBTyxFQUFNLEtBQWUsT0FBTyxLQUFTLEtBQWUsT0FBTyxPQUFXLElBQWEsR0FBSSxDQUVoRyxJQUFJbTJDLEVBQU0sS0FBS2lZLENBQUssRUFBRyxPQUFBalksRUFBSSxLQUFLLEdBQUcsRUFBR0EsRUFBSSxTQUFXLFNBQ2xELE1BQU0sUUFBUWtPLENBQU8sSUFBR0EsRUFBVXpPLEdBQUl5TyxDQUFPLEdBQ2hEbE8sRUFBSSxNQUFNa08sQ0FBTyxFQUFHbE8sRUFBSSxNQUFPLEVBQVNrTyxDQUN4QyxPQUFPbGxFLEVBQUcsQ0FBRSxHQUFHLENBQUNBLEVBQUUsU0FBVyxDQUFDQSxFQUFFLFFBQVEsTUFBTSxVQUFVLEVBQUcsTUFBTUEsQ0FBSSxDQUN0RSxNQUFNLElBQUksTUFBTSxvQkFBc0JpdkUsQ0FBSyxDQUM1QyxDQUdBLFNBQVN5QixHQUFZeDBFLEVBQWlCLENBRXJDLEdBQUcsT0FBTyxLQUFTLElBQWEsT0FBTyxLQUFLLGFBQWFBLENBQUksRUFFN0QsR0FBRyxPQUFPLEVBQU0sS0FBZSxPQUFPLEtBQVMsS0FBZSxPQUFPLE9BQVcsSUFBYSxHQUFJLENBRWhHLElBQUl5MEUsRUFBUyxLQUFLejBFLENBQUksRUFBR3kwRSxFQUFPLEtBQUssR0FBRyxFQUFHQSxFQUFPLFNBQVcsU0FDN0QsSUFBSW5pRSxFQUFPbWlFLEVBQU8sS0FBTSxFQUFFLE9BQUFBLEVBQU8sUUFDMUJuaUUsQ0FDUCxPQUFPeE8sRUFBRyxDQUFFLEdBQUcsQ0FBQ0EsRUFBRSxTQUFXLENBQUNBLEVBQUUsUUFBUSxNQUFNLFVBQVUsRUFBRyxNQUFNQSxDQUFJLENBQ3RFLE1BQU0sSUFBSSxNQUFNLHNCQUF3QjlELENBQUksQ0FDN0MsQ0FDQSxTQUFTMEMsR0FBS29DLEVBQTBCLENBRXZDLFFBREk0dkUsRUFBSyxPQUFPLEtBQUs1dkUsQ0FBQyxFQUFHNnZFLEVBQUssR0FDdEI3ekUsRUFBSSxFQUFHQSxFQUFJNHpFLEVBQUcsT0FBUSxFQUFFNXpFLEVBQU0sT0FBTyxVQUFVLGVBQWUsS0FBS2dFLEVBQUc0dkUsRUFBRzV6RSxDQUFDLENBQUMsR0FBRzZ6RSxFQUFHLEtBQUtELEVBQUc1ekUsQ0FBQyxDQUFDLEVBQ25HLE9BQU82ekUsQ0FDUixDQUVBLFNBQVNDLEdBQVVyMEUsRUFBYWpDLEVBQThCLENBRTdELFFBREl3RyxFQUFLLENBQUEsRUFBYSt2RSxFQUFJbnlFLEdBQUtuQyxDQUFHLEVBQzFCTyxFQUFJLEVBQUdBLElBQU0rekUsRUFBRSxPQUFRLEVBQUUvekUsRUFBTWdFLEVBQUV2RSxFQUFJczBFLEVBQUUvekUsQ0FBQyxDQUFDLEVBQUV4QyxDQUFHLENBQUMsR0FBSyxPQUFNd0csRUFBRXZFLEVBQUlzMEUsRUFBRS96RSxDQUFDLENBQUMsRUFBRXhDLENBQUcsQ0FBQyxFQUFJdTJFLEVBQUUvekUsQ0FBQyxHQUN6RixPQUFPZ0UsQ0FDUixDQUVBLFNBQVNnd0UsR0FBTXYwRSxFQUEyQixDQUV6QyxRQURJdUUsRUFBSyxDQUFBLEVBQWErdkUsRUFBSW55RSxHQUFLbkMsQ0FBRyxFQUMxQk8sRUFBSSxFQUFHQSxJQUFNK3pFLEVBQUUsT0FBUSxFQUFFL3pFLEVBQUdnRSxFQUFFdkUsRUFBSXMwRSxFQUFFL3pFLENBQUMsQ0FBQyxDQUFDLEVBQUkrekUsRUFBRS96RSxDQUFDLEVBQ3RELE9BQU9nRSxDQUNSLENBRUEsU0FBU2l3RSxHQUFVeDBFLEVBQThCLENBRWhELFFBREl1RSxFQUFLLENBQUEsRUFBYSt2RSxFQUFJbnlFLEdBQUtuQyxDQUFHLEVBQzFCTyxFQUFJLEVBQUdBLElBQU0rekUsRUFBRSxPQUFRLEVBQUUvekUsRUFBR2dFLEVBQUV2RSxFQUFJczBFLEVBQUUvekUsQ0FBQyxDQUFDLENBQUMsRUFBSSxTQUFTK3pFLEVBQUUvekUsQ0FBQyxFQUFFLEVBQUUsRUFDbkUsT0FBT2dFLENBQ1IsQ0FFQSxTQUFTa3dFLEdBQVV6MEUsRUFBOEIsQ0FFaEQsUUFESXVFLEVBQXNCLENBQUEsRUFBYSt2RSxFQUFJbnlFLEdBQUtuQyxDQUFHLEVBQzNDTyxFQUFJLEVBQUdBLElBQU0rekUsRUFBRSxPQUFRLEVBQUUvekUsRUFDN0JnRSxFQUFFdkUsRUFBSXMwRSxFQUFFL3pFLENBQUMsQ0FBQyxDQUFDLEdBQUssT0FBTWdFLEVBQUV2RSxFQUFJczBFLEVBQUUvekUsQ0FBQyxDQUFDLENBQUMsRUFBSSxDQUFBLEdBQ3hDZ0UsRUFBRXZFLEVBQUlzMEUsRUFBRS96RSxDQUFDLENBQUMsQ0FBQyxFQUFFLEtBQUsrekUsRUFBRS96RSxDQUFDLENBQUMsRUFFdkIsT0FBT2dFLENBQ1IsQ0FFQSxJQUFJbXdFLEdBQXdCLElBQUksS0FBSyxLQUFNLEdBQUksR0FBSSxFQUFHLEVBQUcsQ0FBQyxFQUMxRCxTQUFTQyxHQUFRdDBELEVBQVk4OEMsRUFBa0MsQ0FDOUQsSUFBSUMsRUFBcUIvOEMsRUFBRSxVQUN4Qjg4QyxJQUFVQyxHQUFTLEtBQUssR0FBRyxHQUFHLEdBQUcsS0FDcEMsSUFBSXdYLEVBQXdCRixHQUFTLFFBQU8sR0FBbUJyMEQsRUFBRSxrQkFBaUIsRUFBa0JxMEQsR0FBUyxrQkFBbUIsR0FBSSxJQUNwSSxPQUFRdFgsRUFBUXdYLElBQWEsR0FBSyxHQUFLLEdBQUssSUFDN0MsQ0FDQSxJQUFJQyxHQUF1QixJQUFJLEtBQzNCRCxHQUF3QkYsR0FBUyxRQUFPLEdBQW1CRyxHQUFRLGtCQUFpQixFQUFrQkgsR0FBUyxrQkFBbUIsR0FBSSxJQUN0SUksR0FBeUJELEdBQVEsb0JBQ3JDLFNBQVNFLEdBQVExMEQsRUFBdUIsQ0FDdkMsSUFBSWs2QyxFQUFNLElBQUksS0FDZCxPQUFBQSxFQUFJLFFBQVFsNkMsRUFBSSxHQUFLLEdBQUssR0FBSyxJQUFPdTBELEVBQVEsRUFDMUNyYSxFQUFJLGtCQUFtQixJQUFLdWEsSUFDL0J2YSxFQUFJLFFBQVFBLEVBQUksUUFBUyxHQUFJQSxFQUFJLGtCQUFtQixFQUFHdWEsSUFBYSxHQUFLLEVBRW5FdmEsQ0FDUixDQUdBLFNBQVN5YSxHQUFhcHhFLEVBQUcsQ0FDeEIsSUFBSXF4RSxFQUFNLEVBQUdDLEVBQUssRUFBRy8vQixFQUFPLEdBQ3hCMmlCLEVBQUlsMEQsRUFBRSxNQUFNLDRFQUE0RSxFQUM1RixHQUFHLENBQUNrMEQsRUFBRyxNQUFNLElBQUksTUFBTSxJQUFNbDBELEVBQUksOEJBQThCLEVBQy9ELFFBQVEsRUFBSSxFQUFHLEdBQUtrMEQsRUFBRSxPQUFRLEVBQUUsRUFDL0IsR0FBSUEsRUFBRSxDQUFDLEVBR1AsUUFGQW9kLEVBQUssRUFDRixFQUFJLElBQUcvL0IsRUFBTyxJQUNWMmlCLEVBQUUsQ0FBQyxFQUFFLE1BQU1BLEVBQUUsQ0FBQyxFQUFFLE9BQU8sQ0FBQyxFQUFDLENBQy9CLElBQUssSUFDSixNQUFNLElBQUksTUFBTSxtQ0FBcUNBLEVBQUUsQ0FBQyxFQUFFLE1BQU1BLEVBQUUsQ0FBQyxFQUFFLE9BQU8sQ0FBQyxDQUFDLEVBQy9FLElBQUssSUFBS29kLEdBQU0sR0FFaEIsSUFBSyxJQUFLQSxHQUFNLEdBRWhCLElBQUssSUFDSixHQUFJLy9CLEVBQ0MrL0IsR0FBTSxPQURELE9BQU0sSUFBSSxNQUFNLG1DQUFtQyxDQUk5RCxDQUNERCxHQUFPQyxFQUFLLFNBQVNwZCxFQUFFLENBQUMsRUFBRyxFQUFFLEVBRTlCLE9BQU9tZCxDQUNSLENBRUEsSUFBSUUsR0FBOEIsSUFBSSxLQUFLLDBCQUEwQixFQUNqRUMsR0FBNEIsTUFBbUJELEdBQWUsWUFBVyxDQUFFLEVBQWlCLElBQUksS0FBSyxTQUFTLEVBQUlBLEdBQ2xIRSxHQUF1QkQsR0FBYSxZQUFhLEdBQUksS0FFekQsU0FBU0UsR0FBVWo1QyxFQUFxQms1QyxFQUE4QixDQUNyRSxJQUFJOXdFLEVBQUksSUFBSSxLQUFLNDNCLENBQUcsRUFDcEIsR0FBR2c1QyxHQUVGLE9BQUdFLEVBQVUsRUFBRzl3RSxFQUFFLFFBQVFBLEVBQUUsUUFBUyxFQUFHQSxFQUFFLGtCQUFpQixFQUFLLEdBQUssR0FBSSxFQUNqRTh3RSxFQUFVLEdBQUc5d0UsRUFBRSxRQUFRQSxFQUFFLFFBQVMsRUFBR0EsRUFBRSxrQkFBaUIsRUFBSyxHQUFLLEdBQUksRUFDdkVBLEVBRVIsR0FBRzQzQixhQUFlLEtBQU0sT0FBT0EsRUFDL0IsR0FBRys0QyxHQUFhLFlBQVcsR0FBTSxNQUFRLENBQUMsTUFBTTN3RSxFQUFFLFlBQVcsQ0FBRSxFQUFHLENBQ2pFLElBQUliLEVBQUlhLEVBQUUsY0FDVixPQUFHNDNCLEVBQUksUUFBUSxHQUFLejRCLENBQUMsRUFBSSxJQUN6QmEsRUFBRSxZQUFZQSxFQUFFLFlBQWEsRUFBRyxHQUFHLEVBQVVBLENBQzdDLENBQ0QsSUFBSWQsRUFBSTA0QixFQUFJLE1BQU0sTUFBTSxHQUFHLENBQUMsT0FBTyxJQUFJLEtBQUssSUFBSSxJQUFJLEdBQUcsRUFDbkRrK0IsRUFBTSxJQUFJLEtBQUssQ0FBQzUyRCxFQUFFLENBQUMsRUFBRyxDQUFDQSxFQUFFLENBQUMsRUFBSSxFQUFHLENBQUNBLEVBQUUsQ0FBQyxFQUFJLENBQUNBLEVBQUUsQ0FBQyxHQUFHLEVBQUssQ0FBQ0EsRUFBRSxDQUFDLEdBQUcsRUFBSyxDQUFDQSxFQUFFLENBQUMsR0FBRyxDQUFDLEVBQzdFLE9BQUcwNEIsRUFBSSxRQUFRLEdBQUcsRUFBSSxLQUFJaytCLEVBQU0sSUFBSSxLQUFLQSxFQUFJLFFBQVMsRUFBR0EsRUFBSSxrQkFBaUIsRUFBSyxHQUFLLEdBQUksR0FDckZBLENBQ1IsQ0FFQSxTQUFTaWIsR0FBT2hvRSxFQUF1QmlvRSxFQUFvQixDQUMxRCxHQUFHamMsSUFBVyxPQUFPLFNBQVNoc0QsQ0FBRyxFQUFHLENBQ25DLEdBQUdpb0UsRUFBUyxDQUNYLEdBQUdqb0UsRUFBSSxDQUFDLEdBQUssS0FBUUEsRUFBSSxDQUFDLEdBQUssSUFBTSxPQUFPd21FLEdBQVV4bUUsRUFBSSxNQUFNLENBQUMsRUFBRSxTQUFTLFNBQVMsQ0FBQyxFQUN0RixHQUFHQSxFQUFJLENBQUMsR0FBSyxLQUFRQSxFQUFJLENBQUMsR0FBSyxJQUFNLE9BQU93bUUsR0FBVXZiLEdBQVlqckQsRUFBSSxNQUFNLENBQUMsRUFBRSxTQUFTLFFBQVEsQ0FBQyxDQUFDLENBQ2xHLENBQ0QsT0FBT0EsRUFBSSxTQUFTLFFBQVEsQ0FDNUIsQ0FFRCxHQUFHLE9BQU8sWUFBZ0IsSUFBYSxHQUFJLENBQzFDLEdBQUdpb0UsRUFBUyxDQUNYLEdBQUdqb0UsRUFBSSxDQUFDLEdBQUssS0FBUUEsRUFBSSxDQUFDLEdBQUssSUFBTSxPQUFPd21FLEdBQVUsSUFBSSxZQUFZLFVBQVUsRUFBRSxPQUFPeG1FLEVBQUksTUFBTSxDQUFDLENBQUMsQ0FBQyxFQUN0RyxHQUFHQSxFQUFJLENBQUMsR0FBSyxLQUFRQSxFQUFJLENBQUMsR0FBSyxJQUFNLE9BQU93bUUsR0FBVSxJQUFJLFlBQVksVUFBVSxFQUFFLE9BQU94bUUsRUFBSSxNQUFNLENBQUMsQ0FBQyxDQUFDLENBQ3RHLENBQ0QsSUFBSTAvRCxFQUFNLENBQ1QsSUFBVSxJQUFRLElBQVUsSUFBUSxFQUFVLElBQVEsSUFBVSxJQUNoRSxJQUFVLElBQVEsSUFBVSxJQUFRLElBQVUsSUFBUSxJQUFVLElBQ2hFLElBQVUsSUFBUSxFQUFVLElBQVEsSUFBVSxJQUFRLEVBQVUsSUFDaEUsRUFBVSxJQUFRLElBQVUsSUFBUSxJQUFVLElBQVEsSUFBVSxJQUNoRSxJQUFVLElBQVEsSUFBVSxJQUFRLElBQVUsSUFBUSxJQUFVLElBQ2hFLElBQVUsSUFBUSxJQUFVLElBQVEsRUFBVSxJQUFRLElBQVUsSUFDaEUsRUFBVSxJQUFRLEVBQVUsSUFBUSxFQUFVLEdBQ2pELEVBQ0UsT0FBRyxNQUFNLFFBQVExL0QsQ0FBRyxJQUFHQSxFQUFNLElBQUksV0FBV0EsQ0FBRyxHQUN4QyxJQUFJLFlBQVksUUFBUSxFQUFFLE9BQU9BLENBQUcsRUFBRSxRQUFRLGlDQUFrQyxTQUFTcVMsRUFBRyxDQUFFLE9BQU9xdEQsRUFBSXJ0RCxDQUFDLEdBQUtBLENBQUUsQ0FBRSxDQUM1SCxNQUFZLENBQUUsQ0FHYixRQURJdGIsRUFBSSxDQUFBLEVBQ0FoRSxFQUFJLEVBQUdBLEdBQUtpTixFQUFJLE9BQVEsRUFBRWpOLEVBQUdnRSxFQUFFLEtBQUssT0FBTyxhQUFhaUosRUFBSWpOLENBQUMsQ0FBQyxDQUFDLEVBQ3ZFLE9BQU9nRSxFQUFFLEtBQUssRUFBRSxDQUNqQixDQUVBLFNBQVNteEUsR0FBSW54RSxFQUFtQixDQUMvQixHQUFHLE9BQU8sS0FBUSxLQUFlLENBQUMsTUFBTSxRQUFRQSxDQUFDLEVBQUcsT0FBTyxLQUFLLE1BQU0sS0FBSyxVQUFVQSxDQUFDLENBQUMsRUFDdkYsR0FBRyxPQUFPQSxHQUFLLFVBQVlBLEdBQUssS0FBTSxPQUFPQSxFQUM3QyxHQUFHQSxhQUFhLEtBQU0sT0FBTyxJQUFJLEtBQUtBLEVBQUUsUUFBTyxDQUFFLEVBQ2pELElBQUlnMkQsRUFBTSxDQUFBLEVBQ1YsUUFBUXg2QyxLQUFLeGIsRUFBTSxPQUFPLFVBQVUsZUFBZSxLQUFLQSxFQUFHd2IsQ0FBQyxJQUFHdzZDLEVBQUl4NkMsQ0FBQyxFQUFJMjFELEdBQUlueEUsRUFBRXdiLENBQUMsQ0FBQyxHQUNoRixPQUFPdzZDLENBQ1IsQ0FFQSxTQUFTUSxHQUFLbDdDLEVBQWFzRixFQUF5QixDQUFjLFFBQVI1Z0IsRUFBSSxHQUFVQSxFQUFFLE9BQVM0Z0IsR0FBRzVnQixHQUFHc2IsRUFBRyxPQUFPdGIsQ0FBSSxDQUd2RyxTQUFTb3hFLEdBQVMveEUsRUFBeUIsQ0FDMUMsSUFBSXljLEVBQWUsT0FBT3pjLENBQUMsRUFDM0IsR0FBRyxDQUFDLE1BQU15YyxDQUFDLEVBQUcsT0FBTyxTQUFTQSxDQUFDLEVBQUlBLEVBQUksSUFDdkMsR0FBRyxDQUFDLEtBQUssS0FBS3pjLENBQUMsRUFBRyxPQUFPeWMsRUFDekIsSUFBSXUxRCxFQUFLLEVBQ0wzWCxFQUFLcjZELEVBQUUsUUFBUSxpQkFBaUIsTUFBTSxFQUFFLFFBQVEsT0FBTyxFQUFFLEVBQUUsUUFBUSxPQUFRLFVBQVcsQ0FBRSxPQUFBZ3lFLEdBQU0sSUFBWSxFQUFHLENBQUMsRUFHbEgsTUFGRyxDQUFDLE1BQU12MUQsRUFBSSxPQUFPNDlDLENBQUUsQ0FBQyxJQUN4QkEsRUFBS0EsRUFBRyxRQUFRLGFBQWEsU0FBU2UsRUFBSUMsRUFBSSxDQUFFLE9BQUEyVyxFQUFLLENBQUNBLEVBQVczVyxDQUFHLENBQUMsRUFDbEUsQ0FBQyxNQUFNNStDLEVBQUksT0FBTzQ5QyxDQUFFLENBQUMsR0FBVTU5QyxFQUFJdTFELEVBQy9CdjFELENBQ1IsQ0FDQSxJQUFJdzFELEdBQWUsQ0FBQyxVQUFXLFdBQVksUUFBUyxRQUFTLE1BQU8sT0FBUSxPQUFRLFNBQVUsWUFBYSxVQUFXLFdBQVksVUFBVSxFQUM1SSxTQUFTQyxHQUFVbHlFLEVBQXVCLENBQ3pDLElBQUlXLEVBQUksSUFBSSxLQUFLWCxDQUFDLEVBQUdELEVBQUksSUFBSSxLQUFLLEdBQUcsRUFDakM2d0MsRUFBSWp3QyxFQUFFLFFBQU8sRUFBSXV6RCxFQUFJdnpELEVBQUUsV0FBWUUsRUFBSUYsRUFBRSxRQUFPLEVBQ3BELEdBQUcsTUFBTUUsQ0FBQyxFQUFHLE9BQU9kLEVBQ3BCLElBQUlveUUsRUFBUW55RSxFQUFFLGNBQ2QsR0FBR215RSxFQUFNLE1BQU0saURBQWlELEdBRS9ELEdBREFBLEVBQVFBLEVBQU0sUUFBUSxVQUFVLEVBQUUsRUFBRSxRQUFRLDZCQUE2QixFQUFFLEVBQ3hFQSxFQUFNLE9BQVMsR0FBS0YsR0FBYSxRQUFRRSxDQUFLLEdBQUssR0FBSSxPQUFPcHlFLFVBQ3hEb3lFLEVBQU0sTUFBTSxPQUFPLEVBQUcsT0FBT3B5RSxFQUN2QyxPQUFHNndDLEVBQUksR0FBS0EsRUFBSSxLQUFhN3dDLEdBQ3pCbTBELEVBQUksR0FBS3J6RCxFQUFJLElBQU0rdkMsR0FBSyxJQUFZandDLEVBQ3JDWCxFQUFFLE1BQU0sZUFBZSxFQUFVRCxFQUM3QlksQ0FDUixDQUVBLElBQUl5eEUsR0FBNEIsVUFBVyxDQUMxQyxJQUFJQyxFQUFtQixVQUFVLE1BQU0sUUFBUSxFQUFFLFFBQVUsRUFDM0QsT0FBTyxTQUFxQjU1QyxFQUFnQjY1QyxFQUFJbm5FLEVBQWtDLENBQ2pGLEdBQUdrbkUsR0FBb0IsT0FBT0MsR0FBTSxTQUFVLE9BQU83NUMsRUFBSSxNQUFNNjVDLENBQUUsRUFFakUsUUFESTUyRSxFQUFJKzhCLEVBQUksTUFBTTY1QyxDQUFFLEVBQUczeEUsRUFBSSxDQUFDakYsRUFBRSxDQUFDLENBQUMsRUFDeEJpQixFQUFJLEVBQUdBLEVBQUlqQixFQUFFLE9BQVEsRUFBRWlCLEVBQUtnRSxFQUFFLEtBQUt3SyxDQUFHLEVBQUd4SyxFQUFFLEtBQUtqRixFQUFFaUIsQ0FBQyxDQUFDLEVBQzVELE9BQU9nRSxDQUNULENBQ0EsSUFDQSxTQUFTNHhFLEdBQVdwa0UsRUFBa0IsQ0FDckMsT0FBSUEsRUFDREEsRUFBSyxTQUFXQSxFQUFLLEtBQWF5akUsR0FBT3pqRSxFQUFLLFFBQVMsRUFBSSxFQUMzREEsRUFBSyxLQUFhMm1ELEdBQU0zbUQsRUFBSyxJQUFJLEVBQ2pDQSxFQUFLLGNBQWdCeW5ELEdBQWdCZCxHQUFNM21ELEVBQUssZUFBZSxTQUFTLFFBQVEsQ0FBQyxFQUNqRkEsRUFBSyxTQUFpQjJtRCxHQUFNM21ELEVBQUssU0FBUSxDQUFFLEVBQzNDQSxFQUFLLE9BQVNBLEVBQUssTUFBTSxXQUFtQjJtRCxHQUFNOGMsR0FBTyxNQUFNLFVBQVUsTUFBTSxLQUFLempFLEVBQUssTUFBTSxhQUFhLENBQUMsQ0FBQyxDQUFDLEVBQzNHLEtBTlUsSUFPbEIsQ0FFQSxTQUFTcWtFLEdBQVdya0UsRUFBTSxDQUN6QixHQUFHLENBQUNBLEVBQU0sT0FBTyxLQUNqQixHQUFHQSxFQUFLLEtBQU0sT0FBT3dtRCxHQUFXeG1ELEVBQUssSUFBSSxFQUN6QyxHQUFHQSxFQUFLLGNBQWdCeW5ELEdBQVMsT0FBT3puRCxFQUFLLGFBQVksRUFDekQsR0FBR0EsRUFBSyxPQUFTQSxFQUFLLE1BQU0sV0FBWSxDQUN2QyxJQUFJeE4sRUFBSXdOLEVBQUssTUFBTSxXQUFVLEVBQzdCLE9BQUcsT0FBT3hOLEdBQUssU0FBaUJnMEQsR0FBV2gwRCxDQUFDLEVBQ3JDLE1BQU0sVUFBVSxNQUFNLEtBQUtBLENBQUMsQ0FDbkMsQ0FDRCxPQUFHd04sRUFBSyxTQUFXQSxFQUFLLEtBQWFBLEVBQUssUUFDbkMsSUFDUixDQUVBLFNBQVNza0UsR0FBUXRrRSxFQUFNLENBQUUsT0FBUUEsR0FBUUEsRUFBSyxLQUFLLE1BQU0sRUFBRSxJQUFNLE9BQVVxa0UsR0FBV3JrRSxDQUFJLEVBQUlva0UsR0FBV3BrRSxDQUFJLENBQUksQ0FJakgsU0FBU3VrRSxHQUFlQyxFQUFLalEsRUFBaUIsQ0FHN0MsUUFGSXZtRCxFQUFJdzJELEVBQUksV0FBYXAwRSxHQUFLbzBFLEVBQUksS0FBSyxFQUNuQ2p5RSxFQUFJZ2lFLEVBQUssWUFBYSxFQUFDLFFBQVEsUUFBUyxJQUFJLEVBQUczTyxFQUFJcnpELEVBQUUsUUFBUSxNQUFNLEdBQUksRUFDbkUsRUFBRSxFQUFHLEVBQUV5YixFQUFFLE9BQVEsRUFBRSxFQUFHLENBQzdCLElBQUlwYyxFQUFJb2MsRUFBRSxDQUFDLEVBQUUsUUFBUSxrQkFBa0IsRUFBRSxFQUFFLGNBQzNDLEdBQUd6YixHQUFLWCxHQUFLZzBELEdBQUtoMEQsRUFBRyxPQUFPNHlFLEVBQUksTUFBUUEsRUFBSSxNQUFNeDJELEVBQUUsQ0FBQyxDQUFDLEVBQUl3MkQsRUFBSSxVQUFVLENBQUMsQ0FDekUsQ0FDRCxPQUFPLElBQ1IsQ0FFQSxTQUFTQyxHQUFXRCxFQUFLalEsRUFBaUIsQ0FDekMsSUFBSS9oRSxFQUFJK3hFLEdBQWVDLEVBQUtqUSxDQUFJLEVBQ2hDLEdBQUcvaEUsR0FBSyxLQUFNLE1BQU0sSUFBSSxNQUFNLG9CQUFzQitoRSxFQUFPLFNBQVMsRUFDcEUsT0FBTy9oRSxDQUNSLENBRUEsU0FBU2t5RSxHQUFXRixFQUFLalEsRUFBaUJvUSxFQUEyQixDQUNwRSxHQUFHLENBQUNBLEVBQU0sT0FBT0wsR0FBUUcsR0FBV0QsRUFBS2pRLENBQUksQ0FBQyxFQUM5QyxHQUFHLENBQUNBLEVBQU0sT0FBTyxLQUNqQixHQUFJLENBQUUsT0FBT21RLEdBQVdGLEVBQUtqUSxDQUFJLENBQUksTUFBVSxDQUFFLE9BQU8sSUFBTyxDQUNoRSxDQUVBLFNBQVNxUSxHQUFVSixFQUFLalEsRUFBaUJvUSxFQUErQixDQUN2RSxHQUFHLENBQUNBLEVBQU0sT0FBT1AsR0FBV0ssR0FBV0QsRUFBS2pRLENBQUksQ0FBQyxFQUNqRCxHQUFHLENBQUNBLEVBQU0sT0FBTyxLQUNqQixHQUFJLENBQUUsT0FBT3FRLEdBQVVKLEVBQUtqUSxDQUFJLENBQUksTUFBVSxDQUFFLE9BQU8sSUFBTyxDQUMvRCxDQUVBLFNBQVNzUSxHQUFVTCxFQUFLalEsRUFBaUJvUSxFQUEyQixDQUNuRSxHQUFHLENBQUNBLEVBQU0sT0FBT04sR0FBV0ksR0FBV0QsRUFBS2pRLENBQUksQ0FBQyxFQUNqRCxHQUFHLENBQUNBLEVBQU0sT0FBTyxLQUNqQixHQUFJLENBQUUsT0FBT3NRLEdBQVVMLEVBQUtqUSxDQUFJLENBQUksTUFBVSxDQUFFLE9BQU8sSUFBTyxDQUMvRCxDQUVBLFNBQVN1USxHQUFXTixFQUFLLENBRXhCLFFBREl4MkQsRUFBSXcyRCxFQUFJLFdBQWFwMEUsR0FBS28wRSxFQUFJLEtBQUssRUFBR2h5RSxFQUFJLEdBQ3RDaEUsRUFBSSxFQUFHQSxFQUFJd2YsRUFBRSxPQUFRLEVBQUV4ZixFQUFNd2YsRUFBRXhmLENBQUMsRUFBRSxNQUFNLEVBQUUsR0FBSyxLQUFLZ0UsRUFBRSxLQUFLd2IsRUFBRXhmLENBQUMsRUFBRSxRQUFRLGtCQUFtQixFQUFFLENBQUMsRUFDdEcsT0FBT2dFLEVBQUUsTUFDVixDQUVBLFNBQVN1eUUsR0FBYVAsRUFBSzkyRSxFQUFNNDFELEVBQVMsQ0FDekMsR0FBR2toQixFQUFJLFVBQVcsQ0FDakIsR0FBRyxPQUFPbGhCLEdBQVcsU0FBVSxDQUM5QixJQUFJbjBELEVBQ0osT0FBR3M0RCxHQUFTdDRELEVBQU11NEQsR0FBWXBFLENBQU8sRUFHaENuMEQsRUFBTW81RCxHQUFXakYsQ0FBTyxFQUN0QmdRLEdBQUksTUFBTSxRQUFRa1IsRUFBSzkyRSxFQUFNeUIsQ0FBRyxDQUN2QyxDQUNEbWtFLEdBQUksTUFBTSxRQUFRa1IsRUFBSzkyRSxFQUFNNDFELENBQU8sQ0FDcEMsTUFDSWtoQixFQUFJLEtBQUs5MkUsRUFBTTQxRCxDQUFPLENBQzVCLENBRUEsU0FBUzBoQixJQUFVLENBQUUsT0FBTzFSLEdBQUksTUFBTSxRQUFTLENBQUcsQ0FFbEQsU0FBUzJSLEdBQVN2eUUsRUFBR0YsRUFBRyxDQUN2QixPQUFPQSxFQUFFLEtBQUksQ0FDWixJQUFLLFNBQVUsT0FBTzhnRSxHQUFJLEtBQUs1Z0UsRUFBRyxDQUFFLEtBQU0sUUFBUSxDQUFFLEVBQ3BELElBQUssU0FBVSxPQUFPNGdFLEdBQUksS0FBSzVnRSxFQUFHLENBQUUsS0FBTSxRQUFRLENBQUUsRUFDcEQsSUFBSyxTQUFVLElBQUssUUFBUyxPQUFPNGdFLEdBQUksS0FBSzVnRSxFQUFHLENBQUUsS0FBTSxRQUFRLENBQUUsQ0FDbEUsQ0FDRCxNQUFNLElBQUksTUFBTSxxQkFBdUJGLEVBQUUsSUFBSSxDQUM5QyxDQUVBLFNBQVMweUUsR0FBYXgzRSxFQUFpQjZMLEVBQTRCLENBQ2xFLEdBQUc3TCxFQUFLLE9BQU8sQ0FBQyxHQUFLLElBQUssT0FBT0EsRUFBSyxNQUFNLENBQUMsRUFDN0MsSUFBSXZCLEVBQVNvTixFQUFLLE1BQU0sR0FBRyxFQUN4QkEsRUFBSyxNQUFNLEVBQUUsR0FBSyxLQUFLcE4sRUFBTyxNQUVqQyxRQURJMEosRUFBU25JLEVBQUssTUFBTSxHQUFHLEVBQ3BCbUksRUFBTyxTQUFXLEdBQUcsQ0FDM0IsSUFBSXN2RSxFQUFPdHZFLEVBQU8sUUFDZHN2RSxJQUFTLEtBQU1oNUUsRUFBTyxJQUFHLEVBQ3BCZzVFLElBQVMsS0FBS2g1RSxFQUFPLEtBQUtnNUUsQ0FBSSxDQUN2QyxDQUNELE9BQU9oNUUsRUFBTyxLQUFLLEdBQUcsQ0FDdkIsQ0FDQSxJQUFJaTVFLEdBQWE7QUFBQSxFQUNiQyxHQUFVLHlFQUNWQyxHQUFVLCtGQUFnR0MsR0FBWSxXQUN0SEMsR0FBd0JKLEdBQVcsTUFBTUUsRUFBUyxFQUFJQSxHQUFZQyxHQUNsRUUsR0FBUSxRQUFTQyxHQUFXLGFBQ2hDLFNBQVNDLEdBQVlyeEIsRUFBZ0JzeEIsRUFBd0JDLEVBQThCLENBRzFGLFFBRkk1MUMsRUFBSyxDQUFBLEVBQ0w2MUMsRUFBSyxFQUFHaDRELEVBQUksRUFDVmc0RCxJQUFPeHhCLEVBQUksUUFBa0IsR0FBQXhtQyxFQUFJd21DLEVBQUksV0FBV3d4QixDQUFFLEtBQU8sSUFBTWg0RCxJQUFNLElBQU1BLElBQU0sSUFBOUQsRUFBRWc0RCxFQUFJLENBRS9CLEdBRElGLElBQVczMUMsRUFBRSxDQUFDLEVBQUlxa0IsRUFBSSxNQUFNLEVBQUd3eEIsQ0FBRSxHQUNsQ0EsSUFBT3h4QixFQUFJLE9BQVEsT0FBT3JrQixFQUM3QixJQUFJODFCLEVBQUl6UixFQUFJLE1BQU0rd0IsRUFBUyxFQUFHdmYsRUFBRSxFQUFHeDNDLEVBQUUsR0FBSTlmLEVBQUUsRUFBR2s4RCxFQUFFLEdBQUl3RCxFQUFHLEdBQUk2WCxFQUFPLEVBQ2xFLEdBQUdoZ0IsRUFBRyxJQUFJdjNELEVBQUksRUFBR0EsR0FBS3UzRCxFQUFFLE9BQVEsRUFBRXYzRCxFQUFHLENBRXBDLElBREEwL0QsRUFBS25JLEVBQUV2M0QsQ0FBQyxFQUNKc2YsRUFBRSxFQUFHQSxHQUFLb2dELEVBQUcsUUFBZ0JBLEVBQUcsV0FBV3BnRCxDQUFDLElBQU0sR0FBN0IsRUFBRUEsRUFBRyxDQUU5QixJQURBNDhDLEVBQUl3RCxFQUFHLE1BQU0sRUFBRXBnRCxDQUFDLEVBQUUsT0FDWm9nRCxFQUFHLFdBQVdwZ0QsRUFBRSxDQUFDLEdBQUssSUFBSSxFQUFFQSxFQUdsQyxJQUZBaTRELEdBQVNELEVBQUc1WCxFQUFHLFdBQVdwZ0QsRUFBRSxDQUFDLElBQU0sSUFBTWc0RCxHQUFNLEdBQU0sRUFBSSxFQUN6RHgzRCxFQUFJNC9DLEVBQUcsTUFBTXBnRCxFQUFFLEVBQUVpNEQsRUFBTTdYLEVBQUcsT0FBTzZYLENBQUksRUFDakNqZ0IsRUFBRSxFQUFFQSxHQUFHNEUsRUFBRSxRQUFlQSxFQUFFLFdBQVc1RSxDQUFDLElBQU0sR0FBNUIsRUFBRUEsRUFBRyxDQUN6QixHQUFHQSxJQUFJNEUsRUFBRSxPQUNMQSxFQUFFLFFBQVEsR0FBRyxFQUFJLElBQUdBLEVBQUlBLEVBQUUsTUFBTSxFQUFHQSxFQUFFLFFBQVEsR0FBRyxDQUFDLEdBQ3BEejZCLEVBQUV5NkIsQ0FBQyxFQUFJcDhDLEVBQ0h1M0QsSUFBUzUxQyxFQUFFeTZCLEVBQUUsWUFBVyxDQUFFLEVBQUlwOEMsT0FFOUIsQ0FDSixJQUFJTixHQUFLODNDLElBQUksR0FBSzRFLEVBQUUsTUFBTSxFQUFFLENBQUMsSUFBSSxRQUFRLFFBQVEsSUFBSUEsRUFBRSxNQUFNNUUsRUFBRSxDQUFDLEVBQ2hFLEdBQUc3MUIsRUFBRWppQixDQUFDLEdBQUswOEMsRUFBRSxNQUFNNUUsRUFBRSxFQUFFQSxDQUFDLEdBQUssTUFBTyxTQUNwQzcxQixFQUFFamlCLENBQUMsRUFBSU0sRUFDSHUzRCxJQUFTNTFDLEVBQUVqaUIsRUFBRSxZQUFXLENBQUUsRUFBSU0sRUFDbEMsQ0FDRCxDQUNELE9BQU8yaEIsQ0FDUixDQUNBLFNBQVMrMUMsR0FBU3o3QyxFQUF5QixDQUFFLE9BQU9BLEVBQUUsUUFBUW03QyxHQUFVLEtBQUssQ0FBSSxDQUVqRixJQUFJTyxHQUFZLENBQ2YsU0FBVSxJQUNWLFNBQVUsSUFDVixPQUFRLElBQ1IsT0FBUSxJQUNSLFFBQVMsR0FDVixFQUNJQyxHQUF5QjFELEdBQU15RCxFQUFTLEVBSXhDRSxHQUEyQyxVQUFXLENBRXpELElBQUlDLEVBQVcsK0NBQWdEQyxFQUFZLHVCQUMzRSxPQUFPLFNBQVNGLEVBQVkzeUUsRUFBNEIsQ0FDdkQsSUFBSTNCLEVBQUkyQixFQUFPLEdBQUksRUFBSTNCLEVBQUUsUUFBUSxXQUFXLEVBQzVDLEdBQUcsR0FBSyxHQUFJLE9BQU9BLEVBQUUsUUFBUXUwRSxFQUFVLFNBQVNuWixFQUFJQyxFQUFJLENBQUUsT0FBTytZLEdBQVVoWixDQUFFLEdBQUcsT0FBTyxhQUFhLFNBQVNDLEVBQUdELEVBQUcsUUFBUSxHQUFHLEVBQUUsR0FBRyxHQUFHLEVBQUUsQ0FBQyxHQUFHQSxFQUFLLEVBQUUsUUFBUW9aLEVBQVUsU0FBU3RnQixFQUFFLEVBQUcsQ0FBQyxPQUFPLE9BQU8sYUFBYSxTQUFTLEVBQUUsRUFBRSxDQUFDLENBQUUsQ0FBQyxFQUNoTyxJQUFJRCxFQUFJajBELEVBQUUsUUFBUSxLQUFLLEVBQ3ZCLE9BQU9zMEUsRUFBWXQwRSxFQUFFLE1BQU0sRUFBRyxDQUFDLENBQUMsRUFBSUEsRUFBRSxNQUFNLEVBQUUsRUFBRWkwRCxDQUFDLEVBQUlxZ0IsRUFBWXQwRSxFQUFFLE1BQU1pMEQsRUFBRSxDQUFDLENBQUMsQ0FDL0UsQ0FDQSxJQUVJd2dCLEdBQVMsV0FBWUMsR0FBVyxnQ0FDcEMsU0FBU0MsR0FBVWh6RSxFQUEyQixDQUM3QyxJQUFJM0IsRUFBSTJCLEVBQU8sR0FDZixPQUFPM0IsRUFBRSxRQUFReTBFLEdBQVUsU0FBUzdqQyxFQUFHLENBQUUsT0FBT3lqQyxHQUFVempDLENBQUMsQ0FBRSxDQUFFLEVBQUUsUUFBUThqQyxHQUFTLFNBQVMxMEUsRUFBRyxDQUFFLE1BQU8sTUFBUSxNQUFNQSxFQUFFLFdBQVcsQ0FBQyxFQUFFLFNBQVMsRUFBRSxHQUFHLE1BQU0sRUFBRSxFQUFJLEdBQUksQ0FBQyxDQUNySyxDQUNBLFNBQVM0MEUsR0FBYWp6RSxFQUEyQixDQUFFLE9BQU9nekUsR0FBVWh6RSxDQUFJLEVBQUUsUUFBUSxLQUFLLFNBQVMsQ0FBSSxDQUVwRyxJQUFJa3pFLEdBQWUsbUJBQ25CLFNBQVNDLEdBQVduekUsRUFBMkIsQ0FDOUMsSUFBSTNCLEVBQUkyQixFQUFPLEdBQ2YsT0FBTzNCLEVBQUUsUUFBUXkwRSxHQUFVLFNBQVM3akMsRUFBRyxDQUFFLE9BQU95akMsR0FBVXpqQyxDQUFDLENBQUUsQ0FBRSxFQUFFLFFBQVEsTUFBTyxPQUFPLEVBQUUsUUFBUWlrQyxHQUFhLFNBQVM3MEUsRUFBRyxDQUFFLE1BQU8sT0FBUyxNQUFNQSxFQUFFLFdBQVcsQ0FBQyxFQUFFLFNBQVMsRUFBRSxHQUFHLE1BQU0sRUFBRSxFQUFJLEdBQUksQ0FBRSxDQUNuTSxDQUVBLFNBQVMrMEUsR0FBV3B6RSxFQUEyQixDQUM5QyxJQUFJM0IsRUFBSTJCLEVBQU8sR0FDZixPQUFPM0IsRUFBRSxRQUFReTBFLEdBQVUsU0FBUzdqQyxFQUFHLENBQUUsT0FBT3lqQyxHQUFVempDLENBQUMsQ0FBRSxDQUFFLEVBQUUsUUFBUWlrQyxHQUFhLFNBQVM3MEUsRUFBRyxDQUFFLE1BQU8sTUFBU0EsRUFBRSxXQUFXLENBQUMsRUFBRSxTQUFTLEVBQUUsRUFBRyxZQUFXLEVBQUssR0FBTSxDQUFBLENBQ3pLLENBR0EsSUFBSWcxRSxHQUEyQyxVQUFXLENBQ3pELElBQUlDLEVBQVcsWUFDZixTQUFTQyxFQUFROVosRUFBY0MsRUFBMEIsQ0FBRSxPQUFPLE9BQU8sYUFBYSxTQUFTQSxFQUFHLEVBQUUsQ0FBQyxDQUFJLENBQ3pHLE9BQU8sU0FBcUI1aUMsRUFBMkIsQ0FBRSxPQUFPQSxFQUFJLFFBQVF3OEMsRUFBU0MsQ0FBTyxFQUM3RixJQUNBLFNBQVNDLEdBQWMxOEMsRUFBMkIsQ0FBRSxPQUFPQSxFQUFJLFFBQVEsaUJBQWlCLE9BQVEsQ0FBSSxDQUVwRyxTQUFTMjhDLEdBQWExOEUsRUFBMkIsQ0FDaEQsT0FBT0EsRUFBSyxDQUNYLElBQUssR0FBRyxJQUFLLEdBQU0sSUFBSyxJQUFLLElBQUssT0FBUSxJQUFLLE9BQVEsTUFBTyxHQUU5RCxRQUFTLE1BQU8sRUFDaEIsQ0FDRixDQUVBLFNBQVMyOEUsR0FBVUMsRUFBNEIsQ0FFOUMsUUFESTNlLEVBQU0sR0FBSWg2RCxFQUFJLEVBQUdzZixFQUFJLEVBQUdwYixFQUFJLEVBQUdsQixFQUFJLEVBQUdlLEVBQUksRUFBR2s1RCxFQUFJLEVBQzlDajlELEVBQUkyNEUsRUFBSyxRQUFRLENBRXZCLEdBREFyNUQsRUFBSXE1RCxFQUFLLFdBQVczNEUsR0FBRyxFQUNuQnNmLEVBQUksSUFBSyxDQUFFMDZDLEdBQU8sT0FBTyxhQUFhMTZDLENBQUMsRUFBRyxRQUFXLENBRXpELEdBREFwYixFQUFJeTBFLEVBQUssV0FBVzM0RSxHQUFHLEVBQ25Cc2YsRUFBRSxLQUFPQSxFQUFFLElBQUssQ0FBRXZiLEdBQU11YixFQUFJLEtBQU8sRUFBSXZiLEdBQU1HLEVBQUksR0FBSzgxRCxHQUFPLE9BQU8sYUFBYWoyRCxDQUFDLEVBQUcsUUFBVyxDQUVwRyxHQURBZixFQUFJMjFFLEVBQUssV0FBVzM0RSxHQUFHLEVBQ25Cc2YsRUFBSSxJQUFLLENBQUUwNkMsR0FBTyxPQUFPLGNBQWUxNkMsRUFBSSxLQUFPLElBQVFwYixFQUFJLEtBQU8sRUFBTWxCLEVBQUksRUFBRyxFQUFHLFFBQVcsQ0FDckdlLEVBQUk0MEUsRUFBSyxXQUFXMzRFLEdBQUcsRUFDdkJpOUQsSUFBTzM5QyxFQUFJLElBQU0sSUFBUXBiLEVBQUksS0FBTyxJQUFRbEIsRUFBSSxLQUFPLEVBQU1lLEVBQUksSUFBSyxNQUN0RWkyRCxHQUFPLE9BQU8sYUFBYSxPQUFXaUQsSUFBSSxHQUFJLEtBQUssRUFDbkRqRCxHQUFPLE9BQU8sYUFBYSxPQUFVaUQsRUFBRSxLQUFLLENBQzVDLENBQ0QsT0FBT2pELENBQ1IsQ0FFQSxTQUFTNGUsR0FBVXBuRSxFQUFNLENBQ3hCLElBQUl3b0QsRUFBTVgsR0FBWSxFQUFFN25ELEVBQUssTUFBTSxFQUFHeXJELEVBQUdqOUQsRUFBR3MzRCxFQUFJLEVBQUc5M0MsRUFBSSxFQUFHcTVELEVBQUcsRUFBR3Y1RCxFQUNoRSxJQUFJdGYsRUFBSSxFQUFHQSxFQUFJd1IsRUFBSyxPQUFReFIsR0FBR3MzRCxFQUM5QkEsRUFBSSxHQUNBaDRDLEVBQUU5TixFQUFLLFdBQVd4UixDQUFDLEdBQUssSUFBS2k5RCxFQUFJMzlDLEVBQzdCQSxFQUFJLEtBQU8yOUMsR0FBSzM5QyxFQUFFLElBQUksSUFBSTlOLEVBQUssV0FBV3hSLEVBQUUsQ0FBQyxFQUFFLElBQUtzM0QsRUFBRSxHQUN0RGg0QyxFQUFJLEtBQU8yOUMsR0FBRzM5QyxFQUFFLElBQUksTUFBTTlOLEVBQUssV0FBV3hSLEVBQUUsQ0FBQyxFQUFFLElBQUksSUFBSXdSLEVBQUssV0FBV3hSLEVBQUUsQ0FBQyxFQUFFLElBQUtzM0QsRUFBRSxJQUNwRkEsRUFBSSxFQUNWMkYsR0FBSzM5QyxFQUFJLEdBQUcsUUFBUTlOLEVBQUssV0FBV3hSLEVBQUUsQ0FBQyxFQUFFLElBQUksTUFBTXdSLEVBQUssV0FBV3hSLEVBQUUsQ0FBQyxFQUFFLElBQUksSUFBSXdSLEVBQUssV0FBV3hSLEVBQUUsQ0FBQyxFQUFFLElBQ3JHaTlELEdBQUssTUFBTzRiLEVBQUssT0FBVzViLElBQUksR0FBSSxNQUFPQSxFQUFJLE9BQVVBLEVBQUUsT0FFekQ0YixJQUFPLElBQUs3ZSxFQUFJeDZDLEdBQUcsRUFBSXE1RCxFQUFHLElBQUs3ZSxFQUFJeDZDLEdBQUcsRUFBSXE1RCxJQUFLLEVBQUdBLEVBQUssR0FDMUQ3ZSxFQUFJeDZDLEdBQUcsRUFBSXk5QyxFQUFFLElBQUtqRCxFQUFJeDZDLEdBQUcsRUFBSXk5QyxJQUFJLEVBRWxDLE9BQU9qRCxFQUFJLE1BQU0sRUFBRXg2QyxDQUFDLEVBQUUsU0FBUyxNQUFNLENBQ3RDLENBRUEsU0FBU3M1RCxHQUFVdG5FLEVBQU0sQ0FBRSxPQUFPMG5ELEdBQVkxbkQsRUFBTSxRQUFRLEVBQUUsU0FBUyxNQUFNLENBQUksQ0FFakYsSUFBSXVuRSxHQUFhLHFCQUNiQyxHQUFXL2YsS0FBeUI2ZixHQUFVQyxFQUFVLEdBQWtCTCxHQUFVSyxFQUFVLEdBQUtELElBQTBCRixHQUFVRyxFQUFVLEdBQWtCTCxHQUFVSyxFQUFVLEdBQUtILEtBQWNGLEdBRTFNakYsR0FBMkJ4YSxHQUFVLFNBQVN6bkQsRUFBTSxDQUFFLE9BQU8wbkQsR0FBWTFuRCxFQUFNLE1BQU0sRUFBRSxTQUFTLFFBQVEsQ0FBSSxFQUFHLFNBQVNtbkUsRUFBNEIsQ0FFdkosUUFESTNlLEVBQXdCLENBQUUsRUFBRWg2RCxFQUFJLEVBQUdzZixFQUFJLEVBQUdwYixFQUFJLEVBQzVDbEUsRUFBSTI0RSxFQUFLLFFBRWQsT0FEQXI1RCxFQUFJcTVELEVBQUssV0FBVzM0RSxHQUFHLEVBQ2hCLEdBQUksQ0FDVixLQUFLc2YsRUFBSSxJQUFLMDZDLEVBQUksS0FBSyxPQUFPLGFBQWExNkMsQ0FBQyxDQUFDLEVBQUcsTUFDaEQsS0FBS0EsRUFBSSxLQUNSMDZDLEVBQUksS0FBSyxPQUFPLGFBQWEsS0FBTzE2QyxHQUFLLEVBQUUsQ0FBQyxFQUM1QzA2QyxFQUFJLEtBQUssT0FBTyxhQUFhLEtBQU8xNkMsRUFBSSxHQUFHLENBQUMsRUFDNUMsTUFDRCxLQUFLQSxHQUFLLE9BQVNBLEVBQUksT0FDdEJBLEdBQUssTUFBT3BiLEVBQUl5MEUsRUFBSyxXQUFXMzRFLEdBQUcsRUFBSSxPQUFTc2YsR0FBRyxJQUNuRDA2QyxFQUFJLEtBQUssT0FBTyxhQUFhLEtBQVE5MUQsR0FBSSxHQUFNLEVBQUUsQ0FBQyxFQUNsRDgxRCxFQUFJLEtBQUssT0FBTyxhQUFhLEtBQVE5MUQsR0FBSSxHQUFNLEdBQUcsQ0FBQyxFQUNuRDgxRCxFQUFJLEtBQUssT0FBTyxhQUFhLEtBQVE5MUQsR0FBSyxFQUFLLEdBQUcsQ0FBQyxFQUNuRDgxRCxFQUFJLEtBQUssT0FBTyxhQUFhLEtBQU85MUQsRUFBSSxHQUFHLENBQUMsRUFDNUMsTUFDRCxRQUNDODFELEVBQUksS0FBSyxPQUFPLGFBQWEsS0FBTzE2QyxHQUFLLEdBQUcsQ0FBQyxFQUM3QzA2QyxFQUFJLEtBQUssT0FBTyxhQUFhLEtBQVExNkMsR0FBSyxFQUFLLEdBQUcsQ0FBQyxFQUNuRDA2QyxFQUFJLEtBQUssT0FBTyxhQUFhLEtBQU8xNkMsRUFBSSxHQUFHLENBQUMsQ0FDN0MsQ0FFRixPQUFPMDZDLEVBQUksS0FBSyxFQUFFLENBQ25CLEVBR0lpZixHQUF5QixVQUFXLENBQ3ZDLElBQUlDLEVBQW1DLENBQUEsRUFDdkMsT0FBTyxTQUFrQm4xRSxFQUFhcXpELEVBQTBCLENBQy9ELElBQUk5MEQsRUFBSXlCLEVBQUUsS0FBS3F6RCxHQUFHLElBQ2xCLE9BQUc4aEIsRUFBUTUyRSxDQUFDLEVBQVU0MkUsRUFBUTUyRSxDQUFDLEVBQ3ZCNDJFLEVBQVE1MkUsQ0FBQyxFQUFJLElBQUksT0FBTyxjQUFjeUIsRUFBRSwrREFBK0RBLEVBQUUsSUFBTXF6RCxHQUFHLEVBQUUsQ0FDOUgsQ0FDQSxJQUVJK2hCLEdBQW1ELFVBQVcsQ0FDakUsSUFBSUMsRUFBdUMsQ0FDMUMsQ0FBQyxPQUFRLEdBQUcsRUFBRyxDQUFDLFNBQVUsR0FBRyxFQUM3QixDQUFDLE9BQVEsR0FBRyxFQUFHLENBQUMsT0FBUSxHQUFHLEVBQUcsQ0FBQyxLQUFRLEdBQUcsRUFBRyxDQUFDLEtBQVEsR0FBRyxFQUFHLENBQUMsTUFBUSxHQUFHLENBQzFFLEVBQUcsSUFBSSxTQUFTcjlDLEVBQXdCLENBQUUsTUFBTyxDQUFDLElBQUksT0FBTyxJQUFNQSxFQUFFLENBQUMsRUFBSSxJQUFLLElBQUksRUFBR0EsRUFBRSxDQUFDLENBQUMsQ0FBRSxDQUFFLEVBQzdGLE9BQU8sU0FBb0JELEVBQTJCLENBY3JELFFBYkk5M0IsRUFBSTgzQixFQUVMLFFBQVEsY0FBZSxFQUFFLEVBRXpCLFFBQVEsY0FBYyxFQUFFLEVBRXhCLFFBQVEsUUFBUSxHQUFHLEVBQUUsUUFBUSxRQUFRLEdBQUcsRUFFeEMsUUFBUSxjQUFlLEdBQUcsRUFFMUIsUUFBUSx1QkFBdUI7QUFBQSxDQUFJLEVBRW5DLFFBQVEsV0FBVyxFQUFFLEVBQ2hCOTdCLEVBQUksRUFBR0EsRUFBSW81RSxFQUFTLE9BQVEsRUFBRXA1RSxFQUFHZ0UsRUFBSUEsRUFBRSxRQUFRbzFFLEVBQVNwNUUsQ0FBQyxFQUFFLENBQUMsRUFBR281RSxFQUFTcDVFLENBQUMsRUFBRSxDQUFDLENBQUMsRUFDckYsT0FBT2dFLENBQ1QsQ0FDQSxJQUVJcTFFLEdBQXdCLFVBQVUsQ0FBRSxJQUFJQyxFQUFXLENBQUEsRUFDdEQsT0FBTyxTQUFrQmxZLEVBQUksQ0FDNUIsT0FBR2tZLEVBQVNsWSxDQUFFLElBQU0sT0FBa0JrWSxFQUFTbFksQ0FBRSxFQUN6Q2tZLEVBQVNsWSxDQUFFLEVBQUksSUFBSSxPQUFPLFlBQWNBLEVBQUssMEJBQTRCQSxFQUFLLElBQUssR0FBRyxDQUNoRyxDQUFFLEVBQUMsRUFDQ21ZLEdBQVcsd0JBQXlCQyxHQUFXLDZCQUNuRCxTQUFTQyxHQUFZam9FLEVBQWlCdFgsRUFBcUMsQ0FDMUUsSUFBSWl1QixFQUFJZ3ZELEdBQVkzbEUsQ0FBSSxFQUVwQnUrQixFQUE0QnYrQixFQUFLLE1BQU02bkUsR0FBUWx4RCxFQUFFLFFBQVEsQ0FBQyxHQUFHLEdBQzdEeG5CLEVBQXFCLENBQUEsRUFDekIsR0FBR292QyxFQUFRLFFBQVU1bkIsRUFBRSxLQUFNLENBQzVCLEdBQUdqdUIsRUFBSyxJQUFLLE1BQU0sSUFBSSxNQUFNLDRCQUE4QjYxQyxFQUFRLE9BQVMsT0FBUzVuQixFQUFFLElBQUksRUFDM0YsT0FBT3huQixDQUNQLENBQ0QsT0FBQW92QyxFQUFRLFFBQVEsU0FBU2hVLEVBQWMsQ0FDdEMsSUFBSWpjLEVBQUlpYyxFQUFFLFFBQVF3OUMsR0FBUyxFQUFFLEVBQUUsTUFBTUMsRUFBUSxFQUMxQzE1RCxHQUFHbmYsRUFBSSxLQUFLLENBQUMsRUFBRXE0RSxHQUFTbDVELEVBQUUsQ0FBQyxDQUFDLEVBQUcsRUFBRUEsRUFBRSxDQUFDLENBQUMsQ0FBQyxDQUMzQyxDQUFFLEVBQ01uZixDQUNSLENBRUEsSUFBSSs0RSxHQUFVLGVBQ2QsU0FBU0MsR0FBUzUxRSxFQUFhcXpELEVBQXlCLENBQUUsTUFBTyxJQUFNcnpELEdBQUtxekQsRUFBRSxNQUFNc2lCLEVBQU8sRUFBRSx3QkFBMEIsSUFBTSxJQUFNdGlCLEVBQUksS0FBT3J6RCxFQUFJLEdBQU0sQ0FFeEosU0FBUzYxRSxHQUFXenhELEVBQWMsQ0FBRSxPQUFPdm1CLEdBQUt1bUIsQ0FBQyxFQUFFLElBQUksU0FBUzNJLEVBQUcsQ0FBRSxNQUFPLElBQU1BLEVBQUksS0FBTzJJLEVBQUUzSSxDQUFDLEVBQUksR0FBSSxDQUFDLEVBQUUsS0FBSyxFQUFFLENBQUksQ0FDdEgsU0FBU3E2RCxHQUFVOTFFLEVBQWFxekQsRUFBY2p2QyxFQUFHLENBQUUsTUFBTyxJQUFNcGtCLEdBQU1va0IsR0FBSyxLQUFReXhELEdBQVd6eEQsQ0FBQyxFQUFJLEtBQVFpdkMsR0FBSyxNQUFTQSxFQUFFLE1BQU1zaUIsRUFBTyxFQUFFLHdCQUEwQixJQUFNLElBQU10aUIsRUFBSSxLQUFPcnpELEVBQUksS0FBTyxHQUFJLENBRTFNLFNBQVMrMUUsR0FBYTUxRSxFQUFZLEVBQTJCLENBQUUsR0FBSSxDQUFFLE9BQU9BLEVBQUUsY0FBYyxRQUFRLFFBQVEsRUFBRSxDQUFJLE9BQU9sQixFQUFHLENBQUUsR0FBRyxFQUFHLE1BQU1BLENBQUUsQ0FBRyxNQUFPLEVBQUssQ0FFM0osU0FBUysyRSxHQUFTMTJFLEVBQUcyMkUsRUFBOEIsQ0FDbEQsT0FBTyxPQUFPMzJFLEVBQUMsQ0FDZCxJQUFLLFNBQ0osSUFBSVcsRUFBSTYxRSxHQUFVLFlBQWE3QixHQUFVMzBFLENBQUMsQ0FBQyxFQUMzQyxPQUFHMjJFLElBQU1oMkUsRUFBSUEsRUFBRSxRQUFRLFVBQVcsU0FBUyxHQUNwQ0EsRUFDUixJQUFLLFNBQVUsT0FBTzYxRSxJQUFXeDJFLEVBQUUsSUFBSUEsRUFBRSxRQUFRLFFBQVMyMEUsR0FBVSxPQUFPMzBFLENBQUMsQ0FBQyxDQUFDLEVBQzlFLElBQUssVUFBVyxPQUFPdzJFLEdBQVUsVUFBVXgyRSxFQUFFLE9BQU8sT0FBTyxDQUMzRCxDQUNELEdBQUdBLGFBQWEsS0FBTSxPQUFPdzJFLEdBQVUsY0FBZUMsR0FBYXoyRSxDQUFDLENBQUMsRUFDckUsTUFBTSxJQUFJLE1BQU0sdUJBQXlCQSxDQUFDLENBQzNDLENBRUEsU0FBUzQyRSxHQUFlLzFFLEVBQWMsQ0FDckMsR0FBRyswRCxJQUFxRixPQUFPLFNBQVMvMEQsQ0FBQyxFQUFHLE9BQU9BLEVBQUUsU0FBUyxNQUFNLEVBQ3BJLEdBQUcsT0FBT0EsR0FBTSxTQUFVLE9BQU9BLEVBRWpDLEdBQUcsT0FBTyxXQUFlLEtBQWVBLGFBQWEsV0FBWSxPQUFPODBFLEdBQVN2ZixHQUFJRSxHQUFLejFELENBQUMsQ0FBQyxDQUFDLEVBQzdGLE1BQU0sSUFBSSxNQUFNLDZDQUE2QyxDQUM5RCxDQUVBLElBQUlnMkUsR0FBWSw2REFHWkMsR0FBUyxDQUNaLFdBQVksMEVBQ1osV0FBWSwwRUFDWixVQUFXLDRFQUNYLEdBQUksK0RBQ0osS0FBTSwrREFDTixNQUFPLDBFQUNQLEdBQU0sbUNBQ04sUUFBVyw0QkFDWCxTQUFZLCtCQUNaLEdBQU0sMERBQ04sRUFBSyxzRUFDTCxJQUFPLHlFQUNQLEdBQU0sdUVBQ04sSUFBTyw0Q0FDUCxJQUFPLGtDQUNSLEVBRUlDLEdBQWEsQ0FDaEIsNERBQ0EsZ0RBQ0Esc0RBQ0Esa0RBQ0QsRUFFSUMsR0FBVSxDQUNiLEVBQVEsMENBQ1IsRUFBUSx5Q0FDUixHQUFRLCtDQUNSLEdBQVEsNENBQ1IsR0FBUSx5QkFDUixFQUFRLGdDQUNSLEtBQVEsaUNBQ1QsRUFDQSxTQUFTQyxHQUFlaHdFLEVBQXVCMjFDLEVBQTJCLENBSXpFLFFBSEk1OEMsRUFBSSxFQUFJLEdBQUtpSCxFQUFFMjFDLEVBQU0sQ0FBQyxJQUFNLEdBQzVCajlDLElBQU1zSCxFQUFFMjFDLEVBQU0sQ0FBQyxFQUFJLE1BQVMsSUFBTzMxQyxFQUFFMjFDLEVBQU0sQ0FBQyxJQUFNLEVBQUssSUFDdkRzWCxFQUFLanRELEVBQUUyMUMsRUFBSSxDQUFDLEVBQUUsR0FDVixFQUFJLEVBQUcsR0FBSyxFQUFHLEVBQUUsRUFBR3NYLEVBQUlBLEVBQUksSUFBTWp0RCxFQUFFMjFDLEVBQU0sQ0FBQyxFQUNuRCxPQUFHajlDLEdBQUssS0FBY3UwRCxHQUFLLEVBQUtsMEQsRUFBSSxNQUFZLEtBQzdDTCxHQUFLLEVBQUdBLEVBQUksT0FDUkEsR0FBSyxLQUFNdTBELEdBQUssS0FBSyxJQUFJLEVBQUUsRUFBRSxHQUM3QmwwRCxFQUFJLEtBQUssSUFBSSxFQUFHTCxFQUFJLEVBQUUsRUFBSXUwRCxFQUNsQyxDQUVBLFNBQVNnakIsR0FBZ0Jqd0UsRUFBdUJ3VixFQUFjbWdDLEVBQWdCLENBQzdFLElBQUl1NkIsR0FBUzE2RCxFQUFJLEdBQU8sRUFBRUEsR0FBSyxLQUFjLEVBQUksSUFBTSxFQUFJOWMsRUFBSSxFQUFHdTBELEVBQUksRUFDbEVrakIsRUFBS0QsRUFBTSxDQUFDMTZELEVBQUtBLEVBQ2pCLFNBQVMyNkQsQ0FBRSxFQUNQQSxHQUFNLEVBQUd6M0UsRUFBSXUwRCxFQUFJLEdBRXhCdjBELEVBQUksS0FBSyxNQUFNLEtBQUssSUFBSXkzRSxDQUFFLEVBQUksS0FBSyxHQUFHLEVBQ3RDbGpCLEVBQUlrakIsRUFBSyxLQUFLLElBQUksRUFBRyxHQUFLejNFLENBQUMsRUFDdkJBLEdBQUssUUFBVyxDQUFDLFNBQVN1MEQsQ0FBQyxHQUFNQSxFQUFJLEtBQUssSUFBSSxFQUFFLEVBQUUsR0FBT3YwRCxFQUFJLE9BQzFEdTBELEdBQUssS0FBSyxJQUFJLEVBQUUsRUFBRSxFQUFHdjBELEdBQUcsUUFOWkEsRUFBSSxLQUFPdTBELEVBQUksTUFBTXozQyxDQUFDLEVBQUksTUFBUyxHQVF2RCxRQUFROWYsRUFBSSxFQUFHQSxHQUFLLEVBQUcsRUFBRUEsRUFBR3UzRCxHQUFHLElBQUtqdEQsRUFBRTIxQyxFQUFNamdELENBQUMsRUFBSXUzRCxFQUFJLElBQ3JEanRELEVBQUUyMUMsRUFBTSxDQUFDLEdBQU1qOUMsRUFBSSxLQUFTLEVBQU11MEQsRUFBSSxHQUN0Q2p0RCxFQUFFMjFDLEVBQU0sQ0FBQyxFQUFLajlDLEdBQUssRUFBS3czRSxDQUN6QixDQUVBLElBQUlFLEdBQWMsU0FBUzdnQixFQUErQyxDQUFvQixRQUFkOTlCLEVBQUUsQ0FBRSxFQUFDa2hDLEVBQUUsTUFBZWo5RCxFQUFFLEVBQUVBLEVBQUU2NUQsRUFBSyxDQUFDLEVBQUUsT0FBTyxFQUFFNzVELEVBQUcsR0FBRzY1RCxFQUFLLENBQUMsRUFBRTc1RCxDQUFDLEVBQUcsUUFBUXMzRCxFQUFFLEVBQUU0QyxFQUFFTCxFQUFLLENBQUMsRUFBRTc1RCxDQUFDLEVBQUUsT0FBT3MzRCxFQUFFNEMsRUFBRTVDLEdBQUcyRixFQUFHbGhDLEVBQUUsS0FBSyxNQUFNQSxFQUFHODlCLEVBQUssQ0FBQyxFQUFFNzVELENBQUMsRUFBRSxNQUFNczNELEVBQUVBLEVBQUUyRixDQUFDLENBQUMsRUFBRyxPQUFPbGhDLENBQUUsRUFDeE8rc0MsR0FBYTdQLEdBQVUsU0FBU1ksRUFBTSxDQUFFLE9BQVFBLEVBQUssQ0FBQyxFQUFFLE9BQVMsR0FBSyxPQUFPLFNBQVNBLEVBQUssQ0FBQyxFQUFFLENBQUMsQ0FBQyxFQUFLLE9BQU8sT0FBT0EsRUFBSyxDQUFDLEVBQUUsSUFBSSxTQUFTOTlCLEVBQUcsQ0FBRSxPQUFPLE9BQU8sU0FBU0EsQ0FBQyxFQUFJQSxFQUFJbTlCLEdBQVluOUIsQ0FBQyxDQUFFLENBQUUsQ0FBQyxFQUFJMitDLEdBQVk3Z0IsQ0FBSSxDQUFFLEVBQUk2Z0IsR0FFek5DLEdBQWEsU0FBU3J3RSxFQUFzQmpILEVBQWFMLEVBQXlCLENBQStCLFFBQXpCMDZELEVBQXFCLENBQUUsRUFBVTE5RCxFQUFFcUQsRUFBR3JELEVBQUVnRCxFQUFHaEQsR0FBRyxFQUFHMDlELEVBQUcsS0FBSyxPQUFPLGFBQWFrZCxHQUFldHdFLEVBQUV0SyxDQUFDLENBQUMsQ0FBQyxFQUFHLE9BQU8wOUQsRUFBRyxLQUFLLEVBQUUsRUFBRSxRQUFRdEQsR0FBSyxFQUFFLEdBQzlOK08sR0FBWWxRLEdBQVUsU0FBUzN1RCxFQUFzQmpILEVBQWFMLEVBQXlCLENBQUUsT0FBSSxPQUFPLFNBQVNzSCxDQUFDLEVBQW9FQSxFQUFFLFNBQVMsVUFBVWpILEVBQUVMLENBQUMsRUFBRSxRQUFRbzNELEdBQUssRUFBRSxFQUFuRXVnQixHQUFXcndFLEVBQUVqSCxFQUFFTCxDQUFDLENBQTJFLEVBQUsyM0UsR0FFNVBFLEdBQWEsU0FBU3Z3RSxFQUFzQmpILEVBQWF1aEIsRUFBeUIsQ0FBK0IsUUFBekI4NEMsRUFBcUIsQ0FBRSxFQUFVMTlELEVBQUVxRCxFQUFHckQsRUFBRXFELEVBQUV1aEIsRUFBRyxFQUFFNWtCLEVBQUcwOUQsRUFBRyxNQUFNLElBQU1wekQsRUFBRXRLLENBQUMsRUFBRSxTQUFTLEVBQUUsR0FBRyxNQUFNLEVBQUUsQ0FBQyxFQUFHLE9BQU8wOUQsRUFBRyxLQUFLLEVBQUUsR0FDek1vZCxHQUFZN2hCLEdBQVUsU0FBUzN1RCxFQUFzQmpILEVBQWF1aEIsRUFBeUIsQ0FBRSxPQUFPLE9BQU8sU0FBU3RhLENBQUMsRUFBaUNBLEVBQUUsU0FBUyxNQUFNakgsRUFBRUEsRUFBRXVoQixDQUFDLEVBQUlpMkQsR0FBV3Z3RSxFQUFFakgsRUFBRXVoQixDQUFDLENBQUUsRUFBS2kyRCxHQUV2TUUsR0FBVSxTQUFTendFLEVBQXNCakgsRUFBYUwsRUFBYyxDQUFhLFFBQVAwNkQsRUFBRyxHQUFZMTlELEVBQUVxRCxFQUFHckQsRUFBRWdELEVBQUdoRCxJQUFLMDlELEVBQUcsS0FBSyxPQUFPLGFBQWFzZCxHQUFZMXdFLEVBQUV0SyxDQUFDLENBQUMsQ0FBQyxFQUFHLE9BQU8wOUQsRUFBRyxLQUFLLEVBQUUsQ0FBRSxFQUMzS3VkLEdBQVNoaUIsR0FBVSxTQUFnQjN1RCxFQUF1QmpILEVBQWNMLEVBQWMsQ0FBRSxPQUFRLE9BQU8sU0FBU3NILENBQUMsRUFBb0NBLEVBQUUsU0FBUyxPQUFPakgsRUFBRUwsQ0FBQyxFQUFJKzNFLEdBQVF6d0UsRUFBRWpILEVBQUVMLENBQUMsQ0FBRSxFQUFLKzNFLEdBRWxNRyxHQUFXLFNBQVM1d0UsRUFBc0J0SyxFQUFjLENBQUUsSUFBSTY3QixFQUFNMnRDLEdBQWVsL0QsRUFBRXRLLENBQUMsRUFBRyxPQUFPNjdCLEVBQU0sRUFBSW8vQyxHQUFPM3dFLEVBQUd0SyxFQUFFLEVBQUVBLEVBQUUsRUFBRTY3QixFQUFJLENBQUMsRUFBSSxFQUFHLEVBQ3hJcy9DLEdBQVVELEdBRVZFLEdBQVcsU0FBUzl3RSxFQUFzQnRLLEVBQWMsQ0FBRSxJQUFJNjdCLEVBQU0ydEMsR0FBZWwvRCxFQUFFdEssQ0FBQyxFQUFHLE9BQU82N0IsRUFBTSxFQUFJby9DLEdBQU8zd0UsRUFBR3RLLEVBQUUsRUFBRUEsRUFBRSxFQUFFNjdCLEVBQUksQ0FBQyxFQUFJLEVBQUcsRUFDeEl3L0MsR0FBVUQsR0FFVkUsR0FBWSxTQUFTaHhFLEVBQXNCdEssRUFBYyxDQUFFLElBQUk2N0IsRUFBTSxFQUFFMnRDLEdBQWVsL0QsRUFBRXRLLENBQUMsRUFBRyxPQUFPNjdCLEVBQU0sRUFBSW8vQyxHQUFPM3dFLEVBQUd0SyxFQUFFLEVBQUVBLEVBQUUsRUFBRTY3QixFQUFJLENBQUMsRUFBSSxFQUFHLEVBQzNJMC9DLEdBQVdELEdBRVhFLEdBQVUsU0FBZWx4RSxFQUFzQnRLLEVBQWMsQ0FBRSxJQUFJNjdCLEVBQU0ydEMsR0FBZWwvRCxFQUFFdEssQ0FBQyxFQUFHLE9BQU82N0IsRUFBTSxFQUFJc3RDLEdBQVU3K0QsRUFBR3RLLEVBQUUsRUFBRUEsRUFBRSxFQUFFNjdCLENBQUcsRUFBSSxFQUFHLEVBQzlJNC9DLEdBQVNELEdBRVRFLEdBQVcsU0FBU3B4RSxFQUFzQnRLLEVBQWMsQ0FBRSxJQUFJNjdCLEVBQU0ydEMsR0FBZWwvRCxFQUFFdEssQ0FBQyxFQUFHLE9BQU82N0IsRUFBTSxFQUFJby9DLEdBQU8zd0UsRUFBR3RLLEVBQUUsRUFBRUEsRUFBRSxFQUFFNjdCLENBQUcsRUFBSSxFQUFHLEVBQ3RJOC9DLEdBQVVELEdBRVZFLEdBQVksU0FBU3R4RSxFQUF1QjIxQyxFQUFnQixDQUFFLE9BQU9xNkIsR0FBZWh3RSxFQUFHMjFDLENBQUcsQ0FBRSxFQUM1RjQ3QixHQUFXRCxHQUVYRSxHQUFTLFNBQWtCeDRFLEVBQUcsQ0FBRSxPQUFPLE1BQU0sUUFBUUEsQ0FBQyxHQUFNLE9BQU8sV0FBZSxLQUFlQSxhQUFhLFVBQVksRUFFM0gyMUQsS0FDRmtpQixHQUFVLFNBQWlCN3dFLEVBQXVCdEssRUFBYyxDQUFFLEdBQUcsQ0FBQyxPQUFPLFNBQVNzSyxDQUFDLEVBQW1DLE9BQU80d0UsR0FBUzV3RSxFQUFHdEssQ0FBQyxFQUFHLElBQUk2N0IsRUFBTXZ4QixFQUFFLGFBQWF0SyxDQUFDLEVBQUcsT0FBTzY3QixFQUFNLEVBQUl2eEIsRUFBRSxTQUFTLE9BQU90SyxFQUFFLEVBQUVBLEVBQUUsRUFBRTY3QixFQUFJLENBQUMsRUFBSSxFQUFHLEVBQ3JPdy9DLEdBQVUsU0FBaUIvd0UsRUFBdUJ0SyxFQUFjLENBQUUsR0FBRyxDQUFDLE9BQU8sU0FBU3NLLENBQUMsRUFBbUMsT0FBTzh3RSxHQUFTOXdFLEVBQUd0SyxDQUFDLEVBQUcsSUFBSTY3QixFQUFNdnhCLEVBQUUsYUFBYXRLLENBQUMsRUFBRyxPQUFPNjdCLEVBQU0sRUFBSXZ4QixFQUFFLFNBQVMsT0FBT3RLLEVBQUUsRUFBRUEsRUFBRSxFQUFFNjdCLEVBQUksQ0FBQyxFQUFJLEVBQUcsRUFDck8wL0MsR0FBVyxTQUFrQmp4RSxFQUF1QnRLLEVBQWMsQ0FBRSxHQUFHLENBQUMsT0FBTyxTQUFTc0ssQ0FBQyxFQUFtQyxPQUFPZ3hFLEdBQVVoeEUsRUFBR3RLLENBQUMsRUFBRyxJQUFJNjdCLEVBQU0sRUFBRXZ4QixFQUFFLGFBQWF0SyxDQUFDLEVBQUcsT0FBT3NLLEVBQUUsU0FBUyxVQUFVdEssRUFBRSxFQUFFQSxFQUFFLEVBQUU2N0IsRUFBSSxDQUFDLENBQUUsRUFDOU40L0MsR0FBUyxTQUFnQm54RSxFQUF1QnRLLEVBQWMsQ0FBRSxHQUFHLENBQUMsT0FBTyxTQUFTc0ssQ0FBQyxFQUFtQyxPQUFPa3hFLEdBQVFseEUsRUFBR3RLLENBQUMsRUFBRyxJQUFJNjdCLEVBQU12eEIsRUFBRSxhQUFhdEssQ0FBQyxFQUFHLE9BQU9zSyxFQUFFLFNBQVMsVUFBVXRLLEVBQUUsRUFBRUEsRUFBRSxFQUFFNjdCLENBQUcsQ0FBRSxFQUNwTjgvQyxHQUFVLFNBQWlCcnhFLEVBQXVCdEssRUFBYyxDQUFFLEdBQUcsQ0FBQyxPQUFPLFNBQVNzSyxDQUFDLEVBQW1DLE9BQU9veEUsR0FBU3B4RSxFQUFHdEssQ0FBQyxFQUFHLElBQUk2N0IsRUFBTXZ4QixFQUFFLGFBQWF0SyxDQUFDLEVBQUcsT0FBT3NLLEVBQUUsU0FBUyxPQUFPdEssRUFBRSxFQUFFQSxFQUFFLEVBQUU2N0IsQ0FBRyxDQUFFLEVBQ3BOZ2dELEdBQVcsU0FBaUJ2eEUsRUFBdUJ0SyxFQUFjLENBQUUsT0FBRyxPQUFPLFNBQVNzSyxDQUFDLEVBQXNDQSxFQUFFLGFBQWF0SyxDQUFDLEVBQVU0N0UsR0FBVXR4RSxFQUFFdEssQ0FBQyxHQUNwSzg3RSxHQUFTLFNBQWtCeDRFLEVBQUcsQ0FBRSxPQUFPLE9BQU8sU0FBU0EsQ0FBQyxHQUFLLE1BQU0sUUFBUUEsQ0FBQyxHQUFNLE9BQU8sV0FBZSxLQUFlQSxhQUFhLGFBZXJJLElBQUkwM0UsR0FBYyxTQUFTMXdFLEVBQXVCMjFDLEVBQTJCLENBQUUsT0FBTzMxQyxFQUFFMjFDLENBQUcsR0FDdkYyNkIsR0FBaUIsU0FBU3R3RSxFQUF1QjIxQyxFQUEyQixDQUFFLE9BQVEzMUMsRUFBRTIxQyxFQUFJLENBQUMsRUFBRyxJQUFPMzFDLEVBQUUyMUMsQ0FBRyxDQUFFLEVBQzlHODdCLEdBQWdCLFNBQVN6eEUsRUFBdUIyMUMsRUFBMkIsQ0FBRSxJQUFJaDhDLEVBQUtxRyxFQUFFMjFDLEVBQUksQ0FBQyxFQUFHLElBQU8zMUMsRUFBRTIxQyxDQUFHLEVBQUcsT0FBUWg4QyxFQUFJLE1BQVVBLEdBQU0sTUFBU0EsRUFBSSxHQUFLLEVBQUksRUFDakt1bEUsR0FBaUIsU0FBU2wvRCxFQUF1QjIxQyxFQUEyQixDQUFFLE9BQU8zMUMsRUFBRTIxQyxFQUFJLENBQUMsR0FBRyxHQUFHLEtBQUszMUMsRUFBRTIxQyxFQUFJLENBQUMsR0FBRyxLQUFLMzFDLEVBQUUyMUMsRUFBSSxDQUFDLEdBQUcsR0FBRzMxQyxFQUFFMjFDLENBQUcsQ0FBRSxFQUMxSW9vQixHQUFnQixTQUFTLzlELEVBQXVCMjFDLEVBQTJCLENBQUUsT0FBUTMxQyxFQUFFMjFDLEVBQUksQ0FBQyxHQUFHLEdBQUszMUMsRUFBRTIxQyxFQUFJLENBQUMsR0FBRyxHQUFLMzFDLEVBQUUyMUMsRUFBSSxDQUFDLEdBQUcsRUFBRzMxQyxFQUFFMjFDLENBQUcsQ0FBRSxFQUN2SSs3QixHQUFnQixTQUFTMXhFLEVBQXVCMjFDLEVBQTJCLENBQUUsT0FBUTMxQyxFQUFFMjFDLENBQUcsR0FBRyxHQUFLMzFDLEVBQUUyMUMsRUFBSSxDQUFDLEdBQUcsR0FBSzMxQyxFQUFFMjFDLEVBQUksQ0FBQyxHQUFHLEVBQUczMUMsRUFBRTIxQyxFQUFJLENBQUMsQ0FBRSxFQUUzSSxTQUFTb3pCLEdBQVVobUUsRUFBaUIsRUFBaUMsQ0FDcEUsSUFBSXJKLEVBQUUsR0FBSWk0RSxFQUFzQkMsRUFBSUMsRUFBRyxDQUFFLEVBQUVsZixFQUFHdUUsRUFBSXhoRSxFQUFHbzhFLEVBQ3JELE9BQU8sRUFBQyxDQUNQLElBQUssT0FFSixHQURBQSxFQUFNLEtBQUssRUFDUm5qQixJQUFXLE9BQU8sU0FBUyxJQUFJLEVBQUdqMUQsRUFBSSxLQUFLLE1BQU0sS0FBSyxFQUFHLEtBQUssRUFBRSxFQUFFcUosQ0FBSSxFQUFFLFNBQVMsU0FBUyxNQUN4RixLQUFJck4sRUFBSSxFQUFHQSxFQUFJcU4sRUFBTSxFQUFFck4sRUFBS2dFLEdBQUcsT0FBTyxhQUFhNDJFLEdBQWUsS0FBTXdCLENBQUcsQ0FBQyxFQUFHQSxHQUFLLEVBQ3pGL3VFLEdBQVEsRUFDUixNQUVELElBQUssT0FBUXJKLEVBQUlpM0UsR0FBTyxLQUFNLEtBQUssRUFBRyxLQUFLLEVBQUk1dEUsQ0FBSSxFQUFHLE1BQ3RELElBQUssVUFBV0EsR0FBUSxFQUFHckosRUFBSW1sRSxHQUFVLEtBQU0sS0FBSyxFQUFHLEtBQUssRUFBSTk3RCxDQUFJLEVBQUcsTUFFdkUsSUFBSyxPQUVDLE9BQU9nbUUsR0FBVSxLQUFLLEtBQU1obUUsRUFBTSxNQUFNLEVBSTlDLElBQUssYUFBY3JKLEVBQUltM0UsR0FBUSxLQUFNLEtBQUssQ0FBQyxFQUFHOXRFLEVBQU8sRUFBSW04RCxHQUFlLEtBQU0sS0FBSyxDQUFDLEVBQUcsTUFDdkYsSUFBSyxXQUFZeGxFLEVBQUlxM0UsR0FBUSxLQUFNLEtBQUssQ0FBQyxFQUFHaHVFLEVBQU8sRUFBSW04RCxHQUFlLEtBQU0sS0FBSyxDQUFDLEVBQUcsTUFFckYsSUFBSyxTQUFVeGxFLEVBQUl1M0UsR0FBUyxLQUFNLEtBQUssQ0FBQyxFQUFHbHVFLEVBQU8sRUFBSSxFQUFJbThELEdBQWUsS0FBTSxLQUFLLENBQUMsRUFBRyxNQUV4RixJQUFLLE9BQVFuOEQsRUFBTyxFQUFLbThELEdBQWUsS0FBTSxLQUFLLENBQUMsRUFBR3hsRSxFQUFJeTNFLEdBQU8sS0FBTSxLQUFLLENBQUMsRUFBTXB1RSxFQUFPLElBQU1BLEdBQVEsR0FBRyxNQUU1RyxJQUFLLFFBQVNBLEVBQU8sRUFBS204RCxHQUFlLEtBQU0sS0FBSyxDQUFDLEVBQUd4bEUsRUFBSTIzRSxHQUFRLEtBQU0sS0FBSyxDQUFDLEVBQU10dUUsRUFBTyxJQUFNQSxHQUFRLEdBQUtBLEVBQU8sSUFBTyxNQUU5SCxJQUFLLE9BQ0osSUFEWUEsRUFBTyxFQUFHckosRUFBSSxJQUNuQmk1RCxFQUFFK2QsR0FBWSxLQUFNLEtBQUssRUFBSTN0RSxHQUFNLEtBQUssR0FBRzh1RSxFQUFHLEtBQUs3akIsR0FBUzJFLENBQUMsQ0FBQyxFQUNyRWo1RCxFQUFJbTRFLEVBQUcsS0FBSyxFQUFFLEVBQUcsTUFDbEIsSUFBSyxRQUNKLElBRGE5dUUsRUFBTyxFQUFHckosRUFBSSxJQUNwQmk1RCxFQUFFMmQsR0FBZSxLQUFLLEtBQUssRUFBR3Z0RSxDQUFJLEtBQUssR0FBRzh1RSxFQUFHLEtBQUs3akIsR0FBUzJFLENBQUMsQ0FBQyxFQUFFNXZELEdBQU0sRUFDNUVBLEdBQU0sRUFBR3JKLEVBQUltNEUsRUFBRyxLQUFLLEVBQUUsRUFBRyxNQUczQixJQUFLLFlBQ0osSUFEaUJuNEUsRUFBSSxHQUFJbzRFLEVBQU0sS0FBSyxFQUNoQ3A4RSxFQUFJLEVBQUdBLEVBQUlxTixFQUFNLEVBQUVyTixFQUFHLENBQ3pCLEdBQUcsS0FBSyxNQUFRLEtBQUssS0FBSyxRQUFRbzhFLENBQUcsSUFBTSxHQUMxQyxPQUFBbmYsRUFBSStkLEdBQVksS0FBTW9CLENBQUcsRUFDekIsS0FBSyxFQUFJQSxFQUFNLEVBQ2Y1YSxFQUFLNlIsR0FBVSxLQUFLLEtBQU1obUUsRUFBS3JOLEVBQUdpOUQsRUFBSSxZQUFjLFdBQVcsRUFDeERrZixFQUFHLEtBQUssRUFBRSxFQUFJM2EsRUFFdEIyYSxFQUFHLEtBQUs3akIsR0FBU3NpQixHQUFlLEtBQU13QixDQUFHLENBQUMsQ0FBQyxFQUMzQ0EsR0FBSyxDQUNULENBQUtwNEUsRUFBSW00RSxFQUFHLEtBQUssRUFBRSxFQUFHOXVFLEdBQVEsRUFBRyxNQUUvQixJQUFLLFFBTUwsSUFBSyxZQUNKLElBRGlCckosRUFBSSxHQUFJbzRFLEVBQU0sS0FBSyxFQUNoQ3A4RSxFQUFJLEVBQUdBLEdBQUtxTixFQUFNLEVBQUVyTixFQUFHLENBQzFCLEdBQUcsS0FBSyxNQUFRLEtBQUssS0FBSyxRQUFRbzhFLENBQUcsSUFBTSxHQUMxQyxPQUFBbmYsRUFBSStkLEdBQVksS0FBTW9CLENBQUcsRUFDekIsS0FBSyxFQUFJQSxFQUFNLEVBQ2Y1YSxFQUFLNlIsR0FBVSxLQUFLLEtBQU1obUUsRUFBS3JOLEVBQUdpOUQsRUFBSSxZQUFjLFdBQVcsRUFDeERrZixFQUFHLEtBQUssRUFBRSxFQUFJM2EsRUFFdEIyYSxFQUFHLEtBQUs3akIsR0FBUzBpQixHQUFZLEtBQU1vQixDQUFHLENBQUMsQ0FBQyxFQUN4Q0EsR0FBSyxDQUNMLENBQUNwNEUsRUFBSW00RSxFQUFHLEtBQUssRUFBRSxFQUFHLE1BRXBCLFFBQ0QsT0FBTzl1RSxFQUFJLENBQ1YsSUFBSyxHQUFHLE9BQUE0dUUsRUFBS2pCLEdBQVksS0FBTSxLQUFLLENBQUMsRUFBRyxLQUFLLElBQVlpQixFQUN6RCxJQUFLLEdBQUcsT0FBQUEsR0FBTSxJQUFNLElBQU1GLEdBQWdCbkIsSUFBZ0IsS0FBTSxLQUFLLENBQUMsRUFBRyxLQUFLLEdBQUssRUFBVXFCLEVBQzdGLElBQUssR0FBRyxJQUFLLEdBQ1osT0FBRyxJQUFNLEtBQVMsT0FBSyxLQUFLLEVBQUUsQ0FBQyxFQUFJLE1BQWNBLEdBQU81dUUsRUFBTyxFQUFLZzdELEdBQWdCMlQsSUFBZSxLQUFNLEtBQUssQ0FBQyxFQUFHLEtBQUssR0FBSyxFQUFVQyxJQUMvSEMsRUFBSzFTLEdBQWUsS0FBTSxLQUFLLENBQUMsRUFBRyxLQUFLLEdBQUssRUFBWTBTLEdBQ2pFLElBQUssR0FBRyxJQUFLLEdBQ1osR0FBRyxJQUFNLElBQ1IsT0FBRzd1RSxHQUFRLEVBQUc2dUUsRUFBS0wsR0FBUyxLQUFNLEtBQUssQ0FBQyxFQUNuQ0ssRUFBS0wsR0FBUyxDQUFDLEtBQUssS0FBSyxFQUFFLENBQUMsRUFBRSxLQUFLLEtBQUssRUFBRSxDQUFDLEVBQUUsS0FBSyxLQUFLLEVBQUUsQ0FBQyxFQUFFLEtBQUssS0FBSyxFQUFFLENBQUMsRUFBRSxLQUFLLEtBQUssRUFBRSxDQUFDLEVBQUUsS0FBSyxLQUFLLEVBQUUsQ0FBQyxFQUFFLEtBQUssS0FBSyxFQUFFLENBQUMsRUFBRSxLQUFLLEtBQUssRUFBRSxDQUFDLENBQUMsRUFBRyxDQUFDLEVBQy9JLEtBQUssR0FBSyxFQUFVSyxFQUNkN3VFLEVBQU8sRUFFZixJQUFLLElBQUlySixFQUFJODJFLEdBQVUsS0FBTSxLQUFLLEVBQUd6dEUsQ0FBSSxFQUFHLEtBQzlDLENBQUUsQ0FDRCxZQUFLLEdBQUdBLEVBQWFySixDQUN0QixDQUVBLElBQUlxNEUsR0FBa0IsU0FBUy94RSxFQUF1QjFKLEVBQWdCcS9DLEVBQXlCLENBQUUzMUMsRUFBRTIxQyxDQUFHLEVBQUtyL0MsRUFBTSxJQUFPMEosRUFBRTIxQyxFQUFJLENBQUMsRUFBTXIvQyxJQUFRLEVBQUssSUFBTzBKLEVBQUUyMUMsRUFBSSxDQUFDLEVBQU1yL0MsSUFBUSxHQUFNLElBQU8wSixFQUFFMjFDLEVBQUksQ0FBQyxFQUFNci9DLElBQVEsR0FBTSxLQUNsTjA3RSxHQUFrQixTQUFTaHlFLEVBQXVCMUosRUFBZ0JxL0MsRUFBeUIsQ0FBRTMxQyxFQUFFMjFDLENBQUcsRUFBS3IvQyxFQUFNLElBQU8wSixFQUFFMjFDLEVBQUksQ0FBQyxFQUFNci9DLEdBQU8sRUFBSyxJQUFPMEosRUFBRTIxQyxFQUFJLENBQUMsRUFBTXIvQyxHQUFPLEdBQU0sSUFBTzBKLEVBQUUyMUMsRUFBSSxDQUFDLEVBQU1yL0MsR0FBTyxHQUFNLEtBQy9NMjdFLEdBQWtCLFNBQVNqeUUsRUFBdUIxSixFQUFnQnEvQyxFQUF5QixDQUFFMzFDLEVBQUUyMUMsQ0FBRyxFQUFLci9DLEVBQU0sSUFBTzBKLEVBQUUyMUMsRUFBSSxDQUFDLEVBQU1yL0MsSUFBUSxFQUFLLEtBRWxKLFNBQVM0N0UsR0FBV2w2RSxFQUFjMUIsRUFBdUJtRCxFQUF1QixDQUMvRSxJQUFJc0osRUFBTyxFQUFHck4sRUFBSSxFQUNsQixHQUFHK0QsSUFBTSxPQUFRLENBRWhCLElBQUkvRCxFQUFJLEVBQUdBLEdBQUtZLEVBQUksT0FBUSxFQUFFWixFQUFHdThFLEdBQWdCLEtBQU0zN0UsRUFBSSxXQUFXWixDQUFDLEVBQUcsS0FBSyxFQUFJLEVBQUlBLENBQUMsRUFDeEZxTixFQUFPLEVBQUl6TSxFQUFJLE1BQ2pCLFNBQVdtRCxJQUFNLE9BQVEsQ0FZdEIsSUFGQW5ELEVBQU1BLEVBQUksUUFBUSxnQkFBaUIsR0FBRyxFQUVsQ1osRUFBSSxFQUFHQSxHQUFLWSxFQUFJLE9BQVEsRUFBRVosRUFBRyxLQUFLLEtBQUssRUFBSUEsQ0FBQyxFQUFLWSxFQUFJLFdBQVdaLENBQUMsRUFBSSxJQUUxRXFOLEVBQU96TSxFQUFJLE1BQ2IsU0FBV21ELElBQU0sTUFBTyxDQUN0QixLQUFNL0QsRUFBSXNDLEVBQUcsRUFBRXRDLEVBRWQsS0FBSyxLQUFLLEdBQUcsRUFBSyxTQUFTWSxFQUFJLE1BQU0sRUFBRVosRUFBRyxFQUFFQSxFQUFFLENBQUMsRUFBRyxFQUFFLEdBQUcsRUFDdEQsT0FBTyxJQUNYLFNBQVcrRCxJQUFNLFVBQVcsQ0FFekIsSUFBSWt6RCxFQUFpQixLQUFLLElBQUksS0FBSyxFQUFJMzBELEVBQUcsS0FBSyxNQUFNLEVBQ3JELElBQUl0QyxFQUFJLEVBQUdBLEVBQUksS0FBSyxJQUFJWSxFQUFJLE9BQVEwQixDQUFDLEVBQUcsRUFBRXRDLEVBQUcsQ0FDNUMsSUFBSTAvRCxFQUFLOStELEVBQUksV0FBV1osQ0FBQyxFQUN6QixLQUFLLEtBQUssR0FBRyxFQUFLMC9ELEVBQUssSUFDdkIsS0FBSyxLQUFLLEdBQUcsRUFBS0EsR0FBTSxDQUN4QixDQUNELEtBQU0sS0FBSyxFQUFJekksR0FBSyxLQUFLLEtBQUssR0FBRyxFQUFJLEVBQ3JDLE9BQU8sSUFDUixLQUEwQyxRQUFPMzBELEVBQUMsQ0FDbEQsSUFBTSxHQUFHK0ssRUFBTyxFQUFHLEtBQUssS0FBSyxDQUFDLEVBQUl6TSxFQUFJLElBQU0sTUFDNUMsSUFBTSxHQUFHeU0sRUFBTyxFQUFHLEtBQUssS0FBSyxDQUFDLEVBQUl6TSxFQUFJLElBQU1BLEtBQVMsRUFBRyxLQUFLLEtBQUssRUFBRSxDQUFDLEVBQUlBLEVBQUksSUFBTSxNQUNuRixJQUFNLEdBQUd5TSxFQUFPLEVBQUcsS0FBSyxLQUFLLENBQUMsRUFBSXpNLEVBQUksSUFBTUEsS0FBUyxFQUFHLEtBQUssS0FBSyxFQUFFLENBQUMsRUFBSUEsRUFBSSxJQUFNQSxLQUFTLEVBQUcsS0FBSyxLQUFLLEVBQUUsQ0FBQyxFQUFJQSxFQUFJLElBQU0sTUFDMUgsSUFBTSxHQUFHeU0sRUFBTyxFQUFHZ3ZFLEdBQWdCLEtBQU16N0UsRUFBSyxLQUFLLENBQUMsRUFBRyxNQUN2RCxJQUFNLEdBQWEsR0FBVnlNLEVBQU8sRUFBTXRKLElBQU0sSUFBSyxDQUFFdzJFLEdBQWdCLEtBQU0zNUUsRUFBSyxLQUFLLENBQUMsRUFBRyxLQUFRLENBRS9FLElBQUssSUFBSSxNQUNULElBQUssR0FBSXlNLEVBQU8sRUFBR2l2RSxHQUFlLEtBQU0xN0UsRUFBSyxLQUFLLENBQUMsRUFBRyxLQUN0RCxDQUNELFlBQUssR0FBS3lNLEVBQWEsSUFDeEIsQ0FFQSxTQUFTaW1FLEdBQVdtSixFQUFtQkMsRUFBeUIsQ0FDL0QsSUFBSW5sQixFQUFJdWpCLEdBQVUsS0FBSyxLQUFLLEVBQUUyQixFQUFPLFFBQVEsQ0FBQyxFQUM5QyxHQUFHbGxCLElBQU1rbEIsRUFBUSxNQUFNLElBQUksTUFBTUMsRUFBTSxZQUFjRCxFQUFTLFFBQVVsbEIsQ0FBQyxFQUN6RSxLQUFLLEdBQUtrbEIsRUFBTyxRQUFRLENBQzFCLENBRUEsU0FBU2pYLEdBQVU5TyxFQUFNaW1CLEVBQXlCLENBQ2pEam1CLEVBQUssRUFBSWltQixFQUNUam1CLEVBQUssV0FBb0IyYyxHQUN6QjNjLEVBQUssSUFBTTRjLEdBQ1g1YyxFQUFLLFlBQWM4bEIsRUFDcEIsQ0FFQSxTQUFTSSxHQUFVbG1CLEVBQU14dUIsRUFBa0MsQ0FBRXd1QixFQUFLLEdBQUt4dUIsQ0FBUyxDQUVoRixTQUFTb2dDLEdBQVE1QyxFQUF5QixDQUN6QyxJQUFJMWhFLEVBQUlxMUQsR0FBWXFNLENBQUUsRUFDdEIsT0FBQUYsR0FBVXhoRSxFQUFHLENBQUMsRUFDUEEsQ0FDUixDQUdBLFNBQVM2NEUsR0FBYXJyRSxFQUFNMlEsRUFBdUJqb0IsRUFBZSxDQUNqRSxHQUFJc1gsRUFDSixLQUFJc3JFLEVBQVNDLEVBQVM3MEMsRUFDdEJzOUIsR0FBVWgwRCxFQUFNQSxFQUFLLEdBQUssQ0FBQyxFQUUzQixRQURJMG9ELEVBQUkxb0QsRUFBSyxPQUFRd3JFLEVBQUssRUFBR3JYLEVBQU0sRUFDN0JuMEQsRUFBSyxFQUFJMG9ELEdBQUcsQ0FDakI4aUIsRUFBS3hyRSxFQUFLLFdBQVcsQ0FBQyxFQUNuQndyRSxFQUFLLE1BQU1BLEdBQU1BLEVBQUssT0FBVXhyRSxFQUFLLFdBQVcsQ0FBQyxFQUFJLE1BQU8sSUFDL0QsSUFBSXl6RCxFQUFJZ1ksR0FBZUQsQ0FBRSxHQUFLQyxHQUFlLEtBQU0sRUFHbkQsSUFGQUgsRUFBVXRyRSxFQUFLLFdBQVcsQ0FBQyxFQUMzQjAyQixFQUFTNDBDLEVBQVUsSUFDZkMsRUFBVSxFQUFHQSxFQUFTLEdBQU1ELEVBQVUsSUFBTyxFQUFFQyxFQUFTNzBDLEtBQVk0MEMsRUFBVXRyRSxFQUFLLFdBQVcsQ0FBQyxHQUFLLE1BQVEsRUFBRXVyRSxFQUNsSHBYLEVBQU1uMEQsRUFBSyxFQUFJMDJCLEVBQ2YsSUFBSWhrQyxFQUFJK2dFLEVBQUUsR0FBS0EsRUFBRSxFQUFFenpELEVBQU0wMkIsRUFBUWh1QyxDQUFJLEVBRXJDLEdBREFzWCxFQUFLLEVBQUltMEQsRUFDTnhqRCxFQUFHamUsRUFBRytnRSxFQUFHK1gsQ0FBRSxFQUFHLE1BQ2pCLEVBQ0YsQ0FHQSxTQUFTRSxJQUF5QixDQUNqQyxJQUFJcmpCLEVBQXdCLENBQUEsRUFBSXNqQixFQUFRbGtCLEdBQVUsSUFBTSxLQUNwRG1rQixFQUFTLFNBQW1CMVgsRUFBeUIsQ0FDeEQsSUFBSTFoRSxFQUFlc2tFLEdBQVE1QyxDQUFFLEVBQzdCLE9BQUFGLEdBQVV4aEUsRUFBRyxDQUFDLEVBQ1BBLENBQ1QsRUFFS3E1RSxFQUFtQkQsRUFBT0QsQ0FBSyxFQUUvQkcsRUFBUyxVQUFxQixDQUM3QkQsSUFDREEsRUFBTyxPQUFTQSxFQUFPLElBQUtBLEVBQVNBLEVBQU8sTUFBTSxFQUFHQSxFQUFPLENBQUMsRUFBR0EsRUFBTyxFQUFJQSxFQUFPLFFBQ2xGQSxFQUFPLE9BQVMsR0FBR3hqQixFQUFLLEtBQUt3akIsQ0FBTSxFQUN0Q0EsRUFBUyxLQUNYLEVBRUs5Z0QsRUFBTyxTQUFpQm1wQyxFQUF5QixDQUNwRCxPQUFHMlgsR0FBVzNYLEVBQU0yWCxFQUFPLE9BQVNBLEVBQU8sRUFBWUEsR0FDdkRDLElBQ1FELEVBQVNELEVBQU8sS0FBSyxJQUFJMVgsRUFBRyxFQUFHeVgsQ0FBSyxDQUFDLEVBQy9DLEVBRUtsbUIsRUFBTSxVQUFrQixDQUMzQixPQUFBcW1CLElBQ08xakIsR0FBUUMsQ0FBSSxDQUNyQixFQUVLenZELEVBQU8sU0FBaUIwc0QsRUFBSyxDQUFFd21CLEVBQU0sRUFBSUQsRUFBU3ZtQixFQUFRdW1CLEVBQU8sR0FBSyxPQUFNQSxFQUFPLEVBQUlBLEVBQU8sUUFBUTlnRCxFQUFLNGdELENBQUssR0FFcEgsTUFBUSxDQUFFLEtBQUs1Z0QsRUFBTSxLQUFLbnlCLEVBQU0sSUFBSTZzRCxFQUFLLE1BQU00QyxFQUNoRCxDQUVBLFNBQVMwakIsR0FBYUMsRUFBaUJwK0UsRUFBaUI4b0UsRUFBU2hnQyxFQUFvQixDQUNwRixJQUFJNWxDLEVBQWUsQ0FBQ2xELEVBQU13bEIsRUFDMUIsR0FBRyxPQUFNdGlCLENBQUMsRUFDVixDQUFJNGxDLElBQVFBLEVBQVMrMEMsR0FBZTM2RSxDQUFDLEVBQUUsSUFBTTRsRSxHQUFTLElBQUksUUFBVSxHQUNwRXRqRCxFQUFJLEdBQUt0aUIsR0FBSyxJQUFPLEVBQUksR0FBSyxFQUMzQjRsQyxHQUFVLEtBQU0sRUFBRXRqQixFQUFNc2pCLEdBQVUsT0FBUSxFQUFFdGpCLEVBQU1zakIsR0FBVSxTQUFVLEVBQUV0akIsRUFDM0UsSUFBSTVnQixFQUFJdzVFLEVBQUcsS0FBSzU0RCxDQUFDLEVBQ2R0aUIsR0FBSyxJQUFNMEIsRUFBRSxZQUFZLEVBQUcxQixDQUFDLEdBRS9CMEIsRUFBRSxZQUFZLEdBQUkxQixFQUFJLEtBQVEsR0FBSSxFQUNsQzBCLEVBQUUsWUFBWSxFQUFJMUIsR0FBSyxDQUFDLEdBRXpCLFFBQVF0QyxFQUFJLEVBQUdBLEdBQUssRUFBRyxFQUFFQSxFQUN4QixHQUFHa29DLEdBQVUsSUFBUWxrQyxFQUFFLFlBQVksR0FBSWtrQyxFQUFTLEtBQU0sR0FBSSxFQUFHQSxJQUFXLE1BQ25FLENBQUVsa0MsRUFBRSxZQUFZLEVBQUdra0MsQ0FBTSxFQUFHLEtBQVEsQ0FFZkEsRUFBUyxHQUFLNHpDLEdBQU81VCxDQUFPLEdBQUdzVixFQUFHLEtBQUt0VixDQUFPLEVBQzFFLENBRUEsU0FBU3VWLEdBQWVuNkMsRUFBc0JxaUMsRUFBYXpyRSxFQUErQixDQUN6RixJQUFJOC9ELEVBQU1tYixHQUFJN3hDLENBQUksRUFRbEIsR0FQR3FpQyxFQUFJLEdBQ0gzTCxFQUFJLE9BQU1BLEVBQUksR0FBSzJMLEVBQUksRUFBRSxHQUN6QjNMLEVBQUksT0FBTUEsRUFBSSxHQUFLMkwsRUFBSSxFQUFFLEtBRXpCM0wsRUFBSSxPQUFNQSxFQUFJLEdBQUsyTCxFQUFJLEdBQ3ZCM0wsRUFBSSxPQUFNQSxFQUFJLEdBQUsyTCxFQUFJLElBRXhCLENBQUN6ckUsR0FBUUEsRUFBSyxLQUFPLEdBQUksQ0FDM0IsS0FBTTgvRCxFQUFJLEdBQUssS0FBT0EsRUFBSSxHQUFLLElBQy9CLEtBQU1BLEVBQUksR0FBSyxPQUFTQSxFQUFJLEdBQUssS0FDakMsQ0FDRCxPQUFPQSxDQUNSLENBRUEsU0FBUzBqQixHQUFnQnA2QyxFQUFNbkUsRUFBT2psQyxFQUFNLENBQzNDLElBQUk4L0QsRUFBTW1iLEdBQUk3eEMsQ0FBSSxFQUNsQixPQUFBMDJCLEVBQUksRUFBSXlqQixHQUFlempCLEVBQUksRUFBRzc2QixFQUFNLEVBQUdqbEMsQ0FBSSxFQUMzQzgvRCxFQUFJLEVBQUl5akIsR0FBZXpqQixFQUFJLEVBQUc3NkIsRUFBTSxFQUFHamxDLENBQUksRUFDcEM4L0QsQ0FDUixDQUVBLFNBQVMyakIsR0FBZ0JyK0QsRUFBbUJzK0QsRUFBNEIsQ0FDdkUsR0FBR3QrRCxFQUFFLE1BQVFBLEVBQUUsRUFBSSxFQUFpQixJQUFaQSxFQUFJNjFELEdBQUk3MUQsQ0FBQyxFQUFTQSxFQUFFLEVBQUksR0FBR0EsRUFBRSxHQUFNcytELEVBQU8sRUFBSyxNQUFTLElBQ2hGLEdBQUd0K0QsRUFBRSxNQUFRQSxFQUFFLEVBQUksRUFBaUIsSUFBWkEsRUFBSTYxRCxHQUFJNzFELENBQUMsRUFBU0EsRUFBRSxFQUFJLEdBQUdBLEVBQUUsR0FBTXMrRCxFQUFPLEVBQUssUUFBYUEsRUFBTyxFQUFLLE1BQVUsTUFDMUcsSUFBSXY2RSxFQUFJdzZFLEdBQVl2K0QsQ0FBQyxFQUNyQixNQUFHLENBQUNBLEVBQUUsTUFBUUEsRUFBRSxNQUFRLE9BQU1qYyxFQUFJeTZFLEdBQVF6NkUsQ0FBQyxHQUN4QyxDQUFDaWMsRUFBRSxNQUFRQSxFQUFFLE1BQVEsT0FBTWpjLEVBQUkwNkUsR0FBUTE2RSxDQUFDLEdBQ3BDQSxDQUNSLENBRUEsU0FBUzI2RSxHQUFpQjc2RSxFQUFHakosRUFBaUIsQ0FDN0MsT0FBR2lKLEVBQUUsRUFBRSxHQUFLLEdBQUssQ0FBQ0EsRUFBRSxFQUFFLE1BQ2xCQSxFQUFFLEVBQUUsSUFBTWpKLEVBQUssTUFBUSxHQUFLLFFBQVdBLEVBQUssTUFBUSxFQUFJLE1BQVUsUUFBWSxDQUFDaUosRUFBRSxFQUFFLE1BQzdFQSxFQUFFLEVBQUUsS0FBTyxHQUFLLEtBQU84NkUsR0FBVzk2RSxFQUFFLEVBQUUsQ0FBQyxFQUFJLEtBQU9BLEVBQUUsRUFBRSxLQUFPLEdBQUssS0FBTzg2RSxHQUFXOTZFLEVBQUUsRUFBRSxDQUFDLEVBR2hHQSxFQUFFLEVBQUUsR0FBSyxHQUFLLENBQUNBLEVBQUUsRUFBRSxNQUNsQkEsRUFBRSxFQUFFLElBQU1qSixFQUFLLE1BQVEsR0FBSyxNQUFTLE1BQVMsQ0FBQ2lKLEVBQUUsRUFBRSxNQUM3Q0EsRUFBRSxFQUFFLEtBQU8sR0FBSyxLQUFPKzZFLEdBQVcvNkUsRUFBRSxFQUFFLENBQUMsRUFBSSxLQUFPQSxFQUFFLEVBQUUsS0FBTyxHQUFLLEtBQU8rNkUsR0FBVy82RSxFQUFFLEVBQUUsQ0FBQyxFQUc1Rnc2RSxHQUFnQng2RSxFQUFFLEVBQUdqSixFQUFLLElBQUksRUFBSSxJQUFNeWpGLEdBQWdCeDZFLEVBQUUsRUFBR2pKLEVBQUssSUFBSSxDQUM5RSxDQUNBLFNBQVNpa0YsR0FBV0MsRUFBOEIsQ0FBRSxPQUFPLFNBQVNDLEdBQVVELENBQU0sRUFBRSxFQUFFLEVBQUksQ0FBSSxDQUNoRyxTQUFTRixHQUFXejVFLEVBQTJCLENBQUUsTUFBTyxJQUFNQSxFQUFNLEVBQUssQ0FDekUsU0FBU3M1RSxHQUFRdEwsRUFBNEIsQ0FBRSxPQUFPQSxFQUFLLFFBQVEsa0JBQWtCLFFBQVEsQ0FBSSxDQUNqRyxTQUFTNEwsR0FBVTVMLEVBQTRCLENBQUUsT0FBT0EsRUFBSyxRQUFRLFdBQVcsSUFBSSxDQUFJLENBRXhGLFNBQVM2TCxHQUFXQyxFQUE4QixDQUEyQyxRQUFyQ2ovRCxFQUFJay9ELEdBQVVELENBQU0sRUFBR3I2RSxFQUFJLEVBQUdsRSxFQUFJLEVBQVNBLElBQU1zZixFQUFFLE9BQVEsRUFBRXRmLEVBQUdrRSxFQUFJLEdBQUdBLEVBQUlvYixFQUFFLFdBQVd0ZixDQUFDLEVBQUksR0FBSSxPQUFPa0UsRUFBSSxDQUFJLENBQ3hLLFNBQVMrNUUsR0FBVzlyRSxFQUEyQixDQUFFLEdBQUdBLEVBQU0sRUFBRyxNQUFNLElBQUksTUFBTSxrQkFBb0JBLENBQUcsRUFBRyxJQUFJOU8sRUFBRSxHQUFJLElBQUksRUFBRThPLEVBQUtBLEVBQUtBLEVBQUksS0FBSyxPQUFPQSxFQUFJLEdBQUcsRUFBRSxFQUFHOU8sRUFBSSxPQUFPLGNBQWU4TyxFQUFJLEdBQUcsR0FBTSxFQUFFLEVBQUk5TyxFQUFHLE9BQU9BLENBQUksQ0FDeE4sU0FBU3k2RSxHQUFRckwsRUFBNEIsQ0FBRSxPQUFPQSxFQUFLLFFBQVEsV0FBVyxNQUFNLENBQUksQ0FDeEYsU0FBUytMLEdBQVUvTCxFQUE0QixDQUFFLE9BQU9BLEVBQUssUUFBUSxhQUFhLElBQUksQ0FBSSxDQUUxRixTQUFTZ00sR0FBV2hNLEVBQW1DLENBQUUsT0FBT0EsRUFBSyxRQUFRLHNCQUFzQixPQUFPLEVBQUUsTUFBTSxHQUFHLENBQUksQ0FFekgsU0FBU2lNLEdBQVlqTSxFQUFpQyxDQUVyRCxRQURJeE4sRUFBSSxFQUFHTixFQUFJLEVBQ1Aza0UsRUFBSSxFQUFHQSxFQUFJeXlFLEVBQUssT0FBUSxFQUFFenlFLEVBQUcsQ0FDcEMsSUFBSTAvRCxFQUFLK1MsRUFBSyxXQUFXenlFLENBQUMsRUFDdkIwL0QsR0FBTSxJQUFNQSxHQUFNLEdBQUl1RixFQUFJLEdBQUtBLEdBQUt2RixFQUFLLElBQ3BDQSxHQUFNLElBQU1BLEdBQU0sS0FBSWlGLEVBQUksR0FBS0EsR0FBS2pGLEVBQUssSUFDakQsQ0FDRCxNQUFPLENBQUUsRUFBR2lGLEVBQUksRUFBRyxFQUFFTSxFQUFJLEVBQzFCLENBRUEsU0FBUzRZLEdBQVl2NkMsRUFBaUMsQ0FHckQsUUFGSW54QixFQUFNbXhCLEVBQUssRUFBSSxFQUNmamdDLEVBQUUsR0FDQThPLEVBQUtBLEdBQU1BLEVBQUksR0FBRyxHQUFJLEVBQUc5TyxFQUFJLE9BQU8sY0FBZThPLEVBQUksR0FBRyxHQUFNLEVBQUUsRUFBSTlPLEVBQzVFLE9BQU9BLEdBQUtpZ0MsRUFBSyxFQUFJLEVBQ3RCLENBQ0EsU0FBU3E3QyxHQUFheC9DLEVBQTRCLENBQ2pELElBQUk4Z0IsRUFBTTlnQixFQUFNLFFBQVEsR0FBRyxFQUMzQixPQUFHOGdCLEdBQU8sR0FBVyxDQUFFLEVBQUd5K0IsR0FBWXYvQyxDQUFLLEVBQUcsRUFBR3UvQyxHQUFZdi9DLENBQUssQ0FBQyxFQUM1RCxDQUFFLEVBQUd1L0MsR0FBWXYvQyxFQUFNLE1BQU0sRUFBRzhnQixDQUFHLENBQUMsRUFBRyxFQUFHeStCLEdBQVl2L0MsRUFBTSxNQUFNOGdCLEVBQU0sQ0FBQyxDQUFDLEVBQ2xGLENBRUEsU0FBUzIrQixHQUFhQyxFQUEwQkMsRUFBaUMsQ0FDaEYsT0FBRyxPQUFPQSxFQUFPLEtBQWUsT0FBT0EsR0FBTyxTQUV0Q0YsR0FBYUMsRUFBRyxFQUFHQSxFQUFHLENBQUMsR0FHNUIsT0FBT0EsR0FBTyxXQUFVQSxFQUFLaEIsR0FBYWdCLENBQUUsR0FDNUMsT0FBT0MsR0FBTyxXQUFVQSxFQUFLakIsR0FBYWlCLENBQUUsR0FHeENELEdBQU1DLEVBQUtELEVBQUtBLEVBQUssSUFBTUMsRUFDbkMsQ0FFQSxTQUFTQyxHQUFrQjUvQyxFQUE0QixDQUN0RCxJQUFJbjdCLEVBQUksQ0FBQyxFQUFFLENBQUMsRUFBRSxFQUFFLEVBQUUsQ0FBQyxFQUFFLEVBQUUsQ0FBQyxFQUFFLEVBQUUsRUFBRSxDQUFDLENBQUMsRUFDNUJpOEMsRUFBTSxFQUFHamdELEVBQUksRUFBRzAvRCxFQUFLLEVBQ3JCN2pDLEVBQU1zRCxFQUFNLE9BQ2hCLElBQUk4Z0IsRUFBTSxFQUFHamdELEVBQUk2N0IsR0FDWixHQUFBNmpDLEVBQUd2Z0MsRUFBTSxXQUFXbi9CLENBQUMsRUFBRSxJQUFNLEdBQUswL0QsRUFBSyxJQUR0QixFQUFFMS9ELEVBRXZCaWdELEVBQU0sR0FBR0EsRUFBTXlmLEVBSWhCLElBRkExN0QsRUFBRSxFQUFFLEVBQUksRUFBRWk4QyxFQUVOQSxFQUFNLEVBQUdqZ0QsRUFBSTY3QixHQUNaLEdBQUE2akMsRUFBR3ZnQyxFQUFNLFdBQVduL0IsQ0FBQyxFQUFFLElBQU0sR0FBSzAvRCxFQUFLLEdBRHRCLEVBQUUxL0QsRUFFdkJpZ0QsRUFBTSxHQUFHQSxFQUFNeWYsRUFJaEIsR0FGQTE3RCxFQUFFLEVBQUUsRUFBSSxFQUFFaThDLEVBRVBqZ0QsSUFBTTY3QixHQUFPNmpDLEdBQU0sR0FBTSxPQUFBMTdELEVBQUUsRUFBRSxFQUFFQSxFQUFFLEVBQUUsRUFBR0EsRUFBRSxFQUFFLEVBQUVBLEVBQUUsRUFBRSxFQUFVQSxFQUc3RCxJQUZBLEVBQUVoRSxFQUVFaWdELEVBQU0sRUFBR2pnRCxHQUFLNjdCLEdBQ2IsR0FBQTZqQyxFQUFHdmdDLEVBQU0sV0FBV24vQixDQUFDLEVBQUUsSUFBTSxHQUFLMC9ELEVBQUssSUFEckIsRUFBRTEvRCxFQUV4QmlnRCxFQUFNLEdBQUdBLEVBQU15ZixFQUloQixJQUZBMTdELEVBQUUsRUFBRSxFQUFJLEVBQUVpOEMsRUFFTkEsRUFBTSxFQUFHamdELEdBQUs2N0IsR0FDYixHQUFBNmpDLEVBQUd2Z0MsRUFBTSxXQUFXbi9CLENBQUMsRUFBRSxJQUFNLEdBQUswL0QsRUFBSyxHQURyQixFQUFFMS9ELEVBRXhCaWdELEVBQU0sR0FBR0EsRUFBTXlmLEVBRWhCLE9BQUExN0QsRUFBRSxFQUFFLEVBQUksRUFBRWk4QyxFQUNIajhDLENBQ1IsQ0FFQSxTQUFTZzdFLEdBQWlCMTdDLEVBQWV4akIsRUFBVyxDQUNuRCxJQUFJbzhDLEVBQUs1NEIsRUFBSyxHQUFLLEtBQU94akIsYUFBYSxLQUN2QyxHQUFHd2pCLEVBQUssR0FBSyxLQUFNLEdBQUksQ0FBRSxPQUFRQSxFQUFLLEVBQUlnNkIsR0FBV2g2QixFQUFLLEVBQUc0NEIsRUFBSWtZLEdBQVF0MEQsQ0FBQyxFQUFJQSxDQUFDLENBQUssTUFBVSxDQUFHLENBQ2pHLEdBQUksQ0FBRSxPQUFRd2pCLEVBQUssRUFBSWc2QixJQUFZaDZCLEVBQUssSUFBSSxDQUFFLEdBQUUsV0FBVzQ0QixFQUFJLEdBQUssR0FBS0EsRUFBSWtZLEdBQVF0MEQsQ0FBQyxFQUFJQSxDQUFDLE9BQWUsQ0FBRSxNQUFPLEdBQUdBLENBQUksQ0FDM0gsQ0FFQSxTQUFTbS9ELEdBQVkzN0MsRUFBZXhqQixFQUFXOWIsRUFBVyxDQUN6RCxPQUFHcy9CLEdBQVEsTUFBUUEsRUFBSyxHQUFLLE1BQVFBLEVBQUssR0FBSyxJQUFZLEdBQ3hEQSxFQUFLLElBQU0sT0FBa0JBLEVBQUssR0FDbENBLEVBQUssR0FBSyxLQUFPLENBQUNBLEVBQUssR0FBS3QvQixHQUFLQSxFQUFFLFNBQVFzL0IsRUFBSyxFQUFJdC9CLEVBQUUsUUFDdERzL0IsRUFBSyxHQUFLLElBQVk0N0MsR0FBSzU3QyxFQUFLLENBQUMsR0FBS0EsRUFBSyxFQUMzQ3hqQixHQUFLLEtBQWtCay9ELEdBQWlCMTdDLEVBQU1BLEVBQUssQ0FBQyxFQUNoRDA3QyxHQUFpQjE3QyxFQUFNeGpCLENBQUMsRUFDaEMsQ0FFQSxTQUFTcS9ELEdBQWtCQyxFQUFxQmxsRixFQUFtQixDQUNsRSxJQUFJa0osRUFBSWxKLEdBQVFBLEVBQUssTUFBUUEsRUFBSyxNQUFRLFNBQ3RDbWxGLEVBQVMsQ0FBQSxFQUFJLE9BQUFBLEVBQU9qOEUsQ0FBQyxFQUFJZzhFLEVBQ3RCLENBQUUsV0FBWSxDQUFDaDhFLENBQUMsRUFBRyxPQUFRaThFLENBQU0sQ0FDekMsQ0FFQSxTQUFTQyxHQUFjQyxFQUFvQi90RSxFQUFjdFgsRUFBNkIsQ0FDckYsSUFBSThKLEVBQUk5SixHQUFRLEdBQ1pzbEYsRUFBUUQsRUFBTSxNQUFNLFFBQVFBLENBQUcsRUFBSXY3RSxFQUFFLE1BRXJDeTdFLEVBQW1CRixJQUFRQyxFQUFTLENBQUEsRUFBZSxDQUFBLEdBQ25ERSxFQUFLLEVBQUdDLEVBQUssRUFDakIsR0FBR0YsR0FBTXo3RSxFQUFFLFFBQVUsS0FBTSxDQUMxQixHQUFHLE9BQU9BLEVBQUUsUUFBVSxTQUFVMDdFLEVBQUsxN0UsRUFBRSxXQUNsQyxDQUNKLElBQUk0N0UsRUFBMEIsT0FBTzU3RSxFQUFFLFFBQVUsU0FBVzA2RSxHQUFZMTZFLEVBQUUsTUFBTSxFQUFJQSxFQUFFLE9BQ3RGMDdFLEVBQUtFLEVBQVEsRUFBR0QsRUFBS0MsRUFBUSxDQUM3QixDQUNHSCxFQUFHLE1BQU0sSUFBR0EsRUFBRyxNQUFNLEVBQUksUUFDN0IsQ0FDRCxJQUFJdGdELEVBQW1CLENBQUMsRUFBRyxDQUFDLEVBQUUsSUFBVSxFQUFFLEdBQVEsRUFBRyxFQUFHLENBQUMsRUFBRSxFQUFHLEVBQUUsQ0FBQyxDQUFDLEVBQ2xFLEdBQUdzZ0QsRUFBRyxNQUFNLEVBQUcsQ0FDZCxJQUFJSSxFQUFTZCxHQUFrQlUsRUFBRyxNQUFNLENBQUMsRUFDekN0Z0QsRUFBTSxFQUFFLEVBQUkwZ0QsRUFBTyxFQUFFLEVBQ3JCMWdELEVBQU0sRUFBRSxFQUFJMGdELEVBQU8sRUFBRSxFQUNyQjFnRCxFQUFNLEVBQUUsRUFBSSxLQUFLLElBQUlBLEVBQU0sRUFBRSxFQUFHMGdELEVBQU8sRUFBRSxDQUFDLEVBQzFDMWdELEVBQU0sRUFBRSxFQUFJLEtBQUssSUFBSUEsRUFBTSxFQUFFLEVBQUcwZ0QsRUFBTyxFQUFFLENBQUMsRUFDdkNILEdBQU0sS0FBSXZnRCxFQUFNLEVBQUUsRUFBSXVnRCxFQUFLRyxFQUFPLEVBQUUsRUFBSSxFQUMzQyxDQUNELFFBQVE1YSxFQUFJLEVBQUdBLEdBQUt6ekQsRUFBSyxPQUFRLEVBQUV5ekQsRUFDbEMsR0FBSXp6RCxFQUFLeXpELENBQUMsRUFDVixJQUFHLENBQUMsTUFBTSxRQUFRenpELEVBQUt5ekQsQ0FBQyxDQUFDLEVBQUcsTUFBTSxJQUFJLE1BQU0seUNBQXlDLEVBQ3JGLFFBQVFOLEVBQUksRUFBR0EsR0FBS256RCxFQUFLeXpELENBQUMsRUFBRSxPQUFRLEVBQUVOLEVBQ3JDLEdBQUcsU0FBT256RCxFQUFLeXpELENBQUMsRUFBRU4sQ0FBQyxFQUFNLEtBQ3pCLEtBQUlyaEMsRUFBaUIsQ0FBQyxFQUFHOXhCLEVBQUt5ekQsQ0FBQyxFQUFFTixDQUFDLENBQUMsRUFDL0JtYixFQUFNSixFQUFLemEsRUFBRzhhLEVBQU1KLEVBQUtoYixFQUs3QixHQUpHeGxDLEVBQU0sRUFBRSxFQUFJMmdELElBQUszZ0QsRUFBTSxFQUFFLEVBQUkyZ0QsR0FDN0IzZ0QsRUFBTSxFQUFFLEVBQUk0Z0QsSUFBSzVnRCxFQUFNLEVBQUUsRUFBSTRnRCxHQUM3QjVnRCxFQUFNLEVBQUUsRUFBSTJnRCxJQUFLM2dELEVBQU0sRUFBRSxFQUFJMmdELEdBQzdCM2dELEVBQU0sRUFBRSxFQUFJNGdELElBQUs1Z0QsRUFBTSxFQUFFLEVBQUk0Z0QsR0FDN0J2dUUsRUFBS3l6RCxDQUFDLEVBQUVOLENBQUMsR0FBSyxPQUFPbnpELEVBQUt5ekQsQ0FBQyxFQUFFTixDQUFDLEdBQU0sVUFBWSxDQUFDLE1BQU0sUUFBUW56RCxFQUFLeXpELENBQUMsRUFBRU4sQ0FBQyxDQUFDLEdBQUssRUFBRW56RCxFQUFLeXpELENBQUMsRUFBRU4sQ0FBQyxZQUFhLE1BQU9yaEMsRUFBTzl4QixFQUFLeXpELENBQUMsRUFBRU4sQ0FBQyxVQUU1SCxNQUFNLFFBQVFyaEMsRUFBSyxDQUFDLElBQUtBLEVBQUssRUFBSTl4QixFQUFLeXpELENBQUMsRUFBRU4sQ0FBQyxFQUFFLENBQUMsRUFBR3JoQyxFQUFLLEVBQUlBLEVBQUssRUFBRSxDQUFDLEdBQ2xFQSxFQUFLLElBQU0sS0FDYixHQUFHQSxFQUFLLEVBQUdBLEVBQUssRUFBSSxZQUNadC9CLEVBQUUsVUFBYXMvQixFQUFLLEVBQUksSUFBS0EsRUFBSyxFQUFJLFVBQ3JDdC9CLEVBQUUsV0FDTnMvQixFQUFLLEVBQUksUUFEUyxlQUdoQixPQUFPQSxFQUFLLEdBQU0sU0FBVUEsRUFBSyxFQUFJLElBQ3JDLE9BQU9BLEVBQUssR0FBTSxVQUFXQSxFQUFLLEVBQUksSUFDdENBLEVBQUssYUFBYSxNQUN6QkEsRUFBSyxFQUFJdC9CLEVBQUUsUUFBVW0zRCxHQUFVLEVBQUUsRUFDOUJuM0QsRUFBRSxXQUFhcy9CLEVBQUssRUFBSSxJQUFLQSxFQUFLLEVBQUlnNkIsR0FBV2g2QixFQUFLLEVBQUc4d0MsR0FBUTl3QyxFQUFLLENBQUMsQ0FBQyxJQUNwRUEsRUFBSyxFQUFJLElBQUtBLEVBQUssRUFBSTh3QyxHQUFROXdDLEVBQUssQ0FBQyxFQUFHQSxFQUFLLEVBQUlnNkIsR0FBV2g2QixFQUFLLEVBQUdBLEVBQUssQ0FBQyxJQUU3RUEsRUFBSyxFQUFJLElBRWYsR0FBR2s4QyxFQUNFQyxFQUFHSyxDQUFHLElBQUdMLEVBQUdLLENBQUcsRUFBSSxJQUNwQkwsRUFBR0ssQ0FBRyxFQUFFQyxDQUFHLEdBQUtOLEVBQUdLLENBQUcsRUFBRUMsQ0FBRyxFQUFFLElBQUd6OEMsRUFBSyxFQUFJbThDLEVBQUdLLENBQUcsRUFBRUMsQ0FBRyxFQUFFLEdBQ3pETixFQUFHSyxDQUFHLEVBQUVDLENBQUcsRUFBSXo4QyxNQUNULENBQ04sSUFBSTA4QyxFQUFXbkMsR0FBYSxDQUFDLEVBQUVrQyxFQUFJLEVBQUVELENBQUcsR0FDckNMLEVBQUdPLENBQVEsR0FBS1AsRUFBR08sQ0FBUSxFQUFFLElBQUcxOEMsRUFBSyxFQUFJbThDLEVBQUdPLENBQVEsRUFBRSxHQUN6RFAsRUFBR08sQ0FBUSxFQUFJMThDLENBQ2YsR0FHSCxPQUFHbkUsRUFBTSxFQUFFLEVBQUksTUFBVXNnRCxFQUFHLE1BQU0sRUFBSWIsR0FBYXovQyxDQUFLLEdBQ2pEc2dELENBQ1IsQ0FDQSxTQUFTUSxHQUFhenVFLEVBQWN0WCxFQUE2QixDQUFFLE9BQU9vbEYsR0FBYyxLQUFNOXRFLEVBQU10WCxDQUFJLENBQUksQ0FFNUcsU0FBU2dtRixHQUFjMXVFLEVBQU0sQ0FDNUIsT0FBT0EsRUFBSyxXQUFXLEVBQUcsR0FBRyxDQUM5QixDQUNBLFNBQVMydUUsR0FBZXBrRCxFQUFjLzNCLEVBQUcsQ0FDeEMsT0FBS0EsSUFBR0EsRUFBSXNrRSxHQUFRLENBQUMsR0FDckJ0a0UsRUFBRSxZQUFZLEVBQUcrM0IsQ0FBQyxFQUNYLzNCLENBQ1IsQ0FHQSxTQUFTbzhFLEdBQW1CNXVFLEVBQStCLENBQzFELElBQUk2dUUsRUFBZ0I3dUUsRUFBSyxXQUFXLENBQUMsRUFDckMsT0FBTzZ1RSxJQUFrQixFQUFJLEdBQUs3dUUsRUFBSyxXQUFXNnVFLEVBQWUsTUFBTSxDQUN4RSxDQUNBLFNBQVNDLEdBQW1COXVFLEVBQWlCeE4sRUFBRyxDQUMvQyxJQUFJdThFLEVBQVEsR0FBTyxPQUFJdjhFLEdBQUssT0FBUXU4RSxFQUFRLEdBQU12OEUsRUFBSXNrRSxHQUFRLEVBQUksRUFBSTkyRCxFQUFLLE1BQU0sR0FDakZ4TixFQUFFLFlBQVksRUFBR3dOLEVBQUssTUFBTSxFQUN4QkEsRUFBSyxPQUFTLEdBQUd4TixFQUFFLFlBQVksRUFBR3dOLEVBQU0sTUFBTSxFQUMzQyt1RSxFQUFRdjhFLEVBQUUsTUFBTSxFQUFHQSxFQUFFLENBQUMsRUFBSUEsQ0FDbEMsQ0FTQSxTQUFTdzhFLEdBQWFodkUsRUFBTSxDQUMzQixNQUFPLENBQUUsSUFBS0EsRUFBSyxXQUFXLENBQUMsRUFBRyxLQUFNQSxFQUFLLFdBQVcsQ0FBQyxFQUMxRCxDQUNBLFNBQVNpdkUsR0FBYUMsRUFBSzE4RSxFQUFHLENBQzdCLE9BQUtBLElBQUdBLEVBQUlza0UsR0FBUSxDQUFDLEdBQ3JCdGtFLEVBQUUsWUFBWSxFQUFHMDhFLEVBQUksS0FBTyxDQUFDLEVBQzdCMThFLEVBQUUsWUFBWSxFQUFHMDhFLEVBQUksTUFBUSxDQUFDLEVBQ3ZCMThFLENBQ1IsQ0FHQSxTQUFTMjhFLEdBQWNudkUsRUFBTTAyQixFQUFnQyxDQUM1RCxJQUFJaG9CLEVBQVExTyxFQUFLLEVBQ2JpMEQsRUFBUWowRCxFQUFLLFdBQVcsQ0FBQyxFQUN6QnNxQixFQUFNc2tELEdBQW1CNXVFLENBQUksRUFDN0JvdkUsRUFBWSxDQUFBLEVBQ1puL0MsRUFBSyxDQUFFLEVBQUczRixFQUFLLEVBQUdBLENBQUcsRUFDekIsR0FBSzJwQyxFQUFRLEVBQVUsQ0FHdEIsUUFESW9iLEVBQWVydkUsRUFBSyxXQUFXLENBQUMsRUFDM0J4UixFQUFJLEVBQUdBLEdBQUs2Z0YsRUFBYyxFQUFFN2dGLEVBQUc0Z0YsRUFBVSxLQUFLSixHQUFhaHZFLENBQUksQ0FBQyxFQUN6RWl3QixFQUFFLEVBQUltL0MsQ0FDTixNQUNJbi9DLEVBQUUsRUFBSSxDQUFDLENBQUUsSUFBSyxFQUFHLEtBQU0sQ0FBQyxDQUFFLEVBSS9CLE9BQUFqd0IsRUFBSyxFQUFJME8sRUFBUWdvQixFQUNWekcsQ0FDUixDQUNBLFNBQVNxL0MsR0FBY2hsRCxFQUFrQjkzQixFQUF3QixDQUVoRSxJQUFJdThFLEVBQVEsR0FBTyxPQUFJdjhFLEdBQUssT0FBUXU4RSxFQUFRLEdBQU12OEUsRUFBSXNrRSxHQUFRLEdBQUssRUFBSXhzQyxFQUFJLEVBQUUsTUFBTSxHQUNuRjkzQixFQUFFLFlBQVksRUFBRyxDQUFDLEVBQ2xCczhFLEdBQW1CeGtELEVBQUksRUFBRzkzQixDQUFDLEVBQ3BCdThFLEVBQVF2OEUsRUFBRSxNQUFNLEVBQUdBLEVBQUUsQ0FBQyxFQUFJQSxDQUNsQyxDQUVBLElBQUkrOEUsR0FBdUJKLEdBQzNCLFNBQVNLLEdBQXFCbGxELEVBQWtCOTNCLEVBQXdCLENBRXZFLElBQUl1OEUsRUFBUSxHQUFPLE9BQUl2OEUsR0FBSyxPQUFRdThFLEVBQVEsR0FBTXY4RSxFQUFJc2tFLEdBQVEsR0FBSyxFQUFJeHNDLEVBQUksRUFBRSxNQUFNLEdBQ25GOTNCLEVBQUUsWUFBWSxFQUFHLENBQUMsRUFDbEJzOEUsR0FBbUJ4a0QsRUFBSSxFQUFHOTNCLENBQUMsRUFDM0JBLEVBQUUsWUFBWSxFQUFHLENBQUMsRUFDbEJ5OEUsR0FBYSxDQUFFLElBQUssRUFBRyxLQUFNLENBQUMsRUFBSXo4RSxDQUFDLEVBQzVCdThFLEVBQVF2OEUsRUFBRSxNQUFNLEVBQUdBLEVBQUUsQ0FBQyxFQUFJQSxDQUNsQyxDQUdBLFNBQVNpOUUsR0FBZXp2RSxFQUFjLENBQ3JDLElBQUlXLEVBQU1YLEVBQUssV0FBVyxDQUFDLEVBQ3ZCMHZFLEVBQVkxdkUsRUFBSyxXQUFXLENBQUMsRUFDakMsT0FBQTB2RSxHQUFhMXZFLEVBQUssV0FBVyxDQUFDLEdBQUssR0FDbkNBLEVBQUssSUFDRSxDQUFFLEVBQUdXLEVBQUssVUFBVyt1RSxDQUFTLENBQ3RDLENBQ0EsU0FBU0MsR0FBZTc5QyxFQUFjdC9CLEVBQWMsQ0FDbkQsT0FBSUEsR0FBSyxPQUFNQSxFQUFJc2tFLEdBQVEsQ0FBQyxHQUM1QnRrRSxFQUFFLFlBQVksR0FBSXMvQixFQUFLLENBQUMsRUFDeEJ0L0IsRUFBRSxZQUFZLEVBQUdzL0IsRUFBSyxXQUFhQSxFQUFLLENBQUMsRUFDekN0L0IsRUFBRSxZQUFZLEVBQUcsQ0FBQyxFQUNYQSxDQUNSLENBR0EsU0FBU285RSxHQUFvQjV2RSxFQUFjLENBQzFDLElBQUkwdkUsRUFBWTF2RSxFQUFLLFdBQVcsQ0FBQyxFQUNqQyxPQUFBMHZFLEdBQWExdkUsRUFBSyxXQUFXLENBQUMsR0FBSSxHQUNsQ0EsRUFBSyxJQUNFLENBQUUsRUFBRSxHQUFJLFVBQVcwdkUsQ0FBUyxDQUNwQyxDQUNBLFNBQVNHLEdBQW9CLzlDLEVBQWN0L0IsRUFBYyxDQUN4RCxPQUFHQSxHQUFLLE9BQU1BLEVBQUlza0UsR0FBUSxDQUFDLEdBQzNCdGtFLEVBQUUsWUFBWSxFQUFHcy9CLEVBQUssV0FBYUEsRUFBSyxDQUFDLEVBQ3pDdC9CLEVBQUUsWUFBWSxFQUFHLENBQUMsRUFDWEEsQ0FDUixDQUdBLElBQUlzOUUsR0FBcUJsQixHQUNyQm1CLEdBQXFCakIsR0FHekIsU0FBU2tCLEdBQTJCaHdFLEVBQStCLENBQ2xFLElBQUk2dUUsRUFBZ0I3dUUsRUFBSyxXQUFXLENBQUMsRUFDckMsT0FBTzZ1RSxJQUFrQixHQUFLQSxJQUFrQixXQUFhLEdBQUs3dUUsRUFBSyxXQUFXNnVFLEVBQWUsTUFBTSxDQUN4RyxDQUNBLFNBQVNvQixHQUEyQmp3RSxFQUFpQnhOLEVBQUcsQ0FDdkQsSUFBSXU4RSxFQUFRLEdBQU8sT0FBSXY4RSxHQUFLLE9BQVF1OEUsRUFBUSxHQUFNdjhFLEVBQUlza0UsR0FBUSxHQUFHLEdBQ2pFdGtFLEVBQUUsWUFBWSxFQUFHd04sRUFBSyxPQUFTLEVBQUlBLEVBQUssT0FBUyxVQUFVLEVBQ3ZEQSxFQUFLLE9BQVMsR0FBR3hOLEVBQUUsWUFBWSxFQUFHd04sRUFBTSxNQUFNLEVBQzNDK3VFLEVBQVF2OEUsRUFBRSxNQUFNLEVBQUdBLEVBQUUsQ0FBQyxFQUFJQSxDQUNsQyxDQUdBLElBQUkwOUUsR0FBeUJ0QixHQUl6QnVCLEdBQWNILEdBQ2RJLEdBQWNILEdBSWxCLFNBQVNJLEdBQWVyd0UsRUFBaUIsQ0FDeEMsSUFBSWxILEVBQUlrSCxFQUFLLE1BQU1BLEVBQUssRUFBR0EsRUFBSyxFQUFJLENBQUMsRUFDakNzd0UsRUFBU3gzRSxFQUFFLENBQUMsRUFBSSxFQUFJeTNFLEVBQVF6M0UsRUFBRSxDQUFDLEVBQUksRUFDdkNrSCxFQUFLLEdBQUssRUFDVixJQUFJd3dFLEVBQUtELElBQVMsRUFBSWxHLEdBQVMsQ0FBQyxFQUFHLEVBQUcsRUFBRyxFQUFJdnhFLEVBQUUsQ0FBQyxFQUFJLElBQU9BLEVBQUUsQ0FBQyxFQUFHQSxFQUFFLENBQUMsRUFBR0EsRUFBRSxDQUFDLENBQUMsRUFBRyxDQUFDLEVBQUkrOUQsR0FBYy85RCxFQUFHLENBQUMsR0FBSyxFQUMxRyxPQUFPdzNFLEVBQVNFLEVBQUssSUFBT0EsQ0FDN0IsQ0FDQSxTQUFTQyxHQUFlendFLEVBQWlCeE4sRUFBRyxDQUN2Q0EsR0FBSyxPQUFNQSxFQUFJc2tFLEdBQVEsQ0FBQyxHQUM1QixJQUFJd1osRUFBUSxFQUFHQyxFQUFPLEVBQUdHLEVBQU8xd0UsRUFBTyxJQUd2QyxHQUZLQSxJQUFTQSxFQUFPLElBQVFBLEdBQVEsRUFBRSxHQUFLLEtBQVNBLEVBQVEsR0FBSyxHQUFRdXdFLEVBQU8sRUFDdkVHLElBQVNBLEVBQU8sSUFBUUEsR0FBUSxFQUFFLEdBQUssS0FBU0EsRUFBUSxHQUFLLEtBQVFILEVBQU8sRUFBR0QsRUFBUSxHQUM3RkMsRUFBTS85RSxFQUFFLFlBQVksS0FBTTg5RSxFQUFRSSxFQUFPMXdFLElBQVMsSUFBTXN3RSxFQUFRLEVBQUUsTUFDakUsT0FBTSxJQUFJLE1BQU0sd0JBQTBCdHdFLENBQUksQ0FDcEQsQ0FJQSxTQUFTMndFLEdBQVUzd0UsRUFBK0IsQ0FDakQsSUFBSTh4QixFQUFrQixDQUFFLEVBQUcsQ0FBRSxFQUFFLEVBQUcsQ0FBRSxDQUFBLEVBQ3BDLE9BQUFBLEVBQUssRUFBRSxFQUFJOXhCLEVBQUssV0FBVyxDQUFDLEVBQzVCOHhCLEVBQUssRUFBRSxFQUFJOXhCLEVBQUssV0FBVyxDQUFDLEVBQzVCOHhCLEVBQUssRUFBRSxFQUFJOXhCLEVBQUssV0FBVyxDQUFDLEVBQzVCOHhCLEVBQUssRUFBRSxFQUFJOXhCLEVBQUssV0FBVyxDQUFDLEVBQ3JCOHhCLENBQ1IsQ0FDQSxTQUFTOCtDLEdBQVVqL0UsRUFBYWEsRUFBRyxDQUNsQyxPQUFLQSxJQUFHQSxFQUFJc2tFLEdBQVEsRUFBRSxHQUN0QnRrRSxFQUFFLFlBQVksRUFBR2IsRUFBRSxFQUFFLENBQUMsRUFDdEJhLEVBQUUsWUFBWSxFQUFHYixFQUFFLEVBQUUsQ0FBQyxFQUN0QmEsRUFBRSxZQUFZLEVBQUdiLEVBQUUsRUFBRSxDQUFDLEVBQ3RCYSxFQUFFLFlBQVksRUFBR2IsRUFBRSxFQUFFLENBQUMsRUFDZmEsQ0FDUixDQUdBLElBQUlxK0UsR0FBcUJGLEdBQ3JCRyxHQUFxQkYsR0F3QnpCLFNBQVNHLEdBQVcvd0UsRUFBb0IsQ0FDdkMsR0FBR0EsRUFBSyxPQUFTQSxFQUFLLEVBQUksRUFBRyxLQUFNLDRCQUNuQyxPQUFPQSxFQUFLLFdBQVcsRUFBRyxHQUFHLENBQzlCLENBQ0EsU0FBU2d4RSxHQUFXaHhFLEVBQU14TixFQUFHLENBQUUsT0FBUUEsR0FBS3NrRSxHQUFRLENBQUMsR0FBRyxZQUFZLEVBQUc5MkQsRUFBTSxHQUFHLENBQUksQ0FHcEYsU0FBU2l4RSxHQUFlanhFLEVBQW9CLENBQzNDLElBQUl3b0QsRUFBTSxDQUFBLEVBQ045MUQsRUFBSXNOLEVBQUssV0FBVyxDQUFDLEVBR3JCa3hFLEVBQWF4K0UsSUFBTSxFQUVuQjFCLEVBQVFnUCxFQUFLLFdBQVcsQ0FBQyxFQUN6Qm14RSxFQUFNbnhFLEVBQUssV0FBVyxFQUFHLEdBQUcsRUFDNUJveEUsRUFBS3B4RSxFQUFLLFdBQVcsQ0FBQyxFQUN0QnF4RSxFQUFLcnhFLEVBQUssV0FBVyxDQUFDLEVBQ3RCc3hFLEVBQUt0eEUsRUFBSyxXQUFXLENBQUMsRUFHMUIsT0FGQUEsRUFBSyxJQUVHa3hFLEVBQVUsQ0FDakIsSUFBSyxHQUFHMW9CLEVBQUksS0FBTyxFQUFHLE1BQ3RCLElBQUssR0FDSkEsRUFBSSxNQUFReDNELEVBQ1osSUFBSXVnRixFQUFNQyxHQUFPeGdGLENBQUssRUFFbEJ1Z0YsSUFBSy9vQixFQUFJLElBQU1pcEIsR0FBUUYsQ0FBRyxHQUM5QixNQUNELElBQUssR0FFSi9vQixFQUFJLElBQU1pcEIsR0FBUSxDQUFDTCxFQUFJQyxFQUFJQyxDQUFFLENBQUMsRUFDOUIsTUFDRCxJQUFLLEdBQUc5b0IsRUFBSSxNQUFReDNELEVBQU8sS0FDM0IsQ0FDRCxPQUFJbWdGLEdBQU8sSUFBRzNvQixFQUFJLEtBQU8yb0IsRUFBTSxFQUFJQSxFQUFNLE1BQVFBLEVBQU0sT0FFaEQzb0IsQ0FDUixDQUNBLFNBQVNrcEIsR0FBZXJ6QixFQUFPN3JELEVBQUcsQ0FFakMsR0FES0EsSUFBR0EsRUFBSXNrRSxHQUFRLENBQUMsR0FDakIsQ0FBQ3pZLEdBQVNBLEVBQU0sS0FBUSxPQUFBN3JELEVBQUUsWUFBWSxFQUFHLENBQUMsRUFBR0EsRUFBRSxZQUFZLEVBQUcsQ0FBQyxFQUFVQSxFQUN6RTZyRCxFQUFNLE9BQVMsTUFDbEI3ckQsRUFBRSxZQUFZLEVBQUcsQ0FBSSxFQUNyQkEsRUFBRSxZQUFZLEVBQUc2ckQsRUFBTSxLQUFLLEdBQ2xCQSxFQUFNLE9BQVMsTUFDekI3ckQsRUFBRSxZQUFZLEVBQUcsQ0FBSSxFQUNyQkEsRUFBRSxZQUFZLEVBQUc2ckQsRUFBTSxLQUFLLElBRTVCN3JELEVBQUUsWUFBWSxFQUFHLENBQUksRUFDckJBLEVBQUUsWUFBWSxFQUFHLENBQUMsR0FFbkIsSUFBSTIrRSxFQUFNOXlCLEVBQU0sTUFBUSxFQUl4QixHQUhJOHlCLEVBQU0sRUFBR0EsR0FBTyxNQUNYQSxFQUFNLElBQUdBLEdBQU8sT0FDekIzK0UsRUFBRSxZQUFZLEVBQUcyK0UsQ0FBRyxFQUNoQixDQUFDOXlCLEVBQU0sS0FBT0EsRUFBTSxPQUFTLEtBQ2hDN3JELEVBQUUsWUFBWSxFQUFHLENBQUMsRUFDbEJBLEVBQUUsWUFBWSxFQUFHLENBQUMsRUFDbEJBLEVBQUUsWUFBWSxFQUFHLENBQUMsTUFDWixDQUNOLElBQUltL0UsRUFBT3R6QixFQUFNLEtBQU8sU0FDcEIsT0FBT3N6QixHQUFPLFdBQVVBLEdBQU8sU0FBV0EsRUFBSSxTQUFTLEVBQUUsR0FBRyxNQUFNLEVBQUUsR0FDeEVuL0UsRUFBRSxZQUFZLEVBQUcsU0FBU20vRSxFQUFJLE1BQU0sRUFBRyxDQUFDLEVBQUcsRUFBRSxDQUFDLEVBQzlDbi9FLEVBQUUsWUFBWSxFQUFHLFNBQVNtL0UsRUFBSSxNQUFNLEVBQUcsQ0FBQyxFQUFHLEVBQUUsQ0FBQyxFQUM5Q24vRSxFQUFFLFlBQVksRUFBRyxTQUFTbS9FLEVBQUksTUFBTSxFQUFHLENBQUMsRUFBRyxFQUFFLENBQUMsRUFDOUNuL0UsRUFBRSxZQUFZLEVBQUcsR0FBSSxDQUNyQixDQUNELE9BQU9BLENBQ1IsQ0FHQSxTQUFTby9FLEdBQWdCNXhFLEVBQTBCLENBQ2xELElBQUl0TixFQUFJc04sRUFBSyxXQUFXLENBQUMsRUFDekJBLEVBQUssSUFDTCxJQUFJd29ELEVBQU0sQ0FDVCxNQUFPOTFELEVBQUksRUFDWCxRQUFTQSxFQUFJLEVBQ2IsV0FBWUEsRUFBSSxFQUNoQixXQUFZQSxFQUFJLEVBQ2hCLFNBQVVBLEVBQUksR0FDZCxRQUFTQSxFQUFJLEdBQ2IsVUFBV0EsRUFBSSxHQUNmLFFBQVNBLEVBQUksR0FDZixFQUNDLE9BQU84MUQsQ0FDUixDQUNBLFNBQVNxcEIsR0FBZ0JDLEVBQU10L0UsRUFBRyxDQUM1QkEsSUFBR0EsRUFBSXNrRSxHQUFRLENBQUMsR0FDckIsSUFBSWliLEdBQ0ZELEVBQUssT0FBUyxFQUFPLElBQ3JCQSxFQUFLLE9BQVMsRUFBTyxJQUNyQkEsRUFBSyxRQUFVLEdBQU8sSUFDdEJBLEVBQUssT0FBUyxHQUFPLElBQ3JCQSxFQUFLLFNBQVcsR0FBTyxJQUN2QkEsRUFBSyxPQUFTLElBQU8sR0FDdkIsT0FBQXQvRSxFQUFFLFlBQVksRUFBR3UvRSxDQUFLLEVBQ3RCdi9FLEVBQUUsWUFBWSxFQUFHLENBQUMsRUFDWEEsQ0FDUixDQUdBLFNBQVN3L0UsR0FBOEJ4L0UsRUFBR2k1RCxFQUF5QixDQUVsRSxJQUFJd21CLEVBQVUsQ0FBRSxFQUFHLFNBQVUsRUFBRyxlQUFnQixFQUFHLE1BQU8sR0FBSSxlQUMxRGxzQixFQUFldnpELEVBQUUsV0FBVyxDQUFDLEVBQ2pDLE9BQVF1ekQsRUFBQyxDQUNSLElBQUssR0FBWSxNQUFPLEdBQ3hCLElBQUssWUFBWSxJQUFLLFlBQVksT0FBT2tzQixFQUFRei9FLEVBQUUsV0FBVyxDQUFDLENBQUMsR0FBSyxFQUNyRSxDQUNELEdBQUl1ekQsRUFBSSxJQUFPLE1BQU0sSUFBSSxNQUFNLDBCQUE0QkEsRUFBRSxTQUFTLEVBQUUsQ0FBQyxFQUN6RSxPQUFBdnpELEVBQUUsR0FBSyxFQUNBQSxFQUFFLFdBQVcsRUFBR2k1RCxHQUFLLEVBQUksUUFBVSxRQUFRLENBQ25ELENBQ0EsU0FBU3ltQixHQUFrQzEvRSxFQUFHLENBQUUsT0FBT3cvRSxHQUE4QngvRSxFQUFHLENBQUMsQ0FBSSxDQUM3RixTQUFTMi9FLEdBQXFDMy9FLEVBQUcsQ0FBRSxPQUFPdy9FLEdBQThCeC9FLEVBQUcsQ0FBQyxDQUFJLENBTWhHLElBQUk0L0UsR0FBYyxFQUNkQyxHQUFjLEVBT2RDLEdBQWMsR0FDZEMsR0FBYyxHQUtkQyxHQUFjLEdBT2RDLEdBQWMsR0FDZEMsR0FBYyxHQU1kQyxHQUFjLEdBSWRDLEdBQW9CLEtBQ3BCQyxHQUFvQixLQUdwQkMsR0FBYyxHQUNkQyxHQUFjLEdBQ2RDLEdBQWMsQ0FBQ0YsR0FBV0MsRUFBTyxFQUdqQ0UsR0FBbUIsQ0FDZixFQUFhLENBQUUsRUFBRyxXQUFZLEVBQUdiLEVBQU8sRUFDeEMsRUFBYSxDQUFFLEVBQUcsV0FBWSxFQUFHVSxFQUFXLEVBQzVDLEVBQWEsQ0FBRSxFQUFHLHFCQUFzQixFQUFHQSxFQUFXLEVBQ3RELEVBQWEsQ0FBRSxFQUFHLFlBQWEsRUFBR1QsRUFBTyxFQUN6QyxFQUFhLENBQUUsRUFBRyxZQUFhLEVBQUdBLEVBQU8sRUFDekMsRUFBYSxDQUFFLEVBQUcsaUJBQWtCLEVBQUdBLEVBQU8sRUFDOUMsRUFBYSxDQUFFLEVBQUcsYUFBYyxFQUFHQSxFQUFPLEVBQzFDLEVBQWEsQ0FBRSxFQUFHLFlBQWEsRUFBR0EsRUFBTyxFQUN6QyxFQUFhLENBQUUsRUFBRyxjQUFlLEVBQUdBLEVBQU8sRUFDM0MsR0FBYSxDQUFFLEVBQUcsc0JBQXVCLEVBQUdBLEVBQU8sRUFDbkQsR0FBYSxDQUFFLEVBQUcsWUFBYSxFQUFHQyxFQUFTLEVBQzNDLEdBQWEsQ0FBRSxFQUFHLGVBQWdCLEVBQUdNLEVBQWdELEVBQ3JGLEdBQWEsQ0FBRSxFQUFHLGdCQUFpQixFQUFHQyxFQUE0QyxFQUNsRixHQUFhLENBQUUsRUFBRyxVQUFXLEVBQUdDLEVBQVcsRUFDM0MsR0FBYSxDQUFFLEVBQUcsVUFBVyxFQUFHQSxFQUFXLEVBQzNDLEdBQWEsQ0FBRSxFQUFHLGdCQUFpQixFQUFHUixFQUFTLEVBQy9DLEdBQWEsQ0FBRSxFQUFHLGlCQUFrQixFQUFHRCxFQUFPLEVBQzlDLEdBQWEsQ0FBRSxFQUFHLFlBQWEsRUFBR0MsRUFBUyxFQUMzQyxHQUFhLENBQUUsRUFBRyxvQkFBcUIsRUFBR0EsRUFBUyxFQUNuRCxHQUFhLENBQUUsRUFBRyxhQUFjLEVBQUdELEdBQU8sRUFBRyxTQUFXLEVBQ3hELEdBQWEsQ0FBRSxFQUFHLFNBQVUsRUFBR0ssRUFBUyxFQUN4QyxHQUFhLENBQUUsRUFBRyxjQUFlLEVBQUdJLEVBQVcsRUFDL0MsR0FBYSxDQUFFLEVBQUcsZ0JBQWlCLEVBQUdBLEVBQVcsRUFDakQsR0FBYSxDQUFFLEVBQUcsV0FBWSxFQUFHQSxFQUFXLEVBQzVDLEdBQWEsQ0FBRSxFQUFHLFVBQVcsRUFBR0EsRUFBVyxFQUMzQyxJQUFhLENBQUUsRUFFZixXQUFtQixDQUFFLEVBQUcsU0FBVSxFQUFHTixFQUFRLEVBQzdDLFdBQW1CLENBQUUsRUFBRyxXQUFZLEVBQUdBLEVBQVEsRUFDL0MsV0FBbUIsQ0FBRSxDQUM3QixFQUdJVSxHQUFlLENBQ1gsRUFBYSxDQUFFLEVBQUcsV0FBWSxFQUFHZCxFQUFPLEVBQ3hDLEVBQWEsQ0FBRSxFQUFHLFFBQVMsRUFBR1UsRUFBVyxFQUN6QyxFQUFhLENBQUUsRUFBRyxVQUFXLEVBQUdBLEVBQVcsRUFDM0MsRUFBYSxDQUFFLEVBQUcsU0FBVSxFQUFHQSxFQUFXLEVBQzFDLEVBQWEsQ0FBRSxFQUFHLFdBQVksRUFBR0EsRUFBVyxFQUM1QyxFQUFhLENBQUUsRUFBRyxXQUFZLEVBQUdBLEVBQVcsRUFDNUMsRUFBYSxDQUFFLEVBQUcsV0FBWSxFQUFHQSxFQUFXLEVBQzVDLEVBQWEsQ0FBRSxFQUFHLGFBQWMsRUFBR0EsRUFBVyxFQUM5QyxFQUFhLENBQUUsRUFBRyxZQUFhLEVBQUdBLEVBQVcsRUFDN0MsR0FBYSxDQUFFLEVBQUcsV0FBWSxFQUFHTCxFQUFhLEVBQzlDLEdBQWEsQ0FBRSxFQUFHLGNBQWUsRUFBR0EsRUFBYSxFQUNqRCxHQUFhLENBQUUsRUFBRyxjQUFlLEVBQUdBLEVBQWEsRUFDakQsR0FBYSxDQUFFLEVBQUcsZUFBZ0IsRUFBR0EsRUFBYSxFQUNsRCxHQUFhLENBQUUsRUFBRyxZQUFhLEVBQUdKLEVBQU8sRUFDekMsR0FBYSxDQUFFLEVBQUcsWUFBYSxFQUFHQSxFQUFPLEVBQ3pDLEdBQWEsQ0FBRSxFQUFHLFlBQWEsRUFBR0EsRUFBTyxFQUN6QyxHQUFhLENBQUUsRUFBRyxZQUFhLEVBQUdNLEVBQU8sRUFDekMsR0FBYSxDQUFFLEVBQUcsY0FBZSxFQUFHRyxFQUFXLEVBQy9DLEdBQWEsQ0FBRSxFQUFHLGNBQWUsRUFBR1QsRUFBTyxFQUMzQyxJQUFhLENBQUUsRUFFZixXQUFtQixDQUFFLEVBQUcsU0FBVSxFQUFHRyxFQUFRLEVBQzdDLFdBQW1CLENBQUUsRUFBRyxXQUFZLEVBQUdBLEVBQVEsRUFDL0MsV0FBbUIsQ0FBRSxDQUM3QixFQUdJVyxHQUFjLENBQ1YsRUFBZSxLQUNmLEVBQWUsS0FDZixFQUFlLEdBQ2YsRUFBZSxLQUNmLEdBQWUsS0FDZixHQUFlLEtBQ2YsR0FBZSxLQUNmLEdBQWUsS0FDZixHQUFlLEtBQ2YsR0FBZSxLQUNmLEdBQWUsS0FDZixHQUFlLEtBQ2YsR0FBZSxLQUNmLEdBQWUsS0FDZixHQUFlLEtBQ2YsR0FBZSxLQUNmLEdBQWUsS0FDZixHQUFlLEtBQ2YsR0FBZSxLQUNmLEdBQWUsS0FDZixHQUFlLEtBQ2YsR0FBZSxLQUNmLEdBQWUsS0FDZixHQUFlLEtBQ2YsR0FBZSxLQUNmLEdBQWUsS0FDZixHQUFlLEtBQ2YsR0FBZSxLQUNmLEdBQWUsS0FDZixHQUFlLEtBQ2YsSUFBZSxLQUNmLElBQWUsS0FDZixJQUFlLEtBQ2YsSUFBZSxLQUNmLElBQWUsS0FDZixJQUFlLEtBQ2YsSUFBZSxLQUNmLElBQWUsS0FDZixJQUFlLEtBQ2YsSUFBZSxLQUNmLElBQWUsS0FDZixJQUFlLEtBQ2YsSUFBZSxLQUNmLElBQWUsS0FDZixJQUFlLEtBQ2YsSUFBZSxLQUNmLElBQWUsS0FDZixJQUFlLEtBQ2YsSUFBZSxLQUNmLE1BQWUsSUFDdkIsRUFHSUMsR0FBaUIsQ0FDcEIsS0FDQSxRQUNBLGFBQ0EsV0FDQSxZQUNBLGlCQUNBLGVBQ0EsV0FDQSxTQUNBLFdBQ0EsY0FDQSxrQkFDQSxnQkFDQSxZQUNBLFVBQ0EsWUFDQSxlQUNBLFVBQ0EsVUFDRCxFQUVBLFNBQVNDLEdBQU81M0UsRUFBMkQsQ0FBRSxPQUFPQSxFQUFJLElBQUksU0FBUzh1QixFQUFHLENBQUUsTUFBTyxDQUFFQSxHQUFHLEdBQUksSUFBS0EsR0FBRyxFQUFHLElBQUlBLEVBQUUsR0FBRyxDQUFJLENBQUEsQ0FBSSxDQUl0SixJQUFJK29ELEdBQXdCRCxHQUFPLENBRWxDLEVBQ0EsU0FDQSxTQUNBLE1BQ0EsSUFDQSxTQUNBLFNBQ0EsTUFHQSxFQUNBLFNBQ0EsU0FDQSxNQUNBLElBQ0EsU0FDQSxTQUNBLE1BRUEsUUFDQSxNQUNBLElBQ0EsUUFDQSxRQUNBLE1BQ0EsU0FDQSxRQUNBLFNBQ0EsU0FDQSxTQUNBLFNBQ0EsUUFDQSxTQUNBLE1BQ0EsU0FFQSxJQUNBLFNBQ0EsU0FDQSxNQUNBLFFBQ0EsUUFDQSxNQUNBLElBQ0EsTUFDQSxTQUNBLFNBQ0EsU0FDQSxTQUNBLFNBQ0EsU0FDQSxTQUVBLFFBQ0EsUUFDQSxTQUNBLFNBQ0EsU0FDQSxTQUNBLFFBQ0EsUUFDQSxNQUNBLFFBQ0EsTUFDQSxRQUNBLFNBQ0EsU0FDQSxRQUNBLFFBR0EsU0FDQSxFQUNBLEVBQ0EsRUFDQSxFQUNBLEVBQ0EsRUFDQSxFQUNBLEVBQ0EsRUFDQSxFQUNBLEVBQ0EsRUFDQSxFQUNBLEVBQ0EsRUFDQSxFQUNBLENBQ0QsQ0FBQyxFQUNHN0IsR0FBc0I3TixHQUFJMlAsRUFBTyxFQUdqQzVGLEdBQU8sQ0FDSCxFQUFhLFNBQ2IsRUFBYSxVQUNiLEdBQWEsVUFDYixHQUFhLFFBQ2IsR0FBYSxTQUNiLEdBQWEsUUFDYixHQUFhLE9BQ2IsR0FBYSxnQkFDYixJQUFhLE9BQ3JCLEVBRUk2RixHQUFRLENBQ1gsU0FBaUIsRUFDakIsVUFBaUIsRUFDakIsVUFBaUIsR0FDakIsUUFBaUIsR0FDakIsU0FBaUIsR0FDakIsUUFBaUIsR0FDakIsT0FBaUIsR0FDakIsZ0JBQWlCLEdBQ2pCLFFBQWlCLEdBQ2xCLEVBTUlDLEdBQWdDLENBRW5DLDZFQUE4RSxZQUM5RSx1REFBd0QsWUFDeEQsMERBQTJELFlBQzNELHVEQUF3RCxZQUN4RCxnRkFBaUYsWUFHakYsNEVBQTZFLFNBQzdFLHFDQUFzQyxTQUN0QyxzQ0FBdUMsT0FHdkMsNkVBQThFLFNBQzlFLHNDQUF1QyxTQUd2QywwQ0FBMkMsU0FDM0Msc0NBQXVDLFNBQ3ZDLDBDQUEyQyxPQUMzQyxzQ0FBdUMsT0FHdkMsOEVBQStFLFVBQy9FLHVDQUF3QyxVQUd4QyxnRkFBaUYsT0FDakYseUNBQTBDLE9BRzFDLHlFQUEwRSxTQUMxRSxrQ0FBbUMsU0FHbkMsNkRBQThELFlBQzlELHNFQUF1RSxZQUN2RSx3RUFBeUUsV0FHekUsd0VBQXlFLE9BQ3pFLDZFQUE4RSxPQUc5RSwyRUFBNEUsV0FDNUUsb0NBQXFDLFdBQ3JDLGdEQUFpRCxtQkFDakQsc0NBQXVDLFNBR3ZDLGdGQUFpRixXQUNqRix5Q0FBMEMsV0FHMUMsc0NBQXVDLE9BQ3ZDLDZFQUE4RSxPQUc5RSxvRUFBcUUsT0FHckUsZ0RBQWlELE9BR2pELDJDQUE0QyxPQUc1Qyx3Q0FBeUMsT0FHekMscUNBQXNDLGFBQ3RDLDRFQUE2RSxhQUc3RSw4RUFBK0UsT0FHL0Usb0NBQXFDLE9BQ3JDLHdDQUF5QyxPQUd6Qyw0Q0FBNkMsT0FHN0MsdUNBQXdDLE9BQ3hDLDhFQUErRSxPQUcvRSx3Q0FBeUMsUUFDekMsK0VBQWdGLFFBR2hGLGdEQUFpRCxPQUNqRCw2Q0FBOEMsT0FDOUMsdUZBQXdGLE9BQ3hGLG9GQUFxRixPQUdyRixzQ0FBdUMsT0FDdkMsNkVBQThFLE9BRzlFLHFDQUFzQyxPQUN0QywyQ0FBNEMsT0FDNUMsdUNBQXdDLE9BQ3hDLGtGQUFtRixPQUNuRiw4RUFBK0UsT0FDL0UsNEVBQTZFLE9BRzdFLDRDQUE2QyxPQUM3QyxtRkFBb0YsT0FHcEYsa0NBQW1DLE9BQ25DLHVDQUF3QyxPQUN4QyxzQ0FBdUMsT0FDdkMsMkNBQTRDLE9BRzVDLHFDQUFzQyxPQUd0QyxpQ0FBa0MsT0FDbEMsd0VBQXlFLE9BR3pFLDBEQUEyRCxTQUczRCxrRUFBbUUsT0FHbkUsd0NBQXlDLE9BQ3pDLDZDQUE4QyxPQUc5Qyx1Q0FBd0MsTUFDeEMsZ0RBQWlELE9BR2pELGlEQUFrRCxPQUNsRCx1RkFBd0YsT0FHeEYsaURBQWtELE9BR2xELDJEQUE0RCxPQUc1RCxzQ0FBdUMsT0FHdkMsNERBQTZELFdBQzdELDBFQUEyRSxPQUMzRSw0RUFBNkUsT0FDN0UsMEVBQTJFLE9BQzNFLDRFQUE2RSxPQUM3RSwyRUFBNEUsT0FHNUUsMkRBQTRELE9BRTVELDJEQUE0RCxPQUM1RCwwREFBMkQsT0FHM0QsWUFBYSxPQUViLE1BQVMsSUFDVixFQUVJQyxHQUFVLENBQ1osVUFBVyxDQUNWLEtBQU0sNkVBQ04sS0FBTSx1REFDTixLQUFNLDBEQUNOLEtBQU0sdURBQ04sS0FBTSwrRUFDTixFQUNELEtBQU0sQ0FDTCxLQUFNLGdGQUNOLEtBQU0sd0NBQ04sRUFDRCxTQUFVLENBQ1QsS0FBTSwyRUFDTixLQUFNLG1DQUNOLEVBQ0QsT0FBUSxDQUNQLEtBQU0sNEVBQ04sS0FBTSxvQ0FDTixFQUNELE9BQVEsQ0FDUCxLQUFNLDZFQUNOLEtBQU0scUNBQ04sRUFDRCxRQUFTLENBQ1IsS0FBTSw4RUFDTixLQUFNLHNDQUNOLEVBQ0QsT0FBUSxDQUNQLEtBQU0sMENBQ04sS0FBTSxxQ0FDTixFQUNELFNBQVUsQ0FDVCxLQUFNLGdGQUNOLEtBQU0sd0NBQ04sRUFDRCxPQUFRLENBQ1AsS0FBTSx5RUFDTixLQUFNLGlDQUNOLENBQ0gsRUFFQSxTQUFTQyxJQUFpQixDQUN6QixNQUFRLENBQ1AsVUFBVSxDQUFBLEVBQUksT0FBTyxHQUFJLE9BQU8sQ0FBQSxFQUFJLFFBQVEsR0FBSSxPQUFPLENBQUUsRUFDekQsS0FBSyxDQUFBLEVBQUksS0FBSyxHQUFJLFNBQVMsQ0FBQSxFQUFJLGlCQUFpQixHQUFJLE1BQU0sQ0FBRSxFQUM1RCxVQUFVLENBQUEsRUFBSSxTQUFTLEdBQUksVUFBVSxDQUFBLEVBQUksT0FBTyxHQUFJLE9BQU8sQ0FBRSxFQUM3RCxXQUFXLENBQUEsRUFBSSxJQUFLLEdBQUksU0FBVSxDQUFBLEVBQUksU0FBVSxHQUFJLE9BQU8sQ0FBRSxFQUM3RCxLQUFLLENBQUUsRUFBRSxNQUFPLEdBQ2xCLENBRUEsU0FBU0MsR0FBUzN6RSxFQUFrQixDQUNuQyxJQUFJclgsRUFBSytxRixLQUNULEdBQUcsQ0FBQzF6RSxHQUFRLENBQUNBLEVBQUssTUFBTyxPQUFPclgsRUFDaEMsSUFBSWlyRixFQUFRLENBQUEsRUFZWixJQVhDNXpFLEVBQUssTUFBTXdsRSxFQUFRLEdBQUcsQ0FBQSxHQUFJLFFBQVEsU0FBU2o3QyxFQUFHLENBQzlDLElBQUlrWSxFQUFJa2pDLEdBQVlwN0MsQ0FBQyxFQUNyQixPQUFPa1ksRUFBRSxDQUFDLEVBQUUsUUFBUWdqQyxHQUFRLEdBQUcsRUFBQyxDQUMvQixJQUFLLFFBQVMsTUFDZCxJQUFLLFNBQVU5OEUsRUFBRyxNQUFRODVDLEVBQUUsU0FBV0EsRUFBRSxDQUFDLEVBQUUsTUFBTSxTQUFTLEdBQUcsQ0FBQyxHQUFHLEVBQUUsR0FBRyxDQUFDLENBQUcsRUFBRSxNQUM3RSxJQUFLLFdBQVlteEMsRUFBTW54QyxFQUFFLFNBQVMsRUFBSUEsRUFBRSxZQUFhLE1BQ3JELElBQUssWUFDRDk1QyxFQUFHNnFGLEdBQVEvd0MsRUFBRSxXQUFXLENBQUMsSUFBTSxRQUFXOTVDLEVBQUc2cUYsR0FBUS93QyxFQUFFLFdBQVcsQ0FBQyxFQUFFLEtBQUtBLEVBQUUsUUFBUSxFQUN2RixLQUNELENBQ0gsQ0FBRSxFQUNFOTVDLEVBQUcsUUFBVWdnRixHQUFNLEdBQUksTUFBTSxJQUFJLE1BQU0sc0JBQXdCaGdGLEVBQUcsS0FBSyxFQUMxRSxPQUFBQSxFQUFHLFVBQVlBLEVBQUcsV0FBVyxPQUFTLEVBQUlBLEVBQUcsV0FBVyxDQUFDLEVBQUksR0FDN0RBLEVBQUcsSUFBTUEsRUFBRyxLQUFLLE9BQVMsRUFBSUEsRUFBRyxLQUFLLENBQUMsRUFBSSxHQUMzQ0EsRUFBRyxNQUFRQSxFQUFHLE9BQU8sT0FBUyxFQUFJQSxFQUFHLE9BQU8sQ0FBQyxFQUFJLEdBQ2pEQSxFQUFHLFNBQVdpckYsRUFDZCxPQUFPanJGLEVBQUcsV0FDSEEsQ0FDUixDQUVBLFNBQVNrckYsR0FBU2xyRixFQUFJRCxFQUFpQixDQUN0QyxJQUFJb3JGLEVBQXNDcFIsR0FBVThRLEVBQU8sRUFFdkRoaEYsRUFBc0IsQ0FBRSxFQUFFOGIsRUFDOUI5YixFQUFFQSxFQUFFLE1BQU0sRUFBSzR5RSxHQUNmNXlFLEVBQUVBLEVBQUUsTUFBTSxFQUFJNjFFLEdBQVUsUUFBUyxLQUFNLENBQ3RDLE1BQVNNLEdBQU0sR0FDZixZQUFhQSxHQUFNLElBQ25CLFlBQWFBLEdBQU0sR0FDckIsQ0FBRSxFQUVEbjJFLEVBQUlBLEVBQUUsT0FBTyxDQUNaLENBQUMsTUFBTyxpQkFBaUIsRUFDekIsQ0FBQyxNQUFPLHlEQUF5RCxFQUNqRSxDQUFDLE1BQU8sMERBQTBELEVBQ2xFLENBQUMsT0FBUSwwREFBMEQsRUFFbkUsQ0FBQyxNQUFPLFdBQVcsRUFDbkIsQ0FBQyxNQUFPLFdBQVcsRUFDbkIsQ0FBQyxNQUFPLFdBQVcsRUFDbkIsQ0FBQyxNQUFPLGFBQWEsRUFDckIsQ0FBQyxNQUFPLGFBQWEsRUFDckIsQ0FBQyxNQUFPLFlBQVksRUFBRyxDQUFDLE9BQVEsWUFBWSxFQUM1QyxDQUFDLE1BQU8sWUFBWSxFQUFHLENBQUMsT0FBUSxZQUFZLEVBQzVDLENBQUMsTUFBTyxpQkFBaUIsRUFDekIsQ0FBQyxPQUFRLDBEQUEwRCxDQUNyRSxFQUFHLElBQUksU0FBUyszQixFQUFHLENBQ2pCLE9BQU84OUMsR0FBVSxVQUFXLEtBQU0sQ0FBQyxVQUFZOTlDLEVBQUUsQ0FBQyxFQUFHLFlBQWVBLEVBQUUsQ0FBQyxDQUFDLENBQUMsQ0FDekUsQ0FBQSxDQUFDLEVBR0YsSUFBSXdwRCxFQUFLLFNBQVN0b0IsRUFBRyxDQUNqQjlpRSxFQUFHOGlFLENBQUMsR0FBSzlpRSxFQUFHOGlFLENBQUMsRUFBRSxPQUFTLElBQzFCbjlDLEVBQUkzbEIsRUFBRzhpRSxDQUFDLEVBQUUsQ0FBQyxFQUNYajVELEVBQUVBLEVBQUUsTUFBTSxFQUFLNjFFLEdBQVUsV0FBWSxLQUFNLENBQzFDLFVBQWEvNUQsRUFBRSxDQUFDLEdBQUssSUFBTSxHQUFHLEtBQU9BLEVBQ3JDLFlBQWVtbEUsR0FBUWhvQixDQUFDLEVBQUUvaUUsRUFBSyxRQUFRLEdBQUsrcUYsR0FBUWhvQixDQUFDLEVBQUUsSUFDdkQsQ0FBQSxFQUVKLEVBR0t1b0IsRUFBSyxTQUFTdm9CLEVBQUcsRUFDbkI5aUUsRUFBRzhpRSxDQUFDLEdBQUcsQ0FBRSxHQUFFLFFBQVEsU0FBU245QyxFQUFHLENBQy9COWIsRUFBRUEsRUFBRSxNQUFNLEVBQUs2MUUsR0FBVSxXQUFZLEtBQU0sQ0FDMUMsVUFBYS81RCxFQUFFLENBQUMsR0FBSyxJQUFNLEdBQUcsS0FBT0EsRUFDckMsWUFBZW1sRSxHQUFRaG9CLENBQUMsRUFBRS9pRSxFQUFLLFFBQVEsR0FBSytxRixHQUFRaG9CLENBQUMsRUFBRSxJQUN2RCxDQUFBLENBQ0osQ0FBRyxDQUNILEVBR0t3b0IsRUFBSyxTQUFTbmpGLEVBQUcsRUFDbkJuSSxFQUFHbUksQ0FBQyxHQUFHLENBQUUsR0FBRSxRQUFRLFNBQVN3ZCxFQUFHLENBQy9COWIsRUFBRUEsRUFBRSxNQUFNLEVBQUs2MUUsR0FBVSxXQUFZLEtBQU0sQ0FDMUMsVUFBYS81RCxFQUFFLENBQUMsR0FBSyxJQUFNLEdBQUcsS0FBT0EsRUFDckMsWUFBZXdsRSxFQUFRaGpGLENBQUMsRUFBRSxDQUFDLENBQzNCLENBQUEsQ0FDSixDQUFHLENBQ0gsRUFFQyxPQUFBaWpGLEVBQUcsV0FBVyxFQUNkQyxFQUFHLFFBQVEsRUFDWEEsRUFBRyxRQUFRLEVBQ1hDLEVBQUcsUUFBUSxFQUNYLENBQUMsT0FBUSxRQUFRLEVBQUUsUUFBUUYsQ0FBRSxFQUM3QixDQUFDLFlBQWEsV0FBWSxXQUFXLEVBQUUsUUFBUUUsQ0FBRSxFQUNqREEsRUFBRyxLQUFLLEVBQ1JBLEVBQUcsVUFBVSxFQUNiQSxFQUFHLGtCQUFrQixFQUNyQkEsRUFBRyxVQUFVLEVBQ2JELEVBQUcsVUFBVSxFQUNiQyxFQUFHLFFBQVEsRUFDUnpoRixFQUFFLE9BQU8sSUFBSUEsRUFBRUEsRUFBRSxNQUFNLEVBQUssV0FBYUEsRUFBRSxDQUFDLEVBQUVBLEVBQUUsQ0FBQyxFQUFFLFFBQVEsS0FBSyxHQUFHLEdBQy9EQSxFQUFFLEtBQUssRUFBRSxDQUNqQixDQUVBLElBQUkwaEYsR0FBUSxDQUNYLEdBQUkscUZBQ0osTUFBTyxxRkFDUCxNQUFPLGdGQUNQLElBQUssaUZBQ0wsTUFBTyx1RkFDUCxNQUFPLDBGQUNQLE1BQU8sbUZBQ1AsS0FBTSxnRkFDTixNQUFPLHFGQUNQLEtBQU0sK0VBQ04sV0FBWSx3RkFDWixVQUFXLDBGQUNYLFdBQVksd0ZBQ1osSUFBSyxvRkFDTCxJQUFLLDZFQUNMLE1BQU8sNEVBQ1AsTUFBTyw0RUFDUCxRQUFTLGlFQUNULEdBQUksaUZBQ0osR0FBSSxDQUNILGdGQUNBLG1FQUNBLEVBQ0QsR0FBSSxrRkFDSixHQUFJLHNFQUNKLElBQUssNEVBQ0wsS0FBTSw4RUFDTixPQUFRLG9GQUNSLE1BQU8sNEVBQ1AsT0FBUSxtRUFDUixJQUFLLG1FQUNOLEVBSUEsU0FBU0MsR0FBYzVmLEVBQTRCLENBQ2xELElBQUkzaUUsRUFBSTJpRSxFQUFLLFlBQVksR0FBRyxFQUM1QixPQUFPQSxFQUFLLE1BQU0sRUFBRTNpRSxFQUFFLENBQUMsRUFBSSxTQUFXMmlFLEVBQUssTUFBTTNpRSxFQUFFLENBQUMsRUFBSSxPQUN6RCxDQUVBLFNBQVN3aUYsR0FBV3AwRSxFQUFrQnEwRSxFQUE0QixDQUNqRSxJQUFJQyxFQUFPLENBQUMsTUFBTSxDQUFBLENBQUUsRUFDcEIsR0FBSSxDQUFDdDBFLEVBQU0sT0FBT3MwRSxFQUNkRCxFQUFnQixPQUFPLENBQUMsSUFBTSxNQUNqQ0EsRUFBa0IsSUFBSUEsR0FFdkIsSUFBSWw0QyxFQUFPLENBQUEsRUFFWCxPQUFDbjhCLEVBQUssTUFBTXdsRSxFQUFRLEdBQUcsQ0FBQSxHQUFJLFFBQVEsU0FBU2o3QyxFQUFHLENBQzlDLElBQUlrWSxFQUFJa2pDLEdBQVlwN0MsQ0FBQyxFQUVyQixHQUFJa1ksRUFBRSxDQUFDLElBQU0sZ0JBQWlCLENBQzdCLElBQUk4eEMsRUFBTSxDQUFBLEVBQUlBLEVBQUksS0FBTzl4QyxFQUFFLEtBQU04eEMsRUFBSSxPQUFTOXhDLEVBQUUsT0FBUTh4QyxFQUFJLEdBQUs5eEMsRUFBRSxHQUFPQSxFQUFFLGFBQVk4eEMsRUFBSSxXQUFhOXhDLEVBQUUsWUFDM0csSUFBSSt4QyxFQUFnQi94QyxFQUFFLGFBQWUsV0FBYUEsRUFBRSxPQUFTeWlDLEdBQWF6aUMsRUFBRSxPQUFRNHhDLENBQWUsRUFDbkdDLEVBQUtFLENBQWEsRUFBSUQsRUFDdEJwNEMsRUFBS3NHLEVBQUUsRUFBRSxFQUFJOHhDLENBQ2IsQ0FDSCxDQUFFLEVBQ0RELEVBQUssS0FBSyxFQUFJbjRDLEVBQ1BtNEMsQ0FDUixDQUlBLFNBQVNHLEdBQVdILEVBQWlCLENBQ3BDLElBQUk5aEYsRUFBSSxDQUFDNHlFLEdBQVlpRCxHQUFVLGdCQUFpQixLQUFNLENBRXJELE1BQVNNLEdBQU0sSUFDZixDQUFBLENBQUMsRUFDRixPQUFBdjRFLEdBQUtra0YsRUFBSyxLQUFLLENBQUMsRUFBRSxRQUFRLFNBQVNJLEVBQUssQ0FDdkNsaUYsRUFBRUEsRUFBRSxNQUFNLEVBQUs2MUUsR0FBVSxlQUFnQixLQUFNaU0sRUFBSyxLQUFLLEVBQUVJLENBQUcsQ0FBQyxDQUNqRSxDQUFFLEVBQ0VsaUYsRUFBRSxPQUFPLElBQUlBLEVBQUVBLEVBQUUsTUFBTSxFQUFLLG1CQUFxQkEsRUFBRSxDQUFDLEVBQUVBLEVBQUUsQ0FBQyxFQUFFLFFBQVEsS0FBSyxHQUFHLEdBQ3ZFQSxFQUFFLEtBQUssRUFBRSxDQUNqQixDQUVBLFNBQVNtaUYsR0FBU0wsRUFBTU0sRUFBZ0JyaUYsRUFBRzNFLEVBQU1pbkYsRUFBUUMsRUFBbUMsQ0FJM0YsR0FISUQsSUFBUUEsRUFBUyxJQUNqQlAsRUFBSyxLQUFLLElBQUdBLEVBQUssS0FBSyxFQUFJLElBQzNCQSxFQUFLLE1BQU0sSUFBR0EsRUFBSyxNQUFNLEVBQUksR0FDOUJNLEVBQU0sRUFBRyxJQUFJQSxFQUFNTixFQUFLLE1BQU0sRUFBR0EsRUFBSyxLQUFLLEVBQUUsTUFBUU0sQ0FBRyxFQUFHLEVBQUVBLEVBQUksQ0FPcEUsR0FOQU4sRUFBSyxNQUFNLEVBQUlNLEVBQU0sRUFDckJDLEVBQU8sR0FBSyxNQUFRRCxFQUNwQkMsRUFBTyxLQUFPam5GLEVBQ2RpbkYsRUFBTyxPQUFTdGlGLEVBQ2J1aUYsRUFBWUQsRUFBTyxXQUFhQyxFQUMzQixDQUFDWixHQUFLLE1BQU9BLEdBQUssTUFBT0EsR0FBSyxLQUFLLEVBQUUsUUFBUVcsRUFBTyxJQUFJLEVBQUksS0FBSUEsRUFBTyxXQUFhLFlBQ3pGUCxFQUFLLEtBQUssRUFBRU8sRUFBTyxFQUFFLEVBQUcsTUFBTSxJQUFJLE1BQU0sc0JBQXdCRCxDQUFHLEVBQ3RFLE9BQUFOLEVBQUssS0FBSyxFQUFFTyxFQUFPLEVBQUUsRUFBSUEsRUFDekJQLEdBQU0sSUFBTU8sRUFBTyxRQUFRLFFBQVEsS0FBSyxHQUFHLENBQUMsRUFBSUEsRUFDekNELENBQ1IsQ0FHQSxJQUFJRyxHQUFTLGlEQUNiLFNBQVNDLEdBQWV0aUYsRUFBR2hLLEVBQU0sQ0FJaEMsUUFISTRoQyxFQUFNbStDLEdBQWUvMUUsQ0FBQyxFQUN0QnVpRixFQUNBQyxFQUNHRCxFQUFLdk0sR0FBVSxLQUFLcCtDLENBQUcsR0FBSSxPQUFPMnFELEVBQUcsQ0FBQyxFQUFDLENBQzdDLElBQUssV0FBWSxNQUNqQixJQUFLLGFBRUosR0FEQUMsRUFBUXZQLEdBQVlzUCxFQUFHLENBQUMsRUFBRyxFQUFLLEVBQzdCQyxFQUFNLE1BQVEsS0FBT0EsRUFBTSxPQUFTSCxHQUFRLE1BQU0sSUFBSSxNQUFNLHdDQUF3QyxFQUN2RyxNQUNELElBQUssa0JBQ0wsSUFBSyxZQUNMLElBQUssdUJBQ0wsSUFBSyxpQkFDSixNQUFNLElBQUksTUFBTSw0QkFBNEIsRUFDN0MsUUFBUyxHQUFHcnNGLEdBQVFBLEVBQUssSUFBSyxNQUFNdXNGLENBQ3BDLENBQ0YsQ0FFQSxTQUFTRSxHQUFlQyxFQUErQyxDQUN0RSxJQUFJNWlGLEVBQUksQ0FBQzR5RSxFQUFVLEVBQ25CNXlFLEVBQUUsS0FBSztBQUFBLENBQWtILEVBQ3pIQSxFQUFFLEtBQUs7QUFBQSxDQUErSSxFQUN0SixRQUFRaEUsRUFBSSxFQUFHQSxFQUFJNG1GLEVBQVMsT0FBUSxFQUFFNW1GLEVBQUdnRSxFQUFFLEtBQUssOENBQWdENGlGLEVBQVM1bUYsQ0FBQyxFQUFFLENBQUMsRUFBSSwwQkFBNEI0bUYsRUFBUzVtRixDQUFDLEVBQUUsQ0FBQyxFQUFJO0FBQUEsQ0FBTyxFQUNySyxPQUFBZ0UsRUFBRSxLQUFLLHNCQUFzQixFQUN0QkEsRUFBRSxLQUFLLEVBQUUsQ0FDakIsQ0FHQSxTQUFTNmlGLEdBQWU5Z0IsRUFBaUJwbEUsRUFBZ0JtbEQsRUFBaUIsQ0FDekUsTUFBTyxDQUNOLGlDQUFtQ2lnQixFQUFPO0FBQUEsRUFDMUMsOEVBQWdGamdCLEdBQU8sT0FBUyxJQUFNbmxELEVBQU07QUFBQSxFQUM1RztBQUFBLENBQ0YsRUFBRyxLQUFLLEVBQUUsQ0FDVixDQUNBLFNBQVNtbUYsR0FBYy83RSxFQUFpQmc3RCxFQUFpQixDQUN4RCxNQUFPLENBQ04saUNBQW1DaDdELEVBQU87QUFBQSxFQUMxQyxpR0FBbUdnN0QsRUFBTztBQUFBLEVBQzFHO0FBQUEsQ0FDRixFQUFHLEtBQUssRUFBRSxDQUNWLENBQ0EsU0FBU2doQixHQUFVQyxFQUFLLENBQ3ZCLElBQUloakYsRUFBSSxDQUFDNHlFLEVBQVUsRUFDbkI1eUUsRUFBRSxLQUFLO0FBQUEsQ0FBcUUsRUFDNUUsUUFBUWhFLEVBQUksRUFBR0EsR0FBS2duRixFQUFJLE9BQVEsRUFBRWhuRixFQUNqQ2dFLEVBQUUsS0FBSzZpRixHQUFlRyxFQUFJaG5GLENBQUMsRUFBRSxDQUFDLEVBQUdnbkYsRUFBSWhuRixDQUFDLEVBQUUsQ0FBQyxDQUFDLENBQUMsRUFDM0NnRSxFQUFFLEtBQUs4aUYsR0FBYyxHQUFHRSxFQUFJaG5GLENBQUMsRUFBRSxDQUFDLENBQUMsQ0FBQyxFQUVuQyxPQUFBZ0UsRUFBRSxLQUFLNmlGLEdBQWUsR0FBRyxXQUFZLEtBQUssQ0FBQyxFQUMzQzdpRixFQUFFLEtBQUssWUFBWSxFQUNaQSxFQUFFLEtBQUssRUFBRSxDQUNqQixDQUVBLFNBQVNpakYsSUFBMEQsQ0FDbEUsTUFBTyxzU0FBNlN6dkIsR0FBSyxRQUFVLHdEQUNwVSxDQUlBLElBQUkwdkIsR0FBdUMsQ0FDMUMsQ0FBQyxjQUFlLFVBQVUsRUFDMUIsQ0FBQyxtQkFBb0IsZUFBZSxFQUNwQyxDQUFDLGNBQWUsVUFBVSxFQUMxQixDQUFDLG9CQUFxQixZQUFZLEVBQ2xDLENBQUMsaUJBQWtCLGFBQWEsRUFDaEMsQ0FBQyxjQUFlLFdBQVcsRUFDM0IsQ0FBQyxhQUFjLFNBQVMsRUFDeEIsQ0FBQyxhQUFjLFFBQVEsRUFDdkIsQ0FBQyxpQkFBa0IsVUFBVSxFQUM3QixDQUFDLGdCQUFpQixZQUFZLEVBQzlCLENBQUMsY0FBZSxVQUFVLEVBQzFCLENBQUMsYUFBYyxTQUFTLEVBQ3hCLENBQUMsV0FBWSxPQUFPLEVBQ3BCLENBQUMsa0JBQW1CLGNBQWUsTUFBTSxFQUN6QyxDQUFDLG1CQUFvQixlQUFnQixNQUFNLENBQzVDLEVBRUlDLEdBQW1ELFVBQVcsQ0FFakUsUUFESWhrRixFQUFJLElBQUksTUFBTStqRixHQUFXLE1BQU0sRUFDM0JsbkYsRUFBSSxFQUFHQSxFQUFJa25GLEdBQVcsT0FBUSxFQUFFbG5GLEVBQUcsQ0FDMUMsSUFBSStELEVBQUltakYsR0FBV2xuRixDQUFDLEVBQ2hCbzNELEVBQUksTUFBT3J6RCxFQUFFLENBQUMsRUFBRSxNQUFNLEVBQUVBLEVBQUUsQ0FBQyxFQUFFLFFBQVEsR0FBRyxDQUFDLEVBQUcsS0FBTUEsRUFBRSxDQUFDLEVBQUUsTUFBTUEsRUFBRSxDQUFDLEVBQUUsUUFBUSxHQUFHLEVBQUUsQ0FBQyxFQUNwRlosRUFBRW5ELENBQUMsRUFBSSxJQUFJLE9BQU8sSUFBTW8zRCxFQUFJLHVCQUEwQkEsRUFBSSxHQUFHLENBQzdELENBQ0QsT0FBT2owRCxDQUNSLElBRUEsU0FBU2lrRixHQUFpQjUxRSxFQUFNLENBQy9CLElBQUl6UyxFQUFJLENBQUEsRUFDUnlTLEVBQU93bkUsR0FBU3huRSxDQUFJLEVBRXBCLFFBQVF4UixFQUFJLEVBQUdBLEVBQUlrbkYsR0FBVyxPQUFRLEVBQUVsbkYsRUFBRyxDQUMxQyxJQUFJK0QsRUFBSW1qRixHQUFXbG5GLENBQUMsRUFBR3FuRixFQUFNNzFFLEVBQUssTUFBTTIxRSxHQUFpQm5uRixDQUFDLENBQUMsRUFDeERxbkYsR0FBTyxNQUFRQSxFQUFJLE9BQVMsSUFBR3RvRixFQUFFZ0YsRUFBRSxDQUFDLENBQUMsRUFBSTR6RSxHQUFZMFAsRUFBSSxDQUFDLENBQUMsR0FDM0R0akYsRUFBRSxDQUFDLElBQU0sUUFBVWhGLEVBQUVnRixFQUFFLENBQUMsQ0FBQyxJQUFHaEYsRUFBRWdGLEVBQUUsQ0FBQyxDQUFDLEVBQUlneEUsR0FBVWgyRSxFQUFFZ0YsRUFBRSxDQUFDLENBQUMsQ0FBQyxFQUMxRCxDQUVELE9BQU9oRixDQUNSLENBRUEsU0FBU3VvRixHQUFRdmpGLEVBQUdxekQsRUFBR2p2QyxFQUFHbmtCLEVBQUdqRixFQUFHLENBQzVCQSxFQUFFZ0YsQ0FBQyxHQUFLLE1BQVFxekQsR0FBSyxNQUFRQSxJQUFNLEtBQ3RDcjRELEVBQUVnRixDQUFDLEVBQUlxekQsRUFDUEEsRUFBSTRnQixHQUFVNWdCLENBQUMsRUFDZnB6RCxFQUFFQSxFQUFFLE1BQU0sRUFBS21rQixFQUFJMHhELEdBQVU5MUUsRUFBRXF6RCxFQUFFanZDLENBQUMsRUFBSXd4RCxHQUFTNTFFLEVBQUVxekQsQ0FBQyxFQUNuRCxDQUVBLFNBQVNtd0IsR0FBaUJ4bkYsRUFBSXdxRSxFQUFPLENBQ3BDLElBQUlyd0UsRUFBT3F3RSxHQUFTLEdBQ2hCdm1FLEVBQUksQ0FBQzR5RSxHQUFZaUQsR0FBVSxvQkFBcUIsS0FBTSxDQUV6RCxXQUFZTSxHQUFNLFdBQ2xCLFdBQVlBLEdBQU0sR0FDbEIsZ0JBQWlCQSxHQUFNLFFBQ3ZCLGlCQUFrQkEsR0FBTSxTQUN4QixZQUFhQSxHQUFNLEdBQ3JCLENBQUUsQ0FBQyxFQUFHcDdFLEVBQUksR0FDVCxHQUFHLENBQUNnQixHQUFNLENBQUM3RixFQUFLLE1BQU8sT0FBTzhKLEVBQUUsS0FBSyxFQUFFLEVBRXBDakUsSUFDQ0EsRUFBRyxhQUFlLE1BQU11bkYsR0FBUSxrQkFBbUIsT0FBT3ZuRixFQUFHLGFBQWdCLFNBQVdBLEVBQUcsWUFBYys1RSxHQUFhLzVFLEVBQUcsWUFBYTdGLEVBQUssR0FBRyxFQUFHLENBQUMsV0FBVyxnQkFBZ0IsRUFBRzhKLEVBQUdqRixDQUFDLEVBQ3BMZ0IsRUFBRyxjQUFnQixNQUFNdW5GLEdBQVEsbUJBQW9CLE9BQU92bkYsRUFBRyxjQUFpQixTQUFXQSxFQUFHLGFBQWUrNUUsR0FBYS81RSxFQUFHLGFBQWM3RixFQUFLLEdBQUcsRUFBRyxDQUFDLFdBQVcsZ0JBQWdCLEVBQUc4SixFQUFHakYsQ0FBQyxHQUc3TCxRQUFRLEVBQUksRUFBRyxHQUFLbW9GLEdBQVcsT0FBUSxFQUFFLEVBQUcsQ0FDM0MsSUFBSW5qRixFQUFJbWpGLEdBQVcsQ0FBQyxFQUNoQnBuRSxFQUFJNWxCLEVBQUssT0FBU0EsRUFBSyxNQUFNNkosRUFBRSxDQUFDLENBQUMsR0FBSyxLQUFPN0osRUFBSyxNQUFNNkosRUFBRSxDQUFDLENBQUMsRUFBSWhFLEVBQUtBLEVBQUdnRSxFQUFFLENBQUMsQ0FBQyxFQUFJLEtBQ2pGK2IsSUFBTSxHQUFNQSxFQUFJLElBQ1hBLElBQU0sR0FBT0EsRUFBSSxJQUNqQixPQUFPQSxHQUFLLFdBQVVBLEVBQUksT0FBT0EsQ0FBQyxHQUN2Q0EsR0FBSyxNQUFNd25FLEdBQVF2akYsRUFBRSxDQUFDLEVBQUcrYixFQUFHLEtBQU05YixFQUFHakYsQ0FBQyxDQUN6QyxDQUNELE9BQUdpRixFQUFFLE9BQU8sSUFBSUEsRUFBRUEsRUFBRSxNQUFNLEVBQUssdUJBQXlCQSxFQUFFLENBQUMsRUFBRUEsRUFBRSxDQUFDLEVBQUUsUUFBUSxLQUFLLEdBQUcsR0FDM0VBLEVBQUUsS0FBSyxFQUFFLENBQ2pCLENBR0EsSUFBSXdqRixHQUFzQyxDQUN6QyxDQUFDLGNBQWUsY0FBZSxRQUFRLEVBQ3ZDLENBQUMsYUFBYyxhQUFjLFFBQVEsRUFDckMsQ0FBQyxVQUFXLFVBQVcsUUFBUSxFQUMvQixDQUFDLGNBQWUsY0FBZSxRQUFRLEVBQ3ZDLENBQUMsVUFBVyxVQUFXLFFBQVEsRUFDL0IsQ0FBQyxvQkFBcUIsb0JBQXFCLE1BQU0sRUFDakQsQ0FBQyxZQUFhLFlBQWEsTUFBTSxFQUNqQyxDQUFDLGdCQUFpQixnQkFBaUIsTUFBTSxFQUN6QyxDQUFDLFlBQWEsWUFBYSxNQUFNLEVBQ2pDLENBQUMsZUFBZ0IsZUFBZ0IsS0FBSyxFQUN0QyxDQUFDLGdCQUFpQixnQkFBaUIsS0FBSyxDQUN6QyxFQUVJQyxHQUFtQixDQUN0QixhQUFlLGFBQ2YsY0FBZSxlQUNmLGNBQWUsWUFDaEIsRUFDQSxTQUFTQyxHQUFpQkMsRUFBaUNDLEVBQUsvMkUsRUFBTzNXLEVBQU0sQ0FDNUUsSUFBSTRsQixFQUFJLENBQUEsRUFDUixHQUFHLE9BQU82bkUsR0FBTSxTQUFVN25FLEVBQUkyNUQsR0FBWWtPLEVBQUl6dEYsQ0FBSSxNQUM3QyxTQUFRbzlELEVBQUksRUFBR0EsRUFBSXF3QixFQUFHLE9BQVEsRUFBRXJ3QixFQUFHeDNDLEVBQUlBLEVBQUUsT0FBTzZuRSxFQUFHcndCLENBQUMsRUFBRSxJQUFJLFNBQVN1d0IsRUFBSSxDQUFFLE1BQU8sQ0FBQyxFQUFFQSxDQUFFLENBQUksQ0FBQSxDQUFDLEVBQy9GLElBQUlDLEVBQVMsT0FBT0YsR0FBTyxTQUFZbk8sR0FBWW1PLEVBQUsxdEYsQ0FBSSxFQUFFLElBQUksU0FBVTZoQyxFQUFHLENBQUUsT0FBT0EsRUFBRSxDQUFFLENBQUUsRUFBSTZyRCxFQUM5RjNuQyxFQUFNLEVBQUdwa0IsRUFBTSxFQUNuQixHQUFHaXNELEVBQU0sT0FBUyxFQUFHLFFBQVE5bkYsRUFBSSxFQUFHQSxJQUFNOGYsRUFBRSxPQUFROWYsR0FBSyxFQUFHLENBRTNELE9BREE2N0IsRUFBTSxDQUFFL2IsRUFBRTlmLEVBQUUsQ0FBQyxFQUFFLEVBQ1I4ZixFQUFFOWYsQ0FBQyxFQUFFLEVBQUMsQ0FDWixJQUFLLGFBQ0wsSUFBSyxNQUNMLElBQUssUUFDTCxJQUFLLGNBQ0wsSUFBSyxTQUNMLElBQUssZ0JBQ0wsSUFBSyxpQkFDTCxJQUFLLG9CQUNMLElBQUsscUJBQ0wsSUFBSyxrQkFDTCxJQUFLLG9CQUNMLElBQUssWUFDTCxJQUFLLFdBQ0wsSUFBSyxtQkFDTCxJQUFLLGFBQ0o2USxFQUFNLFdBQWFnckIsRUFDbkJockIsRUFBTSxXQUFhaTNFLEVBQU0sTUFBTTduQyxFQUFLQSxFQUFNcGtCLENBQUcsRUFDN0MsTUFFRCxJQUFLLGVBQ0wsSUFBSyxvQkFDTCxJQUFLLFNBQ0wsSUFBSyxvQkFDTCxJQUFLLG9CQUNKaHJCLEVBQU0sWUFBY2dyQixFQUNwQmhyQixFQUFNLGFBQWVpM0UsRUFBTSxNQUFNN25DLEVBQUtBLEVBQU1wa0IsQ0FBRyxFQUMvQyxNQUVELElBQUssU0FDTCxJQUFLLFlBQ0pockIsRUFBTSxZQUFjZ3JCLEVBQ3BCaHJCLEVBQU0sV0FBYWkzRSxFQUFNLE1BQU03bkMsRUFBS0EsRUFBTXBrQixDQUFHLEVBQzdDLEtBQ0QsQ0FDRG9rQixHQUFPcGtCLENBQ1AsQ0FDRixDQUVBLFNBQVNrc0QsR0FBZ0J2MkUsRUFBTXpTLEVBQUc3RSxFQUFNLENBQ3ZDLElBQUlnaUUsRUFBSSxDQUFBLEVBQUksT0FBSW45RCxJQUFHQSxFQUFJLElBQ3ZCeVMsRUFBT3duRSxHQUFTeG5FLENBQUksRUFFcEJnMkUsR0FBVSxRQUFRLFNBQVN6akYsRUFBRyxDQUM3QixJQUFJaWtGLEdBQU94MkUsRUFBSyxNQUFNeW5FLEdBQVNsMUUsRUFBRSxDQUFDLENBQUMsQ0FBQyxHQUFHLENBQUUsR0FBRSxDQUFDLEVBQzVDLE9BQU9BLEVBQUUsQ0FBQyxFQUFDLENBQ1YsSUFBSyxTQUFhaWtGLElBQUtqcEYsRUFBRWdGLEVBQUUsQ0FBQyxDQUFDLEVBQUk0ekUsR0FBWXFRLENBQUcsR0FBRyxNQUNuRCxJQUFLLE9BQVFqcEYsRUFBRWdGLEVBQUUsQ0FBQyxDQUFDLEVBQUlpa0YsSUFBUSxPQUFRLE1BQ3ZDLElBQUssTUFDSixJQUFJWCxFQUFNNzFFLEVBQUssTUFBTSxJQUFJLE9BQU8sSUFBTXpOLEVBQUUsQ0FBQyxFQUFJLHVCQUEwQkEsRUFBRSxDQUFDLEVBQUksR0FBRyxDQUFDLEVBQy9Fc2pGLEdBQU9BLEVBQUksT0FBUyxJQUFHbnJCLEVBQUVuNEQsRUFBRSxDQUFDLENBQUMsRUFBSXNqRixFQUFJLENBQUMsR0FDekMsS0FDRCxDQUNILENBQUUsRUFFRW5yQixFQUFFLGNBQWdCQSxFQUFFLGVBQWV3ckIsR0FBaUJ4ckIsRUFBRSxhQUFjQSxFQUFFLGNBQWVuOUQsRUFBRzdFLENBQUksRUFFeEY2RSxDQUNSLENBRUEsU0FBU2twRixHQUFnQmxvRixFQUEyQixDQUNuRCxJQUFJaUUsRUFBc0IsQ0FBQSxFQUFJa2tGLEVBQUlyTyxHQUNsQyxPQUFJOTVFLElBQUlBLEVBQUssSUFDYkEsRUFBRyxZQUFjLFVBQ2pCaUUsRUFBRUEsRUFBRSxNQUFNLEVBQUs0eUUsR0FDZjV5RSxFQUFFQSxFQUFFLE1BQU0sRUFBSzYxRSxHQUFVLGFBQWMsS0FBTSxDQUM1QyxNQUFTTSxHQUFNLFVBQ2YsV0FBWUEsR0FBTSxFQUNsQixDQUFBLEVBRURxTixHQUFVLFFBQVEsU0FBU3pqRixFQUFHLENBQzdCLEdBQUdoRSxFQUFHZ0UsRUFBRSxDQUFDLENBQUMsSUFBTSxPQUNoQixLQUFJK2IsRUFDSixPQUFPL2IsRUFBRSxDQUFDLEVBQUMsQ0FDVixJQUFLLFNBQVUrYixFQUFJazRELEdBQVUsT0FBT2o0RSxFQUFHZ0UsRUFBRSxDQUFDLENBQUMsQ0FBQyxDQUFDLEVBQUcsTUFDaEQsSUFBSyxPQUFRK2IsRUFBSS9mLEVBQUdnRSxFQUFFLENBQUMsQ0FBQyxFQUFJLE9BQVMsUUFBUyxLQUM5QyxDQUNFK2IsSUFBTSxTQUFXOWIsRUFBRUEsRUFBRSxNQUFNLEVBQUtra0YsRUFBRW5rRixFQUFFLENBQUMsRUFBRytiLENBQUMsR0FDOUMsQ0FBRSxFQUdEOWIsRUFBRUEsRUFBRSxNQUFNLEVBQUtra0YsRUFBRSxlQUFnQkEsRUFBRSxZQUFhQSxFQUFFLGFBQWMsaUNBQWlDLEVBQUVBLEVBQUUsYUFBY0EsRUFBRSxRQUFTLE9BQU9ub0YsRUFBRyxVQUFVLENBQUMsQ0FBQyxFQUFHLENBQUMsS0FBSyxFQUFHLFNBQVMsU0FBUyxDQUFDLENBQUMsRUFDcExpRSxFQUFFQSxFQUFFLE1BQU0sRUFBS2trRixFQUFFLGdCQUFpQkEsRUFBRSxZQUFhbm9GLEVBQUcsV0FBVyxJQUFJLFNBQVNzRCxFQUFHLENBQUUsTUFBTyxhQUFlMjBFLEdBQVUzMEUsQ0FBQyxFQUFJLGFBQWdCLENBQUEsRUFBRSxLQUFLLEVBQUUsRUFBRyxDQUFDLEtBQU10RCxFQUFHLFdBQVksU0FBUyxPQUFPLENBQUMsQ0FBQyxFQUN2TGlFLEVBQUUsT0FBTyxJQUFJQSxFQUFFQSxFQUFFLE1BQU0sRUFBSyxnQkFBa0JBLEVBQUUsQ0FBQyxFQUFFQSxFQUFFLENBQUMsRUFBRSxRQUFRLEtBQUssR0FBRyxHQUNwRUEsRUFBRSxLQUFLLEVBQUUsQ0FDakIsQ0FFQSxJQUFJbWtGLEdBQVksZ0JBQ2hCLFNBQVNDLEdBQWlCNTJFLEVBQWlCdFgsRUFBTSxDQUNoRCxJQUFJNkUsRUFBSSxDQUFBLEVBQUkzRSxFQUFPLEdBQ2ZtOUQsRUFBSS9sRCxFQUFLLE1BQU0yMkUsRUFBUyxFQUM1QixHQUFHNXdCLEVBQUcsUUFBUSxFQUFJLEVBQUcsR0FBS0EsRUFBRSxPQUFRLEVBQUUsRUFBRyxDQUN4QyxJQUFJeDdCLEVBQUl3N0IsRUFBRSxDQUFDLEVBQUd0akIsRUFBSWtqQyxHQUFZcDdDLENBQUMsRUFDL0IsT0FBT2tZLEVBQUUsQ0FBQyxFQUFDLENBQ1YsSUFBSyxRQUFTLE1BQ2QsSUFBSyxjQUFlLE1BQ3BCLElBQUssWUFBYTc1QyxFQUFPdTlFLEdBQVkxakMsRUFBRSxJQUFJLEVBQUcsTUFDOUMsSUFBSyxjQUFlNzVDLEVBQU8sS0FBTSxNQUNqQyxRQUFTLEdBQUkyaEMsRUFBRSxRQUFRLE1BQU0sSUFBTSxFQUFHLENBQ3JDLElBQUlzc0QsRUFBT3RzRCxFQUFFLE1BQU0sR0FBRyxFQUNsQjM4QixFQUFPaXBGLEVBQUssQ0FBQyxFQUFFLE1BQU0sQ0FBQyxFQUFHcmpGLEVBQU9xakYsRUFBSyxDQUFDLEVBRTFDLE9BQU9qcEYsRUFBSSxDQUNWLElBQUssUUFBUyxJQUFLLE9BQVEsSUFBSyxTQUMvQkwsRUFBRTNFLENBQUksRUFBSXU5RSxHQUFZM3lFLENBQUksRUFDMUIsTUFDRCxJQUFLLE9BQ0pqRyxFQUFFM0UsQ0FBSSxFQUFJcStFLEdBQWF6ekUsQ0FBSSxFQUMzQixNQUNELElBQUssS0FBTSxJQUFLLEtBQU0sSUFBSyxLQUFNLElBQUssS0FBTSxJQUFLLE1BQU8sSUFBSyxPQUM1RGpHLEVBQUUzRSxDQUFJLEVBQUksU0FBUzRLLEVBQU0sRUFBRSxFQUMzQixNQUNELElBQUssS0FBTSxJQUFLLEtBQU0sSUFBSyxVQUMxQmpHLEVBQUUzRSxDQUFJLEVBQUksV0FBVzRLLENBQUksRUFDekIsTUFDRCxJQUFLLFdBQVksSUFBSyxPQUNyQmpHLEVBQUUzRSxDQUFJLEVBQUkyNkUsR0FBVS92RSxDQUFJLEVBQ3hCLE1BQ0QsSUFBSyxLQUFNLElBQUssUUFDZmpHLEVBQUUzRSxDQUFJLEVBQUl1OUUsR0FBWTN5RSxDQUFJLEVBQzFCLE1BQ0QsUUFDQyxHQUFHNUYsRUFBSyxNQUFNLEVBQUUsR0FBSyxJQUFLLE1BQ3ZCbEYsRUFBSyxLQUFPLE9BQU8sUUFBWSxLQUFhLFFBQVEsS0FBSyxhQUFjNmhDLEVBQUczOEIsRUFBTWlwRixDQUFJLENBQ3hGLENBQ0QsU0FBU3RzRCxFQUFFLE1BQU0sRUFBRSxDQUFDLElBQU0sTUFDcEIsR0FBRzdoQyxFQUFLLElBQUssTUFBTSxJQUFJLE1BQU02aEMsQ0FBQyxFQUNyQyxDQUNELENBQ0QsT0FBT2g5QixDQUNSLENBRUEsU0FBU3VwRixHQUFpQnZvRixFQUEyQixDQUNwRCxJQUFJaUUsRUFBSSxDQUFDNHlFLEdBQVlpRCxHQUFVLGFBQWMsS0FBTSxDQUNsRCxNQUFTTSxHQUFNLFdBQ2YsV0FBWUEsR0FBTSxFQUNsQixDQUFBLENBQUMsRUFDRixHQUFHLENBQUNwNkUsRUFBSSxPQUFPaUUsRUFBRSxLQUFLLEVBQUUsRUFDeEIsSUFBSXVrRixFQUFNLEVBQ1YsT0FBQTNtRixHQUFLN0IsQ0FBRSxFQUFFLFFBQVEsU0FBa0J5ZixFQUFHLENBQUUsRUFBRStvRSxFQUN6Q3ZrRixFQUFFQSxFQUFFLE1BQU0sRUFBSzYxRSxHQUFVLFdBQVlFLEdBQVNoNkUsRUFBR3lmLENBQUMsRUFBRyxFQUFJLEVBQUcsQ0FDM0QsTUFBUyx5Q0FDVCxJQUFPK29FLEVBQ1AsS0FBUXZRLEdBQVV4NEQsQ0FBQyxDQUNuQixDQUFBLENBQ0gsQ0FBRSxFQUNFeGIsRUFBRSxPQUFPLElBQUlBLEVBQUVBLEVBQUUsTUFBTSxFQUFJLGdCQUFpQkEsRUFBRSxDQUFDLEVBQUVBLEVBQUUsQ0FBQyxFQUFFLFFBQVEsS0FBSyxHQUFHLEdBQ2xFQSxFQUFFLEtBQUssRUFBRSxDQUNqQixDQUVBLElBQUl3a0YsR0FBa0IsQ0FDckIsTUFBTyxRQUNQLFFBQVMsVUFDVCxPQUFRLFNBQ1IsU0FBVSxXQUNWLFNBQVUsY0FDVixXQUFZLGFBQ1osVUFBVyxXQUNYLFlBQWEsVUFFYixZQUFhLGNBQ2IsWUFBYSxVQUNiLGFBQWMsWUFJZCxTQUFVLFdBRVYsUUFBUyxVQUNULFFBQVMsVUFPVCxXQUFZLFVBRVosY0FBZSxnQkFDZixXQUFZLGFBQ1osU0FBVSxVQUNYLEVBQ0lDLEdBRUosU0FBU0MsR0FBY0MsRUFBTzdpQyxFQUFnQmxsRCxFQUFLLENBQzlDNm5GLEtBQWVBLEdBQWdCelUsR0FBTXdVLEVBQWUsR0FDeEQxaUMsRUFBTTJpQyxHQUFjM2lDLENBQUcsR0FBS0EsRUFDNUI2aUMsRUFBTTdpQyxDQUFHLEVBQUlsbEQsQ0FDZCxDQUVBLFNBQVNnb0YsR0FBb0JELEVBQU96dUYsRUFBTSxDQUN6QyxJQUFJOEosRUFBc0IsQ0FBQSxFQUMxQixPQUFBcEMsR0FBSzRtRixFQUFlLEVBQUUsSUFBSSxTQUFTanhCLEVBQUcsQ0FDckMsUUFBUXYzRCxFQUFJLEVBQUdBLEVBQUlrbkYsR0FBVyxPQUFRLEVBQUVsbkYsRUFBRyxHQUFHa25GLEdBQVdsbkYsQ0FBQyxFQUFFLENBQUMsR0FBS3UzRCxFQUFHLE9BQU8ydkIsR0FBV2xuRixDQUFDLEVBQ3hGLElBQUlBLEVBQUksRUFBR0EsRUFBSXduRixHQUFVLE9BQVEsRUFBRXhuRixFQUFHLEdBQUd3bkYsR0FBVXhuRixDQUFDLEVBQUUsQ0FBQyxHQUFLdTNELEVBQUcsT0FBT2l3QixHQUFVeG5GLENBQUMsRUFDakYsTUFBTXUzRCxDQUNSLENBQUUsRUFBRSxRQUFRLFNBQVN4NEQsRUFBRyxDQUN0QixHQUFHNHBGLEVBQU01cEYsRUFBRSxDQUFDLENBQUMsR0FBSyxLQUNsQixLQUFJdzRELEVBQUlyOUQsR0FBUUEsRUFBSyxPQUFTQSxFQUFLLE1BQU02RSxFQUFFLENBQUMsQ0FBQyxHQUFLLEtBQU83RSxFQUFLLE1BQU02RSxFQUFFLENBQUMsQ0FBQyxFQUFJNHBGLEVBQU01cEYsRUFBRSxDQUFDLENBQUMsRUFDdEYsT0FBT0EsRUFBRSxDQUFDLEVBQUMsQ0FDVixJQUFLLE9BQVF3NEQsRUFBSSxJQUFJLEtBQUtBLENBQUMsRUFBRSxZQUFhLEVBQUMsUUFBUSxTQUFTLEdBQUcsRUFBRyxLQUNsRSxDQUNFLE9BQU9BLEdBQUssU0FBVUEsRUFBSSxPQUFPQSxDQUFDLEVBQzdCQSxJQUFNLElBQVFBLElBQU0sR0FBU0EsRUFBSUEsRUFBSSxJQUFNLElBQzNDQSxhQUFhLE9BQU1BLEVBQUksSUFBSSxLQUFLQSxDQUFDLEVBQUUsY0FBYyxRQUFRLFNBQVMsRUFBRSxHQUM1RXZ6RCxFQUFFLEtBQUsyMUUsR0FBUzZPLEdBQWdCenBGLEVBQUUsQ0FBQyxDQUFDLEdBQUtBLEVBQUUsQ0FBQyxFQUFHdzRELENBQUMsQ0FBQyxFQUNuRCxDQUFFLEVBQ01zaUIsR0FBVSxxQkFBc0I3MUUsRUFBRSxLQUFLLEVBQUUsRUFBRyxDQUFDLE1BQU1xMkUsR0FBTyxDQUFDLENBQUUsQ0FDckUsQ0FDQSxTQUFTd08sR0FBcUJGLEVBQU9HLEVBQXVCLENBQzNELElBQUlDLEVBQVksQ0FBQyxhQUFhLFlBQVksRUFDdEN2bEIsRUFBSSwyQkFDSngvRCxFQUFzQixDQUFBLEVBQzFCLE9BQUcya0YsR0FBTy9tRixHQUFLK21GLENBQUssRUFBRSxRQUFRLFNBQVNucEUsRUFBRyxDQUV6QyxHQUFJLE9BQU8sVUFBVSxlQUFlLEtBQUttcEUsRUFBT25wRSxDQUFDLEVBQ2pELFNBQVF4ZixFQUFJLEVBQUdBLEVBQUlrbkYsR0FBVyxPQUFRLEVBQUVsbkYsRUFBRyxHQUFHd2YsR0FBSzBuRSxHQUFXbG5GLENBQUMsRUFBRSxDQUFDLEVBQUcsT0FDckUsSUFBSUEsRUFBSSxFQUFHQSxFQUFJd25GLEdBQVUsT0FBUSxFQUFFeG5GLEVBQUcsR0FBR3dmLEdBQUtnb0UsR0FBVXhuRixDQUFDLEVBQUUsQ0FBQyxFQUFHLE9BQy9ELElBQUlBLEVBQUksRUFBR0EsRUFBSStvRixFQUFVLE9BQVEsRUFBRS9vRixFQUFHLEdBQUd3ZixHQUFLdXBFLEVBQVUvb0YsQ0FBQyxFQUFHLE9BRTVELElBQUl1M0QsRUFBSW94QixFQUFNbnBFLENBQUMsRUFDWGxkLEVBQUksU0FDTCxPQUFPaTFELEdBQUssVUFBWWoxRCxFQUFJLFFBQVNpMUQsRUFBSSxPQUFPQSxDQUFDLEdBQzVDQSxJQUFNLElBQVFBLElBQU0sSUFBU2oxRCxFQUFJLFVBQVdpMUQsRUFBSUEsRUFBSSxJQUFNLEtBQzdEQSxFQUFJLE9BQU9BLENBQUMsRUFDakJ2ekQsRUFBRSxLQUFLNjFFLEdBQVU1QixHQUFhejRELENBQUMsRUFBRyszQyxFQUFHLENBQUMsUUFBUWoxRCxDQUFDLENBQUMsQ0FBQyxFQUNuRCxDQUFFLEVBQ0V3bUYsR0FBV2xuRixHQUFLa25GLENBQVMsRUFBRSxRQUFRLFNBQVN0cEUsRUFBRyxDQUVqRCxHQUFJLE9BQU8sVUFBVSxlQUFlLEtBQUtzcEUsRUFBV3RwRSxDQUFDLEdBQ2xELEVBQUFtcEUsR0FBUyxPQUFPLFVBQVUsZUFBZSxLQUFLQSxFQUFPbnBFLENBQUMsR0FDekQsS0FBSSszQyxFQUFJdXhCLEVBQVV0cEUsQ0FBQyxFQUNmbGQsRUFBSSxTQUNMLE9BQU9pMUQsR0FBSyxVQUFZajFELEVBQUksUUFBU2kxRCxFQUFJLE9BQU9BLENBQUMsR0FDNUNBLElBQU0sSUFBUUEsSUFBTSxJQUFTajFELEVBQUksVUFBV2kxRCxFQUFJQSxFQUFJLElBQU0sS0FDMURBLGFBQWEsTUFBUWoxRCxFQUFJLGNBQWVpMUQsRUFBSUEsRUFBRSxZQUFXLEdBQzVEQSxFQUFJLE9BQU9BLENBQUMsRUFDakJ2ekQsRUFBRSxLQUFLNjFFLEdBQVU1QixHQUFhejRELENBQUMsRUFBRyszQyxFQUFHLENBQUMsUUFBUWoxRCxDQUFDLENBQUMsQ0FBQyxFQUNuRCxDQUFFLEVBQ00sSUFBTWtoRSxFQUFJLFdBQWE2VyxHQUFPLEVBQUksS0FBT3IyRSxFQUFFLEtBQUssRUFBRSxFQUFJLEtBQU93L0QsRUFBSSxHQUN6RSxDQUlBLFNBQVN3bEIsR0FBZXR5QixFQUFNLENBQzdCLElBQUl1eUIsRUFBZ0J2eUIsRUFBSyxXQUFXLENBQUMsRUFBR3d5QixFQUFpQnh5QixFQUFLLFdBQVcsQ0FBQyxFQUMxRSxPQUFPLElBQUksTUFBT3d5QixFQUFlLElBQUksS0FBSyxJQUFJLEVBQUUsRUFBRSxFQUFJRCxFQUFjLElBQU8sYUFBYSxHQUFJLEVBQUUsWUFBVyxFQUFHLFFBQVEsUUFBUSxFQUFFLENBQy9ILENBQ0EsU0FBU0UsR0FBZXYwQyxFQUFzQixDQUM3QyxJQUFJbHhDLEVBQVEsT0FBT2t4QyxHQUFRLFNBQVksSUFBSSxLQUFLLEtBQUssTUFBTUEsQ0FBSSxDQUFDLEVBQUlBLEVBQ2hFdHlDLEVBQUlvQixFQUFLLFFBQU8sRUFBSyxJQUFPLFlBQzVCa2hCLEVBQUl0aUIsRUFBSSxLQUFLLElBQUksRUFBRSxFQUFFLEVBQUc2bEIsR0FBSzdsQixFQUFJc2lCLEdBQUssS0FBSyxJQUFJLEVBQUUsRUFBRSxFQUN2REEsR0FBSyxJQUFLdUQsR0FBSyxJQUNmLElBQUk4MEMsRUFBS3I0QyxFQUFJLEtBQUssSUFBSSxFQUFFLEVBQUUsRUFBSyxFQUM1QnE0QyxFQUFJLElBQUtyNEMsRUFBSUEsRUFBSSxLQUFLLElBQUksRUFBRSxFQUFFLEVBQUd1RCxHQUFLODBDLEdBQ3pDLElBQUlqNUQsRUFBSXNrRSxHQUFRLENBQUMsRUFBRyxPQUFBdGtFLEVBQUUsWUFBWSxFQUFHNGdCLENBQUMsRUFBRzVnQixFQUFFLFlBQVksRUFBR21rQixDQUFDLEVBQVVua0IsQ0FDdEUsQ0FHQSxTQUFTb2xGLEdBQVkxeUIsRUFBTXQzRCxFQUFNaXFGLEVBQWlCLENBQ2pELElBQUlucEUsRUFBUXcyQyxFQUFLLEVBQ2I1NkIsRUFBTTQ2QixFQUFLLFdBQVcsRUFBRyxVQUFVLEVBQ3ZDLEdBQUcyeUIsRUFBSyxLQUFPM3lCLEVBQUssRUFBSXgyQyxFQUFTLEdBQUcsRUFBRXcyQyxFQUFLLEVBQzNDLE9BQU81NkIsQ0FDUixDQUdBLFNBQVN3dEQsR0FBYTV5QixFQUFNdDNELEVBQU1pcUYsRUFBSyxDQUN0QyxJQUFJdnRELEVBQU00NkIsRUFBSyxXQUFXLEVBQUcsUUFBUSxFQUNyQyxPQUFHMnlCLElBQUszeUIsRUFBSyxHQUFNLEdBQU01NkIsRUFBSSxPQUFPLEVBQUssR0FBTSxHQUN4Q0EsQ0FDUixDQUtBLFNBQVN5dEQsR0FBbUI3eUIsRUFBTTh5QixFQUFZSCxFQUFLLENBQ2xELE9BQUdHLElBQWUsR0FBMkJGLEdBQWE1eUIsQ0FBSSxFQUN2RDB5QixHQUFZMXlCLEVBQU04eUIsRUFBWUgsQ0FBRyxDQUN6QyxDQUVBLFNBQVNJLEdBQWUveUIsRUFBTSxFQUFjMnlCLEVBQWtCLENBQUUsT0FBT0UsR0FBbUI3eUIsRUFBTSxFQUFHMnlCLElBQVEsR0FBUSxFQUFHLENBQUMsQ0FBSSxDQUMzSCxTQUFTSyxHQUF3Qmh6QixFQUFNLEVBQWMsQ0FBRSxHQUFHLENBQUMsRUFBRyxNQUFNLElBQUksTUFBTSw2Q0FBNkMsRUFBRyxPQUFPNnlCLEdBQW1CN3lCLEVBQU0sRUFBRyxDQUFDLENBQUksQ0FHdEssU0FBU2l6QixHQUF1Qmp6QixFQUF3QixDQUd2RCxRQUZJeHVCLEVBQVN3dUIsRUFBSyxXQUFXLENBQUMsRUFDMUI1eEQsRUFBd0IsQ0FBQSxFQUNwQjlFLEVBQUksRUFBR0EsR0FBS2tvQyxFQUFRLEVBQUVsb0MsRUFBRyxDQUNoQyxJQUFJa2dCLEVBQVF3MkMsRUFBSyxFQUNqQjV4RCxFQUFJOUUsQ0FBQyxFQUFJMDJELEVBQUssV0FBVyxFQUFHLFFBQVEsRUFBRSxRQUFRMEQsR0FBSyxFQUFFLEVBQ2pEMUQsRUFBSyxFQUFJeDJDLEVBQVMsSUFBTXcyQyxFQUFLLEdBQUssRUFDdEMsQ0FDRCxPQUFPNXhELENBQ1IsQ0FHQSxTQUFTOGtGLEdBQStCbHpCLEVBQXdCLENBRy9ELFFBRkl4dUIsRUFBU3d1QixFQUFLLFdBQVcsQ0FBQyxFQUMxQjV4RCxFQUF3QixDQUFBLEVBQ3BCOUUsRUFBSSxFQUFHQSxHQUFLa29DLEVBQVEsRUFBRWxvQyxFQUFHOEUsRUFBSTlFLENBQUMsRUFBSTAyRCxFQUFLLFdBQVcsRUFBRyxVQUFVLEVBQUUsUUFBUTBELEdBQUssRUFBRSxFQUN4RixPQUFPdDFELENBQ1IsQ0FJQSxTQUFTK2tGLEdBQW9CbnpCLEVBQU0sQ0FDbEMsSUFBSXgyQyxFQUFRdzJDLEVBQUssRUFDYm96QixFQUFnQkMsR0FBeUJyekIsRUFBTTZ0QixFQUFPLEVBQ3ZEN3RCLEVBQUtBLEVBQUssQ0FBQyxHQUFLLEdBQVFBLEVBQUtBLEVBQUssRUFBRSxDQUFDLEdBQUssR0FBVUEsRUFBSyxFQUFJeDJDLEVBQVMsSUFBT3cyQyxFQUFLLEdBQUssR0FDMUYsSUFBSXN6QixFQUFjRCxHQUF5QnJ6QixFQUFNbXRCLEVBQUssRUFDdEQsTUFBTyxDQUFDaUcsRUFBZUUsQ0FBVyxDQUNuQyxDQUdBLFNBQVNDLEdBQTRCdnpCLEVBQU0sQ0FHMUMsUUFGSXd6QixFQUFZeHpCLEVBQUssV0FBVyxDQUFDLEVBQzdCc0QsRUFBTSxDQUFBLEVBQ0ZoNkQsRUFBSSxFQUFHQSxFQUFJa3FGLEVBQVksRUFBRyxFQUFFbHFGLEVBQUdnNkQsRUFBSSxLQUFLNnZCLEdBQW9CbnpCLENBQUksQ0FBQyxFQUN6RSxPQUFPc0QsQ0FDUixDQUdBLFNBQVNtd0IsR0FBaUJ6ekIsRUFBSzB6QixFQUFVLENBR3hDLFFBRkk3aEIsRUFBTTdSLEVBQUssV0FBVyxDQUFDLEVBQ3ZCanNELEVBQThCLENBQUEsRUFDMUI2c0QsRUFBSSxFQUFHQSxHQUFLaVIsRUFBSyxFQUFFalIsRUFBRyxDQUM3QixJQUFJaXhCLEVBQU03eEIsRUFBSyxXQUFXLENBQUMsRUFDdkI3NkIsRUFBTTY2QixFQUFLLFdBQVcsQ0FBQyxFQUMzQmpzRCxFQUFLODlFLENBQUcsRUFBSTd4QixFQUFLLFdBQVc3NkIsRUFBTXV1RCxJQUFhLEtBQU8sVUFBVSxNQUFRLEVBQUMsUUFBUWh3QixHQUFLLEVBQUUsRUFBRSxRQUFRQyxHQUFLLEdBQUcsRUFDdkcrdkIsSUFBYSxNQUFVdnVELEVBQU0sSUFBSTY2QixFQUFLLEdBQUssRUFDOUMsQ0FDRCxPQUFHQSxFQUFLLEVBQUksSUFBR0EsRUFBSyxFQUFLQSxFQUFLLEdBQUcsRUFBRSxHQUFJLEdBQ2hDanNELENBQ1IsQ0FHQSxTQUFTNC9FLEdBQVczekIsRUFBTSxDQUN6QixJQUFJcnBELEVBQU9xcEQsRUFBSyxXQUFXLENBQUMsRUFDeEI0ekIsRUFBUTV6QixFQUFLLE1BQU1BLEVBQUssRUFBRUEsRUFBSyxFQUFFcnBELENBQUksRUFDekMsT0FBQXFwRCxFQUFLLEdBQUtycEQsR0FDTkEsRUFBTyxHQUFLLElBQUdxcEQsRUFBSyxHQUFNLEdBQUtycEQsRUFBTyxHQUFNLEdBQ3pDaTlFLENBQ1IsQ0FHQSxTQUFTQyxHQUFvQjd6QixFQUFNLENBRWxDLElBQUkxeUQsRUFBSSxDQUFBLEVBQ1IsT0FBQUEsRUFBRSxLQUFPMHlELEVBQUssV0FBVyxDQUFDLEVBRTFCQSxFQUFLLEdBQUsxeUQsRUFBRSxLQUFPLEdBQUtBLEVBQUUsS0FBTyxHQUFLLEVBQy9CQSxDQUNSLENBR0EsU0FBUytsRixHQUF5QnJ6QixFQUFNdDNELEVBQWlCbXJFLEVBQWUsQ0FDdkUsSUFBSWpvRSxFQUFJbzBELEVBQUssV0FBVyxDQUFDLEVBQUc1eEQsRUFBSzVLLEVBQU9xd0UsR0FBTyxHQUUvQyxHQURBN1QsRUFBSyxHQUFLLEVBQ1B0M0QsSUFBUzJrRixJQUNUemhGLElBQU1sRCxHQUFRb2xGLEdBQVUsUUFBUXBsRixDQUFJLElBQUksSUFBTSxHQUFHQSxFQUFPLFFBQVcsT0FBV2tELEVBQUksUUFBVyxNQUFTLE1BQU0sSUFBSSxNQUFNLGlCQUFtQmxELEVBQU8sUUFBVWtELENBQUMsRUFDOUosT0FBT2xELElBQVMya0YsR0FBYXpoRixFQUFJbEQsRUFBSSxDQUNwQyxJQUFLLEdBQWdCLE9BQUEwRixFQUFNNHhELEVBQUssV0FBVyxFQUFHLEdBQUcsRUFBT3g4RCxFQUFLLE1BQUt3OEQsRUFBSyxHQUFLLEdBQVU1eEQsRUFDdEYsSUFBSyxHQUFnQixPQUFBQSxFQUFNNHhELEVBQUssV0FBVyxFQUFHLEdBQUcsRUFBVTV4RCxFQUMzRCxJQUFLLElBQWtCLE9BQU80eEQsRUFBSyxXQUFXLENBQUMsSUFBTSxFQUNyRCxJQUFLLElBQWlCLE9BQUE1eEQsRUFBTTR4RCxFQUFLLFdBQVcsQ0FBQyxFQUFVNXhELEVBQ3ZELElBQUssSUFBbUIsT0FBT3NrRixHQUFZMXlCLEVBQU1wMEQsRUFBRyxDQUFDLEVBQUUsUUFBUTgzRCxHQUFLLEVBQUUsRUFDdEUsSUFBSyxJQUFvQixPQUFPa3ZCLEdBQWE1eUIsQ0FBSSxFQUNqRCxJQUFLLElBQXNCLE9BQU9zeUIsR0FBZXR5QixDQUFJLEVBQ3JELElBQUssSUFBa0IsT0FBTzJ6QixHQUFXM3pCLENBQUksRUFDN0MsSUFBSyxJQUFnQixPQUFPNnpCLEdBQW9CN3pCLENBQUksRUFDcEQsSUFBSyxJQUFvQixPQUFPK3lCLEdBQWUveUIsRUFBTXAwRCxFQUFHLENBQUNwSSxFQUFLLEdBQUcsRUFBRSxRQUFRa2dFLEdBQUssRUFBRSxFQUNsRixJQUFLLElBQWtCLE9BQU9zdkIsR0FBd0JoekIsRUFBTXAwRCxDQUFDLEVBQVMsUUFBUTgzRCxHQUFLLEVBQUUsRUFDckYsSUFBSyxNQUFpQyxPQUFPNnZCLEdBQTRCdnpCLENBQUksRUFDN0UsSUFBSyxNQUNMLElBQUssTUFDSixPQUFPcDBELEdBQUssS0FBU3FuRixHQUF1Qmp6QixDQUFJLEVBQUlrekIsR0FBK0JsekIsQ0FBSSxFQUN4RixRQUFTLE1BQU0sSUFBSSxNQUFNLHdDQUEwQ3QzRCxFQUFPLElBQU1rRCxDQUFDLENBQ2pGLENBQ0YsQ0FDQSxTQUFTa29GLEdBQXlCcHJGLEVBQWlCckQsRUFBTyxDQUN6RCxJQUFJaUksRUFBSXNrRSxHQUFRLENBQUMsRUFBR3ZwRSxFQUFJdXBFLEdBQVEsQ0FBQyxFQUVqQyxPQURBdGtFLEVBQUUsWUFBWSxFQUFHNUUsR0FBUSxHQUFPLEdBQU9BLENBQUksRUFDcENBLEVBQUksQ0FDVixJQUFLLEdBQWdCTCxFQUFFLFlBQVksR0FBSWhELENBQUssRUFBRyxNQUMvQyxJQUFLLEdBQWdCZ0QsRUFBSXVwRSxHQUFRLENBQUMsRUFBR3ZwRSxFQUFFLFlBQVksRUFBR2hELEVBQU8sR0FBRyxFQUFHLE1BQ25FLElBQUssSUFBa0JnRCxFQUFFLFlBQVksRUFBR2hELEVBQVEsRUFBTyxDQUFJLEVBQUcsTUFDOUQsSUFBSyxJQUE2R2dELEVBQUlvcUYsR0FBZXB0RixDQUFLLEVBQUcsTUFDN0ksSUFBSyxJQUNMLElBQUssSUFLSixJQUhBZ0QsRUFBSXVwRSxHQUFRLEVBQUksR0FBS3ZzRSxFQUFNLE9BQVMsSUFBTUEsRUFBTSxPQUFTLEVBQUksRUFBSSxFQUFFLEVBQ25FZ0QsRUFBRSxZQUFZLEVBQUdoRCxFQUFNLE9BQVMsQ0FBQyxFQUNqQ2dELEVBQUUsWUFBWSxFQUFHaEQsRUFBTyxNQUFNLEVBQ3hCZ0QsRUFBRSxHQUFLQSxFQUFFLFFBQVFBLEVBQUUsWUFBWSxFQUFHLENBQUMsRUFDekMsTUFDRCxRQUFTLE1BQU0sSUFBSSxNQUFNLHdDQUEwQ0ssRUFBTyxJQUFNckQsQ0FBSyxDQUNyRixDQUNELE9BQU82OUQsR0FBUSxDQUFDNTFELEVBQUdqRixDQUFDLENBQUMsQ0FDdEIsQ0FHQSxTQUFTMHJGLEdBQWtCL3pCLEVBQU1nMEIsRUFBTyxDQUN2QyxJQUFJQyxFQUFhajBCLEVBQUssRUFDbEJycEQsRUFBT3FwRCxFQUFLLFdBQVcsQ0FBQyxFQUN4QmswQixFQUFXbDBCLEVBQUssV0FBVyxDQUFDLEVBQzVCaXlCLEVBQVEsQ0FBQSxFQUFJM29GLEVBQUksRUFDaEJvcUYsRUFBVyxFQUNYUyxFQUFhLEdBQUlDLEVBQWlDLENBQUUsRUFDeEQsSUFBSTlxRixFQUFJLEVBQUdBLEdBQUs0cUYsRUFBVSxFQUFFNXFGLEVBQUcsQ0FDOUIsSUFBSStxRixFQUFTcjBCLEVBQUssV0FBVyxDQUFDLEVBQzFCczBCLEVBQVN0MEIsRUFBSyxXQUFXLENBQUMsRUFDOUJpeUIsRUFBTTNvRixDQUFDLEVBQUksQ0FBQytxRixFQUFRQyxFQUFTTCxDQUFVLENBQ3ZDLENBQ0RoQyxFQUFNLEtBQUssU0FBUzVzRCxFQUFFa1ksRUFBRyxDQUFFLE9BQU9sWSxFQUFFLENBQUMsRUFBSWtZLEVBQUUsQ0FBQyxDQUFJLENBQUEsRUFDaEQsSUFBSWczQyxFQUFRLENBQUEsRUFDWixJQUFJanJGLEVBQUksRUFBR0EsR0FBSzRxRixFQUFVLEVBQUU1cUYsRUFBRyxDQUM5QixHQUFHMDJELEVBQUssSUFBTWl5QixFQUFNM29GLENBQUMsRUFBRSxDQUFDLEVBQUcsQ0FDMUIsSUFBSXZELEVBQU8sR0FDWCxHQUFHdUQsRUFBRSxHQUFLMHFGLEVBQU8sT0FBT0EsRUFBTS9CLEVBQU0zb0YsRUFBRSxDQUFDLEVBQUUsQ0FBQyxDQUFDLEVBQUUsRUFBQyxDQUM3QyxJQUFLLEdBQW1CMDJELEVBQUssRUFBRSxJQUFNaXlCLEVBQU0zb0YsQ0FBQyxFQUFFLENBQUMsSUFBSzAyRCxFQUFLLEdBQUcsRUFBR2o2RCxFQUFPLElBQVMsTUFDL0UsSUFBSyxJQUF1Qmk2RCxFQUFLLEdBQUtpeUIsRUFBTTNvRixDQUFDLEVBQUUsQ0FBQyxJQUFLMDJELEVBQUssRUFBRWl5QixFQUFNM29GLENBQUMsRUFBRSxDQUFDLEVBQUd2RCxFQUFPLElBQVMsTUFDekYsSUFBSyxNQUFvQ2k2RCxFQUFLLEdBQUtpeUIsRUFBTTNvRixDQUFDLEVBQUUsQ0FBQyxJQUFLMDJELEVBQUssRUFBRWl5QixFQUFNM29GLENBQUMsRUFBRSxDQUFDLEVBQUd2RCxFQUFPLElBQVMsS0FDdEcsQ0FFRCxJQURJLENBQUNpdUYsR0FBTzFxRixHQUFHLElBQU0wMkQsRUFBSyxHQUFLaXlCLEVBQU0zb0YsQ0FBQyxFQUFFLENBQUMsSUFBS3ZELEVBQUssR0FBT2k2RCxFQUFLLEVBQUlpeUIsRUFBTTNvRixDQUFDLEVBQUUsQ0FBQyxHQUMxRXZELEVBQU0sTUFBTSxJQUFJLE1BQU0sZ0NBQWtDa3NGLEVBQU0zb0YsQ0FBQyxFQUFFLENBQUMsRUFBSSxPQUFTMDJELEVBQUssRUFBSSxLQUFPMTJELENBQUMsQ0FDbkcsQ0FDRCxHQUFHMHFGLEVBQU8sQ0FDVCxJQUFJUSxFQUFTUixFQUFNL0IsRUFBTTNvRixDQUFDLEVBQUUsQ0FBQyxDQUFDLEVBRzlCLEdBRkFpckYsRUFBTUMsRUFBTyxDQUFDLEVBQUluQixHQUF5QnJ6QixFQUFNdzBCLEVBQU8sRUFBRyxDQUFDLElBQUksRUFBSSxDQUFDLEVBQ2xFQSxFQUFPLElBQU0sWUFBV0QsRUFBTUMsRUFBTyxDQUFDLEVBQUksT0FBT0QsRUFBTUMsRUFBTyxDQUFDLEdBQUssRUFBRSxFQUFJLEtBQU8sT0FBUyxPQUFPRCxFQUFNQyxFQUFPLENBQUMsRUFBSSxLQUFNLEdBQUcsTUFBTSxFQUFFLEdBQ3BJQSxFQUFPLEdBQUssV0FBWSxPQUFPRCxFQUFNQyxFQUFPLENBQUMsRUFBQyxDQUNoRCxJQUFLLEdBQUdELEVBQU1DLEVBQU8sQ0FBQyxFQUFJLEtBRTFCLElBQUssS0FDTCxJQUFLLEtBQ0wsSUFBSyxLQUNMLElBQUssS0FDTCxJQUFLLEtBQ0wsSUFBSyxNQUNMLElBQUssTUFDTCxJQUFLLE1BQ0wsSUFBSyxNQUNMLElBQUssTUFDTCxJQUFLLE1BQ0wsSUFBSyxNQUNMLElBQUssTUFDTCxJQUFLLEtBQ0wsSUFBSyxNQUNMLElBQUssTUFDTCxJQUFLLE1BQ0wsSUFBSyxNQUFPLElBQUssS0FDakIsSUFBSyxPQUFPLElBQUssS0FDaEJwekIsR0FBT3N5QixFQUFZYSxFQUFNQyxFQUFPLENBQUMsSUFBSSxFQUFLLEtBQU0sRUFBRyxNQUNwRCxRQUFTLE1BQU0sSUFBSSxNQUFNLHlCQUEyQkQsRUFBTUMsRUFBTyxDQUFDLENBQUMsQ0FDbkUsQ0FDSixTQUNNdkMsRUFBTTNvRixDQUFDLEVBQUUsQ0FBQyxJQUFNLEdBR2xCLEdBRkFvcUYsRUFBV2EsRUFBTSxTQUFZbEIsR0FBeUJyekIsRUFBTWt0QixFQUFLLEVBQ2pFOXJCLEdBQU9zeUIsQ0FBUSxFQUNaUyxJQUFlLEdBQUksQ0FDckIsSUFBSU0sRUFBU3owQixFQUFLLEVBQ2xCQSxFQUFLLEVBQUlpeUIsRUFBTWtDLENBQVUsRUFBRSxDQUFDLEVBQzVCQyxFQUFVWCxHQUFpQnp6QixFQUFLMHpCLENBQVEsRUFDeEMxekIsRUFBSyxFQUFJeTBCLENBQ1QsVUFDUXhDLEVBQU0zb0YsQ0FBQyxFQUFFLENBQUMsSUFBTSxFQUFHLENBQzVCLEdBQUdvcUYsSUFBYSxFQUFHLENBQUVTLEVBQWE3cUYsRUFBRzAyRCxFQUFLLEVBQUlpeUIsRUFBTTNvRixFQUFFLENBQUMsRUFBRSxDQUFDLEVBQUcsUUFBVyxDQUN4RThxRixFQUFVWCxHQUFpQnp6QixFQUFLMHpCLENBQVEsQ0FDNUMsS0FBVSxDQUNOLElBQUlod0YsRUFBTzB3RixFQUFRbkMsRUFBTTNvRixDQUFDLEVBQUUsQ0FBQyxDQUFDLEVBQzFCWSxFQUVKLE9BQU84MUQsRUFBS0EsRUFBSyxDQUFDLEVBQUMsQ0FDbEIsSUFBSyxJQUFrQkEsRUFBSyxHQUFLLEVBQUc5MUQsRUFBTXlwRixHQUFXM3pCLENBQUksRUFBRyxNQUM1RCxJQUFLLElBQW1CQSxFQUFLLEdBQUssRUFBRzkxRCxFQUFNNm9GLEdBQWUveUIsRUFBTUEsRUFBS0EsRUFBSyxFQUFFLENBQUMsQ0FBQyxFQUFFLFFBQVEsV0FBVyxFQUFFLEVBQUcsTUFDeEcsSUFBSyxJQUFvQkEsRUFBSyxHQUFLLEVBQUc5MUQsRUFBTTZvRixHQUFlL3lCLEVBQU1BLEVBQUtBLEVBQUssRUFBRSxDQUFDLENBQUMsRUFBRSxRQUFRLFdBQVcsRUFBRSxFQUFHLE1BQ3pHLElBQUssR0FBZ0JBLEVBQUssR0FBSyxFQUFHOTFELEVBQU04MUQsRUFBSyxXQUFXLEVBQUcsR0FBRyxFQUFHLE1BQ2pFLElBQUssSUFBaUJBLEVBQUssR0FBSyxFQUFHOTFELEVBQU04MUQsRUFBSyxXQUFXLENBQUMsRUFBRyxNQUM3RCxJQUFLLEdBQWdCQSxFQUFLLEdBQUssRUFBRzkxRCxFQUFNODFELEVBQUssV0FBVyxFQUFHLEdBQUcsRUFBRyxNQUNqRSxJQUFLLElBQWtCQSxFQUFLLEdBQUssRUFBRzkxRCxFQUFNd3FGLEdBQVUxMEIsRUFBTSxDQUFDLEVBQUcsTUFDOUQsSUFBSyxJQUFzQkEsRUFBSyxHQUFLLEVBQUc5MUQsRUFBTW0wRSxHQUFVaVUsR0FBZXR5QixDQUFJLENBQUMsRUFBRyxNQUMvRSxRQUFTLE1BQU0sSUFBSSxNQUFNLG1CQUFxQkEsRUFBS0EsRUFBSyxDQUFDLENBQUMsQ0FDMUQsQ0FDRHUwQixFQUFNN3dGLENBQUksRUFBSXdHLENBQ2QsQ0FFRixDQUNELE9BQUE4MUQsRUFBSyxFQUFJaTBCLEVBQWF0OUUsRUFDZjQ5RSxDQUNSLENBQ0EsSUFBSUksR0FBWSxDQUFFLFdBQVksWUFBYSxnQkFBaUIsY0FBZSxtQkFBb0IsU0FDL0YsU0FBU0MsR0FBb0IxcUYsRUFBd0IsQ0FDcEQsT0FBTyxPQUFPQSxFQUFHLENBQ2hCLElBQUssVUFBVyxNQUFPLElBQ3ZCLElBQUssU0FBVSxPQUFTQSxFQUFJLElBQUlBLEVBQU8sRUFBTyxFQUM5QyxJQUFLLFNBQVUsTUFBTyxJQUN0QixJQUFLLFNBQVUsR0FBR0EsYUFBZSxLQUFNLE1BQU8sSUFBTSxLQUNwRCxDQUNELE1BQU8sRUFDUixDQUNBLFNBQVMycUYsR0FBa0J0OUQsRUFBU3U5RCxFQUFJZCxFQUFPLENBQzlDLElBQUllLEVBQU1uakIsR0FBUSxDQUFDLEVBQUdvakIsRUFBTyxDQUFFLEVBQUVoMUUsRUFBTyxHQUNwQ2d2RCxFQUFLLEVBQUcxbEUsRUFBSSxFQUVaMnJGLEVBQUtyakIsR0FBUSxDQUFDLEVBQUdzakIsRUFBTXRqQixHQUFRLENBQUMsRUFPcEMsR0FOQXFqQixFQUFHLFlBQVksRUFBRyxDQUFNLEVBQ3hCQSxFQUFHLFlBQVksRUFBRyxJQUFNLEVBQ3hCQyxFQUFJLFlBQVksRUFBRyxDQUFNLEVBQ3pCbDFFLEVBQUssS0FBS2kxRSxDQUFFLEVBQUdELEVBQUssS0FBS0UsQ0FBRyxFQUM1QmxtQixHQUFNLEVBQUlpbUIsRUFBRyxPQUVWLENBQUNILEVBQUksQ0FDUEksRUFBTXRqQixHQUFRLENBQUMsRUFDZnNqQixFQUFJLFlBQVksRUFBRyxDQUFDLEVBQ3BCRixFQUFLLFFBQVFFLENBQUcsRUFFaEIsSUFBSS94QixFQUFPLENBQUN5TyxHQUFRLENBQUMsQ0FBQyxFQUV0QixJQURBek8sRUFBSyxDQUFDLEVBQUUsWUFBWSxFQUFHNXJDLEVBQVEsTUFBTSxFQUNqQ2p1QixFQUFJLEVBQUdBLEVBQUlpdUIsRUFBUSxPQUFRLEVBQUVqdUIsRUFBRyxDQUNuQyxJQUFJakUsRUFBUWt5QixFQUFRanVCLENBQUMsRUFBRSxDQUFDLEVBS3hCLElBSkEyckYsRUFBS3JqQixHQUFRLEVBQUksRUFBSSxHQUFLdnNFLEVBQU0sT0FBUyxJQUFNQSxFQUFNLE9BQVMsRUFBSSxFQUFJLEVBQUUsRUFDeEU0dkYsRUFBRyxZQUFZLEVBQUczckYsRUFBRSxDQUFDLEVBQ3JCMnJGLEVBQUcsWUFBWSxFQUFHNXZGLEVBQU0sT0FBUyxDQUFDLEVBQ2xDNHZGLEVBQUcsWUFBWSxFQUFHNXZGLEVBQU8sTUFBTSxFQUN6QjR2RixFQUFHLEdBQUtBLEVBQUcsUUFBUUEsRUFBRyxZQUFZLEVBQUcsQ0FBQyxFQUM1Qzl4QixFQUFLLEtBQUs4eEIsQ0FBRSxDQUNaLENBQ0RBLEVBQUsveEIsR0FBUUMsQ0FBSSxFQUNqQm5qRCxFQUFLLFFBQVFpMUUsQ0FBRSxFQUNmam1CLEdBQU0sRUFBSWltQixFQUFHLE1BQ2IsQ0FFRCxJQUFJM3JGLEVBQUksRUFBR0EsRUFBSWl1QixFQUFRLE9BQVEsRUFBRWp1QixFQUNoQyxHQUFHLEVBQUF3ckYsR0FBTSxDQUFDQSxFQUFHdjlELEVBQVFqdUIsQ0FBQyxFQUFFLENBQUMsQ0FBQyxJQUN2QixFQUFBcXJGLEdBQVUsUUFBUXA5RCxFQUFRanVCLENBQUMsRUFBRSxDQUFDLENBQUMsRUFBSSxJQUFNeW5GLEdBQWlCLFFBQVF4NUQsRUFBUWp1QixDQUFDLEVBQUUsQ0FBQyxDQUFDLEVBQUksS0FDbkZpdUIsRUFBUWp1QixDQUFDLEVBQUUsQ0FBQyxHQUFLLEtBRXBCLEtBQUlZLEVBQU1xdEIsRUFBUWp1QixDQUFDLEVBQUUsQ0FBQyxFQUFHaWdELEVBQU0sRUFDL0IsR0FBR3VyQyxFQUFJLENBQ052ckMsRUFBTSxDQUFDdXJDLEVBQUd2OUQsRUFBUWp1QixDQUFDLEVBQUUsQ0FBQyxDQUFDLEVBQ3ZCLElBQUk2ckYsRUFBU25CLEVBQW1CenFDLENBQUcsRUFDbkMsR0FBRzRyQyxFQUFNLEdBQUssV0FBYSxPQUFPanJGLEdBQU8sU0FBVSxDQUVsRCxJQUFJcU0sRUFBTXJNLEVBQUksTUFBTSxHQUFHLEVBQ3ZCQSxHQUFRLENBQUNxTSxFQUFJLENBQUMsR0FBSSxLQUFRLENBQUNBLEVBQUksQ0FBQyxHQUFJLEVBQ3BDLENBQ0QwK0UsRUFBS25CLEdBQXlCcUIsRUFBTSxFQUFHanJGLENBQUcsQ0FDN0MsS0FBUyxDQUNOLElBQUk0aUUsRUFBSThuQixHQUFvQjFxRixDQUFHLEVBQzVCNGlFLEdBQUssS0FBTUEsRUFBSSxHQUFNNWlFLEVBQU0sT0FBT0EsQ0FBRyxHQUN4QytxRixFQUFLbkIsR0FBeUJobkIsRUFBRzVpRSxDQUFHLENBQ3BDLENBQ0Q4VixFQUFLLEtBQUtpMUUsQ0FBRSxFQUVaQyxFQUFNdGpCLEdBQVEsQ0FBQyxFQUNmc2pCLEVBQUksWUFBWSxFQUFJSixFQUFXdnJDLEVBQU4sRUFBRWpnRCxDQUFPLEVBQ2xDMHJGLEVBQUssS0FBS0UsQ0FBRyxFQUVibG1CLEdBQU0sRUFBSWltQixFQUFHLE9BR2QsSUFBSTF1QixFQUFJLEdBQUt2bUQsRUFBSyxPQUFTLEdBQzNCLElBQUkxVyxFQUFJLEVBQUdBLEVBQUkwVyxFQUFLLE9BQVEsRUFBRTFXLEVBQUswckYsRUFBSzFyRixDQUFDLEVBQUUsWUFBWSxFQUFHaTlELENBQUMsRUFBR0EsR0FBS3ZtRCxFQUFLMVcsQ0FBQyxFQUFFLE9BQzNFLE9BQUF5ckYsRUFBSSxZQUFZLEVBQUcvbEIsQ0FBRSxFQUNyQitsQixFQUFJLFlBQVksRUFBRy8wRSxFQUFLLE1BQU0sRUFDdkJrakQsR0FBUSxDQUFDNnhCLENBQUcsRUFBRSxPQUFPQyxDQUFJLEVBQUUsT0FBT2gxRSxDQUFJLENBQUMsQ0FDL0MsQ0FHQSxTQUFTbzFFLEdBQXdCL2xCLEVBQU0ya0IsRUFBT3FCLEVBQU8sQ0FDcEQsSUFBSXIxQixFQUFPcVAsRUFBSyxRQUNoQixHQUFHLENBQUNyUCxFQUFNLE1BQVEsR0FDbEI4TyxHQUFVOU8sRUFBTSxDQUFDLEVBRWpCLElBQUlzMUIsRUFBU0MsRUFBUUMsRUFBUUMsRUFBU0MsRUFBVSxFQUNoRDExQixFQUFLLElBQUksT0FBUSxjQUFjLEVBRWhCQSxFQUFLLFdBQVcsQ0FBQyxFQUNoQyxJQUFJMjFCLEVBQW1CMzFCLEVBQUssV0FBVyxDQUFDLEVBQ3BDNDFCLEVBQVE1MUIsRUFBSyxXQUFXLEVBQUUsRUFDOUIsR0FBRzQxQixJQUFVeG5CLEdBQUksTUFBTSxPQUFPLGNBQWdCd25CLElBQVVQLEVBQU8sTUFBTSxJQUFJLE1BQU0seUJBQTJCTyxDQUFLLEVBRS9HLEdBREFOLEVBQVV0MUIsRUFBSyxXQUFXLENBQUMsRUFDeEJzMUIsSUFBWSxHQUFLQSxJQUFZLEVBQUcsTUFBTSxJQUFJLE1BQU0sdUJBQXlCQSxDQUFPLEVBR25GLEdBRkFDLEVBQVN2MUIsRUFBSyxXQUFXLEVBQUUsRUFBR3kxQixFQUFVejFCLEVBQUssV0FBVyxDQUFDLEVBRXREczFCLElBQVksR0FBS0csSUFBWXoxQixFQUFLLEVBQUcsTUFBTSxJQUFJLE1BQU0sb0JBQXNCeTFCLEVBQVUsUUFBVXoxQixFQUFLLENBQUMsRUFDaEdzMUIsSUFBWSxJQUFLRSxFQUFTeDFCLEVBQUssV0FBVyxFQUFFLEVBQUcwMUIsRUFBVTExQixFQUFLLFdBQVcsQ0FBQyxHQUNsRixJQUFJNjFCLEVBQVE5QixHQUFrQi96QixFQUFNZzBCLENBQUssRUFFckM4QixFQUFRLENBQUUsaUJBQWtCSCxDQUFrQixFQUNsRCxRQUFRcDRDLEtBQUtzNEMsRUFBT0MsRUFBS3Y0QyxDQUFDLEVBQUlzNEMsRUFBTXQ0QyxDQUFDLEVBSXJDLEdBRkF1NEMsRUFBSyxNQUFRUCxFQUVWRCxJQUFZLEVBQUcsT0FBT1EsRUFFekIsR0FER0osRUFBVTExQixFQUFLLEdBQUssSUFBR0EsRUFBSyxHQUFLLEdBQ2pDQSxFQUFLLElBQU0wMUIsRUFBUyxNQUFNLElBQUksTUFBTSxzQkFBd0IxMUIsRUFBSyxFQUFJLFFBQVUwMUIsQ0FBTyxFQUN6RixJQUFJSyxFQUNKLEdBQUksQ0FBRUEsRUFBUWhDLEdBQWtCL3pCLEVBQU0sSUFBSSxDQUFJLE1BQVUsQ0FBYSxDQUNyRSxJQUFJemlCLEtBQUt3NEMsRUFBT0QsRUFBS3Y0QyxDQUFDLEVBQUl3NEMsRUFBTXg0QyxDQUFDLEVBQ2pDLE9BQUF1NEMsRUFBSyxNQUFRLENBQUNQLEVBQVFDLENBQU0sRUFDckJNLENBQ1IsQ0FDQSxTQUFTRSxHQUF3QnorRCxFQUFTODlELEVBQU9QLEVBQUlkLEVBQXFDaUMsRUFBbUJDLEVBQWlCLENBQzdILElBQUluQixFQUFNbmpCLEdBQVFxa0IsRUFBVyxHQUFLLEVBQUUsRUFDaEM5eUIsRUFBTyxDQUFDNHhCLENBQUcsRUFDZkEsRUFBSSxZQUFZLEVBQUcsS0FBTSxFQUN6QkEsRUFBSSxZQUFZLEVBQUcsQ0FBTSxFQUN6QkEsRUFBSSxZQUFZLEVBQUcsU0FBVSxFQUM3QkEsRUFBSSxZQUFZLEdBQUkzbUIsR0FBSSxNQUFNLE9BQU8sYUFBYyxLQUFLLEVBQ3hEMm1CLEVBQUksWUFBWSxFQUFJa0IsRUFBVyxFQUFJLENBQUMsRUFDcENsQixFQUFJLFlBQVksR0FBSU0sRUFBTyxLQUFLLEVBQ2hDTixFQUFJLFlBQVksRUFBSWtCLEVBQVcsR0FBSyxFQUFFLEVBQ3RDLElBQUlFLEVBQU10QixHQUFrQnQ5RCxFQUFTdTlELEVBQUlkLENBQUssRUFHOUMsR0FGQTd3QixFQUFLLEtBQUtnekIsQ0FBRyxFQUVWRixFQUFVLENBQ1osSUFBSUcsRUFBTXZCLEdBQWtCb0IsRUFBVSxLQUFNLElBQUksRUFDaERsQixFQUFJLFlBQVksR0FBSW1CLEVBQVEsS0FBSyxFQUNqQ25CLEVBQUksWUFBWSxFQUFHLEdBQUtvQixFQUFJLE1BQU0sRUFDbENoekIsRUFBSyxLQUFLaXpCLENBQUcsQ0FDYixDQUNELE9BQU9sekIsR0FBUUMsQ0FBSSxDQUNwQixDQUVBLFNBQVNrekIsR0FBV3IyQixFQUFNeHVCLEVBQVEsQ0FBRSxPQUFBd3VCLEVBQUssV0FBV3h1QixDQUFNLEVBQVUsSUFBTyxDQUMzRSxTQUFTOGtELEdBQVk1cEYsRUFBR1ksRUFBRyxDQUFNQSxJQUFHQSxFQUFFc2tFLEdBQVFsbEUsQ0FBQyxHQUFHLFFBQVFrMEQsRUFBRSxFQUFHQSxFQUFFbDBELEVBQUcsRUFBRWswRCxFQUFHdHpELEVBQUUsWUFBWSxFQUFHLENBQUMsRUFBRyxPQUFPQSxDQUFJLENBRXpHLFNBQVNpcEYsR0FBU3YyQixFQUFNeHVCLEVBQVEvbEIsRUFBSSxDQUVuQyxRQURJbFYsRUFBTSxDQUFBLEVBQUk1RixFQUFTcXZELEVBQUssRUFBSXh1QixFQUMxQnd1QixFQUFLLEVBQUlydkQsR0FBUTRGLEVBQUksS0FBS2tWLEVBQUd1MEMsRUFBTXJ2RCxFQUFTcXZELEVBQUssQ0FBQyxDQUFDLEVBQ3pELEdBQUdydkQsSUFBV3F2RCxFQUFLLEVBQUcsTUFBTSxJQUFJLE1BQU0sYUFBYSxFQUNuRCxPQUFPenBELENBQ1IsQ0FFQSxTQUFTbStFLEdBQVUxMEIsRUFBTXh1QixFQUFtQixDQUFFLE9BQU93dUIsRUFBSyxXQUFXeHVCLENBQU0sSUFBTSxDQUFNLENBQ3ZGLFNBQVNnbEQsR0FBVXB0RSxFQUFXOWIsRUFBRyxDQUFFLE9BQUlBLElBQUdBLEVBQUVza0UsR0FBUSxDQUFDLEdBQUd0a0UsRUFBRSxZQUFZLEVBQUcsQ0FBQyxDQUFDLENBQUM4YixDQUFDLEVBQVU5YixDQUFJLENBRTNGLFNBQVNtcEYsR0FBWXoyQixFQUF1QyxDQUFFLE9BQU9BLEVBQUssV0FBVyxFQUFHLEdBQUcsQ0FBSSxDQUMvRixTQUFTMDJCLEdBQVl0dEUsRUFBYzliLEVBQUcsQ0FBRSxPQUFJQSxJQUFHQSxFQUFFc2tFLEdBQVEsQ0FBQyxHQUFHdGtFLEVBQUUsWUFBWSxFQUFHOGIsQ0FBQyxFQUFVOWIsQ0FBSSxDQUM3RixTQUFTcXBGLEdBQWEzMkIsRUFBTXh1QixFQUFrQyxDQUFFLE9BQU8ra0QsR0FBU3YyQixFQUFLeHVCLEVBQU9pbEQsRUFBVyxDQUFFLENBS3pHLFNBQVNHLEdBQVU1MkIsRUFBb0IsQ0FDdEMsSUFBSTUyQyxFQUFJNDJDLEVBQUssV0FBVyxDQUFDLEVBQUdwMEQsRUFBSW8wRCxFQUFLLFdBQVcsQ0FBQyxFQUNqRCxPQUFPcDBELElBQU0sRUFBT3dkLEVBQUlBLElBQU0sQ0FDL0IsQ0FDQSxTQUFTeXRFLEdBQVV6dEUsRUFBRyxFQUFjOWIsRUFBRyxDQUN0QyxPQUFJQSxJQUFHQSxFQUFJc2tFLEdBQVEsQ0FBQyxHQUNwQnRrRSxFQUFFLFlBQVksRUFBSyxHQUFLLElBQU8sQ0FBQzhiLEVBQUksQ0FBQyxDQUFDLENBQUNBLEdBQ3ZDOWIsRUFBRSxZQUFZLEVBQUssR0FBSyxJQUFPLEVBQUksR0FDNUJBLENBQ1IsQ0FHQSxTQUFTd3BGLEdBQTJCOTJCLEVBQU14dUIsRUFBUWh1QyxFQUFNLENBQ3ZELElBQUl1ekYsRUFBTS8yQixFQUFLLFdBQVd4OEQsR0FBUUEsRUFBSyxNQUFRLEdBQUssRUFBSSxDQUFDLEVBQ3JEeTdELEVBQVcsWUFHZixHQURHejdELEdBQVFBLEVBQUssTUFBUSxFQUNyQixDQUFDQSxHQUFRQSxFQUFLLE1BQVEsRUFBSSxDQUM1QixJQUFJd3pGLEVBQVloM0IsRUFBSyxXQUFXLENBQUMsRUFDOUJnM0IsSUFBYS8zQixFQUFXLFlBQzdCLE1BQVd6N0QsRUFBSyxNQUFRLEtBQ3RCeTdELEVBQVcsUUFFVHo3RCxFQUFLLE1BQVEsR0FBS0EsRUFBSyxNQUFRLElBQUd5N0QsRUFBVyxTQUNoRCxJQUFJM3hELEVBQUl5cEYsRUFBTS8yQixFQUFLLFdBQVcrMkIsRUFBSzkzQixDQUFRLEVBQUksR0FFL0MsT0FBTzN4RCxDQUNSLENBR0EsU0FBUzJwRixHQUFrQ2ozQixFQUFNLENBR2hELElBQUkrMkIsRUFBTS8yQixFQUFLLFdBQVcsQ0FBQyxFQUFHK08sRUFBUS9PLEVBQUssV0FBVyxDQUFDLEVBQ3RCazNCLEVBQVNub0IsRUFBUSxFQUFLb29CLEVBQVVwb0IsRUFBUSxFQUNyRTl6QixFQUFRLEdBQUs4ekIsRUFBUSxHQUNyQnFvQixFQUFPLEVBQUdDLEVBQ1Z0c0QsRUFBSSxDQUFBLEVBQ0xvc0QsSUFBU0MsRUFBT3AzQixFQUFLLFdBQVcsQ0FBQyxHQUNqQ2szQixJQUFRRyxFQUFXcjNCLEVBQUssV0FBVyxDQUFDLEdBQ3ZDLElBQUlmLEVBQVdoa0IsR0FBUyxFQUFJLFlBQWMsWUFDdEM3M0IsRUFBTTJ6RSxJQUFRLEVBQUksR0FBSy8yQixFQUFLLFdBQVcrMkIsRUFBSzkzQixDQUFRLEVBQ3hELE9BQUdrNEIsSUFBU24zQixFQUFLLEdBQUssRUFBSW8zQixHQUN2QkYsSUFBUWwzQixFQUFLLEdBQUtxM0IsR0FDckJ0c0QsRUFBRSxFQUFJM25CLEVBQ0YrekUsSUFBV3BzRCxFQUFFLElBQU0sTUFBUUEsRUFBRSxFQUFJLE9BQVFBLEVBQUUsRUFBSUEsRUFBRSxHQUU5Q0EsQ0FDUixDQUNBLFNBQVN1c0QsR0FBa0NDLEVBQTZCLENBQ3BFLElBQUNueUQsRUFBT215RCxFQUFNLEdBQUcsR0FFaEJ4QyxFQUFNbmpCLEdBQVEsRUFBcUIsQ0FBRSxFQUN6Q21qQixFQUFJLFlBQVksRUFBRzN2RCxFQUFJLE1BQU0sRUFDN0IydkQsRUFBSSxZQUFZLEVBQXVCLENBQVksRUFHbkQsSUFBSXlDLEVBQVE1bEIsR0FBUSxFQUFJeHNDLEVBQUksTUFBTSxFQUNsQ295RCxFQUFNLFlBQVksRUFBSXB5RCxFQUFJLE9BQVFBLEVBQUssU0FBUyxFQUVoRCxJQUFJaytCLEVBQU0sQ0FBQ3l4QixFQUFLeUMsQ0FBSyxFQUVyQixPQUFPdDBCLEdBQVFJLENBQUcsQ0FDbkIsQ0FHQSxTQUFTbTBCLEdBQTJCejNCLEVBQU0rMkIsRUFBS3Z6RixFQUFNLENBQ3BELElBQUkybkUsRUFDSixHQUFHM25FLEVBQU0sQ0FDUixHQUFHQSxFQUFLLE1BQVEsR0FBS0EsRUFBSyxNQUFRLEVBQUcsT0FBT3c4RCxFQUFLLFdBQVcrMkIsRUFBSyxPQUFPLEVBQ3hFLEdBQUd2ekYsRUFBSyxNQUFRLEdBQUksT0FBT3c4RCxFQUFLLFdBQVcrMkIsRUFBSyxXQUFXLENBQzNELENBQ0QsSUFBSUMsRUFBWWgzQixFQUFLLFdBQVcsQ0FBQyxFQUNqQyxPQUFHZzNCLElBQVksRUFBSzdyQixFQUFTbkwsRUFBSyxXQUFXKzJCLEVBQUssV0FBVyxFQUN0RDVyQixFQUFTbkwsRUFBSyxXQUFXKzJCLEVBQUssV0FBVyxFQUN6QzVyQixDQUNSLENBR0EsU0FBU3VzQixHQUFzQjEzQixFQUFNeHVCLEVBQVFodUMsRUFBTSxDQUNsRCxJQUFJdXpGLEVBQU0vMkIsRUFBSyxXQUFXeDhELEdBQVFBLEVBQUssTUFBUSxFQUFJLEVBQUksQ0FBQyxFQUN4RCxPQUFHdXpGLElBQVEsR0FBSy8yQixFQUFLLElBQVksSUFDMUJ5M0IsR0FBMkJ6M0IsRUFBTSsyQixFQUFLdnpGLENBQUksQ0FDbEQsQ0FFQSxTQUFTbTBGLEdBQXVCMzNCLEVBQU14dUIsRUFBUWh1QyxFQUFNLENBQ25ELEdBQUdBLEVBQUssS0FBTyxFQUFHLE9BQU9rMEYsR0FBc0IxM0IsRUFBTXh1QixFQUFRaHVDLENBQUksRUFDakUsSUFBSXV6RixFQUFNLzJCLEVBQUssV0FBVyxDQUFDLEVBQzNCLE9BQUcrMkIsSUFBUSxHQUFLLzJCLEVBQUssSUFBWSxJQUMxQkEsRUFBSyxXQUFXKzJCLEVBQU12ekYsRUFBSyxNQUFRLEdBQUssQ0FBQ3c4RCxFQUFLLEtBQVMsUUFBVSxXQUFXLENBQ3BGLENBRUEsU0FBUzQzQixHQUFzQnh5RCxFQUFLNWhDLEVBQU04SixFQUFHLENBQzVDLE9BQUlBLElBQUdBLEVBQUlza0UsR0FBUSxFQUFJLEVBQUl4c0MsRUFBSSxNQUFNLEdBQ3JDOTNCLEVBQUUsWUFBWSxFQUFHODNCLEVBQUksTUFBTSxFQUMzQjkzQixFQUFFLFlBQVksRUFBRyxDQUFDLEVBQ2xCQSxFQUFFLFlBQVksR0FBSTgzQixFQUFLLFNBQVMsRUFDekI5M0IsQ0FDUixDQUdBLFNBQVN1cUYsR0FBa0I3M0IsRUFBMEIsQ0FDcEQsSUFBSStPLEVBQVEvTyxFQUFLLFdBQVcsQ0FBQyxFQUM3QkEsRUFBSyxJQUNMLElBQUk4M0IsRUFBUTkzQixFQUFLLFdBQVcsQ0FBQyxFQUM3QixPQUFBQSxFQUFLLEdBQUssRUFDSCxDQUFDK08sRUFBTytvQixDQUFLLENBQ3JCLENBR0EsU0FBU0MsR0FBaUIvM0IsRUFBMEIsQ0FDbkQsSUFBSTc2QixFQUFNNjZCLEVBQUssV0FBVyxDQUFDLEVBQUd4MkMsRUFBUXcyQyxFQUFLLEVBQ3ZDclosRUFBUSxHQUNUeGhCLEVBQU0sS0FFUjY2QixFQUFLLEdBQUs3NkIsRUFBTSxHQUNiNjZCLEVBQUssV0FBVyxFQUFFLElBQU0scUNBQW9DclosRUFBUSxJQUN2RXFaLEVBQUssRUFBSXgyQyxHQUVWLElBQUkyRCxFQUFNNnlDLEVBQUssWUFBWXJaLEVBQU14aEIsRUFBSSxHQUFHQSxJQUFNLEVBQUcsU0FBUyxFQUFFLFFBQVF1K0IsR0FBSyxFQUFFLEVBQzNFLE9BQUcvYyxJQUFPcVosRUFBSyxHQUFLLElBQ2I3eUMsQ0FDUixDQUdBLFNBQVM2cUUsR0FBa0JoNEIsRUFBb0IsQ0FFM0IsUUFEZmk0QixFQUFRajRCLEVBQUssV0FBVyxDQUFDLEVBQ3pCazRCLEVBQVcsR0FBVUQsS0FBVSxHQUFHQyxHQUFZLE1BQ2xELElBQUlDLEVBQVduNEIsRUFBSyxXQUFXLEVBQUcsWUFBWSxFQUU5QyxHQURBQSxFQUFLLEdBQUssRUFDUEEsRUFBSyxXQUFXLENBQUMsR0FBSyxNQUFRLE1BQU0sSUFBSSxNQUFNLGlCQUFpQixFQUNsRSxJQUFJZ1AsRUFBS2hQLEVBQUssV0FBVyxDQUFDLEVBQzFCLEdBQUdnUCxJQUFPLEVBQUcsT0FBT2twQixFQUFXQyxFQUFTLFFBQVEsTUFBTSxHQUFHLEVBQ3pELElBQUl2RSxFQUFRNXpCLEVBQUssV0FBVyxDQUFDLEVBQzdCLEdBQUdBLEVBQUssV0FBVyxDQUFDLEdBQUssRUFBRyxNQUFNLElBQUksTUFBTSxpQkFBaUIsRUFDN0QsSUFBSW80QixFQUFjcDRCLEVBQUssV0FBVzR6QixHQUFPLEVBQUcsU0FBUyxFQUFFLFFBQVFsd0IsR0FBSyxFQUFFLEVBQ3RFLE9BQU93MEIsRUFBV0UsQ0FDbkIsQ0FHQSxTQUFTQyxHQUF1QnI0QixFQUFNeHVCLEVBQVEsQ0FDN0MsSUFBSTZqRCxFQUFRcjFCLEVBQUssV0FBVyxFQUFFLEVBQzlCLE9BQU9xMUIsRUFBSyxDQUNYLElBQUssbUNBQW9DLE9BQU8wQyxHQUFpQi8zQixDQUFZLEVBQzdFLElBQUssbUNBQW9DLE9BQU9nNEIsR0FBa0JoNEIsQ0FBWSxFQUM5RSxRQUFTLE1BQU0sSUFBSSxNQUFNLHVCQUF5QnExQixDQUFLLENBQ3ZELENBQ0YsQ0FHQSxTQUFTaUQsR0FBc0J0NEIsRUFBb0IsQ0FDbEQsSUFBSTc2QixFQUFNNjZCLEVBQUssV0FBVyxDQUFDLEVBQ3ZCMXlELEVBQUk2M0IsRUFBTSxFQUFJNjZCLEVBQUssV0FBVzc2QixFQUFLLFNBQVMsRUFBRSxRQUFRdStCLEdBQU0sRUFBRSxFQUFJLEdBQ3RFLE9BQU9wMkQsQ0FDUixDQUNBLFNBQVNpckYsR0FBc0JuekQsRUFBZ0I5M0IsRUFBRyxDQUM3Q0EsSUFBR0EsRUFBSXNrRSxHQUFRLEVBQUl4c0MsRUFBSSxPQUFTLENBQUMsR0FDckM5M0IsRUFBRSxZQUFZLEVBQUcsRUFBSTgzQixFQUFJLE1BQU0sRUFDL0IsUUFBUTk3QixFQUFJLEVBQUdBLEVBQUk4N0IsRUFBSSxPQUFRLEVBQUU5N0IsRUFBR2dFLEVBQUUsWUFBWSxFQUFHODNCLEVBQUksV0FBVzk3QixDQUFDLENBQUMsRUFDdEUsT0FBQWdFLEVBQUUsWUFBWSxFQUFHLENBQUMsRUFDWEEsQ0FDUixDQUdBLFNBQVNrckYsR0FBZ0J4NEIsRUFBTXh1QixFQUFzQixDQUNwRCxJQUFJK3VCLEVBQU1QLEVBQUssRUFBSXh1QixFQUNmaW5ELEVBQU96NEIsRUFBSyxXQUFXLENBQUMsRUFDNUIsR0FBR3k0QixJQUFTLEVBQUcsTUFBTSxJQUFJLE1BQU0sK0JBQWlDQSxDQUFJLEVBQ3BFLElBQUkxcEIsRUFBUS9PLEVBQUssV0FBVyxDQUFDLEVBQzdCQSxFQUFLLEdBQUssRUFDVixJQUFJMDRCLEVBQWFDLEVBQWlCQyxFQUFTQyxFQUFZQyxFQUFJLEdBQUlDLEVBQU1DLEVBQ2xFanFCLEVBQVEsS0FBUTJwQixFQUFjSixHQUFzQnQ0QixFQUFNTyxFQUFNUCxFQUFLLENBQUMsR0FDdEUrTyxFQUFRLE1BQVE0cEIsRUFBa0JMLEdBQXNCdDRCLEVBQU1PLEVBQU1QLEVBQUssQ0FBQyxJQUN6RStPLEVBQVEsT0FBWSxNQUFRNnBCLEVBQVVOLEdBQXNCdDRCLEVBQU1PLEVBQU1QLEVBQUssQ0FBQyxJQUM5RStPLEVBQVEsT0FBWSxJQUFROHBCLEVBQWFSLEdBQXVCcjRCLEVBQU1PLEVBQU1QLEVBQUssQ0FBQyxHQUNuRitPLEVBQVEsSUFBUStwQixFQUFNUixHQUFzQnQ0QixFQUFNTyxFQUFNUCxFQUFLLENBQUMsR0FDOUQrTyxFQUFRLEtBQVFncUIsRUFBTy80QixFQUFLLFdBQVcsRUFBRSxHQUN6QytPLEVBQVEsS0FBUWlxQixFQUFXMUcsR0FBZXR5QixDQUFJLEdBQ2pEQSxFQUFLLEVBQUlPLEVBQ1QsSUFBSTV2RCxFQUFTZ29GLEdBQWlCQyxHQUFTQyxHQUFZLEdBQ2hEbG9GLEdBQVVtb0YsSUFBS25vRixHQUFRLElBQUltb0YsR0FDMUJub0YsSUFBUUEsRUFBUyxJQUFNbW9GLEdBQ3ZCL3BCLEVBQVEsR0FBV3ArRCxFQUFPLE9BQU8sQ0FBQyxHQUFLLEtBQU9BLEVBQU8sT0FBTyxDQUFDLEdBQUssTUFBS0EsRUFBUyxVQUFZQSxHQUNoRyxJQUFJMnlELEVBQU8sQ0FBQyxPQUFPM3lELENBQU0sRUFDekIsT0FBR29vRixJQUFNejFCLEVBQUksS0FBT3kxQixHQUNqQkMsSUFBVTExQixFQUFJLEtBQU8wMUIsR0FDckJOLElBQWFwMUIsRUFBSSxRQUFVbzFCLEdBQ3ZCcDFCLENBQ1IsQ0FDQSxTQUFTMjFCLEdBQWdCQyxFQUFJLENBQzVCLElBQUk1MUIsRUFBTXNPLEdBQVEsR0FBRyxFQUFHdG9FLEVBQUksRUFDeEI2dkYsRUFBU0QsRUFBRyxPQUNiQyxFQUFPLE1BQU0sRUFBRSxDQUFDLEdBQUssWUFBV0EsRUFBU0EsRUFBTyxNQUFNLENBQUMsR0FDMUQsSUFBSUMsRUFBVUQsRUFBTyxRQUFRLEdBQUcsRUFDNUJFLEVBQUlELEVBQVUsR0FBSyxHQUFPLEdBQzlCLE9BQU9ELEVBQU8sT0FBTyxDQUFDLEVBQUMsQ0FBSSxJQUFLLElBQUtFLEVBQUUsR0FBTSxNQUFPLElBQUssSUFBS0EsR0FBRyxHQUFJLEtBQVEsQ0FDN0UvMUIsRUFBSSxZQUFZLEVBQUUsQ0FBQyxFQUFHQSxFQUFJLFlBQVksRUFBRysxQixDQUFDLEVBQzFDLElBQUl2K0UsRUFBTyxDQUFDLEVBQUUsUUFBUSxRQUFRLFFBQVEsRUFBRSxFQUFHLElBQUl4UixFQUFJLEVBQUdBLEVBQUl3UixFQUFLLE9BQVEsRUFBRXhSLEVBQUdnNkQsRUFBSSxZQUFZLEVBQUd4b0QsRUFBS3hSLENBQUMsQ0FBQyxFQUN0RyxHQUFHK3ZGLEdBQUssR0FDUEYsRUFBU0EsRUFBTyxNQUFNLENBQUMsRUFDdkJaLEdBQXNCWSxFQUFRNzFCLENBQUcsVUFDeEIrMUIsRUFBSSxFQUFNLENBRW5CLElBREF2K0UsRUFBTyxrREFBa0QsTUFBTSxHQUFHLEVBQzlEeFIsRUFBSSxFQUFHQSxFQUFJd1IsRUFBSyxPQUFRLEVBQUV4UixFQUFHZzZELEVBQUksWUFBWSxFQUFHLFNBQVN4b0QsRUFBS3hSLENBQUMsRUFBRyxFQUFFLENBQUMsRUFDekUsSUFBSWd3RixFQUFZRixFQUFVLEdBQUtELEVBQU8sTUFBTSxFQUFHQyxDQUFPLEVBQUlELEVBRTFELElBREE3MUIsRUFBSSxZQUFZLEVBQUcsR0FBR2cyQixFQUFVLE9BQVMsRUFBRSxFQUN2Q2h3RixFQUFJLEVBQUdBLEVBQUlnd0YsRUFBVSxPQUFRLEVBQUVod0YsRUFBR2c2RCxFQUFJLFlBQVksRUFBR2cyQixFQUFVLFdBQVdod0YsQ0FBQyxDQUFDLEVBQ2hGZzZELEVBQUksWUFBWSxFQUFHLENBQUMsRUFDakIrMUIsRUFBSSxHQUFNZCxHQUFzQmEsRUFBVSxHQUFLRCxFQUFPLE1BQU1DLEVBQVEsQ0FBQyxFQUFHLEdBQUk5MUIsQ0FBRyxDQUNwRixLQUFRLENBRU4sSUFEQXhvRCxFQUFPLGtEQUFrRCxNQUFNLEdBQUcsRUFDOUR4UixFQUFJLEVBQUdBLEVBQUl3UixFQUFLLE9BQVEsRUFBRXhSLEVBQUdnNkQsRUFBSSxZQUFZLEVBQUcsU0FBU3hvRCxFQUFLeFIsQ0FBQyxFQUFHLEVBQUUsQ0FBQyxFQUV6RSxRQURJNjdELEVBQUksRUFDRmcwQixFQUFPLE1BQU1oMEIsRUFBRSxFQUFFQSxFQUFFLEVBQUUsQ0FBQyxHQUFHLE9BQU9nMEIsRUFBTyxNQUFNaDBCLEVBQUUsRUFBRUEsRUFBRSxFQUFFLENBQUMsR0FBRyxRQUFRLEVBQUVBLEVBR3pFLElBRkE3QixFQUFJLFlBQVksRUFBRzZCLENBQUMsRUFDcEI3QixFQUFJLFlBQVksRUFBRzYxQixFQUFPLE9BQVMsRUFBSWgwQixFQUFJLENBQUMsRUFDeEM3N0QsRUFBSSxFQUFHQSxFQUFJNnZGLEVBQU8sT0FBUyxFQUFJaDBCLEVBQUcsRUFBRTc3RCxFQUFHZzZELEVBQUksWUFBWSxFQUFHNjFCLEVBQU8sV0FBVzd2RixFQUFJLEVBQUk2N0QsQ0FBQyxFQUFJLEdBQUksRUFJakcsSUFIQTdCLEVBQUksWUFBWSxFQUFHLENBQUMsRUFDcEJBLEVBQUksWUFBWSxFQUFHLEtBQU0sRUFDekJBLEVBQUksWUFBWSxFQUFHLEtBQU0sRUFDckJoNkQsRUFBSSxFQUFHQSxFQUFJLEVBQUcsRUFBRUEsRUFBR2c2RCxFQUFJLFlBQVksRUFBRyxDQUFDLENBQzNDLENBQ0QsT0FBT0EsRUFBSSxNQUFNLEVBQUdBLEVBQUksQ0FBQyxDQUMxQixDQUdBLFNBQVNpMkIsR0FBZXY1QixFQUFvQixDQUFFLElBQUl2ekQsRUFBSXV6RCxFQUFLLFdBQVcsQ0FBQyxFQUFHVSxFQUFJVixFQUFLLFdBQVcsQ0FBQyxFQUFHcHNELEVBQUlvc0QsRUFBSyxXQUFXLENBQUMsRUFBRyxFQUFJQSxFQUFLLFdBQVcsQ0FBQyxFQUFHLE1BQU8sQ0FBQ3Z6RCxFQUFFaTBELEVBQUU5c0QsRUFBRSxDQUFDLENBQUksQ0FHckssU0FBUzRsRixHQUFjeDVCLEVBQU14dUIsRUFBUSxDQUFFLElBQUluTSxFQUFJazBELEdBQWV2NUIsQ0FBWSxFQUFHLE9BQUEzNkIsRUFBRSxDQUFDLEVBQUksRUFBVUEsQ0FBSSxDQUlsRyxTQUFTbzBELEdBQWN6NUIsRUFBNkIsQ0FDbkQsSUFBSTA1QixFQUFLMTVCLEVBQUssV0FBVyxDQUFDLEVBQ3RCdmtELEVBQU11a0QsRUFBSyxXQUFXLENBQUMsRUFDdkIyNUIsRUFBTzM1QixFQUFLLFdBQVcsQ0FBQyxFQUM1QixNQUFRLENBQUMsRUFBRTA1QixFQUFJLEVBQUVqK0UsRUFBSyxLQUFLaytFLENBQUksQ0FDaEMsQ0FDQSxTQUFTQyxHQUFjcnJCLEVBQWNOLEVBQWMwckIsRUFBa0Jyc0YsRUFBRyxDQUN2RSxPQUFJQSxJQUFHQSxFQUFJc2tFLEdBQVEsQ0FBQyxHQUNwQnRrRSxFQUFFLFlBQVksRUFBR2loRSxDQUFDLEVBQ2xCamhFLEVBQUUsWUFBWSxFQUFHMmdFLENBQUMsRUFDbEIzZ0UsRUFBRSxZQUFZLEVBQUdxc0YsR0FBTSxDQUFDLEVBQ2pCcnNGLENBQ1IsQ0FHQSxTQUFTdXNGLEdBQWdCNzVCLEVBQU0sQ0FDOUIsSUFBSTg1QixFQUFLOTVCLEVBQUssV0FBVyxDQUFDLEVBQ3RCK08sRUFBUS9PLEVBQUssV0FBVyxDQUFDLEVBQzdCLE9BQUFBLEVBQUssR0FBSyxFQUNILENBQUMsS0FBTTg1QixFQUFJLE1BQU8vcUIsQ0FBSyxDQUMvQixDQUlBLFNBQVNnckIsR0FBeUIvNUIsRUFBTXh1QixFQUFRaHVDLEVBQU0sQ0FBRSxPQUFPZ3VDLElBQVcsRUFBSSxHQUFLbW1ELEdBQXVCMzNCLEVBQU14dUIsRUFBUWh1QyxDQUFJLENBQUksQ0FHaEksU0FBU3cyRixHQUFVaDZCLEVBQU14dUIsRUFBUWh1QyxFQUFNLENBQ3RDLElBQUkraUUsRUFBSS9pRSxFQUFLLEtBQU8sRUFBSSxFQUFJLEVBQ3hCeTJGLEVBQVdqNkIsRUFBSyxXQUFXdUcsQ0FBQyxFQUFHMnpCLEVBQVlsNkIsRUFBSyxXQUFXdUcsRUFBRSxHQUFHLEVBQUc0ekIsRUFBV242QixFQUFLLFdBQVd1RyxFQUFFLEdBQUcsRUFDdkcsTUFBTyxDQUFDMHpCLEVBQVVDLEVBQVdDLENBQVEsQ0FDdEMsQ0FHQSxTQUFTQyxHQUFZcDZCLEVBQU0sQ0FDMUIsSUFBSTI1QixFQUFPMzVCLEVBQUssV0FBVyxDQUFDLEVBQ3hCc3JCLEVBQUtILEdBQWVuckIsQ0FBSSxFQUM1QixNQUFPLENBQUMyNUIsRUFBTXJPLENBQUUsQ0FDakIsQ0FHQSxTQUFTK08sR0FBZXI2QixFQUFNeHVCLEVBQVFodUMsRUFBTSxDQUMzQ3c4RCxFQUFLLEdBQUssRUFBR3h1QixHQUFVLEVBQ3ZCLElBQUl0akIsRUFBSTh4QyxFQUFLLEVBQUl4dUIsRUFDYjhvRCxFQUFVeEQsR0FBMkI5MkIsRUFBTXh1QixFQUFRaHVDLENBQUksRUFDdkRpb0IsRUFBS3UwQyxFQUFLLFdBQVcsQ0FBQyxFQUUxQixHQURBOXhDLEdBQUs4eEMsRUFBSyxFQUNQdjBDLElBQU95QyxFQUFHLE1BQU0sSUFBSSxNQUFNLGlDQUFtQ0EsRUFBSSxPQUFTekMsQ0FBRSxFQUMvRSxPQUFBdTBDLEVBQUssR0FBS3YwQyxFQUNINnVFLENBQ1IsQ0FHQSxTQUFTQyxHQUFZdjZCLEVBQW9CLENBQ3hDLElBQUl3NkIsRUFBVXg2QixFQUFLLFdBQVcsQ0FBQyxFQUMzQnk2QixFQUFTejZCLEVBQUssV0FBVyxDQUFDLEVBQzFCMDZCLEVBQVcxNkIsRUFBSyxXQUFXLENBQUMsRUFDNUIyNkIsRUFBVTM2QixFQUFLLFdBQVcsQ0FBQyxFQUMvQixNQUFPLENBQUMsRUFBRSxDQUFDLEVBQUUwNkIsRUFBVSxFQUFFRixDQUFPLEVBQUcsRUFBRSxDQUFDLEVBQUVHLEVBQVFGLENBQVEsQ0FBQyxDQUMxRCxDQUNBLFNBQVNHLEdBQVludUYsRUFBYWEsRUFBRyxDQUNwQyxPQUFJQSxJQUFHQSxFQUFJc2tFLEdBQVEsQ0FBQyxHQUNwQnRrRSxFQUFFLFlBQVksRUFBR2IsRUFBRSxFQUFFLENBQUMsRUFDdEJhLEVBQUUsWUFBWSxFQUFHYixFQUFFLEVBQUUsQ0FBQyxFQUN0QmEsRUFBRSxZQUFZLEVBQUdiLEVBQUUsRUFBRSxDQUFDLEVBQ3RCYSxFQUFFLFlBQVksRUFBR2IsRUFBRSxFQUFFLENBQUMsRUFDZmEsQ0FDUixDQUdBLFNBQVN1dEYsR0FBVzc2QixFQUFvQixDQUN2QyxJQUFJdzZCLEVBQVV4NkIsRUFBSyxXQUFXLENBQUMsRUFDM0J5NkIsRUFBU3o2QixFQUFLLFdBQVcsQ0FBQyxFQUMxQjA2QixFQUFXMTZCLEVBQUssV0FBVyxDQUFDLEVBQzVCMjZCLEVBQVUzNkIsRUFBSyxXQUFXLENBQUMsRUFDL0IsTUFBTyxDQUFDLEVBQUUsQ0FBQyxFQUFFMDZCLEVBQVUsRUFBRUYsQ0FBTyxFQUFHLEVBQUUsQ0FBQyxFQUFFRyxFQUFRRixDQUFRLENBQUMsQ0FDMUQsQ0FHQSxJQUFJSyxHQUFZRCxHQUdoQixTQUFTRSxHQUFZLzZCLEVBQW9CLENBQ3hDQSxFQUFLLEdBQUssRUFDVixJQUFJZzdCLEVBQUtoN0IsRUFBSyxXQUFXLENBQUMsRUFDdEI3bUQsRUFBSzZtRCxFQUFLLFdBQVcsQ0FBQyxFQUN0QitPLEVBQVEvTyxFQUFLLFdBQVcsQ0FBQyxFQUM3QixPQUFBQSxFQUFLLEdBQUcsR0FDRCxDQUFDN21ELEVBQUk2aEYsRUFBSWpzQixDQUFLLENBQ3RCLENBR0EsU0FBU2tzQixHQUFZajdCLEVBQU0sQ0FDMUIsSUFBSXNELEVBQU0sQ0FBQSxFQUNWLE9BQUF0RCxFQUFLLEdBQUssRUFDVkEsRUFBSyxHQUFLLEdBQ1ZzRCxFQUFJLFlBQWN0RCxFQUFLLFdBQVcsQ0FBQyxFQUNuQ0EsRUFBSyxHQUFLLEVBQ0hzRCxDQUNSLENBR0EsU0FBUzQzQixHQUFXbDdCLEVBQU0sQ0FDekIsSUFBSXNELEVBQU0sQ0FBQSxFQUNWLE9BQUF0RCxFQUFLLEdBQUssRUFDVkEsRUFBSyxHQUFLQSxFQUFLLFdBQVcsQ0FBQyxFQUNwQnNELENBQ1IsQ0FHQSxTQUFTNjNCLEdBQWFuN0IsRUFBTSxDQUFFQSxFQUFLLEdBQUssRUFBR0EsRUFBSyxHQUFLQSxFQUFLLFdBQVcsQ0FBQyxDQUFJLENBQzFFLElBQUlvN0IsR0FBUSxDQUNKLEVBQWFELEdBQ2IsRUFBYUEsR0FDYixFQUFhQSxHQUNiLEVBQWFBLEdBQ2IsRUFBYUQsR0FDYixFQUFhQyxHQUNiLEVBQWFBLEdBQ2IsR0FBYUEsR0FDYixHQUFhQSxHQUNiLEdBQWFBLEdBQ2IsR0FBYUYsR0FDYixHQUFhRSxHQUNiLEdBQWFBLEdBQ2IsR0FBYUEsR0FDYixHQUFhQSxHQUNiLEdBQWFBLEdBQ2IsR0FBYUEsR0FDYixHQUFhQSxHQUNiLEdBQWFKLEVBQ3JCLEVBQ0EsU0FBU00sR0FBY3I3QixFQUFNeHVCLEVBQWtCLENBRzlDLFFBRkl5OUIsRUFBTWpQLEVBQUssRUFBSXh1QixFQUNmOHBELEVBQU0sQ0FBQSxFQUNKdDdCLEVBQUssRUFBSWlQLEdBQUssQ0FDbkIsSUFBSXNzQixFQUFLdjdCLEVBQUssV0FBVyxDQUFDLEVBQzFCQSxFQUFLLEdBQUcsRUFDUixHQUFJLENBQ0hzN0IsRUFBSSxLQUFLRixHQUFNRyxDQUFFLEVBQUV2N0IsRUFBTWlQLEVBQU1qUCxFQUFLLENBQUMsQ0FBQyxDQUN6QyxNQUFhLENBQUUsT0FBQUEsRUFBSyxFQUFJaVAsRUFBWXFzQixDQUFNLENBQ3hDLENBQ0QsT0FBR3Q3QixFQUFLLEdBQUtpUCxJQUFLalAsRUFBSyxFQUFJaVAsR0FDcEJxc0IsQ0FDUixDQUtBLFNBQVNFLEdBQVV4N0IsRUFBTXh1QixFQUFRLENBQ2hDLElBQUlsa0MsRUFBSSxDQUFDLFFBQVEsRUFBRyxHQUFHLENBQUMsRUFHeEIsT0FGQUEsRUFBRSxRQUFVMHlELEVBQUssV0FBVyxDQUFDLEVBQUd4dUIsR0FBVSxFQUN2Q0EsR0FBVSxJQUFLbGtDLEVBQUUsR0FBSzB5RCxFQUFLLFdBQVcsQ0FBQyxFQUFHQSxFQUFLLEdBQUssR0FDaEQxeUQsRUFBRSxRQUFPLENBQ2YsSUFBSyxNQUNMLElBQUssTUFDTCxJQUFLLE1BQ0wsSUFBSyxLQUNMLElBQUssS0FDTCxJQUFLLEdBQVEsSUFBSyxHQUNqQixNQUNELFFBQVMsR0FBR2trQyxFQUFTLEVBQUcsTUFBTSxJQUFJLE1BQU0sdUJBQXlCbGtDLEVBQUUsT0FBTyxDQUMxRSxDQUVELE9BQUEweUQsRUFBSyxXQUFXeHVCLENBQU0sRUFDZmxrQyxDQUNSLENBQ0EsU0FBU211RixHQUFVQyxFQUFpQixFQUFjcHVGLEVBQUcsQ0FDcEQsSUFBSW1rQixFQUFJLEtBQVE4MEMsRUFBSSxHQUNwQixPQUFPajVELEVBQUUsU0FBUSxDQUNoQixJQUFLLFFBQVMsTUFDZCxJQUFLLFFBQVNta0IsRUFBSSxLQUFRODBDLEVBQUksRUFBRyxNQUNqQyxJQUFLLFFBQVM5MEMsRUFBSSxFQUFRODBDLEVBQUksRUFBRyxNQUNqQyxJQUFLLFFBQVM5MEMsRUFBSSxFQUFRODBDLEVBQUksRUFBRyxNQUNqQyxJQUFLLFFBQVM5MEMsRUFBSSxFQUFRODBDLEVBQUksRUFBRyxNQUNqQyxJQUFLLE1BQU8sTUFDWixRQUFTLE1BQU0sSUFBSSxNQUFNLDBCQUEwQixDQUNuRCxDQUNELElBQUlqRCxFQUFNc08sR0FBUXJMLENBQUMsRUFDbkIsT0FBQWpELEVBQUksWUFBWSxFQUFHN3hDLENBQUMsRUFDcEI2eEMsRUFBSSxZQUFZLEVBQUcsQ0FBQyxFQUNqQmlELEVBQUksR0FBR2pELEVBQUksWUFBWSxFQUFHLEtBQU0sRUFDaENpRCxFQUFJLEdBQUdqRCxFQUFJLFlBQVksRUFBRyxJQUFNLEVBQ2hDaUQsRUFBSSxJQUNOakQsRUFBSSxZQUFZLEVBQUcsS0FBTSxFQUN6QkEsRUFBSSxZQUFZLEVBQUcsQ0FBTSxFQUN6QkEsRUFBSSxZQUFZLEVBQUcsSUFBTSxFQUN6QkEsRUFBSSxZQUFZLEVBQUcsQ0FBTSxHQUVuQkEsQ0FDUixDQUlBLFNBQVNxNEIsR0FBbUIzN0IsRUFBTXh1QixFQUFRLENBQ3pDLE9BQUdBLElBQVcsR0FDVnd1QixFQUFLLFdBQVcsQ0FBQyxFQUNkLElBQ1IsQ0FJQSxTQUFTNDdCLEdBQWtCNTdCLEVBQU14dUIsRUFBUWh1QyxFQUFNLENBQzlDLEdBQUdBLEVBQUssSUFBTyxPQUFBdzhELEVBQUssR0FBS3h1QixFQUFlLEdBQ3hDLElBQUl0akIsRUFBSTh4QyxFQUFLLEVBRVQ2N0IsRUFBV2xFLEdBQXVCMzNCLEVBQU0sRUFBR3g4RCxDQUFJLEVBQ25ELE9BQUF3OEQsRUFBSyxXQUFXeHVCLEVBQVN0akIsRUFBSTh4QyxFQUFLLENBQUMsRUFDNUI2N0IsQ0FDUixDQUNBLFNBQVNDLEdBQWtCbnZGLEVBQWNuSixFQUFNLENBQzlDLElBQUl1NEYsRUFBSyxDQUFDdjRGLEdBQVFBLEVBQUssTUFBUSxFQUMzQjhKLEVBQUlza0UsR0FBUW1xQixFQUFLLElBQU0sRUFBRSxFQUs3QixJQUpBenVGLEVBQUUsWUFBWTlKLEVBQUssTUFBUSxFQUFJLEVBQUksRUFBRyxDQUFDLEVBQ3BDdTRGLEdBQUl6dUYsRUFBRSxZQUFZLEVBQUcsQ0FBQyxFQUN6QkEsRUFBRSxZQUFZLEVBQUcsU0FBVSxFQUMzQkEsRUFBRSxZQUFZLEVBQUksU0FBY3l1RixFQUFLLEVBQUksWUFDbkN6dUYsRUFBRSxFQUFJQSxFQUFFLFFBQVFBLEVBQUUsWUFBWSxFQUFJeXVGLEVBQUssRUFBSSxFQUFFLEVBQ25ELE9BQU96dUYsQ0FDUixDQUdBLFNBQVMwdUYsR0FBYWg4QixFQUFNeHVCLEVBQVFodUMsRUFBTSxDQUN6QyxJQUFJdXJFLEVBQVF2ckUsR0FBUUEsRUFBSyxNQUFRLEdBQUtndUMsR0FBVSxFQUFJd3VCLEVBQUssV0FBVyxDQUFDLEdBQUtBLEVBQUssR0FBS3h1QixFQUFRLEdBQzVGLE1BQU8sQ0FBRSxRQUFTdTlCLEVBQVEsR0FBTSxPQUFRQSxFQUFRLEdBQU0sT0FBUUEsRUFBUSxJQUN2RSxDQUdBLFNBQVNrdEIsR0FBa0JqOEIsRUFBTXh1QixFQUFRaHVDLEVBQU0sQ0FDOUMsSUFBSXlpRixFQUFNam1CLEVBQUssV0FBVyxDQUFDLEVBQ3ZCazhCLEVBQVNsOEIsRUFBSyxXQUFXLENBQUMsRUFBSSxFQUM5Qi8xQyxFQUFLKzFDLEVBQUssV0FBVyxDQUFDLEVBQzFCLE9BQU8vMUMsRUFBRSxDQUNSLElBQUssR0FBR0EsRUFBSyxZQUFhLE1BQzFCLElBQUssR0FBR0EsRUFBSyxhQUFjLE1BQzNCLElBQUssR0FBR0EsRUFBSyxhQUFjLE1BQzNCLElBQUssR0FBR0EsRUFBSyxZQUFhLEtBQzFCLENBQ0QsSUFBSXZtQixFQUFPb3pGLEdBQTJCOTJCLEVBQU0sRUFBR3g4RCxDQUFJLEVBQ25ELE9BQUdFLEVBQUssU0FBVyxJQUFHQSxFQUFPLFVBQ3RCLENBQUUsSUFBSXVpRixFQUFLLEdBQUdpVyxFQUFRLEdBQUdqeUUsRUFBSSxLQUFLdm1CLEVBQzFDLENBQ0EsU0FBU3k0RixHQUFrQnJoRixFQUFNdFgsRUFBTSxDQUN0QyxJQUFJK2lFLEVBQUssQ0FBQy9pRSxHQUFRQSxFQUFLLE1BQVEsRUFBSSxFQUFJLEVBQ25DOEosRUFBSXNrRSxHQUFRLEVBQUlyTCxFQUFJenJELEVBQUssS0FBSyxNQUFNLEVBQ3hDeE4sRUFBRSxZQUFZLEVBQUd3TixFQUFLLEdBQUcsRUFDekJ4TixFQUFFLFlBQVksRUFBR3dOLEVBQUssSUFBTSxDQUFDLEVBQzdCeE4sRUFBRSxZQUFZLEVBQUd3TixFQUFLLEVBQUUsRUFDeEJ4TixFQUFFLFlBQVksRUFBR3dOLEVBQUssS0FBSyxNQUFNLEVBQzlCdFgsRUFBSyxNQUFRLEdBQUc4SixFQUFFLFlBQVksRUFBRyxDQUFDLEVBQ3JDQSxFQUFFLFlBQVlpNUQsRUFBSXpyRCxFQUFLLEtBQUssT0FBUUEsRUFBSyxLQUFNdFgsRUFBSyxLQUFPLEVBQUksT0FBUyxTQUFTLEVBQ2pGLElBQUk4L0QsRUFBTWgyRCxFQUFFLE1BQU0sRUFBR0EsRUFBRSxDQUFDLEVBQ3hCLE9BQUFnMkQsRUFBSSxFQUFJaDJELEVBQUUsRUFBVWcyRCxDQUNyQixDQUdBLFNBQVM4NEIsR0FBVXA4QixFQUFNeHVCLEVBQWdCLENBS3hDLFFBSkkrdUIsRUFBTVAsRUFBSyxFQUFJeHVCLEVBQ2ZxZ0MsRUFBTTdSLEVBQUssV0FBVyxDQUFDLEVBQ3ZCcThCLEVBQU9yOEIsRUFBSyxXQUFXLENBQUMsRUFDeEJzOEIsRUFBZ0IsQ0FBQSxFQUNaaHpGLEVBQUksRUFBR0EsR0FBSyt5RixHQUFRcjhCLEVBQUssRUFBSU8sRUFBSyxFQUFFajNELEVBQzNDZ3pGLEVBQUssS0FBS3JGLEdBQWtDajNCLENBQUksQ0FBQyxFQUVsRCxPQUFBczhCLEVBQUssTUFBUXpxQixFQUFLeXFCLEVBQUssT0FBU0QsRUFDekJDLENBQ1IsQ0FDQSxTQUFTQyxHQUFVQyxFQUFLaDVGLEVBQU0sQ0FDN0IsSUFBSXVyRCxFQUFTNmlCLEdBQVEsQ0FBQyxFQUN0QjdpQixFQUFPLFlBQVksRUFBR3l0QyxFQUFJLEtBQUssRUFDL0J6dEMsRUFBTyxZQUFZLEVBQUd5dEMsRUFBSSxNQUFNLEVBRWhDLFFBRElGLEVBQU8sQ0FBQSxFQUNIMTdCLEVBQUksRUFBR0EsRUFBSTQ3QixFQUFJLE9BQVEsRUFBRTU3QixFQUFHMDdCLEVBQUsxN0IsQ0FBQyxFQUFJMDJCLEdBQWtDa0YsRUFBSTU3QixDQUFDLENBQU8sRUFDNUYsSUFBSXR6RCxFQUFJNDFELEdBQVEsQ0FBQ25VLENBQU0sRUFBRSxPQUFPdXRDLENBQUksQ0FBQyxFQUM5QixPQUFBaHZGLEVBQWMsTUFBUSxDQUFDeWhELEVBQU8sTUFBTSxFQUFFLE9BQU91dEMsRUFBSyxJQUFJLFNBQVNsM0QsRUFBSyxDQUFFLE9BQU9BLEVBQUksTUFBTyxDQUFFLENBQUMsRUFDM0Y5M0IsQ0FDUixDQUdBLFNBQVNtdkYsR0FBYXo4QixFQUFNeHVCLEVBQVEsQ0FDbkMsSUFBSWtyRCxFQUFTLENBQUEsRUFDYixPQUFBQSxFQUFPLEtBQU8xOEIsRUFBSyxXQUFXLENBQUMsRUFDL0JBLEVBQUssR0FBS3h1QixFQUFPLEVBQ1ZrckQsQ0FDUixDQUlBLFNBQVNDLEdBQVUzOEIsRUFBTSxDQUN4QixJQUFJajFCLEVBQUssQ0FBQSxFQUNUQSxFQUFFLEVBQUlpMUIsRUFBSyxXQUFXLENBQUMsRUFDdkJqMUIsRUFBRSxFQUFJaTFCLEVBQUssV0FBVyxDQUFDLEVBQ3ZCajFCLEVBQUUsSUFBTWkxQixFQUFLLFdBQVcsQ0FBQyxFQUFJajFCLEVBQUUsRUFDL0IsSUFBSTZ4RCxFQUFRNThCLEVBQUssV0FBVyxDQUFDLEVBQzdCQSxFQUFLLEdBQUssRUFDVixJQUFJK08sRUFBUS9PLEVBQUssV0FBVyxDQUFDLEVBQzdCLE9BQUFBLEVBQUssR0FBSyxFQUNQK08sRUFBUSxJQUFNaGtDLEVBQUUsTUFBUWdrQyxFQUFRLEdBRWhDQSxFQUFRLEtBQU1oa0MsRUFBRSxPQUFTLElBQ3pCZ2tDLEVBQVEsS0FBTWhrQyxFQUFFLElBQU02eEQsRUFBUSxJQUMxQjd4RCxDQUNSLENBSUEsU0FBUzh4RCxHQUEyQjc4QixFQUFNLENBQ3pDLElBQUlqUixFQUFTOHFDLEdBQWdCNzVCLENBQUksRUFDakMsR0FBR2pSLEVBQU8sTUFBUSxLQUFRLE1BQU0sSUFBSSxNQUFNLHlCQUEyQkEsRUFBTyxJQUFJLEVBQ2hGLElBQUkrdEMsRUFBVzk4QixFQUFLLFdBQVcsQ0FBQyxFQUNoQyxPQUFPODhCLElBQWEsQ0FDckIsQ0FPQSxTQUFTQyxHQUFlLzhCLEVBQU0sQ0FDN0IsT0FBQUEsRUFBSyxXQUFXLENBQUMsRUFDVkEsRUFBSyxXQUFXLENBQUMsQ0FDekIsQ0FHQSxTQUFTZzlCLEdBQXVCaDlCLEVBQU14dUIsRUFBUWh1QyxFQUFNLENBQ25ELElBQUk2SixFQUFJLEVBQ0g3SixHQUFRQSxFQUFLLE1BQVEsSUFDekI2SixFQUFJMnlELEVBQUssV0FBVyxDQUFDLEdBRXRCLElBQUk0OEIsRUFBUTU4QixFQUFLLFdBQVcsQ0FBQyxFQUN6Qng4RCxHQUFRQSxFQUFLLE1BQVEsSUFDeEI2SixFQUFJLEdBQUt1dkYsR0FBUyxJQUFLQSxHQUFTLE9BRWpDLElBQUlLLEVBQUssQ0FBQyxTQUFTNXZGLEVBQUUsRUFBRSxRQUFRQSxFQUFFLElBQUksRUFBRSxPQUFPQSxFQUFFLElBQUksRUFBRSxPQUFPQSxFQUFFLElBQUksQ0FBQyxFQUNwRSxNQUFPLENBQUM0dkYsRUFBSUwsQ0FBSyxDQUNsQixDQUdBLFNBQVNNLEdBQWNsOUIsRUFBTSxDQUM1QixJQUFJbTlCLEVBQU1uOUIsRUFBSyxXQUFXLENBQUMsRUFBR285QixFQUFNcDlCLEVBQUssV0FBVyxDQUFDLEVBQUdxOUIsRUFBT3I5QixFQUFLLFdBQVcsQ0FBQyxFQUFHczlCLEVBQU90OUIsRUFBSyxXQUFXLENBQUMsRUFDdkcrTyxFQUFRL08sRUFBSyxXQUFXLENBQUMsRUFBR3U5QixFQUFVdjlCLEVBQUssV0FBVyxDQUFDLEVBQUd3OUIsRUFBWXg5QixFQUFLLFdBQVcsQ0FBQyxFQUN2Rnk5QixFQUFVejlCLEVBQUssV0FBVyxDQUFDLEVBQUcwOUIsRUFBWTE5QixFQUFLLFdBQVcsQ0FBQyxFQUMvRCxNQUFPLENBQUUsSUFBSyxDQUFDbTlCLEVBQUtDLENBQUcsRUFBRyxJQUFLLENBQUNDLEVBQU1DLENBQUksRUFBRyxNQUFPdnVCLEVBQU8sT0FBUXd1QixFQUNsRSxTQUFVQyxFQUFXLFNBQVVDLEVBQVMsU0FBVUMsQ0FBUyxDQUM3RCxDQUNBLFNBQVNDLElBQTBCLENBQ2xDLElBQUlyd0YsRUFBSXNrRSxHQUFRLEVBQUUsRUFDbEIsT0FBQXRrRSxFQUFFLFlBQVksRUFBRyxDQUFDLEVBQ2xCQSxFQUFFLFlBQVksRUFBRyxDQUFDLEVBQ2xCQSxFQUFFLFlBQVksRUFBRyxLQUFNLEVBQ3ZCQSxFQUFFLFlBQVksRUFBRyxLQUFNLEVBQ3ZCQSxFQUFFLFlBQVksRUFBRyxFQUFJLEVBQ3JCQSxFQUFFLFlBQVksRUFBRyxDQUFDLEVBQ2xCQSxFQUFFLFlBQVksRUFBRyxDQUFDLEVBQ2xCQSxFQUFFLFlBQVksRUFBRyxDQUFDLEVBQ2xCQSxFQUFFLFlBQVksRUFBRyxHQUFNLEVBQ2hCQSxDQUNSLENBRUEsU0FBU3N3RixHQUFjNTlCLEVBQU14dUIsRUFBUWh1QyxFQUFNLENBQzFDLEdBQUdBLEdBQVFBLEVBQUssTUFBUSxHQUFLQSxFQUFLLEtBQU8sRUFBRyxNQUFPLEdBQ25ELElBQUk2SixFQUFJMnlELEVBQUssV0FBVyxDQUFDLEVBQ3pCLE1BQU8sQ0FBRSxJQUFLM3lELEVBQUksR0FDbkIsQ0FDQSxTQUFTd3dGLEdBQWNqL0IsRUFBTSxDQUM1QixJQUFJdHhELEVBQUlza0UsR0FBUSxFQUFFLEVBQUd2a0UsRUFBSSxLQUN6QixPQUFHdXhELEdBQVFBLEVBQUssTUFBS3Z4RCxHQUFLLElBQzFCQyxFQUFFLFlBQVksRUFBR0QsQ0FBQyxFQUNsQkMsRUFBRSxZQUFZLEVBQUcsQ0FBQyxFQUNsQkEsRUFBRSxZQUFZLEVBQUcsRUFBRSxFQUNuQkEsRUFBRSxZQUFZLEVBQUcsQ0FBQyxFQUNsQkEsRUFBRSxZQUFZLEVBQUcsQ0FBQyxFQUNYQSxDQUNSLENBR0EsU0FBU3d3RixJQUFtQyxDQUM1QyxDQUdBLFNBQVNDLEdBQVcvOUIsRUFBTXh1QixFQUFRaHVDLEVBQU0sQ0FDdkMsSUFBSThKLEVBQVksQ0FDZixTQUFVMHlELEVBQUssV0FBVyxDQUFDLEVBQzNCLEdBQUlBLEVBQUssV0FBVyxDQUFDLENBQ3ZCLEVBQ0MsT0FBUXg4RCxHQUFRQSxFQUFLLE1BQVMsRUFBQyxDQUM5QixJQUFLLEdBQUcsTUFDUixJQUFLLEdBQUcsSUFBSyxHQUFHdzhELEVBQUssR0FBSyxFQUFHLE1BQzdCLFFBQVNBLEVBQUssR0FBSyxHQUFJLEtBQ3ZCLENBQ0QsT0FBQTF5RCxFQUFFLEtBQU93cEYsR0FBMkI5MkIsRUFBTSxFQUFHeDhELENBQUksRUFDMUM4SixDQUNSLENBQ0EsU0FBUzB3RixHQUFXbGpGLEVBQU10WCxFQUFNLENBQy9CLElBQUlFLEVBQU9vWCxFQUFLLE1BQVEsUUFDcEJtakYsRUFBTXo2RixHQUFTQSxFQUFLLE1BQVEsRUFBSytpRSxFQUFLMDNCLEVBQU0sR0FBS3Y2RixFQUFLLE9BQVcsR0FBSyxFQUFJQSxFQUFLLE9BQy9FNEosRUFBSXNrRSxHQUFRckwsQ0FBQyxFQUNqQixPQUFBajVELEVBQUUsWUFBWSxHQUFJd04sRUFBSyxJQUFNLElBQU0sRUFBRSxFQUNyQ3hOLEVBQUUsWUFBWSxFQUFHLENBQUMsRUFDbEJBLEVBQUUsWUFBWSxFQUFHLEdBQUcsRUFDcEJBLEVBQUUsWUFBWSxFQUFHLENBQUMsRUFDbEJBLEVBQUUsWUFBWSxFQUFHLENBQUMsRUFDbEJBLEVBQUUsWUFBWSxFQUFHNUosRUFBSyxNQUFNLEVBQ3hCdTZGLEdBQUkzd0YsRUFBRSxZQUFZLEVBQUcsQ0FBQyxFQUMxQkEsRUFBRSxhQUFhMndGLEVBQUssRUFBSSxHQUFLdjZGLEVBQUssT0FBUUEsRUFBT3U2RixFQUFLLE9BQVMsU0FBUyxFQUNqRTN3RixDQUNSLENBR0EsU0FBUzR3RixHQUFlbCtCLEVBQU0sQ0FDN0IsSUFBSXB6QixFQUFPNnNELEdBQWN6NUIsQ0FBSSxFQUM3QixPQUFBcHpCLEVBQUssS0FBT296QixFQUFLLFdBQVcsQ0FBQyxFQUN0QnB6QixDQUNSLENBQ0EsU0FBU3V4RCxHQUFlNXZCLEVBQWNOLEVBQWM3a0QsRUFBY2cxRSxFQUE0QixDQUM3RixJQUFJOXdGLEVBQUlza0UsR0FBUSxFQUFFLEVBQ2xCLE9BQUFnb0IsR0FBY3JyQixFQUFHTixFQUFHbXdCLEVBQUk5d0YsQ0FBQyxFQUN6QkEsRUFBRSxZQUFZLEVBQUc4YixDQUFDLEVBQ1g5YixDQUNSLENBR0EsU0FBUyt3RixHQUFZcitCLEVBQU14dUIsRUFBUWh1QyxFQUFNLENBQ3JDQSxFQUFLLFdBQWFBLEVBQUssTUFBUSxJQUFHQSxFQUFLLEtBQU8sR0FDakQsSUFBSW1OLEVBQVNxdkQsRUFBSyxFQUFJeHVCLEVBQ2xCNUUsRUFBTzZzRCxHQUFjejVCLENBQU8sRUFDN0J4OEQsRUFBSyxNQUFRLEdBQUd3OEQsRUFBSyxJQUN4QixJQUFJNTZCLEVBQU1zeUQsR0FBc0IxM0IsRUFBTXJ2RCxFQUFTcXZELEVBQUssRUFBR3g4RCxDQUFJLEVBQzNELE9BQUFvcEMsRUFBSyxJQUFNeEgsRUFDSndILENBQ1IsQ0FDQSxTQUFTMHhELEdBQVkvdkIsRUFBY04sRUFBYzdrRCxFQUFjZzFFLEVBQWU1NkYsRUFBTSxDQUNuRixJQUFJdTRGLEVBQUssQ0FBQ3Y0RixHQUFRQSxFQUFLLE1BQVEsRUFDM0I4SixFQUFJc2tFLEdBQVEsRUFBSSxHQUFLLENBQUNtcUIsR0FBTyxFQUFJQSxHQUFNM3lFLEVBQUUsTUFBTSxFQUNuRCxPQUFBd3dFLEdBQWNyckIsRUFBR04sRUFBR213QixFQUFJOXdGLENBQUMsRUFDekJBLEVBQUUsWUFBWSxFQUFHOGIsRUFBRSxNQUFNLEVBQ3RCMnlFLEdBQUl6dUYsRUFBRSxZQUFZLEVBQUcsQ0FBQyxFQUN6QkEsRUFBRSxhQUFhLEVBQUl5dUYsR0FBTTN5RSxFQUFFLE9BQVFBLEVBQUcyeUUsRUFBSyxVQUFZLE1BQU0sRUFDdER6dUYsQ0FDUixDQUlBLFNBQVNpeEYsR0FBYXYrQixFQUFNeHVCLEVBQVFodUMsRUFBTSxDQUN6QyxJQUFJZzdGLEVBQVd4K0IsRUFBSyxXQUFXLENBQUMsRUFDNUJ5K0IsRUFBUzlHLEdBQXVCMzNCLEVBQU0sRUFBR3g4RCxDQUFJLEVBQ2pELE1BQU8sQ0FBQ2c3RixFQUFVQyxDQUFNLENBQ3pCLENBQ0EsU0FBU0MsR0FBYXAxRixFQUFjK0QsRUFBYzdKLEVBQU04SixFQUFHLENBQzFELElBQUkyd0YsRUFBTXo2RixHQUFTQSxFQUFLLE1BQVEsRUFDNUI4SixJQUFHQSxFQUFJc2tFLEdBQVFxc0IsRUFBTSxFQUFJNXdGLEVBQUUsT0FBVyxFQUFJLEVBQUlBLEVBQUUsTUFBTyxHQUMzREMsRUFBRSxZQUFZLEVBQUdoRSxDQUFDLEVBQ2xCZ0UsRUFBRSxZQUFhMndGLEVBQUssRUFBSSxFQUFJNXdGLEVBQUUsTUFBTSxFQUNoQzR3RixHQUFJM3dGLEVBQUUsWUFBWSxFQUFHLENBQUMsRUFDMUJBLEVBQUUsYUFBYTJ3RixFQUFLLEVBQUksR0FBSzV3RixFQUFFLE9BQVFBLEVBQUk0d0YsRUFBSyxPQUFTLFNBQVMsRUFDbEUsSUFBSTM2QixFQUFPaDJELEVBQUUsT0FBU0EsRUFBRSxFQUFLQSxFQUFFLE1BQU0sRUFBR0EsRUFBRSxDQUFDLEVBQUlBLEVBQy9DLE9BQUdnMkQsRUFBSSxHQUFLLE9BQU1BLEVBQUksRUFBSUEsRUFBSSxRQUN2QkEsQ0FDUixDQUNBLElBQUlxN0IsR0FBb0JoSCxHQUd4QixTQUFTaUgsR0FBaUI1K0IsRUFBTXh1QixFQUFRaHVDLEVBQU0sQ0FDN0MsSUFBSSs4RCxFQUFNUCxFQUFLLEVBQUl4dUIsRUFDZiswQixFQUFJL2lFLEVBQUssTUFBUSxHQUFLLENBQUNBLEVBQUssS0FBTyxFQUFJLEVBQ3ZDaUosRUFBSXV6RCxFQUFLLFdBQVd1RyxDQUFDLEVBQUdnSSxFQUFJdk8sRUFBSyxXQUFXdUcsQ0FBQyxFQUM3QzM5QyxFQUFJbzNDLEVBQUssV0FBVyxDQUFDLEVBQUdpTyxFQUFJak8sRUFBSyxXQUFXLENBQUMsRUFDakQsT0FBQUEsRUFBSyxFQUFJTyxFQUNGLENBQUMsRUFBRyxDQUFDLEVBQUU5ekQsRUFBRyxFQUFFbWMsQ0FBQyxFQUFHLEVBQUcsQ0FBQyxFQUFFMmxELEVBQUdOLENBQUcsQ0FBQyxDQUNyQyxDQUNBLFNBQVM0d0IsR0FBaUJwMkQsRUFBT2psQyxFQUFNLENBQ3RDLElBQUkraUUsRUFBSS9pRSxFQUFLLE1BQVEsR0FBSyxDQUFDQSxFQUFLLEtBQU8sRUFBSSxFQUN2QzhKLEVBQUlza0UsR0FBUSxFQUFFckwsRUFBSSxDQUFDLEVBQ3ZCLE9BQUFqNUQsRUFBRSxZQUFZaTVELEVBQUc5OUIsRUFBTSxFQUFFLENBQUMsRUFDMUJuN0IsRUFBRSxZQUFZaTVELEVBQUc5OUIsRUFBTSxFQUFFLEVBQUksQ0FBQyxFQUM5Qm43QixFQUFFLFlBQVksRUFBR203QixFQUFNLEVBQUUsQ0FBQyxFQUMxQm43QixFQUFFLFlBQVksRUFBR203QixFQUFNLEVBQUUsRUFBSSxDQUFDLEVBQzlCbjdCLEVBQUUsWUFBWSxFQUFHLENBQUMsRUFDWEEsQ0FDUixDQUdBLFNBQVN3eEYsR0FBUzkrQixFQUFNLENBQ3ZCLElBQUkwNUIsRUFBSzE1QixFQUFLLFdBQVcsQ0FBQyxFQUFHdmtELEVBQU11a0QsRUFBSyxXQUFXLENBQUMsRUFDaEQrK0IsRUFBUTNFLEdBQVlwNkIsQ0FBSSxFQUM1QixNQUFPLENBQUMsRUFBRTA1QixFQUFJLEVBQUVqK0UsRUFBSyxLQUFLc2pGLEVBQU0sQ0FBQyxFQUFHLE1BQU1BLEVBQU0sQ0FBQyxDQUFDLENBQ25ELENBR0EsU0FBU0MsR0FBWWgvQixFQUFNeHVCLEVBQVEsQ0FJbEMsUUFISTdnQyxFQUFTcXZELEVBQUssRUFBSXh1QixFQUFTLEVBQzNCa29ELEVBQUsxNUIsRUFBSyxXQUFXLENBQUMsRUFBR3ZrRCxFQUFNdWtELEVBQUssV0FBVyxDQUFDLEVBQ2hEaS9CLEVBQVMsQ0FBQSxFQUNQai9CLEVBQUssRUFBSXJ2RCxHQUFRc3VGLEVBQU8sS0FBSzdFLEdBQVlwNkIsQ0FBSSxDQUFDLEVBQ3BELEdBQUdBLEVBQUssSUFBTXJ2RCxFQUFRLE1BQU0sSUFBSSxNQUFNLGtCQUFrQixFQUN4RCxJQUFJdXVGLEVBQVVsL0IsRUFBSyxXQUFXLENBQUMsRUFDL0IsR0FBR2kvQixFQUFPLFFBQVVDLEVBQVV6akYsRUFBTSxFQUFHLE1BQU0sSUFBSSxNQUFNLHVCQUF1QixFQUM5RSxNQUFPLENBQUMsRUFBRWkrRSxFQUFJLEVBQUVqK0UsRUFBSyxFQUFFeWpGLEVBQVMsTUFBTUQsQ0FBTSxDQUM3QyxDQUVBLFNBQVNFLEdBQWVuL0IsRUFBTXh1QixFQUFRLENBSXJDLFFBSEk3Z0MsRUFBU3F2RCxFQUFLLEVBQUl4dUIsRUFBUyxFQUMzQmtvRCxFQUFLMTVCLEVBQUssV0FBVyxDQUFDLEVBQUd2a0QsRUFBTXVrRCxFQUFLLFdBQVcsQ0FBQyxFQUNoRG8vQixFQUFRLENBQUEsRUFDTnAvQixFQUFLLEVBQUlydkQsR0FBUXl1RixFQUFNLEtBQUtwL0IsRUFBSyxXQUFXLENBQUMsQ0FBQyxFQUNwRCxHQUFHQSxFQUFLLElBQU1ydkQsRUFBUSxNQUFNLElBQUksTUFBTSxxQkFBcUIsRUFDM0QsSUFBSXV1RixFQUFVbC9CLEVBQUssV0FBVyxDQUFDLEVBQy9CLEdBQUdvL0IsRUFBTSxRQUFVRixFQUFVempGLEVBQU0sRUFBRyxNQUFNLElBQUksTUFBTSwwQkFBMEIsRUFDaEYsTUFBTyxDQUFDLEVBQUVpK0UsRUFBSSxFQUFFaitFLEVBQUssRUFBRXlqRixFQUFTLEtBQUtFLENBQUssQ0FDM0MsQ0FHQSxTQUFTQyxHQUFrQnIvQixFQUFNeHVCLEVBQVFzSSxFQUFPdDJDLEVBQU0sQ0FDckQsSUFBSThKLEVBQUksQ0FBQSxFQUNKVixFQUFJb3pELEVBQUssV0FBVyxDQUFDLEVBQUdwc0QsRUFBSW9zRCxFQUFLLFdBQVcsQ0FBQyxFQUM3Q3AzQyxFQUFJbzNDLEVBQUssV0FBVyxDQUFDLEVBQUd4eUQsRUFBSXd5RCxFQUFLLFdBQVcsQ0FBQyxFQUdqRCxPQUZBMXlELEVBQUUsWUFBYzRnRixHQUFldGxFLEdBQUssRUFBRSxFQUVsQ3BsQixFQUFLLGFBQ1Q4SixFQUFFLElBQU1WLEVBQUksRUFDWlUsRUFBRSxNQUFTVixHQUFLLEVBQUssRUFDckJVLEVBQUUsS0FBUVYsR0FBSyxFQUFLLEVBQ3BCVSxFQUFFLFVBQWFWLEdBQUssRUFBSyxFQUN6QlUsRUFBRSxLQUFRVixHQUFLLEVBQUssSUFDcEJVLEVBQUUsUUFBV1YsR0FBSyxHQUFNLEdBQ3hCVSxFQUFFLGFBQWdCVixHQUFLLEdBQU0sRUFDN0JVLEVBQUUsV0FBY1YsR0FBSyxHQUFNLEVBQzNCVSxFQUFFLFFBQVdWLEdBQUssR0FBTSxFQUN4QlUsRUFBRSxRQUFXVixHQUFLLEdBQU0sRUFDeEJVLEVBQUUsUUFBV1YsR0FBSyxHQUFNLEVBQ3hCVSxFQUFFLFFBQVdWLEdBQUssR0FBTSxFQUN4QlUsRUFBRSxRQUFXVixHQUFLLEdBQU0sRUFDeEJVLEVBQUUsU0FBWVYsR0FBSyxHQUFNLEVBRXpCVSxFQUFFLE9BQVNzRyxFQUFJLEdBQ2Z0RyxFQUFFLFFBQVdzRyxHQUFLLEVBQUssR0FDdkJ0RyxFQUFFLE1BQVNzRyxHQUFLLEVBQUssR0FDckJ0RyxFQUFFLFNBQVlzRyxHQUFLLEdBQU0sR0FDekJ0RyxFQUFFLFFBQVdzRyxHQUFLLEdBQU0sSUFDeEJ0RyxFQUFFLFNBQVlzRyxHQUFLLEdBQU0sSUFDekJ0RyxFQUFFLFVBQWFzRyxHQUFLLEdBQU0sRUFFMUJ0RyxFQUFFLE9BQVNzYixFQUFJLElBQ2Z0YixFQUFFLFVBQWFzYixHQUFLLEVBQUssSUFDekJ0YixFQUFFLFFBQVdzYixHQUFLLEdBQU0sSUFDeEJ0YixFQUFFLE9BQVVzYixHQUFLLEdBQU0sR0FFdkJ0YixFQUFFLFFBQVVFLEVBQUksSUFDaEJGLEVBQUUsUUFBV0UsR0FBSyxFQUFLLElBQ3ZCRixFQUFFLFVBQWFFLEdBQUssR0FBTSxHQUNuQkYsQ0FDUixDQUtBLFNBQVNneUYsR0FBU3QvQixFQUFNeHVCLEVBQVFodUMsRUFBTSxDQUNyQyxJQUFJOEosRUFBSSxDQUFBLEVBQ1IsT0FBQUEsRUFBRSxLQUFPMHlELEVBQUssV0FBVyxDQUFDLEVBQUcxeUQsRUFBRSxTQUFXMHlELEVBQUssV0FBVyxDQUFDLEVBQUcxeUQsRUFBRSxNQUFRMHlELEVBQUssV0FBVyxDQUFDLEVBQ3pGMXlELEVBQUUsT0FBVUEsRUFBRSxPQUFTLEVBQUssRUFDNUJra0MsR0FBVSxFQUNWbGtDLEVBQUUsS0FBTyt4RixHQUFrQnIvQixFQUFNeHVCLEVBQVFsa0MsRUFBRSxPQUFROUosQ0FBSSxFQUNoRDhKLENBQ1IsQ0FDQSxTQUFTaXlGLEdBQVN6a0YsRUFBTTBrRixFQUFPaDhGLEVBQU04SixFQUFHLENBQ3ZDLElBQUkyd0YsRUFBTXo2RixHQUFTQSxFQUFLLE1BQVEsRUFDNUI4SixJQUFHQSxFQUFJc2tFLEdBQVFxc0IsRUFBSyxHQUFLLEVBQUUsR0FDL0Izd0YsRUFBRSxZQUFZLEVBQUcsQ0FBQyxFQUNmd04sRUFBSyxPQUNQeE4sRUFBRSxZQUFZLEVBQUl3TixFQUFLLFVBQVUsQ0FBQyxFQUNsQ3hOLEVBQUUsWUFBWSxFQUFHLEtBQU0sSUFFdkJBLEVBQUUsWUFBWSxFQUFJd04sRUFBSyxVQUFVLENBQUMsRUFDbEN4TixFQUFFLFlBQVksRUFBSWt5RixHQUFPLENBQUMsR0FFM0IsSUFBSW55RixFQUFJLEVBQ1IsT0FBR3lOLEVBQUssU0FBVyxHQUFLbWpGLElBQUk1d0YsR0FBSyxNQUNqQ0MsRUFBRSxZQUFZLEVBQUdELENBQUMsRUFDbEJDLEVBQUUsWUFBWSxFQUFHLENBQUMsRUFDZDJ3RixHQUFJM3dGLEVBQUUsWUFBWSxFQUFHLENBQUMsRUFDMUJBLEVBQUUsWUFBWSxFQUFHLENBQUMsRUFDWEEsQ0FDUixDQUdBLFNBQVNteUYsR0FBV3ovQixFQUFNLENBQ3pCQSxFQUFLLEdBQUssRUFDVixJQUFJc0QsRUFBTSxDQUFDdEQsRUFBSyxXQUFXLENBQUMsRUFBR0EsRUFBSyxXQUFXLENBQUMsQ0FBQyxFQUdqRCxHQUZHc0QsRUFBSSxDQUFDLElBQU0sR0FBR0EsRUFBSSxDQUFDLElBQ25CQSxFQUFJLENBQUMsSUFBTSxHQUFHQSxFQUFJLENBQUMsSUFDbkJBLEVBQUksQ0FBQyxFQUFJLEdBQUtBLEVBQUksQ0FBQyxFQUFJLEVBQUcsTUFBTSxJQUFJLE1BQU0sZ0JBQWtCQSxFQUFJLEtBQUssR0FBRyxDQUFDLEVBQzVFLE9BQU9BLENBQ1IsQ0FDQSxTQUFTbzhCLEdBQVdDLEVBQXdCLENBQzNDLElBQUlyeUYsRUFBSXNrRSxHQUFRLENBQUMsRUFDakIsT0FBQXRrRSxFQUFFLFlBQVksRUFBRyxDQUFDLEVBQ2xCQSxFQUFFLFlBQVksRUFBR3F5RixFQUFLLENBQUMsRUFBSUEsRUFBSyxDQUFDLEVBQUksRUFBSSxDQUFDLEVBQzFDcnlGLEVBQUUsWUFBWSxFQUFHcXlGLEVBQUssQ0FBQyxFQUFJQSxFQUFLLENBQUMsRUFBSSxFQUFJLENBQUMsRUFDbkNyeUYsQ0FDUixDQUdBLFNBQVNzeUYsR0FBYzUvQixFQUFNeHVCLEVBQVFodUMsRUFBTSxDQUMxQyxJQUFJb3BDLEVBQU82c0QsR0FBY3o1QixDQUFPLEdBQzdCeDhELEVBQUssTUFBUSxHQUFLZ3VDLEdBQVUsSUFBRyxFQUFFd3VCLEVBQUssRUFDekMsSUFBSTkxRCxFQUFNMHNGLEdBQVU1MkIsQ0FBTyxFQUMzQixPQUFBcHpCLEVBQUssSUFBTTFpQyxFQUNYMGlDLEVBQUssRUFBSzFpQyxJQUFRLElBQVFBLElBQVEsR0FBUyxJQUFNLElBQzFDMGlDLENBQ1IsQ0FDQSxTQUFTaXpELEdBQWN0eEIsRUFBY04sRUFBYzdrRCxFQUFHZzFFLEVBQWU1NkYsRUFBTW9JLEVBQWMsQ0FDeEYsSUFBSTBCLEVBQUlza0UsR0FBUSxDQUFDLEVBQ2pCLE9BQUFnb0IsR0FBY3JyQixFQUFHTixFQUFHbXdCLEVBQUk5d0YsQ0FBQyxFQUN6QnVwRixHQUFVenRFLEVBQUd4ZCxFQUFHMEIsQ0FBQyxFQUNWQSxDQUNSLENBR0EsU0FBU3d5RixHQUFhOS9CLEVBQU14dUIsRUFBUWh1QyxFQUFNLENBQ3RDQSxFQUFLLFdBQWFBLEVBQUssTUFBUSxJQUFHQSxFQUFLLEtBQU8sR0FDakQsSUFBSW9wQyxFQUFPNnNELEdBQWN6NUIsQ0FBTyxFQUM1QisvQixFQUFPbFUsR0FBVzdyQixDQUFPLEVBQzdCLE9BQUFwekIsRUFBSyxJQUFNbXpELEVBQ0puekQsQ0FDUixDQUNBLFNBQVNvekQsR0FBYXp4QixFQUFjTixFQUFjN2tELEVBQUdnMUUsRUFBd0IsQ0FDNUUsSUFBSTl3RixFQUFJc2tFLEdBQVEsRUFBRSxFQUNsQixPQUFBZ29CLEdBQWNyckIsRUFBR04sRUFBR213QixFQUFJOXdGLENBQUMsRUFDekJ3K0UsR0FBVzFpRSxFQUFHOWIsQ0FBQyxFQUNSQSxDQUNSLENBRUEsSUFBSTJ5RixHQUF1QmxHLEdBRzNCLFNBQVNtRyxHQUFjbGdDLEVBQU14dUIsRUFBUWh1QyxFQUFNLENBQzFDLElBQUkrOEQsRUFBTVAsRUFBSyxFQUFJeHVCLEVBQ2YydUQsRUFBT25nQyxFQUFLLFdBQVcsQ0FBQyxFQUN4QisyQixFQUFNLzJCLEVBQUssV0FBVyxDQUFDLEVBRTNCLEdBREF4OEQsRUFBSyxNQUFRdXpGLEVBQ1ZBLEdBQU8sTUFBVUEsR0FBTyxNQUFRLE1BQU8sQ0FBQ0EsRUFBS29KLENBQUksRUFDcEQsR0FBR3BKLEVBQU0sR0FBUUEsRUFBSyxJQUFNLE1BQU0sSUFBSSxNQUFNLDRCQUE0QkEsQ0FBRyxFQUkzRSxRQUhJcUosRUFBVzNJLEdBQTJCejNCLEVBQU0rMkIsQ0FBRyxFQUUvQ3NKLEVBQU8sQ0FBQSxFQUNMOS9CLEVBQU1QLEVBQUssR0FBR3FnQyxFQUFLLEtBQUszSSxHQUFzQjEzQixDQUFJLENBQUMsRUFDekQsTUFBTyxDQUFDKzJCLEVBQUtvSixFQUFNQyxFQUFVQyxDQUFJLENBQ2xDLENBR0EsU0FBU0MsR0FBaUJ0Z0MsRUFBTXh1QixFQUFRaHVDLEVBQU0sQ0FDN0MsSUFBSXVyRSxFQUFRL08sRUFBSyxXQUFXLENBQUMsRUFDekJ1Z0MsRUFDQWp6RixFQUFLLENBQ1IsU0FBVXloRSxFQUFRLEVBQ2xCLFlBQWNBLElBQVUsRUFBSyxFQUM3QixVQUFZQSxJQUFVLEVBQUssRUFDM0IsS0FBT0EsSUFBVSxFQUFLLEVBQ3RCLFNBQVdBLElBQVUsRUFBSyxFQUMxQixHQUFLQSxJQUFVLEVBQUssS0FDcEIsTUFBT0EsSUFBVSxHQUFLLENBQ3hCLEVBQ0MsT0FBR3ZyRSxFQUFLLFFBQVUsUUFBUSs4RixFQUFPbEcsR0FBZXI2QixFQUFNeHVCLEVBQU8sRUFBR2h1QyxDQUFJLEdBRXBFOEosRUFBRSxLQUFPaXpGLEdBQVF2Z0MsRUFBSyxXQUFXeHVCLEVBQU8sQ0FBQyxFQUN0QyxPQUFPK3VELEdBQVMsV0FBVWp6RixFQUFFLEtBQU9pekYsR0FDL0JqekYsQ0FDUixDQUdBLElBQUlrekYsR0FBZ0IsQ0FDbkIseUJBQ0Esa0JBQ0EsbUJBQ0EsZ0JBQ0EsaUJBQ0EsaUJBQ0EsbUJBQ0EscUJBQ0EsaUJBQ0Esa0JBQ0Esc0JBQ0Esd0JBQ0Esb0JBQ0EsdUJBQ0QsRUFDQSxTQUFTQyxHQUFVemdDLEVBQU14dUIsRUFBUWh1QyxFQUFNLENBQ3RDLElBQUltTixFQUFTcXZELEVBQUssRUFBSXh1QixFQUNsQnU5QixFQUFRL08sRUFBSyxXQUFXLENBQUMsRUFDekIwZ0MsRUFBUTFnQyxFQUFLLFdBQVcsQ0FBQyxFQUN6QisyQixFQUFNLzJCLEVBQUssV0FBVyxDQUFDLEVBQ3ZCMmdDLEVBQU0zZ0MsRUFBSyxXQUFXeDhELEdBQVFBLEVBQUssTUFBUSxFQUFJLEVBQUksQ0FBQyxFQUNwRG85RixFQUFPLEdBQ1IsQ0FBQ3A5RixHQUFRQSxFQUFLLE1BQVEsS0FDckJBLEVBQUssTUFBUSxJQUFHdzhELEVBQUssR0FBSyxHQUM3QjRnQyxFQUFPNWdDLEVBQUssV0FBVyxDQUFDLEVBQ3JCeDhELEVBQUssTUFBUSxJQUFHdzhELEVBQUssR0FBSyxHQUM3QkEsRUFBSyxHQUFLLEdBRVgsSUFBSXQ4RCxFQUFPK3pGLEdBQTJCejNCLEVBQU0rMkIsRUFBS3Z6RixDQUFJLEVBQ2xEdXJFLEVBQVEsS0FBTXJyRSxFQUFPODhGLEdBQWM5OEYsRUFBSyxXQUFXLENBQUMsQ0FBQyxHQUN4RCxJQUFJbTlGLEVBQVNsd0YsRUFBU3F2RCxFQUFLLEVBQU14OEQsR0FBUUEsRUFBSyxNQUFRLEdBQUcsRUFBRXE5RixFQUUzRCxJQUFJQyxFQUFRbndGLEdBQVVxdkQsRUFBSyxHQUFLMmdDLElBQVEsR0FBSyxFQUFFRSxFQUFTLEdBQU0sQ0FBRSxFQUFHRSxHQUF3Qi9nQyxFQUFNNmdDLEVBQVFyOUYsRUFBTW05RixDQUFHLEVBRWxILE1BQU8sQ0FDTixNQUFPRCxFQUNQLEtBQU1oOUYsRUFDTixLQUFNazlGLEVBQ04sS0FBTUUsQ0FDUixDQUNBLENBR0EsU0FBU0UsR0FBa0JoaEMsRUFBTXh1QixFQUFRaHVDLEVBQU0sQ0FDOUMsR0FBR0EsRUFBSyxLQUFPLEVBQUcsT0FBT3k5RixHQUF1QmpoQyxFQUFNeHVCLEVBQVFodUMsQ0FBSSxFQUVsRSxRQURJOEosRUFBSSxDQUFBLEVBQUlxRCxFQUFTcXZELEVBQUssRUFBSXh1QixFQUFRck0sRUFBTTY2QixFQUFLLFdBQVd4OEQsRUFBSyxLQUFPLEVBQUksRUFBSSxDQUFDLEVBQzNFMmhDLE1BQVUsR0FBRzczQixFQUFFLEtBQUswc0YsR0FBVWg2QixFQUFNeDhELEVBQUssS0FBTyxFQUFJLEdBQUssRUFBR0EsQ0FBSSxDQUFDLEVBRXZFLEdBQUd3OEQsRUFBSyxHQUFLcnZELEVBQVEsTUFBTSxJQUFJLE1BQU0sb0JBQXNCcXZELEVBQUssRUFBSSxPQUFTcnZELENBQU0sRUFDbkYsT0FBT3JELENBQ1IsQ0FDQSxTQUFTMnpGLEdBQXVCamhDLEVBQU14dUIsRUFBUWh1QyxFQUFNLENBQ2hEdzhELEVBQUtBLEVBQUssRUFBSSxDQUFDLEdBQUssR0FBTUEsRUFBS0EsRUFBSyxDQUFDLElBQ3hDLElBQUkxeUQsRUFBSXdwRixHQUEyQjkyQixFQUFNeHVCLEVBQVFodUMsQ0FBSSxFQUNyRCxPQUFPOEosRUFBRSxXQUFXLENBQUMsR0FBSyxFQUFPQSxFQUFFLE1BQU0sQ0FBQyxFQUFJQSxDQUMvQyxDQUdBLFNBQVM0ekYsR0FBY2xoQyxFQUFNeHVCLEVBQVFodUMsRUFBTSxDQUMxQyxHQUFHQSxFQUFLLEtBQU8sRUFBRyxDQUFFdzhELEVBQUssR0FBS3h1QixFQUFRLE1BQVMsQ0FDL0MsSUFBSTJ2RCxFQUFVbmhDLEVBQUssV0FBVyxDQUFDLEVBQzNCb2hDLEVBQWFwaEMsRUFBSyxXQUFXLENBQUMsRUFDOUJ0OEQsRUFBTyt6RixHQUEyQnozQixFQUFNbWhDLEVBQVMzOUYsQ0FBSSxFQUNyRDY5RixFQUFVNUosR0FBMkJ6M0IsRUFBTW9oQyxFQUFZNTlGLENBQUksRUFDL0QsTUFBTyxDQUFDRSxFQUFNMjlGLENBQU8sQ0FDdEIsQ0FHQSxTQUFTQyxHQUFjdGhDLEVBQU14dUIsRUFBUWh1QyxFQUFNLENBQzFDLElBQUl3SCxFQUFNNnZGLEdBQVc3NkIsQ0FBTyxFQUM1QkEsRUFBSyxJQUNMLElBQUl1aEMsRUFBT3ZoQyxFQUFLLFdBQVcsQ0FBQyxFQUM1QixPQUFBeHVCLEdBQVUsRUFDSCxDQUFDZ3dELEdBQTBCeGhDLEVBQU14dUIsRUFBUWh1QyxDQUFJLEVBQUcrOUYsRUFBTXYyRixDQUFHLENBQ2pFLENBR0EsU0FBU3kyRixHQUFZemhDLEVBQU14dUIsRUFBUWh1QyxFQUFNLENBQ3hDLElBQUl3SCxFQUFNOHZGLEdBQVU5NkIsQ0FBTyxFQUUzQixPQUFPeDhELEVBQUssS0FBSSxDQUNmLElBQUssR0FBR3c4RCxFQUFLLElBQU14dUIsR0FBVSxFQUFHLE1BQ2hDLElBQUssR0FBRyxJQUFLLEdBQUd3dUIsRUFBSyxHQUFLLEVBQUd4dUIsR0FBVSxFQUFHLE1BQzFDLFFBQVN3dUIsRUFBSyxHQUFLLEVBQUd4dUIsR0FBVSxFQUNoQyxDQUNELE1BQU8sQ0FBQ3htQyxFQUFLMDJGLEdBQXlCMWhDLEVBQU14dUIsRUFBUWh1QyxDQUFTLENBQUMsQ0FDL0QsQ0FHQSxTQUFTbStGLEdBQWtCM2hDLEVBQU0sQ0FDaEMsSUFBSTRoQyxFQUFjNWhDLEVBQUssV0FBVyxDQUFDLElBQU0sRUFDckM2aEMsRUFBc0I3aEMsRUFBSyxXQUFXLENBQUMsSUFBTSxFQUM3QzhoQyxFQUFtQjloQyxFQUFLLFdBQVcsQ0FBQyxFQUN4QyxNQUFPLENBQUM0aEMsRUFBYUMsRUFBcUJDLENBQWdCLENBQzNELENBR0EsU0FBU0MsR0FBYS9oQyxFQUFNeHVCLEVBQVFodUMsRUFBTSxDQUN6QyxHQUFHLEVBQUFBLEVBQUssS0FBTyxHQUNmLEtBQUl1SyxFQUFNaXlELEVBQUssV0FBVyxDQUFDLEVBQUd2a0QsRUFBTXVrRCxFQUFLLFdBQVcsQ0FBQyxFQUNqRCtPLEVBQVEvTyxFQUFLLFdBQVcsQ0FBQyxFQUFHZ2lDLEVBQVFoaUMsRUFBSyxXQUFXLENBQUMsRUFDckRpaUMsRUFBV3RLLEdBQXVCMzNCLEVBQU0sRUFBR3g4RCxDQUFJLEVBQ25ELE9BQUdBLEVBQUssS0FBTyxHQUFHdzhELEVBQUssV0FBVyxDQUFDLEVBQzVCLENBQUMsQ0FBQyxFQUFFanlELEVBQUksRUFBRTBOLENBQUcsRUFBR3dtRixFQUFVRCxFQUFPanpCLENBQUssRUFDOUMsQ0FHQSxTQUFTbXpCLEdBQVdsaUMsRUFBTXh1QixFQUFRaHVDLEVBQU0sQ0FFdkMsT0FBT3UrRixHQUFhL2hDLEVBQU14dUIsRUFBUWh1QyxDQUFJLENBQ3ZDLENBR0EsU0FBUzIrRixHQUFpQm5pQyxFQUFNeHVCLEVBQXlCLENBR3hELFFBRkk0d0QsRUFBMEIsQ0FBQSxFQUMxQkMsRUFBT3JpQyxFQUFLLFdBQVcsQ0FBQyxFQUNyQnFpQyxLQUFRRCxFQUFPLEtBQUs3SCxHQUFZdjZCLENBQVcsQ0FBQyxFQUNuRCxPQUFPb2lDLENBQ1IsQ0FDQSxTQUFTRSxHQUFpQkYsRUFBeUIsQ0FDbEQsSUFBSTkwRixFQUFJc2tFLEdBQVEsRUFBSXd3QixFQUFPLE9BQVMsQ0FBQyxFQUNyQzkwRixFQUFFLFlBQVksRUFBRzgwRixFQUFPLE1BQU0sRUFDOUIsUUFBUTk0RixFQUFJLEVBQUdBLEVBQUk4NEYsRUFBTyxPQUFRLEVBQUU5NEYsRUFBR3N4RixHQUFZd0gsRUFBTzk0RixDQUFDLEVBQUdnRSxDQUFDLEVBQy9ELE9BQU9BLENBQ1IsQ0FHQSxTQUFTaTFGLEdBQVV2aUMsRUFBTXh1QixFQUFRaHVDLEVBQU0sQ0FDdEMsR0FBR0EsR0FBUUEsRUFBSyxLQUFPLEVBQUcsT0FBT2cvRixHQUFleGlDLEVBQU14dUIsRUFBUWh1QyxDQUFJLEVBQ2xFLElBQUlpL0YsRUFBTTFILEdBQVkvNkIsQ0FBUSxFQUMxQnM3QixFQUFNRCxHQUFjcjdCLEVBQU14dUIsRUFBTyxHQUFJaXhELEVBQUksQ0FBQyxDQUFDLEVBQy9DLE1BQU8sQ0FBRSxJQUFLQSxFQUFLLEdBQUduSCxDQUFHLENBQzFCLENBRUEsSUFBSW9ILEdBQWdCLENBQ3BCLEVBQU0sU0FBUzFpQyxFQUFNeHVCLEVBQVEsQ0FDNUIsSUFBSXk5QixFQUFNalAsRUFBSyxFQUFJeHVCLEVBQ25Cd3VCLEVBQUssR0FBSyxHQUNWLElBQUkyaUMsRUFBSzNpQyxFQUFLLFdBQVcsQ0FBQyxFQUMxQkEsRUFBSyxHQUFLLEVBQ1ZBLEVBQUssR0FBSyxFQUNWQSxFQUFLLEdBQUssRUFDVkEsRUFBSyxHQUFLLEVBQ1ZBLEVBQUssR0FBSyxFQUNWLElBQUltaEMsRUFBVW5oQyxFQUFLLFdBQVcsQ0FBQyxFQUMvQixPQUFBQSxFQUFLLEdBQUttaEMsRUFDVm5oQyxFQUFLLEVBQUlpUCxFQUNGLENBQUUsSUFBSTB6QixFQUNkLENBQ0EsRUFFQSxTQUFTSCxHQUFleGlDLEVBQU14dUIsRUFBUWh1QyxFQUFNLENBQzNDdzhELEVBQUssR0FBSyxFQUNWLElBQUlnN0IsRUFBS2g3QixFQUFLLFdBQVcsQ0FBQyxFQUN0QjdtRCxFQUFLNm1ELEVBQUssV0FBVyxDQUFDLEVBQ3RCNnNCLEVBQVE3c0IsRUFBSyxXQUFXLENBQUMsRUFDN0JBLEVBQUssR0FBSyxFQUNWQSxFQUFLLEdBQUssRUFDVkEsRUFBSyxHQUFLLEVBQ1ZBLEVBQUssR0FBSyxFQUNWQSxFQUFLLEdBQUssRUFDVkEsRUFBSyxHQUFLLEVBQ1ZBLEVBQUssR0FBSyxFQUNWQSxFQUFLLEdBQUssRUFDVkEsRUFBSyxHQUFLLEVBQ1ZBLEVBQUssR0FBSyxFQUNWeHVCLEdBQVUsR0FDVixJQUFJOHBELEVBQU0sQ0FBQSxFQUNWLE9BQUFBLEVBQUksTUFBTW9ILEdBQWMxSCxDQUFFLEdBQUc5VSxJQUFXbG1CLEVBQU14dUIsRUFBUWh1QyxDQUFJLENBQUMsRUFDcEQsQ0FBRSxJQUFLLENBQUMyVixFQUFJNmhGLEVBQUluTyxDQUFLLEVBQUcsR0FBR3lPLEVBQ25DLENBR0EsU0FBU3NILEdBQVU1aUMsRUFBTXh1QixFQUFRaHVDLEVBQU0sQ0FDdEMsSUFBSW1KLEVBQUlxekQsRUFBSyxFQUNUNmlDLEVBQVEsR0FDYixHQUFJLENBQ0g3aUMsRUFBSyxHQUFLLEVBQ1YsSUFBSWc3QixHQUFNeDNGLEVBQUssU0FBUyxDQUFDLElBQUksQ0FBQyxFQUFFLENBQUMsQ0FBQyxHQUFHLElBQUksQ0FBQyxFQUN0Q3MvRixFQUNELENBQUMsRUFBRSxFQUFFLEVBQUUsR0FBRyxHQUFHLEVBQUUsRUFBRSxRQUFROUgsQ0FBRSxHQUFLLEdBQUloN0IsRUFBSyxHQUFLLEVBQzVDOGlDLEVBQWNqTCxHQUFrQjczQixFQUFNLEVBQUd4OEQsQ0FBSSxFQUNsRCxJQUFJdS9GLEVBQVUvaUMsRUFBSyxXQUFXLENBQUMsRUFDZEEsRUFBSyxXQUFXLENBQUMsRUFDZHkyQixHQUFZejJCLEVBQU0sQ0FBQyxFQUN2QyxJQUFJNzZCLEVBQU02NkIsRUFBSyxXQUFXLENBQUMsRUFDM0JBLEVBQUssR0FBSzc2QixFQUdWLFFBQVE3N0IsRUFBSSxFQUFHQSxFQUFJMDJELEVBQUssS0FBSyxPQUFPLEVBQUcsRUFBRTEyRCxFQUFHLENBQzNDLEdBQUcwMkQsRUFBSyxFQUFFcnpELEdBQUtxekQsRUFBSyxLQUFLMTJELENBQUMsRUFBRyxNQUFNLElBQUksTUFBTSwwQkFBMEIsRUFDdkUsSUFBSXlyRixFQUFNLzBCLEVBQUtBLEVBQUssQ0FBQyxFQUNqQnAwRCxFQUFJNnJGLEdBQTJCejNCLEVBQU1BLEVBQUssS0FBSzEyRCxFQUFFLENBQUMsRUFBRTAyRCxFQUFLLEtBQUsxMkQsQ0FBQyxFQUFFLENBQUMsRUFFdEUsR0FEQXU1RixHQUFTajNGLEVBQ05pM0YsRUFBTSxTQUFXOU4sRUFBTWdPLEVBQVUsRUFBRUEsR0FBVSxLQUNoRCxDQUNELEdBQUdGLEVBQU0sU0FBV0UsR0FBV0YsRUFBTSxTQUFXRSxFQUFRLEVBQ3ZELE1BQU0sSUFBSSxNQUFNLFlBQWNBLEVBQVUsT0FBU0YsRUFBTSxNQUFNLEVBRzlELE9BQUE3aUMsRUFBSyxFQUFJcnpELEVBQUk2a0MsRUFRTixDQUFFLEVBQUdxeEQsRUFDYixNQUFXLENBQUUsT0FBQTdpQyxFQUFLLEVBQUlyekQsRUFBSTZrQyxFQUFlLENBQUUsRUFBR3F4RCxDQUFPLENBQUcsQ0FDeEQsQ0FHQSxTQUFTRyxHQUFZaGpDLEVBQU14dUIsRUFBUSxDQUNsQyxJQUFJeG1DLEVBQU11dkYsR0FBWXY2QixDQUFPLEVBQzdCQSxFQUFLLEdBQUssR0FDVixJQUFJaWpDLEVBQVF6SyxHQUFnQng0QixFQUFNeHVCLEVBQU8sRUFBRSxFQUMzQyxNQUFPLENBQUN4bUMsRUFBS2k0RixDQUFLLENBQ25CLENBQ0EsU0FBU0MsR0FBWWhLLEVBQUksQ0FDeEIsSUFBSWlLLEVBQUl2eEIsR0FBUSxFQUFFLEVBQ2Q1bUUsRUFBTWc5RSxHQUFZa1IsRUFBRyxDQUFDLENBQUMsRUFDM0JpSyxFQUFFLFlBQVksRUFBR240RixFQUFJLENBQUMsRUFBR200RixFQUFFLFlBQVksRUFBR240RixFQUFJLENBQUMsRUFDL0NtNEYsRUFBRSxZQUFZLEVBQUduNEYsRUFBSSxDQUFDLEVBQUdtNEYsRUFBRSxZQUFZLEVBQUduNEYsRUFBSSxDQUFDLEVBRS9DLFFBRElxcUYsRUFBUSxrREFBa0QsTUFBTSxHQUFHLEVBQy9EL3JGLEVBQUksRUFBR0EsRUFBSSxHQUFJLEVBQUVBLEVBQUc2NUYsRUFBRSxZQUFZLEVBQUcsU0FBUzlOLEVBQU0vckYsQ0FBQyxFQUFHLEVBQUUsQ0FBQyxFQUNuRSxPQUFPNDVELEdBQVEsQ0FBQ2lnQyxFQUFHbEssR0FBZ0JDLEVBQUcsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUMzQyxDQUlBLFNBQVNrSyxHQUFtQnBqQyxFQUFNeHVCLEVBQVEsQ0FDekN3dUIsRUFBSyxXQUFXLENBQUMsRUFDakIsSUFBSWgxRCxFQUFNdXZGLEdBQVl2NkIsQ0FBTyxFQUN6QnFqQyxFQUFZcmpDLEVBQUssWUFBWXh1QixFQUFPLElBQUksRUFBRyxXQUFXLEVBQzFELE9BQUE2eEQsRUFBWUEsRUFBVSxRQUFRMy9CLEdBQUssRUFBRSxFQUM5QixDQUFDMTRELEVBQUtxNEYsQ0FBUyxDQUN2QixDQUNBLFNBQVNDLEdBQW1CcEssRUFBSSxDQUMvQixJQUFJbnNCLEVBQUttc0IsRUFBRyxDQUFDLEVBQUUsUUFDWGlLLEVBQUl2eEIsR0FBUSxHQUFLLEdBQUs3RSxFQUFHLE9BQVMsRUFBRSxFQUN4Q28yQixFQUFFLFlBQVksRUFBRyxJQUFNLEVBQ3ZCLElBQUluNEYsRUFBTWc5RSxHQUFZa1IsRUFBRyxDQUFDLENBQUMsRUFDM0JpSyxFQUFFLFlBQVksRUFBR240RixFQUFJLENBQUMsRUFBR200RixFQUFFLFlBQVksRUFBR240RixFQUFJLENBQUMsRUFDL0NtNEYsRUFBRSxZQUFZLEVBQUduNEYsRUFBSSxDQUFDLEVBQUdtNEYsRUFBRSxZQUFZLEVBQUduNEYsRUFBSSxDQUFDLEVBQy9DLFFBQVExQixFQUFJLEVBQUdBLEVBQUl5akUsRUFBRyxPQUFRLEVBQUV6akUsRUFBRzY1RixFQUFFLFlBQVksRUFBR3AyQixFQUFHLFdBQVd6akUsQ0FBQyxDQUFDLEVBQ3BFLE9BQUE2NUYsRUFBRSxZQUFZLEVBQUcsQ0FBQyxFQUNYQSxDQUNSLENBR0EsU0FBU0ksR0FBY3ZqQyxFQUF5QyxDQUMvRCxJQUFJMXlELEVBQUksQ0FBQyxFQUFFLENBQUMsRUFBR0UsRUFDZixPQUFBQSxFQUFJd3lELEVBQUssV0FBVyxDQUFDLEVBQUcxeUQsRUFBRSxDQUFDLEVBQUkyZ0YsR0FBWXpnRixDQUFDLEdBQUtBLEVBQ2pEQSxFQUFJd3lELEVBQUssV0FBVyxDQUFDLEVBQUcxeUQsRUFBRSxDQUFDLEVBQUkyZ0YsR0FBWXpnRixDQUFDLEdBQUtBLEVBQzFDRixDQUNSLENBQ0EsU0FBU2syRixHQUFjbDJGLEVBQUcsQ0FDekIsT0FBSUEsSUFBR0EsRUFBSXNrRSxHQUFRLENBQUMsR0FDcEJ0a0UsRUFBRSxZQUFZLEVBQUcsQ0FBSSxFQUNyQkEsRUFBRSxZQUFZLEVBQUcsQ0FBSSxFQUNkQSxDQUNSLENBR0EsU0FBU20yRixHQUFpQnpqQyxFQUFNLENBRy9CLFFBRkkwakMsRUFBTTFqQyxFQUFLLFdBQVcsQ0FBQyxFQUN2QjF5RCxFQUFJLENBQUEsRUFDRm8yRixLQUFNLEdBQUdwMkYsRUFBRSxLQUFLa3NGLEdBQWN4NUIsQ0FBTyxDQUFDLEVBQzVDLE9BQU8xeUQsQ0FDUixDQUdBLFNBQVNxMkYsR0FBYzNqQyxFQUFNLENBRzVCLFFBRkkwakMsRUFBTTFqQyxFQUFLLFdBQVcsQ0FBQyxFQUN2QjF5RCxFQUFJLENBQUEsRUFDRm8yRixLQUFNLEdBQUdwMkYsRUFBRSxLQUFLa3NGLEdBQWN4NUIsQ0FBTyxDQUFDLEVBQzVDLE9BQU8xeUQsQ0FDUixDQUdBLFNBQVNzMkYsR0FBWTVqQyxFQUFNLENBQzFCQSxFQUFLLEdBQUssRUFDVixJQUFJMXlELEVBQUksQ0FBQyxLQUFLLEVBQUcsSUFBSSxDQUFDLEVBQ3RCLE9BQUFBLEVBQUUsS0FBTzB5RCxFQUFLLFdBQVcsQ0FBQyxFQUMxQjF5RCxFQUFFLElBQU0weUQsRUFBSyxXQUFXLENBQUMsRUFDbEIxeUQsQ0FDUixDQUlBLFNBQVN1MkYsR0FBYzdqQyxFQUFNeHVCLEVBQVFodUMsRUFBTSxDQUMxQyxHQUFHLENBQUNBLEVBQUssV0FBWSxPQUFPMGlGLEdBQVVsbUIsRUFBTXh1QixDQUFNLEVBQ2xELElBQUkrMEIsRUFBSS9pRSxHQUFRQSxFQUFLLE1BQVEsR0FBSyxFQUFJLEVBQ2xDazNGLEVBQVcxNkIsRUFBSyxXQUFXdUcsQ0FBQyxFQUM1Qm8wQixFQUFVMzZCLEVBQUssV0FBV3VHLENBQUMsRUFDM0J1OUIsRUFBUTlqQyxFQUFLLFdBQVd1RyxDQUFDLEVBQ3pCb3pCLEVBQU8zNUIsRUFBSyxXQUFXdUcsQ0FBQyxFQUN4QndJLEVBQVEvTyxFQUFLLFdBQVcsQ0FBQyxFQUMxQnVHLEdBQUssSUFBR3ZHLEVBQUssR0FBSyxHQUNyQixJQUFJMXlELEVBQUssQ0FBQyxFQUFFb3RGLEVBQVUsRUFBRUMsRUFBUyxFQUFFbUosRUFBTyxLQUFLbkssRUFBTSxNQUFNNXFCLENBQUssRUFDaEUsT0FBR3ZyRSxFQUFLLE1BQVEsR0FBSyxDQUFDQSxFQUFLLFFBQU04SixFQUFFLE1BQVN5aEUsR0FBUyxFQUFLLEdBQ25EemhFLENBQ1IsQ0FDQSxTQUFTeTJGLEdBQWN0b0YsRUFBSzh0QyxFQUFLLENBQ2hDLElBQUlqOEMsRUFBSXNrRSxHQUFRLEVBQUUsRUFDbEJ0a0UsRUFBRSxZQUFZLEVBQUdpOEMsQ0FBRyxFQUNwQmo4QyxFQUFFLFlBQVksRUFBR2k4QyxDQUFHLEVBQ3BCajhDLEVBQUUsWUFBWSxFQUFHbU8sRUFBSSxNQUFRLEdBQUcsRUFDaENuTyxFQUFFLFlBQVksRUFBRyxDQUFDLEVBQ2xCLElBQUlELEVBQUksRUFDUixPQUFHb08sRUFBSSxTQUFRcE8sR0FBSyxHQUNwQkMsRUFBRSxZQUFZLEVBQUdELENBQUMsRUFDbEJBLEVBQUlvTyxFQUFJLE9BQVMsRUFDakJuTyxFQUFFLFlBQVksRUFBR0QsQ0FBQyxFQUNsQkMsRUFBRSxZQUFZLEVBQUcsQ0FBQyxFQUNYQSxDQUNSLENBR0EsU0FBUzAyRixHQUFZaGtDLEVBQU14dUIsRUFBUSxDQUNsQyxJQUFJbGtDLEVBQUksQ0FBQSxFQUNSLE9BQUdra0MsRUFBUyxLQUNad3VCLEVBQUssR0FBSyxHQUNWMXlELEVBQUUsT0FBU3UrRSxHQUFXN3JCLENBQU8sRUFDN0IxeUQsRUFBRSxPQUFTdStFLEdBQVc3ckIsQ0FBTyxFQUM3QkEsRUFBSyxHQUFLLEdBQ0gxeUQsQ0FDUixDQUdBLFNBQVMyMkYsR0FBZWprQyxFQUFNeHVCLEVBQVFodUMsRUFBTSxDQUMzQyxJQUFJc1UsRUFBTSxDQUFDLEtBQUssRUFBSyxFQUNyQixHQUFHdFUsRUFBSyxNQUFRLEVBQUssT0FBQXc4RCxFQUFLLEdBQUt4dUIsRUFBZTE1QixFQUM5QyxJQUFJdEssRUFBSXd5RCxFQUFLLFdBQVcsQ0FBQyxFQUFHLE9BQUFBLEVBQUssR0FBSyxFQUNsQ3h5RCxFQUFJLEtBQU9zSyxFQUFJLEtBQU8sSUFDbkJBLENBQ1IsQ0FHQSxTQUFTb3NGLEdBQWN4M0YsRUFBYyxDQUVwQyxRQURJNDJELEVBQU1zTyxHQUFRLEVBQUlsbEUsQ0FBQyxFQUNmcEQsRUFBSSxFQUFHQSxFQUFJb0QsRUFBRyxFQUFFcEQsRUFBR2c2RCxFQUFJLFlBQVksRUFBR2g2RCxFQUFFLENBQUMsRUFDakQsT0FBT2c2RCxDQUNSLENBRUEsSUFBSTZnQyxHQUFjMUssR0FDZDJLLEdBQVl6TixHQUNaME4sR0FBZTNNLEdBR25CLFNBQVM0TSxHQUFhdGtDLEVBQU0sQ0FDM0IsSUFBSTJpQyxFQUFLM2lDLEVBQUssV0FBVyxDQUFDLEVBQ3RCdWtDLEVBQU12a0MsRUFBSyxXQUFXLENBQUMsRUFDdkJ3a0MsRUFBTXhrQyxFQUFLLFdBQVcsQ0FBQyxFQUN2QjF5RCxFQUFJLENBQUMsSUFBSXExRixFQUFJLElBQUk0QixFQUFLLElBQUlDLEVBQUssS0FBS3hrQyxFQUFLLE1BQU1BLEVBQUssRUFBRUEsRUFBSyxFQUFFd2tDLENBQUcsQ0FBQyxFQUNyRSxPQUFBeGtDLEVBQUssR0FBS3drQyxFQUNIbDNGLENBQ1IsQ0FHQSxTQUFTbTNGLEdBQWV6a0MsRUFBTXh1QixFQUFRaHVDLEVBQU0sQ0FDeENBLEVBQUssV0FBYUEsRUFBSyxNQUFRLElBQUdBLEVBQUssS0FBTyxHQUNqRCxJQUFJb3BDLEVBQU82c0QsR0FBY3o1QixDQUFPLEVBQ2hDLEVBQUVBLEVBQUssRUFDUCxJQUFJNTZCLEVBQU11eUQsR0FBdUIzM0IsRUFBTXh1QixFQUFPLEVBQUdodUMsQ0FBSSxFQUNyRCxPQUFBb3BDLEVBQUssRUFBSSxNQUNUQSxFQUFLLElBQU14SCxFQUNKd0gsQ0FDUixDQUVBLFNBQVM4M0QsR0FBZTFrQyxFQUFvQixDQUMzQyxJQUFJcHpCLEVBQU82c0QsR0FBY3o1QixDQUFPLEVBQ2hDLEVBQUVBLEVBQUssRUFDUCxJQUFJcDNCLEVBQU1pakQsR0FBVzdyQixDQUFPLEVBQzVCLE9BQUFwekIsRUFBSyxFQUFJLElBQ1RBLEVBQUssSUFBTWhFLEVBQ0pnRSxDQUNSLENBQ0EsU0FBUyszRCxHQUFlbDRGLEVBQWNtYyxFQUFjMWUsRUFBZ0IsQ0FDbkUsSUFBSW81RCxFQUFNc08sR0FBUSxFQUFFLEVBQ3BCLE9BQUFnekIsR0FBZ0J0aEMsRUFBSzcyRCxFQUFHbWMsQ0FBQyxFQUN6QjA2QyxFQUFJLFlBQVksRUFBR3A1RCxFQUFLLEdBQUcsRUFDcEJvNUQsQ0FDUixDQUVBLFNBQVN1aEMsR0FBZTdrQyxFQUFNLENBQzdCLElBQUlwekIsRUFBTzZzRCxHQUFjejVCLENBQU8sRUFDaEMsRUFBRUEsRUFBSyxFQUNQLElBQUlwM0IsRUFBTW8zQixFQUFLLFdBQVcsQ0FBQyxFQUMzQixPQUFBcHpCLEVBQUssRUFBSSxJQUNUQSxFQUFLLElBQU1oRSxFQUNKZ0UsQ0FDUixDQUNBLFNBQVNrNEQsR0FBZXI0RixFQUFjbWMsRUFBYzFlLEVBQWdCLENBQ25FLElBQUlvNUQsRUFBTXNPLEdBQVEsQ0FBQyxFQUNuQixPQUFBZ3pCLEdBQWdCdGhDLEVBQUs3MkQsRUFBR21jLENBQUMsRUFDekIwNkMsRUFBSSxZQUFZLEVBQUdwNUQsQ0FBRyxFQUNmbzVELENBQ1IsQ0FFQSxTQUFTeWhDLEdBQWtCL2tDLEVBQU0sQ0FDaEMsSUFBSSsyQixFQUFNLzJCLEVBQUssV0FBVyxDQUFDLEVBQzNCLE9BQUcrMkIsSUFBUSxHQUFLLzJCLEVBQUssSUFBWSxJQUMxQkEsRUFBSyxXQUFXKzJCLEVBQUssV0FBVyxDQUN4QyxDQUdBLFNBQVNpTyxHQUFvQmhsQyxFQUFNeHVCLEVBQVEsQ0FDMUN3dUIsRUFBSyxHQUFLLEVBQ1ZBLEVBQUssR0FBSyxFQUNWQSxFQUFLLEdBQUssRUFDVkEsRUFBSyxHQUFLLEVBQ1ZBLEVBQUssR0FBSyxFQUNWQSxFQUFLLEdBQUt4dUIsRUFBUyxFQUNwQixDQUdBLFNBQVN5ekQsR0FBY2psQyxFQUFNeHVCLEVBQVFodUMsRUFBTSxDQUMxQyxJQUFJKzhELEVBQU1QLEVBQUssRUFBSXh1QixFQUNmNUUsRUFBTzZzRCxHQUFjejVCLENBQU8sRUFDNUIrMkIsRUFBTS8yQixFQUFLLFdBQVcsQ0FBQyxFQUN2QjU2QixFQUFNcXlELEdBQTJCejNCLEVBQU0rMkIsRUFBS3Z6RixDQUFJLEVBQ3BELE9BQUF3OEQsRUFBSyxFQUFJTyxFQUNUM3pCLEVBQUssRUFBSSxNQUNUQSxFQUFLLElBQU14SCxFQUNKd0gsQ0FDUixDQUVBLElBQUlzNEQsR0FBeUIsQ0FBQyxFQUFNLEVBQU0sR0FBTSxHQUFNLElBQU0sSUFBTSxJQUFNLEdBQUksRUFDeEVDLEdBQW9CLFVBQVcsQ0FDbkMsSUFBSUMsRUFBbUIsQ0FFZixFQUFlLElBQXNCLEVBQWUsSUFDcEQsRUFBYyxLQUF1QixFQUFhLElBQ2xELElBQWUsSUFBc0IsSUFBZSxJQUNwRCxJQUFlLElBQXNCLElBQWUsSUFDcEQsSUFBZSxJQUFzQixJQUFlLElBQ3BELElBQWUsSUFBc0IsSUFBZSxJQUNwRCxJQUFlLElBQXNCLElBQWUsSUFDcEQsSUFBZSxJQUFzQixJQUFlLElBQ3BELElBQWUsSUFBc0IsSUFBYyxLQUNuRCxJQUFjLEtBQXVCLElBQWEsTUFDbEQsSUFBYSxNQUF3QixJQUFhLE1BQ2xELElBQWMsS0FBdUIsSUFBYyxLQUNuRCxJQUFjLEtBQXVCLElBQWMsS0FHbkQsRUFBYSxNQUF3QixFQUFlLElBQ3BELEVBQWUsSUFBc0IsR0FBZSxJQUNwRCxHQUFlLElBQXNCLEdBQWUsSUFDcEQsR0FBZSxJQUFzQixHQUFlLElBQ3BELEdBQWUsSUFBc0IsR0FBZSxJQUNwRCxHQUFlLElBQXNCLEdBQWUsSUFDcEQsR0FBZSxJQUFzQixHQUFlLElBQ3BELEdBQWUsSUFBc0IsR0FBZSxJQUNwRCxHQUFlLElBQXNCLEdBQWUsSUFDcEQsR0FBZSxJQUFzQixHQUFlLElBQ3BELEdBQWUsSUFBc0IsR0FBZSxJQUNwRCxHQUFlLElBQXNCLEdBQWUsSUFDcEQsR0FBZSxJQUFzQixHQUFlLElBQ3BELEdBQWUsSUFBc0IsR0FBZSxJQUNwRCxHQUFlLElBQXNCLEdBQWUsSUFDcEQsR0FBZSxJQUFzQixHQUFlLElBQ3BELEdBQWUsSUFBc0IsR0FBZSxJQUNwRCxHQUFjLEtBQXVCLEdBQWMsS0FDbkQsR0FBYyxLQUF1QixJQUFlLElBQ3BELElBQWUsSUFBc0IsSUFBZSxJQUNwRCxJQUFlLElBQXNCLElBQWMsS0FFbkQsSUFBYSxLQUNyQixFQUNJQyxFQUFrQi9uQixHQUFNLENBQ3BCLEVBQWUsSUFBc0IsRUFBZSxJQUNwRCxFQUFjLEtBQXVCLEVBQWEsSUFDbEQsSUFBZSxJQUFzQixJQUFlLElBQ3BELElBQWUsSUFBc0IsSUFBZSxJQUNwRCxJQUFlLElBQXNCLElBQWUsSUFDcEQsSUFBZSxJQUFzQixJQUFlLElBQ3BELElBQWUsSUFBc0IsSUFBZSxJQUNwRCxJQUFlLElBQXNCLElBQWUsSUFDcEQsSUFBZSxJQUFzQixJQUFjLEtBQ25ELElBQWMsS0FBdUIsSUFBYSxNQUNsRCxJQUFhLE1BQXdCLElBQWEsTUFDbEQsSUFBYyxLQUF1QixJQUFjLEtBQ25ELElBQWMsS0FBdUIsSUFBYyxLQUNuRCxFQUFhLEtBQ3JCLENBQUMsRUFFRCxTQUFTZ29CLEVBQVdsbEMsRUFBSzU4RCxFQUFjLENBQ3RDLElBQUk4L0QsRUFBYyxDQUFBLEVBQ2Q5MUQsRUFBZW0xRCxHQUFZLENBQUMsRUFDaEMsT0FBT24vRCxFQUFLLEtBQUksQ0FDZixJQUFLLFNBQVVnSyxFQUFJcTFELEdBQUlQLEdBQWNsQyxDQUFHLENBQUMsRUFBRyxNQUM1QyxJQUFLLFNBQVU1eUQsRUFBSXExRCxHQUFJekMsQ0FBRyxFQUFHLE1BQzdCLElBQUssU0FDTCxJQUFLLFFBQVM1eUQsRUFBSTR5RCxFQUFLLEtBQ3ZCLENBQ0QwTyxHQUFVdGhFLEVBQUcsQ0FBQyxFQUdkLElBQUkrdEYsRUFBSy90RixFQUFFLFdBQVcsQ0FBQyxFQUNuQiszRixFQUFPLENBQUMsRUFBRWhLLEVBQUssS0FDZmlLLEVBQU0sR0FBT0MsRUFBSyxHQUN0QixPQUFPbEssRUFBRSxDQUNSLElBQUssR0FBTSxNQUNYLElBQUssR0FBTSxNQUNYLElBQUssSUFBTWlLLEVBQU0sR0FBTUQsRUFBTyxHQUFNLE1BQ3BDLElBQUssSUFBTUMsRUFBTSxHQUFNRCxFQUFPLEdBQU0sTUFHcEMsSUFBSyxLQUFNLE1BQ1gsSUFBSyxLQUFNLE1BQ1gsSUFBSyxLQUFNRSxFQUFLLEdBQU0sTUFFdEIsSUFBSyxLQUFNLE1BRVgsUUFBUyxNQUFNLElBQUksTUFBTSw0QkFBOEJsSyxFQUFHLFNBQVMsRUFBRSxDQUFDLENBQ3RFLENBRUQsSUFBSW1LLEVBQU8sRUFBR0MsRUFBTyxJQUNsQnBLLEdBQU0sSUFBTW1LLEVBQU9sNEYsRUFBRSxXQUFXLENBQUMsR0FDcENBLEVBQUUsR0FBSyxFQUNKK3RGLEdBQU0sSUFBTW1LLEVBQU9sNEYsRUFBRSxXQUFXLENBQUMsR0FDakNrNEYsRUFBTyxVQUFTQSxFQUFPLEtBRXZCbkssR0FBTSxJQUFNb0ssRUFBT240RixFQUFFLFdBQVcsQ0FBQyxHQUNwQyxJQUFJbzRGLEVBQU9wNEYsRUFBRSxXQUFXLENBQUMsRUFFTnE0RixFQUFhcmlHLEVBQUssVUFBWSxLQUM5QyszRixHQUFNLElBQ1IvdEYsRUFBRSxHQUFHLEdBQ09BLEVBQUUsV0FBVyxDQUFDLEVBSXZCQSxFQUFFQSxFQUFFLENBQUMsSUFBTSxJQUFHcTRGLEVBQWFULEVBQWlCNTNGLEVBQUVBLEVBQUUsQ0FBQyxDQUFDLEdBQ3JEQSxFQUFFLEdBQUcsRUFFTEEsRUFBRSxHQUFHLEdBRUhpNEYsSUFBSWo0RixFQUFFLEdBQUssSUFNZCxRQUhJdTNCLEVBQTZCLENBQUEsRUFBSW50QixFQUFzQixDQUFFLEVBQ3pEa3VGLEVBQU8sS0FBSyxJQUFJdDRGLEVBQUUsT0FBUyt0RixHQUFNLEVBQU8sSUFBU29LLEVBQU8sSUFBTUgsRUFBTSxJQUFNLElBQzFFcmpCLEVBQUtzakIsRUFBSyxHQUFLLEdBQ2JqNEYsRUFBRSxFQUFJczRGLEdBQVF0NEYsRUFBRUEsRUFBRSxDQUFDLEdBQUssSUFXN0IsT0FWQW9LLEVBQVMsQ0FBRSxFQUNYQSxFQUFNLEtBQU9rcUQsR0FBUyxNQUFNLE9BQU8rakMsRUFBWXI0RixFQUFFLE1BQU1BLEVBQUUsRUFBR0EsRUFBRSxFQUFFMjBFLENBQUUsQ0FBQyxFQUFFLFFBQVEsbUJBQW1CLEVBQUUsRUFDbEczMEUsRUFBRSxHQUFLMjBFLEVBQ1B2cUUsRUFBTSxLQUFPLE9BQU8sYUFBYXBLLEVBQUUsV0FBVyxDQUFDLENBQUMsRUFDN0MrdEYsR0FBTSxHQUFRLENBQUNrSyxJQUFJN3RGLEVBQU0sT0FBU3BLLEVBQUUsV0FBVyxDQUFDLEdBQ25Eb0ssRUFBTSxJQUFNcEssRUFBRSxXQUFXLENBQUMsRUFDdkIrdEYsR0FBTSxJQUFNM2pGLEVBQU0sT0FBU3BLLEVBQUUsV0FBVyxDQUFDLEdBQzVDb0ssRUFBTSxJQUFNcEssRUFBRSxXQUFXLENBQUMsRUFDdkJvSyxFQUFNLEtBQUssUUFBUW10QixFQUFPLEtBQUtudEIsQ0FBSyxFQUNwQzJqRixHQUFNLElBQU0vdEYsRUFBRSxHQUFLaTRGLEVBQUssR0FBSyxJQUN6Qjd0RixFQUFNLEtBQUksQ0FDaEIsSUFBSyxLQUNBLENBQUM0dEYsR0FBTzV0RixFQUFNLEtBQU8sSUFBTXBVLEVBQUssS0FBaUIsR0FBY29VLEVBQU0sS0FBYUEsRUFBTSxLQUM1RixNQUNELElBQUssSUFDTCxJQUFLLElBQ0RwVSxFQUFLLEtBQWlCLEdBQWNvVSxFQUFNLEtBQWFBLEVBQU0sS0FDaEUsTUFDRCxJQUFLLElBQ0wsSUFBSyxJQUNMLElBQUssSUFDTCxJQUFLLElBQ0wsSUFBSyxJQUNMLElBQUssSUFDTCxJQUFLLElBQ0wsSUFBSyxJQUNMLElBQUssSUFDTCxJQUFLLElBQ0wsSUFBSyxJQUNMLElBQUssSUFDTCxJQUFLLElBQ0osTUFDRCxRQUFTLE1BQU0sSUFBSSxNQUFNLHVCQUF5QkEsRUFBTSxJQUFJLENBQzVELENBSUYsR0FER3BLLEVBQUVBLEVBQUUsQ0FBQyxJQUFNLEtBQU1BLEVBQUUsRUFBSW00RixFQUFLLEdBQzVCbjRGLEVBQUUsV0FBVyxDQUFDLElBQU0sR0FBTSxNQUFNLElBQUksTUFBTSw0QkFBOEJBLEVBQUUsRUFBSSxJQUFNQSxFQUFFQSxFQUFFLENBQUMsQ0FBQyxFQUM3RkEsRUFBRSxFQUFJbTRGLEVBR04sSUFBSXAzQixFQUFJLEVBQUdOLEVBQUksRUFFZixJQURBM0ssRUFBSSxDQUFDLEVBQUksR0FDTDJLLEVBQUksRUFBR0EsR0FBS2xwQyxFQUFPLE9BQVEsRUFBRWtwQyxFQUFHM0ssRUFBSSxDQUFDLEVBQUUySyxDQUFDLEVBQUlscEMsRUFBT2twQyxDQUFDLEVBQUUsS0FDMUQsS0FBTXkzQixLQUFTLEdBQUcsQ0FDakIsR0FBR2w0RixFQUFFQSxFQUFFLENBQUMsSUFBTSxHQUFNLENBRW5CQSxFQUFFLEdBQUdvNEYsRUFDTCxRQUNBLENBR0QsSUFGQSxFQUFFcDRGLEVBQUUsRUFDSjgxRCxFQUFJLEVBQUVpTCxDQUFDLEVBQUksQ0FBRSxFQUFFTixFQUFJLEVBQ2ZBLEVBQUksRUFBR0EsR0FBS2xwQyxFQUFPLE9BQVEsRUFBRWtwQyxFQUFHLENBQ25DLElBQUkvRSxFQUFLMTdELEVBQUUsTUFBTUEsRUFBRSxFQUFHQSxFQUFFLEVBQUV1M0IsRUFBT2twQyxDQUFDLEVBQUUsR0FBRyxFQUFHemdFLEVBQUUsR0FBR3UzQixFQUFPa3BDLENBQUMsRUFBRSxJQUN6RGEsR0FBVTVGLEVBQUksQ0FBQyxFQUNmLElBQUl2OEQsRUFBSW0xRCxHQUFTLE1BQU0sT0FBTytqQyxFQUFZMzhCLENBQUUsRUFDNUMsT0FBT25rQyxFQUFPa3BDLENBQUMsRUFBRSxLQUFJLENBQ3BCLElBQUssSUFFRHRoRSxFQUFFLEtBQUksRUFBRyxTQUFRMjJELEVBQUlpTCxDQUFDLEVBQUVOLENBQUMsRUFBSXRoRSxFQUFFLFFBQVEsT0FBTyxFQUFFLEdBQ25ELE1BQ0QsSUFBSyxJQUNEQSxFQUFFLFNBQVcsRUFBRzIyRCxFQUFJaUwsQ0FBQyxFQUFFTixDQUFDLEVBQUksSUFBSSxLQUFLLENBQUN0aEUsRUFBRSxNQUFNLEVBQUUsQ0FBQyxFQUFHLENBQUNBLEVBQUUsTUFBTSxFQUFFLENBQUMsRUFBRSxFQUFHLENBQUNBLEVBQUUsTUFBTSxFQUFFLENBQUMsQ0FBQyxFQUNoRjIyRCxFQUFJaUwsQ0FBQyxFQUFFTixDQUFDLEVBQUl0aEUsRUFDakIsTUFDRCxJQUFLLElBQUsyMkQsRUFBSWlMLENBQUMsRUFBRU4sQ0FBQyxFQUFJLFdBQVd0aEUsRUFBRSxNQUFNLEVBQUcsTUFDNUMsSUFBSyxJQUFLLElBQUssSUFBSzIyRCxFQUFJaUwsQ0FBQyxFQUFFTixDQUFDLEVBQUl3M0IsRUFBS3Y4QixFQUFHLFdBQVcsR0FBSSxHQUFHLEVBQUksV0FBYUEsRUFBRyxXQUFXLEVBQUcsR0FBRyxFQUFHLE1BQ2xHLElBQUssSUFBSyxPQUFPdjhELEVBQUUsS0FBSSxFQUFHLFlBQWEsRUFBQSxDQUN0QyxJQUFLLElBQUssSUFBSyxJQUFLMjJELEVBQUlpTCxDQUFDLEVBQUVOLENBQUMsRUFBSSxHQUFNLE1BQ3RDLElBQUssSUFBSyxJQUFLLElBQUszSyxFQUFJaUwsQ0FBQyxFQUFFTixDQUFDLEVBQUksR0FBTyxNQUN2QyxJQUFLLEdBQUksSUFBSyxJQUFLLE1BQ25CLFFBQVMsTUFBTSxJQUFJLE1BQU0sdUJBQXlCdGhFLEVBQUksR0FBRyxDQUM5RCxDQUFPLE1BQ0gsSUFBSyxJQUNKLEdBQUcsQ0FBQzQ0RixFQUFNLE1BQU0sSUFBSSxNQUFNLGdDQUFrQ2hLLEVBQUcsU0FBUyxFQUFFLENBQUMsRUFDM0VqNEIsRUFBSWlMLENBQUMsRUFBRU4sQ0FBQyxFQUFJLFlBQWN3M0IsRUFBSyxTQUFTOTRGLEVBQUUsS0FBSSxFQUFJLEVBQUUsRUFBR3U4RCxFQUFHLFdBQVcsQ0FBQyxHQUN0RSxNQUNELElBQUssSUFDSnY4RCxFQUFJQSxFQUFFLFFBQVEsVUFBVSxFQUFFLEVBQUUsT0FFekJBLEdBQUtBLEdBQUssTUFBSzIyRCxFQUFJaUwsQ0FBQyxFQUFFTixDQUFDLEVBQUksQ0FBQ3RoRSxHQUFLLEdBQUcsTUFDeEMsSUFBSyxJQUVKMjJELEVBQUlpTCxDQUFDLEVBQUVOLENBQUMsRUFBSSxJQUFJLEtBQUsvRSxFQUFHLFdBQVcsR0FBSSxHQUFHLEVBQUksV0FBYyxFQUM1RCxNQUNELElBQUssSUFBSzVGLEVBQUlpTCxDQUFDLEVBQUVOLENBQUMsRUFBSSxJQUFJLE1BQU0vRSxFQUFHLFdBQVcsQ0FBQyxFQUFJLFNBQVksTUFBWUEsRUFBRyxXQUFXLENBQUMsQ0FBQyxFQUFHLE1BQzlGLElBQUssSUFBSzVGLEVBQUlpTCxDQUFDLEVBQUVOLENBQUMsRUFBSS9FLEVBQUcsV0FBVyxFQUFFLEdBQUcsRUFBRSxJQUFPQSxFQUFHLFdBQVcsRUFBRyxHQUFHLEVBQUUsSUFBSyxLQUFLLElBQUksRUFBRSxFQUFFLEVBQUcsTUFDN0YsSUFBSyxJQUFLNUYsRUFBSWlMLENBQUMsRUFBRU4sQ0FBQyxFQUFJLENBQUMvRSxFQUFHLFdBQVcsR0FBSSxHQUFHLEVBQUcsTUFDL0MsSUFBSyxJQUFLLEdBQUdzOEIsR0FBT3pnRSxFQUFPa3BDLENBQUMsRUFBRSxLQUFPLEVBQUcsQ0FBRTNLLEVBQUlpTCxDQUFDLEVBQUVOLENBQUMsRUFBSS9FLEVBQUcsV0FBVyxFQUFFLEdBQUcsRUFBRyxLQUFRLENBRXBGLElBQUssSUFBSyxJQUFLLElBQUtBLEVBQUcsR0FBS25rQyxFQUFPa3BDLENBQUMsRUFBRSxJQUFLLE1BQzNDLElBQUssSUFDSixHQUFHbHBDLEVBQU9rcEMsQ0FBQyxFQUFFLE9BQVMsYUFBYyxNQUVyQyxRQUFTLE1BQU0sSUFBSSxNQUFNLDZCQUErQmxwQyxFQUFPa3BDLENBQUMsRUFBRSxJQUFJLENBQ3RFLENBQ0QsQ0FDRCxDQUNELEdBQUdzdEIsR0FBTSxHQUFTL3RGLEVBQUUsRUFBSUEsRUFBRSxRQUFVQSxFQUFFQSxFQUFFLEdBQUcsR0FBSyxHQUFNLE1BQU0sSUFBSSxNQUFNLDJCQUE2QkEsRUFBRSxFQUFFLEdBQUssT0FBU0EsRUFBRSxPQUFTLElBQU1BLEVBQUVBLEVBQUUsRUFBRSxDQUFDLEVBQUUsU0FBUyxFQUFFLENBQUMsRUFDM0osT0FBR2hLLEdBQVFBLEVBQUssWUFBVzgvRCxFQUFNQSxFQUFJLE1BQU0sRUFBRzkvRCxFQUFLLFNBQVMsR0FDNURBLEVBQUssSUFBTXVoQyxFQUNKdStCLENBQ1IsQ0FFQSxTQUFTeWlDLEVBQWEzbEMsRUFBSzU4RCxFQUFvQixDQUM5QyxJQUFJOEosRUFBSTlKLEdBQVEsR0FDWjhKLEVBQUUsU0FBUUEsRUFBRSxPQUFTLFlBQ3pCLElBQUl5N0UsRUFBS1EsR0FBYStiLEVBQVdsbEMsRUFBSzl5RCxDQUFDLEVBQUdBLENBQUMsRUFDM0MsT0FBQXk3RSxFQUFHLE9BQU8sRUFBSXo3RSxFQUFFLElBQUksSUFBSSxTQUFTc0ssRUFBTyxDQUFFLE1BQU8sQ0FDaEQsSUFBS0EsRUFBTSxJQUNYLElBQUtBLENBQ0wsQ0FBQyxDQUFDLEVBQ0gsT0FBT3RLLEVBQUUsSUFDRnk3RSxDQUNSLENBRUEsU0FBU2lkLEVBQWdCNWxDLEVBQUs1OEQsRUFBbUIsQ0FDaEQsR0FBSSxDQUFFLE9BQU9pbEYsR0FBa0JzZCxFQUFhM2xDLEVBQUs1OEQsQ0FBSSxFQUFHQSxDQUFJLENBQUksT0FDMUQ4SSxFQUFHLENBQUUsR0FBRzlJLEdBQVFBLEVBQUssSUFBSyxNQUFNOEksQ0FBSSxDQUMxQyxNQUFRLENBQUMsV0FBVyxDQUFBLEVBQUcsT0FBTyxDQUFFLENBQUEsQ0FDakMsQ0FFQSxJQUFJMjVGLEVBQVEsQ0FBRSxFQUFLLEVBQUcsRUFBSyxJQUFLLEVBQUssRUFBRyxFQUFLLEVBQUcsSUFBSyxFQUFHLEdBQUksQ0FBQyxFQUM3RCxTQUFTQyxFQUFhbmQsRUFBa0J2bEYsRUFBb0IsQ0FDM0QsSUFBSThKLEVBQUk5SixHQUFRLEdBRWhCLEdBREcsQ0FBQzhKLEVBQUUsVUFBWSxHQUFHOHpELEdBQU8sQ0FBQzl6RCxFQUFFLFFBQVEsRUFDcENBLEVBQUUsTUFBUSxTQUFVLE1BQU0sSUFBSSxNQUFNLCtCQUErQixFQUN0RSxJQUFJdzVFLEVBQUtOLEtBQ0wyZixFQUFjQyxHQUFjcmQsRUFBSSxDQUFDLE9BQU8sRUFBRyxJQUFJLEdBQU0sVUFBVSxFQUFJLENBQUMsRUFDcEVzZCxFQUFVRixFQUFJLENBQUMsRUFBR3JyRixFQUFPcXJGLEVBQUksTUFBTSxDQUFDLEVBQUc5MkQsRUFBTzA1QyxFQUFHLE9BQU8sR0FBSyxDQUFBLEVBQzdEei9FLEVBQUksRUFBR3MzRCxFQUFJLEVBQUcwbEMsRUFBTyxFQUFHVixFQUFPLEVBQ25DLElBQUl0OEYsRUFBSSxFQUFHQSxFQUFJKzhGLEVBQVEsT0FBUSxFQUFFLzhGLEVBQUcsQ0FDbkMsS0FBSytsQyxFQUFLL2xDLENBQUMsR0FBRyxDQUFFLEdBQUUsS0FBSyxDQUFBLEdBQUksS0FBTSxDQUFFKzhGLEVBQVEvOEYsQ0FBQyxFQUFJK2xDLEVBQUsvbEMsQ0FBQyxFQUFFLElBQUksS0FBTSxFQUFFZzlGLEVBQU0sUUFBVyxDQUNyRixHQUFHRCxFQUFRLzhGLENBQUMsR0FBSyxLQUdqQixJQUZBLEVBQUVnOUYsRUFDQyxPQUFPRCxFQUFRLzhGLENBQUMsR0FBTSxXQUFVKzhGLEVBQVEvOEYsQ0FBQyxFQUFJKzhGLEVBQVEvOEYsQ0FBQyxFQUFFLFNBQVMsRUFBRSxHQUNuRSxPQUFPKzhGLEVBQVEvOEYsQ0FBQyxHQUFNLFNBQVUsTUFBTSxJQUFJLE1BQU0sMkJBQTZCKzhGLEVBQVEvOEYsQ0FBQyxFQUFJLEtBQVEsT0FBTys4RixFQUFRLzhGLENBQUMsRUFBSyxHQUFHLEVBQzdILEdBQUcrOEYsRUFBUSxRQUFRQSxFQUFRLzhGLENBQUMsQ0FBQyxJQUFNQSxHQUFHLElBQUlzM0QsRUFBRSxFQUFHQSxFQUFFLEtBQUssRUFBRUEsRUFDdkQsR0FBR3lsQyxFQUFRLFFBQVFBLEVBQVEvOEYsQ0FBQyxFQUFJLElBQU1zM0QsQ0FBQyxHQUFLLEdBQUksQ0FBRXlsQyxFQUFRLzhGLENBQUMsR0FBSyxJQUFNczNELEVBQUcsS0FBUSxHQUNsRixDQUNELElBQUluNEIsRUFBUTQvQyxHQUFrQlUsRUFBRyxNQUFNLENBQUMsRUFDcEN3ZCxFQUE2QixDQUFBLEVBQzdCQyxFQUE4QixDQUFBLEVBQzlCQyxFQUFnQyxDQUFBLEVBQ3BDLElBQUluOUYsRUFBSSxFQUFHQSxHQUFLbS9CLEVBQU0sRUFBRSxFQUFJQSxFQUFNLEVBQUUsRUFBRyxFQUFFbi9CLEVBQUcsQ0FDM0MsSUFBSW85RixFQUFRLEdBQUlDLEVBQVMsR0FBSXZqQyxFQUFTLEVBQ2xDM25ELEVBQXFCLENBQUEsRUFDekIsSUFBSW1sRCxFQUFFLEVBQUdBLEVBQUk5bEQsRUFBSyxPQUFRLEVBQUU4bEQsRUFDeEI5bEQsRUFBSzhsRCxDQUFDLEVBQUV0M0QsQ0FBQyxHQUFLLE1BQU1tUyxFQUFJLEtBQUtYLEVBQUs4bEQsQ0FBQyxFQUFFdDNELENBQUMsQ0FBQyxFQUUzQyxHQUFHbVMsRUFBSSxRQUFVLEdBQUs0cUYsRUFBUS84RixDQUFDLEdBQUssS0FBTSxDQUFFaTlGLEVBQVNqOUYsQ0FBQyxFQUFJLElBQUssUUFBVyxDQUMxRSxJQUFJczNELEVBQUksRUFBR0EsRUFBSW5sRCxFQUFJLE9BQVEsRUFBRW1sRCxFQUFHLENBQy9CLE9BQU8sT0FBT25sRCxFQUFJbWxELENBQUMsRUFBQyxDQUVuQixJQUFLLFNBQVUrbEMsRUFBUyxJQUFLLE1BQzdCLElBQUssU0FBVUEsRUFBUyxJQUFLLE1BQzdCLElBQUssVUFBV0EsRUFBUyxJQUFLLE1BQzlCLElBQUssU0FBVUEsRUFBU2xyRixFQUFJbWxELENBQUMsWUFBYSxLQUFPLElBQU0sSUFBSyxNQUM1RCxRQUFTK2xDLEVBQVMsR0FDbEIsQ0FDRHZqQyxFQUFTLEtBQUssSUFBSUEsRUFBUSxPQUFPM25ELEVBQUltbEQsQ0FBQyxDQUFDLEVBQUUsTUFBTSxFQUMvQzhsQyxFQUFRQSxHQUFTQSxHQUFTQyxFQUFTLElBQU1BLENBRXpDLENBQ0V2akMsRUFBUyxNQUFLQSxFQUFTLEtBQzFCdWpDLElBQVd0M0QsRUFBSy9sQyxDQUFDLEdBQUcsQ0FBQSxHQUFJLEtBQUssQ0FBRSxHQUFFLEtBRTlCcTlGLEdBQVUsS0FDVHQzRCxFQUFLL2xDLENBQUMsRUFBRSxJQUFJLElBQU04NUQsSUFBUUEsRUFBUy96QixFQUFLL2xDLENBQUMsRUFBRSxJQUFJLEtBRWhEbzlGLEdBQVMsS0FBT0MsR0FBVSxNQUM1QkQsRUFBUSxJQUNSRCxFQUFZbjlGLENBQUMsRUFBSStsQyxFQUFLL2xDLENBQUMsRUFBRSxJQUFJLElBQzdCODVELEVBQVMvekIsRUFBSy9sQyxDQUFDLEVBQUUsSUFBSSxLQUV0Qms5RixFQUFVbDlGLENBQUMsRUFBSW85RixHQUFTLEtBQU9DLEdBQVUsSUFBTXZqQyxFQUFVNmlDLEVBQU1TLENBQUssR0FBSyxFQUN6RWQsR0FBUVksRUFBVWw5RixDQUFDLEVBQ25CaTlGLEVBQVNqOUYsQ0FBQyxFQUFJbzlGLENBQ2QsQ0FFRCxJQUFJajFFLEVBQUlxMUQsRUFBRyxLQUFLLEVBQUUsRUFLbEIsSUFKQXIxRCxFQUFFLFlBQVksRUFBRyxTQUFVLEVBQzNCQSxFQUFFLFlBQVksRUFBRzNXLEVBQUssTUFBTSxFQUM1QjJXLEVBQUUsWUFBWSxFQUFHLElBQU0sR0FBSzYwRSxDQUFJLEVBQ2hDNzBFLEVBQUUsWUFBWSxFQUFHbTBFLENBQUksRUFDakJ0OEYsRUFBRSxFQUFHQSxFQUFJLEVBQUcsRUFBRUEsRUFBR21vQixFQUFFLFlBQVksRUFBRyxDQUFDLEVBR3ZDLElBRkFBLEVBQUUsWUFBWSxFQUFHLEdBQWUsQ0FBQzR6RSxFQUE2QnRrQyxLQUF3QixJQUFPLENBQUUsRUFFM0Z6M0QsRUFBSSxFQUFHczNELEVBQUksRUFBR3QzRCxFQUFJKzhGLEVBQVEsT0FBUSxFQUFFLzhGLEVBQ3ZDLEdBQUcrOEYsRUFBUS84RixDQUFDLEdBQUssS0FDakIsS0FBSXM5RixFQUFLOWYsRUFBRyxLQUFLLEVBQUUsRUFDZnptRCxHQUFNZ21FLEVBQVEvOEYsQ0FBQyxFQUFFLE1BQU0sR0FBRyxFQUFJLDBCQUFnRCxNQUFNLEVBQUcsRUFBRSxFQUM3RnM5RixFQUFHLFlBQVksRUFBR3ZtRSxFQUFJLE1BQU0sRUFDNUJ1bUUsRUFBRyxZQUFZLEVBQUdMLEVBQVNqOUYsQ0FBQyxHQUFLLElBQU0sSUFBTWk5RixFQUFTajlGLENBQUMsRUFBRyxNQUFNLEVBQ2hFczlGLEVBQUcsWUFBWSxFQUFHaG1DLENBQUMsRUFDbkJnbUMsRUFBRyxZQUFZLEVBQUdKLEVBQVVsOUYsQ0FBQyxHQUFLMjhGLEVBQU1NLEVBQVNqOUYsQ0FBQyxDQUFDLEdBQUssQ0FBQyxFQUN6RHM5RixFQUFHLFlBQVksRUFBR0gsRUFBWW45RixDQUFDLEdBQUssQ0FBQyxFQUNyQ3M5RixFQUFHLFlBQVksRUFBRyxDQUFJLEVBQ3RCQSxFQUFHLFlBQVksRUFBRyxDQUFDLEVBQ25CQSxFQUFHLFlBQVksRUFBRyxDQUFDLEVBQ25CQSxFQUFHLFlBQVksRUFBRyxDQUFDLEVBQ25CQSxFQUFHLFlBQVksRUFBRyxDQUFDLEVBQ25CaG1DLEdBQU00bEMsRUFBVWw5RixDQUFDLEdBQUsyOEYsRUFBTU0sRUFBU2o5RixDQUFDLENBQUMsR0FBSyxFQUc3QyxJQUFJdTlGLEdBQUsvZixFQUFHLEtBQUssR0FBRyxFQUVwQixJQURBK2YsR0FBRyxZQUFZLEVBQUcsRUFBVSxFQUN4QnY5RixFQUFFLEVBQUdBLEVBQUksR0FBRyxFQUFFQSxFQUFHdTlGLEdBQUcsWUFBWSxFQUFHLENBQVUsRUFDakQsSUFBSXY5RixFQUFFLEVBQUdBLEVBQUl3UixFQUFLLE9BQVEsRUFBRXhSLEVBQUcsQ0FDOUIsSUFBSXc5RixHQUFPaGdCLEVBQUcsS0FBSzhlLENBQUksRUFFdkIsSUFEQWtCLEdBQUssWUFBWSxFQUFHLENBQUMsRUFDakJsbUMsRUFBRSxFQUFHQSxFQUFFeWxDLEVBQVEsT0FBUSxFQUFFemxDLEVBQzVCLEdBQUd5bEMsRUFBUXpsQyxDQUFDLEdBQUssS0FDakIsT0FBTzJsQyxFQUFTM2xDLENBQUMsRUFBQyxDQUNqQixJQUFLLElBQUtrbUMsR0FBSyxZQUFZLEVBQUdoc0YsRUFBS3hSLENBQUMsRUFBRXMzRCxDQUFDLEdBQUssS0FBTyxHQUFPOWxELEVBQUt4UixDQUFDLEVBQUVzM0QsQ0FBQyxFQUFJLEdBQU8sRUFBSSxFQUFHLE1BQ3JGLElBQUssSUFBS2ttQyxHQUFLLFlBQVksRUFBR2hzRixFQUFLeFIsQ0FBQyxFQUFFczNELENBQUMsR0FBRyxFQUFHLEdBQUcsRUFBRyxNQUNuRCxJQUFLLElBQ0osSUFBSW1tQyxHQUFLLElBRVQsSUFERyxPQUFPanNGLEVBQUt4UixDQUFDLEVBQUVzM0QsQ0FBQyxHQUFLLFdBQVVtbUMsR0FBS2pzRixFQUFLeFIsQ0FBQyxFQUFFczNELENBQUMsRUFBRSxRQUFRNmxDLEVBQVk3bEMsQ0FBQyxHQUFHLENBQUMsR0FDdkUwbEMsRUFBSyxFQUFHQSxFQUFPRSxFQUFVNWxDLENBQUMsRUFBRW1tQyxHQUFHLE9BQVEsRUFBRVQsRUFBTVEsR0FBSyxZQUFZLEVBQUcsRUFBSSxFQUMzRUEsR0FBSyxZQUFZLEVBQUdDLEdBQUksTUFBTSxFQUM5QixNQUNELElBQUssSUFDQWpzRixFQUFLeFIsQ0FBQyxFQUFFczNELENBQUMsR0FFWmttQyxHQUFLLFlBQVksR0FBSSxPQUFPaHNGLEVBQUt4UixDQUFDLEVBQUVzM0QsQ0FBQyxFQUFFLFlBQWEsR0FBRSxNQUFNLEVBQUUsRUFBRyxNQUFNLEVBQ3ZFa21DLEdBQUssWUFBWSxHQUFJLE1BQU1oc0YsRUFBS3hSLENBQUMsRUFBRXMzRCxDQUFDLEVBQUUsU0FBUSxFQUFHLElBQUksTUFBTSxFQUFFLEVBQUcsTUFBTSxFQUN0RWttQyxHQUFLLFlBQVksR0FBSSxLQUFLaHNGLEVBQUt4UixDQUFDLEVBQUVzM0QsQ0FBQyxFQUFFLFFBQVMsR0FBRSxNQUFNLEVBQUUsRUFBRyxNQUFNLEdBSmxEa21DLEdBQUssWUFBWSxFQUFHLFdBQVksTUFBTSxFQUtwRCxNQUNILElBQUssSUFDSixJQUFJOS9FLEdBQUssT0FBT2xNLEVBQUt4UixDQUFDLEVBQUVzM0QsQ0FBQyxHQUFLLEtBQU85bEQsRUFBS3hSLENBQUMsRUFBRXMzRCxDQUFDLEVBQUksRUFBRSxFQUFFLE1BQU0sRUFBRzRsQyxFQUFVNWxDLENBQUMsQ0FBQyxFQUUzRSxJQURBa21DLEdBQUssWUFBWSxFQUFHOS9FLEdBQUksTUFBTSxFQUMxQnMvRSxFQUFLLEVBQUdBLEVBQU9FLEVBQVU1bEMsQ0FBQyxFQUFFNTVDLEdBQUcsT0FBUSxFQUFFcy9FLEVBQU1RLEdBQUssWUFBWSxFQUFHLEVBQUksRUFBRyxLQUMvRSxDQUdGLENBQ0QsT0FBQWhnQixFQUFHLEtBQUssQ0FBQyxFQUFFLFlBQVksRUFBRyxFQUFJLEVBQ3ZCQSxFQUFHLEtBQ1gsQ0FDQyxNQUFPLENBQ04sWUFBYWtmLEVBQ2IsU0FBVUQsRUFDVixXQUFZRyxDQUNkLENBQ0EsSUFFSWMsR0FBcUIsVUFBVyxDQUVuQyxJQUFJQyxFQUFnQixDQUNuQixHQUFHLElBQUssR0FBRyxJQUFLLEdBQUcsSUFBSyxHQUFHLElBQUssR0FBRyxJQUFLLEdBQUcsSUFDM0MsR0FBRyxJQUFLLEdBQUcsSUFBSyxHQUFHLElBQWEsR0FBRyxJQUNuQyxHQUFHLElBQUssR0FBRyxJQUFLLEdBQUcsSUFBYSxHQUFHLElBQ25DLEdBQUcsSUFBSyxHQUFHLElBQUssR0FBRyxJQUFLLEdBQUcsSUFBSyxHQUFHLElBQ25DLEdBQUcsSUFBSyxHQUFHLElBQUssR0FBRyxJQUFhLEdBQUcsSUFDbkMsR0FBRyxJQUFLLEdBQUcsSUFBSyxHQUFHLElBQUssR0FBRyxJQUFLLEdBQUcsSUFBSyxHQUFHLElBQzNDLEdBQUcsSUFBSyxHQUFHLElBQUssR0FBRyxJQUFhLEdBQUcsSUFDbkMsR0FBRyxJQUFLLEdBQUcsSUFBSyxHQUFHLElBQWEsR0FBRyxJQUNuQyxHQUFHLElBQUssR0FBRyxJQUFLLEdBQUcsSUFBSyxHQUFHLElBQUssR0FBRyxJQUNuQyxHQUFHLElBQUssR0FBRyxJQUFLLEdBQUcsSUFBYSxHQUFHLElBQ25DLEdBQUcsSUFBSyxHQUFHLElBQUssRUFBRSxJQUFNLEVBQUUsSUFBTSxFQUFFLElBQU0sRUFBRSxJQUMxQyxHQUFHLElBQUssR0FBRyxJQUFLLEdBQUcsSUFDbkIsRUFBRSxJQUFNLEVBQUUsSUFBTSxFQUFFLElBQU0sS0FBSyxJQUN0QixFQUFTLElBQWUsRUFBUyxJQUFhLEVBQVMsSUFDdkQsRUFBUyxJQUFlLEVBQVMsSUFBYSxFQUFTLElBQ3ZELEVBQVMsSUFBUSxFQUFFLElBQU0sRUFBRSxJQUFNLEVBQUUsSUFBTSxFQUFFLElBQU0sRUFBRSxJQUFNLEVBQUUsSUFBTSxFQUFFLElBQzFFLElBQUksSUFBSyxJQUFJLElBQUssSUFBSSxJQUFLLElBQUksSUFBSyxJQUFJLElBQUssSUFBSSxJQUFLLEtBQUssSUFDM0QsSUFBSSxJQUFLLElBQUksSUFBSyxJQUFJLElBQUssSUFBSSxJQUFLLElBQUksSUFBSyxJQUFJLElBQUssSUFBSSxHQUM1RCxFQUNLQyxFQUFrQixJQUFJLE9BQU8sU0FBYWg4RixHQUFLKzdGLENBQVksRUFBRSxLQUFLLEdBQUcsRUFBRSxRQUFRLFNBQVUsT0FBTyxFQUFFLFFBQVEsWUFBWSxNQUFNLEVBQUksUUFBUyxJQUFJLEVBQzdJRSxFQUFlLFNBQVN2Z0csRUFBR29oRSxFQUFHLENBQUUsSUFBSTE2RCxFQUFJMjVGLEVBQWFqL0IsQ0FBRSxFQUFHLE9BQU8sT0FBTzE2RCxHQUFLLFNBQVd1MEQsR0FBU3YwRCxDQUFDLEVBQUlBLEdBQ3RHODVGLEVBQW1CLFNBQVNyL0IsRUFBSUMsRUFBSUMsRUFBSSxDQUFFLElBQUlvL0IsRUFBVXIvQixFQUFHLFdBQVcsQ0FBQyxFQUFJLElBQU8sRUFBTUMsRUFBRyxXQUFXLENBQUMsRUFBSSxHQUFPLE9BQU9vL0IsR0FBUyxHQUFLdC9CLEVBQUtsRyxHQUFTd2xDLENBQUssQ0FBRSxFQUNoS0osRUFBYSxHQUFHLEVBQUksSUFFcEIsU0FBU0ssRUFBWTk1RixFQUFlaEssRUFBMkIsQ0FDOUQsT0FBT0EsRUFBSyxLQUFJLENBQ2YsSUFBSyxTQUFVLE9BQU8rakcsRUFBZ0JqbEMsR0FBYzkwRCxDQUFDLEVBQUdoSyxDQUFJLEVBQzVELElBQUssU0FBVSxPQUFPK2pHLEVBQWdCLzVGLEVBQUdoSyxDQUFJLEVBQzdDLElBQUssU0FBVSxPQUFPK2pHLEVBQWdCaGxDLElBQVcsT0FBTyxTQUFTLzBELENBQUMsRUFBSUEsRUFBRSxTQUFTLFFBQVEsRUFBSXUxRCxHQUFJdjFELENBQUMsRUFBR2hLLENBQUksRUFDekcsSUFBSyxRQUFTLE9BQU8rakcsRUFBZ0JocEIsR0FBTy93RSxDQUFDLEVBQUdoSyxDQUFJLENBQ3BELENBQ0QsTUFBTSxJQUFJLE1BQU0scUJBQXVCQSxFQUFLLElBQUksQ0FDaEQsQ0FDRCxTQUFTK2pHLEVBQWdCbmlFLEVBQWdCNWhDLEVBQTJCLENBQ25FLElBQUk4WCxFQUFVOHBCLEVBQUksTUFBTSxTQUFTLEVBQUdtcEMsRUFBSSxHQUFJTixFQUFJLEdBQUl4RSxFQUFLLEVBQUcrOUIsRUFBSyxFQUFHanhGLEVBQWMsR0FDOUVreEYsRUFBNEIsQ0FBQSxFQUM1QkMsRUFBbUMsS0FDbkNDLEVBQU0sQ0FBRSxFQUFFQyxFQUE2QixDQUFBLEVBQUlDLEVBQTZCLENBQUUsRUFBRUMsRUFBdUIsR0FDbkdDLEVBQU8sRUFBRyxFQUVkLElBREcsQ0FBQ3ZrRyxFQUFLLFVBQVksR0FBRzQ5RCxHQUFPLENBQUM1OUQsRUFBSyxRQUFRLEVBQ3RDaW1FLElBQU9udUQsRUFBUSxPQUFRLEVBQUVtdUQsRUFBSSxDQUNuQ3MrQixFQUFPLEVBQ1AsSUFBSUMsRUFBSzFzRixFQUFRbXVELENBQUUsRUFBRSxLQUFJLEVBQUcsUUFBUSxrQ0FBbUMyOUIsQ0FBZ0IsRUFBRSxRQUFRRixFQUFpQkMsQ0FBWSxFQUMxSGMsRUFBT0QsRUFBSyxRQUFRLE1BQU8sSUFBUSxFQUFFLE1BQU0sR0FBRyxFQUFFLElBQUksU0FBUzNpRSxFQUFHLENBQUUsT0FBT0EsRUFBRSxRQUFRLFVBQVcsR0FBRyxDQUFFLENBQUUsRUFDckdpaEQsR0FBRzJoQixFQUFPLENBQUMsRUFBRy85RixHQUNsQixHQUFHODlGLEVBQUssT0FBUyxFQUFHLE9BQU8xaEIsR0FBRSxDQUM3QixJQUFLLEtBQU0sTUFDWCxJQUFLLElBQUssTUFDVixJQUFLLElBQUssTUFDVixJQUFLLElBQUssTUFDVixJQUFLLElBQUssTUFDVixJQUFLLElBQ0QyaEIsRUFBTyxDQUFDLEVBQUUsT0FBTyxDQUFDLEdBQUssS0FDekJSLEVBQVEsS0FBS08sRUFBSyxNQUFNLENBQUMsRUFBRSxRQUFRLE1BQU8sR0FBRyxDQUFDLEVBQy9DLE1BQ0QsSUFBSyxJQUNMLElBQUlFLEdBQVcsR0FBT0MsR0FBVyxHQUFPQyxHQUFXLEdBQU9DLEVBQVcsR0FBT3JmLEdBQUssR0FBSUMsRUFBSyxHQUMxRixJQUFJdWUsRUFBRyxFQUFHQSxFQUFHUyxFQUFPLE9BQVEsRUFBRVQsRUFBSSxPQUFPUyxFQUFPVCxDQUFFLEVBQUUsT0FBTyxDQUFDLEVBQUMsQ0FDNUQsSUFBSyxJQUFLLE1BQ1YsSUFBSyxJQUFLdjVCLEVBQUksU0FBU2c2QixFQUFPVCxDQUFFLEVBQUUsTUFBTSxDQUFDLENBQUMsRUFBRSxFQUFHVyxHQUFXLEdBQU0sTUFDaEUsSUFBSyxJQUVKLElBREE1NUIsRUFBSSxTQUFTMDVCLEVBQU9ULENBQUUsRUFBRSxNQUFNLENBQUMsQ0FBQyxFQUFFLEVBQU9XLEtBQVVsNkIsRUFBSSxHQUNuRCxFQUFJMTNELEVBQUksT0FBUSxHQUFLZzRELEVBQUcsRUFBRSxFQUFHaDRELEVBQUksQ0FBQyxFQUFJLEdBQzFDLE1BQ0QsSUFBSyxJQUNKck0sR0FBTSs5RixFQUFPVCxDQUFFLEVBQUUsTUFBTSxDQUFDLEVBQ3JCdDlGLEdBQUksT0FBTyxDQUFDLElBQU0sSUFBS0EsR0FBTUEsR0FBSSxNQUFNLEVBQUVBLEdBQUksT0FBUyxDQUFDLEVBQ2xEQSxLQUFRLE9BQVFBLEdBQU0sR0FDdEJBLEtBQVEsUUFBU0EsR0FBTSxHQUN0QixNQUFNdzBFLEdBQVN4MEUsRUFBRyxDQUFDLEVBR2pCLE1BQU0yMEUsR0FBVTMwRSxFQUFHLEVBQUUsUUFBTyxDQUFFLElBQ3hDQSxHQUFNbTBFLEdBQVVuMEUsRUFBRyxJQUhuQkEsR0FBTXcwRSxHQUFTeDBFLEVBQUcsRUFDZnc5RixJQUFxQixNQUFRcjlCLEdBQVlxOUIsQ0FBZ0IsSUFBR3g5RixHQUFNNHpFLEdBQVE1ekUsRUFBRyxJQUtqRmcrRixHQUFXLEdBQ1gsTUFDRCxJQUFLLElBQ0pHLEVBQVcsR0FDWCxJQUFJQyxFQUFVQyxHQUFTTixFQUFPVCxDQUFFLEVBQUUsTUFBTSxDQUFDLEVBQUcsQ0FBQyxFQUFFajVCLEVBQUUsRUFBRU4sQ0FBQyxDQUFDLEVBQ3JEMTNELEVBQUlnNEQsQ0FBQyxFQUFFTixDQUFDLEVBQUksQ0FBQzEzRCxFQUFJZzRELENBQUMsRUFBRU4sQ0FBQyxFQUFHcTZCLENBQU8sRUFDL0IsTUFDRCxJQUFLLElBQ0pGLEdBQVcsR0FDWDd4RixFQUFJZzRELENBQUMsRUFBRU4sQ0FBQyxFQUFJLENBQUMxM0QsRUFBSWc0RCxDQUFDLEVBQUVOLENBQUMsRUFBRyxLQUFLLEVBQzdCLE1BQ0QsSUFBSyxJQUFLLE1BQ1YsSUFBSyxJQUFLK2EsR0FBSyxTQUFTaWYsRUFBT1QsQ0FBRSxFQUFFLE1BQU0sQ0FBQyxDQUFDLEVBQUUsRUFBRyxNQUNoRCxJQUFLLElBQUt2ZSxFQUFLLFNBQVNnZixFQUFPVCxDQUFFLEVBQUUsTUFBTSxDQUFDLENBQUMsRUFBRSxFQUFHLE1BQ2hELFFBQVMsR0FBR2hrRyxHQUFRQSxFQUFLLElBQUssTUFBTSxJQUFJLE1BQU0sbUJBQXFCd2tHLENBQUksQ0FDdkUsQ0FNRCxHQUxHRSxLQUNDM3hGLEVBQUlnNEQsQ0FBQyxFQUFFTixDQUFDLEdBQUsxM0QsRUFBSWc0RCxDQUFDLEVBQUVOLENBQUMsRUFBRSxRQUFVLEVBQUcxM0QsRUFBSWc0RCxDQUFDLEVBQUVOLENBQUMsRUFBRSxDQUFDLEVBQUkvakUsR0FDakRxTSxFQUFJZzRELENBQUMsRUFBRU4sQ0FBQyxFQUFJL2pFLEdBQ2pCdzlGLEVBQW1CLE1BRWpCVSxHQUFVLENBQ1osR0FBR0MsRUFBVSxNQUFNLElBQUksTUFBTSw2Q0FBNkMsRUFDMUUsSUFBSUcsRUFBVXhmLEdBQUssSUFBTXp5RSxFQUFJeXlFLEVBQUUsRUFBRUMsQ0FBRSxFQUNuQyxHQUFHLENBQUN1ZixHQUFXLENBQUNBLEVBQVEsQ0FBQyxFQUFHLE1BQU0sSUFBSSxNQUFNLHNDQUFzQyxFQUNsRmp5RixFQUFJZzRELENBQUMsRUFBRU4sQ0FBQyxFQUFFLENBQUMsRUFBSXc2QixHQUFrQkQsRUFBUSxDQUFDLEVBQUcsQ0FBQyxFQUFHajZCLEVBQUl5YSxHQUFJLEVBQUcvYSxFQUFJZ2IsQ0FBRSxDQUFDLENBQ25FLENBQ0QsTUFDQSxJQUFLLElBQ0wsSUFBSXlmLEVBQVMsRUFDYixJQUFJbEIsRUFBRyxFQUFHQSxFQUFHUyxFQUFPLE9BQVEsRUFBRVQsRUFBSSxPQUFPUyxFQUFPVCxDQUFFLEVBQUUsT0FBTyxDQUFDLEVBQUMsQ0FDNUQsSUFBSyxJQUFLdjVCLEVBQUksU0FBU2c2QixFQUFPVCxDQUFFLEVBQUUsTUFBTSxDQUFDLENBQUMsRUFBRSxFQUFHLEVBQUVrQixFQUFRLE1BQ3pELElBQUssSUFFSixJQURBbjZCLEVBQUksU0FBUzA1QixFQUFPVCxDQUFFLEVBQUUsTUFBTSxDQUFDLENBQUMsRUFBRSxFQUM5QixFQUFJanhGLEVBQUksT0FBUSxHQUFLZzRELEVBQUcsRUFBRSxFQUFHaDRELEVBQUksQ0FBQyxFQUFJLEdBQzFDLE1BQ0QsSUFBSyxJQUFLd3hGLEVBQU8sU0FBU0UsRUFBT1QsQ0FBRSxFQUFFLE1BQU0sQ0FBQyxDQUFDLEVBQUksR0FBSSxNQUNyRCxJQUFLLElBQUssTUFDVixJQUFLLElBQUssTUFDVixJQUFLLElBQ0pFLEVBQW1CRCxFQUFRLFNBQVNRLEVBQU9ULENBQUUsRUFBRSxNQUFNLENBQUMsQ0FBQyxDQUFDLEVBQ3hELE1BQ0QsSUFBSyxJQUFLLE1BQ1YsSUFBSyxJQUFLLE1BQ1YsSUFBSyxJQUFLLE1BQ1YsSUFBSyxJQUVKLElBREFNLEVBQUtHLEVBQU9ULENBQUUsRUFBRSxNQUFNLENBQUMsRUFBRSxNQUFNLEdBQUcsRUFDOUIsRUFBSSxTQUFTTSxFQUFHLENBQUMsRUFBRyxFQUFFLEVBQUcsR0FBSyxTQUFTQSxFQUFHLENBQUMsRUFBRyxFQUFFLEVBQUcsRUFBRSxFQUN4REMsRUFBTyxTQUFTRCxFQUFHLENBQUMsRUFBRyxFQUFFLEVBQ3pCRCxFQUFRLEVBQUUsQ0FBQyxFQUFJRSxJQUFTLEVBQUksQ0FBQyxPQUFPLEVBQUksRUFBRyxDQUFDLElBQUlBLENBQUksRUFBR1ksR0FBWWQsRUFBUSxFQUFFLENBQUMsQ0FBQyxFQUM5RSxNQUNILElBQUssSUFDSjU1QixFQUFJLFNBQVNnNkIsRUFBT1QsQ0FBRSxFQUFFLE1BQU0sQ0FBQyxDQUFDLEVBQUUsRUFDOUJLLEVBQVE1NUIsQ0FBQyxJQUFHNDVCLEVBQVE1NUIsQ0FBQyxFQUFJLElBQzdCLE1BQ0QsSUFBSyxJQUNKTSxFQUFJLFNBQVMwNUIsRUFBT1QsQ0FBRSxFQUFFLE1BQU0sQ0FBQyxDQUFDLEVBQUUsRUFDOUJJLEVBQVFyNUIsQ0FBQyxJQUFHcTVCLEVBQVFyNUIsQ0FBQyxFQUFJLElBQzFCdzVCLEVBQU8sR0FBS0gsRUFBUXI1QixDQUFDLEVBQUUsSUFBTXc1QixFQUFNSCxFQUFRcjVCLENBQUMsRUFBRSxJQUFNcTZCLEdBQU1iLENBQUksR0FDekRBLElBQVMsSUFBR0gsRUFBUXI1QixDQUFDLEVBQUUsT0FBUyxJQUN4QyxNQUNELFFBQVMsR0FBRy9xRSxHQUFRQSxFQUFLLElBQUssTUFBTSxJQUFJLE1BQU0sbUJBQXFCd2tHLENBQUksQ0FDdkUsQ0FDRVUsRUFBUyxJQUFHaEIsRUFBbUIsTUFBTSxNQUN4QyxRQUFTLEdBQUdsa0csR0FBUUEsRUFBSyxJQUFLLE1BQU0sSUFBSSxNQUFNLG1CQUFxQndrRyxDQUFJLENBQ3RFLENBQ0QsQ0FDRCxPQUFHSixFQUFRLE9BQVMsSUFBR0QsRUFBSSxPQUFPLEVBQUlDLEdBQ25DQyxFQUFRLE9BQVMsSUFBR0YsRUFBSSxPQUFPLEVBQUlFLEdBQ25DcmtHLEdBQVFBLEVBQUssWUFBVytTLEVBQU1BLEVBQUksTUFBTSxFQUFHL1MsRUFBSyxTQUFTLEdBQ3JELENBQUMrUyxFQUFLb3hGLENBQUcsQ0FDaEIsQ0FFRCxTQUFTa0IsRUFBY3I3RixFQUFlaEssRUFBb0IsQ0FDekQsSUFBSXNsRyxFQUFTeEIsRUFBWTk1RixFQUFHaEssQ0FBSSxFQUM1QjJpRyxFQUFNMkMsRUFBTyxDQUFDLEVBQUcvZixFQUFLK2YsRUFBTyxDQUFDLEVBQzlCeDdGLEVBQUlpOEUsR0FBYTRjLEVBQUszaUcsQ0FBSSxFQUM5QixPQUFBMEgsR0FBSzY5RSxDQUFFLEVBQUUsUUFBUSxTQUFTamdFLEVBQUcsQ0FBRXhiLEVBQUV3YixDQUFDLEVBQUlpZ0UsRUFBR2pnRSxDQUFDLENBQUksQ0FBQSxFQUN2Q3hiLENBQ1AsQ0FFRCxTQUFTeTdGLEVBQWlCdjdGLEVBQWVoSyxFQUFtQixDQUFFLE9BQU9pbEYsR0FBa0JvZ0IsRUFBY3I3RixFQUFHaEssQ0FBSSxFQUFHQSxDQUFJLENBQUksQ0FFdkgsU0FBU3dsRyxFQUFtQnA4RCxFQUFlbThDLEVBQWtCeGEsRUFBY04sRUFBcUMsQ0FDL0csSUFBSTNnRSxFQUFJLE9BQVNpaEUsRUFBRSxHQUFLLE1BQVFOLEVBQUUsR0FBSyxLQUN2QyxPQUFPcmhDLEVBQUssRUFBQyxDQUNaLElBQUssSUFDSnQvQixHQUFNcy9CLEVBQUssR0FBRyxFQUNYQSxFQUFLLEdBQUssQ0FBQ0EsRUFBSyxJQUFHdC9CLEdBQUssS0FBTzI3RixHQUFTcjhELEVBQUssRUFBRyxDQUFDLEVBQUUyaEMsRUFBRyxFQUFFTixDQUFDLENBQUMsR0FBRyxNQUNqRSxJQUFLLElBQUszZ0UsR0FBS3MvQixFQUFLLEVBQUksT0FBUyxRQUFTLE1BQzFDLElBQUssSUFBS3QvQixHQUFLcy9CLEVBQUssR0FBS0EsRUFBSyxFQUFHLE1BQ2pDLElBQUssSUFBS3QvQixHQUFLLEtBQU9zL0IsRUFBSyxHQUFLQSxFQUFLLEdBQUssSUFBSyxNQUMvQyxJQUFLLElBQUt0L0IsR0FBSyxJQUFNcy9CLEVBQUssRUFBRSxRQUFRLEtBQUssRUFBRSxFQUFFLFFBQVEsS0FBTSxJQUFJLEVBQUksSUFBSyxLQUN4RSxDQUNELE9BQU90L0IsQ0FDUCxDQUVELFNBQVM0N0YsRUFBbUI1bEMsRUFBS2owQixFQUFNLENBQ3RDQSxFQUFLLFFBQVEsU0FBUzV6QixFQUFLblMsRUFBRyxDQUM3QixJQUFJNi9GLEVBQU0sT0FBUzcvRixFQUFFLEdBQUssS0FBT0EsRUFBRSxHQUFLLElBQ3JDbVMsRUFBSSxPQUFRMHRGLEdBQU8sS0FFbEIsT0FBTzF0RixFQUFJLE9BQVMsVUFBWSxDQUFDQSxFQUFJLE1BQUtBLEVBQUksSUFBTTJ0RixHQUFTM3RGLEVBQUksS0FBSyxHQUN0RSxPQUFPQSxFQUFJLEtBQU8sVUFBWSxDQUFDQSxFQUFJLE1BQUtBLEVBQUksSUFBTTR0RixHQUFRNXRGLEVBQUksR0FBRyxHQUNqRSxPQUFPQSxFQUFJLEtBQU8sV0FBVTB0RixHQUFPLEtBQUssTUFBTTF0RixFQUFJLEdBQUcsSUFFdEQwdEYsRUFBSSxPQUFPQSxFQUFJLE9BQVMsQ0FBQyxHQUFLLEtBQUs3bEMsRUFBSSxLQUFLNmxDLENBQUcsQ0FDckQsQ0FBRyxDQUNELENBRUQsU0FBU0csRUFBbUJobUMsRUFBdUIvekIsRUFBeUIsQ0FDM0VBLEVBQUssUUFBUSxTQUFTeGhDLEVBQUt6RSxFQUFHLENBQzdCLElBQUk2L0YsRUFBTSxLQUNQcDdGLEVBQUksT0FBUW83RixHQUFPLE1BQ2RwN0YsRUFBSSxJQUFLbzdGLEdBQU8sSUFBTSxHQUFLcDdGLEVBQUksSUFBTSxJQUNyQ0EsRUFBSSxNQUFLbzdGLEdBQU8sSUFBTSxHQUFLSSxHQUFNeDdGLEVBQUksR0FBRyxFQUFJLEtBQ2pEbzdGLEVBQUksT0FBUyxHQUFHN2xDLEVBQUksS0FBSzZsQyxFQUFNLEtBQU83L0YsRUFBRSxFQUFFLENBQ2hELENBQUcsQ0FDRCxDQUVELFNBQVNrZ0csRUFBY3pnQixFQUFrQnZsRixFQUEwQixDQUNsRSxJQUFJMDBGLEVBQTZCLENBQUMsYUFBYSxFQUFHNXFGLEVBQXNCLENBQUEsRUFDcEViLEVBQUk0N0UsR0FBa0JVLEVBQUcsTUFBTSxDQUFDLEVBQUduOEMsRUFDbkNrOEMsRUFBUSxNQUFNLFFBQVFDLENBQUUsRUFDeEIwZ0IsRUFBSztBQUFBLEVBRVR2UixFQUFTLEtBQUssWUFBWSxFQUMxQkEsRUFBUyxLQUFLLGlCQUFpQixFQUM1Qm5QLEVBQUcsT0FBTyxHQUFHbWdCLEVBQW1CaFIsRUFBVW5QLEVBQUcsT0FBTyxDQUFDLEVBQ3JEQSxFQUFHLE9BQU8sR0FBR3VnQixFQUFtQnBSLEVBQVVuUCxFQUFHLE9BQU8sQ0FBQyxFQUV4RG1QLEVBQVMsS0FBSyxPQUFTenJGLEVBQUUsRUFBRSxFQUFJQSxFQUFFLEVBQUUsRUFBSSxHQUFLLE1BQVFBLEVBQUUsRUFBRSxFQUFJQSxFQUFFLEVBQUUsRUFBSSxHQUFLLEtBQU8sQ0FBQ0EsRUFBRSxFQUFFLEVBQUVBLEVBQUUsRUFBRSxFQUFFQSxFQUFFLEVBQUUsRUFBRUEsRUFBRSxFQUFFLENBQUMsRUFBRSxLQUFLLEdBQUcsQ0FBQyxFQUNuSCxRQUFROGhFLEVBQUk5aEUsRUFBRSxFQUFFLEVBQUc4aEUsR0FBSzloRSxFQUFFLEVBQUUsRUFBRyxFQUFFOGhFLEVBQ2hDLFFBQVFOLEVBQUl4aEUsRUFBRSxFQUFFLEVBQUd3aEUsR0FBS3hoRSxFQUFFLEVBQUUsRUFBRyxFQUFFd2hFLEVBQUcsQ0FDbkMsSUFBSXk3QixFQUFRdmlCLEdBQVksQ0FBQyxFQUFFNVksRUFBRSxFQUFFTixDQUFDLENBQUMsRUFDakNyaEMsRUFBT2s4QyxHQUFTQyxFQUFHeGEsQ0FBQyxHQUFHLENBQUUsR0FBRU4sQ0FBQyxFQUFHOGEsRUFBRzJnQixDQUFLLEVBQ3BDLEdBQUM5OEQsR0FBU0EsRUFBSyxHQUFLLE9BQVMsQ0FBQ0EsRUFBSyxHQUFLQSxFQUFLLEtBQ2hEdC9CLEVBQUUsS0FBSzA3RixFQUFtQnA4RCxFQUFNbThDLEVBQUl4YSxFQUFHTixDQUFPLENBQUMsQ0FDL0MsQ0FFRixPQUFPaXFCLEVBQVMsS0FBS3VSLENBQUUsRUFBSUEsRUFBS244RixFQUFFLEtBQUttOEYsQ0FBRSxFQUFJQSxFQUFLLElBQU1BLENBQ3hELENBRUQsTUFBTyxDQUNOLFlBQWFWLEVBQ2IsU0FBVUYsRUFDVixXQUFZVyxDQUNkLENBQ0EsSUFFSUcsR0FBb0IsVUFBVyxDQUNsQyxTQUFTQyxFQUFXcDhGLEVBQWVoSyxFQUFjLENBQ2hELE9BQU9BLEVBQUssS0FBSSxDQUNmLElBQUssU0FBVSxPQUFPcW1HLEVBQWV2bkMsR0FBYzkwRCxDQUFDLEVBQUdoSyxDQUFJLEVBQzNELElBQUssU0FBVSxPQUFPcW1HLEVBQWVyOEYsRUFBR2hLLENBQUksRUFDNUMsSUFBSyxTQUFVLE9BQU9xbUcsRUFBZXRuQyxJQUFXLE9BQU8sU0FBUy8wRCxDQUFDLEVBQUlBLEVBQUUsU0FBUyxRQUFRLEVBQUl1MUQsR0FBSXYxRCxDQUFDLEVBQUdoSyxDQUFJLEVBQ3hHLElBQUssUUFBUyxPQUFPcW1HLEVBQWV0ckIsR0FBTy93RSxDQUFDLEVBQUdoSyxDQUFJLENBQ25ELENBQ0QsTUFBTSxJQUFJLE1BQU0scUJBQXVCQSxFQUFLLElBQUksQ0FDaEQsQ0FDRCxTQUFTcW1HLEVBQWV6a0UsRUFBZ0I1aEMsRUFBYyxDQUVyRCxRQURJOFgsRUFBVThwQixFQUFJLE1BQU07QUFBQSxDQUFJLEVBQUdtcEMsRUFBSSxHQUFJTixFQUFJLEdBQUl4RSxFQUFLLEVBQUdsekQsRUFBYyxDQUFBLEVBQzlEa3pELElBQU9udUQsRUFBUSxPQUFRLEVBQUVtdUQsRUFBSSxDQUNuQyxHQUFJbnVELEVBQVFtdUQsQ0FBRSxFQUFFLEtBQU0sSUFBSyxNQUFPLENBQUVsekQsRUFBSSxFQUFFZzRELENBQUMsRUFBSSxDQUFBLEVBQUlOLEVBQUksRUFBRyxRQUFXLENBQ3JFLEdBQUksRUFBQU0sRUFBSSxHQUNSLEtBQUl1N0IsRUFBV3h1RixFQUFRbXVELENBQUUsRUFBRSxPQUFPLE1BQU0sR0FBRyxFQUN2Qy9nRSxFQUFPb2hHLEVBQVMsQ0FBQyxFQUFHemtHLEVBQVF5a0csRUFBUyxDQUFDLEVBQzFDLEVBQUVyZ0MsRUFFRixRQURJM3VELEVBQU9RLEVBQVFtdUQsQ0FBRSxHQUFLLElBQ2xCM3VELEVBQUssTUFBTSxNQUFNLEdBQUcsQ0FBQSxHQUFJLE9BQVMsR0FBTTJ1RCxFQUFLbnVELEVBQVEsT0FBUyxHQUFHUixHQUFRO0FBQUEsRUFBT1EsRUFBUSxFQUFFbXVELENBQUUsRUFFbkcsT0FEQTN1RCxFQUFPQSxFQUFLLE9BQ0osQ0FBQ3BTLEVBQUksQ0FDWixJQUFLLEdBQ0osR0FBSW9TLElBQVMsTUFBTyxDQUFFdkUsRUFBSSxFQUFFZzRELENBQUMsRUFBSSxDQUFBLEVBQUlOLEVBQUksRUFBRyxRQUFXLFNBQzlDbnpELElBQVMsTUFBTyxNQUFNLElBQUksTUFBTSxvQ0FBc0NBLENBQUksRUFDbkYsTUFDRCxJQUFLLEdBQ0RBLElBQVMsT0FBUXZFLEVBQUlnNEQsQ0FBQyxFQUFFTixDQUFDLEVBQUksR0FDeEJuekQsSUFBUyxRQUFTdkUsRUFBSWc0RCxDQUFDLEVBQUVOLENBQUMsRUFBSSxHQUM3QixNQUFNeVEsR0FBU3I1RSxDQUFLLENBQUMsRUFDckIsTUFBTXc1RSxHQUFVeDVFLENBQUssRUFBRSxRQUFTLENBQUEsRUFDcENrUixFQUFJZzRELENBQUMsRUFBRU4sQ0FBQyxFQUFJNW9FLEVBRDJCa1IsRUFBSWc0RCxDQUFDLEVBQUVOLENBQUMsRUFBSW9RLEdBQVVoNUUsQ0FBSyxFQUR0Q2tSLEVBQUlnNEQsQ0FBQyxFQUFFTixDQUFDLEVBQUl5USxHQUFTcjVFLENBQUssRUFHM0QsRUFBRTRvRSxFQUFHLE1BQ04sSUFBSyxHQUNKbnpELEVBQU9BLEVBQUssTUFBTSxFQUFFQSxFQUFLLE9BQU8sQ0FBQyxFQUNqQ0EsRUFBT0EsRUFBSyxRQUFRLE1BQU8sR0FBRyxFQUNqQkEsR0FBUUEsRUFBSyxNQUFNLFNBQVMsSUFBR0EsRUFBT0EsRUFBSyxNQUFNLEVBQUcsRUFBRSxHQUNuRXZFLEVBQUlnNEQsQ0FBQyxFQUFFTixHQUFHLEVBQUluekQsSUFBUyxHQUFLQSxFQUFPLEtBQ25DLEtBQ0QsQ0FDRCxHQUFJQSxJQUFTLE1BQU8sTUFDcEIsQ0FDRCxPQUFHdFgsR0FBUUEsRUFBSyxZQUFXK1MsRUFBTUEsRUFBSSxNQUFNLEVBQUcvUyxFQUFLLFNBQVMsR0FDckQrUyxDQUNQLENBRUQsU0FBU3d6RixFQUFhM2tFLEVBQWdCNWhDLEVBQW9CLENBQUUsT0FBTytsRixHQUFhcWdCLEVBQVd4a0UsRUFBSzVoQyxDQUFJLEVBQUdBLENBQUksQ0FBSSxDQUMvRyxTQUFTd21HLEVBQWdCNWtFLEVBQWdCNWhDLEVBQW1CLENBQUUsT0FBT2lsRixHQUFrQnNoQixFQUFhM2tFLEVBQUs1aEMsQ0FBSSxFQUFHQSxDQUFJLENBQUksQ0FFeEgsSUFBSXltRyxFQUE2QixVQUFXLENBQzNDLElBQUlDLEVBQWEsU0FBWTU4RixFQUFxQjY4RixFQUFrQi9nRixFQUFjMWMsRUFBY0MsRUFBYyxDQUM3R1csRUFBRSxLQUFLNjhGLENBQUssRUFDWjc4RixFQUFFLEtBQUs4YixFQUFJLElBQU0xYyxDQUFDLEVBQ2xCWSxFQUFFLEtBQUssSUFBTVgsRUFBRSxRQUFRLEtBQUssSUFBSSxFQUFJLEdBQUcsQ0FDMUMsRUFDTXk5RixFQUFhLFNBQVk5OEYsRUFBcUI1RSxFQUFpQjBnQixFQUFXemMsRUFBYyxDQUMzRlcsRUFBRSxLQUFLNUUsRUFBTyxJQUFNMGdCLENBQUMsRUFDckI5YixFQUFFLEtBQUs1RSxHQUFRLEVBQUksSUFBTWlFLEVBQUUsUUFBUSxLQUFLLElBQUksRUFBSSxJQUFNQSxDQUFDLENBQzFELEVBQ0UsT0FBTyxTQUFzQm84RSxFQUE4QyxDQUMxRSxJQUFJejdFLEVBQXNCLENBQUEsRUFDdEJiLEVBQUk0N0UsR0FBa0JVLEVBQUcsTUFBTSxDQUFDLEVBQUduOEMsRUFDbkNrOEMsRUFBUSxNQUFNLFFBQVFDLENBQUUsRUFDNUJtaEIsRUFBVzU4RixFQUFHLFFBQVMsRUFBRyxFQUFHLFNBQVMsRUFDdEM0OEYsRUFBVzU4RixFQUFHLFVBQVcsRUFBR2IsRUFBRSxFQUFFLEVBQUlBLEVBQUUsRUFBRSxFQUFJLEVBQUUsRUFBRSxFQUNoRHk5RixFQUFXNThGLEVBQUcsU0FBVSxFQUFHYixFQUFFLEVBQUUsRUFBSUEsRUFBRSxFQUFFLEVBQUksRUFBRSxFQUFFLEVBQy9DeTlGLEVBQVc1OEYsRUFBRyxPQUFRLEVBQUcsRUFBRSxFQUFFLEVBQzdCLFFBQVFpaEUsRUFBSTloRSxFQUFFLEVBQUUsRUFBRzhoRSxHQUFLOWhFLEVBQUUsRUFBRSxFQUFHLEVBQUU4aEUsRUFBRyxDQUNuQzY3QixFQUFXOThGLEVBQUcsR0FBSSxFQUFHLEtBQUssRUFDMUIsUUFBUTJnRSxFQUFJeGhFLEVBQUUsRUFBRSxFQUFHd2hFLEdBQUt4aEUsRUFBRSxFQUFFLEVBQUcsRUFBRXdoRSxFQUFHLENBQ25DLElBQUl5N0IsRUFBUXZpQixHQUFZLENBQUMsRUFBRTVZLEVBQUUsRUFBRU4sQ0FBQyxDQUFDLEVBRWpDLEdBREFyaEMsRUFBT2s4QyxHQUFTQyxFQUFHeGEsQ0FBQyxHQUFHLENBQUUsR0FBRU4sQ0FBQyxFQUFJOGEsRUFBRzJnQixDQUFLLEVBQ3JDLENBQUM5OEQsRUFBTSxDQUFFdzlELEVBQVc5OEYsRUFBRyxFQUFHLEVBQUcsRUFBRSxFQUFHLFFBQVMsQ0FDOUMsT0FBT3MvQixFQUFLLEVBQUMsQ0FDWixJQUFLLElBQ0osSUFBSTFpQyxFQUFlMGlDLEVBQUssRUFDckIsQ0FBQzFpQyxHQUFPMGlDLEVBQUssR0FBSyxPQUFNMWlDLEVBQU0waUMsRUFBSyxHQUNuQzFpQyxHQUFPLEtBQ0kwaUMsRUFBSyxHQUFLLENBQUNBLEVBQUssRUFBR3c5RCxFQUFXOThGLEVBQUcsRUFBRyxFQUFHLElBQU1zL0IsRUFBSyxDQUFDLEVBQzNEdzlELEVBQVc5OEYsRUFBRyxFQUFHLEVBQUcsRUFBRSxFQUV2Qjg4RixFQUFXOThGLEVBQUcsRUFBR3BELEVBQUssR0FBRyxFQUM5QixNQUNELElBQUssSUFDSmtnRyxFQUFXOThGLEVBQUcsRUFBR3MvQixFQUFLLEVBQUksRUFBSSxFQUFHQSxFQUFLLEVBQUksT0FBUyxPQUFPLEVBQzFELE1BQ0QsSUFBSyxJQUNKdzlELEVBQVc5OEYsRUFBRyxFQUFHLEVBQWUsTUFBTXMvQixFQUFLLENBQUMsRUFBS0EsRUFBSyxFQUFJLEtBQU9BLEVBQUssRUFBSSxHQUFHLEVBQzdFLE1BQ0QsSUFBSyxJQUNBQSxFQUFLLElBQUdBLEVBQUssRUFBSWc2QixHQUFXaDZCLEVBQUssR0FBSzYzQixHQUFVLEVBQUUsRUFBR2laLEdBQVFXLEdBQVV6eEMsRUFBSyxDQUFDLENBQUMsQ0FBQyxHQUN4RXc5RCxFQUFXOThGLEVBQUcsRUFBR3MvQixFQUFLLEVBQUcsR0FBRyxFQUV2QyxNQUNELFFBQVN3OUQsRUFBVzk4RixFQUFHLEVBQUcsRUFBRyxFQUFFLENBQy9CLENBQ0QsQ0FDRCxDQUNEODhGLEVBQVc5OEYsRUFBRyxHQUFJLEVBQUcsS0FBSyxFQUMxQixJQUFJbThGLEVBQUs7QUFBQSxFQUNMaGtCLEVBQUtuNEUsRUFBRSxLQUFLbThGLENBQUUsRUFFbEIsT0FBT2hrQixDQUNWLENBQ0EsSUFDQyxNQUFPLENBQ04sWUFBYXVrQixFQUNiLFNBQVVELEVBQ1YsV0FBWUUsQ0FDZCxDQUNBLElBRUlJLEdBQW9CLFVBQVcsQ0FDbEMsU0FBU0MsRUFBTzM5RixFQUF5QixDQUFFLE9BQU9BLEVBQUUsUUFBUSxPQUFPLElBQUksRUFBRSxRQUFRLE9BQU8sR0FBRyxFQUFFLFFBQVEsT0FBTztBQUFBLENBQUksQ0FBSSxDQUNwSCxTQUFTNDlGLEVBQU81OUYsRUFBeUIsQ0FBRSxPQUFPQSxFQUFFLFFBQVEsTUFBTyxLQUFLLEVBQUUsUUFBUSxLQUFNLEtBQUssRUFBRSxRQUFRLE1BQU0sS0FBSyxDQUFJLENBRXRILFNBQVM2OUYsRUFBV3BsRSxFQUFnQjVoQyxFQUFjLENBRWpELFFBREk4WCxFQUFVOHBCLEVBQUksTUFBTTtBQUFBLENBQUksRUFBR21wQyxFQUFJLEdBQUlOLEVBQUksR0FBSXhFLEVBQUssRUFBR2x6RCxFQUFjLENBQUEsRUFDOURrekQsSUFBT251RCxFQUFRLE9BQVEsRUFBRW11RCxFQUFJLENBQ25DLElBQUl3K0IsRUFBUzNzRixFQUFRbXVELENBQUUsRUFBRSxPQUFPLE1BQU0sR0FBRyxFQUN6QyxHQUFHdytCLEVBQU8sQ0FBQyxJQUFNLE9BQ2pCLEtBQUk5MUIsRUFBTzZWLEdBQVlpZ0IsRUFBTyxDQUFDLENBQUMsRUFDaEMsR0FBRzF4RixFQUFJLFFBQVU0N0QsRUFBSyxFQUFHLElBQUk1RCxFQUFJaDRELEVBQUksT0FBUWc0RCxHQUFLNEQsRUFBSyxFQUFHLEVBQUU1RCxFQUFPaDRELEVBQUlnNEQsQ0FBQyxJQUFHaDRELEVBQUlnNEQsQ0FBQyxFQUFJLElBRXBGLE9BREFBLEVBQUk0RCxFQUFLLEVBQUdsRSxFQUFJa0UsRUFBSyxFQUNkODFCLEVBQU8sQ0FBQyxFQUFDLENBQ2YsSUFBSyxJQUFLMXhGLEVBQUlnNEQsQ0FBQyxFQUFFTixDQUFDLEVBQUlxOEIsRUFBT3JDLEVBQU8sQ0FBQyxDQUFDLEVBQUcsTUFDekMsSUFBSyxJQUFLMXhGLEVBQUlnNEQsQ0FBQyxFQUFFTixDQUFDLEVBQUksQ0FBQ2c2QixFQUFPLENBQUMsRUFBRyxNQUNsQyxJQUFLLE1BQU8sSUFBSTVuRSxFQUFLNG5FLEVBQU9BLEVBQU8sT0FBUyxDQUFDLEVBRTdDLElBQUssTUFDSixPQUFPQSxFQUFPLENBQUMsRUFBQyxDQUNmLElBQUssS0FBTTF4RixFQUFJZzRELENBQUMsRUFBRU4sQ0FBQyxFQUFJLEdBQUNnNkIsRUFBTyxDQUFDLEVBQWtCLE1BQ2xELFFBQVMxeEYsRUFBSWc0RCxDQUFDLEVBQUVOLENBQUMsRUFBSSxDQUFDZzZCLEVBQU8sQ0FBQyxFQUFHLEtBQ2pDLENBQ0VBLEVBQU8sQ0FBQyxHQUFLLFFBQU8xeEYsRUFBSWc0RCxDQUFDLEVBQUVOLENBQUMsRUFBSSxDQUFDMTNELEVBQUlnNEQsQ0FBQyxFQUFFTixDQUFDLEVBQUc1dEMsQ0FBRSxFQUNsRCxFQUNELENBQ0QsT0FBRzc4QixHQUFRQSxFQUFLLFlBQVcrUyxFQUFNQSxFQUFJLE1BQU0sRUFBRy9TLEVBQUssU0FBUyxHQUNyRCtTLENBQ1AsQ0FFRCxTQUFTazBGLEVBQWEsRUFBY2puRyxFQUFvQixDQUFFLE9BQU8rbEYsR0FBYWloQixFQUFXLEVBQUdobkcsQ0FBSSxFQUFHQSxDQUFJLENBQUksQ0FDM0csU0FBU2tuRyxFQUFnQixFQUFjbG5HLEVBQW1CLENBQUUsT0FBT2lsRixHQUFrQmdpQixFQUFhLEVBQUdqbkcsQ0FBSSxFQUFHQSxDQUFJLENBQUksQ0FFcEgsSUFBSXVyRCxFQUFTLENBQ1oseUJBQ0Esb0JBQ0EsMEVBQ0YsRUFBRyxLQUFLO0FBQUEsQ0FBSSxFQUVQNDdDLEVBQU0sQ0FDVCxxQ0FDQSx5Q0FDRixFQUFHLEtBQUs7QUFBQSxDQUFJLEVBQUk7QUFBQSxFQUdYQyxFQUFPLENBQ1Ysd0NBQ0EsWUFDRixFQUFHLEtBQUs7QUFBQSxDQUFJLEVBRVBycUMsRUFBTSx1Q0FFVixTQUFTc3FDLEVBQWtCOWhCLEVBQTZCLENBQ3ZELEdBQUcsQ0FBQ0EsR0FBTSxDQUFDQSxFQUFHLE1BQU0sRUFBRyxNQUFPLEdBSTlCLFFBSEl6N0UsRUFBc0IsQ0FBQSxFQUFJbTRFLEVBQXVCLENBQUUsRUFBRTc0QyxFQUFNODhELEVBQVEsR0FDbkVqOUYsRUFBSXc3RSxHQUFhYyxFQUFHLE1BQU0sQ0FBQyxFQUMzQkQsRUFBUSxNQUFNLFFBQVFDLENBQUUsRUFDcEJ4YSxFQUFJOWhFLEVBQUUsRUFBRSxFQUFHOGhFLEdBQUs5aEUsRUFBRSxFQUFFLEVBQUcsRUFBRThoRSxFQUNoQyxRQUFRTixFQUFJeGhFLEVBQUUsRUFBRSxFQUFHd2hFLEdBQUt4aEUsRUFBRSxFQUFFLEVBQUcsRUFBRXdoRSxFQUdoQyxHQUZBeTdCLEVBQVF2aUIsR0FBWSxDQUFDLEVBQUU1WSxFQUFFLEVBQUVOLENBQUMsQ0FBQyxFQUM3QnJoQyxFQUFPazhDLEdBQVNDLEVBQUd4YSxDQUFDLEdBQUcsQ0FBRSxHQUFFTixDQUFDLEVBQUk4YSxFQUFHMmdCLENBQUssRUFDckMsR0FBQzk4RCxHQUFRQSxFQUFLLEdBQUssTUFBUUEsRUFBSyxJQUFNLEtBRXpDLFFBREE2NEMsRUFBSyxDQUFDLE9BQVFpa0IsRUFBTyxHQUFHLEVBQ2pCOThELEVBQUssRUFBQyxDQUNaLElBQUssSUFBSyxJQUFLLE1BQU82NEMsRUFBRyxLQUFLOGtCLEVBQU8zOUQsRUFBSyxDQUFDLENBQUMsRUFBRyxNQUMvQyxJQUFLLElBQ0FBLEVBQUssR0FDRjY0QyxFQUFHLENBQUMsRUFBRSxNQUFPQSxFQUFHLENBQUMsRUFBRSxJQUFLQSxFQUFHLENBQUMsRUFBRTc0QyxFQUFLLEVBQUc2NEMsRUFBRyxDQUFDLEVBQUU4a0IsRUFBTzM5RCxFQUFLLENBQUMsSUFEbEQ2NEMsRUFBRyxDQUFDLEVBQUUsSUFBS0EsRUFBRyxDQUFDLEVBQUU3NEMsRUFBSyxHQUVwQyxNQUNELElBQUssSUFDSjY0QyxFQUFHLENBQUMsRUFBSSxNQUFNNzRDLEVBQUssRUFBRSxJQUFJLEtBQU02NEMsRUFBRyxDQUFDLEVBQUUsS0FBTUEsRUFBRyxDQUFDLEVBQUU3NEMsRUFBSyxFQUFFLElBQUksSUFDNUQ2NEMsRUFBRyxDQUFDLEVBQUk4a0IsRUFBTzM5RCxFQUFLLElBQUlBLEVBQUssRUFBRSxPQUFPLFFBQVEsRUFDOUMsTUFDRCxJQUFLLElBQ0osSUFBSWhoQyxFQUFJOHhFLEdBQVFXLEdBQVV6eEMsRUFBSyxDQUFDLENBQUMsRUFDakM2NEMsRUFBRyxDQUFDLEVBQUksTUFBT0EsRUFBRyxDQUFDLEVBQUksS0FBTUEsRUFBRyxDQUFDLEVBQUksR0FBRzc1RSxFQUN4QzY1RSxFQUFHLENBQUMsRUFBSTc0QyxFQUFLLEdBQUtnNkIsR0FBV2g2QixFQUFLLEdBQUs2M0IsR0FBVSxFQUFFLEVBQUc3NEQsQ0FBQyxFQUN2RCxNQUNELElBQUssSUFBSyxRQUNWLENBQ0QwQixFQUFFLEtBQUttNEUsRUFBRyxLQUFLLEdBQUcsQ0FBQyxFQUdyQixPQUFBbjRFLEVBQUUsS0FBSyxZQUFjYixFQUFFLEVBQUUsRUFBRUEsRUFBRSxFQUFFLEVBQUUsR0FBSyxPQUFTQSxFQUFFLEVBQUUsRUFBRUEsRUFBRSxFQUFFLEVBQUUsR0FBSyxRQUFRLEVBQ3hFYSxFQUFFLEtBQUsseUJBQXlCLEVBRXpCQSxFQUFFLEtBQUs7QUFBQSxDQUFJLENBQ2xCLENBRUQsU0FBU3c5RixFQUFhL2hCLEVBQThDLENBQ25FLE1BQU8sQ0FBQ2g2QixFQUFRNDdDLEVBQUtDLEVBQU1ELEVBQUtFLEVBQWtCOWhCLENBQUUsRUFBR3hvQixDQUFHLEVBQUUsS0FBSztBQUFBLENBQUksQ0FFckUsQ0FFRCxNQUFPLENBQ04sWUFBYW1xQyxFQUNiLFNBQVVELEVBQ1YsV0FBWUssQ0FDZCxDQUNBLElBRUlDLEdBQW9CLFVBQVcsQ0FDbEMsU0FBU0MsRUFBYWx3RixFQUFpQnZFLEVBQWFnNEQsRUFBY04sRUFBYzNnRSxFQUFXLENBQ3ZGQSxFQUFFLElBQUtpSixFQUFJZzRELENBQUMsRUFBRU4sQ0FBQyxFQUFJbnpELEVBQ2RBLElBQVMsS0FDVEEsSUFBUyxPQUFRdkUsRUFBSWc0RCxDQUFDLEVBQUVOLENBQUMsRUFBSSxHQUM3Qm56RCxJQUFTLFFBQVN2RSxFQUFJZzRELENBQUMsRUFBRU4sQ0FBQyxFQUFJLEdBQzdCLE1BQU15USxHQUFTNWpFLENBQUksQ0FBQyxFQUNwQixNQUFNK2pFLEdBQVUvakUsQ0FBSSxFQUFFLFFBQVMsQ0FBQSxFQUNuQ3ZFLEVBQUlnNEQsQ0FBQyxFQUFFTixDQUFDLEVBQUluekQsRUFEMEJ2RSxFQUFJZzRELENBQUMsRUFBRU4sQ0FBQyxFQUFJb1EsR0FBVXZqRSxDQUFJLEVBRHJDdkUsRUFBSWc0RCxDQUFDLEVBQUVOLENBQUMsRUFBSXlRLEdBQVM1akUsQ0FBSSxFQUd6RCxDQUVELFNBQVNtd0YsRUFBZTU5RixFQUFjN0osRUFBYyxDQUNuRCxJQUFJOEosRUFBSTlKLEdBQVEsR0FDWitTLEVBQWUsQ0FBQSxFQUNuQixHQUFHLENBQUNsSixHQUFLQSxFQUFFLFNBQVcsRUFBRyxPQUFPa0osRUFHaEMsUUFGSTIwRixFQUFRNzlGLEVBQUUsTUFBTSxRQUFRLEVBQ3hCbTJELEVBQUkwbkMsRUFBTSxPQUFTLEVBQ2pCMW5DLEdBQUssR0FBSzBuQyxFQUFNMW5DLENBQUMsRUFBRSxTQUFXLEdBQUcsRUFBRUEsRUFHekMsUUFGSWg2QyxFQUFRLEdBQUkrL0IsRUFBTSxFQUNsQmdsQixFQUFJLEVBQ0ZBLEdBQUsvSyxFQUFHLEVBQUUrSyxFQUNmaGxCLEVBQU0yaEQsRUFBTTM4QixDQUFDLEVBQUUsUUFBUSxHQUFHLEVBQ3ZCaGxCLEdBQU8sR0FBSUEsRUFBTTJoRCxFQUFNMzhCLENBQUMsRUFBRSxPQUFhaGxCLElBQzFDLy9CLEVBQVEsS0FBSyxJQUFJQSxFQUFPKy9CLENBQUcsRUFFNUIsSUFBSWdsQixFQUFJLEVBQUdBLEdBQUsvSyxFQUFHLEVBQUUrSyxFQUFHLENBQ3ZCaDRELEVBQUlnNEQsQ0FBQyxFQUFJLEdBRVQsSUFBSU4sRUFBSSxFQUVSLElBREErOEIsRUFBYUUsRUFBTTM4QixDQUFDLEVBQUUsTUFBTSxFQUFHL2tELENBQUssRUFBRSxLQUFNLEVBQUVqVCxFQUFLZzRELEVBQUdOLEVBQUczZ0UsQ0FBQyxFQUN0RDJnRSxFQUFJLEVBQUdBLElBQU1pOUIsRUFBTTM4QixDQUFDLEVBQUUsT0FBUy9rRCxHQUFPLEdBQUssRUFBRyxFQUFFeWtELEVBQ25EKzhCLEVBQWFFLEVBQU0zOEIsQ0FBQyxFQUFFLE1BQU0va0QsR0FBT3lrRCxFQUFFLEdBQUcsR0FBR3prRCxFQUFNeWtELEVBQUUsRUFBRSxFQUFFLEtBQU0sRUFBQzEzRCxFQUFJZzRELEVBQUVOLEVBQUUzZ0UsQ0FBQyxDQUN4RSxDQUNELE9BQUdBLEVBQUUsWUFBV2lKLEVBQU1BLEVBQUksTUFBTSxFQUFHakosRUFBRSxTQUFTLEdBQ3ZDaUosQ0FDUCxDQUdELElBQUk0MEYsRUFBYSxDQUNULEdBQWEsSUFDYixFQUFhLElBQ2IsR0FBYSxJQUNiLElBQWEsR0FDdEIsRUFHS0MsRUFBb0IsQ0FDaEIsR0FBYSxFQUNiLEVBQWEsRUFDYixHQUFhLEVBQ2IsSUFBYSxDQUN0QixFQUVDLFNBQVNDLEVBQVVqbUUsRUFBSyxDQUV2QixRQURJeXNDLEVBQU0sQ0FBRSxFQUFFeTVCLEVBQVEsR0FBTy9xQyxFQUFNLEVBQUd5SSxFQUFLLEVBQ3RDekksRUFBTW43QixFQUFJLE9BQU8sRUFBRW03QixHQUNuQnlJLEVBQUc1akMsRUFBSSxXQUFXbTdCLENBQUcsSUFBTSxHQUFNK3FDLEVBQVEsQ0FBQ0EsRUFDdEMsQ0FBQ0EsR0FBU3RpQyxLQUFNbWlDLElBQVl0NUIsRUFBSTdJLENBQUUsR0FBSzZJLEVBQUk3SSxDQUFFLEdBQUcsR0FBRyxHQUc1REEsRUFBSyxDQUFBLEVBQ0wsSUFBSXpJLEtBQU9zUixFQUFVLE9BQU8sVUFBVSxlQUFlLEtBQUtBLEVBQUt0UixDQUFHLEdBQ2pFeUksRUFBRyxLQUFLLENBQUU2SSxFQUFJdFIsQ0FBRyxFQUFHQSxDQUFHLENBQUUsRUFHMUIsR0FBSyxDQUFDeUksRUFBRyxPQUFTLENBQ2pCNkksRUFBTXU1QixFQUNOLElBQUk3cUMsS0FBT3NSLEVBQVUsT0FBTyxVQUFVLGVBQWUsS0FBS0EsRUFBS3RSLENBQUcsR0FDakV5SSxFQUFHLEtBQUssQ0FBRTZJLEVBQUl0UixDQUFHLEVBQUdBLENBQUcsQ0FBRSxDQUUxQixDQUVELE9BQUF5SSxFQUFHLEtBQUssU0FBU3A4RCxFQUFHZ0gsRUFBRyxDQUFFLE9BQU9oSCxFQUFFLENBQUMsRUFBSWdILEVBQUUsQ0FBQyxHQUFLdzNGLEVBQWtCeCtGLEVBQUUsQ0FBQyxDQUFDLEVBQUl3K0YsRUFBa0J4M0YsRUFBRSxDQUFDLENBQUMsQ0FBRSxDQUFFLEVBRTVGdTNGLEVBQVduaUMsRUFBRyxJQUFLLEVBQUMsQ0FBQyxDQUFDLEdBQUssRUFDbEMsQ0FFRCxTQUFTdWlDLEVBQWlCbm1FLEVBQWdCNWhDLEVBQW9CLENBQzdELElBQUk4SixFQUFJOUosR0FBUSxHQUNabW5HLEVBQU0sR0FFTjVoQixFQUFtQno3RSxFQUFFLE1BQVMsQ0FBRSxFQUFhLENBQUUsRUFDL0NtN0IsRUFBbUIsQ0FBQyxFQUFHLENBQUMsRUFBRSxFQUFHLEVBQUUsQ0FBQyxFQUFHLEVBQUcsQ0FBQyxFQUFFLEVBQUcsRUFBRSxDQUFDLENBQUMsRUFFakRyRCxFQUFJLE1BQU0sRUFBRSxDQUFDLEdBQUssT0FFakJBLEVBQUksV0FBVyxDQUFDLEdBQUssSUFBTUEsRUFBSSxXQUFXLENBQUMsR0FBSyxJQUNsRHVsRSxFQUFNdmxFLEVBQUksT0FBTyxDQUFDLEVBQUdBLEVBQU1BLEVBQUksTUFBTSxDQUFDLEdBRy9CQSxFQUFJLFdBQVcsQ0FBQyxHQUFLLElBQU1BLEVBQUksV0FBVyxDQUFDLEdBQUssSUFDdkR1bEUsRUFBTXZsRSxFQUFJLE9BQU8sQ0FBQyxFQUFHQSxFQUFNQSxFQUFJLE1BQU0sQ0FBQyxHQUVsQ3VsRSxFQUFNVSxFQUFVam1FLEVBQUksTUFBTSxFQUFFLElBQUksQ0FBQyxFQUUvQjkzQixHQUFLQSxFQUFFLEdBQUlxOUYsRUFBTXI5RixFQUFFLEdBQ3RCcTlGLEVBQU1VLEVBQVVqbUUsRUFBSSxNQUFNLEVBQUUsSUFBSSxDQUFDLEVBQ3RDLElBQUltcEMsRUFBSSxFQUFHTixFQUFJLEVBQUc3a0QsRUFBSSxFQUNsQkksRUFBUSxFQUFHKzJDLEVBQU0sRUFBR2lyQyxFQUFRYixFQUFJLFdBQVcsQ0FBQyxFQUFHVyxFQUFRLEdBQU90aUMsRUFBRyxFQUFHeWlDLEVBQVFybUUsRUFBSSxXQUFXLENBQUMsRUFDaEdBLEVBQU1BLEVBQUksUUFBUSxTQUFVO0FBQUEsQ0FBSSxFQUNoQyxJQUFJc21FLEVBQWtCcCtGLEVBQUUsUUFBVSxLQUFPNCtELEdBQWE1K0QsRUFBRSxNQUFNLEVBQUksS0FDbEUsU0FBU3ErRixHQUFjLENBQ3RCLElBQUloL0YsRUFBSXk0QixFQUFJLE1BQU01YixFQUFPKzJDLENBQUcsRUFDeEIzekIsRUFBUSxDQUFBLEVBRVosR0FER2pnQyxFQUFFLE9BQU8sQ0FBQyxHQUFLLEtBQU9BLEVBQUUsT0FBT0EsRUFBRSxPQUFTLENBQUMsR0FBSyxNQUFLQSxFQUFJQSxFQUFFLE1BQU0sRUFBRSxFQUFFLEVBQUUsUUFBUSxNQUFNLEdBQUcsR0FDeEZBLEVBQUUsU0FBVyxFQUFHaWdDLEVBQUssRUFBSSxZQUNwQnQvQixFQUFFLElBQU9zL0IsRUFBSyxFQUFJLElBQUtBLEVBQUssRUFBSWpnQyxVQUNoQ0EsRUFBRSxLQUFJLEVBQUcsU0FBVyxFQUFLaWdDLEVBQUssRUFBSSxJQUFLQSxFQUFLLEVBQUlqZ0MsVUFDaERBLEVBQUUsV0FBVyxDQUFDLEdBQUssR0FDdkJBLEVBQUUsV0FBVyxDQUFDLEdBQUssSUFBUUEsRUFBRSxXQUFXQSxFQUFFLE9BQVMsQ0FBQyxHQUFLLElBQVFpZ0MsRUFBSyxFQUFJLElBQUtBLEVBQUssRUFBSWpnQyxFQUFFLE1BQU0sRUFBRSxFQUFFLEVBQUUsUUFBUSxNQUFNLEdBQUcsR0FDbEhpL0YsR0FBVWovRixDQUFDLEdBQUtpZ0MsRUFBSyxFQUFJLElBQUtBLEVBQUssRUFBSWpnQyxFQUFFLE1BQU0sQ0FBQyxJQUNqRGlnQyxFQUFLLEVBQUksSUFBS0EsRUFBSyxFQUFJamdDLFdBQ3ZCQSxHQUFLLE9BQVVpZ0MsRUFBSyxFQUFJLElBQUtBLEVBQUssRUFBSSxXQUN0Q2pnQyxHQUFLLFFBQVdpZ0MsRUFBSyxFQUFJLElBQUtBLEVBQUssRUFBSSxXQUN2QyxDQUFDLE1BQU14akIsRUFBSXMxRCxHQUFTL3hFLENBQUMsQ0FBQyxFQUFLaWdDLEVBQUssRUFBSSxJQUFRdC9CLEVBQUUsV0FBYSxLQUFPcy9CLEVBQUssRUFBSWpnQyxHQUFHaWdDLEVBQUssRUFBSXhqQixVQUN2RixDQUFDLE1BQU15MUQsR0FBVWx5RSxDQUFDLEVBQUUsU0FBUyxHQUFLKytGLEdBQU8vK0YsRUFBRSxNQUFNKytGLENBQUcsRUFBRyxDQUM5RDkrRCxFQUFLLEVBQUl0L0IsRUFBRSxRQUFVbTNELEdBQVUsRUFBRSxFQUNqQyxJQUFJMzdDLEVBQUksRUFDTDRpRixHQUFPLytGLEVBQUUsTUFBTSsrRixDQUFHLElBQUkvK0YsRUFBRXkvRCxHQUFXei9ELEVBQUdXLEVBQUUsT0FBU1gsRUFBRSxNQUFNKytGLENBQUcsR0FBRyxDQUFFLENBQUEsRUFBSTVpRixFQUFFLEdBQ3ZFeGIsRUFBRSxXQUFhcy9CLEVBQUssRUFBSSxJQUFLQSxFQUFLLEVBQUl5eEMsR0FBVTF4RSxFQUFHbWMsQ0FBQyxJQUNoRDhqQixFQUFLLEVBQUksSUFBS0EsRUFBSyxFQUFJOHdDLEdBQVFXLEdBQVUxeEUsRUFBR21jLENBQUMsQ0FBQyxHQUNsRHhiLEVBQUUsV0FBYSxLQUFPcy9CLEVBQUssRUFBSWc2QixHQUFXaDZCLEVBQUssRUFBR0EsRUFBSyxhQUFhLEtBQU84d0MsR0FBUTl3QyxFQUFLLENBQUMsRUFBRUEsRUFBSyxDQUFDLEdBQ2hHdC9CLEVBQUUsUUFBUSxPQUFPcy9CLEVBQUssQ0FDOUIsTUFDSUEsRUFBSyxFQUFJLElBQ1RBLEVBQUssRUFBSWpnQyxFQVFWLEdBTkdpZ0MsRUFBSyxHQUFLLE1BQ0x0L0IsRUFBRSxPQUFheTdFLEVBQUd4YSxDQUFDLElBQUd3YSxFQUFHeGEsQ0FBQyxFQUFJLENBQUEsR0FBSXdhLEVBQUd4YSxDQUFDLEVBQUVOLENBQUMsRUFBSXJoQyxHQUNoRG04QyxFQUFHNUIsR0FBWSxDQUFDLEVBQUVsWixFQUFFLEVBQUVNLENBQUMsQ0FBQyxDQUFDLEVBQUkzaEMsR0FDbENwakIsRUFBUSsyQyxFQUFJLEVBQUdrckMsRUFBVXJtRSxFQUFJLFdBQVc1YixDQUFLLEVBQzFDaWYsRUFBTSxFQUFFLEVBQUl3bEMsSUFBR3hsQyxFQUFNLEVBQUUsRUFBSXdsQyxHQUMzQnhsQyxFQUFNLEVBQUUsRUFBSThsQyxJQUFHOWxDLEVBQU0sRUFBRSxFQUFJOGxDLEdBQzNCdkYsR0FBTXdpQyxFQUFPLEVBQUV2OUIsVUFBVUEsRUFBSSxFQUFHLEVBQUVNLEVBQU1qaEUsRUFBRSxXQUFhQSxFQUFFLFdBQWFpaEUsRUFBRyxNQUFPLEVBQ25GLENBQ0RzOUIsRUFBTyxLQUFLdHJDLEVBQU1uN0IsRUFBSSxPQUFPLEVBQUVtN0IsRUFBSyxPQUFReUksRUFBRzVqQyxFQUFJLFdBQVdtN0IsQ0FBRyxFQUFDLENBQ2pFLElBQUssSUFBU2tyQyxJQUFZLEtBQU1ILEVBQVEsQ0FBQ0EsR0FBTyxNQUNoRCxLQUFLRSxFQUFPLElBQUssSUFBTSxJQUFLLElBQU0sR0FBRyxDQUFDRixHQUFTSyxFQUFXLEVBQUksTUFBTUUsRUFBTyxLQUUzRSxDQUNELE9BQUd0ckMsRUFBTS8yQyxFQUFRLEdBQUdtaUYsRUFBVyxFQUUvQjVpQixFQUFHLE1BQU0sRUFBSWIsR0FBYXovQyxDQUFLLEVBQ3hCc2dELENBQ1AsQ0FFRCxTQUFTK2lCLEVBQWlCMW1FLEVBQWdCNWhDLEVBQW9CLENBSTdELE1BSEcsRUFBRUEsR0FBUUEsRUFBSyxNQUNmQSxFQUFLLElBQ0w0aEMsRUFBSSxNQUFNLEVBQUUsQ0FBQyxHQUFLLFFBQ2xCQSxFQUFJLFFBQVEsR0FBSSxHQUFLLEdBQUtBLEVBQUksUUFBUSxHQUFHLEdBQUssR0FBS0EsRUFBSSxRQUFRLEdBQUcsR0FBSyxFQUFVbW1FLEVBQWlCbm1FLEVBQUs1aEMsQ0FBSSxFQUN2RytsRixHQUFhMGhCLEVBQWU3bEUsRUFBSzVoQyxDQUFJLEVBQUdBLENBQUksQ0FDbkQsQ0FFRCxTQUFTdW9HLEVBQWF2K0YsRUFBZWhLLEVBQW9CLENBQ3hELElBQUk0aEMsRUFBTSxHQUFJd3VELEVBQVFwd0YsRUFBSyxNQUFRLFNBQVcsQ0FBQyxFQUFFLEVBQUUsRUFBRSxDQUFDLEVBQUl3b0csR0FBVXgrRixFQUFHaEssQ0FBSSxFQUMzRSxPQUFPQSxFQUFLLEtBQUksQ0FDZixJQUFLLFNBQVU0aEMsRUFBTWs5QixHQUFjOTBELENBQUMsRUFBRyxNQUN2QyxJQUFLLFNBQVU0M0IsRUFBTTUzQixFQUFHLE1BQ3hCLElBQUssU0FDRGhLLEVBQUssVUFBWSxNQUFPNGhDLEVBQU01M0IsRUFBRSxTQUFTLE1BQU0sRUFDMUNoSyxFQUFLLFVBQVksT0FBT3MrRCxHQUFhLElBQWExOEIsRUFBTTA4QixHQUFTLE1BQU0sT0FBT3QrRCxFQUFLLFNBQVVnSyxDQUFDLEVBQ2pHNDNCLEVBQU1tOUIsSUFBVyxPQUFPLFNBQVMvMEQsQ0FBQyxFQUFJQSxFQUFFLFNBQVMsUUFBUSxFQUFJdTFELEdBQUl2MUQsQ0FBQyxFQUN2RSxNQUNELElBQUssUUFBUzQzQixFQUFNbTVDLEdBQU8vd0UsQ0FBQyxFQUFHLE1BQy9CLElBQUssU0FBVTQzQixFQUFNNTNCLEVBQUcsTUFDeEIsUUFBUyxNQUFNLElBQUksTUFBTSxxQkFBdUJoSyxFQUFLLElBQUksQ0FDekQsQ0FJRCxPQUhHb3dGLEVBQU0sQ0FBQyxHQUFLLEtBQVFBLEVBQU0sQ0FBQyxHQUFLLEtBQVFBLEVBQU0sQ0FBQyxHQUFLLElBQU14dUQsRUFBTWs5QyxHQUFTbDlDLEVBQUksTUFBTSxDQUFDLENBQUMsRUFDaEY1aEMsRUFBSyxNQUFRLFVBQVlBLEVBQUssTUFBUSxVQUFZQSxFQUFLLFVBQVksTUFBTzRoQyxFQUFNazlDLEdBQVNsOUMsQ0FBRyxFQUMzRjVoQyxFQUFLLE1BQVEsVUFBYSxPQUFPcytELEdBQWEsS0FBZXQrRCxFQUFLLFdBQVc0aEMsRUFBTTA4QixHQUFTLE1BQU0sT0FBT3QrRCxFQUFLLFNBQVVzK0QsR0FBUyxNQUFNLE9BQU8sTUFBTTE4QixDQUFHLENBQUMsR0FDOUpBLEVBQUksTUFBTSxFQUFFLEVBQUUsR0FBSyxzQkFBOEJpbEUsR0FBSSxTQUFTN21HLEVBQUssTUFBUSxTQUFXNGhDLEVBQU1rOUMsR0FBU2w5QyxDQUFHLEVBQUc1aEMsQ0FBSSxFQUMzR3NvRyxFQUFpQjFtRSxFQUFLNWhDLENBQUksQ0FDakMsQ0FFRCxTQUFTeW9HLEVBQWdCeitGLEVBQWVoSyxFQUFtQixDQUFFLE9BQU9pbEYsR0FBa0JzakIsRUFBYXYrRixFQUFHaEssQ0FBSSxFQUFHQSxDQUFJLENBQUksQ0FFckgsU0FBUzBvRyxFQUFhbmpCLEVBQThDLENBSW5FLFFBSEl6N0UsRUFBc0IsQ0FBQSxFQUN0QmIsRUFBSTQ3RSxHQUFrQlUsRUFBRyxNQUFNLENBQUMsRUFBR244QyxFQUNuQ2s4QyxFQUFRLE1BQU0sUUFBUUMsQ0FBRSxFQUNwQnhhLEVBQUk5aEUsRUFBRSxFQUFFLEVBQUc4aEUsR0FBSzloRSxFQUFFLEVBQUUsRUFBRyxFQUFFOGhFLEVBQUcsQ0FFbkMsUUFESWtYLEVBQXVCLENBQUEsRUFDbkJ4WCxFQUFJeGhFLEVBQUUsRUFBRSxFQUFHd2hFLEdBQUt4aEUsRUFBRSxFQUFFLEVBQUcsRUFBRXdoRSxFQUFHLENBQ25DLElBQUl5N0IsRUFBUXZpQixHQUFZLENBQUMsRUFBRTVZLEVBQUUsRUFBRU4sQ0FBQyxDQUFDLEVBRWpDLEdBREFyaEMsRUFBT2s4QyxHQUFTQyxFQUFHeGEsQ0FBQyxHQUFHLENBQUUsR0FBRU4sQ0FBQyxFQUFJOGEsRUFBRzJnQixDQUFLLEVBQ3JDLENBQUM5OEQsR0FBUUEsRUFBSyxHQUFLLEtBQU0sQ0FBRTY0QyxFQUFHLEtBQUssWUFBWSxFQUFHLFFBQVcsQ0FFaEUsUUFESWxmLEdBQUszNUIsRUFBSyxJQUFNMjdDLEdBQVkzN0MsQ0FBSSxFQUFHQSxFQUFLLElBQU0sSUFBSSxNQUFNLEVBQUUsRUFBRSxFQUMxRDI1QixFQUFFLE9BQVMsSUFBSUEsR0FBSyxJQUMxQmtmLEVBQUcsS0FBS2xmLEdBQUswSCxJQUFNLEVBQUksSUFBTSxHQUFHLENBQ2hDLENBQ0QzZ0UsRUFBRSxLQUFLbTRFLEVBQUcsS0FBSyxFQUFFLENBQUMsQ0FDbEIsQ0FDRCxPQUFPbjRFLEVBQUUsS0FBSztBQUFBLENBQUksQ0FDbEIsQ0FFRCxNQUFPLENBQ04sWUFBYTIrRixFQUNiLFNBQVVGLEVBQ1YsV0FBWUcsQ0FDZCxDQUNBLElBR0EsU0FBU0MsR0FBVzMrRixFQUFHaEssRUFBTSxDQUM1QixJQUFJOEosRUFBSTlKLEdBQVEsQ0FBRSxFQUFFNG9HLEVBQVUsQ0FBQyxDQUFDOStGLEVBQUUsSUFBS0EsRUFBRSxJQUFNLEdBQy9DLEdBQUksQ0FDSCxJQUFJZzJELEVBQU0wakMsR0FBSyxZQUFZeDVGLEVBQUdGLENBQUMsRUFDL0IsT0FBQUEsRUFBRSxJQUFNOCtGLEVBQ0Q5b0MsQ0FDUCxPQUFPaDNELEVBQUcsQ0FFVixHQURBZ0IsRUFBRSxJQUFNOCtGLEVBQ0wsQ0FBQzkvRixFQUFFLFFBQVEsTUFBTSxvQkFBb0IsR0FBSzgvRixFQUFTLE1BQU05L0YsRUFDNUQsT0FBT3krRixHQUFJLFlBQVl2OUYsRUFBR2hLLENBQUksQ0FDOUIsQ0FDRixDQUVBLElBQUk2b0csR0FBb0IsVUFBVyxDQUNsQyxTQUFTQyxFQUFZeHhGLEVBQU0yUSxFQUF1QmpvQixFQUFjLENBQy9ELEdBQUlzWCxFQUNKLENBQUFnMEQsR0FBVWgwRCxFQUFNQSxFQUFLLEdBQUssQ0FBQyxFQUUzQixRQURJeXhGLEVBQU8vb0csRUFBSyxNQUFRZ3BHLEdBQ2xCMXhGLEVBQUssRUFBSUEsRUFBSyxRQUFRLENBQzNCLElBQUl3ckUsRUFBS3hyRSxFQUFLLFdBQVcsQ0FBQyxFQUN0Qnl6RCxFQUFJZytCLEVBQUtqbUIsQ0FBRSxHQUFLaW1CLEVBQUssS0FBTSxFQUMzQi82RCxFQUFTMTJCLEVBQUssV0FBVyxDQUFDLEVBQzFCbTBELEVBQU1uMEQsRUFBSyxFQUFJMDJCLEVBQ2Zoa0MsR0FBSStnRSxFQUFFLEdBQUtBLEVBQUUsRUFBRXp6RCxFQUFNMDJCLEVBQVFodUMsQ0FBSSxFQUVyQyxHQURBc1gsRUFBSyxFQUFJbTBELEVBQ054akQsRUFBR2plLEdBQUcrZ0UsRUFBRytYLENBQUUsRUFBRyxNQUNqQixFQUNELENBRUQsU0FBU21tQixFQUFrQmovRixFQUFlaEssRUFBTSxDQUMvQyxPQUFPQSxFQUFLLEtBQUksQ0FDZixJQUFLLFNBQVUsT0FBT2twRyxFQUFzQjdwQyxHQUFJUCxHQUFjOTBELENBQUMsQ0FBQyxFQUFHaEssQ0FBSSxFQUN2RSxJQUFLLFNBQVUsT0FBT2twRyxFQUFzQjdwQyxHQUFJcjFELENBQUMsRUFBR2hLLENBQUksRUFDeEQsSUFBSyxTQUNMLElBQUssUUFBUyxPQUFPa3BHLEVBQXNCbC9GLEVBQUdoSyxDQUFJLENBQ2xELENBQ0QsS0FBTSxvQkFBc0JBLEVBQUssSUFDakMsQ0FFRCxTQUFTa3BHLEVBQXNCbC9GLEVBQUdoSyxFQUFtQixDQUNwRCxHQUFHLENBQUNnSyxFQUFHLE9BQU9BLEVBQ2QsSUFBSUYsRUFBSTlKLEdBQVEsR0FFWm1KLEVBQW9CVyxFQUFFLE1BQVEsQ0FBRSxFQUFHLENBQUUsRUFBWVosRUFBSSxTQUFVaWdHLEVBQVMsR0FBSUMsRUFBTyxFQUNuRmprQixFQUFTLENBQUEsRUFBSWtrQixHQUFTLENBQUEsRUFBSUMsR0FBWSxDQUFBLEVBRXRDQyxFQUFXLENBQUMsRUFBRyxDQUFDLEVBQUUsRUFBRyxFQUFFLENBQUMsRUFBRyxFQUFHLENBQUMsRUFBRSxFQUFHLEVBQUUsQ0FBQyxDQUFDLEVBQ3hDQyxHQUFZMS9GLEVBQUUsV0FBYSxFQUUvQixHQUFHRSxFQUFFLENBQUMsR0FBSyxJQUNQQSxFQUFFLENBQUMsR0FBSyxHQUFRQSxFQUFFLENBQUMsR0FBSyxJQUN2QkEsRUFBRSxRQUFVLElBQU1BLEVBQUUsRUFBRSxHQUFLLEdBQVFBLEVBQUUsRUFBRSxJQUFNLElBQU0sTUFBTSxJQUFJLE1BQU0sa0NBQWtDLEVBSTFHLEdBQUdBLEVBQUUsQ0FBQyxHQUFLLEVBQ1ZGLEVBQUUsS0FBT2svRixHQUNURixFQUFZOStGLEVBQUcsU0FBU3RELEdBQUtxa0UsR0FBRytYLEdBQUksQ0FBRSxPQUFPQSxHQUFFLENBQzlDLElBQUssR0FDSmg1RSxFQUFFLEtBQU9wRCxHQUNOQSxJQUFPLE9BQVFvRCxFQUFFLEtBQU8sSUFDM0IsTUFDRCxJQUFLLEdBQU15L0YsRUFBVzdpRyxHQUFLLE1BQzNCLElBQUssS0FBU0EsS0FBS3lpRyxFQUFTemlHLElBQUssTUFDakMsSUFBSyxLQUFNeWlHLEVBQVN6aUcsR0FBSyxNQUN6QixJQUFLLElBQ0wsSUFBSyxJQUNBb0QsRUFBRSxPQUFNcEQsR0FBSSxDQUFDLEVBQUUsRUFBSUEsR0FBSSxDQUFDLEVBQUUsRUFBRSxNQUFNLENBQUMsR0FFeEMsSUFBSyxJQUNMLElBQUssSUFDTCxJQUFLLElBRURvOEUsSUFBTSxLQUFTcDhFLEdBQUksQ0FBQyxFQUFJLE1BQVMsTUFBU0EsR0FBSSxDQUFDLEVBQUksSUFBUSxJQUFNQSxHQUFJLENBQUMsRUFBSSxJQUFRLEtBQ3BGQSxHQUFJLENBQUMsRUFBRSxFQUFJb0QsRUFBRSxRQUFVbTNELEdBQVUsRUFBRSxFQUNoQ24zRCxFQUFFLFlBQWFwRCxHQUFJLENBQUMsRUFBRSxFQUFJLElBQUtBLEdBQUksQ0FBQyxFQUFFLEVBQUk0ekUsR0FBUTV6RSxHQUFJLENBQUMsRUFBRSxDQUFDLElBRzNEb0QsRUFBRSxNQUNEcEQsR0FBSSxDQUFDLEVBQUkwaUcsSUFDWGpnRyxFQUFFLE1BQU0sRUFBSXU3RSxHQUFhNmtCLENBQVEsRUFDakNwa0IsRUFBT2o4RSxDQUFDLEVBQUlDLEVBQ1prZ0csR0FBTyxLQUFLbmdHLENBQUMsRUFDYkMsRUFBS1csRUFBRSxNQUFRLENBQUUsRUFBRyxDQUFFLEVBQ3RCeS9GLEVBQVcsQ0FBQyxFQUFHLENBQUMsRUFBRSxFQUFHLEVBQUUsQ0FBQyxFQUFHLEVBQUcsQ0FBQyxFQUFFLEVBQUcsRUFBRSxDQUFDLENBQUMsRUFDeENILEVBQU8xaUcsR0FBSSxDQUFDLEVBQUd3QyxFQUFJaWdHLEdBQVUsU0FBV0MsRUFBTyxHQUFJRCxFQUFTLElBSTlELElBQUlNLEdBQVUzL0YsRUFBRSxPQUFTWCxFQUFFekMsR0FBSSxDQUFDLEVBQUUsQ0FBQyxHQUFHLENBQUEsR0FBSUEsR0FBSSxDQUFDLEVBQUUsQ0FBQyxFQUFJeUMsRUFBRXc2RSxHQUFZajlFLEdBQUksQ0FBQyxDQUFDLENBQUMsRUFDM0UsR0FBRytpRyxHQUFTLENBQ1hBLEdBQVEsRUFBSS9pRyxHQUFJLENBQUMsRUFBRSxFQUFHK2lHLEdBQVEsRUFBSS9pRyxHQUFJLENBQUMsRUFBRSxFQUN0Q0EsR0FBSSxDQUFDLEVBQUUsR0FBSyxPQUFNK2lHLEdBQVEsRUFBSS9pRyxHQUFJLENBQUMsRUFBRSxHQUNyQ0EsR0FBSSxDQUFDLEVBQUUsR0FBSyxPQUFNK2lHLEdBQVEsRUFBSS9pRyxHQUFJLENBQUMsRUFBRSxHQUN4QyxLQUNBLENBQ0VvRCxFQUFFLE9BQ0FYLEVBQUV6QyxHQUFJLENBQUMsRUFBRSxDQUFDLElBQUd5QyxFQUFFekMsR0FBSSxDQUFDLEVBQUUsQ0FBQyxFQUFJLENBQUEsR0FDL0J5QyxFQUFFekMsR0FBSSxDQUFDLEVBQUUsQ0FBQyxFQUFFQSxHQUFJLENBQUMsRUFBRSxDQUFDLEVBQUlBLEdBQUksQ0FBQyxHQUN2QnlDLEVBQUV3NkUsR0FBWWo5RSxHQUFJLENBQUMsQ0FBQyxDQUFDLEVBQUlBLEdBQUksQ0FBQyxFQUNyQyxLQUVMLENBQUksRUFBR29ELENBQUMsVUFDSUUsRUFBRSxDQUFDLEdBQUssSUFBUUEsRUFBRSxDQUFDLEdBQUssR0FDakNGLEVBQUUsS0FBTzQvRixFQUNOMS9GLEVBQUUsQ0FBQyxHQUFLLEtBQVFGLEVBQUUsS0FBTyxHQUFNRSxFQUFFLEVBQUksR0FDeEM4K0YsRUFBWTkrRixFQUFHLFNBQVN0RCxHQUFLcWtFLEdBQUcrWCxHQUFJLENBQUUsT0FBT0EsR0FBRSxDQUM5QyxJQUFLLEtBQU01NUUsRUFBSXhDLEdBQUssTUFDcEIsSUFBSyxJQUNKQSxHQUFJLENBQUMsRUFBRSxFQUFJQSxHQUFJLENBQUMsRUFBRSxFQUFFLE1BQU0sQ0FBQyxFQUU1QixJQUFLLElBQ0wsSUFBSyxJQUNMLElBQUssSUFDTCxJQUFLLElBQ0wsSUFBSyxJQUNMLElBQUssSUFTSixHQVJHQSxHQUFJLENBQUMsRUFBSTBpRyxJQUNYamdHLEVBQUUsTUFBTSxFQUFJdTdFLEdBQWE2a0IsQ0FBUSxFQUNqQ3BrQixFQUFPajhFLENBQUMsRUFBSUMsRUFDWmtnRyxHQUFPLEtBQUtuZ0csQ0FBQyxFQUNiQyxFQUFLVyxFQUFFLE1BQVEsQ0FBRSxFQUFHLENBQUUsRUFDdEJ5L0YsRUFBVyxDQUFDLEVBQUcsQ0FBQyxFQUFFLEVBQUcsRUFBRSxDQUFDLEVBQUcsRUFBRyxDQUFDLEVBQUUsRUFBRyxFQUFFLENBQUMsQ0FBQyxFQUN4Q0gsRUFBTzFpRyxHQUFJLENBQUMsRUFBR3dDLEVBQUksU0FBV2tnRyxFQUFPLElBRW5DSSxHQUFZLEdBQUs5aUcsR0FBSSxDQUFDLEVBQUUsR0FBSzhpRyxHQUFXLE1BQ3hDMS9GLEVBQUUsT0FDQVgsRUFBRXpDLEdBQUksQ0FBQyxFQUFFLENBQUMsSUFBR3lDLEVBQUV6QyxHQUFJLENBQUMsRUFBRSxDQUFDLEVBQUksQ0FBQSxHQUMvQnlDLEVBQUV6QyxHQUFJLENBQUMsRUFBRSxDQUFDLEVBQUVBLEdBQUksQ0FBQyxFQUFFLENBQUMsRUFBSUEsR0FBSSxDQUFDLEdBQ3ZCeUMsRUFBRXc2RSxHQUFZajlFLEdBQUksQ0FBQyxDQUFDLENBQUMsRUFBSUEsR0FBSSxDQUFDLEVBQ2xDNmlHLEVBQVMsRUFBRSxFQUFJN2lHLEdBQUksQ0FBQyxFQUFFLElBQUc2aUcsRUFBUyxFQUFFLEVBQUk3aUcsR0FBSSxDQUFDLEVBQUUsR0FDL0M2aUcsRUFBUyxFQUFFLEVBQUk3aUcsR0FBSSxDQUFDLEVBQUUsSUFBRzZpRyxFQUFTLEVBQUUsRUFBSTdpRyxHQUFJLENBQUMsRUFBRSxHQUNsRCxNQUNELElBQUssSUFDREEsR0FBSSxJQUFNLElBQUc0aUcsR0FBVTVpRyxHQUFJLElBQU0sRUFBRSxDQUFDLENBQUMsRUFBSUEsR0FBSSxJQUFNLEVBQUUsQ0FBQyxHQUN6RCxNQUNELElBQUssTUFDSjRpRyxHQUFVNWlHLEdBQUksQ0FBQyxDQUFDLEVBQUlBLEdBQUksQ0FBQyxFQUFNQSxHQUFJLENBQUMsR0FBSzBpRyxJQUFNbGdHLEVBQUl4QyxHQUFJLENBQUMsR0FBRyxLQUVoRSxDQUFJLEVBQUdvRCxDQUFDLE1BQ0MsT0FBTSxJQUFJLE1BQU0sMEJBQTRCRSxFQUFFLENBQUMsQ0FBQyxFQUl2RCxHQUhBYixFQUFFLE1BQU0sRUFBSXU3RSxHQUFhNmtCLENBQVEsRUFDakNwa0IsRUFBT2drQixHQUFVamdHLENBQUMsRUFBSUMsRUFDdEJrZ0csR0FBTyxLQUFLRixHQUFVamdHLENBQUMsRUFDcEIsQ0FBQ29nRyxHQUFVLE9BQVEsTUFBTyxDQUFFLFdBQVlELEdBQVEsT0FBUWxrQixHQUczRCxRQUZJd2tCLEdBQVUsQ0FBQSxFQUFJQyxHQUFTLEdBRW5COWpHLEdBQUksRUFBR0EsR0FBSXdqRyxHQUFVLE9BQVEsRUFBRXhqRyxHQUFNcS9FLEVBQU9ra0IsR0FBT3ZqRyxFQUFDLENBQUMsR0FDNUQ4akcsR0FBTyxLQUFLTixHQUFVeGpHLEVBQUMsR0FBS3VqRyxHQUFPdmpHLEVBQUMsQ0FBQyxFQUNyQzZqRyxHQUFRTCxHQUFVeGpHLEVBQUMsQ0FBQyxFQUFJcS9FLEVBQU9ta0IsR0FBVXhqRyxFQUFDLENBQUMsR0FBS3EvRSxFQUFPa2tCLEdBQU92akcsRUFBQyxDQUFDLElBRWhFOGpHLEdBQU8sS0FBS04sR0FBVXhqRyxFQUFDLENBQUMsRUFDeEI2akcsR0FBUUwsR0FBVXhqRyxFQUFDLENBQUMsRUFBSyxDQUFFLE9BQVEsSUFBSSxHQUV4QyxNQUFPLENBQUUsV0FBWThqRyxHQUFRLE9BQVFELEVBQU8sQ0FDNUMsQ0FFRCxTQUFTRSxFQUFhdGtCLEVBQWtCdmxGLEVBQW9CLENBQzNELElBQUk4SixFQUFJOUosR0FBUSxHQUVoQixHQURHLENBQUM4SixFQUFFLFVBQVksR0FBRzh6RCxHQUFPLENBQUM5ekQsRUFBRSxRQUFRLEVBQ3BDQSxFQUFFLE1BQVEsU0FBVSxNQUFNLElBQUksTUFBTSwrQkFBK0IsRUFDdEUsSUFBSXc1RSxFQUFLTixLQUNMLzlDLEVBQVE0L0MsR0FBa0JVLEVBQUcsTUFBTSxDQUFDLEVBQ3BDRCxFQUFRLE1BQU0sUUFBUUMsQ0FBRSxFQUN4QjE1QyxFQUFPLENBQUEsRUFFWGkrRCxHQUFleG1CLEVBQUksRUFBTXltQixFQUFjLElBQU0sQ0FBQyxFQUM5Q0QsR0FBZXhtQixFQUFJLEVBQU0wbUIsRUFBWS9rRSxDQUFLLENBQUMsRUFFM0MsUUFESWdsRSxFQUFRLEtBQUssSUFBSWhsRSxFQUFNLEVBQUUsRUFBRyxJQUFJLEVBQzVCOGxDLEdBQUk5bEMsRUFBTSxFQUFFLEVBQUc4bEMsSUFBS2svQixFQUFPLEVBQUVsL0IsR0FFcEMsUUFESS9GLEdBQUtnZixHQUFXalosRUFBQyxFQUNiTixFQUFJeGxDLEVBQU0sRUFBRSxFQUFHd2xDLEdBQUt4bEMsRUFBTSxFQUFFLEVBQUcsRUFBRXdsQyxFQUFHLENBQ3hDTSxLQUFNOWxDLEVBQU0sRUFBRSxJQUFHNEcsRUFBSzQrQixDQUFDLEVBQUlzWixHQUFXdFosQ0FBQyxHQUMxQyxJQUFJampFLEdBQU1xa0MsRUFBSzQrQixDQUFDLEVBQUl6RixHQUNoQjU3QixHQUFPazhDLEdBQVNDLEVBQUd4YSxFQUFDLEdBQUcsQ0FBRSxHQUFFTixDQUFDLEVBQUk4YSxFQUFHLzlFLEVBQUcsRUFDMUMsR0FBRyxHQUFDNGhDLElBQVFBLEdBQUssR0FBSyxLQUV0QixHQUFHQSxHQUFLLEdBQUssS0FDUkEsR0FBSyxFQUFFLElBQUlBLEdBQUssR0FBS0EsR0FBSyxHQUFLLFFBQVVBLEdBQUssR0FBSyxNQUFPMGdFLEdBQWV4bUIsRUFBSSxHQUFNNG1CLEVBQWNuL0IsR0FBR04sRUFBR3JoQyxHQUFLLENBQUMsQ0FBQyxFQUM3RzBnRSxHQUFleG1CLEVBQUksR0FBTTZtQixFQUFhcC9CLEdBQUdOLEVBQUdyaEMsR0FBSyxDQUFDLENBQUMsTUFDbEQsQ0FDTixJQUFJeEgsR0FBTW1qRCxHQUFZMzdDLEVBQUksRUFDMUIwZ0UsR0FBZXhtQixFQUFJLEdBQU04bUIsRUFBWXIvQixHQUFHTixFQUFHN29DLEdBQUksTUFBTSxFQUFHLEdBQUcsQ0FBQyxDQUFDLENBQzdELENBQ0QsQ0FHRixPQUFBa29FLEdBQWV4bUIsRUFBSSxDQUFJLEVBQ2hCQSxFQUFHLEtBQ1YsQ0FFRCxTQUFTK21CLEVBQVluUyxFQUFpQmw0RixFQUFvQixDQUN6RCxJQUFJOEosRUFBSTlKLEdBQVEsR0FFaEIsR0FERyxDQUFDOEosRUFBRSxVQUFZLEdBQUc4ekQsR0FBTyxDQUFDOXpELEVBQUUsUUFBUSxFQUNwQ0EsRUFBRSxNQUFRLFNBQVUsTUFBTSxJQUFJLE1BQU0sK0JBQStCLEVBQ3RFLElBQUl3NUUsRUFBS04sS0FFVDhtQixHQUFleG1CLEVBQUksRUFBTWduQixFQUFjcFMsQ0FBRSxDQUFDLEVBRTFDLFFBQVFweUYsRUFBSSxFQUFHdW9FLEVBQU0sRUFBR3ZvRSxFQUFJb3lGLEVBQUcsV0FBVyxPQUFRLEVBQUVweUYsR0FBT295RixFQUFHLE9BQU9BLEVBQUcsV0FBV3B5RixDQUFDLENBQUMsR0FBSyxDQUFFLEdBQUUsTUFBTSxHQUFHZ2tHLEdBQWV4bUIsRUFBSSxHQUFNaW5CLEVBQXdCclMsRUFBRyxXQUFXcHlGLENBQUMsRUFBR3VvRSxHQUFLLENBQUMsRUFFaEwsSUFBSW04QixFQUFRLEVBQ1osSUFBSTFrRyxFQUFJLEVBQUdBLEVBQUlveUYsRUFBRyxXQUFXLE9BQVEsRUFBRXB5RixFQUFHLENBQ3pDLElBQUl5L0UsRUFBSzJTLEVBQUcsT0FBT0EsRUFBRyxXQUFXcHlGLENBQUMsQ0FBQyxFQUNuQyxHQUFHLEdBQUN5L0UsR0FBTSxDQUFDQSxFQUFHLE1BQU0sR0FLcEIsU0FKSXRnRCxHQUFRNC9DLEdBQWtCVSxFQUFHLE1BQU0sQ0FBQyxFQUNwQ0QsR0FBUSxNQUFNLFFBQVFDLENBQUUsRUFDeEIxNUMsRUFBTyxDQUFBLEVBQ1BvK0QsR0FBUSxLQUFLLElBQUlobEUsR0FBTSxFQUFFLEVBQUcsSUFBSSxFQUM1QjhsQyxHQUFJOWxDLEdBQU0sRUFBRSxFQUFHOGxDLElBQUtrL0IsR0FBTyxFQUFFbC9CLEdBRXBDLFFBREkvRixHQUFLZ2YsR0FBV2paLEVBQUMsRUFDYk4sR0FBSXhsQyxHQUFNLEVBQUUsRUFBR3dsQyxJQUFLeGxDLEdBQU0sRUFBRSxFQUFHLEVBQUV3bEMsR0FBRyxDQUN4Q00sS0FBTTlsQyxHQUFNLEVBQUUsSUFBRzRHLEVBQUs0K0IsRUFBQyxFQUFJc1osR0FBV3RaLEVBQUMsR0FDMUMsSUFBSWpqRSxHQUFNcWtDLEVBQUs0K0IsRUFBQyxFQUFJekYsR0FDaEI1N0IsR0FBT2s4QyxJQUFTQyxFQUFHeGEsRUFBQyxHQUFHLENBQUUsR0FBRU4sRUFBQyxFQUFJOGEsRUFBRy85RSxFQUFHLEVBQzFDLEdBQUcsR0FBQzRoQyxJQUFRQSxHQUFLLEdBQUssS0FFdEIsR0FBR0EsR0FBSyxHQUFLLElBQ1owZ0UsR0FBZXhtQixFQUFJLEdBQU1tbkIsRUFBZ0IxL0IsR0FBR04sR0FBRysvQixFQUFPcGhFLEdBQUssQ0FBQyxDQUFDLE1BQ3ZELENBQ04sSUFBSXhILEdBQU1takQsR0FBWTM3QyxFQUFJLEVBRTFCMGdFLEdBQWV4bUIsRUFBSSxHQUFNb25CLEVBQWUzL0IsR0FBR04sR0FBRysvQixFQUFPNW9FLEdBQUksTUFBTSxFQUFHLEdBQUcsQ0FBQyxDQUFDLENBQ3ZFLENBQ0QsQ0FFRixFQUFFNG9FLEVBQ0YsQ0FFRCxPQUFBVixHQUFleG1CLEVBQUksQ0FBSSxFQUNoQkEsRUFBRyxLQUNWLENBR0QsU0FBU3ltQixFQUFjbmtGLEVBQWMsQ0FDcEMsSUFBSWs2QyxFQUFNc08sR0FBUSxDQUFDLEVBQ25CLE9BQUF0TyxFQUFJLFlBQVksRUFBR2w2QyxDQUFDLEVBQ2JrNkMsQ0FDUCxDQUVELFNBQVN3cUMsRUFBY3BTLEVBQWlCLENBQ3ZDLElBQUlwNEIsRUFBTXNPLEdBQVEsRUFBRSxFQUNwQnRPLEVBQUksWUFBWSxFQUFHLElBQU0sRUFDekJBLEVBQUksWUFBWSxFQUFHLENBQU0sRUFDekJBLEVBQUksWUFBWSxFQUFHLENBQU0sRUFFekIsUUFESS96QixFQUFPLEVBQUdGLEVBQU8sRUFBRzgrRCxFQUFRLEVBQ3hCN2tHLEVBQUksRUFBR0EsRUFBSW95RixFQUFHLFdBQVcsT0FBUSxFQUFFcHlGLEVBQUcsQ0FDN0MsSUFBSTVGLEVBQU9nNEYsRUFBRyxXQUFXcHlGLENBQUMsRUFDdEJ5L0UsRUFBSzJTLEVBQUcsT0FBT2g0RixDQUFJLEVBQ3ZCLEdBQUcsR0FBQ3FsRixHQUFNLENBQUNBLEVBQUcsTUFBTSxHQUNwQixHQUFFb2xCLEVBQ0YsSUFBSTFsRSxHQUFRdy9DLEdBQWFjLEVBQUcsTUFBTSxDQUFDLEVBQ2hDeDVDLEVBQU85RyxHQUFNLEVBQUUsSUFBRzhHLEVBQU85RyxHQUFNLEVBQUUsR0FDakM0RyxFQUFPNUcsR0FBTSxFQUFFLElBQUc0RyxFQUFPNUcsR0FBTSxFQUFFLEdBQ3BDLENBQ0QsT0FBRzhHLEVBQU8sT0FBTUEsRUFBTyxNQUN2Qit6QixFQUFJLFlBQVksRUFBRy96QixDQUFJLEVBQ3ZCK3pCLEVBQUksWUFBWSxFQUFHNnFDLENBQUssRUFDeEI3cUMsRUFBSSxZQUFZLEVBQUdqMEIsQ0FBSSxFQUN2QmkwQixFQUFJLFlBQVksRUFBRyxDQUFJLEVBQ3ZCQSxFQUFJLFlBQVksRUFBRyxDQUFJLEVBQ3ZCQSxFQUFJLFlBQVksRUFBRyxDQUFJLEVBQ3ZCQSxFQUFJLFlBQVksRUFBRyxDQUFJLEVBQ3ZCQSxFQUFJLFlBQVksRUFBRyxDQUFDLEVBQ3BCQSxFQUFJLFlBQVksRUFBRyxDQUFDLEVBQ2JBLENBQ1AsQ0FFRCxTQUFTOHFDLEVBQVlwdUMsRUFBTXh1QixFQUFRaHVDLEVBQU0sQ0FDeEMsSUFBSThKLEVBQUksQ0FBQyxFQUFFLENBQUMsRUFBRSxFQUFFLEVBQUUsQ0FBQyxFQUFFLEVBQUUsQ0FBQyxFQUFFLEVBQUUsRUFBRSxDQUFDLENBQUMsRUFDaEMsT0FBR2trQyxHQUFVLEdBQUtodUMsRUFBSyxNQUN0QjhKLEVBQUUsRUFBRSxFQUFJMHlELEVBQUssV0FBVyxDQUFDLEVBQ3pCQSxFQUFLLElBQ0wxeUQsRUFBRSxFQUFFLEVBQUkweUQsRUFBSyxXQUFXLENBQUMsRUFDekIxeUQsRUFBRSxFQUFFLEVBQUkweUQsRUFBSyxXQUFXLENBQUMsRUFDekJBLEVBQUssSUFDTDF5RCxFQUFFLEVBQUUsRUFBSTB5RCxFQUFLLFdBQVcsQ0FBQyxFQUNsQjF5RCxJQUVSQSxFQUFFLEVBQUUsRUFBSTB5RCxFQUFLLFdBQVcsQ0FBQyxFQUN6QjF5RCxFQUFFLEVBQUUsRUFBSTB5RCxFQUFLLFdBQVcsQ0FBQyxFQUN0Qnh1QixHQUFVLElBQU1odUMsRUFBSyxPQUFNdzhELEVBQUssR0FBSyxHQUN4QzF5RCxFQUFFLEVBQUUsRUFBSTB5RCxFQUFLLFdBQVcsQ0FBQyxFQUN6QjF5RCxFQUFFLEVBQUUsRUFBSTB5RCxFQUFLLFdBQVcsQ0FBQyxFQUN0Qnh1QixHQUFVLElBQU1odUMsRUFBSyxPQUFNdzhELEVBQUssR0FBSyxHQUNyQzF5RCxFQUFFLEVBQUUsR0FBSyxRQUFRQSxFQUFFLEVBQUUsRUFBSUEsRUFBRSxFQUFFLEVBQUlBLEVBQUUsRUFBRSxFQUFJQSxFQUFFLEVBQUUsRUFBSSxHQUM3Q0EsRUFDUCxDQUNELFNBQVNrZ0csRUFBWS9rRSxFQUFPLENBQzNCLElBQUk2NkIsRUFBTXNPLEdBQVEsQ0FBQyxFQUNuQixPQUFBdE8sRUFBSSxZQUFZLEVBQUc3NkIsRUFBTSxFQUFFLENBQUMsRUFDNUI2NkIsRUFBSSxZQUFZLEVBQUc3NkIsRUFBTSxFQUFFLENBQUMsRUFDNUI2NkIsRUFBSSxZQUFZLEVBQUc3NkIsRUFBTSxFQUFFLENBQUMsRUFDNUI2NkIsRUFBSSxZQUFZLEVBQUc3NkIsRUFBTSxFQUFFLENBQUMsRUFDckI2NkIsQ0FDUCxDQUVELFNBQVMrcUMsRUFBV3J1QyxFQUFNeHVCLEVBQVFodUMsRUFBTSxDQUN2QyxJQUFJOEosRUFBSSxDQUFDLENBQUMsRUFBRSxFQUFFLEVBQUUsQ0FBQyxFQUFHLENBQUMsRUFBRSxJQUFJLEVBQUUsQ0FBQyxFQUFHLEVBQUcsQ0FBQyxFQUNyQyxPQUFHOUosRUFBSyxNQUFRQSxFQUFLLE1BQVEsT0FDNUI4SixFQUFFLENBQUMsRUFBRSxFQUFJMHlELEVBQUssV0FBVyxDQUFDLEVBQzFCMXlELEVBQUUsQ0FBQyxFQUFJMHlELEVBQUssV0FBVyxDQUFDLEVBQ3hCMXlELEVBQUUsQ0FBQyxFQUFFLEVBQUkweUQsRUFBSyxXQUFXLENBQUMsRUFDMUJBLEVBQUssR0FBRyxJQUVSMXlELEVBQUUsQ0FBQyxFQUFJMHlELEVBQUssV0FBVyxDQUFDLEVBQ3hCMXlELEVBQUUsQ0FBQyxFQUFFLEVBQUkweUQsRUFBSyxXQUFXLENBQUMsRUFBRzF5RCxFQUFFLENBQUMsRUFBRSxFQUFJMHlELEVBQUssV0FBVyxDQUFDLEdBRWpEMXlELENBQ1AsQ0FFRCxTQUFTZ2hHLEVBQVl0dUMsRUFBTXh1QixFQUFRaHVDLEVBQU0sQ0FDeEMsSUFBSXlyRSxFQUFNalAsRUFBSyxFQUFJeHVCLEVBQ2Zsa0MsRUFBSStnRyxFQUFXcnVDLEVBQU14dUIsRUFBUWh1QyxDQUFJLEVBRXJDLEdBREE4SixFQUFFLENBQUMsRUFBRSxFQUFJLElBQ045SixFQUFLLE1BQVEsTUFBUSxDQUN2Qnc4RCxFQUFLLElBQ0wsSUFBSTc2QixFQUFNNjZCLEVBQUssV0FBVyxDQUFDLEVBQzNCLE9BQUExeUQsRUFBRSxDQUFDLEVBQUUsRUFBSTB5RCxFQUFLLFdBQVc3NkIsRUFBSyxNQUFNLEVBQzdCNzNCLENBQ1AsQ0FDRCxPQUFHOUosRUFBSyxNQUFNdzhELEVBQUssSUFDbkIxeUQsRUFBRSxDQUFDLEVBQUUsRUFBSTB5RCxFQUFLLFdBQVdpUCxFQUFNalAsRUFBSyxFQUFHLE1BQU0sRUFDdEMxeUQsQ0FDUCxDQUNELFNBQVNzZ0csRUFBWXIvQixFQUFHTixFQUFHdGhFLEVBQUcsQ0FFN0IsSUFBSVcsRUFBSXNrRSxHQUFRLEVBQUlqbEUsRUFBRSxNQUFNLEVBQzVCVyxFQUFFLFlBQVksRUFBRyxHQUFJLEVBQ3JCQSxFQUFFLFlBQVksRUFBRzJnRSxDQUFDLEVBQ2xCM2dFLEVBQUUsWUFBWSxFQUFHaWhFLENBQUMsRUFDbEJqaEUsRUFBRSxZQUFZLEVBQUcsRUFBSSxFQUNyQixRQUFRaEUsRUFBSSxFQUFHQSxFQUFJZ0UsRUFBRSxPQUFRLEVBQUVoRSxFQUFHLENBQ2pDLElBQUkwL0QsRUFBS3I4RCxFQUFFLFdBQVdyRCxDQUFDLEVBQ3ZCZ0UsRUFBRSxZQUFZLEVBQUcwN0QsR0FBTSxJQUFPLEdBQU9BLENBQUUsQ0FDdkMsQ0FDRCxPQUFBMTdELEVBQUUsWUFBWSxFQUFHLENBQUMsRUFDWEEsQ0FDUCxDQUVELFNBQVNpaEcsRUFBY3Z1QyxFQUFNeHVCLEVBQVFodUMsRUFBTSxDQUMxQyxJQUFJOEosRUFBSStnRyxFQUFXcnVDLEVBQU14dUIsRUFBUWh1QyxDQUFJLEVBQ3JDLE9BQUE4SixFQUFFLENBQUMsRUFBRSxFQUFJMHlELEVBQUssV0FBVyxFQUFHLEdBQUcsRUFDeEIxeUQsQ0FDUCxDQUNELFNBQVNvZ0csRUFBY24vQixFQUFHTixFQUFHN2tELEVBQUcsQ0FDL0IsSUFBSTliLEVBQUlza0UsR0FBUSxDQUFDLEVBQ2pCLE9BQUF0a0UsRUFBRSxZQUFZLEVBQUcsR0FBSSxFQUNyQkEsRUFBRSxZQUFZLEVBQUcyZ0UsQ0FBQyxFQUNsQjNnRSxFQUFFLFlBQVksRUFBR2loRSxDQUFDLEVBQ2xCamhFLEVBQUUsWUFBWSxFQUFHOGIsRUFBRyxHQUFHLEVBQ2hCOWIsQ0FDUCxDQUVELFNBQVNraEcsRUFBYXh1QyxFQUFNeHVCLEVBQVFodUMsRUFBTSxDQUN6QyxJQUFJOEosRUFBSStnRyxFQUFXcnVDLEVBQU14dUIsRUFBUWh1QyxDQUFJLEVBQ3JDLE9BQUE4SixFQUFFLENBQUMsRUFBRSxFQUFJMHlELEVBQUssV0FBVyxFQUFHLEdBQUcsRUFDeEIxeUQsQ0FDUCxDQUNELFNBQVNxZ0csRUFBYXAvQixFQUFHTixFQUFHN2tELEVBQUcsQ0FDOUIsSUFBSTliLEVBQUlza0UsR0FBUSxFQUFFLEVBQ2xCLE9BQUF0a0UsRUFBRSxZQUFZLEVBQUcsR0FBSSxFQUNyQkEsRUFBRSxZQUFZLEVBQUcyZ0UsQ0FBQyxFQUNsQjNnRSxFQUFFLFlBQVksRUFBR2loRSxDQUFDLEVBQ2xCamhFLEVBQUUsWUFBWSxFQUFHOGIsRUFBRyxHQUFHLEVBQ2hCOWIsQ0FDUCxDQUVELFNBQVNtaEcsRUFBY3p1QyxFQUFNeHVCLEVBQVFodUMsRUFBTSxDQUMxQyxJQUFJeXJFLEVBQU1qUCxFQUFLLEVBQUl4dUIsRUFDZmxrQyxFQUFJK2dHLEVBQVdydUMsRUFBTXh1QixFQUFRaHVDLENBQUksRUFHckMsR0FEQThKLEVBQUUsQ0FBQyxFQUFFLEVBQUkweUQsRUFBSyxXQUFXLEVBQUcsR0FBRyxFQUM1Qng4RCxFQUFLLEtBQU13OEQsRUFBSyxFQUFJaVAsTUFDbEIsQ0FDSixJQUFJMUUsRUFBT3ZLLEVBQUssV0FBVyxDQUFDLEVBQzVCMHVDLEVBQWdCMXVDLEVBQUssTUFBTUEsRUFBSyxFQUFHQSxFQUFLLEVBQUl1SyxDQUFJLEVBQUdqOUQsQ0FBQyxFQUNwRDB5RCxFQUFLLEdBQUt1SyxDQUNWLENBQ0QsT0FBT2o5RCxDQUNQLENBRUQsU0FBU3FoRyxFQUFhM3BDLEVBQUcwQixFQUFHanJELEVBQUssQ0FDaEMsSUFBSTR6RSxFQUFNM29CLEVBQUksTUFDZCxPQUFBQSxHQUFLLE9BQ0xBLEdBQUsyb0IsRUFBTXJxQixFQUFJLElBQU8wQixHQUFLLEtBQVVBLEVBQUksTUFBU0EsSUFDMUMyb0IsRUFBTSxHQUFLLE1BQVE1ekUsRUFBTThyRSxHQUFXN2dCLENBQUMsRUFBSThnQixHQUFXOWdCLENBQUMsRUFDN0QsQ0FNRCxJQUFJa29DLEVBQVUsQ0FDYixHQUFNLENBQUMsUUFBUyxDQUFDLEVBQ2pCLEdBQU0sQ0FBQyxPQUFRLENBQUMsRUFDaEIsR0FBTSxDQUFDLE1BQU8sQ0FBQyxFQUNmLEdBQU0sQ0FBQyxNQUFPLEVBQUUsRUFDaEIsR0FBTSxDQUFDLFdBQVksRUFBRSxFQUNyQixHQUFNLENBQUMsU0FBVSxFQUFFLEVBQ25CLEdBQU0sQ0FBQyxPQUFRLEVBQUUsRUFDakIsR0FBTSxDQUFDLE9BQVEsRUFBRSxFQUNqQixJQUFNLENBQUMsSUFBSyxDQUFDLENBQ2YsRUFDS0MsRUFBVyxDQUNaLEdBQU0sR0FBTSxHQUFNLEdBQU0sR0FBTSxHQUFNLEdBQU0sR0FDMUMsR0FBSyxJQUFNLElBQU0sSUFBTSxJQUFNLElBQU0sSUFBSyxLQUMxQyxLQUFNLEtBQU8sSUFBTSxJQUFPLEdBQU0sR0FBTSxHQUFNLEdBQzNDLElBQU8sR0FBTSxHQUFNLEdBQU0sR0FBTSxHQUFNLEdBQU0sRUFDOUMsRUFFQyxTQUFTSCxFQUFnQjF1QyxFQUFNMXlELEVBQUcsQ0FDakN3aEUsR0FBVTlPLEVBQU0sQ0FBQyxFQUVqQixRQURJc0QsRUFBTSxDQUFFLEVBQUV3ckMsRUFBTyxFQUFHdmdDLEVBQUksR0FBSU4sRUFBSSxHQUFJOGdDLEVBQU8sR0FBSUMsRUFBTyxHQUNwRGh2QyxFQUFLLEVBQUlBLEVBQUssUUFBUSxDQUMzQixJQUFJZ0osR0FBS2hKLEVBQUtBLEVBQUssR0FBRyxFQUN0QixPQUFPZ0osR0FBRSxDQUNSLElBQUssR0FBTTFGLEVBQUksS0FBS3RELEVBQUssV0FBVyxFQUFHLEdBQUcsQ0FBQyxFQUFHLE1BQzlDLElBQUssR0FDSmlPLEVBQUkwZ0MsRUFBYXJoRyxFQUFFLENBQUMsRUFBRSxFQUFHMHlELEVBQUssV0FBVyxDQUFDLEVBQUcsRUFBSSxFQUNqRHVPLEVBQUlvZ0MsRUFBYXJoRyxFQUFFLENBQUMsRUFBRSxFQUFHMHlELEVBQUssV0FBVyxDQUFDLEVBQUcsRUFBSyxFQUNsRHNELEVBQUksS0FBSzJLLEVBQUlNLENBQUMsRUFDYixNQUNGLElBQUssR0FBTSxDQUNWLElBQUkzbEQsR0FBSStsRixFQUFhcmhHLEVBQUUsQ0FBQyxFQUFFLEVBQUcweUQsRUFBSyxXQUFXLENBQUMsRUFBRyxFQUFJLEVBQ2pEdnpELEVBQUlraUcsRUFBYXJoRyxFQUFFLENBQUMsRUFBRSxFQUFHMHlELEVBQUssV0FBVyxDQUFDLEVBQUcsRUFBSyxFQUN0RGlPLEVBQUkwZ0MsRUFBYXJoRyxFQUFFLENBQUMsRUFBRSxFQUFHMHlELEVBQUssV0FBVyxDQUFDLEVBQUcsRUFBSSxFQUNqRHVPLEVBQUlvZ0MsRUFBYXJoRyxFQUFFLENBQUMsRUFBRSxFQUFHMHlELEVBQUssV0FBVyxDQUFDLEVBQUcsRUFBSyxFQUNsRHNELEVBQUksS0FBSzE2QyxHQUFJbmMsRUFBSSxJQUFNd2hFLEVBQUlNLENBQUMsQ0FDakMsQ0FBTSxNQUNGLElBQUssR0FDSixHQUFHdk8sRUFBSyxFQUFJQSxFQUFLLE9BQVEsQ0FBRSxRQUFRLE1BQU0sMkJBQTJCLEVBQUcsTUFBUyxDQUNoRixNQUNELElBQUssR0FBTXNELEVBQUksS0FBSyxJQUFNQSxFQUFJLElBQUssRUFBRyxHQUFHLEVBQUcsTUFDNUMsSUFBSyxHQUFNQSxFQUFJLEtBQUt0RCxFQUFLLFdBQVcsQ0FBQyxDQUFDLEVBQUcsTUFDekMsSUFBSyxHQUFNLENBRUUsUUFBUml2QyxHQUFJLEdBQVdqbUMsR0FBS2hKLEVBQUtBLEVBQUssR0FBRyxHQUFJaXZDLElBQUssT0FBTyxhQUFham1DLEVBQUUsRUFDcEUxRixFQUFJLEtBQUssSUFBTTJyQyxHQUFFLFFBQVEsS0FBTSxJQUFJLEVBQUksR0FBRyxDQUMvQyxDQUFNLE1BRUYsSUFBSyxHQUFNM3JDLEVBQUksS0FBSyxJQUFNQSxFQUFJLElBQUcsQ0FBRSxFQUFHLE1BQ3RDLElBQUssSUFBTUEsRUFBSSxLQUFLLElBQU1BLEVBQUksSUFBRyxDQUFFLEVBQUcsTUFDdEMsSUFBSyxJQUFNQSxFQUFJLEtBQUssT0FBU0EsRUFBSSxJQUFLLEVBQUcsR0FBRyxFQUFHLE1BRS9DLElBQUssSUFBTSxJQUFLLElBQ2YwckMsRUFBTzFyQyxFQUFJLElBQUssRUFBRXlyQyxFQUFPenJDLEVBQUksTUFDN0JBLEVBQUksS0FBSyxDQUFDLE1BQU8sSUFBSSxFQUFFMEYsR0FBSyxFQUFJLEVBQUksSUFBTStsQyxFQUFPLElBQU1DLEVBQU8sR0FBRyxFQUNoRSxNQUVGLFFBQ0MsR0FBR2htQyxHQUFLLElBQVE2bEMsRUFBUzdsQyxFQUFFLEVBQzFCZ21DLEVBQU8xckMsRUFBSSxJQUFLLEVBQUV5ckMsRUFBT3pyQyxFQUFJLE1BQzdCQSxFQUFJLEtBQUt5ckMsRUFBT0YsRUFBUzdsQyxFQUFFLEVBQUlnbUMsQ0FBSSxVQUMxQkosRUFBUTVsQyxFQUFFLEVBQUcsQ0FHdEIsR0FGQThsQyxFQUFPRixFQUFRNWxDLEVBQUUsRUFBRSxDQUFDLEVBQ2pCOGxDLEdBQVEsS0FBSUEsRUFBTzl1QyxFQUFLQSxFQUFLLEdBQUcsR0FDaEM4dUMsRUFBT3hyQyxFQUFJLE9BQVEsQ0FBRSxRQUFRLE1BQU0sMkJBQTZCMEYsR0FBRyxTQUFTLEVBQUUsRUFBSSxLQUFPMUYsRUFBSSxLQUFLLEdBQUcsRUFBSSxHQUFHLEVBQUcsTUFBUyxDQUMzSCxJQUFJaC9ELEdBQU9nL0QsRUFBSSxNQUFNLENBQUN3ckMsQ0FBSSxFQUMxQnhyQyxFQUFJLFFBQVV3ckMsRUFDZHhyQyxFQUFJLEtBQUtzckMsRUFBUTVsQyxFQUFFLEVBQUUsQ0FBQyxFQUFJLElBQU0xa0UsR0FBSyxLQUFLLEdBQUcsRUFBSSxHQUFHLENBQ3BELEtBQ0ksUUFBRzBrRSxJQUFNLEVBQWEsUUFBUSxNQUFNLHNCQUF3QkEsR0FBRyxTQUFTLEVBQUUsQ0FBQyxFQUN4RUEsSUFBTSxHQUFhLFFBQVEsTUFBTSxzQkFBd0JBLEdBQUcsU0FBUyxFQUFFLENBQUMsRUFDeEVBLElBQU0sR0FBYSxRQUFRLE1BQU0sc0JBQXdCQSxHQUFHLFNBQVMsRUFBRSxDQUFDLEVBQ3hFQSxJQUFNLElBQWEsUUFBUSxNQUFNLG1DQUFxQ0EsR0FBRyxTQUFTLEVBQUUsQ0FBQyxFQUVqRixRQUFRLE1BQU0sMkJBQTZCQSxHQUFHLFNBQVMsRUFBRSxDQUFDLENBQ3ZFLENBQ0QsQ0FDRTFGLEVBQUksUUFBVSxFQUFHaDJELEVBQUUsQ0FBQyxFQUFFLEVBQUksR0FBS2cyRCxFQUFJLENBQUMsRUFDbEMsUUFBUSxNQUFNLDBCQUE0QkEsRUFBSSxLQUFLLEdBQUcsRUFBSSxHQUFHLENBQ2xFLENBR0QsU0FBUzRyQyxFQUFhbHZDLEVBQW9CLENBQ3pDLElBQUkxeUQsRUFBSSxDQUFDLENBQUMsRUFBRSxFQUFFLEVBQUUsQ0FBQyxFQUFHLENBQUMsRUFBRSxJQUFJLEVBQUUsQ0FBQyxFQUFHLENBQUMsRUFDbEMsT0FBQUEsRUFBRSxDQUFDLEVBQUUsRUFBSTB5RCxFQUFLLFdBQVcsQ0FBQyxFQUFHMXlELEVBQUUsQ0FBQyxFQUFJMHlELEVBQUtBLEVBQUssR0FBRyxFQUFHMXlELEVBQUUsQ0FBQyxFQUFFLEVBQUkweUQsRUFBS0EsRUFBSyxHQUFHLEVBQ25FMXlELENBQ1AsQ0FFRCxTQUFTNmhHLEVBQWVudkMsRUFBTXh1QixFQUFRLENBQ3JDLElBQUlsa0MsRUFBSTRoRyxFQUFhbHZDLENBQVksRUFDakMsT0FBQTF5RCxFQUFFLENBQUMsRUFBRSxFQUFJLElBQ1RBLEVBQUUsQ0FBQyxFQUFFLEVBQUkweUQsRUFBSyxXQUFXeHVCLEVBQVMsRUFBRyxNQUFNLEVBQ3BDbGtDLENBQ1AsQ0FDRCxTQUFTNGdHLEVBQWUzL0IsRUFBR04sRUFBRysvQixFQUFPcmhHLEVBQUcsQ0FFdkMsSUFBSVcsRUFBSXNrRSxHQUFRLEVBQUlqbEUsRUFBRSxNQUFNLEVBQzVCVyxFQUFFLFlBQVksRUFBR2loRSxDQUFDLEVBQ2xCamhFLEVBQUUsWUFBWSxFQUFHMGdHLENBQUssRUFDdEIxZ0csRUFBRSxZQUFZLEVBQUcyZ0UsQ0FBQyxFQUNsQjNnRSxFQUFFLFlBQVksRUFBRyxFQUFJLEVBQ3JCLFFBQVFoRSxFQUFJLEVBQUdBLEVBQUlxRCxFQUFFLE9BQVEsRUFBRXJELEVBQUcsQ0FDakMsSUFBSTAvRCxFQUFLcjhELEVBQUUsV0FBV3JELENBQUMsRUFDdkJnRSxFQUFFLFlBQVksRUFBRzA3RCxHQUFNLElBQU8sR0FBT0EsQ0FBRSxDQUN2QyxDQUNELE9BQUExN0QsRUFBRSxZQUFZLEVBQUcsQ0FBQyxFQUNYQSxDQUNQLENBRUQsU0FBUzhoRyxFQUFnQnB2QyxFQUFNeHVCLEVBQVEsQ0FDdEMsSUFBSWxrQyxFQUFJNGhHLEVBQWFsdkMsQ0FBWSxFQUNqQzF5RCxFQUFFLENBQUMsRUFBRSxFQUFJMHlELEVBQUssV0FBVyxDQUFDLEVBQzFCLElBQUk1MkMsRUFBSTliLEVBQUUsQ0FBQyxFQUFFLEdBQUssRUFDbEIsR0FBR0EsRUFBRSxDQUFDLEVBQUUsRUFBSSxFQUNYLE9BQU84YixFQUFJLEVBQUksQ0FDZCxJQUFLLEdBQUdBLEdBQUtBLEdBQUssR0FBSyxJQUFNLE1BQzdCLElBQUssR0FBR0EsR0FBS0EsR0FBSyxHQUFLLElBQUssTUFDNUIsSUFBSyxHQUFHQSxHQUFLQSxHQUFLLEdBQUssR0FBSSxNQUMzQixJQUFLLEdBQUdBLEdBQUtBLEdBQUssR0FBSyxJQUFLLE1BQzVCLElBQUssR0FBR0EsR0FBS0EsR0FBSyxHQUFLLElBQU0sTUFDN0IsSUFBSyxHQUFHQSxHQUFLQSxHQUFLLEdBQUssSUFBTyxNQUM5QixJQUFLLEdBQUdBLEdBQUtBLEdBQUssR0FBSyxHQUFJLE1BQzNCLElBQUssR0FBR0EsR0FBS0EsR0FBSyxHQUFLLEdBQUksS0FDM0IsQ0FFRixPQUFBOWIsRUFBRSxDQUFDLEVBQUUsRUFBSThiLEVBQ0Y5YixDQUNQLENBRUQsU0FBUytoRyxFQUFnQnJ2QyxFQUFNeHVCLEVBQVEsQ0FDdEMsSUFBSWxrQyxFQUFJNGhHLEVBQWFsdkMsQ0FBWSxFQUM3QnN2QyxFQUFLdHZDLEVBQUssV0FBVyxDQUFDLEVBQ3RCdXZDLEVBQUt2dkMsRUFBSyxXQUFXLENBQUMsRUFDdEIxekQsRUFBSTB6RCxFQUFLLFdBQVcsQ0FBQyxFQUN6QixHQUFHMXpELEdBQUssTUFDUCxPQUFHZ2pHLElBQU8sR0FBS0MsSUFBTyxZQUFjamlHLEVBQUUsQ0FBQyxFQUFFLEVBQUksSUFBS0EsRUFBRSxDQUFDLEVBQUUsRUFBSSxJQUNuRGdpRyxJQUFPLEdBQUtDLElBQU8sWUFBY2ppRyxFQUFFLENBQUMsRUFBRSxFQUFJLElBQUtBLEVBQUUsQ0FBQyxFQUFFLEVBQUksSUFDM0RBLEVBQUUsQ0FBQyxFQUFFLEVBQUksRUFDUEEsRUFFUixJQUFJWCxFQUFJTCxFQUFJLE1BQVEsT0FBQUEsR0FBS0EsRUFBRSxPQUFVLE1BQ3JDZ0IsRUFBRSxDQUFDLEVBQUUsR0FBSyxFQUFJWCxFQUFFLElBQU00aUcsRUFBSyxLQUFLLElBQUksRUFBR2pqRyxFQUFFLEVBQUUsRUFBSWdqRyxFQUFLLEtBQUssSUFBSSxFQUFHaGpHLENBQUMsR0FDMURnQixDQUNQLENBQ0QsU0FBUzJnRyxFQUFnQjEvQixFQUFHTixFQUFHKy9CLEVBQU81a0YsRUFBRyxDQUN4QyxJQUFJOWIsRUFBSXNrRSxHQUFRLEVBQUUsRUFJbEIsR0FIQXRrRSxFQUFFLFlBQVksRUFBR2loRSxDQUFDLEVBQ2xCamhFLEVBQUUsWUFBWSxFQUFHMGdHLENBQUssRUFDdEIxZ0csRUFBRSxZQUFZLEVBQUcyZ0UsQ0FBQyxFQUNmN2tELEdBQUssRUFDUCxPQUFBOWIsRUFBRSxZQUFZLEVBQUcsQ0FBQyxFQUNsQkEsRUFBRSxZQUFZLEVBQUcsQ0FBQyxFQUNsQkEsRUFBRSxZQUFZLEVBQUcsS0FBTSxFQUNoQkEsRUFFUixJQUFJWCxFQUFJLEVBQUdMLEVBQUksRUFBR2dqRyxFQUFLLEVBQUdDLEdBQUssRUFDL0IsT0FBR25tRixFQUFJLElBQUt6YyxFQUFJLEVBQUd5YyxFQUFJLENBQUNBLEdBQ3hCOWMsRUFBSSxLQUFLLEtBQUs4YyxDQUFDLEVBQUksRUFDbkJBLEdBQUssS0FBSyxJQUFJLEVBQUc5YyxFQUFFLEVBQUUsRUFDckJpakcsR0FBTW5tRixJQUFLLEVBQ1BtbUYsR0FBRyxhQUFvQm5tRixHQUFHLEVBQUcsRUFBRTljLEVBQUdpakcsR0FBS25tRixJQUFNLEdBQ2pEQSxHQUFLbW1GLEdBQ0xBLElBQU0sV0FDTkEsTUFBUSxFQUNSbm1GLEdBQUssS0FBSyxJQUFJLEVBQUcsRUFBRSxFQUNuQmttRixFQUFLbG1GLElBQUksRUFDVDliLEVBQUUsWUFBWSxFQUFHZ2lHLENBQUUsRUFDbkJoaUcsRUFBRSxZQUFZLEVBQUdpaUcsRUFBRSxFQUNuQmpqRyxHQUFLLE9BQVVLLEVBQUksTUFBUyxHQUM1QlcsRUFBRSxZQUFZLEVBQUdoQixDQUFDLEVBQ1hnQixDQUNQLENBRUQsU0FBU2tpRyxFQUFpQnh2QyxFQUFNeHVCLEVBQVEsQ0FDdkMsSUFBSWxrQyxFQUFJK2hHLEVBQWdCcnZDLENBQVEsRUFDaEMsT0FBQUEsRUFBSyxHQUFLeHVCLEVBQVMsR0FDWmxrQyxDQUNQLENBRUQsU0FBU21pRyxFQUFnQnp2QyxFQUFNeHVCLEVBQVEsQ0FDdEMsSUFBSWxrQyxFQUFJNGhHLEVBQWFsdkMsQ0FBWSxFQUM3QnN2QyxFQUFLdHZDLEVBQUssV0FBVyxDQUFDLEVBQzFCLE9BQUExeUQsRUFBRSxDQUFDLEVBQUUsRUFBSWdpRyxHQUFNLEVBQ1JoaUcsQ0FDUCxDQUVELFNBQVNvaUcsRUFBZ0IxdkMsRUFBTXh1QixFQUFRLENBQ3RDLElBQUlsa0MsRUFBSTRoRyxFQUFhbHZDLENBQVksRUFDN0JzdkMsRUFBS3R2QyxFQUFLLFdBQVcsRUFBRSxHQUFHLEVBQzlCLE9BQUExeUQsRUFBRSxDQUFDLEVBQUUsRUFBSWdpRyxFQUNGaGlHLENBQ1AsQ0FFRCxTQUFTcWlHLEdBQWlCM3ZDLEVBQU14dUIsRUFBUSxDQUN2QyxJQUFJbGtDLEVBQUlvaUcsRUFBZ0IxdkMsQ0FBUSxFQUNoQyxPQUFBQSxFQUFLLEdBQUt4dUIsRUFBUyxHQUNabGtDLENBQ1AsQ0FFRCxTQUFTc2lHLEdBQWtCNXZDLEVBQU14dUIsRUFBUSxDQUN4QyxPQUFPd3VCLEVBQUtBLEVBQUssRUFBSXh1QixFQUFTLENBQUMsR0FBSyxFQUFJd3VCLEVBQUssV0FBV3h1QixFQUFRLE1BQU0sRUFBSSxFQUMxRSxDQUVELFNBQVNxK0QsR0FBa0I3dkMsRUFBTXh1QixFQUFRLENBQ3hDLElBQUlyTSxFQUFNNjZCLEVBQUtBLEVBQUssR0FBRyxFQUNwQjc2QixFQUFNcU0sRUFBUyxJQUFHck0sRUFBTXFNLEVBQVMsR0FDeEIsUUFBUmxrQyxFQUFJLEdBQVVBLEVBQUUsT0FBUzYzQixHQUFLNzNCLEdBQUssT0FBTyxhQUFhMHlELEVBQUtBLEVBQUssR0FBRyxDQUFDLEVBQ3pFLE9BQU8xeUQsQ0FDUCxDQUVELFNBQVN3aUcsR0FBa0I5dkMsRUFBTXh1QixFQUFRaHVDLEVBQU0sQ0FDOUMsR0FBRyxHQUFDQSxFQUFLLE1BQVFndUMsRUFBUyxJQUMxQixLQUFJcjRCLEVBQUs2bUQsRUFBSyxXQUFXLENBQUMsRUFDMUJBLEVBQUssR0FBSyxHQUNWQSxFQUFLLEdBQUssRUFDVkEsRUFBSyxHQUFLLEVBQ1YsSUFBSW9ULEVBQUtwVCxFQUFLLFdBQVd4dUIsRUFBUyxHQUFJLE1BQU0sRUFDNUMsTUFBTyxDQUFDcjRCLEVBQUlpNkQsQ0FBRSxFQUNkLENBRUQsU0FBUzI4QixHQUFjL3ZDLEVBQU14dUIsRUFBUSxDQUVwQyxRQURJbGtDLEVBQUksQ0FBQSxFQUFJMmhFLEVBQU1qUCxFQUFLLEVBQUl4dUIsRUFDckJ3dUIsRUFBSyxFQUFJaVAsR0FBSyxDQUNuQixJQUFJaGxELEVBQUsrMUMsRUFBSyxXQUFXLENBQUMsRUFDMUIsR0FBRy8xQyxHQUFNLEtBQVEsQ0FHaEIsSUFGQTNjLEVBQUUyYyxDQUFFLEVBQUksQ0FBQyxFQUFHLEVBQUUsRUFDZDNjLEVBQUUyYyxDQUFFLEVBQUUsQ0FBQyxFQUFJKzFDLEVBQUssV0FBVyxDQUFDLEVBQ3RCQSxFQUFLQSxFQUFLLENBQUMsR0FBSzF5RCxFQUFFMmMsQ0FBRSxFQUFFLENBQUMsR0FBSyxPQUFPLGFBQWErMUMsRUFBS0EsRUFBSyxDQUFDLENBQUMsRUFBR0EsRUFBSyxJQUFPQSxFQUFLLEdBQ3RGLENBRUQsQ0FDRCxPQUFPMXlELENBQ1AsQ0FDRCxTQUFTeWdHLEVBQXdCcnFHLEVBQU1zcUcsRUFBTyxDQUM3QyxJQUFJMXFDLEVBQU1zTyxHQUFRLEVBQUlsdUUsRUFBSyxNQUFNLEVBQ2pDNC9ELEVBQUksWUFBWSxFQUFHLElBQU0sRUFDekJBLEVBQUksWUFBWSxFQUFHMHFDLENBQUssRUFDeEIsUUFBUTFrRyxFQUFJLEVBQUdBLEVBQUk1RixFQUFLLE9BQVEsRUFBRTRGLEVBQUcsQ0FDcEMsSUFBSTAvRCxFQUFLdGxFLEVBQUssV0FBVzRGLENBQUMsRUFDMUJnNkQsRUFBSUEsRUFBSSxHQUFHLEVBQUkwRixFQUFLLElBQU8sR0FBT0EsQ0FDbEMsQ0FDRCxPQUFBMUYsRUFBSUEsRUFBSSxHQUFHLEVBQUksRUFDUkEsQ0FDUCxDQUVELElBQUlrcEMsR0FBVSxDQUNOLEVBQWUsQ0FBRSxFQUFFLE1BQU8sRUFBRS9WLEVBQWEsRUFDekMsRUFBZSxDQUFFLEVBQUUsS0FBTyxFQUMxQixFQUFlLENBQUUsRUFBRSxVQUFZLEVBQy9CLEVBQWUsQ0FBRSxFQUFFLFdBQWEsRUFDaEMsRUFBZSxDQUFFLEVBQUUsT0FBUyxFQUM1QixFQUFlLENBQUUsRUFBRSxNQUFRLEVBQzNCLEVBQWUsQ0FBRSxFQUFFLFFBQVMsRUFBRTJYLENBQWEsRUFDM0MsRUFBZSxDQUFFLEVBQUUsU0FBVyxFQUM5QixFQUFlLENBQUUsRUFBRSxPQUFTLEVBQzVCLEVBQWUsQ0FBRSxFQUFFLFFBQVUsRUFDN0IsR0FBZSxDQUFFLEVBQUUsT0FBUyxFQUM1QixHQUFlLENBQUUsRUFBRSxNQUFRLEVBQzNCLEdBQWUsQ0FBRSxFQUFFLE9BQVMsRUFDNUIsR0FBZSxDQUFFLEVBQUUsVUFBVyxFQUFFRyxDQUFlLEVBQy9DLEdBQWUsQ0FBRSxFQUFFLFNBQVUsRUFBRUMsQ0FBYyxFQUM3QyxHQUFlLENBQUUsRUFBRSxRQUFTLEVBQUVGLENBQWEsRUFDM0MsR0FBZSxDQUFFLEVBQUUsVUFBVyxFQUFFRyxDQUFlLEVBQy9DLEdBQWUsQ0FBRSxFQUFFLE9BQVMsRUFDNUIsR0FBZSxDQUFFLEVBQUUsUUFBVSxFQUM3QixHQUFlLENBQUUsRUFBRSxRQUFVLEVBQzdCLEdBQWUsQ0FBRSxFQUFFLFFBQVUsRUFDN0IsR0FBZSxDQUFFLEVBQUUsUUFBVSxFQUM3QixHQUFlLENBQUUsRUFBRSxTQUFXLEVBQzlCLEdBQWUsQ0FBRSxFQUFFLFFBQVUsRUFDN0IsR0FBZSxDQUFFLEVBQUUsU0FBVyxFQUM5QixHQUFlLENBQUUsRUFBRSxRQUFVLEVBQzdCLEdBQWUsQ0FBRSxFQUFFLFFBQVUsRUFDN0IsR0FBZSxDQUFFLEVBQUUsUUFBVSxFQUM3QixHQUFlLENBQUUsRUFBRSxPQUFTLEVBQzVCLEdBQWUsQ0FBRSxFQUFFLFNBQVcsRUFDOUIsR0FBZSxDQUFFLEVBQUUsVUFBWSxFQUMvQixHQUFlLENBQUUsRUFBRSxRQUFVLEVBQzdCLEdBQWUsQ0FBRSxFQUFFLFNBQVcsRUFDOUIsR0FBZSxDQUFFLEVBQUUsT0FBUyxFQUM1QixHQUFlLENBQUUsRUFBRSxRQUFVLEVBQzdCLEdBQWUsQ0FBRSxFQUFFLFdBQWEsRUFDaEMsR0FBZSxDQUFFLEVBQUUsYUFBZSxFQUNsQyxHQUFlLENBQUUsRUFBRSxXQUFhLEVBQ2hDLEdBQWUsQ0FBRSxFQUFFLFFBQVUsRUFDN0IsR0FBZSxDQUFFLEVBQUUsU0FBVSxFQUFFSCxDQUFhLEVBQzVDLEdBQWUsQ0FBRSxFQUFFLFVBQVksRUFDL0IsR0FBZSxDQUFFLEVBQUUsUUFBVSxFQUM3QixHQUFlLENBQUUsRUFBRSxPQUFTLEVBQzVCLEdBQWUsQ0FBRSxFQUFFLFdBQWEsRUFDaEMsR0FBZSxDQUFFLEVBQUUsT0FBUyxFQUM1QixHQUFlLENBQUUsRUFBRSxXQUFhLEVBQ2hDLEdBQWUsQ0FBRSxFQUFFLFFBQVUsRUFDN0IsR0FBZSxDQUFFLEVBQUUsV0FBYSxFQUNoQyxHQUFlLENBQUUsRUFBRSxNQUFRLEVBQzNCLEdBQWUsQ0FBRSxFQUFFLFVBQVksRUFDL0IsR0FBZSxDQUFFLEVBQUUsUUFBVSxFQUM3QixHQUFlLENBQUUsRUFBRSxRQUFVLEVBQzdCLEdBQWUsQ0FBRSxFQUFFLE9BQVMsRUFDNUIsR0FBZSxDQUFFLEVBQUUsT0FBUyxFQUM1QixHQUFlLENBQUUsRUFBRSxPQUFTLEVBQzVCLEdBQWUsQ0FBRSxFQUFFLFFBQVUsRUFDN0IsR0FBZSxDQUFFLEVBQUUsT0FBUyxFQUM1QixJQUFlLENBQUUsRUFBRSxXQUFhLEVBQ2hDLElBQWUsQ0FBRSxFQUFFLFdBQWEsRUFDaEMsSUFBZSxDQUFFLEVBQUUsU0FBVyxFQUM5QixJQUFlLENBQUUsRUFBRSxXQUFhLEVBQ2hDLElBQWUsQ0FBRSxFQUFFLGNBQWUsRUFBRXNCLEVBQW1CLEVBQ3ZELElBQWUsQ0FBRSxFQUFFLGNBQWUsRUFBRUMsRUFBbUIsRUFDdkQsTUFBZSxDQUFFLEVBQUUsRUFBSSxDQUNoQyxFQUVLM0MsRUFBVSxDQUNOLEVBQWUsQ0FBRSxFQUFFLEtBQU8sRUFDMUIsRUFBZSxDQUFFLEVBQUUsS0FBTyxFQUMxQixFQUFlLENBQUUsRUFBRSxVQUFZLEVBQy9CLEVBQWUsQ0FBRSxFQUFFLFNBQVcsRUFDOUIsRUFBZSxDQUFFLEVBQUUsV0FBYSxFQUNoQyxFQUFlLENBQUUsRUFBRSxjQUFnQixFQUNuQyxFQUFlLENBQUUsRUFBRSxhQUFlLEVBQ2xDLEVBQWUsQ0FBRSxFQUFFLGFBQWUsRUFDbEMsRUFBZSxDQUFFLEVBQUUsY0FBZ0IsRUFDbkMsRUFBZSxDQUFFLEVBQUUsV0FBYSxFQUNoQyxHQUFlLENBQUUsRUFBRSxhQUFlLEVBQ2xDLEdBQWUsQ0FBRSxFQUFFLFdBQWEsRUFDaEMsR0FBZSxDQUFFLEVBQUUsWUFBYyxFQUNqQyxHQUFlLENBQUUsRUFBRSxVQUFZLEVBQy9CLEdBQWUsQ0FBRSxFQUFFLGNBQWdCLEVBQ25DLEdBQWUsQ0FBRSxFQUFFLFdBQWEsRUFDaEMsR0FBZSxDQUFFLEVBQUUsYUFBZSxFQUNsQyxHQUFlLENBQUUsRUFBRSxXQUFhLEVBQ2hDLEdBQWUsQ0FBRSxFQUFFLGFBQWUsRUFDbEMsR0FBZSxDQUFFLEVBQUUsSUFBTSxFQUN6QixHQUFlLENBQUUsRUFBRSxTQUFXLEVBQzlCLEdBQWUsQ0FBRSxFQUFFLFFBQVUsRUFDN0IsR0FBZSxDQUFFLEVBQUUsVUFBVyxFQUFFaUMsQ0FBYyxFQUM5QyxHQUFlLENBQUUsRUFBRSxXQUFZLEVBQUVFLENBQWlCLEVBQ2xELEdBQWUsQ0FBRSxFQUFFLFdBQVksRUFBRUQsQ0FBaUIsRUFDbEQsR0FBZSxDQUFFLEVBQUUsWUFBYSxFQUFFSSxDQUFnQixFQUNsRCxHQUFlLENBQUUsRUFBRSxXQUFhLEVBQ2hDLEdBQWUsQ0FBRSxFQUFFLFVBQVcsRUFBRU8sRUFBZSxFQUMvQyxHQUFlLENBQUUsRUFBRSxhQUFlLEVBQ2xDLEdBQWUsQ0FBRSxFQUFFLGFBQWUsRUFDbEMsR0FBZSxDQUFFLEVBQUUsYUFBZSxFQUNsQyxHQUFlLENBQUUsRUFBRSxLQUFPLEVBQzFCLEdBQWUsQ0FBRSxFQUFFLFNBQVcsRUFDOUIsR0FBZSxDQUFFLEVBQUUsT0FBUyxFQUM1QixHQUFlLENBQUUsRUFBRSxhQUFlLEVBQ2xDLEdBQWUsQ0FBRSxFQUFFLElBQU0sRUFDekIsR0FBZSxDQUFFLEVBQUUsV0FBWSxFQUFFTixDQUFpQixFQUNsRCxHQUFlLENBQUUsRUFBRSxJQUFNLEVBQ3pCLEdBQWUsQ0FBRSxFQUFFLFdBQVksRUFBRUMsQ0FBaUIsRUFDbEQsR0FBZSxDQUFFLEVBQUUsWUFBYSxFQUFFQyxFQUFrQixFQUNwRCxJQUFlLENBQUUsRUFBRSxJQUFNLEVBQ3pCLElBQWUsQ0FBRSxFQUFFLElBQU0sRUFDekIsSUFBZSxDQUFFLEVBQUUsSUFBTSxFQUN6QixJQUFlLENBQUUsRUFBRSxJQUFNLEVBQ3pCLElBQWUsQ0FBRSxFQUFFLElBQU0sRUFDekIsSUFBZSxDQUFFLEVBQUUsSUFBTSxFQUN6QixJQUFlLENBQUUsRUFBRSxJQUFNLEVBQ3pCLElBQWUsQ0FBRSxFQUFFLElBQU0sRUFDekIsSUFBZSxDQUFFLEVBQUUsSUFBTSxFQUN6QixJQUFlLENBQUUsRUFBRSxJQUFNLEVBQ3pCLElBQWUsQ0FBRSxFQUFFLElBQU0sRUFDekIsSUFBZSxDQUFFLEVBQUUsSUFBTSxFQUN6QixJQUFlLENBQUUsRUFBRSxJQUFNLEVBQ3pCLElBQWUsQ0FBRSxFQUFFLElBQU0sRUFDekIsSUFBZSxDQUFFLEVBQUUsSUFBTSxFQUN6QixJQUFlLENBQUUsRUFBRSxJQUFNLEVBQ3pCLElBQWUsQ0FBRSxFQUFFLElBQU0sRUFDekIsSUFBZSxDQUFFLEVBQUUsSUFBTSxFQUN6QixJQUFlLENBQUUsRUFBRSxJQUFNLEVBQ3pCLElBQWUsQ0FBRSxFQUFFLElBQU0sRUFDekIsSUFBZSxDQUFFLEVBQUUsSUFBTSxFQUN6QixJQUFlLENBQUUsRUFBRSxjQUFlLEVBQUVDLEVBQW1CLEVBQ3ZELElBQWUsQ0FBRSxFQUFFLElBQU0sRUFDekIsSUFBZSxDQUFFLEVBQUUsSUFBTSxFQUN6QixJQUFlLENBQUUsRUFBRSxJQUFNLEVBQ3pCLElBQWUsQ0FBRSxFQUFFLElBQU0sRUFDekIsSUFBZSxDQUFFLEVBQUUsSUFBTSxFQUN6QixJQUFlLENBQUUsRUFBRSxJQUFNLEVBQ3pCLElBQWUsQ0FBRSxFQUFFLElBQU0sRUFDekIsSUFBZSxDQUFFLEVBQUUsSUFBTSxFQUN6QixJQUFlLENBQUUsRUFBRSxJQUFNLEVBQ3pCLElBQWUsQ0FBRSxFQUFFLElBQU0sRUFDekIsSUFBZSxDQUFFLEVBQUUsSUFBTSxFQUN6QixJQUFlLENBQUUsRUFBRSxJQUFNLEVBQ3pCLElBQWUsQ0FBRSxFQUFFLElBQU0sRUFDekIsSUFBZSxDQUFFLEVBQUUsSUFBTSxFQUN6QixJQUFlLENBQUUsRUFBRSxJQUFNLEVBQ3pCLElBQWUsQ0FBRSxFQUFFLElBQU0sRUFDekIsSUFBZSxDQUFFLEVBQUUsSUFBTSxFQUN6QixJQUFlLENBQUUsRUFBRSxJQUFNLEVBQ3pCLElBQWUsQ0FBRSxFQUFFLElBQU0sRUFDekIsSUFBZSxDQUFFLEVBQUUsSUFBTSxFQUN6QixJQUFlLENBQUUsRUFBRSxJQUFNLEVBQ3pCLElBQWUsQ0FBRSxFQUFFLElBQU0sRUFDekIsSUFBZSxDQUFFLEVBQUUsSUFBTSxFQUN6QixJQUFlLENBQUUsRUFBRSxJQUFNLEVBQ3pCLElBQWUsQ0FBRSxFQUFFLElBQU0sRUFDekIsSUFBZSxDQUFFLEVBQUUsSUFBTSxFQUN6QixJQUFlLENBQUUsRUFBRSxJQUFNLEVBQ3pCLElBQWUsQ0FBRSxFQUFFLElBQU0sRUFDekIsSUFBZSxDQUFFLEVBQUUsSUFBTSxFQUN6QixJQUFlLENBQUUsRUFBRSxJQUFNLEVBQ3pCLElBQWUsQ0FBRSxFQUFFLElBQU0sRUFDekIsSUFBZSxDQUFFLEVBQUUsSUFBTSxFQUN6QixJQUFlLENBQUUsRUFBRSxJQUFNLEVBQ3pCLElBQWUsQ0FBRSxFQUFFLElBQU0sRUFDekIsSUFBZSxDQUFFLEVBQUUsSUFBTSxFQUN6QixJQUFlLENBQUUsRUFBRSxJQUFNLEVBQ3pCLElBQWUsQ0FBRSxFQUFFLElBQU0sRUFDekIsSUFBZSxDQUFFLEVBQUUsSUFBTSxFQUN6QixJQUFlLENBQUUsRUFBRSxJQUFNLEVBQ3pCLElBQWUsQ0FBRSxF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RCxJQUFJQyxFQUFXLENBQUMsSUFBTSxJQUFNLElBQU0sSUFBTSxJQUFNLElBQU0sSUFBTSxJQUFNLEVBQU0sSUFBTSxHQUFNLEVBQU0sSUFBTSxHQUFNLENBQUksRUFDcEdDLEVBQWMsQ0FBQyxNQUFRLEtBQVEsTUFBUSxNQUFRLEtBQVEsS0FBUSxNQUFRLE1BQVEsS0FBUSxNQUFRLE1BQVEsTUFBUSxNQUFRLE1BQVEsS0FBTSxFQUNySUMsRUFBWSxDQUFDLE1BQVEsTUFBUSxNQUFRLE1BQVEsTUFBUSxNQUFRLE1BQVEsTUFBUSxNQUFRLE1BQVEsTUFBUSxNQUFRLE1BQVEsTUFBUSxNQUFRLE1BQVEsS0FBUSxLQUFRLEtBQVEsTUFBUSxNQUFRLElBQVEsS0FBUSxLQUFRLEtBQVEsTUFBUSxNQUFRLE1BQVEsTUFBUSxNQUFRLE1BQVEsTUFBUSxNQUFRLE1BQVEsTUFBUSxNQUFRLE1BQVEsTUFBUSxNQUFRLE1BQVEsTUFBUSxNQUFRLE1BQVEsTUFBUSxNQUFRLE1BQVEsTUFBUSxNQUFRLE1BQVEsTUFBUSxNQUFRLEtBQVEsS0FBUSxNQUFRLE1BQVEsTUFBUSxNQUFRLE1BQVEsTUFBUSxNQUFRLE1BQVEsTUFBUSxNQUFRLE1BQVEsTUFBUSxLQUFRLEtBQVEsS0FBUSxNQUFRLE1BQVEsTUFBUSxNQUFRLE1BQVEsSUFBUSxLQUFRLEtBQVEsS0FBUSxNQUFRLE1BQVEsTUFBUSxNQUFRLEtBQVEsTUFBUSxNQUFRLE1BQVEsTUFBUSxNQUFRLE1BQVEsTUFBUSxNQUFRLEtBQVEsTUFBUSxNQUFRLE1BQVEsTUFBUSxJQUFRLEtBQVEsS0FBUSxLQUFRLEtBQVEsTUFBUSxNQUFRLEtBQVEsS0FBUSxLQUFNLEVBQ24xQkMsRUFBTSxTQUFTQyxFQUFNLENBQUUsT0FBU0EsRUFBSyxFQUFNQSxFQUFLLEtBQVEsR0FBSyxFQUM3REMsRUFBUyxTQUFTQyxFQUFPQyxFQUFPLENBQUUsT0FBT0osRUFBSUcsRUFBUUMsQ0FBSyxHQUMxREMsRUFBdUIsU0FBU2pCLEVBQVUsQ0FHN0MsUUFGSWtCLEVBQVNSLEVBQVlWLEVBQVMs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Q0FDbEJBLEVBQUVBLEVBQUUsTUFBTSxFQUFRLCtDQUNsQkEsRUFBRUEsRUFBRSxNQUFNLEVBQVEsMkNBQ2xCQSxFQUFFQSxFQUFFLE1BQU0sRUFBUSwyQ0FDbEJBLEVBQUVBLEVBQUUsTUFBTSxFQUFRLDhDQUNsQkEsRUFBRUEsRUFBRSxNQUFNLEVBQVEsMERBQ2xCQSxFQUFFQSxFQUFFLE1BQU0sRUFBUSx3REFDbEJBLEVBQUVBLEVBQUUsTUFBTSxFQUFRLHdEQUNsQkEsRUFBRUEsRUFBRSxNQUFNLEVBQVEsNkNBQ2xCQSxFQUFFQSxFQUFFLE1BQU0sRUFBUSw0Q0FDbEJBLEVBQUVBLEVBQUUsTUFBTSxFQUFRLDZDQUNsQkEsRUFBRUEsRUFBRSxNQUFNLEVBQVEsMkNBQ2xCQSxFQUFFQSxFQUFFLE1BQU0sRUFBUSx1REFDbEJBLEVBQUVBLEVBQUUsTUFBTSxFQUFRLDZDQUNsQkEsRUFBRUEsRUFBRSxNQUFNLEVBQVEsNkNBQ2xCQSxFQUFFQSxFQUFFLE1BQU0sRUFBUSwrQ0FDbEJBLEVBQUVBLEVBQUUsTUFBTSxFQUFRLGtEQUNsQkEsRUFBRUEsRUFBRSxNQUFNLEVBQVEscURBQ2xCQSxFQUFFQSxFQUFFLE1BQU0sRUFBUSxxREFDbEJBLEVBQUVBLEVBQUUsTUFBTSxFQUFRLHNEQUNsQkEsRUFBRUEsRUFBRSxNQUFNLEVBQVEsNkNBQ2xCQSxFQUFFQSxFQUFFLE1BQU0sRUFBTyxpQkFDakJBLEVBQUVBLEVBQUUsTUFBTSxFQUFPLGdCQUNqQkEsRUFBRUEsRUFBRSxNQUFNLEVBQVEsZ0NBQ2xCQSxFQUFFQSxFQUFFLE1BQU0sRUFBUSxzQkFDbEJBLEVBQUVBLEVBQUUsTUFBTSxFQUFRLHNCQUNsQkEsRUFBRUEsRUFBRSxNQUFNLEVBQVEsOENBQ2xCQSxFQUFFQSxFQUFFLE1BQU0sRUFBUSwyQ0FDbEJBLEVBQUVBLEVBQUUsTUFBTSxFQUFRLHdDQUNsQkEsRUFBRUEsRUFBRSxNQUFNLEVBQVEsMENBQ2xCQSxFQUFFQSxFQUFFLE1BQU0sRUFBUSwyQ0FDbEJBLEVBQUVBLEVBQUUsTUFBTSxFQUFRLDJDQUNsQkEsRUFBRUEsRUFBRSxNQUFNLEVBQVEsNENBQ2xCQSxFQUFFQSxFQUFFLE1BQU0sRUFBUSwyQ0FDbEJBLEVBQUVBLEVBQUUsTUFBTSxFQUFRLDRDQUNsQkEsRUFBRUEsRUFBRSxNQUFNLEVBQVEsNENBQ2xCQSxFQUFFQSxFQUFFLE1BQU0sRUFBUSw4Q0FDbEJBLEVBQUVBLEVBQUUsTUFBTSxFQUFRLDJDQUNsQkEsRUFBRUEsRUFBRSxNQUFNLEVBQVEsMkNBQ2xCQSxFQUFFQSxFQUFFLE1BQU0sRUFBUSw4Q0FDbEJBLEVBQUVBLEVBQUUsTUFBTSxFQUFRLDBEQUNsQkEsRUFBRUEsRUFBRSxNQUFNLEVBQVEsd0RBQ2xCQSxFQUFFQSxFQUFFLE1BQU0sRUFBUSx3REFDbEJBLEVBQUVBLEVBQUUsTUFBTSxFQUFRLDZDQUNsQkEsRUFBRUEsRUFBRSxNQUFNLEVBQVEsNENBQ2xCQSxFQUFFQSxFQUFFLE1BQU0sRUFBUSw2Q0FDbEJBLEVBQUVBLEVBQUUsTUFBTSxFQUFRLDJDQUNsQkEsRUFBRUEsRUFBRSxNQUFNLEVBQVEsdURBQ2xCQSxFQUFFQSxFQUFFLE1BQU0sRUFBUSw2Q0FDbEJBLEVBQUVBLEVBQUUsTUFBTSxFQUFRLDZDQUNsQkEsRUFBRUEsRUFBRSxNQUFNLEVBQVEsK0NBQ2xCQSxFQUFFQSxFQUFFLE1BQU0sRUFBUSxrREFDbEJBLEVBQUVBLEVBQUUsTUFBTSxFQUFRLHFEQUNsQkEsRUFBRUEsRUFBRSxNQUFNLEVBQVEsMkNBQ2xCQSxFQUFFQSxFQUFFLE1BQU0sRUFBUSxzREFDbEJBLEVBQUVBLEVBQUUsTUFBTSxFQUFRLDZDQUNsQkEsRUFBRUEsRUFBRSxNQUFNLEVBQU8saUJBQ2pCQSxFQUFFQSxFQUFFLE1BQU0sRUFBTSxrQkFFaEJBLEVBQUVBLEVBQUUsTUFBTSxFQUFNLDhCQUNoQkEsRUFBRUEsRUFBRSxNQUFNLEVBQU8sbUJBQ2pCQSxFQUFFQSxFQUFFLE1BQU0sRUFBUSx3REFDbEJBLEVBQUVBLEVBQUUsTUFBTSxFQUFRLGdDQUNsQkEsRUFBRUEsRUFBRSxNQUFNLEVBQVMsWUFD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Z0JBQ0wsSUFBSyxnQkFDTCxJQUFLLGdCQUNMLElBQUssZUFDTCxJQUFLLFNBQ0wsSUFBSyxjQUNMLElBQUssZ0JBQ0wsSUFBSyxRQUNMLElBQUssUUFDTCxJQUFLLFFBQ0wsSUFBSyxRQUNMLElBQUssVUFDTCxJQUFLLFVBQ0wsSUFBSyxRQUNMLElBQUssTUFDTCxJQUFLLGNBQ0wsSUFBSyxpQkFDTCxJQUFLLFVBQ0wsSUFBSyxhQUNMLElBQUssZUFDTCxJQUFLLGVBQ0wsSUFBSyxhQUNMLElBQUssY0FDTCxJQUFLLGNBQ0wsSUFBSyxrQkFDTCxJQUFLLFlBQ0wsSUFBSyxpQkFDTCxJQUFLLGNBQ0wsSUFBSyxlQUNMLElBQUssZUFDTCxJQUFLLFlBQ0wsSUFBSyxRQUNMLElBQUssWUFDTCxJQUFLLFVBQ0wsSUFBSyxnQkFDTCxJQUFLLFVBQ0wsSUFBSyxhQUNMLElBQUssYUFDTCxJQUFLLGdCQUNMLElBQUssWUFDTCxJQUFLLGFBQ0wsSUFBSyxVQUNMLElBQUssT0FDTCxJQUFLLGNBQ0wsSUFBSyxVQUNMLElBQUssWUFDTCxJQUFLLGlCQUNMLElBQUssY0FDTCxJQUFLLG9CQUNMLElBQUssZ0JBQ0wsSUFBSyxlQUNMLElBQUssaUJBQ0wsSUFBSyxrQkFDTCxJQUFLLGNBQ0wsSUFBSyxxQkFDTCxJQUFLLFNBQ0wsSUFBSyxjQUNMLElBQUssV0FDTCxJQUFLLFdBQ0wsSUFBSyxlQUNMLElBQUssZUFDTCxJQUFLLGlCQUNMLElBQUssZUFDTCxJQUFLLGtCQUNMLElBQUsscUJBQ0wsSUFBSyxhQUNMLElBQUssWUFDTCxJQUFLLFlBQ0wsSUFBSyxnQkFDTCxJQUFLLGNBQ0wsSUFBSyxlQUNMLElBQUssa0JBQ0wsSUFBSyxvQkFDTCxJQUFLLGtCQUNMLElBQUssaUJBQ0wsSUFBSyxVQUNMLElBQUssWUFDTCxJQUFLLFlBQ0wsSUFBSyxhQUNMLElBQUssY0FDTCxJQUFLLFVBQ0wsSUFBSyxTQUNMLElBQUssY0FDTCxJQUFLLFVBQ0wsSUFBSyxvQkFDTCxJQUFLLGtCQUNMLElBQUssUUFDTCxJQUFLLGFBQ0ws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R0FBSSxTQUNKLEdBQUksTUFDSixHQUFJLE9BQ0osR0FBSSxPQUNKLEdBQUksU0FDSixHQUFJLFFBQ0osR0FBSSxTQUNKLEdBQUksU0FDSixHQUFJLE9BQ0osR0FBSSxPQUNKLEdBQUksU0FDSixHQUFJLEtBQ0osR0FBSSxLQUNKLEdBQUksT0FDSixHQUFJLE1BQ0osR0FBSSxPQUNKLEdBQUksT0FDSixHQUFJLE1BQ0osR0FBSSxPQUNKLEdBQUksUUFDSixHQUFJLE9BQ0osR0FBSSxPQUNKLEdBQUksTUFDSixHQUFJLFFBQ0osR0FBSSxPQUNKLEdBQUksVUFDSixHQUFJLE9BQ0osR0FBSSxTQUNKLEdBQUksU0FDSixHQUFJLE1BQ0osR0FBSSxRQUNKLEdBQUksT0FDSixHQUFJLFVBQ0osR0FBSSxTQUNKLEdBQUksU0FDSixHQUFJLFNBQ0osR0FBSSxXQUNKLEdBQUksU0FDSixHQUFJLFlBQ0osR0FBSSxRQUNKLEdBQUksT0FDSixHQUFJLE9BQ0osR0FBSSxPQUNKLEdBQUksV0FDSixHQUFJLFNBQ0osR0FBSSxRQUNKLEdBQUksVUFDSixHQUFJLFNBQ0osR0FBSSxZQUNKLEdBQUksY0FDSixHQUFJLFlBQ0osR0FBSSxTQUNKLEdBQUksUUFDSixHQUFJLE9BQ0osR0FBSSxPQUNKLElBQUssU0FDTCxJQUFLLFVBQ0wsSUFBSyxVQUNMLElBQUssUUFDTCxJQUFLLFFBQ0wsSUFBSyxRQUNMLElBQUssY0FDTCxJQUFLLFdBQ0wsSUFBSyxZQUNMLElBQUssTUFDTCxJQUFLLE9BQ0wsSUFBSyxPQUNMLElBQUssUUFDTCxJQUFLLFFBQ0wsSUFBSyxTQUNMLElBQUssT0FDTCxJQUFLLFFBQ0wsSUFBSyxRQUNMLElBQUssT0FDTCxJQUFLLFVBQ0wsSUFBSyxhQUNMLElBQUssT0FDTCxJQUFLLFFBQ0wsSUFBSyxZQUNMLElBQUssT0FDTCxJQUFLLE9BQ0wsSUFBSyxRQUNMLElBQUssU0FDTCxJQUFLLFdBQ0wsSUFBSyxVQUNMLElBQUssSUFDTCxJQUFLLElBQ0wsSUFBSyxRQUNMLElBQUssU0FDTCxJQUFLLFFBQ0wsSUFBSyxVQUNMLElBQUssUUFDTCxJQUFLLFdBQ0wsSUFBSyxTQUNMLElBQUssT0FDTCxJQUFLLFlBQ0wsSUFBSyxZQUNMLElBQUssTUFDTCxJQUFLLE1BQ0wsSUFBSyxNQUNMLElBQUssVUFDTCxJQUFLLFVBQ0wsSUFBSyxVQUNMLElBQUssV0FDTCxJQUFLLFdBQ0wsSUFBSyxPQUNMLElBQUssVUFDTCxJQUFLLFdBQ0wsSUFBSyxjQUNMLElBQUssaUJBQ0wsSUFBSyxnQkFDTCxJQUFLLGlCQUNMLElBQUssV0FDTCxJQUFLLGNBQ0wsSUFBSyxpQkFDTCxJQUFLLGlCQUNMLElBQUssYUFDTCxJQUFLLFFBQ0wsSUFBSyxVQUNMLElBQUssV0FDTCxJQUFLLFFBQ0wsSUFBSyxRQUNMLElBQUssT0FDTCxJQUFLLE9BQ0wsSUFBSyxTQUNMLElBQUssYUFDTCxJQUFLLE1BQ0wsSUFBSyxRQUNMLElBQUssUUFDTCxJQUFLLE9BQ0wsSUFBSyxXQUNMLElBQUssVUFDTCxJQUFLLE9BQ0wsSUFBSyxVQUNMLElBQUssWUFDTCxJQUFLLFVBQ0wsSUFBSyxPQUNMLElBQUssVUFDTCxJQUFLLFVBQ0wsSUFBSyxPQUNMLElBQUssV0FDTCxJQUFLLGdCQUNMLElBQUssYUFDTCxJQUFLLGVBQ0wsSUFBSyxXQUNMLElBQUssWUFDTCxJQUFLLFdBQ0wsSUFBSyxPQUNMLElBQUssU0FDTCxJQUFLLE9BQ0wsSUFBSyxVQUNMLElBQUssUUFDTCxJQUFLLFFBQ0wsSUFBSyxZQUNMLElBQUssVUFDTCxJQUFLLGFBQ0wsSUFBSyxhQUNMLElBQUssV0FDTCxJQUFLLFFBQ0wsSUFBSyxVQUNMLElBQUssV0FDTCxJQUFLLFFBQ0wsSUFBSyxTQUNMLElBQUssT0FDTCxJQUFLLE9BQ0wsSUFBSyxVQUNMLElBQUssWUFDTCxJQUFLLE1BQ0wsSUFBSyxPQUNMLElBQUssT0FDTCxJQUFLLFVBQ0wsSUFBSyxVQUNMLElBQUssUUFDTCxJQUFLLE1BQ0wsSUFBSyxPQUNMLElBQUssVUFDTCxJQUFLLFNBQ0wsSUFBSyxXQUNMLElBQUssU0FDTCxJQUFLLGFBQ0wsSUFBSyxPQUNMLElBQUssT0FDTCxJQUFLLE9BQ0wsSUFBSyxRQUNMLElBQUssUUFDTCxJQUFLLFFBQ0wsSUFBSyxPQUNMLElBQUssZ0JBQ0wsSUFBSyxXQUNMLElBQUssYUFDTCxJQUFLLGNBQ0wsSUFBSyxnQkFDTCxJQUFLLGtCQUNMLElBQUssZ0JBQ0wsSUFBSyxXQUNMLElBQUssT0FDTCxJQUFLLFFBQ0wsSUFBSyxhQUNMLElBQUssS0FDTCxJQUFLLFFBQ0wsSUFBSyxTQUNMLElBQUssWUFDTCxJQUFLLGNBQ0wsSUFBSyxpQkFDTCxJQUFLLE9BQ0wsSUFBSyxnQkFDTCxJQUFLLFdBQ0wsSUFBSyxjQUNMLElBQUssV0FDTCxJQUFLLGlCQUNMLElBQUssYUFDTCxJQUFLLFlBQ0wsSUFBSyxlQUNMLElBQUssZUFDTCxJQUFLLGNBQ0wsSUFBSyxhQUNMLElBQUssY0FDTCxJQUFLLGVBQ0wsSUFBSyxTQUNMLElBQUssV0FDTCxJQUFLLFVBQ0wsSUFBSyxVQUNMLElBQUssWUFDTCxJQUFLLFVBQ0wsSUFBSyxTQUNMLElBQUssU0FDTCxJQUFLLGFBQ0wsSUFBSyxZQUNMLElBQUssT0FDTCxJQUFLLFlBQ0wsSUFBSyxRQUNMLElBQUssT0FDTCxJQUFLLFNBQ0wsSUFBSyxZQUNMLElBQUssUUFDTCxJQUFLLFlBQ0wsSUFBSyxXQUNMLElBQUssVUFDTCxJQUFLLGNBQ0wsSUFBSyxjQUNMLElBQUssU0FDTCxJQUFLLGVBQ0wsSUFBSyxXQUNMLElBQUssWUFDTCxJQUFLLFVBQ0wsSUFBSyxXQUNMLElBQUssY0FDTCxJQUFLLE1BQ0wsSUFBSyxTQUNMLElBQUssVUFDTCxJQUFLLFFBQ0wsSUFBSyxVQUNMLElBQUssVUFDTCxJQUFLLFdBQ0wsSUFBSyxXQUNMLElBQUssVUFDTCxJQUFLLFNBQ0wsSUFBSyxRQUNMLElBQUssV0FDTCxJQUFLLFFBQ0wsSUFBSyxZQUNMLElBQUssVUFDTCxJQUFLLE1BQ0wsSUFBSyxRQUNMLElBQUssUUFDTCxJQUFLLFFBQ0wsSUFBSyxPQUNMLElBQUssUUFDTCxJQUFLLFVBQ0wsSUFBSyxVQUNMLElBQUssUUFDTCxJQUFLLE9BQ0wsSUFBSyxPQUNMLElBQUssUUFDTCxJQUFLLFFBQ0wsSUFBSyxRQUNMLElBQUssV0FDTCxJQUFLLGFBQ0wsSUFBSyxjQUNMLElBQUssT0FDTCxJQUFLLFdBQ0wsSUFBSyxPQUNMLElBQUssZ0JBQ0wsSUFBSyxZQUNMLElBQUssY0FDTCxJQUFLLFFBQ0wsSUFBSyxpQkFDTCxJQUFLLGtCQUNMLElBQUssa0JBQ0wsSUFBSyxpQkFDTCxJQUFLLFVBQ0wsSUFBSyxVQUNMLElBQUssV0FDTCxJQUFLLFFBQ0wsSUFBSyxVQUNMLElBQUssYUFDTCxJQUFLLGVBQ0wsSUFBSyxvQkFDTCxJQUFLLFFBQ0wsSUFBSyxVQUNMLElBQUssYUFDTCxJQUFLLGVBQ0wsSUFBSyxRQUNMLElBQUssY0FDTCxJQUFLLGNBQ0wsSUFBSyxXQUNMLElBQUssZUFDTCxJQUFLLFlBQ0wsSUFBSyxXQUNMLElBQUssV0FDTCxJQUFLLE9BQ0wsSUFBSyxPQUNMLElBQUssVUFDTCxJQUFLLFFBQ0wsSUFBSyxTQUNMLElBQUssT0FDTCxJQUFLLFdBQ0wsSUFBSyxnQkFDTCxJQUFLLFlBQ0wsSUFBSyxrQkFDTCxJQUFLLGVBQ0wsSUFBSyxnQkFDTCxJQUFLLG1CQUNMLElBQUssY0FDTCxJQUFLLGdCQUNMLElBQUssY0FDTCxJQUFLLFdBQ0wsSUFBSyxNQUNMLElBQUssWUFDTCxJQUFLLGFBQ0wsSUFBSyxxQkFDTCxJQUFLLG1CQUNMLElBQUssVUFDTCxJQUFLLFVBQ0wsSUFBSyxVQUNMLElBQUssVUFDTCxJQUFLLFVBQ0wsSUFBSyxVQUNMLElBQUssVUFDTCxJQUFLLFVBQ0wsSUFBSyxVQUNMLElBQUssVUFDTCxJQUFLLFVBQ0wsSUFBSyxVQUNMLElBQUssUUFDTCxJQUFLLFFBQ0wsSUFBSyxVQUNMLElBQUssUUFDTCxJQUFLLFNBQ0wsSUFBSyxPQUNMLElBQUssU0FDTCxJQUFLLFVBQ0wsSUFBSyxRQUNMLElBQUssUUFDTCxJQUFLLFFBQ0wsSUFBSyxhQUNMLElBQUssY0FDTCxJQUFLLFlBQ0wsSUFBSyxTQUNMLElBQUssVUFDTCxJQUFLLFFBQ0wsSUFBSyxZQUNMLElBQUssWUFDTCxJQUFLLGFBQ0wsSUFBSyxTQUNMLElBQUssV0FDTCxJQUFLLFFBQ0wsSUFBSyxTQUNMLElBQUssU0FDTCxJQUFLLFFBQ0wsSUFBSyxTQUNMLElBQUssTUFDTCxJQUFLLE9BQ0wsSUFBSyxVQUNMLElBQUssVUFDTCxJQUFLLFVBQ0wsSUFBSyxVQUNMLElBQUssT0FDTCxJQUFLLE9BQ0wsSUFBSyxXQUNMLElBQUssV0FDTCxJQUFLLFVBQ0wsSUFBSyxXQUNMLElBQUssT0FDTCxJQUFLLFlBQ0wsSUFBSyxZQUNMLElBQUssVUFDTCxJQUFLLGFBQ0wsSUFBSyxhQUNMLElBQUssUUFDTCxJQUFLLFFBQ0wsSUFBSyxXQUNMLElBQUssV0FDTCxJQUFLLFVBQ0wsSUFBSyxTQUNMLElBQUssV0FDTCxJQUFLLFVBQ0wsSUFBSyxRQUNMLElBQUssVUFDTCxJQUFLLFdBQ0wsSUFBSyxZQUNMLElBQUssV0FDTCxJQUFLLGFBQ0wsSUFBSyxVQUNMLElBQUssVUFDTCxJQUFLLFVBQ0wsSUFBSyxXQUNMLElBQUssWUFDTCxJQUFLLFlBQ0wsSUFBSyxZQUNMLElBQUssWUFDTCxJQUFLLFlBQ0wsSUFBSyxjQUNMLElBQUssVUFDTCxJQUFLLFlBQ0wsSUFBSyxXQUNMLElBQUssVUFDTCxJQUFLLFVBQ0wsSUFBSyxVQUNMLElBQUssV0FDTCxJQUFLLFVBQ0wsSUFBSyxjQUNMLElBQUssTUFDTCxJQUFLLGNBQ0wsSUFBSyxNQUNMLElBQUssYUFDTCxJQUFLLGdCQUNMLElBQUssVUFDTCxJQUFLLGVBQ0wsSUFBSyxVQUNMLElBQUssV0FDTCxJQUFLLFNBQ0wsSUFBSyxZQUNMLElBQUssWUFDUCxFQUNJRCxHQUFXLENBQ2IsRUFBRyxFQUNILEVBQUcsRUFDSCxHQUFJLEVBQ0osR0FBSSxFQUNKLEdBQUksRUFDSixHQUFJLEVBQ0osR0FBSSxFQUNKLEdBQUksRUFDSixHQUFJLEVBQ0osR0FBSSxFQUNKLEdBQUksRUFDSixHQUFJLEVBQ0osR0FBSSxFQUNKLEdBQUksRUFDSixHQUFJLEVBQ0osR0FBSSxFQUNKLEdBQUksRUFDSixHQUFJLEVBQ0osR0FBSSxFQUNKLEdBQUksRUFDSixHQUFJLEVBQ0osR0FBSSxFQUNKLEdBQUksRUFDSixHQUFJLEVBQ0osR0FBSSxFQUNKLEdBQUksRUFDSixHQUFJLEVBQ0osR0FBSSxFQUNKLEdBQUksRUFDSixHQUFJLEVBQ0osR0FBSSxFQUNKLEdBQUksRUFDSixHQUFJLEVBQ0osR0FBSSxFQUNKLEdBQUksRUFDSixHQUFJLEVBQ0osR0FBSSxFQUNKLEdBQUksRUFDSixHQUFJLEVBQ0osR0FBSSxFQUNKLEdBQUksRUFDSixHQUFJLEVBQ0osR0FBSSxFQUNKLEdBQUksRUFDSixHQUFJLEVBQ0osR0FBSSxFQUNKLEdBQUksRUFDSixHQUFJLEVBQ0osR0FBSSxFQUNKLEdBQUksRUFDSixHQUFJLEVBQ0osR0FBSSxFQUNKLEdBQUksRUFDSixHQUFJLEVBQ0osR0FBSSxFQUNKLEdBQUksRUFDSixHQUFJLEVBQ0osR0FBSSxFQUNKLEdBQUksRUFDSixHQUFJLEVBQ0osSUFBSyxFQUNMLElBQUssRUFDTCxJQUFLLEVBQ0wsSUFBSyxFQUNMLElBQUssRUFDTCxJQUFLLEVBQ0wsSUFBSyxFQUNMLElBQUssRUFDTCxJQUFLLEVBQ0wsSUFBSyxFQUNMLElBQUssRUFDTCxJQUFLLEVBQ0wsSUFBSyxFQUNMLElBQUssRUFDTCxJQUFLLEVBQ0wsSUFBSyxFQUNMLElBQUssRUFDTCxJQUFLLEVBQ0wsSUFBSyxFQUNMLElBQUssRUFDTCxJQUFLLEVBQ0wsSUFBSyxFQUNMLElBQUssRUFDTCxJQUFLLEVBQ0wsSUFBSyxFQUNMLElBQUssRUFDTCxJQUFLLEVBQ0wsSUFBSyxFQUNMLElBQUssRUFDTCxJQUFLLEVBQ0wsSUFBSyxFQUNMLElBQUssRUFDTCxJQUFLLEVBQ0wsSUFBSyxFQUNMLElBQUssRUFDTCxJQUFLLEVBQ0wsSUFBSyxFQUNMLElBQUssRUFDTCxJQUFLLEVBQ0wsSUFBSyxFQUNMLElBQUssRUFDTCxJQUFLLEVBQ0wsSUFBSyxFQUNMLElBQUssRUFDTCxJQUFLLEVBQ0wsSUFBSyxFQUNMLElBQUssRUFDTCxJQUFLLEVBQ0wsSUFBSyxFQUNMLElBQUssRUFDTCxJQUFLLEVBQ0wsSUFBSyxFQUNMLElBQUssRUFDTCxJQUFLLEVBQ0wsSUFBSyxFQUNMLElBQUssRUFDTCxJQUFLLEVBQ0wsSUFBSyxFQUNMLElBQUssRUFDTCxJQUFLLEVBQ0wsSUFBSyxFQUNMLElBQUssRUFDTCxJQUFLLEVBQ0wsSUFBSyxFQUNMLElBQUssRUFDTCxJQUFLLEVBQ0wsSUFBSyxFQUNMLElBQUssRUFDTCxJQUFLLEVBQ0wsSUFBSyxFQUNMLElBQUssRUFDTCxJQUFLLEVBQ0wsSUFBSyxFQUNMLElBQUssRUFDTCxJQUFLLEVBQ0wsSUFBSyxFQUNMLElBQUssRUFDTCxJQUFLLEVBQ0wsSUFBSyxFQUNMLElBQUssRUFDTCxJQUFLLEVBQ0wsSUFBSyxFQUNMLElBQUssRUFDTCxJQUFLLEVBQ0wsSUFBSyxFQUNMLElBQUssRUFDTCxJQUFLLEVBQ0wsSUFBSyxFQUNMLElBQUssRUFDTCxJQUFLLEVBQ0wsSUFBSyxFQUNMLElBQUssRUFDTCxJQUFLLEVBQ0wsSUFBSyxFQUNMLElBQUssRUFDTCxJQUFLLEVBQ0wsSUFBSyxFQUNMLElBQUssRUFDTCxJQUFLLEVBQ0wsSUFBSyxFQUNMLElBQUssRUFDTCxJQUFLLEVBQ0wsSUFBSyxFQUNMLElBQUssRUFDTCxJQUFLLEVBQ0wsSUFBSyxFQUNMLElBQUssRUFDTCxJQUFLLEVBQ0wsSUFBSyxFQUNMLElBQUssRUFDTCxJQUFLLEVBQ0wsSUFBSyxFQUNMLElBQUssRUFDTCxJQUFLLEVBQ0wsSUFBSyxFQUNMLElBQUssRUFDTCxJQUFLLEVBQ0wsSUFBSyxFQUNMLElBQUssRUFDTCxJQUFLLEVBQ0wsSUFBSyxFQUNMLElBQUssRUFDTCxJQUFLLEVBQ0wsSUFBSyxFQUNMLElBQUssRUFDTCxJQUFLLEVBQ0wsSUFBSyxFQUNMLElBQUssRUFDTCxJQUFLLEVBQ0wsSUFBSyxFQUNMLElBQUssRUFDTCxJQUFLLEVBQ0wsSUFBSyxFQUNMLElBQUssRUFDTCxJQUFLLEVBQ0wsSUFBSyxFQUNMLElBQUssRUFDTCxJQUFLLEVBQ0wsSUFBSyxFQUNMLElBQUssRUFDTCxJQUFLLEVBQ0wsSUFBSyxFQUNMLElBQUssRUFDTCxJQUFLLEVBQ0wsSUFBSyxFQUNMLElBQUssRUFDTCxJQUFLLEVBQ0wsSUFBSyxFQUNMLElBQUssRUFDTCxJQUFLLEVBQ0wsSUFBSyxFQUNMLElBQUssRUFDTCxJQUFLLEVBQ0wsSUFBSyxFQUNMLElBQUssRUFDTCxJQUFLLEVBQ0wsSUFBSyxFQUNMLElBQUssRUFDTCxJQUFLLEVBQ0wsSUFBSyxFQUNMLElBQUssRUFDTCxJQUFLLEVBQ0wsSUFBSyxFQUNMLElBQUssRUFDTCxJQUFLLEVBQ0wsSUFBSyxFQUNMLElBQUssRUFDTCxJQUFLLEVBQ0wsSUFBSyxFQUNMLElBQUssRUFDTCxJQUFLLEVBQ0wsSUFBSyxFQUNMLElBQUssRUFDTCxJQUFLLEVBQ0wsSUFBSyxFQUNMLElBQUssRUFDTCxJQUFLLEVBQ0wsSUFBSyxFQUNMLElBQUssRUFDTCxJQUFLLEVBQ0wsSUFBSyxFQUNMLElBQUssRUFDTCxJQUFLLEVBQ0wsSUFBSyxFQUNMLElBQUssRUFDTCxJQUFLLEVBQ0wsSUFBSyxFQUNMLElBQUssRUFDTCxJQUFLLEVBQ0wsSUFBSyxFQUNMLElBQUssRUFDTCxNQUFPLENBQ1QsRUFFQSxTQUFTOEYsR0FBbUJ4OUcsRUFBeUIsQ0FDcEQsT0FBR0EsRUFBRSxNQUFNLEVBQUUsQ0FBQyxHQUFLLFFBQU9BLEVBQUlBLEVBQUUsTUFBTSxDQUFDLEdBRXBDQSxFQUFFLFdBQVcsQ0FBQyxHQUFLLEtBQ3JCQSxFQUFJQSxFQUFFLE1BQU0sQ0FBQyxFQUNWQSxFQUFFLFdBQVcsQ0FBQyxHQUFLLEtBQUlBLEVBQUlBLEVBQUUsTUFBTSxDQUFDLElBRXhDQSxFQUFJQSxFQUFFLFFBQVEsb0JBQXFCLEVBQUUsRUFFckNBLEVBQUlBLEVBQUUsUUFBUSxnREFBaUQsU0FBUzA2RCxFQUFJQyxFQUFJLENBQUUsT0FBT0EsRUFBRyxRQUFRLE1BQU0sRUFBRSxDQUFJLENBQUEsRUFFaEgzNkQsRUFBSUEsRUFBRSxRQUFRLHNCQUF1QixJQUFJLEVBQ2xDQSxFQUFFLFFBQVEsUUFBUSxHQUFHLEVBQUUsUUFBUSxNQUFNLEdBQUcsQ0FDaEQsQ0FFQSxTQUFTeTlHLEdBQW1CejlHLEVBQXlCLENBQ3BELElBQUlDLEVBQUksT0FBU0QsRUFBRSxRQUFRODBHLEdBQVcsZUFBZSxFQUFFLFFBQVEsU0FBUyxHQUFHLEVBRTNFLE9BQU83MEcsRUFBRSxRQUFRLEtBQU0sR0FBRyxFQUFFLFFBQVEsS0FBSyxHQUFHLENBQzdDLENBRUEsU0FBU3k5RyxHQUFjdCtHLEVBQW1DLENBQ3pELElBQUlHLEVBQUlILEVBQUUsTUFBTSxHQUFHLEVBQ2ZFLEVBQUlDLEVBQUUsQ0FBQyxFQUFFLE1BQU0sR0FBRyxFQUFFLENBQUMsRUFDekIsTUFBTyxDQUFDRCxFQUFHQyxFQUFFLENBQUMsRUFBRSxNQUFNLEdBQUcsRUFBRSxDQUFDLEdBQUtBLEVBQUUsT0FBUyxFQUFLLEtBQU9BLEVBQUUsQ0FBQyxFQUFFLE1BQU0sR0FBRyxFQUFFLENBQUMsR0FBS0EsRUFBRSxDQUFDLEVBQUUsTUFBTSxHQUFHLEVBQUUsQ0FBQyxHQUFNLEdBQUcsQ0FDekcsQ0FFQSxTQUFTbytHLEdBQWN2K0csRUFBeUIsQ0FDL0MsT0FBT0EsRUFBRSxRQUFRLEtBQUssR0FBRyxDQUMxQixDQUVBLElBQUk2dkYsR0FBTyxDQUFBLEVBQ1AydUIsR0FBVyxDQUFBLEVBSVhDLEdBQWtCLE9BQU8sSUFBUSxJQUVyQyxTQUFTQyxHQUFXM3VCLEVBQWFwM0QsRUFBZ0I2d0MsRUFBZ0IsQ0FDaEUsSUFBSTNzRSxFQUFJLEVBQUc2N0IsRUFBTXEzRCxFQUFJLE9BQ3JCLEdBQUd2bUIsR0FDRixHQUFHaTFDLEdBQWtCajFDLEVBQUksSUFBSTd3QyxDQUFHLEVBQUksT0FBTyxVQUFVLGVBQWUsS0FBSzZ3QyxFQUFLN3dDLENBQUcsR0FFaEYsUUFESWdtRixFQUFTRixHQUFrQmoxQyxFQUFJLElBQUk3d0MsQ0FBRyxFQUFJNndDLEVBQUk3d0MsQ0FBRyxFQUMvQzk3QixFQUFJOGhILEVBQU8sT0FBUSxFQUFFOWhILEVBQzFCLEdBQUdrekYsRUFBSTR1QixFQUFPOWhILENBQUMsQ0FBQyxFQUFFLElBQU04N0IsRUFBTyxPQUFBbzNELEVBQUksUUFBaUI0dUIsRUFBTzloSCxDQUFDLE9BR3hELE1BQU1BLEVBQUk2N0IsRUFBSyxFQUFFNzdCLEVBQ3ZCLEdBQUdrekYsRUFBSWx6RixDQUFDLEVBQUUsSUFBTTg3QixFQUFPLE9BQUFvM0QsRUFBSSxRQUFpQmx6RixFQUU3QyxPQUFBa3pGLEVBQUlyM0QsQ0FBRyxFQUFLLENBQUNDLENBQUssRUFBWW8zRCxFQUFJLFFBQVVBLEVBQUksU0FDN0N2bUIsSUFDQ2kxQyxJQUNFajFDLEVBQUksSUFBSTd3QyxDQUFHLEdBQUc2d0MsRUFBSSxJQUFJN3dDLEVBQUssQ0FBQSxDQUFFLEVBQ2pDNndDLEVBQUksSUFBSTd3QyxDQUFHLEVBQUUsS0FBS0QsQ0FBRyxJQUVqQixPQUFPLFVBQVUsZUFBZSxLQUFLOHdDLEVBQUs3d0MsQ0FBRyxJQUFHNndDLEVBQUk3d0MsQ0FBRyxFQUFJLENBQUEsR0FDL0Q2d0MsRUFBSTd3QyxDQUFHLEVBQUUsS0FBS0QsQ0FBRyxJQUdaQSxDQUNSLENBRUEsU0FBU2ttRixHQUFVcDlDLEVBQWN4eUQsRUFBSyxDQUNyQyxJQUFJcFQsRUFBSyxDQUFDLElBQUk0bEUsRUFBRSxFQUFFLElBQUlBLEVBQUUsQ0FBQyxFQUVyQnE5QyxFQUFNLEdBQ1YsT0FBRzd2RyxFQUFJLE1BQUt5N0YsR0FBTXo3RixFQUFJLEtBQ25CQSxFQUFJLE9BQVMsS0FBTXBULEVBQUUsWUFBYyxFQUM5Qm9ULEVBQUksS0FBTyxLQUFNNnZHLEVBQU1qaUIsR0FBUTV0RixFQUFJLEdBQUcsRUFDdENBLEVBQUksS0FBTyxPQUFNNnZHLEVBQU03dkcsRUFBSSxLQUNoQzZ2RyxFQUFNLElBQU1qakgsRUFBRSxNQUFRK3VHLEdBQVdrVSxDQUFHLEVBQUdqakgsRUFBRSxZQUFjLEdBQ2xEb1QsRUFBSSxPQUFTLE9BQU1wVCxFQUFFLE1BQVFvVCxFQUFJLE9BQ3RDQSxFQUFJLFNBQVFwVCxFQUFFLE9BQVMsSUFDdkJvVCxFQUFJLE9BQVMsT0FBUXBULEVBQUUsYUFBZUEsRUFBRSxNQUFRb1QsRUFBSSxPQUNoRHBULENBQ1IsQ0FFQSxTQUFTa2pILEdBQWdCQyxFQUFxQjV1RyxFQUFrQixDQUMvRCxHQUFJNHVHLEVBQ0osS0FBSUMsRUFBTyxDQUFDLEdBQUssR0FBSyxJQUFNLElBQU0sR0FBSyxFQUFHLEVBQ3ZDN3VHLEdBQVEsU0FBUTZ1RyxFQUFPLENBQUMsRUFBRyxFQUFHLEVBQUcsRUFBRyxHQUFLLEVBQUcsR0FDNUNELEVBQVEsTUFBVSxPQUFNQSxFQUFRLEtBQVNDLEVBQUssQ0FBQyxHQUMvQ0QsRUFBUSxPQUFVLE9BQU1BLEVBQVEsTUFBU0MsRUFBSyxDQUFDLEdBQy9DRCxFQUFRLEtBQVUsT0FBTUEsRUFBUSxJQUFTQyxFQUFLLENBQUMsR0FDL0NELEVBQVEsUUFBVSxPQUFNQSxFQUFRLE9BQVNDLEVBQUssQ0FBQyxHQUMvQ0QsRUFBUSxRQUFVLE9BQU1BLEVBQVEsT0FBU0MsRUFBSyxDQUFDLEdBQy9DRCxFQUFRLFFBQVUsT0FBTUEsRUFBUSxPQUFTQyxFQUFLLENBQUMsR0FDbkQsQ0FFQSxTQUFTQyxHQUFlMVQsRUFBdUJwckUsRUFBZXBwQyxFQUFNLENBQ25FLElBQUl1bkMsRUFBSXZuQyxFQUFLLE9BQU9vcEMsRUFBSyxHQUFLLEtBQU9BLEVBQUssRUFBSSxTQUFTLEVBQ25EdGpDLEVBQUksR0FBTTY3QixFQUFNNnlFLEVBQU8sT0FDM0IsR0FBR2p0RSxHQUFLLE1BQVF2bkMsRUFBSyxLQUNwQixLQUFNOEYsRUFBSSxJQUFPLEVBQUVBLEVBQUcsR0FBRzlGLEVBQUssSUFBSThGLENBQUMsR0FBSyxLQUFNLENBQzdDcWlFLEdBQVMvK0IsRUFBSyxFQUFHdGpDLENBQUMsRUFFbEI5RixFQUFLLElBQUk4RixDQUFDLEVBQUlzakMsRUFBSyxFQUNuQnBwQyxFQUFLLE9BQU9vcEMsRUFBSyxDQUFDLEVBQUk3QixFQUFJemhDLEVBQzFCLEtBQ0EsRUFFRixJQUFJQSxFQUFJLEVBQUdBLEdBQUs2N0IsRUFBSyxFQUFFNzdCLEVBQUcsR0FBRzB1RyxFQUFPMXVHLENBQUMsRUFBRSxXQUFheWhDLEVBQUcsT0FBT3poQyxFQUM5RCxPQUFBMHVHLEVBQU83eUUsQ0FBRyxFQUFJLENBQ2IsU0FBUzRGLEVBQ1QsT0FBTyxFQUNQLE9BQU8sRUFDUCxTQUFTLEVBQ1QsS0FBSyxFQUNMLGtCQUFrQixDQUNwQixFQUNRNUYsQ0FDUixDQUVBLFNBQVN3bUYsR0FBWXRqSCxFQUFZdWpILEVBQWtCQyxFQUFvQnJvSCxFQUFNeTBHLEVBQVFELEVBQVEsQ0FDNUYsR0FBSSxDQUNBeDBHLEVBQUssU0FBUTZFLEVBQUUsRUFBSW84RCxHQUFVbW5ELENBQUssRUFDdkMsT0FBU3QvRyxFQUFHLENBQUUsR0FBRzlJLEVBQUssSUFBSyxNQUFNOEksQ0FBSSxDQUNwQyxHQUFHLEVBQUFqRSxFQUFFLElBQU0sS0FBTyxDQUFDN0UsRUFBSyxZQUV4QixJQURHNkUsRUFBRSxJQUFNLEtBQU8sT0FBT0EsRUFBRSxHQUFNLFdBQVVBLEVBQUUsRUFBSWcyRSxHQUFVaDJFLEVBQUUsQ0FBQyxJQUMxRCxDQUFDN0UsR0FBUUEsRUFBSyxXQUFhLEtBQVU2RSxFQUFFLElBQU0sSUFBSyxHQUFJLENBRXpELEdBREdvOEQsR0FBVW1uRCxDQUFLLEdBQUssTUFBTWpnRCxHQUFTSyxHQUFZNC9DLENBQUssR0FBSyxVQUFXQSxDQUFLLEVBQ3pFdmpILEVBQUUsSUFBTSxJQUFLQSxFQUFFLEVBQUlBLEVBQUUsR0FBS21nRixHQUFLbmdGLEVBQUUsQ0FBQyxVQUM3QnVqSCxJQUFVLEVBQ2pCLEdBQUd2akgsRUFBRSxJQUFNLEtBQ05BLEVBQUUsRUFBRSxLQUFPQSxFQUFFLEVBQUdBLEVBQUUsRUFBSUEsRUFBRSxFQUFFLFNBQVMsRUFBRSxFQUNwQ0EsRUFBRSxFQUFJbytELEdBQWdCcCtELEVBQUUsQ0FBQyxVQUV2QkEsRUFBRSxJQUFNLElBQUssQ0FDcEIsSUFBSTZnRSxFQUFLd1UsR0FBUXIxRSxFQUFFLENBQUMsR0FDaEI2Z0UsRUFBRyxLQUFPQSxFQUFJN2dFLEVBQUUsRUFBSTZnRSxFQUFHLFNBQVMsRUFBRSxFQUNqQzdnRSxFQUFFLEVBQUlvK0QsR0FBZ0J5QyxDQUFFLENBQzdCLEtBQ0ksSUFBRzdnRSxFQUFFLElBQU0sT0FBVyxNQUFPLEdBQzdCQSxFQUFFLEVBQUlzK0QsR0FBWXQrRCxFQUFFLEVBQUU0aUgsRUFBUSxPQUU1QjVpSCxFQUFFLElBQU0sSUFBS0EsRUFBRSxFQUFJdStELEdBQVdnbEQsRUFBTWx1QyxHQUFRcjFFLEVBQUUsQ0FBQyxFQUFFNGlILEVBQVEsRUFDNUQ1aUgsRUFBRSxFQUFJdStELEdBQVdnbEQsRUFBTXZqSCxFQUFFLEVBQUU0aUgsRUFBUSxDQUMxQyxPQUFTMytHLEVBQUcsQ0FBRSxHQUFHOUksRUFBSyxJQUFLLE1BQU04SSxDQUFJLENBQ3BDLEdBQUk5SSxFQUFLLFlBQ05xb0gsR0FBVSxLQUFNLEdBQUksQ0FDdEJ4akgsRUFBRSxFQUFJMnZHLEVBQU8sTUFBTTZULENBQU0sRUFDckJ4akgsRUFBRSxFQUFFLFNBQVdBLEVBQUUsRUFBRSxRQUFRLE9BQVMsQ0FBQ0EsRUFBRSxFQUFFLFFBQVEsTUFDcERBLEVBQUUsRUFBRSxRQUFRLElBQU11dUcsR0FBU3FCLEVBQU8sY0FBYyxVQUFVNXZHLEVBQUUsRUFBRSxRQUFRLEtBQUssRUFBRSxJQUFLQSxFQUFFLEVBQUUsUUFBUSxNQUFRLENBQUMsRUFDcEc3RSxFQUFLLE1BQUs2RSxFQUFFLEVBQUUsUUFBUSxRQUFVNHZHLEVBQU8sY0FBYyxVQUFVNXZHLEVBQUUsRUFBRSxRQUFRLEtBQUssRUFBRSxNQUVsRkEsRUFBRSxFQUFFLFNBQVdBLEVBQUUsRUFBRSxRQUFRLFFBQzlCQSxFQUFFLEVBQUUsUUFBUSxJQUFNdXVHLEdBQVNxQixFQUFPLGNBQWMsVUFBVTV2RyxFQUFFLEVBQUUsUUFBUSxLQUFLLEVBQUUsSUFBS0EsRUFBRSxFQUFFLFFBQVEsTUFBUSxDQUFDLEVBQ3BHN0UsRUFBSyxNQUFLNkUsRUFBRSxFQUFFLFFBQVEsUUFBVTR2RyxFQUFPLGNBQWMsVUFBVTV2RyxFQUFFLEVBQUUsUUFBUSxLQUFLLEVBQUUsS0FFeEYsT0FBU2lFLEVBQUcsQ0FBRSxHQUFHOUksRUFBSyxLQUFPdzBHLEVBQU8sTUFBTyxNQUFNMXJHLENBQUksRUFDckQsQ0FFQSxTQUFTdy9HLEdBQVMvaUMsRUFBa0IwL0IsRUFBa0JuL0csRUFBYyxDQUNuRSxHQUFHeS9FLEdBQU1BLEVBQUcsTUFBTSxFQUFHLENBQ3BCLElBQUl0Z0QsRUFBUTQvQyxHQUFrQlUsRUFBRyxNQUFNLENBQUMsRUFDeEMsR0FBR3RnRCxFQUFNLEVBQUUsRUFBSUEsRUFBTSxFQUFFLEdBQUtBLEVBQU0sRUFBRSxFQUFJQSxFQUFNLEVBQUUsRUFBRyxNQUFNLElBQUksTUFBTSxjQUFnQm4vQixFQUFJLE1BQVF5L0UsRUFBRyxNQUFNLENBQUMsQ0FDekcsQ0FDRixDQUNBLFNBQVNnakMsR0FBaUJoakMsRUFBa0JwOEUsRUFBYyxDQUN6RCxJQUFJYSxFQUFJNjZFLEdBQWtCMTdFLENBQUMsRUFDeEJhLEVBQUUsRUFBRSxHQUFHQSxFQUFFLEVBQUUsR0FBS0EsRUFBRSxFQUFFLEdBQUdBLEVBQUUsRUFBRSxHQUFLQSxFQUFFLEVBQUUsR0FBRyxHQUFLQSxFQUFFLEVBQUUsR0FBRyxJQUFHdTdFLEVBQUcsTUFBTSxFQUFJYixHQUFhMTZFLENBQUMsRUFDckYsQ0FDQSxJQUFJdytHLEdBQWMsZ0RBQ2RDLEdBQWlCLDJEQUNqQkMsR0FBYSw4QkFDYkMsR0FBVyxjQUNYQyxHQUFXLDZCQUNYQyxHQUFVLG1FQUNWQyxHQUFhLGdDQUNiQyxHQUFlLHlDQUNmQyxHQUFlLDhEQUNmQyxHQUFXLG9FQUdmLFNBQVNDLEdBQWE1eEcsRUFBa0J0WCxFQUFNK2xELEVBQWdCNmxDLEVBQU1zTSxFQUFrQnVjLEVBQVFELEVBQXNCLENBQ25ILEdBQUcsQ0FBQ2w5RixFQUFNLE9BQU9BLEVBQ2JzMEUsSUFBTUEsRUFBTyxDQUFDLE1BQU0sQ0FBRSxDQUFBLEdBSTFCLElBQUl6aUYsRUFBSW5KLEVBQUssTUFBUyxDQUFFLEVBQWEsQ0FBRSxFQUNuQ3VwRyxFQUFzQixDQUFDLEVBQUcsQ0FBQyxFQUFFLElBQVMsRUFBRSxHQUFPLEVBQUcsRUFBRyxDQUFDLEVBQUUsRUFBRyxFQUFFLENBQUMsQ0FBQyxFQUUvRDRmLEVBQVEsR0FBSUMsRUFBUSxHQUNwQkMsRUFBZ0IveEcsRUFBSyxNQUFNbXhHLEVBQWMsRUFDMUNZLEdBQ0ZGLEVBQVE3eEcsRUFBSyxNQUFNLEVBQUcreEcsRUFBSyxLQUFLLEVBQ2hDRCxFQUFROXhHLEVBQUssTUFBTSt4RyxFQUFLLE1BQVFBLEVBQUssQ0FBQyxFQUFFLE1BQU0sR0FDeENGLEVBQVFDLEVBQVE5eEcsRUFHdkIsSUFBSWd5RyxFQUFVSCxFQUFNLE1BQU1KLEVBQVksRUFDbkNPLEVBQVNDLEdBQXFCRCxFQUFRLENBQUMsRUFBR25nSCxFQUFHK3VGLEVBQUlueUMsQ0FBRyxHQUM5Q3VqRSxFQUFVSCxFQUFNLE1BQU1ILEVBQWEsSUFBSVEsR0FBc0JGLEVBQVEsQ0FBQyxFQUFHQSxFQUFRLENBQUMsR0FBRyxHQUFJbmdILEVBQUcrdUYsRUFBSW55QyxDQUFtQixFQUc1SCxJQUFJa2EsR0FBUWtwRCxFQUFNLE1BQU0scUJBQXFCLEdBQUcsQ0FBQyxNQUFNLEVBQUUsR0FBRyxNQUM1RCxHQUFHbHBELEVBQU8sRUFBRyxDQUNaLElBQUl6NEQsRUFBTTJoSCxFQUFNLE1BQU1scEQsRUFBS0EsRUFBSyxFQUFFLEVBQUUsTUFBTTBvRCxFQUFRLEVBQy9DbmhILEdBQUsrZ0gsR0FBaUJwL0csRUFBRzNCLEVBQUksQ0FBQyxDQUFDLENBQ2xDLENBR0QsSUFBSWlpSCxFQUFNTixFQUFNLE1BQU1GLEVBQVEsRUFDM0JRLEdBQU9BLEVBQUksQ0FBQyxHQUFHQyxHQUF3QkQsRUFBSSxDQUFDLEVBQUd2eEIsQ0FBRSxFQUdwRCxJQUFJcG1GLEVBQTZCLENBQUEsRUFDakMsR0FBRzlSLEVBQUssV0FBWSxDQUVuQixJQUFJNnJDLEVBQU9zOUUsRUFBTSxNQUFNUCxFQUFRLEVBQzVCLzhFLEdBQU04OUUsR0FBa0I3M0csRUFBUys1QixDQUFJLENBQ3hDLENBR0V3OUUsR0FBTU8sR0FBa0JQLEVBQUssQ0FBQyxFQUFHbGdILEVBQUduSixFQUFNdXBHLEVBQVVrTCxFQUFRRCxDQUFNLEVBR3JFLElBQUlxVixFQUFVVCxFQUFNLE1BQU1QLEVBQU8sRUFDOUJnQixJQUFTMWdILEVBQUUsYUFBYSxFQUFJMmdILEdBQXdCRCxFQUFRLENBQUMsQ0FBQyxHQUdqRSxJQUFJanJCLEVBQTBCLENBQUEsRUFDMUJtckIsRUFBU1gsRUFBTSxNQUFNWixFQUFXLEVBQ3BDLEdBQUd1QixFQUFRLElBQUk5cEQsRUFBTyxFQUFHQSxHQUFROHBELEVBQU8sT0FBUSxFQUFFOXBELEVBQ2pEMitCLEVBQU8zK0IsQ0FBSSxFQUFJNGtCLEdBQWtCa2xDLEVBQU85cEQsQ0FBSSxFQUFFLE1BQU04cEQsRUFBTzlwRCxDQUFJLEVBQUUsUUFBUSxHQUFJLEVBQUUsQ0FBQyxDQUFDLEVBR2xGLElBQUl3L0IsRUFBUTJwQixFQUFNLE1BQU1WLEVBQVUsRUFDL0JqcEIsR0FBT3VxQixHQUFvQjdnSCxFQUFHczJGLEVBQU83VCxDQUFJLEVBRzVDLElBQUlvOEIsRUFBVW9CLEVBQU0sTUFBTU4sRUFBVyxFQUlyQyxHQUhHZCxJQUFTNytHLEVBQUUsVUFBVSxFQUFJOGdILEdBQXFCaHRDLEdBQVkrcUMsRUFBUSxDQUFDLENBQUMsQ0FBQyxHQUVyRSxDQUFDNytHLEVBQUUsTUFBTSxHQUFLb2dHLEVBQVMsRUFBRSxHQUFLQSxFQUFTLEVBQUUsR0FBS0EsRUFBUyxFQUFFLEdBQUtBLEVBQVMsRUFBRSxJQUFHcGdHLEVBQUUsTUFBTSxFQUFJdTdFLEdBQWE2a0IsQ0FBUSxHQUM3R3ZwRyxFQUFLLFVBQVksR0FBS21KLEVBQUUsTUFBTSxFQUFHLENBQ25DLElBQUkrZ0gsRUFBU3JsQyxHQUFrQjE3RSxFQUFFLE1BQU0sQ0FBQyxFQUNyQ25KLEVBQUssV0FBYSxDQUFDa3FILEVBQU8sRUFBRSxJQUM5QkEsRUFBTyxFQUFFLEVBQUlscUgsRUFBSyxVQUFZLEVBQzNCa3FILEVBQU8sRUFBRSxFQUFJM2dCLEVBQVMsRUFBRSxJQUFHMmdCLEVBQU8sRUFBRSxFQUFJM2dCLEVBQVMsRUFBRSxHQUNuRDJnQixFQUFPLEVBQUUsRUFBSUEsRUFBTyxFQUFFLElBQUdBLEVBQU8sRUFBRSxFQUFJQSxFQUFPLEVBQUUsR0FDL0NBLEVBQU8sRUFBRSxFQUFJM2dCLEVBQVMsRUFBRSxJQUFHMmdCLEVBQU8sRUFBRSxFQUFJM2dCLEVBQVMsRUFBRSxHQUNuRDJnQixFQUFPLEVBQUUsRUFBSUEsRUFBTyxFQUFFLElBQUdBLEVBQU8sRUFBRSxFQUFJQSxFQUFPLEVBQUUsR0FDbEQvZ0gsRUFBRSxVQUFVLEVBQUlBLEVBQUUsTUFBTSxFQUN4QkEsRUFBRSxNQUFNLEVBQUl1N0UsR0FBYXdsQyxDQUFNLEVBRWhDLENBQ0QsT0FBR3A0RyxFQUFRLE9BQVMsSUFBRzNJLEVBQUUsT0FBTyxFQUFJMkksR0FDakM4c0YsRUFBTyxPQUFTLElBQUd6MUYsRUFBRSxTQUFTLEVBQUl5MUYsR0FDOUJ6MUYsQ0FDUixDQUVBLFNBQVNnaEgsR0FBb0J2ckIsRUFBb0MsQ0FDaEUsR0FBR0EsRUFBTyxTQUFXLEVBQUcsTUFBTyxHQUUvQixRQURJOTBGLEVBQUksc0JBQXdCODBGLEVBQU8sT0FBUyxLQUN4Qzk0RixFQUFJLEVBQUdBLEdBQUs4NEYsRUFBTyxPQUFRLEVBQUU5NEYsRUFBR2dFLEdBQUssbUJBQXFCNDZFLEdBQWFrYSxFQUFPOTRGLENBQUMsQ0FBQyxFQUFJLE1BQzVGLE9BQU9nRSxFQUFJLGVBQ1osQ0FHQSxTQUFTeS9HLEdBQXFCRCxFQUFvQm5nSCxFQUFHK3VGLEVBQWtCbnlDLEVBQWdCLENBQ3RGLElBQUl6dUMsRUFBTzJsRSxHQUFZcXNDLENBQU8sRUFDMUJweEIsRUFBRyxPQUFPbnlDLENBQUcsSUFBR215QyxFQUFHLE9BQU9ueUMsQ0FBRyxFQUFJLElBQ2xDenVDLEVBQUssV0FBVTRnRixFQUFHLE9BQU9ueUMsQ0FBRyxFQUFFLFNBQVcwM0IsR0FBWXFCLEdBQVN4bkUsRUFBSyxRQUFRLENBQUMsRUFDaEYsQ0FDQSxTQUFTa3lHLEdBQXNCRixFQUFvQnZzQixFQUFpQjV6RixFQUFHK3VGLEVBQWtCbnlDLEVBQWdCLENBQ3hHd2pFLEdBQXFCRCxFQUFRLE1BQU0sRUFBR0EsRUFBUSxRQUFRLEdBQUcsQ0FBQyxFQUFHbmdILEVBQUcrdUYsRUFBSW55QyxDQUFHLENBQ3hFLENBQ0EsU0FBU3FrRSxHQUFxQjdrQyxFQUFJMlMsRUFBSW55QyxFQUFLL2xELEVBQU04SixFQUFHLENBQ25ELElBQUl1Z0gsRUFBUyxHQUNUMXpHLEVBQVEsQ0FBQSxFQUFJcTNELEVBQVUsS0FDMUIsR0FBR2h1RSxFQUFLLFdBQWEsUUFBVWs0RixFQUFHLE9BQVEsQ0FDekMsSUFBSW95QixFQUFRcHlCLEVBQUcsV0FBV255QyxDQUFHLEVBQzdCLEdBQUksQ0FBS215QyxFQUFHLFdBQVVveUIsRUFBUXB5QixFQUFHLFNBQVMsT0FBT255QyxDQUFHLEVBQUUsVUFBWXVrRSxFQUFNLE1BQVksQ0FBRSxDQUN0RkQsRUFBUyxHQUNUMXpHLEVBQU0sU0FBVzRpRSxHQUFVdUUsR0FBVXdzQyxDQUFLLENBQUMsQ0FDM0MsQ0FFRCxHQUFHL2tDLEdBQU1BLEVBQUcsVUFBVSxFQUFHLENBQ3hCLElBQUlnbEMsRUFBZSxDQUFDLGFBQWEsRUFBRyxhQUFhLENBQUMsRUFDL0NobEMsRUFBRyxVQUFVLEVBQUUsUUFBT2dsQyxFQUFhLGFBQWUsR0FDbERobEMsRUFBRyxVQUFVLEVBQUUsT0FBTWdsQyxFQUFhLGFBQWUsR0FDcER2OEMsR0FBV0EsR0FBUyxJQUFNMlIsR0FBVSxZQUFhLEtBQU00cUMsQ0FBWSxDQUNuRSxDQUVFLENBQUNGLEdBQVUsQ0FBQ3I4QyxJQUNmbGtFLEVBQUVBLEVBQUUsTUFBTSxFQUFLNjFFLEdBQVUsVUFBVzNSLEVBQVNyM0QsQ0FBSyxFQUNuRCxDQUdBLElBQUk2ekcsR0FBcUIsQ0FBQyxVQUFXLFlBQWEsb0JBQXFCLHFCQUFxQixFQUN4RkMsR0FBb0IsQ0FDdkIsZ0JBQWlCLGFBQWMsY0FDL0IsZ0JBQWlCLGFBQWMsbUJBQy9CLGdCQUFpQixhQUNqQixPQUFRLGFBQWMsYUFDdkIsRUFDQSxTQUFTQyxHQUF3Qi9FLEVBQWUsQ0FFL0MsSUFBSTc3RyxFQUFLLENBQUMsTUFBTSxDQUFDLEVBQ2pCLE9BQUEwZ0gsR0FBbUIsUUFBUSxTQUFTdGhILEVBQUcsQ0FBS3k4RyxFQUFHejhHLENBQUMsR0FBSyxNQUFReThHLEVBQUd6OEcsQ0FBQyxJQUFHWSxFQUFFWixDQUFDLEVBQUksSUFBSSxDQUFFLEVBQ2pGdWhILEdBQWtCLFFBQVEsU0FBU3ZoSCxFQUFHLENBQUt5OEcsRUFBR3o4RyxDQUFDLEdBQUssTUFBUSxDQUFDeThHLEVBQUd6OEcsQ0FBQyxJQUFHWSxFQUFFWixDQUFDLEVBQUksSUFBSSxDQUFFLEVBRTlFeThHLEVBQUcsV0FBVTc3RyxFQUFFLFNBQVdrbUcsR0FBc0MyVixFQUFHLFFBQVEsRUFBRSxTQUFTLEVBQUUsRUFBRSxZQUFXLEdBQ2pHaG1DLEdBQVUsa0JBQW1CLEtBQU03MUUsQ0FBQyxDQUM1QyxDQUVBLFNBQVNrZ0gsR0FBb0I3Z0gsRUFBR21PLEVBQXdCczBFLEVBQU0sQ0FFN0QsUUFESXRHLEVBQVEsTUFBTSxRQUFRbjhFLENBQUMsRUFDbkJyRCxFQUFJLEVBQUdBLEdBQUt3UixFQUFLLE9BQVEsRUFBRXhSLEVBQUcsQ0FDckMsSUFBSVksRUFBTXUyRSxHQUFZNkIsR0FBU3huRSxFQUFLeFIsQ0FBQyxDQUFDLEVBQUcsRUFBSSxFQUM3QyxHQUFHLENBQUNZLEVBQUksSUFBSyxPQUNiLElBQUltbEYsSUFBUUQsR0FBUSxDQUFFLEdBQUUsS0FBSyxHQUFHLENBQUUsR0FBRWxsRixFQUFJLEVBQUUsRUFDdkNtbEYsR0FDRm5sRixFQUFJLE9BQVNtbEYsRUFBSSxPQUNkbmxGLEVBQUksV0FBVUEsRUFBSSxRQUFVLElBQUkrMkUsR0FBWS8yRSxFQUFJLFFBQVEsS0FFM0RBLEVBQUksT0FBUyxJQUFNKzJFLEdBQVkvMkUsRUFBSSxRQUFRLEVBQzNDbWxGLEVBQU0sQ0FBQyxPQUFRbmxGLEVBQUksT0FBUSxXQUFZLFVBQVUsR0FFbERBLEVBQUksSUFBTW1sRixFQUNQbmxGLEVBQUksVUFBV0EsRUFBSSxRQUFVQSxFQUFJLFFBQVMsT0FBT0EsRUFBSSxTQUV4RCxRQURJaWtILEVBQU05bEMsR0FBa0JuK0UsRUFBSSxHQUFHLEVBQzNCcWtFLEVBQUU0L0MsRUFBSSxFQUFFLEVBQUU1L0MsR0FBRzQvQyxFQUFJLEVBQUUsRUFBRSxFQUFFNS9DLEVBQUcsUUFBUU4sRUFBRWtnRCxFQUFJLEVBQUUsRUFBRWxnRCxHQUFHa2dELEVBQUksRUFBRSxFQUFFLEVBQUVsZ0QsRUFBRyxDQUNuRSxJQUFJa0UsRUFBT2dWLEdBQVksQ0FBQyxFQUFFbFosRUFBRSxFQUFFTSxDQUFDLENBQUMsRUFDN0J1YSxHQUNFbjhFLEVBQUU0aEUsQ0FBQyxJQUFHNWhFLEVBQUU0aEUsQ0FBQyxFQUFJLElBQ2I1aEUsRUFBRTRoRSxDQUFDLEVBQUVOLENBQUMsSUFBR3RoRSxFQUFFNGhFLENBQUMsRUFBRU4sQ0FBQyxFQUFJLENBQUMsRUFBRSxJQUFJLEVBQUUsTUFBUyxHQUN6Q3RoRSxFQUFFNGhFLENBQUMsRUFBRU4sQ0FBQyxFQUFFLEVBQUkvakUsSUFFUnlDLEVBQUV3bEUsQ0FBSSxJQUFHeGxFLEVBQUV3bEUsQ0FBSSxFQUFJLENBQUMsRUFBRSxJQUFJLEVBQUUsTUFBUyxHQUN6Q3hsRSxFQUFFd2xFLENBQUksRUFBRSxFQUFJam9FLEVBRWIsQ0FDRCxDQUNGLENBRUEsU0FBU3VqSCxHQUFxQlcsRUFBUSxDQUNyQyxJQUFJOWdILEVBQUksQ0FBQSxFQUNSLE9BQUMsT0FBUSxRQUFTLE1BQU8sU0FBVSxTQUFVLFFBQVEsRUFBRSxRQUFRLFNBQVN3YixFQUFHLENBQ3ZFc2xHLEVBQU90bEcsQ0FBQyxJQUFHeGIsRUFBRXdiLENBQUMsRUFBSSxXQUFXc2xHLEVBQU90bEcsQ0FBQyxDQUFDLEVBQzNDLENBQUUsRUFDTXhiLENBQ1IsQ0FDQSxTQUFTK2dILEdBQXFCRCxFQUFtQixDQUNoRCxPQUFBN0MsR0FBZ0I2QyxDQUFNLEVBQ2ZqckMsR0FBVSxjQUFlLEtBQU1pckMsQ0FBTSxDQUM3QyxDQUVBLFNBQVNqQixHQUFrQjczRyxFQUFTKzVCLEVBQU0sQ0FFekMsUUFESWkvRSxFQUFVLEdBQ05DLEVBQU8sRUFBR0EsR0FBUWwvRSxFQUFLLE9BQVEsRUFBRWsvRSxFQUFNLENBQzlDLElBQUk3VyxFQUFPajNCLEdBQVlweEMsRUFBS2svRSxDQUFJLEVBQUcsRUFBSSxFQUNwQzdXLEVBQUssU0FBUUEsRUFBSyxPQUFTMzFCLEdBQWEyMUIsRUFBSyxNQUFNLEdBQ3RELElBQUk4VyxFQUFLLFNBQVM5VyxFQUFLLElBQUssRUFBRSxFQUFFLEVBQUcrVyxFQUFLLFNBQVMvVyxFQUFLLElBQUksRUFBRSxFQUFFLEVBSzlELElBSkdBLEVBQUssZUFBY0EsRUFBSyxNQUFTLENBQUNBLEVBQUssY0FBZ0IsR0FDMUQsT0FBT0EsRUFBSyxJQUFLLE9BQU9BLEVBQUssSUFBS0EsRUFBSyxNQUFRLENBQUNBLEVBQUssTUFDbEQsQ0FBQzRXLEdBQVc1VyxFQUFLLFFBQVM0VyxFQUFVLEdBQU0vVyxHQUFjRyxFQUFLLEtBQUssR0FDckUvTyxHQUFZK08sQ0FBSSxFQUNWOFcsR0FBUUMsR0FBTW41RyxFQUFRazVHLEdBQU0sRUFBSS92QyxHQUFJaTVCLENBQUksQ0FDOUMsQ0FDRixDQUNBLFNBQVNnWCxHQUFrQjNsQyxFQUFJMTVDLEVBQWlCLENBRS9DLFFBREkvaEMsRUFBSSxDQUFDLFFBQVEsRUFBR21PLEVBQ1puUyxFQUFJLEVBQUdBLEdBQUsrbEMsRUFBSyxPQUFRLEVBQUUvbEMsR0FDN0JtUyxFQUFNNHpCLEVBQUsvbEMsQ0FBQyxLQUNqQmdFLEVBQUVBLEVBQUUsTUFBTSxFQUFLNjFFLEdBQVUsTUFBTyxLQUFNa29DLEdBQVUvaEgsRUFBR21TLENBQUcsQ0FBQyxHQUV4RCxPQUFBbk8sRUFBRUEsRUFBRSxNQUFNLEVBQUksVUFDUEEsRUFBRSxLQUFLLEVBQUUsQ0FDakIsQ0FFQSxTQUFTZ2dILEdBQXdCeHlHLEVBQWlCLENBQ2pELElBQUl4TixFQUFJLENBQUUsS0FBTXdOLEVBQUssTUFBTSxlQUFlLEdBQUcsQ0FBQSxHQUFJLENBQUMsQ0FBQyxFQUNuRCxPQUFPeE4sQ0FDUixDQUNBLFNBQVNxaEgsR0FBd0I3ekcsRUFBTWl1RSxFQUFJMlMsRUFBSW55QyxFQUFnQixDQUM5RCxJQUFJditDLEVBQU0sT0FBTzhQLEVBQUssS0FBTyxTQUFXQSxFQUFLLElBQU1vdEUsR0FBYXB0RSxFQUFLLEdBQUcsRUFDcEU0Z0YsRUFBRyxXQUFVQSxFQUFHLFNBQVksQ0FBQyxPQUFPLENBQUUsQ0FBQSxHQUN0Q0EsRUFBRyxTQUFTLFFBQU9BLEVBQUcsU0FBUyxNQUFRLElBQzNDLElBQUlrekIsRUFBeUJsekIsRUFBRyxTQUFTLE1BQ3JDanpELEVBQVF3L0MsR0FBYWo5RSxDQUFHLEVBQ3pCeTlCLEVBQU0sRUFBRSxHQUFLQSxFQUFNLEVBQUUsSUFBS0EsRUFBTSxFQUFFLEVBQUl3L0MsR0FBYWMsRUFBRyxNQUFNLENBQUMsRUFBRSxFQUFFLEVBQUcvOUUsRUFBTWs5RSxHQUFhei9DLENBQUssR0FDL0YsUUFBUW4vQixFQUFJLEVBQUdBLEVBQUlzbEgsRUFBTSxPQUFRLEVBQUV0bEgsRUFBRyxDQUNyQyxJQUFJNUYsRUFBT2tySCxFQUFNdGxILENBQUMsRUFDbEIsR0FBRzVGLEVBQUssTUFBUSx5QkFDYkEsRUFBSyxPQUFTNmxELEVBQ2pCLENBQUE3bEQsRUFBSyxJQUFNLElBQU1nNEYsRUFBRyxXQUFXbnlDLENBQUcsRUFBSSxLQUFPditDLEVBQUssTUFDbEQsQ0FDRCxPQUFHMUIsR0FBS3NsSCxFQUFNLFFBQVFBLEVBQU0sS0FBSyxDQUFFLEtBQU0sd0JBQXlCLE1BQU9ybEUsRUFBSyxJQUFLLElBQU1teUMsRUFBRyxXQUFXbnlDLENBQUcsRUFBSSxLQUFPditDLENBQUcsQ0FBRyxFQUNwSG00RSxHQUFVLGFBQWMsS0FBTSxDQUFDLElBQUluNEUsQ0FBRyxDQUFDLENBQy9DLENBSUEsSUFBSTZqSCxHQUFhLDBDQUNqQixTQUFTM0IsR0FBd0JweUcsRUFBTTRnRixFQUFrQixDQUNwREEsRUFBRyxRQUFPQSxFQUFHLE1BQVEsQ0FBQyxDQUFBLENBQUUsSUFDM0I1Z0YsRUFBSyxNQUFNK3pHLEVBQVUsR0FBRyxDQUFFLEdBQUUsUUFBUSxTQUFTLEVBQWN2bEgsRUFBYyxDQUN6RSxJQUFJOGxELEVBQU1xeEIsR0FBWSxDQUFDLEVBRW5CaWIsRUFBRyxNQUFNcHlGLENBQUMsSUFBR295RixFQUFHLE1BQU1weUYsQ0FBQyxFQUFJLElBRTVCLENBQUM4bEQsRUFBSSxZQUFXc3NDLEVBQUcsTUFBTXB5RixDQUFDLEVBQUUsS0FBTyxDQUFDOGxELEVBQUksV0FFeEMyeUIsR0FBYTN5QixFQUFJLFdBQVcsSUFBR3NzQyxFQUFHLE1BQU1weUYsQ0FBQyxFQUFFLElBQU0sR0FDdEQsQ0FBRSxDQUNGLENBQ0EsU0FBU3dsSCxHQUF3Qi9sQyxFQUFJdmxGLEVBQU0rbEQsRUFBS215QyxFQUFlLENBQzlELElBQUlxekIsRUFBUyxDQUFDLGVBQWUsR0FBRyxFQUVoQyxTQUFNcnpCLEdBQUksQ0FBRSxHQUFFLFVBQVUsSUFBSSxPQUFPLENBQUEsR0FBSSxDQUFDLElBQUdxekIsRUFBTSxZQUFjcnpCLEVBQUcsU0FBUyxNQUFNLENBQUMsRUFBRSxJQUFNLElBQU0sS0FDekZ2WSxHQUFVLGFBQWNBLEdBQVUsWUFBYSxLQUFNNHJDLENBQUssRUFBRyxDQUFBLENBQUUsQ0FDdkUsQ0FFQSxTQUFTQyxHQUFrQnBpRixFQUFlNWhDLEVBQUsrOUUsRUFBSXZsRixFQUFnQyxDQUVsRixHQURHb3BDLEVBQUssR0FBR204QyxFQUFHLFdBQVcsRUFBRSxLQUFLLENBQUMvOUUsRUFBSzRoQyxFQUFLLENBQUMsQ0FBQyxFQUMxQ0EsRUFBSyxJQUFNLFFBQWEsT0FBT0EsRUFBSyxHQUFNLFVBQVlBLEVBQUssSUFBTSxLQUFPLENBQUNBLEVBQUssRUFBRyxNQUFPLEdBQzNGLElBQUlrK0IsRUFBSyxHQUNMbWtELEVBQU9yaUYsRUFBSyxFQUFHc2lGLEVBQU90aUYsRUFBSyxFQUMvQixHQUFHQSxFQUFLLElBQU0sSUFBSyxPQUFPQSxFQUFLLEVBQUMsQ0FDL0IsSUFBSyxJQUFLaytCLEVBQUtsK0IsRUFBSyxFQUFJLElBQU0sSUFBSyxNQUNuQyxJQUFLLElBQUtrK0IsRUFBSyxHQUFHbCtCLEVBQUssRUFBRyxNQUMxQixJQUFLLElBQUtrK0IsRUFBSzBkLEdBQUs1N0MsRUFBSyxDQUFDLEVBQUcsTUFDN0IsSUFBSyxJQUNEcHBDLEdBQVFBLEVBQUssVUFBV3NuRSxFQUFLdVQsR0FBVXp4QyxFQUFLLEVBQUcsRUFBRSxFQUFFLFlBQVcsR0FFaEVBLEVBQU82eEMsR0FBSTd4QyxDQUFJLEVBQ2ZBLEVBQUssRUFBSSxJQUNUaytCLEVBQUssSUFBSWwrQixFQUFLLEVBQUk4d0MsR0FBUVcsR0FBVXp4QyxFQUFLLENBQUMsQ0FBQyxJQUV6QyxPQUFPQSxFQUFLLEVBQU0sTUFBYUEsRUFBSyxFQUFJNjNCLEdBQVUsRUFBRSxHQUN2RCxNQUNELFFBQVNxRyxFQUFLbCtCLEVBQUssRUFBRyxLQUN0QixDQUNELElBQUl4akIsRUFBSTY1RCxHQUFTLElBQUszQixHQUFVeFcsQ0FBRSxDQUFDLEVBQUd4OUQsRUFBSyxDQUFDLEVBQUV0QyxDQUFHLEVBRTdDb3pGLEVBQUtzdEIsR0FBZWxvSCxFQUFLLFFBQVNvcEMsRUFBTXBwQyxDQUFJLEVBRWhELE9BREc0NkYsSUFBTyxJQUFHOXdGLEVBQUUsRUFBSTh3RixHQUNaeHhELEVBQUssRUFBQyxDQUNaLElBQUssSUFBSyxNQUNWLElBQUssSUFBS3QvQixFQUFFLEVBQUksSUFBSyxNQUNyQixJQUFLLElBQUtBLEVBQUUsRUFBSSxJQUFLLE1BQ3JCLElBQUssSUFBS0EsRUFBRSxFQUFJLElBQUssTUFDckIsSUFBSyxJQUFLLE1BQ1YsUUFBUyxHQUFHcy9CLEVBQUssR0FBSyxLQUFNLENBQUUsT0FBT0EsRUFBSyxFQUFHLEtBQVEsQ0FDcEQsR0FBR0EsRUFBSyxFQUFFLE9BQVMsTUFBTyxNQUFNLElBQUksTUFBTSw4Q0FBOEMsRUFDeEYsR0FBR3BwQyxHQUFRQSxFQUFLLFFBQVMsQ0FDeEI0bEIsRUFBSTY1RCxHQUFTLElBQUssR0FBR2tvQyxHQUFXM25ILEVBQUssUUFBU29wQyxFQUFLLEVBQUdwcEMsRUFBSyxVQUFVLENBQUMsRUFDdEU4SixFQUFFLEVBQUksSUFBSyxLQUNYLENBQ0RBLEVBQUUsRUFBSSxNQUFPLEtBQ2QsQ0FFRCxHQURHcy9CLEVBQUssR0FBS3FpRixJQUFRcmlGLEVBQUssRUFBSXFpRixFQUFNcmlGLEVBQUssRUFBSXNpRixHQUMxQyxPQUFPdGlGLEVBQUssR0FBSyxVQUFZQSxFQUFLLEVBQUcsQ0FDdkMsSUFBSTg4QixFQUFLOThCLEVBQUssR0FBS0EsRUFBSyxFQUFFLE1BQU0sRUFBRzVoQyxFQUFJLE1BQU0sR0FBS0EsRUFBTSxDQUFDLEVBQUUsUUFBUyxJQUFJNGhDLEVBQUssQ0FBQyxFQUFJLEtBQ2xGeGpCLEVBQUkrNUQsR0FBVSxJQUFLN0IsR0FBVTEwQyxFQUFLLENBQUMsRUFBRzg4QixDQUFFLEdBQUs5OEIsRUFBSyxHQUFLLEtBQU94akIsRUFBSSxHQUNsRSxDQUNELE9BQUd3akIsRUFBSyxHQUFHbThDLEVBQUcsUUFBUSxFQUFFLEtBQUssQ0FBQy85RSxFQUFLNGhDLEVBQUssQ0FBQyxDQUFDLEVBQ3ZDQSxFQUFLLElBQUd0L0IsRUFBRSxHQUFLLEdBQ1g2MUUsR0FBVSxJQUFLLzVELEVBQUc5YixDQUFDLENBQzNCLENBRUEsSUFBSTgvRyxHQUFrQyxVQUFXLENBQ2hELElBQUkrQixFQUFZLG9CQUFxQkMsRUFBVyxtQkFDNUM3ZSxFQUFTLHFCQUFzQjhlLEVBQVUseUNBQ3pDQyxFQUFXLHVCQUNYQyxFQUFVaHRDLEdBQVMsR0FBRyxFQUFHaXRDLEVBQVVqdEMsR0FBUyxHQUFHLEVBRXBELE9BQU8sU0FBMkJrdEMsRUFBa0I5aUgsRUFBR25KLEVBQU1rakcsRUFBaUJ1UixFQUFRRCxFQUFRLENBVzdGLFFBVkl2dUMsRUFBSyxFQUFHcGtDLEVBQUksR0FBSXFILEVBQTBCLENBQUEsRUFBSWdqRixFQUEwQixDQUFFLEVBQUVubUUsRUFBSSxFQUFHamdELEVBQUUsRUFBRzAvRCxFQUFHLEVBQUd4N0QsRUFBRSxHQUFJbkYsRUFDcEcrbUQsRUFBS3VnRSxFQUFPLEVBQUdDLEVBQU8sRUFDdEJDLEVBQU1DLEVBQ05sRSxFQUFRLEVBQUdDLEVBQVMsRUFDcEJrRSxHQUFZLE1BQU0sUUFBUS9YLEVBQU8sTUFBTSxFQUFHclYsR0FDMUNxdEIsR0FBb0MsQ0FBQSxFQUNwQ0MsR0FBVSxDQUFBLEVBQ1ZubkMsR0FBUSxNQUFNLFFBQVFuOEUsQ0FBQyxFQUN2QjRpQyxFQUEwQixDQUFBLEVBQUkyZ0YsR0FBUyxDQUFBLEVBQUlDLEVBQVUsR0FDckRDLEVBQWEsQ0FBQyxDQUFDNXNILEVBQUssV0FDaEI2c0gsRUFBT1osRUFBTSxNQUFNTCxDQUFRLEVBQUdueEMsRUFBSyxFQUFHcXlDLEVBQVVELEVBQUssT0FBUXB5QyxHQUFNcXlDLEVBQVMsRUFBRXJ5QyxFQUFJLENBQ3pGNTRDLEVBQUlnckYsRUFBS3B5QyxDQUFFLEVBQUUsS0FBSSxFQUNqQixJQUFJc3lDLEVBQU9sckYsRUFBRSxPQUNiLEdBQUdrckYsSUFBUyxFQUdaLEtBQUlDLEVBQVUsRUFDZEMsRUFBTSxJQUFJaG5ELEVBQUssRUFBR0EsRUFBSzhtRCxFQUFNLEVBQUU5bUQsRUFBSSxPQUEyQnBrQyxFQUFFb2tDLENBQUUsRUFBQyxDQUNsRSxJQUFLLElBQ0osR0FBK0Jwa0MsRUFBRW9rQyxFQUFHLENBQUMsR0FBSyxJQUFLLENBQUUsRUFBRUEsRUFBSSxNQUFNZ25ELENBQU8sQ0FDcEUsR0FBR2p0SCxHQUFRQSxFQUFLLFdBQVksQ0FJM0IsR0FGQTRyRCxFQUFNcXhCLEdBQVlwN0MsRUFBRSxNQUFNbXJGLEVBQVEvbUQsQ0FBRSxFQUFHLEVBQUksRUFDM0NrbUQsRUFBT3ZnRSxFQUFJLEdBQUssS0FBTyxTQUFTQSxFQUFJLEVBQUcsRUFBRSxFQUFJdWdFLEVBQUssRUFBR0MsRUFBTyxHQUN6RHBzSCxFQUFLLFdBQWFBLEVBQUssVUFBWW1zSCxFQUFNLFNBQzVDTyxHQUFTLENBQUUsRUFBRUMsRUFBVSxHQUNwQi9nRSxFQUFJLEtBQU0rZ0UsRUFBVSxHQUFNRCxHQUFPLElBQU0sV0FBVzlnRSxFQUFJLEVBQUUsRUFBRzhnRSxHQUFPLElBQU10bkIsR0FBTXNuQixHQUFPLEdBQUcsR0FDeEY5Z0UsRUFBSSxRQUFVLE1BQU8rZ0UsRUFBVSxHQUFNRCxHQUFPLE9BQVMsSUFDckQ5Z0UsRUFBSSxjQUFnQixPQUFRK2dFLEVBQVUsR0FBTUQsR0FBTyxNQUFRLENBQUM5Z0UsRUFBSSxjQUNoRStnRSxJQUFTNWdGLEVBQUtvZ0YsRUFBSyxDQUFDLEVBQUlPLEdBQzNCLENBQ0QsTUFDRCxJQUFLLElBQVlNLEVBQVUvbUQsRUFBSSxLQUMvQixDQUNELEdBQUcrbUQsR0FBVy9tRCxFQUFJLE1BR2xCLEdBRkFyYSxFQUFNcXhCLEdBQVlwN0MsRUFBRSxNQUFNbXJGLEVBQVEvbUQsQ0FBRSxFQUFHLEVBQUksRUFDM0NrbUQsRUFBT3ZnRSxFQUFJLEdBQUssS0FBTyxTQUFTQSxFQUFJLEVBQUcsRUFBRSxFQUFJdWdFLEVBQUssRUFBR0MsRUFBTyxHQUN6RCxFQUFBcHNILEVBQUssV0FBYUEsRUFBSyxVQUFZbXNILEdBQ3RDLENBQUdqcEIsRUFBTSxFQUFFLEVBQUlpcEIsRUFBTyxJQUFHanBCLEVBQU0sRUFBRSxFQUFJaXBCLEVBQU8sR0FDekNqcEIsRUFBTSxFQUFFLEVBQUlpcEIsRUFBTyxJQUFHanBCLEVBQU0sRUFBRSxFQUFJaXBCLEVBQU8sR0FFekNuc0gsR0FBUUEsRUFBSyxhQUNmMHNILEdBQVMsQ0FBRSxFQUFFQyxFQUFVLEdBQ3BCL2dFLEVBQUksS0FBTStnRSxFQUFVLEdBQU1ELEdBQU8sSUFBTSxXQUFXOWdFLEVBQUksRUFBRSxFQUFHOGdFLEdBQU8sSUFBTXRuQixHQUFNc25CLEdBQU8sR0FBRyxHQUN4RjlnRSxFQUFJLFFBQVUsTUFBTytnRSxFQUFVLEdBQU1ELEdBQU8sT0FBUyxJQUNyRDlnRSxFQUFJLGNBQWdCLE9BQVErZ0UsRUFBVSxHQUFNRCxHQUFPLE1BQVEsQ0FBQzlnRSxFQUFJLGNBQ2hFK2dFLElBQVM1Z0YsRUFBS29nRixFQUFLLENBQUMsRUFBSU8sS0FJNUJ4akYsRUFBUXJILEVBQUUsTUFBTW9rQyxDQUFFLEVBQUUsTUFBTTBsRCxDQUFTLEVBQ25DLFFBQVF1QixFQUFTLEVBQUdBLEdBQVVoa0YsRUFBTSxRQUFxQkEsRUFBTWdrRixDQUFNLEVBQUUsS0FBTSxFQUFDLE9BQU8sQ0FBQyxHQUFLLElBQS9DLEVBQUVBLEVBQVEsQ0FFdEQsSUFEQWhrRixFQUFRQSxFQUFNLE1BQU1na0YsQ0FBTSxFQUN0QmpuRCxFQUFLLEVBQUdBLEdBQU0vOEIsRUFBTSxPQUFRLEVBQUUrOEIsRUFFakMsR0FEQXBrQyxFQUFJcUgsRUFBTSs4QixDQUFFLEVBQUUsS0FBSSxFQUNmcGtDLEVBQUUsU0FBVyxFQUdoQixJQUZBcXFGLEVBQU9ycUYsRUFBRSxNQUFNa3JFLENBQU0sRUFBR2huRCxFQUFNa2dCLEVBQUluZ0UsRUFBRSxFQUFHMC9ELEVBQUcsRUFDMUMzakMsRUFBSSxPQUFTQSxFQUFFLE1BQU0sRUFBRSxDQUFDLEdBQUcsSUFBSSxJQUFJLElBQU1BLEVBQ3RDcXFGLEdBQVEsTUFBUUEsRUFBSyxTQUFXLEVBQUcsQ0FFckMsSUFEQW5tRSxFQUFNLEVBQUcvN0MsRUFBRWtpSCxFQUFLLENBQUMsRUFDYnBtSCxFQUFFLEVBQUdBLEdBQUtrRSxFQUFFLFFBQ1gsR0FBQXc3RCxFQUFHeDdELEVBQUUsV0FBV2xFLENBQUMsRUFBRSxJQUFNLEdBQUswL0QsRUFBSyxJQURoQixFQUFFMS9ELEVBRXpCaWdELEVBQU0sR0FBR0EsRUFBTXlmLEVBRWhCLEVBQUV6ZixFQUNGcW1FLEVBQU9ybUUsQ0FDUCxLQUFNLEVBQUVxbUUsRUFDVCxJQUFJdG1ILEVBQUksRUFBR0EsR0FBSys3QixFQUFFLFFBQWdCQSxFQUFFLFdBQVcvN0IsQ0FBQyxJQUFNLEdBQTVCLEVBQUVBLEVBQUcsQ0FPL0IsR0FQaUUsRUFBRUEsRUFDbkU4bEQsRUFBTXF4QixHQUFZcDdDLEVBQUUsTUFBTSxFQUFFLzdCLENBQUMsRUFBRyxFQUFJLEVBQ2hDOGxELEVBQUksSUFBR0EsRUFBSSxFQUFJKzNCLEdBQVksQ0FBQyxFQUFFd29DLEVBQUssRUFBRyxFQUFFQyxDQUFJLENBQUMsR0FDakRwaUgsRUFBSTYzQixFQUFFLE1BQU0vN0IsQ0FBQyxFQUNiakIsRUFBSyxDQUFDLEVBQUUsRUFBRSxHQUVOcW5ILEVBQUtsaUgsRUFBRSxNQUFNK2hILENBQU8sSUFBSyxNQUE4QkcsRUFBSyxDQUFDLElBQU0sS0FBSXJuSCxFQUFFLEVBQUU0NEUsR0FBWXl1QyxFQUFLLENBQUMsQ0FBQyxHQUMvRmxzSCxFQUFLLFlBQWEsQ0FDcEIsSUFBSWtzSCxFQUFLbGlILEVBQUUsTUFBTWdpSCxDQUFPLElBQUssTUFBOEJFLEVBQUssQ0FBQyxJQUFNLElBSXRFLEdBRkFybkgsRUFBRSxFQUFFNDRFLEdBQVlxQixHQUFTb3RDLEVBQUssQ0FBQyxDQUFDLENBQUMsRUFBRSxRQUFRLFFBQVM7QUFBQSxDQUFJLEVBQ3BEbHNILEVBQUssT0FBTTZFLEVBQUUsRUFBSW02RyxHQUFNbjZHLEVBQUUsQ0FBQyxHQUNjcW5ILEVBQUssQ0FBQyxFQUFFLFFBQVEsV0FBVyxFQUFJLEdBQzFFcm5ILEVBQUUsR0FBS21GLEVBQUUsTUFBTThoSCxDQUFRLEdBQUcsQ0FBQSxHQUFJLENBQUMsRUFDNUJqbkgsRUFBRSxFQUFFLFFBQVEsR0FBRyxFQUFJLElBQUkybkgsR0FBTyxLQUFLLENBQUMzbkMsR0FBa0JoZ0YsRUFBRSxDQUFDLEVBQUdBLEVBQUUsQ0FBQyxDQUFDLFVBQ2pCcW5ILEVBQUssQ0FBQyxFQUFFLFFBQVEsWUFBWSxFQUFJLEdBQUksQ0FFdEZJLEVBQU9ydkMsR0FBWWl2QyxFQUFLLENBQUMsQ0FBQyxFQUMxQixJQUFJaUIsRUFBTzF2QyxHQUFZcUIsR0FBU290QyxFQUFLLENBQUMsQ0FBQyxDQUFDLEVBQ3BDbHNILEVBQUssT0FBTW10SCxFQUFPbk8sR0FBTW1PLENBQUksR0FDaENWLEdBQVEsU0FBU0gsRUFBSyxHQUFJLEVBQUUsQ0FBQyxFQUFJLENBQUNBLEVBQU1hLEVBQU12aEUsRUFBSSxDQUFDLENBQ25ELE9BQ1NzZ0UsRUFBS2xpSCxFQUFFLE1BQU0sWUFBWSxLQUNuQ3NpSCxFQUFPcnZDLEdBQVlpdkMsRUFBSyxDQUFDLENBQUMsRUFDdkJPLEdBQVFILEVBQUssRUFBRSxJQUFHem5ILEVBQUUsRUFBSWs2RyxHQUFtQjBOLEdBQVFILEVBQUssRUFBRSxFQUFFLENBQUMsRUFBR0csR0FBUUgsRUFBSyxFQUFFLEVBQUUsQ0FBQyxFQUFjMWdFLEVBQUksQ0FBQyxJQUd6RyxJQUFJd2hFLEdBQU81b0MsR0FBWTU0QixFQUFJLENBQUMsRUFDNUIsSUFBSTlsRCxFQUFJLEVBQUdBLEVBQUkwbUgsR0FBTyxPQUFRLEVBQUUxbUgsRUFDNUJzbkgsR0FBSyxHQUFLWixHQUFPMW1ILENBQUMsRUFBRSxDQUFDLEVBQUUsRUFBRSxHQUFLc25ILEdBQUssR0FBS1osR0FBTzFtSCxDQUFDLEVBQUUsQ0FBQyxFQUFFLEVBQUUsR0FDdERzbkgsR0FBSyxHQUFLWixHQUFPMW1ILENBQUMsRUFBRSxDQUFDLEVBQUUsRUFBRSxHQUFLc25ILEdBQUssR0FBS1osR0FBTzFtSCxDQUFDLEVBQUUsQ0FBQyxFQUFFLEVBQUUsSUFDekRqQixFQUFFLEVBQUkybkgsR0FBTzFtSCxDQUFDLEVBQUUsQ0FBQyxFQUNwQixDQUVELEdBQUc4bEQsRUFBSSxHQUFLLE1BQVEvbUQsRUFBRSxJQUFNLE9BQzNCLEdBQUdBLEVBQUUsR0FBS0EsRUFBRSxFQUNYQSxFQUFFLEVBQUksRUFBR0EsRUFBRSxFQUFJLFlBQ0wrbkgsRUFDTi9uSCxFQUFFLEVBQUksUUFEWSxlQUduQkEsRUFBRSxFQUFJK21ELEVBQUksR0FBSyxJQUlwQixPQUhHczNDLEVBQU0sRUFBRSxFQUFJa3BCLElBQU1scEIsRUFBTSxFQUFFLEVBQUlrcEIsR0FDOUJscEIsRUFBTSxFQUFFLEVBQUlrcEIsSUFBTWxwQixFQUFNLEVBQUUsRUFBSWtwQixHQUUxQnZuSCxFQUFFLEVBQUMsQ0FDVCxJQUFLLElBQ0osR0FBR0EsRUFBRSxHQUFLLElBQU1BLEVBQUUsR0FBSyxLQUFNLENBQzVCLEdBQUcsQ0FBQytuSCxFQUFZLFNBQ2hCL25ILEVBQUUsRUFBSSxHQUNOLE1BQU1BLEVBQUUsRUFBSSxXQUFXQSxFQUFFLENBQUMsRUFDM0IsTUFDRCxJQUFLLElBQ0osR0FBRyxPQUFPQSxFQUFFLEVBQUssSUFBYSxDQUM3QixHQUFHLENBQUMrbkgsRUFBWSxTQUNoQi9uSCxFQUFFLEVBQUksR0FDWixNQUNNd25ILEVBQU92ekIsR0FBSyxTQUFTajBGLEVBQUUsRUFBRyxFQUFFLENBQUMsRUFDN0JBLEVBQUUsRUFBSXduSCxFQUFLLEVBQ1h4bkgsRUFBRSxFQUFJd25ILEVBQUssRUFDUnJzSCxFQUFLLFdBQVU2RSxFQUFFLEVBQUl3bkgsRUFBSyxHQUU5QixNQUNELElBQUssTUFDSnhuSCxFQUFFLEVBQUksSUFDTkEsRUFBRSxFQUFLQSxFQUFFLEdBQUcsS0FBUWk2RSxHQUFTajZFLEVBQUUsQ0FBQyxFQUFJLEdBQ2pDN0UsRUFBSyxXQUFVNkUsRUFBRSxFQUFJbzVFLEdBQVdwNUUsRUFBRSxDQUFDLEdBQ3RDLE1BQ0QsSUFBSyxZQUNKcW5ILEVBQU9saUgsRUFBRSxNQUFNNmhILENBQU8sRUFDdEJobkgsRUFBRSxFQUFJLElBQ0hxbkgsR0FBUSxPQUFTRyxFQUFPeGUsR0FBU3FlLEVBQUssQ0FBQyxDQUFDLElBQzFDcm5ILEVBQUUsRUFBSXduSCxFQUFLLEVBQ1Jyc0gsRUFBSyxXQUFVNkUsRUFBRSxFQUFJd25ILEVBQUssSUFDdkJ4bkgsRUFBRSxFQUFJLEdBQ2IsTUFDRCxJQUFLLElBQUtBLEVBQUUsRUFBSTA1RSxHQUFhMTVFLEVBQUUsQ0FBQyxFQUFHLE1BQ25DLElBQUssSUFDRDdFLEVBQUssVUFBVzZFLEVBQUUsRUFBSWcyRSxHQUFVaDJFLEVBQUUsRUFBRyxDQUFDLEdBQ2xDQSxFQUFFLEVBQUlxMUUsR0FBUVcsR0FBVWgyRSxFQUFFLEVBQUcsQ0FBQyxDQUFDLEVBQUdBLEVBQUUsRUFBSSxLQUMvQyxNQUVELElBQUssS0FDRCxDQUFDN0UsR0FBUUEsRUFBSyxXQUFhLE1BQU82RSxFQUFFLEVBQUlBLEVBQUUsR0FDN0NBLEVBQUUsRUFBSWdtRixHQUFNaG1GLEVBQUUsQ0FBQyxFQUFHLEtBQ25CLENBZUQsR0FiQXVqSCxFQUFRQyxFQUFTLEVBQ2pCbHBCLEdBQUssS0FDRm90QixJQUFhM2dFLEVBQUksSUFBTSxTQUN6QnV6QyxHQUFLcVYsRUFBTyxPQUFPNW9ELEVBQUksQ0FBQyxFQUNyQnV6QyxJQUFNLE9BQ0xBLEdBQUcsVUFBWSxPQUFNaXBCLEVBQVFqcEIsR0FBRyxVQUNoQ24vRixFQUFLLFlBQ0ptL0YsR0FBRyxRQUFVLE9BQU1rcEIsRUFBU2xwQixHQUFHLFVBSXJDZ3BCLEdBQVl0akgsRUFBR3VqSCxFQUFPQyxFQUFRcm9ILEVBQU15MEcsRUFBUUQsQ0FBTSxFQUMvQ3gwRyxFQUFLLFdBQWF1c0gsSUFBYTFuSCxFQUFFLEdBQUssS0FBT2dpRSxHQUFZNUYsR0FBVW1uRCxDQUFLLENBQUMsSUFBS3ZqSCxFQUFFLEVBQUksSUFBS0EsRUFBRSxFQUFJeTFFLEdBQVF6MUUsRUFBRSxDQUFDLEdBQzFHK21ELEVBQUksSUFBTTVyRCxFQUFLLE9BQVEsQ0FDekIsSUFBSXU2RyxJQUFNdjZHLEVBQUssT0FBTyxNQUFNLENBQUUsR0FBRSxDQUFDNHJELEVBQUksR0FBRyxDQUFDLEVBQ3RDMnVELElBQU1BLEdBQUcsTUFBUSxXQUFVMTFHLEVBQUUsRUFBSSxHQUNwQyxDQUNELEdBQUd5Z0YsR0FBTyxDQUNULElBQUkrbkMsRUFBSzdvQyxHQUFZNTRCLEVBQUksQ0FBQyxFQUN0QnppRCxFQUFFa2tILEVBQUcsQ0FBQyxJQUFHbGtILEVBQUVra0gsRUFBRyxDQUFDLEVBQUksSUFDdkJsa0gsRUFBRWtrSCxFQUFHLENBQUMsRUFBRUEsRUFBRyxDQUFDLEVBQUl4b0gsQ0FDaEIsTUFBTXNFLEVBQUV5aUQsRUFBSSxDQUFDLEVBQUkvbUQsSUFFbkIsQ0FDRWtuQyxFQUFLLE9BQVMsSUFBRzVpQyxFQUFFLE9BQU8sRUFBSTRpQyxFQUNsQyxDQUFJLEVBQUEsRUFFSixTQUFTdWhGLEdBQWtCL25DLEVBQWtCdmxGLEVBQU0rbEQsRUFBZ0JteUMsRUFBd0MsQ0FDMUcsSUFBSXB1RixFQUFzQixDQUFBLEVBQUliLEVBQXNCLEdBQUlnOEIsRUFBUTQvQyxHQUFrQlUsRUFBRyxNQUFNLENBQUMsRUFBR244QyxFQUFLLEdBQUk1aEMsRUFBS3c5RCxFQUFLLEdBQUluNUIsRUFBeUIsQ0FBQSxFQUFJay9CLEVBQUUsRUFBR04sRUFBRSxFQUFHMStCLEVBQU93NUMsRUFBRyxPQUFPLEVBQzFLRCxFQUFRLE1BQU0sUUFBUUMsQ0FBRSxFQUN4QmdvQyxFQUFVLENBQUMsRUFBRXZvRCxDQUFFLEVBQVl6NkQsRUFBaUJpdEMsRUFBUyxHQUN6RCxJQUFJaXpCLEVBQUl4bEMsRUFBTSxFQUFFLEVBQUd3bEMsR0FBS3hsQyxFQUFNLEVBQUUsRUFBRyxFQUFFd2xDLEVBQUc1K0IsRUFBSzQrQixDQUFDLEVBQUlzWixHQUFXdFosQ0FBQyxFQUM5RCxJQUFJTSxFQUFJOWxDLEVBQU0sRUFBRSxFQUFHOGxDLEdBQUs5bEMsRUFBTSxFQUFFLEVBQUcsRUFBRThsQyxFQUFHLENBR3ZDLElBRkE5aEUsRUFBSSxDQUFBLEVBQ0orN0QsRUFBS2dmLEdBQVdqWixDQUFDLEVBQ2JOLEVBQUl4bEMsRUFBTSxFQUFFLEVBQUd3bEMsR0FBS3hsQyxFQUFNLEVBQUUsRUFBRyxFQUFFd2xDLEVBQUcsQ0FDdkNqakUsRUFBTXFrQyxFQUFLNCtCLENBQUMsRUFBSXpGLEVBQ2hCLElBQUl3b0QsRUFBUWxvQyxHQUFTQyxFQUFHeGEsQ0FBQyxHQUFHLENBQUUsR0FBRU4sQ0FBQyxFQUFHOGEsRUFBRy85RSxDQUFHLEVBQ3ZDZ21ILElBQVUsU0FDVHBrRixFQUFPb2lGLEdBQWtCZ0MsRUFBT2htSCxFQUFLKzlFLEVBQUl2bEYsQ0FBYSxJQUFNLE1BQU1pSixFQUFFLEtBQUttZ0MsQ0FBSSxDQUNqRixFQUNFbmdDLEVBQUUsT0FBUyxHQUFNOGlDLEdBQVFBLEVBQUtnL0IsQ0FBQyxLQUNqQ3dpRCxFQUFVLENBQUMsRUFBRXZvRCxDQUFFLEVBQ1pqNUIsR0FBUUEsRUFBS2cvQixDQUFDLElBQ2hCeGdFLEVBQU13aEMsRUFBS2cvQixDQUFDLEVBQ1R4Z0UsRUFBSSxTQUFRZ2pILEVBQU8sT0FBUyxHQUMvQi8xRSxFQUFTLEdBQ05qdEMsRUFBSSxJQUFLaXRDLEVBQVN1dUQsR0FBTXg3RixFQUFJLEdBQUcsRUFDMUJBLEVBQUksTUFBS2l0QyxFQUFTanRDLEVBQUksS0FDM0JpdEMsRUFBUyxLQUFNKzFFLEVBQU8sR0FBSy8xRSxFQUFRKzFFLEVBQU8sYUFBZSxHQUN6RGhqSCxFQUFJLFFBQVNnakgsRUFBTyxhQUFlaGpILEVBQUksUUFFM0NULEVBQUVBLEVBQUUsTUFBTSxFQUFLNjFFLEdBQVUsTUFBTzEyRSxFQUFFLEtBQUssRUFBRSxFQUFHc2tILENBQU0sRUFFbkQsQ0FDRCxHQUFHeGhGLEVBQU0sS0FBTWcvQixFQUFJaC9CLEVBQUssT0FBUSxFQUFFZy9CLEVBQzlCaC9CLEdBQVFBLEVBQUtnL0IsQ0FBQyxJQUNoQndpRCxFQUFVLENBQUMsRUFBRXhpRCxFQUFFLENBQUMsRUFDaEJ4Z0UsRUFBTXdoQyxFQUFLZy9CLENBQUMsRUFDVHhnRSxFQUFJLFNBQVFnakgsRUFBTyxPQUFTLEdBQy9CLzFFLEVBQVMsR0FDTGp0QyxFQUFJLElBQUtpdEMsRUFBU3V1RCxHQUFNeDdGLEVBQUksR0FBRyxFQUMxQkEsRUFBSSxNQUFLaXRDLEVBQVNqdEMsRUFBSSxLQUMzQml0QyxFQUFTLEtBQU0rMUUsRUFBTyxHQUFLLzFFLEVBQVErMUUsRUFBTyxhQUFlLEdBQ3pEaGpILEVBQUksUUFBU2dqSCxFQUFPLGFBQWVoakgsRUFBSSxPQUMzQ1QsRUFBRUEsRUFBRSxNQUFNLEVBQUs2MUUsR0FBVSxNQUFPLEdBQUk0dEMsQ0FBTSxHQUc1QyxPQUFPempILEVBQUUsS0FBSyxFQUFFLENBQ2pCLENBRUEsU0FBUzJqSCxHQUFhMW5FLEVBQWdCL2xELEVBQU1rNEYsRUFBaUJ0TSxFQUFpQixDQUM3RSxJQUFJOWhGLEVBQUksQ0FBQzR5RSxHQUFZaUQsR0FBVSxZQUFhLEtBQU0sQ0FDakQsTUFBU08sR0FBVyxDQUFDLEVBQ3JCLFVBQVdELEdBQU0sQ0FDakIsQ0FBQSxDQUFDLEVBQ0U5MkUsRUFBSSt1RixFQUFHLFdBQVdueUMsQ0FBRyxFQUFHcWpELEVBQU8sRUFBR3NrQixFQUFRLEdBQzFDbm9DLEVBQUsyUyxFQUFHLE9BQU8vdUYsQ0FBQyxFQUNqQm84RSxHQUFNLE9BQU1BLEVBQUssSUFDcEIsSUFBSS85RSxFQUFNKzlFLEVBQUcsTUFBTSxHQUFLLEtBQ3BCdGdELEVBQVE0L0MsR0FBa0JyOUUsQ0FBRyxFQUNqQyxHQUFHeTlCLEVBQU0sRUFBRSxFQUFJLE9BQVVBLEVBQU0sRUFBRSxFQUFJLFFBQVMsQ0FDN0MsR0FBR2psQyxFQUFLLElBQUssTUFBTSxJQUFJLE1BQU0sU0FBV3dILEVBQU0scUNBQXFDLEVBQ25GeTlCLEVBQU0sRUFBRSxFQUFJLEtBQUssSUFBSUEsRUFBTSxFQUFFLEVBQUcsS0FBTSxFQUN0Q0EsRUFBTSxFQUFFLEVBQUksS0FBSyxJQUFJQSxFQUFNLEVBQUUsRUFBRyxPQUFPLEVBQ3ZDejlCLEVBQU1rOUUsR0FBYXovQyxDQUFLLENBQ3hCLENBQ0cybUQsSUFBTUEsRUFBTyxJQUNqQnJHLEVBQUcsV0FBVyxFQUFJLEdBQ2xCLElBQUlvb0MsRUFBVyxDQUFBLEVBRWZ2RCxHQUFxQjdrQyxFQUFJMlMsRUFBSW55QyxFQUFLL2xELEVBQU04SixDQUFDLEVBRXpDQSxFQUFFQSxFQUFFLE1BQU0sRUFBSzYxRSxHQUFVLFlBQWEsS0FBTSxDQUFDLElBQU9uNEUsQ0FBRyxDQUFDLEVBRXhEc0MsRUFBRUEsRUFBRSxNQUFNLEVBQUl3aEgsR0FBd0IvbEMsRUFBSXZsRixFQUFNK2xELEVBQUtteUMsQ0FBRSxFQUdwRGw0RixFQUFLLGNBQWE4SixFQUFFQSxFQUFFLE1BQU0sRUFBSzYxRSxHQUFVLGdCQUFpQixLQUFNLENBQ3BFLGlCQUFpQjMvRSxFQUFLLFlBQVksa0JBQWtCLEtBQ3BELGFBQWFBLEVBQUssWUFBWSxjQUFjLEtBQzVDLGdCQUFnQkEsRUFBSyxZQUFZLGlCQUFpQixHQUNsRCxDQUFBLEdBRUV1bEYsRUFBRyxPQUFPLEdBQUssTUFBUUEsRUFBRyxPQUFPLEVBQUUsT0FBUyxJQUFHejdFLEVBQUVBLEVBQUUsTUFBTSxFQUFLb2hILEdBQWtCM2xDLEVBQUlBLEVBQUcsT0FBTyxDQUFDLEdBRWxHejdFLEVBQUVzL0YsRUFBT3QvRixFQUFFLE1BQU0sRUFBSSxlQUNyQnk3RSxFQUFHLFFBQVEsRUFBSSxHQUNaQSxFQUFHLE1BQU0sR0FBSyxPQUNoQm1vQyxFQUFRSixHQUFrQi9uQyxFQUFJdmxGLENBQW1CLEVBQzlDMHRILEVBQU0sT0FBUyxJQUFHNWpILEVBQUVBLEVBQUUsTUFBTSxFQUFLNGpILElBRWxDNWpILEVBQUUsT0FBT3MvRixFQUFLLElBQUt0L0YsRUFBRUEsRUFBRSxNQUFNLEVBQUssZUFBaUJBLEVBQUVzL0YsQ0FBSSxFQUFFdC9GLEVBQUVzL0YsQ0FBSSxFQUFFLFFBQVEsS0FBSyxHQUFHLEdBSW5GN2pCLEVBQUcsVUFBVSxJQUFHejdFLEVBQUVBLEVBQUUsTUFBTSxFQUFJNGdILEdBQXdCbmxDLEVBQUcsVUFBVSxDQUFDLEdBS3BFQSxFQUFHLGFBQWEsR0FBSyxPQUFNejdFLEVBQUVBLEVBQUUsTUFBTSxFQUFJcWhILEdBQXdCNWxDLEVBQUcsYUFBYSxFQUFHQSxFQUFJMlMsRUFBSW55QyxDQUFHLEdBTS9Gdy9CLEVBQUcsU0FBUyxHQUFLLE1BQVFBLEVBQUcsU0FBUyxFQUFFLE9BQVMsSUFBR3o3RSxFQUFFQSxFQUFFLE1BQU0sRUFBS3FnSCxHQUFvQjVrQyxFQUFHLFNBQVMsQ0FBQyxHQU10RyxJQUFJcW9DLEVBQU8sR0FBSS9oQyxFQUFLSyxFQUFNLEdBQzFCLE9BQVUzRyxFQUFHLFFBQVEsRUFBYSxPQUFTLElBQzFDejdFLEVBQUVBLEVBQUUsTUFBTSxFQUFJLGVBQ1B5N0UsRUFBRyxRQUFRLEVBQWEsUUFBUSxTQUFTNzZELEVBQUcsQ0FDOUNBLEVBQUUsQ0FBQyxFQUFFLFNBQ1RtaEUsRUFBTyxDQUFDLElBQU1uaEUsRUFBRSxDQUFDLENBQUMsRUFDZkEsRUFBRSxDQUFDLEVBQUUsT0FBTyxPQUFPLENBQUMsR0FBSyxNQUMzQndoRSxFQUFNRCxHQUFTTCxFQUFNLEdBQUk5TixHQUFVcHpELEVBQUUsQ0FBQyxFQUFFLE1BQU0sRUFBRSxRQUFRLE9BQVEsRUFBRSxFQUFHOGdFLEdBQUssS0FBSyxFQUMvRUssRUFBSSxNQUFNLEVBQUksTUFBTUssSUFFakIwaEMsRUFBT2xqRyxFQUFFLENBQUMsRUFBRSxPQUFPLFFBQVEsR0FBRyxHQUFLLEtBQUltaEUsRUFBSSxTQUFXL04sR0FBVXB6RCxFQUFFLENBQUMsRUFBRSxPQUFPLE1BQU1rakcsRUFBSyxDQUFDLENBQUMsR0FDMUZsakcsRUFBRSxDQUFDLEVBQUUsVUFBU21oRSxFQUFJLFFBQVUvTixHQUFVcHpELEVBQUUsQ0FBQyxFQUFFLE9BQU8sR0FDckQ1Z0IsRUFBRUEsRUFBRSxNQUFNLEVBQUk2MUUsR0FBVSxZQUFZLEtBQUtrTSxDQUFHLEVBQy9DLENBQUcsRUFDRC9oRixFQUFFQSxFQUFFLE1BQU0sRUFBSSxpQkFFZixPQUFPeTdFLEVBQUcsUUFBUSxFQUlmQSxFQUFHLFVBQVUsR0FBSyxPQUFNejdFLEVBQUVBLEVBQUUsTUFBTSxFQUFLK2dILEdBQXFCdGxDLEVBQUcsVUFBVSxDQUFDLElBUzFFLENBQUN2bEYsR0FBUUEsRUFBSyxVQUFhQSxFQUFLLFVBQWEsUUFBVThKLEVBQUVBLEVBQUUsTUFBTSxFQUFJMjFFLEdBQVMsZ0JBQWlCRSxHQUFVLGVBQWdCLEtBQU0sQ0FBQyxtQkFBbUIsRUFBRyxNQUFNbjRFLENBQUcsQ0FBQyxDQUFDLEdBSWpLbW1ILEVBQVMsT0FBUyxJQUNwQnpoQyxFQUFNRCxHQUFTTCxFQUFNLEdBQUksdUJBQXlCN2xDLEVBQUksR0FBSyxPQUFReWxDLEdBQUssSUFBSSxFQUM1RTFoRixFQUFFQSxFQUFFLE1BQU0sRUFBSTYxRSxHQUFVLFVBQVcsS0FBTSxDQUFDLE9BQU8sTUFBUXVNLENBQUcsQ0FBQyxFQUM3RDNHLEVBQUcsVUFBVSxFQUFJb29DLEdBR2Zwb0MsRUFBRyxXQUFXLEVBQUUsT0FBUyxJQUMzQjJHLEVBQU1ELEdBQVNMLEVBQU0sR0FBSSwwQkFBNEI3bEMsRUFBSSxHQUFLLE9BQVF5bEMsR0FBSyxHQUFHLEVBQzlFMWhGLEVBQUVBLEVBQUUsTUFBTSxFQUFJNjFFLEdBQVUsZ0JBQWlCLEtBQU0sQ0FBQyxPQUFPLE1BQVF1TSxDQUFHLENBQUMsRUFDbkUzRyxFQUFHLFNBQVMsRUFBSTJHLEdBV2RwaUYsRUFBRSxPQUFPLElBQUtBLEVBQUVBLEVBQUUsTUFBTSxFQUFLLGVBQWlCQSxFQUFFLENBQUMsRUFBRUEsRUFBRSxDQUFDLEVBQUUsUUFBUSxLQUFLLEdBQUcsR0FDcEVBLEVBQUUsS0FBSyxFQUFFLENBQ2pCLENBR0EsU0FBUytqSCxHQUFnQnYyRyxFQUFNMDJCLEVBQVEsQ0FDdEMsSUFBSXpHLEVBQUssQ0FBQSxFQUNMa2tDLEVBQU1uMEQsRUFBSyxFQUFJMDJCLEVBQ25CekcsRUFBRSxFQUFJandCLEVBQUssV0FBVyxDQUFDLEVBQ3ZCQSxFQUFLLEdBQUssRUFDVixJQUFJOGhGLEVBQVE5aEYsRUFBSyxXQUFXLENBQUMsRUFDN0JBLEVBQUssR0FBSyxFQUNWLElBQUlpMEQsRUFBUWowRCxFQUFLLFdBQVcsQ0FBQyxFQUM3QixPQUFBQSxFQUFLLEVBQUltMEQsRUFDTkYsRUFBUSxJQUFNaGtDLEVBQUUsTUFBUWdrQyxFQUFRLEdBQ2hDQSxFQUFRLEtBQU1oa0MsRUFBRSxPQUFTLElBQ3pCZ2tDLEVBQVEsS0FBTWhrQyxFQUFFLElBQU02eEQsRUFBUSxJQUMxQjd4RCxDQUNSLENBQ0EsU0FBU3VtRixHQUFnQi9pRCxFQUFjOWxDLEVBQU9zZ0QsRUFBSSxDQUNqRCxJQUFJejdFLEVBQUlza0UsR0FBUSxHQUFPLEVBQ25CN2pFLEdBQU9nN0UsRUFBRyxPQUFPLEdBQUcsSUFBSXhhLENBQUMsR0FBRyxHQUNoQ2poRSxFQUFFLFlBQVksRUFBR2loRSxDQUFDLEVBRWxCamhFLEVBQUUsWUFBWSxFQUFHLENBQUMsRUFFbEIsSUFBSXN2RixFQUFRLElBQ1Q3dUYsRUFBSSxJQUFLNnVGLEVBQVEyTSxHQUFNeDdGLEVBQUksR0FBRyxFQUFJLEdBQzdCQSxFQUFJLE1BQUs2dUYsRUFBUTd1RixFQUFJLElBQU0sSUFDbkNULEVBQUUsWUFBWSxFQUFHc3ZGLENBQUssRUFFdEJ0dkYsRUFBRSxZQUFZLEVBQUcsQ0FBQyxFQUVsQixJQUFJeWhFLEVBQVEsRUFDVGhoRSxFQUFJLFFBQU9naEUsR0FBU2hoRSxFQUFJLE9BQ3hCQSxFQUFJLFNBQVFnaEUsR0FBUyxLQUNyQmhoRSxFQUFJLEtBQU9BLEVBQUksT0FBS2doRSxHQUFTLElBQ2hDemhFLEVBQUUsWUFBWSxFQUFHeWhFLENBQUssRUFFdEJ6aEUsRUFBRSxZQUFZLEVBQUcsQ0FBQyxFQUdsQixJQUFJaWtILEVBQVcsRUFBR0MsRUFBTWxrSCxFQUFFLEVBQzFCQSxFQUFFLEdBQUssRUFHUCxRQURJbWtILEVBQVEsQ0FBQyxFQUFFbGpELEVBQUcsRUFBRSxDQUFDLEVBQ2JqbEUsRUFBSSxFQUFHQSxFQUFJLEdBQUksRUFBRUEsRUFDeEIsR0FBSSxFQUFBbS9CLEVBQU0sRUFBRSxFQUFNbi9CLEVBQUUsR0FBTSxJQUFTbS9CLEVBQU0sRUFBRSxFQUFLbi9CLEdBQUssSUFFckQsU0FESW9vSCxFQUFRLEdBQUl4MUUsRUFBTyxHQUNmMGtCLEVBQUt0M0QsR0FBRyxHQUFLczNELEVBQU10M0QsRUFBRSxHQUFJLEdBQUssRUFBRXMzRCxFQUFHLENBQzFDNndELEVBQU0sRUFBSTd3RCxFQUNWLElBQUloMEIsRUFBTyxNQUFNLFFBQVFtOEMsQ0FBRSxHQUFLQSxFQUFHMG9DLEVBQU0sQ0FBQyxHQUFHLENBQUUsR0FBRUEsRUFBTSxDQUFDLEVBQUkxb0MsRUFBRzVCLEdBQVlzcUMsQ0FBSyxDQUFDLEVBQzlFN2tGLElBQVc4a0YsRUFBUSxJQUFHQSxFQUFROXdELEdBQUcxa0IsRUFBTzBrQixFQUMzQyxDQUNFOHdELEVBQVEsSUFDWCxFQUFFSCxFQUNGamtILEVBQUUsWUFBWSxFQUFHb2tILENBQUssRUFDdEJwa0gsRUFBRSxZQUFZLEVBQUc0dUMsQ0FBSSxHQUd0QixJQUFJaHVCLEVBQUk1Z0IsRUFBRSxFQUNWLE9BQUFBLEVBQUUsRUFBSWtrSCxFQUNObGtILEVBQUUsWUFBWSxFQUFHaWtILENBQVEsRUFDekJqa0gsRUFBRSxFQUFJNGdCLEVBRUM1Z0IsRUFBRSxPQUFTQSxFQUFFLEVBQUlBLEVBQUUsTUFBTSxFQUFHQSxFQUFFLENBQUMsRUFBSUEsQ0FDM0MsQ0FDQSxTQUFTcWtILEdBQWlCN3FDLEVBQUlpQyxFQUFJdGdELEVBQU84bEMsRUFBRyxDQUMzQyxJQUFJamhFLEVBQUlna0gsR0FBZ0IvaUQsRUFBRzlsQyxFQUFPc2dELENBQUUsR0FDaEN6N0UsRUFBRSxPQUFTLEtBQVF5N0UsRUFBRyxPQUFPLEdBQUcsQ0FBQSxHQUFJeGEsQ0FBQyxJQUFHc1ksR0FBYUMsRUFBSSxFQUF3Qng1RSxDQUFDLENBQ3ZGLENBR0EsSUFBSXNrSCxHQUFpQmptQyxHQUNqQmttQyxHQUFpQmptQyxHQUdyQixTQUFTa21DLElBQXVDLENBQ2hELENBSUEsU0FBU0MsR0FBZ0JqM0csRUFBTTAyQixFQUFRLENBQ3RDLElBQUl6RyxFQUFJLENBQUEsRUFDSjE5QixFQUFJeU4sRUFBS0EsRUFBSyxDQUFDLEVBQUcsUUFBRUEsRUFBSyxFQUM3Qml3QixFQUFFLE1BQVEsRUFBRTE5QixFQUFJLElBQ2hCMDlCLEVBQUUsS0FBUSxFQUFFMTlCLEVBQUksS0FFaEJ5TixFQUFLLEdBQUssR0FDVml3QixFQUFFLEtBQU82L0MsR0FBbUI5dkUsQ0FBaUIsRUFDdENpd0IsQ0FDUixDQUNBLFNBQVNpbkYsR0FBZ0I1c0YsRUFBSzhoQyxFQUFNNTVELEVBQUcsQ0FDbkNBLEdBQUssT0FBTUEsRUFBSXNrRSxHQUFRLEdBQUcsRUFBRXhzQyxFQUFJLE1BQU0sR0FDekMsSUFBSS8zQixFQUFJLElBQ0w2NUQsSUFDQ0EsRUFBSyxRQUFPNzVELEdBQUssS0FDakI2NUQsRUFBSyxPQUFPNzVELEdBQUssT0FFckJDLEVBQUUsWUFBWSxFQUFHRCxDQUFDLEVBQ2xCLFFBQVEvRCxFQUFJLEVBQUdBLEVBQUksRUFBRyxFQUFFQSxFQUFHZ0UsRUFBRSxZQUFZLEVBQUUsQ0FBQyxFQUM1QyxPQUFBay9FLEdBQWUsQ0FBQyxLQUFLLENBQUMsRUFBR2wvRSxDQUFDLEVBQzFCQSxFQUFFLFlBQVksR0FBRyxFQUFFLEVBQ25CQSxFQUFFLFlBQVksR0FBRyxFQUFFLEVBQ25CdTlFLEdBQW1CemxELEVBQUs5M0IsQ0FBQyxFQUNsQkEsRUFBRSxNQUFNLEVBQUdBLEVBQUUsQ0FBQyxDQUN0QixDQUdBLFNBQVMya0gsR0FBbUJuM0csRUFBTSxDQUNqQyxJQUFJOHhCLEVBQU8yOUMsR0FBZXp2RSxDQUFJLEVBQzlCLE1BQU8sQ0FBQzh4QixDQUFJLENBQ2IsQ0FDQSxTQUFTc2xGLEdBQW1CdGxGLEVBQU11bEYsRUFBTzdrSCxFQUFHLENBQzNDLE9BQUdBLEdBQUssT0FBTUEsRUFBSXNrRSxHQUFRLENBQUMsR0FDcEI2WSxHQUFlMG5DLEVBQU83a0gsQ0FBQyxDQUMvQixDQUNBLFNBQVM4a0gsR0FBb0J0M0csRUFBTSxDQUNsQyxJQUFJOHhCLEVBQU84OUMsR0FBb0I1dkUsQ0FBSSxFQUNuQyxNQUFPLENBQUM4eEIsQ0FBSSxDQUNiLENBQ0EsU0FBU3lsRixHQUFvQnpsRixFQUFNdWxGLEVBQU83a0gsRUFBRyxDQUM1QyxPQUFHQSxHQUFLLE9BQU1BLEVBQUlza0UsR0FBUSxDQUFDLEdBQ3BCK1ksR0FBb0J3bkMsRUFBTzdrSCxDQUFDLENBQ3BDLENBR0EsU0FBU2dsSCxHQUFrQngzRyxFQUFNLENBQ2hDLElBQUk4eEIsRUFBTzI5QyxHQUFlenZFLENBQUksRUFDMUJ5M0csRUFBUXozRyxFQUFLLFdBQVcsQ0FBQyxFQUM3QixNQUFPLENBQUM4eEIsRUFBTTJsRixFQUFPLEdBQUcsQ0FDekIsQ0FDQSxTQUFTQyxHQUFrQjVsRixFQUFNdWxGLEVBQU83a0gsRUFBRyxDQUMxQyxPQUFHQSxHQUFLLE9BQU1BLEVBQUlza0UsR0FBUSxDQUFDLEdBQzNCNlksR0FBZTBuQyxFQUFPN2tILENBQUMsRUFDdkJBLEVBQUUsWUFBWSxFQUFHcy9CLEVBQUssRUFBSSxFQUFJLENBQUMsRUFDeEJ0L0IsQ0FDUixDQUNBLFNBQVNtbEgsR0FBbUIzM0csRUFBTSxDQUNqQyxJQUFJOHhCLEVBQU84OUMsR0FBb0I1dkUsQ0FBSSxFQUMvQnkzRyxFQUFRejNHLEVBQUssV0FBVyxDQUFDLEVBQzdCLE1BQU8sQ0FBQzh4QixFQUFNMmxGLEVBQU8sR0FBRyxDQUN6QixDQUNBLFNBQVNHLEdBQW1COWxGLEVBQU11bEYsRUFBTzdrSCxFQUFHLENBQzNDLE9BQUdBLEdBQUssT0FBTUEsRUFBSXNrRSxHQUFRLENBQUMsR0FDM0IrWSxHQUFvQnduQyxFQUFPN2tILENBQUMsRUFDNUJBLEVBQUUsWUFBWSxFQUFHcy9CLEVBQUssRUFBSSxFQUFJLENBQUMsRUFDeEJ0L0IsQ0FDUixDQUdBLFNBQVNxbEgsR0FBbUI3M0csRUFBTSxDQUNqQyxJQUFJOHhCLEVBQU8yOUMsR0FBZXp2RSxDQUFJLEVBQzFCODNHLEVBQVM5M0csRUFBSyxXQUFXLENBQUMsRUFDOUIsTUFBTyxDQUFDOHhCLEVBQU1nbUYsRUFBUSxHQUFHLENBQzFCLENBQ0EsU0FBU0MsR0FBbUJqbUYsRUFBTXVsRixFQUFPN2tILEVBQUcsQ0FDM0MsT0FBR0EsR0FBSyxPQUFNQSxFQUFJc2tFLEdBQVEsQ0FBQyxHQUMzQjZZLEdBQWUwbkMsRUFBTzdrSCxDQUFDLEVBQ3ZCQSxFQUFFLFlBQVksRUFBR3MvQixFQUFLLENBQUMsRUFDaEJ0L0IsQ0FDUixDQUNBLFNBQVN3bEgsR0FBb0JoNEcsRUFBTSxDQUNsQyxJQUFJOHhCLEVBQU84OUMsR0FBb0I1dkUsQ0FBSSxFQUMvQjgzRyxFQUFTOTNHLEVBQUssV0FBVyxDQUFDLEVBQzlCLE1BQU8sQ0FBQzh4QixFQUFNZ21GLEVBQVEsR0FBRyxDQUMxQixDQUNBLFNBQVNHLEdBQW9Cbm1GLEVBQU11bEYsRUFBTzdrSCxFQUFHLENBQzVDLE9BQUdBLEdBQUssT0FBTUEsRUFBSXNrRSxHQUFRLENBQUMsR0FDM0IrWSxHQUFvQnduQyxFQUFPN2tILENBQUMsRUFDNUJBLEVBQUUsWUFBWSxFQUFHcy9CLEVBQUssQ0FBQyxFQUN2QnQvQixFQUFFLFlBQVksRUFBRyxDQUFDLEVBQ2xCQSxFQUFFLFlBQVksRUFBRyxDQUFDLEVBQ1hBLENBQ1IsQ0FJQSxTQUFTMGxILEdBQWtCbDRHLEVBQU0sQ0FDaEMsSUFBSTh4QixFQUFPMjlDLEdBQWV6dkUsQ0FBSSxFQUMxQm00RyxFQUFPbjRHLEVBQUssV0FBVyxDQUFDLEVBQzVCLE1BQU8sQ0FBQzh4QixFQUFNcW1GLEVBQU0sR0FBRyxDQUN4QixDQUNBLFNBQVNDLEdBQWtCdG1GLEVBQU11bEYsRUFBTzdrSCxFQUFHLENBQzFDLE9BQUdBLEdBQUssT0FBTUEsRUFBSXNrRSxHQUFRLEVBQUUsR0FDNUI2WSxHQUFlMG5DLEVBQU83a0gsQ0FBQyxFQUN2QkEsRUFBRSxZQUFZLEVBQUc2a0gsRUFBTSxDQUFDLEVBQ2pCN2tILENBQ1IsQ0FDQSxTQUFTNmxILEdBQW1CcjRHLEVBQU0sQ0FDakMsSUFBSTh4QixFQUFPODlDLEdBQW9CNXZFLENBQUksRUFDL0JtNEcsRUFBT240RyxFQUFLLFdBQVcsQ0FBQyxFQUM1QixNQUFPLENBQUM4eEIsRUFBTXFtRixFQUFNLEdBQUcsQ0FDeEIsQ0FDQSxTQUFTRyxHQUFtQnhtRixFQUFNdWxGLEVBQU83a0gsRUFBRyxDQUMzQyxPQUFHQSxHQUFLLE9BQU1BLEVBQUlza0UsR0FBUSxDQUFDLEdBQzNCK1ksR0FBb0J3bkMsRUFBTzdrSCxDQUFDLEVBQzVCQSxFQUFFLFlBQVksRUFBRzZrSCxFQUFNLENBQUMsRUFDakI3a0gsQ0FDUixDQUdBLFNBQVMrbEgsR0FBa0J2NEcsRUFBTSxDQUNoQyxJQUFJOHhCLEVBQU8yOUMsR0FBZXp2RSxDQUFJLEVBQzFCelYsRUFBUXdtRixHQUFXL3dFLENBQUksRUFDM0IsTUFBTyxDQUFDOHhCLEVBQU12bkMsRUFBTyxHQUFHLENBQ3pCLENBQ0EsU0FBU2l1SCxHQUFrQjFtRixFQUFNdWxGLEVBQU83a0gsRUFBRyxDQUMxQyxPQUFHQSxHQUFLLE9BQU1BLEVBQUlza0UsR0FBUSxFQUFFLEdBQzVCNlksR0FBZTBuQyxFQUFPN2tILENBQUMsRUFDdkJ3K0UsR0FBV2wvQyxFQUFLLEVBQUd0L0IsQ0FBQyxFQUNiQSxDQUNSLENBQ0EsU0FBU2ltSCxHQUFtQno0RyxFQUFNLENBQ2pDLElBQUk4eEIsRUFBTzg5QyxHQUFvQjV2RSxDQUFJLEVBQy9CelYsRUFBUXdtRixHQUFXL3dFLENBQUksRUFDM0IsTUFBTyxDQUFDOHhCLEVBQU12bkMsRUFBTyxHQUFHLENBQ3pCLENBQ0EsU0FBU211SCxHQUFtQjVtRixFQUFNdWxGLEVBQU83a0gsRUFBRyxDQUMzQyxPQUFHQSxHQUFLLE9BQU1BLEVBQUlza0UsR0FBUSxFQUFFLEdBQzVCK1ksR0FBb0J3bkMsRUFBTzdrSCxDQUFDLEVBQzVCdytFLEdBQVdsL0MsRUFBSyxFQUFHdC9CLENBQUMsRUFDYkEsQ0FDUixDQUdBLFNBQVNtbUgsR0FBZ0IzNEcsRUFBTSxDQUM5QixJQUFJOHhCLEVBQU8yOUMsR0FBZXp2RSxDQUFJLEVBQzFCelYsRUFBUThsRixHQUFlcndFLENBQUksRUFDL0IsTUFBTyxDQUFDOHhCLEVBQU12bkMsRUFBTyxHQUFHLENBQ3pCLENBQ0EsU0FBU3F1SCxHQUFnQjltRixFQUFNdWxGLEVBQU83a0gsRUFBRyxDQUN4QyxPQUFHQSxHQUFLLE9BQU1BLEVBQUlza0UsR0FBUSxFQUFFLEdBQzVCNlksR0FBZTBuQyxFQUFPN2tILENBQUMsRUFDdkJpK0UsR0FBZTMrQyxFQUFLLEVBQUd0L0IsQ0FBQyxFQUNqQkEsQ0FDUixDQUNBLFNBQVNxbUgsR0FBaUI3NEcsRUFBTSxDQUMvQixJQUFJOHhCLEVBQU84OUMsR0FBb0I1dkUsQ0FBSSxFQUMvQnpWLEVBQVE4bEYsR0FBZXJ3RSxDQUFJLEVBQy9CLE1BQU8sQ0FBQzh4QixFQUFNdm5DLEVBQU8sR0FBRyxDQUN6QixDQUNBLFNBQVN1dUgsR0FBaUJobkYsRUFBTXVsRixFQUFPN2tILEVBQUcsQ0FDekMsT0FBR0EsR0FBSyxPQUFNQSxFQUFJc2tFLEdBQVEsQ0FBQyxHQUMzQitZLEdBQW9Cd25DLEVBQU83a0gsQ0FBQyxFQUM1QmkrRSxHQUFlMytDLEVBQUssRUFBR3QvQixDQUFDLEVBQ2pCQSxDQUNSLENBR0EsU0FBU3VtSCxHQUFxQi80RyxFQUFNLENBQ25DLElBQUk4eEIsRUFBTzI5QyxHQUFlenZFLENBQUksRUFDMUJ6VixFQUFRNGtGLEdBQWNudkUsQ0FBSSxFQUM5QixNQUFPLENBQUM4eEIsRUFBTXZuQyxFQUFPLElBQUksQ0FDMUIsQ0FHQSxTQUFTeXVILEdBQWdCaDVHLEVBQU0sQ0FDOUIsSUFBSTh4QixFQUFPMjlDLEdBQWV6dkUsQ0FBSSxFQUMxQnpWLEVBQVFxa0YsR0FBbUI1dUUsQ0FBSSxFQUNuQyxNQUFPLENBQUM4eEIsRUFBTXZuQyxFQUFPLEtBQUssQ0FDM0IsQ0FDQSxTQUFTMHVILEdBQWdCbm5GLEVBQU11bEYsRUFBTzdrSCxFQUFHLENBQ3hDLE9BQUdBLEdBQUssT0FBTUEsRUFBSXNrRSxHQUFRLEdBQUssRUFBSWhsQyxFQUFLLEVBQUUsTUFBTSxHQUNoRDY5QyxHQUFlMG5DLEVBQU83a0gsQ0FBQyxFQUN2QnM4RSxHQUFtQmg5QyxFQUFLLEVBQUd0L0IsQ0FBQyxFQUNyQkEsRUFBRSxPQUFTQSxFQUFFLEVBQUlBLEVBQUUsTUFBTSxFQUFHQSxFQUFFLENBQUMsRUFBSUEsQ0FDM0MsQ0FDQSxTQUFTMG1ILEdBQWlCbDVHLEVBQU0sQ0FDL0IsSUFBSTh4QixFQUFPODlDLEdBQW9CNXZFLENBQUksRUFDL0J6VixFQUFRcWtGLEdBQW1CNXVFLENBQUksRUFDbkMsTUFBTyxDQUFDOHhCLEVBQU12bkMsRUFBTyxLQUFLLENBQzNCLENBQ0EsU0FBUzR1SCxHQUFpQnJuRixFQUFNdWxGLEVBQU83a0gsRUFBRyxDQUN6QyxPQUFHQSxHQUFLLE9BQU1BLEVBQUlza0UsR0FBUSxFQUFJLEVBQUlobEMsRUFBSyxFQUFFLE1BQU0sR0FDL0MrOUMsR0FBb0J3bkMsRUFBTzdrSCxDQUFDLEVBQzVCczhFLEdBQW1CaDlDLEVBQUssRUFBR3QvQixDQUFDLEVBQ3JCQSxFQUFFLE9BQVNBLEVBQUUsRUFBSUEsRUFBRSxNQUFNLEVBQUdBLEVBQUUsQ0FBQyxFQUFJQSxDQUMzQyxDQUdBLFNBQVM0bUgsR0FBa0JwNUcsRUFBTTAyQixFQUFRaHVDLEVBQU0sQ0FDOUMsSUFBSSs4RCxFQUFNemxELEVBQUssRUFBSTAyQixFQUNmNUUsRUFBTzI5QyxHQUFlenZFLENBQUksRUFDOUI4eEIsRUFBSyxFQUFJcHBDLEVBQUssTUFBTSxFQUNwQixJQUFJNkIsRUFBUXlWLEVBQUssV0FBVyxDQUFDLEVBQ3pCeE4sRUFBSSxDQUFDcy9CLEVBQU12bkMsRUFBTyxHQUFHLEVBQ3pCLEdBQUc3QixFQUFLLFlBQWEsQ0FDcEJzWCxFQUFLLEdBQUssRUFDVixJQUFJd3RGLEVBQVVvaUIsR0FBNEI1dkcsRUFBTXlsRCxFQUFNemxELEVBQUssRUFBR3RYLENBQUksRUFDbEU4SixFQUFFLENBQUMsRUFBSXk3RyxHQUFrQnpnQixFQUFTLEtBQWUxN0QsRUFBTXBwQyxFQUFLLFNBQVVBLENBQUksQ0FDMUUsTUFDSXNYLEVBQUssRUFBSXlsRCxFQUNkLE9BQU9qekQsQ0FDUixDQUdBLFNBQVM2bUgsR0FBbUJyNUcsRUFBTTAyQixFQUFRaHVDLEVBQU0sQ0FDL0MsSUFBSSs4RCxFQUFNemxELEVBQUssRUFBSTAyQixFQUNmNUUsRUFBTzI5QyxHQUFlenZFLENBQUksRUFDOUI4eEIsRUFBSyxFQUFJcHBDLEVBQUssTUFBTSxFQUNwQixJQUFJNkIsRUFBUXlWLEVBQUssV0FBVyxDQUFDLEVBQ3pCeE4sRUFBSSxDQUFDcy9CLEVBQU12bkMsRUFBTyxHQUFHLEVBQ3pCLEdBQUc3QixFQUFLLFlBQWEsQ0FDcEJzWCxFQUFLLEdBQUssRUFDVixJQUFJd3RGLEVBQVVvaUIsR0FBNEI1dkcsRUFBTXlsRCxFQUFNemxELEVBQUssRUFBR3RYLENBQUksRUFDbEU4SixFQUFFLENBQUMsRUFBSXk3RyxHQUFrQnpnQixFQUFTLEtBQWUxN0QsRUFBTXBwQyxFQUFLLFNBQVVBLENBQUksQ0FDMUUsTUFDSXNYLEVBQUssRUFBSXlsRCxFQUNkLE9BQU9qekQsQ0FDUixDQUdBLFNBQVM4bUgsR0FBaUJ0NUcsRUFBTTAyQixFQUFRaHVDLEVBQU0sQ0FDN0MsSUFBSSs4RCxFQUFNemxELEVBQUssRUFBSTAyQixFQUNmNUUsRUFBTzI5QyxHQUFlenZFLENBQUksRUFDOUI4eEIsRUFBSyxFQUFJcHBDLEVBQUssTUFBTSxFQUNwQixJQUFJNkIsRUFBUXdtRixHQUFXL3dFLENBQUksRUFDdkJ4TixFQUFJLENBQUNzL0IsRUFBTXZuQyxFQUFPLEdBQUcsRUFDekIsR0FBRzdCLEVBQUssWUFBYSxDQUNwQnNYLEVBQUssR0FBSyxFQUNWLElBQUl3dEYsRUFBVW9pQixHQUE0QjV2RyxFQUFNeWxELEVBQU16bEQsRUFBSyxFQUFHdFgsQ0FBSSxFQUNsRThKLEVBQUUsQ0FBQyxFQUFJeTdHLEdBQWtCemdCLEVBQVMsS0FBZTE3RCxFQUFNcHBDLEVBQUssU0FBVUEsQ0FBSSxDQUMxRSxNQUNJc1gsRUFBSyxFQUFJeWxELEVBQ2QsT0FBT2p6RCxDQUNSLENBR0EsU0FBUyttSCxHQUFvQnY1RyxFQUFNMDJCLEVBQVFodUMsRUFBTSxDQUNoRCxJQUFJKzhELEVBQU16bEQsRUFBSyxFQUFJMDJCLEVBQ2Y1RSxFQUFPMjlDLEdBQWV6dkUsQ0FBSSxFQUM5Qjh4QixFQUFLLEVBQUlwcEMsRUFBSyxNQUFNLEVBQ3BCLElBQUk2QixFQUFRcWtGLEdBQW1CNXVFLENBQUksRUFDL0J4TixFQUFJLENBQUNzL0IsRUFBTXZuQyxFQUFPLEtBQUssRUFDM0IsR0FBRzdCLEVBQUssWUFBYSxDQUNwQnNYLEVBQUssR0FBSyxFQUNWLElBQUl3dEYsRUFBVW9pQixHQUE0QjV2RyxFQUFNeWxELEVBQU16bEQsRUFBSyxFQUFHdFgsQ0FBSSxFQUNsRThKLEVBQUUsQ0FBQyxFQUFJeTdHLEdBQWtCemdCLEVBQVMsS0FBZTE3RCxFQUFNcHBDLEVBQUssU0FBVUEsQ0FBSSxDQUMxRSxNQUNJc1gsRUFBSyxFQUFJeWxELEVBQ2QsT0FBT2p6RCxDQUNSLENBR0EsSUFBSWduSCxHQUFxQjNvQyxHQUNyQjRvQyxHQUFxQjNvQyxHQUV6QixTQUFTNG9DLEdBQXlCM2lELEVBQUt2a0UsRUFBRyxDQUN6QyxPQUFHQSxHQUFLLE9BQU1BLEVBQUlza0UsR0FBUSxDQUFDLEdBQzNCdGtFLEVBQUUsWUFBWSxFQUFHdWtFLENBQUcsRUFDYnZrRSxDQUNSLENBR0EsU0FBU21uSCxHQUFlMzVHLEVBQU0wMkIsRUFBb0IsQ0FDakQsSUFBSSt1QixFQUFNemxELEVBQUssRUFBSTAyQixFQUNmb3ZFLEVBQU1qMUIsR0FBbUI3d0UsQ0FBUSxFQUNqQzQ1RyxFQUFRNXBDLEdBQTJCaHdFLENBQUksRUFDdkM0cUUsRUFBTWdFLEdBQW1CNXVFLENBQUksRUFDN0J3VixFQUFVbzVELEdBQW1CNXVFLENBQUksRUFDakN3ZCxFQUFVb3hELEdBQW1CNXVFLENBQUksRUFDckNBLEVBQUssRUFBSXlsRCxFQUNULElBQUlqekQsRUFBSyxDQUFDLElBQUlzekcsRUFBSyxNQUFNOFQsRUFBTyxJQUFJaHZDLEVBQUssUUFBUXB0RCxDQUFPLEVBQ3hELE9BQUdoSSxJQUFTaGpCLEVBQUUsUUFBVWdqQixHQUNqQmhqQixDQUNSLENBQ0EsU0FBU3FuSCxHQUFlem1HLEVBQUd3aEUsRUFBSyxDQUMvQixJQUFJcGlGLEVBQUlza0UsR0FBUSxHQUFHLEdBQUcxakQsRUFBRSxDQUFDLEVBQUUsT0FBTyxRQUFVQSxFQUFFLENBQUMsRUFBRSxTQUFXLElBQUksT0FBTyxFQUN2RTA5RCxHQUFtQixDQUFDLEVBQUU1RCxHQUFZOTVELEVBQUUsQ0FBQyxDQUFDLEVBQUcsRUFBRTg1RCxHQUFZOTVELEVBQUUsQ0FBQyxDQUFDLENBQUMsRUFBRzVnQixDQUFDLEVBQ2hFNDlFLEdBQVksTUFBUXdFLEVBQUtwaUYsQ0FBQyxFQUMxQixJQUFJc25ILEVBQVMxbUcsRUFBRSxDQUFDLEVBQUUsT0FBTyxRQUFRLEdBQUcsRUFDaEN3M0QsRUFBTWt2QyxHQUFVLEdBQUssR0FBSzFtRyxFQUFFLENBQUMsRUFBRSxPQUFPLE1BQU0wbUcsRUFBTyxDQUFDLEVBQ3hELE9BQUFockMsR0FBbUJsRSxHQUFPLEdBQUlwNEUsQ0FBQyxFQUMvQnM4RSxHQUFtQjE3RCxFQUFFLENBQUMsRUFBRSxTQUFXLEdBQUk1Z0IsQ0FBQyxFQUN4Q3M4RSxHQUFtQixHQUFJdDhFLENBQUMsRUFDakJBLEVBQUUsTUFBTSxFQUFHQSxFQUFFLENBQUMsQ0FDdEIsQ0FHQSxTQUFTdW5ILElBQXNDLENBQy9DLENBR0EsU0FBU0MsR0FBaUJoNkcsRUFBTTAyQixFQUFRaHVDLEVBQU0sQ0FDN0MsSUFBSSs4RCxFQUFNemxELEVBQUssRUFBSTAyQixFQUNmb3ZFLEVBQU1uMUIsR0FBVTN3RSxDQUFRLEVBQ3hCaTZHLEVBQWNqNkcsRUFBSyxXQUFXLENBQUMsRUFDL0J4TixFQUFJLENBQUNzekcsQ0FBRyxFQUNaLEdBRGV0ekcsRUFBRSxDQUFDLEVBQUl5bkgsRUFDbkJ2eEgsRUFBSyxZQUFhLENBQ3BCLElBQUk4a0csRUFBVW1pQixHQUE2QjN2RyxFQUFNeWxELEVBQU16bEQsRUFBSyxFQUFHdFgsQ0FBSSxFQUNuRThKLEVBQUUsQ0FBQyxFQUFJZzdGLENBQ1QsTUFBUXh0RixFQUFLLEVBQUl5bEQsRUFDaEIsT0FBT2p6RCxDQUNSLENBR0EsU0FBUzBuSCxHQUFpQmw2RyxFQUFNMDJCLEVBQVFodUMsRUFBTSxDQUM3QyxJQUFJKzhELEVBQU16bEQsRUFBSyxFQUFJMDJCLEVBQ2ZvdkUsRUFBTWoxQixHQUFtQjd3RSxDQUFRLEVBQ2pDeE4sRUFBSSxDQUFDc3pHLENBQUcsRUFDWixHQUFHcDlHLEVBQUssWUFBYSxDQUNwQixJQUFJOGtHLEVBQVVzaUIsR0FBOEI5dkcsRUFBTXlsRCxFQUFNemxELEVBQUssRUFBR3RYLENBQUksRUFDcEU4SixFQUFFLENBQUMsRUFBSWc3RixFQUNQeHRGLEVBQUssRUFBSXlsRCxDQUNYLE1BQVF6bEQsRUFBSyxFQUFJeWxELEVBQ2hCLE9BQU9qekQsQ0FDUixDQUlBLFNBQVMybkgsR0FBaUJobkQsRUFBY3h5RCxFQUFLbk8sRUFBRyxDQUM1Q0EsR0FBSyxPQUFNQSxFQUFJc2tFLEdBQVEsRUFBRSxHQUM1QixJQUFJdnBFLEVBQUlnakgsR0FBVXA5QyxFQUFHeHlELENBQUcsRUFDeEJuTyxFQUFFLFlBQVksR0FBSTJnRSxDQUFDLEVBQ25CM2dFLEVBQUUsWUFBWSxHQUFJMmdFLENBQUMsRUFDbkIzZ0UsRUFBRSxZQUFZLEdBQUlqRixFQUFFLE9BQVMsSUFBTSxHQUFHLEVBQ3RDaUYsRUFBRSxZQUFZLEVBQUcsR0FDakIsSUFBSXloRSxFQUFRLEVBQ1osT0FBR3R6RCxFQUFJLFNBQVFzekQsR0FBUyxHQUNyQixPQUFPMW1FLEVBQUUsT0FBUyxXQUFVMG1FLEdBQVMsR0FDckN0ekQsRUFBSSxRQUFPc3pELEdBQVV0ekQsRUFBSSxPQUFTLEdBQ3JDbk8sRUFBRSxZQUFZLEVBQUd5aEUsQ0FBSyxFQUNmemhFLENBQ1IsQ0FHQSxJQUFJNG5ILEdBQWdCLENBQUMsT0FBTyxRQUFRLE1BQU0sU0FBUyxTQUFTLFFBQVEsRUFDcEUsU0FBU0MsR0FBaUJyNkcsRUFBc0MsQ0FDL0QsSUFBSTB3RyxFQUFXLENBQUEsRUFDZixPQUFBMEosR0FBYyxRQUFRLFNBQVNwc0csRUFBRyxDQUFFMGlHLEVBQVExaUcsQ0FBQyxFQUFJK2lFLEdBQVcvd0UsQ0FBTyxDQUFFLENBQUUsRUFDaEUwd0csQ0FDUixDQUNBLFNBQVM0SixHQUFpQjVKLEVBQXFCbCtHLEVBQUcsQ0FDakQsT0FBR0EsR0FBSyxPQUFNQSxFQUFJc2tFLEdBQVEsRUFBRSxDQUFDLEdBQzdCMjVDLEdBQWdCQyxDQUFPLEVBQ3ZCMEosR0FBYyxRQUFRLFNBQVNwc0csRUFBRyxDQUFFZ2pFLEdBQVkwL0IsRUFBaUIxaUcsQ0FBQyxFQUFHeGIsQ0FBQyxDQUFJLENBQUEsRUFDbkVBLENBQ1IsQ0FHQSxTQUFTK25ILEdBQXFCdjZHLEVBQTBCLENBQ3ZELElBQUl6TixFQUFJeU4sRUFBSyxXQUFXLENBQUMsRUFDekIsT0FBQUEsRUFBSyxHQUFLLEdBQ0gsQ0FBRSxJQUFLek4sRUFBSSxHQUNuQixDQUNBLFNBQVNpb0gsR0FBcUJ2c0MsRUFBSXdzQyxFQUFVam9ILEVBQUcsQ0FDM0NBLEdBQUssT0FBTUEsRUFBSXNrRSxHQUFRLEVBQUUsR0FDNUIsSUFBSXZrRSxFQUFJLElBQ1IsU0FBTWtvSCxHQUFVLENBQUEsR0FBSSxPQUFPLENBQUEsR0FBSSxDQUFDLEdBQUcsQ0FBRSxHQUFFLE1BQUtsb0gsR0FBSyxJQUNqREMsRUFBRSxZQUFZLEVBQUdELENBQUMsRUFDbEJDLEVBQUUsWUFBWSxFQUFHLENBQUMsRUFDbEJBLEVBQUUsWUFBWSxFQUFHLENBQUMsRUFDbEJBLEVBQUUsWUFBWSxFQUFHLENBQUMsRUFDbEJBLEVBQUUsWUFBWSxFQUFHLENBQUMsRUFDbEJBLEVBQUUsWUFBWSxFQUFHLENBQUMsRUFDbEJBLEVBQUUsWUFBWSxFQUFHLENBQUMsRUFDbEJBLEVBQUUsWUFBWSxFQUFHLEdBQUcsRUFDcEJBLEVBQUUsWUFBWSxFQUFHLENBQUMsRUFDbEJBLEVBQUUsWUFBWSxFQUFHLENBQUMsRUFDbEJBLEVBQUUsWUFBWSxFQUFHLENBQUMsRUFDbEJBLEVBQUUsWUFBWSxFQUFHLENBQUMsRUFDWEEsQ0FDUixDQUdBLFNBQVNrb0gsR0FBc0J4cUgsRUFBSyxDQUNuQyxJQUFJc0MsRUFBSXNrRSxHQUFRLEVBQUUsRUFDbEIsT0FBQXRrRSxFQUFFLFlBQVksRUFBRyxDQUFDLEVBQ2xCQSxFQUFFLFlBQVksRUFBRyxDQUFDLEVBQ2xCcytFLEdBQW1CNWdGLEVBQUtzQyxDQUFDLEVBQ2xCQSxDQUNSLENBR0EsU0FBU21vSCxHQUF5QnRNLEVBQUk3N0csRUFBRyxDQUN4QyxPQUFHQSxHQUFLLE9BQU1BLEVBQUlza0UsR0FBUSxHQUFHLEVBQUUsQ0FBQyxHQUNoQ3RrRSxFQUFFLFlBQVksRUFBRzY3RyxFQUFHLFNBQVczVixHQUFzQzJWLEVBQUcsUUFBUSxFQUFJLENBQUMsRUFDckY3N0csRUFBRSxZQUFZLEVBQUcsQ0FBQyxFQUNsQixDQUNDLENBQUMsVUFBdUIsRUFBSyxFQUM3QixDQUFDLFlBQXVCLEVBQUssRUFDN0IsQ0FBQyxjQUF3QixFQUFJLEVBQzdCLENBQUMsZ0JBQXdCLEVBQUksRUFDN0IsQ0FBQyxhQUF3QixFQUFJLEVBQzdCLENBQUMsZ0JBQXdCLEVBQUksRUFDN0IsQ0FBQyxhQUF3QixFQUFJLEVBQzdCLENBQUMsbUJBQXdCLEVBQUksRUFDN0IsQ0FBQyxnQkFBd0IsRUFBSSxFQUM3QixDQUFDLGFBQXdCLEVBQUksRUFDN0IsQ0FBQyxvQkFBdUIsRUFBSyxFQUM3QixDQUFDLE9BQXdCLEVBQUksRUFDN0IsQ0FBQyxhQUF3QixFQUFJLEVBQzdCLENBQUMsY0FBd0IsRUFBSSxFQUM3QixDQUFDLHNCQUF1QixFQUFLLENBQy9CLEVBQUcsUUFBUSxTQUFTWixFQUFHLENBRWxCQSxFQUFFLENBQUMsRUFBR1ksRUFBRSxZQUFZLEVBQUc2N0csRUFBR3o4RyxFQUFFLENBQUMsQ0FBQyxHQUFLLE1BQVEsQ0FBQ3k4RyxFQUFHejhHLEVBQUUsQ0FBQyxDQUFDLEVBQUksRUFBSSxDQUFDLEVBQ3JEWSxFQUFFLFlBQVksRUFBRzY3RyxFQUFHejhHLEVBQUUsQ0FBQyxDQUFDLEdBQUssTUFBUXk4RyxFQUFHejhHLEVBQUUsQ0FBQyxDQUFDLEVBQUksRUFBSSxDQUFDLENBQ2pFLENBQUUsRUFDTVksQ0FDUixDQUVBLFNBQVNvb0gsSUFBc0MsQ0FDL0MsQ0FDQSxTQUFTQyxJQUF3QyxDQUNqRCxDQUVBLFNBQVNDLEdBQWE5NkcsRUFBTSs0RCxFQUFPdHFCLEVBQUs2bEMsRUFBTXNNLEVBQWtCdWMsRUFBUUQsRUFBc0IsQ0FDN0YsR0FBRyxDQUFDbDlGLEVBQU0sT0FBT0EsRUFDakIsSUFBSXRYLEVBQU9xd0UsR0FBUyxHQUNoQnViLElBQU1BLEVBQU8sQ0FBQyxNQUFNLENBQUUsQ0FBQSxHQUUxQixJQUFJemlGLEVBQW1CbkosRUFBSyxNQUFRLENBQUUsRUFBRyxDQUFFLEVBRXZDd0gsRUFDQStoRyxFQUFXLENBQUMsRUFBRyxDQUFDLEVBQUUsSUFBUyxFQUFFLEdBQU8sRUFBRyxFQUFHLENBQUMsRUFBRSxFQUFHLEVBQUUsQ0FBQyxDQUFDLEVBR3BEbUQsRUFBTyxHQUFPM3ZDLEVBQU0sR0FDcEJ4eUQsRUFBSzFGLEVBQUdzNkYsRUFBSXAwQixFQUFHTixFQUFHa0UsRUFBTTA5QyxFQUFNcm5ELEVBQUk1N0IsRUFDbEN3MUQsRUFBMEIsQ0FBQSxFQUM5QjUrRixFQUFLLEtBQU8sR0FDWkEsRUFBSyxNQUFNLEVBQUksRUFFZixJQUFJcXlILEVBQUssRUFBR0MsRUFBSyxHQUViOUYsRUFBb0MsQ0FBQSxFQUNwQ0MsRUFBVSxDQUFBLEVBQ1Z0SCxFQUFXbmxILEVBQUssVUFBbUJrNEYsRUFBZSxVQUFhLENBQUMsQ0FBRSxDQUFBLEVBSXRFLEdBSEFpdEIsRUFBUyxRQUFVc0gsRUFDbkJ0SCxFQUFTLE9BQVNxSCxFQUNsQnJILEVBQVMsV0FBYWp0QixFQUFHLFlBQWNBLEVBQUcsT0FBTyxJQUFJLFNBQVNyMkQsR0FBRyxDQUFFLE9BQU9BLEdBQUUsSUFBTyxDQUFBLEVBQ2hGLENBQUM3aEMsRUFBSyxXQUNSQSxFQUFLLFNBQVdtbEgsRUFDYmp0QixFQUFHLE9BQU8sUUFBUXB5RixFQUFJLEVBQUdBLEVBQUlveUYsRUFBRyxNQUFNLE9BQVEsRUFBRXB5RixFQUFHcS9HLEVBQVMsQ0FBQyxFQUFFci9HLEVBQUUsQ0FBQyxFQUFJb3lGLEVBQUcsTUFBTXB5RixDQUFDLEVBR3BGLElBQUl1K0YsRUFBNkIsQ0FBQSxFQUFJRCxHQUE2QixHQUM5RDBtQixHQUFVLEdBRWQvbkMsR0FBZSxFQUFNLEVBQUksQ0FBRSxFQUFFLGVBQWdCLEVBQUVndEMsSUFFNUMsSUFBQ3hWLEdBcVBKLEdBblBBNTNCLEdBQWFyckUsRUFBTSxTQUFrQjVRLEVBQUs2ckgsR0FBSXp2QyxFQUFJLENBQ2pELEdBQUcsQ0FBQS9sQixFQUNILE9BQU8rbEIsRUFBRSxDQUNSLElBQUssS0FDSnQ3RSxFQUFNZCxFQUFLLE1BQ1osSUFBSyxHQUNKNkQsRUFBTTdELEVBQ0gxRyxFQUFLLFdBQWFBLEVBQUssV0FBYXVLLEVBQUksSUFBR3d5RCxFQUFJLElBQ2xEaUksRUFBS2dmLEdBQVdqWixFQUFJeGdFLEVBQUksQ0FBQyxFQUN6QnZLLEVBQUssTUFBTSxFQUFJdUssRUFBSSxHQUNoQjdELEVBQUksUUFBVUEsRUFBSSxLQUFPQSxFQUFJLE9BQVMsUUFDckNBLEVBQUksTUFBS0EsRUFBSSxJQUFNMCtGLEdBQU0xK0YsRUFBSSxHQUFHLEdBQ25DMDlGLEdBQVExOUYsRUFBSSxDQUFDLEVBQUlBLEdBRWxCLE1BRUQsSUFBSyxHQUNMLElBQUssR0FDTCxJQUFLLEdBQ0wsSUFBSyxHQUNMLElBQUssR0FDTCxJQUFLLEdBQ0wsSUFBSyxHQUNMLElBQUssR0FDTCxJQUFLLElBQ0wsSUFBSyxJQUNMLElBQUssSUFDTCxJQUFLLElBQ0wsSUFBSyxJQUNMLElBQUssSUFDTCxJQUFLLElBQ0wsSUFBSyxJQUNMLElBQUssSUFFSixPQURBN0IsRUFBSyxDQUFDLEVBQUU2QixFQUFJLENBQUMsQ0FBQyxFQUNQQSxFQUFJLENBQUMsRUFBQyxDQUNaLElBQUssSUFBSzdCLEVBQUUsRUFBSTZCLEVBQUksQ0FBQyxFQUFHLE1BQ3hCLElBQUssSUFBSzJsSCxFQUFPdnpCLEdBQUtweUYsRUFBSSxDQUFDLENBQUMsRUFBRzdCLEVBQUUsRUFBSXduSCxFQUFLLEVBQUd4bkgsRUFBRSxFQUFJd25ILEVBQUssRUFBRyxNQUMzRCxJQUFLLElBQUt4bkgsRUFBRSxFQUFJLEVBQUE2QixFQUFJLENBQUMsRUFBa0IsTUFDdkMsSUFBSyxJQUFLN0IsRUFBRSxFQUFJNkIsRUFBSSxDQUFDLEVBQU0xRyxFQUFLLFdBQWEsS0FBTzZFLEVBQUUsRUFBSW1nRixHQUFLbmdGLEVBQUUsQ0FBQyxHQUFHLE1BQ3JFLElBQUssTUFBT0EsRUFBRSxFQUFJLElBQUtBLEVBQUUsRUFBSTZCLEVBQUksQ0FBQyxFQUFHLE1BQ3JDLElBQUssS0FBTTdCLEVBQUUsRUFBSSxJQUFLQSxFQUFFLEVBQUk2QixFQUFJLENBQUMsRUFBRSxFQUFHLEtBQ3RDLENBS0QsSUFKSXk0RixFQUFLcVYsRUFBTyxPQUFPOXRHLEVBQUksQ0FBQyxFQUFFLFNBQVMsSUFBSXloSCxHQUFZdGpILEVBQUVzNkYsRUFBRyxTQUFTLEtBQUtuL0YsRUFBTXkwRyxFQUFRRCxDQUFNLEVBQzlGL3BDLEVBQUkvakUsRUFBSSxDQUFDLEVBQUUsR0FBSyxHQUFLK2pFLEVBQUksRUFBSS9qRSxFQUFJLENBQUMsRUFBRSxFQUNqQzFHLEVBQUssT0FBYW1KLEVBQUU0aEUsQ0FBQyxJQUFHNWhFLEVBQUU0aEUsQ0FBQyxFQUFJLENBQUEsR0FBSTVoRSxFQUFFNGhFLENBQUMsRUFBRU4sQ0FBQyxFQUFJNWxFLEdBQzNDc0UsRUFBRTQ2RSxHQUFXdFosQ0FBQyxFQUFJekYsQ0FBRSxFQUFJbmdFLEVBQzFCN0UsRUFBSyxZQUFhLENBRXBCLElBREFzeUgsRUFBSyxHQUNERCxFQUFLLEVBQUdBLEVBQUs3RixFQUFPLE9BQVEsRUFBRTZGLEVBQUksQ0FDckMsSUFBSUcsRUFBTWhHLEVBQU82RixDQUFFLEVBQ2hCOW5ILEVBQUksR0FBS2lvSCxFQUFJLENBQUMsRUFBRSxFQUFFLEdBQUtqb0gsRUFBSSxHQUFLaW9ILEVBQUksQ0FBQyxFQUFFLEVBQUUsR0FDeEMvbkQsR0FBSytuRCxFQUFJLENBQUMsRUFBRSxFQUFFLEdBQUsvbkQsR0FBSytuRCxFQUFJLENBQUMsRUFBRSxFQUFFLElBQ25DM3RILEVBQUUsRUFBSTYvRSxHQUFhOHRDLEVBQUksQ0FBQyxDQUFDLEVBQUdGLEVBQUssR0FFbkMsQ0FDRSxDQUFDQSxHQUFNNXJILEVBQUksT0FBUyxJQUFHN0IsRUFBRSxFQUFJNkIsRUFBSSxDQUFDLEVBQ3JDLENBTUQsR0FKRzZpRyxFQUFTLEVBQUUsRUFBSWgvRixFQUFJLElBQUdnL0YsRUFBUyxFQUFFLEVBQUloL0YsRUFBSSxHQUN6Q2cvRixFQUFTLEVBQUUsRUFBSTkrQixJQUFHOCtCLEVBQVMsRUFBRSxFQUFJOStCLEdBQ2pDOCtCLEVBQVMsRUFBRSxFQUFJaC9GLEVBQUksSUFBR2cvRixFQUFTLEVBQUUsRUFBSWgvRixFQUFJLEdBQ3pDZy9GLEVBQVMsRUFBRSxFQUFJOStCLElBQUc4K0IsRUFBUyxFQUFFLEVBQUk5K0IsR0FDakN6cUUsRUFBSyxXQUFhbS9GLEdBQU10NkYsRUFBRSxHQUFLLEtBQU9naUUsR0FBWTVGLEdBQVVrK0IsRUFBRyxRQUFRLENBQUMsRUFBRyxDQUM3RSxJQUFJNWpGLEVBQUswbUQsR0FBb0JwOUQsRUFBRSxDQUFDLEVBQU0wVyxJQUFNMVcsRUFBRSxFQUFJLElBQUtBLEVBQUUsRUFBSSxJQUFJLEtBQUswVyxFQUFHLEVBQUdBLEVBQUcsRUFBRSxFQUFFQSxFQUFHLEVBQUVBLEVBQUcsRUFBRUEsRUFBRyxFQUFFQSxFQUFHLEVBQUVBLEVBQUcsQ0FBQyxFQUMzRyxDQUNFZy9GLEtBQ0NBLEdBQUcsTUFBUSxXQUFVMTFHLEVBQUUsRUFBSSxJQUM5QjAxRyxHQUFLLFFBR04sTUFFRCxJQUFLLEdBQ0wsSUFBSyxJQUNKLEdBQUcsQ0FBQ3Y2RyxFQUFLLFlBQWMwc0csRUFBTSxNQUM3QjduRyxFQUFLLENBQUMsRUFBRSxJQUFJLEVBQUUsTUFBTSxFQUNwQjRsRSxFQUFJL2pFLEVBQUksQ0FBQyxFQUFFLEdBQUssR0FBSytqRSxFQUFJLEVBQUkvakUsRUFBSSxDQUFDLEVBQUUsRUFDakMxRyxFQUFLLE9BQWFtSixFQUFFNGhFLENBQUMsSUFBRzVoRSxFQUFFNGhFLENBQUMsRUFBSSxDQUFBLEdBQUk1aEUsRUFBRTRoRSxDQUFDLEVBQUVOLENBQUMsRUFBSTVsRSxHQUMzQ3NFLEVBQUU0NkUsR0FBV3RaLENBQUMsRUFBSXpGLENBQUUsRUFBSW5nRSxFQUMxQjBrRyxFQUFTLEVBQUUsRUFBSWgvRixFQUFJLElBQUdnL0YsRUFBUyxFQUFFLEVBQUloL0YsRUFBSSxHQUN6Q2cvRixFQUFTLEVBQUUsRUFBSTkrQixJQUFHOCtCLEVBQVMsRUFBRSxFQUFJOStCLEdBQ2pDOCtCLEVBQVMsRUFBRSxFQUFJaC9GLEVBQUksSUFBR2cvRixFQUFTLEVBQUUsRUFBSWgvRixFQUFJLEdBQ3pDZy9GLEVBQVMsRUFBRSxFQUFJOStCLElBQUc4K0IsRUFBUyxFQUFFLEVBQUk5K0IsR0FDakM4dkMsS0FDQ0EsR0FBRyxNQUFRLFdBQVUxMUcsRUFBRSxFQUFJLElBQzlCMDFHLEdBQUssUUFHTixNQUVELElBQUssS0FDSjNiLEVBQU8sS0FBS2w0RixDQUFHLEVBQUcsTUFFbkIsSUFBSyxJQUNKNnpHLEtBQU92NkcsRUFBSyxRQUFRLENBQUEsR0FBSSxNQUFNLENBQUUsR0FBRTBHLEVBQUksQ0FBQyxFQUN0QyxNQUVGLElBQUssS0FDSixJQUFJbWxGLEVBQU1ELEVBQUssS0FBSyxFQUFFbGxGLEVBQUksS0FBSyxFQVEvQixJQVBHbWxGLEdBQ0ZubEYsRUFBSSxPQUFTbWxGLEVBQUksT0FDZG5sRixFQUFJLE1BQUtBLEVBQUksUUFBVSxJQUFJQSxFQUFJLEtBQ2xDQSxFQUFJLElBQU1tbEYsR0FDRG5sRixFQUFJLE9BQVMsS0FDdEJBLEVBQUksT0FBUyxJQUFNQSxFQUFJLEtBRXBCcWtFLEVBQUVya0UsRUFBSSxJQUFJLEVBQUUsRUFBRXFrRSxHQUFHcmtFLEVBQUksSUFBSSxFQUFFLEVBQUUsRUFBRXFrRSxFQUFHLElBQUlOLEVBQUUvakUsRUFBSSxJQUFJLEVBQUUsRUFBRStqRSxHQUFHL2pFLEVBQUksSUFBSSxFQUFFLEVBQUUsRUFBRStqRSxFQUNyRXpxRSxFQUFLLE9BQ0htSixFQUFFNGhFLENBQUMsSUFBRzVoRSxFQUFFNGhFLENBQUMsRUFBSSxJQUNiNWhFLEVBQUU0aEUsQ0FBQyxFQUFFTixDQUFDLElBQUd0aEUsRUFBRTRoRSxDQUFDLEVBQUVOLENBQUMsRUFBSSxDQUFDLEVBQUUsSUFBSSxFQUFFLE1BQVMsR0FDekN0aEUsRUFBRTRoRSxDQUFDLEVBQUVOLENBQUMsRUFBRSxFQUFJL2pFLElBRVppb0UsRUFBT2dWLEdBQVksQ0FBQyxFQUFFbFosRUFBRSxFQUFFTSxDQUFDLENBQUMsRUFDeEI1aEUsRUFBRXdsRSxDQUFJLElBQUd4bEUsRUFBRXdsRSxDQUFJLEVBQUksQ0FBQyxFQUFFLElBQUksRUFBRSxNQUFTLEdBQ3pDeGxFLEVBQUV3bEUsQ0FBSSxFQUFFLEVBQUlqb0UsR0FHZCxNQUVELElBQUssS0FDSixHQUFHLENBQUMxRyxFQUFLLFlBQWEsTUFDdEJ3c0gsRUFBTyxLQUFLOWxILENBQUcsRUFDZjBpQyxFQUFTcHBDLEVBQUssTUFBUW1KLEVBQUU0aEUsQ0FBQyxFQUFFTixDQUFDLEVBQUl0aEUsRUFBRTQ2RSxHQUFXdFosQ0FBQyxFQUFJekYsQ0FBRSxFQUNwRDU3QixFQUFLLEVBQUltOEUsR0FBa0I3K0csRUFBSSxDQUFDLEVBQUc2aUcsRUFBVSxDQUFDLEVBQUVoL0YsRUFBSSxFQUFHLEVBQUVrZ0UsQ0FBQyxFQUFHMDZDLEVBQVVubEgsQ0FBSSxFQUMzRW9wQyxFQUFLLEVBQUlzN0MsR0FBYWgrRSxFQUFJLENBQUMsQ0FBQyxFQUM1QixNQUNELElBQUssS0FDSixHQUFHLENBQUMxRyxFQUFLLFlBQWEsTUFDdEJ5c0gsRUFBUTlvQyxHQUFZajlFLEVBQUksQ0FBQyxFQUFFLENBQUMsQ0FBQyxFQUFJQSxFQUFJLENBQUMsRUFDdEMwaUMsRUFBUXBwQyxFQUFLLE1BQVFtSixFQUFFNGhFLENBQUMsRUFBRU4sQ0FBQyxFQUFJdGhFLEVBQUU0NkUsR0FBV3RaLENBQUMsRUFBSXpGLENBQUUsRUFDbkQ1N0IsRUFBSyxFQUFJbThFLEdBQWtCNytHLEVBQUksQ0FBQyxFQUFHNmlHLEVBQVUsQ0FBQyxFQUFFaC9GLEVBQUksRUFBRyxFQUFFa2dFLENBQUMsRUFBRzA2QyxFQUFVbmxILENBQUksRUFDM0UsTUFHRCxJQUFLLElBQ0osR0FBRyxDQUFDQSxFQUFLLFdBQVksTUFDckIsS0FBTTBHLEVBQUksR0FBS0EsRUFBSSxHQUNsQjI5RixFQUFRMzlGLEVBQUksR0FBRyxFQUFJLENBQUUsTUFBT0EsRUFBSSxFQUFFLElBQUssT0FBUSxDQUFDLEVBQUVBLEVBQUksTUFBUSxHQUFPLE1BQU9BLEVBQUksT0FDNUVva0gsS0FBV0EsR0FBVSxHQUFNL1csR0FBY3J0RyxFQUFJLEVBQUUsR0FBRyxHQUN0RHkrRixHQUFZZCxFQUFRMzlGLEVBQUksRUFBRSxDQUFDLENBQUMsRUFFN0IsTUFFRCxJQUFLLEtBQ0p5QyxFQUFFLGFBQWEsRUFBSSxDQUFFLElBQUl1N0UsR0FBYWgrRSxDQUFHLEdBQ3pDLE1BRUQsSUFBSyxLQUNKeUMsRUFBRSxVQUFVLEVBQUl6QyxFQUNoQixNQUVELElBQUssS0FDQXd4RixFQUFHLE9BQU9ueUMsQ0FBRyxJQUFHbXlDLEVBQUcsT0FBT255QyxDQUFHLEVBQUksSUFDbENyL0MsRUFBSSxPQUFNd3hGLEVBQUcsT0FBT255QyxDQUFHLEVBQUUsU0FBV3IvQyxFQUFJLE9BQ3hDQSxFQUFJLE9BQVNBLEVBQUksUUFBTXlDLEVBQUUsVUFBVSxFQUFJLENBQUUsTUFBT3pDLEVBQUksTUFBTyxLQUFNQSxFQUFJLElBQUksR0FDNUUsTUFFRCxJQUFLLEtBQ0F3eEYsRUFBRyxRQUFPQSxFQUFHLE1BQVEsQ0FBQyxDQUFBLENBQUUsR0FDeEJBLEVBQUcsTUFBTSxDQUFDLElBQUdBLEVBQUcsTUFBTSxDQUFDLEVBQUksSUFDNUJ4eEYsRUFBSSxNQUFLd3hGLEVBQUcsTUFBTSxDQUFDLEVBQUUsSUFBTSxJQUM5QixNQUVELElBQUssS0FDSixNQUVELElBQUssSUFDTCxJQUFLLE1BQ0osTUFFRCxJQUFLLEtBQ0osTUFDRCxJQUFLLEtBQ0wsSUFBSyxLQUNMLElBQUssS0FDTCxJQUFLLEtBQ0wsSUFBSyxLQUNMLElBQUssS0FDTCxJQUFLLE1BQ0wsSUFBSyxNQUNMLElBQUssS0FDTCxJQUFLLE1BQ0wsSUFBSyxLQUNMLElBQUssTUFDTCxJQUFLLEtBQ0wsSUFBSyxLQUNMLElBQUssS0FDTCxJQUFLLE1BQ0wsSUFBSyxLQUNMLElBQUssS0FDTCxJQUFLLE1BQ0wsSUFBSyxLQUNMLElBQUssS0FDTCxJQUFLLEtBQ0wsSUFBSyxLQUNMLElBQUssS0FDTCxJQUFLLE1BQ0wsSUFBSyxLQUNMLElBQUssTUFDTCxJQUFLLEtBQ0wsSUFBSyxLQUNMLElBQUssS0FDTCxJQUFLLEtBQ0wsSUFBSyxLQUNMLElBQUssS0FDTCxJQUFLLEtBQ0wsSUFBSyxLQUNMLElBQUssTUFDTCxJQUFLLEtBQ0wsSUFBSyxNQUNMLElBQUssTUFDTCxJQUFLLEtBQ0wsSUFBSyxLQUNMLElBQUssS0FDTCxJQUFLLEtBQ0wsSUFBSyxNQUNMLElBQUssS0FDTCxJQUFLLEtBQ0wsSUFBSyxNQUNMLElBQUssSUFDTCxJQUFLLE1BQ0wsSUFBSyxNQUNKLE1BRUQsSUFBSyxJQUNKd1UsRUFBTyxHQUFNLE1BQ2QsSUFBSyxJQUNKQSxFQUFPLEdBQU8sTUFDZixJQUFLLElBQ1lBLEVBQU8sR0FBTSxNQUM5QixJQUFLLElBQ1NBLEVBQU8sR0FBTyxNQUU1QixRQUNDLEdBQUcsQ0FBQTZsQixHQUFHLEdBQ0QsR0FBRyxDQUFDN2xCLEdBQVExc0csRUFBSyxJQUFLLE1BQU0sSUFBSSxNQUFNLHVCQUF5QjhpRixFQUFHLFNBQVMsRUFBRSxDQUFDLEVBQ3BGLENBQ0QsRUFBRTlpRixDQUFJLEVBRVAsT0FBT0EsRUFBSyxTQUNaLE9BQU9BLEVBQUssTUFBTSxFQUVmLENBQUNtSixFQUFFLE1BQU0sSUFBTW9nRyxFQUFTLEVBQUUsRUFBSSxLQUFXL2hHLElBQVFBLEVBQUksRUFBRSxFQUFJLEdBQUtBLEVBQUksRUFBRSxFQUFJLEdBQUtBLEVBQUksRUFBRSxFQUFJLEdBQUtBLEVBQUksRUFBRSxFQUFJLE1BQUsyQixFQUFFLE1BQU0sRUFBSXU3RSxHQUFhbDlFLEdBQU8raEcsQ0FBUSxHQUNySnZwRyxFQUFLLFdBQWFtSixFQUFFLE1BQU0sRUFBRyxDQUMvQixJQUFJK2dILEdBQVNybEMsR0FBa0IxN0UsRUFBRSxNQUFNLENBQUMsRUFDckNuSixFQUFLLFdBQWEsQ0FBQ2txSCxHQUFPLEVBQUUsSUFDOUJBLEdBQU8sRUFBRSxFQUFJbHFILEVBQUssVUFBWSxFQUMzQmtxSCxHQUFPLEVBQUUsRUFBSTNnQixFQUFTLEVBQUUsSUFBRzJnQixHQUFPLEVBQUUsRUFBSTNnQixFQUFTLEVBQUUsR0FDbkQyZ0IsR0FBTyxFQUFFLEVBQUlBLEdBQU8sRUFBRSxJQUFHQSxHQUFPLEVBQUUsRUFBSUEsR0FBTyxFQUFFLEdBQy9DQSxHQUFPLEVBQUUsRUFBSTNnQixFQUFTLEVBQUUsSUFBRzJnQixHQUFPLEVBQUUsRUFBSTNnQixFQUFTLEVBQUUsR0FDbkQyZ0IsR0FBTyxFQUFFLEVBQUlBLEdBQU8sRUFBRSxJQUFHQSxHQUFPLEVBQUUsRUFBSUEsR0FBTyxFQUFFLEdBQ2xEL2dILEVBQUUsVUFBVSxFQUFJQSxFQUFFLE1BQU0sRUFDeEJBLEVBQUUsTUFBTSxFQUFJdTdFLEdBQWF3bEMsRUFBTSxFQUVoQyxDQUNELE9BQUd0ckIsRUFBTyxPQUFTLElBQUd6MUYsRUFBRSxTQUFTLEVBQUl5MUYsR0FDbEN5RixFQUFRLE9BQVMsSUFBR2w3RixFQUFFLE9BQU8sRUFBSWs3RixHQUNqQ0QsR0FBUSxPQUFTLElBQUdqN0YsRUFBRSxPQUFPLEVBQUlpN0YsSUFDN0JqN0YsQ0FDUixDQUdBLFNBQVNzcEgsR0FBa0JudkMsRUFBaUJsNkMsRUFBZTJoQyxFQUFjTixFQUFjenFFLEVBQU11bEYsRUFBa0JtdEMsRUFBbUMsQ0FDakosR0FBR3RwRixFQUFLLElBQU0sT0FBVyxNQUFPLEdBQ2hDLElBQUlrK0IsRUFBSyxHQUNULE9BQU9sK0IsRUFBSyxFQUFDLENBQ1osSUFBSyxJQUFLaytCLEVBQUtsK0IsRUFBSyxFQUFJLElBQU0sSUFBSyxNQUNuQyxJQUFLLElBQ0pBLEVBQU82eEMsR0FBSTd4QyxDQUFJLEVBQ2ZBLEVBQUssRUFBSUEsRUFBSyxHQUFLNjNCLEdBQVUsRUFBRSxFQUMvQjczQixFQUFLLEVBQUk4d0MsR0FBUVcsR0FBVXp4QyxFQUFLLENBQUMsQ0FBQyxFQUFHQSxFQUFLLEVBQUksSUFDOUMsTUFFRCxJQUFLLElBQUssSUFBSyxJQUFLaytCLEVBQUssR0FBR2wrQixFQUFLLEVBQUcsTUFDcEMsUUFBU2srQixFQUFLbCtCLEVBQUssRUFBRyxLQUN0QixDQUNELElBQUl0L0IsRUFBYSxDQUFDaWhFLEVBQUssRUFBRU4sQ0FBQyxFQUsxQixPQUhBM2dFLEVBQUUsRUFBSW8rRyxHQUFlbG9ILEVBQUssUUFBU29wQyxFQUFNcHBDLENBQUksRUFDMUNvcEMsRUFBSyxHQUFHbThDLEVBQUcsUUFBUSxFQUFFLEtBQUssQ0FBQzVCLEdBQVk3NUUsQ0FBQyxFQUFHcy9CLEVBQUssQ0FBQyxDQUFDLEVBQ2xEQSxFQUFLLEdBQUdtOEMsRUFBRyxXQUFXLEVBQUUsS0FBSyxDQUFDNUIsR0FBWTc1RSxDQUFDLEVBQUdzL0IsRUFBSyxDQUFDLENBQUMsRUFDakRBLEVBQUssRUFBQyxDQUNaLElBQUssSUFBSyxJQUFLLE1BQ2QsT0FBR3BwQyxFQUFLLFNBQ1BzbkUsRUFBS3FnRCxHQUFXM25ILEVBQUssUUFBVW9wQyxFQUFLLEVBQVlwcEMsRUFBSyxVQUFVLEVBQy9EOEosRUFBRSxFQUFJLElBQUtBLEVBQUUsRUFBSXc5RCxFQUNkb3JELEVBQVdydkMsR0FBYUMsRUFBSSxHQUEyQnNzQyxHQUFtQnhtRixFQUFNdC9CLENBQUMsQ0FBQyxFQUNoRnU1RSxHQUFhQyxFQUFJLEVBQTBCb3NDLEdBQWtCdG1GLEVBQU10L0IsQ0FBQyxDQUFDLElBRTFFQSxFQUFFLEVBQUksTUFDSDRvSCxFQUFXcnZDLEdBQWFDLEVBQUksR0FBeUJtdEMsR0FBaUJybkYsRUFBTXQvQixDQUFDLENBQUMsRUFDNUV1NUUsR0FBYUMsRUFBSSxFQUF3Qml0QyxHQUFnQm5uRixFQUFNdC9CLENBQUMsQ0FBQyxHQUVoRSxHQUNSLElBQUssSUFFSixPQUFHcy9CLEVBQUssSUFBTUEsRUFBSyxFQUFJLElBQU1BLEVBQUssRUFBSSxNQUFTQSxFQUFLLEVBQUksSUFDcERzcEYsRUFBV3J2QyxHQUFhQyxFQUFJLEdBQXlCOHNDLEdBQWlCaG5GLEVBQU10L0IsQ0FBQyxDQUFDLEVBQzVFdTVFLEdBQWFDLEVBQUksRUFBd0I0c0MsR0FBZ0I5bUYsRUFBTXQvQixDQUFDLENBQUMsRUFFbkU0b0gsRUFBV3J2QyxHQUFhQyxFQUFJLEdBQTJCMHNDLEdBQW1CNW1GLEVBQU10L0IsQ0FBQyxDQUFDLEVBQ2hGdTVFLEdBQWFDLEVBQUksRUFBMEJ3c0MsR0FBa0IxbUYsRUFBTXQvQixDQUFDLENBQUMsRUFDbEUsR0FDVixJQUFLLElBQ0osT0FBQUEsRUFBRSxFQUFJLElBQ0g0b0gsRUFBV3J2QyxHQUFhQyxFQUFJLEdBQTJCNHJDLEdBQW1COWxGLEVBQU10L0IsQ0FBQyxDQUFDLEVBQ2hGdTVFLEdBQWFDLEVBQUksRUFBMEIwckMsR0FBa0I1bEYsRUFBTXQvQixDQUFDLENBQUMsRUFDbkUsR0FDUixJQUFLLElBQ0osT0FBQUEsRUFBRSxFQUFJLElBQ0g0b0gsRUFBV3J2QyxHQUFhQyxFQUFJLEdBQTRCaXNDLEdBQW9Cbm1GLEVBQU10L0IsQ0FBQyxDQUFDLEVBQ2xGdTVFLEdBQWFDLEVBQUksRUFBMkIrckMsR0FBbUJqbUYsRUFBTXQvQixDQUFDLENBQUMsRUFDckUsRUFDUixDQUNELE9BQUc0b0gsRUFBV3J2QyxHQUFhQyxFQUFJLEdBQTRCdXJDLEdBQW9CemxGLEVBQU10L0IsQ0FBQyxDQUFDLEVBQ2xGdTVFLEdBQWFDLEVBQUksRUFBMkJvckMsR0FBbUJ0bEYsRUFBTXQvQixDQUFDLENBQUMsRUFDckUsRUFDUixDQUVBLFNBQVM2b0gsR0FBZ0JydkMsRUFBSWlDLEVBQWtCeC9CLEVBQWdCL2xELEVBQXlCLENBQ3ZGLElBQUlpbEMsRUFBUTQvQyxHQUFrQlUsRUFBRyxNQUFNLEdBQUssSUFBSSxFQUFHLzlFLEVBQUt3OUQsRUFBSyxHQUFJbjVCLEVBQXlCLENBQUEsRUFDMUZ3M0MsR0FBYUMsRUFBSSxLQUNqQixJQUFJZ0MsRUFBUSxNQUFNLFFBQVFDLENBQUUsRUFDeEJxdEMsRUFBTTN0RixFQUFNLEVBQUUsRUFDZnNnRCxFQUFHLE9BQU8sSUFBR3F0QyxFQUFNLEtBQUssSUFBSTN0RixFQUFNLEVBQUUsRUFBR3NnRCxFQUFHLE9BQU8sRUFBRSxPQUFTLENBQUMsR0FDaEUsUUFBUXhhLEVBQUk5bEMsRUFBTSxFQUFFLEVBQUc4bEMsR0FBSzZuRCxFQUFLLEVBQUU3bkQsRUFBRyxDQUNyQy9GLEVBQUtnZixHQUFXalosQ0FBQyxFQUdqQm9qRCxHQUFpQjdxQyxFQUFJaUMsRUFBSXRnRCxFQUFPOGxDLENBQUMsRUFDakMsSUFBSTJuRCxFQUFZLEdBQ2hCLEdBQUczbkQsR0FBSzlsQyxFQUFNLEVBQUUsRUFBRyxRQUFRd2xDLEVBQUl4bEMsRUFBTSxFQUFFLEVBQUd3bEMsR0FBS3hsQyxFQUFNLEVBQUUsRUFBRyxFQUFFd2xDLEVBQUcsQ0FFM0RNLElBQU05bEMsRUFBTSxFQUFFLElBQUc0RyxFQUFLNCtCLENBQUMsRUFBSXNaLEdBQVd0WixDQUFDLEdBQzFDampFLEVBQU1xa0MsRUFBSzQrQixDQUFDLEVBQUl6RixFQUNoQixJQUFJNTdCLEVBQU9rOEMsR0FBU0MsRUFBR3hhLENBQUMsR0FBRyxDQUFFLEdBQUVOLENBQUMsRUFBSThhLEVBQUcvOUUsQ0FBRyxFQUMxQyxHQUFHLENBQUM0aEMsRUFBTSxDQUFFc3BGLEVBQVksR0FBTyxRQUFXLENBRTFDQSxFQUFZRCxHQUFrQm52QyxFQUFJbDZDLEVBQU0yaEMsRUFBR04sRUFBR3pxRSxFQUFNdWxGLEVBQUltdEMsQ0FBUyxDQUNqRSxDQUNELENBQ0RydkMsR0FBYUMsRUFBSSxJQUNsQixDQUVBLFNBQVN1dkMsR0FBaUJ2dkMsRUFBSWlDLEVBQWtCLENBQzVDLENBQUNBLEdBQU0sQ0FBQ0EsRUFBRyxTQUFTLElBQ3ZCbEMsR0FBYUMsRUFBSSxJQUFpQzB0QyxHQUF5QnpyQyxFQUFHLFNBQVMsRUFBRSxNQUFNLENBQUMsRUFDaEdBLEVBQUcsU0FBUyxFQUFFLFFBQVEsU0FBU2xvQixFQUFHLENBQUVnbUIsR0FBYUMsRUFBSSxJQUEyQnl0QyxHQUFtQjF6RCxDQUFDLENBQUMsQ0FBSSxDQUFBLEVBQ3pHZ21CLEdBQWFDLEVBQUksS0FDbEIsQ0FFQSxTQUFTd3ZDLEdBQWV4dkMsRUFBSWlDLEVBQXVELENBQy9FLENBQUNBLEdBQU0sQ0FBQ0EsRUFBRyxPQUFPLElBQ3JCbEMsR0FBYUMsRUFBSSxLQUNqQmlDLEVBQUcsT0FBTyxFQUFFLFFBQVEsU0FBU2xvQixFQUFHdjNELEVBQUcsQ0FBS3UzRCxHQUFHZ21CLEdBQWFDLEVBQUksR0FBMkJtdUMsR0FBaUIzckgsRUFBR3UzRCxDQUFDLENBQUMsQ0FBRSxDQUFFLEVBQ2pIZ21CLEdBQWFDLEVBQUksS0FDbEIsQ0FFQSxTQUFTeXZDLEdBQWdCenZDLEVBQUlpQyxFQUFrQixDQUMzQyxDQUFDQSxHQUFNLENBQUNBLEVBQUcsTUFBTSxJQUNwQmxDLEdBQWFDLEVBQUksS0FDakJELEdBQWFDLEVBQUksSUFBOEIwdUMsR0FBc0JudEMsR0FBa0JVLEVBQUcsTUFBTSxDQUFDLENBQUMsQ0FBQyxFQUNuR2xDLEdBQWFDLEVBQUksS0FDbEIsQ0FFQSxTQUFTMHZDLEdBQWExdkMsRUFBSWlDLEVBQWtCcUcsRUFBTSxDQUVqRHJHLEVBQUcsUUFBUSxFQUFFLFFBQVEsU0FBUzc2RCxFQUFHLENBQ2hDLEdBQUlBLEVBQUUsQ0FBQyxFQUFFLE9BQ1QsS0FBSXdoRSxFQUFNRCxHQUFTTCxFQUFNLEdBQUlsaEUsRUFBRSxDQUFDLEVBQUUsT0FBTyxRQUFRLE9BQVEsRUFBRSxFQUFHOGdFLEdBQUssS0FBSyxFQUN4RW5JLEdBQWFDLEVBQUksSUFBdUI2dEMsR0FBZXptRyxFQUFHd2hFLENBQUcsQ0FBQyxFQUNoRSxDQUFFLEVBQ0QsT0FBTzNHLEVBQUcsUUFBUSxDQUNuQixDQUNBLFNBQVMwdEMsR0FBb0IzdkMsRUFBSWlDLEVBQWtCeC9CLEVBQWdCNmxDLEVBQU0sQ0FFeEUsR0FBR3JHLEVBQUcsV0FBVyxFQUFFLE9BQVMsRUFBRyxDQUM5QixJQUFJMkcsRUFBTUQsR0FBU0wsRUFBTSxHQUFJLDBCQUE0QjdsQyxFQUFJLEdBQUssT0FBUXlsQyxHQUFLLEdBQUcsRUFDbEZuSSxHQUFhQyxFQUFJLElBQStCb0UsR0FBWSxNQUFRd0UsQ0FBRyxDQUFDLEVBQ3hFM0csRUFBRyxTQUFTLEVBQUkyRyxDQUNoQixDQUNGLENBRUEsU0FBU2duQyxHQUFpQjV2QyxFQUFJaUMsRUFBSTJTLEVBQUlueUMsRUFBSyxDQUMxQyxHQUFJdy9CLEVBQUcsYUFBYSxFQUNwQixLQUFJanVFLEVBQU9pdUUsRUFBRyxhQUFhLEVBQ3ZCLzlFLEVBQU0sT0FBTzhQLEVBQUssS0FBUSxTQUFXQSxFQUFLLElBQU1vdEUsR0FBYXB0RSxFQUFLLEdBQUcsRUFHckU0Z0YsRUFBRyxXQUFVQSxFQUFHLFNBQVksQ0FBQyxPQUFPLENBQUUsQ0FBQSxHQUN0Q0EsRUFBRyxTQUFTLFFBQU9BLEVBQUcsU0FBUyxNQUFRLElBQzNDLElBQUlrekIsRUFBeUJsekIsRUFBRyxTQUFTLE1BQ3JDanpELEVBQVF3L0MsR0FBYWo5RSxDQUFHLEVBQ3pCeTlCLEVBQU0sRUFBRSxHQUFLQSxFQUFNLEVBQUUsSUFBS0EsRUFBTSxFQUFFLEVBQUl3L0MsR0FBYWMsRUFBRyxNQUFNLENBQUMsRUFBRSxFQUFFLEVBQUcvOUUsRUFBTWs5RSxHQUFhei9DLENBQUssR0FDL0YsUUFBUW4vQixFQUFJLEVBQUdBLEVBQUlzbEgsRUFBTSxPQUFRLEVBQUV0bEgsRUFBRyxDQUNyQyxJQUFJNUYsRUFBT2tySCxFQUFNdGxILENBQUMsRUFDbEIsR0FBRzVGLEVBQUssTUFBUSx5QkFDYkEsRUFBSyxPQUFTNmxELEVBQ2pCLENBQUE3bEQsRUFBSyxJQUFNLElBQU1nNEYsRUFBRyxXQUFXbnlDLENBQUcsRUFBSSxLQUFPditDLEVBQUssTUFDbEQsQ0FDRTFCLEdBQUtzbEgsRUFBTSxRQUFRQSxFQUFNLEtBQUssQ0FBRSxLQUFNLHdCQUF5QixNQUFPcmxFLEVBQUssSUFBSyxJQUFNbXlDLEVBQUcsV0FBV255QyxDQUFHLEVBQUksS0FBT3YrQyxDQUFHLENBQUcsRUFFM0g2N0UsR0FBYUMsRUFBSSxJQUE4QjhFLEdBQW1CdkQsR0FBa0JyOUUsQ0FBRyxDQUFDLENBQUMsRUFJekY2N0UsR0FBYUMsRUFBSSxLQUNsQixDQUVBLFNBQVM2dkMsR0FBZTd2QyxFQUFJaUMsRUFBSXdzQyxFQUFVLENBQ3pDMXVDLEdBQWFDLEVBQUksS0FHaEJELEdBQWFDLEVBQUksSUFBNkJ3dUMsR0FBcUJ2c0MsRUFBSXdzQyxDQUFRLENBQUMsRUFLaEYxdUMsR0FBYUMsRUFBSSxLQUdsQkQsR0FBYUMsRUFBSSxJQUNsQixDQU9BLFNBQVM4dkMsR0FBbUI5dkMsRUFBSWlDLEVBQUksQ0FDL0JBLEVBQUcsVUFBVSxHQUVqQmxDLEdBQWFDLEVBQUksSUFBaUMydUMsR0FBeUIxc0MsRUFBRyxVQUFVLENBQUMsQ0FBQyxDQUMzRixDQUVBLFNBQVM4dEMsR0FBYXR0RSxFQUFnQi9sRCxFQUFNazRGLEVBQWlCdE0sRUFBTSxDQUNsRSxJQUFJdEksRUFBS04sS0FDTDc1RSxFQUFJK3VGLEVBQUcsV0FBV255QyxDQUFHLEVBQUd3L0IsRUFBSzJTLEVBQUcsT0FBTy91RixDQUFDLEdBQUssR0FDN0NpYyxFQUFlamMsRUFBRyxHQUFJLENBQUsrdUYsR0FBTUEsRUFBRyxXQUFVOXlFLEVBQUk4eUUsRUFBRyxTQUFTLE9BQU9ueUMsQ0FBRyxFQUFFLFVBQVkzZ0MsRUFBSSxNQUFVLENBQUUsQ0FDMUcsSUFBSW5jLEVBQUk0N0UsR0FBa0JVLEVBQUcsTUFBTSxHQUFLLElBQUksRUFDNUMsR0FBR3Q4RSxFQUFFLEVBQUUsRUFBSSxPQUFVQSxFQUFFLEVBQUUsRUFBSSxRQUFTLENBQ3JDLEdBQUdqSixFQUFLLElBQUssTUFBTSxJQUFJLE1BQU0sVUFBWXVsRixFQUFHLE1BQU0sR0FBSyxNQUFRLHFDQUFxQyxFQUNwR3Q4RSxFQUFFLEVBQUUsRUFBSSxLQUFLLElBQUlBLEVBQUUsRUFBRSxFQUFHLEtBQU0sRUFDOUJBLEVBQUUsRUFBRSxFQUFJLEtBQUssSUFBSUEsRUFBRSxFQUFFLEVBQUcsT0FBTyxDQUMvQixDQUNELE9BQUFzOEUsRUFBRyxRQUFRLEVBQUksR0FFZkEsRUFBRyxXQUFXLEVBQUksR0FDbEJsQyxHQUFhQyxFQUFJLE1BQ2Q0VSxFQUFHLFFBQVUzUyxFQUFHLFVBQVUsSUFBR2xDLEdBQWFDLEVBQUksSUFBd0JrckMsR0FBZ0JwcEcsRUFBR21nRSxFQUFHLFVBQVUsQ0FBQyxDQUFDLEVBQzNHbEMsR0FBYUMsRUFBSSxJQUF1QitxQyxHQUFlcGxILENBQUMsQ0FBQyxFQUN6RGtxSCxHQUFlN3ZDLEVBQUlpQyxFQUFJMlMsRUFBRyxRQUFRLEVBRWxDNDZCLEdBQWV4dkMsRUFBSWlDLENBQWlCLEVBQ3BDb3RDLEdBQWdCcnZDLEVBQUlpQyxFQUFJeC9CLEVBQUsvbEQsQ0FBUSxFQUVyQ296SCxHQUFtQjl2QyxFQUFJaUMsQ0FBRSxFQUd6QjJ0QyxHQUFpQjV2QyxFQUFJaUMsRUFBSTJTLEVBQUlueUMsQ0FBRyxFQUloQzhzRSxHQUFpQnZ2QyxFQUFJaUMsQ0FBRSxFQUl2Qnl0QyxHQUFhMXZDLEVBQUlpQyxFQUFJcUcsQ0FBSSxFQUV0QnJHLEVBQUcsVUFBVSxHQUFHbEMsR0FBYUMsRUFBSSxJQUF5QnN1QyxHQUFpQnJzQyxFQUFHLFVBQVUsQ0FBQyxDQUFDLEdBTzFGLENBQUN2bEYsR0FBUUEsRUFBSyxVQUFhQSxFQUFLLFVBQWEsT0FBVSt5SCxHQUFnQnp2QyxFQUFJaUMsQ0FBRSxFQUdoRjB0QyxHQUFvQjN2QyxFQUFJaUMsRUFBSXgvQixFQUFLNmxDLENBQUksRUFRckN2SSxHQUFhQyxFQUFJLEtBQ1ZBLEVBQUcsS0FDWCxDQUNBLFNBQVNnd0MsR0FBWWg4RyxFQUE2RCxDQUNqRixJQUFJVyxFQUErQixDQUFBLEVBQy9CbXRCLEVBQU05dEIsRUFBSyxNQUFNLGVBQWUsRUFDaEN6TixHQUdIeU4sRUFBSyxNQUFNLG1DQUFtQyxHQUFHLENBQUEsR0FBSSxRQUFRLFNBQVMrOEYsRUFBSSxDQUMxRSxJQUFJcnlDLEVBQUlxeUMsRUFBRyxNQUFNLDZDQUE2QyxFQUMxRHJ5QyxJQUNKL3BELEVBQUksQ0FBQytwRCxFQUFFLENBQUMsQ0FBQyxFQUFJNThCLEVBQU0sQ0FBQzQ4QixFQUFFLENBQUMsRUFBSUEsRUFBRSxDQUFDLEVBQ2hDLENBQUUsRUFHRCxJQUFJdXhELEVBQUs5MUMsSUFBYW5tRSxFQUFLLE1BQU0sMENBQTBDLEdBQUssQ0FBQyxHQUFHLFNBQVMsR0FBRyxDQUFDLENBQUMsRUFFbEcsT0FBQ0EsRUFBSyxNQUFNLHFCQUFxQixHQUFHLENBQUUsR0FBRSxRQUFRLFNBQVN1K0UsRUFBRyxDQUFFaHNGLEVBQUlnc0YsRUFBRSxRQUFRLFNBQVMsRUFBRSxDQUFFLENBQUUsRUFFcEYsQ0FBQzU5RSxFQUFLczdHLEVBQUkxcEgsQ0FBQyxDQUNuQixDQUdBLFNBQVMycEgsR0FBWWw4RyxFQUFrQnBYLEVBQWlCRixFQUFNNHJGLEVBQU1zTSxFQUFJdTdCLEVBQVEsQ0FDL0UsSUFBSTl1QyxFQUFxQjh1QyxHQUFVLENBQUMsUUFBUSxPQUFPLEVBQ25ELEdBQUcsQ0FBQ244RyxFQUFNLE9BQU9tOEcsRUFHakIsSUFBSWhwRCxFQUFJLEVBQUdNLEVBQUksRUFBRzl5RCxFQUFNLElBQ3BCc3hGLEVBQVcsQ0FBQyxFQUFHLENBQUMsRUFBRSxJQUFTLEVBQUUsR0FBTyxFQUFHLEVBQUcsQ0FBQyxFQUFFLEVBQUcsRUFBRSxDQUFDLENBQUMsRUFHeEQsT0FBQ2p5RixFQUFLLE1BQU0sc0NBQXNDLEdBQUcsQ0FBQSxHQUFJLFFBQVEsU0FBU284RyxFQUFJLENBQzdFLElBQUkvcEUsRUFBUTJwRSxHQUFZSSxDQUFFLEVBQzFCbnFCLEVBQVMsRUFBRSxFQUFJQSxFQUFTLEVBQUUsRUFBSSxFQUM5QkEsRUFBUyxFQUFFLEVBQUk5K0IsRUFDZnh5RCxFQUFNOHJFLEdBQVd0WixDQUFDLEVBQ2xCOWdCLEVBQU0sQ0FBQyxFQUFFLFFBQVEsU0FBU3pnRCxFQUFFcEQsRUFBRyxDQUM5QjYrRSxFQUFHMXNFLEVBQU0rckUsR0FBV2wrRSxDQUFDLENBQUMsRUFBSSxDQUFDLEVBQUUsSUFBSyxFQUFFb0QsRUFBRyxFQUFFeWdELEVBQU0sQ0FBQyxDQUFDLEVBQ2pEb2hCLEVBQUlqbEUsQ0FDUCxDQUFHLEVBQ0V5akcsRUFBUyxFQUFFLEVBQUl4K0IsSUFBR3crQixFQUFTLEVBQUUsRUFBSXgrQixHQUNwQyxFQUFFTixDQUNKLENBQUUsRUFDRUEsRUFBSSxJQUFHa2EsRUFBRyxNQUFNLEVBQUlELEdBQWE2a0IsQ0FBUSxHQUNyQzVrQixDQUNSLENBRUEsU0FBU2d2QyxHQUFhcjhHLEVBQWtCdFgsRUFBTStsRCxFQUFnQjZsQyxFQUFNc00sRUFBd0MsQ0FDM0csR0FBRyxDQUFDNWdGLEVBQU0sT0FBT0EsRUFFYnMwRSxJQUFNQSxFQUFPLENBQUMsTUFBTSxDQUFFLENBQUEsR0FDMUIsSUFBSXppRixFQUFLLENBQUMsUUFBUSxRQUFTLFVBQVUsS0FBTSxPQUFPLEVBQUUsRUFDaERrMEQsRUFHQWlzRCxFQUFVaHlHLEVBQUssTUFBTXl4RyxFQUFZLEVBQ3JDLE9BQUdPLEdBQVNDLEdBQXFCRCxFQUFRLENBQUMsRUFBR25nSCxFQUFHK3VGLEVBQUlueUMsQ0FBRyxHQUduRHNYLEVBQUkvbEQsRUFBSyxNQUFNLHNCQUFzQixLQUFJbk8sRUFBRSxNQUFNLEVBQUlrMEQsRUFBRSxDQUFDLEdBRXpEdXVCLEVBQUssS0FBSyxFQUFFemlGLEVBQUUsTUFBTSxDQUFDLElBQUdBLEVBQUUsU0FBUyxFQUFJeWlGLEVBQUssS0FBSyxFQUFFemlGLEVBQUUsTUFBTSxDQUFDLEdBQ3hEQSxDQUNSLENBYUEsU0FBU3lxSCxHQUFnQnQ4RyxFQUFNMDJCLEVBQW1CLENBQ2pEMTJCLEVBQUssR0FBSyxHQUNWLElBQUlwWCxFQUFPZ21GLEdBQW1CNXVFLENBQWlCLEVBQy9DLE1BQU8sQ0FBRSxLQUFNcFgsRUFDaEIsQ0FHQSxTQUFTMnpILEdBQWF2OEcsRUFBTXRYLEVBQU0rbEQsRUFBZ0I2bEMsRUFBTXNNLEVBQXdDLENBQy9GLEdBQUcsQ0FBQzVnRixFQUFNLE9BQU9BLEVBQ2JzMEUsSUFBTUEsRUFBTyxDQUFDLE1BQU0sQ0FBRSxDQUFBLEdBQzFCLElBQUl6aUYsRUFBSSxDQUFDLFFBQVEsUUFBUyxVQUFVLEtBQU0sT0FBTyxFQUFFLEVBRS9DdWpHLEVBQU8sR0FDWCxPQUFBL3BCLEdBQWFyckUsRUFBTSxTQUFrQjVRLEVBQUtxa0UsRUFBRytYLEVBQUksQ0FDaEQsT0FBT0EsRUFBRSxDQUVSLElBQUssS0FDSjM1RSxFQUFFLE1BQU0sRUFBSXpDLEVBQUssTUFFbEIsSUFBSyxLQUNBd3hGLEVBQUcsT0FBT255QyxDQUFHLElBQUdteUMsRUFBRyxPQUFPbnlDLENBQUcsRUFBSSxJQUNsQ3IvQyxFQUFJLE9BQU13eEYsRUFBRyxPQUFPbnlDLENBQUcsRUFBRSxTQUFXci9DLEVBQUksTUFDM0MsTUFFRCxJQUFLLEtBQ0wsSUFBSyxLQUNMLElBQUssS0FDTCxJQUFLLEtBQ0wsSUFBSyxLQUNMLElBQUssS0FDTCxJQUFLLEtBQ0wsSUFBSyxNQUNKLE1BRUQsSUFBSyxJQUNKZ21HLEVBQU8sR0FBTSxNQUNkLElBQUssSUFDSkEsRUFBTyxHQUFPLE1BQ2YsSUFBSyxJQUNZLE1BQ2pCLElBQUssSUFDUyxNQUVkLFFBQ0MsR0FBRyxFQUFBM2hDLEVBQUUsRUFBSSxJQUNKLEdBQUcsRUFBQUEsRUFBRSxFQUFJLElBQ1QsR0FBRyxDQUFDMmhDLEdBQVExc0csRUFBSyxJQUFLLE1BQU0sSUFBSSxNQUFNLHVCQUF5QjhpRixFQUFHLFNBQVMsRUFBRSxDQUFDLEdBQ3BGLENBQ0QsRUFBRTlpRixDQUFJLEVBRUo0ckYsRUFBSyxLQUFLLEVBQUV6aUYsRUFBRSxNQUFNLENBQUMsSUFBR0EsRUFBRSxTQUFTLEVBQUl5aUYsRUFBSyxLQUFLLEVBQUV6aUYsRUFBRSxNQUFNLENBQUMsR0FDeERBLENBQ1IsQ0FxQkEsSUFBSTJxSCxHQUFhLENBQ2hCLENBQUMsb0JBQStCLEdBQU8sTUFBTSxFQUM3QyxDQUFDLHVCQUErQixHQUFPLE1BQU0sRUFDN0MsQ0FBQyxhQUErQixHQUFPLE1BQU0sRUFDN0MsQ0FBQyxxQkFBK0IsR0FBTyxNQUFNLEVBQzdDLENBQUMsV0FBK0IsRUFBRSxFQUNsQyxDQUFDLFdBQStCLEdBQU8sTUFBTSxFQUM3QyxDQUFDLHNCQUErQixFQUFRLEtBQUssRUFDN0MsQ0FBQyxnQkFBK0IsR0FBTyxNQUFNLEVBQzdDLENBQUMscUJBQStCLEdBQU8sTUFBTSxFQUM3QyxDQUFDLG9CQUErQixHQUFPLE1BQU0sRUFDN0MsQ0FBQyxlQUErQixHQUFPLE1BQU0sRUFDN0MsQ0FBQyx3QkFBK0IsR0FBTyxNQUFNLEVBQzdDLENBQUMseUJBQStCLEdBQU8sTUFBTSxFQUM3QyxDQUFDLDZCQUErQixHQUFPLE1BQU0sRUFDN0MsQ0FBQyxvQkFBK0IsR0FBTyxNQUFNLEVBQzdDLENBQUMsY0FBK0IsS0FBSyxFQUNyQyxDQUFDLHVCQUErQixHQUFPLE1BQU0sRUFDN0MsQ0FBQyxjQUFlLFNBQVMsQ0FDMUIsRUFHSUMsR0FBWSxDQUNmLENBQUMsWUFBK0IsRUFBUSxLQUFLLEVBQzdDLENBQUMseUJBQStCLEdBQU8sTUFBTSxFQUM3QyxDQUFDLGFBQStCLEVBQVEsS0FBSyxFQUM3QyxDQUFDLFlBQStCLEdBQU8sTUFBTSxFQUM3QyxDQUFDLHVCQUErQixHQUFPLE1BQU0sRUFDN0MsQ0FBQyxnQkFBK0IsR0FBTyxNQUFNLEVBQzdDLENBQUMscUJBQStCLEdBQU8sTUFBTSxFQUM3QyxDQUFDLFdBQStCLElBQVEsS0FBSyxFQUM3QyxDQUFDLGFBQStCLFNBQVMsQ0FFMUMsRUFHSUMsR0FBVyxDQUVmLEVBR0lDLEdBQVksQ0FDZixDQUFDLGdCQUFpQixNQUFNLEVBQ3hCLENBQUMsV0FBWSxNQUFNLEVBQ25CLENBQUMsYUFBYyxNQUFNLEVBQ3JCLENBQUMsaUJBQWtCLE1BQU0sRUFDekIsQ0FBQyxpQkFBa0IsT0FBTyxFQUMxQixDQUFDLGdCQUFpQixNQUFNLEVBQ3hCLENBQUMsVUFBVyxPQUFPLEVBQ25CLENBQUMsZUFBZ0IsS0FBSyxFQUN0QixDQUFDLGVBQWdCLE9BQU8sRUFDeEIsQ0FBQyxVQUFXLElBQUksQ0FDakIsRUF3QkEsU0FBU0MsR0FBb0IvbUgsRUFBUW11QyxFQUFVLENBQzlDLFFBQVE4aEIsRUFBSSxFQUFHQSxHQUFLandELEVBQU8sT0FBUSxFQUFFaXdELEVBQ3BDLFFBRDZDMkYsRUFBSTUxRCxFQUFPaXdELENBQUMsRUFDakR0M0QsRUFBRSxFQUFHQSxHQUFLdzFDLEVBQVMsT0FBUSxFQUFFeDFDLEVBQUcsQ0FBRSxJQUFJeWhDLEVBQUkrVCxFQUFTeDFDLENBQUMsRUFDM0QsR0FBR2k5RCxFQUFFeDdCLEVBQUUsQ0FBQyxDQUFDLEdBQUssS0FBTXc3QixFQUFFeDdCLEVBQUUsQ0FBQyxDQUFDLEVBQUlBLEVBQUUsQ0FBQyxNQUM1QixRQUFPQSxFQUFFLENBQUMsRUFBQyxDQUNoQixJQUFLLE9BQVcsT0FBT3c3QixFQUFFeDdCLEVBQUUsQ0FBQyxDQUFDLEdBQUssV0FBVXc3QixFQUFFeDdCLEVBQUUsQ0FBQyxDQUFDLEVBQUlnM0MsR0FBYXhiLEVBQUV4N0IsRUFBRSxDQUFDLENBQUMsQ0FBQyxHQUFHLE1BQzdFLElBQUssTUFBVSxPQUFPdzdCLEVBQUV4N0IsRUFBRSxDQUFDLENBQUMsR0FBSyxXQUFVdzdCLEVBQUV4N0IsRUFBRSxDQUFDLENBQUMsRUFBSSxTQUFTdzdCLEVBQUV4N0IsRUFBRSxDQUFDLENBQUMsRUFBRyxFQUFFLEdBQUcsS0FDM0UsQ0FDRCxDQUVILENBQ0EsU0FBUzRzRixHQUFjaG5ILEVBQVFtdUMsRUFBVSxDQUN4QyxRQUFReDFDLEVBQUksRUFBR0EsR0FBS3cxQyxFQUFTLE9BQVEsRUFBRXgxQyxFQUFHLENBQUUsSUFBSXloQyxFQUFJK1QsRUFBU3gxQyxDQUFDLEVBQzdELEdBQUdxSCxFQUFPbzZCLEVBQUUsQ0FBQyxDQUFDLEdBQUssS0FBTXA2QixFQUFPbzZCLEVBQUUsQ0FBQyxDQUFDLEVBQUlBLEVBQUUsQ0FBQyxNQUN0QyxRQUFPQSxFQUFFLENBQUMsRUFBQyxDQUNmLElBQUssT0FBVyxPQUFPcDZCLEVBQU9vNkIsRUFBRSxDQUFDLENBQUMsR0FBSyxXQUFVcDZCLEVBQU9vNkIsRUFBRSxDQUFDLENBQUMsRUFBSWczQyxHQUFhcHhFLEVBQU9vNkIsRUFBRSxDQUFDLENBQUMsQ0FBQyxHQUFHLE1BQzVGLElBQUssTUFBVSxPQUFPcDZCLEVBQU9vNkIsRUFBRSxDQUFDLENBQUMsR0FBSyxXQUFVcDZCLEVBQU9vNkIsRUFBRSxDQUFDLENBQUMsRUFBSSxTQUFTcDZCLEVBQU9vNkIsRUFBRSxDQUFDLENBQUMsRUFBRyxFQUFFLEdBQUcsS0FDM0YsQ0FDRCxDQUNGLENBRUEsU0FBUzZzRixHQUFrQmw4QixFQUFJLENBQzlCaThCLEdBQWNqOEIsRUFBRyxRQUFTNDdCLEVBQVUsRUFDcENLLEdBQWNqOEIsRUFBRyxPQUFRKzdCLEVBQVMsRUFFbENDLEdBQW9CaDhCLEVBQUcsT0FBUTY3QixFQUFTLEVBQ3hDRyxHQUFvQmg4QixFQUFHLE9BQVE4N0IsRUFBUSxFQUV2Q3ZNLEdBQVMsU0FBV2xwQyxHQUFhMlosRUFBRyxRQUFRLFFBQVEsQ0FDckQsQ0FFQSxTQUFTbThCLEdBQVNuOEIsRUFBNEIsQ0FHN0MsTUFERyxDQUFDQSxFQUFHLFVBQ0osQ0FBQ0EsRUFBRyxTQUFTLFFBQWdCLFFBQ3pCM1osR0FBYTJaLEVBQUcsU0FBUyxRQUFRLFFBQVEsRUFBSSxPQUFTLE9BQzlELENBRUEsSUFBSW84QixHQUF3QixVQUFXLE1BQU0sRUFBRSxFQUMvQyxTQUFTQyxHQUFjcnJILEVBQWMreUUsRUFBK0IsQ0FDbkUsR0FBRy95RSxFQUFFLE9BQVMsR0FBSSxDQUFFLEdBQUcreUUsRUFBTSxNQUFPLEdBQU8sTUFBTSxJQUFJLE1BQU0sb0NBQW9DLENBQUksQ0FDbkcsSUFBSXU0QyxFQUFRLEdBQ1osT0FBQUYsR0FBUyxRQUFRLFNBQVNsdkcsRUFBRyxDQUM1QixHQUFHbGMsRUFBRSxRQUFRa2MsQ0FBQyxHQUFLLEdBQ25CLElBQUcsQ0FBQzYyRCxFQUFNLE1BQU0sSUFBSSxNQUFNLDBDQUEwQyxFQUNwRXU0QyxFQUFRLEdBQ1YsQ0FBRSxFQUNNQSxDQUNSLENBQ0EsU0FBU0MsR0FBZUMsRUFBRzNyRCxFQUFHNHJELEVBQU8sQ0FDcENELEVBQUUsUUFBUSxTQUFTLEVBQUU1dUgsRUFBRyxDQUN2Qnl1SCxHQUFjLENBQUMsRUFDZixRQUFRbjNELEVBQUksRUFBR0EsRUFBSXQzRCxFQUFHLEVBQUVzM0QsRUFBRyxHQUFHLEdBQUtzM0QsRUFBRXQzRCxDQUFDLEVBQUcsTUFBTSxJQUFJLE1BQU0seUJBQTJCLENBQUMsRUFDckYsR0FBR3UzRCxFQUFPLENBQ1QsSUFBSUMsRUFBTTdyRCxHQUFLQSxFQUFFampFLENBQUMsR0FBS2lqRSxFQUFFampFLENBQUMsRUFBRSxVQUFhLEVBQ3pDLEdBQUc4dUgsRUFBRyxXQUFXLENBQUMsR0FBSyxJQUFNQSxFQUFHLE9BQVMsR0FBSSxNQUFNLElBQUksTUFBTSwyQkFBNkJBLENBQUUsQ0FDNUYsQ0FDSCxDQUFFLENBQ0YsQ0FDQSxTQUFTQyxHQUFTMzhCLEVBQUksQ0FDckIsR0FBRyxDQUFDQSxHQUFNLENBQUNBLEVBQUcsWUFBYyxDQUFDQSxFQUFHLE9BQVEsTUFBTSxJQUFJLE1BQU0sa0JBQWtCLEVBQzFFLEdBQUcsQ0FBQ0EsRUFBRyxXQUFXLE9BQVEsTUFBTSxJQUFJLE1BQU0sbUJBQW1CLEVBQzdELElBQUk0OEIsRUFBVTU4QixFQUFHLFVBQVlBLEVBQUcsU0FBUyxRQUFXLEdBQ3BEdThCLEdBQWV2OEIsRUFBRyxXQUFZNDhCLEVBQVEsQ0FBQyxDQUFDNThCLEVBQUcsTUFBTSxFQUNqRCxRQUFRcHlGLEVBQUksRUFBR0EsRUFBSW95RixFQUFHLFdBQVcsT0FBUSxFQUFFcHlGLEVBQUd3aUgsR0FBU3B3QixFQUFHLE9BQU9BLEVBQUcsV0FBV3B5RixDQUFDLENBQUMsRUFBR295RixFQUFHLFdBQVdweUYsQ0FBQyxFQUFHQSxDQUFDLENBRXhHLENBRUEsSUFBSWl2SCxHQUFZLGdCQUNoQixTQUFTQyxHQUFhMTlHLEVBQU10WCxFQUF1QixDQUNsRCxHQUFHLENBQUNzWCxFQUFNLE1BQU0sSUFBSSxNQUFNLHFCQUFxQixFQUMvQyxJQUFJNGdGLEVBQVksQ0FBRSxXQUFXLENBQUEsRUFBSSxRQUFRLENBQUEsRUFBSSxPQUFPLENBQUUsRUFBRSxPQUFPLENBQUUsRUFBRSxPQUFPLEdBQUksTUFBTSxDQUFBLEVBQUksTUFBTyxJQUMzRndVLEVBQU8sR0FBT3VvQixFQUFRLFFBQ3RCQyxFQUFRLENBQUEsRUFBSUMsRUFBVSxFQW1KMUIsR0FsSkE3OUcsRUFBSyxRQUFRd2xFLEdBQVUsU0FBZ0JqN0MsRUFBR2trQixFQUFLLENBQzlDLElBQUloTSxFQUFZa2pDLEdBQVlwN0MsQ0FBQyxFQUM3QixPQUFPeTdDLEdBQVN2akMsRUFBRSxDQUFDLENBQUMsRUFBQyxDQUNwQixJQUFLLFFBQVMsTUFHZCxJQUFLLFlBQ0RsWSxFQUFFLE1BQU1rekYsRUFBUyxJQUFHRSxFQUFRLFFBQVVwekYsRUFBRSxNQUFNLFNBQVMsRUFBRSxDQUFDLEdBQzdEcTJELEVBQUcsTUFBUW4rQyxFQUFFazdFLENBQUssRUFDbEIsTUFDRCxJQUFLLGNBQWUsTUFHcEIsSUFBSyxlQUFnQixPQUFPbDdFLEVBQUUsQ0FBQyxFQUFHbStDLEVBQUcsV0FBYW4rQyxFQUFHLE1BQ3JELElBQUssaUJBQWtCLElBQUssaUJBQWtCLE1BRzlDLElBQUssZUFDSixNQUNELElBQUssaUJBQWtCLE1BR3ZCLElBQUssY0FDTCxJQUFLLGdCQUNKKzVFLEdBQVcsUUFBUSxTQUFTL3dELEVBQUcsQ0FDOUIsR0FBR2hwQixFQUFFZ3BCLEVBQUUsQ0FBQyxDQUFDLEdBQUssS0FDZCxPQUFPQSxFQUFFLENBQUMsRUFBQyxDQUNWLElBQUssT0FBUW0xQixFQUFHLFFBQVFuMUIsRUFBRSxDQUFDLENBQUMsRUFBSXdiLEdBQWF4a0MsRUFBRWdwQixFQUFFLENBQUMsQ0FBQyxDQUFDLEVBQUcsTUFDdkQsSUFBSyxNQUFPbTFCLEVBQUcsUUFBUW4xQixFQUFFLENBQUMsQ0FBQyxFQUFJLFNBQVNocEIsRUFBRWdwQixFQUFFLENBQUMsQ0FBQyxFQUFHLEVBQUUsRUFBRyxNQUN0RCxRQUFTbTFCLEVBQUcsUUFBUW4xQixFQUFFLENBQUMsQ0FBQyxFQUFJaHBCLEVBQUVncEIsRUFBRSxDQUFDLENBQUMsQ0FDbEMsQ0FDTixDQUFLLEVBQ0VocEIsRUFBRSxXQUFVbStDLEVBQUcsUUFBUSxTQUFXcFosR0FBUy9rQyxFQUFFLFFBQVEsR0FDeEQsTUFDRCxJQUFLLGdCQUFpQixNQUd0QixJQUFLLHNCQUNKLE1BQ0QsSUFBSyx3QkFBeUIsTUFHOUIsSUFBSyxhQUFjLElBQUssY0FBZSxJQUFLLGVBQWdCLE1BRTVELElBQUssZ0JBQWlCLElBQUssa0JBQW1CLE9BQU9BLEVBQUUsQ0FBQyxFQUFHbStDLEVBQUcsT0FBTyxLQUFLbitDLENBQUMsRUFBRyxNQUM5RSxJQUFLLGtCQUFtQixNQUd4QixJQUFLLFVBQVcsSUFBSyxXQUFZLElBQUssWUFBYSxNQUVuRCxJQUFLLFNBQ0osT0FBT0EsRUFBRSxNQUFLLENBQ2IsSUFBSyxTQUFVQSxFQUFFLE9BQVMsRUFBRyxNQUM3QixJQUFLLGFBQWNBLEVBQUUsT0FBUyxFQUFHLE1BQ2pDLFFBQVNBLEVBQUUsT0FBUyxDQUNwQixDQUNELE9BQU9BLEVBQUUsTUFDVEEsRUFBRSxLQUFPMGpDLEdBQVlxQixHQUFTL2tDLEVBQUUsSUFBSSxDQUFDLEVBQ3JDLE9BQU9BLEVBQUUsQ0FBQyxFQUFHbStDLEVBQUcsT0FBTyxLQUFLbitDLENBQUMsRUFBRyxNQUNqQyxJQUFLLFdBQVksTUFHakIsSUFBSyxrQkFBbUIsSUFBSyxvQkFBcUIsTUFFbEQsSUFBSyxpQkFBa0IsTUFHdkIsSUFBSyxzQkFBdUIsSUFBSyx3QkFBeUIsSUFBSyx1QkFBd0IsTUFFdkYsSUFBSyxxQkFBc0IsTUFHM0IsSUFBSyxrQkFBbUIsTUFDeEIsSUFBSyxpQkFBa0IsSUFBSyxnQkFBaUIyeUQsRUFBSyxHQUFNLE1BQ3hELElBQUssa0JBQW1CQSxFQUFLLEdBQU8sTUFFcEMsSUFBSyxlQUNKd29CLEVBQVEsQ0FBQSxFQUNSQSxFQUFNLEtBQU9wMkMsR0FBUy9rQyxFQUFFLElBQUksRUFDekJBLEVBQUUsVUFBU203RSxFQUFNLFFBQVVuN0UsRUFBRSxTQUM3QkEsRUFBRSxlQUFjbTdFLEVBQU0sTUFBUSxDQUFDbjdFLEVBQUUsY0FDakN3a0MsR0FBYXhrQyxFQUFFLFFBQVEsR0FBRyxJQUFHbTdFLEVBQU0sT0FBUyxJQUMvQ0MsRUFBVXB2RSxFQUFNbGtCLEVBQUUsT0FDakIsTUFDRixJQUFLLGlCQUNKcXpGLEVBQU0sSUFBTXozQyxHQUFZcUIsR0FBU3huRSxFQUFLLE1BQU02OUcsRUFBU3B2RSxDQUFHLENBQUMsQ0FBQyxFQUMxRG15QyxFQUFHLE1BQU0sS0FBS2c5QixDQUFLLEVBQ2xCLE1BQ0YsSUFBSyxpQkFBa0IsTUFHdkIsSUFBSyxVQUFXLE9BQU9uN0UsRUFBRSxDQUFDLEVBQUdtK0MsRUFBRyxPQUFTbitDLEVBQUcsTUFDNUMsSUFBSyxZQUFhLE9BQU9BLEVBQUUsQ0FBQyxFQUFHbStDLEVBQUcsT0FBU24rQyxFQUFHLE1BQzlDLElBQUssWUFBYSxNQUdsQixJQUFLLFdBQVksTUFHakIsSUFBSyx3QkFBeUIsSUFBSyx5QkFBMEIsSUFBSyx1QkFBd0IsTUFFMUYsSUFBSyxzQkFBdUIsSUFBSyx3QkFBeUIsTUFHMUQsSUFBSyxnQkFBaUIsSUFBSyxpQkFBa0IsSUFBSyxlQUFnQixNQUVsRSxJQUFLLGNBQWUsTUFHcEIsSUFBSyxjQUFlLElBQUssZ0JBQWlCLE1BRzFDLElBQUssaUJBQWtCLElBQUssa0JBQW1CLElBQUssbUJBQW9CLE1BRXhFLElBQUssZ0JBQWlCLE1BR3RCLElBQUssaUJBQWtCLElBQUssbUJBQW9CLE1BR2hELElBQUssa0JBQW1CLElBQUssb0JBQXFCLE1BR2xELElBQUssc0JBQXVCLElBQUsscUJBQXNCLElBQUssdUJBQXdCLE1BRXBGLElBQUssb0JBQXFCLE1BRzFCLElBQUssVUFBVyxJQUFLLFdBQVksSUFBSyxZQUFhLElBQUssWUFBYSxNQUVyRSxJQUFLLE9BQVEyeUQsRUFBSyxHQUFNLE1BQ3hCLElBQUssU0FBVUEsRUFBSyxHQUFPLE1BRzNCLElBQUssVUFBVyxNQUNoQixJQUFLLG9CQUNMLElBQUsscUJBQXNCQSxFQUFLLEdBQU0sTUFDdEMsSUFBSyxzQkFBdUJBLEVBQUssR0FBTyxNQUd4QyxJQUFLLGVBQWdCLE1BRXJCLFFBQVMsR0FBRyxDQUFDQSxHQUFRMXNHLEVBQUssSUFBSyxNQUFNLElBQUksTUFBTSxnQkFBa0IrNUMsRUFBRSxDQUFDLEVBQUksY0FBYyxDQUN0RixDQUNELE9BQU9sWSxDQUNULENBQUUsRUFDRXErQyxHQUFXLFFBQVFnWSxFQUFHLEtBQUssSUFBTSxHQUFJLE1BQU0sSUFBSSxNQUFNLHNCQUF3QkEsRUFBRyxLQUFLLEVBRXhGLE9BQUFrOEIsR0FBa0JsOEIsQ0FBRSxFQUViQSxDQUNSLENBRUEsU0FBU2s5QixHQUFhbDlCLEVBQW1ELENBQ3hFLElBQUlwdUYsRUFBSSxDQUFDNHlFLEVBQVUsRUFDbkI1eUUsRUFBRUEsRUFBRSxNQUFNLEVBQUk2MUUsR0FBVSxXQUFZLEtBQU0sQ0FDekMsTUFBU08sR0FBVyxDQUFDLEVBR3JCLFVBQVdELEdBQU0sQ0FDbkIsQ0FBRSxFQUVELElBQUlvMUMsRUFBZW45QixFQUFHLFdBQWFBLEVBQUcsU0FBUyxPQUFPLENBQUUsR0FBRSxPQUFTLEVBSy9EbzlCLEVBQXNCLENBQUMsU0FBUyxjQUFjLEVBQy9DcDlCLEVBQUcsVUFBWUEsRUFBRyxTQUFTLFVBQzdCNDdCLEdBQVcsUUFBUSxTQUFTanlGLEVBQUcsQ0FFMUJxMkQsRUFBRyxTQUFTLFFBQVFyMkQsRUFBRSxDQUFDLENBQUMsR0FBYyxNQUN0Q3EyRCxFQUFHLFNBQVMsUUFBUXIyRCxFQUFFLENBQUMsQ0FBQyxHQUFjQSxFQUFFLENBQUMsSUFDN0N5ekYsRUFBV3p6RixFQUFFLENBQUMsQ0FBQyxFQUFLcTJELEVBQUcsU0FBUyxRQUFRcjJELEVBQUUsQ0FBQyxDQUFDLEVBQy9DLENBQUcsRUFFRXEyRCxFQUFHLFNBQVMsUUFBUSxXQUFZbzlCLEVBQVcsU0FBV3A5QixFQUFHLFNBQVMsUUFBUSxTQUFVLE9BQU9vOUIsRUFBVyxXQUUxR3hySCxFQUFFQSxFQUFFLE1BQU0sRUFBSzYxRSxHQUFVLGFBQWMsS0FBTTIxQyxDQUFVLEVBSXZELElBQUlud0MsRUFBUytTLEVBQUcsVUFBWUEsRUFBRyxTQUFTLFFBQVUsR0FDOUMsRUFBSSxFQUdSLEdBQUcvUyxHQUFVQSxFQUFPLENBQUMsR0FBT0EsRUFBTyxDQUFDLEVBQUUsT0FBUSxDQUU3QyxJQURBcjdFLEVBQUVBLEVBQUUsTUFBTSxFQUFJLGNBQ1YsRUFBSSxFQUFHLEdBQUtvdUYsRUFBRyxXQUFXLFFBQzFCLEdBQUMvUyxFQUFPLENBQUMsR0FDVCxDQUFDQSxFQUFPLENBQUMsRUFBRSxRQUZ1QixFQUFFLEVBRXZDLENBRUUsR0FBSytTLEVBQUcsV0FBVyxTQUFRLEVBQUksR0FDbENwdUYsRUFBRUEsRUFBRSxNQUFNLEVBQUksNkJBQStCLEVBQUksZ0JBQWtCLEVBQUksTUFDdkVBLEVBQUVBLEVBQUUsTUFBTSxFQUFJLGNBQ2QsQ0FHRCxJQURBQSxFQUFFQSxFQUFFLE1BQU0sRUFBSSxXQUNWLEVBQUksRUFBRyxHQUFLb3VGLEVBQUcsV0FBVyxPQUFRLEVBQUUsRUFBRyxDQUMxQyxJQUFJaU0sRUFBTyxDQUFDLEtBQUtybUIsR0FBVW9hLEVBQUcsV0FBVyxDQUFDLEVBQUUsTUFBTSxFQUFFLEVBQUUsQ0FBQyxDQUFDLEVBR3hELEdBRkFpTSxFQUFJLFFBQVUsSUFBSSxFQUFFLEdBQ3BCQSxFQUFJLE1BQU0sRUFBSSxPQUFPLEVBQUUsR0FDcEJoZixFQUFPLENBQUMsRUFBRyxPQUFPQSxFQUFPLENBQUMsRUFBRSxPQUFNLENBQ3BDLElBQUssR0FBR2dmLEVBQUksTUFBUSxTQUFVLE1BQzlCLElBQUssR0FBR0EsRUFBSSxNQUFRLGFBQWMsS0FDbEMsQ0FDRHI2RixFQUFFQSxFQUFFLE1BQU0sRUFBSzYxRSxHQUFVLFFBQVEsS0FBS3drQixDQUFHLENBQ3pDLENBQ0QsT0FBQXI2RixFQUFFQSxFQUFFLE1BQU0sRUFBSSxZQUtYdXJILElBQ0Z2ckgsRUFBRUEsRUFBRSxNQUFNLEVBQUksaUJBQ1hvdUYsRUFBRyxVQUFZQSxFQUFHLFNBQVMsT0FBT0EsRUFBRyxTQUFTLE1BQU0sUUFBUSxTQUFTaHZGLEVBQUcsQ0FDMUUsSUFBSWMsRUFBWSxDQUFDLEtBQUtkLEVBQUUsSUFBSSxFQUN6QkEsRUFBRSxVQUFTYyxFQUFFLFFBQVVkLEVBQUUsU0FDekJBLEVBQUUsT0FBUyxPQUFNYyxFQUFFLGFBQWUsR0FBR2QsRUFBRSxPQUN2Q0EsRUFBRSxTQUFRYyxFQUFFLE9BQVMsS0FDcEJkLEVBQUUsTUFDTlksRUFBRUEsRUFBRSxNQUFNLEVBQUk2MUUsR0FBVSxjQUFlN0IsR0FBVTUwRSxFQUFFLEdBQUcsRUFBR2MsQ0FBQyxFQUM3RCxDQUFHLEVBQ0RGLEVBQUVBLEVBQUUsTUFBTSxFQUFJLG1CQWNaQSxFQUFFLE9BQU8sSUFBSUEsRUFBRUEsRUFBRSxNQUFNLEVBQUksY0FBZUEsRUFBRSxDQUFDLEVBQUVBLEVBQUUsQ0FBQyxFQUFFLFFBQVEsS0FBSyxHQUFHLEdBQ2hFQSxFQUFFLEtBQUssRUFBRSxDQUNqQixDQUVBLFNBQVN5ckgsR0FBa0JqK0csRUFBTTAyQixFQUFtQixDQUNuRCxJQUFJekcsRUFBSSxDQUFBLEVBQ1IsT0FBQUEsRUFBRSxPQUFTandCLEVBQUssV0FBVyxDQUFDLEVBQzVCaXdCLEVBQUUsT0FBU2p3QixFQUFLLFdBQVcsQ0FBQyxFQUM1Qml3QixFQUFFLFNBQVdrZ0QsR0FBWW53RSxDQUFhLEVBQ3RDaXdCLEVBQUUsS0FBTzIrQyxHQUFtQjV1RSxDQUFJLEVBQ3pCaXdCLENBQ1IsQ0FDQSxTQUFTaXVGLEdBQWtCbCtHLEVBQU14TixFQUFHLENBQ25DLE9BQUlBLElBQUdBLEVBQUlza0UsR0FBUSxHQUFHLEdBQ3RCdGtFLEVBQUUsWUFBWSxFQUFHd04sRUFBSyxNQUFNLEVBQzVCeE4sRUFBRSxZQUFZLEVBQUd3TixFQUFLLE1BQU0sRUFDNUJvd0UsR0FBWXB3RSxFQUFLLFNBQVV4TixDQUFDLEVBQzVCczhFLEdBQW1COXVFLEVBQUssS0FBSyxNQUFNLEVBQUUsRUFBRSxFQUFHeE4sQ0FBQyxFQUNwQ0EsRUFBRSxPQUFTQSxFQUFFLEVBQUlBLEVBQUUsTUFBTSxFQUFHQSxFQUFFLENBQUMsRUFBSUEsQ0FDM0MsQ0FHQSxTQUFTMnJILEdBQWdCbitHLEVBQU0wMkIsRUFBb0IsQ0FDbEQsSUFBSWxrQyxFQUFpQixDQUFBLEVBQ2pCeWhFLEVBQVFqMEQsRUFBSyxXQUFXLENBQUMsRUFDN0J4TixFQUFFLG9CQUFzQndOLEVBQUssV0FBVyxDQUFDLEVBQ3pDLElBQUlvK0csRUFBVzFuRixFQUFTLEVBQUtrNEMsR0FBbUI1dUUsQ0FBSSxFQUFJLEdBQ3hELE9BQUdvK0csRUFBUSxPQUFTLElBQUc1ckgsRUFBRSxTQUFXNHJILEdBQ3BDNXJILEVBQUUscUJBQXVCLENBQUMsRUFBRXloRSxFQUFRLE9BQ3BDemhFLEVBQUUsV0FBYSxDQUFDLEVBQUV5aEUsRUFBUSxJQUMxQnpoRSxFQUFFLG1CQUFxQixDQUFDLEVBQUV5aEUsRUFBUSxNQUNsQ3poRSxFQUFFLFNBQVcsQ0FBQyxFQUFFeWhFLEVBQVEsR0FDeEJ6aEUsRUFBRSxjQUFnQixDQUFDLEVBQUV5aEUsRUFBUSxHQUM3QnpoRSxFQUFFLG1CQUFxQixDQUFDLEVBQUV5aEUsRUFBUSxNQUNsQ3poRSxFQUFFLGtCQUFvQixDQUFDLEVBQUV5aEUsRUFBUSxJQUNqQ3poRSxFQUFFLGFBQWUsQ0FBQyxFQUFFeWhFLEVBQVEsTUFDNUJ6aEUsRUFBRSxzQkFBd0IsQ0FBQyxFQUFFeWhFLEVBQVEsUUFDckN6aEUsRUFBRSx1QkFBeUIsQ0FBQyxFQUFFeWhFLEVBQVEsS0FDdEN6aEUsRUFBRSwyQkFBNkIsQ0FBQyxFQUFFeWhFLEVBQVEsR0FDMUN6aEUsRUFBRSxrQkFBb0IsQ0FBQyxFQUFFeWhFLEVBQVEsSUFDakN6aEUsRUFBRSxZQUFjLENBQUMsTUFBTyxlQUFnQixNQUFNLEVBQUd5aEUsR0FBUyxHQUFNLENBQUksRUFDcEV6aEUsRUFBRSxxQkFBdUIsQ0FBQyxFQUFFeWhFLEVBQVEsT0FDcEN6aEUsRUFBRSxZQUFjLENBQUMsVUFBVyxRQUFTLFFBQVEsRUFBR3loRSxHQUFTLEVBQUssQ0FBSSxFQUMzRHpoRSxDQUNSLENBQ0EsU0FBUzZySCxHQUFnQnIrRyxFQUFtQnhOLEVBQUcsQ0FDMUNBLElBQUdBLEVBQUlza0UsR0FBUSxFQUFFLEdBQ3JCLElBQUk3QyxFQUFRLEVBQ1osT0FBR2owRCxHQUVDQSxFQUFLLGdCQUFlaTBELEdBQVMsR0FFakN6aEUsRUFBRSxZQUFZLEVBQUd5aEUsQ0FBSyxFQUN0QnpoRSxFQUFFLFlBQVksRUFBRyxDQUFDLEVBQ2xCdTlFLEdBQW1CL3ZFLEdBQVFBLEVBQUssVUFBWSxlQUFnQnhOLENBQUMsRUFDdERBLEVBQUUsTUFBTSxFQUFHQSxFQUFFLENBQUMsQ0FDdEIsQ0FFQSxTQUFTOHJILEdBQW9CdCtHLEVBQU0wMkIsRUFBUSxDQUMxQyxJQUFJbGtDLEVBQUksQ0FBQSxFQUNSLE9BQUF3TixFQUFLLFdBQVcsQ0FBQyxFQUNqQnhOLEVBQUUsT0FBU3dOLEVBQUssV0FBVyxDQUFDLEVBQzVCQSxFQUFLLEdBQUswMkIsRUFBUyxFQUNabGtDLENBQ1IsQ0FHQSxTQUFTK3JILEdBQWN2K0csRUFBTTAyQixFQUFRaHVDLEVBQU0sQ0FDMUMsSUFBSSs4RCxFQUFNemxELEVBQUssRUFBSTAyQixFQUNuQjEyQixFQUFLLEdBQUssRUFDVkEsRUFBSyxHQUFLLEVBQ1YsSUFBSThsRixFQUFPOWxGLEVBQUssV0FBVyxDQUFDLEVBQ3hCcFgsRUFBT3NuRixHQUF1Qmx3RSxDQUFJLEVBQ2xDd3RGLEVBQVVxaUIsR0FBNEI3dkcsRUFBTSxFQUFHdFgsQ0FBSSxFQUNuRDY5RixFQUFVdlcsR0FBMkJod0UsQ0FBSSxFQU83Q0EsRUFBSyxFQUFJeWxELEVBQ1QsSUFBSStDLEVBQU8sQ0FBQyxLQUFLNS9ELEVBQU0sSUFBSTRrRyxDQUFPLEVBQ2xDLE9BQUcxSCxFQUFPLFlBQVd0OUIsRUFBSSxNQUFRczlCLEdBQzlCUyxJQUFTLzlCLEVBQUksUUFBVSs5QixHQUNuQi85QixDQUNSLENBR0EsU0FBU2cyRCxHQUFheCtHLEVBQU10WCxFQUF1QixDQUNsRCxJQUFJazRGLEVBQUssQ0FBRSxXQUFXLENBQUUsRUFBRSxRQUFRLENBQUUsRUFBRSxPQUFPLENBQUUsRUFBRSxPQUFPLENBQUUsRUFBRSxPQUFPLENBQUUsRUFBRSxNQUFPLEVBQUUsRUFDNUU5aEQsRUFBMEIsQ0FBQSxFQUMxQnMyRCxFQUFPLEdBRVAxc0csSUFBTUEsRUFBTyxJQUNqQkEsRUFBSyxLQUFPLEdBRVosSUFBSSsxSCxFQUFRLENBQUEsRUFDUjVRLEVBQVksQ0FBQyxDQUFFLENBQUEsRUFDbkIsT0FBQUEsRUFBUyxXQUFhLEdBQ3RCQSxFQUFTLElBQU0sR0FFZnBpQyxHQUFlLEVBQU0sRUFBSSxDQUFFLEVBQUUsZ0JBQWlCLEVBQUU2eUMsSUFFaERqekMsR0FBYXJyRSxFQUFNLFNBQW1CNVEsRUFBS3FrRSxFQUFHK1gsRUFBSSxDQUNqRCxPQUFPQSxFQUFFLENBQ1IsSUFBSyxLQUNKcWlDLEVBQVMsV0FBVyxLQUFLeitHLEVBQUksSUFBSSxFQUNqQ3d4RixFQUFHLE9BQU8sS0FBS3h4RixDQUFHLEVBQUcsTUFFdEIsSUFBSyxLQUNKd3hGLEVBQUcsUUFBVXh4RixFQUFLLE1BRW5CLElBQUssSUFDREEsRUFBSSxPQUFTLE9BQU0xRyxFQUFLLElBQU0wRyxFQUFJLE9BQ3JDQSxFQUFJLElBQU02K0csR0FBa0I3K0csRUFBSSxJQUFLLEtBQU0sS0FBTXkrRyxFQUFVbmxILENBQUksRUFDL0QsT0FBT0EsRUFBSyxJQUNaLE9BQU8wRyxFQUFJLElBQ1hxdkgsRUFBTSxLQUFLcnZILENBQUcsRUFDZCxNQUNELElBQUssTUFBMkIsTUFFaEMsSUFBSyxLQUNMLElBQUssS0FDTCxJQUFLLEtBQ0wsSUFBSyxLQUNBeStHLEVBQVMsQ0FBQyxFQUFFLE9BQ1hBLEVBQVMsS0FBSyxDQUFDcmlDLEVBQUlwOEUsQ0FBRyxDQUFDLEVBREp5K0csRUFBUyxDQUFDLEVBQUksQ0FBQ3JpQyxFQUFJcDhFLENBQUcsRUFFOUN5K0csRUFBU0EsRUFBUyxPQUFTLENBQUMsRUFBRSxJQUFNLENBQUEsRUFDcEMsTUFDRCxJQUFLLEtBQ0RBLEVBQVMsU0FBVyxJQUFLQSxFQUFTLENBQUMsRUFBSSxDQUFFLEVBQUVBLEVBQVMsQ0FBQyxFQUFFLElBQU0sQ0FBRSxHQUNsRUEsRUFBU0EsRUFBUyxPQUFTLENBQUMsRUFBRSxJQUFNQSxFQUFTQSxFQUFTLE9BQVMsQ0FBQyxFQUFFLElBQUksT0FBT3orRyxDQUFHLEVBQ2hGeStHLEVBQVMsSUFBTUEsRUFBUyxJQUFJLE9BQU96K0csQ0FBRyxFQUN0QyxNQUNELElBQUssS0FDSixNQUVELElBQUssTUFDTCxJQUFLLEtBQ0wsSUFBSyxLQUNMLElBQUssS0FDTCxJQUFLLEtBQ0osTUFHRCxJQUFLLE1BQ0wsSUFBSyxNQUNMLElBQUssS0FDTCxJQUFLLEtBQ0wsSUFBSyxLQUNMLElBQUssS0FDTCxJQUFLLE1BQ0wsSUFBSyxLQUNMLElBQUssS0FDTCxJQUFLLEtBQ0wsSUFBSyxLQUNMLElBQUssS0FDTCxJQUFLLE1BQ0wsSUFBSyxNQUNMLElBQUssS0FDTCxJQUFLLE1BQ0wsSUFBSyxLQUNMLElBQUssTUFDTCxJQUFLLE1BQ0wsSUFBSyxNQUNMLElBQUssS0FDTCxJQUFLLEtBQ0wsSUFBSyxNQUNMLElBQUssS0FDTCxJQUFLLE1BQ0osTUFFRCxJQUFLLElBQ0owdkMsRUFBTSxLQUFLMHNDLENBQUUsRUFBRzRwQixFQUFPLEdBQU0sTUFDOUIsSUFBSyxJQUNKdDJELEVBQU0sSUFBSyxFQUFFczJELEVBQU8sR0FBTyxNQUM1QixJQUFLLElBQ0p0MkQsRUFBTSxLQUFLMHNDLENBQUUsRUFBRzRwQixFQUFPLEdBQU0sTUFDOUIsSUFBSyxJQUNKdDJELEVBQU0sSUFBSyxFQUFFczJELEVBQU8sR0FBTyxNQUU1QixJQUFLLElBQThCLE1BRW5DLFFBQ0MsR0FBRyxDQUFBM2hDLEVBQUUsR0FDQSxHQUFHLENBQUMyaEMsR0FBUzFzRyxFQUFLLEtBQU9vMkMsRUFBTUEsRUFBTSxPQUFPLENBQUMsR0FBSyxJQUEyQkEsRUFBTUEsRUFBTSxPQUFPLENBQUMsR0FBSyxHQUEyQixNQUFNLElBQUksTUFBTSx1QkFBeUIwc0MsRUFBRyxTQUFTLEVBQUUsQ0FBQyxFQUMvTCxDQUNELEVBQUU5aUYsQ0FBSSxFQUVQbzBILEdBQWtCbDhCLENBQUUsRUFHcEJBLEVBQUcsTUFBUTY5QixFQUVWNzlCLEVBQVksU0FBV2l0QixFQUNqQmp0QixDQUNSLENBRUEsU0FBUzg5QixHQUFnQjF5QyxFQUFJNFUsRUFBZ0IsQ0FDNUM3VSxHQUFhQyxFQUFJLEtBQ2pCLFFBQVF2OUIsRUFBTSxFQUFHQSxHQUFPbXlDLEVBQUcsV0FBVyxPQUFRLEVBQUVueUMsRUFBSyxDQUNwRCxJQUFJa3dFLEVBQU0vOUIsRUFBRyxVQUFZQSxFQUFHLFNBQVMsUUFBVUEsRUFBRyxTQUFTLE9BQU9ueUMsQ0FBRyxHQUFLbXlDLEVBQUcsU0FBUyxPQUFPbnlDLENBQUcsRUFBRSxRQUFVLEVBQ3hHLzdDLEVBQUksQ0FBRSxPQUFRaXNILEVBQUssT0FBUWx3RSxFQUFJLEVBQUcsU0FBVSxPQUFTQSxFQUFJLEdBQUksS0FBTW15QyxFQUFHLFdBQVdueUMsQ0FBRyxHQUN4RnM5QixHQUFhQyxFQUFJLElBQTBCa3lDLEdBQWtCeHJILENBQUMsQ0FBQyxDQUMvRCxDQUNEcTVFLEdBQWFDLEVBQUksSUFDbEIsQ0FHQSxTQUFTNHlDLEdBQXFCNStHLEVBQU14TixFQUFHLENBQ2xDQSxJQUFHQSxFQUFJc2tFLEdBQVEsR0FBRyxHQUN0QixRQUFRdG9FLEVBQUksRUFBR0EsR0FBSyxFQUFHLEVBQUVBLEVBQUdnRSxFQUFFLFlBQVksRUFBRyxDQUFDLEVBQzlDLE9BQUFzOEUsR0FBbUIsVUFBV3Q4RSxDQUFDLEVBQy9CczhFLEdBQW1COW9CLEdBQUssUUFBU3h6RCxDQUFDLEVBQ2xDczhFLEdBQW1COW9CLEdBQUssUUFBU3h6RCxDQUFDLEVBQ2xDczhFLEdBQW1CLE9BQVF0OEUsQ0FBQyxFQUNyQkEsRUFBRSxPQUFTQSxFQUFFLEVBQUlBLEVBQUUsTUFBTSxFQUFHQSxFQUFFLENBQUMsRUFBSUEsQ0FDM0MsQ0FHQSxTQUFTcXNILEdBQWtCcHdFLEVBQUtqOEMsRUFBRyxDQUM5QkEsSUFBR0EsRUFBSXNrRSxHQUFRLEVBQUUsR0FDckJ0a0UsRUFBRSxZQUFZLEdBQUksQ0FBQyxFQUNuQkEsRUFBRSxZQUFZLEdBQUksR0FBRyxFQUNyQkEsRUFBRSxZQUFZLEVBQUksS0FBSyxFQUN2QkEsRUFBRSxZQUFZLEVBQUksS0FBSyxFQUN2QkEsRUFBRSxZQUFZLEVBQUksR0FBRyxFQUNyQkEsRUFBRSxZQUFZLEVBQUlpOEMsQ0FBRyxFQUNyQmo4QyxFQUFFLFlBQVksRUFBSWk4QyxDQUFHLEVBQ3JCLElBQUl3bEIsRUFBUSxJQUNaLE9BQUF6aEUsRUFBRSxZQUFZLEVBQUl5aEUsQ0FBSyxFQUNoQnpoRSxFQUFFLE9BQVNBLEVBQUUsRUFBSUEsRUFBRSxNQUFNLEVBQUdBLEVBQUUsQ0FBQyxFQUFJQSxDQUMzQyxDQUVBLFNBQVNzc0gsR0FBZ0I5eUMsRUFBSTRVLEVBQWdCLENBRTVDLEdBQUcsR0FBQ0EsRUFBRyxVQUFZLENBQUNBLEVBQUcsU0FBUyxRQUdoQyxTQUZJL1MsRUFBUytTLEVBQUcsU0FBUyxPQUNyQnB5RixFQUFJLEVBQUd1d0gsRUFBUyxHQUFJMzlCLEVBQVMsR0FDM0I1eUYsRUFBSXEvRSxFQUFPLE9BQVEsRUFBRXIvRSxFQUN2QixDQUFDcS9FLEVBQU9yL0UsQ0FBQyxHQUFLLENBQUNxL0UsRUFBT3IvRSxDQUFDLEVBQUUsUUFBVXV3SCxHQUFVLEdBQUlBLEVBQVN2d0gsRUFDckRxL0UsRUFBT3IvRSxDQUFDLEVBQUUsUUFBVSxHQUFLNHlGLEdBQVUsS0FBSUEsRUFBUzV5RixHQUV0RDR5RixFQUFTMjlCLElBQ1poekMsR0FBYUMsRUFBSSxLQUNqQkQsR0FBYUMsRUFBSSxJQUEwQjZ5QyxHQUFrQkUsQ0FBTSxDQUFDLEVBRXBFaHpDLEdBQWFDLEVBQUksTUFDbEIsQ0F1QkEsU0FBU2d6QyxHQUFhcCtCLEVBQUlsNEYsRUFBTSxDQUMvQixJQUFJc2pGLEVBQUtOLEtBQ1QsT0FBQUssR0FBYUMsRUFBSSxLQUNqQkQsR0FBYUMsRUFBSSxJQUE2QjR5QyxHQUFzQixDQUFBLEVBRXBFN3lDLEdBQWFDLEVBQUksSUFBd0JxeUMsR0FBZ0J6OUIsRUFBRyxVQUFZQSxFQUFHLFNBQVMsU0FBVyxJQUFJLENBQUMsRUFHcEdrK0IsR0FBZ0I5eUMsRUFBSTRVLENBQVEsRUFDNUI4OUIsR0FBZ0IxeUMsRUFBSTRVLENBQVEsRUFlNUI3VSxHQUFhQyxFQUFJLEtBRVZBLEVBQUcsS0FDWCxDQUNBLFNBQVNpekMsR0FBU2ovRyxFQUFNcFgsRUFBaUJGLEVBQXVCLENBQy9ELE9BQUdFLEVBQUssTUFBTSxFQUFFLElBQUksT0FBZTQxSCxHQUFjeCtHLEVBQWV0WCxDQUFJLEVBQzdEZzFILEdBQWMxOUcsRUFBZXRYLENBQUksQ0FDekMsQ0FFQSxTQUFTdzJILEdBQVNsL0csRUFBTXBYLEVBQWlCNmxELEVBQWdCL2xELEVBQU00ckYsRUFBTXNNLEVBQUl1YyxFQUFRRCxFQUFzQixDQUN0RyxPQUFHdDBHLEVBQUssTUFBTSxFQUFFLElBQUksT0FBZWt5SCxHQUFjOTZHLEVBQWV0WCxFQUFNK2xELEVBQUs2bEMsRUFBTXNNLEVBQUl1YyxFQUFRRCxDQUFNLEVBQzVGMFUsR0FBYzV4RyxFQUFldFgsRUFBTStsRCxFQUFLNmxDLEVBQU1zTSxFQUFJdWMsRUFBUUQsQ0FBTSxDQUN4RSxDQUVBLFNBQVNpaUIsR0FBU24vRyxFQUFNcFgsRUFBaUI2bEQsRUFBZ0IvbEQsRUFBTTRyRixFQUFNc00sRUFBSXVjLEVBQVFELEVBQXNCLENBQ3RHLE9BQUd0MEcsRUFBSyxNQUFNLEVBQUUsSUFBSSxPQUFlMnpILEdBQWN2OEcsRUFBZXRYLEVBQU0rbEQsRUFBSzZsQyxFQUFNc00sQ0FBa0IsRUFDNUZ5N0IsR0FBY3I4RyxFQUFldFgsRUFBTStsRCxFQUFLNmxDLEVBQU1zTSxDQUFrQixDQUN4RSxDQUVBLFNBQVN3K0IsR0FBU3AvRyxFQUFNcFgsRUFBaUI2bEQsRUFBZ0IvbEQsRUFBTTRyRixFQUFNc00sRUFBSXVjLEVBQVFELEVBQXNCLENBQ3RHLE9BQUd0MEcsRUFBSyxNQUFNLEVBQUUsSUFBSSxPQUFlaStHLEdBQWdFLEVBQzVGQyxHQUFnRSxDQUN4RSxDQUVBLFNBQVN1WSxHQUFTci9HLEVBQU1wWCxFQUFpQjZsRCxFQUFnQi9sRCxFQUFNNHJGLEVBQU1zTSxFQUFJdWMsRUFBUUQsRUFBc0IsQ0FDdEcsT0FBR3QwRyxFQUFLLE1BQU0sRUFBRSxJQUFJLE9BQWUrOUcsR0FBZ0UsRUFDNUZDLEdBQWdFLENBQ3hFLENBRUEsU0FBUzBZLEdBQVV0L0csRUFBTXBYLEVBQWlCdTBHLEVBQVF6MEcsRUFBTSxDQUN2RCxPQUFHRSxFQUFLLE1BQU0sRUFBRSxJQUFJLE9BQWV3M0csR0FBZXBnRyxFQUFlbTlGLEVBQVF6MEcsQ0FBSSxFQUN0RXUxRyxHQUFlaitGLEVBQWVtOUYsRUFBUXowRyxDQUFJLENBQ2xELENBRUEsU0FBUzYySCxHQUFZdi9HLEVBQWlCcFgsRUFBaUJGLEVBQU0sQ0FDNUQsT0FBTzg0RyxHQUFnQnhoRyxFQUFNdFgsQ0FBSSxDQUNsQyxDQUVBLFNBQVM4MkgsR0FBVXgvRyxFQUFNcFgsRUFBaUJGLEVBQWMsQ0FDdkQsT0FBR0UsRUFBSyxNQUFNLEVBQUUsSUFBSSxPQUFlcXVHLEdBQWVqM0YsRUFBZXRYLENBQUksRUFDOURrdUcsR0FBZTUyRixFQUFldFgsQ0FBSSxDQUMxQyxDQUVBLFNBQVMrMkgsR0FBV3ovRyxFQUFNcFgsRUFBaUJGLEVBQTRCLENBQ3RFLE9BQUdFLEVBQUssTUFBTSxFQUFFLElBQUksT0FBZXM5RyxHQUFvQmxtRyxFQUFldFgsQ0FBSSxFQUNuRWc4RyxHQUFvQjFrRyxFQUFldFgsQ0FBSSxDQUMvQyxDQUVBLFNBQVNnM0gsR0FBUzEvRyxFQUFNcFgsRUFBaUJGLEVBQU0sQ0FDOUMsT0FBR0UsRUFBSyxNQUFNLEVBQUUsSUFBSSxPQUFlODZHLEdBQWMxakcsQ0FBeUIsRUFDbkV3akcsR0FBY3hqRyxDQUF5QixDQUMvQyxDQUVBLFNBQVMyL0csR0FBWTMvRyxFQUFNdTBFLEVBQUszckYsRUFBaUJGLEVBQU0sQ0FDdEQsT0FBR0UsRUFBSyxNQUFNLEVBQUUsSUFBSSxPQUFlZzdHLEdBQWlCNWpHLEVBQWV1MEUsRUFBSzNyRixFQUFNRixDQUFJLEVBQzNFLE1BQ1IsQ0FFQSxTQUFTazNILEdBQWE1L0csRUFBTXBYLEVBQWlCRixFQUFNLENBQ2xELE9BQUdFLEVBQUssTUFBTSxFQUFFLElBQUksT0FBZXM2RyxHQUFrQmxqRyxFQUFlcFgsRUFBTUYsQ0FBSSxFQUN2RTI2RyxHQUFrQnJqRyxFQUFlcFgsRUFBTUYsQ0FBSSxDQUNuRCxDQUVBLFNBQVNtM0gsR0FBU2ovQixFQUFJaDRGLEVBQWlCRixFQUFNLENBQzVDLE9BQVFFLEVBQUssTUFBTSxFQUFFLElBQUksT0FBU28ySCxHQUFlbEIsSUFBY2w5QixDQUFRLENBQ3hFLENBRUEsU0FBU2svQixHQUFTOS9HLEVBQWlCcFgsRUFBaUJGLEVBQU1rNEYsRUFBaUJ0TSxFQUFNLENBQ2hGLE9BQVExckYsRUFBSyxNQUFNLEVBQUUsSUFBSSxPQUFTbXpILEdBQWU1RixJQUFjbjJHLEVBQU10WCxFQUFNazRGLEVBQUl0TSxDQUFJLENBQ3BGLENBT0EsU0FBU3lyQyxHQUFVLy9HLEVBQU1wWCxFQUFpQkYsRUFBTSxDQUMvQyxPQUFRRSxFQUFLLE1BQU0sRUFBRSxJQUFJLE9BQVNrNEcsR0FBZ0J2QyxJQUFlditGLEVBQU10WCxDQUFJLENBQzVFLENBRUEsU0FBU3MzSCxHQUFVaGdILEVBQWNwWCxFQUFpQkYsRUFBTSxDQUN2RCxPQUFRRSxFQUFLLE1BQU0sRUFBRSxJQUFJLE9BQVN3dUcsR0FBZ0JOLElBQWU5MkYsRUFBTXRYLENBQUksQ0FDNUUsQ0FFQSxTQUFTdTNILEdBQVdqZ0gsRUFBcUJwWCxFQUFpQkYsRUFBTSxDQUMvRCxPQUFRRSxFQUFLLE1BQU0sRUFBRSxJQUFJLE9BQVN1OUcsR0FBcUJuQixJQUFvQmhsRyxDQUFVLENBQ3RGLENBT0EsU0FBU2tnSCxHQUFhdDNILEVBQWlCLENBQ3RDLE9BQVFBLEVBQUssTUFBTSxFQUFFLElBQUksT0FBU3c2RyxHQUFtQkcsS0FDdEQsQ0FDQSxJQUFJNGMsR0FBVyxrREFDWEMsR0FBVSxxREFDZCxTQUFTQyxHQUFpQi9yRSxFQUFnQnN4QixFQUF3QixDQUNqRSxJQUFJMDZDLEVBQVFoc0UsRUFBSSxNQUFNLEtBQUssRUFDdkJya0IsRUFBYSxDQUFBLEVBQ2pCLEdBRGtDMjFDLElBQVczMUMsRUFBRSxDQUFDLEVBQUlxd0YsRUFBTSxDQUFDLEdBQ3hEQSxFQUFNLFNBQVcsRUFBRyxPQUFPcndGLEVBQzlCLElBQUk4MUIsRUFBSXpSLEVBQUksTUFBTTZyRSxFQUFVLEVBQUcxOUUsRUFBR3FqQixFQUFHMkYsRUFBR2o5RCxFQUN4QyxHQUFHdTNELEVBQUcsSUFBSXYzRCxFQUFJLEVBQUdBLEdBQUt1M0QsRUFBRSxPQUFRLEVBQUV2M0QsRUFDakNpMEMsRUFBSXNqQixFQUFFdjNELENBQUMsRUFBRSxNQUFNNHhILEVBQVMsR0FFcEJ0NkQsRUFBRXJqQixFQUFFLENBQUMsRUFBRSxRQUFRLEdBQUcsS0FBTyxHQUFJeFMsRUFBRXdTLEVBQUUsQ0FBQyxDQUFDLEVBQUlBLEVBQUUsQ0FBQyxFQUFFLE1BQU0sRUFBRUEsRUFBRSxDQUFDLEVBQUUsT0FBTyxDQUFDLEdBRWpFQSxFQUFFLENBQUMsRUFBRSxNQUFNLEVBQUUsQ0FBQyxJQUFNLFNBQVVncEIsRUFBSSxRQUFRaHBCLEVBQUUsQ0FBQyxFQUFFLE1BQU0sQ0FBQyxFQUNwRGdwQixFQUFJaHBCLEVBQUUsQ0FBQyxFQUFFLE1BQU1xakIsRUFBRSxDQUFDLEVBQ3ZCNzFCLEVBQUV3N0IsQ0FBQyxFQUFJaHBCLEVBQUUsQ0FBQyxFQUFFLE1BQU0sRUFBRUEsRUFBRSxDQUFDLEVBQUUsT0FBTyxDQUFDLEdBR25DLE9BQU94UyxDQUNSLENBQ0EsU0FBU3N3RixHQUFvQmpzRSxFQUFnQixDQUM1QyxJQUFJZ3NFLEVBQVFoc0UsRUFBSSxNQUFNLEtBQUssRUFDdkJya0IsRUFBSSxDQUFBLEVBQ1IsR0FBR3F3RixFQUFNLFNBQVcsRUFBRyxPQUFPcndGLEVBQzlCLElBQUk4MUIsRUFBSXpSLEVBQUksTUFBTTZyRSxFQUFVLEVBQUcxOUUsRUFBR3FqQixFQUFHMkYsRUFBR2o5RCxFQUN4QyxHQUFHdTNELEVBQUcsSUFBSXYzRCxFQUFJLEVBQUdBLEdBQUt1M0QsRUFBRSxPQUFRLEVBQUV2M0QsRUFDakNpMEMsRUFBSXNqQixFQUFFdjNELENBQUMsRUFBRSxNQUFNNHhILEVBQVMsR0FFcEJ0NkQsRUFBRXJqQixFQUFFLENBQUMsRUFBRSxRQUFRLEdBQUcsS0FBTyxHQUFJeFMsRUFBRXdTLEVBQUUsQ0FBQyxDQUFDLEVBQUlBLEVBQUUsQ0FBQyxFQUFFLE1BQU0sRUFBRUEsRUFBRSxDQUFDLEVBQUUsT0FBTyxDQUFDLEdBRWpFQSxFQUFFLENBQUMsRUFBRSxNQUFNLEVBQUUsQ0FBQyxJQUFNLFNBQVVncEIsRUFBSSxRQUFRaHBCLEVBQUUsQ0FBQyxFQUFFLE1BQU0sQ0FBQyxFQUNwRGdwQixFQUFJaHBCLEVBQUUsQ0FBQyxFQUFFLE1BQU1xakIsRUFBRSxDQUFDLEVBQ3ZCNzFCLEVBQUV3N0IsQ0FBQyxFQUFJaHBCLEVBQUUsQ0FBQyxFQUFFLE1BQU0sRUFBRUEsRUFBRSxDQUFDLEVBQUUsT0FBTyxDQUFDLEdBR25DLE9BQU94UyxDQUNSLENBS0EsSUFBSXV3RixHQUVKLFNBQVNDLEdBQVl0dUgsRUFBUTVILEVBQWtCLENBQzlDLElBQUl5aEUsRUFBTXcwRCxHQUFjcnVILENBQU0sR0FBS2cwRSxHQUFZaDBFLENBQU0sRUFDckQsT0FBRzY1RCxJQUFRLFVBQWtCSCxHQUFZdGhFLENBQUssRUFDdkN1aEUsR0FBV0UsRUFBS3poRSxDQUFLLENBQzdCLENBRUEsU0FBU20ySCxHQUFrQnBwQyxFQUFXdHJGLEVBQUt1QyxFQUFJYSxFQUFnQixDQUM5RCxJQUFJdXhILEVBQWV2eEgsRUFDbkIsUUFBUWIsRUFBRyxDQUFDLEVBQUUsTUFBTSxrQkFBa0IsR0FBRyxDQUFDLEdBQUcsRUFBRSxHQUFHLENBQUMsRUFBQyxDQUNuRCxJQUFLLFVBQVdveUgsRUFBTzE1QyxHQUFhNzNFLENBQUcsRUFBRyxNQUMxQyxJQUFLLEtBQU0sSUFBSyxNQUFPdXhILEVBQU8sU0FBU3Z4SCxFQUFLLEVBQUUsRUFBRyxNQUNqRCxJQUFLLEtBQU0sSUFBSyxRQUFTdXhILEVBQU8sV0FBV3Z4SCxDQUFHLEVBQUcsTUFDakQsSUFBSyxPQUFRLElBQUssY0FBZXV4SCxFQUFPcDlDLEdBQVVuMEUsQ0FBRyxFQUFHLE1BQ3hELElBQUssS0FBTSxJQUFLLFNBQVUsSUFBSyxRQUFTLElBQUssT0FBUSxJQUFLLGFBQWMsTUFDeEUsUUFBUyxNQUFNLElBQUksTUFBTSxnQkFBa0JiLEVBQUcsQ0FBQyxDQUFDLENBQ2hELENBQ0Qrb0YsRUFBVW5SLEdBQVluNkUsQ0FBRyxDQUFDLEVBQUkyMEgsQ0FDL0IsQ0FFQSxTQUFTQyxHQUFpQjl1RixFQUFlbXFGLEVBQUl6cEgsRUFBRyxDQUMvQyxHQUFHcy9CLEVBQUssSUFBTSxJQUNkLElBQUcsQ0FBQ3QvQixHQUFLQSxFQUFFLFdBQWEsR0FBTyxHQUFJLENBQy9Ccy9CLEVBQUssSUFBTSxJQUFPQSxFQUFLLEVBQUlBLEVBQUssR0FBSzQ3QyxHQUFLNTdDLEVBQUssQ0FBQyxFQUMzQ21xRixJQUFPLFVBQ1hucUYsRUFBSyxJQUFNLEtBQ1RBLEVBQUssRUFBRSxLQUFPQSxFQUFLLEVBQUdBLEVBQUssRUFBSUEsRUFBSyxFQUFFLFNBQVMsRUFBRSxFQUNoREEsRUFBSyxFQUFJNjVCLEdBQWdCNzVCLEVBQUssQ0FBQyxFQUVoQ0EsRUFBSyxFQUFJKzVCLEdBQVkvNUIsRUFBSyxDQUFDLEVBRTVCQSxFQUFLLEVBQUkydUYsR0FBWXhFLEdBQUksVUFBV25xRixFQUFLLENBQUMsQ0FDakQsT0FBU3RnQyxFQUFHLENBQUUsR0FBR2dCLEVBQUUsSUFBSyxNQUFNaEIsQ0FBSSxDQUNqQyxHQUFJLENBQ0gsSUFBSXkrQixFQUFJdXdGLEdBQWN2RSxDQUFFLEdBQUdBLEdBQUksVUFFL0IsR0FER3pwSCxFQUFFLFNBQVFzL0IsRUFBSyxFQUFJN0IsR0FDbkJ6OUIsRUFBRSxXQUFhcy9CLEVBQUssR0FBSyxLQUFPeTlCLEdBQVl0L0IsQ0FBQyxFQUFHLENBQ2xELElBQUloc0IsRUFBSzBtRCxHQUFvQjc0QixFQUFLLENBQUMsRUFBTTd0QixJQUFNNnRCLEVBQUssRUFBSSxJQUFLQSxFQUFLLEVBQUksSUFBSSxLQUFLN3RCLEVBQUcsRUFBR0EsRUFBRyxFQUFFLEVBQUVBLEVBQUcsRUFBRUEsRUFBRyxFQUFFQSxFQUFHLEVBQUVBLEVBQUcsRUFBRUEsRUFBRyxDQUFDLEVBQ3BILENBQ0gsT0FBU3pTLEVBQUcsQ0FBRSxHQUFHZ0IsRUFBRSxJQUFLLE1BQU1oQixDQUFJLEVBQ2xDLENBRUEsU0FBU3F2SCxHQUFtQjNqQixFQUFRNGpCLEVBQU1wNEgsRUFBTSxDQUMvQyxHQUFHQSxFQUFLLFlBQ0pvNEgsRUFBSyxTQUFVLENBQ2pCLElBQUlDLEVBQUlELEVBQUssU0FDVkMsRUFBRSxVQUFTQSxFQUFFLFlBQWMvakIsR0FBbUIrakIsRUFBRSxPQUFPLEdBQUtBLEVBQUUsUUFDakUsQ0FFRjdqQixFQUFPNGpCLEVBQUssRUFBRSxFQUFJQSxDQUNuQixDQUdBLFNBQVNFLEdBQWdCeHFDLEVBQUt0cUIsRUFBSWxzRCxFQUFNOHhCLEVBQWN2NEIsRUFBTTJqRyxFQUFRK2pCLEVBQU1odUgsRUFBS2lpSCxFQUFRMWlILEVBQUcsQ0FDekYsSUFBSXlwSCxFQUFLLFVBQVdpRixFQUFNcHZGLEVBQUssUUFBUzIvQixFQUFJLEdBQUlqL0QsRUFBSUEsR0FBSyxDQUFBLEVBQ3pELElBQUkydUgsRUFBWSxDQUFBLEVBQ1ozeUgsRUFBSSxFQUdSLElBRkcweUgsSUFBUSxRQUFhanVILElBQUtpdUgsRUFBTWp1SCxFQUFJLFNBQ3BDaXVILElBQVEsUUFBYUQsSUFBTUMsRUFBTUQsRUFBSyxTQUNuQy9qQixFQUFPZ2tCLENBQUcsSUFBTSxTQUNsQmhrQixFQUFPZ2tCLENBQUcsRUFBRSxLQUFJakYsRUFBSy9lLEVBQU9na0IsQ0FBRyxFQUFFLElBQ2pDaGtCLEVBQU9na0IsQ0FBRyxFQUFFLFVBQVVDLEVBQVUsS0FBS2prQixFQUFPZ2tCLENBQUcsRUFBRSxRQUFRLEVBQ3pELEVBQUNoa0IsRUFBT2drQixDQUFHLEVBQUUsU0FDaEJBLEVBQU1oa0IsRUFBT2drQixDQUFHLEVBQUUsT0FFbkIsT0FBT2xoSCxFQUFLLEtBQUksQ0FDZixJQUFLLFVBQ0o4eEIsRUFBSyxFQUFJLElBQ1RBLEVBQUssRUFBSW0xQyxHQUFhdVAsQ0FBRyxFQUN6QixNQUNELElBQUssU0FDSjFrRCxFQUFLLEVBQUksSUFBS0EsRUFBSyxFQUFJKzBDLEdBQVlWLEdBQVlxUSxDQUFHLENBQUMsRUFDbkQxa0QsRUFBSyxFQUFLMGtELEVBQUksUUFBUSxHQUFHLEVBQUksR0FBS3JRLEdBQVlqYSxHQUFJc3FCLENBQUcsRUFBRSxRQUFRLFNBQVUsRUFBRSxFQUFJMWtELEVBQUssRUFDcEYsTUFDRCxJQUFLLFdBQ0Qwa0QsRUFBSSxNQUFNLEVBQUUsR0FBSyxNQUFLQSxHQUFPLEtBQ2hDMWtELEVBQUssR0FBS3l4QyxHQUFVaVQsQ0FBRyxFQUFJLElBQUksS0FBSyxLQUFLLElBQUksS0FBTSxHQUFJLEVBQUUsQ0FBQyxJQUFNLEdBQUssR0FBSyxHQUFLLEtBQzVFMWtELEVBQUssSUFBTUEsRUFBSyxFQUFHQSxFQUFLLEVBQUlxMEMsR0FBWXFRLENBQUcsRUFDdEMxa0QsRUFBSyxFQUFFLEtBQUlBLEVBQUssRUFBSUEsRUFBSyxFQUFHLElBQ2pDLENBQUNtcUYsR0FBTUEsR0FBTSxhQUFXQSxFQUFLLGNBRWpDLElBQUssU0FDRG5xRixFQUFLLElBQU0sU0FBV0EsRUFBSyxFQUFFLENBQUMwa0QsR0FDN0Ixa0QsRUFBSyxJQUFHQSxFQUFLLEVBQUksS0FDckIsTUFDRCxJQUFLLFFBQVNBLEVBQUssRUFBSSxJQUFLQSxFQUFLLEVBQUl5aEQsR0FBTWlELENBQUcsRUFBTWhrRixFQUFFLFdBQWEsS0FBT3MvQixFQUFLLEVBQUkwa0QsR0FBSyxNQUN4RixRQUNJQSxHQUFPLElBQU10cUIsR0FBTSxHQUFNcDZCLEVBQUssRUFBSSxLQUM5QkEsRUFBSyxFQUFJLElBQUtBLEVBQUssRUFBSSswQyxHQUFZM2EsR0FBSXNxQixDQUFHLEdBQ2pELEtBQ0QsQ0FFRCxHQURBb3FDLEdBQWlCOXVGLEVBQU1tcUYsRUFBSXpwSCxDQUFDLEVBQ3pCQSxFQUFFLGNBQWdCLEdBQ3BCLEdBQUdzL0IsRUFBSyxRQUFTLENBQ2hCLElBQUlzMUUsRUFBT2poQyxHQUFZcjBDLEVBQUssT0FBTyxFQUVoQ3MxRSxFQUFLLFdBQVcsQ0FBQyxHQUFLLEtBQVlBLEVBQU9BLEVBQUssTUFBTSxDQUFDLEdBQ3hEdDFFLEVBQUssRUFBSTI3RCxHQUFTMlosRUFBTTd0RyxDQUFJLEVBQzVCLE9BQU91NEIsRUFBSyxRQUNUQSxFQUFLLFlBQWMsS0FBTUEsRUFBSyxFQUFJMjdELEdBQVMsUUFBU2wwRixDQUFJLEVBQ25EdTRCLEVBQUssYUFDWkEsRUFBSyxFQUFJMjdELEdBQVMzN0QsRUFBSyxXQUFZdjRCLENBQUksRUFDdkMyN0csRUFBTyxLQUFLLENBQUMzbkMsR0FBa0J6N0MsRUFBSyxDQUFDLEVBQUdBLEVBQUssQ0FBQyxDQUFDLEVBRW5ELEtBQ0csS0FBSXRqQyxFQUFJLEVBQUdBLEVBQUkwbUgsRUFBTyxPQUFRLEVBQUUxbUgsRUFDNUIrSyxFQUFLLEdBQUsyN0csRUFBTzFtSCxDQUFDLEVBQUUsQ0FBQyxFQUFFLEVBQUUsR0FBSytLLEVBQUssR0FBSzI3RyxFQUFPMW1ILENBQUMsRUFBRSxDQUFDLEVBQUUsRUFBRSxHQUN0RCtLLEVBQUssR0FBSzI3RyxFQUFPMW1ILENBQUMsRUFBRSxDQUFDLEVBQUUsRUFBRSxHQUFLK0ssRUFBSyxHQUFLMjdHLEVBQU8xbUgsQ0FBQyxFQUFFLENBQUMsRUFBRSxFQUFFLElBQ3pEc2pDLEVBQUssRUFBSW9qRixFQUFPMW1ILENBQUMsRUFBRSxDQUFDLEdBR3RCZ0UsRUFBRSxhQUNKMnVILEVBQVUsUUFBUSxTQUFTLEVBQUcsQ0FDMUIsQ0FBQzF2RCxFQUFFLGFBQWUsRUFBRSxjQUFhQSxFQUFFLFlBQWMsRUFBRSxZQUN6RCxDQUFHLEVBQ0QzL0IsRUFBSyxFQUFJMi9CLEdBRVAzL0IsRUFBSyxVQUFZLFNBQVdBLEVBQUssS0FBT0EsRUFBSyxRQUNqRCxDQUVBLFNBQVNzdkYsR0FBbUI3NkIsRUFBaUIsQ0FDNUNBLEVBQVEsRUFBSUEsRUFBUSxHQUFLLEdBQ3pCQSxFQUFRLEVBQUlBLEVBQVEsRUFBRSxRQUFRLFFBQVE7QUFBQSxDQUFJLEVBQUUsUUFBUSxNQUFNO0FBQUEsQ0FBSSxFQUM5REEsRUFBUSxFQUFJQSxFQUFRLEVBQUlBLEVBQVEsS0FBTyxNQUN4QyxDQUdBLFNBQVM4NkIsR0FBZTN1SCxFQUFHcW1FLEVBQW9CLENBQzlDLElBQUlyd0UsRUFBT3F3RSxHQUFTLEdBQ3BCL0gsS0FDQSxJQUFJMW1DLEVBQU1xOEIsR0FBTThoQixHQUFlLzFFLENBQUMsQ0FBQyxHQUM5QmhLLEVBQUssTUFBUSxVQUFZQSxFQUFLLE1BQVEsU0FBV0EsRUFBSyxNQUFRLFlBRTNENGhDLEVBQU1rOUMsR0FBU2w5QyxDQUFHLEdBRXhCLElBQUlnM0YsRUFBVWgzRixFQUFJLE1BQU0sRUFBRyxJQUFJLEVBQUUsWUFBVyxFQUFJaTNGLEVBQVMsR0FFekQsR0FEQUQsRUFBVUEsRUFBUSxRQUFRLFNBQVUsRUFBRSxHQUNsQ0EsRUFBUSxRQUFRLEdBQUcsRUFBSSxNQUFRLEtBQUssSUFBS0EsRUFBUSxRQUFRLEdBQUcsRUFBSSxLQUFRQSxFQUFRLFFBQVEsR0FBRyxFQUFFLElBQU0sRUFBRSxDQUFFLElBQUlFLEVBQUs3OUMsR0FBSWo3RSxDQUFJLEVBQUcsT0FBQTg0SCxFQUFHLEtBQU8sU0FBaUJ2eEIsR0FBSSxZQUFZM2xFLEVBQUtrM0YsQ0FBRSxDQUFJLENBRXJMLEdBREdGLEVBQVEsUUFBUSxPQUFPLEdBQUssSUFBSSxDQUFDLE9BQVEsUUFBUyxPQUFRLE9BQVEsU0FBVSxRQUFTLEtBQUssRUFBRSxRQUFRLFNBQVNodEUsR0FBSyxDQUFLZ3RFLEVBQVEsUUFBUSxJQUFNaHRFLEVBQUcsR0FBSyxJQUFHaXRFLEVBQVMsR0FBTyxDQUFBLEVBQ3hLQSxFQUFRLE9BQU9FLEdBQWlCbjNGLEVBQUs1aEMsQ0FBSSxFQUU1QzgzSCxHQUFpQixDQUNoQixpQkFBa0IsVUFDbEIsZUFBZ0I3MkQsR0FBVSxFQUFFLEVBQzVCLFlBQWEsc0JBQ2IsY0FBZUEsR0FBVSxFQUFFLEVBQzNCLGFBQWNBLEdBQVUsRUFBRSxFQUMxQixZQUFhQSxHQUFVLEVBQUUsRUFDekIsY0FBZUEsR0FBVSxFQUFFLEVBQzNCLGFBQWNBLEdBQVUsRUFBRSxFQUMxQixTQUFZLHVDQUNaLE1BQVNBLEdBQVUsQ0FBQyxFQUNwQixTQUFZQSxHQUFVLENBQUMsRUFDdkIsUUFBV0EsR0FBVSxFQUFFLEVBQ3ZCLFdBQWNBLEdBQVUsRUFBRSxFQUMxQixTQUFVLHFCQUNWLGFBQWMsMEJBQ2QsU0FBVSxvQkFDWixFQUdDLElBQUlzckIsRUFDQW4yQyxFQUFRLENBQUUsRUFBRXZsQixFQUVaczBELEVBQVMsQ0FBQSxFQUFJNnpDLEVBQStCLENBQUUsRUFBRUMsRUFBMEJqNUgsRUFBSyxNQUFRLENBQUEsRUFBSyxDQUFBLEVBQUtrNUgsRUFBWSxHQUM3Rzl2RixFQUFRLENBQUEsRUFBYTcrQixFQUFNLENBQUEsRUFDM0I0dUgsRUFBT3hCLEdBQWlCLHlCQUF5QixFQUFHeUIsRUFBTyxFQUMzRGgwRyxFQUFJLEVBQUduYyxFQUFJLEVBQ1hzZ0csRUFBcUIsQ0FBQyxFQUFHLENBQUMsRUFBRSxJQUFTLEVBQUUsR0FBTyxFQUFHLEVBQUcsQ0FBQyxFQUFFLEVBQUcsRUFBRSxDQUFDLENBQUMsRUFDOURpTCxFQUFTLENBQUEsRUFBSTRqQixFQUFPLEdBQ3BCNTBELEVBQUssR0FBSTYxRCxFQUFPLEVBQ2hCejZCLEVBQTBCLENBQUEsRUFDMUJuUSxFQUFRLENBQUUsRUFBRUcsRUFBWSxDQUFBLEVBQUkwcUMsRUFBTyxFQUFHenpILEVBQUssR0FDM0N5MUcsR0FBOEIsQ0FBQSxFQUFJemQsR0FBdUIsQ0FBRSxFQUMzRDA3QixHQUFRLENBQUUsRUFBRWhCLEdBQU16TixHQUFVLEdBQzVCMEIsRUFBb0MsQ0FBQSxFQUNwQ3BvQixHQUE2QixDQUFFLEVBQUVzb0IsRUFBUyxDQUFBLEVBQUlsbkQsRUFBSyxFQUFHUixFQUFLLEVBQzNEK3NELEVBQTBCLENBQUUsT0FBTyxDQUFBLEVBQUksUUFBUSxDQUFDLFNBQVMsRUFBSyxDQUFDLEVBQWF5SCxFQUFVLENBQUEsRUFDMUZ4NUMsR0FBVSxVQUFZLEVBQ3RCcCtDLEVBQU1BLEVBQUksUUFBUSxzQkFBc0IsRUFBRSxFQUUxQyxRQURJNjNGLEVBQVUsR0FDUGx0QyxFQUFLdk0sR0FBVSxLQUFLcCtDLENBQUcsR0FBSSxPQUFRMnFELEVBQUcsQ0FBQyxHQUFLa3RDLEVBQVVsdEMsRUFBRyxDQUFDLEdBQUcsWUFBYSxFQUFBLENBQ2hGLElBQUssT0FDSixHQUFHa3RDLEdBQVcsT0FBUSxDQUNyQixHQUFHbHRDLEVBQUcsQ0FBQyxJQUFJLEtBQUssSUFBSTE3RCxFQUFJdWxCLEVBQU0sSUFBRyxHQUFJLENBQUMsSUFBSW0yQyxFQUFHLENBQUMsRUFBRyxNQUFNLElBQUksTUFBTSxjQUFjMTdELEVBQUksS0FBSyxHQUFHLENBQUMsT0FDcEYwN0QsRUFBRyxDQUFDLEVBQUUsT0FBT0EsRUFBRyxDQUFDLEVBQUUsT0FBTyxDQUFDLElBQU0sS0FBS24yQyxFQUFNLEtBQUssQ0FBQ20yQyxFQUFHLENBQUMsRUFBRyxFQUFJLENBQUMsRUFDdEUsS0FDQSxDQUNELEdBQUduMkMsRUFBTUEsRUFBTSxPQUFPLENBQUMsRUFBRSxDQUFDLEVBQUcsTUFDMUJtMkMsRUFBRyxDQUFDLElBQUksSUFBSytyQyxHQUFnQjEyRixFQUFJLE1BQU13M0YsRUFBTTdzQyxFQUFHLEtBQUssRUFBRy9vQixFQUFJMjFELEVBQU0vaUYsRUFBTUEsRUFBTSxPQUFPLENBQUMsRUFBRSxDQUFDLEdBQWdCLFVBQVV5bkQsR0FBUXowRCxFQUFNLENBQUMsRUFBRWhrQixFQUFFLEVBQUVuYyxDQUFDLEVBQUd1ckcsRUFBUStrQixHQUFNbjBHLENBQUMsRUFBRzdhLEVBQUtpaUgsRUFBUXhzSCxDQUFJLEdBQzNLd2pFLEVBQUssR0FBSTIxRCxFQUFPeEIsR0FBaUJwckMsRUFBRyxDQUFDLENBQUMsRUFBRzZzQyxFQUFPN3NDLEVBQUcsTUFBUUEsRUFBRyxDQUFDLEVBQUUsUUFDeEUsTUFDRCxJQUFLLE9BQ0osR0FBR0EsRUFBRyxDQUFDLElBQUksSUFrQlYsR0FqQkcrdUIsR0FBUyxPQUFTLElBQUdseUUsRUFBSyxFQUFJa3lFLEtBQzdCLENBQUN0N0csRUFBSyxXQUFhQSxFQUFLLFVBQVlpSixJQUFNbWdDLEVBQUssSUFBTSxTQUNyRHBwQyxFQUFLLE9BQ0hpNUgsRUFBU2h3SCxDQUFDLElBQUdnd0gsRUFBU2h3SCxDQUFDLEVBQUksSUFDL0Jnd0gsRUFBU2h3SCxDQUFDLEVBQUVtYyxDQUFDLEVBQUlna0IsR0FDWDZ2RixFQUFTbDFDLEdBQVczK0QsQ0FBQyxFQUFJNCtELEdBQVcvNkUsQ0FBQyxDQUFDLEVBQUltZ0MsR0FFL0NBLEVBQUssT0FDUEEsRUFBSyxFQUFLLENBQUMsT0FBT3EwQyxHQUFZcjBDLEVBQUssSUFBSSxDQUFDLEVBQ3JDQSxFQUFLLGdCQUFlQSxFQUFLLEVBQUUsUUFBVUEsRUFBSyxlQUM3QyxPQUFPQSxFQUFLLEtBQU0sT0FBT0EsRUFBSyxnQkFFNUJBLEVBQUssYUFBZUEsRUFBSyxhQUMzQm84QixFQUFLcGdELEdBQUssU0FBU2drQixFQUFLLFlBQVksRUFBRSxFQUFFLEdBQ3hDNDdCLEVBQUsvN0QsR0FBSyxTQUFTbWdDLEVBQUssVUFBVSxFQUFFLEVBQUUsR0FDdEN3MUQsRUFBTyxLQUFLLENBQUMsRUFBRSxDQUFDLEVBQUV4NUUsRUFBRSxFQUFFbmMsQ0FBQyxFQUFFLEVBQUUsQ0FBQyxFQUFFdThELEVBQUcsRUFBRVIsQ0FBRSxDQUFDLENBQUMsR0FFckMsQ0FBQ2hsRSxFQUFLLFdBQWlCb3BDLEVBQUssWUFBYWhrQixFQUFJb2dELEVBQUssRUFBUSxFQUFFcGdELFVBQ3ZEZ2tCLEVBQUssYUFBZUEsRUFBSyxVQUFXLENBRTNDLFFBQVFzd0YsRUFBTXQwRyxFQUFHczBHLEdBQU9sMEQsRUFBSSxFQUFFazBELEVBQzdCLFFBQVFDLEVBQU0xd0gsRUFBRzB3SCxHQUFPMzBELEVBQUksRUFBRTIwRCxHQUMxQkQsRUFBTXQwRyxHQUFLdTBHLEVBQU0xd0gsS0FDaEJqSixFQUFLLE9BQ0hpNUgsRUFBU1UsQ0FBRyxJQUFHVixFQUFTVSxDQUFHLEVBQUksSUFDbkNWLEVBQVNVLENBQUcsRUFBRUQsQ0FBRyxFQUFJLENBQUMsRUFBRSxHQUFHLEdBQ3JCVCxFQUFTbDFDLEdBQVcyMUMsQ0FBRyxFQUFJMTFDLEdBQVcyMUMsQ0FBRyxDQUFDLEVBQUksQ0FBQyxFQUFFLEdBQUcsR0FJOUR2MEcsRUFBSW9nRCxFQUFLLENBQ1QsS0FDSSxFQUFFcGdELE9BRVBna0IsRUFBT3l1RixHQUFvQnRyQyxFQUFHLENBQUMsQ0FBQyxFQUM3Qm5qRCxFQUFLLFFBQU9oa0IsRUFBSSxDQUFDZ2tCLEVBQUssTUFBUSxHQUM5QmhrQixFQUFJbWtGLEVBQVMsRUFBRSxJQUFHQSxFQUFTLEVBQUUsRUFBSW5rRixHQUNqQ0EsRUFBSW1rRixFQUFTLEVBQUUsSUFBR0EsRUFBUyxFQUFFLEVBQUlua0YsR0FDakNtbkUsRUFBRyxDQUFDLEVBQUUsTUFBTSxFQUFFLElBQU0sTUFBTSxFQUFFbm5FLEVBQy9CazJGLEdBQVcsQ0FBQSxFQUVaLE1BQ0QsSUFBSyxNQUNEL3VCLEVBQUcsQ0FBQyxJQUFJLEtBQU9BLEVBQUcsQ0FBQyxFQUFFLE1BQU0sRUFBRSxJQUFNLE1BQ2xDdGpGLEVBQUlzZ0csRUFBUyxFQUFFLElBQUdBLEVBQVMsRUFBRSxFQUFJdGdHLEdBQ2pDQSxFQUFJc2dHLEVBQVMsRUFBRSxJQUFHQSxFQUFTLEVBQUUsRUFBSXRnRyxHQUNqQ3NqRixFQUFHLENBQUMsRUFBRSxNQUFNLEVBQUUsSUFBTSxPQUN0QmhpRixFQUFNb3RILEdBQWlCcHJDLEVBQUcsQ0FBQyxDQUFDLEVBQ3pCaGlGLEVBQUksUUFBT3RCLEVBQUksQ0FBQ3NCLEVBQUksTUFBUSxJQUVoQzZhLEVBQUksRUFBRyxFQUFFbmMsSUFFVHNCLEVBQU1vdEgsR0FBaUJwckMsRUFBRyxDQUFDLENBQUMsRUFDekJoaUYsRUFBSSxRQUFPdEIsRUFBSSxDQUFDc0IsRUFBSSxNQUFRLEdBQy9CbWlILEVBQVMsQ0FBQSxHQUNObmlILEVBQUksZUFBaUIsS0FBT0EsRUFBSSxVQUNsQ21pSCxFQUFPLElBQU0sU0FBU25pSCxFQUFJLE9BQVEsRUFBRSxFQUFHbWlILEVBQU8sSUFBTTNtQixHQUFNMm1CLEVBQU8sR0FBRyxFQUNwRXRvQixHQUFRbjdGLENBQUMsRUFBSXlqSCxHQUVYbmlILEVBQUksUUFBVSxNQUFPbWlILEVBQU8sT0FBUyxHQUFNdG9CLEdBQVFuN0YsQ0FBQyxFQUFJeWpILElBRTVELE1BQ0QsSUFBSyxZQUNKLEdBQUduZ0MsRUFBRyxDQUFDLElBQUksSUFBSSxDQUNkLElBQUkxN0QsRUFBSXVsQixFQUFNLElBQUcsR0FBSSxDQUFDLElBQUltMkMsRUFBRyxDQUFDLEVBQUcsTUFBTSxJQUFJLE1BQU0sY0FBYzE3RCxFQUFJLEtBQUssR0FBRyxDQUFDLEVBQzVFbW9HLEVBQVcsS0FBS0UsQ0FBUyxFQUN0QjN2QixFQUFTLEVBQUUsR0FBS0EsRUFBUyxFQUFFLEdBQUtBLEVBQVMsRUFBRSxHQUFLQSxFQUFTLEVBQUUsSUFDN0QwdkIsRUFBUyxNQUFNLEVBQUl2MEMsR0FBYTZrQixDQUFRLEVBQ3JDdnBHLEVBQUssV0FBYUEsRUFBSyxXQUFhdXBHLEVBQVMsRUFBRSxJQUNqRDB2QixFQUFTLFVBQVUsRUFBSUEsRUFBUyxNQUFNLEVBQ3RDMXZCLEVBQVMsRUFBRSxFQUFJdnBHLEVBQUssVUFBWSxFQUNoQ2k1SCxFQUFTLE1BQU0sRUFBSXYwQyxHQUFhNmtCLENBQVEsSUFHdkMzSyxFQUFPLFNBQVFxNkIsRUFBUyxTQUFTLEVBQUlyNkIsR0FDckMyNkIsR0FBTSxPQUFTLElBQUdOLEVBQVMsT0FBTyxFQUFJTSxJQUN0Q24xQixHQUFRLE9BQVMsSUFBRzYwQixFQUFTLE9BQU8sRUFBSTcwQixJQUMzQ2pmLEVBQU8rekMsQ0FBUyxFQUFJRCxDQUN4QixNQUNJMXZCLEVBQVcsQ0FBQyxFQUFHLENBQUMsRUFBRSxJQUFTLEVBQUUsR0FBTyxFQUFHLEVBQUcsQ0FBQyxFQUFFLEVBQUcsRUFBRSxDQUFDLENBQUMsRUFDcER0Z0csRUFBSW1jLEVBQUksRUFDUmd4QixFQUFNLEtBQUssQ0FBQ20yQyxFQUFHLENBQUMsRUFBRyxFQUFLLENBQUMsRUFDekIxN0QsRUFBTThtRyxHQUFpQnByQyxFQUFHLENBQUMsQ0FBQyxFQUM1QjJzQyxFQUFZejdDLEdBQVk1c0QsRUFBSSxJQUFJLEVBQ2hDb29HLEVBQVlqNUgsRUFBSyxNQUFRLENBQUUsRUFBRyxDQUFFLEVBQ2hDNCtGLEVBQVMsQ0FBQSxFQUNUNHRCLEVBQVMsQ0FBQSxFQUNUcG9CLEdBQVUsQ0FBQSxFQUNWbzFCLEVBQVUsQ0FBQyxLQUFLTixFQUFXLE9BQU8sQ0FBQyxFQUNuQ25ILEVBQVMsT0FBTyxLQUFLeUgsQ0FBTyxFQUU3QixNQUNELElBQUssUUFDSixHQUFHanRDLEVBQUcsQ0FBQyxJQUFJLEtBQUssSUFBSTE3RCxFQUFJdWxCLEVBQU0sSUFBRyxHQUFJLENBQUMsSUFBSW0yQyxFQUFHLENBQUMsRUFBRyxNQUFNLElBQUksTUFBTSxjQUFjMTdELEVBQUksS0FBSyxHQUFHLENBQUMsTUFDdkYsSUFBRzA3RCxFQUFHLENBQUMsRUFBRSxNQUFNLEVBQUUsR0FBSyxLQUFNLE1BRWhDbjJDLEVBQU0sS0FBSyxDQUFDbTJDLEVBQUcsQ0FBQyxFQUFHLEVBQUssQ0FBQyxFQUN6Qmd0QyxHQUFRLENBQUUsRUFBRXpPLEdBQVUsR0FFdkIsTUFFRCxJQUFLLFFBQ0R2K0IsRUFBRyxDQUFDLElBQUksSUFBSzRyQyxHQUFtQjNqQixFQUFRNGpCLEVBQU1wNEgsQ0FBSSxFQUNoRG80SCxFQUFPVCxHQUFpQnByQyxFQUFHLENBQUMsQ0FBQyxFQUNsQyxNQUVELElBQUssZUFDSjZyQyxFQUFLLEdBQUszNkMsR0FBWWs2QyxHQUFpQnByQyxFQUFHLENBQUMsQ0FBQyxFQUFFLFFBQVUsU0FBUyxFQUM5RHVyQyxHQUFjTSxFQUFLLEVBQUUsSUFBR0EsRUFBSyxHQUFLTixHQUFjTSxFQUFLLEVBQUUsR0FDMUQsUUFBUXdCLEVBQVMsRUFBR0EsR0FBVSxLQUFvQjM0RCxHQUFVMjRELENBQU0sR0FBS3hCLEVBQUssR0FBdkMsRUFBRXdCLEVBQVEsQ0FDL0MsR0FBR0EsR0FBVSxLQUFPLElBQUlBLEVBQVMsR0FBTUEsR0FBVSxJQUFPLEVBQUVBLEVBQVEsR0FBRzM0RCxHQUFVMjRELENBQU0sR0FBSyxLQUFNLENBQUV6eEQsR0FBU2l3RCxFQUFLLEdBQUl3QixDQUFNLEVBQUcsS0FBUSxFQUNySSxNQUVELElBQUssU0FDSixHQUFHeGpGLEVBQU1BLEVBQU0sT0FBTyxDQUFDLEVBQUUsQ0FBQyxJQUFpQixRQUFTLE1BSXBELEdBSEFtaUYsR0FBT1osR0FBaUJwckMsRUFBRyxDQUFDLENBQUMsRUFDMUJnc0MsR0FBSyxTQUFVQSxHQUFLLE9BQVMsR0FBTSxPQUFPQSxHQUFLLFFBQy9DQSxHQUFLLFFBQU9BLEdBQUssSUFBTSxTQUFTQSxHQUFLLE1BQU8sRUFBRSxHQUM5QyxDQUFDek4sSUFBV3lOLEdBQUssSUFBTSxHQUFJLENBQzdCek4sR0FBVSxHQUFNcFgsR0FBTUgsR0FDdEIsUUFBUXNtQixHQUFPLEVBQUdBLEdBQU9OLEdBQU0sT0FBUSxFQUFFTSxHQUFTTixHQUFNTSxFQUFJLEdBQUcxMEIsR0FBWW8wQixHQUFNTSxFQUFJLENBQUMsQ0FDdEYsQ0FDRS9PLElBQVMzbEIsR0FBWW96QixFQUFJLEVBQzVCZ0IsR0FBT2hCLEdBQUssTUFBTSxHQUFHZ0IsR0FBTSxNQUFRLEVBQUdoQixHQUN0QyxRQUFRenlILEdBQUksRUFBR0EsR0FBSSxDQUFDeXlILEdBQUssS0FBTSxFQUFFenlILEdBQUd5ekgsR0FBTUEsR0FBTSxNQUFNLEVBQUl0K0MsR0FBSXM5QyxFQUFJLEVBQ2xFLE1BRUQsSUFBSyxhQUNKLEdBQUdoc0MsRUFBRyxDQUFDLElBQUksSUFBSyxNQUNad2xDLEVBQVMsUUFBT0EsRUFBUyxNQUFRLENBQUEsR0FDckMsSUFBSStILEVBQWM3OEMsR0FBWXNQLEVBQUcsQ0FBQyxDQUFDLEVBQy9Cd3RDLEdBQWdDLENBQ25DLEtBQU1ELEVBQVksS0FDbEIsSUFBSy8wQixHQUFTKzBCLEVBQVksU0FBUyxNQUFNLENBQUMsRUFBRyxDQUFDLEVBQUUsRUFBRyxFQUFFLENBQUMsQ0FBQyxDQUMzRCxFQUNNL0gsRUFBUyxPQUFPLE9BQU8sSUFBR2dJLEdBQWEsTUFBTWhJLEVBQVMsT0FBTyxPQUFPLEdBQzdDQSxFQUFTLE1BQU0sS0FBS2dJLEVBQVksRUFDMUQsTUFFRCxJQUFLLFlBQWtDLE1BQ3ZDLElBQUssSUFBa0IsTUFDdkIsSUFBSyxJQUFrQixNQUN2QixJQUFLLElBQWtCLE1BQ3ZCLElBQUssSUFBa0IsTUFDdkIsSUFBSyxLQUFvQixNQUN6QixJQUFLLEtBQW9CLE1BQ3pCLElBQUssS0FBb0IsTUFDekIsSUFBSyxNQUFzQixNQUMzQixJQUFLLE1BQXNCLE1BQzNCLElBQUssT0FBd0IsTUFDN0IsSUFBSyxZQUNKLE1BQ0QsSUFBSyxVQUE4QixNQUNuQyxJQUFLLFNBQTRCLE1BQ2pDLElBQUssT0FDSixHQUFHeHRDLEVBQUcsQ0FBQyxFQUFFLE1BQU0sRUFBRSxJQUFNLEtBQU0sTUFDckJBLEVBQUcsQ0FBQyxJQUFJLElBQUsvb0IsR0FBTTVoQyxFQUFJLE1BQU15M0YsRUFBTTlzQyxFQUFHLEtBQUssRUFDOUM4c0MsRUFBTzlzQyxFQUFHLE1BQVFBLEVBQUcsQ0FBQyxFQUFFLE9BQzdCLE1BQ0QsSUFBSyxXQUNKLEdBQUcsQ0FBQ3ZzRixFQUFLLFdBQVksTUFDckJvNEgsRUFBSyxTQUFXVCxHQUFpQnByQyxFQUFHLENBQUMsQ0FBQyxFQUN0QyxNQUNELElBQUssYUFBb0MsTUFFekMsSUFBSyxTQUNMLElBQUssUUFDTCxJQUFLLGNBQ0wsSUFBSyxVQUNMLElBQUssV0FDTCxJQUFLLFVBQ0wsSUFBSyxXQUNMLElBQUssVUFDTCxJQUFLLGFBQ0wsSUFBSyxZQUNMLElBQUssY0FDTCxJQUFLLFVBQ0wsSUFBSyxXQUNMLElBQUssWUFDTCxJQUFLLGdCQUNMLElBQUssVUFDTCxJQUFLLGdCQUNMLElBQUssYUFDTCxJQUFLLFdBQ0wsSUFBSyxVQUNKLEdBQUdBLEVBQUcsQ0FBQyxFQUFFLE1BQU0sRUFBRSxJQUFNLEtBQU0sTUFDckJBLEVBQUcsQ0FBQyxJQUFJLElBQUtpQyxHQUFjQyxFQUFPZ3JDLEVBQVM3M0YsRUFBSSxNQUFNMDNGLEVBQU0vc0MsRUFBRyxLQUFLLENBQUMsRUFDdkUrc0MsRUFBTy9zQyxFQUFHLE1BQVFBLEVBQUcsQ0FBQyxFQUFFLE9BQzdCLE1BQ0QsSUFBSyxhQUFvQyxNQUV6QyxJQUFLLFNBQ0wsSUFBSyxXQUNKLEdBQUdBLEVBQUcsQ0FBQyxJQUFJLEtBQUssSUFBSTE3RCxFQUFJdWxCLEVBQU0sSUFBRyxHQUFJLENBQUMsSUFBSW0yQyxFQUFHLENBQUMsRUFBRyxNQUFNLElBQUksTUFBTSxjQUFjMTdELEVBQUksS0FBSyxHQUFHLENBQUMsT0FDdkZ1bEIsRUFBTSxLQUFLLENBQUNtMkMsRUFBRyxDQUFDLEVBQUcsRUFBSyxDQUFDLEVBQzlCLE1BRUQsSUFBSyxVQUNKLEdBQUdBLEVBQUcsQ0FBQyxJQUFJLElBQUksQ0FDZCxJQUFJMTdELEVBQUl1bEIsRUFBTSxJQUFHLEdBQUksQ0FBQyxJQUFJbTJDLEVBQUcsQ0FBQyxFQUFHLE1BQU0sSUFBSSxNQUFNLGNBQWMxN0QsRUFBSSxLQUFLLEdBQUcsQ0FBQyxFQUM1RTZuRyxHQUFtQjc2QixFQUFPLEVBQzFCeWQsR0FBUyxLQUFLemQsRUFBTyxDQUN6QixNQUNJem5ELEVBQU0sS0FBSyxDQUFDbTJDLEVBQUcsQ0FBQyxFQUFHLEVBQUssQ0FBQyxFQUN6QjE3RCxFQUFNOG1HLEdBQWlCcHJDLEVBQUcsQ0FBQyxDQUFDLEVBQzVCc1IsR0FBVyxDQUFDLEVBQUVodEUsRUFBSSxNQUFNLEVBRXpCLE1BRUQsSUFBSyxhQUNKLEdBQUcwN0QsRUFBRyxDQUFDLElBQUksS0FBSyxJQUFJMTdELEVBQUl1bEIsRUFBTSxJQUFHLEdBQUksQ0FBQyxJQUFJbTJDLEVBQUcsQ0FBQyxFQUFHLE1BQU0sSUFBSSxNQUFNLGNBQWMxN0QsRUFBSSxLQUFLLEdBQUcsQ0FBQyxVQUNwRjA3RCxFQUFHLENBQUMsRUFBRSxPQUFPQSxFQUFHLENBQUMsRUFBRSxPQUFPLENBQUMsSUFBTSxJQUFLLENBQzdDLElBQUl5dEMsR0FBYXJDLEdBQWlCcHJDLEVBQUcsQ0FBQyxDQUFDLEVBQ3ZDMHNDLEVBQVMsYUFBYSxFQUFJLENBQUUsSUFBSWwwQixHQUFTaTFCLEdBQVcsS0FBSyxFQUFFLFFBQVEsTUFBTSxFQUFFLENBQUMsRUFDNUU1akYsRUFBTSxLQUFLLENBQUNtMkMsRUFBRyxDQUFDLEVBQUcsRUFBSSxDQUFDLENBQ3hCLENBQ0QsTUFFRCxJQUFLLE9BQXdCLE1BRTdCLElBQUssaUJBQ0osR0FBR0EsRUFBRyxDQUFDLElBQUksS0FDVixJQUFJMTdELEVBQUl1bEIsRUFBTSxJQUFHLEdBQUksQ0FBQyxJQUFJbTJDLEVBQUcsQ0FBQyxFQUFHLE1BQU0sSUFBSSxNQUFNLGNBQWMxN0QsRUFBSSxLQUFLLEdBQUcsQ0FBQyxPQUV6RTA3RCxFQUFHLENBQUMsRUFBRSxPQUFPQSxFQUFHLENBQUMsRUFBRSxPQUFPLENBQUMsSUFBTSxLQUFLbjJDLEVBQU0sS0FBSyxDQUFDbTJDLEVBQUcsQ0FBQyxFQUFHLEVBQUksQ0FBQyxFQUVsRSxNQUVELElBQUssZ0JBQ0osTUFDRCxJQUFLLG1CQUNMLElBQUsscUJBQ0wsSUFBSywyQkFDTCxJQUFLLHlCQUNMLElBQUssYUFDTCxJQUFLLGFBQ0wsSUFBSyxRQUNMLElBQUssVUFDTCxJQUFLLGFBQ0wsSUFBSyxhQUNMLElBQUssVUFDTCxJQUFLLFNBQ0wsSUFBSyx3QkFDTCxJQUFLLGVBQ0wsSUFBSyxZQUNMLElBQUssZ0JBQ0wsSUFBSyxrQkFDTCxJQUFLLG1CQUNKLEdBQUdBLEVBQUcsQ0FBQyxJQUFJLEtBQUssSUFBSTE3RCxFQUFJdWxCLEVBQU0sSUFBRyxHQUFJLENBQUMsSUFBSW0yQyxFQUFHLENBQUMsRUFBRyxNQUFNLElBQUksTUFBTSxjQUFjMTdELEVBQUksS0FBSyxHQUFHLENBQUMsT0FDcEYwN0QsRUFBRyxDQUFDLEVBQUUsT0FBT0EsRUFBRyxDQUFDLEVBQUUsT0FBTyxDQUFDLElBQU0sS0FBS24yQyxFQUFNLEtBQUssQ0FBQ20yQyxFQUFHLENBQUMsRUFBRyxFQUFJLENBQUMsRUFDdEUsTUFFRCxJQUFLLE9BQXdCLE1BRTdCLFFBSUMsR0FGR24yQyxFQUFNLFFBQVUsR0FBS20yQyxFQUFHLENBQUMsR0FBSyxZQUU5Qm4yQyxFQUFNLFFBQVUsR0FBS20yQyxFQUFHLENBQUMsR0FBSyxNQUFnQixPQUFPMHRDLEdBQVdyNEYsRUFBSzVoQyxDQUFJLEVBRTVFLElBQUk4dUUsR0FBTyxHQUNYLE9BQU8xNEIsRUFBTUEsRUFBTSxPQUFPLENBQUMsRUFBRSxDQUFDLEVBQUMsQ0FFOUIsSUFBSyx5QkFBNEQsT0FBT20yQyxFQUFHLENBQUMsRUFBQyxDQUM1RSxJQUFLLFdBQWdDLE1BQ3JDLElBQUssNEJBQWtFLE1BQ3ZFLElBQUsscUJBQW9ELE1BQ3pELElBQUssdUJBQXdELE1BQzdELElBQUssU0FBNEIsTUFDakMsSUFBSyxRQUEwQixNQUMvQixJQUFLLFFBQTBCLE1BQy9CLElBQUssTUFBc0IsTUFDM0IsSUFBSyxtQkFBZ0QsTUFDckQsSUFBSyxzQkFBc0QsTUFDM0QsUUFBU3pkLEdBQU8sRUFDckIsQ0FBTSxNQUdGLElBQUssbUJBQWdELE9BQU95ZCxFQUFHLENBQUMsRUFBQyxDQUNoRSxJQUFLLFVBQThCLE1BQ25DLElBQUssaUJBQTRDLE1BQ2pELElBQUsscUJBQW9ELE1BQ3pELElBQUssUUFBMEIsTUFDL0IsSUFBSyxVQUE4QixNQUNuQyxJQUFLLFlBQWtDLE1BQ3ZDLElBQUssV0FBZ0MsTUFDckMsSUFBSyxrQkFBOEMsTUFDbkQsUUFBU3pkLEdBQU8sRUFDckIsQ0FBTSxNQUdGLElBQUssZ0JBQTBDLE9BQU95ZCxFQUFHLENBQUMsRUFBQyxDQUMxRCxJQUFLLFdBRUp3bEMsRUFBUyxRQUFRLFNBQVcsR0FDNUIsTUFDRCxJQUFLLGVBQXdDLE1BQzdDLElBQUssY0FBc0MsTUFDM0MsSUFBSyxhQUFvQyxNQUN6QyxJQUFLLGFBQW9DLE1BQ3pDLElBQUssV0FBZ0MsTUFDckMsSUFBSyxtQkFBZ0QsTUFDckQsSUFBSyxnQkFBMEMsTUFDL0MsSUFBSyxpQkFBNEMsTUFDakQsSUFBSyxjQUFzQyxNQUMzQyxJQUFLLGtCQUE4QyxNQUNuRCxJQUFLLG9CQUFrRCxNQUN2RCxJQUFLLFVBQThCLE1BQ25DLElBQUssWUFBa0MsTUFDdkMsSUFBSyxhQUFvQyxNQUN6QyxJQUFLLGtCQUE4QyxNQUNuRCxJQUFLLGlCQUE0QyxNQUNqRCxJQUFLLE1BQXNCLE1BQzNCLElBQUsseUJBQTRELE1BQ2pFLElBQUssc0JBQXNELE1BQzNELElBQUssWUFBa0MsTUFDdkMsSUFBSyxnQkFBMEMsTUFDL0MsSUFBSyxZQUFrQyxNQUN2QyxJQUFLLE9BQXdCLE1BQzdCLElBQUssTUFBc0IsTUFDM0IsSUFBSyxRQUEwQixNQUMvQixJQUFLLGlCQUE0QyxNQUNqRCxJQUFLLGNBQXNDLE1BQzNDLElBQUssV0FBZ0MsTUFDckMsSUFBSyxnQkFBMEMsTUFDL0MsSUFBSyxNQUFzQixNQUMzQixJQUFLLGFBQW9DLE1BQ3pDLElBQUssVUFBOEIsTUFDbkMsSUFBSyxXQUFnQyxNQUNyQyxJQUFLLFVBQThCLE1BQ25DLElBQUssYUFBb0MsTUFDekMsSUFBSyxVQUE4QixNQUNuQyxJQUFLLFFBQTBCLE1BQy9CLElBQUssT0FBd0IsTUFDN0IsSUFBSyxNQUFzQixNQUMzQixJQUFLLGdCQUEwQyxNQUMvQyxJQUFLLGlCQUE0QyxNQUNqRCxJQUFLLDJCQUFnRSxNQUNyRSxJQUFLLFNBQTRCLE1BQ2pDLElBQUssY0FBc0MsTUFDM0MsSUFBSyxxQkFBb0QsTUFDekQsUUFBU2pqRCxHQUFPLEVBQ3JCLENBQU0sTUFHRixJQUFLLGtCQUE4QyxPQUFPeWQsRUFBRyxDQUFDLEVBQUMsQ0FDOUQsSUFBSyxhQUFvQyxNQUN6QyxJQUFLLFNBQTRCLE1BQ2pDLElBQUssUUFBMEIsTUFDL0IsUUFBU3pkLEdBQU8sRUFDckIsQ0FBTSxNQUdGLElBQUssbUJBQWdELE9BQU95ZCxFQUFHLENBQUMsRUFBQyxDQUNoRSxJQUFLLFVBQ0osR0FBR0EsRUFBRyxDQUFDLEVBQUUsTUFBTSxFQUFFLElBQU0sS0FDbEIsR0FBR0EsRUFBRyxDQUFDLElBQUksSUFBSyxPQUFPM3FELEVBQUksTUFBTTAzRixFQUFNL3NDLEVBQUcsS0FBSyxFQUFDLENBQ3BELElBQUssY0FBZWl0QyxFQUFRLE9BQVMsRUFBRyxNQUN4QyxJQUFLLGtCQUFtQkEsRUFBUSxPQUFTLEVBQUcsS0FDNUMsTUFDSUYsRUFBTy9zQyxFQUFHLE1BQVFBLEVBQUcsQ0FBQyxFQUFFLE9BQzdCLE1BQ0QsSUFBSyxTQUNBMHNDLEVBQVMsVUFBVSxHQUFHbFIsR0FBZ0JrUixFQUFTLFVBQVUsRUFBRSxHQUFJLE1BQU0sRUFDckUsTUFBTSxDQUFDaDhDLEdBQVlzUCxFQUFHLENBQUMsQ0FBQyxFQUFFLE1BQU0sSUFBRzBzQyxFQUFTLFVBQVUsRUFBRSxPQUFTLENBQUNoOEMsR0FBWXNQLEVBQUcsQ0FBQyxDQUFDLEVBQUUsUUFDekYsTUFDRCxJQUFLLFNBQ0Ewc0MsRUFBUyxVQUFVLEdBQUdsUixHQUFnQmtSLEVBQVMsVUFBVSxFQUFFLEdBQUksTUFBTSxFQUNyRSxNQUFNLENBQUNoOEMsR0FBWXNQLEVBQUcsQ0FBQyxDQUFDLEVBQUUsTUFBTSxJQUFHMHNDLEVBQVMsVUFBVSxFQUFFLE9BQVMsQ0FBQ2g4QyxHQUFZc1AsRUFBRyxDQUFDLENBQUMsRUFBRSxRQUN6RixNQUNELElBQUssY0FDSixJQUFJMnRDLEdBQWNqOUMsR0FBWXNQLEVBQUcsQ0FBQyxDQUFDLEVBQy9CMHNDLEVBQVMsVUFBVSxHQUFHbFIsR0FBZ0JrUixFQUFTLFVBQVUsRUFBRSxHQUFHLE1BQU0sRUFDcEUsTUFBTSxDQUFDaUIsR0FBWSxHQUFHLElBQUdqQixFQUFTLFVBQVUsRUFBRSxJQUFNLENBQUNpQixHQUFZLEtBQ2pFLE1BQU0sQ0FBQ0EsR0FBWSxJQUFJLElBQUdqQixFQUFTLFVBQVUsRUFBRSxLQUFPLENBQUNpQixHQUFZLE1BQ25FLE1BQU0sQ0FBQ0EsR0FBWSxLQUFLLElBQUdqQixFQUFTLFVBQVUsRUFBRSxNQUFRLENBQUNpQixHQUFZLE9BQ3JFLE1BQU0sQ0FBQ0EsR0FBWSxNQUFNLElBQUdqQixFQUFTLFVBQVUsRUFBRSxPQUFTLENBQUNpQixHQUFZLFFBQzNFLE1BQ0QsSUFBSyxxQkFDQW5JLEVBQVMsUUFBT0EsRUFBUyxNQUFRLENBQUEsR0FDakNBLEVBQVMsTUFBTSxDQUFDLElBQUdBLEVBQVMsTUFBTSxDQUFDLEVBQUksSUFDM0NBLEVBQVMsTUFBTSxDQUFDLEVBQUUsSUFBTSxHQUN4QixNQUVELElBQUssY0FBc0MsTUFDM0MsSUFBSyxnQkFBMEMsTUFFL0MsSUFBSyxrQkFDTCxJQUFLLGdCQUNKLE1BRUQsSUFBSyx3QkFDSixNQUVELElBQUssWUFBa0MsTUFDdkMsSUFBSyxZQUFrQyxNQUN2QyxJQUFLLG1CQUFnRCxNQUNyRCxJQUFLLHNCQUFzRCxNQUUzRCxJQUFLLFdBQWdDLE1BQ3JDLElBQUssUUFBMEIsTUFDL0IsSUFBSyxjQUFzQyxNQUMzQyxJQUFLLFFBQTBCLE1BQy9CLElBQUssUUFBMEIsTUFDL0IsSUFBSyxPQUF3QixNQUM3QixJQUFLLFNBQTRCLE1BQ2pDLElBQUssU0FBNEIsTUFDakMsSUFBSyxZQUFrQyxNQUN2QyxJQUFLLFdBQWdDLE1BQ3JDLElBQUssaUJBQTRDLE1BQ2pELElBQUssa0JBQThDLE1BQ25ELElBQUssbUJBQWdELE1BQ3JELElBQUssbUJBQWdELE1BQ3JELElBQUssdUJBQXdELE1BQzdELElBQUsscUJBQW9ELE1BQ3pELElBQUssaUJBQTRDLE1BQ2pELElBQUssYUFBb0MsTUFDekMsSUFBSyxnQkFBMEMsTUFDL0MsSUFBSyxvQkFBa0QsTUFDdkQsSUFBSyxZQUFrQyxNQUN2QyxJQUFLLGlCQUE0QyxNQUNqRCxJQUFLLGlCQUE0QyxNQUNqRCxJQUFLLGlCQUE0QyxNQUNqRCxJQUFLLGdCQUEwQyxNQUMvQyxJQUFLLFdBQWdDLE1BQ3JDLElBQUssV0FBZ0MsTUFDckMsSUFBSyxZQUFrQyxNQUN2QyxJQUFLLGlCQUE0QyxNQUNqRCxJQUFLLE9BQXdCLE1BQzdCLElBQUssY0FBc0MsTUFDM0MsSUFBSyxZQUFrQyxNQUN2QyxJQUFLLFlBQWtDLE1BQ3ZDLElBQUssY0FBc0MsTUFDM0MsSUFBSyxrQkFBOEMsTUFDbkQsSUFBSyxrQkFBOEMsTUFDbkQsSUFBSyxrQkFBOEMsTUFDbkQsSUFBSyxrQkFBOEMsTUFDbkQsSUFBSyx3QkFBMEQsTUFDL0QsSUFBSyxtQkFBZ0QsTUFDckQsSUFBSyxnQkFBMEMsTUFDL0MsSUFBSyxnQkFBMEMsTUFDL0MsSUFBSywyQkFDQWtILEVBQVMsVUFBVSxJQUFHQSxFQUFTLFVBQVUsRUFBSSxJQUNqREEsRUFBUyxVQUFVLEVBQUUsTUFBUSxHQUM3QixNQUNELElBQUssZ0JBQTBDLE1BQy9DLElBQUssdUJBQXdELE1BQzdELElBQUsscUJBQW9ELE1BQ3pELElBQUssOEJBQ0FBLEVBQVMsVUFBVSxJQUFHQSxFQUFTLFVBQVUsRUFBSSxJQUNqREEsRUFBUyxVQUFVLEVBQUUsS0FBTyxHQUM1QixNQUNELElBQUssZ0JBQTBDLE1BQy9DLElBQUssb0JBQWtELE1BQ3ZELElBQUssbUJBQWdELE1BQ3JELElBQUssaUJBQTRDLE1BQ2pELElBQUssc0JBQXNELE1BQzNELElBQUssZ0JBQTBDLE1BQy9DLElBQUssc0JBQXNELE1BQzNELElBQUssYUFBb0MsTUFDekMsSUFBSyxnQkFBMEMsTUFDL0MsSUFBSyxZQUFrQyxNQUN2QyxJQUFLLGtCQUE4QyxNQUNuRCxRQUFTbnFELEdBQU8sRUFDckIsQ0FBTSxNQUdGLElBQUssYUFBb0MsSUFBSyxhQUFvQyxPQUFPeWQsRUFBRyxDQUFDLEVBQUMsQ0FDN0YsSUFBSyx1QkFBd0QsTUFDN0QsSUFBSyw0QkFBa0UsTUFDdkUsSUFBSyxtQkFBZ0QsTUFDckQsSUFBSyxXQUFnQyxNQUNyQyxJQUFLLGFBQW9DLE1BQ3pDLElBQUssY0FBc0MsTUFDM0MsSUFBSyxhQUFvQyxNQUN6QyxJQUFLLHlCQUE0RCxNQUNqRSxJQUFLLG1CQUFnRCxNQUNyRCxJQUFLLFdBQWdDLE1BQ3JDLElBQUssWUFBa0MsTUFDdkMsSUFBSyxXQUFnQyxNQUNyQyxJQUFLLFlBQWtDLE1BQ3ZDLElBQUssYUFBb0MsTUFDekMsSUFBSyxjQUFzQyxNQUMzQyxJQUFLLGNBQXNDLE1BQzNDLElBQUssYUFBb0MsTUFDekMsSUFBSyxtQkFBZ0QsTUFDckQsSUFBSyxPQUF3QixNQUM3QixJQUFLLFdBQWdDLE1BQ3JDLElBQUssV0FBZ0MsTUFDckMsSUFBSyxhQUFvQyxNQUN6QyxJQUFLLHlCQUE0RCxNQUNqRSxJQUFLLFdBQWdDLE1BQ3JDLElBQUssWUFBa0MsTUFDdkMsSUFBSyxnQkFBMEMsTUFDL0MsSUFBSyxhQUFvQyxNQUN6QyxJQUFLLHNCQUFzRCxNQUMzRCxJQUFLLFNBQTRCLE1BQ2pDLElBQUssV0FBZ0MsTUFDckMsSUFBSyxZQUFrQyxNQUN2QyxJQUFLLGdCQUEwQyxNQUMvQyxJQUFLLFdBQWdDLE1BQ3JDLElBQUssb0JBQWtELE1BQ3ZELElBQUssaUJBQTRDLE1BQ2pELElBQUssY0FBc0MsTUFDM0MsSUFBSyxpQkFBNEMsTUFDakQsSUFBSyxjQUFzQyxNQUMzQyxJQUFLLGNBQXNDLE1BQzNDLElBQUssa0JBQThDLE1BQ25ELElBQUsscUJBQW9ELE1BQ3pELElBQUssb0JBQWtELE1BQ3ZELElBQUssdUJBQXdELE1BQzdELElBQUssd0JBQTBELE1BQy9ELElBQUssY0FBc0MsTUFDM0MsUUFBU3pkLEdBQU8sRUFDckIsQ0FBTSxNQUdGLElBQUssYUFBb0MsT0FBT3lkLEVBQUcsQ0FBQyxFQUFDLENBQ3BELElBQUssWUFBa0MsTUFDdkMsSUFBSyxXQUFnQyxNQUNyQyxJQUFLLFlBQWtDLE1BQ3ZDLElBQUssV0FBZ0MsTUFDckMsSUFBSyxXQUFnQyxNQUNyQyxJQUFLLFNBQTRCLE1BQ2pDLElBQUssU0FBNEIsTUFDakMsUUFBU3pkLEdBQU8sRUFDckIsQ0FBTSxNQUdGLElBQUssYUFBb0MsT0FBT3lkLEVBQUcsQ0FBQyxFQUFDLENBQ3BELElBQUssbUJBQWdELE1BQ3JELElBQUssc0JBQXNELE1BQzNELElBQUssZ0JBQTBDLE1BQy9DLElBQUssZUFBd0MsTUFDN0MsUUFBU3pkLEdBQU8sRUFDckIsQ0FBTSxNQUdGLElBQUssYUFBb0MsT0FBT3lkLEVBQUcsQ0FBQyxFQUFDLENBQ3BELElBQUssS0FBb0IsTUFDekIsSUFBSyxpQkFBNEMsTUFDakQsSUFBSyxvQkFBa0QsTUFDdkQsSUFBSyxjQUFzQyxNQUMzQyxJQUFLLFlBQWtDLE1BQ3ZDLElBQUsscUJBQW9ELE1BQ3pELElBQUssaUJBQTRDLE1BQ2pELElBQUssWUFBa0MsTUFDdkMsSUFBSyxhQUFvQyxNQUN6QyxJQUFLLGFBQW9DLE1BQ3pDLElBQUssY0FBc0MsTUFDM0MsSUFBSyxjQUFzQyxNQUMzQyxJQUFLLFdBQWdDLE1BQ3JDLElBQUssU0FBNEIsTUFDakMsSUFBSyxhQUFvQyxNQUN6QyxJQUFLLGlCQUE0QyxNQUNqRCxJQUFLLHFCQUFvRCxNQUN6RCxJQUFLLHFCQUFvRCxNQUN6RCxJQUFLLFNBQTRCLE1BQ2pDLElBQUssU0FBNEIsTUFDakMsSUFBSyxVQUE4QixNQUNuQyxJQUFLLG9CQUFrRCxNQUN2RCxJQUFLLHVCQUF3RCxNQUM3RCxJQUFLLGlCQUE0QyxNQUNqRCxJQUFLLFlBQWtDLE1BQ3ZDLElBQUssYUFBb0MsTUFDekMsSUFBSyxNQUFzQixNQUMzQixJQUFLLFFBQTBCLE1BQy9CLElBQUssaUJBQTRDLE1BQ2pELElBQUssa0JBQThDLE1BQ25ELElBQUsscUJBQW9ELE1BQ3pELFFBQVN6ZCxHQUFPLEVBQ3JCLENBQU0sTUFFRixJQUFLLGlCQUNMLE9BQU95ZCxFQUFHLENBQUMsRUFBQyxDQUNYLElBQUssUUFBMEIsTUFFL0IsSUFBSyxPQUF3QixNQUM3QixJQUFLLE1BQXNCLE1BQzNCLElBQUssTUFBc0IsTUFDM0IsSUFBSyxPQUF3QixNQUM3QixJQUFLLGFBQW9DLE1BQ3pDLElBQUssUUFBMEIsTUFDL0IsSUFBSyxnQkFBMEMsTUFDL0MsSUFBSyxRQUEwQixNQUMvQixJQUFLLGFBQW9DLE1BQ3pDLElBQUssZUFBd0MsTUFDN0MsSUFBSyxhQUFvQyxNQUN6QyxJQUFLLGVBQXdDLE1BQzdDLElBQUssYUFBb0MsTUFDekMsSUFBSyxZQUFrQyxNQUN2QyxJQUFLLFlBQWtDLE1BQ3ZDLElBQUssWUFBa0MsTUFDdkMsSUFBSyxZQUFrQyxNQUN2QyxJQUFLLFdBQWdDLE1BQ3JDLElBQUssU0FBNEIsTUFDakMsSUFBSyxTQUE0QixNQUNqQyxJQUFLLFNBQTRCLE1BRWpDLElBQUssZ0JBQTBDLE1BQy9DLFFBQVN6ZCxHQUFPLEVBQ3JCLENBQU0sTUFFRixJQUFLLFVBQ0wsSUFBSyx3QkFDTCxPQUFPeWQsRUFBRyxDQUFDLEVBQUMsQ0FDWCxJQUFLLFFBQTBCLE1BQy9CLElBQUssT0FBd0IsTUFDN0IsSUFBSyxNQUFzQixNQUMzQixJQUFLLE1BQXNCLE1BQzNCLElBQUssT0FBd0IsTUFDN0IsSUFBSyxhQUFvQyxNQUN6QyxJQUFLLFFBQTBCLE1BQy9CLElBQUssZ0JBQTBDLE1BQy9DLElBQUssUUFBMEIsTUFDL0IsSUFBSyxhQUFvQyxNQUN6QyxJQUFLLGVBQXdDLE1BQzdDLElBQUssYUFBb0MsTUFDekMsSUFBSyxnQkFBMEMsTUFDL0MsSUFBSyxlQUF3QyxNQUM3QyxJQUFLLGFBQW9DLE1BQ3pDLElBQUssWUFBa0MsTUFDdkMsSUFBSyxZQUFrQyxNQUN2QyxJQUFLLFlBQWtDLE1BQ3ZDLElBQUssWUFBa0MsTUFDdkMsSUFBSyxXQUFnQyxNQUNyQyxJQUFLLFNBQTRCLE1BQ2pDLElBQUssU0FBNEIsTUFDakMsSUFBSyxTQUE0QixNQUNqQyxRQUFTemQsR0FBTyxFQUNyQixDQUFNLE1BR0YsSUFBSyxVQUE4QixJQUFLLFNBQTRCLElBQUssT0FBd0IsT0FBT3lkLEVBQUcsQ0FBQyxFQUFDLENBQzVHLElBQUssTUFBc0IsTUFDM0IsSUFBSyxRQUEwQixNQUMvQixJQUFLLFFBQTBCLE1BQy9CLElBQUssUUFBMEIsTUFDL0IsSUFBSyxRQUEwQixNQUMvQixJQUFLLFVBQThCLE1BQ25DLElBQUssV0FBZ0MsTUFDckMsSUFBSyxZQUFrQyxNQUN2QyxJQUFLLGNBQXNDLE1BQzNDLElBQUssZ0JBQTBDLE1BRS9DLElBQUssU0FDTCxJQUFLLFVBQ0wsSUFBSyxjQUNMLElBQUssV0FDTCxJQUFLLE1BQ0wsSUFBSyxZQUNMLElBQUssVUFBOEIsTUFFbkMsSUFBSyxNQUFzQixNQUMzQixRQUFTemQsR0FBTyxFQUNyQixDQUFNLE1BR0YsSUFBSyxZQUFrQyxNQUV2QyxRQUFTQSxHQUFPLEdBQU8sS0FDdkIsQ0FHRCxHQUZHQSxJQUVBeWQsRUFBRyxDQUFDLEVBQUUsTUFBTSxVQUFVLEVBQUcsTUFDNUIsR0FBRyxDQUFDbjJDLEVBQU1BLEVBQU0sT0FBTyxDQUFDLEVBQUUsQ0FBQyxFQUFHLEtBQU0scUJBQXVCbTJDLEVBQUcsQ0FBQyxFQUFJLElBQU1uMkMsRUFBTSxLQUFLLEdBQUcsRUFDdkYsR0FBR0EsRUFBTUEsRUFBTSxPQUFPLENBQUMsRUFBRSxDQUFDLElBQWtDLDJCQUE0QixDQUN2RixHQUFHbTJDLEVBQUcsQ0FBQyxFQUFFLE1BQU0sRUFBRSxJQUFNLEtBQU0sTUFDckJBLEVBQUcsQ0FBQyxJQUFJLElBQUt5ckMsR0FBa0JwcEMsRUFBVzZxQyxFQUFTNXpILEVBQUkrN0IsRUFBSSxNQUFNMDNGLEVBQU0vc0MsRUFBRyxLQUFLLENBQUMsR0FDakYxbUYsRUFBSzBtRixFQUFJK3NDLEVBQU8vc0MsRUFBRyxNQUFRQSxFQUFHLENBQUMsRUFBRSxRQUN4QyxLQUNBLENBQ0QsR0FBR3ZzRixFQUFLLElBQUssS0FBTSxxQkFBdUJ1c0YsRUFBRyxDQUFDLEVBQUksSUFBTW4yQyxFQUFNLEtBQUssR0FBRyxDQUN2RSxDQUNELElBQUkwcEIsR0FBTyxDQUFBLEVBQ1gsTUFBRyxDQUFDOS9ELEVBQUssWUFBYyxDQUFDQSxFQUFLLFlBQVc4L0QsR0FBSSxPQUFTcWxCLEdBQ3JEcmxCLEdBQUksV0FBYWs1RCxFQUNqQmw1RCxHQUFJLFNBQVdpeUQsRUFDZmp5RCxHQUFJLElBQU1tYixHQUFJaGEsRUFBUyxFQUN2Qm5CLEdBQUksTUFBUTJ1QixFQUNaM3VCLEdBQUksVUFBWTh1QixFQUNUOXVCLEVBQ1IsQ0FFQSxTQUFTcTZELEdBQVc3aUgsRUFBMEJ0WCxFQUFtQixDQUVoRSxPQURBbzZILEdBQWNwNkgsRUFBS0EsR0FBTSxDQUFBLENBQUUsRUFDcEJBLEVBQUssTUFBTSxTQUFRLENBQ3pCLElBQUssU0FBVSxPQUFPMjRILEdBQWU3NUQsR0FBY3huRCxDQUFJLEVBQUd0WCxDQUFJLEVBQzlELElBQUssU0FBVSxJQUFLLFNBQVUsSUFBSyxPQUFRLE9BQU8yNEgsR0FBZXJoSCxFQUFNdFgsQ0FBSSxFQUMzRSxJQUFLLFFBQVMsT0FBTzI0SCxHQUFlcDVELEdBQUlqb0QsQ0FBSSxFQUFHdFgsQ0FBSSxDQUNuRCxDQUVGLENBR0EsU0FBU3E2SCxHQUFpQm5pQyxFQUFpQmw0RixFQUFpQixDQUMzRCxJQUFJOEosRUFBc0IsQ0FBQSxFQUUxQixPQUFHb3VGLEVBQUcsT0FBT3B1RixFQUFFLEtBQUs0a0YsR0FBb0J3SixFQUFHLE1BQU9sNEYsQ0FBSSxDQUFDLEVBRXBEazRGLEVBQUcsV0FBV3B1RixFQUFFLEtBQUs2a0YsR0FBcUJ1SixFQUFHLE1BQU9BLEVBQUcsU0FBZSxDQUFDLEVBQ25FcHVGLEVBQUUsS0FBSyxFQUFFLENBQ2pCLENBRUEsU0FBU3d3SCxJQUF5QyxDQUdqRCxNQUFPLEVBQ1IsQ0FFQSxTQUFTQyxHQUFlcmlDLEVBQUlsNEYsRUFBaUIsQ0FFNUMsSUFBSXcwRyxFQUEyQixDQUFDLGlFQUFpRSxFQUNqRyxPQUFBeDBHLEVBQUssUUFBUSxRQUFRLFNBQVNtMUcsRUFBSXgvRixFQUFJLENBQ3JDLElBQUlxNEQsRUFBNEIsQ0FBQSxFQUNoQ0EsRUFBUSxLQUFLMlIsR0FBVSxlQUFnQixLQUFNLENBQUMsWUFBYTdCLEdBQVU3YyxHQUFVazBDLEVBQUcsUUFBUSxDQUFDLENBQUMsQ0FBQyxDQUFDLEVBRTlGLElBQUlyckcsRUFBVyxDQUFDLFFBQVMsS0FBTyxHQUFHNkwsRUFBRyxFQUN0QzYrRixFQUFPLEtBQUs3MEIsR0FBVSxRQUFTM1IsRUFBUSxLQUFLLEVBQUUsRUFBR2xrRSxDQUFDLENBQUMsQ0FDckQsQ0FBRSxFQUNNNjFFLEdBQVUsU0FBVTYwQixFQUFPLEtBQUssRUFBRSxDQUFDLENBQzNDLENBQ0EsU0FBU2dtQixHQUFnQnR4SCxFQUFHLENBQUUsT0FBT3kyRSxHQUFVLGFBQWMsS0FBTSxDQUFDLFVBQVd6MkUsRUFBRSxLQUFNLGNBQWMsSUFBTXU4RixHQUFTdjhGLEVBQUUsSUFBSyxDQUFDLEVBQUUsRUFBRSxFQUFFLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBSSxDQUMxSSxTQUFTdXhILEdBQWlCdmlDLEVBQTJCLENBQ3BELEdBQUcsR0FBR0EsR0FBSSxDQUFFLEdBQUUsVUFBVSxJQUFJLE1BQU8sTUFBTyxHQUkxQyxRQUZJa3pCLEVBQXVCbHpCLEVBQUcsU0FBUyxNQUNuQ3A0QixFQUF3QixDQUFBLEVBQ3BCaDZELEVBQUksRUFBR0EsRUFBSXNsSCxFQUFNLE9BQVEsRUFBRXRsSCxFQUFHLENBQ3JDLElBQUlvRCxFQUFJa2lILEVBQU10bEgsQ0FBQyxFQUNab0QsRUFBRSxPQUFTLE9BQ1hBLEVBQUUsS0FBSyxNQUFNLFVBQVUsR0FDMUI0MkQsRUFBSSxLQUFLMDZELEdBQWdCdHhILENBQUMsQ0FBQyxFQUMzQixDQUNELE9BQU95MkUsR0FBVSxRQUFTN2YsRUFBSSxLQUFLLEVBQUUsQ0FBQyxDQUN2QyxDQUNBLFNBQVM0NkQsR0FBb0JuMUMsRUFBa0J2bEYsRUFBTStsRCxFQUFnQm15QyxFQUE0QixDQUVoRyxHQURHLENBQUMzUyxHQUNELEdBQUcyUyxHQUFJLENBQUUsR0FBRSxVQUFVLElBQUksTUFBTyxNQUFPLEdBSTFDLFFBRklrekIsRUFBdUJsekIsRUFBRyxTQUFTLE1BQ25DcDRCLEVBQXdCLENBQUEsRUFDcEJoNkQsRUFBSSxFQUFHQSxFQUFJc2xILEVBQU0sT0FBUSxFQUFFdGxILEVBQUcsQ0FDckMsSUFBSW9ELEVBQUlraUgsRUFBTXRsSCxDQUFDLEVBQ1pvRCxFQUFFLE9BQVM2OEMsSUFJWDc4QyxFQUFFLEtBQUssTUFBTSxVQUFVLEdBQzFCNDJELEVBQUksS0FBSzA2RCxHQUFnQnR4SCxDQUFDLENBQUMsRUFDM0IsQ0FDRCxPQUFPNDJELEVBQUksS0FBSyxFQUFFLENBQ25CLENBRUEsU0FBUzY2RCxHQUFxQnAxQyxFQUFrQnZsRixFQUFNK2xELEVBQWdCbXlDLEVBQTRCLENBQ2pHLEdBQUcsQ0FBQzNTLEVBQUksTUFBTyxHQUNmLElBQUl6N0UsRUFBc0IsQ0FBQSxFQTBDMUIsR0ExQkd5N0UsRUFBRyxVQUFVLElBQ2Z6N0UsRUFBRSxLQUFLLGFBQWEsRUFDakJ5N0UsRUFBRyxVQUFVLEVBQUUsUUFBUXo3RSxFQUFFLEtBQUs2MUUsR0FBVSxTQUFVLEtBQU0sQ0FBQyxXQUFXNEYsRUFBRyxVQUFVLEVBQUUsTUFBTSxDQUFDLENBQUMsRUFDM0ZBLEVBQUcsVUFBVSxFQUFFLFFBQVF6N0UsRUFBRSxLQUFLNjFFLEdBQVUsU0FBVSxLQUFNLENBQUMsV0FBVzRGLEVBQUcsVUFBVSxFQUFFLE1BQU0sQ0FBQyxDQUFDLEVBQzlGejdFLEVBQUUsS0FBSzYxRSxHQUFVLGNBQWUsS0FBTSxDQUNyQyxXQUFZNEYsRUFBRyxVQUFVLEVBQUUsUUFBVSxPQUNyQyxTQUFVQSxFQUFHLFVBQVUsRUFBRSxNQUFRLE1BQ2pDLFVBQVdBLEVBQUcsVUFBVSxFQUFFLE9BQVMsTUFDbkMsUUFBU0EsRUFBRyxVQUFVLEVBQUUsS0FBTyxNQUMvQixDQUFBLENBQUMsRUFDRno3RSxFQUFFLEtBQUssY0FBYyxHQWdCbkJvdUYsR0FBTUEsRUFBRyxVQUFZQSxFQUFHLFNBQVMsUUFBVUEsRUFBRyxTQUFTLE9BQU9ueUMsQ0FBRyxFQUVuRSxHQUFHbXlDLEVBQUcsU0FBUyxPQUFPbnlDLENBQUcsRUFBRSxPQUFRajhDLEVBQUUsS0FBSzYxRSxHQUFVLFVBQVl1WSxFQUFHLFNBQVMsT0FBT255QyxDQUFHLEVBQUUsUUFBVSxFQUFJLGNBQWdCLGtCQUFvQixDQUFFLENBQUEsQ0FBQyxNQUN4SSxDQUVKLFFBQVEsRUFBSSxFQUFHLEVBQUlBLEdBQWEsRUFBQW15QyxFQUFHLFNBQVMsT0FBTyxDQUFDLEdBQUssQ0FBQ0EsRUFBRyxTQUFTLE9BQU8sQ0FBQyxFQUFFLFFBQXhELEVBQUUsRUFBRyxDQUMxQixHQUFLbnlDLEdBQUtqOEMsRUFBRSxLQUFLLGFBQWEsQ0FDakMsQ0FxREYsVUFoRE9vdUYsR0FBSSxDQUFBLEdBQUksVUFBVSxDQUFBLEdBQUksT0FBTyxDQUFFLEdBQUUsQ0FBQyxHQUFHLENBQUEsR0FBSSxLQUFLcHVGLEVBQUUsS0FBSyx1QkFBdUIsRUEyQmhGeTdFLEVBQUcsVUFBVSxJQUNmejdFLEVBQUUsS0FBSzIxRSxHQUFTLGtCQUFtQixNQUFNLENBQUMsRUFDdkM4RixFQUFHLFVBQVUsRUFBRSxTQUFTejdFLEVBQUUsS0FBSzIxRSxHQUFTLGlCQUFrQixNQUFNLENBQUMsRUFDakU4RixFQUFHLFVBQVUsRUFBRSxXQUFXejdFLEVBQUUsS0FBSzIxRSxHQUFTLG1CQUFvQixNQUFNLENBQUMsRUFDckU4RixFQUFHLFVBQVUsRUFBRSxtQkFBcUIsTUFBUSxDQUFDQSxFQUFHLFVBQVUsRUFBRSxrQkFBbUJ6N0UsRUFBRSxLQUFLMjFFLEdBQVMsa0JBQW1CLGFBQWEsQ0FBQyxFQUMzSDhGLEVBQUcsVUFBVSxFQUFFLHFCQUF1QixNQUFRLENBQUNBLEVBQUcsVUFBVSxFQUFFLHFCQUFxQno3RSxFQUFFLEtBQUsyMUUsR0FBUyxrQkFBbUIsZUFBZSxDQUFDLEVBQy9JLENBQ0MsQ0FBRSxjQUFlLGtCQUFvQixFQUNyQyxDQUFFLGdCQUFpQixlQUFpQixFQUNwQyxDQUFFLGFBQWMsZUFBaUIsRUFDakMsQ0FBRSxnQkFBaUIsaUJBQW1CLEVBQ3RDLENBQUUsYUFBYyxpQkFBbUIsRUFDbkMsQ0FBRSxtQkFBb0IsdUJBQXlCLEVBQy9DLENBQUUsZ0JBQWlCLGlCQUFtQixFQUN0QyxDQUFFLGFBQWMsaUJBQW1CLEVBQ25DLENBQUUsT0FBUSxXQUFhLEVBQ3ZCLENBQUUsYUFBYyxhQUFlLEVBQy9CLENBQUUsY0FBZSxxQkFBdUIsQ0FDMUMsRUFBRyxRQUFRLFNBQVM1OUMsRUFBRyxDQUFLMGpELEVBQUcsVUFBVSxFQUFFMWpELEVBQUUsQ0FBQyxDQUFDLEdBQUcvM0IsRUFBRSxLQUFLLElBQUkrM0IsRUFBRSxDQUFDLEVBQUUsSUFBSSxDQUFFLENBQUUsR0FHdEUvM0IsRUFBRSxRQUFVLEVBQVUsR0FDbEI2MUUsR0FBVSxtQkFBb0I3MUUsRUFBRSxLQUFLLEVBQUUsRUFBRyxDQUFDLE1BQU1xMkUsR0FBTyxDQUFDLENBQUMsQ0FDbEUsQ0FDQSxTQUFTeTZDLEdBQXNCdGYsRUFBb0MsQ0FDbEUsT0FBT0EsRUFBUyxJQUFJLFNBQVNsMkYsRUFBRyxDQUUvQixJQUFJaGQsRUFBSWsyRSxHQUFjbDVELEVBQUUsR0FBRyxFQUFFLEVBQ3pCcGIsRUFBRzIxRSxHQUFVLFVBQVd2M0UsRUFBRyxDQUFDLE1BQVEsaUNBQWlDLENBQUMsRUFDMUUsT0FBT3UzRSxHQUFVLFVBQVczMUUsRUFBRyxDQUFDLFlBQVlvYixFQUFFLENBQUMsQ0FBQyxDQUNsRCxDQUFFLEVBQUUsS0FBSyxFQUFFLENBQ1gsQ0FDQSxTQUFTeTFHLEdBQW1CenhGLEVBQU01aEMsRUFBZ0IrOUUsRUFBSXZsRixFQUFNK2xELEVBQWdCbXlDLEVBQUl2cEIsRUFBZ0IsQ0FDL0YsR0FBRyxDQUFDdmxDLEdBQVNBLEVBQUssR0FBSyxNQUFhQSxFQUFLLEdBQUssS0FBWSxNQUFPLEdBRWpFLElBQUkvcEIsRUFBTyxDQUFBLEVBRVgsR0FERytwQixFQUFLLElBQUcvcEIsRUFBSyxZQUFZLEVBQUksSUFBTXkrRCxHQUFVMm5CLEdBQVNyOEQsRUFBSyxFQUFHdWxDLENBQUksQ0FBQyxHQUNuRXZsQyxFQUFLLEdBQUtBLEVBQUssRUFBRSxNQUFNLEVBQUc1aEMsRUFBSSxNQUFNLEdBQUtBLEVBQUssQ0FDaEQsSUFBSXUxRCxFQUFNeW5CLEdBQVlwN0MsRUFBSyxFQUFFLE1BQU01aEMsRUFBSSxPQUFTLENBQUMsQ0FBQyxFQUNsRDZYLEVBQUssZUFBZSxFQUFJLFFBQVUwOUMsRUFBSSxHQUFLNFIsRUFBSyxFQUFJLEdBQUssS0FBTzVSLEVBQUksRUFBSTRSLEVBQUssR0FBSyxLQUFPLEtBQU81UixFQUFJLEdBQUs0UixFQUFLLEVBQUksR0FBSyxLQUFPNVIsRUFBSSxFQUFJNFIsRUFBSyxHQUFLLElBQ2hKLENBT0QsR0FMR3ZsQyxFQUFLLEdBQUtBLEVBQUssRUFBRSxTQUNuQi9wQixFQUFLLFNBQVMsRUFBSXkrRCxHQUFVMTBDLEVBQUssRUFBRSxNQUFNLEVBQ3RDQSxFQUFLLEVBQUUsVUFBUy9wQixFQUFLLGlCQUFpQixFQUFJeStELEdBQVUxMEMsRUFBSyxFQUFFLE9BQU8sSUFHbkVtOEMsRUFBRyxTQUFTLEVBRWQsUUFESXNuQyxFQUFPdG5DLEVBQUcsU0FBUyxFQUNmdTFDLEVBQUssRUFBR0EsR0FBTWpPLEVBQUssT0FBUSxFQUFFaU8sRUFDakNqTyxFQUFLaU8sQ0FBRSxFQUFFLEVBQUUsR0FBS25zRCxFQUFLLEdBQUtrK0MsRUFBS2lPLENBQUUsRUFBRSxFQUFFLEdBQUtuc0QsRUFBSyxJQUMvQ2srQyxFQUFLaU8sQ0FBRSxFQUFFLEVBQUUsRUFBSWpPLEVBQUtpTyxDQUFFLEVBQUUsRUFBRSxJQUFHejdHLEVBQUssZ0JBQWdCLEVBQUl3dEcsRUFBS2lPLENBQUUsRUFBRSxFQUFFLEVBQUlqTyxFQUFLaU8sQ0FBRSxFQUFFLEVBQUUsR0FDaEZqTyxFQUFLaU8sQ0FBRSxFQUFFLEVBQUUsRUFBSWpPLEVBQUtpTyxDQUFFLEVBQUUsRUFBRSxJQUFHejdHLEVBQUssY0FBYyxFQUFJd3RHLEVBQUtpTyxDQUFFLEVBQUUsRUFBRSxFQUFJak8sRUFBS2lPLENBQUUsRUFBRSxFQUFFLElBSW5GLElBQUkxeUgsRUFBSSxHQUFJdkQsRUFBSSxHQUNoQixPQUFPdWtDLEVBQUssRUFBQyxDQUNaLElBQUssSUFBSyxHQUFHLENBQUNwcEMsRUFBSyxXQUFZLE1BQU8sR0FBSSxNQUMxQyxJQUFLLElBQUtvSSxFQUFJLFNBQVV2RCxFQUFJLE9BQU91a0MsRUFBSyxDQUFDLEVBQUcsTUFDNUMsSUFBSyxJQUFLaGhDLEVBQUksVUFBV3ZELEVBQUt1a0MsRUFBSyxFQUFJLElBQU0sSUFBTSxNQUNuRCxJQUFLLElBQUtoaEMsRUFBSSxRQUFTdkQsRUFBSW1nRixHQUFLNTdDLEVBQUssQ0FBQyxFQUFHLE1BQ3pDLElBQUssSUFBS2hoQyxFQUFJLFdBQVl2RCxFQUFJLElBQUksS0FBS3VrQyxFQUFLLENBQUMsRUFBRSxZQUFhLEVBQUtBLEVBQUssR0FBSyxPQUFNQSxFQUFLLEVBQUlBLEVBQUssR0FBSzYzQixHQUFVLEVBQUUsR0FBRyxNQUNuSCxJQUFLLElBQUs3NEQsRUFBSSxTQUFVdkQsRUFBSXE1RSxHQUFXOTBDLEVBQUssR0FBRyxFQUFFLEVBQUcsS0FDcEQsQ0FFRCxJQUFJd3hELEVBQUtzdEIsR0FBZWxvSCxFQUFLLFFBQVNvcEMsRUFBTXBwQyxDQUFJLEVBQ2hEcWYsRUFBSyxZQUFZLEVBQUksS0FBTyxHQUFHdTdFLEdBQy9CdjdFLEVBQUssVUFBVSxFQUFJc3ZELEVBQUssRUFBSSxFQUM1QixJQUFJL3FELEVBQU13bEIsRUFBSyxHQUFLLEtBQU92a0MsRUFBSSxHQUMzQixFQUFJdWtDLEVBQUssR0FBSyxJQUFNLEdBQU0sa0JBQW9CaGhDLEVBQUksS0FBT3diLEVBQUssVUFFbEUsT0FBSXdsQixFQUFLLEdBQUcsQ0FBQSxHQUFJLE9BQVMsSUFBRyxHQUFLd3hGLEdBQXNCeHhGLEVBQUssQ0FBQyxHQUV0RHUyQyxHQUFVLE9BQVEsRUFBR3RnRSxDQUFJLENBQ2pDLENBQ0EsU0FBUzA3RyxHQUFrQmh3RCxFQUFjeGdFLEVBQWdCLENBQ3hELElBQUlULEVBQUksbUJBQXFCaWhFLEVBQUUsR0FBSyxJQUNwQyxPQUFHeGdFLElBQ0NBLEVBQUksS0FBTyxDQUFDQSxFQUFJLE1BQUtBLEVBQUksSUFBTTY2RixHQUFNNzZGLEVBQUksR0FBRyxHQUM1Q0EsRUFBSSxNQUFLVCxHQUFLLG9DQUFzQ1MsRUFBSSxJQUFNLEtBQzlEQSxFQUFJLFNBQVFULEdBQUssbUJBRWRBLEVBQUksR0FDWixDQUVBLFNBQVNreEgsR0FBb0J6MUMsRUFBa0J2bEYsRUFBTStsRCxFQUFnQm15QyxFQUE0QixDQUNoRyxHQUFHLENBQUMzUyxFQUFHLE1BQU0sRUFBRyxNQUFPLEdBQ3ZCLElBQUl0Z0QsRUFBa0I0L0MsR0FBa0JVLEVBQUcsTUFBTSxDQUFDLEVBQzlDc25DLEVBQXdCdG5DLEVBQUcsU0FBUyxHQUFLLENBQUUsRUFBRXUxQyxFQUFLLEVBQ2xELEVBQXNCLENBQUEsRUFDdkJ2MUMsRUFBRyxPQUFPLEdBQUdBLEVBQUcsT0FBTyxFQUFFLFFBQVEsU0FBU3I4RSxFQUFHcEQsRUFBRyxDQUNsRHEvRixHQUFZajhGLENBQUMsRUFDYixJQUFJNjVELEVBQUksQ0FBQyxDQUFDNzVELEVBQUUsTUFDUnJFLEVBQUlnakgsR0FBVS9oSCxFQUFHb0QsQ0FBQyxFQUNsQm9jLEVBQVksQ0FBQyxXQUFXeGYsRUFBRSxDQUFDLEVBQzVCaTlELElBQUd6OUMsRUFBRSxVQUFVLEVBQUlzZ0YsR0FBUy9nRyxFQUFFLEtBQUssR0FDbkNxRSxFQUFFLFNBQVFvYyxFQUFFLFdBQVcsRUFBRSxLQUM1QixFQUFFLEtBQUtxNkQsR0FBVSxTQUFTLEtBQUtyNkQsQ0FBQyxDQUFDLENBQ25DLENBQUUsRUFFRCxRQURJZ2dFLEVBQVEsTUFBTSxRQUFRQyxDQUFFLEVBQ3BCeGEsRUFBSTlsQyxFQUFNLEVBQUUsRUFBRzhsQyxHQUFLOWxDLEVBQU0sRUFBRSxFQUFHLEVBQUU4bEMsRUFBRyxDQUUzQyxRQURJeGdFLEVBQU0sQ0FBQ3d3SCxHQUFrQmh3RCxHQUFJd2EsRUFBRyxPQUFPLEdBQUcsQ0FBRSxHQUFFeGEsQ0FBQyxDQUFDLENBQUMsRUFDN0NOLEVBQUl4bEMsRUFBTSxFQUFFLEVBQUd3bEMsR0FBS3hsQyxFQUFNLEVBQUUsRUFBRyxFQUFFd2xDLEVBQUcsQ0FDM0MsSUFBSXd3RCxFQUFPLEdBQ1gsSUFBSUgsRUFBSyxFQUFHQSxHQUFNak8sRUFBSyxPQUFRLEVBQUVpTyxFQUNoQyxHQUFHLEVBQUFqTyxFQUFLaU8sQ0FBRSxFQUFFLEVBQUUsRUFBSXJ3RCxJQUNmLEVBQUFvaUQsRUFBS2lPLENBQUUsRUFBRSxFQUFFLEVBQUkvdkQsSUFDZixFQUFBOGhELEVBQUtpTyxDQUFFLEVBQUUsRUFBRSxFQUFJcndELElBQ2YsRUFBQW9pRCxFQUFLaU8sQ0FBRSxFQUFFLEVBQUUsRUFBSS92RCxHQUNsQixFQUFHOGhELEVBQUtpTyxDQUFFLEVBQUUsRUFBRSxHQUFLcndELEdBQUtvaUQsRUFBS2lPLENBQUUsRUFBRSxFQUFFLEdBQUsvdkQsS0FBR2t3RCxFQUFPLElBQ2xELE1BRUQsR0FBRyxDQUFBQSxFQUNILEtBQUl0c0QsRUFBTyxDQUFDLEVBQUU1RCxFQUFFLEVBQUVOLENBQUMsRUFDZmpqRSxFQUFNbThFLEdBQVloVixDQUFJLEVBQUd2bEMsRUFBT2s4QyxHQUFTQyxFQUFHeGEsQ0FBQyxHQUFHLENBQUEsR0FBSU4sQ0FBQyxFQUFJOGEsRUFBRy85RSxDQUFHLEVBQ25FK0MsRUFBSSxLQUFLc3dILEdBQW1CenhGLEVBQU01aEMsRUFBSys5RSxFQUFJdmxGLEVBQU0rbEQsRUFBS215QyxFQUFJdnBCLENBQUksQ0FBQyxFQUMvRCxDQUNEcGtFLEVBQUksS0FBSyxRQUFRLEVBQ2RBLEVBQUksT0FBUyxHQUFHLEVBQUUsS0FBS0EsRUFBSSxLQUFLLEVBQUUsQ0FBQyxDQUN0QyxDQUNELE9BQU8sRUFBRSxLQUFLLEVBQUUsQ0FDakIsQ0FDQSxTQUFTMndILEdBQWNuMUUsRUFBZ0IvbEQsRUFBTWs0RixFQUE0QixDQUN4RSxJQUFJcHVGLEVBQXNCLENBQUEsRUFDdEJYLEVBQUkrdUYsRUFBRyxXQUFXbnlDLENBQUcsRUFDckJ3L0IsRUFBSzJTLEVBQUcsT0FBTy91RixDQUFDLEVBRWhCZixFQUFlbTlFLEVBQUttMUMsR0FBb0JuMUMsRUFBSXZsRixFQUFNK2xELEVBQUtteUMsQ0FBRSxFQUFJLEdBQ2pFLE9BQUc5dkYsRUFBRSxPQUFTLEdBQUcwQixFQUFFLEtBQUssVUFBWTFCLEVBQUksVUFBVSxFQUdsREEsRUFBSW05RSxFQUFLeTFDLEdBQW9CejFDLEVBQUl2bEYsRUFBTStsRCxFQUFLbXlDLENBQUUsRUFBSSxHQUMvQzl2RixFQUFFLE9BQVMsR0FBRzBCLEVBQUUsS0FBSyxVQUFZMUIsRUFBSSxVQUFVLEVBR2xEMEIsRUFBRSxLQUFLNndILEdBQXFCcDFDLEVBQUl2bEYsRUFBTStsRCxFQUFLbXlDLENBQUUsQ0FBQyxFQUV2Q3B1RixFQUFFLEtBQUssRUFBRSxDQUNqQixDQUNBLFNBQVNxeEgsR0FBV2pqQyxFQUFJbDRGLEVBQWlCLENBQ3BDQSxJQUFNQSxFQUFPLElBQ2JrNEYsRUFBRyxNQUFLQSxFQUFHLElBQU1qZCxHQUFJaGEsRUFBUyxHQUMvQmkzQixFQUFHLE1BQ0w1dkIsR0FBVSxFQUFFRixHQUFlOHZCLEVBQUcsR0FBRyxFQUVqQ2w0RixFQUFLLE9BQVMrNUUsR0FBVW1lLEVBQUcsR0FBRyxFQUFHbDRGLEVBQUssT0FBT2s0RixFQUFHLElBQUksS0FBSyxDQUFDLEVBQUksRUFDOURsNEYsRUFBSyxJQUFNazRGLEVBQUcsSUFDZGw0RixFQUFLLFFBQVUsR0FDZmtvSCxHQUFlbG9ILEVBQUssUUFBUyxHQUFJLENBQUMsT0FBTyxDQUFDLFFBQVUsQ0FBQyxDQUFDLENBQUMsR0FFeEQsSUFBSWdLLEVBQXNCLENBQUEsRUFDMUJBLEVBQUUsS0FBS3F3SCxHQUFpQm5pQyxFQUFJbDRGLENBQUksQ0FBQyxFQUNqQ2dLLEVBQUUsS0FBS3N3SCxHQUFzQixDQUFDLEVBQzlCdHdILEVBQUUsS0FBSyxFQUFFLEVBQ1RBLEVBQUUsS0FBSyxFQUFFLEVBQ1QsUUFBUWxFLEVBQUksRUFBR0EsRUFBSW95RixFQUFHLFdBQVcsT0FBUSxFQUFFcHlGLEVBQzFDa0UsRUFBRSxLQUFLMjFFLEdBQVUsWUFBYXU3QyxHQUFjcDFILEVBQUc5RixFQUFNazRGLENBQUUsRUFBRyxDQUFDLFVBQVVwYSxHQUFVb2EsRUFBRyxXQUFXcHlGLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxFQUNuRyxPQUFBa0UsRUFBRSxDQUFDLEVBQUl1d0gsR0FBZXJpQyxFQUFJbDRGLENBQUksRUFDOUJnSyxFQUFFLENBQUMsRUFBSXl3SCxHQUFpQnZpQyxDQUFRLEVBQ3pCeGIsR0FBYWlELEdBQVUsV0FBWTMxRSxFQUFFLEtBQUssRUFBRSxFQUFHLENBQ3JELE1BQWNtMkUsR0FBTyxHQUNyQixVQUFjQSxHQUFPLEVBQ3JCLFVBQWNBLEdBQU8sRUFDckIsV0FBY0EsR0FBTyxHQUNyQixXQUFjQSxHQUFPLEdBQ3JCLGFBQWNBLEdBQU8sSUFDdkIsQ0FBRSxDQUNGLENBRUEsU0FBU2k3QyxHQUFjNzFILEVBQWtCLENBQ3hDLElBQUlxZ0IsRUFBSSxDQUFBLEVBQ0o5YixFQUFJdkUsRUFBSSxRQVNaLEdBTEF1RSxFQUFFLEVBQUksR0FFTjhiLEVBQUUsYUFBZTliLEVBQUUsV0FBVyxFQUFHLFlBQVksRUFDN0M4YixFQUFFLG9CQUFzQjRqRSxHQUFrQzEvRSxDQUFDLEVBRXhEQSxFQUFFLE9BQVNBLEVBQUUsR0FBSyxFQUFHLE9BQU84YixFQUUvQixJQUFJeTNDLEVBQWV2ekQsRUFBRSxXQUFXLENBQUMsRUFVakMsR0FUR3V6RCxHQUFLLEdBQUtBLEVBQUksS0FDakJ2ekQsRUFBRSxHQUFHLEVBQUc4YixFQUFFLFVBQVk5YixFQUFFLFdBQVcsRUFBRyxZQUFZLEVBRS9DQSxFQUFFLE9BQVNBLEVBQUUsR0FBSyxLQUNyQnV6RCxFQUFJdnpELEVBQUUsV0FBVyxDQUFDLEVBQ2Z1ekQsSUFBTSxjQUNUejNDLEVBQUUsdUJBQXlCNmpFLEdBQXFDMy9FLENBQUMsRUFFakV1ekQsRUFBSXZ6RCxFQUFFLFdBQVcsQ0FBQyxFQUNmdXpELEdBQUssR0FBS0EsRUFBSSxJQUFJLE9BQU96M0MsRUFDNUI5YixFQUFFLEdBQUcsRUFBRzhiLEVBQUUsVUFBWTliLEVBQUUsV0FBVyxFQUFHLFFBQVEsQ0FDL0MsQ0FVQSxJQUFJdXhILEdBQWMsQ0FBRSxHQUFRLEtBQVEsS0FBUSxLQUFRLE1BQ3BELFNBQVNDLEdBQU1DLEVBQVl4d0QsRUFBR3ZPLEVBQU14dUIsRUFBbUJodUMsRUFBYyxDQUNwRSxJQUFJMHFCLEVBQUlzakIsRUFDSjJ4QixFQUFPLENBQUEsRUFDUDMxRCxFQUFJd3lELEVBQUssTUFBTUEsRUFBSyxFQUFFQSxFQUFLLEVBQUU5eEMsQ0FBQyxFQUNsQyxHQUFHMXFCLEdBQVFBLEVBQUssS0FBT0EsRUFBSyxJQUFJLFFBQVVnSyxFQUFFLE9BQVMsRUFBRyxPQUFPdXhILEVBQVUsQ0FDekUsSUFBSyxHQUFRLElBQUssS0FBUSxJQUFLLE1BQVEsSUFBSyxNQUFpQixJQUFLLElBQXVCLElBQUssS0FBdUIsSUFBSyxLQUEyQixJQUFLLEtBQXNCLElBQUssS0FBc0IsSUFBSyxLQUFzQixJQUFLLElBQzFPLE1BQ0QsSUFBSyxLQUNKLE1BQ0QsUUFDQ3Y3SCxFQUFLLElBQUksT0FBT2dLLENBQUMsQ0FDakIsQ0FDRDIxRCxFQUFLLEtBQUszMUQsQ0FBQyxFQUNYd3lELEVBQUssR0FBSzl4QyxFQUdWLFFBRkk4d0csRUFBUzk2QyxHQUFlbGtCLEVBQUtBLEVBQUssQ0FBQyxFQUFHbjZCLEVBQU9vNUYsR0FBY0QsQ0FBTSxFQUNqRXgxRyxFQUFRLEVBQ05xYyxHQUFRLE1BQVFnNUYsR0FBWSxRQUFRRyxDQUFNLEVBQUksSUFDbkQ5d0csRUFBSWcyRCxHQUFlbGtCLEVBQUtBLEVBQUssRUFBRSxDQUFDLEVBQ2hDeDJDLEVBQVF3MkMsRUFBSyxFQUFJLEVBQ2RnL0QsR0FBVSxLQUEwQngxRyxHQUFTLEdBQ3hDdzFHLEdBQVUsTUFBVUEsR0FBVSxRQUNyQ3gxRyxHQUFTLElBRVZoYyxFQUFJd3lELEVBQUssTUFBTXgyQyxFQUFNdzJDLEVBQUssRUFBRSxFQUFFOXhDLENBQUMsRUFDL0JpMUMsRUFBSyxLQUFLMzFELENBQUMsRUFDWHd5RCxFQUFLLEdBQUssRUFBRTl4QyxFQUNaMlgsRUFBUW81RixHQUFjRCxFQUFTOTZDLEdBQWVsa0IsRUFBTUEsRUFBSyxDQUFDLENBQUMsRUFFNUQsSUFBSXBzRCxFQUFLc3ZELEdBQVFDLENBQUksRUFDckIyTCxHQUFVbDdELEVBQUcsQ0FBQyxFQUNkLElBQUlzckgsRUFBSyxFQUFHdHJILEVBQUUsS0FBTyxDQUFBLEVBQ3JCLFFBQVFndEQsRUFBSSxFQUFHQSxFQUFJdUMsRUFBSyxPQUFRLEVBQUV2QyxFQUFLaHRELEVBQUUsS0FBSyxLQUFLc3JILENBQUUsRUFBR0EsR0FBTS83RCxFQUFLdkMsQ0FBQyxFQUFFLE9BQ3RFLEdBQUdodEQsRUFBRSxPQUFTNDlCLEVBQVEsS0FBTSxnQkFBa0J1dEYsRUFBVyxTQUFTLEVBQUUsRUFBSSxlQUFpQm5ySCxFQUFFLE9BQVMsTUFBUTQ5QixFQUM1RyxPQUFPKzhCLEVBQUUsRUFBRTM2RCxFQUFHQSxFQUFFLE9BQVFwUSxDQUFJLENBQzdCLENBRUEsU0FBUzI3SCxHQUFlOTJILEVBQVc3RSxFQUFvQjBpRSxFQUF1QixDQUM3RSxHQUFHNzlELEVBQUUsSUFBTSxLQUNQQSxFQUFFLEdBQ04sS0FBSXVqSCxFQUFRLEVBQ1osR0FBSSxDQUNIQSxFQUFRdmpILEVBQUUsR0FBS0EsRUFBRSxHQUFHLFVBQVksRUFDN0I3RSxFQUFLLFNBQVE2RSxFQUFFLEVBQUlvOEQsR0FBVW1uRCxDQUFLLEVBQ3ZDLE9BQVN0L0csRUFBRyxDQUFFLEdBQUc5SSxFQUFLLElBQUssTUFBTThJLENBQUksQ0FDcEMsR0FBRyxDQUFDOUksR0FBUUEsRUFBSyxXQUFhLEdBQU8sR0FBSSxDQUNyQzZFLEVBQUUsSUFBTSxJQUFPQSxFQUFFLEVBQUlBLEVBQUUsR0FBS21nRixHQUFLbmdGLEVBQUUsQ0FBQyxFQUMvQnVqSCxJQUFVLEdBQUtBLEdBQVMsVUFDNUJ2akgsRUFBRSxJQUFNLEtBQ05BLEVBQUUsRUFBRSxLQUFPQSxFQUFFLEVBQUdBLEVBQUUsRUFBSUEsRUFBRSxFQUFFLFNBQVMsRUFBRSxFQUNwQ0EsRUFBRSxFQUFJbytELEdBQWdCcCtELEVBQUUsQ0FBQyxFQUUxQkEsRUFBRSxFQUFJcytELEdBQVl0K0QsRUFBRSxDQUFDLEVBRXRCQSxFQUFFLEVBQUl1K0QsR0FBV2dsRCxFQUFNdmpILEVBQUUsRUFBRyxDQUFDLFNBQVMsQ0FBQyxDQUFDNjlELEVBQVUsT0FBUTFpRSxHQUFRQSxFQUFLLE1BQU0sQ0FBQyxDQUNyRixPQUFTOEksRUFBRyxDQUFFLEdBQUc5SSxFQUFLLElBQUssTUFBTThJLENBQUksQ0FDcEMsR0FBRzlJLEVBQUssV0FBYW9vSCxHQUFTdmpILEVBQUUsR0FBSyxLQUFPZ2lFLEdBQVk1RixHQUFVbW5ELENBQUssR0FBSyxPQUFPQSxDQUFLLENBQUMsRUFBRyxDQUMzRixJQUFJN3NHLEVBQUswbUQsR0FBb0JwOUQsRUFBRSxDQUFDLEVBQU0wVyxJQUFNMVcsRUFBRSxFQUFJLElBQUtBLEVBQUUsRUFBSSxJQUFJLEtBQUswVyxFQUFHLEVBQUdBLEVBQUcsRUFBRSxFQUFFQSxFQUFHLEVBQUVBLEVBQUcsRUFBRUEsRUFBRyxFQUFFQSxFQUFHLEVBQUVBLEVBQUcsQ0FBQyxFQUMzRyxFQUNGLENBRUEsU0FBU3FnSCxHQUFVbDFILEVBQUt5dkYsRUFBTS90RixFQUFZLENBQ3pDLE1BQVEsQ0FBQyxFQUFFMUIsRUFBSyxLQUFLeXZGLEVBQU0sRUFBRS90RixDQUFDLENBQy9CLENBR0EsU0FBU3l6SCxHQUFlci9ELEVBQU03NUQsRUFBb0MsQ0FDakUsSUFBSXUxRixFQUFNLENBQUMsS0FBSyxDQUFBLENBQUUsRUFDZDQ4QixFQUFTLENBQUEsRUFFVGgxRCxFQUFzQm45RCxFQUFRLE1BQVEsQ0FBRSxFQUFHLENBQUUsRUFDN0NtNUgsRUFBWSxDQUFBLEVBQ1o3MkYsRUFBbUIsQ0FBQSxFQUNuQjgyRixFQUFlLEtBQ2YvaUMsRUFBZSxDQUFBLEVBQ2ZnakMsRUFBWSxHQUNaQyxFQUFXLENBQUEsRUFDWEMsRUFBVUMsRUFBWSxHQUFJMzJELEVBQWE0MkQsRUFBTUMsRUFBTUMsRUFDbkQ3UCxFQUFVLENBQUEsRUFDVkQsRUFBb0MsQ0FBQSxFQUNwQytQLEVBQ0FDLEVBQ0FDLEVBQU0sQ0FBQSxFQUNOQyxFQUE4QyxDQUFBLEVBQzlDM0ssRUFBMEIsQ0FBRSxPQUFPLENBQUEsRUFBSSxRQUFRLENBQUMsU0FBUyxFQUFLLEVBQUcsTUFBTSxDQUFDLENBQUUsQ0FBQSxDQUFHLEVBQVd5SCxFQUFVLENBQUEsRUFDbEdtRCxFQUFVLFNBQWdCOXpDLEdBQTZDLENBQzFFLE9BQUdBLEdBQU0sRUFBVUMsR0FBT0QsRUFBRyxFQUMxQkEsR0FBTSxJQUFXNnpDLEVBQVE3ekMsR0FBSSxDQUFDLEdBQUtDLEdBQU9ELEVBQUcsQ0FFbEQsRUFDSyt6QyxFQUFxQixTQUFheHpGLEdBQU0yeEIsR0FBY3A0RCxHQUFTLENBQ2xFLElBQUlrNkgsR0FBTTloRSxHQUFLLEdBQUcsS0FDbEIsR0FBRyxHQUFDOGhFLElBQU8sQ0FBQ0EsR0FBSSxhQUFlLENBQUNsNkgsSUFBVyxDQUFDQSxHQUFRLFlBQ3BELENBQUFvNEQsR0FBSyxFQUFLLENBQUEsRUFDVkEsR0FBSyxFQUFFLFlBQWM4aEUsR0FBSSxZQUN6QixJQUFJejBILElBQ0FBLEdBQUkyZ0YsR0FBUTR6QyxFQUFRRSxHQUFJLE9BQU8sQ0FBQyxLQUFNOWhFLEdBQUssRUFBRSxRQUFVLENBQUMsSUFBSTN5RCxFQUFDLElBQzdEQSxHQUFJMmdGLEdBQVE0ekMsRUFBUUUsR0FBSSxPQUFPLENBQUMsS0FBTTloRSxHQUFLLEVBQUUsUUFBVSxDQUFDLElBQUkzeUQsRUFBQyxHQUNuRSxFQUNLMDBILEVBQVUsU0FBaUIxekYsR0FBYzJ4QixHQUFjcDRELEdBQWlCLENBQzNFLEdBQUcsRUFBQW82SCxFQUFhLElBQ2IsRUFBQXA2SCxHQUFRLFdBQWF5bUMsR0FBSyxHQUFLem1DLEdBQVEsV0FVMUMsSUFUR0EsR0FBUSxZQUFjbzRELEdBQUssSUFBTUEsR0FBSyxHQUFHLE1BQU02aEUsRUFBbUJ4ekYsR0FBTTJ4QixHQUFNcDRELEVBQU8sRUFDeEYsT0FBT280RCxHQUFLLEtBQU0sT0FBT0EsR0FBSyxHQUM5Qm1oRSxFQUFXOXlGLEdBQ1greUYsRUFBWXg0QyxHQUFZdjZDLEVBQUksR0FDekIsQ0FBQ25FLEdBQVMsQ0FBQ0EsRUFBTSxHQUFLLENBQUNBLEVBQU0sS0FBR0EsRUFBUSxDQUFDLEVBQUUsQ0FBQyxFQUFFLEVBQUUsRUFBRSxDQUFDLEVBQUUsRUFBRSxDQUFDLEVBQUUsRUFBRSxFQUFFLENBQUMsQ0FBQyxHQUNoRW1FLEdBQUssRUFBSW5FLEVBQU0sRUFBRSxJQUFHQSxFQUFNLEVBQUUsRUFBSW1FLEdBQUssR0FDckNBLEdBQUssRUFBSW5FLEVBQU0sRUFBRSxJQUFHQSxFQUFNLEVBQUUsRUFBSW1FLEdBQUssR0FDckNBLEdBQUssRUFBSSxFQUFJbkUsRUFBTSxFQUFFLElBQUdBLEVBQU0sRUFBRSxFQUFJbUUsR0FBSyxFQUFJLEdBQzdDQSxHQUFLLEVBQUksRUFBSW5FLEVBQU0sRUFBRSxJQUFHQSxFQUFNLEVBQUUsRUFBSW1FLEdBQUssRUFBSSxHQUM3Q3ptQyxHQUFRLGFBQWVvNEQsR0FBSyxHQUM5QixRQUFRaWlFLEdBQU0sRUFBR0EsR0FBTXhRLEVBQU8sT0FBUSxFQUFFd1EsR0FDdkMsR0FBRyxFQUFBeFEsRUFBT3dRLEVBQUcsRUFBRSxDQUFDLEVBQUUsRUFBRSxFQUFJNXpGLEdBQUssR0FBS29qRixFQUFPd1EsRUFBRyxFQUFFLENBQUMsRUFBRSxFQUFFLEVBQUk1ekYsR0FBSyxJQUN6RCxFQUFBb2pGLEVBQU93USxFQUFHLEVBQUUsQ0FBQyxFQUFFLEVBQUUsRUFBSTV6RixHQUFLLEdBQUtvakYsRUFBT3dRLEVBQUcsRUFBRSxDQUFDLEVBQUUsRUFBRSxFQUFJNXpGLEdBQUssR0FDNUQsQ0FBQTJ4QixHQUFLLEVBQUkycEIsR0FBYThuQyxFQUFPd1EsRUFBRyxFQUFFLENBQUMsQ0FBQyxHQUNqQ3hRLEVBQU93USxFQUFHLEVBQUUsQ0FBQyxFQUFFLEVBQUUsR0FBSzV6RixHQUFLLEdBQUtvakYsRUFBT3dRLEVBQUcsRUFBRSxDQUFDLEVBQUUsRUFBRSxHQUFLNXpGLEdBQUssSUFBRyxPQUFPMnhCLEdBQUssRUFDMUVBLEdBQUssSUFBR0EsR0FBSyxFQUFJLEdBQUt3cUQsR0FBa0JpSCxFQUFPd1EsRUFBRyxFQUFFLENBQUMsRUFBRy8zRixFQUFPbUUsR0FBTSs3RSxFQUFVbmxILENBQUksR0FDdEYsT0FJRTJDLEdBQVEsT0FDTm05RCxFQUFJMTJCLEdBQUssQ0FBQyxJQUFHMDJCLEVBQUkxMkIsR0FBSyxDQUFDLEVBQUksSUFDL0IwMkIsRUFBSTEyQixHQUFLLENBQUMsRUFBRUEsR0FBSyxDQUFDLEVBQUkyeEIsSUFDaEIrRSxFQUFJcThELENBQVMsRUFBSXBoRSxHQUUzQixFQUNLLzZELEVBQVEsQ0FDWCxJQUFLLEdBQ0wsTUFBTyxFQUNQLE9BQVEsQ0FBRSxFQUNWLFFBQVN5c0gsRUFDVCxPQUFRRCxFQUNSLFFBQVMsQ0FBRSxFQUNYLFNBQVUsR0FDVixLQUFNLEVBQ04sU0FBVSxFQUNWLFVBQVcsRUFDWCxXQUFZLENBQUMsQ0FBQzdwSCxHQUFXLENBQUMsQ0FBQ0EsRUFBUSxXQUNuQyxJQUFLLENBQUMsQ0FBQ0EsR0FBVyxDQUFDLENBQUNBLEVBQVEsR0FDOUIsRUFDSUEsRUFBUSxXQUFVM0MsRUFBSyxTQUFXMkMsRUFBUSxVQUM3QyxJQUFJOHhHLEVBQ0E3VixHQUEwQixDQUFBLEVBQzFCcStCLEdBQVUsQ0FBQSxFQUNWNTRCLEdBQTZCLENBQUEsRUFBSUQsR0FBNkIsR0FDOUQwbUIsR0FBVSxHQUNWM0YsRUFBWSxDQUFBLEVBQ2hCQSxFQUFTLFdBQWFubEgsRUFBSyxPQUMzQm1sSCxFQUFTLFFBQVVubEgsRUFBSyxRQUN4Qm1sSCxFQUFTLE9BQVNubEgsRUFBSyxPQUN2Qm1sSCxFQUFTLE1BQVEsR0FDakJBLEVBQVMsSUFBTSxHQUNmLElBQUkrWCxHQUFVLEVBQ1ZILEVBQWEsRUFDYkksRUFBVyxFQUFHQyxFQUFrQyxHQUNoREMsRUFBa0IsQ0FBQSxFQUNsQkMsRUFHSnQ5SCxFQUFLLFNBQVcsS0FDaEI0OUQsR0FBTyxJQUFJLEVBRVgsUUFESTIvRCxFQUFnQixHQUNkL2dFLEVBQUssRUFBSUEsRUFBSyxPQUFTLEdBQUcsQ0FDL0IsSUFBSXJ6RCxFQUFJcXpELEVBQUssRUFDVCsrRCxFQUFhLytELEVBQUssV0FBVyxDQUFDLEVBQ2xDLEdBQUcrK0QsSUFBZSxHQUFLMkIsS0FBWSxHQUFrQixNQUNyRCxJQUFJbHZGLEVBQVV3dUIsRUFBSyxJQUFNQSxFQUFLLE9BQVMsRUFBSUEsRUFBSyxXQUFXLENBQUMsRUFDeER1TyxHQUFJMHdELEdBQWNGLENBQVUsRUFHaEMsR0FBR3h3RCxJQUFLQSxHQUFFLEVBQUcsQ0FDWixHQUFHcG9FLEVBQVEsWUFDUHU2SCxLQUFZLEtBQTRCM0IsSUFBZSxJQUFvQyxNQUcvRixHQURBMkIsR0FBVTNCLEVBQ1B4d0QsR0FBRSxJQUFNLEdBQUtBLEdBQUUsR0FBSyxHQUFJLENBQzFCLElBQUl1ckIsR0FBSzk1QixFQUFLLFdBQVcsQ0FBQyxFQUMxQixHQUQ2Qnh1QixHQUFVLEVBQ3BDLENBQUNodUMsRUFBSyxLQUFPczJGLEtBQU9pbEMsS0FBaUJqbEMsR0FBRyxNQUFPLEVBQUlBLElBQUksS0FBUWlsQyxFQUFZLE1BQU0sSUFBSSxNQUFNLGdCQUFrQmpsQyxHQUFLLEtBQU9pbEMsQ0FBVSxFQUNuSXh3RCxHQUFFLEdBQUssS0FDVHZPLEVBQUssR0FBSyxHQUFJeHVCLEdBQVUsR0FFekIsQ0FFRCxJQUFJdG5DLEVBQWUsQ0FBQSxFQUluQixHQUhHNjBILElBQWUsR0FBa0I3MEgsRUFBYXFrRSxHQUFFLEVBQUV2TyxFQUFNeHVCLEVBQVFodUMsQ0FBSSxFQUNsRTBHLEVBQWE0MEgsR0FBTUMsRUFBWXh3RCxHQUFHdk8sRUFBTXh1QixFQUFRaHVDLENBQUksRUFFdEQrOEgsR0FBYyxHQUFLLENBQUMsRUFBUSxJQUFRLEtBQVEsSUFBTSxFQUFFLFFBQVFHLEVBQU8sSUFBTSxHQUFnQixTQUM1RixPQUFPM0IsRUFBVSxDQUNoQixJQUFLLElBRUpyakMsRUFBRyxLQUFLLFNBQVc2NUIsRUFBUyxRQUFRLFNBQVdyckgsRUFBSyxNQUNyRCxJQUFLLEtBQTJCd3hGLEVBQUcsS0FBSyxhQUFlLEdBQU0sTUFDN0QsSUFBSyxJQUdKLEdBRklsNEYsRUFBSyxNQUFLdzhELEVBQUssRUFBSSxHQUN2Qng4RCxFQUFLLElBQU0wRyxFQUNSLENBQUMvRCxFQUFRLFNBQVUsTUFBTSxJQUFJLE1BQU0sNEJBQTRCLEVBQ2xFLEdBQUcrRCxFQUFJLE9BQVMsS0FBTSxNQUFNLElBQUksTUFBTSwrQkFBK0IsRUFDckUsR0FBRyxDQUFDQSxFQUFJLE1BQU8sTUFBTSxJQUFJLE1BQU0sdUJBQXVCLEVBQ3RELE1BQ0QsSUFBSyxJQUEwQjFHLEVBQUssU0FBVzBHLEVBQUssTUFDcEQsSUFBSyxJQUNKLElBQUk4MkgsR0FBUSxPQUFPOTJILENBQUcsRUFFdEIsT0FBTzgySCxHQUFLLENBQ1gsSUFBSyxPQUFRQSxHQUFTLEtBQU0sTUFDNUIsSUFBSyxPQUFRQSxHQUFRLElBQU8sTUFDNUIsSUFBSyxPQUFRQSxHQUFTLEtBQU0sS0FDNUIsQ0FDRDUvRCxHQUFPNTlELEVBQUssU0FBV3c5SCxFQUFLLEVBQzVCRCxFQUFnQixHQUNoQixNQUNELElBQUssS0FBc0J2OUgsRUFBSyxRQUFVMEcsRUFBSyxNQUMvQyxJQUFLLElBQXlCMUcsRUFBSyxVQUFZMEcsRUFBSyxNQUNwRCxJQUFLLEtBQXlCd3hGLEVBQUcsS0FBSyxXQUFnQnh4RixFQUFLLE1BQzNELElBQUssSUFBd0J3eEYsRUFBRyxLQUFLLFVBQWV4eEYsRUFBSyxNQUN6RCxJQUFLLElBQXdCd3hGLEVBQUcsS0FBSyxVQUFleHhGLEVBQUssTUFDekQsSUFBSyxJQUF1Qnd4RixFQUFHLEtBQUssU0FBY3h4RixFQUFLLE1BQ3ZELElBQUssSUFBdUJ3eEYsRUFBRyxLQUFLLFNBQWN4eEYsRUFBSyxNQUN2RCxJQUFLLElBQTRCd3hGLEVBQUcsS0FBSyxjQUFtQnh4RixFQUFLLE1BQ2pFLElBQUssSUFBNkJ3eEYsRUFBRyxLQUFLLGVBQW9CeHhGLEVBQUssTUFDbkUsSUFBSyxJQUEwQjFHLEVBQUssWUFBYzBHLEVBQUssTUFDdkQsSUFBSyxNQUFtQ3d4RixFQUFHLEtBQUssU0FBV3h4RixFQUFLLE1BQ2hFLElBQUssS0FDREEsRUFBSSxVQUFTbzVELEVBQUksT0FBTyxFQUFJLFVBQzNCcDVELEVBQUksVUFBU281RCxFQUFJLFVBQVUsSUFBTUEsRUFBSSxVQUFVLEVBQUksQ0FBQSxJQUFLLE1BQVEsSUFDaEVwNUQsRUFBSSxVQUFTbzVELEVBQUksVUFBVSxJQUFNQSxFQUFJLFVBQVUsRUFBSSxDQUFBLElBQUssS0FBTyxJQUNuRSxNQUNELElBQUssS0FDSjI4RCxFQUFJLEtBQUsvMUgsQ0FBRyxFQUFHLE1BQ2hCLElBQUssS0FDSnkrRyxFQUFTLEtBQUssQ0FBQ3orRyxDQUFHLENBQUMsRUFDbkJ5K0csRUFBU0EsRUFBUyxPQUFPLENBQUMsRUFBRSxJQUFNLENBQUEsRUFDbEMsTUFDRCxJQUFLLElBQVEsSUFBSyxLQUNqQkEsRUFBU0EsRUFBUyxPQUFPLENBQUMsRUFBRSxLQUFLeitHLENBQUcsRUFDcEMsTUFDRCxJQUFLLElBQVEsSUFBSyxLQUNqQjQySCxFQUFZLENBQ1gsS0FBTTUySCxFQUFJLEtBQ1YsSUFBSzYrRyxHQUFrQjcrRyxFQUFJLEtBQUt1K0IsRUFBTSxLQUFLa2dGLEVBQVNubEgsQ0FBSSxDQUM5RCxFQUNRMEcsRUFBSSxLQUFPLElBQUc0MkgsRUFBUyxNQUFRNTJILEVBQUksS0FBTyxHQUM3Q3krRyxFQUFTLE1BQU0sS0FBS21ZLENBQVEsRUFDeEJuWSxFQUFTLENBQUMsSUFBS0EsRUFBUyxDQUFDLEVBQUksQ0FBRSxFQUFFQSxFQUFTLENBQUMsRUFBRSxJQUFNLENBQUUsR0FDekRBLEVBQVNBLEVBQVMsT0FBTyxDQUFDLEVBQUUsS0FBS3orRyxDQUFHLEVBQ2pDQSxFQUFJLE1BQVEseUJBQTJCQSxFQUFJLEtBQU8sR0FDakRBLEVBQUksTUFBUUEsRUFBSSxLQUFLLENBQUMsR0FBS0EsRUFBSSxLQUFLLENBQUMsRUFBRSxDQUFDLEdBQUtBLEVBQUksS0FBSyxDQUFDLEVBQUUsQ0FBQyxFQUFFLENBQUMsR0FBSyxjQUNwRTIySCxFQUFnQjMySCxFQUFJLEtBQU8sQ0FBQyxFQUFJLENBQUUsSUFBS2crRSxHQUFhaCtFLEVBQUksS0FBSyxDQUFDLEVBQUUsQ0FBQyxFQUFFLENBQUMsRUFBRSxDQUFDLENBQUMsSUFDMUUsTUFDRCxJQUFLLElBQTBCMUcsRUFBSyxZQUFjMEcsRUFBSyxNQUN2RCxJQUFLLElBQ0R5K0csRUFBUyxRQUFVLElBQUtBLEVBQVMsQ0FBQyxFQUFJLENBQUUsRUFBRUEsRUFBUyxDQUFDLEVBQUUsSUFBTSxDQUFFLEdBQ2pFQSxFQUFTQSxFQUFTLE9BQVMsQ0FBQyxFQUFFLElBQU1BLEVBQVNBLEVBQVMsT0FBUyxDQUFDLEVBQUUsSUFBSSxPQUFPeitHLENBQUcsRUFBR3krRyxFQUFTLElBQU1BLEVBQVMsSUFBSSxPQUFPeitHLENBQUcsRUFBRyxNQUM3SCxJQUFLLE1BRUosR0FBRzFHLEVBQUssS0FBTyxFQUFHLE1BQ2ZzOUgsR0FBWSxPQUFNQSxFQUFTLFFBQVU1MkgsRUFBSSxDQUFDLEdBQzdDLE1BQ0QsSUFBSyxJQUFzQm81RCxFQUFJLFVBQVUsRUFBSXA1RCxFQUFLLE1BQ2xELElBQUssSUFBMEJBLElBQVEsR0FBSzFHLEVBQUssS0FBSyxRQUFRLE1BQU0sc0JBQXdCMEcsQ0FBRyxFQUFHLE1BQ2xHLElBQUssS0FDSm8xSCxFQUFVcDFILEVBQUksR0FBRyxFQUFJQSxFQUNyQjFHLEVBQUssT0FBTyxLQUFLMEcsRUFBSSxJQUFJLEVBQ3hCLE1BQ0YsSUFBSyxJQUFrQixDQUN0QixHQUFHLEVBQUVxMkgsRUFBWSxNQUNqQixHQUFHOTNGLEVBQU0sRUFBRyxDQUNYLEdBQUdBLEVBQU0sRUFBRSxFQUFJLEdBQUtBLEVBQU0sRUFBRSxFQUFJLEVBQUcsQ0FHbEMsR0FGQUEsRUFBTSxFQUFFLElBQUtBLEVBQU0sRUFBRSxJQUNyQjY2QixFQUFJLE1BQU0sRUFBSTRrQixHQUFhei9DLENBQUssRUFDN0J0aUMsRUFBUSxXQUFhQSxFQUFRLFdBQWFzaUMsRUFBTSxFQUFFLEVBQUcsQ0FDdkQsSUFBSXc0RixHQUFReDRGLEVBQU0sRUFBRSxFQUNwQkEsRUFBTSxFQUFFLEVBQUl0aUMsRUFBUSxVQUFZLEVBQ2hDbTlELEVBQUksVUFBVSxFQUFJQSxFQUFJLE1BQU0sRUFDNUJBLEVBQUksTUFBTSxFQUFJNGtCLEdBQWF6L0MsQ0FBSyxFQUNoQ0EsRUFBTSxFQUFFLEVBQUl3NEYsRUFDWixDQUNEeDRGLEVBQU0sRUFBRSxJQUFLQSxFQUFNLEVBQUUsR0FDckIsQ0FDRTI1RCxHQUFPLE9BQVMsSUFBRzkrQixFQUFJLFNBQVMsRUFBSTgrQixJQUNwQ3ErQixHQUFRLE9BQVMsSUFBR245RCxFQUFJLFVBQVUsRUFBSW05RCxJQUN0QzU0QixHQUFRLE9BQVMsSUFBR3ZrQyxFQUFJLE9BQU8sRUFBSXVrQyxJQUNuQ0QsR0FBUSxPQUFTLElBQUd0a0MsRUFBSSxPQUFPLEVBQUlza0MsSUFDdEMydEIsRUFBUyxPQUFPLEtBQUt5SCxDQUFPLENBQzVCLENBQ0V3QyxJQUFjLEdBQUlDLEVBQVduOEQsRUFBVWcxRCxFQUFPa0gsQ0FBUyxFQUFJbDhELEVBQzlEQSxFQUFRbjlELEVBQVEsTUFBUSxDQUFFLEVBQUcsQ0FBRSxDQUNwQyxDQUFNLE1BQ0YsSUFBSyxHQUFRLElBQUssS0FBUSxJQUFLLE1BQVEsSUFBSyxNQUFrQixDQWlCN0QsR0FoQkczQyxFQUFLLE9BQVMsSUFBR0EsRUFBSyxLQUFPLENBQ3hCLEVBQWMsRUFDZCxJQUFjLEVBQ2QsS0FBYyxDQUNyQixFQUFDdTdILENBQVUsR0FBSyxDQUNULElBQWMsRUFDZCxJQUFjLEVBQ2QsS0FBYyxFQUNkLEtBQWMsRUFDZCxLQUFjLEVBQ2QsRUFBYyxFQUNkLEVBQWMsQ0FDM0IsRUFBTzcwSCxFQUFJLE9BQU8sR0FBSyxHQUNsQjFHLEVBQUssVUFBWTBHLEVBQUksU0FBVyxFQUM3QkEsRUFBSSxTQUFXLEdBQUtBLEVBQUksSUFBTSxPQUFVMUcsRUFBSyxLQUFPLEVBQUd1OUgsRUFBZ0IsR0FBTTMvRCxHQUFPNTlELEVBQUssU0FBVyxLQUFLLEdBQ3pHQSxFQUFLLE1BQVEsR0FBSzBHLEVBQUksU0FBVyxHQUFLQSxFQUFJLElBQU0sS0FBSTFHLEVBQUssS0FBTyxHQUNoRSs4SCxJQUFjLE1BS2pCLEdBSkFqOUQsRUFBUW45RCxFQUFRLE1BQVEsQ0FBRSxFQUFHLENBQUUsRUFFNUIzQyxFQUFLLEtBQU8sR0FBSyxDQUFDdTlILElBQWlCQSxFQUFnQixHQUFNMy9ELEdBQU81OUQsRUFBSyxTQUFXMkMsRUFBUSxVQUFZLElBQUksR0FFeEczQyxFQUFLLEtBQU8sR0FBSzBHLEVBQUksU0FBVyxHQUFLQSxFQUFJLElBQU0sS0FBUSxDQUN0RHMxSCxJQUFjLEtBQUlBLEVBQVksVUFDakMvMkYsRUFBUSxDQUFDLEVBQUUsQ0FBQyxFQUFFLEVBQUUsRUFBRSxDQUFDLEVBQUUsRUFBRSxDQUFDLEVBQUUsRUFBRSxFQUFFLENBQUMsQ0FBQyxFQUVoQyxJQUFJeTRGLEdBQVUsQ0FBQyxJQUFLbGhFLEVBQUssRUFBSXh1QixFQUFRLEtBQUtndUYsQ0FBUyxFQUNuREYsRUFBVTRCLEdBQVEsR0FBRyxFQUFJQSxHQUN6QjE5SCxFQUFLLE9BQU8sS0FBS2c4SCxDQUFTLENBQzFCLE1BQ0lBLEdBQWFGLEVBQVUzeUgsQ0FBQyxHQUFLLENBQUMsS0FBSyxFQUFFLEdBQUcsS0FDMUN6QyxFQUFJLElBQU0sS0FBTW81RCxFQUFJLE9BQU8sRUFBSSxTQUMvQnA1RCxFQUFJLElBQU0sS0FBTW81RCxFQUFJLE9BQU8sRUFBSSxTQUNsQzgrQixHQUFTLENBQUEsRUFDVHErQixHQUFVLENBQUEsRUFDVmo5SCxFQUFLLE9BQVN3c0gsRUFBUyxHQUN2Qm5vQixHQUFVLENBQUUsRUFBRUQsR0FBVSxHQUN4QjBtQixHQUFVLEdBQ1YwTyxFQUFVLENBQUMsUUFBUXNDLEVBQVUzeUgsQ0FBQyxHQUFHLENBQUMsR0FBRyxDQUFDLEdBQUcsR0FBSSxLQUFLNnlILENBQVMsQ0FDaEUsQ0FBTSxNQUNGLElBQUssS0FBcUIsSUFBSyxHQUF1QixJQUFLLEdBQ3ZEbDhELEVBQUksT0FBTyxHQUFLLFVBQVluOUQsRUFBUSxPQUFTbTlELEVBQUlwNUQsRUFBSSxDQUFDLEdBQUcsQ0FBQSxHQUFJQSxFQUFJLENBQUMsRUFBR281RCxFQUFJNmpCLEdBQVksQ0FBQyxFQUFFajlFLEVBQUksRUFBRyxFQUFFQSxFQUFJLENBQUMsQ0FBQyxDQUFDLElBQUcsRUFBRUEsRUFBSSxFQUNwSDYxSCxFQUFZLENBQUMsS0FBTTcxSCxFQUFJLEtBQU0sR0FBSSsxSCxFQUFJLzFILEVBQUksSUFBSSxHQUFHLENBQUEsRUFBSSxFQUFFQSxFQUFJLElBQUssRUFBRSxHQUFHLEVBQ2pFeTJILEVBQVcsSUFBR1osRUFBUyxFQUFJYSxFQUFlYixFQUFTLE1BQU0sRUFBSyxFQUFJLEdBQ3JFWixHQUFlWSxFQUFVNTVILEVBQVN1MUYsRUFBRyxLQUFLLFFBQVEsRUFDbEQ0a0MsRUFBUSxDQUFDLEVBQUVwMkgsRUFBSSxFQUFHLEVBQUVBLEVBQUksQ0FBQyxFQUFHNjFILEVBQVU1NUgsQ0FBTyxFQUM1QyxNQUNGLElBQUssR0FBUSxJQUFLLEtBQ2pCNDVILEVBQVksQ0FBQyxLQUFNNzFILEVBQUksS0FBTSxHQUFJKzFILEVBQUkvMUgsRUFBSSxJQUFJLEVBQUcsRUFBRUEsRUFBSSxJQUFLLEVBQUVBLEVBQUksQ0FBQyxFQUMvRHkySCxFQUFXLElBQUdaLEVBQVMsRUFBSWEsRUFBZWIsRUFBUyxNQUFNLEVBQUssRUFBSSxHQUNyRVosR0FBZVksRUFBVTU1SCxFQUFTdTFGLEVBQUcsS0FBSyxRQUFRLEVBQ2xENGtDLEVBQVEsQ0FBQyxFQUFFcDJILEVBQUksRUFBRyxFQUFFQSxFQUFJLENBQUMsRUFBRzYxSCxFQUFVNTVILENBQU8sRUFDNUMsTUFDRixJQUFLLEtBQ0o0NUgsRUFBWSxDQUFDLEtBQU03MUgsRUFBSSxLQUFNLEdBQUkrMUgsRUFBSS8xSCxFQUFJLElBQUksRUFBRyxFQUFFQSxFQUFJLE1BQU8sRUFBRSxHQUFHLEVBQy9EeTJILEVBQVcsSUFBR1osRUFBUyxFQUFJYSxFQUFlYixFQUFTLE1BQU0sRUFBSyxFQUFJLEdBQ3JFWixHQUFlWSxFQUFVNTVILEVBQVN1MUYsRUFBRyxLQUFLLFFBQVEsRUFDbEQ0a0MsRUFBUSxDQUFDLEVBQUVwMkgsRUFBSSxFQUFHLEVBQUVBLEVBQUksQ0FBQyxFQUFHNjFILEVBQVU1NUgsQ0FBTyxFQUM1QyxNQUNGLElBQUssS0FDSixRQUFReTZELEdBQUkxMkQsRUFBSSxFQUFHMDJELElBQUsxMkQsRUFBSSxFQUFHLEVBQUUwMkQsR0FBRyxDQUNuQyxJQUFJKzRCLEdBQU96dkYsRUFBSSxNQUFNMDJELEdBQUUxMkQsRUFBSSxDQUFDLEVBQUUsQ0FBQyxFQUMvQjYxSCxFQUFXLENBQUMsS0FBS3BtQyxHQUFNLEdBQUdzbUMsRUFBSXRtQyxFQUFJLEVBQUcsRUFBRXp2RixFQUFJLE1BQU0wMkQsR0FBRTEyRCxFQUFJLENBQUMsRUFBRSxDQUFDLEVBQUcsRUFBRSxHQUFHLEVBQ2hFeTJILEVBQVcsSUFBR1osRUFBUyxFQUFJYSxFQUFlYixFQUFTLE1BQU0sRUFBSyxFQUFJLEdBQ3JFWixHQUFlWSxFQUFVNTVILEVBQVN1MUYsRUFBRyxLQUFLLFFBQVEsRUFDbEQ0a0MsRUFBUSxDQUFDLEVBQUUxL0QsR0FBRyxFQUFFMTJELEVBQUksQ0FBQyxFQUFHNjFILEVBQVU1NUgsQ0FBTyxDQUN6QyxDQUNBLE1BQ0YsSUFBSyxHQUFRLElBQUssS0FBUSxJQUFLLE1BQXNCLENBQ3BELEdBQUcrRCxFQUFJLEtBQU8sU0FBVSxDQUFFcTFILEVBQWVyMUgsRUFBSyxLQUFRLENBR3RELEdBRkE2MUgsRUFBV1gsR0FBVWwxSCxFQUFJLElBQUtBLEVBQUksS0FBSyxLQUFNQSxFQUFJLEVBQUUsRUFDbkQ2MUgsRUFBUyxHQUFLRSxFQUFJRixFQUFTLElBQUksRUFDNUI1NUgsRUFBUSxZQUFhLENBQ3ZCLElBQUlrNkIsR0FBS24yQixFQUFJLFFBQ2IsR0FBR20yQixJQUFNQSxHQUFHLENBQUMsR0FBS0EsR0FBRyxDQUFDLEVBQUUsQ0FBQyxHQUFLQSxHQUFHLENBQUMsRUFBRSxDQUFDLEVBQUUsQ0FBQyxHQUFLLFNBQVUsQ0FDdEQsSUFBSThnRyxHQUFNOWdHLEdBQUcsQ0FBQyxFQUFFLENBQUMsRUFBRSxDQUFDLEVBQUUsQ0FBQyxFQUFHK2dHLEdBQU0vZ0csR0FBRyxDQUFDLEVBQUUsQ0FBQyxFQUFFLENBQUMsRUFBRSxDQUFDLEVBQ3pDZ2hHLEdBQU1sNkMsR0FBWSxDQUFDLEVBQUVnNkMsR0FBSyxFQUFFQyxFQUFHLENBQUMsRUFDakNuUixFQUFRb1IsRUFBRyxFQUFHdEIsRUFBUyxFQUFJLEdBQUdoWCxHQUFrQjcrRyxFQUFJLFFBQVF1K0IsRUFBTXYrQixFQUFJLEtBQUt5K0csRUFBVW5sSCxDQUFJLEVBQ3ZGdThILEVBQVMsSUFBTTU1SCxFQUFRLE9BQVNtOUQsRUFBSTY5RCxFQUFHLEdBQUcsQ0FBRSxHQUFFQyxFQUFHLEVBQUc5OUQsRUFBSSs5RCxFQUFHLElBQU0sQ0FBRSxHQUFFLENBQzFFLE1BQU10QixFQUFTLEVBQUksR0FBR2hYLEdBQWtCNytHLEVBQUksUUFBUXUrQixFQUFNditCLEVBQUksS0FBS3krRyxFQUFVbmxILENBQUksQ0FDbEYsQ0FDRW05SCxFQUFXLElBQUdaLEVBQVMsRUFBSWEsRUFBZWIsRUFBUyxNQUFNLEVBQUssRUFBSSxHQUNyRVosR0FBZVksRUFBVTU1SCxFQUFTdTFGLEVBQUcsS0FBSyxRQUFRLEVBQ2xENGtDLEVBQVFwMkgsRUFBSSxLQUFNNjFILEVBQVU1NUgsQ0FBTyxFQUNuQ281SCxFQUFlcjFILENBQ3BCLENBQU0sTUFDRixJQUFLLEdBQVEsSUFBSyxLQUNqQixHQUFHcTFILEVBQ0ZBLEVBQWEsSUFBTXIxSCxFQUNuQjYxSCxFQUFXWCxHQUFVbDFILEVBQUtxMUgsRUFBYSxLQUFLLEtBQU0sR0FBRyxFQUNyRFEsRUFBUyxHQUFLRSxFQUFJRixFQUFTLElBQUksRUFDNUI1NUgsRUFBUSxjQUNWNDVILEVBQVMsRUFBSSxHQUFHaFgsR0FBa0J3VyxFQUFhLFFBQVM5MkYsRUFBTzgyRixFQUFhLEtBQU01VyxFQUFVbmxILENBQUksR0FFOUZtOUgsRUFBVyxJQUFHWixFQUFTLEVBQUlhLEVBQWViLEVBQVMsTUFBTSxFQUFLLEVBQUksR0FDckVaLEdBQWVZLEVBQVU1NUgsRUFBU3UxRixFQUFHLEtBQUssUUFBUSxFQUNsRDRrQyxFQUFRZixFQUFhLEtBQU1RLEVBQVU1NUgsQ0FBTyxFQUM1Q281SCxFQUFlLFNBQ1QsT0FBTSxJQUFJLE1BQU0sK0JBQStCLEVBQ3JELE1BQ0YsSUFBSyxJQUFRLElBQUssS0FBb0IsQ0FDckN2UCxFQUFPLEtBQUs5bEgsQ0FBRyxFQUNmLElBQUlvM0gsR0FBY242QyxHQUFZajlFLEVBQUksQ0FBQyxFQUFFLENBQUMsRUFFdEMsR0FEQTgrRCxFQUFLN2lFLEVBQVEsT0FBU205RCxFQUFJcDVELEVBQUksQ0FBQyxFQUFFLEVBQUUsQ0FBQyxHQUFHLElBQUlBLEVBQUksQ0FBQyxFQUFFLEVBQUUsQ0FBQyxFQUFJbzVELEVBQUlnK0QsRUFBVyxFQUNyRW43SCxFQUFRLGFBQWU2aUUsRUFBSSxDQUU3QixHQURHLENBQUN1MkQsR0FDRCxDQUFDK0IsSUFBZSxDQUFDdDRELEVBQUksTUFDeEJBLEVBQUcsRUFBSSxHQUFHKy9DLEdBQWtCNytHLEVBQUksQ0FBQyxFQUFHdStCLEVBQU92K0IsRUFBSSxDQUFDLEVBQUd5K0csRUFBVW5sSCxDQUFJLEVBQ2pFd2xFLEVBQUcsRUFBSWtmLEdBQWFoK0UsRUFBSSxDQUFDLENBQUMsQ0FDMUIsQ0FDTixDQUFNLE1BQ0YsSUFBSyxNQUFzQixDQUMxQixHQUFHLENBQUMvRCxFQUFRLFlBQWEsTUFDekIsR0FBR3c1SCxFQUFXLENBRWIsR0FBRyxDQUFDSixFQUFjLE1BQ2xCdFAsRUFBUTlvQyxHQUFZbzRDLEVBQWEsSUFBSSxDQUFDLEVBQUdyMUgsRUFBSSxDQUFDLEVBQzlDOCtELEVBQUs3aUUsRUFBUSxPQUFTbTlELEVBQUlpOEQsRUFBYSxLQUFLLENBQUMsR0FBRyxDQUFBLEdBQUlBLEVBQWEsS0FBSyxDQUFDLEVBQUlqOEQsRUFBSTZqQixHQUFZbzRDLEVBQWEsSUFBSSxDQUFDLEdBQzVHdjJELEdBQUksQ0FBRSxHQUFFLEVBQUksR0FBRysvQyxHQUFrQjcrRyxFQUFJLENBQUMsRUFBR3UrQixFQUFPaTNGLEVBQVUvVyxFQUFVbmxILENBQUksQ0FDekUsQ0FDTixDQUFNLE1BQ0YsSUFBSyxLQUNKdThILEVBQVNYLEdBQVU1aUMsRUFBSXR5RixFQUFJLElBQUksRUFBRSxFQUFHQSxFQUFJLEtBQU0sR0FBRyxFQUM5Q3N5RixFQUFJdHlGLEVBQUksSUFBSSxFQUFFLElBQUc2MUgsRUFBUyxFQUFJdmpDLEVBQUl0eUYsRUFBSSxJQUFJLEVBQUUsR0FDL0M2MUgsRUFBUyxHQUFLRSxFQUFJRixFQUFTLElBQUksRUFDNUJZLEVBQVcsSUFBR1osRUFBUyxFQUFJYSxFQUFlYixFQUFTLE1BQU0sRUFBSyxFQUFJLEdBQ3JFWixHQUFlWSxFQUFVNTVILEVBQVN1MUYsRUFBRyxLQUFLLFFBQVEsRUFDbEQ0a0MsRUFBUSxDQUFDLEVBQUVwMkgsRUFBSSxFQUFHLEVBQUVBLEVBQUksQ0FBQyxFQUFHNjFILEVBQVU1NUgsQ0FBTyxFQUM3QyxNQUNELElBQUssS0FBdUJBLEVBQVEsYUFDbkM0NUgsRUFBWSxDQUFDLEtBQU03MUgsRUFBSSxLQUFNLEdBQUkrMUgsRUFBSS8xSCxFQUFJLElBQUksRUFBRyxFQUFFLEdBQUcsRUFDbER5MkgsRUFBVyxJQUFHWixFQUFTLEVBQUlhLEVBQWViLEVBQVMsTUFBTSxFQUFLLEVBQUksR0FDckVaLEdBQWVZLEVBQVU1NUgsRUFBU3UxRixFQUFHLEtBQUssUUFBUSxFQUNsRDRrQyxFQUFRLENBQUMsRUFBRXAySCxFQUFJLEVBQUcsRUFBRUEsRUFBSSxDQUFDLEVBQUc2MUgsRUFBVTU1SCxDQUFPLEdBQzVDLE1BQ0YsSUFBSyxLQUF1QixHQUFHQSxFQUFRLFdBQ3RDLFFBQVFvN0gsR0FBS3IzSCxFQUFJLEVBQUdxM0gsSUFBTXIzSCxFQUFJLEVBQUcsRUFBRXEzSCxHQUFJLENBQ3RDLElBQUlDLEdBQVF0M0gsRUFBSSxLQUFLcTNILEdBQUdyM0gsRUFBSSxDQUFDLEVBQzdCNjFILEVBQVcsQ0FBQyxLQUFLeUIsR0FBTyxHQUFHdkIsRUFBSXVCLEVBQUssRUFBRyxFQUFFLEdBQUcsRUFDekNiLEVBQVcsSUFBR1osRUFBUyxFQUFJYSxFQUFlYixFQUFTLE1BQU0sRUFBSyxFQUFJLEdBQ3JFWixHQUFlWSxFQUFVNTVILEVBQVN1MUYsRUFBRyxLQUFLLFFBQVEsRUFDbEQ0a0MsRUFBUSxDQUFDLEVBQUVpQixHQUFJLEVBQUVyM0gsRUFBSSxDQUFDLEVBQUc2MUgsRUFBVTU1SCxDQUFPLENBQzFDLENBQ0EsTUFDRixJQUFLLEtBQ0wsSUFBSyxLQUFvQixJQUFLLEdBQzdCNDVILEVBQVNYLEdBQVVsMUgsRUFBSSxJQUFLQSxFQUFJLEtBQU0sR0FBRyxFQUN6QzYxSCxFQUFTLEdBQUtFLEVBQUlGLEVBQVMsSUFBSSxFQUM1QlksRUFBVyxJQUFHWixFQUFTLEVBQUlhLEVBQWViLEVBQVMsTUFBTSxFQUFLLEVBQUksR0FDckVaLEdBQWVZLEVBQVU1NUgsRUFBU3UxRixFQUFHLEtBQUssUUFBUSxFQUNsRDRrQyxFQUFRLENBQUMsRUFBRXAySCxFQUFJLEVBQUcsRUFBRUEsRUFBSSxDQUFDLEVBQUc2MUgsRUFBVTU1SCxDQUFPLEVBQzdDLE1BRUQsSUFBSyxHQUFRLElBQUssS0FDZG82SCxJQUFlLElBQUc5M0YsRUFBUXYrQixHQUM1QixNQUNGLElBQUssS0FDSnN5RixFQUFNdHlGLEVBQ0wsTUFDRixJQUFLLE1BQ0osR0FBRzFHLEVBQUssTUFBUSxFQUFHLENBQ2xCbzlILEVBQWNELEdBQVUsRUFBSXoySCxFQUFJLENBQUMsRUFDakMsUUFBUXUzSCxHQUFRLEVBQUdBLEdBQVFkLEVBQVcsS0FBaUJsOEQsR0FBVWc5RCxFQUFLLEdBQUt2M0gsRUFBSSxDQUFDLEVBQXJDLEVBQUV1M0gsR0FBTyxDQUNqREEsSUFBUyxLQUFLOTFELEdBQVN6aEUsRUFBSSxDQUFDLEVBQUd5MkgsRUFBVyxHQUFHLENBQ2hELE1BQ0loMUQsR0FBU3poRSxFQUFJLENBQUMsRUFBR0EsRUFBSSxDQUFDLENBQUMsRUFDM0IsTUFDRixJQUFLLElBQTBCLENBQzlCMDJILEVBQWNELEdBQVUsRUFBSXoySCxFQUM1QixRQUFRdzNILEdBQVEsRUFBR0EsR0FBUWYsRUFBVyxLQUFpQmw4RCxHQUFVaTlELEVBQUssR0FBS3gzSCxFQUFoQyxFQUFFdzNILEdBQU8sQ0FDakRBLElBQVMsS0FBSy8xRCxHQUFTemhFLEVBQUt5MkgsRUFBVyxHQUFHLENBQ2xELENBQU0sTUFFRixJQUFLLEtBQXlCditCLEdBQVNBLEdBQU8sT0FBT2w0RixDQUFHLEVBQUcsTUFFM0QsSUFBSyxJQUFrQnUySCxHQUFRdjJILEVBQUksSUFBSSxDQUFDLENBQUMsRUFBSTFHLEVBQUssUUFBVTBHLEVBQUssTUFDakUsSUFBSyxLQUFrQjFHLEVBQUssUUFBUSxJQUFNMEcsRUFBSyxNQUMvQyxJQUFLLEtBQXFCMUcsRUFBSyxRQUFRLE9BQVMwRyxFQUFLLE1BRXJELElBQUssS0FDSixJQUFJNDFILEVBQU81MUgsRUFBSSxDQUFDLEVBQUUsRUFBRSxFQUFHNDFILEdBQVE1MUgsRUFBSSxDQUFDLEVBQUUsRUFBRSxFQUFHLEVBQUU0MUgsRUFDNUMsSUFBSUQsRUFBTzMxSCxFQUFJLENBQUMsRUFBRSxFQUFFLEVBQUcyMUgsR0FBUTMxSCxFQUFJLENBQUMsRUFBRSxFQUFFLEVBQUcsRUFBRTIxSCxFQUM1QzcyRCxFQUFLN2lFLEVBQVEsT0FBU205RCxFQUFJdzhELENBQUksR0FBRyxDQUFBLEdBQUlELENBQUksRUFBSXY4RCxFQUFJNmpCLEdBQVksQ0FBQyxFQUFFMDRDLEVBQUssRUFBRUMsQ0FBSSxDQUFDLENBQUMsRUFDMUU5MkQsSUFBSUEsRUFBRyxFQUFJOStELEVBQUksQ0FBQyxHQUVwQixNQUNGLElBQUssTUFDSixJQUFJNDFILEVBQU81MUgsRUFBSSxDQUFDLEVBQUUsRUFBRSxFQUFHNDFILEdBQVE1MUgsRUFBSSxDQUFDLEVBQUUsRUFBRSxFQUFHLEVBQUU0MUgsRUFDNUMsSUFBSUQsRUFBTzMxSCxFQUFJLENBQUMsRUFBRSxFQUFFLEVBQUcyMUgsR0FBUTMxSCxFQUFJLENBQUMsRUFBRSxFQUFFLEVBQUcsRUFBRTIxSCxFQUM1QzcyRCxFQUFLN2lFLEVBQVEsT0FBU205RCxFQUFJdzhELENBQUksR0FBRyxDQUFBLEdBQUlELENBQUksRUFBSXY4RCxFQUFJNmpCLEdBQVksQ0FBQyxFQUFFMDRDLEVBQUssRUFBRUMsQ0FBSSxDQUFDLENBQUMsRUFDMUU5MkQsR0FBTUEsRUFBRyxJQUFHQSxFQUFHLEVBQUUsUUFBVTkrRCxFQUFJLENBQUMsR0FFcEMsTUFDRixJQUFLLElBQW1CLENBQ3ZCLEdBQUcxRyxFQUFLLE1BQVEsR0FBS0EsRUFBSyxNQUFRLEVBQUcsTUFDckN3bEUsRUFBSzdpRSxFQUFRLE9BQVNtOUQsRUFBSXA1RCxFQUFJLENBQUMsRUFBRSxDQUFDLEdBQUcsQ0FBQSxHQUFJQSxFQUFJLENBQUMsRUFBRSxDQUFDLEVBQUlvNUQsRUFBSTZqQixHQUFZajlFLEVBQUksQ0FBQyxDQUFDLENBQUMsRUFDNUUsSUFBSXkzSCxHQUFVbEIsR0FBUXYySCxFQUFJLENBQUMsQ0FBQyxFQUN4QjgrRCxJQUNBN2lFLEVBQVEsT0FDTm05RCxFQUFJcDVELEVBQUksQ0FBQyxFQUFFLENBQUMsSUFBR281RCxFQUFJcDVELEVBQUksQ0FBQyxFQUFFLENBQUMsRUFBSSxDQUFBLEdBQ25DOCtELEVBQUsxRixFQUFJcDVELEVBQUksQ0FBQyxFQUFFLENBQUMsRUFBRUEsRUFBSSxDQUFDLEVBQUUsQ0FBQyxFQUFLLENBQUMsRUFBRSxHQUFHLEdBRXRDOCtELEVBQUsxRixFQUFJNmpCLEdBQVlqOUUsRUFBSSxDQUFDLENBQUMsQ0FBQyxFQUFLLENBQUMsRUFBRSxHQUFHLEVBRXhDdStCLEVBQU0sRUFBRSxFQUFJLEtBQUssSUFBSUEsRUFBTSxFQUFFLEVBQUd2K0IsRUFBSSxDQUFDLEVBQUUsQ0FBQyxFQUN4Q3UrQixFQUFNLEVBQUUsRUFBSSxLQUFLLElBQUlBLEVBQU0sRUFBRSxFQUFHditCLEVBQUksQ0FBQyxFQUFFLENBQUMsRUFDeEN1K0IsRUFBTSxFQUFFLEVBQUksS0FBSyxJQUFJQSxFQUFNLEVBQUUsRUFBR3YrQixFQUFJLENBQUMsRUFBRSxDQUFDLEVBQ3hDdStCLEVBQU0sRUFBRSxFQUFJLEtBQUssSUFBSUEsRUFBTSxFQUFFLEVBQUd2K0IsRUFBSSxDQUFDLEVBQUUsQ0FBQyxHQUVyQzgrRCxFQUFHLElBQUdBLEVBQUcsRUFBSSxDQUFBLEdBQ2pCNDJELEVBQU8sQ0FBQyxFQUFFMTFILEVBQUksQ0FBQyxFQUFFLEVBQUV5M0gsR0FBUSxJQUFJLENBQUMsRUFDaEMzNEQsRUFBRyxFQUFFLEtBQUs0MkQsQ0FBSSxDQUNuQixDQUFNLE1BQ0YsSUFBSyxNQUFvQnhpQixHQUFhNmlCLEVBQUkvMUgsRUFBSSxJQUFJLEVBQUdBLEVBQUksR0FBRyxFQUFHLE1BQy9ELElBQUssS0FBc0IsQ0FDMUIsR0FBRyxDQUFDMUcsRUFBSyxXQUFZLE1BQ3JCLEtBQU0wRyxFQUFJLEdBQUtBLEVBQUksR0FDbEIyOUYsR0FBUTM5RixFQUFJLEdBQUcsRUFBSSxDQUFFLE1BQU9BLEVBQUksRUFBRSxJQUFLLE1BQVFBLEVBQUksT0FBUyxFQUFJLE9BQVEsQ0FBQyxFQUFFQSxFQUFJLE1BQVEsSUFDbkZva0gsS0FBV0EsR0FBVSxHQUFNL1csR0FBY3J0RyxFQUFJLEVBQUUsR0FBRyxHQUN0RHkrRixHQUFZZCxHQUFRMzlGLEVBQUksRUFBRSxDQUFDLENBQUMsQ0FFbEMsQ0FBTSxNQUNGLElBQUssS0FBa0IsQ0FDdEIsSUFBSWdtSCxHQUFTLENBQUEsRUFDVmhtSCxFQUFJLE9BQVMsT0FBUTA5RixHQUFRMTlGLEVBQUksQ0FBQyxFQUFJZ21ILEdBQVFBLEdBQU8sTUFBUWhtSCxFQUFJLE9BQ2pFQSxFQUFJLFNBQVUwOUYsR0FBUTE5RixFQUFJLENBQUMsRUFBSWdtSCxHQUFRQSxHQUFPLE9BQVMsSUFDdkRobUgsRUFBSSxNQUNOMDlGLEdBQVExOUYsRUFBSSxDQUFDLEVBQUlnbUgsR0FDakJBLEdBQU8sSUFBTWhtSCxFQUFJLElBQUtnbUgsR0FBTyxJQUFNdG5CLEdBQU0xK0YsRUFBSSxHQUFHLEVBRXRELENBQU0sTUFDRixJQUFLLElBQ0wsSUFBSyxJQUNMLElBQUssSUFDTCxJQUFLLElBQ0FvNUQsRUFBSSxVQUFVLEdBQUdpb0QsR0FBZ0Jqb0QsRUFBSSxVQUFVLEVBQUksQ0FBQSxDQUFFLEVBQ3pEQSxFQUFJLFVBQVUsRUFBRyxDQUFDLEdBQU0sT0FBUSxHQUFLLFFBQVMsR0FBSyxNQUFPLEdBQUssUUFBUSxFQUFHeTdELENBQVUsQ0FBQyxFQUFJNzBILEVBQ3pGLE1BQ0QsSUFBSyxLQUNBbzVELEVBQUksVUFBVSxHQUFHaW9ELEdBQWdCam9ELEVBQUksVUFBVSxFQUFJLENBQUEsQ0FBRSxFQUN6REEsRUFBSSxVQUFVLEVBQUUsT0FBU3A1RCxFQUFJLE9BQzdCbzVELEVBQUksVUFBVSxFQUFFLE9BQVNwNUQsRUFBSSxPQUM3QixNQUNELElBQUssS0FFREEsRUFBSSxNQUFLcXJILEVBQVMsTUFBTSxDQUFDLEVBQUUsSUFBTSxJQUNwQyxNQUNELElBQUssS0FBc0IySyxFQUFVaDJILEVBQUssTUFDMUMsSUFBSyxNQUFvQit0RyxFQUFTL3RHLEVBQUssTUFDdkMsSUFBSyxLQUFzQjgxSCxFQUFVOTFILEVBQUssTUFDMUMsSUFBSyxLQUVBczFILEVBQ0N4QyxFQUFRLFNBQVc5eUgsR0FBTzh5SCxFQUFRLEtBRHhCekgsRUFBUyxRQUFRLFNBQVdyckgsR0FBTyxlQUVqRCxLQUNGLENBQ0osTUFDT3FrRSxJQUFHLFFBQVEsTUFBTSxpQ0FBbUN3d0QsRUFBVyxTQUFTLEVBQUUsQ0FBQyxFQUMvRS8rRCxFQUFLLEdBQUt4dUIsQ0FFWCxDQUNELE9BQUFrcUQsRUFBRyxXQUFXeHdGLEdBQUtvMEgsQ0FBUyxFQUFFLEtBQUssU0FBUzF5SCxHQUFFZ0gsR0FBRyxDQUFFLE9BQU8sT0FBT2hILEVBQUMsRUFBSSxPQUFPZ0gsRUFBQyxDQUFFLENBQUUsRUFBRSxJQUFJLFNBQVN5eEIsR0FBRSxDQUFDLE9BQU9pNkYsRUFBVWo2RixFQUFDLEVBQUUsSUFBSyxDQUFDLEVBQzFIbC9CLEVBQVEsYUFBWXUxRixFQUFHLE9BQU80OEIsR0FDL0IsQ0FBQzU4QixFQUFHLFdBQVcsUUFBVStqQyxFQUFTLE1BQU0sR0FDMUMvakMsRUFBRyxXQUFXLEtBQUssUUFBUSxFQUV4QkEsRUFBRyxTQUFRQSxFQUFHLE9BQU8sT0FBWStqQyxJQUU5Qi9qQyxFQUFHLFNBQVMrakMsRUFDaEIvakMsRUFBRyxRQUFRbWxDLEVBQWdCLFFBQVEsU0FBU3AwSCxHQUFFbkQsR0FBRyxDQUFFb3lGLEVBQUcsT0FBT0EsRUFBRyxXQUFXcHlGLEVBQUMsQ0FBQyxFQUFFLGFBQWEsRUFBSW1ELEVBQUUsQ0FBRSxFQUN2R2l2RixFQUFHLFFBQVVjLEVBQ2JkLEVBQUcsSUFBTWpkLEdBQUloYSxFQUFTLEVBQ25CamhFLEVBQUssTUFBS2s0RixFQUFHLFdBQWFsNEYsRUFBSyxLQUMvQnkwRyxJQUFRdmMsRUFBRyxPQUFTdWMsR0FDdkJ2YyxFQUFHLFNBQVcsR0FDWHNrQyxJQUFZLFNBQVd0a0MsRUFBRyxTQUFTLFFBQVVza0MsR0FDN0NyWCxFQUFTLE1BQU0sT0FBUyxJQUFHNE0sRUFBUyxNQUFRNU0sRUFBUyxPQUN4RGp0QixFQUFHLFNBQVc2NUIsRUFDUDc1QixDQUNSLENBR0EsSUFBSWttQyxHQUFVLENBQ2IsR0FBSSxtQ0FDSixJQUFLLG1DQUNMLElBQUssa0NBQ04sRUFDQSxTQUFTQyxHQUFnQjN1RCxFQUFzQi80RCxFQUFPN00sRUFBRyxDQUV4RCxJQUFJdzBILEVBQU0xekQsR0FBSSxLQUFLOEUsRUFBSyw4QkFBOEIsRUFDdEQsR0FBRzR1RCxHQUFPQSxFQUFJLEtBQU8sRUFBRyxHQUFJLENBQzNCLElBQUlDLEVBQWEzc0MsR0FBd0Iwc0MsRUFBSy96QyxHQUFrQjZ6QyxHQUFRLEdBQUcsRUFDM0UsUUFBUXAwSCxLQUFLdTBILEVBQVk1bkgsRUFBTTNNLENBQUMsRUFBSXUwSCxFQUFXdjBILENBQUMsQ0FDbEQsT0FBU2xCLEVBQUcsQ0FBQyxHQUFHZ0IsRUFBRSxJQUFLLE1BQU1oQixDQUFjLENBRzFDLElBQUkwMUgsRUFBSzV6RCxHQUFJLEtBQUs4RSxFQUFLLHNCQUFzQixFQUM3QyxHQUFHOHVELEdBQU1BLEVBQUcsS0FBTyxFQUFHLEdBQUksQ0FDekIsSUFBSUMsRUFBVTdzQyxHQUF3QjRzQyxFQUFJaDBDLEdBQWM0ekMsR0FBUSxFQUFFLEVBQ2xFLFFBQVFqMUgsS0FBS3MxSCxFQUFZOW5ILEVBQU14TixDQUFDLEdBQUssT0FBTXdOLEVBQU14TixDQUFDLEVBQUlzMUgsRUFBUXQxSCxDQUFDLEVBQ2pFLE9BQVNMLEVBQUcsQ0FBQyxHQUFHZ0IsRUFBRSxJQUFLLE1BQU1oQixDQUFjLENBRXZDNk4sRUFBTSxjQUFnQkEsRUFBTSxnQkFDOUI2MkUsR0FBaUI3MkUsRUFBTSxhQUFjQSxFQUFNLGNBQWVBLEVBQU83TSxDQUFDLEVBQ2xFLE9BQU82TSxFQUFNLGFBQWMsT0FBT0EsRUFBTSxjQUUxQyxDQUNBLFNBQVMrbkgsR0FBZ0J4bUMsRUFBaUJ4b0IsRUFBc0IsQ0FDL0QsSUFBSWl2RCxFQUFZLENBQUEsRUFBSUMsRUFBVyxDQUFBLEVBQUlDLEVBQVcsQ0FBQSxFQUMxQyxFQUFJLEVBQUdDLEVBQ1BDLEVBQXlDbmxELEdBQVUyUSxHQUFrQixHQUFHLEVBQ3hFeTBDLEVBQXNDcGxELEdBQVU0USxHQUFjLEdBQUcsRUFDckUsR0FBRzBOLEVBQUcsTUFHTCxJQUZBNG1DLEVBQU9wM0gsR0FBS3d3RixFQUFHLEtBQUssRUFFaEIsRUFBSSxFQUFHLEVBQUk0bUMsRUFBSyxPQUFRLEVBQUUsR0FBSSxPQUFPLFVBQVUsZUFBZSxLQUFLQyxFQUFjRCxFQUFLLENBQUMsQ0FBQyxFQUFJSCxFQUFZLE9BQU8sVUFBVSxlQUFlLEtBQUtLLEVBQVdGLEVBQUssQ0FBQyxDQUFDLEVBQUlGLEVBQVdDLEdBQVUsS0FBSyxDQUFDQyxFQUFLLENBQUMsRUFBRzVtQyxFQUFHLE1BQU00bUMsRUFBSyxDQUFDLENBQUMsQ0FBQyxDQUFDLEVBRTlOLEdBQUc1bUMsRUFBRyxVQUdMLElBRkE0bUMsRUFBT3AzSCxHQUFLd3dGLEVBQUcsU0FBUyxFQUVwQixFQUFJLEVBQUcsRUFBSTRtQyxFQUFLLE9BQVEsRUFBRSxFQUFPLE9BQU8sVUFBVSxlQUFlLEtBQU01bUMsRUFBRyxPQUFPLEdBQUs0bUMsRUFBSyxDQUFDLENBQUMsSUFBSSxPQUFPLFVBQVUsZUFBZSxLQUFLQyxFQUFjRCxFQUFLLENBQUMsQ0FBQyxFQUFJSCxFQUFZLE9BQU8sVUFBVSxlQUFlLEtBQUtLLEVBQVdGLEVBQUssQ0FBQyxDQUFDLEVBQUlGLEVBQVdDLEdBQVUsS0FBSyxDQUFDQyxFQUFLLENBQUMsRUFBRzVtQyxFQUFHLFVBQVU0bUMsRUFBSyxDQUFDLENBQUMsQ0FBQyxDQUFDLEVBRXJTLElBQUlHLEVBQVksQ0FBQSxFQUNoQixJQUFJLEVBQUksRUFBRyxFQUFJSixFQUFTLE9BQVEsRUFBRSxFQUM5QjF0QyxHQUFVLFFBQVEwdEMsRUFBUyxDQUFDLEVBQUUsQ0FBQyxDQUFDLEVBQUksSUFBTXR4QyxHQUFpQixRQUFRc3hDLEVBQVMsQ0FBQyxFQUFFLENBQUMsQ0FBQyxFQUFJLElBQ3JGQSxFQUFTLENBQUMsRUFBRSxDQUFDLEdBQUssTUFDckJJLEVBQVUsS0FBS0osRUFBUyxDQUFDLENBQUMsRUFFeEJELEVBQVMsUUFBUWgwRCxHQUFJLE1BQU0sUUFBUThFLEVBQUssdUJBQTZCOGlCLEdBQXdCb3NDLEVBQVVSLEdBQVEsR0FBSVksRUFBV3gwQyxFQUFZLENBQUMsR0FDM0ltMEMsRUFBVSxRQUFVTSxFQUFVLFNBQVFyMEQsR0FBSSxNQUFNLFFBQVE4RSxFQUFLLCtCQUFxQzhpQixHQUF3Qm1zQyxFQUFXUCxHQUFRLElBQUtXLEVBQWN4MEMsR0FBa0IwMEMsRUFBVSxPQUFTQSxFQUFZLEtBQU1iLEdBQVEsR0FBRyxDQUFDLENBQ3ZPLENBRUEsU0FBU2MsR0FBYXh2RCxFQUFhL3NFLEVBQXFDLENBQ3BFQSxJQUFTQSxFQUFVLElBQ3ZCeTNILEdBQWN6M0gsQ0FBTyxFQUNyQms3RCxLQUNHbDdELEVBQVEsVUFBVSs2RCxHQUFTLzZELEVBQVEsUUFBUSxFQUM5QyxJQUFJdzhILEVBQXVCQyxFQUMzQixHQUFHMXZELEVBQUksVUFBVyxDQUNqQixHQUFHOUUsR0FBSSxLQUFLOEUsRUFBSyxhQUFhLEVBQUcsTUFBTSxJQUFJLE1BQU0sNEJBQTRCLEVBQzdFeXZELEVBQVV2MEQsR0FBSSxLQUFLOEUsRUFBSyxVQUFVLEVBQ2xDMHZELEVBQUt4MEQsR0FBSSxLQUFLOEUsRUFBSyxXQUFXLEdBQUs5RSxHQUFJLEtBQUs4RSxFQUFLLE9BQU8sQ0FDekQsS0FBTyxDQUNOLE9BQU8vc0UsRUFBUSxLQUFJLENBQ2xCLElBQUssU0FBVStzRSxFQUFNclEsR0FBSVAsR0FBYzRRLENBQUcsQ0FBQyxFQUFHLE1BQzlDLElBQUssU0FBVUEsRUFBTXJRLEdBQUlxUSxDQUFHLEVBQUcsTUFDL0IsSUFBSyxTQUFVLE1BQ2YsSUFBSyxRQUFhLE1BQU0sUUFBUUEsQ0FBRyxJQUFHQSxFQUFNLE1BQU0sVUFBVSxNQUFNLEtBQUtBLENBQUcsR0FBRyxLQUM3RSxDQUNEcEUsR0FBVW9FLEVBQUssQ0FBQyxFQUNoQjB2RCxFQUFNLENBQUMsUUFBUzF2RCxDQUFHLENBQ3BCLENBQ0EsSUFBb0IydkQsRUFFaEJDLEVBRUosR0FER0gsR0FBMEIvRCxHQUFjK0QsQ0FBTyxFQUMvQ3g4SCxFQUFRLFdBQWEsQ0FBQ0EsRUFBUSxXQUFZMDhILEVBQWEsQ0FBQSxNQUNkLENBQzNDLElBQUkvMUQsRUFBSXZLLEdBQVUsU0FBVyxRQUM3QixHQUFHcWdFLEdBQU1BLEVBQUcsUUFBU0MsRUFBWXhELEdBQWV1RCxFQUFHLFFBQVN6OEgsQ0FBTyxXQUUxRDI4SCxFQUFNMTBELEdBQUksS0FBSzhFLEVBQUssb0JBQW9CLElBQU00dkQsRUFBTSxRQUFTRCxFQUFZeDJCLEdBQUksWUFBWXkyQixFQUFNLFNBQVUzOEgsRUFBUSxLQUFPMm1FLEVBQUczbUUsYUFFM0gyOEgsRUFBTTEwRCxHQUFJLEtBQUs4RSxFQUFLLG9CQUFvQixJQUFNNHZELEVBQU0sUUFBU0QsRUFBWXgyQixHQUFJLFlBQVl5MkIsRUFBTSxTQUFVMzhILEVBQVEsS0FBTzJtRSxFQUFHM21FLFFBRS9ILE9BQUkyOEgsRUFBTTEwRCxHQUFJLEtBQUs4RSxFQUFLLEtBQUssSUFBTTR2RCxFQUFNLFFBQWUsSUFBSSxNQUFNLGtDQUFrQyxFQUM5RixJQUFJLE1BQU0sNkJBQTZCLEVBQy9DMzhILEVBQVEsU0FBVytzRSxFQUFJLFdBQWE5RSxHQUFJLEtBQUs4RSxFQUFLLDJCQUEyQixJQUFHMnZELEVBQVUsT0FBUzFoQixHQUFhanVDLENBQUcsRUFDdkgsQ0FFQSxJQUFJLzRELEVBQVEsQ0FBQSxFQUNaLE9BQUcrNEQsRUFBSSxXQUFXMnVELEdBQXdCM3VELEVBQStCLzRELEVBQU9oVSxDQUFPLEVBRXZGMDhILEVBQVUsTUFBUUEsRUFBVSxVQUFZMW9ILEVBQ3JDaFUsRUFBUSxZQUFXMDhILEVBQVUsSUFBTTN2RCxHQUUvQjJ2RCxDQUNQLENBR0EsU0FBU0UsR0FBYXJuQyxFQUFpQmw0RixFQUFxQyxDQUMzRSxJQUFJOEosRUFBSTlKLEdBQVEsR0FDWjB2RSxFQUFNOUUsR0FBSSxNQUFNLFFBQVEsQ0FBQyxLQUFLLEdBQUcsQ0FBQyxFQUNsQzQwRCxFQUFTLFlBQ2IsT0FBTzExSCxFQUFFLFVBQVksTUFBSyxDQUN6QixJQUFLLE1BQU9BLEVBQUUsU0FBVyxRQUV6QixJQUFLLE1BQVdBLEVBQUUsV0FBVUEsRUFBRSxTQUFXLE9BRXpDLElBQUssUUFBUzAxSCxFQUFTLFlBQWExMUgsRUFBRSxLQUFPLEVBQUcsTUFDaEQsSUFBSyxRQUFTMDFILEVBQVMsUUFBUzExSCxFQUFFLEtBQU8sRUFBRyxNQUM1QyxRQUFTLE1BQU0sSUFBSSxNQUFNLGdCQUFrQkEsRUFBRSxTQUFXLGNBQWMsQ0FDdEUsQ0FDRCxPQUFBOGdFLEdBQUksTUFBTSxRQUFROEUsRUFBSzh2RCxFQUFRQyxHQUFldm5DLEVBQUlwdUYsQ0FBQyxDQUFDLEVBQ2pEQSxFQUFFLE1BQVEsSUFBTW91RixFQUFHLE9BQVNBLEVBQUcsWUFBWXdtQyxHQUFnQnhtQyxFQUFJeG9CLENBQUcsRUFFbEU1bEUsRUFBRSxNQUFRLEdBQUtvdUYsRUFBRyxRQUFRNGxCLEdBQWFwdUMsRUFBSzlFLEdBQUksS0FBS3N0QixFQUFHLE9BQVEsQ0FBQyxLQUFNLE9BQU9BLEVBQUcsUUFBVSxTQUFXLFNBQVcsUUFBUSxDQUFDLENBQUMsRUFDdkh4b0IsQ0FDUixDQUVBLElBQUlxVCxHQUFpQixDQUNiLEVBQWUsQ0FBdUIsRUFBRThxQyxFQUFpQixFQUN6RCxFQUFlLENBQTBCLEVBQUVZLEVBQW9CLEVBQy9ELEVBQWUsQ0FBdUIsRUFBRXdCLEVBQWlCLEVBQ3pELEVBQWUsQ0FBMEIsRUFBRWQsRUFBb0IsRUFDL0QsRUFBZSxDQUF5QixFQUFFTCxFQUFtQixFQUM3RCxFQUFlLENBQXlCLEVBQUVlLEVBQW1CLEVBQzdELEVBQWUsQ0FBdUIsRUFBRVMsRUFBaUIsRUFDekQsRUFBZSxDQUF5QixFQUFFZCxFQUFtQixFQUM3RCxFQUFlLENBQTJCLEVBQUVxQixFQUFxQixFQUNqRSxFQUFlLENBQXdCLEVBQUVELEVBQWtCLEVBQzNELEdBQWUsQ0FBeUIsRUFBRUYsRUFBbUIsRUFDN0QsR0FBZSxDQUEwQixFQUFFQyxFQUFvQixFQUMvRCxHQUFlLENBQTJCLEVBQUUvQixFQUFxQixFQUNqRSxHQUFlLENBQXdCLEVBQUV1QixFQUFrQixFQUMzRCxHQUFlLENBQTJCLEVBQUViLEVBQXFCLEVBQ2pFLEdBQWUsQ0FBMEIsRUFBRUwsRUFBb0IsRUFDL0QsR0FBZSxDQUEwQixFQUFFYyxFQUFvQixFQUMvRCxHQUFlLENBQXdCLEVBQUVTLEVBQWtCLEVBQzNELEdBQWUsQ0FBMEIsRUFBRWIsRUFBb0IsRUFDL0QsR0FBZSxDQUF3QixFQUFFbHBDLEVBQWUsRUFDeEQsR0FBZSxDQUE0QixFQUMzQyxHQUFlLENBQTJCLEVBQzFDLEdBQWUsQ0FBNEIsRUFDM0MsR0FBZSxDQUEwQixFQUN6QyxHQUFlLENBQTJCLEVBQzFDLEdBQWUsQ0FBNkIsRUFDNUMsR0FBZSxDQUEwQixFQUN6QyxHQUFlLENBQTZCLEVBQzVDLEdBQWUsQ0FBNEIsRUFDM0MsR0FBZSxDQUE2QixFQUM1QyxHQUFlLENBQTJCLEVBQzFDLEdBQWUsQ0FBNEIsRUFDM0MsR0FBZSxDQUE4QixFQUM3QyxHQUFlLENBQTBCLEVBQ3pDLEdBQWUsQ0FBNEIsRUFDM0MsR0FBZSxDQUF5QixFQUFFLENBQUcsRUFDN0MsR0FBZSxDQUF1QixFQUFFLEVBQUksRUFDNUMsR0FBZSxDQUF3QixFQUFFLENBQUcsRUFDNUMsR0FBZSxDQUFzQixFQUFFLEVBQUksRUFDM0MsR0FBZSxDQUFxQixFQUFFb3ZDLEVBQWUsRUFDckQsR0FBZSxDQUE4QixFQUM3QyxHQUFlLENBQTJCLEVBQzFDLEdBQWUsQ0FBcUIsRUFBRTVmLEVBQWUsRUFDckQsR0FBZSxDQUFvQixFQUFFSCxFQUFjLEVBQ25ELEdBQWUsQ0FBcUIsRUFBRWEsRUFBZSxFQUNyRCxHQUFlLENBQXVCLEVBQUVTLEVBQWlCLEVBQ3pELEdBQWUsQ0FBbUIsRUFBRU4sRUFBYSxFQUNqRCxHQUFlLENBQXNCLEVBQ3JDLEdBQWUsQ0FBeUIsRUFBRTl3QixFQUFlLEVBQ3pELEdBQWUsQ0FBMEIsRUFDekMsR0FBZSxDQUFtQixFQUFFaTBCLEVBQWMsRUFDbEQsR0FBZSxDQUF5QixFQUFFLENBQUcsRUFDN0MsR0FBZSxDQUF1QixFQUFFLEVBQUksRUFDNUMsR0FBZSxDQUF5QixFQUFFLENBQUcsRUFDN0MsR0FBZSxDQUF1QixFQUFFLEVBQUksRUFDNUMsR0FBZSxDQUE4QixFQUFFLENBQUcsRUFDbEQsR0FBZSxDQUE0QixFQUFFLEVBQUksRUFDakQsR0FBZSxDQUEyQixFQUMxQyxHQUFlLENBQW9CLEVBQ25DLEdBQWUsQ0FBd0IsRUFBRTVaLEVBQWUsRUFDeEQsR0FBZSxDQUE0QixFQUFFZ3dCLEVBQXNCLEVBQ25FLEdBQWUsQ0FBK0IsRUFBRXRWLEVBQXlCLEVBQ3pFLEdBQWUsQ0FBcUIsRUFBRW1YLEVBQWUsRUFDckQsR0FBZSxDQUEyQixFQUMxQyxHQUFlLENBQTJCLEVBQzFDLEdBQWUsQ0FBNEIsRUFDM0MsR0FBZSxDQUEyQixFQUMxQyxHQUFlLENBQTRCLEVBQzNDLEdBQWUsQ0FBMkIsRUFDMUMsSUFBZSxDQUE0QixFQUMzQyxJQUFlLENBQTJCLEVBQUUsQ0FBRyxFQUMvQyxJQUFlLENBQXlCLEVBQUUsRUFBSSxFQUM5QyxJQUFlLENBQTBCLEVBQUUsRUFBRyxFQUFFeHZDLEdBQVcsRUFBRSxDQUFHLEVBQ2hFLElBQWUsQ0FBd0IsRUFBRSxFQUFJLEVBQzdDLElBQWUsQ0FBNkIsRUFBRSxDQUFHLEVBQ2pELElBQWUsQ0FBMkIsRUFBRSxFQUFJLEVBQ2hELElBQWUsQ0FBK0IsRUFBRSxDQUFHLEVBQ25ELElBQWUsQ0FBNkIsRUFBRSxFQUFJLEVBQ2xELElBQWUsQ0FBNEIsRUFBRSxFQUFHLEVBQUVtdkMsRUFBc0IsRUFDeEUsSUFBZSxDQUEwQixFQUFFLEVBQUksRUFDL0MsSUFBZSxDQUE2QixFQUFFLENBQUcsRUFDakQsSUFBZSxDQUEyQixFQUFFLEVBQUksRUFDaEQsSUFBZSxDQUE0QixFQUFFLENBQUcsRUFDaEQsSUFBZSxDQUEwQixFQUFFLEVBQUksRUFDL0MsSUFBZSxDQUErQixFQUFFLENBQUcsRUFDbkQsSUFBZSxDQUE2QixFQUFFLEVBQUksRUFDbEQsSUFBZSxDQUErQixFQUFFLENBQUcsRUFDbkQsSUFBZSxDQUE2QixFQUFFLEVBQUksRUFDbEQsSUFBZSxDQUF1QixFQUFFdEQsRUFBaUIsRUFDekQsSUFBZSxDQUFzQixFQUFFSCxHQUFnQixFQUFFLEVBQUksRUFDN0QsSUFBZSxDQUFxQixFQUFFaUQsRUFBZSxFQUNyRCxJQUFlLENBQW9CLEVBQ25DLElBQWUsQ0FBdUIsRUFBRW9FLEVBQWlCLEVBQ3pELElBQWUsQ0FBMEIsRUFDekMsSUFBZSxDQUE0QixFQUMzQyxJQUFlLENBQXlCLEVBQUVGLEVBQW1CLEVBQzdELElBQWUsQ0FBeUIsRUFDeEMsSUFBZSxDQUF5QixFQUN4QyxJQUFlLENBQXlCLEVBQUUsRUFBRyxFQUFFam5CLEVBQW1CLEVBQ2xFLElBQWUsQ0FBdUIsRUFBRSxFQUFJLEVBQzVDLElBQWUsQ0FBNkIsRUFBRSxFQUFHLEVBQUVubUIsRUFBb0IsRUFDdkUsSUFBZSxDQUEyQixFQUFFLEVBQUksRUFDaEQsSUFBZSxDQUFrQyxFQUFFLENBQUcsRUFDdEQsSUFBZSxDQUFnQyxFQUFFLEVBQUksRUFDckQsSUFBZSxDQUE2QixFQUFFLENBQUcsRUFDakQsSUFBZSxDQUEyQixFQUFFLEVBQUksRUFDaEQsSUFBZSxDQUF1QixFQUN0QyxJQUFlLENBQTRCLEVBQzNDLElBQWUsQ0FBMkIsRUFDMUMsSUFBZSxDQUE0QixFQUMzQyxJQUFlLENBQThCLEVBQzdDLElBQWUsQ0FBbUMsRUFBRSxDQUFHLEVBQ3ZELElBQWUsQ0FBaUMsRUFBRSxFQUFJLEVBQ3RELElBQWUsQ0FBNkIsRUFDNUMsSUFBZSxDQUFxQyxFQUNwRCxJQUFlLENBQTBCLEVBQUUyb0MsRUFBb0IsRUFDL0QsSUFBZSxDQUFnQyxFQUFFLENBQUcsRUFDcEQsSUFBZSxDQUE4QixFQUFFLEVBQUksRUFDbkQsSUFBZSxDQUFtQyxFQUFFLENBQUcsRUFDdkQsSUFBZSxDQUFpQyxFQUFFLEVBQUksRUFDdEQsSUFBZSxDQUErQixFQUFFLENBQUcsRUFDbkQsSUFBZSxDQUE2QixFQUFFLEVBQUksRUFDbEQsSUFBZSxDQUE4QixFQUFFLENBQUcsRUFDbEQsSUFBZSxDQUE0QixFQUFFLEVBQUksRUFDakQsSUFBZSxDQUErQixFQUFFLENBQUcsRUFDbkQsSUFBZSxDQUE2QixFQUFFLEVBQUksRUFDbEQsSUFBZSxDQUErQixFQUFFLENBQUcsRUFDbkQsSUFBZSxDQUE2QixFQUFFLEVBQUksRUFDbEQsSUFBZSxDQUE4QixFQUFFLENBQUcsRUFDbEQsSUFBZSxDQUE0QixFQUFFLEVBQUksRUFDakQsSUFBZSxDQUE2QixFQUFFLENBQUcsRUFDakQsSUFBZSxDQUEyQixFQUFFLEVBQUksRUFDaEQsSUFBZSxDQUF1QyxFQUFFLENBQUcsRUFDM0QsSUFBZSxDQUFxQyxFQUFFLEVBQUksRUFDMUQsSUFBZSxDQUFvQyxFQUFFLENBQUcsRUFDeEQsSUFBZSxDQUFrQyxFQUFFLEVBQUksRUFDdkQsSUFBZSxDQUFrQyxFQUFFLENBQUcsRUFDdEQsSUFBZSxDQUFnQyxFQUFFLEVBQUksRUFDckQsSUFBZSxDQUFxQyxFQUFFLENBQUcsRUFDekQsSUFBZSxDQUFtQyxFQUFFLEVBQUksRUFDeEQsSUFBZSxDQUFtQyxFQUFFLENBQUcsRUFDdkQsSUFBZSxDQUFpQyxFQUFFLEVBQUksRUFDdEQsSUFBZSxDQUErQixFQUFFLENBQUcsRUFDbkQsSUFBZSxDQUE2QixFQUFFLEVBQUksRUFDbEQsSUFBZSxDQUFpQyxFQUFFLENBQUcsRUFDckQsSUFBZSxDQUErQixFQUFFLEVBQUksRUFDcEQsSUFBZSxDQUFnQyxFQUFFLENBQUcsRUFDcEQsSUFBZSxDQUE4QixFQUFFLEVBQUksRUFDbkQsSUFBZSxDQUFnQyxFQUFFLENBQUcsRUFDcEQsSUFBZSxDQUE4QixFQUFFLEVBQUksRUFDbkQsSUFBZSxDQUErQixFQUFFLENBQUcsRUFDbkQsSUFBZSxDQUE2QixFQUFFLEVBQUksRUFDbEQsSUFBZSxDQUFnQyxFQUFFLENBQUcsRUFDcEQsSUFBZSxDQUE4QixFQUFFLEVBQUksRUFDbkQsSUFBZSxDQUErQixFQUFFLENBQUcsRUFDbkQsSUFBZSxDQUE2QixFQUFFLEVBQUksRUFDbEQsSUFBZSxDQUE4QixFQUFFLENBQUcsRUFDbEQsSUFBZSxDQUE0QixFQUFFLEVBQUksRUFDakQsSUFBZSxDQUErQixFQUFFLENBQUcsRUFDbkQsSUFBZSxDQUE2QixFQUFFLEVBQUksRUFDbEQsSUFBZSxDQUFnQyxFQUFFLENBQUcsRUFDcEQsSUFBZSxDQUE4QixFQUFFLEVBQUksRUFDbkQsSUFBZSxDQUFnQyxFQUFFLENBQUcsRUFDcEQsSUFBZSxDQUE4QixFQUFFLEVBQUksRUFDbkQsSUFBZSxDQUFtQyxFQUFFLENBQUcsRUFDdkQsSUFBZSxDQUFpQyxFQUFFLEVBQUksRUFDdEQsSUFBZSxDQUFxQyxFQUFFLENBQUcsRUFDekQsSUFBZSxDQUFtQyxFQUFFLEVBQUksRUFDeEQsSUFBZSxDQUFvQyxFQUFFLENBQUcsRUFDeEQsSUFBZSxDQUFrQyxFQUFFLEVBQUksRUFDdkQsSUFBZSxDQUFxQyxFQUFFLENBQUcsRUFDekQsSUFBZSxDQUFtQyxFQUFFLEVBQUksRUFDeEQsSUFBZSxDQUFvQyxFQUFFLENBQUcsRUFDeEQsSUFBZSxDQUFrQyxFQUFFLEVBQUksRUFDdkQsSUFBZSxDQUFvQyxFQUFFLENBQUcsRUFDeEQsSUFBZSxDQUFrQyxFQUFFLEVBQUksRUFDdkQsSUFBZSxDQUFrQyxFQUFFLENBQUcsRUFDdEQsSUFBZSxDQUFnQyxFQUFFLEVBQUksRUFDckQsSUFBZSxDQUFpQyxFQUFFLENBQUcsRUFDckQsSUFBZSxDQUErQixFQUFFLEVBQUksRUFDcEQsSUFBZSxDQUFnQyxFQUFFLENBQUcsRUFDcEQsSUFBZSxDQUE4QixFQUFFLEVBQUksRUFDbkQsSUFBZSxDQUFrQyxFQUFFLENBQUcsRUFDdEQsSUFBZSxDQUFnQyxFQUFFLEVBQUksRUFDckQsSUFBZSxDQUFpQyxFQUFFLENBQUcsRUFDckQsSUFBZSxDQUErQixFQUFFLEVBQUksRUFDcEQsSUFBZSxDQUEyQixFQUFFLENBQUcsRUFDL0MsSUFBZSxDQUF5QixFQUFFLEVBQUksRUFDOUMsSUFBZSxDQUErQixFQUFFLENBQUcsRUFDbkQsSUFBZSxDQUE2QixFQUFFLEVBQUksRUFDbEQsSUFBZSxDQUE4QixFQUFFLENBQUcsRUFDbEQsSUFBZSxDQUE0QixFQUFFLEVBQUksRUFDakQsSUFBZSxDQUE0QixFQUFFLENBQUcsRUFDaEQsSUFBZSxDQUEwQixFQUFFLEVBQUksRUFDL0MsSUFBZSxDQUEyQixFQUFFLENBQUcsRUFDL0MsSUFBZSxDQUF5QixFQUFFLEVBQUksRUFDOUMsSUFBZSxDQUE2QixFQUFFLENBQUcsRUFDakQsSUFBZSxDQUEyQixFQUFFLEVBQUksRUFDaEQsSUFBZSxDQUE0QixFQUFFLENBQUcsRUFDaEQsSUFBZSxDQUEwQixFQUFFLEVBQUksRUFDL0MsSUFBZSxDQUFnQyxFQUFFLENBQUcsRUFDcEQsSUFBZSxDQUE4QixFQUFFLEVBQUksRUFDbkQsSUFBZSxDQUFnQyxFQUFFLENBQUcsRUFDcEQsSUFBZSxDQUE4QixFQUFFLEVBQUksRUFDbkQsSUFBZSxDQUE4QixFQUFFLENBQUcsRUFDbEQsSUFBZSxDQUE0QixFQUFFLEVBQUksRUFDakQsSUFBZSxDQUE2QixFQUFFLENBQUcsRUFDakQsSUFBZSxDQUEyQixFQUFFLEVBQUksRUFDaEQsSUFBZSxDQUE2QixFQUFFLENBQUcsRUFDakQsSUFBZSxDQUEyQixFQUFFLEVBQUksRUFDaEQsSUFBZSxDQUE0QixFQUFFLENBQUcsRUFDaEQsSUFBZSxDQUEwQixFQUFFLEVBQUksRUFDL0MsSUFBZSxDQUEwQixFQUFFLENBQUcsRUFDOUMsSUFBZSxDQUF3QixFQUFFLEVBQUksRUFDN0MsSUFBZSxDQUF5QixFQUFFLENBQUcsRUFDN0MsSUFBZSxDQUF1QixFQUFFLEVBQUksRUFDNUMsSUFBZSxDQUE2QixFQUM1QyxJQUFlLENBQWdDLEVBQUUsQ0FBRyxFQUNwRCxJQUFlLENBQThCLEVBQUUsRUFBSSxFQUNuRCxJQUFlLENBQTRCLEVBQUUsQ0FBRyxFQUNoRCxJQUFlLENBQXdCLEVBQUUsRUFBSSxFQUM3QyxJQUFlLENBQTBCLEVBQUUsQ0FBRyxFQUM5QyxJQUFlLENBQTJCLEVBQUUsQ0FBRyxFQUMvQyxJQUFlLENBQXlCLEVBQUUsRUFBSSxFQUM5QyxJQUFlLENBQTBCLEVBQUUsQ0FBRyxFQUM5QyxJQUFlLENBQXdCLEVBQUUsRUFBSSxFQUM3QyxJQUFlLENBQTJCLEVBQUUsQ0FBRyxFQUMvQyxJQUFlLENBQXlCLEVBQUUsRUFBSSxFQUM5QyxJQUFlLENBQTBCLEVBQUUsQ0FBRyxFQUM5QyxJQUFlLENBQXdCLEVBQUUsRUFBSSxFQUM3QyxJQUFlLENBQTJCLEVBQUUsQ0FBRyxFQUMvQyxJQUFlLENBQXlCLEVBQUUsRUFBSSxFQUM5QyxJQUFlLENBQTBCLEVBQUUsQ0FBRyxFQUM5QyxJQUFlLENBQXdCLEVBQUUsRUFBSSxFQUM3QyxJQUFlLENBQTJCLEVBQUUsQ0FBRyxFQUMvQyxJQUFlLENBQXlCLEVBQUUsRUFBSSxFQUM5QyxJQUFlLENBQTBCLEVBQUUsQ0FBRyxFQUM5QyxJQUFlLENBQXdCLEVBQUUsRUFBSSxFQUM3QyxJQUFlLENBQTZCLEVBQUUsQ0FBRyxFQUNqRCxJQUFlLENBQTJCLEVBQUUsRUFBSSxFQUNoRCxJQUFlLENBQThCLEVBQUUsQ0FBRyxFQUNsRCxJQUFlLENBQTRCLEVBQUUsRUFBSSxFQUNqRCxJQUFlLENBQThCLEVBQUUsQ0FBRyxFQUNsRCxJQUFlLENBQTRCLEVBQUUsRUFBSSxFQUNqRCxJQUFlLENBQStCLEVBQUUsQ0FBRyxFQUNuRCxJQUFlLENBQTZCLEVBQUUsRUFBSSxFQUNsRCxJQUFlLENBQThCLEVBQUUsQ0FBRyxFQUNsRCxJQUFlLENBQTRCLEVBQUUsRUFBSSxFQUNqRCxJQUFlLENBQThCLEVBQUUsQ0FBRyxFQUNsRCxJQUFlLENBQTRCLEVBQUUsRUFBSSxFQUNqRCxJQUFlLENBQStCLEVBQUUsQ0FBRyxFQUNuRCxJQUFlLENBQTZCLEVBQUUsRUFBSSxFQUNsRCxJQUFlLENBQThCLEVBQUUsRUFBSSxFQUNuRCxJQUFlLENBQWdDLEVBQUUsQ0FBRyxFQUNwRCxJQUFlLENBQTBCLEVBQUUsRUFBSSxFQUMvQyxJQUFlLENBQTJCLEVBQUUsQ0FBRyxFQUMvQyxJQUFlLENBQXlCLEVBQUUsRUFBSSxFQUM5QyxJQUFlLENBQTBCLEVBQUUsQ0FBRyxFQUM5QyxJQUFlLENBQXdCLEVBQUUsRUFBSSxFQUM3QyxJQUFlLENBQThCLEVBQUUsQ0FBRyxFQUNsRCxJQUFlLENBQTRCLEVBQUUsRUFBSSxFQUNqRCxJQUFlLENBQStCLEVBQUUsQ0FBRyxFQUNuRCxJQUFlLENBQTZCLEVBQUUsRUFBSSxFQUNsRCxJQUFlLENBQTZCLEVBQUUsQ0FBRyxFQUNqRCxJQUFlLENBQTJCLEVBQUUsRUFBSSxFQUNoRCxJQUFlLENBQTRCLEVBQUUsQ0FBRyxFQUNoRCxJQUFlLENBQTBCLEVBQUUsRUFBSSxFQUMvQyxJQUFlLENBQStCLEVBQUUsQ0FBRyxFQUNuRCxJQUFlLENBQTZCLEVBQUUsRUFBSSxFQUNsRCxJQUFlLENBQThCLEVBQUUsQ0FBRyxFQUNsRCxJQUFlLENBQTRCLEVBQUUsRUFBSSxFQUNqRCxJQUFlLENBQThCLEVBQUUsQ0FBRyxFQUNsRCxJQUFlLENBQTRCLEVBQUUsRUFBSSxFQUNqRCxJQUFlLENBQStCLEVBQUUsQ0FBRyxFQUNuRCxJQUFlLENBQXdCLEVBQUUvVyxFQUFrQixFQUMzRCxJQUFlLENBQTZCLEVBQUUsRUFBSSxFQUNsRCxJQUFlLENBQTJCLEVBQUVNLEdBQXFCLEVBQUUsQ0FBRyxFQUN0RSxJQUFlLENBQXlCLEVBQUUsRUFBSSxFQUM5QyxJQUFlLENBQTJCLEVBQUUsQ0FBRyxFQUMvQyxJQUFlLENBQXlCLEVBQUUsRUFBSSxFQUM5QyxJQUFlLENBQWlDLEVBQUUsQ0FBRyxFQUNyRCxJQUFlLENBQStCLEVBQUUsRUFBSSxFQUNwRCxJQUFlLENBQTBCLEVBQUUsQ0FBRyxFQUM5QyxJQUFlLENBQXdCLEVBQUUsRUFBSSxFQUM3QyxJQUFlLENBQThCLEVBQUUsQ0FBRyxFQUNsRCxJQUFlLENBQTRCLEVBQUUsRUFBSSxFQUNqRCxJQUFlLENBQTZCLEVBQUUs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QWlDLEVBQUUsQ0FBRyxFQUNyRCxJQUFlLENBQStCLEVBQUUsRUFBSSxFQUNwRCxJQUFlLENBQWdDLEVBQUUsQ0FBRyxFQUNwRCxJQUFlLENBQThCLEVBQUUsRUFBSSxFQUNuRCxJQUFlLENBQWlDLEVBQUUsQ0FBRyxFQUNyRCxJQUFlLENBQStCLEVBQUUsRUFBSSxFQUNwRCxJQUFlLENBQWdDLEVBQUUsQ0FBRyxFQUNwRCxJQUFlLENBQThCLEVBQUUsRUFBSSxFQUNuRCxJQUFlLENBQWtDLEVBQUUsQ0FBRyxFQUN0RCxJQUFlLENBQWdDLEVBQUUsRUFBSSxFQUNyRCxJQUFlLENBQWlDLEVBQUUsQ0FBRyxFQUNyRCxJQUFlLENBQStCLEVBQUUsRUFBSSxFQUNwRCxJQUFlLENBQW9DLEVBQUUsQ0FBRyxFQUN4RCxJQUFlLENBQWtDLEVBQUUsRUFBSSxFQUN2RCxJQUFlLENBQW1DLEVBQUUsQ0FBRyxFQUN2RCxJQUFlLENBQWlDLEVBQUUsRUFBSSxFQUN0RCxJQUFlLENBQXlCLEVBQUUsQ0FBRyxFQUM3QyxJQUFlLENBQXVCLEVBQUUsRUFBSSxFQUM1QyxJQUFlLENBQTBCLEVBQUUsQ0FBRyxFQUM5QyxJQUFlLENBQXdCLEVBQUUsRUFBSSxFQUM3QyxJQUFlLENBQWtDLEVBQUUsQ0FBRyxFQUN0RCxJQUFlLENBQWdDLEVBQUUsRUFBSSxFQUNyRCxJQUFlLENBQWlDLEVBQUUsQ0FBRyxFQUNyRCxJQUFlLENBQStCLEVBQUUsRUFBSSxFQUNwRCxJQUFlLENBQTJCLEVBQUUsQ0FBRyxFQUMvQyxJQUFlLENBQXlCLEVBQUUsRUFBSSxFQUM5QyxJQUFlLENBQTBCLEVBQUUsQ0FBRyxFQUM5QyxJQUFlLENBQXdCLEVBQUUsRUFBSSxFQUM3QyxJQUFlLENBQW1DLEVBQUUsQ0FBRyxFQUN2RCxJQUFlLENBQWlDLEVBQUUsRUFBSSxFQUN0RCxJQUFlLENBQTJDLEVBQUUsQ0FBRyxFQUMvRCxJQUFlLENBQXlDLEVBQUUsRUFBSSxFQUM5RCxJQUFlLENBQTRCLEVBQUUsQ0FBRyxFQUNoRCxJQUFlLENBQTBCLEVBQUUs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cEcsRUFBUSxRQUFRLElBQUtuc0ksR0FBSyxDQUMvQixNQUFBbVAsRUFBTSxDQUFFLEdBQUduUCxHQUNqQixjQUFPbVAsRUFBSSxNQUNYLE9BQU9BLEVBQUksSUFDSkEsQ0FBQSxDQUNSLEVBRURtOUgsR0FBMkI3cEYsRUFBUWowQyxFQUFNMjlILEVBQVEsU0FBVSxDQUN6RCxPQUFRQSxFQUFRLE9BQ2hCLE9BQVFBLEVBQVEsT0FFaEIsS0FBQXBwRyxDQUFBLENBQ0QsTUFHRixDQUNILEVBRUEsSUFBSTBoRixFQUFpQixDQUNuQixPQUFPLElBQUksUUFBUSxDQUFDMTNHLEVBQVNDLElBQVUsQ0FPckMsTUFBTW0vSCxFQUFxQixPQUFPLE9BQU8sQ0FBQSxFQUxDLENBQ3hDLEtBQU0sR0FDTixTQUFVLElBQUEsRUFHZ0QxbkIsQ0FBTSxFQUU1RC93RCxFQUFPLElBQUksS0FBSyxDQUFDeTRFLEVBQVEsSUFBSSxFQUFHLENBQUUsS0FBTSwwQkFBQSxDQUE0QixFQUMxRVYsR0FBVSxPQUFPLzNFLEVBQU15NEUsRUFBUSxTQUFXLE1BQU0sTUFHakQsQ0FDSCxjQUd3QixDQUN4QixNQUFNLElBQUlwcEUsRUFBVSxDQUNYLE9BQUEsTUFBTThvRSxHQUFrQjlvRSxDQUFJLENBQ3JDIiwieF9nb29nbGVfaWdub3JlTGlzdCI6WzE4LDIwLDIxLDIyLDQzLDgwLDk1LDk2LDEzMCwxMzFdfQ==

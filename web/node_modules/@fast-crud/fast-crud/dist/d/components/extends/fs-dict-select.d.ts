/**
 * 字典选择框
 * 支持el-select|a-select的属性配置
 */
declare const _default: import("vue").DefineComponent<{
    /**
     * 字典
     */
    dict: {};
    /**
     * 可选项，比dict.data优先级高
     */
    options: {
        type: ArrayConstructor;
    };
    /**
     * placeholder
     */
    placeholder: {
        type: StringConstructor;
    };
    /**
     * select组件的插槽
     */
    slots: {};
    /**
     * 自定义label的render方法
     */
    renderLabel: {
        type: FunctionConstructor;
    };
    /**
     * 转换DictData
     */
    transformDictData: {
        type: FunctionConstructor;
        default: any;
    };
}, {
    computedOptions: import("vue").ComputedRef<any>;
    onSelectedChange: (value: any) => void;
    createComputedOptions: () => import("vue").ComputedRef<any>;
    loadDict: (reload?: boolean) => Promise<void>;
    reloadDict: () => Promise<void>;
    clearDict: () => void;
    getDictData: () => any;
    getDict: () => any;
    watchValue: () => void;
    getValue: (item: any) => any;
    getLabel: (item: any) => any;
    getChildren: (item: any) => any;
    getColor: (item: any) => any;
    removePropValue: (item: any, prop: any) => void;
    curDict: import("../../use").Dict<any>;
    computedPlaceholder: import("vue").ComputedRef<any>;
}, unknown, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, ("change" | "dict-change" | "selected-change")[], "change" | "dict-change" | "selected-change", import("vue").PublicProps, Readonly<import("vue").ExtractPropTypes<{
    /**
     * 字典
     */
    dict: {};
    /**
     * 可选项，比dict.data优先级高
     */
    options: {
        type: ArrayConstructor;
    };
    /**
     * placeholder
     */
    placeholder: {
        type: StringConstructor;
    };
    /**
     * select组件的插槽
     */
    slots: {};
    /**
     * 自定义label的render方法
     */
    renderLabel: {
        type: FunctionConstructor;
    };
    /**
     * 转换DictData
     */
    transformDictData: {
        type: FunctionConstructor;
        default: any;
    };
}>> & {
    onChange?: (...args: any[]) => any;
    "onDict-change"?: (...args: any[]) => any;
    "onSelected-change"?: (...args: any[]) => any;
}, {
    transformDictData: Function;
}, {}>;
export default _default;

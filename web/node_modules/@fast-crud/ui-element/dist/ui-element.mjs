import { ElDialog as w, useFormItem as v, ElMessage as y, ElNotification as V, ElMessageBox as C } from "element-plus";
import { useUiRender as x, uiContext as S } from "@fast-crud/ui-interface";
import { computed as k, createVNode as h, createTextVNode as B } from "vue";
import p, { isFunction as N } from "lodash-es";
import * as K from "@element-plus/icons-vue";
const {
  buildBinding: d,
  creator: t
} = x();
class R {
  constructor(u) {
    this.type = "element", this.modelValue = "modelValue", this.switch = t({
      activeColor: "active-color",
      activeText: "active-text",
      activeValue: "active-value",
      inactiveColor: "inactive-color",
      inactiveText: "inactive-text",
      inactiveValue: "inactive-value",
      modelValue: "modelValue",
      name: "el-switch"
    }), this.formWrapper = t({
      visible: "modelValue",
      customClass: (e) => "class",
      titleSlotName: "header",
      buildOnClosedBind(e, l) {
        return {
          onClosed: l
        };
      },
      buildWidthBind(e, l) {
        return {
          width: l
        };
      },
      buildInitBind(e) {
        return {};
      },
      buildInnerBind() {
        return {};
      },
      name: "fs-form-wrapper"
    }), this.messageBox = t({
      name: "el-message-box",
      instance: void 0,
      open: async (e) => this.messageBox.instance(e),
      confirm: async (e) => this.messageBox.instance(e)
    }), this.message = t({
      instance: void 0,
      name: "el-message",
      open: (e) => {
        this.message.instance.open(e);
      },
      success: (e) => {
        this.message.instance.success(e);
      },
      error: (e) => {
        this.message.instance.error(e);
      },
      warn: (e) => {
        this.message.instance.warning(e);
      },
      info: (e) => {
        this.message.instance(e);
      }
    }), this.notification = t({
      instance: void 0,
      name: "el-notification",
      open: (e) => {
        this.notification.instance.open(e);
      },
      success: (e) => {
        this.notification.instance.success(e);
      },
      error: (e) => {
        this.notification.instance.error(e);
      },
      warn: (e) => {
        this.notification.instance.warn(e);
      },
      info: (e) => {
        this.notification.instance.success(e);
      }
    }), this.icon = t({
      name: "",
      isComponent: !1
    }), this.icons = {
      add: "plus",
      columnsFilter: "set-up",
      compact: "rank",
      edit: "edit",
      remove: "delete",
      search: "search",
      refresh: "refresh",
      export: "upload",
      check: "check",
      sort: "sort",
      left: "arrow-left",
      right: "arrow-right",
      close: "close",
      arrowLeft: "left",
      arrowRight: "right",
      more: "more",
      plus: "plus",
      zoomIn: "zoom-in",
      zoomOut: "zoom-out",
      refreshLeft: "refresh-left",
      refreshRight: "refresh-right",
      upload: "upload",
      fullScreen: "full-screen",
      unFullScreen: "full-screen",
      question: "question-filled",
      caretUp: "CaretTop",
      caretDown: "CaretBottom",
      eye: "View",
      info: "warning"
    }, this.dialog = t({
      name: "el-dialog",
      visible: "modelValue",
      customClass: "class",
      titleSlotName: "header",
      footerSlotName: "footer",
      buildOnClosedBind(e) {
        return {
          onClosed: e
        };
      },
      footer() {
        return {};
      },
      open(e) {
        w.open(e);
      },
      builder(e) {
        return d(this, e, {
          props: {
            title: e.title,
            width: e.width
          },
          slots: {
            footer: e.footer
          }
        });
      }
    }), this.buttonGroup = t({
      name: "el-button-group"
    }), this.col = t({
      name: "el-col"
    }), this.row = t({
      name: "el-row"
    }), this.card = t({
      name: "el-card"
    }), this.checkboxGroup = t({
      name: "el-checkbox-group",
      modelValue: "modelValue"
    }), this.checkbox = t({
      name: "el-checkbox",
      resolveEvent(e) {
        return e;
      },
      modelValue: "modelValue",
      value: "value",
      onChange(e) {
        return {
          "onUpdate:modelValue": e
        };
      }
    }), this.drawer = t({
      name: "el-drawer",
      visible: "modelValue",
      customClass: "class",
      width: "size"
    }), this.collapseTransition = t({
      name: "el-collapse-transition"
    }), this.option = t({
      name: "el-option",
      value: "value",
      label: "label"
    }), this.select = t({
      name: "el-select",
      modelValue: "modelValue",
      clearable: "clearable",
      filterable: "filterable",
      buildMultiBinding(e) {
        return {
          multiple: e
        };
      }
    }), this.treeSelect = t({
      name: "el-tree-select",
      modelValue: "modelValue",
      clearable: "select.clearable",
      options: "data",
      value: "tree.value",
      label: "tree.label",
      children: "tree.children",
      buildOptionKeysNameBinding(e) {
        return {
          props: {
            label: e.label,
            value: e.value,
            children: e.children
          }
        };
      }
    }), this.radio = t({
      name: "el-radio",
      value: "value",
      builder(e) {
        return d(this, e, {
          props: {
            [this.value]: e.value
          }
        });
      }
    }), this.radioButton = t({
      name: "el-radio-button",
      value: "value",
      builder(e) {
        return d(this, e, {
          props: {
            [this.value]: e.value
          }
        });
      }
    }), this.radioGroup = t({
      name: "el-radio-group",
      modelValue: "modelValue"
    }), this.cascader = t({
      name: "el-cascader",
      modelValue: "modelValue",
      clearable: "clearable",
      fieldNames(e) {
        return {
          props: e
        };
      }
    }), this.form = t({
      name: "el-form",
      inlineLayout: {
        layout: "inline",
        inline: !0
      },
      validateWrap: async (e) => e.validate(),
      transformValidateErrors: (e) => {
        const l = {};
        return p.forEach(e, (n, a) => {
          l[a] = !0;
        }), l;
      }
    }), this.formItem = t({
      name: "el-form-item",
      prop: "prop",
      label: "label",
      rules: "rules",
      skipValidationWrapper: "div",
      injectFormItemContext() {
        const {
          formItem: e
        } = v();
        return {
          async onChange() {
            await (e == null ? void 0 : e.validate("change"));
          },
          async onBlur() {
            await (e == null ? void 0 : e.validate("blur"));
          }
        };
      },
      builder(e) {
        return d(this, e, {});
      }
    }), this.button = t({
      name: "el-button",
      textType: {
        text: !0
      },
      linkType: {
        link: !0,
        type: "primary"
      },
      circle: {
        circle: !0
      },
      colors: (e) => ({
        type: e
      })
    }), this.pagination = t({
      name: "el-pagination",
      currentPage: "currentPage",
      total: "total",
      pageCount: null,
      onChange({
        setCurrentPage: e,
        setPageSize: l,
        doAfterChange: n
      }) {
        return {
          // element 页码改动回调
          onCurrentChange(a) {
            e(a), n();
          },
          onSizeChange(a) {
            l(a), n();
          }
        };
      }
    }), this.tableColumn = t({
      name: "el-table-column",
      label: "label",
      prop: "prop",
      row: "row",
      index: "$index"
    }), this.tableColumnGroup = t({
      name: "el-table-column",
      label: "label",
      prop: "prop",
      row: "row",
      index: "$index"
    }), this.table = t({
      name: "el-table",
      data: "data",
      renderMode: "slot",
      defaultRowKey: "id",
      fixedHeaderNeedComputeBodyHeight: !1,
      buildMaxHeight: (e) => ({
        maxHeight: e
      }),
      hasMaxHeight: (e) => (e == null ? void 0 : e.maxHeight) != null,
      headerDomSelector: "",
      vLoading: "loading",
      // 没太大用
      setSelectedRows({
        multiple: e,
        selectedRowKeys: l,
        tableRef: n,
        getRowKey: a
      }) {
        const i = a(), o = [];
        for (const r of l.value)
          for (const s of n.data)
            s[i] === r && o.push(s);
        if (e)
          for (const r of o)
            n.toggleRowSelection(r, !0);
        else
          l.value.length > 0 && n.setCurrentRow(o[0]);
      },
      buildSelectionCrudOptions(e) {
        const {
          compute: l
        } = e.useCompute();
        function n(a) {
          const i = e.getRowKey(), o = e.getPageData();
          let r = i;
          N(i) || (r = (m) => m[i]);
          const s = o.map(r), b = e.selectedRowKeys.value.filter((m) => !s.includes(m));
          return p.union(b, a);
        }
        if (e.multiple)
          return {
            table: {
              onSelectionChange: (i = []) => {
                const o = e.getRowKey();
                let r = i.map((s) => s[o]);
                e.crossPage && (r = n(r)), e.onSelectedKeysChanged(r);
              }
            },
            columns: {
              $checked: {
                form: {
                  show: !1
                },
                column: {
                  type: "selection",
                  align: "center",
                  width: "55px",
                  order: -9999,
                  reserveSelection: e.crossPage,
                  columnSetDisabled: !0
                  //禁止在列设置中选择
                }
              }
            }
          };
        {
          const a = (o) => {
            if (o == null) {
              e.onSelectedKeysChanged([]);
              return;
            }
            const r = e.getRowKey(), s = [o[r]];
            e.onSelectedKeysChanged(s);
          }, i = k(() => e.selectedRowKeys.value.length > 0 ? e.selectedRowKeys.value[0] : null);
          return {
            table: {
              highlightCurrentRow: !0,
              onCurrentChange: a
            },
            columns: {
              $selected: {
                form: {
                  show: !1
                },
                column: {
                  align: "center",
                  width: "55px",
                  order: -9999,
                  component: {
                    name: "el-radio",
                    label: l((o) => {
                      if (o.form)
                        return o.form[e.getRowKey()];
                    }),
                    props: {
                      modelValue: i
                    },
                    slots: {
                      default() {
                        return "";
                      }
                    }
                  },
                  conditionalRender: {
                    match() {
                      return !1;
                    }
                  }
                }
              }
            }
          };
        }
      },
      rebuildRenderScope: (e) => e,
      scrollTo(e) {
        var l, n;
        (n = (l = e.tableRef) == null ? void 0 : l.value) == null || n.setScrollTop(e.top);
      },
      onChange({
        onSortChange: e,
        onFilterChange: l,
        bubbleUp: n
      }) {
        return {
          onSortChange: (a) => {
            const {
              column: i,
              prop: o,
              order: r
            } = a;
            e && e({
              isServerSort: o && i.sortable === "custom",
              prop: o,
              order: r,
              asc: r === "ascending"
            }), n((s) => {
              s.onSortChange && s.onSortChange(a);
            });
          },
          onFilterChange: (a) => {
            l(a), n((i) => {
              i.onFilterChange && i.onFilterChange(a);
            });
          }
        };
      }
    }), this.textArea = t({
      name: "el-input",
      type: "textarea",
      modelValue: "modelValue",
      clearable: "clearable"
    }), this.tag = t({
      name: "el-tag",
      type: "type",
      colors: ["info", "success", "warning", "danger"]
    }), this.inputGroup = t({
      name: "el-input-group"
    }), this.input = t({
      name: "el-input",
      clearable: "clearable",
      modelValue: "modelValue"
    }), this.inputPassword = t({
      name: "el-input",
      clearable: "clearable",
      modelValue: "modelValue",
      passwordType: {
        showPassword: !0
      }
    }), this.number = t({
      name: "el-input-number",
      modelValue: "modelValue",
      builder(e) {
        return d(this, e, {});
      }
    }), this.datePicker = t({
      name: "el-date-picker",
      modelValue: "modelValue",
      buildDateType(e) {
        return {
          name: "el-date-picker",
          type: e
        };
      }
    }), this.timePicker = t({
      name: "el-time-picker",
      modelValue: "modelValue"
    }), this.dropdown = t({
      name: "el-dropdown",
      command(e) {
        return {
          onCommand(l) {
            e(l);
          }
        };
      },
      slotName: "dropdown",
      renderMode: "slot"
    }), this.dropdownMenu = t({
      name: "el-dropdown-menu",
      command: () => ({})
    }), this.dropdownItem = t({
      name: "el-dropdown-item",
      command: "command"
    }), this.imageGroup = t({
      name: "fs-box"
    }), this.image = t({
      name: "el-image",
      buildPreviewBind: ({
        url: e,
        urls: l,
        previewUrl: n,
        previewUrls: a,
        index: i
      }) => ({
        "preview-src-list": a,
        "initial-index": i
      }),
      fallback: "error"
    }), this.progress = t({
      name: "el-progress"
    }), this.loading = t({
      name: "loading",
      type: "directive"
    }), this.upload = t({
      id: "uid",
      name: "el-upload",
      type: "",
      typeImageCard: "picture-card",
      typeImage: "picture",
      getStatusFromEvent(e) {
        return e == null ? void 0 : e.status;
      },
      getFileListFromEvent(e, l, n) {
        return n;
      },
      status: {
        success: "success",
        uploading: "uploading"
      },
      isSuccess(e) {
        return e.status === "success";
      },
      limitAdd: 1
    }), this.tabs = t({
      name: "el-tabs",
      modelValue: "modelValue"
    }), this.tabPane = t({
      name: "el-tab-pane",
      key: "name",
      tab: "label"
    }), this.collapse = t({
      name: "el-collapse",
      modelValue: "modelValue",
      keyName: "name"
    }), this.collapseItem = t({
      name: "el-collapse-item",
      key: "name",
      titleSlotName: "title",
      /**
       * element collapse只支持title插槽
       */
      extraSlotName: "not_support_extra",
      builder(e) {
        return d(this, e, {
          slots: {
            [this.titleSlotName]() {
              return h("div", {
                class: "fsel-collapse-item-title fsel-flex-row space-between"
              }, [h("span", {
                class: "title-text"
              }, [e.titleSlot(), B(" ")]), h("span", {
                class: "title-extra"
              }, [e.extraSlot()])]);
            }
          }
        });
      }
    }), this.badge = t({
      name: "el-badge",
      value: "value",
      builder(e) {
        return d(this, e, {
          props: {
            [this.value]: e.value
          }
        });
      }
    }), this.tooltip = t({
      name: "el-tooltip",
      content: "content",
      trigger: "default"
    }), this.divider = t({
      name: "el-divider"
    }), this.popover = t({
      name: "el-popover",
      contentSlotName: "default",
      triggerSlotName: "reference",
      visible: "visible"
    }), u && (this.notification.instance = u.Notification, this.message.instance = u.Message, this.messageBox.instance = u.MessageBox);
  }
}
const g = K;
function P(c) {
  for (const u in g)
    c.component(u, g[u]);
}
function f() {
  const c = new R({
    Message: y,
    Notification: V,
    MessageBox: C
  });
  return S.set(c), c;
}
const E = {
  install(c, u = {}) {
    return u.setupIcons !== !1 && P(c), f();
  },
  set: f
};
export {
  R as Element,
  E as default
};
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidWktZWxlbWVudC5tanMiLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9lbGVtZW50LnRzeCIsIi4uLy4uL3NyYy9pY29ucy50cyIsIi4uLy4uL3NyYy9pbmRleC50cyJdLCJzb3VyY2VzQ29udGVudCI6W251bGwsbnVsbCxudWxsXSwibmFtZXMiOlsiYnVpbGRCaW5kaW5nIiwiY3JlYXRvciIsInVzZVVpUmVuZGVyIiwiRWxlbWVudCIsImNvbnN0cnVjdG9yIiwidGFyZ2V0IiwidHlwZSIsIm1vZGVsVmFsdWUiLCJzd2l0Y2giLCJhY3RpdmVDb2xvciIsImFjdGl2ZVRleHQiLCJhY3RpdmVWYWx1ZSIsImluYWN0aXZlQ29sb3IiLCJpbmFjdGl2ZVRleHQiLCJpbmFjdGl2ZVZhbHVlIiwibmFtZSIsImZvcm1XcmFwcGVyIiwidmlzaWJsZSIsImN1c3RvbUNsYXNzIiwiaXMiLCJ0aXRsZVNsb3ROYW1lIiwiYnVpbGRPbkNsb3NlZEJpbmQiLCJvbkNsb3NlZCIsImJ1aWxkV2lkdGhCaW5kIiwid2lkdGgiLCJidWlsZEluaXRCaW5kIiwiYnVpbGRJbm5lckJpbmQiLCJtZXNzYWdlQm94IiwiaW5zdGFuY2UiLCJ1bmRlZmluZWQiLCJvcGVuIiwiY29udGV4dCIsImNvbmZpcm0iLCJtZXNzYWdlIiwic3VjY2VzcyIsIm1zZyIsImVycm9yIiwid2FybiIsIndhcm5pbmciLCJpbmZvIiwibm90aWZpY2F0aW9uIiwiaWNvbiIsImlzQ29tcG9uZW50IiwiaWNvbnMiLCJhZGQiLCJjb2x1bW5zRmlsdGVyIiwiY29tcGFjdCIsImVkaXQiLCJyZW1vdmUiLCJzZWFyY2giLCJyZWZyZXNoIiwiZXhwb3J0IiwiY2hlY2siLCJzb3J0IiwibGVmdCIsInJpZ2h0IiwiY2xvc2UiLCJhcnJvd0xlZnQiLCJhcnJvd1JpZ2h0IiwibW9yZSIsInBsdXMiLCJ6b29tSW4iLCJ6b29tT3V0IiwicmVmcmVzaExlZnQiLCJyZWZyZXNoUmlnaHQiLCJ1cGxvYWQiLCJmdWxsU2NyZWVuIiwidW5GdWxsU2NyZWVuIiwicXVlc3Rpb24iLCJjYXJldFVwIiwiY2FyZXREb3duIiwiZXllIiwiZGlhbG9nIiwiZm9vdGVyU2xvdE5hbWUiLCJmb290ZXIiLCJvcHRzIiwiRWxEaWFsb2ciLCJidWlsZGVyIiwicHJvcHMiLCJ0aXRsZSIsInNsb3RzIiwiYnV0dG9uR3JvdXAiLCJjb2wiLCJyb3ciLCJjYXJkIiwiY2hlY2tib3hHcm91cCIsImNoZWNrYm94IiwicmVzb2x2ZUV2ZW50IiwiZSIsInZhbHVlIiwib25DaGFuZ2UiLCJjYWxsYmFjayIsImRyYXdlciIsImNvbGxhcHNlVHJhbnNpdGlvbiIsIm9wdGlvbiIsImxhYmVsIiwic2VsZWN0IiwiY2xlYXJhYmxlIiwiZmlsdGVyYWJsZSIsImJ1aWxkTXVsdGlCaW5kaW5nIiwibXVsdGlwbGUiLCJ0cmVlU2VsZWN0Iiwib3B0aW9ucyIsImNoaWxkcmVuIiwiYnVpbGRPcHRpb25LZXlzTmFtZUJpbmRpbmciLCJwYXJhbSIsInJhZGlvIiwicmFkaW9CdXR0b24iLCJyYWRpb0dyb3VwIiwiY2FzY2FkZXIiLCJmaWVsZE5hbWVzIiwibmFtZXNNYXAiLCJmb3JtIiwiaW5saW5lTGF5b3V0IiwibGF5b3V0IiwiaW5saW5lIiwidmFsaWRhdGVXcmFwIiwiZm9ybVJlZiIsInZhbGlkYXRlIiwidHJhbnNmb3JtVmFsaWRhdGVFcnJvcnMiLCJlcnJvcnMiLCJfIiwiZm9yRWFjaCIsIml0ZW0iLCJrZXkiLCJmb3JtSXRlbSIsInByb3AiLCJydWxlcyIsInNraXBWYWxpZGF0aW9uV3JhcHBlciIsImluamVjdEZvcm1JdGVtQ29udGV4dCIsInVzZUZvcm1JdGVtIiwib25CbHVyIiwiYnV0dG9uIiwidGV4dFR5cGUiLCJ0ZXh0IiwibGlua1R5cGUiLCJsaW5rIiwiY2lyY2xlIiwiY29sb3JzIiwicGFnaW5hdGlvbiIsImN1cnJlbnRQYWdlIiwidG90YWwiLCJwYWdlQ291bnQiLCJzZXRDdXJyZW50UGFnZSIsInNldFBhZ2VTaXplIiwiZG9BZnRlckNoYW5nZSIsIm9uQ3VycmVudENoYW5nZSIsImV2ZW50Iiwib25TaXplQ2hhbmdlIiwidGFibGVDb2x1bW4iLCJpbmRleCIsInRhYmxlQ29sdW1uR3JvdXAiLCJ0YWJsZSIsImRhdGEiLCJyZW5kZXJNb2RlIiwiZGVmYXVsdFJvd0tleSIsImZpeGVkSGVhZGVyTmVlZENvbXB1dGVCb2R5SGVpZ2h0IiwiYnVpbGRNYXhIZWlnaHQiLCJtYXhIZWlnaHQiLCJoYXNNYXhIZWlnaHQiLCJoZWFkZXJEb21TZWxlY3RvciIsInZMb2FkaW5nIiwic2V0U2VsZWN0ZWRSb3dzIiwic2VsZWN0ZWRSb3dLZXlzIiwidGFibGVSZWYiLCJnZXRSb3dLZXkiLCJyb3dLZXkiLCJjdXJTZWxlY3RlZFJvd3MiLCJwdXNoIiwidG9nZ2xlUm93U2VsZWN0aW9uIiwibGVuZ3RoIiwic2V0Q3VycmVudFJvdyIsImJ1aWxkU2VsZWN0aW9uQ3J1ZE9wdGlvbnMiLCJyZXEiLCJjb21wdXRlIiwidXNlQ29tcHV0ZSIsImdldENyb3NzUGFnZVNlbGVjdGVkIiwiY3VyU2VsZWN0ZWRJZHMiLCJnZXRQYWdlRGF0YSIsIm1hcElkIiwiaXNGdW5jdGlvbiIsImN1cnJlbnRJZHMiLCJtYXAiLCJvdGhlclBhZ2VTZWxlY3RlZCIsImZpbHRlciIsImluY2x1ZGVzIiwidW5pb24iLCJvblNlbGVjdGlvbkNoYW5nZSIsImNoYW5nZWRSb3dzIiwic2VsZWN0ZWRLZXlzIiwiY3Jvc3NQYWdlIiwib25TZWxlY3RlZEtleXNDaGFuZ2VkIiwiY29sdW1ucyIsIiRjaGVja2VkIiwic2hvdyIsImNvbHVtbiIsImFsaWduIiwib3JkZXIiLCJyZXNlcnZlU2VsZWN0aW9uIiwiY29sdW1uU2V0RGlzYWJsZWQiLCJjaGFuZ2VkIiwiY29tcHV0ZWQiLCJoaWdobGlnaHRDdXJyZW50Um93IiwiJHNlbGVjdGVkIiwiY29tcG9uZW50IiwiY3R4IiwiZGVmYXVsdCIsImNvbmRpdGlvbmFsUmVuZGVyIiwibWF0Y2giLCJyZWJ1aWxkUmVuZGVyU2NvcGUiLCJzY29wZSIsInNjcm9sbFRvIiwic2V0U2Nyb2xsVG9wIiwidG9wIiwib25Tb3J0Q2hhbmdlIiwib25GaWx0ZXJDaGFuZ2UiLCJidWJibGVVcCIsImlzU2VydmVyU29ydCIsInNvcnRhYmxlIiwiYXNjIiwiZXZlbnRzIiwiZmlsdGVycyIsInRleHRBcmVhIiwidGFnIiwiaW5wdXRHcm91cCIsImlucHV0IiwiaW5wdXRQYXNzd29yZCIsInBhc3N3b3JkVHlwZSIsInNob3dQYXNzd29yZCIsIm51bWJlciIsImRhdGVQaWNrZXIiLCJidWlsZERhdGVUeXBlIiwidGltZVBpY2tlciIsImRyb3Bkb3duIiwiY29tbWFuZCIsIm9uQ29tbWFuZCIsIiRldmVudCIsInNsb3ROYW1lIiwiZHJvcGRvd25NZW51IiwiZHJvcGRvd25JdGVtIiwiaW1hZ2VHcm91cCIsImltYWdlIiwiYnVpbGRQcmV2aWV3QmluZCIsInVybCIsInVybHMiLCJwcmV2aWV3VXJsIiwicHJldmlld1VybHMiLCJmYWxsYmFjayIsInByb2dyZXNzIiwibG9hZGluZyIsImlkIiwidHlwZUltYWdlQ2FyZCIsInR5cGVJbWFnZSIsImdldFN0YXR1c0Zyb21FdmVudCIsInN0YXR1cyIsImdldEZpbGVMaXN0RnJvbUV2ZW50IiwicmVzcG9uc2UiLCJmaWxlIiwiZmlsZUxpc3QiLCJ1cGxvYWRpbmciLCJpc1N1Y2Nlc3MiLCJmaWxlSXRlbSIsImxpbWl0QWRkIiwidGFicyIsInRhYlBhbmUiLCJ0YWIiLCJjb2xsYXBzZSIsImtleU5hbWUiLCJjb2xsYXBzZUl0ZW0iLCJleHRyYVNsb3ROYW1lIiwiX2NyZWF0ZVZOb2RlIiwidGl0bGVTbG90IiwiX2NyZWF0ZVRleHRWTm9kZSIsImV4dHJhU2xvdCIsImJhZGdlIiwidG9vbHRpcCIsImNvbnRlbnQiLCJ0cmlnZ2VyIiwiZGl2aWRlciIsInBvcG92ZXIiLCJjb250ZW50U2xvdE5hbWUiLCJ0cmlnZ2VyU2xvdE5hbWUiLCJOb3RpZmljYXRpb24iLCJNZXNzYWdlIiwiTWVzc2FnZUJveCIsImljb25zTGlzdCIsInNldHVwSWNvbnMiLCJhcHAiLCJzZXQiLCJlbGVt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
